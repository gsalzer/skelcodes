{"status":"1","message":"OK","result":[{"SourceCode":"{{\r\n  \"language\": \"Solidity\",\r\n  \"sources\": {\r\n    \"contracts/TideweighLootQuest.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"@openzeppelin/contracts/token/ERC721/extensions/ERC721Enumerable.sol\\\";\\nimport \\\"@openzeppelin/contracts/security/ReentrancyGuard.sol\\\";\\nimport \\\"@openzeppelin/contracts/security/Pausable.sol\\\";\\nimport \\\"./IERC2981.sol\\\";\\nimport \\\"./Base64.sol\\\";\\nimport \\\"./LootInterface.sol\\\";\\nimport \\\"./OwnableWithoutRenounce.sol\\\";\\nimport \\\"./StringsSpecialHex.sol\\\";\\n\\n/* Functionality used to whitelist OpenSea trading address */\\n\\ncontract OwnableDelegateProxy {}\\n\\ncontract ProxyRegistry {\\n    mapping(address => OwnableDelegateProxy) public proxies;\\n}\\n\\n/**\\n * @title Quest for Loot (for Adventurers)\\n *\\n * An art project (some might be tempted to call it a game) based on https://www.lootproject.com/\\n */\\ncontract TideweighLootQuest is ERC721Enumerable, OwnableWithoutRenounce, ReentrancyGuard, Pausable, IERC2981 {\\n\\n    // The quest has been started by the owner\\n    event QuestStarted(address indexed by, uint256 indexed questTokenId);\\n\\n    // Someone contributed to the solution of a quest (this may or may not have solved the quest)\\n    event QuestContributed(address indexed contributor, uint256 indexed questTokenId, uint256 lootTokenId, uint256 lootIdx); \\n\\n    // The quest is solved, i.e., all the Loot required by the quest has been provided\\n    event QuestSolved(uint256 indexed questTokenId);\\n\\n    // A reward has been offered for the next person who contributes to the quest's progress\\n    event RewardOffered(address indexed by, uint256 indexed questTokenId, uint256 amount);\\n\\n    // The reward giver has changed his mind and cancelled the reward\\n    event RewardCancelled(address indexed by, uint256 indexed questTokenId);\\n\\n    // Someone has contributed to the quest's progress and gets the reward, if one is being offered\\n    event RewardClaimed(address indexed by, uint256 indexed questTokenId, uint256 amount);\\n\\n    LootInterface public lootContract;\\n\\n    string[] private locomotion = [\\n        \\\"Fly\\\",\\n        \\\"Walk\\\",\\n        \\\"Crawl\\\",\\n        \\\"Run\\\",\\n        \\\"Teleport\\\",\\n        \\\"Head\\\"\\n    ];\\n\\n    string[] private interlocutorPrefix = [\\n        \\\"Old \\\",\\n        \\\"Ancient \\\",\\n        \\\"Wise \\\",\\n        \\\"Mean \\\",\\n        \\\"Angry \\\",\\n        \\\"Big \\\",\\n        \\\"Grumpy \\\",\\n        \\\"Spindly \\\",\\n        \\\"Mighty \\\"\\n    ];\\n\\n    string[] private interlocutorName = [\\n        // order of the names matters, to get the applicable \\\"standard\\\" possessive pronoun\\n        \\\"Nardok\\\", // 0\\n        \\\"Argul\\\",\\n        \\\"Hagalbar\\\",\\n        \\\"Igor\\\",\\n        \\\"Henndar\\\",\\n        \\\"Rorik\\\",\\n        \\\"Yagul\\\",\\n        \\\"Engar\\\",\\n        \\\"Freya\\\", // 8\\n        \\\"Nyssa\\\",\\n        \\\"Galadrya\\\",\\n        \\\"Renalee\\\",\\n        \\\"Vixen\\\",\\n        \\\"Everen\\\",\\n        \\\"Ciradyl\\\",\\n        \\\"Faelyn\\\",\\n        \\\"Skytaker\\\", //16 \\n        \\\"Skeltor\\\",\\n        \\\"Arachnon\\\",\\n        \\\"Gorgo\\\",\\n        \\\"Hydratis\\\",\\n        \\\"Cerberis\\\",\\n        \\\"Typhox\\\",\\n        \\\"Fenryr\\\"\\n    ];\\n\\n    string[] private interlocutorPossessive = [\\n        \\\"His \\\",\\n        \\\"Her \\\",\\n        \\\"Its \\\"\\n    ];\\n\\n    string[] private locationPrefix = [\\n        \\\"Barren \\\",\\n        \\\"Bleak \\\",\\n        \\\"Desolate \\\",\\n        \\\"Tenebrous \\\",\\n        \\\"Mournful \\\",\\n        \\\"Gray \\\",\\n        \\\"Dark \\\",\\n        \\\"Unknowable \\\"\\n    ];    \\n\\n    string[] private locationName = [\\n        \\\"Sea \\\",\\n        \\\"City \\\",\\n        \\\"Mountain \\\",\\n        \\\"Cave \\\",\\n        \\\"Swamp \\\",\\n        \\\"Desert \\\",\\n        \\\"Abode \\\",\\n        \\\"Pass \\\",\\n        \\\"Forest \\\"\\n    ];\\n\\n    string[] private locationSuffix = [\\n        \\\"of Doom\\\",\\n        \\\"of Passing\\\",\\n        \\\"of Death\\\",\\n        \\\"of Demise\\\",\\n        \\\"of Fate\\\",\\n        \\\"of Passage\\\",\\n        \\\"of Fears\\\"\\n    ];\\n\\n    string[] private lostEntityPrefix = [\\n        \\\"mystical \\\",\\n        \\\"ancient \\\",\\n        \\\"enigmatic \\\",\\n        \\\"transcendental \\\",\\n        \\\"unfathomable \\\",\\n        \\\"\\\" // intentionally left blank\\n    ];\\n\\n    string[] private lostEntityClass = [\\n        \\\"brother\\\",\\n        \\\"sister\\\",\\n        \\\"living sword\\\",\\n        \\\"dragon\\\",\\n        \\\"pet\\\",\\n        \\\"sentient staff\\\",\\n        \\\"animate artefact\\\"\\n    ];\\n\\n    string[] private lostAction = [\\n        \\\" disappeared\\\",\\n        \\\" vanished\\\",\\n        \\\" faded\\\",\\n        \\\" gone missing\\\",\\n        \\\" dematerialized\\\",\\n        \\\" withered\\\"\\n    ];\\n\\n    string[] private gratitudePrefix = [\\n        \\\"eternal \\\",\\n        \\\"unbounded \\\",\\n        \\\"infinite \\\",\\n        \\\"endless \\\",\\n        \\\"immeasurable \\\"\\n    ];\\n\\n    string[] private gratitudeType = [\\n        \\\"thanks!\\\",\\n        \\\"gratitude!\\\",\\n        \\\"appreciation!\\\",\\n        \\\"respect!\\\",\\n        \\\"affection!\\\",\\n        \\\"trust!\\\"\\n    ];\\n\\n    address public proxyRegistryAddress; // OpenSea trading proxy. Zero indicates that OpenSea whitelisting is disabled\\n\\n    mapping(uint256 => uint256) public usedUpLoot; // Tracks the Loot that has been used up to solve Quests\\n\\n    mapping(uint256 => uint256) public requiredLootResolutionStatus; // Tracks how much of the required Loot has been provided\\n\\n    mapping(uint256 => uint256) public questToRewardAmountMap; // Tracks how much reward is on offer for a quest's resolution\\n\\n    mapping(uint256 => address) public questToRewardSourceMap; // Tracks who offered the reward for a quest's resolution\\n\\n    uint256 public artistShare = 0; // ETH owed to the artist\\n\\n    // order matters from here on, to pack the fields\\n\\n    uint16 royalty = 10;    // Royalty expected by the artist on secondary transfers (IERC2981)\\n\\n    uint16 public tokensLeftForSale = 1000; // Maximum number of tokens that can be acquired without owning Loot\\n\\n    uint16 public tokensLeftForPromotion = 100; // Maximum number of tokens that can be handed out by the owner for promotional purposes\\n\\n    uint64 public minimumReward = 0.01 ether;\\n    uint64 public maximumReward = 1 ether;\\n    uint64 public minimumMintPrice = 0.5 ether;\\n\\n    constructor(string memory name, string memory symbol, uint256 initialTokensForOwner, address _proxyRegistryAddress, address _lootContract) ERC721(name, symbol) {\\n\\n        proxyRegistryAddress = _proxyRegistryAddress;\\n        lootContract = LootInterface(_lootContract);\\n\\n        for(uint256 cnt = 0; cnt < initialTokensForOwner; cnt++) {\\n            _safeMint(_msgSender(), totalSupply()+1);\\n        }\\n\\n    }\\n\\n    //\\n    // ERC165 interface implementation\\n    //\\n\\n    function supportsInterface(bytes4 interfaceId) public view override returns (bool) {\\n        return ERC721Enumerable.supportsInterface(interfaceId)\\n            || interfaceId == type(IERC2981).interfaceId\\n            || interfaceId == 0x7f5828d0; // Ownable\\n    }\\n\\n    /**\\n     * @dev See {IERC721-isApprovedForAll}.\\n     */\\n    function isApprovedForAll(address owner, address operator) public view virtual override returns (bool) {\\n        // Whitelist OpenSea proxy contract for easy trading - if we have a valid proxy registry address on file\\n        if (proxyRegistryAddress != address(0)) {\\n            ProxyRegistry proxyRegistry = ProxyRegistry(proxyRegistryAddress);\\n            if (address(proxyRegistry.proxies(owner)) == operator) {\\n                return true;\\n            }\\n        }\\n\\n        return super.isApprovedForAll(owner, operator);\\n    }\\n\\n    // \\n    // ERC721 functions\\n    //\\n\\n    function exists(uint256 tokenId) public view returns (bool) {\\n        return _exists(tokenId);\\n    }\\n\\n    function mintQuest(address recipient) internal nonReentrant {\\n        require(totalSupply() < 10000 , \\\"All quests have been set\\\");\\n        require(balanceOf(recipient) < 3, \\\"Can hold max 3 quests at once\\\");\\n        _safeMint(recipient, totalSupply()+1);\\n\\n    }\\n\\n    /**\\n     * @dev Claim Quest for free if you're a holder of Loot\\n     *\\n     */\\n    function claimQuestAsLootHolder() public {\\n        require(lootContract.balanceOf(_msgSender()) > 0, \\\"Must hold Loot (for Adventurers) to claim for free\\\");\\n        mintQuest(_msgSender());\\n    }\\n\\n    /**\\n     * @dev Pay for a Quest for free if you want a token but don't hold any Loot\\n     *\\n     */\\n    function mint() public payable {\\n        require(tokensLeftForSale > 0, \\\"No more tokens for sale\\\");\\n        require(msg.value >= minimumMintPrice, \\\"Insufficient ether provided\\\");\\n        artistShare += msg.value;\\n        tokensLeftForSale -= 1;\\n        mintQuest(_msgSender());\\n    }\\n    \\n    /**\\n     * @dev Some quests are available for promotional purposes\\n     *\\n     */\\n    function mintPromotion(address recipient) public onlyOwner {\\n        require(recipient != address(0), \\\"ERC721: mint to the zero address\\\");\\n        require(tokensLeftForPromotion > 0, \\\"No more tokens for promotion\\\");\\n        tokensLeftForPromotion -= 1;\\n        mintQuest(recipient);\\n    }\\n    \\n    function random(string memory input) internal pure returns (uint256) {\\n        return uint256(keccak256(abi.encodePacked(input)));\\n    }\\n\\n    function lcgRandom(uint256 xk) internal pure returns (uint256 xkplusone) {\\n        return (16807 * (xk % 2147483647)) % 2147483647;\\n    }\\n    \\n    function pluckIndex(uint256 tokenId, string memory keyPrefix, string[] memory sourceArray) internal pure returns (uint256 index) {\\n        return  random(string(abi.encodePacked(keyPrefix, Strings.toString(tokenId)))) % sourceArray.length;\\n    }\\n\\n    function pluck(uint256 tokenId, string memory keyPrefix, string[] memory sourceArray) internal pure returns (string memory) {\\n        return sourceArray[pluckIndex(tokenId, keyPrefix, sourceArray)];\\n    }\\n\\n    function getLocomotion(uint256 tokenId) public view returns (string memory) {\\n        return pluck(tokenId, \\\"Locomotion\\\", locomotion);\\n    }\\n\\n    function getInterlocutorPrefix(uint256 tokenId) internal view returns (string memory) {\\n        return pluck(tokenId, \\\"InterlocutorPrefix\\\", interlocutorPrefix);\\n    }\\n\\n    function getInterlocutorName(uint256 tokenId) internal view returns (string memory) {\\n        return pluck(tokenId, \\\"InterlocutorName\\\", interlocutorName);\\n    }\\n\\n    function getInterlocutorPossessive(uint256 tokenId) public view returns (string memory) {\\n        return interlocutorPossessive[pluckIndex(tokenId, \\\"InterlocutorName\\\", interlocutorName) / 8]; // the use of interlocutorName here is correct\\n    }\\n\\n    function getLocationPrefix(uint256 tokenId) internal view returns (string memory) {\\n        return pluck(tokenId, \\\"LocationPrefix\\\", locationPrefix);\\n    }\\n\\n    function getLocationName(uint256 tokenId) internal view returns (string memory) {\\n        return pluck(tokenId, \\\"LocationName\\\", locationName);\\n    }\\n\\n    function getLocationSuffix(uint256 tokenId) internal view returns (string memory) {\\n        return pluck(tokenId, \\\"LocationSuffix\\\", locationSuffix);\\n    }\\n\\n    function getLostEntityPrefix(uint256 tokenId) public view returns (string memory) {\\n        return pluck(tokenId, \\\"LostEntityPrefix\\\", lostEntityPrefix);\\n    }\\n\\n    function getLostEntityClass(uint256 tokenId) public view returns (string memory) {\\n        return pluck(tokenId, \\\"LostEntityClass\\\", lostEntityClass);\\n    }\\n\\n    function getLostAction(uint256 tokenId) public view returns (string memory) {\\n        return pluck(tokenId, \\\"LostAction\\\", lostAction);\\n    }\\n\\n    function getGratitudePrefix(uint256 tokenId) public view returns (string memory) {\\n        return pluck(tokenId, \\\"GratitudePrefix\\\", gratitudePrefix);\\n    }\\n\\n    function getGratitudeType(uint256 tokenId) public view returns (string memory) {\\n        return pluck(tokenId, \\\"GratitudeType\\\", gratitudeType);\\n    }\\n\\n    function getInterlocutor(uint256 tokenId) public view returns (string memory) {\\n        return string(abi.encodePacked(getInterlocutorPrefix(tokenId), getInterlocutorName(tokenId)));\\n    }\\n\\n    function getLocation(uint256 tokenId) public view returns (string memory) {\\n        return string(abi.encodePacked(getLocationPrefix(tokenId), getLocationName(tokenId), getLocationSuffix(tokenId)));\\n    }\\n\\n    function getLostEntity(uint256 tokenId) public view returns (string memory) {\\n        return string(abi.encodePacked(getLostEntityPrefix(tokenId), getLostEntityClass(tokenId)));\\n    }\\n\\n    function getDifficulty(uint256 tokenId) public pure returns (uint256 difficulty) {\\n        uint256 r = random(string(abi.encodePacked(\\\"Difficulty\\\", Strings.toString(tokenId)))) % 100;\\n        if(     r <  5) return 1;\\n        else if(r < 20) return 2;\\n        else if(r < 45) return 3;\\n        else if(r < 70) return 4;\\n        else if(r < 85) return 5;\\n        else if(r < 95) return 6;\\n        else if(r < 99) return 7;\\n        else            return 8;\\n    }\\n\\n    /**\\n     * @dev Returns mask of requires loot indices\\n     *\\n     * lootIdxMask defined analogously to lootIdx as for solveQuest, where the value of each activated bit = (1 << lootIdx)\\n     */\\n    function getRequiredLootIdxMask(uint256 tokenId) public pure returns (uint256 lootIdxMask) {\\n        uint256 difficulty = getDifficulty(tokenId);\\n        uint256 chosen = 0;\\n        lootIdxMask = 0;\\n        uint256 randTmp = random(string(abi.encodePacked(\\\"Loots\\\", Strings.toString(tokenId))));\\n        while(chosen < difficulty) { // need to iterate in a random fashion\\n            randTmp = lcgRandom(randTmp);\\n            uint256 newlyChosenPosition = uint256(randTmp) % 8;\\n            if(lootIdxMask & (1 << newlyChosenPosition) == 0) {\\n                // Loot was not chosen previously, do so now\\n                lootIdxMask |= (1 << newlyChosenPosition);\\n                chosen += 1;\\n            }\\n        }\\n    }\\n\\n    /**\\n     * @dev Enumeration of loot indices\\n     *\\n     * lootIdx defined identically as for solveQuest\\n     *\\n     * position must be in [0, difficulty)\\n     */\\n    function getRequiredLootIdx(uint256 tokenId, uint256 position) public pure returns (uint256 lootIdx) {\\n        uint lootIdxMask = getRequiredLootIdxMask(tokenId);\\n        uint256 cnt = 0;\\n        for(uint i = 0; i < 8; i++) {\\n            if(lootIdxMask & (1 << i) != 0) {\\n                if(cnt == position) return i;\\n                cnt++;\\n            }\\n        }\\n        revert(\\\"Must stay below difficulty\\\"); // If we arrive here, the caller requested an impossible position at the given difficulty level\\n    }\\n\\n    /**\\n     * @dev Multiplicity of each lootIdx\\n     *\\n     * lootIdx defined identically as for solveQuest\\n     */\\n    function getRequiredLootIdxMultiplicity(uint256 tokenId, uint256 requiredLootIdx) public pure returns (uint256 multiplicity) {\\n        if(getRequiredLootIdxMask(tokenId) & (1 << requiredLootIdx) == 0) return 0;\\n        uint256 r = random(string(abi.encodePacked(\\\"Multiplicity\\\", Strings.toString(tokenId + 27644437 * requiredLootIdx)))) % 100;\\n        if(     r < 60) return 1;\\n        else if(r < 90) return 2;\\n        else            return 3;\\n    }\\n\\n    function lookupLootName(uint256 lootTokenId, uint256 lootIdx) internal view returns (string memory) {\\n        string memory loot;\\n        if(     lootIdx == 0) loot = lootContract.getWeapon(lootTokenId);\\n        else if(lootIdx == 1) loot = lootContract.getChest(lootTokenId);\\n        else if(lootIdx == 2) loot = lootContract.getHead(lootTokenId);\\n        else if(lootIdx == 3) loot = lootContract.getWaist(lootTokenId);\\n        else if(lootIdx == 4) loot = lootContract.getFoot(lootTokenId);\\n        else if(lootIdx == 5) loot = lootContract.getHand(lootTokenId);\\n        else if(lootIdx == 6) loot = lootContract.getNeck(lootTokenId);\\n        else if(lootIdx == 7) loot = lootContract.getRing(lootTokenId);\\n        return loot;\\n    }\\n\\n    /**\\n     * @dev Required Loot\\n     *\\n     * lootIdx defined identically as for solveQuest\\n     * variantIdx must stay below lootIdxMultiplicity for chosen lootIdx\\n     */\\n    function getRequiredLoot(uint256 questTokenId, uint256 requiredLootIdx, uint256 variantIdx) public view returns (string memory) {\\n        require(variantIdx < getRequiredLootIdxMultiplicity(questTokenId, requiredLootIdx), \\\"Loot must be required\\\");\\n        bytes32[3] memory requiredLoot;\\n        uint256 variantsFounds = 0;\\n        uint256 samplingLootPrng = random(string(abi.encodePacked(\\\"SamplingLoot\\\", Strings.toString(questTokenId + 27644437 * requiredLootIdx))));\\n        do {\\n            uint256 samplingLootTokenId = 1 + (samplingLootPrng % 7777);\\n            string memory candidateLoot = lookupLootName(samplingLootTokenId, requiredLootIdx);\\n            bool alreadyKnown = false;\\n            for(uint256 lookback = 0; lookback < requiredLoot.length; lookback++) {\\n                if(keccak256(abi.encodePacked(candidateLoot)) == requiredLoot[lookback]) {\\n                    alreadyKnown = true;\\n                }\\n            }\\n            if(!alreadyKnown) {\\n                requiredLoot[variantsFounds] = keccak256(abi.encodePacked(candidateLoot));\\n                variantsFounds += 1;\\n                if(variantIdx < variantsFounds) return candidateLoot;\\n            }\\n            samplingLootPrng = lcgRandom(samplingLootPrng);\\n        } while(true);\\n        return \\\"\\\"; // this can actually never happen...\\n    }\\n\\n    function buildAttributes(uint256 tokenId, bool questSolved) internal pure returns (string memory) {\\n        string memory questStatus;\\n        if(questSolved) {\\n            questStatus = \\\"Solved\\\";\\n        } else {\\n            questStatus = \\\"Open\\\";\\n        }\\n        return string(abi.encodePacked('\\\"attributes\\\": [{ \\\"trait_type\\\": \\\"Quest\\\", \\\"value\\\": \\\"', questStatus, '\\\" }, { \\\"trait_type\\\": \\\"Difficulty\\\", \\\"value\\\": ', Strings.toString(getDifficulty(tokenId)),' }],'));\\n    }\\n\\n    function buildRequiredLootList(uint256 tokenId) internal view returns (string memory result, uint256 nextLineY) {\\n        string[64] memory parts;\\n        uint256 partCounter = 0;\\n        nextLineY = 120;\\n        uint256 difficulty = getDifficulty(tokenId);\\n        for(uint256 loot = 0; loot < difficulty; loot++) {\\n            parts[partCounter++] = string(abi.encodePacked('</text><text x=\\\"10\\\" y=\\\"', Strings.toString(nextLineY) ,'\\\" class=\\\"base\\\">'));\\n            uint256 requiredLootIdx = getRequiredLootIdx(tokenId, loot);\\n            uint256 variants = getRequiredLootIdxMultiplicity(tokenId, requiredLootIdx);\\n            for(uint256 variantIdx = 0; variantIdx < variants; variantIdx++) {\\n                parts[partCounter++] = getRequiredLoot(tokenId, requiredLootIdx, variantIdx);\\n                if(variantIdx + 1 < variants) {\\n                    if(variantIdx == 1) {\\n                        nextLineY += 20;\\n                        parts[partCounter++] = string(abi.encodePacked(',</text><text x=\\\"10\\\" y=\\\"', Strings.toString(nextLineY) ,'\\\" class=\\\"base\\\">or '));\\n                    } else {\\n                        parts[partCounter++] = ', or ';\\n                    }\\n                }\\n            }\\n            nextLineY += 20;\\n        }\\n        for(uint256 assemblyPart = 0; assemblyPart < partCounter; assemblyPart++) {\\n            result = string(abi.encodePacked(result, parts[assemblyPart]));\\n        }\\n    }\\n    function buildGraphics(uint256 tokenId) internal pure returns (string memory) {\\n        string[6] memory parts;\\n        parts[ 0] = '<svg xmlns=\\\"http://www.w3.org/2000/svg\\\" preserveAspectRatio=\\\"xMinYMin meet\\\" viewBox=\\\"0 0 500 500\\\"><style>.base{fill:black;font-family:serif;font-size:14px;} .bold{font-weight:bold;}';\\n        for(uint256 i = 1; i <= 4; i++) {\\n            parts[i] = string(abi.encodePacked(' .st', Strings.toString(i),'{fill:#',StringsSpecialHex.toHexStringWithoutPrefixWithoutLengthCheck(uint24(random(Strings.toString(tokenId*7841+i))), 3),';stroke-miterlimit:10;}'));\\n        }\\n        parts[ 5] = '</style><rect width=\\\"100%\\\" height=\\\"100%\\\" fill=\\\"lightgray\\\" /><path class=\\\"st1\\\" d=\\\"M343.7,364.7c0,0,0,33.5,0,49c0,13.6,49.1,38.4,49.1,38.4v-87.4H343.7z\\\"/><rect x=\\\"343.7\\\" y=\\\"309.7\\\" class=\\\"st2\\\" width=\\\"49.1\\\" height=\\\"55\\\"/><path class=\\\"st3\\\" d=\\\"M441.8,364.7c0,0,0,33.5,0,49c0,13.6-49.1,38.4-49.1,38.4v-87.4H441.8z\\\"/><rect x=\\\"392.8\\\" y=\\\"309.7\\\" class=\\\"st4\\\" width=\\\"49.1\\\" height=\\\"55\\\"/><text x=\\\"10\\\" y=\\\"20\\\" class=\\\"base\\\">';\\n        return string(abi.encodePacked(parts[0], parts[1], parts[2], parts[3], parts[4], parts[5]));\\n    }\\n\\n    function tokenURI(uint256 tokenId) override public view returns (string memory) {\\n        require(_exists(tokenId), \\\"URI query for nonexistent token\\\");\\n        bool questSolved = isQuestSolved(tokenId);\\n        \\n        string[3] memory questNameParts;\\n        questNameParts[ 0] = getInterlocutor(tokenId);\\n        questNameParts[ 1] = ' in the ';\\n        questNameParts[ 2] = getLocation(tokenId);\\n        string memory questName = string(abi.encodePacked(questNameParts[0], questNameParts[1], questNameParts[2]));\\n\\n        (string memory lootList, uint256 nextLineY) = buildRequiredLootList(tokenId);\\n        string[20] memory parts;\\n        parts[ 0] = buildGraphics(tokenId);\\n        parts[ 1] = getLocomotion(tokenId);\\n        parts[ 2] = ' to ';\\n        // insert questName here\\n        parts[ 3] = '. </text><text x=\\\"10\\\" y=\\\"40\\\" class=\\\"base\\\">';\\n        parts[ 4] = getInterlocutorPossessive(tokenId);\\n        parts[ 5] = getLostEntity(tokenId);\\n        parts[ 6] = ' has ';\\n        parts[ 7] = getLostAction(tokenId);\\n        parts[ 8] = '. </text><text x=\\\"10\\\" y=\\\"60\\\" class=\\\"base\\\">';\\n        parts[ 9] = 'To help the ';\\n        parts[10] = getLostEntityClass(tokenId);\\n        parts[11] = ', use all of the items on the list below. </text><text x=\\\"10\\\" y=\\\"80\\\" class=\\\"base\\\">You\\\\'ll be rewarded with ';\\n        parts[12] = getGratitudePrefix(tokenId);\\n        parts[13] = getGratitudeType(tokenId);\\n        parts[14] = lootList;\\n        if(questSolved) {\\n            parts[18] = string(abi.encodePacked('</text><text x=\\\"10\\\" y=\\\"', Strings.toString(nextLineY + 20),'\\\" class=\\\"base bold\\\">Quest successfully solved!'));\\n        }\\n        parts[19] = '</text></svg>';\\n\\n        string memory output = string(abi.encodePacked(parts[0], parts[1], parts[2], questName, parts[3], parts[4], parts[5], parts[6], parts[7]));\\n        output = string(abi.encodePacked(output, parts[8], parts[9], parts[10], parts[11], parts[12], parts[13], parts[14]));\\n        output = string(abi.encodePacked(output, parts[15], parts[16], parts[17], parts[18], parts[19]));\\n        \\n        string memory json = Base64.encode(bytes(string(abi.encodePacked(\\n            '{\\\"name\\\": \\\"Quest #', \\n            Strings.toString(tokenId), \\n            ' - ',\\n            questName,\\n            '\\\", ', \\n            buildAttributes(tokenId, questSolved),\\n            ' \\\"description\\\": \\\"Each Quest is randomly generated on chain. Solve it by using the appropriate Loot (for Adventurers), or reward others to do so.\\\", \\\"image\\\": \\\"data:image/svg+xml;base64,', \\n            Base64.encode(bytes(output)), \\n            '\\\"}'))));\\n        output = string(abi.encodePacked('data:application/json;base64,', json));\\n\\n        return output;\\n    }\\n\\n    /**\\n     * @dev Solve a quest, or contribute to the quest's solution\\n     *\\n     * lootIdx:\\n     *   0 = weapon\\n     *   1 = chest\\n     *   2 = head\\n     *   3 = waist\\n     *   4 = foot\\n     *   5 = hand\\n     *   6 = neck\\n     *   7 = ring\\n     */\\n    function solveQuest(uint256 questTokenId, uint256 lootIdx, uint256 variantIdx, uint256 providedLootTokenId) external whenNotPaused {\\n        require(_msgSender() == lootContract.ownerOf(providedLootTokenId), \\\"Can only apply own(ed) Loot\\\");\\n        getRequiredLootIdxMask(questTokenId) & (1 << lootIdx);\\n        require(requiredLootResolutionStatus[questTokenId / 32] & ((1 << lootIdx) << (8 * (questTokenId % 32))) == 0, \\\"Loot must still be missing\\\");\\n        require(usedUpLoot[providedLootTokenId / 32] & ((1 << lootIdx) << (8 * (providedLootTokenId % 32))) == 0, \\\"Provided Loot was used before\\\");\\n\\n        if(((requiredLootResolutionStatus[questTokenId / 32] >> (8 * (questTokenId % 32)))) & 0xff == 0) {\\n            require(_msgSender() == ownerOf(questTokenId), \\\"Only owner can begin quest\\\");\\n            emit QuestStarted(_msgSender(), questTokenId);\\n        }\\n        \\n        string memory providedLoot = lookupLootName(providedLootTokenId, lootIdx);\\n        string memory requiredLoot = getRequiredLoot(questTokenId, lootIdx, variantIdx);\\n        require(keccak256(abi.encodePacked(providedLoot)) == keccak256(abi.encodePacked(requiredLoot)), \\\"Matching loot must be provided\\\");\\n\\n        requiredLootResolutionStatus[questTokenId / 32] |= ((1 << lootIdx) << (8 * (questTokenId % 32))); // Mark required Loot as provided\\n        usedUpLoot[providedLootTokenId / 32] |= ((1 << lootIdx) << (8 * (providedLootTokenId % 32))); // Mark provided Loot as used up\\n\\n        emit QuestContributed(_msgSender(), questTokenId, providedLootTokenId, lootIdx);\\n\\n        if(isQuestSolved(questTokenId)) {\\n            emit QuestSolved(questTokenId);\\n        }\\n\\n        uint256 reward = questToRewardAmountMap[questTokenId];\\n        if(reward > 0) {\\n            // Zero out the applicable reward, to prevent a reentrancy attack\\n            delete questToRewardAmountMap[questTokenId];\\n            delete questToRewardSourceMap[questTokenId];\\n\\n            emit RewardClaimed(_msgSender(), questTokenId, reward);\\n            // The following MUST be the very last action that we're doing here\\n            payable(_msgSender()).transfer(reward);\\n        }\\n\\n    }\\n\\n    /**\\n     * @dev Get resolution state of quest\\n     */\\n    function isQuestSolved(uint256 questTokenId) public view returns (bool solved) {\\n        return ((requiredLootResolutionStatus[questTokenId / 32] >> (8 * (questTokenId % 32)))) & 0xff\\n            == getRequiredLootIdxMask(questTokenId);\\n    }\\n\\n    /**\\n     * @dev set allowed reward bounds\\n     */\\n    function setRewardBounds(uint64 _minimumReward, uint64 _maximumReward) external onlyOwner {\\n        minimumReward = _minimumReward;\\n        maximumReward = _maximumReward;\\n    }\\n\\n    /**\\n     * @dev Offer a reward to the next person who contributes to a quest's resolution\\n     */\\n    function offerReward(uint256 questTokenId) external payable whenNotPaused {\\n        require(msg.value <= maximumReward, \\\"This is not a bank\\\");\\n        require(msg.value >= minimumReward, \\\"Seriously, that\\\\'s all?\\\");\\n        require(questToRewardSourceMap[questTokenId] == address(0) && questToRewardAmountMap[questTokenId] == 0, \\\"Only 1 active reward per quest\\\");\\n        \\n        uint256 reward = (100 - royalty) * msg.value / 100;\\n        questToRewardAmountMap[questTokenId] = reward;\\n        questToRewardSourceMap[questTokenId] = _msgSender();\\n        artistShare += msg.value - reward; // The artist gets the rest - after all, this Quest is all about Loot ;-)\\n        \\n        emit RewardOffered(_msgSender(), questTokenId, msg.value);\\n    }\\n\\n    /**\\n     * @dev If someone really changes his mind, give back the reward - minus the Loot that the artist has already got, sorry...\\n     */\\n    function cancelReward(uint256 questTokenId) external whenNotPaused {\\n        require(questToRewardSourceMap[questTokenId] == _msgSender(), \\\"Must have offered the reward\\\");\\n\\n        uint256 reward = questToRewardAmountMap[questTokenId];\\n\\n        // Zero out the applicable reward, to prevent a reentrancy attack\\n        delete questToRewardAmountMap[questTokenId];\\n        delete questToRewardSourceMap[questTokenId];\\n\\n        emit RewardCancelled(_msgSender(), questTokenId);\\n        \\n        // The following MUST be the very last action that we're doing here\\n        payable(_msgSender()).transfer(reward);\\n    }\\n\\n    /**\\n     * @dev Withdraw artist share of funds\\n     *\\n     */\\n    function withdrawArtistShare() external onlyOwner {\\n        uint256 withdrawal = artistShare;\\n        artistShare -= withdrawal;\\n        payable(owner()).transfer(withdrawal);\\n    }\\n\\n    /**\\n     * @dev Hook that is called before any token transfer. This includes minting\\n     * and burning.\\n     *\\n     * Used here to implement pausing of contract\\n     */\\n    function _beforeTokenTransfer(\\n        address from,\\n        address to,\\n        uint256 tokenId\\n    ) internal virtual override whenNotPaused {\\n        super._beforeTokenTransfer(from, to, tokenId);\\n    }\\n\\n    /**\\n     * @dev Pause contract\\n     */\\n    function pause() public onlyOwner {\\n        _pause();\\n    }\\n\\n    /**\\n     * @dev Unpause contract\\n     */\\n    function unpause() public onlyOwner {\\n        _unpause();\\n    }\\n\\n    //\\n    // ERC2981 royalties interface implementation\\n    //\\n\\n    /**\\n     * @dev See {IERC2981-royaltyInfo}.\\n     */\\n\\n    function royaltyInfo(uint256 /* _tokenId */, uint256 _value) external view override returns (address receiver, uint256 royaltyAmount) {\\n        return (owner(), royalty * _value / 100);\\n    }\\n\\n    /**\\n     * @dev Update expected royalty\\n     */\\n    function setRoyaltyInfo(uint16 percentage) external onlyOwner {\\n        royalty = percentage;\\n    }\\n\\n    /**\\n     * @dev set minimum price for paid mints\\n     */\\n    function setMinimumMintPrice(uint64 _minimumMintPrice) external onlyOwner {\\n        minimumMintPrice = _minimumMintPrice;\\n    }\\n\\n    //\\n    // OpenSea registry functions\\n    //\\n\\n    /* @dev Update the OpenSea proxy registry address\\n     *\\n     * Zero address is allowed, and disables the whitelisting\\n     *\\n     */\\n    function setProxyRegistryAddress(address _proxyRegistryAddress) external onlyOwner {\\n        proxyRegistryAddress = _proxyRegistryAddress;\\n    }\\n\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/token/ERC721/extensions/ERC721Enumerable.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../ERC721.sol\\\";\\nimport \\\"./IERC721Enumerable.sol\\\";\\n\\n/**\\n * @dev This implements an optional extension of {ERC721} defined in the EIP that adds\\n * enumerability of all the token ids in the contract as well as all token ids owned by each\\n * account.\\n */\\nabstract contract ERC721Enumerable is ERC721, IERC721Enumerable {\\n    // Mapping from owner to list of owned token IDs\\n    mapping(address => mapping(uint256 => uint256)) private _ownedTokens;\\n\\n    // Mapping from token ID to index of the owner tokens list\\n    mapping(uint256 => uint256) private _ownedTokensIndex;\\n\\n    // Array with all token ids, used for enumeration\\n    uint256[] private _allTokens;\\n\\n    // Mapping from token id to position in the allTokens array\\n    mapping(uint256 => uint256) private _allTokensIndex;\\n\\n    /**\\n     * @dev See {IERC165-supportsInterface}.\\n     */\\n    function supportsInterface(bytes4 interfaceId) public view virtual override(IERC165, ERC721) returns (bool) {\\n        return interfaceId == type(IERC721Enumerable).interfaceId || super.supportsInterface(interfaceId);\\n    }\\n\\n    /**\\n     * @dev See {IERC721Enumerable-tokenOfOwnerByIndex}.\\n     */\\n    function tokenOfOwnerByIndex(address owner, uint256 index) public view virtual override returns (uint256) {\\n        require(index < ERC721.balanceOf(owner), \\\"ERC721Enumerable: owner index out of bounds\\\");\\n        return _ownedTokens[owner][index];\\n    }\\n\\n    /**\\n     * @dev See {IERC721Enumerable-totalSupply}.\\n     */\\n    function totalSupply() public view virtual override returns (uint256) {\\n        return _allTokens.length;\\n    }\\n\\n    /**\\n     * @dev See {IERC721Enumerable-tokenByIndex}.\\n     */\\n    function tokenByIndex(uint256 index) public view virtual override returns (uint256) {\\n        require(index < ERC721Enumerable.totalSupply(), \\\"ERC721Enumerable: global index out of bounds\\\");\\n        return _allTokens[index];\\n    }\\n\\n    /**\\n     * @dev Hook that is called before any token transfer. This includes minting\\n     * and burning.\\n     *\\n     * Calling conditions:\\n     *\\n     * - When `from` and `to` are both non-zero, ``from``'s `tokenId` will be\\n     * transferred to `to`.\\n     * - When `from` is zero, `tokenId` will be minted for `to`.\\n     * - When `to` is zero, ``from``'s `tokenId` will be burned.\\n     * - `from` cannot be the zero address.\\n     * - `to` cannot be the zero address.\\n     *\\n     * To learn more about hooks, head to xref:ROOT:extending-contracts.adoc#using-hooks[Using Hooks].\\n     */\\n    function _beforeTokenTransfer(\\n        address from,\\n        address to,\\n        uint256 tokenId\\n    ) internal virtual override {\\n        super._beforeTokenTransfer(from, to, tokenId);\\n\\n        if (from == address(0)) {\\n            _addTokenToAllTokensEnumeration(tokenId);\\n        } else if (from != to) {\\n            _removeTokenFromOwnerEnumeration(from, tokenId);\\n        }\\n        if (to == address(0)) {\\n            _removeTokenFromAllTokensEnumeration(tokenId);\\n        } else if (to != from) {\\n            _addTokenToOwnerEnumeration(to, tokenId);\\n        }\\n    }\\n\\n    /**\\n     * @dev Private function to add a token to this extension's ownership-tracking data structures.\\n     * @param to address representing the new owner of the given token ID\\n     * @param tokenId uint256 ID of the token to be added to the tokens list of the given address\\n     */\\n    function _addTokenToOwnerEnumeration(address to, uint256 tokenId) private {\\n        uint256 length = ERC721.balanceOf(to);\\n        _ownedTokens[to][length] = tokenId;\\n        _ownedTokensIndex[tokenId] = length;\\n    }\\n\\n    /**\\n     * @dev Private function to add a token to this extension's token tracking data structures.\\n     * @param tokenId uint256 ID of the token to be added to the tokens list\\n     */\\n    function _addTokenToAllTokensEnumeration(uint256 tokenId) private {\\n        _allTokensIndex[tokenId] = _allTokens.length;\\n        _allTokens.push(tokenId);\\n    }\\n\\n    /**\\n     * @dev Private function to remove a token from this extension's ownership-tracking data structures. Note that\\n     * while the token is not assigned a new owner, the `_ownedTokensIndex` mapping is _not_ updated: this allows for\\n     * gas optimizations e.g. when performing a transfer operation (avoiding double writes).\\n     * This has O(1) time complexity, but alters the order of the _ownedTokens array.\\n     * @param from address representing the previous owner of the given token ID\\n     * @param tokenId uint256 ID of the token to be removed from the tokens list of the given address\\n     */\\n    function _removeTokenFromOwnerEnumeration(address from, uint256 tokenId) private {\\n        // To prevent a gap in from's tokens array, we store the last token in the index of the token to delete, and\\n        // then delete the last slot (swap and pop).\\n\\n        uint256 lastTokenIndex = ERC721.balanceOf(from) - 1;\\n        uint256 tokenIndex = _ownedTokensIndex[tokenId];\\n\\n        // When the token to delete is the last token, the swap operation is unnecessary\\n        if (tokenIndex != lastTokenIndex) {\\n            uint256 lastTokenId = _ownedTokens[from][lastTokenIndex];\\n\\n            _ownedTokens[from][tokenIndex] = lastTokenId; // Move the last token to the slot of the to-delete token\\n            _ownedTokensIndex[lastTokenId] = tokenIndex; // Update the moved token's index\\n        }\\n\\n        // This also deletes the contents at the last position of the array\\n        delete _ownedTokensIndex[tokenId];\\n        delete _ownedTokens[from][lastTokenIndex];\\n    }\\n\\n    /**\\n     * @dev Private function to remove a token from this extension's token tracking data structures.\\n     * This has O(1) time complexity, but alters the order of the _allTokens array.\\n     * @param tokenId uint256 ID of the token to be removed from the tokens list\\n     */\\n    function _removeTokenFromAllTokensEnumeration(uint256 tokenId) private {\\n        // To prevent a gap in the tokens array, we store the last token in the index of the token to delete, and\\n        // then delete the last slot (swap and pop).\\n\\n        uint256 lastTokenIndex = _allTokens.length - 1;\\n        uint256 tokenIndex = _allTokensIndex[tokenId];\\n\\n        // When the token to delete is the last token, the swap operation is unnecessary. However, since this occurs so\\n        // rarely (when the last minted token is burnt) that we still do the swap here to avoid the gas cost of adding\\n        // an 'if' statement (like in _removeTokenFromOwnerEnumeration)\\n        uint256 lastTokenId = _allTokens[lastTokenIndex];\\n\\n        _allTokens[tokenIndex] = lastTokenId; // Move the last token to the slot of the to-delete token\\n        _allTokensIndex[lastTokenId] = tokenIndex; // Update the moved token's index\\n\\n        // This also deletes the contents at the last position of the array\\n        delete _allTokensIndex[tokenId];\\n        _allTokens.pop();\\n    }\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/security/ReentrancyGuard.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Contract module that helps prevent reentrant calls to a function.\\n *\\n * Inheriting from `ReentrancyGuard` will make the {nonReentrant} modifier\\n * available, which can be applied to functions to make sure there are no nested\\n * (reentrant) calls to them.\\n *\\n * Note that because there is a single `nonReentrant` guard, functions marked as\\n * `nonReentrant` may not call one another. This can be worked around by making\\n * those functions `private`, and then adding `external` `nonReentrant` entry\\n * points to them.\\n *\\n * TIP: If you would like to learn more about reentrancy and alternative ways\\n * to protect against it, check out our blog post\\n * https://blog.openzeppelin.com/reentrancy-after-istanbul/[Reentrancy After Istanbul].\\n */\\nabstract contract ReentrancyGuard {\\n    // Booleans are more expensive than uint256 or any type that takes up a full\\n    // word because each write operation emits an extra SLOAD to first read the\\n    // slot's contents, replace the bits taken up by the boolean, and then write\\n    // back. This is the compiler's defense against contract upgrades and\\n    // pointer aliasing, and it cannot be disabled.\\n\\n    // The values being non-zero value makes deployment a bit more expensive,\\n    // but in exchange the refund on every call to nonReentrant will be lower in\\n    // amount. Since refunds are capped to a percentage of the total\\n    // transaction's gas, it is best to keep them low in cases like this one, to\\n    // increase the likelihood of the full refund coming into effect.\\n    uint256 private constant _NOT_ENTERED = 1;\\n    uint256 private constant _ENTERED = 2;\\n\\n    uint256 private _status;\\n\\n    constructor() {\\n        _status = _NOT_ENTERED;\\n    }\\n\\n    /**\\n     * @dev Prevents a contract from calling itself, directly or indirectly.\\n     * Calling a `nonReentrant` function from another `nonReentrant`\\n     * function is not supported. It is possible to prevent this from happening\\n     * by making the `nonReentrant` function external, and make it call a\\n     * `private` function that does the actual work.\\n     */\\n    modifier nonReentrant() {\\n        // On the first call to nonReentrant, _notEntered will be true\\n        require(_status != _ENTERED, \\\"ReentrancyGuard: reentrant call\\\");\\n\\n        // Any calls to nonReentrant after this point will fail\\n        _status = _ENTERED;\\n\\n        _;\\n\\n        // By storing the original value once again, a refund is triggered (see\\n        // https://eips.ethereum.org/EIPS/eip-2200)\\n        _status = _NOT_ENTERED;\\n    }\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/security/Pausable.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../utils/Context.sol\\\";\\n\\n/**\\n * @dev Contract module which allows children to implement an emergency stop\\n * mechanism that can be triggered by an authorized account.\\n *\\n * This module is used through inheritance. It will make available the\\n * modifiers `whenNotPaused` and `whenPaused`, which can be applied to\\n * the functions of your contract. Note that they will not be pausable by\\n * simply including this module, only once the modifiers are put in place.\\n */\\nabstract contract Pausable is Context {\\n    /**\\n     * @dev Emitted when the pause is triggered by `account`.\\n     */\\n    event Paused(address account);\\n\\n    /**\\n     * @dev Emitted when the pause is lifted by `account`.\\n     */\\n    event Unpaused(address account);\\n\\n    bool private _paused;\\n\\n    /**\\n     * @dev Initializes the contract in unpaused state.\\n     */\\n    constructor() {\\n        _paused = false;\\n    }\\n\\n    /**\\n     * @dev Returns true if the contract is paused, and false otherwise.\\n     */\\n    function paused() public view virtual returns (bool) {\\n        return _paused;\\n    }\\n\\n    /**\\n     * @dev Modifier to make a function callable only when the contract is not paused.\\n     *\\n     * Requirements:\\n     *\\n     * - The contract must not be paused.\\n     */\\n    modifier whenNotPaused() {\\n        require(!paused(), \\\"Pausable: paused\\\");\\n        _;\\n    }\\n\\n    /**\\n     * @dev Modifier to make a function callable only when the contract is paused.\\n     *\\n     * Requirements:\\n     *\\n     * - The contract must be paused.\\n     */\\n    modifier whenPaused() {\\n        require(paused(), \\\"Pausable: not paused\\\");\\n        _;\\n    }\\n\\n    /**\\n     * @dev Triggers stopped state.\\n     *\\n     * Requirements:\\n     *\\n     * - The contract must not be paused.\\n     */\\n    function _pause() internal virtual whenNotPaused {\\n        _paused = true;\\n        emit Paused(_msgSender());\\n    }\\n\\n    /**\\n     * @dev Returns to normal state.\\n     *\\n     * Requirements:\\n     *\\n     * - The contract must be paused.\\n     */\\n    function _unpause() internal virtual whenPaused {\\n        _paused = false;\\n        emit Unpaused(_msgSender());\\n    }\\n}\\n\"\r\n    },\r\n    \"contracts/IERC2981.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.4;\\n\\nimport \\\"@openzeppelin/contracts/utils/introspection/ERC165.sol\\\";\\n\\n///\\n/// @dev Interface for the NFT Royalty Standard\\n///\\ninterface IERC2981 {\\n    /// ERC165 bytes to add to interface array - set in parent contract\\n    /// implementing this standard\\n    ///\\n    /// bytes4(keccak256(\\\"royaltyInfo(uint256,uint256)\\\")) == 0x2a55205a\\n    /// bytes4 private constant _INTERFACE_ID_ERC2981 = 0x2a55205a;\\n    /// _registerInterface(_INTERFACE_ID_ERC2981);\\n\\n    /// @notice Called with the sale price to determine how much royalty\\n    //          is owed and to whom.\\n    /// @param _tokenId - the NFT asset queried for royalty information\\n    /// @param _salePrice - the sale price of the NFT asset specified by _tokenId\\n    /// @return receiver - address of who should be sent the royalty payment\\n    /// @return royaltyAmount - the royalty payment amount for _salePrice\\n    function royaltyInfo(\\n        uint256 _tokenId,\\n        uint256 _salePrice\\n    ) external view returns (\\n        address receiver,\\n        uint256 royaltyAmount\\n    );\\n}\"\r\n    },\r\n    \"contracts/Base64.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\r\\n\\r\\npragma solidity ^0.8.0;\\r\\n\\r\\n/// @title Base64\\r\\n/// @author Brecht Devos - <brecht@loopring.org>\\r\\n/// @notice Provides a function for encoding some bytes in base64\\r\\nlibrary Base64 {\\r\\n    string internal constant TABLE = 'ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/';\\r\\n\\r\\n    function encode(bytes memory data) internal pure returns (string memory) {\\r\\n        if (data.length == 0) return '';\\r\\n        \\r\\n        // load the table into memory\\r\\n        string memory table = TABLE;\\r\\n\\r\\n        // multiply by 4/3 rounded up\\r\\n        uint256 encodedLen = 4 * ((data.length + 2) / 3);\\r\\n\\r\\n        // add some extra buffer at the end required for the writing\\r\\n        string memory result = new string(encodedLen + 32);\\r\\n\\r\\n        assembly {\\r\\n            // set the actual output length\\r\\n            mstore(result, encodedLen)\\r\\n            \\r\\n            // prepare the lookup table\\r\\n            let tablePtr := add(table, 1)\\r\\n            \\r\\n            // input ptr\\r\\n            let dataPtr := data\\r\\n            let endPtr := add(dataPtr, mload(data))\\r\\n            \\r\\n            // result ptr, jump over length\\r\\n            let resultPtr := add(result, 32)\\r\\n            \\r\\n            // run over the input, 3 bytes at a time\\r\\n            for {} lt(dataPtr, endPtr) {}\\r\\n            {\\r\\n               dataPtr := add(dataPtr, 3)\\r\\n               \\r\\n               // read 3 bytes\\r\\n               let input := mload(dataPtr)\\r\\n               \\r\\n               // write 4 characters\\r\\n               mstore(resultPtr, shl(248, mload(add(tablePtr, and(shr(18, input), 0x3F)))))\\r\\n               resultPtr := add(resultPtr, 1)\\r\\n               mstore(resultPtr, shl(248, mload(add(tablePtr, and(shr(12, input), 0x3F)))))\\r\\n               resultPtr := add(resultPtr, 1)\\r\\n               mstore(resultPtr, shl(248, mload(add(tablePtr, and(shr( 6, input), 0x3F)))))\\r\\n               resultPtr := add(resultPtr, 1)\\r\\n               mstore(resultPtr, shl(248, mload(add(tablePtr, and(        input,  0x3F)))))\\r\\n               resultPtr := add(resultPtr, 1)\\r\\n            }\\r\\n            \\r\\n            // padding with '='\\r\\n            switch mod(mload(data), 3)\\r\\n            case 1 { mstore(sub(resultPtr, 2), shl(240, 0x3d3d)) }\\r\\n            case 2 { mstore(sub(resultPtr, 1), shl(248, 0x3d)) }\\r\\n        }\\r\\n        \\r\\n        return result;\\r\\n    }\\r\\n}\"\r\n    },\r\n    \"contracts/LootInterface.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\r\\n\\r\\npragma solidity ^0.8.0;\\r\\n\\r\\n\\r\\ninterface LootInterface {\\r\\n\\r\\n    function getWeapon(uint256 tokenId) external view returns (string memory);\\r\\n    \\r\\n    function getChest(uint256 tokenId) external view returns (string memory);\\r\\n    \\r\\n    function getHead(uint256 tokenId) external view returns (string memory);\\r\\n    \\r\\n    function getWaist(uint256 tokenId) external view returns (string memory);\\r\\n\\r\\n    function getFoot(uint256 tokenId) external view returns (string memory);\\r\\n    \\r\\n    function getHand(uint256 tokenId) external view returns (string memory);\\r\\n    \\r\\n    function getNeck(uint256 tokenId) external view returns (string memory);\\r\\n    \\r\\n    function getRing(uint256 tokenId) external view returns (string memory);\\r\\n    \\r\\n    function balanceOf(address _owner) external view returns (uint256);\\r\\n\\r\\n    function ownerOf(uint256 _tokenId) external view returns (address);\\r\\n\\r\\n}\"\r\n    },\r\n    \"contracts/OwnableWithoutRenounce.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\r\\n\\r\\npragma solidity ^0.8.0;\\r\\n\\r\\nimport \\\"@openzeppelin/contracts/utils/Context.sol\\\";\\r\\n\\r\\n/**\\r\\n * @dev Contract module which provides a basic access control mechanism, where\\r\\n * there is an account (an owner) that can be granted exclusive access to\\r\\n * specific functions.\\r\\n *\\r\\n * By default, the owner account will be the one that deploys the contract. This\\r\\n * can later be changed with {transferOwnership}.\\r\\n *\\r\\n * This module is used through inheritance. It will make available the modifier\\r\\n * `onlyOwner`, which can be applied to your functions to restrict their use to\\r\\n * the owner.\\r\\n */\\r\\nabstract contract OwnableWithoutRenounce is Context {\\r\\n    address private _owner;\\r\\n\\r\\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\\r\\n\\r\\n    /**\\r\\n     * @dev Initializes the contract setting the deployer as the initial owner.\\r\\n     */\\r\\n    constructor() {\\r\\n        _setOwner(_msgSender());\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Returns the address of the current owner.\\r\\n     */\\r\\n    function owner() public view virtual returns (address) {\\r\\n        return _owner;\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Throws if called by any account other than the owner.\\r\\n     */\\r\\n    modifier onlyOwner() {\\r\\n        require(owner() == _msgSender(), \\\"Ownable: caller is not the owner\\\");\\r\\n        _;\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\r\\n     * Can only be called by the current owner.\\r\\n     */\\r\\n    function transferOwnership(address newOwner) public virtual onlyOwner {\\r\\n        require(newOwner != address(0), \\\"Ownable: new owner is the zero address\\\");\\r\\n        _setOwner(newOwner);\\r\\n    }\\r\\n\\r\\n    function _setOwner(address newOwner) private {\\r\\n        address oldOwner = _owner;\\r\\n        _owner = newOwner;\\r\\n        emit OwnershipTransferred(oldOwner, newOwner);\\r\\n    }\\r\\n}\\r\\n\"\r\n    },\r\n    \"contracts/StringsSpecialHex.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\r\\n\\r\\npragma solidity ^0.8.0;\\r\\n\\r\\n/**\\r\\n * @dev String operations.\\r\\n */\\r\\nlibrary StringsSpecialHex {\\r\\n    bytes16 private constant _HEX_SYMBOLS = \\\"0123456789abcdef\\\";\\r\\n\\r\\n    /**\\r\\n     * @dev Converts a `uint256` to its ASCII `string` hexadecimal representation with fixed length.\\r\\n     */\\r\\n    function toHexStringWithoutPrefixWithoutLengthCheck(uint256 value, uint256 length) internal pure returns (string memory) {\\r\\n        bytes memory buffer = new bytes(2 * length);\\r\\n        for (uint256 i = 2 * length; i > 0; --i) {\\r\\n            buffer[i-1] = _HEX_SYMBOLS[value & 0xf];\\r\\n            value >>= 4;\\r\\n        }\\r\\n        return string(buffer);\\r\\n    }\\r\\n}\\r\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/token/ERC721/ERC721.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"./IERC721.sol\\\";\\nimport \\\"./IERC721Receiver.sol\\\";\\nimport \\\"./extensions/IERC721Metadata.sol\\\";\\nimport \\\"../../utils/Address.sol\\\";\\nimport \\\"../../utils/Context.sol\\\";\\nimport \\\"../../utils/Strings.sol\\\";\\nimport \\\"../../utils/introspection/ERC165.sol\\\";\\n\\n/**\\n * @dev Implementation of https://eips.ethereum.org/EIPS/eip-721[ERC721] Non-Fungible Token Standard, including\\n * the Metadata extension, but not including the Enumerable extension, which is available separately as\\n * {ERC721Enumerable}.\\n */\\ncontract ERC721 is Context, ERC165, IERC721, IERC721Metadata {\\n    using Address for address;\\n    using Strings for uint256;\\n\\n    // Token name\\n    string private _name;\\n\\n    // Token symbol\\n    string private _symbol;\\n\\n    // Mapping from token ID to owner address\\n    mapping(uint256 => address) private _owners;\\n\\n    // Mapping owner address to token count\\n    mapping(address => uint256) private _balances;\\n\\n    // Mapping from token ID to approved address\\n    mapping(uint256 => address) private _tokenApprovals;\\n\\n    // Mapping from owner to operator approvals\\n    mapping(address => mapping(address => bool)) private _operatorApprovals;\\n\\n    /**\\n     * @dev Initializes the contract by setting a `name` and a `symbol` to the token collection.\\n     */\\n    constructor(string memory name_, string memory symbol_) {\\n        _name = name_;\\n        _symbol = symbol_;\\n    }\\n\\n    /**\\n     * @dev See {IERC165-supportsInterface}.\\n     */\\n    function supportsInterface(bytes4 interfaceId) public view virtual override(ERC165, IERC165) returns (bool) {\\n        return\\n            interfaceId == type(IERC721).interfaceId ||\\n            interfaceId == type(IERC721Metadata).interfaceId ||\\n            super.supportsInterface(interfaceId);\\n    }\\n\\n    /**\\n     * @dev See {IERC721-balanceOf}.\\n     */\\n    function balanceOf(address owner) public view virtual override returns (uint256) {\\n        require(owner != address(0), \\\"ERC721: balance query for the zero address\\\");\\n        return _balances[owner];\\n    }\\n\\n    /**\\n     * @dev See {IERC721-ownerOf}.\\n     */\\n    function ownerOf(uint256 tokenId) public view virtual override returns (address) {\\n        address owner = _owners[tokenId];\\n        require(owner != address(0), \\\"ERC721: owner query for nonexistent token\\\");\\n        return owner;\\n    }\\n\\n    /**\\n     * @dev See {IERC721Metadata-name}.\\n     */\\n    function name() public view virtual override returns (string memory) {\\n        return _name;\\n    }\\n\\n    /**\\n     * @dev See {IERC721Metadata-symbol}.\\n     */\\n    function symbol() public view virtual override returns (string memory) {\\n        return _symbol;\\n    }\\n\\n    /**\\n     * @dev See {IERC721Metadata-tokenURI}.\\n     */\\n    function tokenURI(uint256 tokenId) public view virtual override returns (string memory) {\\n        require(_exists(tokenId), \\\"ERC721Metadata: URI query for nonexistent token\\\");\\n\\n        string memory baseURI = _baseURI();\\n        return bytes(baseURI).length > 0 ? string(abi.encodePacked(baseURI, tokenId.toString())) : \\\"\\\";\\n    }\\n\\n    /**\\n     * @dev Base URI for computing {tokenURI}. If set, the resulting URI for each\\n     * token will be the concatenation of the `baseURI` and the `tokenId`. Empty\\n     * by default, can be overriden in child contracts.\\n     */\\n    function _baseURI() internal view virtual returns (string memory) {\\n        return \\\"\\\";\\n    }\\n\\n    /**\\n     * @dev See {IERC721-approve}.\\n     */\\n    function approve(address to, uint256 tokenId) public virtual override {\\n        address owner = ERC721.ownerOf(tokenId);\\n        require(to != owner, \\\"ERC721: approval to current owner\\\");\\n\\n        require(\\n            _msgSender() == owner || isApprovedForAll(owner, _msgSender()),\\n            \\\"ERC721: approve caller is not owner nor approved for all\\\"\\n        );\\n\\n        _approve(to, tokenId);\\n    }\\n\\n    /**\\n     * @dev See {IERC721-getApproved}.\\n     */\\n    function getApproved(uint256 tokenId) public view virtual override returns (address) {\\n        require(_exists(tokenId), \\\"ERC721: approved query for nonexistent token\\\");\\n\\n        return _tokenApprovals[tokenId];\\n    }\\n\\n    /**\\n     * @dev See {IERC721-setApprovalForAll}.\\n     */\\n    function setApprovalForAll(address operator, bool approved) public virtual override {\\n        require(operator != _msgSender(), \\\"ERC721: approve to caller\\\");\\n\\n        _operatorApprovals[_msgSender()][operator] = approved;\\n        emit ApprovalForAll(_msgSender(), operator, approved);\\n    }\\n\\n    /**\\n     * @dev See {IERC721-isApprovedForAll}.\\n     */\\n    function isApprovedForAll(address owner, address operator) public view virtual override returns (bool) {\\n        return _operatorApprovals[owner][operator];\\n    }\\n\\n    /**\\n     * @dev See {IERC721-transferFrom}.\\n     */\\n    function transferFrom(\\n        address from,\\n        address to,\\n        uint256 tokenId\\n    ) public virtual override {\\n        //solhint-disable-next-line max-line-length\\n        require(_isApprovedOrOwner(_msgSender(), tokenId), \\\"ERC721: transfer caller is not owner nor approved\\\");\\n\\n        _transfer(from, to, tokenId);\\n    }\\n\\n    /**\\n     * @dev See {IERC721-safeTransferFrom}.\\n     */\\n    function safeTransferFrom(\\n        address from,\\n        address to,\\n        uint256 tokenId\\n    ) public virtual override {\\n        safeTransferFrom(from, to, tokenId, \\\"\\\");\\n    }\\n\\n    /**\\n     * @dev See {IERC721-safeTransferFrom}.\\n     */\\n    function safeTransferFrom(\\n        address from,\\n        address to,\\n        uint256 tokenId,\\n        bytes memory _data\\n    ) public virtual override {\\n        require(_isApprovedOrOwner(_msgSender(), tokenId), \\\"ERC721: transfer caller is not owner nor approved\\\");\\n        _safeTransfer(from, to, tokenId, _data);\\n    }\\n\\n    /**\\n     * @dev Safely transfers `tokenId` token from `from` to `to`, checking first that contract recipients\\n     * are aware of the ERC721 protocol to prevent tokens from being forever locked.\\n     *\\n     * `_data` is additional data, it has no specified format and it is sent in call to `to`.\\n     *\\n     * This internal function is equivalent to {safeTransferFrom}, and can be used to e.g.\\n     * implement alternative mechanisms to perform token transfer, such as signature-based.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` cannot be the zero address.\\n     * - `to` cannot be the zero address.\\n     * - `tokenId` token must exist and be owned by `from`.\\n     * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function _safeTransfer(\\n        address from,\\n        address to,\\n        uint256 tokenId,\\n        bytes memory _data\\n    ) internal virtual {\\n        _transfer(from, to, tokenId);\\n        require(_checkOnERC721Received(from, to, tokenId, _data), \\\"ERC721: transfer to non ERC721Receiver implementer\\\");\\n    }\\n\\n    /**\\n     * @dev Returns whether `tokenId` exists.\\n     *\\n     * Tokens can be managed by their owner or approved accounts via {approve} or {setApprovalForAll}.\\n     *\\n     * Tokens start existing when they are minted (`_mint`),\\n     * and stop existing when they are burned (`_burn`).\\n     */\\n    function _exists(uint256 tokenId) internal view virtual returns (bool) {\\n        return _owners[tokenId] != address(0);\\n    }\\n\\n    /**\\n     * @dev Returns whether `spender` is allowed to manage `tokenId`.\\n     *\\n     * Requirements:\\n     *\\n     * - `tokenId` must exist.\\n     */\\n    function _isApprovedOrOwner(address spender, uint256 tokenId) internal view virtual returns (bool) {\\n        require(_exists(tokenId), \\\"ERC721: operator query for nonexistent token\\\");\\n        address owner = ERC721.ownerOf(tokenId);\\n        return (spender == owner || getApproved(tokenId) == spender || isApprovedForAll(owner, spender));\\n    }\\n\\n    /**\\n     * @dev Safely mints `tokenId` and transfers it to `to`.\\n     *\\n     * Requirements:\\n     *\\n     * - `tokenId` must not exist.\\n     * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function _safeMint(address to, uint256 tokenId) internal virtual {\\n        _safeMint(to, tokenId, \\\"\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-ERC721-_safeMint-address-uint256-}[`_safeMint`], with an additional `data` parameter which is\\n     * forwarded in {IERC721Receiver-onERC721Received} to contract recipients.\\n     */\\n    function _safeMint(\\n        address to,\\n        uint256 tokenId,\\n        bytes memory _data\\n    ) internal virtual {\\n        _mint(to, tokenId);\\n        require(\\n            _checkOnERC721Received(address(0), to, tokenId, _data),\\n            \\\"ERC721: transfer to non ERC721Receiver implementer\\\"\\n        );\\n    }\\n\\n    /**\\n     * @dev Mints `tokenId` and transfers it to `to`.\\n     *\\n     * WARNING: Usage of this method is discouraged, use {_safeMint} whenever possible\\n     *\\n     * Requirements:\\n     *\\n     * - `tokenId` must not exist.\\n     * - `to` cannot be the zero address.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function _mint(address to, uint256 tokenId) internal virtual {\\n        require(to != address(0), \\\"ERC721: mint to the zero address\\\");\\n        require(!_exists(tokenId), \\\"ERC721: token already minted\\\");\\n\\n        _beforeTokenTransfer(address(0), to, tokenId);\\n\\n        _balances[to] += 1;\\n        _owners[tokenId] = to;\\n\\n        emit Transfer(address(0), to, tokenId);\\n    }\\n\\n    /**\\n     * @dev Destroys `tokenId`.\\n     * The approval is cleared when the token is burned.\\n     *\\n     * Requirements:\\n     *\\n     * - `tokenId` must exist.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function _burn(uint256 tokenId) internal virtual {\\n        address owner = ERC721.ownerOf(tokenId);\\n\\n        _beforeTokenTransfer(owner, address(0), tokenId);\\n\\n        // Clear approvals\\n        _approve(address(0), tokenId);\\n\\n        _balances[owner] -= 1;\\n        delete _owners[tokenId];\\n\\n        emit Transfer(owner, address(0), tokenId);\\n    }\\n\\n    /**\\n     * @dev Transfers `tokenId` from `from` to `to`.\\n     *  As opposed to {transferFrom}, this imposes no restrictions on msg.sender.\\n     *\\n     * Requirements:\\n     *\\n     * - `to` cannot be the zero address.\\n     * - `tokenId` token must be owned by `from`.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function _transfer(\\n        address from,\\n        address to,\\n        uint256 tokenId\\n    ) internal virtual {\\n        require(ERC721.ownerOf(tokenId) == from, \\\"ERC721: transfer of token that is not own\\\");\\n        require(to != address(0), \\\"ERC721: transfer to the zero address\\\");\\n\\n        _beforeTokenTransfer(from, to, tokenId);\\n\\n        // Clear approvals from the previous owner\\n        _approve(address(0), tokenId);\\n\\n        _balances[from] -= 1;\\n        _balances[to] += 1;\\n        _owners[tokenId] = to;\\n\\n        emit Transfer(from, to, tokenId);\\n    }\\n\\n    /**\\n     * @dev Approve `to` to operate on `tokenId`\\n     *\\n     * Emits a {Approval} event.\\n     */\\n    function _approve(address to, uint256 tokenId) internal virtual {\\n        _tokenApprovals[tokenId] = to;\\n        emit Approval(ERC721.ownerOf(tokenId), to, tokenId);\\n    }\\n\\n    /**\\n     * @dev Internal function to invoke {IERC721Receiver-onERC721Received} on a target address.\\n     * The call is not executed if the target address is not a contract.\\n     *\\n     * @param from address representing the previous owner of the given token ID\\n     * @param to target address that will receive the tokens\\n     * @param tokenId uint256 ID of the token to be transferred\\n     * @param _data bytes optional data to send along with the call\\n     * @return bool whether the call correctly returned the expected magic value\\n     */\\n    function _checkOnERC721Received(\\n        address from,\\n        address to,\\n        uint256 tokenId,\\n        bytes memory _data\\n    ) private returns (bool) {\\n        if (to.isContract()) {\\n            try IERC721Receiver(to).onERC721Received(_msgSender(), from, tokenId, _data) returns (bytes4 retval) {\\n                return retval == IERC721Receiver.onERC721Received.selector;\\n            } catch (bytes memory reason) {\\n                if (reason.length == 0) {\\n                    revert(\\\"ERC721: transfer to non ERC721Receiver implementer\\\");\\n                } else {\\n                    assembly {\\n                        revert(add(32, reason), mload(reason))\\n                    }\\n                }\\n            }\\n        } else {\\n            return true;\\n        }\\n    }\\n\\n    /**\\n     * @dev Hook that is called before any token transfer. This includes minting\\n     * and burning.\\n     *\\n     * Calling conditions:\\n     *\\n     * - When `from` and `to` are both non-zero, ``from``'s `tokenId` will be\\n     * transferred to `to`.\\n     * - When `from` is zero, `tokenId` will be minted for `to`.\\n     * - When `to` is zero, ``from``'s `tokenId` will be burned.\\n     * - `from` and `to` are never both zero.\\n     *\\n     * To learn more about hooks, head to xref:ROOT:extending-contracts.adoc#using-hooks[Using Hooks].\\n     */\\n    function _beforeTokenTransfer(\\n        address from,\\n        address to,\\n        uint256 tokenId\\n    ) internal virtual {}\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/token/ERC721/extensions/IERC721Enumerable.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../IERC721.sol\\\";\\n\\n/**\\n * @title ERC-721 Non-Fungible Token Standard, optional enumeration extension\\n * @dev See https://eips.ethereum.org/EIPS/eip-721\\n */\\ninterface IERC721Enumerable is IERC721 {\\n    /**\\n     * @dev Returns the total amount of tokens stored by the contract.\\n     */\\n    function totalSupply() external view returns (uint256);\\n\\n    /**\\n     * @dev Returns a token ID owned by `owner` at a given `index` of its token list.\\n     * Use along with {balanceOf} to enumerate all of ``owner``'s tokens.\\n     */\\n    function tokenOfOwnerByIndex(address owner, uint256 index) external view returns (uint256 tokenId);\\n\\n    /**\\n     * @dev Returns a token ID at a given `index` of all the tokens stored by the contract.\\n     * Use along with {totalSupply} to enumerate all tokens.\\n     */\\n    function tokenByIndex(uint256 index) external view returns (uint256);\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/token/ERC721/IERC721.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../../utils/introspection/IERC165.sol\\\";\\n\\n/**\\n * @dev Required interface of an ERC721 compliant contract.\\n */\\ninterface IERC721 is IERC165 {\\n    /**\\n     * @dev Emitted when `tokenId` token is transferred from `from` to `to`.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 indexed tokenId);\\n\\n    /**\\n     * @dev Emitted when `owner` enables `approved` to manage the `tokenId` token.\\n     */\\n    event Approval(address indexed owner, address indexed approved, uint256 indexed tokenId);\\n\\n    /**\\n     * @dev Emitted when `owner` enables or disables (`approved`) `operator` to manage all of its assets.\\n     */\\n    event ApprovalForAll(address indexed owner, address indexed operator, bool approved);\\n\\n    /**\\n     * @dev Returns the number of tokens in ``owner``'s account.\\n     */\\n    function balanceOf(address owner) external view returns (uint256 balance);\\n\\n    /**\\n     * @dev Returns the owner of the `tokenId` token.\\n     *\\n     * Requirements:\\n     *\\n     * - `tokenId` must exist.\\n     */\\n    function ownerOf(uint256 tokenId) external view returns (address owner);\\n\\n    /**\\n     * @dev Safely transfers `tokenId` token from `from` to `to`, checking first that contract recipients\\n     * are aware of the ERC721 protocol to prevent tokens from being forever locked.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` cannot be the zero address.\\n     * - `to` cannot be the zero address.\\n     * - `tokenId` token must exist and be owned by `from`.\\n     * - If the caller is not `from`, it must be have been allowed to move this token by either {approve} or {setApprovalForAll}.\\n     * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function safeTransferFrom(\\n        address from,\\n        address to,\\n        uint256 tokenId\\n    ) external;\\n\\n    /**\\n     * @dev Transfers `tokenId` token from `from` to `to`.\\n     *\\n     * WARNING: Usage of this method is discouraged, use {safeTransferFrom} whenever possible.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` cannot be the zero address.\\n     * - `to` cannot be the zero address.\\n     * - `tokenId` token must be owned by `from`.\\n     * - If the caller is not `from`, it must be approved to move this token by either {approve} or {setApprovalForAll}.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(\\n        address from,\\n        address to,\\n        uint256 tokenId\\n    ) external;\\n\\n    /**\\n     * @dev Gives permission to `to` to transfer `tokenId` token to another account.\\n     * The approval is cleared when the token is transferred.\\n     *\\n     * Only a single account can be approved at a time, so approving the zero address clears previous approvals.\\n     *\\n     * Requirements:\\n     *\\n     * - The caller must own the token or be an approved operator.\\n     * - `tokenId` must exist.\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address to, uint256 tokenId) external;\\n\\n    /**\\n     * @dev Returns the account approved for `tokenId` token.\\n     *\\n     * Requirements:\\n     *\\n     * - `tokenId` must exist.\\n     */\\n    function getApproved(uint256 tokenId) external view returns (address operator);\\n\\n    /**\\n     * @dev Approve or remove `operator` as an operator for the caller.\\n     * Operators can call {transferFrom} or {safeTransferFrom} for any token owned by the caller.\\n     *\\n     * Requirements:\\n     *\\n     * - The `operator` cannot be the caller.\\n     *\\n     * Emits an {ApprovalForAll} event.\\n     */\\n    function setApprovalForAll(address operator, bool _approved) external;\\n\\n    /**\\n     * @dev Returns if the `operator` is allowed to manage all of the assets of `owner`.\\n     *\\n     * See {setApprovalForAll}\\n     */\\n    function isApprovedForAll(address owner, address operator) external view returns (bool);\\n\\n    /**\\n     * @dev Safely transfers `tokenId` token from `from` to `to`.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` cannot be the zero address.\\n     * - `to` cannot be the zero address.\\n     * - `tokenId` token must exist and be owned by `from`.\\n     * - If the caller is not `from`, it must be approved to move this token by either {approve} or {setApprovalForAll}.\\n     * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function safeTransferFrom(\\n        address from,\\n        address to,\\n        uint256 tokenId,\\n        bytes calldata data\\n    ) external;\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/token/ERC721/IERC721Receiver.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @title ERC721 token receiver interface\\n * @dev Interface for any contract that wants to support safeTransfers\\n * from ERC721 asset contracts.\\n */\\ninterface IERC721Receiver {\\n    /**\\n     * @dev Whenever an {IERC721} `tokenId` token is transferred to this contract via {IERC721-safeTransferFrom}\\n     * by `operator` from `from`, this function is called.\\n     *\\n     * It must return its Solidity selector to confirm the token transfer.\\n     * If any other value is returned or the interface is not implemented by the recipient, the transfer will be reverted.\\n     *\\n     * The selector can be obtained in Solidity with `IERC721.onERC721Received.selector`.\\n     */\\n    function onERC721Received(\\n        address operator,\\n        address from,\\n        uint256 tokenId,\\n        bytes calldata data\\n    ) external returns (bytes4);\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/token/ERC721/extensions/IERC721Metadata.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../IERC721.sol\\\";\\n\\n/**\\n * @title ERC-721 Non-Fungible Token Standard, optional metadata extension\\n * @dev See https://eips.ethereum.org/EIPS/eip-721\\n */\\ninterface IERC721Metadata is IERC721 {\\n    /**\\n     * @dev Returns the token collection name.\\n     */\\n    function name() external view returns (string memory);\\n\\n    /**\\n     * @dev Returns the token collection symbol.\\n     */\\n    function symbol() external view returns (string memory);\\n\\n    /**\\n     * @dev Returns the Uniform Resource Identifier (URI) for `tokenId` token.\\n     */\\n    function tokenURI(uint256 tokenId) external view returns (string memory);\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/utils/Address.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Collection of functions related to the address type\\n */\\nlibrary Address {\\n    /**\\n     * @dev Returns true if `account` is a contract.\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * It is unsafe to assume that an address for which this function returns\\n     * false is an externally-owned account (EOA) and not a contract.\\n     *\\n     * Among others, `isContract` will return false for the following\\n     * types of addresses:\\n     *\\n     *  - an externally-owned account\\n     *  - a contract in construction\\n     *  - an address where a contract will be created\\n     *  - an address where a contract lived, but was destroyed\\n     * ====\\n     */\\n    function isContract(address account) internal view returns (bool) {\\n        // This method relies on extcodesize, which returns 0 for contracts in\\n        // construction, since the code is only stored at the end of the\\n        // constructor execution.\\n\\n        uint256 size;\\n        assembly {\\n            size := extcodesize(account)\\n        }\\n        return size > 0;\\n    }\\n\\n    /**\\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\\n     * `recipient`, forwarding all available gas and reverting on errors.\\n     *\\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\\n     * imposed by `transfer`, making them unable to receive funds via\\n     * `transfer`. {sendValue} removes this limitation.\\n     *\\n     * https://diligence.consensys.net/posts/2019/09/stop-using-soliditys-transfer-now/[Learn more].\\n     *\\n     * IMPORTANT: because control is transferred to `recipient`, care must be\\n     * taken to not create reentrancy vulnerabilities. Consider using\\n     * {ReentrancyGuard} or the\\n     * https://solidity.readthedocs.io/en/v0.5.11/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\\n     */\\n    function sendValue(address payable recipient, uint256 amount) internal {\\n        require(address(this).balance >= amount, \\\"Address: insufficient balance\\\");\\n\\n        (bool success, ) = recipient.call{value: amount}(\\\"\\\");\\n        require(success, \\\"Address: unable to send value, recipient may have reverted\\\");\\n    }\\n\\n    /**\\n     * @dev Performs a Solidity function call using a low level `call`. A\\n     * plain `call` is an unsafe replacement for a function call: use this\\n     * function instead.\\n     *\\n     * If `target` reverts with a revert reason, it is bubbled up by this\\n     * function (like regular Solidity function calls).\\n     *\\n     * Returns the raw returned data. To convert to the expected return value,\\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\\n     *\\n     * Requirements:\\n     *\\n     * - `target` must be a contract.\\n     * - calling `target` with `data` must not revert.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionCall(target, data, \\\"Address: low-level call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\\n     * `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, 0, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but also transferring `value` wei to `target`.\\n     *\\n     * Requirements:\\n     *\\n     * - the calling contract must have an ETH balance of at least `value`.\\n     * - the called Solidity function must be `payable`.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, value, \\\"Address: low-level call with value failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\\n     * with `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        require(address(this).balance >= value, \\\"Address: insufficient balance for call\\\");\\n        require(isContract(target), \\\"Address: call to non-contract\\\");\\n\\n        (bool success, bytes memory returndata) = target.call{value: value}(data);\\n        return verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\\n        return functionStaticCall(target, data, \\\"Address: low-level static call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal view returns (bytes memory) {\\n        require(isContract(target), \\\"Address: static call to non-contract\\\");\\n\\n        (bool success, bytes memory returndata) = target.staticcall(data);\\n        return verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionDelegateCall(target, data, \\\"Address: low-level delegate call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        require(isContract(target), \\\"Address: delegate call to non-contract\\\");\\n\\n        (bool success, bytes memory returndata) = target.delegatecall(data);\\n        return verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Tool to verifies that a low level call was successful, and revert if it wasn't, either by bubbling the\\n     * revert reason using the provided one.\\n     *\\n     * _Available since v4.3._\\n     */\\n    function verifyCallResult(\\n        bool success,\\n        bytes memory returndata,\\n        string memory errorMessage\\n    ) internal pure returns (bytes memory) {\\n        if (success) {\\n            return returndata;\\n        } else {\\n            // Look for revert reason and bubble it up if present\\n            if (returndata.length > 0) {\\n                // The easiest way to bubble the revert reason is using memory via assembly\\n\\n                assembly {\\n                    let returndata_size := mload(returndata)\\n                    revert(add(32, returndata), returndata_size)\\n                }\\n            } else {\\n                revert(errorMessage);\\n            }\\n        }\\n    }\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/utils/Context.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Provides information about the current execution context, including the\\n * sender of the transaction and its data. While these are generally available\\n * via msg.sender and msg.data, they should not be accessed in such a direct\\n * manner, since when dealing with meta-transactions the account sending and\\n * paying for execution may not be the actual sender (as far as an application\\n * is concerned).\\n *\\n * This contract is only required for intermediate, library-like contracts.\\n */\\nabstract contract Context {\\n    function _msgSender() internal view virtual returns (address) {\\n        return msg.sender;\\n    }\\n\\n    function _msgData() internal view virtual returns (bytes calldata) {\\n        return msg.data;\\n    }\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/utils/Strings.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev String operations.\\n */\\nlibrary Strings {\\n    bytes16 private constant _HEX_SYMBOLS = \\\"0123456789abcdef\\\";\\n\\n    /**\\n     * @dev Converts a `uint256` to its ASCII `string` decimal representation.\\n     */\\n    function toString(uint256 value) internal pure returns (string memory) {\\n        // Inspired by OraclizeAPI's implementation - MIT licence\\n        // https://github.com/oraclize/ethereum-api/blob/b42146b063c7d6ee1358846c198246239e9360e8/oraclizeAPI_0.4.25.sol\\n\\n        if (value == 0) {\\n            return \\\"0\\\";\\n        }\\n        uint256 temp = value;\\n        uint256 digits;\\n        while (temp != 0) {\\n            digits++;\\n            temp /= 10;\\n        }\\n        bytes memory buffer = new bytes(digits);\\n        while (value != 0) {\\n            digits -= 1;\\n            buffer[digits] = bytes1(uint8(48 + uint256(value % 10)));\\n            value /= 10;\\n        }\\n        return string(buffer);\\n    }\\n\\n    /**\\n     * @dev Converts a `uint256` to its ASCII `string` hexadecimal representation.\\n     */\\n    function toHexString(uint256 value) internal pure returns (string memory) {\\n        if (value == 0) {\\n            return \\\"0x00\\\";\\n        }\\n        uint256 temp = value;\\n        uint256 length = 0;\\n        while (temp != 0) {\\n            length++;\\n            temp >>= 8;\\n        }\\n        return toHexString(value, length);\\n    }\\n\\n    /**\\n     * @dev Converts a `uint256` to its ASCII `string` hexadecimal representation with fixed length.\\n     */\\n    function toHexString(uint256 value, uint256 length) internal pure returns (string memory) {\\n        bytes memory buffer = new bytes(2 * length + 2);\\n        buffer[0] = \\\"0\\\";\\n        buffer[1] = \\\"x\\\";\\n        for (uint256 i = 2 * length + 1; i > 1; --i) {\\n            buffer[i] = _HEX_SYMBOLS[value & 0xf];\\n            value >>= 4;\\n        }\\n        require(value == 0, \\\"Strings: hex length insufficient\\\");\\n        return string(buffer);\\n    }\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/utils/introspection/ERC165.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"./IERC165.sol\\\";\\n\\n/**\\n * @dev Implementation of the {IERC165} interface.\\n *\\n * Contracts that want to implement ERC165 should inherit from this contract and override {supportsInterface} to check\\n * for the additional interface id that will be supported. For example:\\n *\\n * ```solidity\\n * function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {\\n *     return interfaceId == type(MyInterface).interfaceId || super.supportsInterface(interfaceId);\\n * }\\n * ```\\n *\\n * Alternatively, {ERC165Storage} provides an easier to use but more expensive implementation.\\n */\\nabstract contract ERC165 is IERC165 {\\n    /**\\n     * @dev See {IERC165-supportsInterface}.\\n     */\\n    function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {\\n        return interfaceId == type(IERC165).interfaceId;\\n    }\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/utils/introspection/IERC165.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC165 standard, as defined in the\\n * https://eips.ethereum.org/EIPS/eip-165[EIP].\\n *\\n * Implementers can declare support of contract interfaces, which can then be\\n * queried by others ({ERC165Checker}).\\n *\\n * For an implementation, see {ERC165}.\\n */\\ninterface IERC165 {\\n    /**\\n     * @dev Returns true if this contract implements the interface defined by\\n     * `interfaceId`. See the corresponding\\n     * https://eips.ethereum.org/EIPS/eip-165#how-interfaces-are-identified[EIP section]\\n     * to learn more about how these ids are created.\\n     *\\n     * This function call must use less than 30 000 gas.\\n     */\\n    function supportsInterface(bytes4 interfaceId) external view returns (bool);\\n}\\n\"\r\n    }\r\n  },\r\n  \"settings\": {\r\n    \"optimizer\": {\r\n      \"enabled\": true,\r\n      \"runs\": 1\r\n    },\r\n    \"outputSelection\": {\r\n      \"*\": {\r\n        \"*\": [\r\n          \"evm.bytecode\",\r\n          \"evm.deployedBytecode\",\r\n          \"abi\"\r\n        ]\r\n      }\r\n    },\r\n    \"libraries\": {}\r\n  }\r\n}}","ABI":"[{\"inputs\":[{\"internalType\":\"string\",\"name\":\"name\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"symbol\",\"type\":\"string\"},{\"internalType\":\"uint256\",\"name\":\"initialTokensForOwner\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"_proxyRegistryAddress\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_lootContract\",\"type\":\"address\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"approved\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"Approval\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"operator\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"bool\",\"name\":\"approved\",\"type\":\"bool\"}],\"name\":\"ApprovalForAll\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"Paused\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"contributor\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"questTokenId\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"lootTokenId\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"lootIdx\",\"type\":\"uint256\"}],\"name\":\"QuestContributed\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"questTokenId\",\"type\":\"uint256\"}],\"name\":\"QuestSolved\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"by\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"questTokenId\",\"type\":\"uint256\"}],\"name\":\"QuestStarted\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"by\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"questTokenId\",\"type\":\"uint256\"}],\"name\":\"RewardCancelled\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"by\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"questTokenId\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"RewardClaimed\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"by\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"questTokenId\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"RewardOffered\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"Transfer\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"Unpaused\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"approve\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"artistShare\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"questTokenId\",\"type\":\"uint256\"}],\"name\":\"cancelReward\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"claimQuestAsLootHolder\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"exists\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"getApproved\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"getDifficulty\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"difficulty\",\"type\":\"uint256\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"getGratitudePrefix\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"getGratitudeType\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"getInterlocutor\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"getInterlocutorPossessive\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"getLocation\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"getLocomotion\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"getLostAction\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"getLostEntity\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"getLostEntityClass\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"getLostEntityPrefix\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"questTokenId\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"requiredLootIdx\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"variantIdx\",\"type\":\"uint256\"}],\"name\":\"getRequiredLoot\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"position\",\"type\":\"uint256\"}],\"name\":\"getRequiredLootIdx\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"lootIdx\",\"type\":\"uint256\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"getRequiredLootIdxMask\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"lootIdxMask\",\"type\":\"uint256\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"requiredLootIdx\",\"type\":\"uint256\"}],\"name\":\"getRequiredLootIdxMultiplicity\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"multiplicity\",\"type\":\"uint256\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"operator\",\"type\":\"address\"}],\"name\":\"isApprovedForAll\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"questTokenId\",\"type\":\"uint256\"}],\"name\":\"isQuestSolved\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"solved\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"lootContract\",\"outputs\":[{\"internalType\":\"contract LootInterface\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"maximumReward\",\"outputs\":[{\"internalType\":\"uint64\",\"name\":\"\",\"type\":\"uint64\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"minimumMintPrice\",\"outputs\":[{\"internalType\":\"uint64\",\"name\":\"\",\"type\":\"uint64\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"minimumReward\",\"outputs\":[{\"internalType\":\"uint64\",\"name\":\"\",\"type\":\"uint64\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"mint\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"recipient\",\"type\":\"address\"}],\"name\":\"mintPromotion\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"name\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"questTokenId\",\"type\":\"uint256\"}],\"name\":\"offerReward\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"ownerOf\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"pause\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"paused\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"proxyRegistryAddress\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"questToRewardAmountMap\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"questToRewardSourceMap\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"requiredLootResolutionStatus\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"royaltyInfo\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"receiver\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"royaltyAmount\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"safeTransferFrom\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"},{\"internalType\":\"bytes\",\"name\":\"_data\",\"type\":\"bytes\"}],\"name\":\"safeTransferFrom\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"operator\",\"type\":\"address\"},{\"internalType\":\"bool\",\"name\":\"approved\",\"type\":\"bool\"}],\"name\":\"setApprovalForAll\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint64\",\"name\":\"_minimumMintPrice\",\"type\":\"uint64\"}],\"name\":\"setMinimumMintPrice\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_proxyRegistryAddress\",\"type\":\"address\"}],\"name\":\"setProxyRegistryAddress\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint64\",\"name\":\"_minimumReward\",\"type\":\"uint64\"},{\"internalType\":\"uint64\",\"name\":\"_maximumReward\",\"type\":\"uint64\"}],\"name\":\"setRewardBounds\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint16\",\"name\":\"percentage\",\"type\":\"uint16\"}],\"name\":\"setRoyaltyInfo\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"questTokenId\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"lootIdx\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"variantIdx\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"providedLootTokenId\",\"type\":\"uint256\"}],\"name\":\"solveQuest\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes4\",\"name\":\"interfaceId\",\"type\":\"bytes4\"}],\"name\":\"supportsInterface\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"symbol\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"index\",\"type\":\"uint256\"}],\"name\":\"tokenByIndex\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"index\",\"type\":\"uint256\"}],\"name\":\"tokenOfOwnerByIndex\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"tokenURI\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"tokensLeftForPromotion\",\"outputs\":[{\"internalType\":\"uint16\",\"name\":\"\",\"type\":\"uint16\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"tokensLeftForSale\",\"outputs\":[{\"internalType\":\"uint16\",\"name\":\"\",\"type\":\"uint16\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalSupply\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"transferFrom\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"unpause\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"usedUpLoot\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"withdrawArtistShare\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}]","ContractName":"TideweighLootQuest","CompilerVersion":"v0.8.6+commit.11564f7e","OptimizationUsed":"1","Runs":"1","ConstructorArguments":"00000000000000000000000000000000000000000000000000000000000000a000000000000000000000000000000000000000000000000000000000000001000000000000000000000000000000000000000000000000000000000000000064000000000000000000000000a5409ec958c83c3f309868babaca7c86dcb077c1000000000000000000000000ff9c1b15b16263c61d017ee9f65c50e4ae0113d7000000000000000000000000000000000000000000000000000000000000002c546964657765696768205175657374732077697468204c6f6f742028666f7220416476656e74757265727329000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000044c4f4f5100000000000000000000000000000000000000000000000000000000","EVMVersion":"Default","Library":"","LicenseType":"","Proxy":"0","Implementation":"","SwarmSource":""}]}