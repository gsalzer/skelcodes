{"status":"1","message":"OK","result":[{"SourceCode":"//SPDX-License-Identifier: Unlicense\r\npragma solidity ^0.8.0;\r\n\r\ninterface IMinter {\r\n    function execute(bytes memory data) external returns (bytes memory);\r\n}\r\n\r\ninterface ICupCat {\r\n    function mintCupCat(uint numberOfTokens) external payable;\r\n}\r\n\r\ncontract Minter {\r\n    ICupCat public constant cats = ICupCat(0x8Cd8155e1af6AD31dd9Eec2cEd37e04145aCFCb3);\r\n\r\n    address public creator;\r\n\r\n    modifier onlyCreator() {\r\n        require(creator == msg.sender);\r\n        _;\r\n    }\r\n\r\n    constructor(address caller, uint256 amount) payable {\r\n        creator = caller;\r\n        cats.mintCupCat{value: msg.value}(amount);\r\n    }\r\n\r\n    function execute(bytes memory data) external onlyCreator returns (bytes memory) {\r\n        (bool success, bytes memory result) = address(cats).call(data);\r\n        require(success, \"Call failed\");\r\n        return result;\r\n    }\r\n\r\n    function sweep() external onlyCreator {\r\n        (bool success, ) = msg.sender.call{value: address(this).balance}(\"\");\r\n        require(success, \"Transfer failed.\");\r\n    }\r\n}\r\n\r\ncontract MunchCat {\r\n    uint256 public constant CATS_PER_MINT = 3;\r\n    uint256 public constant PRICE_PER_CAT = 0.02 ether;\r\n\r\n    address public creator;\r\n\r\n    Minter[] public minters;\r\n\r\n    constructor() { }\r\n\r\n    modifier onlyCreator() {\r\n        require(msg.sender == creator);\r\n        _;\r\n    }\r\n\r\n    function mint(uint256 amount) external payable {\r\n        while (amount > 0) {\r\n            uint256 mintAmount = amount > CATS_PER_MINT ? CATS_PER_MINT : amount;\r\n            minters.push((new Minter){value: mintAmount * PRICE_PER_CAT}(msg.sender, mintAmount));\r\n            amount -= mintAmount;\r\n        }\r\n    }\r\n\r\n    function sweep() external onlyCreator {\r\n        (bool success, ) = msg.sender.call{value: address(this).balance}(\"\");\r\n        require(success, \"Transfer failed.\");\r\n    }\r\n}","ABI":"[{\"inputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"inputs\":[],\"name\":\"CATS_PER_MINT\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"PRICE_PER_CAT\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"creator\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"mint\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"minters\",\"outputs\":[{\"internalType\":\"contract Minter\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"sweep\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}]","ContractName":"MunchCat","CompilerVersion":"v0.8.4+commit.c7e474f2","OptimizationUsed":"0","Runs":"200","ConstructorArguments":"","EVMVersion":"Default","Library":"","LicenseType":"None","Proxy":"0","Implementation":"","SwarmSource":"ipfs://4763153a66710a2b1682cef879396122428df1160202f29fa677d49721979284"}]}