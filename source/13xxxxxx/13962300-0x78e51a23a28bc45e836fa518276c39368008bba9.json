{"status":"1","message":"OK","result":[{"SourceCode":"{{\r\n  \"language\": \"Solidity\",\r\n  \"sources\": {\r\n    \"CryptoCardsFactory.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: None\\n\\n// Created by 256bit.io - 2021/2022\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"OwnerOrAuthorized.sol\\\";\\nimport \\\"CryptoCardsMessages.sol\\\";\\nimport \\\"CryptoCardsStorage.sol\\\";\\n\\nstruct DecodedCard {\\n    uint256 value;\\n    uint256 suit;\\n    uint256 background;\\n    uint256 foreground;\\n    uint256 color;\\n    uint256 symbol;\\n    uint256 modifierFlags;\\n}\\n\\ncontract CryptoCardsFactory is OwnerOrAuthorized {\\n    CryptoCardsMessages messages;\\n    CryptoCardsStorage store;\\n    uint256 private psuedoRandomSeed;\\n\\n    uint256[] private CARD_BACKGROUND_COLORS = [\\n        0xff99b433,\\n        0xff00a300,\\n        0xff1e7145,\\n        0xffff0097,\\n        0xff9f00a7,\\n        0xff7e3878,\\n        0xff603cba,\\n        0xff1d1d1d,\\n        0xff00aba9,\\n        0xff2d89ef,\\n        0xff2b5797,\\n        0xffffc40d,\\n        0xffe3a21a,\\n        0xffda532c,\\n        0xffee1111,\\n        0xffb91d47\\n    ];\\n\\n    constructor(address _messages, address _storage) OwnerOrAuthorized() {\\n        messages = CryptoCardsMessages(_messages);\\n        store = CryptoCardsStorage(_storage);\\n    }\\n\\n    // Internal\\n    function _encodeCardAttributes(\\n        uint256 _value,\\n        uint256 _suit,\\n        uint256 _background,\\n        uint256 _foreground,\\n        uint256 _color,\\n        uint256 _symbol,\\n        uint256 _modifierFlags\\n    ) internal pure returns (uint256) {\\n        return\\n            _value |\\n            (_suit << BITOFFSET_SUIT) |\\n            (_background << BITOFFSET_BACKGROUND) |\\n            (_foreground << BITOFFSET_FOREGROUND) |\\n            (_color << BITOFFSET_COLOR) |\\n            (_symbol << BITOFFSET_SYMBOL) |\\n            (_modifierFlags << BITOFFSET_FLAGS);\\n    }\\n\\n    function _createRandomCard(uint256 _symbol) internal returns (uint256) {\\n        uint256 nextCardIndex = store.getDeckCardCount(_symbol);\\n        bytes memory shuffledCards = store.getShuffledDeck(_symbol);\\n\\n        require(shuffledCards.length > 0, messages.missingShuffledDeck());\\n\\n        // Good enough psuedo-random number; only used for background\\n        unchecked {\\n            psuedoRandomSeed = psuedoRandomSeed == 0\\n                ? uint256(blockhash(block.number - 1)) + 1\\n                : psuedoRandomSeed + uint256(blockhash(block.number - 1)) + 1;\\n        }\\n        uint256 randomValue = uint256(\\n            keccak256(\\n                abi.encodePacked(block.timestamp, msg.sender, psuedoRandomSeed)\\n            )\\n        );\\n\\n        uint8 nextCard = uint8(shuffledCards[nextCardIndex % 52]);\\n        uint256 value = nextCard % 13;\\n        uint256 suit = nextCard / 13;\\n        uint256 background = CARD_BACKGROUND_COLORS[randomValue % 16];\\n\\n        return\\n            store.addCard(\\n                createCard(\\n                    DecodedCard(\\n                        value,\\n                        suit,\\n                        background,\\n                        DEFAULT_FOREGROUND,\\n                        DEFAULT_COLOR,\\n                        _symbol,\\n                        0\\n                    ),\\n                    0\\n                )\\n            );\\n    }\\n\\n    function _modifyCard(uint256 _baseCardId, uint256 _modifierCardId)\\n        internal\\n    {\\n        Card memory baseCard = store.getCard(_baseCardId);\\n        Card memory modifierCard = store.getCard(_modifierCardId);\\n\\n        uint256 value = baseCard.attributes & 0xFF;\\n        uint256 suit = (baseCard.attributes >> BITOFFSET_SUIT) & 0xFF;\\n        uint256 background = (baseCard.attributes >> BITOFFSET_BACKGROUND) &\\n            0xFFFFFFFF;\\n        uint256 foreground = (baseCard.attributes >> BITOFFSET_FOREGROUND) &\\n            0xFFFFFFFF;\\n        uint256 color = (baseCard.attributes >> BITOFFSET_COLOR) & 0xFFFFFFFF;\\n        uint256 symbol = (baseCard.attributes >> BITOFFSET_SYMBOL) & 0xFFFFFFFF;\\n        uint256 modifierFlags = modifierCard.attributes >> BITOFFSET_FLAGS;\\n\\n        // background\\n        if (modifierFlags & FLAGS_SET_BACKGROUND == FLAGS_SET_BACKGROUND) {\\n            background =\\n                (modifierCard.attributes >> BITOFFSET_BACKGROUND) &\\n                0xFFFFFFFF;\\n        }\\n\\n        // foreground\\n        if (modifierFlags & FLAGS_SET_FOREGROUND == FLAGS_SET_FOREGROUND) {\\n            foreground =\\n                (modifierCard.attributes >> BITOFFSET_FOREGROUND) &\\n                0xFFFFFFFF;\\n        }\\n\\n        // color\\n        if (modifierFlags & FLAGS_SET_COLOR == FLAGS_SET_COLOR) {\\n            color = (modifierCard.attributes >> BITOFFSET_COLOR) & 0xFFFFFFFF;\\n        }\\n\\n        // modifiers\\n        if (modifierFlags & FLAGS_DATA_APPEND == FLAGS_DATA_APPEND) {\\n            // append\\n            require(\\n                (baseCard.modifiers & (uint256(0xFFFF) << (32 * 8))) == 0,\\n                messages.modifierDataFull()\\n            );\\n            baseCard.modifiers =\\n                (baseCard.modifiers << 16) |\\n                (_modifierCardId & 0xFFFF);\\n        } else {\\n            // overwrite\\n            baseCard.modifiers = _modifierCardId;\\n        }\\n\\n        baseCard.attributes = _encodeCardAttributes(\\n            value,\\n            suit,\\n            background,\\n            foreground,\\n            color,\\n            symbol,\\n            modifierFlags\\n        );\\n        store.setCard(_baseCardId, baseCard);\\n        store.incrementModifierCardUsageCount(_modifierCardId);\\n    }\\n\\n    // Public\\n    function createCard(DecodedCard memory _cardValues, uint256 _data)\\n        public\\n        onlyAuthorized\\n        returns (Card memory)\\n    {\\n        return\\n            Card(\\n                _encodeCardAttributes(\\n                    _cardValues.value,\\n                    _cardValues.suit,\\n                    _cardValues.background,\\n                    _cardValues.foreground,\\n                    _cardValues.color,\\n                    _cardValues.symbol,\\n                    _cardValues.modifierFlags\\n                ),\\n                _data\\n            );\\n    }\\n\\n    function createCards(\\n        uint256 _count,\\n        uint256 _symbol,\\n        uint256 _modifierCardId\\n    ) external onlyAuthorized returns (uint256[] memory) {\\n        uint256 supply = store.getTotalCards();\\n        uint256 deckSupply = store.getDeckCardCount(_symbol);\\n\\n        require(_count > 0, messages.mintAmount());\\n        require(_count <= store.maxMintAmount(), messages.mintAmount());\\n        require(supply + _count <= store.maxSupply(), messages.exceedsSupply());\\n        require(\\n            deckSupply + _count <= store.maxCardsPerDeck(),\\n            messages.exceedsSupply()\\n        );\\n\\n        if (_modifierCardId > 0) {\\n            require(\\n                store.getModifierCardUsageCount(_modifierCardId) + _count <\\n                    store.maxModifierUsage(),\\n                messages.modifierUsage()\\n            );\\n            require(\\n                store.getModifierCardInUse(_modifierCardId) == true,\\n                messages.modifierNotFound()\\n            );\\n        }\\n\\n        uint256[] memory result = new uint256[](_count);\\n        for (uint256 i = 0; i < _count; i++) {\\n            result[i] = _createRandomCard(_symbol);\\n            if (_modifierCardId > 0) {\\n                _modifyCard(result[i], _modifierCardId);\\n            }\\n        }\\n        return result;\\n    }\\n\\n    // Create an array of 52 values and shuffle\\n    function createDeck(uint256 _symbol) external onlyAuthorized {\\n        bytes memory a = store.getPreshuffledDeck();\\n\\n        unchecked {\\n            psuedoRandomSeed = psuedoRandomSeed == 0\\n                ? uint256(blockhash(block.number - 1)) + 1\\n                : psuedoRandomSeed + uint256(blockhash(block.number - 1)) + 1;\\n        }\\n\\n        // Shuffle\\n        for (uint256 sourceIndex; sourceIndex < 52; sourceIndex++) {\\n            uint256 destIndex = sourceIndex +\\n                (uint256(\\n                    keccak256(\\n                        abi.encodePacked(\\n                            block.timestamp,\\n                            msg.sender,\\n                            psuedoRandomSeed\\n                        )\\n                    )\\n                ) % (52 - sourceIndex));\\n            bytes1 temp = a[destIndex];\\n            a[destIndex] = a[sourceIndex];\\n            a[sourceIndex] = temp;\\n        }\\n\\n        store.setShuffledDeck(_symbol, a);\\n    }\\n\\n    function createModifiedCard(\\n        uint256 _originalCardId,\\n        uint256 _modifierCardId\\n    ) external onlyAuthorized returns (uint256) {\\n        uint256 supply = store.getTotalCards();\\n        require(supply + 1 <= store.maxSupply(), messages.exceedsSupply());\\n\\n        if (_modifierCardId > 0) {\\n            require(\\n                store.getModifierCardUsageCount(_modifierCardId) <\\n                    store.maxModifierUsage(),\\n                messages.modifierUsage()\\n            );\\n            require(\\n                store.getModifierCardInUse(_modifierCardId) == true,\\n                messages.modifierNotFound()\\n            );\\n        }\\n\\n        Card memory originalCard = store.getCard(_originalCardId);\\n        uint256 clonedCardId = store.addCard(\\n            Card(originalCard.attributes, originalCard.modifiers)\\n        );\\n        _modifyCard(clonedCardId, _modifierCardId);\\n        return clonedCardId;\\n    }\\n\\n    function createModifierCard(\\n        uint256 _value,\\n        uint256 _background,\\n        uint256 _foreground,\\n        uint256 _color,\\n        uint256 _flags\\n    ) external onlyAuthorized returns (uint256) {\\n        require(\\n            store.getTotalCards() + 1 <= store.maxSupply(),\\n            messages.exceedsSupply()\\n        );\\n\\n        Card memory card = createCard(\\n            DecodedCard(\\n                _value | MODIFIER_CARD,\\n                0,\\n                (_flags & FLAGS_SET_BACKGROUND) == FLAGS_SET_BACKGROUND\\n                    ? _background\\n                    : DEFAULT_MODIFIER_BACKGROUND,\\n                (_flags & FLAGS_SET_FOREGROUND) == FLAGS_SET_FOREGROUND\\n                    ? _foreground\\n                    : DEFAULT_FOREGROUND,\\n                (_flags & FLAGS_SET_COLOR) == FLAGS_SET_COLOR\\n                    ? _color\\n                    : DEFAULT_COLOR,\\n                0,\\n                _flags\\n            ),\\n            0\\n        );\\n\\n        return store.addCard(card);\\n    }\\n}\\n\"\r\n    },\r\n    \"OwnerOrAuthorized.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: None\\n\\n// Created by 256bit.io - 2021/2022\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"Ownable.sol\\\";\\n\\ncontract OwnerOrAuthorized is Ownable {\\n    mapping(address => bool) private _authorized;\\n\\n    event AuthorizationAdded(address indexed addressAdded);\\n    event AuthorizationRemoved(address addressRemoved);\\n\\n    constructor() Ownable() {\\n        _authorized[msg.sender] = true;\\n    }\\n\\n    /**\\n     * @dev Throws if called by any account other than an authorized user (includes owner).\\n     */\\n    modifier onlyAuthorized() {\\n        require(\\n            checkAuthorization(_msgSender()),\\n            \\\"OwnOwnerOrAuthorized: caller is not authorized\\\"\\n        );\\n        _;\\n    }\\n\\n    function addAuthorization(address _address) public onlyOwner {\\n        _authorized[_address] = true;\\n        emit AuthorizationAdded(_address);\\n    }\\n\\n    function removeAuthorization(address _address) public {\\n        require(\\n            owner() == _msgSender() || _authorized[_address] == true,\\n            \\\"OwnOwnerOrAuthorized: caller is not authorized\\\"\\n        );\\n        delete _authorized[_address];\\n        emit AuthorizationRemoved(_address);\\n    }\\n\\n    function checkAuthorization(address _address) public view returns (bool) {\\n        return owner() == _address || _authorized[_address] == true;\\n    }\\n}\\n\"\r\n    },\r\n    \"Ownable.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"Context.sol\\\";\\n\\n/**\\n * @dev Contract module which provides a basic access control mechanism, where\\n * there is an account (an owner) that can be granted exclusive access to\\n * specific functions.\\n *\\n * By default, the owner account will be the one that deploys the contract. This\\n * can later be changed with {transferOwnership}.\\n *\\n * This module is used through inheritance. It will make available the modifier\\n * `onlyOwner`, which can be applied to your functions to restrict their use to\\n * the owner.\\n */\\nabstract contract Ownable is Context {\\n    address private _owner;\\n\\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\\n\\n    /**\\n     * @dev Initializes the contract setting the deployer as the initial owner.\\n     */\\n    constructor() {\\n        _setOwner(_msgSender());\\n    }\\n\\n    /**\\n     * @dev Returns the address of the current owner.\\n     */\\n    function owner() public view virtual returns (address) {\\n        return _owner;\\n    }\\n\\n    /**\\n     * @dev Throws if called by any account other than the owner.\\n     */\\n    modifier onlyOwner() {\\n        require(owner() == _msgSender(), \\\"Ownable: caller is not the owner\\\");\\n        _;\\n    }\\n\\n    /**\\n     * @dev Leaves the contract without owner. It will not be possible to call\\n     * `onlyOwner` functions anymore. Can only be called by the current owner.\\n     *\\n     * NOTE: Renouncing ownership will leave the contract without an owner,\\n     * thereby removing any functionality that is only available to the owner.\\n     */\\n    function renounceOwnership() public virtual onlyOwner {\\n        _setOwner(address(0));\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Can only be called by the current owner.\\n     */\\n    function transferOwnership(address newOwner) public virtual onlyOwner {\\n        require(newOwner != address(0), \\\"Ownable: new owner is the zero address\\\");\\n        _setOwner(newOwner);\\n    }\\n\\n    function _setOwner(address newOwner) private {\\n        address oldOwner = _owner;\\n        _owner = newOwner;\\n        emit OwnershipTransferred(oldOwner, newOwner);\\n    }\\n}\\n\"\r\n    },\r\n    \"Context.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Provides information about the current execution context, including the\\n * sender of the transaction and its data. While these are generally available\\n * via msg.sender and msg.data, they should not be accessed in such a direct\\n * manner, since when dealing with meta-transactions the account sending and\\n * paying for execution may not be the actual sender (as far as an application\\n * is concerned).\\n *\\n * This contract is only required for intermediate, library-like contracts.\\n */\\nabstract contract Context {\\n    function _msgSender() internal view virtual returns (address) {\\n        return msg.sender;\\n    }\\n\\n    function _msgData() internal view virtual returns (bytes calldata) {\\n        return msg.data;\\n    }\\n}\\n\"\r\n    },\r\n    \"CryptoCardsMessages.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: None\\n\\n// Created by 256bit.io - 2021/2022\\n\\npragma solidity ^0.8.0;\\n\\ncontract CryptoCardsMessages {\\n    string public notAvailable = \\\"Feature not currently available\\\";\\n    string public mintAmount = \\\"Mint Amount\\\";\\n    string public exceedsSupply = \\\"Supply exceeded\\\";\\n    string public exceedsDeckSupply = \\\"Deck supply exceeded\\\";\\n    string public fiveCardsRequired = \\\"Five cards required\\\";\\n    string public zeroAddress = \\\"Zero address\\\";\\n    string public mustBeOwner = \\\"Must be owner\\\";\\n    string public notEnoughFunds = \\\"Not enough funds\\\";\\n    string public existingModifier = \\\"Modifier exists\\\";\\n    string public nameRequired = \\\"Name required\\\";\\n    string public modifierUsage = \\\"Modifier usage exceeded\\\";\\n    string public modifierNotFound = \\\"Modifier not found\\\";\\n    string public erc721InvalidTokenId = \\\"URI query for nonexistent token\\\";\\n    string public symbolInUse = \\\"Symbol already exists\\\";\\n    string public symbolNotFound = \\\"Symbol not found\\\";\\n    string public missingShuffledDeck = \\\"Missing shuffled deck for symbol\\\";\\n    string public modifierDataFull = \\\"The card cannot accept further modifiers\\\";\\n    string public modifierNameAlreadyInUse =\\n        \\\"The specified name is already in use\\\";\\n    string public dataLengthExceeded = \\\"Data length (256 bytes) exceeded\\\";\\n}\\n\"\r\n    },\r\n    \"CryptoCardsStorage.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: None\\n\\n// Created by 256bit.io - 2021/2022\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"OwnerOrAuthorized.sol\\\";\\n\\nuint256 constant MODIFIER_CARD = 0x40;\\nuint256 constant HAND_CARD = 0x20;\\nuint256 constant BITOFFSET_SUIT = 8;\\nuint256 constant BITOFFSET_BACKGROUND = 16;\\nuint256 constant BITOFFSET_FOREGROUND = 48;\\nuint256 constant BITOFFSET_COLOR = 80;\\nuint256 constant BITOFFSET_SYMBOL = 112;\\nuint256 constant BITOFFSET_FLAGS = 144;\\nuint256 constant DEFAULT_BACKGROUND = 0xff00a300;\\nuint256 constant DEFAULT_MODIFIER_BACKGROUND = 0xff1a1a1a;\\nuint256 constant DEFAULT_FOREGROUND = 0xff000000;\\nuint256 constant DEFAULT_COLOR = 0xffffffff;\\nuint256 constant FLAGS_SET_BACKGROUND = 1;\\nuint256 constant FLAGS_SET_FOREGROUND = 2;\\nuint256 constant FLAGS_SET_COLOR = 4;\\nuint256 constant FLAGS_DATA_APPEND = 8;\\nbytes constant PRE_SHUFFLED_DECK = hex\\\"190E0F1E2722111D02040B2E13331209150100240A180D16321B25260C312A07282C1C0820142B101A17293006052F2D23211F03\\\";\\n\\n/*  attributes = [\\n        bytes 0: value  0..0xC = Card face value | 0x40 = Modifier Card | 0x20 = Hand Card\\n        bytes 1: suit\\n        bytes 2..5: background\\n        bytes 6..9: foreground\\n        bytes 10..13: color\\n        bytes 14..17: symbol\\n        bytes 18..31: modifier flags; on a modifier card this specifies how the data will be applied:\\n            0x1 = background copied from modifier card\\n            0x2 = foreground copied from modifier card\\n            0x4 = color copied from modifier card\\n            0x8 = modifiers will be appended with modifier card id instead of overwritten\\n    ]\\n    modifiers: [32 bytes] essentially an array of modifier ids (16 bit)\\n*/\\nstruct Card {\\n    uint256 attributes;\\n    uint256 modifiers;\\n}\\n\\nstruct ModifierCard {\\n    address creator;\\n    uint256 usageCount;\\n    string name;\\n    bytes data; // Seems to be a 256 byte limit??\\n}\\n\\nstruct Reward {\\n    uint256 timestamp;\\n    uint256 modifierCardId;\\n    uint256 symbolId;\\n    int256 value;\\n}\\n\\ncontract CryptoCardsStorage is OwnerOrAuthorized {\\n    bytes private preShuffledDeck = PRE_SHUFFLED_DECK;\\n    string public baseURI;\\n    string public baseExtension;\\n    string public permanentStorageBaseURI;\\n    string public permanentStorageExtension;\\n    uint256 public cardCost = 0.1 ether;\\n    uint256 public handCost = 1 ether;\\n    uint256 public deckCost = 10 ether;\\n    uint256 public modifierCost = 2 ether;\\n    uint256 private deckMintUnlocking = 100;\\n    uint256 public defaultDeckMintUnlocking = 200;\\n    uint32 public maxCardsPerDeck = 1000;\\n    uint32 public maxModifierUsage = 100;\\n    uint32 public maxSupply = 65535; // Hard limit due to 16 bit numbers use to store modifier ids on cards\\n    uint32 public maxMintAmount = 10;\\n    uint32 public rewardPercentage = 50;\\n    Card[] public cards;\\n    uint256[] public symbols;\\n    uint256[] public modifiers;\\n    address[] public creators;\\n\\n    // Mapping hand tokenId to owner address\\n    mapping(uint256 => address) public handOwners;\\n\\n    // Mapping hand tokenId to card tokenIds used to mint hand\\n    mapping(uint256 => uint256[5]) private handCards;\\n\\n    // Mapping deck => card count\\n    mapping(uint256 => uint256) public deckCardCounts;\\n\\n    // Mapping modifier card id to data\\n    mapping(uint256 => ModifierCard) public modifierCards;\\n\\n    // Mapping modifier card name to id\\n    mapping(string => uint256) public modifierCardNames;\\n\\n    // Mapping symbol in use\\n    mapping(uint256 => bool) private symbolInUse;\\n\\n    // Mapping symbol to creator\\n    mapping(uint256 => address) private symbolCreators;\\n\\n    // Mapping creator to rewards\\n    mapping(address => Reward[]) private creatorRewards;\\n\\n    // Mapping creator to reward balance\\n    mapping(address => uint256) private creatorRewardsBalance;\\n\\n    // Mapping creator to known\\n    mapping(address => bool) private knownCreators;\\n\\n    // Mapping symbol to shuffled deck\\n    mapping(uint256 => bytes) private shuffledDecks;\\n\\n    // Mapping tokenId to TokenUri uses permanent storage\\n    mapping(uint256 => bool) public usePermanentStorage;\\n\\n    constructor(string memory _initBaseURI, string memory _initExtension)\\n        OwnerOrAuthorized()\\n    {\\n        baseURI = _initBaseURI;\\n        baseExtension = _initExtension;\\n        permanentStorageBaseURI = _initBaseURI;\\n        permanentStorageExtension = _initExtension;\\n    }\\n\\n    function addCard(Card memory _card)\\n        external\\n        onlyAuthorized\\n        returns (uint256)\\n    {\\n        cards.push(_card);\\n        uint256 symbol = (_card.attributes >> BITOFFSET_SYMBOL) & 0xFFFFFFFF;\\n        deckCardCounts[symbol]++;\\n        return cards.length - 1;\\n    }\\n\\n    function addSymbol(address _creator, uint256 _symbol)\\n        external\\n        onlyAuthorized\\n    {\\n        if (!symbolInUse[_symbol]) {\\n            symbolInUse[_symbol] = true;\\n            symbolCreators[_symbol] = _creator;\\n            symbols.push(_symbol);\\n        }\\n    }\\n\\n    function addModifierCard(\\n        uint256 _cardId,\\n        address _creator,\\n        string calldata _name,\\n        bytes calldata _data\\n    ) external onlyAuthorized {\\n        modifierCards[_cardId] = ModifierCard(_creator, 0, _name, _data);\\n        modifierCardNames[_name] = _cardId;\\n        modifiers.push(_cardId);\\n    }\\n\\n    function addCreatorRewardTransaction(\\n        address _creator,\\n        uint256 _modifierCard,\\n        uint256 _symbol,\\n        uint256 _amountIn,\\n        uint256 _amountOut\\n    ) external onlyAuthorized {\\n        Reward[] storage rewards = creatorRewards[_creator];\\n        rewards.push(\\n            Reward(\\n                block.timestamp,\\n                _modifierCard,\\n                _symbol,\\n                int256(_amountIn) - int256(_amountOut)\\n            )\\n        );\\n        creatorRewardsBalance[_creator] += _amountIn;\\n        creatorRewardsBalance[_creator] -= _amountOut;\\n        if (knownCreators[_creator] == false) {\\n            knownCreators[_creator] = true;\\n            creators.push(_creator);\\n        }\\n    }\\n\\n    function decrementDeckMintUnlocking() external onlyAuthorized {\\n        if (deckMintUnlocking > 0) {\\n            deckMintUnlocking--;\\n        }\\n    }\\n\\n    function getCard(uint256 _cardId) external view returns (Card memory) {\\n        return cards[_cardId];\\n    }\\n\\n    function getCreators() external view returns (address[] memory) {\\n        return creators;\\n    }\\n\\n    function getCreatorRewards(address _creator)\\n        external\\n        view\\n        onlyAuthorized\\n        returns (Reward[] memory)\\n    {\\n        return creatorRewards[_creator];\\n    }\\n\\n    function getCreatorRewardsBalance(address _creator)\\n        external\\n        view\\n        onlyAuthorized\\n        returns (uint256)\\n    {\\n        return creatorRewardsBalance[_creator];\\n    }\\n\\n    function getDeckCardCount(uint256 _deckId) external view returns (uint256) {\\n        return deckCardCounts[_deckId];\\n    }\\n\\n    function getDeckMintUnlocking()\\n        external\\n        view\\n        onlyAuthorized\\n        returns (uint256)\\n    {\\n        return deckMintUnlocking;\\n    }\\n\\n    function getHandOwner(uint256 _handId) external view returns (address) {\\n        return handOwners[_handId];\\n    }\\n\\n    function getHandCards(uint256 _handId)\\n        external\\n        view\\n        returns (uint256[5] memory)\\n    {\\n        return handCards[_handId];\\n    }\\n\\n    function getModifierCardCreator(uint256 _cardId)\\n        external\\n        view\\n        returns (address)\\n    {\\n        return modifierCards[_cardId].creator;\\n    }\\n\\n    function getModifierCardData(uint256 _cardId)\\n        external\\n        view\\n        returns (bytes memory)\\n    {\\n        return modifierCards[_cardId].data;\\n    }\\n\\n    function getModifierCardIdByName(string calldata _name)\\n        external\\n        view\\n        returns (uint256)\\n    {\\n        return modifierCardNames[_name];\\n    }\\n\\n    function getModifierCardInUse(uint256 _cardId)\\n        external\\n        view\\n        returns (bool)\\n    {\\n        return modifierCards[_cardId].creator != address(0);\\n    }\\n\\n    function getModifierCardName(uint256 _cardId)\\n        external\\n        view\\n        returns (string memory)\\n    {\\n        return modifierCards[_cardId].name;\\n    }\\n\\n    function getModifierCardUsageCount(uint256 _cardId)\\n        external\\n        view\\n        returns (uint256)\\n    {\\n        return modifierCards[_cardId].usageCount;\\n    }\\n\\n    function getModifiers() external view returns (uint256[] memory) {\\n        return modifiers;\\n    }\\n\\n    function getPreshuffledDeck()\\n        external\\n        view\\n        onlyAuthorized\\n        returns (bytes memory)\\n    {\\n        return preShuffledDeck;\\n    }\\n\\n    function getShuffledDeck(uint256 _symbol)\\n        external\\n        view\\n        onlyAuthorized\\n        returns (bytes memory)\\n    {\\n        return shuffledDecks[_symbol];\\n    }\\n\\n    function getSymbolInUse(uint256 _symbol) external view returns (bool) {\\n        return symbolInUse[_symbol];\\n    }\\n\\n    function getSymbolCreator(uint256 _symbol) external view returns (address) {\\n        return symbolCreators[_symbol];\\n    }\\n\\n    function getSymbols() external view returns (uint256[] memory) {\\n        return symbols;\\n    }\\n\\n    function getTotalActiveModifiers() external view returns (uint256) {\\n        uint256 result;\\n        for (uint256 i; i < modifiers.length; i++) {\\n            if (modifierCards[i].usageCount < maxModifierUsage) {\\n                result++;\\n            }\\n        }\\n        return result;\\n    }\\n\\n    function getTotalCards() external view returns (uint256) {\\n        return cards.length;\\n    }\\n\\n    function getTotalModifiers() external view returns (uint256) {\\n        return modifiers.length;\\n    }\\n\\n    function getTotalSymbols() external view returns (uint256) {\\n        return symbols.length;\\n    }\\n\\n    function getTotalRewardsBalance() external view returns (uint256) {\\n        uint256 result;\\n        for (uint256 i; i < creators.length; i++) {\\n            if (creators[i] != address(0)) {\\n                result += creatorRewardsBalance[creators[i]];\\n            }\\n        }\\n        return result;\\n    }\\n\\n    function getUsePermanentStorage(uint256 _tokenId)\\n        external\\n        view\\n        returns (bool)\\n    {\\n        return usePermanentStorage[_tokenId];\\n    }\\n\\n    function incrementModifierCardUsageCount(uint256 _cardId)\\n        external\\n        onlyAuthorized\\n    {\\n        modifierCards[_cardId].usageCount++;\\n    }\\n\\n    function resetDeckMintUnlocking() external onlyAuthorized {\\n        deckMintUnlocking = defaultDeckMintUnlocking;\\n    }\\n\\n    function setDeckMintUnlocking(uint256 _value) external onlyAuthorized {\\n        deckMintUnlocking = _value;\\n    }\\n\\n    function setDefaultDeckMintUnlocking(uint256 _value)\\n        external\\n        onlyAuthorized\\n    {\\n        defaultDeckMintUnlocking = _value;\\n    }\\n\\n    function setBaseURIAndExtension(\\n        string memory _newBaseURI,\\n        string memory _newBaseExtension\\n    ) external onlyAuthorized {\\n        baseURI = _newBaseURI;\\n        baseExtension = bytes(_newBaseExtension).length <= 1\\n            ? \\\"\\\"\\n            : _newBaseExtension;\\n    }\\n\\n    function setPermanentStorageBaseURIAndExtension(\\n        string memory _newBaseURI,\\n        string memory _newExtension\\n    ) external onlyAuthorized {\\n        permanentStorageBaseURI = _newBaseURI;\\n        permanentStorageExtension = bytes(_newExtension).length <= 1\\n            ? \\\"\\\"\\n            : _newExtension;\\n    }\\n\\n    function setCard(uint256 _cardId, Card calldata _value)\\n        external\\n        onlyAuthorized\\n    {\\n        cards[_cardId] = _value;\\n    }\\n\\n    function setCosts(\\n        uint256 _cardCost,\\n        uint256 _handCost,\\n        uint256 _deckCost,\\n        uint256 _modifierCost\\n    ) external onlyAuthorized {\\n        cardCost = _cardCost;\\n        handCost = _handCost;\\n        deckCost = _deckCost;\\n        modifierCost = _modifierCost;\\n    }\\n\\n    function setHandCards(uint256 _handId, uint256[5] calldata _cards)\\n        external\\n        onlyAuthorized\\n    {\\n        handCards[_handId] = _cards;\\n    }\\n\\n    function setHandOwner(uint256 _handId, address _owner)\\n        external\\n        onlyAuthorized\\n    {\\n        handOwners[_handId] = _owner;\\n    }\\n\\n    function setLimits(\\n        uint32 _maxMintAmount,\\n        uint32 _maxModifierUsage,\\n        uint32 _maxCardsPerDeck,\\n        uint32 _maxSupply\\n    ) external onlyAuthorized {\\n        if (_maxMintAmount > 0) maxMintAmount = _maxMintAmount;\\n        if (_maxModifierUsage > 0) maxModifierUsage = _maxModifierUsage;\\n        if (_maxCardsPerDeck > 0) maxCardsPerDeck = _maxCardsPerDeck;\\n        if (_maxSupply > 0) maxSupply = _maxSupply > 65535 ? 65535 : _maxSupply;\\n    }\\n\\n    function setPreshuffledDeck(bytes memory _value) external onlyAuthorized {\\n        preShuffledDeck = _value;\\n    }\\n\\n    function setRewardPercentage(uint32 _value) external onlyAuthorized {\\n        if (_value > 0 && _value <= 100) {\\n            rewardPercentage = _value;\\n        }\\n    }\\n\\n    function setShuffledDeck(uint256 _symbol, bytes memory _value)\\n        external\\n        onlyAuthorized\\n    {\\n        shuffledDecks[_symbol] = _value;\\n    }\\n\\n    function setUsePermanentStorage(uint256 _tokenId, bool _value)\\n        external\\n        onlyAuthorized\\n    {\\n        usePermanentStorage[_tokenId] = _value;\\n    }\\n}\\n\"\r\n    }\r\n  },\r\n  \"settings\": {\r\n    \"evmVersion\": \"istanbul\",\r\n    \"optimizer\": {\r\n      \"enabled\": true,\r\n      \"runs\": 200\r\n    },\r\n    \"outputSelection\": {\r\n      \"*\": {\r\n        \"*\": [\r\n          \"evm.bytecode\",\r\n          \"evm.deployedBytecode\",\r\n          \"devdoc\",\r\n          \"userdoc\",\r\n          \"metadata\",\r\n          \"abi\"\r\n        ]\r\n      }\r\n    }\r\n  }\r\n}}","ABI":"[{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_messages\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_storage\",\"type\":\"address\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"addressAdded\",\"type\":\"address\"}],\"name\":\"AuthorizationAdded\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"addressRemoved\",\"type\":\"address\"}],\"name\":\"AuthorizationRemoved\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_address\",\"type\":\"address\"}],\"name\":\"addAuthorization\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_address\",\"type\":\"address\"}],\"name\":\"checkAuthorization\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"components\":[{\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"suit\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"background\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"foreground\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"color\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"symbol\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"modifierFlags\",\"type\":\"uint256\"}],\"internalType\":\"struct DecodedCard\",\"name\":\"_cardValues\",\"type\":\"tuple\"},{\"internalType\":\"uint256\",\"name\":\"_data\",\"type\":\"uint256\"}],\"name\":\"createCard\",\"outputs\":[{\"components\":[{\"internalType\":\"uint256\",\"name\":\"attributes\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"modifiers\",\"type\":\"uint256\"}],\"internalType\":\"struct Card\",\"name\":\"\",\"type\":\"tuple\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_count\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_symbol\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_modifierCardId\",\"type\":\"uint256\"}],\"name\":\"createCards\",\"outputs\":[{\"internalType\":\"uint256[]\",\"name\":\"\",\"type\":\"uint256[]\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_symbol\",\"type\":\"uint256\"}],\"name\":\"createDeck\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_originalCardId\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_modifierCardId\",\"type\":\"uint256\"}],\"name\":\"createModifiedCard\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_value\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_background\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_foreground\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_color\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_flags\",\"type\":\"uint256\"}],\"name\":\"createModifierCard\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_address\",\"type\":\"address\"}],\"name\":\"removeAuthorization\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}]","ContractName":"CryptoCardsFactory","CompilerVersion":"v0.8.9+commit.e5eed63a","OptimizationUsed":"1","Runs":"200","ConstructorArguments":"00000000000000000000000015b9cbd70bbc764acc223871ac9c8c698cbf9c72000000000000000000000000050cc9eeb69d23c88d5e9f455e4c96a418fdce9d","EVMVersion":"Default","Library":"","LicenseType":"None","Proxy":"0","Implementation":"","SwarmSource":""}]}