{"status":"1","message":"OK","result":[{"SourceCode":"{{\r\n  \"language\": \"Solidity\",\r\n  \"sources\": {\r\n    \"contracts/zStakeCorePool.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\r\\n\\r\\npragma solidity ^0.8.9;\\r\\n\\r\\nimport \\\"./zStakePoolBase.sol\\\";\\r\\n\\r\\n/**\\r\\n * @title Wild Core Pool - Fork of Illuvium Core Pool\\r\\n *\\r\\n * @notice Core pools represent permanent pools like WILD or WILD/ETH Pair pool,\\r\\n *      core pools allow staking for arbitrary periods of time up to 1 year\\r\\n *\\r\\n * @dev See WildPoolBase for more details\\r\\n *\\r\\n * @author Pedro Bergamini, reviewed by Basil Gorin, modified by Zer0\\r\\n */\\r\\ncontract zStakeCorePool is zStakePoolBase {\\r\\n  /// @dev Flag indicating pool type, false means \\\"core pool\\\"\\r\\n  bool public constant override isFlashPool = false;\\r\\n\\r\\n  /// @dev Pool tokens value available in the pool;\\r\\n  ///      pool token examples are WILD (WILD core pool) or WILD/ETH pair (LP core pool)\\r\\n  /// @dev For LP core pool this value doesnt' count for WILD tokens received as Vault rewards\\r\\n  ///      while for WILD core pool it does count for such tokens as well\\r\\n  uint256 public poolTokenReserve;\\r\\n\\r\\n  /**\\r\\n   * @dev Creates/deploys an instance of the core pool\\r\\n   *\\r\\n   * @param _rewardToken WILD ERC20 Token address\\r\\n   * @param _factory Pool factory zStakePoolFactory instance/address\\r\\n   * @param _poolToken token the pool operates on, for example WILD or WILD/ETH pair\\r\\n   * @param _initBlock initial block used to calculate the rewards\\r\\n   * @param _weight number representing a weight of the pool, actual weight fraction\\r\\n   *      is calculated as that number divided by the total pools weight and doesn't exceed one\\r\\n   */\\r\\n  function initialize(\\r\\n    address _rewardToken,\\r\\n    zStakePoolFactory _factory,\\r\\n    address _poolToken,\\r\\n    uint64 _initBlock,\\r\\n    uint32 _weight\\r\\n  ) initializer public {\\r\\n    __zStakePoolBase__init(_rewardToken, _factory, _poolToken, _initBlock, _weight);\\r\\n  }\\r\\n\\r\\n  // Call this on the implementation contract (not the proxy)\\r\\n  function initializeImplementation() public initializer {\\r\\n    __Ownable_init();\\r\\n    _pause();\\r\\n  }\\r\\n\\r\\n  /**\\r\\n   * @notice Service function to calculate and pay pending vault and yield rewards to the sender\\r\\n   *\\r\\n   * @dev Internally executes similar function `_processRewards` from the parent smart contract\\r\\n   *      to calculate and pay yield rewards; adds vault rewards processing\\r\\n   *\\r\\n   * @dev Can be executed by anyone at any time, but has an effect only when\\r\\n   *      executed by deposit holder and when at least one block passes from the\\r\\n   *      previous reward processing\\r\\n   * @dev Executed internally when \\\"staking as a pool\\\" (`stakeAsPool`)\\r\\n   * @dev When timing conditions are not met (executed too frequently, or after factory\\r\\n   *      end block), function doesn't throw and exits silently\\r\\n   */\\r\\n  function processRewards() external override {\\r\\n    require(!paused(), \\\"contract is paused\\\");\\r\\n    _processRewards(msg.sender, true);\\r\\n  }\\r\\n\\r\\n  /**\\r\\n   * @dev Executed internally by the pool itself (from the parent `zStakePoolBase` smart contract)\\r\\n   *      as part of yield rewards processing logic (`zStakePoolBase._processRewards` function)\\r\\n   *\\r\\n   * @param _staker an address which stakes (the yield reward)\\r\\n   * @param _amount amount to be staked (yield reward amount)\\r\\n   */\\r\\n  function stakeAsPool(address _staker, uint256 _amount) external {\\r\\n    require(!paused(), \\\"contract is paused\\\");\\r\\n    require(factory.poolExists(msg.sender), \\\"access denied\\\");\\r\\n    _sync();\\r\\n    User storage user = users[_staker];\\r\\n    if (user.tokenAmount > 0) {\\r\\n      _processRewards(_staker, false);\\r\\n    }\\r\\n    uint256 depositWeight = _amount * YEAR_STAKE_WEIGHT_MULTIPLIER;\\r\\n    Deposit memory newDeposit = Deposit({\\r\\n      tokenAmount: _amount,\\r\\n      lockedFrom: uint64(now256()),\\r\\n      lockedUntil: uint64(now256() + rewardLockPeriod),\\r\\n      weight: depositWeight,\\r\\n      isYield: true\\r\\n    });\\r\\n    user.tokenAmount += _amount;\\r\\n    user.totalWeight += depositWeight;\\r\\n    user.deposits.push(newDeposit);\\r\\n\\r\\n    usersLockingWeight += depositWeight;\\r\\n\\r\\n    user.subYieldRewards = weightToReward(user.totalWeight, yieldRewardsPerWeight);\\r\\n\\r\\n    // update `poolTokenReserve` only if this is a LP Core Pool (stakeAsPool can be executed only for LP pool)\\r\\n    poolTokenReserve += _amount;\\r\\n  }\\r\\n\\r\\n  /**\\r\\n   * @inheritdoc zStakePoolBase\\r\\n   *\\r\\n   * @dev Additionally to the parent smart contract, updates vault rewards of the holder,\\r\\n   *      and updates (increases) pool token reserve (pool tokens value available in the pool)\\r\\n   */\\r\\n  function _stake(\\r\\n    address _staker,\\r\\n    uint256 _amount,\\r\\n    uint64 _lockedUntil,\\r\\n    bool _isYield\\r\\n  ) internal override {\\r\\n    super._stake(_staker, _amount, _lockedUntil, _isYield);\\r\\n\\r\\n    poolTokenReserve += _amount;\\r\\n  }\\r\\n\\r\\n  /**\\r\\n   * @inheritdoc zStakePoolBase\\r\\n   *\\r\\n   * @dev Additionally to the parent smart contract, updates vault rewards of the holder,\\r\\n   *      and updates (decreases) pool token reserve (pool tokens value available in the pool)\\r\\n   */\\r\\n  function _unstake(\\r\\n    address _staker,\\r\\n    uint256 _depositId,\\r\\n    uint256 _amount\\r\\n  ) internal override {\\r\\n    User storage user = users[_staker];\\r\\n    Deposit memory stakeDeposit = user.deposits[_depositId];\\r\\n    require(\\r\\n      stakeDeposit.lockedFrom == 0 || now256() > stakeDeposit.lockedUntil,\\r\\n      \\\"deposit not yet unlocked\\\"\\r\\n    );\\r\\n    poolTokenReserve -= _amount;\\r\\n    super._unstake(_staker, _depositId, _amount);\\r\\n  }\\r\\n\\r\\n  /**\\r\\n   * @inheritdoc zStakePoolBase\\r\\n   *\\r\\n   * @dev Additionally to the parent smart contract, processes vault rewards of the holder,\\r\\n   *      and for reward pool pool updates (increases) pool token reserve (pool tokens value available in the pool)\\r\\n   */\\r\\n  function _processRewards(address _staker, bool _withUpdate)\\r\\n    internal\\r\\n    override\\r\\n    returns (uint256 pendingYield)\\r\\n  {\\r\\n    pendingYield = super._processRewards(_staker, _withUpdate);\\r\\n\\r\\n    // update `poolTokenReserve` only if this is the reward Pool\\r\\n    if (poolToken == rewardToken) {\\r\\n      poolTokenReserve += pendingYield;\\r\\n    }\\r\\n  }\\r\\n}\\r\\n\"\r\n    },\r\n    \"contracts/zStakePoolBase.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\r\\npragma solidity ^0.8.9;\\r\\n\\r\\nimport \\\"./interfaces/IPool.sol\\\";\\r\\nimport \\\"./interfaces/ICorePool.sol\\\";\\r\\nimport \\\"./ReentrancyGuardUpgradeable.sol\\\";\\r\\nimport \\\"./zStakePoolFactory.sol\\\";\\r\\nimport \\\"./utils/SafeERC20.sol\\\";\\r\\n\\r\\nimport \\\"@openzeppelin/contracts-upgradeable/security/PausableUpgradeable.sol\\\";\\r\\n\\r\\n/**\\r\\n * @title Pool Base - Fork of Illuvium Pool Base\\r\\n *\\r\\n * @notice An abstract contract containing common logic for a staking pool\\r\\n *\\r\\n * @dev Deployment and initialization.\\r\\n *      Any pool deployed must be bound to the deployed pool factory (zStakePoolFactory)\\r\\n *      Additionally, 3 token instance addresses must be defined on deployment:\\r\\n *          - Reward token address\\r\\n *          - pool token address, it can be the reward token address, LP pair address, and others\\r\\n *\\r\\n * @dev Pool weight defines the fraction of the yield current pool receives among the other pools,\\r\\n *      pool factory is responsible for the weight synchronization between the pools.\\r\\n * @dev The weight is logically 10% for reward token pool and 90% for LP pool.\\r\\n *      Since Solidity doesn't support fractions the weight is defined by the division of\\r\\n *      pool weight by total pools weight (sum of all registered pools within the factory)\\r\\n *\\r\\n * @author Pedro Bergamini, reviewed by Basil Gorin, modified by Zer0\\r\\n */\\r\\nabstract contract zStakePoolBase is IPool, ReentrancyGuardUpgradeable, OwnableUpgradeable, PausableUpgradeable {\\r\\n  /// @dev Data structure representing token holder using a pool\\r\\n  struct User {\\r\\n    // @dev Total staked amount\\r\\n    uint256 tokenAmount;\\r\\n    // @dev Total weight\\r\\n    uint256 totalWeight;\\r\\n    // @dev Auxiliary variable for yield calculation\\r\\n    uint256 subYieldRewards;\\r\\n    // @dev An array of holder's deposits\\r\\n    Deposit[] deposits;\\r\\n  }\\r\\n\\r\\n  function isFlashPool() external view virtual override returns (bool) {\\r\\n    return false;\\r\\n  }\\r\\n\\r\\n  /// @dev The reward token\\r\\n  address public override rewardToken;\\r\\n\\r\\n  /// @dev Token holder storage, maps token holder address to their data record\\r\\n  mapping(address => User) public users;\\r\\n\\r\\n  /// @dev Link to the pool factory zStakePoolFactory instance\\r\\n  zStakePoolFactory public factory;\\r\\n\\r\\n  /// @dev Link to the pool token instance, for example WILD or WILD/ETH pair\\r\\n  address public override poolToken;\\r\\n\\r\\n  /// @dev Pool weight\\r\\n  uint32 public override weight;\\r\\n\\r\\n  /// @dev Block number of the last yield distribution event\\r\\n  uint64 public override lastYieldDistribution;\\r\\n\\r\\n  /// @dev Used to calculate yield rewards\\r\\n  /// @dev This value is different from \\\"reward per token\\\" used in locked pool\\r\\n  /// @dev Note: stakes are different in duration and \\\"weight\\\" reflects that\\r\\n  uint256 public override yieldRewardsPerWeight;\\r\\n\\r\\n  /// @dev Used to calculate yield rewards, keeps track of the tokens weight locked in staking\\r\\n  uint256 public override usersLockingWeight;\\r\\n\\r\\n  /// @dev The duration of time to lock rewards\\r\\n  uint256 public rewardLockPeriod;\\r\\n\\r\\n  /**\\r\\n   * @dev Stake weight is proportional to deposit amount and time locked, precisely\\r\\n   *      \\\"deposit amount wei multiplied by (fraction of the year locked plus one)\\\"\\r\\n   * @dev To avoid significant precision loss due to multiplication by \\\"fraction of the year\\\" [0, 1],\\r\\n   *      weight is stored multiplied by 1e6 constant, as an integer\\r\\n   * @dev Corner case 1: if time locked is zero, weight is deposit amount multiplied by 1e6\\r\\n   * @dev Corner case 2: if time locked is one year, fraction of the year locked is one, and\\r\\n   *      weight is a deposit amount multiplied by 2 * 1e6\\r\\n   */\\r\\n  uint256 internal constant WEIGHT_MULTIPLIER = 1e6;\\r\\n\\r\\n  /**\\r\\n   * @dev When we know beforehand that staking is done for a year, and fraction of the year locked is one,\\r\\n   *      we use simplified calculation and use the following constant instead previos one\\r\\n   */\\r\\n  uint256 internal constant YEAR_STAKE_WEIGHT_MULTIPLIER = 2 * WEIGHT_MULTIPLIER;\\r\\n\\r\\n  /**\\r\\n   * @dev Rewards per weight are stored multiplied by 1e12, as integers.\\r\\n   */\\r\\n  uint256 internal constant REWARD_PER_WEIGHT_MULTIPLIER = 1e12;\\r\\n\\r\\n  /**\\r\\n   * @dev Fired in _stake() and stake()\\r\\n   *\\r\\n   * @param _by an address which performed an operation, usually token holder\\r\\n   * @param _from token holder address, the tokens will be returned to that address\\r\\n   * @param amount amount of tokens staked\\r\\n   */\\r\\n  event Staked(address indexed _by, address indexed _from, uint256 amount);\\r\\n\\r\\n  /**\\r\\n   * @dev Fired in _updateStakeLock() and updateStakeLock()\\r\\n   *\\r\\n   * @param _by an address which performed an operation\\r\\n   * @param depositId updated deposit ID\\r\\n   * @param lockedFrom deposit locked from value\\r\\n   * @param lockedUntil updated deposit locked until value\\r\\n   */\\r\\n  event StakeLockUpdated(\\r\\n    address indexed _by,\\r\\n    uint256 depositId,\\r\\n    uint64 lockedFrom,\\r\\n    uint64 lockedUntil\\r\\n  );\\r\\n\\r\\n  /**\\r\\n   * @dev Fired in _unstake() and unstake()\\r\\n   *\\r\\n   * @param _by an address which performed an operation, usually token holder\\r\\n   * @param _to an address which received the unstaked tokens, usually token holder\\r\\n   * @param amount amount of tokens unstaked\\r\\n   */\\r\\n  event Unstaked(address indexed _by, address indexed _to, uint256 amount);\\r\\n\\r\\n  /**\\r\\n   * @dev Fired in _sync(), sync() and dependent functions (stake, unstake, etc.)\\r\\n   *\\r\\n   * @param _by an address which performed an operation\\r\\n   * @param yieldRewardsPerWeight updated yield rewards per weight value\\r\\n   * @param lastYieldDistribution usually, current block number\\r\\n   */\\r\\n  event Synchronized(\\r\\n    address indexed _by,\\r\\n    uint256 yieldRewardsPerWeight,\\r\\n    uint64 lastYieldDistribution\\r\\n  );\\r\\n\\r\\n  /**\\r\\n   * @dev Fired in _processRewards(), processRewards() and dependent functions (stake, unstake, etc.)\\r\\n   *\\r\\n   * @param _by an address which performed an operation\\r\\n   * @param _to an address which claimed the yield reward\\r\\n   * @param amount amount of yield paid\\r\\n   */\\r\\n  event YieldClaimed(address indexed _by, address indexed _to, uint256 amount);\\r\\n\\r\\n  /**\\r\\n   * @dev Fired in setWeight()\\r\\n   *\\r\\n   * @param _by an address which performed an operation, always a factory\\r\\n   * @param _fromVal old pool weight value\\r\\n   * @param _toVal new pool weight value\\r\\n   */\\r\\n  event PoolWeightUpdated(address indexed _by, uint32 _fromVal, uint32 _toVal);\\r\\n\\r\\n  /**\\r\\n   * @dev Overridden in sub-contracts to construct the pool\\r\\n   *\\r\\n   * @param _rewardToken Reward ERC20 Token address\\r\\n   * @param _factory Pool factory zStakePoolFactory instance/address\\r\\n   * @param _poolToken token the pool operates on, for example WILD or WILD/ETH pair\\r\\n   * @param _initBlock initial block used to calculate the rewards\\r\\n   *      note: _initBlock can be set to the future effectively meaning _sync() calls will do nothing\\r\\n   * @param _weight number representing a weight of the pool, actual weight fraction\\r\\n   *      is calculated as that number divided by the total pools weight and doesn't exceed one\\r\\n   */\\r\\n  function __zStakePoolBase__init(\\r\\n    address _rewardToken,\\r\\n    zStakePoolFactory _factory,\\r\\n    address _poolToken,\\r\\n    uint64 _initBlock,\\r\\n    uint32 _weight\\r\\n  ) public initializer {\\r\\n    __Ownable_init();\\r\\n\\r\\n    // verify the inputs are set\\r\\n    require(address(_factory) != address(0), \\\"factory address not set\\\");\\r\\n    require(_poolToken != address(0), \\\"pool token address not set\\\");\\r\\n    require(_initBlock > 0, \\\"init block not set\\\");\\r\\n    require(_weight > 0, \\\"pool weight not set\\\");\\r\\n\\r\\n    // save the inputs into internal state variables\\r\\n    factory = _factory;\\r\\n    poolToken = _poolToken;\\r\\n    weight = _weight;\\r\\n    rewardToken = _rewardToken;\\r\\n\\r\\n    // init the dependent internal state variables\\r\\n    lastYieldDistribution = _initBlock;\\r\\n    rewardLockPeriod = 365 days;\\r\\n  }\\r\\n\\r\\n  /**\\r\\n   * @notice Calculates current yield rewards value available for address specified\\r\\n   *\\r\\n   * @param _staker an address to calculate yield rewards value for\\r\\n   * @return calculated yield reward value for the given address\\r\\n   */\\r\\n  function pendingYieldRewards(address _staker) external view override returns (uint256) {\\r\\n    // `newYieldRewardsPerWeight` will store stored or recalculated value for `yieldRewardsPerWeight`\\r\\n    uint256 newYieldRewardsPerWeight;\\r\\n\\r\\n    // if smart contract state was not updated recently, `yieldRewardsPerWeight` value\\r\\n    // is outdated and we need to recalculate it in order to calculate pending rewards correctly\\r\\n    if (blockNumber() > lastYieldDistribution && usersLockingWeight != 0) {\\r\\n      uint256 multiplier = blockNumber() - lastYieldDistribution;\\r\\n      uint256 rewards = (multiplier * weight * factory.getRewardTokensPerBlock()) /\\r\\n        factory.totalWeight();\\r\\n\\r\\n      // recalculated value for `yieldRewardsPerWeight`\\r\\n      newYieldRewardsPerWeight =\\r\\n        rewardToWeight(rewards, usersLockingWeight) +\\r\\n        yieldRewardsPerWeight;\\r\\n    } else {\\r\\n      // if smart contract state is up to date, we don't recalculate\\r\\n      newYieldRewardsPerWeight = yieldRewardsPerWeight;\\r\\n    }\\r\\n\\r\\n    // based on the rewards per weight value, calculate pending rewards;\\r\\n    User memory user = users[_staker];\\r\\n    uint256 pending = weightToReward(user.totalWeight, newYieldRewardsPerWeight) -\\r\\n      user.subYieldRewards;\\r\\n\\r\\n    return pending;\\r\\n  }\\r\\n\\r\\n  /**\\r\\n   * @notice Returns total staked token balance for the given address\\r\\n   *\\r\\n   * @param _user an address to query balance for\\r\\n   * @return total staked token balance\\r\\n   */\\r\\n  function balanceOf(address _user) external view override returns (uint256) {\\r\\n    // read specified user token amount and return\\r\\n    return users[_user].tokenAmount;\\r\\n  }\\r\\n\\r\\n  /**\\r\\n   * @notice Returns information on the given deposit for the given address\\r\\n   *\\r\\n   * @dev See getDepositsLength\\r\\n   *\\r\\n   * @param _user an address to query deposit for\\r\\n   * @param _depositId zero-indexed deposit ID for the address specified\\r\\n   * @return deposit info as Deposit structure\\r\\n   */\\r\\n  function getDeposit(address _user, uint256 _depositId)\\r\\n    external\\r\\n    view\\r\\n    override\\r\\n    returns (Deposit memory)\\r\\n  {\\r\\n    // read deposit at specified index and return\\r\\n    return users[_user].deposits[_depositId];\\r\\n  }\\r\\n\\r\\n  /**\\r\\n   * @notice Returns number of deposits for the given address. Allows iteration over deposits.\\r\\n   *\\r\\n   * @dev See getDeposit\\r\\n   *\\r\\n   * @param _user an address to query deposit length for\\r\\n   * @return number of deposits for the given address\\r\\n   */\\r\\n  function getDepositsLength(address _user) external view override returns (uint256) {\\r\\n    // read deposits array length and return\\r\\n    return users[_user].deposits.length;\\r\\n  }\\r\\n\\r\\n  /**\\r\\n   * @notice Stakes specified amount of tokens for the specified amount of time,\\r\\n   *      and pays pending yield rewards if any\\r\\n   *\\r\\n   * @dev Requires amount to stake to be greater than zero\\r\\n   *\\r\\n   * @param _amount amount of tokens to stake\\r\\n   * @param _lockUntil stake period as unix timestamp; zero means no locking\\r\\n   */\\r\\n  function stake(uint256 _amount, uint64 _lockUntil) external override {\\r\\n    require(!paused(), \\\"contract is paused\\\");\\r\\n    // delegate call to an internal function\\r\\n    _stake(msg.sender, _amount, _lockUntil, false);\\r\\n  }\\r\\n\\r\\n  /**\\r\\n   * @notice Unstakes specified amount of tokens, and pays pending yield rewards if any\\r\\n   *\\r\\n   * @dev Requires amount to unstake to be greater than zero\\r\\n   *\\r\\n   * @param _depositId deposit ID to unstake from, zero-indexed\\r\\n   * @param _amount amount of tokens to unstake\\r\\n   */\\r\\n  function unstake(uint256 _depositId, uint256 _amount) external override {\\r\\n    require(!paused(), \\\"contract is paused\\\");\\r\\n    // delegate call to an internal function\\r\\n    _unstake(msg.sender, _depositId, _amount);\\r\\n  }\\r\\n\\r\\n  /**\\r\\n   * @notice Extends locking period for a given deposit\\r\\n   *\\r\\n   * @dev Requires new lockedUntil value to be:\\r\\n   *      higher than the current one, and\\r\\n   *      in the future, but\\r\\n   *      no more than 1 year in the future\\r\\n   *\\r\\n   * @param depositId updated deposit ID\\r\\n   * @param lockedUntil updated deposit locked until value\\r\\n   */\\r\\n  function updateStakeLock(uint256 depositId, uint64 lockedUntil) external {\\r\\n    require(!paused(), \\\"contract is paused\\\");\\r\\n    // sync and call processRewards\\r\\n    _sync();\\r\\n    _processRewards(msg.sender, false);\\r\\n    // delegate call to an internal function\\r\\n    _updateStakeLock(msg.sender, depositId, lockedUntil);\\r\\n  }\\r\\n\\r\\n  /**\\r\\n   * @notice Service function to synchronize pool state with current time\\r\\n   *\\r\\n   * @dev Can be executed by anyone at any time, but has an effect only when\\r\\n   *      at least one block passes between synchronizations\\r\\n   * @dev Executed internally when staking, unstaking, processing rewards in order\\r\\n   *      for calculations to be correct and to reflect state progress of the contract\\r\\n   * @dev When timing conditions are not met (executed too frequently, or after factory\\r\\n   *      end block), function doesn't throw and exits silently\\r\\n   */\\r\\n  function sync() external override {\\r\\n    require(!paused(), \\\"contract is paused\\\");\\r\\n    // delegate call to an internal function\\r\\n    _sync();\\r\\n  }\\r\\n\\r\\n  /**\\r\\n   * @notice Service function to calculate and pay pending yield rewards to the sender\\r\\n   *\\r\\n   * @dev Can be executed by anyone at any time, but has an effect only when\\r\\n   *      executed by deposit holder and when at least one block passes from the\\r\\n   *      previous reward processing\\r\\n   * @dev Executed internally when staking and unstaking, executes sync() under the hood\\r\\n   *      before making further calculations and payouts\\r\\n   * @dev When timing conditions are not met (executed too frequently, or after factory\\r\\n   *      end block), function doesn't throw and exits silently\\r\\n   *\\r\\n   */\\r\\n  function processRewards() external virtual override {\\r\\n    require(!paused(), \\\"contract is paused\\\");\\r\\n    // delegate call to an internal function\\r\\n    _processRewards(msg.sender, true);\\r\\n  }\\r\\n\\r\\n  /**\\r\\n   * @dev Executed by the factory to modify pool weight; the factory is expected\\r\\n   *      to keep track of the total pools weight when updating\\r\\n   *\\r\\n   * @dev Set weight to zero to disable the pool\\r\\n   *\\r\\n   * @param _weight new weight to set for the pool\\r\\n   */\\r\\n  function setWeight(uint32 _weight) external override {\\r\\n    require(!paused(), \\\"contract is paused\\\");\\r\\n    // verify function is executed by the factory\\r\\n    require(msg.sender == address(factory), \\\"access denied\\\");\\r\\n\\r\\n    // emit an event logging old and new weight values\\r\\n    emit PoolWeightUpdated(msg.sender, weight, _weight);\\r\\n\\r\\n    // set the new weight value\\r\\n    weight = _weight;\\r\\n  }\\r\\n\\r\\n  /**\\r\\n   * @dev Similar to public pendingYieldRewards, but performs calculations based on\\r\\n   *      current smart contract state only, not taking into account any additional\\r\\n   *      time/blocks which might have passed\\r\\n   *\\r\\n   * @param _staker an address to calculate yield rewards value for\\r\\n   * @return pending calculated yield reward value for the given address\\r\\n   */\\r\\n  function _pendingYieldRewards(address _staker) internal view returns (uint256 pending) {\\r\\n    // read user data structure into memory\\r\\n    User memory user = users[_staker];\\r\\n\\r\\n    // and perform the calculation using the values read\\r\\n    return weightToReward(user.totalWeight, yieldRewardsPerWeight) - user.subYieldRewards;\\r\\n  }\\r\\n\\r\\n  /**\\r\\n   * @dev Used internally, mostly by children implementations, see stake()\\r\\n   *\\r\\n   * @param _staker an address which stakes tokens and which will receive them back\\r\\n   * @param _amount amount of tokens to stake\\r\\n   * @param _lockUntil stake period as unix timestamp; zero means no locking\\r\\n   * @param _isYield a flag indicating if that stake is created to store yield reward\\r\\n   *      from the previously unstaked stake\\r\\n   */\\r\\n  function _stake(\\r\\n    address _staker,\\r\\n    uint256 _amount,\\r\\n    uint64 _lockUntil,\\r\\n    bool _isYield\\r\\n  ) internal virtual {\\r\\n    // validate the inputs\\r\\n    require(_amount > 0, \\\"zero amount\\\");\\r\\n    require(\\r\\n      _lockUntil == 0 || (_lockUntil > now256() && _lockUntil - now256() <= 365 days),\\r\\n      \\\"invalid lock interval\\\"\\r\\n    );\\r\\n\\r\\n    // update smart contract state\\r\\n    _sync();\\r\\n\\r\\n    // get a link to user data struct, we will write to it later\\r\\n    User storage user = users[_staker];\\r\\n    // process current pending rewards if any\\r\\n    if (user.tokenAmount > 0) {\\r\\n      _processRewards(_staker, false);\\r\\n    }\\r\\n\\r\\n    // in most of the cases added amount `addedAmount` is simply `_amount`\\r\\n    // however for deflationary tokens this can be different\\r\\n\\r\\n    // read the current balance\\r\\n    uint256 previousBalance = IERC20(poolToken).balanceOf(address(this));\\r\\n    // transfer `_amount`; note: some tokens may get burnt here\\r\\n    transferPoolTokenFrom(address(msg.sender), address(this), _amount);\\r\\n    // read new balance, usually this is just the difference `previousBalance - _amount`\\r\\n    uint256 newBalance = IERC20(poolToken).balanceOf(address(this));\\r\\n    // calculate real amount taking into account deflation\\r\\n    uint256 addedAmount = newBalance - previousBalance;\\r\\n\\r\\n    // set the `lockFrom` and `lockUntil` taking into account that\\r\\n    // zero value for `_lockUntil` means \\\"no locking\\\" and leads to zero values\\r\\n    // for both `lockFrom` and `lockUntil`\\r\\n    uint64 lockFrom = _lockUntil > 0 ? uint64(now256()) : 0;\\r\\n    uint64 lockUntil = _lockUntil;\\r\\n\\r\\n    // stake weight formula rewards for locking\\r\\n    uint256 stakeWeight = (((lockUntil - lockFrom) * WEIGHT_MULTIPLIER) /\\r\\n      365 days +\\r\\n      WEIGHT_MULTIPLIER) * addedAmount;\\r\\n\\r\\n    // makes sure stakeWeight is valid\\r\\n    assert(stakeWeight > 0);\\r\\n\\r\\n    // create and save the deposit (append it to deposits array)\\r\\n    Deposit memory deposit = Deposit({\\r\\n      tokenAmount: addedAmount,\\r\\n      weight: stakeWeight,\\r\\n      lockedFrom: lockFrom,\\r\\n      lockedUntil: lockUntil,\\r\\n      isYield: _isYield\\r\\n    });\\r\\n    // deposit ID is an index of the deposit in `deposits` array\\r\\n    user.deposits.push(deposit);\\r\\n\\r\\n    // update user record\\r\\n    user.tokenAmount += addedAmount;\\r\\n    user.totalWeight += stakeWeight;\\r\\n    user.subYieldRewards = weightToReward(user.totalWeight, yieldRewardsPerWeight);\\r\\n\\r\\n    // update global variable\\r\\n    usersLockingWeight += stakeWeight;\\r\\n\\r\\n    // emit an event\\r\\n    emit Staked(msg.sender, _staker, _amount);\\r\\n  }\\r\\n\\r\\n  /**\\r\\n   * @dev Allows for the rewardLockPeriod to be modified.\\r\\n   */\\r\\n  function changeRewardLockPeriod(uint256 _rewardLockPeriod) external onlyOwner {\\r\\n    require(rewardLockPeriod != _rewardLockPeriod, \\\"same rewardLockPeriod\\\");\\r\\n    rewardLockPeriod = _rewardLockPeriod;\\r\\n  }\\r\\n\\r\\n  /**\\r\\n   * @dev Used internally, mostly by children implementations, see unstake()\\r\\n   *\\r\\n   * @param _staker an address which unstakes tokens (which previously staked them)\\r\\n   * @param _depositId deposit ID to unstake from, zero-indexed\\r\\n   * @param _amount amount of tokens to unstake\\r\\n   */\\r\\n  function _unstake(\\r\\n    address _staker,\\r\\n    uint256 _depositId,\\r\\n    uint256 _amount\\r\\n  ) internal virtual {\\r\\n    // verify an amount is set\\r\\n    require(_amount > 0, \\\"zero amount\\\");\\r\\n\\r\\n    // get a link to user data struct, we will write to it later\\r\\n    User storage user = users[_staker];\\r\\n    // get a link to the corresponding deposit, we may write to it later\\r\\n    Deposit storage stakeDeposit = user.deposits[_depositId];\\r\\n    // deposit structure may get deleted, so we save isYield flag to be able to use it\\r\\n    bool isYield = stakeDeposit.isYield;\\r\\n\\r\\n    // verify available balance\\r\\n    // if staker address ot deposit doesn't exist this check will fail as well\\r\\n    require(stakeDeposit.tokenAmount >= _amount, \\\"amount exceeds stake\\\");\\r\\n\\r\\n    // update smart contract state\\r\\n    _sync();\\r\\n    // and process current pending rewards if any\\r\\n    _processRewards(_staker, false);\\r\\n\\r\\n    // recalculate deposit weight\\r\\n    uint256 previousWeight = stakeDeposit.weight;\\r\\n    uint256 newWeight = (((stakeDeposit.lockedUntil - stakeDeposit.lockedFrom) *\\r\\n      WEIGHT_MULTIPLIER) /\\r\\n      365 days +\\r\\n      WEIGHT_MULTIPLIER) * (stakeDeposit.tokenAmount - _amount);\\r\\n\\r\\n    // update the deposit, or delete it if its depleted\\r\\n    if (stakeDeposit.tokenAmount - _amount == 0) {\\r\\n      delete user.deposits[_depositId];\\r\\n    } else {\\r\\n      stakeDeposit.tokenAmount -= _amount;\\r\\n      stakeDeposit.weight = newWeight;\\r\\n    }\\r\\n\\r\\n    // update user record\\r\\n    user.tokenAmount -= _amount;\\r\\n    user.totalWeight = user.totalWeight - previousWeight + newWeight;\\r\\n    user.subYieldRewards = weightToReward(user.totalWeight, yieldRewardsPerWeight);\\r\\n\\r\\n    // update global variable\\r\\n    usersLockingWeight = usersLockingWeight - previousWeight + newWeight;\\r\\n\\r\\n    // if the deposit was created by the pool itself as a yield reward\\r\\n    if (isYield) {\\r\\n      // @TODO: Replace this\\r\\n      // Make it so it transfers tokens from escrow rewards pool to staker\\r\\n\\r\\n      // mint the yield via the factory\\r\\n      factory.transferRewardYield(msg.sender, _amount);\\r\\n    } else {\\r\\n      // otherwise just return tokens back to holder\\r\\n      transferPoolToken(msg.sender, _amount);\\r\\n    }\\r\\n\\r\\n    // emit an event\\r\\n    emit Unstaked(msg.sender, _staker, _amount);\\r\\n  }\\r\\n\\r\\n  /**\\r\\n   * @dev Used internally, mostly by children implementations, see sync()\\r\\n   *\\r\\n   * @dev Updates smart contract state (`yieldRewardsPerWeight`, `lastYieldDistribution`),\\r\\n   */\\r\\n  function _sync() internal virtual {\\r\\n    if (blockNumber() <= lastYieldDistribution) {\\r\\n      return;\\r\\n    }\\r\\n    // if locking weight is zero - update only `lastYieldDistribution` and exit\\r\\n    if (usersLockingWeight == 0) {\\r\\n      lastYieldDistribution = uint64(blockNumber());\\r\\n      return;\\r\\n    }\\r\\n\\r\\n    // to calculate the reward we need to know how many blocks passed, and reward per block\\r\\n    uint256 currentBlock = blockNumber();\\r\\n    uint256 blocksPassed = currentBlock - lastYieldDistribution;\\r\\n    uint256 rewardPerBlock = factory.getRewardTokensPerBlock();\\r\\n\\r\\n    // calculate the reward\\r\\n    uint256 rewardAmount = (blocksPassed * rewardPerBlock * weight) / factory.totalWeight();\\r\\n\\r\\n    // update rewards per weight and `lastYieldDistribution`\\r\\n    yieldRewardsPerWeight += rewardToWeight(rewardAmount, usersLockingWeight);\\r\\n    lastYieldDistribution = uint64(currentBlock);\\r\\n\\r\\n    // emit an event\\r\\n    emit Synchronized(msg.sender, yieldRewardsPerWeight, lastYieldDistribution);\\r\\n  }\\r\\n\\r\\n  /**\\r\\n   * @dev Used internally, mostly by children implementations, see processRewards()\\r\\n   *\\r\\n   * @param _staker an address which receives the reward (which has staked some tokens earlier)\\r\\n   * @param _withUpdate flag allowing to disable synchronization (see sync()) if set to false\\r\\n   * @return pendingYield the rewards calculated and optionally re-staked\\r\\n   */\\r\\n  function _processRewards(address _staker, bool _withUpdate)\\r\\n    internal\\r\\n    virtual\\r\\n    returns (uint256 pendingYield)\\r\\n  {\\r\\n    // update smart contract state if required\\r\\n    if (_withUpdate) {\\r\\n      _sync();\\r\\n    }\\r\\n\\r\\n    // calculate pending yield rewards, this value will be returned\\r\\n    pendingYield = _pendingYieldRewards(_staker);\\r\\n\\r\\n    // if pending yield is zero - just return silently\\r\\n    if (pendingYield == 0) return 0;\\r\\n\\r\\n    // get link to a user data structure, we will write into it later\\r\\n    User storage user = users[_staker];\\r\\n\\r\\n    if (poolToken == rewardToken) {\\r\\n      // calculate pending yield weight,\\r\\n      // 2e6 is the bonus weight when staking for 1 year\\r\\n      uint256 depositWeight = pendingYield * YEAR_STAKE_WEIGHT_MULTIPLIER;\\r\\n\\r\\n      // if the pool is the Reward Token Pool - create new Reward Token deposit\\r\\n      // and save it - push it into deposits array\\r\\n      Deposit memory newDeposit = Deposit({\\r\\n        tokenAmount: pendingYield,\\r\\n        lockedFrom: uint64(now256()),\\r\\n        lockedUntil: uint64(now256() + rewardLockPeriod), // staking yield for 1 year\\r\\n        weight: depositWeight,\\r\\n        isYield: true\\r\\n      });\\r\\n      user.deposits.push(newDeposit);\\r\\n\\r\\n      // update user record\\r\\n      user.tokenAmount += pendingYield;\\r\\n      user.totalWeight += depositWeight;\\r\\n\\r\\n      // update global variable\\r\\n      usersLockingWeight += depositWeight;\\r\\n    } else {\\r\\n      // for other pools - stake as pool\\r\\n      // This will stake the rewards into the reward token pool\\r\\n      address rewardPool = factory.getPoolAddress(rewardToken);\\r\\n      ICorePool(rewardPool).stakeAsPool(_staker, pendingYield);\\r\\n    }\\r\\n\\r\\n    // update users's record for `subYieldRewards` if requested\\r\\n    if (_withUpdate) {\\r\\n      user.subYieldRewards = weightToReward(user.totalWeight, yieldRewardsPerWeight);\\r\\n    }\\r\\n\\r\\n    // emit an event\\r\\n    emit YieldClaimed(msg.sender, _staker, pendingYield);\\r\\n  }\\r\\n\\r\\n  /**\\r\\n   * @dev See updateStakeLock()\\r\\n   *\\r\\n   * @param _staker an address to update stake lock\\r\\n   * @param _depositId updated deposit ID\\r\\n   * @param _lockedUntil updated deposit locked until value\\r\\n   */\\r\\n  function _updateStakeLock(\\r\\n    address _staker,\\r\\n    uint256 _depositId,\\r\\n    uint64 _lockedUntil\\r\\n  ) internal {\\r\\n    // validate the input time\\r\\n    require(_lockedUntil > now256(), \\\"lock should be in the future\\\");\\r\\n\\r\\n    // get a link to user data struct, we will write to it later\\r\\n    User storage user = users[_staker];\\r\\n    // get a link to the corresponding deposit, we may write to it later\\r\\n    Deposit storage stakeDeposit = user.deposits[_depositId];\\r\\n\\r\\n    // validate the input against deposit structure\\r\\n    require(_lockedUntil > stakeDeposit.lockedUntil, \\\"invalid new lock\\\");\\r\\n\\r\\n    // verify locked from and locked until values\\r\\n    if (stakeDeposit.lockedFrom == 0) {\\r\\n      // Was never locked\\r\\n      require(_lockedUntil - now256() <= 365 days, \\\"max lock period is 365 days\\\");\\r\\n      stakeDeposit.lockedFrom = uint64(now256());\\r\\n    } else {\\r\\n      // Was locked (but for less than 365 days)\\r\\n      require(_lockedUntil - stakeDeposit.lockedFrom <= 365 days, \\\"max lock period is 365 days\\\");\\r\\n    }\\r\\n\\r\\n    // update locked until value, calculate new weight\\r\\n    stakeDeposit.lockedUntil = _lockedUntil;\\r\\n    uint256 newWeight = (((stakeDeposit.lockedUntil - stakeDeposit.lockedFrom) *\\r\\n      WEIGHT_MULTIPLIER) /\\r\\n      365 days +\\r\\n      WEIGHT_MULTIPLIER) * stakeDeposit.tokenAmount;\\r\\n\\r\\n    // save previous weight\\r\\n    uint256 previousWeight = stakeDeposit.weight;\\r\\n    // update weight\\r\\n    stakeDeposit.weight = newWeight;\\r\\n\\r\\n    // update user total weight and global locking weight\\r\\n    user.totalWeight = user.totalWeight - previousWeight + newWeight;\\r\\n    usersLockingWeight = usersLockingWeight - previousWeight + newWeight;\\r\\n\\r\\n    // emit an event\\r\\n    emit StakeLockUpdated(_staker, _depositId, stakeDeposit.lockedFrom, _lockedUntil);\\r\\n  }\\r\\n\\r\\n  /**\\r\\n   * @dev Converts stake weight (not to be mixed with the pool weight) to\\r\\n   *      token reward value, applying the 10^12 division on weight\\r\\n   *\\r\\n   * @param _weight stake weight\\r\\n   * @param rewardPerWeight reward per weight\\r\\n   * @return reward value normalized to 10^12\\r\\n   */\\r\\n  function weightToReward(uint256 _weight, uint256 rewardPerWeight) public pure returns (uint256) {\\r\\n    // apply the formula and return\\r\\n    return (_weight * rewardPerWeight) / REWARD_PER_WEIGHT_MULTIPLIER;\\r\\n  }\\r\\n\\r\\n  /**\\r\\n   * @dev Converts reward value to stake weight (not to be mixed with the pool weight),\\r\\n   *      applying the 10^12 multiplication on the reward\\r\\n   *      - OR -\\r\\n   * @dev Converts reward value to reward/weight if stake weight is supplied as second\\r\\n   *      function parameter instead of reward/weight\\r\\n   *\\r\\n   * @param reward yield reward\\r\\n   * @param rewardPerWeight reward/weight (or stake weight)\\r\\n   * @return stake weight (or reward/weight)\\r\\n   */\\r\\n  function rewardToWeight(uint256 reward, uint256 rewardPerWeight) public pure returns (uint256) {\\r\\n    // apply the reverse formula and return\\r\\n    return (reward * REWARD_PER_WEIGHT_MULTIPLIER) / rewardPerWeight;\\r\\n  }\\r\\n\\r\\n  /**\\r\\n   * @dev Testing time-dependent functionality is difficult and the best way of\\r\\n   *      doing it is to override block number in helper test smart contracts\\r\\n   *\\r\\n   * @return `block.number` in mainnet, custom values in testnets (if overridden)\\r\\n   */\\r\\n  function blockNumber() public view virtual returns (uint256) {\\r\\n    // return current block number\\r\\n    return block.number;\\r\\n  }\\r\\n\\r\\n  /**\\r\\n   * @dev Testing time-dependent functionality is difficult and the best way of\\r\\n   *      doing it is to override time in helper test smart contracts\\r\\n   *\\r\\n   * @return `block.timestamp` in mainnet, custom values in testnets (if overridden)\\r\\n   */\\r\\n  function now256() public view virtual returns (uint256) {\\r\\n    // return current block timestamp\\r\\n    return block.timestamp;\\r\\n  }\\r\\n\\r\\n  /**\\r\\n   * @dev Executes SafeERC20.safeTransfer on a pool token\\r\\n   *\\r\\n   * @dev Reentrancy safety enforced via `ReentrancyGuard.nonReentrant`\\r\\n   */\\r\\n  function transferPoolToken(address _to, uint256 _value) internal nonReentrant {\\r\\n    // just delegate call to the target\\r\\n    SafeERC20.safeTransfer(IERC20(poolToken), _to, _value);\\r\\n  }\\r\\n\\r\\n  /**\\r\\n   * @dev Executes SafeERC20.safeTransferFrom on a pool token\\r\\n   *\\r\\n   * @dev Reentrancy safety enforced via `ReentrancyGuard.nonReentrant`\\r\\n   */\\r\\n  function transferPoolTokenFrom(\\r\\n    address _from,\\r\\n    address _to,\\r\\n    uint256 _value\\r\\n  ) internal nonReentrant {\\r\\n    // just delegate call to the target\\r\\n    SafeERC20.safeTransferFrom(IERC20(poolToken), _from, _to, _value);\\r\\n  }\\r\\n}\\r\\n\"\r\n    },\r\n    \"contracts/interfaces/IPool.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\r\\npragma solidity 0.8.9;\\r\\n\\r\\n/**\\r\\n * @title Staking Pool - Fork of Illuvium\\r\\n *\\r\\n * @notice An abstraction representing a pool, see zStakePoolBase for details\\r\\n *\\r\\n * @author Pedro Bergamini, reviewed by Basil Gorin, modified by Zer0\\r\\n */\\r\\ninterface IPool {\\r\\n  /**\\r\\n   * @dev Deposit is a key data structure used in staking,\\r\\n   *      it represents a unit of stake with its amount, weight and term (time interval)\\r\\n   */\\r\\n  struct Deposit {\\r\\n    // @dev token amount staked\\r\\n    uint256 tokenAmount;\\r\\n    // @dev stake weight\\r\\n    uint256 weight;\\r\\n    // @dev locking period - from\\r\\n    uint64 lockedFrom;\\r\\n    // @dev locking period - until\\r\\n    uint64 lockedUntil;\\r\\n    // @dev indicates if the stake was created as a yield reward\\r\\n    bool isYield;\\r\\n  }\\r\\n\\r\\n  function rewardToken() external view returns (address);\\r\\n\\r\\n  function poolToken() external view returns (address);\\r\\n\\r\\n  function isFlashPool() external view returns (bool);\\r\\n\\r\\n  function weight() external view returns (uint32);\\r\\n\\r\\n  function lastYieldDistribution() external view returns (uint64);\\r\\n\\r\\n  function yieldRewardsPerWeight() external view returns (uint256);\\r\\n\\r\\n  function usersLockingWeight() external view returns (uint256);\\r\\n\\r\\n  function pendingYieldRewards(address _user) external view returns (uint256);\\r\\n\\r\\n  function balanceOf(address _user) external view returns (uint256);\\r\\n\\r\\n  function getDeposit(address _user, uint256 _depositId) external view returns (Deposit memory);\\r\\n\\r\\n  function getDepositsLength(address _user) external view returns (uint256);\\r\\n\\r\\n  function stake(uint256 _amount, uint64 _lockedUntil) external;\\r\\n\\r\\n  function unstake(uint256 _depositId, uint256 _amount) external;\\r\\n\\r\\n  function sync() external;\\r\\n\\r\\n  function processRewards() external;\\r\\n\\r\\n  function setWeight(uint32 _weight) external;\\r\\n}\\r\\n\"\r\n    },\r\n    \"contracts/interfaces/ICorePool.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\r\\n\\r\\npragma solidity 0.8.9;\\r\\n\\r\\nimport \\\"./IPool.sol\\\";\\r\\n\\r\\ninterface ICorePool is IPool {\\r\\n  function poolTokenReserve() external view returns (uint256);\\r\\n\\r\\n  function stakeAsPool(address _staker, uint256 _amount) external;\\r\\n}\\r\\n\"\r\n    },\r\n    \"contracts/ReentrancyGuardUpgradeable.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\r\\n\\r\\npragma solidity ^0.8.0;\\r\\n\\r\\nimport \\\"@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol\\\";\\r\\n\\r\\n/**\\r\\n * @dev Contract module that helps prevent reentrant calls to a function.\\r\\n *\\r\\n * Inheriting from `ReentrancyGuard` will make the {nonReentrant} modifier\\r\\n * available, which can be applied to functions to make sure there are no nested\\r\\n * (reentrant) calls to them.\\r\\n *\\r\\n * Note that because there is a single `nonReentrant` guard, functions marked as\\r\\n * `nonReentrant` may not call one another. This can be worked around by making\\r\\n * those functions `private`, and then adding `external` `nonReentrant` entry\\r\\n * points to them.\\r\\n *\\r\\n * TIP: If you would like to learn more about reentrancy and alternative ways\\r\\n * to protect against it, check out our blog post\\r\\n * https://blog.openzeppelin.com/reentrancy-after-istanbul/[Reentrancy After Istanbul].\\r\\n */\\r\\nabstract contract ReentrancyGuardUpgradeable is Initializable {\\r\\n    // Booleans are more expensive than uint256 or any type that takes up a full\\r\\n    // word because each write operation emits an extra SLOAD to first read the\\r\\n    // slot's contents, replace the bits taken up by the boolean, and then write\\r\\n    // back. This is the compiler's defense against contract upgrades and\\r\\n    // pointer aliasing, and it cannot be disabled.\\r\\n\\r\\n    // The values being non-zero value makes deployment a bit more expensive,\\r\\n    // but in exchange the refund on every call to nonReentrant will be lower in\\r\\n    // amount. Since refunds are capped to a percentage of the total\\r\\n    // transaction's gas, it is best to keep them low in cases like this one, to\\r\\n    // increase the likelihood of the full refund coming into effect.\\r\\n    uint256 private constant _NOT_ENTERED = 1;\\r\\n    uint256 private constant _ENTERED = 2;\\r\\n\\r\\n    uint256 private _status;\\r\\n\\r\\n    function __ReentrancyGuard_init() internal initializer {\\r\\n        __ReentrancyGuard_init_unchained();\\r\\n    }\\r\\n\\r\\n    function __ReentrancyGuard_init_unchained() internal initializer {\\r\\n        _status = _NOT_ENTERED;\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Prevents a contract from calling itself, directly or indirectly.\\r\\n     * Calling a `nonReentrant` function from another `nonReentrant`\\r\\n     * function is not supported. It is possible to prevent this from happening\\r\\n     * by making the `nonReentrant` function external, and make it call a\\r\\n     * `private` function that does the actual work.\\r\\n     */\\r\\n    modifier nonReentrant() {\\r\\n        // On the first call to nonReentrant, _notEntered will be true\\r\\n        require(_status != _ENTERED, \\\"ReentrancyGuard: reentrant call\\\");\\r\\n\\r\\n        // Any calls to nonReentrant after this point will fail\\r\\n        _status = _ENTERED;\\r\\n\\r\\n        _;\\r\\n\\r\\n        // By storing the original value once again, a refund is triggered (see\\r\\n        // https://eips.ethereum.org/EIPS/eip-2200)\\r\\n        _status = _NOT_ENTERED;\\r\\n    }\\r\\n    uint256[49] private __gap;\\r\\n}\\r\\n\"\r\n    },\r\n    \"contracts/zStakePoolFactory.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\r\\npragma solidity ^0.8.9;\\r\\n\\r\\nimport \\\"./interfaces/IPool.sol\\\";\\r\\nimport \\\"./zStakeCorePool.sol\\\";\\r\\nimport \\\"./utils/Ownable.sol\\\";\\r\\nimport \\\"./interfaces/IERC20.sol\\\";\\r\\n\\r\\nimport {OwnableUpgradeable} from \\\"@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol\\\";\\r\\nimport {PausableUpgradeable} from \\\"@openzeppelin/contracts-upgradeable/security/PausableUpgradeable.sol\\\";\\r\\n\\r\\n/**\\r\\n * @title Pool Factory - Fork of Illuvium Pool Factory\\r\\n *\\r\\n * @notice Pool Factory manages Yield farming pools, provides a single\\r\\n *      public interface to access the pools, provides an interface for the pools\\r\\n *      to mint yield rewards, access pool-related info, update weights, etc.\\r\\n *\\r\\n * @notice The factory is authorized (via its owner) to register new pools, change weights\\r\\n *      of the existing pools, removing the pools (by changing their weights to zero)\\r\\n *\\r\\n *\\r\\n * @author Pedro Bergamini, reviewed by Basil Gorin, modified by Zer0\\r\\n */\\r\\ncontract zStakePoolFactory is OwnableUpgradeable, PausableUpgradeable {\\r\\n  /// @dev The reward token\\r\\n  address public rewardToken;\\r\\n\\r\\n  /// @dev The vault that cointains reward tokens which are to be given as staking rewards.\\r\\n  address public rewardVault;\\r\\n\\r\\n  /// @dev Auxiliary data structure used only in getPoolData() view function\\r\\n  struct PoolData {\\r\\n    // @dev pool token address (like WILD)\\r\\n    address poolToken;\\r\\n    // @dev pool address (like deployed core pool instance)\\r\\n    address poolAddress;\\r\\n    // @dev pool weight (200 for WILD pools, 800 for WILD/ETH pools - set during deployment)\\r\\n    uint32 weight;\\r\\n    // @dev flash pool flag\\r\\n    bool isFlashPool;\\r\\n  }\\r\\n\\r\\n  /**\\r\\n   * @dev WILD/block determines yield farming reward base\\r\\n   *      used by the yield pools controlled by the factory\\r\\n   */\\r\\n  uint256 internal rewardTokensPerBlock;\\r\\n\\r\\n  /**\\r\\n   * @dev The yield is distributed proportionally to pool weights;\\r\\n   *      total weight is here to help in determining the proportion\\r\\n   */\\r\\n  uint32 public totalWeight;\\r\\n\\r\\n  /// @dev Maps pool token address (like WILD) -> pool address (like core pool instance)\\r\\n  mapping(address => address) public pools;\\r\\n\\r\\n  /// @dev Keeps track of registered pool addresses, maps pool address -> exists flag\\r\\n  mapping(address => bool) public poolExists;\\r\\n\\r\\n  /**\\r\\n   * @dev Fired in createPool() and registerPool()\\r\\n   *\\r\\n   * @param _by an address which executed an action\\r\\n   * @param poolToken pool token address (like WILD)\\r\\n   * @param poolAddress deployed pool instance address\\r\\n   * @param weight pool weight\\r\\n   * @param isFlashPool flag indicating if pool is a flash pool\\r\\n   */\\r\\n  event PoolRegistered(\\r\\n    address indexed _by,\\r\\n    address indexed poolToken,\\r\\n    address indexed poolAddress,\\r\\n    uint64 weight,\\r\\n    bool isFlashPool\\r\\n  );\\r\\n\\r\\n  /**\\r\\n   * @dev Fired in changePoolWeight()\\r\\n   *\\r\\n   * @param _by an address which executed an action\\r\\n   * @param poolAddress deployed pool instance address\\r\\n   * @param weight new pool weight\\r\\n   */\\r\\n  event WeightUpdated(address indexed _by, address indexed poolAddress, uint32 weight);\\r\\n\\r\\n  /**\\r\\n   * @dev Fired in updateWILDPerBlock()\\r\\n   *\\r\\n   * @param _by an address which executed an action\\r\\n   * @param newIlvPerBlock new WILD/block value\\r\\n   */\\r\\n  event WildRatioUpdated(address indexed _by, uint256 newIlvPerBlock);\\r\\n\\r\\n  /**\\r\\n   * @dev Creates/deploys a factory instance\\r\\n   *\\r\\n   * @param _rewardToken WILD ERC20 token address\\r\\n   * @param _rewardsVault The vault which contains WILD tokens that are staking rewards\\r\\n   * @param _rewardTokensPerBlock initial WILD/block value for rewards\\r\\n   */\\r\\n  function initialize(\\r\\n    address _rewardToken,\\r\\n    address _rewardsVault,\\r\\n    uint192 _rewardTokensPerBlock\\r\\n  ) public initializer {\\r\\n    __Ownable_init();\\r\\n\\r\\n    // verify the inputs are set\\r\\n    require(_rewardTokensPerBlock > 0, \\\"WILD/block not set\\\");\\r\\n\\r\\n    // save the inputs into internal state variables\\r\\n    rewardToken = _rewardToken;\\r\\n    rewardVault = _rewardsVault;\\r\\n    rewardTokensPerBlock = _rewardTokensPerBlock;\\r\\n  }\\r\\n\\r\\n  // Call this on the implementation contract (not the proxy)\\r\\n  function initializeImplementation() public initializer {\\r\\n    __Ownable_init();\\r\\n    _pause();\\r\\n  }\\r\\n\\r\\n  /**\\r\\n   * @notice Given a pool token retrieves corresponding pool address\\r\\n   *\\r\\n   * @dev A shortcut for `pools` mapping\\r\\n   *\\r\\n   * @param poolToken pool token address (like WILD) to query pool address for\\r\\n   * @return pool address for the token specified\\r\\n   */\\r\\n  function getPoolAddress(address poolToken) external view returns (address) {\\r\\n    // read the mapping and return\\r\\n    return pools[poolToken];\\r\\n  }\\r\\n\\r\\n  /**\\r\\n   * @notice Reads pool information for the pool defined by its pool token address,\\r\\n   *      designed to simplify integration with the front ends\\r\\n   *\\r\\n   * @param _poolToken pool token address to query pool information for\\r\\n   * @return pool information packed in a PoolData struct\\r\\n   */\\r\\n  function getPoolData(address _poolToken) public view returns (PoolData memory) {\\r\\n    // get the pool address from the mapping\\r\\n    address poolAddr = pools[_poolToken];\\r\\n\\r\\n    // throw if there is no pool registered for the token specified\\r\\n    require(poolAddr != address(0), \\\"pool not found\\\");\\r\\n\\r\\n    // read pool information from the pool smart contract\\r\\n    // via the pool interface (IPool)\\r\\n    address poolToken = IPool(poolAddr).poolToken();\\r\\n    bool isFlashPool = IPool(poolAddr).isFlashPool();\\r\\n    uint32 weight = IPool(poolAddr).weight();\\r\\n\\r\\n    // create the in-memory structure and return it\\r\\n    return\\r\\n      PoolData({\\r\\n        poolToken: poolToken,\\r\\n        poolAddress: poolAddr,\\r\\n        weight: weight,\\r\\n        isFlashPool: isFlashPool\\r\\n      });\\r\\n  }\\r\\n\\r\\n  /**\\r\\n   * @dev Registers an already deployed pool instance within the factory\\r\\n   *\\r\\n   * @dev Can be executed by the pool factory owner only\\r\\n   *\\r\\n   * @param poolAddr address of the already deployed pool instance\\r\\n   */\\r\\n  function registerPool(address poolAddr) public onlyOwner {\\r\\n    require(!paused(), \\\"contract is paused\\\");\\r\\n    // read pool information from the pool smart contract\\r\\n    // via the pool interface (IPool)\\r\\n    address poolToken = IPool(poolAddr).poolToken();\\r\\n    bool isFlashPool = IPool(poolAddr).isFlashPool();\\r\\n    uint32 weight = IPool(poolAddr).weight();\\r\\n\\r\\n    // ensure that the pool is not already registered within the factory\\r\\n    require(pools[poolToken] == address(0), \\\"this pool is already registered\\\");\\r\\n\\r\\n    // create pool structure, register it within the factory\\r\\n    pools[poolToken] = poolAddr;\\r\\n    poolExists[poolAddr] = true;\\r\\n    // update total pool weight of the factory\\r\\n    totalWeight += weight;\\r\\n\\r\\n    // emit an event\\r\\n    emit PoolRegistered(msg.sender, poolToken, poolAddr, weight, isFlashPool);\\r\\n  }\\r\\n\\r\\n  /**\\r\\n   * @dev Transfers reward tokens from the rewards vault. Executed by Reward Token Pool only\\r\\n   *\\r\\n   * @dev Requires factory to have allowance on rewardVault\\r\\n   *\\r\\n   * @param _to an address to mint tokens to\\r\\n   * @param _amount amount of reward tokens to transfer\\r\\n   */\\r\\n  function transferRewardYield(address _to, uint256 _amount) external {\\r\\n    require(!paused(), \\\"contract is paused\\\");\\r\\n    // verify that sender is a pool registered withing the factory\\r\\n    require(poolExists[msg.sender], \\\"access denied\\\");\\r\\n\\r\\n    // transfer WILD tokens as required\\r\\n    IERC20(rewardToken).transferFrom(rewardVault, _to, _amount);\\r\\n  }\\r\\n\\r\\n  /**\\r\\n   * @dev Changes the weight of the pool;\\r\\n   *      executed by the pool itself or by the factory owner\\r\\n   *\\r\\n   * @param poolAddr address of the pool to change weight for\\r\\n   * @param weight new weight value to set to\\r\\n   */\\r\\n  function changePoolWeight(address poolAddr, uint32 weight) external {\\r\\n    require(!paused(), \\\"contract is paused\\\");\\r\\n    // verify function is executed either by factory owner or by the pool itself\\r\\n    require(msg.sender == owner() || poolExists[msg.sender]);\\r\\n\\r\\n    // recalculate total weight\\r\\n    totalWeight = totalWeight + weight - IPool(poolAddr).weight();\\r\\n\\r\\n    // set the new pool weight\\r\\n    IPool(poolAddr).setWeight(weight);\\r\\n\\r\\n    // emit an event\\r\\n    emit WeightUpdated(msg.sender, poolAddr, weight);\\r\\n  }\\r\\n\\r\\n  /**\\r\\n   * @dev Changes the amount of wild given per block\\r\\n   *\\r\\n   * @param perBlock Amount of wild given per block\\r\\n   */\\r\\n  function changeRewardTokensPerBlock(uint256 perBlock) external {\\r\\n    require(!paused(), \\\"contract is paused\\\");\\r\\n    require(rewardTokensPerBlock != perBlock, \\\"No change\\\");\\r\\n    rewardTokensPerBlock = perBlock;\\r\\n  }\\r\\n\\r\\n  /**\\r\\n   * @dev Testing time-dependent functionality is difficult and the best way of\\r\\n   *      doing it is to override block number in helper test smart contracts\\r\\n   *\\r\\n   * @return `block.number` in mainnet, custom values in testnets (if overridden)\\r\\n   */\\r\\n  function blockNumber() public view virtual returns (uint256) {\\r\\n    // return current block number\\r\\n    return block.number;\\r\\n  }\\r\\n\\r\\n  /**\\r\\n   * @dev Returns amount of tokens to be given per block, may be upgraded in the future\\r\\n   *\\r\\n   * @return Amount of reward tokens to reward per block\\r\\n   */\\r\\n  function getRewardTokensPerBlock() public view returns (uint256) {\\r\\n    return rewardTokensPerBlock;\\r\\n  }\\r\\n}\\r\\n\"\r\n    },\r\n    \"contracts/utils/SafeERC20.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\r\\npragma solidity ^0.8.9;\\r\\n\\r\\nimport \\\"../interfaces/IERC20.sol\\\";\\r\\nimport \\\"./AddressUpgradeable.sol\\\";\\r\\n\\r\\n/**\\r\\n * @title SafeERC20\\r\\n * @dev Wrappers around ERC20 operations that throw on failure (when the token\\r\\n * contract returns false). Tokens that return no value (and instead revert or\\r\\n * throw on failure) are also supported, non-reverting calls are assumed to be\\r\\n * successful.\\r\\n * To use this library you can add a `using SafeERC20 for IERC20;` statement to your contract,\\r\\n * which allows you to call the safe operations as `token.safeTransfer(...)`, etc.\\r\\n */\\r\\nlibrary SafeERC20 {\\r\\n  using AddressUpgradeable for address;\\r\\n\\r\\n  function safeTransfer(\\r\\n    IERC20 token,\\r\\n    address to,\\r\\n    uint256 value\\r\\n  ) internal {\\r\\n    _callOptionalReturn(\\r\\n      token,\\r\\n      abi.encodeWithSelector(token.transfer.selector, to, value)\\r\\n    );\\r\\n  }\\r\\n\\r\\n  function safeTransferFrom(\\r\\n    IERC20 token,\\r\\n    address from,\\r\\n    address to,\\r\\n    uint256 value\\r\\n  ) internal {\\r\\n    _callOptionalReturn(\\r\\n      token,\\r\\n      abi.encodeWithSelector(token.transferFrom.selector, from, to, value)\\r\\n    );\\r\\n  }\\r\\n\\r\\n  /**\\r\\n   * @dev Deprecated. This function has issues similar to the ones found in\\r\\n   * {IERC20-approve}, and its usage is discouraged.\\r\\n   *\\r\\n   * Whenever possible, use {safeIncreaseAllowance} and\\r\\n   * {safeDecreaseAllowance} instead.\\r\\n   */\\r\\n  function safeApprove(\\r\\n    IERC20 token,\\r\\n    address spender,\\r\\n    uint256 value\\r\\n  ) internal {\\r\\n    // safeApprove should only be called when setting an initial allowance,\\r\\n    // or when resetting it to zero. To increase and decrease it, use\\r\\n    // 'safeIncreaseAllowance' and 'safeDecreaseAllowance'\\r\\n    // solhint-disable-next-line max-line-length\\r\\n    require(\\r\\n      (value == 0) || (token.allowance(address(this), spender) == 0),\\r\\n      \\\"SafeERC20: approve from non-zero to non-zero allowance\\\"\\r\\n    );\\r\\n    _callOptionalReturn(\\r\\n      token,\\r\\n      abi.encodeWithSelector(token.approve.selector, spender, value)\\r\\n    );\\r\\n  }\\r\\n\\r\\n  function safeIncreaseAllowance(\\r\\n    IERC20 token,\\r\\n    address spender,\\r\\n    uint256 value\\r\\n  ) internal {\\r\\n    uint256 newAllowance = token.allowance(address(this), spender) + value;\\r\\n    _callOptionalReturn(\\r\\n      token,\\r\\n      abi.encodeWithSelector(token.approve.selector, spender, newAllowance)\\r\\n    );\\r\\n  }\\r\\n\\r\\n  function safeDecreaseAllowance(\\r\\n    IERC20 token,\\r\\n    address spender,\\r\\n    uint256 value\\r\\n  ) internal {\\r\\n    uint256 newAllowance = token.allowance(address(this), spender) - value;\\r\\n    _callOptionalReturn(\\r\\n      token,\\r\\n      abi.encodeWithSelector(token.approve.selector, spender, newAllowance)\\r\\n    );\\r\\n  }\\r\\n\\r\\n  /**\\r\\n   * @dev Imitates a Solidity high-level call (i.e. a regular function call to a contract), relaxing the requirement\\r\\n   * on the return value: the return value is optional (but if data is returned, it must not be false).\\r\\n   * @param token The token targeted by the call.\\r\\n   * @param data The call data (encoded using abi.encode or one of its variants).\\r\\n   */\\r\\n  function _callOptionalReturn(IERC20 token, bytes memory data) private {\\r\\n    // We need to perform a low level call here, to bypass Solidity's return data size checking mechanism, since\\r\\n    // we're implementing it ourselves. We use {Address.functionCall} to perform this call, which verifies that\\r\\n    // the target address contains contract code and also asserts for success in the low-level call.\\r\\n\\r\\n    bytes memory returndata = address(token).functionCall(\\r\\n      data,\\r\\n      \\\"SafeERC20: low-level call failed\\\"\\r\\n    );\\r\\n    if (returndata.length > 0) {\\r\\n      // Return data is optional\\r\\n      // solhint-disable-next-line max-line-length\\r\\n      require(\\r\\n        abi.decode(returndata, (bool)),\\r\\n        \\\"SafeERC20: ERC20 operation did not succeed\\\"\\r\\n      );\\r\\n    }\\r\\n  }\\r\\n}\\r\\n\"\r\n    },\r\n    \"@openzeppelin/contracts-upgradeable/security/PausableUpgradeable.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../utils/ContextUpgradeable.sol\\\";\\nimport \\\"../proxy/utils/Initializable.sol\\\";\\n\\n/**\\n * @dev Contract module which allows children to implement an emergency stop\\n * mechanism that can be triggered by an authorized account.\\n *\\n * This module is used through inheritance. It will make available the\\n * modifiers `whenNotPaused` and `whenPaused`, which can be applied to\\n * the functions of your contract. Note that they will not be pausable by\\n * simply including this module, only once the modifiers are put in place.\\n */\\nabstract contract PausableUpgradeable is Initializable, ContextUpgradeable {\\n    /**\\n     * @dev Emitted when the pause is triggered by `account`.\\n     */\\n    event Paused(address account);\\n\\n    /**\\n     * @dev Emitted when the pause is lifted by `account`.\\n     */\\n    event Unpaused(address account);\\n\\n    bool private _paused;\\n\\n    /**\\n     * @dev Initializes the contract in unpaused state.\\n     */\\n    function __Pausable_init() internal initializer {\\n        __Context_init_unchained();\\n        __Pausable_init_unchained();\\n    }\\n\\n    function __Pausable_init_unchained() internal initializer {\\n        _paused = false;\\n    }\\n\\n    /**\\n     * @dev Returns true if the contract is paused, and false otherwise.\\n     */\\n    function paused() public view virtual returns (bool) {\\n        return _paused;\\n    }\\n\\n    /**\\n     * @dev Modifier to make a function callable only when the contract is not paused.\\n     *\\n     * Requirements:\\n     *\\n     * - The contract must not be paused.\\n     */\\n    modifier whenNotPaused() {\\n        require(!paused(), \\\"Pausable: paused\\\");\\n        _;\\n    }\\n\\n    /**\\n     * @dev Modifier to make a function callable only when the contract is paused.\\n     *\\n     * Requirements:\\n     *\\n     * - The contract must be paused.\\n     */\\n    modifier whenPaused() {\\n        require(paused(), \\\"Pausable: not paused\\\");\\n        _;\\n    }\\n\\n    /**\\n     * @dev Triggers stopped state.\\n     *\\n     * Requirements:\\n     *\\n     * - The contract must not be paused.\\n     */\\n    function _pause() internal virtual whenNotPaused {\\n        _paused = true;\\n        emit Paused(_msgSender());\\n    }\\n\\n    /**\\n     * @dev Returns to normal state.\\n     *\\n     * Requirements:\\n     *\\n     * - The contract must be paused.\\n     */\\n    function _unpause() internal virtual whenPaused {\\n        _paused = false;\\n        emit Unpaused(_msgSender());\\n    }\\n    uint256[49] private __gap;\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev This is a base contract to aid in writing upgradeable contracts, or any kind of contract that will be deployed\\n * behind a proxy. Since a proxied contract can't have a constructor, it's common to move constructor logic to an\\n * external initializer function, usually called `initialize`. It then becomes necessary to protect this initializer\\n * function so it can only be called once. The {initializer} modifier provided by this contract will have this effect.\\n *\\n * TIP: To avoid leaving the proxy in an uninitialized state, the initializer function should be called as early as\\n * possible by providing the encoded function call as the `_data` argument to {ERC1967Proxy-constructor}.\\n *\\n * CAUTION: When used with inheritance, manual care must be taken to not invoke a parent initializer twice, or to ensure\\n * that all initializers are idempotent. This is not verified automatically as constructors are by Solidity.\\n */\\nabstract contract Initializable {\\n    /**\\n     * @dev Indicates that the contract has been initialized.\\n     */\\n    bool private _initialized;\\n\\n    /**\\n     * @dev Indicates that the contract is in the process of being initialized.\\n     */\\n    bool private _initializing;\\n\\n    /**\\n     * @dev Modifier to protect an initializer function from being invoked twice.\\n     */\\n    modifier initializer() {\\n        require(_initializing || !_initialized, \\\"Initializable: contract is already initialized\\\");\\n\\n        bool isTopLevelCall = !_initializing;\\n        if (isTopLevelCall) {\\n            _initializing = true;\\n            _initialized = true;\\n        }\\n\\n        _;\\n\\n        if (isTopLevelCall) {\\n            _initializing = false;\\n        }\\n    }\\n}\\n\"\r\n    },\r\n    \"contracts/utils/Ownable.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\r\\npragma solidity ^0.8.9;\\r\\n\\r\\n/**\\r\\n * @dev Contract module which provides a basic access control mechanism, where\\r\\n * there is an account (an owner) that can be granted exclusive access to\\r\\n * specific functions.\\r\\n *\\r\\n * By default, the owner account will be the one that deploys the contract. This\\r\\n * can later be changed with {transferOwnership}.\\r\\n *\\r\\n * This module is used through inheritance. It will make available the modifier\\r\\n * `onlyOwner`, which can be applied to your functions to restrict their use to\\r\\n * the owner.\\r\\n */\\r\\nabstract contract Ownable {\\r\\n  address private _owner;\\r\\n\\r\\n  event OwnershipTransferred(\\r\\n    address indexed previousOwner,\\r\\n    address indexed newOwner\\r\\n  );\\r\\n\\r\\n  /**\\r\\n   * @dev Initializes the contract setting the deployer as the initial owner.\\r\\n   */\\r\\n  constructor() {\\r\\n    address msgSender = msg.sender;\\r\\n    _owner = msgSender;\\r\\n    emit OwnershipTransferred(address(0), msgSender);\\r\\n  }\\r\\n\\r\\n  /**\\r\\n   * @dev Returns the address of the current owner.\\r\\n   */\\r\\n  function owner() public view virtual returns (address) {\\r\\n    return _owner;\\r\\n  }\\r\\n\\r\\n  /**\\r\\n   * @dev Throws if called by any account other than the owner.\\r\\n   */\\r\\n  modifier onlyOwner() {\\r\\n    require(owner() == msg.sender, \\\"Ownable: caller is not the owner\\\");\\r\\n    _;\\r\\n  }\\r\\n\\r\\n  /**\\r\\n   * @dev Leaves the contract without owner. It will not be possible to call\\r\\n   * `onlyOwner` functions anymore. Can only be called by the current owner.\\r\\n   *\\r\\n   * NOTE: Renouncing ownership will leave the contract without an owner,\\r\\n   * thereby removing any functionality that is only available to the owner.\\r\\n   */\\r\\n  function renounceOwnership() public virtual onlyOwner {\\r\\n    emit OwnershipTransferred(_owner, address(0));\\r\\n    _owner = address(0);\\r\\n  }\\r\\n\\r\\n  /**\\r\\n   * @dev Transfers ownership of the contract to a new account (`newOwner`).\\r\\n   * Can only be called by the current owner.\\r\\n   */\\r\\n  function transferOwnership(address newOwner) public virtual onlyOwner {\\r\\n    require(newOwner != address(0), \\\"Ownable: new owner is the zero address\\\");\\r\\n    emit OwnershipTransferred(_owner, newOwner);\\r\\n    _owner = newOwner;\\r\\n  }\\r\\n}\\r\\n\"\r\n    },\r\n    \"contracts/interfaces/IERC20.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\r\\npragma solidity 0.8.9;\\r\\n\\r\\n/**\\r\\n * @dev Interface of the ERC20 standard as defined in the EIP.\\r\\n */\\r\\ninterface IERC20 {\\r\\n  /**\\r\\n   * @dev Returns the amount of tokens in existence.\\r\\n   */\\r\\n  function totalSupply() external view returns (uint256);\\r\\n\\r\\n  /**\\r\\n   * @dev Returns the amount of tokens owned by `account`.\\r\\n   */\\r\\n  function balanceOf(address account) external view returns (uint256);\\r\\n\\r\\n  /**\\r\\n   * @dev Moves `amount` tokens from the caller's account to `recipient`.\\r\\n   *\\r\\n   * Returns a boolean value indicating whether the operation succeeded.\\r\\n   *\\r\\n   * Emits a {Transfer} event.\\r\\n   */\\r\\n  function transfer(address recipient, uint256 amount) external returns (bool);\\r\\n\\r\\n  /**\\r\\n   * @dev Returns the remaining number of tokens that `spender` will be\\r\\n   * allowed to spend on behalf of `owner` through {transferFrom}. This is\\r\\n   * zero by default.\\r\\n   *\\r\\n   * This value changes when {approve} or {transferFrom} are called.\\r\\n   */\\r\\n  function allowance(address owner, address spender)\\r\\n    external\\r\\n    view\\r\\n    returns (uint256);\\r\\n\\r\\n  /**\\r\\n   * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\\r\\n   *\\r\\n   * Returns a boolean value indicating whether the operation succeeded.\\r\\n   *\\r\\n   * IMPORTANT: Beware that changing an allowance with this method brings the risk\\r\\n   * that someone may use both the old and the new allowance by unfortunate\\r\\n   * transaction ordering. One possible solution to mitigate this race\\r\\n   * condition is to first reduce the spender's allowance to 0 and set the\\r\\n   * desired value afterwards:\\r\\n   * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\\r\\n   *\\r\\n   * Emits an {Approval} event.\\r\\n   */\\r\\n  function approve(address spender, uint256 amount) external returns (bool);\\r\\n\\r\\n  /**\\r\\n   * @dev Moves `amount` tokens from `sender` to `recipient` using the\\r\\n   * allowance mechanism. `amount` is then deducted from the caller's\\r\\n   * allowance.\\r\\n   *\\r\\n   * Returns a boolean value indicating whether the operation succeeded.\\r\\n   *\\r\\n   * Emits a {Transfer} event.\\r\\n   */\\r\\n  function transferFrom(\\r\\n    address sender,\\r\\n    address recipient,\\r\\n    uint256 amount\\r\\n  ) external returns (bool);\\r\\n\\r\\n  /**\\r\\n   * @dev Emitted when `value` tokens are moved from one account (`from`) to\\r\\n   * another (`to`).\\r\\n   *\\r\\n   * Note that `value` may be zero.\\r\\n   */\\r\\n  event Transfer(address indexed from, address indexed to, uint256 value);\\r\\n\\r\\n  /**\\r\\n   * @dev Emitted when the allowance of a `spender` for an `owner` is set by\\r\\n   * a call to {approve}. `value` is the new allowance.\\r\\n   */\\r\\n  event Approval(address indexed owner, address indexed spender, uint256 value);\\r\\n}\\r\\n\"\r\n    },\r\n    \"@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../utils/ContextUpgradeable.sol\\\";\\nimport \\\"../proxy/utils/Initializable.sol\\\";\\n\\n/**\\n * @dev Contract module which provides a basic access control mechanism, where\\n * there is an account (an owner) that can be granted exclusive access to\\n * specific functions.\\n *\\n * By default, the owner account will be the one that deploys the contract. This\\n * can later be changed with {transferOwnership}.\\n *\\n * This module is used through inheritance. It will make available the modifier\\n * `onlyOwner`, which can be applied to your functions to restrict their use to\\n * the owner.\\n */\\nabstract contract OwnableUpgradeable is Initializable, ContextUpgradeable {\\n    address private _owner;\\n\\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\\n\\n    /**\\n     * @dev Initializes the contract setting the deployer as the initial owner.\\n     */\\n    function __Ownable_init() internal initializer {\\n        __Context_init_unchained();\\n        __Ownable_init_unchained();\\n    }\\n\\n    function __Ownable_init_unchained() internal initializer {\\n        _setOwner(_msgSender());\\n    }\\n\\n    /**\\n     * @dev Returns the address of the current owner.\\n     */\\n    function owner() public view virtual returns (address) {\\n        return _owner;\\n    }\\n\\n    /**\\n     * @dev Throws if called by any account other than the owner.\\n     */\\n    modifier onlyOwner() {\\n        require(owner() == _msgSender(), \\\"Ownable: caller is not the owner\\\");\\n        _;\\n    }\\n\\n    /**\\n     * @dev Leaves the contract without owner. It will not be possible to call\\n     * `onlyOwner` functions anymore. Can only be called by the current owner.\\n     *\\n     * NOTE: Renouncing ownership will leave the contract without an owner,\\n     * thereby removing any functionality that is only available to the owner.\\n     */\\n    function renounceOwnership() public virtual onlyOwner {\\n        _setOwner(address(0));\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Can only be called by the current owner.\\n     */\\n    function transferOwnership(address newOwner) public virtual onlyOwner {\\n        require(newOwner != address(0), \\\"Ownable: new owner is the zero address\\\");\\n        _setOwner(newOwner);\\n    }\\n\\n    function _setOwner(address newOwner) private {\\n        address oldOwner = _owner;\\n        _owner = newOwner;\\n        emit OwnershipTransferred(oldOwner, newOwner);\\n    }\\n    uint256[49] private __gap;\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts-upgradeable/utils/ContextUpgradeable.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\nimport \\\"../proxy/utils/Initializable.sol\\\";\\n\\n/**\\n * @dev Provides information about the current execution context, including the\\n * sender of the transaction and its data. While these are generally available\\n * via msg.sender and msg.data, they should not be accessed in such a direct\\n * manner, since when dealing with meta-transactions the account sending and\\n * paying for execution may not be the actual sender (as far as an application\\n * is concerned).\\n *\\n * This contract is only required for intermediate, library-like contracts.\\n */\\nabstract contract ContextUpgradeable is Initializable {\\n    function __Context_init() internal initializer {\\n        __Context_init_unchained();\\n    }\\n\\n    function __Context_init_unchained() internal initializer {\\n    }\\n    function _msgSender() internal view virtual returns (address) {\\n        return msg.sender;\\n    }\\n\\n    function _msgData() internal view virtual returns (bytes calldata) {\\n        return msg.data;\\n    }\\n    uint256[50] private __gap;\\n}\\n\"\r\n    },\r\n    \"contracts/utils/AddressUpgradeable.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\r\\n// OpenZeppelin Contracts v4.4.0 (utils/Address.sol)\\r\\n\\r\\npragma solidity ^0.8.0;\\r\\n\\r\\n/**\\r\\n * @dev Collection of functions related to the address type\\r\\n */\\r\\nlibrary AddressUpgradeable {\\r\\n    /**\\r\\n     * @dev Returns true if `account` is a contract.\\r\\n     *\\r\\n     * [IMPORTANT]\\r\\n     * ====\\r\\n     * It is unsafe to assume that an address for which this function returns\\r\\n     * false is an externally-owned account (EOA) and not a contract.\\r\\n     *\\r\\n     * Among others, `isContract` will return false for the following\\r\\n     * types of addresses:\\r\\n     *\\r\\n     *  - an externally-owned account\\r\\n     *  - a contract in construction\\r\\n     *  - an address where a contract will be created\\r\\n     *  - an address where a contract lived, but was destroyed\\r\\n     * ====\\r\\n     */\\r\\n    function isContract(address account) internal view returns (bool) {\\r\\n        // This method relies on extcodesize, which returns 0 for contracts in\\r\\n        // construction, since the code is only stored at the end of the\\r\\n        // constructor execution.\\r\\n\\r\\n        uint256 size;\\r\\n        assembly {\\r\\n            size := extcodesize(account)\\r\\n        }\\r\\n        return size > 0;\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\\r\\n     * `recipient`, forwarding all available gas and reverting on errors.\\r\\n     *\\r\\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\\r\\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\\r\\n     * imposed by `transfer`, making them unable to receive funds via\\r\\n     * `transfer`. {sendValue} removes this limitation.\\r\\n     *\\r\\n     * https://diligence.consensys.net/posts/2019/09/stop-using-soliditys-transfer-now/[Learn more].\\r\\n     *\\r\\n     * IMPORTANT: because control is transferred to `recipient`, care must be\\r\\n     * taken to not create reentrancy vulnerabilities. Consider using\\r\\n     * {ReentrancyGuard} or the\\r\\n     * https://solidity.readthedocs.io/en/v0.5.11/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\\r\\n     */\\r\\n    function sendValue(address payable recipient, uint256 amount) internal {\\r\\n        require(address(this).balance >= amount, \\\"Address: insufficient balance\\\");\\r\\n\\r\\n        (bool success, ) = recipient.call{value: amount}(\\\"\\\");\\r\\n        require(success, \\\"Address: unable to send value, recipient may have reverted\\\");\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Performs a Solidity function call using a low level `call`. A\\r\\n     * plain `call` is an unsafe replacement for a function call: use this\\r\\n     * function instead.\\r\\n     *\\r\\n     * If `target` reverts with a revert reason, it is bubbled up by this\\r\\n     * function (like regular Solidity function calls).\\r\\n     *\\r\\n     * Returns the raw returned data. To convert to the expected return value,\\r\\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\\r\\n     *\\r\\n     * Requirements:\\r\\n     *\\r\\n     * - `target` must be a contract.\\r\\n     * - calling `target` with `data` must not revert.\\r\\n     *\\r\\n     * _Available since v3.1._\\r\\n     */\\r\\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\\r\\n        return functionCall(target, data, \\\"Address: low-level call failed\\\");\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\\r\\n     * `errorMessage` as a fallback revert reason when `target` reverts.\\r\\n     *\\r\\n     * _Available since v3.1._\\r\\n     */\\r\\n    function functionCall(\\r\\n        address target,\\r\\n        bytes memory data,\\r\\n        string memory errorMessage\\r\\n    ) internal returns (bytes memory) {\\r\\n        return functionCallWithValue(target, data, 0, errorMessage);\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\r\\n     * but also transferring `value` wei to `target`.\\r\\n     *\\r\\n     * Requirements:\\r\\n     *\\r\\n     * - the calling contract must have an ETH balance of at least `value`.\\r\\n     * - the called Solidity function must be `payable`.\\r\\n     *\\r\\n     * _Available since v3.1._\\r\\n     */\\r\\n    function functionCallWithValue(\\r\\n        address target,\\r\\n        bytes memory data,\\r\\n        uint256 value\\r\\n    ) internal returns (bytes memory) {\\r\\n        return functionCallWithValue(target, data, value, \\\"Address: low-level call with value failed\\\");\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\\r\\n     * with `errorMessage` as a fallback revert reason when `target` reverts.\\r\\n     *\\r\\n     * _Available since v3.1._\\r\\n     */\\r\\n    function functionCallWithValue(\\r\\n        address target,\\r\\n        bytes memory data,\\r\\n        uint256 value,\\r\\n        string memory errorMessage\\r\\n    ) internal returns (bytes memory) {\\r\\n        require(address(this).balance >= value, \\\"Address: insufficient balance for call\\\");\\r\\n        require(isContract(target), \\\"Address: call to non-contract\\\");\\r\\n\\r\\n        (bool success, bytes memory returndata) = target.call{value: value}(data);\\r\\n        return verifyCallResult(success, returndata, errorMessage);\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\r\\n     * but performing a static call.\\r\\n     *\\r\\n     * _Available since v3.3._\\r\\n     */\\r\\n    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\\r\\n        return functionStaticCall(target, data, \\\"Address: low-level static call failed\\\");\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\r\\n     * but performing a static call.\\r\\n     *\\r\\n     * _Available since v3.3._\\r\\n     */\\r\\n    function functionStaticCall(\\r\\n        address target,\\r\\n        bytes memory data,\\r\\n        string memory errorMessage\\r\\n    ) internal view returns (bytes memory) {\\r\\n        require(isContract(target), \\\"Address: static call to non-contract\\\");\\r\\n\\r\\n        (bool success, bytes memory returndata) = target.staticcall(data);\\r\\n        return verifyCallResult(success, returndata, errorMessage);\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Tool to verifies that a low level call was successful, and revert if it wasn't, either by bubbling the\\r\\n     * revert reason using the provided one.\\r\\n     *\\r\\n     * _Available since v4.3._\\r\\n     */\\r\\n    function verifyCallResult(\\r\\n        bool success,\\r\\n        bytes memory returndata,\\r\\n        string memory errorMessage\\r\\n    ) internal pure returns (bytes memory) {\\r\\n        if (success) {\\r\\n            return returndata;\\r\\n        } else {\\r\\n            // Look for revert reason and bubble it up if present\\r\\n            if (returndata.length > 0) {\\r\\n                // The easiest way to bubble the revert reason is using memory via assembly\\r\\n\\r\\n                assembly {\\r\\n                    let returndata_size := mload(returndata)\\r\\n                    revert(add(32, returndata), returndata_size)\\r\\n                }\\r\\n            } else {\\r\\n                revert(errorMessage);\\r\\n            }\\r\\n        }\\r\\n    }\\r\\n}\"\r\n    }\r\n  },\r\n  \"settings\": {\r\n    \"optimizer\": {\r\n      \"enabled\": true,\r\n      \"runs\": 200\r\n    },\r\n    \"outputSelection\": {\r\n      \"*\": {\r\n        \"*\": [\r\n          \"evm.bytecode\",\r\n          \"evm.deployedBytecode\",\r\n          \"devdoc\",\r\n          \"userdoc\",\r\n          \"metadata\",\r\n          \"abi\"\r\n        ]\r\n      }\r\n    },\r\n    \"libraries\": {}\r\n  }\r\n}}","ABI":"[{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"Paused\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"_by\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint32\",\"name\":\"_fromVal\",\"type\":\"uint32\"},{\"indexed\":false,\"internalType\":\"uint32\",\"name\":\"_toVal\",\"type\":\"uint32\"}],\"name\":\"PoolWeightUpdated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"_by\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"depositId\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint64\",\"name\":\"lockedFrom\",\"type\":\"uint64\"},{\"indexed\":false,\"internalType\":\"uint64\",\"name\":\"lockedUntil\",\"type\":\"uint64\"}],\"name\":\"StakeLockUpdated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"_by\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"_from\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"Staked\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"_by\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"yieldRewardsPerWeight\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint64\",\"name\":\"lastYieldDistribution\",\"type\":\"uint64\"}],\"name\":\"Synchronized\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"Unpaused\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"_by\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"_to\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"Unstaked\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"_by\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"_to\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"YieldClaimed\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_rewardToken\",\"type\":\"address\"},{\"internalType\":\"contract zStakePoolFactory\",\"name\":\"_factory\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_poolToken\",\"type\":\"address\"},{\"internalType\":\"uint64\",\"name\":\"_initBlock\",\"type\":\"uint64\"},{\"internalType\":\"uint32\",\"name\":\"_weight\",\"type\":\"uint32\"}],\"name\":\"__zStakePoolBase__init\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_user\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"blockNumber\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_rewardLockPeriod\",\"type\":\"uint256\"}],\"name\":\"changeRewardLockPeriod\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"factory\",\"outputs\":[{\"internalType\":\"contract zStakePoolFactory\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_user\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_depositId\",\"type\":\"uint256\"}],\"name\":\"getDeposit\",\"outputs\":[{\"components\":[{\"internalType\":\"uint256\",\"name\":\"tokenAmount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"weight\",\"type\":\"uint256\"},{\"internalType\":\"uint64\",\"name\":\"lockedFrom\",\"type\":\"uint64\"},{\"internalType\":\"uint64\",\"name\":\"lockedUntil\",\"type\":\"uint64\"},{\"internalType\":\"bool\",\"name\":\"isYield\",\"type\":\"bool\"}],\"internalType\":\"struct IPool.Deposit\",\"name\":\"\",\"type\":\"tuple\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_user\",\"type\":\"address\"}],\"name\":\"getDepositsLength\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_rewardToken\",\"type\":\"address\"},{\"internalType\":\"contract zStakePoolFactory\",\"name\":\"_factory\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_poolToken\",\"type\":\"address\"},{\"internalType\":\"uint64\",\"name\":\"_initBlock\",\"type\":\"uint64\"},{\"internalType\":\"uint32\",\"name\":\"_weight\",\"type\":\"uint32\"}],\"name\":\"initialize\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"initializeImplementation\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"isFlashPool\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"lastYieldDistribution\",\"outputs\":[{\"internalType\":\"uint64\",\"name\":\"\",\"type\":\"uint64\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"now256\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"paused\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_staker\",\"type\":\"address\"}],\"name\":\"pendingYieldRewards\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"poolToken\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"poolTokenReserve\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"processRewards\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"rewardLockPeriod\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"reward\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"rewardPerWeight\",\"type\":\"uint256\"}],\"name\":\"rewardToWeight\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"rewardToken\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint32\",\"name\":\"_weight\",\"type\":\"uint32\"}],\"name\":\"setWeight\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"},{\"internalType\":\"uint64\",\"name\":\"_lockUntil\",\"type\":\"uint64\"}],\"name\":\"stake\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_staker\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"stakeAsPool\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"sync\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_depositId\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"unstake\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"depositId\",\"type\":\"uint256\"},{\"internalType\":\"uint64\",\"name\":\"lockedUntil\",\"type\":\"uint64\"}],\"name\":\"updateStakeLock\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"users\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"tokenAmount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"totalWeight\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"subYieldRewards\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"usersLockingWeight\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"weight\",\"outputs\":[{\"internalType\":\"uint32\",\"name\":\"\",\"type\":\"uint32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_weight\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"rewardPerWeight\",\"type\":\"uint256\"}],\"name\":\"weightToReward\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"yieldRewardsPerWeight\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"}]","ContractName":"zStakeCorePool","CompilerVersion":"v0.8.9+commit.e5eed63a","OptimizationUsed":"1","Runs":"200","ConstructorArguments":"","EVMVersion":"Default","Library":"","LicenseType":"","Proxy":"0","Implementation":"","SwarmSource":""}]}