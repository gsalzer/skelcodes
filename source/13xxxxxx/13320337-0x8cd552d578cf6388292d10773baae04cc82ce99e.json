{"status":"1","message":"OK","result":[{"SourceCode":"{\"Address.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\r\\n\\r\\npragma solidity \\u003e=0.6.2 \\u003c0.8.0;\\r\\n\\r\\n/**\\r\\n * @dev Collection of functions related to the address type\\r\\n */\\r\\nlibrary Address {\\r\\n    /**\\r\\n     * @dev Returns true if `account` is a contract.\\r\\n     *\\r\\n     * [IMPORTANT]\\r\\n     * ====\\r\\n     * It is unsafe to assume that an address for which this function returns\\r\\n     * false is an externally-owned account (EOA) and not a contract.\\r\\n     *\\r\\n     * Among others, `isContract` will return false for the following\\r\\n     * types of addresses:\\r\\n     *\\r\\n     *  - an externally-owned account\\r\\n     *  - a contract in construction\\r\\n     *  - an address where a contract will be created\\r\\n     *  - an address where a contract lived, but was destroyed\\r\\n     * ====\\r\\n     */\\r\\n    function isContract(address account) internal view returns (bool) {\\r\\n        // This method relies on extcodesize, which returns 0 for contracts in\\r\\n        // construction, since the code is only stored at the end of the\\r\\n        // constructor execution.\\r\\n\\r\\n        uint256 size;\\r\\n        // solhint-disable-next-line no-inline-assembly\\r\\n        assembly { size := extcodesize(account) }\\r\\n        return size \\u003e 0;\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Replacement for Solidity\\u0027s `transfer`: sends `amount` wei to\\r\\n     * `recipient`, forwarding all available gas and reverting on errors.\\r\\n     *\\r\\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\\r\\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\\r\\n     * imposed by `transfer`, making them unable to receive funds via\\r\\n     * `transfer`. {sendValue} removes this limitation.\\r\\n     *\\r\\n     * https://diligence.consensys.net/posts/2019/09/stop-using-soliditys-transfer-now/[Learn more].\\r\\n     *\\r\\n     * IMPORTANT: because control is transferred to `recipient`, care must be\\r\\n     * taken to not create reentrancy vulnerabilities. Consider using\\r\\n     * {ReentrancyGuard} or the\\r\\n     * https://solidity.readthedocs.io/en/v0.5.11/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\\r\\n     */\\r\\n    function sendValue(address payable recipient, uint256 amount) internal {\\r\\n        require(address(this).balance \\u003e= amount, \\\"Address: insufficient balance\\\");\\r\\n\\r\\n        // solhint-disable-next-line avoid-low-level-calls, avoid-call-value\\r\\n        (bool success, ) = recipient.call{ value: amount }(\\\"\\\");\\r\\n        require(success, \\\"Address: unable to send value, recipient may have reverted\\\");\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Performs a Solidity function call using a low level `call`. A\\r\\n     * plain`call` is an unsafe replacement for a function call: use this\\r\\n     * function instead.\\r\\n     *\\r\\n     * If `target` reverts with a revert reason, it is bubbled up by this\\r\\n     * function (like regular Solidity function calls).\\r\\n     *\\r\\n     * Returns the raw returned data. To convert to the expected return value,\\r\\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\\r\\n     *\\r\\n     * Requirements:\\r\\n     *\\r\\n     * - `target` must be a contract.\\r\\n     * - calling `target` with `data` must not revert.\\r\\n     *\\r\\n     * _Available since v3.1._\\r\\n     */\\r\\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\\r\\n      return functionCall(target, data, \\\"Address: low-level call failed\\\");\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\\r\\n     * `errorMessage` as a fallback revert reason when `target` reverts.\\r\\n     *\\r\\n     * _Available since v3.1._\\r\\n     */\\r\\n    function functionCall(address target, bytes memory data, string memory errorMessage) internal returns (bytes memory) {\\r\\n        return functionCallWithValue(target, data, 0, errorMessage);\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\r\\n     * but also transferring `value` wei to `target`.\\r\\n     *\\r\\n     * Requirements:\\r\\n     *\\r\\n     * - the calling contract must have an ETH balance of at least `value`.\\r\\n     * - the called Solidity function must be `payable`.\\r\\n     *\\r\\n     * _Available since v3.1._\\r\\n     */\\r\\n    function functionCallWithValue(address target, bytes memory data, uint256 value) internal returns (bytes memory) {\\r\\n        return functionCallWithValue(target, data, value, \\\"Address: low-level call with value failed\\\");\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\\r\\n     * with `errorMessage` as a fallback revert reason when `target` reverts.\\r\\n     *\\r\\n     * _Available since v3.1._\\r\\n     */\\r\\n    function functionCallWithValue(address target, bytes memory data, uint256 value, string memory errorMessage) internal returns (bytes memory) {\\r\\n        require(address(this).balance \\u003e= value, \\\"Address: insufficient balance for call\\\");\\r\\n        require(isContract(target), \\\"Address: call to non-contract\\\");\\r\\n\\r\\n        // solhint-disable-next-line avoid-low-level-calls\\r\\n        (bool success, bytes memory returndata) = target.call{ value: value }(data);\\r\\n        return _verifyCallResult(success, returndata, errorMessage);\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\r\\n     * but performing a static call.\\r\\n     *\\r\\n     * _Available since v3.3._\\r\\n     */\\r\\n    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\\r\\n        return functionStaticCall(target, data, \\\"Address: low-level static call failed\\\");\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\r\\n     * but performing a static call.\\r\\n     *\\r\\n     * _Available since v3.3._\\r\\n     */\\r\\n    function functionStaticCall(address target, bytes memory data, string memory errorMessage) internal view returns (bytes memory) {\\r\\n        require(isContract(target), \\\"Address: static call to non-contract\\\");\\r\\n\\r\\n        // solhint-disable-next-line avoid-low-level-calls\\r\\n        (bool success, bytes memory returndata) = target.staticcall(data);\\r\\n        return _verifyCallResult(success, returndata, errorMessage);\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\r\\n     * but performing a delegate call.\\r\\n     *\\r\\n     * _Available since v3.4._\\r\\n     */\\r\\n    function functionDelegateCall(address target, bytes memory data) internal returns (bytes memory) {\\r\\n        return functionDelegateCall(target, data, \\\"Address: low-level delegate call failed\\\");\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\r\\n     * but performing a delegate call.\\r\\n     *\\r\\n     * _Available since v3.4._\\r\\n     */\\r\\n    function functionDelegateCall(address target, bytes memory data, string memory errorMessage) internal returns (bytes memory) {\\r\\n        require(isContract(target), \\\"Address: delegate call to non-contract\\\");\\r\\n\\r\\n        // solhint-disable-next-line avoid-low-level-calls\\r\\n        (bool success, bytes memory returndata) = target.delegatecall(data);\\r\\n        return _verifyCallResult(success, returndata, errorMessage);\\r\\n    }\\r\\n\\r\\n    function _verifyCallResult(bool success, bytes memory returndata, string memory errorMessage) private pure returns(bytes memory) {\\r\\n        if (success) {\\r\\n            return returndata;\\r\\n        } else {\\r\\n            // Look for revert reason and bubble it up if present\\r\\n            if (returndata.length \\u003e 0) {\\r\\n                // The easiest way to bubble the revert reason is using memory via assembly\\r\\n\\r\\n                // solhint-disable-next-line no-inline-assembly\\r\\n                assembly {\\r\\n                    let returndata_size := mload(returndata)\\r\\n                    revert(add(32, returndata), returndata_size)\\r\\n                }\\r\\n            } else {\\r\\n                revert(errorMessage);\\r\\n            }\\r\\n        }\\r\\n    }\\r\\n}\\r\\n\"},\"Context.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\r\\n\\r\\npragma solidity \\u003e=0.6.0 \\u003c0.8.0;\\r\\n\\r\\n/*\\r\\n * @dev Provides information about the current execution context, including the\\r\\n * sender of the transaction and its data. While these are generally available\\r\\n * via msg.sender and msg.data, they should not be accessed in such a direct\\r\\n * manner, since when dealing with GSN meta-transactions the account sending and\\r\\n * paying for execution may not be the actual sender (as far as an application\\r\\n * is concerned).\\r\\n *\\r\\n * This contract is only required for intermediate, library-like contracts.\\r\\n */\\r\\nabstract contract Context {\\r\\n    function _msgSender() internal view virtual returns (address payable) {\\r\\n        return msg.sender;\\r\\n    }\\r\\n\\r\\n    function _msgData() internal view virtual returns (bytes memory) {\\r\\n        this; // silence state mutability warning without generating bytecode - see https://github.com/ethereum/solidity/issues/2691\\r\\n        return msg.data;\\r\\n    }\\r\\n}\\r\\n\"},\"ERC20.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\r\\n\\r\\n/*\\r\\n    From https://github.com/OpenZeppelin/openzeppelin-contracts/blob/master/contracts/token/ERC20/ERC20.sol\\r\\n\\r\\n    The constructor has been removed and name, symbol, decimals are made internal instead of private.\\r\\n    This allows this contract to be used with MinimalProxy.\\r\\n*/\\r\\n\\r\\npragma solidity 0.6.9;\\r\\n\\r\\nimport \\\"./SafeMath.sol\\\";\\r\\nimport \\\"./Context.sol\\\";\\r\\nimport \\\"./IERC20.sol\\\";\\r\\n\\r\\n\\r\\n/**\\r\\n * @dev Implementation of the {IERC20} interface.\\r\\n *\\r\\n * This implementation is agnostic to the way tokens are created. This means\\r\\n * that a supply mechanism has to be added in a derived contract using {_mint}.\\r\\n * For a generic mechanism see {ERC20PresetMinterPauser}.\\r\\n *\\r\\n * TIP: For a detailed writeup see our guide\\r\\n * https://forum.zeppelin.solutions/t/how-to-implement-erc20-supply-mechanisms/226[How\\r\\n * to implement supply mechanisms].\\r\\n *\\r\\n * We have followed general OpenZeppelin guidelines: functions revert instead\\r\\n * of returning `false` on failure. This behavior is nonetheless conventional\\r\\n * and does not conflict with the expectations of ERC20 applications.\\r\\n *\\r\\n * Additionally, an {Approval} event is emitted on calls to {transferFrom}.\\r\\n * This allows applications to reconstruct the allowance for all accounts just\\r\\n * by listening to said events. Other implementations of the EIP may not emit\\r\\n * these events, as it isn\\u0027t required by the specification.\\r\\n *\\r\\n * Finally, the non-standard {decreaseAllowance} and {increaseAllowance}\\r\\n * functions have been added to mitigate the well-known issues around setting\\r\\n * allowances. See {IERC20-approve}.\\r\\n */\\r\\ncontract ERC20 is Context, IERC20 {\\r\\n    using SafeMath for uint256;\\r\\n\\r\\n    mapping (address =\\u003e uint256) private _balances;\\r\\n\\r\\n    mapping (address =\\u003e mapping (address =\\u003e uint256)) private _allowances;\\r\\n\\r\\n    uint256 private _totalSupply;\\r\\n\\r\\n    string internal _name;\\r\\n    string internal _symbol;\\r\\n    uint8 internal _decimals;\\r\\n\\r\\n    /**\\r\\n     * @dev Returns the name of the token.\\r\\n     */\\r\\n    function name() public view returns (string memory) {\\r\\n        return _name;\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Returns the symbol of the token, usually a shorter version of the\\r\\n     * name.\\r\\n     */\\r\\n    function symbol() public view returns (string memory) {\\r\\n        return _symbol;\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Returns the number of decimals used to get its user representation.\\r\\n     * For example, if `decimals` equals `2`, a balance of `505` tokens should\\r\\n     * be displayed to a user as `5,05` (`505 / 10 ** 2`).\\r\\n     *\\r\\n     * Tokens usually opt for a value of 18, imitating the relationship between\\r\\n     * Ether and Wei. This is the value {ERC20} uses, unless {_setupDecimals} is\\r\\n     * called.\\r\\n     *\\r\\n     * NOTE: This information is only used for _display_ purposes: it in\\r\\n     * no way affects any of the arithmetic of the contract, including\\r\\n     * {IERC20-balanceOf} and {IERC20-transfer}.\\r\\n     */\\r\\n    function decimals() public view returns (uint8) {\\r\\n        return _decimals;\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev See {IERC20-totalSupply}.\\r\\n     */\\r\\n    function totalSupply() public view override returns (uint256) {\\r\\n        return _totalSupply;\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev See {IERC20-balanceOf}.\\r\\n     */\\r\\n    function balanceOf(address account) public view override returns (uint256) {\\r\\n        return _balances[account];\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev See {IERC20-transfer}.\\r\\n     *\\r\\n     * Requirements:\\r\\n     *\\r\\n     * - `recipient` cannot be the zero address.\\r\\n     * - the caller must have a balance of at least `amount`.\\r\\n     */\\r\\n    function transfer(address recipient, uint256 amount) public virtual override returns (bool) {\\r\\n        _transfer(_msgSender(), recipient, amount);\\r\\n        return true;\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev See {IERC20-allowance}.\\r\\n     */\\r\\n    function allowance(address owner, address spender) public view virtual override returns (uint256) {\\r\\n        return _allowances[owner][spender];\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev See {IERC20-approve}.\\r\\n     *\\r\\n     * Requirements:\\r\\n     *\\r\\n     * - `spender` cannot be the zero address.\\r\\n     */\\r\\n    function approve(address spender, uint256 amount) public virtual override returns (bool) {\\r\\n        _approve(_msgSender(), spender, amount);\\r\\n        return true;\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev See {IERC20-transferFrom}.\\r\\n     *\\r\\n     * Emits an {Approval} event indicating the updated allowance. This is not\\r\\n     * required by the EIP. See the note at the beginning of {ERC20}.\\r\\n     *\\r\\n     * Requirements:\\r\\n     *\\r\\n     * - `sender` and `recipient` cannot be the zero address.\\r\\n     * - `sender` must have a balance of at least `amount`.\\r\\n     * - the caller must have allowance for ``sender``\\u0027s tokens of at least\\r\\n     * `amount`.\\r\\n     */\\r\\n    function transferFrom(address sender, address recipient, uint256 amount) public virtual override returns (bool) {\\r\\n        _transfer(sender, recipient, amount);\\r\\n        _approve(sender, _msgSender(), _allowances[sender][_msgSender()].sub(amount, \\\"ERC20: transfer amount exceeds allowance\\\"));\\r\\n        return true;\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Atomically increases the allowance granted to `spender` by the caller.\\r\\n     *\\r\\n     * This is an alternative to {approve} that can be used as a mitigation for\\r\\n     * problems described in {IERC20-approve}.\\r\\n     *\\r\\n     * Emits an {Approval} event indicating the updated allowance.\\r\\n     *\\r\\n     * Requirements:\\r\\n     *\\r\\n     * - `spender` cannot be the zero address.\\r\\n     */\\r\\n    function increaseAllowance(address spender, uint256 addedValue) public virtual returns (bool) {\\r\\n        _approve(_msgSender(), spender, _allowances[_msgSender()][spender].add(addedValue));\\r\\n        return true;\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Atomically decreases the allowance granted to `spender` by the caller.\\r\\n     *\\r\\n     * This is an alternative to {approve} that can be used as a mitigation for\\r\\n     * problems described in {IERC20-approve}.\\r\\n     *\\r\\n     * Emits an {Approval} event indicating the updated allowance.\\r\\n     *\\r\\n     * Requirements:\\r\\n     *\\r\\n     * - `spender` cannot be the zero address.\\r\\n     * - `spender` must have allowance for the caller of at least\\r\\n     * `subtractedValue`.\\r\\n     */\\r\\n    function decreaseAllowance(address spender, uint256 subtractedValue) public virtual returns (bool) {\\r\\n        _approve(_msgSender(), spender, _allowances[_msgSender()][spender].sub(subtractedValue, \\\"ERC20: decreased allowance below zero\\\"));\\r\\n        return true;\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Moves tokens `amount` from `sender` to `recipient`.\\r\\n     *\\r\\n     * This is internal function is equivalent to {transfer}, and can be used to\\r\\n     * e.g. implement automatic token fees, slashing mechanisms, etc.\\r\\n     *\\r\\n     * Emits a {Transfer} event.\\r\\n     *\\r\\n     * Requirements:\\r\\n     *\\r\\n     * - `sender` cannot be the zero address.\\r\\n     * - `recipient` cannot be the zero address.\\r\\n     * - `sender` must have a balance of at least `amount`.\\r\\n     */\\r\\n    function _transfer(address sender, address recipient, uint256 amount) internal virtual {\\r\\n        require(sender != address(0), \\\"ERC20: transfer from the zero address\\\");\\r\\n        require(recipient != address(0), \\\"ERC20: transfer to the zero address\\\");\\r\\n\\r\\n        _beforeTokenTransfer(sender, recipient, amount);\\r\\n\\r\\n        _balances[sender] = _balances[sender].sub(amount, \\\"ERC20: transfer amount exceeds balance\\\");\\r\\n        _balances[recipient] = _balances[recipient].add(amount);\\r\\n        emit Transfer(sender, recipient, amount);\\r\\n    }\\r\\n\\r\\n    /** @dev Creates `amount` tokens and assigns them to `account`, increasing\\r\\n     * the total supply.\\r\\n     *\\r\\n     * Emits a {Transfer} event with `from` set to the zero address.\\r\\n     *\\r\\n     * Requirements:\\r\\n     *\\r\\n     * - `to` cannot be the zero address.\\r\\n     */\\r\\n    function _mint(address account, uint256 amount) internal virtual {\\r\\n        require(account != address(0), \\\"ERC20: mint to the zero address\\\");\\r\\n\\r\\n        _beforeTokenTransfer(address(0), account, amount);\\r\\n\\r\\n        _totalSupply = _totalSupply.add(amount);\\r\\n        _balances[account] = _balances[account].add(amount);\\r\\n        emit Transfer(address(0), account, amount);\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Destroys `amount` tokens from `account`, reducing the\\r\\n     * total supply.\\r\\n     *\\r\\n     * Emits a {Transfer} event with `to` set to the zero address.\\r\\n     *\\r\\n     * Requirements:\\r\\n     *\\r\\n     * - `account` cannot be the zero address.\\r\\n     * - `account` must have at least `amount` tokens.\\r\\n     */\\r\\n    function _burn(address account, uint256 amount) internal virtual {\\r\\n        require(account != address(0), \\\"ERC20: burn from the zero address\\\");\\r\\n\\r\\n        _beforeTokenTransfer(account, address(0), amount);\\r\\n\\r\\n        _balances[account] = _balances[account].sub(amount, \\\"ERC20: burn amount exceeds balance\\\");\\r\\n        _totalSupply = _totalSupply.sub(amount);\\r\\n        emit Transfer(account, address(0), amount);\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Sets `amount` as the allowance of `spender` over the `owner` s tokens.\\r\\n     *\\r\\n     * This internal function is equivalent to `approve`, and can be used to\\r\\n     * e.g. set automatic allowances for certain subsystems, etc.\\r\\n     *\\r\\n     * Emits an {Approval} event.\\r\\n     *\\r\\n     * Requirements:\\r\\n     *\\r\\n     * - `owner` cannot be the zero address.\\r\\n     * - `spender` cannot be the zero address.\\r\\n     */\\r\\n    function _approve(address owner, address spender, uint256 amount) internal virtual {\\r\\n        require(owner != address(0), \\\"ERC20: approve from the zero address\\\");\\r\\n        require(spender != address(0), \\\"ERC20: approve to the zero address\\\");\\r\\n\\r\\n        _allowances[owner][spender] = amount;\\r\\n        emit Approval(owner, spender, amount);\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Sets {decimals} to a value other than the default one of 18.\\r\\n     *\\r\\n     * WARNING: This function should only be called from the constructor. Most\\r\\n     * applications that interact with token contracts will not expect\\r\\n     * {decimals} to ever change, and may work incorrectly if it does.\\r\\n     */\\r\\n    function _setupDecimals(uint8 decimals_) internal {\\r\\n        _decimals = decimals_;\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Hook that is called before any transfer of tokens. This includes\\r\\n     * minting and burning.\\r\\n     *\\r\\n     * Calling conditions:\\r\\n     *\\r\\n     * - when `from` and `to` are both non-zero, `amount` of ``from``\\u0027s tokens\\r\\n     * will be to transferred to `to`.\\r\\n     * - when `from` is zero, `amount` tokens will be minted for `to`.\\r\\n     * - when `to` is zero, `amount` of ``from``\\u0027s tokens will be burned.\\r\\n     * - `from` and `to` are never both zero.\\r\\n     *\\r\\n     * To learn more about hooks, head to xref:ROOT:extending-contracts.adoc#using-hooks[Using Hooks].\\r\\n     */\\r\\n    function _beforeTokenTransfer(address from, address to, uint256 amount) internal virtual { }\\r\\n}\"},\"IdeaToken.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\r\\npragma solidity 0.6.9;\\r\\n\\r\\nimport \\\"./ERC20.sol\\\";\\r\\nimport \\\"./Ownable.sol\\\";\\r\\nimport \\\"./Initializable.sol\\\";\\r\\nimport \\\"./IIdeaToken.sol\\\";\\r\\n\\r\\n/**\\r\\n * @title IdeaToken\\r\\n * @author Alexander Schlindwein\\r\\n *\\r\\n * IdeaTokens are implementations of the ERC20 interface\\r\\n * They can be burned and minted by the owner of the contract instance which is the IdeaTokenExchange\\r\\n *\\r\\n * New instances are created using a MinimalProxy\\r\\n */\\r\\ncontract IdeaToken is IIdeaToken, ERC20, Ownable, Initializable {\\r\\n\\r\\n    /**\\r\\n     * Constructs an IdeaToken with 18 decimals\\r\\n     * The constructor is called by the IdeaTokenFactory when a new token is listed\\r\\n     * The owner of the contract is set to msg.sender\\r\\n     *\\r\\n     * @param __name The name of the token. IdeaTokenFactory will prefix the market name\\r\\n     * @param owner The owner of this contract, IdeaTokenExchange\\r\\n     */\\r\\n    function initialize(string calldata __name, address owner) external override initializer {\\r\\n        setOwnerInternal(owner);\\r\\n        _decimals = 18;\\r\\n        _symbol = \\\"IDT\\\";\\r\\n        _name = __name;\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * Mints a given amount of tokens to an address\\r\\n     * May only be called by the owner\\r\\n     *\\r\\n     * @param account The address to receive the minted tokens\\r\\n     * @param amount The amount of tokens to mint\\r\\n     */\\r\\n    function mint(address account, uint256 amount) external override onlyOwner {\\r\\n        _mint(account, amount);\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * Burns a given amount of tokens from an address.\\r\\n     * May only be called by the owner\\r\\n     *\\r\\n     * @param account The address for the tokens to be burned from\\r\\n     * @param amount The amount of tokens to be burned\\r\\n     */\\r\\n    function burn(address account, uint256 amount) external override onlyOwner {\\r\\n        _burn(account, amount);\\r\\n    }\\r\\n}\"},\"IdeaTokenFactory.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\r\\npragma solidity 0.6.9;\\r\\npragma experimental ABIEncoderV2;\\r\\n\\r\\nimport \\\"./MinimalProxy.sol\\\";\\r\\nimport \\\"./Initializable.sol\\\";\\r\\nimport \\\"./Ownable.sol\\\";\\r\\nimport \\\"./IIdeaTokenFactory.sol\\\";\\r\\nimport \\\"./IdeaToken.sol\\\";\\r\\nimport \\\"./IIdeaToken.sol\\\";\\r\\nimport \\\"./IIdeaTokenNameVerifier.sol\\\";\\r\\nimport \\\"./SafeMath.sol\\\";\\r\\n\\r\\n/**\\r\\n * @title IdeaTokenFactory\\r\\n * @author Alexander Schlindwein\\r\\n *\\r\\n * Manages the creation of markets and IdeaTokens\\r\\n * Sits behind an AdminUpgradabilityProxy\\r\\n */\\r\\ncontract IdeaTokenFactory is IIdeaTokenFactory, Initializable, Ownable {\\r\\n\\r\\n    using SafeMath for uint256;\\r\\n\\r\\n    // Contains details for each market\\r\\n    struct MarketInfo {\\r\\n        mapping(uint =\\u003e TokenInfo) tokens;\\r\\n        mapping(string =\\u003e uint) tokenIDs;\\r\\n        mapping(string =\\u003e bool) tokenNameUsed;\\r\\n\\r\\n        MarketDetails marketDetails;\\r\\n    }\\r\\n\\r\\n    uint constant FEE_SCALE = 10000;\\r\\n\\r\\n    // Address of the IdeaTokenExchange contract\\r\\n    // This is needed to transfer ownership of a newly created IdeaToken to the IdeaTokenExchange\\r\\n    address _ideaTokenExchange;\\r\\n\\r\\n    // Address of the IdeaToken logic contract\\r\\n    address _ideaTokenLogic;\\r\\n\\r\\n    // IdeaTokenAddress =\\u003e IDPair. Stores an IDPair (marketID, tokenID) for an IdeaToken\\r\\n    mapping(address =\\u003e IDPair) _tokenIDPairs;\\r\\n\\r\\n    // marketID =\\u003e MarketInfo. Stores information for a market\\r\\n    mapping(uint =\\u003e MarketInfo) _markets;\\r\\n    // market name =\\u003e marketID. Translates market names to market IDs.\\r\\n    mapping(string =\\u003e uint) _marketIDs;\\r\\n    // The amount of existing markets.\\r\\n    uint _numMarkets;\\r\\n\\r\\n    event NewMarket(uint id,\\r\\n                    string name,\\r\\n                    uint baseCost,\\r\\n                    uint priceRise,\\r\\n                    uint hatchTokens,\\r\\n                    uint tradingFeeRate,\\r\\n                    uint platformFeeRate,\\r\\n                    bool allInterestToPlatform,\\r\\n                    address nameVerifier);\\r\\n\\r\\n    event NewToken(uint id, uint marketID, string name, address addr, address lister);\\r\\n    event NewTradingFee(uint marketID, uint tradingFeeRate);\\r\\n    event NewPlatformFee(uint marketID, uint platformFeeRate);\\r\\n    event NewNameVerifier(uint marketID, address nameVerifier);\\r\\n\\r\\n    /**\\r\\n     * Initializes the contract with all required values\\r\\n     *\\r\\n     * @param owner The owner of the contract\\r\\n     */\\r\\n    function initialize(address owner, address ideaTokenExchange, address ideaTokenLogic) external virtual initializer {\\r\\n        require(ideaTokenExchange != address(0) \\u0026\\u0026 ideaTokenLogic != address(0), \\\"invalid-params\\\");\\r\\n\\r\\n        setOwnerInternal(owner); // Checks owner to be non-zero\\r\\n        _ideaTokenExchange = ideaTokenExchange;\\r\\n        _ideaTokenLogic = ideaTokenLogic;\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * Adds a new market\\r\\n     * May only be called by the owner\\r\\n     *\\r\\n     * @param marketName The name of the market\\r\\n     * @param nameVerifier The address of the name verifier\\r\\n     * @param baseCost: The initial cost in Dai per IdeaToken in the first interval\\r\\n     * @param priceRise: The price rise in Dai per IdeaToken per completed interval\\r\\n     * @param hatchTokens: The amount of IdeaTokens for which the price does not change initially\\r\\n     * @param tradingFeeRate: The trading fee rate\\r\\n     * @param platformFeeRate: The platform fee rate\\r\\n     * @param allInterestToPlatform: If true, all interest goes to the platform instead of the token owner\\r\\n     */\\r\\n    function addMarket(string calldata marketName, address nameVerifier,\\r\\n                       uint baseCost, uint priceRise, uint hatchTokens,\\r\\n                       uint tradingFeeRate, uint platformFeeRate, bool allInterestToPlatform) external virtual override onlyOwner {\\r\\n        require(_marketIDs[marketName] == 0, \\\"market-exists\\\");\\r\\n\\r\\n        require(nameVerifier != address(0) \\u0026\\u0026\\r\\n                baseCost \\u003e 0 \\u0026\\u0026\\r\\n                tradingFeeRate.add(platformFeeRate) \\u003c= FEE_SCALE,\\r\\n                \\\"invalid-params\\\");\\r\\n\\r\\n        uint marketID = ++_numMarkets;\\r\\n\\r\\n        MarketInfo memory marketInfo = MarketInfo({\\r\\n            marketDetails: MarketDetails({\\r\\n                exists: true,\\r\\n                id: marketID,\\r\\n                name: marketName,\\r\\n                nameVerifier: IIdeaTokenNameVerifier(nameVerifier),\\r\\n                numTokens: 0,\\r\\n                baseCost: baseCost,\\r\\n                priceRise: priceRise,\\r\\n                hatchTokens: hatchTokens,\\r\\n                tradingFeeRate: tradingFeeRate,\\r\\n                platformFeeRate: platformFeeRate,\\r\\n                allInterestToPlatform: allInterestToPlatform\\r\\n            })\\r\\n        });\\r\\n\\r\\n        _markets[marketID] = marketInfo;\\r\\n        _marketIDs[marketName] = marketID;\\r\\n\\r\\n        emitNewMarketEvent(marketInfo.marketDetails);\\r\\n    }\\r\\n\\r\\n    /// Stack too deep if we do it directly in `addMarket`\\r\\n    function emitNewMarketEvent(MarketDetails memory marketDetails) internal virtual {\\r\\n        emit NewMarket(marketDetails.id,\\r\\n                       marketDetails.name,\\r\\n                       marketDetails.baseCost,\\r\\n                       marketDetails.priceRise,\\r\\n                       marketDetails.hatchTokens,\\r\\n                       marketDetails.tradingFeeRate,\\r\\n                       marketDetails.platformFeeRate,\\r\\n                       marketDetails.allInterestToPlatform,\\r\\n                       address(marketDetails.nameVerifier));\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * Adds a new IdeaToken using MinimalProxy\\r\\n     *\\r\\n     * @param tokenName The name of the token\\r\\n     * @param marketID The ID of the market\\r\\n     * @param lister The address of the account which off-chain software shall see as lister of this token. Only emitted, not stored\\r\\n     */\\r\\n    function addToken(string calldata tokenName, uint marketID, address lister) external virtual override {\\r\\n        MarketInfo storage marketInfo = _markets[marketID];\\r\\n        require(marketInfo.marketDetails.exists, \\\"market-not-exist\\\");\\r\\n        require(isValidTokenName(tokenName, marketID), \\\"invalid-name\\\");\\r\\n\\r\\n        IIdeaToken ideaToken = IIdeaToken(address(new MinimalProxy(_ideaTokenLogic)));\\r\\n        ideaToken.initialize(string(abi.encodePacked(marketInfo.marketDetails.name, \\\": \\\", tokenName)), _ideaTokenExchange);\\r\\n\\r\\n        uint tokenID = ++marketInfo.marketDetails.numTokens;\\r\\n        TokenInfo memory tokenInfo = TokenInfo({\\r\\n            exists: true,\\r\\n            id: tokenID,\\r\\n            name: tokenName,\\r\\n            ideaToken: ideaToken\\r\\n        });\\r\\n\\r\\n        marketInfo.tokens[tokenID] = tokenInfo;\\r\\n        marketInfo.tokenIDs[tokenName] = tokenID;\\r\\n        marketInfo.tokenNameUsed[tokenName] = true;\\r\\n        _tokenIDPairs[address(ideaToken)] = IDPair({\\r\\n            exists: true,\\r\\n            marketID: marketID,\\r\\n            tokenID: tokenID\\r\\n        });\\r\\n\\r\\n        emit NewToken(tokenID, marketID, tokenName, address(ideaToken), lister);\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * Checks whether a token name is allowed and not used already\\r\\n     *\\r\\n     * @param tokenName The intended token name\\r\\n     * @param marketID The market on which the token is to be listed\\r\\n     *\\r\\n     * @return True if the name is allowed, false otherwise\\r\\n     */\\r\\n    function isValidTokenName(string calldata tokenName, uint marketID) public virtual view override returns (bool) {\\r\\n\\r\\n        MarketInfo storage marketInfo = _markets[marketID];\\r\\n        MarketDetails storage marketDetails = marketInfo.marketDetails;\\r\\n\\r\\n        if(marketInfo.tokenNameUsed[tokenName] || !marketDetails.nameVerifier.verifyTokenName(tokenName)) {\\r\\n            return false;\\r\\n        }\\r\\n\\r\\n        return true;\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * Returns the market id by the market name\\r\\n     *\\r\\n     * @param marketName The market name\\r\\n     *\\r\\n     * @return The market id\\r\\n     */\\r\\n    function getMarketIDByName(string calldata marketName) external view override returns (uint) {\\r\\n        return _marketIDs[marketName];\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * Returns the market details by the market id\\r\\n     *\\r\\n     * @param marketID The market id\\r\\n     *\\r\\n     * @return The market details\\r\\n     */\\r\\n    function getMarketDetailsByID(uint marketID) external view override returns (MarketDetails memory) {\\r\\n        return _markets[marketID].marketDetails;\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * Returns the market details by the market name\\r\\n     *\\r\\n     * @param marketName The market name\\r\\n     *\\r\\n     * @return The market details\\r\\n     */\\r\\n    function getMarketDetailsByName(string calldata marketName) external view override returns (MarketDetails memory) {\\r\\n        return _markets[_marketIDs[marketName]].marketDetails;\\r\\n    }\\r\\n\\r\\n    function getMarketDetailsByTokenAddress(address ideaToken) external view override returns (MarketDetails memory) {\\r\\n        return _markets[_tokenIDPairs[ideaToken].marketID].marketDetails;\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * Returns the amount of existing markets\\r\\n     *\\r\\n     * @return The amount of existing markets\\r\\n     */\\r\\n    function getNumMarkets() external view override  returns (uint) {\\r\\n        return _numMarkets;\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * Returns the token id by the token name and market id\\r\\n     *\\r\\n     * @param tokenName The token name\\r\\n     * @param marketID The market id\\r\\n     *\\r\\n     * @return The token id\\r\\n     */\\r\\n    function getTokenIDByName(string calldata tokenName, uint marketID) external view override returns (uint) {\\r\\n        return _markets[marketID].tokenIDs[tokenName];\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * Returns the token info by the token id and market id\\r\\n     *\\r\\n     * @param marketID The market id\\r\\n     * @param tokenID The token id\\r\\n     *\\r\\n     * @return The token info\\r\\n     */\\r\\n    function getTokenInfo(uint marketID, uint tokenID) external view override returns (TokenInfo memory) {\\r\\n        return _markets[marketID].tokens[tokenID];\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * Returns the token id pair by the tokens address\\r\\n     *\\r\\n     * @param token The tokens address\\r\\n     *\\r\\n     * @return The token id pair\\r\\n     */\\r\\n    function getTokenIDPair(address token) external view override returns (IDPair memory) {\\r\\n        return _tokenIDPairs[token];\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * Sets the trading fee for a market\\r\\n     * May only be called by the owner\\r\\n     *\\r\\n     * @param marketID The market id for which to set the trading fee\\r\\n     * @param tradingFeeRate The trading fee\\r\\n     */\\r\\n    function setTradingFee(uint marketID, uint tradingFeeRate) external virtual override onlyOwner {\\r\\n        MarketDetails storage marketDetails = _markets[marketID].marketDetails;\\r\\n        require(marketDetails.exists, \\\"market-not-exist\\\");\\r\\n        require(marketDetails.platformFeeRate.add(tradingFeeRate) \\u003c= FEE_SCALE, \\\"invalid-fees\\\");\\r\\n        marketDetails.tradingFeeRate = tradingFeeRate;\\r\\n        \\r\\n        emit NewTradingFee(marketID, tradingFeeRate);\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * Sets the platform fee for a market\\r\\n     * May only be called by the owner\\r\\n     *\\r\\n     * @param marketID The market id for which to set the platform fee\\r\\n     * @param platformFeeRate The platform fee\\r\\n     */\\r\\n    function setPlatformFee(uint marketID, uint platformFeeRate) external virtual override onlyOwner {\\r\\n        MarketDetails storage marketDetails = _markets[marketID].marketDetails;\\r\\n        require(marketDetails.exists, \\\"market-not-exist\\\");\\r\\n        require(marketDetails.tradingFeeRate.add(platformFeeRate) \\u003c= FEE_SCALE, \\\"invalid-fees\\\");\\r\\n        marketDetails.platformFeeRate = platformFeeRate;\\r\\n\\r\\n        emit NewPlatformFee(marketID, platformFeeRate);\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * Changes the address of the name verifier for a market\\r\\n     * May only be called by the owner\\r\\n     *\\r\\n     * @param marketID The marketID for which to change the name verifier\\r\\n     * @param nameVerifier The new name verifier address\\r\\n     */\\r\\n    function setNameVerifier(uint marketID, address nameVerifier) external virtual override onlyOwner {\\r\\n        require(nameVerifier != address(0), \\\"zero-verifier\\\");\\r\\n\\r\\n        MarketDetails storage marketDetails = _markets[marketID].marketDetails;\\r\\n        require(marketDetails.exists, \\\"market-not-exist\\\");\\r\\n        marketDetails.nameVerifier = IIdeaTokenNameVerifier(nameVerifier);\\r\\n\\r\\n        emit NewNameVerifier(marketID, nameVerifier);\\r\\n    }\\r\\n}\"},\"IdeaTokenFactoryStateTransfer.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\r\\npragma solidity 0.6.9;\\r\\npragma experimental ABIEncoderV2;\\r\\n\\r\\nimport \\\"./IdeaTokenFactory.sol\\\"; \\r\\n\\r\\n/**\\r\\n * @title IdeaTokenFactoryStateTransfer\\r\\n * @author Alexander Schlindwein\\r\\n *\\r\\n * Replaces the L1 IdeaTokenFactory logic for the state transfer to Optimism L2.\\r\\n * \\r\\n * This implementation will disable most methods.\\r\\n */\\r\\ncontract IdeaTokenFactoryStateTransfer is IdeaTokenFactory {\\r\\n\\r\\n    /* **********************************************\\r\\n     * ************  Disabled functions  ************\\r\\n     * ********************************************** \\r\\n     */\\r\\n\\r\\n    function initialize(address owner, address ideaTokenExchange, address ideaTokenLogic) external override {\\r\\n        owner; ideaTokenExchange; ideaTokenLogic;\\r\\n        revert(\\\"x\\\");\\r\\n    }\\r\\n\\r\\n    function addMarket(string calldata marketName, address nameVerifier,\\r\\n                       uint baseCost, uint priceRise, uint hatchTokens,\\r\\n                       uint tradingFeeRate, uint platformFeeRate, bool allInterestToPlatform) external override {\\r\\n        marketName; nameVerifier; baseCost; priceRise; hatchTokens; tradingFeeRate; platformFeeRate; allInterestToPlatform;\\r\\n        revert(\\\"x\\\");\\r\\n    }\\r\\n\\r\\n    function emitNewMarketEvent(MarketDetails memory marketDetails) internal override {\\r\\n        marketDetails;\\r\\n        revert(\\\"x\\\");\\r\\n    }\\r\\n\\r\\n    function addToken(string calldata tokenName, uint marketID, address lister) external override {\\r\\n        tokenName; marketID; lister;\\r\\n        revert(\\\"x\\\");\\r\\n    }\\r\\n\\r\\n    function isValidTokenName(string calldata tokenName, uint marketID) public view override returns (bool) {\\r\\n        tokenName; marketID;\\r\\n        revert(\\\"x\\\");\\r\\n    }\\r\\n\\r\\n    function setTradingFee(uint marketID, uint tradingFeeRate) external override {\\r\\n        marketID; tradingFeeRate;\\r\\n        revert(\\\"x\\\");\\r\\n    }\\r\\n\\r\\n    function setPlatformFee(uint marketID, uint platformFeeRate) external override {\\r\\n        marketID; platformFeeRate;\\r\\n        revert(\\\"x\\\");\\r\\n    }\\r\\n\\r\\n    function setNameVerifier(uint marketID, address nameVerifier) external override {\\r\\n        marketID; nameVerifier;\\r\\n        revert(\\\"x\\\");\\r\\n    }\\r\\n}\"},\"IERC20.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\r\\n\\r\\npragma solidity \\u003e=0.6.0 \\u003c0.8.0;\\r\\n\\r\\n/**\\r\\n * @dev Interface of the ERC20 standard as defined in the EIP.\\r\\n */\\r\\ninterface IERC20 {\\r\\n    /**\\r\\n     * @dev Returns the amount of tokens in existence.\\r\\n     */\\r\\n    function totalSupply() external view returns (uint256);\\r\\n\\r\\n    /**\\r\\n     * @dev Returns the amount of tokens owned by `account`.\\r\\n     */\\r\\n    function balanceOf(address account) external view returns (uint256);\\r\\n\\r\\n    /**\\r\\n     * @dev Moves `amount` tokens from the caller\\u0027s account to `recipient`.\\r\\n     *\\r\\n     * Returns a boolean value indicating whether the operation succeeded.\\r\\n     *\\r\\n     * Emits a {Transfer} event.\\r\\n     */\\r\\n    function transfer(address recipient, uint256 amount) external returns (bool);\\r\\n\\r\\n    /**\\r\\n     * @dev Returns the remaining number of tokens that `spender` will be\\r\\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\\r\\n     * zero by default.\\r\\n     *\\r\\n     * This value changes when {approve} or {transferFrom} are called.\\r\\n     */\\r\\n    function allowance(address owner, address spender) external view returns (uint256);\\r\\n\\r\\n    /**\\r\\n     * @dev Sets `amount` as the allowance of `spender` over the caller\\u0027s tokens.\\r\\n     *\\r\\n     * Returns a boolean value indicating whether the operation succeeded.\\r\\n     *\\r\\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\\r\\n     * that someone may use both the old and the new allowance by unfortunate\\r\\n     * transaction ordering. One possible solution to mitigate this race\\r\\n     * condition is to first reduce the spender\\u0027s allowance to 0 and set the\\r\\n     * desired value afterwards:\\r\\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\\r\\n     *\\r\\n     * Emits an {Approval} event.\\r\\n     */\\r\\n    function approve(address spender, uint256 amount) external returns (bool);\\r\\n\\r\\n    /**\\r\\n     * @dev Moves `amount` tokens from `sender` to `recipient` using the\\r\\n     * allowance mechanism. `amount` is then deducted from the caller\\u0027s\\r\\n     * allowance.\\r\\n     *\\r\\n     * Returns a boolean value indicating whether the operation succeeded.\\r\\n     *\\r\\n     * Emits a {Transfer} event.\\r\\n     */\\r\\n    function transferFrom(address sender, address recipient, uint256 amount) external returns (bool);\\r\\n\\r\\n    /**\\r\\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\\r\\n     * another (`to`).\\r\\n     *\\r\\n     * Note that `value` may be zero.\\r\\n     */\\r\\n    event Transfer(address indexed from, address indexed to, uint256 value);\\r\\n\\r\\n    /**\\r\\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\\r\\n     * a call to {approve}. `value` is the new allowance.\\r\\n     */\\r\\n    event Approval(address indexed owner, address indexed spender, uint256 value);\\r\\n}\\r\\n\"},\"IIdeaToken.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\r\\npragma solidity 0.6.9;\\r\\n\\r\\nimport \\\"./IERC20.sol\\\";\\r\\n\\r\\n/**\\r\\n * @title IIdeaToken\\r\\n * @author Alexander Schlindwein\\r\\n */\\r\\ninterface IIdeaToken is IERC20 {\\r\\n    function initialize(string calldata __name, address owner) external;\\r\\n    function mint(address account, uint256 amount) external;\\r\\n    function burn(address account, uint256 amount) external;\\r\\n}\"},\"IIdeaTokenFactory.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\r\\npragma solidity 0.6.9;\\r\\npragma experimental ABIEncoderV2;\\r\\n\\r\\nimport \\\"./IERC20.sol\\\";\\r\\nimport \\\"./IIdeaToken.sol\\\";\\r\\nimport \\\"./IIdeaTokenNameVerifier.sol\\\";\\r\\n\\r\\n/**\\r\\n * @title IIdeaTokenFactory\\r\\n * @author Alexander Schlindwein\\r\\n */\\r\\n\\r\\nstruct IDPair {\\r\\n    bool exists;\\r\\n    uint marketID;\\r\\n    uint tokenID;\\r\\n}\\r\\n\\r\\nstruct TokenInfo {\\r\\n    bool exists;\\r\\n    uint id;\\r\\n    string name;\\r\\n    IIdeaToken ideaToken;\\r\\n}\\r\\n\\r\\nstruct MarketDetails {\\r\\n    bool exists;\\r\\n    uint id;\\r\\n    string name;\\r\\n\\r\\n    IIdeaTokenNameVerifier nameVerifier;\\r\\n    uint numTokens;\\r\\n\\r\\n    uint baseCost;\\r\\n    uint priceRise;\\r\\n    uint hatchTokens;\\r\\n    uint tradingFeeRate;\\r\\n    uint platformFeeRate;\\r\\n\\r\\n    bool allInterestToPlatform;\\r\\n}\\r\\n\\r\\ninterface IIdeaTokenFactory {\\r\\n    function addMarket(string calldata marketName, address nameVerifier,\\r\\n                       uint baseCost, uint priceRise, uint hatchTokens,\\r\\n                       uint tradingFeeRate, uint platformFeeRate, bool allInterestToPlatform) external;\\r\\n\\r\\n    function addToken(string calldata tokenName, uint marketID, address lister) external;\\r\\n\\r\\n    function isValidTokenName(string calldata tokenName, uint marketID) external view returns (bool);\\r\\n    function getMarketIDByName(string calldata marketName) external view returns (uint);\\r\\n    function getMarketDetailsByID(uint marketID) external view returns (MarketDetails memory);\\r\\n    function getMarketDetailsByName(string calldata marketName) external view returns (MarketDetails memory);\\r\\n    function getMarketDetailsByTokenAddress(address ideaToken) external view returns (MarketDetails memory);\\r\\n    function getNumMarkets() external view returns (uint);\\r\\n    function getTokenIDByName(string calldata tokenName, uint marketID) external view returns (uint);\\r\\n    function getTokenInfo(uint marketID, uint tokenID) external view returns (TokenInfo memory);\\r\\n    function getTokenIDPair(address token) external view returns (IDPair memory);\\r\\n    function setTradingFee(uint marketID, uint tradingFeeRate) external;\\r\\n    function setPlatformFee(uint marketID, uint platformFeeRate) external;\\r\\n    function setNameVerifier(uint marketID, address nameVerifier) external;\\r\\n}\"},\"IIdeaTokenNameVerifier.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\r\\npragma solidity 0.6.9;\\r\\n\\r\\n/**\\r\\n * @title IIdeaTokenNameVerifier\\r\\n * @author Alexander Schlindwein\\r\\n *\\r\\n * Interface for token name verifiers\\r\\n */\\r\\ninterface IIdeaTokenNameVerifier {\\r\\n    function verifyTokenName(string calldata name) external pure returns (bool);\\r\\n}\"},\"Initializable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\r\\n// https://github.com/OpenZeppelin/openzeppelin-upgrades/blob/master/packages/core/contracts/Initializable.sol\\r\\n\\r\\npragma solidity 0.6.9;\\r\\n\\r\\n\\r\\n/**\\r\\n * @title Initializable\\r\\n *\\r\\n * @dev Helper contract to support initializer functions. To use it, replace\\r\\n * the constructor with a function that has the `initializer` modifier.\\r\\n * WARNING: Unlike constructors, initializer functions must be manually\\r\\n * invoked. This applies both to deploying an Initializable contract, as well\\r\\n * as extending an Initializable contract via inheritance.\\r\\n * WARNING: When used with inheritance, manual care must be taken to not invoke\\r\\n * a parent initializer twice, or ensure that all initializers are idempotent,\\r\\n * because this is not dealt with automatically as with constructors.\\r\\n */\\r\\ncontract Initializable {\\r\\n\\r\\n  /**\\r\\n   * @dev Indicates that the contract has been initialized.\\r\\n   */\\r\\n  bool private initialized;\\r\\n\\r\\n  /**\\r\\n   * @dev Indicates that the contract is in the process of being initialized.\\r\\n   */\\r\\n  bool private initializing;\\r\\n\\r\\n  /**\\r\\n   * @dev Modifier to use in the initializer function of a contract.\\r\\n   */\\r\\n  modifier initializer() {\\r\\n    require(initializing || isConstructor() || !initialized, \\\"already-initialized\\\");\\r\\n\\r\\n    bool isTopLevelCall = !initializing;\\r\\n    if (isTopLevelCall) {\\r\\n      initializing = true;\\r\\n      initialized = true;\\r\\n    }\\r\\n\\r\\n    _;\\r\\n\\r\\n    if (isTopLevelCall) {\\r\\n      initializing = false;\\r\\n    }\\r\\n  }\\r\\n\\r\\n  /// @dev Returns true if and only if the function is running in the constructor\\r\\n  function isConstructor() private view returns (bool) {\\r\\n    // extcodesize checks the size of the code stored in an address, and\\r\\n    // address returns the current address. Since the code is still not\\r\\n    // deployed when running a constructor, any checks on its code size will\\r\\n    // yield zero, making it an effective way to detect if a contract is\\r\\n    // under construction or not.\\r\\n    address self = address(this);\\r\\n    uint256 cs;\\r\\n    assembly { cs := extcodesize(self) }\\r\\n    return cs == 0;\\r\\n  }\\r\\n\\r\\n  // Reserved storage space to allow for layout changes in the future.\\r\\n  uint256[50] private ______gap;\\r\\n}\"},\"MinimalProxy.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\r\\npragma solidity 0.6.9;\\r\\n\\r\\n/**\\r\\n * @title MinimalProxy\\r\\n * @author Alexander Schlindwein\\r\\n *\\r\\n * Minimal proxy contract which delegates to an implementation\\r\\n */\\r\\ncontract MinimalProxy {\\r\\n    // Implementation address storage slot\\r\\n    bytes32 constant IMPLEMENTATION_SLOT = bytes32(uint256(keccak256(\\\"eip1967.proxy.implementation\\\")) - 1);\\r\\n\\r\\n    /**\\r\\n     * Constructs a new proxy which delegates to the implementation address\\r\\n     */\\r\\n    constructor(address implementation) public {\\r\\n        require(implementation != address(0), \\\"invalid-params\\\");\\r\\n        bytes32 slot = IMPLEMENTATION_SLOT;\\r\\n        assembly {\\r\\n            sstore(slot, implementation)\\r\\n        }\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * Every call is delegated to the implementation\\r\\n     */\\r\\n    fallback() payable external {\\r\\n        bytes32 slot = IMPLEMENTATION_SLOT;\\r\\n        assembly {\\r\\n          calldatacopy(0, 0, calldatasize())\\r\\n          let result := delegatecall(gas(), sload(slot), 0, calldatasize(), 0, 0)\\r\\n          returndatacopy(0, 0, returndatasize())\\r\\n    \\r\\n          switch result\\r\\n          case 0 { revert(0, returndatasize()) }\\r\\n          default { return(0, returndatasize()) }\\r\\n        }\\r\\n    }    \\r\\n}\\r\\n\"},\"Ownable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\r\\npragma solidity 0.6.9;\\r\\n\\r\\n/**\\r\\n * @title Ownable\\r\\n * @author Alexander Schlindwein\\r\\n *\\r\\n * @dev Implements only-owner functionality\\r\\n */\\r\\ncontract Ownable {\\r\\n\\r\\n    address _owner;\\r\\n\\r\\n    event OwnershipChanged(address oldOwner, address newOwner);\\r\\n\\r\\n    modifier onlyOwner {\\r\\n        require(_owner == msg.sender, \\\"only-owner\\\");\\r\\n        _;\\r\\n    }\\r\\n\\r\\n    function setOwner(address newOwner) external onlyOwner {\\r\\n        setOwnerInternal(newOwner);\\r\\n    }\\r\\n\\r\\n    function setOwnerInternal(address newOwner) internal {\\r\\n        require(newOwner != address(0), \\\"zero-addr\\\");\\r\\n\\r\\n        address oldOwner = _owner;\\r\\n        _owner = newOwner;\\r\\n\\r\\n        emit OwnershipChanged(oldOwner, newOwner);\\r\\n    }\\r\\n\\r\\n    function getOwner() external view returns (address) {\\r\\n        return _owner;\\r\\n    }\\r\\n}\"},\"SafeMath.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\r\\n\\r\\npragma solidity \\u003e=0.6.0 \\u003c0.8.0;\\r\\n\\r\\n/**\\r\\n * @dev Wrappers over Solidity\\u0027s arithmetic operations with added overflow\\r\\n * checks.\\r\\n *\\r\\n * Arithmetic operations in Solidity wrap on overflow. This can easily result\\r\\n * in bugs, because programmers usually assume that an overflow raises an\\r\\n * error, which is the standard behavior in high level programming languages.\\r\\n * `SafeMath` restores this intuition by reverting the transaction when an\\r\\n * operation overflows.\\r\\n *\\r\\n * Using this library instead of the unchecked operations eliminates an entire\\r\\n * class of bugs, so it\\u0027s recommended to use it always.\\r\\n */\\r\\nlibrary SafeMath {\\r\\n    /**\\r\\n     * @dev Returns the addition of two unsigned integers, with an overflow flag.\\r\\n     *\\r\\n     * _Available since v3.4._\\r\\n     */\\r\\n    function tryAdd(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\r\\n        uint256 c = a + b;\\r\\n        if (c \\u003c a) return (false, 0);\\r\\n        return (true, c);\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Returns the substraction of two unsigned integers, with an overflow flag.\\r\\n     *\\r\\n     * _Available since v3.4._\\r\\n     */\\r\\n    function trySub(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\r\\n        if (b \\u003e a) return (false, 0);\\r\\n        return (true, a - b);\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Returns the multiplication of two unsigned integers, with an overflow flag.\\r\\n     *\\r\\n     * _Available since v3.4._\\r\\n     */\\r\\n    function tryMul(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\r\\n        // Gas optimization: this is cheaper than requiring \\u0027a\\u0027 not being zero, but the\\r\\n        // benefit is lost if \\u0027b\\u0027 is also tested.\\r\\n        // See: https://github.com/OpenZeppelin/openzeppelin-contracts/pull/522\\r\\n        if (a == 0) return (true, 0);\\r\\n        uint256 c = a * b;\\r\\n        if (c / a != b) return (false, 0);\\r\\n        return (true, c);\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Returns the division of two unsigned integers, with a division by zero flag.\\r\\n     *\\r\\n     * _Available since v3.4._\\r\\n     */\\r\\n    function tryDiv(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\r\\n        if (b == 0) return (false, 0);\\r\\n        return (true, a / b);\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Returns the remainder of dividing two unsigned integers, with a division by zero flag.\\r\\n     *\\r\\n     * _Available since v3.4._\\r\\n     */\\r\\n    function tryMod(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\r\\n        if (b == 0) return (false, 0);\\r\\n        return (true, a % b);\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Returns the addition of two unsigned integers, reverting on\\r\\n     * overflow.\\r\\n     *\\r\\n     * Counterpart to Solidity\\u0027s `+` operator.\\r\\n     *\\r\\n     * Requirements:\\r\\n     *\\r\\n     * - Addition cannot overflow.\\r\\n     */\\r\\n    function add(uint256 a, uint256 b) internal pure returns (uint256) {\\r\\n        uint256 c = a + b;\\r\\n        require(c \\u003e= a, \\\"SafeMath: addition overflow\\\");\\r\\n        return c;\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Returns the subtraction of two unsigned integers, reverting on\\r\\n     * overflow (when the result is negative).\\r\\n     *\\r\\n     * Counterpart to Solidity\\u0027s `-` operator.\\r\\n     *\\r\\n     * Requirements:\\r\\n     *\\r\\n     * - Subtraction cannot overflow.\\r\\n     */\\r\\n    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\\r\\n        require(b \\u003c= a, \\\"SafeMath: subtraction overflow\\\");\\r\\n        return a - b;\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Returns the multiplication of two unsigned integers, reverting on\\r\\n     * overflow.\\r\\n     *\\r\\n     * Counterpart to Solidity\\u0027s `*` operator.\\r\\n     *\\r\\n     * Requirements:\\r\\n     *\\r\\n     * - Multiplication cannot overflow.\\r\\n     */\\r\\n    function mul(uint256 a, uint256 b) internal pure returns (uint256) {\\r\\n        if (a == 0) return 0;\\r\\n        uint256 c = a * b;\\r\\n        require(c / a == b, \\\"SafeMath: multiplication overflow\\\");\\r\\n        return c;\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Returns the integer division of two unsigned integers, reverting on\\r\\n     * division by zero. The result is rounded towards zero.\\r\\n     *\\r\\n     * Counterpart to Solidity\\u0027s `/` operator. Note: this function uses a\\r\\n     * `revert` opcode (which leaves remaining gas untouched) while Solidity\\r\\n     * uses an invalid opcode to revert (consuming all remaining gas).\\r\\n     *\\r\\n     * Requirements:\\r\\n     *\\r\\n     * - The divisor cannot be zero.\\r\\n     */\\r\\n    function div(uint256 a, uint256 b) internal pure returns (uint256) {\\r\\n        require(b \\u003e 0, \\\"SafeMath: division by zero\\\");\\r\\n        return a / b;\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\\r\\n     * reverting when dividing by zero.\\r\\n     *\\r\\n     * Counterpart to Solidity\\u0027s `%` operator. This function uses a `revert`\\r\\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\\r\\n     * invalid opcode to revert (consuming all remaining gas).\\r\\n     *\\r\\n     * Requirements:\\r\\n     *\\r\\n     * - The divisor cannot be zero.\\r\\n     */\\r\\n    function mod(uint256 a, uint256 b) internal pure returns (uint256) {\\r\\n        require(b \\u003e 0, \\\"SafeMath: modulo by zero\\\");\\r\\n        return a % b;\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Returns the subtraction of two unsigned integers, reverting with custom message on\\r\\n     * overflow (when the result is negative).\\r\\n     *\\r\\n     * CAUTION: This function is deprecated because it requires allocating memory for the error\\r\\n     * message unnecessarily. For custom revert reasons use {trySub}.\\r\\n     *\\r\\n     * Counterpart to Solidity\\u0027s `-` operator.\\r\\n     *\\r\\n     * Requirements:\\r\\n     *\\r\\n     * - Subtraction cannot overflow.\\r\\n     */\\r\\n    function sub(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\\r\\n        require(b \\u003c= a, errorMessage);\\r\\n        return a - b;\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Returns the integer division of two unsigned integers, reverting with custom message on\\r\\n     * division by zero. The result is rounded towards zero.\\r\\n     *\\r\\n     * CAUTION: This function is deprecated because it requires allocating memory for the error\\r\\n     * message unnecessarily. For custom revert reasons use {tryDiv}.\\r\\n     *\\r\\n     * Counterpart to Solidity\\u0027s `/` operator. Note: this function uses a\\r\\n     * `revert` opcode (which leaves remaining gas untouched) while Solidity\\r\\n     * uses an invalid opcode to revert (consuming all remaining gas).\\r\\n     *\\r\\n     * Requirements:\\r\\n     *\\r\\n     * - The divisor cannot be zero.\\r\\n     */\\r\\n    function div(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\\r\\n        require(b \\u003e 0, errorMessage);\\r\\n        return a / b;\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\\r\\n     * reverting with custom message when dividing by zero.\\r\\n     *\\r\\n     * CAUTION: This function is deprecated because it requires allocating memory for the error\\r\\n     * message unnecessarily. For custom revert reasons use {tryMod}.\\r\\n     *\\r\\n     * Counterpart to Solidity\\u0027s `%` operator. This function uses a `revert`\\r\\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\\r\\n     * invalid opcode to revert (consuming all remaining gas).\\r\\n     *\\r\\n     * Requirements:\\r\\n     *\\r\\n     * - The divisor cannot be zero.\\r\\n     */\\r\\n    function mod(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\\r\\n        require(b \\u003e 0, errorMessage);\\r\\n        return a % b;\\r\\n    }\\r\\n}\\r\\n\"}}","ABI":"[{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"id\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"string\",\"name\":\"name\",\"type\":\"string\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"baseCost\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"priceRise\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"hatchTokens\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"tradingFeeRate\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"platformFeeRate\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"bool\",\"name\":\"allInterestToPlatform\",\"type\":\"bool\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"nameVerifier\",\"type\":\"address\"}],\"name\":\"NewMarket\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"marketID\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"nameVerifier\",\"type\":\"address\"}],\"name\":\"NewNameVerifier\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"marketID\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"platformFeeRate\",\"type\":\"uint256\"}],\"name\":\"NewPlatformFee\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"id\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"marketID\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"string\",\"name\":\"name\",\"type\":\"string\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"addr\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"lister\",\"type\":\"address\"}],\"name\":\"NewToken\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"marketID\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"tradingFeeRate\",\"type\":\"uint256\"}],\"name\":\"NewTradingFee\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"oldOwner\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipChanged\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"string\",\"name\":\"marketName\",\"type\":\"string\"},{\"internalType\":\"address\",\"name\":\"nameVerifier\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"baseCost\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"priceRise\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"hatchTokens\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"tradingFeeRate\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"platformFeeRate\",\"type\":\"uint256\"},{\"internalType\":\"bool\",\"name\":\"allInterestToPlatform\",\"type\":\"bool\"}],\"name\":\"addMarket\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"string\",\"name\":\"tokenName\",\"type\":\"string\"},{\"internalType\":\"uint256\",\"name\":\"marketID\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"lister\",\"type\":\"address\"}],\"name\":\"addToken\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"marketID\",\"type\":\"uint256\"}],\"name\":\"getMarketDetailsByID\",\"outputs\":[{\"components\":[{\"internalType\":\"bool\",\"name\":\"exists\",\"type\":\"bool\"},{\"internalType\":\"uint256\",\"name\":\"id\",\"type\":\"uint256\"},{\"internalType\":\"string\",\"name\":\"name\",\"type\":\"string\"},{\"internalType\":\"contract IIdeaTokenNameVerifier\",\"name\":\"nameVerifier\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"numTokens\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"baseCost\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"priceRise\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"hatchTokens\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"tradingFeeRate\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"platformFeeRate\",\"type\":\"uint256\"},{\"internalType\":\"bool\",\"name\":\"allInterestToPlatform\",\"type\":\"bool\"}],\"internalType\":\"struct MarketDetails\",\"name\":\"\",\"type\":\"tuple\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"string\",\"name\":\"marketName\",\"type\":\"string\"}],\"name\":\"getMarketDetailsByName\",\"outputs\":[{\"components\":[{\"internalType\":\"bool\",\"name\":\"exists\",\"type\":\"bool\"},{\"internalType\":\"uint256\",\"name\":\"id\",\"type\":\"uint256\"},{\"internalType\":\"string\",\"name\":\"name\",\"type\":\"string\"},{\"internalType\":\"contract IIdeaTokenNameVerifier\",\"name\":\"nameVerifier\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"numTokens\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"baseCost\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"priceRise\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"hatchTokens\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"tradingFeeRate\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"platformFeeRate\",\"type\":\"uint256\"},{\"internalType\":\"bool\",\"name\":\"allInterestToPlatform\",\"type\":\"bool\"}],\"internalType\":\"struct MarketDetails\",\"name\":\"\",\"type\":\"tuple\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"ideaToken\",\"type\":\"address\"}],\"name\":\"getMarketDetailsByTokenAddress\",\"outputs\":[{\"components\":[{\"internalType\":\"bool\",\"name\":\"exists\",\"type\":\"bool\"},{\"internalType\":\"uint256\",\"name\":\"id\",\"type\":\"uint256\"},{\"internalType\":\"string\",\"name\":\"name\",\"type\":\"string\"},{\"internalType\":\"contract IIdeaTokenNameVerifier\",\"name\":\"nameVerifier\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"numTokens\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"baseCost\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"priceRise\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"hatchTokens\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"tradingFeeRate\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"platformFeeRate\",\"type\":\"uint256\"},{\"internalType\":\"bool\",\"name\":\"allInterestToPlatform\",\"type\":\"bool\"}],\"internalType\":\"struct MarketDetails\",\"name\":\"\",\"type\":\"tuple\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"string\",\"name\":\"marketName\",\"type\":\"string\"}],\"name\":\"getMarketIDByName\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getNumMarkets\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getOwner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"string\",\"name\":\"tokenName\",\"type\":\"string\"},{\"internalType\":\"uint256\",\"name\":\"marketID\",\"type\":\"uint256\"}],\"name\":\"getTokenIDByName\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"token\",\"type\":\"address\"}],\"name\":\"getTokenIDPair\",\"outputs\":[{\"components\":[{\"internalType\":\"bool\",\"name\":\"exists\",\"type\":\"bool\"},{\"internalType\":\"uint256\",\"name\":\"marketID\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"tokenID\",\"type\":\"uint256\"}],\"internalType\":\"struct IDPair\",\"name\":\"\",\"type\":\"tuple\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"marketID\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"tokenID\",\"type\":\"uint256\"}],\"name\":\"getTokenInfo\",\"outputs\":[{\"components\":[{\"internalType\":\"bool\",\"name\":\"exists\",\"type\":\"bool\"},{\"internalType\":\"uint256\",\"name\":\"id\",\"type\":\"uint256\"},{\"internalType\":\"string\",\"name\":\"name\",\"type\":\"string\"},{\"internalType\":\"contract IIdeaToken\",\"name\":\"ideaToken\",\"type\":\"address\"}],\"internalType\":\"struct TokenInfo\",\"name\":\"\",\"type\":\"tuple\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"ideaTokenExchange\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"ideaTokenLogic\",\"type\":\"address\"}],\"name\":\"initialize\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"string\",\"name\":\"tokenName\",\"type\":\"string\"},{\"internalType\":\"uint256\",\"name\":\"marketID\",\"type\":\"uint256\"}],\"name\":\"isValidTokenName\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"marketID\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"nameVerifier\",\"type\":\"address\"}],\"name\":\"setNameVerifier\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"setOwner\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"marketID\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"platformFeeRate\",\"type\":\"uint256\"}],\"name\":\"setPlatformFee\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"marketID\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"tradingFeeRate\",\"type\":\"uint256\"}],\"name\":\"setTradingFee\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}]","ContractName":"IdeaTokenFactoryStateTransfer","CompilerVersion":"v0.6.9+commit.3e3065ac","OptimizationUsed":"0","Runs":"200","ConstructorArguments":"","EVMVersion":"Default","Library":"","LicenseType":"MIT","Proxy":"0","Implementation":"","SwarmSource":"ipfs://c2398afb2c14f34ec2e928b39dc19b9df510c091cd6ea542f3a66f10467d5940"}]}