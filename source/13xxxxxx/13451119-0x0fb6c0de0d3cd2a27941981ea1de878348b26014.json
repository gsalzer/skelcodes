{"status":"1","message":"OK","result":[{"SourceCode":"// SPDX-License-Identifier: UNLICENSED\r\n\r\npragma solidity ^0.8.4;\r\n\r\n/*______/\\\\\\\\\\\\\\\\\\__/\\\\\\_______/\\\\\\__/\\\\\\\\\\\\\\\\\\\\\\__/\\\\\\\\\\\\\\\\\\\\\\\\\\___        \r\n _____/\\\\\\////////__\\///\\\\\\___/\\\\\\/__\\/////\\\\\\///__\\/\\\\\\/////////\\\\\\_       \r\n  ___/\\\\\\/_____________\\///\\\\\\\\\\\\/________\\/\\\\\\_____\\/\\\\\\_______\\/\\\\\\_      \r\n   __/\\\\\\_________________\\//\\\\\\\\__________\\/\\\\\\_____\\/\\\\\\\\\\\\\\\\\\\\\\\\\\/__     \r\n    _\\/\\\\\\__________________\\/\\\\\\\\__________\\/\\\\\\_____\\/\\\\\\/////////____    \r\n     _\\//\\\\\\_________________/\\\\\\\\\\\\_________\\/\\\\\\_____\\/\\\\\\_____________   \r\n      __\\///\\\\\\_____________/\\\\\\////\\\\\\_______\\/\\\\\\_____\\/\\\\\\_____________  \r\n       ____\\////\\\\\\\\\\\\\\\\\\__/\\\\\\/___\\///\\\\\\__/\\\\\\\\\\\\\\\\\\\\\\_\\/\\\\\\_____________ \r\n        _______\\/////////__\\///_______\\///__\\///////////__\\///____________*/\r\n\r\ncontract CxipERC721 {\r\n\r\n\tusing Strings for string;\r\n\tusing Address for address;\r\n\r\n\tfunction getRegistry () internal pure returns (ICxipRegistry) {\r\n\t\treturn ICxipRegistry (0xC267d41f81308D7773ecB3BDd863a902ACC01Ade);\r\n\t}\r\n\r\n\tevent Transfer (address indexed from, address indexed to, uint256 indexed tokenId);\r\n\tevent Approval (address indexed owner, address indexed approved, uint256 indexed tokenId);\r\n\tevent ApprovalForAll (address indexed owner, address indexed operator, bool approved);\r\n\tevent Withdraw (address indexed to, uint256 amount);\r\n\tevent PermanentURI (string uri, uint256 indexed id);\r\n\r\n\tCollectionData private _collectionData;\r\n\r\n\tuint256 private _currentTokenId;\r\n\tuint256 [] private _allTokens;\r\n\tmapping (uint256 => uint256) private _ownedTokensIndex;\r\n\tmapping (uint256 => address) private _tokenOwner;\r\n\tmapping (uint256 => address) private _tokenApprovals;\r\n\tmapping (address => uint256) private _ownedTokensCount;\r\n\tmapping (address => uint256 []) private _ownedTokens;\r\n\tmapping (address => mapping (address => bool)) private _operatorApprovals;\r\n\tmapping (uint256 => TokenData) private _tokenData;\r\n\r\n\taddress private _admin;\r\n\taddress private _owner;\r\n\r\n\tuint256 private _totalTokens;\r\n\r\n\tconstructor () {}\r\n\r\n\tfunction init (address newOwner, CollectionData calldata collectionData) public {\r\n\t\trequire (_admin.isZero (), 'CXIP: already initialized');\r\n\t\t_admin = msg.sender;\r\n\t\t_owner = address (this);\r\n\t\t_collectionData = collectionData;\r\n\t\t(bool royaltiesSuccess, /*bytes memory royaltiesResponse*/) = getRegistry ().getPA1D ().delegatecall (\r\n\t\t\tabi.encodeWithSelector (\r\n\t\t\t\tbytes4 (0xea2299f8),\r\n\t\t\t\tuint256 (0),\r\n\t\t\t\tpayable (collectionData.royalties),\r\n\t\t\t\tuint256 (collectionData.bps)\r\n\t\t\t)\r\n\t\t);\r\n\t\trequire (royaltiesSuccess, 'CXIP: failed setting royalties');\r\n\t\t_owner = newOwner;\r\n\t}\r\n\r\n\tfunction getIdentity () public view returns (address) {\r\n\t\treturn ICxipProvenance (getRegistry ().getProvenance ()).getWalletIdentity (_owner);\r\n\t}\r\n\r\n\tfunction isIdentityWallet (address sender) internal view returns (bool) {\r\n\t\taddress identity = getIdentity ();\r\n\t\tif (identity.isZero ()) {\r\n\t\t\treturn false;\r\n\t\t}\r\n\t\treturn ICxipIdentity (identity).isWalletRegistered (sender);\r\n\t}\r\n\r\n\tfunction owner () public view returns (address) {\r\n\t\treturn _owner;\r\n\t}\r\n\r\n\tfunction isOwner () public view returns (bool) {\r\n\t\treturn (msg.sender == _owner || msg.sender == _admin || isIdentityWallet (msg.sender));\r\n\t}\r\n\t\r\n\tmodifier onlyOwner () {\r\n\t\trequire (isOwner (), 'CXIP: caller not an owner');\r\n\t\t_;\r\n\t}\r\n\r\n\tfunction setName (bytes32 newName, bytes32 newName2) public onlyOwner {\r\n\t\t_collectionData.name = newName;\r\n\t\t_collectionData.name2 = newName2;\r\n\t}\r\n\r\n\tfunction setSymbol (bytes32 newSymbol) public onlyOwner {\r\n\t\t_collectionData.symbol = newSymbol;\r\n\t}\r\n\r\n\tfunction transferOwnership (address newOwner) public onlyOwner {\r\n\t\tif (!newOwner.isZero ()) {\r\n\t\t\t_owner = newOwner;\r\n\t\t}\r\n\t}\r\n\r\n\tfunction supportsInterface (bytes4 interfaceId) external view returns (bool) {\r\n\t\tif (\r\n\t\t\tinterfaceId == 0x01ffc9a7\r\n\t\t\t|| interfaceId == 0x80ac58cd\r\n\t\t\t|| interfaceId == 0x5b5e139f\r\n\t\t\t|| interfaceId == 0x150b7a02\r\n\t\t\t|| interfaceId == 0xe8a3d485\r\n\t\t\t|| IPA1D (getRegistry ().getPA1D ()).supportsInterface (interfaceId)\r\n\t\t) {\r\n\t\t\treturn true;\r\n\t\t} else {\r\n\t\t\treturn false;\r\n\t\t}\r\n\t}\r\n\r\n\tfunction ownerOf (uint256 tokenId) public view returns (address) {\r\n\t\taddress tokenOwner = _tokenOwner [tokenId];\r\n\t\trequire (!tokenOwner.isZero (), 'ERC721: token does not exist');\r\n\t\treturn tokenOwner;\r\n\t}\r\n\r\n\tfunction approve (address to, uint256 tokenId) public {\r\n\t\taddress tokenOwner = _tokenOwner [tokenId];\r\n\t\tif (to != tokenOwner && _isApproved (msg.sender, tokenId)) {\r\n\t\t\t_tokenApprovals [tokenId] = to;\r\n\t\t\temit Approval (tokenOwner, to, tokenId);\r\n\t\t}\r\n\t}\r\n\r\n\tfunction getApproved (uint256 tokenId) public view returns (address) {\r\n\t\treturn _tokenApprovals [tokenId];\r\n\t}\r\n\r\n\tfunction setApprovalForAll (address to, bool approved) public {\r\n\t\tif (to != msg.sender) {\r\n\t\t\t_operatorApprovals [msg.sender] [to] = approved;\r\n\t\t\temit ApprovalForAll (msg.sender, to, approved);\r\n\t\t} else {\r\n\t\t\tassert (false);\r\n\t\t}\r\n\t}\r\n\r\n\tfunction setApprovalForAll (address from, address to, bool approved) public onlyOwner {\r\n\t\tif (to != from) {\r\n\t\t\t_operatorApprovals [from] [to] = approved;\r\n\t\t\temit ApprovalForAll (from, to, approved);\r\n\t\t}\r\n\t}\r\n\r\n\tfunction isApprovedForAll (address wallet, address operator) public view returns (bool) {\r\n\t\treturn\r\n\t\t\t_operatorApprovals [wallet] [operator]\r\n\t\t\t|| 0x4feE7B061C97C9c496b01DbcE9CDb10c02f0a0Be == operator // Rarible Transfer Proxy\r\n\t\t\t|| address (OpenSeaProxyRegistry (0xa5409ec958C83C3f309868babACA7c86DCB077c1).proxies (wallet)) == operator // OpenSea Transfer Proxy\r\n\t\t;\r\n\t}\r\n\r\n\tfunction transferFrom (address from, address to, uint256 tokenId) public {\r\n\t\ttransferFrom (from, to, tokenId, '');\r\n\t}\r\n\r\n\tfunction transferFrom (address from, address to, uint256 tokenId, bytes memory /*_data*/) public {\r\n\t\tif (_isApproved (msg.sender, tokenId)) {\r\n\t\t\t_transferFrom (from, to, tokenId);\r\n\t\t}\r\n\t}\r\n\r\n\tfunction safeTransferFrom (address from, address to, uint256 tokenId) public {\r\n\t\tsafeTransferFrom (from, to, tokenId, '');\r\n\t}\r\n\r\n\tfunction safeTransferFrom (address from, address to, uint256 tokenId, bytes memory /*_data*/) public {\r\n\t\tif (_isApproved (msg.sender, tokenId)) {\r\n\t\t\t_transferFrom (from, to, tokenId);\r\n\t\t}\r\n\t}\r\n\r\n\tfunction _exists (uint256 tokenId) private view returns (bool) {\r\n\t\taddress tokenOwner = _tokenOwner [tokenId];\r\n\t\treturn !tokenOwner.isZero ();\r\n\t}\r\n\t\r\n\tfunction _isApproved (address spender, uint256 tokenId) private view returns (bool) {\r\n\t\trequire (_exists (tokenId));\r\n\t\taddress tokenOwner = _tokenOwner [tokenId];\r\n\t\treturn (\r\n\t\t\tspender == tokenOwner\r\n\t\t\t|| getApproved (tokenId) == spender\r\n\t\t\t|| isApprovedForAll (tokenOwner, spender)\r\n\t\t\t|| ICxipIdentity (getIdentity ()).isWalletRegistered (spender)\r\n\t\t);\r\n\t}\r\n\r\n\tfunction _clearApproval (uint256 tokenId) private {\r\n\t\tdelete _tokenApprovals [tokenId];\r\n\t}\r\n\r\n\tfunction totalSupply () public view returns (uint256) {\r\n\t\treturn _totalTokens;\r\n\t}\r\n\r\n\tfunction _transferFrom (address from, address to, uint256 tokenId) private {\r\n\t\tif (_tokenOwner [tokenId] == from && !to.isZero ()) {\r\n\t\t\t_clearApproval (tokenId);\r\n\t\t\t_tokenOwner [tokenId] = to;\r\n\t\t\temit Transfer (from, to, tokenId);\r\n\t\t} else {\r\n\t\t\tassert (false);\r\n\t\t}\r\n\t}\r\n\r\n\tfunction _mint (address to, uint256 tokenId) private {\r\n\t\tif (to.isZero () || _exists (tokenId)) {\r\n\t\t\tassert (false);\r\n\t\t}\r\n\t\t_tokenOwner [tokenId] = to;\r\n\t\temit Transfer (address (0), to, tokenId);\r\n\t\t_totalTokens += 1;\r\n\t}\r\n\r\n\tfunction burn (uint256 tokenId) public {\r\n\t\tif (_isApproved (msg.sender, tokenId)) {\r\n\t\t\taddress wallet = _tokenOwner [tokenId];\r\n\t\t\trequire (!wallet.isZero ());\r\n\t\t\t_clearApproval (tokenId);\r\n\t\t\t_tokenOwner [tokenId] = address (0);\r\n\t\t\temit Transfer (wallet, address (0), tokenId);\r\n\t\t\t_totalTokens -= 1;\r\n\t\t\tdelete _tokenData [tokenId];\r\n\t\t}\r\n\t}\r\n\r\n\tfunction cxipMint (uint256 id, TokenData calldata tokenData) public onlyOwner returns (uint256) {\r\n\t\tif (id == 0) {\r\n\t\t\t_currentTokenId += 1;\r\n\t\t\tid = _currentTokenId;\r\n\t\t}\r\n\t\t_mint (tokenData.creator, id);\r\n\t\t_tokenData [id] = tokenData;\r\n\t\temit PermanentURI (string (abi.encodePacked ('https://arweave.net/', tokenData.arweave)), id);\r\n\t\treturn id;\r\n\t}\r\n\r\n\tfunction tokenURI (uint256 tokenId) external view returns (string memory) {\r\n\t\treturn string (abi.encodePacked ('https://arweave.net/', _tokenData [tokenId].arweave,  _tokenData [tokenId].arweave2));\r\n\t}\r\n\r\n\tfunction name () external view returns (string memory) {\r\n\t\treturn string (abi.encodePacked (Bytes.trim (_collectionData.name), Bytes.trim (_collectionData.name2)));\r\n\t}\r\n\r\n\tfunction symbol () external view returns (string memory) {\r\n\t\treturn string (Bytes.trim (_collectionData.symbol));\r\n\t}\r\n\r\n\tfunction baseURI () public view returns (string memory) {\r\n\t\treturn string (abi.encodePacked ('https://cxip.io/nft/', Strings.toHexString (address (this))));\r\n\t}\r\n\t\r\n\tfunction contractURI () external view returns (string memory) {\r\n\t\treturn string (abi.encodePacked ('https://nft.cxip.io/', Strings.toHexString (address (this)), '/'));\r\n\t}\r\n\r\n\tfunction creator (uint256 tokenId) external view returns (address) {\r\n\t\treturn _tokenData [tokenId].creator;\r\n\t}\r\n\r\n\tfunction payloadHash (uint256 tokenId) external view returns (bytes32) {\r\n\t\treturn _tokenData [tokenId].payloadHash;\r\n\t}\r\n\r\n\tfunction payloadSignature (uint256 tokenId) external view returns (Verification memory) {\r\n\t\treturn _tokenData [tokenId].payloadSignature;\r\n\t}\r\n\r\n\tfunction payloadSigner (uint256 tokenId) external view returns (address) {\r\n\t\treturn _tokenData [tokenId].creator;\r\n\t}\r\n\r\n\tfunction arweaveURI (uint256 tokenId) external view returns (string memory) {\r\n\t\treturn string (abi.encodePacked ('https://arweave.net/', _tokenData [tokenId].arweave,  _tokenData [tokenId].arweave2));\r\n\t}\r\n\r\n\tfunction httpURI (uint256 tokenId) external view returns (string memory) {\r\n\t\treturn string (abi.encodePacked (baseURI (), '/', Strings.toHexString (tokenId)));\r\n\t}\r\n\r\n\tfunction ipfsURI (uint256 tokenId) external view returns (string memory) {\r\n\t\treturn string (abi.encodePacked ('https://ipfs.io/ipfs/', _tokenData [tokenId].ipfs, _tokenData [tokenId].ipfs2));\r\n\t}\r\n\r\n\tfunction verifySHA256 (bytes32 hash, bytes calldata payload) external pure returns (bool) {\r\n\t\tbytes32 thePayloadHash = sha256 (payload);\r\n\t\treturn hash == thePayloadHash;\r\n\t}\r\n\r\n\tfunction onERC721Received (address /*_operator*/, address /*_from*/, uint256 /*_tokenId*/, bytes calldata /*_data*/) public pure returns (bytes4) {\r\n\t\treturn 0x150b7a02;\r\n\t}\r\n\r\n\tfunction _royaltiesFallback () internal {\r\n\t\taddress _target = getRegistry ().getPA1D ();\r\n\t\tassembly {\r\n\t\t\tcalldatacopy (0, 0, calldatasize ())\r\n\t\t\tlet result := delegatecall (gas (), _target, 0, calldatasize (), 0, 0)\r\n\t\t\treturndatacopy (0, 0, returndatasize ())\r\n\t\t\tswitch result\r\n\t\t\t\tcase 0 {\r\n\t\t\t\t\trevert (0, returndatasize ())\r\n\t\t\t\t}\r\n\t\t\t\tdefault {\r\n\t\t\t\t\treturn (0, returndatasize ())\r\n\t\t\t\t}\r\n\t\t}\r\n\t}\r\n\r\n\tfallback () external {\r\n\t\t_royaltiesFallback ();\r\n\t}\r\n\r\n\treceive () external payable {\r\n\t\t_royaltiesFallback ();\r\n\t}\r\n\r\n}\r\n\r\nlibrary Address {\r\n\r\n\tfunction isZero (address account) internal pure returns (bool) {\r\n\t\treturn (account == address (0));\r\n\t}\r\n\r\n\tfunction isContract (address account) internal view returns (bool) {\r\n\t\tbytes32 codehash;\r\n\t\tassembly {\r\n\t\t\tcodehash := extcodehash (account)\r\n\t\t}\r\n\t\treturn (codehash != 0x0 && codehash != 0xc5d2460186f7233c927e7db2dcc703c0e500b653ca82273b7bfad8045d85a470);\r\n\t}\r\n\r\n}\r\n\r\nlibrary Strings {\r\n\r\n\tfunction toHexString (address account) internal pure returns (string memory) {\r\n\t\treturn toHexString (uint256 (uint160 (account)));\r\n\t}\r\n\r\n\tfunction toHexString (uint256 value) internal pure returns (string memory) {\r\n\t\tif (value == 0) {\r\n\t\t\treturn '0x00';\r\n\t\t}\r\n\t\tuint256 temp = value;\r\n\t\tuint256 length = 0;\r\n\t\twhile (temp != 0) {\r\n\t\t\tlength++;\r\n\t\t\ttemp >>= 8;\r\n\t\t}\r\n\t\treturn toHexString (value, length);\r\n\t}\r\n\r\n\tfunction toHexString (uint256 value, uint256 length) internal pure returns (string memory) {\r\n\t\tbytes memory buffer = new bytes (2 * length + 2);\r\n\t\tbuffer [0] = '0';\r\n\t\tbuffer [1] = 'x';\r\n\t\tfor (uint256 i = 2 * length + 1; i > 1; --i) {\r\n\t\t\tbuffer [i] = bytes16 ('0123456789abcdef') [value & 0xf];\r\n\t\t\tvalue >>= 4;\r\n\t\t}\r\n\t\trequire (value == 0, 'Strings: hex length insufficient');\r\n\t\treturn string (buffer);\r\n\t}\r\n\r\n}\r\n\r\nlibrary Bytes {\r\n\r\n\tfunction trim (bytes32 source) internal pure returns (bytes memory) {\r\n\t\tuint256 temp = uint256 (source);\r\n\t\tuint256 length = 0;\r\n\t\twhile (temp != 0) {\r\n\t\t\tlength++;\r\n\t\t\ttemp >>= 8;\r\n\t\t}\r\n\t\treturn slice (abi.encodePacked (source), 32 - length, length);\r\n\t}\r\n\r\n\tfunction slice (bytes memory _bytes, uint256 _start, uint256 _length) internal pure returns (bytes memory) {\r\n\t\trequire (_length + 31 >= _length, 'slice_overflow');\r\n\t\trequire (_bytes.length >= _start + _length, 'slice_outOfBounds');\r\n\t\tbytes memory tempBytes;\r\n\t\tassembly {\r\n\t\t\tswitch iszero (_length)\r\n\t\t\t\tcase 0 {\r\n\t\t\t\t\ttempBytes := mload (0x40)\r\n\t\t\t\t\tlet lengthmod := and (_length, 31)\r\n\t\t\t\t\tlet mc := add (add (tempBytes, lengthmod), mul (0x20, iszero (lengthmod)))\r\n\t\t\t\t\tlet end := add (mc, _length)\r\n\t\t\t\t\tfor {\r\n\t\t\t\t\t\tlet cc := add (add (add (_bytes, lengthmod), mul (0x20, iszero (lengthmod))), _start)\r\n\t\t\t\t\t} lt (mc, end) {\r\n\t\t\t\t\t\tmc := add (mc, 0x20)\r\n\t\t\t\t\t\tcc := add (cc, 0x20)\r\n\t\t\t\t\t} {\r\n\t\t\t\t\t\tmstore (mc, mload (cc))\r\n\t\t\t\t\t}\r\n\t\t\t\t\tmstore (tempBytes, _length)\r\n\t\t\t\t\tmstore (0x40, and (add (mc, 31), not (31)))\r\n\t\t\t\t}\r\n\t\t\t\tdefault {\r\n\t\t\t\t\ttempBytes := mload (0x40)\r\n\t\t\t\t\tmstore (tempBytes, 0)\r\n\t\t\t\t\tmstore(0x40, add (tempBytes, 0x20))\r\n\t\t\t\t}\r\n\t\t}\r\n\t\treturn tempBytes;\r\n\t}\r\n\r\n}\r\n\r\nstruct Verification {\r\n\r\n\tbytes32 r;\r\n\tbytes32 s;\r\n\tuint8 v;\r\n\r\n}\r\n\r\nstruct CollectionData {\r\n\r\n\tbytes32 name;\r\n\tbytes32 name2;\r\n\tbytes32 symbol;\r\n\taddress royalties;\r\n\tuint96 bps;\r\n\r\n}\r\n\r\nstruct TokenData {\r\n\r\n\tbytes32 payloadHash;\r\n\tVerification payloadSignature;\r\n\taddress creator;\r\n\tbytes32 arweave;\r\n\tbytes11 arweave2;\r\n\tbytes32 ipfs;\r\n\tbytes14 ipfs2;\r\n\r\n}\r\n\r\ninterface IPA1D {\r\n\r\n\tfunction supportsInterface (bytes4 interfaceId) external pure returns (bool);\r\n\r\n}\r\n\r\ninterface ICxipProvenance {\r\n\r\n\tfunction getIdentity () external view returns (address);\r\n\r\n\tfunction getWalletIdentity (address wallet) external view returns (address);\r\n\r\n\tfunction isIdentityValid (address identity) external view returns (bool);\r\n\r\n}\r\n\r\ninterface ICxipIdentity {\r\n\r\n\tfunction isWalletRegistered (address wallet) external view returns (bool);\r\n\r\n\tfunction isOwner () external view returns (bool);\r\n\r\n\tfunction isCollectionCertified (address collection) external view returns (bool);\r\n\r\n\tfunction isCollectionRegistered (address collection) external view returns (bool);\r\n\r\n}\r\n\r\ninterface ICxipRegistry {\r\n\r\n\tfunction getPA1D () external view returns (address);\r\n\r\n\tfunction setPA1D (address proxy) external;\r\n\r\n\tfunction getPA1DSource () external view returns (address);\r\n\r\n\tfunction setPA1DSource (address source) external;\r\n\r\n\tfunction getAsset () external view returns (address);\r\n\r\n\tfunction setAsset (address proxy) external;\r\n\r\n\tfunction getAssetSource () external view returns (address);\r\n\r\n\tfunction setAssetSource (address source) external;\r\n\r\n\tfunction getCopyright () external view returns (address);\r\n\r\n\tfunction setCopyright (address proxy) external;\r\n\r\n\tfunction getCopyrightSource () external view returns (address);\r\n\r\n\tfunction setCopyrightSource (address source) external;\r\n\r\n\tfunction getProvenance () external view returns (address);\r\n\r\n\tfunction setProvenance (address proxy) external;\r\n\r\n\tfunction getProvenanceSource () external view returns (address);\r\n\r\n\tfunction setProvenanceSource (address source) external;\r\n\r\n\tfunction getIdentitySource () external view returns (address);\r\n\r\n\tfunction setIdentitySource (address source) external;\r\n\r\n\tfunction getERC721CollectionSource () external view returns (address);\r\n\r\n\tfunction setERC721CollectionSource (address source) external;\r\n\r\n\tfunction getERC1155CollectionSource () external view returns (address);\r\n\r\n\tfunction setERC1155CollectionSource (address source) external;\r\n\r\n\tfunction getAssetSigner () external view returns (address);\r\n\r\n\tfunction setAssetSigner (address source) external;\r\n\r\n\tfunction getCustomSource (bytes32 name) external view returns (address);\r\n\r\n\tfunction getCustomSourceFromString (string memory name) external view returns (address);\r\n\r\n\tfunction setCustomSource (string memory name, address source) external;\r\n\r\n\tfunction owner () external view returns (address);\r\n\r\n}\r\n\r\ncontract OpenSeaOwnableDelegateProxy  {\r\n\r\n}\r\n\r\ncontract OpenSeaProxyRegistry {\r\n\r\n\tmapping (address => OpenSeaOwnableDelegateProxy) public proxies;\r\n\r\n}","ABI":"[{\"inputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"approved\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"Approval\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"operator\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"bool\",\"name\":\"approved\",\"type\":\"bool\"}],\"name\":\"ApprovalForAll\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"string\",\"name\":\"uri\",\"type\":\"string\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"id\",\"type\":\"uint256\"}],\"name\":\"PermanentURI\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"Transfer\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"Withdraw\",\"type\":\"event\"},{\"stateMutability\":\"nonpayable\",\"type\":\"fallback\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"approve\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"arweaveURI\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"baseURI\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"burn\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"contractURI\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"creator\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"id\",\"type\":\"uint256\"},{\"components\":[{\"internalType\":\"bytes32\",\"name\":\"payloadHash\",\"type\":\"bytes32\"},{\"components\":[{\"internalType\":\"bytes32\",\"name\":\"r\",\"type\":\"bytes32\"},{\"internalType\":\"bytes32\",\"name\":\"s\",\"type\":\"bytes32\"},{\"internalType\":\"uint8\",\"name\":\"v\",\"type\":\"uint8\"}],\"internalType\":\"struct Verification\",\"name\":\"payloadSignature\",\"type\":\"tuple\"},{\"internalType\":\"address\",\"name\":\"creator\",\"type\":\"address\"},{\"internalType\":\"bytes32\",\"name\":\"arweave\",\"type\":\"bytes32\"},{\"internalType\":\"bytes11\",\"name\":\"arweave2\",\"type\":\"bytes11\"},{\"internalType\":\"bytes32\",\"name\":\"ipfs\",\"type\":\"bytes32\"},{\"internalType\":\"bytes14\",\"name\":\"ipfs2\",\"type\":\"bytes14\"}],\"internalType\":\"struct TokenData\",\"name\":\"tokenData\",\"type\":\"tuple\"}],\"name\":\"cxipMint\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"getApproved\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getIdentity\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"httpURI\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"},{\"components\":[{\"internalType\":\"bytes32\",\"name\":\"name\",\"type\":\"bytes32\"},{\"internalType\":\"bytes32\",\"name\":\"name2\",\"type\":\"bytes32\"},{\"internalType\":\"bytes32\",\"name\":\"symbol\",\"type\":\"bytes32\"},{\"internalType\":\"address\",\"name\":\"royalties\",\"type\":\"address\"},{\"internalType\":\"uint96\",\"name\":\"bps\",\"type\":\"uint96\"}],\"internalType\":\"struct CollectionData\",\"name\":\"collectionData\",\"type\":\"tuple\"}],\"name\":\"init\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"ipfsURI\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"wallet\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"operator\",\"type\":\"address\"}],\"name\":\"isApprovedForAll\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"isOwner\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"name\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"},{\"internalType\":\"bytes\",\"name\":\"\",\"type\":\"bytes\"}],\"name\":\"onERC721Received\",\"outputs\":[{\"internalType\":\"bytes4\",\"name\":\"\",\"type\":\"bytes4\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"ownerOf\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"payloadHash\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"payloadSignature\",\"outputs\":[{\"components\":[{\"internalType\":\"bytes32\",\"name\":\"r\",\"type\":\"bytes32\"},{\"internalType\":\"bytes32\",\"name\":\"s\",\"type\":\"bytes32\"},{\"internalType\":\"uint8\",\"name\":\"v\",\"type\":\"uint8\"}],\"internalType\":\"struct Verification\",\"name\":\"\",\"type\":\"tuple\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"payloadSigner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"safeTransferFrom\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"},{\"internalType\":\"bytes\",\"name\":\"\",\"type\":\"bytes\"}],\"name\":\"safeTransferFrom\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"bool\",\"name\":\"approved\",\"type\":\"bool\"}],\"name\":\"setApprovalForAll\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"bool\",\"name\":\"approved\",\"type\":\"bool\"}],\"name\":\"setApprovalForAll\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"newName\",\"type\":\"bytes32\"},{\"internalType\":\"bytes32\",\"name\":\"newName2\",\"type\":\"bytes32\"}],\"name\":\"setName\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"newSymbol\",\"type\":\"bytes32\"}],\"name\":\"setSymbol\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes4\",\"name\":\"interfaceId\",\"type\":\"bytes4\"}],\"name\":\"supportsInterface\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"symbol\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"tokenURI\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalSupply\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"transferFrom\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"},{\"internalType\":\"bytes\",\"name\":\"\",\"type\":\"bytes\"}],\"name\":\"transferFrom\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"hash\",\"type\":\"bytes32\"},{\"internalType\":\"bytes\",\"name\":\"payload\",\"type\":\"bytes\"}],\"name\":\"verifySHA256\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"stateMutability\":\"payable\",\"type\":\"receive\"}]","ContractName":"CxipERC721","CompilerVersion":"v0.8.4+commit.c7e474f2","OptimizationUsed":"1","Runs":"20000","ConstructorArguments":"","EVMVersion":"Default","Library":"","LicenseType":"None","Proxy":"0","Implementation":"","SwarmSource":"ipfs://85dcbfb8a57b6b09cdf30302035056fe7b3d96a5e3592714378d216811b478ed"}]}