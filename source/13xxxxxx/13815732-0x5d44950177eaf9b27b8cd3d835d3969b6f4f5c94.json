{"status":"1","message":"OK","result":[{"SourceCode":"{{\r\n  \"language\": \"Solidity\",\r\n  \"sources\": {\r\n    \"contracts/permittedLists/PermittedAirdrops.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity 0.8.4;\\n\\nimport \\\"../interfaces/IPermittedAirdrops.sol\\\";\\nimport \\\"../utils/Ownable.sol\\\";\\n\\n/**\\n * @title  PermittedAirdrops\\n * @author NFTfi\\n * @dev Registry for airdropa supported by NFTfi. Each Airdrop is associated with a boolean permit.\\n */\\ncontract PermittedAirdrops is Ownable, IPermittedAirdrops {\\n    /* ******* */\\n    /* STORAGE */\\n    /* ******* */\\n\\n    /**\\n     * @notice A mapping from an airdrop to whether that airdrop\\n     * is permitted to be used by NFTfi.\\n     */\\n    mapping(bytes => bool) private airdropPermits;\\n\\n    /* ****** */\\n    /* EVENTS */\\n    /* ****** */\\n\\n    /**\\n     * @notice This event is fired whenever the admin sets a ERC20 permit.\\n     *\\n     * @param airdropContract - Address of the airdrop contract.\\n     * @param selector - The selector of the permitted function in the `airdropContract`.\\n     * @param isPermitted - Signals airdrop permit.\\n     */\\n    event AirdropPermit(address indexed airdropContract, bytes4 indexed selector, bool isPermitted);\\n\\n    /* *********** */\\n    /* CONSTRUCTOR */\\n    /* *********** */\\n\\n    /**\\n     * @notice Initialize `airdropPermits` with a batch of permitted airdops\\n     *\\n     * @param _admin - Initial admin of this contract.\\n     * @param _airdopContracts - The batch of airdrop contract addresses initially permitted.\\n     * @param _selectors - The batch of selector of the permitted functions for each `_airdopContracts`.\\n     */\\n    constructor(\\n        address _admin,\\n        address[] memory _airdopContracts,\\n        bytes4[] memory _selectors\\n    ) Ownable(_admin) {\\n        require(_airdopContracts.length == _selectors.length, \\\"function information arity mismatch\\\");\\n        for (uint256 i = 0; i < _airdopContracts.length; i++) {\\n            _setAirdroptPermit(_airdopContracts[i], _selectors[i], true);\\n        }\\n    }\\n\\n    /* ********* */\\n    /* FUNCTIONS */\\n    /* ********* */\\n\\n    /**\\n     * @notice This function can be called by admins to change the permitted status of an airdrop. This includes\\n     * both adding an airdrop to the permitted list and removing it.\\n     *\\n     * @param _airdropContract - The address of airdrop contract whose permit list status changed.\\n     * @param _selector - The selector of the permitted function whose permit list status changed.\\n     * @param _permit - The new status of whether the airdrop is permitted or not.\\n     */\\n    function setAirdroptPermit(\\n        address _airdropContract,\\n        bytes4 _selector,\\n        bool _permit\\n    ) external onlyOwner {\\n        _setAirdroptPermit(_airdropContract, _selector, _permit);\\n    }\\n\\n    /**\\n     * @notice This function can be called by admins to change the permitted status of a batch of airdrops. This\\n     * includes both adding an airdop to the permitted list and removing it.\\n     *\\n     * @param _airdropContracts - The addresses of the airdrop contracts whose permit list status changed.\\n     * @param _selectors - the selector of the permitted functions for each airdop whose permit list status changed.\\n     * @param _permits - The new statuses of whether the airdrop is permitted or not.\\n     */\\n    function setAirdroptPermits(\\n        address[] memory _airdropContracts,\\n        bytes4[] memory _selectors,\\n        bool[] memory _permits\\n    ) external onlyOwner {\\n        require(\\n            _airdropContracts.length == _selectors.length,\\n            \\\"setAirdroptPermits function information arity mismatch\\\"\\n        );\\n        require(_selectors.length == _permits.length, \\\"setAirdroptPermits function information arity mismatch\\\");\\n\\n        for (uint256 i = 0; i < _airdropContracts.length; i++) {\\n            _setAirdroptPermit(_airdropContracts[i], _selectors[i], _permits[i]);\\n        }\\n    }\\n\\n    /**\\n     * @notice This function can be called by anyone to get the permit associated with the airdrop.\\n     *\\n     * @param _addressSel - The address of the airdrop contract + function selector.\\n     *\\n     * @return Returns whether the airdrop is permitted\\n     */\\n    function isValidAirdrop(bytes memory _addressSel) external view override returns (bool) {\\n        return airdropPermits[_addressSel];\\n    }\\n\\n    /**\\n     * @notice This function can be called by admins to change the permitted status of an airdrop. This includes\\n     * both adding an airdrop to the permitted list and removing it.\\n     *\\n     * @param _airdropContract - The address of airdrop contract whose permit list status changed.\\n     * @param _selector - The selector of the permitted function whose permit list status changed.\\n     * @param _permit - The new status of whether the airdrop is permitted or not.\\n     */\\n    function _setAirdroptPermit(\\n        address _airdropContract,\\n        bytes4 _selector,\\n        bool _permit\\n    ) internal {\\n        require(_airdropContract != address(0), \\\"airdropContract is zero address\\\");\\n        require(_selector != bytes4(0), \\\"selector is empty\\\");\\n\\n        airdropPermits[abi.encode(_airdropContract, _selector)] = _permit;\\n\\n        emit AirdropPermit(_airdropContract, _selector, _permit);\\n    }\\n}\\n\"\r\n    },\r\n    \"contracts/interfaces/IPermittedAirdrops.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity 0.8.4;\\n\\ninterface IPermittedAirdrops {\\n    function isValidAirdrop(bytes memory _addressSig) external view returns (bool);\\n}\\n\"\r\n    },\r\n    \"contracts/utils/Ownable.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity 0.8.4;\\n\\nimport \\\"@openzeppelin/contracts/utils/Context.sol\\\";\\n\\n/**\\n * @dev Contract module which provides a basic access control mechanism, where\\n * there is an account (an owner) that can be granted exclusive access to\\n * specific functions.\\n *\\n * By default, the owner account will be the one that deploys the contract. This\\n * can later be changed with {transferOwnership}.\\n *\\n * This module is used through inheritance. It will make available the modifier\\n * `onlyOwner`, which can be applied to your functions to restrict their use to\\n * the owner.\\n *\\n * Modified version from openzeppelin/contracts/access/Ownable.sol that allows to\\n * initialize the owner using a parameter in the constructor\\n */\\nabstract contract Ownable is Context {\\n    address private _owner;\\n\\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\\n\\n    /**\\n     * @dev Throws if called by any account other than the owner.\\n     */\\n    modifier onlyOwner() {\\n        require(owner() == _msgSender(), \\\"Ownable: caller is not the owner\\\");\\n        _;\\n    }\\n\\n    /**\\n     * @dev Initializes the contract setting the deployer as the initial owner.\\n     */\\n    constructor(address _initialOwner) {\\n        _setOwner(_initialOwner);\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Can only be called by the current owner.\\n     */\\n    function transferOwnership(address _newOwner) public virtual onlyOwner {\\n        require(_newOwner != address(0), \\\"Ownable: new owner is the zero address\\\");\\n        _setOwner(_newOwner);\\n    }\\n\\n    /**\\n     * @dev Returns the address of the current owner.\\n     */\\n    function owner() public view virtual returns (address) {\\n        return _owner;\\n    }\\n\\n    /**\\n     * @dev Sets the owner.\\n     */\\n    function _setOwner(address _newOwner) private {\\n        address oldOwner = _owner;\\n        _owner = _newOwner;\\n        emit OwnershipTransferred(oldOwner, _newOwner);\\n    }\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/utils/Context.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.0 (utils/Context.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Provides information about the current execution context, including the\\n * sender of the transaction and its data. While these are generally available\\n * via msg.sender and msg.data, they should not be accessed in such a direct\\n * manner, since when dealing with meta-transactions the account sending and\\n * paying for execution may not be the actual sender (as far as an application\\n * is concerned).\\n *\\n * This contract is only required for intermediate, library-like contracts.\\n */\\nabstract contract Context {\\n    function _msgSender() internal view virtual returns (address) {\\n        return msg.sender;\\n    }\\n\\n    function _msgData() internal view virtual returns (bytes calldata) {\\n        return msg.data;\\n    }\\n}\\n\"\r\n    }\r\n  },\r\n  \"settings\": {\r\n    \"metadata\": {\r\n      \"bytecodeHash\": \"none\",\r\n      \"useLiteralContent\": true\r\n    },\r\n    \"optimizer\": {\r\n      \"enabled\": true,\r\n      \"runs\": 100\r\n    },\r\n    \"outputSelection\": {\r\n      \"*\": {\r\n        \"*\": [\r\n          \"evm.bytecode\",\r\n          \"evm.deployedBytecode\",\r\n          \"devdoc\",\r\n          \"userdoc\",\r\n          \"metadata\",\r\n          \"abi\"\r\n        ]\r\n      }\r\n    },\r\n    \"libraries\": {}\r\n  }\r\n}}","ABI":"[{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_admin\",\"type\":\"address\"},{\"internalType\":\"address[]\",\"name\":\"_airdopContracts\",\"type\":\"address[]\"},{\"internalType\":\"bytes4[]\",\"name\":\"_selectors\",\"type\":\"bytes4[]\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"airdropContract\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"bytes4\",\"name\":\"selector\",\"type\":\"bytes4\"},{\"indexed\":false,\"internalType\":\"bool\",\"name\":\"isPermitted\",\"type\":\"bool\"}],\"name\":\"AirdropPermit\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"bytes\",\"name\":\"_addressSel\",\"type\":\"bytes\"}],\"name\":\"isValidAirdrop\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_airdropContract\",\"type\":\"address\"},{\"internalType\":\"bytes4\",\"name\":\"_selector\",\"type\":\"bytes4\"},{\"internalType\":\"bool\",\"name\":\"_permit\",\"type\":\"bool\"}],\"name\":\"setAirdroptPermit\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address[]\",\"name\":\"_airdropContracts\",\"type\":\"address[]\"},{\"internalType\":\"bytes4[]\",\"name\":\"_selectors\",\"type\":\"bytes4[]\"},{\"internalType\":\"bool[]\",\"name\":\"_permits\",\"type\":\"bool[]\"}],\"name\":\"setAirdroptPermits\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}]","ContractName":"PermittedAirdrops","CompilerVersion":"v0.8.4+commit.c7e474f2","OptimizationUsed":"1","Runs":"100","ConstructorArguments":"000000000000000000000000dca17eedc1aa3dbb14361678566b2da5a1bb4c310000000000000000000000000000000000000000000000000000000000000060000000000000000000000000000000000000000000000000000000000000008000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000","EVMVersion":"Default","Library":"","LicenseType":"","Proxy":"0","Implementation":"","SwarmSource":""}]}