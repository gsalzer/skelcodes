{"status":"1","message":"OK","result":[{"SourceCode":"// File: BindBox/MathX128.sol\r\n\r\n\r\n\r\npragma solidity ^0.8.7;\r\n\r\nlibrary MathX128 {\r\n    uint constant x128=(1<<128)-1;\r\n    \r\n    uint constant oneX128=(1<<128);\r\n    \r\n    function mulX128(uint l, uint r) internal pure returns(uint result) {\r\n        uint l_high=l>>128;\r\n        uint r_high=r>>128;\r\n        uint l_low=(l&x128);\r\n        uint r_low=(r&x128);\r\n        result=((l_high*r_high)<<128) + (l_high*r_low) + (r_high*l_low) + ((l_low*r_low)>>128);\r\n    }\r\n    \r\n    function mulUint(uint l,uint r) internal pure returns(uint result) {\r\n        result=(l*r)>>128;\r\n    }\r\n    \r\n    function toPercentage(uint numberX128,uint decimal) internal pure returns(uint result) {\r\n        numberX128*=100;\r\n        if(decimal>0){\r\n            numberX128*=10**decimal;\r\n        }\r\n        return numberX128>>128;\r\n    }\r\n    \r\n    function toX128(uint percentage,uint decimal) internal pure returns(uint result) {\r\n        uint divisor=100;\r\n        if(decimal>0)\r\n            divisor*=10**decimal;\r\n        return oneX128*percentage/divisor;\r\n    }\r\n}\r\n// File: @openzeppelin/contracts@4.3.2/token/ERC20/IERC20.sol\r\n\r\n\r\n\r\npragma solidity ^0.8.0;\r\n\r\n/**\r\n * @dev Interface of the ERC20 standard as defined in the EIP.\r\n */\r\ninterface IERC20 {\r\n    /**\r\n     * @dev Returns the amount of tokens in existence.\r\n     */\r\n    function totalSupply() external view returns (uint256);\r\n\r\n    /**\r\n     * @dev Returns the amount of tokens owned by `account`.\r\n     */\r\n    function balanceOf(address account) external view returns (uint256);\r\n\r\n    /**\r\n     * @dev Moves `amount` tokens from the caller's account to `recipient`.\r\n     *\r\n     * Returns a boolean value indicating whether the operation succeeded.\r\n     *\r\n     * Emits a {Transfer} event.\r\n     */\r\n    function transfer(address recipient, uint256 amount) external returns (bool);\r\n\r\n    /**\r\n     * @dev Returns the remaining number of tokens that `spender` will be\r\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\r\n     * zero by default.\r\n     *\r\n     * This value changes when {approve} or {transferFrom} are called.\r\n     */\r\n    function allowance(address owner, address spender) external view returns (uint256);\r\n\r\n    /**\r\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\r\n     *\r\n     * Returns a boolean value indicating whether the operation succeeded.\r\n     *\r\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\r\n     * that someone may use both the old and the new allowance by unfortunate\r\n     * transaction ordering. One possible solution to mitigate this race\r\n     * condition is to first reduce the spender's allowance to 0 and set the\r\n     * desired value afterwards:\r\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\r\n     *\r\n     * Emits an {Approval} event.\r\n     */\r\n    function approve(address spender, uint256 amount) external returns (bool);\r\n\r\n    /**\r\n     * @dev Moves `amount` tokens from `sender` to `recipient` using the\r\n     * allowance mechanism. `amount` is then deducted from the caller's\r\n     * allowance.\r\n     *\r\n     * Returns a boolean value indicating whether the operation succeeded.\r\n     *\r\n     * Emits a {Transfer} event.\r\n     */\r\n    function transferFrom(\r\n        address sender,\r\n        address recipient,\r\n        uint256 amount\r\n    ) external returns (bool);\r\n\r\n    /**\r\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\r\n     * another (`to`).\r\n     *\r\n     * Note that `value` may be zero.\r\n     */\r\n    event Transfer(address indexed from, address indexed to, uint256 value);\r\n\r\n    /**\r\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\r\n     * a call to {approve}. `value` is the new allowance.\r\n     */\r\n    event Approval(address indexed owner, address indexed spender, uint256 value);\r\n}\r\n\r\n// File: BindBox/IBindBoxParam.sol\r\n\r\n\r\n\r\npragma solidity ^0.8.9;\r\n\r\n\r\ninterface IBindBoxParam {\r\n    function reward(uint amount,uint probabilityX128,uint level) external view returns (uint);\r\n\r\n    function newUserToken() external view returns (IERC20 token,uint amount);\r\n\r\n    function newUserRewardToken(uint switchProbabilityX128,uint rewardProbabilityX128) external view returns (IERC20 token, uint amount);\r\n}\r\n// File: @openzeppelin/contracts@4.3.2/utils/Context.sol\r\n\r\n\r\n\r\npragma solidity ^0.8.0;\r\n\r\n/**\r\n * @dev Provides information about the current execution context, including the\r\n * sender of the transaction and its data. While these are generally available\r\n * via msg.sender and msg.data, they should not be accessed in such a direct\r\n * manner, since when dealing with meta-transactions the account sending and\r\n * paying for execution may not be the actual sender (as far as an application\r\n * is concerned).\r\n *\r\n * This contract is only required for intermediate, library-like contracts.\r\n */\r\nabstract contract Context {\r\n    function _msgSender() internal view virtual returns (address) {\r\n        return msg.sender;\r\n    }\r\n\r\n    function _msgData() internal view virtual returns (bytes calldata) {\r\n        return msg.data;\r\n    }\r\n}\r\n\r\n// File: @openzeppelin/contracts@4.3.2/access/Ownable.sol\r\n\r\n\r\n\r\npragma solidity ^0.8.0;\r\n\r\n\r\n/**\r\n * @dev Contract module which provides a basic access control mechanism, where\r\n * there is an account (an owner) that can be granted exclusive access to\r\n * specific functions.\r\n *\r\n * By default, the owner account will be the one that deploys the contract. This\r\n * can later be changed with {transferOwnership}.\r\n *\r\n * This module is used through inheritance. It will make available the modifier\r\n * `onlyOwner`, which can be applied to your functions to restrict their use to\r\n * the owner.\r\n */\r\nabstract contract Ownable is Context {\r\n    address private _owner;\r\n\r\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\r\n\r\n    /**\r\n     * @dev Initializes the contract setting the deployer as the initial owner.\r\n     */\r\n    constructor() {\r\n        _setOwner(_msgSender());\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the address of the current owner.\r\n     */\r\n    function owner() public view virtual returns (address) {\r\n        return _owner;\r\n    }\r\n\r\n    /**\r\n     * @dev Throws if called by any account other than the owner.\r\n     */\r\n    modifier onlyOwner() {\r\n        require(owner() == _msgSender(), \"Ownable: caller is not the owner\");\r\n        _;\r\n    }\r\n\r\n    /**\r\n     * @dev Leaves the contract without owner. It will not be possible to call\r\n     * `onlyOwner` functions anymore. Can only be called by the current owner.\r\n     *\r\n     * NOTE: Renouncing ownership will leave the contract without an owner,\r\n     * thereby removing any functionality that is only available to the owner.\r\n     */\r\n    function renounceOwnership() public virtual onlyOwner {\r\n        _setOwner(address(0));\r\n    }\r\n\r\n    /**\r\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\r\n     * Can only be called by the current owner.\r\n     */\r\n    function transferOwnership(address newOwner) public virtual onlyOwner {\r\n        require(newOwner != address(0), \"Ownable: new owner is the zero address\");\r\n        _setOwner(newOwner);\r\n    }\r\n\r\n    function _setOwner(address newOwner) private {\r\n        address oldOwner = _owner;\r\n        _owner = newOwner;\r\n        emit OwnershipTransferred(oldOwner, newOwner);\r\n    }\r\n}\r\n\r\n// File: BindBox/param/BindBoxParam.sol\r\n\r\n\r\npragma solidity ^0.8.9;\r\n\r\n\r\n\r\n\r\n\r\ncontract BindBoxParam is IBindBoxParam,Ownable {\r\n    uint public usdtMin;\r\n    uint public usdtMax;\r\n    uint public btcMin;\r\n    uint public btcMax;\r\n    address public btc;\r\n    address public usdt;\r\n\r\n    using MathX128 for uint;\r\n\r\n\r\n    constructor(address _btc,address _usdt) {\r\n        btc=_btc;\r\n        usdt=_usdt;\r\n        usdtMin=6*(10**6);\r\n        usdtMax=10*(10**6);\r\n        btcMin=usdtMin*100/57615;\r\n        btcMax=usdtMax*100/57615;\r\n    }\r\n    \r\n    function reward(uint amount,uint probabilityX128,uint level) external pure returns (uint award) {\r\n        uint finalX128=pows(probabilityX128,2*level-1);\r\n        \r\n        award=finalX128.mulUint(amount*level)+(amount*3/10);\r\n    }\r\n\r\n    function newUserToken() external view returns (IERC20 token,uint amount) {\r\n        token=IERC20(usdt);\r\n        amount=usdtMin;\r\n    }\r\n\r\n    function newUserRewardToken(uint switchProbabilityX128,uint rewardProbabilityX128) external view returns (IERC20 token, uint amount) {\r\n        uint minn;\r\n        uint maxx;\r\n        if(switchProbabilityX128.mulUint(20)==0){\r\n            token=IERC20(btc);\r\n            minn=btcMin;\r\n            maxx=btcMax;\r\n        }else{\r\n            token=IERC20(usdt);\r\n            minn=usdtMin;\r\n            maxx=usdtMax;\r\n        }\r\n        amount=rewardProbabilityX128.mulUint(maxx-minn)+minn;\r\n    }\r\n\r\n    function updateParam(uint _usdtMin,uint _usdtMax,uint _btcMin,uint _btcMax) external onlyOwner {\r\n        usdtMin=_usdtMin;\r\n        usdtMax=_usdtMax;\r\n        btcMin=_btcMin;\r\n        btcMax=_btcMax;\r\n    }\r\n\r\n    function pows(uint number,uint n) internal pure returns(uint result) {\r\n        result=MathX128.oneX128;\r\n        while(n!=0){\r\n            if((n&1)!=0){\r\n                result=result.mulX128(number);\r\n            }\r\n            n>>=1;\r\n            number=number.mulX128(number);\r\n        }\r\n    }\r\n}","ABI":"[{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_btc\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_usdt\",\"type\":\"address\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"btc\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"btcMax\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"btcMin\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"switchProbabilityX128\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"rewardProbabilityX128\",\"type\":\"uint256\"}],\"name\":\"newUserRewardToken\",\"outputs\":[{\"internalType\":\"contract IERC20\",\"name\":\"token\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"newUserToken\",\"outputs\":[{\"internalType\":\"contract IERC20\",\"name\":\"token\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"probabilityX128\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"level\",\"type\":\"uint256\"}],\"name\":\"reward\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"award\",\"type\":\"uint256\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_usdtMin\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_usdtMax\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_btcMin\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_btcMax\",\"type\":\"uint256\"}],\"name\":\"updateParam\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"usdt\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"usdtMax\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"usdtMin\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"}]","ContractName":"BindBoxParam","CompilerVersion":"v0.8.10+commit.fc410830","OptimizationUsed":"1","Runs":"999999","ConstructorArguments":"0000000000000000000000002260fac5e5542a773aa44fbcfedf7c193bc2c599000000000000000000000000dac17f958d2ee523a2206206994597c13d831ec7","EVMVersion":"Default","Library":"","LicenseType":"MIT","Proxy":"0","Implementation":"","SwarmSource":"ipfs://ba585c2656746099d3bc0887a475b33e96f45de585fe2fd373d47e105b225662"}]}