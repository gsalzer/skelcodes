{"status":"1","message":"OK","result":[{"SourceCode":"// SPDX-License-Identifier: MIT\r\npragma solidity =0.6.12;\r\n\r\n// import './interfaces/IFeSwapFactory.sol';\r\n\r\ninterface IFeSwapFactory {\r\n    event PairCreated(address indexed tokenA, address indexed tokenB, address pairAAB, address pairABB, uint);\r\n\r\n    function feeTo() external view returns (address);\r\n    function getFeeInfo() external view returns (address, uint256);\r\n    function factoryAdmin() external view returns (address);\r\n    function routerFeSwap() external view returns (address);  \r\n    function rateTriggerFactory() external view returns (uint64);  \r\n    function rateCapArbitrage() external view returns (uint64);     \r\n    function rateProfitShare() external view returns (uint64); \r\n\r\n    function getPair(address tokenA, address tokenB) external view returns (address pair);\r\n    function allPairs(uint) external view returns (address pair);\r\n    function allPairsLength() external view returns (uint);\r\n\r\n    function createUpdatePair(address tokenA, address tokenB, address pairOwner, uint256 rateTrigger) external returns (address pairAAB,address pairABB);\r\n\r\n    function setFeeTo(address) external;\r\n    function setFactoryAdmin(address) external;\r\n    function setRouterFeSwap(address) external;\r\n    function configFactory(uint64, uint64, uint64) external;\r\n    function managePair(address, address, address, address) external;\r\n}\r\n\r\n// import './FeSwapPair.sol';\r\n// import './interfaces/IFeSwapPair.sol';\r\n// import './IFeSwapERC20.sol';\r\n\r\ninterface IFeSwapERC20 {\r\n    event Approval(address indexed owner, address indexed spender, uint value);\r\n    event Transfer(address indexed from, address indexed to, uint value);\r\n\r\n    function name() external pure returns (string memory);\r\n    function symbol() external pure returns (string memory);\r\n    function decimals() external pure returns (uint8);\r\n    function totalSupply() external view returns (uint);\r\n    function balanceOf(address owner) external view returns (uint);\r\n    function allowance(address owner, address spender) external view returns (uint);\r\n\r\n    function approve(address spender, uint value) external returns (bool);\r\n    function transfer(address to, uint value) external returns (bool);\r\n    function transferFrom(address from, address to, uint value) external returns (bool);\r\n\r\n    function DOMAIN_SEPARATOR() external view returns (bytes32);\r\n    function PERMIT_TYPEHASH() external pure returns (bytes32);\r\n    function nonces(address owner) external view returns (uint);\r\n\r\n    function permit(address owner, address spender, uint value, uint deadline, uint8 v, bytes32 r, bytes32 s) external;\r\n}\r\n\r\ninterface IFeSwapPair is IFeSwapERC20 {\r\n    event Mint(address indexed sender, uint amount0, uint amount1);\r\n    event Burn(address indexed sender, uint amount0, uint amount1, address indexed to);\r\n    event Swap(address indexed sender, uint amount0In, uint amount1In, uint amount1Out, address indexed to );\r\n    event Sync(uint112 reserve0, uint112 reserve1);\r\n\r\n    function MINIMUM_LIQUIDITY() external pure returns (uint);\r\n    function factory() external view returns (address);\r\n    function pairOwner() external view returns (address);\r\n    function tokenIn() external view returns (address);\r\n    function tokenOut() external view returns (address);\r\n    function getReserves() external view returns ( uint112 _reserveIn, uint112 _reserveOut, \r\n                                                          uint32 _blockTimestampLast, uint _rateTriggerArbitrage);\r\n    function price0CumulativeLast() external view returns (uint);\r\n    function price1CumulativeLast() external view returns (uint);\r\n    function kLast() external view returns (uint);\r\n    function rateTriggerArbitrage() external view returns (uint);\r\n    \r\n    function mint(address to) external returns (uint liquidity);\r\n    function burn(address to) external returns (uint amount0, uint amount1);\r\n    function swap(uint amountOut, address to, bytes calldata data) external;\r\n    function skim(address to) external;\r\n    function sync() external;\r\n\r\n    function initialize(address, address, address, address, uint) external;\r\n    function setOwner(address _pairOwner) external;\r\n    function adjusArbitragetRate(uint newRate) external;\r\n}\r\n\r\n// import './FeSwapERC20.sol';\r\n// import './interfaces/IFeSwapERC20.sol';\r\n// import './libraries/SafeMath.sol';\r\n\r\n// a library for performing overflow-safe math, courtesy of DappHub (https://github.com/dapphub/ds-math)\r\n\r\nlibrary SafeMath {\r\n    function add(uint x, uint y) internal pure returns (uint z) {\r\n        require((z = x + y) >= x, 'ds-math-add-overflow');\r\n    }\r\n\r\n    function sub(uint x, uint y) internal pure returns (uint z) {\r\n        require((z = x - y) <= x, 'ds-math-sub-underflow');\r\n    }\r\n\r\n    function mul(uint x, uint y) internal pure returns (uint z) {\r\n        require(y == 0 || (z = x * y) / y == x, 'ds-math-mul-overflow');\r\n    }\r\n}\r\n\r\ncontract FeSwapERC20 is IFeSwapERC20 {\r\n    using SafeMath for uint;\r\n\r\n    string public constant override name = 'FeSwap';\r\n    string public constant override symbol = 'FESP';\r\n    uint8 public constant override decimals = 18;\r\n    uint  public override totalSupply;\r\n    mapping(address => uint) public override balanceOf;\r\n    mapping(address => mapping(address => uint)) public override allowance;\r\n\r\n    bytes32 public override DOMAIN_SEPARATOR;\r\n    // keccak256(\"Permit(address owner,address spender,uint256 value,uint256 nonce,uint256 deadline)\");\r\n    bytes32 public constant override PERMIT_TYPEHASH = 0x6e71edae12b1b97f4d1f60370fef10105fa2faae0126114a169c64845d6126c9;\r\n    mapping(address => uint) public override nonces;\r\n\r\n    event Approval(address indexed owner, address indexed spender, uint value);\r\n    event Transfer(address indexed from, address indexed to, uint value);\r\n\r\n    constructor() public {\r\n        uint chainId;\r\n        assembly {\r\n            chainId := chainid()\r\n        }\r\n        DOMAIN_SEPARATOR = keccak256(\r\n            abi.encode(\r\n                keccak256('EIP712Domain(string name,string version,uint256 chainId,address verifyingContract)'),\r\n                keccak256(bytes(name)),\r\n                keccak256(bytes('1')),\r\n                chainId,\r\n                address(this)\r\n            )\r\n        );\r\n    }\r\n\r\n    function _mint(address to, uint value) internal {\r\n        totalSupply = totalSupply.add(value);\r\n        balanceOf[to] = balanceOf[to].add(value);\r\n        emit Transfer(address(0), to, value);\r\n    }\r\n\r\n    function _burn(address from, uint value) internal {\r\n        balanceOf[from] = balanceOf[from].sub(value);\r\n        totalSupply = totalSupply.sub(value);\r\n        emit Transfer(from, address(0), value);\r\n    }\r\n\r\n    function _approve(address owner, address spender, uint value) private {\r\n        allowance[owner][spender] = value;\r\n        emit Approval(owner, spender, value);\r\n    }\r\n\r\n    function _transfer(address from, address to, uint value) private {\r\n        balanceOf[from] = balanceOf[from].sub(value);\r\n        balanceOf[to] = balanceOf[to].add(value);\r\n        emit Transfer(from, to, value);\r\n    }\r\n\r\n    function approve(address spender, uint value) external override returns (bool) {\r\n        _approve(msg.sender, spender, value);\r\n        return true;\r\n    }\r\n\r\n    function transfer(address to, uint value) external override returns (bool) {\r\n        _transfer(msg.sender, to, value);\r\n        return true;\r\n    }\r\n\r\n    function transferFrom(address from, address to, uint value) external override returns (bool) {\r\n        if (allowance[from][msg.sender] != uint(-1)) {\r\n            allowance[from][msg.sender] = allowance[from][msg.sender].sub(value);\r\n        }\r\n        _transfer(from, to, value);\r\n        return true;\r\n    }\r\n\r\n    function permit(address owner, address spender, uint value, uint deadline, uint8 v, bytes32 r, bytes32 s) override external {\r\n        require(deadline >= block.timestamp, 'FeSwap: EXPIRED');\r\n        bytes32 digest = keccak256(\r\n            abi.encodePacked(\r\n                '\\x19\\x01',\r\n                DOMAIN_SEPARATOR,\r\n                keccak256(abi.encode(PERMIT_TYPEHASH, owner, spender, value, nonces[owner]++, deadline))\r\n            )\r\n        );\r\n        address recoveredAddress = ecrecover(digest, v, r, s);\r\n        require(recoveredAddress != address(0) && recoveredAddress == owner, 'FeSwap: INVALID_SIGNATURE');\r\n        _approve(owner, spender, value);\r\n    }\r\n}\r\n\r\n// import './libraries/Math.sol';\r\n\r\n// a library for performing various math operations\r\n\r\nlibrary Math {\r\n    function min(uint x, uint y) internal pure returns (uint z) {\r\n        z = x < y ? x : y;\r\n    }\r\n\r\n    // babylonian method (https://en.wikipedia.org/wiki/Methods_of_computing_square_roots#Babylonian_method)\r\n    function sqrt(uint y) internal pure returns (uint z) {\r\n        if (y > 3) {\r\n            z = y;\r\n            uint x = y / 2 + 1;\r\n            while (x < z) {\r\n                z = x;\r\n                x = (y / x + x) / 2;\r\n            }\r\n        } else if (y != 0) {\r\n            z = 1;\r\n        }\r\n    }\r\n}\r\n\r\n// import './libraries/UQ112x112.sol';\r\n\r\n// a library for handling binary fixed point numbers (https://en.wikipedia.org/wiki/Q_(number_format))\r\n\r\n// range: [0, 2**112 - 1]\r\n// resolution: 1 / 2**112\r\n\r\nlibrary UQ112x112 {\r\n    uint224 constant Q112 = 2**112;\r\n\r\n    // encode a uint112 as a UQ112x112\r\n    function encode(uint112 y) internal pure returns (uint224 z) {\r\n        z = uint224(y) * Q112; // never overflows\r\n    }\r\n\r\n    // divide a UQ112x112 by a uint112, returning a UQ112x112\r\n    function uqdiv(uint224 x, uint112 y) internal pure returns (uint224 z) {\r\n        z = x / uint224(y);\r\n    }\r\n}\r\n\r\n// import './interfaces/IERC20.sol';\r\n\r\ninterface IERC20 {\r\n    event Approval(address indexed owner, address indexed spender, uint value);\r\n    event Transfer(address indexed from, address indexed to, uint value);\r\n\r\n    function name() external view returns (string memory);\r\n    function symbol() external view returns (string memory);\r\n    function decimals() external view returns (uint8);\r\n    function totalSupply() external view returns (uint);\r\n    function balanceOf(address owner) external view returns (uint);\r\n    function allowance(address owner, address spender) external view returns (uint);\r\n\r\n    function approve(address spender, uint value) external returns (bool);\r\n    function transfer(address to, uint value) external returns (bool);\r\n    function transferFrom(address from, address to, uint value) external returns (bool);\r\n}\r\n\r\n// import './interfaces/IFeSwapFactory.sol';\r\n// import './interfaces/IFeSwapCallee.sol';\r\n\r\ninterface IFeSwapCallee {\r\n    function FeSwapCall(address sender, uint amountOut, bytes calldata data) external;\r\n}\r\n\r\n// import './libraries/TransferHelper.sol';\r\n\r\n// helper methods for interacting with ERC20 tokens and sending ETH that do not consistently return true/false\r\nlibrary TransferHelper {\r\n    function safeApprove(address token, address to, uint value) internal {\r\n        // bytes4(keccak256(bytes('approve(address,uint256)')));\r\n        (bool success, bytes memory data) = token.call(abi.encodeWithSelector(0x095ea7b3, to, value));\r\n        require(success && (data.length == 0 || abi.decode(data, (bool))), 'TransferHelper: APPROVE_FAILED');\r\n    }\r\n\r\n    function safeTransfer(address token, address to, uint value) internal {\r\n        // bytes4(keccak256(bytes('transfer(address,uint256)')));\r\n        (bool success, bytes memory data) = token.call(abi.encodeWithSelector(0xa9059cbb, to, value));\r\n        require(success && (data.length == 0 || abi.decode(data, (bool))), 'TransferHelper: TRANSFER_FAILED');\r\n    }\r\n\r\n    function safeTransferFrom(address token, address from, address to, uint value) internal {\r\n        // bytes4(keccak256(bytes('transferFrom(address,address,uint256)')));\r\n        (bool success, bytes memory data) = token.call(abi.encodeWithSelector(0x23b872dd, from, to, value));\r\n        require(success && (data.length == 0 || abi.decode(data, (bool))), 'TransferHelper: TRANSFER_FROM_FAILED');\r\n    }\r\n\r\n    function safeTransferETH(address to, uint value) internal {\r\n        (bool success,) = to.call{value:value}(new bytes(0));\r\n        require(success, 'TransferHelper: ETH_TRANSFER_FAILED');\r\n    }\r\n}\r\n\r\ncontract FeSwapPair is IFeSwapPair, FeSwapERC20 {\r\n    using SafeMath  for uint;\r\n    using UQ112x112 for uint224;\r\n\r\n    uint public constant override MINIMUM_LIQUIDITY = 10**3;\r\n    bytes4 private constant SELECTOR = bytes4(keccak256(bytes('transfer(address,uint256)')));\r\n\r\n    address public override factory;\r\n    address public override pairOwner;\r\n    address public override tokenIn;\r\n    address public override tokenOut;\r\n\r\n    uint112 private reserveIn;              // uses single storage slot, accessible via getReserves\r\n    uint112 private reserveOut;             // uses single storage slot, accessible via getReserves\r\n    uint32  private blockTimestampLast;     // uses single storage slot, accessible via getReserves\r\n\r\n    uint public override price0CumulativeLast;\r\n    uint public override price1CumulativeLast;\r\n    uint public override kLast;             // reserveIn * reserveOut, as of immediately after the most recent liquidity event\r\n\r\n    uint public override rateTriggerArbitrage;\r\n\r\n    uint private unlocked = 0x5A;\r\n    modifier lock() {\r\n        require(unlocked == 0x5A, 'FeSwap: LOCKED');\r\n        unlocked = 0x69;\r\n        _;\r\n        unlocked = 0x5A;\r\n    }\r\n  \r\n    function getReserves() public view override returns ( uint112 _reserveIn, uint112 _reserveOut, \r\n                                                          uint32 _blockTimestampLast, uint _rateTriggerArbitrage) {\r\n        _reserveIn = reserveIn;\r\n        _reserveOut = reserveOut;\r\n        _blockTimestampLast = blockTimestampLast;\r\n        _rateTriggerArbitrage = rateTriggerArbitrage;\r\n\r\n    }\r\n\r\n    function _safeTransfer(address token, address to, uint value) private {\r\n        (bool success, bytes memory data) = token.call(abi.encodeWithSelector(SELECTOR, to, value));\r\n        require(success && (data.length == 0 || abi.decode(data, (bool))), 'FeSwap: TRANSFER_FAILED');\r\n    }\r\n\r\n    event Mint(address indexed sender, uint amountIn, uint amountOut);\r\n    event Burn(address indexed sender, uint amountIn, uint amountOut, address indexed to);\r\n    event Swap(\r\n        address indexed sender,\r\n        uint amount0In,\r\n        uint amount1In,\r\n        uint amount1Out,\r\n        address indexed to\r\n    );\r\n    event Sync(uint112 reserveIn, uint112 reserveOut);\r\n\r\n    constructor() public {\r\n        factory = msg.sender;\r\n    }\r\n\r\n    // called once by the factory at time of deployment\r\n    function initialize(address _tokenIn, address _tokenOut, address _pairOwner, address router, uint rateTrigger) external override {\r\n        require(msg.sender == factory, 'FeSwap: FORBIDDEN');\r\n        tokenIn     = _tokenIn;\r\n        tokenOut    = _tokenOut;\r\n        pairOwner   = _pairOwner;\r\n        if(rateTrigger != 0)  rateTriggerArbitrage = rateTrigger;\r\n        TransferHelper.safeApprove(tokenIn, router, uint(-1));          // Approve Rourter to transfer out tokenIn for auto-arbitrage\r\n    }\r\n\r\n    function setOwner(address _pairOwner) external override {\r\n        require(msg.sender == factory, 'FeSwap: FORBIDDEN');\r\n        pairOwner = _pairOwner;\r\n    }\r\n\r\n    function adjusArbitragetRate(uint newRate) external override {\r\n        require(msg.sender == factory, 'FeSwap: FORBIDDEN');\r\n        rateTriggerArbitrage = newRate;\r\n    }  \r\n\r\n    // update reserves and, on the first call per block, price accumulators\r\n    function _update(uint balanceIn, uint balanceOut, uint112 _reserveIn, uint112 _reserveOut) private {\r\n        require(balanceIn <= uint112(-1) && balanceOut <= uint112(-1), 'FeSwap: OVERFLOW');\r\n        uint32 blockTimestamp = uint32(block.timestamp % 2**32);\r\n        uint32 timeElapsed = blockTimestamp - blockTimestampLast; // overflow is desired\r\n        if (timeElapsed > 0 && _reserveIn != 0 && _reserveOut != 0) {\r\n            // * never overflows, and + overflow is desired\r\n            price0CumulativeLast += uint(UQ112x112.encode(_reserveOut).uqdiv(_reserveIn)) * timeElapsed;\r\n            price1CumulativeLast += uint(UQ112x112.encode(_reserveIn).uqdiv(_reserveOut)) * timeElapsed;\r\n        }\r\n        reserveIn = uint112(balanceIn);\r\n        reserveOut = uint112(balanceOut);\r\n        blockTimestampLast = blockTimestamp;\r\n        emit Sync(reserveIn, reserveOut);\r\n    }\r\n\r\n    // if fee is on, mint liquidity equivalent to 1/6th of the growth in sqrt(k)\r\n    function _mintFee(uint112 _reserveIn, uint112 _reserveOut) private returns (bool feeOn) {\r\n        (address feeTo, uint rateProfitShare) = IFeSwapFactory(factory).getFeeInfo();\r\n        feeOn = (feeTo != address(0)) || (pairOwner != address(0));\r\n        uint _kLast = kLast;            // gas savings\r\n        if (feeOn) {\r\n            if (_kLast != 0) {\r\n                uint rootK = Math.sqrt(uint(_reserveIn).mul(_reserveOut));\r\n                uint rootKLast = Math.sqrt(_kLast);\r\n                if (rootK > rootKLast.add(20)) {     // ignore swap dust increase, select 20 randomly \r\n                    uint numerator = totalSupply.mul(rootK.sub(rootKLast)).mul(6);\r\n                    uint denominator = rootK.mul(rateProfitShare).add(rootKLast);\r\n                    uint liquidityCreator = numerator / (denominator.mul(10));\r\n                    if((liquidityCreator > 0) && (pairOwner != address(0))) {\r\n                        _mint(pairOwner, liquidityCreator);\r\n                    } \r\n                    uint liquidityFeSwap = numerator / (denominator.mul(15));\r\n                    if((liquidityFeSwap > 0)  && (feeTo != address(0))) {\r\n                        _mint(feeTo, liquidityFeSwap);\r\n                    } \r\n                }\r\n            }\r\n        } else if (_kLast != 0) {\r\n            kLast = 0;\r\n        }            \r\n    }\r\n\r\n    // this low-level function should be called from a contract which performs important safety checks\r\n    function mint(address to) external override lock returns (uint liquidity) {\r\n        (uint112 _reserveIn, uint112 _reserveOut, ,) = getReserves(); // gas savings\r\n        uint balanceIn = IERC20(tokenIn).balanceOf(address(this));\r\n        uint balanceOut = IERC20(tokenOut).balanceOf(address(this));\r\n        uint amountTokenIn = balanceIn.sub(_reserveIn);\r\n        uint amountTokenOut = balanceOut.sub(_reserveOut);\r\n\r\n        bool feeOn = _mintFee(_reserveIn, _reserveOut);\r\n        uint _totalSupply = totalSupply; // gas savings, must be defined here since totalSupply can update in _mintFee\r\n        if (_totalSupply == 0) {\r\n            liquidity = Math.sqrt(amountTokenIn.mul(amountTokenOut)).sub(MINIMUM_LIQUIDITY);\r\n            _mint(address(0), MINIMUM_LIQUIDITY); // permanently lock the first MINIMUM_LIQUIDITY tokens\r\n        } else {\r\n            liquidity = Math.min(amountTokenIn.mul(_totalSupply) / _reserveIn, amountTokenOut.mul(_totalSupply) / _reserveOut);\r\n        }\r\n        require(liquidity > 0, 'FeSwap: INSUFFICIENT_LIQUIDITY_MINTED');\r\n        _mint(to, liquidity);\r\n\r\n        _update(balanceIn, balanceOut, _reserveIn, _reserveOut);\r\n        if (feeOn) kLast = uint(reserveIn).mul(reserveOut);                    // reserve0 and reserve1 are up-to-date\r\n        emit Mint(msg.sender, amountTokenIn, amountTokenOut);\r\n    }\r\n\r\n    // this low-level function should be called from a contract which performs important safety checks\r\n    function burn(address to) external lock override returns (uint amountIn, uint amountOut) {\r\n        (uint112 _reserveIn, uint112 _reserveOut, ,) = getReserves();     // gas savings\r\n        (address _tokenIn, address _tokenOut) = (tokenIn, tokenOut);    // gas savings\r\n        uint balanceIn = IERC20(_tokenIn).balanceOf(address(this));\r\n        uint balanceOut = IERC20(_tokenOut).balanceOf(address(this));\r\n        uint liquidity = balanceOf[address(this)];                      // liquidity to remove\r\n\r\n        bool feeOn = _mintFee(_reserveIn, _reserveOut);\r\n        uint _totalSupply = totalSupply;                        // gas savings, must be defined here since totalSupply can update in _mintFee\r\n        amountIn = liquidity.mul(balanceIn) / _totalSupply;     // using balances ensures pro-rata distribution\r\n        amountOut = liquidity.mul(balanceOut) / _totalSupply;   // using balances ensures pro-rata distribution\r\n        require(amountIn > 0 && amountOut > 0, 'FeSwap: INSUFFICIENT_LIQUIDITY_BURNED');\r\n\r\n        _burn(address(this), liquidity);\r\n        _safeTransfer(_tokenIn, to, amountIn);\r\n        _safeTransfer(_tokenOut, to, amountOut);\r\n        balanceIn = IERC20(_tokenIn).balanceOf(address(this));\r\n        balanceOut = IERC20(_tokenOut).balanceOf(address(this));\r\n\r\n        _update(balanceIn, balanceOut, _reserveIn, _reserveOut);\r\n        if (feeOn) kLast = uint(reserveIn).mul(reserveOut);     // reserve0 and reserve1 are up-to-date\r\n        emit Burn(msg.sender, amountIn, amountOut, to);\r\n    }\r\n\r\n    // this low-level function should be called from a contract which performs important safety checks\r\n    function swap(uint amountOut, address to, bytes calldata data) external lock override {\r\n        require(amountOut > 0, 'FeSwap: INSUFFICIENT_OUTPUT_AMOUNT');\r\n        (uint112 _reserveIn, uint112 _reserveOut) = (reserveIn, reserveOut);        // gas savings\r\n        require(amountOut < _reserveOut, 'FeSwap: INSUFFICIENT_LIQUIDITY');\r\n\r\n        uint balanceIn;\r\n        uint balanceOut;\r\n        {   // scope for {_tokenIn, _tokenOut}, avoids stack too deep errors\r\n            (address _tokenIn, address _tokenOut) = (tokenIn, tokenOut);            // gas savings\r\n            require(to != _tokenIn && to != _tokenOut, 'FeSwap: INVALID_TO');\r\n            _safeTransfer(_tokenOut, to, amountOut); \r\n            if (data.length > 0) IFeSwapCallee(to).FeSwapCall(msg.sender, amountOut, data);\r\n            balanceIn = IERC20(_tokenIn).balanceOf(address(this));\r\n            balanceOut = IERC20(_tokenOut).balanceOf(address(this));\r\n        }\r\n\r\n        uint amountInTokenIn = balanceIn > _reserveIn ? balanceIn - _reserveIn : 0;\r\n        uint amountInTokenOut = balanceOut > (_reserveOut - amountOut) \r\n                                           ? balanceOut - (_reserveOut - amountOut) : 0;  // to support Flash Swap\r\n        require(amountInTokenIn > 0 || amountInTokenOut > 0, 'FeSwap: INSUFFICIENT_INPUT_AMOUNT');\r\n\r\n        uint balanceOutAdjusted = balanceOut.mul(1000).sub(amountInTokenOut.mul(3));      // Fee for Flash Swap: 0.3% from tokenOut\r\n        require(balanceIn.mul(balanceOutAdjusted) >= uint(_reserveIn).mul(_reserveOut).mul(1000), 'FeSwap: K');\r\n\r\n        _update(balanceIn, balanceOut, _reserveIn, _reserveOut);\r\n        emit Swap(msg.sender, amountInTokenIn, amountInTokenOut, amountOut, to);\r\n    }\r\n\r\n    // force balances to match reserves\r\n    function skim(address to) external lock override {\r\n        address _tokenIn = tokenIn;     // gas savings\r\n        address _tokenOut = tokenOut;   // gas savings\r\n        _safeTransfer(_tokenIn, to, IERC20(_tokenIn).balanceOf(address(this)).sub(reserveIn));\r\n        _safeTransfer(_tokenOut, to, IERC20(_tokenOut).balanceOf(address(this)).sub(reserveOut));\r\n    }\r\n\r\n    // force reserves to match balances\r\n    function sync() external lock override {\r\n        _update(IERC20(tokenIn).balanceOf(address(this)), IERC20(tokenOut).balanceOf(address(this)), reserveIn, reserveOut);\r\n    }\r\n}\r\n\r\ncontract FeSwapFactory is IFeSwapFactory {\r\n    uint64 public constant RATE_TRIGGER_FACTORY         = 10;       //  price difference be 1%\r\n    uint64 public constant RATE_CAP_TRIGGER_ARBITRAGE   = 50;       //  price difference < 5%\r\n    uint64 public constant RATE_PROFIT_SHARE            = 11;       //  Feswap and Pair owner share 1/12 of the swap profit, 11 means 1/12\r\n\r\n    address public override factoryAdmin;\r\n    address public override feeTo;\r\n    address public override routerFeSwap;\r\n    uint64 public override rateTriggerFactory;\r\n    uint64 public override rateCapArbitrage;\r\n    uint64 public override rateProfitShare;                        // 1/X => rateProfitShare = (X-1)\r\n\r\n    mapping(address => mapping(address => address)) public override getPair;\r\n    address[] public override allPairs;\r\n\r\n    event PairCreated(address indexed tokenA, address indexed tokenB, address pairAAB, address pairABB, uint allPairsLength);\r\n    event PairOwnerChanged(address indexed pairAAB, address indexed pairABB, address oldOwner, address newOwner);\r\n\r\n    constructor(address _factoryAdmin) public {                     //factoryAdmin will be set to TimeLock after Feswap works normally\r\n        factoryAdmin        = _factoryAdmin;\r\n        rateTriggerFactory  = RATE_TRIGGER_FACTORY;\r\n        rateCapArbitrage    = RATE_CAP_TRIGGER_ARBITRAGE;\r\n        rateProfitShare     = RATE_PROFIT_SHARE;\r\n     }\r\n\r\n    function allPairsLength() external view override returns (uint) {\r\n        return allPairs.length;\r\n    }\r\n\r\n    \r\n    function getFeeInfo() external view override returns (address _feeTo, uint256 _rateProfitShare) {\r\n        return (feeTo, rateProfitShare);\r\n    }\r\n\r\n    function createUpdatePair(address tokenA, address tokenB, address pairOwner, uint256 rateTrigger) external override returns (address pairAAB, address pairABB ) {\r\n        require(tokenA != tokenB, 'FeSwap: IDENTICAL_ADDRESSES');\r\n        // pairOwner allowed to zero to discard the profit\r\n        require(tokenA != address(0) && tokenB != address(0) && routerFeSwap != address(0) , 'FeSwap: ZERO_ADDRESS');\r\n        require((msg.sender == factoryAdmin) || (msg.sender == routerFeSwap) , 'FeSwap: FORBIDDEN');\r\n        require(rateTrigger <= rateCapArbitrage, 'FeSwap: GAP TOO MORE');\r\n\r\n        pairAAB = getPair[tokenA][tokenB];\r\n        if(pairAAB != address(0)) {\r\n            pairABB = getPair[tokenB][tokenA];\r\n            address oldOwner = IFeSwapPair(pairAAB).pairOwner();\r\n            if(oldOwner!=pairOwner) {\r\n                IFeSwapPair(pairAAB).setOwner(pairOwner);           // Owner Security must be checked by Router\r\n                IFeSwapPair(pairABB).setOwner(pairOwner);\r\n                emit PairOwnerChanged(pairAAB, pairABB, oldOwner, pairOwner);\r\n            }\r\n            if(rateTrigger!=0)\r\n            {\r\n                rateTrigger = rateTrigger*6 + rateTriggerFactory*4 + 10000;     // base is 10000\r\n                IFeSwapPair(pairAAB).adjusArbitragetRate(rateTrigger); \r\n                IFeSwapPair(pairABB).adjusArbitragetRate(rateTrigger);                \r\n            }\r\n        } else {\r\n            bytes memory bytecode = type(FeSwapPair).creationCode;\r\n            bytes32 saltAAB = keccak256(abi.encodePacked(tokenA, tokenB));\r\n            bytes32 saltABB = keccak256(abi.encodePacked(tokenB, tokenA));\r\n            assembly {\r\n                pairAAB := create2(0, add(bytecode, 32), mload(bytecode), saltAAB)\r\n                pairABB := create2(0, add(bytecode, 32), mload(bytecode), saltABB)\r\n            }\r\n\r\n            if(rateTrigger == 0) rateTrigger = rateTriggerFactory;\r\n            rateTrigger = rateTrigger*6 + rateTriggerFactory*4 + 10000;\r\n\r\n            IFeSwapPair(pairAAB).initialize(tokenA, tokenB, pairOwner, routerFeSwap, rateTrigger);\r\n            getPair[tokenA][tokenB] = pairAAB;\r\n            allPairs.push(pairAAB);\r\n\r\n            IFeSwapPair(pairABB).initialize(tokenB, tokenA, pairOwner, routerFeSwap, rateTrigger);\r\n            getPair[tokenB][tokenA] = pairABB;\r\n            allPairs.push(pairABB);\r\n\r\n            emit PairCreated(tokenA, tokenB, pairAAB, pairABB, allPairs.length);\r\n        }\r\n    }\r\n\r\n    function setFeeTo(address _feeTo) external override {\r\n        require(msg.sender == factoryAdmin, 'FeSwap: FORBIDDEN');\r\n        feeTo = _feeTo;\r\n    }\r\n\r\n    function setFactoryAdmin(address _factoryAdmin) external override {\r\n        require(msg.sender == factoryAdmin, 'FeSwap: FORBIDDEN');\r\n        factoryAdmin = _factoryAdmin;\r\n    }\r\n\r\n    function setRouterFeSwap(address _routerFeSwap) external override {\r\n        require(msg.sender == factoryAdmin, 'FeSwap: FORBIDDEN');\r\n        routerFeSwap = _routerFeSwap;                                         // for Router Initiation\r\n    }    \r\n\r\n    function configFactory(uint64 newTriggerRate, uint64 newRateCap, uint64 newProfitShareRate) external override {\r\n        require(msg.sender == factoryAdmin, 'FeSwap: FORBIDDEN');\r\n        rateTriggerFactory  = newTriggerRate;\r\n        rateCapArbitrage    = newRateCap;\r\n        rateProfitShare     = newProfitShareRate;                   // 1/X => rateProfitShare = (X-1)\r\n    } \r\n    \r\n    // Function to update Router in case of emergence, factoryAdmin will be set to TimeLock after Feswap works normally\r\n    // routerFeSwap must be secured and absolutely cannot be replaced uncontrolly.\r\n    function managePair(address _tokenA, address _tokenB, address _pairOwner, address _routerFeSwap) external override {\r\n        require(msg.sender == factoryAdmin, 'FeSwap: FORBIDDEN');\r\n        address pairAAB = getPair[_tokenA][_tokenB];\r\n        address pairABB = getPair[_tokenB][_tokenA];\r\n        \r\n        require(pairAAB != address(0), 'FeSwap: NO TOKEN PAIR');\r\n        IFeSwapPair(pairAAB).initialize(_tokenA, _tokenB, _pairOwner, _routerFeSwap, 0);\r\n        IFeSwapPair(pairABB).initialize(_tokenB, _tokenA, _pairOwner, _routerFeSwap, 0);\r\n    } \r\n}","ABI":"[{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_factoryAdmin\",\"type\":\"address\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"tokenA\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"tokenB\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"pairAAB\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"pairABB\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"allPairsLength\",\"type\":\"uint256\"}],\"name\":\"PairCreated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"pairAAB\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"pairABB\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"oldOwner\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"PairOwnerChanged\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"RATE_CAP_TRIGGER_ARBITRAGE\",\"outputs\":[{\"internalType\":\"uint64\",\"name\":\"\",\"type\":\"uint64\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"RATE_PROFIT_SHARE\",\"outputs\":[{\"internalType\":\"uint64\",\"name\":\"\",\"type\":\"uint64\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"RATE_TRIGGER_FACTORY\",\"outputs\":[{\"internalType\":\"uint64\",\"name\":\"\",\"type\":\"uint64\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"allPairs\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"allPairsLength\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint64\",\"name\":\"newTriggerRate\",\"type\":\"uint64\"},{\"internalType\":\"uint64\",\"name\":\"newRateCap\",\"type\":\"uint64\"},{\"internalType\":\"uint64\",\"name\":\"newProfitShareRate\",\"type\":\"uint64\"}],\"name\":\"configFactory\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"tokenA\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"tokenB\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"pairOwner\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"rateTrigger\",\"type\":\"uint256\"}],\"name\":\"createUpdatePair\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"pairAAB\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"pairABB\",\"type\":\"address\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"factoryAdmin\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"feeTo\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getFeeInfo\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"_feeTo\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_rateProfitShare\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"getPair\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_tokenA\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_tokenB\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_pairOwner\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_routerFeSwap\",\"type\":\"address\"}],\"name\":\"managePair\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"rateCapArbitrage\",\"outputs\":[{\"internalType\":\"uint64\",\"name\":\"\",\"type\":\"uint64\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"rateProfitShare\",\"outputs\":[{\"internalType\":\"uint64\",\"name\":\"\",\"type\":\"uint64\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"rateTriggerFactory\",\"outputs\":[{\"internalType\":\"uint64\",\"name\":\"\",\"type\":\"uint64\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"routerFeSwap\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_factoryAdmin\",\"type\":\"address\"}],\"name\":\"setFactoryAdmin\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_feeTo\",\"type\":\"address\"}],\"name\":\"setFeeTo\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_routerFeSwap\",\"type\":\"address\"}],\"name\":\"setRouterFeSwap\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}]","ContractName":"FeSwapFactory","CompilerVersion":"v0.6.12+commit.27d51765","OptimizationUsed":"1","Runs":"999999","ConstructorArguments":"000000000000000000000000dc7ef6b5d1a15768c0520e54e7414e1e0297e141","EVMVersion":"Default","Library":"","LicenseType":"MIT","Proxy":"0","Implementation":"","SwarmSource":"ipfs://a61da7b0cc1bdd130e4bf245f9d2599b99706dd92453761015a540be417a82fc"}]}