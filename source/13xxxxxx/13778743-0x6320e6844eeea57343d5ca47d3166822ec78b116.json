{"status":"1","message":"OK","result":[{"SourceCode":"{{\r\n  \"language\": \"Solidity\",\r\n  \"sources\": {\r\n    \"contracts/pools/LidoTempusPool.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: BUSL-1.1\\npragma solidity 0.8.10;\\n\\nimport \\\"../TempusPool.sol\\\";\\nimport \\\"../protocols/lido/ILido.sol\\\";\\n\\ncontract LidoTempusPool is TempusPool {\\n    ILido internal immutable lido;\\n    bytes32 public constant override protocolName = \\\"Lido\\\";\\n    address private immutable referrer;\\n\\n    constructor(\\n        ILido token,\\n        address controller,\\n        uint256 maturity,\\n        uint256 estYield,\\n        TokenData memory principalsData,\\n        TokenData memory yieldsData,\\n        FeesConfig memory maxFeeSetup,\\n        address referrerAddress\\n    )\\n        TempusPool(\\n            address(token),\\n            address(0),\\n            controller,\\n            maturity,\\n            token.getPooledEthByShares(1e18),\\n            1e18,\\n            estYield,\\n            principalsData,\\n            yieldsData,\\n            maxFeeSetup\\n        )\\n    {\\n        lido = token;\\n        referrer = referrerAddress;\\n    }\\n\\n    function depositToUnderlying(uint256 amount) internal override returns (uint256) {\\n        // Enforced by the controller\\n        assert(msg.value == amount);\\n\\n        uint256 preDepositBalance = IERC20(yieldBearingToken).balanceOf(address(this));\\n        lido.submit{value: msg.value}(referrer);\\n\\n        uint256 mintedTokens = IERC20(yieldBearingToken).balanceOf(address(this)) - preDepositBalance;\\n        return mintedTokens;\\n    }\\n\\n    function withdrawFromUnderlyingProtocol(uint256, address) internal pure override returns (uint256) {\\n        require(false, \\\"LidoTempusPool.withdrawFromUnderlyingProtocol not supported\\\");\\n        return 0;\\n    }\\n\\n    /// @return Updated current Interest Rate as an 1e18 decimal\\n    function updateInterestRate() internal view override returns (uint256) {\\n        return lido.getPooledEthByShares(1e18);\\n    }\\n\\n    /// @return Stored Interest Rate as an 1e18 decimal\\n    function currentInterestRate() public view override returns (uint256) {\\n        // NOTE: if totalShares() is 0, then rate is also 0,\\n        //       but this only happens right after deploy, so we ignore it\\n        return lido.getPooledEthByShares(1e18);\\n    }\\n\\n    /// NOTE: Lido StETH is pegged 1:1 to ETH\\n    /// @return Asset Token amount\\n    function numAssetsPerYieldToken(uint yieldTokens, uint) public pure override returns (uint) {\\n        return yieldTokens;\\n    }\\n\\n    /// NOTE: Lido StETH is pegged 1:1 to ETH\\n    /// @return YBT amount\\n    function numYieldTokensPerAsset(uint backingTokens, uint) public pure override returns (uint) {\\n        return backingTokens;\\n    }\\n\\n    function interestRateToSharePrice(uint interestRate) internal pure override returns (uint) {\\n        return interestRate; // no conversion needed, praise ETH\\n    }\\n}\\n\"\r\n    },\r\n    \"contracts/TempusPool.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: BUSL-1.1\\npragma solidity 0.8.10;\\n\\nimport \\\"@openzeppelin/contracts/security/ReentrancyGuard.sol\\\";\\nimport \\\"@openzeppelin/contracts/token/ERC20/IERC20.sol\\\";\\nimport \\\"@openzeppelin/contracts/token/ERC20/extensions/IERC20Metadata.sol\\\";\\nimport \\\"@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol\\\";\\n\\nimport \\\"./ITempusPool.sol\\\";\\nimport \\\"./token/PrincipalShare.sol\\\";\\nimport \\\"./token/YieldShare.sol\\\";\\nimport \\\"./math/Fixed256xVar.sol\\\";\\nimport \\\"./utils/Ownable.sol\\\";\\nimport \\\"./utils/UntrustedERC20.sol\\\";\\nimport \\\"./utils/Versioned.sol\\\";\\n\\n/// @dev helper struct to store name and symbol for the token\\nstruct TokenData {\\n    string name;\\n    string symbol;\\n}\\n\\n/// @author The tempus.finance team\\n/// @title Implementation of Tempus Pool\\nabstract contract TempusPool is ITempusPool, ReentrancyGuard, Ownable, Versioned {\\n    using SafeERC20 for IERC20;\\n    using UntrustedERC20 for IERC20;\\n    using Fixed256xVar for uint256;\\n\\n    uint256 public constant override maximumNegativeYieldDuration = 7 days;\\n\\n    address public immutable override yieldBearingToken;\\n    address public immutable override backingToken;\\n\\n    uint256 public immutable override startTime;\\n    uint256 public immutable override maturityTime;\\n    uint256 public override exceptionalHaltTime = type(uint256).max;\\n\\n    uint256 public immutable override initialInterestRate;\\n    uint256 public override maturityInterestRate;\\n\\n    uint256 public immutable exchangeRateONE;\\n    uint256 public immutable yieldBearingONE;\\n    uint256 public immutable override backingTokenONE;\\n\\n    IPoolShare public immutable override principalShare;\\n    IPoolShare public immutable override yieldShare;\\n\\n    address public immutable override controller;\\n\\n    uint256 private immutable initialEstimatedYield;\\n\\n    FeesConfig private feesConfig;\\n    uint256 public immutable override maxDepositFee;\\n    uint256 public immutable override maxEarlyRedeemFee;\\n    uint256 public immutable override maxMatureRedeemFee;\\n    uint256 public override totalFees;\\n\\n    /// Timestamp when the negative yield period was entered.\\n    uint256 private negativeYieldStartTime;\\n\\n    /// Constructs Pool with underlying token, start and maturity date\\n    /// @param _yieldBearingToken Yield Bearing Token, such as cDAI or aUSDC\\n    /// @param _backingToken backing token (or zero address if ETH)\\n    /// @param ctrl The authorized TempusController of the pool\\n    /// @param maturity maturity time of this pool\\n    /// @param initInterestRate initial interest rate of the pool\\n    /// @param exchangeRateOne 1.0 expressed in exchange rate decimal precision\\n    /// @param estimatedFinalYield estimated yield for the whole lifetime of the pool\\n    /// @param principalsData Tempus Principals name and symbol\\n    /// @param yieldsData Tempus Yields name and symbol\\n    /// @param maxFeeSetup Maximum fee percentages that this pool can have,\\n    ///                    values in Yield Bearing Token precision\\n    constructor(\\n        address _yieldBearingToken,\\n        address _backingToken,\\n        address ctrl,\\n        uint256 maturity,\\n        uint256 initInterestRate,\\n        uint256 exchangeRateOne,\\n        uint256 estimatedFinalYield,\\n        TokenData memory principalsData,\\n        TokenData memory yieldsData,\\n        FeesConfig memory maxFeeSetup\\n    ) Versioned(1, 0, 0) {\\n        require(maturity > block.timestamp, \\\"maturityTime is after startTime\\\");\\n        require(ctrl != address(0), \\\"controller can not be zero\\\");\\n        require(initInterestRate > 0, \\\"initInterestRate can not be zero\\\");\\n        require(estimatedFinalYield > 0, \\\"estimatedFinalYield can not be zero\\\");\\n        require(_yieldBearingToken != address(0), \\\"YBT can not be zero\\\");\\n\\n        yieldBearingToken = _yieldBearingToken;\\n        backingToken = _backingToken;\\n        controller = ctrl;\\n        startTime = block.timestamp;\\n        maturityTime = maturity;\\n        initialInterestRate = initInterestRate;\\n        exchangeRateONE = exchangeRateOne;\\n        yieldBearingONE = 10**ERC20(_yieldBearingToken).decimals();\\n        initialEstimatedYield = estimatedFinalYield;\\n\\n        maxDepositFee = maxFeeSetup.depositPercent;\\n        maxEarlyRedeemFee = maxFeeSetup.earlyRedeemPercent;\\n        maxMatureRedeemFee = maxFeeSetup.matureRedeemPercent;\\n\\n        uint8 backingDecimals = _backingToken != address(0) ? IERC20Metadata(_backingToken).decimals() : 18;\\n        backingTokenONE = 10**backingDecimals;\\n        principalShare = new PrincipalShare(this, principalsData.name, principalsData.symbol, backingDecimals);\\n        yieldShare = new YieldShare(this, yieldsData.name, yieldsData.symbol, backingDecimals);\\n    }\\n\\n    modifier onlyController() {\\n        require(msg.sender == controller, \\\"Only callable by TempusController\\\");\\n        _;\\n    }\\n\\n    function depositToUnderlying(uint256 backingAmount) internal virtual returns (uint256 mintedYieldTokenAmount);\\n\\n    function withdrawFromUnderlyingProtocol(uint256 amount, address recipient)\\n        internal\\n        virtual\\n        returns (uint256 backingTokenAmount);\\n\\n    function matured() public view override returns (bool) {\\n        return (block.timestamp >= maturityTime) || (block.timestamp >= exceptionalHaltTime);\\n    }\\n\\n    function getFeesConfig() external view override returns (FeesConfig memory) {\\n        return feesConfig;\\n    }\\n\\n    function setFeesConfig(FeesConfig calldata newFeesConfig) external override onlyOwner {\\n        require(newFeesConfig.depositPercent <= maxDepositFee, \\\"Deposit fee percent > max\\\");\\n        require(newFeesConfig.earlyRedeemPercent <= maxEarlyRedeemFee, \\\"Early redeem fee percent > max\\\");\\n        require(newFeesConfig.matureRedeemPercent <= maxMatureRedeemFee, \\\"Mature redeem fee percent > max\\\");\\n        feesConfig = newFeesConfig;\\n    }\\n\\n    function transferFees(address recipient) external override nonReentrant onlyOwner {\\n        uint256 amount = totalFees;\\n        totalFees = 0;\\n\\n        IERC20 token = IERC20(yieldBearingToken);\\n        token.safeTransfer(recipient, amount);\\n    }\\n\\n    function onDepositBacking(uint256 backingTokenAmount, address recipient)\\n        external\\n        payable\\n        override\\n        onlyController\\n        returns (\\n            uint256 mintedShares,\\n            uint256 depositedYBT,\\n            uint256 fee,\\n            uint256 rate\\n        )\\n    {\\n        // Enforced by the controller.\\n        assert(backingTokenAmount > 0);\\n\\n        depositedYBT = depositToUnderlying(backingTokenAmount);\\n        assert(depositedYBT > 0);\\n\\n        (mintedShares, , fee, rate) = mintShares(depositedYBT, recipient);\\n    }\\n\\n    function onDepositYieldBearing(uint256 yieldTokenAmount, address recipient)\\n        external\\n        override\\n        onlyController\\n        returns (\\n            uint256 mintedShares,\\n            uint256 depositedBT,\\n            uint256 fee,\\n            uint256 rate\\n        )\\n    {\\n        // Enforced by the controller.\\n        assert(yieldTokenAmount > 0);\\n\\n        (mintedShares, depositedBT, fee, rate) = mintShares(yieldTokenAmount, recipient);\\n    }\\n\\n    /// @param yieldTokenAmount YBT amount in YBT decimal precision\\n    /// @param recipient address to which shares will be minted\\n    function mintShares(uint256 yieldTokenAmount, address recipient)\\n        private\\n        returns (\\n            uint256 mintedShares,\\n            uint256 depositedBT,\\n            uint256 fee,\\n            uint256 rate\\n        )\\n    {\\n        rate = updateInterestRate();\\n        (bool hasMatured, bool hasNegativeYield) = validateInterestRate(rate);\\n\\n        require(!hasMatured, \\\"Maturity reached.\\\");\\n        require(!hasNegativeYield, \\\"Negative yield!\\\");\\n\\n        // Collect fees if they are set, reducing the number of tokens for the sender\\n        // thus leaving more YBT in the TempusPool than there are minted TPS/TYS\\n        uint256 tokenAmount = yieldTokenAmount;\\n        uint256 depositFees = feesConfig.depositPercent;\\n        if (depositFees != 0) {\\n            fee = tokenAmount.mulfV(depositFees, yieldBearingONE);\\n            tokenAmount -= fee;\\n            totalFees += fee;\\n        }\\n\\n        // Issue appropriate shares\\n        depositedBT = numAssetsPerYieldToken(tokenAmount, rate);\\n        mintedShares = numSharesToMint(depositedBT, rate);\\n\\n        PrincipalShare(address(principalShare)).mint(recipient, mintedShares);\\n        YieldShare(address(yieldShare)).mint(recipient, mintedShares);\\n    }\\n\\n    function redeemToBacking(\\n        address from,\\n        uint256 principalAmount,\\n        uint256 yieldAmount,\\n        address recipient\\n    )\\n        external\\n        payable\\n        override\\n        onlyController\\n        returns (\\n            uint256 redeemedYieldTokens,\\n            uint256 redeemedBackingTokens,\\n            uint256 fee,\\n            uint256 rate\\n        )\\n    {\\n        (redeemedYieldTokens, fee, rate) = burnShares(from, principalAmount, yieldAmount);\\n\\n        redeemedBackingTokens = withdrawFromUnderlyingProtocol(redeemedYieldTokens, recipient);\\n    }\\n\\n    function redeem(\\n        address from,\\n        uint256 principalAmount,\\n        uint256 yieldAmount,\\n        address recipient\\n    )\\n        external\\n        override\\n        onlyController\\n        returns (\\n            uint256 redeemedYieldTokens,\\n            uint256 fee,\\n            uint256 rate\\n        )\\n    {\\n        (redeemedYieldTokens, fee, rate) = burnShares(from, principalAmount, yieldAmount);\\n\\n        redeemedYieldTokens = IERC20(yieldBearingToken).untrustedTransfer(recipient, redeemedYieldTokens);\\n    }\\n\\n    function finalize() public override {\\n        if (matured() && maturityInterestRate == 0) {\\n            maturityInterestRate = updateInterestRate();\\n        }\\n    }\\n\\n    function burnShares(\\n        address from,\\n        uint256 principalAmount,\\n        uint256 yieldAmount\\n    )\\n        private\\n        returns (\\n            uint256 redeemedYieldTokens,\\n            uint256 fee,\\n            uint256 interestRate\\n        )\\n    {\\n        require(IERC20(address(principalShare)).balanceOf(from) >= principalAmount, \\\"Insufficient principals.\\\");\\n        require(IERC20(address(yieldShare)).balanceOf(from) >= yieldAmount, \\\"Insufficient yields.\\\");\\n\\n        uint256 currentRate = updateInterestRate();\\n        (bool hasMatured, ) = validateInterestRate(currentRate);\\n\\n        if (hasMatured) {\\n            finalize();\\n        } else {\\n            // Redeeming prior to maturity is only allowed in equal amounts.\\n            require(principalAmount == yieldAmount, \\\"Inequal redemption not allowed before maturity.\\\");\\n        }\\n        // Burn the appropriate shares\\n        PrincipalShare(address(principalShare)).burnFrom(from, principalAmount);\\n        YieldShare(address(yieldShare)).burnFrom(from, yieldAmount);\\n\\n        (redeemedYieldTokens, , fee, interestRate) = getRedemptionAmounts(principalAmount, yieldAmount, currentRate);\\n        totalFees += fee;\\n    }\\n\\n    function getRedemptionAmounts(\\n        uint256 principalAmount,\\n        uint256 yieldAmount,\\n        uint256 currentRate\\n    )\\n        private\\n        view\\n        returns (\\n            uint256 redeemableYieldTokens,\\n            uint256 redeemableBackingTokens,\\n            uint256 redeemFeeAmount,\\n            uint256 interestRate\\n        )\\n    {\\n        interestRate = effectiveRate(currentRate);\\n\\n        if (interestRate < initialInterestRate) {\\n            redeemableBackingTokens = (principalAmount * interestRate) / initialInterestRate;\\n        } else {\\n            uint256 rateDiff = interestRate - initialInterestRate;\\n            // this is expressed in percent with exchangeRate precision\\n            uint256 yieldPercent = rateDiff.divfV(initialInterestRate, exchangeRateONE);\\n            uint256 redeemAmountFromYieldShares = yieldAmount.mulfV(yieldPercent, exchangeRateONE);\\n\\n            redeemableBackingTokens = principalAmount + redeemAmountFromYieldShares;\\n\\n            // after maturity, all additional yield is being collected as fee\\n            if (matured() && currentRate > interestRate) {\\n                uint256 additionalYieldRate = currentRate - interestRate;\\n                uint256 feeBackingAmount = yieldAmount.mulfV(\\n                    additionalYieldRate.mulfV(initialInterestRate, exchangeRateONE),\\n                    exchangeRateONE\\n                );\\n                redeemFeeAmount = numYieldTokensPerAsset(feeBackingAmount, currentRate);\\n            }\\n        }\\n\\n        redeemableYieldTokens = numYieldTokensPerAsset(redeemableBackingTokens, currentRate);\\n\\n        uint256 redeemFeePercent = matured() ? feesConfig.matureRedeemPercent : feesConfig.earlyRedeemPercent;\\n        if (redeemFeePercent != 0) {\\n            uint256 regularRedeemFee = redeemableYieldTokens.mulfV(redeemFeePercent, yieldBearingONE);\\n            redeemableYieldTokens -= regularRedeemFee;\\n            redeemFeeAmount += regularRedeemFee;\\n\\n            redeemableBackingTokens = numAssetsPerYieldToken(redeemableYieldTokens, currentRate);\\n        }\\n    }\\n\\n    function effectiveRate(uint256 currentRate) private view returns (uint256) {\\n        if (matured() && maturityInterestRate != 0) {\\n            return (currentRate < maturityInterestRate) ? currentRate : maturityInterestRate;\\n        } else {\\n            return currentRate;\\n        }\\n    }\\n\\n    /// @dev Calculates current yield - since beginning of the pool\\n    /// @notice Includes principal, so in case of 5% yield it returns 1.05\\n    /// @param interestRate Current interest rate of the underlying protocol\\n    /// @return Current yield relative to 1, such as 1.05 (+5%) or 0.97 (-3%)\\n    function currentYield(uint256 interestRate) private view returns (uint256) {\\n        return effectiveRate(interestRate).divfV(initialInterestRate, exchangeRateONE);\\n    }\\n\\n    function currentYield() private returns (uint256) {\\n        return currentYield(updateInterestRate());\\n    }\\n\\n    function currentYieldStored() private view returns (uint256) {\\n        return currentYield(currentInterestRate());\\n    }\\n\\n    function estimatedYield() private returns (uint256) {\\n        return estimatedYield(currentYield());\\n    }\\n\\n    function estimatedYieldStored() private view returns (uint256) {\\n        return estimatedYield(currentYieldStored());\\n    }\\n\\n    /// @dev Calculates estimated yield at maturity\\n    /// @notice Includes principal, so in case of 5% yield it returns 1.05\\n    /// @param yieldCurrent Current yield - since beginning of the pool\\n    /// @return Estimated yield at maturity relative to 1, such as 1.05 (+5%) or 0.97 (-3%)\\n    function estimatedYield(uint256 yieldCurrent) private view returns (uint256) {\\n        if (matured()) {\\n            return yieldCurrent;\\n        }\\n        uint256 currentTime = block.timestamp;\\n        uint256 timeToMaturity;\\n        uint256 poolDuration;\\n        unchecked {\\n            timeToMaturity = (maturityTime > currentTime) ? (maturityTime - currentTime) : 0;\\n            poolDuration = maturityTime - startTime;\\n        }\\n        uint256 timeLeft = timeToMaturity.divfV(poolDuration, exchangeRateONE);\\n\\n        return yieldCurrent + timeLeft.mulfV(initialEstimatedYield, exchangeRateONE);\\n    }\\n\\n    /// pricePerYield = currentYield * (estimatedYield - 1) / (estimatedYield)\\n    /// Return value decimal precision in backing token precision\\n    function pricePerYieldShare(uint256 currYield, uint256 estYield) private view returns (uint256) {\\n        uint one = exchangeRateONE;\\n        // in case we have estimate for negative yield\\n        if (estYield < one) {\\n            return uint256(0);\\n        }\\n        uint256 yieldPrice = (estYield - one).mulfV(currYield, one).divfV(estYield, one);\\n        return interestRateToSharePrice(yieldPrice);\\n    }\\n\\n    /// pricePerPrincipal = currentYield / estimatedYield\\n    /// Return value decimal precision in backing token precision\\n    function pricePerPrincipalShare(uint256 currYield, uint256 estYield) private view returns (uint256) {\\n        // in case we have estimate for negative yield\\n        if (estYield < exchangeRateONE) {\\n            return interestRateToSharePrice(currYield);\\n        }\\n        uint256 principalPrice = currYield.divfV(estYield, exchangeRateONE);\\n        return interestRateToSharePrice(principalPrice);\\n    }\\n\\n    function pricePerYieldShare() external override returns (uint256) {\\n        return pricePerYieldShare(currentYield(), estimatedYield());\\n    }\\n\\n    function pricePerYieldShareStored() external view override returns (uint256) {\\n        return pricePerYieldShare(currentYieldStored(), estimatedYieldStored());\\n    }\\n\\n    function pricePerPrincipalShare() external override returns (uint256) {\\n        return pricePerPrincipalShare(currentYield(), estimatedYield());\\n    }\\n\\n    function pricePerPrincipalShareStored() external view override returns (uint256) {\\n        return pricePerPrincipalShare(currentYieldStored(), estimatedYieldStored());\\n    }\\n\\n    function numSharesToMint(uint256 depositedBT, uint256 currentRate) private view returns (uint256) {\\n        return (depositedBT * initialInterestRate) / currentRate;\\n    }\\n\\n    function estimatedMintedShares(uint256 amount, bool isBackingToken) external view override returns (uint256) {\\n        uint256 currentRate = currentInterestRate();\\n        uint256 depositedBT = isBackingToken ? amount : numAssetsPerYieldToken(amount, currentRate);\\n        return numSharesToMint(depositedBT, currentRate);\\n    }\\n\\n    function estimatedRedeem(\\n        uint256 principals,\\n        uint256 yields,\\n        bool toBackingToken\\n    ) external view override returns (uint256) {\\n        uint256 currentRate = currentInterestRate();\\n        (uint256 yieldTokens, uint256 backingTokens, , ) = getRedemptionAmounts(principals, yields, currentRate);\\n        return toBackingToken ? backingTokens : yieldTokens;\\n    }\\n\\n    /// @dev This updates the internal tracking of negative yield periods,\\n    ///      and returns the current status of maturity and interest rates.\\n    function validateInterestRate(uint256 rate) private returns (bool hasMatured, bool hasNegativeYield) {\\n        // Short circuit. No need for the below after maturity.\\n        if (matured()) {\\n            return (true, rate < initialInterestRate);\\n        }\\n\\n        if (rate >= initialInterestRate) {\\n            // Reset period.\\n            negativeYieldStartTime = 0;\\n            return (false, false);\\n        }\\n\\n        if (negativeYieldStartTime == 0) {\\n            // Entering a negative yield period.\\n            negativeYieldStartTime = block.timestamp;\\n            return (false, true);\\n        }\\n\\n        if ((negativeYieldStartTime + maximumNegativeYieldDuration) <= block.timestamp) {\\n            // Already in a negative yield period, exceeding the duration.\\n            exceptionalHaltTime = block.timestamp;\\n            // It is considered matured now because exceptionalHaltTime is set.\\n            assert(matured());\\n            return (true, true);\\n        }\\n\\n        // Already in negative yield period, but not for long enough.\\n        return (false, true);\\n    }\\n\\n    /// @dev This updates the underlying pool's interest rate\\n    ///      It should be done first thing before deposit/redeem to avoid arbitrage\\n    /// @return Updated current Interest Rate, decimal precision depends on specific TempusPool implementation\\n    function updateInterestRate() internal virtual returns (uint256);\\n\\n    /// @dev This returns the stored Interest Rate of the YBT (Yield Bearing Token) pool\\n    ///      it is safe to call this after updateInterestRate() was called\\n    /// @return Stored Interest Rate, decimal precision depends on specific TempusPool implementation\\n    function currentInterestRate() public view virtual override returns (uint256);\\n\\n    function numYieldTokensPerAsset(uint backingTokens, uint interestRate) public view virtual override returns (uint);\\n\\n    function numAssetsPerYieldToken(uint yieldTokens, uint interestRate) public view virtual override returns (uint);\\n\\n    /// @return Converts an interest rate decimal into a Principal/Yield Share decimal\\n    function interestRateToSharePrice(uint interestRate) internal view virtual returns (uint);\\n}\\n\"\r\n    },\r\n    \"contracts/protocols/lido/ILido.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: GPL-3.0\\npragma solidity 0.8.10;\\n\\nimport \\\"@openzeppelin/contracts/token/ERC20/IERC20.sol\\\";\\nimport \\\"@openzeppelin/contracts/token/ERC20/extensions/IERC20Metadata.sol\\\";\\n\\ninterface ILido is IERC20, IERC20Metadata {\\n    /**\\n     * @notice Send funds to the pool with optional _referral parameter\\n     * @dev This function is alternative way to submit funds. Supports optional referral address.\\n     * @return Amount of StETH shares generated\\n     */\\n    function submit(address _referral) external payable returns (uint256);\\n\\n    /**\\n     * @return the amount of shares that corresponds to `_ethAmount` protocol-controlled Ether.\\n     */\\n    function getSharesByPooledEth(uint256 _ethAmount) external view returns (uint256);\\n\\n    /**\\n     * @return the amount of Ether that corresponds to `_sharesAmount` token shares.\\n     */\\n    function getPooledEthByShares(uint256 _sharesAmount) external view returns (uint256);\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/security/ReentrancyGuard.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Contract module that helps prevent reentrant calls to a function.\\n *\\n * Inheriting from `ReentrancyGuard` will make the {nonReentrant} modifier\\n * available, which can be applied to functions to make sure there are no nested\\n * (reentrant) calls to them.\\n *\\n * Note that because there is a single `nonReentrant` guard, functions marked as\\n * `nonReentrant` may not call one another. This can be worked around by making\\n * those functions `private`, and then adding `external` `nonReentrant` entry\\n * points to them.\\n *\\n * TIP: If you would like to learn more about reentrancy and alternative ways\\n * to protect against it, check out our blog post\\n * https://blog.openzeppelin.com/reentrancy-after-istanbul/[Reentrancy After Istanbul].\\n */\\nabstract contract ReentrancyGuard {\\n    // Booleans are more expensive than uint256 or any type that takes up a full\\n    // word because each write operation emits an extra SLOAD to first read the\\n    // slot's contents, replace the bits taken up by the boolean, and then write\\n    // back. This is the compiler's defense against contract upgrades and\\n    // pointer aliasing, and it cannot be disabled.\\n\\n    // The values being non-zero value makes deployment a bit more expensive,\\n    // but in exchange the refund on every call to nonReentrant will be lower in\\n    // amount. Since refunds are capped to a percentage of the total\\n    // transaction's gas, it is best to keep them low in cases like this one, to\\n    // increase the likelihood of the full refund coming into effect.\\n    uint256 private constant _NOT_ENTERED = 1;\\n    uint256 private constant _ENTERED = 2;\\n\\n    uint256 private _status;\\n\\n    constructor() {\\n        _status = _NOT_ENTERED;\\n    }\\n\\n    /**\\n     * @dev Prevents a contract from calling itself, directly or indirectly.\\n     * Calling a `nonReentrant` function from another `nonReentrant`\\n     * function is not supported. It is possible to prevent this from happening\\n     * by making the `nonReentrant` function external, and make it call a\\n     * `private` function that does the actual work.\\n     */\\n    modifier nonReentrant() {\\n        // On the first call to nonReentrant, _notEntered will be true\\n        require(_status != _ENTERED, \\\"ReentrancyGuard: reentrant call\\\");\\n\\n        // Any calls to nonReentrant after this point will fail\\n        _status = _ENTERED;\\n\\n        _;\\n\\n        // By storing the original value once again, a refund is triggered (see\\n        // https://eips.ethereum.org/EIPS/eip-2200)\\n        _status = _NOT_ENTERED;\\n    }\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/token/ERC20/IERC20.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC20 standard as defined in the EIP.\\n */\\ninterface IERC20 {\\n    /**\\n     * @dev Returns the amount of tokens in existence.\\n     */\\n    function totalSupply() external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the amount of tokens owned by `account`.\\n     */\\n    function balanceOf(address account) external view returns (uint256);\\n\\n    /**\\n     * @dev Moves `amount` tokens from the caller's account to `recipient`.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transfer(address recipient, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Returns the remaining number of tokens that `spender` will be\\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\\n     * zero by default.\\n     *\\n     * This value changes when {approve} or {transferFrom} are called.\\n     */\\n    function allowance(address owner, address spender) external view returns (uint256);\\n\\n    /**\\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\\n     * that someone may use both the old and the new allowance by unfortunate\\n     * transaction ordering. One possible solution to mitigate this race\\n     * condition is to first reduce the spender's allowance to 0 and set the\\n     * desired value afterwards:\\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address spender, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Moves `amount` tokens from `sender` to `recipient` using the\\n     * allowance mechanism. `amount` is then deducted from the caller's\\n     * allowance.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(\\n        address sender,\\n        address recipient,\\n        uint256 amount\\n    ) external returns (bool);\\n\\n    /**\\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\\n     * another (`to`).\\n     *\\n     * Note that `value` may be zero.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 value);\\n\\n    /**\\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\\n     * a call to {approve}. `value` is the new allowance.\\n     */\\n    event Approval(address indexed owner, address indexed spender, uint256 value);\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/token/ERC20/extensions/IERC20Metadata.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../IERC20.sol\\\";\\n\\n/**\\n * @dev Interface for the optional metadata functions from the ERC20 standard.\\n *\\n * _Available since v4.1._\\n */\\ninterface IERC20Metadata is IERC20 {\\n    /**\\n     * @dev Returns the name of the token.\\n     */\\n    function name() external view returns (string memory);\\n\\n    /**\\n     * @dev Returns the symbol of the token.\\n     */\\n    function symbol() external view returns (string memory);\\n\\n    /**\\n     * @dev Returns the decimals places of the token.\\n     */\\n    function decimals() external view returns (uint8);\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../IERC20.sol\\\";\\nimport \\\"../../../utils/Address.sol\\\";\\n\\n/**\\n * @title SafeERC20\\n * @dev Wrappers around ERC20 operations that throw on failure (when the token\\n * contract returns false). Tokens that return no value (and instead revert or\\n * throw on failure) are also supported, non-reverting calls are assumed to be\\n * successful.\\n * To use this library you can add a `using SafeERC20 for IERC20;` statement to your contract,\\n * which allows you to call the safe operations as `token.safeTransfer(...)`, etc.\\n */\\nlibrary SafeERC20 {\\n    using Address for address;\\n\\n    function safeTransfer(\\n        IERC20 token,\\n        address to,\\n        uint256 value\\n    ) internal {\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.transfer.selector, to, value));\\n    }\\n\\n    function safeTransferFrom(\\n        IERC20 token,\\n        address from,\\n        address to,\\n        uint256 value\\n    ) internal {\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.transferFrom.selector, from, to, value));\\n    }\\n\\n    /**\\n     * @dev Deprecated. This function has issues similar to the ones found in\\n     * {IERC20-approve}, and its usage is discouraged.\\n     *\\n     * Whenever possible, use {safeIncreaseAllowance} and\\n     * {safeDecreaseAllowance} instead.\\n     */\\n    function safeApprove(\\n        IERC20 token,\\n        address spender,\\n        uint256 value\\n    ) internal {\\n        // safeApprove should only be called when setting an initial allowance,\\n        // or when resetting it to zero. To increase and decrease it, use\\n        // 'safeIncreaseAllowance' and 'safeDecreaseAllowance'\\n        require(\\n            (value == 0) || (token.allowance(address(this), spender) == 0),\\n            \\\"SafeERC20: approve from non-zero to non-zero allowance\\\"\\n        );\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, value));\\n    }\\n\\n    function safeIncreaseAllowance(\\n        IERC20 token,\\n        address spender,\\n        uint256 value\\n    ) internal {\\n        uint256 newAllowance = token.allowance(address(this), spender) + value;\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));\\n    }\\n\\n    function safeDecreaseAllowance(\\n        IERC20 token,\\n        address spender,\\n        uint256 value\\n    ) internal {\\n        unchecked {\\n            uint256 oldAllowance = token.allowance(address(this), spender);\\n            require(oldAllowance >= value, \\\"SafeERC20: decreased allowance below zero\\\");\\n            uint256 newAllowance = oldAllowance - value;\\n            _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));\\n        }\\n    }\\n\\n    /**\\n     * @dev Imitates a Solidity high-level call (i.e. a regular function call to a contract), relaxing the requirement\\n     * on the return value: the return value is optional (but if data is returned, it must not be false).\\n     * @param token The token targeted by the call.\\n     * @param data The call data (encoded using abi.encode or one of its variants).\\n     */\\n    function _callOptionalReturn(IERC20 token, bytes memory data) private {\\n        // We need to perform a low level call here, to bypass Solidity's return data size checking mechanism, since\\n        // we're implementing it ourselves. We use {Address.functionCall} to perform this call, which verifies that\\n        // the target address contains contract code and also asserts for success in the low-level call.\\n\\n        bytes memory returndata = address(token).functionCall(data, \\\"SafeERC20: low-level call failed\\\");\\n        if (returndata.length > 0) {\\n            // Return data is optional\\n            require(abi.decode(returndata, (bool)), \\\"SafeERC20: ERC20 operation did not succeed\\\");\\n        }\\n    }\\n}\\n\"\r\n    },\r\n    \"contracts/ITempusPool.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: BUSL-1.1\\npragma solidity >=0.7.6 <0.9.0;\\npragma abicoder v2;\\n\\nimport \\\"./token/IPoolShare.sol\\\";\\nimport \\\"./utils/IOwnable.sol\\\";\\nimport \\\"./utils/IVersioned.sol\\\";\\n\\n/// Setting and transferring of fees are restricted to the owner.\\ninterface ITempusFees is IOwnable {\\n    /// The fees are in terms of yield bearing token (YBT).\\n    struct FeesConfig {\\n        uint256 depositPercent;\\n        uint256 earlyRedeemPercent;\\n        uint256 matureRedeemPercent;\\n    }\\n\\n    /// Returns the current fee configuration.\\n    function getFeesConfig() external view returns (FeesConfig memory);\\n\\n    /// Replace the current fee configuration with a new one.\\n    /// By default all the fees are expected to be set to zero.\\n    /// @notice This function can only be called by the owner.\\n    function setFeesConfig(FeesConfig calldata newFeesConfig) external;\\n\\n    /// @return Maximum possible fee percentage that can be set for deposit\\n    function maxDepositFee() external view returns (uint256);\\n\\n    /// @return Maximum possible fee percentage that can be set for early redeem\\n    function maxEarlyRedeemFee() external view returns (uint256);\\n\\n    /// @return Maximum possible fee percentage that can be set for mature redeem\\n    function maxMatureRedeemFee() external view returns (uint256);\\n\\n    /// Accumulated fees available for withdrawal.\\n    function totalFees() external view returns (uint256);\\n\\n    /// Transfers accumulated Yield Bearing Token (YBT) fees\\n    /// from this pool contract to `recipient`.\\n    /// @param recipient Address which will receive the specified amount of YBT\\n    /// @notice This function can only be called by the owner.\\n    function transferFees(address recipient) external;\\n}\\n\\n/// All state changing operations are restricted to the controller.\\ninterface ITempusPool is ITempusFees, IVersioned {\\n    /// @return The name of underlying protocol, for example \\\"Aave\\\" for Aave protocol\\n    function protocolName() external view returns (bytes32);\\n\\n    /// This token will be used as a token that user can deposit to mint same amounts\\n    /// of principal and interest shares.\\n    /// @return The underlying yield bearing token.\\n    function yieldBearingToken() external view returns (address);\\n\\n    /// This is the address of the actual backing asset token\\n    /// in the case of ETH, this address will be 0\\n    /// @return Address of the Backing Token\\n    function backingToken() external view returns (address);\\n\\n    /// @return uint256 value of one backing token, in case of 18 decimals 1e18\\n    function backingTokenONE() external view returns (uint256);\\n\\n    /// @return This TempusPool's Tempus Principal Share (TPS)\\n    function principalShare() external view returns (IPoolShare);\\n\\n    /// @return This TempusPool's Tempus Yield Share (TYS)\\n    function yieldShare() external view returns (IPoolShare);\\n\\n    /// @return The TempusController address that is authorized to perform restricted actions\\n    function controller() external view returns (address);\\n\\n    /// @return Start time of the pool.\\n    function startTime() external view returns (uint256);\\n\\n    /// @return Maturity time of the pool.\\n    function maturityTime() external view returns (uint256);\\n\\n    /// @return Time of exceptional halting of the pool.\\n    /// In case the pool is still in operation, this must return type(uint256).max.\\n    function exceptionalHaltTime() external view returns (uint256);\\n\\n    /// @return The maximum allowed time (in seconds) to pass with negative yield.\\n    function maximumNegativeYieldDuration() external view returns (uint256);\\n\\n    /// @return True if maturity has been reached and the pool was finalized.\\n    ///         This also includes the case when maturity was triggered due to\\n    ///         exceptional conditions (negative yield periods).\\n    function matured() external view returns (bool);\\n\\n    /// Finalizes the pool. This can only happen on or after `maturityTime`.\\n    /// Once finalized depositing is not possible anymore, and the behaviour\\n    /// redemption will change.\\n    ///\\n    /// Can be called by anyone and can be called multiple times.\\n    function finalize() external;\\n\\n    /// Yield bearing tokens deposit hook.\\n    /// @notice Deposit will fail if maturity has been reached.\\n    /// @notice This function can only be called by TempusController\\n    /// @notice This function assumes funds were already transferred to the TempusPool from the TempusController\\n    /// @param yieldTokenAmount Amount of yield bearing tokens to deposit in YieldToken decimal precision\\n    /// @param recipient Address which will receive Tempus Principal Shares (TPS) and Tempus Yield Shares (TYS)\\n    /// @return mintedShares Amount of TPS and TYS minted to `recipient`\\n    /// @return depositedBT The YBT value deposited, denominated as Backing Tokens\\n    /// @return fee The fee which was deducted (in terms of YBT)\\n    /// @return rate The interest rate at the time of the deposit\\n    function onDepositYieldBearing(uint256 yieldTokenAmount, address recipient)\\n        external\\n        returns (\\n            uint256 mintedShares,\\n            uint256 depositedBT,\\n            uint256 fee,\\n            uint256 rate\\n        );\\n\\n    /// Backing tokens deposit hook.\\n    /// @notice Deposit will fail if maturity has been reached.\\n    /// @notice This function can only be called by TempusController\\n    /// @notice This function assumes funds were already transferred to the TempusPool from the TempusController\\n    /// @param backingTokenAmount amount of Backing Tokens to be deposited to underlying protocol in BackingToken decimal precision\\n    /// @param recipient Address which will receive Tempus Principal Shares (TPS) and Tempus Yield Shares (TYS)\\n    /// @return mintedShares Amount of TPS and TYS minted to `recipient`\\n    /// @return depositedYBT The BT value deposited, denominated as Yield Bearing Tokens\\n    /// @return fee The fee which was deducted (in terms of YBT)\\n    /// @return rate The interest rate at the time of the deposit\\n    function onDepositBacking(uint256 backingTokenAmount, address recipient)\\n        external\\n        payable\\n        returns (\\n            uint256 mintedShares,\\n            uint256 depositedYBT,\\n            uint256 fee,\\n            uint256 rate\\n        );\\n\\n    /// Redeems yield bearing tokens from this TempusPool\\n    ///      msg.sender will receive the YBT\\n    ///      NOTE #1 Before maturity, principalAmount must equal to yieldAmount.\\n    ///      NOTE #2 This function can only be called by TempusController\\n    /// @param from Address to redeem its Tempus Shares\\n    /// @param principalAmount Amount of Tempus Principal Shares (TPS) to redeem for YBT in PrincipalShare decimal precision\\n    /// @param yieldAmount Amount of Tempus Yield Shares (TYS) to redeem for YBT in YieldShare decimal precision\\n    /// @param recipient Address to which redeemed YBT will be sent\\n    /// @return redeemableYieldTokens Amount of Yield Bearing Tokens redeemed to `recipient`\\n    /// @return fee The fee which was deducted (in terms of YBT)\\n    /// @return rate The interest rate at the time of the redemption\\n    function redeem(\\n        address from,\\n        uint256 principalAmount,\\n        uint256 yieldAmount,\\n        address recipient\\n    )\\n        external\\n        returns (\\n            uint256 redeemableYieldTokens,\\n            uint256 fee,\\n            uint256 rate\\n        );\\n\\n    /// Redeems TPS+TYS held by msg.sender into backing tokens\\n    ///      `msg.sender` must approve TPS and TYS amounts to this TempusPool.\\n    ///      `msg.sender` will receive the backing tokens\\n    ///      NOTE #1 Before maturity, principalAmount must equal to yieldAmount.\\n    ///      NOTE #2 This function can only be called by TempusController\\n    /// @param from Address to redeem its Tempus Shares\\n    /// @param principalAmount Amount of Tempus Principal Shares (TPS) to redeem in PrincipalShare decimal precision\\n    /// @param yieldAmount Amount of Tempus Yield Shares (TYS) to redeem in YieldShare decimal precision\\n    /// @param recipient Address to which redeemed BT will be sent\\n    /// @return redeemableYieldTokens Amount of Backing Tokens redeemed to `recipient`, denominated in YBT\\n    /// @return redeemableBackingTokens Amount of Backing Tokens redeemed to `recipient`\\n    /// @return fee The fee which was deducted (in terms of YBT)\\n    /// @return rate The interest rate at the time of the redemption\\n    function redeemToBacking(\\n        address from,\\n        uint256 principalAmount,\\n        uint256 yieldAmount,\\n        address recipient\\n    )\\n        external\\n        payable\\n        returns (\\n            uint256 redeemableYieldTokens,\\n            uint256 redeemableBackingTokens,\\n            uint256 fee,\\n            uint256 rate\\n        );\\n\\n    /// Gets the estimated amount of Principals and Yields after a successful deposit\\n    /// @param amount Amount of BackingTokens or YieldBearingTokens that would be deposited\\n    /// @param isBackingToken If true, @param amount is in BackingTokens, otherwise YieldBearingTokens\\n    /// @return Amount of Principals (TPS) and Yields (TYS) in Principal/YieldShare decimal precision\\n    ///         TPS and TYS are minted in 1:1 ratio, hence a single return value.\\n    function estimatedMintedShares(uint256 amount, bool isBackingToken) external view returns (uint256);\\n\\n    /// Gets the estimated amount of YieldBearingTokens or BackingTokens received when calling `redeemXXX()` functions\\n    /// @param principals Amount of Principals (TPS) in PrincipalShare decimal precision\\n    /// @param yields Amount of Yields (TYS) in YieldShare decimal precision\\n    /// @param toBackingToken If true, redeem amount is estimated in BackingTokens instead of YieldBearingTokens\\n    /// @return Amount of YieldBearingTokens or BackingTokens in YBT/BT decimal precision\\n    function estimatedRedeem(\\n        uint256 principals,\\n        uint256 yields,\\n        bool toBackingToken\\n    ) external view returns (uint256);\\n\\n    /// @dev This returns the stored Interest Rate of the YBT (Yield Bearing Token) pool\\n    ///      it is safe to call this after updateInterestRate() was called\\n    /// @return Stored Interest Rate, decimal precision depends on specific TempusPool implementation\\n    function currentInterestRate() external view returns (uint256);\\n\\n    /// @return Initial interest rate of the underlying pool,\\n    ///         decimal precision depends on specific TempusPool implementation\\n    function initialInterestRate() external view returns (uint256);\\n\\n    /// @return Interest rate at maturity of the underlying pool (or 0 if maturity not reached yet)\\n    ///         decimal precision depends on specific TempusPool implementation\\n    function maturityInterestRate() external view returns (uint256);\\n\\n    /// @return Rate of one Tempus Yield Share expressed in Asset Tokens\\n    function pricePerYieldShare() external returns (uint256);\\n\\n    /// @return Rate of one Tempus Principal Share expressed in Asset Tokens\\n    function pricePerPrincipalShare() external returns (uint256);\\n\\n    /// Calculated with stored interest rates\\n    /// @return Rate of one Tempus Yield Share expressed in Asset Tokens,\\n    function pricePerYieldShareStored() external view returns (uint256);\\n\\n    /// Calculated with stored interest rates\\n    /// @return Rate of one Tempus Principal Share expressed in Asset Tokens\\n    function pricePerPrincipalShareStored() external view returns (uint256);\\n\\n    /// @dev This returns actual Backing Token amount for amount of YBT (Yield Bearing Tokens)\\n    ///      For example, in case of Aave and Lido the result is 1:1,\\n    ///      and for compound is `yieldTokens * currentInterestRate`\\n    /// @param yieldTokens Amount of YBT in YBT decimal precision\\n    /// @param interestRate The current interest rate\\n    /// @return Amount of Backing Tokens for specified @param yieldTokens\\n    function numAssetsPerYieldToken(uint yieldTokens, uint interestRate) external view returns (uint);\\n\\n    /// @dev This returns amount of YBT (Yield Bearing Tokens) that can be converted\\n    ///      from @param backingTokens Backing Tokens\\n    /// @param backingTokens Amount of Backing Tokens in BT decimal precision\\n    /// @param interestRate The current interest rate\\n    /// @return Amount of YBT for specified @param backingTokens\\n    function numYieldTokensPerAsset(uint backingTokens, uint interestRate) external view returns (uint);\\n}\\n\"\r\n    },\r\n    \"contracts/token/PrincipalShare.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: BUSL-1.1\\npragma solidity 0.8.10;\\n\\nimport \\\"./PoolShare.sol\\\";\\n\\n/// @dev Token representing the principal shares of a pool.\\ncontract PrincipalShare is PoolShare {\\n    constructor(\\n        ITempusPool _pool,\\n        string memory name,\\n        string memory symbol,\\n        uint8 decimals\\n    ) PoolShare(ShareKind.Principal, _pool, name, symbol, decimals) {}\\n\\n    // solhint-disable-previous-line no-empty-blocks\\n\\n    function getPricePerFullShare() external override returns (uint256) {\\n        return pool.pricePerPrincipalShare();\\n    }\\n\\n    function getPricePerFullShareStored() external view override returns (uint256) {\\n        return pool.pricePerPrincipalShareStored();\\n    }\\n}\\n\"\r\n    },\r\n    \"contracts/token/YieldShare.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: BUSL-1.1\\npragma solidity 0.8.10;\\n\\nimport \\\"./PoolShare.sol\\\";\\n\\n/// @dev Token representing the yield shares of a pool.\\ncontract YieldShare is PoolShare {\\n    constructor(\\n        ITempusPool _pool,\\n        string memory name,\\n        string memory symbol,\\n        uint8 decimals\\n    ) PoolShare(ShareKind.Yield, _pool, name, symbol, decimals) {}\\n\\n    // solhint-disable-previous-line no-empty-blocks\\n\\n    function getPricePerFullShare() external override returns (uint256) {\\n        return pool.pricePerYieldShare();\\n    }\\n\\n    function getPricePerFullShareStored() external view override returns (uint256) {\\n        return pool.pricePerYieldShareStored();\\n    }\\n}\\n\"\r\n    },\r\n    \"contracts/math/Fixed256xVar.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\npragma solidity 0.8.10;\\n\\n/// @dev Fixed Point decimal math utils for variable decimal point precision\\n///      on 256-bit wide numbers\\nlibrary Fixed256xVar {\\n    /// @dev Multiplies two variable precision fixed point decimal numbers\\n    /// @param one 1.0 expressed in the base precision of `a` and `b`\\n    /// @return result = a * b\\n    function mulfV(\\n        uint256 a,\\n        uint256 b,\\n        uint256 one\\n    ) internal pure returns (uint256) {\\n        // result is always truncated\\n        return (a * b) / one;\\n    }\\n\\n    /// @dev Divides two variable precision fixed point decimal numbers\\n    /// @param one 1.0 expressed in the base precision of `a` and `b`\\n    /// @return result = a / b\\n    function divfV(\\n        uint256 a,\\n        uint256 b,\\n        uint256 one\\n    ) internal pure returns (uint256) {\\n        // result is always truncated\\n        return (a * one) / b;\\n    }\\n}\\n\"\r\n    },\r\n    \"contracts/utils/Ownable.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\npragma solidity 0.8.10;\\n\\nimport \\\"./IOwnable.sol\\\";\\n\\n/// Implements Ownable with a two step transfer of ownership\\nabstract contract Ownable is IOwnable {\\n    address private _owner;\\n    address private _proposedOwner;\\n\\n    /**\\n     * @dev Initializes the contract setting the deployer as the initial owner.\\n     */\\n    constructor() {\\n        _setOwner(msg.sender);\\n    }\\n\\n    /**\\n     * @dev Returns the address of the current owner.\\n     */\\n    function owner() public view virtual override returns (address) {\\n        return _owner;\\n    }\\n\\n    /**\\n     * @dev Throws if called by any account other than the owner.\\n     */\\n    modifier onlyOwner() {\\n        require(owner() == msg.sender, \\\"Ownable: caller is not the owner\\\");\\n        _;\\n    }\\n\\n    /**\\n     * @dev Proposes a transfer of ownership of the contract to a new account (`newOwner`).\\n     * Can only be called by the current owner.\\n     */\\n    function transferOwnership(address newOwner) public virtual override onlyOwner {\\n        require(newOwner != address(0), \\\"Ownable: new owner is the zero address\\\");\\n        _proposedOwner = newOwner;\\n        emit OwnershipProposed(_owner, _proposedOwner);\\n    }\\n\\n    /**\\n     * @dev Accepts ownership of the contract by a proposed account.\\n     * Can only be called by the proposed owner.\\n     */\\n    function acceptOwnership() public virtual override {\\n        require(msg.sender == _proposedOwner, \\\"Ownable: Only proposed owner can accept ownership\\\");\\n        _setOwner(_proposedOwner);\\n        _proposedOwner = address(0);\\n    }\\n\\n    function _setOwner(address newOwner) private {\\n        address oldOwner = _owner;\\n        _owner = newOwner;\\n        emit OwnershipTransferred(oldOwner, newOwner);\\n    }\\n}\\n\"\r\n    },\r\n    \"contracts/utils/UntrustedERC20.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\npragma solidity 0.8.10;\\n\\nimport \\\"@openzeppelin/contracts/token/ERC20/IERC20.sol\\\";\\nimport \\\"@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol\\\";\\n\\n/// @title UntrustedERC20\\n/// @dev Wrappers around ERC20 transfer operators that return the actual amount\\n/// transferred. This means they are usable with tokens, which charge a fee or royalty on transfer.\\nlibrary UntrustedERC20 {\\n    using SafeERC20 for IERC20;\\n\\n    /// Transfer tokens to a recipient.\\n    /// @param token The ERC20 token.\\n    /// @param to The recipient.\\n    /// @param value The requested amount.\\n    /// @return The actual amount of tokens transferred.\\n    function untrustedTransfer(\\n        IERC20 token,\\n        address to,\\n        uint256 value\\n    ) internal returns (uint256) {\\n        uint256 startBalance = token.balanceOf(to);\\n        token.safeTransfer(to, value);\\n        return token.balanceOf(to) - startBalance;\\n    }\\n\\n    /// Transfer tokens to a recipient.\\n    /// @param token The ERC20 token.\\n    /// @param from The sender.\\n    /// @param to The recipient.\\n    /// @param value The requested amount.\\n    /// @return The actual amount of tokens transferred.\\n    function untrustedTransferFrom(\\n        IERC20 token,\\n        address from,\\n        address to,\\n        uint256 value\\n    ) internal returns (uint256) {\\n        uint256 startBalance = token.balanceOf(to);\\n        token.safeTransferFrom(from, to, value);\\n        return token.balanceOf(to) - startBalance;\\n    }\\n}\\n\"\r\n    },\r\n    \"contracts/utils/Versioned.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\npragma solidity >=0.7.6 <0.9.0;\\n\\nimport \\\"./IVersioned.sol\\\";\\n\\n/// Implements versioning\\nabstract contract Versioned is IVersioned {\\n    uint16 private immutable _major;\\n    uint16 private immutable _minor;\\n    uint16 private immutable _patch;\\n\\n    constructor(\\n        uint16 major,\\n        uint16 minor,\\n        uint16 patch\\n    ) {\\n        _major = major;\\n        _minor = minor;\\n        _patch = patch;\\n    }\\n\\n    function version() external view returns (Version memory) {\\n        return Version(_major, _minor, _patch);\\n    }\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/utils/Address.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Collection of functions related to the address type\\n */\\nlibrary Address {\\n    /**\\n     * @dev Returns true if `account` is a contract.\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * It is unsafe to assume that an address for which this function returns\\n     * false is an externally-owned account (EOA) and not a contract.\\n     *\\n     * Among others, `isContract` will return false for the following\\n     * types of addresses:\\n     *\\n     *  - an externally-owned account\\n     *  - a contract in construction\\n     *  - an address where a contract will be created\\n     *  - an address where a contract lived, but was destroyed\\n     * ====\\n     */\\n    function isContract(address account) internal view returns (bool) {\\n        // This method relies on extcodesize, which returns 0 for contracts in\\n        // construction, since the code is only stored at the end of the\\n        // constructor execution.\\n\\n        uint256 size;\\n        assembly {\\n            size := extcodesize(account)\\n        }\\n        return size > 0;\\n    }\\n\\n    /**\\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\\n     * `recipient`, forwarding all available gas and reverting on errors.\\n     *\\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\\n     * imposed by `transfer`, making them unable to receive funds via\\n     * `transfer`. {sendValue} removes this limitation.\\n     *\\n     * https://diligence.consensys.net/posts/2019/09/stop-using-soliditys-transfer-now/[Learn more].\\n     *\\n     * IMPORTANT: because control is transferred to `recipient`, care must be\\n     * taken to not create reentrancy vulnerabilities. Consider using\\n     * {ReentrancyGuard} or the\\n     * https://solidity.readthedocs.io/en/v0.5.11/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\\n     */\\n    function sendValue(address payable recipient, uint256 amount) internal {\\n        require(address(this).balance >= amount, \\\"Address: insufficient balance\\\");\\n\\n        (bool success, ) = recipient.call{value: amount}(\\\"\\\");\\n        require(success, \\\"Address: unable to send value, recipient may have reverted\\\");\\n    }\\n\\n    /**\\n     * @dev Performs a Solidity function call using a low level `call`. A\\n     * plain `call` is an unsafe replacement for a function call: use this\\n     * function instead.\\n     *\\n     * If `target` reverts with a revert reason, it is bubbled up by this\\n     * function (like regular Solidity function calls).\\n     *\\n     * Returns the raw returned data. To convert to the expected return value,\\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\\n     *\\n     * Requirements:\\n     *\\n     * - `target` must be a contract.\\n     * - calling `target` with `data` must not revert.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionCall(target, data, \\\"Address: low-level call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\\n     * `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, 0, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but also transferring `value` wei to `target`.\\n     *\\n     * Requirements:\\n     *\\n     * - the calling contract must have an ETH balance of at least `value`.\\n     * - the called Solidity function must be `payable`.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, value, \\\"Address: low-level call with value failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\\n     * with `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        require(address(this).balance >= value, \\\"Address: insufficient balance for call\\\");\\n        require(isContract(target), \\\"Address: call to non-contract\\\");\\n\\n        (bool success, bytes memory returndata) = target.call{value: value}(data);\\n        return _verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\\n        return functionStaticCall(target, data, \\\"Address: low-level static call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal view returns (bytes memory) {\\n        require(isContract(target), \\\"Address: static call to non-contract\\\");\\n\\n        (bool success, bytes memory returndata) = target.staticcall(data);\\n        return _verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionDelegateCall(target, data, \\\"Address: low-level delegate call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        require(isContract(target), \\\"Address: delegate call to non-contract\\\");\\n\\n        (bool success, bytes memory returndata) = target.delegatecall(data);\\n        return _verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    function _verifyCallResult(\\n        bool success,\\n        bytes memory returndata,\\n        string memory errorMessage\\n    ) private pure returns (bytes memory) {\\n        if (success) {\\n            return returndata;\\n        } else {\\n            // Look for revert reason and bubble it up if present\\n            if (returndata.length > 0) {\\n                // The easiest way to bubble the revert reason is using memory via assembly\\n\\n                assembly {\\n                    let returndata_size := mload(returndata)\\n                    revert(add(32, returndata), returndata_size)\\n                }\\n            } else {\\n                revert(errorMessage);\\n            }\\n        }\\n    }\\n}\\n\"\r\n    },\r\n    \"contracts/token/IPoolShare.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: BUSL-1.1\\npragma solidity >=0.7.6 <0.9.0;\\n\\nimport \\\"../ITempusPool.sol\\\";\\n\\n/// Interface of Tokens representing the principal or yield shares of a pool.\\ninterface IPoolShare {\\n    enum ShareKind {\\n        Principal,\\n        Yield\\n    }\\n\\n    /// @return The kind of the share.\\n    function kind() external view returns (ShareKind);\\n\\n    /// @return The pool this share is part of.\\n    function pool() external view returns (ITempusPool);\\n\\n    /// @dev Price per single share expressed in Backing Tokens of the underlying pool.\\n    ///      This is for the purpose of TempusAMM api support.\\n    ///      Example: exchanging Tempus Yield Share to DAI\\n    /// @return 1e18 decimal conversion rate per share\\n    function getPricePerFullShare() external returns (uint256);\\n\\n    /// @return 1e18 decimal stored conversion rate per share\\n    function getPricePerFullShareStored() external view returns (uint256);\\n}\\n\"\r\n    },\r\n    \"contracts/utils/IOwnable.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\npragma solidity >=0.7.6 <0.9.0;\\n\\n/// Implements Ownable with a two step transfer of ownership\\ninterface IOwnable {\\n    /**\\n     * @dev Change of ownership proposed.\\n     * @param currentOwner The current owner.\\n     * @param proposedOwner The proposed owner.\\n     */\\n    event OwnershipProposed(address indexed currentOwner, address indexed proposedOwner);\\n\\n    /**\\n     * @dev Ownership transferred.\\n     * @param previousOwner The previous owner.\\n     * @param newOwner The new owner.\\n     */\\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\\n\\n    /**\\n     * @dev Returns the address of the current owner.\\n     */\\n    function owner() external view returns (address);\\n\\n    /**\\n     * @dev Proposes a transfer of ownership of the contract to a new account (`newOwner`).\\n     * Can only be called by the current owner.\\n     */\\n    function transferOwnership(address newOwner) external;\\n\\n    /**\\n     * @dev Accepts ownership of the contract by a proposed account.\\n     * Can only be called by the proposed owner.\\n     */\\n    function acceptOwnership() external;\\n}\\n\"\r\n    },\r\n    \"contracts/utils/IVersioned.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\npragma solidity >=0.7.6 <0.9.0;\\npragma abicoder v2;\\n\\n/// Implements versioning\\ninterface IVersioned {\\n    struct Version {\\n        uint16 major;\\n        uint16 minor;\\n        uint16 patch;\\n    }\\n\\n    /// @return The version of the contract.\\n    function version() external view returns (Version memory);\\n}\\n\"\r\n    },\r\n    \"contracts/token/PoolShare.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: BUSL-1.1\\npragma solidity 0.8.10;\\n\\nimport \\\"./ERC20OwnerMintableToken.sol\\\";\\nimport \\\"../ITempusPool.sol\\\";\\n\\n/// Token representing the principal or yield shares of a pool.\\nabstract contract PoolShare is IPoolShare, ERC20OwnerMintableToken {\\n    /// The kind of the share.\\n    ShareKind public immutable override kind;\\n\\n    /// The pool this share is part of.\\n    ITempusPool public immutable override pool;\\n\\n    uint8 internal immutable tokenDecimals;\\n\\n    constructor(\\n        ShareKind _kind,\\n        ITempusPool _pool,\\n        string memory name,\\n        string memory symbol,\\n        uint8 _decimals\\n    ) ERC20OwnerMintableToken(name, symbol) {\\n        kind = _kind;\\n        pool = _pool;\\n        tokenDecimals = _decimals;\\n    }\\n\\n    function decimals() public view virtual override returns (uint8) {\\n        return tokenDecimals;\\n    }\\n}\\n\"\r\n    },\r\n    \"contracts/token/ERC20OwnerMintableToken.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\npragma solidity 0.8.10;\\n\\nimport \\\"@openzeppelin/contracts/token/ERC20/ERC20.sol\\\";\\n\\n/// This is a simplified implementation, but compatible with\\n/// OpenZeppelin's ERC20Mintable and ERC20Burnable extensions.\\ncontract ERC20OwnerMintableToken is ERC20 {\\n    /// The manager who is allowed to mint and burn.\\n    address public immutable manager;\\n\\n    constructor(string memory name, string memory symbol) ERC20(name, symbol) {\\n        manager = msg.sender;\\n    }\\n\\n    /// Creates `amount` new tokens for `to`.\\n    /// @param account Recipient address to mint tokens to\\n    /// @param amount Number of tokens to mint\\n    function mint(address account, uint256 amount) external {\\n        require(msg.sender == manager, \\\"mint: only manager can mint\\\");\\n        _mint(account, amount);\\n    }\\n\\n    /// Destroys `amount` tokens from the caller.\\n    /// @param amount Number of tokens to burn.\\n    function burn(uint256 amount) external {\\n        require(msg.sender == manager, \\\"burn: only manager can burn\\\");\\n        _burn(manager, amount);\\n    }\\n\\n    /// Destroys `amount` tokens from `account`.\\n    /// @param account Source address to burn tokens from\\n    /// @param amount Number of tokens to burn\\n    function burnFrom(address account, uint256 amount) external {\\n        require(msg.sender == manager, \\\"burn: only manager can burn\\\");\\n        _burn(account, amount);\\n    }\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/token/ERC20/ERC20.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"./IERC20.sol\\\";\\nimport \\\"./extensions/IERC20Metadata.sol\\\";\\nimport \\\"../../utils/Context.sol\\\";\\n\\n/**\\n * @dev Implementation of the {IERC20} interface.\\n *\\n * This implementation is agnostic to the way tokens are created. This means\\n * that a supply mechanism has to be added in a derived contract using {_mint}.\\n * For a generic mechanism see {ERC20PresetMinterPauser}.\\n *\\n * TIP: For a detailed writeup see our guide\\n * https://forum.zeppelin.solutions/t/how-to-implement-erc20-supply-mechanisms/226[How\\n * to implement supply mechanisms].\\n *\\n * We have followed general OpenZeppelin guidelines: functions revert instead\\n * of returning `false` on failure. This behavior is nonetheless conventional\\n * and does not conflict with the expectations of ERC20 applications.\\n *\\n * Additionally, an {Approval} event is emitted on calls to {transferFrom}.\\n * This allows applications to reconstruct the allowance for all accounts just\\n * by listening to said events. Other implementations of the EIP may not emit\\n * these events, as it isn't required by the specification.\\n *\\n * Finally, the non-standard {decreaseAllowance} and {increaseAllowance}\\n * functions have been added to mitigate the well-known issues around setting\\n * allowances. See {IERC20-approve}.\\n */\\ncontract ERC20 is Context, IERC20, IERC20Metadata {\\n    mapping(address => uint256) private _balances;\\n\\n    mapping(address => mapping(address => uint256)) private _allowances;\\n\\n    uint256 private _totalSupply;\\n\\n    string private _name;\\n    string private _symbol;\\n\\n    /**\\n     * @dev Sets the values for {name} and {symbol}.\\n     *\\n     * The default value of {decimals} is 18. To select a different value for\\n     * {decimals} you should overload it.\\n     *\\n     * All two of these values are immutable: they can only be set once during\\n     * construction.\\n     */\\n    constructor(string memory name_, string memory symbol_) {\\n        _name = name_;\\n        _symbol = symbol_;\\n    }\\n\\n    /**\\n     * @dev Returns the name of the token.\\n     */\\n    function name() public view virtual override returns (string memory) {\\n        return _name;\\n    }\\n\\n    /**\\n     * @dev Returns the symbol of the token, usually a shorter version of the\\n     * name.\\n     */\\n    function symbol() public view virtual override returns (string memory) {\\n        return _symbol;\\n    }\\n\\n    /**\\n     * @dev Returns the number of decimals used to get its user representation.\\n     * For example, if `decimals` equals `2`, a balance of `505` tokens should\\n     * be displayed to a user as `5,05` (`505 / 10 ** 2`).\\n     *\\n     * Tokens usually opt for a value of 18, imitating the relationship between\\n     * Ether and Wei. This is the value {ERC20} uses, unless this function is\\n     * overridden;\\n     *\\n     * NOTE: This information is only used for _display_ purposes: it in\\n     * no way affects any of the arithmetic of the contract, including\\n     * {IERC20-balanceOf} and {IERC20-transfer}.\\n     */\\n    function decimals() public view virtual override returns (uint8) {\\n        return 18;\\n    }\\n\\n    /**\\n     * @dev See {IERC20-totalSupply}.\\n     */\\n    function totalSupply() public view virtual override returns (uint256) {\\n        return _totalSupply;\\n    }\\n\\n    /**\\n     * @dev See {IERC20-balanceOf}.\\n     */\\n    function balanceOf(address account) public view virtual override returns (uint256) {\\n        return _balances[account];\\n    }\\n\\n    /**\\n     * @dev See {IERC20-transfer}.\\n     *\\n     * Requirements:\\n     *\\n     * - `recipient` cannot be the zero address.\\n     * - the caller must have a balance of at least `amount`.\\n     */\\n    function transfer(address recipient, uint256 amount) public virtual override returns (bool) {\\n        _transfer(_msgSender(), recipient, amount);\\n        return true;\\n    }\\n\\n    /**\\n     * @dev See {IERC20-allowance}.\\n     */\\n    function allowance(address owner, address spender) public view virtual override returns (uint256) {\\n        return _allowances[owner][spender];\\n    }\\n\\n    /**\\n     * @dev See {IERC20-approve}.\\n     *\\n     * Requirements:\\n     *\\n     * - `spender` cannot be the zero address.\\n     */\\n    function approve(address spender, uint256 amount) public virtual override returns (bool) {\\n        _approve(_msgSender(), spender, amount);\\n        return true;\\n    }\\n\\n    /**\\n     * @dev See {IERC20-transferFrom}.\\n     *\\n     * Emits an {Approval} event indicating the updated allowance. This is not\\n     * required by the EIP. See the note at the beginning of {ERC20}.\\n     *\\n     * Requirements:\\n     *\\n     * - `sender` and `recipient` cannot be the zero address.\\n     * - `sender` must have a balance of at least `amount`.\\n     * - the caller must have allowance for ``sender``'s tokens of at least\\n     * `amount`.\\n     */\\n    function transferFrom(\\n        address sender,\\n        address recipient,\\n        uint256 amount\\n    ) public virtual override returns (bool) {\\n        _transfer(sender, recipient, amount);\\n\\n        uint256 currentAllowance = _allowances[sender][_msgSender()];\\n        require(currentAllowance >= amount, \\\"ERC20: transfer amount exceeds allowance\\\");\\n        unchecked {\\n            _approve(sender, _msgSender(), currentAllowance - amount);\\n        }\\n\\n        return true;\\n    }\\n\\n    /**\\n     * @dev Atomically increases the allowance granted to `spender` by the caller.\\n     *\\n     * This is an alternative to {approve} that can be used as a mitigation for\\n     * problems described in {IERC20-approve}.\\n     *\\n     * Emits an {Approval} event indicating the updated allowance.\\n     *\\n     * Requirements:\\n     *\\n     * - `spender` cannot be the zero address.\\n     */\\n    function increaseAllowance(address spender, uint256 addedValue) public virtual returns (bool) {\\n        _approve(_msgSender(), spender, _allowances[_msgSender()][spender] + addedValue);\\n        return true;\\n    }\\n\\n    /**\\n     * @dev Atomically decreases the allowance granted to `spender` by the caller.\\n     *\\n     * This is an alternative to {approve} that can be used as a mitigation for\\n     * problems described in {IERC20-approve}.\\n     *\\n     * Emits an {Approval} event indicating the updated allowance.\\n     *\\n     * Requirements:\\n     *\\n     * - `spender` cannot be the zero address.\\n     * - `spender` must have allowance for the caller of at least\\n     * `subtractedValue`.\\n     */\\n    function decreaseAllowance(address spender, uint256 subtractedValue) public virtual returns (bool) {\\n        uint256 currentAllowance = _allowances[_msgSender()][spender];\\n        require(currentAllowance >= subtractedValue, \\\"ERC20: decreased allowance below zero\\\");\\n        unchecked {\\n            _approve(_msgSender(), spender, currentAllowance - subtractedValue);\\n        }\\n\\n        return true;\\n    }\\n\\n    /**\\n     * @dev Moves `amount` of tokens from `sender` to `recipient`.\\n     *\\n     * This internal function is equivalent to {transfer}, and can be used to\\n     * e.g. implement automatic token fees, slashing mechanisms, etc.\\n     *\\n     * Emits a {Transfer} event.\\n     *\\n     * Requirements:\\n     *\\n     * - `sender` cannot be the zero address.\\n     * - `recipient` cannot be the zero address.\\n     * - `sender` must have a balance of at least `amount`.\\n     */\\n    function _transfer(\\n        address sender,\\n        address recipient,\\n        uint256 amount\\n    ) internal virtual {\\n        require(sender != address(0), \\\"ERC20: transfer from the zero address\\\");\\n        require(recipient != address(0), \\\"ERC20: transfer to the zero address\\\");\\n\\n        _beforeTokenTransfer(sender, recipient, amount);\\n\\n        uint256 senderBalance = _balances[sender];\\n        require(senderBalance >= amount, \\\"ERC20: transfer amount exceeds balance\\\");\\n        unchecked {\\n            _balances[sender] = senderBalance - amount;\\n        }\\n        _balances[recipient] += amount;\\n\\n        emit Transfer(sender, recipient, amount);\\n\\n        _afterTokenTransfer(sender, recipient, amount);\\n    }\\n\\n    /** @dev Creates `amount` tokens and assigns them to `account`, increasing\\n     * the total supply.\\n     *\\n     * Emits a {Transfer} event with `from` set to the zero address.\\n     *\\n     * Requirements:\\n     *\\n     * - `account` cannot be the zero address.\\n     */\\n    function _mint(address account, uint256 amount) internal virtual {\\n        require(account != address(0), \\\"ERC20: mint to the zero address\\\");\\n\\n        _beforeTokenTransfer(address(0), account, amount);\\n\\n        _totalSupply += amount;\\n        _balances[account] += amount;\\n        emit Transfer(address(0), account, amount);\\n\\n        _afterTokenTransfer(address(0), account, amount);\\n    }\\n\\n    /**\\n     * @dev Destroys `amount` tokens from `account`, reducing the\\n     * total supply.\\n     *\\n     * Emits a {Transfer} event with `to` set to the zero address.\\n     *\\n     * Requirements:\\n     *\\n     * - `account` cannot be the zero address.\\n     * - `account` must have at least `amount` tokens.\\n     */\\n    function _burn(address account, uint256 amount) internal virtual {\\n        require(account != address(0), \\\"ERC20: burn from the zero address\\\");\\n\\n        _beforeTokenTransfer(account, address(0), amount);\\n\\n        uint256 accountBalance = _balances[account];\\n        require(accountBalance >= amount, \\\"ERC20: burn amount exceeds balance\\\");\\n        unchecked {\\n            _balances[account] = accountBalance - amount;\\n        }\\n        _totalSupply -= amount;\\n\\n        emit Transfer(account, address(0), amount);\\n\\n        _afterTokenTransfer(account, address(0), amount);\\n    }\\n\\n    /**\\n     * @dev Sets `amount` as the allowance of `spender` over the `owner` s tokens.\\n     *\\n     * This internal function is equivalent to `approve`, and can be used to\\n     * e.g. set automatic allowances for certain subsystems, etc.\\n     *\\n     * Emits an {Approval} event.\\n     *\\n     * Requirements:\\n     *\\n     * - `owner` cannot be the zero address.\\n     * - `spender` cannot be the zero address.\\n     */\\n    function _approve(\\n        address owner,\\n        address spender,\\n        uint256 amount\\n    ) internal virtual {\\n        require(owner != address(0), \\\"ERC20: approve from the zero address\\\");\\n        require(spender != address(0), \\\"ERC20: approve to the zero address\\\");\\n\\n        _allowances[owner][spender] = amount;\\n        emit Approval(owner, spender, amount);\\n    }\\n\\n    /**\\n     * @dev Hook that is called before any transfer of tokens. This includes\\n     * minting and burning.\\n     *\\n     * Calling conditions:\\n     *\\n     * - when `from` and `to` are both non-zero, `amount` of ``from``'s tokens\\n     * will be transferred to `to`.\\n     * - when `from` is zero, `amount` tokens will be minted for `to`.\\n     * - when `to` is zero, `amount` of ``from``'s tokens will be burned.\\n     * - `from` and `to` are never both zero.\\n     *\\n     * To learn more about hooks, head to xref:ROOT:extending-contracts.adoc#using-hooks[Using Hooks].\\n     */\\n    function _beforeTokenTransfer(\\n        address from,\\n        address to,\\n        uint256 amount\\n    ) internal virtual {}\\n\\n    /**\\n     * @dev Hook that is called after any transfer of tokens. This includes\\n     * minting and burning.\\n     *\\n     * Calling conditions:\\n     *\\n     * - when `from` and `to` are both non-zero, `amount` of ``from``'s tokens\\n     * has been transferred to `to`.\\n     * - when `from` is zero, `amount` tokens have been minted for `to`.\\n     * - when `to` is zero, `amount` of ``from``'s tokens have been burned.\\n     * - `from` and `to` are never both zero.\\n     *\\n     * To learn more about hooks, head to xref:ROOT:extending-contracts.adoc#using-hooks[Using Hooks].\\n     */\\n    function _afterTokenTransfer(\\n        address from,\\n        address to,\\n        uint256 amount\\n    ) internal virtual {}\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/utils/Context.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\n/*\\n * @dev Provides information about the current execution context, including the\\n * sender of the transaction and its data. While these are generally available\\n * via msg.sender and msg.data, they should not be accessed in such a direct\\n * manner, since when dealing with meta-transactions the account sending and\\n * paying for execution may not be the actual sender (as far as an application\\n * is concerned).\\n *\\n * This contract is only required for intermediate, library-like contracts.\\n */\\nabstract contract Context {\\n    function _msgSender() internal view virtual returns (address) {\\n        return msg.sender;\\n    }\\n\\n    function _msgData() internal view virtual returns (bytes calldata) {\\n        return msg.data;\\n    }\\n}\\n\"\r\n    }\r\n  },\r\n  \"settings\": {\r\n    \"optimizer\": {\r\n      \"enabled\": true,\r\n      \"runs\": 100000\r\n    },\r\n    \"outputSelection\": {\r\n      \"*\": {\r\n        \"*\": [\r\n          \"evm.bytecode\",\r\n          \"evm.deployedBytecode\",\r\n          \"devdoc\",\r\n          \"userdoc\",\r\n          \"metadata\",\r\n          \"abi\"\r\n        ]\r\n      }\r\n    },\r\n    \"metadata\": {\r\n      \"useLiteralContent\": true\r\n    },\r\n    \"libraries\": {}\r\n  }\r\n}}","ABI":"[{\"inputs\":[{\"internalType\":\"contract ILido\",\"name\":\"token\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"controller\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"maturity\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"estYield\",\"type\":\"uint256\"},{\"components\":[{\"internalType\":\"string\",\"name\":\"name\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"symbol\",\"type\":\"string\"}],\"internalType\":\"struct TokenData\",\"name\":\"principalsData\",\"type\":\"tuple\"},{\"components\":[{\"internalType\":\"string\",\"name\":\"name\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"symbol\",\"type\":\"string\"}],\"internalType\":\"struct TokenData\",\"name\":\"yieldsData\",\"type\":\"tuple\"},{\"components\":[{\"internalType\":\"uint256\",\"name\":\"depositPercent\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"earlyRedeemPercent\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"matureRedeemPercent\",\"type\":\"uint256\"}],\"internalType\":\"struct ITempusFees.FeesConfig\",\"name\":\"maxFeeSetup\",\"type\":\"tuple\"},{\"internalType\":\"address\",\"name\":\"referrerAddress\",\"type\":\"address\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"currentOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"proposedOwner\",\"type\":\"address\"}],\"name\":\"OwnershipProposed\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"acceptOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"backingToken\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"backingTokenONE\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"controller\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"currentInterestRate\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"internalType\":\"bool\",\"name\":\"isBackingToken\",\"type\":\"bool\"}],\"name\":\"estimatedMintedShares\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"principals\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"yields\",\"type\":\"uint256\"},{\"internalType\":\"bool\",\"name\":\"toBackingToken\",\"type\":\"bool\"}],\"name\":\"estimatedRedeem\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"exceptionalHaltTime\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"exchangeRateONE\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"finalize\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getFeesConfig\",\"outputs\":[{\"components\":[{\"internalType\":\"uint256\",\"name\":\"depositPercent\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"earlyRedeemPercent\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"matureRedeemPercent\",\"type\":\"uint256\"}],\"internalType\":\"struct ITempusFees.FeesConfig\",\"name\":\"\",\"type\":\"tuple\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"initialInterestRate\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"matured\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"maturityInterestRate\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"maturityTime\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"maxDepositFee\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"maxEarlyRedeemFee\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"maxMatureRedeemFee\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"maximumNegativeYieldDuration\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"yieldTokens\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"numAssetsPerYieldToken\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"backingTokens\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"numYieldTokensPerAsset\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"backingTokenAmount\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"recipient\",\"type\":\"address\"}],\"name\":\"onDepositBacking\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"mintedShares\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"depositedYBT\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"fee\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"rate\",\"type\":\"uint256\"}],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"yieldTokenAmount\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"recipient\",\"type\":\"address\"}],\"name\":\"onDepositYieldBearing\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"mintedShares\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"depositedBT\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"fee\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"rate\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"pricePerPrincipalShare\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"pricePerPrincipalShareStored\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"pricePerYieldShare\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"pricePerYieldShareStored\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"principalShare\",\"outputs\":[{\"internalType\":\"contract IPoolShare\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"protocolName\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"principalAmount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"yieldAmount\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"recipient\",\"type\":\"address\"}],\"name\":\"redeem\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"redeemedYieldTokens\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"fee\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"rate\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"principalAmount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"yieldAmount\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"recipient\",\"type\":\"address\"}],\"name\":\"redeemToBacking\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"redeemedYieldTokens\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"redeemedBackingTokens\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"fee\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"rate\",\"type\":\"uint256\"}],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[{\"components\":[{\"internalType\":\"uint256\",\"name\":\"depositPercent\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"earlyRedeemPercent\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"matureRedeemPercent\",\"type\":\"uint256\"}],\"internalType\":\"struct ITempusFees.FeesConfig\",\"name\":\"newFeesConfig\",\"type\":\"tuple\"}],\"name\":\"setFeesConfig\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"startTime\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalFees\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"recipient\",\"type\":\"address\"}],\"name\":\"transferFees\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"version\",\"outputs\":[{\"components\":[{\"internalType\":\"uint16\",\"name\":\"major\",\"type\":\"uint16\"},{\"internalType\":\"uint16\",\"name\":\"minor\",\"type\":\"uint16\"},{\"internalType\":\"uint16\",\"name\":\"patch\",\"type\":\"uint16\"}],\"internalType\":\"struct IVersioned.Version\",\"name\":\"\",\"type\":\"tuple\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"yieldBearingONE\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"yieldBearingToken\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"yieldShare\",\"outputs\":[{\"internalType\":\"contract IPoolShare\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"}]","ContractName":"LidoTempusPool","CompilerVersion":"v0.8.10+commit.fc410830","OptimizationUsed":"1","Runs":"100000","ConstructorArguments":"000000000000000000000000ae7ab96520de3a18e5e111b5eaab095312d7fe84000000000000000000000000db5fd0678eed82246b599da6bc36b56157e4bed8000000000000000000000000000000000000000000000000000000006245d000000000000000000000000000000000000000000000000000003351d67d5028e000000000000000000000000000000000000000000000000000000000000001400000000000000000000000000000000000000000000000000000000000000200000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000102afcf24d4c1db4639df9e255391f9e09aaa08700000000000000000000000000000000000000000000000000000000000000400000000000000000000000000000000000000000000000000000000000000080000000000000000000000000000000000000000000000000000000000000001d5450532d4c69646f207374616b6564204554482d33312d322d3230323200000000000000000000000000000000000000000000000000000000000000000000135450532d73744554482d33312d322d323032320000000000000000000000000000000000000000000000000000000000000000000000000000000000000000400000000000000000000000000000000000000000000000000000000000000080000000000000000000000000000000000000000000000000000000000000001d5459532d4c69646f207374616b6564204554482d33312d322d3230323200000000000000000000000000000000000000000000000000000000000000000000135459532d73744554482d33312d322d3230323200000000000000000000000000","EVMVersion":"Default","Library":"","LicenseType":"","Proxy":"0","Implementation":"","SwarmSource":""}]}