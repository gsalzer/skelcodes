{"status":"1","message":"OK","result":[{"SourceCode":"{{\r\n  \"language\": \"Solidity\",\r\n  \"sources\": {\r\n    \"contracts/Gravity.sol\": {\r\n      \"content\": \"pragma solidity ^0.6.6;\\n\\nimport \\\"@openzeppelin/contracts/math/SafeMath.sol\\\";\\nimport \\\"@openzeppelin/contracts/token/ERC20/IERC20.sol\\\";\\nimport \\\"@openzeppelin/contracts/token/ERC20/SafeERC20.sol\\\";\\nimport \\\"@openzeppelin/contracts/utils/Address.sol\\\";\\nimport \\\"@openzeppelin/contracts/utils/ReentrancyGuard.sol\\\";\\nimport \\\"./CosmosToken.sol\\\";\\n\\npragma experimental ABIEncoderV2;\\n\\n// This is being used purely to avoid stack too deep errors\\nstruct LogicCallArgs {\\n\\t// Transfers out to the logic contract\\n\\tuint256[] transferAmounts;\\n\\taddress[] transferTokenContracts;\\n\\t// The fees (transferred to msg.sender)\\n\\tuint256[] feeAmounts;\\n\\taddress[] feeTokenContracts;\\n\\t// The arbitrary logic call\\n\\taddress logicContractAddress;\\n\\tbytes payload;\\n\\t// Invalidation metadata\\n\\tuint256 timeOut;\\n\\tbytes32 invalidationId;\\n\\tuint256 invalidationNonce;\\n}\\n\\ncontract Gravity is ReentrancyGuard {\\n\\tusing SafeMath for uint256;\\n\\tusing SafeERC20 for IERC20;\\n\\n\\t// These are updated often\\n\\tbytes32 public state_lastValsetCheckpoint;\\n\\tmapping(address => uint256) public state_lastBatchNonces;\\n\\tmapping(bytes32 => uint256) public state_invalidationMapping;\\n\\tuint256 public state_lastValsetNonce = 0;\\n\\t// event nonce zero is reserved by the Cosmos module as a special\\n\\t// value indicating that no events have yet been submitted\\n\\tuint256 public state_lastEventNonce = 1;\\n\\n\\t// These are set once at initialization\\n\\tbytes32 public state_gravityId;\\n\\tuint256 public state_powerThreshold;\\n\\n\\t// TransactionBatchExecutedEvent and SendToCosmosEvent both include the field _eventNonce.\\n\\t// This is incremented every time one of these events is emitted. It is checked by the\\n\\t// Cosmos module to ensure that all events are received in order, and that none are lost.\\n\\t//\\n\\t// ValsetUpdatedEvent does not include the field _eventNonce because it is never submitted to the Cosmos\\n\\t// module. It is purely for the use of relayers to allow them to successfully submit batches.\\n\\tevent TransactionBatchExecutedEvent(\\n\\t\\tuint256 indexed _batchNonce,\\n\\t\\taddress indexed _token,\\n\\t\\tuint256 _eventNonce\\n\\t);\\n\\tevent SendToCosmosEvent(\\n\\t\\taddress indexed _tokenContract,\\n\\t\\taddress indexed _sender,\\n\\t\\tbytes32 indexed _destination,\\n\\t\\tuint256 _amount,\\n\\t\\tuint256 _eventNonce\\n\\t);\\n\\tevent ERC20DeployedEvent(\\n\\t\\t// FYI: Can't index on a string without doing a bunch of weird stuff\\n\\t\\tstring _cosmosDenom,\\n\\t\\taddress indexed _tokenContract,\\n\\t\\tstring _name,\\n\\t\\tstring _symbol,\\n\\t\\tuint8 _decimals,\\n\\t\\tuint256 _eventNonce\\n\\t);\\n\\tevent ValsetUpdatedEvent(\\n\\t\\tuint256 indexed _newValsetNonce,\\n\\t\\tuint256 _eventNonce,\\n\\t\\taddress[] _validators,\\n\\t\\tuint256[] _powers\\n\\t);\\n\\tevent LogicCallEvent(\\n\\t\\tbytes32 _invalidationId,\\n\\t\\tuint256 _invalidationNonce,\\n\\t\\tbytes _returnData,\\n\\t\\tuint256 _eventNonce\\n\\t);\\n\\n\\t// TEST FIXTURES\\n\\t// These are here to make it easier to measure gas usage. They should be removed before production\\n\\tfunction testMakeCheckpoint(\\n\\t\\taddress[] memory _validators,\\n\\t\\tuint256[] memory _powers,\\n\\t\\tuint256 _valsetNonce,\\n\\t\\tbytes32 _gravityId\\n\\t) public pure {\\n\\t\\tmakeCheckpoint(_validators, _powers, _valsetNonce, _gravityId);\\n\\t}\\n\\n\\tfunction testCheckValidatorSignatures(\\n\\t\\taddress[] memory _currentValidators,\\n\\t\\tuint256[] memory _currentPowers,\\n\\t\\tuint8[] memory _v,\\n\\t\\tbytes32[] memory _r,\\n\\t\\tbytes32[] memory _s,\\n\\t\\tbytes32 _theHash,\\n\\t\\tuint256 _powerThreshold\\n\\t) public pure {\\n\\t\\tcheckValidatorSignatures(\\n\\t\\t\\t_currentValidators,\\n\\t\\t\\t_currentPowers,\\n\\t\\t\\t_v,\\n\\t\\t\\t_r,\\n\\t\\t\\t_s,\\n\\t\\t\\t_theHash,\\n\\t\\t\\t_powerThreshold\\n\\t\\t);\\n\\t}\\n\\n\\t// END TEST FIXTURES\\n\\n\\tfunction lastBatchNonce(address _erc20Address) public view returns (uint256) {\\n\\t\\treturn state_lastBatchNonces[_erc20Address];\\n\\t}\\n\\n\\tfunction lastLogicCallNonce(bytes32 _invalidation_id) public view returns (uint256) {\\n\\t\\treturn state_invalidationMapping[_invalidation_id];\\n\\t}\\n\\n\\t// Utility function to verify geth style signatures\\n\\tfunction verifySig(\\n\\t\\taddress _signer,\\n\\t\\tbytes32 _theHash,\\n\\t\\tuint8 _v,\\n\\t\\tbytes32 _r,\\n\\t\\tbytes32 _s\\n\\t) private pure returns (bool) {\\n\\t\\tbytes32 messageDigest =\\n\\t\\t\\tkeccak256(abi.encodePacked(\\\"\\\\x19Ethereum Signed Message:\\\\n32\\\", _theHash));\\n\\t\\treturn _signer == ecrecover(messageDigest, _v, _r, _s);\\n\\t}\\n\\n\\t// Make a new checkpoint from the supplied validator set\\n\\t// A checkpoint is a hash of all relevant information about the valset. This is stored by the contract,\\n\\t// instead of storing the information directly. This saves on storage and gas.\\n\\t// The format of the checkpoint is:\\n\\t// h(gravityId, \\\"checkpoint\\\", valsetNonce, validators[], powers[])\\n\\t// Where h is the keccak256 hash function.\\n\\t// The validator powers must be decreasing or equal. This is important for checking the signatures on the\\n\\t// next valset, since it allows the caller to stop verifying signatures once a quorum of signatures have been verified.\\n\\tfunction makeCheckpoint(\\n\\t\\taddress[] memory _validators,\\n\\t\\tuint256[] memory _powers,\\n\\t\\tuint256 _valsetNonce,\\n\\t\\tbytes32 _gravityId\\n\\t) private pure returns (bytes32) {\\n\\t\\t// bytes32 encoding of the string \\\"checkpoint\\\"\\n\\t\\tbytes32 methodName = 0x636865636b706f696e7400000000000000000000000000000000000000000000;\\n\\n\\t\\tbytes32 checkpoint =\\n\\t\\t\\tkeccak256(abi.encode(_gravityId, methodName, _valsetNonce, _validators, _powers));\\n\\n\\t\\treturn checkpoint;\\n\\t}\\n\\n\\tfunction checkValidatorSignatures(\\n\\t\\t// The current validator set and their powers\\n\\t\\taddress[] memory _currentValidators,\\n\\t\\tuint256[] memory _currentPowers,\\n\\t\\t// The current validator's signatures\\n\\t\\tuint8[] memory _v,\\n\\t\\tbytes32[] memory _r,\\n\\t\\tbytes32[] memory _s,\\n\\t\\t// This is what we are checking they have signed\\n\\t\\tbytes32 _theHash,\\n\\t\\tuint256 _powerThreshold\\n\\t) private pure {\\n\\t\\tuint256 cumulativePower = 0;\\n\\n\\t\\tfor (uint256 i = 0; i < _currentValidators.length; i++) {\\n\\t\\t\\t// If v is set to 0, this signifies that it was not possible to get a signature from this validator and we skip evaluation\\n\\t\\t\\t// (In a valid signature, it is either 27 or 28)\\n\\t\\t\\tif (_v[i] != 0) {\\n\\t\\t\\t\\t// Check that the current validator has signed off on the hash\\n\\t\\t\\t\\trequire(\\n\\t\\t\\t\\t\\tverifySig(_currentValidators[i], _theHash, _v[i], _r[i], _s[i]),\\n\\t\\t\\t\\t\\t\\\"Validator signature does not match.\\\"\\n\\t\\t\\t\\t);\\n\\n\\t\\t\\t\\t// Sum up cumulative power\\n\\t\\t\\t\\tcumulativePower = cumulativePower + _currentPowers[i];\\n\\n\\t\\t\\t\\t// Break early to avoid wasting gas\\n\\t\\t\\t\\tif (cumulativePower > _powerThreshold) {\\n\\t\\t\\t\\t\\tbreak;\\n\\t\\t\\t\\t}\\n\\t\\t\\t}\\n\\t\\t}\\n\\n\\t\\t// Check that there was enough power\\n\\t\\trequire(\\n\\t\\t\\tcumulativePower > _powerThreshold,\\n\\t\\t\\t\\\"Submitted validator set signatures do not have enough power.\\\"\\n\\t\\t);\\n\\t\\t// Success\\n\\t}\\n\\n\\t// This updates the valset by checking that the validators in the current valset have signed off on the\\n\\t// new valset. The signatures supplied are the signatures of the current valset over the checkpoint hash\\n\\t// generated from the new valset.\\n\\t// Anyone can call this function, but they must supply valid signatures of state_powerThreshold of the current valset over\\n\\t// the new valset.\\n\\tfunction updateValset(\\n\\t\\t// The new version of the validator set\\n\\t\\taddress[] memory _newValidators,\\n\\t\\tuint256[] memory _newPowers,\\n\\t\\tuint256 _newValsetNonce,\\n\\t\\t// The current validators that approve the change\\n\\t\\taddress[] memory _currentValidators,\\n\\t\\tuint256[] memory _currentPowers,\\n\\t\\tuint256 _currentValsetNonce,\\n\\t\\t// These are arrays of the parts of the current validator's signatures\\n\\t\\tuint8[] memory _v,\\n\\t\\tbytes32[] memory _r,\\n\\t\\tbytes32[] memory _s\\n\\t) public nonReentrant {\\n\\t\\t// CHECKS\\n\\n\\t\\t// Check that the valset nonce is greater than the old one\\n\\t\\trequire(\\n\\t\\t\\t_newValsetNonce > _currentValsetNonce,\\n\\t\\t\\t\\\"New valset nonce must be greater than the current nonce\\\"\\n\\t\\t);\\n\\n\\t\\t// Check that new validators and powers set is well-formed\\n\\t\\trequire(_newValidators.length == _newPowers.length, \\\"Malformed new validator set\\\");\\n\\n\\t\\t// Check that current validators, powers, and signatures (v,r,s) set is well-formed\\n\\t\\trequire(\\n\\t\\t\\t_currentValidators.length == _currentPowers.length &&\\n\\t\\t\\t\\t_currentValidators.length == _v.length &&\\n\\t\\t\\t\\t_currentValidators.length == _r.length &&\\n\\t\\t\\t\\t_currentValidators.length == _s.length,\\n\\t\\t\\t\\\"Malformed current validator set\\\"\\n\\t\\t);\\n\\n\\t\\t// Check that the supplied current validator set matches the saved checkpoint\\n\\t\\trequire(\\n\\t\\t\\tmakeCheckpoint(\\n\\t\\t\\t\\t_currentValidators,\\n\\t\\t\\t\\t_currentPowers,\\n\\t\\t\\t\\t_currentValsetNonce,\\n\\t\\t\\t\\tstate_gravityId\\n\\t\\t\\t) == state_lastValsetCheckpoint,\\n\\t\\t\\t\\\"Supplied current validators and powers do not match checkpoint.\\\"\\n\\t\\t);\\n\\n\\t\\t// Check that enough current validators have signed off on the new validator set\\n\\t\\tbytes32 newCheckpoint =\\n\\t\\t\\tmakeCheckpoint(_newValidators, _newPowers, _newValsetNonce, state_gravityId);\\n\\n\\t\\tcheckValidatorSignatures(\\n\\t\\t\\t_currentValidators,\\n\\t\\t\\t_currentPowers,\\n\\t\\t\\t_v,\\n\\t\\t\\t_r,\\n\\t\\t\\t_s,\\n\\t\\t\\tnewCheckpoint,\\n\\t\\t\\tstate_powerThreshold\\n\\t\\t);\\n\\n\\t\\t// ACTIONS\\n\\n\\t\\t// Stored to be used next time to validate that the valset\\n\\t\\t// supplied by the caller is correct.\\n\\t\\tstate_lastValsetCheckpoint = newCheckpoint;\\n\\n\\t\\t// Store new nonce\\n\\t\\tstate_lastValsetNonce = _newValsetNonce;\\n\\n\\t\\t// LOGS\\n\\t\\tstate_lastEventNonce = state_lastEventNonce.add(1);\\n\\t\\temit ValsetUpdatedEvent(_newValsetNonce, state_lastEventNonce, _newValidators, _newPowers);\\n\\t}\\n\\n\\t// submitBatch processes a batch of Cosmos -> Ethereum transactions by sending the tokens in the transactions\\n\\t// to the destination addresses. It is approved by the current Cosmos validator set.\\n\\t// Anyone can call this function, but they must supply valid signatures of state_powerThreshold of the current valset over\\n\\t// the batch.\\n\\tfunction submitBatch(\\n\\t\\t// The validators that approve the batch\\n\\t\\taddress[] memory _currentValidators,\\n\\t\\tuint256[] memory _currentPowers,\\n\\t\\tuint256 _currentValsetNonce,\\n\\t\\t// These are arrays of the parts of the validators signatures\\n\\t\\tuint8[] memory _v,\\n\\t\\tbytes32[] memory _r,\\n\\t\\tbytes32[] memory _s,\\n\\t\\t// The batch of transactions\\n\\t\\tuint256[] memory _amounts,\\n\\t\\taddress[] memory _destinations,\\n\\t\\tuint256[] memory _fees,\\n\\t\\tuint256 _batchNonce,\\n\\t\\taddress _tokenContract,\\n\\t\\t// a block height beyond which this batch is not valid\\n\\t\\t// used to provide a fee-free timeout\\n\\t\\tuint256 _batchTimeout\\n\\t) public nonReentrant {\\n\\t\\t// CHECKS scoped to reduce stack depth\\n\\t\\t{\\n\\t\\t\\t// Check that the batch nonce is higher than the last nonce for this token\\n\\t\\t\\trequire(\\n\\t\\t\\t\\tstate_lastBatchNonces[_tokenContract] < _batchNonce,\\n\\t\\t\\t\\t\\\"New batch nonce must be greater than the current nonce\\\"\\n\\t\\t\\t);\\n\\n\\t\\t\\t// Check that the block height is less than the timeout height\\n\\t\\t\\trequire(\\n\\t\\t\\t\\tblock.number < _batchTimeout,\\n\\t\\t\\t\\t\\\"Batch timeout must be greater than the current block height\\\"\\n\\t\\t\\t);\\n\\n\\t\\t\\t// Check that current validators, powers, and signatures (v,r,s) set is well-formed\\n\\t\\t\\trequire(\\n\\t\\t\\t\\t_currentValidators.length == _currentPowers.length &&\\n\\t\\t\\t\\t\\t_currentValidators.length == _v.length &&\\n\\t\\t\\t\\t\\t_currentValidators.length == _r.length &&\\n\\t\\t\\t\\t\\t_currentValidators.length == _s.length,\\n\\t\\t\\t\\t\\\"Malformed current validator set\\\"\\n\\t\\t\\t);\\n\\n\\t\\t\\t// Check that the supplied current validator set matches the saved checkpoint\\n\\t\\t\\trequire(\\n\\t\\t\\t\\tmakeCheckpoint(\\n\\t\\t\\t\\t\\t_currentValidators,\\n\\t\\t\\t\\t\\t_currentPowers,\\n\\t\\t\\t\\t\\t_currentValsetNonce,\\n\\t\\t\\t\\t\\tstate_gravityId\\n\\t\\t\\t\\t) == state_lastValsetCheckpoint,\\n\\t\\t\\t\\t\\\"Supplied current validators and powers do not match checkpoint.\\\"\\n\\t\\t\\t);\\n\\n\\t\\t\\t// Check that the transaction batch is well-formed\\n\\t\\t\\trequire(\\n\\t\\t\\t\\t_amounts.length == _destinations.length && _amounts.length == _fees.length,\\n\\t\\t\\t\\t\\\"Malformed batch of transactions\\\"\\n\\t\\t\\t);\\n\\n\\t\\t\\t// Check that enough current validators have signed off on the transaction batch and valset\\n\\t\\t\\tcheckValidatorSignatures(\\n\\t\\t\\t\\t_currentValidators,\\n\\t\\t\\t\\t_currentPowers,\\n\\t\\t\\t\\t_v,\\n\\t\\t\\t\\t_r,\\n\\t\\t\\t\\t_s,\\n\\t\\t\\t\\t// Get hash of the transaction batch and checkpoint\\n\\t\\t\\t\\tkeccak256(\\n\\t\\t\\t\\t\\tabi.encode(\\n\\t\\t\\t\\t\\t\\tstate_gravityId,\\n\\t\\t\\t\\t\\t\\t// bytes32 encoding of \\\"transactionBatch\\\"\\n\\t\\t\\t\\t\\t\\t0x7472616e73616374696f6e426174636800000000000000000000000000000000,\\n\\t\\t\\t\\t\\t\\t_amounts,\\n\\t\\t\\t\\t\\t\\t_destinations,\\n\\t\\t\\t\\t\\t\\t_fees,\\n\\t\\t\\t\\t\\t\\t_batchNonce,\\n\\t\\t\\t\\t\\t\\t_tokenContract,\\n\\t\\t\\t\\t\\t\\t_batchTimeout\\n\\t\\t\\t\\t\\t)\\n\\t\\t\\t\\t),\\n\\t\\t\\t\\tstate_powerThreshold\\n\\t\\t\\t);\\n\\n\\t\\t\\t// ACTIONS\\n\\n\\t\\t\\t// Store batch nonce\\n\\t\\t\\tstate_lastBatchNonces[_tokenContract] = _batchNonce;\\n\\n\\t\\t\\t{\\n\\t\\t\\t\\t// Send transaction amounts to destinations\\n\\t\\t\\t\\tuint256 totalFee;\\n\\t\\t\\t\\tfor (uint256 i = 0; i < _amounts.length; i++) {\\n\\t\\t\\t\\t\\tIERC20(_tokenContract).safeTransfer(_destinations[i], _amounts[i]);\\n\\t\\t\\t\\t\\ttotalFee = totalFee.add(_fees[i]);\\n\\t\\t\\t\\t}\\n\\n\\t\\t\\t\\t// Send transaction fees to msg.sender\\n\\t\\t\\t\\tIERC20(_tokenContract).safeTransfer(msg.sender, totalFee);\\n\\t\\t\\t}\\n\\t\\t}\\n\\n\\t\\t// LOGS scoped to reduce stack depth\\n\\t\\t{\\n\\t\\t\\tstate_lastEventNonce = state_lastEventNonce.add(1);\\n\\t\\t\\temit TransactionBatchExecutedEvent(_batchNonce, _tokenContract, state_lastEventNonce);\\n\\t\\t}\\n\\t}\\n\\n\\t// This makes calls to contracts that execute arbitrary logic\\n\\t// First, it gives the logic contract some tokens\\n\\t// Then, it gives msg.senders tokens for fees\\n\\t// Then, it calls an arbitrary function on the logic contract\\n\\t// invalidationId and invalidationNonce are used for replay prevention.\\n\\t// They can be used to implement a per-token nonce by setting the token\\n\\t// address as the invalidationId and incrementing the nonce each call.\\n\\t// They can be used for nonce-free replay prevention by using a different invalidationId\\n\\t// for each call.\\n\\tfunction submitLogicCall(\\n\\t\\t// The validators that approve the call\\n\\t\\taddress[] memory _currentValidators,\\n\\t\\tuint256[] memory _currentPowers,\\n\\t\\tuint256 _currentValsetNonce,\\n\\t\\t// These are arrays of the parts of the validators signatures\\n\\t\\tuint8[] memory _v,\\n\\t\\tbytes32[] memory _r,\\n\\t\\tbytes32[] memory _s,\\n\\t\\tLogicCallArgs memory _args\\n\\t) public nonReentrant {\\n\\t\\t// CHECKS scoped to reduce stack depth\\n\\t\\t{\\n\\t\\t\\t// Check that the call has not timed out\\n\\t\\t\\trequire(block.number < _args.timeOut, \\\"Timed out\\\");\\n\\n\\t\\t\\t// Check that the invalidation nonce is higher than the last nonce for this invalidation Id\\n\\t\\t\\trequire(\\n\\t\\t\\t\\tstate_invalidationMapping[_args.invalidationId] < _args.invalidationNonce,\\n\\t\\t\\t\\t\\\"New invalidation nonce must be greater than the current nonce\\\"\\n\\t\\t\\t);\\n\\n\\t\\t\\t// Check that current validators, powers, and signatures (v,r,s) set is well-formed\\n\\t\\t\\trequire(\\n\\t\\t\\t\\t_currentValidators.length == _currentPowers.length &&\\n\\t\\t\\t\\t\\t_currentValidators.length == _v.length &&\\n\\t\\t\\t\\t\\t_currentValidators.length == _r.length &&\\n\\t\\t\\t\\t\\t_currentValidators.length == _s.length,\\n\\t\\t\\t\\t\\\"Malformed current validator set\\\"\\n\\t\\t\\t);\\n\\n\\t\\t\\t// Check that the supplied current validator set matches the saved checkpoint\\n\\t\\t\\trequire(\\n\\t\\t\\t\\tmakeCheckpoint(\\n\\t\\t\\t\\t\\t_currentValidators,\\n\\t\\t\\t\\t\\t_currentPowers,\\n\\t\\t\\t\\t\\t_currentValsetNonce,\\n\\t\\t\\t\\t\\tstate_gravityId\\n\\t\\t\\t\\t) == state_lastValsetCheckpoint,\\n\\t\\t\\t\\t\\\"Supplied current validators and powers do not match checkpoint.\\\"\\n\\t\\t\\t);\\n\\n\\t\\t\\t// Check that the token transfer list is well-formed\\n\\t\\t\\trequire(\\n\\t\\t\\t\\t_args.transferAmounts.length == _args.transferTokenContracts.length,\\n\\t\\t\\t\\t\\\"Malformed list of token transfers\\\"\\n\\t\\t\\t);\\n\\n\\t\\t\\t// Check that the fee list is well-formed\\n\\t\\t\\trequire(\\n\\t\\t\\t\\t_args.feeAmounts.length == _args.feeTokenContracts.length,\\n\\t\\t\\t\\t\\\"Malformed list of fees\\\"\\n\\t\\t\\t);\\n\\t\\t}\\n\\n\\t\\tbytes32 argsHash =\\n\\t\\t\\tkeccak256(\\n\\t\\t\\t\\tabi.encode(\\n\\t\\t\\t\\t\\tstate_gravityId,\\n\\t\\t\\t\\t\\t// bytes32 encoding of \\\"logicCall\\\"\\n\\t\\t\\t\\t\\t0x6c6f67696343616c6c0000000000000000000000000000000000000000000000,\\n\\t\\t\\t\\t\\t_args.transferAmounts,\\n\\t\\t\\t\\t\\t_args.transferTokenContracts,\\n\\t\\t\\t\\t\\t_args.feeAmounts,\\n\\t\\t\\t\\t\\t_args.feeTokenContracts,\\n\\t\\t\\t\\t\\t_args.logicContractAddress,\\n\\t\\t\\t\\t\\t_args.payload,\\n\\t\\t\\t\\t\\t_args.timeOut,\\n\\t\\t\\t\\t\\t_args.invalidationId,\\n\\t\\t\\t\\t\\t_args.invalidationNonce\\n\\t\\t\\t\\t)\\n\\t\\t\\t);\\n\\n\\t\\t{\\n\\t\\t\\t// Check that enough current validators have signed off on the transaction batch and valset\\n\\t\\t\\tcheckValidatorSignatures(\\n\\t\\t\\t\\t_currentValidators,\\n\\t\\t\\t\\t_currentPowers,\\n\\t\\t\\t\\t_v,\\n\\t\\t\\t\\t_r,\\n\\t\\t\\t\\t_s,\\n\\t\\t\\t\\t// Get hash of the transaction batch and checkpoint\\n\\t\\t\\t\\targsHash,\\n\\t\\t\\t\\tstate_powerThreshold\\n\\t\\t\\t);\\n\\t\\t}\\n\\n\\t\\t// ACTIONS\\n\\n\\t\\t// Update invaldiation nonce\\n\\t\\tstate_invalidationMapping[_args.invalidationId] = _args.invalidationNonce;\\n\\n\\t\\t// Send tokens to the logic contract\\n\\t\\tfor (uint256 i = 0; i < _args.transferAmounts.length; i++) {\\n\\t\\t\\tIERC20(_args.transferTokenContracts[i]).safeTransfer(\\n\\t\\t\\t\\t_args.logicContractAddress,\\n\\t\\t\\t\\t_args.transferAmounts[i]\\n\\t\\t\\t);\\n\\t\\t}\\n\\n\\t\\t// Make call to logic contract\\n\\t\\tbytes memory returnData = Address.functionCall(_args.logicContractAddress, _args.payload);\\n\\n\\t\\t// Send fees to msg.sender\\n\\t\\tfor (uint256 i = 0; i < _args.feeAmounts.length; i++) {\\n\\t\\t\\tIERC20(_args.feeTokenContracts[i]).safeTransfer(msg.sender, _args.feeAmounts[i]);\\n\\t\\t}\\n\\n\\t\\t// LOGS scoped to reduce stack depth\\n\\t\\t{\\n\\t\\t\\tstate_lastEventNonce = state_lastEventNonce.add(1);\\n\\t\\t\\temit LogicCallEvent(\\n\\t\\t\\t\\t_args.invalidationId,\\n\\t\\t\\t\\t_args.invalidationNonce,\\n\\t\\t\\t\\treturnData,\\n\\t\\t\\t\\tstate_lastEventNonce\\n\\t\\t\\t);\\n\\t\\t}\\n\\t}\\n\\n\\tfunction sendToCosmos(\\n\\t\\taddress _tokenContract,\\n\\t\\tbytes32 _destination,\\n\\t\\tuint256 _amount\\n\\t) public nonReentrant {\\n\\t\\tIERC20(_tokenContract).safeTransferFrom(msg.sender, address(this), _amount);\\n\\t\\tstate_lastEventNonce = state_lastEventNonce.add(1);\\n\\t\\temit SendToCosmosEvent(\\n\\t\\t\\t_tokenContract,\\n\\t\\t\\tmsg.sender,\\n\\t\\t\\t_destination,\\n\\t\\t\\t_amount,\\n\\t\\t\\tstate_lastEventNonce\\n\\t\\t);\\n\\t}\\n\\n\\tfunction deployERC20(\\n\\t\\tstring memory _cosmosDenom,\\n\\t\\tstring memory _name,\\n\\t\\tstring memory _symbol,\\n\\t\\tuint8 _decimals\\n\\t) public {\\n\\t\\t// Deploy an ERC20 with entire supply granted to Gravity.sol\\n\\t\\tCosmosERC20 erc20 = new CosmosERC20(address(this), _name, _symbol, _decimals);\\n\\n\\t\\t// Fire an event to let the Cosmos module know\\n\\t\\tstate_lastEventNonce = state_lastEventNonce.add(1);\\n\\t\\temit ERC20DeployedEvent(\\n\\t\\t\\t_cosmosDenom,\\n\\t\\t\\taddress(erc20),\\n\\t\\t\\t_name,\\n\\t\\t\\t_symbol,\\n\\t\\t\\t_decimals,\\n\\t\\t\\tstate_lastEventNonce\\n\\t\\t);\\n\\t}\\n\\n\\tconstructor(\\n\\t\\t// A unique identifier for this gravity instance to use in signatures\\n\\t\\tbytes32 _gravityId,\\n\\t\\t// How much voting power is needed to approve operations\\n\\t\\tuint256 _powerThreshold,\\n\\t\\t// The validator set\\n\\t\\taddress[] memory _validators,\\n\\t\\tuint256[] memory _powers\\n\\t) public {\\n\\t\\t// CHECKS\\n\\n\\t\\t// Check that validators, powers, and signatures (v,r,s) set is well-formed\\n\\t\\trequire(_validators.length == _powers.length, \\\"Malformed current validator set\\\");\\n\\n\\t\\t// Check cumulative power to ensure the contract has sufficient power to actually\\n\\t\\t// pass a vote\\n\\t\\tuint256 cumulativePower = 0;\\n\\t\\tfor (uint256 i = 0; i < _powers.length; i++) {\\n\\t\\t\\tcumulativePower = cumulativePower + _powers[i];\\n\\t\\t\\tif (cumulativePower > _powerThreshold) {\\n\\t\\t\\t\\tbreak;\\n\\t\\t\\t}\\n\\t\\t}\\n\\t\\trequire(\\n\\t\\t\\tcumulativePower > _powerThreshold,\\n\\t\\t\\t\\\"Submitted validator set signatures do not have enough power.\\\"\\n\\t\\t);\\n\\n\\t\\tbytes32 newCheckpoint = makeCheckpoint(_validators, _powers, 0, _gravityId);\\n\\n\\t\\t// ACTIONS\\n\\n\\t\\tstate_gravityId = _gravityId;\\n\\t\\tstate_powerThreshold = _powerThreshold;\\n\\t\\tstate_lastValsetCheckpoint = newCheckpoint;\\n\\n\\t\\t// LOGS\\n\\n\\t\\temit ValsetUpdatedEvent(state_lastValsetNonce, state_lastEventNonce, _validators, _powers);\\n\\t}\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/math/SafeMath.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.6.0;\\n\\n/**\\n * @dev Wrappers over Solidity's arithmetic operations with added overflow\\n * checks.\\n *\\n * Arithmetic operations in Solidity wrap on overflow. This can easily result\\n * in bugs, because programmers usually assume that an overflow raises an\\n * error, which is the standard behavior in high level programming languages.\\n * `SafeMath` restores this intuition by reverting the transaction when an\\n * operation overflows.\\n *\\n * Using this library instead of the unchecked operations eliminates an entire\\n * class of bugs, so it's recommended to use it always.\\n */\\nlibrary SafeMath {\\n    /**\\n     * @dev Returns the addition of two unsigned integers, reverting on\\n     * overflow.\\n     *\\n     * Counterpart to Solidity's `+` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Addition cannot overflow.\\n     */\\n    function add(uint256 a, uint256 b) internal pure returns (uint256) {\\n        uint256 c = a + b;\\n        require(c >= a, \\\"SafeMath: addition overflow\\\");\\n\\n        return c;\\n    }\\n\\n    /**\\n     * @dev Returns the subtraction of two unsigned integers, reverting on\\n     * overflow (when the result is negative).\\n     *\\n     * Counterpart to Solidity's `-` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Subtraction cannot overflow.\\n     */\\n    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return sub(a, b, \\\"SafeMath: subtraction overflow\\\");\\n    }\\n\\n    /**\\n     * @dev Returns the subtraction of two unsigned integers, reverting with custom message on\\n     * overflow (when the result is negative).\\n     *\\n     * Counterpart to Solidity's `-` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Subtraction cannot overflow.\\n     */\\n    function sub(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\\n        require(b <= a, errorMessage);\\n        uint256 c = a - b;\\n\\n        return c;\\n    }\\n\\n    /**\\n     * @dev Returns the multiplication of two unsigned integers, reverting on\\n     * overflow.\\n     *\\n     * Counterpart to Solidity's `*` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Multiplication cannot overflow.\\n     */\\n    function mul(uint256 a, uint256 b) internal pure returns (uint256) {\\n        // Gas optimization: this is cheaper than requiring 'a' not being zero, but the\\n        // benefit is lost if 'b' is also tested.\\n        // See: https://github.com/OpenZeppelin/openzeppelin-contracts/pull/522\\n        if (a == 0) {\\n            return 0;\\n        }\\n\\n        uint256 c = a * b;\\n        require(c / a == b, \\\"SafeMath: multiplication overflow\\\");\\n\\n        return c;\\n    }\\n\\n    /**\\n     * @dev Returns the integer division of two unsigned integers. Reverts on\\n     * division by zero. The result is rounded towards zero.\\n     *\\n     * Counterpart to Solidity's `/` operator. Note: this function uses a\\n     * `revert` opcode (which leaves remaining gas untouched) while Solidity\\n     * uses an invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Requirements:\\n     *\\n     * - The divisor cannot be zero.\\n     */\\n    function div(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return div(a, b, \\\"SafeMath: division by zero\\\");\\n    }\\n\\n    /**\\n     * @dev Returns the integer division of two unsigned integers. Reverts with custom message on\\n     * division by zero. The result is rounded towards zero.\\n     *\\n     * Counterpart to Solidity's `/` operator. Note: this function uses a\\n     * `revert` opcode (which leaves remaining gas untouched) while Solidity\\n     * uses an invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Requirements:\\n     *\\n     * - The divisor cannot be zero.\\n     */\\n    function div(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\\n        require(b > 0, errorMessage);\\n        uint256 c = a / b;\\n        // assert(a == b * c + a % b); // There is no case in which this doesn't hold\\n\\n        return c;\\n    }\\n\\n    /**\\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\\n     * Reverts when dividing by zero.\\n     *\\n     * Counterpart to Solidity's `%` operator. This function uses a `revert`\\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\\n     * invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Requirements:\\n     *\\n     * - The divisor cannot be zero.\\n     */\\n    function mod(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return mod(a, b, \\\"SafeMath: modulo by zero\\\");\\n    }\\n\\n    /**\\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\\n     * Reverts with custom message when dividing by zero.\\n     *\\n     * Counterpart to Solidity's `%` operator. This function uses a `revert`\\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\\n     * invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Requirements:\\n     *\\n     * - The divisor cannot be zero.\\n     */\\n    function mod(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\\n        require(b != 0, errorMessage);\\n        return a % b;\\n    }\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/token/ERC20/IERC20.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.6.0;\\n\\n/**\\n * @dev Interface of the ERC20 standard as defined in the EIP.\\n */\\ninterface IERC20 {\\n    /**\\n     * @dev Returns the amount of tokens in existence.\\n     */\\n    function totalSupply() external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the amount of tokens owned by `account`.\\n     */\\n    function balanceOf(address account) external view returns (uint256);\\n\\n    /**\\n     * @dev Moves `amount` tokens from the caller's account to `recipient`.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transfer(address recipient, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Returns the remaining number of tokens that `spender` will be\\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\\n     * zero by default.\\n     *\\n     * This value changes when {approve} or {transferFrom} are called.\\n     */\\n    function allowance(address owner, address spender) external view returns (uint256);\\n\\n    /**\\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\\n     * that someone may use both the old and the new allowance by unfortunate\\n     * transaction ordering. One possible solution to mitigate this race\\n     * condition is to first reduce the spender's allowance to 0 and set the\\n     * desired value afterwards:\\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address spender, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Moves `amount` tokens from `sender` to `recipient` using the\\n     * allowance mechanism. `amount` is then deducted from the caller's\\n     * allowance.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(address sender, address recipient, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\\n     * another (`to`).\\n     *\\n     * Note that `value` may be zero.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 value);\\n\\n    /**\\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\\n     * a call to {approve}. `value` is the new allowance.\\n     */\\n    event Approval(address indexed owner, address indexed spender, uint256 value);\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/token/ERC20/SafeERC20.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.6.0;\\n\\nimport \\\"./IERC20.sol\\\";\\nimport \\\"../../math/SafeMath.sol\\\";\\nimport \\\"../../utils/Address.sol\\\";\\n\\n/**\\n * @title SafeERC20\\n * @dev Wrappers around ERC20 operations that throw on failure (when the token\\n * contract returns false). Tokens that return no value (and instead revert or\\n * throw on failure) are also supported, non-reverting calls are assumed to be\\n * successful.\\n * To use this library you can add a `using SafeERC20 for IERC20;` statement to your contract,\\n * which allows you to call the safe operations as `token.safeTransfer(...)`, etc.\\n */\\nlibrary SafeERC20 {\\n    using SafeMath for uint256;\\n    using Address for address;\\n\\n    function safeTransfer(IERC20 token, address to, uint256 value) internal {\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.transfer.selector, to, value));\\n    }\\n\\n    function safeTransferFrom(IERC20 token, address from, address to, uint256 value) internal {\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.transferFrom.selector, from, to, value));\\n    }\\n\\n    /**\\n     * @dev Deprecated. This function has issues similar to the ones found in\\n     * {IERC20-approve}, and its usage is discouraged.\\n     *\\n     * Whenever possible, use {safeIncreaseAllowance} and\\n     * {safeDecreaseAllowance} instead.\\n     */\\n    function safeApprove(IERC20 token, address spender, uint256 value) internal {\\n        // safeApprove should only be called when setting an initial allowance,\\n        // or when resetting it to zero. To increase and decrease it, use\\n        // 'safeIncreaseAllowance' and 'safeDecreaseAllowance'\\n        // solhint-disable-next-line max-line-length\\n        require((value == 0) || (token.allowance(address(this), spender) == 0),\\n            \\\"SafeERC20: approve from non-zero to non-zero allowance\\\"\\n        );\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, value));\\n    }\\n\\n    function safeIncreaseAllowance(IERC20 token, address spender, uint256 value) internal {\\n        uint256 newAllowance = token.allowance(address(this), spender).add(value);\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));\\n    }\\n\\n    function safeDecreaseAllowance(IERC20 token, address spender, uint256 value) internal {\\n        uint256 newAllowance = token.allowance(address(this), spender).sub(value, \\\"SafeERC20: decreased allowance below zero\\\");\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));\\n    }\\n\\n    /**\\n     * @dev Imitates a Solidity high-level call (i.e. a regular function call to a contract), relaxing the requirement\\n     * on the return value: the return value is optional (but if data is returned, it must not be false).\\n     * @param token The token targeted by the call.\\n     * @param data The call data (encoded using abi.encode or one of its variants).\\n     */\\n    function _callOptionalReturn(IERC20 token, bytes memory data) private {\\n        // We need to perform a low level call here, to bypass Solidity's return data size checking mechanism, since\\n        // we're implementing it ourselves. We use {Address.functionCall} to perform this call, which verifies that\\n        // the target address contains contract code and also asserts for success in the low-level call.\\n\\n        bytes memory returndata = address(token).functionCall(data, \\\"SafeERC20: low-level call failed\\\");\\n        if (returndata.length > 0) { // Return data is optional\\n            // solhint-disable-next-line max-line-length\\n            require(abi.decode(returndata, (bool)), \\\"SafeERC20: ERC20 operation did not succeed\\\");\\n        }\\n    }\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/utils/Address.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.6.2;\\n\\n/**\\n * @dev Collection of functions related to the address type\\n */\\nlibrary Address {\\n    /**\\n     * @dev Returns true if `account` is a contract.\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * It is unsafe to assume that an address for which this function returns\\n     * false is an externally-owned account (EOA) and not a contract.\\n     *\\n     * Among others, `isContract` will return false for the following\\n     * types of addresses:\\n     *\\n     *  - an externally-owned account\\n     *  - a contract in construction\\n     *  - an address where a contract will be created\\n     *  - an address where a contract lived, but was destroyed\\n     * ====\\n     */\\n    function isContract(address account) internal view returns (bool) {\\n        // According to EIP-1052, 0x0 is the value returned for not-yet created accounts\\n        // and 0xc5d2460186f7233c927e7db2dcc703c0e500b653ca82273b7bfad8045d85a470 is returned\\n        // for accounts without code, i.e. `keccak256('')`\\n        bytes32 codehash;\\n        bytes32 accountHash = 0xc5d2460186f7233c927e7db2dcc703c0e500b653ca82273b7bfad8045d85a470;\\n        // solhint-disable-next-line no-inline-assembly\\n        assembly { codehash := extcodehash(account) }\\n        return (codehash != accountHash && codehash != 0x0);\\n    }\\n\\n    /**\\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\\n     * `recipient`, forwarding all available gas and reverting on errors.\\n     *\\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\\n     * imposed by `transfer`, making them unable to receive funds via\\n     * `transfer`. {sendValue} removes this limitation.\\n     *\\n     * https://diligence.consensys.net/posts/2019/09/stop-using-soliditys-transfer-now/[Learn more].\\n     *\\n     * IMPORTANT: because control is transferred to `recipient`, care must be\\n     * taken to not create reentrancy vulnerabilities. Consider using\\n     * {ReentrancyGuard} or the\\n     * https://solidity.readthedocs.io/en/v0.5.11/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\\n     */\\n    function sendValue(address payable recipient, uint256 amount) internal {\\n        require(address(this).balance >= amount, \\\"Address: insufficient balance\\\");\\n\\n        // solhint-disable-next-line avoid-low-level-calls, avoid-call-value\\n        (bool success, ) = recipient.call{ value: amount }(\\\"\\\");\\n        require(success, \\\"Address: unable to send value, recipient may have reverted\\\");\\n    }\\n\\n    /**\\n     * @dev Performs a Solidity function call using a low level `call`. A\\n     * plain`call` is an unsafe replacement for a function call: use this\\n     * function instead.\\n     *\\n     * If `target` reverts with a revert reason, it is bubbled up by this\\n     * function (like regular Solidity function calls).\\n     *\\n     * Returns the raw returned data. To convert to the expected return value,\\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\\n     *\\n     * Requirements:\\n     *\\n     * - `target` must be a contract.\\n     * - calling `target` with `data` must not revert.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\\n      return functionCall(target, data, \\\"Address: low-level call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\\n     * `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(address target, bytes memory data, string memory errorMessage) internal returns (bytes memory) {\\n        return _functionCallWithValue(target, data, 0, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but also transferring `value` wei to `target`.\\n     *\\n     * Requirements:\\n     *\\n     * - the calling contract must have an ETH balance of at least `value`.\\n     * - the called Solidity function must be `payable`.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(address target, bytes memory data, uint256 value) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, value, \\\"Address: low-level call with value failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\\n     * with `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(address target, bytes memory data, uint256 value, string memory errorMessage) internal returns (bytes memory) {\\n        require(address(this).balance >= value, \\\"Address: insufficient balance for call\\\");\\n        return _functionCallWithValue(target, data, value, errorMessage);\\n    }\\n\\n    function _functionCallWithValue(address target, bytes memory data, uint256 weiValue, string memory errorMessage) private returns (bytes memory) {\\n        require(isContract(target), \\\"Address: call to non-contract\\\");\\n\\n        // solhint-disable-next-line avoid-low-level-calls\\n        (bool success, bytes memory returndata) = target.call{ value: weiValue }(data);\\n        if (success) {\\n            return returndata;\\n        } else {\\n            // Look for revert reason and bubble it up if present\\n            if (returndata.length > 0) {\\n                // The easiest way to bubble the revert reason is using memory via assembly\\n\\n                // solhint-disable-next-line no-inline-assembly\\n                assembly {\\n                    let returndata_size := mload(returndata)\\n                    revert(add(32, returndata), returndata_size)\\n                }\\n            } else {\\n                revert(errorMessage);\\n            }\\n        }\\n    }\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/utils/ReentrancyGuard.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.6.0;\\n\\n/**\\n * @dev Contract module that helps prevent reentrant calls to a function.\\n *\\n * Inheriting from `ReentrancyGuard` will make the {nonReentrant} modifier\\n * available, which can be applied to functions to make sure there are no nested\\n * (reentrant) calls to them.\\n *\\n * Note that because there is a single `nonReentrant` guard, functions marked as\\n * `nonReentrant` may not call one another. This can be worked around by making\\n * those functions `private`, and then adding `external` `nonReentrant` entry\\n * points to them.\\n *\\n * TIP: If you would like to learn more about reentrancy and alternative ways\\n * to protect against it, check out our blog post\\n * https://blog.openzeppelin.com/reentrancy-after-istanbul/[Reentrancy After Istanbul].\\n */\\ncontract ReentrancyGuard {\\n    // Booleans are more expensive than uint256 or any type that takes up a full\\n    // word because each write operation emits an extra SLOAD to first read the\\n    // slot's contents, replace the bits taken up by the boolean, and then write\\n    // back. This is the compiler's defense against contract upgrades and\\n    // pointer aliasing, and it cannot be disabled.\\n\\n    // The values being non-zero value makes deployment a bit more expensive,\\n    // but in exchange the refund on every call to nonReentrant will be lower in\\n    // amount. Since refunds are capped to a percentage of the total\\n    // transaction's gas, it is best to keep them low in cases like this one, to\\n    // increase the likelihood of the full refund coming into effect.\\n    uint256 private constant _NOT_ENTERED = 1;\\n    uint256 private constant _ENTERED = 2;\\n\\n    uint256 private _status;\\n\\n    constructor () internal {\\n        _status = _NOT_ENTERED;\\n    }\\n\\n    /**\\n     * @dev Prevents a contract from calling itself, directly or indirectly.\\n     * Calling a `nonReentrant` function from another `nonReentrant`\\n     * function is not supported. It is possible to prevent this from happening\\n     * by making the `nonReentrant` function external, and make it call a\\n     * `private` function that does the actual work.\\n     */\\n    modifier nonReentrant() {\\n        // On the first call to nonReentrant, _notEntered will be true\\n        require(_status != _ENTERED, \\\"ReentrancyGuard: reentrant call\\\");\\n\\n        // Any calls to nonReentrant after this point will fail\\n        _status = _ENTERED;\\n\\n        _;\\n\\n        // By storing the original value once again, a refund is triggered (see\\n        // https://eips.ethereum.org/EIPS/eip-2200)\\n        _status = _NOT_ENTERED;\\n    }\\n}\\n\"\r\n    },\r\n    \"contracts/CosmosToken.sol\": {\r\n      \"content\": \"pragma solidity ^0.6.6;\\nimport \\\"@openzeppelin/contracts/token/ERC20/ERC20.sol\\\";\\n\\ncontract CosmosERC20 is ERC20 {\\n\\tuint256 MAX_UINT = 2**256 - 1;\\n\\n\\tconstructor(\\n\\t\\taddress _gravityAddress,\\n\\t\\tstring memory _name,\\n\\t\\tstring memory _symbol,\\n\\t\\tuint8 _decimals\\n\\t) public ERC20(_name, _symbol) {\\n\\t\\t_setupDecimals(_decimals);\\n\\t\\t_mint(_gravityAddress, MAX_UINT);\\n\\t}\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/token/ERC20/ERC20.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.6.0;\\n\\nimport \\\"../../GSN/Context.sol\\\";\\nimport \\\"./IERC20.sol\\\";\\nimport \\\"../../math/SafeMath.sol\\\";\\nimport \\\"../../utils/Address.sol\\\";\\n\\n/**\\n * @dev Implementation of the {IERC20} interface.\\n *\\n * This implementation is agnostic to the way tokens are created. This means\\n * that a supply mechanism has to be added in a derived contract using {_mint}.\\n * For a generic mechanism see {ERC20PresetMinterPauser}.\\n *\\n * TIP: For a detailed writeup see our guide\\n * https://forum.zeppelin.solutions/t/how-to-implement-erc20-supply-mechanisms/226[How\\n * to implement supply mechanisms].\\n *\\n * We have followed general OpenZeppelin guidelines: functions revert instead\\n * of returning `false` on failure. This behavior is nonetheless conventional\\n * and does not conflict with the expectations of ERC20 applications.\\n *\\n * Additionally, an {Approval} event is emitted on calls to {transferFrom}.\\n * This allows applications to reconstruct the allowance for all accounts just\\n * by listening to said events. Other implementations of the EIP may not emit\\n * these events, as it isn't required by the specification.\\n *\\n * Finally, the non-standard {decreaseAllowance} and {increaseAllowance}\\n * functions have been added to mitigate the well-known issues around setting\\n * allowances. See {IERC20-approve}.\\n */\\ncontract ERC20 is Context, IERC20 {\\n    using SafeMath for uint256;\\n    using Address for address;\\n\\n    mapping (address => uint256) private _balances;\\n\\n    mapping (address => mapping (address => uint256)) private _allowances;\\n\\n    uint256 private _totalSupply;\\n\\n    string private _name;\\n    string private _symbol;\\n    uint8 private _decimals;\\n\\n    /**\\n     * @dev Sets the values for {name} and {symbol}, initializes {decimals} with\\n     * a default value of 18.\\n     *\\n     * To select a different value for {decimals}, use {_setupDecimals}.\\n     *\\n     * All three of these values are immutable: they can only be set once during\\n     * construction.\\n     */\\n    constructor (string memory name, string memory symbol) public {\\n        _name = name;\\n        _symbol = symbol;\\n        _decimals = 18;\\n    }\\n\\n    /**\\n     * @dev Returns the name of the token.\\n     */\\n    function name() public view returns (string memory) {\\n        return _name;\\n    }\\n\\n    /**\\n     * @dev Returns the symbol of the token, usually a shorter version of the\\n     * name.\\n     */\\n    function symbol() public view returns (string memory) {\\n        return _symbol;\\n    }\\n\\n    /**\\n     * @dev Returns the number of decimals used to get its user representation.\\n     * For example, if `decimals` equals `2`, a balance of `505` tokens should\\n     * be displayed to a user as `5,05` (`505 / 10 ** 2`).\\n     *\\n     * Tokens usually opt for a value of 18, imitating the relationship between\\n     * Ether and Wei. This is the value {ERC20} uses, unless {_setupDecimals} is\\n     * called.\\n     *\\n     * NOTE: This information is only used for _display_ purposes: it in\\n     * no way affects any of the arithmetic of the contract, including\\n     * {IERC20-balanceOf} and {IERC20-transfer}.\\n     */\\n    function decimals() public view returns (uint8) {\\n        return _decimals;\\n    }\\n\\n    /**\\n     * @dev See {IERC20-totalSupply}.\\n     */\\n    function totalSupply() public view override returns (uint256) {\\n        return _totalSupply;\\n    }\\n\\n    /**\\n     * @dev See {IERC20-balanceOf}.\\n     */\\n    function balanceOf(address account) public view override returns (uint256) {\\n        return _balances[account];\\n    }\\n\\n    /**\\n     * @dev See {IERC20-transfer}.\\n     *\\n     * Requirements:\\n     *\\n     * - `recipient` cannot be the zero address.\\n     * - the caller must have a balance of at least `amount`.\\n     */\\n    function transfer(address recipient, uint256 amount) public virtual override returns (bool) {\\n        _transfer(_msgSender(), recipient, amount);\\n        return true;\\n    }\\n\\n    /**\\n     * @dev See {IERC20-allowance}.\\n     */\\n    function allowance(address owner, address spender) public view virtual override returns (uint256) {\\n        return _allowances[owner][spender];\\n    }\\n\\n    /**\\n     * @dev See {IERC20-approve}.\\n     *\\n     * Requirements:\\n     *\\n     * - `spender` cannot be the zero address.\\n     */\\n    function approve(address spender, uint256 amount) public virtual override returns (bool) {\\n        _approve(_msgSender(), spender, amount);\\n        return true;\\n    }\\n\\n    /**\\n     * @dev See {IERC20-transferFrom}.\\n     *\\n     * Emits an {Approval} event indicating the updated allowance. This is not\\n     * required by the EIP. See the note at the beginning of {ERC20};\\n     *\\n     * Requirements:\\n     * - `sender` and `recipient` cannot be the zero address.\\n     * - `sender` must have a balance of at least `amount`.\\n     * - the caller must have allowance for ``sender``'s tokens of at least\\n     * `amount`.\\n     */\\n    function transferFrom(address sender, address recipient, uint256 amount) public virtual override returns (bool) {\\n        _transfer(sender, recipient, amount);\\n        _approve(sender, _msgSender(), _allowances[sender][_msgSender()].sub(amount, \\\"ERC20: transfer amount exceeds allowance\\\"));\\n        return true;\\n    }\\n\\n    /**\\n     * @dev Atomically increases the allowance granted to `spender` by the caller.\\n     *\\n     * This is an alternative to {approve} that can be used as a mitigation for\\n     * problems described in {IERC20-approve}.\\n     *\\n     * Emits an {Approval} event indicating the updated allowance.\\n     *\\n     * Requirements:\\n     *\\n     * - `spender` cannot be the zero address.\\n     */\\n    function increaseAllowance(address spender, uint256 addedValue) public virtual returns (bool) {\\n        _approve(_msgSender(), spender, _allowances[_msgSender()][spender].add(addedValue));\\n        return true;\\n    }\\n\\n    /**\\n     * @dev Atomically decreases the allowance granted to `spender` by the caller.\\n     *\\n     * This is an alternative to {approve} that can be used as a mitigation for\\n     * problems described in {IERC20-approve}.\\n     *\\n     * Emits an {Approval} event indicating the updated allowance.\\n     *\\n     * Requirements:\\n     *\\n     * - `spender` cannot be the zero address.\\n     * - `spender` must have allowance for the caller of at least\\n     * `subtractedValue`.\\n     */\\n    function decreaseAllowance(address spender, uint256 subtractedValue) public virtual returns (bool) {\\n        _approve(_msgSender(), spender, _allowances[_msgSender()][spender].sub(subtractedValue, \\\"ERC20: decreased allowance below zero\\\"));\\n        return true;\\n    }\\n\\n    /**\\n     * @dev Moves tokens `amount` from `sender` to `recipient`.\\n     *\\n     * This is internal function is equivalent to {transfer}, and can be used to\\n     * e.g. implement automatic token fees, slashing mechanisms, etc.\\n     *\\n     * Emits a {Transfer} event.\\n     *\\n     * Requirements:\\n     *\\n     * - `sender` cannot be the zero address.\\n     * - `recipient` cannot be the zero address.\\n     * - `sender` must have a balance of at least `amount`.\\n     */\\n    function _transfer(address sender, address recipient, uint256 amount) internal virtual {\\n        require(sender != address(0), \\\"ERC20: transfer from the zero address\\\");\\n        require(recipient != address(0), \\\"ERC20: transfer to the zero address\\\");\\n\\n        _beforeTokenTransfer(sender, recipient, amount);\\n\\n        _balances[sender] = _balances[sender].sub(amount, \\\"ERC20: transfer amount exceeds balance\\\");\\n        _balances[recipient] = _balances[recipient].add(amount);\\n        emit Transfer(sender, recipient, amount);\\n    }\\n\\n    /** @dev Creates `amount` tokens and assigns them to `account`, increasing\\n     * the total supply.\\n     *\\n     * Emits a {Transfer} event with `from` set to the zero address.\\n     *\\n     * Requirements\\n     *\\n     * - `to` cannot be the zero address.\\n     */\\n    function _mint(address account, uint256 amount) internal virtual {\\n        require(account != address(0), \\\"ERC20: mint to the zero address\\\");\\n\\n        _beforeTokenTransfer(address(0), account, amount);\\n\\n        _totalSupply = _totalSupply.add(amount);\\n        _balances[account] = _balances[account].add(amount);\\n        emit Transfer(address(0), account, amount);\\n    }\\n\\n    /**\\n     * @dev Destroys `amount` tokens from `account`, reducing the\\n     * total supply.\\n     *\\n     * Emits a {Transfer} event with `to` set to the zero address.\\n     *\\n     * Requirements\\n     *\\n     * - `account` cannot be the zero address.\\n     * - `account` must have at least `amount` tokens.\\n     */\\n    function _burn(address account, uint256 amount) internal virtual {\\n        require(account != address(0), \\\"ERC20: burn from the zero address\\\");\\n\\n        _beforeTokenTransfer(account, address(0), amount);\\n\\n        _balances[account] = _balances[account].sub(amount, \\\"ERC20: burn amount exceeds balance\\\");\\n        _totalSupply = _totalSupply.sub(amount);\\n        emit Transfer(account, address(0), amount);\\n    }\\n\\n    /**\\n     * @dev Sets `amount` as the allowance of `spender` over the `owner`s tokens.\\n     *\\n     * This is internal function is equivalent to `approve`, and can be used to\\n     * e.g. set automatic allowances for certain subsystems, etc.\\n     *\\n     * Emits an {Approval} event.\\n     *\\n     * Requirements:\\n     *\\n     * - `owner` cannot be the zero address.\\n     * - `spender` cannot be the zero address.\\n     */\\n    function _approve(address owner, address spender, uint256 amount) internal virtual {\\n        require(owner != address(0), \\\"ERC20: approve from the zero address\\\");\\n        require(spender != address(0), \\\"ERC20: approve to the zero address\\\");\\n\\n        _allowances[owner][spender] = amount;\\n        emit Approval(owner, spender, amount);\\n    }\\n\\n    /**\\n     * @dev Sets {decimals} to a value other than the default one of 18.\\n     *\\n     * WARNING: This function should only be called from the constructor. Most\\n     * applications that interact with token contracts will not expect\\n     * {decimals} to ever change, and may work incorrectly if it does.\\n     */\\n    function _setupDecimals(uint8 decimals_) internal {\\n        _decimals = decimals_;\\n    }\\n\\n    /**\\n     * @dev Hook that is called before any transfer of tokens. This includes\\n     * minting and burning.\\n     *\\n     * Calling conditions:\\n     *\\n     * - when `from` and `to` are both non-zero, `amount` of ``from``'s tokens\\n     * will be to transferred to `to`.\\n     * - when `from` is zero, `amount` tokens will be minted for `to`.\\n     * - when `to` is zero, `amount` of ``from``'s tokens will be burned.\\n     * - `from` and `to` are never both zero.\\n     *\\n     * To learn more about hooks, head to xref:ROOT:extending-contracts.adoc#using-hooks[Using Hooks].\\n     */\\n    function _beforeTokenTransfer(address from, address to, uint256 amount) internal virtual { }\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/GSN/Context.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.6.0;\\n\\n/*\\n * @dev Provides information about the current execution context, including the\\n * sender of the transaction and its data. While these are generally available\\n * via msg.sender and msg.data, they should not be accessed in such a direct\\n * manner, since when dealing with GSN meta-transactions the account sending and\\n * paying for execution may not be the actual sender (as far as an application\\n * is concerned).\\n *\\n * This contract is only required for intermediate, library-like contracts.\\n */\\nabstract contract Context {\\n    function _msgSender() internal view virtual returns (address payable) {\\n        return msg.sender;\\n    }\\n\\n    function _msgData() internal view virtual returns (bytes memory) {\\n        this; // silence state mutability warning without generating bytecode - see https://github.com/ethereum/solidity/issues/2691\\n        return msg.data;\\n    }\\n}\\n\"\r\n    }\r\n  },\r\n  \"settings\": {\r\n    \"optimizer\": {\r\n      \"enabled\": true,\r\n      \"runs\": 200\r\n    },\r\n    \"outputSelection\": {\r\n      \"*\": {\r\n        \"*\": [\r\n          \"evm.bytecode\",\r\n          \"evm.deployedBytecode\",\r\n          \"abi\"\r\n        ]\r\n      }\r\n    },\r\n    \"libraries\": {}\r\n  }\r\n}}","ABI":"[{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"_gravityId\",\"type\":\"bytes32\"},{\"internalType\":\"uint256\",\"name\":\"_powerThreshold\",\"type\":\"uint256\"},{\"internalType\":\"address[]\",\"name\":\"_validators\",\"type\":\"address[]\"},{\"internalType\":\"uint256[]\",\"name\":\"_powers\",\"type\":\"uint256[]\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"string\",\"name\":\"_cosmosDenom\",\"type\":\"string\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"_tokenContract\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"string\",\"name\":\"_name\",\"type\":\"string\"},{\"indexed\":false,\"internalType\":\"string\",\"name\":\"_symbol\",\"type\":\"string\"},{\"indexed\":false,\"internalType\":\"uint8\",\"name\":\"_decimals\",\"type\":\"uint8\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"_eventNonce\",\"type\":\"uint256\"}],\"name\":\"ERC20DeployedEvent\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"bytes32\",\"name\":\"_invalidationId\",\"type\":\"bytes32\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"_invalidationNonce\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"bytes\",\"name\":\"_returnData\",\"type\":\"bytes\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"_eventNonce\",\"type\":\"uint256\"}],\"name\":\"LogicCallEvent\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"_tokenContract\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"_sender\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"_destination\",\"type\":\"bytes32\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"_eventNonce\",\"type\":\"uint256\"}],\"name\":\"SendToCosmosEvent\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"_batchNonce\",\"type\":\"uint256\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"_token\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"_eventNonce\",\"type\":\"uint256\"}],\"name\":\"TransactionBatchExecutedEvent\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"_newValsetNonce\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"_eventNonce\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"address[]\",\"name\":\"_validators\",\"type\":\"address[]\"},{\"indexed\":false,\"internalType\":\"uint256[]\",\"name\":\"_powers\",\"type\":\"uint256[]\"}],\"name\":\"ValsetUpdatedEvent\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"string\",\"name\":\"_cosmosDenom\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"_name\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"_symbol\",\"type\":\"string\"},{\"internalType\":\"uint8\",\"name\":\"_decimals\",\"type\":\"uint8\"}],\"name\":\"deployERC20\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_erc20Address\",\"type\":\"address\"}],\"name\":\"lastBatchNonce\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"_invalidation_id\",\"type\":\"bytes32\"}],\"name\":\"lastLogicCallNonce\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_tokenContract\",\"type\":\"address\"},{\"internalType\":\"bytes32\",\"name\":\"_destination\",\"type\":\"bytes32\"},{\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"sendToCosmos\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"state_gravityId\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"name\":\"state_invalidationMapping\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"state_lastBatchNonces\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"state_lastEventNonce\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"state_lastValsetCheckpoint\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"state_lastValsetNonce\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"state_powerThreshold\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address[]\",\"name\":\"_currentValidators\",\"type\":\"address[]\"},{\"internalType\":\"uint256[]\",\"name\":\"_currentPowers\",\"type\":\"uint256[]\"},{\"internalType\":\"uint256\",\"name\":\"_currentValsetNonce\",\"type\":\"uint256\"},{\"internalType\":\"uint8[]\",\"name\":\"_v\",\"type\":\"uint8[]\"},{\"internalType\":\"bytes32[]\",\"name\":\"_r\",\"type\":\"bytes32[]\"},{\"internalType\":\"bytes32[]\",\"name\":\"_s\",\"type\":\"bytes32[]\"},{\"internalType\":\"uint256[]\",\"name\":\"_amounts\",\"type\":\"uint256[]\"},{\"internalType\":\"address[]\",\"name\":\"_destinations\",\"type\":\"address[]\"},{\"internalType\":\"uint256[]\",\"name\":\"_fees\",\"type\":\"uint256[]\"},{\"internalType\":\"uint256\",\"name\":\"_batchNonce\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"_tokenContract\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_batchTimeout\",\"type\":\"uint256\"}],\"name\":\"submitBatch\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address[]\",\"name\":\"_currentValidators\",\"type\":\"address[]\"},{\"internalType\":\"uint256[]\",\"name\":\"_currentPowers\",\"type\":\"uint256[]\"},{\"internalType\":\"uint256\",\"name\":\"_currentValsetNonce\",\"type\":\"uint256\"},{\"internalType\":\"uint8[]\",\"name\":\"_v\",\"type\":\"uint8[]\"},{\"internalType\":\"bytes32[]\",\"name\":\"_r\",\"type\":\"bytes32[]\"},{\"internalType\":\"bytes32[]\",\"name\":\"_s\",\"type\":\"bytes32[]\"},{\"components\":[{\"internalType\":\"uint256[]\",\"name\":\"transferAmounts\",\"type\":\"uint256[]\"},{\"internalType\":\"address[]\",\"name\":\"transferTokenContracts\",\"type\":\"address[]\"},{\"internalType\":\"uint256[]\",\"name\":\"feeAmounts\",\"type\":\"uint256[]\"},{\"internalType\":\"address[]\",\"name\":\"feeTokenContracts\",\"type\":\"address[]\"},{\"internalType\":\"address\",\"name\":\"logicContractAddress\",\"type\":\"address\"},{\"internalType\":\"bytes\",\"name\":\"payload\",\"type\":\"bytes\"},{\"internalType\":\"uint256\",\"name\":\"timeOut\",\"type\":\"uint256\"},{\"internalType\":\"bytes32\",\"name\":\"invalidationId\",\"type\":\"bytes32\"},{\"internalType\":\"uint256\",\"name\":\"invalidationNonce\",\"type\":\"uint256\"}],\"internalType\":\"struct LogicCallArgs\",\"name\":\"_args\",\"type\":\"tuple\"}],\"name\":\"submitLogicCall\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address[]\",\"name\":\"_currentValidators\",\"type\":\"address[]\"},{\"internalType\":\"uint256[]\",\"name\":\"_currentPowers\",\"type\":\"uint256[]\"},{\"internalType\":\"uint8[]\",\"name\":\"_v\",\"type\":\"uint8[]\"},{\"internalType\":\"bytes32[]\",\"name\":\"_r\",\"type\":\"bytes32[]\"},{\"internalType\":\"bytes32[]\",\"name\":\"_s\",\"type\":\"bytes32[]\"},{\"internalType\":\"bytes32\",\"name\":\"_theHash\",\"type\":\"bytes32\"},{\"internalType\":\"uint256\",\"name\":\"_powerThreshold\",\"type\":\"uint256\"}],\"name\":\"testCheckValidatorSignatures\",\"outputs\":[],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address[]\",\"name\":\"_validators\",\"type\":\"address[]\"},{\"internalType\":\"uint256[]\",\"name\":\"_powers\",\"type\":\"uint256[]\"},{\"internalType\":\"uint256\",\"name\":\"_valsetNonce\",\"type\":\"uint256\"},{\"internalType\":\"bytes32\",\"name\":\"_gravityId\",\"type\":\"bytes32\"}],\"name\":\"testMakeCheckpoint\",\"outputs\":[],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address[]\",\"name\":\"_newValidators\",\"type\":\"address[]\"},{\"internalType\":\"uint256[]\",\"name\":\"_newPowers\",\"type\":\"uint256[]\"},{\"internalType\":\"uint256\",\"name\":\"_newValsetNonce\",\"type\":\"uint256\"},{\"internalType\":\"address[]\",\"name\":\"_currentValidators\",\"type\":\"address[]\"},{\"internalType\":\"uint256[]\",\"name\":\"_currentPowers\",\"type\":\"uint256[]\"},{\"internalType\":\"uint256\",\"name\":\"_currentValsetNonce\",\"type\":\"uint256\"},{\"internalType\":\"uint8[]\",\"name\":\"_v\",\"type\":\"uint8[]\"},{\"internalType\":\"bytes32[]\",\"name\":\"_r\",\"type\":\"bytes32[]\"},{\"internalType\":\"bytes32[]\",\"name\":\"_s\",\"type\":\"bytes32[]\"}],\"name\":\"updateValset\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}]","ContractName":"Gravity","CompilerVersion":"v0.6.6+commit.6c089d02","OptimizationUsed":"1","Runs":"200","ConstructorArguments":"736f6d6d656c696572000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000a8f5c28f00000000000000000000000000000000000000000000000000000000000000800000000000000000000000000000000000000000000000000000000000000140000000000000000000000000000000000000000000000000000000000000000500000000000000000000000027973b5f8c2db40441d0880bc058b6808978dfc300000000000000000000000087e454966552f7e5c675b7ec5fdb3489b81c6c51000000000000000000000000ebbb780845f68920a805f1d69ab4af7d0efc7df5000000000000000000000000fba500406fce5e9c6bf394d2701dcfc3845d4b6d0000000000000000000000005299d547188b9351ad7e479e1eb2343e455780720000000000000000000000000000000000000000000000000000000000000005000000000000000000000000000000000000000000000000000000006bb24b5e0000000000000000000000000000000000000000000000000000000025136e500000000000000000000000000000000000000000000000000000000025136e500000000000000000000000000000000000000000000000000000000025136e5000000000000000000000000000000000000000000000000000000000251369af","EVMVersion":"Default","Library":"","LicenseType":"","Proxy":"0","Implementation":"","SwarmSource":""}]}