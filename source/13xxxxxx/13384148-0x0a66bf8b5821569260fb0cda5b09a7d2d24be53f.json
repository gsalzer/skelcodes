{"status":"1","message":"OK","result":[{"SourceCode":"//SPDX-License-Identifier: MIT\r\npragma solidity ^0.8.7;\r\n\r\ninterface IERC20 {\r\n    function transfer(address _to, uint256 _amount) external returns (bool);\r\n}\r\n\r\ninterface IUniswapV2Router01 {\r\n    function factory() external pure returns (address);\r\n    function WETH() external pure returns (address);\r\n}\r\n\r\ninterface IUniswapV2Router02 is IUniswapV2Router01 {\r\n    function swapExactTokensForETHSupportingFeeOnTransferTokens(uint amountIn, uint amountOutMin, address[] calldata path, address to, uint deadline) external;\r\n    function addLiquidityETH(address token, uint amountTokenDesired, uint amountTokenMin, uint amountETHMin, address to, uint deadline) external payable returns (uint amountToken, uint amountETH, uint liquidity);\r\n}\r\n\r\ninterface IUniswapV2Factory {\r\n    function createPair(address tokenA, address tokenB) external returns (address pair);\r\n}\r\n\r\ncontract VegetaInu{\r\n    string  private _name = 'Vegeta Inu';\r\n    string  private _symbol = 'VEGI';\r\n    uint256 private _totalSupply = 1000000000;\r\n    uint8   private _decimals = 18;\r\n    address private _uniswapRouter = 0x7a250d5630B4cF539739dF2C5dAcb4c659F2488D; //0x7a250d5630B4cF539739dF2C5dAcb4c659F2488D; //Routerv2 Ethereum\r\n    \r\n    address public uniswapPair;\r\n    address public devWallet;\r\n    address public burnWallet = 0x000000000000000000000000000000000000dEaD;\r\n    uint256 public maxWalletLimit;\r\n    uint256 public maxTxLimit;\r\n    uint8   public buyBurnFee;\r\n    uint8   public buyDevFee;\r\n    uint8   public buyLiquidityFee;\r\n    uint8   public sellLiquidityFee;\r\n    uint256 public addLiquidityAmount;\r\n    \r\n    address private _owner;\r\n    bool    private _inSwap;\r\n    IUniswapV2Router02 private _uniswapV2Router;\r\n    \r\n    mapping (address => mapping (address => uint256)) private _allowances;\r\n    mapping (address => uint256) private _balances;\r\n    mapping (address => bool) private _excludedMaxWallet;\r\n    mapping (address => bool) private _excludedMaxTransaction;\r\n    mapping (address => bool) private _excludedFees;\r\n    mapping (address => bool) private _blacklisted;\r\n\r\n    event Transfer(address indexed from, address indexed to, uint256 value);\r\n    event Approval(address indexed owner, address indexed spender, uint256 value);\r\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\r\n    \r\n    receive () external payable {}\r\n    \r\n    modifier onlyOwner() {\r\n        require(_owner == msg.sender, 'Only the owner can call this function!');\r\n        _;\r\n    }\r\n    \r\n    constructor () {\r\n        emit OwnershipTransferred(_owner, msg.sender);\r\n        _owner = msg.sender;\r\n        _totalSupply = _totalSupply * 10**_decimals;\r\n        _balances[_owner] = _totalSupply;\r\n        \r\n        _uniswapV2Router = IUniswapV2Router02(_uniswapRouter);\r\n        uniswapPair = IUniswapV2Factory(_uniswapV2Router.factory()).createPair(address(this), _uniswapV2Router.WETH());\r\n        \r\n        devWallet = _owner;\r\n\r\n        maxWalletLimit = 30000000 * 10**_decimals;\r\n        maxTxLimit = 10000000 * 10**_decimals;\r\n        addLiquidityAmount = 20000000 * 10**_decimals;\r\n        \r\n        buyBurnFee = 1;\r\n        buyDevFee = 2;\r\n        buyLiquidityFee = 1;\r\n        sellLiquidityFee = 7;\r\n        \r\n        setExcludedAll(address(this));\r\n        setExcludedAll(_owner);\r\n        setExcludedAll(uniswapPair);\r\n        setExcludedAll(_uniswapRouter);\r\n    }\r\n    \r\n    function setExcludedAll(address user) public virtual onlyOwner {\r\n        setExcludedMaxTransaction(user, true);\r\n        setExcludedMaxWallet(user, true);\r\n        setExcludedFees(user, true);\r\n    }\r\n    \r\n    function setInSwap(bool status) public virtual onlyOwner {\r\n        _inSwap = status;\r\n    }\r\n    \r\n    function setAddresses(address _burnWallet, address _devWallet) public virtual onlyOwner {\r\n        burnWallet = _burnWallet;\r\n        devWallet = _devWallet;\r\n    }\r\n    \r\n    function setLimits(uint256 _maxWalletLimit, uint256 _maxTxLimit, uint256 _addLiquidityAmount) public virtual onlyOwner {\r\n        maxWalletLimit = _maxWalletLimit * 10**_decimals;\r\n        maxTxLimit = _maxTxLimit * 10**_decimals;\r\n        addLiquidityAmount = _addLiquidityAmount * 10**_decimals;\r\n    }\r\n    \r\n    function setFees(uint8 _buyBurnFee, uint8 _buyDevFee, uint8 _buyLiquidityFee, uint8 _sellLiquidityFee) public virtual onlyOwner {\r\n        buyBurnFee = _buyBurnFee;\r\n        buyDevFee = _buyDevFee;\r\n        buyLiquidityFee = _buyLiquidityFee;\r\n        sellLiquidityFee = _sellLiquidityFee;\r\n    }\r\n    \r\n    function setExcludedMaxTransaction(address user, bool status) public virtual onlyOwner {\r\n        _excludedMaxTransaction[user] = status;\r\n    }\r\n    \r\n    function setExcludedMaxWallet(address user, bool status) public virtual onlyOwner {\r\n        _excludedMaxWallet[user] = status;\r\n    }\r\n    \r\n    function setExcludedFees(address user, bool status) public virtual onlyOwner {\r\n        _excludedFees[user] = status;\r\n    }\r\n    \r\n    function setBlacklistWallet(address user, bool status) public virtual onlyOwner {\r\n        _blacklisted[user] = status;\r\n    }\r\n    \r\n    \r\n    function name() public view returns (string memory) {\r\n        return _name;\r\n    }\r\n\r\n    function symbol() public view returns (string memory) {\r\n        return _symbol;\r\n    }\r\n    \r\n    function decimals() public view returns (uint8) {\r\n        return _decimals;\r\n    }\r\n    \r\n    function totalSupply() public view returns (uint256) {\r\n        return _totalSupply;\r\n    }\r\n    \r\n    function getOwner() public view returns (address) {\r\n        return _owner;\r\n    }\r\n    \r\n    function getInSwapStatus() public view returns (bool) {\r\n        return _inSwap;\r\n    }\r\n    \r\n    function balanceOf(address account) public view returns (uint256) {\r\n        return _balances[account];\r\n    }\r\n    \r\n    function _transfer(address sender, address recipient, uint256 amount) internal virtual {\r\n        require(!_blacklisted[sender] && !_blacklisted[recipient], 'Sender or recipient is blacklisted!');\r\n        \r\n        if(!_excludedMaxTransaction[sender]) {\r\n            require(amount <= maxTxLimit, 'Exceeds max transaction limit!');\r\n        }\r\n        \r\n        if(!_excludedMaxWallet[recipient]) {\r\n            require(balanceOf(recipient) + amount <= maxWalletLimit, 'Exceeds max wallet limit!');\r\n        }\r\n        \r\n        uint256 senderBalance = balanceOf(sender);\r\n        require(senderBalance >= amount, 'Amount exceeds sender\\'s balance!');\r\n        _balances[sender] = senderBalance - amount;\r\n        \r\n        \r\n        if(sender == uniswapPair && !_excludedFees[recipient]) {\r\n            uint256 burnAmount = amount * buyBurnFee / 100;\r\n            _balances[burnWallet] += burnAmount;\r\n            emit Transfer(sender, burnWallet, burnAmount);\r\n            \r\n            uint256 devAmount = amount * buyDevFee / 100;\r\n            _balances[devWallet] += devAmount;\r\n            emit Transfer(sender, devWallet, devAmount);\r\n            \r\n            uint256 liquidityAmount = amount * buyLiquidityFee / 100;\r\n            _balances[address(this)] += liquidityAmount;\r\n            emit Transfer(sender, address(this), liquidityAmount);\r\n            \r\n            amount -= burnAmount + devAmount + liquidityAmount;\r\n        }\r\n        \r\n        else if (recipient == uniswapPair && !_excludedFees[sender]) {\r\n            uint256 liquidityAmount = amount * sellLiquidityFee / 100;\r\n            _balances[address(this)] += liquidityAmount;\r\n            emit Transfer(recipient, address(this), liquidityAmount);\r\n            amount -= liquidityAmount;\r\n            \r\n            swapAddLiquidity();\r\n        }\r\n        \r\n        _balances[recipient] += amount;\r\n        \r\n        emit Transfer(sender, recipient, amount);\r\n    }\r\n    \r\n    function addLiquidity(uint256 tokenAmount, uint256 amount) internal virtual {\r\n        _approve(address(this), address(_uniswapRouter), tokenAmount);\r\n        _uniswapV2Router.addLiquidityETH{value: amount}(address(this), tokenAmount, 0, 0, address(this), block.timestamp);\r\n    }\r\n    \r\n    function swapTokensForEth(uint256 amount) internal virtual {\r\n        address[] memory path = new address[](2);\r\n        path[0] = address(this);\r\n        path[1] = _uniswapV2Router.WETH();\r\n        _approve(address(this), _uniswapRouter, amount);\r\n        _uniswapV2Router.swapExactTokensForETHSupportingFeeOnTransferTokens(amount, 0, path, address(this), block.timestamp);\r\n    }\r\n    \r\n    function swapAddLiquidity() internal virtual {\r\n        uint256 tokenBalance = balanceOf(address(this));\r\n        if(!_inSwap && tokenBalance >= addLiquidityAmount) {\r\n            _inSwap = true;\r\n            \r\n            uint256 sellAmount = tokenBalance;\r\n            \r\n            uint256 sellHalf = sellAmount / 2;\r\n\r\n            uint256 initialEth = address(this).balance;\r\n            swapTokensForEth(sellHalf);\r\n            \r\n            uint256 receivedEth = address(this).balance - initialEth;\r\n            addLiquidity(sellAmount - sellHalf, receivedEth);\r\n            \r\n            _inSwap = false;\r\n        }\r\n    }\r\n    \r\n    function _approve(address owner, address spender, uint256 amount) internal virtual {\r\n        require(owner != address(0), 'Wallet address can not be the zero address!');\r\n        require(spender != address(0), 'Spender can not be the zero address!');\r\n        _allowances[owner][spender] = amount;\r\n        emit Approval(owner, spender, amount);\r\n    }\r\n    \r\n    function transfer(address recipient, uint256 amount) public virtual returns (bool) {\r\n        _transfer(msg.sender, recipient, amount);\r\n        return true;\r\n    }\r\n    \r\n    function transferFrom(address sender, address recipient, uint256 amount) public virtual returns (bool) {\r\n        uint256 currentAllowance = _allowances[sender][msg.sender];\r\n        require(currentAllowance >= amount, 'Amount exceeds allowance!');\r\n        _transfer(sender, recipient, amount);\r\n        _approve(sender, msg.sender, currentAllowance - amount);\r\n        return true;\r\n    }\r\n    \r\n    function approve(address spender, uint256 amount) public virtual returns (bool) {\r\n        _approve(msg.sender, spender, amount);\r\n        return true;\r\n    }\r\n    \r\n    function allowance(address owner, address spender) public view virtual returns (uint256) {\r\n        return _allowances[owner][spender];\r\n    }\r\n\r\n    function increaseAllowance(address spender, uint256 addedValue) public virtual returns (bool) {\r\n        _approve(msg.sender, spender, _allowances[msg.sender][spender] + addedValue);\r\n        return true;\r\n    }\r\n    \r\n    function decreaseAllowance(address spender, uint256 subtractedValue) public virtual returns (bool) {\r\n        uint256 currentAllowance = _allowances[msg.sender][spender];\r\n        require(currentAllowance >= subtractedValue, 'Decreased allowance below zero!');\r\n        _approve(msg.sender, spender, currentAllowance - subtractedValue);\r\n        return true;\r\n    }\r\n    \r\n    function transferOwnership(address newOwner) public virtual onlyOwner {\r\n        require(newOwner != address(0), 'Owner can not be the zero address!');\r\n        emit OwnershipTransferred(_owner, newOwner);\r\n        _owner = newOwner;\r\n    }\r\n    \r\n    function renounceOwnership() public virtual onlyOwner {\r\n        emit OwnershipTransferred(_owner, address(0));\r\n        _owner = address(0);\r\n    }\r\n    \r\n    function withdraw(uint256 amount) public payable onlyOwner returns (bool) {\r\n        require(amount <= address(this).balance, 'Withdrawal amount exceeds balance!');\r\n        payable(msg.sender).transfer(amount);\r\n        return true;\r\n    }\r\n    \r\n    function withdrawToken(address tokenContract, uint256 amount) public virtual onlyOwner {\r\n        IERC20 _tokenContract = IERC20(tokenContract);\r\n        _tokenContract.transfer(msg.sender, amount);\r\n    }\r\n}","ABI":"[{\"inputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Approval\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Transfer\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"addLiquidityAmount\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"}],\"name\":\"allowance\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"approve\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"burnWallet\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"buyBurnFee\",\"outputs\":[{\"internalType\":\"uint8\",\"name\":\"\",\"type\":\"uint8\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"buyDevFee\",\"outputs\":[{\"internalType\":\"uint8\",\"name\":\"\",\"type\":\"uint8\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"buyLiquidityFee\",\"outputs\":[{\"internalType\":\"uint8\",\"name\":\"\",\"type\":\"uint8\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"decimals\",\"outputs\":[{\"internalType\":\"uint8\",\"name\":\"\",\"type\":\"uint8\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"subtractedValue\",\"type\":\"uint256\"}],\"name\":\"decreaseAllowance\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"devWallet\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getInSwapStatus\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getOwner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"addedValue\",\"type\":\"uint256\"}],\"name\":\"increaseAllowance\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"maxTxLimit\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"maxWalletLimit\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"name\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"sellLiquidityFee\",\"outputs\":[{\"internalType\":\"uint8\",\"name\":\"\",\"type\":\"uint8\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_burnWallet\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_devWallet\",\"type\":\"address\"}],\"name\":\"setAddresses\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"},{\"internalType\":\"bool\",\"name\":\"status\",\"type\":\"bool\"}],\"name\":\"setBlacklistWallet\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"}],\"name\":\"setExcludedAll\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"},{\"internalType\":\"bool\",\"name\":\"status\",\"type\":\"bool\"}],\"name\":\"setExcludedFees\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"},{\"internalType\":\"bool\",\"name\":\"status\",\"type\":\"bool\"}],\"name\":\"setExcludedMaxTransaction\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"},{\"internalType\":\"bool\",\"name\":\"status\",\"type\":\"bool\"}],\"name\":\"setExcludedMaxWallet\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint8\",\"name\":\"_buyBurnFee\",\"type\":\"uint8\"},{\"internalType\":\"uint8\",\"name\":\"_buyDevFee\",\"type\":\"uint8\"},{\"internalType\":\"uint8\",\"name\":\"_buyLiquidityFee\",\"type\":\"uint8\"},{\"internalType\":\"uint8\",\"name\":\"_sellLiquidityFee\",\"type\":\"uint8\"}],\"name\":\"setFees\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bool\",\"name\":\"status\",\"type\":\"bool\"}],\"name\":\"setInSwap\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_maxWalletLimit\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_maxTxLimit\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_addLiquidityAmount\",\"type\":\"uint256\"}],\"name\":\"setLimits\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"symbol\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalSupply\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"recipient\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"transfer\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"recipient\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"transferFrom\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"uniswapPair\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"withdraw\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"tokenContract\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"withdrawToken\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"stateMutability\":\"payable\",\"type\":\"receive\"}]","ContractName":"VegetaInu","CompilerVersion":"v0.8.7+commit.e28d00a7","OptimizationUsed":"0","Runs":"200","ConstructorArguments":"","EVMVersion":"Default","Library":"","LicenseType":"MIT","Proxy":"0","Implementation":"","SwarmSource":"ipfs://92d847d83ba4051d81eb8f96bd39339cce5183e4db8ca6cbb3e83fd4567b0799"}]}