{"status":"1","message":"OK","result":[{"SourceCode":"{{\r\n  \"language\": \"Solidity\",\r\n  \"sources\": {\r\n    \"contracts/oracle/PriceProvider.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: agpl-3.0\\n\\npragma solidity 0.6.12;\\n\\nimport \\\"@openzeppelin/contracts/access/Ownable.sol\\\";\\nimport \\\"../interfaces/IPriceFeed.sol\\\";\\nimport \\\"../interfaces/IPriceProvider.sol\\\";\\nimport \\\"../interfaces/IConfigurationManager.sol\\\";\\n\\n/**\\n * @title PriceProvider\\n * @author Pods Finance\\n * @notice Storage of prices feeds by asset\\n */\\ncontract PriceProvider is IPriceProvider, Ownable {\\n    /**\\n     * @dev store globally accessed configurations\\n     */\\n    IConfigurationManager public immutable configurationManager;\\n\\n    /**\\n     * @dev Minimum price interval to accept a price feed\\n     */\\n    uint256 public minUpdateInterval;\\n\\n    /**\\n     * @dev Stores PriceFeed by asset address\\n     */\\n    mapping(address => IPriceFeed) private _assetPriceFeeds;\\n\\n    event AssetFeedUpdated(address indexed asset, address indexed feed);\\n    event AssetFeedRemoved(address indexed asset, address indexed feed);\\n\\n    constructor(\\n        IConfigurationManager _configurationManager,\\n        address[] memory _assets,\\n        address[] memory _feeds\\n    ) public {\\n        configurationManager = _configurationManager;\\n\\n        minUpdateInterval = _configurationManager.getParameter(\\\"MIN_UPDATE_INTERVAL\\\");\\n\\n        require(minUpdateInterval < block.timestamp, \\\"PriceProvider: Invalid minUpdateInterval\\\");\\n\\n        _setAssetFeeds(_assets, _feeds);\\n    }\\n\\n    /**\\n     * @notice Register price feeds\\n     * @param _assets Array of assets\\n     * @param _feeds Array of price feeds\\n     */\\n    function setAssetFeeds(address[] memory _assets, address[] memory _feeds) external override onlyOwner {\\n        _setAssetFeeds(_assets, _feeds);\\n    }\\n\\n    /**\\n     * @notice Updates previously registered price feeds\\n     * @param _assets Array of assets\\n     * @param _feeds Array of price feeds\\n     */\\n    function updateAssetFeeds(address[] memory _assets, address[] memory _feeds) external override onlyOwner {\\n        for (uint256 i = 0; i < _assets.length; i++) {\\n            require(address(_assetPriceFeeds[_assets[i]]) != address(0), \\\"PriceProvider: PriceFeed not set\\\");\\n        }\\n        _setAssetFeeds(_assets, _feeds);\\n    }\\n\\n    /**\\n     * @notice Unregister price feeds\\n     * @dev Will not remove unregistered assets\\n     * @param _assets Array of assets\\n     */\\n    function removeAssetFeeds(address[] memory _assets) external override onlyOwner {\\n        for (uint256 i = 0; i < _assets.length; i++) {\\n            address removedFeed = address(_assetPriceFeeds[_assets[i]]);\\n\\n            if (removedFeed != address(0)) {\\n                delete _assetPriceFeeds[_assets[i]];\\n                emit AssetFeedRemoved(_assets[i], removedFeed);\\n            }\\n        }\\n    }\\n\\n    /**\\n     * @notice Update minUpdateInterval fetching from configurationManager\\n     */\\n    function updateMinUpdateInterval() external override {\\n        minUpdateInterval = configurationManager.getParameter(\\\"MIN_UPDATE_INTERVAL\\\");\\n        require(minUpdateInterval < block.timestamp, \\\"PriceProvider: Invalid minUpdateInterval\\\");\\n    }\\n\\n    /**\\n     * @notice Gets the current price of an asset\\n     * @param _asset Address of an asset\\n     * @return Current price\\n     */\\n    function getAssetPrice(address _asset) external override view returns (uint256) {\\n        IPriceFeed feed = _assetPriceFeeds[_asset];\\n        require(address(feed) != address(0), \\\"PriceProvider: Feed not registered\\\");\\n        (int256 price, uint256 updatedAt) = feed.getLatestPrice();\\n        require(!_isObsolete(updatedAt), \\\"PriceProvider: stale PriceFeed\\\");\\n        require(price > 0, \\\"PriceProvider: Negative price\\\");\\n\\n        return uint256(price);\\n    }\\n\\n    /**\\n     * @notice Get the data from the latest round.\\n     * @param _asset Address of an asset\\n     * @return roundId is the round ID from the aggregator for which the data was\\n     * retrieved combined with an phase to ensure that round IDs get larger as\\n     * time moves forward.\\n     * @return answer is the answer for the given round\\n     * @return startedAt is the timestamp when the round was started.\\n     * (Only some AggregatorV3Interface implementations return meaningful values)\\n     * @return updatedAt is the timestamp when the round last was updated (i.e.\\n     * answer was last computed)\\n     * @return answeredInRound is the round ID of the round in which the answer\\n     * was computed.\\n     */\\n    function latestRoundData(address _asset)\\n        external\\n        override\\n        view\\n        returns (\\n            uint80 roundId,\\n            int256 answer,\\n            uint256 startedAt,\\n            uint256 updatedAt,\\n            uint80 answeredInRound\\n        )\\n    {\\n        IPriceFeed feed = _assetPriceFeeds[_asset];\\n        require(address(feed) != address(0), \\\"PriceProvider: Feed not registered\\\");\\n\\n        return feed.latestRoundData();\\n    }\\n\\n    /**\\n     * @notice Gets the number of decimals of a PriceFeed\\n     * @param _asset Address of an asset\\n     * @return Asset price decimals\\n     */\\n    function getAssetDecimals(address _asset) external override view returns (uint8) {\\n        IPriceFeed feed = _assetPriceFeeds[_asset];\\n        require(address(feed) != address(0), \\\"PriceProvider: Feed not registered\\\");\\n\\n        return feed.decimals();\\n    }\\n\\n    /**\\n     * @notice Get the address of a registered price feed\\n     * @param _asset Address of an asset\\n     * @return Price feed address\\n     */\\n    function getPriceFeed(address _asset) external override view returns (address) {\\n        return address(_assetPriceFeeds[_asset]);\\n    }\\n\\n    /**\\n     * @dev Internal function to set price feeds for different assets\\n     * @param _assets Array of assets\\n     * @param _feeds Array of price feeds\\n     */\\n    function _setAssetFeeds(address[] memory _assets, address[] memory _feeds) internal {\\n        require(_assets.length == _feeds.length, \\\"PriceProvider: inconsistent params length\\\");\\n        for (uint256 i = 0; i < _assets.length; i++) {\\n            IPriceFeed feed = IPriceFeed(_feeds[i]);\\n            require(address(feed) != address(0), \\\"PriceProvider: invalid PriceFeed\\\");\\n\\n            (, , uint256 startedAt, uint256 updatedAt, ) = feed.latestRoundData();\\n\\n            require(startedAt > 0, \\\"PriceProvider: PriceFeed not started\\\");\\n            require(!_isObsolete(updatedAt), \\\"PriceProvider: stale PriceFeed\\\");\\n\\n            _assetPriceFeeds[_assets[i]] = feed;\\n            emit AssetFeedUpdated(_assets[i], _feeds[i]);\\n        }\\n    }\\n\\n    /**\\n     * @dev Internal function to check if a given timestamp is obsolete\\n     * @param _timestamp The timestamp to check\\n     */\\n    function _isObsolete(uint256 _timestamp) internal view returns (bool) {\\n        return _timestamp < (block.timestamp - minUpdateInterval);\\n    }\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/access/Ownable.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity >=0.6.0 <0.8.0;\\n\\nimport \\\"../utils/Context.sol\\\";\\n/**\\n * @dev Contract module which provides a basic access control mechanism, where\\n * there is an account (an owner) that can be granted exclusive access to\\n * specific functions.\\n *\\n * By default, the owner account will be the one that deploys the contract. This\\n * can later be changed with {transferOwnership}.\\n *\\n * This module is used through inheritance. It will make available the modifier\\n * `onlyOwner`, which can be applied to your functions to restrict their use to\\n * the owner.\\n */\\nabstract contract Ownable is Context {\\n    address private _owner;\\n\\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\\n\\n    /**\\n     * @dev Initializes the contract setting the deployer as the initial owner.\\n     */\\n    constructor () internal {\\n        address msgSender = _msgSender();\\n        _owner = msgSender;\\n        emit OwnershipTransferred(address(0), msgSender);\\n    }\\n\\n    /**\\n     * @dev Returns the address of the current owner.\\n     */\\n    function owner() public view virtual returns (address) {\\n        return _owner;\\n    }\\n\\n    /**\\n     * @dev Throws if called by any account other than the owner.\\n     */\\n    modifier onlyOwner() {\\n        require(owner() == _msgSender(), \\\"Ownable: caller is not the owner\\\");\\n        _;\\n    }\\n\\n    /**\\n     * @dev Leaves the contract without owner. It will not be possible to call\\n     * `onlyOwner` functions anymore. Can only be called by the current owner.\\n     *\\n     * NOTE: Renouncing ownership will leave the contract without an owner,\\n     * thereby removing any functionality that is only available to the owner.\\n     */\\n    function renounceOwnership() public virtual onlyOwner {\\n        emit OwnershipTransferred(_owner, address(0));\\n        _owner = address(0);\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Can only be called by the current owner.\\n     */\\n    function transferOwnership(address newOwner) public virtual onlyOwner {\\n        require(newOwner != address(0), \\\"Ownable: new owner is the zero address\\\");\\n        emit OwnershipTransferred(_owner, newOwner);\\n        _owner = newOwner;\\n    }\\n}\\n\"\r\n    },\r\n    \"contracts/interfaces/IPriceFeed.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: agpl-3.0\\n\\npragma solidity 0.6.12;\\n\\ninterface IPriceFeed {\\n    function getLatestPrice() external view returns (int256, uint256);\\n\\n    function latestRoundData()\\n        external\\n        view\\n        returns (\\n            uint80 roundId,\\n            int256 answer,\\n            uint256 startedAt,\\n            uint256 updatedAt,\\n            uint80 answeredInRound\\n        );\\n\\n    function decimals() external view returns (uint8);\\n}\\n\"\r\n    },\r\n    \"contracts/interfaces/IPriceProvider.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: agpl-3.0\\n\\npragma solidity 0.6.12;\\n\\ninterface IPriceProvider {\\n    function setAssetFeeds(address[] memory _assets, address[] memory _feeds) external;\\n\\n    function updateAssetFeeds(address[] memory _assets, address[] memory _feeds) external;\\n\\n    function removeAssetFeeds(address[] memory _assets) external;\\n\\n    function getAssetPrice(address _asset) external view returns (uint256);\\n\\n    function getAssetDecimals(address _asset) external view returns (uint8);\\n\\n    function latestRoundData(address _asset)\\n        external\\n        view\\n        returns (\\n            uint80 roundId,\\n            int256 answer,\\n            uint256 startedAt,\\n            uint256 updatedAt,\\n            uint80 answeredInRound\\n        );\\n\\n    function getPriceFeed(address _asset) external view returns (address);\\n\\n    function updateMinUpdateInterval() external;\\n}\\n\"\r\n    },\r\n    \"contracts/interfaces/IConfigurationManager.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: agpl-3.0\\n\\npragma solidity >=0.6.12;\\n\\ninterface IConfigurationManager {\\n    function setParameter(bytes32 name, uint256 value) external;\\n\\n    function setEmergencyStop(address emergencyStop) external;\\n\\n    function setPricingMethod(address pricingMethod) external;\\n\\n    function setIVGuesser(address ivGuesser) external;\\n\\n    function setIVProvider(address ivProvider) external;\\n\\n    function setPriceProvider(address priceProvider) external;\\n\\n    function setCapProvider(address capProvider) external;\\n\\n    function setAMMFactory(address ammFactory) external;\\n\\n    function setOptionFactory(address optionFactory) external;\\n\\n    function setOptionHelper(address optionHelper) external;\\n\\n    function setOptionPoolRegistry(address optionPoolRegistry) external;\\n\\n    function getParameter(bytes32 name) external view returns (uint256);\\n\\n    function owner() external view returns (address);\\n\\n    function getEmergencyStop() external view returns (address);\\n\\n    function getPricingMethod() external view returns (address);\\n\\n    function getIVGuesser() external view returns (address);\\n\\n    function getIVProvider() external view returns (address);\\n\\n    function getPriceProvider() external view returns (address);\\n\\n    function getCapProvider() external view returns (address);\\n\\n    function getAMMFactory() external view returns (address);\\n\\n    function getOptionFactory() external view returns (address);\\n\\n    function getOptionHelper() external view returns (address);\\n\\n    function getOptionPoolRegistry() external view returns (address);\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/utils/Context.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity >=0.6.0 <0.8.0;\\n\\n/*\\n * @dev Provides information about the current execution context, including the\\n * sender of the transaction and its data. While these are generally available\\n * via msg.sender and msg.data, they should not be accessed in such a direct\\n * manner, since when dealing with GSN meta-transactions the account sending and\\n * paying for execution may not be the actual sender (as far as an application\\n * is concerned).\\n *\\n * This contract is only required for intermediate, library-like contracts.\\n */\\nabstract contract Context {\\n    function _msgSender() internal view virtual returns (address payable) {\\n        return msg.sender;\\n    }\\n\\n    function _msgData() internal view virtual returns (bytes memory) {\\n        this; // silence state mutability warning without generating bytecode - see https://github.com/ethereum/solidity/issues/2691\\n        return msg.data;\\n    }\\n}\\n\"\r\n    }\r\n  },\r\n  \"settings\": {\r\n    \"optimizer\": {\r\n      \"enabled\": true,\r\n      \"runs\": 200\r\n    },\r\n    \"outputSelection\": {\r\n      \"*\": {\r\n        \"*\": [\r\n          \"evm.bytecode\",\r\n          \"evm.deployedBytecode\",\r\n          \"abi\"\r\n        ]\r\n      }\r\n    },\r\n    \"libraries\": {}\r\n  }\r\n}}","ABI":"[{\"inputs\":[{\"internalType\":\"contract IConfigurationManager\",\"name\":\"_configurationManager\",\"type\":\"address\"},{\"internalType\":\"address[]\",\"name\":\"_assets\",\"type\":\"address[]\"},{\"internalType\":\"address[]\",\"name\":\"_feeds\",\"type\":\"address[]\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"asset\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"feed\",\"type\":\"address\"}],\"name\":\"AssetFeedRemoved\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"asset\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"feed\",\"type\":\"address\"}],\"name\":\"AssetFeedUpdated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"configurationManager\",\"outputs\":[{\"internalType\":\"contract IConfigurationManager\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_asset\",\"type\":\"address\"}],\"name\":\"getAssetDecimals\",\"outputs\":[{\"internalType\":\"uint8\",\"name\":\"\",\"type\":\"uint8\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_asset\",\"type\":\"address\"}],\"name\":\"getAssetPrice\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_asset\",\"type\":\"address\"}],\"name\":\"getPriceFeed\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_asset\",\"type\":\"address\"}],\"name\":\"latestRoundData\",\"outputs\":[{\"internalType\":\"uint80\",\"name\":\"roundId\",\"type\":\"uint80\"},{\"internalType\":\"int256\",\"name\":\"answer\",\"type\":\"int256\"},{\"internalType\":\"uint256\",\"name\":\"startedAt\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"updatedAt\",\"type\":\"uint256\"},{\"internalType\":\"uint80\",\"name\":\"answeredInRound\",\"type\":\"uint80\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"minUpdateInterval\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address[]\",\"name\":\"_assets\",\"type\":\"address[]\"}],\"name\":\"removeAssetFeeds\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address[]\",\"name\":\"_assets\",\"type\":\"address[]\"},{\"internalType\":\"address[]\",\"name\":\"_feeds\",\"type\":\"address[]\"}],\"name\":\"setAssetFeeds\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address[]\",\"name\":\"_assets\",\"type\":\"address[]\"},{\"internalType\":\"address[]\",\"name\":\"_feeds\",\"type\":\"address[]\"}],\"name\":\"updateAssetFeeds\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"updateMinUpdateInterval\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}]","ContractName":"PriceProvider","CompilerVersion":"v0.6.12+commit.27d51765","OptimizationUsed":"1","Runs":"200","ConstructorArguments":"000000000000000000000000e4da64757b2b29db43429a52caf7ad884c76f8b00000000000000000000000000000000000000000000000000000000000000060000000000000000000000000000000000000000000000000000000000000008000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000","EVMVersion":"Default","Library":"","LicenseType":"","Proxy":"0","Implementation":"","SwarmSource":""}]}