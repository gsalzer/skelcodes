{"status":"1","message":"OK","result":[{"SourceCode":"// SPDX-License-Identifier: MIT\r\n// Sources flattened with hardhat v2.5.0 https://hardhat.org\r\n\r\n// File @openzeppelin/contracts/token/ERC20/IERC20.sol@v4.1.0\r\n\r\n\r\npragma solidity ^0.8.0;\r\n\r\n/**\r\n * @dev Interface of the ERC20 standard as defined in the EIP.\r\n */\r\ninterface IERC20 {\r\n    /**\r\n     * @dev Returns the amount of tokens in existence.\r\n     */\r\n    function totalSupply() external view returns (uint256);\r\n\r\n    /**\r\n     * @dev Returns the amount of tokens owned by `account`.\r\n     */\r\n    function balanceOf(address account) external view returns (uint256);\r\n\r\n    /**\r\n     * @dev Moves `amount` tokens from the caller's account to `recipient`.\r\n     *\r\n     * Returns a boolean value indicating whether the operation succeeded.\r\n     *\r\n     * Emits a {Transfer} event.\r\n     */\r\n    function transfer(address recipient, uint256 amount) external returns (bool);\r\n\r\n    /**\r\n     * @dev Returns the remaining number of tokens that `spender` will be\r\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\r\n     * zero by default.\r\n     *\r\n     * This value changes when {approve} or {transferFrom} are called.\r\n     */\r\n    function allowance(address owner, address spender) external view returns (uint256);\r\n\r\n    /**\r\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\r\n     *\r\n     * Returns a boolean value indicating whether the operation succeeded.\r\n     *\r\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\r\n     * that someone may use both the old and the new allowance by unfortunate\r\n     * transaction ordering. One possible solution to mitigate this race\r\n     * condition is to first reduce the spender's allowance to 0 and set the\r\n     * desired value afterwards:\r\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\r\n     *\r\n     * Emits an {Approval} event.\r\n     */\r\n    function approve(address spender, uint256 amount) external returns (bool);\r\n\r\n    /**\r\n     * @dev Moves `amount` tokens from `sender` to `recipient` using the\r\n     * allowance mechanism. `amount` is then deducted from the caller's\r\n     * allowance.\r\n     *\r\n     * Returns a boolean value indicating whether the operation succeeded.\r\n     *\r\n     * Emits a {Transfer} event.\r\n     */\r\n    function transferFrom(address sender, address recipient, uint256 amount) external returns (bool);\r\n\r\n    /**\r\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\r\n     * another (`to`).\r\n     *\r\n     * Note that `value` may be zero.\r\n     */\r\n    event Transfer(address indexed from, address indexed to, uint256 value);\r\n\r\n    /**\r\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\r\n     * a call to {approve}. `value` is the new allowance.\r\n     */\r\n    event Approval(address indexed owner, address indexed spender, uint256 value);\r\n}\r\n\r\n\r\n// File @openzeppelin/contracts/token/ERC20/extensions/IERC20Metadata.sol@v4.1.0\r\n\r\n\r\npragma solidity ^0.8.0;\r\n\r\n/**\r\n * @dev Interface for the optional metadata functions from the ERC20 standard.\r\n *\r\n * _Available since v4.1._\r\n */\r\ninterface IERC20Metadata is IERC20 {\r\n    /**\r\n     * @dev Returns the name of the token.\r\n     */\r\n    function name() external view returns (string memory);\r\n\r\n    /**\r\n     * @dev Returns the symbol of the token.\r\n     */\r\n    function symbol() external view returns (string memory);\r\n\r\n    /**\r\n     * @dev Returns the decimals places of the token.\r\n     */\r\n    function decimals() external view returns (uint8);\r\n}\r\n\r\n\r\n// File @openzeppelin/contracts/utils/Context.sol@v4.1.0\r\n\r\n\r\npragma solidity ^0.8.0;\r\n\r\n/*\r\n * @dev Provides information about the current execution context, including the\r\n * sender of the transaction and its data. While these are generally available\r\n * via msg.sender and msg.data, they should not be accessed in such a direct\r\n * manner, since when dealing with meta-transactions the account sending and\r\n * paying for execution may not be the actual sender (as far as an application\r\n * is concerned).\r\n *\r\n * This contract is only required for intermediate, library-like contracts.\r\n */\r\nabstract contract Context {\r\n    function _msgSender() internal view virtual returns (address) {\r\n        return msg.sender;\r\n    }\r\n\r\n    function _msgData() internal view virtual returns (bytes calldata) {\r\n        this; // silence state mutability warning without generating bytecode - see https://github.com/ethereum/solidity/issues/2691\r\n        return msg.data;\r\n    }\r\n}\r\n\r\n\r\n// File @openzeppelin/contracts/token/ERC20/ERC20.sol@v4.1.0\r\n\r\n\r\npragma solidity ^0.8.0;\r\n\r\n\r\n\r\n/**\r\n * @dev Implementation of the {IERC20} interface.\r\n *\r\n * This implementation is agnostic to the way tokens are created. This means\r\n * that a supply mechanism has to be added in a derived contract using {_mint}.\r\n * For a generic mechanism see {ERC20PresetMinterPauser}.\r\n *\r\n * TIP: For a detailed writeup see our guide\r\n * https://forum.zeppelin.solutions/t/how-to-implement-erc20-supply-mechanisms/226[How\r\n * to implement supply mechanisms].\r\n *\r\n * We have followed general OpenZeppelin guidelines: functions revert instead\r\n * of returning `false` on failure. This behavior is nonetheless conventional\r\n * and does not conflict with the expectations of ERC20 applications.\r\n *\r\n * Additionally, an {Approval} event is emitted on calls to {transferFrom}.\r\n * This allows applications to reconstruct the allowance for all accounts just\r\n * by listening to said events. Other implementations of the EIP may not emit\r\n * these events, as it isn't required by the specification.\r\n *\r\n * Finally, the non-standard {decreaseAllowance} and {increaseAllowance}\r\n * functions have been added to mitigate the well-known issues around setting\r\n * allowances. See {IERC20-approve}.\r\n */\r\ncontract ERC20 is Context, IERC20, IERC20Metadata {\r\n    mapping (address => uint256) private _balances;\r\n\r\n    mapping (address => mapping (address => uint256)) private _allowances;\r\n\r\n    uint256 private _totalSupply;\r\n\r\n    string private _name;\r\n    string private _symbol;\r\n\r\n    /**\r\n     * @dev Sets the values for {name} and {symbol}.\r\n     *\r\n     * The defaut value of {decimals} is 18. To select a different value for\r\n     * {decimals} you should overload it.\r\n     *\r\n     * All two of these values are immutable: they can only be set once during\r\n     * construction.\r\n     */\r\n    constructor (string memory name_, string memory symbol_) {\r\n        _name = name_;\r\n        _symbol = symbol_;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the name of the token.\r\n     */\r\n    function name() public view virtual override returns (string memory) {\r\n        return _name;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the symbol of the token, usually a shorter version of the\r\n     * name.\r\n     */\r\n    function symbol() public view virtual override returns (string memory) {\r\n        return _symbol;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the number of decimals used to get its user representation.\r\n     * For example, if `decimals` equals `2`, a balance of `505` tokens should\r\n     * be displayed to a user as `5,05` (`505 / 10 ** 2`).\r\n     *\r\n     * Tokens usually opt for a value of 18, imitating the relationship between\r\n     * Ether and Wei. This is the value {ERC20} uses, unless this function is\r\n     * overridden;\r\n     *\r\n     * NOTE: This information is only used for _display_ purposes: it in\r\n     * no way affects any of the arithmetic of the contract, including\r\n     * {IERC20-balanceOf} and {IERC20-transfer}.\r\n     */\r\n    function decimals() public view virtual override returns (uint8) {\r\n        return 18;\r\n    }\r\n\r\n    /**\r\n     * @dev See {IERC20-totalSupply}.\r\n     */\r\n    function totalSupply() public view virtual override returns (uint256) {\r\n        return _totalSupply;\r\n    }\r\n\r\n    /**\r\n     * @dev See {IERC20-balanceOf}.\r\n     */\r\n    function balanceOf(address account) public view virtual override returns (uint256) {\r\n        return _balances[account];\r\n    }\r\n\r\n    /**\r\n     * @dev See {IERC20-transfer}.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - `recipient` cannot be the zero address.\r\n     * - the caller must have a balance of at least `amount`.\r\n     */\r\n    function transfer(address recipient, uint256 amount) public virtual override returns (bool) {\r\n        _transfer(_msgSender(), recipient, amount);\r\n        return true;\r\n    }\r\n\r\n    /**\r\n     * @dev See {IERC20-allowance}.\r\n     */\r\n    function allowance(address owner, address spender) public view virtual override returns (uint256) {\r\n        return _allowances[owner][spender];\r\n    }\r\n\r\n    /**\r\n     * @dev See {IERC20-approve}.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - `spender` cannot be the zero address.\r\n     */\r\n    function approve(address spender, uint256 amount) public virtual override returns (bool) {\r\n        _approve(_msgSender(), spender, amount);\r\n        return true;\r\n    }\r\n\r\n    /**\r\n     * @dev See {IERC20-transferFrom}.\r\n     *\r\n     * Emits an {Approval} event indicating the updated allowance. This is not\r\n     * required by the EIP. See the note at the beginning of {ERC20}.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - `sender` and `recipient` cannot be the zero address.\r\n     * - `sender` must have a balance of at least `amount`.\r\n     * - the caller must have allowance for ``sender``'s tokens of at least\r\n     * `amount`.\r\n     */\r\n    function transferFrom(address sender, address recipient, uint256 amount) public virtual override returns (bool) {\r\n        _transfer(sender, recipient, amount);\r\n\r\n        uint256 currentAllowance = _allowances[sender][_msgSender()];\r\n        require(currentAllowance >= amount, \"ERC20: transfer amount exceeds allowance\");\r\n        _approve(sender, _msgSender(), currentAllowance - amount);\r\n\r\n        return true;\r\n    }\r\n\r\n    /**\r\n     * @dev Atomically increases the allowance granted to `spender` by the caller.\r\n     *\r\n     * This is an alternative to {approve} that can be used as a mitigation for\r\n     * problems described in {IERC20-approve}.\r\n     *\r\n     * Emits an {Approval} event indicating the updated allowance.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - `spender` cannot be the zero address.\r\n     */\r\n    function increaseAllowance(address spender, uint256 addedValue) public virtual returns (bool) {\r\n        _approve(_msgSender(), spender, _allowances[_msgSender()][spender] + addedValue);\r\n        return true;\r\n    }\r\n\r\n    /**\r\n     * @dev Atomically decreases the allowance granted to `spender` by the caller.\r\n     *\r\n     * This is an alternative to {approve} that can be used as a mitigation for\r\n     * problems described in {IERC20-approve}.\r\n     *\r\n     * Emits an {Approval} event indicating the updated allowance.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - `spender` cannot be the zero address.\r\n     * - `spender` must have allowance for the caller of at least\r\n     * `subtractedValue`.\r\n     */\r\n    function decreaseAllowance(address spender, uint256 subtractedValue) public virtual returns (bool) {\r\n        uint256 currentAllowance = _allowances[_msgSender()][spender];\r\n        require(currentAllowance >= subtractedValue, \"ERC20: decreased allowance below zero\");\r\n        _approve(_msgSender(), spender, currentAllowance - subtractedValue);\r\n\r\n        return true;\r\n    }\r\n\r\n    /**\r\n     * @dev Moves tokens `amount` from `sender` to `recipient`.\r\n     *\r\n     * This is internal function is equivalent to {transfer}, and can be used to\r\n     * e.g. implement automatic token fees, slashing mechanisms, etc.\r\n     *\r\n     * Emits a {Transfer} event.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - `sender` cannot be the zero address.\r\n     * - `recipient` cannot be the zero address.\r\n     * - `sender` must have a balance of at least `amount`.\r\n     */\r\n    function _transfer(address sender, address recipient, uint256 amount) internal virtual {\r\n        require(sender != address(0), \"ERC20: transfer from the zero address\");\r\n        require(recipient != address(0), \"ERC20: transfer to the zero address\");\r\n\r\n        _beforeTokenTransfer(sender, recipient, amount);\r\n\r\n        uint256 senderBalance = _balances[sender];\r\n        require(senderBalance >= amount, \"ERC20: transfer amount exceeds balance\");\r\n        _balances[sender] = senderBalance - amount;\r\n        _balances[recipient] += amount;\r\n\r\n        emit Transfer(sender, recipient, amount);\r\n    }\r\n\r\n    /** @dev Creates `amount` tokens and assigns them to `account`, increasing\r\n     * the total supply.\r\n     *\r\n     * Emits a {Transfer} event with `from` set to the zero address.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - `to` cannot be the zero address.\r\n     */\r\n    function _mint(address account, uint256 amount) internal virtual {\r\n        require(account != address(0), \"ERC20: mint to the zero address\");\r\n\r\n        _beforeTokenTransfer(address(0), account, amount);\r\n\r\n        _totalSupply += amount;\r\n        _balances[account] += amount;\r\n        emit Transfer(address(0), account, amount);\r\n    }\r\n\r\n    /**\r\n     * @dev Destroys `amount` tokens from `account`, reducing the\r\n     * total supply.\r\n     *\r\n     * Emits a {Transfer} event with `to` set to the zero address.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - `account` cannot be the zero address.\r\n     * - `account` must have at least `amount` tokens.\r\n     */\r\n    function _burn(address account, uint256 amount) internal virtual {\r\n        require(account != address(0), \"ERC20: burn from the zero address\");\r\n\r\n        _beforeTokenTransfer(account, address(0), amount);\r\n\r\n        uint256 accountBalance = _balances[account];\r\n        require(accountBalance >= amount, \"ERC20: burn amount exceeds balance\");\r\n        _balances[account] = accountBalance - amount;\r\n        _totalSupply -= amount;\r\n\r\n        emit Transfer(account, address(0), amount);\r\n    }\r\n\r\n    /**\r\n     * @dev Sets `amount` as the allowance of `spender` over the `owner` s tokens.\r\n     *\r\n     * This internal function is equivalent to `approve`, and can be used to\r\n     * e.g. set automatic allowances for certain subsystems, etc.\r\n     *\r\n     * Emits an {Approval} event.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - `owner` cannot be the zero address.\r\n     * - `spender` cannot be the zero address.\r\n     */\r\n    function _approve(address owner, address spender, uint256 amount) internal virtual {\r\n        require(owner != address(0), \"ERC20: approve from the zero address\");\r\n        require(spender != address(0), \"ERC20: approve to the zero address\");\r\n\r\n        _allowances[owner][spender] = amount;\r\n        emit Approval(owner, spender, amount);\r\n    }\r\n\r\n    /**\r\n     * @dev Hook that is called before any transfer of tokens. This includes\r\n     * minting and burning.\r\n     *\r\n     * Calling conditions:\r\n     *\r\n     * - when `from` and `to` are both non-zero, `amount` of ``from``'s tokens\r\n     * will be to transferred to `to`.\r\n     * - when `from` is zero, `amount` tokens will be minted for `to`.\r\n     * - when `to` is zero, `amount` of ``from``'s tokens will be burned.\r\n     * - `from` and `to` are never both zero.\r\n     *\r\n     * To learn more about hooks, head to xref:ROOT:extending-contracts.adoc#using-hooks[Using Hooks].\r\n     */\r\n    function _beforeTokenTransfer(address from, address to, uint256 amount) internal virtual { }\r\n}\r\n\r\n\r\n// File @openzeppelin/contracts/utils/Address.sol@v4.1.0\r\n\r\n\r\npragma solidity ^0.8.0;\r\n\r\n/**\r\n * @dev Collection of functions related to the address type\r\n */\r\nlibrary Address {\r\n    /**\r\n     * @dev Returns true if `account` is a contract.\r\n     *\r\n     * [IMPORTANT]\r\n     * ====\r\n     * It is unsafe to assume that an address for which this function returns\r\n     * false is an externally-owned account (EOA) and not a contract.\r\n     *\r\n     * Among others, `isContract` will return false for the following\r\n     * types of addresses:\r\n     *\r\n     *  - an externally-owned account\r\n     *  - a contract in construction\r\n     *  - an address where a contract will be created\r\n     *  - an address where a contract lived, but was destroyed\r\n     * ====\r\n     */\r\n    function isContract(address account) internal view returns (bool) {\r\n        // This method relies on extcodesize, which returns 0 for contracts in\r\n        // construction, since the code is only stored at the end of the\r\n        // constructor execution.\r\n\r\n        uint256 size;\r\n        // solhint-disable-next-line no-inline-assembly\r\n        assembly { size := extcodesize(account) }\r\n        return size > 0;\r\n    }\r\n\r\n    /**\r\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\r\n     * `recipient`, forwarding all available gas and reverting on errors.\r\n     *\r\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\r\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\r\n     * imposed by `transfer`, making them unable to receive funds via\r\n     * `transfer`. {sendValue} removes this limitation.\r\n     *\r\n     * https://diligence.consensys.net/posts/2019/09/stop-using-soliditys-transfer-now/[Learn more].\r\n     *\r\n     * IMPORTANT: because control is transferred to `recipient`, care must be\r\n     * taken to not create reentrancy vulnerabilities. Consider using\r\n     * {ReentrancyGuard} or the\r\n     * https://solidity.readthedocs.io/en/v0.5.11/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\r\n     */\r\n    function sendValue(address payable recipient, uint256 amount) internal {\r\n        require(address(this).balance >= amount, \"Address: insufficient balance\");\r\n\r\n        // solhint-disable-next-line avoid-low-level-calls, avoid-call-value\r\n        (bool success, ) = recipient.call{ value: amount }(\"\");\r\n        require(success, \"Address: unable to send value, recipient may have reverted\");\r\n    }\r\n\r\n    /**\r\n     * @dev Performs a Solidity function call using a low level `call`. A\r\n     * plain`call` is an unsafe replacement for a function call: use this\r\n     * function instead.\r\n     *\r\n     * If `target` reverts with a revert reason, it is bubbled up by this\r\n     * function (like regular Solidity function calls).\r\n     *\r\n     * Returns the raw returned data. To convert to the expected return value,\r\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - `target` must be a contract.\r\n     * - calling `target` with `data` must not revert.\r\n     *\r\n     * _Available since v3.1._\r\n     */\r\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\r\n      return functionCall(target, data, \"Address: low-level call failed\");\r\n    }\r\n\r\n    /**\r\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\r\n     * `errorMessage` as a fallback revert reason when `target` reverts.\r\n     *\r\n     * _Available since v3.1._\r\n     */\r\n    function functionCall(address target, bytes memory data, string memory errorMessage) internal returns (bytes memory) {\r\n        return functionCallWithValue(target, data, 0, errorMessage);\r\n    }\r\n\r\n    /**\r\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\r\n     * but also transferring `value` wei to `target`.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - the calling contract must have an ETH balance of at least `value`.\r\n     * - the called Solidity function must be `payable`.\r\n     *\r\n     * _Available since v3.1._\r\n     */\r\n    function functionCallWithValue(address target, bytes memory data, uint256 value) internal returns (bytes memory) {\r\n        return functionCallWithValue(target, data, value, \"Address: low-level call with value failed\");\r\n    }\r\n\r\n    /**\r\n     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\r\n     * with `errorMessage` as a fallback revert reason when `target` reverts.\r\n     *\r\n     * _Available since v3.1._\r\n     */\r\n    function functionCallWithValue(address target, bytes memory data, uint256 value, string memory errorMessage) internal returns (bytes memory) {\r\n        require(address(this).balance >= value, \"Address: insufficient balance for call\");\r\n        require(isContract(target), \"Address: call to non-contract\");\r\n\r\n        // solhint-disable-next-line avoid-low-level-calls\r\n        (bool success, bytes memory returndata) = target.call{ value: value }(data);\r\n        return _verifyCallResult(success, returndata, errorMessage);\r\n    }\r\n\r\n    /**\r\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\r\n     * but performing a static call.\r\n     *\r\n     * _Available since v3.3._\r\n     */\r\n    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\r\n        return functionStaticCall(target, data, \"Address: low-level static call failed\");\r\n    }\r\n\r\n    /**\r\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\r\n     * but performing a static call.\r\n     *\r\n     * _Available since v3.3._\r\n     */\r\n    function functionStaticCall(address target, bytes memory data, string memory errorMessage) internal view returns (bytes memory) {\r\n        require(isContract(target), \"Address: static call to non-contract\");\r\n\r\n        // solhint-disable-next-line avoid-low-level-calls\r\n        (bool success, bytes memory returndata) = target.staticcall(data);\r\n        return _verifyCallResult(success, returndata, errorMessage);\r\n    }\r\n\r\n    /**\r\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\r\n     * but performing a delegate call.\r\n     *\r\n     * _Available since v3.4._\r\n     */\r\n    function functionDelegateCall(address target, bytes memory data) internal returns (bytes memory) {\r\n        return functionDelegateCall(target, data, \"Address: low-level delegate call failed\");\r\n    }\r\n\r\n    /**\r\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\r\n     * but performing a delegate call.\r\n     *\r\n     * _Available since v3.4._\r\n     */\r\n    function functionDelegateCall(address target, bytes memory data, string memory errorMessage) internal returns (bytes memory) {\r\n        require(isContract(target), \"Address: delegate call to non-contract\");\r\n\r\n        // solhint-disable-next-line avoid-low-level-calls\r\n        (bool success, bytes memory returndata) = target.delegatecall(data);\r\n        return _verifyCallResult(success, returndata, errorMessage);\r\n    }\r\n\r\n    function _verifyCallResult(bool success, bytes memory returndata, string memory errorMessage) private pure returns(bytes memory) {\r\n        if (success) {\r\n            return returndata;\r\n        } else {\r\n            // Look for revert reason and bubble it up if present\r\n            if (returndata.length > 0) {\r\n                // The easiest way to bubble the revert reason is using memory via assembly\r\n\r\n                // solhint-disable-next-line no-inline-assembly\r\n                assembly {\r\n                    let returndata_size := mload(returndata)\r\n                    revert(add(32, returndata), returndata_size)\r\n                }\r\n            } else {\r\n                revert(errorMessage);\r\n            }\r\n        }\r\n    }\r\n}\r\n\r\n\r\n// File @openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol@v4.1.0\r\n\r\n\r\npragma solidity ^0.8.0;\r\n\r\n\r\n/**\r\n * @title SafeERC20\r\n * @dev Wrappers around ERC20 operations that throw on failure (when the token\r\n * contract returns false). Tokens that return no value (and instead revert or\r\n * throw on failure) are also supported, non-reverting calls are assumed to be\r\n * successful.\r\n * To use this library you can add a `using SafeERC20 for IERC20;` statement to your contract,\r\n * which allows you to call the safe operations as `token.safeTransfer(...)`, etc.\r\n */\r\nlibrary SafeERC20 {\r\n    using Address for address;\r\n\r\n    function safeTransfer(IERC20 token, address to, uint256 value) internal {\r\n        _callOptionalReturn(token, abi.encodeWithSelector(token.transfer.selector, to, value));\r\n    }\r\n\r\n    function safeTransferFrom(IERC20 token, address from, address to, uint256 value) internal {\r\n        _callOptionalReturn(token, abi.encodeWithSelector(token.transferFrom.selector, from, to, value));\r\n    }\r\n\r\n    /**\r\n     * @dev Deprecated. This function has issues similar to the ones found in\r\n     * {IERC20-approve}, and its usage is discouraged.\r\n     *\r\n     * Whenever possible, use {safeIncreaseAllowance} and\r\n     * {safeDecreaseAllowance} instead.\r\n     */\r\n    function safeApprove(IERC20 token, address spender, uint256 value) internal {\r\n        // safeApprove should only be called when setting an initial allowance,\r\n        // or when resetting it to zero. To increase and decrease it, use\r\n        // 'safeIncreaseAllowance' and 'safeDecreaseAllowance'\r\n        // solhint-disable-next-line max-line-length\r\n        require((value == 0) || (token.allowance(address(this), spender) == 0),\r\n            \"SafeERC20: approve from non-zero to non-zero allowance\"\r\n        );\r\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, value));\r\n    }\r\n\r\n    function safeIncreaseAllowance(IERC20 token, address spender, uint256 value) internal {\r\n        uint256 newAllowance = token.allowance(address(this), spender) + value;\r\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));\r\n    }\r\n\r\n    function safeDecreaseAllowance(IERC20 token, address spender, uint256 value) internal {\r\n        unchecked {\r\n            uint256 oldAllowance = token.allowance(address(this), spender);\r\n            require(oldAllowance >= value, \"SafeERC20: decreased allowance below zero\");\r\n            uint256 newAllowance = oldAllowance - value;\r\n            _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));\r\n        }\r\n    }\r\n\r\n    /**\r\n     * @dev Imitates a Solidity high-level call (i.e. a regular function call to a contract), relaxing the requirement\r\n     * on the return value: the return value is optional (but if data is returned, it must not be false).\r\n     * @param token The token targeted by the call.\r\n     * @param data The call data (encoded using abi.encode or one of its variants).\r\n     */\r\n    function _callOptionalReturn(IERC20 token, bytes memory data) private {\r\n        // We need to perform a low level call here, to bypass Solidity's return data size checking mechanism, since\r\n        // we're implementing it ourselves. We use {Address.functionCall} to perform this call, which verifies that\r\n        // the target address contains contract code and also asserts for success in the low-level call.\r\n\r\n        bytes memory returndata = address(token).functionCall(data, \"SafeERC20: low-level call failed\");\r\n        if (returndata.length > 0) { // Return data is optional\r\n            // solhint-disable-next-line max-line-length\r\n            require(abi.decode(returndata, (bool)), \"SafeERC20: ERC20 operation did not succeed\");\r\n        }\r\n    }\r\n}\r\n\r\n\r\n// File @openzeppelin/contracts/utils/math/SafeMath.sol@v4.1.0\r\n\r\n\r\npragma solidity ^0.8.0;\r\n\r\n// CAUTION\r\n// This version of SafeMath should only be used with Solidity 0.8 or later,\r\n// because it relies on the compiler's built in overflow checks.\r\n\r\n/**\r\n * @dev Wrappers over Solidity's arithmetic operations.\r\n *\r\n * NOTE: `SafeMath` is no longer needed starting with Solidity 0.8. The compiler\r\n * now has built in overflow checking.\r\n */\r\nlibrary SafeMath {\r\n    /**\r\n     * @dev Returns the addition of two unsigned integers, with an overflow flag.\r\n     *\r\n     * _Available since v3.4._\r\n     */\r\n    function tryAdd(uint256 a, uint256 b) internal pure returns (bool, uint256) {\r\n        unchecked {\r\n            uint256 c = a + b;\r\n            if (c < a) return (false, 0);\r\n            return (true, c);\r\n        }\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the substraction of two unsigned integers, with an overflow flag.\r\n     *\r\n     * _Available since v3.4._\r\n     */\r\n    function trySub(uint256 a, uint256 b) internal pure returns (bool, uint256) {\r\n        unchecked {\r\n            if (b > a) return (false, 0);\r\n            return (true, a - b);\r\n        }\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the multiplication of two unsigned integers, with an overflow flag.\r\n     *\r\n     * _Available since v3.4._\r\n     */\r\n    function tryMul(uint256 a, uint256 b) internal pure returns (bool, uint256) {\r\n        unchecked {\r\n            // Gas optimization: this is cheaper than requiring 'a' not being zero, but the\r\n            // benefit is lost if 'b' is also tested.\r\n            // See: https://github.com/OpenZeppelin/openzeppelin-contracts/pull/522\r\n            if (a == 0) return (true, 0);\r\n            uint256 c = a * b;\r\n            if (c / a != b) return (false, 0);\r\n            return (true, c);\r\n        }\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the division of two unsigned integers, with a division by zero flag.\r\n     *\r\n     * _Available since v3.4._\r\n     */\r\n    function tryDiv(uint256 a, uint256 b) internal pure returns (bool, uint256) {\r\n        unchecked {\r\n            if (b == 0) return (false, 0);\r\n            return (true, a / b);\r\n        }\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the remainder of dividing two unsigned integers, with a division by zero flag.\r\n     *\r\n     * _Available since v3.4._\r\n     */\r\n    function tryMod(uint256 a, uint256 b) internal pure returns (bool, uint256) {\r\n        unchecked {\r\n            if (b == 0) return (false, 0);\r\n            return (true, a % b);\r\n        }\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the addition of two unsigned integers, reverting on\r\n     * overflow.\r\n     *\r\n     * Counterpart to Solidity's `+` operator.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - Addition cannot overflow.\r\n     */\r\n    function add(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        return a + b;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the subtraction of two unsigned integers, reverting on\r\n     * overflow (when the result is negative).\r\n     *\r\n     * Counterpart to Solidity's `-` operator.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - Subtraction cannot overflow.\r\n     */\r\n    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        return a - b;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the multiplication of two unsigned integers, reverting on\r\n     * overflow.\r\n     *\r\n     * Counterpart to Solidity's `*` operator.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - Multiplication cannot overflow.\r\n     */\r\n    function mul(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        return a * b;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the integer division of two unsigned integers, reverting on\r\n     * division by zero. The result is rounded towards zero.\r\n     *\r\n     * Counterpart to Solidity's `/` operator.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - The divisor cannot be zero.\r\n     */\r\n    function div(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        return a / b;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\r\n     * reverting when dividing by zero.\r\n     *\r\n     * Counterpart to Solidity's `%` operator. This function uses a `revert`\r\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\r\n     * invalid opcode to revert (consuming all remaining gas).\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - The divisor cannot be zero.\r\n     */\r\n    function mod(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        return a % b;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the subtraction of two unsigned integers, reverting with custom message on\r\n     * overflow (when the result is negative).\r\n     *\r\n     * CAUTION: This function is deprecated because it requires allocating memory for the error\r\n     * message unnecessarily. For custom revert reasons use {trySub}.\r\n     *\r\n     * Counterpart to Solidity's `-` operator.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - Subtraction cannot overflow.\r\n     */\r\n    function sub(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\r\n        unchecked {\r\n            require(b <= a, errorMessage);\r\n            return a - b;\r\n        }\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the integer division of two unsigned integers, reverting with custom message on\r\n     * division by zero. The result is rounded towards zero.\r\n     *\r\n     * Counterpart to Solidity's `%` operator. This function uses a `revert`\r\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\r\n     * invalid opcode to revert (consuming all remaining gas).\r\n     *\r\n     * Counterpart to Solidity's `/` operator. Note: this function uses a\r\n     * `revert` opcode (which leaves remaining gas untouched) while Solidity\r\n     * uses an invalid opcode to revert (consuming all remaining gas).\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - The divisor cannot be zero.\r\n     */\r\n    function div(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\r\n        unchecked {\r\n            require(b > 0, errorMessage);\r\n            return a / b;\r\n        }\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\r\n     * reverting with custom message when dividing by zero.\r\n     *\r\n     * CAUTION: This function is deprecated because it requires allocating memory for the error\r\n     * message unnecessarily. For custom revert reasons use {tryMod}.\r\n     *\r\n     * Counterpart to Solidity's `%` operator. This function uses a `revert`\r\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\r\n     * invalid opcode to revert (consuming all remaining gas).\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - The divisor cannot be zero.\r\n     */\r\n    function mod(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\r\n        unchecked {\r\n            require(b > 0, errorMessage);\r\n            return a % b;\r\n        }\r\n    }\r\n}\r\n\r\n\r\n// File contracts/interfaces/UniswapRouterV2.sol\r\n\r\n\r\npragma solidity ^0.8.0;\r\n\r\ninterface IUniswapV2Router {\r\n    function getAmountsOut(uint256 amountIn, address[] calldata path)\r\n        external\r\n        view\r\n        returns (uint256[] memory amounts);\r\n\r\n    function swapExactTokensForTokens(\r\n        uint256 amountIn,\r\n        uint256 amountOutMin,\r\n        address[] calldata path,\r\n        address to,\r\n        uint256 deadline\r\n    ) external returns (uint256[] memory amounts);\r\n\r\n    function swapExactETHForTokens(\r\n        uint256 amountOutMin,\r\n        address[] calldata path,\r\n        address to,\r\n        uint256 deadline\r\n    ) external payable returns (uint256[] memory amounts);\r\n\r\n    function swapExactTokensForETH(\r\n        uint256 amountIn,\r\n        uint256 amountOutMin,\r\n        address[] calldata path,\r\n        address to,\r\n        uint256 deadline\r\n    ) external returns (uint256[] memory amounts);\r\n}\r\n\r\n\r\n// File contracts/interfaces/BakeryRouterV2.sol\r\n\r\n\r\npragma solidity ^0.8.0;\r\n\r\ninterface IBakeryV2Router {\r\n    function getAmountsOut(uint256 amountIn, address[] calldata path)\r\n        external\r\n        view\r\n        returns (uint256[] memory amounts);\r\n\r\n    function swapExactTokensForTokens(\r\n        uint256 amountIn,\r\n        uint256 amountOutMin,\r\n        address[] calldata path,\r\n        address to,\r\n        uint256 deadline\r\n    ) external returns (uint256[] memory amounts);\r\n\r\n    function swapExactBNBForTokens(\r\n        uint256 amountOutMin,\r\n        address[] calldata path,\r\n        address to,\r\n        uint256 deadline\r\n    ) external payable returns (uint256[] memory amounts);\r\n\r\n    function swapExactTokensForBNB(\r\n        uint256 amountIn,\r\n        uint256 amountOutMin,\r\n        address[] calldata path,\r\n        address to,\r\n        uint256 deadline\r\n    ) external returns (uint256[] memory amounts);\r\n}\r\n\r\n\r\n// File contracts/interfaces/DODOV2Proxy.sol\r\n\r\n\r\npragma solidity ^0.8.0;\r\n\r\ninterface IDODOV2Proxy {\r\n    function dodoSwapV2ETHToToken(\r\n        address toToken,\r\n        uint256 minReturnAmount,\r\n        address[] memory dodoPairs,\r\n        uint256 directions,\r\n        bool isIncentive,\r\n        uint256 deadLine\r\n    ) external payable returns (uint256 returnAmount);\r\n\r\n    function dodoSwapV2TokenToETH(\r\n        address fromToken,\r\n        uint256 fromTokenAmount,\r\n        uint256 minReturnAmount,\r\n        address[] memory dodoPairs,\r\n        uint256 directions,\r\n        bool isIncentive,\r\n        uint256 deadLine\r\n    ) external returns (uint256 returnAmount);\r\n\r\n    function dodoSwapV2TokenToToken(\r\n        address fromToken,\r\n        address toToken,\r\n        uint256 fromTokenAmount,\r\n        uint256 minReturnAmount,\r\n        address[] memory dodoPairs,\r\n        uint256 directions,\r\n        bool isIncentive,\r\n        uint256 deadLine\r\n    ) external returns (uint256 returnAmount);\r\n\r\n    function dodoSwapV1(\r\n        address fromToken,\r\n        address toToken,\r\n        uint256 fromTokenAmount,\r\n        uint256 minReturnAmount,\r\n        address[] memory dodoPairs,\r\n        uint256 directions,\r\n        bool isIncentive,\r\n        uint256 deadLine\r\n    ) external payable returns (uint256 returnAmount);\r\n}\r\n\r\n\r\n// File contracts/interfaces/VyperSwap.sol\r\n\r\n\r\npragma solidity ^0.8.0;\r\n\r\ninterface IVyperSwap {\r\n    function exchange(\r\n        int128 tokenIndexFrom,\r\n        int128 tokenIndexTo,\r\n        uint256 dx,\r\n        uint256 minDy\r\n    ) external;\r\n}\r\n\r\n\r\n// File contracts/interfaces/VyperUnderlyingSwap.sol\r\n\r\n\r\npragma solidity ^0.8.0;\r\n\r\ninterface IVyperUnderlyingSwap {\r\n    function exchange(\r\n        int128 tokenIndexFrom,\r\n        int128 tokenIndexTo,\r\n        uint256 dx,\r\n        uint256 minDy\r\n    ) external;\r\n\r\n    function exchange_underlying(\r\n        int128 tokenIndexFrom,\r\n        int128 tokenIndexTo,\r\n        uint256 dx,\r\n        uint256 minDy\r\n    ) external;\r\n}\r\n\r\n\r\n// File contracts/interfaces/DoppleSwap.sol\r\n\r\n\r\npragma solidity ^0.8.0;\r\n\r\ninterface IDoppleSwap {\r\n    function getTokenIndex(address tokenAddress) external view returns (uint8);\r\n\r\n    function swap(\r\n        uint8 tokenIndexFrom,\r\n        uint8 tokenIndexTo,\r\n        uint256 dx,\r\n        uint256 minDy,\r\n        uint256 deadline\r\n    ) external returns (uint256);\r\n}\r\n\r\n\r\n// File contracts/ArkenDex.sol\r\n\r\n\r\npragma solidity ^0.8.0;\r\npragma experimental ABIEncoderV2;\r\n\r\n\r\n\r\n// import 'hardhat/console.sol';\r\n\r\n\r\n\r\n\r\n\r\n\r\ncontract ArkenDex {\r\n    using SafeMath for uint256;\r\n    using SafeERC20 for IERC20;\r\n\r\n    uint256 public constant DEADLINE = 2**256 - 1;\r\n    IERC20 constant ETHER_ERC20 =\r\n        IERC20(0xEeeeeEeeeEeEeeEeEeEeeEEEeeeeEeeeeeeeEEeE);\r\n\r\n    enum RouterInterface {\r\n        UNISWAP,\r\n        BAKERY,\r\n        VYPER,\r\n        VYPER_UNDERLYING,\r\n        DOPPLE,\r\n        DODO_V2,\r\n        DODO_V1,\r\n        DFYN\r\n    }\r\n\r\n    struct Result {\r\n        bool success;\r\n        bytes returnData;\r\n    }\r\n\r\n    struct TradeRoute {\r\n        address[] paths;\r\n        address[] dodoPairs;\r\n        uint256 dodoDirection;\r\n        address dexAddr;\r\n        RouterInterface dexInterface;\r\n        uint256 part;\r\n    }\r\n\r\n    struct MultiSwapDesctiption {\r\n        IERC20 srcToken;\r\n        IERC20 dstToken;\r\n        TradeRoute[] routes;\r\n        uint256 amountIn;\r\n        uint256 amountOutMin;\r\n        address payable to;\r\n    }\r\n\r\n    event Swapped(\r\n        address srcToken,\r\n        address dstToken,\r\n        uint256 amountIn,\r\n        uint256 returnAmount\r\n    );\r\n\r\n    event UpdateVyper(address dexAddr, address[] tokens);\r\n\r\n    event Received(address sender, uint256 amount);\r\n\r\n    receive() external payable {\r\n        emit Received(msg.sender, msg.value);\r\n    }\r\n\r\n    address public ownerAddress;\r\n    address payable public feeWalletAddress;\r\n\r\n    struct Config {\r\n        address dodoApproveAddress;\r\n        IERC20 wrapperEtherERC20;\r\n        IERC20 wrapperEtherERC20Dfyn;\r\n        mapping(address => mapping(address => int128)) vyperCoinsMap;\r\n    }\r\n    Config config;\r\n\r\n    modifier onlyOwner() {\r\n        require(msg.sender == ownerAddress, 'Not owner');\r\n        _;\r\n    }\r\n\r\n    struct VyperConstructor {\r\n        address[] dexAddress;\r\n        address[][] tokenAddress;\r\n    }\r\n\r\n    struct ConstructorParams {\r\n        address payable _feeWalletAddress;\r\n        address _owner;\r\n        IERC20 _wrappedEther;\r\n        IERC20 _wrappedEtherDfyn;\r\n        address _dodoApproveAddress;\r\n        VyperConstructor _vyperParams;\r\n    }\r\n\r\n    constructor(ConstructorParams memory params) {\r\n        ownerAddress = params._owner;\r\n        feeWalletAddress = params._feeWalletAddress;\r\n        config.wrapperEtherERC20 = params._wrappedEther;\r\n        config.wrapperEtherERC20Dfyn = params._wrappedEtherDfyn;\r\n        config.dodoApproveAddress = params._dodoApproveAddress;\r\n        _initializeVyper(params._vyperParams);\r\n    }\r\n\r\n    function _initializeVyper(VyperConstructor memory params) private {\r\n        address[] memory dexAddrs = params.dexAddress;\r\n        address[][] memory tokenAddrs = params.tokenAddress;\r\n        require(\r\n            dexAddrs.length == tokenAddrs.length,\r\n            'vyper params dexAddress and tokenAddress and tokenIndex has to be the same length'\r\n        );\r\n        for (uint32 i = 0; i < dexAddrs.length; i++) {\r\n            for (int128 j = 0; uint128(j) < tokenAddrs[i].length; j++) {\r\n                config.vyperCoinsMap[dexAddrs[i]][\r\n                    tokenAddrs[i][uint128(j)]\r\n                ] = j;\r\n            }\r\n        }\r\n    }\r\n\r\n    /**\r\n     * External Functions\r\n     */\r\n    function updateVyper(address dexAddress, address[] calldata tokens)\r\n        external\r\n        onlyOwner\r\n    {\r\n        for (int128 j = 0; uint128(j) < tokens.length; j++) {\r\n            config.vyperCoinsMap[dexAddress][tokens[uint128(j)]] = j;\r\n        }\r\n        emit UpdateVyper(dexAddress, tokens);\r\n    }\r\n\r\n    function multiTrade(MultiSwapDesctiption memory desc)\r\n        external\r\n        payable\r\n        returns (uint256 returnAmount, uint256 blockNumber)\r\n    {\r\n        IERC20 dstToken = desc.dstToken;\r\n        IERC20 srcToken = desc.srcToken;\r\n        (returnAmount, blockNumber) = _trade(desc);\r\n        if (ETHER_ERC20 == desc.dstToken) {\r\n            (bool sent, ) = desc.to.call{value: returnAmount}('');\r\n            require(sent, 'Failed to send Ether');\r\n        } else {\r\n            dstToken.safeTransfer(msg.sender, returnAmount);\r\n        }\r\n        emit Swapped(\r\n            address(srcToken),\r\n            address(dstToken),\r\n            desc.amountIn,\r\n            returnAmount\r\n        );\r\n    }\r\n\r\n    function testTransfer(MultiSwapDesctiption memory desc)\r\n        external\r\n        payable\r\n        returns (uint256 returnAmount, uint256 blockNumber)\r\n    {\r\n        IERC20 dstToken = desc.dstToken;\r\n        (returnAmount, blockNumber) = _trade(desc);\r\n        uint256 beforeAmount = dstToken.balanceOf(msg.sender);\r\n        dstToken.safeTransfer(msg.sender, returnAmount);\r\n        uint256 afterAmount = dstToken.balanceOf(msg.sender);\r\n        uint256 got = afterAmount - beforeAmount;\r\n        require(got == returnAmount, 'ArkenTester: Has Tax');\r\n    }\r\n\r\n    function getVyperData(address dexAddress, address token)\r\n        external\r\n        view\r\n        returns (int128)\r\n    {\r\n        return config.vyperCoinsMap[dexAddress][token];\r\n    }\r\n\r\n    /**\r\n     * Trade Logic\r\n     */\r\n\r\n    function _trade(MultiSwapDesctiption memory desc)\r\n        internal\r\n        returns (uint256 returnAmount, uint256 blockNumber)\r\n    {\r\n        require(desc.amountIn > 0, 'Amount-in needs to be more than zero');\r\n        blockNumber = block.number;\r\n\r\n        IERC20 srcToken = desc.srcToken;\r\n\r\n        if (ETHER_ERC20 == desc.srcToken) {\r\n            require(msg.value == desc.amountIn, 'Value not match amountIn');\r\n        } else {\r\n            uint256 allowance = srcToken.allowance(msg.sender, address(this));\r\n            require(allowance >= desc.amountIn, 'Allowance not enough');\r\n            srcToken.safeTransferFrom(msg.sender, address(this), desc.amountIn);\r\n        }\r\n\r\n        TradeRoute[] memory routes = desc.routes;\r\n        uint256 srcTokenAmount;\r\n\r\n        for (uint256 i = 0; i < routes.length; i++) {\r\n            TradeRoute memory route = routes[i];\r\n            IERC20 startToken = ERC20(route.paths[0]);\r\n            IERC20 endToken = ERC20(route.paths[route.paths.length - 1]);\r\n            if (ETHER_ERC20 == startToken) {\r\n                srcTokenAmount = address(this).balance;\r\n            } else {\r\n                srcTokenAmount = startToken.balanceOf(address(this));\r\n            }\r\n            uint256 inputAmount = srcTokenAmount.mul(route.part).div(100000000); // 1% = 10^6\r\n            require(\r\n                route.part <= 100000000,\r\n                'Route percentage can not exceed 100000000'\r\n            );\r\n            // uint256[] memory amounts;\r\n            if (route.dexInterface == RouterInterface.BAKERY) {\r\n                // amounts =\r\n                _tradeIBakery(\r\n                    startToken,\r\n                    endToken,\r\n                    inputAmount,\r\n                    0,\r\n                    route.paths,\r\n                    address(this),\r\n                    route.dexAddr\r\n                );\r\n            } else if (route.dexInterface == RouterInterface.VYPER) {\r\n                // amounts =\r\n                _tradeVyper(\r\n                    startToken,\r\n                    endToken,\r\n                    inputAmount,\r\n                    0,\r\n                    route.dexAddr\r\n                );\r\n            } else if (route.dexInterface == RouterInterface.VYPER_UNDERLYING) {\r\n                // amounts =\r\n                _tradeVyperUnderlying(\r\n                    startToken,\r\n                    endToken,\r\n                    inputAmount,\r\n                    0,\r\n                    route.dexAddr\r\n                );\r\n            } else if (route.dexInterface == RouterInterface.DOPPLE) {\r\n                // amounts =\r\n                _tradeDopple(\r\n                    startToken,\r\n                    endToken,\r\n                    inputAmount,\r\n                    0,\r\n                    route.dexAddr\r\n                );\r\n            } else if (route.dexInterface == RouterInterface.DODO_V2) {\r\n                // DODO doesn't allow zero min amount\r\n                // amount =\r\n                _tradeIDODOV2(\r\n                    startToken,\r\n                    endToken,\r\n                    inputAmount,\r\n                    1,\r\n                    route.dodoPairs,\r\n                    route.dodoDirection,\r\n                    route.dexAddr\r\n                );\r\n            } else if (route.dexInterface == RouterInterface.DODO_V1) {\r\n                // DODO doesn't allow zero min amount\r\n                // amount =\r\n                _tradeIDODOV1(\r\n                    startToken,\r\n                    endToken,\r\n                    inputAmount,\r\n                    1,\r\n                    route.dodoPairs,\r\n                    route.dodoDirection,\r\n                    route.dexAddr\r\n                );\r\n            } else if (route.dexInterface == RouterInterface.DFYN) {\r\n                // amounts =\r\n                _tradeIDfyn(\r\n                    startToken,\r\n                    endToken,\r\n                    inputAmount,\r\n                    0,\r\n                    route.paths,\r\n                    address(this),\r\n                    route.dexAddr\r\n                );\r\n            } else {\r\n                // amounts =\r\n                _tradeIUniswap(\r\n                    startToken,\r\n                    endToken,\r\n                    inputAmount,\r\n                    0,\r\n                    route.paths,\r\n                    address(this),\r\n                    route.dexAddr\r\n                );\r\n            }\r\n            // for (uint256 idx = 0; idx < amounts.length; idx++) {\r\n            //     console.log('\\tamount[%d]: %d', idx, amounts[idx]);\r\n            // }\r\n        }\r\n\r\n        if (ETHER_ERC20 == desc.dstToken) {\r\n            returnAmount = address(this).balance;\r\n        } else {\r\n            returnAmount = desc.dstToken.balanceOf(address(this));\r\n        }\r\n\r\n        returnAmount = _collectFee(returnAmount, desc.dstToken);\r\n        // console.log(\r\n        //     'after fee: %d ,, out min: %d',\r\n        //     returnAmount,\r\n        //     desc.amountOutMin\r\n        // );\r\n        require(\r\n            returnAmount >= desc.amountOutMin,\r\n            'Return amount is not enough'\r\n        );\r\n    }\r\n\r\n    /**\r\n     * Internal Functions\r\n     */\r\n\r\n    function _collectFee(uint256 amount, IERC20 token)\r\n        private\r\n        returns (\r\n            uint256 // remaining amount to swap\r\n        )\r\n    {\r\n        uint256 fee = amount.div(1000); // 0.1%\r\n        // console.log('fee: %s from %s on %s', fee, amount, address(token));\r\n        require(fee < amount, 'Fee exceeds amount');\r\n        if (ETHER_ERC20 == token) {\r\n            feeWalletAddress.transfer(fee);\r\n        } else {\r\n            token.safeTransfer(feeWalletAddress, fee);\r\n        }\r\n        return amount.sub(fee);\r\n    }\r\n\r\n    function _tradeIUniswap(\r\n        IERC20 _src,\r\n        IERC20 _dest,\r\n        uint256 inputAmount,\r\n        uint256 minOutputAmount,\r\n        address[] memory paths,\r\n        address to,\r\n        address dexAddr\r\n    ) private returns (uint256[] memory amounts) {\r\n        IUniswapV2Router uniRouter = IUniswapV2Router(dexAddr);\r\n        if (_src == ETHER_ERC20) {\r\n            // ETH => TOKEN\r\n            if (paths[0] == address(ETHER_ERC20)) {\r\n                paths[0] = address(config.wrapperEtherERC20);\r\n            }\r\n            amounts = uniRouter.swapExactETHForTokens{value: inputAmount}(\r\n                minOutputAmount,\r\n                paths,\r\n                to,\r\n                DEADLINE\r\n            );\r\n        } else if (_dest == ETHER_ERC20) {\r\n            // TOKEN => ETH\r\n            if (paths[paths.length - 1] == address(ETHER_ERC20)) {\r\n                paths[paths.length - 1] = address(config.wrapperEtherERC20);\r\n            }\r\n            _src.safeApprove(dexAddr, inputAmount);\r\n            amounts = uniRouter.swapExactTokensForETH(\r\n                inputAmount,\r\n                minOutputAmount,\r\n                paths,\r\n                to,\r\n                DEADLINE\r\n            );\r\n        } else {\r\n            // TOKEN => TOKEN\r\n            _src.safeApprove(dexAddr, inputAmount);\r\n            amounts = uniRouter.swapExactTokensForTokens(\r\n                inputAmount,\r\n                minOutputAmount,\r\n                paths,\r\n                to,\r\n                DEADLINE\r\n            );\r\n        }\r\n    }\r\n\r\n    function _tradeIDfyn(\r\n        IERC20 _src,\r\n        IERC20 _dest,\r\n        uint256 inputAmount,\r\n        uint256 minOutputAmount,\r\n        address[] memory paths,\r\n        address to,\r\n        address dexAddr\r\n    ) private returns (uint256[] memory amounts) {\r\n        IUniswapV2Router uniRouter = IUniswapV2Router(dexAddr);\r\n        if (_src == ETHER_ERC20) {\r\n            // ETH => TOKEN\r\n            if (paths[0] == address(ETHER_ERC20)) {\r\n                paths[0] = address(config.wrapperEtherERC20Dfyn);\r\n            }\r\n            amounts = uniRouter.swapExactETHForTokens{value: inputAmount}(\r\n                minOutputAmount,\r\n                paths,\r\n                to,\r\n                DEADLINE\r\n            );\r\n        } else if (_dest == ETHER_ERC20) {\r\n            // TOKEN => ETH\r\n            if (paths[paths.length - 1] == address(ETHER_ERC20)) {\r\n                paths[paths.length - 1] = address(config.wrapperEtherERC20Dfyn);\r\n            }\r\n            _src.safeApprove(dexAddr, inputAmount);\r\n            amounts = uniRouter.swapExactTokensForETH(\r\n                inputAmount,\r\n                minOutputAmount,\r\n                paths,\r\n                to,\r\n                DEADLINE\r\n            );\r\n        } else {\r\n            // TOKEN => TOKEN\r\n            _src.safeApprove(dexAddr, inputAmount);\r\n            amounts = uniRouter.swapExactTokensForTokens(\r\n                inputAmount,\r\n                minOutputAmount,\r\n                paths,\r\n                to,\r\n                DEADLINE\r\n            );\r\n        }\r\n    }\r\n\r\n    function _tradeIDODOV2(\r\n        IERC20 _src,\r\n        IERC20 _dest,\r\n        uint256 inputAmount,\r\n        uint256 minOutputAmount,\r\n        address[] memory dodoPairs,\r\n        uint256 direction,\r\n        address dexAddr\r\n    ) private returns (uint256 amount) {\r\n        IDODOV2Proxy dodoProxy = IDODOV2Proxy(dexAddr);\r\n        if (_src == ETHER_ERC20) {\r\n            // ETH => TOKEN\r\n            amount = dodoProxy.dodoSwapV2ETHToToken{value: inputAmount}(\r\n                address(_dest),\r\n                minOutputAmount,\r\n                dodoPairs,\r\n                direction,\r\n                false,\r\n                DEADLINE\r\n            );\r\n        } else if (_dest == ETHER_ERC20) {\r\n            // TOKEN => ETH\r\n            _src.safeApprove(config.dodoApproveAddress, inputAmount);\r\n            amount = dodoProxy.dodoSwapV2TokenToETH(\r\n                address(_src),\r\n                inputAmount,\r\n                minOutputAmount,\r\n                dodoPairs,\r\n                direction,\r\n                false,\r\n                DEADLINE\r\n            );\r\n        } else {\r\n            // TOKEN => TOKEN\r\n            _src.safeApprove(config.dodoApproveAddress, inputAmount);\r\n            amount = dodoProxy.dodoSwapV2TokenToToken(\r\n                address(_src),\r\n                address(_dest),\r\n                inputAmount,\r\n                minOutputAmount,\r\n                dodoPairs,\r\n                direction,\r\n                false,\r\n                DEADLINE\r\n            );\r\n        }\r\n    }\r\n\r\n    function _tradeIDODOV1(\r\n        IERC20 _src,\r\n        IERC20 _dest,\r\n        uint256 inputAmount,\r\n        uint256 minOutputAmount,\r\n        address[] memory dodoPairs,\r\n        uint256 direction,\r\n        address dexAddr\r\n    ) private returns (uint256 amount) {\r\n        IDODOV2Proxy dodoProxy = IDODOV2Proxy(dexAddr);\r\n        IERC20 src = _src;\r\n        IERC20 dest = _dest;\r\n        if (_src != ETHER_ERC20) {\r\n            _src.safeApprove(config.dodoApproveAddress, inputAmount);\r\n        }\r\n        // console.log('dodo v1 addr: %s , %s', address(src), address(dest));\r\n        // console.log('dodo v1 amt: %d , %d', inputAmount, minOutputAmount);\r\n        amount = dodoProxy.dodoSwapV1(\r\n            address(src),\r\n            address(dest),\r\n            inputAmount,\r\n            minOutputAmount,\r\n            dodoPairs,\r\n            direction,\r\n            false,\r\n            DEADLINE\r\n        );\r\n        // console.log('dodo v1 amount: %d', amount);\r\n    }\r\n\r\n    function _tradeIBakery(\r\n        IERC20 _src,\r\n        IERC20 _dest,\r\n        uint256 inputAmount,\r\n        uint256 minOutputAmount,\r\n        address[] memory paths,\r\n        address to,\r\n        address dexAddr\r\n    ) private returns (uint256[] memory amounts) {\r\n        IBakeryV2Router bakeryRouter = IBakeryV2Router(dexAddr);\r\n        if (_src == ETHER_ERC20) {\r\n            // ETH => TOKEN\r\n            if (paths[0] == address(ETHER_ERC20)) {\r\n                paths[0] = address(config.wrapperEtherERC20);\r\n            }\r\n            amounts = bakeryRouter.swapExactBNBForTokens{value: inputAmount}(\r\n                minOutputAmount,\r\n                paths,\r\n                to,\r\n                DEADLINE\r\n            );\r\n        } else if (_dest == ETHER_ERC20) {\r\n            // TOKEN => ETH\r\n            if (paths[paths.length - 1] == address(ETHER_ERC20)) {\r\n                paths[paths.length - 1] = address(config.wrapperEtherERC20);\r\n            }\r\n            _src.safeApprove(dexAddr, inputAmount);\r\n            amounts = bakeryRouter.swapExactTokensForBNB(\r\n                inputAmount,\r\n                minOutputAmount,\r\n                paths,\r\n                to,\r\n                DEADLINE\r\n            );\r\n        } else {\r\n            // TOKEN => TOKEN\r\n            _src.safeApprove(dexAddr, inputAmount);\r\n            amounts = bakeryRouter.swapExactTokensForTokens(\r\n                inputAmount,\r\n                minOutputAmount,\r\n                paths,\r\n                to,\r\n                DEADLINE\r\n            );\r\n        }\r\n    }\r\n\r\n    function _tradeVyper(\r\n        IERC20 _src,\r\n        IERC20 _dest,\r\n        uint256 inputAmount,\r\n        uint256 minOutputAmount,\r\n        address dexAddr\r\n    ) private {\r\n        IVyperSwap vyperSwap = IVyperSwap(dexAddr);\r\n        _src.safeApprove(dexAddr, inputAmount);\r\n        int128 tokenIndexFrom = config.vyperCoinsMap[dexAddr][address(_src)];\r\n        // console.log('tokenIndexFrom: %d', uint128(tokenIndexFrom));\r\n        int128 tokenIndexTo = config.vyperCoinsMap[dexAddr][address(_dest)];\r\n        // console.log('tokenIndexTo: %d', uint128(tokenIndexTo));\r\n        vyperSwap.exchange(\r\n            tokenIndexFrom,\r\n            tokenIndexTo,\r\n            inputAmount,\r\n            minOutputAmount\r\n        );\r\n    }\r\n\r\n    function _tradeVyperUnderlying(\r\n        IERC20 _src,\r\n        IERC20 _dest,\r\n        uint256 inputAmount,\r\n        uint256 minOutputAmount,\r\n        address dexAddr\r\n    ) private {\r\n        IVyperUnderlyingSwap vyperSwap = IVyperUnderlyingSwap(dexAddr);\r\n        _src.safeApprove(dexAddr, inputAmount);\r\n        int128 tokenIndexFrom = config.vyperCoinsMap[dexAddr][address(_src)];\r\n        // console.log('tokenIndexFrom: %d', uint128(tokenIndexFrom));\r\n        int128 tokenIndexTo = config.vyperCoinsMap[dexAddr][address(_dest)];\r\n        // console.log('tokenIndexTo: %d', uint128(tokenIndexTo));\r\n        vyperSwap.exchange_underlying(\r\n            tokenIndexFrom,\r\n            tokenIndexTo,\r\n            inputAmount,\r\n            minOutputAmount\r\n        );\r\n    }\r\n\r\n    function _tradeDopple(\r\n        IERC20 _src,\r\n        IERC20 _dest,\r\n        uint256 inputAmount,\r\n        uint256 minOutputAmount,\r\n        address dexAddr\r\n    ) private returns (uint256 amount) {\r\n        IDoppleSwap doppleSwap = IDoppleSwap(dexAddr);\r\n        _src.safeApprove(dexAddr, inputAmount);\r\n        // console.log('getTokenIndex: %s %s', address(_src), address(_dest));\r\n        uint8 tokenIndexFrom = doppleSwap.getTokenIndex(address(_src));\r\n        // console.log('tokenIndexFrom: %d', uint128(tokenIndexFrom));\r\n        uint8 tokenIndexTo = doppleSwap.getTokenIndex(address(_dest));\r\n        // console.log('tokenIndexTo: %d', uint128(tokenIndexTo));\r\n        amount = doppleSwap.swap(\r\n            tokenIndexFrom,\r\n            tokenIndexTo,\r\n            inputAmount,\r\n            minOutputAmount,\r\n            DEADLINE\r\n        );\r\n    }\r\n}","ABI":"[{\"inputs\":[{\"components\":[{\"internalType\":\"address payable\",\"name\":\"_feeWalletAddress\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_owner\",\"type\":\"address\"},{\"internalType\":\"contract IERC20\",\"name\":\"_wrappedEther\",\"type\":\"address\"},{\"internalType\":\"contract IERC20\",\"name\":\"_wrappedEtherDfyn\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_dodoApproveAddress\",\"type\":\"address\"},{\"components\":[{\"internalType\":\"address[]\",\"name\":\"dexAddress\",\"type\":\"address[]\"},{\"internalType\":\"address[][]\",\"name\":\"tokenAddress\",\"type\":\"address[][]\"}],\"internalType\":\"struct ArkenDex.VyperConstructor\",\"name\":\"_vyperParams\",\"type\":\"tuple\"}],\"internalType\":\"struct ArkenDex.ConstructorParams\",\"name\":\"params\",\"type\":\"tuple\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"Received\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"srcToken\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"dstToken\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amountIn\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"returnAmount\",\"type\":\"uint256\"}],\"name\":\"Swapped\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"dexAddr\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"address[]\",\"name\":\"tokens\",\"type\":\"address[]\"}],\"name\":\"UpdateVyper\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"DEADLINE\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"feeWalletAddress\",\"outputs\":[{\"internalType\":\"address payable\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"dexAddress\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"token\",\"type\":\"address\"}],\"name\":\"getVyperData\",\"outputs\":[{\"internalType\":\"int128\",\"name\":\"\",\"type\":\"int128\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"components\":[{\"internalType\":\"contract IERC20\",\"name\":\"srcToken\",\"type\":\"address\"},{\"internalType\":\"contract IERC20\",\"name\":\"dstToken\",\"type\":\"address\"},{\"components\":[{\"internalType\":\"address[]\",\"name\":\"paths\",\"type\":\"address[]\"},{\"internalType\":\"address[]\",\"name\":\"dodoPairs\",\"type\":\"address[]\"},{\"internalType\":\"uint256\",\"name\":\"dodoDirection\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"dexAddr\",\"type\":\"address\"},{\"internalType\":\"enum ArkenDex.RouterInterface\",\"name\":\"dexInterface\",\"type\":\"uint8\"},{\"internalType\":\"uint256\",\"name\":\"part\",\"type\":\"uint256\"}],\"internalType\":\"struct ArkenDex.TradeRoute[]\",\"name\":\"routes\",\"type\":\"tuple[]\"},{\"internalType\":\"uint256\",\"name\":\"amountIn\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"amountOutMin\",\"type\":\"uint256\"},{\"internalType\":\"address payable\",\"name\":\"to\",\"type\":\"address\"}],\"internalType\":\"struct ArkenDex.MultiSwapDesctiption\",\"name\":\"desc\",\"type\":\"tuple\"}],\"name\":\"multiTrade\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"returnAmount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"blockNumber\",\"type\":\"uint256\"}],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"ownerAddress\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"components\":[{\"internalType\":\"contract IERC20\",\"name\":\"srcToken\",\"type\":\"address\"},{\"internalType\":\"contract IERC20\",\"name\":\"dstToken\",\"type\":\"address\"},{\"components\":[{\"internalType\":\"address[]\",\"name\":\"paths\",\"type\":\"address[]\"},{\"internalType\":\"address[]\",\"name\":\"dodoPairs\",\"type\":\"address[]\"},{\"internalType\":\"uint256\",\"name\":\"dodoDirection\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"dexAddr\",\"type\":\"address\"},{\"internalType\":\"enum ArkenDex.RouterInterface\",\"name\":\"dexInterface\",\"type\":\"uint8\"},{\"internalType\":\"uint256\",\"name\":\"part\",\"type\":\"uint256\"}],\"internalType\":\"struct ArkenDex.TradeRoute[]\",\"name\":\"routes\",\"type\":\"tuple[]\"},{\"internalType\":\"uint256\",\"name\":\"amountIn\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"amountOutMin\",\"type\":\"uint256\"},{\"internalType\":\"address payable\",\"name\":\"to\",\"type\":\"address\"}],\"internalType\":\"struct ArkenDex.MultiSwapDesctiption\",\"name\":\"desc\",\"type\":\"tuple\"}],\"name\":\"testTransfer\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"returnAmount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"blockNumber\",\"type\":\"uint256\"}],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"dexAddress\",\"type\":\"address\"},{\"internalType\":\"address[]\",\"name\":\"tokens\",\"type\":\"address[]\"}],\"name\":\"updateVyper\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"stateMutability\":\"payable\",\"type\":\"receive\"}]","ContractName":"ArkenDex","CompilerVersion":"v0.8.4+commit.c7e474f2","OptimizationUsed":"1","Runs":"200","ConstructorArguments":"0000000000000000000000000000000000000000000000000000000000000020000000000000000000000000c03d411bcb57159b9669b869fd1c20a019b1fbb200000000000000000000000077777eef36045851c3e1832ac0815d0c894ce09f000000000000000000000000c02aaa39b223fe8d0a0e5c4f27ead9083c756cc2000000000000000000000000c02aaa39b223fe8d0a0e5c4f27ead9083c756cc2000000000000000000000000cb859ea579b28e02b87a1fde08d087ab9dbe514900000000000000000000000000000000000000000000000000000000000000c0000000000000000000000000000000000000000000000000000000000000004000000000000000000000000000000000000000000000000000000000000000a0000000000000000000000000000000000000000000000000000000000000000200000000000000000000000079a8c46dea5ada233abaffd40f3a0a2b1e5a4f2700000000000000000000000052ea46506b9cc5ef470c5bf89f17dc28bb35d85c0000000000000000000000000000000000000000000000000000000000000002000000000000000000000000000000000000000000000000000000000000004000000000000000000000000000000000000000000000000000000000000000e000000000000000000000000000000000000000000000000000000000000000040000000000000000000000006b175474e89094c44da98b954eedeac495271d0f000000000000000000000000a0b86991c6218b36c1d19d4a2e9eb0ce3606eb48000000000000000000000000dac17f958d2ee523a2206206994597c13d831ec70000000000000000000000004fabb145d64652a948d72533023f6e7a623c7c5300000000000000000000000000000000000000000000000000000000000000030000000000000000000000006b175474e89094c44da98b954eedeac495271d0f000000000000000000000000a0b86991c6218b36c1d19d4a2e9eb0ce3606eb48000000000000000000000000dac17f958d2ee523a2206206994597c13d831ec7","EVMVersion":"Default","Library":"","LicenseType":"MIT","Proxy":"0","Implementation":"","SwarmSource":"ipfs://cfdf0b20ff8c56980fea2b38db87ce1139c0a431385c60b9c2b49f2ba12cc74a"}]}