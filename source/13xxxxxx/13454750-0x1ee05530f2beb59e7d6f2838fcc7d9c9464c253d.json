{"status":"1","message":"OK","result":[{"SourceCode":"{{\r\n  \"language\": \"Solidity\",\r\n  \"sources\": {\r\n    \"contracts/GreatestLARP.sol\": {\r\n      \"content\": \"//SPDX-License-Identifier: MIT\\npragma solidity 0.8.4;\\n\\nimport \\\"@openzeppelin/contracts/utils/math/SafeMath.sol\\\";\\nimport \\\"@openzeppelin/contracts/access/Ownable.sol\\\";\\nimport \\\"./TokenRecover.sol\\\";\\n\\n/// @dev the BotToken interface\\nabstract contract BotToken {\\n    function lastMintedToken() external view virtual returns (uint256);\\n\\n    function mint(address user) external virtual returns (uint256);\\n\\n    function transferOwnership(address newOwner) public virtual;\\n}\\n\\n/// @dev the StatueToken interface\\nabstract contract StatueToken {\\n    function lastMintedToken() external view virtual returns (uint256);\\n\\n    function mint(address user) external virtual returns (uint256);\\n\\n    function transferOwnership(address newOwner) public virtual;\\n}\\n\\n/// @title GreatestLARP Factory Contract\\n/// @author jaxcoder, ghostffcode\\n/// @notice Factory LARP NFT Contract\\n/// @dev factory contract to handle the levels, thresholds and\\n///     minting of the NFTs.\\ncontract GreatestLARP is Ownable {\\n    using SafeMath for uint256;\\n    address payable immutable gitcoin;\\n\\n    struct Token {\\n        address tokenAddress;\\n        uint256 thresholdBots;\\n        uint256 thresholdStatues;\\n        uint256 price;\\n        uint256 inflationRate;\\n        uint256 totalSupply;\\n    }\\n\\n    mapping(uint256 => Token) tokenMap;\\n    mapping(uint256 => Token) statueMap;\\n\\n    uint256 public totalTokens;\\n    uint256 public totalStatues;\\n\\n    /// @dev checks to make sure the level passed in is valid\\n    modifier isValidLevel(uint256 level) {\\n        // level is between 1 and totalTokens Count\\n        require(level > 0, \\\"Invalid level selected\\\");\\n        require(level <= totalTokens, \\\"Invalid level selected\\\");\\n        require(level <= totalStatues, \\\"Invalid level selected\\\");\\n        _;\\n    }\\n\\n    constructor(\\n        BotToken[] memory tokens,\\n        StatueToken[] memory statueTokens,\\n        uint256[] memory thresholdBots,\\n        uint256[] memory thresholdStatues,\\n        uint256 startPriceBot,\\n        uint256 startPriceStatue,\\n        uint256[] memory inflationRatesStatues,\\n        uint256[] memory inflationRatesBots\\n    ) {\\n        gitcoin = payable(address(0xde21F729137C5Af1b01d73aF1dC21eFfa2B8a0d6));\\n\\n        require(\\n            tokens.length == thresholdBots.length,\\n            \\\"Mismatch length of tokens and threshold\\\"\\n        );\\n\\n        require(\\n            statueTokens.length == thresholdStatues.length,\\n            \\\"Mismatch length of tokens and threshold\\\"\\n        );\\n\\n        for (uint256 i = 0; i < tokens.length; i++) {\\n            // increment tokens count\\n            totalTokens += 1;\\n\\n            // add token to tokenMap\\n            tokenMap[totalTokens] = Token({\\n                tokenAddress: address(tokens[i]),\\n                thresholdBots: thresholdBots[i],\\n                thresholdStatues: 0,\\n                price: startPriceBot,\\n                totalSupply: 300,\\n                inflationRate: inflationRatesBots[i]\\n            });\\n        }\\n\\n        for (uint256 i = 0; i < statueTokens.length; i++) {\\n            // increment tokens count\\n            totalStatues += 1;\\n\\n            // add token to tokenMap\\n            statueMap[totalStatues] = Token({\\n                tokenAddress: address(statueTokens[i]),\\n                thresholdBots: 0,\\n                thresholdStatues: thresholdStatues[i],\\n                price: startPriceStatue,\\n                totalSupply: 5,\\n                inflationRate: inflationRatesStatues[i]\\n            });\\n        }\\n    }\\n\\n    /// @dev A function that can be called from Etherscan to lower\\n    ///      the price of all items for that level by 10%.\\n    /// @param _level pass the level you want to lower the price for\\n    function whompwhomp(uint256 _level) public isValidLevel(_level) onlyOwner {\\n        tokenMap[_level].price = tokenMap[_level].price.sub(\\n            tokenMap[_level].price.mul(10).div(100)\\n        );\\n        statueMap[_level].price = statueMap[_level].price.sub(\\n            statueMap[_level].price.mul(10).div(100)\\n        );\\n    }\\n\\n    /// @dev Returns the latest price for selected level\\n    /// @param _level level number\\n    /// @return latest price for selected level\\n    function lastestPriceForTokenLevel(uint256 _level)\\n        public\\n        view\\n        isValidLevel(_level)\\n        returns (uint256)\\n    {\\n        return tokenMap[_level].price;\\n    }\\n\\n    /// @dev Returns the latest price for selected level\\n    /// @param _level level number\\n    /// @return latest price for selected level\\n    function lastestPriceForStatueLevel(uint256 _level)\\n        public\\n        view\\n        isValidLevel(_level)\\n        returns (uint256)\\n    {\\n        return statueMap[_level].price;\\n    }\\n\\n    /// @dev returns a details array of uints for the Bot levels\\n    function getDetailForTokenLevels()\\n        public\\n        view\\n        returns (uint256[5][] memory)\\n    {\\n        uint256[5][] memory levels = new uint256[5][](totalTokens);\\n\\n        for (uint256 i = 1; i <= totalTokens; i++) {\\n            uint256[5] memory levelInfo;\\n            levelInfo[0] = tokenMap[i].price;\\n            levelInfo[1] = tokenMap[i].thresholdBots;\\n            levelInfo[2] = tokenMap[i].totalSupply;\\n            levelInfo[3] = BotToken(tokenMap[i].tokenAddress).lastMintedToken();\\n            levelInfo[4] = tokenMap[i].totalSupply - levelInfo[3];\\n\\n            // push levelInfo into levels\\n            levels[i - 1] = levelInfo;\\n        }\\n\\n        return levels;\\n    }\\n\\n    /// @dev returns a details array of uints for the Statue levels\\n    function getDetailForStatueLevels()\\n        public\\n        view\\n        returns (uint256[5][] memory)\\n    {\\n        uint256[5][] memory levels = new uint256[5][](totalTokens);\\n\\n        for (uint256 i = 1; i <= totalStatues; i++) {\\n            uint256[5] memory levelInfo;\\n            levelInfo[0] = statueMap[i].price;\\n            levelInfo[1] = statueMap[i].thresholdStatues;\\n            levelInfo[2] = statueMap[i].totalSupply;\\n            levelInfo[3] = StatueToken(statueMap[i].tokenAddress)\\n                .lastMintedToken();\\n            levelInfo[4] = statueMap[i].totalSupply - levelInfo[3];\\n\\n            // push levelInfo into levels\\n            levels[i - 1] = levelInfo;\\n        }\\n\\n        return levels;\\n    }\\n\\n    /// @dev request to mint a Bot NFT\\n    /// @param level pass the level to route the mint\\n    /// @return the id of the NFT\\n    function requestMint(uint256 level)\\n        public\\n        payable\\n        isValidLevel(level)\\n        returns (uint256)\\n    {\\n        BotToken levelToken = BotToken(tokenMap[level].tokenAddress);\\n\\n        // check if threshold for previous token has been reached\\n        if (level > 1) {\\n            uint256 previousLevel = level - 1;\\n            require(\\n                BotToken(tokenMap[previousLevel].tokenAddress)\\n                    .lastMintedToken() >= tokenMap[previousLevel].thresholdBots,\\n                \\\"You can't continue until the previous level threshold is reached\\\"\\n            );\\n        }\\n\\n        // compare value and price\\n        require(msg.value >= tokenMap[level].price, \\\"NOT ENOUGH\\\");\\n\\n        // store the old price\\n        uint256 currentPrice = tokenMap[level].price;\\n\\n        // update the price of the token\\n        tokenMap[level].price = (currentPrice * tokenMap[level].inflationRate)\\n            .div(1000);\\n\\n        // make sure there are available tokens for this level\\n        require(\\n            levelToken.lastMintedToken() <= tokenMap[level].totalSupply,\\n            \\\"Minting completed for this level\\\"\\n        );\\n\\n        // mint token\\n        uint256 id = levelToken.mint(msg.sender);\\n\\n        // send ETH to gitcoin multisig\\n        (bool success, ) = gitcoin.call{value: currentPrice}(\\\"\\\");\\n        require(success, \\\"could not send\\\");\\n\\n        // send the refund\\n        uint256 refund = msg.value.sub(currentPrice);\\n        if (refund > 0) {\\n            (bool refundSent, ) = msg.sender.call{value: refund}(\\\"\\\");\\n            require(refundSent, \\\"Refund could not be sent\\\");\\n        }\\n\\n        return id;\\n    }\\n\\n    /// @dev request to mint a statue NFT\\n    /// @param level pass the level to route the mint\\n    /// @return the id of the NFT\\n    function requestMintStatue(uint256 level)\\n        public\\n        payable\\n        isValidLevel(level)\\n        returns (uint256)\\n    {\\n        StatueToken levelToken = StatueToken(statueMap[level].tokenAddress);\\n\\n        // check if threshold for previous token has been reached\\n        if (level > 1) {\\n            uint256 previousLevel = level - 1;\\n            require(\\n                StatueToken(statueMap[previousLevel].tokenAddress)\\n                    .lastMintedToken() >=\\n                    statueMap[previousLevel].thresholdStatues,\\n                \\\"You can't continue until the previous level threshold is reached\\\"\\n            );\\n        }\\n\\n        // compare value and price\\n        require(msg.value >= statueMap[level].price, \\\"NOT ENOUGH\\\");\\n\\n        // store the old price\\n        uint256 currentPrice = statueMap[level].price;\\n\\n        // update the price of the token\\n        statueMap[level].price = (currentPrice * 1350).div(1000);\\n\\n        // make sure there are available tokens for this level\\n        require(\\n            levelToken.lastMintedToken() <= statueMap[level].totalSupply,\\n            \\\"Minting completed for this level\\\"\\n        );\\n\\n        // mint token\\n        uint256 id = levelToken.mint(msg.sender);\\n\\n        // send ETH to gitcoin multisig\\n        (bool success, ) = gitcoin.call{value: currentPrice}(\\\"\\\");\\n        require(success, \\\"could not send\\\");\\n\\n        // send the refund\\n        uint256 refund = msg.value.sub(currentPrice);\\n        if (refund > 0) {\\n            (bool refundSent, ) = msg.sender.call{value: refund}(\\\"\\\");\\n            require(refundSent, \\\"Refund could not be sent\\\");\\n        }\\n\\n        return id;\\n    }\\n\\n    /// @dev transfer ownership of ERC-721 token contracts\\n    /// @param to address of the new owner\\n    function transferTokenOwnership(address to) public onlyOwner {\\n        require(\\n            to != 0x0000000000000000000000000000000000000000,\\n            \\\"cannot make balck hole owner\\\"\\n        );\\n        for (uint256 i = 1; i <= totalTokens; i++) {\\n            BotToken(tokenMap[i].tokenAddress).transferOwnership(to);\\n        }\\n    }\\n\\n    /// @dev transfer ownership of ERC-721 token contracts\\n    /// @param to address of the new owner\\n    function transferStatueOwnership(address to) public onlyOwner {\\n        require(\\n            to != 0x0000000000000000000000000000000000000000,\\n            \\\"cannot make balck hole owner\\\"\\n        );\\n        for (uint256 i = 1; i <= totalStatues; i++) {\\n            StatueToken(statueMap[i].tokenAddress).transferOwnership(to);\\n        }\\n    }\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/utils/math/SafeMath.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\n// CAUTION\\n// This version of SafeMath should only be used with Solidity 0.8 or later,\\n// because it relies on the compiler's built in overflow checks.\\n\\n/**\\n * @dev Wrappers over Solidity's arithmetic operations.\\n *\\n * NOTE: `SafeMath` is no longer needed starting with Solidity 0.8. The compiler\\n * now has built in overflow checking.\\n */\\nlibrary SafeMath {\\n    /**\\n     * @dev Returns the addition of two unsigned integers, with an overflow flag.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function tryAdd(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        unchecked {\\n            uint256 c = a + b;\\n            if (c < a) return (false, 0);\\n            return (true, c);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the substraction of two unsigned integers, with an overflow flag.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function trySub(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        unchecked {\\n            if (b > a) return (false, 0);\\n            return (true, a - b);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the multiplication of two unsigned integers, with an overflow flag.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function tryMul(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        unchecked {\\n            // Gas optimization: this is cheaper than requiring 'a' not being zero, but the\\n            // benefit is lost if 'b' is also tested.\\n            // See: https://github.com/OpenZeppelin/openzeppelin-contracts/pull/522\\n            if (a == 0) return (true, 0);\\n            uint256 c = a * b;\\n            if (c / a != b) return (false, 0);\\n            return (true, c);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the division of two unsigned integers, with a division by zero flag.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function tryDiv(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        unchecked {\\n            if (b == 0) return (false, 0);\\n            return (true, a / b);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the remainder of dividing two unsigned integers, with a division by zero flag.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function tryMod(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        unchecked {\\n            if (b == 0) return (false, 0);\\n            return (true, a % b);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the addition of two unsigned integers, reverting on\\n     * overflow.\\n     *\\n     * Counterpart to Solidity's `+` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Addition cannot overflow.\\n     */\\n    function add(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a + b;\\n    }\\n\\n    /**\\n     * @dev Returns the subtraction of two unsigned integers, reverting on\\n     * overflow (when the result is negative).\\n     *\\n     * Counterpart to Solidity's `-` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Subtraction cannot overflow.\\n     */\\n    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a - b;\\n    }\\n\\n    /**\\n     * @dev Returns the multiplication of two unsigned integers, reverting on\\n     * overflow.\\n     *\\n     * Counterpart to Solidity's `*` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Multiplication cannot overflow.\\n     */\\n    function mul(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a * b;\\n    }\\n\\n    /**\\n     * @dev Returns the integer division of two unsigned integers, reverting on\\n     * division by zero. The result is rounded towards zero.\\n     *\\n     * Counterpart to Solidity's `/` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - The divisor cannot be zero.\\n     */\\n    function div(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a / b;\\n    }\\n\\n    /**\\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\\n     * reverting when dividing by zero.\\n     *\\n     * Counterpart to Solidity's `%` operator. This function uses a `revert`\\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\\n     * invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Requirements:\\n     *\\n     * - The divisor cannot be zero.\\n     */\\n    function mod(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a % b;\\n    }\\n\\n    /**\\n     * @dev Returns the subtraction of two unsigned integers, reverting with custom message on\\n     * overflow (when the result is negative).\\n     *\\n     * CAUTION: This function is deprecated because it requires allocating memory for the error\\n     * message unnecessarily. For custom revert reasons use {trySub}.\\n     *\\n     * Counterpart to Solidity's `-` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Subtraction cannot overflow.\\n     */\\n    function sub(\\n        uint256 a,\\n        uint256 b,\\n        string memory errorMessage\\n    ) internal pure returns (uint256) {\\n        unchecked {\\n            require(b <= a, errorMessage);\\n            return a - b;\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the integer division of two unsigned integers, reverting with custom message on\\n     * division by zero. The result is rounded towards zero.\\n     *\\n     * Counterpart to Solidity's `/` operator. Note: this function uses a\\n     * `revert` opcode (which leaves remaining gas untouched) while Solidity\\n     * uses an invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Requirements:\\n     *\\n     * - The divisor cannot be zero.\\n     */\\n    function div(\\n        uint256 a,\\n        uint256 b,\\n        string memory errorMessage\\n    ) internal pure returns (uint256) {\\n        unchecked {\\n            require(b > 0, errorMessage);\\n            return a / b;\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\\n     * reverting with custom message when dividing by zero.\\n     *\\n     * CAUTION: This function is deprecated because it requires allocating memory for the error\\n     * message unnecessarily. For custom revert reasons use {tryMod}.\\n     *\\n     * Counterpart to Solidity's `%` operator. This function uses a `revert`\\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\\n     * invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Requirements:\\n     *\\n     * - The divisor cannot be zero.\\n     */\\n    function mod(\\n        uint256 a,\\n        uint256 b,\\n        string memory errorMessage\\n    ) internal pure returns (uint256) {\\n        unchecked {\\n            require(b > 0, errorMessage);\\n            return a % b;\\n        }\\n    }\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/access/Ownable.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../utils/Context.sol\\\";\\n\\n/**\\n * @dev Contract module which provides a basic access control mechanism, where\\n * there is an account (an owner) that can be granted exclusive access to\\n * specific functions.\\n *\\n * By default, the owner account will be the one that deploys the contract. This\\n * can later be changed with {transferOwnership}.\\n *\\n * This module is used through inheritance. It will make available the modifier\\n * `onlyOwner`, which can be applied to your functions to restrict their use to\\n * the owner.\\n */\\nabstract contract Ownable is Context {\\n    address private _owner;\\n\\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\\n\\n    /**\\n     * @dev Initializes the contract setting the deployer as the initial owner.\\n     */\\n    constructor() {\\n        _setOwner(_msgSender());\\n    }\\n\\n    /**\\n     * @dev Returns the address of the current owner.\\n     */\\n    function owner() public view virtual returns (address) {\\n        return _owner;\\n    }\\n\\n    /**\\n     * @dev Throws if called by any account other than the owner.\\n     */\\n    modifier onlyOwner() {\\n        require(owner() == _msgSender(), \\\"Ownable: caller is not the owner\\\");\\n        _;\\n    }\\n\\n    /**\\n     * @dev Leaves the contract without owner. It will not be possible to call\\n     * `onlyOwner` functions anymore. Can only be called by the current owner.\\n     *\\n     * NOTE: Renouncing ownership will leave the contract without an owner,\\n     * thereby removing any functionality that is only available to the owner.\\n     */\\n    function renounceOwnership() public virtual onlyOwner {\\n        _setOwner(address(0));\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Can only be called by the current owner.\\n     */\\n    function transferOwnership(address newOwner) public virtual onlyOwner {\\n        require(newOwner != address(0), \\\"Ownable: new owner is the zero address\\\");\\n        _setOwner(newOwner);\\n    }\\n\\n    function _setOwner(address newOwner) private {\\n        address oldOwner = _owner;\\n        _owner = newOwner;\\n        emit OwnershipTransferred(oldOwner, newOwner);\\n    }\\n}\\n\"\r\n    },\r\n    \"contracts/TokenRecover.sol\": {\r\n      \"content\": \"//SPDX-License-Identifier: MIT\\npragma solidity 0.8.4;\\n\\nimport \\\"@openzeppelin/contracts/access/Ownable.sol\\\";\\nimport \\\"@openzeppelin/contracts/token/ERC20/IERC20.sol\\\";\\n\\n/**\\n * @title TokenRecover\\n * @dev Allow to recover any ERC20 sent into the contract for error\\n */\\ncontract TokenRecover is Ownable {\\n    /**\\n     * @dev Remember that only owner can call so be careful when use on contracts generated from other contracts.\\n     * @param tokenAddress The token contract address\\n     * @param tokenAmount Number of tokens to be sent\\n     */\\n    function recoverERC20(address tokenAddress, uint256 tokenAmount) public onlyOwner {\\n        IERC20(tokenAddress).transfer(owner(), tokenAmount);\\n    }\\n}\"\r\n    },\r\n    \"@openzeppelin/contracts/utils/Context.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Provides information about the current execution context, including the\\n * sender of the transaction and its data. While these are generally available\\n * via msg.sender and msg.data, they should not be accessed in such a direct\\n * manner, since when dealing with meta-transactions the account sending and\\n * paying for execution may not be the actual sender (as far as an application\\n * is concerned).\\n *\\n * This contract is only required for intermediate, library-like contracts.\\n */\\nabstract contract Context {\\n    function _msgSender() internal view virtual returns (address) {\\n        return msg.sender;\\n    }\\n\\n    function _msgData() internal view virtual returns (bytes calldata) {\\n        return msg.data;\\n    }\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/token/ERC20/IERC20.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC20 standard as defined in the EIP.\\n */\\ninterface IERC20 {\\n    /**\\n     * @dev Returns the amount of tokens in existence.\\n     */\\n    function totalSupply() external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the amount of tokens owned by `account`.\\n     */\\n    function balanceOf(address account) external view returns (uint256);\\n\\n    /**\\n     * @dev Moves `amount` tokens from the caller's account to `recipient`.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transfer(address recipient, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Returns the remaining number of tokens that `spender` will be\\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\\n     * zero by default.\\n     *\\n     * This value changes when {approve} or {transferFrom} are called.\\n     */\\n    function allowance(address owner, address spender) external view returns (uint256);\\n\\n    /**\\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\\n     * that someone may use both the old and the new allowance by unfortunate\\n     * transaction ordering. One possible solution to mitigate this race\\n     * condition is to first reduce the spender's allowance to 0 and set the\\n     * desired value afterwards:\\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address spender, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Moves `amount` tokens from `sender` to `recipient` using the\\n     * allowance mechanism. `amount` is then deducted from the caller's\\n     * allowance.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(\\n        address sender,\\n        address recipient,\\n        uint256 amount\\n    ) external returns (bool);\\n\\n    /**\\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\\n     * another (`to`).\\n     *\\n     * Note that `value` may be zero.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 value);\\n\\n    /**\\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\\n     * a call to {approve}. `value` is the new allowance.\\n     */\\n    event Approval(address indexed owner, address indexed spender, uint256 value);\\n}\\n\"\r\n    }\r\n  },\r\n  \"settings\": {\r\n    \"optimizer\": {\r\n      \"enabled\": true,\r\n      \"runs\": 200\r\n    },\r\n    \"outputSelection\": {\r\n      \"*\": {\r\n        \"*\": [\r\n          \"evm.bytecode\",\r\n          \"evm.deployedBytecode\",\r\n          \"devdoc\",\r\n          \"userdoc\",\r\n          \"metadata\",\r\n          \"abi\"\r\n        ]\r\n      }\r\n    },\r\n    \"metadata\": {\r\n      \"useLiteralContent\": true\r\n    },\r\n    \"libraries\": {}\r\n  }\r\n}}","ABI":"[{\"inputs\":[{\"internalType\":\"contract BotToken[]\",\"name\":\"tokens\",\"type\":\"address[]\"},{\"internalType\":\"contract StatueToken[]\",\"name\":\"statueTokens\",\"type\":\"address[]\"},{\"internalType\":\"uint256[]\",\"name\":\"thresholdBots\",\"type\":\"uint256[]\"},{\"internalType\":\"uint256[]\",\"name\":\"thresholdStatues\",\"type\":\"uint256[]\"},{\"internalType\":\"uint256\",\"name\":\"startPriceBot\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"startPriceStatue\",\"type\":\"uint256\"},{\"internalType\":\"uint256[]\",\"name\":\"inflationRatesStatues\",\"type\":\"uint256[]\"},{\"internalType\":\"uint256[]\",\"name\":\"inflationRatesBots\",\"type\":\"uint256[]\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"getDetailForStatueLevels\",\"outputs\":[{\"internalType\":\"uint256[5][]\",\"name\":\"\",\"type\":\"uint256[5][]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getDetailForTokenLevels\",\"outputs\":[{\"internalType\":\"uint256[5][]\",\"name\":\"\",\"type\":\"uint256[5][]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_level\",\"type\":\"uint256\"}],\"name\":\"lastestPriceForStatueLevel\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_level\",\"type\":\"uint256\"}],\"name\":\"lastestPriceForTokenLevel\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"level\",\"type\":\"uint256\"}],\"name\":\"requestMint\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"level\",\"type\":\"uint256\"}],\"name\":\"requestMintStatue\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalStatues\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalTokens\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"}],\"name\":\"transferStatueOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"}],\"name\":\"transferTokenOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_level\",\"type\":\"uint256\"}],\"name\":\"whompwhomp\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}]","ContractName":"GreatestLARP","CompilerVersion":"v0.8.4+commit.c7e474f2","OptimizationUsed":"1","Runs":"200","ConstructorArguments":"0000000000000000000000000000000000000000000000000000000000000100000000000000000000000000000000000000000000000000000000000000016000000000000000000000000000000000000000000000000000000000000001c00000000000000000000000000000000000000000000000000000000000000220000000000000000000000000000000000000000000000000000bb9551fc2400000000000000000000000000000000000000000000000000029a2241af62c0000000000000000000000000000000000000000000000000000000000000000028000000000000000000000000000000000000000000000000000000000000002e0000000000000000000000000000000000000000000000000000000000000000200000000000000000000000082c7c02a52b75387db14fa375938496cbb98438800000000000000000000000042dcba5da33cddb8202cc182a443a3e7b299dadb0000000000000000000000000000000000000000000000000000000000000002000000000000000000000000f80e61279bdc3d02bb9b1887a026f500b203893d000000000000000000000000abc230e044f828e142d116d46762e95a92e4bce2000000000000000000000000000000000000000000000000000000000000000200000000000000000000000000000000000000000000000000000000000000c800000000000000000000000000000000000000000000000000000000000000cf0000000000000000000000000000000000000000000000000000000000000417","EVMVersion":"Default","Library":"","LicenseType":"","Proxy":"0","Implementation":"","SwarmSource":""}]}