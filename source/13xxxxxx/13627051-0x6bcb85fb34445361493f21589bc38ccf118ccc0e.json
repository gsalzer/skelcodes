{"status":"1","message":"OK","result":[{"SourceCode":"{{\r\n  \"language\": \"Solidity\",\r\n  \"sources\": {\r\n    \"contracts/Vault.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: UNLICENSED\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"@openzeppelin/contracts/token/ERC20/extensions/IERC20Metadata.sol\\\";\\nimport \\\"@openzeppelin/contracts/security/ReentrancyGuard.sol\\\";\\nimport \\\"@openzeppelin/contracts/access/Ownable.sol\\\";\\nimport \\\"@openzeppelin/contracts/utils/math/Math.sol\\\";\\n\\ncontract Vault is IERC20, ReentrancyGuard, Ownable {\\n\\tusing Math for uint256;\\n\\tevent EmergencyShutdown(bool active);\\n\\tevent SwapInProcessed(address indexed sender, uint256 amount, uint256 fee);\\n\\tevent SwapOutProcessed(address indexed sender, uint256 amount);\\n\\tevent RefundProcessed(address indexed sender, uint256 amount, uint256 fee);\\n\\n\\tstring public name;\\n\\tstring public symbol;\\n\\tuint8 public decimals;\\n\\n\\tuint256 public override totalSupply;\\n\\n\\t// total USD amount of LP providers, decimals = 18\\n\\tuint256 public totalTokens;\\n\\n\\t// treasury amount stored in contract, decimals = 6\\n\\tuint256 public treasuryAmount;\\n\\n\\t// minimum swapin amount\\n\\tuint256 private _minAmountForSwap;\\n\\n\\tmapping(address => uint256) private _balances;\\n\\tmapping(address => mapping(address => uint256)) private _allowances;\\n\\n\\tbool public emergencyShutdown;\\n\\tIERC20Metadata public token;\\n\\taddress public bridge;\\n\\n\\t// 50% of the fee to LP providers, 50% goes to treasury\\n\\tuint256 public lpFee = 5_000;\\n\\tuint256 constant BASIS_POINT = 10_000;\\n\\n\\tuint256 public txFee;\\n\\n\\tmodifier onlyBridge() {\\n\\t\\trequire(msg.sender == bridge);\\n\\t\\t_;\\n\\t}\\n\\n\\tmodifier notLocked() {\\n\\t\\trequire(!emergencyShutdown, \\\"Vault is locked out\\\");\\n\\t\\t_;\\n\\t}\\n\\n\\tconstructor(\\n\\t\\tstring memory _name,\\n\\t\\tstring memory _symbol,\\n\\t\\taddress _token,\\n\\t\\taddress _bridge,\\n\\t\\tuint256 _minAmount,\\n\\t\\tuint256 _txFee\\n\\t) {\\n\\t\\trequire(_bridge != address(0));\\n\\t\\tname = _name;\\n\\t\\tsymbol = _symbol;\\n\\t\\tdecimals = 18;\\n\\t\\ttoken = IERC20Metadata(_token);\\n\\t\\tbridge = _bridge;\\n\\t\\t_minAmountForSwap = _minAmount;\\n\\t\\ttxFee = _txFee;\\n\\t}\\n\\n\\t/// @notice Deposit USD token and get LP tokens in exchange\\n\\t/// @param _amount Amount of token user wants to deposit\\n\\t/// @param _recipient the address that receives LP tokens\\n\\tfunction deposit(uint256 _amount, address _recipient) public nonReentrant notLocked returns (uint256) {\\n\\t\\trequire(_recipient != address(0));\\n\\t\\trequire(_recipient != address(this));\\n\\n\\t\\tuint256 amount = _amount;\\n\\n\\t\\t// If _amount not specified, transfer the full token balance,\\n\\t\\t// up to deposit limit\\n\\t\\tif (amount == type(uint256).max) amount = token.balanceOf(msg.sender);\\n\\n\\t\\t// sanity check\\n\\t\\trequire(amount <= token.balanceOf(msg.sender) && amount <= token.allowance(msg.sender, address(this)), \\\"Balance or allowance not sufficient\\\");\\n\\n\\t\\t// Ensure we are depositing something\\n\\t\\trequire(amount > 0);\\n\\n\\t\\t// Issue new shares (needs to be done before taking deposit to be accurate)\\n\\t\\t// Shares are issued to recipient (may be different from msg.sender)\\n\\t\\t// See @dev note, above.\\n\\t\\tuint256 shares = _issueSharesForAmount(_recipient, amount);\\n\\n\\t\\t// Tokens are transferred from msg.sender (may be different from _recipient)\\n\\t\\ttoken.transferFrom(msg.sender, address(this), amount);\\n\\n\\t\\treturn shares; // Just in case someone wants them\\n\\t}\\n\\n\\t/// @notice Withdraw USD tokens and burn LP tokens\\n\\t/// @param _amount Amount of LP token user wants to withdraw\\n\\t/// @param _recipient the address that receives USD tokens\\n\\tfunction withdraw(uint256 _amount, address _recipient) external nonReentrant notLocked returns (uint256) {\\n\\t\\t// If _shares not specified, transfer full share balance\\n\\t\\tuint256 shares = _amount;\\n\\t\\tif (_amount == type(uint256).max) {\\n\\t\\t\\tshares = _balances[msg.sender];\\n\\t\\t}\\n\\n\\t\\t// Limit to only the shares they own\\n\\t\\trequire(shares <= _balances[msg.sender], \\\"Amount exceeds balance\\\");\\n\\n\\t\\t// Ensure we are withdrawing something\\n\\t\\trequire(shares > 0, \\\"Nothing to withdraw\\\");\\n\\n\\t\\tuint256 tokensToTransfer = (shares * totalTokens) / totalSupply;\\n\\t\\ttotalSupply -= shares;\\n\\t\\t_balances[msg.sender] -= shares;\\n\\t\\ttotalTokens -= tokensToTransfer;\\n\\t\\temit Transfer(msg.sender, address(0), shares);\\n\\t\\ttoken.transfer(_recipient, (tokensToTransfer * 10**token.decimals()) / (10**decimals));\\n\\n\\t\\treturn shares;\\n\\t}\\n\\n\\tfunction _issueSharesForAmount(address to, uint256 amount) internal returns (uint256) {\\n\\t\\t// Issues `amount` Vault shares to `to`.\\n\\t\\t// Shares must be issued prior to taking on new collateral, or\\n\\t\\t// calculation will be wrong. This means that only *trusted* tokens\\n\\t\\t// (with no capability for exploitative behavior) can be used.\\n\\t\\tuint256 _amount = 0;\\n\\n\\t\\t_amount = (amount * (10**decimals)) / 10**token.decimals();\\n\\t\\trequire(_amount != 0); // dev: division rounding resulted in zero\\n\\n\\t\\tuint256 newSupply = _amount; // maybe small amount than amount\\n\\t\\tif (totalSupply > 0) {\\n\\t\\t\\tnewSupply = (newSupply * totalSupply) / totalTokens;\\n\\t\\t}\\n\\n\\t\\t// Mint new shares\\n\\t\\ttotalSupply += newSupply;\\n\\t\\ttotalTokens += _amount;\\n\\t\\t_balances[to] += newSupply;\\n\\t\\temit Transfer(address(0), to, newSupply);\\n\\n\\t\\treturn newSupply;\\n\\t}\\n\\n\\tfunction _totalAssets() internal view returns (uint256) {\\n\\t\\t// See note on `totalAssets()`.\\n\\t\\treturn token.balanceOf(address(this));\\n\\t}\\n\\n\\t/// @notice Returns the total quantity of all assets under control of this\\n\\t/// Vault, whether they're loaned out to a Strategy, or currently held in\\n\\t/// the Vault.\\n\\t/// @return The total assets under control of this Vault.\\n\\tfunction totalAssets() external view returns (uint256) {\\n\\t\\treturn _totalAssets();\\n\\t}\\n\\n\\t/// @notice Returns the min amount for swapping, default is 0\\n\\t/// @return minimum token amount for swap\\n\\tfunction minAmountForSwap() external view returns (uint256) {\\n\\t\\treturn _minAmountForSwap;\\n\\t}\\n\\n\\t/// @notice Set shutdown flag for emergency\\n\\t/// @param down Shutdown flag\\n\\tfunction setEmergencyShutdown(bool down) external onlyOwner {\\n\\t\\temergencyShutdown = down;\\n\\t\\temit EmergencyShutdown(down);\\n\\t}\\n\\n\\t/// @notice Set minimum swap amount\\n\\t/// @param minAmount Minimum amount\\n\\tfunction setMinAmountForSwap(uint256 minAmount) external onlyOwner {\\n\\t\\t_minAmountForSwap = minAmount;\\n\\t}\\n\\n\\t/// @notice Set transaction fee\\n\\t/// @param _txFee Transaction fee in tokens\\n\\tfunction setTxFee(uint256 _txFee) external onlyOwner {\\n\\t\\ttxFee = _txFee;\\n\\t}\\n\\n\\tfunction transfer(address recipient, uint256 amount) public virtual override returns (bool) {\\n\\t\\t_transfer(_msgSender(), recipient, amount);\\n\\t\\treturn true;\\n\\t}\\n\\n\\tfunction balanceOf(address account) public view virtual override returns (uint256) {\\n\\t\\treturn _balances[account];\\n\\t}\\n\\n\\tfunction tokenAllocationOf(address account) public view returns (uint256) {\\n\\t\\treturn ((_balances[account] * totalTokens) * (10**token.decimals())) / 10**decimals / totalSupply;\\n\\t}\\n\\n\\tfunction _transfer(\\n\\t\\taddress sender,\\n\\t\\taddress recipient,\\n\\t\\tuint256 amount\\n\\t) internal virtual {\\n\\t\\trequire(sender != address(0), \\\"ERC20: transfer from the zero address\\\");\\n\\t\\trequire(recipient != address(0), \\\"ERC20: transfer to the zero address\\\");\\n\\n\\t\\tuint256 senderBalance = _balances[sender];\\n\\t\\trequire(senderBalance >= amount, \\\"ERC20: transfer amount exceeds balance\\\");\\n\\t\\tunchecked {\\n\\t\\t\\t_balances[sender] = senderBalance - amount;\\n\\t\\t}\\n\\t\\t_balances[recipient] += amount;\\n\\n\\t\\temit Transfer(sender, recipient, amount);\\n\\t}\\n\\n\\tfunction allowance(address owner, address spender) public view virtual override returns (uint256) {\\n\\t\\treturn _allowances[owner][spender];\\n\\t}\\n\\n\\tfunction increaseAllowance(address spender, uint256 addedValue) public virtual returns (bool) {\\n\\t\\t_approve(_msgSender(), spender, _allowances[_msgSender()][spender] + addedValue);\\n\\t\\treturn true;\\n\\t}\\n\\n\\tfunction decreaseAllowance(address spender, uint256 subtractedValue) public virtual returns (bool) {\\n\\t\\tuint256 currentAllowance = _allowances[_msgSender()][spender];\\n\\t\\trequire(currentAllowance >= subtractedValue, \\\"ERC20: decreased allowance below zero\\\");\\n\\t\\tunchecked {\\n\\t\\t\\t_approve(_msgSender(), spender, currentAllowance - subtractedValue);\\n\\t\\t}\\n\\t\\treturn true;\\n\\t}\\n\\n\\tfunction approve(address spender, uint256 amount) public virtual override returns (bool) {\\n\\t\\t_approve(_msgSender(), spender, amount);\\n\\t\\treturn true;\\n\\t}\\n\\n\\tfunction transferFrom(\\n\\t\\taddress sender,\\n\\t\\taddress recipient,\\n\\t\\tuint256 amount\\n\\t) public virtual override returns (bool) {\\n\\t\\t_transfer(sender, recipient, amount);\\n\\t\\tuint256 currentAllowance = _allowances[sender][_msgSender()];\\n\\t\\trequire(currentAllowance >= amount, \\\"ERC20: transfer amount exceeds allowance\\\");\\n\\t\\tunchecked {\\n\\t\\t\\t_approve(sender, _msgSender(), currentAllowance - amount);\\n\\t\\t}\\n\\t\\treturn true;\\n\\t}\\n\\n\\tfunction _approve(\\n\\t\\taddress owner,\\n\\t\\taddress spender,\\n\\t\\tuint256 amount\\n\\t) internal virtual {\\n\\t\\trequire(owner != address(0), \\\"ERC20: approve from the zero address\\\");\\n\\t\\trequire(spender != address(0), \\\"ERC20: approve to the zero address\\\");\\n\\n\\t\\t_allowances[owner][spender] = amount;\\n\\t\\temit Approval(owner, spender, amount);\\n\\t}\\n\\n\\t/// @notice Called by bridge to transfer amount to destination user\\n\\t/// @param account the account to receive swapped amount\\n\\t/// @param amount the amount of tokens the user will receive\\n\\tfunction swapOut(address account, uint256 amount) external onlyBridge notLocked returns (bool) {\\n\\t\\trequire(amount <= token.balanceOf(address(this)), \\\"Transfer amount exceeds vault balance\\\");\\n\\t\\ttoken.transfer(account, amount);\\n\\t\\temit SwapOutProcessed(account, amount);\\n\\t\\treturn true;\\n\\t}\\n\\n\\t/// @notice Starts swapIn process\\n\\t/// @param account the account to receive on destination chain\\n\\t/// @param amount the amount user wants to send for swap(including fee)\\n\\t/// @param fee the fee amount needed for swap process\\n\\tfunction swapIn(\\n\\t\\taddress account,\\n\\t\\tuint256 amount,\\n\\t\\tuint256 fee\\n\\t) external notLocked {\\n\\t\\trequire(amount >= _minAmountForSwap, \\\"Should be bigger than minimum amount\\\");\\n\\t\\trequire(fee >= txFee, \\\"Fee should be greater than tx fee\\\");\\n\\t\\tIERC20Metadata(token).transferFrom(msg.sender, address(this), amount);\\n\\t\\tuint256 redistribution = ((fee - txFee) * lpFee) / BASIS_POINT;\\n\\n\\t\\ttotalTokens += (redistribution * (10**decimals)) / 10**token.decimals();\\n\\t\\ttreasuryAmount += fee - redistribution;\\n\\n\\t\\temit SwapInProcessed(account, amount, fee);\\n\\t}\\n\\n\\t/// @notice Refund the amount waiting for swap\\n\\t/// @param account the account to receive on destination chain\\n\\t/// @param amount the amount user wanted to send for swap(including fee)\\n\\t/// @param fee the last fee amount that will be refunded\\n\\t/// @param gasFee the amount will be consumed for refund transaction\\n\\tfunction refund(\\n\\t\\taddress account,\\n\\t\\tuint256 amount,\\n\\t\\tuint256 fee,\\n\\t\\tuint256 gasFee\\n\\t) external onlyBridge notLocked {\\n\\t\\tIERC20Metadata(token).transfer(account, amount);\\n\\t\\tuint256 redistribution = ((fee - txFee) * lpFee) / BASIS_POINT;\\n\\n\\t\\ttotalTokens -= (redistribution * (10**decimals)) / 10**token.decimals();\\n\\t\\ttreasuryAmount -= fee - redistribution;\\n\\n\\t\\ttreasuryAmount += gasFee;\\n\\n\\t\\temit RefundProcessed(account, amount, fee);\\n\\t}\\n\\n\\tfunction withdrawTreasury() external onlyOwner {\\n\\t\\trequire(treasuryAmount > 0, \\\"Nothing to withdraw\\\");\\n\\t\\tuint256 amount = treasuryAmount;\\n\\t\\ttreasuryAmount = 0;\\n\\t\\tIERC20Metadata(token).transfer(msg.sender, amount);\\n\\t}\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/token/ERC20/extensions/IERC20Metadata.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../IERC20.sol\\\";\\n\\n/**\\n * @dev Interface for the optional metadata functions from the ERC20 standard.\\n *\\n * _Available since v4.1._\\n */\\ninterface IERC20Metadata is IERC20 {\\n    /**\\n     * @dev Returns the name of the token.\\n     */\\n    function name() external view returns (string memory);\\n\\n    /**\\n     * @dev Returns the symbol of the token.\\n     */\\n    function symbol() external view returns (string memory);\\n\\n    /**\\n     * @dev Returns the decimals places of the token.\\n     */\\n    function decimals() external view returns (uint8);\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/security/ReentrancyGuard.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Contract module that helps prevent reentrant calls to a function.\\n *\\n * Inheriting from `ReentrancyGuard` will make the {nonReentrant} modifier\\n * available, which can be applied to functions to make sure there are no nested\\n * (reentrant) calls to them.\\n *\\n * Note that because there is a single `nonReentrant` guard, functions marked as\\n * `nonReentrant` may not call one another. This can be worked around by making\\n * those functions `private`, and then adding `external` `nonReentrant` entry\\n * points to them.\\n *\\n * TIP: If you would like to learn more about reentrancy and alternative ways\\n * to protect against it, check out our blog post\\n * https://blog.openzeppelin.com/reentrancy-after-istanbul/[Reentrancy After Istanbul].\\n */\\nabstract contract ReentrancyGuard {\\n    // Booleans are more expensive than uint256 or any type that takes up a full\\n    // word because each write operation emits an extra SLOAD to first read the\\n    // slot's contents, replace the bits taken up by the boolean, and then write\\n    // back. This is the compiler's defense against contract upgrades and\\n    // pointer aliasing, and it cannot be disabled.\\n\\n    // The values being non-zero value makes deployment a bit more expensive,\\n    // but in exchange the refund on every call to nonReentrant will be lower in\\n    // amount. Since refunds are capped to a percentage of the total\\n    // transaction's gas, it is best to keep them low in cases like this one, to\\n    // increase the likelihood of the full refund coming into effect.\\n    uint256 private constant _NOT_ENTERED = 1;\\n    uint256 private constant _ENTERED = 2;\\n\\n    uint256 private _status;\\n\\n    constructor() {\\n        _status = _NOT_ENTERED;\\n    }\\n\\n    /**\\n     * @dev Prevents a contract from calling itself, directly or indirectly.\\n     * Calling a `nonReentrant` function from another `nonReentrant`\\n     * function is not supported. It is possible to prevent this from happening\\n     * by making the `nonReentrant` function external, and make it call a\\n     * `private` function that does the actual work.\\n     */\\n    modifier nonReentrant() {\\n        // On the first call to nonReentrant, _notEntered will be true\\n        require(_status != _ENTERED, \\\"ReentrancyGuard: reentrant call\\\");\\n\\n        // Any calls to nonReentrant after this point will fail\\n        _status = _ENTERED;\\n\\n        _;\\n\\n        // By storing the original value once again, a refund is triggered (see\\n        // https://eips.ethereum.org/EIPS/eip-2200)\\n        _status = _NOT_ENTERED;\\n    }\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/access/Ownable.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../utils/Context.sol\\\";\\n\\n/**\\n * @dev Contract module which provides a basic access control mechanism, where\\n * there is an account (an owner) that can be granted exclusive access to\\n * specific functions.\\n *\\n * By default, the owner account will be the one that deploys the contract. This\\n * can later be changed with {transferOwnership}.\\n *\\n * This module is used through inheritance. It will make available the modifier\\n * `onlyOwner`, which can be applied to your functions to restrict their use to\\n * the owner.\\n */\\nabstract contract Ownable is Context {\\n    address private _owner;\\n\\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\\n\\n    /**\\n     * @dev Initializes the contract setting the deployer as the initial owner.\\n     */\\n    constructor() {\\n        _setOwner(_msgSender());\\n    }\\n\\n    /**\\n     * @dev Returns the address of the current owner.\\n     */\\n    function owner() public view virtual returns (address) {\\n        return _owner;\\n    }\\n\\n    /**\\n     * @dev Throws if called by any account other than the owner.\\n     */\\n    modifier onlyOwner() {\\n        require(owner() == _msgSender(), \\\"Ownable: caller is not the owner\\\");\\n        _;\\n    }\\n\\n    /**\\n     * @dev Leaves the contract without owner. It will not be possible to call\\n     * `onlyOwner` functions anymore. Can only be called by the current owner.\\n     *\\n     * NOTE: Renouncing ownership will leave the contract without an owner,\\n     * thereby removing any functionality that is only available to the owner.\\n     */\\n    function renounceOwnership() public virtual onlyOwner {\\n        _setOwner(address(0));\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Can only be called by the current owner.\\n     */\\n    function transferOwnership(address newOwner) public virtual onlyOwner {\\n        require(newOwner != address(0), \\\"Ownable: new owner is the zero address\\\");\\n        _setOwner(newOwner);\\n    }\\n\\n    function _setOwner(address newOwner) private {\\n        address oldOwner = _owner;\\n        _owner = newOwner;\\n        emit OwnershipTransferred(oldOwner, newOwner);\\n    }\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/utils/math/Math.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Standard math utilities missing in the Solidity language.\\n */\\nlibrary Math {\\n    /**\\n     * @dev Returns the largest of two numbers.\\n     */\\n    function max(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a >= b ? a : b;\\n    }\\n\\n    /**\\n     * @dev Returns the smallest of two numbers.\\n     */\\n    function min(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a < b ? a : b;\\n    }\\n\\n    /**\\n     * @dev Returns the average of two numbers. The result is rounded towards\\n     * zero.\\n     */\\n    function average(uint256 a, uint256 b) internal pure returns (uint256) {\\n        // (a + b) / 2 can overflow, so we distribute.\\n        return (a / 2) + (b / 2) + (((a % 2) + (b % 2)) / 2);\\n    }\\n\\n    /**\\n     * @dev Returns the ceiling of the division of two numbers.\\n     *\\n     * This differs from standard division with `/` in that it rounds up instead\\n     * of rounding down.\\n     */\\n    function ceilDiv(uint256 a, uint256 b) internal pure returns (uint256) {\\n        // (a + b - 1) / b can overflow on addition, so we distribute.\\n        return a / b + (a % b == 0 ? 0 : 1);\\n    }\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/token/ERC20/IERC20.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC20 standard as defined in the EIP.\\n */\\ninterface IERC20 {\\n    /**\\n     * @dev Returns the amount of tokens in existence.\\n     */\\n    function totalSupply() external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the amount of tokens owned by `account`.\\n     */\\n    function balanceOf(address account) external view returns (uint256);\\n\\n    /**\\n     * @dev Moves `amount` tokens from the caller's account to `recipient`.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transfer(address recipient, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Returns the remaining number of tokens that `spender` will be\\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\\n     * zero by default.\\n     *\\n     * This value changes when {approve} or {transferFrom} are called.\\n     */\\n    function allowance(address owner, address spender) external view returns (uint256);\\n\\n    /**\\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\\n     * that someone may use both the old and the new allowance by unfortunate\\n     * transaction ordering. One possible solution to mitigate this race\\n     * condition is to first reduce the spender's allowance to 0 and set the\\n     * desired value afterwards:\\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address spender, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Moves `amount` tokens from `sender` to `recipient` using the\\n     * allowance mechanism. `amount` is then deducted from the caller's\\n     * allowance.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(\\n        address sender,\\n        address recipient,\\n        uint256 amount\\n    ) external returns (bool);\\n\\n    /**\\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\\n     * another (`to`).\\n     *\\n     * Note that `value` may be zero.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 value);\\n\\n    /**\\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\\n     * a call to {approve}. `value` is the new allowance.\\n     */\\n    event Approval(address indexed owner, address indexed spender, uint256 value);\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/utils/Context.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\n/*\\n * @dev Provides information about the current execution context, including the\\n * sender of the transaction and its data. While these are generally available\\n * via msg.sender and msg.data, they should not be accessed in such a direct\\n * manner, since when dealing with meta-transactions the account sending and\\n * paying for execution may not be the actual sender (as far as an application\\n * is concerned).\\n *\\n * This contract is only required for intermediate, library-like contracts.\\n */\\nabstract contract Context {\\n    function _msgSender() internal view virtual returns (address) {\\n        return msg.sender;\\n    }\\n\\n    function _msgData() internal view virtual returns (bytes calldata) {\\n        return msg.data;\\n    }\\n}\\n\"\r\n    }\r\n  },\r\n  \"settings\": {\r\n    \"optimizer\": {\r\n      \"enabled\": false,\r\n      \"runs\": 200\r\n    },\r\n    \"outputSelection\": {\r\n      \"*\": {\r\n        \"*\": [\r\n          \"evm.bytecode\",\r\n          \"evm.deployedBytecode\",\r\n          \"devdoc\",\r\n          \"userdoc\",\r\n          \"metadata\",\r\n          \"abi\"\r\n        ]\r\n      }\r\n    },\r\n    \"libraries\": {}\r\n  }\r\n}}","ABI":"[{\"inputs\":[{\"internalType\":\"string\",\"name\":\"_name\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"_symbol\",\"type\":\"string\"},{\"internalType\":\"address\",\"name\":\"_token\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_bridge\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_minAmount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_txFee\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Approval\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"bool\",\"name\":\"active\",\"type\":\"bool\"}],\"name\":\"EmergencyShutdown\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"fee\",\"type\":\"uint256\"}],\"name\":\"RefundProcessed\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"fee\",\"type\":\"uint256\"}],\"name\":\"SwapInProcessed\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"SwapOutProcessed\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Transfer\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"}],\"name\":\"allowance\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"approve\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"bridge\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"decimals\",\"outputs\":[{\"internalType\":\"uint8\",\"name\":\"\",\"type\":\"uint8\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"subtractedValue\",\"type\":\"uint256\"}],\"name\":\"decreaseAllowance\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"_recipient\",\"type\":\"address\"}],\"name\":\"deposit\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"emergencyShutdown\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"addedValue\",\"type\":\"uint256\"}],\"name\":\"increaseAllowance\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"lpFee\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"minAmountForSwap\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"name\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"fee\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"gasFee\",\"type\":\"uint256\"}],\"name\":\"refund\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bool\",\"name\":\"down\",\"type\":\"bool\"}],\"name\":\"setEmergencyShutdown\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"minAmount\",\"type\":\"uint256\"}],\"name\":\"setMinAmountForSwap\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_txFee\",\"type\":\"uint256\"}],\"name\":\"setTxFee\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"fee\",\"type\":\"uint256\"}],\"name\":\"swapIn\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"swapOut\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"symbol\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"token\",\"outputs\":[{\"internalType\":\"contract IERC20Metadata\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"tokenAllocationOf\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalAssets\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalSupply\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalTokens\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"recipient\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"transfer\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"recipient\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"transferFrom\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"treasuryAmount\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"txFee\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"_recipient\",\"type\":\"address\"}],\"name\":\"withdraw\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"withdrawTreasury\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}]","ContractName":"Vault","CompilerVersion":"v0.8.0+commit.c7dfd78e","OptimizationUsed":"0","Runs":"200","ConstructorArguments":"00000000000000000000000000000000000000000000000000000000000000c00000000000000000000000000000000000000000000000000000000000000100000000000000000000000000dac17f958d2ee523a2206206994597c13d831ec70000000000000000000000007b250f58146d0dd7fd7c491f33e7f1e37bafee4a0000000000000000000000000000000000000000000000000000000005f5e10000000000000000000000000000000000000000000000000000000000000aae600000000000000000000000000000000000000000000000000000000000000007666f726d55534400000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000d466f726d6174696f6e2055534400000000000000000000000000000000000000","EVMVersion":"Default","Library":"","LicenseType":"","Proxy":"0","Implementation":"","SwarmSource":""}]}