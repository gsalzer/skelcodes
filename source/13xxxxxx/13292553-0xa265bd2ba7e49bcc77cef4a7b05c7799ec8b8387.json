{"status":"1","message":"OK","result":[{"SourceCode":"// Sources flattened with hardhat v2.6.4 https://hardhat.org\r\n\r\n// File @openzeppelin/contracts/utils/Context.sol@v4.3.2\r\n\r\n// SPDX-License-Identifier: MIT\r\n\r\npragma solidity ^0.8.0;\r\n\r\n/**\r\n * @dev Provides information about the current execution context, including the\r\n * sender of the transaction and its data. While these are generally available\r\n * via msg.sender and msg.data, they should not be accessed in such a direct\r\n * manner, since when dealing with meta-transactions the account sending and\r\n * paying for execution may not be the actual sender (as far as an application\r\n * is concerned).\r\n *\r\n * This contract is only required for intermediate, library-like contracts.\r\n */\r\nabstract contract Context {\r\n    function _msgSender() internal view virtual returns (address) {\r\n        return msg.sender;\r\n    }\r\n\r\n    function _msgData() internal view virtual returns (bytes calldata) {\r\n        return msg.data;\r\n    }\r\n}\r\n\r\n\r\n// File @openzeppelin/contracts/access/Ownable.sol@v4.3.2\r\n\r\n\r\n\r\npragma solidity ^0.8.0;\r\n\r\n/**\r\n * @dev Contract module which provides a basic access control mechanism, where\r\n * there is an account (an owner) that can be granted exclusive access to\r\n * specific functions.\r\n *\r\n * By default, the owner account will be the one that deploys the contract. This\r\n * can later be changed with {transferOwnership}.\r\n *\r\n * This module is used through inheritance. It will make available the modifier\r\n * `onlyOwner`, which can be applied to your functions to restrict their use to\r\n * the owner.\r\n */\r\nabstract contract Ownable is Context {\r\n    address private _owner;\r\n\r\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\r\n\r\n    /**\r\n     * @dev Initializes the contract setting the deployer as the initial owner.\r\n     */\r\n    constructor() {\r\n        _setOwner(_msgSender());\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the address of the current owner.\r\n     */\r\n    function owner() public view virtual returns (address) {\r\n        return _owner;\r\n    }\r\n\r\n    /**\r\n     * @dev Throws if called by any account other than the owner.\r\n     */\r\n    modifier onlyOwner() {\r\n        require(owner() == _msgSender(), \"Ownable: caller is not the owner\");\r\n        _;\r\n    }\r\n\r\n    /**\r\n     * @dev Leaves the contract without owner. It will not be possible to call\r\n     * `onlyOwner` functions anymore. Can only be called by the current owner.\r\n     *\r\n     * NOTE: Renouncing ownership will leave the contract without an owner,\r\n     * thereby removing any functionality that is only available to the owner.\r\n     */\r\n    function renounceOwnership() public virtual onlyOwner {\r\n        _setOwner(address(0));\r\n    }\r\n\r\n    /**\r\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\r\n     * Can only be called by the current owner.\r\n     */\r\n    function transferOwnership(address newOwner) public virtual onlyOwner {\r\n        require(newOwner != address(0), \"Ownable: new owner is the zero address\");\r\n        _setOwner(newOwner);\r\n    }\r\n\r\n    function _setOwner(address newOwner) private {\r\n        address oldOwner = _owner;\r\n        _owner = newOwner;\r\n        emit OwnershipTransferred(oldOwner, newOwner);\r\n    }\r\n}\r\n\r\n\r\n// File contracts/WickedStaking.sol\r\n\r\n\r\npragma solidity ^0.8.0;\r\n\r\nabstract contract TWC {\r\n    function ownerOf(uint256 tokenId) public view virtual returns (address);\r\n\r\n    function tokenOfOwnerByIndex(address owner, uint256 index) public view virtual returns (uint256);\r\n\r\n    function balanceOf(address owner) external view virtual returns (uint256 balance);\r\n\r\n    function setApprovalForAll(address operator, bool _approved) external virtual;\r\n\r\n    function transferFrom(\r\n        address from,\r\n        address to,\r\n        uint256 tokenId\r\n    ) external virtual;\r\n}\r\n\r\nabstract contract TWS {\r\n    function ownerOf(uint256 tokenId) public view virtual returns (address);\r\n\r\n    function tokenOfOwnerByIndex(address owner, uint256 index) public view virtual returns (uint256);\r\n\r\n    function balanceOf(address owner) external view virtual returns (uint256 balance);\r\n\r\n    function setApprovalForAll(address operator, bool _approved) external virtual;\r\n\r\n    function transferFrom(\r\n        address from,\r\n        address to,\r\n        uint256 tokenId\r\n    ) external virtual;\r\n}\r\n\r\nabstract contract WickedCraniumsComic {\r\n    function ownerOf(uint256 tokenId) external view virtual returns (address);\r\n\r\n    function tokenOfOwnerByIndex(address owner, uint256 index) external view virtual returns (uint256);\r\n\r\n    function balanceOf(address owner) external view virtual returns (uint256 balance);\r\n\r\n    function safeMint(address to) public virtual;\r\n}\r\n\r\nabstract contract WickedCraniumsXHaylos {\r\n    function ownerOf(uint256 tokenId) external view virtual returns (address);\r\n\r\n    function tokenOfOwnerByIndex(address owner, uint256 index) external view virtual returns (uint256);\r\n\r\n    function balanceOf(address owner) external view virtual returns (uint256 balance);\r\n\r\n    function safeMint(address to) public virtual;\r\n}\r\n\r\ncontract WickedStaking is Ownable {\r\n    TWC private twc = TWC(0x85f740958906b317de6ed79663012859067E745B);\r\n    TWS private tws = TWS(0x45d8f7Db9b437efbc74BA6a945A81AaF62dcedA7);\r\n    WickedCraniumsComic private comic = WickedCraniumsComic(0xA932DaC13BED512aaa12975f7aD892afB120022f);\r\n    WickedCraniumsXHaylos private haylos = WickedCraniumsXHaylos(0xB8bD00aA3a8fa212E0654c7382c1c7936c9728e6);\r\n\r\n    mapping(address => uint256) private pagesUnredeemed;\r\n    mapping(address => uint256[]) private addressToCraniumsStaked;\r\n    mapping(address => uint256[]) private addressToStallionsStaked;\r\n    mapping(address => uint256) private unstakedIndex;\r\n\r\n    bool public isStakingActive = false;\r\n    bool public areComicPagesRedeemable = false;\r\n    bool public isUnstakingActive = false;\r\n\r\n    constructor() {}\r\n\r\n    function flipStakingState() public onlyOwner {\r\n        isStakingActive = !isStakingActive;\r\n    }\r\n\r\n    function flipComicRedeemableState() public onlyOwner {\r\n        areComicPagesRedeemable = !areComicPagesRedeemable;\r\n    }\r\n\r\n    function flipUnstakingState() public onlyOwner {\r\n        isUnstakingActive = !isUnstakingActive;\r\n    }\r\n\r\n    function stake(uint256[] memory craniumIds, uint256[] memory stallionIds) public {\r\n        require(isStakingActive, \"stake: staking must be active\");\r\n        require(craniumIds.length == stallionIds.length, \"stake: Total number of Craniums staked must match the total number of Stallions staked.\");\r\n        require(craniumIds.length >= 1, \"stake: 1 or more {Cranium, Stallion} pairs must be staked.\");\r\n\r\n        for (uint256 i = 0; i < craniumIds.length; i++) {\r\n            require(twc.ownerOf(craniumIds[i]) == msg.sender, \"stake: msg.sender must be the owner of all Craniums staked.\");\r\n        }\r\n\r\n        for (uint256 i = 0; i < stallionIds.length; i++) {\r\n            require(tws.ownerOf(stallionIds[i]) == msg.sender, \"stake: msg.sender must be the owner of all Stallions staked.\");\r\n        }\r\n\r\n        // twc.setApprovalForAll(address(this), true);\r\n        // tws.setApprovalForAll(address(this), true);\r\n\r\n        for (uint256 i = 0; i < craniumIds.length; i++) {\r\n            twc.transferFrom(msg.sender, address(this), craniumIds[i]);\r\n        }\r\n\r\n        for (uint256 i = 0; i < stallionIds.length; i++) {\r\n            tws.transferFrom(msg.sender, address(this), stallionIds[i]);\r\n        }\r\n\r\n        for (uint256 i = 0; i < craniumIds.length; i++) {\r\n            haylos.safeMint(msg.sender);\r\n        }\r\n\r\n        pagesUnredeemed[msg.sender] += craniumIds.length;\r\n\r\n        for (uint256 i = 0; i < craniumIds.length; i++) {\r\n            addressToCraniumsStaked[msg.sender].push(craniumIds[i]);\r\n            addressToStallionsStaked[msg.sender].push(stallionIds[i]);\r\n        }\r\n    }\r\n\r\n    function redeemComicPages(uint256 pagesToRedeem) public {\r\n        require(areComicPagesRedeemable, \"redeeming comic pages is not active\");\r\n        require(pagesToRedeem > 0, \"redeemComicPages: Can only request to redeem > 0 pages\");\r\n        require(pagesToRedeem <= pagesUnredeemed[msg.sender], \"redeemComicPages: pages to redeem must be <= pages unredeemed for this address\");\r\n\r\n        for (uint256 i = 0; i < pagesToRedeem; i++) {\r\n            comic.safeMint(msg.sender);\r\n        }\r\n\r\n        pagesUnredeemed[msg.sender] -= pagesToRedeem;\r\n    }\r\n\r\n    function redeemAllComicPages() public {\r\n        require(areComicPagesRedeemable, \"redeeming comic pages is not active\");\r\n        require(pagesUnredeemed[msg.sender] > 0, \"redeemAllComicPages: pages unredeemed for this address should be > 0\");\r\n\r\n        uint256 pagesToRedeem = pagesUnredeemed[msg.sender];\r\n\r\n        for (uint256 i = 0; i < pagesToRedeem; i++) {\r\n            comic.safeMint(msg.sender);\r\n        }\r\n\r\n        pagesUnredeemed[msg.sender] -= pagesToRedeem;\r\n    }\r\n\r\n    function unstakeAll() public {\r\n        require(isUnstakingActive, \"unstaking is not active\");\r\n        require(addressToCraniumsStaked[msg.sender].length > 0, \"unstakeAll: craniums staked for this address should be > 0\");\r\n        require(unstakedIndex[msg.sender] < addressToCraniumsStaked[msg.sender].length, \"unstakeAll: unstake index must be less than total staked\");\r\n\r\n        uint256[] memory craniumsToUnstake = addressToCraniumsStaked[msg.sender];\r\n        uint256[] memory stallionsToUnstake = addressToStallionsStaked[msg.sender];\r\n\r\n        for (uint256 i = unstakedIndex[msg.sender]; i < craniumsToUnstake.length; i++) {\r\n            twc.transferFrom(address(this), msg.sender, craniumsToUnstake[i]);\r\n            tws.transferFrom(address(this), msg.sender, stallionsToUnstake[i]);\r\n        }\r\n\r\n        unstakedIndex[msg.sender] += craniumsToUnstake.length;\r\n    }\r\n\r\n    function unstakeSome(uint256 totalToUnstake) public {\r\n        require(isUnstakingActive, \"unstaking is not active\");\r\n        require(totalToUnstake > 0, \"cannot unstake 0 or less pairs\");\r\n        require(\r\n            totalToUnstake <= addressToCraniumsStaked[msg.sender].length - unstakedIndex[msg.sender],\r\n            \"unstakeSome: totalToUnstake <= total staked - unstakedIndex\"\r\n        );\r\n\r\n        uint256[] memory craniumsStaked = addressToCraniumsStaked[msg.sender];\r\n        uint256[] memory stallionsStaked = addressToStallionsStaked[msg.sender];\r\n\r\n        for (uint256 i = unstakedIndex[msg.sender]; i < unstakedIndex[msg.sender] + totalToUnstake; i++) {\r\n            twc.transferFrom(address(this), msg.sender, craniumsStaked[i]);\r\n            tws.transferFrom(address(this), msg.sender, stallionsStaked[i]);\r\n        }\r\n\r\n        unstakedIndex[msg.sender] += totalToUnstake;\r\n    }\r\n}","ABI":"[{\"inputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"areComicPagesRedeemable\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"flipComicRedeemableState\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"flipStakingState\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"flipUnstakingState\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"isStakingActive\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"isUnstakingActive\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"redeemAllComicPages\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"pagesToRedeem\",\"type\":\"uint256\"}],\"name\":\"redeemComicPages\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256[]\",\"name\":\"craniumIds\",\"type\":\"uint256[]\"},{\"internalType\":\"uint256[]\",\"name\":\"stallionIds\",\"type\":\"uint256[]\"}],\"name\":\"stake\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"unstakeAll\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"totalToUnstake\",\"type\":\"uint256\"}],\"name\":\"unstakeSome\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}]","ContractName":"WickedStaking","CompilerVersion":"v0.8.0+commit.c7dfd78e","OptimizationUsed":"0","Runs":"200","ConstructorArguments":"","EVMVersion":"Default","Library":"","LicenseType":"MIT","Proxy":"0","Implementation":"","SwarmSource":"ipfs://fb95bbd0846fb5c6fd8d9862291045f56e7ab061227bd0f3ebf3df2c5d2d4c67"}]}