{"status":"1","message":"OK","result":[{"SourceCode":"// Sources flattened with hardhat v2.6.8 https://hardhat.org\r\n\r\n// SPDX-License-Identifier: MIT\r\n\r\n// File @openzeppelin/contracts/utils/Context.sol@v3.4.1-solc-0.7-2\r\n\r\npragma solidity >=0.6.0 <0.8.0;\r\n\r\n/*\r\n * @dev Provides information about the current execution context, including the\r\n * sender of the transaction and its data. While these are generally available\r\n * via msg.sender and msg.data, they should not be accessed in such a direct\r\n * manner, since when dealing with GSN meta-transactions the account sending and\r\n * paying for execution may not be the actual sender (as far as an application\r\n * is concerned).\r\n *\r\n * This contract is only required for intermediate, library-like contracts.\r\n */\r\nabstract contract Context {\r\n    function _msgSender() internal view virtual returns (address payable) {\r\n        return msg.sender;\r\n    }\r\n\r\n    function _msgData() internal view virtual returns (bytes memory) {\r\n        this; // silence state mutability warning without generating bytecode - see https://github.com/ethereum/solidity/issues/2691\r\n        return msg.data;\r\n    }\r\n}\r\n\r\n\r\n// File @openzeppelin/contracts/access/Ownable.sol@v3.4.1-solc-0.7-2\r\n\r\npragma solidity ^0.7.0;\r\n\r\n/**\r\n * @dev Contract module which provides a basic access control mechanism, where\r\n * there is an account (an owner) that can be granted exclusive access to\r\n * specific functions.\r\n *\r\n * By default, the owner account will be the one that deploys the contract. This\r\n * can later be changed with {transferOwnership}.\r\n *\r\n * This module is used through inheritance. It will make available the modifier\r\n * `onlyOwner`, which can be applied to your functions to restrict their use to\r\n * the owner.\r\n */\r\nabstract contract Ownable is Context {\r\n    address private _owner;\r\n\r\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\r\n\r\n    /**\r\n     * @dev Initializes the contract setting the deployer as the initial owner.\r\n     */\r\n    constructor () {\r\n        address msgSender = _msgSender();\r\n        _owner = msgSender;\r\n        emit OwnershipTransferred(address(0), msgSender);\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the address of the current owner.\r\n     */\r\n    function owner() public view virtual returns (address) {\r\n        return _owner;\r\n    }\r\n\r\n    /**\r\n     * @dev Throws if called by any account other than the owner.\r\n     */\r\n    modifier onlyOwner() {\r\n        require(owner() == _msgSender(), \"Ownable: caller is not the owner\");\r\n        _;\r\n    }\r\n\r\n    /**\r\n     * @dev Leaves the contract without owner. It will not be possible to call\r\n     * `onlyOwner` functions anymore. Can only be called by the current owner.\r\n     *\r\n     * NOTE: Renouncing ownership will leave the contract without an owner,\r\n     * thereby removing any functionality that is only available to the owner.\r\n     */\r\n    function renounceOwnership() public virtual onlyOwner {\r\n        emit OwnershipTransferred(_owner, address(0));\r\n        _owner = address(0);\r\n    }\r\n\r\n    /**\r\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\r\n     * Can only be called by the current owner.\r\n     */\r\n    function transferOwnership(address newOwner) public virtual onlyOwner {\r\n        require(newOwner != address(0), \"Ownable: new owner is the zero address\");\r\n        emit OwnershipTransferred(_owner, newOwner);\r\n        _owner = newOwner;\r\n    }\r\n}\r\n\r\n\r\n// File @openzeppelin/contracts/math/SafeMath.sol@v3.4.1-solc-0.7-2\r\n\r\npragma solidity ^0.7.0;\r\n\r\n/**\r\n * @dev Wrappers over Solidity's arithmetic operations with added overflow\r\n * checks.\r\n *\r\n * Arithmetic operations in Solidity wrap on overflow. This can easily result\r\n * in bugs, because programmers usually assume that an overflow raises an\r\n * error, which is the standard behavior in high level programming languages.\r\n * `SafeMath` restores this intuition by reverting the transaction when an\r\n * operation overflows.\r\n *\r\n * Using this library instead of the unchecked operations eliminates an entire\r\n * class of bugs, so it's recommended to use it always.\r\n */\r\nlibrary SafeMath {\r\n    /**\r\n     * @dev Returns the addition of two unsigned integers, with an overflow flag.\r\n     *\r\n     * _Available since v3.4._\r\n     */\r\n    function tryAdd(uint256 a, uint256 b) internal pure returns (bool, uint256) {\r\n        uint256 c = a + b;\r\n        if (c < a) return (false, 0);\r\n        return (true, c);\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the substraction of two unsigned integers, with an overflow flag.\r\n     *\r\n     * _Available since v3.4._\r\n     */\r\n    function trySub(uint256 a, uint256 b) internal pure returns (bool, uint256) {\r\n        if (b > a) return (false, 0);\r\n        return (true, a - b);\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the multiplication of two unsigned integers, with an overflow flag.\r\n     *\r\n     * _Available since v3.4._\r\n     */\r\n    function tryMul(uint256 a, uint256 b) internal pure returns (bool, uint256) {\r\n        // Gas optimization: this is cheaper than requiring 'a' not being zero, but the\r\n        // benefit is lost if 'b' is also tested.\r\n        // See: https://github.com/OpenZeppelin/openzeppelin-contracts/pull/522\r\n        if (a == 0) return (true, 0);\r\n        uint256 c = a * b;\r\n        if (c / a != b) return (false, 0);\r\n        return (true, c);\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the division of two unsigned integers, with a division by zero flag.\r\n     *\r\n     * _Available since v3.4._\r\n     */\r\n    function tryDiv(uint256 a, uint256 b) internal pure returns (bool, uint256) {\r\n        if (b == 0) return (false, 0);\r\n        return (true, a / b);\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the remainder of dividing two unsigned integers, with a division by zero flag.\r\n     *\r\n     * _Available since v3.4._\r\n     */\r\n    function tryMod(uint256 a, uint256 b) internal pure returns (bool, uint256) {\r\n        if (b == 0) return (false, 0);\r\n        return (true, a % b);\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the addition of two unsigned integers, reverting on\r\n     * overflow.\r\n     *\r\n     * Counterpart to Solidity's `+` operator.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - Addition cannot overflow.\r\n     */\r\n    function add(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        uint256 c = a + b;\r\n        require(c >= a, \"SafeMath: addition overflow\");\r\n        return c;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the subtraction of two unsigned integers, reverting on\r\n     * overflow (when the result is negative).\r\n     *\r\n     * Counterpart to Solidity's `-` operator.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - Subtraction cannot overflow.\r\n     */\r\n    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        require(b <= a, \"SafeMath: subtraction overflow\");\r\n        return a - b;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the multiplication of two unsigned integers, reverting on\r\n     * overflow.\r\n     *\r\n     * Counterpart to Solidity's `*` operator.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - Multiplication cannot overflow.\r\n     */\r\n    function mul(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        if (a == 0) return 0;\r\n        uint256 c = a * b;\r\n        require(c / a == b, \"SafeMath: multiplication overflow\");\r\n        return c;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the integer division of two unsigned integers, reverting on\r\n     * division by zero. The result is rounded towards zero.\r\n     *\r\n     * Counterpart to Solidity's `/` operator. Note: this function uses a\r\n     * `revert` opcode (which leaves remaining gas untouched) while Solidity\r\n     * uses an invalid opcode to revert (consuming all remaining gas).\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - The divisor cannot be zero.\r\n     */\r\n    function div(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        require(b > 0, \"SafeMath: division by zero\");\r\n        return a / b;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\r\n     * reverting when dividing by zero.\r\n     *\r\n     * Counterpart to Solidity's `%` operator. This function uses a `revert`\r\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\r\n     * invalid opcode to revert (consuming all remaining gas).\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - The divisor cannot be zero.\r\n     */\r\n    function mod(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        require(b > 0, \"SafeMath: modulo by zero\");\r\n        return a % b;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the subtraction of two unsigned integers, reverting with custom message on\r\n     * overflow (when the result is negative).\r\n     *\r\n     * CAUTION: This function is deprecated because it requires allocating memory for the error\r\n     * message unnecessarily. For custom revert reasons use {trySub}.\r\n     *\r\n     * Counterpart to Solidity's `-` operator.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - Subtraction cannot overflow.\r\n     */\r\n    function sub(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\r\n        require(b <= a, errorMessage);\r\n        return a - b;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the integer division of two unsigned integers, reverting with custom message on\r\n     * division by zero. The result is rounded towards zero.\r\n     *\r\n     * CAUTION: This function is deprecated because it requires allocating memory for the error\r\n     * message unnecessarily. For custom revert reasons use {tryDiv}.\r\n     *\r\n     * Counterpart to Solidity's `/` operator. Note: this function uses a\r\n     * `revert` opcode (which leaves remaining gas untouched) while Solidity\r\n     * uses an invalid opcode to revert (consuming all remaining gas).\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - The divisor cannot be zero.\r\n     */\r\n    function div(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\r\n        require(b > 0, errorMessage);\r\n        return a / b;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\r\n     * reverting with custom message when dividing by zero.\r\n     *\r\n     * CAUTION: This function is deprecated because it requires allocating memory for the error\r\n     * message unnecessarily. For custom revert reasons use {tryMod}.\r\n     *\r\n     * Counterpart to Solidity's `%` operator. This function uses a `revert`\r\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\r\n     * invalid opcode to revert (consuming all remaining gas).\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - The divisor cannot be zero.\r\n     */\r\n    function mod(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\r\n        require(b > 0, errorMessage);\r\n        return a % b;\r\n    }\r\n}\r\n\r\n\r\n// File contracts/interfaces/IPriceOracle.sol\r\n\r\npragma solidity ^0.7.6;\r\n\r\ninterface IPriceOracle {\r\n  /// @dev Return the usd price of asset. mutilpled by 1e18\r\n  /// @param _asset The address of asset\r\n  function price(address _asset) external view returns (uint256);\r\n\r\n  /// @dev Return the usd value of asset. mutilpled by 1e18\r\n  /// @param _asset The address of asset\r\n  /// @param _amount The amount of asset\r\n  function value(address _asset, uint256 _amount) external view returns (uint256);\r\n}\r\n\r\n\r\n// File contracts/interfaces/IERC20Metadata.sol\r\n\r\npragma solidity ^0.7.6;\r\n\r\ninterface IERC20Metadata {\r\n  function decimals() external view returns (uint8);\r\n}\r\n\r\n\r\n// File contracts/interfaces/IUniswapV2Pair.sol\r\n\r\npragma solidity ^0.7.6;\r\n\r\ninterface IUniswapV2Pair {\r\n  function totalSupply() external view returns (uint256);\r\n\r\n  function token0() external view returns (address);\r\n\r\n  function token1() external view returns (address);\r\n\r\n  function getReserves()\r\n    external\r\n    view\r\n    returns (\r\n      uint112 reserve0,\r\n      uint112 reserve1,\r\n      uint32 blockTimestampLast\r\n    );\r\n\r\n  function price0CumulativeLast() external view returns (uint256);\r\n\r\n  function price1CumulativeLast() external view returns (uint256);\r\n}\r\n\r\n\r\n// File contracts/oracle/UniswapV2PairPriceOracle.sol\r\n\r\npragma solidity ^0.7.6;\r\n\r\n\r\n\r\n\r\ninterface IUniswapTWAPOracle {\r\n  function pair() external view returns (address);\r\n\r\n  function quote(\r\n    address tokenIn,\r\n    uint256 amountIn,\r\n    address tokenOut,\r\n    uint256 points\r\n  ) external view returns (uint256 amountOut, uint256 lastUpdatedAgo);\r\n}\r\n\r\ncontract UniswapV2PairPriceOracle is Ownable, IPriceOracle {\r\n  using SafeMath for uint256;\r\n\r\n  event UpdateTWAP(address indexed asset, address pair);\r\n  event UpdateMaxPriceDiff(uint256 maxPriceDiff);\r\n\r\n  // The address of Chainlink Oracle\r\n  address public immutable chainlink;\r\n\r\n  // The address ald token.\r\n  address public immutable ald;\r\n\r\n  // Mapping from pair address to twap address.\r\n  mapping(address => address) public twaps;\r\n\r\n  // The max price diff between spot price and twap price.\r\n  uint256 public maxPriceDiff;\r\n\r\n  /// @param _chainlink The address of chainlink oracle.\r\n  /// @param _ald The address of ALD token.\r\n  constructor(address _chainlink, address _ald) {\r\n    require(_chainlink != address(0), \"UniswapV2PairPriceOracle: zero address\");\r\n    require(_ald != address(0), \"UniswapV2PairPriceOracle: zero address\");\r\n\r\n    chainlink = _chainlink;\r\n    ald = _ald;\r\n  }\r\n\r\n  /// @dev Return the usd price of UniswapV2 pair. mutilpled by 1e18\r\n  /// @notice We will also consider the price with ALD.\r\n  /// @param _pair The address of UniswapV2 pair\r\n  function price(address _pair) public view override returns (uint256) {\r\n    address _token0 = IUniswapV2Pair(_pair).token0();\r\n    address _token1 = IUniswapV2Pair(_pair).token1();\r\n    address _ald = ald;\r\n\r\n    require(_token0 == _ald || _token1 == _ald, \"UniswapV2PairPriceOracle: not supported\");\r\n\r\n    (uint256 _reserve0, uint256 _reserve1, ) = IUniswapV2Pair(_pair).getReserves();\r\n    uint256 _totalSupply = IUniswapV2Pair(_pair).totalSupply();\r\n\r\n    if (_token0 == _ald) {\r\n      _validate(_pair, _ald, _token1, _reserve0, _reserve1);\r\n      uint256 _amount = uint256(1e18).mul(_reserve1).div(_totalSupply);\r\n      return IPriceOracle(chainlink).value(_token1, _amount) * 2;\r\n    } else {\r\n      _validate(_pair, _ald, _token0, _reserve1, _reserve0);\r\n      uint256 _amount = uint256(1e18).mul(_reserve0).div(_totalSupply);\r\n      return IPriceOracle(chainlink).value(_token0, _amount) * 2;\r\n    }\r\n  }\r\n\r\n  /// @dev Return the usd value of UniswapV2 pair. mutilpled by 1e18\r\n  /// @notice We only consider the value without ALD.\r\n  /// @param _pair The address of UniswapV2 pair.\r\n  /// @param _amount The amount of asset/\r\n  function value(address _pair, uint256 _amount) external view override returns (uint256) {\r\n    uint256 _price = price(_pair);\r\n    return _price.mul(_amount).div(10**IERC20Metadata(_pair).decimals());\r\n  }\r\n\r\n  /// @dev Update the TWAP Oracle address for UniswapV2 pair\r\n  /// @param _pair The address of UniswapV2 pair\r\n  /// @param _twap The address of twap oracle.\r\n  function updateTWAP(address _pair, address _twap) external onlyOwner {\r\n    require(IUniswapTWAPOracle(_twap).pair() == _pair, \"UniswapV2PairPriceOracle: invalid twap\");\r\n\r\n    twaps[_pair] = _twap;\r\n\r\n    emit UpdateTWAP(_pair, _twap);\r\n  }\r\n\r\n  /// @dev Update the max price diff between spot price and twap price.\r\n  /// @param _maxPriceDiff The max price diff.\r\n  function updatePriceDiff(uint256 _maxPriceDiff) external onlyOwner {\r\n    require(_maxPriceDiff <= 2e17, \"UniswapV2PairPriceOracle: should <= 20%\");\r\n\r\n    maxPriceDiff = _maxPriceDiff;\r\n\r\n    emit UpdateMaxPriceDiff(_maxPriceDiff);\r\n  }\r\n\r\n  function _validate(\r\n    address _pair,\r\n    address _ald,\r\n    address _otherToken,\r\n    uint256 _reserveALD,\r\n    uint256 _reserveOtherToken\r\n  ) internal view {\r\n    address _twap = twaps[_pair];\r\n    // skip check if twap not available, usually will be used in test.\r\n    if (_twap == address(0)) return;\r\n\r\n    // number of other token that 1 ald can swap right now.\r\n    uint256 _amount = _reserveOtherToken.mul(1e18).div(_reserveALD);\r\n    // number of other token that 1 ald can swap in twap.\r\n    (uint256 _twapAmount, ) = IUniswapTWAPOracle(_twap).quote(_ald, 1e18, _otherToken, 2);\r\n\r\n    require(_amount >= _twapAmount.mul(1e18 - maxPriceDiff).div(1e18), \"UniswapV2PairPriceOracle: price too small\");\r\n    require(_amount <= _twapAmount.mul(1e18 + maxPriceDiff).div(1e18), \"UniswapV2PairPriceOracle: price too large\");\r\n  }\r\n}","ABI":"[{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_chainlink\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_ald\",\"type\":\"address\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"maxPriceDiff\",\"type\":\"uint256\"}],\"name\":\"UpdateMaxPriceDiff\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"asset\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"pair\",\"type\":\"address\"}],\"name\":\"UpdateTWAP\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"ald\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"chainlink\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"maxPriceDiff\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_pair\",\"type\":\"address\"}],\"name\":\"price\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"twaps\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_maxPriceDiff\",\"type\":\"uint256\"}],\"name\":\"updatePriceDiff\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_pair\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_twap\",\"type\":\"address\"}],\"name\":\"updateTWAP\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_pair\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"value\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"}]","ContractName":"UniswapV2PairPriceOracle","CompilerVersion":"v0.7.6+commit.7338295f","OptimizationUsed":"1","Runs":"1000","ConstructorArguments":"0000000000000000000000007f751e35afe72775ec88e74386bbc9b68214153e000000000000000000000000b26c4b3ca601136daf98593feaeff9e0ca702a8d","EVMVersion":"Default","Library":"","LicenseType":"MIT","Proxy":"0","Implementation":"","SwarmSource":"ipfs://ffde66240eb75247cf93c6ea00c8aac7e23435692a651d6490696cbf41e7a27b"}]}