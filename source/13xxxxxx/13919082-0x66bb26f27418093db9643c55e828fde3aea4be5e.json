{"status":"1","message":"OK","result":[{"SourceCode":"{{\r\n  \"language\": \"Solidity\",\r\n  \"sources\": {\r\n    \"contracts/libs/LibAtomic.sol\": {\r\n      \"content\": \"pragma solidity 0.7.4;\\npragma experimental ABIEncoderV2;\\n\\nimport \\\"@openzeppelin/contracts/cryptography/ECDSA.sol\\\";\\nimport \\\"./LibExchange.sol\\\";\\n\\nlibrary LibAtomic {\\n    using ECDSA for bytes32;\\n\\n    struct LockOrder {\\n        address sender;\\n        address asset;\\n        uint64 amount;\\n        uint64 expiration;\\n        bytes32 secretHash;\\n        bool used;\\n    }\\n\\n    struct ClaimOrder {\\n        address receiver;\\n        bytes32 secretHash;\\n    }\\n\\n    struct RedeemOrder {\\n        address sender;\\n        address receiver;\\n        address claimReceiver;\\n        address asset;\\n        uint64 amount;\\n        uint64 expiration;\\n        bytes32 secretHash;\\n        bytes signature;\\n    }\\n\\n    struct RedeemInfo {\\n        address claimReceiver;\\n        bytes secret;\\n    }\\n\\n    function doLockAtomic(LockOrder memory swap,\\n        mapping(bytes32 => LockOrder) storage atomicSwaps,\\n        mapping(bytes32 => RedeemInfo) storage secrets,\\n        mapping(address => mapping(address => int192)) storage assetBalances,\\n        mapping(address => MarginalFunctionality.Liability[]) storage liabilities\\n    ) public {\\n        require(msg.sender == swap.sender, \\\"E3C\\\");\\n        require(swap.expiration/1000 >= block.timestamp, \\\"E17E\\\");\\n        require(secrets[swap.secretHash].claimReceiver == address(0), \\\"E17R\\\");\\n        require(atomicSwaps[swap.secretHash].sender == address(0), \\\"E17R\\\");\\n\\n        int remaining = swap.amount;\\n        if (msg.value > 0) {\\n            require(swap.asset == address(0), \\\"E17ETH\\\");\\n            uint112 eth_sent = uint112(LibUnitConverter.baseUnitToDecimal(address(0), msg.value));\\n            if (eth_sent < swap.amount) {\\n                remaining = int(swap.amount) - eth_sent;\\n            } else {\\n                swap.amount = uint64(eth_sent);\\n                remaining = 0;\\n            }\\n        }\\n\\n        if (remaining > 0) {\\n            LibExchange._updateBalance(swap.sender, swap.asset, -1*remaining, assetBalances, liabilities);\\n            require(assetBalances[swap.sender][swap.asset] >= 0, \\\"E1A\\\");\\n        }\\n\\n        bytes32 secretHash = swap.secretHash;\\n        swap.secretHash = bytes32(0);\\n        atomicSwaps[secretHash] = swap;\\n    }\\n\\n    function doRedeemAtomic(\\n        LibAtomic.RedeemOrder calldata order,\\n        bytes calldata secret,\\n        mapping(bytes32 => RedeemInfo) storage secrets,\\n        mapping(address => mapping(address => int192)) storage assetBalances,\\n        mapping(address => MarginalFunctionality.Liability[]) storage liabilities\\n    ) public {\\n        require(msg.sender == order.receiver, \\\"E3C\\\");\\n        require(secrets[order.secretHash].claimReceiver == address(0), \\\"E17R\\\");\\n        require(getEthSignedAtomicOrderHash(order).recover(order.signature) == order.sender, \\\"E2\\\");\\n        require(order.expiration/1000 >= block.timestamp, \\\"E4A\\\");\\n        require(order.secretHash == keccak256(secret), \\\"E17\\\");\\n\\n        LibExchange._updateBalance(order.sender, order.asset, -1*int(order.amount), assetBalances, liabilities);\\n\\n        LibExchange._updateBalance(order.receiver, order.asset, order.amount, assetBalances, liabilities);\\n        secrets[order.secretHash] = RedeemInfo(order.claimReceiver, secret);\\n    }\\n\\n    function doClaimAtomic(\\n        address receiver,\\n        bytes calldata secret,\\n        bytes calldata matcherSignature,\\n        address allowedMatcher,\\n        mapping(bytes32 => LockOrder) storage atomicSwaps,\\n        mapping(address => mapping(address => int192)) storage assetBalances,\\n        mapping(address => MarginalFunctionality.Liability[]) storage liabilities\\n    ) public returns (LockOrder storage swap) {\\n        bytes32 secretHash = keccak256(secret);\\n        bytes32 coHash = getEthSignedClaimOrderHash(ClaimOrder(receiver, secretHash));\\n        require(coHash.recover(matcherSignature) == allowedMatcher, \\\"E2\\\");\\n\\n        swap = atomicSwaps[secretHash];\\n        require(swap.sender != address(0), \\\"E17NF\\\");\\n        require(swap.expiration/1000 >= block.timestamp, \\\"E17E\\\");\\n        require(!swap.used, \\\"E17U\\\");\\n\\n        swap.used = true;\\n        LibExchange._updateBalance(receiver, swap.asset, swap.amount, assetBalances, liabilities);\\n    }\\n\\n    function doRefundAtomic(\\n        bytes32 secretHash,\\n        mapping(bytes32 => LockOrder) storage atomicSwaps,\\n        mapping(address => mapping(address => int192)) storage assetBalances,\\n        mapping(address => MarginalFunctionality.Liability[]) storage liabilities\\n    ) public returns(LockOrder storage swap) {\\n        swap = atomicSwaps[secretHash];\\n        require(swap.sender != address(0x0), \\\"E17NF\\\");\\n        require(swap.expiration/1000 < block.timestamp, \\\"E17NE\\\");\\n        require(!swap.used, \\\"E17U\\\");\\n\\n        swap.used = true;\\n        LibExchange._updateBalance(swap.sender, swap.asset, int(swap.amount), assetBalances, liabilities);\\n    }\\n\\n    function getEthSignedAtomicOrderHash(RedeemOrder calldata _order) internal view returns (bytes32) {\\n        uint256 chId;\\n        assembly {\\n            chId := chainid()\\n        }\\n        return keccak256(\\n            abi.encodePacked(\\n                \\\"atomicOrder\\\",\\n                chId,\\n                _order.sender,\\n                _order.receiver,\\n                _order.claimReceiver,\\n                _order.asset,\\n                _order.amount,\\n                _order.expiration,\\n                _order.secretHash\\n            )\\n        ).toEthSignedMessageHash();\\n    }\\n\\n    function getEthSignedClaimOrderHash(ClaimOrder memory _order) internal pure returns (bytes32) {\\n        uint256 chId;\\n        assembly {\\n            chId := chainid()\\n        }\\n        return keccak256(\\n            abi.encodePacked(\\n                \\\"claimOrder\\\",\\n                chId,\\n                _order.receiver,\\n                _order.secretHash\\n            )\\n        ).toEthSignedMessageHash();\\n    }\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/cryptography/ECDSA.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity >=0.6.0 <0.8.0;\\n\\n/**\\n * @dev Elliptic Curve Digital Signature Algorithm (ECDSA) operations.\\n *\\n * These functions can be used to verify that a message was signed by the holder\\n * of the private keys of a given address.\\n */\\nlibrary ECDSA {\\n    /**\\n     * @dev Returns the address that signed a hashed message (`hash`) with\\n     * `signature`. This address can then be used for verification purposes.\\n     *\\n     * The `ecrecover` EVM opcode allows for malleable (non-unique) signatures:\\n     * this function rejects them by requiring the `s` value to be in the lower\\n     * half order, and the `v` value to be either 27 or 28.\\n     *\\n     * IMPORTANT: `hash` _must_ be the result of a hash operation for the\\n     * verification to be secure: it is possible to craft signatures that\\n     * recover to arbitrary addresses for non-hashed data. A safe way to ensure\\n     * this is by receiving a hash of the original message (which may otherwise\\n     * be too long), and then calling {toEthSignedMessageHash} on it.\\n     */\\n    function recover(bytes32 hash, bytes memory signature) internal pure returns (address) {\\n        // Check the signature length\\n        if (signature.length != 65) {\\n            revert(\\\"ECDSA: invalid signature length\\\");\\n        }\\n\\n        // Divide the signature in r, s and v variables\\n        bytes32 r;\\n        bytes32 s;\\n        uint8 v;\\n\\n        // ecrecover takes the signature parameters, and the only way to get them\\n        // currently is to use assembly.\\n        // solhint-disable-next-line no-inline-assembly\\n        assembly {\\n            r := mload(add(signature, 0x20))\\n            s := mload(add(signature, 0x40))\\n            v := byte(0, mload(add(signature, 0x60)))\\n        }\\n\\n        return recover(hash, v, r, s);\\n    }\\n\\n    /**\\n     * @dev Overload of {ECDSA-recover-bytes32-bytes-} that receives the `v`,\\n     * `r` and `s` signature fields separately.\\n     */\\n    function recover(bytes32 hash, uint8 v, bytes32 r, bytes32 s) internal pure returns (address) {\\n        // EIP-2 still allows signature malleability for ecrecover(). Remove this possibility and make the signature\\n        // unique. Appendix F in the Ethereum Yellow paper (https://ethereum.github.io/yellowpaper/paper.pdf), defines\\n        // the valid range for s in (281): 0 < s < secp256k1n ÷ 2 + 1, and for v in (282): v ∈ {27, 28}. Most\\n        // signatures from current libraries generate a unique signature with an s-value in the lower half order.\\n        //\\n        // If your library generates malleable signatures, such as s-values in the upper range, calculate a new s-value\\n        // with 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFEBAAEDCE6AF48A03BBFD25E8CD0364141 - s1 and flip v from 27 to 28 or\\n        // vice versa. If your library also generates signatures with 0/1 for v instead 27/28, add 27 to v to accept\\n        // these malleable signatures as well.\\n        require(uint256(s) <= 0x7FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF5D576E7357A4501DDFE92F46681B20A0, \\\"ECDSA: invalid signature 's' value\\\");\\n        require(v == 27 || v == 28, \\\"ECDSA: invalid signature 'v' value\\\");\\n\\n        // If the signature is valid (and not malleable), return the signer address\\n        address signer = ecrecover(hash, v, r, s);\\n        require(signer != address(0), \\\"ECDSA: invalid signature\\\");\\n\\n        return signer;\\n    }\\n\\n    /**\\n     * @dev Returns an Ethereum Signed Message, created from a `hash`. This\\n     * replicates the behavior of the\\n     * https://github.com/ethereum/wiki/wiki/JSON-RPC#eth_sign[`eth_sign`]\\n     * JSON-RPC method.\\n     *\\n     * See {recover}.\\n     */\\n    function toEthSignedMessageHash(bytes32 hash) internal pure returns (bytes32) {\\n        // 32 is the length in bytes of hash,\\n        // enforced by the type signature above\\n        return keccak256(abi.encodePacked(\\\"\\\\x19Ethereum Signed Message:\\\\n32\\\", hash));\\n    }\\n}\\n\"\r\n    },\r\n    \"contracts/libs/LibExchange.sol\": {\r\n      \"content\": \"pragma solidity 0.7.4;\\npragma experimental ABIEncoderV2;\\n\\nimport \\\"@openzeppelin/contracts/token/ERC20/IERC20.sol\\\";\\nimport \\\"@openzeppelin/contracts/token/ERC20/SafeERC20.sol\\\";\\nimport \\\"./MarginalFunctionality.sol\\\";\\nimport \\\"./LibUnitConverter.sol\\\";\\nimport \\\"./LibValidator.sol\\\";\\nimport \\\"./SafeTransferHelper.sol\\\";\\n\\nlibrary LibExchange {\\n    using SafeERC20 for IERC20;\\n\\n    //  Flags for updateOrders\\n    //      All flags are explicit\\n    uint8 public constant kSell = 0;\\n    uint8 public constant kBuy = 1; //  if 0 - then sell\\n    uint8 public constant kCorrectMatcherFeeByOrderAmount = 2;\\n\\n    function _updateBalance(address user, address asset, int amount,\\n        mapping(address => mapping(address => int192)) storage assetBalances,\\n        mapping(address => MarginalFunctionality.Liability[]) storage liabilities\\n    ) internal returns (uint tradeType) { // 0 - in contract, 1 - from wallet\\n        int beforeBalance = int(assetBalances[user][asset]);\\n        int afterBalance = beforeBalance + amount;\\n\\n        if (amount > 0 && beforeBalance < 0) {\\n            MarginalFunctionality.updateLiability(user, asset, liabilities, uint112(amount), int192(afterBalance));\\n        } else if (beforeBalance >= 0 && afterBalance < 0){\\n            if (asset != address(0)) {\\n                afterBalance += int(_tryDeposit(asset, uint(-1*afterBalance), user));\\n            }\\n\\n            // If we failed to deposit balance is still negative then we move user into liability\\n            if (afterBalance < 0) {\\n                setLiability(user, asset, int192(afterBalance), liabilities);\\n            } else {\\n                tradeType = beforeBalance > 0 ? 0 : 1;\\n            }\\n        }\\n\\n        if (beforeBalance != afterBalance) {\\n            assetBalances[user][asset] = int192(afterBalance);\\n        }\\n    }\\n\\n    /**\\n     * @dev method to add liability\\n     * @param user - user which created liability\\n     * @param asset - liability asset\\n     * @param balance - current negative balance\\n     */\\n    function setLiability(address user, address asset, int192 balance,\\n        mapping(address => MarginalFunctionality.Liability[]) storage liabilities\\n    ) internal {\\n        liabilities[user].push(\\n            MarginalFunctionality.Liability({\\n                asset : asset,\\n                timestamp : uint64(block.timestamp),\\n                outstandingAmount : uint192(- balance)\\n            })\\n        );\\n    }\\n\\n    function _tryDeposit(\\n        address asset,\\n        uint amount,\\n        address user\\n    ) internal returns(uint) {\\n        uint256 amountInBase = uint256(LibUnitConverter.decimalToBaseUnit(asset, amount));\\n\\n        // Query allowance before trying to transferFrom\\n        if (IERC20(asset).balanceOf(user) >= amountInBase && IERC20(asset).allowance(user, address(this)) >= amountInBase) {\\n            SafeERC20.safeTransferFrom(IERC20(asset), user, address(this), amountInBase);\\n            return amount;\\n        } else {\\n            return 0;\\n        }\\n    }\\n\\n    function creditUserAssets(uint tradeType, address user, int amount, address asset,\\n        mapping(address => mapping(address => int192)) storage assetBalances,\\n        mapping(address => MarginalFunctionality.Liability[]) storage liabilities\\n    ) internal {\\n        int beforeBalance = int(assetBalances[user][asset]);\\n        int remainingAmount = amount + beforeBalance;\\n        int sentAmount = 0;\\n        if (tradeType == 1 && remainingAmount > 0 && beforeBalance <= 0) {\\n            uint amountInBase = uint(LibUnitConverter.decimalToBaseUnit(asset, uint(remainingAmount)));\\n            uint contractBalance = asset == address(0) ? address(this).balance : IERC20(asset).balanceOf(address(this));\\n            if (contractBalance >= amountInBase) {\\n                SafeTransferHelper.safeTransferTokenOrETH(asset, user, amountInBase);\\n                sentAmount = remainingAmount;\\n            }\\n        }\\n        int toUpdate = amount - sentAmount;\\n        if (toUpdate != 0) {\\n            _updateBalance(user, asset, toUpdate, assetBalances, liabilities);\\n        }\\n    }\\n\\n    struct SwapBalanceChanges {\\n        int amountOut;\\n        address assetOut;\\n        int amountIn;\\n        address assetIn;\\n    }\\n\\n    /**\\n     *  @notice update user balances and send matcher fee\\n     *  @param flags uint8, see constants for possible flags of order\\n     */\\n    function updateOrderBalanceDebit(\\n        LibValidator.Order memory order,\\n        uint112 amountBase,\\n        uint112 amountQuote,\\n        uint8 flags,\\n        mapping(address => mapping(address => int192)) storage assetBalances,\\n        mapping(address => MarginalFunctionality.Liability[]) storage liabilities\\n    ) internal returns (uint tradeType, int actualIn) {\\n        bool isSeller = (flags & kBuy) == 0;\\n\\n        {\\n            //  Stack too deep\\n            bool isCorrectFee = ((flags & kCorrectMatcherFeeByOrderAmount) != 0);\\n\\n            if (isCorrectFee) {\\n                // matcherFee: u64, filledAmount u128 => matcherFee*filledAmount fit u256\\n                // result matcherFee fit u64\\n                order.matcherFee = uint64(\\n                    (uint256(order.matcherFee) * amountBase) / order.amount\\n                ); //rewrite in memory only\\n            }\\n        }\\n\\n        if (amountBase > 0) {\\n            SwapBalanceChanges memory swap;\\n\\n            (swap.amountOut, swap.amountIn) = isSeller\\n            ? (-1*int(amountBase), int(amountQuote))\\n            : (-1*int(amountQuote), int(amountBase));\\n\\n            (swap.assetOut, swap.assetIn) = isSeller\\n            ? (order.baseAsset, order.quoteAsset)\\n            : (order.quoteAsset, order.baseAsset);\\n\\n\\n            uint feeTradeType = 1;\\n            if (order.matcherFeeAsset == swap.assetOut) {\\n                swap.amountOut -= order.matcherFee;\\n            } else if (order.matcherFeeAsset == swap.assetIn) {\\n                swap.amountIn -= order.matcherFee;\\n            } else {\\n                feeTradeType = _updateBalance(order.senderAddress, order.matcherFeeAsset, -1*int256(order.matcherFee),\\n                    assetBalances, liabilities);\\n            }\\n\\n            tradeType = feeTradeType & _updateBalance(order.senderAddress, swap.assetOut, swap.amountOut, assetBalances, liabilities);\\n\\n            actualIn = swap.amountIn;\\n\\n            _updateBalance(order.matcherAddress, order.matcherFeeAsset, order.matcherFee, assetBalances, liabilities);\\n        }\\n\\n    }\\n\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/token/ERC20/IERC20.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity >=0.6.0 <0.8.0;\\n\\n/**\\n * @dev Interface of the ERC20 standard as defined in the EIP.\\n */\\ninterface IERC20 {\\n    /**\\n     * @dev Returns the amount of tokens in existence.\\n     */\\n    function totalSupply() external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the amount of tokens owned by `account`.\\n     */\\n    function balanceOf(address account) external view returns (uint256);\\n\\n    /**\\n     * @dev Moves `amount` tokens from the caller's account to `recipient`.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transfer(address recipient, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Returns the remaining number of tokens that `spender` will be\\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\\n     * zero by default.\\n     *\\n     * This value changes when {approve} or {transferFrom} are called.\\n     */\\n    function allowance(address owner, address spender) external view returns (uint256);\\n\\n    /**\\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\\n     * that someone may use both the old and the new allowance by unfortunate\\n     * transaction ordering. One possible solution to mitigate this race\\n     * condition is to first reduce the spender's allowance to 0 and set the\\n     * desired value afterwards:\\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address spender, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Moves `amount` tokens from `sender` to `recipient` using the\\n     * allowance mechanism. `amount` is then deducted from the caller's\\n     * allowance.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(address sender, address recipient, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\\n     * another (`to`).\\n     *\\n     * Note that `value` may be zero.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 value);\\n\\n    /**\\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\\n     * a call to {approve}. `value` is the new allowance.\\n     */\\n    event Approval(address indexed owner, address indexed spender, uint256 value);\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/token/ERC20/SafeERC20.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity >=0.6.0 <0.8.0;\\n\\nimport \\\"./IERC20.sol\\\";\\nimport \\\"../../math/SafeMath.sol\\\";\\nimport \\\"../../utils/Address.sol\\\";\\n\\n/**\\n * @title SafeERC20\\n * @dev Wrappers around ERC20 operations that throw on failure (when the token\\n * contract returns false). Tokens that return no value (and instead revert or\\n * throw on failure) are also supported, non-reverting calls are assumed to be\\n * successful.\\n * To use this library you can add a `using SafeERC20 for IERC20;` statement to your contract,\\n * which allows you to call the safe operations as `token.safeTransfer(...)`, etc.\\n */\\nlibrary SafeERC20 {\\n    using SafeMath for uint256;\\n    using Address for address;\\n\\n    function safeTransfer(IERC20 token, address to, uint256 value) internal {\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.transfer.selector, to, value));\\n    }\\n\\n    function safeTransferFrom(IERC20 token, address from, address to, uint256 value) internal {\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.transferFrom.selector, from, to, value));\\n    }\\n\\n    /**\\n     * @dev Deprecated. This function has issues similar to the ones found in\\n     * {IERC20-approve}, and its usage is discouraged.\\n     *\\n     * Whenever possible, use {safeIncreaseAllowance} and\\n     * {safeDecreaseAllowance} instead.\\n     */\\n    function safeApprove(IERC20 token, address spender, uint256 value) internal {\\n        // safeApprove should only be called when setting an initial allowance,\\n        // or when resetting it to zero. To increase and decrease it, use\\n        // 'safeIncreaseAllowance' and 'safeDecreaseAllowance'\\n        // solhint-disable-next-line max-line-length\\n        require((value == 0) || (token.allowance(address(this), spender) == 0),\\n            \\\"SafeERC20: approve from non-zero to non-zero allowance\\\"\\n        );\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, value));\\n    }\\n\\n    function safeIncreaseAllowance(IERC20 token, address spender, uint256 value) internal {\\n        uint256 newAllowance = token.allowance(address(this), spender).add(value);\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));\\n    }\\n\\n    function safeDecreaseAllowance(IERC20 token, address spender, uint256 value) internal {\\n        uint256 newAllowance = token.allowance(address(this), spender).sub(value, \\\"SafeERC20: decreased allowance below zero\\\");\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));\\n    }\\n\\n    /**\\n     * @dev Imitates a Solidity high-level call (i.e. a regular function call to a contract), relaxing the requirement\\n     * on the return value: the return value is optional (but if data is returned, it must not be false).\\n     * @param token The token targeted by the call.\\n     * @param data The call data (encoded using abi.encode or one of its variants).\\n     */\\n    function _callOptionalReturn(IERC20 token, bytes memory data) private {\\n        // We need to perform a low level call here, to bypass Solidity's return data size checking mechanism, since\\n        // we're implementing it ourselves. We use {Address.functionCall} to perform this call, which verifies that\\n        // the target address contains contract code and also asserts for success in the low-level call.\\n\\n        bytes memory returndata = address(token).functionCall(data, \\\"SafeERC20: low-level call failed\\\");\\n        if (returndata.length > 0) { // Return data is optional\\n            // solhint-disable-next-line max-line-length\\n            require(abi.decode(returndata, (bool)), \\\"SafeERC20: ERC20 operation did not succeed\\\");\\n        }\\n    }\\n}\\n\"\r\n    },\r\n    \"contracts/libs/MarginalFunctionality.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: BUSL-1.1\\npragma solidity 0.7.4;\\npragma experimental ABIEncoderV2;\\nimport \\\"../PriceOracleInterface.sol\\\";\\n\\nlibrary MarginalFunctionality {\\n\\n    // We have the following approach: when liability is created we store\\n    // timestamp and size of liability. If the subsequent trade will deepen\\n    // this liability or won't fully cover it timestamp will not change.\\n    // However once outstandingAmount is covered we check whether balance on\\n    // that asset is positive or not. If not, liability still in the place but\\n    // time counter is dropped and timestamp set to `now`.\\n    struct Liability {\\n        address asset;\\n        uint64 timestamp;\\n        uint192 outstandingAmount;\\n    }\\n\\n    enum PositionState {\\n        POSITIVE,\\n        NEGATIVE, // weighted position below 0\\n        OVERDUE,  // liability is not returned for too long\\n        NOPRICE,  // some assets has no price or expired\\n        INCORRECT // some of the basic requirements are not met: too many liabilities, no locked stake, etc\\n    }\\n\\n    struct Position {\\n        PositionState state;\\n        int256 weightedPosition; // sum of weighted collateral minus liabilities\\n        int256 totalPosition; // sum of unweighted (total) collateral minus liabilities\\n        int256 totalLiabilities; // total liabilities value\\n    }\\n\\n    // Constants from Exchange contract used for calculations\\n    struct UsedConstants {\\n        address user;\\n        address _oracleAddress;\\n        address _orionTokenAddress;\\n        uint64 positionOverdue;\\n        uint64 priceOverdue;\\n        uint8 stakeRisk;\\n        uint8 liquidationPremium;\\n    }\\n\\n\\n    /**\\n     * @dev method to multiply numbers with uint8 based percent numbers\\n     */\\n    function uint8Percent(int192 _a, uint8 b) internal pure returns (int192 c) {\\n        int a = int256(_a);\\n        int d = 255;\\n        c = int192((a>65536) ? (a/d)*b : a*b/d );\\n    }\\n\\n    /**\\n     * @dev method to fetch asset prices in ORN tokens\\n     */\\n    function getAssetPrice(address asset, address oracle) internal view returns (uint64 price, uint64 timestamp) {\\n        PriceOracleInterface.PriceDataOut memory assetPriceData = PriceOracleInterface(oracle).assetPrices(asset);\\n        (price, timestamp) = (assetPriceData.price, assetPriceData.timestamp);\\n    }\\n\\n    /**\\n     * @dev method to calc weighted and absolute collateral value\\n     * @notice it only count for assets in collateralAssets list, all other\\n               assets will add 0 to position.\\n     * @return outdated whether any price is outdated\\n     * @return weightedPosition in ORN\\n     * @return totalPosition in ORN\\n     */\\n    function calcAssets(\\n        address[] storage collateralAssets,\\n        mapping(address => mapping(address => int192)) storage assetBalances,\\n        mapping(address => uint8) storage assetRisks,\\n        address user,\\n        address orionTokenAddress,\\n        address oracleAddress,\\n        uint64 priceOverdue\\n    ) internal view returns (bool outdated, int192 weightedPosition, int192 totalPosition) {\\n        uint256 collateralAssetsLength = collateralAssets.length;\\n        for(uint256 i = 0; i < collateralAssetsLength; i++) {\\n            address asset = collateralAssets[i];\\n            if(assetBalances[user][asset]<0)\\n                continue; // will be calculated in calcLiabilities\\n            (uint64 price, uint64 timestamp) = (1e8, 0xfffffff000000000);\\n\\n            if(asset != orionTokenAddress) {\\n                (price, timestamp) = getAssetPrice(asset, oracleAddress);\\n            }\\n\\n            // balance: i192, price u64 => balance*price fits i256\\n            // since generally balance <= N*maxInt112 (where N is number operations with it),\\n            // assetValue <= N*maxInt112*maxUInt64/1e8.\\n            // That is if N<= 2**17 *1e8 = 1.3e13  we can neglect overflows here\\n\\n            uint8 specificRisk = assetRisks[asset];\\n            int192 balance = assetBalances[user][asset];\\n            int256 _assetValue = int256(balance)*price/1e8;\\n            int192 assetValue = int192(_assetValue);\\n\\n            // Overflows logic holds here as well, except that N is the number of\\n            // operations for all assets\\n\\n            if(assetValue>0) {\\n                weightedPosition += uint8Percent(assetValue, specificRisk);\\n                totalPosition += assetValue;\\n                outdated = outdated || ((timestamp + priceOverdue) < block.timestamp);\\n            }\\n\\n        }\\n\\n        return (outdated, weightedPosition, totalPosition);\\n    }\\n\\n    /**\\n     * @dev method to calc liabilities\\n     * @return outdated whether any price is outdated\\n     * @return overdue whether any liability is overdue\\n     * @return weightedPosition weightedLiability == totalLiability in ORN\\n     * @return totalPosition totalLiability in ORN\\n     */\\n    function calcLiabilities(\\n        mapping(address => Liability[]) storage liabilities,\\n        mapping(address => mapping(address => int192)) storage assetBalances,\\n        address user,\\n        address oracleAddress,\\n        uint64 positionOverdue,\\n        uint64 priceOverdue\\n    ) internal view returns  (bool outdated, bool overdue, int192 weightedPosition, int192 totalPosition) {\\n        uint256 liabilitiesLength = liabilities[user].length;\\n\\n        for(uint256 i = 0; i < liabilitiesLength; i++) {\\n            Liability storage liability = liabilities[user][i];\\n            int192 balance = assetBalances[user][liability.asset];\\n            (uint64 price, uint64 timestamp) = getAssetPrice(liability.asset, oracleAddress);\\n            // balance: i192, price u64 => balance*price fits i256\\n            // since generally balance <= N*maxInt112 (where N is number operations with it),\\n            // assetValue <= N*maxInt112*maxUInt64/1e8.\\n            // That is if N<= 2**17 *1e8 = 1.3e13  we can neglect overflows here\\n\\n            int192 liabilityValue = int192(int256(balance) * price / 1e8);\\n            weightedPosition += liabilityValue; //already negative since balance is negative\\n            totalPosition += liabilityValue;\\n            overdue = overdue || ((liability.timestamp + positionOverdue) < block.timestamp);\\n            outdated = outdated || ((timestamp + priceOverdue) < block.timestamp);\\n        }\\n\\n        return (outdated, overdue, weightedPosition, totalPosition);\\n    }\\n\\n    /**\\n     * @dev method to calc Position\\n     * @return result position structure\\n     */\\n    function calcPosition(\\n        address[] storage collateralAssets,\\n        mapping(address => Liability[]) storage liabilities,\\n        mapping(address => mapping(address => int192)) storage assetBalances,\\n        mapping(address => uint8) storage assetRisks,\\n        UsedConstants memory constants\\n    ) public view returns (Position memory result) {\\n\\n        (bool outdatedPrice, int192 weightedPosition, int192 totalPosition) =\\n        calcAssets(\\n            collateralAssets,\\n            assetBalances,\\n            assetRisks,\\n            constants.user,\\n            constants._orionTokenAddress,\\n            constants._oracleAddress,\\n            constants.priceOverdue\\n        );\\n\\n        (bool _outdatedPrice, bool overdue, int192 _weightedPosition, int192 _totalPosition) =\\n        calcLiabilities(\\n            liabilities,\\n            assetBalances,\\n            constants.user,\\n            constants._oracleAddress,\\n            constants.positionOverdue,\\n            constants.priceOverdue\\n        );\\n\\n        weightedPosition += _weightedPosition;\\n        totalPosition += _totalPosition;\\n        outdatedPrice = outdatedPrice || _outdatedPrice;\\n        if(_totalPosition<0) {\\n            result.totalLiabilities = _totalPosition;\\n        }\\n        if(weightedPosition<0) {\\n            result.state = PositionState.NEGATIVE;\\n        }\\n        if(outdatedPrice) {\\n            result.state = PositionState.NOPRICE;\\n        }\\n        if(overdue) {\\n            result.state = PositionState.OVERDUE;\\n        }\\n        result.weightedPosition = weightedPosition;\\n        result.totalPosition = totalPosition;\\n    }\\n\\n    /**\\n     * @dev method removes liability\\n     */\\n    function removeLiability(\\n        address user,\\n        address asset,\\n        mapping(address => Liability[]) storage liabilities\\n    ) public {\\n        uint256 length = liabilities[user].length;\\n\\n        for (uint256 i = 0; i < length; i++) {\\n            if (liabilities[user][i].asset == asset) {\\n                if (length>1) {\\n                    liabilities[user][i] = liabilities[user][length - 1];\\n                }\\n                liabilities[user].pop();\\n                break;\\n            }\\n        }\\n    }\\n\\n    /**\\n     * @dev method update liability\\n     * @notice implement logic for outstandingAmount (see Liability description)\\n     */\\n    function updateLiability(address user,\\n        address asset,\\n        mapping(address => Liability[]) storage liabilities,\\n        uint112 depositAmount,\\n        int192 currentBalance\\n    ) internal {\\n        if(currentBalance>=0) {\\n            removeLiability(user,asset,liabilities);\\n        } else {\\n            uint256 i;\\n            uint256 liabilitiesLength=liabilities[user].length;\\n            for(; i<liabilitiesLength-1; i++) {\\n                if(liabilities[user][i].asset == asset)\\n                    break;\\n            }\\n            Liability storage liability = liabilities[user][i];\\n            if(depositAmount>=liability.outstandingAmount) {\\n                liability.outstandingAmount = uint192(-currentBalance);\\n                liability.timestamp = uint64(block.timestamp);\\n            } else {\\n                liability.outstandingAmount -= depositAmount;\\n            }\\n        }\\n    }\\n\\n\\n    /**\\n     * @dev partially liquidate, that is cover some asset liability to get\\n            ORN from misbehavior broker\\n     */\\n    function partiallyLiquidate(address[] storage collateralAssets,\\n        mapping(address => Liability[]) storage liabilities,\\n        mapping(address => mapping(address => int192)) storage assetBalances,\\n        mapping(address => uint8) storage assetRisks,\\n        UsedConstants memory constants,\\n        address redeemedAsset,\\n        uint112 amount) public {\\n        //Note: constants.user - is broker who will be liquidated\\n        Position memory initialPosition = calcPosition(collateralAssets,\\n            liabilities,\\n            assetBalances,\\n            assetRisks,\\n            constants);\\n        require(initialPosition.state == PositionState.NEGATIVE ||\\n            initialPosition.state == PositionState.OVERDUE  , \\\"E7\\\");\\n        address liquidator = msg.sender;\\n        require(assetBalances[liquidator][redeemedAsset]>=amount,\\\"E8\\\");\\n        require(assetBalances[constants.user][redeemedAsset]<0,\\\"E15\\\");\\n        assetBalances[liquidator][redeemedAsset] -= amount;\\n        assetBalances[constants.user][redeemedAsset] += amount;\\n\\n        if(assetBalances[constants.user][redeemedAsset] >= 0)\\n            removeLiability(constants.user, redeemedAsset, liabilities);\\n\\n        (uint64 price, uint64 timestamp) = getAssetPrice(redeemedAsset, constants._oracleAddress);\\n        require((timestamp + constants.priceOverdue) > block.timestamp, \\\"E9\\\"); //Price is outdated\\n\\n        reimburseLiquidator(\\n            amount,\\n            price,\\n            liquidator,\\n            assetBalances,\\n            constants.liquidationPremium,\\n            constants.user,\\n            constants._orionTokenAddress\\n        );\\n\\n        Position memory finalPosition = calcPosition(collateralAssets,\\n            liabilities,\\n            assetBalances,\\n            assetRisks,\\n            constants);\\n        require( int(finalPosition.state)<3 && //POSITIVE,NEGATIVE or OVERDUE\\n            (finalPosition.weightedPosition>initialPosition.weightedPosition),\\n            \\\"E10\\\");//Incorrect state position after liquidation\\n        if(finalPosition.state == PositionState.POSITIVE)\\n            require (finalPosition.weightedPosition<10e8,\\\"Can not liquidate to very positive state\\\");\\n\\n    }\\n\\n    /**\\n     * @dev reimburse liquidator with ORN: first from stake, than from broker balance\\n     */\\n    function reimburseLiquidator(\\n        uint112 amount,\\n        uint64 price,\\n        address liquidator,\\n        mapping(address => mapping(address => int192)) storage assetBalances,\\n        uint8 liquidationPremium,\\n        address user,\\n        address orionTokenAddress\\n    ) internal {\\n        int192 _orionAmount = int192(int256(amount)*price/1e8);\\n        _orionAmount += uint8Percent(_orionAmount, liquidationPremium); //Liquidation premium\\n        // There is only 100m Orion tokens, fits i64\\n        require(_orionAmount == int64(_orionAmount), \\\"E11\\\");\\n        int192 onBalanceOrion = assetBalances[user][orionTokenAddress];\\n\\n        require(onBalanceOrion >= _orionAmount, \\\"E10\\\");\\n        assetBalances[user][orionTokenAddress] -= _orionAmount;\\n        assetBalances[liquidator][orionTokenAddress] += _orionAmount;\\n    }\\n}\\n\"\r\n    },\r\n    \"contracts/libs/LibUnitConverter.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: BUSL-1.1\\npragma solidity 0.7.4;\\n\\nimport '@openzeppelin/contracts/token/ERC20/ERC20.sol';\\nimport '@openzeppelin/contracts/math/SafeMath.sol';\\n\\n\\nlibrary LibUnitConverter {\\n\\n    using SafeMath for uint;\\n\\n    /**\\n        @notice convert asset amount from8 decimals (10^8) to its base unit\\n     */\\n    function decimalToBaseUnit(address assetAddress, uint amount) internal view returns(int112 baseValue){\\n        uint256 result;\\n\\n        if(assetAddress == address(0)){\\n            result =  amount.mul(1 ether).div(10**8); // 18 decimals\\n        } else {\\n\\n            ERC20 asset = ERC20(assetAddress);\\n            uint decimals = asset.decimals();\\n\\n            result = amount.mul(10**decimals).div(10**8);\\n        }\\n\\n        require(result < uint256(type(int112).max), \\\"E3U\\\");\\n        baseValue = int112(result);\\n    }\\n\\n    /**\\n        @notice convert asset amount from its base unit to 8 decimals (10^8)\\n     */\\n    function baseUnitToDecimal(address assetAddress, uint amount) internal view returns(int112 decimalValue){\\n        uint256 result;\\n\\n        if(assetAddress == address(0)){\\n            result = amount.mul(10**8).div(1 ether);\\n        } else {\\n\\n            ERC20 asset = ERC20(assetAddress);\\n            uint decimals = asset.decimals();\\n\\n            result = amount.mul(10**8).div(10**decimals);\\n        }\\n        require(result < uint256(type(int112).max), \\\"E3U\\\");\\n        decimalValue = int112(result);\\n    }\\n}\\n\"\r\n    },\r\n    \"contracts/libs/LibValidator.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: BUSL-1.1\\npragma solidity 0.7.4;\\npragma experimental ABIEncoderV2;\\n\\nimport \\\"@openzeppelin/contracts/cryptography/ECDSA.sol\\\";\\n\\nlibrary LibValidator {\\n\\n    using ECDSA for bytes32;\\n\\n    string public constant DOMAIN_NAME = \\\"Orion Exchange\\\";\\n    string public constant DOMAIN_VERSION = \\\"1\\\";\\n    uint256 public constant CHAIN_ID = 1;\\n    bytes32 public constant DOMAIN_SALT = 0xf2d857f4a3edcb9b78b4d503bfe733db1e3f6cdc2b7971ee739626c97e86a557;\\n\\n    bytes32 public constant EIP712_DOMAIN_TYPEHASH = keccak256(\\n        abi.encodePacked(\\n            \\\"EIP712Domain(string name,string version,uint256 chainId,bytes32 salt)\\\"\\n        )\\n    );\\n    bytes32 public constant ORDER_TYPEHASH = keccak256(\\n        abi.encodePacked(\\n            \\\"Order(address senderAddress,address matcherAddress,address baseAsset,address quoteAsset,address matcherFeeAsset,uint64 amount,uint64 price,uint64 matcherFee,uint64 nonce,uint64 expiration,uint8 buySide)\\\"\\n        )\\n    );\\n\\n    bytes32 public constant DOMAIN_SEPARATOR = keccak256(\\n        abi.encode(\\n            EIP712_DOMAIN_TYPEHASH,\\n            keccak256(bytes(DOMAIN_NAME)),\\n            keccak256(bytes(DOMAIN_VERSION)),\\n            CHAIN_ID,\\n            DOMAIN_SALT\\n        )\\n    );\\n\\n    struct Order {\\n        address senderAddress;\\n        address matcherAddress;\\n        address baseAsset;\\n        address quoteAsset;\\n        address matcherFeeAsset;\\n        uint64 amount;\\n        uint64 price;\\n        uint64 matcherFee;\\n        uint64 nonce;\\n        uint64 expiration;\\n        uint8 buySide; // buy or sell\\n        bool isPersonalSign;\\n        bytes signature;\\n    }\\n\\n    /**\\n     * @dev validate order signature\\n     */\\n    function validateV3(Order memory order) public pure returns (bool) {\\n        bytes32 digest = keccak256(\\n            abi.encodePacked(\\n                \\\"\\\\x19\\\\x01\\\",\\n                DOMAIN_SEPARATOR,\\n                getTypeValueHash(order)\\n            )\\n        );\\n\\n        return digest.recover(order.signature) == order.senderAddress;\\n    }\\n\\n    /**\\n     * @return hash order\\n     */\\n    function getTypeValueHash(Order memory _order)\\n        internal\\n        pure\\n        returns (bytes32)\\n    {\\n        return\\n            keccak256(\\n                abi.encode(\\n                    ORDER_TYPEHASH,\\n                    _order.senderAddress,\\n                    _order.matcherAddress,\\n                    _order.baseAsset,\\n                    _order.quoteAsset,\\n                    _order.matcherFeeAsset,\\n                    _order.amount,\\n                    _order.price,\\n                    _order.matcherFee,\\n                    _order.nonce,\\n                    _order.expiration,\\n                    _order.buySide\\n                )\\n            );\\n    }\\n\\n    /**\\n     * @dev basic checks of matching orders against each other\\n     */\\n    function checkOrdersInfo(\\n        Order memory buyOrder,\\n        Order memory sellOrder,\\n        address sender,\\n        uint256 filledAmount,\\n        uint256 filledPrice,\\n        uint256 currentTime,\\n        address allowedMatcher\\n    ) public pure returns (bool success) {\\n        buyOrder.isPersonalSign ? require(validatePersonal(buyOrder), \\\"E2BP\\\") : require(validateV3(buyOrder), \\\"E2B\\\");\\n        sellOrder.isPersonalSign ? require(validatePersonal(sellOrder), \\\"E2SP\\\") : require(validateV3(sellOrder), \\\"E2S\\\");\\n\\n        // Same matcher address\\n        require(\\n            buyOrder.matcherAddress == sender &&\\n                sellOrder.matcherAddress == sender,\\n            \\\"E3M\\\"\\n        );\\n\\n        if(allowedMatcher != address(0)) {\\n          require(buyOrder.matcherAddress == allowedMatcher, \\\"E3M2\\\");\\n        }\\n\\n\\n        // Check matching assets\\n        require(\\n            buyOrder.baseAsset == sellOrder.baseAsset &&\\n                buyOrder.quoteAsset == sellOrder.quoteAsset,\\n            \\\"E3As\\\"\\n        );\\n\\n        // Check order amounts\\n        require(filledAmount <= buyOrder.amount, \\\"E3AmB\\\");\\n        require(filledAmount <= sellOrder.amount, \\\"E3AmS\\\");\\n\\n        // Check Price values\\n        require(filledPrice <= buyOrder.price, \\\"E3\\\");\\n        require(filledPrice >= sellOrder.price, \\\"E3\\\");\\n\\n        // Check Expiration Time. Convert to seconds first\\n        require(buyOrder.expiration/1000 >= currentTime, \\\"E4B\\\");\\n        require(sellOrder.expiration/1000 >= currentTime, \\\"E4S\\\");\\n\\n        require( buyOrder.buySide==1 && sellOrder.buySide==0, \\\"E3D\\\");\\n        success = true;\\n    }\\n\\n    function getEthSignedOrderHash(Order memory _order) public pure returns (bytes32) {\\n        return\\n            keccak256(\\n                abi.encodePacked(\\n                    \\\"order\\\",\\n                    _order.senderAddress,\\n                    _order.matcherAddress,\\n                    _order.baseAsset,\\n                    _order.quoteAsset,\\n                    _order.matcherFeeAsset,\\n                    _order.amount,\\n                    _order.price,\\n                    _order.matcherFee,\\n                    _order.nonce,\\n                    _order.expiration,\\n                    _order.buySide\\n                )\\n            ).toEthSignedMessageHash();\\n    }\\n\\n    function validatePersonal(Order memory order) public pure returns (bool) {\\n\\n        bytes32 digest = getEthSignedOrderHash(order);\\n        return digest.recover(order.signature) == order.senderAddress;\\n    }\\n\\n    function checkOrderSingleMatch(\\n        Order memory buyOrder,\\n        address sender,\\n        address allowedMatcher,\\n        uint112 filledAmount,\\n        uint256 currentTime,\\n        address[] memory path\\n    ) internal pure {\\n        buyOrder.isPersonalSign ? require(validatePersonal(buyOrder), \\\"E2BP\\\") : require(validateV3(buyOrder), \\\"E2B\\\");\\n        require(buyOrder.matcherAddress == sender && buyOrder.matcherAddress == allowedMatcher, \\\"E3M2\\\");\\n        if(buyOrder.buySide==1){\\n            require(\\n                buyOrder.baseAsset == path[path.length-1] &&\\n                buyOrder.quoteAsset == path[0],\\n                \\\"E3As\\\"\\n            );\\n        }else{\\n            require(\\n                buyOrder.quoteAsset == path[path.length-1] &&\\n                buyOrder.baseAsset == path[0],\\n                \\\"E3As\\\"\\n            );\\n        }\\n        require(filledAmount <= buyOrder.amount, \\\"E3AmB\\\");\\n        require(buyOrder.expiration/1000 >= currentTime, \\\"E4B\\\");\\n    }\\n}\\n\"\r\n    },\r\n    \"contracts/libs/SafeTransferHelper.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: BUSL-1.1\\npragma solidity 0.7.4;\\n\\nimport \\\"../utils/orionpool/periphery/interfaces/IWETH.sol\\\";\\nimport \\\"@openzeppelin/contracts/token/ERC20/SafeERC20.sol\\\";\\nimport \\\"@openzeppelin/contracts/token/ERC20/IERC20.sol\\\";\\nimport \\\"@openzeppelin/contracts/utils/Address.sol\\\";\\n\\nlibrary SafeTransferHelper {\\n\\n    function safeAutoTransferFrom(address weth, address token, address from, address to, uint value) internal {\\n        if (token == address(0)) {\\n            require(from == address(this), \\\"TransferFrom: this\\\");\\n            IWETH(weth).deposit{value: value}();\\n            assert(IWETH(weth).transfer(to, value));\\n        } else {\\n            if (from == address(this)) {\\n                SafeERC20.safeTransfer(IERC20(token), to, value);\\n            } else {\\n                SafeERC20.safeTransferFrom(IERC20(token), from, to, value);\\n            }\\n        }\\n    }\\n\\n    function safeAutoTransferTo(address weth, address token, address to, uint value) internal {\\n        if (address(this) != to) {\\n            if (token == address(0)) {\\n                IWETH(weth).withdraw(value);\\n                Address.sendValue(payable(to), value);\\n            } else {\\n                SafeERC20.safeTransfer(IERC20(token), to, value);\\n            }\\n        }\\n    }\\n\\n    function safeTransferTokenOrETH(address token, address to, uint value) internal {\\n        if (address(this) != to) {\\n            if (token == address(0)) {\\n                Address.sendValue(payable(to), value);\\n            } else {\\n                SafeERC20.safeTransfer(IERC20(token), to, value);\\n            }\\n        }\\n    }\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/math/SafeMath.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity >=0.6.0 <0.8.0;\\n\\n/**\\n * @dev Wrappers over Solidity's arithmetic operations with added overflow\\n * checks.\\n *\\n * Arithmetic operations in Solidity wrap on overflow. This can easily result\\n * in bugs, because programmers usually assume that an overflow raises an\\n * error, which is the standard behavior in high level programming languages.\\n * `SafeMath` restores this intuition by reverting the transaction when an\\n * operation overflows.\\n *\\n * Using this library instead of the unchecked operations eliminates an entire\\n * class of bugs, so it's recommended to use it always.\\n */\\nlibrary SafeMath {\\n    /**\\n     * @dev Returns the addition of two unsigned integers, with an overflow flag.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function tryAdd(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        uint256 c = a + b;\\n        if (c < a) return (false, 0);\\n        return (true, c);\\n    }\\n\\n    /**\\n     * @dev Returns the substraction of two unsigned integers, with an overflow flag.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function trySub(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        if (b > a) return (false, 0);\\n        return (true, a - b);\\n    }\\n\\n    /**\\n     * @dev Returns the multiplication of two unsigned integers, with an overflow flag.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function tryMul(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        // Gas optimization: this is cheaper than requiring 'a' not being zero, but the\\n        // benefit is lost if 'b' is also tested.\\n        // See: https://github.com/OpenZeppelin/openzeppelin-contracts/pull/522\\n        if (a == 0) return (true, 0);\\n        uint256 c = a * b;\\n        if (c / a != b) return (false, 0);\\n        return (true, c);\\n    }\\n\\n    /**\\n     * @dev Returns the division of two unsigned integers, with a division by zero flag.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function tryDiv(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        if (b == 0) return (false, 0);\\n        return (true, a / b);\\n    }\\n\\n    /**\\n     * @dev Returns the remainder of dividing two unsigned integers, with a division by zero flag.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function tryMod(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        if (b == 0) return (false, 0);\\n        return (true, a % b);\\n    }\\n\\n    /**\\n     * @dev Returns the addition of two unsigned integers, reverting on\\n     * overflow.\\n     *\\n     * Counterpart to Solidity's `+` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Addition cannot overflow.\\n     */\\n    function add(uint256 a, uint256 b) internal pure returns (uint256) {\\n        uint256 c = a + b;\\n        require(c >= a, \\\"SafeMath: addition overflow\\\");\\n        return c;\\n    }\\n\\n    /**\\n     * @dev Returns the subtraction of two unsigned integers, reverting on\\n     * overflow (when the result is negative).\\n     *\\n     * Counterpart to Solidity's `-` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Subtraction cannot overflow.\\n     */\\n    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\\n        require(b <= a, \\\"SafeMath: subtraction overflow\\\");\\n        return a - b;\\n    }\\n\\n    /**\\n     * @dev Returns the multiplication of two unsigned integers, reverting on\\n     * overflow.\\n     *\\n     * Counterpart to Solidity's `*` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Multiplication cannot overflow.\\n     */\\n    function mul(uint256 a, uint256 b) internal pure returns (uint256) {\\n        if (a == 0) return 0;\\n        uint256 c = a * b;\\n        require(c / a == b, \\\"SafeMath: multiplication overflow\\\");\\n        return c;\\n    }\\n\\n    /**\\n     * @dev Returns the integer division of two unsigned integers, reverting on\\n     * division by zero. The result is rounded towards zero.\\n     *\\n     * Counterpart to Solidity's `/` operator. Note: this function uses a\\n     * `revert` opcode (which leaves remaining gas untouched) while Solidity\\n     * uses an invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Requirements:\\n     *\\n     * - The divisor cannot be zero.\\n     */\\n    function div(uint256 a, uint256 b) internal pure returns (uint256) {\\n        require(b > 0, \\\"SafeMath: division by zero\\\");\\n        return a / b;\\n    }\\n\\n    /**\\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\\n     * reverting when dividing by zero.\\n     *\\n     * Counterpart to Solidity's `%` operator. This function uses a `revert`\\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\\n     * invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Requirements:\\n     *\\n     * - The divisor cannot be zero.\\n     */\\n    function mod(uint256 a, uint256 b) internal pure returns (uint256) {\\n        require(b > 0, \\\"SafeMath: modulo by zero\\\");\\n        return a % b;\\n    }\\n\\n    /**\\n     * @dev Returns the subtraction of two unsigned integers, reverting with custom message on\\n     * overflow (when the result is negative).\\n     *\\n     * CAUTION: This function is deprecated because it requires allocating memory for the error\\n     * message unnecessarily. For custom revert reasons use {trySub}.\\n     *\\n     * Counterpart to Solidity's `-` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Subtraction cannot overflow.\\n     */\\n    function sub(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\\n        require(b <= a, errorMessage);\\n        return a - b;\\n    }\\n\\n    /**\\n     * @dev Returns the integer division of two unsigned integers, reverting with custom message on\\n     * division by zero. The result is rounded towards zero.\\n     *\\n     * CAUTION: This function is deprecated because it requires allocating memory for the error\\n     * message unnecessarily. For custom revert reasons use {tryDiv}.\\n     *\\n     * Counterpart to Solidity's `/` operator. Note: this function uses a\\n     * `revert` opcode (which leaves remaining gas untouched) while Solidity\\n     * uses an invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Requirements:\\n     *\\n     * - The divisor cannot be zero.\\n     */\\n    function div(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\\n        require(b > 0, errorMessage);\\n        return a / b;\\n    }\\n\\n    /**\\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\\n     * reverting with custom message when dividing by zero.\\n     *\\n     * CAUTION: This function is deprecated because it requires allocating memory for the error\\n     * message unnecessarily. For custom revert reasons use {tryMod}.\\n     *\\n     * Counterpart to Solidity's `%` operator. This function uses a `revert`\\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\\n     * invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Requirements:\\n     *\\n     * - The divisor cannot be zero.\\n     */\\n    function mod(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\\n        require(b > 0, errorMessage);\\n        return a % b;\\n    }\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/utils/Address.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity >=0.6.2 <0.8.0;\\n\\n/**\\n * @dev Collection of functions related to the address type\\n */\\nlibrary Address {\\n    /**\\n     * @dev Returns true if `account` is a contract.\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * It is unsafe to assume that an address for which this function returns\\n     * false is an externally-owned account (EOA) and not a contract.\\n     *\\n     * Among others, `isContract` will return false for the following\\n     * types of addresses:\\n     *\\n     *  - an externally-owned account\\n     *  - a contract in construction\\n     *  - an address where a contract will be created\\n     *  - an address where a contract lived, but was destroyed\\n     * ====\\n     */\\n    function isContract(address account) internal view returns (bool) {\\n        // This method relies on extcodesize, which returns 0 for contracts in\\n        // construction, since the code is only stored at the end of the\\n        // constructor execution.\\n\\n        uint256 size;\\n        // solhint-disable-next-line no-inline-assembly\\n        assembly { size := extcodesize(account) }\\n        return size > 0;\\n    }\\n\\n    /**\\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\\n     * `recipient`, forwarding all available gas and reverting on errors.\\n     *\\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\\n     * imposed by `transfer`, making them unable to receive funds via\\n     * `transfer`. {sendValue} removes this limitation.\\n     *\\n     * https://diligence.consensys.net/posts/2019/09/stop-using-soliditys-transfer-now/[Learn more].\\n     *\\n     * IMPORTANT: because control is transferred to `recipient`, care must be\\n     * taken to not create reentrancy vulnerabilities. Consider using\\n     * {ReentrancyGuard} or the\\n     * https://solidity.readthedocs.io/en/v0.5.11/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\\n     */\\n    function sendValue(address payable recipient, uint256 amount) internal {\\n        require(address(this).balance >= amount, \\\"Address: insufficient balance\\\");\\n\\n        // solhint-disable-next-line avoid-low-level-calls, avoid-call-value\\n        (bool success, ) = recipient.call{ value: amount }(\\\"\\\");\\n        require(success, \\\"Address: unable to send value, recipient may have reverted\\\");\\n    }\\n\\n    /**\\n     * @dev Performs a Solidity function call using a low level `call`. A\\n     * plain`call` is an unsafe replacement for a function call: use this\\n     * function instead.\\n     *\\n     * If `target` reverts with a revert reason, it is bubbled up by this\\n     * function (like regular Solidity function calls).\\n     *\\n     * Returns the raw returned data. To convert to the expected return value,\\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\\n     *\\n     * Requirements:\\n     *\\n     * - `target` must be a contract.\\n     * - calling `target` with `data` must not revert.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\\n      return functionCall(target, data, \\\"Address: low-level call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\\n     * `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(address target, bytes memory data, string memory errorMessage) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, 0, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but also transferring `value` wei to `target`.\\n     *\\n     * Requirements:\\n     *\\n     * - the calling contract must have an ETH balance of at least `value`.\\n     * - the called Solidity function must be `payable`.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(address target, bytes memory data, uint256 value) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, value, \\\"Address: low-level call with value failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\\n     * with `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(address target, bytes memory data, uint256 value, string memory errorMessage) internal returns (bytes memory) {\\n        require(address(this).balance >= value, \\\"Address: insufficient balance for call\\\");\\n        require(isContract(target), \\\"Address: call to non-contract\\\");\\n\\n        // solhint-disable-next-line avoid-low-level-calls\\n        (bool success, bytes memory returndata) = target.call{ value: value }(data);\\n        return _verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\\n        return functionStaticCall(target, data, \\\"Address: low-level static call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(address target, bytes memory data, string memory errorMessage) internal view returns (bytes memory) {\\n        require(isContract(target), \\\"Address: static call to non-contract\\\");\\n\\n        // solhint-disable-next-line avoid-low-level-calls\\n        (bool success, bytes memory returndata) = target.staticcall(data);\\n        return _verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionDelegateCall(target, data, \\\"Address: low-level delegate call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(address target, bytes memory data, string memory errorMessage) internal returns (bytes memory) {\\n        require(isContract(target), \\\"Address: delegate call to non-contract\\\");\\n\\n        // solhint-disable-next-line avoid-low-level-calls\\n        (bool success, bytes memory returndata) = target.delegatecall(data);\\n        return _verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    function _verifyCallResult(bool success, bytes memory returndata, string memory errorMessage) private pure returns(bytes memory) {\\n        if (success) {\\n            return returndata;\\n        } else {\\n            // Look for revert reason and bubble it up if present\\n            if (returndata.length > 0) {\\n                // The easiest way to bubble the revert reason is using memory via assembly\\n\\n                // solhint-disable-next-line no-inline-assembly\\n                assembly {\\n                    let returndata_size := mload(returndata)\\n                    revert(add(32, returndata), returndata_size)\\n                }\\n            } else {\\n                revert(errorMessage);\\n            }\\n        }\\n    }\\n}\\n\"\r\n    },\r\n    \"contracts/PriceOracleInterface.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: BUSL-1.1\\npragma solidity 0.7.4;\\npragma experimental ABIEncoderV2;\\n\\nimport \\\"./PriceOracleDataTypes.sol\\\";\\n\\ninterface PriceOracleInterface is PriceOracleDataTypes {\\n    function assetPrices(address) external view returns (PriceDataOut memory);\\n    function givePrices(address[] calldata assetAddresses) external view returns (PriceDataOut[] memory);\\n}\\n\"\r\n    },\r\n    \"contracts/PriceOracleDataTypes.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: BUSL-1.1\\npragma solidity 0.7.4;\\npragma experimental ABIEncoderV2;\\n\\ninterface PriceOracleDataTypes {\\n    struct PriceDataOut {\\n        uint64 price;\\n        uint64 timestamp;\\n    }\\n\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/token/ERC20/ERC20.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity >=0.6.0 <0.8.0;\\n\\nimport \\\"../../utils/Context.sol\\\";\\nimport \\\"./IERC20.sol\\\";\\nimport \\\"../../math/SafeMath.sol\\\";\\n\\n/**\\n * @dev Implementation of the {IERC20} interface.\\n *\\n * This implementation is agnostic to the way tokens are created. This means\\n * that a supply mechanism has to be added in a derived contract using {_mint}.\\n * For a generic mechanism see {ERC20PresetMinterPauser}.\\n *\\n * TIP: For a detailed writeup see our guide\\n * https://forum.zeppelin.solutions/t/how-to-implement-erc20-supply-mechanisms/226[How\\n * to implement supply mechanisms].\\n *\\n * We have followed general OpenZeppelin guidelines: functions revert instead\\n * of returning `false` on failure. This behavior is nonetheless conventional\\n * and does not conflict with the expectations of ERC20 applications.\\n *\\n * Additionally, an {Approval} event is emitted on calls to {transferFrom}.\\n * This allows applications to reconstruct the allowance for all accounts just\\n * by listening to said events. Other implementations of the EIP may not emit\\n * these events, as it isn't required by the specification.\\n *\\n * Finally, the non-standard {decreaseAllowance} and {increaseAllowance}\\n * functions have been added to mitigate the well-known issues around setting\\n * allowances. See {IERC20-approve}.\\n */\\ncontract ERC20 is Context, IERC20 {\\n    using SafeMath for uint256;\\n\\n    mapping (address => uint256) private _balances;\\n\\n    mapping (address => mapping (address => uint256)) private _allowances;\\n\\n    uint256 private _totalSupply;\\n\\n    string private _name;\\n    string private _symbol;\\n    uint8 private _decimals;\\n\\n    /**\\n     * @dev Sets the values for {name} and {symbol}, initializes {decimals} with\\n     * a default value of 18.\\n     *\\n     * To select a different value for {decimals}, use {_setupDecimals}.\\n     *\\n     * All three of these values are immutable: they can only be set once during\\n     * construction.\\n     */\\n    constructor (string memory name_, string memory symbol_) public {\\n        _name = name_;\\n        _symbol = symbol_;\\n        _decimals = 18;\\n    }\\n\\n    /**\\n     * @dev Returns the name of the token.\\n     */\\n    function name() public view virtual returns (string memory) {\\n        return _name;\\n    }\\n\\n    /**\\n     * @dev Returns the symbol of the token, usually a shorter version of the\\n     * name.\\n     */\\n    function symbol() public view virtual returns (string memory) {\\n        return _symbol;\\n    }\\n\\n    /**\\n     * @dev Returns the number of decimals used to get its user representation.\\n     * For example, if `decimals` equals `2`, a balance of `505` tokens should\\n     * be displayed to a user as `5,05` (`505 / 10 ** 2`).\\n     *\\n     * Tokens usually opt for a value of 18, imitating the relationship between\\n     * Ether and Wei. This is the value {ERC20} uses, unless {_setupDecimals} is\\n     * called.\\n     *\\n     * NOTE: This information is only used for _display_ purposes: it in\\n     * no way affects any of the arithmetic of the contract, including\\n     * {IERC20-balanceOf} and {IERC20-transfer}.\\n     */\\n    function decimals() public view virtual returns (uint8) {\\n        return _decimals;\\n    }\\n\\n    /**\\n     * @dev See {IERC20-totalSupply}.\\n     */\\n    function totalSupply() public view virtual override returns (uint256) {\\n        return _totalSupply;\\n    }\\n\\n    /**\\n     * @dev See {IERC20-balanceOf}.\\n     */\\n    function balanceOf(address account) public view virtual override returns (uint256) {\\n        return _balances[account];\\n    }\\n\\n    /**\\n     * @dev See {IERC20-transfer}.\\n     *\\n     * Requirements:\\n     *\\n     * - `recipient` cannot be the zero address.\\n     * - the caller must have a balance of at least `amount`.\\n     */\\n    function transfer(address recipient, uint256 amount) public virtual override returns (bool) {\\n        _transfer(_msgSender(), recipient, amount);\\n        return true;\\n    }\\n\\n    /**\\n     * @dev See {IERC20-allowance}.\\n     */\\n    function allowance(address owner, address spender) public view virtual override returns (uint256) {\\n        return _allowances[owner][spender];\\n    }\\n\\n    /**\\n     * @dev See {IERC20-approve}.\\n     *\\n     * Requirements:\\n     *\\n     * - `spender` cannot be the zero address.\\n     */\\n    function approve(address spender, uint256 amount) public virtual override returns (bool) {\\n        _approve(_msgSender(), spender, amount);\\n        return true;\\n    }\\n\\n    /**\\n     * @dev See {IERC20-transferFrom}.\\n     *\\n     * Emits an {Approval} event indicating the updated allowance. This is not\\n     * required by the EIP. See the note at the beginning of {ERC20}.\\n     *\\n     * Requirements:\\n     *\\n     * - `sender` and `recipient` cannot be the zero address.\\n     * - `sender` must have a balance of at least `amount`.\\n     * - the caller must have allowance for ``sender``'s tokens of at least\\n     * `amount`.\\n     */\\n    function transferFrom(address sender, address recipient, uint256 amount) public virtual override returns (bool) {\\n        _transfer(sender, recipient, amount);\\n        _approve(sender, _msgSender(), _allowances[sender][_msgSender()].sub(amount, \\\"ERC20: transfer amount exceeds allowance\\\"));\\n        return true;\\n    }\\n\\n    /**\\n     * @dev Atomically increases the allowance granted to `spender` by the caller.\\n     *\\n     * This is an alternative to {approve} that can be used as a mitigation for\\n     * problems described in {IERC20-approve}.\\n     *\\n     * Emits an {Approval} event indicating the updated allowance.\\n     *\\n     * Requirements:\\n     *\\n     * - `spender` cannot be the zero address.\\n     */\\n    function increaseAllowance(address spender, uint256 addedValue) public virtual returns (bool) {\\n        _approve(_msgSender(), spender, _allowances[_msgSender()][spender].add(addedValue));\\n        return true;\\n    }\\n\\n    /**\\n     * @dev Atomically decreases the allowance granted to `spender` by the caller.\\n     *\\n     * This is an alternative to {approve} that can be used as a mitigation for\\n     * problems described in {IERC20-approve}.\\n     *\\n     * Emits an {Approval} event indicating the updated allowance.\\n     *\\n     * Requirements:\\n     *\\n     * - `spender` cannot be the zero address.\\n     * - `spender` must have allowance for the caller of at least\\n     * `subtractedValue`.\\n     */\\n    function decreaseAllowance(address spender, uint256 subtractedValue) public virtual returns (bool) {\\n        _approve(_msgSender(), spender, _allowances[_msgSender()][spender].sub(subtractedValue, \\\"ERC20: decreased allowance below zero\\\"));\\n        return true;\\n    }\\n\\n    /**\\n     * @dev Moves tokens `amount` from `sender` to `recipient`.\\n     *\\n     * This is internal function is equivalent to {transfer}, and can be used to\\n     * e.g. implement automatic token fees, slashing mechanisms, etc.\\n     *\\n     * Emits a {Transfer} event.\\n     *\\n     * Requirements:\\n     *\\n     * - `sender` cannot be the zero address.\\n     * - `recipient` cannot be the zero address.\\n     * - `sender` must have a balance of at least `amount`.\\n     */\\n    function _transfer(address sender, address recipient, uint256 amount) internal virtual {\\n        require(sender != address(0), \\\"ERC20: transfer from the zero address\\\");\\n        require(recipient != address(0), \\\"ERC20: transfer to the zero address\\\");\\n\\n        _beforeTokenTransfer(sender, recipient, amount);\\n\\n        _balances[sender] = _balances[sender].sub(amount, \\\"ERC20: transfer amount exceeds balance\\\");\\n        _balances[recipient] = _balances[recipient].add(amount);\\n        emit Transfer(sender, recipient, amount);\\n    }\\n\\n    /** @dev Creates `amount` tokens and assigns them to `account`, increasing\\n     * the total supply.\\n     *\\n     * Emits a {Transfer} event with `from` set to the zero address.\\n     *\\n     * Requirements:\\n     *\\n     * - `to` cannot be the zero address.\\n     */\\n    function _mint(address account, uint256 amount) internal virtual {\\n        require(account != address(0), \\\"ERC20: mint to the zero address\\\");\\n\\n        _beforeTokenTransfer(address(0), account, amount);\\n\\n        _totalSupply = _totalSupply.add(amount);\\n        _balances[account] = _balances[account].add(amount);\\n        emit Transfer(address(0), account, amount);\\n    }\\n\\n    /**\\n     * @dev Destroys `amount` tokens from `account`, reducing the\\n     * total supply.\\n     *\\n     * Emits a {Transfer} event with `to` set to the zero address.\\n     *\\n     * Requirements:\\n     *\\n     * - `account` cannot be the zero address.\\n     * - `account` must have at least `amount` tokens.\\n     */\\n    function _burn(address account, uint256 amount) internal virtual {\\n        require(account != address(0), \\\"ERC20: burn from the zero address\\\");\\n\\n        _beforeTokenTransfer(account, address(0), amount);\\n\\n        _balances[account] = _balances[account].sub(amount, \\\"ERC20: burn amount exceeds balance\\\");\\n        _totalSupply = _totalSupply.sub(amount);\\n        emit Transfer(account, address(0), amount);\\n    }\\n\\n    /**\\n     * @dev Sets `amount` as the allowance of `spender` over the `owner` s tokens.\\n     *\\n     * This internal function is equivalent to `approve`, and can be used to\\n     * e.g. set automatic allowances for certain subsystems, etc.\\n     *\\n     * Emits an {Approval} event.\\n     *\\n     * Requirements:\\n     *\\n     * - `owner` cannot be the zero address.\\n     * - `spender` cannot be the zero address.\\n     */\\n    function _approve(address owner, address spender, uint256 amount) internal virtual {\\n        require(owner != address(0), \\\"ERC20: approve from the zero address\\\");\\n        require(spender != address(0), \\\"ERC20: approve to the zero address\\\");\\n\\n        _allowances[owner][spender] = amount;\\n        emit Approval(owner, spender, amount);\\n    }\\n\\n    /**\\n     * @dev Sets {decimals} to a value other than the default one of 18.\\n     *\\n     * WARNING: This function should only be called from the constructor. Most\\n     * applications that interact with token contracts will not expect\\n     * {decimals} to ever change, and may work incorrectly if it does.\\n     */\\n    function _setupDecimals(uint8 decimals_) internal virtual {\\n        _decimals = decimals_;\\n    }\\n\\n    /**\\n     * @dev Hook that is called before any transfer of tokens. This includes\\n     * minting and burning.\\n     *\\n     * Calling conditions:\\n     *\\n     * - when `from` and `to` are both non-zero, `amount` of ``from``'s tokens\\n     * will be to transferred to `to`.\\n     * - when `from` is zero, `amount` tokens will be minted for `to`.\\n     * - when `to` is zero, `amount` of ``from``'s tokens will be burned.\\n     * - `from` and `to` are never both zero.\\n     *\\n     * To learn more about hooks, head to xref:ROOT:extending-contracts.adoc#using-hooks[Using Hooks].\\n     */\\n    function _beforeTokenTransfer(address from, address to, uint256 amount) internal virtual { }\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/utils/Context.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity >=0.6.0 <0.8.0;\\n\\n/*\\n * @dev Provides information about the current execution context, including the\\n * sender of the transaction and its data. While these are generally available\\n * via msg.sender and msg.data, they should not be accessed in such a direct\\n * manner, since when dealing with GSN meta-transactions the account sending and\\n * paying for execution may not be the actual sender (as far as an application\\n * is concerned).\\n *\\n * This contract is only required for intermediate, library-like contracts.\\n */\\nabstract contract Context {\\n    function _msgSender() internal view virtual returns (address payable) {\\n        return msg.sender;\\n    }\\n\\n    function _msgData() internal view virtual returns (bytes memory) {\\n        this; // silence state mutability warning without generating bytecode - see https://github.com/ethereum/solidity/issues/2691\\n        return msg.data;\\n    }\\n}\\n\"\r\n    },\r\n    \"contracts/utils/orionpool/periphery/interfaces/IWETH.sol\": {\r\n      \"content\": \"pragma solidity >=0.5.0;\\n\\ninterface IWETH {\\n    function deposit() external payable;\\n    function transfer(address to, uint value) external returns (bool);\\n    function withdraw(uint) external;\\n}\\n\"\r\n    }\r\n  },\r\n  \"settings\": {\r\n    \"optimizer\": {\r\n      \"enabled\": true,\r\n      \"runs\": 200\r\n    },\r\n    \"outputSelection\": {\r\n      \"*\": {\r\n        \"*\": [\r\n          \"evm.bytecode\",\r\n          \"evm.deployedBytecode\",\r\n          \"devdoc\",\r\n          \"userdoc\",\r\n          \"metadata\",\r\n          \"abi\"\r\n        ]\r\n      }\r\n    },\r\n    \"libraries\": {}\r\n  }\r\n}}","ABI":"[]","ContractName":"LibAtomic","CompilerVersion":"v0.7.4+commit.3f05b770","OptimizationUsed":"1","Runs":"200","ConstructorArguments":"","EVMVersion":"Default","Library":"","LicenseType":"","Proxy":"0","Implementation":"","SwarmSource":""}]}