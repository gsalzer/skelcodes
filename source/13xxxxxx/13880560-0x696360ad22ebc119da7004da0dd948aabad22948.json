{"status":"1","message":"OK","result":[{"SourceCode":"{{\r\n  \"language\": \"Solidity\",\r\n  \"sources\": {\r\n    \"contracts/protocols/mainnet/universeFinance/main.sol\": {\r\n      \"content\": \"//SPDX-License-Identifier: MIT\\npragma solidity ^0.7.6;\\npragma abicoder v2;\\n\\nimport { Helpers } from \\\"./helpers.sol\\\";\\n\\nabstract contract UniverseFinanceResolver is Helpers {\\n    /**\\n     * @notice get all Universe Working Vaults\\n     * @return address list\\n     */\\n    function getAllVault() public view returns (address[] memory) {\\n        return _officialVaults();\\n    }\\n\\n    /**\\n     * @notice get universe vault detail info\\n     * @param universeVaults the Universe Vault Address\\n     * @return [token0Address, token1Address, vaultMaxToken0Amount, vaultMaxToken1Amount, maxSingleDepositFofToken0,\\n     maxSingleDepositFofToken1, totalToken0Amount, totalTotal1Amount, utilizationOfToken0, utilizationOfToken1]\\n     */\\n    function getVaultDetail(address[] memory universeVaults) public view returns (VaultData[] memory) {\\n        return _vaultData(universeVaults);\\n    }\\n\\n    /**\\n     * @notice get user share info\\n     * @param universeVault the Universe Vault Address\\n     * @param user the user address\\n     * @return shareToken0Amount and shareToken1Amount\\n     */\\n    function getUserShareAmount(address universeVault, address user) external view returns (uint256, uint256) {\\n        return _userShareAmount(universeVault, user);\\n    }\\n\\n    /**\\n     * @notice get user share info list\\n     * @param universeVaults the Universe Vault Address arrays\\n     * @param user the user address\\n     */\\n    function getUserShareAmountList(address[] memory universeVaults, address user)\\n        external\\n        view\\n        returns (uint256[2][] memory data)\\n    {\\n        uint256 len = universeVaults.length;\\n        if (len > 0) {\\n            data = new uint256[2][](len);\\n            for (uint256 i; i < len; i++) {\\n                (uint256 share0, uint256 share1) = _userShareAmount(universeVaults[i], user);\\n                data[i] = [share0, share1];\\n            }\\n        }\\n    }\\n\\n    /**\\n     * @notice get user withdraw amount\\n     * @param universeVault the Universe Vault Address\\n     * @param user the user address\\n     * @return token0Amount  token1Amount\\n     */\\n    function getUserWithdrawAmount(address universeVault, address user) external view returns (uint256, uint256) {\\n        (uint256 share0, uint256 share1) = _userShareAmount(universeVault, user);\\n        return _withdrawAmount(universeVault, share0, share1);\\n    }\\n\\n    /**\\n     * @notice get user can get share when deposit amount0 and amount1\\n     * @param universeVault the Universe Vault Address\\n     * @param amount0 the token0 amount\\n     * @param amount1 the token1 amount\\n     * @return shareToken0Amount and shareToken1Amount\\n     */\\n    function getUserDepositAmount(\\n        address universeVault,\\n        uint256 amount0,\\n        uint256 amount1\\n    ) external view returns (uint256, uint256) {\\n        return _depositAmount(universeVault, amount0, amount1);\\n    }\\n\\n    /**\\n     * @notice get token decimals of a vault\\n     * @param vault the vault address\\n     * @return token decimals\\n     */\\n    function decimals(address vault) external view returns (uint8, uint8) {\\n        return _decimals(vault);\\n    }\\n\\n    /**\\n     * @notice get token decimals of a vault\\n     * @param universeVault the vault's address\\n     * @param user the user's address\\n     */\\n    function position(address[] memory universeVault, address user) public view returns (Position[] memory) {\\n        Position[] memory userPosition = new Position[](universeVault.length);\\n        for (uint256 i = 0; i < universeVault.length; i++) {\\n            userPosition[i] = _position(universeVault[i], user);\\n        }\\n\\n        return userPosition;\\n    }\\n\\n    /**\\n     * @notice returns vaults data & users position\\n     * @param universeVault the vault's address array\\n     * @param user the user's address\\n     */\\n    function positionByVault(address[] memory universeVault, address user)\\n        external\\n        view\\n        returns (Position[] memory userPosition, VaultData[] memory data)\\n    {\\n        userPosition = position(universeVault, user);\\n        data = getVaultDetail(universeVault);\\n    }\\n\\n    /**\\n     * @notice returns vaults data & users position\\n     * @param user the user's address\\n     */\\n    function positionByAddress(address user)\\n        external\\n        view\\n        returns (Position[] memory userPosition, VaultData[] memory data)\\n    {\\n        userPosition = position(getAllVault(), user);\\n        data = getVaultDetail(getAllVault());\\n    }\\n}\\n\\ncontract ResolverV2UniverseFinance is UniverseFinanceResolver {\\n    string public constant name = \\\"UniverseFinance-v1\\\";\\n}\\n\"\r\n    },\r\n    \"contracts/protocols/mainnet/universeFinance/helpers.sol\": {\r\n      \"content\": \"//SPDX-License-Identifier: MIT\\npragma solidity ^0.7.6;\\npragma abicoder v2;\\n\\nimport { DSMath } from \\\"../../../utils/dsmath.sol\\\";\\nimport \\\"./interface.sol\\\";\\n\\ncontract Helpers is DSMath {\\n    address internal constant universeReslover = 0x7466420dC366DF67b55daeDf19f8d37a346Fa7C8;\\n    uint8 internal constant vaultVersion = 1;\\n\\n    function _depositAmount(\\n        address universeVault,\\n        uint256 amount0,\\n        uint256 amount1\\n    ) internal view returns (uint256, uint256) {\\n        return IVaultV3(universeVault).getShares(amount0, amount1);\\n    }\\n\\n    function _withdrawAmount(\\n        address universeVault,\\n        uint256 share0,\\n        uint256 share1\\n    ) internal view returns (uint256, uint256) {\\n        return IVaultV3(universeVault).getBals(share0, share1);\\n    }\\n\\n    function _userShareAmount(address universeVault, address user) internal view returns (uint256, uint256) {\\n        return IVaultV3(universeVault).getUserShares(user);\\n    }\\n\\n    struct VaultData {\\n        address token0;\\n        address token1;\\n        uint256 maxToken0Amt;\\n        uint256 maxToken1Amt;\\n        uint256 maxSingeDepositAmt0;\\n        uint256 maxSingeDepositAmt1;\\n        uint256 total0;\\n        uint256 total1;\\n        uint256 utilizationRate0;\\n        uint256 utilizationRate1;\\n        uint256 version;\\n    }\\n\\n    struct Position {\\n        uint256 share0;\\n        uint256 share1;\\n        uint256 amount0;\\n        uint256 amount1;\\n        uint256 version;\\n    }\\n\\n    function _vaultDetail(address universeVault) internal view returns (VaultData memory vaultData) {\\n        IVaultV3 vault = IVaultV3(universeVault);\\n        vaultData.token0 = vault.token0();\\n        vaultData.token1 = vault.token1();\\n        IVaultV3.MaxShares memory maxShare = vault.maxShares();\\n        vaultData.maxToken0Amt = maxShare.maxToken0Amt;\\n        vaultData.maxToken1Amt = maxShare.maxToken1Amt;\\n        vaultData.maxSingeDepositAmt0 = maxShare.maxSingeDepositAmt0;\\n        vaultData.maxSingeDepositAmt1 = maxShare.maxSingeDepositAmt1;\\n        (uint256 total0, uint256 total1, , , uint256 utilizationRate0, uint256 utilizationRate1) = vault\\n            .getTotalAmounts();\\n        vaultData.total0 = total0;\\n        vaultData.total1 = total1;\\n        vaultData.utilizationRate0 = utilizationRate0;\\n        vaultData.utilizationRate1 = utilizationRate1;\\n        vaultData.version = vaultVersion;\\n    }\\n\\n    function _officialVaults() internal view returns (address[] memory vaults) {\\n        return IUniverseResolver(universeReslover).getAllVaultAddress();\\n    }\\n\\n    function _vaultData(address[] memory universeVaults) internal view returns (VaultData[] memory) {\\n        VaultData[] memory data = new VaultData[](universeVaults.length);\\n        for (uint256 i = 0; i < universeVaults.length; i++) {\\n            data[i] = _vaultDetail(universeVaults[i]);\\n        }\\n        return data;\\n    }\\n\\n    function _decimals(address vault) internal view returns (uint8 decimal0, uint8 decimal1) {\\n        address token0 = IVaultV3(vault).token0();\\n        address token1 = IVaultV3(vault).token1();\\n        decimal0 = IERC20(token0).decimals();\\n        decimal1 = IERC20(token1).decimals();\\n    }\\n\\n    function _position(address vault, address user) internal view returns (Position memory userPosition) {\\n        (userPosition.share0, userPosition.share1) = _userShareAmount(vault, user);\\n        (userPosition.amount0, userPosition.amount1) = _withdrawAmount(vault, userPosition.share0, userPosition.share1);\\n        userPosition.version = vaultVersion;\\n    }\\n}\\n\"\r\n    },\r\n    \"contracts/utils/dsmath.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\npragma solidity >=0.7.0;\\n\\ncontract DSMath {\\n    function add(uint256 x, uint256 y) internal pure returns (uint256 z) {\\n        require((z = x + y) >= x, \\\"math-not-safe\\\");\\n    }\\n\\n    function sub(uint256 x, uint256 y) internal pure returns (uint256 z) {\\n        z = x - y <= x ? x - y : 0;\\n    }\\n\\n    function mul(uint256 x, uint256 y) internal pure returns (uint256 z) {\\n        require(y == 0 || (z = x * y) / y == x, \\\"math-not-safe\\\");\\n    }\\n\\n    function sqrt(uint256 y) internal pure returns (uint256 z) {\\n        if (y > 3) {\\n            z = y;\\n            uint256 x = y / 2 + 1;\\n            while (x < z) {\\n                z = x;\\n                x = (y / x + x) / 2;\\n            }\\n        } else if (y != 0) {\\n            z = 1;\\n        }\\n    }\\n\\n    uint256 internal constant WAD = 10**18;\\n    uint256 internal constant RAY = 10**27;\\n\\n    function rmul(uint256 x, uint256 y) internal pure returns (uint256 z) {\\n        z = add(mul(x, y), RAY / 2) / RAY;\\n    }\\n\\n    function wmul(uint256 x, uint256 y) internal pure returns (uint256 z) {\\n        z = add(mul(x, y), WAD / 2) / WAD;\\n    }\\n\\n    function rdiv(uint256 x, uint256 y) internal pure returns (uint256 z) {\\n        z = add(mul(x, RAY), y / 2) / y;\\n    }\\n\\n    function wdiv(uint256 x, uint256 y) internal pure returns (uint256 z) {\\n        z = add(mul(x, WAD), y / 2) / y;\\n    }\\n}\\n\"\r\n    },\r\n    \"contracts/protocols/mainnet/universeFinance/interface.sol\": {\r\n      \"content\": \"//SPDX-License-Identifier: MIT\\npragma solidity ^0.7.6;\\npragma abicoder v2;\\n\\ninterface IUniverseAdapter {\\n    function depositProxy(\\n        address universeVault,\\n        uint256 amount0,\\n        uint256 amount1\\n    ) external returns (uint256, uint256);\\n}\\n\\ninterface IUniverseResolver {\\n    function getAllVaultAddress() external view returns (address[] memory vaults);\\n\\n    function checkUniverseVault(address universeVault) external view returns (bool status);\\n}\\n\\ninterface IVaultV3 {\\n    function getShares(uint256 amount0Desired, uint256 amount1Desired)\\n        external\\n        view\\n        returns (uint256 share0, uint256 share1);\\n\\n    function getBals(uint256 share0, uint256 share1) external view returns (uint256 amount0, uint256 amount1);\\n\\n    function getUserShares(address user) external view returns (uint256 share0, uint256 share1);\\n\\n    function token0() external view returns (address);\\n\\n    function token1() external view returns (address);\\n\\n    struct MaxShares {\\n        uint256 maxToken0Amt;\\n        uint256 maxToken1Amt;\\n        uint256 maxSingeDepositAmt0;\\n        uint256 maxSingeDepositAmt1;\\n    }\\n\\n    function maxShares() external view returns (MaxShares memory);\\n\\n    function getTotalAmounts()\\n        external\\n        view\\n        returns (\\n            uint256 total0,\\n            uint256 total1,\\n            uint256 free0,\\n            uint256 free1,\\n            uint256 utilizationRate0,\\n            uint256 utilizationRate1\\n        );\\n\\n    function getPNL() external view returns (uint256 rate, uint256 param);\\n}\\n\\ninterface IERC20 {\\n    function decimals() external view returns (uint8);\\n}\\n\"\r\n    }\r\n  },\r\n  \"settings\": {\r\n    \"optimizer\": {\r\n      \"enabled\": true,\r\n      \"runs\": 800\r\n    },\r\n    \"outputSelection\": {\r\n      \"*\": {\r\n        \"*\": [\r\n          \"evm.bytecode\",\r\n          \"evm.deployedBytecode\",\r\n          \"devdoc\",\r\n          \"userdoc\",\r\n          \"metadata\",\r\n          \"abi\"\r\n        ]\r\n      }\r\n    },\r\n    \"libraries\": {}\r\n  }\r\n}}","ABI":"[{\"inputs\":[{\"internalType\":\"address\",\"name\":\"vault\",\"type\":\"address\"}],\"name\":\"decimals\",\"outputs\":[{\"internalType\":\"uint8\",\"name\":\"\",\"type\":\"uint8\"},{\"internalType\":\"uint8\",\"name\":\"\",\"type\":\"uint8\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getAllVault\",\"outputs\":[{\"internalType\":\"address[]\",\"name\":\"\",\"type\":\"address[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"universeVault\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount0\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"amount1\",\"type\":\"uint256\"}],\"name\":\"getUserDepositAmount\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"universeVault\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"}],\"name\":\"getUserShareAmount\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address[]\",\"name\":\"universeVaults\",\"type\":\"address[]\"},{\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"}],\"name\":\"getUserShareAmountList\",\"outputs\":[{\"internalType\":\"uint256[2][]\",\"name\":\"data\",\"type\":\"uint256[2][]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"universeVault\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"}],\"name\":\"getUserWithdrawAmount\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address[]\",\"name\":\"universeVaults\",\"type\":\"address[]\"}],\"name\":\"getVaultDetail\",\"outputs\":[{\"components\":[{\"internalType\":\"address\",\"name\":\"token0\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"token1\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"maxToken0Amt\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"maxToken1Amt\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"maxSingeDepositAmt0\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"maxSingeDepositAmt1\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"total0\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"total1\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"utilizationRate0\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"utilizationRate1\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"version\",\"type\":\"uint256\"}],\"internalType\":\"struct Helpers.VaultData[]\",\"name\":\"\",\"type\":\"tuple[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"name\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address[]\",\"name\":\"universeVault\",\"type\":\"address[]\"},{\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"}],\"name\":\"position\",\"outputs\":[{\"components\":[{\"internalType\":\"uint256\",\"name\":\"share0\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"share1\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"amount0\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"amount1\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"version\",\"type\":\"uint256\"}],\"internalType\":\"struct Helpers.Position[]\",\"name\":\"\",\"type\":\"tuple[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"}],\"name\":\"positionByAddress\",\"outputs\":[{\"components\":[{\"internalType\":\"uint256\",\"name\":\"share0\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"share1\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"amount0\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"amount1\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"version\",\"type\":\"uint256\"}],\"internalType\":\"struct Helpers.Position[]\",\"name\":\"userPosition\",\"type\":\"tuple[]\"},{\"components\":[{\"internalType\":\"address\",\"name\":\"token0\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"token1\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"maxToken0Amt\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"maxToken1Amt\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"maxSingeDepositAmt0\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"maxSingeDepositAmt1\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"total0\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"total1\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"utilizationRate0\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"utilizationRate1\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"version\",\"type\":\"uint256\"}],\"internalType\":\"struct Helpers.VaultData[]\",\"name\":\"data\",\"type\":\"tuple[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address[]\",\"name\":\"universeVault\",\"type\":\"address[]\"},{\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"}],\"name\":\"positionByVault\",\"outputs\":[{\"components\":[{\"internalType\":\"uint256\",\"name\":\"share0\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"share1\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"amount0\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"amount1\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"version\",\"type\":\"uint256\"}],\"internalType\":\"struct Helpers.Position[]\",\"name\":\"userPosition\",\"type\":\"tuple[]\"},{\"components\":[{\"internalType\":\"address\",\"name\":\"token0\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"token1\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"maxToken0Amt\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"maxToken1Amt\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"maxSingeDepositAmt0\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"maxSingeDepositAmt1\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"total0\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"total1\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"utilizationRate0\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"utilizationRate1\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"version\",\"type\":\"uint256\"}],\"internalType\":\"struct Helpers.VaultData[]\",\"name\":\"data\",\"type\":\"tuple[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"}]","ContractName":"ResolverV2UniverseFinance","CompilerVersion":"v0.7.6+commit.7338295f","OptimizationUsed":"1","Runs":"800","ConstructorArguments":"","EVMVersion":"Default","Library":"","LicenseType":"","Proxy":"0","Implementation":"","SwarmSource":""}]}