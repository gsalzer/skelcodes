{"status":"1","message":"OK","result":[{"SourceCode":"{{\r\n  \"language\": \"Solidity\",\r\n  \"sources\": {\r\n    \"./TNDY/TNDYToken.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: UNLICENSED\\r\\n/*\\r\\n* TENDY, LLC (TENDY) is seeking to create a new, regulated NFT marketplace for US\\r\\n* creators and traders and wishes to engage the DeFi community in its growth.\\r\\n* \\r\\n* Furthermore, TENDY has already acquired 3,300 internet domain names in the NFT space,\\r\\n* which it intends to sell to the industry as the NFT market expands, e.g., punksnfts.com.\\r\\n* The list of TENDY domain names can be viewed at https://tendynft.com/.\\r\\n* Valuations based on public offer prices of the TENDY NFT domain names are, on average, \\r\\n* $40,000 each, giving this TNDY token an initial US Dollar net-asset-value (NAV) of $132m.\\r\\n* \\r\\n* TENDY will mint 3,300,000 ERC20 TNDY tokens as its DeFi asset. Each 1,000 tokens will\\r\\n* be backed by one, $40k value, NFT domain name, giving an average TNDY token value of $40.\\r\\n* \\r\\n* Whenever TENDY sells an NFT domain name it will use this income to buyback and burn TNDY\\r\\n* tokens on the Uniswap DeFi platform, positively influencing the TNDY token value.\\r\\n* \\r\\n* And, 10% of the TENDY regulated NFT marketplace revenues will be used to buyback and\\r\\n* burn TNDY tokens on the Uniswap DeFi platform, positively influencing the TNDY token value.\\r\\n* \\r\\n* TENDY intends to buyback TNDY tokens with such revenues when the token price is below \\r\\n* NAV, this action is intended to support the established NAV.\\r\\n* \\r\\n* Once the NAV of the TNDY token is aligned with the actual NFT asset value, then TENDY \\r\\n* will deposit the balance of its sales revenue along with a pro rata number of its TNDY \\r\\n* treasury tokens into the Uniswap DeFi liquidity pool, causing the TNDY price to stabilize.\\r\\n* \\r\\n* Periodically, TENDY will update the NAV of the assets backing the TNDY token as market\\r\\n* conditions change and the average value of its NFT domain names rises, or when TENDY purchases\\r\\n* new NFT domains for its portfolio. \\r\\n* \\r\\n* When the TNDY price is higher than the established NAV, then TENDY may sell treasury tokens \\r\\n* into Uniswap, causing the TNDY price to decrease until it reaches equilibrium with the NAV.\\r\\n* Future domain name sales will drive the token price back to NAV and|or be used to stabilize NAV.\\r\\n* \\r\\n*\\r\\n* https://tendy.com/ -- TENDY, LLC\\r\\n*\\r\\n* Address: 221 34th St. #1000, Manhattan Beach, CA 90266, USA\\r\\n* Email: info@tendy.com\\r\\n*\\r\\n* As at 2-September-2021, TENDY, LLC is a US limited liability company registered in Wyoming.\\r\\n*\\r\\n* This is an ERC-20 smart contract for the TNDY token that will be used as one side\\r\\n* of a Uniswap liquidity pool trading pair. This TNDY token has the following properties:\\r\\n*\\r\\n* 1. The number of TNDY tokens from this contract that will be initially added to the \\r\\n*    Uniswap liquidity pool shall be 16,500. The amount of ETH added to the other side of\\r\\n*    the initial Uniswap liquidity pool shall be approximately 4.4, representing $1/TNDY.\\r\\n*    A further 16,500 TNDY shall be deposited on PancakeSwap as part of the initial release.\\r\\n* 2. TENDY hereby commits to swap an amount of ETH currency with the Uniswap TNDY<>ETH \\r\\n*    trading pair upon receipt of 10% of tendy.com income or 100% of the sale of any of \\r\\n*    the NFT domain names that it owns.\\r\\n* 3. The value of the ETH currency swapped by TENDY shall be equal to 100% of TENDYs actual\\r\\n*    domain name sales revenue, as disclosed on its website from time to time. Each ETH\\r\\n*    swap shall be performed no later than 30 working days after a TENDY domain name sale.\\r\\n* 4. TNDY tokens returned by Uniswap from the buyback/swap of ETH by TENDY shall be burned \\r\\n*    by this smart contract.\\r\\n* 5. This contract shall not be allowed mint any new TNDY tokens, i.e., no dilution.\\r\\n* 6. TENDY, the company, shall initially hold 3,267,000 TNDY tokens on its balance sheet,\\r\\n*    i.e., the TNDY treasury tokens. These tokens may be only be sold by TENDY into Uniswap\\r\\n*    as part of TNDY price stabilization or transferred to the treasury Uniswap liquidity pool, \\r\\n*    along with ETH, for price stability.\\r\\n* 7. TENDYs treasury tokens may only ever be transferred after a notice period has elapsed,\\r\\n*    where every such notice period will be have been disclosed by this smart contract \\r\\n*    on the public blockchain, i.e., no rug-pulls.\\r\\n*\\r\\n*\\r\\n* https://abbey.ch/         -- Abbey Technology GmbH, Zug, Switzerland\\r\\n* \\r\\n* ABBEY DEFI\\r\\n* ========== \\r\\n* 1. Decentralized Finance (DeFi) is designed to be globally inclusive. \\r\\n* 2. Centralized finance is based around private share sales to wealthy individuals or\\r\\n*    the trading of shares on national stock markets, both have high barriers to entry. \\r\\n* 3. The Abbey DeFi methodology offers public and private companies exposure to DeFi.\\r\\n*\\r\\n* Abbey is a Uniswap-based DeFi service provider that allows companies to offer people a \\r\\n* novel way to speculate on the success of their business in a decentralized manner.\\r\\n* \\r\\n* The premise is both elegant and simple, the company commits to a token buyback based on \\r\\n* its sales revenue and commits to stabilize a tokens price by adding to the liquidity pool.\\r\\n* \\r\\n* Using Abbey as a Uniswap DeFi management agency, the company spends sales revenue, as ETH, \\r\\n* buying one side of a bespoke Uniswap trading pair. The other side of the Uniswap pair \\r\\n* is the TNDY token.\\r\\n* \\r\\n* DeFi traders wishing to speculate on the revenue growth of the company deposit ETH in return \\r\\n* for TNDY Uniswap tokens. The Uniswap Automated Market Maker ensures DeFi market \\r\\n* liquidity and legitimate price discovery. The more ETH that the company deposits over time, \\r\\n* the higher the value of the TNDY token, as held by DeFi speculators.\\r\\n*\\r\\n*/\\r\\n\\r\\npragma solidity 0.8.7;\\r\\n\\r\\nimport \\\"@openzeppelin/contracts/token/ERC20/ERC20.sol\\\";\\r\\nimport \\\"@openzeppelin/contracts/token/ERC721/IERC721.sol\\\";\\r\\n\\r\\n/**\\r\\n * @title Tendy (TNDY) contract for Uniswap.\\r\\n * @author Abbey Technology GmbH\\r\\n * @notice Token contract for use with Uniswap.  Enforces restrictions outlined in the prospectus.\\r\\n */\\r\\ncontract TNDYToken is ERC20 {\\r\\n\\r\\n    /**\\r\\n     * @notice The details of a future company cashout.\\r\\n     */\\r\\n    struct Notice {\\r\\n        // The maximum number of tokens proposed for sale.\\r\\n        uint256 amount;\\r\\n\\r\\n        // The date after which company tokens can be swapped.\\r\\n        uint256 releaseDate;\\r\\n    }\\r\\n\\r\\n    // Event fired when a restricted wallet gives notice of a potential future trade.\\r\\n    event NoticeGiven(address indexed who, uint256 amount, uint256 releaseDate);\\r\\n\\r\\n    // Event fired when a the Net Asset Value changes on this contract.\\r\\n    event NAVUpdated(address indexed who, uint256 newNAV);\\r\\n\\r\\n    /**\\r\\n     * @notice Notice must be given to the public before treasury tokens can be swapped.\\r\\n     */\\r\\n    Notice public noticeTreasury;\\r\\n\\r\\n    /**\\r\\n     * @notice Notice must be given to the public before Liquidity Tokens can be removed from the pool.\\r\\n     */\\r\\n    Notice public noticeLiquidity;\\r\\n\\r\\n    /**\\r\\n    * @notice The account that created this contract, also functions as the liquidity provider.\\r\\n    */\\r\\n    address public owner;\\r\\n\\r\\n    /**\\r\\n     * @notice Holder of the company's tokens.  Must give notice before tokens are moved.\\r\\n     */\\r\\n    address public treasury;\\r\\n\\r\\n    /**\\r\\n     * @notice The account that performs the buyback of tokens, all bought tokens are burned.\\r\\n     * @dev They cannot be autoburned during transfer as the Uniswap client prevents the transaction.\\r\\n     */\\r\\n    address public buyback;\\r\\n\\r\\n    /**\\r\\n     * @notice The account that facilitates moving tokens between Uniswap and PancakeSwap.\\r\\n     * @dev This account is not used in this contract, it's purely here for verification.\\r\\n     */\\r\\n    address public flip;    \\r\\n\\r\\n    /**\\r\\n     * @notice The address of the Uniswap Pool ERC20 contract holding the Liquidity Pool tokens.\\r\\n     */\\r\\n    address public poolAddress;\\r\\n\\r\\n    /**\\r\\n     * @notice The address of the Uniswap NFT ERC721 Positions contract that tracks ownership of liquidity pools.\\r\\n     */\\r\\n    address public positionsAddress;\\r\\n\\r\\n    /**\\r\\n     * @notice The NFT id of the Liquidity Pool in the Uniswap Positions contract.\\r\\n     */\\r\\n    uint256 public nftId;    \\r\\n\\r\\n    /**\\r\\n     * @notice The current NAV of the underlying assets.\\r\\n     */\\r\\n    uint256 public netAssetValue;\\r\\n\\r\\n    /**\\r\\n     * @notice The address of the Binance Contract that can be used with this contract for arbitrage.\\r\\n     */\\r\\n    address public binanceContract;\\r\\n\\r\\n    /**\\r\\n     * @notice Restrict functionaly to the contract owner.\\r\\n     */\\r\\n    modifier onlyOwner {\\r\\n        require(_msgSender() == owner, \\\"You are not Owner.\\\");\\r\\n        _;\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @notice Restrict functionaly to the buyback account.\\r\\n     */\\r\\n    modifier onlyBuyback {\\r\\n        require(_msgSender() == buyback, \\\"You are not Buyback.\\\");\\r\\n        _;\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @notice Create the contract setting already known values that are unlikely to change.\\r\\n     * \\r\\n     * @param initialSupply The total supply at creation, no more tokens can be minted but they can be burned.\\r\\n     * @param name          The name of the token.\\r\\n     * @param symbol        The short symbol for this token.\\r\\n     * @param treasuryAddr  The address of the treasury wallet.\\r\\n     * @param buybackAddr   The wallet that performs buybacks and optional burns of tokens.\\r\\n     * @param flipAddr      The wallet used to move tokens between Ethereum and Binance.\\r\\n     */\\r\\n    constructor(uint256 initialSupply, string memory name, string memory symbol, address treasuryAddr, address buybackAddr, address flipAddr, address positionsAddr) ERC20(name, symbol) {\\r\\n        owner = _msgSender();\\r\\n        _mint(_msgSender(), initialSupply);\\r\\n\\r\\n        treasury = treasuryAddr;\\r\\n        buyback = buybackAddr;\\r\\n        flip = flipAddr;\\r\\n        positionsAddress = positionsAddr; \\r\\n        netAssetValue = 132000000 ether;\\r\\n\\r\\n        // Of the 3.3m total supply 33,000 are split between Uniswap and PancakeSwap; treasury keeps the\\r\\n        // remaining tokens.  Sending 16500 tokens to Flip means they are allocated to owner in the\\r\\n        // Binance contract (see the binanceContract property), this happens in the constructor on\\r\\n        // contract creation.\\r\\n        transfer(treasury, 3267000 ether);\\r\\n        transfer(flip, 16500 ether);\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @notice Set the address of the account holding TNDY tokens on behalf of the company.\\r\\n     */\\r\\n    function setTreasury(address who) public onlyOwner {\\r\\n        treasury = who;\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @notice Set the address of the account that buys tokens to burn them.\\r\\n     */\\r\\n    function setBuyback(address who) public onlyOwner {\\r\\n        buyback = who;\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @notice Set the address of the account that allows moving tokens between Uniswap and PancakeSwap.\\r\\n     */\\r\\n    function setFlip(address who) public onlyOwner {\\r\\n        flip = who;\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @notice Set the address of the Uniswap Pool contract.\\r\\n     */\\r\\n    function setPoolAddress(address who) public onlyOwner {\\r\\n        poolAddress = who;\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @notice Set the address of the Uniswap NFT contract that tracks Liquidity Pool ownership.\\r\\n     */\\r\\n    function setPositionsAddress(address who) public onlyOwner {\\r\\n        positionsAddress = who;\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @notice Set the id of the position token that determines ownership of the Liquidity Pool.\\r\\n     */\\r\\n    function setNftId(uint256 id) public onlyOwner {\\r\\n        nftId = id;\\r\\n    }\\r\\n\\r\\n     /**\\r\\n     * @notice The total net asset value of the tendynft.com domain portfolio.\\r\\n     * This will be updated as new domains are purchased, exisiting domains\\r\\n     * are sold or when the portfolio of domain names is marked-to-market.\\r\\n     *\\r\\n     * @param nav    The US dollar value of the portfilio, in wei.\\r\\n     */\\r\\n    function setNetAssetValue(uint256 nav) public onlyOwner {\\r\\n        netAssetValue = nav;\\r\\n\\r\\n        emit NAVUpdated(_msgSender(), nav);\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @notice Set the address of the contract on the Binance Smart Chain where tokens\\r\\n     *         can be flipped to and flopped from.\\r\\n     */\\r\\n    function setBinanceContract(address contractAddress) public onlyOwner {\\r\\n        binanceContract = contractAddress;\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @notice Treasury tokens must give advanced notice to the public before they can be used.\\r\\n     * A public announcement will be made at the same time this notice is set in the contract.\\r\\n     *\\r\\n     * @param who The treasury address.\\r\\n     * @param amount The maximum number of tokens (in wei).\\r\\n     * @param numSeconds The number of seconds the tokens are held before being acted on.\\r\\n     */\\r\\n    function treasuryTransferNotice(address who, uint256 amount, uint256 numSeconds) public onlyOwner {\\r\\n        require(who == treasury, \\\"Specified address is not Treasury.\\\");\\r\\n\\r\\n        uint256 when = block.timestamp + (numSeconds * 1 seconds);\\r\\n\\r\\n        require(noticeTreasury.releaseDate == 0 || block.timestamp >= noticeTreasury.releaseDate, \\\"Cannot overwrite an active existing notice.\\\");\\r\\n        require(amount <= balanceOf(who), \\\"Can't give notice for more TNDY tokens than owned.\\\");\\r\\n        noticeTreasury = Notice(amount, when);\\r\\n        emit NoticeGiven(who, amount, when);\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @notice Liquidity Pool tokens must give advanced notice to the public before they can be used.\\r\\n     * A public announcement will be made at the same time this notice is set in the contract.     \\r\\n     *\\r\\n     * @param who The owner of the Uniswap Positions NFT token.\\r\\n     * @param amount The maximum number of tokens (in wei).\\r\\n     * @param numSeconds The number of seconds the tokens are held before being acted on.\\r\\n     */\\r\\n    function liquidityRedemptionNotice(address who, uint256 amount, uint256 numSeconds) public onlyOwner {\\r\\n        require(positionsAddress != address(0), \\\"Uniswap Position Manager must be set.\\\");\\r\\n        require(nftId != 0, \\\"Uniswap Position NFT Id must be set.\\\");\\r\\n        require(poolAddress != address(0), \\\"The Uniswap Pool contract address must be set.\\\");\\r\\n\\r\\n        IERC721 positions = IERC721(positionsAddress);\\r\\n        address lpOwner = positions.ownerOf(nftId);\\r\\n        require(who == lpOwner, \\\"The specified address does not own the Positions NFT Token.\\\");\\r\\n\\r\\n        uint256 when = block.timestamp + (numSeconds * 1 seconds);\\r\\n\\r\\n        require(noticeLiquidity.releaseDate == 0 || block.timestamp >= noticeLiquidity.releaseDate, \\\"Cannot overwrite an active existing notice.\\\");\\r\\n        require(amount <= balanceOf(poolAddress), \\\"Can't give notice for more Liquidity Tokens than owned.\\\");\\r\\n        noticeLiquidity = Notice(amount, when);\\r\\n        emit NoticeGiven(who, amount, when);\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @notice Enforce rules around the company accounts:\\r\\n     * - Once buyback buys tokens they can never be moved, the only real option is to burn.\\r\\n     * - Two key accounts: treasury and the owner of the liquidity pool are restricted.\\r\\n     * - A public announcement of the company's intent along with a time locked  notice set in this contract before any token movement.\\r\\n     * - Only after the deadline can these restricted tokens move.\\r\\n     * - No restrictions are in place for any other wallet.\\r\\n     */\\r\\n    function _transfer(address sender, address recipient, uint256 amount) internal override {\\r\\n        require(sender != buyback, \\\"Buyback cannot transfer tokens, it can only burn.\\\");\\r\\n        if(sender == treasury) {\\r\\n            require(noticeTreasury.releaseDate != 0 && block.timestamp >= noticeTreasury.releaseDate, \\\"Notice period has not been set or has not expired.\\\");\\r\\n            require(amount <= noticeTreasury.amount, \\\"Treasury can't transfer more tokens than given notice for.\\\");\\r\\n\\r\\n            // Clear the remaining notice balance, this prevents giving notice on all tokens and\\r\\n            // trickling them out.\\r\\n            noticeTreasury = Notice(0, 0);\\r\\n        }\\r\\n        else if(nftId != 0) { // Check if the receiver is the Liquidity Pool owner.\\r\\n            IERC721 positions = IERC721(positionsAddress);\\r\\n            address lpOwner = positions.ownerOf(nftId);\\r\\n            if(recipient == lpOwner) {\\r\\n                require(noticeLiquidity.releaseDate != 0 && block.timestamp >= noticeLiquidity.releaseDate, \\\"LP notice period has not been set or has not expired.\\\");\\r\\n                require(amount <= noticeLiquidity.amount, \\\"LP can't transfer more tokens than given notice for.\\\");\\r\\n\\r\\n                // Clear the remaining notice balance, this prevents giving notice on all tokens and\\r\\n                // trickling them out.\\r\\n                noticeLiquidity = Notice(0, 0);\\r\\n            }\\r\\n        }\\r\\n\\r\\n        super._transfer(sender, recipient, amount);\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @notice The buyback account can periodically buy tokens and burn them to reduce the\\r\\n     * total supply pushing up the price of the remaining tokens.\\r\\n     */\\r\\n    function burn() public onlyBuyback {\\r\\n        _burn(buyback, balanceOf(buyback));\\r\\n    }\\r\\n}\"\r\n    },\r\n    \"@openzeppelin/contracts/token/ERC20/ERC20.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"./IERC20.sol\\\";\\nimport \\\"./extensions/IERC20Metadata.sol\\\";\\nimport \\\"../../utils/Context.sol\\\";\\n\\n/**\\n * @dev Implementation of the {IERC20} interface.\\n *\\n * This implementation is agnostic to the way tokens are created. This means\\n * that a supply mechanism has to be added in a derived contract using {_mint}.\\n * For a generic mechanism see {ERC20PresetMinterPauser}.\\n *\\n * TIP: For a detailed writeup see our guide\\n * https://forum.zeppelin.solutions/t/how-to-implement-erc20-supply-mechanisms/226[How\\n * to implement supply mechanisms].\\n *\\n * We have followed general OpenZeppelin Contracts guidelines: functions revert\\n * instead returning `false` on failure. This behavior is nonetheless\\n * conventional and does not conflict with the expectations of ERC20\\n * applications.\\n *\\n * Additionally, an {Approval} event is emitted on calls to {transferFrom}.\\n * This allows applications to reconstruct the allowance for all accounts just\\n * by listening to said events. Other implementations of the EIP may not emit\\n * these events, as it isn't required by the specification.\\n *\\n * Finally, the non-standard {decreaseAllowance} and {increaseAllowance}\\n * functions have been added to mitigate the well-known issues around setting\\n * allowances. See {IERC20-approve}.\\n */\\ncontract ERC20 is Context, IERC20, IERC20Metadata {\\n    mapping(address => uint256) private _balances;\\n\\n    mapping(address => mapping(address => uint256)) private _allowances;\\n\\n    uint256 private _totalSupply;\\n\\n    string private _name;\\n    string private _symbol;\\n\\n    /**\\n     * @dev Sets the values for {name} and {symbol}.\\n     *\\n     * The default value of {decimals} is 18. To select a different value for\\n     * {decimals} you should overload it.\\n     *\\n     * All two of these values are immutable: they can only be set once during\\n     * construction.\\n     */\\n    constructor(string memory name_, string memory symbol_) {\\n        _name = name_;\\n        _symbol = symbol_;\\n    }\\n\\n    /**\\n     * @dev Returns the name of the token.\\n     */\\n    function name() public view virtual override returns (string memory) {\\n        return _name;\\n    }\\n\\n    /**\\n     * @dev Returns the symbol of the token, usually a shorter version of the\\n     * name.\\n     */\\n    function symbol() public view virtual override returns (string memory) {\\n        return _symbol;\\n    }\\n\\n    /**\\n     * @dev Returns the number of decimals used to get its user representation.\\n     * For example, if `decimals` equals `2`, a balance of `505` tokens should\\n     * be displayed to a user as `5.05` (`505 / 10 ** 2`).\\n     *\\n     * Tokens usually opt for a value of 18, imitating the relationship between\\n     * Ether and Wei. This is the value {ERC20} uses, unless this function is\\n     * overridden;\\n     *\\n     * NOTE: This information is only used for _display_ purposes: it in\\n     * no way affects any of the arithmetic of the contract, including\\n     * {IERC20-balanceOf} and {IERC20-transfer}.\\n     */\\n    function decimals() public view virtual override returns (uint8) {\\n        return 18;\\n    }\\n\\n    /**\\n     * @dev See {IERC20-totalSupply}.\\n     */\\n    function totalSupply() public view virtual override returns (uint256) {\\n        return _totalSupply;\\n    }\\n\\n    /**\\n     * @dev See {IERC20-balanceOf}.\\n     */\\n    function balanceOf(address account) public view virtual override returns (uint256) {\\n        return _balances[account];\\n    }\\n\\n    /**\\n     * @dev See {IERC20-transfer}.\\n     *\\n     * Requirements:\\n     *\\n     * - `recipient` cannot be the zero address.\\n     * - the caller must have a balance of at least `amount`.\\n     */\\n    function transfer(address recipient, uint256 amount) public virtual override returns (bool) {\\n        _transfer(_msgSender(), recipient, amount);\\n        return true;\\n    }\\n\\n    /**\\n     * @dev See {IERC20-allowance}.\\n     */\\n    function allowance(address owner, address spender) public view virtual override returns (uint256) {\\n        return _allowances[owner][spender];\\n    }\\n\\n    /**\\n     * @dev See {IERC20-approve}.\\n     *\\n     * Requirements:\\n     *\\n     * - `spender` cannot be the zero address.\\n     */\\n    function approve(address spender, uint256 amount) public virtual override returns (bool) {\\n        _approve(_msgSender(), spender, amount);\\n        return true;\\n    }\\n\\n    /**\\n     * @dev See {IERC20-transferFrom}.\\n     *\\n     * Emits an {Approval} event indicating the updated allowance. This is not\\n     * required by the EIP. See the note at the beginning of {ERC20}.\\n     *\\n     * Requirements:\\n     *\\n     * - `sender` and `recipient` cannot be the zero address.\\n     * - `sender` must have a balance of at least `amount`.\\n     * - the caller must have allowance for ``sender``'s tokens of at least\\n     * `amount`.\\n     */\\n    function transferFrom(\\n        address sender,\\n        address recipient,\\n        uint256 amount\\n    ) public virtual override returns (bool) {\\n        _transfer(sender, recipient, amount);\\n\\n        uint256 currentAllowance = _allowances[sender][_msgSender()];\\n        require(currentAllowance >= amount, \\\"ERC20: transfer amount exceeds allowance\\\");\\n        unchecked {\\n            _approve(sender, _msgSender(), currentAllowance - amount);\\n        }\\n\\n        return true;\\n    }\\n\\n    /**\\n     * @dev Atomically increases the allowance granted to `spender` by the caller.\\n     *\\n     * This is an alternative to {approve} that can be used as a mitigation for\\n     * problems described in {IERC20-approve}.\\n     *\\n     * Emits an {Approval} event indicating the updated allowance.\\n     *\\n     * Requirements:\\n     *\\n     * - `spender` cannot be the zero address.\\n     */\\n    function increaseAllowance(address spender, uint256 addedValue) public virtual returns (bool) {\\n        _approve(_msgSender(), spender, _allowances[_msgSender()][spender] + addedValue);\\n        return true;\\n    }\\n\\n    /**\\n     * @dev Atomically decreases the allowance granted to `spender` by the caller.\\n     *\\n     * This is an alternative to {approve} that can be used as a mitigation for\\n     * problems described in {IERC20-approve}.\\n     *\\n     * Emits an {Approval} event indicating the updated allowance.\\n     *\\n     * Requirements:\\n     *\\n     * - `spender` cannot be the zero address.\\n     * - `spender` must have allowance for the caller of at least\\n     * `subtractedValue`.\\n     */\\n    function decreaseAllowance(address spender, uint256 subtractedValue) public virtual returns (bool) {\\n        uint256 currentAllowance = _allowances[_msgSender()][spender];\\n        require(currentAllowance >= subtractedValue, \\\"ERC20: decreased allowance below zero\\\");\\n        unchecked {\\n            _approve(_msgSender(), spender, currentAllowance - subtractedValue);\\n        }\\n\\n        return true;\\n    }\\n\\n    /**\\n     * @dev Moves `amount` of tokens from `sender` to `recipient`.\\n     *\\n     * This internal function is equivalent to {transfer}, and can be used to\\n     * e.g. implement automatic token fees, slashing mechanisms, etc.\\n     *\\n     * Emits a {Transfer} event.\\n     *\\n     * Requirements:\\n     *\\n     * - `sender` cannot be the zero address.\\n     * - `recipient` cannot be the zero address.\\n     * - `sender` must have a balance of at least `amount`.\\n     */\\n    function _transfer(\\n        address sender,\\n        address recipient,\\n        uint256 amount\\n    ) internal virtual {\\n        require(sender != address(0), \\\"ERC20: transfer from the zero address\\\");\\n        require(recipient != address(0), \\\"ERC20: transfer to the zero address\\\");\\n\\n        _beforeTokenTransfer(sender, recipient, amount);\\n\\n        uint256 senderBalance = _balances[sender];\\n        require(senderBalance >= amount, \\\"ERC20: transfer amount exceeds balance\\\");\\n        unchecked {\\n            _balances[sender] = senderBalance - amount;\\n        }\\n        _balances[recipient] += amount;\\n\\n        emit Transfer(sender, recipient, amount);\\n\\n        _afterTokenTransfer(sender, recipient, amount);\\n    }\\n\\n    /** @dev Creates `amount` tokens and assigns them to `account`, increasing\\n     * the total supply.\\n     *\\n     * Emits a {Transfer} event with `from` set to the zero address.\\n     *\\n     * Requirements:\\n     *\\n     * - `account` cannot be the zero address.\\n     */\\n    function _mint(address account, uint256 amount) internal virtual {\\n        require(account != address(0), \\\"ERC20: mint to the zero address\\\");\\n\\n        _beforeTokenTransfer(address(0), account, amount);\\n\\n        _totalSupply += amount;\\n        _balances[account] += amount;\\n        emit Transfer(address(0), account, amount);\\n\\n        _afterTokenTransfer(address(0), account, amount);\\n    }\\n\\n    /**\\n     * @dev Destroys `amount` tokens from `account`, reducing the\\n     * total supply.\\n     *\\n     * Emits a {Transfer} event with `to` set to the zero address.\\n     *\\n     * Requirements:\\n     *\\n     * - `account` cannot be the zero address.\\n     * - `account` must have at least `amount` tokens.\\n     */\\n    function _burn(address account, uint256 amount) internal virtual {\\n        require(account != address(0), \\\"ERC20: burn from the zero address\\\");\\n\\n        _beforeTokenTransfer(account, address(0), amount);\\n\\n        uint256 accountBalance = _balances[account];\\n        require(accountBalance >= amount, \\\"ERC20: burn amount exceeds balance\\\");\\n        unchecked {\\n            _balances[account] = accountBalance - amount;\\n        }\\n        _totalSupply -= amount;\\n\\n        emit Transfer(account, address(0), amount);\\n\\n        _afterTokenTransfer(account, address(0), amount);\\n    }\\n\\n    /**\\n     * @dev Sets `amount` as the allowance of `spender` over the `owner` s tokens.\\n     *\\n     * This internal function is equivalent to `approve`, and can be used to\\n     * e.g. set automatic allowances for certain subsystems, etc.\\n     *\\n     * Emits an {Approval} event.\\n     *\\n     * Requirements:\\n     *\\n     * - `owner` cannot be the zero address.\\n     * - `spender` cannot be the zero address.\\n     */\\n    function _approve(\\n        address owner,\\n        address spender,\\n        uint256 amount\\n    ) internal virtual {\\n        require(owner != address(0), \\\"ERC20: approve from the zero address\\\");\\n        require(spender != address(0), \\\"ERC20: approve to the zero address\\\");\\n\\n        _allowances[owner][spender] = amount;\\n        emit Approval(owner, spender, amount);\\n    }\\n\\n    /**\\n     * @dev Hook that is called before any transfer of tokens. This includes\\n     * minting and burning.\\n     *\\n     * Calling conditions:\\n     *\\n     * - when `from` and `to` are both non-zero, `amount` of ``from``'s tokens\\n     * will be transferred to `to`.\\n     * - when `from` is zero, `amount` tokens will be minted for `to`.\\n     * - when `to` is zero, `amount` of ``from``'s tokens will be burned.\\n     * - `from` and `to` are never both zero.\\n     *\\n     * To learn more about hooks, head to xref:ROOT:extending-contracts.adoc#using-hooks[Using Hooks].\\n     */\\n    function _beforeTokenTransfer(\\n        address from,\\n        address to,\\n        uint256 amount\\n    ) internal virtual {}\\n\\n    /**\\n     * @dev Hook that is called after any transfer of tokens. This includes\\n     * minting and burning.\\n     *\\n     * Calling conditions:\\n     *\\n     * - when `from` and `to` are both non-zero, `amount` of ``from``'s tokens\\n     * has been transferred to `to`.\\n     * - when `from` is zero, `amount` tokens have been minted for `to`.\\n     * - when `to` is zero, `amount` of ``from``'s tokens have been burned.\\n     * - `from` and `to` are never both zero.\\n     *\\n     * To learn more about hooks, head to xref:ROOT:extending-contracts.adoc#using-hooks[Using Hooks].\\n     */\\n    function _afterTokenTransfer(\\n        address from,\\n        address to,\\n        uint256 amount\\n    ) internal virtual {}\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/token/ERC20/IERC20.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC20 standard as defined in the EIP.\\n */\\ninterface IERC20 {\\n    /**\\n     * @dev Returns the amount of tokens in existence.\\n     */\\n    function totalSupply() external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the amount of tokens owned by `account`.\\n     */\\n    function balanceOf(address account) external view returns (uint256);\\n\\n    /**\\n     * @dev Moves `amount` tokens from the caller's account to `recipient`.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transfer(address recipient, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Returns the remaining number of tokens that `spender` will be\\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\\n     * zero by default.\\n     *\\n     * This value changes when {approve} or {transferFrom} are called.\\n     */\\n    function allowance(address owner, address spender) external view returns (uint256);\\n\\n    /**\\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\\n     * that someone may use both the old and the new allowance by unfortunate\\n     * transaction ordering. One possible solution to mitigate this race\\n     * condition is to first reduce the spender's allowance to 0 and set the\\n     * desired value afterwards:\\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address spender, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Moves `amount` tokens from `sender` to `recipient` using the\\n     * allowance mechanism. `amount` is then deducted from the caller's\\n     * allowance.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(\\n        address sender,\\n        address recipient,\\n        uint256 amount\\n    ) external returns (bool);\\n\\n    /**\\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\\n     * another (`to`).\\n     *\\n     * Note that `value` may be zero.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 value);\\n\\n    /**\\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\\n     * a call to {approve}. `value` is the new allowance.\\n     */\\n    event Approval(address indexed owner, address indexed spender, uint256 value);\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/token/ERC20/extensions/IERC20Metadata.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../IERC20.sol\\\";\\n\\n/**\\n * @dev Interface for the optional metadata functions from the ERC20 standard.\\n *\\n * _Available since v4.1._\\n */\\ninterface IERC20Metadata is IERC20 {\\n    /**\\n     * @dev Returns the name of the token.\\n     */\\n    function name() external view returns (string memory);\\n\\n    /**\\n     * @dev Returns the symbol of the token.\\n     */\\n    function symbol() external view returns (string memory);\\n\\n    /**\\n     * @dev Returns the decimals places of the token.\\n     */\\n    function decimals() external view returns (uint8);\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/utils/Context.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Provides information about the current execution context, including the\\n * sender of the transaction and its data. While these are generally available\\n * via msg.sender and msg.data, they should not be accessed in such a direct\\n * manner, since when dealing with meta-transactions the account sending and\\n * paying for execution may not be the actual sender (as far as an application\\n * is concerned).\\n *\\n * This contract is only required for intermediate, library-like contracts.\\n */\\nabstract contract Context {\\n    function _msgSender() internal view virtual returns (address) {\\n        return msg.sender;\\n    }\\n\\n    function _msgData() internal view virtual returns (bytes calldata) {\\n        return msg.data;\\n    }\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/token/ERC721/IERC721.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../../utils/introspection/IERC165.sol\\\";\\n\\n/**\\n * @dev Required interface of an ERC721 compliant contract.\\n */\\ninterface IERC721 is IERC165 {\\n    /**\\n     * @dev Emitted when `tokenId` token is transferred from `from` to `to`.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 indexed tokenId);\\n\\n    /**\\n     * @dev Emitted when `owner` enables `approved` to manage the `tokenId` token.\\n     */\\n    event Approval(address indexed owner, address indexed approved, uint256 indexed tokenId);\\n\\n    /**\\n     * @dev Emitted when `owner` enables or disables (`approved`) `operator` to manage all of its assets.\\n     */\\n    event ApprovalForAll(address indexed owner, address indexed operator, bool approved);\\n\\n    /**\\n     * @dev Returns the number of tokens in ``owner``'s account.\\n     */\\n    function balanceOf(address owner) external view returns (uint256 balance);\\n\\n    /**\\n     * @dev Returns the owner of the `tokenId` token.\\n     *\\n     * Requirements:\\n     *\\n     * - `tokenId` must exist.\\n     */\\n    function ownerOf(uint256 tokenId) external view returns (address owner);\\n\\n    /**\\n     * @dev Safely transfers `tokenId` token from `from` to `to`, checking first that contract recipients\\n     * are aware of the ERC721 protocol to prevent tokens from being forever locked.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` cannot be the zero address.\\n     * - `to` cannot be the zero address.\\n     * - `tokenId` token must exist and be owned by `from`.\\n     * - If the caller is not `from`, it must be have been allowed to move this token by either {approve} or {setApprovalForAll}.\\n     * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function safeTransferFrom(\\n        address from,\\n        address to,\\n        uint256 tokenId\\n    ) external;\\n\\n    /**\\n     * @dev Transfers `tokenId` token from `from` to `to`.\\n     *\\n     * WARNING: Usage of this method is discouraged, use {safeTransferFrom} whenever possible.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` cannot be the zero address.\\n     * - `to` cannot be the zero address.\\n     * - `tokenId` token must be owned by `from`.\\n     * - If the caller is not `from`, it must be approved to move this token by either {approve} or {setApprovalForAll}.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(\\n        address from,\\n        address to,\\n        uint256 tokenId\\n    ) external;\\n\\n    /**\\n     * @dev Gives permission to `to` to transfer `tokenId` token to another account.\\n     * The approval is cleared when the token is transferred.\\n     *\\n     * Only a single account can be approved at a time, so approving the zero address clears previous approvals.\\n     *\\n     * Requirements:\\n     *\\n     * - The caller must own the token or be an approved operator.\\n     * - `tokenId` must exist.\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address to, uint256 tokenId) external;\\n\\n    /**\\n     * @dev Returns the account approved for `tokenId` token.\\n     *\\n     * Requirements:\\n     *\\n     * - `tokenId` must exist.\\n     */\\n    function getApproved(uint256 tokenId) external view returns (address operator);\\n\\n    /**\\n     * @dev Approve or remove `operator` as an operator for the caller.\\n     * Operators can call {transferFrom} or {safeTransferFrom} for any token owned by the caller.\\n     *\\n     * Requirements:\\n     *\\n     * - The `operator` cannot be the caller.\\n     *\\n     * Emits an {ApprovalForAll} event.\\n     */\\n    function setApprovalForAll(address operator, bool _approved) external;\\n\\n    /**\\n     * @dev Returns if the `operator` is allowed to manage all of the assets of `owner`.\\n     *\\n     * See {setApprovalForAll}\\n     */\\n    function isApprovedForAll(address owner, address operator) external view returns (bool);\\n\\n    /**\\n     * @dev Safely transfers `tokenId` token from `from` to `to`.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` cannot be the zero address.\\n     * - `to` cannot be the zero address.\\n     * - `tokenId` token must exist and be owned by `from`.\\n     * - If the caller is not `from`, it must be approved to move this token by either {approve} or {setApprovalForAll}.\\n     * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function safeTransferFrom(\\n        address from,\\n        address to,\\n        uint256 tokenId,\\n        bytes calldata data\\n    ) external;\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/utils/introspection/IERC165.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC165 standard, as defined in the\\n * https://eips.ethereum.org/EIPS/eip-165[EIP].\\n *\\n * Implementers can declare support of contract interfaces, which can then be\\n * queried by others ({ERC165Checker}).\\n *\\n * For an implementation, see {ERC165}.\\n */\\ninterface IERC165 {\\n    /**\\n     * @dev Returns true if this contract implements the interface defined by\\n     * `interfaceId`. See the corresponding\\n     * https://eips.ethereum.org/EIPS/eip-165#how-interfaces-are-identified[EIP section]\\n     * to learn more about how these ids are created.\\n     *\\n     * This function call must use less than 30 000 gas.\\n     */\\n    function supportsInterface(bytes4 interfaceId) external view returns (bool);\\n}\\n\"\r\n    }\r\n  },\r\n  \"settings\": {\r\n    \"metadata\": {\r\n      \"useLiteralContent\": true\r\n    },\r\n    \"outputSelection\": {\r\n      \"*\": {\r\n        \"*\": [\r\n          \"evm.bytecode\",\r\n          \"evm.deployedBytecode\",\r\n          \"abi\"\r\n        ]\r\n      }\r\n    }\r\n  }\r\n}}","ABI":"[{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"initialSupply\",\"type\":\"uint256\"},{\"internalType\":\"string\",\"name\":\"name\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"symbol\",\"type\":\"string\"},{\"internalType\":\"address\",\"name\":\"treasuryAddr\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"buybackAddr\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"flipAddr\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"positionsAddr\",\"type\":\"address\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Approval\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"who\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"newNAV\",\"type\":\"uint256\"}],\"name\":\"NAVUpdated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"who\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"releaseDate\",\"type\":\"uint256\"}],\"name\":\"NoticeGiven\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Transfer\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"}],\"name\":\"allowance\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"approve\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"binanceContract\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"burn\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"buyback\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"decimals\",\"outputs\":[{\"internalType\":\"uint8\",\"name\":\"\",\"type\":\"uint8\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"subtractedValue\",\"type\":\"uint256\"}],\"name\":\"decreaseAllowance\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"flip\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"addedValue\",\"type\":\"uint256\"}],\"name\":\"increaseAllowance\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"who\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"numSeconds\",\"type\":\"uint256\"}],\"name\":\"liquidityRedemptionNotice\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"name\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"netAssetValue\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"nftId\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"noticeLiquidity\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"releaseDate\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"noticeTreasury\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"releaseDate\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"poolAddress\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"positionsAddress\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"contractAddress\",\"type\":\"address\"}],\"name\":\"setBinanceContract\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"who\",\"type\":\"address\"}],\"name\":\"setBuyback\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"who\",\"type\":\"address\"}],\"name\":\"setFlip\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"nav\",\"type\":\"uint256\"}],\"name\":\"setNetAssetValue\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"id\",\"type\":\"uint256\"}],\"name\":\"setNftId\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"who\",\"type\":\"address\"}],\"name\":\"setPoolAddress\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"who\",\"type\":\"address\"}],\"name\":\"setPositionsAddress\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"who\",\"type\":\"address\"}],\"name\":\"setTreasury\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"symbol\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalSupply\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"recipient\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"transfer\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"recipient\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"transferFrom\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"treasury\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"who\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"numSeconds\",\"type\":\"uint256\"}],\"name\":\"treasuryTransferNotice\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}]","ContractName":"TNDYToken","CompilerVersion":"v0.8.7+commit.e28d00a7","OptimizationUsed":"0","Runs":"200","ConstructorArguments":"00000000000000000000000000000000000000000002bacd5bc40aa9c680000000000000000000000000000000000000000000000000000000000000000000e000000000000000000000000000000000000000000000000000000000000001600000000000000000000000006bc693dbd2b197e3067832ac71ed0b6d38cfd85a00000000000000000000000044734875a9cfac1ea21a9721b37954d33a24139b0000000000000000000000002ec7d593763eed26defa231b4c566252e2667a6b000000000000000000000000c36442b4a4522e871399cd717abdd847ab11fe88000000000000000000000000000000000000000000000000000000000000004454656e64794e46542e636f6d2c20616e204e46542043656e7472696320496e7465726e657420446f6d61696e2d4e616d652041737365742d4261636b656420546f6b656e000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000004544e445900000000000000000000000000000000000000000000000000000000","EVMVersion":"Default","Library":"","LicenseType":"None","Proxy":"0","Implementation":"","SwarmSource":"ipfs://d20b67dbd7f4a7ca289ad19e8d19ad35b7a446929fd1e219f6311fc32b6c5da2"}]}