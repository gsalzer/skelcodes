{"status":"1","message":"OK","result":[{"SourceCode":"{{\r\n  \"language\": \"Solidity\",\r\n  \"sources\": {\r\n    \"contracts/core/emergency/PendleOnePause.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n/*\\n * MIT License\\n * ===========\\n *\\n * Permission is hereby granted, free of charge, to any person obtaining a copy\\n * of this software and associated documentation files (the \\\"Software\\\"), to deal\\n * in the Software without restriction, including without limitation the rights\\n * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell\\n * copies of the Software, and to permit persons to whom the Software is\\n * furnished to do so, subject to the following conditions:\\n *\\n * The above copyright notice and this permission notice shall be included in all\\n * copies or substantial portions of the Software.\\n *\\n * THE SOFTWARE IS PROVIDED \\\"AS IS\\\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\\n * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\\n * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\\n * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\\n * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\\n * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE\\n */\\npragma solidity 0.7.6;\\npragma abicoder v2;\\nimport \\\"../../interfaces/IPendlePausingManager.sol\\\";\\n\\ncontract PendleOnePause {\\n    struct Call {\\n        address target;\\n        bytes callData;\\n    }\\n\\n    IPendlePausingManager public immutable pausingManagerMain;\\n    modifier isPausingAdmin {\\n        require(pausingManagerMain.isPausingAdmin(msg.sender), \\\"NOT_PAUSING_ADMIN\\\");\\n        _;\\n    }\\n\\n    constructor(IPendlePausingManager _pausingManagerMain) {\\n        pausingManagerMain = _pausingManagerMain;\\n    }\\n\\n    function pauseByData(Call[] memory calls)\\n        public\\n        isPausingAdmin\\n        returns (bool[] memory isSuccessful)\\n    {\\n        isSuccessful = new bool[](calls.length);\\n        for (uint256 i = 0; i < calls.length; i++)\\n            (isSuccessful[i], ) = calls[i].target.call(calls[i].callData);\\n    }\\n}\\n\"\r\n    },\r\n    \"contracts/interfaces/IPendlePausingManager.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n/*\\n * MIT License\\n * ===========\\n *\\n * Permission is hereby granted, free of charge, to any person obtaining a copy\\n * of this software and associated documentation files (the \\\"Software\\\"), to deal\\n * in the Software without restriction, including without limitation the rights\\n * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell\\n * copies of the Software, and to permit persons to whom the Software is\\n * furnished to do so, subject to the following conditions:\\n *\\n * The above copyright notice and this permission notice shall be included in all\\n * copies or substantial portions of the Software.\\n *\\n * THE SOFTWARE IS PROVIDED \\\"AS IS\\\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\\n * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\\n * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\\n * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\\n * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\\n * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE\\n */\\npragma solidity 0.7.6;\\n\\ninterface IPendlePausingManager {\\n    event AddPausingAdmin(address admin);\\n    event RemovePausingAdmin(address admin);\\n    event PendingForgeEmergencyHandler(address _pendingForgeHandler);\\n    event PendingMarketEmergencyHandler(address _pendingMarketHandler);\\n    event PendingLiqMiningEmergencyHandler(address _pendingLiqMiningHandler);\\n    event ForgeEmergencyHandlerSet(address forgeEmergencyHandler);\\n    event MarketEmergencyHandlerSet(address marketEmergencyHandler);\\n    event LiqMiningEmergencyHandlerSet(address liqMiningEmergencyHandler);\\n\\n    event PausingManagerLocked();\\n    event ForgeHandlerLocked();\\n    event MarketHandlerLocked();\\n    event LiqMiningHandlerLocked();\\n\\n    event SetForgePaused(bytes32 forgeId, bool settingToPaused);\\n    event SetForgeAssetPaused(bytes32 forgeId, address underlyingAsset, bool settingToPaused);\\n    event SetForgeAssetExpiryPaused(\\n        bytes32 forgeId,\\n        address underlyingAsset,\\n        uint256 expiry,\\n        bool settingToPaused\\n    );\\n\\n    event SetForgeLocked(bytes32 forgeId);\\n    event SetForgeAssetLocked(bytes32 forgeId, address underlyingAsset);\\n    event SetForgeAssetExpiryLocked(bytes32 forgeId, address underlyingAsset, uint256 expiry);\\n\\n    event SetMarketFactoryPaused(bytes32 marketFactoryId, bool settingToPaused);\\n    event SetMarketPaused(bytes32 marketFactoryId, address market, bool settingToPaused);\\n\\n    event SetMarketFactoryLocked(bytes32 marketFactoryId);\\n    event SetMarketLocked(bytes32 marketFactoryId, address market);\\n\\n    event SetLiqMiningPaused(address liqMiningContract, bool settingToPaused);\\n    event SetLiqMiningLocked(address liqMiningContract);\\n\\n    function forgeEmergencyHandler()\\n        external\\n        view\\n        returns (\\n            address handler,\\n            address pendingHandler,\\n            uint256 timelockDeadline\\n        );\\n\\n    function marketEmergencyHandler()\\n        external\\n        view\\n        returns (\\n            address handler,\\n            address pendingHandler,\\n            uint256 timelockDeadline\\n        );\\n\\n    function liqMiningEmergencyHandler()\\n        external\\n        view\\n        returns (\\n            address handler,\\n            address pendingHandler,\\n            uint256 timelockDeadline\\n        );\\n\\n    function permLocked() external view returns (bool);\\n\\n    function permForgeHandlerLocked() external view returns (bool);\\n\\n    function permMarketHandlerLocked() external view returns (bool);\\n\\n    function permLiqMiningHandlerLocked() external view returns (bool);\\n\\n    function isPausingAdmin(address) external view returns (bool);\\n\\n    function setPausingAdmin(address admin, bool isAdmin) external;\\n\\n    function requestForgeHandlerChange(address _pendingForgeHandler) external;\\n\\n    function requestMarketHandlerChange(address _pendingMarketHandler) external;\\n\\n    function requestLiqMiningHandlerChange(address _pendingLiqMiningHandler) external;\\n\\n    function applyForgeHandlerChange() external;\\n\\n    function applyMarketHandlerChange() external;\\n\\n    function applyLiqMiningHandlerChange() external;\\n\\n    function lockPausingManagerPermanently() external;\\n\\n    function lockForgeHandlerPermanently() external;\\n\\n    function lockMarketHandlerPermanently() external;\\n\\n    function lockLiqMiningHandlerPermanently() external;\\n\\n    function setForgePaused(bytes32 forgeId, bool paused) external;\\n\\n    function setForgeAssetPaused(\\n        bytes32 forgeId,\\n        address underlyingAsset,\\n        bool paused\\n    ) external;\\n\\n    function setForgeAssetExpiryPaused(\\n        bytes32 forgeId,\\n        address underlyingAsset,\\n        uint256 expiry,\\n        bool paused\\n    ) external;\\n\\n    function setForgeLocked(bytes32 forgeId) external;\\n\\n    function setForgeAssetLocked(bytes32 forgeId, address underlyingAsset) external;\\n\\n    function setForgeAssetExpiryLocked(\\n        bytes32 forgeId,\\n        address underlyingAsset,\\n        uint256 expiry\\n    ) external;\\n\\n    function checkYieldContractStatus(\\n        bytes32 forgeId,\\n        address underlyingAsset,\\n        uint256 expiry\\n    ) external returns (bool _paused, bool _locked);\\n\\n    function setMarketFactoryPaused(bytes32 marketFactoryId, bool paused) external;\\n\\n    function setMarketPaused(\\n        bytes32 marketFactoryId,\\n        address market,\\n        bool paused\\n    ) external;\\n\\n    function setMarketFactoryLocked(bytes32 marketFactoryId) external;\\n\\n    function setMarketLocked(bytes32 marketFactoryId, address market) external;\\n\\n    function checkMarketStatus(bytes32 marketFactoryId, address market)\\n        external\\n        returns (bool _paused, bool _locked);\\n\\n    function setLiqMiningPaused(address liqMiningContract, bool settingToPaused) external;\\n\\n    function setLiqMiningLocked(address liqMiningContract) external;\\n\\n    function checkLiqMiningStatus(address liqMiningContract)\\n        external\\n        returns (bool _paused, bool _locked);\\n}\\n\"\r\n    }\r\n  },\r\n  \"settings\": {\r\n    \"optimizer\": {\r\n      \"enabled\": true,\r\n      \"runs\": 200\r\n    },\r\n    \"outputSelection\": {\r\n      \"*\": {\r\n        \"*\": [\r\n          \"evm.bytecode\",\r\n          \"evm.deployedBytecode\",\r\n          \"abi\"\r\n        ]\r\n      }\r\n    },\r\n    \"libraries\": {}\r\n  }\r\n}}","ABI":"[{\"inputs\":[{\"internalType\":\"contract IPendlePausingManager\",\"name\":\"_pausingManagerMain\",\"type\":\"address\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"inputs\":[{\"components\":[{\"internalType\":\"address\",\"name\":\"target\",\"type\":\"address\"},{\"internalType\":\"bytes\",\"name\":\"callData\",\"type\":\"bytes\"}],\"internalType\":\"struct PendleOnePause.Call[]\",\"name\":\"calls\",\"type\":\"tuple[]\"}],\"name\":\"pauseByData\",\"outputs\":[{\"internalType\":\"bool[]\",\"name\":\"isSuccessful\",\"type\":\"bool[]\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"pausingManagerMain\",\"outputs\":[{\"internalType\":\"contract IPendlePausingManager\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"}]","ContractName":"PendleOnePause","CompilerVersion":"v0.7.6+commit.7338295f","OptimizationUsed":"1","Runs":"200","ConstructorArguments":"0000000000000000000000000ef44218209d7d64737dd36f179d5e448df3eed4","EVMVersion":"Default","Library":"","LicenseType":"","Proxy":"0","Implementation":"","SwarmSource":""}]}