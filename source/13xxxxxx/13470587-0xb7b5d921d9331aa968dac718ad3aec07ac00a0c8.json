{"status":"1","message":"OK","result":[{"SourceCode":"// SPDX-License-Identifier: MIT\r\n\r\npragma solidity >=0.6.0 <0.8.0;\r\n/*\r\n * @dev Provides information about the current execution context, including the\r\n * sender of the transaction and its data. While these are generally available\r\n * via msg.sender and msg.data, they should not be accessed in such a direct\r\n * manner, since when dealing with GSN meta-transactions the account sending and\r\n * paying for execution may not be the actual sender (as far as an application\r\n * is concerned).\r\n *\r\n * This contract is only required for intermediate, library-like contracts.\r\n */\r\nabstract contract Context {\r\n    function _msgSender() internal view virtual returns (address payable) {\r\n        return msg.sender;\r\n    }\r\n\r\n    function _msgData() internal view virtual returns (bytes memory) {\r\n        this; // silence state mutability warning without generating bytecode - see https://github.com/ethereum/solidity/issues/2691\r\n        return msg.data;\r\n    }\r\n}\r\n\r\n\r\npragma solidity ^0.7.0;\r\n/**\r\n * @dev Contract module which provides a basic access control mechanism, where\r\n * there is an account (an owner) that can be granted exclusive access to\r\n * specific functions.\r\n *\r\n * By default, the owner account will be the one that deploys the contract. This\r\n * can later be changed with {transferOwnership}.\r\n *\r\n * This module is used through inheritance. It will make available the modifier\r\n * `onlyOwner`, which can be applied to your functions to restrict their use to\r\n * the owner.\r\n */\r\nabstract contract Ownable is Context {\r\n    address private _owner;\r\n\r\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\r\n\r\n    /**\r\n     * @dev Initializes the contract setting the deployer as the initial owner.\r\n     */\r\n    constructor () {\r\n        address msgSender = _msgSender();\r\n        _owner = msgSender;\r\n        emit OwnershipTransferred(address(0), msgSender);\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the address of the current owner.\r\n     */\r\n    function owner() public view virtual returns (address) {\r\n        return _owner;\r\n    }\r\n\r\n    /**\r\n     * @dev Throws if called by any account other than the owner.\r\n     */\r\n    modifier onlyOwner() {\r\n        require(owner() == _msgSender(), \"Ownable: caller is not the owner\");\r\n        _;\r\n    }\r\n\r\n    /**\r\n     * @dev Leaves the contract without owner. It will not be possible to call\r\n     * `onlyOwner` functions anymore. Can only be called by the current owner.\r\n     *\r\n     * NOTE: Renouncing ownership will leave the contract without an owner,\r\n     * thereby removing any functionality that is only available to the owner.\r\n     */\r\n    function renounceOwnership() public virtual onlyOwner {\r\n        emit OwnershipTransferred(_owner, address(0));\r\n        _owner = address(0);\r\n    }\r\n\r\n    /**\r\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\r\n     * Can only be called by the current owner.\r\n     */\r\n    function transferOwnership(address newOwner) public virtual onlyOwner {\r\n        require(newOwner != address(0), \"Ownable: new owner is the zero address\");\r\n        emit OwnershipTransferred(_owner, newOwner);\r\n        _owner = newOwner;\r\n    }\r\n}\r\n\r\n\r\n\r\npragma solidity ^0.7.0;\r\n/**\r\n * @dev Wrappers over Solidity's arithmetic operations with added overflow\r\n * checks.\r\n *\r\n * Arithmetic operations in Solidity wrap on overflow. This can easily result\r\n * in bugs, because programmers usually assume that an overflow raises an\r\n * error, which is the standard behavior in high level programming languages.\r\n * `SafeMath` restores this intuition by reverting the transaction when an\r\n * operation overflows.\r\n *\r\n * Using this library instead of the unchecked operations eliminates an entire\r\n * class of bugs, so it's recommended to use it always.\r\n */\r\nlibrary SafeMath {\r\n    /**\r\n     * @dev Returns the addition of two unsigned integers, with an overflow flag.\r\n     *\r\n     * _Available since v3.4._\r\n     */\r\n    function tryAdd(uint256 a, uint256 b) internal pure returns (bool, uint256) {\r\n        uint256 c = a + b;\r\n        if (c < a) return (false, 0);\r\n        return (true, c);\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the substraction of two unsigned integers, with an overflow flag.\r\n     *\r\n     * _Available since v3.4._\r\n     */\r\n    function trySub(uint256 a, uint256 b) internal pure returns (bool, uint256) {\r\n        if (b > a) return (false, 0);\r\n        return (true, a - b);\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the multiplication of two unsigned integers, with an overflow flag.\r\n     *\r\n     * _Available since v3.4._\r\n     */\r\n    function tryMul(uint256 a, uint256 b) internal pure returns (bool, uint256) {\r\n        // Gas optimization: this is cheaper than requiring 'a' not being zero, but the\r\n        // benefit is lost if 'b' is also tested.\r\n        // See: https://github.com/OpenZeppelin/openzeppelin-contracts/pull/522\r\n        if (a == 0) return (true, 0);\r\n        uint256 c = a * b;\r\n        if (c / a != b) return (false, 0);\r\n        return (true, c);\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the division of two unsigned integers, with a division by zero flag.\r\n     *\r\n     * _Available since v3.4._\r\n     */\r\n    function tryDiv(uint256 a, uint256 b) internal pure returns (bool, uint256) {\r\n        if (b == 0) return (false, 0);\r\n        return (true, a / b);\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the remainder of dividing two unsigned integers, with a division by zero flag.\r\n     *\r\n     * _Available since v3.4._\r\n     */\r\n    function tryMod(uint256 a, uint256 b) internal pure returns (bool, uint256) {\r\n        if (b == 0) return (false, 0);\r\n        return (true, a % b);\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the addition of two unsigned integers, reverting on\r\n     * overflow.\r\n     *\r\n     * Counterpart to Solidity's `+` operator.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - Addition cannot overflow.\r\n     */\r\n    function add(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        uint256 c = a + b;\r\n        require(c >= a, \"SafeMath: addition overflow\");\r\n        return c;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the subtraction of two unsigned integers, reverting on\r\n     * overflow (when the result is negative).\r\n     *\r\n     * Counterpart to Solidity's `-` operator.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - Subtraction cannot overflow.\r\n     */\r\n    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        require(b <= a, \"SafeMath: subtraction overflow\");\r\n        return a - b;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the multiplication of two unsigned integers, reverting on\r\n     * overflow.\r\n     *\r\n     * Counterpart to Solidity's `*` operator.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - Multiplication cannot overflow.\r\n     */\r\n    function mul(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        if (a == 0) return 0;\r\n        uint256 c = a * b;\r\n        require(c / a == b, \"SafeMath: multiplication overflow\");\r\n        return c;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the integer division of two unsigned integers, reverting on\r\n     * division by zero. The result is rounded towards zero.\r\n     *\r\n     * Counterpart to Solidity's `/` operator. Note: this function uses a\r\n     * `revert` opcode (which leaves remaining gas untouched) while Solidity\r\n     * uses an invalid opcode to revert (consuming all remaining gas).\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - The divisor cannot be zero.\r\n     */\r\n    function div(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        require(b > 0, \"SafeMath: division by zero\");\r\n        return a / b;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\r\n     * reverting when dividing by zero.\r\n     *\r\n     * Counterpart to Solidity's `%` operator. This function uses a `revert`\r\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\r\n     * invalid opcode to revert (consuming all remaining gas).\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - The divisor cannot be zero.\r\n     */\r\n    function mod(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        require(b > 0, \"SafeMath: modulo by zero\");\r\n        return a % b;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the subtraction of two unsigned integers, reverting with custom message on\r\n     * overflow (when the result is negative).\r\n     *\r\n     * CAUTION: This function is deprecated because it requires allocating memory for the error\r\n     * message unnecessarily. For custom revert reasons use {trySub}.\r\n     *\r\n     * Counterpart to Solidity's `-` operator.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - Subtraction cannot overflow.\r\n     */\r\n    function sub(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\r\n        require(b <= a, errorMessage);\r\n        return a - b;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the integer division of two unsigned integers, reverting with custom message on\r\n     * division by zero. The result is rounded towards zero.\r\n     *\r\n     * CAUTION: This function is deprecated because it requires allocating memory for the error\r\n     * message unnecessarily. For custom revert reasons use {tryDiv}.\r\n     *\r\n     * Counterpart to Solidity's `/` operator. Note: this function uses a\r\n     * `revert` opcode (which leaves remaining gas untouched) while Solidity\r\n     * uses an invalid opcode to revert (consuming all remaining gas).\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - The divisor cannot be zero.\r\n     */\r\n    function div(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\r\n        require(b > 0, errorMessage);\r\n        return a / b;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\r\n     * reverting with custom message when dividing by zero.\r\n     *\r\n     * CAUTION: This function is deprecated because it requires allocating memory for the error\r\n     * message unnecessarily. For custom revert reasons use {tryMod}.\r\n     *\r\n     * Counterpart to Solidity's `%` operator. This function uses a `revert`\r\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\r\n     * invalid opcode to revert (consuming all remaining gas).\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - The divisor cannot be zero.\r\n     */\r\n    function mod(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\r\n        require(b > 0, errorMessage);\r\n        return a % b;\r\n    }\r\n}\r\n\r\n\r\n\r\n\r\n//--------------------------CROWD SALE------------------------\r\n\r\npragma solidity ^0.7.0;\r\n\r\n\r\ninterface IERC20 {\r\n    function decimals() external view returns (uint8);\r\n    function totalSupply() external view returns (uint256);\r\n    function balanceOf(address account) external view returns (uint256);\r\n    function transfer(address recipient, uint256 amount) external returns (bool);\r\n    function allowance(address owner, address spender) external view returns (uint256);\r\n    function approve(address spender, uint256 amount) external returns (bool);\r\n    function transferFrom(address sender, address recipient, uint256 amount) external returns (bool);\r\n    event Transfer(address indexed from, address indexed to, uint256 value);\r\n    event Approval(address indexed owner, address indexed spender, uint256 value);\r\n}\r\n\r\ncontract PreSale is Ownable {\r\n    using SafeMath for uint256;\r\n\r\n    IERC20 public dexrToken;\r\n    IERC20 public dexrShToken;\r\n    IERC20 public nucleusToken;\r\n\r\n    struct VestingPlan {\r\n        uint256 vType;\r\n        uint256 totalBalance;\r\n        uint256 totalClaimed;\r\n        uint256 start;\r\n        uint256 end;\r\n        uint256 releasePercentWhenStart;\r\n        uint256 releasePercentEachMonth;\r\n        uint256 claimedCheckPoint;\r\n    }\r\n    mapping (address => VestingPlan) public vestingList;\r\n    mapping (address => bool) public _isBlacklistWallet;\r\n\r\n    uint256 public totalTokenForSeed;\r\n    uint256 public totalTokenForVip;\r\n    uint256 public totalTokenForHolder;\r\n    uint256 public totalTokenForPublic;\r\n\r\n    uint256 public soldAmountSeed        = 0;\r\n    uint256 public soldAmountVip         = 0;\r\n    uint256 public soldAmountHolder      = 0;\r\n    uint256 public soldAmountPublic      = 0;\r\n\r\n    uint256 public _TOTAL_SOLD_TOKEN;\r\n    uint256 public _TOTAL_DEPOSIT_ETH;\r\n\r\n    uint256 public _MAX_ETH_CONTRIBUTION = 100 * 10**18;\r\n    uint256 public _MIN_ETH_CONTRIBUTION = 10**16;\r\n\r\n    uint256 public _TYPE_SEED = 1;\r\n    uint256 public _TYPE_VIP = 2;\r\n    uint256 public _TYPE_HOLDER = 3;\r\n    uint256 public _TYPE_PUBLIC = 4;\r\n\r\n    uint256 public MONTH = 30 days;\r\n    \r\n    mapping(address => bool) public listSeed;\r\n    mapping(address => uint256) public ethPurchased;\r\n\r\n    constructor() {\r\n        dexrToken = IERC20(0xA209aA89681195CEbF6DbB79c544061649B003d3);\r\n        dexrShToken = IERC20(0xE6C6d94A079e15D6Dd90f16d9775D8B5Fefb0E01);\r\n        nucleusToken = IERC20(0xd56736e79093D31be093ba1B5a5FE32E054B9592);\r\n        \r\n        totalTokenForSeed    = dexrToken.totalSupply().mul(10).div(100);\r\n        totalTokenForVip     = dexrToken.totalSupply().mul(4).div(100);\r\n        totalTokenForHolder  = dexrToken.totalSupply().mul(4).div(100);\r\n        totalTokenForPublic  = dexrToken.totalSupply().mul(2).div(100);\r\n    }\r\n\r\n    receive() external payable {\r\n        deposite();\r\n    }\r\n\r\n    function setBlacklistWallet(address account, bool blacklisted) external onlyOwner() {\r\n        _isBlacklistWallet[account] = blacklisted;\r\n    }\r\n\r\n    function ownerWithdrawEthAndNucleus() public onlyOwner{        \r\n        payable(msg.sender).transfer(address(this).balance);\r\n        nucleusToken.transfer(address(msg.sender), nucleusToken.balanceOf(address(this)));\r\n    }\r\n\r\n    function ownerWithdrawToken() public onlyOwner{    \r\n        uint256 withdrawable = totalTokenForSeed + totalTokenForVip + totalTokenForHolder + totalTokenForPublic - _TOTAL_SOLD_TOKEN;  \r\n        dexrToken.transfer(msg.sender, withdrawable);\r\n        dexrShToken.transfer(msg.sender, withdrawable);\r\n    }\r\n\r\n    function ownerAddSeedWhitelist(address[] calldata accounts, bool granted) public onlyOwner {\r\n        for( uint256 i = 0; i < accounts.length; i++){\r\n            listSeed[accounts[i]] = granted;\r\n        }\r\n    }\r\n\r\n    function getMemberType(address account) public view returns(uint256){\r\n        VestingPlan memory vestPlan = vestingList[account];\r\n        if(vestPlan.vType > 0)\r\n            return vestPlan.vType;\r\n\r\n        uint256 memType = _TYPE_PUBLIC;\r\n        if(listSeed[account]){\r\n            memType = _TYPE_SEED;\r\n        }else if(nucleusToken.balanceOf(account) >= 500000000 * 10**nucleusToken.decimals()){\r\n            memType = _TYPE_VIP;\r\n        }else if(nucleusToken.balanceOf(account) >= 2000000 * 10**nucleusToken.decimals()){\r\n            memType = _TYPE_HOLDER;\r\n        }\r\n        return memType;\r\n    }\r\n\r\n    function getRate(address account) public view returns(uint256) {\r\n        uint256 memType = getMemberType(account);\r\n        uint256 rate;\r\n        if(memType == _TYPE_SEED){\r\n            rate = 144927;\r\n        }else if(memType == _TYPE_VIP){\r\n            rate = 71428;\r\n        }else if(memType == _TYPE_HOLDER){\r\n            rate = 47619;\r\n        }else {\r\n            rate = 14492;\r\n        }\r\n        return rate;\r\n    }\r\n\r\n    function getClaimableInVesting(address account) public view returns (uint256){\r\n        VestingPlan memory vestPlan = vestingList[account];\r\n\r\n        //Already withdraw all\r\n        if(vestPlan.totalClaimed == vestPlan.totalBalance){\r\n            return 0;\r\n        }\r\n\r\n        //No infor\r\n        if(vestPlan.start == 0 || vestPlan.end == 0 || vestPlan.totalBalance == 0){\r\n            return 0;\r\n        }\r\n        \r\n        uint256 currentTime = block.timestamp;\r\n        if(currentTime >= vestPlan.end){\r\n            return vestPlan.totalBalance.sub(vestPlan.totalClaimed);\r\n        }else {\r\n            uint256 currentCheckPoint = (currentTime - vestPlan.start) / MONTH;\r\n            if(currentCheckPoint > vestPlan.claimedCheckPoint){\r\n                uint256 claimable =  ((currentCheckPoint - vestPlan.claimedCheckPoint)* vestPlan.releasePercentEachMonth * vestPlan.totalBalance) / 100;\r\n                return claimable;\r\n            }else\r\n                return 0;\r\n        }\r\n    }\r\n\r\n    function balanceRemainingInVesting(address account) public view returns(uint256){\r\n        VestingPlan memory vestPlan = vestingList[account];\r\n        return vestPlan.totalBalance -  vestPlan.totalClaimed;\r\n    }\r\n\r\n    function withDrawFromVesting() public {\r\n        VestingPlan storage vestPlan = vestingList[msg.sender];\r\n\r\n        uint256 claimableAmount = getClaimableInVesting(msg.sender);\r\n        require(claimableAmount > 0, \"There isn't token in vesting that claimable at the moment\");\r\n\r\n        uint256 currentTime = block.timestamp;\r\n        if(currentTime > vestPlan.end){\r\n            currentTime = vestPlan.end;\r\n        }\r\n        \r\n        vestPlan.claimedCheckPoint = (currentTime - vestPlan.start) / MONTH;\r\n        vestPlan.totalClaimed = vestPlan.totalClaimed.add(claimableAmount);\r\n        dexrToken.transfer(msg.sender, claimableAmount);\r\n        dexrShToken.transfer(msg.sender, claimableAmount);\r\n    }\r\n\r\n    function deposite() public payable {\r\n        require(_isBlacklistWallet[msg.sender] == false, \"You're in blacklist\");\r\n        require(msg.value >= _MIN_ETH_CONTRIBUTION, \"Please check minimum ETH contribution\");\r\n        require(ethPurchased[msg.sender].add(msg.value) <= _MAX_ETH_CONTRIBUTION, \"Check max contribution per wallet\");\r\n        \r\n        uint256 memType = getMemberType(msg.sender);\r\n        uint256 rate = getRate(msg.sender);\r\n\r\n        uint256 numToken = msg.value.mul(rate);\r\n        require(_TOTAL_SOLD_TOKEN.add(numToken) <= dexrToken.balanceOf(address(this)), \"Do not enough token in contract\");\r\n\r\n        if(memType != _TYPE_PUBLIC){\r\n            //User have to pay Nucleus with amount DEXR * 200\r\n            nucleusToken.transferFrom(address(msg.sender), address(this), numToken.mul(200).div(10**9));\r\n        }\r\n\r\n        ethPurchased[msg.sender]=  ethPurchased[msg.sender].add(msg.value);\r\n        _TOTAL_DEPOSIT_ETH = _TOTAL_DEPOSIT_ETH.add(msg.value);\r\n        _TOTAL_SOLD_TOKEN = _TOTAL_SOLD_TOKEN.add(numToken);\r\n\r\n        addingVestToken(msg.sender, numToken, memType);\r\n    }\r\n\r\n    function addingVestToken(address account, uint256 amount, uint256 vType) private {\r\n        VestingPlan storage vestPlan = vestingList[account];\r\n        if(vType == _TYPE_SEED){\r\n            require(soldAmountSeed.add(amount) <= totalTokenForSeed, \"Exceed token for SEED\");\r\n            soldAmountSeed = soldAmountSeed.add(amount);\r\n            vestPlan.releasePercentWhenStart = 10;\r\n            vestPlan.releasePercentEachMonth = 10;\r\n        }else if(vType == _TYPE_VIP){\r\n            require(soldAmountVip.add(amount) <= totalTokenForVip, \"Exceed token for VIP\");\r\n            soldAmountVip = soldAmountVip.add(amount);\r\n            vestPlan.releasePercentWhenStart = 20;\r\n            vestPlan.releasePercentEachMonth = 20;\r\n        }else if(vType == _TYPE_HOLDER){\r\n            require(soldAmountHolder.add(amount) <= totalTokenForHolder, \"Exceed token for HOLDER\");\r\n            soldAmountHolder = soldAmountHolder.add(amount);\r\n            vestPlan.releasePercentWhenStart = 25;\r\n            vestPlan.releasePercentEachMonth = 25;\r\n        }else if(vType == _TYPE_PUBLIC){\r\n            require(soldAmountPublic.add(amount) <= totalTokenForPublic, \"Exceed token for Public\");\r\n            soldAmountPublic = soldAmountPublic.add(amount);\r\n            dexrToken.transfer(account, amount);\r\n            dexrShToken.transfer(account, amount);\r\n            return;\r\n        }\r\n\r\n        vestPlan.vType = vType;\r\n        vestPlan.totalBalance = vestPlan.totalBalance.add(amount);\r\n        vestPlan.start = vestPlan.start == 0 ? block.timestamp : vestPlan.start;\r\n        vestPlan.end = vestPlan.end == 0 ? block.timestamp + ((100 - vestPlan.releasePercentWhenStart)/vestPlan.releasePercentEachMonth) * MONTH : vestPlan.end;\r\n\r\n        uint256 claimNow = (amount * vestPlan.releasePercentWhenStart)/100;\r\n        vestPlan.totalClaimed = vestPlan.totalClaimed.add(claimNow);\r\n\r\n        dexrToken.transfer(account, claimNow);\r\n        dexrShToken.transfer(account, claimNow);\r\n    }\r\n}","ABI":"[{\"inputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"MONTH\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"_MAX_ETH_CONTRIBUTION\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"_MIN_ETH_CONTRIBUTION\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"_TOTAL_DEPOSIT_ETH\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"_TOTAL_SOLD_TOKEN\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"_TYPE_HOLDER\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"_TYPE_PUBLIC\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"_TYPE_SEED\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"_TYPE_VIP\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"_isBlacklistWallet\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"balanceRemainingInVesting\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"deposite\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"dexrShToken\",\"outputs\":[{\"internalType\":\"contract IERC20\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"dexrToken\",\"outputs\":[{\"internalType\":\"contract IERC20\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"ethPurchased\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"getClaimableInVesting\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"getMemberType\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"getRate\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"listSeed\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"nucleusToken\",\"outputs\":[{\"internalType\":\"contract IERC20\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address[]\",\"name\":\"accounts\",\"type\":\"address[]\"},{\"internalType\":\"bool\",\"name\":\"granted\",\"type\":\"bool\"}],\"name\":\"ownerAddSeedWhitelist\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"ownerWithdrawEthAndNucleus\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"ownerWithdrawToken\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"internalType\":\"bool\",\"name\":\"blacklisted\",\"type\":\"bool\"}],\"name\":\"setBlacklistWallet\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"soldAmountHolder\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"soldAmountPublic\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"soldAmountSeed\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"soldAmountVip\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalTokenForHolder\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalTokenForPublic\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalTokenForSeed\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalTokenForVip\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"vestingList\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"vType\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"totalBalance\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"totalClaimed\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"start\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"end\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"releasePercentWhenStart\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"releasePercentEachMonth\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"claimedCheckPoint\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"withDrawFromVesting\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"stateMutability\":\"payable\",\"type\":\"receive\"}]","ContractName":"PreSale","CompilerVersion":"v0.7.6+commit.7338295f","OptimizationUsed":"1","Runs":"200","ConstructorArguments":"","EVMVersion":"Default","Library":"","LicenseType":"MIT","Proxy":"0","Implementation":"","SwarmSource":"ipfs://d8d563e5ee2a268e0addbcfcc7ba050ed484d58422fdd3a569b7da56654809ce"}]}