{"status":"1","message":"OK","result":[{"SourceCode":"// File: @openzeppelin/contracts/utils/Context.sol\r\n\r\n// SPDX-License-Identifier: MIT\r\n\r\npragma solidity ^0.8.0;\r\n\r\n/**\r\n * @dev Provides information about the current execution context, including the\r\n * sender of the transaction and its data. While these are generally available\r\n * via msg.sender and msg.data, they should not be accessed in such a direct\r\n * manner, since when dealing with meta-transactions the account sending and\r\n * paying for execution may not be the actual sender (as far as an application\r\n * is concerned).\r\n *\r\n * This contract is only required for intermediate, library-like contracts.\r\n */\r\nabstract contract Context {\r\n    function _msgSender() internal view virtual returns (address) {\r\n        return msg.sender;\r\n    }\r\n\r\n    function _msgData() internal view virtual returns (bytes calldata) {\r\n        return msg.data;\r\n    }\r\n}\r\n\r\n// File: @openzeppelin/contracts/access/Ownable.sol\r\n\r\n// (SPDX)-License-Identifier: MIT\r\n\r\npragma solidity ^0.8.0;\r\n\r\n\r\n/**\r\n * @dev Contract module which provides a basic access control mechanism, where\r\n * there is an account (an owner) that can be granted exclusive access to\r\n * specific functions.\r\n *\r\n * By default, the owner account will be the one that deploys the contract. This\r\n * can later be changed with {transferOwnership}.\r\n *\r\n * This module is used through inheritance. It will make available the modifier\r\n * `onlyOwner`, which can be applied to your functions to restrict their use to\r\n * the owner.\r\n */\r\nabstract contract Ownable is Context {\r\n    address private _owner;\r\n\r\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\r\n\r\n    /**\r\n     * @dev Initializes the contract setting the deployer as the initial owner.\r\n     */\r\n    constructor() {\r\n        _setOwner(_msgSender());\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the address of the current owner.\r\n     */\r\n    function owner() public view virtual returns (address) {\r\n        return _owner;\r\n    }\r\n\r\n    /**\r\n     * @dev Throws if called by any account other than the owner.\r\n     */\r\n    modifier onlyOwner() {\r\n        require(owner() == _msgSender(), \"Ownable: caller is not the owner\");\r\n        _;\r\n    }\r\n\r\n    /**\r\n     * @dev Leaves the contract without owner. It will not be possible to call\r\n     * `onlyOwner` functions anymore. Can only be called by the current owner.\r\n     *\r\n     * NOTE: Renouncing ownership will leave the contract without an owner,\r\n     * thereby removing any functionality that is only available to the owner.\r\n     */\r\n    function renounceOwnership() public virtual onlyOwner {\r\n        _setOwner(address(0));\r\n    }\r\n\r\n    /**\r\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\r\n     * Can only be called by the current owner.\r\n     */\r\n    function transferOwnership(address newOwner) public virtual onlyOwner {\r\n        require(newOwner != address(0), \"Ownable: new owner is the zero address\");\r\n        _setOwner(newOwner);\r\n    }\r\n\r\n    function _setOwner(address newOwner) private {\r\n        address oldOwner = _owner;\r\n        _owner = newOwner;\r\n        emit OwnershipTransferred(oldOwner, newOwner);\r\n    }\r\n}\r\n\r\n// File: @openzeppelin/contracts/security/ReentrancyGuard.sol\r\n\r\n// (SPDX)-License-Identifier: MIT\r\n\r\npragma solidity ^0.8.0;\r\n\r\n/**\r\n * @dev Contract module that helps prevent reentrant calls to a function.\r\n *\r\n * Inheriting from `ReentrancyGuard` will make the {nonReentrant} modifier\r\n * available, which can be applied to functions to make sure there are no nested\r\n * (reentrant) calls to them.\r\n *\r\n * Note that because there is a single `nonReentrant` guard, functions marked as\r\n * `nonReentrant` may not call one another. This can be worked around by making\r\n * those functions `private`, and then adding `external` `nonReentrant` entry\r\n * points to them.\r\n *\r\n * TIP: If you would like to learn more about reentrancy and alternative ways\r\n * to protect against it, check out our blog post\r\n * https://blog.openzeppelin.com/reentrancy-after-istanbul/[Reentrancy After Istanbul].\r\n */\r\nabstract contract ReentrancyGuard {\r\n    // Booleans are more expensive than uint256 or any type that takes up a full\r\n    // word because each write operation emits an extra SLOAD to first read the\r\n    // slot's contents, replace the bits taken up by the boolean, and then write\r\n    // back. This is the compiler's defense against contract upgrades and\r\n    // pointer aliasing, and it cannot be disabled.\r\n\r\n    // The values being non-zero value makes deployment a bit more expensive,\r\n    // but in exchange the refund on every call to nonReentrant will be lower in\r\n    // amount. Since refunds are capped to a percentage of the total\r\n    // transaction's gas, it is best to keep them low in cases like this one, to\r\n    // increase the likelihood of the full refund coming into effect.\r\n    uint256 private constant _NOT_ENTERED = 1;\r\n    uint256 private constant _ENTERED = 2;\r\n\r\n    uint256 private _status;\r\n\r\n    constructor() {\r\n        _status = _NOT_ENTERED;\r\n    }\r\n\r\n    /**\r\n     * @dev Prevents a contract from calling itself, directly or indirectly.\r\n     * Calling a `nonReentrant` function from another `nonReentrant`\r\n     * function is not supported. It is possible to prevent this from happening\r\n     * by making the `nonReentrant` function external, and make it call a\r\n     * `private` function that does the actual work.\r\n     */\r\n    modifier nonReentrant() {\r\n        // On the first call to nonReentrant, _notEntered will be true\r\n        require(_status != _ENTERED, \"ReentrancyGuard: reentrant call\");\r\n\r\n        // Any calls to nonReentrant after this point will fail\r\n        _status = _ENTERED;\r\n\r\n        _;\r\n\r\n        // By storing the original value once again, a refund is triggered (see\r\n        // https://eips.ethereum.org/EIPS/eip-2200)\r\n        _status = _NOT_ENTERED;\r\n    }\r\n}\r\n\r\n// File: contracts/IERC1155Mintable.sol\r\n\r\npragma solidity ^0.8.0;\r\n\r\ninterface IERC1155Mintable {\r\n    function create(\r\n        address to,\r\n        uint256 amount,\r\n        bytes memory _data\r\n    ) external returns (uint256);\r\n}\r\n\r\n// File: contracts/IERC20.sol\r\n\r\npragma solidity ^0.8.0;\r\n\r\n\r\ninterface IERC20 {\r\n\r\n    function balanceOf(address account) external view returns (uint256);\r\n    function transferFrom(\r\n        address sender,\r\n        address recipient,\r\n        uint256 amount\r\n    ) external returns (bool);\r\n    function mint(address to, uint256 amount) external;\r\n    function burnFrom(address from, uint256 amount) external;\r\n}\r\n\r\n// File: contracts/Genesis.sol\r\n\r\n// (SPDX)-License-Identifier: MIT\r\n\r\n\r\n\r\n\r\n\r\n\r\npragma solidity ^0.8.0;\r\n\r\ncontract Genesis is Ownable, ReentrancyGuard {\r\n    // Mapping from address to stakerInfoMap\r\n    // @dev see StakerInfo struct\r\n    mapping(address => StakerInfo) private _stakerInfoMap;\r\n\r\n    struct StakerInfo {\r\n        uint256 amount; // staked tokens\r\n        bool claimedNFT; // boolean if user has claimed NFT\r\n    }\r\n\r\n    // events\r\n    event Stake(address indexed staker, uint256 amount);\r\n    event Lock(address indexed user);\r\n    event Unlock(address indexed user);\r\n    event Claim(address indexed user);\r\n    event RemoveStake(address indexed staker, uint256 amount);\r\n    event GenesisUnlocked(address indexed user);\r\n\r\n    // contract interfaces\r\n    IERC20 rio; // RIO token\r\n    IERC20 xRio; // xRIO token\r\n    IERC1155Mintable realioNFTContract; // Realio NFT Factory contract\r\n\r\n    // contract level vars\r\n    address _stakingContractAddress; // Realio LP contract address\r\n    uint256 public stakedSupply; // Supply of genesis tokens available\r\n    uint256 public whaleThreshold; // Threshold for NFT claim\r\n    bool public locked; // contract is locked no staking\r\n    bool public networkGenesis; // realio network launch complete\r\n\r\n    constructor() public {\r\n        locked = true;\r\n        networkGenesis = false;\r\n        setWhaleThreshold(10000 ether); // 10,000 RIO\r\n    }\r\n\r\n    function getStakingContractAddress() public view virtual returns (address) {\r\n        return _stakingContractAddress;\r\n    }\r\n\r\n    function init(address _stakingContractAddress, address _xRIOContractAddress, address _rioContractAddress) public onlyOwner {\r\n        setStakingContractAddress(_stakingContractAddress);\r\n        setxRIOToken(_xRIOContractAddress);\r\n        setRIOToken(_rioContractAddress);\r\n        flipLock();\r\n    }\r\n\r\n    function setWhaleThreshold(uint256 amount) public onlyOwner {\r\n        whaleThreshold = amount;\r\n    }\r\n\r\n    function setRealioNFTContract(address a) public onlyOwner {\r\n        realioNFTContract = IERC1155Mintable(a);\r\n    }\r\n\r\n    function setStakingContractAddress(address a) public onlyOwner {\r\n        _stakingContractAddress = a;\r\n    }\r\n\r\n    function setRIOToken(address _rioAddress) public onlyOwner {\r\n        rio = IERC20(_rioAddress);\r\n    }\r\n\r\n    function setxRIOToken(address _xrioAddress) public onlyOwner {\r\n        xRio = IERC20(_xrioAddress);\r\n    }\r\n\r\n    function setNetworkGenesis() public onlyOwner {\r\n        networkGenesis = true;\r\n        emit GenesisUnlocked(_msgSender());\r\n    }\r\n\r\n    function flipLock() public onlyOwner {\r\n        locked = !locked;\r\n    }\r\n\r\n    function updateStakeHolding(address staker, uint256 amount) internal {\r\n        StakerInfo storage stakerInfo = _stakerInfoMap[staker];\r\n        uint256 stakedBal = stakerInfo.amount;\r\n        stakerInfo.amount = amount + stakedBal;\r\n    }\r\n\r\n    function stake(uint256 amount) public nonReentrant {\r\n        // staker must approve the stake amount to be controlled by the genesis contract\r\n        require(!locked, \"Genesis contract is locked\");\r\n        require(rio.balanceOf(_msgSender()) >= amount, \"Sender does not have enough RIO\");\r\n        // solidity 0.8 now includes SafeMath as default; overflows not an issue\r\n        uint256 amountShare = amount / 2;\r\n        uint256 mintAmount = calculateMintAmount(amount);\r\n        rio.transferFrom(_msgSender(), _stakingContractAddress, amountShare);\r\n        rio.burnFrom(_msgSender(), amountShare);\r\n        xRio.mint(_msgSender(), mintAmount);\r\n        stakedSupply = stakedSupply + amount;\r\n        updateStakeHolding(_msgSender(), amount);\r\n        emit Stake(_msgSender(), amount);\r\n    }\r\n\r\n    // determine the appropriate bonus share based on stakedSupply and users staked amount\r\n    // if newSupply crossed a tier threshold calculate appropriate bonusShare\r\n    function calculateMintAmount(uint256 amount) internal view returns (uint256) {\r\n        uint256 tierOne = 100000 ether; // 100,000 RIO\r\n        uint256 tierTwo = 500000 ether; // 500,000 RIO\r\n        uint256 bonusShare = 0;\r\n        uint256 newSupply = stakedSupply + amount;\r\n        if (newSupply < tierOne) {\r\n            // tierOne stake level\r\n            bonusShare = amount * 3;\r\n        } else if (newSupply < tierTwo) {\r\n            // tierTwo stake level\r\n            if (stakedSupply < tierOne) {\r\n                // check if staked amount crosses tierOne threshold\r\n                // ie stakedSupply + user staked amount crosses tierOne\r\n                uint256 partialShare = 0;\r\n                uint256 overflowShare = 0;\r\n                partialShare = tierOne - stakedSupply;\r\n                overflowShare = newSupply - tierOne;\r\n                bonusShare = (partialShare * 3) + (overflowShare * 2);\r\n            } else {\r\n                bonusShare = amount * 2;\r\n            }\r\n        } else {\r\n            if (stakedSupply < tierTwo) {\r\n                // check if staked amount crosses tierTwo threshold\r\n                // ie stakedSupply + user staked amount crosses tierTwo\r\n                uint256 partialShare = 0;\r\n                uint256 overflowShare = 0;\r\n                partialShare = tierTwo - stakedSupply;\r\n                overflowShare = newSupply - tierTwo;\r\n                bonusShare = (partialShare * 2) + (overflowShare + (overflowShare/2));\r\n            } else {\r\n                bonusShare = amount + (amount/2);\r\n            }\r\n        }\r\n        return bonusShare;\r\n    }\r\n\r\n    // allow any whales that have staked to receive an NFT at Genesis\r\n    function claim() public nonReentrant {\r\n        require(hasClaim(_msgSender()), \"sender has no NFT claim\");\r\n        if (_stakerInfoMap[_msgSender()].amount >= whaleThreshold) {\r\n            realioNFTContract.create(_msgSender(), 1, '');\r\n            _stakerInfoMap[_msgSender()].claimedNFT = true;\r\n        }\r\n        emit Claim(_msgSender());\r\n    }\r\n\r\n    // check if the account has an NFT claim\r\n    function hasClaim(address _to) internal view returns (bool) {\r\n        return !_stakerInfoMap[_to].claimedNFT && _stakerInfoMap[_to].amount > whaleThreshold;\r\n    }\r\n\r\n    function getStakedBalance() public view returns (uint256) {\r\n        return _stakerInfoMap[_msgSender()].amount;\r\n    }\r\n\r\n    function getStakedBalanceForAddress(address staker) public view returns (uint256) {\r\n        return _stakerInfoMap[staker].amount;\r\n    }\r\n}","ABI":"[{\"inputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"}],\"name\":\"Claim\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"}],\"name\":\"GenesisUnlocked\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"}],\"name\":\"Lock\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"staker\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"RemoveStake\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"staker\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"Stake\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"}],\"name\":\"Unlock\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"claim\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"flipLock\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getStakedBalance\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"staker\",\"type\":\"address\"}],\"name\":\"getStakedBalanceForAddress\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getStakingContractAddress\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_stakingContractAddress\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_xRIOContractAddress\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_rioContractAddress\",\"type\":\"address\"}],\"name\":\"init\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"locked\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"networkGenesis\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"setNetworkGenesis\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_rioAddress\",\"type\":\"address\"}],\"name\":\"setRIOToken\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"a\",\"type\":\"address\"}],\"name\":\"setRealioNFTContract\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"a\",\"type\":\"address\"}],\"name\":\"setStakingContractAddress\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"setWhaleThreshold\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_xrioAddress\",\"type\":\"address\"}],\"name\":\"setxRIOToken\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"stake\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"stakedSupply\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"whaleThreshold\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"}]","ContractName":"Genesis","CompilerVersion":"v0.8.10+commit.fc410830","OptimizationUsed":"0","Runs":"200","ConstructorArguments":"","EVMVersion":"Default","Library":"","LicenseType":"MIT","Proxy":"0","Implementation":"","SwarmSource":"ipfs://004949dacd20924c9df77327ea1e537107eb94f3a596891c239b9946314b3032"}]}