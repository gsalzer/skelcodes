{"status":"1","message":"OK","result":[{"SourceCode":"// File: contracts\\SmartTreasuryV3_1.sol\r\n// SPDX-License-Identifier: MIT\r\n\r\npragma solidity ^0.6.0;\r\n\r\n///////////////////////////////////////////////////////////////////////////\r\n//     __/|      \r\n//  __/ //  /|   This smart contract is part of Mover infrastructure\r\n// |/  //_///    https://viamover.com\r\n//    |_/ //\r\n//       |/\r\n///////////////////////////////////////////////////////////////////////////\r\n\r\n\r\n/**\r\n * @dev Wrappers over Solidity's arithmetic operations with added overflow\r\n * checks.\r\n *\r\n * Arithmetic operations in Solidity wrap on overflow. This can easily result\r\n * in bugs, because programmers usually assume that an overflow raises an\r\n * error, which is the standard behavior in high level programming languages.\r\n * `SafeMath` restores this intuition by reverting the transaction when an\r\n * operation overflows.\r\n *\r\n * Using this library instead of the unchecked operations eliminates an entire\r\n * class of bugs, so it's recommended to use it always.\r\n */\r\nlibrary SafeMathUpgradeable {\r\n    /**\r\n     * @dev Returns the addition of two unsigned integers, reverting on\r\n     * overflow.\r\n     *\r\n     * Counterpart to Solidity's `+` operator.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - Addition cannot overflow.\r\n     */\r\n    function add(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        uint256 c = a + b;\r\n        require(c >= a, \"SafeMath: addition overflow\");\r\n\r\n        return c;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the subtraction of two unsigned integers, reverting on\r\n     * overflow (when the result is negative).\r\n     *\r\n     * Counterpart to Solidity's `-` operator.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - Subtraction cannot overflow.\r\n     */\r\n    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        return sub(a, b, \"SafeMath: subtraction overflow\");\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the subtraction of two unsigned integers, reverting with custom message on\r\n     * overflow (when the result is negative).\r\n     *\r\n     * Counterpart to Solidity's `-` operator.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - Subtraction cannot overflow.\r\n     */\r\n    function sub(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\r\n        require(b <= a, errorMessage);\r\n        uint256 c = a - b;\r\n\r\n        return c;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the multiplication of two unsigned integers, reverting on\r\n     * overflow.\r\n     *\r\n     * Counterpart to Solidity's `*` operator.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - Multiplication cannot overflow.\r\n     */\r\n    function mul(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        // Gas optimization: this is cheaper than requiring 'a' not being zero, but the\r\n        // benefit is lost if 'b' is also tested.\r\n        // See: https://github.com/OpenZeppelin/openzeppelin-contracts/pull/522\r\n        if (a == 0) {\r\n            return 0;\r\n        }\r\n\r\n        uint256 c = a * b;\r\n        require(c / a == b, \"SafeMath: multiplication overflow\");\r\n\r\n        return c;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the integer division of two unsigned integers. Reverts on\r\n     * division by zero. The result is rounded towards zero.\r\n     *\r\n     * Counterpart to Solidity's `/` operator. Note: this function uses a\r\n     * `revert` opcode (which leaves remaining gas untouched) while Solidity\r\n     * uses an invalid opcode to revert (consuming all remaining gas).\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - The divisor cannot be zero.\r\n     */\r\n    function div(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        return div(a, b, \"SafeMath: division by zero\");\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the integer division of two unsigned integers. Reverts with custom message on\r\n     * division by zero. The result is rounded towards zero.\r\n     *\r\n     * Counterpart to Solidity's `/` operator. Note: this function uses a\r\n     * `revert` opcode (which leaves remaining gas untouched) while Solidity\r\n     * uses an invalid opcode to revert (consuming all remaining gas).\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - The divisor cannot be zero.\r\n     */\r\n    function div(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\r\n        require(b > 0, errorMessage);\r\n        uint256 c = a / b;\r\n        // assert(a == b * c + a % b); // There is no case in which this doesn't hold\r\n\r\n        return c;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\r\n     * Reverts when dividing by zero.\r\n     *\r\n     * Counterpart to Solidity's `%` operator. This function uses a `revert`\r\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\r\n     * invalid opcode to revert (consuming all remaining gas).\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - The divisor cannot be zero.\r\n     */\r\n    function mod(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        return mod(a, b, \"SafeMath: modulo by zero\");\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\r\n     * Reverts with custom message when dividing by zero.\r\n     *\r\n     * Counterpart to Solidity's `%` operator. This function uses a `revert`\r\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\r\n     * invalid opcode to revert (consuming all remaining gas).\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - The divisor cannot be zero.\r\n     */\r\n    function mod(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\r\n        require(b != 0, errorMessage);\r\n        return a % b;\r\n    }\r\n}\r\n\r\n\r\n/**\r\n * @dev Interface of the ERC20 standard as defined in the EIP.\r\n */\r\ninterface IERC20Upgradeable {\r\n    /**\r\n     * @dev Returns the amount of tokens in existence.\r\n     */\r\n    function totalSupply() external view returns (uint256);\r\n\r\n    /**\r\n     * @dev Returns the amount of tokens owned by `account`.\r\n     */\r\n    function balanceOf(address account) external view returns (uint256);\r\n\r\n    /**\r\n     * @dev Moves `amount` tokens from the caller's account to `recipient`.\r\n     *\r\n     * Returns a boolean value indicating whether the operation succeeded.\r\n     *\r\n     * Emits a {Transfer} event.\r\n     */\r\n    function transfer(address recipient, uint256 amount) external returns (bool);\r\n\r\n    /**\r\n     * @dev Returns the remaining number of tokens that `spender` will be\r\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\r\n     * zero by default.\r\n     *\r\n     * This value changes when {approve} or {transferFrom} are called.\r\n     */\r\n    function allowance(address owner, address spender) external view returns (uint256);\r\n\r\n    /**\r\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\r\n     *\r\n     * Returns a boolean value indicating whether the operation succeeded.\r\n     *\r\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\r\n     * that someone may use both the old and the new allowance by unfortunate\r\n     * transaction ordering. One possible solution to mitigate this race\r\n     * condition is to first reduce the spender's allowance to 0 and set the\r\n     * desired value afterwards:\r\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\r\n     *\r\n     * Emits an {Approval} event.\r\n     */\r\n    function approve(address spender, uint256 amount) external returns (bool);\r\n\r\n    /**\r\n     * @dev Moves `amount` tokens from `sender` to `recipient` using the\r\n     * allowance mechanism. `amount` is then deducted from the caller's\r\n     * allowance.\r\n     *\r\n     * Returns a boolean value indicating whether the operation succeeded.\r\n     *\r\n     * Emits a {Transfer} event.\r\n     */\r\n    function transferFrom(address sender, address recipient, uint256 amount) external returns (bool);\r\n\r\n    /**\r\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\r\n     * another (`to`).\r\n     *\r\n     * Note that `value` may be zero.\r\n     */\r\n    event Transfer(address indexed from, address indexed to, uint256 value);\r\n\r\n    /**\r\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\r\n     * a call to {approve}. `value` is the new allowance.\r\n     */\r\n    event Approval(address indexed owner, address indexed spender, uint256 value);\r\n}\r\n\r\n\r\n/**\r\n * @dev Collection of functions related to the address type\r\n */\r\nlibrary AddressUpgradeable {\r\n    /**\r\n     * @dev Returns true if `account` is a contract.\r\n     *\r\n     * [IMPORTANT]\r\n     * ====\r\n     * It is unsafe to assume that an address for which this function returns\r\n     * false is an externally-owned account (EOA) and not a contract.\r\n     *\r\n     * Among others, `isContract` will return false for the following\r\n     * types of addresses:\r\n     *\r\n     *  - an externally-owned account\r\n     *  - a contract in construction\r\n     *  - an address where a contract will be created\r\n     *  - an address where a contract lived, but was destroyed\r\n     * ====\r\n     */\r\n    function isContract(address account) internal view returns (bool) {\r\n        // This method relies on extcodesize, which returns 0 for contracts in\r\n        // construction, since the code is only stored at the end of the\r\n        // constructor execution.\r\n\r\n        uint256 size;\r\n        // solhint-disable-next-line no-inline-assembly\r\n        assembly { size := extcodesize(account) }\r\n        return size > 0;\r\n    }\r\n\r\n    /**\r\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\r\n     * `recipient`, forwarding all available gas and reverting on errors.\r\n     *\r\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\r\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\r\n     * imposed by `transfer`, making them unable to receive funds via\r\n     * `transfer`. {sendValue} removes this limitation.\r\n     *\r\n     * https://diligence.consensys.net/posts/2019/09/stop-using-soliditys-transfer-now/[Learn more].\r\n     *\r\n     * IMPORTANT: because control is transferred to `recipient`, care must be\r\n     * taken to not create reentrancy vulnerabilities. Consider using\r\n     * {ReentrancyGuard} or the\r\n     * https://solidity.readthedocs.io/en/v0.5.11/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\r\n     */\r\n    function sendValue(address payable recipient, uint256 amount) internal {\r\n        require(address(this).balance >= amount, \"Address: insufficient balance\");\r\n\r\n        // solhint-disable-next-line avoid-low-level-calls, avoid-call-value\r\n        (bool success, ) = recipient.call{ value: amount }(\"\");\r\n        require(success, \"Address: unable to send value, recipient may have reverted\");\r\n    }\r\n\r\n    /**\r\n     * @dev Performs a Solidity function call using a low level `call`. A\r\n     * plain`call` is an unsafe replacement for a function call: use this\r\n     * function instead.\r\n     *\r\n     * If `target` reverts with a revert reason, it is bubbled up by this\r\n     * function (like regular Solidity function calls).\r\n     *\r\n     * Returns the raw returned data. To convert to the expected return value,\r\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - `target` must be a contract.\r\n     * - calling `target` with `data` must not revert.\r\n     *\r\n     * _Available since v3.1._\r\n     */\r\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\r\n      return functionCall(target, data, \"Address: low-level call failed\");\r\n    }\r\n\r\n    /**\r\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\r\n     * `errorMessage` as a fallback revert reason when `target` reverts.\r\n     *\r\n     * _Available since v3.1._\r\n     */\r\n    function functionCall(address target, bytes memory data, string memory errorMessage) internal returns (bytes memory) {\r\n        return functionCallWithValue(target, data, 0, errorMessage);\r\n    }\r\n\r\n    /**\r\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\r\n     * but also transferring `value` wei to `target`.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - the calling contract must have an ETH balance of at least `value`.\r\n     * - the called Solidity function must be `payable`.\r\n     *\r\n     * _Available since v3.1._\r\n     */\r\n    function functionCallWithValue(address target, bytes memory data, uint256 value) internal returns (bytes memory) {\r\n        return functionCallWithValue(target, data, value, \"Address: low-level call with value failed\");\r\n    }\r\n\r\n    /**\r\n     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\r\n     * with `errorMessage` as a fallback revert reason when `target` reverts.\r\n     *\r\n     * _Available since v3.1._\r\n     */\r\n    function functionCallWithValue(address target, bytes memory data, uint256 value, string memory errorMessage) internal returns (bytes memory) {\r\n        require(address(this).balance >= value, \"Address: insufficient balance for call\");\r\n        require(isContract(target), \"Address: call to non-contract\");\r\n\r\n        // solhint-disable-next-line avoid-low-level-calls\r\n        (bool success, bytes memory returndata) = target.call{ value: value }(data);\r\n        return _verifyCallResult(success, returndata, errorMessage);\r\n    }\r\n\r\n    /**\r\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\r\n     * but performing a static call.\r\n     *\r\n     * _Available since v3.3._\r\n     */\r\n    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\r\n        return functionStaticCall(target, data, \"Address: low-level static call failed\");\r\n    }\r\n\r\n    /**\r\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\r\n     * but performing a static call.\r\n     *\r\n     * _Available since v3.3._\r\n     */\r\n    function functionStaticCall(address target, bytes memory data, string memory errorMessage) internal view returns (bytes memory) {\r\n        require(isContract(target), \"Address: static call to non-contract\");\r\n\r\n        // solhint-disable-next-line avoid-low-level-calls\r\n        (bool success, bytes memory returndata) = target.staticcall(data);\r\n        return _verifyCallResult(success, returndata, errorMessage);\r\n    }\r\n\r\n    function _verifyCallResult(bool success, bytes memory returndata, string memory errorMessage) private pure returns(bytes memory) {\r\n        if (success) {\r\n            return returndata;\r\n        } else {\r\n            // Look for revert reason and bubble it up if present\r\n            if (returndata.length > 0) {\r\n                // The easiest way to bubble the revert reason is using memory via assembly\r\n\r\n                // solhint-disable-next-line no-inline-assembly\r\n                assembly {\r\n                    let returndata_size := mload(returndata)\r\n                    revert(add(32, returndata), returndata_size)\r\n                }\r\n            } else {\r\n                revert(errorMessage);\r\n            }\r\n        }\r\n    }\r\n}\r\n\r\n\r\n/**\r\n * @title SafeERC20\r\n * @dev Wrappers around ERC20 operations that throw on failure (when the token\r\n * contract returns false). Tokens that return no value (and instead revert or\r\n * throw on failure) are also supported, non-reverting calls are assumed to be\r\n * successful.\r\n * To use this library you can add a `using SafeERC20 for IERC20;` statement to your contract,\r\n * which allows you to call the safe operations as `token.safeTransfer(...)`, etc.\r\n */\r\nlibrary SafeERC20Upgradeable {\r\n    using SafeMathUpgradeable for uint256;\r\n    using AddressUpgradeable for address;\r\n\r\n    function safeTransfer(IERC20Upgradeable token, address to, uint256 value) internal {\r\n        _callOptionalReturn(token, abi.encodeWithSelector(token.transfer.selector, to, value));\r\n    }\r\n\r\n    function safeTransferFrom(IERC20Upgradeable token, address from, address to, uint256 value) internal {\r\n        _callOptionalReturn(token, abi.encodeWithSelector(token.transferFrom.selector, from, to, value));\r\n    }\r\n\r\n    /**\r\n     * @dev Deprecated. This function has issues similar to the ones found in\r\n     * {IERC20-approve}, and its usage is discouraged.\r\n     *\r\n     * Whenever possible, use {safeIncreaseAllowance} and\r\n     * {safeDecreaseAllowance} instead.\r\n     */\r\n    function safeApprove(IERC20Upgradeable token, address spender, uint256 value) internal {\r\n        // safeApprove should only be called when setting an initial allowance,\r\n        // or when resetting it to zero. To increase and decrease it, use\r\n        // 'safeIncreaseAllowance' and 'safeDecreaseAllowance'\r\n        // solhint-disable-next-line max-line-length\r\n        require((value == 0) || (token.allowance(address(this), spender) == 0),\r\n            \"SafeERC20: approve from non-zero to non-zero allowance\"\r\n        );\r\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, value));\r\n    }\r\n\r\n    function safeIncreaseAllowance(IERC20Upgradeable token, address spender, uint256 value) internal {\r\n        uint256 newAllowance = token.allowance(address(this), spender).add(value);\r\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));\r\n    }\r\n\r\n    function safeDecreaseAllowance(IERC20Upgradeable token, address spender, uint256 value) internal {\r\n        uint256 newAllowance = token.allowance(address(this), spender).sub(value, \"SafeERC20: decreased allowance below zero\");\r\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));\r\n    }\r\n\r\n    /**\r\n     * @dev Imitates a Solidity high-level call (i.e. a regular function call to a contract), relaxing the requirement\r\n     * on the return value: the return value is optional (but if data is returned, it must not be false).\r\n     * @param token The token targeted by the call.\r\n     * @param data The call data (encoded using abi.encode or one of its variants).\r\n     */\r\n    function _callOptionalReturn(IERC20Upgradeable token, bytes memory data) private {\r\n        // We need to perform a low level call here, to bypass Solidity's return data size checking mechanism, since\r\n        // we're implementing it ourselves. We use {Address.functionCall} to perform this call, which verifies that\r\n        // the target address contains contract code and also asserts for success in the low-level call.\r\n\r\n        bytes memory returndata = address(token).functionCall(data, \"SafeERC20: low-level call failed\");\r\n        if (returndata.length > 0) { // Return data is optional\r\n            // solhint-disable-next-line max-line-length\r\n            require(abi.decode(returndata, (bool)), \"SafeERC20: ERC20 operation did not succeed\");\r\n        }\r\n    }\r\n}\r\n\r\n\r\n/**\r\n * @dev Library for managing\r\n * https://en.wikipedia.org/wiki/Set_(abstract_data_type)[sets] of primitive\r\n * types.\r\n *\r\n * Sets have the following properties:\r\n *\r\n * - Elements are added, removed, and checked for existence in constant time\r\n * (O(1)).\r\n * - Elements are enumerated in O(n). No guarantees are made on the ordering.\r\n *\r\n * ```\r\n * contract Example {\r\n *     // Add the library methods\r\n *     using EnumerableSet for EnumerableSet.AddressSet;\r\n *\r\n *     // Declare a set state variable\r\n *     EnumerableSet.AddressSet private mySet;\r\n * }\r\n * ```\r\n *\r\n * As of v3.3.0, sets of type `bytes32` (`Bytes32Set`), `address` (`AddressSet`)\r\n * and `uint256` (`UintSet`) are supported.\r\n */\r\nlibrary EnumerableSetUpgradeable {\r\n    // To implement this library for multiple types with as little code\r\n    // repetition as possible, we write it in terms of a generic Set type with\r\n    // bytes32 values.\r\n    // The Set implementation uses private functions, and user-facing\r\n    // implementations (such as AddressSet) are just wrappers around the\r\n    // underlying Set.\r\n    // This means that we can only create new EnumerableSets for types that fit\r\n    // in bytes32.\r\n\r\n    struct Set {\r\n        // Storage of set values\r\n        bytes32[] _values;\r\n\r\n        // Position of the value in the `values` array, plus 1 because index 0\r\n        // means a value is not in the set.\r\n        mapping (bytes32 => uint256) _indexes;\r\n    }\r\n\r\n    /**\r\n     * @dev Add a value to a set. O(1).\r\n     *\r\n     * Returns true if the value was added to the set, that is if it was not\r\n     * already present.\r\n     */\r\n    function _add(Set storage set, bytes32 value) private returns (bool) {\r\n        if (!_contains(set, value)) {\r\n            set._values.push(value);\r\n            // The value is stored at length-1, but we add 1 to all indexes\r\n            // and use 0 as a sentinel value\r\n            set._indexes[value] = set._values.length;\r\n            return true;\r\n        } else {\r\n            return false;\r\n        }\r\n    }\r\n\r\n    /**\r\n     * @dev Removes a value from a set. O(1).\r\n     *\r\n     * Returns true if the value was removed from the set, that is if it was\r\n     * present.\r\n     */\r\n    function _remove(Set storage set, bytes32 value) private returns (bool) {\r\n        // We read and store the value's index to prevent multiple reads from the same storage slot\r\n        uint256 valueIndex = set._indexes[value];\r\n\r\n        if (valueIndex != 0) { // Equivalent to contains(set, value)\r\n            // To delete an element from the _values array in O(1), we swap the element to delete with the last one in\r\n            // the array, and then remove the last element (sometimes called as 'swap and pop').\r\n            // This modifies the order of the array, as noted in {at}.\r\n\r\n            uint256 toDeleteIndex = valueIndex - 1;\r\n            uint256 lastIndex = set._values.length - 1;\r\n\r\n            // When the value to delete is the last one, the swap operation is unnecessary. However, since this occurs\r\n            // so rarely, we still do the swap anyway to avoid the gas cost of adding an 'if' statement.\r\n\r\n            bytes32 lastvalue = set._values[lastIndex];\r\n\r\n            // Move the last value to the index where the value to delete is\r\n            set._values[toDeleteIndex] = lastvalue;\r\n            // Update the index for the moved value\r\n            set._indexes[lastvalue] = toDeleteIndex + 1; // All indexes are 1-based\r\n\r\n            // Delete the slot where the moved value was stored\r\n            set._values.pop();\r\n\r\n            // Delete the index for the deleted slot\r\n            delete set._indexes[value];\r\n\r\n            return true;\r\n        } else {\r\n            return false;\r\n        }\r\n    }\r\n\r\n    /**\r\n     * @dev Returns true if the value is in the set. O(1).\r\n     */\r\n    function _contains(Set storage set, bytes32 value) private view returns (bool) {\r\n        return set._indexes[value] != 0;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the number of values on the set. O(1).\r\n     */\r\n    function _length(Set storage set) private view returns (uint256) {\r\n        return set._values.length;\r\n    }\r\n\r\n   /**\r\n    * @dev Returns the value stored at position `index` in the set. O(1).\r\n    *\r\n    * Note that there are no guarantees on the ordering of values inside the\r\n    * array, and it may change when more values are added or removed.\r\n    *\r\n    * Requirements:\r\n    *\r\n    * - `index` must be strictly less than {length}.\r\n    */\r\n    function _at(Set storage set, uint256 index) private view returns (bytes32) {\r\n        require(set._values.length > index, \"EnumerableSet: index out of bounds\");\r\n        return set._values[index];\r\n    }\r\n\r\n    // Bytes32Set\r\n\r\n    struct Bytes32Set {\r\n        Set _inner;\r\n    }\r\n\r\n    /**\r\n     * @dev Add a value to a set. O(1).\r\n     *\r\n     * Returns true if the value was added to the set, that is if it was not\r\n     * already present.\r\n     */\r\n    function add(Bytes32Set storage set, bytes32 value) internal returns (bool) {\r\n        return _add(set._inner, value);\r\n    }\r\n\r\n    /**\r\n     * @dev Removes a value from a set. O(1).\r\n     *\r\n     * Returns true if the value was removed from the set, that is if it was\r\n     * present.\r\n     */\r\n    function remove(Bytes32Set storage set, bytes32 value) internal returns (bool) {\r\n        return _remove(set._inner, value);\r\n    }\r\n\r\n    /**\r\n     * @dev Returns true if the value is in the set. O(1).\r\n     */\r\n    function contains(Bytes32Set storage set, bytes32 value) internal view returns (bool) {\r\n        return _contains(set._inner, value);\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the number of values in the set. O(1).\r\n     */\r\n    function length(Bytes32Set storage set) internal view returns (uint256) {\r\n        return _length(set._inner);\r\n    }\r\n\r\n   /**\r\n    * @dev Returns the value stored at position `index` in the set. O(1).\r\n    *\r\n    * Note that there are no guarantees on the ordering of values inside the\r\n    * array, and it may change when more values are added or removed.\r\n    *\r\n    * Requirements:\r\n    *\r\n    * - `index` must be strictly less than {length}.\r\n    */\r\n    function at(Bytes32Set storage set, uint256 index) internal view returns (bytes32) {\r\n        return _at(set._inner, index);\r\n    }\r\n\r\n    // AddressSet\r\n\r\n    struct AddressSet {\r\n        Set _inner;\r\n    }\r\n\r\n    /**\r\n     * @dev Add a value to a set. O(1).\r\n     *\r\n     * Returns true if the value was added to the set, that is if it was not\r\n     * already present.\r\n     */\r\n    function add(AddressSet storage set, address value) internal returns (bool) {\r\n        return _add(set._inner, bytes32(uint256(value)));\r\n    }\r\n\r\n    /**\r\n     * @dev Removes a value from a set. O(1).\r\n     *\r\n     * Returns true if the value was removed from the set, that is if it was\r\n     * present.\r\n     */\r\n    function remove(AddressSet storage set, address value) internal returns (bool) {\r\n        return _remove(set._inner, bytes32(uint256(value)));\r\n    }\r\n\r\n    /**\r\n     * @dev Returns true if the value is in the set. O(1).\r\n     */\r\n    function contains(AddressSet storage set, address value) internal view returns (bool) {\r\n        return _contains(set._inner, bytes32(uint256(value)));\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the number of values in the set. O(1).\r\n     */\r\n    function length(AddressSet storage set) internal view returns (uint256) {\r\n        return _length(set._inner);\r\n    }\r\n\r\n   /**\r\n    * @dev Returns the value stored at position `index` in the set. O(1).\r\n    *\r\n    * Note that there are no guarantees on the ordering of values inside the\r\n    * array, and it may change when more values are added or removed.\r\n    *\r\n    * Requirements:\r\n    *\r\n    * - `index` must be strictly less than {length}.\r\n    */\r\n    function at(AddressSet storage set, uint256 index) internal view returns (address) {\r\n        return address(uint256(_at(set._inner, index)));\r\n    }\r\n\r\n\r\n    // UintSet\r\n\r\n    struct UintSet {\r\n        Set _inner;\r\n    }\r\n\r\n    /**\r\n     * @dev Add a value to a set. O(1).\r\n     *\r\n     * Returns true if the value was added to the set, that is if it was not\r\n     * already present.\r\n     */\r\n    function add(UintSet storage set, uint256 value) internal returns (bool) {\r\n        return _add(set._inner, bytes32(value));\r\n    }\r\n\r\n    /**\r\n     * @dev Removes a value from a set. O(1).\r\n     *\r\n     * Returns true if the value was removed from the set, that is if it was\r\n     * present.\r\n     */\r\n    function remove(UintSet storage set, uint256 value) internal returns (bool) {\r\n        return _remove(set._inner, bytes32(value));\r\n    }\r\n\r\n    /**\r\n     * @dev Returns true if the value is in the set. O(1).\r\n     */\r\n    function contains(UintSet storage set, uint256 value) internal view returns (bool) {\r\n        return _contains(set._inner, bytes32(value));\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the number of values on the set. O(1).\r\n     */\r\n    function length(UintSet storage set) internal view returns (uint256) {\r\n        return _length(set._inner);\r\n    }\r\n\r\n   /**\r\n    * @dev Returns the value stored at position `index` in the set. O(1).\r\n    *\r\n    * Note that there are no guarantees on the ordering of values inside the\r\n    * array, and it may change when more values are added or removed.\r\n    *\r\n    * Requirements:\r\n    *\r\n    * - `index` must be strictly less than {length}.\r\n    */\r\n    function at(UintSet storage set, uint256 index) internal view returns (uint256) {\r\n        return uint256(_at(set._inner, index));\r\n    }\r\n}\r\n\r\n\r\n/**\r\n * @dev This is a base contract to aid in writing upgradeable contracts, or any kind of contract that will be deployed\r\n * behind a proxy. Since a proxied contract can't have a constructor, it's common to move constructor logic to an\r\n * external initializer function, usually called `initialize`. It then becomes necessary to protect this initializer\r\n * function so it can only be called once. The {initializer} modifier provided by this contract will have this effect.\r\n * \r\n * TIP: To avoid leaving the proxy in an uninitialized state, the initializer function should be called as early as\r\n * possible by providing the encoded function call as the `_data` argument to {UpgradeableProxy-constructor}.\r\n * \r\n * CAUTION: When used with inheritance, manual care must be taken to not invoke a parent initializer twice, or to ensure\r\n * that all initializers are idempotent. This is not verified automatically as constructors are by Solidity.\r\n */\r\nabstract contract Initializable {\r\n\r\n    /**\r\n     * @dev Indicates that the contract has been initialized.\r\n     */\r\n    bool private _initialized;\r\n\r\n    /**\r\n     * @dev Indicates that the contract is in the process of being initialized.\r\n     */\r\n    bool private _initializing;\r\n\r\n    /**\r\n     * @dev Modifier to protect an initializer function from being invoked twice.\r\n     */\r\n    modifier initializer() {\r\n        require(_initializing || _isConstructor() || !_initialized, \"Initializable: contract is already initialized\");\r\n\r\n        bool isTopLevelCall = !_initializing;\r\n        if (isTopLevelCall) {\r\n            _initializing = true;\r\n            _initialized = true;\r\n        }\r\n\r\n        _;\r\n\r\n        if (isTopLevelCall) {\r\n            _initializing = false;\r\n        }\r\n    }\r\n\r\n    /// @dev Returns true if and only if the function is running in the constructor\r\n    function _isConstructor() private view returns (bool) {\r\n        // extcodesize checks the size of the code stored in an address, and\r\n        // address returns the current address. Since the code is still not\r\n        // deployed when running a constructor, any checks on its code size will\r\n        // yield zero, making it an effective way to detect if a contract is\r\n        // under construction or not.\r\n        address self = address(this);\r\n        uint256 cs;\r\n        // solhint-disable-next-line no-inline-assembly\r\n        assembly { cs := extcodesize(self) }\r\n        return cs == 0;\r\n    }\r\n}\r\n\r\n\r\n/*\r\n * @dev Provides information about the current execution context, including the\r\n * sender of the transaction and its data. While these are generally available\r\n * via msg.sender and msg.data, they should not be accessed in such a direct\r\n * manner, since when dealing with GSN meta-transactions the account sending and\r\n * paying for execution may not be the actual sender (as far as an application\r\n * is concerned).\r\n *\r\n * This contract is only required for intermediate, library-like contracts.\r\n */\r\nabstract contract ContextUpgradeable is Initializable {\r\n    function __Context_init() internal initializer {\r\n        __Context_init_unchained();\r\n    }\r\n\r\n    function __Context_init_unchained() internal initializer {\r\n    }\r\n    function _msgSender() internal view virtual returns (address payable) {\r\n        return msg.sender;\r\n    }\r\n\r\n    function _msgData() internal view virtual returns (bytes memory) {\r\n        this; // silence state mutability warning without generating bytecode - see https://github.com/ethereum/solidity/issues/2691\r\n        return msg.data;\r\n    }\r\n    uint256[50] private __gap;\r\n}\r\n\r\n\r\n/**\r\n * @dev Contract module that allows children to implement role-based access\r\n * control mechanisms.\r\n *\r\n * Roles are referred to by their `bytes32` identifier. These should be exposed\r\n * in the external API and be unique. The best way to achieve this is by\r\n * using `public constant` hash digests:\r\n *\r\n * ```\r\n * bytes32 public constant MY_ROLE = keccak256(\"MY_ROLE\");\r\n * ```\r\n *\r\n * Roles can be used to represent a set of permissions. To restrict access to a\r\n * function call, use {hasRole}:\r\n *\r\n * ```\r\n * function foo() public {\r\n *     require(hasRole(MY_ROLE, msg.sender));\r\n *     ...\r\n * }\r\n * ```\r\n *\r\n * Roles can be granted and revoked dynamically via the {grantRole} and\r\n * {revokeRole} functions. Each role has an associated admin role, and only\r\n * accounts that have a role's admin role can call {grantRole} and {revokeRole}.\r\n *\r\n * By default, the admin role for all roles is `DEFAULT_ADMIN_ROLE`, which means\r\n * that only accounts with this role will be able to grant or revoke other\r\n * roles. More complex role relationships can be created by using\r\n * {_setRoleAdmin}.\r\n *\r\n * WARNING: The `DEFAULT_ADMIN_ROLE` is also its own admin: it has permission to\r\n * grant and revoke this role. Extra precautions should be taken to secure\r\n * accounts that have been granted it.\r\n */\r\nabstract contract AccessControlUpgradeable is Initializable, ContextUpgradeable {\r\n    function __AccessControl_init() internal initializer {\r\n        __Context_init_unchained();\r\n        __AccessControl_init_unchained();\r\n    }\r\n\r\n    function __AccessControl_init_unchained() internal initializer {\r\n    }\r\n    using EnumerableSetUpgradeable for EnumerableSetUpgradeable.AddressSet;\r\n    using AddressUpgradeable for address;\r\n\r\n    struct RoleData {\r\n        EnumerableSetUpgradeable.AddressSet members;\r\n        bytes32 adminRole;\r\n    }\r\n\r\n    mapping (bytes32 => RoleData) private _roles;\r\n\r\n    bytes32 public constant DEFAULT_ADMIN_ROLE = 0x00;\r\n\r\n    /**\r\n     * @dev Emitted when `newAdminRole` is set as ``role``'s admin role, replacing `previousAdminRole`\r\n     *\r\n     * `DEFAULT_ADMIN_ROLE` is the starting admin for all roles, despite\r\n     * {RoleAdminChanged} not being emitted signaling this.\r\n     *\r\n     * _Available since v3.1._\r\n     */\r\n    event RoleAdminChanged(bytes32 indexed role, bytes32 indexed previousAdminRole, bytes32 indexed newAdminRole);\r\n\r\n    /**\r\n     * @dev Emitted when `account` is granted `role`.\r\n     *\r\n     * `sender` is the account that originated the contract call, an admin role\r\n     * bearer except when using {_setupRole}.\r\n     */\r\n    event RoleGranted(bytes32 indexed role, address indexed account, address indexed sender);\r\n\r\n    /**\r\n     * @dev Emitted when `account` is revoked `role`.\r\n     *\r\n     * `sender` is the account that originated the contract call:\r\n     *   - if using `revokeRole`, it is the admin role bearer\r\n     *   - if using `renounceRole`, it is the role bearer (i.e. `account`)\r\n     */\r\n    event RoleRevoked(bytes32 indexed role, address indexed account, address indexed sender);\r\n\r\n    /**\r\n     * @dev Returns `true` if `account` has been granted `role`.\r\n     */\r\n    function hasRole(bytes32 role, address account) public view returns (bool) {\r\n        return _roles[role].members.contains(account);\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the number of accounts that have `role`. Can be used\r\n     * together with {getRoleMember} to enumerate all bearers of a role.\r\n     */\r\n    function getRoleMemberCount(bytes32 role) public view returns (uint256) {\r\n        return _roles[role].members.length();\r\n    }\r\n\r\n    /**\r\n     * @dev Returns one of the accounts that have `role`. `index` must be a\r\n     * value between 0 and {getRoleMemberCount}, non-inclusive.\r\n     *\r\n     * Role bearers are not sorted in any particular way, and their ordering may\r\n     * change at any point.\r\n     *\r\n     * WARNING: When using {getRoleMember} and {getRoleMemberCount}, make sure\r\n     * you perform all queries on the same block. See the following\r\n     * https://forum.openzeppelin.com/t/iterating-over-elements-on-enumerableset-in-openzeppelin-contracts/2296[forum post]\r\n     * for more information.\r\n     */\r\n    function getRoleMember(bytes32 role, uint256 index) public view returns (address) {\r\n        return _roles[role].members.at(index);\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the admin role that controls `role`. See {grantRole} and\r\n     * {revokeRole}.\r\n     *\r\n     * To change a role's admin, use {_setRoleAdmin}.\r\n     */\r\n    function getRoleAdmin(bytes32 role) public view returns (bytes32) {\r\n        return _roles[role].adminRole;\r\n    }\r\n\r\n    /**\r\n     * @dev Grants `role` to `account`.\r\n     *\r\n     * If `account` had not been already granted `role`, emits a {RoleGranted}\r\n     * event.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - the caller must have ``role``'s admin role.\r\n     */\r\n    function grantRole(bytes32 role, address account) public virtual {\r\n        require(hasRole(_roles[role].adminRole, _msgSender()), \"AccessControl: sender must be an admin to grant\");\r\n\r\n        _grantRole(role, account);\r\n    }\r\n\r\n    /**\r\n     * @dev Revokes `role` from `account`.\r\n     *\r\n     * If `account` had been granted `role`, emits a {RoleRevoked} event.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - the caller must have ``role``'s admin role.\r\n     */\r\n    function revokeRole(bytes32 role, address account) public virtual {\r\n        require(hasRole(_roles[role].adminRole, _msgSender()), \"AccessControl: sender must be an admin to revoke\");\r\n\r\n        _revokeRole(role, account);\r\n    }\r\n\r\n    /**\r\n     * @dev Revokes `role` from the calling account.\r\n     *\r\n     * Roles are often managed via {grantRole} and {revokeRole}: this function's\r\n     * purpose is to provide a mechanism for accounts to lose their privileges\r\n     * if they are compromised (such as when a trusted device is misplaced).\r\n     *\r\n     * If the calling account had been granted `role`, emits a {RoleRevoked}\r\n     * event.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - the caller must be `account`.\r\n     */\r\n    function renounceRole(bytes32 role, address account) public virtual {\r\n        require(account == _msgSender(), \"AccessControl: can only renounce roles for self\");\r\n\r\n        _revokeRole(role, account);\r\n    }\r\n\r\n    /**\r\n     * @dev Grants `role` to `account`.\r\n     *\r\n     * If `account` had not been already granted `role`, emits a {RoleGranted}\r\n     * event. Note that unlike {grantRole}, this function doesn't perform any\r\n     * checks on the calling account.\r\n     *\r\n     * [WARNING]\r\n     * ====\r\n     * This function should only be called from the constructor when setting\r\n     * up the initial roles for the system.\r\n     *\r\n     * Using this function in any other way is effectively circumventing the admin\r\n     * system imposed by {AccessControl}.\r\n     * ====\r\n     */\r\n    function _setupRole(bytes32 role, address account) internal virtual {\r\n        _grantRole(role, account);\r\n    }\r\n\r\n    /**\r\n     * @dev Sets `adminRole` as ``role``'s admin role.\r\n     *\r\n     * Emits a {RoleAdminChanged} event.\r\n     */\r\n    function _setRoleAdmin(bytes32 role, bytes32 adminRole) internal virtual {\r\n        emit RoleAdminChanged(role, _roles[role].adminRole, adminRole);\r\n        _roles[role].adminRole = adminRole;\r\n    }\r\n\r\n    function _grantRole(bytes32 role, address account) private {\r\n        if (_roles[role].members.add(account)) {\r\n            emit RoleGranted(role, account, _msgSender());\r\n        }\r\n    }\r\n\r\n    function _revokeRole(bytes32 role, address account) private {\r\n        if (_roles[role].members.remove(account)) {\r\n            emit RoleRevoked(role, account, _msgSender());\r\n        }\r\n    }\r\n    uint256[49] private __gap;\r\n}\r\n\r\n\r\n/**\r\n * @dev Implementation of the {IERC20} interface.\r\n *\r\n * This implementation is agnostic to the way tokens are created. This means\r\n * that a supply mechanism has to be added in a derived contract using {_mint}.\r\n * For a generic mechanism see {ERC20PresetMinterPauser}.\r\n *\r\n * TIP: For a detailed writeup see our guide\r\n * https://forum.zeppelin.solutions/t/how-to-implement-erc20-supply-mechanisms/226[How\r\n * to implement supply mechanisms].\r\n *\r\n * We have followed general OpenZeppelin guidelines: functions revert instead\r\n * of returning `false` on failure. This behavior is nonetheless conventional\r\n * and does not conflict with the expectations of ERC20 applications.\r\n *\r\n * Additionally, an {Approval} event is emitted on calls to {transferFrom}.\r\n * This allows applications to reconstruct the allowance for all accounts just\r\n * by listening to said events. Other implementations of the EIP may not emit\r\n * these events, as it isn't required by the specification.\r\n *\r\n * Finally, the non-standard {decreaseAllowance} and {increaseAllowance}\r\n * functions have been added to mitigate the well-known issues around setting\r\n * allowances. See {IERC20-approve}.\r\n */\r\ncontract ERC20UpgradeableDecimals is Initializable, ContextUpgradeable, IERC20Upgradeable {\r\n    using SafeMathUpgradeable for uint256;\r\n\r\n    mapping (address => uint256) private _balances;\r\n\r\n    mapping (address => mapping (address => uint256)) private _allowances;\r\n\r\n    uint256 private _totalSupply;\r\n\r\n    string private _name;\r\n    string private _symbol;\r\n    uint8 private _decimals;\r\n\r\n    /**\r\n     * @dev Sets the values for {name} and {symbol}, initializes {decimals} with\r\n     * a default value of 18.\r\n     *\r\n     * To select a different value for {decimals}, use {_setupDecimals}.\r\n     *\r\n     * All three of these values are immutable: they can only be set once during\r\n     * construction.\r\n     */\r\n    function __ERC20_init(string memory name_, string memory symbol_, uint8 decimals_) internal initializer {\r\n        __Context_init_unchained();\r\n        __ERC20_init_unchained(name_, symbol_, decimals_);\r\n    }\r\n\r\n    function __ERC20_init_unchained(string memory name_, string memory symbol_, uint8 decimals_) internal initializer {\r\n        _name = name_;\r\n        _symbol = symbol_;\r\n        _decimals = decimals_;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the name of the token.\r\n     */\r\n    function name() public virtual view returns (string memory) {\r\n        return _name;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the symbol of the token, usually a shorter version of the\r\n     * name.\r\n     */\r\n    function symbol() public virtual view returns (string memory) {\r\n        return _symbol;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the number of decimals used to get its user representation.\r\n     * For example, if `decimals` equals `2`, a balance of `505` tokens should\r\n     * be displayed to a user as `5,05` (`505 / 10 ** 2`).\r\n     *\r\n     * Tokens usually opt for a value of 18, imitating the relationship between\r\n     * Ether and Wei. This is the value {ERC20} uses, unless {_setupDecimals} is\r\n     * called.\r\n     *\r\n     * NOTE: This information is only used for _display_ purposes: it in\r\n     * no way affects any of the arithmetic of the contract, including\r\n     * {IERC20-balanceOf} and {IERC20-transfer}.\r\n     */\r\n    function decimals() public view returns (uint8) {\r\n        return _decimals;\r\n    }\r\n\r\n    /**\r\n     * @dev See {IERC20-totalSupply}.\r\n     */\r\n    function totalSupply() public view override returns (uint256) {\r\n        return _totalSupply;\r\n    }\r\n\r\n    /**\r\n     * @dev See {IERC20-balanceOf}.\r\n     */\r\n    function balanceOf(address account) public view override returns (uint256) {\r\n        return _balances[account];\r\n    }\r\n\r\n    /**\r\n     * @dev See {IERC20-transfer}.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - `recipient` cannot be the zero address.\r\n     * - the caller must have a balance of at least `amount`.\r\n     */\r\n    function transfer(address recipient, uint256 amount) public virtual override returns (bool) {\r\n        _transfer(_msgSender(), recipient, amount);\r\n        return true;\r\n    }\r\n\r\n    /**\r\n     * @dev See {IERC20-allowance}.\r\n     */\r\n    function allowance(address owner, address spender) public view virtual override returns (uint256) {\r\n        return _allowances[owner][spender];\r\n    }\r\n\r\n    /**\r\n     * @dev See {IERC20-approve}.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - `spender` cannot be the zero address.\r\n     */\r\n    function approve(address spender, uint256 amount) public virtual override returns (bool) {\r\n        _approve(_msgSender(), spender, amount);\r\n        return true;\r\n    }\r\n\r\n    /**\r\n     * @dev See {IERC20-transferFrom}.\r\n     *\r\n     * Emits an {Approval} event indicating the updated allowance. This is not\r\n     * required by the EIP. See the note at the beginning of {ERC20}.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - `sender` and `recipient` cannot be the zero address.\r\n     * - `sender` must have a balance of at least `amount`.\r\n     * - the caller must have allowance for ``sender``'s tokens of at least\r\n     * `amount`.\r\n     */\r\n    function transferFrom(address sender, address recipient, uint256 amount) public virtual override returns (bool) {\r\n        _transfer(sender, recipient, amount);\r\n        _approve(sender, _msgSender(), _allowances[sender][_msgSender()].sub(amount, \"ERC20: transfer amount exceeds allowance\"));\r\n        return true;\r\n    }\r\n\r\n    /**\r\n     * @dev Atomically increases the allowance granted to `spender` by the caller.\r\n     *\r\n     * This is an alternative to {approve} that can be used as a mitigation for\r\n     * problems described in {IERC20-approve}.\r\n     *\r\n     * Emits an {Approval} event indicating the updated allowance.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - `spender` cannot be the zero address.\r\n     */\r\n    function increaseAllowance(address spender, uint256 addedValue) public virtual returns (bool) {\r\n        _approve(_msgSender(), spender, _allowances[_msgSender()][spender].add(addedValue));\r\n        return true;\r\n    }\r\n\r\n    /**\r\n     * @dev Atomically decreases the allowance granted to `spender` by the caller.\r\n     *\r\n     * This is an alternative to {approve} that can be used as a mitigation for\r\n     * problems described in {IERC20-approve}.\r\n     *\r\n     * Emits an {Approval} event indicating the updated allowance.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - `spender` cannot be the zero address.\r\n     * - `spender` must have allowance for the caller of at least\r\n     * `subtractedValue`.\r\n     */\r\n    function decreaseAllowance(address spender, uint256 subtractedValue) public virtual returns (bool) {\r\n        _approve(_msgSender(), spender, _allowances[_msgSender()][spender].sub(subtractedValue, \"ERC20: decreased allowance below zero\"));\r\n        return true;\r\n    }\r\n\r\n    /**\r\n     * @dev Moves tokens `amount` from `sender` to `recipient`.\r\n     *\r\n     * This is internal function is equivalent to {transfer}, and can be used to\r\n     * e.g. implement automatic token fees, slashing mechanisms, etc.\r\n     *\r\n     * Emits a {Transfer} event.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - `sender` cannot be the zero address.\r\n     * - `recipient` cannot be the zero address.\r\n     * - `sender` must have a balance of at least `amount`.\r\n     */\r\n    function _transfer(address sender, address recipient, uint256 amount) internal virtual {\r\n        require(sender != address(0), \"ERC20: transfer from the zero address\");\r\n        require(recipient != address(0), \"ERC20: transfer to the zero address\");\r\n\r\n        _beforeTokenTransfer(sender, recipient, amount);\r\n\r\n        _balances[sender] = _balances[sender].sub(amount, \"ERC20: transfer amount exceeds balance\");\r\n        _balances[recipient] = _balances[recipient].add(amount);\r\n        emit Transfer(sender, recipient, amount);\r\n    }\r\n\r\n    /** @dev Creates `amount` tokens and assigns them to `account`, increasing\r\n     * the total supply.\r\n     *\r\n     * Emits a {Transfer} event with `from` set to the zero address.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - `to` cannot be the zero address.\r\n     */\r\n    function _mint(address account, uint256 amount) internal virtual {\r\n        require(account != address(0), \"ERC20: mint to the zero address\");\r\n\r\n        _beforeTokenTransfer(address(0), account, amount);\r\n\r\n        _totalSupply = _totalSupply.add(amount);\r\n        _balances[account] = _balances[account].add(amount);\r\n        emit Transfer(address(0), account, amount);\r\n    }\r\n\r\n    /**\r\n     * @dev Destroys `amount` tokens from `account`, reducing the\r\n     * total supply.\r\n     *\r\n     * Emits a {Transfer} event with `to` set to the zero address.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - `account` cannot be the zero address.\r\n     * - `account` must have at least `amount` tokens.\r\n     */\r\n    function _burn(address account, uint256 amount) internal virtual {\r\n        require(account != address(0), \"ERC20: burn from the zero address\");\r\n\r\n        _beforeTokenTransfer(account, address(0), amount);\r\n\r\n        _balances[account] = _balances[account].sub(amount, \"ERC20: burn amount exceeds balance\");\r\n        _totalSupply = _totalSupply.sub(amount);\r\n        emit Transfer(account, address(0), amount);\r\n    }\r\n\r\n    /**\r\n     * @dev Sets `amount` as the allowance of `spender` over the `owner` s tokens.\r\n     *\r\n     * This internal function is equivalent to `approve`, and can be used to\r\n     * e.g. set automatic allowances for certain subsystems, etc.\r\n     *\r\n     * Emits an {Approval} event.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - `owner` cannot be the zero address.\r\n     * - `spender` cannot be the zero address.\r\n     */\r\n    function _approve(address owner, address spender, uint256 amount) internal virtual {\r\n        require(owner != address(0), \"ERC20: approve from the zero address\");\r\n        require(spender != address(0), \"ERC20: approve to the zero address\");\r\n\r\n        _allowances[owner][spender] = amount;\r\n        emit Approval(owner, spender, amount);\r\n    }\r\n\r\n    /**\r\n     * @dev Sets {decimals} to a value other than the default one of 18.\r\n     *\r\n     * WARNING: This function should only be called from the constructor. Most\r\n     * applications that interact with token contracts will not expect\r\n     * {decimals} to ever change, and may work incorrectly if it does.\r\n     */\r\n    function _setupDecimals(uint8 decimals_) internal {\r\n        _decimals = decimals_;\r\n    }\r\n\r\n    /**\r\n     * @dev Hook that is called before any transfer of tokens. This includes\r\n     * minting and burning.\r\n     *\r\n     * Calling conditions:\r\n     *\r\n     * - when `from` and `to` are both non-zero, `amount` of ``from``'s tokens\r\n     * will be to transferred to `to`.\r\n     * - when `from` is zero, `amount` tokens will be minted for `to`.\r\n     * - when `to` is zero, `amount` of ``from``'s tokens will be burned.\r\n     * - `from` and `to` are never both zero.\r\n     *\r\n     * To learn more about hooks, head to xref:ROOT:extending-contracts.adoc#using-hooks[Using Hooks].\r\n     */\r\n    function _beforeTokenTransfer(address from, address to, uint256 amount) internal virtual { }\r\n    uint256[44] private __gap;\r\n}\r\n\r\n\r\n/**\r\n * @dev Extension of {ERC20} that allows token holders to destroy both their own\r\n * tokens and those that they have an allowance for, in a way that can be\r\n * recognized off-chain (via event analysis).\r\n */\r\nabstract contract ERC20BurnableUpgradeableDecimals is Initializable, ContextUpgradeable, ERC20UpgradeableDecimals {\r\n    function __ERC20Burnable_init() internal initializer {\r\n        __Context_init_unchained();\r\n        __ERC20Burnable_init_unchained();\r\n    }\r\n\r\n    function __ERC20Burnable_init_unchained() internal initializer {\r\n    }\r\n    using SafeMathUpgradeable for uint256;\r\n\r\n    /**\r\n     * @dev Destroys `amount` tokens from the caller.\r\n     *\r\n     * See {ERC20-_burn}.\r\n     */\r\n    function burn(uint256 amount) public virtual {\r\n        _burn(_msgSender(), amount);\r\n    }\r\n\r\n    /**\r\n     * @dev Destroys `amount` tokens from `account`, deducting from the caller's\r\n     * allowance.\r\n     *\r\n     * See {ERC20-_burn} and {ERC20-allowance}.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - the caller must have allowance for ``accounts``'s tokens of at least\r\n     * `amount`.\r\n     */\r\n    function burnFrom(address account, uint256 amount) public virtual {\r\n        uint256 decreasedAllowance = allowance(account, _msgSender()).sub(amount, \"ERC20: burn amount exceeds allowance\");\r\n\r\n        _approve(account, _msgSender(), decreasedAllowance);\r\n        _burn(account, amount);\r\n    }\r\n    uint256[50] private __gap;\r\n}\r\n\r\n\r\n/**\r\n * @dev Contract module which allows children to implement an emergency stop\r\n * mechanism that can be triggered by an authorized account.\r\n *\r\n * This module is used through inheritance. It will make available the\r\n * modifiers `whenNotPaused` and `whenPaused`, which can be applied to\r\n * the functions of your contract. Note that they will not be pausable by\r\n * simply including this module, only once the modifiers are put in place.\r\n */\r\nabstract contract PausableUpgradeable is Initializable, ContextUpgradeable {\r\n    /**\r\n     * @dev Emitted when the pause is triggered by `account`.\r\n     */\r\n    event Paused(address account);\r\n\r\n    /**\r\n     * @dev Emitted when the pause is lifted by `account`.\r\n     */\r\n    event Unpaused(address account);\r\n\r\n    bool private _paused;\r\n\r\n    /**\r\n     * @dev Initializes the contract in unpaused state.\r\n     */\r\n    function __Pausable_init() internal initializer {\r\n        __Context_init_unchained();\r\n        __Pausable_init_unchained();\r\n    }\r\n\r\n    function __Pausable_init_unchained() internal initializer {\r\n        _paused = false;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns true if the contract is paused, and false otherwise.\r\n     */\r\n    function paused() public view returns (bool) {\r\n        return _paused;\r\n    }\r\n\r\n    /**\r\n     * @dev Modifier to make a function callable only when the contract is not paused.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - The contract must not be paused.\r\n     */\r\n    modifier whenNotPaused() {\r\n        require(!_paused, \"Pausable: paused\");\r\n        _;\r\n    }\r\n\r\n    /**\r\n     * @dev Modifier to make a function callable only when the contract is paused.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - The contract must be paused.\r\n     */\r\n    modifier whenPaused() {\r\n        require(_paused, \"Pausable: not paused\");\r\n        _;\r\n    }\r\n\r\n    /**\r\n     * @dev Triggers stopped state.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - The contract must not be paused.\r\n     */\r\n    function _pause() internal virtual whenNotPaused {\r\n        _paused = true;\r\n        emit Paused(_msgSender());\r\n    }\r\n\r\n    /**\r\n     * @dev Returns to normal state.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - The contract must be paused.\r\n     */\r\n    function _unpause() internal virtual whenPaused {\r\n        _paused = false;\r\n        emit Unpaused(_msgSender());\r\n    }\r\n    uint256[49] private __gap;\r\n}\r\n\r\n\r\n/**\r\n * @dev ERC20 token with pausable token transfers, minting and burning.\r\n *\r\n * Useful for scenarios such as preventing trades until the end of an evaluation\r\n * period, or having an emergency switch for freezing all token transfers in the\r\n * event of a large bug.\r\n */\r\nabstract contract ERC20PausableUpgradeableDecimals is Initializable, ERC20UpgradeableDecimals, PausableUpgradeable {\r\n    function __ERC20Pausable_init() internal initializer {\r\n        __Context_init_unchained();\r\n        __Pausable_init_unchained();\r\n        __ERC20Pausable_init_unchained();\r\n    }\r\n\r\n    function __ERC20Pausable_init_unchained() internal initializer {\r\n    }\r\n    /**\r\n     * @dev See {ERC20-_beforeTokenTransfer}.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - the contract must not be paused.\r\n     */\r\n    function _beforeTokenTransfer(address from, address to, uint256 amount) internal virtual override {\r\n        super._beforeTokenTransfer(from, to, amount);\r\n\r\n        require(!paused(), \"ERC20Pausable: token transfer while paused\");\r\n    }\r\n    uint256[50] private __gap;\r\n}\r\n\r\n\r\n/**\r\n * @dev {ERC20} token, including:\r\n *\r\n *  - ability for holders to burn (destroy) their tokens\r\n *  - a minter role that allows for token minting (creation)\r\n *  - a pauser role that allows to stop all token transfers\r\n *\r\n * This contract uses {AccessControl} to lock permissioned functions using the\r\n * different roles - head to its documentation for details.\r\n *\r\n * The account that deploys the contract will be granted the minter and pauser\r\n * roles, as well as the default admin role, which will let it grant both minter\r\n * and pauser roles to other accounts.\r\n */\r\ncontract ERC20PresetMinterPauserUpgradeableDecimals is Initializable, ContextUpgradeable, AccessControlUpgradeable, ERC20BurnableUpgradeableDecimals, ERC20PausableUpgradeableDecimals {\r\n    function initialize(string memory name, string memory symbol) public virtual initializer {\r\n        __ERC20PresetMinterPauser_init(name, symbol);\r\n    }\r\n    bytes32 public constant MINTER_ROLE = keccak256(\"MINTER_ROLE\");\r\n    bytes32 public constant PAUSER_ROLE = keccak256(\"PAUSER_ROLE\");\r\n\r\n    /**\r\n     * @dev Grants `DEFAULT_ADMIN_ROLE`, `MINTER_ROLE` and `PAUSER_ROLE` to the\r\n     * account that deploys the contract.\r\n     *\r\n     * See {ERC20-constructor}.\r\n     */\r\n    function __ERC20PresetMinterPauser_init(string memory name, string memory symbol) internal initializer {\r\n        __Context_init_unchained();\r\n        __AccessControl_init_unchained();\r\n        __ERC20_init_unchained(name, symbol, 18);\r\n        __ERC20Burnable_init_unchained();\r\n        __Pausable_init_unchained();\r\n        __ERC20Pausable_init_unchained();\r\n        __ERC20PresetMinterPauser_init_unchained(name, symbol);\r\n    }\r\n\r\n    function __ERC20PresetMinterPauser_init_unchained(string memory name, string memory symbol) internal initializer {\r\n        _setupRole(DEFAULT_ADMIN_ROLE, _msgSender());\r\n\r\n        _setupRole(MINTER_ROLE, _msgSender());\r\n        _setupRole(PAUSER_ROLE, _msgSender());\r\n    }\r\n\r\n    /**\r\n     * @dev Creates `amount` new tokens for `to`.\r\n     *\r\n     * See {ERC20-_mint}.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - the caller must have the `MINTER_ROLE`.\r\n     */\r\n    function mint(address to, uint256 amount) public virtual {\r\n        require(hasRole(MINTER_ROLE, _msgSender()), \"ERC20PresetMinterPauser: must have minter role to mint\");\r\n        _mint(to, amount);\r\n    }\r\n\r\n    /**\r\n     * @dev Pauses all token transfers.\r\n     *\r\n     * See {ERC20Pausable} and {Pausable-_pause}.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - the caller must have the `PAUSER_ROLE`.\r\n     */\r\n    function pause() public virtual {\r\n        require(hasRole(PAUSER_ROLE, _msgSender()), \"ERC20PresetMinterPauser: must have pauser role to pause\");\r\n        _pause();\r\n    }\r\n\r\n    /**\r\n     * @dev Unpauses all token transfers.\r\n     *\r\n     * See {ERC20Pausable} and {Pausable-_unpause}.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - the caller must have the `PAUSER_ROLE`.\r\n     */\r\n    function unpause() public virtual {\r\n        require(hasRole(PAUSER_ROLE, _msgSender()), \"ERC20PresetMinterPauser: must have pauser role to unpause\");\r\n        _unpause();\r\n    }\r\n\r\n    function _beforeTokenTransfer(address from, address to, uint256 amount) internal virtual override(ERC20UpgradeableDecimals, ERC20PausableUpgradeableDecimals) {\r\n        super._beforeTokenTransfer(from, to, amount);\r\n    }\r\n    uint256[50] private __gap;\r\n}\r\n\r\n\r\n/**\r\n * @title Counters\r\n * @author Matt Condon (@shrugs)\r\n * @dev Provides counters that can only be incremented or decremented by one. This can be used e.g. to track the number\r\n * of elements in a mapping, issuing ERC721 ids, or counting request ids.\r\n *\r\n * Include with `using Counters for Counters.Counter;`\r\n * Since it is not possible to overflow a 256 bit integer with increments of one, `increment` can skip the {SafeMath}\r\n * overflow check, thereby saving gas. This does assume however correct usage, in that the underlying `_value` is never\r\n * directly accessed.\r\n */\r\nlibrary CountersUpgradeable {\r\n    using SafeMathUpgradeable for uint256;\r\n\r\n    struct Counter {\r\n        // This variable should never be directly accessed by users of the library: interactions must be restricted to\r\n        // the library's function. As of Solidity v0.5.2, this cannot be enforced, though there is a proposal to add\r\n        // this feature: see https://github.com/ethereum/solidity/issues/4637\r\n        uint256 _value; // default: 0\r\n    }\r\n\r\n    function current(Counter storage counter) internal view returns (uint256) {\r\n        return counter._value;\r\n    }\r\n\r\n    function increment(Counter storage counter) internal {\r\n        // The {SafeMath} overflow check can be skipped here, see the comment at the top\r\n        counter._value += 1;\r\n    }\r\n\r\n    function decrement(Counter storage counter) internal {\r\n        counter._value = counter._value.sub(1);\r\n    }\r\n}\r\n\r\n\r\n/**\r\n * @dev Interface of the ERC20 Permit extension allowing approvals to be made via signatures, as defined in\r\n * https://eips.ethereum.org/EIPS/eip-2612[EIP-2612].\r\n *\r\n * Adds the {permit} method, which can be used to change an account's ERC20 allowance (see {IERC20-allowance}) by\r\n * presenting a message signed by the account. By not relying on `{IERC20-approve}`, the token holder account doesn't\r\n * need to send a transaction, and thus is not required to hold Ether at all.\r\n */\r\ninterface IERC20PermitUpgradeable {\r\n    /**\r\n     * @dev Sets `amount` as the allowance of `spender` over `owner`'s tokens,\r\n     * given `owner`'s signed approval.\r\n     *\r\n     * IMPORTANT: The same issues {IERC20-approve} has related to transaction\r\n     * ordering also apply here.\r\n     *\r\n     * Emits an {Approval} event.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - `spender` cannot be the zero address.\r\n     * - `deadline` must be a timestamp in the future.\r\n     * - `v`, `r` and `s` must be a valid `secp256k1` signature from `owner`\r\n     * over the EIP712-formatted function arguments.\r\n     * - the signature must use ``owner``'s current nonce (see {nonces}).\r\n     *\r\n     * For more information on the signature format, see the\r\n     * https://eips.ethereum.org/EIPS/eip-2612#specification[relevant EIP\r\n     * section].\r\n     */\r\n    function permit(address owner, address spender, uint256 amount, uint256 deadline, uint8 v, bytes32 r, bytes32 s) external;\r\n\r\n    /**\r\n     * @dev Returns the current nonce for `owner`. This value must be\r\n     * included whenever a signature is generated for {permit}.\r\n     *\r\n     * Every successful call to {permit} increases ``owner``'s nonce by one. This\r\n     * prevents a signature from being used multiple times.\r\n     */\r\n    function nonces(address owner) external view returns (uint256);\r\n\r\n    /**\r\n     * @dev Returns the domain separator used in the encoding of the signature for `permit`, as defined by {EIP712}.\r\n     */\r\n    // solhint-disable-next-line func-name-mixedcase\r\n    function DOMAIN_SEPARATOR() external view returns (bytes32);\r\n}\r\n\r\n\r\n/**\r\n * @dev https://eips.ethereum.org/EIPS/eip-712[EIP 712] is a standard for hashing and signing of typed structured data.\r\n *\r\n * The encoding specified in the EIP is very generic, and such a generic implementation in Solidity is not feasible,\r\n * thus this contract does not implement the encoding itself. Protocols need to implement the type-specific encoding\r\n * they need in their contracts using a combination of `abi.encode` and `keccak256`.\r\n *\r\n * This contract implements the EIP 712 domain separator ({_domainSeparatorV4}) that is used as part of the encoding\r\n * scheme, and the final step of the encoding to obtain the message digest that is then signed via ECDSA\r\n * ({_hashTypedDataV4}).\r\n *\r\n * The implementation of the domain separator was designed to be as efficient as possible while still properly updating\r\n * the chain id to protect against replay attacks on an eventual fork of the chain.\r\n *\r\n * NOTE: This contract implements the version of the encoding known as \"v4\", as implemented by the JSON RPC method\r\n * https://docs.metamask.io/guide/signing-data.html[`eth_signTypedDataV4` in MetaMask].\r\n */\r\nabstract contract EIP712Upgradeable is Initializable {\r\n    /* solhint-disable var-name-mixedcase */\r\n    bytes32 private _HASHED_NAME;\r\n    bytes32 private _HASHED_VERSION;\r\n    bytes32 private constant _TYPE_HASH = keccak256(\"EIP712Domain(string name,string version,uint256 chainId,address verifyingContract)\");\r\n    /* solhint-enable var-name-mixedcase */\r\n\r\n    /**\r\n     * @dev Initializes the domain separator and parameter caches.\r\n     *\r\n     * The meaning of `name` and `version` is specified in\r\n     * https://eips.ethereum.org/EIPS/eip-712#definition-of-domainseparator[EIP 712]:\r\n     *\r\n     * - `name`: the user readable name of the signing domain, i.e. the name of the DApp or the protocol.\r\n     * - `version`: the current major version of the signing domain.\r\n     *\r\n     * NOTE: These parameters cannot be changed except through a xref:learn::upgrading-smart-contracts.adoc[smart\r\n     * contract upgrade].\r\n     */\r\n    function __EIP712_init(string memory name, string memory version) internal initializer {\r\n        __EIP712_init_unchained(name, version);\r\n    }\r\n\r\n    function __EIP712_init_unchained(string memory name, string memory version) internal initializer {\r\n        bytes32 hashedName = keccak256(bytes(name));\r\n        bytes32 hashedVersion = keccak256(bytes(version));\r\n        _HASHED_NAME = hashedName;\r\n        _HASHED_VERSION = hashedVersion;\r\n    }\r\n\r\n    function _EIP712SetNameHash(string memory name) internal {\r\n        bytes32 hashedName = keccak256(bytes(name));\r\n        _HASHED_NAME = hashedName;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the domain separator for the current chain.\r\n     */\r\n    function _domainSeparatorV4() internal view returns (bytes32) {\r\n        return _buildDomainSeparator(_TYPE_HASH, _EIP712NameHash(), _EIP712VersionHash());\r\n    }\r\n\r\n    function _buildDomainSeparator(bytes32 typeHash, bytes32 name, bytes32 version) private view returns (bytes32) {\r\n        return keccak256(\r\n            abi.encode(\r\n                typeHash,\r\n                name,\r\n                version,\r\n                _getChainId(),\r\n                address(this)\r\n            )\r\n        );\r\n    }\r\n\r\n    /**\r\n     * @dev Given an already https://eips.ethereum.org/EIPS/eip-712#definition-of-hashstruct[hashed struct], this\r\n     * function returns the hash of the fully encoded EIP712 message for this domain.\r\n     *\r\n     * This hash can be used together with {ECDSA-recover} to obtain the signer of a message. For example:\r\n     *\r\n     * ```solidity\r\n     * bytes32 digest = _hashTypedDataV4(keccak256(abi.encode(\r\n     *     keccak256(\"Mail(address to,string contents)\"),\r\n     *     mailTo,\r\n     *     keccak256(bytes(mailContents))\r\n     * )));\r\n     * address signer = ECDSA.recover(digest, signature);\r\n     * ```\r\n     */\r\n    function _hashTypedDataV4(bytes32 structHash) internal view returns (bytes32) {\r\n        return keccak256(abi.encodePacked(\"\\x19\\x01\", _domainSeparatorV4(), structHash));\r\n    }\r\n\r\n    function _getChainId() private view returns (uint256 chainId) {\r\n        this; // silence state mutability warning without generating bytecode - see https://github.com/ethereum/solidity/issues/2691\r\n        // solhint-disable-next-line no-inline-assembly\r\n        assembly {\r\n            chainId := chainid()\r\n        }\r\n    }\r\n\r\n    /**\r\n     * @dev The hash of the name parameter for the EIP712 domain.\r\n     *\r\n     * NOTE: This function reads from storage by default, but can be redefined to return a constant value if gas costs\r\n     * are a concern.\r\n     */\r\n    function _EIP712NameHash() internal virtual view returns (bytes32) {\r\n        return _HASHED_NAME;\r\n    }\r\n\r\n    /**\r\n     * @dev The hash of the version parameter for the EIP712 domain.\r\n     *\r\n     * NOTE: This function reads from storage by default, but can be redefined to return a constant value if gas costs\r\n     * are a concern.\r\n     */\r\n    function _EIP712VersionHash() internal virtual view returns (bytes32) {\r\n        return _HASHED_VERSION;\r\n    }\r\n    uint256[50] private __gap;\r\n}\r\n\r\n\r\n/**\r\n * @dev Implementation of the ERC20 Permit extension allowing approvals to be made via signatures, as defined in\r\n * https://eips.ethereum.org/EIPS/eip-2612[EIP-2612].\r\n *\r\n * Adds the {permit} method, which can be used to change an account's ERC20 allowance (see {IERC20-allowance}) by\r\n * presenting a message signed by the account. By not relying on `{IERC20-approve}`, the token holder account doesn't\r\n * need to send a transaction, and thus is not required to hold Ether at all.\r\n */\r\nabstract contract ERC20PermitUpgradeableDecimals is Initializable, ERC20UpgradeableDecimals, IERC20PermitUpgradeable, EIP712Upgradeable {\r\n    using CountersUpgradeable for CountersUpgradeable.Counter;\r\n\r\n    mapping (address => CountersUpgradeable.Counter) private _nonces;\r\n\r\n    // solhint-disable-next-line var-name-mixedcase\r\n    bytes32 private _PERMIT_TYPEHASH;\r\n\r\n    /**\r\n     * @dev Initializes the {EIP712} domain separator using the `name` parameter, and setting `version` to `\"1\"`.\r\n     *\r\n     * It's a good idea to use the same `name` that is defined as the ERC20 token name.\r\n     */\r\n    function __ERC20Permit_init(string memory name) internal initializer {\r\n        __Context_init_unchained();\r\n        __EIP712_init_unchained(name, \"1\");\r\n        __ERC20Permit_init_unchained(name);\r\n    }\r\n\r\n    function __ERC20Permit_init_unchained(string memory name) internal initializer {\r\n        _PERMIT_TYPEHASH = keccak256(\"Permit(address owner,address spender,uint256 value,uint256 nonce,uint256 deadline)\");\r\n    }\r\n\r\n    /**\r\n     * @dev See {IERC20Permit-permit}.\r\n     */\r\n    function permit(address owner, address spender, uint256 amount, uint256 deadline, uint8 v, bytes32 r, bytes32 s) public virtual override {\r\n        // solhint-disable-next-line not-rely-on-time\r\n        require(block.timestamp <= deadline, \"ERC20Permit: expired deadline\");\r\n\r\n        bytes32 structHash = keccak256(\r\n            abi.encode(\r\n                _PERMIT_TYPEHASH,\r\n                owner,\r\n                spender,\r\n                amount,\r\n                _nonces[owner].current(),\r\n                deadline\r\n            )\r\n        );\r\n\r\n        bytes32 hash = _hashTypedDataV4(structHash);\r\n\r\n        address signer = _recoverSigner(hash, v, r, s);\r\n        require(signer == owner, \"ERC20Permit: invalid signature\");\r\n\r\n        _nonces[owner].increment();\r\n        _approve(owner, spender, amount);\r\n    }\r\n\r\n    /**\r\n     * @dev Overload of {ECDSA-recover-bytes32-bytes-} that receives the `v`,\r\n     * `r` and `s` signature fields separately.\r\n     */\r\n    function _recoverSigner(bytes32 hash, uint8 v, bytes32 r, bytes32 s) internal pure returns (address) {\r\n        // EIP-2 still allows signature malleability for ecrecover(). Remove this possibility and make the signature\r\n        // unique. Appendix F in the Ethereum Yellow paper (https://ethereum.github.io/yellowpaper/paper.pdf), defines\r\n        // the valid range for s in (281): 0 < s < secp256k1n Г· 2 + 1, and for v in (282): v в€€ {27, 28}. Most\r\n        // signatures from current libraries generate a unique signature with an s-value in the lower half order.\r\n        //\r\n        // If your library generates malleable signatures, such as s-values in the upper range, calculate a new s-value\r\n        // with 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFEBAAEDCE6AF48A03BBFD25E8CD0364141 - s1 and flip v from 27 to 28 or\r\n        // vice versa. If your library also generates signatures with 0/1 for v instead 27/28, add 27 to v to accept\r\n        // these malleable signatures as well.\r\n        require(uint256(s) <= 0x7FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF5D576E7357A4501DDFE92F46681B20A0, \"ECDSA: invalid signature 's' value\");\r\n        require(v == 27 || v == 28, \"ECDSA: invalid signature 'v' value\");\r\n\r\n        // If the signature is valid (and not malleable), return the signer address\r\n        address signer = ecrecover(hash, v, r, s);\r\n        require(signer != address(0), \"ECDSA: invalid signature\");\r\n\r\n        return signer;\r\n    }\r\n\r\n    /**\r\n     * @dev See {IERC20Permit-nonces}.\r\n     */\r\n    function nonces(address owner) public view override returns (uint256) {\r\n        return _nonces[owner].current();\r\n    }\r\n\r\n    /**\r\n     * @dev See {IERC20Permit-DOMAIN_SEPARATOR}.\r\n     */\r\n    // solhint-disable-next-line func-name-mixedcase\r\n    function DOMAIN_SEPARATOR() external view override returns (bytes32) {\r\n        return _domainSeparatorV4();\r\n    }\r\n    uint256[49] private __gap;\r\n}\r\n\r\n\r\n// Interface to Sushi's MasterChef for staking/unstaking of SLP token\r\ninterface IMasterChef {\r\n    // Deposit LP tokens to MasterChef for SUSHI allocation\r\n    function deposit(uint256 _pid, uint256 _amount) external;\r\n\r\n    // Withdraw LP tokens from MasterChef\r\n    function withdraw(uint256 _pid, uint256 _amount) external;\r\n\r\n    // View function to see pending SUSHIs\r\n    function pendingSushi(uint256 _pid, address _user) external view returns (uint256);\r\n}\r\n\r\n\r\nabstract contract SafeAllowanceResetUpgradeable {\r\n  using SafeMathUpgradeable for uint256;\r\n  using SafeERC20Upgradeable for IERC20Upgradeable;\r\n\r\n  // this function exists due to OpenZeppelin quirks in safe allowance-changing methods\r\n  // we don't want to set allowance by small chunks as it would cost more gas for users\r\n  // and we don't want to set it to zero and then back to value (this makes no sense security-wise in single tx)\r\n  // from the other side, using it through safeIncreaseAllowance could revery due to SafeMath overflow\r\n  // Therefore, we calculate what amount we can increase allowance on to refill it to max uint256 value\r\n  function resetAllowanceIfNeeded(IERC20Upgradeable _token, address _spender, uint256 _amount) internal {\r\n    uint256 allowance = _token.allowance(address(this), _spender);\r\n    if (allowance < _amount) {\r\n      uint256 newAllowance = 0xffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff;\r\n      IERC20Upgradeable(_token).safeIncreaseAllowance(address(_spender), newAllowance.sub(allowance));\r\n    }\r\n  }\r\n}\r\n\r\n\r\n// Interface to represent PowerCard-related methods for Smart Treasury\r\ninterface ISmartTreasuryLibraryPWC {\r\n    function getActiveNFTstakers() external returns (address[] memory stakers, uint256 length);\r\n}\r\n\r\n\r\n// used by ST contract to auto-harvest sushi as USDC\r\ninterface IUniswapV2Router02Minimal {\r\n    //function factory() external pure returns (address);\r\n    //function WETH() external pure returns (address);\r\n    function swapExactTokensForTokens(\r\n        uint amountIn,\r\n        uint amountOutMin,\r\n        address[] calldata path,\r\n        address to,\r\n        uint deadline\r\n    ) external returns (uint[] memory amounts);\r\n}\r\n\r\n\r\n/*\r\n    SmartTreasury is a contract to handle:\r\n    - staking/unstaking of supported tokens;\r\n    - distribution of yield to bonus and endowment portions;\r\n    - rebalancing of asset allocation;\r\n    - claiming treasury portion through token burn;\r\n    - getting eth for subsidizing a transaction;\r\n    - ERC20 functions for bonus token;\r\n    - administrative functions (tresholds);\r\n    - emergency recover functions (timelocked).\r\n\r\n    V2: provide staking of SLP tokens to MasterChef to receive and distribute SUSHI rewards\r\n\r\n    V3: automatic harvesting of Sushi rewards and converting them to USDC as a treasury profit\r\n        fair bonus distribution between MOVE and MOVE-ETH SLP\r\n        staking of NFT 'PowerCard' (EIP1155) for increased yield\r\n*/\r\ncontract SmartTreasuryV3_1 is ERC20PresetMinterPauserUpgradeableDecimals, ERC20PermitUpgradeableDecimals, SafeAllowanceResetUpgradeable {\r\n    using SafeERC20Upgradeable for IERC20Upgradeable;\r\n    using SafeMathUpgradeable for uint256;\r\n\r\n\r\n    // role that grants most of financial operations for Treasury (tresholds, etc.)\r\n    bytes32 public constant FINMGMT_ROLE = keccak256(\"FINMGMT_ROLE\");  // allowed to set tresholds and perform rebalancing\r\n    // role that grants ability to spend and rebate bonuses\r\n    bytes32 public constant EXECUTOR_ROLE = keccak256(\"EXECUTOR_ROLE\"); // allowed to fetch asset portion (for gas subsidy)\r\n\r\n\r\n    ///////////////////////////////////////////////////////////////////////////\r\n    // BASE VARIABLES\r\n    ///////////////////////////////////////////////////////////////////////////\r\n    address public baseToken;           // USDC\r\n    uint256 public endowmentPercent;    // 1e18 percentage of yield portion that goes to endowment, can be changed, won't affect current bonuses\r\n    uint256 public endowmentBalance;    // total endowment balance (in USDC)\r\n    uint256 public bonusBalance;        // total bonus balance (in USDC) to help with accounting\r\n    uint256 public burnLimit;           // 1e18 decimals of maximum tokens allowed to be burned in on tx (default is 1e17=10%)\r\n    uint256 public burnEndowmentMultiplier; // 1e18 when burning tokens, endowment\r\n\r\n\r\n    ///////////////////////////////////////////////////////////////////////////\r\n    // STAKING/UNSTAKING VARIABLES AND EVENTS\r\n    ///////////////////////////////////////////////////////////////////////////\r\n    // supported tokens for staking into treasury are Mover (MOVE) token and MOVE-ETH LP token from sushiswap pool\r\n    // as mentioned in yellow paper, we don't create stakeable tokens data as array to save gas, expansion could be done via contract upgrade\r\n    address public tokenMoveAddress;\r\n    uint public tokenMoveWeight;\r\n    address public tokenMoveEthLPAddress;\r\n    uint public tokenMoveEthLPWeight;\r\n\r\n    event Deposit(address indexed account, uint256 amountMove, uint256 amountMoveEthLP);\r\n    event Withdraw(address indexed account, uint256 amountMove, uint256 amountMoveEthLP);\r\n    event EmergencyWithdraw(address indexed account, uint256 amountMove, uint256 amountMoveEthLP);\r\n    event ReceiveProfit(uint256 amountEndowment, uint256 amountBonus);\r\n\r\n\r\n    uint256 accBonusPerShareMove;\r\n    uint256 accBonusPerShareMoveEthLP;\r\n    uint256 public totalStakedMove;\r\n    uint256 public totalStakedMoveEthLP;\r\n\r\n    struct UserInfo {\r\n        uint256 amount;\r\n        uint256 rewardTally;\r\n    }\r\n\r\n    mapping (address => UserInfo) public userInfoMove;\r\n    mapping (address => UserInfo) public userInfoMoveEthLP;\r\n\r\n\r\n    ///////////////////////////////////////////////////////////////////////////\r\n    // EMERGENCY TRANSFER (TIMELOCKED) VARIABLES AND EVENTS\r\n    ///////////////////////////////////////////////////////////////////////////\r\n    event EmergencyTransferSet(\r\n        address indexed token,\r\n        address indexed destination,\r\n        uint256 amount\r\n    );\r\n    event EmergencyTransferExecute(\r\n        address indexed token,\r\n        address indexed destination,\r\n        uint256 amount\r\n    );\r\n    address private emergencyTransferToken;\r\n    address private emergencyTransferDestination;\r\n    uint256 private emergencyTransferTimestamp;\r\n    uint256 private emergencyTransferAmount;\r\n\r\n\r\n    ///////////////////////////////////////////////////////////////////////////\r\n    // CLAIM & BURN EVENTS\r\n    ///////////////////////////////////////////////////////////////////////////\r\n    event ClaimAndBurn(address indexed account, uint256 amountMove, uint256 amountCompensation);\r\n    \r\n    // for simple DPY stats calculation\r\n    uint256 public inceptionTimestamp;    // inception timestamp\r\n\r\n    ///////////////////////////////////////////////////////////////////////////\r\n    // CONSTRUCTOR/INITIALIZER\r\n    ///////////////////////////////////////////////////////////////////////////\r\n    // NOTE: BONUS TOKENS SHOULD CONTAIN SAME DECIMALS AS BASE ASSET (USDC=6)\r\n    /* removed to save contract implementation bytecode size (contract data was already initialized in 1st version)\r\n    function initialize(string memory name, \r\n                        string memory symbol, \r\n                        address _baseToken, // USDC\r\n                        address _tokenMove, // MOVE\r\n                        address _tokenMoveEth) // Sushiswap MOVE-ETH LP\r\n                        public initializer {\r\n        __Context_init_unchained();\r\n        __AccessControl_init_unchained();\r\n        __ERC20_init_unchained(name, symbol, 6); // bonus token has 6 decimals as USDC\r\n        __ERC20Burnable_init_unchained();\r\n        __Pausable_init_unchained();\r\n        __ERC20Pausable_init_unchained();\r\n        __ERC20PresetMinterPauser_init_unchained(name, symbol); // sets up DEFAULT_ADMIN_ROLE\r\n        __ERC20Permit_init(name);\r\n\r\n        baseToken = _baseToken;\r\n        tokenMoveAddress = _tokenMove;\r\n        tokenMoveEthLPAddress = _tokenMoveEth;\r\n\r\n        inceptionTimestamp = block.timestamp;\r\n\r\n        endowmentPercent = 50000000000000000000; // 50% of yield goes to endowment\r\n        endowmentBalance = 0;\r\n        bonusBalance = 0;\r\n        burnLimit = 100000000000000000; // 0.1, 10% of supply could be burned in one tx\r\n        tokenMoveWeight = 1000;\r\n        tokenMoveEthLPWeight = 2500;\r\n        burnEndowmentMultiplier = 4000000000000000000; // 4x multiplier for burn operation\r\n    }\r\n    */\r\n\r\n    ///////////////////////////////////////////////////////////////////////////\r\n    // FINMGMT FUNCTIONS\r\n    ///////////////////////////////////////////////////////////////////////////\r\n\r\n    function setEndowmentPercentage(uint256 _endowmentPercent) public {\r\n        require(hasRole(FINMGMT_ROLE, msg.sender), \"finmgmt only\");\r\n        endowmentPercent = _endowmentPercent;\r\n    }\r\n\r\n    function setBurnLimit(uint256 _burnLimit) public {\r\n        require(hasRole(FINMGMT_ROLE, msg.sender), \"finmgmt only\");\r\n        burnLimit = _burnLimit;\r\n    }\r\n\r\n    function setEndowmentBurnMultiplier(uint256 _burnEndowmentMultiplier) public {\r\n        require(hasRole(FINMGMT_ROLE, msg.sender), \"finmgmt only\");\r\n        burnEndowmentMultiplier = _burnEndowmentMultiplier;\r\n    }\r\n\r\n    ///////////////////////////////////////////////////////////////////////////\r\n    // TREASURY STAKE/UNSTAKE FUNCTIONS\r\n    ///////////////////////////////////////////////////////////////////////////\r\n\r\n    function pendingBonus(address _account) public view returns(uint256) {\r\n        UserInfo storage userMove = userInfoMove[_account];\r\n        UserInfo storage userMoveEthLP = userInfoMoveEthLP[_account];\r\n\r\n        uint256 pendingBonusMove = userMove.amount.mul(accBonusPerShareMove).div(1e24).sub(userMove.rewardTally);\r\n        return pendingBonusMove.add(userMoveEthLP.amount.mul(accBonusPerShareMoveEthLP).div(1e24).sub(userMoveEthLP.rewardTally));\r\n    }\r\n\r\n    // returns available bonus, including inner balance and tokens on wallet address\r\n    function totalBonus(address _account) public view returns(uint256) {\r\n        uint256 balancePending = pendingBonus(_account);\r\n        uint256 balanceTokens = IERC20Upgradeable(address(this)).balanceOf(_account);\r\n        return balancePending.add(balanceTokens);\r\n    }\r\n\r\n    // users should stake treasury through transfer proxy to avoid setting allowance to this contract for staked tokens\r\n    function deposit(uint _tokenMoveAmount, uint _tokenMoveEthAmount) public {\r\n        depositInternal(msg.sender, _tokenMoveAmount, _tokenMoveEthAmount, false);\r\n    }\r\n\r\n    function depositInternal(address _account, uint _tokenMoveAmount, uint _tokenMoveEthAmount, bool _skipTransfer) internal {\r\n\r\n        UserInfo storage userMove = userInfoMove[_account];\r\n        UserInfo storage userMoveEthLP = userInfoMoveEthLP[_account];\r\n\r\n        // if harvest wasn't performed for a long time, perform harvest\r\n        // obsolete: don't harvest sushi on deposit/withdraws, they are auto-converted to USDC now\r\n        //if (block.number.sub(sushiHarvestedBlock) > HARVEST_BLOCK_TRESHOLD) {\r\n        //    withdrawSLPint(0);\r\n        //}\r\n\r\n        // if SLP tokens were staked, distribute SUSHI rewards\r\n        if (userMoveEthLP.amount > 0) {\r\n            rewardSushi(_account);\r\n        }\r\n\r\n        if (userMove.amount > 0 || userMoveEthLP.amount > 0) {\r\n            uint256 pending = userMove.amount.mul(accBonusPerShareMove).div(1e24).sub(userMove.rewardTally);\r\n            pending = pending.add(userMoveEthLP.amount.mul(accBonusPerShareMoveEthLP).div(1e24).sub(userMoveEthLP.rewardTally));\r\n            if(pending > 0) {\r\n                _mint(_account, pending); //pay the earned tokens when user deposits\r\n            }\r\n        }\r\n\r\n        // this condition would save some gas on harvest calls\r\n        if (_tokenMoveAmount > 0) {\r\n            if(!_skipTransfer) {\r\n                IERC20Upgradeable(tokenMoveAddress).safeTransferFrom(msg.sender, address(this), _tokenMoveAmount);\r\n            }\r\n            userMove.amount = userMove.amount.add(_tokenMoveAmount);\r\n            totalStakedMove = totalStakedMove.add(_tokenMoveAmount);\r\n        }\r\n        if (_tokenMoveEthAmount > 0) {\r\n            if(!_skipTransfer) {\r\n                IERC20Upgradeable(tokenMoveEthLPAddress).safeTransferFrom(msg.sender, address(this), _tokenMoveEthAmount);\r\n            }\r\n            userMoveEthLP.amount = userMoveEthLP.amount.add(_tokenMoveEthAmount);\r\n            totalStakedMoveEthLP = totalStakedMoveEthLP.add(_tokenMoveEthAmount);\r\n        }\r\n\r\n        userMove.rewardTally = userMove.amount.mul(accBonusPerShareMove).div(1e24);\r\n        userMoveEthLP.rewardTally = userMoveEthLP.amount.mul(accBonusPerShareMoveEthLP).div(1e24);\r\n\r\n        sushiRewardTally[_account] = userMoveEthLP.amount.mul(accSushiPerShare).div(1e24);\r\n\r\n        emit Deposit(_account, _tokenMoveAmount, _tokenMoveEthAmount);\r\n    }\r\n\r\n    function withdraw(uint _tokenMoveAmount, uint _tokenMoveEthAmount) public {\r\n        withdrawInternal(msg.sender, _tokenMoveAmount, _tokenMoveEthAmount);\r\n    }\r\n\r\n    function withdrawInternal(address _account, uint _tokenMoveAmount, uint _tokenMoveEthAmount) internal {\r\n\r\n        UserInfo storage userMove = userInfoMove[_account];\r\n        UserInfo storage userMoveEthLP = userInfoMoveEthLP[_account];\r\n\r\n        // if there's not enough SLP tokens, withdraw staked from MasterChef, this would also trigger harvest\r\n        if (_tokenMoveEthAmount > 0) {\r\n            uint256 slpBalance = IERC20Upgradeable(tokenMoveEthLPAddress).balanceOf(address(this));\r\n            if (_tokenMoveEthAmount > slpBalance) {\r\n                withdrawSLPint(_tokenMoveEthAmount.sub(slpBalance));\r\n            }\r\n        }\r\n        \r\n        // if harvest wasn't performed for a long time, perform harvest\r\n        //if (block.number.sub(sushiHarvestedBlock) > HARVEST_BLOCK_TRESHOLD) {\r\n        //    withdrawSLPint(0);\r\n        //}\r\n\r\n        // if SLP tokens were staked, distribute SUSHI rewards\r\n        if (userMoveEthLP.amount > 0) {\r\n            rewardSushi(_account);\r\n        }\r\n\r\n        if (userMove.amount > 0 || userMoveEthLP.amount > 0) {\r\n            uint256 pending = userMove.amount.mul(accBonusPerShareMove).div(1e24).sub(userMove.rewardTally);\r\n            pending = pending.add(userMoveEthLP.amount.mul(accBonusPerShareMoveEthLP).div(1e24).sub(userMoveEthLP.rewardTally));\r\n            if(pending > 0) {\r\n                _mint(_account, pending); //pay the earned tokens when user deposits\r\n            }\r\n        }\r\n\r\n        require(userMove.amount >= _tokenMoveAmount, \"withdraw: insufficient balance\");\r\n        require(userMoveEthLP.amount >= _tokenMoveEthAmount, \"withdraw: insufficient balance\");\r\n\r\n        if (_tokenMoveAmount > 0) {\r\n            IERC20Upgradeable(tokenMoveAddress).safeTransfer(address(_account), _tokenMoveAmount);\r\n        }\r\n        if (_tokenMoveEthAmount > 0) {\r\n            IERC20Upgradeable(tokenMoveEthLPAddress).safeTransfer(address(_account), _tokenMoveEthAmount);\r\n        }\r\n\r\n        totalStakedMove = totalStakedMove.sub(_tokenMoveAmount);\r\n        totalStakedMoveEthLP = totalStakedMoveEthLP.sub(_tokenMoveEthAmount);\r\n\r\n        userMove.amount = userMove.amount.sub(_tokenMoveAmount);\r\n        userMove.rewardTally = userMove.amount.mul(accBonusPerShareMove).div(1e24);\r\n        userMoveEthLP.amount = userMoveEthLP.amount.sub(_tokenMoveEthAmount);\r\n        userMoveEthLP.rewardTally = userMoveEthLP.amount.mul(accBonusPerShareMoveEthLP).div(1e24);\r\n\r\n        sushiRewardTally[_account] = userMoveEthLP.amount.mul(accSushiPerShare).div(1e24);\r\n\r\n        emit Withdraw(_account, _tokenMoveAmount, _tokenMoveEthAmount);\r\n    }\r\n\r\n    function emergencyWithdraw() public {\r\n        UserInfo storage userMove = userInfoMove[msg.sender];\r\n        UserInfo storage userMoveEthLP = userInfoMoveEthLP[msg.sender];\r\n\r\n        // if there's not enough SLP tokens, withdraw staked from MasterChef\r\n        if (userMoveEthLP.amount > 0) {\r\n            uint256 slpBalance = IERC20Upgradeable(tokenMoveEthLPAddress).balanceOf(address(this));\r\n            if (userMoveEthLP.amount > slpBalance) {\r\n                withdrawSLPint(userMoveEthLP.amount.sub(slpBalance));\r\n            }\r\n        }\r\n\r\n        IERC20Upgradeable(tokenMoveAddress).safeTransfer(address(msg.sender), userMove.amount);\r\n        IERC20Upgradeable(tokenMoveEthLPAddress).safeTransfer(address(msg.sender), userMoveEthLP.amount);\r\n\r\n        totalStakedMove = totalStakedMove.sub(userMove.amount);\r\n        totalStakedMoveEthLP = totalStakedMoveEthLP.sub(userMoveEthLP.amount);\r\n\r\n        emit EmergencyWithdraw(msg.sender, userMove.amount, userMove.rewardTally);\r\n\r\n        userMove.amount = 0;\r\n        userMove.rewardTally = 0;\r\n        userMoveEthLP.amount = 0;\r\n        userMoveEthLP.rewardTally = 0;\r\n\r\n        sushiRewardTally[msg.sender] = 0;\r\n    }\r\n\r\n    // called when profit distribution occurs by profit distributor contract\r\n    // but can be called by anyone (e.g. for donation)\r\n    // _sushiHarvest is for convenience to save 21k gas on calling it separately\r\n    function receiveProfit(uint256 _amount, bool _sushiHarvest) public {\r\n        if (_sushiHarvest) {\r\n            withdrawSLPint(0); // receive and convert sushi\r\n        }\r\n\r\n        if (_amount == 0) {\r\n            return; // for pure sushi harvest calls to be cheaper\r\n        }\r\n\r\n        // transfer base token (USDC) to this contract\r\n        IERC20Upgradeable(baseToken).safeTransferFrom(msg.sender, address(this), _amount);\r\n\r\n        // if nothing is taked into treasury, fulfill only endowment portion\r\n        if (totalStakedMove == 0 && totalStakedMoveEthLP == 0) {\r\n            endowmentBalance = endowmentBalance.add(_amount);\r\n            return;\r\n        }\r\n\r\n        uint256 endowmentPortion = _amount.mul(endowmentPercent).div(1e20);\r\n        uint256 bonusPortion = _amount.sub(endowmentPortion);\r\n\r\n\r\n        //uint256 totalWeight = tokenMoveWeight + tokenMoveEthLPWeight;\r\n\r\n        // TODO: calculate how much MOVER tokens are in 1 SLP from pair contract at this block\r\n        // MOVE per 1 SLP = MOVE.balanceOf(pool) *1e18 (for int-representation) / pool.totalSupply (they have same 18 decimals)\r\n        uint256 MOVEperLP = IERC20Upgradeable(tokenMoveAddress).balanceOf(tokenMoveEthLPAddress).mul(1e18).div(IERC20Upgradeable(tokenMoveEthLPAddress).totalSupply());\r\n        uint256 totalLPShares = totalStakedMoveEthLP.mul(tokenMoveEthLPWeight).mul(MOVEperLP).div(1e18);\r\n        uint256 totalShares = totalStakedMove.mul(tokenMoveWeight).add(totalLPShares);\r\n\r\n\r\n        // process powercards, mint MOBOs to such addresses\r\n        // (active powercard makes particular user share 2x larger)\r\n        uint256 totalPWCMoveWeight = 1;\r\n        uint256 totalPWCMoveLPWeight = 1;\r\n        \r\n        if (TreasuryPWCAddress != address(0)) {\r\n            // make call to the ST PowerCard helper contract\r\n            (address[] memory stakers, uint256 stlen) = ISmartTreasuryLibraryPWC(TreasuryPWCAddress).getActiveNFTstakers();\r\n            for (uint256 index = 0; index < stlen; index++) {\r\n                totalPWCMoveWeight = totalPWCMoveWeight.add( (userInfoMove[stakers[index]]).amount.mul(tokenMoveWeight) );\r\n                totalPWCMoveLPWeight = totalPWCMoveLPWeight.add( (userInfoMoveEthLP[stakers[index]]).amount.mul(tokenMoveEthLPWeight).mul(MOVEperLP).div(1e18) );\r\n            }   \r\n\r\n            uint256 PWCPortion = bonusPortion.mul(totalPWCMoveWeight + totalPWCMoveLPWeight).div(totalShares + totalPWCMoveWeight + totalPWCMoveLPWeight);\r\n            bonusPortion = bonusPortion.sub(PWCPortion);\r\n\r\n            // distribute bonus tokens for powercard portion immediately\r\n            // using calculated values of PWC portion, user shares and total PWC-accounted shares\r\n            for (uint256 index = 0; index < stlen; index++) {\r\n                uint256 thisPowercardUserShares = (userInfoMove[stakers[index]]).amount.mul(tokenMoveWeight) + (userInfoMoveEthLP[stakers[index]]).amount.mul(tokenMoveEthLPWeight).mul(MOVEperLP).div(1e18);\r\n                uint256 thisPowercardAmount = PWCPortion.mul(thisPowercardUserShares).div(totalPWCMoveWeight + totalPWCMoveLPWeight);\r\n                // we can save some gas not doing _mint with event emission\r\n                // and increase total supply only once, but this would make things\r\n                // less transparent and probably is not worth the gas savings\r\n                _mint(stakers[index], thisPowercardAmount);\r\n            }\r\n        }\r\n\r\n        endowmentBalance = endowmentBalance.add(endowmentPortion);\r\n        bonusBalance = bonusBalance.add(bonusPortion);\r\n\r\n        uint256 bonusPortionMove = bonusPortion.mul(totalStakedMove).mul(tokenMoveWeight).div(totalShares);\r\n        uint256 bonusPortionMoveEthLP = bonusPortion.sub(bonusPortionMove);\r\n\r\n        if (totalStakedMove > 0) {\r\n            accBonusPerShareMove = accBonusPerShareMove.add(bonusPortionMove.mul(1e24).div(totalStakedMove));\r\n        }\r\n        if (totalStakedMoveEthLP > 0) {\r\n            accBonusPerShareMoveEthLP = accBonusPerShareMoveEthLP.add(bonusPortionMoveEthLP.mul(1e24).div(totalStakedMoveEthLP));\r\n        }\r\n\r\n        emit ReceiveProfit(endowmentPortion, bonusPortion);\r\n    }\r\n\r\n\r\n    ///////////////////////////////////////////////////////////////////////////\r\n    // SUBSIDIZED EXECUTION FUNCTIONS\r\n    ///////////////////////////////////////////////////////////////////////////\r\n\r\n    // called by execution proxy when spending bonus on subsidized txes\r\n    // or correction if actual gas spending was higher than actual\r\n    // would also be used for KYC costs, etc.\r\n    function spendBonus(address _account, uint256 _amount) public {\r\n        require(hasRole(EXECUTOR_ROLE, msg.sender), \"executor only\");\r\n        spendBonusInternal(_account, _amount);\r\n    }\r\n        \r\n    function spendBonusInternal(address _account, uint256 _amount) internal {\r\n        UserInfo storage userMove = userInfoMove[_account];\r\n        UserInfo storage userMoveEthLP = userInfoMoveEthLP[_account];\r\n        uint256 pendingBonusMove = userMove.amount.mul(accBonusPerShareMove).div(1e24).sub(userMove.rewardTally);\r\n        uint256 pendingBonusMoveEthLP = userMoveEthLP.amount.mul(accBonusPerShareMoveEthLP).div(1e24).sub(userMoveEthLP.rewardTally);\r\n        uint256 tokenBonus = IERC20Upgradeable(this).balanceOf(_account);\r\n\r\n        require(pendingBonusMove.add(pendingBonusMoveEthLP).add(tokenBonus) >= _amount, \"not enough bonus\");\r\n\r\n        // spend pending bonus first, MOVE-ETH LP bonus first\r\n        if (pendingBonusMoveEthLP >= _amount) {\r\n            // spend only pending MOVE-ETH LP bonus\r\n            userMoveEthLP.rewardTally = userMoveEthLP.rewardTally.add(_amount);\r\n        } else if (pendingBonusMove.add(pendingBonusMoveEthLP) >= _amount) {\r\n            // spend all pending MOVE-ETH LP bonus and portion of pending MOVE-ETH bonus\r\n            userMoveEthLP.rewardTally = userMoveEthLP.amount.mul(accBonusPerShareMoveEthLP).div(1e24); // set zero-point\r\n            userMove.rewardTally = userMove.rewardTally.add(_amount.sub(pendingBonusMoveEthLP));\r\n        } else {\r\n            // spend all pending MOVE-ETH LP bonus, all pending MOVE-ETH bonus and burn some tokens\r\n            userMove.rewardTally = userMove.amount.mul(accBonusPerShareMove).div(1e24); // set zero-point\r\n            userMoveEthLP.rewardTally = userMoveEthLP.amount.mul(accBonusPerShareMoveEthLP).div(1e24); // set zero-point\r\n            _burn(_account, _amount.sub(pendingBonusMove).sub(pendingBonusMoveEthLP));\r\n        }\r\n\r\n        bonusBalance = bonusBalance.sub(_amount);\r\n    }\r\n\r\n    // called by execution proxy if gas spending is less than actual\r\n    // rebate is issued in form of tokens\r\n    function rebateBonus(address _account, uint256 _amount) public {        \r\n        require(hasRole(EXECUTOR_ROLE, msg.sender), \"executor only\");\r\n        _mint(_account, _amount);\r\n        bonusBalance = bonusBalance.add(_amount);\r\n    }\r\n\r\n    // deposit not requiring allowance of MOVE or MOVE-ETH LP for this contract\r\n    // actual transfer is organized beforehand by trusted party (execution proxy)\r\n    function depositOnBehalf(address _account, uint _tokenMoveAmount, uint _tokenMoveEthAmount) public {\r\n        require(hasRole(EXECUTOR_ROLE, msg.sender), \"executor only\");\r\n        depositInternal(_account, _tokenMoveAmount, _tokenMoveEthAmount, true);\r\n    }\r\n\r\n    function withdrawOnBehalf(address _account, uint _tokenMoveAmount, uint _tokenMoveEthAmount) public {\r\n        require(hasRole(EXECUTOR_ROLE, msg.sender), \"executor only\");\r\n        withdrawInternal(_account, _tokenMoveAmount, _tokenMoveEthAmount);\r\n    }\r\n\r\n    ///////////////////////////////////////////////////////////////////////////\r\n    // CLAIM & BURN FUNCTIONS\r\n    ///////////////////////////////////////////////////////////////////////////\r\n\r\n    function maxBurnAmount() public view returns(uint256) {\r\n        uint256 totalSupply = IERC20Upgradeable(tokenMoveAddress).totalSupply();\r\n        return totalSupply.mul(burnLimit).div(1000000000000000000);\r\n    }\r\n\r\n    function getBurnValue(address _account, uint256 _amount) public view returns(uint256) {\r\n        (uint256 endowmentPortion, uint256 bonusPortion) = getBurnValuePortions(_account, _amount);\r\n        return endowmentPortion.add(bonusPortion);\r\n    }\r\n\r\n    function getBurnValuePortions(address _account, uint256 _amount) public view returns(uint256, uint256) {\r\n        uint256 totalSupply = IERC20Upgradeable(tokenMoveAddress).totalSupply();\r\n        uint256 endowmentPortion = _amount.mul(1000000000000000000).div(totalSupply).mul(endowmentBalance).div(1000000000000000000);\r\n\r\n        uint256 bonusPortion = totalBonus(_account); \r\n        // bonus compensation cannot be higher than MOVE burned portion (bonus tokens could be transferred)\r\n        // to prevent burning bonus for USDC directly\r\n        if (bonusPortion > endowmentPortion) {\r\n            bonusPortion = endowmentPortion; \r\n        }\r\n\r\n        // endowment portion has a multiplier for rewarding reducing number of MOVE tokens\r\n        endowmentPortion = endowmentPortion.mul(burnEndowmentMultiplier).div(1e18);\r\n\r\n        return (endowmentPortion, bonusPortion);\r\n    }\r\n\r\n    // executor proxy performs burn as it has allowance on MOVE token and calls this method\r\n    function claimAndBurnOnBehalf(address _beneficiary, uint256 _amount) public {\r\n        require(hasRole(EXECUTOR_ROLE, msg.sender), \"executor only\");\r\n        require(_amount <= maxBurnAmount(), \"max amount exceeded\");\r\n\r\n        (uint256 endowmentPortion, uint256 bonusPortion) = getBurnValuePortions(_beneficiary, _amount);\r\n\r\n        if (bonusPortion > 0) {\r\n            spendBonusInternal(_beneficiary, bonusPortion);\r\n        }\r\n\r\n        // if not enough balance, divest funds from yield generating products\r\n        // (this is undesireable, should be covered by rebalancer)\r\n        // if (IERC20Upgradeable(baseToken).balanceOf(address(this)) < endowmentPortion.add(bonusPortion)) {\r\n            // TODO: perform rebalance (should be required when treasury stakes its portion)\r\n        //}\r\n\r\n        uint256 baseTokenToTransfer = endowmentPortion.add(bonusPortion);\r\n        IERC20Upgradeable(baseToken).safeTransfer(_beneficiary, baseTokenToTransfer);\r\n        endowmentBalance = endowmentBalance.sub(endowmentPortion);\r\n        emit ClaimAndBurn(_beneficiary, _amount, baseTokenToTransfer);\r\n    }\r\n\r\n    // This is oversimplified, no compounding and averaged across timespan from inception\r\n    // we don't know price of MOVE token here, so it should be divided by MOVE price in apps\r\n    function getDPYPerMoveToken() public view returns(uint256) {\r\n      uint256 secondsFromInception = block.timestamp.sub(inceptionTimestamp);\r\n      \r\n      // calculate as total amassed endowment valuation to total number of tokens staked\r\n      uint256 totalMoveStakedEquivalent = totalStakedMove;\r\n\r\n      // add equivalent underlying MOVE for MOVE-ETH LP\r\n      uint256 moveInLP = IERC20Upgradeable(tokenMoveEthLPAddress).balanceOf(tokenMoveAddress);\r\n      uint256 totalLP = IERC20Upgradeable(tokenMoveEthLPAddress).totalSupply();\r\n      if (totalLP > 0) {\r\n        totalMoveStakedEquivalent = totalMoveStakedEquivalent.add(totalStakedMoveEthLP.mul(moveInLP).div(totalLP));\r\n      }\r\n      \r\n      if (totalMoveStakedEquivalent == 0) {\r\n          return 0; // no APY can be formulated as zero tokens staked\r\n      }\r\n\r\n      // endowmentBalance has 6 decimals as USDC, so to get 1e18 decimals, multiply by 1e12 and by 100 to get %\r\n      uint256 baseAssetPerDay = endowmentBalance.mul(1e12).mul(100).mul(86400).div(secondsFromInception);\r\n\r\n      return baseAssetPerDay.mul(1e18).div(totalMoveStakedEquivalent);\r\n    }\r\n\r\n\r\n    ///////////////////////////////////////////////////////////////////////////\r\n    // ERC20 MOVER BONUS TOKEN FUNCTIONS\r\n    ///////////////////////////////////////////////////////////////////////////\r\n\r\n    function _beforeTokenTransfer(address from, address to, uint256 amount) internal virtual override(ERC20PresetMinterPauserUpgradeableDecimals, ERC20UpgradeableDecimals) {\r\n        super._beforeTokenTransfer(from, to, amount);\r\n    }\r\n\r\n    // add new variables that can be renamed\r\n    string private _token_name;\r\n    string private _token_symbol;\r\n\r\n    function name() public override view returns (string memory) {\r\n        return _token_name;\r\n    }\r\n\r\n    function symbol() public override view returns (string memory) {\r\n        return _token_symbol;\r\n    }\r\n\r\n    // set the name and symbol for the token\r\n    // callable only by admin\r\n    function setTokenName(string memory _symbol, string memory _name) public {\r\n        require(hasRole(DEFAULT_ADMIN_ROLE, msg.sender), \"admin only\");\r\n        _token_name = _name;\r\n        _token_symbol = _symbol;\r\n        _EIP712SetNameHash(_name);\r\n    }\r\n\r\n    // airdrop tokens (used to distributed bonus tokens)\r\n\t// callable only by admin\r\n    /* removed, not required\r\n\tfunction airdropTokens(address[] calldata _recipients, uint256[] calldata _amounts) public {\r\n\t\trequire(hasRole(DEFAULT_ADMIN_ROLE, msg.sender), \"admin only\");\r\n        require(_recipients.length == _amounts.length, \"array length mismatch\");\r\n\t\tfor(uint256 i = 0; i < _recipients.length; i++) {\r\n            _mint(_recipients[i], _amounts[i]);\r\n        }\r\n\t}\r\n    */\r\n\r\n\r\n    ///////////////////////////////////////////////////////////////////////////\r\n    // EMERGENCY FUNCTIONS\r\n    ///////////////////////////////////////////////////////////////////////////\r\n\r\n    // emergencyTransferTimelockSet is for safety (if some tokens got stuck)\r\n    // in the future it could be removed, to restrict access to user funds\r\n    // this is timelocked as contract can have user funds\r\n    function emergencyTransferTimelockSet(\r\n        address _token,\r\n        address _destination,\r\n        uint256 _amount\r\n    ) public {\r\n        require(hasRole(DEFAULT_ADMIN_ROLE, msg.sender), \"admin only\");\r\n        emergencyTransferTimestamp = block.timestamp;\r\n        emergencyTransferToken = _token;\r\n        emergencyTransferDestination = _destination;\r\n        emergencyTransferAmount = _amount;\r\n\r\n        emit EmergencyTransferSet(_token, _destination, _amount);\r\n    }\r\n\r\n    function emergencyTransferExecute() public {\r\n        require(hasRole(DEFAULT_ADMIN_ROLE, msg.sender), \"admin only\");\r\n        require(\r\n            block.timestamp > emergencyTransferTimestamp + 24 * 3600,\r\n            \"timelock too early\"\r\n        );\r\n        require(\r\n            block.timestamp < emergencyTransferTimestamp + 72 * 3600,\r\n            \"timelock too late\"\r\n        );\r\n\r\n        IERC20Upgradeable(emergencyTransferToken).safeTransfer(\r\n            emergencyTransferDestination,\r\n            emergencyTransferAmount\r\n        );\r\n\r\n        emit EmergencyTransferExecute(\r\n            emergencyTransferToken,\r\n            emergencyTransferDestination,\r\n            emergencyTransferAmount\r\n        );\r\n        // clear emergency transfer timelock data\r\n        emergencyTransferTimestamp = 0;\r\n        emergencyTransferToken = address(0);\r\n        emergencyTransferDestination = address(0);\r\n        emergencyTransferAmount = 0;\r\n    }\r\n\r\n    ///////////////////////////////////////////////////////////////////////////\r\n    // SUSHI LP STAKING FUNCTIONS\r\n    ///////////////////////////////////////////////////////////////////////////\r\n    //address public constant MASTERCHEF_ADDRESS = 0xc2EdaD668740f1aA35E4D8f227fB8E17dcA888Cd;\r\n    //address public constant SUSHI_ADDRESS = 0x6B3595068778DD592e39A122f4f5a5cF09C90fE2;\r\n    \r\n    // this for tests only, reduce using] constants in PROD contract\r\n    address public MASTERCHEF_ADDRESS;\r\n    address public SUSHI_ADDRESS;\r\n    uint public MASTERCHEF_POOLID;\r\n    \r\n    /*\r\n    // removed for saving bytecode volume\r\n    function setSushiAddresses(address _masterChef, address _sushiToken, uint _poolId) public {\r\n        require(hasRole(FINMGMT_ROLE, msg.sender), \"finmgmt only\");\r\n        MASTERCHEF_ADDRESS = _masterChef;\r\n        SUSHI_ADDRESS = _sushiToken;\r\n        MASTERCHEF_POOLID = _poolId;\r\n    }\r\n    */\r\n\r\n    uint256 private constant ALLOWANCE_SIZE = 0xffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff;\r\n    uint256 private constant HARVEST_BLOCK_TRESHOLD = 6400; // approximately one day\r\n    \r\n    // percentage of sushi that is allocated to Smart Treasury itself 1000000000000000000 = 1%\r\n    uint256 public treasuryFeeSushi;\r\n    // current sushi accumulated per single share\r\n    uint256 public accSushiPerShare;\r\n    // last block on which sushi were harvested\r\n    uint256 public sushiHarvestedBlock;     // obsolete, unused\r\n    // sushi pending markings for accounts\r\n    mapping (address => uint256) public sushiRewardTally;\r\n\r\n    // Smart Treasury's own sushi\r\n    uint256 public treasurySushi;   // this is old name which is obsolete and not used\r\n                                    // openzeppelin does not support renames yet conveniently\r\n                                    // so just considering this variable named 'feesUSDC'\r\n\r\n    event ReceiveSushi(uint256 sushiAmount);\r\n\r\n    function setSushiFee(uint256 _feeSushi) public {\r\n        require(hasRole(FINMGMT_ROLE, msg.sender), \"finmgmt only\");\r\n        treasuryFeeSushi = _feeSushi;\r\n    }\r\n\r\n    // could also be used to harvest pending SUSHI rewards\r\n    function depositSLP(uint256 _amount) public {\r\n        require(hasRole(FINMGMT_ROLE, msg.sender), \"finmgmt only\");\r\n        depositSLPint(_amount);\r\n    }\r\n\r\n    // could also be used to harvest pending SUSHI rewards\r\n    function withdrawSLP(uint256 _amount) public {\r\n        require(hasRole(FINMGMT_ROLE, msg.sender), \"finmgmt only\");\r\n        withdrawSLPint(_amount);\r\n    }\r\n\r\n    function depositSLPint(uint256 _amount) internal {\r\n        uint256 sushiBefore = IERC20Upgradeable(SUSHI_ADDRESS).balanceOf(address(this));\r\n\r\n        resetAllowanceIfNeeded(IERC20Upgradeable(tokenMoveEthLPAddress), MASTERCHEF_ADDRESS, ALLOWANCE_SIZE);\r\n\r\n        // make deposit call to MasterChef\r\n        IMasterChef(MASTERCHEF_ADDRESS).deposit(MASTERCHEF_POOLID, _amount); // MOVE-ETH LP pool id is 257 (0x101)\r\n\r\n        uint256 sushiAfter = IERC20Upgradeable(SUSHI_ADDRESS).balanceOf(address(this));\r\n        //distributeSushi(sushiBefore, sushiAfter);\r\n        harvestSushiProfit(sushiAfter.sub(sushiBefore)); // convert and distribute USDC from SUSHI\r\n\r\n        //sushiHarvestedBlock = block.number;\r\n    }\r\n\r\n    // called by FINMGMT or when there's not enough SLP when someone withdraws\r\n    function withdrawSLPint(uint256 _amount) internal returns(uint256 receivedSushi) {\r\n        if (MASTERCHEF_ADDRESS == address(0)) {\r\n            return 0; // sushi rewards staking is not enabled\r\n        }\r\n\r\n        uint256 sushiBefore = IERC20Upgradeable(SUSHI_ADDRESS).balanceOf(address(this));\r\n\r\n        // make withdraw call to MasterChef\r\n        IMasterChef(MASTERCHEF_ADDRESS).withdraw(MASTERCHEF_POOLID, _amount); // MOVE-ETH LP pool id is 257 (0x101)\r\n\r\n        uint256 sushiAfter = IERC20Upgradeable(SUSHI_ADDRESS).balanceOf(address(this));\r\n        //distributeSushi(sushiBefore, sushiAfter);\r\n        receivedSushi = sushiAfter.sub(sushiBefore); // to use as return value\r\n        harvestSushiProfit(receivedSushi); // convert and distribute USDC from SUSHI\r\n\r\n        //sushiHarvestedBlock = block.number;\r\n    }\r\n\r\n    /*\r\n        this function is obsolete, we auto-harvest sushi rewards in USDC now\r\n\r\n    function distributeSushi(uint256 _before, uint256 _after) internal {\r\n        if (_before >= _after) {\r\n            return; // don't revert, just do nothing\r\n        }\r\n\r\n        uint256 receivedSushi = _after.sub(_before);\r\n        if (treasuryFeeSushi > 0) {\r\n            uint256 sushitotreasury = receivedSushi.mul(treasuryFeeSushi).div(1e20);\r\n            treasurySushi = treasurySushi.add(sushitotreasury);\r\n            receivedSushi = receivedSushi.sub(sushitotreasury);\r\n        }\r\n\r\n        accSushiPerShare = accSushiPerShare.add(receivedSushi.mul(1e24).div(totalStakedMoveEthLP));\r\n        emit ReceiveSushi(receivedSushi);\r\n    }\r\n    */\r\n\r\n    // transfer pending SUSHI (that were assigned before auto-harvest)\r\n    function rewardSushi(address _account) internal {\r\n        UserInfo storage userMoveEthLP = userInfoMoveEthLP[_account];\r\n        if (userMoveEthLP.amount == 0) {\r\n            return; // no SUSHI rewards if no SLPs staked\r\n        }\r\n\r\n        uint256 pendingSushi = userMoveEthLP.amount.mul(accSushiPerShare).div(1e24).sub(sushiRewardTally[_account]);\r\n        if(pendingSushi > 0) {\r\n            IERC20Upgradeable(SUSHI_ADDRESS).safeTransfer(_account, pendingSushi); //pay the earned SUSHI rewards\r\n        }\r\n    }\r\n\r\n    /*\r\n        this function is obsolete, we auto-harvest sushi rewards in USDC now\r\n    function getTreasurySushi(uint256 _amount, address _receiver) public {\r\n        require(hasRole(FINMGMT_ROLE, msg.sender), \"finmgmt only\");\r\n        require(_amount <= treasurySushi, \"amount exceeds balance\");\r\n        IERC20Upgradeable(SUSHI_ADDRESS).safeTransfer(_receiver, _amount);\r\n        treasurySushi = treasurySushi.sub(_amount);\r\n    }\r\n    */\r\n\r\n\r\n    ///////////////////////////////////////////////////////////////////////////\r\n    // V3 upgrade: PowerCard features\r\n    // (most are implemented as separate contract handling PowerCards staking\r\n    //  to avoid contract size limit)\r\n    ///////////////////////////////////////////////////////////////////////////\r\n    address private TreasuryPWCAddress;\r\n\r\n    function setPowercardFragment(address _address) public {\r\n        require(hasRole(FINMGMT_ROLE, msg.sender), \"finmgmt only\");\r\n        TreasuryPWCAddress = _address;\r\n    }\r\n\r\n    ///////////////////////////////////////////////////////////////////////////\r\n    // V3 upgrade: Sushi harvest features\r\n    // (Sushi price assumed correct)\r\n    ///////////////////////////////////////////////////////////////////////////\r\n\r\n    // SushiSwap V2 router is used\r\n    // https://etherscan.io/address/0xd9e1cE17f2641f24aE83637ab66a2cca9C378B9F\r\n    address private swapRouterAddress;\r\n\r\n    function setSwapRouterAddress(address _swapRouterAddress) public {\r\n        require(hasRole(FINMGMT_ROLE, msg.sender), \"finmgmt only\");\r\n        swapRouterAddress = _swapRouterAddress;\r\n    }\r\n\r\n    // harvestSushiProfit is called by receiveProfit function (if a bool parameter is provided)\r\n    // it harvests sushi, converts to USDC and returns amount of USDC received (which is distributed\r\n    // across LP stakers only)\r\n    function harvestSushiProfit(uint256 _sushiHarvested) internal {\r\n        if (swapRouterAddress == address(0) || _sushiHarvested == 0) {\r\n            return; // don't convert anything, just harvest (for tests mainly), don't increase pending bonuses\r\n        }\r\n\r\n        // pending sushis to stakers, but all new sushi are auto-harvested\r\n        // withdraw SLP calls this function either when someone withdraws or in receiveProfit\r\n\r\n        // approve sushi token to router\r\n        resetAllowanceIfNeeded(IERC20Upgradeable(SUSHI_ADDRESS), swapRouterAddress, _sushiHarvested);\r\n\r\n        // perform swap of SUSHI to USDC\r\n        // most liquid path is SUSHI->WETH->USDC\r\n        address[] memory path = new address[](3);\r\n        path[0] = SUSHI_ADDRESS; // Sushi token address;\r\n        path[1] = 0xC02aaA39b223FE8D0A0e5C4F27eAD9083C756Cc2; // WETH\r\n        path[2] = baseToken;     // USDC address;\r\n\r\n        // NOTE: we can use returned amounts array from router call, but use own calculation for safety\r\n        // this is called regularly, so we use min amount received == 1 for conversion\r\n        uint256 USDCbefore = IERC20Upgradeable(baseToken).balanceOf(address(this));\r\n        IUniswapV2Router02Minimal(swapRouterAddress).swapExactTokensForTokens(_sushiHarvested, 1, path, address(this), block.timestamp);\r\n        uint256 USDCafter = IERC20Upgradeable(baseToken).balanceOf(address(this));\r\n\r\n        // distribute profit\r\n        // process sushi fee if present\r\n        uint256 sushiUSDC = USDCafter.sub(USDCbefore);\r\n        if (treasuryFeeSushi > 0) {\r\n            uint256 sushiFeeUSDC = sushiUSDC.mul(treasuryFeeSushi).div(1e20);\r\n            /*feesUSDC*/treasurySushi = /*feesUSDC*/treasurySushi.add(sushiFeeUSDC);\r\n            sushiUSDC = sushiUSDC.sub(sushiFeeUSDC);\r\n        }\r\n\r\n        bonusBalance = bonusBalance.add(sushiUSDC);\r\n\r\n        if (totalStakedMoveEthLP > 0) {\r\n            accBonusPerShareMoveEthLP = accBonusPerShareMoveEthLP.add(sushiUSDC.mul(1e24).div(totalStakedMoveEthLP));\r\n        }\r\n\r\n        emit ReceiveProfit(0, sushiUSDC);\r\n    }\r\n\r\n    function getTreasuryFees(uint256 _amount, address _receiver) public {\r\n        require(hasRole(FINMGMT_ROLE, msg.sender), \"finmgmt only\");\r\n        require(_amount <= /*feesUSDC*/treasurySushi, \"amount exceeds balance\");\r\n        IERC20Upgradeable(baseToken).safeTransfer(_receiver, _amount);\r\n        /*feesUSDC*/treasurySushi = /*feesUSDC*/treasurySushi.sub(_amount);\r\n    }\r\n\r\n    //function SetYieldAllocationTreshold(); // percentage of assets invested\r\n    //function SetBaseAssetReserve(); // how much USDC should be present on this contract\r\n    //function SetFetchLimit(); // sets maximum for requests of assets (to transfer to ETH subsidized execution wallets)\r\n\r\n    //function claimInvestedFunds(); // internal for claiming yield-generating assets if burn compensation exceeds reserves\r\n    //function FetchAssetsForGasSubsidy();\r\n    //function RebalanceAssets();\r\n\r\n    //function ReceiveETH(); -- refill with ETH -- do we need this function? refill with USDC, fill ETH directly on exec. wallet\r\n    //                          can reclaim USDC that was excess through emergencyReclaim\r\n\r\n    //function movePerLP() public view returns(uint256) {\r\n    //    return IERC20Upgradeable(tokenMoveAddress).balanceOf(tokenMoveEthLPAddress).mul(1e18).div(IERC20Upgradeable(tokenMoveEthLPAddress).totalSupply());\r\n    //}\r\n}","ABI":"[{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Approval\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amountMove\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amountCompensation\",\"type\":\"uint256\"}],\"name\":\"ClaimAndBurn\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amountMove\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amountMoveEthLP\",\"type\":\"uint256\"}],\"name\":\"Deposit\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"token\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"destination\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"EmergencyTransferExecute\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"token\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"destination\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"EmergencyTransferSet\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amountMove\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amountMoveEthLP\",\"type\":\"uint256\"}],\"name\":\"EmergencyWithdraw\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"Paused\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amountEndowment\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amountBonus\",\"type\":\"uint256\"}],\"name\":\"ReceiveProfit\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"sushiAmount\",\"type\":\"uint256\"}],\"name\":\"ReceiveSushi\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"previousAdminRole\",\"type\":\"bytes32\"},{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"newAdminRole\",\"type\":\"bytes32\"}],\"name\":\"RoleAdminChanged\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"}],\"name\":\"RoleGranted\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"}],\"name\":\"RoleRevoked\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Transfer\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"Unpaused\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amountMove\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amountMoveEthLP\",\"type\":\"uint256\"}],\"name\":\"Withdraw\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"DEFAULT_ADMIN_ROLE\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"DOMAIN_SEPARATOR\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"EXECUTOR_ROLE\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"FINMGMT_ROLE\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"MASTERCHEF_ADDRESS\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"MASTERCHEF_POOLID\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"MINTER_ROLE\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"PAUSER_ROLE\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"SUSHI_ADDRESS\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"accSushiPerShare\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"}],\"name\":\"allowance\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"approve\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"baseToken\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"bonusBalance\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"burn\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"burnEndowmentMultiplier\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"burnFrom\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"burnLimit\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_beneficiary\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"claimAndBurnOnBehalf\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"decimals\",\"outputs\":[{\"internalType\":\"uint8\",\"name\":\"\",\"type\":\"uint8\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"subtractedValue\",\"type\":\"uint256\"}],\"name\":\"decreaseAllowance\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_tokenMoveAmount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_tokenMoveEthAmount\",\"type\":\"uint256\"}],\"name\":\"deposit\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_account\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_tokenMoveAmount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_tokenMoveEthAmount\",\"type\":\"uint256\"}],\"name\":\"depositOnBehalf\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"depositSLP\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"emergencyTransferExecute\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_token\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_destination\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"emergencyTransferTimelockSet\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"emergencyWithdraw\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"endowmentBalance\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"endowmentPercent\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_account\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"getBurnValue\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_account\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"getBurnValuePortions\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getDPYPerMoveToken\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"}],\"name\":\"getRoleAdmin\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"internalType\":\"uint256\",\"name\":\"index\",\"type\":\"uint256\"}],\"name\":\"getRoleMember\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"}],\"name\":\"getRoleMemberCount\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"_receiver\",\"type\":\"address\"}],\"name\":\"getTreasuryFees\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"grantRole\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"hasRole\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"inceptionTimestamp\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"addedValue\",\"type\":\"uint256\"}],\"name\":\"increaseAllowance\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"string\",\"name\":\"name\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"symbol\",\"type\":\"string\"}],\"name\":\"initialize\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"maxBurnAmount\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"mint\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"name\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"}],\"name\":\"nonces\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"pause\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"paused\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_account\",\"type\":\"address\"}],\"name\":\"pendingBonus\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"deadline\",\"type\":\"uint256\"},{\"internalType\":\"uint8\",\"name\":\"v\",\"type\":\"uint8\"},{\"internalType\":\"bytes32\",\"name\":\"r\",\"type\":\"bytes32\"},{\"internalType\":\"bytes32\",\"name\":\"s\",\"type\":\"bytes32\"}],\"name\":\"permit\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_account\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"rebateBonus\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"},{\"internalType\":\"bool\",\"name\":\"_sushiHarvest\",\"type\":\"bool\"}],\"name\":\"receiveProfit\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"renounceRole\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"revokeRole\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_burnLimit\",\"type\":\"uint256\"}],\"name\":\"setBurnLimit\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_burnEndowmentMultiplier\",\"type\":\"uint256\"}],\"name\":\"setEndowmentBurnMultiplier\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_endowmentPercent\",\"type\":\"uint256\"}],\"name\":\"setEndowmentPercentage\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_address\",\"type\":\"address\"}],\"name\":\"setPowercardFragment\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_feeSushi\",\"type\":\"uint256\"}],\"name\":\"setSushiFee\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_swapRouterAddress\",\"type\":\"address\"}],\"name\":\"setSwapRouterAddress\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"string\",\"name\":\"_symbol\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"_name\",\"type\":\"string\"}],\"name\":\"setTokenName\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_account\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"spendBonus\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"sushiHarvestedBlock\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"sushiRewardTally\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"symbol\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"tokenMoveAddress\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"tokenMoveEthLPAddress\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"tokenMoveEthLPWeight\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"tokenMoveWeight\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_account\",\"type\":\"address\"}],\"name\":\"totalBonus\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalStakedMove\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalStakedMoveEthLP\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalSupply\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"recipient\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"transfer\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"recipient\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"transferFrom\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"treasuryFeeSushi\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"treasurySushi\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"unpause\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"userInfoMove\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"rewardTally\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"userInfoMoveEthLP\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"rewardTally\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_tokenMoveAmount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_tokenMoveEthAmount\",\"type\":\"uint256\"}],\"name\":\"withdraw\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_account\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_tokenMoveAmount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_tokenMoveEthAmount\",\"type\":\"uint256\"}],\"name\":\"withdrawOnBehalf\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"withdrawSLP\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}]","ContractName":"SmartTreasuryV3_1","CompilerVersion":"v0.6.12+commit.27d51765","OptimizationUsed":"1","Runs":"200","ConstructorArguments":"","EVMVersion":"Default","Library":"","LicenseType":"MIT","Proxy":"0","Implementation":"","SwarmSource":"ipfs://b3cde19ad9cdb35012c36563b0af9ff707b7db68138e14d430114818884d53c7"}]}