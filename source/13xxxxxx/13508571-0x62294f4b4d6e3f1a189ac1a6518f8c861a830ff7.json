{"status":"1","message":"OK","result":[{"SourceCode":"{{\r\n  \"language\": \"Solidity\",\r\n  \"sources\": {\r\n    \"contracts/lib/erc20-proxy/MirrorERC20Relayer.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: GPL-3.0-or-later\\npragma solidity 0.8.6;\\n\\nimport {IMirrorERC20ProxyStorage} from \\\"./interface/IMirrorERC20ProxyStorage.sol\\\";\\nimport {IMirrorERC20Relayer} from \\\"./interface/IMirrorERC20Relayer.sol\\\";\\nimport {IERC20, IERC20Events} from \\\"../../external/interface/IERC20.sol\\\";\\n\\n/**\\n * @title MirrorERC20Relayer\\n * @author MirrorXYZ\\n * @notice This contract implements the logic for erc20 proxies. It attaches\\n * msg.sender to the calls that require the original sender of the transaction.\\n */\\ncontract MirrorERC20Relayer is IERC20, IMirrorERC20Relayer, IERC20Events {\\n    /// @notice The address that holds the proxy's storage\\n    address public immutable proxyStorage;\\n\\n    // keccak256(\\\"Permit(address owner,address spender,uint256 value,uint256 nonce,uint256 deadline)\\\");\\n    bytes32 public constant PERMIT_TYPEHASH =\\n        0x6e71edae12b1b97f4d1f60370fef10105fa2faae0126114a169c64845d6126c9;\\n\\n    /**\\n     * @notice Assign immutable proxy storage address.\\n     * @param proxyStorage_ - the address that holds the proxy's storage\\n     */\\n    constructor(address proxyStorage_) {\\n        proxyStorage = proxyStorage_;\\n    }\\n\\n    /**\\n     * @notice Initialize metadata variables and register the proxy operator.\\n     * This function is called by a proxy during its deployment. The function\\n     * is only callable during deployment.\\n     */\\n    function initialize(\\n        address operator_,\\n        string memory name_,\\n        string memory symbol_,\\n        uint256 totalSupply_,\\n        uint8 decimals_\\n    ) external override {\\n        // Ensure that this function is only callable during contract deployment\\n        assembly {\\n            if extcodesize(address()) {\\n                revert(0, 0)\\n            }\\n        }\\n\\n        IMirrorERC20ProxyStorage(proxyStorage).initialize(\\n            operator_,\\n            name_,\\n            symbol_,\\n            totalSupply_,\\n            decimals_\\n        );\\n    }\\n\\n    function operator() external view override returns (address) {\\n        return IMirrorERC20ProxyStorage(proxyStorage).operator();\\n    }\\n\\n    // ============ EIP-20 Methods ============\\n\\n    function name() external view override returns (string memory) {\\n        return IMirrorERC20ProxyStorage(proxyStorage).name();\\n    }\\n\\n    function symbol() external view override returns (string memory) {\\n        return IMirrorERC20ProxyStorage(proxyStorage).symbol();\\n    }\\n\\n    function decimals() external view override returns (uint8) {\\n        return IMirrorERC20ProxyStorage(proxyStorage).decimals();\\n    }\\n\\n    function totalSupply() external view override returns (uint256) {\\n        return IMirrorERC20ProxyStorage(proxyStorage).totalSupply();\\n    }\\n\\n    function balanceOf(address _owner)\\n        external\\n        view\\n        override\\n        returns (uint256)\\n    {\\n        return IMirrorERC20ProxyStorage(proxyStorage).balanceOf(_owner);\\n    }\\n\\n    function allowance(address _owner, address spender)\\n        external\\n        view\\n        override\\n        returns (uint256)\\n    {\\n        return\\n            IMirrorERC20ProxyStorage(proxyStorage).allowance(_owner, spender);\\n    }\\n\\n    function approve(address spender, uint256 value)\\n        external\\n        override\\n        returns (bool)\\n    {\\n        emit Approval(msg.sender, spender, value);\\n\\n        return\\n            IMirrorERC20ProxyStorage(proxyStorage).approve(\\n                msg.sender,\\n                spender,\\n                value\\n            );\\n    }\\n\\n    function mint(address to, uint256 value) external override {\\n        emit Transfer(address(0), to, value);\\n\\n        return\\n            IMirrorERC20ProxyStorage(proxyStorage).mint(msg.sender, to, value);\\n    }\\n\\n    function transfer(address to, uint256 value)\\n        external\\n        override\\n        returns (bool)\\n    {\\n        emit Transfer(msg.sender, to, value);\\n\\n        return\\n            IMirrorERC20ProxyStorage(proxyStorage).transfer(\\n                msg.sender,\\n                to,\\n                value\\n            );\\n    }\\n\\n    function transferFrom(\\n        address from,\\n        address to,\\n        uint256 value\\n    ) external override returns (bool) {\\n        emit Transfer(from, to, value);\\n\\n        return\\n            IMirrorERC20ProxyStorage(proxyStorage).transferFrom(\\n                from,\\n                to,\\n                value\\n            );\\n    }\\n\\n    function DOMAIN_SEPARATOR() public view returns (bytes32) {\\n        return IMirrorERC20ProxyStorage(proxyStorage).DOMAIN_SEPARATOR();\\n    }\\n\\n    function permit(\\n        address owner,\\n        address spender,\\n        uint256 value,\\n        uint256 deadline,\\n        uint8 v,\\n        bytes32 r,\\n        bytes32 s\\n    ) external {\\n        emit Approval(owner, spender, value);\\n\\n        return\\n            IMirrorERC20ProxyStorage(proxyStorage).permit(\\n                owner,\\n                spender,\\n                value,\\n                deadline,\\n                v,\\n                r,\\n                s\\n            );\\n    }\\n\\n    function nonces(address owner) external view returns (uint256) {\\n        return IMirrorERC20ProxyStorage(proxyStorage).nonces(owner);\\n    }\\n\\n    function setOperator(address newOperator) external {\\n        return\\n            IMirrorERC20ProxyStorage(proxyStorage).setOperator(\\n                msg.sender,\\n                newOperator\\n            );\\n    }\\n}\\n\"\r\n    },\r\n    \"contracts/lib/erc20-proxy/interface/IMirrorERC20ProxyStorage.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: GPL-3.0-or-later\\npragma solidity 0.8.6;\\n\\ninterface IMirrorERC20ProxyStorageEvents {\\n    /// @notice Emitted when a new proxy is initialized\\n    event NewProxy(address indexed proxy, address indexed operator);\\n}\\n\\ninterface IMirrorERC20ProxyStorage {\\n    function operator() external view returns (address);\\n\\n    function DOMAIN_SEPARATOR() external view returns (bytes32);\\n\\n    /// @notice Register new proxy and initialize metadata\\n    function initialize(\\n        address operator_,\\n        string memory name_,\\n        string memory symbol_,\\n        uint256 totalSupply_,\\n        uint8 decimals_\\n    ) external returns (address);\\n\\n    function name() external view returns (string memory);\\n\\n    function symbol() external view returns (string memory);\\n\\n    function decimals() external view returns (uint8);\\n\\n    function totalSupply() external view returns (uint256);\\n\\n    function balanceOf(address owner) external view returns (uint256);\\n\\n    function allowance(address owner, address spender)\\n        external\\n        view\\n        returns (uint256);\\n\\n    function approve(\\n        address sender,\\n        address spender,\\n        uint256 value\\n    ) external returns (bool);\\n\\n    function transfer(\\n        address sender,\\n        address to,\\n        uint256 value\\n    ) external returns (bool);\\n\\n    function transferFrom(\\n        address from,\\n        address to,\\n        uint256 amount\\n    ) external returns (bool);\\n\\n    function permit(\\n        address owner,\\n        address spender,\\n        uint256 value,\\n        uint256 deadline,\\n        uint8 v,\\n        bytes32 r,\\n        bytes32 s\\n    ) external;\\n\\n    function nonces(address owner) external view returns (uint256);\\n\\n    function mint(\\n        address sender,\\n        address to,\\n        uint256 amount\\n    ) external;\\n\\n    function setOperator(address sender, address newOperator) external;\\n}\\n\"\r\n    },\r\n    \"contracts/lib/erc20-proxy/interface/IMirrorERC20Relayer.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: GPL-3.0-or-later\\npragma solidity 0.8.6;\\n\\ninterface IMirrorERC20Relayer {\\n    function operator() external view returns (address);\\n\\n    function initialize(\\n        address operator_,\\n        string memory name_,\\n        string memory symbol_,\\n        uint256 totalSupply_,\\n        uint8 decimals_\\n    ) external;\\n\\n    function mint(address to, uint256 value) external;\\n}\\n\"\r\n    },\r\n    \"contracts/external/interface/IERC20.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: GPL-3.0-or-later\\npragma solidity 0.8.6;\\n\\ninterface IERC20 {\\n    /// @notice EIP-20 token name for this token\\n    function name() external returns (string calldata);\\n\\n    /// @notice EIP-20 token symbol for this token\\n    function symbol() external returns (string calldata);\\n\\n    /// @notice EIP-20 token decimals for this token\\n    function decimals() external returns (uint8);\\n\\n    /// @notice EIP-20 total number of tokens in circulation\\n    function totalSupply() external returns (uint256);\\n\\n    /// @notice EIP-20 official record of token balances for each account\\n    function balanceOf(address account) external returns (uint256);\\n\\n    /// @notice EIP-20 allowance amounts on behalf of others\\n    function allowance(address owner, address spender)\\n        external\\n        returns (uint256);\\n\\n    /// @notice EIP-20 approves _spender_ to transfer up to _value_ multiple times\\n    function approve(address spender, uint256 value) external returns (bool);\\n\\n    /// @notice EIP-20 transfer _value_ to _to_ from _msg.sender_\\n    function transfer(address to, uint256 value) external returns (bool);\\n\\n    /// @notice EIP-20 transfer _value_ to _to_ from _from_\\n    function transferFrom(\\n        address from,\\n        address to,\\n        uint256 value\\n    ) external returns (bool);\\n}\\n\\ninterface IERC20Events {\\n    /// @notice EIP-20 Mint event\\n    event Mint(address indexed to, uint256 amount);\\n\\n    /// @notice EIP-20 approval event\\n    event Approval(\\n        address indexed from,\\n        address indexed spender,\\n        uint256 value\\n    );\\n\\n    /// @notice EIP-20 transfer event\\n    event Transfer(address indexed from, address indexed to, uint256 value);\\n}\\n\"\r\n    }\r\n  },\r\n  \"settings\": {\r\n    \"optimizer\": {\r\n      \"enabled\": true,\r\n      \"runs\": 2000\r\n    },\r\n    \"outputSelection\": {\r\n      \"*\": {\r\n        \"*\": [\r\n          \"evm.bytecode\",\r\n          \"evm.deployedBytecode\",\r\n          \"devdoc\",\r\n          \"userdoc\",\r\n          \"metadata\",\r\n          \"abi\"\r\n        ]\r\n      }\r\n    },\r\n    \"libraries\": {}\r\n  }\r\n}}","ABI":"[{\"inputs\":[{\"internalType\":\"address\",\"name\":\"proxyStorage_\",\"type\":\"address\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Approval\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"Mint\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Transfer\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"DOMAIN_SEPARATOR\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"PERMIT_TYPEHASH\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_owner\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"}],\"name\":\"allowance\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"approve\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_owner\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"decimals\",\"outputs\":[{\"internalType\":\"uint8\",\"name\":\"\",\"type\":\"uint8\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"operator_\",\"type\":\"address\"},{\"internalType\":\"string\",\"name\":\"name_\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"symbol_\",\"type\":\"string\"},{\"internalType\":\"uint256\",\"name\":\"totalSupply_\",\"type\":\"uint256\"},{\"internalType\":\"uint8\",\"name\":\"decimals_\",\"type\":\"uint8\"}],\"name\":\"initialize\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"mint\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"name\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"}],\"name\":\"nonces\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"operator\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"deadline\",\"type\":\"uint256\"},{\"internalType\":\"uint8\",\"name\":\"v\",\"type\":\"uint8\"},{\"internalType\":\"bytes32\",\"name\":\"r\",\"type\":\"bytes32\"},{\"internalType\":\"bytes32\",\"name\":\"s\",\"type\":\"bytes32\"}],\"name\":\"permit\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"proxyStorage\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOperator\",\"type\":\"address\"}],\"name\":\"setOperator\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"symbol\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalSupply\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"transfer\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"transferFrom\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}]","ContractName":"MirrorERC20Relayer","CompilerVersion":"v0.8.6+commit.11564f7e","OptimizationUsed":"1","Runs":"2000","ConstructorArguments":"000000000000000000000000ae5464b6ea28f7c434c83662a9276a3eb17a2b2d","EVMVersion":"Default","Library":"","LicenseType":"","Proxy":"0","Implementation":"","SwarmSource":""}]}