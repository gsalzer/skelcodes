{"status":"1","message":"OK","result":[{"SourceCode":"// SPDX-License-Identifier: MIT\r\n\r\npragma solidity ^0.6.6;\r\n\r\n/**\r\n * @title SafeMath\r\n * @dev Unsigned math operations with safety checks that revert on error\r\n */\r\nlibrary SafeMath {\r\n    /**\r\n    * @dev Multiplies two unsigned integers, reverts on overflow.\r\n    */\r\n    function mul(uint256 a, uint256 b) internal pure returns (uint256){\r\n        if (a == 0) {\r\n            return 0;\r\n        }\r\n        uint256 c = a * b;\r\n        require(c / a == b,\"Calculation error\");\r\n        return c;\r\n    }\r\n\r\n    /**\r\n    * @dev Integer division of two unsigned integers truncating the qu\r\n    * otient, reverts on division by zero.\r\n    */\r\n    function div(uint256 a, uint256 b) internal pure returns (uint256){\r\n        // Solidity only automatically asserts when dividing by 0\r\n        require(b > 0,\"Calculation error\");\r\n        uint256 c = a / b;\r\n        // assert(a == b * c + a % b); // There is no case in which this doesn't hold\r\n        return c;\r\n    }\r\n\r\n    /**\r\n    * @dev Subtracts two unsigned integers, reverts on overflow (i.e. if subtrahend is greater than minuend).\r\n    */\r\n    function sub(uint256 a, uint256 b) internal pure returns (uint256){\r\n        require(b <= a,\"Calculation error\");\r\n        uint256 c = a - b;\r\n        return c;\r\n    }\r\n\r\n    /**\r\n    * @dev Adds two unsigned integers, reverts on overflow.\r\n    */\r\n    function add(uint256 a, uint256 b) internal pure returns (uint256){\r\n        uint256 c = a + b;\r\n        require(c >= a,\"Calculation error\");\r\n        return c;\r\n    }\r\n\r\n    /**\r\n    * @dev Divides two unsigned integers and returns the remainder (unsigned integer modulo),\r\n    * reverts when dividing by zero.\r\n    */\r\n    function mod(uint256 a, uint256 b) internal pure returns (uint256){\r\n        require(b != 0,\"Calculation error\");\r\n        return a % b;\r\n    }\r\n}\r\n\r\ninterface IERC20 {\r\n    function transfer(address to, uint256 value) external returns (bool);\r\n    function approve(address spender, uint256 value) external returns (bool);\r\n    function transferFrom(address from, address to, uint256 value) external returns (bool);\r\n    function totalSupply() external view returns (uint256);\r\n    function balanceOf(address who) external view returns (uint256);\r\n    function allowance(address owner, address spender) external view returns (uint256);\r\n    event Transfer(address indexed from, address indexed to, uint256 value);\r\n    event Approval(address indexed owner, address indexed spender, uint256 value);\r\n}\r\n\r\ninterface IUniswap {\r\n    \r\n    function addLiquidityETH(\r\n        address token,\r\n        uint amountTokenDesired,\r\n        uint amountTokenMin,\r\n        uint amountETHMin,\r\n        address to,\r\n        uint deadline\r\n    ) external payable returns (uint amountToken, uint amountETH, uint liquidity);\r\n    \r\n}\r\n\r\n /**\r\n * @title AddLiquidity\r\n * @dev AddLiquidity Contract to add liquidity \r\n */\r\n contract AddLiquidity {\r\n     \r\n    using SafeMath for uint256;\r\n    \r\n    // variable to store uniswap router contract address\r\n    address internal constant UNISWAP_ROUTER_ADDRESS = 0x7a250d5630B4cF539739dF2C5dAcb4c659F2488D;\r\n    \r\n    // variable for total added liquidity in contract\r\n    uint256 public totalAddedLiquidityInContract = 0;\r\n\r\n    IUniswap public uniswap;\r\n\r\n    constructor() public {\r\n        uniswap = IUniswap(UNISWAP_ROUTER_ADDRESS);\r\n    }\r\n    \r\n    function addLiq(address token,uint amountTokenDesired) external payable returns(bool) {\r\n        require(token != address(0),\"Invalid Token Address, Please Try Again!!!\"); \r\n        require(amountTokenDesired > 0,\"Amount is invalid or zero, Please Try Again!!!\");\r\n        IERC20(token).transferFrom(msg.sender, address(this), amountTokenDesired);\r\n        IERC20(token).approve(UNISWAP_ROUTER_ADDRESS, amountTokenDesired);\r\n        uniswap.addLiquidityETH{value: msg.value}(token, amountTokenDesired, 10000000000000000, 10000000000000000,msg.sender,now + 3600);\r\n        totalAddedLiquidityInContract = totalAddedLiquidityInContract.add(amountTokenDesired);\r\n        return true;\r\n    }\r\n        \r\n    receive() external payable {}\r\n    fallback() external payable {}\r\n }","ABI":"[{\"inputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"stateMutability\":\"payable\",\"type\":\"fallback\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"token\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amountTokenDesired\",\"type\":\"uint256\"}],\"name\":\"addLiq\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalAddedLiquidityInContract\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"uniswap\",\"outputs\":[{\"internalType\":\"contract IUniswap\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"stateMutability\":\"payable\",\"type\":\"receive\"}]","ContractName":"AddLiquidity","CompilerVersion":"v0.6.12+commit.27d51765","OptimizationUsed":"1","Runs":"200","ConstructorArguments":"","EVMVersion":"Default","Library":"","LicenseType":"MIT","Proxy":"0","Implementation":"","SwarmSource":"ipfs://fbf58e77cd190a2f11dae41c8a017c2cd40372e801b0eaa8cb4433ceb701db97"}]}