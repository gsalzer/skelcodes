{"status":"1","message":"OK","result":[{"SourceCode":"{{\r\n  \"language\": \"Solidity\",\r\n  \"sources\": {\r\n    \"contracts/incentives/DistributionManager.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: agpl-3.0\\npragma solidity 0.7.5;\\npragma experimental ABIEncoderV2;\\n\\nimport {IAaveDistributionManager} from '../interfaces/IAaveDistributionManager.sol';\\nimport {SafeMath} from '../lib/SafeMath.sol';\\nimport {DistributionTypes} from '../lib/DistributionTypes.sol';\\n\\n/**\\n * @title DistributionManager\\n * @notice Accounting contract to manage multiple staking distributions\\n * @author Aave\\n **/\\ncontract DistributionManager is IAaveDistributionManager {\\n  using SafeMath for uint256;\\n\\n  struct AssetData {\\n    uint104 emissionPerSecond;\\n    uint104 index;\\n    uint40 lastUpdateTimestamp;\\n    mapping(address => uint256) users;\\n  }\\n\\n  address public immutable EMISSION_MANAGER;\\n\\n  uint8 public constant PRECISION = 18;\\n\\n  mapping(address => AssetData) public assets;\\n\\n  uint256 internal _distributionEnd;\\n\\n  modifier onlyEmissionManager() {\\n    require(msg.sender == EMISSION_MANAGER, 'ONLY_EMISSION_MANAGER');\\n    _;\\n  }\\n\\n  constructor(address emissionManager) {\\n    EMISSION_MANAGER = emissionManager;\\n  }\\n\\n  /// @inheritdoc IAaveDistributionManager\\n  function setDistributionEnd(uint256 distributionEnd) external override onlyEmissionManager {\\n    _distributionEnd = distributionEnd;\\n    emit DistributionEndUpdated(distributionEnd);\\n  }\\n\\n  /// @inheritdoc IAaveDistributionManager\\n  function getDistributionEnd() external view override returns (uint256) {\\n    return _distributionEnd;\\n  }\\n\\n  /// @inheritdoc IAaveDistributionManager\\n  function DISTRIBUTION_END() external view override returns (uint256) {\\n    return _distributionEnd;\\n  }\\n\\n  /// @inheritdoc IAaveDistributionManager\\n  function getUserAssetData(address user, address asset) public view override returns (uint256) {\\n    return assets[asset].users[user];\\n  }\\n\\n  /// @inheritdoc IAaveDistributionManager\\n  function getAssetData(address asset) public view override returns (uint256, uint256, uint256) {\\n    return (assets[asset].index, assets[asset].emissionPerSecond, assets[asset].lastUpdateTimestamp);\\n  }\\n\\n  /**\\n   * @dev Configure the assets for a specific emission\\n   * @param assetsConfigInput The array of each asset configuration\\n   **/\\n  function _configureAssets(DistributionTypes.AssetConfigInput[] memory assetsConfigInput)\\n    internal\\n  {\\n    for (uint256 i = 0; i < assetsConfigInput.length; i++) {\\n      AssetData storage assetConfig = assets[assetsConfigInput[i].underlyingAsset];\\n\\n      _updateAssetStateInternal(\\n        assetsConfigInput[i].underlyingAsset,\\n        assetConfig,\\n        assetsConfigInput[i].totalStaked\\n      );\\n\\n      assetConfig.emissionPerSecond = assetsConfigInput[i].emissionPerSecond;\\n\\n      emit AssetConfigUpdated(\\n        assetsConfigInput[i].underlyingAsset,\\n        assetsConfigInput[i].emissionPerSecond\\n      );\\n    }\\n  }\\n\\n  /**\\n   * @dev Updates the state of one distribution, mainly rewards index and timestamp\\n   * @param asset The address of the asset being updated\\n   * @param assetConfig Storage pointer to the distribution's config\\n   * @param totalStaked Current total of staked assets for this distribution\\n   * @return The new distribution index\\n   **/\\n  function _updateAssetStateInternal(\\n    address asset,\\n    AssetData storage assetConfig,\\n    uint256 totalStaked\\n  ) internal returns (uint256) {\\n    uint256 oldIndex = assetConfig.index;\\n    uint256 emissionPerSecond = assetConfig.emissionPerSecond;\\n    uint128 lastUpdateTimestamp = assetConfig.lastUpdateTimestamp;\\n\\n    if (block.timestamp == lastUpdateTimestamp) {\\n      return oldIndex;\\n    }\\n\\n    uint256 newIndex =\\n      _getAssetIndex(oldIndex, emissionPerSecond, lastUpdateTimestamp, totalStaked);\\n\\n    if (newIndex != oldIndex) {\\n      require(uint104(newIndex) == newIndex, 'Index overflow');\\n      //optimization: storing one after another saves one SSTORE\\n      assetConfig.index = uint104(newIndex);\\n      assetConfig.lastUpdateTimestamp = uint40(block.timestamp);\\n      emit AssetIndexUpdated(asset, newIndex);\\n    } else {\\n      assetConfig.lastUpdateTimestamp = uint40(block.timestamp);\\n    }\\n\\n    return newIndex;\\n  }\\n\\n  /**\\n   * @dev Updates the state of an user in a distribution\\n   * @param user The user's address\\n   * @param asset The address of the reference asset of the distribution\\n   * @param stakedByUser Amount of tokens staked by the user in the distribution at the moment\\n   * @param totalStaked Total tokens staked in the distribution\\n   * @return The accrued rewards for the user until the moment\\n   **/\\n  function _updateUserAssetInternal(\\n    address user,\\n    address asset,\\n    uint256 stakedByUser,\\n    uint256 totalStaked\\n  ) internal returns (uint256) {\\n    AssetData storage assetData = assets[asset];\\n    uint256 userIndex = assetData.users[user];\\n    uint256 accruedRewards = 0;\\n\\n    uint256 newIndex = _updateAssetStateInternal(asset, assetData, totalStaked);\\n\\n    if (userIndex != newIndex) {\\n      if (stakedByUser != 0) {\\n        accruedRewards = _getRewards(stakedByUser, newIndex, userIndex);\\n      }\\n\\n      assetData.users[user] = newIndex;\\n      emit UserIndexUpdated(user, asset, newIndex);\\n    }\\n\\n    return accruedRewards;\\n  }\\n\\n  /**\\n   * @dev Used by \\\"frontend\\\" stake contracts to update the data of an user when claiming rewards from there\\n   * @param user The address of the user\\n   * @param stakes List of structs of the user data related with his stake\\n   * @return The accrued rewards for the user until the moment\\n   **/\\n  function _claimRewards(address user, DistributionTypes.UserStakeInput[] memory stakes)\\n    internal\\n    returns (uint256)\\n  {\\n    uint256 accruedRewards = 0;\\n\\n    for (uint256 i = 0; i < stakes.length; i++) {\\n      accruedRewards = accruedRewards.add(\\n        _updateUserAssetInternal(\\n          user,\\n          stakes[i].underlyingAsset,\\n          stakes[i].stakedByUser,\\n          stakes[i].totalStaked\\n        )\\n      );\\n    }\\n\\n    return accruedRewards;\\n  }\\n\\n  /**\\n   * @dev Return the accrued rewards for an user over a list of distribution\\n   * @param user The address of the user\\n   * @param stakes List of structs of the user data related with his stake\\n   * @return The accrued rewards for the user until the moment\\n   **/\\n  function _getUnclaimedRewards(address user, DistributionTypes.UserStakeInput[] memory stakes)\\n    internal\\n    view\\n    returns (uint256)\\n  {\\n    uint256 accruedRewards = 0;\\n\\n    for (uint256 i = 0; i < stakes.length; i++) {\\n      AssetData storage assetConfig = assets[stakes[i].underlyingAsset];\\n      uint256 assetIndex =\\n        _getAssetIndex(\\n          assetConfig.index,\\n          assetConfig.emissionPerSecond,\\n          assetConfig.lastUpdateTimestamp,\\n          stakes[i].totalStaked\\n        );\\n\\n      accruedRewards = accruedRewards.add(\\n        _getRewards(stakes[i].stakedByUser, assetIndex, assetConfig.users[user])\\n      );\\n    }\\n    return accruedRewards;\\n  }\\n\\n  /**\\n   * @dev Internal function for the calculation of user's rewards on a distribution\\n   * @param principalUserBalance Amount staked by the user on a distribution\\n   * @param reserveIndex Current index of the distribution\\n   * @param userIndex Index stored for the user, representation his staking moment\\n   * @return The rewards\\n   **/\\n  function _getRewards(\\n    uint256 principalUserBalance,\\n    uint256 reserveIndex,\\n    uint256 userIndex\\n  ) internal pure returns (uint256) {\\n    return principalUserBalance.mul(reserveIndex.sub(userIndex)) / 10**uint256(PRECISION);\\n  }\\n\\n  /**\\n   * @dev Calculates the next value of an specific distribution index, with validations\\n   * @param currentIndex Current index of the distribution\\n   * @param emissionPerSecond Representing the total rewards distributed per second per asset unit, on the distribution\\n   * @param lastUpdateTimestamp Last moment this distribution was updated\\n   * @param totalBalance of tokens considered for the distribution\\n   * @return The new index.\\n   **/\\n  function _getAssetIndex(\\n    uint256 currentIndex,\\n    uint256 emissionPerSecond,\\n    uint128 lastUpdateTimestamp,\\n    uint256 totalBalance\\n  ) internal view returns (uint256) {\\n    uint256 distributionEnd = _distributionEnd;\\n    if (\\n      emissionPerSecond == 0 ||\\n      totalBalance == 0 ||\\n      lastUpdateTimestamp == block.timestamp ||\\n      lastUpdateTimestamp >= distributionEnd\\n    ) {\\n      return currentIndex;\\n    }\\n\\n    uint256 currentTimestamp =\\n      block.timestamp > distributionEnd ? distributionEnd : block.timestamp;\\n    uint256 timeDelta = currentTimestamp.sub(lastUpdateTimestamp);\\n    return\\n      emissionPerSecond.mul(timeDelta).mul(10**uint256(PRECISION)).div(totalBalance).add(\\n        currentIndex\\n      );\\n  }\\n}\\n\"\r\n    },\r\n    \"contracts/interfaces/IAaveDistributionManager.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: agpl-3.0\\npragma solidity 0.7.5;\\npragma experimental ABIEncoderV2;\\n\\nimport {DistributionTypes} from '../lib/DistributionTypes.sol';\\n\\ninterface IAaveDistributionManager {\\n  \\n  event AssetConfigUpdated(address indexed asset, uint256 emission);\\n  event AssetIndexUpdated(address indexed asset, uint256 index);\\n  event UserIndexUpdated(address indexed user, address indexed asset, uint256 index);\\n  event DistributionEndUpdated(uint256 newDistributionEnd);\\n\\n  /**\\n  * @dev Sets the end date for the distribution\\n  * @param distributionEnd The end date timestamp\\n  **/\\n  function setDistributionEnd(uint256 distributionEnd) external;\\n\\n  /**\\n  * @dev Gets the end date for the distribution\\n  * @return The end of the distribution\\n  **/\\n  function getDistributionEnd() external view returns (uint256);\\n\\n  /**\\n  * @dev for backwards compatibility with the previous DistributionManager used\\n  * @return The end of the distribution\\n  **/\\n  function DISTRIBUTION_END() external view returns(uint256);\\n\\n   /**\\n   * @dev Returns the data of an user on a distribution\\n   * @param user Address of the user\\n   * @param asset The address of the reference asset of the distribution\\n   * @return The new index\\n   **/\\n   function getUserAssetData(address user, address asset) external view returns (uint256);\\n\\n   /**\\n   * @dev Returns the configuration of the distribution for a certain asset\\n   * @param asset The address of the reference asset of the distribution\\n   * @return The asset index, the emission per second and the last updated timestamp\\n   **/\\n   function getAssetData(address asset) external view returns (uint256, uint256, uint256);\\n}\\n\"\r\n    },\r\n    \"contracts/lib/SafeMath.sol\": {\r\n      \"content\": \"\\n// SPDX-License-Identifier: agpl-3.0\\npragma solidity ^0.7.5;\\n\\n/// @title Optimized overflow and underflow safe math operations\\n/// @notice Contains methods for doing math operations that revert on overflow or underflow for minimal gas cost\\n/// inspired by uniswap V3\\nlibrary SafeMath {\\n    /// @notice Returns x + y, reverts if sum overflows uint256\\n    /// @param x The augend\\n    /// @param y The addend\\n    /// @return z The sum of x and y\\n    function add(uint256 x, uint256 y) internal pure returns (uint256 z) {\\n        require((z = x + y) >= x);\\n    }\\n\\n    /// @notice Returns x - y, reverts if underflows\\n    /// @param x The minuend\\n    /// @param y The subtrahend\\n    /// @return z The difference of x and y\\n    function sub(uint256 x, uint256 y) internal pure returns (uint256 z) {\\n        require((z = x - y) <= x);\\n    }\\n\\n    /// @notice Returns x * y, reverts if overflows\\n    /// @param x The multiplicand\\n    /// @param y The multiplier\\n    /// @return z The product of x and y\\n    function mul(uint256 x, uint256 y) internal pure returns (uint256 z) {\\n        require(x == 0 || (z = x * y) / x == y);\\n    }\\n\\n    function div(uint256 x, uint256 y) internal pure returns(uint256) {\\n        // no need to check for division by zero - solidity already reverts\\n        return x / y;\\n    }\\n}\"\r\n    },\r\n    \"contracts/lib/DistributionTypes.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: agpl-3.0\\npragma solidity 0.7.5;\\npragma experimental ABIEncoderV2;\\n\\nlibrary DistributionTypes {\\n  struct AssetConfigInput {\\n    uint104 emissionPerSecond;\\n    uint256 totalStaked;\\n    address underlyingAsset;\\n  }\\n\\n  struct UserStakeInput {\\n    address underlyingAsset;\\n    uint256 stakedByUser;\\n    uint256 totalStaked;\\n  }\\n}\\n\"\r\n    },\r\n    \"contracts/incentives/StakedTokenIncentivesController.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: agpl-3.0\\npragma solidity 0.7.5;\\npragma experimental ABIEncoderV2;\\n\\nimport {SafeERC20} from '@aave/aave-stake/contracts/lib/SafeERC20.sol';\\nimport {SafeMath} from '../lib/SafeMath.sol';\\nimport {DistributionTypes} from '../lib/DistributionTypes.sol';\\nimport {VersionedInitializable} from '@aave/aave-stake/contracts/utils/VersionedInitializable.sol';\\nimport {DistributionManager} from './DistributionManager.sol';\\nimport {IStakedTokenWithConfig} from '../interfaces/IStakedTokenWithConfig.sol';\\nimport {IERC20} from '@aave/aave-stake/contracts/interfaces/IERC20.sol';\\nimport {IScaledBalanceToken} from '../interfaces/IScaledBalanceToken.sol';\\nimport {IAaveIncentivesController} from '../interfaces/IAaveIncentivesController.sol';\\n\\n/**\\n * @title StakedTokenIncentivesController\\n * @notice Distributor contract for rewards to the Aave protocol, using a staked token as rewards asset.\\n * The contract stakes the rewards before redistributing them to the Aave protocol participants.\\n * The reference staked token implementation is at https://github.com/aave/aave-stake-v2\\n * @author Aave\\n **/\\ncontract StakedTokenIncentivesController is\\n  IAaveIncentivesController,\\n  VersionedInitializable,\\n  DistributionManager\\n{\\n  using SafeMath for uint256;\\n  using SafeERC20 for IERC20;\\n\\n  uint256 public constant REVISION = 2;\\n\\n  IStakedTokenWithConfig public immutable STAKE_TOKEN;\\n\\n  mapping(address => uint256) internal _usersUnclaimedRewards;\\n\\n  // this mapping allows whitelisted addresses to claim on behalf of others\\n  // useful for contracts that hold tokens to be rewarded but don't have any native logic to claim Liquidity Mining rewards\\n  mapping(address => address) internal _authorizedClaimers;\\n\\n  modifier onlyAuthorizedClaimers(address claimer, address user) {\\n    require(_authorizedClaimers[user] == claimer, 'CLAIMER_UNAUTHORIZED');\\n    _;\\n  }\\n\\n  constructor(IStakedTokenWithConfig stakeToken, address emissionManager)\\n    DistributionManager(emissionManager)\\n  {\\n    STAKE_TOKEN = stakeToken;\\n  }\\n\\n  /**\\n   * @dev Initialize IStakedTokenIncentivesController. Empty after REVISION 1, but maintains the expected interface.\\n   **/\\n  function initialize(address) external initializer {}\\n\\n  /// @inheritdoc IAaveIncentivesController\\n  function configureAssets(address[] calldata assets, uint256[] calldata emissionsPerSecond)\\n    external\\n    override\\n    onlyEmissionManager\\n  {\\n    require(assets.length == emissionsPerSecond.length, 'INVALID_CONFIGURATION');\\n\\n    DistributionTypes.AssetConfigInput[] memory assetsConfig =\\n      new DistributionTypes.AssetConfigInput[](assets.length);\\n\\n    for (uint256 i = 0; i < assets.length; i++) {\\n      assetsConfig[i].underlyingAsset = assets[i];\\n      assetsConfig[i].emissionPerSecond = uint104(emissionsPerSecond[i]);\\n\\n      require(assetsConfig[i].emissionPerSecond == emissionsPerSecond[i], 'INVALID_CONFIGURATION');\\n\\n      assetsConfig[i].totalStaked = IScaledBalanceToken(assets[i]).scaledTotalSupply();\\n    }\\n    _configureAssets(assetsConfig);\\n  }\\n\\n  /// @inheritdoc IAaveIncentivesController\\n  function handleAction(\\n    address user,\\n    uint256 totalSupply,\\n    uint256 userBalance\\n  ) external override {\\n    uint256 accruedRewards = _updateUserAssetInternal(user, msg.sender, userBalance, totalSupply);\\n    if (accruedRewards != 0) {\\n      _usersUnclaimedRewards[user] = _usersUnclaimedRewards[user].add(accruedRewards);\\n      emit RewardsAccrued(user, accruedRewards);\\n    }\\n  }\\n\\n  /// @inheritdoc IAaveIncentivesController\\n  function getRewardsBalance(address[] calldata assets, address user)\\n    external\\n    view\\n    override\\n    returns (uint256)\\n  {\\n    uint256 unclaimedRewards = _usersUnclaimedRewards[user];\\n\\n    DistributionTypes.UserStakeInput[] memory userState =\\n      new DistributionTypes.UserStakeInput[](assets.length);\\n    for (uint256 i = 0; i < assets.length; i++) {\\n      userState[i].underlyingAsset = assets[i];\\n      (userState[i].stakedByUser, userState[i].totalStaked) = IScaledBalanceToken(assets[i])\\n        .getScaledUserBalanceAndSupply(user);\\n    }\\n    unclaimedRewards = unclaimedRewards.add(_getUnclaimedRewards(user, userState));\\n    return unclaimedRewards;\\n  }\\n\\n  /// @inheritdoc IAaveIncentivesController\\n  function claimRewards(\\n    address[] calldata assets,\\n    uint256 amount,\\n    address to\\n  ) external override returns (uint256) {\\n    require(to != address(0), 'INVALID_TO_ADDRESS');\\n    return _claimRewards(assets, amount, msg.sender, msg.sender, to);\\n  }\\n\\n  /// @inheritdoc IAaveIncentivesController\\n  function claimRewardsOnBehalf(\\n    address[] calldata assets,\\n    uint256 amount,\\n    address user,\\n    address to\\n  ) external override onlyAuthorizedClaimers(msg.sender, user) returns (uint256) {\\n    require(user != address(0), 'INVALID_USER_ADDRESS');\\n    require(to != address(0), 'INVALID_TO_ADDRESS');\\n    return _claimRewards(assets, amount, msg.sender, user, to);\\n  }\\n\\n  /// @inheritdoc IAaveIncentivesController\\n  function claimRewardsToSelf(address[] calldata assets, uint256 amount)\\n    external\\n    override\\n    returns (uint256)\\n  {\\n    return _claimRewards(assets, amount, msg.sender, msg.sender, msg.sender);\\n  }\\n\\n  /**\\n   * @dev Claims reward for an user on behalf, on all the assets of the lending pool, accumulating the pending rewards.\\n   * @param amount Amount of rewards to claim\\n   * @param user Address to check and claim rewards\\n   * @param to Address that will be receiving the rewards\\n   * @return Rewards claimed\\n   **/\\n\\n  /// @inheritdoc IAaveIncentivesController\\n  function setClaimer(address user, address caller) external override onlyEmissionManager {\\n    _authorizedClaimers[user] = caller;\\n    emit ClaimerSet(user, caller);\\n  }\\n\\n  /// @inheritdoc IAaveIncentivesController\\n  function getClaimer(address user) external view override returns (address) {\\n    return _authorizedClaimers[user];\\n  }\\n\\n  /// @inheritdoc IAaveIncentivesController\\n  function getUserUnclaimedRewards(address _user) external view override returns (uint256) {\\n    return _usersUnclaimedRewards[_user];\\n  }\\n\\n  /// @inheritdoc IAaveIncentivesController\\n  function REWARD_TOKEN() external view override returns (address) {\\n    return address(STAKE_TOKEN);\\n  }\\n\\n  /**\\n   * @dev returns the revision of the implementation contract\\n   */\\n  function getRevision() internal pure override returns (uint256) {\\n    return REVISION;\\n  }\\n\\n  /**\\n   * @dev Claims reward for an user on behalf, on all the assets of the lending pool, accumulating the pending rewards.\\n   * @param amount Amount of rewards to claim\\n   * @param user Address to check and claim rewards\\n   * @param to Address that will be receiving the rewards\\n   * @return Rewards claimed\\n   **/\\n  function _claimRewards(\\n    address[] calldata assets,\\n    uint256 amount,\\n    address claimer,\\n    address user,\\n    address to\\n  ) internal returns (uint256) {\\n    if (amount == 0) {\\n      return 0;\\n    }\\n    uint256 unclaimedRewards = _usersUnclaimedRewards[user];\\n\\n    DistributionTypes.UserStakeInput[] memory userState =\\n      new DistributionTypes.UserStakeInput[](assets.length);\\n    for (uint256 i = 0; i < assets.length; i++) {\\n      userState[i].underlyingAsset = assets[i];\\n      (userState[i].stakedByUser, userState[i].totalStaked) = IScaledBalanceToken(assets[i])\\n        .getScaledUserBalanceAndSupply(user);\\n    }\\n\\n    uint256 accruedRewards = _claimRewards(user, userState);\\n    if (accruedRewards != 0) {\\n      unclaimedRewards = unclaimedRewards.add(accruedRewards);\\n      emit RewardsAccrued(user, accruedRewards);\\n    }\\n\\n    if (unclaimedRewards == 0) {\\n      return 0;\\n    }\\n\\n    uint256 amountToClaim = amount > unclaimedRewards ? unclaimedRewards : amount;\\n    _usersUnclaimedRewards[user] = unclaimedRewards - amountToClaim; // Safe due to the previous line\\n\\n    STAKE_TOKEN.stake(to, amountToClaim);\\n    emit RewardsClaimed(user, to, claimer, amountToClaim);\\n\\n    return amountToClaim;\\n  }\\n}\\n\"\r\n    },\r\n    \"@aave/aave-stake/contracts/lib/SafeERC20.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity 0.7.5;\\n\\nimport {IERC20} from '../interfaces/IERC20.sol';\\nimport {SafeMath} from './SafeMath.sol';\\nimport {Address} from './Address.sol';\\n\\n/**\\n * @title SafeERC20\\n * @dev From https://github.com/OpenZeppelin/openzeppelin-contracts\\n * Wrappers around ERC20 operations that throw on failure (when the token\\n * contract returns false). Tokens that return no value (and instead revert or\\n * throw on failure) are also supported, non-reverting calls are assumed to be\\n * successful.\\n * To use this library you can add a `using SafeERC20 for IERC20;` statement to your contract,\\n * which allows you to call the safe operations as `token.safeTransfer(...)`, etc.\\n */\\nlibrary SafeERC20 {\\n  using SafeMath for uint256;\\n  using Address for address;\\n\\n  function safeTransfer(\\n    IERC20 token,\\n    address to,\\n    uint256 value\\n  ) internal {\\n    callOptionalReturn(token, abi.encodeWithSelector(token.transfer.selector, to, value));\\n  }\\n\\n  function safeTransferFrom(\\n    IERC20 token,\\n    address from,\\n    address to,\\n    uint256 value\\n  ) internal {\\n    callOptionalReturn(token, abi.encodeWithSelector(token.transferFrom.selector, from, to, value));\\n  }\\n\\n  function safeApprove(\\n    IERC20 token,\\n    address spender,\\n    uint256 value\\n  ) internal {\\n    require(\\n      (value == 0) || (token.allowance(address(this), spender) == 0),\\n      'SafeERC20: approve from non-zero to non-zero allowance'\\n    );\\n    callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, value));\\n  }\\n\\n  function callOptionalReturn(IERC20 token, bytes memory data) private {\\n    require(address(token).isContract(), 'SafeERC20: call to non-contract');\\n\\n    // solhint-disable-next-line avoid-low-level-calls\\n    (bool success, bytes memory returndata) = address(token).call(data);\\n    require(success, 'SafeERC20: low-level call failed');\\n\\n    if (returndata.length > 0) {\\n      // Return data is optional\\n      // solhint-disable-next-line max-line-length\\n      require(abi.decode(returndata, (bool)), 'SafeERC20: ERC20 operation did not succeed');\\n    }\\n  }\\n}\\n\"\r\n    },\r\n    \"@aave/aave-stake/contracts/utils/VersionedInitializable.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: agpl-3.0\\npragma solidity 0.7.5;\\n\\n/**\\n * @title VersionedInitializable\\n *\\n * @dev Helper contract to support initializer functions. To use it, replace\\n * the constructor with a function that has the `initializer` modifier.\\n * WARNING: Unlike constructors, initializer functions must be manually\\n * invoked. This applies both to deploying an Initializable contract, as well\\n * as extending an Initializable contract via inheritance.\\n * WARNING: When used with inheritance, manual care must be taken to not invoke\\n * a parent initializer twice, or ensure that all initializers are idempotent,\\n * because this is not dealt with automatically as with constructors.\\n *\\n * @author Aave, inspired by the OpenZeppelin Initializable contract\\n */\\nabstract contract VersionedInitializable {\\n  /**\\n   * @dev Indicates that the contract has been initialized.\\n   */\\n  uint256 internal lastInitializedRevision = 0;\\n\\n  /**\\n   * @dev Modifier to use in the initializer function of a contract.\\n   */\\n  modifier initializer() {\\n    uint256 revision = getRevision();\\n    require(revision > lastInitializedRevision, 'Contract instance has already been initialized');\\n\\n    lastInitializedRevision = revision;\\n\\n    _;\\n  }\\n\\n  /// @dev returns the revision number of the contract.\\n  /// Needs to be defined in the inherited class as a constant.\\n  function getRevision() internal pure virtual returns (uint256);\\n\\n  // Reserved storage space to allow for layout changes in the future.\\n  uint256[50] private ______gap;\\n}\\n\"\r\n    },\r\n    \"contracts/interfaces/IStakedTokenWithConfig.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: AGPL-3.0\\npragma solidity 0.7.5;\\n\\nimport {IStakedToken} from '@aave/aave-stake/contracts/interfaces/IStakedToken.sol';\\n\\ninterface IStakedTokenWithConfig is IStakedToken {\\n  function STAKED_TOKEN() external view returns(address);\\n}\"\r\n    },\r\n    \"@aave/aave-stake/contracts/interfaces/IERC20.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\npragma solidity 0.7.5;\\n\\n/**\\n * @dev Interface of the ERC20 standard as defined in the EIP.\\n * From https://github.com/OpenZeppelin/openzeppelin-contracts\\n */\\ninterface IERC20 {\\n  /**\\n   * @dev Returns the amount of tokens in existence.\\n   */\\n  function totalSupply() external view returns (uint256);\\n\\n  /**\\n   * @dev Returns the amount of tokens owned by `account`.\\n   */\\n  function balanceOf(address account) external view returns (uint256);\\n\\n  /**\\n   * @dev Moves `amount` tokens from the caller's account to `recipient`.\\n   *\\n   * Returns a boolean value indicating whether the operation succeeded.\\n   *\\n   * Emits a {Transfer} event.\\n   */\\n  function transfer(address recipient, uint256 amount) external returns (bool);\\n\\n  /**\\n   * @dev Returns the remaining number of tokens that `spender` will be\\n   * allowed to spend on behalf of `owner` through {transferFrom}. This is\\n   * zero by default.\\n   *\\n   * This value changes when {approve} or {transferFrom} are called.\\n   */\\n  function allowance(address owner, address spender) external view returns (uint256);\\n\\n  /**\\n   * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\\n   *\\n   * Returns a boolean value indicating whether the operation succeeded.\\n   *\\n   * IMPORTANT: Beware that changing an allowance with this method brings the risk\\n   * that someone may use both the old and the new allowance by unfortunate\\n   * transaction ordering. One possible solution to mitigate this race\\n   * condition is to first reduce the spender's allowance to 0 and set the\\n   * desired value afterwards:\\n   * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\\n   *\\n   * Emits an {Approval} event.\\n   */\\n  function approve(address spender, uint256 amount) external returns (bool);\\n\\n  /**\\n   * @dev Moves `amount` tokens from `sender` to `recipient` using the\\n   * allowance mechanism. `amount` is then deducted from the caller's\\n   * allowance.\\n   *\\n   * Returns a boolean value indicating whether the operation succeeded.\\n   *\\n   * Emits a {Transfer} event.\\n   */\\n  function transferFrom(\\n    address sender,\\n    address recipient,\\n    uint256 amount\\n  ) external returns (bool);\\n\\n  /**\\n   * @dev Emitted when `value` tokens are moved from one account (`from`) to\\n   * another (`to`).\\n   *\\n   * Note that `value` may be zero.\\n   */\\n  event Transfer(address indexed from, address indexed to, uint256 value);\\n\\n  /**\\n   * @dev Emitted when the allowance of a `spender` for an `owner` is set by\\n   * a call to {approve}. `value` is the new allowance.\\n   */\\n  event Approval(address indexed owner, address indexed spender, uint256 value);\\n}\\n\"\r\n    },\r\n    \"contracts/interfaces/IScaledBalanceToken.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: agpl-3.0\\npragma solidity 0.7.5;\\n\\ninterface IScaledBalanceToken {\\n  /**\\n   * @dev Returns the scaled balance of the user. The scaled balance is the sum of all the\\n   * updated stored balance divided by the reserve's liquidity index at the moment of the update\\n   * @param user The user whose balance is calculated\\n   * @return The scaled balance of the user\\n   **/\\n  function scaledBalanceOf(address user) external view returns (uint256);\\n\\n  /**\\n   * @dev Returns the scaled balance of the user and the scaled total supply.\\n   * @param user The address of the user\\n   * @return The scaled balance of the user\\n   * @return The scaled balance and the scaled total supply\\n   **/\\n  function getScaledUserBalanceAndSupply(address user) external view returns (uint256, uint256);\\n\\n  /**\\n   * @dev Returns the scaled total supply of the token. Represents sum(debt/index)\\n   * @return The scaled total supply\\n   **/\\n  function scaledTotalSupply() external view returns (uint256);\\n}\\n\"\r\n    },\r\n    \"contracts/interfaces/IAaveIncentivesController.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: agpl-3.0\\npragma solidity 0.7.5;\\n\\npragma experimental ABIEncoderV2;\\n\\nimport {IAaveDistributionManager} from '../interfaces/IAaveDistributionManager.sol';\\n\\ninterface IAaveIncentivesController is IAaveDistributionManager {\\n  \\n  event RewardsAccrued(address indexed user, uint256 amount);\\n  \\n  event RewardsClaimed(\\n    address indexed user,\\n    address indexed to,\\n    address indexed claimer,\\n    uint256 amount\\n  );\\n\\n  event ClaimerSet(address indexed user, address indexed claimer);\\n\\n  /**\\n   * @dev Whitelists an address to claim the rewards on behalf of another address\\n   * @param user The address of the user\\n   * @param claimer The address of the claimer\\n   */\\n  function setClaimer(address user, address claimer) external;\\n\\n  /**\\n   * @dev Returns the whitelisted claimer for a certain address (0x0 if not set)\\n   * @param user The address of the user\\n   * @return The claimer address\\n   */\\n  function getClaimer(address user) external view returns (address);\\n\\n  /**\\n   * @dev Configure assets for a certain rewards emission\\n   * @param assets The assets to incentivize\\n   * @param emissionsPerSecond The emission for each asset\\n   */\\n  function configureAssets(address[] calldata assets, uint256[] calldata emissionsPerSecond)\\n    external;\\n\\n\\n  /**\\n   * @dev Called by the corresponding asset on any update that affects the rewards distribution\\n   * @param asset The address of the user\\n   * @param userBalance The balance of the user of the asset in the lending pool\\n   * @param totalSupply The total supply of the asset in the lending pool\\n   **/\\n  function handleAction(\\n    address asset,\\n    uint256 userBalance,\\n    uint256 totalSupply\\n  ) external;\\n\\n  /**\\n   * @dev Returns the total of rewards of an user, already accrued + not yet accrued\\n   * @param user The address of the user\\n   * @return The rewards\\n   **/\\n  function getRewardsBalance(address[] calldata assets, address user)\\n    external\\n    view\\n    returns (uint256);\\n\\n  /**\\n   * @dev Claims reward for an user, on all the assets of the lending pool, accumulating the pending rewards\\n   * @param amount Amount of rewards to claim\\n   * @param to Address that will be receiving the rewards\\n   * @return Rewards claimed\\n   **/\\n  function claimRewards(\\n    address[] calldata assets,\\n    uint256 amount,\\n    address to\\n  ) external returns (uint256);\\n\\n  /**\\n   * @dev Claims reward for an user on behalf, on all the assets of the lending pool, accumulating the pending rewards. The caller must\\n   * be whitelisted via \\\"allowClaimOnBehalf\\\" function by the RewardsAdmin role manager\\n   * @param amount Amount of rewards to claim\\n   * @param user Address to check and claim rewards\\n   * @param to Address that will be receiving the rewards\\n   * @return Rewards claimed\\n   **/\\n  function claimRewardsOnBehalf(\\n    address[] calldata assets,\\n    uint256 amount,\\n    address user,\\n    address to\\n  ) external returns (uint256);\\n\\n  /**\\n   * @dev Claims rewards for a user, on the specified assets of the lending pool, distributing the pending rewards to self\\n   * @param assets Incentivized assets on which to claim rewards\\n   * @param amount Amount of rewards to claim\\n   * @return Rewards claimed\\n   **/\\n  function claimRewardsToSelf(address[] calldata assets, uint256 amount) external returns (uint256);\\n\\n  /**\\n   * @dev returns the unclaimed rewards of the user\\n   * @param user the address of the user\\n   * @return the unclaimed user rewards\\n   */\\n  function getUserUnclaimedRewards(address user) external view returns (uint256);\\n\\n  /**\\n  * @dev for backward compatibility with previous implementation of the Incentives controller\\n  */\\n  function REWARD_TOKEN() external view returns (address);\\n}\\n\"\r\n    },\r\n    \"@aave/aave-stake/contracts/lib/SafeMath.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: agpl-3.0\\npragma solidity 0.7.5;\\n\\n/**\\n * @dev From https://github.com/OpenZeppelin/openzeppelin-contracts\\n * Wrappers over Solidity's arithmetic operations with added overflow\\n * checks.\\n *\\n * Arithmetic operations in Solidity wrap on overflow. This can easily result\\n * in bugs, because programmers usually assume that an overflow raises an\\n * error, which is the standard behavior in high level programming languages.\\n * `SafeMath` restores this intuition by reverting the transaction when an\\n * operation overflows.\\n *\\n * Using this library instead of the unchecked operations eliminates an entire\\n * class of bugs, so it's recommended to use it always.\\n */\\nlibrary SafeMath {\\n  /**\\n   * @dev Returns the addition of two unsigned integers, reverting on\\n   * overflow.\\n   *\\n   * Counterpart to Solidity's `+` operator.\\n   *\\n   * Requirements:\\n   * - Addition cannot overflow.\\n   */\\n  function add(uint256 a, uint256 b) internal pure returns (uint256) {\\n    uint256 c = a + b;\\n    require(c >= a, 'SafeMath: addition overflow');\\n\\n    return c;\\n  }\\n\\n  /**\\n   * @dev Returns the subtraction of two unsigned integers, reverting on\\n   * overflow (when the result is negative).\\n   *\\n   * Counterpart to Solidity's `-` operator.\\n   *\\n   * Requirements:\\n   * - Subtraction cannot overflow.\\n   */\\n  function sub(uint256 a, uint256 b) internal pure returns (uint256) {\\n    return sub(a, b, 'SafeMath: subtraction overflow');\\n  }\\n\\n  /**\\n   * @dev Returns the subtraction of two unsigned integers, reverting with custom message on\\n   * overflow (when the result is negative).\\n   *\\n   * Counterpart to Solidity's `-` operator.\\n   *\\n   * Requirements:\\n   * - Subtraction cannot overflow.\\n   */\\n  function sub(\\n    uint256 a,\\n    uint256 b,\\n    string memory errorMessage\\n  ) internal pure returns (uint256) {\\n    require(b <= a, errorMessage);\\n    uint256 c = a - b;\\n\\n    return c;\\n  }\\n\\n  /**\\n   * @dev Returns the multiplication of two unsigned integers, reverting on\\n   * overflow.\\n   *\\n   * Counterpart to Solidity's `*` operator.\\n   *\\n   * Requirements:\\n   * - Multiplication cannot overflow.\\n   */\\n  function mul(uint256 a, uint256 b) internal pure returns (uint256) {\\n    // Gas optimization: this is cheaper than requiring 'a' not being zero, but the\\n    // benefit is lost if 'b' is also tested.\\n    // See: https://github.com/OpenZeppelin/openzeppelin-contracts/pull/522\\n    if (a == 0) {\\n      return 0;\\n    }\\n\\n    uint256 c = a * b;\\n    require(c / a == b, 'SafeMath: multiplication overflow');\\n\\n    return c;\\n  }\\n\\n  /**\\n   * @dev Returns the integer division of two unsigned integers. Reverts on\\n   * division by zero. The result is rounded towards zero.\\n   *\\n   * Counterpart to Solidity's `/` operator. Note: this function uses a\\n   * `revert` opcode (which leaves remaining gas untouched) while Solidity\\n   * uses an invalid opcode to revert (consuming all remaining gas).\\n   *\\n   * Requirements:\\n   * - The divisor cannot be zero.\\n   */\\n  function div(uint256 a, uint256 b) internal pure returns (uint256) {\\n    return div(a, b, 'SafeMath: division by zero');\\n  }\\n\\n  /**\\n   * @dev Returns the integer division of two unsigned integers. Reverts with custom message on\\n   * division by zero. The result is rounded towards zero.\\n   *\\n   * Counterpart to Solidity's `/` operator. Note: this function uses a\\n   * `revert` opcode (which leaves remaining gas untouched) while Solidity\\n   * uses an invalid opcode to revert (consuming all remaining gas).\\n   *\\n   * Requirements:\\n   * - The divisor cannot be zero.\\n   */\\n  function div(\\n    uint256 a,\\n    uint256 b,\\n    string memory errorMessage\\n  ) internal pure returns (uint256) {\\n    // Solidity only automatically asserts when dividing by 0\\n    require(b > 0, errorMessage);\\n    uint256 c = a / b;\\n    // assert(a == b * c + a % b); // There is no case in which this doesn't hold\\n\\n    return c;\\n  }\\n\\n  /**\\n   * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\\n   * Reverts when dividing by zero.\\n   *\\n   * Counterpart to Solidity's `%` operator. This function uses a `revert`\\n   * opcode (which leaves remaining gas untouched) while Solidity uses an\\n   * invalid opcode to revert (consuming all remaining gas).\\n   *\\n   * Requirements:\\n   * - The divisor cannot be zero.\\n   */\\n  function mod(uint256 a, uint256 b) internal pure returns (uint256) {\\n    return mod(a, b, 'SafeMath: modulo by zero');\\n  }\\n\\n  /**\\n   * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\\n   * Reverts with custom message when dividing by zero.\\n   *\\n   * Counterpart to Solidity's `%` operator. This function uses a `revert`\\n   * opcode (which leaves remaining gas untouched) while Solidity uses an\\n   * invalid opcode to revert (consuming all remaining gas).\\n   *\\n   * Requirements:\\n   * - The divisor cannot be zero.\\n   */\\n  function mod(\\n    uint256 a,\\n    uint256 b,\\n    string memory errorMessage\\n  ) internal pure returns (uint256) {\\n    require(b != 0, errorMessage);\\n    return a % b;\\n  }\\n}\\n\"\r\n    },\r\n    \"@aave/aave-stake/contracts/lib/Address.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\npragma solidity 0.7.5;\\n\\n/**\\n * @dev Collection of functions related to the address type\\n * From https://github.com/OpenZeppelin/openzeppelin-contracts\\n */\\nlibrary Address {\\n  /**\\n   * @dev Returns true if `account` is a contract.\\n   *\\n   * [IMPORTANT]\\n   * ====\\n   * It is unsafe to assume that an address for which this function returns\\n   * false is an externally-owned account (EOA) and not a contract.\\n   *\\n   * Among others, `isContract` will return false for the following\\n   * types of addresses:\\n   *\\n   *  - an externally-owned account\\n   *  - a contract in construction\\n   *  - an address where a contract will be created\\n   *  - an address where a contract lived, but was destroyed\\n   * ====\\n   */\\n  function isContract(address account) internal view returns (bool) {\\n    // According to EIP-1052, 0x0 is the value returned for not-yet created accounts\\n    // and 0xc5d2460186f7233c927e7db2dcc703c0e500b653ca82273b7bfad8045d85a470 is returned\\n    // for accounts without code, i.e. `keccak256('')`\\n    bytes32 codehash;\\n    bytes32 accountHash = 0xc5d2460186f7233c927e7db2dcc703c0e500b653ca82273b7bfad8045d85a470;\\n    // solhint-disable-next-line no-inline-assembly\\n    assembly {\\n      codehash := extcodehash(account)\\n    }\\n    return (codehash != accountHash && codehash != 0x0);\\n  }\\n\\n  /**\\n   * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\\n   * `recipient`, forwarding all available gas and reverting on errors.\\n   *\\n   * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\\n   * of certain opcodes, possibly making contracts go over the 2300 gas limit\\n   * imposed by `transfer`, making them unable to receive funds via\\n   * `transfer`. {sendValue} removes this limitation.\\n   *\\n   * https://diligence.consensys.net/posts/2019/09/stop-using-soliditys-transfer-now/[Learn more].\\n   *\\n   * IMPORTANT: because control is transferred to `recipient`, care must be\\n   * taken to not create reentrancy vulnerabilities. Consider using\\n   * {ReentrancyGuard} or the\\n   * https://solidity.readthedocs.io/en/v0.5.11/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\\n   */\\n  function sendValue(address payable recipient, uint256 amount) internal {\\n    require(address(this).balance >= amount, 'Address: insufficient balance');\\n\\n    // solhint-disable-next-line avoid-low-level-calls, avoid-call-value\\n    (bool success, ) = recipient.call{value: amount}('');\\n    require(success, 'Address: unable to send value, recipient may have reverted');\\n  }\\n}\\n\"\r\n    },\r\n    \"@aave/aave-stake/contracts/interfaces/IStakedToken.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: agpl-3.0\\npragma solidity 0.7.5;\\n\\ninterface IStakedToken {\\n  \\n  function stake(address to, uint256 amount) external;\\n\\n  function redeem(address to, uint256 amount) external;\\n\\n  function cooldown() external;\\n\\n  function claimRewards(address to, uint256 amount) external;\\n}\\n\"\r\n    },\r\n    \"contracts/proposals/ProposalIncentivesExecutor.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: AGPL-3.0\\npragma solidity 0.7.5;\\npragma abicoder v2;\\n\\nimport {IERC20} from '@aave/aave-stake/contracts/interfaces/IERC20.sol';\\nimport {ILendingPoolAddressesProvider} from '../interfaces/ILendingPoolAddressesProvider.sol';\\nimport {ILendingPoolConfigurator} from '../interfaces/ILendingPoolConfigurator.sol';\\nimport {IAaveIncentivesController} from '../interfaces/IAaveIncentivesController.sol';\\nimport {IAaveEcosystemReserveController} from '../interfaces/IAaveEcosystemReserveController.sol';\\nimport {IProposalIncentivesExecutor} from '../interfaces/IProposalIncentivesExecutor.sol';\\nimport {DistributionTypes} from '../lib/DistributionTypes.sol';\\nimport {DataTypes} from '../utils/DataTypes.sol';\\nimport {ILendingPoolData} from '../interfaces/ILendingPoolData.sol';\\nimport {IATokenDetailed} from '../interfaces/IATokenDetailed.sol';\\nimport {PercentageMath} from '../utils/PercentageMath.sol';\\nimport {SafeMath} from '../lib/SafeMath.sol';\\n\\ncontract ProposalIncentivesExecutor is IProposalIncentivesExecutor {\\n  using SafeMath for uint256;\\n  using PercentageMath for uint256;\\n\\n  address constant AAVE_TOKEN = 0x7Fc66500c84A76Ad7e9c93437bFc5Ac33E2DDaE9;\\n  address constant POOL_CONFIGURATOR = 0x311Bb771e4F8952E6Da169b425E7e92d6Ac45756;\\n  address constant ADDRESSES_PROVIDER = 0xB53C1a33016B2DC2fF3653530bfF1848a515c8c5;\\n  address constant LENDING_POOL = 0x7d2768dE32b0b80b7a3454c06BdAc94A69DDc7A9;\\n  address constant ECO_RESERVE_ADDRESS = 0x1E506cbb6721B83B1549fa1558332381Ffa61A93;\\n  address constant INCENTIVES_CONTROLLER_PROXY_ADDRESS = 0xd784927Ff2f95ba542BfC824c8a8a98F3495f6b5;\\n  address constant INCENTIVES_CONTROLLER_IMPL_ADDRESS = 0x83D055D382f25e6793099713505c68a5C7535a35;\\n\\n  uint256 constant DISTRIBUTION_DURATION = 7776000; // 90 days\\n  uint256 constant DISTRIBUTION_AMOUNT = 198000000000000000000000; // 198000 AAVE during 90 days\\n\\n  function execute(\\n    address[6] memory aTokenImplementations,\\n    address[6] memory variableDebtImplementations\\n  ) external override {\\n    uint256 tokensCounter;\\n\\n    address[] memory assets = new address[](12);\\n\\n    // Reserves Order: DAI/GUSD/USDC/USDT/WBTC/WETH\\n    address payable[6] memory reserves =\\n      [\\n        0x6B175474E89094C44Da98b954EedeAC495271d0F,\\n        0x056Fd409E1d7A124BD7017459dFEa2F387b6d5Cd,\\n        0xA0b86991c6218b36c1d19D4a2e9Eb0cE3606eB48,\\n        0xdAC17F958D2ee523a2206206994597C13D831ec7,\\n        0x2260FAC5E5542a773Aa44fBCfeDf7C193bc2C599,\\n        0xC02aaA39b223FE8D0A0e5C4F27eAD9083C756Cc2\\n      ];\\n\\n    uint256[] memory emissions = new uint256[](12);\\n\\n    emissions[0] = 1706018518518520; //aDAI\\n    emissions[1] = 1706018518518520; //vDebtDAI\\n    emissions[2] = 92939814814815; //aGUSD\\n    emissions[3] = 92939814814815; //vDebtGUSD\\n    emissions[4] = 5291203703703700; //aUSDC\\n    emissions[5] = 5291203703703700; //vDebtUSDC\\n    emissions[6] = 3293634259259260; //aUSDT\\n    emissions[7] = 3293634259259260; //vDebtUSDT\\n    emissions[8] = 1995659722222220; //aWBTC\\n    emissions[9] = 105034722222222; //vDebtWBTC\\n    emissions[10] = 2464942129629630; //aETH\\n    emissions[11] = 129733796296296; //vDebtWETH\\n\\n    ILendingPoolConfigurator poolConfigurator = ILendingPoolConfigurator(POOL_CONFIGURATOR);\\n    IAaveIncentivesController incentivesController =\\n      IAaveIncentivesController(INCENTIVES_CONTROLLER_PROXY_ADDRESS);\\n    IAaveEcosystemReserveController ecosystemReserveController =\\n      IAaveEcosystemReserveController(ECO_RESERVE_ADDRESS);\\n\\n    ILendingPoolAddressesProvider provider = ILendingPoolAddressesProvider(ADDRESSES_PROVIDER);\\n\\n    //adding the incentives controller proxy to the addresses provider\\n    provider.setAddress(keccak256('INCENTIVES_CONTROLLER'), INCENTIVES_CONTROLLER_PROXY_ADDRESS);\\n\\n    //updating the implementation of the incentives controller proxy\\n    provider.setAddressAsProxy(keccak256('INCENTIVES_CONTROLLER'), INCENTIVES_CONTROLLER_IMPL_ADDRESS);\\n\\n    require(\\n      aTokenImplementations.length == variableDebtImplementations.length &&\\n        aTokenImplementations.length == reserves.length,\\n      'ARRAY_LENGTH_MISMATCH'\\n    );\\n\\n    // Update each reserve AToken implementation, Debt implementation, and prepare incentives configuration input\\n    for (uint256 x = 0; x < reserves.length; x++) {\\n      require(\\n        IATokenDetailed(aTokenImplementations[x]).UNDERLYING_ASSET_ADDRESS() == reserves[x],\\n        'AToken underlying does not match'\\n      );\\n      require(\\n        IATokenDetailed(variableDebtImplementations[x]).UNDERLYING_ASSET_ADDRESS() == reserves[x],\\n        'Debt Token underlying does not match'\\n      );\\n      DataTypes.ReserveData memory reserveData =\\n        ILendingPoolData(LENDING_POOL).getReserveData(reserves[x]);\\n\\n      // Update aToken impl\\n      poolConfigurator.updateAToken(reserves[x], aTokenImplementations[x]);\\n\\n      // Update variable debt impl\\n      poolConfigurator.updateVariableDebtToken(reserves[x], variableDebtImplementations[x]);\\n\\n      assets[tokensCounter++] = reserveData.aTokenAddress;\\n\\n      // Configure variable debt token at incentives controller\\n      assets[tokensCounter++] = reserveData.variableDebtTokenAddress;\\n\\n    }\\n    // Transfer AAVE funds to the Incentives Controller\\n    ecosystemReserveController.transfer(\\n      AAVE_TOKEN,\\n      INCENTIVES_CONTROLLER_PROXY_ADDRESS,\\n      DISTRIBUTION_AMOUNT\\n    );\\n\\n    // Enable incentives in aTokens and Variable Debt tokens\\n    incentivesController.configureAssets(assets, emissions);\\n\\n    // Sets the end date for the distribution\\n    incentivesController.setDistributionEnd(block.timestamp + DISTRIBUTION_DURATION);\\n  }\\n}\\n\"\r\n    },\r\n    \"contracts/interfaces/ILendingPoolAddressesProvider.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: agpl-3.0\\npragma solidity 0.7.5;\\n\\n/**\\n * @title LendingPoolAddressesProvider contract\\n * @dev Main registry of addresses part of or connected to the protocol, including permissioned roles\\n * - Acting also as factory of proxies and admin of those, so with right to change its implementations\\n * - Owned by the Aave Governance\\n * @author Aave\\n **/\\ninterface ILendingPoolAddressesProvider {\\n  event MarketIdSet(string newMarketId);\\n  event LendingPoolUpdated(address indexed newAddress);\\n  event ConfigurationAdminUpdated(address indexed newAddress);\\n  event EmergencyAdminUpdated(address indexed newAddress);\\n  event LendingPoolConfiguratorUpdated(address indexed newAddress);\\n  event LendingPoolCollateralManagerUpdated(address indexed newAddress);\\n  event PriceOracleUpdated(address indexed newAddress);\\n  event LendingRateOracleUpdated(address indexed newAddress);\\n  event ProxyCreated(bytes32 id, address indexed newAddress);\\n  event AddressSet(bytes32 id, address indexed newAddress, bool hasProxy);\\n\\n  function getMarketId() external view returns (string memory);\\n\\n  function setMarketId(string calldata marketId) external;\\n\\n  function setAddress(bytes32 id, address newAddress) external;\\n\\n  function setAddressAsProxy(bytes32 id, address impl) external;\\n\\n  function getAddress(bytes32 id) external view returns (address);\\n\\n  function getLendingPool() external view returns (address);\\n\\n  function setLendingPoolImpl(address pool) external;\\n\\n  function getLendingPoolConfigurator() external view returns (address);\\n\\n  function setLendingPoolConfiguratorImpl(address configurator) external;\\n\\n  function getLendingPoolCollateralManager() external view returns (address);\\n\\n  function setLendingPoolCollateralManager(address manager) external;\\n\\n  function getPoolAdmin() external view returns (address);\\n\\n  function setPoolAdmin(address admin) external;\\n\\n  function getEmergencyAdmin() external view returns (address);\\n\\n  function setEmergencyAdmin(address admin) external;\\n\\n  function getPriceOracle() external view returns (address);\\n\\n  function setPriceOracle(address priceOracle) external;\\n\\n  function getLendingRateOracle() external view returns (address);\\n\\n  function setLendingRateOracle(address lendingRateOracle) external;\\n}\\n\"\r\n    },\r\n    \"contracts/interfaces/ILendingPoolConfigurator.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: agpl-3.0\\npragma solidity 0.7.5;\\n\\ninterface ILendingPoolConfigurator {\\n  function updateAToken(address reserve, address implementation) external;\\n\\n  function updateVariableDebtToken(address reserve, address implementation) external;\\n}\\n\"\r\n    },\r\n    \"contracts/interfaces/IAaveEcosystemReserveController.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: agpl-3.0\\npragma solidity 0.7.5;\\n\\ninterface IAaveEcosystemReserveController {\\n  function AAVE_RESERVE_ECOSYSTEM() external view returns (address);\\n\\n  function approve(\\n    address token,\\n    address recipient,\\n    uint256 amount\\n  ) external;\\n\\n  function owner() external view returns (address);\\n\\n  function renounceOwnership() external;\\n\\n  function transfer(\\n    address token,\\n    address recipient,\\n    uint256 amount\\n  ) external;\\n\\n  function transferOwnership(address newOwner) external;\\n}\\n\"\r\n    },\r\n    \"contracts/interfaces/IProposalIncentivesExecutor.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: AGPL-3.0\\npragma solidity 0.7.5;\\n\\ninterface IProposalIncentivesExecutor {\\n  function execute(\\n    address[6] memory aTokenImplementations,\\n    address[6] memory variableDebtImplementation\\n  ) external;\\n}\\n\"\r\n    },\r\n    \"contracts/utils/DataTypes.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: agpl-3.0\\npragma solidity 0.7.5;\\n\\nlibrary DataTypes {\\n  // refer to the whitepaper, section 1.1 basic concepts for a formal description of these properties.\\n  struct ReserveData {\\n    //stores the reserve configuration\\n    ReserveConfigurationMap configuration;\\n    //the liquidity index. Expressed in ray\\n    uint128 liquidityIndex;\\n    //variable borrow index. Expressed in ray\\n    uint128 variableBorrowIndex;\\n    //the current supply rate. Expressed in ray\\n    uint128 currentLiquidityRate;\\n    //the current variable borrow rate. Expressed in ray\\n    uint128 currentVariableBorrowRate;\\n    //the current stable borrow rate. Expressed in ray\\n    uint128 currentStableBorrowRate;\\n    uint40 lastUpdateTimestamp;\\n    //tokens addresses\\n    address aTokenAddress;\\n    address stableDebtTokenAddress;\\n    address variableDebtTokenAddress;\\n    //address of the interest rate strategy\\n    address interestRateStrategyAddress;\\n    //the id of the reserve. Represents the position in the list of the active reserves\\n    uint8 id;\\n  }\\n\\n  struct ReserveConfigurationMap {\\n    //bit 0-15: LTV\\n    //bit 16-31: Liq. threshold\\n    //bit 32-47: Liq. bonus\\n    //bit 48-55: Decimals\\n    //bit 56: Reserve is active\\n    //bit 57: reserve is frozen\\n    //bit 58: borrowing is enabled\\n    //bit 59: stable rate borrowing enabled\\n    //bit 60-63: reserved\\n    //bit 64-79: reserve factor\\n    uint256 data;\\n  }\\n\\n  struct UserConfigurationMap {\\n    uint256 data;\\n  }\\n\\n  enum InterestRateMode {NONE, STABLE, VARIABLE}\\n}\\n\"\r\n    },\r\n    \"contracts/interfaces/ILendingPoolData.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: agpl-3.0\\npragma solidity 0.7.5;\\npragma abicoder v2;\\n\\nimport {DataTypes} from '../utils/DataTypes.sol';\\n\\ninterface ILendingPoolData {\\n  /**\\n   * @dev Returns the state and configuration of the reserve\\n   * @param asset The address of the underlying asset of the reserve\\n   * @return The state of the reserve\\n   **/\\n  function getReserveData(address asset) external view returns (DataTypes.ReserveData memory);\\n}\\n\"\r\n    },\r\n    \"contracts/interfaces/IATokenDetailed.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: agpl-3.0\\npragma solidity 0.7.5;\\n\\ninterface IATokenDetailed {\\n  function UNDERLYING_ASSET_ADDRESS() external view returns (address);\\n}\\n\"\r\n    },\r\n    \"contracts/utils/PercentageMath.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: agpl-3.0\\npragma solidity 0.7.5;\\n\\n/**\\n * @title PercentageMath library\\n * @author Aave\\n * @notice Provides functions to perform percentage calculations\\n * @dev Percentages are defined by default with 2 decimals of precision (100.00). The precision is indicated by PERCENTAGE_FACTOR\\n * @dev Operations are rounded half up\\n **/\\n\\nlibrary PercentageMath {\\n  uint256 constant PERCENTAGE_FACTOR = 1e4; //percentage plus two decimals\\n  uint256 constant HALF_PERCENT = PERCENTAGE_FACTOR / 2;\\n\\n  /**\\n   * @dev Executes a percentage multiplication\\n   * @param value The value of which the percentage needs to be calculated\\n   * @param percentage The percentage of the value to be calculated\\n   * @return The percentage of value\\n   **/\\n  function percentMul(uint256 value, uint256 percentage) internal pure returns (uint256) {\\n    if (value == 0 || percentage == 0) {\\n      return 0;\\n    }\\n\\n    require(\\n      value <= (type(uint256).max - HALF_PERCENT) / percentage,\\n      'MATH_MULTIPLICATION_OVERFLOW'\\n    );\\n\\n    return (value * percentage + HALF_PERCENT) / PERCENTAGE_FACTOR;\\n  }\\n\\n  /**\\n   * @dev Executes a percentage division\\n   * @param value The value of which the percentage needs to be calculated\\n   * @param percentage The percentage of the value to be calculated\\n   * @return The value divided the percentage\\n   **/\\n  function percentDiv(uint256 value, uint256 percentage) internal pure returns (uint256) {\\n    require(percentage != 0, 'MATH_DIVISION_BY_ZERO');\\n    uint256 halfPercentage = percentage / 2;\\n\\n    require(\\n      value <= (type(uint256).max - halfPercentage) / PERCENTAGE_FACTOR,\\n      'MATH_MULTIPLICATION_OVERFLOW'\\n    );\\n\\n    return (value * PERCENTAGE_FACTOR + halfPercentage) / percentage;\\n  }\\n}\\n\"\r\n    },\r\n    \"contracts/mocks/ATokenMock.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: agpl-3.0\\npragma solidity 0.7.5;\\npragma experimental ABIEncoderV2;\\n\\nimport {IAaveIncentivesController} from '../interfaces/IAaveIncentivesController.sol';\\nimport {DistributionTypes} from '../lib/DistributionTypes.sol';\\nimport {IAToken} from '@aave/aave-stake/contracts/interfaces/IAToken.sol';\\n\\ncontract ATokenMock is IAToken {\\n  IAaveIncentivesController public _aic;\\n  uint256 internal _userBalance;\\n  uint256 internal _totalSupply;\\n\\n  // hack to be able to test event from EI properly\\n  event RewardsAccrued(address indexed user, uint256 amount);\\n\\n  // hack to be able to test event from Distribution manager properly\\n  event AssetConfigUpdated(address indexed asset, uint256 emission);\\n  event AssetIndexUpdated(address indexed asset, uint256 index);\\n  event UserIndexUpdated(address indexed user, address indexed asset, uint256 index);\\n\\n  constructor(IAaveIncentivesController aic) public {\\n    _aic = aic;\\n  }\\n\\n  function handleActionOnAic(\\n    address user,\\n    uint256 totalSupply,\\n    uint256 userBalance\\n  ) external {\\n    _aic.handleAction(user, totalSupply, userBalance);\\n  }\\n\\n  function doubleHandleActionOnAic(\\n    address user,\\n    uint256 totalSupply,\\n    uint256 userBalance\\n  ) external {\\n    _aic.handleAction(user, totalSupply, userBalance);\\n    _aic.handleAction(user, totalSupply, userBalance);\\n  }\\n\\n  function setUserBalanceAndSupply(uint256 userBalance, uint256 totalSupply) public {\\n    _userBalance = userBalance;\\n    _totalSupply = totalSupply;\\n  }\\n\\n  function getScaledUserBalanceAndSupply(address user)\\n    external\\n    view\\n    override\\n    returns (uint256, uint256)\\n  {\\n    return (_userBalance, _totalSupply);\\n  }\\n\\n  function scaledTotalSupply() external view returns (uint256) {\\n    return _totalSupply;\\n  }\\n\\n  function cleanUserState() external {\\n    _userBalance = 0;\\n    _totalSupply = 0;\\n  }\\n}\\n\"\r\n    },\r\n    \"@aave/aave-stake/contracts/interfaces/IAToken.sol\": {\r\n      \"content\": \"pragma solidity ^0.7.5;\\n\\ninterface IAToken {\\n  function getScaledUserBalanceAndSupply(address user) external view returns (uint256, uint256);\\n}\\n\"\r\n    },\r\n    \"@aave/aave-stake/contracts/interfaces/IERC20Detailed.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: agpl-3.0\\npragma solidity 0.7.5;\\n\\nimport {IERC20} from './IERC20.sol';\\n\\n/**\\n * @dev Interface for ERC20 including metadata\\n **/\\ninterface IERC20Detailed is IERC20 {\\n  function name() external view returns (string memory);\\n\\n  function symbol() external view returns (string memory);\\n\\n  function decimals() external view returns (uint8);\\n}\\n\"\r\n    },\r\n    \"@aave/aave-stake/contracts/lib/ERC20.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: agpl-3.0\\npragma solidity 0.7.5;\\n\\nimport {Context} from './Context.sol';\\nimport {IERC20} from '../interfaces/IERC20.sol';\\nimport {IERC20Detailed} from '../interfaces/IERC20Detailed.sol';\\nimport {SafeMath} from './SafeMath.sol';\\n\\n/**\\n * @title ERC20\\n * @notice Basic ERC20 implementation\\n * @author Aave\\n **/\\ncontract ERC20 is Context, IERC20, IERC20Detailed {\\n  using SafeMath for uint256;\\n\\n  mapping(address => uint256) private _balances;\\n  mapping(address => mapping(address => uint256)) private _allowances;\\n  uint256 private _totalSupply;\\n  string private _name;\\n  string private _symbol;\\n  uint8 private _decimals;\\n\\n  constructor(\\n    string memory name,\\n    string memory symbol,\\n    uint8 decimals\\n  ) public {\\n    _name = name;\\n    _symbol = symbol;\\n    _decimals = decimals;\\n  }\\n\\n  /**\\n   * @return the name of the token\\n   **/\\n  function name() public view override returns (string memory) {\\n    return _name;\\n  }\\n\\n  /**\\n   * @return the symbol of the token\\n   **/\\n  function symbol() public view override returns (string memory) {\\n    return _symbol;\\n  }\\n\\n  /**\\n   * @return the decimals of the token\\n   **/\\n  function decimals() public view override returns (uint8) {\\n    return _decimals;\\n  }\\n\\n  /**\\n   * @return the total supply of the token\\n   **/\\n  function totalSupply() public view override returns (uint256) {\\n    return _totalSupply;\\n  }\\n\\n  /**\\n   * @return the balance of the token\\n   **/\\n  function balanceOf(address account) public view override returns (uint256) {\\n    return _balances[account];\\n  }\\n\\n  /**\\n   * @dev executes a transfer of tokens from msg.sender to recipient\\n   * @param recipient the recipient of the tokens\\n   * @param amount the amount of tokens being transferred\\n   * @return true if the transfer succeeds, false otherwise\\n   **/\\n  function transfer(address recipient, uint256 amount) public virtual override returns (bool) {\\n    _transfer(_msgSender(), recipient, amount);\\n    return true;\\n  }\\n\\n  /**\\n   * @dev returns the allowance of spender on the tokens owned by owner\\n   * @param owner the owner of the tokens\\n   * @param spender the user allowed to spend the owner's tokens\\n   * @return the amount of owner's tokens spender is allowed to spend\\n   **/\\n  function allowance(address owner, address spender)\\n    public\\n    view\\n    virtual\\n    override\\n    returns (uint256)\\n  {\\n    return _allowances[owner][spender];\\n  }\\n\\n  /**\\n   * @dev allows spender to spend the tokens owned by msg.sender\\n   * @param spender the user allowed to spend msg.sender tokens\\n   * @return true\\n   **/\\n  function approve(address spender, uint256 amount) public virtual override returns (bool) {\\n    _approve(_msgSender(), spender, amount);\\n    return true;\\n  }\\n\\n  /**\\n   * @dev executes a transfer of token from sender to recipient, if msg.sender is allowed to do so\\n   * @param sender the owner of the tokens\\n   * @param recipient the recipient of the tokens\\n   * @param amount the amount of tokens being transferred\\n   * @return true if the transfer succeeds, false otherwise\\n   **/\\n  function transferFrom(\\n    address sender,\\n    address recipient,\\n    uint256 amount\\n  ) public virtual override returns (bool) {\\n    _transfer(sender, recipient, amount);\\n    _approve(\\n      sender,\\n      _msgSender(),\\n      _allowances[sender][_msgSender()].sub(amount, 'ERC20: transfer amount exceeds allowance')\\n    );\\n    return true;\\n  }\\n\\n  /**\\n   * @dev increases the allowance of spender to spend msg.sender tokens\\n   * @param spender the user allowed to spend on behalf of msg.sender\\n   * @param addedValue the amount being added to the allowance\\n   * @return true\\n   **/\\n  function increaseAllowance(address spender, uint256 addedValue) public virtual returns (bool) {\\n    _approve(_msgSender(), spender, _allowances[_msgSender()][spender].add(addedValue));\\n    return true;\\n  }\\n\\n  /**\\n   * @dev decreases the allowance of spender to spend msg.sender tokens\\n   * @param spender the user allowed to spend on behalf of msg.sender\\n   * @param subtractedValue the amount being subtracted to the allowance\\n   * @return true\\n   **/\\n  function decreaseAllowance(address spender, uint256 subtractedValue)\\n    public\\n    virtual\\n    returns (bool)\\n  {\\n    _approve(\\n      _msgSender(),\\n      spender,\\n      _allowances[_msgSender()][spender].sub(\\n        subtractedValue,\\n        'ERC20: decreased allowance below zero'\\n      )\\n    );\\n    return true;\\n  }\\n\\n  function _transfer(\\n    address sender,\\n    address recipient,\\n    uint256 amount\\n  ) internal virtual {\\n    require(sender != address(0), 'ERC20: transfer from the zero address');\\n    require(recipient != address(0), 'ERC20: transfer to the zero address');\\n\\n    _beforeTokenTransfer(sender, recipient, amount);\\n\\n    _balances[sender] = _balances[sender].sub(amount, 'ERC20: transfer amount exceeds balance');\\n    _balances[recipient] = _balances[recipient].add(amount);\\n    emit Transfer(sender, recipient, amount);\\n  }\\n\\n  function _mint(address account, uint256 amount) internal virtual {\\n    require(account != address(0), 'ERC20: mint to the zero address');\\n\\n    _beforeTokenTransfer(address(0), account, amount);\\n\\n    _totalSupply = _totalSupply.add(amount);\\n    _balances[account] = _balances[account].add(amount);\\n    emit Transfer(address(0), account, amount);\\n  }\\n\\n  function _burn(address account, uint256 amount) internal virtual {\\n    require(account != address(0), 'ERC20: burn from the zero address');\\n\\n    _beforeTokenTransfer(account, address(0), amount);\\n\\n    _balances[account] = _balances[account].sub(amount, 'ERC20: burn amount exceeds balance');\\n    _totalSupply = _totalSupply.sub(amount);\\n    emit Transfer(account, address(0), amount);\\n  }\\n\\n  function _approve(\\n    address owner,\\n    address spender,\\n    uint256 amount\\n  ) internal virtual {\\n    require(owner != address(0), 'ERC20: approve from the zero address');\\n    require(spender != address(0), 'ERC20: approve to the zero address');\\n\\n    _allowances[owner][spender] = amount;\\n    emit Approval(owner, spender, amount);\\n  }\\n\\n  function _setName(string memory newName) internal {\\n    _name = newName;\\n  }\\n\\n  function _setSymbol(string memory newSymbol) internal {\\n    _symbol = newSymbol;\\n  }\\n\\n  function _setDecimals(uint8 newDecimals) internal {\\n    _decimals = newDecimals;\\n  }\\n\\n  function _beforeTokenTransfer(\\n    address from,\\n    address to,\\n    uint256 amount\\n  ) internal virtual {}\\n}\\n\"\r\n    },\r\n    \"@aave/aave-stake/contracts/lib/Context.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity 0.7.5;\\n\\n/**\\n * @dev From https://github.com/OpenZeppelin/openzeppelin-contracts\\n * Provides information about the current execution context, including the\\n * sender of the transaction and its data. While these are generally available\\n * via msg.sender and msg.data, they should not be accessed in such a direct\\n * manner, since when dealing with GSN meta-transactions the account sending and\\n * paying for execution may not be the actual sender (as far as an application\\n * is concerned).\\n *\\n * This contract is only required for intermediate, library-like contracts.\\n */\\nabstract contract Context {\\n  function _msgSender() internal view virtual returns (address payable) {\\n    return msg.sender;\\n  }\\n\\n  function _msgData() internal view virtual returns (bytes memory) {\\n    this; // silence state mutability warning without generating bytecode - see https://github.com/ethereum/solidity/issues/2691\\n    return msg.data;\\n  }\\n}\\n\"\r\n    },\r\n    \"@aave/aave-stake/contracts/lib/GovernancePowerWithSnapshot.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: agpl-3.0\\npragma solidity 0.7.5;\\n\\nimport {ERC20} from '../lib/ERC20.sol';\\nimport {ITransferHook} from '../interfaces/ITransferHook.sol';\\nimport {SafeMath} from '../lib/SafeMath.sol';\\nimport {\\n  GovernancePowerDelegationERC20\\n} from '@aave/aave-token/contracts/token/base/GovernancePowerDelegationERC20.sol';\\n\\n/**\\n * @title ERC20WithSnapshot\\n * @notice ERC20 including snapshots of balances on transfer-related actions\\n * @author Aave\\n **/\\nabstract contract GovernancePowerWithSnapshot is GovernancePowerDelegationERC20 {\\n  using SafeMath for uint256;\\n\\n  /**\\n   * @dev The following storage layout points to the prior StakedToken.sol implementation:\\n   * _snapshots => _votingSnapshots\\n   * _snapshotsCounts =>  _votingSnapshotsCounts\\n   * _aaveGovernance => _aaveGovernance\\n   */\\n  mapping(address => mapping(uint256 => Snapshot)) public _votingSnapshots;\\n  mapping(address => uint256) public _votingSnapshotsCounts;\\n\\n  /// @dev reference to the Aave governance contract to call (if initialized) on _beforeTokenTransfer\\n  /// !!! IMPORTANT The Aave governance is considered a trustable contract, being its responsibility\\n  /// to control all potential reentrancies by calling back the this contract\\n  ITransferHook public _aaveGovernance;\\n\\n  function _setAaveGovernance(ITransferHook aaveGovernance) internal virtual {\\n    _aaveGovernance = aaveGovernance;\\n  }\\n}\\n\"\r\n    },\r\n    \"@aave/aave-stake/contracts/interfaces/ITransferHook.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: agpl-3.0\\npragma solidity 0.7.5;\\n\\ninterface ITransferHook {\\n  function onTransfer(\\n    address from,\\n    address to,\\n    uint256 amount\\n  ) external;\\n}\\n\"\r\n    },\r\n    \"@aave/aave-token/contracts/token/base/GovernancePowerDelegationERC20.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: agpl-3.0\\npragma solidity 0.7.5;\\n\\nimport {SafeMath} from '../../open-zeppelin/SafeMath.sol';\\nimport {ERC20} from '../../open-zeppelin/ERC20.sol';\\nimport {\\n  IGovernancePowerDelegationToken\\n} from '../../interfaces/IGovernancePowerDelegationToken.sol';\\n\\n/**\\n * @notice implementation of the AAVE token contract\\n * @author Aave\\n */\\nabstract contract GovernancePowerDelegationERC20 is ERC20, IGovernancePowerDelegationToken {\\n  using SafeMath for uint256;\\n  /// @notice The EIP-712 typehash for the delegation struct used by the contract\\n  bytes32 public constant DELEGATE_BY_TYPE_TYPEHASH = keccak256(\\n    'DelegateByType(address delegatee,uint256 type,uint256 nonce,uint256 expiry)'\\n  );\\n\\n  bytes32 public constant DELEGATE_TYPEHASH = keccak256(\\n    'Delegate(address delegatee,uint256 nonce,uint256 expiry)'\\n  );\\n\\n  /// @dev snapshot of a value on a specific block, used for votes\\n  struct Snapshot {\\n    uint128 blockNumber;\\n    uint128 value;\\n  }\\n\\n  /**\\n   * @dev delegates one specific power to a delegatee\\n   * @param delegatee the user which delegated power has changed\\n   * @param delegationType the type of delegation (VOTING_POWER, PROPOSITION_POWER)\\n   **/\\n  function delegateByType(address delegatee, DelegationType delegationType) external override {\\n    _delegateByType(msg.sender, delegatee, delegationType);\\n  }\\n\\n  /**\\n   * @dev delegates all the powers to a specific user\\n   * @param delegatee the user to which the power will be delegated\\n   **/\\n  function delegate(address delegatee) external override {\\n    _delegateByType(msg.sender, delegatee, DelegationType.VOTING_POWER);\\n    _delegateByType(msg.sender, delegatee, DelegationType.PROPOSITION_POWER);\\n  }\\n\\n  /**\\n   * @dev returns the delegatee of an user\\n   * @param delegator the address of the delegator\\n   **/\\n  function getDelegateeByType(address delegator, DelegationType delegationType)\\n    external\\n    override\\n    view\\n    returns (address)\\n  {\\n    (, , mapping(address => address) storage delegates) = _getDelegationDataByType(delegationType);\\n\\n    return _getDelegatee(delegator, delegates);\\n  }\\n\\n  /**\\n   * @dev returns the current delegated power of a user. The current power is the\\n   * power delegated at the time of the last snapshot\\n   * @param user the user\\n   **/\\n  function getPowerCurrent(address user, DelegationType delegationType)\\n    external\\n    override\\n    view\\n    returns (uint256)\\n  {\\n    (\\n      mapping(address => mapping(uint256 => Snapshot)) storage snapshots,\\n      mapping(address => uint256) storage snapshotsCounts,\\n\\n    ) = _getDelegationDataByType(delegationType);\\n\\n    return _searchByBlockNumber(snapshots, snapshotsCounts, user, block.number);\\n  }\\n\\n  /**\\n   * @dev returns the delegated power of a user at a certain block\\n   * @param user the user\\n   **/\\n  function getPowerAtBlock(\\n    address user,\\n    uint256 blockNumber,\\n    DelegationType delegationType\\n  ) external override view returns (uint256) {\\n    (\\n      mapping(address => mapping(uint256 => Snapshot)) storage snapshots,\\n      mapping(address => uint256) storage snapshotsCounts,\\n\\n    ) = _getDelegationDataByType(delegationType);\\n\\n    return _searchByBlockNumber(snapshots, snapshotsCounts, user, blockNumber);\\n  }\\n\\n  /**\\n   * @dev returns the total supply at a certain block number\\n   * used by the voting strategy contracts to calculate the total votes needed for threshold/quorum\\n   * In this initial implementation with no AAVE minting, simply returns the current supply\\n   * A snapshots mapping will need to be added in case a mint function is added to the AAVE token in the future\\n   **/\\n  function totalSupplyAt(uint256 blockNumber) external override view returns (uint256) {\\n    return super.totalSupply();\\n  }\\n\\n  /**\\n   * @dev delegates the specific power to a delegatee\\n   * @param delegatee the user which delegated power has changed\\n   * @param delegationType the type of delegation (VOTING_POWER, PROPOSITION_POWER)\\n   **/\\n  function _delegateByType(\\n    address delegator,\\n    address delegatee,\\n    DelegationType delegationType\\n  ) internal {\\n    require(delegatee != address(0), 'INVALID_DELEGATEE');\\n\\n    (, , mapping(address => address) storage delegates) = _getDelegationDataByType(delegationType);\\n\\n    uint256 delegatorBalance = balanceOf(delegator);\\n\\n    address previousDelegatee = _getDelegatee(delegator, delegates);\\n\\n    delegates[delegator] = delegatee;\\n\\n    _moveDelegatesByType(previousDelegatee, delegatee, delegatorBalance, delegationType);\\n    emit DelegateChanged(delegator, delegatee, delegationType);\\n  }\\n\\n  /**\\n   * @dev moves delegated power from one user to another\\n   * @param from the user from which delegated power is moved\\n   * @param to the user that will receive the delegated power\\n   * @param amount the amount of delegated power to be moved\\n   * @param delegationType the type of delegation (VOTING_POWER, PROPOSITION_POWER)\\n   **/\\n  function _moveDelegatesByType(\\n    address from,\\n    address to,\\n    uint256 amount,\\n    DelegationType delegationType\\n  ) internal {\\n    if (from == to) {\\n      return;\\n    }\\n\\n    (\\n      mapping(address => mapping(uint256 => Snapshot)) storage snapshots,\\n      mapping(address => uint256) storage snapshotsCounts,\\n\\n    ) = _getDelegationDataByType(delegationType);\\n\\n    if (from != address(0)) {\\n      uint256 previous = 0;\\n      uint256 fromSnapshotsCount = snapshotsCounts[from];\\n\\n      if (fromSnapshotsCount != 0) {\\n        previous = snapshots[from][fromSnapshotsCount - 1].value;\\n      } else {\\n        previous = balanceOf(from);\\n      }\\n\\n      _writeSnapshot(\\n        snapshots,\\n        snapshotsCounts,\\n        from,\\n        uint128(previous),\\n        uint128(previous.sub(amount))\\n      );\\n\\n      emit DelegatedPowerChanged(from, previous.sub(amount), delegationType);\\n    }\\n    if (to != address(0)) {\\n      uint256 previous = 0;\\n      uint256 toSnapshotsCount = snapshotsCounts[to];\\n      if (toSnapshotsCount != 0) {\\n        previous = snapshots[to][toSnapshotsCount - 1].value;\\n      } else {\\n        previous = balanceOf(to);\\n      }\\n\\n      _writeSnapshot(\\n        snapshots,\\n        snapshotsCounts,\\n        to,\\n        uint128(previous),\\n        uint128(previous.add(amount))\\n      );\\n\\n      emit DelegatedPowerChanged(to, previous.add(amount), delegationType);\\n    }\\n  }\\n\\n  /**\\n   * @dev searches a snapshot by block number. Uses binary search.\\n   * @param snapshots the snapshots mapping\\n   * @param snapshotsCounts the number of snapshots\\n   * @param user the user for which the snapshot is being searched\\n   * @param blockNumber the block number being searched\\n   **/\\n  function _searchByBlockNumber(\\n    mapping(address => mapping(uint256 => Snapshot)) storage snapshots,\\n    mapping(address => uint256) storage snapshotsCounts,\\n    address user,\\n    uint256 blockNumber\\n  ) internal view returns (uint256) {\\n    require(blockNumber <= block.number, 'INVALID_BLOCK_NUMBER');\\n\\n    uint256 snapshotsCount = snapshotsCounts[user];\\n\\n    if (snapshotsCount == 0) {\\n      return balanceOf(user);\\n    }\\n\\n    // First check most recent balance\\n    if (snapshots[user][snapshotsCount - 1].blockNumber <= blockNumber) {\\n      return snapshots[user][snapshotsCount - 1].value;\\n    }\\n\\n    // Next check implicit zero balance\\n    if (snapshots[user][0].blockNumber > blockNumber) {\\n      return 0;\\n    }\\n\\n    uint256 lower = 0;\\n    uint256 upper = snapshotsCount - 1;\\n    while (upper > lower) {\\n      uint256 center = upper - (upper - lower) / 2; // ceil, avoiding overflow\\n      Snapshot memory snapshot = snapshots[user][center];\\n      if (snapshot.blockNumber == blockNumber) {\\n        return snapshot.value;\\n      } else if (snapshot.blockNumber < blockNumber) {\\n        lower = center;\\n      } else {\\n        upper = center - 1;\\n      }\\n    }\\n    return snapshots[user][lower].value;\\n  }\\n\\n  /**\\n   * @dev returns the delegation data (snapshot, snapshotsCount, list of delegates) by delegation type\\n   * NOTE: Ideal implementation would have mapped this in a struct by delegation type. Unfortunately,\\n   * the AAVE token and StakeToken already include a mapping for the snapshots, so we require contracts\\n   * who inherit from this to provide access to the delegation data by overriding this method.\\n   * @param delegationType the type of delegation\\n   **/\\n  function _getDelegationDataByType(DelegationType delegationType)\\n    internal\\n    virtual\\n    view\\n    returns (\\n      mapping(address => mapping(uint256 => Snapshot)) storage, //snapshots\\n      mapping(address => uint256) storage, //snapshots count\\n      mapping(address => address) storage //delegatees list\\n    );\\n\\n  /**\\n   * @dev Writes a snapshot for an owner of tokens\\n   * @param owner The owner of the tokens\\n   * @param oldValue The value before the operation that is gonna be executed after the snapshot\\n   * @param newValue The value after the operation\\n   */\\n  function _writeSnapshot(\\n    mapping(address => mapping(uint256 => Snapshot)) storage snapshots,\\n    mapping(address => uint256) storage snapshotsCounts,\\n    address owner,\\n    uint128 oldValue,\\n    uint128 newValue\\n  ) internal {\\n    uint128 currentBlock = uint128(block.number);\\n\\n    uint256 ownerSnapshotsCount = snapshotsCounts[owner];\\n    mapping(uint256 => Snapshot) storage snapshotsOwner = snapshots[owner];\\n\\n    // Doing multiple operations in the same block\\n    if (\\n      ownerSnapshotsCount != 0 &&\\n      snapshotsOwner[ownerSnapshotsCount - 1].blockNumber == currentBlock\\n    ) {\\n      snapshotsOwner[ownerSnapshotsCount - 1].value = newValue;\\n    } else {\\n      snapshotsOwner[ownerSnapshotsCount] = Snapshot(currentBlock, newValue);\\n      snapshotsCounts[owner] = ownerSnapshotsCount + 1;\\n    }\\n  }\\n\\n  /**\\n   * @dev returns the user delegatee. If a user never performed any delegation,\\n   * his delegated address will be 0x0. In that case we simply return the user itself\\n   * @param delegator the address of the user for which return the delegatee\\n   * @param delegates the array of delegates for a particular type of delegation\\n   **/\\n  function _getDelegatee(address delegator, mapping(address => address) storage delegates)\\n    internal\\n    view\\n    returns (address)\\n  {\\n    address previousDelegatee = delegates[delegator];\\n\\n    if (previousDelegatee == address(0)) {\\n      return delegator;\\n    }\\n\\n    return previousDelegatee;\\n  }\\n}\\n\"\r\n    },\r\n    \"@aave/aave-token/contracts/open-zeppelin/SafeMath.sol\": {\r\n      \"content\": \"pragma solidity ^0.7.5;\\n\\n/**\\n * @dev Wrappers over Solidity's arithmetic operations with added overflow\\n * checks.\\n *\\n * Arithmetic operations in Solidity wrap on overflow. This can easily result\\n * in bugs, because programmers usually assume that an overflow raises an\\n * error, which is the standard behavior in high level programming languages.\\n * `SafeMath` restores this intuition by reverting the transaction when an\\n * operation overflows.\\n *\\n * Using this library instead of the unchecked operations eliminates an entire\\n * class of bugs, so it's recommended to use it always.\\n */\\nlibrary SafeMath {\\n    /**\\n     * @dev Returns the addition of two unsigned integers, reverting on\\n     * overflow.\\n     *\\n     * Counterpart to Solidity's `+` operator.\\n     *\\n     * Requirements:\\n     * - Addition cannot overflow.\\n     */\\n    function add(uint256 a, uint256 b) internal pure returns (uint256) {\\n        uint256 c = a + b;\\n        require(c >= a, \\\"SafeMath: addition overflow\\\");\\n\\n        return c;\\n    }\\n\\n    /**\\n     * @dev Returns the subtraction of two unsigned integers, reverting on\\n     * overflow (when the result is negative).\\n     *\\n     * Counterpart to Solidity's `-` operator.\\n     *\\n     * Requirements:\\n     * - Subtraction cannot overflow.\\n     */\\n    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return sub(a, b, \\\"SafeMath: subtraction overflow\\\");\\n    }\\n\\n    /**\\n     * @dev Returns the subtraction of two unsigned integers, reverting with custom message on\\n     * overflow (when the result is negative).\\n     *\\n     * Counterpart to Solidity's `-` operator.\\n     *\\n     * Requirements:\\n     * - Subtraction cannot overflow.\\n     */\\n    function sub(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\\n        require(b <= a, errorMessage);\\n        uint256 c = a - b;\\n\\n        return c;\\n    }\\n\\n    /**\\n     * @dev Returns the multiplication of two unsigned integers, reverting on\\n     * overflow.\\n     *\\n     * Counterpart to Solidity's `*` operator.\\n     *\\n     * Requirements:\\n     * - Multiplication cannot overflow.\\n     */\\n    function mul(uint256 a, uint256 b) internal pure returns (uint256) {\\n        // Gas optimization: this is cheaper than requiring 'a' not being zero, but the\\n        // benefit is lost if 'b' is also tested.\\n        // See: https://github.com/OpenZeppelin/openzeppelin-contracts/pull/522\\n        if (a == 0) {\\n            return 0;\\n        }\\n\\n        uint256 c = a * b;\\n        require(c / a == b, \\\"SafeMath: multiplication overflow\\\");\\n\\n        return c;\\n    }\\n\\n    /**\\n     * @dev Returns the integer division of two unsigned integers. Reverts on\\n     * division by zero. The result is rounded towards zero.\\n     *\\n     * Counterpart to Solidity's `/` operator. Note: this function uses a\\n     * `revert` opcode (which leaves remaining gas untouched) while Solidity\\n     * uses an invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Requirements:\\n     * - The divisor cannot be zero.\\n     */\\n    function div(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return div(a, b, \\\"SafeMath: division by zero\\\");\\n    }\\n\\n    /**\\n     * @dev Returns the integer division of two unsigned integers. Reverts with custom message on\\n     * division by zero. The result is rounded towards zero.\\n     *\\n     * Counterpart to Solidity's `/` operator. Note: this function uses a\\n     * `revert` opcode (which leaves remaining gas untouched) while Solidity\\n     * uses an invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Requirements:\\n     * - The divisor cannot be zero.\\n     */\\n    function div(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\\n        // Solidity only automatically asserts when dividing by 0\\n        require(b > 0, errorMessage);\\n        uint256 c = a / b;\\n        // assert(a == b * c + a % b); // There is no case in which this doesn't hold\\n\\n        return c;\\n    }\\n\\n    /**\\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\\n     * Reverts when dividing by zero.\\n     *\\n     * Counterpart to Solidity's `%` operator. This function uses a `revert`\\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\\n     * invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Requirements:\\n     * - The divisor cannot be zero.\\n     */\\n    function mod(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return mod(a, b, \\\"SafeMath: modulo by zero\\\");\\n    }\\n\\n    /**\\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\\n     * Reverts with custom message when dividing by zero.\\n     *\\n     * Counterpart to Solidity's `%` operator. This function uses a `revert`\\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\\n     * invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Requirements:\\n     * - The divisor cannot be zero.\\n     */\\n    function mod(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\\n        require(b != 0, errorMessage);\\n        return a % b;\\n    }\\n}\"\r\n    },\r\n    \"@aave/aave-token/contracts/open-zeppelin/ERC20.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.7.5;\\n\\nimport \\\"./Context.sol\\\";\\nimport \\\"../interfaces/IERC20.sol\\\";\\nimport \\\"./SafeMath.sol\\\";\\nimport \\\"./Address.sol\\\";\\n\\n/**\\n * @dev Implementation of the {IERC20} interface.\\n *\\n * This implementation is agnostic to the way tokens are created. This means\\n * that a supply mechanism has to be added in a derived contract using {_mint}.\\n * For a generic mechanism see {ERC20PresetMinterPauser}.\\n *\\n * TIP: For a detailed writeup see our guide\\n * https://forum.zeppelin.solutions/t/how-to-implement-erc20-supply-mechanisms/226[How\\n * to implement supply mechanisms].\\n *\\n * We have followed general OpenZeppelin guidelines: functions revert instead\\n * of returning `false` on failure. This behavior is nonetheless conventional\\n * and does not conflict with the expectations of ERC20 applications.\\n *\\n * Additionally, an {Approval} event is emitted on calls to {transferFrom}.\\n * This allows applications to reconstruct the allowance for all accounts just\\n * by listening to said events. Other implementations of the EIP may not emit\\n * these events, as it isn't required by the specification.\\n *\\n * Finally, the non-standard {decreaseAllowance} and {increaseAllowance}\\n * functions have been added to mitigate the well-known issues around setting\\n * allowances. See {IERC20-approve}.\\n */\\ncontract ERC20 is Context, IERC20 {\\n    using SafeMath for uint256;\\n    using Address for address;\\n\\n    mapping (address => uint256) private _balances;\\n\\n    mapping (address => mapping (address => uint256)) private _allowances;\\n\\n    uint256 private _totalSupply;\\n\\n    string internal _name;\\n    string internal _symbol;\\n    uint8 private _decimals;\\n\\n    /**\\n     * @dev Sets the values for {name} and {symbol}, initializes {decimals} with\\n     * a default value of 18.\\n     *\\n     * To select a different value for {decimals}, use {_setupDecimals}.\\n     *\\n     * All three of these values are immutable: they can only be set once during\\n     * construction.\\n     */\\n    constructor (string memory name, string memory symbol) public {\\n        _name = name;\\n        _symbol = symbol;\\n        _decimals = 18;\\n    }\\n\\n    /**\\n     * @dev Returns the name of the token.\\n     */\\n    function name() public view returns (string memory) {\\n        return _name;\\n    }\\n\\n    /**\\n     * @dev Returns the symbol of the token, usually a shorter version of the\\n     * name.\\n     */\\n    function symbol() public view returns (string memory) {\\n        return _symbol;\\n    }\\n\\n    /**\\n     * @dev Returns the number of decimals used to get its user representation.\\n     * For example, if `decimals` equals `2`, a balance of `505` tokens should\\n     * be displayed to a user as `5,05` (`505 / 10 ** 2`).\\n     *\\n     * Tokens usually opt for a value of 18, imitating the relationship between\\n     * Ether and Wei. This is the value {ERC20} uses, unless {_setupDecimals} is\\n     * called.\\n     *\\n     * NOTE: This information is only used for _display_ purposes: it in\\n     * no way affects any of the arithmetic of the contract, including\\n     * {IERC20-balanceOf} and {IERC20-transfer}.\\n     */\\n    function decimals() public view returns (uint8) {\\n        return _decimals;\\n    }\\n\\n    /**\\n     * @dev See {IERC20-totalSupply}.\\n     */\\n    function totalSupply() public view override returns (uint256) {\\n        return _totalSupply;\\n    }\\n\\n    /**\\n     * @dev See {IERC20-balanceOf}.\\n     */\\n    function balanceOf(address account) public view override returns (uint256) {\\n        return _balances[account];\\n    }\\n\\n    /**\\n     * @dev See {IERC20-transfer}.\\n     *\\n     * Requirements:\\n     *\\n     * - `recipient` cannot be the zero address.\\n     * - the caller must have a balance of at least `amount`.\\n     */\\n    function transfer(address recipient, uint256 amount) public virtual override returns (bool) {\\n        _transfer(_msgSender(), recipient, amount);\\n        return true;\\n    }\\n\\n    /**\\n     * @dev See {IERC20-allowance}.\\n     */\\n    function allowance(address owner, address spender) public view virtual override returns (uint256) {\\n        return _allowances[owner][spender];\\n    }\\n\\n    /**\\n     * @dev See {IERC20-approve}.\\n     *\\n     * Requirements:\\n     *\\n     * - `spender` cannot be the zero address.\\n     */\\n    function approve(address spender, uint256 amount) public virtual override returns (bool) {\\n        _approve(_msgSender(), spender, amount);\\n        return true;\\n    }\\n\\n    /**\\n     * @dev See {IERC20-transferFrom}.\\n     *\\n     * Emits an {Approval} event indicating the updated allowance. This is not\\n     * required by the EIP. See the note at the beginning of {ERC20};\\n     *\\n     * Requirements:\\n     * - `sender` and `recipient` cannot be the zero address.\\n     * - `sender` must have a balance of at least `amount`.\\n     * - the caller must have allowance for ``sender``'s tokens of at least\\n     * `amount`.\\n     */\\n    function transferFrom(address sender, address recipient, uint256 amount) public virtual override returns (bool) {\\n        _transfer(sender, recipient, amount);\\n        _approve(sender, _msgSender(), _allowances[sender][_msgSender()].sub(amount, \\\"ERC20: transfer amount exceeds allowance\\\"));\\n        return true;\\n    }\\n\\n    /**\\n     * @dev Atomically increases the allowance granted to `spender` by the caller.\\n     *\\n     * This is an alternative to {approve} that can be used as a mitigation for\\n     * problems described in {IERC20-approve}.\\n     *\\n     * Emits an {Approval} event indicating the updated allowance.\\n     *\\n     * Requirements:\\n     *\\n     * - `spender` cannot be the zero address.\\n     */\\n    function increaseAllowance(address spender, uint256 addedValue) public virtual returns (bool) {\\n        _approve(_msgSender(), spender, _allowances[_msgSender()][spender].add(addedValue));\\n        return true;\\n    }\\n\\n    /**\\n     * @dev Atomically decreases the allowance granted to `spender` by the caller.\\n     *\\n     * This is an alternative to {approve} that can be used as a mitigation for\\n     * problems described in {IERC20-approve}.\\n     *\\n     * Emits an {Approval} event indicating the updated allowance.\\n     *\\n     * Requirements:\\n     *\\n     * - `spender` cannot be the zero address.\\n     * - `spender` must have allowance for the caller of at least\\n     * `subtractedValue`.\\n     */\\n    function decreaseAllowance(address spender, uint256 subtractedValue) public virtual returns (bool) {\\n        _approve(_msgSender(), spender, _allowances[_msgSender()][spender].sub(subtractedValue, \\\"ERC20: decreased allowance below zero\\\"));\\n        return true;\\n    }\\n\\n    /**\\n     * @dev Moves tokens `amount` from `sender` to `recipient`.\\n     *\\n     * This is internal function is equivalent to {transfer}, and can be used to\\n     * e.g. implement automatic token fees, slashing mechanisms, etc.\\n     *\\n     * Emits a {Transfer} event.\\n     *\\n     * Requirements:\\n     *\\n     * - `sender` cannot be the zero address.\\n     * - `recipient` cannot be the zero address.\\n     * - `sender` must have a balance of at least `amount`.\\n     */\\n    function _transfer(address sender, address recipient, uint256 amount) internal virtual {\\n        require(sender != address(0), \\\"ERC20: transfer from the zero address\\\");\\n        require(recipient != address(0), \\\"ERC20: transfer to the zero address\\\");\\n\\n        _beforeTokenTransfer(sender, recipient, amount);\\n\\n        _balances[sender] = _balances[sender].sub(amount, \\\"ERC20: transfer amount exceeds balance\\\");\\n        _balances[recipient] = _balances[recipient].add(amount);\\n        emit Transfer(sender, recipient, amount);\\n    }\\n\\n    /** @dev Creates `amount` tokens and assigns them to `account`, increasing\\n     * the total supply.\\n     *\\n     * Emits a {Transfer} event with `from` set to the zero address.\\n     *\\n     * Requirements\\n     *\\n     * - `to` cannot be the zero address.\\n     */\\n    function _mint(address account, uint256 amount) internal virtual {\\n        require(account != address(0), \\\"ERC20: mint to the zero address\\\");\\n\\n        _beforeTokenTransfer(address(0), account, amount);\\n\\n        _totalSupply = _totalSupply.add(amount);\\n        _balances[account] = _balances[account].add(amount);\\n        emit Transfer(address(0), account, amount);\\n    }\\n\\n    /**\\n     * @dev Destroys `amount` tokens from `account`, reducing the\\n     * total supply.\\n     *\\n     * Emits a {Transfer} event with `to` set to the zero address.\\n     *\\n     * Requirements\\n     *\\n     * - `account` cannot be the zero address.\\n     * - `account` must have at least `amount` tokens.\\n     */\\n    function _burn(address account, uint256 amount) internal virtual {\\n        require(account != address(0), \\\"ERC20: burn from the zero address\\\");\\n\\n        _beforeTokenTransfer(account, address(0), amount);\\n\\n        _balances[account] = _balances[account].sub(amount, \\\"ERC20: burn amount exceeds balance\\\");\\n        _totalSupply = _totalSupply.sub(amount);\\n        emit Transfer(account, address(0), amount);\\n    }\\n\\n    /**\\n     * @dev Sets `amount` as the allowance of `spender` over the `owner`s tokens.\\n     *\\n     * This is internal function is equivalent to `approve`, and can be used to\\n     * e.g. set automatic allowances for certain subsystems, etc.\\n     *\\n     * Emits an {Approval} event.\\n     *\\n     * Requirements:\\n     *\\n     * - `owner` cannot be the zero address.\\n     * - `spender` cannot be the zero address.\\n     */\\n    function _approve(address owner, address spender, uint256 amount) internal virtual {\\n        require(owner != address(0), \\\"ERC20: approve from the zero address\\\");\\n        require(spender != address(0), \\\"ERC20: approve to the zero address\\\");\\n\\n        _allowances[owner][spender] = amount;\\n        emit Approval(owner, spender, amount);\\n    }\\n\\n    /**\\n     * @dev Sets {decimals} to a value other than the default one of 18.\\n     *\\n     * WARNING: This function should only be called from the constructor. Most\\n     * applications that interact with token contracts will not expect\\n     * {decimals} to ever change, and may work incorrectly if it does.\\n     */\\n    function _setupDecimals(uint8 decimals_) internal {\\n        _decimals = decimals_;\\n    }\\n\\n    /**\\n     * @dev Hook that is called before any transfer of tokens. This includes\\n     * minting and burning.\\n     *\\n     * Calling conditions:\\n     *\\n     * - when `from` and `to` are both non-zero, `amount` of ``from``'s tokens\\n     * will be to transferred to `to`.\\n     * - when `from` is zero, `amount` tokens will be minted for `to`.\\n     * - when `to` is zero, `amount` of ``from``'s tokens will be burned.\\n     * - `from` and `to` are never both zero.\\n     *\\n     * To learn more about hooks, head to xref:ROOT:extending-contracts.adoc#using-hooks[Using Hooks].\\n     */\\n    function _beforeTokenTransfer(address from, address to, uint256 amount) internal virtual { }\\n}\"\r\n    },\r\n    \"@aave/aave-token/contracts/interfaces/IGovernancePowerDelegationToken.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: agpl-3.0\\npragma solidity 0.7.5;\\n\\ninterface IGovernancePowerDelegationToken {\\n  \\n  enum DelegationType {VOTING_POWER, PROPOSITION_POWER}\\n\\n  /**\\n   * @dev emitted when a user delegates to another\\n   * @param delegator the delegator\\n   * @param delegatee the delegatee\\n   * @param delegationType the type of delegation (VOTING_POWER, PROPOSITION_POWER)\\n   **/\\n  event DelegateChanged(\\n    address indexed delegator,\\n    address indexed delegatee,\\n    DelegationType delegationType\\n  );\\n\\n  /**\\n   * @dev emitted when an action changes the delegated power of a user\\n   * @param user the user which delegated power has changed\\n   * @param amount the amount of delegated power for the user\\n   * @param delegationType the type of delegation (VOTING_POWER, PROPOSITION_POWER)\\n   **/\\n  event DelegatedPowerChanged(address indexed user, uint256 amount, DelegationType delegationType);\\n\\n  /**\\n   * @dev delegates the specific power to a delegatee\\n   * @param delegatee the user which delegated power has changed\\n   * @param delegationType the type of delegation (VOTING_POWER, PROPOSITION_POWER)\\n   **/\\n  function delegateByType(address delegatee, DelegationType delegationType) external virtual;\\n  /**\\n   * @dev delegates all the powers to a specific user\\n   * @param delegatee the user to which the power will be delegated\\n   **/\\n  function delegate(address delegatee) external virtual;\\n  /**\\n   * @dev returns the delegatee of an user\\n   * @param delegator the address of the delegator\\n   **/\\n  function getDelegateeByType(address delegator, DelegationType delegationType)\\n    external\\n    virtual\\n    view\\n    returns (address);\\n\\n  /**\\n   * @dev returns the current delegated power of a user. The current power is the\\n   * power delegated at the time of the last snapshot\\n   * @param user the user\\n   **/\\n  function getPowerCurrent(address user, DelegationType delegationType)\\n    external\\n    virtual\\n    view\\n    returns (uint256);\\n\\n  /**\\n   * @dev returns the delegated power of a user at a certain block\\n   * @param user the user\\n   **/\\n  function getPowerAtBlock(\\n    address user,\\n    uint256 blockNumber,\\n    DelegationType delegationType\\n  ) external virtual view returns (uint256);\\n \\n  /**\\n  * @dev returns the total supply at a certain block number\\n  **/\\n  function totalSupplyAt(uint256 blockNumber) external virtual view returns (uint256);\\n}\"\r\n    },\r\n    \"@aave/aave-token/contracts/open-zeppelin/Context.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.7.5;\\n\\n/*\\n * @dev Provides information about the current execution context, including the\\n * sender of the transaction and its data. While these are generally available\\n * via msg.sender and msg.data, they should not be accessed in such a direct\\n * manner, since when dealing with GSN meta-transactions the account sending and\\n * paying for execution may not be the actual sender (as far as an application\\n * is concerned).\\n *\\n * This contract is only required for intermediate, library-like contracts.\\n */\\nabstract contract Context {\\n    function _msgSender() internal view virtual returns (address payable) {\\n        return msg.sender;\\n    }\\n\\n    function _msgData() internal view virtual returns (bytes memory) {\\n        this; // silence state mutability warning without generating bytecode - see https://github.com/ethereum/solidity/issues/2691\\n        return msg.data;\\n    }\\n}\"\r\n    },\r\n    \"@aave/aave-token/contracts/interfaces/IERC20.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: agpl-3.0\\npragma solidity 0.7.5;\\n\\n/**\\n * @dev Interface of the ERC20 standard as defined in the EIP.\\n */\\ninterface IERC20 {\\n    /**\\n     * @dev Returns the amount of tokens in existence.\\n     */\\n    function totalSupply() external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the amount of tokens owned by `account`.\\n     */\\n    function balanceOf(address account) external view returns (uint256);\\n\\n    /**\\n     * @dev Moves `amount` tokens from the caller's account to `recipient`.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transfer(address recipient, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Returns the remaining number of tokens that `spender` will be\\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\\n     * zero by default.\\n     *\\n     * This value changes when {approve} or {transferFrom} are called.\\n     */\\n    function allowance(address owner, address spender) external view returns (uint256);\\n\\n    /**\\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\\n     * that someone may use both the old and the new allowance by unfortunate\\n     * transaction ordering. One possible solution to mitigate this race\\n     * condition is to first reduce the spender's allowance to 0 and set the\\n     * desired value afterwards:\\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address spender, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Moves `amount` tokens from `sender` to `recipient` using the\\n     * allowance mechanism. `amount` is then deducted from the caller's\\n     * allowance.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(address sender, address recipient, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\\n     * another (`to`).\\n     *\\n     * Note that `value` may be zero.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 value);\\n\\n    /**\\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\\n     * a call to {approve}. `value` is the new allowance.\\n     */\\n    event Approval(address indexed owner, address indexed spender, uint256 value);\\n}\"\r\n    },\r\n    \"@aave/aave-token/contracts/open-zeppelin/Address.sol\": {\r\n      \"content\": \"pragma solidity ^0.7.5;\\n\\n/**\\n * @dev Collection of functions related to the address type\\n */\\nlibrary Address {\\n    /**\\n     * @dev Returns true if `account` is a contract.\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * It is unsafe to assume that an address for which this function returns\\n     * false is an externally-owned account (EOA) and not a contract.\\n     *\\n     * Among others, `isContract` will return false for the following\\n     * types of addresses:\\n     *\\n     *  - an externally-owned account\\n     *  - a contract in construction\\n     *  - an address where a contract will be created\\n     *  - an address where a contract lived, but was destroyed\\n     * ====\\n     */\\n    function isContract(address account) internal view returns (bool) {\\n        // According to EIP-1052, 0x0 is the value returned for not-yet created accounts\\n        // and 0xc5d2460186f7233c927e7db2dcc703c0e500b653ca82273b7bfad8045d85a470 is returned\\n        // for accounts without code, i.e. `keccak256('')`\\n        bytes32 codehash;\\n        bytes32 accountHash = 0xc5d2460186f7233c927e7db2dcc703c0e500b653ca82273b7bfad8045d85a470;\\n        // solhint-disable-next-line no-inline-assembly\\n        assembly { codehash := extcodehash(account) }\\n        return (codehash != accountHash && codehash != 0x0);\\n    }\\n\\n    /**\\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\\n     * `recipient`, forwarding all available gas and reverting on errors.\\n     *\\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\\n     * imposed by `transfer`, making them unable to receive funds via\\n     * `transfer`. {sendValue} removes this limitation.\\n     *\\n     * https://diligence.consensys.net/posts/2019/09/stop-using-soliditys-transfer-now/[Learn more].\\n     *\\n     * IMPORTANT: because control is transferred to `recipient`, care must be\\n     * taken to not create reentrancy vulnerabilities. Consider using\\n     * {ReentrancyGuard} or the\\n     * https://solidity.readthedocs.io/en/v0.5.11/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\\n     */\\n    function sendValue(address payable recipient, uint256 amount) internal {\\n        require(address(this).balance >= amount, \\\"Address: insufficient balance\\\");\\n\\n        // solhint-disable-next-line avoid-low-level-calls, avoid-call-value\\n        (bool success, ) = recipient.call{ value: amount }(\\\"\\\");\\n        require(success, \\\"Address: unable to send value, recipient may have reverted\\\");\\n    }\\n}\"\r\n    },\r\n    \"@aave/aave-stake/contracts/stake/StakedTokenV2.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: agpl-3.0\\npragma solidity 0.7.5;\\npragma experimental ABIEncoderV2;\\n\\nimport {ERC20} from '@aave/aave-token/contracts/open-zeppelin/ERC20.sol';\\n\\nimport {IERC20} from '../interfaces/IERC20.sol';\\nimport {IStakedToken} from '../interfaces/IStakedToken.sol';\\nimport {ITransferHook} from '../interfaces/ITransferHook.sol';\\n\\nimport {DistributionTypes} from '../lib/DistributionTypes.sol';\\nimport {SafeMath} from '../lib/SafeMath.sol';\\nimport {SafeERC20} from '../lib/SafeERC20.sol';\\n\\nimport {VersionedInitializable} from '../utils/VersionedInitializable.sol';\\nimport {AaveDistributionManager} from './AaveDistributionManager.sol';\\nimport {GovernancePowerWithSnapshot} from '../lib/GovernancePowerWithSnapshot.sol';\\n\\n/**\\n * @title StakedToken\\n * @notice Contract to stake Aave token, tokenize the position and get rewards, inheriting from a distribution manager contract\\n * @author Aave\\n **/\\ncontract StakedTokenV2 is\\n  IStakedToken,\\n  GovernancePowerWithSnapshot,\\n  VersionedInitializable,\\n  AaveDistributionManager\\n{\\n  using SafeMath for uint256;\\n  using SafeERC20 for IERC20;\\n\\n  function REVISION() public pure virtual returns (uint256) {\\n    return 2;\\n  }\\n\\n  IERC20 public immutable STAKED_TOKEN;\\n  IERC20 public immutable REWARD_TOKEN;\\n  uint256 public immutable COOLDOWN_SECONDS;\\n\\n  /// @notice Seconds available to redeem once the cooldown period is fullfilled\\n  uint256 public immutable UNSTAKE_WINDOW;\\n\\n  /// @notice Address to pull from the rewards, needs to have approved this contract\\n  address public immutable REWARDS_VAULT;\\n\\n  mapping(address => uint256) public stakerRewardsToClaim;\\n  mapping(address => uint256) public stakersCooldowns;\\n\\n  /// @dev End of Storage layout from StakedToken v1\\n\\n  /// @dev To see the voting mappings, go to GovernancePowerWithSnapshot.sol\\n  mapping(address => address) internal _votingDelegates;\\n\\n  mapping(address => mapping(uint256 => Snapshot)) internal _propositionPowerSnapshots;\\n  mapping(address => uint256) internal _propositionPowerSnapshotsCounts;\\n  mapping(address => address) internal _propositionPowerDelegates;\\n\\n  bytes32 public DOMAIN_SEPARATOR;\\n  bytes public constant EIP712_REVISION = bytes('1');\\n  bytes32 internal constant EIP712_DOMAIN =\\n    keccak256('EIP712Domain(string name,string version,uint256 chainId,address verifyingContract)');\\n  bytes32 public constant PERMIT_TYPEHASH =\\n    keccak256('Permit(address owner,address spender,uint256 value,uint256 nonce,uint256 deadline)');\\n\\n  /// @dev owner => next valid nonce to submit with permit()\\n  mapping(address => uint256) public _nonces;\\n\\n  event Staked(address indexed from, address indexed onBehalfOf, uint256 amount);\\n  event Redeem(address indexed from, address indexed to, uint256 amount);\\n\\n  event RewardsAccrued(address user, uint256 amount);\\n  event RewardsClaimed(address indexed from, address indexed to, uint256 amount);\\n\\n  event Cooldown(address indexed user);\\n\\n  constructor(\\n    IERC20 stakedToken,\\n    IERC20 rewardToken,\\n    uint256 cooldownSeconds,\\n    uint256 unstakeWindow,\\n    address rewardsVault,\\n    address emissionManager,\\n    uint128 distributionDuration,\\n    string memory name,\\n    string memory symbol,\\n    uint8 decimals,\\n    address governance\\n  ) public ERC20(name, symbol) AaveDistributionManager(emissionManager, distributionDuration) {\\n    STAKED_TOKEN = stakedToken;\\n    REWARD_TOKEN = rewardToken;\\n    COOLDOWN_SECONDS = cooldownSeconds;\\n    UNSTAKE_WINDOW = unstakeWindow;\\n    REWARDS_VAULT = rewardsVault;\\n    _aaveGovernance = ITransferHook(governance);\\n    ERC20._setupDecimals(decimals);\\n  }\\n\\n  /**\\n   * @dev Called by the proxy contract\\n   **/\\n  function initialize() external virtual initializer {\\n    uint256 chainId;\\n\\n    //solium-disable-next-line\\n    assembly {\\n      chainId := chainid()\\n    }\\n\\n    DOMAIN_SEPARATOR = keccak256(\\n      abi.encode(\\n        EIP712_DOMAIN,\\n        keccak256(bytes(name())),\\n        keccak256(EIP712_REVISION),\\n        chainId,\\n        address(this)\\n      )\\n    );\\n  }\\n\\n  function stake(address onBehalfOf, uint256 amount) external virtual override {\\n    require(amount != 0, 'INVALID_ZERO_AMOUNT');\\n    uint256 balanceOfUser = balanceOf(onBehalfOf);\\n\\n    uint256 accruedRewards =\\n      _updateUserAssetInternal(onBehalfOf, address(this), balanceOfUser, totalSupply());\\n    if (accruedRewards != 0) {\\n      emit RewardsAccrued(onBehalfOf, accruedRewards);\\n      stakerRewardsToClaim[onBehalfOf] = stakerRewardsToClaim[onBehalfOf].add(accruedRewards);\\n    }\\n\\n    stakersCooldowns[onBehalfOf] = getNextCooldownTimestamp(0, amount, onBehalfOf, balanceOfUser);\\n\\n    _mint(onBehalfOf, amount);\\n    IERC20(STAKED_TOKEN).safeTransferFrom(msg.sender, address(this), amount);\\n\\n    emit Staked(msg.sender, onBehalfOf, amount);\\n  }\\n\\n  /**\\n   * @dev Redeems staked tokens, and stop earning rewards\\n   * @param to Address to redeem to\\n   * @param amount Amount to redeem\\n   **/\\n  function redeem(address to, uint256 amount) external virtual override {\\n    require(amount != 0, 'INVALID_ZERO_AMOUNT');\\n    //solium-disable-next-line\\n    uint256 cooldownStartTimestamp = stakersCooldowns[msg.sender];\\n    require(\\n      block.timestamp > cooldownStartTimestamp.add(COOLDOWN_SECONDS),\\n      'INSUFFICIENT_COOLDOWN'\\n    );\\n    require(\\n      block.timestamp.sub(cooldownStartTimestamp.add(COOLDOWN_SECONDS)) <= UNSTAKE_WINDOW,\\n      'UNSTAKE_WINDOW_FINISHED'\\n    );\\n    uint256 balanceOfMessageSender = balanceOf(msg.sender);\\n\\n    uint256 amountToRedeem = (amount > balanceOfMessageSender) ? balanceOfMessageSender : amount;\\n\\n    _updateCurrentUnclaimedRewards(msg.sender, balanceOfMessageSender, true);\\n\\n    _burn(msg.sender, amountToRedeem);\\n\\n    if (balanceOfMessageSender.sub(amountToRedeem) == 0) {\\n      stakersCooldowns[msg.sender] = 0;\\n    }\\n\\n    IERC20(STAKED_TOKEN).safeTransfer(to, amountToRedeem);\\n\\n    emit Redeem(msg.sender, to, amountToRedeem);\\n  }\\n\\n  /**\\n   * @dev Activates the cooldown period to unstake\\n   * - It can't be called if the user is not staking\\n   **/\\n  function cooldown() external override {\\n    require(balanceOf(msg.sender) != 0, 'INVALID_BALANCE_ON_COOLDOWN');\\n    //solium-disable-next-line\\n    stakersCooldowns[msg.sender] = block.timestamp;\\n\\n    emit Cooldown(msg.sender);\\n  }\\n\\n  /**\\n   * @dev Claims an `amount` of `REWARD_TOKEN` to the address `to`\\n   * @param to Address to stake for\\n   * @param amount Amount to stake\\n   **/\\n  function claimRewards(address to, uint256 amount) external virtual override {\\n    uint256 newTotalRewards =\\n      _updateCurrentUnclaimedRewards(msg.sender, balanceOf(msg.sender), false);\\n    uint256 amountToClaim = (amount == type(uint256).max) ? newTotalRewards : amount;\\n\\n    stakerRewardsToClaim[msg.sender] = newTotalRewards.sub(amountToClaim, 'INVALID_AMOUNT');\\n\\n    REWARD_TOKEN.safeTransferFrom(REWARDS_VAULT, to, amountToClaim);\\n\\n    emit RewardsClaimed(msg.sender, to, amountToClaim);\\n  }\\n\\n  /**\\n   * @dev Internal ERC20 _transfer of the tokenized staked tokens\\n   * @param from Address to transfer from\\n   * @param to Address to transfer to\\n   * @param amount Amount to transfer\\n   **/\\n  function _transfer(\\n    address from,\\n    address to,\\n    uint256 amount\\n  ) internal override {\\n    uint256 balanceOfFrom = balanceOf(from);\\n    // Sender\\n    _updateCurrentUnclaimedRewards(from, balanceOfFrom, true);\\n\\n    // Recipient\\n    if (from != to) {\\n      uint256 balanceOfTo = balanceOf(to);\\n      _updateCurrentUnclaimedRewards(to, balanceOfTo, true);\\n\\n      uint256 previousSenderCooldown = stakersCooldowns[from];\\n      stakersCooldowns[to] = getNextCooldownTimestamp(\\n        previousSenderCooldown,\\n        amount,\\n        to,\\n        balanceOfTo\\n      );\\n      // if cooldown was set and whole balance of sender was transferred - clear cooldown\\n      if (balanceOfFrom == amount && previousSenderCooldown != 0) {\\n        stakersCooldowns[from] = 0;\\n      }\\n    }\\n\\n    super._transfer(from, to, amount);\\n  }\\n\\n  /**\\n   * @dev Updates the user state related with his accrued rewards\\n   * @param user Address of the user\\n   * @param userBalance The current balance of the user\\n   * @param updateStorage Boolean flag used to update or not the stakerRewardsToClaim of the user\\n   * @return The unclaimed rewards that were added to the total accrued\\n   **/\\n  function _updateCurrentUnclaimedRewards(\\n    address user,\\n    uint256 userBalance,\\n    bool updateStorage\\n  ) internal returns (uint256) {\\n    uint256 accruedRewards =\\n      _updateUserAssetInternal(user, address(this), userBalance, totalSupply());\\n    uint256 unclaimedRewards = stakerRewardsToClaim[user].add(accruedRewards);\\n\\n    if (accruedRewards != 0) {\\n      if (updateStorage) {\\n        stakerRewardsToClaim[user] = unclaimedRewards;\\n      }\\n      emit RewardsAccrued(user, accruedRewards);\\n    }\\n\\n    return unclaimedRewards;\\n  }\\n\\n  /**\\n   * @dev Calculates the how is gonna be a new cooldown timestamp depending on the sender/receiver situation\\n   *  - If the timestamp of the sender is \\\"better\\\" or the timestamp of the recipient is 0, we take the one of the recipient\\n   *  - Weighted average of from/to cooldown timestamps if:\\n   *    # The sender doesn't have the cooldown activated (timestamp 0).\\n   *    # The sender timestamp is expired\\n   *    # The sender has a \\\"worse\\\" timestamp\\n   *  - If the receiver's cooldown timestamp expired (too old), the next is 0\\n   * @param fromCooldownTimestamp Cooldown timestamp of the sender\\n   * @param amountToReceive Amount\\n   * @param toAddress Address of the recipient\\n   * @param toBalance Current balance of the receiver\\n   * @return The new cooldown timestamp\\n   **/\\n  function getNextCooldownTimestamp(\\n    uint256 fromCooldownTimestamp,\\n    uint256 amountToReceive,\\n    address toAddress,\\n    uint256 toBalance\\n  ) public view returns (uint256) {\\n    uint256 toCooldownTimestamp = stakersCooldowns[toAddress];\\n    if (toCooldownTimestamp == 0) {\\n      return 0;\\n    }\\n\\n    uint256 minimalValidCooldownTimestamp =\\n      block.timestamp.sub(COOLDOWN_SECONDS).sub(UNSTAKE_WINDOW);\\n\\n    if (minimalValidCooldownTimestamp > toCooldownTimestamp) {\\n      toCooldownTimestamp = 0;\\n    } else {\\n      uint256 fromCooldownTimestamp =\\n        (minimalValidCooldownTimestamp > fromCooldownTimestamp)\\n          ? block.timestamp\\n          : fromCooldownTimestamp;\\n\\n      if (fromCooldownTimestamp < toCooldownTimestamp) {\\n        return toCooldownTimestamp;\\n      } else {\\n        toCooldownTimestamp = (\\n          amountToReceive.mul(fromCooldownTimestamp).add(toBalance.mul(toCooldownTimestamp))\\n        )\\n          .div(amountToReceive.add(toBalance));\\n      }\\n    }\\n\\n    return toCooldownTimestamp;\\n  }\\n\\n  /**\\n   * @dev Return the total rewards pending to claim by an staker\\n   * @param staker The staker address\\n   * @return The rewards\\n   */\\n  function getTotalRewardsBalance(address staker) external view returns (uint256) {\\n    DistributionTypes.UserStakeInput[] memory userStakeInputs =\\n      new DistributionTypes.UserStakeInput[](1);\\n    userStakeInputs[0] = DistributionTypes.UserStakeInput({\\n      underlyingAsset: address(this),\\n      stakedByUser: balanceOf(staker),\\n      totalStaked: totalSupply()\\n    });\\n    return stakerRewardsToClaim[staker].add(_getUnclaimedRewards(staker, userStakeInputs));\\n  }\\n\\n  /**\\n   * @dev returns the revision of the implementation contract\\n   * @return The revision\\n   */\\n  function getRevision() internal pure virtual override returns (uint256) {\\n    return REVISION();\\n  }\\n\\n  /**\\n   * @dev implements the permit function as for https://github.com/ethereum/EIPs/blob/8a34d644aacf0f9f8f00815307fd7dd5da07655f/EIPS/eip-2612.md\\n   * @param owner the owner of the funds\\n   * @param spender the spender\\n   * @param value the amount\\n   * @param deadline the deadline timestamp, type(uint256).max for no deadline\\n   * @param v signature param\\n   * @param s signature param\\n   * @param r signature param\\n   */\\n\\n  function permit(\\n    address owner,\\n    address spender,\\n    uint256 value,\\n    uint256 deadline,\\n    uint8 v,\\n    bytes32 r,\\n    bytes32 s\\n  ) external {\\n    require(owner != address(0), 'INVALID_OWNER');\\n    //solium-disable-next-line\\n    require(block.timestamp <= deadline, 'INVALID_EXPIRATION');\\n    uint256 currentValidNonce = _nonces[owner];\\n    bytes32 digest =\\n      keccak256(\\n        abi.encodePacked(\\n          '\\\\x19\\\\x01',\\n          DOMAIN_SEPARATOR,\\n          keccak256(abi.encode(PERMIT_TYPEHASH, owner, spender, value, currentValidNonce, deadline))\\n        )\\n      );\\n\\n    require(owner == ecrecover(digest, v, r, s), 'INVALID_SIGNATURE');\\n    _nonces[owner] = currentValidNonce.add(1);\\n    _approve(owner, spender, value);\\n  }\\n\\n  /**\\n   * @dev Writes a snapshot before any operation involving transfer of value: _transfer, _mint and _burn\\n   * - On _transfer, it writes snapshots for both \\\"from\\\" and \\\"to\\\"\\n   * - On _mint, only for _to\\n   * - On _burn, only for _from\\n   * @param from the from address\\n   * @param to the to address\\n   * @param amount the amount to transfer\\n   */\\n  function _beforeTokenTransfer(\\n    address from,\\n    address to,\\n    uint256 amount\\n  ) internal override {\\n    address votingFromDelegatee = _votingDelegates[from];\\n    address votingToDelegatee = _votingDelegates[to];\\n\\n    if (votingFromDelegatee == address(0)) {\\n      votingFromDelegatee = from;\\n    }\\n    if (votingToDelegatee == address(0)) {\\n      votingToDelegatee = to;\\n    }\\n\\n    _moveDelegatesByType(\\n      votingFromDelegatee,\\n      votingToDelegatee,\\n      amount,\\n      DelegationType.VOTING_POWER\\n    );\\n\\n    address propPowerFromDelegatee = _propositionPowerDelegates[from];\\n    address propPowerToDelegatee = _propositionPowerDelegates[to];\\n\\n    if (propPowerFromDelegatee == address(0)) {\\n      propPowerFromDelegatee = from;\\n    }\\n    if (propPowerToDelegatee == address(0)) {\\n      propPowerToDelegatee = to;\\n    }\\n\\n    _moveDelegatesByType(\\n      propPowerFromDelegatee,\\n      propPowerToDelegatee,\\n      amount,\\n      DelegationType.PROPOSITION_POWER\\n    );\\n\\n    // caching the aave governance address to avoid multiple state loads\\n    ITransferHook aaveGovernance = _aaveGovernance;\\n    if (aaveGovernance != ITransferHook(0)) {\\n      aaveGovernance.onTransfer(from, to, amount);\\n    }\\n  }\\n\\n  function _getDelegationDataByType(DelegationType delegationType)\\n    internal\\n    view\\n    override\\n    returns (\\n      mapping(address => mapping(uint256 => Snapshot)) storage, //snapshots\\n      mapping(address => uint256) storage, //snapshots count\\n      mapping(address => address) storage //delegatees list\\n    )\\n  {\\n    if (delegationType == DelegationType.VOTING_POWER) {\\n      return (_votingSnapshots, _votingSnapshotsCounts, _votingDelegates);\\n    } else {\\n      return (\\n        _propositionPowerSnapshots,\\n        _propositionPowerSnapshotsCounts,\\n        _propositionPowerDelegates\\n      );\\n    }\\n  }\\n\\n  /**\\n   * @dev Delegates power from signatory to `delegatee`\\n   * @param delegatee The address to delegate votes to\\n   * @param delegationType the type of delegation (VOTING_POWER, PROPOSITION_POWER)\\n   * @param nonce The contract state required to match the signature\\n   * @param expiry The time at which to expire the signature\\n   * @param v The recovery byte of the signature\\n   * @param r Half of the ECDSA signature pair\\n   * @param s Half of the ECDSA signature pair\\n   */\\n  function delegateByTypeBySig(\\n    address delegatee,\\n    DelegationType delegationType,\\n    uint256 nonce,\\n    uint256 expiry,\\n    uint8 v,\\n    bytes32 r,\\n    bytes32 s\\n  ) public {\\n    bytes32 structHash =\\n      keccak256(\\n        abi.encode(DELEGATE_BY_TYPE_TYPEHASH, delegatee, uint256(delegationType), nonce, expiry)\\n      );\\n    bytes32 digest = keccak256(abi.encodePacked('\\\\x19\\\\x01', DOMAIN_SEPARATOR, structHash));\\n    address signatory = ecrecover(digest, v, r, s);\\n    require(signatory != address(0), 'INVALID_SIGNATURE');\\n    require(nonce == _nonces[signatory]++, 'INVALID_NONCE');\\n    require(block.timestamp <= expiry, 'INVALID_EXPIRATION');\\n    _delegateByType(signatory, delegatee, delegationType);\\n  }\\n\\n  /**\\n   * @dev Delegates power from signatory to `delegatee`\\n   * @param delegatee The address to delegate votes to\\n   * @param nonce The contract state required to match the signature\\n   * @param expiry The time at which to expire the signature\\n   * @param v The recovery byte of the signature\\n   * @param r Half of the ECDSA signature pair\\n   * @param s Half of the ECDSA signature pair\\n   */\\n  function delegateBySig(\\n    address delegatee,\\n    uint256 nonce,\\n    uint256 expiry,\\n    uint8 v,\\n    bytes32 r,\\n    bytes32 s\\n  ) public {\\n    bytes32 structHash = keccak256(abi.encode(DELEGATE_TYPEHASH, delegatee, nonce, expiry));\\n    bytes32 digest = keccak256(abi.encodePacked('\\\\x19\\\\x01', DOMAIN_SEPARATOR, structHash));\\n    address signatory = ecrecover(digest, v, r, s);\\n    require(signatory != address(0), 'INVALID_SIGNATURE');\\n    require(nonce == _nonces[signatory]++, 'INVALID_NONCE');\\n    require(block.timestamp <= expiry, 'INVALID_EXPIRATION');\\n    _delegateByType(signatory, delegatee, DelegationType.VOTING_POWER);\\n    _delegateByType(signatory, delegatee, DelegationType.PROPOSITION_POWER);\\n  }\\n}\\n\"\r\n    },\r\n    \"@aave/aave-stake/contracts/lib/DistributionTypes.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: agpl-3.0\\npragma solidity 0.7.5;\\npragma experimental ABIEncoderV2;\\n\\nlibrary DistributionTypes {\\n  struct AssetConfigInput {\\n    uint128 emissionPerSecond;\\n    uint256 totalStaked;\\n    address underlyingAsset;\\n  }\\n\\n  struct UserStakeInput {\\n    address underlyingAsset;\\n    uint256 stakedByUser;\\n    uint256 totalStaked;\\n  }\\n}\\n\"\r\n    },\r\n    \"@aave/aave-stake/contracts/stake/AaveDistributionManager.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: agpl-3.0\\npragma solidity 0.7.5;\\npragma experimental ABIEncoderV2;\\n\\nimport {SafeMath} from '../lib/SafeMath.sol';\\nimport {DistributionTypes} from '../lib/DistributionTypes.sol';\\nimport {IAaveDistributionManager} from '../interfaces/IAaveDistributionManager.sol';\\n\\n/**\\n * @title AaveDistributionManager\\n * @notice Accounting contract to manage multiple staking distributions\\n * @author Aave\\n **/\\ncontract AaveDistributionManager is IAaveDistributionManager {\\n  using SafeMath for uint256;\\n\\n  struct AssetData {\\n    uint128 emissionPerSecond;\\n    uint128 lastUpdateTimestamp;\\n    uint256 index;\\n    mapping(address => uint256) users;\\n  }\\n\\n  uint256 internal immutable _oldDistributionEnd;\\n\\n  address public immutable EMISSION_MANAGER;\\n\\n  uint8 public constant PRECISION = 18;\\n\\n  mapping(address => AssetData) public assets;\\n\\n  event AssetConfigUpdated(address indexed asset, uint256 emission);\\n  event AssetIndexUpdated(address indexed asset, uint256 index);\\n  event UserIndexUpdated(address indexed user, address indexed asset, uint256 index);\\n\\n  constructor(address emissionManager, uint256 distributionDuration) public {\\n    _oldDistributionEnd = block.timestamp.add(distributionDuration);\\n    EMISSION_MANAGER = emissionManager;\\n  }\\n\\n  /**\\n   * @dev Configures the distribution of rewards for a list of assets\\n   * @param assetsConfigInput The list of configurations to apply\\n   **/\\n  function configureAssets(DistributionTypes.AssetConfigInput[] calldata assetsConfigInput)\\n    external\\n    override\\n  {\\n    require(msg.sender == EMISSION_MANAGER, 'ONLY_EMISSION_MANAGER');\\n\\n    for (uint256 i = 0; i < assetsConfigInput.length; i++) {\\n      AssetData storage assetConfig = assets[assetsConfigInput[i].underlyingAsset];\\n\\n      _updateAssetStateInternal(\\n        assetsConfigInput[i].underlyingAsset,\\n        assetConfig,\\n        assetsConfigInput[i].totalStaked\\n      );\\n\\n      assetConfig.emissionPerSecond = assetsConfigInput[i].emissionPerSecond;\\n\\n      emit AssetConfigUpdated(\\n        assetsConfigInput[i].underlyingAsset,\\n        assetsConfigInput[i].emissionPerSecond\\n      );\\n    }\\n  }\\n\\n  /**\\n   * @dev Updates the state of one distribution, mainly rewards index and timestamp\\n   * @param underlyingAsset The address used as key in the distribution, for example sAAVE or the aTokens addresses on Aave\\n   * @param assetConfig Storage pointer to the distribution's config\\n   * @param totalStaked Current total of staked assets for this distribution\\n   * @return The new distribution index\\n   **/\\n  function _updateAssetStateInternal(\\n    address underlyingAsset,\\n    AssetData storage assetConfig,\\n    uint256 totalStaked\\n  ) internal returns (uint256) {\\n    uint256 oldIndex = assetConfig.index;\\n    uint128 lastUpdateTimestamp = assetConfig.lastUpdateTimestamp;\\n\\n    if (block.timestamp == lastUpdateTimestamp) {\\n      return oldIndex;\\n    }\\n\\n    uint256 newIndex =\\n      _getAssetIndex(oldIndex, assetConfig.emissionPerSecond, lastUpdateTimestamp, totalStaked);\\n\\n    if (newIndex != oldIndex) {\\n      assetConfig.index = newIndex;\\n      emit AssetIndexUpdated(underlyingAsset, newIndex);\\n    }\\n\\n    assetConfig.lastUpdateTimestamp = uint128(block.timestamp);\\n\\n    return newIndex;\\n  }\\n\\n  /**\\n   * @dev Updates the state of an user in a distribution\\n   * @param user The user's address\\n   * @param asset The address of the reference asset of the distribution\\n   * @param stakedByUser Amount of tokens staked by the user in the distribution at the moment\\n   * @param totalStaked Total tokens staked in the distribution\\n   * @return The accrued rewards for the user until the moment\\n   **/\\n  function _updateUserAssetInternal(\\n    address user,\\n    address asset,\\n    uint256 stakedByUser,\\n    uint256 totalStaked\\n  ) internal returns (uint256) {\\n    AssetData storage assetData = assets[asset];\\n    uint256 userIndex = assetData.users[user];\\n    uint256 accruedRewards = 0;\\n\\n    uint256 newIndex = _updateAssetStateInternal(asset, assetData, totalStaked);\\n\\n    if (userIndex != newIndex) {\\n      if (stakedByUser != 0) {\\n        accruedRewards = _getRewards(stakedByUser, newIndex, userIndex);\\n      }\\n\\n      assetData.users[user] = newIndex;\\n      emit UserIndexUpdated(user, asset, newIndex);\\n    }\\n\\n    return accruedRewards;\\n  }\\n\\n  /**\\n   * @dev Used by \\\"frontend\\\" stake contracts to update the data of an user when claiming rewards from there\\n   * @param user The address of the user\\n   * @param stakes List of structs of the user data related with his stake\\n   * @return The accrued rewards for the user until the moment\\n   **/\\n  function _claimRewards(address user, DistributionTypes.UserStakeInput[] memory stakes)\\n    internal\\n    returns (uint256)\\n  {\\n    uint256 accruedRewards = 0;\\n\\n    for (uint256 i = 0; i < stakes.length; i++) {\\n      accruedRewards = accruedRewards.add(\\n        _updateUserAssetInternal(\\n          user,\\n          stakes[i].underlyingAsset,\\n          stakes[i].stakedByUser,\\n          stakes[i].totalStaked\\n        )\\n      );\\n    }\\n\\n    return accruedRewards;\\n  }\\n\\n  /**\\n   * @dev Return the accrued rewards for an user over a list of distribution\\n   * @param user The address of the user\\n   * @param stakes List of structs of the user data related with his stake\\n   * @return The accrued rewards for the user until the moment\\n   **/\\n  function _getUnclaimedRewards(address user, DistributionTypes.UserStakeInput[] memory stakes)\\n    internal\\n    view\\n    returns (uint256)\\n  {\\n    uint256 accruedRewards = 0;\\n\\n    for (uint256 i = 0; i < stakes.length; i++) {\\n      AssetData storage assetConfig = assets[stakes[i].underlyingAsset];\\n      uint256 assetIndex =\\n        _getAssetIndex(\\n          assetConfig.index,\\n          assetConfig.emissionPerSecond,\\n          assetConfig.lastUpdateTimestamp,\\n          stakes[i].totalStaked\\n        );\\n\\n      accruedRewards = accruedRewards.add(\\n        _getRewards(stakes[i].stakedByUser, assetIndex, assetConfig.users[user])\\n      );\\n    }\\n    return accruedRewards;\\n  }\\n\\n  /**\\n   * @dev Internal function for the calculation of user's rewards on a distribution\\n   * @param principalUserBalance Amount staked by the user on a distribution\\n   * @param reserveIndex Current index of the distribution\\n   * @param userIndex Index stored for the user, representation his staking moment\\n   * @return The rewards\\n   **/\\n  function _getRewards(\\n    uint256 principalUserBalance,\\n    uint256 reserveIndex,\\n    uint256 userIndex\\n  ) internal pure returns (uint256) {\\n    return principalUserBalance.mul(reserveIndex.sub(userIndex)).div(10**uint256(PRECISION));\\n  }\\n\\n  /**\\n   * @dev Calculates the next value of an specific distribution index, with validations\\n   * @param currentIndex Current index of the distribution\\n   * @param emissionPerSecond Representing the total rewards distributed per second per asset unit, on the distribution\\n   * @param lastUpdateTimestamp Last moment this distribution was updated\\n   * @param totalBalance of tokens considered for the distribution\\n   * @return The new index.\\n   **/\\n  function _getAssetIndex(\\n    uint256 currentIndex,\\n    uint256 emissionPerSecond,\\n    uint128 lastUpdateTimestamp,\\n    uint256 totalBalance\\n  ) internal view returns (uint256) {\\n    if (\\n      emissionPerSecond == 0 ||\\n      totalBalance == 0 ||\\n      lastUpdateTimestamp == block.timestamp ||\\n      lastUpdateTimestamp >= _getDistributionEnd()\\n    ) {\\n      return currentIndex;\\n    }\\n\\n    uint256 currentTimestamp =\\n      block.timestamp > _getDistributionEnd() ? _getDistributionEnd() : block.timestamp;\\n    uint256 timeDelta = currentTimestamp.sub(lastUpdateTimestamp);\\n    return\\n      emissionPerSecond.mul(timeDelta).mul(10**uint256(PRECISION)).div(totalBalance).add(\\n        currentIndex\\n      );\\n  }\\n\\n  /**\\n   * @dev Returns the data of an user on a distribution\\n   * @param user Address of the user\\n   * @param asset The address of the reference asset of the distribution\\n   * @return The new index\\n   **/\\n  function getUserAssetData(address user, address asset) public view returns (uint256) {\\n    return assets[asset].users[user];\\n  }\\n\\n  /**\\n   * @dev Returns the timestamp of the end of the current distribution\\n   * @notice This field remains virtual to extend at AaveDistributionManageV2, keeping V1 logic\\n   * @return uint256 unix timestamp\\n   **/\\n  function _getDistributionEnd() internal view virtual returns (uint256) {\\n    return _oldDistributionEnd;\\n  }\\n\\n  /**\\n   * @dev Keeps interface compatibility. Returns the timestamp of the end of the current distribution\\n   * @return uint256 unix timestamp\\n   **/\\n  function DISTRIBUTION_END() external view returns (uint256) {\\n    return _getDistributionEnd();\\n  }\\n}\\n\"\r\n    },\r\n    \"@aave/aave-stake/contracts/interfaces/IAaveDistributionManager.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: agpl-3.0\\npragma solidity 0.7.5;\\npragma experimental ABIEncoderV2;\\n\\nimport {DistributionTypes} from '../lib/DistributionTypes.sol';\\n\\ninterface IAaveDistributionManager {\\n  function configureAssets(DistributionTypes.AssetConfigInput[] calldata assetsConfigInput)\\n    external;\\n}\\n\"\r\n    },\r\n    \"@aave/aave-stake/contracts/stake/StakedTokenV3.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: agpl-3.0\\npragma solidity 0.7.5;\\npragma experimental ABIEncoderV2;\\n\\nimport {ERC20} from '@aave/aave-token/contracts/open-zeppelin/ERC20.sol';\\n\\nimport {IERC20} from '../interfaces/IERC20.sol';\\nimport {IERC20WithPermit} from '../interfaces/IERC20WithPermit.sol';\\nimport {IStakedToken} from '../interfaces/IStakedToken.sol';\\nimport {IStakedTokenV3} from '../interfaces/IStakedTokenV3.sol';\\nimport {ITransferHook} from '../interfaces/ITransferHook.sol';\\n\\nimport {DistributionTypes} from '../lib/DistributionTypes.sol';\\nimport {SafeMath} from '../lib/SafeMath.sol';\\nimport {SafeERC20} from '../lib/SafeERC20.sol';\\nimport {PercentageMath} from '../lib/PercentageMath.sol';\\nimport {StakedTokenV2} from './StakedTokenV2.sol';\\n\\nimport {VersionedInitializable} from '../utils/VersionedInitializable.sol';\\nimport {AaveDistributionManager} from './AaveDistributionManager.sol';\\nimport {GovernancePowerWithSnapshot} from '../lib/GovernancePowerWithSnapshot.sol';\\nimport {RoleManager} from '../utils/RoleManager.sol';\\n\\n/**\\n * @title StakedToken\\n * @notice Contract to stake Aave token, tokenize the position and get rewards, inheriting from a distribution manager contract\\n * @author Aave\\n **/\\ncontract StakedTokenV3 is StakedTokenV2, IStakedTokenV3, RoleManager {\\n  using SafeMath for uint256;\\n  using SafeERC20 for IERC20;\\n  using PercentageMath for uint256;\\n\\n  uint256 public constant SLASH_ADMIN_ROLE = 0;\\n  uint256 public constant COOLDOWN_ADMIN_ROLE = 1;\\n  uint256 public constant CLAIM_HELPER_ROLE = 2;\\n\\n  function REVISION() public pure virtual override returns (uint256) {\\n    return 3;\\n  }\\n\\n  //maximum percentage of the underlying that can be slashed in a single realization event\\n  uint256 internal _maxSlashablePercentage;\\n  bool _cooldownPaused;\\n\\n  modifier onlySlashingAdmin {\\n    require(msg.sender == getAdmin(SLASH_ADMIN_ROLE), 'CALLER_NOT_SLASHING_ADMIN');\\n    _;\\n  }\\n\\n  modifier onlyCooldownAdmin {\\n    require(msg.sender == getAdmin(COOLDOWN_ADMIN_ROLE), 'CALLER_NOT_COOLDOWN_ADMIN');\\n    _;\\n  }\\n\\n  modifier onlyClaimHelper {\\n    require(msg.sender == getAdmin(CLAIM_HELPER_ROLE), 'CALLER_NOT_CLAIM_HELPER');\\n    _;\\n  }\\n\\n  event Staked(address indexed from, address indexed to, uint256 amount, uint256 sharesMinted);\\n  event Redeem(\\n    address indexed from,\\n    address indexed to,\\n    uint256 amount,\\n    uint256 underlyingTransferred\\n  );\\n  event CooldownPauseChanged(bool pause);\\n  event MaxSlashablePercentageChanged(uint256 newPercentage);\\n  event Slashed(address indexed destination, uint256 amount);\\n  event CooldownPauseAdminChanged(address indexed newAdmin);\\n  event SlashingAdminChanged(address indexed newAdmin);\\n\\n  constructor(\\n    IERC20 stakedToken,\\n    IERC20 rewardToken,\\n    uint256 cooldownSeconds,\\n    uint256 unstakeWindow,\\n    address rewardsVault,\\n    address emissionManager,\\n    uint128 distributionDuration,\\n    string memory name,\\n    string memory symbol,\\n    uint8 decimals,\\n    address governance\\n  )\\n    public\\n    StakedTokenV2(\\n      stakedToken,\\n      rewardToken,\\n      cooldownSeconds,\\n      unstakeWindow,\\n      rewardsVault,\\n      emissionManager,\\n      distributionDuration,\\n      name,\\n      symbol,\\n      decimals,\\n      governance\\n    )\\n  {}\\n\\n  /**\\n   * @dev Inherited from StakedTokenV2, deprecated\\n   **/\\n  function initialize() external override {\\n    revert('DEPRECATED');\\n  }\\n\\n  /**\\n   * @dev Called by the proxy contract\\n   **/\\n  function initialize(\\n    address slashingAdmin,\\n    address cooldownPauseAdmin,\\n    address claimHelper,\\n    uint256 maxSlashablePercentage,\\n    string calldata name,\\n    string calldata symbol,\\n    uint8 decimals\\n  ) external initializer {\\n    uint256 chainId;\\n\\n    //solium-disable-next-line\\n    assembly {\\n      chainId := chainid()\\n    }\\n\\n    DOMAIN_SEPARATOR = keccak256(\\n      abi.encode(\\n        EIP712_DOMAIN,\\n        keccak256(bytes(super.name())),\\n        keccak256(EIP712_REVISION),\\n        chainId,\\n        address(this)\\n      )\\n    );\\n\\n    if (REVISION() == 1) {\\n      _name = name;\\n      _symbol = symbol;\\n      _setupDecimals(decimals);\\n    }\\n\\n    address[] memory adminsAddresses = new address[](3);\\n    uint256[] memory adminsRoles = new uint256[](3);\\n\\n    adminsAddresses[0] = slashingAdmin;\\n    adminsAddresses[1] = cooldownPauseAdmin;\\n    adminsAddresses[2] = claimHelper;\\n\\n    adminsRoles[0] = SLASH_ADMIN_ROLE;\\n    adminsRoles[1] = COOLDOWN_ADMIN_ROLE;\\n    adminsRoles[2] = CLAIM_HELPER_ROLE;\\n\\n    _initAdmins(adminsRoles, adminsAddresses);\\n\\n    _maxSlashablePercentage = maxSlashablePercentage;\\n  }\\n\\n  /**\\n   * @dev Allows a from to stake STAKED_TOKEN\\n   * @param to Address of the from that will receive stake token shares\\n   * @param amount The amount to be staked\\n   **/\\n  function stake(address to, uint256 amount) external override(IStakedToken, StakedTokenV2) {\\n    _stake(msg.sender, to, amount, true);\\n  }\\n\\n  /**\\n   * @dev Allows a from to stake STAKED_TOKEN with gasless approvals (permit)\\n   * @param to Address of the from that will receive stake token shares\\n   * @param amount The amount to be staked\\n   * @param deadline The permit execution deadline\\n   * @param v The v component of the signed message\\n   * @param r The r component of the signed message\\n   * @param s The s component of the signed message\\n   **/\\n  function stakeWithPermit(\\n    address from,\\n    address to,\\n    uint256 amount,\\n    uint256 deadline,\\n    uint8 v,\\n    bytes32 r,\\n    bytes32 s\\n  ) external override {\\n    IERC20WithPermit(address(STAKED_TOKEN)).permit(from, address(this), amount, deadline, v, r, s);\\n    _stake(from, to, amount, true);\\n  }\\n\\n  /**\\n   * @dev Redeems staked tokens, and stop earning rewards\\n   * @param to Address to redeem to\\n   * @param amount Amount to redeem\\n   **/\\n  function redeem(address to, uint256 amount) external override(IStakedToken, StakedTokenV2) {\\n    _redeem(msg.sender, to, amount);\\n  }\\n\\n  /**\\n   * @dev Redeems staked tokens for a user. Only the claim helper contract is allowed to call this function\\n   * @param from Address to redeem from\\n   * @param to Address to redeem to\\n   * @param amount Amount to redeem\\n   **/\\n  function redeemOnBehalf(\\n    address from,\\n    address to,\\n    uint256 amount\\n  ) external override onlyClaimHelper {\\n    _redeem(from, to, amount);\\n  }\\n\\n  /**\\n   * @dev Claims an `amount` of `REWARD_TOKEN` to the address `to`\\n   * @param to Address to send the claimed rewards\\n   * @param amount Amount to stake\\n   **/\\n  function claimRewards(address to, uint256 amount) external override(IStakedToken, StakedTokenV2) {\\n    _claimRewards(msg.sender, to, amount);\\n  }\\n\\n  /**\\n   * @dev Claims an `amount` of `REWARD_TOKEN` to the address `to` on behalf of the user. Only the claim helper contract is allowed to call this function\\n   * @param from The address of the user from to claim\\n   * @param to Address to send the claimed rewards\\n   * @param amount Amount to claim\\n   **/\\n  function claimRewardsOnBehalf(\\n    address from,\\n    address to,\\n    uint256 amount\\n  ) external override onlyClaimHelper returns (uint256) {\\n    return _claimRewards(from, to, amount);\\n  }\\n\\n  /**\\n   * @dev Claims an `amount` of `REWARD_TOKEN` amd restakes\\n   * @param to Address to stake to\\n   * @param amount Amount to claim\\n   **/\\n  function claimRewardsAndStake(address to, uint256 amount) external override returns (uint256) {\\n    require(REWARD_TOKEN == STAKED_TOKEN, 'REWARD_TOKEN_IS_NOT_STAKED_TOKEN');\\n\\n    uint256 rewardsClaimed = _claimRewards(msg.sender, address(this), amount);\\n    if (rewardsClaimed != 0) {\\n      _stake(address(this), to, rewardsClaimed, false);\\n    }\\n    return rewardsClaimed;\\n  }\\n\\n  /**\\n   * @dev Claims an `amount` of `REWARD_TOKEN` and restakes. Only the claim helper contract is allowed to call this function\\n   * @param from The address of the from from which to claim\\n   * @param to Address to stake to\\n   * @param amount Amount to claim\\n   **/\\n  function claimRewardsAndStakeOnBehalf(\\n    address from,\\n    address to,\\n    uint256 amount\\n  ) external override onlyClaimHelper returns (uint256) {\\n    require(REWARD_TOKEN == STAKED_TOKEN, 'REWARD_TOKEN_IS_NOT_STAKED_TOKEN');\\n\\n    uint256 rewardsClaimed = _claimRewards(from, address(this), amount);\\n    _stake(address(this), to, rewardsClaimed, false);\\n    return (rewardsClaimed);\\n  }\\n\\n  /**\\n   * @dev Claims an `amount` of `REWARD_TOKEN` amd redeem\\n   * @param claimAmount Amount to claim\\n   * @param redeemAmount Amount to redeem\\n   * @param to Address to claim and unstake to\\n   **/\\n  function claimRewardsAndRedeem(\\n    address to,\\n    uint256 claimAmount,\\n    uint256 redeemAmount\\n  ) external override {\\n    _claimRewards(msg.sender, to, claimAmount);\\n    _redeem(msg.sender, to, redeemAmount);\\n  }\\n\\n  /**\\n   * @dev Claims an `amount` of `REWARD_TOKEN` and redeem. Only the claim helper contract is allowed to call this function\\n   * @param from The address of the from\\n   * @param to Address to claim and unstake to\\n   * @param claimAmount Amount to claim\\n   * @param redeemAmount Amount to redeem\\n   **/\\n  function claimRewardsAndRedeemOnBehalf(\\n    address from,\\n    address to,\\n    uint256 claimAmount,\\n    uint256 redeemAmount\\n  ) external override onlyClaimHelper {\\n    _claimRewards(from, to, claimAmount);\\n    _redeem(from, to, redeemAmount);\\n  }\\n\\n  /**\\n   * @dev Calculates the exchange rate between the amount of STAKED_TOKEN and the the StakeToken total supply.\\n   * Slashing will reduce the exchange rate. Supplying STAKED_TOKEN to the stake contract\\n   * can replenish the slashed STAKED_TOKEN and bring the exchange rate back to 1\\n   **/\\n  function exchangeRate() public view override returns (uint256) {\\n    uint256 currentSupply = totalSupply();\\n\\n    if (currentSupply == 0) {\\n      return 1e18; //initial exchange rate is 1:1\\n    }\\n\\n    return STAKED_TOKEN.balanceOf(address(this)).mul(1e18).div(currentSupply);\\n  }\\n\\n  /**\\n   * @dev Executes a slashing of the underlying of a certain amount, transferring the seized funds\\n   * to destination. Decreasing the amount of underlying will automatically adjust the exchange rate\\n   * @param destination the address where seized funds will be transferred\\n   * @param amount the amount\\n   **/\\n  function slash(address destination, uint256 amount) external override onlySlashingAdmin {\\n    uint256 balance = STAKED_TOKEN.balanceOf(address(this));\\n\\n    uint256 maxSlashable = balance.percentMul(_maxSlashablePercentage);\\n\\n    require(amount <= maxSlashable, 'INVALID_SLASHING_AMOUNT');\\n\\n    STAKED_TOKEN.safeTransfer(destination, amount);\\n\\n    emit Slashed(destination, amount);\\n  }\\n\\n  /**\\n   * @dev returns true if the unstake cooldown is paused\\n   */\\n  function getCooldownPaused() external view override returns (bool) {\\n    return _cooldownPaused;\\n  }\\n\\n  /**\\n   * @dev sets the state of the cooldown pause\\n   * @param paused true if the cooldown needs to be paused, false otherwise\\n   */\\n  function setCooldownPause(bool paused) external override onlyCooldownAdmin {\\n    _cooldownPaused = paused;\\n    emit CooldownPauseChanged(paused);\\n  }\\n\\n  /**\\n   * @dev sets the admin of the slashing pausing function\\n   * @param percentage the new maximum slashable percentage\\n   */\\n  function setMaxSlashablePercentage(uint256 percentage) external override onlySlashingAdmin {\\n    require(percentage <= PercentageMath.PERCENTAGE_FACTOR, 'INVALID_SLASHING_PERCENTAGE');\\n\\n    _maxSlashablePercentage = percentage;\\n    emit MaxSlashablePercentageChanged(percentage);\\n  }\\n\\n  /**\\n   * @dev returns the current maximum slashable percentage of the stake\\n   */\\n  function getMaxSlashablePercentage() external view override returns (uint256) {\\n    return _maxSlashablePercentage;\\n  }\\n\\n  /**\\n   * @dev returns the revision of the implementation contract\\n   * @return The revision\\n   */\\n  function getRevision() internal pure virtual override returns (uint256) {\\n    return REVISION();\\n  }\\n\\n  function _claimRewards(\\n    address from,\\n    address to,\\n    uint256 amount\\n  ) internal returns (uint256) {\\n    uint256 newTotalRewards = _updateCurrentUnclaimedRewards(from, balanceOf(from), false);\\n\\n    uint256 amountToClaim = (amount == type(uint256).max) ? newTotalRewards : amount;\\n\\n    stakerRewardsToClaim[from] = newTotalRewards.sub(amountToClaim, 'INVALID_AMOUNT');\\n    REWARD_TOKEN.safeTransferFrom(REWARDS_VAULT, to, amountToClaim);\\n    emit RewardsClaimed(from, to, amountToClaim);\\n    return (amountToClaim);\\n  }\\n\\n  function _stake(\\n    address from,\\n    address to,\\n    uint256 amount,\\n    bool pullFunds\\n  ) internal {\\n    require(amount != 0, 'INVALID_ZERO_AMOUNT');\\n\\n    uint256 balanceOfUser = balanceOf(to);\\n\\n    uint256 accruedRewards =\\n      _updateUserAssetInternal(to, address(this), balanceOfUser, totalSupply());\\n\\n    if (accruedRewards != 0) {\\n      emit RewardsAccrued(to, accruedRewards);\\n      stakerRewardsToClaim[to] = stakerRewardsToClaim[to].add(accruedRewards);\\n    }\\n\\n    stakersCooldowns[to] = getNextCooldownTimestamp(0, amount, to, balanceOfUser);\\n\\n    uint256 sharesToMint = amount.mul(1e18).div(exchangeRate());\\n    _mint(to, sharesToMint);\\n\\n    if (pullFunds) {\\n      STAKED_TOKEN.safeTransferFrom(from, address(this), amount);\\n    }\\n\\n    emit Staked(from, to, amount, sharesToMint);\\n  }\\n\\n  /**\\n   * @dev Redeems staked tokens, and stop earning rewards\\n   * @param to Address to redeem to\\n   * @param amount Amount to redeem\\n   **/\\n  function _redeem(\\n    address from,\\n    address to,\\n    uint256 amount\\n  ) internal {\\n    require(amount != 0, 'INVALID_ZERO_AMOUNT');\\n    //solium-disable-next-line\\n    uint256 cooldownStartTimestamp = stakersCooldowns[from];\\n\\n    require(\\n      !_cooldownPaused && block.timestamp > cooldownStartTimestamp.add(COOLDOWN_SECONDS),\\n      'INSUFFICIENT_COOLDOWN'\\n    );\\n    require(\\n      block.timestamp.sub(cooldownStartTimestamp.add(COOLDOWN_SECONDS)) <= UNSTAKE_WINDOW,\\n      'UNSTAKE_WINDOW_FINISHED'\\n    );\\n    uint256 balanceOfFrom = balanceOf(from);\\n\\n    uint256 amountToRedeem = (amount > balanceOfFrom) ? balanceOfFrom : amount;\\n\\n    _updateCurrentUnclaimedRewards(from, balanceOfFrom, true);\\n\\n    uint256 underlyingToRedeem = amountToRedeem.mul(exchangeRate()).div(1e18);\\n\\n    _burn(from, amountToRedeem);\\n\\n    if (balanceOfFrom.sub(amountToRedeem) == 0) {\\n      stakersCooldowns[from] = 0;\\n    }\\n\\n    IERC20(STAKED_TOKEN).safeTransfer(to, underlyingToRedeem);\\n\\n    emit Redeem(from, to, amountToRedeem, underlyingToRedeem);\\n  }\\n}\\n\"\r\n    },\r\n    \"@aave/aave-stake/contracts/interfaces/IERC20WithPermit.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: agpl-3.0\\npragma solidity 0.7.5;\\n\\nimport {IERC20} from './IERC20.sol';\\n\\ninterface IERC20WithPermit is IERC20 {\\n  function permit(\\n    address owner,\\n    address spender,\\n    uint256 value,\\n    uint256 deadline,\\n    uint8 v,\\n    bytes32 r,\\n    bytes32 s\\n  ) external;\\n}\\n\"\r\n    },\r\n    \"@aave/aave-stake/contracts/interfaces/IStakedTokenV3.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: agpl-3.0\\npragma solidity 0.7.5;\\n\\nimport {IStakedToken} from './IStakedToken.sol';\\n\\ninterface IStakedTokenV3 is IStakedToken {\\n  function exchangeRate() external view returns (uint256);\\n\\n  function getCooldownPaused() external view returns (bool);\\n\\n  function setCooldownPause(bool paused) external;\\n\\n  function slash(address destination, uint256 amount) external;\\n\\n  function getMaxSlashablePercentage() external view returns (uint256);\\n\\n  function setMaxSlashablePercentage(uint256 percentage) external;\\n\\n  function stakeWithPermit(\\n    address from,\\n    address to,\\n    uint256 amount,\\n    uint256 deadline,\\n    uint8 v,\\n    bytes32 r,\\n    bytes32 s\\n  ) external;\\n\\n  function claimRewardsOnBehalf(\\n    address from,\\n    address to,\\n    uint256 amount\\n  ) external returns (uint256);\\n\\n  function redeemOnBehalf(\\n    address from,\\n    address to,\\n    uint256 amount\\n  ) external;\\n\\n  function claimRewardsAndStake(address to, uint256 amount) external returns (uint256);\\n\\n  function claimRewardsAndRedeem(\\n    address to,\\n    uint256 claimAmount,\\n    uint256 redeemAmount\\n  ) external;\\n\\n  function claimRewardsAndStakeOnBehalf(\\n    address from,\\n    address to,\\n    uint256 amount\\n  ) external returns (uint256);\\n\\n  function claimRewardsAndRedeemOnBehalf(\\n    address from,\\n    address to,\\n    uint256 claimAmount,\\n    uint256 redeemAmount\\n  ) external;\\n}\\n\"\r\n    },\r\n    \"@aave/aave-stake/contracts/lib/PercentageMath.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: agpl-3.0\\npragma solidity 0.7.5;\\n\\n/**\\n * @title PercentageMath library\\n * @author Aave\\n * @notice Provides functions to perform percentage calculations\\n * @dev Percentages are defined by default with 2 decimals of precision (100.00). The precision is indicated by PERCENTAGE_FACTOR\\n * @dev Operations are rounded half up\\n **/\\n\\nlibrary PercentageMath {\\n  uint256 constant PERCENTAGE_FACTOR = 1e4; //percentage plus two decimals\\n  uint256 constant HALF_PERCENT = PERCENTAGE_FACTOR / 2;\\n\\n  /**\\n   * @dev Executes a percentage multiplication\\n   * @param value The value of which the percentage needs to be calculated\\n   * @param percentage The percentage of the value to be calculated\\n   * @return The percentage of value\\n   **/\\n  function percentMul(uint256 value, uint256 percentage) internal pure returns (uint256) {\\n    if (value == 0 || percentage == 0) {\\n      return 0;\\n    }\\n\\n    require(\\n      value <= (type(uint256).max - HALF_PERCENT) / percentage,\\n      \\\"MATH_MULTIPLICATION_OVERFLOW\\\"\\n    );\\n\\n    return (value * percentage + HALF_PERCENT) / PERCENTAGE_FACTOR;\\n  }\\n\\n  /**\\n   * @dev Executes a percentage division\\n   * @param value The value of which the percentage needs to be calculated\\n   * @param percentage The percentage of the value to be calculated\\n   * @return The value divided the percentage\\n   **/\\n  function percentDiv(uint256 value, uint256 percentage) internal pure returns (uint256) {\\n    require(percentage != 0, \\\"MATH_DIVISION_BY_ZERO\\\");\\n    uint256 halfPercentage = percentage / 2;\\n\\n    require(\\n      value <= (type(uint256).max - halfPercentage) / PERCENTAGE_FACTOR,\\n      \\\"MATH_MULTIPLICATION_OVERFLOW\\\"\\n    );\\n\\n    return (value * PERCENTAGE_FACTOR + halfPercentage) / percentage;\\n  }\\n}\\n\"\r\n    },\r\n    \"@aave/aave-stake/contracts/utils/RoleManager.sol\": {\r\n      \"content\": \"pragma solidity ^0.7.5;\\n\\n/**\\n * @title RoleManager\\n * @notice Generic role manager to manage slashing and cooldown admin in StakedAaveV3.\\n *         It implements a claim admin role pattern to safely migrate between different admin addresses\\n * @author Aave\\n **/\\ncontract RoleManager {\\n  mapping(uint256 => address) private _admins;\\n  mapping(uint256 => address) private _pendingAdmins;\\n\\n  event PendingAdminChanged(address indexed newPendingAdmin);\\n  event RoleClaimed(address indexed newAdming, uint256 role);\\n\\n  modifier onlyRoleAdmin(uint256 role) {\\n    require(_admins[role] == msg.sender, 'CALLER_NOT_ROLE_ADMIN');\\n    _;\\n  }\\n\\n  modifier onlyPendingRoleAdmin(uint256 role) {\\n    require(_pendingAdmins[role] == msg.sender, 'CALLER_NOT_PENDING_ROLE_ADMIN');\\n    _;\\n  }\\n\\n  /**\\n  * @dev returns the admin associated with the specific role\\n  * @param role the role associated with the admin being returned\\n  **/\\n  function getAdmin(uint256 role) public view returns (address) {\\n    return _admins[role];\\n  }\\n\\n  /**\\n  * @dev returns the pending admin associated with the specific role\\n  * @param role the role associated with the pending admin being returned\\n  **/\\n  function getPendingAdmin(uint256 role) public view returns (address) {\\n    return _pendingAdmins[role];\\n  }\\n\\n  /**\\n  * @dev sets the pending admin for a specific role\\n  * @param role the role associated with the new pending admin being set\\n  * @param newPendingAdmin the address of the new pending admin\\n  **/\\n  function setPendingAdmin(uint256 role, address newPendingAdmin) public onlyRoleAdmin(role) {\\n    _pendingAdmins[role] = newPendingAdmin;\\n    emit PendingAdminChanged(newPendingAdmin);\\n  }\\n\\n  /**\\n  * @dev allows the caller to become a specific role admin\\n  * @param role the role associated with the admin claiming the new role\\n  **/\\n  function claimRoleAdmin(uint256 role) external onlyPendingRoleAdmin(role) {\\n    _admins[role] = msg.sender;\\n    emit RoleClaimed(msg.sender, role);\\n  }\\n\\n  function _initAdmins(uint256[] memory roles, address[] memory admins) internal {\\n    require(roles.length == admins.length, 'INCONSISTENT_INITIALIZATION');\\n\\n    for (uint256 i = 0; i < roles.length; i++) {\\n      require(_admins[i] == address(0), 'ADMIN_ALREADY_INITIALIZED');\\n      _admins[roles[i]] = admins[i];\\n      emit RoleClaimed(admins[i], roles[i]);\\n    }\\n  }\\n}\\n\"\r\n    },\r\n    \"@aave/aave-stake/contracts/lib/BaseUpgradeabilityProxy.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\npragma solidity 0.7.5;\\n\\nimport './Proxy.sol';\\nimport './Address.sol';\\n\\n/**\\n * @title BaseUpgradeabilityProxy\\n * @dev From https://github.com/OpenZeppelin/openzeppelin-sdk/tree/solc-0.6/packages/lib/contracts/upgradeability\\n * This contract implements a proxy that allows to change the\\n * implementation address to which it will delegate.\\n * Such a change is called an implementation upgrade.\\n */\\ncontract BaseUpgradeabilityProxy is Proxy {\\n  /**\\n   * @dev Emitted when the implementation is upgraded.\\n   * @param implementation Address of the new implementation.\\n   */\\n  event Upgraded(address indexed implementation);\\n\\n  /**\\n   * @dev Storage slot with the address of the current implementation.\\n   * This is the keccak-256 hash of \\\"eip1967.proxy.implementation\\\" subtracted by 1, and is\\n   * validated in the constructor.\\n   */\\n  bytes32 internal constant IMPLEMENTATION_SLOT =\\n    0x360894a13ba1a3210667c828492db98dca3e2076cc3735a920a3ca505d382bbc;\\n\\n  /**\\n   * @dev Returns the current implementation.\\n   * @return impl Address of the current implementation\\n   */\\n  function _implementation() internal view override returns (address impl) {\\n    bytes32 slot = IMPLEMENTATION_SLOT;\\n    assembly {\\n      impl := sload(slot)\\n    }\\n  }\\n\\n  /**\\n   * @dev Upgrades the proxy to a new implementation.\\n   * @param newImplementation Address of the new implementation.\\n   */\\n  function _upgradeTo(address newImplementation) internal {\\n    _setImplementation(newImplementation);\\n    emit Upgraded(newImplementation);\\n  }\\n\\n  /**\\n   * @dev Sets the implementation address of the proxy.\\n   * @param newImplementation Address of the new implementation.\\n   */\\n  function _setImplementation(address newImplementation) internal {\\n    require(\\n      Address.isContract(newImplementation),\\n      'Cannot set a proxy implementation to a non-contract address'\\n    );\\n\\n    bytes32 slot = IMPLEMENTATION_SLOT;\\n\\n    assembly {\\n      sstore(slot, newImplementation)\\n    }\\n  }\\n}\\n\"\r\n    },\r\n    \"@aave/aave-stake/contracts/lib/Proxy.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\npragma solidity 0.7.5;\\n\\n/**\\n * @title Proxy\\n * @dev From https://github.com/OpenZeppelin/openzeppelin-sdk/tree/solc-0.6/packages/lib/contracts/upgradeability\\n * Implements delegation of calls to other contracts, with proper\\n * forwarding of return values and bubbling of failures.\\n * It defines a fallback function that delegates all calls to the address\\n * returned by the abstract _implementation() internal function.\\n */\\nabstract contract Proxy {\\n  /**\\n   * @dev Fallback function.\\n   * Implemented entirely in `_fallback`.\\n   */\\n  fallback() external payable {\\n    _fallback();\\n  }\\n\\n  /**\\n   * @return The Address of the implementation.\\n   */\\n  function _implementation() internal view virtual returns (address);\\n\\n  /**\\n   * @dev Delegates execution to an implementation contract.\\n   * This is a low level function that doesn't return to its internal call site.\\n   * It will return to the external caller whatever the implementation returns.\\n   * @param implementation Address to delegate.\\n   */\\n  function _delegate(address implementation) internal {\\n    assembly {\\n      // Copy msg.data. We take full control of memory in this inline assembly\\n      // block because it will not return to Solidity code. We overwrite the\\n      // Solidity scratch pad at memory position 0.\\n      calldatacopy(0, 0, calldatasize())\\n\\n      // Call the implementation.\\n      // out and outsize are 0 because we don't know the size yet.\\n      let result := delegatecall(gas(), implementation, 0, calldatasize(), 0, 0)\\n\\n      // Copy the returned data.\\n      returndatacopy(0, 0, returndatasize())\\n\\n      switch result\\n        // delegatecall returns 0 on error.\\n        case 0 {\\n          revert(0, returndatasize())\\n        }\\n        default {\\n          return(0, returndatasize())\\n        }\\n    }\\n  }\\n\\n  /**\\n   * @dev Function that is run as the first thing in the fallback function.\\n   * Can be redefined in derived contracts to add functionality.\\n   * Redefinitions must call super._willFallback().\\n   */\\n  function _willFallback() internal virtual {}\\n\\n  /**\\n   * @dev fallback implementation.\\n   * Extracted to enable manual triggering.\\n   */\\n  function _fallback() internal {\\n    _willFallback();\\n    _delegate(_implementation());\\n  }\\n}\\n\"\r\n    },\r\n    \"@aave/aave-stake/contracts/lib/InitializableUpgradeabilityProxy.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\npragma solidity 0.7.5;\\n\\nimport './BaseUpgradeabilityProxy.sol';\\n\\n/**\\n * @title InitializableUpgradeabilityProxy\\n * @dev From https://github.com/OpenZeppelin/openzeppelin-sdk/tree/solc-0.6/packages/lib/contracts/upgradeability\\n * Extends BaseUpgradeabilityProxy with an initializer for initializing\\n * implementation and init data.\\n */\\ncontract InitializableUpgradeabilityProxy is BaseUpgradeabilityProxy {\\n  /**\\n   * @dev Contract initializer.\\n   * @param _logic Address of the initial implementation.\\n   * @param _data Data to send as msg.data to the implementation to initialize the proxied contract.\\n   * It should include the signature and the parameters of the function to be called, as described in\\n   * https://solidity.readthedocs.io/en/v0.4.24/abi-spec.html#function-selector-and-argument-encoding.\\n   * This parameter is optional, if no data is given the initialization call to proxied contract will be skipped.\\n   */\\n  function initialize(address _logic, bytes memory _data) public payable {\\n    require(_implementation() == address(0));\\n    assert(IMPLEMENTATION_SLOT == bytes32(uint256(keccak256('eip1967.proxy.implementation')) - 1));\\n    _setImplementation(_logic);\\n    if (_data.length > 0) {\\n      (bool success, ) = _logic.delegatecall(_data);\\n      require(success);\\n    }\\n  }\\n}\\n\"\r\n    },\r\n    \"@aave/aave-stake/contracts/lib/InitializableAdminUpgradeabilityProxy.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\npragma solidity 0.7.5;\\n\\nimport './BaseAdminUpgradeabilityProxy.sol';\\nimport './InitializableUpgradeabilityProxy.sol';\\n\\n/**\\n * @title InitializableAdminUpgradeabilityProxy\\n * @dev From https://github.com/OpenZeppelin/openzeppelin-sdk/tree/solc-0.6/packages/lib/contracts/upgradeability\\n * Extends from BaseAdminUpgradeabilityProxy with an initializer for\\n * initializing the implementation, admin, and init data.\\n */\\ncontract InitializableAdminUpgradeabilityProxy is\\n  BaseAdminUpgradeabilityProxy,\\n  InitializableUpgradeabilityProxy\\n{\\n  /**\\n   * Contract initializer.\\n   * @param _logic address of the initial implementation.\\n   * @param _admin Address of the proxy administrator.\\n   * @param _data Data to send as msg.data to the implementation to initialize the proxied contract.\\n   * It should include the signature and the parameters of the function to be called, as described in\\n   * https://solidity.readthedocs.io/en/v0.4.24/abi-spec.html#function-selector-and-argument-encoding.\\n   * This parameter is optional, if no data is given the initialization call to proxied contract will be skipped.\\n   */\\n  function initialize(\\n    address _logic,\\n    address _admin,\\n    bytes memory _data\\n  ) public payable {\\n    require(_implementation() == address(0));\\n    InitializableUpgradeabilityProxy.initialize(_logic, _data);\\n    assert(ADMIN_SLOT == bytes32(uint256(keccak256('eip1967.proxy.admin')) - 1));\\n    _setAdmin(_admin);\\n  }\\n\\n  /**\\n   * @dev Only fall back when the sender is not the admin.\\n   */\\n  function _willFallback() internal override(BaseAdminUpgradeabilityProxy, Proxy) {\\n    BaseAdminUpgradeabilityProxy._willFallback();\\n  }\\n}\\n\"\r\n    },\r\n    \"@aave/aave-stake/contracts/lib/BaseAdminUpgradeabilityProxy.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\npragma solidity 0.7.5;\\n\\nimport './UpgradeabilityProxy.sol';\\n\\n/**\\n * @title BaseAdminUpgradeabilityProxy\\n * @dev From https://github.com/OpenZeppelin/openzeppelin-sdk/tree/solc-0.6/packages/lib/contracts/upgradeability\\n * This contract combines an upgradeability proxy with an authorization\\n * mechanism for administrative tasks.\\n * All external functions in this contract must be guarded by the\\n * `ifAdmin` modifier. See ethereum/solidity#3864 for a Solidity\\n * feature proposal that would enable this to be done automatically.\\n */\\ncontract BaseAdminUpgradeabilityProxy is BaseUpgradeabilityProxy {\\n  /**\\n   * @dev Emitted when the administration has been transferred.\\n   * @param previousAdmin Address of the previous admin.\\n   * @param newAdmin Address of the new admin.\\n   */\\n  event AdminChanged(address previousAdmin, address newAdmin);\\n\\n  /**\\n   * @dev Storage slot with the admin of the contract.\\n   * This is the keccak-256 hash of \\\"eip1967.proxy.admin\\\" subtracted by 1, and is\\n   * validated in the constructor.\\n   */\\n\\n  bytes32 internal constant ADMIN_SLOT =\\n    0xb53127684a568b3173ae13b9f8a6016e243e63b6e8ee1178d6a717850b5d6103;\\n\\n  /**\\n   * @dev Modifier to check whether the `msg.sender` is the admin.\\n   * If it is, it will run the function. Otherwise, it will delegate the call\\n   * to the implementation.\\n   */\\n  modifier ifAdmin() {\\n    if (msg.sender == _admin()) {\\n      _;\\n    } else {\\n      _fallback();\\n    }\\n  }\\n\\n  /**\\n   * @return The address of the proxy admin.\\n   */\\n  function admin() external ifAdmin returns (address) {\\n    return _admin();\\n  }\\n\\n  /**\\n   * @return The address of the implementation.\\n   */\\n  function implementation() external ifAdmin returns (address) {\\n    return _implementation();\\n  }\\n\\n  /**\\n   * @dev Changes the admin of the proxy.\\n   * Only the current admin can call this function.\\n   * @param newAdmin Address to transfer proxy administration to.\\n   */\\n  function changeAdmin(address newAdmin) external ifAdmin {\\n    require(newAdmin != address(0), 'Cannot change the admin of a proxy to the zero address');\\n    emit AdminChanged(_admin(), newAdmin);\\n    _setAdmin(newAdmin);\\n  }\\n\\n  /**\\n   * @dev Upgrade the backing implementation of the proxy.\\n   * Only the admin can call this function.\\n   * @param newImplementation Address of the new implementation.\\n   */\\n  function upgradeTo(address newImplementation) external ifAdmin {\\n    _upgradeTo(newImplementation);\\n  }\\n\\n  /**\\n   * @dev Upgrade the backing implementation of the proxy and call a function\\n   * on the new implementation.\\n   * This is useful to initialize the proxied contract.\\n   * @param newImplementation Address of the new implementation.\\n   * @param data Data to send as msg.data in the low level call.\\n   * It should include the signature and the parameters of the function to be called, as described in\\n   * https://solidity.readthedocs.io/en/v0.4.24/abi-spec.html#function-selector-and-argument-encoding.\\n   */\\n  function upgradeToAndCall(address newImplementation, bytes calldata data)\\n    external\\n    payable\\n    ifAdmin\\n  {\\n    _upgradeTo(newImplementation);\\n    (bool success, ) = newImplementation.delegatecall(data);\\n    require(success);\\n  }\\n\\n  /**\\n   * @return adm The admin slot.\\n   */\\n  function _admin() internal view returns (address adm) {\\n    bytes32 slot = ADMIN_SLOT;\\n    assembly {\\n      adm := sload(slot)\\n    }\\n  }\\n\\n  /**\\n   * @dev Sets the address of the proxy admin.\\n   * @param newAdmin Address of the new proxy admin.\\n   */\\n  function _setAdmin(address newAdmin) internal {\\n    bytes32 slot = ADMIN_SLOT;\\n\\n    assembly {\\n      sstore(slot, newAdmin)\\n    }\\n  }\\n\\n  /**\\n   * @dev Only fall back when the sender is not the admin.\\n   */\\n  function _willFallback() internal virtual override {\\n    require(msg.sender != _admin(), 'Cannot call fallback function from the proxy admin');\\n    super._willFallback();\\n  }\\n}\\n\"\r\n    },\r\n    \"@aave/aave-stake/contracts/lib/UpgradeabilityProxy.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: agpl-3.0\\npragma solidity 0.7.5;\\n\\nimport './BaseUpgradeabilityProxy.sol';\\n\\n/**\\n * @title UpgradeabilityProxy\\n * @dev From https://github.com/OpenZeppelin/openzeppelin-sdk/tree/solc-0.6/packages/lib/contracts/upgradeability\\n * Extends BaseUpgradeabilityProxy with a constructor for initializing\\n * implementation and init data.\\n */\\ncontract UpgradeabilityProxy is BaseUpgradeabilityProxy {\\n  /**\\n   * @dev Contract constructor.\\n   * @param _logic Address of the initial implementation.\\n   * @param _data Data to send as msg.data to the implementation to initialize the proxied contract.\\n   * It should include the signature and the parameters of the function to be called, as described in\\n   * https://solidity.readthedocs.io/en/v0.4.24/abi-spec.html#function-selector-and-argument-encoding.\\n   * This parameter is optional, if no data is given the initialization call to proxied contract will be skipped.\\n   */\\n  constructor(address _logic, bytes memory _data) public payable {\\n    assert(IMPLEMENTATION_SLOT == bytes32(uint256(keccak256('eip1967.proxy.implementation')) - 1));\\n    _setImplementation(_logic);\\n    if (_data.length > 0) {\\n      (bool success, ) = _logic.delegatecall(_data);\\n      require(success);\\n    }\\n  }\\n}\\n\"\r\n    },\r\n    \"contracts/utils/InitializableAdminUpgradeabilityProxy.sol.sol\": {\r\n      \"content\": \"import '@aave/aave-stake/contracts/lib/InitializableAdminUpgradeabilityProxy.sol';\\n\"\r\n    },\r\n    \"contracts/mocks/StakeMock.sol\": {\r\n      \"content\": \"pragma solidity 0.7.5;\\n\\nimport {IStakedTokenWithConfig} from '../interfaces/IStakedTokenWithConfig.sol';\\nimport {IERC20} from '@aave/aave-stake/contracts/interfaces/IERC20.sol';\\n\\ncontract StakeMock is IStakedTokenWithConfig {\\n  address public immutable override STAKED_TOKEN;\\n\\n  constructor(address stakedToken) {\\n    STAKED_TOKEN = stakedToken;\\n  }\\n\\n  function stake(address to, uint256 amount) external override {\\n      IERC20(STAKED_TOKEN).transferFrom(msg.sender, address(this), amount);\\n  }\\n\\n  function redeem(address to, uint256 amount) external override {}\\n\\n  function cooldown() external override {}\\n\\n  function claimRewards(address to, uint256 amount) external override {}\\n}\\n\"\r\n    },\r\n    \"@aave/aave-stake/contracts/stake/StakedAaveV3.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: agpl-3.0\\npragma solidity 0.7.5;\\npragma experimental ABIEncoderV2;\\n\\nimport {IERC20} from '../interfaces/IERC20.sol';\\nimport {StakedTokenV3} from './StakedTokenV3.sol';\\n\\n/**\\n * @title StakedAaveV3\\n * @notice StakedTokenV3 with AAVE token as staked token\\n * @author Aave\\n **/\\ncontract StakedAaveV3 is StakedTokenV3 {\\n  string internal constant NAME = 'Staked Aave';\\n  string internal constant SYMBOL = 'stkAAVE';\\n  uint8 internal constant DECIMALS = 18;\\n\\n  constructor(\\n    IERC20 stakedToken,\\n    IERC20 rewardToken,\\n    uint256 cooldownSeconds,\\n    uint256 unstakeWindow,\\n    address rewardsVault,\\n    address emissionManager,\\n    uint128 distributionDuration,\\n    address governance\\n  )\\n    public\\n    StakedTokenV3(\\n      stakedToken,\\n      rewardToken,\\n      cooldownSeconds,\\n      unstakeWindow,\\n      rewardsVault,\\n      emissionManager,\\n      distributionDuration,\\n      NAME,\\n      SYMBOL,\\n      DECIMALS,\\n      governance\\n    )\\n  {}\\n}\\n\"\r\n    },\r\n    \"contracts/stake/StakedAaveV3.sol\": {\r\n      \"content\": \"import '@aave/aave-stake/contracts/stake/StakedAaveV3.sol';\\n\"\r\n    }\r\n  },\r\n  \"settings\": {\r\n    \"optimizer\": {\r\n      \"enabled\": true,\r\n      \"runs\": 200\r\n    },\r\n    \"evmVersion\": \"istanbul\",\r\n    \"outputSelection\": {\r\n      \"*\": {\r\n        \"*\": [\r\n          \"evm.bytecode\",\r\n          \"evm.deployedBytecode\",\r\n          \"devdoc\",\r\n          \"userdoc\",\r\n          \"metadata\",\r\n          \"abi\"\r\n        ]\r\n      }\r\n    },\r\n    \"metadata\": {\r\n      \"useLiteralContent\": true\r\n    },\r\n    \"libraries\": {}\r\n  }\r\n}}","ABI":"[{\"inputs\":[{\"internalType\":\"contract IStakedTokenWithConfig\",\"name\":\"stakeToken\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"emissionManager\",\"type\":\"address\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"asset\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"emission\",\"type\":\"uint256\"}],\"name\":\"AssetConfigUpdated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"asset\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"index\",\"type\":\"uint256\"}],\"name\":\"AssetIndexUpdated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"claimer\",\"type\":\"address\"}],\"name\":\"ClaimerSet\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"newDistributionEnd\",\"type\":\"uint256\"}],\"name\":\"DistributionEndUpdated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"RewardsAccrued\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"claimer\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"RewardsClaimed\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"asset\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"index\",\"type\":\"uint256\"}],\"name\":\"UserIndexUpdated\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"DISTRIBUTION_END\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"EMISSION_MANAGER\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"PRECISION\",\"outputs\":[{\"internalType\":\"uint8\",\"name\":\"\",\"type\":\"uint8\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"REVISION\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"REWARD_TOKEN\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"STAKE_TOKEN\",\"outputs\":[{\"internalType\":\"contract IStakedTokenWithConfig\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"assets\",\"outputs\":[{\"internalType\":\"uint104\",\"name\":\"emissionPerSecond\",\"type\":\"uint104\"},{\"internalType\":\"uint104\",\"name\":\"index\",\"type\":\"uint104\"},{\"internalType\":\"uint40\",\"name\":\"lastUpdateTimestamp\",\"type\":\"uint40\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address[]\",\"name\":\"assets\",\"type\":\"address[]\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"}],\"name\":\"claimRewards\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address[]\",\"name\":\"assets\",\"type\":\"address[]\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"}],\"name\":\"claimRewardsOnBehalf\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address[]\",\"name\":\"assets\",\"type\":\"address[]\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"claimRewardsToSelf\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address[]\",\"name\":\"assets\",\"type\":\"address[]\"},{\"internalType\":\"uint256[]\",\"name\":\"emissionsPerSecond\",\"type\":\"uint256[]\"}],\"name\":\"configureAssets\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"asset\",\"type\":\"address\"}],\"name\":\"getAssetData\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"}],\"name\":\"getClaimer\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getDistributionEnd\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address[]\",\"name\":\"assets\",\"type\":\"address[]\"},{\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"}],\"name\":\"getRewardsBalance\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"asset\",\"type\":\"address\"}],\"name\":\"getUserAssetData\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_user\",\"type\":\"address\"}],\"name\":\"getUserUnclaimedRewards\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"totalSupply\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"userBalance\",\"type\":\"uint256\"}],\"name\":\"handleAction\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"initialize\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"caller\",\"type\":\"address\"}],\"name\":\"setClaimer\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"distributionEnd\",\"type\":\"uint256\"}],\"name\":\"setDistributionEnd\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}]","ContractName":"StakedTokenIncentivesController","CompilerVersion":"v0.7.5+commit.eb77ed08","OptimizationUsed":"1","Runs":"200","ConstructorArguments":"0000000000000000000000004da27a545c0c5b758a6ba100e3a049001de870f5000000000000000000000000ee56e2b3d491590b5b31738cc34d5232f378a8d5","EVMVersion":"Default","Library":"","LicenseType":"","Proxy":"0","Implementation":"","SwarmSource":""}]}