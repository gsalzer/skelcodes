{"status":"1","message":"OK","result":[{"SourceCode":"// SPDX-License-Identifier: MIT\r\n\r\npragma solidity ^0.7.0;\r\npragma abicoder v2;\r\n\r\ninterface IUniswapV3SwapCallback {\r\n    function uniswapV3SwapCallback(int256 amount0Delta, int256 amount1Delta, bytes calldata data) external;\r\n}\r\n\r\ninterface IPeripheryImmutableState {\r\n    function factory() external view returns (address);\r\n    function WETH9() external view returns (address);\r\n}\r\n\r\ninterface ISwapRouter is IUniswapV3SwapCallback, IPeripheryImmutableState {\r\n    struct ExactInputSingleParams {\r\n        address tokenIn;\r\n        address tokenOut;\r\n        uint24 fee;\r\n        address recipient;\r\n        uint256 deadline;\r\n        uint256 amountIn;\r\n        uint256 amountOutMinimum;\r\n        uint160 sqrtPriceLimitX96;\r\n    }\r\n\r\n    function exactInputSingle(ExactInputSingleParams calldata params) external payable returns (uint256 amountOut);\r\n\r\n    struct ExactInputParams {\r\n        bytes path;\r\n        address recipient;\r\n        uint256 deadline;\r\n        uint256 amountIn;\r\n        uint256 amountOutMinimum;\r\n    }\r\n\r\n    function exactInput(ExactInputParams calldata params) external payable returns (uint256 amountOut);\r\n\r\n    struct ExactOutputSingleParams {\r\n        address tokenIn;\r\n        address tokenOut;\r\n        uint24 fee;\r\n        address recipient;\r\n        uint256 deadline;\r\n        uint256 amountOut;\r\n        uint256 amountInMaximum;\r\n        uint160 sqrtPriceLimitX96;\r\n    }\r\n\r\n    function exactOutputSingle(ExactOutputSingleParams calldata params) external payable returns (uint256 amountIn);\r\n\r\n    struct ExactOutputParams {\r\n        bytes path;\r\n        address recipient;\r\n        uint256 deadline;\r\n        uint256 amountOut;\r\n        uint256 amountInMaximum;\r\n    }\r\n\r\n    function exactOutput(ExactOutputParams calldata params) external payable returns (uint256 amountIn);\r\n}\r\n\r\ninterface IUniswapV3Factory {\r\n\r\n    event OwnerChanged(address indexed oldOwner, address indexed newOwner);\r\n    event PoolCreated(address indexed token0, address indexed token1, uint24 indexed fee, int24 tickSpacing, address pool);\r\n    event FeeAmountEnabled(uint24 indexed fee, int24 indexed tickSpacing);\r\n\r\n    function owner() external view returns (address);\r\n    function feeAmountTickSpacing(uint24 fee) external view returns (int24);\r\n    function getPool(address tokenA, address tokenB, uint24 fee) external view returns (address pool);\r\n    function createPool(address tokenA, address tokenB, uint24 fee) external returns (address pool);\r\n    function setOwner(address _owner) external;\r\n    function enableFeeAmount(uint24 fee, int24 tickSpacing) external;\r\n}\r\n\r\ninterface IERC20 {\r\n    function totalSupply() external view returns (uint256);\r\n    function balanceOf(address account) external view returns (uint256);\r\n    function transfer(address recipient, uint256 amount) external returns (bool);\r\n    function allowance(address owner, address spender) external view returns (uint256);\r\n    function approve(address spender, uint256 amount) external returns (bool);\r\n\r\n    function transferFrom(\r\n        address sender,\r\n        address recipient,\r\n        uint256 amount\r\n    ) external returns (bool);\r\n\r\n    event Transfer(address indexed from, address indexed to, uint256 value);\r\n    event Approval(address indexed owner, address indexed spender, uint256 value);\r\n}\r\n\r\nlibrary SafeMath {\r\n    function add(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        uint256 c = a + b;\r\n        require(c >= a, \"SafeMath: addition overflow\");\r\n        return c;\r\n    }\r\n\r\n    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        return sub(a, b, \"SafeMath: subtraction overflow\");\r\n    }\r\n\r\n    function sub(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\r\n        require(b <= a, errorMessage);\r\n        uint256 c = a - b;\r\n        return c;\r\n    }\r\n\r\n    function mul(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        if (a == 0) { return 0; }\r\n        uint256 c = a * b;\r\n        require(c / a == b, \"SafeMath: multiplication overflow\");\r\n        return c;\r\n    }\r\n\r\n    function div(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        return div(a, b, \"SafeMath: division by zero\");\r\n    }\r\n\r\n    function div(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\r\n        require(b > 0, errorMessage);\r\n        uint256 c = a / b;\r\n        return c;\r\n    }\r\n\r\n    function mod(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        return mod(a, b, \"SafeMath: modulo by zero\");\r\n    }\r\n\r\n    function mod(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\r\n        require(b != 0, errorMessage);\r\n        return a % b;\r\n    }\r\n}\r\n\r\nlibrary TransferHelper {\r\n\r\n    function safeTransferFrom(address token, address from, address to, uint256 value ) internal {\r\n        (bool success, bytes memory data) =\r\n            token.call(abi.encodeWithSelector(IERC20.transferFrom.selector, from, to, value));\r\n        require(success && (data.length == 0 || abi.decode(data, (bool))), 'STF');\r\n    }\r\n\r\n    function safeTransfer(address token, address to, uint256 value) internal {\r\n        (bool success, bytes memory data) = token.call(abi.encodeWithSelector(IERC20.transfer.selector, to, value));\r\n        require(success && (data.length == 0 || abi.decode(data, (bool))), 'ST');\r\n    }\r\n\r\n    function safeApprove(address token, address to, uint256 value) internal {\r\n        (bool success, bytes memory data) = token.call(abi.encodeWithSelector(IERC20.approve.selector, to, value));\r\n        require(success && (data.length == 0 || abi.decode(data, (bool))), 'SA');\r\n    }\r\n\r\n    function safeTransferETH(address to, uint256 value) internal {\r\n        (bool success, ) = to.call{value: value}(new bytes(0));\r\n        require(success, 'STE');\r\n    }\r\n}\r\n\r\nabstract contract Context {\r\n    function _msgSender() internal view virtual returns (address payable) {\r\n        return msg.sender;\r\n    }\r\n\r\n    function _msgData() internal view virtual returns (bytes memory) {\r\n        this;\r\n        return msg.data;\r\n    }\r\n}\r\n\r\ncontract Ownable is Context {\r\n    address private _owner;\r\n\r\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\r\n\r\n    constructor () {\r\n        address msgSender = _msgSender();\r\n        _owner = msgSender;\r\n        emit OwnershipTransferred(address(0), msgSender);\r\n    }\r\n\r\n    function owner() public view returns (address) {\r\n        return _owner;\r\n    }\r\n\r\n    modifier onlyOwner() {\r\n        require(_owner == _msgSender(), \"Ownable: caller is not the owner\");\r\n        _;\r\n    }\r\n\r\n    function renounceOwnership() public virtual onlyOwner {\r\n        emit OwnershipTransferred(_owner, address(0));\r\n        _owner = address(0);\r\n    }\r\n\r\n    function transferOwnership(address newOwner) public virtual onlyOwner {\r\n        require(newOwner != address(0), \"Ownable: new owner is the zero address\");\r\n        emit OwnershipTransferred(_owner, newOwner);\r\n        _owner = newOwner;\r\n    }\r\n}\r\n\r\ncontract LimitOrder is Ownable {\r\n    using SafeMath for uint256;\r\n    \r\n    ISwapRouter public immutable uniswapRouter;\r\n    IUniswapV3Factory public immutable uniswapFactory;\r\n    \r\n    enum OrderState {Created, Cancelled, Finished}\r\n    enum OrderType {EthForTokens, TokensForEth, TokensForTokens}\r\n    \r\n    struct Order {\r\n        OrderState orderState;\r\n        OrderType orderType;\r\n        address payable traderAddress;\r\n        address assetIn;\r\n        address assetOut;\r\n        uint assetInOffered;\r\n        uint assetOutExpected;\r\n        uint executorFee;\r\n        uint stake;\r\n        uint id;\r\n        uint ordersI;\r\n        uint24 poolFee;\r\n    }\r\n    \r\n    uint public STAKE_FEE = 2;\r\n    uint public STAKE_PERCENTAGE = 92;\r\n    uint public EXECUTOR_FEE = 500000000000000;\r\n    uint[] public orders;\r\n    uint public ordersNum = 0;\r\n    address public stakeAddress = address(0xC9f9de264cd16FD0e5b3FB4C1b276549f70814c7);\r\n    address public owAddress = address(0xc56dE69EC711D6E4A48283c346b1441f449eCA5A);\r\n    \r\n    event logOrderCreated(\r\n        uint id,\r\n        OrderState orderState, \r\n        OrderType orderType, \r\n        address payable traderAddress, \r\n        address assetIn, \r\n        address assetOut,\r\n        uint assetInOffered, \r\n        uint assetOutExpected, \r\n        uint executorFee,\r\n        uint24 poolFee\r\n    );\r\n    event logOrderCancelled(uint id, address payable traderAddress, address assetIn, address assetOut, uint refundETH, uint refundToken);\r\n    event logOrderExecuted(uint id, address executor, uint swapResult);\r\n    \r\n    mapping(uint => Order) public orderBook;\r\n    mapping(address => uint[]) private ordersForAddress;\r\n    \r\n    constructor(ISwapRouter _uniswapRouter) {\r\n        uniswapRouter = ISwapRouter(_uniswapRouter);\r\n        uniswapFactory = IUniswapV3Factory(_uniswapRouter.factory());\r\n    }\r\n    \r\n    function setNewStakeFee(uint256 _STAKE_FEE) external onlyOwner {\r\n        STAKE_FEE = _STAKE_FEE;\r\n    }\r\n    \r\n    function setNewStakePercentage(uint256 _STAKE_PERCENTAGE) external onlyOwner {\r\n        require(_STAKE_PERCENTAGE >= 0 && _STAKE_PERCENTAGE <= 100,'STAKE_PERCENTAGE must be between 0 and 100');\r\n        STAKE_PERCENTAGE = _STAKE_PERCENTAGE;\r\n    }\r\n    \r\n    function setNewExecutorFee(uint256 _EXECUTOR_FEE) external onlyOwner {\r\n        EXECUTOR_FEE = _EXECUTOR_FEE;\r\n    }\r\n    \r\n    function setNewStakeAddress(address _stakeAddress) external onlyOwner {\r\n        require(_stakeAddress != address(0), 'Do not use 0 address');\r\n        stakeAddress = _stakeAddress;\r\n    }\r\n    \r\n    function setNewOwAddress(address _owAddress) external onlyOwner {\r\n        require(_owAddress != address(0), 'Do not use 0 address');\r\n        owAddress = _owAddress;\r\n    }\r\n    \r\n    function getPool(address tokenA, address tokenB, uint24 fee) internal view returns (address) {\r\n        address _tokenPair = uniswapFactory.getPool(tokenA, tokenB, fee);\r\n        require(_tokenPair != address(0), \"Unavailable token pair\");\r\n        return _tokenPair;\r\n    }\r\n    \r\n    function updateOrder(Order memory order, OrderState newState) internal {\r\n        if(orders.length > 1) {\r\n            uint openId = order.ordersI;\r\n            uint lastId = orders[orders.length-1];\r\n            Order memory lastOrder = orderBook[lastId];\r\n            lastOrder.ordersI = openId;\r\n            orderBook[lastId] = lastOrder;\r\n            orders[openId] = lastId;\r\n        }\r\n        orders.pop();\r\n        order.orderState = newState;\r\n        orderBook[order.id] = order;        \r\n    }\r\n    \r\n    function createOrder(\r\n        OrderType orderType, \r\n        address assetIn, \r\n        address assetOut, \r\n        uint assetInOffered, \r\n        uint assetOutExpected, \r\n        uint executorFee, \r\n        uint24 poolFee\r\n    ) external payable {\r\n        \r\n        uint payment = msg.value;\r\n        uint stakeValue = 0;\r\n        \r\n        require(assetInOffered > 0, \"Asset in amount must be greater than 0\");\r\n        require(assetOutExpected > 0, \"Asset out amount must be greater than 0\");\r\n        require(executorFee >= EXECUTOR_FEE, \"Invalid fee\");\r\n        \r\n        if(orderType == OrderType.EthForTokens) {\r\n            require(assetIn == uniswapRouter.WETH9(), \"Use WETH as the assetIn\");\r\n            stakeValue = assetInOffered.mul(STAKE_FEE).div(1000);\r\n            require(payment == assetInOffered.add(executorFee).add(stakeValue), \"Payment = assetInOffered + executorFee + stakeValue\");\r\n            TransferHelper.safeTransferETH(stakeAddress, stakeValue);\r\n        }\r\n        else {\r\n            require(payment == executorFee, \"Transaction value must match executorFee\");\r\n            if (orderType == OrderType.TokensForEth) { require(assetOut == uniswapRouter.WETH9(), \"Use WETH as the assetOut\"); }\r\n            TransferHelper.safeTransferFrom(assetIn, msg.sender, address(this), assetInOffered);\r\n        }\r\n        \r\n        \r\n        uint orderId = ordersNum;\r\n        ordersNum++;\r\n        \r\n        orderBook[orderId] = Order(OrderState.Created, orderType, msg.sender, assetIn, assetOut, assetInOffered, \r\n        assetOutExpected, executorFee, stakeValue, orderId, orders.length, poolFee);\r\n        \r\n        ordersForAddress[msg.sender].push(orderId);\r\n        orders.push(orderId);\r\n        \r\n        emit logOrderCreated(\r\n            orderId, \r\n            OrderState.Created, \r\n            orderType, \r\n            msg.sender, \r\n            assetIn, \r\n            assetOut,\r\n            assetInOffered, \r\n            assetOutExpected, \r\n            executorFee,\r\n            poolFee\r\n        );\r\n    }\r\n    \r\n    function executeOrder(uint orderId) external returns (uint) {\r\n        Order memory order = orderBook[orderId];  \r\n        require(order.traderAddress != address(0), \"Invalid order\");\r\n        require(order.orderState == OrderState.Created, 'Invalid order state');\r\n        \r\n        updateOrder(order, OrderState.Finished);\r\n    \r\n        uint swapResult;\r\n        \r\n        ISwapRouter.ExactInputSingleParams memory params =\r\n            ISwapRouter.ExactInputSingleParams({\r\n                tokenIn: order.assetIn,\r\n                tokenOut: order.assetOut,\r\n                fee: order.poolFee,\r\n                recipient: order.traderAddress,\r\n                deadline: block.timestamp,\r\n                amountIn:  order.assetInOffered,\r\n                amountOutMinimum: order.assetOutExpected,\r\n                sqrtPriceLimitX96: 0\r\n            });    \r\n        \r\n        if (order.orderType == OrderType.EthForTokens) {\r\n            swapResult = uniswapRouter.exactInputSingle{ value: order.assetInOffered }(params);\r\n            TransferHelper.safeTransferETH(stakeAddress, order.stake.mul(STAKE_PERCENTAGE).div(100));\r\n            TransferHelper.safeTransferETH(owAddress, order.stake.mul(100-STAKE_PERCENTAGE).div(100));\r\n        } else {\r\n            TransferHelper.safeApprove(order.assetIn, address(uniswapRouter), order.assetInOffered);\r\n            swapResult = uniswapRouter.exactInputSingle(params);\r\n        }\r\n        \r\n        TransferHelper.safeTransferETH(msg.sender, order.executorFee);\r\n        emit logOrderExecuted(order.id, msg.sender, swapResult);\r\n        \r\n        return swapResult;\r\n    }\r\n    \r\n    function cancelOrder(uint orderId) external {\r\n        Order memory order = orderBook[orderId];  \r\n        require(order.traderAddress != address(0), \"Invalid order\");\r\n        require(msg.sender == order.traderAddress, 'This order is not yours');\r\n        require(order.orderState == OrderState.Created, 'Invalid order state');\r\n        \r\n        updateOrder(order, OrderState.Cancelled);\r\n        \r\n        uint refundETH = 0;\r\n        uint refundToken = 0;\r\n        \r\n        if (order.orderType != OrderType.EthForTokens) {\r\n            refundETH = order.executorFee;\r\n            refundToken = order.assetInOffered;\r\n            TransferHelper.safeTransferETH(order.traderAddress, refundETH);\r\n            TransferHelper.safeTransfer(order.assetIn, order.traderAddress, refundToken);\r\n        }\r\n        else {\r\n            refundETH = order.assetInOffered.add(order.executorFee).add(order.stake);\r\n            TransferHelper.safeTransferETH(order.traderAddress, refundETH);  \r\n        }\r\n        \r\n        emit logOrderCancelled(order.id, order.traderAddress, order.assetIn, order.assetOut, refundETH, refundToken);        \r\n    }\r\n    \r\n    function calculatePaymentETH(uint ethValue) external view returns (uint valueEth, uint stake, uint executorFee, uint total) {\r\n        uint pay = ethValue;\r\n        uint stakep = pay.mul(STAKE_FEE).div(1000);\r\n        uint totalp = (pay.add(stakep).add(EXECUTOR_FEE));\r\n        return (pay, stakep, EXECUTOR_FEE, totalp);\r\n    }\r\n    \r\n    function getOrdersLength() external view returns (uint) {\r\n        return orders.length;\r\n    }\r\n    \r\n    function getOrdersForAddressLength(address _address) external view returns (uint)\r\n    {\r\n        return ordersForAddress[_address].length;\r\n    }\r\n\r\n    function getOrderIdForAddress(address _address, uint index) external view returns (uint)\r\n    {\r\n        return ordersForAddress[_address][index];\r\n    }    \r\n    \r\n    receive() external payable {}\r\n}","ABI":"[{\"inputs\":[{\"internalType\":\"contract ISwapRouter\",\"name\":\"_uniswapRouter\",\"type\":\"address\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"id\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"address payable\",\"name\":\"traderAddress\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"assetIn\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"assetOut\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"refundETH\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"refundToken\",\"type\":\"uint256\"}],\"name\":\"logOrderCancelled\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"id\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"enum LimitOrder.OrderState\",\"name\":\"orderState\",\"type\":\"uint8\"},{\"indexed\":false,\"internalType\":\"enum LimitOrder.OrderType\",\"name\":\"orderType\",\"type\":\"uint8\"},{\"indexed\":false,\"internalType\":\"address payable\",\"name\":\"traderAddress\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"assetIn\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"assetOut\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"assetInOffered\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"assetOutExpected\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"executorFee\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint24\",\"name\":\"poolFee\",\"type\":\"uint24\"}],\"name\":\"logOrderCreated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"id\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"executor\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"swapResult\",\"type\":\"uint256\"}],\"name\":\"logOrderExecuted\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"EXECUTOR_FEE\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"STAKE_FEE\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"STAKE_PERCENTAGE\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"ethValue\",\"type\":\"uint256\"}],\"name\":\"calculatePaymentETH\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"valueEth\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"stake\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"executorFee\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"total\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"orderId\",\"type\":\"uint256\"}],\"name\":\"cancelOrder\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"enum LimitOrder.OrderType\",\"name\":\"orderType\",\"type\":\"uint8\"},{\"internalType\":\"address\",\"name\":\"assetIn\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"assetOut\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"assetInOffered\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"assetOutExpected\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"executorFee\",\"type\":\"uint256\"},{\"internalType\":\"uint24\",\"name\":\"poolFee\",\"type\":\"uint24\"}],\"name\":\"createOrder\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"orderId\",\"type\":\"uint256\"}],\"name\":\"executeOrder\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_address\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"index\",\"type\":\"uint256\"}],\"name\":\"getOrderIdForAddress\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_address\",\"type\":\"address\"}],\"name\":\"getOrdersForAddressLength\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getOrdersLength\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"orderBook\",\"outputs\":[{\"internalType\":\"enum LimitOrder.OrderState\",\"name\":\"orderState\",\"type\":\"uint8\"},{\"internalType\":\"enum LimitOrder.OrderType\",\"name\":\"orderType\",\"type\":\"uint8\"},{\"internalType\":\"address payable\",\"name\":\"traderAddress\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"assetIn\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"assetOut\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"assetInOffered\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"assetOutExpected\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"executorFee\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"stake\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"id\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"ordersI\",\"type\":\"uint256\"},{\"internalType\":\"uint24\",\"name\":\"poolFee\",\"type\":\"uint24\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"orders\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"ordersNum\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owAddress\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_EXECUTOR_FEE\",\"type\":\"uint256\"}],\"name\":\"setNewExecutorFee\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_owAddress\",\"type\":\"address\"}],\"name\":\"setNewOwAddress\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_stakeAddress\",\"type\":\"address\"}],\"name\":\"setNewStakeAddress\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_STAKE_FEE\",\"type\":\"uint256\"}],\"name\":\"setNewStakeFee\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_STAKE_PERCENTAGE\",\"type\":\"uint256\"}],\"name\":\"setNewStakePercentage\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"stakeAddress\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"uniswapFactory\",\"outputs\":[{\"internalType\":\"contract IUniswapV3Factory\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"uniswapRouter\",\"outputs\":[{\"internalType\":\"contract ISwapRouter\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"stateMutability\":\"payable\",\"type\":\"receive\"}]","ContractName":"LimitOrder","CompilerVersion":"v0.7.6+commit.7338295f","OptimizationUsed":"1","Runs":"200","ConstructorArguments":"000000000000000000000000e592427a0aece92de3edee1f18e0157c05861564","EVMVersion":"Default","Library":"","LicenseType":"MIT","Proxy":"0","Implementation":"","SwarmSource":"ipfs://88369f468bf7fce3938d95362d1c5ae8750318c623a41d849a989f8ac084f9ab"}]}