{"status":"1","message":"OK","result":[{"SourceCode":"{{\r\n  \"language\": \"Solidity\",\r\n  \"sources\": {\r\n    \"brink-core/Batched/DeployAndCall.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: GPL-3.0-or-later\\npragma solidity =0.8.10;\\npragma abicoder v1;\\n\\n/**\\n *    ,,                           ,,                                \\n *   *MM                           db                      `7MM      \\n *    MM                                                     MM      \\n *    MM,dMMb.      `7Mb,od8     `7MM      `7MMpMMMb.        MM  ,MP'\\n *    MM    `Mb       MM' \\\"'       MM        MM    MM        MM ;Y   \\n *    MM     M8       MM           MM        MM    MM        MM;Mm   \\n *    MM.   ,M9       MM           MM        MM    MM        MM `Mb. \\n *    P^YbmdP'      .JMML.       .JMML.    .JMML  JMML.    .JMML. YA.\\n *\\n *    DeployAndCall.sol :: 0x452C31d60883F0CB51744Ab9fd01685d7443CA6f\\n *    etherscan.io verified 2021-12-18\\n */ \\n\\nimport \\\"../Account/AccountFactory.sol\\\";\\n\\n/// @title DeployAndCall\\n/// @notice This contract contains a function to batch account deploy and call into one transaction\\ncontract DeployAndCall {\\n  /// @dev The AccountFactory to use for account deployments\\n  AccountFactory constant ACCOUNT_FACTORY = AccountFactory(0xe925f84cA9Dd5b3844fC424861D7bDf9485761B6);\\n\\n  /// @dev Deploys an account for the given owner and executes callData on the account\\n  /// @param owner Address of the account owner\\n  /// @param callData The call to execute on the account after deployment\\n  function deployAndCall(address owner, bytes memory callData) external payable {\\n    address account = ACCOUNT_FACTORY.deployAccount(owner);\\n\\n    if (callData.length > 0) {\\n      assembly {\\n        let result := call(gas(), account, callvalue(), add(callData, 0x20), mload(callData), 0, 0)\\n        returndatacopy(0, 0, returndatasize())\\n        switch result\\n        case 0 {\\n          revert(0, returndatasize())\\n        }\\n        default {\\n          return(0, returndatasize())\\n        }\\n      }\\n    }\\n  }\\n}\\n\"\r\n    },\r\n    \"brink-core/Account/AccountFactory.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: GPL-3.0-or-later\\npragma solidity =0.8.10;\\npragma abicoder v1;\\n\\n/**\\n *    ,,                           ,,                                \\n *   *MM                           db                      `7MM      \\n *    MM                                                     MM      \\n *    MM,dMMb.      `7Mb,od8     `7MM      `7MMpMMMb.        MM  ,MP'\\n *    MM    `Mb       MM' \\\"'       MM        MM    MM        MM ;Y   \\n *    MM     M8       MM           MM        MM    MM        MM;Mm   \\n *    MM.   ,M9       MM           MM        MM    MM        MM `Mb. \\n *    P^YbmdP'      .JMML.       .JMML.    .JMML  JMML.    .JMML. YA.\\n *\\n *    AccountFactory.sol :: 0xe925f84cA9Dd5b3844fC424861D7bDf9485761B6\\n *    etherscan.io verified 2021-12-18\\n */ \\n\\n/// @title Brink account factory\\n/// @notice This is a factory contract used for deployment of Brink proxy accounts\\ncontract AccountFactory {\\n  error DeployFailed();\\n\\n  /// @dev Deploys a Proxy account for the given owner\\n  /// @param owner Owner of the Proxy account\\n  /// @return account Address of the deployed Proxy account\\n  /// @notice This deploys a \\\"minimal proxy\\\" contract with the proxy owner address added to the deployed bytecode. The\\n  /// owner address can be read within a delegatecall by using `extcodecopy`. Minimal proxy bytecode is from\\n  /// https://medium.com/coinmonks/the-more-minimal-proxy-5756ae08ee48 and https://eips.ethereum.org/EIPS/eip-1167. It\\n  /// utilizes the \\\"vanity address optimization\\\" from EIP 1167\\n  function deployAccount(address owner) external returns (address account) {\\n    bytes memory initCode = abi.encodePacked(\\n      //  [* constructor **] [** minimal proxy ***] [******* implementation *******] [**** minimal proxy *****]\\n      hex'603c3d8160093d39f3_3d3d3d3d363d3d37363d6f_afcbce78c080f96032a5c1cb1b832d7b_5af43d3d93803e602657fd5bf3',\\n      owner\\n    );\\n    assembly {\\n      account := create2(0, add(initCode, 0x20), mload(initCode), 0)\\n    }\\n    if(account == address(0)) {\\n      revert DeployFailed();\\n    }\\n  }\\n}\\n\"\r\n    }\r\n  },\r\n  \"settings\": {\r\n    \"optimizer\": {\r\n      \"enabled\": true,\r\n      \"runs\": 800\r\n    },\r\n    \"metadata\": {\r\n      \"bytecodeHash\": \"none\"\r\n    },\r\n    \"outputSelection\": {\r\n      \"*\": {\r\n        \"*\": [\r\n          \"evm.bytecode\",\r\n          \"evm.deployedBytecode\",\r\n          \"devdoc\",\r\n          \"userdoc\",\r\n          \"metadata\",\r\n          \"abi\"\r\n        ]\r\n      }\r\n    },\r\n    \"libraries\": {}\r\n  }\r\n}}","ABI":"[{\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"internalType\":\"bytes\",\"name\":\"callData\",\"type\":\"bytes\"}],\"name\":\"deployAndCall\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"}]","ContractName":"DeployAndCall","CompilerVersion":"v0.8.10+commit.fc410830","OptimizationUsed":"1","Runs":"800","ConstructorArguments":"","EVMVersion":"Default","Library":"","LicenseType":"","Proxy":"0","Implementation":"","SwarmSource":""}]}