{"status":"1","message":"OK","result":[{"SourceCode":"{{\r\n  \"language\": \"Solidity\",\r\n  \"sources\": {\r\n    \"contracts/BurningStore.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\r\\n\\r\\npragma solidity ^0.6.12;\\r\\npragma experimental ABIEncoderV2;\\r\\n\\r\\nimport \\\"@openzeppelin/contracts/access/Ownable.sol\\\";\\r\\nimport \\\"@openzeppelin/contracts/math/SafeMath.sol\\\";\\r\\nimport \\\"@openzeppelin/contracts/math/Math.sol\\\";\\r\\n\\r\\nimport \\\"./IERC20.sol\\\";\\r\\nimport \\\"./IERC721Collection.sol\\\";\\r\\n\\r\\ncontract BurningStore is Ownable {\\r\\n    using SafeMath for uint256;\\r\\n\\r\\n    struct CollectionData {\\r\\n        mapping (uint256 => uint256) pricePerOptionId;\\r\\n        mapping (uint256 => uint256) availableQtyPerOptionId;\\r\\n        address saleBeneficiary;\\r\\n        uint256 collectionFee;\\r\\n    }\\r\\n\\r\\n    IERC20 public acceptedToken;\\r\\n    address storeFeeAddresses;\\r\\n\\r\\n    uint256 constant FEE_PRECISION = 10000;\\r\\n\\r\\n    mapping (address => CollectionData) collectionsData;\\r\\n\\r\\n    event Bought(address indexed _collectionAddress, uint256[] _optionIds, address _beneficiary, uint256 _price);\\r\\n    event SetCollectionData(address indexed _collectionAddress, uint256[] _optionIds, uint256[] _availableQtys, uint256[] _prices);\\r\\n\\r\\n    /**\\r\\n    * @dev Constructor of the contract.\\r\\n    * @param _acceptedToken - Address of the ERC20 token accepted\\r\\n    * @param _collectionAddresses - collection addresses\\r\\n    * @param _collectionOptionIds - collection option ids\\r\\n    * @param _collectionAvailableQtys - collection available qtys for sale\\r\\n    * @param _collectionPrices - collection prices\\r\\n    */\\r\\n    constructor(\\r\\n        IERC20 _acceptedToken,\\r\\n        address _storeFeeAddresses,\\r\\n        address[] memory _collectionAddresses,\\r\\n        address[] memory _saleBeneficiaryAddresses,\\r\\n        uint256[] memory _collectionFee,\\r\\n        uint256[][] memory _collectionOptionIds,\\r\\n        uint256[][] memory _collectionAvailableQtys,\\r\\n        uint256[][] memory _collectionPrices\\r\\n      )\\r\\n      public {\\r\\n        acceptedToken = _acceptedToken;\\r\\n        storeFeeAddresses = _storeFeeAddresses;\\r\\n\\r\\n        for (uint256 i = 0; i < _collectionAddresses.length; i++) {\\r\\n            _setCollectionData(_collectionAddresses[i], _saleBeneficiaryAddresses[i], _collectionFee[i], _collectionOptionIds[i], _collectionAvailableQtys[i], _collectionPrices[i]);\\r\\n        }\\r\\n    }\\r\\n\\r\\n    /**\\r\\n    * @dev Donate in exchange for NFTs.\\r\\n    * @notice that there is a maximum amount of NFTs that can be issued per call.\\r\\n    * If the donation greater than `price * maxNFTsPerCall`, all the donation will be used and\\r\\n    * a maximum of `maxNFTsPerCall` will be issued.\\r\\n    * @param _collectionAddress - collectionn address\\r\\n    * @param _optionIds - collection option id\\r\\n    * @param _beneficiary - beneficiary address\\r\\n    */\\r\\n    function buy(address _collectionAddress, uint256[] calldata _optionIds, address _beneficiary) external {\\r\\n        CollectionData storage collection = collectionsData[_collectionAddress];\\r\\n\\r\\n        uint256 amount = _optionIds.length;\\r\\n        uint256 finalPrice = 0;\\r\\n        address[] memory beneficiaries = new address[](amount);\\r\\n        bytes32[] memory items = new bytes32[](amount);\\r\\n\\r\\n        for (uint256 i = 0; i < amount; i++) {\\r\\n            uint256 optionId = _optionIds[i];\\r\\n            require(collection.availableQtyPerOptionId[optionId] > 0, \\\"Sold out item\\\");\\r\\n\\r\\n            // Add price\\r\\n            uint256 itemPrice = collection.pricePerOptionId[optionId];\\r\\n            finalPrice = finalPrice.add(itemPrice);\\r\\n\\r\\n            // Add beneneficiary\\r\\n            beneficiaries[i] = _beneficiary;\\r\\n\\r\\n            // Add item\\r\\n            string memory item = itemByOptionId(_collectionAddress, optionId);\\r\\n            bytes32 itemAsBytes32;\\r\\n            // solium-disable-next-line security/no-inline-assembly\\r\\n            assembly {\\r\\n                itemAsBytes32 := mload(add(item, 32))\\r\\n            }\\r\\n            items[i] = itemAsBytes32;\\r\\n            collection.availableQtyPerOptionId[optionId] = collection.availableQtyPerOptionId[optionId].sub(1);\\r\\n        }\\r\\n\\r\\n        // Check if the sender has at least `price` and the contract has allowance to use on its behalf\\r\\n        _requireBalance(msg.sender, finalPrice);\\r\\n\\r\\n        uint256 fee = finalPrice / FEE_PRECISION * collection.collectionFee;\\r\\n\\r\\n        // Debit `price` from sender\\r\\n        require(\\r\\n            acceptedToken.transferFrom(msg.sender, collection.saleBeneficiary, finalPrice-fee),\\r\\n            \\\"Transfering finalPrice to sale beneficiary failed\\\"\\r\\n        );\\r\\n        require(\\r\\n            acceptedToken.transferFrom(msg.sender, storeFeeAddresses, fee),\\r\\n            \\\"Transfering fee failed\\\"\\r\\n        );\\r\\n\\r\\n        // Burn it\\r\\n//        acceptedToken.burn(finalPrice);\\r\\n\\r\\n        // Mint NFT\\r\\n        IERC721Collection(_collectionAddress).issueTokens(beneficiaries, items);\\r\\n\\r\\n        emit Bought(_collectionAddress, _optionIds, _beneficiary, finalPrice);\\r\\n    }\\r\\n\\r\\n    /**\\r\\n    * @dev Returns whether the wearable can be minted.\\r\\n    * @param _collectionAddress - collectionn address\\r\\n    * @param _optionId - item option id\\r\\n    * @return whether a wearable can be minted\\r\\n    */\\r\\n    function canMint(address _collectionAddress, uint256 _optionId, uint256 _amount) public view returns (bool) {\\r\\n        CollectionData storage collection = collectionsData[_collectionAddress];\\r\\n\\r\\n        return collection.availableQtyPerOptionId[_optionId] >= _amount;\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Returns a wearable's available supply .\\r\\n     * Throws if the option ID does not exist. May return 0.\\r\\n     * @param _collectionAddress - collectionn address\\r\\n     * @param _optionId - item option id\\r\\n     * @return wearable's available supply\\r\\n     */\\r\\n    function balanceOf(address _collectionAddress, uint256 _optionId) public view returns (uint256) {\\r\\n        CollectionData storage collection = collectionsData[_collectionAddress];\\r\\n\\r\\n        return collection.availableQtyPerOptionId[_optionId];\\r\\n    }\\r\\n\\r\\n    /**\\r\\n    * @dev Get item id by option id\\r\\n    * @param _collectionAddress - collectionn address\\r\\n    * @param _optionId - collection option id\\r\\n    * @return string of the item id\\r\\n    */\\r\\n    function itemByOptionId(address _collectionAddress, uint256 _optionId) public view returns (string memory) {\\r\\n       /* solium-disable-next-line */\\r\\n        (bool success, bytes memory data) = address(_collectionAddress).staticcall(\\r\\n            abi.encodeWithSelector(\\r\\n                IERC721Collection(_collectionAddress).wearables.selector,\\r\\n                _optionId\\r\\n            )\\r\\n        );\\r\\n\\r\\n        require(success, \\\"Invalid wearable\\\");\\r\\n\\r\\n        return abi.decode(data, (string));\\r\\n    }\\r\\n\\r\\n    /**\\r\\n    * @dev Get collection data by option id\\r\\n    * @param _collectionAddress - collectionn address\\r\\n    * @param _optionId - collection option id\\r\\n    * @return availableQty - collection option id available qty\\r\\n    * @return price - collection option id price\\r\\n    */\\r\\n    function collectionData(address _collectionAddress, uint256 _optionId) external view returns (\\r\\n        uint256 availableQty, uint256 price\\r\\n    ) {\\r\\n        availableQty = collectionsData[_collectionAddress].availableQtyPerOptionId[_optionId];\\r\\n        price = collectionsData[_collectionAddress].pricePerOptionId[_optionId];\\r\\n    }\\r\\n\\r\\n    /**\\r\\n    * @dev Sets the beneficiary address where the sales amount\\r\\n    *  will be transferred on each sale for a collection\\r\\n    * @param _collectionAddress - collectionn address\\r\\n    * @param _collectionOptionIds - collection option ids\\r\\n    * @param _collectionAvailableQtys - collection available qtys for sale\\r\\n    * @param _collectionPrices - collectionn prices\\r\\n    */\\r\\n    function setCollectionData(\\r\\n        address _collectionAddress,\\r\\n        address _saleBeneficiaryAddress,\\r\\n        uint256 _collectionFee,\\r\\n        uint256[] calldata _collectionOptionIds,\\r\\n        uint256[] calldata _collectionAvailableQtys,\\r\\n        uint256[] calldata _collectionPrices\\r\\n    ) external onlyOwner {\\r\\n        _setCollectionData(_collectionAddress, _saleBeneficiaryAddress, _collectionFee, _collectionOptionIds, _collectionAvailableQtys, _collectionPrices);\\r\\n    }\\r\\n\\r\\n    /**\\r\\n    * @dev Sets the beneficiary address where the sales amount\\r\\n    *  will be transferred on each sale for a collection\\r\\n    * @param _collectionAddress - collectionn address\\r\\n    * @param _collectionOptionIds - collection option ids\\r\\n    * @param _collectionAvailableQtys - collection available qtys for sale\\r\\n    * @param _collectionPrices - collectionn prices\\r\\n    */\\r\\n    function _setCollectionData(\\r\\n        address _collectionAddress,\\r\\n        address _saleBeneficiaryAddress,\\r\\n        uint256 _collectionFee,\\r\\n        uint256[] memory _collectionOptionIds,\\r\\n        uint256[] memory _collectionAvailableQtys,\\r\\n        uint256[] memory _collectionPrices\\r\\n    ) internal {\\r\\n        // emit ChangedCollectionBeneficiary(_collectionAddress, collectionBeneficiaries[_collectionAddress], _beneficiary);\\r\\n        CollectionData storage collection = collectionsData[_collectionAddress];\\r\\n\\r\\n        collection.saleBeneficiary = _saleBeneficiaryAddress;\\r\\n        collection.collectionFee = _collectionFee;\\r\\n\\r\\n        for (uint256 i = 0; i < _collectionOptionIds.length; i++) {\\r\\n            collection.availableQtyPerOptionId[_collectionOptionIds[i]] = _collectionAvailableQtys[i];\\r\\n            collection.pricePerOptionId[_collectionOptionIds[i]] = _collectionPrices[i];\\r\\n        }\\r\\n\\r\\n        emit SetCollectionData(_collectionAddress, _collectionOptionIds, _collectionAvailableQtys, _collectionPrices);\\r\\n    }\\r\\n\\r\\n    /**\\r\\n    * @dev Validate if a user has balance and the contract has enough allowance\\r\\n    * to use user's accepted token on his belhalf\\r\\n    * @param _user - address of the user\\r\\n    */\\r\\n    function _requireBalance(address _user, uint256 _price) internal view {\\r\\n        require(\\r\\n            acceptedToken.balanceOf(_user) >= _price,\\r\\n            \\\"Insufficient funds\\\"\\r\\n        );\\r\\n        require(\\r\\n            acceptedToken.allowance(_user, address(this)) >= _price,\\r\\n            \\\"The contract is not authorized to use the accepted token on sender behalf\\\"\\r\\n        );\\r\\n    }\\r\\n}\\r\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/access/Ownable.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity >=0.6.0 <0.8.0;\\n\\nimport \\\"../utils/Context.sol\\\";\\n/**\\n * @dev Contract module which provides a basic access control mechanism, where\\n * there is an account (an owner) that can be granted exclusive access to\\n * specific functions.\\n *\\n * By default, the owner account will be the one that deploys the contract. This\\n * can later be changed with {transferOwnership}.\\n *\\n * This module is used through inheritance. It will make available the modifier\\n * `onlyOwner`, which can be applied to your functions to restrict their use to\\n * the owner.\\n */\\nabstract contract Ownable is Context {\\n    address private _owner;\\n\\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\\n\\n    /**\\n     * @dev Initializes the contract setting the deployer as the initial owner.\\n     */\\n    constructor () internal {\\n        address msgSender = _msgSender();\\n        _owner = msgSender;\\n        emit OwnershipTransferred(address(0), msgSender);\\n    }\\n\\n    /**\\n     * @dev Returns the address of the current owner.\\n     */\\n    function owner() public view virtual returns (address) {\\n        return _owner;\\n    }\\n\\n    /**\\n     * @dev Throws if called by any account other than the owner.\\n     */\\n    modifier onlyOwner() {\\n        require(owner() == _msgSender(), \\\"Ownable: caller is not the owner\\\");\\n        _;\\n    }\\n\\n    /**\\n     * @dev Leaves the contract without owner. It will not be possible to call\\n     * `onlyOwner` functions anymore. Can only be called by the current owner.\\n     *\\n     * NOTE: Renouncing ownership will leave the contract without an owner,\\n     * thereby removing any functionality that is only available to the owner.\\n     */\\n    function renounceOwnership() public virtual onlyOwner {\\n        emit OwnershipTransferred(_owner, address(0));\\n        _owner = address(0);\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Can only be called by the current owner.\\n     */\\n    function transferOwnership(address newOwner) public virtual onlyOwner {\\n        require(newOwner != address(0), \\\"Ownable: new owner is the zero address\\\");\\n        emit OwnershipTransferred(_owner, newOwner);\\n        _owner = newOwner;\\n    }\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/math/SafeMath.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity >=0.6.0 <0.8.0;\\n\\n/**\\n * @dev Wrappers over Solidity's arithmetic operations with added overflow\\n * checks.\\n *\\n * Arithmetic operations in Solidity wrap on overflow. This can easily result\\n * in bugs, because programmers usually assume that an overflow raises an\\n * error, which is the standard behavior in high level programming languages.\\n * `SafeMath` restores this intuition by reverting the transaction when an\\n * operation overflows.\\n *\\n * Using this library instead of the unchecked operations eliminates an entire\\n * class of bugs, so it's recommended to use it always.\\n */\\nlibrary SafeMath {\\n    /**\\n     * @dev Returns the addition of two unsigned integers, with an overflow flag.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function tryAdd(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        uint256 c = a + b;\\n        if (c < a) return (false, 0);\\n        return (true, c);\\n    }\\n\\n    /**\\n     * @dev Returns the substraction of two unsigned integers, with an overflow flag.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function trySub(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        if (b > a) return (false, 0);\\n        return (true, a - b);\\n    }\\n\\n    /**\\n     * @dev Returns the multiplication of two unsigned integers, with an overflow flag.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function tryMul(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        // Gas optimization: this is cheaper than requiring 'a' not being zero, but the\\n        // benefit is lost if 'b' is also tested.\\n        // See: https://github.com/OpenZeppelin/openzeppelin-contracts/pull/522\\n        if (a == 0) return (true, 0);\\n        uint256 c = a * b;\\n        if (c / a != b) return (false, 0);\\n        return (true, c);\\n    }\\n\\n    /**\\n     * @dev Returns the division of two unsigned integers, with a division by zero flag.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function tryDiv(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        if (b == 0) return (false, 0);\\n        return (true, a / b);\\n    }\\n\\n    /**\\n     * @dev Returns the remainder of dividing two unsigned integers, with a division by zero flag.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function tryMod(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        if (b == 0) return (false, 0);\\n        return (true, a % b);\\n    }\\n\\n    /**\\n     * @dev Returns the addition of two unsigned integers, reverting on\\n     * overflow.\\n     *\\n     * Counterpart to Solidity's `+` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Addition cannot overflow.\\n     */\\n    function add(uint256 a, uint256 b) internal pure returns (uint256) {\\n        uint256 c = a + b;\\n        require(c >= a, \\\"SafeMath: addition overflow\\\");\\n        return c;\\n    }\\n\\n    /**\\n     * @dev Returns the subtraction of two unsigned integers, reverting on\\n     * overflow (when the result is negative).\\n     *\\n     * Counterpart to Solidity's `-` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Subtraction cannot overflow.\\n     */\\n    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\\n        require(b <= a, \\\"SafeMath: subtraction overflow\\\");\\n        return a - b;\\n    }\\n\\n    /**\\n     * @dev Returns the multiplication of two unsigned integers, reverting on\\n     * overflow.\\n     *\\n     * Counterpart to Solidity's `*` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Multiplication cannot overflow.\\n     */\\n    function mul(uint256 a, uint256 b) internal pure returns (uint256) {\\n        if (a == 0) return 0;\\n        uint256 c = a * b;\\n        require(c / a == b, \\\"SafeMath: multiplication overflow\\\");\\n        return c;\\n    }\\n\\n    /**\\n     * @dev Returns the integer division of two unsigned integers, reverting on\\n     * division by zero. The result is rounded towards zero.\\n     *\\n     * Counterpart to Solidity's `/` operator. Note: this function uses a\\n     * `revert` opcode (which leaves remaining gas untouched) while Solidity\\n     * uses an invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Requirements:\\n     *\\n     * - The divisor cannot be zero.\\n     */\\n    function div(uint256 a, uint256 b) internal pure returns (uint256) {\\n        require(b > 0, \\\"SafeMath: division by zero\\\");\\n        return a / b;\\n    }\\n\\n    /**\\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\\n     * reverting when dividing by zero.\\n     *\\n     * Counterpart to Solidity's `%` operator. This function uses a `revert`\\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\\n     * invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Requirements:\\n     *\\n     * - The divisor cannot be zero.\\n     */\\n    function mod(uint256 a, uint256 b) internal pure returns (uint256) {\\n        require(b > 0, \\\"SafeMath: modulo by zero\\\");\\n        return a % b;\\n    }\\n\\n    /**\\n     * @dev Returns the subtraction of two unsigned integers, reverting with custom message on\\n     * overflow (when the result is negative).\\n     *\\n     * CAUTION: This function is deprecated because it requires allocating memory for the error\\n     * message unnecessarily. For custom revert reasons use {trySub}.\\n     *\\n     * Counterpart to Solidity's `-` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Subtraction cannot overflow.\\n     */\\n    function sub(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\\n        require(b <= a, errorMessage);\\n        return a - b;\\n    }\\n\\n    /**\\n     * @dev Returns the integer division of two unsigned integers, reverting with custom message on\\n     * division by zero. The result is rounded towards zero.\\n     *\\n     * CAUTION: This function is deprecated because it requires allocating memory for the error\\n     * message unnecessarily. For custom revert reasons use {tryDiv}.\\n     *\\n     * Counterpart to Solidity's `/` operator. Note: this function uses a\\n     * `revert` opcode (which leaves remaining gas untouched) while Solidity\\n     * uses an invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Requirements:\\n     *\\n     * - The divisor cannot be zero.\\n     */\\n    function div(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\\n        require(b > 0, errorMessage);\\n        return a / b;\\n    }\\n\\n    /**\\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\\n     * reverting with custom message when dividing by zero.\\n     *\\n     * CAUTION: This function is deprecated because it requires allocating memory for the error\\n     * message unnecessarily. For custom revert reasons use {tryMod}.\\n     *\\n     * Counterpart to Solidity's `%` operator. This function uses a `revert`\\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\\n     * invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Requirements:\\n     *\\n     * - The divisor cannot be zero.\\n     */\\n    function mod(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\\n        require(b > 0, errorMessage);\\n        return a % b;\\n    }\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/math/Math.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity >=0.6.0 <0.8.0;\\n\\n/**\\n * @dev Standard math utilities missing in the Solidity language.\\n */\\nlibrary Math {\\n    /**\\n     * @dev Returns the largest of two numbers.\\n     */\\n    function max(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a >= b ? a : b;\\n    }\\n\\n    /**\\n     * @dev Returns the smallest of two numbers.\\n     */\\n    function min(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a < b ? a : b;\\n    }\\n\\n    /**\\n     * @dev Returns the average of two numbers. The result is rounded towards\\n     * zero.\\n     */\\n    function average(uint256 a, uint256 b) internal pure returns (uint256) {\\n        // (a + b) / 2 can overflow, so we distribute\\n        return (a / 2) + (b / 2) + ((a % 2 + b % 2) / 2);\\n    }\\n}\\n\"\r\n    },\r\n    \"contracts/IERC20.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\r\\n\\r\\npragma solidity >=0.6.12;\\r\\n\\r\\n\\r\\ninterface IERC20 {\\r\\n    function balanceOf(address from) external view returns (uint256);\\r\\n    function transferFrom(address from, address to, uint tokens) external returns (bool);\\r\\n    function transfer(address to, uint tokens) external returns (bool);\\r\\n    function allowance(address owner, address spender) external view returns (uint256);\\r\\n    function burn(uint256 amount) external;\\r\\n}\"\r\n    },\r\n    \"contracts/IERC721Collection.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\r\\n\\r\\npragma solidity ^0.6.12;\\r\\n\\r\\n\\r\\ninterface IERC721Collection {\\r\\n    function issueToken(address _beneficiary, string calldata _wearableId) external;\\r\\n    function getWearableKey(string calldata _wearableId) external view returns (bytes32);\\r\\n    function issued(bytes32 _wearableKey) external view returns (uint256);\\r\\n    function maxIssuance(bytes32 _wearableKey) external view returns (uint256);\\r\\n    function issueTokens(address[] calldata _beneficiaries, bytes32[] calldata _wearableIds) external;\\r\\n    function owner() external view returns (address);\\r\\n    function wearables(uint256 _index) external view returns (string memory);\\r\\n    function wearablesCount() external view returns (uint256);\\r\\n}\"\r\n    },\r\n    \"@openzeppelin/contracts/utils/Context.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity >=0.6.0 <0.8.0;\\n\\n/*\\n * @dev Provides information about the current execution context, including the\\n * sender of the transaction and its data. While these are generally available\\n * via msg.sender and msg.data, they should not be accessed in such a direct\\n * manner, since when dealing with GSN meta-transactions the account sending and\\n * paying for execution may not be the actual sender (as far as an application\\n * is concerned).\\n *\\n * This contract is only required for intermediate, library-like contracts.\\n */\\nabstract contract Context {\\n    function _msgSender() internal view virtual returns (address payable) {\\n        return msg.sender;\\n    }\\n\\n    function _msgData() internal view virtual returns (bytes memory) {\\n        this; // silence state mutability warning without generating bytecode - see https://github.com/ethereum/solidity/issues/2691\\n        return msg.data;\\n    }\\n}\\n\"\r\n    }\r\n  },\r\n  \"settings\": {\r\n    \"optimizer\": {\r\n      \"enabled\": false,\r\n      \"runs\": 200\r\n    },\r\n    \"outputSelection\": {\r\n      \"*\": {\r\n        \"*\": [\r\n          \"evm.bytecode\",\r\n          \"evm.deployedBytecode\",\r\n          \"abi\"\r\n        ]\r\n      }\r\n    },\r\n    \"libraries\": {}\r\n  }\r\n}}","ABI":"[{\"inputs\":[{\"internalType\":\"contract IERC20\",\"name\":\"_acceptedToken\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_storeFeeAddresses\",\"type\":\"address\"},{\"internalType\":\"address[]\",\"name\":\"_collectionAddresses\",\"type\":\"address[]\"},{\"internalType\":\"address[]\",\"name\":\"_saleBeneficiaryAddresses\",\"type\":\"address[]\"},{\"internalType\":\"uint256[]\",\"name\":\"_collectionFee\",\"type\":\"uint256[]\"},{\"internalType\":\"uint256[][]\",\"name\":\"_collectionOptionIds\",\"type\":\"uint256[][]\"},{\"internalType\":\"uint256[][]\",\"name\":\"_collectionAvailableQtys\",\"type\":\"uint256[][]\"},{\"internalType\":\"uint256[][]\",\"name\":\"_collectionPrices\",\"type\":\"uint256[][]\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"_collectionAddress\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256[]\",\"name\":\"_optionIds\",\"type\":\"uint256[]\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"_beneficiary\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"_price\",\"type\":\"uint256\"}],\"name\":\"Bought\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"_collectionAddress\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256[]\",\"name\":\"_optionIds\",\"type\":\"uint256[]\"},{\"indexed\":false,\"internalType\":\"uint256[]\",\"name\":\"_availableQtys\",\"type\":\"uint256[]\"},{\"indexed\":false,\"internalType\":\"uint256[]\",\"name\":\"_prices\",\"type\":\"uint256[]\"}],\"name\":\"SetCollectionData\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"acceptedToken\",\"outputs\":[{\"internalType\":\"contract IERC20\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_collectionAddress\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_optionId\",\"type\":\"uint256\"}],\"name\":\"balanceOf\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_collectionAddress\",\"type\":\"address\"},{\"internalType\":\"uint256[]\",\"name\":\"_optionIds\",\"type\":\"uint256[]\"},{\"internalType\":\"address\",\"name\":\"_beneficiary\",\"type\":\"address\"}],\"name\":\"buy\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_collectionAddress\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_optionId\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"canMint\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_collectionAddress\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_optionId\",\"type\":\"uint256\"}],\"name\":\"collectionData\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"availableQty\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"price\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_collectionAddress\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_optionId\",\"type\":\"uint256\"}],\"name\":\"itemByOptionId\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_collectionAddress\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_saleBeneficiaryAddress\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_collectionFee\",\"type\":\"uint256\"},{\"internalType\":\"uint256[]\",\"name\":\"_collectionOptionIds\",\"type\":\"uint256[]\"},{\"internalType\":\"uint256[]\",\"name\":\"_collectionAvailableQtys\",\"type\":\"uint256[]\"},{\"internalType\":\"uint256[]\",\"name\":\"_collectionPrices\",\"type\":\"uint256[]\"}],\"name\":\"setCollectionData\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}]","ContractName":"BurningStore","CompilerVersion":"v0.6.12+commit.27d51765","OptimizationUsed":"0","Runs":"200","ConstructorArguments":"0000000000000000000000000f5d2fb29fb7d3cfee444a200298f468908cc942000000000000000000000000f49056577a9266cd6cfd1b8f6ac151d9bb3671d700000000000000000000000000000000000000000000000000000000000001000000000000000000000000000000000000000000000000000000000000000140000000000000000000000000000000000000000000000000000000000000018000000000000000000000000000000000000000000000000000000000000001c000000000000000000000000000000000000000000000000000000000000002e00000000000000000000000000000000000000000000000000000000000000400000000000000000000000000000000000000000000000000000000000000000100000000000000000000000090958d4531258ca11d18396d4174a007edbc2b42000000000000000000000000000000000000000000000000000000000000000100000000000000000000000047e33894ed60a691a5c795325dae461363863c8cd4da7b0bd1400000000000000000000000000000000000000000000000000120d4da7b0bd1400000000000000000000000000000000000000000000000000120d4da7b0bd1400000000000000000000000000000000000000000000000000120d4da7b0bd1400000000000000000000000000000000000000000000000000120d4da7b0bd1400000000000000000000000000000000000000000000000000120d4da7b0bd140000","EVMVersion":"Default","Library":"","LicenseType":"","Proxy":"0","Implementation":"","SwarmSource":""}]}