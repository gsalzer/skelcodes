{"status":"1","message":"OK","result":[{"SourceCode":"{{\r\n  \"language\": \"Solidity\",\r\n  \"sources\": {\r\n    \"sandman.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\r\\npragma solidity ^0.8.2;\\r\\n\\r\\nimport \\\"@openzeppelin/contracts/token/ERC721/ERC721.sol\\\";\\r\\nimport \\\"@openzeppelin/contracts/token/ERC721/extensions/ERC721Enumerable.sol\\\";\\r\\nimport \\\"@openzeppelin/contracts/access/Ownable.sol\\\";\\r\\nimport \\\"@openzeppelin/contracts/utils/Counters.sol\\\";\\r\\n\\r\\ninterface SandInterface {\\r\\n    function ownerOf(uint256 tokenId) external view returns (address owner);\\r\\n    function tokenOfOwnerByIndex(address owner, uint256 index)\\r\\n        external\\r\\n        view\\r\\n        returns (uint256 tokenId);\\r\\n}\\r\\n\\r\\ncontract SandAvatars is ERC721, ERC721Enumerable, Ownable {\\r\\n    bool public saleIsActive = false;\\r\\n    bool public burned = false;\\r\\n    address public SandAddress = 0xB90b34B41658aC20A0051874FeeE1933c3614fa7;\\r\\n    SandInterface SandContract = SandInterface(SandAddress);\\r\\n    \\r\\n    constructor() ERC721(\\\"SandAvatars\\\", \\\"SNAV\\\") {\\r\\n    }\\r\\n     \\r\\n\\r\\n    function _beforeTokenTransfer(address from, address to, uint256 tokenId)\\r\\n        internal\\r\\n        override(ERC721, ERC721Enumerable)\\r\\n    {\\r\\n        super._beforeTokenTransfer(from, to, tokenId);\\r\\n    }\\r\\n\\r\\n    function supportsInterface(bytes4 interfaceId)\\r\\n        public\\r\\n        view\\r\\n        override(ERC721, ERC721Enumerable)\\r\\n        returns (bool)\\r\\n    {\\r\\n        return super.supportsInterface(interfaceId);\\r\\n    }\\r\\n    \\r\\n    function random(string memory input) internal pure returns (uint256) {\\r\\n        return uint256(keccak256(abi.encodePacked(input)));\\r\\n    }\\r\\n    \\r\\n    function toHashCode(uint256 value) internal pure returns (string memory) {\\r\\n        uint256 i;\\r\\n\\r\\n        bytes memory buffer = \\\"000000\\\";\\r\\n        for(i=6;i>0;i--) {\\r\\n            if (value % 16 < 10)\\r\\n                buffer[i-1] = bytes1(uint8(48 + uint256(value % 16)));\\r\\n            else\\r\\n                buffer[i-1] = bytes1(uint8(55 + uint256(value % 16)));\\r\\n\\r\\n            value /= 16;\\r\\n        }\\r\\n        return string(buffer);\\r\\n    }\\r\\n    \\r\\n    \\r\\n\\r\\n    function toString(uint256 value) internal pure returns (string memory) {\\r\\n        if (value == 0) {\\r\\n            return \\\"0\\\";\\r\\n        }\\r\\n        uint256 temp = value;\\r\\n        uint256 digits;\\r\\n        while (temp != 0) {\\r\\n            digits++;\\r\\n            temp /= 10;\\r\\n        }\\r\\n        bytes memory buffer = new bytes(digits);\\r\\n        while (value != 0) {\\r\\n            digits -= 1;\\r\\n            buffer[digits] = bytes1(uint8(48 + uint256(value % 10)));\\r\\n            value /= 10;\\r\\n        }\\r\\n        return string(buffer);\\r\\n    }\\r\\n    \\r\\n    function getPolygon(uint256 num, string memory color, string memory op) internal pure returns (string memory) {\\r\\n        uint256[207]memory xtypes =[\\r\\n            14121436260491623888573569494265958210382088460059485271557129702735745326,\\r\\n            3379687223624639408404345647054286820230943047769096274235841555659165627614,\\r\\n            4766529846908783929200657017927412346891862284447113714675691880753314010650,\\r\\n            2414848826299563751631584,\\r\\n            2415403168366050671711990,\\r\\n            165989458421190421426294049862974048,\\r\\n            2990041845436834032465436684735961822206490428694177,\\r\\n            205519767453372228188215768215336195851890616474781117116470017,\\r\\n            783342371240660400615497362662867695169835591505009495153,\\r\\n            3015605336097770010832060948773439899320263180355111271447081940574438532253,\\r\\n            1699410383171683060484640923082407994735009912351540698902523680158858963667,\\r\\n            2067439483755009076537239878613967120688171739225650558832839415147437291640,\\r\\n            2110285635025633850782162448438909787314249243868635101044081548977791378060,\\r\\n            1813537826634847775588271020849619009466237369690820983365919405283580390552,\\r\\n            1433165981178011733008463800384150766019695303333840710976987787175893725835,\\r\\n            1347834300580146900593882219877353796923237396140869764780512560971696623306,\\r\\n            1588291142145332360308884532736805401102486146533600217899801854658095932103,\\r\\n            1630640689404733378642505262896486732354314158877471864006247217340780175548,\\r\\n            1926975200976366162727790765948535744022368363806555952276809889580033045183,\\r\\n            2195729526611169200073088264115405134266050171528327914526689757427595025581,\\r\\n            2266183416249769109687683253195421600011544355208010500246994655874713467054,\\r\\n            1942021118171089200927872160880968143467387698704835635209143544230560220841,\\r\\n            2026692120635480416902954766191778704951595844413918284067846871351766098126,\\r\\n            2252931742901068372445672611749832774842961514843407512141469648329648975563,\\r\\n            2295116187662235110121913666276726987468444668928175066731688914204036246718,\\r\\n            2592194794286804437698157144159526339621523043225693230464121704378048799436,\\r\\n            2535270053559044811589912991644676175666664223951765667507672669824291794632,\\r\\n            2676810635330829446627987247531416732227338364894945326305024218158728837315,\\r\\n            2676507767503271220336019071355421318369328191959582692781556145107637730497,\\r\\n            2860260185232810836874932161100098492177796172019734599621174229889736083643,\\r\\n            2704583530546838355578889545793450502804454913237751059045251025304634622638,\\r\\n            2732605051757189469738771911402128307348469092831311049021474868234958504110,\\r\\n            2689896882341260570152089198804438177341639211772304451963188924944556062881,\\r\\n            2874339369183394173601732921210730487262146816407635719706621996970437346462,\\r\\n            134063278,\\r\\n            11401402070285144550100871971896250052146431669,\\r\\n            11401442479798540347354564667579758730284697744,\\r\\n            2010405393385468769754390500839040943260313875155174100691674881837603800274,\\r\\n            53852718675364590822474638051961946119679634989037219218611160268927,\\r\\n            2873152535253068203115307214512935299514021674337530122812293448446001082573,\\r\\n            632967951439172729344733328545,\\r\\n            2703590214691199062276704278272662481619631230524746364075007852563519075527,\\r\\n            3142100272699584422061276135492595947566116804089604574541184736671832567449,\\r\\n            2989437538194262125706135904879775746659906037333659,\\r\\n            2732882416327165001845161696611165857660612391574224505373154795372861555376,\\r\\n            511,\\r\\n            2407752739435277468182135965268740961167067564356323244993211865623229981385,\\r\\n            2718635756548816077094781045246157570894954467225593574078410329624519202986,\\r\\n            205426318550813624678543263541887184093338878840179569528765611,\\r\\n            783755749980388114187626910565273421423263977749007664810,\\r\\n            2548935505955974898918714072113448954440083838302132660405920669118189609678,\\r\\n            2620798165283744002906637766862406499463773050371800692306162182138139601596,\\r\\n            511,\\r\\n            3072227530827800386450195294804395741003464330979216039104110948505046855347,\\r\\n            134062774,\\r\\n            2492699542259379918880031894535889655400300980491640244623151733365212783310,\\r\\n            3439125500424588101080488050237853159581039880613797914734533628447204922543,\\r\\n            35140538584256,\\r\\n            3242094284692887871609116300080036303492460653890804351075462070651154177202,\\r\\n            511,\\r\\n            1770013146521665037408692954108461375963030202334087742099350891873277133542,\\r\\n            2416417129151844328456352,\\r\\n            205354787381561677649152221282543919859758865255427095704153723,\\r\\n            4554618901733828934554583591157904263166577235187268654483446904656196608231,\\r\\n            205399677480996743294400265142671549319989067471689792870214765,\\r\\n            1687649379406570998776343934026219620523553877468665929082612794343857930982,\\r\\n            35146584669401,\\r\\n            43490082804405313463985993646168051869873,\\r\\n            682778994860606022295232778088851114906462078344796921178050393667028676812,\\r\\n            924784587014537063152182727386123816934642400149158636683653472794560994908,\\r\\n            511,\\r\\n            740975772651252457144836420278673397610254157186597222250099236134980751977,\\r\\n            2414117941576320369311410,\\r\\n            632708923678708594065717615261,\\r\\n            1458925500838540507418926026561993567301703685253672786264170589214896329935,\\r\\n            1362215544816844226291935252053426049015218768525540613182698930612617390203,\\r\\n            205358079224472907756417989573029084098844703882026101090076869,\\r\\n            783366263800606206590835024970459678702881525236644753005,\\r\\n            11400184790511075841139148509544386174780755664,\\r\\n            165862180158385183703562576710887618,\\r\\n            1953753321857745697879799949839981476218506366288294591805006875595925160150,\\r\\n            9209770061908476534,\\r\\n            9208258027669985499,\\r\\n            1007024817493647344034072868464098635223782697202574437333574124131465880276,\\r\\n            978311935401717486461471199063926706147737078905916884262441267563763117176,\\r\\n            1744463536117297771199500556841754719200382694378654872668579678780200630368,\\r\\n            511,\\r\\n            1744601465411721296895678703119841194368939717120234214930076101190129364598,\\r\\n            11401222567826577545303997980370987807270047450,\\r\\n            9208989541913880222,\\r\\n            1092826092546994839469209809358617178552720724428088672892094552082176036544,\\r\\n            632684934038491608715134540950,\\r\\n            14115595813093446524490909446834395552161017956518832857934551862262970508,\\r\\n            632986958806261141854888479370,\\r\\n            632977282640443796338332746377,\\r\\n            2052946140791500114938153887393848933442548125195317854590544344108166871666,\\r\\n            134024309,\\r\\n            2414284504605938271190647,\\r\\n            2414432961303085847740591,\\r\\n            1840619951669604201410879954770232798770635410344762643704857699299414045884,\\r\\n            2054740440345882338413182726751774799923504795098535273396345647260901121653,\\r\\n            11401099814810876640669013063882522770837151408,\\r\\n            2251164459629472805890764632980280277423766955907349854903606843989721679987,\\r\\n            35133399578745,\\r\\n            632965160288698604399670134412,\\r\\n            632963006881331930588495022277,\\r\\n            1786344573953401262130609349327547713072556579231105641242862738580471876815,\\r\\n            2038589805006897792509112007954350735573250959223795959103614935773248814209,\\r\\n            53842228122476702495773295789384926848390152018530179498957340490361,\\r\\n            2111666526756141710963288250158183316620790909592475932262883279353406879950,\\r\\n            134025936,\\r\\n            165907096476797172510820836217519220,\\r\\n            165907184370672188268528709397970124,\\r\\n            1658082137457338989675227097692720737868293871022172673441890803106526591693,\\r\\n            1883024388535656625284391916361025676073851550858069989271493020769645815925,\\r\\n            1926920472707949547012838945053378431215376612467398300984843403947283124847,\\r\\n            35131542532261,\\r\\n            2024594198579077053330764490684944254136592945947480819607862982763103974004,\\r\\n            35131923427956,\\r\\n            165909021475966603241960532792900752,\\r\\n            165909083373204686735841121470840002,\\r\\n            1885618862360980679350640322437473822248060842137738006611198105431721960658,\\r\\n            1742173066023287913099403968227517944924073894310750451819876872377331939012,\\r\\n            1614407666257820487363169021269399758278734125660509710128450889567286921848,\\r\\n            1744464615782850979964182648476765026166962618378931230221541869862448329839,\\r\\n            134014162,\\r\\n            11401182764097204976827754137621811304469167267,\\r\\n            1771877757361298981460197733359093436404203289488771558972277815195612811459,\\r\\n            35133957411001,\\r\\n            2010266548816189564479104322685517328153080461434873302541240831931155540179,\\r\\n            1304683555199795152622005937938311831570780363298831092900867642675445952117,\\r\\n            1969021876408794075999015047652559943941859790002927827734170938252782778009,\\r\\n            43490414745042222856303808090815535583909,\\r\\n            2180572158151246410001024254246908758834719272846442894189196745760436466396,\\r\\n            1673403802771746401375198818222556837670706048123256272574605586619058958977,\\r\\n            1885288008633175329315918003045024399639454063428632155870688280191534429897,\\r\\n            1416905731959046147692107590348875820999182264648841806339526292113423404216,\\r\\n            1997291483260239039461852812345115693394643947621579986309362922487406451834,\\r\\n            783558446483948923466464176747535046874779770473507527338,\\r\\n            14115978838654814715707104984262644478936595142475981459604830162147428033,\\r\\n            633107969808034801031089073827,\\r\\n            2633578470602599440322905773949466446156875479267007458201540814813565895350,\\r\\n            632977495378512133649644484776,\\r\\n            165929986036551556547801149694623415,\\r\\n            2989025485403311877817610573034810975450514052426906,\\r\\n            205407434988195293878750642328847735295359291050132879493903533,\\r\\n            11404056456687223639749243846043887237610963095,\\r\\n            2989675086510346121999155662963669593588724326309475,\\r\\n            43500872086127607303759630063956263790259,\\r\\n            43501704123066862598939503992370536738999,\\r\\n            11405895771622953147234522950227641433617192204,\\r\\n            633135015023432504038451692802,\\r\\n            1798132692690596179620705189163856188119368407084938759745728243059276205742,\\r\\n            2989220037414416967977113123657014036013879774232178,\\r\\n            165937578388141905202686021359195820,\\r\\n            2414727696459509174196890,\\r\\n            2414691127125256287900332,\\r\\n            165915365962175250832669694316052105,\\r\\n            165910991072664731647969066886692541,\\r\\n            165915364714563768096814076148908681,\\r\\n            632905030222108565907283182269,\\r\\n            14120708005514235896398854230464658906875090178430929295545649270898687532,\\r\\n            3337199960013931773256446509889229036480433598974937326816702961831104073785,\\r\\n            3605596203950561889636721869696093579010718870466811845253629283825091211308,\\r\\n            633155812478473693991465778734,\\r\\n            9213733475672780801,\\r\\n            3167748284762293053715838884979026074229237355454641984176617526858699095095,\\r\\n            9213067443423788601,\\r\\n            205469983996266401852074125388687431408097597551877715399396883,\\r\\n            3351113016766149477002540489062003105409306561172428804040580041473100728372,\\r\\n            9213383966672673328,\\r\\n            43512465521962263479832723055980780052022,\\r\\n            3520125028586159092693396574728389547239517587975760695831987336475883987511,\\r\\n            3534756679028325853283430757339694332274937217738686833232855861131381961745,\\r\\n            633170324347821347278826632744,\\r\\n            3576139438807138707926215165472039742119299231360549960477337344216086985298,\\r\\n            9213737944048074266,\\r\\n            14119204143756774178704498797963472268374854012663999297240300317580833876,\\r\\n            2415408463281380994969144,\\r\\n            3365166644055540638233802210399874078674695627002040277764271603049931312166,\\r\\n            165988148429214389023346425638543400,\\r\\n            1887746225632730957138348290686608844568954207126319086712163562729765690710,\\r\\n            1915600863297605383381527809737518613446657499530049954771583968952018611994,\\r\\n            2113322577499690111671980382294985200037260660369180400997101761556814565131,\\r\\n            2296689143527392781842689264020699383608121252820658176192302688260167906561,\\r\\n            1660566289916744597573142969784638710355914531095542918433558190781161095928,\\r\\n            2534082095414892391686150036943765103020588807891018485576253045401890385141,\\r\\n            633024223136024389052689114166,\\r\\n            2241391978884043179921934352810270624406243989287534804133301471739814963539,\\r\\n            14116875255364126381735783362239064288396228655148828240929468015891006244,\\r\\n            2193355749223663387186473805456239874894208331871277368480859777693891256633,\\r\\n            2403831831909932078863419000029126387693398488022480060606911847939131651161,\\r\\n            632995175865805100776593642529,\\r\\n            1995274819321270135644234375868044978329361002748554918878840054020430981452,\\r\\n            2375396906030561049849552299865999851499367560653426663546240001308245435983,\\r\\n            35139812415002,\\r\\n            2235677420740099074517491835994945260329291511134955606995441301360674695509,\\r\\n            14116911062155530733820699789705328612116920974874452489152294027973179472,\\r\\n            2678770361965612704120099657034866152680834834755057279760189508348235082564,\\r\\n            3287203733699690768233314741557537574339684689442054036487386010876555637992,\\r\\n            4064839512598947773653950189688692616236907353206181272213310648298450050346,\\r\\n            4120828199034495056757676173705786195371723329918666661524593207136859074328,\\r\\n            2415394844344362282141479,\\r\\n\\r\\n            36325149170812693104873872163691011689991992041050311830217183986701738246657,\\r\\n            64478519805822442329262443918803540875483425373278030259456266971945429652305,\\r\\n            86726949164196919860061327850596874826858820280533989768291036578610410590608,\\r\\n            4291282370\\r\\n            ];\\r\\n            \\r\\n            \\r\\n        uint256 i;\\r\\n        uint256 first_index;\\r\\n        uint256 cur_num;\\r\\n        uint256 k;\\r\\n        uint256 pos;\\r\\n        uint256 part;\\r\\n        string memory res;\\r\\n        uint256 result;\\r\\n        \\r\\n        part = (xtypes[203+(num/32)] / (256**(num%32)));\\r\\n        first_index = part%256;\\r\\n        res = '';\\r\\n    \\r\\n        for(i = first_index-1; i<=250; i++) {\\r\\n            if (xtypes[i] == 0)\\r\\n                break;\\r\\n    \\r\\n            cur_num= xtypes[i];    \\r\\n            k=0;\\r\\n            for(pos=0;pos<=27;pos++) {\\r\\n                result = (cur_num /  (512 ** pos)) % 512;\\r\\n                if (result == 511)\\r\\n                    break;\\r\\n    \\r\\n                if (k%2 == 0) {\\r\\n                        res = string(abi.encodePacked(res, toString(result*3), ','));\\r\\n\\r\\n                }\\r\\n                else {\\r\\n                    res = string(abi.encodePacked(res, toString(result*3), ' '));\\r\\n\\r\\n                }\\r\\n                k++;\\r\\n             }   \\r\\n            if (result == 511)\\r\\n                break;\\r\\n        }\\r\\n\\r\\n        return string(abi.encodePacked('<polygon opacity=\\\"',op,'\\\" points=\\\"', res, '\\\" fill=\\\"#',color,'\\\" />'));\\r\\n    \\r\\n    }\\r\\n    \\r\\n    function tokenURI(uint256 tokenId) pure public override(ERC721)  returns (string memory) {\\r\\n        uint256[19] memory xtypes;\\r\\n        string[6] memory colors;\\r\\n        string memory output;\\r\\n\\r\\n        uint256[12] memory params;\\r\\n\\r\\n        uint256 pos;\\r\\n        uint256 i;\\r\\n\\r\\n        uint256 rand = random(string(abi.encodePacked('SandMan',toString(tokenId))));\\r\\n\\r\\n        params[0] = 1 + (rand % 30); // pallette=\\r\\n        params[1] = 1 + ((rand/100) % 5);// beard\\r\\n        params[2] = 1 + ((rand/1000) % 6); // cap\\r\\n        params[3] = 1 + ((rand/10000) % 5); // glasses\\r\\n\\r\\n        params[4] = 1 + ((rand/100000) % 4); // tube\\r\\n        params[5] = 1 + ((rand/1000000) % 6); // object\\r\\n        params[6] = 1 + ((rand/100000000) % 6); // far\\r\\n        params[7] = 1 + ((rand/1000000000) % 10); // Band - aid\\r\\n\\r\\n\\r\\n\\r\\n        xtypes[0] = 1765300933158159279126365688755849989787469680610145113308712138382768895;\\r\\n        xtypes[1] = 1764921079952145254276332071479222557911241288448461372909069781721677547;\\r\\n        xtypes[2] = 1501679087584470838161589003975082910140105054122807965032669773169688478;\\r\\n        xtypes[3] = 1764781974038155230893998203428071971942131358905837942209321033418145694;\\r\\n        xtypes[4] = 1764351442057709576512408600184270815014492966481600074584100303563390699;\\r\\n        xtypes[5] = 1764513942681239813290380170455237895030536670527749966108226146279030779;\\r\\n        xtypes[6] = 1765083764856076636672938774629519978791146014135139882458135528892006302;\\r\\n        xtypes[7] = 1763024496842125922962385602205943197321056192857025632119827849480763839;\\r\\n        xtypes[8] = 1675710049990272911441037604203877133533668492266557815129548233759518128;\\r\\n        xtypes[9] = 1551233773361696239304903403895808160934653895059654415324688197841582071;\\r\\n        xtypes[10] = 1625636607414481457642678052301313971780849938445042085056482070100953889;\\r\\n        xtypes[11] = 1722512524339940313921309205786012536301170577779571168786046988462044871;\\r\\n        xtypes[12] = 1766836768210894802335784057954424698551920770841938248704295415987566568;\\r\\n        xtypes[13] = 442714978489977024950392528240390319461857033012516340293718171539472383;\\r\\n        xtypes[14] = 1198354148602851882454841352599916552948941833809782804420285718256091136;\\r\\n        xtypes[15] = 1765862763184508503075712492699913383911672107677599518220277459367559248;\\r\\n\\r\\n    \\r\\n        for(i=0;i<=4;i++) {\\r\\n            pos = (params[0]-1) * 5 + i;\\r\\n            colors[i] = toHashCode(xtypes[pos/10] / (16777216 ** (pos%10)) % 16777216);\\r\\n        }\\r\\n\\r\\n\\r\\n        output = string(abi.encodePacked('<?xml version=\\\"1.0\\\" encoding=\\\"utf-8\\\"?><svg xmlns=\\\"http://www.w3.org/2000/svg\\\" width=\\\"1000px\\\" height=\\\"1000px\\\" viewBox=\\\"0 0 1000 1000\\\"><linearGradient id=\\\"g\\\" gradientUnits=\\\"userSpaceOnUse\\\" x2=\\\"0\\\" y2=\\\"1000\\\"><stop offset=\\\"0.1\\\" style=\\\"stop-color:#',colors[2],'\\\"/><stop offset=\\\"0.5\\\" style=\\\"stop-color:#',colors[1],'\\\"/><stop offset=\\\"1\\\" style=\\\"stop-color:#',colors[2],'\\\"/></linearGradient><rect x=\\\"0\\\" y=\\\"0\\\" fill=\\\"url(#g)\\\" width=\\\"1000\\\" height=\\\"1000\\\"/>',\\r\\n        '<circle opacity=\\\"0.09\\\" fill=\\\"#FFFFFF\\\" cx=\\\"726\\\" cy=\\\"380\\\" r=\\\"151\\\"/><radialGradient id=\\\"s\\\" cx=\\\"44\\\" cy=\\\"723\\\" r=\\\"99\\\" gradientTransform=\\\"matrix(1 0 0 -1 662 1118)\\\" gradientUnits=\\\"userSpaceOnUse\\\"><stop  offset=\\\"0.6\\\" style=\\\"stop-color:#FFFFFF\\\"/><stop  offset=\\\"1\\\" style=\\\"stop-color:#',colors[1],'\\\"/></radialGradient><circle opacity=\\\"0.8\\\" fill=\\\"url(#s)\\\" cx=\\\"706\\\" cy=\\\"395\\\" r=\\\"99\\\"/>',\\r\\n        getPolygon(92 +params[6], colors[2], '0.08')));\\r\\n        \\r\\n        output = string(abi.encodePacked(output,'<g><path opacity=\\\"0.11\\\" fill=\\\"#FFFFFF\\\" d=\\\"M668,533c0,0,313,0,303-28s-397-48,15-46c301,2,196,46,460,43c258-3,484-60,485-17s-290,24-290,50s288,9,478,12c189,3,341-83,535-26c194,56,322,32,517,5c194-27,140,0,427,0s1180,0,1180,0v-31H3607c0,0-137-11-283-10c-146,0-162,33-394-7c-232-41-312-43-420-24c-107,18-255,68-395,74s-397,18-398,7c-1-10,447-26,446-65c-1-38-176-42-391-25c-215,16-395-14-568-19c-172-4-626-8-627,25s323,25,322,50c0,9-593,3-593,3H-36v27h478C442,531,553,533,668,533\\\"/><path opacity=\\\"0.11\\\" fill=\\\"#FFFFFF\\\" d=\\\"M668,514c0,0,322,12,312-15c-10-28-804-56,8-62c301-2,239,37,503,34c258-3,565-42,569,1c2,29-381,32-417,61c-23,18,273,12,470,7c189-5,513-94,714-52c212,44,184,46,379,18c194-27,188,1,475,1s1096,0,1096,0v-20c0,0-1102,0-1175,0s-137-13-284-13c-146,0-161,25-393-16s-315-31-422-12c-107,18-250,68-389,74s-432,24-432,13c0-13,458-25,473-71c12-37-172-54-387-38s-395-14-568-19c-172-4-620,7-621,41s319,32,321,51c0,9-598-12-598-12H-36v27h478C442,513,553,514,668,514z\\\"/><animateMotion path=\\\"M 0 0 L -3750 40 Z\\\" dur=\\\"150s\\\" repeatCount=\\\"indefinite\\\" /></g>',\\r\\n        getPolygon(80 +params[5]*2-1, colors[2], '0.1'),\\r\\n        getPolygon(80 +params[5]*2, colors[2], '0.4')));\\r\\n        \\r\\n        output = string(abi.encodePacked(output, getPolygon(0, colors[2], '1'),\\r\\n        getPolygon(1, colors[1], '1'),\\r\\n        getPolygon(2, colors[0], '0.2'),\\r\\n        getPolygon(3, colors[2], '0.3'),\\r\\n        getPolygon(4, colors[2], '0.3'),\\r\\n        getPolygon(5, colors[0], '0.2')));\\r\\n        \\r\\n        output = string(abi.encodePacked(output, getPolygon(6, colors[4], '1'),\\r\\n        getPolygon(7, colors[3], '1'),\\r\\n        getPolygon(8, 'FFFFFF', '0.9'),\\r\\n        getPolygon(9, 'FFFFFF', '0.9'),\\r\\n        '<circle fill=\\\"#',colors[2],'\\\" cx=\\\"566\\\" cy=\\\"406\\\" r=\\\"7.3\\\"/><circle opacity=\\\"0.66\\\" fill=\\\"#FFFFFF\\\" cx=\\\"570\\\" cy=\\\"404\\\" r=\\\"3\\\"/><circle fill=\\\"#',colors[2],'\\\" cx=\\\"414\\\" cy=\\\"407\\\" r=\\\"7.3\\\"/><circle opacity=\\\"0.66\\\" fill=\\\"#FFFFFF\\\" cx=\\\"418\\\" cy=\\\"404\\\" r=\\\"3\\\"/><g>'));\\r\\n        \\r\\n        output = string(abi.encodePacked(output, getPolygon(77, colors[3],'1'),\\r\\n        getPolygon(78, colors[3], '1'),\\r\\n        getPolygon(79, colors[4], '1'),\\r\\n        getPolygon(80, colors[4], '1'),\\r\\n        '<animate attributeName=\\\"opacity\\\" values=\\\"0;0;0;0;0;0;0;0;0;0;0;0;1;0;0;0;0;0;0;0;0\\\" dur=\\\"4s\\\" repeatCount=\\\"indefinite\\\" begin=\\\"0s\\\"/></g>'));\\r\\n        \\r\\n        \\r\\n        if (params[7] == 1) {\\r\\n            output = string(abi.encodePacked(output, getPolygon(38, colors[0],'1'),\\r\\n            getPolygon(39, colors[3], '1'),\\r\\n            getPolygon(40, colors[3], '1')));\\r\\n        }\\r\\n        \\r\\n        output = string(abi.encodePacked(output, \\r\\n        getPolygon(9 +params[1]*2-1, colors[3], '1'),\\r\\n        getPolygon(9 +params[1]*2, colors[2], '0.66'),\\r\\n        \\r\\n        getPolygon(19 +params[2]*3-2, colors[2], '1'),\\r\\n        getPolygon(19 +params[2]*3-1, colors[1], '0.6'),\\r\\n        getPolygon(19 +params[2]*3, colors[1], '0.6')));\\r\\n        \\r\\n        output = string(abi.encodePacked(output, \\r\\n        getPolygon(40 +params[3]*4-3, colors[3], '0.92'),\\r\\n        getPolygon(40 +params[3]*4-2, colors[0], '0.25'),\\r\\n        getPolygon(40 +params[3]*4-1, colors[0], '0.25'),\\r\\n        getPolygon(40 +params[3]*4, colors[2], '1')));\\r\\n        \\r\\n        output = string(abi.encodePacked(output, \\r\\n        getPolygon(60 +params[4]*4-3, colors[2], '1'),\\r\\n        getPolygon(60 +params[4]*4-2, colors[1], '0.5'),\\r\\n        getPolygon(60 +params[4]*4-1, colors[1], '0.5'),\\r\\n        getPolygon(60 +params[4]*4, colors[1], '1'),\\r\\n        '<g>',\\r\\n        getPolygon(98, colors[2], '1'),\\r\\n        '<animateMotion path=\\\"M0,0 C5,-5 12,-5 15,-12Z\\\" dur=\\\"10s\\\" repeatCount=\\\"indefinite\\\"/></g></svg> '));\\r\\n\\r\\n        \\r\\n        string memory strparams;\\r\\n\\r\\n        strparams = string(abi.encodePacked('[{ \\\"trait_type\\\": \\\"Palette\\\", \\\"value\\\": \\\"',\\r\\n        toString(params[0]),\\r\\n        '\\\" }, { \\\"trait_type\\\": \\\"Beard\\\", \\\"value\\\": \\\"',\\r\\n        toString(params[1]),\\r\\n        '\\\" }, { \\\"trait_type\\\": \\\"Cap\\\", \\\"value\\\": \\\"',\\r\\n        toString(params[2])));\\r\\n        \\r\\n        strparams = string(abi.encodePacked(strparams, \\r\\n        '\\\" }, { \\\"trait_type\\\": \\\"Glasses\\\", \\\"value\\\": \\\"',\\r\\n        toString(params[3]),\\r\\n        '\\\" }, { \\\"trait_type\\\": \\\"Tube\\\", \\\"value\\\": \\\"',\\r\\n        toString(params[4]),\\r\\n        '\\\" }, { \\\"trait_type\\\": \\\"Object\\\", \\\"value\\\": \\\"',\\r\\n        toString(params[5])));\\r\\n        \\r\\n        if (params[7] == 1) {\\r\\n            strparams = string(abi.encodePacked(strparams, \\r\\n             '\\\" }, { \\\"trait_type\\\": \\\"Band - aid\\\", \\\"value\\\": \\\"1'));\\r\\n        }\\r\\n        \\r\\n        strparams = string(abi.encodePacked(strparams, \\r\\n        '\\\" }, { \\\"trait_type\\\": \\\"Far\\\", \\\"value\\\": \\\"',\\r\\n        toString(params[6]),\\r\\n        '\\\" }]'));\\r\\n    \\r\\n\\r\\n\\r\\n        string memory json = Base64.encode(bytes(string(abi.encodePacked('{\\\"name\\\": \\\"Onchain Sandman\\\", \\\"description\\\": \\\"Onchain Sandman - beautiful avatar, completely generated OnChain\\\",\\\"attributes\\\":', strparams, ', \\\"image\\\": \\\"data:image/svg+xml;base64,', Base64.encode(bytes(output)), '\\\"}'))));\\r\\n        output = string(abi.encodePacked('data:application/json;base64,', json));\\r\\n\\r\\n        return output;\\r\\n    }\\r\\n    \\r\\n    function flipSaleState() public onlyOwner {\\r\\n        saleIsActive = !saleIsActive;\\r\\n    }\\r\\n    \\r\\n        \\r\\n    function burnAll() public onlyOwner {\\r\\n        burned = true;\\r\\n    }\\r\\n    \\r\\n    function directMint(address to, uint256 tokenId) public onlyOwner {\\r\\n        require(!burned, \\\"Burned!\\\");\\r\\n        _safeMint(to, tokenId);\\r\\n    }\\r\\n    \\r\\n    function mintMany(uint32[] memory ids) public {\\r\\n        require(!burned, \\\"Burned!\\\");\\r\\n        require(saleIsActive, \\\"Sale must be active to mint tokens\\\");\\r\\n\\r\\n        for (uint i = 0; i < ids.length; i++) {\\r\\n            require(SandContract.ownerOf(ids[i]) == msg.sender, \\\"Must own a Sand to mint token\\\");\\r\\n            _safeMint(msg.sender, ids[i]);\\r\\n        }\\r\\n    }\\r\\n    \\r\\n    function mintToken(uint tokenId) public {\\r\\n        require(!burned, \\\"Burned!\\\");\\r\\n        require(saleIsActive, \\\"Sale must be active to mint tokens\\\");\\r\\n        require(SandContract.ownerOf(tokenId) == msg.sender, \\\"Must own a Sand to mint token\\\");\\r\\n\\r\\n        _safeMint(msg.sender, tokenId);\\r\\n    }\\r\\n\\r\\n    \\r\\n}\\r\\n\\r\\n\\r\\n\\r\\n\\r\\n/// [MIT License]\\r\\n/// @title Base64\\r\\n/// @notice Provides a function for encoding some bytes in base64\\r\\n/// @author Brecht Devos <brecht@loopring.org>\\r\\nlibrary Base64 {\\r\\n    bytes internal constant TABLE = \\\"ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/\\\";\\r\\n\\r\\n    /// @notice Encodes some bytes to the base64 representation\\r\\n    function encode(bytes memory data) internal pure returns (string memory) {\\r\\n        uint256 len = data.length;\\r\\n        if (len == 0) return \\\"\\\";\\r\\n\\r\\n        // multiply by 4/3 rounded up\\r\\n        uint256 encodedLen = 4 * ((len + 2) / 3);\\r\\n\\r\\n        // Add some extra buffer at the end\\r\\n        bytes memory result = new bytes(encodedLen + 32);\\r\\n\\r\\n        bytes memory table = TABLE;\\r\\n\\r\\n        assembly {\\r\\n            let tablePtr := add(table, 1)\\r\\n            let resultPtr := add(result, 32)\\r\\n\\r\\n            for {\\r\\n                let i := 0\\r\\n            } lt(i, len) {\\r\\n\\r\\n            } {\\r\\n                i := add(i, 3)\\r\\n                let input := and(mload(add(data, i)), 0xffffff)\\r\\n\\r\\n                let out := mload(add(tablePtr, and(shr(18, input), 0x3F)))\\r\\n                out := shl(8, out)\\r\\n                out := add(out, and(mload(add(tablePtr, and(shr(12, input), 0x3F))), 0xFF))\\r\\n                out := shl(8, out)\\r\\n                out := add(out, and(mload(add(tablePtr, and(shr(6, input), 0x3F))), 0xFF))\\r\\n                out := shl(8, out)\\r\\n                out := add(out, and(mload(add(tablePtr, and(input, 0x3F))), 0xFF))\\r\\n                out := shl(224, out)\\r\\n\\r\\n                mstore(resultPtr, out)\\r\\n\\r\\n                resultPtr := add(resultPtr, 4)\\r\\n            }\\r\\n\\r\\n            switch mod(len, 3)\\r\\n            case 1 {\\r\\n                mstore(sub(resultPtr, 2), shl(240, 0x3d3d))\\r\\n            }\\r\\n            case 2 {\\r\\n                mstore(sub(resultPtr, 1), shl(248, 0x3d))\\r\\n            }\\r\\n\\r\\n            mstore(result, encodedLen)\\r\\n        }\\r\\n\\r\\n        return string(result);\\r\\n    }\\r\\n}\\r\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/utils/Counters.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @title Counters\\n * @author Matt Condon (@shrugs)\\n * @dev Provides counters that can only be incremented, decremented or reset. This can be used e.g. to track the number\\n * of elements in a mapping, issuing ERC721 ids, or counting request ids.\\n *\\n * Include with `using Counters for Counters.Counter;`\\n */\\nlibrary Counters {\\n    struct Counter {\\n        // This variable should never be directly accessed by users of the library: interactions must be restricted to\\n        // the library's function. As of Solidity v0.5.2, this cannot be enforced, though there is a proposal to add\\n        // this feature: see https://github.com/ethereum/solidity/issues/4637\\n        uint256 _value; // default: 0\\n    }\\n\\n    function current(Counter storage counter) internal view returns (uint256) {\\n        return counter._value;\\n    }\\n\\n    function increment(Counter storage counter) internal {\\n        unchecked {\\n            counter._value += 1;\\n        }\\n    }\\n\\n    function decrement(Counter storage counter) internal {\\n        uint256 value = counter._value;\\n        require(value > 0, \\\"Counter: decrement overflow\\\");\\n        unchecked {\\n            counter._value = value - 1;\\n        }\\n    }\\n\\n    function reset(Counter storage counter) internal {\\n        counter._value = 0;\\n    }\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/access/Ownable.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../utils/Context.sol\\\";\\n\\n/**\\n * @dev Contract module which provides a basic access control mechanism, where\\n * there is an account (an owner) that can be granted exclusive access to\\n * specific functions.\\n *\\n * By default, the owner account will be the one that deploys the contract. This\\n * can later be changed with {transferOwnership}.\\n *\\n * This module is used through inheritance. It will make available the modifier\\n * `onlyOwner`, which can be applied to your functions to restrict their use to\\n * the owner.\\n */\\nabstract contract Ownable is Context {\\n    address private _owner;\\n\\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\\n\\n    /**\\n     * @dev Initializes the contract setting the deployer as the initial owner.\\n     */\\n    constructor() {\\n        _setOwner(_msgSender());\\n    }\\n\\n    /**\\n     * @dev Returns the address of the current owner.\\n     */\\n    function owner() public view virtual returns (address) {\\n        return _owner;\\n    }\\n\\n    /**\\n     * @dev Throws if called by any account other than the owner.\\n     */\\n    modifier onlyOwner() {\\n        require(owner() == _msgSender(), \\\"Ownable: caller is not the owner\\\");\\n        _;\\n    }\\n\\n    /**\\n     * @dev Leaves the contract without owner. It will not be possible to call\\n     * `onlyOwner` functions anymore. Can only be called by the current owner.\\n     *\\n     * NOTE: Renouncing ownership will leave the contract without an owner,\\n     * thereby removing any functionality that is only available to the owner.\\n     */\\n    function renounceOwnership() public virtual onlyOwner {\\n        _setOwner(address(0));\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Can only be called by the current owner.\\n     */\\n    function transferOwnership(address newOwner) public virtual onlyOwner {\\n        require(newOwner != address(0), \\\"Ownable: new owner is the zero address\\\");\\n        _setOwner(newOwner);\\n    }\\n\\n    function _setOwner(address newOwner) private {\\n        address oldOwner = _owner;\\n        _owner = newOwner;\\n        emit OwnershipTransferred(oldOwner, newOwner);\\n    }\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/token/ERC721/extensions/ERC721Enumerable.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../ERC721.sol\\\";\\nimport \\\"./IERC721Enumerable.sol\\\";\\n\\n/**\\n * @dev This implements an optional extension of {ERC721} defined in the EIP that adds\\n * enumerability of all the token ids in the contract as well as all token ids owned by each\\n * account.\\n */\\nabstract contract ERC721Enumerable is ERC721, IERC721Enumerable {\\n    // Mapping from owner to list of owned token IDs\\n    mapping(address => mapping(uint256 => uint256)) private _ownedTokens;\\n\\n    // Mapping from token ID to index of the owner tokens list\\n    mapping(uint256 => uint256) private _ownedTokensIndex;\\n\\n    // Array with all token ids, used for enumeration\\n    uint256[] private _allTokens;\\n\\n    // Mapping from token id to position in the allTokens array\\n    mapping(uint256 => uint256) private _allTokensIndex;\\n\\n    /**\\n     * @dev See {IERC165-supportsInterface}.\\n     */\\n    function supportsInterface(bytes4 interfaceId) public view virtual override(IERC165, ERC721) returns (bool) {\\n        return interfaceId == type(IERC721Enumerable).interfaceId || super.supportsInterface(interfaceId);\\n    }\\n\\n    /**\\n     * @dev See {IERC721Enumerable-tokenOfOwnerByIndex}.\\n     */\\n    function tokenOfOwnerByIndex(address owner, uint256 index) public view virtual override returns (uint256) {\\n        require(index < ERC721.balanceOf(owner), \\\"ERC721Enumerable: owner index out of bounds\\\");\\n        return _ownedTokens[owner][index];\\n    }\\n\\n    /**\\n     * @dev See {IERC721Enumerable-totalSupply}.\\n     */\\n    function totalSupply() public view virtual override returns (uint256) {\\n        return _allTokens.length;\\n    }\\n\\n    /**\\n     * @dev See {IERC721Enumerable-tokenByIndex}.\\n     */\\n    function tokenByIndex(uint256 index) public view virtual override returns (uint256) {\\n        require(index < ERC721Enumerable.totalSupply(), \\\"ERC721Enumerable: global index out of bounds\\\");\\n        return _allTokens[index];\\n    }\\n\\n    /**\\n     * @dev Hook that is called before any token transfer. This includes minting\\n     * and burning.\\n     *\\n     * Calling conditions:\\n     *\\n     * - When `from` and `to` are both non-zero, ``from``'s `tokenId` will be\\n     * transferred to `to`.\\n     * - When `from` is zero, `tokenId` will be minted for `to`.\\n     * - When `to` is zero, ``from``'s `tokenId` will be burned.\\n     * - `from` cannot be the zero address.\\n     * - `to` cannot be the zero address.\\n     *\\n     * To learn more about hooks, head to xref:ROOT:extending-contracts.adoc#using-hooks[Using Hooks].\\n     */\\n    function _beforeTokenTransfer(\\n        address from,\\n        address to,\\n        uint256 tokenId\\n    ) internal virtual override {\\n        super._beforeTokenTransfer(from, to, tokenId);\\n\\n        if (from == address(0)) {\\n            _addTokenToAllTokensEnumeration(tokenId);\\n        } else if (from != to) {\\n            _removeTokenFromOwnerEnumeration(from, tokenId);\\n        }\\n        if (to == address(0)) {\\n            _removeTokenFromAllTokensEnumeration(tokenId);\\n        } else if (to != from) {\\n            _addTokenToOwnerEnumeration(to, tokenId);\\n        }\\n    }\\n\\n    /**\\n     * @dev Private function to add a token to this extension's ownership-tracking data structures.\\n     * @param to address representing the new owner of the given token ID\\n     * @param tokenId uint256 ID of the token to be added to the tokens list of the given address\\n     */\\n    function _addTokenToOwnerEnumeration(address to, uint256 tokenId) private {\\n        uint256 length = ERC721.balanceOf(to);\\n        _ownedTokens[to][length] = tokenId;\\n        _ownedTokensIndex[tokenId] = length;\\n    }\\n\\n    /**\\n     * @dev Private function to add a token to this extension's token tracking data structures.\\n     * @param tokenId uint256 ID of the token to be added to the tokens list\\n     */\\n    function _addTokenToAllTokensEnumeration(uint256 tokenId) private {\\n        _allTokensIndex[tokenId] = _allTokens.length;\\n        _allTokens.push(tokenId);\\n    }\\n\\n    /**\\n     * @dev Private function to remove a token from this extension's ownership-tracking data structures. Note that\\n     * while the token is not assigned a new owner, the `_ownedTokensIndex` mapping is _not_ updated: this allows for\\n     * gas optimizations e.g. when performing a transfer operation (avoiding double writes).\\n     * This has O(1) time complexity, but alters the order of the _ownedTokens array.\\n     * @param from address representing the previous owner of the given token ID\\n     * @param tokenId uint256 ID of the token to be removed from the tokens list of the given address\\n     */\\n    function _removeTokenFromOwnerEnumeration(address from, uint256 tokenId) private {\\n        // To prevent a gap in from's tokens array, we store the last token in the index of the token to delete, and\\n        // then delete the last slot (swap and pop).\\n\\n        uint256 lastTokenIndex = ERC721.balanceOf(from) - 1;\\n        uint256 tokenIndex = _ownedTokensIndex[tokenId];\\n\\n        // When the token to delete is the last token, the swap operation is unnecessary\\n        if (tokenIndex != lastTokenIndex) {\\n            uint256 lastTokenId = _ownedTokens[from][lastTokenIndex];\\n\\n            _ownedTokens[from][tokenIndex] = lastTokenId; // Move the last token to the slot of the to-delete token\\n            _ownedTokensIndex[lastTokenId] = tokenIndex; // Update the moved token's index\\n        }\\n\\n        // This also deletes the contents at the last position of the array\\n        delete _ownedTokensIndex[tokenId];\\n        delete _ownedTokens[from][lastTokenIndex];\\n    }\\n\\n    /**\\n     * @dev Private function to remove a token from this extension's token tracking data structures.\\n     * This has O(1) time complexity, but alters the order of the _allTokens array.\\n     * @param tokenId uint256 ID of the token to be removed from the tokens list\\n     */\\n    function _removeTokenFromAllTokensEnumeration(uint256 tokenId) private {\\n        // To prevent a gap in the tokens array, we store the last token in the index of the token to delete, and\\n        // then delete the last slot (swap and pop).\\n\\n        uint256 lastTokenIndex = _allTokens.length - 1;\\n        uint256 tokenIndex = _allTokensIndex[tokenId];\\n\\n        // When the token to delete is the last token, the swap operation is unnecessary. However, since this occurs so\\n        // rarely (when the last minted token is burnt) that we still do the swap here to avoid the gas cost of adding\\n        // an 'if' statement (like in _removeTokenFromOwnerEnumeration)\\n        uint256 lastTokenId = _allTokens[lastTokenIndex];\\n\\n        _allTokens[tokenIndex] = lastTokenId; // Move the last token to the slot of the to-delete token\\n        _allTokensIndex[lastTokenId] = tokenIndex; // Update the moved token's index\\n\\n        // This also deletes the contents at the last position of the array\\n        delete _allTokensIndex[tokenId];\\n        _allTokens.pop();\\n    }\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/token/ERC721/ERC721.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"./IERC721.sol\\\";\\nimport \\\"./IERC721Receiver.sol\\\";\\nimport \\\"./extensions/IERC721Metadata.sol\\\";\\nimport \\\"../../utils/Address.sol\\\";\\nimport \\\"../../utils/Context.sol\\\";\\nimport \\\"../../utils/Strings.sol\\\";\\nimport \\\"../../utils/introspection/ERC165.sol\\\";\\n\\n/**\\n * @dev Implementation of https://eips.ethereum.org/EIPS/eip-721[ERC721] Non-Fungible Token Standard, including\\n * the Metadata extension, but not including the Enumerable extension, which is available separately as\\n * {ERC721Enumerable}.\\n */\\ncontract ERC721 is Context, ERC165, IERC721, IERC721Metadata {\\n    using Address for address;\\n    using Strings for uint256;\\n\\n    // Token name\\n    string private _name;\\n\\n    // Token symbol\\n    string private _symbol;\\n\\n    // Mapping from token ID to owner address\\n    mapping(uint256 => address) private _owners;\\n\\n    // Mapping owner address to token count\\n    mapping(address => uint256) private _balances;\\n\\n    // Mapping from token ID to approved address\\n    mapping(uint256 => address) private _tokenApprovals;\\n\\n    // Mapping from owner to operator approvals\\n    mapping(address => mapping(address => bool)) private _operatorApprovals;\\n\\n    /**\\n     * @dev Initializes the contract by setting a `name` and a `symbol` to the token collection.\\n     */\\n    constructor(string memory name_, string memory symbol_) {\\n        _name = name_;\\n        _symbol = symbol_;\\n    }\\n\\n    /**\\n     * @dev See {IERC165-supportsInterface}.\\n     */\\n    function supportsInterface(bytes4 interfaceId) public view virtual override(ERC165, IERC165) returns (bool) {\\n        return\\n            interfaceId == type(IERC721).interfaceId ||\\n            interfaceId == type(IERC721Metadata).interfaceId ||\\n            super.supportsInterface(interfaceId);\\n    }\\n\\n    /**\\n     * @dev See {IERC721-balanceOf}.\\n     */\\n    function balanceOf(address owner) public view virtual override returns (uint256) {\\n        require(owner != address(0), \\\"ERC721: balance query for the zero address\\\");\\n        return _balances[owner];\\n    }\\n\\n    /**\\n     * @dev See {IERC721-ownerOf}.\\n     */\\n    function ownerOf(uint256 tokenId) public view virtual override returns (address) {\\n        address owner = _owners[tokenId];\\n        require(owner != address(0), \\\"ERC721: owner query for nonexistent token\\\");\\n        return owner;\\n    }\\n\\n    /**\\n     * @dev See {IERC721Metadata-name}.\\n     */\\n    function name() public view virtual override returns (string memory) {\\n        return _name;\\n    }\\n\\n    /**\\n     * @dev See {IERC721Metadata-symbol}.\\n     */\\n    function symbol() public view virtual override returns (string memory) {\\n        return _symbol;\\n    }\\n\\n    /**\\n     * @dev See {IERC721Metadata-tokenURI}.\\n     */\\n    function tokenURI(uint256 tokenId) public view virtual override returns (string memory) {\\n        require(_exists(tokenId), \\\"ERC721Metadata: URI query for nonexistent token\\\");\\n\\n        string memory baseURI = _baseURI();\\n        return bytes(baseURI).length > 0 ? string(abi.encodePacked(baseURI, tokenId.toString())) : \\\"\\\";\\n    }\\n\\n    /**\\n     * @dev Base URI for computing {tokenURI}. If set, the resulting URI for each\\n     * token will be the concatenation of the `baseURI` and the `tokenId`. Empty\\n     * by default, can be overriden in child contracts.\\n     */\\n    function _baseURI() internal view virtual returns (string memory) {\\n        return \\\"\\\";\\n    }\\n\\n    /**\\n     * @dev See {IERC721-approve}.\\n     */\\n    function approve(address to, uint256 tokenId) public virtual override {\\n        address owner = ERC721.ownerOf(tokenId);\\n        require(to != owner, \\\"ERC721: approval to current owner\\\");\\n\\n        require(\\n            _msgSender() == owner || isApprovedForAll(owner, _msgSender()),\\n            \\\"ERC721: approve caller is not owner nor approved for all\\\"\\n        );\\n\\n        _approve(to, tokenId);\\n    }\\n\\n    /**\\n     * @dev See {IERC721-getApproved}.\\n     */\\n    function getApproved(uint256 tokenId) public view virtual override returns (address) {\\n        require(_exists(tokenId), \\\"ERC721: approved query for nonexistent token\\\");\\n\\n        return _tokenApprovals[tokenId];\\n    }\\n\\n    /**\\n     * @dev See {IERC721-setApprovalForAll}.\\n     */\\n    function setApprovalForAll(address operator, bool approved) public virtual override {\\n        require(operator != _msgSender(), \\\"ERC721: approve to caller\\\");\\n\\n        _operatorApprovals[_msgSender()][operator] = approved;\\n        emit ApprovalForAll(_msgSender(), operator, approved);\\n    }\\n\\n    /**\\n     * @dev See {IERC721-isApprovedForAll}.\\n     */\\n    function isApprovedForAll(address owner, address operator) public view virtual override returns (bool) {\\n        return _operatorApprovals[owner][operator];\\n    }\\n\\n    /**\\n     * @dev See {IERC721-transferFrom}.\\n     */\\n    function transferFrom(\\n        address from,\\n        address to,\\n        uint256 tokenId\\n    ) public virtual override {\\n        //solhint-disable-next-line max-line-length\\n        require(_isApprovedOrOwner(_msgSender(), tokenId), \\\"ERC721: transfer caller is not owner nor approved\\\");\\n\\n        _transfer(from, to, tokenId);\\n    }\\n\\n    /**\\n     * @dev See {IERC721-safeTransferFrom}.\\n     */\\n    function safeTransferFrom(\\n        address from,\\n        address to,\\n        uint256 tokenId\\n    ) public virtual override {\\n        safeTransferFrom(from, to, tokenId, \\\"\\\");\\n    }\\n\\n    /**\\n     * @dev See {IERC721-safeTransferFrom}.\\n     */\\n    function safeTransferFrom(\\n        address from,\\n        address to,\\n        uint256 tokenId,\\n        bytes memory _data\\n    ) public virtual override {\\n        require(_isApprovedOrOwner(_msgSender(), tokenId), \\\"ERC721: transfer caller is not owner nor approved\\\");\\n        _safeTransfer(from, to, tokenId, _data);\\n    }\\n\\n    /**\\n     * @dev Safely transfers `tokenId` token from `from` to `to`, checking first that contract recipients\\n     * are aware of the ERC721 protocol to prevent tokens from being forever locked.\\n     *\\n     * `_data` is additional data, it has no specified format and it is sent in call to `to`.\\n     *\\n     * This internal function is equivalent to {safeTransferFrom}, and can be used to e.g.\\n     * implement alternative mechanisms to perform token transfer, such as signature-based.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` cannot be the zero address.\\n     * - `to` cannot be the zero address.\\n     * - `tokenId` token must exist and be owned by `from`.\\n     * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function _safeTransfer(\\n        address from,\\n        address to,\\n        uint256 tokenId,\\n        bytes memory _data\\n    ) internal virtual {\\n        _transfer(from, to, tokenId);\\n        require(_checkOnERC721Received(from, to, tokenId, _data), \\\"ERC721: transfer to non ERC721Receiver implementer\\\");\\n    }\\n\\n    /**\\n     * @dev Returns whether `tokenId` exists.\\n     *\\n     * Tokens can be managed by their owner or approved accounts via {approve} or {setApprovalForAll}.\\n     *\\n     * Tokens start existing when they are minted (`_mint`),\\n     * and stop existing when they are burned (`_burn`).\\n     */\\n    function _exists(uint256 tokenId) internal view virtual returns (bool) {\\n        return _owners[tokenId] != address(0);\\n    }\\n\\n    /**\\n     * @dev Returns whether `spender` is allowed to manage `tokenId`.\\n     *\\n     * Requirements:\\n     *\\n     * - `tokenId` must exist.\\n     */\\n    function _isApprovedOrOwner(address spender, uint256 tokenId) internal view virtual returns (bool) {\\n        require(_exists(tokenId), \\\"ERC721: operator query for nonexistent token\\\");\\n        address owner = ERC721.ownerOf(tokenId);\\n        return (spender == owner || getApproved(tokenId) == spender || isApprovedForAll(owner, spender));\\n    }\\n\\n    /**\\n     * @dev Safely mints `tokenId` and transfers it to `to`.\\n     *\\n     * Requirements:\\n     *\\n     * - `tokenId` must not exist.\\n     * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function _safeMint(address to, uint256 tokenId) internal virtual {\\n        _safeMint(to, tokenId, \\\"\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-ERC721-_safeMint-address-uint256-}[`_safeMint`], with an additional `data` parameter which is\\n     * forwarded in {IERC721Receiver-onERC721Received} to contract recipients.\\n     */\\n    function _safeMint(\\n        address to,\\n        uint256 tokenId,\\n        bytes memory _data\\n    ) internal virtual {\\n        _mint(to, tokenId);\\n        require(\\n            _checkOnERC721Received(address(0), to, tokenId, _data),\\n            \\\"ERC721: transfer to non ERC721Receiver implementer\\\"\\n        );\\n    }\\n\\n    /**\\n     * @dev Mints `tokenId` and transfers it to `to`.\\n     *\\n     * WARNING: Usage of this method is discouraged, use {_safeMint} whenever possible\\n     *\\n     * Requirements:\\n     *\\n     * - `tokenId` must not exist.\\n     * - `to` cannot be the zero address.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function _mint(address to, uint256 tokenId) internal virtual {\\n        require(to != address(0), \\\"ERC721: mint to the zero address\\\");\\n        require(!_exists(tokenId), \\\"ERC721: token already minted\\\");\\n\\n        _beforeTokenTransfer(address(0), to, tokenId);\\n\\n        _balances[to] += 1;\\n        _owners[tokenId] = to;\\n\\n        emit Transfer(address(0), to, tokenId);\\n    }\\n\\n    /**\\n     * @dev Destroys `tokenId`.\\n     * The approval is cleared when the token is burned.\\n     *\\n     * Requirements:\\n     *\\n     * - `tokenId` must exist.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function _burn(uint256 tokenId) internal virtual {\\n        address owner = ERC721.ownerOf(tokenId);\\n\\n        _beforeTokenTransfer(owner, address(0), tokenId);\\n\\n        // Clear approvals\\n        _approve(address(0), tokenId);\\n\\n        _balances[owner] -= 1;\\n        delete _owners[tokenId];\\n\\n        emit Transfer(owner, address(0), tokenId);\\n    }\\n\\n    /**\\n     * @dev Transfers `tokenId` from `from` to `to`.\\n     *  As opposed to {transferFrom}, this imposes no restrictions on msg.sender.\\n     *\\n     * Requirements:\\n     *\\n     * - `to` cannot be the zero address.\\n     * - `tokenId` token must be owned by `from`.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function _transfer(\\n        address from,\\n        address to,\\n        uint256 tokenId\\n    ) internal virtual {\\n        require(ERC721.ownerOf(tokenId) == from, \\\"ERC721: transfer of token that is not own\\\");\\n        require(to != address(0), \\\"ERC721: transfer to the zero address\\\");\\n\\n        _beforeTokenTransfer(from, to, tokenId);\\n\\n        // Clear approvals from the previous owner\\n        _approve(address(0), tokenId);\\n\\n        _balances[from] -= 1;\\n        _balances[to] += 1;\\n        _owners[tokenId] = to;\\n\\n        emit Transfer(from, to, tokenId);\\n    }\\n\\n    /**\\n     * @dev Approve `to` to operate on `tokenId`\\n     *\\n     * Emits a {Approval} event.\\n     */\\n    function _approve(address to, uint256 tokenId) internal virtual {\\n        _tokenApprovals[tokenId] = to;\\n        emit Approval(ERC721.ownerOf(tokenId), to, tokenId);\\n    }\\n\\n    /**\\n     * @dev Internal function to invoke {IERC721Receiver-onERC721Received} on a target address.\\n     * The call is not executed if the target address is not a contract.\\n     *\\n     * @param from address representing the previous owner of the given token ID\\n     * @param to target address that will receive the tokens\\n     * @param tokenId uint256 ID of the token to be transferred\\n     * @param _data bytes optional data to send along with the call\\n     * @return bool whether the call correctly returned the expected magic value\\n     */\\n    function _checkOnERC721Received(\\n        address from,\\n        address to,\\n        uint256 tokenId,\\n        bytes memory _data\\n    ) private returns (bool) {\\n        if (to.isContract()) {\\n            try IERC721Receiver(to).onERC721Received(_msgSender(), from, tokenId, _data) returns (bytes4 retval) {\\n                return retval == IERC721Receiver.onERC721Received.selector;\\n            } catch (bytes memory reason) {\\n                if (reason.length == 0) {\\n                    revert(\\\"ERC721: transfer to non ERC721Receiver implementer\\\");\\n                } else {\\n                    assembly {\\n                        revert(add(32, reason), mload(reason))\\n                    }\\n                }\\n            }\\n        } else {\\n            return true;\\n        }\\n    }\\n\\n    /**\\n     * @dev Hook that is called before any token transfer. This includes minting\\n     * and burning.\\n     *\\n     * Calling conditions:\\n     *\\n     * - When `from` and `to` are both non-zero, ``from``'s `tokenId` will be\\n     * transferred to `to`.\\n     * - When `from` is zero, `tokenId` will be minted for `to`.\\n     * - When `to` is zero, ``from``'s `tokenId` will be burned.\\n     * - `from` and `to` are never both zero.\\n     *\\n     * To learn more about hooks, head to xref:ROOT:extending-contracts.adoc#using-hooks[Using Hooks].\\n     */\\n    function _beforeTokenTransfer(\\n        address from,\\n        address to,\\n        uint256 tokenId\\n    ) internal virtual {}\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/token/ERC721/extensions/IERC721Enumerable.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../IERC721.sol\\\";\\n\\n/**\\n * @title ERC-721 Non-Fungible Token Standard, optional enumeration extension\\n * @dev See https://eips.ethereum.org/EIPS/eip-721\\n */\\ninterface IERC721Enumerable is IERC721 {\\n    /**\\n     * @dev Returns the total amount of tokens stored by the contract.\\n     */\\n    function totalSupply() external view returns (uint256);\\n\\n    /**\\n     * @dev Returns a token ID owned by `owner` at a given `index` of its token list.\\n     * Use along with {balanceOf} to enumerate all of ``owner``'s tokens.\\n     */\\n    function tokenOfOwnerByIndex(address owner, uint256 index) external view returns (uint256 tokenId);\\n\\n    /**\\n     * @dev Returns a token ID at a given `index` of all the tokens stored by the contract.\\n     * Use along with {totalSupply} to enumerate all tokens.\\n     */\\n    function tokenByIndex(uint256 index) external view returns (uint256);\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/utils/introspection/ERC165.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"./IERC165.sol\\\";\\n\\n/**\\n * @dev Implementation of the {IERC165} interface.\\n *\\n * Contracts that want to implement ERC165 should inherit from this contract and override {supportsInterface} to check\\n * for the additional interface id that will be supported. For example:\\n *\\n * ```solidity\\n * function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {\\n *     return interfaceId == type(MyInterface).interfaceId || super.supportsInterface(interfaceId);\\n * }\\n * ```\\n *\\n * Alternatively, {ERC165Storage} provides an easier to use but more expensive implementation.\\n */\\nabstract contract ERC165 is IERC165 {\\n    /**\\n     * @dev See {IERC165-supportsInterface}.\\n     */\\n    function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {\\n        return interfaceId == type(IERC165).interfaceId;\\n    }\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/utils/Strings.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev String operations.\\n */\\nlibrary Strings {\\n    bytes16 private constant _HEX_SYMBOLS = \\\"0123456789abcdef\\\";\\n\\n    /**\\n     * @dev Converts a `uint256` to its ASCII `string` decimal representation.\\n     */\\n    function toString(uint256 value) internal pure returns (string memory) {\\n        // Inspired by OraclizeAPI's implementation - MIT licence\\n        // https://github.com/oraclize/ethereum-api/blob/b42146b063c7d6ee1358846c198246239e9360e8/oraclizeAPI_0.4.25.sol\\n\\n        if (value == 0) {\\n            return \\\"0\\\";\\n        }\\n        uint256 temp = value;\\n        uint256 digits;\\n        while (temp != 0) {\\n            digits++;\\n            temp /= 10;\\n        }\\n        bytes memory buffer = new bytes(digits);\\n        while (value != 0) {\\n            digits -= 1;\\n            buffer[digits] = bytes1(uint8(48 + uint256(value % 10)));\\n            value /= 10;\\n        }\\n        return string(buffer);\\n    }\\n\\n    /**\\n     * @dev Converts a `uint256` to its ASCII `string` hexadecimal representation.\\n     */\\n    function toHexString(uint256 value) internal pure returns (string memory) {\\n        if (value == 0) {\\n            return \\\"0x00\\\";\\n        }\\n        uint256 temp = value;\\n        uint256 length = 0;\\n        while (temp != 0) {\\n            length++;\\n            temp >>= 8;\\n        }\\n        return toHexString(value, length);\\n    }\\n\\n    /**\\n     * @dev Converts a `uint256` to its ASCII `string` hexadecimal representation with fixed length.\\n     */\\n    function toHexString(uint256 value, uint256 length) internal pure returns (string memory) {\\n        bytes memory buffer = new bytes(2 * length + 2);\\n        buffer[0] = \\\"0\\\";\\n        buffer[1] = \\\"x\\\";\\n        for (uint256 i = 2 * length + 1; i > 1; --i) {\\n            buffer[i] = _HEX_SYMBOLS[value & 0xf];\\n            value >>= 4;\\n        }\\n        require(value == 0, \\\"Strings: hex length insufficient\\\");\\n        return string(buffer);\\n    }\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/utils/Context.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Provides information about the current execution context, including the\\n * sender of the transaction and its data. While these are generally available\\n * via msg.sender and msg.data, they should not be accessed in such a direct\\n * manner, since when dealing with meta-transactions the account sending and\\n * paying for execution may not be the actual sender (as far as an application\\n * is concerned).\\n *\\n * This contract is only required for intermediate, library-like contracts.\\n */\\nabstract contract Context {\\n    function _msgSender() internal view virtual returns (address) {\\n        return msg.sender;\\n    }\\n\\n    function _msgData() internal view virtual returns (bytes calldata) {\\n        return msg.data;\\n    }\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/utils/Address.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Collection of functions related to the address type\\n */\\nlibrary Address {\\n    /**\\n     * @dev Returns true if `account` is a contract.\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * It is unsafe to assume that an address for which this function returns\\n     * false is an externally-owned account (EOA) and not a contract.\\n     *\\n     * Among others, `isContract` will return false for the following\\n     * types of addresses:\\n     *\\n     *  - an externally-owned account\\n     *  - a contract in construction\\n     *  - an address where a contract will be created\\n     *  - an address where a contract lived, but was destroyed\\n     * ====\\n     */\\n    function isContract(address account) internal view returns (bool) {\\n        // This method relies on extcodesize, which returns 0 for contracts in\\n        // construction, since the code is only stored at the end of the\\n        // constructor execution.\\n\\n        uint256 size;\\n        assembly {\\n            size := extcodesize(account)\\n        }\\n        return size > 0;\\n    }\\n\\n    /**\\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\\n     * `recipient`, forwarding all available gas and reverting on errors.\\n     *\\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\\n     * imposed by `transfer`, making them unable to receive funds via\\n     * `transfer`. {sendValue} removes this limitation.\\n     *\\n     * https://diligence.consensys.net/posts/2019/09/stop-using-soliditys-transfer-now/[Learn more].\\n     *\\n     * IMPORTANT: because control is transferred to `recipient`, care must be\\n     * taken to not create reentrancy vulnerabilities. Consider using\\n     * {ReentrancyGuard} or the\\n     * https://solidity.readthedocs.io/en/v0.5.11/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\\n     */\\n    function sendValue(address payable recipient, uint256 amount) internal {\\n        require(address(this).balance >= amount, \\\"Address: insufficient balance\\\");\\n\\n        (bool success, ) = recipient.call{value: amount}(\\\"\\\");\\n        require(success, \\\"Address: unable to send value, recipient may have reverted\\\");\\n    }\\n\\n    /**\\n     * @dev Performs a Solidity function call using a low level `call`. A\\n     * plain `call` is an unsafe replacement for a function call: use this\\n     * function instead.\\n     *\\n     * If `target` reverts with a revert reason, it is bubbled up by this\\n     * function (like regular Solidity function calls).\\n     *\\n     * Returns the raw returned data. To convert to the expected return value,\\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\\n     *\\n     * Requirements:\\n     *\\n     * - `target` must be a contract.\\n     * - calling `target` with `data` must not revert.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionCall(target, data, \\\"Address: low-level call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\\n     * `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, 0, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but also transferring `value` wei to `target`.\\n     *\\n     * Requirements:\\n     *\\n     * - the calling contract must have an ETH balance of at least `value`.\\n     * - the called Solidity function must be `payable`.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, value, \\\"Address: low-level call with value failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\\n     * with `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        require(address(this).balance >= value, \\\"Address: insufficient balance for call\\\");\\n        require(isContract(target), \\\"Address: call to non-contract\\\");\\n\\n        (bool success, bytes memory returndata) = target.call{value: value}(data);\\n        return verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\\n        return functionStaticCall(target, data, \\\"Address: low-level static call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal view returns (bytes memory) {\\n        require(isContract(target), \\\"Address: static call to non-contract\\\");\\n\\n        (bool success, bytes memory returndata) = target.staticcall(data);\\n        return verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionDelegateCall(target, data, \\\"Address: low-level delegate call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        require(isContract(target), \\\"Address: delegate call to non-contract\\\");\\n\\n        (bool success, bytes memory returndata) = target.delegatecall(data);\\n        return verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Tool to verifies that a low level call was successful, and revert if it wasn't, either by bubbling the\\n     * revert reason using the provided one.\\n     *\\n     * _Available since v4.3._\\n     */\\n    function verifyCallResult(\\n        bool success,\\n        bytes memory returndata,\\n        string memory errorMessage\\n    ) internal pure returns (bytes memory) {\\n        if (success) {\\n            return returndata;\\n        } else {\\n            // Look for revert reason and bubble it up if present\\n            if (returndata.length > 0) {\\n                // The easiest way to bubble the revert reason is using memory via assembly\\n\\n                assembly {\\n                    let returndata_size := mload(returndata)\\n                    revert(add(32, returndata), returndata_size)\\n                }\\n            } else {\\n                revert(errorMessage);\\n            }\\n        }\\n    }\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/token/ERC721/extensions/IERC721Metadata.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../IERC721.sol\\\";\\n\\n/**\\n * @title ERC-721 Non-Fungible Token Standard, optional metadata extension\\n * @dev See https://eips.ethereum.org/EIPS/eip-721\\n */\\ninterface IERC721Metadata is IERC721 {\\n    /**\\n     * @dev Returns the token collection name.\\n     */\\n    function name() external view returns (string memory);\\n\\n    /**\\n     * @dev Returns the token collection symbol.\\n     */\\n    function symbol() external view returns (string memory);\\n\\n    /**\\n     * @dev Returns the Uniform Resource Identifier (URI) for `tokenId` token.\\n     */\\n    function tokenURI(uint256 tokenId) external view returns (string memory);\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/token/ERC721/IERC721Receiver.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @title ERC721 token receiver interface\\n * @dev Interface for any contract that wants to support safeTransfers\\n * from ERC721 asset contracts.\\n */\\ninterface IERC721Receiver {\\n    /**\\n     * @dev Whenever an {IERC721} `tokenId` token is transferred to this contract via {IERC721-safeTransferFrom}\\n     * by `operator` from `from`, this function is called.\\n     *\\n     * It must return its Solidity selector to confirm the token transfer.\\n     * If any other value is returned or the interface is not implemented by the recipient, the transfer will be reverted.\\n     *\\n     * The selector can be obtained in Solidity with `IERC721.onERC721Received.selector`.\\n     */\\n    function onERC721Received(\\n        address operator,\\n        address from,\\n        uint256 tokenId,\\n        bytes calldata data\\n    ) external returns (bytes4);\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/token/ERC721/IERC721.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../../utils/introspection/IERC165.sol\\\";\\n\\n/**\\n * @dev Required interface of an ERC721 compliant contract.\\n */\\ninterface IERC721 is IERC165 {\\n    /**\\n     * @dev Emitted when `tokenId` token is transferred from `from` to `to`.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 indexed tokenId);\\n\\n    /**\\n     * @dev Emitted when `owner` enables `approved` to manage the `tokenId` token.\\n     */\\n    event Approval(address indexed owner, address indexed approved, uint256 indexed tokenId);\\n\\n    /**\\n     * @dev Emitted when `owner` enables or disables (`approved`) `operator` to manage all of its assets.\\n     */\\n    event ApprovalForAll(address indexed owner, address indexed operator, bool approved);\\n\\n    /**\\n     * @dev Returns the number of tokens in ``owner``'s account.\\n     */\\n    function balanceOf(address owner) external view returns (uint256 balance);\\n\\n    /**\\n     * @dev Returns the owner of the `tokenId` token.\\n     *\\n     * Requirements:\\n     *\\n     * - `tokenId` must exist.\\n     */\\n    function ownerOf(uint256 tokenId) external view returns (address owner);\\n\\n    /**\\n     * @dev Safely transfers `tokenId` token from `from` to `to`, checking first that contract recipients\\n     * are aware of the ERC721 protocol to prevent tokens from being forever locked.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` cannot be the zero address.\\n     * - `to` cannot be the zero address.\\n     * - `tokenId` token must exist and be owned by `from`.\\n     * - If the caller is not `from`, it must be have been allowed to move this token by either {approve} or {setApprovalForAll}.\\n     * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function safeTransferFrom(\\n        address from,\\n        address to,\\n        uint256 tokenId\\n    ) external;\\n\\n    /**\\n     * @dev Transfers `tokenId` token from `from` to `to`.\\n     *\\n     * WARNING: Usage of this method is discouraged, use {safeTransferFrom} whenever possible.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` cannot be the zero address.\\n     * - `to` cannot be the zero address.\\n     * - `tokenId` token must be owned by `from`.\\n     * - If the caller is not `from`, it must be approved to move this token by either {approve} or {setApprovalForAll}.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(\\n        address from,\\n        address to,\\n        uint256 tokenId\\n    ) external;\\n\\n    /**\\n     * @dev Gives permission to `to` to transfer `tokenId` token to another account.\\n     * The approval is cleared when the token is transferred.\\n     *\\n     * Only a single account can be approved at a time, so approving the zero address clears previous approvals.\\n     *\\n     * Requirements:\\n     *\\n     * - The caller must own the token or be an approved operator.\\n     * - `tokenId` must exist.\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address to, uint256 tokenId) external;\\n\\n    /**\\n     * @dev Returns the account approved for `tokenId` token.\\n     *\\n     * Requirements:\\n     *\\n     * - `tokenId` must exist.\\n     */\\n    function getApproved(uint256 tokenId) external view returns (address operator);\\n\\n    /**\\n     * @dev Approve or remove `operator` as an operator for the caller.\\n     * Operators can call {transferFrom} or {safeTransferFrom} for any token owned by the caller.\\n     *\\n     * Requirements:\\n     *\\n     * - The `operator` cannot be the caller.\\n     *\\n     * Emits an {ApprovalForAll} event.\\n     */\\n    function setApprovalForAll(address operator, bool _approved) external;\\n\\n    /**\\n     * @dev Returns if the `operator` is allowed to manage all of the assets of `owner`.\\n     *\\n     * See {setApprovalForAll}\\n     */\\n    function isApprovedForAll(address owner, address operator) external view returns (bool);\\n\\n    /**\\n     * @dev Safely transfers `tokenId` token from `from` to `to`.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` cannot be the zero address.\\n     * - `to` cannot be the zero address.\\n     * - `tokenId` token must exist and be owned by `from`.\\n     * - If the caller is not `from`, it must be approved to move this token by either {approve} or {setApprovalForAll}.\\n     * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function safeTransferFrom(\\n        address from,\\n        address to,\\n        uint256 tokenId,\\n        bytes calldata data\\n    ) external;\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/utils/introspection/IERC165.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC165 standard, as defined in the\\n * https://eips.ethereum.org/EIPS/eip-165[EIP].\\n *\\n * Implementers can declare support of contract interfaces, which can then be\\n * queried by others ({ERC165Checker}).\\n *\\n * For an implementation, see {ERC165}.\\n */\\ninterface IERC165 {\\n    /**\\n     * @dev Returns true if this contract implements the interface defined by\\n     * `interfaceId`. See the corresponding\\n     * https://eips.ethereum.org/EIPS/eip-165#how-interfaces-are-identified[EIP section]\\n     * to learn more about how these ids are created.\\n     *\\n     * This function call must use less than 30 000 gas.\\n     */\\n    function supportsInterface(bytes4 interfaceId) external view returns (bool);\\n}\\n\"\r\n    }\r\n  },\r\n  \"settings\": {\r\n    \"optimizer\": {\r\n      \"enabled\": true,\r\n      \"runs\": 100\r\n    },\r\n    \"outputSelection\": {\r\n      \"*\": {\r\n        \"*\": [\r\n          \"evm.bytecode\",\r\n          \"evm.deployedBytecode\",\r\n          \"devdoc\",\r\n          \"userdoc\",\r\n          \"metadata\",\r\n          \"abi\"\r\n        ]\r\n      }\r\n    }\r\n  }\r\n}}","ABI":"[{\"inputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"approved\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"Approval\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"operator\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"bool\",\"name\":\"approved\",\"type\":\"bool\"}],\"name\":\"ApprovalForAll\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"Transfer\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"SandAddress\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"approve\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"burnAll\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"burned\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"directMint\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"flipSaleState\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"getApproved\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"operator\",\"type\":\"address\"}],\"name\":\"isApprovedForAll\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint32[]\",\"name\":\"ids\",\"type\":\"uint32[]\"}],\"name\":\"mintMany\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"mintToken\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"name\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"ownerOf\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"safeTransferFrom\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"},{\"internalType\":\"bytes\",\"name\":\"_data\",\"type\":\"bytes\"}],\"name\":\"safeTransferFrom\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"saleIsActive\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"operator\",\"type\":\"address\"},{\"internalType\":\"bool\",\"name\":\"approved\",\"type\":\"bool\"}],\"name\":\"setApprovalForAll\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes4\",\"name\":\"interfaceId\",\"type\":\"bytes4\"}],\"name\":\"supportsInterface\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"symbol\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"index\",\"type\":\"uint256\"}],\"name\":\"tokenByIndex\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"index\",\"type\":\"uint256\"}],\"name\":\"tokenOfOwnerByIndex\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"tokenURI\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalSupply\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"transferFrom\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}]","ContractName":"SandAvatars","CompilerVersion":"v0.8.7+commit.e28d00a7","OptimizationUsed":"1","Runs":"100","ConstructorArguments":"","EVMVersion":"Default","Library":"","LicenseType":"","Proxy":"0","Implementation":"","SwarmSource":""}]}