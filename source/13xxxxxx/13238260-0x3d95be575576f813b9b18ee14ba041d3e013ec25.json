{"status":"1","message":"OK","result":[{"SourceCode":"{{\r\n  \"language\": \"Solidity\",\r\n  \"sources\": {\r\n    \"contracts/LP/L1LiquidityPool.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// @unsupported: ovm\\npragma solidity 0.7.6;\\npragma experimental ABIEncoderV2;\\n\\nimport \\\"./interfaces/iL2LiquidityPool.sol\\\";\\nimport \\\"../libraries/OVM_CrossDomainEnabledFast.sol\\\";\\n\\n/* External Imports */\\nimport '@openzeppelin/contracts/math/SafeMath.sol';\\nimport '@openzeppelin/contracts/token/ERC20/SafeERC20.sol';\\nimport \\\"@openzeppelin/contracts-upgradeable/utils/ReentrancyGuardUpgradeable.sol\\\";\\nimport \\\"@openzeppelin/contracts-upgradeable/utils/PausableUpgradeable.sol\\\";\\n\\n/**\\n * @dev An L1 LiquidityPool implementation\\n */\\ncontract L1LiquidityPool is OVM_CrossDomainEnabledFast, ReentrancyGuardUpgradeable, PausableUpgradeable {\\n    using SafeMath for uint256;\\n    using SafeERC20 for IERC20;\\n\\n    /**************\\n     *   Struct   *\\n     **************/\\n    // Info of each user.\\n    struct UserInfo {\\n        uint256 amount; // How many LP tokens the user has provided.\\n        uint256 rewardDebt; // Reward debt. See explanation below.\\n        uint256 pendingReward; // Pending reward\\n        //\\n        // We do some fancy math here. Basically, any point in time, the amount of rewards\\n        // entitled to a user but is pending to be distributed is:\\n        //\\n        //   Update Reward Per Share:\\n        //   accUserRewardPerShare = accUserRewardPerShare + (accUserReward - lastAccUserReward) / userDepositAmount\\n        //\\n        //  LP Provider:\\n        //      Deposit:\\n        //          Case 1 (new user):\\n        //              Update Reward Per Share();\\n        //              Calculate user.rewardDebt = amount * accUserRewardPerShare;\\n        //          Case 2 (user who has already deposited add more funds):\\n        //              Update Reward Per Share();\\n        //              Calculate user.pendingReward = amount * accUserRewardPerShare - user.rewardDebt;\\n        //              Calculate user.rewardDebt = (amount + new_amount) * accUserRewardPerShare;\\n        //\\n        //      Withdraw\\n        //          Update Reward Per Share();\\n        //          Calculate user.pendingReward = amount * accUserRewardPerShare - user.rewardDebt;\\n        //          Calculate user.rewardDebt = (amount - withdraw_amount) * accUserRewardPerShare;\\n    }\\n    // Info of each pool.\\n    struct PoolInfo {\\n        address l1TokenAddress; // Address of token contract.\\n        address l2TokenAddress; // Address of toekn contract.\\n\\n        // balance\\n        uint256 userDepositAmount; // user deposit amount;\\n\\n        // user rewards\\n        uint256 lastAccUserReward; // Last accumulated user reward\\n        uint256 accUserReward; // Accumulated user reward.\\n        uint256 accUserRewardPerShare; // Accumulated user rewards per share, times 1e12. See below.\\n\\n        // owner rewards\\n        uint256 accOwnerReward; // Accumulated owner reward.\\n\\n        // start time -- used to calculate APR\\n        uint256 startTime;\\n    }\\n\\n    /*************\\n     * Variables *\\n     *************/\\n\\n    // mapping L1 and L2 token address to poolInfo\\n    mapping(address => PoolInfo) public poolInfo;\\n    // Info of each user that stakes tokens.\\n    mapping(address => mapping(address => UserInfo)) public userInfo;\\n\\n    address public owner;\\n    address public L2LiquidityPoolAddress;\\n    uint256 public userRewardFeeRate;\\n    uint256 public ownerRewardFeeRate;\\n    // Default gas value which can be overridden if more complex logic runs on L2.\\n    uint32 public SETTLEMENT_L2_GAS;\\n    uint256 public SAFE_GAS_STIPEND;\\n    // cdm address\\n    address public l1CrossDomainMessenger;\\n\\n    /********************\\n     *       Events     *\\n     ********************/\\n\\n    event AddLiquidity(\\n        address sender,\\n        uint256 amount,\\n        address tokenAddress\\n    );\\n\\n    event OwnerRecoverFee(\\n        address sender,\\n        address receiver,\\n        uint256 amount,\\n        address tokenAddress\\n    );\\n\\n    event ClientDepositL1(\\n        address sender,\\n        uint256 receivedAmount,\\n        address tokenAddress\\n    );\\n\\n    event ClientPayL1(\\n        address sender,\\n        uint256 amount,\\n        uint256 userRewardFee,\\n        uint256 ownerRewardFee,\\n        uint256 totalFee,\\n        address tokenAddress\\n    );\\n\\n    event ClientPayL1Settlement(\\n        address sender,\\n        uint256 amount,\\n        uint256 userRewardFee,\\n        uint256 ownerRewardFee,\\n        uint256 totalFee,\\n        address tokenAddress\\n    );\\n\\n    event WithdrawLiquidity(\\n        address sender,\\n        address receiver,\\n        uint256 amount,\\n        address tokenAddress\\n    );\\n\\n    event WithdrawReward(\\n        address sender,\\n        address receiver,\\n        uint256 amount,\\n        address tokenAddress\\n    );\\n\\n    /********************\\n     *    Constructor   *\\n     ********************/\\n\\n    constructor()\\n        OVM_CrossDomainEnabledFast(address(0), address(0))\\n    {}\\n\\n    /**********************\\n     * Function Modifiers *\\n     **********************/\\n\\n    modifier onlyOwner() {\\n        require(msg.sender == owner || owner == address(0), 'caller is not the owner');\\n        _;\\n    }\\n\\n    modifier onlyNotInitialized() {\\n        require(address(L2LiquidityPoolAddress) == address(0), \\\"Contract has been initialized\\\");\\n        _;\\n    }\\n\\n    modifier onlyInitialized() {\\n        require(address(L2LiquidityPoolAddress) != address(0), \\\"Contract has not yet been initialized\\\");\\n        _;\\n    }\\n\\n\\n    /********************\\n     * Public Functions *\\n     ********************/\\n\\n    /**\\n     * @dev transfer ownership\\n     *\\n     * @param _newOwner new owner of this contract\\n     */\\n    function transferOwnership(\\n        address _newOwner\\n    )\\n        public\\n        onlyOwner()\\n    {\\n        owner = _newOwner;\\n    }\\n\\n    /**\\n     * @dev Initialize this contract.\\n     *\\n     * @param _l1CrossDomainMessenger L1 Messenger address being used for sending the cross-chain message.\\n     * @param _l1CrossDomainMessengerFast L1 Messenger address being used for relaying cross-chain messages quickly.\\n     * @param _L2LiquidityPoolAddress Address of the corresponding L2 LP deployed to the L2 chain\\n     */\\n    function initialize(\\n        address _l1CrossDomainMessenger,\\n        address _l1CrossDomainMessengerFast,\\n        address _L2LiquidityPoolAddress\\n    )\\n        public\\n        onlyOwner()\\n        onlyNotInitialized()\\n        initializer()\\n    {\\n        require(_l1CrossDomainMessenger != address(0) && _l1CrossDomainMessengerFast != address(0) && _L2LiquidityPoolAddress != address(0), \\\"zero address not allowed\\\");\\n        senderMessenger = _l1CrossDomainMessenger;\\n        relayerMessenger = _l1CrossDomainMessengerFast;\\n        L2LiquidityPoolAddress = _L2LiquidityPoolAddress;\\n        owner = msg.sender;\\n        configureFee(35, 15);\\n        configureGas(1400000, 2300);\\n\\n        __Context_init_unchained();\\n        __Pausable_init_unchained();\\n        __ReentrancyGuard_init_unchained();\\n\\n    }\\n\\n    /**\\n     * @dev Configure fee of this contract.\\n     *\\n     * @param _userRewardFeeRate fee rate that users get\\n     * @param _ownerRewardFeeRate fee rate that contract owner gets\\n     */\\n    function configureFee(\\n        uint256 _userRewardFeeRate,\\n        uint256 _ownerRewardFeeRate\\n    )\\n        public\\n        onlyOwner()\\n        onlyInitialized()\\n    {\\n        userRewardFeeRate = _userRewardFeeRate;\\n        ownerRewardFeeRate = _ownerRewardFeeRate;\\n    }\\n\\n    /**\\n     * @dev Configure gas.\\n     *\\n     * @param _l2GasFee default finalized deposit L2 Gas\\n     * @param _safeGas safe gas stipened\\n     */\\n    function configureGas(\\n        uint32 _l2GasFee,\\n        uint256 _safeGas\\n    )\\n        public\\n        onlyOwner()\\n        onlyInitialized()\\n    {\\n        SETTLEMENT_L2_GAS = _l2GasFee;\\n        SAFE_GAS_STIPEND = _safeGas;\\n    }\\n\\n    /***\\n     * @dev Add the new token pair to the pool\\n     * DO NOT add the same LP token more than once. Rewards will be messed up if you do.\\n     *\\n     * @param _l1TokenAddress\\n     * @param _l2TokenAddress\\n     *\\n     */\\n    function registerPool(\\n        address _l1TokenAddress,\\n        address _l2TokenAddress\\n    )\\n        public\\n        onlyOwner()\\n    {\\n        require(_l1TokenAddress != _l2TokenAddress, \\\"l1 and l2 token addresses cannot be same\\\");\\n        // use with caution, can register only once\\n        PoolInfo storage pool = poolInfo[_l1TokenAddress];\\n        // l2 token address equal to zero, then pair is not registered.\\n        require(pool.l2TokenAddress == address(0), \\\"Token Address Already Registered\\\");\\n        poolInfo[_l1TokenAddress] =\\n            PoolInfo({\\n                l1TokenAddress: _l1TokenAddress,\\n                l2TokenAddress: _l2TokenAddress,\\n                userDepositAmount: 0,\\n                lastAccUserReward: 0,\\n                accUserReward: 0,\\n                accUserRewardPerShare: 0,\\n                accOwnerReward: 0,\\n                startTime: block.timestamp\\n            });\\n    }\\n\\n    /**\\n     * Update the user reward per share\\n     * @param _tokenAddress Address of the target token.\\n     */\\n    function updateUserRewardPerShare(\\n        address _tokenAddress\\n    )\\n        public\\n    {\\n        PoolInfo storage pool = poolInfo[_tokenAddress];\\n        if (pool.lastAccUserReward < pool.accUserReward) {\\n            uint256 accUserRewardDiff = (pool.accUserReward.sub(pool.lastAccUserReward));\\n            if (pool.userDepositAmount != 0) {\\n                pool.accUserRewardPerShare = pool.accUserRewardPerShare.add(\\n                    accUserRewardDiff.mul(1e12).div(pool.userDepositAmount)\\n                );\\n            }\\n            pool.lastAccUserReward = pool.accUserReward;\\n        }\\n    }\\n\\n    /**\\n     * Liquididity providers add liquidity\\n     * @param _amount liquidity amount that users want to deposit.\\n     * @param _tokenAddress address of the liquidity token.\\n     */\\n     function addLiquidity(\\n        uint256 _amount,\\n        address _tokenAddress\\n    )\\n        external\\n        payable\\n        nonReentrant\\n        whenNotPaused\\n    {\\n        require(msg.value != 0 || _tokenAddress != address(0), \\\"Amount Incorrect\\\");\\n        // check whether user sends ETH or ERC20\\n        if (msg.value != 0) {\\n            // override the _amount and token address\\n            _amount = msg.value;\\n            _tokenAddress = address(0);\\n        }\\n\\n        PoolInfo storage pool = poolInfo[_tokenAddress];\\n        UserInfo storage user = userInfo[_tokenAddress][msg.sender];\\n\\n        require(pool.l2TokenAddress != address(0), \\\"Token Address Not Register\\\");\\n\\n        // Update accUserRewardPerShare\\n        updateUserRewardPerShare(_tokenAddress);\\n\\n        // if the user has already deposited token, we move the rewards to\\n        // pendingReward and update the reward debet.\\n        if (user.amount > 0) {\\n            user.pendingReward = user.pendingReward.add(\\n                user.amount.mul(pool.accUserRewardPerShare).div(1e12).sub(user.rewardDebt)\\n            );\\n            user.rewardDebt = (user.amount.add(_amount)).mul(pool.accUserRewardPerShare).div(1e12);\\n        } else {\\n            user.rewardDebt = _amount.mul(pool.accUserRewardPerShare).div(1e12);\\n        }\\n\\n        // transfer funds if users deposit ERC20\\n        if (_tokenAddress != address(0)) {\\n            IERC20(_tokenAddress).safeTransferFrom(msg.sender, address(this), _amount);\\n        }\\n\\n        // update amounts\\n        user.amount = user.amount.add(_amount);\\n        pool.userDepositAmount = pool.userDepositAmount.add(_amount);\\n\\n        emit AddLiquidity(\\n            msg.sender,\\n            _amount,\\n            _tokenAddress\\n        );\\n    }\\n\\n    /**\\n     * Client deposit ERC20 from their account to this contract, which then releases funds on the L2 side\\n     * @param _amount amount that client wants to transfer.\\n     * @param _tokenAddress L2 token address\\n     */\\n    function clientDepositL1(\\n        uint256 _amount,\\n        address _tokenAddress\\n    )\\n        external\\n        payable\\n        whenNotPaused\\n    {\\n        require(msg.value != 0 || _tokenAddress != address(0), \\\"Amount Incorrect\\\");\\n        // check whether user sends ETH or ERC20\\n        if (msg.value != 0) {\\n            // override the _amount and token address\\n            _amount = msg.value;\\n            _tokenAddress = address(0);\\n        }\\n\\n        PoolInfo storage pool = poolInfo[_tokenAddress];\\n\\n        require(pool.l2TokenAddress != address(0), \\\"Token Address Not Register\\\");\\n\\n        // transfer funds if users deposit ERC20\\n        if (_tokenAddress != address(0)) {\\n            IERC20(_tokenAddress).safeTransferFrom(msg.sender, address(this), _amount);\\n        }\\n\\n        // Construct calldata for L1LiquidityPool.depositToFinalize(_to, receivedAmount)\\n        bytes memory data = abi.encodeWithSelector(\\n            iL2LiquidityPool.clientPayL2.selector,\\n            msg.sender,\\n            _amount,\\n            pool.l2TokenAddress\\n        );\\n\\n        // Send calldata into L1\\n        sendCrossDomainMessage(\\n            address(L2LiquidityPoolAddress),\\n            // extra gas for complex l2 logic\\n            SETTLEMENT_L2_GAS,\\n            data\\n        );\\n\\n        emit ClientDepositL1(\\n            msg.sender,\\n            _amount,\\n            _tokenAddress\\n        );\\n    }\\n\\n    /**\\n     * Users withdraw token from LP\\n     * @param _amount amount to withdraw\\n     * @param _tokenAddress L1 token address\\n     * @param _to receiver to get the funds\\n     */\\n    function withdrawLiquidity(\\n        uint256 _amount,\\n        address _tokenAddress,\\n        address payable _to\\n    )\\n        external\\n        whenNotPaused\\n    {\\n        PoolInfo storage pool = poolInfo[_tokenAddress];\\n        UserInfo storage user = userInfo[_tokenAddress][msg.sender];\\n\\n        require(pool.l2TokenAddress != address(0), \\\"Token Address Not Register\\\");\\n        require(user.amount >= _amount, \\\"Withdraw Error\\\");\\n\\n        // Update accUserRewardPerShare\\n        updateUserRewardPerShare(_tokenAddress);\\n\\n        // calculate all the rewards and set it as pending rewards\\n        user.pendingReward = user.pendingReward.add(\\n            user.amount.mul(pool.accUserRewardPerShare).div(1e12).sub(user.rewardDebt)\\n        );\\n        // Update the user data\\n        user.amount = user.amount.sub(_amount);\\n        // update reward debt\\n        user.rewardDebt = user.amount.mul(pool.accUserRewardPerShare).div(1e12);\\n        // update total user deposit amount\\n        pool.userDepositAmount = pool.userDepositAmount.sub(_amount);\\n\\n        if (_tokenAddress != address(0)) {\\n            IERC20(_tokenAddress).safeTransfer(_to, _amount);\\n        } else {\\n            (bool sent,) = _to.call{gas: SAFE_GAS_STIPEND, value: _amount}(\\\"\\\");\\n            require(sent, \\\"Failed to send Ether\\\");\\n        }\\n\\n        emit WithdrawLiquidity(\\n            msg.sender,\\n            _to,\\n            _amount,\\n            _tokenAddress\\n        );\\n    }\\n\\n    /**\\n     * owner recovers fee from ERC20\\n     * @param _amount amount that owner wants to recover.\\n     * @param _tokenAddress L1 token address\\n     * @param _to receiver to get the fee.\\n     */\\n    function ownerRecoverFee(\\n        uint256 _amount,\\n        address _tokenAddress,\\n        address _to\\n    )\\n        external\\n        onlyOwner()\\n    {\\n        PoolInfo storage pool = poolInfo[_tokenAddress];\\n\\n        require(pool.l2TokenAddress != address(0), \\\"Token Address Not Register\\\");\\n        require(pool.accOwnerReward >= _amount, \\\"Owner Reward Withdraw Error\\\");\\n\\n        pool.accOwnerReward = pool.accOwnerReward.sub(_amount);\\n\\n        if (_tokenAddress != address(0)) {\\n            IERC20(_tokenAddress).safeTransfer(_to, _amount);\\n        } else {\\n            (bool sent,) = _to.call{gas: SAFE_GAS_STIPEND, value: _amount}(\\\"\\\");\\n            require(sent, \\\"Failed to send Ether\\\");\\n        }\\n\\n        emit OwnerRecoverFee(\\n            msg.sender,\\n            _to,\\n            _amount,\\n            _tokenAddress\\n        );\\n    }\\n\\n    /**\\n     * withdraw reward from ERC20\\n     * @param _amount reward amount that liquidity providers want to withdraw\\n     * @param _tokenAddress L1 token address\\n     * @param _to receiver to get the reward\\n     */\\n    function withdrawReward(\\n        uint256 _amount,\\n        address _tokenAddress,\\n        address _to\\n    )\\n        external\\n        whenNotPaused\\n    {\\n        PoolInfo storage pool = poolInfo[_tokenAddress];\\n        UserInfo storage user = userInfo[_tokenAddress][msg.sender];\\n\\n        require(pool.l2TokenAddress != address(0), \\\"Token Address Not Register\\\");\\n\\n        uint256 pendingReward = user.pendingReward.add(\\n            user.amount.mul(pool.accUserRewardPerShare).div(1e12).sub(user.rewardDebt)\\n        );\\n\\n        require(pendingReward >= _amount, \\\"Withdraw Reward Error\\\");\\n\\n        user.pendingReward = pendingReward.sub(_amount);\\n        user.rewardDebt = user.amount.mul(pool.accUserRewardPerShare).div(1e12);\\n\\n        if (_tokenAddress != address(0)) {\\n            IERC20(_tokenAddress).safeTransfer(_to, _amount);\\n        } else {\\n            (bool sent,) = _to.call{gas: SAFE_GAS_STIPEND, value: _amount}(\\\"\\\");\\n            require(sent, \\\"Failed to send Ether\\\");\\n        }\\n\\n        emit WithdrawReward(\\n            msg.sender,\\n            _to,\\n            _amount,\\n            _tokenAddress\\n        );\\n    }\\n\\n    /**\\n     * Pause contract\\n     */\\n    function pause() external onlyOwner() {\\n        _pause();\\n    }\\n\\n    /**\\n     * UnPause contract\\n     */\\n    function unpause() external onlyOwner() {\\n        _unpause();\\n    }\\n\\n    /*************************\\n     * Cross-chain Functions *\\n     *************************/\\n\\n    /**\\n     * Move funds from L2 to L1, and pay out from the right liquidity pool\\n     * part of the contract pause, if only this method needs pausing use pause on CDM_Fast\\n     * @param _to receiver to get the funds\\n     * @param _amount amount to to be transferred.\\n     * @param _tokenAddress L1 token address\\n     */\\n    function clientPayL1(\\n        address payable _to,\\n        uint256 _amount,\\n        address _tokenAddress\\n    )\\n        external\\n        onlyFromCrossDomainAccount(address(L2LiquidityPoolAddress))\\n        whenNotPaused\\n    {\\n        bool replyNeeded = false;\\n\\n        PoolInfo storage pool = poolInfo[_tokenAddress];\\n        uint256 userRewardFee = (_amount.mul(userRewardFeeRate)).div(1000);\\n        uint256 ownerRewardFee = (_amount.mul(ownerRewardFeeRate)).div(1000);\\n        uint256 totalFee = userRewardFee.add(ownerRewardFee);\\n        uint256 receivedAmount = _amount.sub(totalFee);\\n\\n        if (_tokenAddress != address(0)) {\\n            //IERC20(_tokenAddress).safeTransfer(_to, _amount);\\n            if (receivedAmount > IERC20(_tokenAddress).balanceOf(address(this))) {\\n                replyNeeded = true;\\n            } else {\\n                pool.accUserReward = pool.accUserReward.add(userRewardFee);\\n                pool.accOwnerReward = pool.accOwnerReward.add(ownerRewardFee);\\n                IERC20(_tokenAddress).safeTransfer(_to, receivedAmount);\\n            }\\n        } else {\\n            // //this is ETH\\n            // // balances[address(0)] = balances[address(0)].sub(_amount);\\n            // //_to.transfer(_amount); UNSAFE\\n            // (bool sent,) = _to.call{gas: SAFE_GAS_STIPEND, value: _amount}(\\\"\\\");\\n            // require(sent, \\\"Failed to send Ether\\\");\\n            if (receivedAmount > address(this).balance) {\\n                 replyNeeded = true;\\n             } else {\\n                pool.accUserReward = pool.accUserReward.add(userRewardFee);\\n                pool.accOwnerReward = pool.accOwnerReward.add(ownerRewardFee);\\n                 //this is ETH\\n                 // balances[address(0)] = balances[address(0)].sub(_amount);\\n                 //_to.transfer(_amount); UNSAFE\\n                 (bool sent,) = _to.call{gas: SAFE_GAS_STIPEND, value: receivedAmount}(\\\"\\\");\\n                 require(sent, \\\"Failed to send Ether\\\");\\n             }\\n         }\\n\\n         if (replyNeeded) {\\n             // send cross domain message\\n             bytes memory data = abi.encodeWithSelector(\\n             iL2LiquidityPool.clientPayL2Settlement.selector,\\n             _to,\\n             _amount,\\n             pool.l2TokenAddress\\n             );\\n\\n             sendCrossDomainMessage(\\n                 address(L2LiquidityPoolAddress),\\n                 SETTLEMENT_L2_GAS,\\n                 data\\n             );\\n         } else {\\n             emit ClientPayL1(\\n             _to,\\n             receivedAmount,\\n             userRewardFee,\\n             ownerRewardFee,\\n             totalFee,\\n             _tokenAddress\\n             );\\n         }\\n    }\\n\\n    /**\\n     * Settlement pay when there's not enough funds on the other side\\n     * part of the contract pause, if only this method needs pausing use pause on CDM_Fast\\n     * @param _to receiver to get the funds\\n     * @param _amount amount to to be transferred.\\n     * @param _tokenAddress L1 token address\\n     */\\n    function clientPayL1Settlement(\\n        address payable _to,\\n        uint256 _amount,\\n        address _tokenAddress\\n    )\\n        external\\n        onlyFromCrossDomainAccount(address(L2LiquidityPoolAddress))\\n        whenNotPaused\\n    {\\n        PoolInfo storage pool = poolInfo[_tokenAddress];\\n        uint256 userRewardFee = (_amount.mul(userRewardFeeRate)).div(1000);\\n        uint256 ownerRewardFee = (_amount.mul(ownerRewardFeeRate)).div(1000);\\n        uint256 totalFee = userRewardFee.add(ownerRewardFee);\\n        uint256 receivedAmount = _amount.sub(totalFee);\\n\\n        pool.accUserReward = pool.accUserReward.add(userRewardFee);\\n        pool.accOwnerReward = pool.accOwnerReward.add(ownerRewardFee);\\n\\n        if (_tokenAddress != address(0)) {\\n            IERC20(_tokenAddress).safeTransfer(_to, receivedAmount);\\n        } else {\\n            //this is ETH\\n            // balances[address(0)] = balances[address(0)].sub(_amount);\\n            //_to.transfer(_amount); UNSAFE\\n            (bool sent,) = _to.call{gas: SAFE_GAS_STIPEND, value: receivedAmount}(\\\"\\\");\\n            require(sent, \\\"Failed to send Ether\\\");\\n        }\\n\\n        emit ClientPayL1Settlement(\\n        _to,\\n        receivedAmount,\\n        userRewardFee,\\n        ownerRewardFee,\\n        totalFee,\\n        _tokenAddress\\n        );\\n    }\\n}\\n\"\r\n    },\r\n    \"contracts/LP/interfaces/iL2LiquidityPool.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\npragma solidity 0.7.6;\\npragma experimental ABIEncoderV2;\\n\\n/**\\n * @title iL2LiquidityPool\\n */\\ninterface iL2LiquidityPool {\\n\\n    /********************\\n     *       Events     *\\n     ********************/\\n\\n    event AddLiquidity(\\n        address sender,\\n        uint256 amount,\\n        address tokenAddress\\n    );\\n\\n    event OwnerRecoverFee(\\n        address sender,\\n        address receiver,\\n        uint256 amount,\\n        address tokenAddress\\n    );\\n\\n    event ClientDepositL2(\\n        address sender,\\n        uint256 receivedAmount,\\n        address tokenAddress\\n    );\\n\\n    event ClientPayL2(\\n        address sender,\\n        uint256 amount,\\n        uint256 userRewardFee,\\n        uint256 ownerRewardFee,\\n        uint256 totalFee,\\n        address tokenAddress\\n    );\\n\\n    event ClientPayL2Settlement(\\n        address sender,\\n        uint256 amount,\\n        uint256 userRewardFee,\\n        uint256 ownerRewardFee,\\n        uint256 totalFee,\\n        address tokenAddress\\n    );\\n\\n    event WithdrawLiquidity(\\n        address sender,\\n        address receiver,\\n        uint256 amount,\\n        address tokenAddress\\n    );\\n\\n    event WithdrawReward(\\n        address sender,\\n        address receiver,\\n        uint256 amount,\\n        address tokenAddress\\n    );\\n\\n    /*************************\\n     * Cross-chain Functions *\\n     *************************/\\n\\n    function clientPayL2(\\n        address payable _to,\\n        uint256 _amount,\\n        address _tokenAddress\\n    )\\n        external;\\n\\n    function clientPayL2Settlement(\\n        address payable _to,\\n        uint256 _amount,\\n        address _tokenAddress\\n    )\\n        external;\\n}\\n\"\r\n    },\r\n    \"contracts/libraries/OVM_CrossDomainEnabledFast.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\npragma solidity 0.7.6;\\n/* Interface Imports */\\nimport { iOVM_CrossDomainMessenger } from \\\"@eth-optimism/contracts/contracts/optimistic-ethereum/iOVM/bridge/messaging/iOVM_CrossDomainMessenger.sol\\\";\\n\\n/**\\n * @title OVM_CrossDomainEnabledFast\\n * @dev Helper contract for contracts performing cross-domain communications\\n *\\n * Compiler used: defined by inheriting contract\\n * Runtime target: defined by inheriting contract\\n */\\ncontract OVM_CrossDomainEnabledFast {\\n\\n    // Messenger contract used to send and receive messages from the other domain.\\n    address public senderMessenger;\\n    address public relayerMessenger;\\n\\n    /***************\\n     * Constructor *\\n     ***************/\\n    constructor(\\n        address _senderMessenger,\\n        address _relayerMessenger\\n    ) {\\n        senderMessenger = _senderMessenger;\\n        relayerMessenger = _relayerMessenger;\\n    }\\n\\n    /**********************\\n     * Function Modifiers *\\n     **********************/\\n\\n    /**\\n     * @notice Enforces that the modified function is only callable by a specific cross-domain account.\\n     * @param _sourceDomainAccount The only account on the originating domain which is authenticated to call this function.\\n     */\\n    modifier onlyFromCrossDomainAccount(\\n        address _sourceDomainAccount\\n    ) {\\n        require(\\n            msg.sender == address(getCrossDomainRelayerMessenger()),\\n            \\\"OVM_XCHAIN: messenger contract unauthenticated\\\"\\n        );\\n\\n        require(\\n            getCrossDomainRelayerMessenger().xDomainMessageSender() == _sourceDomainAccount,\\n            \\\"OVM_XCHAIN: wrong sender of cross-domain message\\\"\\n        );\\n\\n        _;\\n    }\\n\\n    /**********************\\n     * Internal Functions *\\n     **********************/\\n\\n    /**\\n     * @notice Gets the messenger, usually from storage.  This function is exposed in case a child contract needs to override.\\n     * @return The address of the cross-domain messenger contract which should be used.\\n     */\\n    function getCrossDomainSenderMessenger()\\n        internal\\n        virtual\\n        returns(\\n            iOVM_CrossDomainMessenger\\n        )\\n    {\\n        return iOVM_CrossDomainMessenger(senderMessenger);\\n    }\\n\\n    /**\\n     * @notice Gets the messenger, usually from storage.  This function is exposed in case a child contract needs to override.\\n     * @return The address of the cross-domain messenger contract which should be used.\\n     */\\n    function getCrossDomainRelayerMessenger()\\n        internal\\n        virtual\\n        returns(\\n            iOVM_CrossDomainMessenger\\n        )\\n    {\\n        return iOVM_CrossDomainMessenger(relayerMessenger);\\n    }\\n\\n    /**\\n     * @notice Sends a message to an account on another domain\\n     * @param _crossDomainTarget The intended recipient on the destination domain\\n     * @param _data The data to send to the target (usually calldata to a function with `onlyFromCrossDomainAccount()`)\\n     * @param _gasLimit The gasLimit for the receipt of the message on the target domain.\\n     */\\n    function sendCrossDomainMessage(\\n        address _crossDomainTarget,\\n        uint32 _gasLimit,\\n        bytes memory _data\\n    ) internal {\\n        getCrossDomainSenderMessenger().sendMessage(_crossDomainTarget, _data, _gasLimit);\\n    }\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/math/SafeMath.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity >=0.6.0 <0.8.0;\\n\\n/**\\n * @dev Wrappers over Solidity's arithmetic operations with added overflow\\n * checks.\\n *\\n * Arithmetic operations in Solidity wrap on overflow. This can easily result\\n * in bugs, because programmers usually assume that an overflow raises an\\n * error, which is the standard behavior in high level programming languages.\\n * `SafeMath` restores this intuition by reverting the transaction when an\\n * operation overflows.\\n *\\n * Using this library instead of the unchecked operations eliminates an entire\\n * class of bugs, so it's recommended to use it always.\\n */\\nlibrary SafeMath {\\n    /**\\n     * @dev Returns the addition of two unsigned integers, with an overflow flag.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function tryAdd(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        uint256 c = a + b;\\n        if (c < a) return (false, 0);\\n        return (true, c);\\n    }\\n\\n    /**\\n     * @dev Returns the substraction of two unsigned integers, with an overflow flag.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function trySub(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        if (b > a) return (false, 0);\\n        return (true, a - b);\\n    }\\n\\n    /**\\n     * @dev Returns the multiplication of two unsigned integers, with an overflow flag.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function tryMul(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        // Gas optimization: this is cheaper than requiring 'a' not being zero, but the\\n        // benefit is lost if 'b' is also tested.\\n        // See: https://github.com/OpenZeppelin/openzeppelin-contracts/pull/522\\n        if (a == 0) return (true, 0);\\n        uint256 c = a * b;\\n        if (c / a != b) return (false, 0);\\n        return (true, c);\\n    }\\n\\n    /**\\n     * @dev Returns the division of two unsigned integers, with a division by zero flag.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function tryDiv(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        if (b == 0) return (false, 0);\\n        return (true, a / b);\\n    }\\n\\n    /**\\n     * @dev Returns the remainder of dividing two unsigned integers, with a division by zero flag.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function tryMod(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        if (b == 0) return (false, 0);\\n        return (true, a % b);\\n    }\\n\\n    /**\\n     * @dev Returns the addition of two unsigned integers, reverting on\\n     * overflow.\\n     *\\n     * Counterpart to Solidity's `+` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Addition cannot overflow.\\n     */\\n    function add(uint256 a, uint256 b) internal pure returns (uint256) {\\n        uint256 c = a + b;\\n        require(c >= a, \\\"SafeMath: addition overflow\\\");\\n        return c;\\n    }\\n\\n    /**\\n     * @dev Returns the subtraction of two unsigned integers, reverting on\\n     * overflow (when the result is negative).\\n     *\\n     * Counterpart to Solidity's `-` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Subtraction cannot overflow.\\n     */\\n    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\\n        require(b <= a, \\\"SafeMath: subtraction overflow\\\");\\n        return a - b;\\n    }\\n\\n    /**\\n     * @dev Returns the multiplication of two unsigned integers, reverting on\\n     * overflow.\\n     *\\n     * Counterpart to Solidity's `*` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Multiplication cannot overflow.\\n     */\\n    function mul(uint256 a, uint256 b) internal pure returns (uint256) {\\n        if (a == 0) return 0;\\n        uint256 c = a * b;\\n        require(c / a == b, \\\"SafeMath: multiplication overflow\\\");\\n        return c;\\n    }\\n\\n    /**\\n     * @dev Returns the integer division of two unsigned integers, reverting on\\n     * division by zero. The result is rounded towards zero.\\n     *\\n     * Counterpart to Solidity's `/` operator. Note: this function uses a\\n     * `revert` opcode (which leaves remaining gas untouched) while Solidity\\n     * uses an invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Requirements:\\n     *\\n     * - The divisor cannot be zero.\\n     */\\n    function div(uint256 a, uint256 b) internal pure returns (uint256) {\\n        require(b > 0, \\\"SafeMath: division by zero\\\");\\n        return a / b;\\n    }\\n\\n    /**\\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\\n     * reverting when dividing by zero.\\n     *\\n     * Counterpart to Solidity's `%` operator. This function uses a `revert`\\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\\n     * invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Requirements:\\n     *\\n     * - The divisor cannot be zero.\\n     */\\n    function mod(uint256 a, uint256 b) internal pure returns (uint256) {\\n        require(b > 0, \\\"SafeMath: modulo by zero\\\");\\n        return a % b;\\n    }\\n\\n    /**\\n     * @dev Returns the subtraction of two unsigned integers, reverting with custom message on\\n     * overflow (when the result is negative).\\n     *\\n     * CAUTION: This function is deprecated because it requires allocating memory for the error\\n     * message unnecessarily. For custom revert reasons use {trySub}.\\n     *\\n     * Counterpart to Solidity's `-` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Subtraction cannot overflow.\\n     */\\n    function sub(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\\n        require(b <= a, errorMessage);\\n        return a - b;\\n    }\\n\\n    /**\\n     * @dev Returns the integer division of two unsigned integers, reverting with custom message on\\n     * division by zero. The result is rounded towards zero.\\n     *\\n     * CAUTION: This function is deprecated because it requires allocating memory for the error\\n     * message unnecessarily. For custom revert reasons use {tryDiv}.\\n     *\\n     * Counterpart to Solidity's `/` operator. Note: this function uses a\\n     * `revert` opcode (which leaves remaining gas untouched) while Solidity\\n     * uses an invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Requirements:\\n     *\\n     * - The divisor cannot be zero.\\n     */\\n    function div(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\\n        require(b > 0, errorMessage);\\n        return a / b;\\n    }\\n\\n    /**\\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\\n     * reverting with custom message when dividing by zero.\\n     *\\n     * CAUTION: This function is deprecated because it requires allocating memory for the error\\n     * message unnecessarily. For custom revert reasons use {tryMod}.\\n     *\\n     * Counterpart to Solidity's `%` operator. This function uses a `revert`\\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\\n     * invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Requirements:\\n     *\\n     * - The divisor cannot be zero.\\n     */\\n    function mod(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\\n        require(b > 0, errorMessage);\\n        return a % b;\\n    }\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/token/ERC20/SafeERC20.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity >=0.6.0 <0.8.0;\\n\\nimport \\\"./IERC20.sol\\\";\\nimport \\\"../../math/SafeMath.sol\\\";\\nimport \\\"../../utils/Address.sol\\\";\\n\\n/**\\n * @title SafeERC20\\n * @dev Wrappers around ERC20 operations that throw on failure (when the token\\n * contract returns false). Tokens that return no value (and instead revert or\\n * throw on failure) are also supported, non-reverting calls are assumed to be\\n * successful.\\n * To use this library you can add a `using SafeERC20 for IERC20;` statement to your contract,\\n * which allows you to call the safe operations as `token.safeTransfer(...)`, etc.\\n */\\nlibrary SafeERC20 {\\n    using SafeMath for uint256;\\n    using Address for address;\\n\\n    function safeTransfer(IERC20 token, address to, uint256 value) internal {\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.transfer.selector, to, value));\\n    }\\n\\n    function safeTransferFrom(IERC20 token, address from, address to, uint256 value) internal {\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.transferFrom.selector, from, to, value));\\n    }\\n\\n    /**\\n     * @dev Deprecated. This function has issues similar to the ones found in\\n     * {IERC20-approve}, and its usage is discouraged.\\n     *\\n     * Whenever possible, use {safeIncreaseAllowance} and\\n     * {safeDecreaseAllowance} instead.\\n     */\\n    function safeApprove(IERC20 token, address spender, uint256 value) internal {\\n        // safeApprove should only be called when setting an initial allowance,\\n        // or when resetting it to zero. To increase and decrease it, use\\n        // 'safeIncreaseAllowance' and 'safeDecreaseAllowance'\\n        // solhint-disable-next-line max-line-length\\n        require((value == 0) || (token.allowance(address(this), spender) == 0),\\n            \\\"SafeERC20: approve from non-zero to non-zero allowance\\\"\\n        );\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, value));\\n    }\\n\\n    function safeIncreaseAllowance(IERC20 token, address spender, uint256 value) internal {\\n        uint256 newAllowance = token.allowance(address(this), spender).add(value);\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));\\n    }\\n\\n    function safeDecreaseAllowance(IERC20 token, address spender, uint256 value) internal {\\n        uint256 newAllowance = token.allowance(address(this), spender).sub(value, \\\"SafeERC20: decreased allowance below zero\\\");\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));\\n    }\\n\\n    /**\\n     * @dev Imitates a Solidity high-level call (i.e. a regular function call to a contract), relaxing the requirement\\n     * on the return value: the return value is optional (but if data is returned, it must not be false).\\n     * @param token The token targeted by the call.\\n     * @param data The call data (encoded using abi.encode or one of its variants).\\n     */\\n    function _callOptionalReturn(IERC20 token, bytes memory data) private {\\n        // We need to perform a low level call here, to bypass Solidity's return data size checking mechanism, since\\n        // we're implementing it ourselves. We use {Address.functionCall} to perform this call, which verifies that\\n        // the target address contains contract code and also asserts for success in the low-level call.\\n\\n        bytes memory returndata = address(token).functionCall(data, \\\"SafeERC20: low-level call failed\\\");\\n        if (returndata.length > 0) { // Return data is optional\\n            // solhint-disable-next-line max-line-length\\n            require(abi.decode(returndata, (bool)), \\\"SafeERC20: ERC20 operation did not succeed\\\");\\n        }\\n    }\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts-upgradeable/utils/ReentrancyGuardUpgradeable.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity >=0.6.0 <0.8.0;\\nimport \\\"../proxy/Initializable.sol\\\";\\n\\n/**\\n * @dev Contract module that helps prevent reentrant calls to a function.\\n *\\n * Inheriting from `ReentrancyGuard` will make the {nonReentrant} modifier\\n * available, which can be applied to functions to make sure there are no nested\\n * (reentrant) calls to them.\\n *\\n * Note that because there is a single `nonReentrant` guard, functions marked as\\n * `nonReentrant` may not call one another. This can be worked around by making\\n * those functions `private`, and then adding `external` `nonReentrant` entry\\n * points to them.\\n *\\n * TIP: If you would like to learn more about reentrancy and alternative ways\\n * to protect against it, check out our blog post\\n * https://blog.openzeppelin.com/reentrancy-after-istanbul/[Reentrancy After Istanbul].\\n */\\nabstract contract ReentrancyGuardUpgradeable is Initializable {\\n    // Booleans are more expensive than uint256 or any type that takes up a full\\n    // word because each write operation emits an extra SLOAD to first read the\\n    // slot's contents, replace the bits taken up by the boolean, and then write\\n    // back. This is the compiler's defense against contract upgrades and\\n    // pointer aliasing, and it cannot be disabled.\\n\\n    // The values being non-zero value makes deployment a bit more expensive,\\n    // but in exchange the refund on every call to nonReentrant will be lower in\\n    // amount. Since refunds are capped to a percentage of the total\\n    // transaction's gas, it is best to keep them low in cases like this one, to\\n    // increase the likelihood of the full refund coming into effect.\\n    uint256 private constant _NOT_ENTERED = 1;\\n    uint256 private constant _ENTERED = 2;\\n\\n    uint256 private _status;\\n\\n    function __ReentrancyGuard_init() internal initializer {\\n        __ReentrancyGuard_init_unchained();\\n    }\\n\\n    function __ReentrancyGuard_init_unchained() internal initializer {\\n        _status = _NOT_ENTERED;\\n    }\\n\\n    /**\\n     * @dev Prevents a contract from calling itself, directly or indirectly.\\n     * Calling a `nonReentrant` function from another `nonReentrant`\\n     * function is not supported. It is possible to prevent this from happening\\n     * by making the `nonReentrant` function external, and make it call a\\n     * `private` function that does the actual work.\\n     */\\n    modifier nonReentrant() {\\n        // On the first call to nonReentrant, _notEntered will be true\\n        require(_status != _ENTERED, \\\"ReentrancyGuard: reentrant call\\\");\\n\\n        // Any calls to nonReentrant after this point will fail\\n        _status = _ENTERED;\\n\\n        _;\\n\\n        // By storing the original value once again, a refund is triggered (see\\n        // https://eips.ethereum.org/EIPS/eip-2200)\\n        _status = _NOT_ENTERED;\\n    }\\n    uint256[49] private __gap;\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts-upgradeable/utils/PausableUpgradeable.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity >=0.6.0 <0.8.0;\\n\\nimport \\\"./ContextUpgradeable.sol\\\";\\nimport \\\"../proxy/Initializable.sol\\\";\\n\\n/**\\n * @dev Contract module which allows children to implement an emergency stop\\n * mechanism that can be triggered by an authorized account.\\n *\\n * This module is used through inheritance. It will make available the\\n * modifiers `whenNotPaused` and `whenPaused`, which can be applied to\\n * the functions of your contract. Note that they will not be pausable by\\n * simply including this module, only once the modifiers are put in place.\\n */\\nabstract contract PausableUpgradeable is Initializable, ContextUpgradeable {\\n    /**\\n     * @dev Emitted when the pause is triggered by `account`.\\n     */\\n    event Paused(address account);\\n\\n    /**\\n     * @dev Emitted when the pause is lifted by `account`.\\n     */\\n    event Unpaused(address account);\\n\\n    bool private _paused;\\n\\n    /**\\n     * @dev Initializes the contract in unpaused state.\\n     */\\n    function __Pausable_init() internal initializer {\\n        __Context_init_unchained();\\n        __Pausable_init_unchained();\\n    }\\n\\n    function __Pausable_init_unchained() internal initializer {\\n        _paused = false;\\n    }\\n\\n    /**\\n     * @dev Returns true if the contract is paused, and false otherwise.\\n     */\\n    function paused() public view virtual returns (bool) {\\n        return _paused;\\n    }\\n\\n    /**\\n     * @dev Modifier to make a function callable only when the contract is not paused.\\n     *\\n     * Requirements:\\n     *\\n     * - The contract must not be paused.\\n     */\\n    modifier whenNotPaused() {\\n        require(!paused(), \\\"Pausable: paused\\\");\\n        _;\\n    }\\n\\n    /**\\n     * @dev Modifier to make a function callable only when the contract is paused.\\n     *\\n     * Requirements:\\n     *\\n     * - The contract must be paused.\\n     */\\n    modifier whenPaused() {\\n        require(paused(), \\\"Pausable: not paused\\\");\\n        _;\\n    }\\n\\n    /**\\n     * @dev Triggers stopped state.\\n     *\\n     * Requirements:\\n     *\\n     * - The contract must not be paused.\\n     */\\n    function _pause() internal virtual whenNotPaused {\\n        _paused = true;\\n        emit Paused(_msgSender());\\n    }\\n\\n    /**\\n     * @dev Returns to normal state.\\n     *\\n     * Requirements:\\n     *\\n     * - The contract must be paused.\\n     */\\n    function _unpause() internal virtual whenPaused {\\n        _paused = false;\\n        emit Unpaused(_msgSender());\\n    }\\n    uint256[49] private __gap;\\n}\\n\"\r\n    },\r\n    \"@eth-optimism/contracts/contracts/optimistic-ethereum/iOVM/bridge/messaging/iOVM_CrossDomainMessenger.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\npragma solidity >0.5.0 <0.8.0;\\npragma experimental ABIEncoderV2;\\n\\n/**\\n * @title iOVM_CrossDomainMessenger\\n */\\ninterface iOVM_CrossDomainMessenger {\\n\\n    /**********\\n     * Events *\\n     **********/\\n\\n    event SentMessage(bytes message);\\n    event RelayedMessage(bytes32 msgHash);\\n    event FailedRelayedMessage(bytes32 msgHash);\\n\\n\\n    /*************\\n     * Variables *\\n     *************/\\n\\n    function xDomainMessageSender() external view returns (address);\\n\\n\\n    /********************\\n     * Public Functions *\\n     ********************/\\n\\n    /**\\n     * Sends a cross domain message to the target messenger.\\n     * @param _target Target contract address.\\n     * @param _message Message to send to the target.\\n     * @param _gasLimit Gas limit for the provided message.\\n     */\\n    function sendMessage(\\n        address _target,\\n        bytes calldata _message,\\n        uint32 _gasLimit\\n    ) external;\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/token/ERC20/IERC20.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity >=0.6.0 <0.8.0;\\n\\n/**\\n * @dev Interface of the ERC20 standard as defined in the EIP.\\n */\\ninterface IERC20 {\\n    /**\\n     * @dev Returns the amount of tokens in existence.\\n     */\\n    function totalSupply() external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the amount of tokens owned by `account`.\\n     */\\n    function balanceOf(address account) external view returns (uint256);\\n\\n    /**\\n     * @dev Moves `amount` tokens from the caller's account to `recipient`.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transfer(address recipient, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Returns the remaining number of tokens that `spender` will be\\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\\n     * zero by default.\\n     *\\n     * This value changes when {approve} or {transferFrom} are called.\\n     */\\n    function allowance(address owner, address spender) external view returns (uint256);\\n\\n    /**\\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\\n     * that someone may use both the old and the new allowance by unfortunate\\n     * transaction ordering. One possible solution to mitigate this race\\n     * condition is to first reduce the spender's allowance to 0 and set the\\n     * desired value afterwards:\\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address spender, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Moves `amount` tokens from `sender` to `recipient` using the\\n     * allowance mechanism. `amount` is then deducted from the caller's\\n     * allowance.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(address sender, address recipient, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\\n     * another (`to`).\\n     *\\n     * Note that `value` may be zero.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 value);\\n\\n    /**\\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\\n     * a call to {approve}. `value` is the new allowance.\\n     */\\n    event Approval(address indexed owner, address indexed spender, uint256 value);\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/utils/Address.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity >=0.6.2 <0.8.0;\\n\\n/**\\n * @dev Collection of functions related to the address type\\n */\\nlibrary Address {\\n    /**\\n     * @dev Returns true if `account` is a contract.\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * It is unsafe to assume that an address for which this function returns\\n     * false is an externally-owned account (EOA) and not a contract.\\n     *\\n     * Among others, `isContract` will return false for the following\\n     * types of addresses:\\n     *\\n     *  - an externally-owned account\\n     *  - a contract in construction\\n     *  - an address where a contract will be created\\n     *  - an address where a contract lived, but was destroyed\\n     * ====\\n     */\\n    function isContract(address account) internal view returns (bool) {\\n        // This method relies on extcodesize, which returns 0 for contracts in\\n        // construction, since the code is only stored at the end of the\\n        // constructor execution.\\n\\n        uint256 size;\\n        // solhint-disable-next-line no-inline-assembly\\n        assembly { size := extcodesize(account) }\\n        return size > 0;\\n    }\\n\\n    /**\\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\\n     * `recipient`, forwarding all available gas and reverting on errors.\\n     *\\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\\n     * imposed by `transfer`, making them unable to receive funds via\\n     * `transfer`. {sendValue} removes this limitation.\\n     *\\n     * https://diligence.consensys.net/posts/2019/09/stop-using-soliditys-transfer-now/[Learn more].\\n     *\\n     * IMPORTANT: because control is transferred to `recipient`, care must be\\n     * taken to not create reentrancy vulnerabilities. Consider using\\n     * {ReentrancyGuard} or the\\n     * https://solidity.readthedocs.io/en/v0.5.11/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\\n     */\\n    function sendValue(address payable recipient, uint256 amount) internal {\\n        //require(address(this).balance >= amount, \\\"Address: insufficient balance\\\");\\n\\n        // solhint-disable-next-line avoid-low-level-calls, avoid-call-value\\n        (bool success, ) = recipient.call{ value: amount }(\\\"\\\");\\n        require(success, \\\"Address: unable to send value, recipient may have reverted\\\");\\n    }\\n\\n    /**\\n     * @dev Performs a Solidity function call using a low level `call`. A\\n     * plain`call` is an unsafe replacement for a function call: use this\\n     * function instead.\\n     *\\n     * If `target` reverts with a revert reason, it is bubbled up by this\\n     * function (like regular Solidity function calls).\\n     *\\n     * Returns the raw returned data. To convert to the expected return value,\\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\\n     *\\n     * Requirements:\\n     *\\n     * - `target` must be a contract.\\n     * - calling `target` with `data` must not revert.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\\n      return functionCall(target, data, \\\"Address: low-level call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\\n     * `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(address target, bytes memory data, string memory errorMessage) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, 0, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but also transferring `value` wei to `target`.\\n     *\\n     * Requirements:\\n     *\\n     * - the calling contract must have an ETH balance of at least `value`.\\n     * - the called Solidity function must be `payable`.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(address target, bytes memory data, uint256 value) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, value, \\\"Address: low-level call with value failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\\n     * with `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(address target, bytes memory data, uint256 value, string memory errorMessage) internal returns (bytes memory) {\\n        //require(address(this).balance >= value, \\\"Address: insufficient balance for call\\\");\\n        require(isContract(target), \\\"Address: call to non-contract\\\");\\n\\n        // solhint-disable-next-line avoid-low-level-calls\\n        (bool success, bytes memory returndata) = target.call{ value: value }(data);\\n        return _verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\\n        return functionStaticCall(target, data, \\\"Address: low-level static call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(address target, bytes memory data, string memory errorMessage) internal view returns (bytes memory) {\\n        require(isContract(target), \\\"Address: static call to non-contract\\\");\\n\\n        // solhint-disable-next-line avoid-low-level-calls\\n        (bool success, bytes memory returndata) = target.staticcall(data);\\n        return _verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionDelegateCall(target, data, \\\"Address: low-level delegate call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(address target, bytes memory data, string memory errorMessage) internal returns (bytes memory) {\\n        require(isContract(target), \\\"Address: delegate call to non-contract\\\");\\n\\n        // solhint-disable-next-line avoid-low-level-calls\\n        (bool success, bytes memory returndata) = target.delegatecall(data);\\n        return _verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    function _verifyCallResult(bool success, bytes memory returndata, string memory errorMessage) private pure returns(bytes memory) {\\n        if (success) {\\n            return returndata;\\n        } else {\\n            // Look for revert reason and bubble it up if present\\n            if (returndata.length > 0) {\\n                // The easiest way to bubble the revert reason is using memory via assembly\\n\\n                // solhint-disable-next-line no-inline-assembly\\n                assembly {\\n                    let returndata_size := mload(returndata)\\n                    revert(add(32, returndata), returndata_size)\\n                }\\n            } else {\\n                revert(errorMessage);\\n            }\\n        }\\n    }\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts-upgradeable/proxy/Initializable.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\n// solhint-disable-next-line compiler-version\\npragma solidity >=0.4.24 <0.8.0;\\n\\nimport \\\"../utils/AddressUpgradeable.sol\\\";\\n\\n/**\\n * @dev This is a base contract to aid in writing upgradeable contracts, or any kind of contract that will be deployed\\n * behind a proxy. Since a proxied contract can't have a constructor, it's common to move constructor logic to an\\n * external initializer function, usually called `initialize`. It then becomes necessary to protect this initializer\\n * function so it can only be called once. The {initializer} modifier provided by this contract will have this effect.\\n *\\n * TIP: To avoid leaving the proxy in an uninitialized state, the initializer function should be called as early as\\n * possible by providing the encoded function call as the `_data` argument to {UpgradeableProxy-constructor}.\\n *\\n * CAUTION: When used with inheritance, manual care must be taken to not invoke a parent initializer twice, or to ensure\\n * that all initializers are idempotent. This is not verified automatically as constructors are by Solidity.\\n */\\nabstract contract Initializable {\\n\\n    /**\\n     * @dev Indicates that the contract has been initialized.\\n     */\\n    bool private _initialized;\\n\\n    /**\\n     * @dev Indicates that the contract is in the process of being initialized.\\n     */\\n    bool private _initializing;\\n\\n    /**\\n     * @dev Modifier to protect an initializer function from being invoked twice.\\n     */\\n    modifier initializer() {\\n        require(_initializing || _isConstructor() || !_initialized, \\\"Initializable: contract is already initialized\\\");\\n\\n        bool isTopLevelCall = !_initializing;\\n        if (isTopLevelCall) {\\n            _initializing = true;\\n            _initialized = true;\\n        }\\n\\n        _;\\n\\n        if (isTopLevelCall) {\\n            _initializing = false;\\n        }\\n    }\\n\\n    /// @dev Returns true if and only if the function is running in the constructor\\n    function _isConstructor() private view returns (bool) {\\n        return !AddressUpgradeable.isContract(address(this));\\n    }\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts-upgradeable/utils/AddressUpgradeable.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity >=0.6.2 <0.8.0;\\n\\n/**\\n * @dev Collection of functions related to the address type\\n */\\nlibrary AddressUpgradeable {\\n    /**\\n     * @dev Returns true if `account` is a contract.\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * It is unsafe to assume that an address for which this function returns\\n     * false is an externally-owned account (EOA) and not a contract.\\n     *\\n     * Among others, `isContract` will return false for the following\\n     * types of addresses:\\n     *\\n     *  - an externally-owned account\\n     *  - a contract in construction\\n     *  - an address where a contract will be created\\n     *  - an address where a contract lived, but was destroyed\\n     * ====\\n     */\\n    function isContract(address account) internal view returns (bool) {\\n        // This method relies on extcodesize, which returns 0 for contracts in\\n        // construction, since the code is only stored at the end of the\\n        // constructor execution.\\n\\n        uint256 size;\\n        // solhint-disable-next-line no-inline-assembly\\n        assembly { size := extcodesize(account) }\\n        return size > 0;\\n    }\\n\\n    /**\\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\\n     * `recipient`, forwarding all available gas and reverting on errors.\\n     *\\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\\n     * imposed by `transfer`, making them unable to receive funds via\\n     * `transfer`. {sendValue} removes this limitation.\\n     *\\n     * https://diligence.consensys.net/posts/2019/09/stop-using-soliditys-transfer-now/[Learn more].\\n     *\\n     * IMPORTANT: because control is transferred to `recipient`, care must be\\n     * taken to not create reentrancy vulnerabilities. Consider using\\n     * {ReentrancyGuard} or the\\n     * https://solidity.readthedocs.io/en/v0.5.11/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\\n     */\\n    function sendValue(address payable recipient, uint256 amount) internal {\\n        require(address(this).balance >= amount, \\\"Address: insufficient balance\\\");\\n\\n        // solhint-disable-next-line avoid-low-level-calls, avoid-call-value\\n        (bool success, ) = recipient.call{ value: amount }(\\\"\\\");\\n        require(success, \\\"Address: unable to send value, recipient may have reverted\\\");\\n    }\\n\\n    /**\\n     * @dev Performs a Solidity function call using a low level `call`. A\\n     * plain`call` is an unsafe replacement for a function call: use this\\n     * function instead.\\n     *\\n     * If `target` reverts with a revert reason, it is bubbled up by this\\n     * function (like regular Solidity function calls).\\n     *\\n     * Returns the raw returned data. To convert to the expected return value,\\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\\n     *\\n     * Requirements:\\n     *\\n     * - `target` must be a contract.\\n     * - calling `target` with `data` must not revert.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\\n      return functionCall(target, data, \\\"Address: low-level call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\\n     * `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(address target, bytes memory data, string memory errorMessage) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, 0, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but also transferring `value` wei to `target`.\\n     *\\n     * Requirements:\\n     *\\n     * - the calling contract must have an ETH balance of at least `value`.\\n     * - the called Solidity function must be `payable`.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(address target, bytes memory data, uint256 value) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, value, \\\"Address: low-level call with value failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\\n     * with `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(address target, bytes memory data, uint256 value, string memory errorMessage) internal returns (bytes memory) {\\n        require(address(this).balance >= value, \\\"Address: insufficient balance for call\\\");\\n        require(isContract(target), \\\"Address: call to non-contract\\\");\\n\\n        // solhint-disable-next-line avoid-low-level-calls\\n        (bool success, bytes memory returndata) = target.call{ value: value }(data);\\n        return _verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\\n        return functionStaticCall(target, data, \\\"Address: low-level static call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(address target, bytes memory data, string memory errorMessage) internal view returns (bytes memory) {\\n        require(isContract(target), \\\"Address: static call to non-contract\\\");\\n\\n        // solhint-disable-next-line avoid-low-level-calls\\n        (bool success, bytes memory returndata) = target.staticcall(data);\\n        return _verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    function _verifyCallResult(bool success, bytes memory returndata, string memory errorMessage) private pure returns(bytes memory) {\\n        if (success) {\\n            return returndata;\\n        } else {\\n            // Look for revert reason and bubble it up if present\\n            if (returndata.length > 0) {\\n                // The easiest way to bubble the revert reason is using memory via assembly\\n\\n                // solhint-disable-next-line no-inline-assembly\\n                assembly {\\n                    let returndata_size := mload(returndata)\\n                    revert(add(32, returndata), returndata_size)\\n                }\\n            } else {\\n                revert(errorMessage);\\n            }\\n        }\\n    }\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts-upgradeable/utils/ContextUpgradeable.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity >=0.6.0 <0.8.0;\\nimport \\\"../proxy/Initializable.sol\\\";\\n\\n/*\\n * @dev Provides information about the current execution context, including the\\n * sender of the transaction and its data. While these are generally available\\n * via msg.sender and msg.data, they should not be accessed in such a direct\\n * manner, since when dealing with GSN meta-transactions the account sending and\\n * paying for execution may not be the actual sender (as far as an application\\n * is concerned).\\n *\\n * This contract is only required for intermediate, library-like contracts.\\n */\\nabstract contract ContextUpgradeable is Initializable {\\n    function __Context_init() internal initializer {\\n        __Context_init_unchained();\\n    }\\n\\n    function __Context_init_unchained() internal initializer {\\n    }\\n    function _msgSender() internal view virtual returns (address payable) {\\n        return msg.sender;\\n    }\\n\\n    function _msgData() internal view virtual returns (bytes memory) {\\n        this; // silence state mutability warning without generating bytecode - see https://github.com/ethereum/solidity/issues/2691\\n        return msg.data;\\n    }\\n    uint256[50] private __gap;\\n}\\n\"\r\n    }\r\n  },\r\n  \"settings\": {\r\n    \"optimizer\": {\r\n      \"enabled\": false,\r\n      \"runs\": 200\r\n    },\r\n    \"outputSelection\": {\r\n      \"*\": {\r\n        \"*\": [\r\n          \"evm.bytecode\",\r\n          \"evm.deployedBytecode\",\r\n          \"abi\"\r\n        ]\r\n      }\r\n    },\r\n    \"metadata\": {\r\n      \"useLiteralContent\": true\r\n    },\r\n    \"libraries\": {}\r\n  }\r\n}}","ABI":"[{\"inputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"tokenAddress\",\"type\":\"address\"}],\"name\":\"AddLiquidity\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"receivedAmount\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"tokenAddress\",\"type\":\"address\"}],\"name\":\"ClientDepositL1\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"userRewardFee\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"ownerRewardFee\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"totalFee\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"tokenAddress\",\"type\":\"address\"}],\"name\":\"ClientPayL1\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"userRewardFee\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"ownerRewardFee\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"totalFee\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"tokenAddress\",\"type\":\"address\"}],\"name\":\"ClientPayL1Settlement\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"receiver\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"tokenAddress\",\"type\":\"address\"}],\"name\":\"OwnerRecoverFee\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"Paused\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"Unpaused\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"receiver\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"tokenAddress\",\"type\":\"address\"}],\"name\":\"WithdrawLiquidity\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"receiver\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"tokenAddress\",\"type\":\"address\"}],\"name\":\"WithdrawReward\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"L2LiquidityPoolAddress\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"SAFE_GAS_STIPEND\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"SETTLEMENT_L2_GAS\",\"outputs\":[{\"internalType\":\"uint32\",\"name\":\"\",\"type\":\"uint32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"_tokenAddress\",\"type\":\"address\"}],\"name\":\"addLiquidity\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"_tokenAddress\",\"type\":\"address\"}],\"name\":\"clientDepositL1\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address payable\",\"name\":\"_to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"_tokenAddress\",\"type\":\"address\"}],\"name\":\"clientPayL1\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address payable\",\"name\":\"_to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"_tokenAddress\",\"type\":\"address\"}],\"name\":\"clientPayL1Settlement\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_userRewardFeeRate\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_ownerRewardFeeRate\",\"type\":\"uint256\"}],\"name\":\"configureFee\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint32\",\"name\":\"_l2GasFee\",\"type\":\"uint32\"},{\"internalType\":\"uint256\",\"name\":\"_safeGas\",\"type\":\"uint256\"}],\"name\":\"configureGas\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_l1CrossDomainMessenger\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_l1CrossDomainMessengerFast\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_L2LiquidityPoolAddress\",\"type\":\"address\"}],\"name\":\"initialize\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"l1CrossDomainMessenger\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"_tokenAddress\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_to\",\"type\":\"address\"}],\"name\":\"ownerRecoverFee\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"ownerRewardFeeRate\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"pause\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"paused\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"poolInfo\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"l1TokenAddress\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"l2TokenAddress\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"userDepositAmount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"lastAccUserReward\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"accUserReward\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"accUserRewardPerShare\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"accOwnerReward\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"startTime\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_l1TokenAddress\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_l2TokenAddress\",\"type\":\"address\"}],\"name\":\"registerPool\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"relayerMessenger\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"senderMessenger\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"unpause\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_tokenAddress\",\"type\":\"address\"}],\"name\":\"updateUserRewardPerShare\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"userInfo\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"rewardDebt\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"pendingReward\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"userRewardFeeRate\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"_tokenAddress\",\"type\":\"address\"},{\"internalType\":\"address payable\",\"name\":\"_to\",\"type\":\"address\"}],\"name\":\"withdrawLiquidity\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"_tokenAddress\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_to\",\"type\":\"address\"}],\"name\":\"withdrawReward\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}]","ContractName":"L1LiquidityPool","CompilerVersion":"v0.7.6+commit.7338295f","OptimizationUsed":"0","Runs":"200","ConstructorArguments":"","EVMVersion":"Default","Library":"","LicenseType":"","Proxy":"0","Implementation":"","SwarmSource":""}]}