{"status":"1","message":"OK","result":[{"SourceCode":"{{\r\n  \"language\": \"Solidity\",\r\n  \"sources\": {\r\n    \"contracts/CryptoPhunksMarket.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT License\\npragma solidity 0.8.10;\\n\\nimport \\\"@openzeppelin/contracts/token/ERC721/IERC721.sol\\\";\\n\\ncontract CryptoPhunksMarket {\\n\\n    IERC721 phunksContract;     // instance of the CryptoPhunks contract\\n    address contractOwner;      // owner can change phunksContract\\n\\n    struct Offer {\\n        bool isForSale;\\n        uint phunkIndex;\\n        address seller;\\n        uint minValue;          // in ether\\n        address onlySellTo;     // specify to sell only to a specific person\\n    }\\n\\n    struct Bid {\\n        bool hasBid;\\n        uint phunkIndex;\\n        address bidder;\\n        uint value;\\n    }\\n\\n    // A record of phunks that are offered for sale at a specific minimum value, and perhaps to a specific person\\n    mapping (uint => Offer) public phunksOfferedForSale;\\n\\n    // A record of the highest phunk bid\\n    mapping (uint => Bid) public phunkBids;\\n\\n    // A record of pending ETH withdrawls by address\\n    mapping (address => uint) public pendingWithdrawals;\\n\\n    event PhunkOffered(uint indexed phunkIndex, uint minValue, address indexed toAddress);\\n    event PhunkBidEntered(uint indexed phunkIndex, uint value, address indexed fromAddress);\\n    event PhunkBidWithdrawn(uint indexed phunkIndex, uint value, address indexed fromAddress);\\n    event PhunkBought(uint indexed phunkIndex, uint value, address indexed fromAddress, address indexed toAddress);\\n    event PhunkNoLongerForSale(uint indexed phunkIndex);\\n\\n    /* Initializes contract with an instance of CryptoPhunks contract, and sets deployer as owner */\\n    constructor(address initialPhunksAddress) {\\n        if (initialPhunksAddress == address(0x0)) revert();\\n        phunksContract = IERC721(initialPhunksAddress);\\n        //contractOwner = msg.sender;\\n        contractOwner = 0x25B331609e45c52eb3b069AbEb2F426D9985eF1f;\\n    }\\n\\n    /* Returns the CryptoPhunks contract address currently being used */\\n    function phunksAddress() public view returns (address) {\\n      return address(phunksContract);\\n    }\\n\\n    /* Allows the owner of the contract to set a new CryptoPhunks contract address */\\n    function setPhunksContract(address newPhunksAddress) public {\\n      if (msg.sender != contractOwner) revert();\\n      phunksContract = IERC721(newPhunksAddress);\\n    }\\n\\n    /* Allows the owner of a CryptoPhunks to stop offering it for sale */\\n    function phunkNoLongerForSale(uint phunkIndex) public {\\n        if (phunkIndex >= 10000) revert();\\n        if (phunksContract.ownerOf(phunkIndex) != msg.sender) revert();\\n        phunksOfferedForSale[phunkIndex] = Offer(false, phunkIndex, msg.sender, 0, address(0x0));\\n        emit PhunkNoLongerForSale(phunkIndex);\\n    }\\n\\n    /* Allows a CryptoPhunk owner to offer it for sale */\\n    function offerPhunkForSale(uint phunkIndex, uint minSalePriceInWei) public {\\n        if (phunkIndex >= 10000) revert();\\n        if (phunksContract.ownerOf(phunkIndex) != msg.sender) revert();\\n        phunksOfferedForSale[phunkIndex] = Offer(true, phunkIndex, msg.sender, minSalePriceInWei, address(0x0));\\n        emit PhunkOffered(phunkIndex, minSalePriceInWei, address(0x0));\\n    }\\n\\n    /* Allows a CryptoPhunk owner to offer it for sale to a specific address */\\n    function offerPhunkForSaleToAddress(uint phunkIndex, uint minSalePriceInWei, address toAddress) public {\\n        if (phunkIndex >= 10000) revert();\\n        if (phunksContract.ownerOf(phunkIndex) != msg.sender) revert();\\n        if (phunksContract.getApproved(phunkIndex) != address(this)) revert();\\n        phunksOfferedForSale[phunkIndex] = Offer(true, phunkIndex, msg.sender, minSalePriceInWei, toAddress);\\n        emit PhunkOffered(phunkIndex, minSalePriceInWei, toAddress);\\n    }\\n\\n    /* Allows users to buy a CryptoPhunk offered for sale */\\n    function buyPhunk(uint phunkIndex) payable public {\\n        if (phunkIndex >= 10000) revert();\\n        Offer memory offer = phunksOfferedForSale[phunkIndex];\\n        if (!offer.isForSale) revert();                // phunk not actually for sale\\n        if (offer.onlySellTo != address(0x0) && offer.onlySellTo != msg.sender) revert();  // phunk not supposed to be sold to this user\\n        if (msg.value < offer.minValue) revert();      // Didn't send enough ETH\\n        address seller = offer.seller;\\n        if (seller != phunksContract.ownerOf(phunkIndex)) revert(); // Seller no longer owner of phunk\\n\\n        phunksContract.safeTransferFrom(seller, msg.sender, phunkIndex);\\n        phunkNoLongerForSale(phunkIndex);\\n        pendingWithdrawals[seller] += msg.value;\\n        emit PhunkBought(phunkIndex, msg.value, seller, msg.sender);\\n\\n        // Check for the case where there is a bid from the new owner and refund it.\\n        // Any other bid can stay in place.\\n        Bid memory bid = phunkBids[phunkIndex];\\n        if (bid.bidder == msg.sender) {\\n            // Kill bid and refund value\\n            pendingWithdrawals[msg.sender] += bid.value;\\n            phunkBids[phunkIndex] = Bid(false, phunkIndex, address(0x0), 0);\\n        }\\n    }\\n\\n    /* Allows users to retrieve ETH from sales */\\n    function withdraw() public {\\n        uint amount = pendingWithdrawals[msg.sender];\\n        // Remember to zero the pending refund before\\n        // sending to prevent re-entrancy attacks\\n        pendingWithdrawals[msg.sender] = 0;\\n        payable(msg.sender).transfer(amount);\\n    }\\n\\n    /* Allows users to enter bids for any CryptoPhunk */\\n    function enterBidForPhunk(uint phunkIndex) payable public {\\n        if (phunkIndex >= 10000) revert();\\n        if (phunksContract.ownerOf(phunkIndex) == address(0x0)) revert();\\n        if (phunksContract.ownerOf(phunkIndex) == msg.sender) revert();\\n        if (msg.value == 0) revert();\\n        Bid memory existing = phunkBids[phunkIndex];\\n        if (msg.value <= existing.value) revert();\\n        if (existing.value > 0) {\\n            // Refund the failing bid\\n            pendingWithdrawals[existing.bidder] += existing.value;\\n        }\\n        phunkBids[phunkIndex] = Bid(true, phunkIndex, msg.sender, msg.value);\\n        emit PhunkBidEntered(phunkIndex, msg.value, msg.sender);\\n    }\\n\\n    /* Allows CryptoPhunk owners to accept bids for their Phunks */\\n    function acceptBidForPhunk(uint phunkIndex, uint minPrice) public {\\n        if (phunkIndex >= 10000) revert();\\n        if (phunksContract.ownerOf(phunkIndex) != msg.sender) revert();\\n        address seller = msg.sender;\\n        Bid memory bid = phunkBids[phunkIndex];\\n        if (bid.value == 0) revert();\\n        if (bid.value < minPrice) revert();\\n\\n        address bidder = bid.bidder;\\n        phunksContract.safeTransferFrom(msg.sender, bidder, phunkIndex);\\n        phunksOfferedForSale[phunkIndex] = Offer(false, phunkIndex, bidder, 0, address(0x0));\\n        uint amount = bid.value;\\n        phunkBids[phunkIndex] = Bid(false, phunkIndex, address(0x0), 0);\\n        pendingWithdrawals[seller] += amount;\\n        emit PhunkBought(phunkIndex, bid.value, seller, bidder);\\n    }\\n\\n    /* Allows bidders to withdraw their bids */\\n    function withdrawBidForPhunk(uint phunkIndex) public {\\n        if (phunkIndex >= 10000) revert();\\n        if (phunksContract.ownerOf(phunkIndex) == address(0x0)) revert();\\n        if (phunksContract.ownerOf(phunkIndex) == msg.sender) revert();\\n        Bid memory bid = phunkBids[phunkIndex];\\n        if (bid.bidder != msg.sender) revert();\\n        emit PhunkBidWithdrawn(phunkIndex, bid.value, msg.sender);\\n        uint amount = bid.value;\\n        phunkBids[phunkIndex] = Bid(false, phunkIndex, address(0x0), 0);\\n        // Refund the bid money\\n        payable(msg.sender).transfer(amount);\\n    }\\n\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/token/ERC721/IERC721.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../../utils/introspection/IERC165.sol\\\";\\n\\n/**\\n * @dev Required interface of an ERC721 compliant contract.\\n */\\ninterface IERC721 is IERC165 {\\n    /**\\n     * @dev Emitted when `tokenId` token is transferred from `from` to `to`.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 indexed tokenId);\\n\\n    /**\\n     * @dev Emitted when `owner` enables `approved` to manage the `tokenId` token.\\n     */\\n    event Approval(address indexed owner, address indexed approved, uint256 indexed tokenId);\\n\\n    /**\\n     * @dev Emitted when `owner` enables or disables (`approved`) `operator` to manage all of its assets.\\n     */\\n    event ApprovalForAll(address indexed owner, address indexed operator, bool approved);\\n\\n    /**\\n     * @dev Returns the number of tokens in ``owner``'s account.\\n     */\\n    function balanceOf(address owner) external view returns (uint256 balance);\\n\\n    /**\\n     * @dev Returns the owner of the `tokenId` token.\\n     *\\n     * Requirements:\\n     *\\n     * - `tokenId` must exist.\\n     */\\n    function ownerOf(uint256 tokenId) external view returns (address owner);\\n\\n    /**\\n     * @dev Safely transfers `tokenId` token from `from` to `to`, checking first that contract recipients\\n     * are aware of the ERC721 protocol to prevent tokens from being forever locked.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` cannot be the zero address.\\n     * - `to` cannot be the zero address.\\n     * - `tokenId` token must exist and be owned by `from`.\\n     * - If the caller is not `from`, it must be have been allowed to move this token by either {approve} or {setApprovalForAll}.\\n     * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function safeTransferFrom(\\n        address from,\\n        address to,\\n        uint256 tokenId\\n    ) external;\\n\\n    /**\\n     * @dev Transfers `tokenId` token from `from` to `to`.\\n     *\\n     * WARNING: Usage of this method is discouraged, use {safeTransferFrom} whenever possible.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` cannot be the zero address.\\n     * - `to` cannot be the zero address.\\n     * - `tokenId` token must be owned by `from`.\\n     * - If the caller is not `from`, it must be approved to move this token by either {approve} or {setApprovalForAll}.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(\\n        address from,\\n        address to,\\n        uint256 tokenId\\n    ) external;\\n\\n    /**\\n     * @dev Gives permission to `to` to transfer `tokenId` token to another account.\\n     * The approval is cleared when the token is transferred.\\n     *\\n     * Only a single account can be approved at a time, so approving the zero address clears previous approvals.\\n     *\\n     * Requirements:\\n     *\\n     * - The caller must own the token or be an approved operator.\\n     * - `tokenId` must exist.\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address to, uint256 tokenId) external;\\n\\n    /**\\n     * @dev Returns the account approved for `tokenId` token.\\n     *\\n     * Requirements:\\n     *\\n     * - `tokenId` must exist.\\n     */\\n    function getApproved(uint256 tokenId) external view returns (address operator);\\n\\n    /**\\n     * @dev Approve or remove `operator` as an operator for the caller.\\n     * Operators can call {transferFrom} or {safeTransferFrom} for any token owned by the caller.\\n     *\\n     * Requirements:\\n     *\\n     * - The `operator` cannot be the caller.\\n     *\\n     * Emits an {ApprovalForAll} event.\\n     */\\n    function setApprovalForAll(address operator, bool _approved) external;\\n\\n    /**\\n     * @dev Returns if the `operator` is allowed to manage all of the assets of `owner`.\\n     *\\n     * See {setApprovalForAll}\\n     */\\n    function isApprovedForAll(address owner, address operator) external view returns (bool);\\n\\n    /**\\n     * @dev Safely transfers `tokenId` token from `from` to `to`.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` cannot be the zero address.\\n     * - `to` cannot be the zero address.\\n     * - `tokenId` token must exist and be owned by `from`.\\n     * - If the caller is not `from`, it must be approved to move this token by either {approve} or {setApprovalForAll}.\\n     * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function safeTransferFrom(\\n        address from,\\n        address to,\\n        uint256 tokenId,\\n        bytes calldata data\\n    ) external;\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/utils/introspection/IERC165.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC165 standard, as defined in the\\n * https://eips.ethereum.org/EIPS/eip-165[EIP].\\n *\\n * Implementers can declare support of contract interfaces, which can then be\\n * queried by others ({ERC165Checker}).\\n *\\n * For an implementation, see {ERC165}.\\n */\\ninterface IERC165 {\\n    /**\\n     * @dev Returns true if this contract implements the interface defined by\\n     * `interfaceId`. See the corresponding\\n     * https://eips.ethereum.org/EIPS/eip-165#how-interfaces-are-identified[EIP section]\\n     * to learn more about how these ids are created.\\n     *\\n     * This function call must use less than 30 000 gas.\\n     */\\n    function supportsInterface(bytes4 interfaceId) external view returns (bool);\\n}\\n\"\r\n    }\r\n  },\r\n  \"settings\": {\r\n    \"optimizer\": {\r\n      \"enabled\": true,\r\n      \"runs\": 1000000\r\n    },\r\n    \"outputSelection\": {\r\n      \"*\": {\r\n        \"*\": [\r\n          \"evm.bytecode\",\r\n          \"evm.deployedBytecode\",\r\n          \"devdoc\",\r\n          \"userdoc\",\r\n          \"metadata\",\r\n          \"abi\"\r\n        ]\r\n      }\r\n    },\r\n    \"libraries\": {}\r\n  }\r\n}}","ABI":"[{\"inputs\":[{\"internalType\":\"address\",\"name\":\"initialPhunksAddress\",\"type\":\"address\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"phunkIndex\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"fromAddress\",\"type\":\"address\"}],\"name\":\"PhunkBidEntered\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"phunkIndex\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"fromAddress\",\"type\":\"address\"}],\"name\":\"PhunkBidWithdrawn\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"phunkIndex\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"fromAddress\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"toAddress\",\"type\":\"address\"}],\"name\":\"PhunkBought\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"phunkIndex\",\"type\":\"uint256\"}],\"name\":\"PhunkNoLongerForSale\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"phunkIndex\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"minValue\",\"type\":\"uint256\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"toAddress\",\"type\":\"address\"}],\"name\":\"PhunkOffered\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"phunkIndex\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"minPrice\",\"type\":\"uint256\"}],\"name\":\"acceptBidForPhunk\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"phunkIndex\",\"type\":\"uint256\"}],\"name\":\"buyPhunk\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"phunkIndex\",\"type\":\"uint256\"}],\"name\":\"enterBidForPhunk\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"phunkIndex\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"minSalePriceInWei\",\"type\":\"uint256\"}],\"name\":\"offerPhunkForSale\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"phunkIndex\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"minSalePriceInWei\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"toAddress\",\"type\":\"address\"}],\"name\":\"offerPhunkForSaleToAddress\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"pendingWithdrawals\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"phunkBids\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"hasBid\",\"type\":\"bool\"},{\"internalType\":\"uint256\",\"name\":\"phunkIndex\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"bidder\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"phunkIndex\",\"type\":\"uint256\"}],\"name\":\"phunkNoLongerForSale\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"phunksAddress\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"phunksOfferedForSale\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"isForSale\",\"type\":\"bool\"},{\"internalType\":\"uint256\",\"name\":\"phunkIndex\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"seller\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"minValue\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"onlySellTo\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newPhunksAddress\",\"type\":\"address\"}],\"name\":\"setPhunksContract\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"withdraw\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"phunkIndex\",\"type\":\"uint256\"}],\"name\":\"withdrawBidForPhunk\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}]","ContractName":"CryptoPhunksMarket","CompilerVersion":"v0.8.10+commit.fc410830","OptimizationUsed":"1","Runs":"1000000","ConstructorArguments":"000000000000000000000000f07468ead8cf26c752c676e43c814fee9c8cf402","EVMVersion":"Default","Library":"","LicenseType":"","Proxy":"0","Implementation":"","SwarmSource":""}]}