{"status":"1","message":"OK","result":[{"SourceCode":"{{\r\n  \"language\": \"Solidity\",\r\n  \"sources\": {\r\n    \"contracts/MatrixPoolFactory.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: GPL-3.0\\n// This program is free software: you can redistribute it and/or modify\\n// it under the terms of the GNU General Public License as published by\\n// the Free Software Foundation, either version 3 of the License, or\\n// (at your option) any later version.\\n\\n// This program is disstributed in the hope that it will be useful,\\n// but WITHOUT ANY WARRANTY; without even the implied warranty of\\n// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\\n// GNU General Public License for more details.\\n\\n// You should have received a copy of the GNU General Public License\\n// along with this program.  If not, see <http://www.gnu.org/licenses/>.\\n\\npragma solidity 0.6.12;\\n\\nimport \\\"@openzeppelin/contracts/access/Ownable.sol\\\";\\nimport \\\"./interfaces/MatrixPoolFactoryInterface.sol\\\";\\nimport \\\"./interfaces/ProxyFactoryInterface.sol\\\";\\n\\ncontract MatrixPoolFactory is Ownable, MatrixPoolFactoryInterface {\\n  event LOG_NEW_POOL(address indexed caller, address indexed pool, address indexed implementation);\\n  event SET_IMPLEMENTATION(address indexed caller, address indexed implementation, address indexed proxyAdmin);\\n\\n  string public constant signature = \\\"initialize(string,string,address,uint256,uint256)\\\";\\n\\n  mapping(address => bool) public isMatrixPool;\\n  ProxyFactoryInterface public proxyFactory;\\n  address public implementation;\\n  address public proxyAdmin;\\n\\n  constructor(\\n    address _proxyFactory,\\n    address _implementation,\\n    address _proxyAdmin\\n  ) public {\\n    proxyFactory = ProxyFactoryInterface(_proxyFactory);\\n    implementation = _implementation;\\n    proxyAdmin = _proxyAdmin;\\n  }\\n\\n  function setProxySettings(address _implementation, address _proxyAdmin) external onlyOwner {\\n    implementation = _implementation;\\n    proxyAdmin = _proxyAdmin;\\n    emit SET_IMPLEMENTATION(msg.sender, _implementation, _proxyAdmin);\\n  }\\n\\n  function newPool(\\n    string calldata _name,\\n    string calldata _symbol,\\n    address _controller,\\n    uint256 _minWeightPerSecond,\\n    uint256 _maxWeightPerSecond\\n  ) external override returns (MatrixPoolInterface) {\\n    address proxy =\\n      proxyFactory.build(\\n        implementation,\\n        proxyAdmin,\\n        abi.encodeWithSignature(signature, _name, _symbol, _controller, _minWeightPerSecond, _maxWeightPerSecond)\\n      );\\n    isMatrixPool[proxy] = true;\\n    emit LOG_NEW_POOL(msg.sender, proxy, implementation);\\n    return MatrixPoolInterface(proxy);\\n  }\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/access/Ownable.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity >=0.6.0 <0.8.0;\\n\\nimport \\\"../utils/Context.sol\\\";\\n/**\\n * @dev Contract module which provides a basic access control mechanism, where\\n * there is an account (an owner) that can be granted exclusive access to\\n * specific functions.\\n *\\n * By default, the owner account will be the one that deploys the contract. This\\n * can later be changed with {transferOwnership}.\\n *\\n * This module is used through inheritance. It will make available the modifier\\n * `onlyOwner`, which can be applied to your functions to restrict their use to\\n * the owner.\\n */\\nabstract contract Ownable is Context {\\n    address private _owner;\\n\\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\\n\\n    /**\\n     * @dev Initializes the contract setting the deployer as the initial owner.\\n     */\\n    constructor () internal {\\n        address msgSender = _msgSender();\\n        _owner = msgSender;\\n        emit OwnershipTransferred(address(0), msgSender);\\n    }\\n\\n    /**\\n     * @dev Returns the address of the current owner.\\n     */\\n    function owner() public view virtual returns (address) {\\n        return _owner;\\n    }\\n\\n    /**\\n     * @dev Throws if called by any account other than the owner.\\n     */\\n    modifier onlyOwner() {\\n        require(owner() == _msgSender(), \\\"Ownable: caller is not the owner\\\");\\n        _;\\n    }\\n\\n    /**\\n     * @dev Leaves the contract without owner. It will not be possible to call\\n     * `onlyOwner` functions anymore. Can only be called by the current owner.\\n     *\\n     * NOTE: Renouncing ownership will leave the contract without an owner,\\n     * thereby removing any functionality that is only available to the owner.\\n     */\\n    function renounceOwnership() public virtual onlyOwner {\\n        emit OwnershipTransferred(_owner, address(0));\\n        _owner = address(0);\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Can only be called by the current owner.\\n     */\\n    function transferOwnership(address newOwner) public virtual onlyOwner {\\n        require(newOwner != address(0), \\\"Ownable: new owner is the zero address\\\");\\n        emit OwnershipTransferred(_owner, newOwner);\\n        _owner = newOwner;\\n    }\\n}\\n\"\r\n    },\r\n    \"contracts/interfaces/MatrixPoolFactoryInterface.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity 0.6.12;\\n\\nimport \\\"./MatrixPoolInterface.sol\\\";\\n\\ninterface MatrixPoolFactoryInterface {\\n  function newPool(\\n    string calldata _name,\\n    string calldata _symbol,\\n    address _controller,\\n    uint256 _minWeightPerSecond,\\n    uint256 _maxWeightPerSecond\\n  ) external returns (MatrixPoolInterface);\\n}\\n\"\r\n    },\r\n    \"contracts/interfaces/ProxyFactoryInterface.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity 0.6.12;\\n\\ninterface ProxyFactoryInterface {\\n  function build(\\n    address _impl,\\n    address proxyAdmin,\\n    bytes calldata _data\\n  ) external returns (address);\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/utils/Context.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity >=0.6.0 <0.8.0;\\n\\n/*\\n * @dev Provides information about the current execution context, including the\\n * sender of the transaction and its data. While these are generally available\\n * via msg.sender and msg.data, they should not be accessed in such a direct\\n * manner, since when dealing with GSN meta-transactions the account sending and\\n * paying for execution may not be the actual sender (as far as an application\\n * is concerned).\\n *\\n * This contract is only required for intermediate, library-like contracts.\\n */\\nabstract contract Context {\\n    function _msgSender() internal view virtual returns (address payable) {\\n        return msg.sender;\\n    }\\n\\n    function _msgData() internal view virtual returns (bytes memory) {\\n        this; // silence state mutability warning without generating bytecode - see https://github.com/ethereum/solidity/issues/2691\\n        return msg.data;\\n    }\\n}\\n\"\r\n    },\r\n    \"contracts/interfaces/MatrixPoolInterface.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity 0.6.12;\\n\\nimport \\\"./BPoolInterface.sol\\\";\\n\\ninterface MatrixPoolInterface is BPoolInterface {\\n  function initialize(\\n    string calldata name,\\n    string calldata symbol,\\n    uint256 minWeightPerSecond,\\n    uint256 maxWeightPerSecond\\n  ) external;\\n\\n  function bind(\\n    address,\\n    uint256,\\n    uint256,\\n    uint256,\\n    uint256\\n  ) external;\\n\\n  function setDynamicWeight(\\n    address token,\\n    uint256 targetDenorm,\\n    uint256 fromTimestamp,\\n    uint256 targetTimestamp\\n  ) external;\\n\\n  function getDynamicWeightSettings(address token)\\n    external\\n    view\\n    returns (\\n      uint256 fromTimestamp,\\n      uint256 targetTimestamp,\\n      uint256 fromDenorm,\\n      uint256 targetDenorm\\n    );\\n\\n  function getMinWeight() external view override returns (uint256);\\n\\n  function getWeightPerSecondBounds() external view returns (uint256, uint256);\\n\\n  function setWeightPerSecondBounds(uint256, uint256) external;\\n\\n  function setWrapper(address, bool) external;\\n\\n  function getWrapperMode() external view returns (bool);\\n}\\n\"\r\n    },\r\n    \"contracts/interfaces/BPoolInterface.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity 0.6.12;\\n\\nimport \\\"@openzeppelin/contracts/token/ERC20/IERC20.sol\\\";\\nimport \\\"./BMathInterface.sol\\\";\\n\\ninterface BPoolInterface is IERC20, BMathInterface {\\n  function joinPool(uint256 poolAmountOut, uint256[] calldata maxAmountsIn) external;\\n\\n  function exitPool(uint256 poolAmountIn, uint256[] calldata minAmountsOut) external;\\n\\n  function swapExactAmountIn(\\n    address,\\n    uint256,\\n    address,\\n    uint256,\\n    uint256\\n  ) external returns (uint256, uint256);\\n\\n  function swapExactAmountOut(\\n    address,\\n    uint256,\\n    address,\\n    uint256,\\n    uint256\\n  ) external returns (uint256, uint256);\\n\\n  function joinswapExternAmountIn(\\n    address,\\n    uint256,\\n    uint256\\n  ) external returns (uint256);\\n\\n  function joinswapPoolAmountOut(\\n    address,\\n    uint256,\\n    uint256\\n  ) external returns (uint256);\\n\\n  function exitswapPoolAmountIn(\\n    address,\\n    uint256,\\n    uint256\\n  ) external returns (uint256);\\n\\n  function exitswapExternAmountOut(\\n    address,\\n    uint256,\\n    uint256\\n  ) external returns (uint256);\\n\\n  function getDenormalizedWeight(address) external view returns (uint256);\\n\\n  function getBalance(address) external view returns (uint256);\\n\\n  function getSwapFee() external view returns (uint256);\\n\\n  function getTotalDenormalizedWeight() external view returns (uint256);\\n\\n  function getCommunityFee()\\n    external\\n    view\\n    returns (\\n      uint256,\\n      uint256,\\n      uint256,\\n      address\\n    );\\n\\n  function calcAmountWithCommunityFee(\\n    uint256,\\n    uint256,\\n    address\\n  ) external view returns (uint256, uint256);\\n\\n  function getRestrictions() external view returns (address);\\n\\n  function isSwapsDisabled() external view returns (bool);\\n\\n  function isFinalized() external view returns (bool);\\n\\n  function isBound(address t) external view returns (bool);\\n\\n  function getCurrentTokens() external view returns (address[] memory tokens);\\n\\n  function getFinalTokens() external view returns (address[] memory tokens);\\n\\n  function setSwapFee(uint256) external;\\n\\n  function setCommunityFeeAndReceiver(\\n    uint256,\\n    uint256,\\n    uint256,\\n    address\\n  ) external;\\n\\n  function setController(address) external;\\n\\n  function setSwapsDisabled(bool) external;\\n\\n  function finalize() external;\\n\\n  function bind(\\n    address,\\n    uint256,\\n    uint256\\n  ) external;\\n\\n  function rebind(\\n    address,\\n    uint256,\\n    uint256\\n  ) external;\\n\\n  function unbind(address) external;\\n\\n  function gulp(address) external;\\n\\n  function callVoting(\\n    address voting,\\n    bytes4 signature,\\n    bytes calldata args,\\n    uint256 value\\n  ) external;\\n\\n  function getMinWeight() external view returns (uint256);\\n\\n  function getMaxBoundTokens() external view returns (uint256);\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/token/ERC20/IERC20.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity >=0.6.0 <0.8.0;\\n\\n/**\\n * @dev Interface of the ERC20 standard as defined in the EIP.\\n */\\ninterface IERC20 {\\n    /**\\n     * @dev Returns the amount of tokens in existence.\\n     */\\n    function totalSupply() external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the amount of tokens owned by `account`.\\n     */\\n    function balanceOf(address account) external view returns (uint256);\\n\\n    /**\\n     * @dev Moves `amount` tokens from the caller's account to `recipient`.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transfer(address recipient, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Returns the remaining number of tokens that `spender` will be\\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\\n     * zero by default.\\n     *\\n     * This value changes when {approve} or {transferFrom} are called.\\n     */\\n    function allowance(address owner, address spender) external view returns (uint256);\\n\\n    /**\\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\\n     * that someone may use both the old and the new allowance by unfortunate\\n     * transaction ordering. One possible solution to mitigate this race\\n     * condition is to first reduce the spender's allowance to 0 and set the\\n     * desired value afterwards:\\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address spender, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Moves `amount` tokens from `sender` to `recipient` using the\\n     * allowance mechanism. `amount` is then deducted from the caller's\\n     * allowance.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(address sender, address recipient, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\\n     * another (`to`).\\n     *\\n     * Note that `value` may be zero.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 value);\\n\\n    /**\\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\\n     * a call to {approve}. `value` is the new allowance.\\n     */\\n    event Approval(address indexed owner, address indexed spender, uint256 value);\\n}\\n\"\r\n    },\r\n    \"contracts/interfaces/BMathInterface.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity 0.6.12;\\n\\ninterface BMathInterface {\\n  function calcInGivenOut(\\n    uint256 tokenBalanceIn,\\n    uint256 tokenWeightIn,\\n    uint256 tokenBalanceOut,\\n    uint256 tokenWeightOut,\\n    uint256 tokenAmountOut,\\n    uint256 swapFee\\n  ) external pure returns (uint256 tokenAmountIn);\\n\\n  function calcSingleInGivenPoolOut(\\n    uint256 tokenBalanceIn,\\n    uint256 tokenWeightIn,\\n    uint256 poolSupply,\\n    uint256 totalWeight,\\n    uint256 poolAmountOut,\\n    uint256 swapFee\\n  ) external pure returns (uint256 tokenAmountIn);\\n}\\n\"\r\n    }\r\n  },\r\n  \"settings\": {\r\n    \"optimizer\": {\r\n      \"enabled\": true,\r\n      \"runs\": 2\r\n    },\r\n    \"outputSelection\": {\r\n      \"*\": {\r\n        \"*\": [\r\n          \"evm.bytecode\",\r\n          \"evm.deployedBytecode\",\r\n          \"devdoc\",\r\n          \"userdoc\",\r\n          \"metadata\",\r\n          \"abi\"\r\n        ]\r\n      }\r\n    },\r\n    \"libraries\": {}\r\n  }\r\n}}","ABI":"[{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_proxyFactory\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_implementation\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_proxyAdmin\",\"type\":\"address\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"caller\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"pool\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"implementation\",\"type\":\"address\"}],\"name\":\"LOG_NEW_POOL\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"caller\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"implementation\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"proxyAdmin\",\"type\":\"address\"}],\"name\":\"SET_IMPLEMENTATION\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"implementation\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"isMatrixPool\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"string\",\"name\":\"_name\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"_symbol\",\"type\":\"string\"},{\"internalType\":\"address\",\"name\":\"_controller\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_minWeightPerSecond\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_maxWeightPerSecond\",\"type\":\"uint256\"}],\"name\":\"newPool\",\"outputs\":[{\"internalType\":\"contract MatrixPoolInterface\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"proxyAdmin\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"proxyFactory\",\"outputs\":[{\"internalType\":\"contract ProxyFactoryInterface\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_implementation\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_proxyAdmin\",\"type\":\"address\"}],\"name\":\"setProxySettings\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"signature\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}]","ContractName":"MatrixPoolFactory","CompilerVersion":"v0.6.12+commit.27d51765","OptimizationUsed":"1","Runs":"2","ConstructorArguments":"0000000000000000000000006088e245bf8024c67874e1bdc0b7e269aa8fe83c000000000000000000000000a177bf89765793ec8f17a1a792526271343b4a8f000000000000000000000000ec5d3c6a9763fe1596ab6efcfa319fc9f540a6b3","EVMVersion":"Default","Library":"","LicenseType":"","Proxy":"0","Implementation":"","SwarmSource":""}]}