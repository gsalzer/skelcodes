{"status":"1","message":"OK","result":[{"SourceCode":"{{\r\n  \"language\": \"Solidity\",\r\n  \"sources\": {\r\n    \"contracts/governance/staking/StakedTokenBPT.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: AGPL-3.0-or-later\\npragma solidity 0.8.6;\\npragma abicoder v2;\\n\\nimport { StakedToken } from \\\"./StakedToken.sol\\\";\\nimport { IERC20 } from \\\"@openzeppelin/contracts/token/ERC20/IERC20.sol\\\";\\nimport { SafeERC20 } from \\\"@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol\\\";\\nimport { IBVault, ExitPoolRequest } from \\\"./interfaces/IBVault.sol\\\";\\n\\n/**\\n * @title StakedTokenBPT\\n * @dev Derives from StakedToken, and simply adds the ability to withdraw any unclaimed $BAL tokens\\n * that are at this address\\n **/\\ncontract StakedTokenBPT is StakedToken {\\n    using SafeERC20 for IERC20;\\n\\n    /// @notice Balancer token\\n    IERC20 public immutable BAL;\\n\\n    /// @notice Balancer vault\\n    IBVault public immutable balancerVault;\\n\\n    /// @notice Balancer poolId\\n    bytes32 public immutable poolId;\\n\\n    /// @notice contract that can redistribute the $BAL\\n    address public balRecipient;\\n\\n    /// @notice Keeper\\n    address public keeper;\\n\\n    /// @notice Pending fees in BPT terms\\n    uint256 public pendingBPTFees;\\n\\n    /// @notice Most recent PriceCoefficient\\n    uint256 public priceCoefficient;\\n\\n    /// @notice Time of last priceCoefficient upgrade\\n    uint256 public lastPriceUpdateTime;\\n\\n    event KeeperUpdated(address newKeeper);\\n    event BalClaimed();\\n    event BalRecipientChanged(address newRecipient);\\n    event PriceCoefficientUpdated(uint256 newPriceCoeff);\\n    event FeesConverted(uint256 bpt, uint256 mta);\\n\\n    /***************************************\\n                    INIT\\n    ****************************************/\\n\\n    /**\\n     * @param _nexus System nexus\\n     * @param _rewardsToken Token that is being distributed as a reward. eg MTA\\n     * @param _stakedToken Core token that is staked and tracked (e.g. MTA)\\n     * @param _cooldownSeconds Seconds a user must wait after she initiates her cooldown before withdrawal is possible\\n     * @param _unstakeWindow Window in which it is possible to withdraw, following the cooldown period\\n     * @param _bal Balancer addresses, [0] = $BAL addr, [1] = BAL vault\\n     * @param _poolId Balancer Pool identifier\\n     */\\n    constructor(\\n        address _nexus,\\n        address _rewardsToken,\\n        address _questManager,\\n        address _stakedToken,\\n        uint256 _cooldownSeconds,\\n        uint256 _unstakeWindow,\\n        address[2] memory _bal,\\n        bytes32 _poolId\\n    )\\n        StakedToken(\\n            _nexus,\\n            _rewardsToken,\\n            _questManager,\\n            _stakedToken,\\n            _cooldownSeconds,\\n            _unstakeWindow,\\n            true\\n        )\\n    {\\n        BAL = IERC20(_bal[0]);\\n        balancerVault = IBVault(_bal[1]);\\n        poolId = _poolId;\\n    }\\n\\n    /**\\n     * @param _nameArg Token name\\n     * @param _symbolArg Token symbol\\n     * @param _rewardsDistributorArg mStable Rewards Distributor\\n     * @param _balRecipient contract that can redistribute the $BAL\\n     * @param _priceCoefficient Initial pricing coefficient\\n     */\\n    function initialize(\\n        bytes32 _nameArg,\\n        bytes32 _symbolArg,\\n        address _rewardsDistributorArg,\\n        address _balRecipient,\\n        uint256 _priceCoefficient\\n    ) external initializer {\\n        __StakedToken_init(_nameArg, _symbolArg, _rewardsDistributorArg);\\n        balRecipient = _balRecipient;\\n        priceCoefficient = _priceCoefficient;\\n    }\\n\\n    modifier governorOrKeeper() {\\n        require(_msgSender() == _governor() || _msgSender() == keeper, \\\"Gov or keeper\\\");\\n        _;\\n    }\\n\\n    /***************************************\\n                BAL incentives\\n    ****************************************/\\n\\n    /**\\n     * @dev Claims any $BAL tokens present on this address as part of any potential liquidity mining program\\n     */\\n    function claimBal() external {\\n        uint256 balance = BAL.balanceOf(address(this));\\n        BAL.safeTransfer(balRecipient, balance);\\n\\n        emit BalClaimed();\\n    }\\n\\n    /**\\n     * @dev Sets the recipient for any potential $BAL earnings\\n     */\\n    function setBalRecipient(address _newRecipient) external onlyGovernor {\\n        balRecipient = _newRecipient;\\n\\n        emit BalRecipientChanged(_newRecipient);\\n    }\\n\\n    /***************************************\\n                    FEES\\n    ****************************************/\\n\\n    /**\\n     * @dev Converts fees accrued in BPT into MTA, before depositing to the rewards contract\\n     */\\n    function convertFees() external nonReentrant {\\n        uint256 pendingBPT = pendingBPTFees;\\n        require(pendingBPT > 1, \\\"Must have something to convert\\\");\\n        pendingBPTFees = 1;\\n\\n        // 1. Sell the BPT\\n        uint256 stakingBalBefore = STAKED_TOKEN.balanceOf(address(this));\\n        uint256 mtaBalBefore = REWARDS_TOKEN.balanceOf(address(this));\\n        (address[] memory tokens, , ) = balancerVault.getPoolTokens(poolId);\\n        require(tokens[0] == address(REWARDS_TOKEN), \\\"MTA in wrong place\\\");\\n\\n        // 1.1. Calculate minimum output amount\\n        uint256[] memory minOut = new uint256[](2);\\n        {\\n            // 10% discount from the latest pcoeff\\n            // e.g. 1e18 * 42000 / 11000 = 3.81e18\\n            minOut[0] = (pendingBPT * priceCoefficient) / 11000;\\n        }\\n\\n        // 1.2. Exits to here, from here. Assumes token is in position 0\\n        balancerVault.exitPool(\\n            poolId,\\n            address(this),\\n            payable(address(this)),\\n            ExitPoolRequest(tokens, minOut, bytes(abi.encode(0, pendingBPT - 1, 0)), false)\\n        );\\n\\n        // 2. Verify and update state\\n        uint256 stakingBalAfter = STAKED_TOKEN.balanceOf(address(this));\\n        require(\\n            stakingBalAfter == (stakingBalBefore - pendingBPT + 1),\\n            \\\"Must sell correct amount of BPT\\\"\\n        );\\n\\n        // 3. Inform HeadlessRewards about the new rewards\\n        uint256 received = REWARDS_TOKEN.balanceOf(address(this)) - mtaBalBefore;\\n        require(received >= minOut[0], \\\"Must receive tokens\\\");\\n        super._notifyAdditionalReward(received);\\n\\n        emit FeesConverted(pendingBPT, received);\\n    }\\n\\n    /**\\n     * @dev Called by the child contract to notify of any additional rewards that have accrued.\\n     *      Trusts that this is called honestly.\\n     * @param _additionalReward Units of additional RewardToken to add at the next notification\\n     */\\n    function _notifyAdditionalReward(uint256 _additionalReward) internal override {\\n        require(_additionalReward < 1e24, \\\"more than a million units\\\");\\n\\n        pendingBPTFees += _additionalReward;\\n    }\\n\\n    /***************************************\\n                    PRICE\\n    ****************************************/\\n\\n    /**\\n     * @dev Sets the keeper that is responsible for fetching new price coefficients\\n     */\\n    function setKeeper(address _newKeeper) external onlyGovernor {\\n        keeper = _newKeeper;\\n\\n        emit KeeperUpdated(_newKeeper);\\n    }\\n\\n    /**\\n     * @dev Allows the governor or keeper to update the price coeff\\n     */\\n    function fetchPriceCoefficient() external governorOrKeeper {\\n        require(block.timestamp > lastPriceUpdateTime + 14 days, \\\"Max 1 update per 14 days\\\");\\n\\n        uint256 newPriceCoeff = getProspectivePriceCoefficient();\\n        uint256 oldPriceCoeff = priceCoefficient;\\n        uint256 diff = newPriceCoeff > oldPriceCoeff\\n            ? newPriceCoeff - oldPriceCoeff\\n            : oldPriceCoeff - newPriceCoeff;\\n\\n        // e.g. 500 * 10000 / 35000 = 5000000 / 35000 = 142\\n        require((diff * 10000) / oldPriceCoeff > 500, \\\"Must be > 5% diff\\\");\\n        require(newPriceCoeff > 15000 && newPriceCoeff < 75000, \\\"Out of bounds\\\");\\n\\n        priceCoefficient = newPriceCoeff;\\n        lastPriceUpdateTime = block.timestamp;\\n\\n        emit PriceCoefficientUpdated(newPriceCoeff);\\n    }\\n\\n    /**\\n     * @dev Fetches most recent priceCoeff from the balancer pool.\\n     * PriceCoeff = units of MTA per BPT, scaled to 1:1 = 10000\\n     * Assuming an 80/20 BPT, it is possible to calculate\\n     * PriceCoeff (p) = balanceOfMTA in pool (b) / bpt supply (s) / 0.8\\n     * p = b * 1.25 / s\\n     */\\n    function getProspectivePriceCoefficient() public view returns (uint256 newPriceCoeff) {\\n        (address[] memory tokens, uint256[] memory balances, ) = balancerVault.getPoolTokens(\\n            poolId\\n        );\\n        require(tokens[0] == address(REWARDS_TOKEN), \\\"MTA in wrong place\\\");\\n\\n        // Calculate units of MTA per BPT\\n        // e.g. 800e18 * 125e16 / 1000e18 = 1e18\\n        // e.g. 1280e18 * 125e16 / 1000e18 = 16e17\\n        uint256 unitsPerToken = (balances[0] * 125e16) / STAKED_TOKEN.totalSupply();\\n        // e.g. 1e18 / 1e14 = 10000\\n        // e.g. 16e17 / 1e14 = 16000\\n        newPriceCoeff = unitsPerToken / 1e14;\\n    }\\n\\n    /**\\n     * @dev Get the current priceCoeff\\n     */\\n    function _getPriceCoeff() internal view override returns (uint256) {\\n        return priceCoefficient;\\n    }\\n}\\n\"\r\n    },\r\n    \"contracts/governance/staking/StakedToken.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: AGPL-3.0-or-later\\npragma solidity 0.8.6;\\npragma abicoder v2;\\n\\nimport { IStakedToken } from \\\"./interfaces/IStakedToken.sol\\\";\\nimport { GamifiedVotingToken } from \\\"./GamifiedVotingToken.sol\\\";\\nimport { IERC20 } from \\\"@openzeppelin/contracts/token/ERC20/IERC20.sol\\\";\\nimport { SafeCast } from \\\"@openzeppelin/contracts/utils/math/SafeCast.sol\\\";\\nimport { SafeERC20 } from \\\"@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol\\\";\\nimport { Root } from \\\"../../shared/Root.sol\\\";\\nimport { InitializableReentrancyGuard } from \\\"../../shared/InitializableReentrancyGuard.sol\\\";\\nimport \\\"./deps/GamifiedTokenStructs.sol\\\";\\n\\n/**\\n * @title StakedToken\\n * @notice StakedToken is a non-transferrable ERC20 token that allows users to stake and withdraw, earning voting rights.\\n * Scaled balance is determined by quests a user completes, and the length of time they keep the raw balance wrapped.\\n * Stakers can unstake, after the elapsed cooldown period, and before the end of the unstake window. Users voting/earning\\n * power is slashed during this time, and they may face a redemption fee if they leave early.\\n * The reason for this unstake window is that this StakedToken acts as a source of insurance value for the mStable system,\\n * which can access the funds via the Recollateralisation module, up to the amount defined in `safetyData`.\\n * Voting power can be used for a number of things: voting in the mStable DAO/emission dials, boosting rewards, earning\\n * rewards here. While a users \\\"balance\\\" is unique to themselves, they can choose to delegate their voting power (which will apply\\n * to voting in the mStable DAO and emission dials).\\n * @author mStable\\n * @dev Only whitelisted contracts can communicate with this contract, in order to avoid having tokenised wrappers that\\n * could potentially circumvent our unstaking procedure.\\n **/\\ncontract StakedToken is GamifiedVotingToken, InitializableReentrancyGuard {\\n    using SafeERC20 for IERC20;\\n\\n    /// @notice Core token that is staked and tracked (e.g. MTA)\\n    IERC20 public immutable STAKED_TOKEN;\\n    /// @notice Seconds a user must wait after she initiates her cooldown before withdrawal is possible\\n    uint256 public immutable COOLDOWN_SECONDS;\\n    /// @notice Window in which it is possible to withdraw, following the cooldown period\\n    uint256 public immutable UNSTAKE_WINDOW;\\n    /// @notice A week\\n    uint256 private constant ONE_WEEK = 7 days;\\n\\n    struct SafetyData {\\n        /// Percentage of collateralisation where 100% = 1e18\\n        uint128 collateralisationRatio;\\n        /// Slash % where 100% = 1e18\\n        uint128 slashingPercentage;\\n    }\\n\\n    /// @notice Data relating to the re-collateralisation safety module\\n    SafetyData public safetyData;\\n\\n    /// @notice Whitelisted smart contract integrations\\n    mapping(address => bool) public whitelistedWrappers;\\n\\n    event Staked(address indexed user, uint256 amount, address delegatee);\\n    event Withdraw(address indexed user, address indexed to, uint256 amount);\\n    event Cooldown(address indexed user, uint256 percentage);\\n    event CooldownExited(address indexed user);\\n    event SlashRateChanged(uint256 newRate);\\n    event Recollateralised();\\n    event WrapperWhitelisted(address wallet);\\n    event WrapperBlacklisted(address wallet);\\n\\n    /***************************************\\n                    INIT\\n    ****************************************/\\n\\n    /**\\n     * @param _nexus System nexus\\n     * @param _rewardsToken Token that is being distributed as a reward. eg MTA\\n     * @param _questManager Centralised manager of quests\\n     * @param _stakedToken Core token that is staked and tracked (e.g. MTA)\\n     * @param _cooldownSeconds Seconds a user must wait after she initiates her cooldown before withdrawal is possible\\n     * @param _unstakeWindow Window in which it is possible to withdraw, following the cooldown period\\n     * @param _hasPriceCoeff true if raw staked amount is multiplied by price coeff to get staked amount. eg BPT Staked Token\\n     */\\n    constructor(\\n        address _nexus,\\n        address _rewardsToken,\\n        address _questManager,\\n        address _stakedToken,\\n        uint256 _cooldownSeconds,\\n        uint256 _unstakeWindow,\\n        bool _hasPriceCoeff\\n    ) GamifiedVotingToken(_nexus, _rewardsToken, _questManager, _hasPriceCoeff) {\\n        STAKED_TOKEN = IERC20(_stakedToken);\\n        COOLDOWN_SECONDS = _cooldownSeconds;\\n        UNSTAKE_WINDOW = _unstakeWindow;\\n    }\\n\\n    /**\\n     * @param _nameArg Token name\\n     * @param _symbolArg Token symbol\\n     * @param _rewardsDistributorArg mStable Rewards Distributor\\n     */\\n    function __StakedToken_init(\\n        bytes32 _nameArg,\\n        bytes32 _symbolArg,\\n        address _rewardsDistributorArg\\n    ) public initializer {\\n        __GamifiedToken_init(_nameArg, _symbolArg, _rewardsDistributorArg);\\n        _initializeReentrancyGuard();\\n        safetyData = SafetyData({ collateralisationRatio: 1e18, slashingPercentage: 0 });\\n    }\\n\\n    /**\\n     * @dev Only the recollateralisation module, as specified in the mStable Nexus, can execute this\\n     */\\n    modifier onlyRecollateralisationModule() {\\n        require(_msgSender() == _recollateraliser(), \\\"Only Recollateralisation Module\\\");\\n        _;\\n    }\\n\\n    /**\\n     * @dev This protects against fn's being called after a recollateralisation event, when the contract is essentially finished\\n     */\\n    modifier onlyBeforeRecollateralisation() {\\n        _onlyBeforeRecollateralisation();\\n        _;\\n    }\\n\\n    function _onlyBeforeRecollateralisation() internal view {\\n        require(safetyData.collateralisationRatio == 1e18, \\\"Only while fully collateralised\\\");\\n    }\\n\\n    /**\\n     * @dev Only whitelisted contracts can call core fns. mStable governors can whitelist and de-whitelist wrappers.\\n     * Access may be given to yield optimisers to boost rewards, but creating unlimited and ungoverned wrappers is unadvised.\\n     */\\n    modifier assertNotContract() {\\n        _assertNotContract();\\n        _;\\n    }\\n\\n    function _assertNotContract() internal view {\\n        if (_msgSender() != tx.origin) {\\n            require(whitelistedWrappers[_msgSender()], \\\"Not a whitelisted contract\\\");\\n        }\\n    }\\n\\n    /***************************************\\n                    ACTIONS\\n    ****************************************/\\n\\n    /**\\n     * @dev Stake an `_amount` of STAKED_TOKEN in the system. This amount is added to the users stake and\\n     * boosts their voting power.\\n     * @param _amount Units of STAKED_TOKEN to stake\\n     */\\n    function stake(uint256 _amount) external {\\n        _transferAndStake(_amount, address(0), false);\\n    }\\n\\n    /**\\n     * @dev Stake an `_amount` of STAKED_TOKEN in the system. This amount is added to the users stake and\\n     * boosts their voting power.\\n     * @param _amount Units of STAKED_TOKEN to stake\\n     * @param _exitCooldown Bool signalling whether to take this opportunity to end any outstanding cooldown and\\n     * return the user back to their full voting power\\n     */\\n    function stake(uint256 _amount, bool _exitCooldown) external {\\n        _transferAndStake(_amount, address(0), _exitCooldown);\\n    }\\n\\n    /**\\n     * @dev Stake an `_amount` of STAKED_TOKEN in the system. This amount is added to the users stake and\\n     * boosts their voting power. Take the opportunity to change delegatee.\\n     * @param _amount Units of STAKED_TOKEN to stake\\n     * @param _delegatee Address of the user to whom the sender would like to delegate their voting power\\n     */\\n    function stake(uint256 _amount, address _delegatee) external {\\n        _transferAndStake(_amount, _delegatee, false);\\n    }\\n\\n    /**\\n     * @dev Transfers tokens from sender before calling `_settleStake`\\n     */\\n    function _transferAndStake(\\n        uint256 _amount,\\n        address _delegatee,\\n        bool _exitCooldown\\n    ) internal {\\n        STAKED_TOKEN.safeTransferFrom(_msgSender(), address(this), _amount);\\n        _settleStake(_amount, _delegatee, _exitCooldown);\\n    }\\n\\n    /**\\n     * @dev Internal stake fn. Can only be called by whitelisted contracts/EOAs and only before a recollateralisation event.\\n     * NOTE - Assumes tokens have already been transferred\\n     * @param _amount Units of STAKED_TOKEN to stake\\n     * @param _delegatee Address of the user to whom the sender would like to delegate their voting power\\n     * @param _exitCooldown Bool signalling whether to take this opportunity to end any outstanding cooldown and\\n     * return the user back to their full voting power\\n     */\\n    function _settleStake(\\n        uint256 _amount,\\n        address _delegatee,\\n        bool _exitCooldown\\n    ) internal onlyBeforeRecollateralisation assertNotContract {\\n        require(_amount != 0, \\\"INVALID_ZERO_AMOUNT\\\");\\n\\n        // 1. Apply the delegate if it has been chosen (else it defaults to the sender)\\n        if (_delegatee != address(0)) {\\n            _delegate(_msgSender(), _delegatee);\\n        }\\n\\n        // 2. Deal with cooldown\\n        //      If a user is currently in a cooldown period, re-calculate their cooldown timestamp\\n        Balance memory oldBalance = _balances[_msgSender()];\\n        //      If we have missed the unstake window, or the user has chosen to exit the cooldown,\\n        //      then reset the timestamp to 0\\n        bool exitCooldown = _exitCooldown ||\\n            (oldBalance.cooldownTimestamp > 0 &&\\n                block.timestamp >\\n                (oldBalance.cooldownTimestamp + COOLDOWN_SECONDS + UNSTAKE_WINDOW));\\n        if (exitCooldown) {\\n            emit CooldownExited(_msgSender());\\n        }\\n\\n        // 3. Settle the stake by depositing the STAKED_TOKEN and minting voting power\\n        _mintRaw(_msgSender(), _amount, exitCooldown);\\n\\n        emit Staked(_msgSender(), _amount, _delegatee);\\n    }\\n\\n    /**\\n     * @dev Withdraw raw tokens from the system, following an elapsed cooldown period.\\n     * Note - May be subject to a transfer fee, depending on the users weightedTimestamp\\n     * @param _amount Units of raw token to withdraw\\n     * @param _recipient Address of beneficiary who will receive the raw tokens\\n     * @param _amountIncludesFee Is the `_amount` specified inclusive of any applicable redemption fee?\\n     * @param _exitCooldown Should we take this opportunity to exit the cooldown period?\\n     **/\\n    function withdraw(\\n        uint256 _amount,\\n        address _recipient,\\n        bool _amountIncludesFee,\\n        bool _exitCooldown\\n    ) external {\\n        _withdraw(_amount, _recipient, _amountIncludesFee, _exitCooldown);\\n    }\\n\\n    /**\\n     * @dev Withdraw raw tokens from the system, following an elapsed cooldown period.\\n     * Note - May be subject to a transfer fee, depending on the users weightedTimestamp\\n     * @param _amount Units of raw token to withdraw\\n     * @param _recipient Address of beneficiary who will receive the raw tokens\\n     * @param _amountIncludesFee Is the `_amount` specified inclusive of any applicable redemption fee?\\n     * @param _exitCooldown Should we take this opportunity to exit the cooldown period?\\n     **/\\n    function _withdraw(\\n        uint256 _amount,\\n        address _recipient,\\n        bool _amountIncludesFee,\\n        bool _exitCooldown\\n    ) internal assertNotContract {\\n        require(_amount != 0, \\\"INVALID_ZERO_AMOUNT\\\");\\n\\n        // Is the contract post-recollateralisation?\\n        if (safetyData.collateralisationRatio != 1e18) {\\n            // 1. If recollateralisation has occured, the contract is finished and we can skip all checks\\n            _burnRaw(_msgSender(), _amount, false, true);\\n            // 2. Return a proportionate amount of tokens, based on the collateralisation ratio\\n            STAKED_TOKEN.safeTransfer(\\n                _recipient,\\n                (_amount * safetyData.collateralisationRatio) / 1e18\\n            );\\n            emit Withdraw(_msgSender(), _recipient, _amount);\\n        } else {\\n            // 1. If no recollateralisation has occured, the user must be within their UNSTAKE_WINDOW period in order to withdraw\\n            Balance memory oldBalance = _balances[_msgSender()];\\n            require(\\n                block.timestamp > oldBalance.cooldownTimestamp + COOLDOWN_SECONDS,\\n                \\\"INSUFFICIENT_COOLDOWN\\\"\\n            );\\n            require(\\n                block.timestamp - (oldBalance.cooldownTimestamp + COOLDOWN_SECONDS) <=\\n                    UNSTAKE_WINDOW,\\n                \\\"UNSTAKE_WINDOW_FINISHED\\\"\\n            );\\n\\n            // 2. Get current balance\\n            Balance memory balance = _balances[_msgSender()];\\n\\n            // 3. Apply redemption fee\\n            //      e.g. (55e18 / 5e18) - 2e18 = 9e18 / 100 = 9e16\\n            uint256 feeRate = calcRedemptionFeeRate(balance.weightedTimestamp);\\n            //      fee = amount * 1e18 / feeRate\\n            //      totalAmount = amount + fee\\n            uint256 totalWithdraw = _amountIncludesFee\\n                ? _amount\\n                : (_amount * (1e18 + feeRate)) / 1e18;\\n            uint256 userWithdrawal = (totalWithdraw * 1e18) / (1e18 + feeRate);\\n\\n            //      Check for percentage withdrawal\\n            uint256 maxWithdrawal = oldBalance.cooldownUnits;\\n            require(totalWithdraw <= maxWithdrawal, \\\"Exceeds max withdrawal\\\");\\n\\n            // 4. Exit cooldown if the user has specified, or if they have withdrawn everything\\n            // Otherwise, update the percentage remaining proportionately\\n            bool exitCooldown = _exitCooldown || totalWithdraw == maxWithdrawal;\\n\\n            // 5. Settle the withdrawal by burning the voting tokens\\n            _burnRaw(_msgSender(), totalWithdraw, exitCooldown, false);\\n            //      Log any redemption fee to the rewards contract\\n            _notifyAdditionalReward(totalWithdraw - userWithdrawal);\\n            //      Finally transfer tokens back to recipient\\n            STAKED_TOKEN.safeTransfer(_recipient, userWithdrawal);\\n\\n            emit Withdraw(_msgSender(), _recipient, _amount);\\n        }\\n    }\\n\\n    /**\\n     * @dev Enters a cooldown period, after which (and before the unstake window elapses) a user will be able\\n     * to withdraw part or all of their staked tokens. Note, during this period, a users voting power is significantly reduced.\\n     * If a user already has a cooldown period, then it will reset to the current block timestamp, so use wisely.\\n     * @param _units Units of stake to cooldown for\\n     **/\\n    function startCooldown(uint256 _units) external {\\n        _startCooldown(_units);\\n    }\\n\\n    /**\\n     * @dev Ends the cooldown of the sender and give them back their full voting power. This can be used to signal that\\n     * the user no longer wishes to exit the system. Note, the cooldown can also be reset, more smoothly, as part of a stake or\\n     * withdraw transaction.\\n     **/\\n    function endCooldown() external {\\n        require(_balances[_msgSender()].cooldownTimestamp != 0, \\\"No cooldown\\\");\\n\\n        _exitCooldownPeriod(_msgSender());\\n\\n        emit CooldownExited(_msgSender());\\n    }\\n\\n    /**\\n     * @dev Enters a cooldown period, after which (and before the unstake window elapses) a user will be able\\n     * to withdraw part or all of their staked tokens. Note, during this period, a users voting power is significantly reduced.\\n     * If a user already has a cooldown period, then it will reset to the current block timestamp, so use wisely.\\n     * @param _units Units of stake to cooldown for\\n     **/\\n    function _startCooldown(uint256 _units) internal {\\n        require(balanceOf(_msgSender()) != 0, \\\"INVALID_BALANCE_ON_COOLDOWN\\\");\\n\\n        _enterCooldownPeriod(_msgSender(), _units);\\n\\n        emit Cooldown(_msgSender(), _units);\\n    }\\n\\n    /***************************************\\n                    ADMIN\\n    ****************************************/\\n\\n    /**\\n     * @dev This is a write function allowing the whitelisted recollateralisation module to slash stakers here and take\\n     * the capital to use to recollateralise any lost value in the system. Trusting that the recollateralisation module has\\n     * sufficient protections put in place. Note, once this has been executed, the contract is now finished, and undercollateralised,\\n     * meaning that all users must withdraw, and will only receive a proportionate amount back relative to the colRatio.\\n     **/\\n    function emergencyRecollateralisation()\\n        external\\n        onlyRecollateralisationModule\\n        onlyBeforeRecollateralisation\\n    {\\n        // 1. Change collateralisation rate\\n        safetyData.collateralisationRatio = 1e18 - safetyData.slashingPercentage;\\n        // 2. Take slashing percentage\\n        uint256 balance = STAKED_TOKEN.balanceOf(address(this));\\n        STAKED_TOKEN.safeTransfer(\\n            _recollateraliser(),\\n            (balance * safetyData.slashingPercentage) / 1e18\\n        );\\n        // 3. No functions should work anymore because the colRatio has changed\\n        emit Recollateralised();\\n    }\\n\\n    /**\\n     * @dev Governance can change the slashing percentage here (initially 0). This is the amount of a stakers capital that is at\\n     * risk in the recollateralisation process.\\n     * @param _newRate Rate, where 50% == 5e17\\n     **/\\n    function changeSlashingPercentage(uint256 _newRate)\\n        external\\n        onlyGovernor\\n        onlyBeforeRecollateralisation\\n    {\\n        require(_newRate <= 5e17, \\\"Cannot exceed 50%\\\");\\n\\n        safetyData.slashingPercentage = SafeCast.toUint128(_newRate);\\n\\n        emit SlashRateChanged(_newRate);\\n    }\\n\\n    /**\\n     * @dev Allows governance to whitelist a smart contract to interact with the StakedToken (for example a yield aggregator or simply\\n     * a Gnosis SAFE or other)\\n     * @param _wrapper Address of the smart contract to list\\n     **/\\n    function whitelistWrapper(address _wrapper) external onlyGovernor {\\n        whitelistedWrappers[_wrapper] = true;\\n\\n        emit WrapperWhitelisted(_wrapper);\\n    }\\n\\n    /**\\n     * @dev Allows governance to blacklist a smart contract to end it's interaction with the StakedToken\\n     * @param _wrapper Address of the smart contract to blacklist\\n     **/\\n    function blackListWrapper(address _wrapper) external onlyGovernor {\\n        whitelistedWrappers[_wrapper] = false;\\n\\n        emit WrapperBlacklisted(_wrapper);\\n    }\\n\\n    /***************************************\\n            BACKWARDS COMPATIBILITY\\n    ****************************************/\\n\\n    /**\\n     * @dev Allows for backwards compatibility with createLock fn, giving basic args to stake\\n     * @param _value Units to stake\\n     **/\\n    function createLock(\\n        uint256 _value,\\n        uint256 /* _unlockTime */\\n    ) external {\\n        _transferAndStake(_value, address(0), false);\\n    }\\n\\n    /**\\n     * @dev Allows for backwards compatibility with increaseLockAmount fn by simply staking more\\n     * @param _value Units to stake\\n     **/\\n    function increaseLockAmount(uint256 _value) external {\\n        require(balanceOf(_msgSender()) != 0, \\\"Nothing to increase\\\");\\n        _transferAndStake(_value, address(0), false);\\n    }\\n\\n    /**\\n     * @dev Backwards compatibility. Previously a lock would run out and a user would call this. Now, it will take 2 calls\\n     * to exit in order to leave. The first will initiate the cooldown period, and the second will execute a full withdrawal.\\n     **/\\n    function exit() external virtual {\\n        // Since there is no immediate exit here, this can be called twice\\n        // If there is no cooldown, or the cooldown has passed the unstake window, enter cooldown\\n        uint128 ts = _balances[_msgSender()].cooldownTimestamp;\\n        if (ts == 0 || block.timestamp > ts + COOLDOWN_SECONDS + UNSTAKE_WINDOW) {\\n            (uint256 raw, uint256 cooldownUnits) = rawBalanceOf(_msgSender());\\n            _startCooldown(raw + cooldownUnits);\\n        }\\n        // Else withdraw all available\\n        else {\\n            _withdraw(_balances[_msgSender()].cooldownUnits, _msgSender(), true, false);\\n        }\\n    }\\n\\n    /***************************************\\n                    GETTERS\\n    ****************************************/\\n\\n    /**\\n     * @dev fee = sqrt(300/x)-2.5, where x = weeks since user has staked\\n     * @param _weightedTimestamp The users weightedTimestamp\\n     * @return _feeRate where 1% == 1e16\\n     */\\n    function calcRedemptionFeeRate(uint32 _weightedTimestamp)\\n        public\\n        view\\n        returns (uint256 _feeRate)\\n    {\\n        uint256 weeksStaked = ((block.timestamp - _weightedTimestamp) * 1e18) / ONE_WEEK;\\n        if (weeksStaked > 3e18) {\\n            // e.g. weeks = 1  = sqrt(300e18) = 17320508075\\n            // e.g. weeks = 10 = sqrt(30e18) =   5477225575\\n            // e.g. weeks = 26 = sqrt(11.5) =    3391164991\\n            _feeRate = Root.sqrt(300e36 / weeksStaked) * 1e7;\\n            // e.g. weeks = 1  = 173e15 - 25e15 = 148e15 or 14.8%\\n            // e.g. weeks = 10 =  55e15 - 25e15 = 30e15 or 3%\\n            // e.g. weeks = 26 =  34e15 - 25e15 = 9e15 or 0.9%\\n            _feeRate = _feeRate < 25e15 ? 0 : _feeRate - 25e15;\\n        } else {\\n            _feeRate = 75e15;\\n        }\\n    }\\n\\n    uint256[48] private __gap;\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/token/ERC20/IERC20.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC20 standard as defined in the EIP.\\n */\\ninterface IERC20 {\\n    /**\\n     * @dev Returns the amount of tokens in existence.\\n     */\\n    function totalSupply() external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the amount of tokens owned by `account`.\\n     */\\n    function balanceOf(address account) external view returns (uint256);\\n\\n    /**\\n     * @dev Moves `amount` tokens from the caller's account to `recipient`.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transfer(address recipient, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Returns the remaining number of tokens that `spender` will be\\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\\n     * zero by default.\\n     *\\n     * This value changes when {approve} or {transferFrom} are called.\\n     */\\n    function allowance(address owner, address spender) external view returns (uint256);\\n\\n    /**\\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\\n     * that someone may use both the old and the new allowance by unfortunate\\n     * transaction ordering. One possible solution to mitigate this race\\n     * condition is to first reduce the spender's allowance to 0 and set the\\n     * desired value afterwards:\\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address spender, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Moves `amount` tokens from `sender` to `recipient` using the\\n     * allowance mechanism. `amount` is then deducted from the caller's\\n     * allowance.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(\\n        address sender,\\n        address recipient,\\n        uint256 amount\\n    ) external returns (bool);\\n\\n    /**\\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\\n     * another (`to`).\\n     *\\n     * Note that `value` may be zero.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 value);\\n\\n    /**\\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\\n     * a call to {approve}. `value` is the new allowance.\\n     */\\n    event Approval(address indexed owner, address indexed spender, uint256 value);\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../IERC20.sol\\\";\\nimport \\\"../../../utils/Address.sol\\\";\\n\\n/**\\n * @title SafeERC20\\n * @dev Wrappers around ERC20 operations that throw on failure (when the token\\n * contract returns false). Tokens that return no value (and instead revert or\\n * throw on failure) are also supported, non-reverting calls are assumed to be\\n * successful.\\n * To use this library you can add a `using SafeERC20 for IERC20;` statement to your contract,\\n * which allows you to call the safe operations as `token.safeTransfer(...)`, etc.\\n */\\nlibrary SafeERC20 {\\n    using Address for address;\\n\\n    function safeTransfer(\\n        IERC20 token,\\n        address to,\\n        uint256 value\\n    ) internal {\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.transfer.selector, to, value));\\n    }\\n\\n    function safeTransferFrom(\\n        IERC20 token,\\n        address from,\\n        address to,\\n        uint256 value\\n    ) internal {\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.transferFrom.selector, from, to, value));\\n    }\\n\\n    /**\\n     * @dev Deprecated. This function has issues similar to the ones found in\\n     * {IERC20-approve}, and its usage is discouraged.\\n     *\\n     * Whenever possible, use {safeIncreaseAllowance} and\\n     * {safeDecreaseAllowance} instead.\\n     */\\n    function safeApprove(\\n        IERC20 token,\\n        address spender,\\n        uint256 value\\n    ) internal {\\n        // safeApprove should only be called when setting an initial allowance,\\n        // or when resetting it to zero. To increase and decrease it, use\\n        // 'safeIncreaseAllowance' and 'safeDecreaseAllowance'\\n        require(\\n            (value == 0) || (token.allowance(address(this), spender) == 0),\\n            \\\"SafeERC20: approve from non-zero to non-zero allowance\\\"\\n        );\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, value));\\n    }\\n\\n    function safeIncreaseAllowance(\\n        IERC20 token,\\n        address spender,\\n        uint256 value\\n    ) internal {\\n        uint256 newAllowance = token.allowance(address(this), spender) + value;\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));\\n    }\\n\\n    function safeDecreaseAllowance(\\n        IERC20 token,\\n        address spender,\\n        uint256 value\\n    ) internal {\\n        unchecked {\\n            uint256 oldAllowance = token.allowance(address(this), spender);\\n            require(oldAllowance >= value, \\\"SafeERC20: decreased allowance below zero\\\");\\n            uint256 newAllowance = oldAllowance - value;\\n            _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));\\n        }\\n    }\\n\\n    /**\\n     * @dev Imitates a Solidity high-level call (i.e. a regular function call to a contract), relaxing the requirement\\n     * on the return value: the return value is optional (but if data is returned, it must not be false).\\n     * @param token The token targeted by the call.\\n     * @param data The call data (encoded using abi.encode or one of its variants).\\n     */\\n    function _callOptionalReturn(IERC20 token, bytes memory data) private {\\n        // We need to perform a low level call here, to bypass Solidity's return data size checking mechanism, since\\n        // we're implementing it ourselves. We use {Address.functionCall} to perform this call, which verifies that\\n        // the target address contains contract code and also asserts for success in the low-level call.\\n\\n        bytes memory returndata = address(token).functionCall(data, \\\"SafeERC20: low-level call failed\\\");\\n        if (returndata.length > 0) {\\n            // Return data is optional\\n            require(abi.decode(returndata, (bool)), \\\"SafeERC20: ERC20 operation did not succeed\\\");\\n        }\\n    }\\n}\\n\"\r\n    },\r\n    \"contracts/governance/staking/interfaces/IBVault.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.0;\\n\\nstruct ExitPoolRequest {\\n    address[] assets;\\n    uint256[] minAmountsOut;\\n    bytes userData;\\n    bool toInternalBalance;\\n}\\n\\ninterface IBVault {\\n    function exitPool(\\n        bytes32 poolId,\\n        address sender,\\n        address payable recipient,\\n        ExitPoolRequest memory request\\n    ) external;\\n\\n    function getPoolTokens(bytes32 poolId)\\n        external\\n        view\\n        returns (\\n            address[] memory tokens,\\n            uint256[] memory balances,\\n            uint256 lastChangeBlock\\n        );\\n}\\n\"\r\n    },\r\n    \"contracts/governance/staking/interfaces/IStakedToken.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: AGPL-3.0-or-later\\npragma solidity 0.8.6;\\n\\nimport { IERC20 } from \\\"@openzeppelin/contracts/token/ERC20/IERC20.sol\\\";\\nimport \\\"../deps/GamifiedTokenStructs.sol\\\";\\n\\ninterface IStakedToken {\\n    // GETTERS\\n    function COOLDOWN_SECONDS() external view returns (uint256);\\n\\n    function UNSTAKE_WINDOW() external view returns (uint256);\\n\\n    function STAKED_TOKEN() external view returns (IERC20);\\n\\n    function getRewardToken() external view returns (address);\\n\\n    function pendingAdditionalReward() external view returns (uint256);\\n\\n    function whitelistedWrappers(address) external view returns (bool);\\n\\n    function balanceData(address _account) external view returns (Balance memory);\\n\\n    function balanceOf(address _account) external view returns (uint256);\\n\\n    function rawBalanceOf(address _account) external view returns (uint256, uint256);\\n\\n    function calcRedemptionFeeRate(uint32 _weightedTimestamp)\\n        external\\n        view\\n        returns (uint256 _feeRate);\\n\\n    function safetyData()\\n        external\\n        view\\n        returns (uint128 collateralisationRatio, uint128 slashingPercentage);\\n\\n    function delegates(address account) external view returns (address);\\n\\n    function getPastTotalSupply(uint256 blockNumber) external view returns (uint256);\\n\\n    function getPastVotes(address account, uint256 blockNumber) external view returns (uint256);\\n\\n    function getVotes(address account) external view returns (uint256);\\n\\n    // HOOKS/PERMISSIONED\\n    function applyQuestMultiplier(address _account, uint8 _newMultiplier) external;\\n\\n    // ADMIN\\n    function whitelistWrapper(address _wrapper) external;\\n\\n    function blackListWrapper(address _wrapper) external;\\n\\n    function changeSlashingPercentage(uint256 _newRate) external;\\n\\n    function emergencyRecollateralisation() external;\\n\\n    function setGovernanceHook(address _newHook) external;\\n\\n    // USER\\n    function stake(uint256 _amount) external;\\n\\n    function stake(uint256 _amount, address _delegatee) external;\\n\\n    function stake(uint256 _amount, bool _exitCooldown) external;\\n\\n    function withdraw(\\n        uint256 _amount,\\n        address _recipient,\\n        bool _amountIncludesFee,\\n        bool _exitCooldown\\n    ) external;\\n\\n    function delegate(address delegatee) external;\\n\\n    function startCooldown(uint256 _units) external;\\n\\n    function endCooldown() external;\\n\\n    function reviewTimestamp(address _account) external;\\n\\n    function claimReward() external;\\n\\n    function claimReward(address _to) external;\\n\\n    // Backwards compatibility\\n    function createLock(uint256 _value, uint256) external;\\n\\n    function exit() external;\\n\\n    function increaseLockAmount(uint256 _value) external;\\n\\n    function increaseLockLength(uint256) external;\\n}\\n\"\r\n    },\r\n    \"contracts/governance/staking/GamifiedVotingToken.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: AGPL-3.0-or-later\\npragma solidity 0.8.6;\\n\\nimport { MathUpgradeable } from \\\"@openzeppelin/contracts-upgradeable/utils/math/MathUpgradeable.sol\\\";\\nimport { SafeCast } from \\\"@openzeppelin/contracts/utils/math/SafeCast.sol\\\";\\nimport { ECDSAUpgradeable } from \\\"@openzeppelin/contracts-upgradeable/utils/cryptography/ECDSAUpgradeable.sol\\\";\\nimport { GamifiedToken } from \\\"./GamifiedToken.sol\\\";\\nimport { IGovernanceHook } from \\\"./interfaces/IGovernanceHook.sol\\\";\\nimport { Initializable } from \\\"@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol\\\";\\n\\n/**\\n * @title GamifiedVotingToken\\n * @notice GamifiedToken is a checkpointed Voting Token derived from OpenZeppelin \\\"ERC20VotesUpgradable\\\"\\n * @author mStable\\n * @dev Forked from https://github.com/OpenZeppelin/openzeppelin-contracts-upgradeable/blob/f9cdbd7d82d45a614ee98a5dc8c08fb4347d0fea/contracts/token/ERC20/extensions/ERC20VotesUpgradeable.sol\\n * Changes:\\n *   - Inherits custom GamifiedToken rather than basic ERC20\\n *     - Removal of `Permit` functionality & `delegatebySig`\\n *   - Override `delegates` fn as described in their docs\\n *   - Prettier formatting\\n *   - Addition of `totalSupply` method to get latest totalSupply\\n *   - Move totalSupply checkpoints to `afterTokenTransfer`\\n *   - Add _governanceHook hook\\n */\\nabstract contract GamifiedVotingToken is Initializable, GamifiedToken {\\n    struct Checkpoint {\\n        uint32 fromBlock;\\n        uint224 votes;\\n    }\\n\\n    mapping(address => address) private _delegates;\\n    mapping(address => Checkpoint[]) private _checkpoints;\\n    Checkpoint[] private _totalSupplyCheckpoints;\\n\\n    IGovernanceHook private _governanceHook;\\n\\n    event GovernanceHookChanged(address indexed hook);\\n\\n    /**\\n     * @dev Emitted when an account changes their delegate.\\n     */\\n    event DelegateChanged(\\n        address indexed delegator,\\n        address indexed fromDelegate,\\n        address indexed toDelegate\\n    );\\n\\n    /**\\n     * @dev Emitted when a token transfer or delegate change results in changes to an account's voting power.\\n     */\\n    event DelegateVotesChanged(\\n        address indexed delegate,\\n        uint256 previousBalance,\\n        uint256 newBalance\\n    );\\n\\n    constructor(\\n        address _nexus,\\n        address _rewardsToken,\\n        address _questManager,\\n        bool _hasPriceCoeff\\n    ) GamifiedToken(_nexus, _rewardsToken, _questManager, _hasPriceCoeff) {}\\n\\n    function __GamifiedVotingToken_init() internal initializer {}\\n\\n    /**\\n     * @dev\\n     */\\n    function setGovernanceHook(address _newHook) external onlyGovernor {\\n        _governanceHook = IGovernanceHook(_newHook);\\n\\n        emit GovernanceHookChanged(_newHook);\\n    }\\n\\n    /**\\n     * @dev Get the `pos`-th checkpoint for `account`.\\n     */\\n    function checkpoints(address account, uint32 pos)\\n        public\\n        view\\n        virtual\\n        returns (Checkpoint memory)\\n    {\\n        return _checkpoints[account][pos];\\n    }\\n\\n    /**\\n     * @dev Get number of checkpoints for `account`.\\n     */\\n    function numCheckpoints(address account) public view virtual returns (uint32) {\\n        return SafeCast.toUint32(_checkpoints[account].length);\\n    }\\n\\n    /**\\n     * @dev Get the address `account` is currently delegating to.\\n     */\\n    function delegates(address account) public view virtual returns (address) {\\n        // Override as per https://github.com/OpenZeppelin/openzeppelin-contracts-upgradeable/blob/master/contracts/token/ERC20/extensions/ERC20VotesUpgradeable.sol#L23\\n        // return _delegates[account];\\n        address delegatee = _delegates[account];\\n        return delegatee == address(0) ? account : delegatee;\\n    }\\n\\n    /**\\n     * @dev Gets the current votes balance for `account`\\n     */\\n    function getVotes(address account) public view returns (uint256) {\\n        uint256 pos = _checkpoints[account].length;\\n        return pos == 0 ? 0 : _checkpoints[account][pos - 1].votes;\\n    }\\n\\n    /**\\n     * @dev Retrieve the number of votes for `account` at the end of `blockNumber`.\\n     *\\n     * Requirements:\\n     *\\n     * - `blockNumber` must have been already mined\\n     */\\n    function getPastVotes(address account, uint256 blockNumber) public view returns (uint256) {\\n        require(blockNumber < block.number, \\\"ERC20Votes: block not yet mined\\\");\\n        return _checkpointsLookup(_checkpoints[account], blockNumber);\\n    }\\n\\n    /**\\n     * @dev Retrieve the `totalSupply` at the end of `blockNumber`. Note, this value is the sum of all balances.\\n     * It is but NOT the sum of all the delegated votes!\\n     *\\n     * Requirements:\\n     *\\n     * - `blockNumber` must have been already mined\\n     */\\n    function getPastTotalSupply(uint256 blockNumber) public view returns (uint256) {\\n        require(blockNumber < block.number, \\\"ERC20Votes: block not yet mined\\\");\\n        return _checkpointsLookup(_totalSupplyCheckpoints, blockNumber);\\n    }\\n\\n    /**\\n     * @dev Total sum of all scaled balances\\n     */\\n    function totalSupply() public view override returns (uint256) {\\n        uint256 len = _totalSupplyCheckpoints.length;\\n        if (len == 0) return 0;\\n        return _totalSupplyCheckpoints[len - 1].votes;\\n    }\\n\\n    /**\\n     * @dev Lookup a value in a list of (sorted) checkpoints.\\n     */\\n    function _checkpointsLookup(Checkpoint[] storage ckpts, uint256 blockNumber)\\n        private\\n        view\\n        returns (uint256)\\n    {\\n        // We run a binary search to look for the earliest checkpoint taken after `blockNumber`.\\n        //\\n        // During the loop, the index of the wanted checkpoint remains in the range [low, high).\\n        // With each iteration, either `low` or `high` is moved towards the middle of the range to maintain the invariant.\\n        // - If the middle checkpoint is after `blockNumber`, we look in [low, mid)\\n        // - If the middle checkpoint is before or equal to `blockNumber`, we look in [mid+1, high)\\n        // Once we reach a single value (when low == high), we've found the right checkpoint at the index high-1, if not\\n        // out of bounds (in which case we're looking too far in the past and the result is 0).\\n        // Note that if the latest checkpoint available is exactly for `blockNumber`, we end up with an index that is\\n        // past the end of the array, so we technically don't find a checkpoint after `blockNumber`, but it works out\\n        // the same.\\n        uint256 high = ckpts.length;\\n        uint256 low = 0;\\n        while (low < high) {\\n            uint256 mid = MathUpgradeable.average(low, high);\\n            if (ckpts[mid].fromBlock > blockNumber) {\\n                high = mid;\\n            } else {\\n                low = mid + 1;\\n            }\\n        }\\n\\n        return high == 0 ? 0 : ckpts[high - 1].votes;\\n    }\\n\\n    /**\\n     * @dev Delegate votes from the sender to `delegatee`.\\n     */\\n    function delegate(address delegatee) public virtual {\\n        return _delegate(_msgSender(), delegatee);\\n    }\\n\\n    /**\\n     * @dev Move voting power when tokens are transferred.\\n     *\\n     * Emits a {DelegateVotesChanged} event.\\n     */\\n    function _afterTokenTransfer(\\n        address from,\\n        address to,\\n        uint256 amount\\n    ) internal virtual override {\\n        super._afterTokenTransfer(from, to, amount);\\n\\n        // mint or burn, update total supply\\n        if (from == address(0) || to == address(0)) {\\n            _writeCheckpoint(_totalSupplyCheckpoints, to == address(0) ? _subtract : _add, amount);\\n        }\\n\\n        _moveVotingPower(delegates(from), delegates(to), amount);\\n    }\\n\\n    /**\\n     * @dev Change delegation for `delegator` to `delegatee`.\\n     *\\n     * Emits events {DelegateChanged} and {DelegateVotesChanged}.\\n     */\\n    function _delegate(address delegator, address delegatee) internal virtual {\\n        address currentDelegate = delegates(delegator);\\n        uint256 delegatorBalance = balanceOf(delegator);\\n        _delegates[delegator] = delegatee;\\n\\n        emit DelegateChanged(delegator, currentDelegate, delegatee);\\n\\n        _moveVotingPower(currentDelegate, delegatee, delegatorBalance);\\n    }\\n\\n    function _moveVotingPower(\\n        address src,\\n        address dst,\\n        uint256 amount\\n    ) private {\\n        if (src != dst && amount > 0) {\\n            if (src != address(0)) {\\n                (uint256 oldWeight, uint256 newWeight) = _writeCheckpoint(\\n                    _checkpoints[src],\\n                    _subtract,\\n                    amount\\n                );\\n                emit DelegateVotesChanged(src, oldWeight, newWeight);\\n            }\\n\\n            if (dst != address(0)) {\\n                (uint256 oldWeight, uint256 newWeight) = _writeCheckpoint(\\n                    _checkpoints[dst],\\n                    _add,\\n                    amount\\n                );\\n                emit DelegateVotesChanged(dst, oldWeight, newWeight);\\n            }\\n\\n            if (address(_governanceHook) != address(0)) {\\n                _governanceHook.moveVotingPowerHook(src, dst, amount);\\n            }\\n        }\\n    }\\n\\n    function _writeCheckpoint(\\n        Checkpoint[] storage ckpts,\\n        function(uint256, uint256) view returns (uint256) op,\\n        uint256 delta\\n    ) private returns (uint256 oldWeight, uint256 newWeight) {\\n        uint256 pos = ckpts.length;\\n        oldWeight = pos == 0 ? 0 : ckpts[pos - 1].votes;\\n        newWeight = op(oldWeight, delta);\\n\\n        if (pos > 0 && ckpts[pos - 1].fromBlock == block.number) {\\n            ckpts[pos - 1].votes = SafeCast.toUint224(newWeight);\\n        } else {\\n            ckpts.push(\\n                Checkpoint({\\n                    fromBlock: SafeCast.toUint32(block.number),\\n                    votes: SafeCast.toUint224(newWeight)\\n                })\\n            );\\n        }\\n    }\\n\\n    function _add(uint256 a, uint256 b) private pure returns (uint256) {\\n        return a + b;\\n    }\\n\\n    function _subtract(uint256 a, uint256 b) private pure returns (uint256) {\\n        return a - b;\\n    }\\n\\n    uint256[46] private __gap;\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/utils/math/SafeCast.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Wrappers over Solidity's uintXX/intXX casting operators with added overflow\\n * checks.\\n *\\n * Downcasting from uint256/int256 in Solidity does not revert on overflow. This can\\n * easily result in undesired exploitation or bugs, since developers usually\\n * assume that overflows raise errors. `SafeCast` restores this intuition by\\n * reverting the transaction when such an operation overflows.\\n *\\n * Using this library instead of the unchecked operations eliminates an entire\\n * class of bugs, so it's recommended to use it always.\\n *\\n * Can be combined with {SafeMath} and {SignedSafeMath} to extend it to smaller types, by performing\\n * all math on `uint256` and `int256` and then downcasting.\\n */\\nlibrary SafeCast {\\n    /**\\n     * @dev Returns the downcasted uint224 from uint256, reverting on\\n     * overflow (when the input is greater than largest uint224).\\n     *\\n     * Counterpart to Solidity's `uint224` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 224 bits\\n     */\\n    function toUint224(uint256 value) internal pure returns (uint224) {\\n        require(value <= type(uint224).max, \\\"SafeCast: value doesn't fit in 224 bits\\\");\\n        return uint224(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted uint128 from uint256, reverting on\\n     * overflow (when the input is greater than largest uint128).\\n     *\\n     * Counterpart to Solidity's `uint128` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 128 bits\\n     */\\n    function toUint128(uint256 value) internal pure returns (uint128) {\\n        require(value <= type(uint128).max, \\\"SafeCast: value doesn't fit in 128 bits\\\");\\n        return uint128(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted uint96 from uint256, reverting on\\n     * overflow (when the input is greater than largest uint96).\\n     *\\n     * Counterpart to Solidity's `uint96` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 96 bits\\n     */\\n    function toUint96(uint256 value) internal pure returns (uint96) {\\n        require(value <= type(uint96).max, \\\"SafeCast: value doesn't fit in 96 bits\\\");\\n        return uint96(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted uint64 from uint256, reverting on\\n     * overflow (when the input is greater than largest uint64).\\n     *\\n     * Counterpart to Solidity's `uint64` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 64 bits\\n     */\\n    function toUint64(uint256 value) internal pure returns (uint64) {\\n        require(value <= type(uint64).max, \\\"SafeCast: value doesn't fit in 64 bits\\\");\\n        return uint64(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted uint32 from uint256, reverting on\\n     * overflow (when the input is greater than largest uint32).\\n     *\\n     * Counterpart to Solidity's `uint32` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 32 bits\\n     */\\n    function toUint32(uint256 value) internal pure returns (uint32) {\\n        require(value <= type(uint32).max, \\\"SafeCast: value doesn't fit in 32 bits\\\");\\n        return uint32(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted uint16 from uint256, reverting on\\n     * overflow (when the input is greater than largest uint16).\\n     *\\n     * Counterpart to Solidity's `uint16` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 16 bits\\n     */\\n    function toUint16(uint256 value) internal pure returns (uint16) {\\n        require(value <= type(uint16).max, \\\"SafeCast: value doesn't fit in 16 bits\\\");\\n        return uint16(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted uint8 from uint256, reverting on\\n     * overflow (when the input is greater than largest uint8).\\n     *\\n     * Counterpart to Solidity's `uint8` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 8 bits.\\n     */\\n    function toUint8(uint256 value) internal pure returns (uint8) {\\n        require(value <= type(uint8).max, \\\"SafeCast: value doesn't fit in 8 bits\\\");\\n        return uint8(value);\\n    }\\n\\n    /**\\n     * @dev Converts a signed int256 into an unsigned uint256.\\n     *\\n     * Requirements:\\n     *\\n     * - input must be greater than or equal to 0.\\n     */\\n    function toUint256(int256 value) internal pure returns (uint256) {\\n        require(value >= 0, \\\"SafeCast: value must be positive\\\");\\n        return uint256(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted int128 from int256, reverting on\\n     * overflow (when the input is less than smallest int128 or\\n     * greater than largest int128).\\n     *\\n     * Counterpart to Solidity's `int128` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 128 bits\\n     *\\n     * _Available since v3.1._\\n     */\\n    function toInt128(int256 value) internal pure returns (int128) {\\n        require(value >= type(int128).min && value <= type(int128).max, \\\"SafeCast: value doesn't fit in 128 bits\\\");\\n        return int128(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted int64 from int256, reverting on\\n     * overflow (when the input is less than smallest int64 or\\n     * greater than largest int64).\\n     *\\n     * Counterpart to Solidity's `int64` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 64 bits\\n     *\\n     * _Available since v3.1._\\n     */\\n    function toInt64(int256 value) internal pure returns (int64) {\\n        require(value >= type(int64).min && value <= type(int64).max, \\\"SafeCast: value doesn't fit in 64 bits\\\");\\n        return int64(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted int32 from int256, reverting on\\n     * overflow (when the input is less than smallest int32 or\\n     * greater than largest int32).\\n     *\\n     * Counterpart to Solidity's `int32` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 32 bits\\n     *\\n     * _Available since v3.1._\\n     */\\n    function toInt32(int256 value) internal pure returns (int32) {\\n        require(value >= type(int32).min && value <= type(int32).max, \\\"SafeCast: value doesn't fit in 32 bits\\\");\\n        return int32(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted int16 from int256, reverting on\\n     * overflow (when the input is less than smallest int16 or\\n     * greater than largest int16).\\n     *\\n     * Counterpart to Solidity's `int16` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 16 bits\\n     *\\n     * _Available since v3.1._\\n     */\\n    function toInt16(int256 value) internal pure returns (int16) {\\n        require(value >= type(int16).min && value <= type(int16).max, \\\"SafeCast: value doesn't fit in 16 bits\\\");\\n        return int16(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted int8 from int256, reverting on\\n     * overflow (when the input is less than smallest int8 or\\n     * greater than largest int8).\\n     *\\n     * Counterpart to Solidity's `int8` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 8 bits.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function toInt8(int256 value) internal pure returns (int8) {\\n        require(value >= type(int8).min && value <= type(int8).max, \\\"SafeCast: value doesn't fit in 8 bits\\\");\\n        return int8(value);\\n    }\\n\\n    /**\\n     * @dev Converts an unsigned uint256 into a signed int256.\\n     *\\n     * Requirements:\\n     *\\n     * - input must be less than or equal to maxInt256.\\n     */\\n    function toInt256(uint256 value) internal pure returns (int256) {\\n        // Note: Unsafe cast below is okay because `type(int256).max` is guaranteed to be positive\\n        require(value <= uint256(type(int256).max), \\\"SafeCast: value doesn't fit in an int256\\\");\\n        return int256(value);\\n    }\\n}\\n\"\r\n    },\r\n    \"contracts/shared/Root.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: AGPL-3.0-or-later\\npragma solidity 0.8.6;\\n\\nlibrary Root {\\n    /**\\n     * @dev Returns the square root of a given number\\n     * @param x Input\\n     * @return y Square root of Input\\n     */\\n    function sqrt(uint256 x) internal pure returns (uint256 y) {\\n        if (x == 0) return 0;\\n        else {\\n            uint256 xx = x;\\n            uint256 r = 1;\\n            if (xx >= 0x100000000000000000000000000000000) {\\n                xx >>= 128;\\n                r <<= 64;\\n            }\\n            if (xx >= 0x10000000000000000) {\\n                xx >>= 64;\\n                r <<= 32;\\n            }\\n            if (xx >= 0x100000000) {\\n                xx >>= 32;\\n                r <<= 16;\\n            }\\n            if (xx >= 0x10000) {\\n                xx >>= 16;\\n                r <<= 8;\\n            }\\n            if (xx >= 0x100) {\\n                xx >>= 8;\\n                r <<= 4;\\n            }\\n            if (xx >= 0x10) {\\n                xx >>= 4;\\n                r <<= 2;\\n            }\\n            if (xx >= 0x8) {\\n                r <<= 1;\\n            }\\n            r = (r + x / r) >> 1;\\n            r = (r + x / r) >> 1;\\n            r = (r + x / r) >> 1;\\n            r = (r + x / r) >> 1;\\n            r = (r + x / r) >> 1;\\n            r = (r + x / r) >> 1;\\n            r = (r + x / r) >> 1; // Seven iterations should be enough\\n            uint256 r1 = x / r;\\n            return uint256(r < r1 ? r : r1);\\n        }\\n    }\\n}\\n\"\r\n    },\r\n    \"contracts/shared/InitializableReentrancyGuard.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: AGPL-3.0-or-later\\npragma solidity 0.8.6;\\n\\n/**\\n * @dev Contract module that helps prevent reentrant calls to a function.\\n *\\n * Inheriting from `ReentrancyGuard` will make the {nonReentrant} modifier\\n * available, which can be applied to functions to make sure there are no nested\\n * (reentrant) calls to them.\\n *\\n * Note that because there is a single `nonReentrant` guard, functions marked as\\n * `nonReentrant` may not call one another. This can be worked around by making\\n * those functions `private`, and then adding `external` `nonReentrant` entry\\n * points to them.\\n *\\n * TIP: If you would like to learn more about reentrancy and alternative ways\\n * to protect against it, check out our blog post\\n * https://blog.openzeppelin.com/reentrancy-after-istanbul/[Reentrancy After Istanbul].\\n *\\n * _Since v2.5.0:_ this module is now much more gas efficient, given net gas\\n * metering changes introduced in the Istanbul hardfork.\\n */\\ncontract InitializableReentrancyGuard {\\n    bool private _notEntered;\\n\\n    function _initializeReentrancyGuard() internal {\\n        // Storing an initial non-zero value makes deployment a bit more\\n        // expensive, but in exchange the refund on every call to nonReentrant\\n        // will be lower in amount. Since refunds are capped to a percetange of\\n        // the total transaction's gas, it is best to keep them low in cases\\n        // like this one, to increase the likelihood of the full refund coming\\n        // into effect.\\n        _notEntered = true;\\n    }\\n\\n    /**\\n     * @dev Prevents a contract from calling itself, directly or indirectly.\\n     * Calling a `nonReentrant` function from another `nonReentrant`\\n     * function is not supported. It is possible to prevent this from happening\\n     * by making the `nonReentrant` function external, and make it call a\\n     * `private` function that does the actual work.\\n     */\\n    modifier nonReentrant() {\\n        // On the first call to nonReentrant, _notEntered will be true\\n        require(_notEntered, \\\"ReentrancyGuard: reentrant call\\\");\\n\\n        // Any calls to nonReentrant after this point will fail\\n        _notEntered = false;\\n\\n        _;\\n\\n        // By storing the original value once again, a refund is triggered (see\\n        // https://eips.ethereum.org/EIPS/eip-2200)\\n        _notEntered = true;\\n    }\\n}\\n\"\r\n    },\r\n    \"contracts/governance/staking/deps/GamifiedTokenStructs.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: AGPL-3.0-or-later\\npragma solidity 0.8.6;\\n\\nstruct Balance {\\n    /// units of staking token that has been deposited and consequently wrapped\\n    uint88 raw;\\n    /// (block.timestamp - weightedTimestamp) represents the seconds a user has had their full raw balance wrapped.\\n    /// If they deposit or withdraw, the weightedTimestamp is dragged towards block.timestamp proportionately\\n    uint32 weightedTimestamp;\\n    /// multiplier awarded for staking for a long time\\n    uint8 timeMultiplier;\\n    /// multiplier duplicated from QuestManager\\n    uint8 questMultiplier;\\n    /// Time at which the relative cooldown began\\n    uint32 cooldownTimestamp;\\n    /// Units up for cooldown\\n    uint88 cooldownUnits;\\n}\\n\\nstruct QuestBalance {\\n    /// last timestamp at which the user made a write action to this contract\\n    uint32 lastAction;\\n    /// permanent multiplier applied to an account, awarded for PERMANENT QuestTypes\\n    uint8 permMultiplier;\\n    /// multiplier that decays after each \\\"season\\\" (~9 months) by 75%, to avoid multipliers getting out of control\\n    uint8 seasonMultiplier;\\n}\\n\\n/// @notice Quests can either give permanent rewards or only for the season\\nenum QuestType {\\n    PERMANENT,\\n    SEASONAL\\n}\\n\\n/// @notice Quests can be turned off by the questMaster. All those who already completed remain\\nenum QuestStatus {\\n    ACTIVE,\\n    EXPIRED\\n}\\nstruct Quest {\\n    /// Type of quest rewards\\n    QuestType model;\\n    /// Multiplier, from 1 == 1.01x to 100 == 2.00x\\n    uint8 multiplier;\\n    /// Is the current quest valid?\\n    QuestStatus status;\\n    /// Expiry date in seconds for the quest\\n    uint32 expiry;\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts-upgradeable/utils/math/MathUpgradeable.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Standard math utilities missing in the Solidity language.\\n */\\nlibrary MathUpgradeable {\\n    /**\\n     * @dev Returns the largest of two numbers.\\n     */\\n    function max(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a >= b ? a : b;\\n    }\\n\\n    /**\\n     * @dev Returns the smallest of two numbers.\\n     */\\n    function min(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a < b ? a : b;\\n    }\\n\\n    /**\\n     * @dev Returns the average of two numbers. The result is rounded towards\\n     * zero.\\n     */\\n    function average(uint256 a, uint256 b) internal pure returns (uint256) {\\n        // (a + b) / 2 can overflow, so we distribute.\\n        return (a / 2) + (b / 2) + (((a % 2) + (b % 2)) / 2);\\n    }\\n\\n    /**\\n     * @dev Returns the ceiling of the division of two numbers.\\n     *\\n     * This differs from standard division with `/` in that it rounds up instead\\n     * of rounding down.\\n     */\\n    function ceilDiv(uint256 a, uint256 b) internal pure returns (uint256) {\\n        // (a + b - 1) / b can overflow on addition, so we distribute.\\n        return a / b + (a % b == 0 ? 0 : 1);\\n    }\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts-upgradeable/utils/cryptography/ECDSAUpgradeable.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Elliptic Curve Digital Signature Algorithm (ECDSA) operations.\\n *\\n * These functions can be used to verify that a message was signed by the holder\\n * of the private keys of a given address.\\n */\\nlibrary ECDSAUpgradeable {\\n    /**\\n     * @dev Returns the address that signed a hashed message (`hash`) with\\n     * `signature`. This address can then be used for verification purposes.\\n     *\\n     * The `ecrecover` EVM opcode allows for malleable (non-unique) signatures:\\n     * this function rejects them by requiring the `s` value to be in the lower\\n     * half order, and the `v` value to be either 27 or 28.\\n     *\\n     * IMPORTANT: `hash` _must_ be the result of a hash operation for the\\n     * verification to be secure: it is possible to craft signatures that\\n     * recover to arbitrary addresses for non-hashed data. A safe way to ensure\\n     * this is by receiving a hash of the original message (which may otherwise\\n     * be too long), and then calling {toEthSignedMessageHash} on it.\\n     *\\n     * Documentation for signature generation:\\n     * - with https://web3js.readthedocs.io/en/v1.3.4/web3-eth-accounts.html#sign[Web3.js]\\n     * - with https://docs.ethers.io/v5/api/signer/#Signer-signMessage[ethers]\\n     */\\n    function recover(bytes32 hash, bytes memory signature) internal pure returns (address) {\\n        // Check the signature length\\n        // - case 65: r,s,v signature (standard)\\n        // - case 64: r,vs signature (cf https://eips.ethereum.org/EIPS/eip-2098) _Available since v4.1._\\n        if (signature.length == 65) {\\n            bytes32 r;\\n            bytes32 s;\\n            uint8 v;\\n            // ecrecover takes the signature parameters, and the only way to get them\\n            // currently is to use assembly.\\n            assembly {\\n                r := mload(add(signature, 0x20))\\n                s := mload(add(signature, 0x40))\\n                v := byte(0, mload(add(signature, 0x60)))\\n            }\\n            return recover(hash, v, r, s);\\n        } else if (signature.length == 64) {\\n            bytes32 r;\\n            bytes32 vs;\\n            // ecrecover takes the signature parameters, and the only way to get them\\n            // currently is to use assembly.\\n            assembly {\\n                r := mload(add(signature, 0x20))\\n                vs := mload(add(signature, 0x40))\\n            }\\n            return recover(hash, r, vs);\\n        } else {\\n            revert(\\\"ECDSA: invalid signature length\\\");\\n        }\\n    }\\n\\n    /**\\n     * @dev Overload of {ECDSA-recover} that receives the `r` and `vs` short-signature fields separately.\\n     *\\n     * See https://eips.ethereum.org/EIPS/eip-2098[EIP-2098 short signatures]\\n     *\\n     * _Available since v4.2._\\n     */\\n    function recover(\\n        bytes32 hash,\\n        bytes32 r,\\n        bytes32 vs\\n    ) internal pure returns (address) {\\n        bytes32 s;\\n        uint8 v;\\n        assembly {\\n            s := and(vs, 0x7fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff)\\n            v := add(shr(255, vs), 27)\\n        }\\n        return recover(hash, v, r, s);\\n    }\\n\\n    /**\\n     * @dev Overload of {ECDSA-recover} that receives the `v`, `r` and `s` signature fields separately.\\n     */\\n    function recover(\\n        bytes32 hash,\\n        uint8 v,\\n        bytes32 r,\\n        bytes32 s\\n    ) internal pure returns (address) {\\n        // EIP-2 still allows signature malleability for ecrecover(). Remove this possibility and make the signature\\n        // unique. Appendix F in the Ethereum Yellow paper (https://ethereum.github.io/yellowpaper/paper.pdf), defines\\n        // the valid range for s in (281): 0 < s < secp256k1n ÷ 2 + 1, and for v in (282): v ∈ {27, 28}. Most\\n        // signatures from current libraries generate a unique signature with an s-value in the lower half order.\\n        //\\n        // If your library generates malleable signatures, such as s-values in the upper range, calculate a new s-value\\n        // with 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFEBAAEDCE6AF48A03BBFD25E8CD0364141 - s1 and flip v from 27 to 28 or\\n        // vice versa. If your library also generates signatures with 0/1 for v instead 27/28, add 27 to v to accept\\n        // these malleable signatures as well.\\n        require(\\n            uint256(s) <= 0x7FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF5D576E7357A4501DDFE92F46681B20A0,\\n            \\\"ECDSA: invalid signature 's' value\\\"\\n        );\\n        require(v == 27 || v == 28, \\\"ECDSA: invalid signature 'v' value\\\");\\n\\n        // If the signature is valid (and not malleable), return the signer address\\n        address signer = ecrecover(hash, v, r, s);\\n        require(signer != address(0), \\\"ECDSA: invalid signature\\\");\\n\\n        return signer;\\n    }\\n\\n    /**\\n     * @dev Returns an Ethereum Signed Message, created from a `hash`. This\\n     * produces hash corresponding to the one signed with the\\n     * https://eth.wiki/json-rpc/API#eth_sign[`eth_sign`]\\n     * JSON-RPC method as part of EIP-191.\\n     *\\n     * See {recover}.\\n     */\\n    function toEthSignedMessageHash(bytes32 hash) internal pure returns (bytes32) {\\n        // 32 is the length in bytes of hash,\\n        // enforced by the type signature above\\n        return keccak256(abi.encodePacked(\\\"\\\\x19Ethereum Signed Message:\\\\n32\\\", hash));\\n    }\\n\\n    /**\\n     * @dev Returns an Ethereum Signed Typed Data, created from a\\n     * `domainSeparator` and a `structHash`. This produces hash corresponding\\n     * to the one signed with the\\n     * https://eips.ethereum.org/EIPS/eip-712[`eth_signTypedData`]\\n     * JSON-RPC method as part of EIP-712.\\n     *\\n     * See {recover}.\\n     */\\n    function toTypedDataHash(bytes32 domainSeparator, bytes32 structHash) internal pure returns (bytes32) {\\n        return keccak256(abi.encodePacked(\\\"\\\\x19\\\\x01\\\", domainSeparator, structHash));\\n    }\\n}\\n\"\r\n    },\r\n    \"contracts/governance/staking/GamifiedToken.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: AGPL-3.0-or-later\\npragma solidity 0.8.6;\\n\\nimport { Initializable } from \\\"@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol\\\";\\nimport { ContextUpgradeable } from \\\"@openzeppelin/contracts-upgradeable/utils/ContextUpgradeable.sol\\\";\\nimport { SafeCastExtended } from \\\"../../shared/SafeCastExtended.sol\\\";\\nimport { ILockedERC20 } from \\\"./interfaces/ILockedERC20.sol\\\";\\nimport { HeadlessStakingRewards } from \\\"../../rewards/staking/HeadlessStakingRewards.sol\\\";\\nimport { QuestManager } from \\\"./QuestManager.sol\\\";\\nimport \\\"./deps/GamifiedTokenStructs.sol\\\";\\n\\n/**\\n * @title GamifiedToken\\n * @notice GamifiedToken is a non-transferrable ERC20 token that has both a raw balance and a scaled balance.\\n * Scaled balance is determined by quests a user completes, and the length of time they keep the raw balance wrapped.\\n * QuestMasters can add new quests for stakers to complete, for which they are rewarded with permanent or seasonal multipliers.\\n * @author mStable\\n * @dev Originally forked from openzeppelin-contracts-upgradeable/contracts/token/ERC20/ERC20Upgradeable.sol\\n * Changes:\\n *   - Removed the transfer, transferFrom, approve fns to make non-transferrable\\n *   - Removed `_allowances` storage\\n *   - Removed `_beforeTokenTransfer` hook\\n *   - Replaced standard uint256 balance with a single struct containing all data from which the scaledBalance can be derived\\n *   - Quest system implemented that tracks a users quest status and applies multipliers for them\\n **/\\nabstract contract GamifiedToken is\\n    ILockedERC20,\\n    Initializable,\\n    ContextUpgradeable,\\n    HeadlessStakingRewards\\n{\\n    /// @notice name of this token (ERC20)\\n    bytes32 private _name;\\n    /// @notice symbol of this token (ERC20)\\n    bytes32 private _symbol;\\n    /// @notice number of decimals of this token (ERC20)\\n    uint8 public constant override decimals = 18;\\n\\n    /// @notice User balance structs containing all data needed to scale balance\\n    mapping(address => Balance) internal _balances;\\n    /// @notice Most recent price coefficients per user\\n    mapping(address => uint256) internal _userPriceCoeff;\\n    /// @notice Quest Manager\\n    QuestManager public immutable questManager;\\n    /// @notice Has variable price\\n    bool public immutable hasPriceCoeff;\\n\\n    /***************************************\\n                    INIT\\n    ****************************************/\\n\\n    /**\\n     * @param _nexus System nexus\\n     * @param _rewardsToken Token that is being distributed as a reward. eg MTA\\n     * @param _questManager Centralised manager of quests\\n     * @param _hasPriceCoeff true if raw staked amount is multiplied by price coeff to get staked amount. eg BPT Staked Token\\n     */\\n    constructor(\\n        address _nexus,\\n        address _rewardsToken,\\n        address _questManager,\\n        bool _hasPriceCoeff\\n    ) HeadlessStakingRewards(_nexus, _rewardsToken) {\\n        questManager = QuestManager(_questManager);\\n        hasPriceCoeff = _hasPriceCoeff;\\n    }\\n\\n    /**\\n     * @param _nameArg Token name\\n     * @param _symbolArg Token symbol\\n     * @param _rewardsDistributorArg mStable Rewards Distributor\\n     */\\n    function __GamifiedToken_init(\\n        bytes32 _nameArg,\\n        bytes32 _symbolArg,\\n        address _rewardsDistributorArg\\n    ) internal initializer {\\n        __Context_init_unchained();\\n        _name = _nameArg;\\n        _symbol = _symbolArg;\\n        HeadlessStakingRewards._initialize(_rewardsDistributorArg);\\n    }\\n\\n    /**\\n     * @dev Checks that _msgSender is the quest Manager\\n     */\\n    modifier onlyQuestManager() {\\n        require(_msgSender() == address(questManager), \\\"Not verified\\\");\\n        _;\\n    }\\n\\n    /***************************************\\n                    VIEWS\\n    ****************************************/\\n\\n    function name() public view override returns (string memory) {\\n        return bytes32ToString(_name);\\n    }\\n\\n    function symbol() public view override returns (string memory) {\\n        return bytes32ToString(_symbol);\\n    }\\n\\n    /**\\n     * @dev Total sum of all scaled balances\\n     * In this instance, leave to the child token.\\n     */\\n    function totalSupply()\\n        public\\n        view\\n        virtual\\n        override(HeadlessStakingRewards, ILockedERC20)\\n        returns (uint256);\\n\\n    /**\\n     * @dev Simply gets scaled balance\\n     * @return scaled balance for user\\n     */\\n    function balanceOf(address _account)\\n        public\\n        view\\n        virtual\\n        override(HeadlessStakingRewards, ILockedERC20)\\n        returns (uint256)\\n    {\\n        return _getBalance(_account, _balances[_account]);\\n    }\\n\\n    /**\\n     * @dev Simply gets raw balance\\n     * @return raw balance for user\\n     */\\n    function rawBalanceOf(address _account) public view returns (uint256, uint256) {\\n        return (_balances[_account].raw, _balances[_account].cooldownUnits);\\n    }\\n\\n    /**\\n     * @dev Scales the balance of a given user by applying multipliers\\n     */\\n    function _getBalance(address _account, Balance memory _balance)\\n        internal\\n        view\\n        returns (uint256 balance)\\n    {\\n        // e.g. raw = 1000, questMultiplier = 40, timeMultiplier = 30. Cooldown of 60%\\n        // e.g. 1000 * (100 + 40) / 100 = 1400\\n        balance = (_balance.raw * (100 + _balance.questMultiplier)) / 100;\\n        // e.g. 1400 * (100 + 30) / 100 = 1820\\n        balance = (balance * (100 + _balance.timeMultiplier)) / 100;\\n\\n        if (hasPriceCoeff) {\\n            // e.g. 1820 * 16000 / 10000 = 2912\\n            balance = (balance * _userPriceCoeff[_account]) / 10000;\\n        }\\n    }\\n\\n    /**\\n     * @notice Raw staked balance without any multipliers\\n     */\\n    function balanceData(address _account) external view returns (Balance memory) {\\n        return _balances[_account];\\n    }\\n\\n    /**\\n     * @notice Raw staked balance without any multipliers\\n     */\\n    function userPriceCoeff(address _account) external view returns (uint256) {\\n        return _userPriceCoeff[_account];\\n    }\\n\\n    /***************************************\\n                    QUESTS\\n    ****************************************/\\n\\n    /**\\n     * @dev Called by anyone to poke the timestamp of a given account. This allows users to\\n     * effectively 'claim' any new timeMultiplier, but will revert if there is no change there.\\n     */\\n    function reviewTimestamp(address _account) external {\\n        _reviewWeightedTimestamp(_account);\\n    }\\n\\n    /**\\n     * @dev Adds the multiplier awarded from quest completion to a users data, taking the opportunity\\n     * to check time multipliers etc.\\n     * @param _account Address of user that should be updated\\n     * @param _newMultiplier New Quest Multiplier\\n     */\\n    function applyQuestMultiplier(address _account, uint8 _newMultiplier)\\n        external\\n        onlyQuestManager\\n    {\\n        require(_account != address(0), \\\"Invalid address\\\");\\n\\n        // 1. Get current balance & update questMultiplier, only if user has a balance\\n        Balance memory oldBalance = _balances[_account];\\n        uint256 oldScaledBalance = _getBalance(_account, oldBalance);\\n        if (oldScaledBalance > 0) {\\n            _applyQuestMultiplier(_account, oldBalance, oldScaledBalance, _newMultiplier);\\n        }\\n    }\\n\\n    /**\\n     * @dev Gets the multiplier awarded for a given weightedTimestamp\\n     * @param _ts WeightedTimestamp of a user\\n     * @return timeMultiplier Ranging from 20 (0.2x) to 60 (0.6x)\\n     */\\n    function _timeMultiplier(uint32 _ts) internal view returns (uint8 timeMultiplier) {\\n        // If the user has no ts yet, they are not in the system\\n        if (_ts == 0) return 0;\\n\\n        uint256 hodlLength = block.timestamp - _ts;\\n        if (hodlLength < 13 weeks) {\\n            // 0-3 months = 1x\\n            return 0;\\n        } else if (hodlLength < 26 weeks) {\\n            // 3 months = 1.2x\\n            return 20;\\n        } else if (hodlLength < 52 weeks) {\\n            // 6 months = 1.3x\\n            return 30;\\n        } else if (hodlLength < 78 weeks) {\\n            // 12 months = 1.4x\\n            return 40;\\n        } else if (hodlLength < 104 weeks) {\\n            // 18 months = 1.5x\\n            return 50;\\n        } else {\\n            // > 24 months = 1.6x\\n            return 60;\\n        }\\n    }\\n\\n    function _getPriceCoeff() internal virtual returns (uint256) {\\n        return 10000;\\n    }\\n\\n    /***************************************\\n                BALANCE CHANGES\\n    ****************************************/\\n\\n    /**\\n     * @dev Adds the multiplier awarded from quest completion to a users data, taking the opportunity\\n     * to check time multiplier.\\n     * @param _account Address of user that should be updated\\n     * @param _newMultiplier New Quest Multiplier\\n     */\\n    function _applyQuestMultiplier(\\n        address _account,\\n        Balance memory _oldBalance,\\n        uint256 _oldScaledBalance,\\n        uint8 _newMultiplier\\n    ) private updateReward(_account) {\\n        // 1. Set the questMultiplier\\n        _balances[_account].questMultiplier = _newMultiplier;\\n\\n        // 2. Take the opportunity to set weighted timestamp, if it changes\\n        _balances[_account].timeMultiplier = _timeMultiplier(_oldBalance.weightedTimestamp);\\n\\n        // 3. Update scaled balance\\n        _settleScaledBalance(_account, _oldScaledBalance);\\n    }\\n\\n    /**\\n     * @dev Entering a cooldown period means a user wishes to withdraw. With this in mind, their balance\\n     * should be reduced until they have shown more commitment to the system\\n     * @param _account Address of user that should be cooled\\n     * @param _units Units to cooldown for\\n     */\\n    function _enterCooldownPeriod(address _account, uint256 _units)\\n        internal\\n        updateReward(_account)\\n    {\\n        require(_account != address(0), \\\"Invalid address\\\");\\n\\n        // 1. Get current balance\\n        (Balance memory oldBalance, uint256 oldScaledBalance) = _prepareOldBalance(_account);\\n        uint88 totalUnits = oldBalance.raw + oldBalance.cooldownUnits;\\n        require(_units > 0 && _units <= totalUnits, \\\"Must choose between 0 and 100%\\\");\\n\\n        // 2. Set weighted timestamp and enter cooldown\\n        _balances[_account].timeMultiplier = _timeMultiplier(oldBalance.weightedTimestamp);\\n        // e.g. 1e18 / 1e16 = 100, 2e16 / 1e16 = 2, 1e15/1e16 = 0\\n        _balances[_account].raw = totalUnits - SafeCastExtended.toUint88(_units);\\n\\n        // 3. Set cooldown data\\n        _balances[_account].cooldownTimestamp = SafeCastExtended.toUint32(block.timestamp);\\n        _balances[_account].cooldownUnits = SafeCastExtended.toUint88(_units);\\n\\n        // 4. Update scaled balance\\n        _settleScaledBalance(_account, oldScaledBalance);\\n    }\\n\\n    /**\\n     * @dev Exiting the cooldown period explicitly resets the users cooldown window and their balance\\n     * @param _account Address of user that should be exited\\n     */\\n    function _exitCooldownPeriod(address _account) internal updateReward(_account) {\\n        require(_account != address(0), \\\"Invalid address\\\");\\n\\n        // 1. Get current balance\\n        (Balance memory oldBalance, uint256 oldScaledBalance) = _prepareOldBalance(_account);\\n\\n        // 2. Set weighted timestamp and exit cooldown\\n        _balances[_account].timeMultiplier = _timeMultiplier(oldBalance.weightedTimestamp);\\n        _balances[_account].raw += oldBalance.cooldownUnits;\\n\\n        // 3. Set cooldown data\\n        _balances[_account].cooldownTimestamp = 0;\\n        _balances[_account].cooldownUnits = 0;\\n\\n        // 4. Update scaled balance\\n        _settleScaledBalance(_account, oldScaledBalance);\\n    }\\n\\n    /**\\n     * @dev Pokes the weightedTimestamp of a given user and checks if it entitles them\\n     * to a better timeMultiplier. If not, it simply reverts as there is nothing to update.\\n     * @param _account Address of user that should be updated\\n     */\\n    function _reviewWeightedTimestamp(address _account) internal updateReward(_account) {\\n        require(_account != address(0), \\\"Invalid address\\\");\\n\\n        // 1. Get current balance\\n        (Balance memory oldBalance, uint256 oldScaledBalance) = _prepareOldBalance(_account);\\n\\n        // 2. Set weighted timestamp, if it changes\\n        uint8 newTimeMultiplier = _timeMultiplier(oldBalance.weightedTimestamp);\\n        require(newTimeMultiplier != oldBalance.timeMultiplier, \\\"Nothing worth poking here\\\");\\n        _balances[_account].timeMultiplier = newTimeMultiplier;\\n\\n        // 3. Update scaled balance\\n        _settleScaledBalance(_account, oldScaledBalance);\\n    }\\n\\n    /**\\n     * @dev Called to mint from raw tokens. Adds raw to a users balance, and then propagates the scaledBalance.\\n     * Importantly, when a user stakes more, their weightedTimestamp is reduced proportionate to their stake.\\n     * @param _account Address of user to credit\\n     * @param _rawAmount Raw amount of tokens staked\\n     * @param _exitCooldown Should we end any cooldown?\\n     */\\n    function _mintRaw(\\n        address _account,\\n        uint256 _rawAmount,\\n        bool _exitCooldown\\n    ) internal updateReward(_account) {\\n        require(_account != address(0), \\\"ERC20: mint to the zero address\\\");\\n\\n        // 1. Get and update current balance\\n        (Balance memory oldBalance, uint256 oldScaledBalance) = _prepareOldBalance(_account);\\n        uint88 totalRaw = oldBalance.raw + oldBalance.cooldownUnits;\\n        _balances[_account].raw = oldBalance.raw + SafeCastExtended.toUint88(_rawAmount);\\n\\n        // 2. Exit cooldown if necessary\\n        if (_exitCooldown) {\\n            _balances[_account].raw += oldBalance.cooldownUnits;\\n            _balances[_account].cooldownTimestamp = 0;\\n            _balances[_account].cooldownUnits = 0;\\n        }\\n\\n        // 3. Set weighted timestamp\\n        //  i) For new _account, set up weighted timestamp\\n        if (oldBalance.weightedTimestamp == 0) {\\n            _balances[_account].weightedTimestamp = SafeCastExtended.toUint32(block.timestamp);\\n            _mintScaled(_account, _getBalance(_account, _balances[_account]));\\n            return;\\n        }\\n        //  ii) For previous minters, recalculate time held\\n        //      Calc new weighted timestamp\\n        uint256 oldWeightedSecondsHeld = (block.timestamp - oldBalance.weightedTimestamp) *\\n            totalRaw;\\n        uint256 newSecondsHeld = oldWeightedSecondsHeld / (totalRaw + (_rawAmount / 2));\\n        uint32 newWeightedTs = SafeCastExtended.toUint32(block.timestamp - newSecondsHeld);\\n        _balances[_account].weightedTimestamp = newWeightedTs;\\n\\n        uint8 timeMultiplier = _timeMultiplier(newWeightedTs);\\n        _balances[_account].timeMultiplier = timeMultiplier;\\n\\n        // 3. Update scaled balance\\n        _settleScaledBalance(_account, oldScaledBalance);\\n    }\\n\\n    /**\\n     * @dev Called to burn a given amount of raw tokens.\\n     * @param _account Address of user\\n     * @param _rawAmount Raw amount of tokens to remove\\n     * @param _exitCooldown Exit the cooldown?\\n     * @param _finalise Has recollateralisation happened? If so, everything is cooled down\\n     */\\n    function _burnRaw(\\n        address _account,\\n        uint256 _rawAmount,\\n        bool _exitCooldown,\\n        bool _finalise\\n    ) internal updateReward(_account) {\\n        require(_account != address(0), \\\"ERC20: burn from zero address\\\");\\n\\n        // 1. Get and update current balance\\n        (Balance memory oldBalance, uint256 oldScaledBalance) = _prepareOldBalance(_account);\\n        uint256 totalRaw = oldBalance.raw + oldBalance.cooldownUnits;\\n        // 1.1. If _finalise, move everything to cooldown\\n        if (_finalise) {\\n            _balances[_account].raw = 0;\\n            _balances[_account].cooldownUnits = SafeCastExtended.toUint88(totalRaw);\\n            oldBalance.cooldownUnits = SafeCastExtended.toUint88(totalRaw);\\n        }\\n        // 1.2. Update\\n        require(oldBalance.cooldownUnits >= _rawAmount, \\\"ERC20: burn amount > balance\\\");\\n        unchecked {\\n            _balances[_account].cooldownUnits -= SafeCastExtended.toUint88(_rawAmount);\\n        }\\n\\n        // 2. If we are exiting cooldown, reset the balance\\n        if (_exitCooldown) {\\n            _balances[_account].raw += _balances[_account].cooldownUnits;\\n            _balances[_account].cooldownTimestamp = 0;\\n            _balances[_account].cooldownUnits = 0;\\n        }\\n\\n        // 3. Set back scaled time\\n        // e.g. stake 10 for 100 seconds, withdraw 5.\\n        //      secondsHeld = (100 - 0) * (10 - 0.625) = 937.5\\n        uint256 secondsHeld = (block.timestamp - oldBalance.weightedTimestamp) *\\n            (totalRaw - (_rawAmount / 8));\\n        //      newWeightedTs = 937.5 / 100 = 93.75\\n        uint256 newSecondsHeld = secondsHeld / totalRaw;\\n        uint32 newWeightedTs = SafeCastExtended.toUint32(block.timestamp - newSecondsHeld);\\n        _balances[_account].weightedTimestamp = newWeightedTs;\\n\\n        uint8 timeMultiplier = _timeMultiplier(newWeightedTs);\\n        _balances[_account].timeMultiplier = timeMultiplier;\\n\\n        // 4. Update scaled balance\\n        _settleScaledBalance(_account, oldScaledBalance);\\n    }\\n\\n    /***************************************\\n                    PRIVATE\\n    updateReward should already be called by now\\n    ****************************************/\\n\\n    /**\\n     * @dev Fetches the balance of a given user, scales it, and also takes the opportunity\\n     * to check if the season has just finished between now and their last action.\\n     * @param _account Address of user to fetch\\n     * @return oldBalance struct containing all balance information\\n     * @return oldScaledBalance scaled balance after applying multipliers\\n     */\\n    function _prepareOldBalance(address _account)\\n        private\\n        returns (Balance memory oldBalance, uint256 oldScaledBalance)\\n    {\\n        // Get the old balance\\n        oldBalance = _balances[_account];\\n        oldScaledBalance = _getBalance(_account, oldBalance);\\n        // Take the opportunity to check for season finish\\n        _balances[_account].questMultiplier = questManager.checkForSeasonFinish(_account);\\n        if (hasPriceCoeff) {\\n            _userPriceCoeff[_account] = SafeCastExtended.toUint16(_getPriceCoeff());\\n        }\\n    }\\n\\n    /**\\n     * @dev Settles the scaled balance of a given account. The reason this is done here, is because\\n     * in each of the write functions above, there is the chance that a users balance can go down,\\n     * requiring to burn sacled tokens. This could happen at the end of a season when multipliers are slashed.\\n     * This is called after updating all multipliers etc.\\n     * @param _account Address of user that should be updated\\n     * @param _oldScaledBalance Previous scaled balance of the user\\n     */\\n    function _settleScaledBalance(address _account, uint256 _oldScaledBalance) private {\\n        uint256 newScaledBalance = _getBalance(_account, _balances[_account]);\\n        if (newScaledBalance > _oldScaledBalance) {\\n            _mintScaled(_account, newScaledBalance - _oldScaledBalance);\\n        }\\n        // This can happen if the user moves back a time class, but is unlikely to result in a negative mint\\n        else {\\n            _burnScaled(_account, _oldScaledBalance - newScaledBalance);\\n        }\\n    }\\n\\n    /**\\n     * @dev Propagates the minting of the tokens downwards.\\n     * @param _account Address of user that has minted\\n     * @param _amount Amount of scaled tokens minted\\n     */\\n    function _mintScaled(address _account, uint256 _amount) private {\\n        emit Transfer(address(0), _account, _amount);\\n\\n        _afterTokenTransfer(address(0), _account, _amount);\\n    }\\n\\n    /**\\n     * @dev Propagates the burning of the tokens downwards.\\n     * @param _account Address of user that has burned\\n     * @param _amount Amount of scaled tokens burned\\n     */\\n    function _burnScaled(address _account, uint256 _amount) private {\\n        emit Transfer(_account, address(0), _amount);\\n\\n        _afterTokenTransfer(_account, address(0), _amount);\\n    }\\n\\n    /***************************************\\n                    HOOKS\\n    ****************************************/\\n\\n    /**\\n     * @dev Triggered after a user claims rewards from the HeadlessStakingRewards. Used\\n     * to check for season finish. If it has not, then do not spend gas updating the other vars.\\n     * @param _account Address of user that has burned\\n     */\\n    function _claimRewardHook(address _account) internal override {\\n        uint8 newMultiplier = questManager.checkForSeasonFinish(_account);\\n        bool priceCoeffChanged = hasPriceCoeff\\n            ? _getPriceCoeff() != _userPriceCoeff[_account]\\n            : false;\\n        if (newMultiplier != _balances[_account].questMultiplier || priceCoeffChanged) {\\n            // 1. Get current balance & trigger season finish\\n            uint256 oldScaledBalance = _getBalance(_account, _balances[_account]);\\n            _balances[_account].questMultiplier = newMultiplier;\\n            if (priceCoeffChanged) {\\n                _userPriceCoeff[_account] = SafeCastExtended.toUint16(_getPriceCoeff());\\n            }\\n            // 3. Update scaled balance\\n            _settleScaledBalance(_account, oldScaledBalance);\\n        }\\n    }\\n\\n    /**\\n     * @dev Unchanged from OpenZeppelin. Used in child contracts to react to any balance changes.\\n     */\\n    function _afterTokenTransfer(\\n        address _from,\\n        address _to,\\n        uint256 _amount\\n    ) internal virtual {}\\n\\n    /***************************************\\n                    Utils\\n    ****************************************/\\n\\n    function bytes32ToString(bytes32 _bytes32) internal pure returns (string memory) {\\n        uint256 i = 0;\\n        while (i < 32 && _bytes32[i] != 0) {\\n            i++;\\n        }\\n        bytes memory bytesArray = new bytes(i);\\n        for (i = 0; i < 32 && _bytes32[i] != 0; i++) {\\n            bytesArray[i] = _bytes32[i];\\n        }\\n        return string(bytesArray);\\n    }\\n\\n    uint256[46] private __gap;\\n}\\n\"\r\n    },\r\n    \"contracts/governance/staking/interfaces/IGovernanceHook.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: AGPL-3.0-or-later\\npragma solidity 0.8.6;\\n\\ninterface IGovernanceHook {\\n    function moveVotingPowerHook(\\n        address from,\\n        address to,\\n        uint256 amount\\n    ) external;\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev This is a base contract to aid in writing upgradeable contracts, or any kind of contract that will be deployed\\n * behind a proxy. Since a proxied contract can't have a constructor, it's common to move constructor logic to an\\n * external initializer function, usually called `initialize`. It then becomes necessary to protect this initializer\\n * function so it can only be called once. The {initializer} modifier provided by this contract will have this effect.\\n *\\n * TIP: To avoid leaving the proxy in an uninitialized state, the initializer function should be called as early as\\n * possible by providing the encoded function call as the `_data` argument to {ERC1967Proxy-constructor}.\\n *\\n * CAUTION: When used with inheritance, manual care must be taken to not invoke a parent initializer twice, or to ensure\\n * that all initializers are idempotent. This is not verified automatically as constructors are by Solidity.\\n */\\nabstract contract Initializable {\\n    /**\\n     * @dev Indicates that the contract has been initialized.\\n     */\\n    bool private _initialized;\\n\\n    /**\\n     * @dev Indicates that the contract is in the process of being initialized.\\n     */\\n    bool private _initializing;\\n\\n    /**\\n     * @dev Modifier to protect an initializer function from being invoked twice.\\n     */\\n    modifier initializer() {\\n        require(_initializing || !_initialized, \\\"Initializable: contract is already initialized\\\");\\n\\n        bool isTopLevelCall = !_initializing;\\n        if (isTopLevelCall) {\\n            _initializing = true;\\n            _initialized = true;\\n        }\\n\\n        _;\\n\\n        if (isTopLevelCall) {\\n            _initializing = false;\\n        }\\n    }\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts-upgradeable/utils/ContextUpgradeable.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\nimport \\\"../proxy/utils/Initializable.sol\\\";\\n\\n/*\\n * @dev Provides information about the current execution context, including the\\n * sender of the transaction and its data. While these are generally available\\n * via msg.sender and msg.data, they should not be accessed in such a direct\\n * manner, since when dealing with meta-transactions the account sending and\\n * paying for execution may not be the actual sender (as far as an application\\n * is concerned).\\n *\\n * This contract is only required for intermediate, library-like contracts.\\n */\\nabstract contract ContextUpgradeable is Initializable {\\n    function __Context_init() internal initializer {\\n        __Context_init_unchained();\\n    }\\n\\n    function __Context_init_unchained() internal initializer {\\n    }\\n    function _msgSender() internal view virtual returns (address) {\\n        return msg.sender;\\n    }\\n\\n    function _msgData() internal view virtual returns (bytes calldata) {\\n        return msg.data;\\n    }\\n    uint256[50] private __gap;\\n}\\n\"\r\n    },\r\n    \"contracts/shared/SafeCastExtended.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Wrappers over Solidity's uintXX/intXX casting operators with added overflow\\n * checks.\\n *\\n * Downcasting from uint256/int256 in Solidity does not revert on overflow. This can\\n * easily result in undesired exploitation or bugs, since developers usually\\n * assume that overflows raise errors. `SafeCast` restores this intuition by\\n * reverting the transaction when such an operation overflows.\\n *\\n * Using this library instead of the unchecked operations eliminates an entire\\n * class of bugs, so it's recommended to use it always.\\n *\\n * Can be combined with {SafeMath} and {SignedSafeMath} to extend it to smaller types, by performing\\n * all math on `uint256` and `int256` and then downcasting.\\n */\\nlibrary SafeCastExtended {\\n    /**\\n     * @dev Returns the downcasted uint224 from uint256, reverting on\\n     * overflow (when the input is greater than largest uint224).\\n     *\\n     * Counterpart to Solidity's `uint224` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 224 bits\\n     */\\n    function toUint224(uint256 value) internal pure returns (uint224) {\\n        require(value <= type(uint224).max, \\\"SafeCast: value doesn't fit in 224 bits\\\");\\n        return uint224(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted uint128 from uint256, reverting on\\n     * overflow (when the input is greater than largest uint128).\\n     *\\n     * Counterpart to Solidity's `uint128` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 128 bits\\n     */\\n    function toUint128(uint256 value) internal pure returns (uint128) {\\n        require(value <= type(uint128).max, \\\"SafeCast: value doesn't fit in 128 bits\\\");\\n        return uint128(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted uint96 from uint256, reverting on\\n     * overflow (when the input is greater than largest uint96).\\n     *\\n     * Counterpart to Solidity's `uint96` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 96 bits\\n     */\\n    function toUint96(uint256 value) internal pure returns (uint96) {\\n        require(value <= type(uint96).max, \\\"SafeCast: value doesn't fit in 96 bits\\\");\\n        return uint96(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted uint88 from uint256, reverting on\\n     * overflow (when the input is greater than largest uint88).\\n     *\\n     * Counterpart to Solidity's `uint88` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 88 bits\\n     */\\n    function toUint88(uint256 value) internal pure returns (uint88) {\\n        require(value <= type(uint88).max, \\\"SafeCast: value doesn't fit in 88 bits\\\");\\n        return uint88(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted uint64 from uint256, reverting on\\n     * overflow (when the input is greater than largest uint64).\\n     *\\n     * Counterpart to Solidity's `uint64` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 64 bits\\n     */\\n    function toUint64(uint256 value) internal pure returns (uint64) {\\n        require(value <= type(uint64).max, \\\"SafeCast: value doesn't fit in 64 bits\\\");\\n        return uint64(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted uint32 from uint256, reverting on\\n     * overflow (when the input is greater than largest uint32).\\n     *\\n     * Counterpart to Solidity's `uint32` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 32 bits\\n     */\\n    function toUint32(uint256 value) internal pure returns (uint32) {\\n        require(value <= type(uint32).max, \\\"SafeCast: value doesn't fit in 32 bits\\\");\\n        return uint32(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted uint16 from uint256, reverting on\\n     * overflow (when the input is greater than largest uint16).\\n     *\\n     * Counterpart to Solidity's `uint16` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 16 bits\\n     */\\n    function toUint16(uint256 value) internal pure returns (uint16) {\\n        require(value <= type(uint16).max, \\\"SafeCast: value doesn't fit in 16 bits\\\");\\n        return uint16(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted uint8 from uint256, reverting on\\n     * overflow (when the input is greater than largest uint8).\\n     *\\n     * Counterpart to Solidity's `uint8` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 8 bits.\\n     */\\n    function toUint8(uint256 value) internal pure returns (uint8) {\\n        require(value <= type(uint8).max, \\\"SafeCast: value doesn't fit in 8 bits\\\");\\n        return uint8(value);\\n    }\\n\\n    /**\\n     * @dev Converts a signed int256 into an unsigned uint256.\\n     *\\n     * Requirements:\\n     *\\n     * - input must be greater than or equal to 0.\\n     */\\n    function toUint256(int256 value) internal pure returns (uint256) {\\n        require(value >= 0, \\\"SafeCast: value must be positive\\\");\\n        return uint256(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted int128 from int256, reverting on\\n     * overflow (when the input is less than smallest int128 or\\n     * greater than largest int128).\\n     *\\n     * Counterpart to Solidity's `int128` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 128 bits\\n     *\\n     * _Available since v3.1._\\n     */\\n    function toInt128(int256 value) internal pure returns (int128) {\\n        require(\\n            value >= type(int128).min && value <= type(int128).max,\\n            \\\"SafeCast: value doesn't fit in 128 bits\\\"\\n        );\\n        return int128(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted int64 from int256, reverting on\\n     * overflow (when the input is less than smallest int64 or\\n     * greater than largest int64).\\n     *\\n     * Counterpart to Solidity's `int64` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 64 bits\\n     *\\n     * _Available since v3.1._\\n     */\\n    function toInt64(int256 value) internal pure returns (int64) {\\n        require(\\n            value >= type(int64).min && value <= type(int64).max,\\n            \\\"SafeCast: value doesn't fit in 64 bits\\\"\\n        );\\n        return int64(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted int32 from int256, reverting on\\n     * overflow (when the input is less than smallest int32 or\\n     * greater than largest int32).\\n     *\\n     * Counterpart to Solidity's `int32` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 32 bits\\n     *\\n     * _Available since v3.1._\\n     */\\n    function toInt32(int256 value) internal pure returns (int32) {\\n        require(\\n            value >= type(int32).min && value <= type(int32).max,\\n            \\\"SafeCast: value doesn't fit in 32 bits\\\"\\n        );\\n        return int32(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted int16 from int256, reverting on\\n     * overflow (when the input is less than smallest int16 or\\n     * greater than largest int16).\\n     *\\n     * Counterpart to Solidity's `int16` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 16 bits\\n     *\\n     * _Available since v3.1._\\n     */\\n    function toInt16(int256 value) internal pure returns (int16) {\\n        require(\\n            value >= type(int16).min && value <= type(int16).max,\\n            \\\"SafeCast: value doesn't fit in 16 bits\\\"\\n        );\\n        return int16(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted int8 from int256, reverting on\\n     * overflow (when the input is less than smallest int8 or\\n     * greater than largest int8).\\n     *\\n     * Counterpart to Solidity's `int8` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 8 bits.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function toInt8(int256 value) internal pure returns (int8) {\\n        require(\\n            value >= type(int8).min && value <= type(int8).max,\\n            \\\"SafeCast: value doesn't fit in 8 bits\\\"\\n        );\\n        return int8(value);\\n    }\\n\\n    /**\\n     * @dev Converts an unsigned uint256 into a signed int256.\\n     *\\n     * Requirements:\\n     *\\n     * - input must be less than or equal to maxInt256.\\n     */\\n    function toInt256(uint256 value) internal pure returns (int256) {\\n        // Note: Unsafe cast below is okay because `type(int256).max` is guaranteed to be positive\\n        require(value <= uint256(type(int256).max), \\\"SafeCast: value doesn't fit in an int256\\\");\\n        return int256(value);\\n    }\\n}\\n\"\r\n    },\r\n    \"contracts/governance/staking/interfaces/ILockedERC20.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface for the optional metadata functions from the ERC20 standard.\\n *\\n * _Available since v4.1._\\n */\\ninterface ILockedERC20 {\\n    /**\\n     * @dev Returns the name of the token.\\n     */\\n    function name() external view returns (string memory);\\n\\n    /**\\n     * @dev Returns the symbol of the token.\\n     */\\n    function symbol() external view returns (string memory);\\n\\n    /**\\n     * @dev Returns the decimals places of the token.\\n     */\\n    function decimals() external view returns (uint8);\\n\\n    /**\\n     * @dev Returns the amount of tokens in existence.\\n     */\\n    function totalSupply() external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the amount of tokens owned by `account`.\\n     */\\n    function balanceOf(address account) external view returns (uint256);\\n\\n    /**\\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\\n     * another (`to`).\\n     *\\n     * Note that `value` may be zero.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 value);\\n\\n    /**\\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\\n     * a call to {approve}. `value` is the new allowance.\\n     */\\n    event Approval(address indexed owner, address indexed spender, uint256 value);\\n}\\n\"\r\n    },\r\n    \"contracts/rewards/staking/HeadlessStakingRewards.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: AGPL-3.0-or-later\\npragma solidity 0.8.6;\\n\\n// Internal\\nimport { InitializableRewardsDistributionRecipient } from \\\"../InitializableRewardsDistributionRecipient.sol\\\";\\nimport { StableMath } from \\\"../../shared/StableMath.sol\\\";\\nimport { PlatformTokenVendorFactory } from \\\"./PlatformTokenVendorFactory.sol\\\";\\nimport { ContextUpgradeable } from \\\"@openzeppelin/contracts-upgradeable/utils/ContextUpgradeable.sol\\\";\\n\\n// Libs\\nimport { IERC20 } from \\\"@openzeppelin/contracts/token/ERC20/IERC20.sol\\\";\\nimport { SafeERC20 } from \\\"@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol\\\";\\nimport { SafeCast } from \\\"@openzeppelin/contracts/utils/math/SafeCast.sol\\\";\\nimport { Initializable } from \\\"@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol\\\";\\n\\n/**\\n * @title  HeadlessStakingRewards\\n * @author mStable\\n * @notice Rewards stakers of a given LP token with REWARDS_TOKEN, on a pro-rata basis\\n * @dev Forked from `StakingRewards.sol`\\n *      Changes:\\n *          - `pendingAdditionalReward` added to support accumulation of any extra staking token\\n *          - Removal of `StakingTokenWrapper`, instead, deposits and withdrawals are made in child contract,\\n *            and balances are read from there through the abstract functions\\n */\\nabstract contract HeadlessStakingRewards is\\n    ContextUpgradeable,\\n    InitializableRewardsDistributionRecipient\\n{\\n    using SafeERC20 for IERC20;\\n    using StableMath for uint256;\\n\\n    /// @notice token the rewards are distributed in. eg MTA\\n    IERC20 public immutable REWARDS_TOKEN;\\n\\n    /// @notice length of each staking period in seconds. 7 days = 604,800; 3 months = 7,862,400\\n    uint256 public constant DURATION = 1 weeks;\\n\\n    /// @notice contract that holds the platform tokens\\n    address public rewardTokenVendor;\\n\\n    struct Data {\\n        /// Timestamp for current period finish\\n        uint32 periodFinish;\\n        /// Last time any user took action\\n        uint32 lastUpdateTime;\\n        /// RewardRate for the rest of the period\\n        uint96 rewardRate;\\n        /// Ever increasing rewardPerToken rate, based on % of total supply\\n        uint96 rewardPerTokenStored;\\n    }\\n\\n    struct UserData {\\n        uint128 rewardPerTokenPaid;\\n        uint128 rewards;\\n    }\\n\\n    Data public globalData;\\n    mapping(address => UserData) public userData;\\n    uint256 public pendingAdditionalReward;\\n\\n    event RewardAdded(uint256 reward);\\n    event RewardPaid(address indexed user, address indexed to, uint256 reward);\\n\\n    /**\\n     * @param _nexus mStable system Nexus address\\n     * @param _rewardsToken first token that is being distributed as a reward. eg MTA\\n     */\\n    constructor(address _nexus, address _rewardsToken)\\n        InitializableRewardsDistributionRecipient(_nexus)\\n    {\\n        REWARDS_TOKEN = IERC20(_rewardsToken);\\n    }\\n\\n    /**\\n     * @dev Initialization function for upgradable proxy contract.\\n     *      This function should be called via Proxy just after contract deployment.\\n     *      To avoid variable shadowing appended `Arg` after arguments name.\\n     * @param _rewardsDistributorArg mStable Reward Distributor contract address\\n     */\\n    function _initialize(address _rewardsDistributorArg) internal virtual override {\\n        InitializableRewardsDistributionRecipient._initialize(_rewardsDistributorArg);\\n        rewardTokenVendor = PlatformTokenVendorFactory.create(REWARDS_TOKEN);\\n    }\\n\\n    /** @dev Updates the reward for a given address, before executing function */\\n    modifier updateReward(address _account) {\\n        _updateReward(_account);\\n        _;\\n    }\\n\\n    function _updateReward(address _account) internal {\\n        // Setting of global vars\\n        (uint256 newRewardPerToken, uint256 lastApplicableTime) = _rewardPerToken();\\n        // If statement protects against loss in initialisation case\\n        if (newRewardPerToken > 0) {\\n            globalData.rewardPerTokenStored = SafeCast.toUint96(newRewardPerToken);\\n            globalData.lastUpdateTime = SafeCast.toUint32(lastApplicableTime);\\n            // Setting of personal vars based on new globals\\n            if (_account != address(0)) {\\n                userData[_account] = UserData({\\n                    rewardPerTokenPaid: SafeCast.toUint128(newRewardPerToken),\\n                    rewards: SafeCast.toUint128(_earned(_account, newRewardPerToken))\\n                });\\n            }\\n        }\\n    }\\n\\n    /***************************************\\n                    ACTIONS\\n    ****************************************/\\n\\n    /**\\n     * @dev Claims outstanding rewards for the sender.\\n     * First updates outstanding reward allocation and then transfers.\\n     */\\n    function claimReward(address _to) public {\\n        _claimReward(_to);\\n    }\\n\\n    /**\\n     * @dev Claims outstanding rewards for the sender.\\n     * First updates outstanding reward allocation and then transfers.\\n     */\\n    function claimReward() public {\\n        _claimReward(_msgSender());\\n    }\\n\\n    function _claimReward(address _to) internal updateReward(_msgSender()) {\\n        uint128 reward = userData[_msgSender()].rewards;\\n        if (reward > 0) {\\n            userData[_msgSender()].rewards = 0;\\n            REWARDS_TOKEN.safeTransferFrom(rewardTokenVendor, _to, reward);\\n            emit RewardPaid(_msgSender(), _to, reward);\\n        }\\n        _claimRewardHook(_msgSender());\\n    }\\n\\n    /***************************************\\n                    GETTERS\\n    ****************************************/\\n\\n    /**\\n     * @dev Gets the RewardsToken\\n     */\\n    function getRewardToken() external view override returns (IERC20) {\\n        return REWARDS_TOKEN;\\n    }\\n\\n    /**\\n     * @dev Gets the last applicable timestamp for this reward period\\n     */\\n    function lastTimeRewardApplicable() public view returns (uint256) {\\n        return StableMath.min(block.timestamp, globalData.periodFinish);\\n    }\\n\\n    /**\\n     * @dev Calculates the amount of unclaimed rewards per token since last update,\\n     * and sums with stored to give the new cumulative reward per token\\n     * @return 'Reward' per staked token\\n     */\\n    function rewardPerToken() public view returns (uint256) {\\n        (uint256 rewardPerToken_, ) = _rewardPerToken();\\n        return rewardPerToken_;\\n    }\\n\\n    function _rewardPerToken()\\n        internal\\n        view\\n        returns (uint256 rewardPerToken_, uint256 lastTimeRewardApplicable_)\\n    {\\n        uint256 lastApplicableTime = lastTimeRewardApplicable(); // + 1 SLOAD\\n        Data memory data = globalData;\\n        uint256 timeDelta = lastApplicableTime - data.lastUpdateTime; // + 1 SLOAD\\n        // If this has been called twice in the same block, shortcircuit to reduce gas\\n        if (timeDelta == 0) {\\n            return (data.rewardPerTokenStored, lastApplicableTime);\\n        }\\n        // new reward units to distribute = rewardRate * timeSinceLastUpdate\\n        uint256 rewardUnitsToDistribute = data.rewardRate * timeDelta; // + 1 SLOAD\\n        uint256 supply = totalSupply(); // + 1 SLOAD\\n        // If there is no StakingToken liquidity, avoid div(0)\\n        // If there is nothing to distribute, short circuit\\n        if (supply == 0 || rewardUnitsToDistribute == 0) {\\n            return (data.rewardPerTokenStored, lastApplicableTime);\\n        }\\n        // new reward units per token = (rewardUnitsToDistribute * 1e18) / totalTokens\\n        uint256 unitsToDistributePerToken = rewardUnitsToDistribute.divPrecisely(supply);\\n        // return summed rate\\n        return (data.rewardPerTokenStored + unitsToDistributePerToken, lastApplicableTime); // + 1 SLOAD\\n    }\\n\\n    /**\\n     * @dev Calculates the amount of unclaimed rewards a user has earned\\n     * @param _account User address\\n     * @return Total reward amount earned\\n     */\\n    function earned(address _account) public view returns (uint256) {\\n        return _earned(_account, rewardPerToken());\\n    }\\n\\n    function _earned(address _account, uint256 _currentRewardPerToken)\\n        internal\\n        view\\n        returns (uint256)\\n    {\\n        // current rate per token - rate user previously received\\n        uint256 userRewardDelta = _currentRewardPerToken - userData[_account].rewardPerTokenPaid; // + 1 SLOAD\\n        // Short circuit if there is nothing new to distribute\\n        if (userRewardDelta == 0) {\\n            return userData[_account].rewards;\\n        }\\n        // new reward = staked tokens * difference in rate\\n        uint256 userNewReward = balanceOf(_account).mulTruncate(userRewardDelta); // + 1 SLOAD\\n        // add to previous rewards\\n        return userData[_account].rewards + userNewReward;\\n    }\\n\\n    /***************************************\\n                    ABSTRACT\\n    ****************************************/\\n\\n    function balanceOf(address account) public view virtual returns (uint256);\\n\\n    function totalSupply() public view virtual returns (uint256);\\n\\n    function _claimRewardHook(address account) internal virtual;\\n\\n    /***************************************\\n                    ADMIN\\n    ****************************************/\\n\\n    /**\\n     * @dev Notifies the contract that new rewards have been added.\\n     * Calculates an updated rewardRate based on the rewards in period.\\n     * @param _reward Units of RewardToken that have been added to the pool\\n     */\\n    function notifyRewardAmount(uint256 _reward)\\n        external\\n        override\\n        onlyRewardsDistributor\\n        updateReward(address(0))\\n    {\\n        require(_reward < 1e24, \\\"Notify more than a million units\\\");\\n\\n        uint256 currentTime = block.timestamp;\\n\\n        // Pay and reset the pendingAdditionalRewards\\n        if (pendingAdditionalReward > 1) {\\n            _reward += (pendingAdditionalReward - 1);\\n            pendingAdditionalReward = 1;\\n        }\\n        if (_reward > 0) {\\n            REWARDS_TOKEN.safeTransfer(rewardTokenVendor, _reward);\\n        }\\n\\n        // If previous period over, reset rewardRate\\n        if (currentTime >= globalData.periodFinish) {\\n            globalData.rewardRate = SafeCast.toUint96(_reward / DURATION);\\n        }\\n        // If additional reward to existing period, calc sum\\n        else {\\n            uint256 remainingSeconds = globalData.periodFinish - currentTime;\\n            uint256 leftover = remainingSeconds * globalData.rewardRate;\\n            globalData.rewardRate = SafeCast.toUint96((_reward + leftover) / DURATION);\\n        }\\n\\n        globalData.lastUpdateTime = SafeCast.toUint32(currentTime);\\n        globalData.periodFinish = SafeCast.toUint32(currentTime + DURATION);\\n\\n        emit RewardAdded(_reward);\\n    }\\n\\n    /**\\n     * @dev Called by the child contract to notify of any additional rewards that have accrued.\\n     *      Trusts that this is called honestly.\\n     * @param _additionalReward Units of additional RewardToken to add at the next notification\\n     */\\n    function _notifyAdditionalReward(uint256 _additionalReward) internal virtual {\\n        require(_additionalReward < 1e24, \\\"Cannot notify with more than a million units\\\");\\n\\n        pendingAdditionalReward += _additionalReward;\\n    }\\n}\\n\"\r\n    },\r\n    \"contracts/governance/staking/QuestManager.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: AGPL-3.0-or-later\\npragma solidity 0.8.6;\\n\\nimport { Initializable } from \\\"@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol\\\";\\nimport { ContextUpgradeable } from \\\"@openzeppelin/contracts-upgradeable/utils/ContextUpgradeable.sol\\\";\\nimport { SignatureVerifier } from \\\"./deps/SignatureVerifier.sol\\\";\\nimport { ImmutableModule } from \\\"../../shared/ImmutableModule.sol\\\";\\nimport { SafeCast } from \\\"@openzeppelin/contracts/utils/math/SafeCast.sol\\\";\\nimport { IQuestManager } from \\\"./interfaces/IQuestManager.sol\\\";\\nimport { IStakedToken } from \\\"./interfaces/IStakedToken.sol\\\";\\nimport \\\"./deps/GamifiedTokenStructs.sol\\\";\\n\\n/**\\n * @title   QuestManager\\n * @author  mStable\\n * @notice  Centralised place to track quest management and completion status\\n * @dev     VERSION: 1.0\\n *          DATE:    2021-08-25\\n */\\ncontract QuestManager is IQuestManager, Initializable, ContextUpgradeable, ImmutableModule {\\n    /// @notice Tracks the completion of each quest (user => questId => completion)\\n    mapping(address => mapping(uint256 => bool)) private _questCompletion;\\n\\n    /// @notice User balance structs containing all data needed to scale balance\\n    mapping(address => QuestBalance) internal _balances;\\n\\n    /// @notice List of quests, whose ID corresponds to their position in the array (from 0)\\n    Quest[] private _quests;\\n    /// @notice Timestamp at which the current season started\\n    uint32 public override seasonEpoch;\\n    /// @notice Timestamp at which the contract was created\\n    uint32 public startTime;\\n\\n    /// @notice A whitelisted questMaster who can administer quests including signing user quests are completed.\\n    address public override questMaster;\\n    /// @notice account that can sign a user's quest as being completed.\\n    address internal _questSigner;\\n\\n    /// @notice List of all staking tokens\\n    address[] internal _stakedTokens;\\n\\n    /**\\n     * @param _nexus System nexus\\n     */\\n    constructor(address _nexus) ImmutableModule(_nexus) {}\\n\\n    /**\\n     * @param _questMaster account that can sign user quests as completed\\n     * @param _questSignerArg account that can sign user quests as completed\\n     */\\n    function initialize(address _questMaster, address _questSignerArg) external initializer {\\n        startTime = SafeCast.toUint32(block.timestamp);\\n        questMaster = _questMaster;\\n        _questSigner = _questSignerArg;\\n    }\\n\\n    /**\\n     * @dev Checks that _msgSender is either governor or the quest master\\n     */\\n    modifier questMasterOrGovernor() {\\n        _questMasterOrGovernor();\\n        _;\\n    }\\n\\n    function _questMasterOrGovernor() internal view {\\n        require(_msgSender() == questMaster || _msgSender() == _governor(), \\\"Not verified\\\");\\n    }\\n\\n    /***************************************\\n                    Getters\\n    ****************************************/\\n\\n    /**\\n     * @notice Gets raw quest data\\n     */\\n    function getQuest(uint256 _id) external view override returns (Quest memory) {\\n        return _quests[_id];\\n    }\\n\\n    /**\\n     * @dev Simply checks if a given user has already completed a given quest\\n     * @param _account User address\\n     * @param _id Position of quest in array\\n     * @return bool with completion status\\n     */\\n    function hasCompleted(address _account, uint256 _id) public view override returns (bool) {\\n        return _questCompletion[_account][_id];\\n    }\\n\\n    /**\\n     * @notice Raw quest balance\\n     */\\n    function balanceData(address _account) external view override returns (QuestBalance memory) {\\n        return _balances[_account];\\n    }\\n\\n    /***************************************\\n                    Admin\\n    ****************************************/\\n\\n    /**\\n     * @dev Sets the quest master that can administoer quests. eg add, expire and start seasons.\\n     */\\n    function setQuestMaster(address _newQuestMaster) external override questMasterOrGovernor {\\n        emit QuestMaster(questMaster, _newQuestMaster);\\n\\n        questMaster = _newQuestMaster;\\n    }\\n\\n    /**\\n     * @dev Sets the quest signer that can sign user quests as being completed.\\n     */\\n    function setQuestSigner(address _newQuestSigner) external override onlyGovernor {\\n        emit QuestSigner(_questSigner, _newQuestSigner);\\n\\n        _questSigner = _newQuestSigner;\\n    }\\n\\n    /**\\n     * @dev Adds a new stakedToken\\n     */\\n    function addStakedToken(address _stakedToken) external override onlyGovernor {\\n        require(_stakedToken != address(0), \\\"Invalid StakedToken\\\");\\n\\n        _stakedTokens.push(_stakedToken);\\n\\n        emit StakedTokenAdded(_stakedToken);\\n    }\\n\\n    /***************************************\\n                    QUESTS\\n    ****************************************/\\n\\n    /**\\n     * @dev Called by questMasters to add a new quest to the system with default 'ACTIVE' status\\n     * @param _model Type of quest rewards multiplier (does it last forever or just for the season).\\n     * @param _multiplier Multiplier, from 1 == 1.01x to 100 == 2.00x\\n     * @param _expiry Timestamp at which quest expires. Note that permanent quests should still be given a timestamp.\\n     */\\n    function addQuest(\\n        QuestType _model,\\n        uint8 _multiplier,\\n        uint32 _expiry\\n    ) external override questMasterOrGovernor {\\n        require(_expiry > block.timestamp + 1 days, \\\"Quest window too small\\\");\\n        require(_multiplier > 0 && _multiplier <= 50, \\\"Quest multiplier too large > 1.5x\\\");\\n\\n        _quests.push(\\n            Quest({\\n                model: _model,\\n                multiplier: _multiplier,\\n                status: QuestStatus.ACTIVE,\\n                expiry: _expiry\\n            })\\n        );\\n\\n        emit QuestAdded(\\n            msg.sender,\\n            _quests.length - 1,\\n            _model,\\n            _multiplier,\\n            QuestStatus.ACTIVE,\\n            _expiry\\n        );\\n    }\\n\\n    /**\\n     * @dev Called by questMasters to expire a quest, setting it's status as EXPIRED. After which it can\\n     * no longer be completed.\\n     * @param _id Quest ID (its position in the array)\\n     */\\n    function expireQuest(uint16 _id) external override questMasterOrGovernor {\\n        require(_id < _quests.length, \\\"Quest does not exist\\\");\\n        require(_quests[_id].status == QuestStatus.ACTIVE, \\\"Quest already expired\\\");\\n\\n        _quests[_id].status = QuestStatus.EXPIRED;\\n        if (block.timestamp < _quests[_id].expiry) {\\n            _quests[_id].expiry = SafeCast.toUint32(block.timestamp);\\n        }\\n\\n        emit QuestExpired(_id);\\n    }\\n\\n    /**\\n     * @dev Called by questMasters to start a new quest season. After this, all current\\n     * seasonMultipliers will be reduced at the next user action (or triggered manually).\\n     * In order to reduce cost for any keepers, it is suggested to add quests at the start\\n     * of a new season to incentivise user actions.\\n     * A new season can only begin after 9 months has passed.\\n     */\\n    function startNewQuestSeason() external override questMasterOrGovernor {\\n        require(block.timestamp > (startTime + 39 weeks), \\\"First season has not elapsed\\\");\\n        require(block.timestamp > (seasonEpoch + 39 weeks), \\\"Season has not elapsed\\\");\\n\\n        uint256 len = _quests.length;\\n        for (uint256 i = 0; i < len; i++) {\\n            Quest memory quest = _quests[i];\\n            if (quest.model == QuestType.SEASONAL) {\\n                require(\\n                    quest.status == QuestStatus.EXPIRED || block.timestamp > quest.expiry,\\n                    \\\"All seasonal quests must have expired\\\"\\n                );\\n            }\\n        }\\n\\n        seasonEpoch = SafeCast.toUint32(block.timestamp);\\n\\n        emit QuestSeasonEnded();\\n    }\\n\\n    /***************************************\\n                    USER\\n    ****************************************/\\n\\n    /**\\n     * @dev Called by anyone to complete one or more quests for a staker. The user must first collect a signed message\\n     * from the whitelisted _signer.\\n     * @param _account Account that has completed the quest\\n     * @param _ids Quest IDs (its position in the array)\\n     * @param _signature Signature from the verified _questSigner, containing keccak hash of account & ids\\n     */\\n    function completeUserQuests(\\n        address _account,\\n        uint256[] memory _ids,\\n        bytes calldata _signature\\n    ) external override {\\n        uint256 len = _ids.length;\\n        require(len > 0, \\\"No quest IDs\\\");\\n\\n        uint8 questMultiplier = checkForSeasonFinish(_account);\\n\\n        // For each quest\\n        for (uint256 i = 0; i < len; i++) {\\n            require(_validQuest(_ids[i]), \\\"Invalid Quest ID\\\");\\n            require(!hasCompleted(_account, _ids[i]), \\\"Quest already completed\\\");\\n            require(\\n                SignatureVerifier.verify(_questSigner, _account, _ids, _signature),\\n                \\\"Invalid Quest Signer Signature\\\"\\n            );\\n\\n            // Store user quest has completed\\n            _questCompletion[_account][_ids[i]] = true;\\n\\n            // Update multiplier\\n            Quest memory quest = _quests[_ids[i]];\\n            if (quest.model == QuestType.PERMANENT) {\\n                _balances[_account].permMultiplier += quest.multiplier;\\n            } else {\\n                _balances[_account].seasonMultiplier += quest.multiplier;\\n            }\\n            questMultiplier += quest.multiplier;\\n        }\\n\\n        uint256 len2 = _stakedTokens.length;\\n        for (uint256 i = 0; i < len2; i++) {\\n            IStakedToken(_stakedTokens[i]).applyQuestMultiplier(_account, questMultiplier);\\n        }\\n\\n        emit QuestCompleteQuests(_account, _ids);\\n    }\\n\\n    /**\\n     * @dev Called by anyone to complete one or more accounts for a quest. The user must first collect a signed message\\n     * from the whitelisted _questMaster.\\n     * @param _questId Quest ID (its position in the array)\\n     * @param _accounts Accounts that has completed the quest\\n     * @param _signature Signature from the verified _questMaster, containing keccak hash of id and accounts\\n     */\\n    function completeQuestUsers(\\n        uint256 _questId,\\n        address[] memory _accounts,\\n        bytes calldata _signature\\n    ) external override {\\n        require(_validQuest(_questId), \\\"Invalid Quest ID\\\");\\n        uint256 len = _accounts.length;\\n        require(len > 0, \\\"No accounts\\\");\\n        require(\\n            SignatureVerifier.verify(_questSigner, _questId, _accounts, _signature),\\n            \\\"Invalid Quest Signer Signature\\\"\\n        );\\n\\n        Quest memory quest = _quests[_questId];\\n\\n        // For each user account\\n        for (uint256 i = 0; i < len; i++) {\\n            require(!hasCompleted(_accounts[i], _questId), \\\"Quest already completed\\\");\\n\\n            // store user quest has completed\\n            _questCompletion[_accounts[i]][_questId] = true;\\n\\n            // _applyQuestMultiplier(_accounts[i], quests);\\n            uint8 questMultiplier = checkForSeasonFinish(_accounts[i]);\\n\\n            // Update multiplier\\n            if (quest.model == QuestType.PERMANENT) {\\n                _balances[_accounts[i]].permMultiplier += quest.multiplier;\\n            } else {\\n                _balances[_accounts[i]].seasonMultiplier += quest.multiplier;\\n            }\\n            questMultiplier += quest.multiplier;\\n\\n            uint256 len2 = _stakedTokens.length;\\n            for (uint256 j = 0; j < len2; j++) {\\n                IStakedToken(_stakedTokens[j]).applyQuestMultiplier(_accounts[i], questMultiplier);\\n            }\\n        }\\n\\n        emit QuestCompleteUsers(_questId, _accounts);\\n    }\\n\\n    /**\\n     * @dev Simply checks if a quest is valid. Quests are valid if their id exists,\\n     * they have an ACTIVE status and they have not yet reached their expiry timestamp.\\n     * @param _id Position of quest in array\\n     * @return bool with validity status\\n     */\\n    function _validQuest(uint256 _id) internal view returns (bool) {\\n        return\\n            _id < _quests.length &&\\n            _quests[_id].status == QuestStatus.ACTIVE &&\\n            block.timestamp < _quests[_id].expiry;\\n    }\\n\\n    /**\\n     * @dev Checks if the season has just finished between now and the users last action.\\n     * If it has, we reset the seasonMultiplier. Either way, we update the lastAction for the user.\\n     * NOTE - it is important that this is called as a hook before each state change operation\\n     * @param _account Address of user that should be updated\\n     */\\n    function checkForSeasonFinish(address _account)\\n        public\\n        override\\n        returns (uint8 newQuestMultiplier)\\n    {\\n        QuestBalance storage balance = _balances[_account];\\n        // If the last action was before current season, then reset the season timing\\n        if (_hasFinishedSeason(balance.lastAction)) {\\n            // Remove 85% of the multiplier gained in this season\\n            balance.seasonMultiplier = (balance.seasonMultiplier * 15) / 100;\\n            balance.lastAction = SafeCast.toUint32(block.timestamp);\\n        }\\n        return balance.seasonMultiplier + balance.permMultiplier;\\n    }\\n\\n    /**\\n     * @dev Simple view fn to check if the users last action was before the starting of the current season\\n     */\\n    function _hasFinishedSeason(uint32 _lastAction) internal view returns (bool) {\\n        return _lastAction < seasonEpoch;\\n    }\\n}\\n\"\r\n    },\r\n    \"contracts/rewards/InitializableRewardsDistributionRecipient.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: AGPL-3.0-or-later\\npragma solidity 0.8.6;\\n\\nimport { ImmutableModule } from \\\"../shared/ImmutableModule.sol\\\";\\nimport { IERC20 } from \\\"@openzeppelin/contracts/token/ERC20/IERC20.sol\\\";\\nimport { IRewardsDistributionRecipient } from \\\"../interfaces/IRewardsDistributionRecipient.sol\\\";\\n\\n/**\\n * @title  RewardsDistributionRecipient\\n * @author Originally: Synthetix (forked from /Synthetixio/synthetix/contracts/RewardsDistributionRecipient.sol)\\n *         Changes by: mStable\\n * @notice RewardsDistributionRecipient gets notified of additional rewards by the rewardsDistributor\\n * @dev    Changes: Addition of Module and abstract `getRewardToken` func + cosmetic\\n */\\nabstract contract InitializableRewardsDistributionRecipient is\\n    IRewardsDistributionRecipient,\\n    ImmutableModule\\n{\\n    // This address has the ability to distribute the rewards\\n    address public rewardsDistributor;\\n\\n    constructor(address _nexus) ImmutableModule(_nexus) {}\\n\\n    /** @dev Recipient is a module, governed by mStable governance */\\n    function _initialize(address _rewardsDistributor) internal virtual {\\n        rewardsDistributor = _rewardsDistributor;\\n    }\\n\\n    /**\\n     * @dev Only the rewards distributor can notify about rewards\\n     */\\n    modifier onlyRewardsDistributor() {\\n        require(msg.sender == rewardsDistributor, \\\"Caller is not reward distributor\\\");\\n        _;\\n    }\\n\\n    /**\\n     * @dev Change the rewardsDistributor - only called by mStable governor\\n     * @param _rewardsDistributor   Address of the new distributor\\n     */\\n    function setRewardsDistribution(address _rewardsDistributor) external onlyGovernor {\\n        rewardsDistributor = _rewardsDistributor;\\n    }\\n}\\n\"\r\n    },\r\n    \"contracts/shared/StableMath.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: AGPL-3.0-or-later\\npragma solidity 0.8.6;\\n\\n/**\\n * @title   StableMath\\n * @author  mStable\\n * @notice  A library providing safe mathematical operations to multiply and\\n *          divide with standardised precision.\\n * @dev     Derives from OpenZeppelin's SafeMath lib and uses generic system\\n *          wide variables for managing precision.\\n */\\nlibrary StableMath {\\n    /**\\n     * @dev Scaling unit for use in specific calculations,\\n     * where 1 * 10**18, or 1e18 represents a unit '1'\\n     */\\n    uint256 private constant FULL_SCALE = 1e18;\\n\\n    /**\\n     * @dev Token Ratios are used when converting between units of bAsset, mAsset and MTA\\n     * Reasoning: Takes into account token decimals, and difference in base unit (i.e. grams to Troy oz for gold)\\n     * bAsset ratio unit for use in exact calculations,\\n     * where (1 bAsset unit * bAsset.ratio) / ratioScale == x mAsset unit\\n     */\\n    uint256 private constant RATIO_SCALE = 1e8;\\n\\n    /**\\n     * @dev Provides an interface to the scaling unit\\n     * @return Scaling unit (1e18 or 1 * 10**18)\\n     */\\n    function getFullScale() internal pure returns (uint256) {\\n        return FULL_SCALE;\\n    }\\n\\n    /**\\n     * @dev Provides an interface to the ratio unit\\n     * @return Ratio scale unit (1e8 or 1 * 10**8)\\n     */\\n    function getRatioScale() internal pure returns (uint256) {\\n        return RATIO_SCALE;\\n    }\\n\\n    /**\\n     * @dev Scales a given integer to the power of the full scale.\\n     * @param x   Simple uint256 to scale\\n     * @return    Scaled value a to an exact number\\n     */\\n    function scaleInteger(uint256 x) internal pure returns (uint256) {\\n        return x * FULL_SCALE;\\n    }\\n\\n    /***************************************\\n              PRECISE ARITHMETIC\\n    ****************************************/\\n\\n    /**\\n     * @dev Multiplies two precise units, and then truncates by the full scale\\n     * @param x     Left hand input to multiplication\\n     * @param y     Right hand input to multiplication\\n     * @return      Result after multiplying the two inputs and then dividing by the shared\\n     *              scale unit\\n     */\\n    function mulTruncate(uint256 x, uint256 y) internal pure returns (uint256) {\\n        return mulTruncateScale(x, y, FULL_SCALE);\\n    }\\n\\n    /**\\n     * @dev Multiplies two precise units, and then truncates by the given scale. For example,\\n     * when calculating 90% of 10e18, (10e18 * 9e17) / 1e18 = (9e36) / 1e18 = 9e18\\n     * @param x     Left hand input to multiplication\\n     * @param y     Right hand input to multiplication\\n     * @param scale Scale unit\\n     * @return      Result after multiplying the two inputs and then dividing by the shared\\n     *              scale unit\\n     */\\n    function mulTruncateScale(\\n        uint256 x,\\n        uint256 y,\\n        uint256 scale\\n    ) internal pure returns (uint256) {\\n        // e.g. assume scale = fullScale\\n        // z = 10e18 * 9e17 = 9e36\\n        // return 9e36 / 1e18 = 9e18\\n        return (x * y) / scale;\\n    }\\n\\n    /**\\n     * @dev Multiplies two precise units, and then truncates by the full scale, rounding up the result\\n     * @param x     Left hand input to multiplication\\n     * @param y     Right hand input to multiplication\\n     * @return      Result after multiplying the two inputs and then dividing by the shared\\n     *              scale unit, rounded up to the closest base unit.\\n     */\\n    function mulTruncateCeil(uint256 x, uint256 y) internal pure returns (uint256) {\\n        // e.g. 8e17 * 17268172638 = 138145381104e17\\n        uint256 scaled = x * y;\\n        // e.g. 138145381104e17 + 9.99...e17 = 138145381113.99...e17\\n        uint256 ceil = scaled + FULL_SCALE - 1;\\n        // e.g. 13814538111.399...e18 / 1e18 = 13814538111\\n        return ceil / FULL_SCALE;\\n    }\\n\\n    /**\\n     * @dev Precisely divides two units, by first scaling the left hand operand. Useful\\n     *      for finding percentage weightings, i.e. 8e18/10e18 = 80% (or 8e17)\\n     * @param x     Left hand input to division\\n     * @param y     Right hand input to division\\n     * @return      Result after multiplying the left operand by the scale, and\\n     *              executing the division on the right hand input.\\n     */\\n    function divPrecisely(uint256 x, uint256 y) internal pure returns (uint256) {\\n        // e.g. 8e18 * 1e18 = 8e36\\n        // e.g. 8e36 / 10e18 = 8e17\\n        return (x * FULL_SCALE) / y;\\n    }\\n\\n    /***************************************\\n                  RATIO FUNCS\\n    ****************************************/\\n\\n    /**\\n     * @dev Multiplies and truncates a token ratio, essentially flooring the result\\n     *      i.e. How much mAsset is this bAsset worth?\\n     * @param x     Left hand operand to multiplication (i.e Exact quantity)\\n     * @param ratio bAsset ratio\\n     * @return c    Result after multiplying the two inputs and then dividing by the ratio scale\\n     */\\n    function mulRatioTruncate(uint256 x, uint256 ratio) internal pure returns (uint256 c) {\\n        return mulTruncateScale(x, ratio, RATIO_SCALE);\\n    }\\n\\n    /**\\n     * @dev Multiplies and truncates a token ratio, rounding up the result\\n     *      i.e. How much mAsset is this bAsset worth?\\n     * @param x     Left hand input to multiplication (i.e Exact quantity)\\n     * @param ratio bAsset ratio\\n     * @return      Result after multiplying the two inputs and then dividing by the shared\\n     *              ratio scale, rounded up to the closest base unit.\\n     */\\n    function mulRatioTruncateCeil(uint256 x, uint256 ratio) internal pure returns (uint256) {\\n        // e.g. How much mAsset should I burn for this bAsset (x)?\\n        // 1e18 * 1e8 = 1e26\\n        uint256 scaled = x * ratio;\\n        // 1e26 + 9.99e7 = 100..00.999e8\\n        uint256 ceil = scaled + RATIO_SCALE - 1;\\n        // return 100..00.999e8 / 1e8 = 1e18\\n        return ceil / RATIO_SCALE;\\n    }\\n\\n    /**\\n     * @dev Precisely divides two ratioed units, by first scaling the left hand operand\\n     *      i.e. How much bAsset is this mAsset worth?\\n     * @param x     Left hand operand in division\\n     * @param ratio bAsset ratio\\n     * @return c    Result after multiplying the left operand by the scale, and\\n     *              executing the division on the right hand input.\\n     */\\n    function divRatioPrecisely(uint256 x, uint256 ratio) internal pure returns (uint256 c) {\\n        // e.g. 1e14 * 1e8 = 1e22\\n        // return 1e22 / 1e12 = 1e10\\n        return (x * RATIO_SCALE) / ratio;\\n    }\\n\\n    /***************************************\\n                    HELPERS\\n    ****************************************/\\n\\n    /**\\n     * @dev Calculates minimum of two numbers\\n     * @param x     Left hand input\\n     * @param y     Right hand input\\n     * @return      Minimum of the two inputs\\n     */\\n    function min(uint256 x, uint256 y) internal pure returns (uint256) {\\n        return x > y ? y : x;\\n    }\\n\\n    /**\\n     * @dev Calculated maximum of two numbers\\n     * @param x     Left hand input\\n     * @param y     Right hand input\\n     * @return      Maximum of the two inputs\\n     */\\n    function max(uint256 x, uint256 y) internal pure returns (uint256) {\\n        return x > y ? x : y;\\n    }\\n\\n    /**\\n     * @dev Clamps a value to an upper bound\\n     * @param x           Left hand input\\n     * @param upperBound  Maximum possible value to return\\n     * @return            Input x clamped to a maximum value, upperBound\\n     */\\n    function clamp(uint256 x, uint256 upperBound) internal pure returns (uint256) {\\n        return x > upperBound ? upperBound : x;\\n    }\\n}\\n\"\r\n    },\r\n    \"contracts/rewards/staking/PlatformTokenVendorFactory.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: AGPL-3.0-or-later\\npragma solidity 0.8.6;\\n\\nimport { IERC20 } from \\\"@openzeppelin/contracts/token/ERC20/IERC20.sol\\\";\\nimport { PlatformTokenVendor } from \\\"./PlatformTokenVendor.sol\\\";\\n\\n/**\\n * @title  PlatformTokenVendorFactory\\n * @author mStable\\n * @notice Library that deploys a PlatformTokenVendor contract which holds rewards tokens\\n * @dev    Used to reduce the byte size of the contracts that need to deploy a PlatformTokenVendor contract\\n */\\nlibrary PlatformTokenVendorFactory {\\n    /// @dev for some reason Typechain will not generate the types if the library only has the create function\\n    function dummy() public pure returns (bool) {\\n        return true;\\n    }\\n\\n    /**\\n     * @notice Deploys a new PlatformTokenVendor contract\\n     * @param _rewardsToken reward or platform rewards token. eg MTA or WMATIC\\n     * @return address of the deployed PlatformTokenVendor contract\\n     */\\n    function create(IERC20 _rewardsToken) public returns (address) {\\n        PlatformTokenVendor newPlatformTokenVendor = new PlatformTokenVendor(_rewardsToken);\\n        return address(newPlatformTokenVendor);\\n    }\\n}\\n\"\r\n    },\r\n    \"contracts/shared/ImmutableModule.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: AGPL-3.0-or-later\\npragma solidity 0.8.6;\\n\\nimport { ModuleKeys } from \\\"./ModuleKeys.sol\\\";\\nimport { INexus } from \\\"../interfaces/INexus.sol\\\";\\n\\n/**\\n * @title   ImmutableModule\\n * @author  mStable\\n * @dev     Subscribes to module updates from a given publisher and reads from its registry.\\n *          Contract is used for upgradable proxy contracts.\\n */\\nabstract contract ImmutableModule is ModuleKeys {\\n    INexus public immutable nexus;\\n\\n    /**\\n     * @dev Initialization function for upgradable proxy contracts\\n     * @param _nexus Nexus contract address\\n     */\\n    constructor(address _nexus) {\\n        require(_nexus != address(0), \\\"Nexus address is zero\\\");\\n        nexus = INexus(_nexus);\\n    }\\n\\n    /**\\n     * @dev Modifier to allow function calls only from the Governor.\\n     */\\n    modifier onlyGovernor() {\\n        _onlyGovernor();\\n        _;\\n    }\\n\\n    function _onlyGovernor() internal view {\\n        require(msg.sender == _governor(), \\\"Only governor can execute\\\");\\n    }\\n\\n    /**\\n     * @dev Modifier to allow function calls only from the Governance.\\n     *      Governance is either Governor address or Governance address.\\n     */\\n    modifier onlyGovernance() {\\n        require(\\n            msg.sender == _governor() || msg.sender == _governance(),\\n            \\\"Only governance can execute\\\"\\n        );\\n        _;\\n    }\\n\\n    /**\\n     * @dev Returns Governor address from the Nexus\\n     * @return Address of Governor Contract\\n     */\\n    function _governor() internal view returns (address) {\\n        return nexus.governor();\\n    }\\n\\n    /**\\n     * @dev Returns Governance Module address from the Nexus\\n     * @return Address of the Governance (Phase 2)\\n     */\\n    function _governance() internal view returns (address) {\\n        return nexus.getModule(KEY_GOVERNANCE);\\n    }\\n\\n    /**\\n     * @dev Return SavingsManager Module address from the Nexus\\n     * @return Address of the SavingsManager Module contract\\n     */\\n    function _savingsManager() internal view returns (address) {\\n        return nexus.getModule(KEY_SAVINGS_MANAGER);\\n    }\\n\\n    /**\\n     * @dev Return Recollateraliser Module address from the Nexus\\n     * @return  Address of the Recollateraliser Module contract (Phase 2)\\n     */\\n    function _recollateraliser() internal view returns (address) {\\n        return nexus.getModule(KEY_RECOLLATERALISER);\\n    }\\n\\n    /**\\n     * @dev Return Liquidator Module address from the Nexus\\n     * @return  Address of the Liquidator Module contract\\n     */\\n    function _liquidator() internal view returns (address) {\\n        return nexus.getModule(KEY_LIQUIDATOR);\\n    }\\n\\n    /**\\n     * @dev Return ProxyAdmin Module address from the Nexus\\n     * @return Address of the ProxyAdmin Module contract\\n     */\\n    function _proxyAdmin() internal view returns (address) {\\n        return nexus.getModule(KEY_PROXY_ADMIN);\\n    }\\n}\\n\"\r\n    },\r\n    \"contracts/interfaces/IRewardsDistributionRecipient.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: AGPL-3.0-or-later\\npragma solidity 0.8.6;\\n\\nimport { IERC20 } from \\\"@openzeppelin/contracts/token/ERC20/IERC20.sol\\\";\\n\\ninterface IRewardsDistributionRecipient {\\n    function notifyRewardAmount(uint256 reward) external;\\n\\n    function getRewardToken() external view returns (IERC20);\\n}\\n\\ninterface IRewardsRecipientWithPlatformToken {\\n    function notifyRewardAmount(uint256 reward) external;\\n\\n    function getRewardToken() external view returns (IERC20);\\n\\n    function getPlatformToken() external view returns (IERC20);\\n}\\n\"\r\n    },\r\n    \"contracts/shared/ModuleKeys.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: AGPL-3.0-or-later\\npragma solidity 0.8.6;\\n\\n/**\\n * @title  ModuleKeys\\n * @author mStable\\n * @notice Provides system wide access to the byte32 represntations of system modules\\n *         This allows each system module to be able to reference and update one another in a\\n *         friendly way\\n * @dev    keccak256() values are hardcoded to avoid re-evaluation of the constants at runtime.\\n */\\ncontract ModuleKeys {\\n    // Governance\\n    // ===========\\n    // keccak256(\\\"Governance\\\");\\n    bytes32 internal constant KEY_GOVERNANCE =\\n        0x9409903de1e6fd852dfc61c9dacb48196c48535b60e25abf92acc92dd689078d;\\n    //keccak256(\\\"Staking\\\");\\n    bytes32 internal constant KEY_STAKING =\\n        0x1df41cd916959d1163dc8f0671a666ea8a3e434c13e40faef527133b5d167034;\\n    //keccak256(\\\"ProxyAdmin\\\");\\n    bytes32 internal constant KEY_PROXY_ADMIN =\\n        0x96ed0203eb7e975a4cbcaa23951943fa35c5d8288117d50c12b3d48b0fab48d1;\\n\\n    // mStable\\n    // =======\\n    // keccak256(\\\"OracleHub\\\");\\n    bytes32 internal constant KEY_ORACLE_HUB =\\n        0x8ae3a082c61a7379e2280f3356a5131507d9829d222d853bfa7c9fe1200dd040;\\n    // keccak256(\\\"Manager\\\");\\n    bytes32 internal constant KEY_MANAGER =\\n        0x6d439300980e333f0256d64be2c9f67e86f4493ce25f82498d6db7f4be3d9e6f;\\n    //keccak256(\\\"Recollateraliser\\\");\\n    bytes32 internal constant KEY_RECOLLATERALISER =\\n        0x39e3ed1fc335ce346a8cbe3e64dd525cf22b37f1e2104a755e761c3c1eb4734f;\\n    //keccak256(\\\"MetaToken\\\");\\n    bytes32 internal constant KEY_META_TOKEN =\\n        0xea7469b14936af748ee93c53b2fe510b9928edbdccac3963321efca7eb1a57a2;\\n    // keccak256(\\\"SavingsManager\\\");\\n    bytes32 internal constant KEY_SAVINGS_MANAGER =\\n        0x12fe936c77a1e196473c4314f3bed8eeac1d757b319abb85bdda70df35511bf1;\\n    // keccak256(\\\"Liquidator\\\");\\n    bytes32 internal constant KEY_LIQUIDATOR =\\n        0x1e9cb14d7560734a61fa5ff9273953e971ff3cd9283c03d8346e3264617933d4;\\n    // keccak256(\\\"InterestValidator\\\");\\n    bytes32 internal constant KEY_INTEREST_VALIDATOR =\\n        0xc10a28f028c7f7282a03c90608e38a4a646e136e614e4b07d119280c5f7f839f;\\n}\\n\"\r\n    },\r\n    \"contracts/interfaces/INexus.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: AGPL-3.0-or-later\\npragma solidity 0.8.6;\\n\\n/**\\n * @title INexus\\n * @dev Basic interface for interacting with the Nexus i.e. SystemKernel\\n */\\ninterface INexus {\\n    function governor() external view returns (address);\\n\\n    function getModule(bytes32 key) external view returns (address);\\n\\n    function proposeModule(bytes32 _key, address _addr) external;\\n\\n    function cancelProposedModule(bytes32 _key) external;\\n\\n    function acceptProposedModule(bytes32 _key) external;\\n\\n    function acceptProposedModules(bytes32[] calldata _keys) external;\\n\\n    function requestLockModule(bytes32 _key) external;\\n\\n    function cancelLockModule(bytes32 _key) external;\\n\\n    function lockModule(bytes32 _key) external;\\n}\\n\"\r\n    },\r\n    \"contracts/rewards/staking/PlatformTokenVendor.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: AGPL-3.0-or-later\\npragma solidity 0.8.6;\\n\\nimport { IERC20 } from \\\"@openzeppelin/contracts/token/ERC20/IERC20.sol\\\";\\nimport { MassetHelpers } from \\\"../../shared/MassetHelpers.sol\\\";\\n\\n/**\\n * @title  PlatformTokenVendor\\n * @author mStable\\n * @notice Stores platform tokens for distributing to StakingReward participants\\n * @dev    Only deploy this during the constructor of a given StakingReward contract\\n */\\ncontract PlatformTokenVendor {\\n    IERC20 public immutable platformToken;\\n    address public immutable parentStakingContract;\\n\\n    /** @dev Simple constructor that stores the parent address */\\n    constructor(IERC20 _platformToken) {\\n        parentStakingContract = msg.sender;\\n        platformToken = _platformToken;\\n        MassetHelpers.safeInfiniteApprove(address(_platformToken), msg.sender);\\n    }\\n\\n    /**\\n     * @dev Re-approves the StakingReward contract to spend the platform token.\\n     * Just incase for some reason approval has been reset.\\n     */\\n    function reApproveOwner() external {\\n        MassetHelpers.safeInfiniteApprove(address(platformToken), parentStakingContract);\\n    }\\n}\\n\"\r\n    },\r\n    \"contracts/shared/MassetHelpers.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: AGPL-3.0-or-later\\npragma solidity 0.8.6;\\n\\nimport { SafeERC20 } from \\\"@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol\\\";\\nimport { IERC20 } from \\\"@openzeppelin/contracts/token/ERC20/IERC20.sol\\\";\\n\\n/**\\n * @title   MassetHelpers\\n * @author  mStable\\n * @notice  Helper functions to facilitate minting and redemption from off chain\\n * @dev     VERSION: 1.0\\n *          DATE:    2020-03-28\\n */\\nlibrary MassetHelpers {\\n    using SafeERC20 for IERC20;\\n\\n    function transferReturnBalance(\\n        address _sender,\\n        address _recipient,\\n        address _bAsset,\\n        uint256 _qty\\n    ) internal returns (uint256 receivedQty, uint256 recipientBalance) {\\n        uint256 balBefore = IERC20(_bAsset).balanceOf(_recipient);\\n        IERC20(_bAsset).safeTransferFrom(_sender, _recipient, _qty);\\n        recipientBalance = IERC20(_bAsset).balanceOf(_recipient);\\n        receivedQty = recipientBalance - balBefore;\\n    }\\n\\n    function safeInfiniteApprove(address _asset, address _spender) internal {\\n        IERC20(_asset).safeApprove(_spender, 0);\\n        IERC20(_asset).safeApprove(_spender, 2**256 - 1);\\n    }\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/utils/Address.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Collection of functions related to the address type\\n */\\nlibrary Address {\\n    /**\\n     * @dev Returns true if `account` is a contract.\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * It is unsafe to assume that an address for which this function returns\\n     * false is an externally-owned account (EOA) and not a contract.\\n     *\\n     * Among others, `isContract` will return false for the following\\n     * types of addresses:\\n     *\\n     *  - an externally-owned account\\n     *  - a contract in construction\\n     *  - an address where a contract will be created\\n     *  - an address where a contract lived, but was destroyed\\n     * ====\\n     */\\n    function isContract(address account) internal view returns (bool) {\\n        // This method relies on extcodesize, which returns 0 for contracts in\\n        // construction, since the code is only stored at the end of the\\n        // constructor execution.\\n\\n        uint256 size;\\n        assembly {\\n            size := extcodesize(account)\\n        }\\n        return size > 0;\\n    }\\n\\n    /**\\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\\n     * `recipient`, forwarding all available gas and reverting on errors.\\n     *\\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\\n     * imposed by `transfer`, making them unable to receive funds via\\n     * `transfer`. {sendValue} removes this limitation.\\n     *\\n     * https://diligence.consensys.net/posts/2019/09/stop-using-soliditys-transfer-now/[Learn more].\\n     *\\n     * IMPORTANT: because control is transferred to `recipient`, care must be\\n     * taken to not create reentrancy vulnerabilities. Consider using\\n     * {ReentrancyGuard} or the\\n     * https://solidity.readthedocs.io/en/v0.5.11/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\\n     */\\n    function sendValue(address payable recipient, uint256 amount) internal {\\n        require(address(this).balance >= amount, \\\"Address: insufficient balance\\\");\\n\\n        (bool success, ) = recipient.call{value: amount}(\\\"\\\");\\n        require(success, \\\"Address: unable to send value, recipient may have reverted\\\");\\n    }\\n\\n    /**\\n     * @dev Performs a Solidity function call using a low level `call`. A\\n     * plain `call` is an unsafe replacement for a function call: use this\\n     * function instead.\\n     *\\n     * If `target` reverts with a revert reason, it is bubbled up by this\\n     * function (like regular Solidity function calls).\\n     *\\n     * Returns the raw returned data. To convert to the expected return value,\\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\\n     *\\n     * Requirements:\\n     *\\n     * - `target` must be a contract.\\n     * - calling `target` with `data` must not revert.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionCall(target, data, \\\"Address: low-level call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\\n     * `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, 0, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but also transferring `value` wei to `target`.\\n     *\\n     * Requirements:\\n     *\\n     * - the calling contract must have an ETH balance of at least `value`.\\n     * - the called Solidity function must be `payable`.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, value, \\\"Address: low-level call with value failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\\n     * with `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        require(address(this).balance >= value, \\\"Address: insufficient balance for call\\\");\\n        require(isContract(target), \\\"Address: call to non-contract\\\");\\n\\n        (bool success, bytes memory returndata) = target.call{value: value}(data);\\n        return _verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\\n        return functionStaticCall(target, data, \\\"Address: low-level static call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal view returns (bytes memory) {\\n        require(isContract(target), \\\"Address: static call to non-contract\\\");\\n\\n        (bool success, bytes memory returndata) = target.staticcall(data);\\n        return _verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionDelegateCall(target, data, \\\"Address: low-level delegate call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        require(isContract(target), \\\"Address: delegate call to non-contract\\\");\\n\\n        (bool success, bytes memory returndata) = target.delegatecall(data);\\n        return _verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    function _verifyCallResult(\\n        bool success,\\n        bytes memory returndata,\\n        string memory errorMessage\\n    ) private pure returns (bytes memory) {\\n        if (success) {\\n            return returndata;\\n        } else {\\n            // Look for revert reason and bubble it up if present\\n            if (returndata.length > 0) {\\n                // The easiest way to bubble the revert reason is using memory via assembly\\n\\n                assembly {\\n                    let returndata_size := mload(returndata)\\n                    revert(add(32, returndata), returndata_size)\\n                }\\n            } else {\\n                revert(errorMessage);\\n            }\\n        }\\n    }\\n}\\n\"\r\n    },\r\n    \"contracts/governance/staking/deps/SignatureVerifier.sol\": {\r\n      \"content\": \"// ███████╗░█████╗░██████╗░██████╗░███████╗██████╗░░░░███████╗██╗\\n// ╚════██║██╔══██╗██╔══██╗██╔══██╗██╔════╝██╔══██╗░░░██╔════╝██║\\n// ░░███╔═╝███████║██████╔╝██████╔╝█████╗░░██████╔╝░░░█████╗░░██║\\n// ██╔══╝░░██╔══██║██╔═══╝░██╔═══╝░██╔══╝░░██╔══██╗░░░██╔══╝░░██║\\n// ███████╗██║░░██║██║░░░░░██║░░░░░███████╗██║░░██║██╗██║░░░░░██║\\n// ╚══════╝╚═╝░░╚═╝╚═╝░░░░░╚═╝░░░░░╚══════╝╚═╝░░╚═╝╚═╝╚═╝░░░░░╚═╝\\n// Copyright (C) 2021 zapper\\n// Copyright (c) 2018 Tasuku Nakamura\\n\\n// This program is free software: you can redistribute it and/or modify\\n// it under the terms of the GNU Affero General Public License as published by\\n// the Free Software Foundation, either version 2 of the License, or\\n// (at your option) any later version.\\n//\\n// This program is distributed in the hope that it will be useful,\\n// but WITHOUT ANY WARRANTY; without even the implied warranty of\\n// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\\n// GNU Affero General Public License for more details.\\n//\\n\\n///@author Zapper\\n///@notice This contract checks if a message has been signed by a verified signer via personal_sign.\\n// SPDX-License-Identifier: GPLv2\\n\\npragma solidity ^0.8.0;\\n\\nlibrary SignatureVerifier {\\n    function verify(\\n        address signer,\\n        address account,\\n        uint256[] calldata ids,\\n        bytes calldata signature\\n    ) external pure returns (bool) {\\n        bytes32 messageHash = getMessageHash(account, ids);\\n        bytes32 ethSignedMessageHash = getEthSignedMessageHash(messageHash);\\n\\n        return recoverSigner(ethSignedMessageHash, signature) == signer;\\n    }\\n\\n    function verify(\\n        address signer,\\n        uint256 id,\\n        address[] calldata accounts,\\n        bytes calldata signature\\n    ) external pure returns (bool) {\\n        bytes32 messageHash = getMessageHash(id, accounts);\\n        bytes32 ethSignedMessageHash = getEthSignedMessageHash(messageHash);\\n\\n        return recoverSigner(ethSignedMessageHash, signature) == signer;\\n    }\\n\\n    function getMessageHash(address account, uint256[] memory ids) internal pure returns (bytes32) {\\n        return keccak256(abi.encodePacked(account, ids));\\n    }\\n    function getMessageHash(uint256 id, address[] memory accounts) internal pure returns (bytes32) {\\n        return keccak256(abi.encodePacked(id, accounts));\\n    }\\n\\n    function getEthSignedMessageHash(bytes32 messageHash) internal pure returns (bytes32) {\\n        return keccak256(abi.encodePacked(\\\"\\\\x19Ethereum Signed Message:\\\\n32\\\", messageHash));\\n    }\\n\\n    function recoverSigner(bytes32 _ethSignedMessageHash, bytes memory _signature)\\n        internal\\n        pure\\n        returns (address)\\n    {\\n        (bytes32 r, bytes32 s, uint8 v) = splitSignature(_signature);\\n\\n        return ecrecover(_ethSignedMessageHash, v, r, s);\\n    }\\n\\n    function splitSignature(bytes memory signature)\\n        internal\\n        pure\\n        returns (\\n            bytes32 r,\\n            bytes32 s,\\n            uint8 v\\n        )\\n    {\\n        require(signature.length == 65, \\\"invalid signature length\\\");\\n\\n        //solium-disable-next-line\\n        assembly {\\n            r := mload(add(signature, 32))\\n            s := mload(add(signature, 64))\\n            v := byte(0, mload(add(signature, 96)))\\n        }\\n    }\\n}\\n\"\r\n    },\r\n    \"contracts/governance/staking/interfaces/IQuestManager.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: AGPL-3.0-or-later\\npragma solidity 0.8.6;\\n\\nimport \\\"../deps/GamifiedTokenStructs.sol\\\";\\n\\ninterface IQuestManager {\\n    event QuestAdded(\\n        address questMaster,\\n        uint256 id,\\n        QuestType model,\\n        uint16 multiplier,\\n        QuestStatus status,\\n        uint32 expiry\\n    );\\n    event QuestCompleteQuests(address indexed user, uint256[] ids);\\n    event QuestCompleteUsers(uint256 indexed questId, address[] accounts);\\n    event QuestExpired(uint16 indexed id);\\n    event QuestMaster(address oldQuestMaster, address newQuestMaster);\\n    event QuestSeasonEnded();\\n    event QuestSigner(address oldQuestSigner, address newQuestSigner);\\n    event StakedTokenAdded(address stakedToken);\\n\\n    // GETTERS\\n    function balanceData(address _account) external view returns (QuestBalance memory);\\n\\n    function getQuest(uint256 _id) external view returns (Quest memory);\\n\\n    function hasCompleted(address _account, uint256 _id) external view returns (bool);\\n\\n    function questMaster() external view returns (address);\\n\\n    function seasonEpoch() external view returns (uint32);\\n\\n    // ADMIN\\n    function addQuest(\\n        QuestType _model,\\n        uint8 _multiplier,\\n        uint32 _expiry\\n    ) external;\\n\\n    function addStakedToken(address _stakedToken) external;\\n\\n    function expireQuest(uint16 _id) external;\\n\\n    function setQuestMaster(address _newQuestMaster) external;\\n\\n    function setQuestSigner(address _newQuestSigner) external;\\n\\n    function startNewQuestSeason() external;\\n\\n    // USER\\n    function completeUserQuests(\\n        address _account,\\n        uint256[] memory _ids,\\n        bytes calldata _signature\\n    ) external;\\n\\n    function completeQuestUsers(\\n        uint256 _questId,\\n        address[] memory _accounts,\\n        bytes calldata _signature\\n    ) external;\\n\\n    function checkForSeasonFinish(address _account) external returns (uint8 newQuestMultiplier);\\n}\\n\"\r\n    }\r\n  },\r\n  \"settings\": {\r\n    \"optimizer\": {\r\n      \"enabled\": true,\r\n      \"runs\": 200\r\n    },\r\n    \"outputSelection\": {\r\n      \"*\": {\r\n        \"*\": [\r\n          \"evm.bytecode\",\r\n          \"evm.deployedBytecode\",\r\n          \"abi\"\r\n        ]\r\n      }\r\n    },\r\n    \"libraries\": {\r\n      \"contracts/rewards/staking/PlatformTokenVendorFactory.sol\": {\r\n        \"PlatformTokenVendorFactory\": \"0xfb73476911c5e84556a5bf953644b7ef50f6cbc5\"\r\n      }\r\n    }\r\n  }\r\n}}","ABI":"[{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_nexus\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_rewardsToken\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_questManager\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_stakedToken\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_cooldownSeconds\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_unstakeWindow\",\"type\":\"uint256\"},{\"internalType\":\"address[2]\",\"name\":\"_bal\",\"type\":\"address[2]\"},{\"internalType\":\"bytes32\",\"name\":\"_poolId\",\"type\":\"bytes32\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Approval\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[],\"name\":\"BalClaimed\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"newRecipient\",\"type\":\"address\"}],\"name\":\"BalRecipientChanged\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"percentage\",\"type\":\"uint256\"}],\"name\":\"Cooldown\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"}],\"name\":\"CooldownExited\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"delegator\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"fromDelegate\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"toDelegate\",\"type\":\"address\"}],\"name\":\"DelegateChanged\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"delegate\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"previousBalance\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"newBalance\",\"type\":\"uint256\"}],\"name\":\"DelegateVotesChanged\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"bpt\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"mta\",\"type\":\"uint256\"}],\"name\":\"FeesConverted\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"hook\",\"type\":\"address\"}],\"name\":\"GovernanceHookChanged\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"newKeeper\",\"type\":\"address\"}],\"name\":\"KeeperUpdated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"newPriceCoeff\",\"type\":\"uint256\"}],\"name\":\"PriceCoefficientUpdated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[],\"name\":\"Recollateralised\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"reward\",\"type\":\"uint256\"}],\"name\":\"RewardAdded\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"reward\",\"type\":\"uint256\"}],\"name\":\"RewardPaid\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"newRate\",\"type\":\"uint256\"}],\"name\":\"SlashRateChanged\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"delegatee\",\"type\":\"address\"}],\"name\":\"Staked\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Transfer\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"Withdraw\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"wallet\",\"type\":\"address\"}],\"name\":\"WrapperBlacklisted\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"wallet\",\"type\":\"address\"}],\"name\":\"WrapperWhitelisted\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"BAL\",\"outputs\":[{\"internalType\":\"contract IERC20\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"COOLDOWN_SECONDS\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"DURATION\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"REWARDS_TOKEN\",\"outputs\":[{\"internalType\":\"contract IERC20\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"STAKED_TOKEN\",\"outputs\":[{\"internalType\":\"contract IERC20\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"UNSTAKE_WINDOW\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"_nameArg\",\"type\":\"bytes32\"},{\"internalType\":\"bytes32\",\"name\":\"_symbolArg\",\"type\":\"bytes32\"},{\"internalType\":\"address\",\"name\":\"_rewardsDistributorArg\",\"type\":\"address\"}],\"name\":\"__StakedToken_init\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_account\",\"type\":\"address\"},{\"internalType\":\"uint8\",\"name\":\"_newMultiplier\",\"type\":\"uint8\"}],\"name\":\"applyQuestMultiplier\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"balRecipient\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_account\",\"type\":\"address\"}],\"name\":\"balanceData\",\"outputs\":[{\"components\":[{\"internalType\":\"uint88\",\"name\":\"raw\",\"type\":\"uint88\"},{\"internalType\":\"uint32\",\"name\":\"weightedTimestamp\",\"type\":\"uint32\"},{\"internalType\":\"uint8\",\"name\":\"timeMultiplier\",\"type\":\"uint8\"},{\"internalType\":\"uint8\",\"name\":\"questMultiplier\",\"type\":\"uint8\"},{\"internalType\":\"uint32\",\"name\":\"cooldownTimestamp\",\"type\":\"uint32\"},{\"internalType\":\"uint88\",\"name\":\"cooldownUnits\",\"type\":\"uint88\"}],\"internalType\":\"struct Balance\",\"name\":\"\",\"type\":\"tuple\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_account\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"balancerVault\",\"outputs\":[{\"internalType\":\"contract IBVault\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_wrapper\",\"type\":\"address\"}],\"name\":\"blackListWrapper\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint32\",\"name\":\"_weightedTimestamp\",\"type\":\"uint32\"}],\"name\":\"calcRedemptionFeeRate\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"_feeRate\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_newRate\",\"type\":\"uint256\"}],\"name\":\"changeSlashingPercentage\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"internalType\":\"uint32\",\"name\":\"pos\",\"type\":\"uint32\"}],\"name\":\"checkpoints\",\"outputs\":[{\"components\":[{\"internalType\":\"uint32\",\"name\":\"fromBlock\",\"type\":\"uint32\"},{\"internalType\":\"uint224\",\"name\":\"votes\",\"type\":\"uint224\"}],\"internalType\":\"struct GamifiedVotingToken.Checkpoint\",\"name\":\"\",\"type\":\"tuple\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"claimBal\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"claimReward\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_to\",\"type\":\"address\"}],\"name\":\"claimReward\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"convertFees\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_value\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"createLock\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"decimals\",\"outputs\":[{\"internalType\":\"uint8\",\"name\":\"\",\"type\":\"uint8\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"delegatee\",\"type\":\"address\"}],\"name\":\"delegate\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"delegates\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_account\",\"type\":\"address\"}],\"name\":\"earned\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"emergencyRecollateralisation\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"endCooldown\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"exit\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"fetchPriceCoefficient\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"blockNumber\",\"type\":\"uint256\"}],\"name\":\"getPastTotalSupply\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"blockNumber\",\"type\":\"uint256\"}],\"name\":\"getPastVotes\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getProspectivePriceCoefficient\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"newPriceCoeff\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getRewardToken\",\"outputs\":[{\"internalType\":\"contract IERC20\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"getVotes\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"globalData\",\"outputs\":[{\"internalType\":\"uint32\",\"name\":\"periodFinish\",\"type\":\"uint32\"},{\"internalType\":\"uint32\",\"name\":\"lastUpdateTime\",\"type\":\"uint32\"},{\"internalType\":\"uint96\",\"name\":\"rewardRate\",\"type\":\"uint96\"},{\"internalType\":\"uint96\",\"name\":\"rewardPerTokenStored\",\"type\":\"uint96\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"hasPriceCoeff\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"increaseLockAmount\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"_nameArg\",\"type\":\"bytes32\"},{\"internalType\":\"bytes32\",\"name\":\"_symbolArg\",\"type\":\"bytes32\"},{\"internalType\":\"address\",\"name\":\"_rewardsDistributorArg\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_balRecipient\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_priceCoefficient\",\"type\":\"uint256\"}],\"name\":\"initialize\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"keeper\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"lastPriceUpdateTime\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"lastTimeRewardApplicable\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"name\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"nexus\",\"outputs\":[{\"internalType\":\"contract INexus\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_reward\",\"type\":\"uint256\"}],\"name\":\"notifyRewardAmount\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"numCheckpoints\",\"outputs\":[{\"internalType\":\"uint32\",\"name\":\"\",\"type\":\"uint32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"pendingAdditionalReward\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"pendingBPTFees\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"poolId\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"priceCoefficient\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"questManager\",\"outputs\":[{\"internalType\":\"contract QuestManager\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_account\",\"type\":\"address\"}],\"name\":\"rawBalanceOf\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_account\",\"type\":\"address\"}],\"name\":\"reviewTimestamp\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"rewardPerToken\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"rewardTokenVendor\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"rewardsDistributor\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"safetyData\",\"outputs\":[{\"internalType\":\"uint128\",\"name\":\"collateralisationRatio\",\"type\":\"uint128\"},{\"internalType\":\"uint128\",\"name\":\"slashingPercentage\",\"type\":\"uint128\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_newRecipient\",\"type\":\"address\"}],\"name\":\"setBalRecipient\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_newHook\",\"type\":\"address\"}],\"name\":\"setGovernanceHook\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_newKeeper\",\"type\":\"address\"}],\"name\":\"setKeeper\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_rewardsDistributor\",\"type\":\"address\"}],\"name\":\"setRewardsDistribution\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"_delegatee\",\"type\":\"address\"}],\"name\":\"stake\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"stake\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"},{\"internalType\":\"bool\",\"name\":\"_exitCooldown\",\"type\":\"bool\"}],\"name\":\"stake\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_units\",\"type\":\"uint256\"}],\"name\":\"startCooldown\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"symbol\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalSupply\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"userData\",\"outputs\":[{\"internalType\":\"uint128\",\"name\":\"rewardPerTokenPaid\",\"type\":\"uint128\"},{\"internalType\":\"uint128\",\"name\":\"rewards\",\"type\":\"uint128\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_account\",\"type\":\"address\"}],\"name\":\"userPriceCoeff\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_wrapper\",\"type\":\"address\"}],\"name\":\"whitelistWrapper\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"whitelistedWrappers\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"_recipient\",\"type\":\"address\"},{\"internalType\":\"bool\",\"name\":\"_amountIncludesFee\",\"type\":\"bool\"},{\"internalType\":\"bool\",\"name\":\"_exitCooldown\",\"type\":\"bool\"}],\"name\":\"withdraw\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}]","ContractName":"StakedTokenBPT","CompilerVersion":"v0.8.6+commit.11564f7e","OptimizationUsed":"1","Runs":"200","ConstructorArguments":"000000000000000000000000afce80b19a8ce13dec0739a1aab7a028d6845eb3000000000000000000000000a3bed4e1c75d00fa6f4e5e6922db7261b5e9acd2000000000000000000000000861f12764780896fd783ea615dd55df0ff865752000000000000000000000000ba100000625a3754423978a60c9317c58a424e3d00000000000000000000000000000000000000000000000000000000001baf800000000000000000000000000000000000000000000000000000000000127500000000000000000000000000ba100000625a3754423978a60c9317c58a424e3d000000000000000000000000ba12222222228d8ba445958a75a0704d566bf2c8e2469f47ab58cf9cf59f9822e3c5de4950a41c49000200000000000000000089","EVMVersion":"Default","Library":"","LicenseType":"","Proxy":"0","Implementation":"","SwarmSource":""}]}