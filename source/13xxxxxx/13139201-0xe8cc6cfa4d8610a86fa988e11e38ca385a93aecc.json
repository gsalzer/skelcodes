{"status":"1","message":"OK","result":[{"SourceCode":"{{\r\n  \"language\": \"Solidity\",\r\n  \"sources\": {\r\n    \"contracts/IdleCDO.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: UNLICENSED\\npragma solidity 0.8.7;\\n\\nimport '@uniswap/v2-periphery/contracts/interfaces/IUniswapV2Router02.sol';\\nimport \\\"@openzeppelin/contracts-upgradeable/security/PausableUpgradeable.sol\\\";\\nimport \\\"@openzeppelin/contracts-upgradeable/token/ERC20/utils/SafeERC20Upgradeable.sol\\\";\\n\\nimport \\\"./interfaces/IIdleCDOStrategy.sol\\\";\\nimport \\\"./interfaces/IERC20Detailed.sol\\\";\\nimport \\\"./interfaces/IIdleCDOTrancheRewards.sol\\\";\\nimport \\\"./interfaces/IStakedAave.sol\\\";\\n\\nimport \\\"./GuardedLaunchUpgradable.sol\\\";\\nimport \\\"./IdleCDOTranche.sol\\\";\\nimport \\\"./IdleCDOStorage.sol\\\";\\n\\n/// @title A continous tranche implementation\\n/// @author Idle Labs Inc.\\n/// @notice More info and high level overview in the README\\n/// @dev The contract is upgradable, to add storage slots, create IdleCDOStorageVX and inherit from IdleCDOStorage, then update the definitaion below\\ncontract IdleCDO is PausableUpgradeable, GuardedLaunchUpgradable, IdleCDOStorage {\\n  using SafeERC20Upgradeable for IERC20Detailed;\\n\\n  // ERROR MESSAGES:\\n  // 0 = is 0\\n  // 1 = already initialized\\n  // 2 = Contract limit reached\\n  // 3 = Tranche withdraw not allowed (Paused or in shutdown)\\n  // 4 = Default, wait shutdown\\n  // 5 = Amount too low\\n  // 6 = Not authorized\\n  // 7 = Amount too high\\n  // 8 = Same block\\n\\n  // Used to prevent initialization of the implementation contract\\n  /// @custom:oz-upgrades-unsafe-allow constructor\\n  constructor() {\\n    token = address(1);\\n  }\\n\\n  // ###################\\n  // Initializer\\n  // ###################\\n\\n  /// @notice can only be called once\\n  /// @dev Initialize the upgradable contract\\n  /// @param _limit contract value limit, can be 0\\n  /// @param _guardedToken underlying token\\n  /// @param _governanceFund address where funds will be sent in case of emergency\\n  /// @param _owner guardian address (can pause, unpause and call emergencyShutdown)\\n  /// @param _rebalancer rebalancer address\\n  /// @param _strategy strategy address\\n  /// @param _trancheAPRSplitRatio trancheAPRSplitRatio value\\n  /// @param _trancheIdealWeightRatio trancheIdealWeightRatio value\\n  /// @param _incentiveTokens array of addresses for incentive tokens\\n  function initialize(\\n    uint256 _limit, address _guardedToken, address _governanceFund, address _owner, // GuardedLaunch args\\n    address _rebalancer,\\n    address _strategy,\\n    uint256 _trancheAPRSplitRatio, // for AA tranches, so eg 10000 means 10% interest to AA and 90% BB\\n    uint256 _trancheIdealWeightRatio, // for AA tranches, so eg 10000 means 10% of tranches are AA and 90% BB\\n    address[] memory _incentiveTokens\\n  ) external initializer {\\n    require(token == address(0), '1');\\n    require(_rebalancer != address(0) && _strategy != address(0) && _guardedToken != address(0), \\\"0\\\");\\n    // Initialize contracts\\n    PausableUpgradeable.__Pausable_init();\\n    // check for _governanceFund and _owner != address(0) are inside GuardedLaunchUpgradable\\n    GuardedLaunchUpgradable.__GuardedLaunch_init(_limit, _governanceFund, _owner);\\n    // Deploy Tranches tokens\\n    address _strategyToken = IIdleCDOStrategy(_strategy).strategyToken();\\n    // get strategy token symbol (eg. idleDAI)\\n    string memory _symbol = IERC20Detailed(_strategyToken).symbol();\\n    // create tranche tokens (concat strategy token symbol in the name and symbol of the tranche tokens)\\n    AATranche = address(new IdleCDOTranche(_concat(string(\\\"IdleCDO AA Tranche - \\\"), _symbol), _concat(string(\\\"AA_\\\"), _symbol)));\\n    BBTranche = address(new IdleCDOTranche(_concat(string(\\\"IdleCDO BB Tranche - \\\"), _symbol), _concat(string(\\\"BB_\\\"), _symbol)));\\n    // Set CDO params\\n    token = _guardedToken;\\n    strategy = _strategy;\\n    strategyToken = _strategyToken;\\n    rebalancer = _rebalancer;\\n    trancheAPRSplitRatio = _trancheAPRSplitRatio;\\n    trancheIdealWeightRatio = _trancheIdealWeightRatio;\\n    idealRange = 10000; // trancheIdealWeightRatio Â± 10%\\n    uint256 _oneToken = 10**(IERC20Detailed(_guardedToken).decimals());\\n    oneToken = _oneToken;\\n    uniswapRouterV2 = IUniswapV2Router02(0x7a250d5630B4cF539739dF2C5dAcb4c659F2488D);\\n    weth = address(0xC02aaA39b223FE8D0A0e5C4F27eAD9083C756Cc2);\\n    incentiveTokens = _incentiveTokens;\\n    priceAA = _oneToken;\\n    priceBB = _oneToken;\\n    unlentPerc = 2000; // 2%\\n    // # blocks, after an harvest, during which harvested rewards gets progressively unlocked\\n    releaseBlocksPeriod = 1500; // about 1/4 of a day\\n    // Set flags\\n    allowAAWithdraw = true;\\n    allowBBWithdraw = true;\\n    revertIfTooLow = true;\\n    // skipDefaultCheck = false is the default value\\n    // Set allowance for strategy\\n    IERC20Detailed(_guardedToken).safeIncreaseAllowance(_strategy, type(uint256).max);\\n    IERC20Detailed(strategyToken).safeIncreaseAllowance(_strategy, type(uint256).max);\\n    // Save current strategy price\\n    lastStrategyPrice = _strategyPrice();\\n    // Fee params\\n    fee = 10000; // 10% performance fee\\n    feeReceiver = address(0xBecC659Bfc6EDcA552fa1A67451cC6b38a0108E4); // feeCollector\\n    guardian = _owner;\\n    // StkAAVE unwrapping is active\\n    isStkAAVEActive = true;\\n  }\\n\\n  // ###############\\n  // Public methods\\n  // ###############\\n\\n  /// @notice pausable\\n  /// @dev msg.sender should approve this contract first to spend `_amount` of `token`\\n  /// @param _amount amount of `token` to deposit\\n  /// @return AA tranche tokens minted\\n  function depositAA(uint256 _amount) external returns (uint256) {\\n    return _deposit(_amount, AATranche);\\n  }\\n\\n  /// @notice pausable in _deposit\\n  /// @dev msg.sender should approve this contract first to spend `_amount` of `token`\\n  /// @param _amount amount of `token` to deposit\\n  /// @return BB tranche tokens minted\\n  function depositBB(uint256 _amount) external returns (uint256) {\\n    return _deposit(_amount, BBTranche);\\n  }\\n\\n  /// @notice pausable in _deposit\\n  /// @param _amount amount of AA tranche tokens to burn\\n  /// @return underlying tokens redeemed\\n  function withdrawAA(uint256 _amount) external returns (uint256) {\\n    require(!paused() || allowAAWithdraw, '3');\\n    return _withdraw(_amount, AATranche);\\n  }\\n\\n  /// @notice pausable\\n  /// @param _amount amount of BB tranche tokens to burn\\n  /// @return underlying tokens redeemed\\n  function withdrawBB(uint256 _amount) external returns (uint256) {\\n    require(!paused() || allowBBWithdraw, '3');\\n    return _withdraw(_amount, BBTranche);\\n  }\\n\\n  // ###############\\n  // Views\\n  // ###############\\n\\n  /// @param _tranche tranche address\\n  /// @return tranche price\\n  function tranchePrice(address _tranche) external view returns (uint256) {\\n    return _tranchePrice(_tranche);\\n  }\\n\\n  /// @notice calculates the current total value locked (in `token` terms)\\n  /// @dev unclaimed rewards (gov tokens) are not counted.\\n  /// NOTE: `unclaimedFees` are not included in the contract value\\n  /// NOTE2: fees that *will* be taken (in the next _updateAccounting call) are counted\\n  function getContractValue() public override view returns (uint256) {\\n    address _strategyToken = strategyToken;\\n    uint256 strategyTokenDecimals = IERC20Detailed(_strategyToken).decimals();\\n    // TVL is the sum of unlent balance in the contract + the balance in lending - the reduction for harvested rewards - unclaimedFees\\n    // the balance in lending is the value of the interest bearing assets (strategyTokens) in this contract\\n    // TVL = (strategyTokens * strategy token price) + unlent balance - lockedRewards - unclaimedFees\\n    return (_contractTokenBalance(_strategyToken) * _strategyPrice() / (10**(strategyTokenDecimals))) +\\n            _contractTokenBalance(token) -\\n            _lockedRewards() -\\n            unclaimedFees;\\n  }\\n\\n  /// @param _tranche tranche address\\n  /// @return apr at ideal ratio (trancheIdealWeightRatio) between AA and BB\\n  function getIdealApr(address _tranche) external view returns (uint256) {\\n    return _getApr(_tranche, trancheIdealWeightRatio);\\n  }\\n\\n  /// @param _tranche tranche address\\n  /// @return actual apr given current ratio between AA and BB tranches\\n  function getApr(address _tranche) external view returns (uint256) {\\n    return _getApr(_tranche, getCurrentAARatio());\\n  }\\n\\n  /// @notice calculates the current AA tranches ratio\\n  /// @dev _virtualBalance is used to have a more accurate/recent value for the AA ratio\\n  /// because it calculates the balance after splitting the accrued interest since the\\n  /// last depositXX/withdrawXX/harvest\\n  /// @return AA tranches ratio (in underlying value) considering all interest\\n  function getCurrentAARatio() public view returns (uint256) {\\n    uint256 AABal = _virtualBalance(AATranche);\\n    uint256 contractVal = AABal + _virtualBalance(BBTranche);\\n    if (contractVal == 0) {\\n      return 0;\\n    }\\n    // Current AA tranche split ratio = AABal * FULL_ALLOC / (AABal + BBBal)\\n    return AABal * FULL_ALLOC / contractVal;\\n  }\\n\\n  /// @notice calculates the current tranches price considering the interest that is yet to be splitted\\n  /// ie the interest generated since the last update of priceAA and priceBB (done on depositXX/withdrawXX/harvest)\\n  /// useful for showing updated gains on frontends\\n  /// @dev this should always be >= of _tranchePrice(_tranche)\\n  /// @param _tranche address of the requested tranche\\n  /// @return _virtualPrice tranche price considering all interest\\n  function virtualPrice(address _tranche) public view returns (uint256 _virtualPrice) {\\n    // get both NAVs, because we need the total NAV anyway\\n    uint256 _lastNAVAA = lastNAVAA;\\n    uint256 _lastNAVBB = lastNAVBB;\\n\\n    (_virtualPrice, ) = _virtualPricesAux(\\n      _tranche,\\n      getContractValue(), // nav\\n      _lastNAVAA + _lastNAVBB, // lastNAV\\n      _tranche == AATranche ? _lastNAVAA : _lastNAVBB, // lastTrancheNAV\\n      trancheAPRSplitRatio\\n    );\\n  }\\n\\n  /// @notice returns an array of tokens used to incentive tranches via IIdleCDOTrancheRewards\\n  /// @return array with addresses of incentiveTokens (can be empty)\\n  function getIncentiveTokens() external view returns (address[] memory) {\\n    return incentiveTokens;\\n  }\\n\\n  // ###############\\n  // Internal\\n  // ###############\\n\\n  /// @notice method used to deposit `token` and mint tranche tokens\\n  /// Ideally users should deposit right after an `harvest` call to maximize profit\\n  /// @dev this contract must be approved to spend at least _amount of `token` before calling this method\\n  /// automatically reverts on lending provider default (_strategyPrice decreased)\\n  /// @param _amount amount of underlyings (`token`) to deposit\\n  /// @param _tranche tranche address\\n  /// @return _minted number of tranche tokens minted\\n  function _deposit(uint256 _amount, address _tranche) internal whenNotPaused returns (uint256 _minted) {\\n    if (_amount == 0) {\\n      return _minted;\\n    }\\n    // check that we are not depositing more than the contract available limit\\n    _guarded(_amount);\\n    // set _lastCallerBlock hash\\n    _updateCallerBlock();\\n    // check if _strategyPrice decreased\\n    _checkDefault();\\n    // interest accrued since last depositXX/withdrawXX/harvest is splitted between AA and BB\\n    // according to trancheAPRSplitRatio. NAVs of AA and BB are updated and tranche\\n    // prices adjusted accordingly\\n    _updateAccounting();\\n    // get underlyings from sender\\n    IERC20Detailed(token).safeTransferFrom(msg.sender, address(this), _amount);\\n    // mint tranche tokens according to the current tranche price\\n    _minted = _mintShares(_amount, msg.sender, _tranche);\\n  }\\n\\n  /// @notice this method is called on depositXX/withdrawXX/harvest and\\n  /// updates the accounting of the contract and effectively splits the yield between the\\n  /// AA and BB tranches\\n  /// @dev this method:\\n  /// - update tranche prices (priceAA and priceBB)\\n  /// - update net asset value for both tranches (lastNAVAA and lastNAVBB)\\n  /// - update fee accounting (unclaimedFees)\\n  function _updateAccounting() internal {\\n    uint256 _lastNAVAA = lastNAVAA;\\n    uint256 _lastNAVBB = lastNAVBB;\\n    uint256 _lastNAV = _lastNAVAA + _lastNAVBB;\\n    uint256 nav = getContractValue();\\n    uint256 _aprSplitRatio = trancheAPRSplitRatio;\\n\\n    // If gain is > 0, then collect some fees in `unclaimedFees`\\n    if (nav > _lastNAV) {\\n      unclaimedFees += (nav - _lastNAV) * fee / FULL_ALLOC;\\n    }\\n\\n    (uint256 _priceAA, uint256 _totalAAGain) = _virtualPricesAux(AATranche, nav, _lastNAV, _lastNAVAA, _aprSplitRatio);\\n    (uint256 _priceBB, uint256 _totalBBGain) = _virtualPricesAux(BBTranche, nav, _lastNAV, _lastNAVBB, _aprSplitRatio);\\n\\n    lastNAVAA += _totalAAGain;\\n    lastNAVBB += _totalBBGain;\\n    priceAA = _priceAA;\\n    priceBB = _priceBB;\\n  }\\n\\n  /// @notice calculates the NAV for a tranche considering the interest that is yet to be splitted\\n  /// @param _tranche address of the requested tranche\\n  /// @return net asset value, in underlying tokens, for _tranche considering all nav\\n  function _virtualBalance(address _tranche) internal view returns (uint256) {\\n    // balance is: tranche supply * virtual tranche price\\n    return IdleCDOTranche(_tranche).totalSupply() * virtualPrice(_tranche) / ONE_TRANCHE_TOKEN;\\n  }\\n\\n  /// @notice calculates the current tranches price considering the interest that is yet to be splitted and the\\n  /// total gain for a specific tranche\\n  /// @param _tranche address of the requested tranche\\n  /// @param _nav current NAV\\n  /// @param _lastNAV last saved NAV\\n  /// @param _lastTrancheNAV last saved tranche NAV\\n  /// @param _trancheAPRSplitRatio APR split ratio for AA tranche\\n  /// @return _virtualPrice tranche price considering all interest\\n  /// @return _totalTrancheGain tranche gain since last update\\n  function _virtualPricesAux(\\n    address _tranche,\\n    uint256 _nav,\\n    uint256 _lastNAV,\\n    uint256 _lastTrancheNAV,\\n    uint256 _trancheAPRSplitRatio\\n  ) internal view returns (uint256 _virtualPrice, uint256 _totalTrancheGain) {\\n    // If there is no gain return the current price\\n    if (_nav <= _lastNAV) {\\n      return (_tranchePrice(_tranche), 0);\\n    }\\n\\n    // Check if there are tranche holders\\n    uint256 trancheSupply = IdleCDOTranche(_tranche).totalSupply();\\n    if (_lastNAV == 0 || trancheSupply == 0) {\\n      return (oneToken, 0);\\n    }\\n    // In order to correctly split the interest generated between AA and BB tranche holders\\n    // (according to the trancheAPRSplitRatio) we need to know how much interest we gained\\n    // since the last price update (during a depositXX/withdrawXX/harvest)\\n    // To do that we need to get the current value of the assets in this contract\\n    // and the last saved one (always during a depositXX/withdrawXX/harvest)\\n\\n    // Calculate the total gain\\n    uint256 totalGain = _nav - _lastNAV;\\n    // Remove performance fee\\n    totalGain -= totalGain * fee / FULL_ALLOC;\\n\\n    address _AATranche = AATranche;\\n    bool _isAATranche = _tranche == _AATranche;\\n    // Get the supply of the other tranche and\\n    // if it's 0 then give all gain to the current `_tranche` holders\\n    if (IdleCDOTranche(_isAATranche ? BBTranche : _AATranche).totalSupply() == 0) {\\n      _totalTrancheGain = totalGain;\\n    } else {\\n      // Split the net gain, with precision loss favoring the AA tranche.\\n      uint256 totalBBGain = totalGain * (FULL_ALLOC - _trancheAPRSplitRatio) / FULL_ALLOC;\\n      // The new NAV for the tranche is old NAV + total gain for the tranche\\n      _totalTrancheGain = _isAATranche ? (totalGain - totalBBGain) : totalBBGain;\\n    }\\n    // Split the new NAV (_lastTrancheNAV + _totalTrancheGain) per tranche token\\n    _virtualPrice = (_lastTrancheNAV + _totalTrancheGain) * ONE_TRANCHE_TOKEN / trancheSupply;\\n  }\\n\\n  /// @notice mint tranche tokens and updates tranche last NAV\\n  /// @param _amount, in underlyings, to convert in tranche tokens\\n  /// @param _to receiver address of the newly minted tranche tokens\\n  /// @param _tranche tranche address\\n  /// @return _minted number of tranche tokens minted\\n  function _mintShares(uint256 _amount, address _to, address _tranche) internal returns (uint256 _minted) {\\n    // calculate # of tranche token to mint based on current tranche price: _amount / tranchePrice\\n    _minted = _amount * ONE_TRANCHE_TOKEN / _tranchePrice(_tranche);\\n    IdleCDOTranche(_tranche).mint(_to, _minted);\\n    // update NAV with the _amount of underlyings added\\n    if (_tranche == AATranche) {\\n      lastNAVAA += _amount;\\n    } else {\\n      lastNAVBB += _amount;\\n    }\\n  }\\n\\n  /// @notice convert fees (`unclaimedFees`) in tranche tokens\\n  /// the tranche token minted is based on the current AA ratio, so to mint the tranche\\n  /// that it's needed most to reach the trancheIdealWeightRatio. The tranche tokens\\n  /// are then automatically staked in the relative IdleCDOTrancheRewards contact if present\\n  /// @dev this will be called only during harvests\\n  /// @return _currAARatio current AA ratio\\n  function _depositFees() internal returns (uint256 _currAARatio) {\\n    uint256 _amount = unclaimedFees;\\n    if (_amount > 0) {\\n      _currAARatio = getCurrentAARatio();\\n      bool shouldMintBB = _currAARatio >= trancheIdealWeightRatio;\\n      address stakingRewards = shouldMintBB ? BBStaking : AAStaking;\\n      bool isStakingRewardsActive = stakingRewards != address(0);\\n      address _feeReceiver = feeReceiver;\\n\\n      // mint tranches tokens to this contract\\n      uint256 _minted = _mintShares(_amount,\\n        isStakingRewardsActive ? address(this) : _feeReceiver,\\n        // Choose the right tranche to mint based on getCurrentAARatio\\n        shouldMintBB ? BBTranche : AATranche\\n      );\\n      // reset unclaimedFees counter\\n      unclaimedFees = 0;\\n\\n      // auto stake fees in staking contract for feeReceiver\\n      if (isStakingRewardsActive) {\\n        IIdleCDOTrancheRewards(stakingRewards).stakeFor(_feeReceiver, _minted);\\n      }\\n    }\\n  }\\n\\n  /// @notice It allows users to burn their tranche token and redeem their principal + interest back\\n  /// @dev automatically reverts on lending provider default (_strategyPrice decreased).\\n  /// A user should wait at least one harvest before rededeming otherwise the redeemed amount\\n  /// would be less than the deposited one due to the use of a checkpointed price at last harvest (lastAAPrice and lastBBPrice)\\n  /// Ideally users should redeem right after an `harvest` call for maximum profits\\n  /// @param _amount in tranche tokens\\n  /// @param _tranche tranche address\\n  /// @return toRedeem number of underlyings redeemed\\n  function _withdraw(uint256 _amount, address _tranche) internal nonReentrant returns (uint256 toRedeem) {\\n    // check if a deposit is made in the same block from the same user\\n    _checkSameTx();\\n    // check if _strategyPrice decreased\\n    _checkDefault();\\n    // accrue interest to tranches and updates tranche prices\\n    _updateAccounting();\\n    // redeem all user balance if 0 is passed as _amount\\n    if (_amount == 0) {\\n      _amount = IERC20Detailed(_tranche).balanceOf(msg.sender);\\n    }\\n    require(_amount > 0, '0');\\n    address _token = token;\\n    // get current available unlent balance\\n    uint256 balanceUnderlying = _contractTokenBalance(_token);\\n    // Calculate the amount to redeem\\n    toRedeem = _amount * _tranchePrice(_tranche) / ONE_TRANCHE_TOKEN;\\n    if (toRedeem > balanceUnderlying) {\\n      // if the unlent balance is not enough we try to redeem what's missing directly from the strategy\\n      // and then add it to the current unlent balance\\n      // NOTE: A difference of up to 100 wei due to rounding is tolerated\\n      toRedeem = _liquidate(toRedeem - balanceUnderlying, revertIfTooLow) + balanceUnderlying;\\n    }\\n    // burn tranche token\\n    IdleCDOTranche(_tranche).burn(msg.sender, _amount);\\n    // send underlying to msg.sender\\n    IERC20Detailed(_token).safeTransfer(msg.sender, toRedeem);\\n\\n    // update NAV with the _amount of underlyings removed\\n    if (_tranche == AATranche) {\\n      lastNAVAA -= toRedeem;\\n    } else {\\n      lastNAVBB -= toRedeem;\\n    }\\n  }\\n\\n  /// @dev check if _strategyPrice is decreased since last update and updates last saved strategy price\\n  function _checkDefault() internal {\\n    uint256 currPrice = _strategyPrice();\\n    if (!skipDefaultCheck) {\\n      require(lastStrategyPrice <= currPrice, \\\"4\\\");\\n    }\\n    lastStrategyPrice = currPrice;\\n  }\\n\\n  /// @return strategy price, in underlyings\\n  function _strategyPrice() internal view returns (uint256) {\\n    return IIdleCDOStrategy(strategy).price();\\n  }\\n\\n  /// @dev this should liquidate at least _amount of `token` from the lending provider or revertIfNeeded\\n  /// @param _amount in underlying tokens\\n  /// @param _revertIfNeeded flag whether to revert or not if the redeemed amount is not enough\\n  /// @return _redeemedTokens number of underlyings redeemed\\n  function _liquidate(uint256 _amount, bool _revertIfNeeded) internal returns (uint256 _redeemedTokens) {\\n    _redeemedTokens = IIdleCDOStrategy(strategy).redeemUnderlying(_amount);\\n    if (_revertIfNeeded) {\\n      // keep 100 wei as margin for rounding errors\\n      require(_redeemedTokens + 100 >= _amount, '5');\\n    }\\n  }\\n\\n  /// @notice sends rewards to the tranche rewards staking contracts\\n  /// @dev this method is called only during harvests\\n  /// @param currAARatio current AA tranche ratio\\n  function _updateIncentives(uint256 currAARatio) internal {\\n    // Read state variables only once to save gas\\n    uint256 _trancheIdealWeightRatio = trancheIdealWeightRatio;\\n    uint256 _trancheAPRSplitRatio = trancheAPRSplitRatio;\\n    uint256 _idealRange = idealRange;\\n    address _BBStaking = BBStaking;\\n    address _AAStaking = AAStaking;\\n    bool _isBBStakingActive = _BBStaking != address(0);\\n    bool _isAAStakingActive = _AAStaking != address(0);\\n\\n    // Check if BB tranches should be rewarded (if AA ratio is too high)\\n    if (_isBBStakingActive && (currAARatio > (_trancheIdealWeightRatio + _idealRange))) {\\n      // give more rewards to BB holders, ie send some rewards to BB Staking contract\\n      return _depositIncentiveToken(_BBStaking, FULL_ALLOC);\\n    }\\n    // Check if AA tranches should be rewarded (id AA ratio is too low)\\n    if (_isAAStakingActive && (currAARatio < (_trancheIdealWeightRatio - _idealRange))) {\\n      // give more rewards to AA holders, ie send some rewards to AA Staking contract\\n      return _depositIncentiveToken(_AAStaking, FULL_ALLOC);\\n    }\\n\\n    // Split rewards according to trancheAPRSplitRatio in case the ratio between\\n    // AA and BB is already ideal\\n    if (_isAAStakingActive) {\\n      // NOTE: the order is important here, first there must be the deposit for AA rewards,\\n      // if staking contract for AA is present\\n      _depositIncentiveToken(_AAStaking, _trancheAPRSplitRatio);\\n    }\\n\\n    if (_isBBStakingActive) {\\n      // NOTE: here we should use FULL_ALLOC directly and not (FULL_ALLOC - _trancheAPRSplitRatio)\\n      // because contract balance for incentive tokens is fetched at each _depositIncentiveToken\\n      // and the balance for AA is already transferred\\n      _depositIncentiveToken(_BBStaking, FULL_ALLOC);\\n    }\\n  }\\n\\n  /// @notice sends requested ratio of reward to a specific IdleCDOTrancheRewards contract\\n  /// @param _stakingContract address which will receive incentive Rewards\\n  /// @param _ratio ratio of the incentive token balance to send\\n  function _depositIncentiveToken(address _stakingContract, uint256 _ratio) internal {\\n    address[] memory _incentiveTokens = incentiveTokens;\\n    for (uint256 i = 0; i < _incentiveTokens.length; i++) {\\n      address _incentiveToken = _incentiveTokens[i];\\n      // calculates the requested _ratio of the current contract balance of\\n      // _incentiveToken to be sent to the IdleCDOTrancheRewards contract\\n      uint256 _reward = _contractTokenBalance(_incentiveToken) * _ratio / FULL_ALLOC;\\n      if (_reward > 0) {\\n        // call depositReward to actually let the IdleCDOTrancheRewards get the reward\\n        IIdleCDOTrancheRewards(_stakingContract).depositReward(_incentiveToken, _reward);\\n      }\\n    }\\n  }\\n\\n  /// @notice method used to sell `_rewardToken` for `_token` on uniswap\\n  /// @param _rewardToken address of the token to sell\\n  /// @param _path uniswap path for the trade\\n  /// @param _amount of `_rewardToken` to sell\\n  /// @param _minAmount min amount of `_token` to buy\\n  /// @return _amount of _rewardToken sold\\n  /// @return _amount received for the sell\\n  function _sellReward(address _rewardToken, address[] memory _path, uint256 _amount, uint256 _minAmount)\\n    internal\\n    returns (uint256, uint256) {\\n    // If 0 is passed as sell amount, we get the whole contract balance\\n    if (_amount == 0) {\\n      _amount = _contractTokenBalance(_rewardToken);\\n    }\\n    if (_amount == 0) {\\n      return (0, 0);\\n    }\\n\\n    IUniswapV2Router02 _uniRouter = uniswapRouterV2;\\n    // approve the uniswap router to spend our reward\\n    IERC20Detailed(_rewardToken).safeIncreaseAllowance(address(_uniRouter), _amount);\\n    // do the trade with all `_rewardToken` in this contract\\n    uint256[] memory _amounts = _uniRouter.swapExactTokensForTokens(\\n      _amount,\\n      _minAmount,\\n      _path,\\n      address(this),\\n      block.timestamp + 1\\n    );\\n    // return the amount swapped and the amount received\\n    return (_amounts[0], _amounts[_amounts.length - 1]);\\n  }\\n\\n  /// @notice method used to sell all sellable rewards for `_token` on uniswap\\n  /// @param _token to buy with rewards\\n  /// @param _sellAmounts array with amounts of rewards to sell\\n  /// @param _minAmount array with amounts of _token buy for each reward sold. (should have the same length as _sellAmounts)\\n  /// @param _skipReward array of flags for skipping the market sell of specific rewards (should have the same length as _sellAmounts)\\n  /// @return _soldAmounts array with amounts of rewards actually sold\\n  /// @return _swappedAmounts array with amounts of _token actually bought\\n  /// @return _totSold total rewards sold in `_token`\\n  function _sellAllRewards(address _token, uint256[] memory _sellAmounts, uint256[] memory _minAmount, bool[] memory _skipReward)\\n    internal\\n    returns (uint256[] memory _soldAmounts, uint256[] memory _swappedAmounts, uint256 _totSold) {\\n    // Fetch state variables once to save gas\\n    address[] memory _incentiveTokens = incentiveTokens;\\n    // get all rewards addresses\\n    address[] memory _rewards = IIdleCDOStrategy(strategy).getRewardTokens();\\n    address _rewardToken;\\n    // Prepare path for uniswap trade\\n    address[] memory _path = new address[](3);\\n    // _path[0] will be the reward token to sell\\n    _path[1] = weth;\\n    _path[2] = _token;\\n    // Initialize the return array, containing the amounts received after swapping reward tokens\\n    _soldAmounts = new uint256[](_rewards.length);\\n    _swappedAmounts = new uint256[](_rewards.length);\\n    // loop through all reward tokens\\n    for (uint256 i = 0; i < _rewards.length; i++) {\\n      _rewardToken = _rewards[i];\\n      // check if it should be sold or not\\n      if (_skipReward[i] || _includesAddress(_incentiveTokens, _rewardToken)) { continue; }\\n      // do not sell stkAAVE but only AAVE if present\\n      if (_rewardToken == stkAave) {\\n        _rewardToken = AAVE;\\n      }\\n      // set token to sell in the uniswap path\\n      _path[0] = _rewardToken;\\n      // Market sell _rewardToken in this contract for _token\\n      (_soldAmounts[i], _swappedAmounts[i]) = _sellReward(_rewardToken, _path, _sellAmounts[i], _minAmount[i]);\\n      _totSold += _swappedAmounts[i];\\n    }\\n  }\\n\\n  /// @param _tranche tranche address\\n  /// @return last saved price for minting tranche tokens, in underlyings\\n  function _tranchePrice(address _tranche) internal view returns (uint256) {\\n    if (IdleCDOTranche(_tranche).totalSupply() == 0) {\\n      return oneToken;\\n    }\\n    return _tranche == AATranche ? priceAA : priceBB;\\n  }\\n\\n  /// @notice returns the current apr for a tranche based on trancheAPRSplitRatio and the provided AA ratio\\n  /// @dev the apr for a tranche can be higher than the strategy apr\\n  /// @param _tranche tranche token address\\n  /// @param _AATrancheSplitRatio AA split ratio used for calculations\\n  /// @return apr for the specific tranche\\n  function _getApr(address _tranche, uint256 _AATrancheSplitRatio) internal view returns (uint256) {\\n    uint256 stratApr = IIdleCDOStrategy(strategy).getApr();\\n    uint256 _trancheAPRSplitRatio = trancheAPRSplitRatio;\\n    bool isAATranche = _tranche == AATranche;\\n    if (_AATrancheSplitRatio == 0) {\\n      // if there are no AA tranches, apr for AA is 0 (all apr to BB and it will be equal to stratApr)\\n      return isAATranche ? 0 : stratApr;\\n    }\\n    return isAATranche ?\\n      // AA apr is: stratApr * AAaprSplitRatio / AASplitRatio\\n      stratApr * _trancheAPRSplitRatio / _AATrancheSplitRatio :\\n      // BB apr is: stratApr * BBaprSplitRatio / BBSplitRatio -> where\\n      // BBaprSplitRatio is: (FULL_ALLOC - _trancheAPRSplitRatio) and\\n      // BBSplitRatio is: (FULL_ALLOC - _AATrancheSplitRatio)\\n      stratApr * (FULL_ALLOC - _trancheAPRSplitRatio) / (FULL_ALLOC - _AATrancheSplitRatio);\\n  }\\n\\n  /// @return _locked amount of harvested rewards that are still not available to be redeemed\\n  function _lockedRewards() internal view returns (uint256 _locked) {\\n    uint256 _releaseBlocksPeriod = releaseBlocksPeriod;\\n    uint256 _blocksSinceLastHarvest = block.number - latestHarvestBlock;\\n    uint256 _harvestedRewards = harvestedRewards;\\n\\n    if (_harvestedRewards > 0 && _blocksSinceLastHarvest < _releaseBlocksPeriod) {\\n      // progressively release harvested rewards\\n      _locked = _harvestedRewards * (_releaseBlocksPeriod - _blocksSinceLastHarvest) / _releaseBlocksPeriod;\\n    }\\n  }\\n\\n  /// @notice used to start the cooldown for unstaking stkAAVE and claiming AAVE rewards (for the contract itself)\\n  function _claimStkAave() internal {\\n    if (!isStkAAVEActive) {\\n      return;\\n    }\\n\\n    IStakedAave _stkAave = IStakedAave(stkAave);\\n    uint256 _stakersCooldown = _stkAave.stakersCooldowns(address(this));\\n    // If there is a pending cooldown:\\n    if (_stakersCooldown > 0) {\\n      // If it is over, redeem stkAave and begin new cooldown\\n      if (_stakersCooldown + _stkAave.COOLDOWN_SECONDS() < block.timestamp) {\\n        _stkAave.redeem(address(this), type(uint256).max);\\n      } else {\\n        // If it is not over, do nothing\\n        return;\\n      }\\n    }\\n\\n    // Pull new stkAAVE rewards\\n    IIdleCDOStrategy(strategy).pullStkAAVE();\\n\\n    // If there's no pending cooldown or we just redeem the prev locked rewards,\\n    // then begin a new cooldown\\n    if (_stkAave.balanceOf(address(this)) > 0) {\\n      // start a new cooldown\\n      _stkAave.cooldown();\\n    }\\n  }\\n\\n  // ###################\\n  // Protected\\n  // ###################\\n\\n  /// @notice This method is used to lend user funds in the lending provider through the IIdleCDOStrategy and update tranches incentives.\\n  /// The method:\\n  /// - redeems rewards (if any) from the lending provider\\n  /// - converts the rewards NOT present in the `incentiveTokens` array, in underlyings through uniswap v2\\n  /// - calls _updateAccounting to update the accounting of the system with the new underlyings received\\n  /// - it then convert fees in tranche tokens\\n  /// - sends the correct amount of `incentiveTokens` to the each of the IdleCDOTrancheRewards contracts\\n  /// - calls _updateLastTranchePrices to save the last tranche prices\\n  /// - Finally it deposits the (initial unlent balance + the underlyings get from uniswap - fees) in the\\n  ///   lending provider through the IIdleCDOStrategy `deposit` call\\n  /// The method will be called by an external, whitelisted, keeper bot which will call the method sistematically (eg once a day)\\n  /// @dev can be called only by the rebalancer or the owner\\n  /// @param _skipRedeem whether to redeem rewards from strategy or not (for gas savings)\\n  /// @param _skipIncentivesUpdate whether to update incentives or not\\n  /// @param _skipFeeDeposit whether to convert fees in tranche tokens or not\\n  /// @param _skipReward array of flags for skipping the market sell of specific rewards. Lenght should be equal to the `IIdleCDOStrategy(strategy).getRewardTokens()` array\\n  /// @param _minAmount array of min amounts for uniswap trades. Lenght should be equal to the _skipReward array\\n  /// @param _sellAmounts array of amounts (of reward tokens) to sell on uniswap. Lenght should be equal to the _minAmount array\\n  /// if a sellAmount is 0 the whole contract balance for that token is swapped\\n  /// @return _soldAmounts array with amounts of rewards actually sold\\n  /// @return _swappedAmounts array with amounts of _token actually bought\\n  function harvest(\\n    bool _skipRedeem,\\n    bool _skipIncentivesUpdate,\\n    bool _skipFeeDeposit,\\n    bool[] calldata _skipReward,\\n    uint256[] calldata _minAmount,\\n    uint256[] calldata _sellAmounts\\n  ) external\\n    returns (uint256[] memory _soldAmounts, uint256[] memory _swappedAmounts, uint256[] memory _redeemedRewards) {\\n    require(msg.sender == rebalancer || msg.sender == owner(), \\\"6\\\");\\n    // Fetch state variable once to save gas\\n    address _token = token;\\n    address _strategy = strategy;\\n    // Check whether to redeem rewards from strategy or not\\n    if (!_skipRedeem) {\\n      // Redeem all rewards associated with the strategy\\n      _redeemedRewards = IIdleCDOStrategy(_strategy).redeemRewards();\\n      // Redeem unlocked AAVE if any and start a new cooldown for stkAAVE\\n      _claimStkAave();\\n      // Sell rewards\\n      uint256 _totSold;\\n      (_soldAmounts, _swappedAmounts, _totSold) = _sellAllRewards(_token, _sellAmounts, _minAmount, _skipReward);\\n      // update last saved harvest block number\\n      latestHarvestBlock = block.number;\\n      // update harvested rewards value\\n      harvestedRewards = _totSold;\\n      // split converted rewards and update tranche prices\\n      // NOTE: harvested rewards won't be counted directly but released over time\\n      _updateAccounting();\\n\\n      uint256 currAARatio;\\n      if (!_skipFeeDeposit) {\\n        // Get fees in the form of totalSupply diluition\\n        // NOTE we return currAARatio to reuse it in _updateIncentives and so to save some gas\\n        currAARatio = _depositFees();\\n      }\\n\\n      if (!_skipIncentivesUpdate) {\\n        // Update tranche incentives distribution and send rewards to staking contracts\\n        _updateIncentives(currAARatio == 0 ? getCurrentAARatio() : currAARatio);\\n      }\\n    }\\n\\n    // Keep some unlent balance for cheap redeems and as reserve of last resort\\n    uint256 underlyingBal = _contractTokenBalance(_token);\\n    uint256 idealUnlent = getContractValue() * unlentPerc / FULL_ALLOC;\\n    if (underlyingBal > idealUnlent) {\\n      // Put unlent balance at work in the lending provider\\n      IIdleCDOStrategy(_strategy).deposit(underlyingBal - idealUnlent);\\n    }\\n  }\\n\\n  /// @notice method used to redeem underlyings from the lending provider\\n  /// @dev can be called only by the rebalancer or the owner\\n  /// @param _amount in underlyings to liquidate from lending provider\\n  /// @param _revertIfNeeded flag to revert if amount liquidated is too low\\n  /// @return liquidated amount in underlyings\\n  function liquidate(uint256 _amount, bool _revertIfNeeded) external returns (uint256) {\\n    require(msg.sender == rebalancer || msg.sender == owner(), \\\"6\\\");\\n    return _liquidate(_amount, _revertIfNeeded);\\n  }\\n\\n  // ###################\\n  // onlyOwner\\n  // ###################\\n\\n  /// @param _allowed flag to allow AA withdraws\\n  function setAllowAAWithdraw(bool _allowed) external onlyOwner {\\n    allowAAWithdraw = _allowed;\\n  }\\n\\n  /// @param _allowed flag to allow BB withdraws\\n  function setAllowBBWithdraw(bool _allowed) external onlyOwner {\\n    allowBBWithdraw = _allowed;\\n  }\\n\\n  /// @param _allowed flag to enable the 'default' check (whether _strategyPrice decreased or not)\\n  function setSkipDefaultCheck(bool _allowed) external onlyOwner {\\n    skipDefaultCheck = _allowed;\\n  }\\n\\n  /// @param _allowed flag to enable the check if redeemed amount during liquidations is enough\\n  function setRevertIfTooLow(bool _allowed) external onlyOwner {\\n    revertIfTooLow = _allowed;\\n  }\\n\\n  /// @notice updates the strategy used (potentially changing the lending protocol used)\\n  /// @dev it's REQUIRED to liquidate / redeem everything from the lending provider before changing strategy\\n  /// if the leding provider of the new strategy is different from the current one\\n  /// it's also REQUIRED to transfer out any incentive tokens accrued if those are changed from the current ones\\n  /// if the lending provider is changed\\n  /// @param _strategy new strategy address\\n  /// @param _incentiveTokens array of incentive tokens addresses\\n  function setStrategy(address _strategy, address[] memory _incentiveTokens) external onlyOwner {\\n    require(_strategy != address(0), '0');\\n    IERC20Detailed _token = IERC20Detailed(token);\\n    // revoke allowance for the current strategy\\n    address _currStrategy = strategy;\\n    _token.safeApprove(_currStrategy, 0);\\n    IERC20Detailed(strategyToken).safeApprove(_currStrategy, 0);\\n    // Updated strategy variables\\n    strategy = _strategy;\\n    // Update incentive tokens\\n    incentiveTokens = _incentiveTokens;\\n    // Update strategyToken\\n    address _newStrategyToken = IIdleCDOStrategy(_strategy).strategyToken();\\n    strategyToken = _newStrategyToken;\\n    // Approve underlyingToken\\n    _token.safeIncreaseAllowance(_strategy, type(uint256).max);\\n    // Approve the new strategy to transfer strategyToken out from this contract\\n    IERC20Detailed(_newStrategyToken).safeIncreaseAllowance(_strategy, type(uint256).max);\\n    // Update last strategy price\\n    lastStrategyPrice = _strategyPrice();\\n  }\\n\\n  /// @param _rebalancer new rebalancer address\\n  function setRebalancer(address _rebalancer) external onlyOwner {\\n    require((rebalancer = _rebalancer) != address(0), '0');\\n  }\\n\\n  /// @param _feeReceiver new fee receiver address\\n  function setFeeReceiver(address _feeReceiver) external onlyOwner {\\n    require((feeReceiver = _feeReceiver) != address(0), '0');\\n  }\\n\\n  /// @param _guardian new guardian (pauser) address\\n  function setGuardian(address _guardian) external onlyOwner {\\n    require((guardian = _guardian) != address(0), '0');\\n  }\\n\\n  /// @param _fee new fee\\n  function setFee(uint256 _fee) external onlyOwner {\\n    require((fee = _fee) <= MAX_FEE, '7');\\n  }\\n\\n  /// @param _unlentPerc new unlent percentage\\n  function setUnlentPerc(uint256 _unlentPerc) external onlyOwner {\\n    require((unlentPerc = _unlentPerc) <= FULL_ALLOC, '7');\\n  }\\n\\n  /// @param _releaseBlocksPeriod new # of blocks after an harvest during which\\n  /// harvested rewards gets progressively redistriburted to users\\n  function setReleaseBlocksPeriod(uint256 _releaseBlocksPeriod) external onlyOwner {\\n    releaseBlocksPeriod = _releaseBlocksPeriod;\\n  }\\n\\n  /// @param _isStkAAVEActive whether the contract receive stkAAVE or not\\n  function setIsStkAAVEActive(bool _isStkAAVEActive) external onlyOwner {\\n    isStkAAVEActive = _isStkAAVEActive;\\n  }\\n\\n  /// @param _idealRange new ideal range\\n  function setIdealRange(uint256 _idealRange) external onlyOwner {\\n    require((idealRange = _idealRange) <= FULL_ALLOC, '7');\\n  }\\n\\n  /// @dev it's REQUIRED to transfer out any incentive tokens accrued before\\n  /// @param _incentiveTokens array with new incentive tokens\\n  function setIncentiveTokens(address[] memory _incentiveTokens) external onlyOwner {\\n    incentiveTokens = _incentiveTokens;\\n  }\\n\\n  /// @notice Set tranche Rewards contract addresses (for tranches incentivization)\\n  /// @param _AAStaking IdleCDOTrancheRewards contract address for AA tranches\\n  /// @param _BBStaking IdleCDOTrancheRewards contract address for BB tranches\\n  function setStakingRewards(address _AAStaking, address _BBStaking) external onlyOwner {\\n    // Read state variable once\\n    address _AATranche = AATranche;\\n    address _BBTranche = BBTranche;\\n    address[] memory _incentiveTokens = incentiveTokens;\\n    address _currAAStaking = AAStaking;\\n    address _currBBStaking = BBStaking;\\n    bool _isAAStakingActive = _currAAStaking != address(0);\\n    bool _isBBStakingActive = _currBBStaking != address(0);\\n\\n    // Remove allowance for incentive tokens for current staking contracts\\n    for (uint256 i = 0; i < _incentiveTokens.length; i++) {\\n      IERC20Detailed _incentiveToken = IERC20Detailed(_incentiveTokens[i]);\\n      if (_isAAStakingActive) {\\n        _incentiveToken.safeApprove(_currAAStaking, 0);\\n      }\\n      if (_isBBStakingActive) {\\n        _incentiveToken.safeApprove(_currBBStaking, 0);\\n      }\\n    }\\n    // Remove allowace for tranche tokens (used for staking fees)\\n    if (_isAAStakingActive && _AATranche != address(0)) {\\n      IERC20Detailed(_AATranche).safeApprove(_currAAStaking, 0);\\n    }\\n    if (_isBBStakingActive && _BBTranche != address(0)) {\\n      IERC20Detailed(_BBTranche).safeApprove(_currBBStaking, 0);\\n    }\\n\\n    // Update staking contract addresses\\n    AAStaking = _AAStaking;\\n    BBStaking = _BBStaking;\\n\\n    _isAAStakingActive = _AAStaking != address(0);\\n    _isBBStakingActive = _BBStaking != address(0);\\n\\n    // Increase allowance for incentiveTokens\\n    for (uint256 i = 0; i < _incentiveTokens.length; i++) {\\n      IERC20Detailed _incentiveToken = IERC20Detailed(_incentiveTokens[i]);\\n      // Approve each staking contract to spend each incentiveToken on beahlf of this contract\\n      if (_isAAStakingActive) {\\n        _incentiveToken.safeIncreaseAllowance(_AAStaking, type(uint256).max);\\n      }\\n      if (_isBBStakingActive) {\\n        _incentiveToken.safeIncreaseAllowance(_BBStaking, type(uint256).max);\\n      }\\n    }\\n\\n    // Increase allowance for tranche tokens (used for staking fees)\\n    if (_isAAStakingActive && _AATranche != address(0)) {\\n      IERC20Detailed(_AATranche).safeIncreaseAllowance(_AAStaking, type(uint256).max);\\n    }\\n    if (_isBBStakingActive && _BBTranche != address(0)) {\\n      IERC20Detailed(_BBTranche).safeIncreaseAllowance(_BBStaking, type(uint256).max);\\n    }\\n  }\\n\\n  /// @notice pause deposits and redeems for all classes of tranches\\n  /// @dev can be called by both the owner and the guardian\\n  function emergencyShutdown() external {\\n    require(msg.sender == guardian || msg.sender == owner(), \\\"6\\\");\\n    // prevent deposits\\n    _pause();\\n    // prevent withdraws\\n    allowAAWithdraw = false;\\n    allowBBWithdraw = false;\\n    // Allow deposits/withdraws (once selectively re-enabled, eg for AA holders)\\n    // without checking for lending protocol default\\n    skipDefaultCheck = true;\\n    revertIfTooLow = true;\\n  }\\n\\n  /// @notice Pauses deposits and redeems\\n  /// @dev can be called by both the owner and the guardian\\n  function pause() external  {\\n    require(msg.sender == guardian || msg.sender == owner(), \\\"6\\\");\\n    _pause();\\n  }\\n\\n  /// @notice Unpauses deposits and redeems\\n  /// @dev can be called by both the owner and the guardian\\n  function unpause() external {\\n    require(msg.sender == guardian || msg.sender == owner(), \\\"6\\\");\\n    _unpause();\\n  }\\n\\n  // ###################\\n  // Helpers\\n  // ###################\\n\\n  /// @notice returns the current balance of this contract for a specific token\\n  /// @param _token token address\\n  /// @return balance of `_token` for this contract\\n  function _contractTokenBalance(address _token) internal view returns (uint256) {\\n    return IERC20Detailed(_token).balanceOf(address(this));\\n  }\\n\\n  /// @dev Set last caller and block.number hash. This should be called at the beginning of the first function to protect\\n  function _updateCallerBlock() internal {\\n    _lastCallerBlock = keccak256(abi.encodePacked(tx.origin, block.number));\\n  }\\n\\n  /// @dev Check that the second function is not called in the same tx from the same tx.origin\\n  function _checkSameTx() internal view {\\n    require(keccak256(abi.encodePacked(tx.origin, block.number)) != _lastCallerBlock, \\\"8\\\");\\n  }\\n\\n  /// @dev this method is only used to check whether a token is an incentive tokens or not\\n  /// in the harvest call. The maximum number of element in the array will be a small number (eg at most 3-5)\\n  /// @param _array array of addresses to search for an element\\n  /// @param _val address of an element to find\\n  /// @return flag if the _token is an incentive token or not\\n  function _includesAddress(address[] memory _array, address _val) internal pure returns (bool) {\\n    for (uint256 i = 0; i < _array.length; i++) {\\n      if (_array[i] == _val) {\\n        return true;\\n      }\\n    }\\n    // explicit return to fix linter\\n    return false;\\n  }\\n\\n  /// @notice concat 2 strings in a single one\\n  /// @param a first string\\n  /// @param b second string\\n  /// @return new string with a and b concatenated\\n  function _concat(string memory a, string memory b) internal pure returns (string memory) {\\n    return string(abi.encodePacked(a, b));\\n  }\\n}\\n\"\r\n    },\r\n    \"@uniswap/v2-periphery/contracts/interfaces/IUniswapV2Router02.sol\": {\r\n      \"content\": \"pragma solidity >=0.6.2;\\n\\nimport './IUniswapV2Router01.sol';\\n\\ninterface IUniswapV2Router02 is IUniswapV2Router01 {\\n    function removeLiquidityETHSupportingFeeOnTransferTokens(\\n        address token,\\n        uint liquidity,\\n        uint amountTokenMin,\\n        uint amountETHMin,\\n        address to,\\n        uint deadline\\n    ) external returns (uint amountETH);\\n    function removeLiquidityETHWithPermitSupportingFeeOnTransferTokens(\\n        address token,\\n        uint liquidity,\\n        uint amountTokenMin,\\n        uint amountETHMin,\\n        address to,\\n        uint deadline,\\n        bool approveMax, uint8 v, bytes32 r, bytes32 s\\n    ) external returns (uint amountETH);\\n\\n    function swapExactTokensForTokensSupportingFeeOnTransferTokens(\\n        uint amountIn,\\n        uint amountOutMin,\\n        address[] calldata path,\\n        address to,\\n        uint deadline\\n    ) external;\\n    function swapExactETHForTokensSupportingFeeOnTransferTokens(\\n        uint amountOutMin,\\n        address[] calldata path,\\n        address to,\\n        uint deadline\\n    ) external payable;\\n    function swapExactTokensForETHSupportingFeeOnTransferTokens(\\n        uint amountIn,\\n        uint amountOutMin,\\n        address[] calldata path,\\n        address to,\\n        uint deadline\\n    ) external;\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts-upgradeable/security/PausableUpgradeable.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../utils/ContextUpgradeable.sol\\\";\\nimport \\\"../proxy/utils/Initializable.sol\\\";\\n\\n/**\\n * @dev Contract module which allows children to implement an emergency stop\\n * mechanism that can be triggered by an authorized account.\\n *\\n * This module is used through inheritance. It will make available the\\n * modifiers `whenNotPaused` and `whenPaused`, which can be applied to\\n * the functions of your contract. Note that they will not be pausable by\\n * simply including this module, only once the modifiers are put in place.\\n */\\nabstract contract PausableUpgradeable is Initializable, ContextUpgradeable {\\n    /**\\n     * @dev Emitted when the pause is triggered by `account`.\\n     */\\n    event Paused(address account);\\n\\n    /**\\n     * @dev Emitted when the pause is lifted by `account`.\\n     */\\n    event Unpaused(address account);\\n\\n    bool private _paused;\\n\\n    /**\\n     * @dev Initializes the contract in unpaused state.\\n     */\\n    function __Pausable_init() internal initializer {\\n        __Context_init_unchained();\\n        __Pausable_init_unchained();\\n    }\\n\\n    function __Pausable_init_unchained() internal initializer {\\n        _paused = false;\\n    }\\n\\n    /**\\n     * @dev Returns true if the contract is paused, and false otherwise.\\n     */\\n    function paused() public view virtual returns (bool) {\\n        return _paused;\\n    }\\n\\n    /**\\n     * @dev Modifier to make a function callable only when the contract is not paused.\\n     *\\n     * Requirements:\\n     *\\n     * - The contract must not be paused.\\n     */\\n    modifier whenNotPaused() {\\n        require(!paused(), \\\"Pausable: paused\\\");\\n        _;\\n    }\\n\\n    /**\\n     * @dev Modifier to make a function callable only when the contract is paused.\\n     *\\n     * Requirements:\\n     *\\n     * - The contract must be paused.\\n     */\\n    modifier whenPaused() {\\n        require(paused(), \\\"Pausable: not paused\\\");\\n        _;\\n    }\\n\\n    /**\\n     * @dev Triggers stopped state.\\n     *\\n     * Requirements:\\n     *\\n     * - The contract must not be paused.\\n     */\\n    function _pause() internal virtual whenNotPaused {\\n        _paused = true;\\n        emit Paused(_msgSender());\\n    }\\n\\n    /**\\n     * @dev Returns to normal state.\\n     *\\n     * Requirements:\\n     *\\n     * - The contract must be paused.\\n     */\\n    function _unpause() internal virtual whenPaused {\\n        _paused = false;\\n        emit Unpaused(_msgSender());\\n    }\\n    uint256[49] private __gap;\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts-upgradeable/token/ERC20/utils/SafeERC20Upgradeable.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../IERC20Upgradeable.sol\\\";\\nimport \\\"../../../utils/AddressUpgradeable.sol\\\";\\n\\n/**\\n * @title SafeERC20\\n * @dev Wrappers around ERC20 operations that throw on failure (when the token\\n * contract returns false). Tokens that return no value (and instead revert or\\n * throw on failure) are also supported, non-reverting calls are assumed to be\\n * successful.\\n * To use this library you can add a `using SafeERC20 for IERC20;` statement to your contract,\\n * which allows you to call the safe operations as `token.safeTransfer(...)`, etc.\\n */\\nlibrary SafeERC20Upgradeable {\\n    using AddressUpgradeable for address;\\n\\n    function safeTransfer(IERC20Upgradeable token, address to, uint256 value) internal {\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.transfer.selector, to, value));\\n    }\\n\\n    function safeTransferFrom(IERC20Upgradeable token, address from, address to, uint256 value) internal {\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.transferFrom.selector, from, to, value));\\n    }\\n\\n    /**\\n     * @dev Deprecated. This function has issues similar to the ones found in\\n     * {IERC20-approve}, and its usage is discouraged.\\n     *\\n     * Whenever possible, use {safeIncreaseAllowance} and\\n     * {safeDecreaseAllowance} instead.\\n     */\\n    function safeApprove(IERC20Upgradeable token, address spender, uint256 value) internal {\\n        // safeApprove should only be called when setting an initial allowance,\\n        // or when resetting it to zero. To increase and decrease it, use\\n        // 'safeIncreaseAllowance' and 'safeDecreaseAllowance'\\n        // solhint-disable-next-line max-line-length\\n        require((value == 0) || (token.allowance(address(this), spender) == 0),\\n            \\\"SafeERC20: approve from non-zero to non-zero allowance\\\"\\n        );\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, value));\\n    }\\n\\n    function safeIncreaseAllowance(IERC20Upgradeable token, address spender, uint256 value) internal {\\n        uint256 newAllowance = token.allowance(address(this), spender) + value;\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));\\n    }\\n\\n    function safeDecreaseAllowance(IERC20Upgradeable token, address spender, uint256 value) internal {\\n        unchecked {\\n            uint256 oldAllowance = token.allowance(address(this), spender);\\n            require(oldAllowance >= value, \\\"SafeERC20: decreased allowance below zero\\\");\\n            uint256 newAllowance = oldAllowance - value;\\n            _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));\\n        }\\n    }\\n\\n    /**\\n     * @dev Imitates a Solidity high-level call (i.e. a regular function call to a contract), relaxing the requirement\\n     * on the return value: the return value is optional (but if data is returned, it must not be false).\\n     * @param token The token targeted by the call.\\n     * @param data The call data (encoded using abi.encode or one of its variants).\\n     */\\n    function _callOptionalReturn(IERC20Upgradeable token, bytes memory data) private {\\n        // We need to perform a low level call here, to bypass Solidity's return data size checking mechanism, since\\n        // we're implementing it ourselves. We use {Address.functionCall} to perform this call, which verifies that\\n        // the target address contains contract code and also asserts for success in the low-level call.\\n\\n        bytes memory returndata = address(token).functionCall(data, \\\"SafeERC20: low-level call failed\\\");\\n        if (returndata.length > 0) { // Return data is optional\\n            // solhint-disable-next-line max-line-length\\n            require(abi.decode(returndata, (bool)), \\\"SafeERC20: ERC20 operation did not succeed\\\");\\n        }\\n    }\\n}\\n\"\r\n    },\r\n    \"contracts/interfaces/IIdleCDOStrategy.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: Apache-2.0\\npragma solidity 0.8.7;\\n\\ninterface IIdleCDOStrategy {\\n  function strategyToken() external view returns(address);\\n  function token() external view returns(address);\\n  function tokenDecimals() external view returns(uint256);\\n  function oneToken() external view returns(uint256);\\n  function redeemRewards() external returns(uint256[] memory);\\n  function pullStkAAVE() external returns(uint256);\\n  function price() external view returns(uint256);\\n  function getRewardTokens() external view returns(address[] memory);\\n  function deposit(uint256 _amount) external returns(uint256);\\n  // _amount in `strategyToken`\\n  function redeem(uint256 _amount) external returns(uint256);\\n  // _amount in `token`\\n  function redeemUnderlying(uint256 _amount) external returns(uint256);\\n  function getApr() external view returns(uint256);\\n}\\n\"\r\n    },\r\n    \"contracts/interfaces/IERC20Detailed.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: Apache-2.0\\npragma solidity 0.8.7;\\n\\nimport \\\"@openzeppelin/contracts-upgradeable/token/ERC20/IERC20Upgradeable.sol\\\";\\n\\ninterface IERC20Detailed is IERC20Upgradeable {\\n  function name() external view returns(string memory);\\n  function symbol() external view returns(string memory);\\n  function decimals() external view returns(uint256);\\n}\\n\"\r\n    },\r\n    \"contracts/interfaces/IIdleCDOTrancheRewards.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: Apache-2.0\\npragma solidity 0.8.7;\\n\\ninterface IIdleCDOTrancheRewards {\\n  function stake(uint256 _amount) external;\\n  function stakeFor(address _user, uint256 _amount) external;\\n  function unstake(uint256 _amount) external;\\n  function depositReward(address _reward, uint256 _amount) external;\\n}\\n\"\r\n    },\r\n    \"contracts/interfaces/IStakedAave.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: Apache-2.0\\npragma solidity 0.8.7;\\n\\ninterface IStakedAave {\\n  function COOLDOWN_SECONDS() external view returns (uint256);\\n  function redeem(address to, uint256 amount) external;\\n  function cooldown() external;\\n  function balanceOf(address) external view returns (uint256);\\n  function stakersCooldowns(address) external view returns (uint256);\\n}\\n\"\r\n    },\r\n    \"contracts/GuardedLaunchUpgradable.sol\": {\r\n      \"content\": \"//SPDX-License-Identifier: Apache 2.0\\npragma solidity 0.8.7;\\n\\nimport \\\"@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol\\\";\\nimport \\\"@openzeppelin/contracts-upgradeable/security/ReentrancyGuardUpgradeable.sol\\\";\\nimport \\\"@openzeppelin/contracts-upgradeable/token/ERC20/utils/SafeERC20Upgradeable.sol\\\";\\nimport \\\"@openzeppelin/contracts-upgradeable/token/ERC20/IERC20Upgradeable.sol\\\";\\nimport \\\"@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol\\\";\\n\\n/// @notice This abstract contract is used to add an updatable limit on the total value locked\\n/// that the contract can have. It also have an emergency method that allows the owner to pull\\n/// funds into predefined recovery address\\n/// @dev Inherit this contract and add the _guarded method to the child contract\\nabstract contract GuardedLaunchUpgradable is Initializable, OwnableUpgradeable, ReentrancyGuardUpgradeable {\\n  using SafeERC20Upgradeable for IERC20Upgradeable;\\n\\n  // ERROR MESSAGES:\\n  // 0 = is 0\\n  // 1 = already initialized\\n  // 2 = Contract limit reached\\n\\n  // TVL limit in underlying value\\n  uint256 public limit;\\n  // recovery address\\n  address public governanceRecoveryFund;\\n\\n  /// @param _limit TVL limit. (0 means unlimited)\\n  /// @param _governanceRecoveryFund recovery address\\n  /// @param _owner owner address\\n  function __GuardedLaunch_init(uint256 _limit, address _governanceRecoveryFund, address _owner) internal {\\n    require(_governanceRecoveryFund != address(0), '0');\\n    require(_owner != address(0), '0');\\n    // Initialize inherited contracts\\n    OwnableUpgradeable.__Ownable_init();\\n    ReentrancyGuardUpgradeable.__ReentrancyGuard_init();\\n    // Initialize state variables\\n    limit = _limit;\\n    governanceRecoveryFund = _governanceRecoveryFund;\\n    // Transfer ownership\\n    transferOwnership(_owner);\\n  }\\n\\n  /// @notice this check should be called inside the child contract on deposits to check that the\\n  /// TVL didn't exceed a threshold\\n  /// @param _amount new amount to deposit\\n  function _guarded(uint256 _amount) internal view {\\n    uint256 _limit = limit;\\n    if (_limit == 0) {\\n      return;\\n    }\\n    require(getContractValue() + _amount <= _limit, '2');\\n  }\\n\\n  /// @notice abstract method, should return the TVL in underlyings\\n  function getContractValue() public virtual view returns (uint256);\\n\\n  /// @notice set contract TVL limit\\n  /// @param _limit limit in underlying value, 0 means no limit\\n  function _setLimit(uint256 _limit) external onlyOwner {\\n    limit = _limit;\\n  }\\n\\n  /// @notice Emergency method, tokens gets transferred to the governanceRecoveryFund address\\n  /// @param _token address of the token to transfer\\n  /// @param _value amount to transfer\\n  function transferToken(address _token, uint256 _value) external onlyOwner {\\n    IERC20Upgradeable(_token).safeTransfer(governanceRecoveryFund, _value);\\n  }\\n}\\n\"\r\n    },\r\n    \"contracts/IdleCDOTranche.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\npragma solidity 0.8.7;\\n\\nimport \\\"@openzeppelin/contracts/token/ERC20/ERC20.sol\\\";\\n\\n/// @dev ERC20 representing a tranche token\\ncontract IdleCDOTranche is ERC20 {\\n  // allowed minter address\\n  address public minter;\\n\\n  /// @param _name tranche name\\n  /// @param _symbol tranche symbol\\n  constructor(\\n    string memory _name, // eg. IdleDAI\\n    string memory _symbol // eg. IDLEDAI\\n  ) ERC20(_name, _symbol) {\\n    // minter is msg.sender which is IdleCDO (in initialize)\\n    minter = msg.sender;\\n  }\\n\\n  /// @param account that should receive the tranche tokens\\n  /// @param amount of tranche tokens to mint\\n  function mint(address account, uint256 amount) external {\\n    require(msg.sender == minter, 'TRANCHE:!AUTH');\\n    _mint(account, amount);\\n  }\\n\\n  /// @param account that should have the tranche tokens burned\\n  /// @param amount of tranche tokens to burn\\n  function burn(address account, uint256 amount) external {\\n    require(msg.sender == minter, 'TRANCHE:!AUTH');\\n    _burn(account, amount);\\n  }\\n}\\n\"\r\n    },\r\n    \"contracts/IdleCDOStorage.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: Apache-2.0\\npragma solidity 0.8.7;\\n\\nimport '@uniswap/v2-periphery/contracts/interfaces/IUniswapV2Router02.sol';\\n\\ncontract IdleCDOStorage {\\n  // constant to represent 100%\\n  uint256 public constant FULL_ALLOC = 100000;\\n  // max fee, relative to FULL_ALLOC\\n  uint256 public constant MAX_FEE = 20000;\\n  // one token\\n  uint256 public constant ONE_TRANCHE_TOKEN = 10**18;\\n  // variable used to save the last tx.origin and block.number\\n  bytes32 internal _lastCallerBlock;\\n  // variable used to save the block of the latest harvest\\n  uint256 internal latestHarvestBlock;\\n  // WETH address\\n  address public weth;\\n  // tokens used to incentivize the idle tranche ideal ratio\\n  address[] public incentiveTokens;\\n  // underlying token (eg DAI)\\n  address public token;\\n  // address that can only pause/unpause the contract in case of emergency\\n  address public guardian;\\n  // one `token` (eg for DAI 10**18)\\n  uint256 public oneToken;\\n  // address that can call the 'harvest' method and lend pool assets\\n  address public rebalancer;\\n  // address of the uniswap v2 router\\n  IUniswapV2Router02 internal uniswapRouterV2;\\n\\n  // Flag for allowing AA withdraws\\n  bool public allowAAWithdraw;\\n  // Flag for allowing BB withdraws\\n  bool public allowBBWithdraw;\\n  // Flag for allowing to enable reverting in case the strategy gives back less\\n  // amount than the requested one\\n  bool public revertIfTooLow;\\n  // Flag to enable the `Default Check` (related to the emergency shutdown)\\n  bool public skipDefaultCheck;\\n\\n  // address of the strategy used to lend funds\\n  address public strategy;\\n  // address of the strategy token which represent the position in the lending provider\\n  address public strategyToken;\\n  // address of AA Tranche token contract\\n  address public AATranche;\\n  // address of BB Tranche token contract\\n  address public BBTranche;\\n  // address of AA Staking reward token contract\\n  address public AAStaking;\\n  // address of BB Staking reward token contract\\n  address public BBStaking;\\n\\n  // Apr split ratio for AA tranches\\n  // (relative to FULL_ALLOC so 50% => 50000 => 50% of the interest to tranche AA)\\n  uint256 public trancheAPRSplitRatio; //\\n  // Ideal tranche split ratio in `token` value\\n  // (relative to FULL_ALLOC so 50% => 50000 means 50% of tranches (in value) should be AA)\\n  uint256 public trancheIdealWeightRatio;\\n  // Price for minting AA tranche, in underlyings\\n  uint256 public priceAA;\\n  // Price for minting BB tranche, in underlyings\\n  uint256 public priceBB;\\n  // last saved net asset value (in `token`) for AA tranches\\n  uint256 public lastNAVAA;\\n  // last saved net asset value (in `token`) for BB tranches\\n  uint256 public lastNAVBB;\\n  // last saved lending provider price\\n  uint256 public lastStrategyPrice;\\n  // Keeps track of unclaimed fees for feeReceiver\\n  uint256 public unclaimedFees;\\n  // Keeps an unlent balance both for cheap redeem and as 'insurance of last resort'\\n  uint256 public unlentPerc;\\n\\n  // Fee amount (relative to FULL_ALLOC)\\n  uint256 public fee;\\n  // address of the fee receiver\\n  address public feeReceiver;\\n\\n  // trancheIdealWeightRatio Â± idealRanges, used in updateIncentives\\n  uint256 public idealRange;\\n  // period, in blocks, for progressively releasing harvested rewards to users\\n  uint256 public releaseBlocksPeriod;\\n  // amount of rewards sold in the last harvest (in `token`)\\n  uint256 internal harvestedRewards;\\n  // stkAave address\\n  address internal constant stkAave = address(0x4da27a545c0c5B758a6BA100e3a049001de870f5);\\n  // aave address\\n  address internal constant AAVE = address(0x7Fc66500c84A76Ad7e9c93437bFc5Ac33E2DDaE9);\\n  // if the cdo receive stkAAVE\\n  bool internal isStkAAVEActive;\\n}\\n\"\r\n    },\r\n    \"@uniswap/v2-periphery/contracts/interfaces/IUniswapV2Router01.sol\": {\r\n      \"content\": \"pragma solidity >=0.6.2;\\n\\ninterface IUniswapV2Router01 {\\n    function factory() external pure returns (address);\\n    function WETH() external pure returns (address);\\n\\n    function addLiquidity(\\n        address tokenA,\\n        address tokenB,\\n        uint amountADesired,\\n        uint amountBDesired,\\n        uint amountAMin,\\n        uint amountBMin,\\n        address to,\\n        uint deadline\\n    ) external returns (uint amountA, uint amountB, uint liquidity);\\n    function addLiquidityETH(\\n        address token,\\n        uint amountTokenDesired,\\n        uint amountTokenMin,\\n        uint amountETHMin,\\n        address to,\\n        uint deadline\\n    ) external payable returns (uint amountToken, uint amountETH, uint liquidity);\\n    function removeLiquidity(\\n        address tokenA,\\n        address tokenB,\\n        uint liquidity,\\n        uint amountAMin,\\n        uint amountBMin,\\n        address to,\\n        uint deadline\\n    ) external returns (uint amountA, uint amountB);\\n    function removeLiquidityETH(\\n        address token,\\n        uint liquidity,\\n        uint amountTokenMin,\\n        uint amountETHMin,\\n        address to,\\n        uint deadline\\n    ) external returns (uint amountToken, uint amountETH);\\n    function removeLiquidityWithPermit(\\n        address tokenA,\\n        address tokenB,\\n        uint liquidity,\\n        uint amountAMin,\\n        uint amountBMin,\\n        address to,\\n        uint deadline,\\n        bool approveMax, uint8 v, bytes32 r, bytes32 s\\n    ) external returns (uint amountA, uint amountB);\\n    function removeLiquidityETHWithPermit(\\n        address token,\\n        uint liquidity,\\n        uint amountTokenMin,\\n        uint amountETHMin,\\n        address to,\\n        uint deadline,\\n        bool approveMax, uint8 v, bytes32 r, bytes32 s\\n    ) external returns (uint amountToken, uint amountETH);\\n    function swapExactTokensForTokens(\\n        uint amountIn,\\n        uint amountOutMin,\\n        address[] calldata path,\\n        address to,\\n        uint deadline\\n    ) external returns (uint[] memory amounts);\\n    function swapTokensForExactTokens(\\n        uint amountOut,\\n        uint amountInMax,\\n        address[] calldata path,\\n        address to,\\n        uint deadline\\n    ) external returns (uint[] memory amounts);\\n    function swapExactETHForTokens(uint amountOutMin, address[] calldata path, address to, uint deadline)\\n        external\\n        payable\\n        returns (uint[] memory amounts);\\n    function swapTokensForExactETH(uint amountOut, uint amountInMax, address[] calldata path, address to, uint deadline)\\n        external\\n        returns (uint[] memory amounts);\\n    function swapExactTokensForETH(uint amountIn, uint amountOutMin, address[] calldata path, address to, uint deadline)\\n        external\\n        returns (uint[] memory amounts);\\n    function swapETHForExactTokens(uint amountOut, address[] calldata path, address to, uint deadline)\\n        external\\n        payable\\n        returns (uint[] memory amounts);\\n\\n    function quote(uint amountA, uint reserveA, uint reserveB) external pure returns (uint amountB);\\n    function getAmountOut(uint amountIn, uint reserveIn, uint reserveOut) external pure returns (uint amountOut);\\n    function getAmountIn(uint amountOut, uint reserveIn, uint reserveOut) external pure returns (uint amountIn);\\n    function getAmountsOut(uint amountIn, address[] calldata path) external view returns (uint[] memory amounts);\\n    function getAmountsIn(uint amountOut, address[] calldata path) external view returns (uint[] memory amounts);\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts-upgradeable/utils/ContextUpgradeable.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\nimport \\\"../proxy/utils/Initializable.sol\\\";\\n\\n/*\\n * @dev Provides information about the current execution context, including the\\n * sender of the transaction and its data. While these are generally available\\n * via msg.sender and msg.data, they should not be accessed in such a direct\\n * manner, since when dealing with meta-transactions the account sending and\\n * paying for execution may not be the actual sender (as far as an application\\n * is concerned).\\n *\\n * This contract is only required for intermediate, library-like contracts.\\n */\\nabstract contract ContextUpgradeable is Initializable {\\n    function __Context_init() internal initializer {\\n        __Context_init_unchained();\\n    }\\n\\n    function __Context_init_unchained() internal initializer {\\n    }\\n    function _msgSender() internal view virtual returns (address) {\\n        return msg.sender;\\n    }\\n\\n    function _msgData() internal view virtual returns (bytes calldata) {\\n        this; // silence state mutability warning without generating bytecode - see https://github.com/ethereum/solidity/issues/2691\\n        return msg.data;\\n    }\\n    uint256[50] private __gap;\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\n// solhint-disable-next-line compiler-version\\npragma solidity ^0.8.0;\\n\\nimport \\\"../../utils/AddressUpgradeable.sol\\\";\\n\\n/**\\n * @dev This is a base contract to aid in writing upgradeable contracts, or any kind of contract that will be deployed\\n * behind a proxy. Since a proxied contract can't have a constructor, it's common to move constructor logic to an\\n * external initializer function, usually called `initialize`. It then becomes necessary to protect this initializer\\n * function so it can only be called once. The {initializer} modifier provided by this contract will have this effect.\\n *\\n * TIP: To avoid leaving the proxy in an uninitialized state, the initializer function should be called as early as\\n * possible by providing the encoded function call as the `_data` argument to {UpgradeableProxy-constructor}.\\n *\\n * CAUTION: When used with inheritance, manual care must be taken to not invoke a parent initializer twice, or to ensure\\n * that all initializers are idempotent. This is not verified automatically as constructors are by Solidity.\\n */\\nabstract contract Initializable {\\n\\n    /**\\n     * @dev Indicates that the contract has been initialized.\\n     */\\n    bool private _initialized;\\n\\n    /**\\n     * @dev Indicates that the contract is in the process of being initialized.\\n     */\\n    bool private _initializing;\\n\\n    /**\\n     * @dev Modifier to protect an initializer function from being invoked twice.\\n     */\\n    modifier initializer() {\\n        require(_initializing || !_initialized, \\\"Initializable: contract is already initialized\\\");\\n\\n        bool isTopLevelCall = !_initializing;\\n        if (isTopLevelCall) {\\n            _initializing = true;\\n            _initialized = true;\\n        }\\n\\n        _;\\n\\n        if (isTopLevelCall) {\\n            _initializing = false;\\n        }\\n    }\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts-upgradeable/utils/AddressUpgradeable.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Collection of functions related to the address type\\n */\\nlibrary AddressUpgradeable {\\n    /**\\n     * @dev Returns true if `account` is a contract.\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * It is unsafe to assume that an address for which this function returns\\n     * false is an externally-owned account (EOA) and not a contract.\\n     *\\n     * Among others, `isContract` will return false for the following\\n     * types of addresses:\\n     *\\n     *  - an externally-owned account\\n     *  - a contract in construction\\n     *  - an address where a contract will be created\\n     *  - an address where a contract lived, but was destroyed\\n     * ====\\n     */\\n    function isContract(address account) internal view returns (bool) {\\n        // This method relies on extcodesize, which returns 0 for contracts in\\n        // construction, since the code is only stored at the end of the\\n        // constructor execution.\\n\\n        uint256 size;\\n        // solhint-disable-next-line no-inline-assembly\\n        assembly { size := extcodesize(account) }\\n        return size > 0;\\n    }\\n\\n    /**\\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\\n     * `recipient`, forwarding all available gas and reverting on errors.\\n     *\\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\\n     * imposed by `transfer`, making them unable to receive funds via\\n     * `transfer`. {sendValue} removes this limitation.\\n     *\\n     * https://diligence.consensys.net/posts/2019/09/stop-using-soliditys-transfer-now/[Learn more].\\n     *\\n     * IMPORTANT: because control is transferred to `recipient`, care must be\\n     * taken to not create reentrancy vulnerabilities. Consider using\\n     * {ReentrancyGuard} or the\\n     * https://solidity.readthedocs.io/en/v0.5.11/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\\n     */\\n    function sendValue(address payable recipient, uint256 amount) internal {\\n        require(address(this).balance >= amount, \\\"Address: insufficient balance\\\");\\n\\n        // solhint-disable-next-line avoid-low-level-calls, avoid-call-value\\n        (bool success, ) = recipient.call{ value: amount }(\\\"\\\");\\n        require(success, \\\"Address: unable to send value, recipient may have reverted\\\");\\n    }\\n\\n    /**\\n     * @dev Performs a Solidity function call using a low level `call`. A\\n     * plain`call` is an unsafe replacement for a function call: use this\\n     * function instead.\\n     *\\n     * If `target` reverts with a revert reason, it is bubbled up by this\\n     * function (like regular Solidity function calls).\\n     *\\n     * Returns the raw returned data. To convert to the expected return value,\\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\\n     *\\n     * Requirements:\\n     *\\n     * - `target` must be a contract.\\n     * - calling `target` with `data` must not revert.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\\n      return functionCall(target, data, \\\"Address: low-level call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\\n     * `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(address target, bytes memory data, string memory errorMessage) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, 0, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but also transferring `value` wei to `target`.\\n     *\\n     * Requirements:\\n     *\\n     * - the calling contract must have an ETH balance of at least `value`.\\n     * - the called Solidity function must be `payable`.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(address target, bytes memory data, uint256 value) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, value, \\\"Address: low-level call with value failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\\n     * with `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(address target, bytes memory data, uint256 value, string memory errorMessage) internal returns (bytes memory) {\\n        require(address(this).balance >= value, \\\"Address: insufficient balance for call\\\");\\n        require(isContract(target), \\\"Address: call to non-contract\\\");\\n\\n        // solhint-disable-next-line avoid-low-level-calls\\n        (bool success, bytes memory returndata) = target.call{ value: value }(data);\\n        return _verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\\n        return functionStaticCall(target, data, \\\"Address: low-level static call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(address target, bytes memory data, string memory errorMessage) internal view returns (bytes memory) {\\n        require(isContract(target), \\\"Address: static call to non-contract\\\");\\n\\n        // solhint-disable-next-line avoid-low-level-calls\\n        (bool success, bytes memory returndata) = target.staticcall(data);\\n        return _verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    function _verifyCallResult(bool success, bytes memory returndata, string memory errorMessage) private pure returns(bytes memory) {\\n        if (success) {\\n            return returndata;\\n        } else {\\n            // Look for revert reason and bubble it up if present\\n            if (returndata.length > 0) {\\n                // The easiest way to bubble the revert reason is using memory via assembly\\n\\n                // solhint-disable-next-line no-inline-assembly\\n                assembly {\\n                    let returndata_size := mload(returndata)\\n                    revert(add(32, returndata), returndata_size)\\n                }\\n            } else {\\n                revert(errorMessage);\\n            }\\n        }\\n    }\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts-upgradeable/token/ERC20/IERC20Upgradeable.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC20 standard as defined in the EIP.\\n */\\ninterface IERC20Upgradeable {\\n    /**\\n     * @dev Returns the amount of tokens in existence.\\n     */\\n    function totalSupply() external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the amount of tokens owned by `account`.\\n     */\\n    function balanceOf(address account) external view returns (uint256);\\n\\n    /**\\n     * @dev Moves `amount` tokens from the caller's account to `recipient`.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transfer(address recipient, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Returns the remaining number of tokens that `spender` will be\\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\\n     * zero by default.\\n     *\\n     * This value changes when {approve} or {transferFrom} are called.\\n     */\\n    function allowance(address owner, address spender) external view returns (uint256);\\n\\n    /**\\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\\n     * that someone may use both the old and the new allowance by unfortunate\\n     * transaction ordering. One possible solution to mitigate this race\\n     * condition is to first reduce the spender's allowance to 0 and set the\\n     * desired value afterwards:\\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address spender, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Moves `amount` tokens from `sender` to `recipient` using the\\n     * allowance mechanism. `amount` is then deducted from the caller's\\n     * allowance.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(address sender, address recipient, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\\n     * another (`to`).\\n     *\\n     * Note that `value` may be zero.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 value);\\n\\n    /**\\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\\n     * a call to {approve}. `value` is the new allowance.\\n     */\\n    event Approval(address indexed owner, address indexed spender, uint256 value);\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../utils/ContextUpgradeable.sol\\\";\\nimport \\\"../proxy/utils/Initializable.sol\\\";\\n/**\\n * @dev Contract module which provides a basic access control mechanism, where\\n * there is an account (an owner) that can be granted exclusive access to\\n * specific functions.\\n *\\n * By default, the owner account will be the one that deploys the contract. This\\n * can later be changed with {transferOwnership}.\\n *\\n * This module is used through inheritance. It will make available the modifier\\n * `onlyOwner`, which can be applied to your functions to restrict their use to\\n * the owner.\\n */\\nabstract contract OwnableUpgradeable is Initializable, ContextUpgradeable {\\n    address private _owner;\\n\\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\\n\\n    /**\\n     * @dev Initializes the contract setting the deployer as the initial owner.\\n     */\\n    function __Ownable_init() internal initializer {\\n        __Context_init_unchained();\\n        __Ownable_init_unchained();\\n    }\\n\\n    function __Ownable_init_unchained() internal initializer {\\n        address msgSender = _msgSender();\\n        _owner = msgSender;\\n        emit OwnershipTransferred(address(0), msgSender);\\n    }\\n\\n    /**\\n     * @dev Returns the address of the current owner.\\n     */\\n    function owner() public view virtual returns (address) {\\n        return _owner;\\n    }\\n\\n    /**\\n     * @dev Throws if called by any account other than the owner.\\n     */\\n    modifier onlyOwner() {\\n        require(owner() == _msgSender(), \\\"Ownable: caller is not the owner\\\");\\n        _;\\n    }\\n\\n    /**\\n     * @dev Leaves the contract without owner. It will not be possible to call\\n     * `onlyOwner` functions anymore. Can only be called by the current owner.\\n     *\\n     * NOTE: Renouncing ownership will leave the contract without an owner,\\n     * thereby removing any functionality that is only available to the owner.\\n     */\\n    function renounceOwnership() public virtual onlyOwner {\\n        emit OwnershipTransferred(_owner, address(0));\\n        _owner = address(0);\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Can only be called by the current owner.\\n     */\\n    function transferOwnership(address newOwner) public virtual onlyOwner {\\n        require(newOwner != address(0), \\\"Ownable: new owner is the zero address\\\");\\n        emit OwnershipTransferred(_owner, newOwner);\\n        _owner = newOwner;\\n    }\\n    uint256[49] private __gap;\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts-upgradeable/security/ReentrancyGuardUpgradeable.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\nimport \\\"../proxy/utils/Initializable.sol\\\";\\n\\n/**\\n * @dev Contract module that helps prevent reentrant calls to a function.\\n *\\n * Inheriting from `ReentrancyGuard` will make the {nonReentrant} modifier\\n * available, which can be applied to functions to make sure there are no nested\\n * (reentrant) calls to them.\\n *\\n * Note that because there is a single `nonReentrant` guard, functions marked as\\n * `nonReentrant` may not call one another. This can be worked around by making\\n * those functions `private`, and then adding `external` `nonReentrant` entry\\n * points to them.\\n *\\n * TIP: If you would like to learn more about reentrancy and alternative ways\\n * to protect against it, check out our blog post\\n * https://blog.openzeppelin.com/reentrancy-after-istanbul/[Reentrancy After Istanbul].\\n */\\nabstract contract ReentrancyGuardUpgradeable is Initializable {\\n    // Booleans are more expensive than uint256 or any type that takes up a full\\n    // word because each write operation emits an extra SLOAD to first read the\\n    // slot's contents, replace the bits taken up by the boolean, and then write\\n    // back. This is the compiler's defense against contract upgrades and\\n    // pointer aliasing, and it cannot be disabled.\\n\\n    // The values being non-zero value makes deployment a bit more expensive,\\n    // but in exchange the refund on every call to nonReentrant will be lower in\\n    // amount. Since refunds are capped to a percentage of the total\\n    // transaction's gas, it is best to keep them low in cases like this one, to\\n    // increase the likelihood of the full refund coming into effect.\\n    uint256 private constant _NOT_ENTERED = 1;\\n    uint256 private constant _ENTERED = 2;\\n\\n    uint256 private _status;\\n\\n    function __ReentrancyGuard_init() internal initializer {\\n        __ReentrancyGuard_init_unchained();\\n    }\\n\\n    function __ReentrancyGuard_init_unchained() internal initializer {\\n        _status = _NOT_ENTERED;\\n    }\\n\\n    /**\\n     * @dev Prevents a contract from calling itself, directly or indirectly.\\n     * Calling a `nonReentrant` function from another `nonReentrant`\\n     * function is not supported. It is possible to prevent this from happening\\n     * by making the `nonReentrant` function external, and make it call a\\n     * `private` function that does the actual work.\\n     */\\n    modifier nonReentrant() {\\n        // On the first call to nonReentrant, _notEntered will be true\\n        require(_status != _ENTERED, \\\"ReentrancyGuard: reentrant call\\\");\\n\\n        // Any calls to nonReentrant after this point will fail\\n        _status = _ENTERED;\\n\\n        _;\\n\\n        // By storing the original value once again, a refund is triggered (see\\n        // https://eips.ethereum.org/EIPS/eip-2200)\\n        _status = _NOT_ENTERED;\\n    }\\n    uint256[49] private __gap;\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/token/ERC20/ERC20.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"./IERC20.sol\\\";\\nimport \\\"../../utils/Context.sol\\\";\\n\\n/**\\n * @dev Implementation of the {IERC20} interface.\\n *\\n * This implementation is agnostic to the way tokens are created. This means\\n * that a supply mechanism has to be added in a derived contract using {_mint}.\\n * For a generic mechanism see {ERC20PresetMinterPauser}.\\n *\\n * TIP: For a detailed writeup see our guide\\n * https://forum.zeppelin.solutions/t/how-to-implement-erc20-supply-mechanisms/226[How\\n * to implement supply mechanisms].\\n *\\n * We have followed general OpenZeppelin guidelines: functions revert instead\\n * of returning `false` on failure. This behavior is nonetheless conventional\\n * and does not conflict with the expectations of ERC20 applications.\\n *\\n * Additionally, an {Approval} event is emitted on calls to {transferFrom}.\\n * This allows applications to reconstruct the allowance for all accounts just\\n * by listening to said events. Other implementations of the EIP may not emit\\n * these events, as it isn't required by the specification.\\n *\\n * Finally, the non-standard {decreaseAllowance} and {increaseAllowance}\\n * functions have been added to mitigate the well-known issues around setting\\n * allowances. See {IERC20-approve}.\\n */\\ncontract ERC20 is Context, IERC20 {\\n    mapping (address => uint256) private _balances;\\n\\n    mapping (address => mapping (address => uint256)) private _allowances;\\n\\n    uint256 private _totalSupply;\\n\\n    string private _name;\\n    string private _symbol;\\n\\n    /**\\n     * @dev Sets the values for {name} and {symbol}.\\n     *\\n     * The defaut value of {decimals} is 18. To select a different value for\\n     * {decimals} you should overload it.\\n     *\\n     * All three of these values are immutable: they can only be set once during\\n     * construction.\\n     */\\n    constructor (string memory name_, string memory symbol_) {\\n        _name = name_;\\n        _symbol = symbol_;\\n    }\\n\\n    /**\\n     * @dev Returns the name of the token.\\n     */\\n    function name() public view virtual returns (string memory) {\\n        return _name;\\n    }\\n\\n    /**\\n     * @dev Returns the symbol of the token, usually a shorter version of the\\n     * name.\\n     */\\n    function symbol() public view virtual returns (string memory) {\\n        return _symbol;\\n    }\\n\\n    /**\\n     * @dev Returns the number of decimals used to get its user representation.\\n     * For example, if `decimals` equals `2`, a balance of `505` tokens should\\n     * be displayed to a user as `5,05` (`505 / 10 ** 2`).\\n     *\\n     * Tokens usually opt for a value of 18, imitating the relationship between\\n     * Ether and Wei. This is the value {ERC20} uses, unless this function is\\n     * overloaded;\\n     *\\n     * NOTE: This information is only used for _display_ purposes: it in\\n     * no way affects any of the arithmetic of the contract, including\\n     * {IERC20-balanceOf} and {IERC20-transfer}.\\n     */\\n    function decimals() public view virtual returns (uint8) {\\n        return 18;\\n    }\\n\\n    /**\\n     * @dev See {IERC20-totalSupply}.\\n     */\\n    function totalSupply() public view virtual override returns (uint256) {\\n        return _totalSupply;\\n    }\\n\\n    /**\\n     * @dev See {IERC20-balanceOf}.\\n     */\\n    function balanceOf(address account) public view virtual override returns (uint256) {\\n        return _balances[account];\\n    }\\n\\n    /**\\n     * @dev See {IERC20-transfer}.\\n     *\\n     * Requirements:\\n     *\\n     * - `recipient` cannot be the zero address.\\n     * - the caller must have a balance of at least `amount`.\\n     */\\n    function transfer(address recipient, uint256 amount) public virtual override returns (bool) {\\n        _transfer(_msgSender(), recipient, amount);\\n        return true;\\n    }\\n\\n    /**\\n     * @dev See {IERC20-allowance}.\\n     */\\n    function allowance(address owner, address spender) public view virtual override returns (uint256) {\\n        return _allowances[owner][spender];\\n    }\\n\\n    /**\\n     * @dev See {IERC20-approve}.\\n     *\\n     * Requirements:\\n     *\\n     * - `spender` cannot be the zero address.\\n     */\\n    function approve(address spender, uint256 amount) public virtual override returns (bool) {\\n        _approve(_msgSender(), spender, amount);\\n        return true;\\n    }\\n\\n    /**\\n     * @dev See {IERC20-transferFrom}.\\n     *\\n     * Emits an {Approval} event indicating the updated allowance. This is not\\n     * required by the EIP. See the note at the beginning of {ERC20}.\\n     *\\n     * Requirements:\\n     *\\n     * - `sender` and `recipient` cannot be the zero address.\\n     * - `sender` must have a balance of at least `amount`.\\n     * - the caller must have allowance for ``sender``'s tokens of at least\\n     * `amount`.\\n     */\\n    function transferFrom(address sender, address recipient, uint256 amount) public virtual override returns (bool) {\\n        _transfer(sender, recipient, amount);\\n\\n        uint256 currentAllowance = _allowances[sender][_msgSender()];\\n        require(currentAllowance >= amount, \\\"ERC20: transfer amount exceeds allowance\\\");\\n        _approve(sender, _msgSender(), currentAllowance - amount);\\n\\n        return true;\\n    }\\n\\n    /**\\n     * @dev Atomically increases the allowance granted to `spender` by the caller.\\n     *\\n     * This is an alternative to {approve} that can be used as a mitigation for\\n     * problems described in {IERC20-approve}.\\n     *\\n     * Emits an {Approval} event indicating the updated allowance.\\n     *\\n     * Requirements:\\n     *\\n     * - `spender` cannot be the zero address.\\n     */\\n    function increaseAllowance(address spender, uint256 addedValue) public virtual returns (bool) {\\n        _approve(_msgSender(), spender, _allowances[_msgSender()][spender] + addedValue);\\n        return true;\\n    }\\n\\n    /**\\n     * @dev Atomically decreases the allowance granted to `spender` by the caller.\\n     *\\n     * This is an alternative to {approve} that can be used as a mitigation for\\n     * problems described in {IERC20-approve}.\\n     *\\n     * Emits an {Approval} event indicating the updated allowance.\\n     *\\n     * Requirements:\\n     *\\n     * - `spender` cannot be the zero address.\\n     * - `spender` must have allowance for the caller of at least\\n     * `subtractedValue`.\\n     */\\n    function decreaseAllowance(address spender, uint256 subtractedValue) public virtual returns (bool) {\\n        uint256 currentAllowance = _allowances[_msgSender()][spender];\\n        require(currentAllowance >= subtractedValue, \\\"ERC20: decreased allowance below zero\\\");\\n        _approve(_msgSender(), spender, currentAllowance - subtractedValue);\\n\\n        return true;\\n    }\\n\\n    /**\\n     * @dev Moves tokens `amount` from `sender` to `recipient`.\\n     *\\n     * This is internal function is equivalent to {transfer}, and can be used to\\n     * e.g. implement automatic token fees, slashing mechanisms, etc.\\n     *\\n     * Emits a {Transfer} event.\\n     *\\n     * Requirements:\\n     *\\n     * - `sender` cannot be the zero address.\\n     * - `recipient` cannot be the zero address.\\n     * - `sender` must have a balance of at least `amount`.\\n     */\\n    function _transfer(address sender, address recipient, uint256 amount) internal virtual {\\n        require(sender != address(0), \\\"ERC20: transfer from the zero address\\\");\\n        require(recipient != address(0), \\\"ERC20: transfer to the zero address\\\");\\n\\n        _beforeTokenTransfer(sender, recipient, amount);\\n\\n        uint256 senderBalance = _balances[sender];\\n        require(senderBalance >= amount, \\\"ERC20: transfer amount exceeds balance\\\");\\n        _balances[sender] = senderBalance - amount;\\n        _balances[recipient] += amount;\\n\\n        emit Transfer(sender, recipient, amount);\\n    }\\n\\n    /** @dev Creates `amount` tokens and assigns them to `account`, increasing\\n     * the total supply.\\n     *\\n     * Emits a {Transfer} event with `from` set to the zero address.\\n     *\\n     * Requirements:\\n     *\\n     * - `to` cannot be the zero address.\\n     */\\n    function _mint(address account, uint256 amount) internal virtual {\\n        require(account != address(0), \\\"ERC20: mint to the zero address\\\");\\n\\n        _beforeTokenTransfer(address(0), account, amount);\\n\\n        _totalSupply += amount;\\n        _balances[account] += amount;\\n        emit Transfer(address(0), account, amount);\\n    }\\n\\n    /**\\n     * @dev Destroys `amount` tokens from `account`, reducing the\\n     * total supply.\\n     *\\n     * Emits a {Transfer} event with `to` set to the zero address.\\n     *\\n     * Requirements:\\n     *\\n     * - `account` cannot be the zero address.\\n     * - `account` must have at least `amount` tokens.\\n     */\\n    function _burn(address account, uint256 amount) internal virtual {\\n        require(account != address(0), \\\"ERC20: burn from the zero address\\\");\\n\\n        _beforeTokenTransfer(account, address(0), amount);\\n\\n        uint256 accountBalance = _balances[account];\\n        require(accountBalance >= amount, \\\"ERC20: burn amount exceeds balance\\\");\\n        _balances[account] = accountBalance - amount;\\n        _totalSupply -= amount;\\n\\n        emit Transfer(account, address(0), amount);\\n    }\\n\\n    /**\\n     * @dev Sets `amount` as the allowance of `spender` over the `owner` s tokens.\\n     *\\n     * This internal function is equivalent to `approve`, and can be used to\\n     * e.g. set automatic allowances for certain subsystems, etc.\\n     *\\n     * Emits an {Approval} event.\\n     *\\n     * Requirements:\\n     *\\n     * - `owner` cannot be the zero address.\\n     * - `spender` cannot be the zero address.\\n     */\\n    function _approve(address owner, address spender, uint256 amount) internal virtual {\\n        require(owner != address(0), \\\"ERC20: approve from the zero address\\\");\\n        require(spender != address(0), \\\"ERC20: approve to the zero address\\\");\\n\\n        _allowances[owner][spender] = amount;\\n        emit Approval(owner, spender, amount);\\n    }\\n\\n    /**\\n     * @dev Hook that is called before any transfer of tokens. This includes\\n     * minting and burning.\\n     *\\n     * Calling conditions:\\n     *\\n     * - when `from` and `to` are both non-zero, `amount` of ``from``'s tokens\\n     * will be to transferred to `to`.\\n     * - when `from` is zero, `amount` tokens will be minted for `to`.\\n     * - when `to` is zero, `amount` of ``from``'s tokens will be burned.\\n     * - `from` and `to` are never both zero.\\n     *\\n     * To learn more about hooks, head to xref:ROOT:extending-contracts.adoc#using-hooks[Using Hooks].\\n     */\\n    function _beforeTokenTransfer(address from, address to, uint256 amount) internal virtual { }\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/token/ERC20/IERC20.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC20 standard as defined in the EIP.\\n */\\ninterface IERC20 {\\n    /**\\n     * @dev Returns the amount of tokens in existence.\\n     */\\n    function totalSupply() external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the amount of tokens owned by `account`.\\n     */\\n    function balanceOf(address account) external view returns (uint256);\\n\\n    /**\\n     * @dev Moves `amount` tokens from the caller's account to `recipient`.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transfer(address recipient, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Returns the remaining number of tokens that `spender` will be\\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\\n     * zero by default.\\n     *\\n     * This value changes when {approve} or {transferFrom} are called.\\n     */\\n    function allowance(address owner, address spender) external view returns (uint256);\\n\\n    /**\\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\\n     * that someone may use both the old and the new allowance by unfortunate\\n     * transaction ordering. One possible solution to mitigate this race\\n     * condition is to first reduce the spender's allowance to 0 and set the\\n     * desired value afterwards:\\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address spender, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Moves `amount` tokens from `sender` to `recipient` using the\\n     * allowance mechanism. `amount` is then deducted from the caller's\\n     * allowance.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(address sender, address recipient, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\\n     * another (`to`).\\n     *\\n     * Note that `value` may be zero.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 value);\\n\\n    /**\\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\\n     * a call to {approve}. `value` is the new allowance.\\n     */\\n    event Approval(address indexed owner, address indexed spender, uint256 value);\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/utils/Context.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\n/*\\n * @dev Provides information about the current execution context, including the\\n * sender of the transaction and its data. While these are generally available\\n * via msg.sender and msg.data, they should not be accessed in such a direct\\n * manner, since when dealing with meta-transactions the account sending and\\n * paying for execution may not be the actual sender (as far as an application\\n * is concerned).\\n *\\n * This contract is only required for intermediate, library-like contracts.\\n */\\nabstract contract Context {\\n    function _msgSender() internal view virtual returns (address) {\\n        return msg.sender;\\n    }\\n\\n    function _msgData() internal view virtual returns (bytes calldata) {\\n        this; // silence state mutability warning without generating bytecode - see https://github.com/ethereum/solidity/issues/2691\\n        return msg.data;\\n    }\\n}\\n\"\r\n    }\r\n  },\r\n  \"settings\": {\r\n    \"optimizer\": {\r\n      \"enabled\": true,\r\n      \"runs\": 1\r\n    },\r\n    \"outputSelection\": {\r\n      \"*\": {\r\n        \"*\": [\r\n          \"evm.bytecode\",\r\n          \"evm.deployedBytecode\",\r\n          \"abi\"\r\n        ]\r\n      }\r\n    },\r\n    \"libraries\": {}\r\n  }\r\n}}","ABI":"[{\"inputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"Paused\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"Unpaused\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"AAStaking\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"AATranche\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"BBStaking\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"BBTranche\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"FULL_ALLOC\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"MAX_FEE\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"ONE_TRANCHE_TOKEN\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_limit\",\"type\":\"uint256\"}],\"name\":\"_setLimit\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"allowAAWithdraw\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"allowBBWithdraw\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"depositAA\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"depositBB\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"emergencyShutdown\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"fee\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"feeReceiver\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_tranche\",\"type\":\"address\"}],\"name\":\"getApr\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getContractValue\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getCurrentAARatio\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_tranche\",\"type\":\"address\"}],\"name\":\"getIdealApr\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getIncentiveTokens\",\"outputs\":[{\"internalType\":\"address[]\",\"name\":\"\",\"type\":\"address[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"governanceRecoveryFund\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"guardian\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bool\",\"name\":\"_skipRedeem\",\"type\":\"bool\"},{\"internalType\":\"bool\",\"name\":\"_skipIncentivesUpdate\",\"type\":\"bool\"},{\"internalType\":\"bool\",\"name\":\"_skipFeeDeposit\",\"type\":\"bool\"},{\"internalType\":\"bool[]\",\"name\":\"_skipReward\",\"type\":\"bool[]\"},{\"internalType\":\"uint256[]\",\"name\":\"_minAmount\",\"type\":\"uint256[]\"},{\"internalType\":\"uint256[]\",\"name\":\"_sellAmounts\",\"type\":\"uint256[]\"}],\"name\":\"harvest\",\"outputs\":[{\"internalType\":\"uint256[]\",\"name\":\"_soldAmounts\",\"type\":\"uint256[]\"},{\"internalType\":\"uint256[]\",\"name\":\"_swappedAmounts\",\"type\":\"uint256[]\"},{\"internalType\":\"uint256[]\",\"name\":\"_redeemedRewards\",\"type\":\"uint256[]\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"idealRange\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"incentiveTokens\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_limit\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"_guardedToken\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_governanceFund\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_owner\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_rebalancer\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_strategy\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_trancheAPRSplitRatio\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_trancheIdealWeightRatio\",\"type\":\"uint256\"},{\"internalType\":\"address[]\",\"name\":\"_incentiveTokens\",\"type\":\"address[]\"}],\"name\":\"initialize\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"lastNAVAA\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"lastNAVBB\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"lastStrategyPrice\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"limit\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"},{\"internalType\":\"bool\",\"name\":\"_revertIfNeeded\",\"type\":\"bool\"}],\"name\":\"liquidate\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"oneToken\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"pause\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"paused\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"priceAA\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"priceBB\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"rebalancer\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"releaseBlocksPeriod\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"revertIfTooLow\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bool\",\"name\":\"_allowed\",\"type\":\"bool\"}],\"name\":\"setAllowAAWithdraw\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bool\",\"name\":\"_allowed\",\"type\":\"bool\"}],\"name\":\"setAllowBBWithdraw\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_fee\",\"type\":\"uint256\"}],\"name\":\"setFee\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_feeReceiver\",\"type\":\"address\"}],\"name\":\"setFeeReceiver\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_guardian\",\"type\":\"address\"}],\"name\":\"setGuardian\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_idealRange\",\"type\":\"uint256\"}],\"name\":\"setIdealRange\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address[]\",\"name\":\"_incentiveTokens\",\"type\":\"address[]\"}],\"name\":\"setIncentiveTokens\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bool\",\"name\":\"_isStkAAVEActive\",\"type\":\"bool\"}],\"name\":\"setIsStkAAVEActive\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_rebalancer\",\"type\":\"address\"}],\"name\":\"setRebalancer\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_releaseBlocksPeriod\",\"type\":\"uint256\"}],\"name\":\"setReleaseBlocksPeriod\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bool\",\"name\":\"_allowed\",\"type\":\"bool\"}],\"name\":\"setRevertIfTooLow\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bool\",\"name\":\"_allowed\",\"type\":\"bool\"}],\"name\":\"setSkipDefaultCheck\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_AAStaking\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_BBStaking\",\"type\":\"address\"}],\"name\":\"setStakingRewards\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_strategy\",\"type\":\"address\"},{\"internalType\":\"address[]\",\"name\":\"_incentiveTokens\",\"type\":\"address[]\"}],\"name\":\"setStrategy\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_unlentPerc\",\"type\":\"uint256\"}],\"name\":\"setUnlentPerc\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"skipDefaultCheck\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"strategy\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"strategyToken\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"token\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"trancheAPRSplitRatio\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"trancheIdealWeightRatio\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_tranche\",\"type\":\"address\"}],\"name\":\"tranchePrice\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_token\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"transferToken\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"unclaimedFees\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"unlentPerc\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"unpause\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_tranche\",\"type\":\"address\"}],\"name\":\"virtualPrice\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"_virtualPrice\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"weth\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"withdrawAA\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"withdrawBB\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}]","ContractName":"IdleCDO","CompilerVersion":"v0.8.7+commit.e28d00a7","OptimizationUsed":"1","Runs":"1","ConstructorArguments":"","EVMVersion":"Default","Library":"","LicenseType":"","Proxy":"0","Implementation":"","SwarmSource":""}]}