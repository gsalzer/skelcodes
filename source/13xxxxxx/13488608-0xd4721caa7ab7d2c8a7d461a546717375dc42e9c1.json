{"status":"1","message":"OK","result":[{"SourceCode":"// SPDX-License-Identifier: MIT\r\n/*\r\n * Copyright Â© 2020 reflect.finance. ALL RIGHTS RESERVED.\r\n */\r\n\r\npragma solidity ^0.8.0;\r\n\r\n abstract contract Context {\r\n    function _msgSender() internal view virtual returns (address ) {\r\n        return msg.sender;\r\n    }\r\n}\r\n\r\nlibrary SafeMath {\r\n  function add(uint a, uint b) internal pure returns(uint) {\r\n    uint c = a + b;\r\n    require(c >= a, \"SafeMath: addition overflow\");\r\n\r\n    return c;\r\n  }\r\n\r\n  function sub(uint a, uint b) internal pure returns(uint) {\r\n    return sub(a, b, \"SafeMath: subtraction overflow\");\r\n  }\r\n\r\n  function sub(uint a, uint b, string memory errorMessage) internal pure returns(uint) {\r\n    require(b <= a, errorMessage);\r\n    uint c = a - b;\r\n\r\n    return c;\r\n  }\r\n\r\n  function mul(uint a, uint b) internal pure returns(uint) {\r\n    if (a == 0) {\r\n        return 0;\r\n    }\r\n\r\n    uint c = a * b;\r\n    require(c / a == b, \"SafeMath: multiplication overflow\");\r\n\r\n    return c;\r\n  }\r\n\r\n  function div(uint a, uint b) internal pure returns(uint) {\r\n    return div(a, b, \"SafeMath: division by zero\");\r\n  }\r\n\r\n  function div(uint a, uint b, string memory errorMessage) internal pure returns(uint) {\r\n    // Solidity only automatically asserts when dividing by 0\r\n    require(b > 0, errorMessage);\r\n    uint c = a / b;\r\n\r\n    return c;\r\n  }\r\n}\r\n\r\n  contract Ownable is Context {\r\n    address private _owner;\r\n\r\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\r\n\r\n    constructor () {\r\n        address msgSender = _msgSender();\r\n        _owner = msgSender;\r\n        emit OwnershipTransferred(address(0), msgSender);\r\n    }\r\n\r\n  \r\n    function owner() public view returns (address) {\r\n        return _owner;\r\n    }\r\n\r\n    modifier onlyOwner() {\r\n        require(_owner == _msgSender(), \"Ownable: caller is not the owner\");\r\n        _;\r\n    }\r\n\r\n    function renounceOwnership() public virtual onlyOwner {\r\n        emit OwnershipTransferred(_owner, address(0));\r\n        _owner = address(0);\r\n    }\r\n\r\n    function transferOwnership(address newOwner) public virtual onlyOwner {\r\n        require(newOwner != address(0), \"Ownable: new owner is the zero address\");\r\n        emit OwnershipTransferred(_owner, newOwner);\r\n        _owner = newOwner;\r\n    }\r\n}\r\n\r\n\r\n\r\nlibrary TransferHelper {\r\n    function safeApprove(address token, address to, uint256 value) internal {\r\n        (bool success, bytes memory data) = token.call(abi.encodeWithSelector(0x095ea7b3, to, value));\r\n        require(success && (data.length == 0 || abi.decode(data, (bool))), 'TransferHelper: APPROVE_FAILED');\r\n    }\r\n\r\n    function safeTransfer(address token, address to, uint256 value) internal {\r\n        (bool success, bytes memory data) = token.call(abi.encodeWithSelector(0xa9059cbb, to, value));\r\n        require(success && (data.length == 0 || abi.decode(data, (bool))), 'TransferHelper: TRANSFER_FAILED');\r\n    }\r\n\r\n    function safeTransferFrom(address token, address from, address to, uint256 value) internal {\r\n        (bool success, bytes memory data) = token.call(abi.encodeWithSelector(0x23b872dd, from, to, value));\r\n        require(success && (data.length == 0 || abi.decode(data, (bool))), 'TransferHelper: TRANSFER_FROM_FAILED');\r\n    }\r\n\r\n    function safeTransferETH(address to, uint256 value) internal {\r\n        (bool success, ) = to.call{value: value}(new bytes(0));\r\n        require(success, 'TransferHelper: ETH_TRANSFER_FAILED');\r\n    }\r\n}\r\n\r\ncontract BridgeBase is Context, Ownable {\r\n    using SafeMath for uint256;\r\n    \r\n  \r\n    \r\n    mapping(uint256 => uint256) private _nonces;\r\n    mapping(uint256 => mapping(uint256 => bool)) private nonceProcessed;\r\n    mapping(uint256 => uint256) private _processedFees;\r\n\r\n    uint256 private _bridgeFee = 3;\r\n    bool public _isBridgingPaused = false;\r\n    \r\n\r\n\r\n    address catoshi;\r\n    address system = address(0xa0266B27BF0D6d4Dd326eA10B6e0fF2cF06651E1);\r\n    address bridgeFeesAddress = address(0xD378dBeD86689D0dBA19Ca2bab322B6f23765288);\r\n\r\n    \r\n    event SwapRequest(\r\n        address indexed to,\r\n        uint256 amount,\r\n        uint256 nonce,\r\n        uint256 toChainID\r\n    );\r\n\r\n    modifier onlySystem() {\r\n        require(system == _msgSender(), \"Ownable: caller is not the system\");\r\n        _;\r\n    }\r\n    \r\n    modifier bridgingPaused() {\r\n        require(!_isBridgingPaused, \"the bridging is paused\");\r\n        _;\r\n    }\r\n\r\n    constructor()  {\r\n        _processedFees[56] = 0.001 ether;\r\n        _processedFees[250] = 0.0001 ether;\r\n    }\r\n   \r\n   function updateCatoshiContract(address _catoshi) external onlyOwner {\r\n       catoshi = _catoshi;\r\n   }\r\n   \r\n   \r\n    function setBridgeFee(uint256 bridgeFee) external onlyOwner returns(bool){\r\n        require(bridgeFee > 0, \"Invalid Percentage\");\r\n        _bridgeFee = bridgeFee;\r\n        return true;\r\n  }\r\n  \r\n  function setBridgeFeesAddress(address _bridgeFeesAddress) external onlyOwner {\r\n        bridgeFeesAddress = _bridgeFeesAddress;\r\n    }\r\n    \r\n      function getBridgeFee() external view returns(uint256){\r\n        return _bridgeFee;\r\n      }\r\n      \r\n      function setSystem(address _system) external onlyOwner returns(bool){\r\n          system = _system;\r\n          return true;\r\n      }\r\n      \r\n      \r\n    function setProcessedFess(uint256 chainID, uint256 processedFees)\r\n        external\r\n        onlyOwner\r\n    {\r\n        _processedFees[chainID] = processedFees;\r\n    }\r\n    \r\n    function getProcessedFees(uint256 chainID) external view returns(uint256){\r\n        return _processedFees[chainID];\r\n    }\r\n  \r\n\r\n    function getBridgeStatus(uint256 nonce, uint256 fromChainID)\r\n        external\r\n        view\r\n        returns (bool)\r\n    {\r\n        return nonceProcessed[fromChainID][nonce];\r\n    }\r\n    \r\n    \r\n    function updateBridgingStaus(bool paused) external onlyOwner {\r\n        _isBridgingPaused = paused;\r\n    }\r\n    \r\n\r\n    \r\n    function swap (uint256 amount, uint256 toChainID) external bridgingPaused payable {\r\n        require(msg.value>= _processedFees[toChainID], \"Insufficient processed fees\");\r\n         uint256 _nonce = _nonces[toChainID];\r\n        _nonce = _nonce.add(1);\r\n        _nonces[toChainID] = _nonce;\r\n        TransferHelper.safeTransferFrom(\r\n            catoshi,\r\n            _msgSender(),\r\n            address(this),\r\n            amount\r\n        );\r\n        payable(system).transfer(msg.value);\r\n        emit SwapRequest(_msgSender(), amount, _nonce, toChainID);\r\n        \r\n    }\r\n    \r\n    function feeCalculation(uint256 amount) public view returns(uint256) { \r\n       uint256 _amountAfterFee = (amount-(amount.mul(_bridgeFee)/1000));\r\n        return _amountAfterFee;\r\n    }  \r\n    \r\n    function swapBack(\r\n        address to,\r\n        uint256 amount,\r\n        uint256 nonce,\r\n        uint256 fromChainID\r\n    ) external onlySystem {\r\n        require(\r\n            !nonceProcessed[fromChainID][nonce],\r\n            \"Swap is already proceeds\"\r\n        );\r\n        nonceProcessed[fromChainID][nonce] = true;\r\n\r\n        uint256 temp = feeCalculation(amount);\r\n        uint256 fees = amount.sub(temp);\r\n\r\n        //   TransferHelper.safeApprove(catoshi,address(this),fees);\r\n        TransferHelper.safeTransfer(catoshi, bridgeFeesAddress, fees);\r\n\r\n        //   TransferHelper.safeApprove(catoshi,address(this),temp);\r\n        TransferHelper.safeTransfer(catoshi, to, temp);\r\n    }\r\n}","ABI":"[{\"inputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"nonce\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"toChainID\",\"type\":\"uint256\"}],\"name\":\"SwapRequest\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"_isBridgingPaused\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"feeCalculation\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getBridgeFee\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"nonce\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"fromChainID\",\"type\":\"uint256\"}],\"name\":\"getBridgeStatus\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"chainID\",\"type\":\"uint256\"}],\"name\":\"getProcessedFees\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"bridgeFee\",\"type\":\"uint256\"}],\"name\":\"setBridgeFee\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_bridgeFeesAddress\",\"type\":\"address\"}],\"name\":\"setBridgeFeesAddress\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"chainID\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"processedFees\",\"type\":\"uint256\"}],\"name\":\"setProcessedFess\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_system\",\"type\":\"address\"}],\"name\":\"setSystem\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"toChainID\",\"type\":\"uint256\"}],\"name\":\"swap\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"nonce\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"fromChainID\",\"type\":\"uint256\"}],\"name\":\"swapBack\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bool\",\"name\":\"paused\",\"type\":\"bool\"}],\"name\":\"updateBridgingStaus\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_catoshi\",\"type\":\"address\"}],\"name\":\"updateCatoshiContract\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}]","ContractName":"BridgeBase","CompilerVersion":"v0.8.4+commit.c7e474f2","OptimizationUsed":"1","Runs":"200","ConstructorArguments":"","EVMVersion":"Default","Library":"","LicenseType":"MIT","Proxy":"0","Implementation":"","SwarmSource":"ipfs://6156b7e9eb47cc8cb277a116387cba35ff8d5146998c1ad11b121e8fce2f96f6"}]}