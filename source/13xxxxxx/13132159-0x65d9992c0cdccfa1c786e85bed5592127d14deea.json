{"status":"1","message":"OK","result":[{"SourceCode":"// SPDX-License-Identifier: UNLICENSED\r\npragma solidity 0.8.0;\r\n\r\ncontract TokenBase {\r\n\t/* Variables */\r\n\tuint256 private _totalSupply;\r\n\tstring  private _name;\r\n\tstring  private _symbol;\r\n\taddress private _owner;\r\n\tbool    private _paused;\r\n\tuint8   private _decimals;\r\n\tbool    private _initialized;\r\n\tmapping (address => uint256)                      private _balances;\r\n\tmapping (address => mapping (address => uint256)) private _allowances;\r\n\r\n\t/* Modifiers */\r\n\tmodifier onlyOwner() {\r\n\t\trequire( _owner == msg.sender, \"Caller is not the owner\" );\r\n\t\t_;\r\n\t}\r\n\r\n\tmodifier whenNotPaused() {\r\n\t\trequire( ! _paused, \"Paused\" );\r\n\t\t_;\r\n\t}\r\n\r\n\tmodifier whenPaused() {\r\n\t\trequire( _paused, \"Not paused\" );\r\n\t\t_;\r\n\t}\r\n\r\n\t/* Externals */\r\n\tfunction initialize(address owner_, uint8 decimals_, string memory name_, string memory symbol_) public returns (bool) {\r\n\t\trequire( ! _initialized, \"Already initialized\" );\r\n\t\trequire( owner_ != address(0), \"New owner has zero address\" );\r\n\t\t_initialized = true;\r\n\t\t_owner       = owner_;\r\n\t\t_decimals    = decimals_;\r\n\t\t_name        = name_;\r\n\t\t_symbol      = symbol_;\r\n\t\temit Transfer(address(this), address(this), 0);\r\n\t\temit OwnershipTransferred(address(0), owner_);\r\n\t\treturn true;\r\n\t}\r\n\r\n\tfunction transfer(address recipient_, uint256 amount_) external returns (bool) {\r\n\t\t_transfer(msg.sender, recipient_, amount_);\r\n\t\treturn true;\r\n\t}\r\n\r\n\tfunction transferFrom(address sender_, address recipient_, uint256 amount_) external returns (bool) {\r\n\t\t_transfer(sender_, recipient_, amount_);\r\n\t\tuint256 currentAllowance = _allowances[sender_][msg.sender];\r\n\t\trequire( currentAllowance >= amount_, \"Transfer amount exceeds allowance\" );\r\n\t\tunchecked {\r\n\t\t\t_approve(sender_, msg.sender, currentAllowance - amount_);\r\n\t\t}\r\n\t\treturn true;\r\n\t}\r\n\r\n\tfunction approve(address spender_, uint256 amount_) external returns (bool) {\r\n\t\t_approve(msg.sender, spender_, amount_);\r\n\t\treturn true;\r\n\t}\r\n\r\n\tfunction increaseAllowance(address spender_, uint256 addedValue_) external returns (bool) {\r\n\t\t_approve(msg.sender, spender_, _allowances[msg.sender][spender_] + addedValue_);\r\n\t\treturn true;\r\n\t}\r\n\r\n\tfunction decreaseAllowance(address spender_, uint256 subtractedValue_) external returns (bool) {\r\n\t\tuint256 currentAllowance = _allowances[msg.sender][spender_];\r\n\t\trequire( currentAllowance >= subtractedValue_, \"Decreased allowance below zero\" );\r\n\t\tunchecked {\r\n\t\t\t_approve(msg.sender, spender_, currentAllowance - subtractedValue_);\r\n\t\t}\r\n\t\treturn true;\r\n\t}\r\n\r\n\tfunction pause() external onlyOwner {\r\n\t\t_pause();\r\n\t}\r\n\r\n\tfunction unpause() external onlyOwner {\r\n\t\t_unpause();\r\n\t}\r\n\r\n\tfunction transferOwnership(address newOwner_) external onlyOwner {\r\n\t\trequire( newOwner_ != address(0), \"New owner has zero address\" );\r\n\t\temit OwnershipTransferred(_owner, newOwner_);\r\n\t\t_owner = newOwner_;\r\n\t}\r\n\r\n\t/* Constants */\r\n\tfunction name() external view returns (string memory) {\r\n\t\treturn _name;\r\n\t}\r\n\r\n\tfunction symbol() external view returns (string memory) {\r\n\t\treturn _symbol;\r\n\t}\r\n\r\n\tfunction decimals() external view returns (uint8) {\r\n\t\treturn _decimals;\r\n\t}\r\n\r\n\tfunction totalSupply() external view returns (uint256) {\r\n\t\treturn _totalSupply;\r\n\t}\r\n\r\n\tfunction balanceOf(address account_) external view returns (uint256) {\r\n\t\treturn _balances[account_];\r\n\t}\r\n\r\n\tfunction allowance(address owner_, address spender_) external view returns (uint256) {\r\n\t\treturn _allowances[owner_][spender_];\r\n\t}\r\n\r\n\tfunction paused() external view returns (bool) {\r\n\t\treturn _paused;\r\n\t}\r\n\r\n\tfunction owner() external view returns (address) {\r\n\t\treturn _owner;\r\n\t}\r\n\r\n\tfunction initialized() external view returns (bool) {\r\n\t\treturn _initialized;\r\n\t}\r\n\r\n\t/* Internals */\r\n\tfunction _transfer(address sender_, address recipient_, uint256 amount_) internal whenNotPaused {\r\n\t\trequire( sender_ != address(0), \"Transfer from the zero address\" );\r\n\t\trequire( recipient_ != address(0), \"Transfer to the zero address\" );\r\n\t\trequire( sender_ != recipient_, \"Transfer to himself\" );\r\n\t\tuint256 senderBalance = _balances[sender_];\r\n\t\trequire( senderBalance >= amount_, \"Transfer amount exceeds balance\" );\r\n\t\tunchecked {\r\n\t\t\t_balances[sender_] = senderBalance - amount_;\r\n\t\t}\r\n\t\t_balances[recipient_] += amount_;\r\n\t\temit Transfer(sender_, recipient_, amount_);\r\n\t}\r\n\r\n\tfunction _mint(address account_, uint256 amount_) internal whenNotPaused {\r\n\t\trequire( account_ != address(0), \"Mint to the zero address\" );\r\n\t\t_totalSupply += amount_;\r\n\t\t_balances[account_] += amount_;\r\n\t\temit Transfer(address(0), account_, amount_);\r\n\t}\r\n\r\n\tfunction _burn(address account_, uint256 amount_) internal whenNotPaused {\r\n\t\trequire( account_ != address(0), \"Burn from the zero address\" );\r\n\t\tuint256 accountBalance = _balances[account_];\r\n\t\trequire( accountBalance >= amount_, \"Burn amount exceeds balance\" );\r\n\t\tunchecked {\r\n\t\t\t_balances[account_] = accountBalance - amount_;\r\n\t\t}\r\n\t\t_totalSupply -= amount_;\r\n\t\temit Transfer(account_, address(0), amount_);\r\n\t}\r\n\r\n\tfunction _approve(address owner_, address spender_, uint256 amount_) internal whenNotPaused {\r\n\t\trequire( owner_ != address(0), \"Approve from the zero address\" );\r\n\t\trequire( spender_ != address(0), \"Approve to the zero address\" );\r\n\t\t_allowances[owner_][spender_] = amount_;\r\n\t\temit Approval(owner_, spender_, amount_);\r\n\t}\r\n\r\n\tfunction _pause() internal whenNotPaused {\r\n\t\t_paused = true;\r\n\t\temit Paused();\r\n\t}\r\n\r\n\tfunction _unpause() internal whenPaused {\r\n\t\t_paused = false;\r\n\t\temit Unpaused();\r\n\t}\r\n\r\n\t/* Events */\r\n\tevent Transfer(address indexed from, address indexed to, uint256 value);\r\n\tevent Approval(address indexed owner, address indexed spender, uint256 value);\r\n\tevent OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\r\n\tevent Paused();\r\n\tevent Unpaused();\r\n}\r\n\r\ncontract WrappedHydra is TokenBase {\r\n\t/* Variables */\r\n\taddress internal _signer;\r\n\tmapping (bytes32 => bool) internal _usedMessages;\r\n\r\n\t/* Externals */\r\n\tfunction initialize(address owner_, address signer_) external returns (bool) {\r\n\t\trequire( signer_ != address(0), \"Signer has zero address\" );\r\n\t\t_signer = signer_;\r\n\t\treturn super.initialize(owner_, 8, \"Wrapped Hydra\", \"WHYD\");\r\n\t}\r\n\r\n\tfunction mintWrappedHydra(bytes32 hydTxId_, uint256 amount_, uint8 v_, bytes32 r_, bytes32 s_) external {\r\n\t\tcheckSignature(\r\n\t\t\tkeccak256(abi.encodePacked( msg.sender, hydTxId_, amount_ )),\r\n\t\t\tv_,\r\n\t\t\tr_,\r\n\t\t\ts_\r\n\t\t);\r\n\t\t_mint(msg.sender, amount_);\r\n\t\temit BridgedIn(msg.sender, amount_);\r\n\t}\r\n\r\n\tfunction burnWrappedHydra(bytes32 hydAddress_, bytes32 secret_, uint256 amount_, uint8 v_, bytes32 r_, bytes32 s_) external {\r\n\t\tcheckSignature(\r\n\t\t\tkeccak256(abi.encodePacked( hydAddress_, secret_, amount_ )),\r\n\t\t\tv_,\r\n\t\t\tr_,\r\n\t\t\ts_\r\n\t\t);\r\n\t\t_burn(msg.sender, amount_);\r\n\t\temit BridgedOut(msg.sender, amount_);\r\n\t}\r\n\r\n\tfunction changeSigner(address newSigner_) external onlyOwner {\r\n\t\trequire( newSigner_ != address(0), \"Signer has zero address\" );\r\n\t\t_signer = newSigner_;\r\n\t\temit NewSigner(_signer);\r\n\t}\r\n\r\n\t/* Constants */\r\n\tfunction signer() public view returns (address) {\r\n\t\treturn _signer;\r\n\t}\r\n\r\n\t/* Internals */\r\n\tfunction checkSignature(bytes32 messageHash_, uint8 v_, bytes32 r_, bytes32 s_) internal {\r\n\t\trequire( uint256(s_)<=0x7FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF5D576E7357A4501DDFE92F46681B20A0, \"Invalid signature s value\" );\r\n\t\trequire( v_ == 27 || v_ == 28, \"Invalid signature v value\" );\r\n\t\trequire( ! _usedMessages[messageHash_], \"Signature already used\" );\r\n\t\taddress signerAddress = ecrecover(messageHash_, v_, r_, s_);\r\n\t\trequire( signerAddress == _signer, \"Signature verification failed\" );\r\n\t\t_usedMessages[messageHash_] = true;\r\n\t}\r\n\r\n\t/* Events */\r\n\tevent BridgedIn(address indexed addr, uint256 indexed value);\r\n\tevent BridgedOut(address indexed addr, uint256 indexed value);\r\n\tevent NewSigner(address indexed addr);\r\n}","ABI":"[{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Approval\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"addr\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"BridgedIn\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"addr\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"BridgedOut\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"addr\",\"type\":\"address\"}],\"name\":\"NewSigner\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[],\"name\":\"Paused\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Transfer\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[],\"name\":\"Unpaused\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner_\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"spender_\",\"type\":\"address\"}],\"name\":\"allowance\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"spender_\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount_\",\"type\":\"uint256\"}],\"name\":\"approve\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account_\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"hydAddress_\",\"type\":\"bytes32\"},{\"internalType\":\"bytes32\",\"name\":\"secret_\",\"type\":\"bytes32\"},{\"internalType\":\"uint256\",\"name\":\"amount_\",\"type\":\"uint256\"},{\"internalType\":\"uint8\",\"name\":\"v_\",\"type\":\"uint8\"},{\"internalType\":\"bytes32\",\"name\":\"r_\",\"type\":\"bytes32\"},{\"internalType\":\"bytes32\",\"name\":\"s_\",\"type\":\"bytes32\"}],\"name\":\"burnWrappedHydra\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newSigner_\",\"type\":\"address\"}],\"name\":\"changeSigner\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"decimals\",\"outputs\":[{\"internalType\":\"uint8\",\"name\":\"\",\"type\":\"uint8\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"spender_\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"subtractedValue_\",\"type\":\"uint256\"}],\"name\":\"decreaseAllowance\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"spender_\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"addedValue_\",\"type\":\"uint256\"}],\"name\":\"increaseAllowance\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner_\",\"type\":\"address\"},{\"internalType\":\"uint8\",\"name\":\"decimals_\",\"type\":\"uint8\"},{\"internalType\":\"string\",\"name\":\"name_\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"symbol_\",\"type\":\"string\"}],\"name\":\"initialize\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner_\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"signer_\",\"type\":\"address\"}],\"name\":\"initialize\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"initialized\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"hydTxId_\",\"type\":\"bytes32\"},{\"internalType\":\"uint256\",\"name\":\"amount_\",\"type\":\"uint256\"},{\"internalType\":\"uint8\",\"name\":\"v_\",\"type\":\"uint8\"},{\"internalType\":\"bytes32\",\"name\":\"r_\",\"type\":\"bytes32\"},{\"internalType\":\"bytes32\",\"name\":\"s_\",\"type\":\"bytes32\"}],\"name\":\"mintWrappedHydra\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"name\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"pause\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"paused\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"signer\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"symbol\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalSupply\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"recipient_\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount_\",\"type\":\"uint256\"}],\"name\":\"transfer\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"sender_\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"recipient_\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount_\",\"type\":\"uint256\"}],\"name\":\"transferFrom\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner_\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"unpause\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}]","ContractName":"WrappedHydra","CompilerVersion":"v0.8.0+commit.c7dfd78e","OptimizationUsed":"1","Runs":"1","ConstructorArguments":"","EVMVersion":"byzantium","Library":"","LicenseType":"GNU GPLv3","Proxy":"0","Implementation":"","SwarmSource":"ipfs://0a09f2ece725fb741f35265059d34a83d4e09436391018bc080b2db388361d81"}]}