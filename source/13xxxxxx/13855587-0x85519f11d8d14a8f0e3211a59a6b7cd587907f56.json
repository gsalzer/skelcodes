{"status":"1","message":"OK","result":[{"SourceCode":"{{\r\n  \"language\": \"Solidity\",\r\n  \"sources\": {\r\n    \"/contracts/pirate/Traits.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT LICENSE\\r\\n\\r\\npragma solidity ^0.8.0;\\r\\n\\r\\nimport \\\"@openzeppelin/contracts/utils/Strings.sol\\\";\\r\\nimport \\\"./interfaces/ITraits.sol\\\";\\r\\nimport \\\"./interfaces/IPnG.sol\\\";\\r\\n\\r\\nimport \\\"./utils/Accessable.sol\\\";\\r\\n\\r\\ncontract Traits is Accessable, ITraits {\\r\\n    using Strings for uint256;\\r\\n\\r\\n    string public description;\\r\\n    IPnG public nftContract;\\r\\n\\r\\n    struct Trait {\\r\\n        string name;\\r\\n        string png;\\r\\n    }\\r\\n\\r\\n    // mapping from trait type (index) to its name\\r\\n    string[15] private _traitTypes = [\\r\\n        // Galleons\\r\\n        \\\"base\\\",\\r\\n        \\\"deck\\\",\\r\\n        \\\"sails\\\",\\r\\n        \\\"crows nest\\\",\\r\\n        \\\"decor\\\",\\r\\n        \\\"flags\\\",\\r\\n        \\\"bowsprit\\\",\\r\\n        // Pirates\\r\\n        \\\"skin\\\",\\r\\n        \\\"clothes\\\",\\r\\n        \\\"hair\\\",\\r\\n        \\\"earrings\\\",\\r\\n        \\\"mouth\\\",\\r\\n        \\\"eyes\\\",\\r\\n        \\\"weapon\\\",\\r\\n        \\\"hat\\\"\\r\\n    ];\\r\\n    // storage of each traits name and base64 PNG data\\r\\n    mapping(uint8 => mapping(uint8 => Trait)) public traitData;\\r\\n    // mapping from rankIndex to its score\\r\\n    string[4] private _ranks = [\\r\\n        \\\"5\\\",\\r\\n        \\\"6\\\",\\r\\n        \\\"7\\\",\\r\\n        \\\"8\\\"\\r\\n    ];\\r\\n\\r\\n\\r\\n    constructor() {\\r\\n        description = \\\"With the sweet $CACAO becoming the most precious commodity, Galleons and Pirates engage in a risk-it-all battle in the Ethereum waters to get the biggest share. A play-to-earn game fully 100% on-chain, with commit-reveal minting and flashbots protection.\\\";\\r\\n    }\\r\\n\\r\\n    /** ADMIN */\\r\\n\\r\\n    function _setNftContract(address _nftContract) external onlyAdmin {\\r\\n        nftContract = IPnG(_nftContract);\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * administrative to upload the names and images associated with each trait\\r\\n     * @param traitType the trait type to upload the traits for (see traitTypes for a mapping)\\r\\n     * @param traits the names and base64 encoded PNGs for each trait\\r\\n     */\\r\\n    function _uploadTraits(uint8 traitType, uint8[] calldata traitIds, Trait[] calldata traits) external onlyAdmin {\\r\\n        require(traitIds.length == traits.length, \\\"Mismatched inputs\\\");\\r\\n        for (uint i = 0; i < traits.length; i++) {\\r\\n            traitData[traitType][traitIds[i]] = Trait(\\r\\n                traits[i].name,\\r\\n                traits[i].png\\r\\n            );\\r\\n        }\\r\\n    }\\r\\n\\r\\n    function _setDescription(string memory _description) external onlyAdmin {\\r\\n        description = _description;\\r\\n    }\\r\\n\\r\\n    function _withdraw() external onlyTokenClaimer {\\r\\n        payable(_msgSender()).transfer(address(this).balance);\\r\\n    }\\r\\n\\r\\n\\r\\n    /** RENDER */\\r\\n\\r\\n    /**\\r\\n     * generates an <image> element using base64 encoded PNGs\\r\\n     * @param trait the trait storing the PNG data\\r\\n     * @return the <image> element\\r\\n     */\\r\\n    function drawTrait(Trait memory trait) internal pure returns (string memory) {\\r\\n        return string(abi.encodePacked(\\r\\n            '<image x=\\\"4\\\" y=\\\"4\\\" width=\\\"64\\\" height=\\\"64\\\" image-rendering=\\\"pixelated\\\" preserveAspectRatio=\\\"xMidYMid\\\" xlink:href=\\\"data:image/png;base64,',\\r\\n            trait.png,\\r\\n            '\\\"/>'\\r\\n        ));\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * generates an entire SVG by composing multiple <image> elements of PNGs\\r\\n     * @param tokenId the ID of the token to generate an SVG for\\r\\n     * @return a valid SVG of the Galleon or Pirate\\r\\n     */\\r\\n    function drawSVG(uint256 tokenId) internal view returns (string memory) {\\r\\n        IPnG.GalleonPirate memory s = nftContract.getTokenTraits(tokenId);\\r\\n        string memory svgString;\\r\\n\\r\\n        if (s.isGalleon) {\\r\\n            svgString = string(abi.encodePacked(\\r\\n                drawTrait(traitData[0][s.base]),\\r\\n                drawTrait(traitData[1][s.deck]),\\r\\n                drawTrait(traitData[2][s.sails]),\\r\\n                drawTrait(traitData[3][s.crowsNest]),\\r\\n                drawTrait(traitData[4][s.decor]),\\r\\n                drawTrait(traitData[5][s.flags]),\\r\\n                drawTrait(traitData[6][s.bowsprit])\\r\\n            ));\\r\\n        }\\r\\n        else {\\r\\n            svgString = string(abi.encodePacked(\\r\\n                drawTrait(traitData[7][s.skin]),\\r\\n                drawTrait(traitData[8][s.clothes]),\\r\\n                drawTrait(traitData[9][s.hair]),\\r\\n                drawTrait(traitData[10][s.earrings]),\\r\\n                drawTrait(traitData[11][s.mouth]),\\r\\n                drawTrait(traitData[12][s.eyes]),\\r\\n                drawTrait(traitData[13][s.weapon]),\\r\\n                s.hat > 0 ? drawTrait(traitData[14][s.hat]) : ''\\r\\n            ));\\r\\n        }\\r\\n\\r\\n        return string(abi.encodePacked(\\r\\n            '<svg id=\\\"GalletonPirateNFT\\\" width=\\\"100%\\\" height=\\\"100%\\\" version=\\\"1.1\\\" viewBox=\\\"0 0 72 72\\\" xmlns=\\\"http://www.w3.org/2000/svg\\\" xmlns:xlink=\\\"http://www.w3.org/1999/xlink\\\">',\\r\\n            svgString,\\r\\n            \\\"</svg>\\\"\\r\\n        ));\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * generates an attribute for the attributes array in the ERC721 metadata standard\\r\\n     * @param traitType the trait type to reference as the metadata key\\r\\n     * @param value the token's trait associated with the key\\r\\n     * @return a JSON dictionary for the single attribute\\r\\n     */\\r\\n    function attributeForTypeAndValue(string memory traitType, string memory value) internal pure returns (string memory) {\\r\\n        return string(abi.encodePacked(\\r\\n            '{\\\"trait_type\\\":\\\"',\\r\\n            traitType,\\r\\n            '\\\",\\\"value\\\":\\\"',\\r\\n            value,\\r\\n            '\\\"}'\\r\\n        ));\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * generates an array composed of all the individual traits and values\\r\\n     * @param tokenId the ID of the token to compose the metadata for\\r\\n     * @return a JSON array of all of the attributes for given token ID\\r\\n     */\\r\\n    function compileAttributes(uint256 tokenId) internal view returns (string memory) {\\r\\n        IPnG.GalleonPirate memory s = nftContract.getTokenTraits(tokenId);\\r\\n        string memory traits;\\r\\n        if (s.isGalleon) {\\r\\n            traits = string(abi.encodePacked(\\r\\n                attributeForTypeAndValue(_traitTypes[0], traitData[0][s.base].name),',',\\r\\n                attributeForTypeAndValue(_traitTypes[1], traitData[1][s.deck].name),',',\\r\\n                attributeForTypeAndValue(_traitTypes[2], traitData[2][s.sails].name),',',\\r\\n                attributeForTypeAndValue(_traitTypes[3], traitData[3][s.crowsNest].name),',',\\r\\n                attributeForTypeAndValue(_traitTypes[4], traitData[4][s.decor].name),',',\\r\\n                attributeForTypeAndValue(_traitTypes[5], traitData[5][s.flags].name),',',\\r\\n                attributeForTypeAndValue(_traitTypes[6], traitData[6][s.bowsprit].name)\\r\\n            ));\\r\\n        } else {\\r\\n            traits = string(abi.encodePacked(\\r\\n                attributeForTypeAndValue(_traitTypes[7], traitData[7][s.skin].name),',',\\r\\n                attributeForTypeAndValue(_traitTypes[8], traitData[8][s.clothes].name),',',\\r\\n                attributeForTypeAndValue(_traitTypes[9], traitData[9][s.hair].name),',',\\r\\n                attributeForTypeAndValue(_traitTypes[10], traitData[10][s.earrings].name),',',\\r\\n                attributeForTypeAndValue(_traitTypes[11], traitData[11][s.mouth].name),',',\\r\\n                attributeForTypeAndValue(_traitTypes[12], traitData[12][s.eyes].name),',',\\r\\n                attributeForTypeAndValue(_traitTypes[13], traitData[13][s.weapon].name),',',\\r\\n                attributeForTypeAndValue(_traitTypes[14], s.hat > 0 ? traitData[14][s.hat].name : 'None'), ',',\\r\\n                attributeForTypeAndValue(\\\"rank\\\", _ranks[s.alphaIndex])\\r\\n            ));\\r\\n        }\\r\\n        \\r\\n        return string(abi.encodePacked(\\r\\n            '[',\\r\\n            traits,\\r\\n            ',{\\\"trait_type\\\":\\\"generation\\\",\\\"value\\\":',\\r\\n            tokenId <= nftContract.getPaidTokens() ? '\\\"Gen 0\\\"' : '\\\"Gen 1\\\"',\\r\\n            '},{\\\"trait_type\\\":\\\"type\\\",\\\"value\\\":',\\r\\n            s.isGalleon ? '\\\"Galleon\\\"' : '\\\"Pirate\\\"',\\r\\n            '}]'\\r\\n        ));\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * generates a base64 encoded metadata response without referencing off-chain content\\r\\n     * @param tokenId the ID of the token to generate the metadata for\\r\\n     * @return a base64 encoded JSON dictionary of the token's metadata and SVG\\r\\n     */\\r\\n    function tokenURI(uint256 tokenId) public view override returns (string memory) {\\r\\n        require(_msgSender() == address(nftContract) || isAdmin(_msgSender()), \\\"???\\\");\\r\\n        IPnG.GalleonPirate memory s = nftContract.getTokenTraits(tokenId);\\r\\n\\r\\n        string memory metadata = string(abi.encodePacked(\\r\\n            '{\\\"name\\\": \\\"',\\r\\n            s.isGalleon ? 'Galleon #' : 'Pirate #',\\r\\n            tokenId.toString(),\\r\\n            '\\\", \\\"description\\\": \\\"',\\r\\n            description, \\r\\n            '\\\", \\\"image\\\": \\\"data:image/svg+xml;base64,',\\r\\n            base64(bytes(drawSVG(tokenId))),\\r\\n            '\\\", \\\"attributes\\\":',\\r\\n            compileAttributes(tokenId),\\r\\n            \\\"}\\\"\\r\\n        ));\\r\\n\\r\\n        return string(abi.encodePacked(\\r\\n            \\\"data:application/json;base64,\\\",\\r\\n            base64(bytes(metadata))\\r\\n        ));\\r\\n    }\\r\\n\\r\\n    /** BASE 64 - Written by Brech Devos */\\r\\n    \\r\\n    string internal constant TABLE = 'ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/';\\r\\n\\r\\n    function base64(bytes memory data) internal pure returns (string memory) {\\r\\n        if (data.length == 0) return '';\\r\\n        \\r\\n        // load the table into memory\\r\\n        string memory table = TABLE;\\r\\n\\r\\n        // multiply by 4/3 rounded up\\r\\n        uint256 encodedLen = 4 * ((data.length + 2) / 3);\\r\\n\\r\\n        // add some extra buffer at the end required for the writing\\r\\n        string memory result = new string(encodedLen + 32);\\r\\n\\r\\n        assembly {\\r\\n            // set the actual output length\\r\\n            mstore(result, encodedLen)\\r\\n            \\r\\n            // prepare the lookup table\\r\\n            let tablePtr := add(table, 1)\\r\\n            \\r\\n            // input ptr\\r\\n            let dataPtr := data\\r\\n            let endPtr := add(dataPtr, mload(data))\\r\\n            \\r\\n            // result ptr, jump over length\\r\\n            let resultPtr := add(result, 32)\\r\\n            \\r\\n            // run over the input, 3 bytes at a time\\r\\n            for {} lt(dataPtr, endPtr) {}\\r\\n            {\\r\\n                dataPtr := add(dataPtr, 3)\\r\\n                    \\r\\n                // read 3 bytes\\r\\n                let input := mload(dataPtr)\\r\\n                    \\r\\n                // write 4 characters\\r\\n                mstore(resultPtr, shl(248, mload(add(tablePtr, and(shr(18, input), 0x3F)))))\\r\\n                resultPtr := add(resultPtr, 1)\\r\\n                mstore(resultPtr, shl(248, mload(add(tablePtr, and(shr(12, input), 0x3F)))))\\r\\n                resultPtr := add(resultPtr, 1)\\r\\n                mstore(resultPtr, shl(248, mload(add(tablePtr, and(shr( 6, input), 0x3F)))))\\r\\n                resultPtr := add(resultPtr, 1)\\r\\n                mstore(resultPtr, shl(248, mload(add(tablePtr, and(                input,    0x3F)))))\\r\\n                resultPtr := add(resultPtr, 1)\\r\\n            }\\r\\n            \\r\\n            // padding with '='\\r\\n            switch mod(mload(data), 3)\\r\\n            case 1 { mstore(sub(resultPtr, 2), shl(240, 0x3d3d)) }\\r\\n            case 2 { mstore(sub(resultPtr, 1), shl(248, 0x3d)) }\\r\\n        }\\r\\n        \\r\\n        return result;\\r\\n    }\\r\\n}\"\r\n    },\r\n    \"/contracts/pirate/utils/Accessable.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT LICENSE\\r\\n\\r\\npragma solidity ^0.8.0;\\r\\n\\r\\nimport \\\"@openzeppelin/contracts/utils/Context.sol\\\";\\r\\n\\r\\n\\r\\ncontract Owned is Context {\\r\\n    address private _contractOwner;\\r\\n\\r\\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\\r\\n\\r\\n    constructor() { \\r\\n        _contractOwner = payable(_msgSender()); \\r\\n    }\\r\\n\\r\\n    function owner() public view virtual returns(address) {\\r\\n        return _contractOwner;\\r\\n    }\\r\\n\\r\\n    function _transferOwnership(address newOwner) external virtual onlyOwner {\\r\\n        require(newOwner != address(0), \\\"Owned: Address can not be 0x0\\\");\\r\\n        __transferOwnership(newOwner);\\r\\n    }\\r\\n\\r\\n\\r\\n    function _renounceOwnership() external virtual onlyOwner {\\r\\n        __transferOwnership(address(0));\\r\\n    }\\r\\n\\r\\n    function __transferOwnership(address _to) internal {\\r\\n        emit OwnershipTransferred(owner(), _to);\\r\\n        _contractOwner = _to;\\r\\n    }\\r\\n\\r\\n\\r\\n    modifier onlyOwner() {\\r\\n        require(_msgSender() == _contractOwner, \\\"Owned: Only owner can operate\\\");\\r\\n        _;\\r\\n    }\\r\\n}\\r\\n\\r\\n\\r\\n\\r\\ncontract Accessable is Owned {\\r\\n    mapping(address => bool) private _admins;\\r\\n    mapping(address => bool) private _tokenClaimers;\\r\\n\\r\\n    constructor() {\\r\\n        _admins[_msgSender()] = true;\\r\\n        _tokenClaimers[_msgSender()] = true;\\r\\n    }\\r\\n\\r\\n    function isAdmin(address user) public view returns(bool) {\\r\\n        return _admins[user];\\r\\n    }\\r\\n\\r\\n    function isTokenClaimer(address user) public view returns(bool) {\\r\\n        return _tokenClaimers[user];\\r\\n    }\\r\\n\\r\\n\\r\\n    function _setAdmin(address _user, bool _isAdmin) external onlyOwner {\\r\\n        _admins[_user] = _isAdmin;\\r\\n        require( _admins[owner()], \\\"Accessable: Contract owner must be an admin\\\" );\\r\\n    }\\r\\n\\r\\n    function _setTokenClaimer(address _user, bool _isTokenCalimer) external onlyOwner {\\r\\n        _tokenClaimers[_user] = _isTokenCalimer;\\r\\n        require( _tokenClaimers[owner()], \\\"Accessable: Contract owner must be an token claimer\\\" );\\r\\n    }\\r\\n\\r\\n\\r\\n    modifier onlyAdmin() {\\r\\n        require(_admins[_msgSender()], \\\"Accessable: Only admin can operate\\\");\\r\\n        _;\\r\\n    }\\r\\n\\r\\n    modifier onlyTokenClaimer() {\\r\\n        require(_tokenClaimers[_msgSender()], \\\"Accessable: Only Token Claimer can operate\\\");\\r\\n        _;\\r\\n    }\\r\\n}\"\r\n    },\r\n    \"/contracts/pirate/interfaces/ITraits.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT LICENSE \\r\\n\\r\\npragma solidity ^0.8.0;\\r\\n\\r\\ninterface ITraits {\\r\\n    function tokenURI(uint256 tokenId) external view returns (string memory);\\r\\n}\"\r\n    },\r\n    \"/contracts/pirate/interfaces/IPnG.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT LICENSE\\r\\n\\r\\npragma solidity ^0.8.0;\\r\\n\\r\\nimport \\\"@openzeppelin/contracts/token/ERC721/IERC721.sol\\\";\\r\\n\\r\\ninterface IPnG is IERC721 {\\r\\n\\r\\n    struct GalleonPirate {\\r\\n        bool isGalleon;\\r\\n\\r\\n        // Galleon traits\\r\\n        uint8 base;\\r\\n        uint8 deck;\\r\\n        uint8 sails;\\r\\n        uint8 crowsNest;\\r\\n        uint8 decor;\\r\\n        uint8 flags;\\r\\n        uint8 bowsprit;\\r\\n\\r\\n        // Pirate traits\\r\\n        uint8 skin;\\r\\n        uint8 clothes;\\r\\n        uint8 hair;\\r\\n        uint8 earrings;\\r\\n        uint8 mouth;\\r\\n        uint8 eyes;\\r\\n        uint8 weapon;\\r\\n        uint8 hat;\\r\\n        uint8 alphaIndex;\\r\\n    }\\r\\n\\r\\n\\r\\n    function updateOriginAccess(uint16[] memory tokenIds) external;\\r\\n\\r\\n    function totalSupply() external view returns(uint256);\\r\\n\\r\\n    function mint(address recipient, uint256 seed) external;\\r\\n    function burn(uint256 tokenId) external;\\r\\n    function minted() external view returns (uint16);\\r\\n\\r\\n    function getMaxTokens() external view returns (uint256);\\r\\n    function getPaidTokens() external view returns (uint256);\\r\\n    function getTokenTraits(uint256 tokenId) external view returns (GalleonPirate memory);\\r\\n    function getTokenWriteBlock(uint256 tokenId) external view returns(uint64);\\r\\n    function isGalleon(uint256 tokenId) external view returns(bool);\\r\\n}\"\r\n    },\r\n    \"@openzeppelin/contracts/utils/introspection/IERC165.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.0 (utils/introspection/IERC165.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC165 standard, as defined in the\\n * https://eips.ethereum.org/EIPS/eip-165[EIP].\\n *\\n * Implementers can declare support of contract interfaces, which can then be\\n * queried by others ({ERC165Checker}).\\n *\\n * For an implementation, see {ERC165}.\\n */\\ninterface IERC165 {\\n    /**\\n     * @dev Returns true if this contract implements the interface defined by\\n     * `interfaceId`. See the corresponding\\n     * https://eips.ethereum.org/EIPS/eip-165#how-interfaces-are-identified[EIP section]\\n     * to learn more about how these ids are created.\\n     *\\n     * This function call must use less than 30 000 gas.\\n     */\\n    function supportsInterface(bytes4 interfaceId) external view returns (bool);\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/utils/Strings.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.0 (utils/Strings.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev String operations.\\n */\\nlibrary Strings {\\n    bytes16 private constant _HEX_SYMBOLS = \\\"0123456789abcdef\\\";\\n\\n    /**\\n     * @dev Converts a `uint256` to its ASCII `string` decimal representation.\\n     */\\n    function toString(uint256 value) internal pure returns (string memory) {\\n        // Inspired by OraclizeAPI's implementation - MIT licence\\n        // https://github.com/oraclize/ethereum-api/blob/b42146b063c7d6ee1358846c198246239e9360e8/oraclizeAPI_0.4.25.sol\\n\\n        if (value == 0) {\\n            return \\\"0\\\";\\n        }\\n        uint256 temp = value;\\n        uint256 digits;\\n        while (temp != 0) {\\n            digits++;\\n            temp /= 10;\\n        }\\n        bytes memory buffer = new bytes(digits);\\n        while (value != 0) {\\n            digits -= 1;\\n            buffer[digits] = bytes1(uint8(48 + uint256(value % 10)));\\n            value /= 10;\\n        }\\n        return string(buffer);\\n    }\\n\\n    /**\\n     * @dev Converts a `uint256` to its ASCII `string` hexadecimal representation.\\n     */\\n    function toHexString(uint256 value) internal pure returns (string memory) {\\n        if (value == 0) {\\n            return \\\"0x00\\\";\\n        }\\n        uint256 temp = value;\\n        uint256 length = 0;\\n        while (temp != 0) {\\n            length++;\\n            temp >>= 8;\\n        }\\n        return toHexString(value, length);\\n    }\\n\\n    /**\\n     * @dev Converts a `uint256` to its ASCII `string` hexadecimal representation with fixed length.\\n     */\\n    function toHexString(uint256 value, uint256 length) internal pure returns (string memory) {\\n        bytes memory buffer = new bytes(2 * length + 2);\\n        buffer[0] = \\\"0\\\";\\n        buffer[1] = \\\"x\\\";\\n        for (uint256 i = 2 * length + 1; i > 1; --i) {\\n            buffer[i] = _HEX_SYMBOLS[value & 0xf];\\n            value >>= 4;\\n        }\\n        require(value == 0, \\\"Strings: hex length insufficient\\\");\\n        return string(buffer);\\n    }\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/utils/Context.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.0 (utils/Context.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Provides information about the current execution context, including the\\n * sender of the transaction and its data. While these are generally available\\n * via msg.sender and msg.data, they should not be accessed in such a direct\\n * manner, since when dealing with meta-transactions the account sending and\\n * paying for execution may not be the actual sender (as far as an application\\n * is concerned).\\n *\\n * This contract is only required for intermediate, library-like contracts.\\n */\\nabstract contract Context {\\n    function _msgSender() internal view virtual returns (address) {\\n        return msg.sender;\\n    }\\n\\n    function _msgData() internal view virtual returns (bytes calldata) {\\n        return msg.data;\\n    }\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/token/ERC721/IERC721.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.0 (token/ERC721/IERC721.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../../utils/introspection/IERC165.sol\\\";\\n\\n/**\\n * @dev Required interface of an ERC721 compliant contract.\\n */\\ninterface IERC721 is IERC165 {\\n    /**\\n     * @dev Emitted when `tokenId` token is transferred from `from` to `to`.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 indexed tokenId);\\n\\n    /**\\n     * @dev Emitted when `owner` enables `approved` to manage the `tokenId` token.\\n     */\\n    event Approval(address indexed owner, address indexed approved, uint256 indexed tokenId);\\n\\n    /**\\n     * @dev Emitted when `owner` enables or disables (`approved`) `operator` to manage all of its assets.\\n     */\\n    event ApprovalForAll(address indexed owner, address indexed operator, bool approved);\\n\\n    /**\\n     * @dev Returns the number of tokens in ``owner``'s account.\\n     */\\n    function balanceOf(address owner) external view returns (uint256 balance);\\n\\n    /**\\n     * @dev Returns the owner of the `tokenId` token.\\n     *\\n     * Requirements:\\n     *\\n     * - `tokenId` must exist.\\n     */\\n    function ownerOf(uint256 tokenId) external view returns (address owner);\\n\\n    /**\\n     * @dev Safely transfers `tokenId` token from `from` to `to`, checking first that contract recipients\\n     * are aware of the ERC721 protocol to prevent tokens from being forever locked.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` cannot be the zero address.\\n     * - `to` cannot be the zero address.\\n     * - `tokenId` token must exist and be owned by `from`.\\n     * - If the caller is not `from`, it must be have been allowed to move this token by either {approve} or {setApprovalForAll}.\\n     * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function safeTransferFrom(\\n        address from,\\n        address to,\\n        uint256 tokenId\\n    ) external;\\n\\n    /**\\n     * @dev Transfers `tokenId` token from `from` to `to`.\\n     *\\n     * WARNING: Usage of this method is discouraged, use {safeTransferFrom} whenever possible.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` cannot be the zero address.\\n     * - `to` cannot be the zero address.\\n     * - `tokenId` token must be owned by `from`.\\n     * - If the caller is not `from`, it must be approved to move this token by either {approve} or {setApprovalForAll}.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(\\n        address from,\\n        address to,\\n        uint256 tokenId\\n    ) external;\\n\\n    /**\\n     * @dev Gives permission to `to` to transfer `tokenId` token to another account.\\n     * The approval is cleared when the token is transferred.\\n     *\\n     * Only a single account can be approved at a time, so approving the zero address clears previous approvals.\\n     *\\n     * Requirements:\\n     *\\n     * - The caller must own the token or be an approved operator.\\n     * - `tokenId` must exist.\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address to, uint256 tokenId) external;\\n\\n    /**\\n     * @dev Returns the account approved for `tokenId` token.\\n     *\\n     * Requirements:\\n     *\\n     * - `tokenId` must exist.\\n     */\\n    function getApproved(uint256 tokenId) external view returns (address operator);\\n\\n    /**\\n     * @dev Approve or remove `operator` as an operator for the caller.\\n     * Operators can call {transferFrom} or {safeTransferFrom} for any token owned by the caller.\\n     *\\n     * Requirements:\\n     *\\n     * - The `operator` cannot be the caller.\\n     *\\n     * Emits an {ApprovalForAll} event.\\n     */\\n    function setApprovalForAll(address operator, bool _approved) external;\\n\\n    /**\\n     * @dev Returns if the `operator` is allowed to manage all of the assets of `owner`.\\n     *\\n     * See {setApprovalForAll}\\n     */\\n    function isApprovedForAll(address owner, address operator) external view returns (bool);\\n\\n    /**\\n     * @dev Safely transfers `tokenId` token from `from` to `to`.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` cannot be the zero address.\\n     * - `to` cannot be the zero address.\\n     * - `tokenId` token must exist and be owned by `from`.\\n     * - If the caller is not `from`, it must be approved to move this token by either {approve} or {setApprovalForAll}.\\n     * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function safeTransferFrom(\\n        address from,\\n        address to,\\n        uint256 tokenId,\\n        bytes calldata data\\n    ) external;\\n}\\n\"\r\n    }\r\n  },\r\n  \"settings\": {\r\n    \"remappings\": [],\r\n    \"optimizer\": {\r\n      \"enabled\": true,\r\n      \"runs\": 200\r\n    },\r\n    \"evmVersion\": \"london\",\r\n    \"libraries\": {},\r\n    \"outputSelection\": {\r\n      \"*\": {\r\n        \"*\": [\r\n          \"evm.bytecode\",\r\n          \"evm.deployedBytecode\",\r\n          \"devdoc\",\r\n          \"userdoc\",\r\n          \"metadata\",\r\n          \"abi\"\r\n        ]\r\n      }\r\n    }\r\n  }\r\n}}","ABI":"[{\"inputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"_renounceOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_user\",\"type\":\"address\"},{\"internalType\":\"bool\",\"name\":\"_isAdmin\",\"type\":\"bool\"}],\"name\":\"_setAdmin\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"string\",\"name\":\"_description\",\"type\":\"string\"}],\"name\":\"_setDescription\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_nftContract\",\"type\":\"address\"}],\"name\":\"_setNftContract\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_user\",\"type\":\"address\"},{\"internalType\":\"bool\",\"name\":\"_isTokenCalimer\",\"type\":\"bool\"}],\"name\":\"_setTokenClaimer\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"_transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint8\",\"name\":\"traitType\",\"type\":\"uint8\"},{\"internalType\":\"uint8[]\",\"name\":\"traitIds\",\"type\":\"uint8[]\"},{\"components\":[{\"internalType\":\"string\",\"name\":\"name\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"png\",\"type\":\"string\"}],\"internalType\":\"struct Traits.Trait[]\",\"name\":\"traits\",\"type\":\"tuple[]\"}],\"name\":\"_uploadTraits\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"_withdraw\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"description\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"}],\"name\":\"isAdmin\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"}],\"name\":\"isTokenClaimer\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"nftContract\",\"outputs\":[{\"internalType\":\"contract IPnG\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"tokenURI\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint8\",\"name\":\"\",\"type\":\"uint8\"},{\"internalType\":\"uint8\",\"name\":\"\",\"type\":\"uint8\"}],\"name\":\"traitData\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"name\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"png\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"}]","ContractName":"Traits","CompilerVersion":"v0.8.10+commit.fc410830","OptimizationUsed":"1","Runs":"200","ConstructorArguments":"","EVMVersion":"Default","Library":"","LicenseType":"","Proxy":"0","Implementation":"","SwarmSource":""}]}