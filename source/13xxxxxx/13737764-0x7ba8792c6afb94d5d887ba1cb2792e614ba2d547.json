{"status":"1","message":"OK","result":[{"SourceCode":"{{\r\n  \"language\": \"Solidity\",\r\n  \"sources\": {\r\n    \"/contracts/FundamentaBridge.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: BSD-3-Clause\\npragma solidity >=0.8.9;\\n\\n// Author: Steve Medley\\n// https://github.com/Civitas-Fundamenta\\n// steve@fundamenta.network\\n\\nimport \\\"./include/SecureContract.sol\\\";\\nimport \\\"./include/TokenInterface.sol\\\";\\n\\nstruct TokenInfo {\\n    uint256 id;\\n    bool isWrappedToken;\\n    uint256 numSigners;\\n    bool canWithdraw;\\n    bool canDeposit;\\n    address token;\\n}\\n\\nstruct TokenData {\\n    TokenInfo info;\\n    mapping(uint256 => bool) withdrawNonces;\\n    mapping(uint256 => bool) depositNonces;\\n    uint256 withdrawFee;\\n    uint256 depositFee;\\n    uint256 accumulatedFee;\\n    uint256 fmtaDepositFee;\\n    uint256 fmtaWithdrawFee;\\n    uint256 totalBurn;\\n}\\n\\ncontract FundamentaBridge is SecureContract\\n{\\n    bytes32 public constant _DEPOSIT = keccak256(\\\"_DEPOSIT\\\");\\n\\n    event Initialized();\\n\\n    event Deposit(uint256 indexed nonce, address sender, uint256 indexed sourceNetwork, uint256 destinationNetwork, uint256 indexed token, uint256 amount, uint256 fmtaFee, uint256 tokenFee);\\n    event Withdraw(uint256 indexed nonce, address sender, uint256 sourceNetwork, uint256 indexed destinationNetwork, uint256 indexed token, uint256 amount, uint256 fmtaFee, uint256 tokenFee);\\n    event CanWithdrawChanged(address sender, uint256 tokenId, bool newValue);\\n    event CanDepositChanged(address sender, uint256 tokenId, bool newValue);\\n    event numSignersChanged(address sender, uint256 tokenId, uint256 newValue);\\n    event TokenAdded(address sender, uint256 tokenId, bool isWrappedToken, uint256 numSigners, address tokenAddress);\\n    event FeeWithdraw(address indexed user, uint256 tokenId, uint256 amount);\\n\\n    uint256 private _id;\\n\\n    mapping(uint256 => TokenData) private _tokens;\\n\\n    constructor() {}\\n\\n    function initialize() public initializer\\n    {\\n        SecureContract.init();\\n        \\n        _setRoleAdmin(_DEPOSIT, _ADMIN);\\n        _id = block.chainid;\\n\\n        emit Initialized();\\n    }\\n\\n    function queryID() public view returns (uint256) { return _id; }\\n\\n    function queryToken(uint256 tokenId) public view returns (TokenInfo memory) { return _tokens[tokenId].info; }\\n\\n    function queryWithdrawNonceUsed(uint256 tokenId, uint256 nonce) public view returns (bool) { return _tokens[tokenId].withdrawNonces[nonce]; }\\n\\n    function queryDepositNonceUsed(uint256 tokenId, uint256 nonce) public view returns (bool) { return _tokens[tokenId].depositNonces[nonce]; }\\n\\n    function queryFees(uint256 tokenId) public view returns (uint256, uint256, uint256, uint256)\\n    {\\n        TokenData storage token = _tokens[tokenId];\\n        return (token.fmtaWithdrawFee, token.fmtaDepositFee, token.withdrawFee, token.depositFee); \\n    }\\n\\n    function queryAccumulatedFees(uint256 tokenId) public view returns (uint256, uint256) { return (_tokens[tokenId].accumulatedFee, _tokens[tokenId].totalBurn); }\\n\\n    function queryTotalBurn(uint256 tokenId) internal view returns (uint256) { return _tokens[tokenId].totalBurn; }\\n\\n    function calculateWithdrawFee(uint256 tokenId, uint256 amount) public view returns (uint256) { return (amount / 10000) * _tokens[tokenId].withdrawFee; }\\n\\n    function calculateDepositFee(uint256 tokenId, uint256 amount) public view returns (uint256) { return (amount / 10000) * _tokens[tokenId].depositFee; }\\n\\n    function addToken(uint256 id, bool isWrappedToken, uint256 numSigners, address tokenAddress) public isAdmin\\n    {\\n        require(tokenAddress != address(0), \\\"Bridge: Token may not be empty\\\");\\n        require(_tokens[id].info.token == address(0), \\\"Bridge: Token already registered\\\");\\n\\n        _tokens[id].info = TokenInfo(id, isWrappedToken, numSigners, false, false, tokenAddress);\\n        _tokens[id].withdrawFee = 0;\\n        _tokens[id].depositFee = 0;\\n        _tokens[id].accumulatedFee = 0;\\n        _tokens[id].fmtaDepositFee = 0;\\n        _tokens[id].fmtaWithdrawFee = 0;\\n        _tokens[id].totalBurn = 0;\\n\\n        emit TokenAdded(msg.sender, id, isWrappedToken, numSigners, tokenAddress);\\n    }\\n\\n    function setTokenCanWithdraw(uint256 id, bool canWithdraw) public isAdmin\\n    {\\n        require(_tokens[id].info.token != address(0), \\\"Bridge: Token not registered\\\");\\n        require(_tokens[id].info.canWithdraw != canWithdraw, \\\"Bridge: No action required\\\");\\n\\n        _tokens[id].info.canWithdraw = canWithdraw;\\n\\n        emit CanWithdrawChanged(msg.sender, id, canWithdraw);\\n    }\\n\\n    function setTokenCanDeposit(uint256 id, bool canDeposit) public isAdmin\\n    {\\n        require(_tokens[id].info.token != address(0), \\\"Bridge: Token not registered\\\");\\n        require(_tokens[id].info.canDeposit != canDeposit, \\\"Bridge: No action required\\\");\\n\\n        _tokens[id].info.canDeposit = canDeposit;\\n\\n        emit CanDepositChanged(msg.sender, id, canDeposit);\\n    }\\n\\n    function setTokenNumSigners(uint256 id, uint256 numSigners) public isAdmin\\n    {\\n        require(_tokens[id].info.token != address(0), \\\"Bridge: Token not registered\\\");\\n        require(_tokens[id].info.numSigners != numSigners, \\\"Bridge: No action required\\\");\\n\\n        _tokens[id].info.numSigners = numSigners;\\n\\n        emit numSignersChanged(msg.sender, id, numSigners);\\n    }\\n\\n    function setWithdrawFee(uint256 id, uint256 newFee) public isAdmin\\n    {\\n        require(_tokens[id].info.token != address(0), \\\"Bridge: Token not registered\\\");\\n        require(newFee <= 10000, \\\"Bridge: Fee exceeds 100%\\\");\\n        require(_tokens[id].withdrawFee != newFee, \\\"Bridge: No action required\\\");\\n\\n        _tokens[id].withdrawFee = newFee;\\n    }\\n\\n    function setDepositFee(uint256 id, uint256 newFee) public isAdmin\\n    {\\n        require(_tokens[id].info.token != address(0), \\\"Bridge: Token not registered\\\");\\n        require(newFee <= 10000, \\\"Bridge: Fee exceeds 100%\\\");\\n        require(_tokens[id].depositFee != newFee, \\\"Bridge: No action required\\\");\\n\\n        _tokens[id].depositFee = newFee;\\n    }\\n\\n    function setFmtaWithdrawFee(uint256 id, uint256 newFee) public isAdmin\\n    {\\n        require(_tokens[id].info.token != address(0), \\\"Bridge: Token not registered\\\");\\n        require(_tokens[id].fmtaWithdrawFee != newFee, \\\"Bridge: No action required\\\");\\n\\n        _tokens[id].fmtaWithdrawFee = newFee;\\n    }\\n\\n    function setFmtaDepositFee(uint256 id, uint256 newFee) public isAdmin\\n    {\\n        require(_tokens[id].info.token != address(0), \\\"Bridge: Token not registered\\\");\\n        require(_tokens[id].fmtaDepositFee != newFee, \\\"Bridge: No action required\\\");\\n\\n        _tokens[id].fmtaDepositFee = newFee;\\n    }\\n \\n    function verifyDeposit(bytes[] memory serverSignatures, bytes memory transactionData) public view\\n        returns(uint256, uint256, uint256, uint256)\\n    {\\n        bytes32 dataHash = keccak256(transactionData);\\n\\n        uint256 tokenId = extractTokenId(transactionData);\\n        \\n        TokenData storage token = _tokens[tokenId];\\n        require(token.info.token != address(0), \\\"Bridge: Token not registered\\\");\\n        require(token.info.canDeposit, \\\"Bridge: Deposits disabled for this token\\\");\\n        require(serverSignatures.length >= token.info.numSigners, \\\"Bridge: Not enough signatures\\\");\\n\\n        address[] memory usedAddresses = new address[](token.info.numSigners);\\n        address signer;\\n\\n        for (uint i = 0; i < token.info.numSigners; i++)\\n        {\\n            signer = recover(dataHash, serverSignatures[i]);\\n            require(hasRole(_DEPOSIT, signer), \\\"Bridge: Multisig signer not permitted\\\");\\n            require(!exists(usedAddresses, signer), \\\"Bridge: Duplicate multisig signer\\\");\\n            usedAddresses[i] = signer;\\n        }\\n\\n        uint256 destNetwork;\\n        uint256 nonce;\\n        uint256 amount;\\n\\n        assembly {\\n            amount := mload(add(transactionData, add(0x20, 0)))\\n            destNetwork := mload(add(transactionData, add(0x20, 36)))\\n            nonce := mload(add(transactionData, add(0x20, 76)))\\n        }\\n\\n        destNetwork = destNetwork >> 224;\\n\\n        require(destNetwork == _id, \\\"Bridge: Incorrect network\\\");\\n        require(!token.depositNonces[nonce], \\\"Bridge: Nonce already used\\\");\\n\\n        return (nonce, destNetwork, tokenId, amount);\\n    }\\n\\n    function deposit(bytes[] memory serverSignatures, bytes memory transactionData) public pause\\n    {\\n        uint256 nonce;\\n        uint256 destNetwork;\\n        uint256 tokenId;\\n        uint256 amount;\\n        (nonce, destNetwork, tokenId, amount) = verifyDeposit(serverSignatures, transactionData);\\n\\n        TokenData storage token = _tokens[tokenId];\\n        \\n        if (token.fmtaDepositFee != 0)\\n        {\\n            require(TokenInterface(_tokens[0].info.token).balanceOf(msg.sender) >= token.fmtaDepositFee, \\\"Bridge: Insufficient FMTA balance\\\");\\n            TokenInterface(_tokens[0].info.token).burnFrom(msg.sender, token.fmtaDepositFee);\\n            token.totalBurn += token.fmtaDepositFee;\\n        }\\n\\n        address sender;\\n\\n        assembly {\\n            sender := mload(add(transactionData, add(0x20, 44)))\\n        }\\n\\n        uint256 fee = calculateDepositFee(tokenId, amount);\\n        uint256 depositAmount = amount - fee;\\n\\n        token.depositNonces[nonce] = true;\\n        TokenInterface(token.info.token).mintTo(sender, depositAmount);\\n        token.accumulatedFee += fee;\\n\\n        uint256 srcNetwork;\\n\\n        assembly {\\n            srcNetwork := mload(add(transactionData, add(0x20, 32)))\\n        }\\n\\n        srcNetwork = srcNetwork >> 224;\\n\\n        emit Deposit(nonce, msg.sender, srcNetwork, destNetwork, tokenId, depositAmount, token.fmtaDepositFee, fee);\\n    }\\n\\n    function withdraw(uint256 nonce, uint256 destNetwork, uint256 tokenId, uint256 amount) public pause returns (uint256)\\n    {\\n        TokenData storage token = _tokens[tokenId];\\n\\n        require(token.info.token != address(0), \\\"Bridge: Token not registered\\\");\\n        require(token.info.canWithdraw, \\\"Bridge: Withdrawals disabled for this token\\\");\\n        require(!token.withdrawNonces[nonce], \\\"Bridge: Nonce already used\\\");\\n        require(TokenInterface(token.info.token).balanceOf(msg.sender) >= amount, \\\"Bridge: Insufficient balance\\\");\\n\\n        uint256 fee = calculateWithdrawFee(tokenId, amount);\\n\\n        if (token.fmtaWithdrawFee != 0)\\n        {\\n            require(TokenInterface(_tokens[0].info.token).balanceOf(msg.sender) >= token.fmtaWithdrawFee, \\\"Bridge: Insufficient FMTA balance\\\");\\n            TokenInterface(_tokens[0].info.token).burnFrom(msg.sender, token.fmtaWithdrawFee);\\n            token.totalBurn += token.fmtaWithdrawFee;\\n        }\\n\\n        token.withdrawNonces[nonce] = true;\\n        TokenInterface(token.info.token).burnFrom(msg.sender, amount);\\n        token.accumulatedFee += fee;\\n\\n        uint256 withdrawAmount = amount - fee;\\n        \\n        emit Withdraw(nonce, msg.sender, _id, destNetwork, tokenId, withdrawAmount, token.fmtaWithdrawFee, fee);\\n\\n        return withdrawAmount;\\n    }\\n\\n    function depositAndUnwrap(bytes[] memory serverSignatures, bytes memory transactionData) public pause\\n    {\\n        uint256 nonce;\\n        uint256 destNetwork;\\n        uint256 tokenId;\\n        uint256 amount;\\n        (nonce, destNetwork, tokenId, amount) = verifyDeposit(serverSignatures, transactionData);\\n\\n        TokenData storage token = _tokens[tokenId];\\n        require(token.info.isWrappedToken, \\\"Bridge: Token is not a wrapped token\\\");\\n\\n        if (token.fmtaDepositFee != 0)\\n        {\\n            require(TokenInterface(_tokens[0].info.token).balanceOf(msg.sender) >= token.fmtaDepositFee, \\\"Bridge: Insufficient FMTA balance\\\");\\n            TokenInterface(_tokens[0].info.token).burnFrom(msg.sender, token.fmtaDepositFee);\\n            token.totalBurn += token.fmtaDepositFee;\\n        }\\n\\n        address sender;\\n\\n        assembly {\\n            sender := mload(add(transactionData, add(0x20, 44)))\\n        }\\n\\n        uint256 fee = calculateDepositFee(tokenId, amount);\\n        uint256 depositAmount = amount - fee;\\n        \\n        token.depositNonces[nonce] = true;\\n        WrappedTokenInterface(token.info.token).crossChainUnwrap(sender, depositAmount);\\n        token.accumulatedFee += fee;\\n\\n        uint256 srcNetwork;\\n\\n        assembly {\\n            srcNetwork := mload(add(transactionData, add(0x20, 32)))\\n        }\\n\\n        srcNetwork = srcNetwork >> 224;\\n        \\n        emit Deposit(nonce, msg.sender, srcNetwork, destNetwork, tokenId, depositAmount, token.fmtaDepositFee, fee);\\n    }\\n\\n    function wrapAndWithdraw(uint256 nonce, uint256 srcNetwork, uint256 destNetwork, uint256 tokenId, uint256 amount) public pause returns (uint256)\\n    {\\n        TokenData storage token = _tokens[tokenId];\\n\\n        require(token.info.token != address(0), \\\"Bridge: Token not registered\\\");\\n        require(token.info.canWithdraw, \\\"Bridge: Withdrawals disabled for this token\\\");\\n        require(srcNetwork == _id, \\\"Bridge: Incorrect network\\\");\\n        require(!token.withdrawNonces[nonce], \\\"Bridge: Nonce already used\\\");\\n        require(token.info.isWrappedToken, \\\"Bridge: Token is not a wrapped token\\\");\\n\\n        uint256 fee = calculateWithdrawFee(tokenId, amount);\\n\\n        if (token.fmtaWithdrawFee != 0)\\n        {\\n            require(TokenInterface(_tokens[0].info.token).balanceOf(msg.sender) >= token.fmtaWithdrawFee, \\\"Bridge: Insufficient FMTA amount to pay fee\\\");\\n            TokenInterface(_tokens[0].info.token).burnFrom(msg.sender, token.fmtaWithdrawFee);\\n            token.totalBurn += token.fmtaDepositFee;\\n        }\\n\\n        token.withdrawNonces[nonce] = true;\\n\\n        uint256 wrappedAmount = WrappedTokenInterface(token.info.token).crossChainWrap(msg.sender, amount);\\n        uint256 withdrawAmount = wrappedAmount - fee;\\n\\n        emit Withdraw(nonce, msg.sender, srcNetwork, destNetwork, tokenId, withdrawAmount, token.fmtaWithdrawFee, fee);\\n\\n        return withdrawAmount;\\n    }\\n\\n    function withdrawAccumulatedFee(uint256 tokenId, address to) public isAdmin\\n    {\\n        require(_tokens[tokenId].accumulatedFee > 0, \\\"Bridge: Accumulated fee = 0\\\");\\n        TokenInterface(_tokens[tokenId].info.token).mintTo(to, _tokens[tokenId].accumulatedFee);\\n\\n        uint256 temp = _tokens[tokenId].accumulatedFee;\\n        _tokens[tokenId].accumulatedFee = 0;\\n\\n        emit FeeWithdraw(to, tokenId, temp);\\n    }\\n\\n    //Private functions\\n\\n    function exists(address[] memory array, address entry) private pure returns (bool)\\n    {\\n        for (uint i = 0; i < array.length; i++)\\n        {\\n            if (array[i] == entry)\\n                return true;\\n        }\\n\\n        return false;\\n    }\\n\\n    function recover(bytes32 dataHash, bytes memory sig) private pure returns (address)\\n    {\\n        require(sig.length == 65, \\\"Bridge: Signature incorrect length\\\");\\n\\n        bytes32 r;\\n        bytes32 s;\\n        uint8 v;\\n\\n        assembly {\\n            r := mload(add(sig, 0x20))\\n            s := mload(add(sig, 0x40))\\n            v := byte(0, mload(add(sig, 0x60)))\\n        }\\n\\n        return ecrecover(dataHash, v, r, s);\\n    }\\n\\n    function extractTokenId(bytes memory transactionData) public pure returns (uint256)\\n    {\\n        uint256 token;\\n\\n        assembly {\\n            token := mload(add(transactionData, add(0x20, 40)))\\n        }\\n\\n        token = token >> 224;\\n\\n        return token;\\n    }\\n}\\n\"\r\n    },\r\n    \"/contracts/include/TokenInterface.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: BSD-3-Clause\\npragma solidity >=0.8.9;\\n\\n// Author: Steve Medley\\n// https://github.com/Civitas-Fundamenta\\n// steve@fundamenta.network\\n\\ninterface TokenInterface {\\n    function mintTo(address user, uint256 amount) external;\\n    function burnFrom(address user, uint256 amount) external;\\n    function balanceOf(address user) external returns (uint256);\\n}\\n\\ninterface WrappedTokenInterface is TokenInterface {\\n    function crossChainWrap(address user, uint256 amount) external returns (uint256);\\n    function crossChainUnwrap(address user, uint256 amount) external;\\n    function queryFees() external returns (uint256, uint256, uint256, uint256);\\n}\"\r\n    },\r\n    \"/contracts/include/SecureContract.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: BSD-3-Clause\\npragma solidity >=0.8.9;\\n\\n// Author: Steve Medley\\n// https://github.com/Civitas-Fundamenta\\n// steve@fundamenta.network\\n\\nimport \\\"@openzeppelin/contracts/access/AccessControl.sol\\\";\\nimport \\\"@openzeppelin/contracts/proxy/utils/Initializable.sol\\\";\\n\\nabstract contract SecureContract is AccessControl, Initializable\\n{\\n    event ContractPaused (uint height, address user);\\n    event ContractUnpaused (uint height, address user);\\n    event OwnershipTransferred(address oldOwner, address newOwner);\\n    event TokensRecovered (address token, address user, uint256 numTokens);\\n\\n    bytes32 public constant _ADMIN = keccak256(\\\"_ADMIN\\\");\\n\\n    bool private paused_;\\n    address private owner_;\\n\\n    modifier pause()\\n    {\\n        require(!paused_, \\\"SecureContract: Contract is paused\\\");\\n        _;\\n    }\\n\\n    modifier isAdmin()\\n    {\\n        require(hasRole(_ADMIN, msg.sender), \\\"SecureContract: Not admin - Permission denied\\\");\\n        _;\\n    }\\n\\n    modifier isOwner()\\n    {\\n        require(msg.sender == owner_, \\\"SecureContract: Not owner - Permission denied\\\");\\n        _;\\n    }\\n\\n    constructor() {}\\n\\n    function init() public initializer\\n    {\\n        _setupRole(DEFAULT_ADMIN_ROLE, msg.sender);\\n        _setupRole(_ADMIN, msg.sender);\\n        paused_ = true;\\n        owner_ = msg.sender;\\n    }\\n\\n    function setPaused(bool paused) public isAdmin\\n    {\\n        if (paused != paused_)\\n        {\\n            paused_ = paused;\\n            if (paused)\\n                emit ContractPaused(block.number, msg.sender);\\n            else \\n                emit ContractUnpaused(block.number, msg.sender);\\n        }\\n    }\\n\\n    function queryPaused() public view returns (bool)\\n    {\\n        return paused_;\\n    }\\n\\n    function queryOwner() public view returns (address)\\n    {\\n        return owner_;\\n    }\\n\\n    function transferOwnership(address newOwner) public isOwner\\n    {\\n        grantRole(DEFAULT_ADMIN_ROLE, newOwner);\\n        grantRole(_ADMIN, newOwner);\\n\\n        revokeRole(_ADMIN, owner_);\\n        revokeRole(DEFAULT_ADMIN_ROLE, owner_);\\n\\n        address oldOwner = owner_;\\n        owner_ = newOwner;\\n\\n        emit OwnershipTransferred(oldOwner, newOwner);\\n    }\\n\\n    /*function recoverTokens(address token, address user, uint256 numTokens) public isAdmin\\n    {\\n        IERC20(token).safeTransfer(user, numTokens);\\n        emit TokensRecovered(token, user, numTokens);\\n    }*/\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/utils/introspection/IERC165.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC165 standard, as defined in the\\n * https://eips.ethereum.org/EIPS/eip-165[EIP].\\n *\\n * Implementers can declare support of contract interfaces, which can then be\\n * queried by others ({ERC165Checker}).\\n *\\n * For an implementation, see {ERC165}.\\n */\\ninterface IERC165 {\\n    /**\\n     * @dev Returns true if this contract implements the interface defined by\\n     * `interfaceId`. See the corresponding\\n     * https://eips.ethereum.org/EIPS/eip-165#how-interfaces-are-identified[EIP section]\\n     * to learn more about how these ids are created.\\n     *\\n     * This function call must use less than 30 000 gas.\\n     */\\n    function supportsInterface(bytes4 interfaceId) external view returns (bool);\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/utils/introspection/ERC165.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"./IERC165.sol\\\";\\n\\n/**\\n * @dev Implementation of the {IERC165} interface.\\n *\\n * Contracts that want to implement ERC165 should inherit from this contract and override {supportsInterface} to check\\n * for the additional interface id that will be supported. For example:\\n *\\n * ```solidity\\n * function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {\\n *     return interfaceId == type(MyInterface).interfaceId || super.supportsInterface(interfaceId);\\n * }\\n * ```\\n *\\n * Alternatively, {ERC165Storage} provides an easier to use but more expensive implementation.\\n */\\nabstract contract ERC165 is IERC165 {\\n    /**\\n     * @dev See {IERC165-supportsInterface}.\\n     */\\n    function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {\\n        return interfaceId == type(IERC165).interfaceId;\\n    }\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/utils/Strings.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev String operations.\\n */\\nlibrary Strings {\\n    bytes16 private constant _HEX_SYMBOLS = \\\"0123456789abcdef\\\";\\n\\n    /**\\n     * @dev Converts a `uint256` to its ASCII `string` decimal representation.\\n     */\\n    function toString(uint256 value) internal pure returns (string memory) {\\n        // Inspired by OraclizeAPI's implementation - MIT licence\\n        // https://github.com/oraclize/ethereum-api/blob/b42146b063c7d6ee1358846c198246239e9360e8/oraclizeAPI_0.4.25.sol\\n\\n        if (value == 0) {\\n            return \\\"0\\\";\\n        }\\n        uint256 temp = value;\\n        uint256 digits;\\n        while (temp != 0) {\\n            digits++;\\n            temp /= 10;\\n        }\\n        bytes memory buffer = new bytes(digits);\\n        while (value != 0) {\\n            digits -= 1;\\n            buffer[digits] = bytes1(uint8(48 + uint256(value % 10)));\\n            value /= 10;\\n        }\\n        return string(buffer);\\n    }\\n\\n    /**\\n     * @dev Converts a `uint256` to its ASCII `string` hexadecimal representation.\\n     */\\n    function toHexString(uint256 value) internal pure returns (string memory) {\\n        if (value == 0) {\\n            return \\\"0x00\\\";\\n        }\\n        uint256 temp = value;\\n        uint256 length = 0;\\n        while (temp != 0) {\\n            length++;\\n            temp >>= 8;\\n        }\\n        return toHexString(value, length);\\n    }\\n\\n    /**\\n     * @dev Converts a `uint256` to its ASCII `string` hexadecimal representation with fixed length.\\n     */\\n    function toHexString(uint256 value, uint256 length) internal pure returns (string memory) {\\n        bytes memory buffer = new bytes(2 * length + 2);\\n        buffer[0] = \\\"0\\\";\\n        buffer[1] = \\\"x\\\";\\n        for (uint256 i = 2 * length + 1; i > 1; --i) {\\n            buffer[i] = _HEX_SYMBOLS[value & 0xf];\\n            value >>= 4;\\n        }\\n        require(value == 0, \\\"Strings: hex length insufficient\\\");\\n        return string(buffer);\\n    }\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/utils/Context.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Provides information about the current execution context, including the\\n * sender of the transaction and its data. While these are generally available\\n * via msg.sender and msg.data, they should not be accessed in such a direct\\n * manner, since when dealing with meta-transactions the account sending and\\n * paying for execution may not be the actual sender (as far as an application\\n * is concerned).\\n *\\n * This contract is only required for intermediate, library-like contracts.\\n */\\nabstract contract Context {\\n    function _msgSender() internal view virtual returns (address) {\\n        return msg.sender;\\n    }\\n\\n    function _msgData() internal view virtual returns (bytes calldata) {\\n        return msg.data;\\n    }\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/proxy/utils/Initializable.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev This is a base contract to aid in writing upgradeable contracts, or any kind of contract that will be deployed\\n * behind a proxy. Since a proxied contract can't have a constructor, it's common to move constructor logic to an\\n * external initializer function, usually called `initialize`. It then becomes necessary to protect this initializer\\n * function so it can only be called once. The {initializer} modifier provided by this contract will have this effect.\\n *\\n * TIP: To avoid leaving the proxy in an uninitialized state, the initializer function should be called as early as\\n * possible by providing the encoded function call as the `_data` argument to {ERC1967Proxy-constructor}.\\n *\\n * CAUTION: When used with inheritance, manual care must be taken to not invoke a parent initializer twice, or to ensure\\n * that all initializers are idempotent. This is not verified automatically as constructors are by Solidity.\\n */\\nabstract contract Initializable {\\n    /**\\n     * @dev Indicates that the contract has been initialized.\\n     */\\n    bool private _initialized;\\n\\n    /**\\n     * @dev Indicates that the contract is in the process of being initialized.\\n     */\\n    bool private _initializing;\\n\\n    /**\\n     * @dev Modifier to protect an initializer function from being invoked twice.\\n     */\\n    modifier initializer() {\\n        require(_initializing || !_initialized, \\\"Initializable: contract is already initialized\\\");\\n\\n        bool isTopLevelCall = !_initializing;\\n        if (isTopLevelCall) {\\n            _initializing = true;\\n            _initialized = true;\\n        }\\n\\n        _;\\n\\n        if (isTopLevelCall) {\\n            _initializing = false;\\n        }\\n    }\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/access/IAccessControl.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev External interface of AccessControl declared to support ERC165 detection.\\n */\\ninterface IAccessControl {\\n    /**\\n     * @dev Emitted when `newAdminRole` is set as ``role``'s admin role, replacing `previousAdminRole`\\n     *\\n     * `DEFAULT_ADMIN_ROLE` is the starting admin for all roles, despite\\n     * {RoleAdminChanged} not being emitted signaling this.\\n     *\\n     * _Available since v3.1._\\n     */\\n    event RoleAdminChanged(bytes32 indexed role, bytes32 indexed previousAdminRole, bytes32 indexed newAdminRole);\\n\\n    /**\\n     * @dev Emitted when `account` is granted `role`.\\n     *\\n     * `sender` is the account that originated the contract call, an admin role\\n     * bearer except when using {AccessControl-_setupRole}.\\n     */\\n    event RoleGranted(bytes32 indexed role, address indexed account, address indexed sender);\\n\\n    /**\\n     * @dev Emitted when `account` is revoked `role`.\\n     *\\n     * `sender` is the account that originated the contract call:\\n     *   - if using `revokeRole`, it is the admin role bearer\\n     *   - if using `renounceRole`, it is the role bearer (i.e. `account`)\\n     */\\n    event RoleRevoked(bytes32 indexed role, address indexed account, address indexed sender);\\n\\n    /**\\n     * @dev Returns `true` if `account` has been granted `role`.\\n     */\\n    function hasRole(bytes32 role, address account) external view returns (bool);\\n\\n    /**\\n     * @dev Returns the admin role that controls `role`. See {grantRole} and\\n     * {revokeRole}.\\n     *\\n     * To change a role's admin, use {AccessControl-_setRoleAdmin}.\\n     */\\n    function getRoleAdmin(bytes32 role) external view returns (bytes32);\\n\\n    /**\\n     * @dev Grants `role` to `account`.\\n     *\\n     * If `account` had not been already granted `role`, emits a {RoleGranted}\\n     * event.\\n     *\\n     * Requirements:\\n     *\\n     * - the caller must have ``role``'s admin role.\\n     */\\n    function grantRole(bytes32 role, address account) external;\\n\\n    /**\\n     * @dev Revokes `role` from `account`.\\n     *\\n     * If `account` had been granted `role`, emits a {RoleRevoked} event.\\n     *\\n     * Requirements:\\n     *\\n     * - the caller must have ``role``'s admin role.\\n     */\\n    function revokeRole(bytes32 role, address account) external;\\n\\n    /**\\n     * @dev Revokes `role` from the calling account.\\n     *\\n     * Roles are often managed via {grantRole} and {revokeRole}: this function's\\n     * purpose is to provide a mechanism for accounts to lose their privileges\\n     * if they are compromised (such as when a trusted device is misplaced).\\n     *\\n     * If the calling account had been granted `role`, emits a {RoleRevoked}\\n     * event.\\n     *\\n     * Requirements:\\n     *\\n     * - the caller must be `account`.\\n     */\\n    function renounceRole(bytes32 role, address account) external;\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/access/AccessControl.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"./IAccessControl.sol\\\";\\nimport \\\"../utils/Context.sol\\\";\\nimport \\\"../utils/Strings.sol\\\";\\nimport \\\"../utils/introspection/ERC165.sol\\\";\\n\\n/**\\n * @dev Contract module that allows children to implement role-based access\\n * control mechanisms. This is a lightweight version that doesn't allow enumerating role\\n * members except through off-chain means by accessing the contract event logs. Some\\n * applications may benefit from on-chain enumerability, for those cases see\\n * {AccessControlEnumerable}.\\n *\\n * Roles are referred to by their `bytes32` identifier. These should be exposed\\n * in the external API and be unique. The best way to achieve this is by\\n * using `public constant` hash digests:\\n *\\n * ```\\n * bytes32 public constant MY_ROLE = keccak256(\\\"MY_ROLE\\\");\\n * ```\\n *\\n * Roles can be used to represent a set of permissions. To restrict access to a\\n * function call, use {hasRole}:\\n *\\n * ```\\n * function foo() public {\\n *     require(hasRole(MY_ROLE, msg.sender));\\n *     ...\\n * }\\n * ```\\n *\\n * Roles can be granted and revoked dynamically via the {grantRole} and\\n * {revokeRole} functions. Each role has an associated admin role, and only\\n * accounts that have a role's admin role can call {grantRole} and {revokeRole}.\\n *\\n * By default, the admin role for all roles is `DEFAULT_ADMIN_ROLE`, which means\\n * that only accounts with this role will be able to grant or revoke other\\n * roles. More complex role relationships can be created by using\\n * {_setRoleAdmin}.\\n *\\n * WARNING: The `DEFAULT_ADMIN_ROLE` is also its own admin: it has permission to\\n * grant and revoke this role. Extra precautions should be taken to secure\\n * accounts that have been granted it.\\n */\\nabstract contract AccessControl is Context, IAccessControl, ERC165 {\\n    struct RoleData {\\n        mapping(address => bool) members;\\n        bytes32 adminRole;\\n    }\\n\\n    mapping(bytes32 => RoleData) private _roles;\\n\\n    bytes32 public constant DEFAULT_ADMIN_ROLE = 0x00;\\n\\n    /**\\n     * @dev Modifier that checks that an account has a specific role. Reverts\\n     * with a standardized message including the required role.\\n     *\\n     * The format of the revert reason is given by the following regular expression:\\n     *\\n     *  /^AccessControl: account (0x[0-9a-f]{40}) is missing role (0x[0-9a-f]{64})$/\\n     *\\n     * _Available since v4.1._\\n     */\\n    modifier onlyRole(bytes32 role) {\\n        _checkRole(role, _msgSender());\\n        _;\\n    }\\n\\n    /**\\n     * @dev See {IERC165-supportsInterface}.\\n     */\\n    function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {\\n        return interfaceId == type(IAccessControl).interfaceId || super.supportsInterface(interfaceId);\\n    }\\n\\n    /**\\n     * @dev Returns `true` if `account` has been granted `role`.\\n     */\\n    function hasRole(bytes32 role, address account) public view override returns (bool) {\\n        return _roles[role].members[account];\\n    }\\n\\n    /**\\n     * @dev Revert with a standard message if `account` is missing `role`.\\n     *\\n     * The format of the revert reason is given by the following regular expression:\\n     *\\n     *  /^AccessControl: account (0x[0-9a-f]{40}) is missing role (0x[0-9a-f]{64})$/\\n     */\\n    function _checkRole(bytes32 role, address account) internal view {\\n        if (!hasRole(role, account)) {\\n            revert(\\n                string(\\n                    abi.encodePacked(\\n                        \\\"AccessControl: account \\\",\\n                        Strings.toHexString(uint160(account), 20),\\n                        \\\" is missing role \\\",\\n                        Strings.toHexString(uint256(role), 32)\\n                    )\\n                )\\n            );\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the admin role that controls `role`. See {grantRole} and\\n     * {revokeRole}.\\n     *\\n     * To change a role's admin, use {_setRoleAdmin}.\\n     */\\n    function getRoleAdmin(bytes32 role) public view override returns (bytes32) {\\n        return _roles[role].adminRole;\\n    }\\n\\n    /**\\n     * @dev Grants `role` to `account`.\\n     *\\n     * If `account` had not been already granted `role`, emits a {RoleGranted}\\n     * event.\\n     *\\n     * Requirements:\\n     *\\n     * - the caller must have ``role``'s admin role.\\n     */\\n    function grantRole(bytes32 role, address account) public virtual override onlyRole(getRoleAdmin(role)) {\\n        _grantRole(role, account);\\n    }\\n\\n    /**\\n     * @dev Revokes `role` from `account`.\\n     *\\n     * If `account` had been granted `role`, emits a {RoleRevoked} event.\\n     *\\n     * Requirements:\\n     *\\n     * - the caller must have ``role``'s admin role.\\n     */\\n    function revokeRole(bytes32 role, address account) public virtual override onlyRole(getRoleAdmin(role)) {\\n        _revokeRole(role, account);\\n    }\\n\\n    /**\\n     * @dev Revokes `role` from the calling account.\\n     *\\n     * Roles are often managed via {grantRole} and {revokeRole}: this function's\\n     * purpose is to provide a mechanism for accounts to lose their privileges\\n     * if they are compromised (such as when a trusted device is misplaced).\\n     *\\n     * If the calling account had been granted `role`, emits a {RoleRevoked}\\n     * event.\\n     *\\n     * Requirements:\\n     *\\n     * - the caller must be `account`.\\n     */\\n    function renounceRole(bytes32 role, address account) public virtual override {\\n        require(account == _msgSender(), \\\"AccessControl: can only renounce roles for self\\\");\\n\\n        _revokeRole(role, account);\\n    }\\n\\n    /**\\n     * @dev Grants `role` to `account`.\\n     *\\n     * If `account` had not been already granted `role`, emits a {RoleGranted}\\n     * event. Note that unlike {grantRole}, this function doesn't perform any\\n     * checks on the calling account.\\n     *\\n     * [WARNING]\\n     * ====\\n     * This function should only be called from the constructor when setting\\n     * up the initial roles for the system.\\n     *\\n     * Using this function in any other way is effectively circumventing the admin\\n     * system imposed by {AccessControl}.\\n     * ====\\n     */\\n    function _setupRole(bytes32 role, address account) internal virtual {\\n        _grantRole(role, account);\\n    }\\n\\n    /**\\n     * @dev Sets `adminRole` as ``role``'s admin role.\\n     *\\n     * Emits a {RoleAdminChanged} event.\\n     */\\n    function _setRoleAdmin(bytes32 role, bytes32 adminRole) internal virtual {\\n        bytes32 previousAdminRole = getRoleAdmin(role);\\n        _roles[role].adminRole = adminRole;\\n        emit RoleAdminChanged(role, previousAdminRole, adminRole);\\n    }\\n\\n    function _grantRole(bytes32 role, address account) private {\\n        if (!hasRole(role, account)) {\\n            _roles[role].members[account] = true;\\n            emit RoleGranted(role, account, _msgSender());\\n        }\\n    }\\n\\n    function _revokeRole(bytes32 role, address account) private {\\n        if (hasRole(role, account)) {\\n            _roles[role].members[account] = false;\\n            emit RoleRevoked(role, account, _msgSender());\\n        }\\n    }\\n}\\n\"\r\n    }\r\n  },\r\n  \"settings\": {\r\n    \"remappings\": [],\r\n    \"optimizer\": {\r\n      \"enabled\": true,\r\n      \"runs\": 200\r\n    },\r\n    \"evmVersion\": \"london\",\r\n    \"libraries\": {},\r\n    \"outputSelection\": {\r\n      \"*\": {\r\n        \"*\": [\r\n          \"evm.bytecode\",\r\n          \"evm.deployedBytecode\",\r\n          \"devdoc\",\r\n          \"userdoc\",\r\n          \"metadata\",\r\n          \"abi\"\r\n        ]\r\n      }\r\n    }\r\n  }\r\n}}","ABI":"[{\"inputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"bool\",\"name\":\"newValue\",\"type\":\"bool\"}],\"name\":\"CanDepositChanged\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"bool\",\"name\":\"newValue\",\"type\":\"bool\"}],\"name\":\"CanWithdrawChanged\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"height\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"}],\"name\":\"ContractPaused\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"height\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"}],\"name\":\"ContractUnpaused\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"nonce\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"sourceNetwork\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"destinationNetwork\",\"type\":\"uint256\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"token\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"fmtaFee\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"tokenFee\",\"type\":\"uint256\"}],\"name\":\"Deposit\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"FeeWithdraw\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[],\"name\":\"Initialized\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"oldOwner\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"previousAdminRole\",\"type\":\"bytes32\"},{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"newAdminRole\",\"type\":\"bytes32\"}],\"name\":\"RoleAdminChanged\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"}],\"name\":\"RoleGranted\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"}],\"name\":\"RoleRevoked\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"bool\",\"name\":\"isWrappedToken\",\"type\":\"bool\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"numSigners\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"tokenAddress\",\"type\":\"address\"}],\"name\":\"TokenAdded\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"token\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"numTokens\",\"type\":\"uint256\"}],\"name\":\"TokensRecovered\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"nonce\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"sourceNetwork\",\"type\":\"uint256\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"destinationNetwork\",\"type\":\"uint256\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"token\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"fmtaFee\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"tokenFee\",\"type\":\"uint256\"}],\"name\":\"Withdraw\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"newValue\",\"type\":\"uint256\"}],\"name\":\"numSignersChanged\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"DEFAULT_ADMIN_ROLE\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"_ADMIN\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"_DEPOSIT\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"id\",\"type\":\"uint256\"},{\"internalType\":\"bool\",\"name\":\"isWrappedToken\",\"type\":\"bool\"},{\"internalType\":\"uint256\",\"name\":\"numSigners\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"tokenAddress\",\"type\":\"address\"}],\"name\":\"addToken\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"calculateDepositFee\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"calculateWithdrawFee\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes[]\",\"name\":\"serverSignatures\",\"type\":\"bytes[]\"},{\"internalType\":\"bytes\",\"name\":\"transactionData\",\"type\":\"bytes\"}],\"name\":\"deposit\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes[]\",\"name\":\"serverSignatures\",\"type\":\"bytes[]\"},{\"internalType\":\"bytes\",\"name\":\"transactionData\",\"type\":\"bytes\"}],\"name\":\"depositAndUnwrap\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes\",\"name\":\"transactionData\",\"type\":\"bytes\"}],\"name\":\"extractTokenId\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"}],\"name\":\"getRoleAdmin\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"grantRole\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"hasRole\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"init\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"initialize\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"queryAccumulatedFees\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"nonce\",\"type\":\"uint256\"}],\"name\":\"queryDepositNonceUsed\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"queryFees\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"queryID\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"queryOwner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"queryPaused\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"queryToken\",\"outputs\":[{\"components\":[{\"internalType\":\"uint256\",\"name\":\"id\",\"type\":\"uint256\"},{\"internalType\":\"bool\",\"name\":\"isWrappedToken\",\"type\":\"bool\"},{\"internalType\":\"uint256\",\"name\":\"numSigners\",\"type\":\"uint256\"},{\"internalType\":\"bool\",\"name\":\"canWithdraw\",\"type\":\"bool\"},{\"internalType\":\"bool\",\"name\":\"canDeposit\",\"type\":\"bool\"},{\"internalType\":\"address\",\"name\":\"token\",\"type\":\"address\"}],\"internalType\":\"struct TokenInfo\",\"name\":\"\",\"type\":\"tuple\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"nonce\",\"type\":\"uint256\"}],\"name\":\"queryWithdrawNonceUsed\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"renounceRole\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"revokeRole\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"id\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"newFee\",\"type\":\"uint256\"}],\"name\":\"setDepositFee\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"id\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"newFee\",\"type\":\"uint256\"}],\"name\":\"setFmtaDepositFee\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"id\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"newFee\",\"type\":\"uint256\"}],\"name\":\"setFmtaWithdrawFee\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bool\",\"name\":\"paused\",\"type\":\"bool\"}],\"name\":\"setPaused\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"id\",\"type\":\"uint256\"},{\"internalType\":\"bool\",\"name\":\"canDeposit\",\"type\":\"bool\"}],\"name\":\"setTokenCanDeposit\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"id\",\"type\":\"uint256\"},{\"internalType\":\"bool\",\"name\":\"canWithdraw\",\"type\":\"bool\"}],\"name\":\"setTokenCanWithdraw\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"id\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"numSigners\",\"type\":\"uint256\"}],\"name\":\"setTokenNumSigners\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"id\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"newFee\",\"type\":\"uint256\"}],\"name\":\"setWithdrawFee\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes4\",\"name\":\"interfaceId\",\"type\":\"bytes4\"}],\"name\":\"supportsInterface\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes[]\",\"name\":\"serverSignatures\",\"type\":\"bytes[]\"},{\"internalType\":\"bytes\",\"name\":\"transactionData\",\"type\":\"bytes\"}],\"name\":\"verifyDeposit\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"nonce\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"destNetwork\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"withdraw\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"}],\"name\":\"withdrawAccumulatedFee\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"nonce\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"srcNetwork\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"destNetwork\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"wrapAndWithdraw\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}]","ContractName":"FundamentaBridge","CompilerVersion":"v0.8.9+commit.e5eed63a","OptimizationUsed":"1","Runs":"200","ConstructorArguments":"","EVMVersion":"Default","Library":"","LicenseType":"","Proxy":"0","Implementation":"","SwarmSource":""}]}