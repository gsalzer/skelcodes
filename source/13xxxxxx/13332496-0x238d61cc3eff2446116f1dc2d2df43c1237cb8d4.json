{"status":"1","message":"OK","result":[{"SourceCode":"{{\r\n  \"language\": \"Solidity\",\r\n  \"sources\": {\r\n    \"contracts/Refund.sol\": {\r\n      \"content\": \"//SPDX-License-Identifier: MIT\\r\\npragma solidity ^0.8.7;\\r\\n\\r\\nimport \\\"./Services/ERC20.sol\\\";\\r\\nimport \\\"./Services/Blacklist.sol\\\";\\r\\nimport \\\"./Services/Service.sol\\\";\\r\\n\\r\\ncontract Refund is Service, BlackList {\\r\\n    uint public startTimestamp;\\r\\n    uint public endTimestamp;\\r\\n\\r\\n    mapping(address => Base) public pTokens;\\r\\n    address[] pTokensList;\\r\\n\\r\\n    struct Base {\\r\\n        address baseToken;\\r\\n        uint course;\\r\\n    }\\r\\n\\r\\n    mapping(address => mapping(address => uint)) public pTokenAmounts;\\r\\n    mapping(address => address) public baseTokens;\\r\\n    address[] baseTokenList;\\r\\n\\r\\n    struct Balance {\\r\\n        uint amount;\\r\\n        uint out;\\r\\n    }\\r\\n\\r\\n    mapping(address => mapping(address => Balance)) public balances;\\r\\n    mapping(address => uint[]) public checkpoints;\\r\\n    mapping(address => uint) public totalAmount;\\r\\n\\r\\n    address public calcPoolPrice;\\r\\n\\r\\n    constructor(\\r\\n        uint startTimestamp_,\\r\\n        uint endTimestamp_,\\r\\n        address controller_,\\r\\n        address pETH_,\\r\\n        address calcPoolPrice_\\r\\n    ) Service(controller_, pETH_) {\\r\\n        require(\\r\\n            startTimestamp_ != 0\\r\\n            && endTimestamp_ != 0,\\r\\n            \\\"Refund::Constructor: timestamp is 0\\\"\\r\\n        );\\r\\n\\r\\n        require(\\r\\n            startTimestamp_ > getBlockTimestamp()\\r\\n            && startTimestamp_ < endTimestamp_,\\r\\n            \\\"Refund::Constructor: start timestamp must be more than current timestamp and less than end timestamp\\\"\\r\\n        );\\r\\n\\r\\n        startTimestamp = startTimestamp_;\\r\\n        endTimestamp = endTimestamp_;\\r\\n\\r\\n        calcPoolPrice = calcPoolPrice_;\\r\\n    }\\r\\n\\r\\n    function addRefundPair(address pToken, address baseToken_, uint course_) public onlyOwner returns (bool) {\\r\\n        pTokens[pToken] = Base({baseToken: baseToken_, course: course_});\\r\\n        baseTokens[pToken] = baseToken_;\\r\\n        pTokensList.push(pToken);\\r\\n        baseTokenList.push(baseToken_);\\r\\n\\r\\n        return true;\\r\\n    }\\r\\n\\r\\n    function addTokensAndCheckpoint(address baseToken, uint baseTokenAmount) public onlyOwner returns (bool) {\\r\\n        uint amountIn = doTransferIn(msg.sender, baseToken, baseTokenAmount);\\r\\n\\r\\n        if (amountIn > 0 ) {\\r\\n            checkpoints[baseToken].push(amountIn);\\r\\n        }\\r\\n\\r\\n        return true;\\r\\n    }\\r\\n\\r\\n    function removeUnused(address token, uint amount) public onlyOwner returns (bool) {\\r\\n        require(getBlockTimestamp() > endTimestamp, \\\"Refund::removeUnused: bad timing for the request\\\");\\r\\n\\r\\n        doTransferOut(token, msg.sender, amount);\\r\\n\\r\\n        return true;\\r\\n    }\\r\\n\\r\\n    function refund(address pToken, uint pTokenAmount) public returns (bool) {\\r\\n        require(getBlockTimestamp() < startTimestamp, \\\"Refund::refund: you can convert pTokens before start timestamp only\\\");\\r\\n        require(checkBorrowBalance(msg.sender), \\\"Refund::refund: sumBorrow must be less than $1\\\");\\r\\n        require(pTokensIsAllowed(pToken), \\\"Refund::refund: pToken is not allowed\\\");\\r\\n\\r\\n        uint pTokenAmountIn = doTransferIn(msg.sender, pToken, pTokenAmount);\\r\\n        pTokenAmounts[msg.sender][pToken] += pTokenAmountIn;\\r\\n\\r\\n        address baseToken = baseTokens[pToken];\\r\\n        uint baseTokenAmount = calcRefundAmount(pToken, pTokenAmountIn);\\r\\n        balances[msg.sender][baseToken].amount += baseTokenAmount;\\r\\n        totalAmount[baseToken] += baseTokenAmount;\\r\\n\\r\\n        return true;\\r\\n    }\\r\\n\\r\\n    function calcRefundAmount(address pToken, uint amount) public view returns (uint) {\\r\\n        uint course = pTokens[pToken].course;\\r\\n\\r\\n        uint pTokenDecimals = ERC20(pToken).decimals();\\r\\n        uint baseTokenDecimals = ERC20(pTokens[pToken].baseToken).decimals();\\r\\n        uint factor;\\r\\n\\r\\n        if (pTokenDecimals >= baseTokenDecimals) {\\r\\n            factor = 10**(pTokenDecimals - baseTokenDecimals);\\r\\n            return amount * course / factor / 1e18;\\r\\n        } else {\\r\\n            factor = 10**(baseTokenDecimals - pTokenDecimals);\\r\\n            return amount * course * factor / 1e18;\\r\\n        }\\r\\n    }\\r\\n\\r\\n    function claimToken(address pToken) public returns (bool) {\\r\\n        require(getBlockTimestamp() > startTimestamp, \\\"Refund::claimToken: bad timing for the request\\\");\\r\\n        require(!isBlackListed[msg.sender], \\\"Refund::claimToken: user in black list\\\");\\r\\n\\r\\n        uint amount = calcClaimAmount(msg.sender, pToken);\\r\\n\\r\\n        address baseToken = baseTokens[pToken];\\r\\n        balances[msg.sender][baseToken].out += amount;\\r\\n\\r\\n        doTransferOut(baseToken, msg.sender, amount);\\r\\n\\r\\n        return true;\\r\\n    }\\r\\n\\r\\n    function calcClaimAmount(address user, address pToken) public view returns (uint) {\\r\\n        address baseToken = baseTokens[pToken];\\r\\n        uint amount = balances[user][baseToken].amount;\\r\\n\\r\\n        if (amount == 0 || amount == balances[user][baseToken].out || getBlockTimestamp() <= startTimestamp ) {\\r\\n            return 0;\\r\\n        }\\r\\n\\r\\n        uint claimAmount;\\r\\n\\r\\n        for (uint i = 0; i < checkpoints[baseToken].length; i++) {\\r\\n            claimAmount += amount * checkpoints[baseToken][i] / totalAmount[baseToken];\\r\\n        }\\r\\n\\r\\n        if (claimAmount > amount) {\\r\\n            return amount - balances[user][baseToken].out;\\r\\n        } else {\\r\\n            return claimAmount - balances[user][baseToken].out;\\r\\n        }\\r\\n    }\\r\\n\\r\\n    function getCheckpointsLength(address baseToken_) public view returns (uint) {\\r\\n        return checkpoints[baseToken_].length;\\r\\n    }\\r\\n\\r\\n    function getPTokenList() public view returns (address[] memory) {\\r\\n        return pTokensList;\\r\\n    }\\r\\n\\r\\n    function getPTokenListLength() public view returns (uint) {\\r\\n        return pTokensList.length;\\r\\n    }\\r\\n\\r\\n    function getAllTotalAmount() public view returns (uint) {\\r\\n        uint allAmount;\\r\\n        uint price;\\r\\n        address baseToken;\\r\\n\\r\\n        for(uint i = 0; i < baseTokenList.length; i++ ) {\\r\\n            baseToken = baseTokenList[i];\\r\\n            price = CalcPoolPrice(calcPoolPrice).getPoolPriceInUSD(baseToken);\\r\\n            allAmount += price * totalAmount[baseToken] / 1e18 / (10 ** ERC20(baseToken).decimals());\\r\\n        }\\r\\n\\r\\n        return allAmount;\\r\\n    }\\r\\n\\r\\n    function getUserUsdAmount(address user) public view returns (uint) {\\r\\n        uint userTotalAmount;\\r\\n        uint price;\\r\\n        address baseToken;\\r\\n\\r\\n        for(uint i = 0; i < baseTokenList.length; i++ ) {\\r\\n            baseToken = baseTokenList[i];\\r\\n            price = CalcPoolPrice(calcPoolPrice).getPoolPriceInUSD(baseToken);\\r\\n            userTotalAmount += price * balances[user][baseToken].amount / 1e18 / (10 ** ERC20(baseToken).decimals());\\r\\n        }\\r\\n\\r\\n        return userTotalAmount;\\r\\n    }\\r\\n\\r\\n    function pTokensIsAllowed(address pToken_) public view returns (bool) {\\r\\n        for (uint i = 0; i < pTokensList.length; i++ ) {\\r\\n            if (pTokensList[i] == pToken_) {\\r\\n                return true;\\r\\n            }\\r\\n        }\\r\\n\\r\\n        return false;\\r\\n    }\\r\\n\\r\\n    function getAvailableLiquidity() public view returns (uint) {\\r\\n        uint availableLiquidity;\\r\\n        uint price;\\r\\n        address baseToken;\\r\\n\\r\\n        for(uint i = 0; i < baseTokenList.length; i++ ) {\\r\\n            baseToken = baseTokenList[i];\\r\\n            price = ControllerInterface(controller).getOracle().getPriceInUSD(baseToken);\\r\\n            availableLiquidity += price * ERC20(baseToken).balanceOf(address(this)) / 1e18  / (10 ** ERC20(baseToken).decimals());\\r\\n        }\\r\\n\\r\\n        return availableLiquidity;\\r\\n    }\\r\\n\\r\\n    function getBlockTimestamp() public view virtual returns (uint) {\\r\\n        return block.timestamp;\\r\\n    }\\r\\n}\\r\\n\"\r\n    },\r\n    \"contracts/Services/ERC20.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\r\\npragma solidity ^0.8.7;\\r\\n\\r\\nimport \\\"openzeppelin-solidity/contracts/token/ERC20/ERC20.sol\\\";\\r\\n\\r\\ncontract ERC20Token is ERC20 {\\r\\n    constructor(\\r\\n        uint256 initialSupply,\\r\\n        string memory name,\\r\\n        string memory symbol\\r\\n    ) ERC20(name, symbol) {\\r\\n        _mint(msg.sender, initialSupply);\\r\\n    }\\r\\n\\r\\n    function mint(uint256 amount) external {\\r\\n        _mint(msg.sender, amount);\\r\\n    }\\r\\n}\\r\\n\\r\\ncontract ERC20TokenDec6 is ERC20 {\\r\\n    constructor(\\r\\n        uint256 initialSupply,\\r\\n        string memory name,\\r\\n        string memory symbol\\r\\n    ) ERC20(name, symbol) {\\r\\n        _mint(msg.sender, initialSupply);\\r\\n    }\\r\\n\\r\\n    function mint(uint256 amount) external {\\r\\n        _mint(msg.sender, amount);\\r\\n    }\\r\\n\\r\\n    function decimals() public view virtual override returns (uint8) {\\r\\n        return 6;\\r\\n    }\\r\\n}\\r\\n\"\r\n    },\r\n    \"contracts/Services/Blacklist.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\r\\npragma solidity ^0.8.7;\\r\\n\\r\\nimport \\\"openzeppelin-solidity/contracts/access/Ownable.sol\\\";\\r\\n\\r\\ncontract BlackList is Ownable {\\r\\n    mapping (address => bool) public isBlackListed;\\r\\n\\r\\n    event AddedBlackList(address _user);\\r\\n\\r\\n    event RemovedBlackList(address _user);\\r\\n\\r\\n    function addBlackList(address _evilUser) public onlyOwner {\\r\\n        isBlackListed[_evilUser] = true;\\r\\n\\r\\n        emit AddedBlackList(_evilUser);\\r\\n    }\\r\\n\\r\\n    function removeBlackList(address _clearedUser) public onlyOwner {\\r\\n        isBlackListed[_clearedUser] = false;\\r\\n\\r\\n        emit RemovedBlackList(_clearedUser);\\r\\n    }\\r\\n\\r\\n    function getBlackListStatus(address _maker) external view returns (bool) {\\r\\n        return isBlackListed[_maker];\\r\\n    }\\r\\n}\\r\\n\\r\\n\"\r\n    },\r\n    \"contracts/Services/Service.sol\": {\r\n      \"content\": \"//SPDX-License-Identifier: MIT\\r\\npragma solidity ^0.8.7;\\r\\n\\r\\nimport \\\"./Interfaces.sol\\\";\\r\\nimport \\\"./Transfers.sol\\\";\\r\\n\\r\\ncontract Service is Transfers {\\r\\n    address public controller;\\r\\n    address public pETH;\\r\\n\\r\\n    constructor(address controller_, address pETH_) {\\r\\n        require(\\r\\n            controller_ != address(0)\\r\\n            && pETH_ != address(0),\\r\\n            \\\"Service::Constructor: address is 0\\\"\\r\\n        );\\r\\n\\r\\n        controller = controller_;\\r\\n        pETH = pETH_;\\r\\n    }\\r\\n\\r\\n    function checkBorrowBalance(address account) public view returns (bool) {\\r\\n        uint sumBorrow = calcAccountBorrow(account);\\r\\n\\r\\n        return sumBorrow < 1;\\r\\n    }\\r\\n\\r\\n    function calcAccountBorrow(address account) public view returns (uint) {\\r\\n        uint sumBorrow;\\r\\n\\r\\n        address[] memory assets = ControllerInterface(controller).getAssetsIn(account);\\r\\n        for (uint i = 0; i < assets.length; i++) {\\r\\n            address asset = assets[i];\\r\\n\\r\\n            uint borrowBalance = PTokenInterface(asset).borrowBalanceStored(account);\\r\\n            uint price = ControllerInterface(controller).getOracle().getUnderlyingPrice(asset);\\r\\n\\r\\n            uint underlyingDecimal = asset == pETH ? 18 : ERC20(PTokenInterface(asset).underlying()).decimals();\\r\\n            sumBorrow += price * borrowBalance / 10 ** underlyingDecimal;\\r\\n        }\\r\\n\\r\\n        return sumBorrow;\\r\\n    }\\r\\n}\\r\\n\"\r\n    },\r\n    \"openzeppelin-solidity/contracts/token/ERC20/ERC20.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"./IERC20.sol\\\";\\nimport \\\"./extensions/IERC20Metadata.sol\\\";\\nimport \\\"../../utils/Context.sol\\\";\\n\\n/**\\n * @dev Implementation of the {IERC20} interface.\\n *\\n * This implementation is agnostic to the way tokens are created. This means\\n * that a supply mechanism has to be added in a derived contract using {_mint}.\\n * For a generic mechanism see {ERC20PresetMinterPauser}.\\n *\\n * TIP: For a detailed writeup see our guide\\n * https://forum.zeppelin.solutions/t/how-to-implement-erc20-supply-mechanisms/226[How\\n * to implement supply mechanisms].\\n *\\n * We have followed general OpenZeppelin Contracts guidelines: functions revert\\n * instead returning `false` on failure. This behavior is nonetheless\\n * conventional and does not conflict with the expectations of ERC20\\n * applications.\\n *\\n * Additionally, an {Approval} event is emitted on calls to {transferFrom}.\\n * This allows applications to reconstruct the allowance for all accounts just\\n * by listening to said events. Other implementations of the EIP may not emit\\n * these events, as it isn't required by the specification.\\n *\\n * Finally, the non-standard {decreaseAllowance} and {increaseAllowance}\\n * functions have been added to mitigate the well-known issues around setting\\n * allowances. See {IERC20-approve}.\\n */\\ncontract ERC20 is Context, IERC20, IERC20Metadata {\\n    mapping(address => uint256) private _balances;\\n\\n    mapping(address => mapping(address => uint256)) private _allowances;\\n\\n    uint256 private _totalSupply;\\n\\n    string private _name;\\n    string private _symbol;\\n\\n    /**\\n     * @dev Sets the values for {name} and {symbol}.\\n     *\\n     * The default value of {decimals} is 18. To select a different value for\\n     * {decimals} you should overload it.\\n     *\\n     * All two of these values are immutable: they can only be set once during\\n     * construction.\\n     */\\n    constructor(string memory name_, string memory symbol_) {\\n        _name = name_;\\n        _symbol = symbol_;\\n    }\\n\\n    /**\\n     * @dev Returns the name of the token.\\n     */\\n    function name() public view virtual override returns (string memory) {\\n        return _name;\\n    }\\n\\n    /**\\n     * @dev Returns the symbol of the token, usually a shorter version of the\\n     * name.\\n     */\\n    function symbol() public view virtual override returns (string memory) {\\n        return _symbol;\\n    }\\n\\n    /**\\n     * @dev Returns the number of decimals used to get its user representation.\\n     * For example, if `decimals` equals `2`, a balance of `505` tokens should\\n     * be displayed to a user as `5.05` (`505 / 10 ** 2`).\\n     *\\n     * Tokens usually opt for a value of 18, imitating the relationship between\\n     * Ether and Wei. This is the value {ERC20} uses, unless this function is\\n     * overridden;\\n     *\\n     * NOTE: This information is only used for _display_ purposes: it in\\n     * no way affects any of the arithmetic of the contract, including\\n     * {IERC20-balanceOf} and {IERC20-transfer}.\\n     */\\n    function decimals() public view virtual override returns (uint8) {\\n        return 18;\\n    }\\n\\n    /**\\n     * @dev See {IERC20-totalSupply}.\\n     */\\n    function totalSupply() public view virtual override returns (uint256) {\\n        return _totalSupply;\\n    }\\n\\n    /**\\n     * @dev See {IERC20-balanceOf}.\\n     */\\n    function balanceOf(address account) public view virtual override returns (uint256) {\\n        return _balances[account];\\n    }\\n\\n    /**\\n     * @dev See {IERC20-transfer}.\\n     *\\n     * Requirements:\\n     *\\n     * - `recipient` cannot be the zero address.\\n     * - the caller must have a balance of at least `amount`.\\n     */\\n    function transfer(address recipient, uint256 amount) public virtual override returns (bool) {\\n        _transfer(_msgSender(), recipient, amount);\\n        return true;\\n    }\\n\\n    /**\\n     * @dev See {IERC20-allowance}.\\n     */\\n    function allowance(address owner, address spender) public view virtual override returns (uint256) {\\n        return _allowances[owner][spender];\\n    }\\n\\n    /**\\n     * @dev See {IERC20-approve}.\\n     *\\n     * Requirements:\\n     *\\n     * - `spender` cannot be the zero address.\\n     */\\n    function approve(address spender, uint256 amount) public virtual override returns (bool) {\\n        _approve(_msgSender(), spender, amount);\\n        return true;\\n    }\\n\\n    /**\\n     * @dev See {IERC20-transferFrom}.\\n     *\\n     * Emits an {Approval} event indicating the updated allowance. This is not\\n     * required by the EIP. See the note at the beginning of {ERC20}.\\n     *\\n     * Requirements:\\n     *\\n     * - `sender` and `recipient` cannot be the zero address.\\n     * - `sender` must have a balance of at least `amount`.\\n     * - the caller must have allowance for ``sender``'s tokens of at least\\n     * `amount`.\\n     */\\n    function transferFrom(\\n        address sender,\\n        address recipient,\\n        uint256 amount\\n    ) public virtual override returns (bool) {\\n        _transfer(sender, recipient, amount);\\n\\n        uint256 currentAllowance = _allowances[sender][_msgSender()];\\n        require(currentAllowance >= amount, \\\"ERC20: transfer amount exceeds allowance\\\");\\n        unchecked {\\n            _approve(sender, _msgSender(), currentAllowance - amount);\\n        }\\n\\n        return true;\\n    }\\n\\n    /**\\n     * @dev Atomically increases the allowance granted to `spender` by the caller.\\n     *\\n     * This is an alternative to {approve} that can be used as a mitigation for\\n     * problems described in {IERC20-approve}.\\n     *\\n     * Emits an {Approval} event indicating the updated allowance.\\n     *\\n     * Requirements:\\n     *\\n     * - `spender` cannot be the zero address.\\n     */\\n    function increaseAllowance(address spender, uint256 addedValue) public virtual returns (bool) {\\n        _approve(_msgSender(), spender, _allowances[_msgSender()][spender] + addedValue);\\n        return true;\\n    }\\n\\n    /**\\n     * @dev Atomically decreases the allowance granted to `spender` by the caller.\\n     *\\n     * This is an alternative to {approve} that can be used as a mitigation for\\n     * problems described in {IERC20-approve}.\\n     *\\n     * Emits an {Approval} event indicating the updated allowance.\\n     *\\n     * Requirements:\\n     *\\n     * - `spender` cannot be the zero address.\\n     * - `spender` must have allowance for the caller of at least\\n     * `subtractedValue`.\\n     */\\n    function decreaseAllowance(address spender, uint256 subtractedValue) public virtual returns (bool) {\\n        uint256 currentAllowance = _allowances[_msgSender()][spender];\\n        require(currentAllowance >= subtractedValue, \\\"ERC20: decreased allowance below zero\\\");\\n        unchecked {\\n            _approve(_msgSender(), spender, currentAllowance - subtractedValue);\\n        }\\n\\n        return true;\\n    }\\n\\n    /**\\n     * @dev Moves `amount` of tokens from `sender` to `recipient`.\\n     *\\n     * This internal function is equivalent to {transfer}, and can be used to\\n     * e.g. implement automatic token fees, slashing mechanisms, etc.\\n     *\\n     * Emits a {Transfer} event.\\n     *\\n     * Requirements:\\n     *\\n     * - `sender` cannot be the zero address.\\n     * - `recipient` cannot be the zero address.\\n     * - `sender` must have a balance of at least `amount`.\\n     */\\n    function _transfer(\\n        address sender,\\n        address recipient,\\n        uint256 amount\\n    ) internal virtual {\\n        require(sender != address(0), \\\"ERC20: transfer from the zero address\\\");\\n        require(recipient != address(0), \\\"ERC20: transfer to the zero address\\\");\\n\\n        _beforeTokenTransfer(sender, recipient, amount);\\n\\n        uint256 senderBalance = _balances[sender];\\n        require(senderBalance >= amount, \\\"ERC20: transfer amount exceeds balance\\\");\\n        unchecked {\\n            _balances[sender] = senderBalance - amount;\\n        }\\n        _balances[recipient] += amount;\\n\\n        emit Transfer(sender, recipient, amount);\\n\\n        _afterTokenTransfer(sender, recipient, amount);\\n    }\\n\\n    /** @dev Creates `amount` tokens and assigns them to `account`, increasing\\n     * the total supply.\\n     *\\n     * Emits a {Transfer} event with `from` set to the zero address.\\n     *\\n     * Requirements:\\n     *\\n     * - `account` cannot be the zero address.\\n     */\\n    function _mint(address account, uint256 amount) internal virtual {\\n        require(account != address(0), \\\"ERC20: mint to the zero address\\\");\\n\\n        _beforeTokenTransfer(address(0), account, amount);\\n\\n        _totalSupply += amount;\\n        _balances[account] += amount;\\n        emit Transfer(address(0), account, amount);\\n\\n        _afterTokenTransfer(address(0), account, amount);\\n    }\\n\\n    /**\\n     * @dev Destroys `amount` tokens from `account`, reducing the\\n     * total supply.\\n     *\\n     * Emits a {Transfer} event with `to` set to the zero address.\\n     *\\n     * Requirements:\\n     *\\n     * - `account` cannot be the zero address.\\n     * - `account` must have at least `amount` tokens.\\n     */\\n    function _burn(address account, uint256 amount) internal virtual {\\n        require(account != address(0), \\\"ERC20: burn from the zero address\\\");\\n\\n        _beforeTokenTransfer(account, address(0), amount);\\n\\n        uint256 accountBalance = _balances[account];\\n        require(accountBalance >= amount, \\\"ERC20: burn amount exceeds balance\\\");\\n        unchecked {\\n            _balances[account] = accountBalance - amount;\\n        }\\n        _totalSupply -= amount;\\n\\n        emit Transfer(account, address(0), amount);\\n\\n        _afterTokenTransfer(account, address(0), amount);\\n    }\\n\\n    /**\\n     * @dev Sets `amount` as the allowance of `spender` over the `owner` s tokens.\\n     *\\n     * This internal function is equivalent to `approve`, and can be used to\\n     * e.g. set automatic allowances for certain subsystems, etc.\\n     *\\n     * Emits an {Approval} event.\\n     *\\n     * Requirements:\\n     *\\n     * - `owner` cannot be the zero address.\\n     * - `spender` cannot be the zero address.\\n     */\\n    function _approve(\\n        address owner,\\n        address spender,\\n        uint256 amount\\n    ) internal virtual {\\n        require(owner != address(0), \\\"ERC20: approve from the zero address\\\");\\n        require(spender != address(0), \\\"ERC20: approve to the zero address\\\");\\n\\n        _allowances[owner][spender] = amount;\\n        emit Approval(owner, spender, amount);\\n    }\\n\\n    /**\\n     * @dev Hook that is called before any transfer of tokens. This includes\\n     * minting and burning.\\n     *\\n     * Calling conditions:\\n     *\\n     * - when `from` and `to` are both non-zero, `amount` of ``from``'s tokens\\n     * will be transferred to `to`.\\n     * - when `from` is zero, `amount` tokens will be minted for `to`.\\n     * - when `to` is zero, `amount` of ``from``'s tokens will be burned.\\n     * - `from` and `to` are never both zero.\\n     *\\n     * To learn more about hooks, head to xref:ROOT:extending-contracts.adoc#using-hooks[Using Hooks].\\n     */\\n    function _beforeTokenTransfer(\\n        address from,\\n        address to,\\n        uint256 amount\\n    ) internal virtual {}\\n\\n    /**\\n     * @dev Hook that is called after any transfer of tokens. This includes\\n     * minting and burning.\\n     *\\n     * Calling conditions:\\n     *\\n     * - when `from` and `to` are both non-zero, `amount` of ``from``'s tokens\\n     * has been transferred to `to`.\\n     * - when `from` is zero, `amount` tokens have been minted for `to`.\\n     * - when `to` is zero, `amount` of ``from``'s tokens have been burned.\\n     * - `from` and `to` are never both zero.\\n     *\\n     * To learn more about hooks, head to xref:ROOT:extending-contracts.adoc#using-hooks[Using Hooks].\\n     */\\n    function _afterTokenTransfer(\\n        address from,\\n        address to,\\n        uint256 amount\\n    ) internal virtual {}\\n}\\n\"\r\n    },\r\n    \"openzeppelin-solidity/contracts/token/ERC20/IERC20.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC20 standard as defined in the EIP.\\n */\\ninterface IERC20 {\\n    /**\\n     * @dev Returns the amount of tokens in existence.\\n     */\\n    function totalSupply() external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the amount of tokens owned by `account`.\\n     */\\n    function balanceOf(address account) external view returns (uint256);\\n\\n    /**\\n     * @dev Moves `amount` tokens from the caller's account to `recipient`.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transfer(address recipient, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Returns the remaining number of tokens that `spender` will be\\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\\n     * zero by default.\\n     *\\n     * This value changes when {approve} or {transferFrom} are called.\\n     */\\n    function allowance(address owner, address spender) external view returns (uint256);\\n\\n    /**\\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\\n     * that someone may use both the old and the new allowance by unfortunate\\n     * transaction ordering. One possible solution to mitigate this race\\n     * condition is to first reduce the spender's allowance to 0 and set the\\n     * desired value afterwards:\\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address spender, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Moves `amount` tokens from `sender` to `recipient` using the\\n     * allowance mechanism. `amount` is then deducted from the caller's\\n     * allowance.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(\\n        address sender,\\n        address recipient,\\n        uint256 amount\\n    ) external returns (bool);\\n\\n    /**\\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\\n     * another (`to`).\\n     *\\n     * Note that `value` may be zero.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 value);\\n\\n    /**\\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\\n     * a call to {approve}. `value` is the new allowance.\\n     */\\n    event Approval(address indexed owner, address indexed spender, uint256 value);\\n}\\n\"\r\n    },\r\n    \"openzeppelin-solidity/contracts/token/ERC20/extensions/IERC20Metadata.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../IERC20.sol\\\";\\n\\n/**\\n * @dev Interface for the optional metadata functions from the ERC20 standard.\\n *\\n * _Available since v4.1._\\n */\\ninterface IERC20Metadata is IERC20 {\\n    /**\\n     * @dev Returns the name of the token.\\n     */\\n    function name() external view returns (string memory);\\n\\n    /**\\n     * @dev Returns the symbol of the token.\\n     */\\n    function symbol() external view returns (string memory);\\n\\n    /**\\n     * @dev Returns the decimals places of the token.\\n     */\\n    function decimals() external view returns (uint8);\\n}\\n\"\r\n    },\r\n    \"openzeppelin-solidity/contracts/utils/Context.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Provides information about the current execution context, including the\\n * sender of the transaction and its data. While these are generally available\\n * via msg.sender and msg.data, they should not be accessed in such a direct\\n * manner, since when dealing with meta-transactions the account sending and\\n * paying for execution may not be the actual sender (as far as an application\\n * is concerned).\\n *\\n * This contract is only required for intermediate, library-like contracts.\\n */\\nabstract contract Context {\\n    function _msgSender() internal view virtual returns (address) {\\n        return msg.sender;\\n    }\\n\\n    function _msgData() internal view virtual returns (bytes calldata) {\\n        return msg.data;\\n    }\\n}\\n\"\r\n    },\r\n    \"openzeppelin-solidity/contracts/access/Ownable.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../utils/Context.sol\\\";\\n\\n/**\\n * @dev Contract module which provides a basic access control mechanism, where\\n * there is an account (an owner) that can be granted exclusive access to\\n * specific functions.\\n *\\n * By default, the owner account will be the one that deploys the contract. This\\n * can later be changed with {transferOwnership}.\\n *\\n * This module is used through inheritance. It will make available the modifier\\n * `onlyOwner`, which can be applied to your functions to restrict their use to\\n * the owner.\\n */\\nabstract contract Ownable is Context {\\n    address private _owner;\\n\\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\\n\\n    /**\\n     * @dev Initializes the contract setting the deployer as the initial owner.\\n     */\\n    constructor() {\\n        _setOwner(_msgSender());\\n    }\\n\\n    /**\\n     * @dev Returns the address of the current owner.\\n     */\\n    function owner() public view virtual returns (address) {\\n        return _owner;\\n    }\\n\\n    /**\\n     * @dev Throws if called by any account other than the owner.\\n     */\\n    modifier onlyOwner() {\\n        require(owner() == _msgSender(), \\\"Ownable: caller is not the owner\\\");\\n        _;\\n    }\\n\\n    /**\\n     * @dev Leaves the contract without owner. It will not be possible to call\\n     * `onlyOwner` functions anymore. Can only be called by the current owner.\\n     *\\n     * NOTE: Renouncing ownership will leave the contract without an owner,\\n     * thereby removing any functionality that is only available to the owner.\\n     */\\n    function renounceOwnership() public virtual onlyOwner {\\n        _setOwner(address(0));\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Can only be called by the current owner.\\n     */\\n    function transferOwnership(address newOwner) public virtual onlyOwner {\\n        require(newOwner != address(0), \\\"Ownable: new owner is the zero address\\\");\\n        _setOwner(newOwner);\\n    }\\n\\n    function _setOwner(address newOwner) private {\\n        address oldOwner = _owner;\\n        _owner = newOwner;\\n        emit OwnershipTransferred(oldOwner, newOwner);\\n    }\\n}\\n\"\r\n    },\r\n    \"contracts/Services/Interfaces.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\r\\npragma solidity ^0.8.7;\\r\\n\\r\\ninterface RegistryInterface {\\r\\n    function pETH() external view returns (address);\\r\\n}\\r\\n\\r\\ninterface FactoryInterface {\\r\\n    function registry() external view returns (address);\\r\\n}\\r\\n\\r\\ninterface PTokenInterface {\\r\\n    function exchangeRateStored() external view returns (uint);\\r\\n    function borrowBalanceStored(address account) external view returns (uint);\\r\\n    function underlying() external view returns (address);\\r\\n}\\r\\n\\r\\ninterface CalcPoolPrice {\\r\\n    function getPoolPriceInUSD(address asset) external view returns (uint);\\r\\n}\\r\\n\\r\\ninterface PriceOracle {\\r\\n    function getUnderlyingPrice(address pToken) external view returns (uint);\\r\\n    function getPriceInUSD(address underlying) external view returns (uint);\\r\\n}\\r\\n\\r\\ninterface ControllerInterface {\\r\\n    function getOracle() external view returns (PriceOracle);\\r\\n    function getAssetsIn(address account) external view returns (address[] memory);\\r\\n    function factory() external view returns (address);\\r\\n}\\r\\n\\r\\ninterface AggregatorInterface {\\r\\n    function latestAnswer() external view returns (int256);\\r\\n}\\r\\n\\r\\ninterface ConvertInterface {\\r\\n    function getPTokenInAmount(address user) external view returns (uint);\\r\\n    function pTokenFrom() external view returns (address);\\r\\n}\\r\\n\"\r\n    },\r\n    \"contracts/Services/Transfers.sol\": {\r\n      \"content\": \"//SPDX-License-Identifier: MIT\\r\\npragma solidity ^0.8.7;\\r\\n\\r\\nimport \\\"./ERC20.sol\\\";\\r\\n\\r\\ncontract Transfers {\\r\\n    function doTransferIn(address from, address token, uint amount) internal returns (uint) {\\r\\n        uint balanceBefore = ERC20(token).balanceOf(address(this));\\r\\n        ERC20(token).transferFrom(from, address(this), amount);\\r\\n\\r\\n        bool success;\\r\\n        assembly {\\r\\n            switch returndatasize()\\r\\n            case 0 {                       // This is a non-standard ERC-20\\r\\n                success := not(0)          // set success to true\\r\\n            }\\r\\n            case 32 {                      // This is a compliant ERC-20\\r\\n                returndatacopy(0, 0, 32)\\r\\n                success := mload(0)        // Set `success = returndata` of external call\\r\\n            }\\r\\n            default {                      // This is an excessively non-compliant ERC-20, revert.\\r\\n                revert(0, 0)\\r\\n            }\\r\\n        }\\r\\n        require(success, \\\"TOKEN_TRANSFER_IN_FAILED\\\");\\r\\n\\r\\n        // Calculate the amount that was *actually* transferred\\r\\n        uint balanceAfter = ERC20(token).balanceOf(address(this));\\r\\n        require(balanceAfter >= balanceBefore, \\\"TOKEN_TRANSFER_IN_OVERFLOW\\\");\\r\\n        return balanceAfter - balanceBefore;   // underflow already checked above, just subtract\\r\\n    }\\r\\n\\r\\n    function doTransferOut(address token, address to, uint amount) internal {\\r\\n        ERC20(token).transfer(to, amount);\\r\\n\\r\\n        bool success;\\r\\n        assembly {\\r\\n            switch returndatasize()\\r\\n            case 0 {                      // This is a non-standard ERC-20\\r\\n                success := not(0)          // set success to true\\r\\n            }\\r\\n            case 32 {                     // This is a complaint ERC-20\\r\\n                returndatacopy(0, 0, 32)\\r\\n                success := mload(0)        // Set `success = returndata` of external call\\r\\n            }\\r\\n            default {                     // This is an excessively non-compliant ERC-20, revert.\\r\\n                revert(0, 0)\\r\\n            }\\r\\n        }\\r\\n        require(success, \\\"TOKEN_TRANSFER_OUT_FAILED\\\");\\r\\n    }\\r\\n}\\r\\n\"\r\n    }\r\n  },\r\n  \"settings\": {\r\n    \"optimizer\": {\r\n      \"enabled\": true,\r\n      \"runs\": 200\r\n    },\r\n    \"outputSelection\": {\r\n      \"*\": {\r\n        \"*\": [\r\n          \"evm.bytecode\",\r\n          \"evm.deployedBytecode\",\r\n          \"abi\"\r\n        ]\r\n      }\r\n    },\r\n    \"libraries\": {}\r\n  }\r\n}}","ABI":"[{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"startTimestamp_\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"endTimestamp_\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"controller_\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"pETH_\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"calcPoolPrice_\",\"type\":\"address\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"_user\",\"type\":\"address\"}],\"name\":\"AddedBlackList\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"_user\",\"type\":\"address\"}],\"name\":\"RemovedBlackList\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_evilUser\",\"type\":\"address\"}],\"name\":\"addBlackList\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"pToken\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"baseToken_\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"course_\",\"type\":\"uint256\"}],\"name\":\"addRefundPair\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"baseToken\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"baseTokenAmount\",\"type\":\"uint256\"}],\"name\":\"addTokensAndCheckpoint\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"balances\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"out\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"baseTokens\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"calcAccountBorrow\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"pToken\",\"type\":\"address\"}],\"name\":\"calcClaimAmount\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"calcPoolPrice\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"pToken\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"calcRefundAmount\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"checkBorrowBalance\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"checkpoints\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"pToken\",\"type\":\"address\"}],\"name\":\"claimToken\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"controller\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"endTimestamp\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getAllTotalAmount\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getAvailableLiquidity\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_maker\",\"type\":\"address\"}],\"name\":\"getBlackListStatus\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getBlockTimestamp\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"baseToken_\",\"type\":\"address\"}],\"name\":\"getCheckpointsLength\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getPTokenList\",\"outputs\":[{\"internalType\":\"address[]\",\"name\":\"\",\"type\":\"address[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getPTokenListLength\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"}],\"name\":\"getUserUsdAmount\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"isBlackListed\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"pETH\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"pTokenAmounts\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"pTokens\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"baseToken\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"course\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"pToken_\",\"type\":\"address\"}],\"name\":\"pTokensIsAllowed\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"pToken\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"pTokenAmount\",\"type\":\"uint256\"}],\"name\":\"refund\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_clearedUser\",\"type\":\"address\"}],\"name\":\"removeBlackList\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"token\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"removeUnused\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"startTimestamp\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"totalAmount\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}]","ContractName":"Refund","CompilerVersion":"v0.8.7+commit.e28d00a7","OptimizationUsed":"1","Runs":"200","ConstructorArguments":"00000000000000000000000000000000000000000000000000000000617f2e0000000000000000000000000000000000000000000000000000000000644f010000000000000000000000000036de5bbc618a04c9b471208ef52ee2b1f536e92d000000000000000000000000d43a42eaa613668b4fb6615f98c82ffc9da6a51600000000000000000000000075d917d2a9484dd9c15f6b09ac812370dc3b8422","EVMVersion":"Default","Library":"","LicenseType":"","Proxy":"0","Implementation":"","SwarmSource":""}]}