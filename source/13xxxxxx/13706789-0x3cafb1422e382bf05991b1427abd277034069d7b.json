{"status":"1","message":"OK","result":[{"SourceCode":"{{\r\n  \"language\": \"Solidity\",\r\n  \"settings\": {\r\n    \"evmVersion\": \"london\",\r\n    \"libraries\": {},\r\n    \"metadata\": {\r\n      \"bytecodeHash\": \"ipfs\",\r\n      \"useLiteralContent\": true\r\n    },\r\n    \"optimizer\": {\r\n      \"enabled\": true,\r\n      \"runs\": 200\r\n    },\r\n    \"remappings\": [],\r\n    \"outputSelection\": {\r\n      \"*\": {\r\n        \"*\": [\r\n          \"evm.bytecode\",\r\n          \"evm.deployedBytecode\",\r\n          \"devdoc\",\r\n          \"userdoc\",\r\n          \"metadata\",\r\n          \"abi\"\r\n        ]\r\n      }\r\n    }\r\n  },\r\n  \"sources\": {\r\n    \"src/Protocol/GetOperatorDarknodes.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: GPL-3.0\\n\\npragma solidity ^0.8.7;\\n\\ninterface IDarknodeRegistry {\\n    function numDarknodes() external view returns (uint256);\\n\\n    function getDarknodes(address _start, uint256 _count) external view returns (address[] memory);\\n\\n    function getDarknodeOperator(address _darknodeID) external view returns (address payable);\\n}\\n\\ncontract GetOperatorDarknodes {\\n    IDarknodeRegistry public darknodeRegistry;\\n\\n    constructor(address darknodeRegistry_) {\\n        darknodeRegistry = IDarknodeRegistry(darknodeRegistry_);\\n    }\\n\\n    function getOperatorDarknodes(address _operator) public view returns (address[] memory) {\\n        uint256 numDarknodes = darknodeRegistry.numDarknodes();\\n        address[] memory nodesPadded = new address[](numDarknodes);\\n\\n        address[] memory allNodes = darknodeRegistry.getDarknodes(address(0), 0);\\n\\n        uint256 j = 0;\\n        for (uint256 i = 0; i < allNodes.length; i++) {\\n            if (darknodeRegistry.getDarknodeOperator(allNodes[i]) == _operator) {\\n                nodesPadded[j] = (allNodes[i]);\\n                j++;\\n            }\\n        }\\n\\n        address[] memory nodes = new address[](j);\\n        for (uint256 i = 0; i < j; i++) {\\n            nodes[i] = nodesPadded[i];\\n        }\\n\\n        return nodes;\\n    }\\n}\\n\"\r\n    }\r\n  }\r\n}}","ABI":"[{\"inputs\":[{\"internalType\":\"address\",\"name\":\"darknodeRegistry_\",\"type\":\"address\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"inputs\":[],\"name\":\"darknodeRegistry\",\"outputs\":[{\"internalType\":\"contract IDarknodeRegistry\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_operator\",\"type\":\"address\"}],\"name\":\"getOperatorDarknodes\",\"outputs\":[{\"internalType\":\"address[]\",\"name\":\"\",\"type\":\"address[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"}]","ContractName":"GetOperatorDarknodes","CompilerVersion":"v0.8.7+commit.e28d00a7","OptimizationUsed":"1","Runs":"200","ConstructorArguments":"000000000000000000000000938f72c034f0e1b5df98c6bf6d336c33ade5fb56","EVMVersion":"Default","Library":"","LicenseType":"GNU GPLv3","Proxy":"0","Implementation":"","SwarmSource":""}]}