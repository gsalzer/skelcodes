{"status":"1","message":"OK","result":[{"SourceCode":"// SPDX-License-Identifier: BSD-2-Clause\r\n// File: sol-defifactory-token/interfaces/ICerbyBotDetection.sol\r\n\r\n\r\n\r\npragma solidity ^0.8.10;\r\n\r\nstruct TransactionInfo {\r\n    bool isBuy;\r\n    bool isSell;\r\n}\r\n\r\ninterface ICerbyBotDetection {\r\n        \r\n    function checkTransactionInfo(address tokenAddr, address sender, address recipient, uint recipientBalance, uint transferAmount)\r\n        external\r\n        returns (TransactionInfo memory output);\r\n    \r\n    function isBotAddress(address addr)\r\n        external\r\n        view\r\n        returns (bool);\r\n}\r\n// File: sol-defifactory-token/interfaces/ICerbyTokenMinterBurner.sol\r\n\r\n\r\n\r\npragma solidity ^0.8.10;\r\n\r\ninterface ICerbyTokenMinterBurner {\r\n    \r\n    function balanceOf(\r\n        address account\r\n    )\r\n        external\r\n        view\r\n        returns (uint);\r\n    \r\n    function totalSupply()\r\n        external\r\n        view\r\n        returns (uint);\r\n        \r\n    function mintHumanAddress(address to, uint desiredAmountToMint) external;\r\n\r\n    function burnHumanAddress(address from, uint desiredAmountToBurn) external;\r\n    \r\n    function transferCustom(address sender, address recipient, uint256 amount) external;\r\n    \r\n    function getUtilsContractAtPos(uint pos)\r\n        external\r\n        view\r\n        returns (address);\r\n}\r\n// File: sol-defifactory-token/openzeppelin/utils/structs/EnumerableSet.sol\r\n\r\n\r\n\r\npragma solidity ^0.8.0;\r\n\r\n/**\r\n * @dev Library for managing\r\n * https://en.wikipedia.org/wiki/Set_(abstract_data_type)[sets] of primitive\r\n * types.\r\n *\r\n * Sets have the following properties:\r\n *\r\n * - Elements are added, removed, and checked for existence in constant time\r\n * (O(1)).\r\n * - Elements are enumerated in O(n). No guarantees are made on the ordering.\r\n *\r\n * ```\r\n * contract Example {\r\n *     // Add the library methods\r\n *     using EnumerableSet for EnumerableSet.AddressSet;\r\n *\r\n *     // Declare a set state variable\r\n *     EnumerableSet.AddressSet private mySet;\r\n * }\r\n * ```\r\n *\r\n * As of v3.3.0, sets of type `bytes32` (`Bytes32Set`), `address` (`AddressSet`)\r\n * and `uint256` (`UintSet`) are supported.\r\n */\r\nlibrary EnumerableSet {\r\n    // To implement this library for multiple types with as little code\r\n    // repetition as possible, we write it in terms of a generic Set type with\r\n    // bytes32 values.\r\n    // The Set implementation uses private functions, and user-facing\r\n    // implementations (such as AddressSet) are just wrappers around the\r\n    // underlying Set.\r\n    // This means that we can only create new EnumerableSets for types that fit\r\n    // in bytes32.\r\n\r\n    struct Set {\r\n        // Storage of set values\r\n        bytes32[] _values;\r\n\r\n        // Position of the value in the `values` array, plus 1 because index 0\r\n        // means a value is not in the set.\r\n        mapping (bytes32 => uint256) _indexes;\r\n    }\r\n\r\n    /**\r\n     * @dev Add a value to a set. O(1).\r\n     *\r\n     * Returns true if the value was added to the set, that is if it was not\r\n     * already present.\r\n     */\r\n    function _add(Set storage set, bytes32 value) private returns (bool) {\r\n        if (!_contains(set, value)) {\r\n            set._values.push(value);\r\n            // The value is stored at length-1, but we add 1 to all indexes\r\n            // and use 0 as a sentinel value\r\n            set._indexes[value] = set._values.length;\r\n            return true;\r\n        } else {\r\n            return false;\r\n        }\r\n    }\r\n\r\n    /**\r\n     * @dev Removes a value from a set. O(1).\r\n     *\r\n     * Returns true if the value was removed from the set, that is if it was\r\n     * present.\r\n     */\r\n    function _remove(Set storage set, bytes32 value) private returns (bool) {\r\n        // We read and store the value's index to prevent multiple reads from the same storage slot\r\n        uint256 valueIndex = set._indexes[value];\r\n\r\n        if (valueIndex != 0) { // Equivalent to contains(set, value)\r\n            // To delete an element from the _values array in O(1), we swap the element to delete with the last one in\r\n            // the array, and then remove the last element (sometimes called as 'swap and pop').\r\n            // This modifies the order of the array, as noted in {at}.\r\n\r\n            uint256 toDeleteIndex = valueIndex - 1;\r\n            uint256 lastIndex = set._values.length - 1;\r\n\r\n            if (lastIndex != toDeleteIndex) {\r\n                bytes32 lastvalue = set._values[lastIndex];\r\n\r\n                // Move the last value to the index where the value to delete is\r\n                set._values[toDeleteIndex] = lastvalue;\r\n                // Update the index for the moved value\r\n                set._indexes[lastvalue] = valueIndex; // Replace lastvalue's index to valueIndex\r\n            }\r\n\r\n            // Delete the slot where the moved value was stored\r\n            set._values.pop();\r\n\r\n            // Delete the index for the deleted slot\r\n            delete set._indexes[value];\r\n\r\n            return true;\r\n        } else {\r\n            return false;\r\n        }\r\n    }\r\n\r\n    /**\r\n     * @dev Returns true if the value is in the set. O(1).\r\n     */\r\n    function _contains(Set storage set, bytes32 value) private view returns (bool) {\r\n        return set._indexes[value] != 0;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the number of values on the set. O(1).\r\n     */\r\n    function _length(Set storage set) private view returns (uint256) {\r\n        return set._values.length;\r\n    }\r\n\r\n   /**\r\n    * @dev Returns the value stored at position `index` in the set. O(1).\r\n    *\r\n    * Note that there are no guarantees on the ordering of values inside the\r\n    * array, and it may change when more values are added or removed.\r\n    *\r\n    * Requirements:\r\n    *\r\n    * - `index` must be strictly less than {length}.\r\n    */\r\n    function _at(Set storage set, uint256 index) private view returns (bytes32) {\r\n        return set._values[index];\r\n    }\r\n\r\n    // Bytes32Set\r\n\r\n    struct Bytes32Set {\r\n        Set _inner;\r\n    }\r\n\r\n    /**\r\n     * @dev Add a value to a set. O(1).\r\n     *\r\n     * Returns true if the value was added to the set, that is if it was not\r\n     * already present.\r\n     */\r\n    function add(Bytes32Set storage set, bytes32 value) internal returns (bool) {\r\n        return _add(set._inner, value);\r\n    }\r\n\r\n    /**\r\n     * @dev Removes a value from a set. O(1).\r\n     *\r\n     * Returns true if the value was removed from the set, that is if it was\r\n     * present.\r\n     */\r\n    function remove(Bytes32Set storage set, bytes32 value) internal returns (bool) {\r\n        return _remove(set._inner, value);\r\n    }\r\n\r\n    /**\r\n     * @dev Returns true if the value is in the set. O(1).\r\n     */\r\n    function contains(Bytes32Set storage set, bytes32 value) internal view returns (bool) {\r\n        return _contains(set._inner, value);\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the number of values in the set. O(1).\r\n     */\r\n    function length(Bytes32Set storage set) internal view returns (uint256) {\r\n        return _length(set._inner);\r\n    }\r\n\r\n   /**\r\n    * @dev Returns the value stored at position `index` in the set. O(1).\r\n    *\r\n    * Note that there are no guarantees on the ordering of values inside the\r\n    * array, and it may change when more values are added or removed.\r\n    *\r\n    * Requirements:\r\n    *\r\n    * - `index` must be strictly less than {length}.\r\n    */\r\n    function at(Bytes32Set storage set, uint256 index) internal view returns (bytes32) {\r\n        return _at(set._inner, index);\r\n    }\r\n\r\n    // AddressSet\r\n\r\n    struct AddressSet {\r\n        Set _inner;\r\n    }\r\n\r\n    /**\r\n     * @dev Add a value to a set. O(1).\r\n     *\r\n     * Returns true if the value was added to the set, that is if it was not\r\n     * already present.\r\n     */\r\n    function add(AddressSet storage set, address value) internal returns (bool) {\r\n        return _add(set._inner, bytes32(uint256(uint160(value))));\r\n    }\r\n\r\n    /**\r\n     * @dev Removes a value from a set. O(1).\r\n     *\r\n     * Returns true if the value was removed from the set, that is if it was\r\n     * present.\r\n     */\r\n    function remove(AddressSet storage set, address value) internal returns (bool) {\r\n        return _remove(set._inner, bytes32(uint256(uint160(value))));\r\n    }\r\n\r\n    /**\r\n     * @dev Returns true if the value is in the set. O(1).\r\n     */\r\n    function contains(AddressSet storage set, address value) internal view returns (bool) {\r\n        return _contains(set._inner, bytes32(uint256(uint160(value))));\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the number of values in the set. O(1).\r\n     */\r\n    function length(AddressSet storage set) internal view returns (uint256) {\r\n        return _length(set._inner);\r\n    }\r\n\r\n   /**\r\n    * @dev Returns the value stored at position `index` in the set. O(1).\r\n    *\r\n    * Note that there are no guarantees on the ordering of values inside the\r\n    * array, and it may change when more values are added or removed.\r\n    *\r\n    * Requirements:\r\n    *\r\n    * - `index` must be strictly less than {length}.\r\n    */\r\n    function at(AddressSet storage set, uint256 index) internal view returns (address) {\r\n        return address(uint160(uint256(_at(set._inner, index))));\r\n    }\r\n\r\n\r\n    // UintSet\r\n\r\n    struct UintSet {\r\n        Set _inner;\r\n    }\r\n\r\n    /**\r\n     * @dev Add a value to a set. O(1).\r\n     *\r\n     * Returns true if the value was added to the set, that is if it was not\r\n     * already present.\r\n     */\r\n    function add(UintSet storage set, uint256 value) internal returns (bool) {\r\n        return _add(set._inner, bytes32(value));\r\n    }\r\n\r\n    /**\r\n     * @dev Removes a value from a set. O(1).\r\n     *\r\n     * Returns true if the value was removed from the set, that is if it was\r\n     * present.\r\n     */\r\n    function remove(UintSet storage set, uint256 value) internal returns (bool) {\r\n        return _remove(set._inner, bytes32(value));\r\n    }\r\n\r\n    /**\r\n     * @dev Returns true if the value is in the set. O(1).\r\n     */\r\n    function contains(UintSet storage set, uint256 value) internal view returns (bool) {\r\n        return _contains(set._inner, bytes32(value));\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the number of values on the set. O(1).\r\n     */\r\n    function length(UintSet storage set) internal view returns (uint256) {\r\n        return _length(set._inner);\r\n    }\r\n\r\n   /**\r\n    * @dev Returns the value stored at position `index` in the set. O(1).\r\n    *\r\n    * Note that there are no guarantees on the ordering of values inside the\r\n    * array, and it may change when more values are added or removed.\r\n    *\r\n    * Requirements:\r\n    *\r\n    * - `index` must be strictly less than {length}.\r\n    */\r\n    function at(UintSet storage set, uint256 index) internal view returns (uint256) {\r\n        return uint256(_at(set._inner, index));\r\n    }\r\n}\r\n\r\n// File: sol-defifactory-token/openzeppelin/utils/introspection/IERC165.sol\r\n\r\n\r\n\r\npragma solidity ^0.8.0;\r\n\r\n/**\r\n * @dev Interface of the ERC165 standard, as defined in the\r\n * https://eips.ethereum.org/EIPS/eip-165[EIP].\r\n *\r\n * Implementers can declare support of contract interfaces, which can then be\r\n * queried by others ({ERC165Checker}).\r\n *\r\n * For an implementation, see {ERC165}.\r\n */\r\ninterface IERC165 {\r\n    /**\r\n     * @dev Returns true if this contract implements the interface defined by\r\n     * `interfaceId`. See the corresponding\r\n     * https://eips.ethereum.org/EIPS/eip-165#how-interfaces-are-identified[EIP section]\r\n     * to learn more about how these ids are created.\r\n     *\r\n     * This function call must use less than 30 000 gas.\r\n     */\r\n    function supportsInterface(bytes4 interfaceId) external view returns (bool);\r\n}\r\n\r\n// File: sol-defifactory-token/openzeppelin/utils/introspection/ERC165.sol\r\n\r\n\r\n\r\npragma solidity ^0.8.0;\r\n\r\n\r\n/**\r\n * @dev Implementation of the {IERC165} interface.\r\n *\r\n * Contracts that want to implement ERC165 should inherit from this contract and override {supportsInterface} to check\r\n * for the additional interface id that will be supported. For example:\r\n *\r\n * ```solidity\r\n * function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {\r\n *     return interfaceId == type(MyInterface).interfaceId || super.supportsInterface(interfaceId);\r\n * }\r\n * ```\r\n *\r\n * Alternatively, {ERC165Storage} provides an easier to use but more expensive implementation.\r\n */\r\nabstract contract ERC165 is IERC165 {\r\n    /**\r\n     * @dev See {IERC165-supportsInterface}.\r\n     */\r\n    function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {\r\n        return interfaceId == type(IERC165).interfaceId;\r\n    }\r\n}\r\n\r\n// File: sol-defifactory-token/openzeppelin/utils/Strings.sol\r\n\r\n\r\n\r\npragma solidity ^0.8.0;\r\n\r\n/**\r\n * @dev String operations.\r\n */\r\nlibrary Strings {\r\n    bytes16 private constant alphabet = \"0123456789abcdef\";\r\n\r\n    /**\r\n     * @dev Converts a `uint256` to its ASCII `string` decimal representation.\r\n     */\r\n    function toString(uint256 value) internal pure returns (string memory) {\r\n        // Inspired by OraclizeAPI's implementation - MIT licence\r\n        // https://github.com/oraclize/ethereum-api/blob/b42146b063c7d6ee1358846c198246239e9360e8/oraclizeAPI_0.4.25.sol\r\n\r\n        if (value == 0) {\r\n            return \"0\";\r\n        }\r\n        uint256 temp = value;\r\n        uint256 digits;\r\n        while (temp != 0) {\r\n            digits++;\r\n            temp /= 10;\r\n        }\r\n        bytes memory buffer = new bytes(digits);\r\n        while (value != 0) {\r\n            digits -= 1;\r\n            buffer[digits] = bytes1(uint8(48 + uint256(value % 10)));\r\n            value /= 10;\r\n        }\r\n        return string(buffer);\r\n    }\r\n\r\n    /**\r\n     * @dev Converts a `uint256` to its ASCII `string` hexadecimal representation.\r\n     */\r\n    function toHexString(uint256 value) internal pure returns (string memory) {\r\n        if (value == 0) {\r\n            return \"0x00\";\r\n        }\r\n        uint256 temp = value;\r\n        uint256 length = 0;\r\n        while (temp != 0) {\r\n            length++;\r\n            temp >>= 8;\r\n        }\r\n        return toHexString(value, length);\r\n    }\r\n\r\n    /**\r\n     * @dev Converts a `uint256` to its ASCII `string` hexadecimal representation with fixed length.\r\n     */\r\n    function toHexString(uint256 value, uint256 length) internal pure returns (string memory) {\r\n        bytes memory buffer = new bytes(2 * length + 2);\r\n        buffer[0] = \"0\";\r\n        buffer[1] = \"x\";\r\n        for (uint256 i = 2 * length + 1; i > 1; --i) {\r\n            buffer[i] = alphabet[value & 0xf];\r\n            value >>= 4;\r\n        }\r\n        require(value == 0, \"Strings: hex length insufficient\");\r\n        return string(buffer);\r\n    }\r\n\r\n}\r\n\r\n// File: sol-defifactory-token/openzeppelin/utils/Context.sol\r\n\r\n\r\n\r\npragma solidity ^0.8.0;\r\n\r\n/*\r\n * @dev Provides information about the current execution context, including the\r\n * sender of the transaction and its data. While these are generally available\r\n * via msg.sender and msg.data, they should not be accessed in such a direct\r\n * manner, since when dealing with meta-transactions the account sending and\r\n * paying for execution may not be the actual sender (as far as an application\r\n * is concerned).\r\n *\r\n * This contract is only required for intermediate, library-like contracts.\r\n */\r\nabstract contract Context {\r\n    function _msgSender() internal view virtual returns (address) {\r\n        return msg.sender;\r\n    }\r\n\r\n    function _msgData() internal view virtual returns (bytes calldata) {\r\n        this; // silence state mutability warning without generating bytecode - see https://github.com/ethereum/solidity/issues/2691\r\n        return msg.data;\r\n    }\r\n}\r\n\r\n// File: sol-defifactory-token/openzeppelin/access/AccessControl.sol\r\n\r\n\r\n\r\npragma solidity ^0.8.0;\r\n\r\n\r\n\r\n\r\n\r\nstruct RoleAccess {\r\n    bytes32 role;\r\n    address addr;\r\n}\r\n\r\n/**\r\n * @dev External interface of AccessControl declared to support ERC165 detection.\r\n */\r\ninterface IAccessControl {\r\n    function hasRole(bytes32 role, address account) external view returns (bool);\r\n    function getRoleAdmin(bytes32 role) external view returns (bytes32);\r\n    function grantRole(bytes32 role, address account) external;\r\n    function revokeRole(bytes32 role, address account) external;\r\n    function renounceRole(bytes32 role, address account) external;\r\n}\r\n\r\n/**\r\n * @dev Contract module that allows children to implement role-based access\r\n * control mechanisms. This is a lightweight version that doesn't allow enumerating role\r\n * members except through off-chain means by accessing the contract event logs. Some\r\n * applications may benefit from on-chain enumerability, for those cases see\r\n * {AccessControlEnumerable}.\r\n *\r\n * Roles are referred to by their `bytes32` identifier. These should be exposed\r\n * in the external API and be unique. The best way to achieve this is by\r\n * using `public constant` hash digests:\r\n *\r\n * ```\r\n * bytes32 public constant MY_ROLE = keccak256(\"MY_ROLE\");\r\n * ```\r\n *\r\n * Roles can be used to represent a set of permissions. To restrict access to a\r\n * function call, use {hasRole}:\r\n *\r\n * ```\r\n * function foo() public {\r\n *     require(hasRole(MY_ROLE, msg.sender));\r\n *     ...\r\n * }\r\n * ```\r\n *\r\n * Roles can be granted and revoked dynamically via the {grantRole} and\r\n * {revokeRole} functions. Each role has an associated admin role, and only\r\n * accounts that have a role's admin role can call {grantRole} and {revokeRole}.\r\n *\r\n * By default, the admin role for all roles is `ROLE_ADMIN`, which means\r\n * that only accounts with this role will be able to grant or revoke other\r\n * roles. More complex role relationships can be created by using\r\n * {_setRoleAdmin}.\r\n *\r\n * WARNING: The `ROLE_ADMIN` is also its own admin: it has permission to\r\n * grant and revoke this role. Extra precautions should be taken to secure\r\n * accounts that have been granted it.\r\n */\r\nabstract contract AccessControl is Context, IAccessControl, ERC165 {\r\n    struct RoleData {\r\n        mapping (address => bool) members;\r\n        bytes32 adminRole;\r\n    }\r\n\r\n    mapping (bytes32 => RoleData) private _roles;\r\n\r\n    bytes32 public constant ROLE_ADMIN = 0x00;\r\n\r\n    /**\r\n     * @dev Emitted when `newAdminRole` is set as ``role``'s admin role, replacing `previousAdminRole`\r\n     *\r\n     * `DEFAULT_ADMIN_ROLE` is the starting admin for all roles, despite\r\n     * {RoleAdminChanged} not being emitted signaling this.\r\n     *\r\n     * _Available since v3.1._\r\n     */\r\n    event RoleAdminChanged(bytes32 indexed role, bytes32 indexed previousAdminRole, bytes32 indexed newAdminRole);\r\n\r\n    /**\r\n     * @dev Emitted when `account` is granted `role`.\r\n     *\r\n     * `sender` is the account that originated the contract call, an admin role\r\n     * bearer except when using {_setupRole}.\r\n     */\r\n    event RoleGranted(bytes32 indexed role, address indexed account, address indexed sender);\r\n\r\n    /**\r\n     * @dev Emitted when `account` is revoked `role`.\r\n     *\r\n     * `sender` is the account that originated the contract call:\r\n     *   - if using `revokeRole`, it is the admin role bearer\r\n     *   - if using `renounceRole`, it is the role bearer (i.e. `account`)\r\n     */\r\n    event RoleRevoked(bytes32 indexed role, address indexed account, address indexed sender);\r\n\r\n    /**\r\n     * @dev Modifier that checks that an account has a specific role. Reverts\r\n     * with a standardized message including the required role.\r\n     *\r\n     * The format of the revert reason is given by the following regular expression:\r\n     *\r\n     *  /^AccessControl: account (0x[0-9a-f]{20}) is missing role (0x[0-9a-f]{32})$/\r\n     *\r\n     * _Available since v4.1._\r\n     */\r\n    modifier onlyRole(bytes32 role) {\r\n        _checkRole(role, _msgSender());\r\n        _;\r\n    }\r\n\r\n    /**\r\n     * @dev See {IERC165-supportsInterface}.\r\n     */\r\n    function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {\r\n        return interfaceId == type(IAccessControl).interfaceId\r\n            || super.supportsInterface(interfaceId);\r\n    }\r\n\r\n    /**\r\n     * @dev Returns `true` if `account` has been granted `role`.\r\n     */\r\n    function hasRole(bytes32 role, address account) public view override returns (bool) {\r\n        return _roles[role].members[account];\r\n    }\r\n\r\n    /**\r\n     * @dev Revert with a standard message if `account` is missing `role`.\r\n     *\r\n     * The format of the revert reason is given by the following regular expression:\r\n     *\r\n     *  /^AccessControl: account (0x[0-9a-f]{20}) is missing role (0x[0-9a-f]{32})$/\r\n     */\r\n    function _checkRole(bytes32 role, address account) internal view {\r\n        if(!hasRole(role, account)) {\r\n            revert(string(abi.encodePacked(\r\n                \"AccessControl: account \",\r\n                Strings.toHexString(uint160(account), 20),\r\n                \" is missing role \",\r\n                Strings.toHexString(uint256(role), 32)\r\n            )));\r\n        }\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the admin role that controls `role`. See {grantRole} and\r\n     * {revokeRole}.\r\n     *\r\n     * To change a role's admin, use {_setRoleAdmin}.\r\n     */\r\n    function getRoleAdmin(bytes32 role) public view override returns (bytes32) {\r\n        return _roles[role].adminRole;\r\n    }\r\n\r\n    /**\r\n     * @dev Grants `role` to `account`.\r\n     *\r\n     * If `account` had not been already granted `role`, emits a {RoleGranted}\r\n     * event.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - the caller must have ``role``'s admin role.\r\n     */\r\n    function grantRole(bytes32 role, address account) public virtual override onlyRole(ROLE_ADMIN) {\r\n        _grantRole(role, account);\r\n    }\r\n    \r\n    function grantRolesBulk(RoleAccess[] calldata roles)\r\n        external\r\n        onlyRole(ROLE_ADMIN)\r\n    {\r\n        for(uint i = 0; i<roles.length; i++)\r\n        {\r\n            _setupRole(roles[i].role, roles[i].addr);\r\n        }\r\n    }\r\n\r\n    /**\r\n     * @dev Revokes `role` from `account`.\r\n     *\r\n     * If `account` had been granted `role`, emits a {RoleRevoked} event.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - the caller must have ``role``'s admin role.\r\n     */\r\n    function revokeRole(bytes32 role, address account) public virtual override onlyRole(getRoleAdmin(role)) {\r\n        _revokeRole(role, account);\r\n    }\r\n\r\n    /**\r\n     * @dev Revokes `role` from the calling account.\r\n     *\r\n     * Roles are often managed via {grantRole} and {revokeRole}: this function's\r\n     * purpose is to provide a mechanism for accounts to lose their privileges\r\n     * if they are compromised (such as when a trusted device is misplaced).\r\n     *\r\n     * If the calling account had been granted `role`, emits a {RoleRevoked}\r\n     * event.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - the caller must be `account`.\r\n     */\r\n    function renounceRole(bytes32 role, address account) public virtual override {\r\n        require(account == _msgSender(), \"AccessControl: can only renounce roles for self\");\r\n\r\n        _revokeRole(role, account);\r\n    }\r\n\r\n    /**\r\n     * @dev Grants `role` to `account`.\r\n     *\r\n     * If `account` had not been already granted `role`, emits a {RoleGranted}\r\n     * event. Note that unlike {grantRole}, this function doesn't perform any\r\n     * checks on the calling account.\r\n     *\r\n     * [WARNING]\r\n     * ====\r\n     * This function should only be called from the constructor when setting\r\n     * up the initial roles for the system.\r\n     *\r\n     * Using this function in any other way is effectively circumventing the admin\r\n     * system imposed by {AccessControl}.\r\n     * ====\r\n     */\r\n    function _setupRole(bytes32 role, address account) internal virtual {\r\n        _grantRole(role, account);\r\n    }\r\n\r\n    /**\r\n     * @dev Sets `adminRole` as ``role``'s admin role.\r\n     *\r\n     * Emits a {RoleAdminChanged} event.\r\n     */\r\n    function _setRoleAdmin(bytes32 role, bytes32 adminRole) internal virtual {\r\n        emit RoleAdminChanged(role, getRoleAdmin(role), adminRole);\r\n        _roles[role].adminRole = adminRole;\r\n    }\r\n\r\n    function _grantRole(bytes32 role, address account) private {\r\n        if (!hasRole(role, account)) {\r\n            _roles[role].members[account] = true;\r\n            emit RoleGranted(role, account, _msgSender());\r\n        }\r\n    }\r\n\r\n    function _revokeRole(bytes32 role, address account) private {\r\n        if (hasRole(role, account)) {\r\n            _roles[role].members[account] = false;\r\n            emit RoleRevoked(role, account, _msgSender());\r\n        }\r\n    }\r\n}\r\n\r\n// File: sol-defifactory-token/openzeppelin/access/AccessControlEnumerable.sol\r\n\r\n\r\n\r\npragma solidity ^0.8.0;\r\n\r\n\r\n\r\n/**\r\n * @dev External interface of AccessControlEnumerable declared to support ERC165 detection.\r\n */\r\ninterface IAccessControlEnumerable {\r\n    function getRoleMember(bytes32 role, uint256 index) external view returns (address);\r\n    function getRoleMemberCount(bytes32 role) external view returns (uint256);\r\n}\r\n\r\n/**\r\n * @dev Extension of {AccessControl} that allows enumerating the members of each role.\r\n */\r\nabstract contract AccessControlEnumerable is IAccessControlEnumerable, AccessControl {\r\n    using EnumerableSet for EnumerableSet.AddressSet;\r\n\r\n    mapping (bytes32 => EnumerableSet.AddressSet) private _roleMembers;\r\n\r\n    /**\r\n     * @dev See {IERC165-supportsInterface}.\r\n     */\r\n    function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {\r\n        return interfaceId == type(IAccessControlEnumerable).interfaceId\r\n            || super.supportsInterface(interfaceId);\r\n    }\r\n\r\n    /**\r\n     * @dev Returns one of the accounts that have `role`. `index` must be a\r\n     * value between 0 and {getRoleMemberCount}, non-inclusive.\r\n     *\r\n     * Role bearers are not sorted in any particular way, and their ordering may\r\n     * change at any point.\r\n     *\r\n     * WARNING: When using {getRoleMember} and {getRoleMemberCount}, make sure\r\n     * you perform all queries on the same block. See the following\r\n     * https://forum.openzeppelin.com/t/iterating-over-elements-on-enumerableset-in-openzeppelin-contracts/2296[forum post]\r\n     * for more information.\r\n     */\r\n    function getRoleMember(bytes32 role, uint256 index) public view override returns (address) {\r\n        return _roleMembers[role].at(index);\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the number of accounts that have `role`. Can be used\r\n     * together with {getRoleMember} to enumerate all bearers of a role.\r\n     */\r\n    function getRoleMemberCount(bytes32 role) public view override returns (uint256) {\r\n        return _roleMembers[role].length();\r\n    }\r\n\r\n    /**\r\n     * @dev Overload {grantRole} to track enumerable memberships\r\n     */\r\n    function grantRole(bytes32 role, address account) public virtual override {\r\n        super.grantRole(role, account);\r\n        _roleMembers[role].add(account);\r\n    }\r\n\r\n    /**\r\n     * @dev Overload {revokeRole} to track enumerable memberships\r\n     */\r\n    function revokeRole(bytes32 role, address account) public virtual override {\r\n        super.revokeRole(role, account);\r\n        _roleMembers[role].remove(account);\r\n    }\r\n\r\n    /**\r\n     * @dev Overload {renounceRole} to track enumerable memberships\r\n     */\r\n    function renounceRole(bytes32 role, address account) public virtual override {\r\n        super.renounceRole(role, account);\r\n        _roleMembers[role].remove(account);\r\n    }\r\n\r\n    /**\r\n     * @dev Overload {_setupRole} to track enumerable memberships\r\n     */\r\n    function _setupRole(bytes32 role, address account) internal virtual override {\r\n        super._setupRole(role, account);\r\n        _roleMembers[role].add(account);\r\n    }\r\n}\r\n\r\n// File: sol-defifactory-token/CerbyStakingSystem.sol\r\n\r\n\r\n\r\npragma solidity ^0.8.10;\r\n\r\n\r\n\r\n\r\nstruct DailySnapshot {\r\n    uint inflationAmount;\r\n    uint totalShares;\r\n    uint sharePrice;\r\n}\r\n\r\nstruct Stake {\r\n    address owner;\r\n    uint stakedAmount;\r\n    uint startDay;\r\n    uint lockedForXDays;\r\n    uint endDay;\r\n    uint maxSharesCountOnStartStake;\r\n}\r\n\r\nstruct StartStake {\r\n    uint stakedAmount;\r\n    uint lockedForXDays;\r\n}\r\n\r\nstruct Settings {\r\n    uint MINIMUM_DAYS_FOR_HIGH_PENALTY;\r\n    uint CONTROLLED_APY;\r\n    uint SMALLER_PAYS_BETTER_BONUS;\r\n    uint LONGER_PAYS_BETTER_BONUS;\r\n    uint END_STAKE_FROM;\r\n    uint END_STAKE_TO;\r\n    uint MINIMUM_STAKE_DAYS;\r\n    uint MAXIMUM_STAKE_DAYS;\r\n}\r\n\r\ncontract CerbyStakingSystem is AccessControlEnumerable {\r\n    DailySnapshot[] public dailySnapshots;\r\n    uint[] public cachedInterestPerShare;\r\n    \r\n    Stake[] public stakes;\r\n    Settings public settings;\r\n    \r\n    uint constant CERBY_BOT_DETECTION_CONTRACT_ID = 3;\r\n    uint constant MINIMUM_SMALLER_PAYS_BETTER = 1000 * 1e18; // 1k CERBY\r\n    uint constant MAXIMUM_SMALLER_PAYS_BETTER = 1000000 * 1e18; // 1M CERBY\r\n    uint constant CACHED_DAYS_INTEREST = 100;\r\n    uint constant DAYS_IN_ONE_YEAR = 365;\r\n    uint constant SHARE_PRICE_DENORM = 1e18;\r\n    uint constant INTEREST_PER_SHARE_DENORM = 1e18;\r\n    uint constant APY_DENORM = 1e6;\r\n    uint constant SECONDS_IN_ONE_DAY = 86400;\r\n    \r\n    ICerbyTokenMinterBurner cerbyToken = ICerbyTokenMinterBurner(\r\n        0xdef1fac7Bf08f173D286BbBDcBeeADe695129840\r\n    );\r\n    \r\n    uint public launchTimestamp;\r\n    \r\n    event StakeStarted(\r\n        uint stakeId, \r\n        address owner, \r\n        uint stakedAmount, \r\n        uint startDay, \r\n        uint lockedForXDays, \r\n        uint sharesCount\r\n    );\r\n    event StakeEnded(\r\n        uint stakeId, \r\n        uint endDay, \r\n        uint interest, \r\n        uint penalty\r\n    );\r\n    event StakeOwnerChanged(\r\n        uint stakeId, \r\n        address newOwner\r\n    );\r\n    event StakeUpdated(\r\n        uint stakeId, \r\n        uint lockedForXDays,\r\n        uint sharesCount\r\n    );\r\n    \r\n    event DailySnapshotSealed(\r\n        uint sealedDay, \r\n        uint inflationAmount,\r\n        uint totalShares,\r\n        uint sharePrice,\r\n        uint totalStaked,\r\n        uint totalSupply\r\n    );\r\n    event CachedInterestPerShareSealed(\r\n        uint sealedDay,\r\n        uint sealedCachedDay, \r\n        uint cachedInterestPerShare\r\n    );\r\n    \r\n    event SettingsUpdated(\r\n        Settings Settings\r\n    );\r\n    \r\n    event NewMaxSharePriceReached(\r\n        uint newSharePrice\r\n    );\r\n   \r\n    event BurnedAndAddedToStakersInflation(\r\n        address fromAddr, \r\n        uint amountToBurn, \r\n        uint currentDay\r\n    );\r\n    \r\n    constructor() \r\n    {\r\n        settings.MINIMUM_DAYS_FOR_HIGH_PENALTY = 0;\r\n        settings.CONTROLLED_APY = 4e5; // 40%\r\n        settings.END_STAKE_FROM = 30;\r\n        settings.END_STAKE_TO = 2*DAYS_IN_ONE_YEAR; // 5% per month penalty\r\n        settings.MINIMUM_STAKE_DAYS = 1;\r\n        settings.MAXIMUM_STAKE_DAYS = 100*DAYS_IN_ONE_YEAR;\r\n        settings.LONGER_PAYS_BETTER_BONUS = 3e6; // 3e6/1e6 = 300% shares bonus max\r\n        settings.SMALLER_PAYS_BETTER_BONUS = 25e4; // 25e4/1e6 = 25% shares bonus max\r\n        \r\n        \r\n        launchTimestamp = 1635604537; // 30 October 2021\r\n        \r\n        dailySnapshots.push(DailySnapshot(\r\n            0,\r\n            0,\r\n            SHARE_PRICE_DENORM\r\n        ));\r\n        emit DailySnapshotSealed(\r\n            0,\r\n            0,\r\n            0,\r\n            SHARE_PRICE_DENORM,\r\n            0,\r\n            0\r\n        );\r\n        dailySnapshots.push(DailySnapshot(\r\n            0,\r\n            0,\r\n            SHARE_PRICE_DENORM\r\n        ));\r\n        cachedInterestPerShare.push(0);\r\n        emit NewMaxSharePriceReached(SHARE_PRICE_DENORM);\r\n        \r\n        updateAllSnapshots();\r\n        \r\n        _setupRole(ROLE_ADMIN, msg.sender);\r\n    }\r\n    \r\n    modifier onlyRealUsers()\r\n    {\r\n        ICerbyBotDetection iCerbyBotDetection = ICerbyBotDetection(\r\n            ICerbyTokenMinterBurner(cerbyToken).getUtilsContractAtPos(CERBY_BOT_DETECTION_CONTRACT_ID)\r\n        );\r\n        require(\r\n            !iCerbyBotDetection.isBotAddress(msg.sender),\r\n            \"SS: Only real users allowed!\"\r\n        );\r\n        _;\r\n    }\r\n    \r\n    modifier onlyStakeOwners(uint stakeId)\r\n    {\r\n        require(\r\n            msg.sender == stakes[stakeId].owner,\r\n            \"SS: Stake owner does not match\"\r\n        );\r\n        _;\r\n    }\r\n    \r\n    modifier onlyExistingStake(uint stakeId)\r\n    {\r\n        require(\r\n            stakeId < stakes.length,\r\n            \"SS: Stake does not exist\"\r\n        );\r\n        _;\r\n    }\r\n    \r\n    modifier onlyActiveStake(uint stakeId)\r\n    {\r\n        require(\r\n            stakes[stakeId].endDay == 0,\r\n            \"SS: Stake was already ended\"\r\n        );\r\n        _;\r\n    }\r\n    \r\n    function adminUpdateSettings(Settings calldata _settings)\r\n        public\r\n        onlyRole(ROLE_ADMIN)\r\n    {\r\n        settings = _settings;\r\n        \r\n        emit SettingsUpdated(_settings);\r\n    }\r\n    \r\n    function adminBurnAndAddToStakersInflation(address fromAddr, uint amountToBurn)\r\n        public\r\n        onlyRole(ROLE_ADMIN)\r\n    {\r\n        updateAllSnapshots();\r\n        \r\n        cerbyToken.burnHumanAddress(fromAddr, amountToBurn);\r\n        \r\n        uint today = getCurrentDaySinceLaunch();\r\n        dailySnapshots[today].inflationAmount += amountToBurn;\r\n        \r\n        emit BurnedAndAddedToStakersInflation(fromAddr, amountToBurn, today);\r\n    }\r\n    \r\n    function bulkTransferOwnership(uint[] calldata stakeIds, address newOwner)\r\n        public\r\n    {\r\n        for(uint i = 0; i<stakeIds.length; i++)\r\n        {\r\n            transferOwnership(stakeIds[i], newOwner);\r\n        }\r\n    }\r\n    \r\n    function transferOwnership(uint stakeId, address newOwner)\r\n        public\r\n        onlyRealUsers()\r\n        onlyStakeOwners(stakeId)\r\n        onlyExistingStake(stakeId)\r\n        onlyActiveStake(stakeId)\r\n    {\r\n        require(\r\n            stakes[stakeId].owner != newOwner,\r\n            \"SS: New owner must be different from old owner\"\r\n        );\r\n        \r\n        updateAllSnapshots();\r\n        \r\n        stakes[stakeId].owner = newOwner;\r\n        emit StakeOwnerChanged(stakeId, newOwner);\r\n    }\r\n    \r\n    function updateAllSnapshots()\r\n        public\r\n    {\r\n        updateSnapshots(getCurrentDaySinceLaunch());\r\n    }\r\n    \r\n    function updateSnapshots(uint givenDay)\r\n        public\r\n    {\r\n        require(\r\n            givenDay <= getCurrentDaySinceLaunch(),\r\n            \"SS: Exceeded current day\"\r\n        );\r\n        \r\n        uint startDay = dailySnapshots.length-1; // last sealed day\r\n        if (startDay == givenDay) return;\r\n        \r\n        for (uint i = startDay; i<givenDay; i++)\r\n        {\r\n            uint currentSnapshotIndex = dailySnapshots.length > i? i: dailySnapshots.length-1;\r\n            uint sharesCount =\r\n                ((settings.LONGER_PAYS_BETTER_BONUS + APY_DENORM) * SHARE_PRICE_DENORM) / \r\n                    (APY_DENORM * dailySnapshots[currentSnapshotIndex].sharePrice);\r\n            uint inflationAmount = \r\n                (settings.CONTROLLED_APY * (dailySnapshots[currentSnapshotIndex].totalShares + sharesCount)) / \r\n                    (sharesCount * DAYS_IN_ONE_YEAR * APY_DENORM);\r\n            \r\n            if (dailySnapshots.length > i)\r\n            {\r\n                dailySnapshots[currentSnapshotIndex].inflationAmount += inflationAmount;\r\n            } else\r\n            {\r\n                dailySnapshots.push(DailySnapshot(\r\n                    inflationAmount,\r\n                    dailySnapshots[currentSnapshotIndex].totalShares,\r\n                    dailySnapshots[currentSnapshotIndex].sharePrice\r\n                ));\r\n            }\r\n            emit DailySnapshotSealed(\r\n                i,\r\n                dailySnapshots[currentSnapshotIndex].inflationAmount,\r\n                dailySnapshots[currentSnapshotIndex].totalShares,\r\n                dailySnapshots[currentSnapshotIndex].sharePrice,\r\n                getTotalTokensStaked(),\r\n                cerbyToken.totalSupply()\r\n            );\r\n        }\r\n        \r\n        if (dailySnapshots.length == givenDay)\r\n        {\r\n            dailySnapshots.push(DailySnapshot(\r\n                0,\r\n                dailySnapshots[givenDay-1].totalShares,\r\n                dailySnapshots[givenDay-1].sharePrice\r\n            ));\r\n        }\r\n        \r\n        uint startCachedDay = cachedInterestPerShare.length-1;\r\n        uint endCachedDay = givenDay / CACHED_DAYS_INTEREST;\r\n        for(uint i = startCachedDay; i<endCachedDay; i++)\r\n        {\r\n            uint interestPerShare;\r\n            for(uint j = i*CACHED_DAYS_INTEREST; j<(i+1)*CACHED_DAYS_INTEREST; j++)\r\n            {\r\n                if (dailySnapshots[j].totalShares == 0) continue;\r\n                \r\n                interestPerShare += \r\n                    (dailySnapshots[j].inflationAmount * INTEREST_PER_SHARE_DENORM) / dailySnapshots[j].totalShares;\r\n            }\r\n            \r\n            if (cachedInterestPerShare.length > i)\r\n            {\r\n                cachedInterestPerShare[i] = interestPerShare;\r\n            } else {\r\n                cachedInterestPerShare.push(interestPerShare);\r\n            }\r\n            emit CachedInterestPerShareSealed(\r\n                i, // sealedDay\r\n                cachedInterestPerShare.length - 1, // sealedCachedDay\r\n                interestPerShare\r\n            );\r\n        }\r\n        if (cachedInterestPerShare.length == endCachedDay)\r\n        {\r\n            cachedInterestPerShare.push(0);\r\n        }\r\n    }\r\n    \r\n    function bulkStartStake(StartStake[] calldata startStakes)\r\n        public\r\n    {\r\n        for(uint i; i<startStakes.length; i++)\r\n        {\r\n            startStake(startStakes[i]);\r\n        }\r\n    }\r\n    \r\n    function startStake(StartStake memory _startStake)\r\n        public\r\n        onlyRealUsers()\r\n        returns(uint stakeId)\r\n    {\r\n        require(\r\n            _startStake.stakedAmount > 0,\r\n            \"SS: StakedAmount has to be larger than zero\"\r\n        );\r\n        require(\r\n            _startStake.stakedAmount <= cerbyToken.balanceOf(msg.sender),\r\n            \"SS: StakedAmount exceeds balance\"\r\n        );\r\n        require(\r\n            _startStake.lockedForXDays >= settings.MINIMUM_STAKE_DAYS,\r\n            \"SS: Stake must be locked for more than min days\"\r\n        );\r\n        require(\r\n            _startStake.lockedForXDays <= settings.MAXIMUM_STAKE_DAYS,\r\n            \"SS: Stake must be locked for less than max years\"\r\n        );\r\n        \r\n        updateAllSnapshots();\r\n        \r\n        cerbyToken.transferCustom(msg.sender, address(this), _startStake.stakedAmount);\r\n        \r\n        uint today = getCurrentDaySinceLaunch();\r\n        Stake memory stake = Stake(\r\n            msg.sender,\r\n            _startStake.stakedAmount,\r\n            today,\r\n            _startStake.lockedForXDays,\r\n            0,\r\n            0\r\n        );\r\n        stake.maxSharesCountOnStartStake = getSharesCountByStake(stake, 0);\r\n        \r\n        stakes.push(\r\n            stake\r\n        );\r\n        stakeId = stakes.length - 1;\r\n        \r\n        dailySnapshots[today].totalShares += stake.maxSharesCountOnStartStake;\r\n        \r\n        emit StakeStarted(\r\n            stakeId,\r\n            stake.owner,\r\n            stake.stakedAmount, \r\n            stake.startDay,\r\n            stake.lockedForXDays,\r\n            stake.maxSharesCountOnStartStake\r\n        );\r\n        \r\n        return stakeId;\r\n    }\r\n    \r\n    function bulkEndStake(uint[] calldata stakeIds)\r\n        public\r\n    {\r\n        for(uint i; i<stakeIds.length; i++)\r\n        {\r\n            endStake(stakeIds[i]);\r\n        }\r\n    }\r\n    \r\n    function endStake(\r\n        uint stakeId\r\n    )\r\n        public\r\n        onlyRealUsers()\r\n        onlyStakeOwners(stakeId)\r\n        onlyExistingStake(stakeId)\r\n        onlyActiveStake(stakeId)\r\n    {\r\n        updateAllSnapshots();\r\n        \r\n        uint today = getCurrentDaySinceLaunch();\r\n        stakes[stakeId].endDay = today;\r\n        \r\n        cerbyToken.transferCustom(address(this), msg.sender, stakes[stakeId].stakedAmount);\r\n        \r\n        uint interest;\r\n        if (\r\n                today < stakes[stakeId].startDay + stakes[stakeId].lockedForXDays\r\n        ) { // Early end stake: Calculating interest similar to scrapeStake one\r\n            Stake memory modifiedStakeToGetInterest = stakes[stakeId];\r\n            modifiedStakeToGetInterest.lockedForXDays = today - stakes[stakeId].startDay;\r\n            \r\n            interest = getInterestByStake(modifiedStakeToGetInterest, today);\r\n        } else { // Late or correct end stake\r\n            interest = getInterestByStake(stakes[stakeId], today);\r\n        }\r\n        \r\n        if (interest > 0)\r\n        {\r\n            cerbyToken.mintHumanAddress(msg.sender, interest);\r\n        }\r\n        \r\n        uint penalty = getPenaltyByStake(stakes[stakeId], today, interest);\r\n        if (penalty > 0) \r\n        {\r\n            cerbyToken.burnHumanAddress(msg.sender, penalty);\r\n            dailySnapshots[today].inflationAmount += penalty;\r\n        }\r\n        \r\n        uint payout = stakes[stakeId].stakedAmount + interest - penalty;\r\n        uint ROI = (payout * SHARE_PRICE_DENORM) / stakes[stakeId].stakedAmount;\r\n        if (ROI > dailySnapshots[today].sharePrice) \r\n        {\r\n           dailySnapshots[today].sharePrice = ROI;\r\n           emit NewMaxSharePriceReached(ROI);\r\n        }\r\n        \r\n        dailySnapshots[today].totalShares -= stakes[stakeId].maxSharesCountOnStartStake;\r\n        \r\n        emit StakeEnded(stakeId, today, interest, penalty);\r\n    }\r\n    \r\n    function bulkScrapeStake(uint[] calldata stakeIds)\r\n        public\r\n    {\r\n        for(uint i; i<stakeIds.length; i++)\r\n        {\r\n            scrapeStake(stakeIds[i]);\r\n        }\r\n    }\r\n    \r\n    function scrapeStake(\r\n        uint stakeId\r\n    )\r\n        public\r\n        onlyRealUsers()\r\n        onlyStakeOwners(stakeId)\r\n        onlyExistingStake(stakeId)\r\n        onlyActiveStake(stakeId)\r\n    {\r\n        updateAllSnapshots();\r\n        \r\n        uint today = getCurrentDaySinceLaunch();\r\n        require(\r\n            today > stakes[stakeId].startDay,\r\n            \"SS: Scraping is available once in 1 day\"\r\n        );\r\n        require(\r\n            today < stakes[stakeId].startDay + stakes[stakeId].lockedForXDays,\r\n            \"SS: Scraping is available once while stake is In Progress status\"\r\n        );\r\n        \r\n        uint oldLockedForXDays = stakes[stakeId].lockedForXDays;\r\n        uint oldSharesCount = stakes[stakeId].maxSharesCountOnStartStake;\r\n        \r\n        stakes[stakeId].lockedForXDays = today - stakes[stakeId].startDay;\r\n        uint newSharesCount = getSharesCountByStake(stakes[stakeId], 0);\r\n        \r\n        dailySnapshots[today].totalShares = dailySnapshots[today].totalShares - oldSharesCount + newSharesCount;\r\n        stakes[stakeId].maxSharesCountOnStartStake = newSharesCount;\r\n        \r\n        emit StakeUpdated(\r\n            stakeId, \r\n            stakes[stakeId].lockedForXDays,\r\n            newSharesCount\r\n        );\r\n        \r\n        endStake(stakeId);\r\n        \r\n        uint newLockedForXDays = oldLockedForXDays - stakes[stakeId].lockedForXDays;\r\n        startStake(StartStake(stakes[stakeId].stakedAmount, newLockedForXDays));\r\n    }\r\n    \r\n    function getTotalTokensStaked()\r\n        public\r\n        view\r\n        returns(uint)\r\n    {\r\n        return ICerbyTokenMinterBurner(cerbyToken).balanceOf(address(this));\r\n    }\r\n    \r\n    function getDailySnapshotsLength()\r\n        public\r\n        view\r\n        returns(uint)\r\n    {\r\n        return dailySnapshots.length;\r\n    }\r\n    \r\n    function getCachedInterestPerShareLength()\r\n        public\r\n        view\r\n        returns(uint)\r\n    {\r\n        return cachedInterestPerShare.length;\r\n    }\r\n    \r\n    function getStakesLength()\r\n        public\r\n        view\r\n        returns(uint)\r\n    {\r\n        return stakes.length;\r\n    }\r\n    \r\n    function getInterestById(uint stakeId, uint givenDay)\r\n        public\r\n        view\r\n        returns (uint)\r\n    {\r\n        return getInterestByStake(stakes[stakeId], givenDay);\r\n    }\r\n    \r\n    function getInterestByStake(Stake memory stake, uint givenDay)\r\n        public\r\n        view\r\n        returns (uint)\r\n    {\r\n        if (givenDay <= stake.startDay) return 0;\r\n        \r\n        uint interest;\r\n        \r\n        uint endDay = minOfTwoUints(givenDay, stake.startDay + stake.lockedForXDays);\r\n        endDay = minOfTwoUints(endDay, dailySnapshots.length);\r\n        \r\n        uint sharesCount = getSharesCountByStake(stake, givenDay);\r\n        uint startCachedDay = stake.startDay/CACHED_DAYS_INTEREST + 1;\r\n        uint endBeforeFirstCachedDay = minOfTwoUints(endDay, startCachedDay*CACHED_DAYS_INTEREST); \r\n        for(uint i = stake.startDay; i<endBeforeFirstCachedDay; i++)\r\n        {\r\n            if (dailySnapshots[i].totalShares == 0) continue;\r\n            \r\n            interest += (dailySnapshots[i].inflationAmount * sharesCount) / dailySnapshots[i].totalShares;\r\n        }\r\n        \r\n        uint endCachedDay = endDay/CACHED_DAYS_INTEREST; \r\n        for(uint i = startCachedDay; i<endCachedDay; i++)\r\n        {\r\n            interest += (cachedInterestPerShare[i] * sharesCount) / INTEREST_PER_SHARE_DENORM;\r\n        }\r\n        \r\n        uint startAfterLastCachedDay = endDay - endDay % CACHED_DAYS_INTEREST;\r\n        if (startAfterLastCachedDay > stake.startDay) // do not double iterate if numberOfDaysServed < CACHED_DAYS_INTEREST \r\n        {\r\n            for(uint i = startAfterLastCachedDay; i<endDay; i++)\r\n            {\r\n                if (dailySnapshots[i].totalShares == 0) continue;\r\n                \r\n                interest += (dailySnapshots[i].inflationAmount * sharesCount) / dailySnapshots[i].totalShares;\r\n            }\r\n        }\r\n        \r\n        return interest;\r\n    }\r\n    \r\n    function getPenaltyById(uint stakeId, uint givenDay, uint interest)\r\n        public\r\n        view\r\n        returns (uint)\r\n    {\r\n        return getPenaltyByStake(stakes[stakeId], givenDay, interest);\r\n    }\r\n    \r\n    function getPenaltyByStake(Stake memory stake, uint givenDay, uint interest)\r\n        public\r\n        view\r\n        returns (uint)\r\n    {\r\n        /*\r\n        0 -- 0 days served => 0% principal back\r\n        0 days -- 100% served --> 0-100% (principal+interest) back\r\n        100% + 30 days --> 100% (principal+interest) back\r\n        100% + 30 days -- 100% + 30 days + 2*365 days --> 100-10% (principal+interest) back\r\n        > 100% + 30 days + 30*20 days --> 10% (principal+interest) back\r\n        */\r\n        uint penalty;\r\n        uint howManyDaysServed = givenDay > stake.startDay? givenDay - stake.startDay: 0;\r\n        uint riskAmount = stake.stakedAmount + interest;\r\n        \r\n        if (howManyDaysServed <= settings.MINIMUM_DAYS_FOR_HIGH_PENALTY) // Stake just started or less than 7 days passed)\r\n        {\r\n            penalty = riskAmount; // 100%\r\n        } else if (howManyDaysServed <= stake.lockedForXDays) \r\n        {\r\n            // 100-0%\r\n            penalty = \r\n                (riskAmount * (stake.lockedForXDays - howManyDaysServed)) / (stake.lockedForXDays - settings.MINIMUM_DAYS_FOR_HIGH_PENALTY);\r\n        } else if (howManyDaysServed <= stake.lockedForXDays + settings.END_STAKE_FROM)\r\n        {\r\n            penalty = 0;\r\n        } else if (howManyDaysServed <= stake.lockedForXDays + settings.END_STAKE_FROM + settings.END_STAKE_TO) {\r\n            // 0-90%\r\n            penalty = \r\n                (riskAmount * 9 * (howManyDaysServed - stake.lockedForXDays - settings.END_STAKE_FROM)) / (10 * settings.END_STAKE_TO);\r\n        } else // if (howManyDaysServed > stake.lockedForXDays + settings.END_STAKE_FROM + settings.END_STAKE_TO)\r\n        {\r\n            // 90%\r\n            penalty = (riskAmount * 9) / 10;\r\n        } \r\n        \r\n        return penalty;\r\n    }\r\n    \r\n    function getSharesCountById(uint stakeId, uint givenDay)\r\n        public\r\n        view\r\n        returns(uint)\r\n    {\r\n        return getSharesCountByStake(stakes[stakeId], givenDay);\r\n    }\r\n    \r\n    function getSharesCountByStake(Stake memory stake, uint givenDay)\r\n        public\r\n        view\r\n        returns (uint)\r\n    {\r\n        uint numberOfDaysServed;\r\n        if (givenDay == 0)\r\n        {\r\n            numberOfDaysServed = stake.lockedForXDays;\r\n        } else if (givenDay > stake.startDay)\r\n        {\r\n            numberOfDaysServed = givenDay - stake.startDay;\r\n        } else // givenDay > 0 && givenDay < stake.startDay\r\n        {\r\n            return 0;\r\n        }\r\n        numberOfDaysServed = minOfTwoUints(numberOfDaysServed, 10*DAYS_IN_ONE_YEAR);\r\n        \r\n        uint initialSharesCount = \r\n            (stake.stakedAmount * SHARE_PRICE_DENORM) / dailySnapshots[stake.startDay].sharePrice;\r\n        uint longerPaysBetterSharesCount =\r\n            (settings.LONGER_PAYS_BETTER_BONUS * numberOfDaysServed * stake.stakedAmount * SHARE_PRICE_DENORM) / \r\n                (APY_DENORM * 10 * DAYS_IN_ONE_YEAR * dailySnapshots[stake.startDay].sharePrice);\r\n        uint smallerPaysBetterSharesCountMultiplier;\r\n        if (stake.stakedAmount <= MINIMUM_SMALLER_PAYS_BETTER)\r\n        {\r\n            smallerPaysBetterSharesCountMultiplier = APY_DENORM + settings.SMALLER_PAYS_BETTER_BONUS;\r\n        } else if (\r\n            MINIMUM_SMALLER_PAYS_BETTER < stake.stakedAmount &&\r\n            stake.stakedAmount < MAXIMUM_SMALLER_PAYS_BETTER\r\n        ) {\r\n            smallerPaysBetterSharesCountMultiplier = \r\n                APY_DENORM + \r\n                    (settings.SMALLER_PAYS_BETTER_BONUS * (MAXIMUM_SMALLER_PAYS_BETTER - stake.stakedAmount)) /\r\n                        (MAXIMUM_SMALLER_PAYS_BETTER - MINIMUM_SMALLER_PAYS_BETTER);\r\n        } else // MAXIMUM_SMALLER_PAYS_BETTER >= stake.stakedAmount\r\n        {\r\n            smallerPaysBetterSharesCountMultiplier = APY_DENORM;\r\n        }\r\n        uint sharesCount = \r\n            ((initialSharesCount + longerPaysBetterSharesCount) * smallerPaysBetterSharesCountMultiplier) / \r\n                APY_DENORM;\r\n                \r\n        return sharesCount;\r\n    }\r\n    \r\n    function getCurrentDaySinceLaunch()\r\n        public\r\n        view\r\n        returns (uint)\r\n    {\r\n        return 1 + block.timestamp / SECONDS_IN_ONE_DAY - launchTimestamp / SECONDS_IN_ONE_DAY;\r\n    }\r\n    \r\n    function getCurrentCachedPerShareDay()\r\n        public\r\n        view\r\n        returns (uint)\r\n    {\r\n        return getCurrentDaySinceLaunch() / CACHED_DAYS_INTEREST;\r\n    }\r\n    \r\n    function minOfTwoUints(uint uint1, uint uint2)\r\n        private\r\n        pure\r\n        returns(uint)\r\n    {\r\n        if (uint1 < uint2) return uint1;\r\n        return uint2;\r\n    }\r\n}","ABI":"[{\"inputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"fromAddr\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amountToBurn\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"currentDay\",\"type\":\"uint256\"}],\"name\":\"BurnedAndAddedToStakersInflation\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"sealedDay\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"sealedCachedDay\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"cachedInterestPerShare\",\"type\":\"uint256\"}],\"name\":\"CachedInterestPerShareSealed\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"sealedDay\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"inflationAmount\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"totalShares\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"sharePrice\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"totalStaked\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"totalSupply\",\"type\":\"uint256\"}],\"name\":\"DailySnapshotSealed\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"newSharePrice\",\"type\":\"uint256\"}],\"name\":\"NewMaxSharePriceReached\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"previousAdminRole\",\"type\":\"bytes32\"},{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"newAdminRole\",\"type\":\"bytes32\"}],\"name\":\"RoleAdminChanged\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"}],\"name\":\"RoleGranted\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"}],\"name\":\"RoleRevoked\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"components\":[{\"internalType\":\"uint256\",\"name\":\"MINIMUM_DAYS_FOR_HIGH_PENALTY\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"CONTROLLED_APY\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"SMALLER_PAYS_BETTER_BONUS\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"LONGER_PAYS_BETTER_BONUS\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"END_STAKE_FROM\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"END_STAKE_TO\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"MINIMUM_STAKE_DAYS\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"MAXIMUM_STAKE_DAYS\",\"type\":\"uint256\"}],\"indexed\":false,\"internalType\":\"struct Settings\",\"name\":\"Settings\",\"type\":\"tuple\"}],\"name\":\"SettingsUpdated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"stakeId\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"endDay\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"interest\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"penalty\",\"type\":\"uint256\"}],\"name\":\"StakeEnded\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"stakeId\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"StakeOwnerChanged\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"stakeId\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"stakedAmount\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"startDay\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"lockedForXDays\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"sharesCount\",\"type\":\"uint256\"}],\"name\":\"StakeStarted\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"stakeId\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"lockedForXDays\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"sharesCount\",\"type\":\"uint256\"}],\"name\":\"StakeUpdated\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"ROLE_ADMIN\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"fromAddr\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amountToBurn\",\"type\":\"uint256\"}],\"name\":\"adminBurnAndAddToStakersInflation\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"components\":[{\"internalType\":\"uint256\",\"name\":\"MINIMUM_DAYS_FOR_HIGH_PENALTY\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"CONTROLLED_APY\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"SMALLER_PAYS_BETTER_BONUS\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"LONGER_PAYS_BETTER_BONUS\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"END_STAKE_FROM\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"END_STAKE_TO\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"MINIMUM_STAKE_DAYS\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"MAXIMUM_STAKE_DAYS\",\"type\":\"uint256\"}],\"internalType\":\"struct Settings\",\"name\":\"_settings\",\"type\":\"tuple\"}],\"name\":\"adminUpdateSettings\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256[]\",\"name\":\"stakeIds\",\"type\":\"uint256[]\"}],\"name\":\"bulkEndStake\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256[]\",\"name\":\"stakeIds\",\"type\":\"uint256[]\"}],\"name\":\"bulkScrapeStake\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"components\":[{\"internalType\":\"uint256\",\"name\":\"stakedAmount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"lockedForXDays\",\"type\":\"uint256\"}],\"internalType\":\"struct StartStake[]\",\"name\":\"startStakes\",\"type\":\"tuple[]\"}],\"name\":\"bulkStartStake\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256[]\",\"name\":\"stakeIds\",\"type\":\"uint256[]\"},{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"bulkTransferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"cachedInterestPerShare\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"dailySnapshots\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"inflationAmount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"totalShares\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"sharePrice\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"stakeId\",\"type\":\"uint256\"}],\"name\":\"endStake\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getCachedInterestPerShareLength\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getCurrentCachedPerShareDay\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getCurrentDaySinceLaunch\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getDailySnapshotsLength\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"stakeId\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"givenDay\",\"type\":\"uint256\"}],\"name\":\"getInterestById\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"components\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"stakedAmount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"startDay\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"lockedForXDays\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"endDay\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"maxSharesCountOnStartStake\",\"type\":\"uint256\"}],\"internalType\":\"struct Stake\",\"name\":\"stake\",\"type\":\"tuple\"},{\"internalType\":\"uint256\",\"name\":\"givenDay\",\"type\":\"uint256\"}],\"name\":\"getInterestByStake\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"stakeId\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"givenDay\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"interest\",\"type\":\"uint256\"}],\"name\":\"getPenaltyById\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"components\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"stakedAmount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"startDay\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"lockedForXDays\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"endDay\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"maxSharesCountOnStartStake\",\"type\":\"uint256\"}],\"internalType\":\"struct Stake\",\"name\":\"stake\",\"type\":\"tuple\"},{\"internalType\":\"uint256\",\"name\":\"givenDay\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"interest\",\"type\":\"uint256\"}],\"name\":\"getPenaltyByStake\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"}],\"name\":\"getRoleAdmin\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"internalType\":\"uint256\",\"name\":\"index\",\"type\":\"uint256\"}],\"name\":\"getRoleMember\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"}],\"name\":\"getRoleMemberCount\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"stakeId\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"givenDay\",\"type\":\"uint256\"}],\"name\":\"getSharesCountById\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"components\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"stakedAmount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"startDay\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"lockedForXDays\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"endDay\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"maxSharesCountOnStartStake\",\"type\":\"uint256\"}],\"internalType\":\"struct Stake\",\"name\":\"stake\",\"type\":\"tuple\"},{\"internalType\":\"uint256\",\"name\":\"givenDay\",\"type\":\"uint256\"}],\"name\":\"getSharesCountByStake\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getStakesLength\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getTotalTokensStaked\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"grantRole\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"components\":[{\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"internalType\":\"address\",\"name\":\"addr\",\"type\":\"address\"}],\"internalType\":\"struct RoleAccess[]\",\"name\":\"roles\",\"type\":\"tuple[]\"}],\"name\":\"grantRolesBulk\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"hasRole\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"launchTimestamp\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"renounceRole\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"revokeRole\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"stakeId\",\"type\":\"uint256\"}],\"name\":\"scrapeStake\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"settings\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"MINIMUM_DAYS_FOR_HIGH_PENALTY\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"CONTROLLED_APY\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"SMALLER_PAYS_BETTER_BONUS\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"LONGER_PAYS_BETTER_BONUS\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"END_STAKE_FROM\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"END_STAKE_TO\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"MINIMUM_STAKE_DAYS\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"MAXIMUM_STAKE_DAYS\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"stakes\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"stakedAmount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"startDay\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"lockedForXDays\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"endDay\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"maxSharesCountOnStartStake\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"components\":[{\"internalType\":\"uint256\",\"name\":\"stakedAmount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"lockedForXDays\",\"type\":\"uint256\"}],\"internalType\":\"struct StartStake\",\"name\":\"_startStake\",\"type\":\"tuple\"}],\"name\":\"startStake\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"stakeId\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes4\",\"name\":\"interfaceId\",\"type\":\"bytes4\"}],\"name\":\"supportsInterface\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"stakeId\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"updateAllSnapshots\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"givenDay\",\"type\":\"uint256\"}],\"name\":\"updateSnapshots\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}]","ContractName":"CerbyStakingSystem","CompilerVersion":"v0.8.10+commit.fc410830","OptimizationUsed":"1","Runs":"200","ConstructorArguments":"","EVMVersion":"Default","Library":"","LicenseType":"BSD-2-Clause","Proxy":"0","Implementation":"","SwarmSource":"ipfs://43c206067e6cb8f1407fd296046b6dab9b86290191cc7c2d5675269ed0542eee"}]}