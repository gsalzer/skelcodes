{"status":"1","message":"OK","result":[{"SourceCode":"{{\r\n  \"language\": \"Solidity\",\r\n  \"sources\": {\r\n    \"@sherlock/v1-core/contracts/facets/Gov.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: GPL-2.0-or-later\\npragma solidity 0.7.6;\\n\\n/******************************************************************************\\\\\\n* Author: Evert Kors <dev@sherlock.xyz> (https://twitter.com/evert0x)\\n* Sherlock Protocol: https://sherlock.xyz\\n/******************************************************************************/\\n\\nimport '@openzeppelin/contracts/math/SafeMath.sol';\\nimport '@openzeppelin/contracts/token/ERC20/IERC20.sol';\\nimport '@openzeppelin/contracts/token/ERC20/SafeERC20.sol';\\n\\nimport 'diamond-2/contracts/libraries/LibDiamond.sol';\\n\\nimport '../interfaces/IGov.sol';\\n\\nimport '../storage/GovStorage.sol';\\nimport '../storage/PoolStorage.sol';\\nimport '../storage/SherXStorage.sol';\\n\\ncontract Gov is IGov {\\n  using SafeMath for uint256;\\n  using SafeERC20 for IERC20;\\n\\n  uint256 private constant MAX_WINDOW = 25000000; // ~ approximate 10 years of blocks\\n\\n  //\\n  // Modifiers\\n  //\\n\\n  modifier onlyGovMain() {\\n    require(msg.sender == GovStorage.gs().govMain, 'NOT_GOV_MAIN');\\n    _;\\n  }\\n\\n  //\\n  // View methods\\n  //\\n\\n  function getGovMain() external view override returns (address) {\\n    return GovStorage.gs().govMain;\\n  }\\n\\n  function getWatsons() external view override returns (address) {\\n    return GovStorage.gs().watsonsAddress;\\n  }\\n\\n  function getWatsonsSherXWeight() external view override returns (uint16) {\\n    return GovStorage.gs().watsonsSherxWeight;\\n  }\\n\\n  function getWatsonsSherxLastAccrued() external view override returns (uint40) {\\n    return GovStorage.gs().watsonsSherxLastAccrued;\\n  }\\n\\n  function getWatsonsSherXPerBlock() public view override returns (uint256) {\\n    GovStorage.Base storage gs = GovStorage.gs();\\n    SherXStorage.Base storage sx = SherXStorage.sx();\\n\\n    return sx.sherXPerBlock.mul(gs.watsonsSherxWeight).div(type(uint16).max);\\n  }\\n\\n  function getWatsonsUnmintedSherX() external view override returns (uint256) {\\n    GovStorage.Base storage gs = GovStorage.gs();\\n\\n    return block.number.sub(gs.watsonsSherxLastAccrued).mul(getWatsonsSherXPerBlock());\\n  }\\n\\n  function getUnstakeWindow() external view override returns (uint40) {\\n    return GovStorage.gs().unstakeWindow;\\n  }\\n\\n  function getCooldown() external view override returns (uint40) {\\n    return GovStorage.gs().unstakeCooldown;\\n  }\\n\\n  function getTokensStaker() external view override returns (IERC20[] memory) {\\n    return GovStorage.gs().tokensStaker;\\n  }\\n\\n  function getTokensSherX() external view override returns (IERC20[] memory) {\\n    return GovStorage.gs().tokensSherX;\\n  }\\n\\n  function getProtocolIsCovered(bytes32 _protocol) external view override returns (bool) {\\n    return GovStorage.gs().protocolIsCovered[_protocol];\\n  }\\n\\n  function getProtocolManager(bytes32 _protocol) external view override returns (address) {\\n    // NOTE: UNUSED\\n    return GovStorage.gs().protocolManagers[_protocol];\\n  }\\n\\n  function getProtocolAgent(bytes32 _protocol) external view override returns (address) {\\n    return GovStorage.gs().protocolAgents[_protocol];\\n  }\\n\\n  function getMaxTokensSherX() external view override returns (uint8) {\\n    return GovStorage.gs().maxTokensSherX;\\n  }\\n\\n  function getMaxTokensStaker() external view override returns (uint8) {\\n    return GovStorage.gs().maxTokensStaker;\\n  }\\n\\n  function getMaxProtocolPool() external view override returns (uint8) {\\n    return GovStorage.gs().maxProtocolPool;\\n  }\\n\\n  //\\n  // State changing methods\\n  //\\n\\n  function setInitialGovMain(address _govMain) external override {\\n    GovStorage.Base storage gs = GovStorage.gs();\\n\\n    require(_govMain != address(0), 'ZERO_GOV');\\n    require(msg.sender == LibDiamond.contractOwner(), 'NOT_DEV');\\n    require(gs.govMain == address(0), 'ALREADY_SET');\\n\\n    gs.govMain = _govMain;\\n  }\\n\\n  function transferGovMain(address _govMain) external override onlyGovMain {\\n    require(_govMain != address(0), 'ZERO_GOV');\\n    require(GovStorage.gs().govMain != _govMain, 'SAME_GOV');\\n    GovStorage.gs().govMain = _govMain;\\n  }\\n\\n  function setWatsonsAddress(address _watsons) external override onlyGovMain {\\n    GovStorage.Base storage gs = GovStorage.gs();\\n\\n    require(_watsons != address(0), 'ZERO_WATS');\\n    require(gs.watsonsAddress != _watsons, 'SAME_WATS');\\n    gs.watsonsAddress = _watsons;\\n  }\\n\\n  function setUnstakeWindow(uint40 _unstakeWindow) external override onlyGovMain {\\n    require(_unstakeWindow != 0, 'ZERO');\\n    require(_unstakeWindow < MAX_WINDOW, 'MAX');\\n    GovStorage.gs().unstakeWindow = _unstakeWindow;\\n  }\\n\\n  function setCooldown(uint40 _period) external override onlyGovMain {\\n    require(_period != 0, 'ZERO');\\n    require(_period < MAX_WINDOW, 'MAX');\\n    GovStorage.gs().unstakeCooldown = _period;\\n  }\\n\\n  function protocolAdd(\\n    bytes32 _protocol,\\n    address _eoaProtocolAgent,\\n    address _eoaManager,\\n    IERC20[] memory _tokens\\n  ) external override onlyGovMain {\\n    GovStorage.Base storage gs = GovStorage.gs();\\n    require(!gs.protocolIsCovered[_protocol], 'COVERED');\\n    gs.protocolIsCovered[_protocol] = true;\\n\\n    protocolUpdate(_protocol, _eoaProtocolAgent, _eoaManager);\\n    protocolDepositAdd(_protocol, _tokens);\\n  }\\n\\n  function protocolUpdate(\\n    bytes32 _protocol,\\n    address _eoaProtocolAgent,\\n    address _eoaManager\\n  ) public override onlyGovMain {\\n    require(_protocol != bytes32(0), 'ZERO_PROTOCOL');\\n    require(_eoaProtocolAgent != address(0), 'ZERO_AGENT');\\n    require(_eoaManager != address(0), 'ZERO_MANAGER');\\n\\n    GovStorage.Base storage gs = GovStorage.gs();\\n    require(gs.protocolIsCovered[_protocol], 'NOT_COVERED');\\n\\n    // NOTE: protocolManagers UNUSED\\n    gs.protocolManagers[_protocol] = _eoaManager;\\n    gs.protocolAgents[_protocol] = _eoaProtocolAgent;\\n  }\\n\\n  function protocolDepositAdd(bytes32 _protocol, IERC20[] memory _tokens)\\n    public\\n    override\\n    onlyGovMain\\n  {\\n    require(_protocol != bytes32(0), 'ZERO_PROTOCOL');\\n    require(_tokens.length != 0, 'ZERO');\\n\\n    GovStorage.Base storage gs = GovStorage.gs();\\n    require(gs.protocolIsCovered[_protocol], 'NOT_COVERED');\\n\\n    for (uint256 i; i < _tokens.length; i++) {\\n      PoolStorage.Base storage ps = PoolStorage.ps(_tokens[i]);\\n      require(ps.premiums, 'INIT');\\n      require(!ps.isProtocol[_protocol], 'ALREADY_ADDED');\\n\\n      ps.isProtocol[_protocol] = true;\\n      require(ps.protocols.length < gs.maxProtocolPool, 'MAX_POOL');\\n      ps.protocols.push(_protocol);\\n    }\\n  }\\n\\n  function protocolRemove(bytes32 _protocol) external override onlyGovMain {\\n    GovStorage.Base storage gs = GovStorage.gs();\\n    require(gs.protocolIsCovered[_protocol], 'NOT_COVERED');\\n\\n    for (uint256 i; i < gs.tokensSherX.length; i++) {\\n      IERC20 token = gs.tokensSherX[i];\\n\\n      PoolStorage.Base storage ps = PoolStorage.ps(token);\\n      // basically need to check if accruedDebt != 0, but this is true in case protocolPremium != 0\\n      require(ps.protocolPremium[_protocol] == 0, 'DEBT');\\n      require(!ps.isProtocol[_protocol], 'POOL_PROTOCOL');\\n    }\\n    delete gs.protocolIsCovered[_protocol];\\n    delete gs.protocolManagers[_protocol];\\n    delete gs.protocolAgents[_protocol];\\n  }\\n\\n  function tokenInit(\\n    IERC20 _token,\\n    address _govPool,\\n    ILock _lock,\\n    bool _isProtocolPremium\\n  ) external override onlyGovMain {\\n    GovStorage.Base storage gs = GovStorage.gs();\\n    PoolStorage.Base storage ps = PoolStorage.ps(_token);\\n    require(address(_token) != address(0), 'ZERO_TOKEN');\\n\\n    if (_govPool != address(0)) {\\n      ps.govPool = _govPool;\\n    }\\n    require(ps.govPool != address(0), 'ZERO_GOV');\\n\\n    if (address(_lock) != address(0)) {\\n      if (address(ps.lockToken) == address(0)) {\\n        require(_lock.getOwner() == address(this), 'OWNER');\\n        require(_lock.totalSupply() == 0, 'SUPPLY');\\n        require(_lock.underlying() == _token, 'UNDERLYING');\\n        ps.lockToken = _lock;\\n      }\\n      if (address(ps.lockToken) == address(_lock)) {\\n        require(!ps.stakes, 'STAKES_SET');\\n        ps.stakes = true;\\n        require(gs.tokensStaker.length < gs.maxTokensStaker, 'MAX_STAKER');\\n        gs.tokensStaker.push(_token);\\n      } else {\\n        revert('WRONG_LOCK');\\n      }\\n    }\\n\\n    if (_isProtocolPremium) {\\n      require(!ps.premiums, 'PREMIUMS_SET');\\n      ps.premiums = true;\\n      require(gs.tokensSherX.length < gs.maxTokensSherX, 'MAX_PREMIUM');\\n      gs.tokensSherX.push(_token);\\n    }\\n  }\\n\\n  function tokenDisableStakers(IERC20 _token, uint256 _index) external override onlyGovMain {\\n    GovStorage.Base storage gs = GovStorage.gs();\\n    PoolStorage.Base storage ps = PoolStorage.ps(_token);\\n    require(gs.tokensStaker[_index] == _token, 'INDEX');\\n    require(ps.sherXWeight == 0, 'ACTIVE_WEIGHT');\\n\\n    delete ps.stakes;\\n    // lockToken is kept, as stakers should be able to unstake\\n    // staking can be reenabled by calling tokenInit\\n    gs.tokensStaker[_index] = gs.tokensStaker[gs.tokensStaker.length - 1];\\n    gs.tokensStaker.pop();\\n  }\\n\\n  function tokenDisableProtocol(IERC20 _token, uint256 _index) external override onlyGovMain {\\n    GovStorage.Base storage gs = GovStorage.gs();\\n    PoolStorage.Base storage ps = PoolStorage.ps(_token);\\n    require(gs.tokensSherX[_index] == _token, 'INDEX');\\n    require(ps.totalPremiumPerBlock == 0, 'ACTIVE_PREMIUM');\\n    // Can not remove with active underlying, SherX holders will see drop in underlying value\\n    require(ps.sherXUnderlying == 0, 'ACTIVE_SHERX');\\n\\n    delete ps.premiums;\\n    gs.tokensSherX[_index] = gs.tokensSherX[gs.tokensSherX.length - 1];\\n    gs.tokensSherX.pop();\\n  }\\n\\n  // Unloading all tokens, likely before calling tokenRemove\\n  function tokenUnload(\\n    IERC20 _token,\\n    IRemove _native,\\n    address _remaining\\n  ) external override onlyGovMain {\\n    require(address(_native) != address(0), 'ZERO_NATIVE');\\n    require(_remaining != address(0), 'ZERO_REMAIN');\\n    PoolStorage.Base storage ps = PoolStorage.ps(_token);\\n    require(ps.govPool != address(0), 'EMPTY');\\n\\n    // Protocol are technically still able to deposit, ps.premiums is still true\\n    // This makes sure the sherx underlying doesn't grow anymore\\n    // this function is called before the disable protocol\\n    // disable stakes --> unload tokens --> disable protocol (sherx) --> remove\\n\\n    require(!ps.stakes, 'STAKES_SET');\\n    require(ps.totalPremiumPerBlock == 0, 'ACTIVE_PREMIUM');\\n    require(address(ps.strategy) == address(0), 'ACTIVE_STRATEGY');\\n\\n    uint256 totalToken = ps.firstMoneyOut.add(ps.sherXUnderlying);\\n\\n    // `firstMoneyOut` and `sherXUnderlying` are two 'pools' that needs to be swapped\\n    // in a single transaction.\\n    // If `sherXUnderlying` is not swapped in a single tx, the price of SherX (underlying value)\\n    // will drop\\n    // If `firstMoneyOut` is not swapped in a single tx, the buffer will be reduced in $ value\\n    // This code piece swaps these tokens for other tokens in the solution\\n    // The goal is to keep the current $ value of these two 'pools' somewhat equal before/after swap\\n    if (totalToken != 0) {\\n      _token.safeApprove(address(_native), totalToken);\\n\\n      (IERC20 newToken, uint256 newFmo, uint256 newSherxUnderlying) =\\n        _native.swap(_token, ps.firstMoneyOut, ps.sherXUnderlying);\\n\\n      PoolStorage.Base storage ps2 = PoolStorage.ps(newToken);\\n      require(ps2.govPool != address(0), 'EMPTY_SWAP');\\n\\n      ps2.stakeBalance = ps2.stakeBalance.add(newFmo);\\n      ps2.firstMoneyOut = ps2.firstMoneyOut.add(newFmo);\\n      ps2.sherXUnderlying = ps2.sherXUnderlying.add(newSherxUnderlying);\\n    }\\n\\n    uint256 totalFee = ps.unallocatedSherX;\\n    if (totalFee != 0) {\\n      IERC20(address(this)).safeTransfer(_remaining, totalFee);\\n      delete ps.unallocatedSherX;\\n    }\\n\\n    uint256 balance = ps.stakeBalance.sub(ps.firstMoneyOut);\\n    if (balance != 0) {\\n      _token.safeTransfer(_remaining, balance);\\n    }\\n\\n    delete ps.stakeBalance;\\n    delete ps.sherXUnderlying;\\n    delete ps.firstMoneyOut;\\n  }\\n\\n  function tokenRemove(IERC20 _token) external override onlyGovMain {\\n    PoolStorage.Base storage ps = PoolStorage.ps(_token);\\n    require(ps.govPool != address(0), 'EMPTY');\\n    require(!ps.stakes, 'STAKES_SET');\\n    require(!ps.premiums, 'PREMIUMS_SET');\\n    require(ps.protocols.length == 0, 'ACTIVE_PROTOCOLS');\\n    require(ps.stakeBalance == 0, 'BALANCE_SET');\\n    // NOTE: check that firstMoneyOut == 0 not needed since firstMoneyOut <= stakeBalance\\n    require(ps.unallocatedSherX == 0, 'SHERX_SET');\\n\\n    delete ps.govPool;\\n    delete ps.lockToken;\\n    delete ps.activateCooldownFee;\\n    delete ps.sherXWeight;\\n    delete ps.sherXLastAccrued;\\n\\n    // NOTE: storage variables need to be kept. To make sure readding the token works\\n    // IF readding the token, verify off chain if the storage is sufficient.\\n    // Create re-adding plan off chain if this isn't the case. (e.g. clean storage by doing calls)\\n    // The spirit of these calls would be `delete ps.sWithdrawn` and `delete ps.sWeight`\\n\\n    delete ps.totalPremiumLastPaid;\\n  }\\n\\n  function setMaxTokensSherX(uint8 _max) external override onlyGovMain {\\n    GovStorage.gs().maxTokensSherX = _max;\\n  }\\n\\n  function setMaxTokensStaker(uint8 _max) external override onlyGovMain {\\n    GovStorage.gs().maxTokensStaker = _max;\\n  }\\n\\n  function setMaxProtocolPool(uint8 _max) external override onlyGovMain {\\n    GovStorage.gs().maxProtocolPool = _max;\\n  }\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/math/SafeMath.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity >=0.6.0 <0.8.0;\\n\\n/**\\n * @dev Wrappers over Solidity's arithmetic operations with added overflow\\n * checks.\\n *\\n * Arithmetic operations in Solidity wrap on overflow. This can easily result\\n * in bugs, because programmers usually assume that an overflow raises an\\n * error, which is the standard behavior in high level programming languages.\\n * `SafeMath` restores this intuition by reverting the transaction when an\\n * operation overflows.\\n *\\n * Using this library instead of the unchecked operations eliminates an entire\\n * class of bugs, so it's recommended to use it always.\\n */\\nlibrary SafeMath {\\n    /**\\n     * @dev Returns the addition of two unsigned integers, with an overflow flag.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function tryAdd(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        uint256 c = a + b;\\n        if (c < a) return (false, 0);\\n        return (true, c);\\n    }\\n\\n    /**\\n     * @dev Returns the substraction of two unsigned integers, with an overflow flag.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function trySub(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        if (b > a) return (false, 0);\\n        return (true, a - b);\\n    }\\n\\n    /**\\n     * @dev Returns the multiplication of two unsigned integers, with an overflow flag.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function tryMul(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        // Gas optimization: this is cheaper than requiring 'a' not being zero, but the\\n        // benefit is lost if 'b' is also tested.\\n        // See: https://github.com/OpenZeppelin/openzeppelin-contracts/pull/522\\n        if (a == 0) return (true, 0);\\n        uint256 c = a * b;\\n        if (c / a != b) return (false, 0);\\n        return (true, c);\\n    }\\n\\n    /**\\n     * @dev Returns the division of two unsigned integers, with a division by zero flag.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function tryDiv(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        if (b == 0) return (false, 0);\\n        return (true, a / b);\\n    }\\n\\n    /**\\n     * @dev Returns the remainder of dividing two unsigned integers, with a division by zero flag.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function tryMod(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        if (b == 0) return (false, 0);\\n        return (true, a % b);\\n    }\\n\\n    /**\\n     * @dev Returns the addition of two unsigned integers, reverting on\\n     * overflow.\\n     *\\n     * Counterpart to Solidity's `+` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Addition cannot overflow.\\n     */\\n    function add(uint256 a, uint256 b) internal pure returns (uint256) {\\n        uint256 c = a + b;\\n        require(c >= a, \\\"SafeMath: addition overflow\\\");\\n        return c;\\n    }\\n\\n    /**\\n     * @dev Returns the subtraction of two unsigned integers, reverting on\\n     * overflow (when the result is negative).\\n     *\\n     * Counterpart to Solidity's `-` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Subtraction cannot overflow.\\n     */\\n    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\\n        require(b <= a, \\\"SafeMath: subtraction overflow\\\");\\n        return a - b;\\n    }\\n\\n    /**\\n     * @dev Returns the multiplication of two unsigned integers, reverting on\\n     * overflow.\\n     *\\n     * Counterpart to Solidity's `*` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Multiplication cannot overflow.\\n     */\\n    function mul(uint256 a, uint256 b) internal pure returns (uint256) {\\n        if (a == 0) return 0;\\n        uint256 c = a * b;\\n        require(c / a == b, \\\"SafeMath: multiplication overflow\\\");\\n        return c;\\n    }\\n\\n    /**\\n     * @dev Returns the integer division of two unsigned integers, reverting on\\n     * division by zero. The result is rounded towards zero.\\n     *\\n     * Counterpart to Solidity's `/` operator. Note: this function uses a\\n     * `revert` opcode (which leaves remaining gas untouched) while Solidity\\n     * uses an invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Requirements:\\n     *\\n     * - The divisor cannot be zero.\\n     */\\n    function div(uint256 a, uint256 b) internal pure returns (uint256) {\\n        require(b > 0, \\\"SafeMath: division by zero\\\");\\n        return a / b;\\n    }\\n\\n    /**\\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\\n     * reverting when dividing by zero.\\n     *\\n     * Counterpart to Solidity's `%` operator. This function uses a `revert`\\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\\n     * invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Requirements:\\n     *\\n     * - The divisor cannot be zero.\\n     */\\n    function mod(uint256 a, uint256 b) internal pure returns (uint256) {\\n        require(b > 0, \\\"SafeMath: modulo by zero\\\");\\n        return a % b;\\n    }\\n\\n    /**\\n     * @dev Returns the subtraction of two unsigned integers, reverting with custom message on\\n     * overflow (when the result is negative).\\n     *\\n     * CAUTION: This function is deprecated because it requires allocating memory for the error\\n     * message unnecessarily. For custom revert reasons use {trySub}.\\n     *\\n     * Counterpart to Solidity's `-` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Subtraction cannot overflow.\\n     */\\n    function sub(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\\n        require(b <= a, errorMessage);\\n        return a - b;\\n    }\\n\\n    /**\\n     * @dev Returns the integer division of two unsigned integers, reverting with custom message on\\n     * division by zero. The result is rounded towards zero.\\n     *\\n     * CAUTION: This function is deprecated because it requires allocating memory for the error\\n     * message unnecessarily. For custom revert reasons use {tryDiv}.\\n     *\\n     * Counterpart to Solidity's `/` operator. Note: this function uses a\\n     * `revert` opcode (which leaves remaining gas untouched) while Solidity\\n     * uses an invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Requirements:\\n     *\\n     * - The divisor cannot be zero.\\n     */\\n    function div(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\\n        require(b > 0, errorMessage);\\n        return a / b;\\n    }\\n\\n    /**\\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\\n     * reverting with custom message when dividing by zero.\\n     *\\n     * CAUTION: This function is deprecated because it requires allocating memory for the error\\n     * message unnecessarily. For custom revert reasons use {tryMod}.\\n     *\\n     * Counterpart to Solidity's `%` operator. This function uses a `revert`\\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\\n     * invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Requirements:\\n     *\\n     * - The divisor cannot be zero.\\n     */\\n    function mod(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\\n        require(b > 0, errorMessage);\\n        return a % b;\\n    }\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/token/ERC20/IERC20.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity >=0.6.0 <0.8.0;\\n\\n/**\\n * @dev Interface of the ERC20 standard as defined in the EIP.\\n */\\ninterface IERC20 {\\n    /**\\n     * @dev Returns the amount of tokens in existence.\\n     */\\n    function totalSupply() external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the amount of tokens owned by `account`.\\n     */\\n    function balanceOf(address account) external view returns (uint256);\\n\\n    /**\\n     * @dev Moves `amount` tokens from the caller's account to `recipient`.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transfer(address recipient, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Returns the remaining number of tokens that `spender` will be\\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\\n     * zero by default.\\n     *\\n     * This value changes when {approve} or {transferFrom} are called.\\n     */\\n    function allowance(address owner, address spender) external view returns (uint256);\\n\\n    /**\\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\\n     * that someone may use both the old and the new allowance by unfortunate\\n     * transaction ordering. One possible solution to mitigate this race\\n     * condition is to first reduce the spender's allowance to 0 and set the\\n     * desired value afterwards:\\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address spender, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Moves `amount` tokens from `sender` to `recipient` using the\\n     * allowance mechanism. `amount` is then deducted from the caller's\\n     * allowance.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(address sender, address recipient, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\\n     * another (`to`).\\n     *\\n     * Note that `value` may be zero.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 value);\\n\\n    /**\\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\\n     * a call to {approve}. `value` is the new allowance.\\n     */\\n    event Approval(address indexed owner, address indexed spender, uint256 value);\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/token/ERC20/SafeERC20.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity >=0.6.0 <0.8.0;\\n\\nimport \\\"./IERC20.sol\\\";\\nimport \\\"../../math/SafeMath.sol\\\";\\nimport \\\"../../utils/Address.sol\\\";\\n\\n/**\\n * @title SafeERC20\\n * @dev Wrappers around ERC20 operations that throw on failure (when the token\\n * contract returns false). Tokens that return no value (and instead revert or\\n * throw on failure) are also supported, non-reverting calls are assumed to be\\n * successful.\\n * To use this library you can add a `using SafeERC20 for IERC20;` statement to your contract,\\n * which allows you to call the safe operations as `token.safeTransfer(...)`, etc.\\n */\\nlibrary SafeERC20 {\\n    using SafeMath for uint256;\\n    using Address for address;\\n\\n    function safeTransfer(IERC20 token, address to, uint256 value) internal {\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.transfer.selector, to, value));\\n    }\\n\\n    function safeTransferFrom(IERC20 token, address from, address to, uint256 value) internal {\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.transferFrom.selector, from, to, value));\\n    }\\n\\n    /**\\n     * @dev Deprecated. This function has issues similar to the ones found in\\n     * {IERC20-approve}, and its usage is discouraged.\\n     *\\n     * Whenever possible, use {safeIncreaseAllowance} and\\n     * {safeDecreaseAllowance} instead.\\n     */\\n    function safeApprove(IERC20 token, address spender, uint256 value) internal {\\n        // safeApprove should only be called when setting an initial allowance,\\n        // or when resetting it to zero. To increase and decrease it, use\\n        // 'safeIncreaseAllowance' and 'safeDecreaseAllowance'\\n        // solhint-disable-next-line max-line-length\\n        require((value == 0) || (token.allowance(address(this), spender) == 0),\\n            \\\"SafeERC20: approve from non-zero to non-zero allowance\\\"\\n        );\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, value));\\n    }\\n\\n    function safeIncreaseAllowance(IERC20 token, address spender, uint256 value) internal {\\n        uint256 newAllowance = token.allowance(address(this), spender).add(value);\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));\\n    }\\n\\n    function safeDecreaseAllowance(IERC20 token, address spender, uint256 value) internal {\\n        uint256 newAllowance = token.allowance(address(this), spender).sub(value, \\\"SafeERC20: decreased allowance below zero\\\");\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));\\n    }\\n\\n    /**\\n     * @dev Imitates a Solidity high-level call (i.e. a regular function call to a contract), relaxing the requirement\\n     * on the return value: the return value is optional (but if data is returned, it must not be false).\\n     * @param token The token targeted by the call.\\n     * @param data The call data (encoded using abi.encode or one of its variants).\\n     */\\n    function _callOptionalReturn(IERC20 token, bytes memory data) private {\\n        // We need to perform a low level call here, to bypass Solidity's return data size checking mechanism, since\\n        // we're implementing it ourselves. We use {Address.functionCall} to perform this call, which verifies that\\n        // the target address contains contract code and also asserts for success in the low-level call.\\n\\n        bytes memory returndata = address(token).functionCall(data, \\\"SafeERC20: low-level call failed\\\");\\n        if (returndata.length > 0) { // Return data is optional\\n            // solhint-disable-next-line max-line-length\\n            require(abi.decode(returndata, (bool)), \\\"SafeERC20: ERC20 operation did not succeed\\\");\\n        }\\n    }\\n}\\n\"\r\n    },\r\n    \"diamond-2/contracts/libraries/LibDiamond.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\npragma solidity ^0.7.1;\\npragma experimental ABIEncoderV2;\\n\\n/******************************************************************************\\\\\\n* Author: Nick Mudge <nick@perfectabstractions.com> (https://twitter.com/mudgen)\\n* EIP-2535 Diamond Standard: https://eips.ethereum.org/EIPS/eip-2535\\n*\\n* This is gas optimized by reducing storage reads and storage writes.\\n* This code is as complex as it is to reduce gas costs.\\n/******************************************************************************/\\n\\nimport \\\"../interfaces/IDiamondCut.sol\\\";\\n\\nlibrary LibDiamond {\\n    bytes32 constant DIAMOND_STORAGE_POSITION = keccak256(\\\"diamond.standard.diamond.storage\\\");\\n\\n    struct DiamondStorage {\\n        // maps function selectors to the facets that execute the functions.\\n        // and maps the selectors to their position in the selectorSlots array.\\n        // func selector => address facet, selector position\\n        mapping(bytes4 => bytes32) facets;\\n        // array of slots of function selectors.\\n        // each slot holds 8 function selectors.\\n        mapping(uint256 => bytes32) selectorSlots;\\n        // The number of function selectors in selectorSlots\\n        uint16 selectorCount;\\n        // owner of the contract\\n        // Used to query if a contract implements an interface.\\n        // Used to implement ERC-165.\\n        mapping(bytes4 => bool) supportedInterfaces;\\n        // owner of the contract\\n        address contractOwner;\\n    }\\n\\n    function diamondStorage() internal pure returns (DiamondStorage storage ds) {\\n        bytes32 position = DIAMOND_STORAGE_POSITION;\\n        assembly {\\n            ds.slot := position\\n        }\\n    }\\n\\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\\n\\n    function setContractOwner(address _newOwner) internal {\\n        DiamondStorage storage ds = diamondStorage();\\n        address previousOwner = ds.contractOwner;\\n        ds.contractOwner = _newOwner;\\n        emit OwnershipTransferred(previousOwner, _newOwner);\\n    }\\n\\n    function contractOwner() internal view returns (address contractOwner_) {\\n        contractOwner_ = diamondStorage().contractOwner;\\n    }\\n\\n    function enforceIsContractOwner() internal view {\\n        require(msg.sender == diamondStorage().contractOwner, \\\"LibDiamond: Must be contract owner\\\");\\n    }\\n\\n    modifier onlyOwner {\\n        require(msg.sender == diamondStorage().contractOwner, \\\"LibDiamond: Must be contract owner\\\");\\n        _;\\n    }\\n\\n    event DiamondCut(IDiamondCut.FacetCut[] _diamondCut, address _init, bytes _calldata);\\n\\n    bytes32 constant CLEAR_ADDRESS_MASK = bytes32(uint256(0xffffffffffffffffffffffff));\\n    bytes32 constant CLEAR_SELECTOR_MASK = bytes32(uint256(0xffffffff << 224));\\n\\n    // Internal function version of diamondCut\\n    // This code is almost the same as the external diamondCut,\\n    // except it is using 'Facet[] memory _diamondCut' instead of\\n    // 'Facet[] calldata _diamondCut'.\\n    // The code is duplicated to prevent copying calldata to memory which\\n    // causes an error for a two dimensional array.\\n    function diamondCut(\\n        IDiamondCut.FacetCut[] memory _diamondCut,\\n        address _init,\\n        bytes memory _calldata\\n    ) internal {\\n        DiamondStorage storage ds = diamondStorage();\\n        uint256 originalSelectorCount = ds.selectorCount;\\n        uint256 selectorCount = originalSelectorCount;\\n        bytes32 selectorSlot;\\n        // Check if last selector slot is not full\\n        if (selectorCount % 8 > 0) {\\n            // get last selectorSlot\\n            selectorSlot = ds.selectorSlots[selectorCount / 8];\\n        }\\n        // loop through diamond cut\\n        for (uint256 facetIndex; facetIndex < _diamondCut.length; facetIndex++) {\\n            (selectorCount, selectorSlot) = addReplaceRemoveFacetSelectors(\\n                selectorCount,\\n                selectorSlot,\\n                _diamondCut[facetIndex].facetAddress,\\n                _diamondCut[facetIndex].action,\\n                _diamondCut[facetIndex].functionSelectors\\n            );\\n        }\\n        if (selectorCount != originalSelectorCount) {\\n            ds.selectorCount = uint16(selectorCount);\\n        }\\n        // If last selector slot is not full\\n        if (selectorCount % 8 > 0) {\\n            ds.selectorSlots[selectorCount / 8] = selectorSlot;\\n        }\\n        emit DiamondCut(_diamondCut, _init, _calldata);\\n        initializeDiamondCut(_init, _calldata);\\n    }\\n\\n    function addReplaceRemoveFacetSelectors(\\n        uint256 _selectorCount,\\n        bytes32 _selectorSlot,\\n        address _newFacetAddress,\\n        IDiamondCut.FacetCutAction _action,\\n        bytes4[] memory _selectors\\n    ) internal returns (uint256, bytes32) {\\n        DiamondStorage storage ds = diamondStorage();\\n        require(_selectors.length > 0, \\\"LibDiamondCut: No selectors in facet to cut\\\");\\n        if (_action == IDiamondCut.FacetCutAction.Add) {\\n            require(_newFacetAddress != address(0), \\\"LibDiamondCut: Add facet can't be address(0)\\\");\\n            enforceHasContractCode(_newFacetAddress, \\\"LibDiamondCut: Add facet has no code\\\");\\n            for (uint256 selectorIndex; selectorIndex < _selectors.length; selectorIndex++) {\\n                bytes4 selector = _selectors[selectorIndex];\\n                bytes32 oldFacet = ds.facets[selector];\\n                require(address(bytes20(oldFacet)) == address(0), \\\"LibDiamondCut: Can't add function that already exists\\\");\\n                // add facet for selector\\n                ds.facets[selector] = bytes20(_newFacetAddress) | bytes32(_selectorCount);\\n                uint256 selectorInSlotPosition = (_selectorCount % 8) * 32;\\n                // clear selector position in slot and add selector\\n                _selectorSlot = (_selectorSlot & ~(CLEAR_SELECTOR_MASK >> selectorInSlotPosition)) | (bytes32(selector) >> selectorInSlotPosition);\\n                // if slot is full then write it to storage\\n                if (selectorInSlotPosition == 224) {\\n                    ds.selectorSlots[_selectorCount / 8] = _selectorSlot;\\n                    _selectorSlot = 0;\\n                }\\n                _selectorCount++;\\n            }\\n        } else if (_action == IDiamondCut.FacetCutAction.Replace) {\\n            require(_newFacetAddress != address(0), \\\"LibDiamondCut: Replace facet can't be address(0)\\\");\\n            enforceHasContractCode(_newFacetAddress, \\\"LibDiamondCut: Replace facet has no code\\\");\\n            for (uint256 selectorIndex; selectorIndex < _selectors.length; selectorIndex++) {\\n                bytes4 selector = _selectors[selectorIndex];\\n                bytes32 oldFacet = ds.facets[selector];\\n                address oldFacetAddress = address(bytes20(oldFacet));\\n                // only useful if immutable functions exist\\n                require(oldFacetAddress != address(this), \\\"LibDiamondCut: Can't replace immutable function\\\");\\n                require(oldFacetAddress != _newFacetAddress, \\\"LibDiamondCut: Can't replace function with same function\\\");\\n                require(oldFacetAddress != address(0), \\\"LibDiamondCut: Can't replace function that doesn't exist\\\");\\n                // replace old facet address\\n                ds.facets[selector] = (oldFacet & CLEAR_ADDRESS_MASK) | bytes20(_newFacetAddress);\\n            }\\n        } else if (_action == IDiamondCut.FacetCutAction.Remove) {\\n            require(_newFacetAddress == address(0), \\\"LibDiamondCut: Remove facet address must be address(0)\\\");\\n            uint256 selectorSlotCount = _selectorCount / 8;\\n            uint256 selectorInSlotIndex = (_selectorCount % 8) - 1;\\n            for (uint256 selectorIndex; selectorIndex < _selectors.length; selectorIndex++) {\\n                if (_selectorSlot == 0) {\\n                    // get last selectorSlot\\n                    selectorSlotCount--;\\n                    _selectorSlot = ds.selectorSlots[selectorSlotCount];\\n                    selectorInSlotIndex = 7;\\n                }\\n                bytes4 lastSelector;\\n                uint256 oldSelectorsSlotCount;\\n                uint256 oldSelectorInSlotPosition;\\n                // adding a block here prevents stack too deep error\\n                {\\n                    bytes4 selector = _selectors[selectorIndex];\\n                    bytes32 oldFacet = ds.facets[selector];\\n                    require(address(bytes20(oldFacet)) != address(0), \\\"LibDiamondCut: Can't remove function that doesn't exist\\\");\\n                    // only useful if immutable functions exist\\n                    require(address(bytes20(oldFacet)) != address(this), \\\"LibDiamondCut: Can't remove immutable function\\\");\\n                    // replace selector with last selector in ds.facets\\n                    // gets the last selector\\n                    lastSelector = bytes4(_selectorSlot << (selectorInSlotIndex * 32));\\n                    if (lastSelector != selector) {\\n                        // update last selector slot position info\\n                        ds.facets[lastSelector] = (oldFacet & CLEAR_ADDRESS_MASK) | bytes20(ds.facets[lastSelector]);\\n                    }\\n                    delete ds.facets[selector];\\n                    uint256 oldSelectorCount = uint16(uint256(oldFacet));\\n                    oldSelectorsSlotCount = oldSelectorCount / 8;\\n                    oldSelectorInSlotPosition = (oldSelectorCount % 8) * 32;\\n                }\\n                if (oldSelectorsSlotCount != selectorSlotCount) {\\n                    bytes32 oldSelectorSlot = ds.selectorSlots[oldSelectorsSlotCount];\\n                    // clears the selector we are deleting and puts the last selector in its place.\\n                    oldSelectorSlot =\\n                        (oldSelectorSlot & ~(CLEAR_SELECTOR_MASK >> oldSelectorInSlotPosition)) |\\n                        (bytes32(lastSelector) >> oldSelectorInSlotPosition);\\n                    // update storage with the modified slot\\n                    ds.selectorSlots[oldSelectorsSlotCount] = oldSelectorSlot;\\n                } else {\\n                    // clears the selector we are deleting and puts the last selector in its place.\\n                    _selectorSlot =\\n                        (_selectorSlot & ~(CLEAR_SELECTOR_MASK >> oldSelectorInSlotPosition)) |\\n                        (bytes32(lastSelector) >> oldSelectorInSlotPosition);\\n                }\\n                if (selectorInSlotIndex == 0) {\\n                    delete ds.selectorSlots[selectorSlotCount];\\n                    _selectorSlot = 0;\\n                }\\n                selectorInSlotIndex--;\\n            }\\n            _selectorCount = selectorSlotCount * 8 + selectorInSlotIndex + 1;\\n        } else {\\n            revert(\\\"LibDiamondCut: Incorrect FacetCutAction\\\");\\n        }\\n        return (_selectorCount, _selectorSlot);\\n    }\\n\\n    function initializeDiamondCut(address _init, bytes memory _calldata) internal {\\n        if (_init == address(0)) {\\n            require(_calldata.length == 0, \\\"LibDiamondCut: _init is address(0) but_calldata is not empty\\\");\\n        } else {\\n            require(_calldata.length > 0, \\\"LibDiamondCut: _calldata is empty but _init is not address(0)\\\");\\n            if (_init != address(this)) {\\n                enforceHasContractCode(_init, \\\"LibDiamondCut: _init address has no code\\\");\\n            }\\n            (bool success, bytes memory error) = _init.delegatecall(_calldata);\\n            if (!success) {\\n                if (error.length > 0) {\\n                    // bubble up the error\\n                    revert(string(error));\\n                } else {\\n                    revert(\\\"LibDiamondCut: _init function reverted\\\");\\n                }\\n            }\\n        }\\n    }\\n\\n    function enforceHasContractCode(address _contract, string memory _errorMessage) internal view {\\n        uint256 contractSize;\\n        assembly {\\n            contractSize := extcodesize(_contract)\\n        }\\n        require(contractSize > 0, _errorMessage);\\n    }\\n}\\n\"\r\n    },\r\n    \"@sherlock/v1-core/contracts/interfaces/IGov.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: GPL-2.0-or-later\\npragma solidity 0.7.6;\\n\\n/******************************************************************************\\\\\\n* Author: Evert Kors <dev@sherlock.xyz> (https://twitter.com/evert0x)\\n* Sherlock Protocol: https://sherlock.xyz\\n/******************************************************************************/\\n\\nimport '../interfaces/ILock.sol';\\nimport '../interfaces/IRemove.sol';\\n\\n/// @title Sherlock Main Governance\\n/// @author Evert Kors\\n/// @notice This contract is used for managing tokens, protocols and more in Sherlock\\n/// @dev Contract is meant to be included as a facet in the diamond\\n/// @dev Storage library is used\\ninterface IGov {\\n  //\\n  // Events\\n  //\\n\\n  //\\n  // View methods\\n  //\\n\\n  /// @notice Returns the main governance address\\n  /// @return Main governance address\\n  function getGovMain() external view returns (address);\\n\\n  /// @notice Returns the compensation address for the Watsons\\n  /// @return Watsons address\\n  function getWatsons() external view returns (address);\\n\\n  /// @notice Returns the weight for the Watsons compensation\\n  /// @return Watsons compensation weight\\n  /// @dev Value is scaled by type(uint16).max\\n  function getWatsonsSherXWeight() external view returns (uint16);\\n\\n  /// @notice Returns the last block number the SherX was accrued to the Watsons\\n  /// @return Block number\\n  function getWatsonsSherxLastAccrued() external view returns (uint40);\\n\\n  /// @notice Returns the amount of SherX the Watsons receive per block\\n  /// @return Number of SherX per block\\n  function getWatsonsSherXPerBlock() external view returns (uint256);\\n\\n  /// @notice Returns the total amount of uminted SherX for the Watsons\\n  /// @return SherX to be minted\\n  /// @dev Based on current block, last accrued and the SherX per block\\n  function getWatsonsUnmintedSherX() external view returns (uint256);\\n\\n  /// @notice Returns the window of opportunity in blocks to unstake funds\\n  /// @notice Cooldown period has to be expired first to start the unstake window\\n  /// @return Amount of blocks\\n  function getUnstakeWindow() external view returns (uint40);\\n\\n  /// @notice Returns the cooldown period in blocks\\n  /// @notice After the cooldown period funds can be unstaked\\n  /// @return Amount of blocks\\n  function getCooldown() external view returns (uint40);\\n\\n  /// @notice Returns an array of tokens accounts are allowed to stake in\\n  /// @return Array of ERC20 tokens\\n  function getTokensStaker() external view returns (IERC20[] memory);\\n\\n  /// @notice Returns an array of tokens that are included in the SherX as underlying\\n  /// @notice Registered protocols use one or more of these tokens to compensate Sherlock\\n  /// @return Array of ERC20 tokens\\n  function getTokensSherX() external view returns (IERC20[] memory);\\n\\n  /// @notice Verify if a protocol is included in Sherlock\\n  /// @param _protocol Protocol identifier\\n  /// @return Boolean indicating if protocol is included\\n  function getProtocolIsCovered(bytes32 _protocol) external view returns (bool);\\n\\n  /// @notice Returns address responsible on behalf of Sherlock for the protocol\\n  /// @param _protocol Protocol identifier\\n  /// @return Address of account\\n  function getProtocolManager(bytes32 _protocol) external view returns (address);\\n\\n  /// @notice Returns address responsible on behalf of the protocol\\n  /// @param _protocol Protocol identifier\\n  /// @return Address of account\\n  /// @dev Account is able to withdraw protocol balance\\n  function getProtocolAgent(bytes32 _protocol) external view returns (address);\\n\\n  /// @notice Get the maximum of tokens to be in the SherX array\\n  /// @return Max maximum amount of tokens\\n  function getMaxTokensSherX() external view returns (uint8);\\n\\n  /// @notice Get the maximum of tokens to be in the Staker array\\n  /// @return Max maximum amount of tokens\\n  function getMaxTokensStaker() external view returns (uint8);\\n\\n  /// @notice Get the maximum of protocol to be in a single pool\\n  /// @return Max maximum amount of protocol\\n  function getMaxProtocolPool() external view returns (uint8);\\n\\n  //\\n  // State changing methods\\n  //\\n\\n  /// @notice Set initial main governance address\\n  /// @param _govMain The address of the main governance\\n  /// @dev Diamond deployer - GovDev - is able to call this function\\n  function setInitialGovMain(address _govMain) external;\\n\\n  /// @notice Transfer the main governance\\n  /// @param _govMain New address for the main governance\\n  function transferGovMain(address _govMain) external;\\n\\n  /// @notice Set the compensation address for the Watsons\\n  /// @param _watsons Address for Watsons\\n  function setWatsonsAddress(address _watsons) external;\\n\\n  /// @notice Set unstake window\\n  /// @param _unstakeWindow Unstake window in amount of blocks\\n  function setUnstakeWindow(uint40 _unstakeWindow) external;\\n\\n  /// @notice Set cooldown period\\n  /// @param _period Cooldown period in amount of blocks\\n  function setCooldown(uint40 _period) external;\\n\\n  /// @notice Add a new protocol to Sherlock\\n  /// @param _protocol Protocol identifier\\n  /// @param _eoaProtocolAgent Account to be registered as the agent\\n  /// @param _eoaManager Account to be registered as the manager\\n  /// @param _tokens Initial array of tokens the protocol is allowed to pay in\\n  /// @dev _tokens should first be initialized by calling tokenInit()\\n  function protocolAdd(\\n    bytes32 _protocol,\\n    address _eoaProtocolAgent,\\n    address _eoaManager,\\n    IERC20[] memory _tokens\\n  ) external;\\n\\n  /// @notice Update protocol agent and/or manager\\n  /// @param _protocol Protocol identifier\\n  /// @param _eoaProtocolAgent Account to be registered as the agent\\n  /// @param _eoaManager Account to be registered as the manager\\n  function protocolUpdate(\\n    bytes32 _protocol,\\n    address _eoaProtocolAgent,\\n    address _eoaManager\\n  ) external;\\n\\n  /// @notice Add tokens the protocol is allowed to pay in\\n  /// @param _protocol Protocol identifier\\n  /// @param _tokens Array of tokens to be added as valid protocol payment\\n  /// @dev _tokens should first be initialized by calling tokenInit()\\n  function protocolDepositAdd(bytes32 _protocol, IERC20[] memory _tokens) external;\\n\\n  /// @notice Remove protocol from the Sherlock registry\\n  /// @param _protocol Protocol identifier\\n  function protocolRemove(bytes32 _protocol) external;\\n\\n  /// @notice Initialize a new token\\n  /// @param _token Address of the token\\n  /// @param _govPool Account responsible for the token\\n  /// @param _lock Corresponding lock token, indicating staker token\\n  /// @param _isProtocolPremium Boolean indicating if token should be registered as protocol payment\\n  /// @dev Token can be reinitialiezd\\n  /// @dev Zero address for _lock will not enable stakers to deposit with the _token\\n  function tokenInit(\\n    IERC20 _token,\\n    address _govPool,\\n    ILock _lock,\\n    bool _isProtocolPremium\\n  ) external;\\n\\n  /// @notice Disable a token for stakers\\n  /// @param _token Address of the token\\n  /// @param _index Index of the token in storage array\\n  function tokenDisableStakers(IERC20 _token, uint256 _index) external;\\n\\n  /// @notice Disable a token for protocols\\n  /// @param _token Address of the token\\n  /// @param _index Index of the token in storage array\\n  /// @dev Removes the token as underlying from SherX\\n  function tokenDisableProtocol(IERC20 _token, uint256 _index) external;\\n\\n  /// @notice Unload tokens from Sherlock\\n  /// @param _token Address of the token\\n  /// @param _native Contract being used to swap existing token in Sherlock\\n  /// @param _remaining Account used to send the unallocated SherX and remaining balance for _token\\n  function tokenUnload(\\n    IERC20 _token,\\n    IRemove _native,\\n    address _remaining\\n  ) external;\\n\\n  /// @notice Remove a token from storage\\n  /// @param _token Address of the token\\n  function tokenRemove(IERC20 _token) external;\\n\\n  /// @notice Set the maximum of tokens to be in the SherX array\\n  /// @param _max maximum amount of tokens\\n  function setMaxTokensSherX(uint8 _max) external;\\n\\n  /// @notice Set the maximum of tokens to be in the Staker array\\n  /// @param _max maximum amount of tokens\\n  function setMaxTokensStaker(uint8 _max) external;\\n\\n  /// @notice Set the maximum of protocol to be in a single pool\\n  /// @param _max maximum amount of protocol\\n  function setMaxProtocolPool(uint8 _max) external;\\n}\\n\"\r\n    },\r\n    \"@sherlock/v1-core/contracts/storage/GovStorage.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: GPL-2.0-or-later\\npragma solidity 0.7.6;\\n\\n/******************************************************************************\\\\\\n* Author: Evert Kors <dev@sherlock.xyz> (https://twitter.com/evert0x)\\n* Sherlock Protocol: https://sherlock.xyz\\n/******************************************************************************/\\n\\nimport '@openzeppelin/contracts/token/ERC20/IERC20.sol';\\n\\nlibrary GovStorage {\\n  bytes32 constant GOV_STORAGE_POSITION = keccak256('diamond.sherlock.gov');\\n\\n  struct Base {\\n    // The address appointed as the govMain entity\\n    address govMain;\\n    // NOTE: UNUSED\\n    mapping(bytes32 => address) protocolManagers;\\n    // Based on the protocol identifier, get the address of the protocol that is able the withdraw balances\\n    mapping(bytes32 => address) protocolAgents;\\n    // Check if the protocol is included in the solution at all\\n    mapping(bytes32 => bool) protocolIsCovered;\\n    // The array of tokens the accounts are able to stake in\\n    IERC20[] tokensStaker;\\n    // The array of tokens the protocol are able to pay premium in\\n    // These tokens will also be the underlying for SherX\\n    IERC20[] tokensSherX;\\n    // The address of the watsons, an account that can receive SherX rewards\\n    address watsonsAddress;\\n    // How much sherX is distributed to this account\\n    // The max value is type(uint16).max, which means 100% of the total SherX minted is allocated to this acocunt\\n    uint16 watsonsSherxWeight;\\n    // The last block the total amount of rewards were accrued.\\n    uint40 watsonsSherxLastAccrued;\\n    // Max amount of SherX token to be in the `tokensSherX` array\\n    uint8 maxTokensSherX;\\n    // Max amount of Staker token to be in the `tokensStaker` array\\n    uint8 maxTokensStaker;\\n    // Max amount of protocol to be in single pool\\n    uint8 maxProtocolPool;\\n    // The amount of blocks the cooldown period takes\\n    uint40 unstakeCooldown;\\n    // The amount of blocks for the window of opportunity of unstaking\\n    uint40 unstakeWindow;\\n  }\\n\\n  function gs() internal pure returns (Base storage gsx) {\\n    bytes32 position = GOV_STORAGE_POSITION;\\n    assembly {\\n      gsx.slot := position\\n    }\\n  }\\n}\\n\"\r\n    },\r\n    \"@sherlock/v1-core/contracts/storage/PoolStorage.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: GPL-2.0-or-later\\npragma solidity 0.7.6;\\n\\n/******************************************************************************\\\\\\n* Author: Evert Kors <dev@sherlock.xyz> (https://twitter.com/evert0x)\\n* Sherlock Protocol: https://sherlock.xyz\\n/******************************************************************************/\\n\\nimport '../interfaces/ILock.sol';\\nimport '../interfaces/IStrategy.sol';\\n\\n// TokenStorage\\nlibrary PoolStorage {\\n  bytes32 constant POOL_STORAGE_PREFIX = 'diamond.sherlock.pool.';\\n\\n  struct Base {\\n    address govPool;\\n    // Variable used to calculate the fee when activating the cooldown\\n    // Max value is type(uint32).max which creates a 100% fee on the withdrawal\\n    uint32 activateCooldownFee;\\n    // How much sherX is distributed to stakers of this token\\n    // The max value is type(uint16).max, which means 100% of the total SherX minted is allocated to this pool\\n    uint16 sherXWeight;\\n    // The last block the total amount of rewards were accrued.\\n    // Accrueing SherX increases the `unallocatedSherX` variable\\n    uint40 sherXLastAccrued;\\n    // Indicates if protocol are able to pay premiums with this token\\n    // If this value is true, the token is also included as underlying of the SherX\\n    bool premiums;\\n    // Protocol debt can only be settled at once for all the protocols at the same time\\n    // This variable is the block number the last time all the protocols debt was settled\\n    uint40 totalPremiumLastPaid;\\n    //\\n    // Staking\\n    //\\n    // Indicates if stakers can stake funds in the pool\\n    bool stakes;\\n    // Address of the lockToken. Representing stakes in this pool\\n    ILock lockToken;\\n    // The total amount staked by the stakers in this pool, including value of `firstMoneyOut`\\n    // if you exclude the `firstMoneyOut` from this value, you get the actual amount of tokens staked\\n    // This value is also excluding funds deposited in a strategy.\\n    uint256 stakeBalance;\\n    // All the withdrawals by an account\\n    // The values of the struct are all deleted if expiry() or unstake() function is called\\n    mapping(address => UnstakeEntry[]) unstakeEntries;\\n    // Represents the amount of tokens in the first money out pool\\n    uint256 firstMoneyOut;\\n    // If the `stakes` = true, the stakers can be rewarded by sherx\\n    // stakers can claim their rewards by calling the harvest() function\\n    // SherX could be minted before the stakers call the harvest() function\\n    // Minted SherX that is assigned as reward for the pool will be added to this value\\n    uint256 unallocatedSherX;\\n    // Non-native variables\\n    // These variables are used to calculate the right amount of SherX rewards for the token staked\\n    mapping(address => uint256) sWithdrawn;\\n    uint256 sWeight;\\n    // Storing the protocol token balance based on the protocols bytes32 indentifier\\n    mapping(bytes32 => uint256) protocolBalance;\\n    // Storing the protocol premium, the amount of debt the protocol builds up per block.\\n    // This is based on the bytes32 identifier of the protocol.\\n    mapping(bytes32 => uint256) protocolPremium;\\n    // The sum of all the protocol premiums, the total amount of debt that builds up in this token. (per block)\\n    uint256 totalPremiumPerBlock;\\n    // How much tokens are used as underlying for SherX\\n    uint256 sherXUnderlying;\\n    // Check if the protocol is included in the token pool\\n    // The protocol can deposit balances if this is the case\\n    mapping(bytes32 => bool) isProtocol;\\n    // Array of protocols that are registered in this pool\\n    bytes32[] protocols;\\n    // Active strategy for this token pool\\n    IStrategy strategy;\\n  }\\n\\n  struct UnstakeEntry {\\n    // The block number the cooldown is activated\\n    uint40 blockInitiated;\\n    // The amount of lock tokens to be withdrawn\\n    uint256 lock;\\n  }\\n\\n  function ps(IERC20 _token) internal pure returns (Base storage psx) {\\n    bytes32 position = keccak256(abi.encodePacked(POOL_STORAGE_PREFIX, _token));\\n    assembly {\\n      psx.slot := position\\n    }\\n  }\\n}\\n\"\r\n    },\r\n    \"@sherlock/v1-core/contracts/storage/SherXStorage.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: GPL-2.0-or-later\\npragma solidity 0.7.6;\\n\\n/******************************************************************************\\\\\\n* Author: Evert Kors <dev@sherlock.xyz> (https://twitter.com/evert0x)\\n* Sherlock Protocol: https://sherlock.xyz\\n/******************************************************************************/\\n\\nimport '@openzeppelin/contracts/token/ERC20/IERC20.sol';\\n\\nlibrary SherXStorage {\\n  bytes32 constant SHERX_STORAGE_POSITION = keccak256('diamond.sherlock.x');\\n\\n  struct Base {\\n    mapping(IERC20 => uint256) tokenUSD;\\n    uint256 totalUsdPerBlock;\\n    uint256 totalUsdPool;\\n    uint256 totalUsdLastSettled;\\n    uint256 sherXPerBlock;\\n    uint256 internalTotalSupply;\\n    uint256 internalTotalSupplySettled;\\n  }\\n\\n  function sx() internal pure returns (Base storage sxx) {\\n    bytes32 position = SHERX_STORAGE_POSITION;\\n    assembly {\\n      sxx.slot := position\\n    }\\n  }\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/utils/Address.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity >=0.6.2 <0.8.0;\\n\\n/**\\n * @dev Collection of functions related to the address type\\n */\\nlibrary Address {\\n    /**\\n     * @dev Returns true if `account` is a contract.\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * It is unsafe to assume that an address for which this function returns\\n     * false is an externally-owned account (EOA) and not a contract.\\n     *\\n     * Among others, `isContract` will return false for the following\\n     * types of addresses:\\n     *\\n     *  - an externally-owned account\\n     *  - a contract in construction\\n     *  - an address where a contract will be created\\n     *  - an address where a contract lived, but was destroyed\\n     * ====\\n     */\\n    function isContract(address account) internal view returns (bool) {\\n        // This method relies on extcodesize, which returns 0 for contracts in\\n        // construction, since the code is only stored at the end of the\\n        // constructor execution.\\n\\n        uint256 size;\\n        // solhint-disable-next-line no-inline-assembly\\n        assembly { size := extcodesize(account) }\\n        return size > 0;\\n    }\\n\\n    /**\\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\\n     * `recipient`, forwarding all available gas and reverting on errors.\\n     *\\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\\n     * imposed by `transfer`, making them unable to receive funds via\\n     * `transfer`. {sendValue} removes this limitation.\\n     *\\n     * https://diligence.consensys.net/posts/2019/09/stop-using-soliditys-transfer-now/[Learn more].\\n     *\\n     * IMPORTANT: because control is transferred to `recipient`, care must be\\n     * taken to not create reentrancy vulnerabilities. Consider using\\n     * {ReentrancyGuard} or the\\n     * https://solidity.readthedocs.io/en/v0.5.11/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\\n     */\\n    function sendValue(address payable recipient, uint256 amount) internal {\\n        require(address(this).balance >= amount, \\\"Address: insufficient balance\\\");\\n\\n        // solhint-disable-next-line avoid-low-level-calls, avoid-call-value\\n        (bool success, ) = recipient.call{ value: amount }(\\\"\\\");\\n        require(success, \\\"Address: unable to send value, recipient may have reverted\\\");\\n    }\\n\\n    /**\\n     * @dev Performs a Solidity function call using a low level `call`. A\\n     * plain`call` is an unsafe replacement for a function call: use this\\n     * function instead.\\n     *\\n     * If `target` reverts with a revert reason, it is bubbled up by this\\n     * function (like regular Solidity function calls).\\n     *\\n     * Returns the raw returned data. To convert to the expected return value,\\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\\n     *\\n     * Requirements:\\n     *\\n     * - `target` must be a contract.\\n     * - calling `target` with `data` must not revert.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\\n      return functionCall(target, data, \\\"Address: low-level call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\\n     * `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(address target, bytes memory data, string memory errorMessage) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, 0, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but also transferring `value` wei to `target`.\\n     *\\n     * Requirements:\\n     *\\n     * - the calling contract must have an ETH balance of at least `value`.\\n     * - the called Solidity function must be `payable`.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(address target, bytes memory data, uint256 value) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, value, \\\"Address: low-level call with value failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\\n     * with `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(address target, bytes memory data, uint256 value, string memory errorMessage) internal returns (bytes memory) {\\n        require(address(this).balance >= value, \\\"Address: insufficient balance for call\\\");\\n        require(isContract(target), \\\"Address: call to non-contract\\\");\\n\\n        // solhint-disable-next-line avoid-low-level-calls\\n        (bool success, bytes memory returndata) = target.call{ value: value }(data);\\n        return _verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\\n        return functionStaticCall(target, data, \\\"Address: low-level static call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(address target, bytes memory data, string memory errorMessage) internal view returns (bytes memory) {\\n        require(isContract(target), \\\"Address: static call to non-contract\\\");\\n\\n        // solhint-disable-next-line avoid-low-level-calls\\n        (bool success, bytes memory returndata) = target.staticcall(data);\\n        return _verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionDelegateCall(target, data, \\\"Address: low-level delegate call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(address target, bytes memory data, string memory errorMessage) internal returns (bytes memory) {\\n        require(isContract(target), \\\"Address: delegate call to non-contract\\\");\\n\\n        // solhint-disable-next-line avoid-low-level-calls\\n        (bool success, bytes memory returndata) = target.delegatecall(data);\\n        return _verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    function _verifyCallResult(bool success, bytes memory returndata, string memory errorMessage) private pure returns(bytes memory) {\\n        if (success) {\\n            return returndata;\\n        } else {\\n            // Look for revert reason and bubble it up if present\\n            if (returndata.length > 0) {\\n                // The easiest way to bubble the revert reason is using memory via assembly\\n\\n                // solhint-disable-next-line no-inline-assembly\\n                assembly {\\n                    let returndata_size := mload(returndata)\\n                    revert(add(32, returndata), returndata_size)\\n                }\\n            } else {\\n                revert(errorMessage);\\n            }\\n        }\\n    }\\n}\\n\"\r\n    },\r\n    \"diamond-2/contracts/interfaces/IDiamondCut.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\npragma solidity ^0.7.1;\\npragma experimental ABIEncoderV2;\\n\\n/******************************************************************************\\\\\\n* Author: Nick Mudge <nick@perfectabstractions.com> (https://twitter.com/mudgen)\\n* EIP-2535 Diamond Standard: https://eips.ethereum.org/EIPS/eip-2535\\n/******************************************************************************/\\n\\ninterface IDiamondCut {\\n    enum FacetCutAction {Add, Replace, Remove}\\n    // Add=0, Replace=1, Remove=2\\n\\n    struct FacetCut {\\n        address facetAddress;\\n        FacetCutAction action;\\n        bytes4[] functionSelectors;\\n    }\\n\\n    /// @notice Add/replace/remove any number of functions and optionally execute\\n    ///         a function with delegatecall\\n    /// @param _diamondCut Contains the facet addresses and function selectors\\n    /// @param _init The address of the contract or facet to execute _calldata\\n    /// @param _calldata A function call, including function selector and arguments\\n    ///                  _calldata is executed with delegatecall on _init\\n    function diamondCut(\\n        FacetCut[] calldata _diamondCut,\\n        address _init,\\n        bytes calldata _calldata\\n    ) external;\\n\\n    event DiamondCut(FacetCut[] _diamondCut, address _init, bytes _calldata);\\n}\\n\"\r\n    },\r\n    \"@sherlock/v1-core/contracts/interfaces/ILock.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: GPL-2.0-or-later\\npragma solidity 0.7.6;\\n\\n/******************************************************************************\\\\\\n* Author: Evert Kors <dev@sherlock.xyz> (https://twitter.com/evert0x)\\n* Sherlock Protocol: https://sherlock.xyz\\n/******************************************************************************/\\n\\nimport '@openzeppelin/contracts/token/ERC20/IERC20.sol';\\n\\n/// @title Lock Token\\n/// @author Evert Kors\\n/// @notice Lock tokens represent a stake in Sherlock\\ninterface ILock is IERC20 {\\n  /// @notice Returns the owner of this contract\\n  /// @return Owner address\\n  /// @dev Should be equal to the Sherlock address\\n  function getOwner() external view returns (address);\\n\\n  /// @notice Returns token it represents\\n  /// @return Token address\\n  function underlying() external view returns (IERC20);\\n\\n  /// @notice Mint `_amount` tokens for `_account`\\n  /// @param _account Account to receive tokens\\n  /// @param _amount Amount to be minted\\n  function mint(address _account, uint256 _amount) external;\\n\\n  /// @notice Burn `_amount` tokens for `_account`\\n  /// @param _account Account to be burned\\n  /// @param _amount Amount to be burned\\n  function burn(address _account, uint256 _amount) external;\\n}\\n\"\r\n    },\r\n    \"@sherlock/v1-core/contracts/interfaces/IRemove.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: GPL-2.0-or-later\\npragma solidity 0.7.6;\\n\\n/******************************************************************************\\\\\\n* Author: Evert Kors <dev@sherlock.xyz> (https://twitter.com/evert0x)\\n* Sherlock Protocol: https://sherlock.xyz\\n/******************************************************************************/\\n\\nimport '@openzeppelin/contracts/token/ERC20/IERC20.sol';\\n\\ninterface IRemove {\\n  /// @notice Swap `_token` amounts\\n  /// @param _token Token to swap\\n  /// @param _fmo Amount of first money out pool swapped\\n  /// @param _sherXUnderlying Amount of underlying being swapped\\n  /// @return newToken Token being swapped to\\n  /// @return newFmo Share of `_fmo` in newToken\\n  /// @return newSherxUnderlying Share of `_sherXUnderlying` in newToken\\n  function swap(\\n    IERC20 _token,\\n    uint256 _fmo,\\n    uint256 _sherXUnderlying\\n  )\\n    external\\n    returns (\\n      IERC20 newToken,\\n      uint256 newFmo,\\n      uint256 newSherxUnderlying\\n    );\\n}\\n\"\r\n    },\r\n    \"@sherlock/v1-core/contracts/interfaces/IStrategy.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: GPL-2.0-or-later\\npragma solidity 0.7.6;\\n\\n/******************************************************************************\\\\\\n* Author: Evert Kors <dev@sherlock.xyz> (https://twitter.com/evert0x)\\n* Sherlock Protocol: https://sherlock.xyz\\n/******************************************************************************/\\n\\nimport '@openzeppelin/contracts/token/ERC20/ERC20.sol';\\n\\ninterface IStrategy {\\n  function want() external view returns (ERC20);\\n\\n  function withdrawAll() external returns (uint256);\\n\\n  function withdraw(uint256 _amount) external;\\n\\n  function deposit() external;\\n\\n  function balanceOf() external view returns (uint256);\\n\\n  function sweep(address _receiver, IERC20[] memory _extraTokens) external;\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/token/ERC20/ERC20.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity >=0.6.0 <0.8.0;\\n\\nimport \\\"../../utils/Context.sol\\\";\\nimport \\\"./IERC20.sol\\\";\\nimport \\\"../../math/SafeMath.sol\\\";\\n\\n/**\\n * @dev Implementation of the {IERC20} interface.\\n *\\n * This implementation is agnostic to the way tokens are created. This means\\n * that a supply mechanism has to be added in a derived contract using {_mint}.\\n * For a generic mechanism see {ERC20PresetMinterPauser}.\\n *\\n * TIP: For a detailed writeup see our guide\\n * https://forum.zeppelin.solutions/t/how-to-implement-erc20-supply-mechanisms/226[How\\n * to implement supply mechanisms].\\n *\\n * We have followed general OpenZeppelin guidelines: functions revert instead\\n * of returning `false` on failure. This behavior is nonetheless conventional\\n * and does not conflict with the expectations of ERC20 applications.\\n *\\n * Additionally, an {Approval} event is emitted on calls to {transferFrom}.\\n * This allows applications to reconstruct the allowance for all accounts just\\n * by listening to said events. Other implementations of the EIP may not emit\\n * these events, as it isn't required by the specification.\\n *\\n * Finally, the non-standard {decreaseAllowance} and {increaseAllowance}\\n * functions have been added to mitigate the well-known issues around setting\\n * allowances. See {IERC20-approve}.\\n */\\ncontract ERC20 is Context, IERC20 {\\n    using SafeMath for uint256;\\n\\n    mapping (address => uint256) private _balances;\\n\\n    mapping (address => mapping (address => uint256)) private _allowances;\\n\\n    uint256 private _totalSupply;\\n\\n    string private _name;\\n    string private _symbol;\\n    uint8 private _decimals;\\n\\n    /**\\n     * @dev Sets the values for {name} and {symbol}, initializes {decimals} with\\n     * a default value of 18.\\n     *\\n     * To select a different value for {decimals}, use {_setupDecimals}.\\n     *\\n     * All three of these values are immutable: they can only be set once during\\n     * construction.\\n     */\\n    constructor (string memory name_, string memory symbol_) public {\\n        _name = name_;\\n        _symbol = symbol_;\\n        _decimals = 18;\\n    }\\n\\n    /**\\n     * @dev Returns the name of the token.\\n     */\\n    function name() public view virtual returns (string memory) {\\n        return _name;\\n    }\\n\\n    /**\\n     * @dev Returns the symbol of the token, usually a shorter version of the\\n     * name.\\n     */\\n    function symbol() public view virtual returns (string memory) {\\n        return _symbol;\\n    }\\n\\n    /**\\n     * @dev Returns the number of decimals used to get its user representation.\\n     * For example, if `decimals` equals `2`, a balance of `505` tokens should\\n     * be displayed to a user as `5,05` (`505 / 10 ** 2`).\\n     *\\n     * Tokens usually opt for a value of 18, imitating the relationship between\\n     * Ether and Wei. This is the value {ERC20} uses, unless {_setupDecimals} is\\n     * called.\\n     *\\n     * NOTE: This information is only used for _display_ purposes: it in\\n     * no way affects any of the arithmetic of the contract, including\\n     * {IERC20-balanceOf} and {IERC20-transfer}.\\n     */\\n    function decimals() public view virtual returns (uint8) {\\n        return _decimals;\\n    }\\n\\n    /**\\n     * @dev See {IERC20-totalSupply}.\\n     */\\n    function totalSupply() public view virtual override returns (uint256) {\\n        return _totalSupply;\\n    }\\n\\n    /**\\n     * @dev See {IERC20-balanceOf}.\\n     */\\n    function balanceOf(address account) public view virtual override returns (uint256) {\\n        return _balances[account];\\n    }\\n\\n    /**\\n     * @dev See {IERC20-transfer}.\\n     *\\n     * Requirements:\\n     *\\n     * - `recipient` cannot be the zero address.\\n     * - the caller must have a balance of at least `amount`.\\n     */\\n    function transfer(address recipient, uint256 amount) public virtual override returns (bool) {\\n        _transfer(_msgSender(), recipient, amount);\\n        return true;\\n    }\\n\\n    /**\\n     * @dev See {IERC20-allowance}.\\n     */\\n    function allowance(address owner, address spender) public view virtual override returns (uint256) {\\n        return _allowances[owner][spender];\\n    }\\n\\n    /**\\n     * @dev See {IERC20-approve}.\\n     *\\n     * Requirements:\\n     *\\n     * - `spender` cannot be the zero address.\\n     */\\n    function approve(address spender, uint256 amount) public virtual override returns (bool) {\\n        _approve(_msgSender(), spender, amount);\\n        return true;\\n    }\\n\\n    /**\\n     * @dev See {IERC20-transferFrom}.\\n     *\\n     * Emits an {Approval} event indicating the updated allowance. This is not\\n     * required by the EIP. See the note at the beginning of {ERC20}.\\n     *\\n     * Requirements:\\n     *\\n     * - `sender` and `recipient` cannot be the zero address.\\n     * - `sender` must have a balance of at least `amount`.\\n     * - the caller must have allowance for ``sender``'s tokens of at least\\n     * `amount`.\\n     */\\n    function transferFrom(address sender, address recipient, uint256 amount) public virtual override returns (bool) {\\n        _transfer(sender, recipient, amount);\\n        _approve(sender, _msgSender(), _allowances[sender][_msgSender()].sub(amount, \\\"ERC20: transfer amount exceeds allowance\\\"));\\n        return true;\\n    }\\n\\n    /**\\n     * @dev Atomically increases the allowance granted to `spender` by the caller.\\n     *\\n     * This is an alternative to {approve} that can be used as a mitigation for\\n     * problems described in {IERC20-approve}.\\n     *\\n     * Emits an {Approval} event indicating the updated allowance.\\n     *\\n     * Requirements:\\n     *\\n     * - `spender` cannot be the zero address.\\n     */\\n    function increaseAllowance(address spender, uint256 addedValue) public virtual returns (bool) {\\n        _approve(_msgSender(), spender, _allowances[_msgSender()][spender].add(addedValue));\\n        return true;\\n    }\\n\\n    /**\\n     * @dev Atomically decreases the allowance granted to `spender` by the caller.\\n     *\\n     * This is an alternative to {approve} that can be used as a mitigation for\\n     * problems described in {IERC20-approve}.\\n     *\\n     * Emits an {Approval} event indicating the updated allowance.\\n     *\\n     * Requirements:\\n     *\\n     * - `spender` cannot be the zero address.\\n     * - `spender` must have allowance for the caller of at least\\n     * `subtractedValue`.\\n     */\\n    function decreaseAllowance(address spender, uint256 subtractedValue) public virtual returns (bool) {\\n        _approve(_msgSender(), spender, _allowances[_msgSender()][spender].sub(subtractedValue, \\\"ERC20: decreased allowance below zero\\\"));\\n        return true;\\n    }\\n\\n    /**\\n     * @dev Moves tokens `amount` from `sender` to `recipient`.\\n     *\\n     * This is internal function is equivalent to {transfer}, and can be used to\\n     * e.g. implement automatic token fees, slashing mechanisms, etc.\\n     *\\n     * Emits a {Transfer} event.\\n     *\\n     * Requirements:\\n     *\\n     * - `sender` cannot be the zero address.\\n     * - `recipient` cannot be the zero address.\\n     * - `sender` must have a balance of at least `amount`.\\n     */\\n    function _transfer(address sender, address recipient, uint256 amount) internal virtual {\\n        require(sender != address(0), \\\"ERC20: transfer from the zero address\\\");\\n        require(recipient != address(0), \\\"ERC20: transfer to the zero address\\\");\\n\\n        _beforeTokenTransfer(sender, recipient, amount);\\n\\n        _balances[sender] = _balances[sender].sub(amount, \\\"ERC20: transfer amount exceeds balance\\\");\\n        _balances[recipient] = _balances[recipient].add(amount);\\n        emit Transfer(sender, recipient, amount);\\n    }\\n\\n    /** @dev Creates `amount` tokens and assigns them to `account`, increasing\\n     * the total supply.\\n     *\\n     * Emits a {Transfer} event with `from` set to the zero address.\\n     *\\n     * Requirements:\\n     *\\n     * - `to` cannot be the zero address.\\n     */\\n    function _mint(address account, uint256 amount) internal virtual {\\n        require(account != address(0), \\\"ERC20: mint to the zero address\\\");\\n\\n        _beforeTokenTransfer(address(0), account, amount);\\n\\n        _totalSupply = _totalSupply.add(amount);\\n        _balances[account] = _balances[account].add(amount);\\n        emit Transfer(address(0), account, amount);\\n    }\\n\\n    /**\\n     * @dev Destroys `amount` tokens from `account`, reducing the\\n     * total supply.\\n     *\\n     * Emits a {Transfer} event with `to` set to the zero address.\\n     *\\n     * Requirements:\\n     *\\n     * - `account` cannot be the zero address.\\n     * - `account` must have at least `amount` tokens.\\n     */\\n    function _burn(address account, uint256 amount) internal virtual {\\n        require(account != address(0), \\\"ERC20: burn from the zero address\\\");\\n\\n        _beforeTokenTransfer(account, address(0), amount);\\n\\n        _balances[account] = _balances[account].sub(amount, \\\"ERC20: burn amount exceeds balance\\\");\\n        _totalSupply = _totalSupply.sub(amount);\\n        emit Transfer(account, address(0), amount);\\n    }\\n\\n    /**\\n     * @dev Sets `amount` as the allowance of `spender` over the `owner` s tokens.\\n     *\\n     * This internal function is equivalent to `approve`, and can be used to\\n     * e.g. set automatic allowances for certain subsystems, etc.\\n     *\\n     * Emits an {Approval} event.\\n     *\\n     * Requirements:\\n     *\\n     * - `owner` cannot be the zero address.\\n     * - `spender` cannot be the zero address.\\n     */\\n    function _approve(address owner, address spender, uint256 amount) internal virtual {\\n        require(owner != address(0), \\\"ERC20: approve from the zero address\\\");\\n        require(spender != address(0), \\\"ERC20: approve to the zero address\\\");\\n\\n        _allowances[owner][spender] = amount;\\n        emit Approval(owner, spender, amount);\\n    }\\n\\n    /**\\n     * @dev Sets {decimals} to a value other than the default one of 18.\\n     *\\n     * WARNING: This function should only be called from the constructor. Most\\n     * applications that interact with token contracts will not expect\\n     * {decimals} to ever change, and may work incorrectly if it does.\\n     */\\n    function _setupDecimals(uint8 decimals_) internal virtual {\\n        _decimals = decimals_;\\n    }\\n\\n    /**\\n     * @dev Hook that is called before any transfer of tokens. This includes\\n     * minting and burning.\\n     *\\n     * Calling conditions:\\n     *\\n     * - when `from` and `to` are both non-zero, `amount` of ``from``'s tokens\\n     * will be to transferred to `to`.\\n     * - when `from` is zero, `amount` tokens will be minted for `to`.\\n     * - when `to` is zero, `amount` of ``from``'s tokens will be burned.\\n     * - `from` and `to` are never both zero.\\n     *\\n     * To learn more about hooks, head to xref:ROOT:extending-contracts.adoc#using-hooks[Using Hooks].\\n     */\\n    function _beforeTokenTransfer(address from, address to, uint256 amount) internal virtual { }\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/utils/Context.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity >=0.6.0 <0.8.0;\\n\\n/*\\n * @dev Provides information about the current execution context, including the\\n * sender of the transaction and its data. While these are generally available\\n * via msg.sender and msg.data, they should not be accessed in such a direct\\n * manner, since when dealing with GSN meta-transactions the account sending and\\n * paying for execution may not be the actual sender (as far as an application\\n * is concerned).\\n *\\n * This contract is only required for intermediate, library-like contracts.\\n */\\nabstract contract Context {\\n    function _msgSender() internal view virtual returns (address payable) {\\n        return msg.sender;\\n    }\\n\\n    function _msgData() internal view virtual returns (bytes memory) {\\n        this; // silence state mutability warning without generating bytecode - see https://github.com/ethereum/solidity/issues/2691\\n        return msg.data;\\n    }\\n}\\n\"\r\n    }\r\n  },\r\n  \"settings\": {\r\n    \"optimizer\": {\r\n      \"enabled\": true,\r\n      \"runs\": 200\r\n    },\r\n    \"outputSelection\": {\r\n      \"*\": {\r\n        \"*\": [\r\n          \"evm.bytecode\",\r\n          \"evm.deployedBytecode\",\r\n          \"abi\"\r\n        ]\r\n      }\r\n    },\r\n    \"libraries\": {}\r\n  }\r\n}}","ABI":"[{\"inputs\":[],\"name\":\"getCooldown\",\"outputs\":[{\"internalType\":\"uint40\",\"name\":\"\",\"type\":\"uint40\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getGovMain\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getMaxProtocolPool\",\"outputs\":[{\"internalType\":\"uint8\",\"name\":\"\",\"type\":\"uint8\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getMaxTokensSherX\",\"outputs\":[{\"internalType\":\"uint8\",\"name\":\"\",\"type\":\"uint8\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getMaxTokensStaker\",\"outputs\":[{\"internalType\":\"uint8\",\"name\":\"\",\"type\":\"uint8\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"_protocol\",\"type\":\"bytes32\"}],\"name\":\"getProtocolAgent\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"_protocol\",\"type\":\"bytes32\"}],\"name\":\"getProtocolIsCovered\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"_protocol\",\"type\":\"bytes32\"}],\"name\":\"getProtocolManager\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getTokensSherX\",\"outputs\":[{\"internalType\":\"contract IERC20[]\",\"name\":\"\",\"type\":\"address[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getTokensStaker\",\"outputs\":[{\"internalType\":\"contract IERC20[]\",\"name\":\"\",\"type\":\"address[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getUnstakeWindow\",\"outputs\":[{\"internalType\":\"uint40\",\"name\":\"\",\"type\":\"uint40\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getWatsons\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getWatsonsSherXPerBlock\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getWatsonsSherXWeight\",\"outputs\":[{\"internalType\":\"uint16\",\"name\":\"\",\"type\":\"uint16\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getWatsonsSherxLastAccrued\",\"outputs\":[{\"internalType\":\"uint40\",\"name\":\"\",\"type\":\"uint40\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getWatsonsUnmintedSherX\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"_protocol\",\"type\":\"bytes32\"},{\"internalType\":\"address\",\"name\":\"_eoaProtocolAgent\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_eoaManager\",\"type\":\"address\"},{\"internalType\":\"contract IERC20[]\",\"name\":\"_tokens\",\"type\":\"address[]\"}],\"name\":\"protocolAdd\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"_protocol\",\"type\":\"bytes32\"},{\"internalType\":\"contract IERC20[]\",\"name\":\"_tokens\",\"type\":\"address[]\"}],\"name\":\"protocolDepositAdd\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"_protocol\",\"type\":\"bytes32\"}],\"name\":\"protocolRemove\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"_protocol\",\"type\":\"bytes32\"},{\"internalType\":\"address\",\"name\":\"_eoaProtocolAgent\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_eoaManager\",\"type\":\"address\"}],\"name\":\"protocolUpdate\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint40\",\"name\":\"_period\",\"type\":\"uint40\"}],\"name\":\"setCooldown\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_govMain\",\"type\":\"address\"}],\"name\":\"setInitialGovMain\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint8\",\"name\":\"_max\",\"type\":\"uint8\"}],\"name\":\"setMaxProtocolPool\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint8\",\"name\":\"_max\",\"type\":\"uint8\"}],\"name\":\"setMaxTokensSherX\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint8\",\"name\":\"_max\",\"type\":\"uint8\"}],\"name\":\"setMaxTokensStaker\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint40\",\"name\":\"_unstakeWindow\",\"type\":\"uint40\"}],\"name\":\"setUnstakeWindow\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_watsons\",\"type\":\"address\"}],\"name\":\"setWatsonsAddress\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"contract IERC20\",\"name\":\"_token\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_index\",\"type\":\"uint256\"}],\"name\":\"tokenDisableProtocol\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"contract IERC20\",\"name\":\"_token\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_index\",\"type\":\"uint256\"}],\"name\":\"tokenDisableStakers\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"contract IERC20\",\"name\":\"_token\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_govPool\",\"type\":\"address\"},{\"internalType\":\"contract ILock\",\"name\":\"_lock\",\"type\":\"address\"},{\"internalType\":\"bool\",\"name\":\"_isProtocolPremium\",\"type\":\"bool\"}],\"name\":\"tokenInit\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"contract IERC20\",\"name\":\"_token\",\"type\":\"address\"}],\"name\":\"tokenRemove\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"contract IERC20\",\"name\":\"_token\",\"type\":\"address\"},{\"internalType\":\"contract IRemove\",\"name\":\"_native\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_remaining\",\"type\":\"address\"}],\"name\":\"tokenUnload\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_govMain\",\"type\":\"address\"}],\"name\":\"transferGovMain\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}]","ContractName":"Gov","CompilerVersion":"v0.7.6+commit.7338295f","OptimizationUsed":"1","Runs":"200","ConstructorArguments":"","EVMVersion":"Default","Library":"","LicenseType":"","Proxy":"0","Implementation":"","SwarmSource":""}]}