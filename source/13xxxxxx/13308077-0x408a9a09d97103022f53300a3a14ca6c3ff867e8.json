{"status":"1","message":"OK","result":[{"SourceCode":"/**\r\n *Submitted for verification at Etherscan.io on 2021-08-15\r\n*/\r\n\r\n// SPDX-License-Identifier: AGPL-3.0-or-later\r\npragma solidity 0.7.5;\r\n\r\n/**\r\n * @dev Collection of functions related to the address type\r\n */\r\nlibrary Address {\r\n    /**\r\n     * @dev Returns true if `account` is a contract.\r\n     *\r\n     * [IMPORTANT]\r\n     * ====\r\n     * It is unsafe to assume that an address for which this function returns\r\n     * false is an externally-owned account (EOA) and not a contract.\r\n     *\r\n     * Among others, `isContract` will return false for the following\r\n     * types of addresses:\r\n     *\r\n     *  - an externally-owned account\r\n     *  - a contract in construction\r\n     *  - an address where a contract will be created\r\n     *  - an address where a contract lived, but was destroyed\r\n     * ====\r\n     */\r\n    function isContract(address account) internal view returns (bool) {\r\n        // This method relies in extcodesize, which returns 0 for contracts in\r\n        // construction, since the code is only stored at the end of the\r\n        // constructor execution.\r\n\r\n        uint256 size;\r\n        // solhint-disable-next-line no-inline-assembly\r\n        assembly { size := extcodesize(account) }\r\n        return size > 0;\r\n    }\r\n\r\n    /**\r\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\r\n     * `recipient`, forwarding all available gas and reverting on errors.\r\n     *\r\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\r\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\r\n     * imposed by `transfer`, making them unable to receive funds via\r\n     * `transfer`. {sendValue} removes this limitation.\r\n     *\r\n     * https://diligence.consensys.net/posts/2019/09/stop-using-soliditys-transfer-now/[Learn more].\r\n     *\r\n     * IMPORTANT: because control is transferred to `recipient`, care must be\r\n     * taken to not create reentrancy vulnerabilities. Consider using\r\n     * {ReentrancyGuard} or the\r\n     * https://solidity.readthedocs.io/en/v0.5.11/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\r\n     */\r\n    function sendValue(address payable recipient, uint256 amount) internal {\r\n        require(address(this).balance >= amount, \"Address: insufficient balance\");\r\n\r\n        // solhint-disable-next-line avoid-low-level-calls, avoid-call-value\r\n        (bool success, ) = recipient.call{ value: amount }(\"\");\r\n        require(success, \"Address: unable to send value, recipient may have reverted\");\r\n    }\r\n\r\n    /**\r\n     * @dev Performs a Solidity function call using a low level `call`. A\r\n     * plain`call` is an unsafe replacement for a function call: use this\r\n     * function instead.\r\n     *\r\n     * If `target` reverts with a revert reason, it is bubbled up by this\r\n     * function (like regular Solidity function calls).\r\n     *\r\n     * Returns the raw returned data. To convert to the expected return value,\r\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - `target` must be a contract.\r\n     * - calling `target` with `data` must not revert.\r\n     *\r\n     * _Available since v3.1._\r\n     */\r\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\r\n      return functionCall(target, data, \"Address: low-level call failed\");\r\n    }\r\n\r\n    /**\r\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\r\n     * `errorMessage` as a fallback revert reason when `target` reverts.\r\n     *\r\n     * _Available since v3.1._\r\n     */\r\n    function functionCall(address target, bytes memory data, string memory errorMessage) internal returns (bytes memory) {\r\n        return _functionCallWithValue(target, data, 0, errorMessage);\r\n    }\r\n\r\n    /**\r\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\r\n     * but also transferring `value` wei to `target`.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - the calling contract must have an ETH balance of at least `value`.\r\n     * - the called Solidity function must be `payable`.\r\n     *\r\n     * _Available since v3.1._\r\n     */\r\n    function functionCallWithValue(address target, bytes memory data, uint256 value) internal returns (bytes memory) {\r\n        return functionCallWithValue(target, data, value, \"Address: low-level call with value failed\");\r\n    }\r\n\r\n    /**\r\n     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\r\n     * with `errorMessage` as a fallback revert reason when `target` reverts.\r\n     *\r\n     * _Available since v3.1._\r\n     */\r\n    // function functionCallWithValue(address target, bytes memory data, uint256 value, string memory errorMessage) internal returns (bytes memory) {\r\n    //     require(address(this).balance >= value, \"Address: insufficient balance for call\");\r\n    //     return _functionCallWithValue(target, data, value, errorMessage);\r\n    // }\r\n    function functionCallWithValue(address target, bytes memory data, uint256 value, string memory errorMessage) internal returns (bytes memory) {\r\n        require(address(this).balance >= value, \"Address: insufficient balance for call\");\r\n        require(isContract(target), \"Address: call to non-contract\");\r\n\r\n        // solhint-disable-next-line avoid-low-level-calls\r\n        (bool success, bytes memory returndata) = target.call{ value: value }(data);\r\n        return _verifyCallResult(success, returndata, errorMessage);\r\n    }\r\n\r\n    function _functionCallWithValue(address target, bytes memory data, uint256 weiValue, string memory errorMessage) private returns (bytes memory) {\r\n        require(isContract(target), \"Address: call to non-contract\");\r\n\r\n        // solhint-disable-next-line avoid-low-level-calls\r\n        (bool success, bytes memory returndata) = target.call{ value: weiValue }(data);\r\n        if (success) {\r\n            return returndata;\r\n        } else {\r\n            // Look for revert reason and bubble it up if present\r\n            if (returndata.length > 0) {\r\n                // The easiest way to bubble the revert reason is using memory via assembly\r\n\r\n                // solhint-disable-next-line no-inline-assembly\r\n                assembly {\r\n                    let returndata_size := mload(returndata)\r\n                    revert(add(32, returndata), returndata_size)\r\n                }\r\n            } else {\r\n                revert(errorMessage);\r\n            }\r\n        }\r\n    }\r\n\r\n  /**\r\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\r\n     * but performing a static call.\r\n     *\r\n     * _Available since v3.3._\r\n     */\r\n    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\r\n        return functionStaticCall(target, data, \"Address: low-level static call failed\");\r\n    }\r\n\r\n    /**\r\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\r\n     * but performing a static call.\r\n     *\r\n     * _Available since v3.3._\r\n     */\r\n    function functionStaticCall(address target, bytes memory data, string memory errorMessage) internal view returns (bytes memory) {\r\n        require(isContract(target), \"Address: static call to non-contract\");\r\n\r\n        // solhint-disable-next-line avoid-low-level-calls\r\n        (bool success, bytes memory returndata) = target.staticcall(data);\r\n        return _verifyCallResult(success, returndata, errorMessage);\r\n    }\r\n\r\n    /**\r\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\r\n     * but performing a delegate call.\r\n     *\r\n     * _Available since v3.3._\r\n     */\r\n    function functionDelegateCall(address target, bytes memory data) internal returns (bytes memory) {\r\n        return functionDelegateCall(target, data, \"Address: low-level delegate call failed\");\r\n    }\r\n\r\n    /**\r\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\r\n     * but performing a delegate call.\r\n     *\r\n     * _Available since v3.3._\r\n     */\r\n    function functionDelegateCall(address target, bytes memory data, string memory errorMessage) internal returns (bytes memory) {\r\n        require(isContract(target), \"Address: delegate call to non-contract\");\r\n\r\n        // solhint-disable-next-line avoid-low-level-calls\r\n        (bool success, bytes memory returndata) = target.delegatecall(data);\r\n        return _verifyCallResult(success, returndata, errorMessage);\r\n    }\r\n\r\n    function _verifyCallResult(bool success, bytes memory returndata, string memory errorMessage) private pure returns(bytes memory) {\r\n        if (success) {\r\n            return returndata;\r\n        } else {\r\n            // Look for revert reason and bubble it up if present\r\n            if (returndata.length > 0) {\r\n                // The easiest way to bubble the revert reason is using memory via assembly\r\n\r\n                // solhint-disable-next-line no-inline-assembly\r\n                assembly {\r\n                    let returndata_size := mload(returndata)\r\n                    revert(add(32, returndata), returndata_size)\r\n                }\r\n            } else {\r\n                revert(errorMessage);\r\n            }\r\n        }\r\n    }\r\n\r\n    function addressToString(address _address) internal pure returns(string memory) {\r\n        bytes32 _bytes = bytes32(uint256(_address));\r\n        bytes memory HEX = \"0123456789abcdef\";\r\n        bytes memory _addr = new bytes(42);\r\n\r\n        _addr[0] = '0';\r\n        _addr[1] = 'x';\r\n\r\n        for(uint256 i = 0; i < 20; i++) {\r\n            _addr[2+i*2] = HEX[uint8(_bytes[i + 12] >> 4)];\r\n            _addr[3+i*2] = HEX[uint8(_bytes[i + 12] & 0x0f)];\r\n        }\r\n\r\n        return string(_addr);\r\n\r\n    }\r\n}\r\n\r\nlibrary SafeMath {\r\n    /**\r\n     * @dev Returns the addition of two unsigned integers, reverting on\r\n     * overflow.\r\n     *\r\n     * Counterpart to Solidity's `+` operator.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - Addition cannot overflow.\r\n     */\r\n    function add(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        uint256 c = a + b;\r\n        require(c >= a, \"SafeMath: addition overflow\");\r\n\r\n        return c;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the subtraction of two unsigned integers, reverting on\r\n     * overflow (when the result is negative).\r\n     *\r\n     * Counterpart to Solidity's `-` operator.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - Subtraction cannot overflow.\r\n     */\r\n    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        return sub(a, b, \"SafeMath: subtraction overflow\");\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the subtraction of two unsigned integers, reverting with custom message on\r\n     * overflow (when the result is negative).\r\n     *\r\n     * Counterpart to Solidity's `-` operator.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - Subtraction cannot overflow.\r\n     */\r\n    function sub(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\r\n        require(b <= a, errorMessage);\r\n        uint256 c = a - b;\r\n\r\n        return c;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the multiplication of two unsigned integers, reverting on\r\n     * overflow.\r\n     *\r\n     * Counterpart to Solidity's `*` operator.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - Multiplication cannot overflow.\r\n     */\r\n    function mul(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        // Gas optimization: this is cheaper than requiring 'a' not being zero, but the\r\n        // benefit is lost if 'b' is also tested.\r\n        // See: https://github.com/OpenZeppelin/openzeppelin-contracts/pull/522\r\n        if (a == 0) {\r\n            return 0;\r\n        }\r\n\r\n        uint256 c = a * b;\r\n        require(c / a == b, \"SafeMath: multiplication overflow\");\r\n\r\n        return c;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the integer division of two unsigned integers. Reverts on\r\n     * division by zero. The result is rounded towards zero.\r\n     *\r\n     * Counterpart to Solidity's `/` operator. Note: this function uses a\r\n     * `revert` opcode (which leaves remaining gas untouched) while Solidity\r\n     * uses an invalid opcode to revert (consuming all remaining gas).\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - The divisor cannot be zero.\r\n     */\r\n    function div(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        return div(a, b, \"SafeMath: division by zero\");\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the integer division of two unsigned integers. Reverts with custom message on\r\n     * division by zero. The result is rounded towards zero.\r\n     *\r\n     * Counterpart to Solidity's `/` operator. Note: this function uses a\r\n     * `revert` opcode (which leaves remaining gas untouched) while Solidity\r\n     * uses an invalid opcode to revert (consuming all remaining gas).\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - The divisor cannot be zero.\r\n     */\r\n    function div(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\r\n        require(b > 0, errorMessage);\r\n        uint256 c = a / b;\r\n        // assert(a == b * c + a % b); // There is no case in which this doesn't hold\r\n\r\n        return c;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\r\n     * Reverts when dividing by zero.\r\n     *\r\n     * Counterpart to Solidity's `%` operator. This function uses a `revert`\r\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\r\n     * invalid opcode to revert (consuming all remaining gas).\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - The divisor cannot be zero.\r\n     */\r\n    function mod(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        return mod(a, b, \"SafeMath: modulo by zero\");\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\r\n     * Reverts with custom message when dividing by zero.\r\n     *\r\n     * Counterpart to Solidity's `%` operator. This function uses a `revert`\r\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\r\n     * invalid opcode to revert (consuming all remaining gas).\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - The divisor cannot be zero.\r\n     */\r\n    function mod(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\r\n        require(b != 0, errorMessage);\r\n        return a % b;\r\n    }\r\n}\r\n\r\nlibrary SafeERC20 {\r\n    using SafeMath for uint256;\r\n    using Address for address;\r\n\r\n    function safeTransfer(IERC20 token, address to, uint256 value) internal {\r\n        _callOptionalReturn(token, abi.encodeWithSelector(token.transfer.selector, to, value));\r\n    }\r\n\r\n    function safeTransferFrom(IERC20 token, address from, address to, uint256 value) internal {\r\n        _callOptionalReturn(token, abi.encodeWithSelector(token.transferFrom.selector, from, to, value));\r\n    }\r\n\r\n    /**\r\n     * @dev Deprecated. This function has issues similar to the ones found in\r\n     * {IERC20-approve}, and its usage is discouraged.\r\n     *\r\n     * Whenever possible, use {safeIncreaseAllowance} and\r\n     * {safeDecreaseAllowance} instead.\r\n     */\r\n    function safeApprove(IERC20 token, address spender, uint256 value) internal {\r\n        // safeApprove should only be called when setting an initial allowance,\r\n        // or when resetting it to zero. To increase and decrease it, use\r\n        // 'safeIncreaseAllowance' and 'safeDecreaseAllowance'\r\n        // solhint-disable-next-line max-line-length\r\n        require((value == 0) || (token.allowance(address(this), spender) == 0),\r\n            \"SafeERC20: approve from non-zero to non-zero allowance\"\r\n        );\r\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, value));\r\n    }\r\n\r\n    function safeIncreaseAllowance(IERC20 token, address spender, uint256 value) internal {\r\n        uint256 newAllowance = token.allowance(address(this), spender).add(value);\r\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));\r\n    }\r\n\r\n    function safeDecreaseAllowance(IERC20 token, address spender, uint256 value) internal {\r\n        uint256 newAllowance = token.allowance(address(this), spender).sub(value, \"SafeERC20: decreased allowance below zero\");\r\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));\r\n    }\r\n\r\n    /**\r\n     * @dev Imitates a Solidity high-level call (i.e. a regular function call to a contract), relaxing the requirement\r\n     * on the return value: the return value is optional (but if data is returned, it must not be false).\r\n     * @param token The token targeted by the call.\r\n     * @param data The call data (encoded using abi.encode or one of its variants).\r\n     */\r\n    function _callOptionalReturn(IERC20 token, bytes memory data) private {\r\n        // We need to perform a low level call here, to bypass Solidity's return data size checking mechanism, since\r\n        // we're implementing it ourselves. We use {Address.functionCall} to perform this call, which verifies that\r\n        // the target address contains contract code and also asserts for success in the low-level call.\r\n\r\n        bytes memory returndata = address(token).functionCall(data, \"SafeERC20: low-level call failed\");\r\n        if (returndata.length > 0) { // Return data is optional\r\n            // solhint-disable-next-line max-line-length\r\n            require(abi.decode(returndata, (bool)), \"SafeERC20: ERC20 operation did not succeed\");\r\n        }\r\n    }\r\n}\r\n\r\n/**\r\n * @dev Interface of the ERC20 standard as defined in the EIP.\r\n */\r\ninterface IERC20 {\r\n    /**\r\n     * @dev Returns the amount of tokens in existence.\r\n     */\r\n    function totalSupply() external view returns (uint256);\r\n\r\n    /**\r\n     * @dev Returns the amount of tokens owned by `account`.\r\n     */\r\n    function balanceOf(address account) external view returns (uint256);\r\n\r\n    /**\r\n     * @dev Moves `amount` tokens from the caller's account to `recipient`.\r\n     *\r\n     * Returns a boolean value indicating whether the operation succeeded.\r\n     *\r\n     * Emits a {Transfer} event.\r\n     */\r\n    function transfer(address recipient, uint256 amount) external returns (bool);\r\n\r\n    /**\r\n     * @dev Returns the remaining number of tokens that `spender` will be\r\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\r\n     * zero by default.\r\n     *\r\n     * This value changes when {approve} or {transferFrom} are called.\r\n     */\r\n    function allowance(address owner, address spender) external view returns (uint256);\r\n\r\n    /**\r\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\r\n     *\r\n     * Returns a boolean value indicating whether the operation succeeded.\r\n     *\r\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\r\n     * that someone may use both the old and the new allowance by unfortunate\r\n     * transaction ordering. One possible solution to mitigate this race\r\n     * condition is to first reduce the spender's allowance to 0 and set the\r\n     * desired value afterwards:\r\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\r\n     *\r\n     * Emits an {Approval} event.\r\n     */\r\n    function approve(address spender, uint256 amount) external returns (bool);\r\n\r\n    /**\r\n     * @dev Moves `amount` tokens from `sender` to `recipient` using the\r\n     * allowance mechanism. `amount` is then deducted from the caller's\r\n     * allowance.\r\n     *\r\n     * Returns a boolean value indicating whether the operation succeeded.\r\n     *\r\n     * Emits a {Transfer} event.\r\n     */\r\n    function transferFrom(address sender, address recipient, uint256 amount) external returns (bool);\r\n\r\n    /**\r\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\r\n     * another (`to`).\r\n     *\r\n     * Note that `value` may be zero.\r\n     */\r\n    event Transfer(address indexed from, address indexed to, uint256 value);\r\n\r\n    /**\r\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\r\n     * a call to {approve}. `value` is the new allowance.\r\n     */\r\n    event Approval(address indexed owner, address indexed spender, uint256 value);\r\n}\r\n\r\ninterface IOwnable {\r\n  function policy() external view returns (address);\r\n\r\n  function renounceManagement() external;\r\n  \r\n  function pushManagement( address newOwner_ ) external;\r\n  \r\n  function pullManagement() external;\r\n}\r\n\r\ncontract Ownable is IOwnable {\r\n\r\n    address internal _owner;\r\n    address internal _newOwner;\r\n\r\n    event OwnershipPushed(address indexed previousOwner, address indexed newOwner);\r\n    event OwnershipPulled(address indexed previousOwner, address indexed newOwner);\r\n\r\n    constructor () {\r\n        _owner = msg.sender;\r\n        emit OwnershipPushed( address(0), _owner );\r\n    }\r\n\r\n    function policy() public view override returns (address) {\r\n        return _owner;\r\n    }\r\n\r\n    modifier onlyPolicy() {\r\n        require( _owner == msg.sender, \"Ownable: caller is not the owner\" );\r\n        _;\r\n    }\r\n\r\n    function renounceManagement() public virtual override onlyPolicy() {\r\n        emit OwnershipPushed( _owner, address(0) );\r\n        _owner = address(0);\r\n    }\r\n\r\n    function pushManagement( address newOwner_ ) public virtual override onlyPolicy() {\r\n        require( newOwner_ != address(0), \"Ownable: new owner is the zero address\");\r\n        emit OwnershipPushed( _owner, newOwner_ );\r\n        _newOwner = newOwner_;\r\n    }\r\n    \r\n    function pullManagement() public virtual override {\r\n        require( msg.sender == _newOwner, \"Ownable: must be new owner to pull\");\r\n        emit OwnershipPulled( _owner, _newOwner );\r\n        _owner = _newOwner;\r\n    }\r\n}\r\n\r\ninterface ITreasury {\r\n    function deposit( uint _amount, address _token, uint _profit ) external returns ( uint send_ );\r\n    function manage( address _token, uint _amount ) external;\r\n    function valueOf( address _token, uint _amount ) external view returns ( uint value_ );\r\n}\r\n\r\ninterface ICurve3Pool {\r\n    // add liquidity (frax) to receive back FRAX3CRV-f\r\n    function add_liquidity(address _pool, uint256[4] memory _deposit_amounts, uint256 _min_mint_amount) external returns(uint256);\r\n    // remove liquidity (FRAX3CRV-f) to recieve back Frax\r\n    function remove_liquidity_one_coin(address _pool, uint256 _burn_amount, int128 i, uint256 _min_amount) external returns(uint256);\r\n}\r\n\r\n//main Convex contract(booster.sol) basic interface\r\ninterface IConvex{\r\n    //deposit into convex, receive a tokenized deposit.  parameter to stake immediately\r\n    function deposit(uint256 _pid, uint256 _amount, bool _stake) external returns(bool);\r\n    //burn a tokenized deposit to receive curve lp tokens back\r\n    function withdraw(uint256 _pid, uint256 _amount) external returns(bool);\r\n}\r\n\r\n//sample convex reward contracts interface\r\ninterface IConvexRewards{\r\n    //get balance of an address\r\n    function balanceOf(address _account) external returns(uint256);\r\n    //withdraw to a convex tokenized deposit\r\n    function withdraw(uint256 _amount, bool _claim) external returns(bool);\r\n    //withdraw directly to curve LP token\r\n    function withdrawAndUnwrap(uint256 _amount, bool _claim) external returns(bool);\r\n    //claim rewards\r\n    function getReward() external returns(bool);\r\n    //stake a convex tokenized deposit\r\n    function stake(uint256 _amount) external returns(bool);\r\n    //stake a convex tokenized deposit for another address(transfering ownership)\r\n    function stakeFor(address _account,uint256 _amount) external returns(bool);\r\n    //get rewards for an address\r\n    function earned(address _account) external view returns(uint256);\r\n}\r\n\r\n/**\r\n *  Contract deploys reserves from treasury into the Convex lending pool,\r\n *  earning interest and $CVX.\r\n */\r\n\r\ncontract ConvexAllocator is Ownable {\r\n\r\n    /* ======== DEPENDENCIES ======== */\r\n\r\n    using SafeERC20 for IERC20;\r\n    using SafeMath for uint;\r\n\r\n\r\n\r\n    /* ======== STRUCTS ======== */\r\n\r\n    struct tokenData {\r\n        address underlying;\r\n        address curveToken;\r\n        int128 index;\r\n        uint deployed;\r\n        uint limit;\r\n        uint newLimit;\r\n        uint limitChangeTimelockEnd;\r\n    }\r\n\r\n\r\n\r\n    /* ======== STATE VARIABLES ======== */\r\n\r\n    IConvex immutable booster; // Convex deposit contract\r\n    IConvexRewards immutable rewardPool; // Convex reward contract\r\n    ITreasury immutable treasury; // Olympus Treasury\r\n    ICurve3Pool immutable curve3Pool; // Curve 3Pool\r\n\r\n    mapping( address => tokenData ) public tokenInfo; // info for deposited tokens\r\n    mapping( address => uint ) public pidForReserve; // convex pid for token\r\n\r\n    uint public totalValueDeployed; // total RFV deployed into lending pool\r\n\r\n    uint public immutable timelockInBlocks; // timelock to raise deployment limit\r\n\r\n    address[] rewardTokens;\r\n\r\n    \r\n\r\n    /* ======== CONSTRUCTOR ======== */\r\n\r\n    constructor ( \r\n        address _treasury,\r\n        address _booster, \r\n        address _rewardPool,\r\n        address _curve3Pool,\r\n        uint _timelockInBlocks\r\n    ) {\r\n        require( _treasury != address(0) );\r\n        treasury = ITreasury( _treasury );\r\n\r\n        require( _booster != address(0) );\r\n        booster = IConvex( _booster );\r\n\r\n        require( _rewardPool != address(0) );\r\n        rewardPool = IConvexRewards( _rewardPool );\r\n\r\n        require( _curve3Pool != address(0) );\r\n        curve3Pool = ICurve3Pool( _curve3Pool );\r\n\r\n        timelockInBlocks = _timelockInBlocks;\r\n    }\r\n\r\n\r\n\r\n    /* ======== OPEN FUNCTIONS ======== */\r\n\r\n    /**\r\n     *  @notice claims accrued CVX rewards for all tracked crvTokens\r\n     */\r\n    function harvest() public {\r\n        rewardPool.getReward();\r\n\r\n        for( uint i = 0; i < rewardTokens.length; i++ ) {\r\n            uint balance = IERC20( rewardTokens[i] ).balanceOf( address(this) );\r\n\r\n            if ( balance > 0 ) {\r\n                IERC20( rewardTokens[i] ).safeTransfer( address(treasury), balance );\r\n            }\r\n        }\r\n    }\r\n\r\n\r\n\r\n\r\n    /* ======== POLICY FUNCTIONS ======== */\r\n\r\n    /**\r\n     *  @notice withdraws asset from treasury, deposits asset into lending pool, then deposits crvToken into convex\r\n     *  @param token address\r\n     *  @param amount uint\r\n     *  @param amounts uint[]\r\n     *  @param minAmount uint\r\n     */\r\n    function deposit( address token, uint amount, uint[4] calldata amounts, uint minAmount ) public onlyPolicy() {\r\n        require( !exceedsLimit( token, amount ) ); // ensure deposit is within bounds\r\n\r\n        address curveToken = tokenInfo[ token ].curveToken;\r\n\r\n        treasury.manage( token, amount ); // retrieve amount of asset from treasury\r\n\r\n        // account for deposit\r\n        uint value = treasury.valueOf( token, amount );\r\n        accountingFor( token, amount, value, true );\r\n\r\n        IERC20(token).approve(address(curve3Pool), amount); // approve curve pool to spend tokens\r\n        uint curveAmount = curve3Pool.add_liquidity(curveToken, amounts, minAmount); // deposit into curve\r\n\r\n        IERC20( curveToken ).approve( address(booster), curveAmount ); // approve to deposit to convex\r\n        booster.deposit( pidForReserve[ token ], curveAmount, true ); // deposit into convex\r\n    }\r\n\r\n    /**\r\n     *  @notice withdraws crvToken from convex, withdraws from lending pool, then deposits asset into treasury\r\n     *  @param token address\r\n     *  @param amount uint\r\n     *  @param minAmount uint\r\n     */\r\n    function withdraw( address token, uint amount, uint minAmount ) public onlyPolicy() {\r\n        rewardPool.withdrawAndUnwrap( amount, false ); // withdraw to curve token\r\n\r\n        address curveToken = tokenInfo[ token ].curveToken;\r\n\r\n        IERC20(curveToken).approve(address(curve3Pool), amount); // approve 3Pool to spend curveToken\r\n        curve3Pool.remove_liquidity_one_coin(curveToken, amount, tokenInfo[ token ].index, minAmount); // withdraw from curve\r\n\r\n        uint balance = IERC20( token ).balanceOf( address(this) ); // balance of asset withdrawn\r\n\r\n        // account for withdrawal\r\n        uint value = treasury.valueOf( token, balance );\r\n        accountingFor( token, balance, value, false );\r\n\r\n        IERC20( token ).approve( address( treasury ), balance ); // approve to deposit asset into treasury\r\n        treasury.deposit( balance, token, value ); // deposit using value as profit so no OHM is minted\r\n    }\r\n\r\n    /**\r\n     *  @notice adds asset and corresponding crvToken to mapping\r\n     *  @param token address\r\n     *  @param curveToken address\r\n     */\r\n    function addToken( address token, address curveToken, int128 index, uint max, uint pid ) external onlyPolicy() {\r\n        require( token != address(0) );\r\n        require( curveToken != address(0) );\r\n        require( tokenInfo[ token ].deployed == 0 ); \r\n\r\n        tokenInfo[ token ] = tokenData({\r\n            underlying: token,\r\n            curveToken: curveToken,\r\n            index: index,\r\n            deployed: 0,\r\n            limit: max,\r\n            newLimit: 0,\r\n            limitChangeTimelockEnd: 0\r\n        });\r\n\r\n        pidForReserve[ token ] = pid;\r\n    }\r\n\r\n    /**\r\n     *  @notice add new reward token to be harvested\r\n     *  @param token address\r\n     */\r\n    function addRewardToken( address token ) external onlyPolicy() {\r\n        require( IERC20( token ).totalSupply() > 0, \"Invalid address\" );\r\n        require( token != address(0) );\r\n        rewardTokens.push( token );\r\n    }\r\n\r\n    /**\r\n     *  @notice lowers max can be deployed for asset (no timelock)\r\n     *  @param token address\r\n     *  @param newMax uint\r\n     */\r\n    function lowerLimit( address token, uint newMax ) external onlyPolicy() {\r\n        require( newMax < tokenInfo[ token ].limit );\r\n        require( newMax > tokenInfo[ token ].deployed ); // cannot set limit below what has been deployed already\r\n        tokenInfo[ token ].limit = newMax;\r\n    }\r\n    \r\n    /**\r\n     *  @notice starts timelock to raise max allocation for asset\r\n     *  @param token address\r\n     *  @param newMax uint\r\n     */\r\n    function queueRaiseLimit( address token, uint newMax ) external onlyPolicy() {\r\n        tokenInfo[ token ].limitChangeTimelockEnd = block.number.add( timelockInBlocks );\r\n        tokenInfo[ token ].newLimit = newMax;\r\n    }\r\n\r\n    /**\r\n     *  @notice changes max allocation for asset when timelock elapsed\r\n     *  @param token address\r\n     */\r\n    function raiseLimit( address token ) external onlyPolicy() {\r\n        require( block.number >= tokenInfo[ token ].limitChangeTimelockEnd, \"Timelock not expired\" );\r\n        require( tokenInfo[ token ].limitChangeTimelockEnd != 0, \"Timelock not started\" );\r\n\r\n        tokenInfo[ token ].limit = tokenInfo[ token ].newLimit;\r\n        tokenInfo[ token ].newLimit = 0;\r\n        tokenInfo[ token ].limitChangeTimelockEnd = 0;\r\n    }\r\n\r\n\r\n\r\n    /* ======== INTERNAL FUNCTIONS ======== */\r\n\r\n    /**\r\n     *  @notice accounting of deposits/withdrawals of assets\r\n     *  @param token address\r\n     *  @param amount uint\r\n     *  @param value uint\r\n     *  @param add bool\r\n     */\r\n    function accountingFor( address token, uint amount, uint value, bool add ) internal {\r\n        if( add ) {\r\n            tokenInfo[ token ].deployed = tokenInfo[ token ].deployed.add( amount ); // track amount allocated into pool\r\n        \r\n            totalValueDeployed = totalValueDeployed.add( value ); // track total value allocated into pools\r\n            \r\n        } else {\r\n            // track amount allocated into pool\r\n            if ( amount < tokenInfo[ token ].deployed ) {\r\n                tokenInfo[ token ].deployed = tokenInfo[ token ].deployed.sub( amount ); \r\n            } else {\r\n                tokenInfo[ token ].deployed = 0;\r\n            }\r\n            \r\n            // track total value allocated into pools\r\n            if ( value < totalValueDeployed ) {\r\n                totalValueDeployed = totalValueDeployed.sub( value );\r\n            } else {\r\n                totalValueDeployed = 0;\r\n            }\r\n        }\r\n    }\r\n\r\n\r\n    /* ======== VIEW FUNCTIONS ======== */\r\n\r\n    /**\r\n     *  @notice query all pending rewards\r\n     *  @return uint\r\n     */\r\n    function rewardsPending() public view returns ( uint ) {\r\n        return rewardPool.earned( address(this) );\r\n    }\r\n\r\n    /**\r\n     *  @notice checks to ensure deposit does not exceed max allocation for asset\r\n     *  @param token address\r\n     *  @param amount uint\r\n     */\r\n    function exceedsLimit( address token, uint amount ) public view returns ( bool ) {\r\n        uint willBeDeployed = tokenInfo[ token ].deployed.add( amount );\r\n\r\n        return ( willBeDeployed > tokenInfo[ token ].limit );\r\n    }\r\n}","ABI":"[{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_treasury\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_booster\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_rewardPool\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_curve3Pool\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_timelockInBlocks\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipPulled\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipPushed\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"token\",\"type\":\"address\"}],\"name\":\"addRewardToken\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"token\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"curveToken\",\"type\":\"address\"},{\"internalType\":\"int128\",\"name\":\"index\",\"type\":\"int128\"},{\"internalType\":\"uint256\",\"name\":\"max\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"pid\",\"type\":\"uint256\"}],\"name\":\"addToken\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"token\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"internalType\":\"uint256[4]\",\"name\":\"amounts\",\"type\":\"uint256[4]\"},{\"internalType\":\"uint256\",\"name\":\"minAmount\",\"type\":\"uint256\"}],\"name\":\"deposit\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"token\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"exceedsLimit\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"harvest\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"token\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"newMax\",\"type\":\"uint256\"}],\"name\":\"lowerLimit\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"pidForReserve\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"policy\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"pullManagement\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner_\",\"type\":\"address\"}],\"name\":\"pushManagement\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"token\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"newMax\",\"type\":\"uint256\"}],\"name\":\"queueRaiseLimit\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"token\",\"type\":\"address\"}],\"name\":\"raiseLimit\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"renounceManagement\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"rewardsPending\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"timelockInBlocks\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"tokenInfo\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"underlying\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"curveToken\",\"type\":\"address\"},{\"internalType\":\"int128\",\"name\":\"index\",\"type\":\"int128\"},{\"internalType\":\"uint256\",\"name\":\"deployed\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"limit\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"newLimit\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"limitChangeTimelockEnd\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalValueDeployed\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"token\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"minAmount\",\"type\":\"uint256\"}],\"name\":\"withdraw\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}]","ContractName":"ConvexAllocator","CompilerVersion":"v0.7.5+commit.eb77ed08","OptimizationUsed":"0","Runs":"200","ConstructorArguments":"00000000000000000000000031f8cc382c9898b273eff4e0b7626a6987c846e8000000000000000000000000f403c135812408bfbe8713b5a23a04b3d48aae31000000000000000000000000b900ef131301b307db5efcbed9dbb50a3e209b2e000000000000000000000000a79828df1850e8a3a3064576f380d90aecdd335900000000000000000000000000000000000000000000000000000000000019c8","EVMVersion":"Default","Library":"","LicenseType":"Unknown","Proxy":"0","Implementation":"","SwarmSource":"ipfs://a4e0f17c2de01aa4f836b0f59d11ee7e8eabaef5976989f1967eb6ac41270ab4"}]}