{"status":"1","message":"OK","result":[{"SourceCode":"// SPDX-License-Identifier: MIT\r\npragma solidity >=0.7.2;\r\n\r\n\r\nabstract contract Context {\r\n    function _msgSender() internal view virtual returns (address payable) {\r\n        return msg.sender;\r\n    }\r\n\r\n    function _msgData() internal view virtual returns (bytes memory) {\r\n        this; // silence state mutability warning without generating bytecode - see https://github.com/ethereum/solidity/issues/2691\r\n        return msg.data;\r\n    }\r\n}\r\n\r\n\r\nabstract contract Ownable is Context {\r\n    address private _owner;\r\n\r\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\r\n\r\n    /**\r\n     * @dev Initializes the contract setting the deployer as the initial owner.\r\n     */\r\n    constructor () internal {\r\n        address msgSender = _msgSender();\r\n        _owner = msgSender;\r\n        emit OwnershipTransferred(address(0), msgSender);\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the address of the current owner.\r\n     */\r\n    function owner() public view virtual returns (address) {\r\n        return _owner;\r\n    }\r\n\r\n    /**\r\n     * @dev Throws if called by any account other than the owner.\r\n     */\r\n    modifier onlyOwner() {\r\n        require(owner() == _msgSender(), \"Ownable: caller is not the owner\");\r\n        _;\r\n    }\r\n\r\n    /**\r\n     * @dev Leaves the contract without owner. It will not be possible to call\r\n     * `onlyOwner` functions anymore. Can only be called by the current owner.\r\n     *\r\n     * NOTE: Renouncing ownership will leave the contract without an owner,\r\n     * thereby removing any functionality that is only available to the owner.\r\n     */\r\n    function renounceOwnership() public virtual onlyOwner {\r\n        emit OwnershipTransferred(_owner, address(0));\r\n        _owner = address(0);\r\n    }\r\n\r\n    /**\r\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\r\n     * Can only be called by the current owner.\r\n     */\r\n    function transferOwnership(address newOwner) public virtual onlyOwner {\r\n        require(newOwner != address(0), \"Ownable: new owner is the zero address\");\r\n        emit OwnershipTransferred(_owner, newOwner);\r\n        _owner = newOwner;\r\n    }\r\n}\r\n\r\n\r\ncontract VaultRegistry is Ownable {\r\n    /// @dev Register vaults that can withdraw for free to each other\r\n    /// mapping(fromVault => mapping(toVault => true/false))\r\n    mapping(address => mapping(address => bool)) public canWithdrawForFree;\r\n\r\n    /// @dev Register vaults that can trade with each other\r\n    /// mapping(longVault => mapping(shortVault => true/false))\r\n    mapping(address => mapping(address => bool)) public canCrossTrade;\r\n\r\n    event RegisterWithdrawal(address fromVault, address toVault);\r\n\r\n    event RevokeWithdrawal(address fromVault, address toVault);\r\n\r\n    event RegisterCrossTrade(address longVault, address shortVault);\r\n\r\n    event RevokeCrossTrade(address longVault, address shortVault);\r\n\r\n    /**\r\n     * @notice Register vaults that can withdraw to each other for free\r\n     * @param fromVault is the vault to withdraw from\r\n     * @param toVault is the vault to withdraw to\r\n     */\r\n    function registerFreeWithdrawal(address fromVault, address toVault)\r\n        external\r\n        onlyOwner\r\n    {\r\n        canWithdrawForFree[fromVault][toVault] = true;\r\n        emit RegisterWithdrawal(fromVault, toVault);\r\n    }\r\n\r\n    /**\r\n     * @notice Revoke withdrawal access between vaults\r\n     * @param fromVault is the vault to withdraw from\r\n     * @param toVault is the vault to withdraw to\r\n     */\r\n    function revokeFreeWithdrawal(address fromVault, address toVault)\r\n        external\r\n        onlyOwner\r\n    {\r\n        canWithdrawForFree[fromVault][toVault] = false;\r\n        emit RevokeWithdrawal(fromVault, toVault);\r\n    }\r\n\r\n    /**\r\n     * @notice Register vaults that can trade options with each other\r\n     * @param longVault is the vault that is buying options\r\n     * @param shortVault is the vault that is selling options\r\n     */\r\n    function registerCrossTrade(address longVault, address shortVault)\r\n        external\r\n        onlyOwner\r\n    {\r\n        canCrossTrade[longVault][shortVault] = true;\r\n        emit RegisterCrossTrade(longVault, shortVault);\r\n    }\r\n\r\n    /**\r\n     * @notice Revoke trading access between vaults\r\n     * @param longVault is the vault that is buying options\r\n     * @param shortVault is the vault that is selling options\r\n     */\r\n    function revokeCrossTrade(address longVault, address shortVault)\r\n        external\r\n        onlyOwner\r\n    {\r\n        canCrossTrade[longVault][shortVault] = false;\r\n        emit RevokeCrossTrade(longVault, shortVault);\r\n    }\r\n}","ABI":"[{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"longVault\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"shortVault\",\"type\":\"address\"}],\"name\":\"RegisterCrossTrade\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"fromVault\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"toVault\",\"type\":\"address\"}],\"name\":\"RegisterWithdrawal\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"longVault\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"shortVault\",\"type\":\"address\"}],\"name\":\"RevokeCrossTrade\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"fromVault\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"toVault\",\"type\":\"address\"}],\"name\":\"RevokeWithdrawal\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"canCrossTrade\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"canWithdrawForFree\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"longVault\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"shortVault\",\"type\":\"address\"}],\"name\":\"registerCrossTrade\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"fromVault\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"toVault\",\"type\":\"address\"}],\"name\":\"registerFreeWithdrawal\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"longVault\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"shortVault\",\"type\":\"address\"}],\"name\":\"revokeCrossTrade\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"fromVault\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"toVault\",\"type\":\"address\"}],\"name\":\"revokeFreeWithdrawal\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}]","ContractName":"VaultRegistry","CompilerVersion":"v0.7.2+commit.51b20bc0","OptimizationUsed":"1","Runs":"200","ConstructorArguments":"","EVMVersion":"Default","Library":"","LicenseType":"MIT","Proxy":"0","Implementation":"","SwarmSource":"ipfs://4b2f852dac4239e6fe879068849e5e4f7a47e52e2e1499f2585e4c421f6c1219"}]}