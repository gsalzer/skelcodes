{"status":"1","message":"OK","result":[{"SourceCode":"{{\r\n  \"language\": \"Solidity\",\r\n  \"sources\": {\r\n    \"/Users/alexanderhsu/dev/nft/bittybots/bittybots-contract/contracts/UIntArrays.sol\": {\r\n      \"content\": \"// contracts/UIntArrays.sol\\n// SPDX-License-Identifier: MIT\\n\\npragma solidity 0.8.7;\\n\\n\\nlibrary UIntArrays {\\n    function sum(uint[] memory _array) public pure returns (uint result) {\\n        result = 0;\\n        for (uint i = 0; i < _array.length; i++){\\n            result += _array[i];\\n        }\\n    }\\n\\n    function randomIndexFromWeightedArray(uint[] memory _weightedArray, uint _randomNumber) public pure returns (uint) {\\n        uint totalSumWeight = sum(_weightedArray);\\n        require(totalSumWeight > 0, \\\"Array has no weight\\\");\\n        uint randomSumWeight = _randomNumber % totalSumWeight;\\n        uint currentSumWeight = 0;\\n\\n        for (uint i = 0; i < _weightedArray.length; i++) {\\n            currentSumWeight += _weightedArray[i];\\n            if (randomSumWeight < currentSumWeight) {\\n                return i;\\n            }\\n        }\\n\\n        return _weightedArray.length - 1;\\n    } \\n\\n    function hash(uint[] memory _array, uint _endIndex) public pure returns (bytes32) {\\n        bytes memory encoded;\\n        for (uint i = 0; i < _endIndex; i++) {\\n            encoded = abi.encode(encoded, _array[i]);\\n        }\\n\\n        return keccak256(encoded);\\n    }\\n\\n    function arrayFromPackedUint(uint _packed, uint _size) public pure returns (uint[] memory) {\\n        uint[] memory array = new uint[](_size);\\n\\n        for (uint i = 0; i < _size; i++) {\\n            array[i] = uint256(uint16(_packed >> (i * 16)));\\n        }\\n\\n        return array;\\n    }\\n\\n    function packedUintFromArray(uint[] memory _array) public pure returns (uint _packed) {\\n        require(_array.length < 17, \\\"pack array > 16\\\");\\n        for (uint i = 0; i < _array.length; i++) {\\n            _packed |= _array[i] << (i * 16);\\n        }\\n    }\\n\\n    function elementFromPackedUint(uint _packed, uint _index) public pure returns (uint) {\\n        return uint256(uint16(_packed >> (_index * 16)));\\n    }\\n\\n    function decrementPackedUint(uint _packed, uint _index, uint _number) public pure returns (uint result) {\\n        result = _packed & ~(((1 << 16) - 1) << (_index * 16));\\n        result |= (elementFromPackedUint(_packed, _index) - _number) << (_index * 16);\\n    }\\n\\n    function incrementPackedUint(uint _packed, uint _index, uint _number) public pure returns (uint result) {\\n        result = _packed & ~(((1 << 16) - 1) << (_index * 16));\\n        result |= (elementFromPackedUint(_packed, _index) + _number) << (_index * 16);\\n    }\\n\\n    function mergeArrays(uint[] memory _array1, uint[] memory _array2, bool _isPositive) public pure returns (uint[] memory) {\\n        for (uint i = 0; i < _array1.length; i++) {\\n            if (_isPositive) {\\n                _array1[i] += _array2[i];\\n            } else {\\n                _array1[i] -= _array2[i];\\n            }\\n            \\n        }\\n        return _array1;\\n    }\\n}\\n\"\r\n    }\r\n  },\r\n  \"settings\": {\r\n    \"remappings\": [],\r\n    \"optimizer\": {\r\n      \"enabled\": true,\r\n      \"runs\": 20\r\n    },\r\n    \"evmVersion\": \"london\",\r\n    \"libraries\": {},\r\n    \"outputSelection\": {\r\n      \"*\": {\r\n        \"*\": [\r\n          \"evm.bytecode\",\r\n          \"evm.deployedBytecode\",\r\n          \"abi\"\r\n        ]\r\n      }\r\n    }\r\n  }\r\n}}","ABI":"[{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_packed\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_size\",\"type\":\"uint256\"}],\"name\":\"arrayFromPackedUint\",\"outputs\":[{\"internalType\":\"uint256[]\",\"name\":\"\",\"type\":\"uint256[]\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_packed\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_index\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_number\",\"type\":\"uint256\"}],\"name\":\"decrementPackedUint\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"result\",\"type\":\"uint256\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_packed\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_index\",\"type\":\"uint256\"}],\"name\":\"elementFromPackedUint\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256[]\",\"name\":\"_array\",\"type\":\"uint256[]\"},{\"internalType\":\"uint256\",\"name\":\"_endIndex\",\"type\":\"uint256\"}],\"name\":\"hash\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_packed\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_index\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_number\",\"type\":\"uint256\"}],\"name\":\"incrementPackedUint\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"result\",\"type\":\"uint256\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256[]\",\"name\":\"_array1\",\"type\":\"uint256[]\"},{\"internalType\":\"uint256[]\",\"name\":\"_array2\",\"type\":\"uint256[]\"},{\"internalType\":\"bool\",\"name\":\"_isPositive\",\"type\":\"bool\"}],\"name\":\"mergeArrays\",\"outputs\":[{\"internalType\":\"uint256[]\",\"name\":\"\",\"type\":\"uint256[]\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256[]\",\"name\":\"_array\",\"type\":\"uint256[]\"}],\"name\":\"packedUintFromArray\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"_packed\",\"type\":\"uint256\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256[]\",\"name\":\"_weightedArray\",\"type\":\"uint256[]\"},{\"internalType\":\"uint256\",\"name\":\"_randomNumber\",\"type\":\"uint256\"}],\"name\":\"randomIndexFromWeightedArray\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256[]\",\"name\":\"_array\",\"type\":\"uint256[]\"}],\"name\":\"sum\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"result\",\"type\":\"uint256\"}],\"stateMutability\":\"pure\",\"type\":\"function\"}]","ContractName":"UIntArrays","CompilerVersion":"v0.8.7+commit.e28d00a7","OptimizationUsed":"1","Runs":"20","ConstructorArguments":"","EVMVersion":"Default","Library":"","LicenseType":"","Proxy":"0","Implementation":"","SwarmSource":""}]}