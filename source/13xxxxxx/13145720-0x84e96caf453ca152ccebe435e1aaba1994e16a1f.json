{"status":"1","message":"OK","result":[{"SourceCode":"// SPDX-License-Identifier: AGPL-3.0\r\n\r\npragma solidity 0.6.12;\r\npragma experimental ABIEncoderV2;\r\n\r\n// Global Enums and Structs\r\n\r\n\r\n\r\nstruct StrategyParams {\r\n    uint256 performanceFee;\r\n    uint256 activation;\r\n    uint256 debtRatio;\r\n    uint256 minDebtPerHarvest;\r\n    uint256 maxDebtPerHarvest;\r\n    uint256 lastReport;\r\n    uint256 totalDebt;\r\n    uint256 totalGain;\r\n    uint256 totalLoss;\r\n}\r\n\r\n// Part: IMasterchef\r\n\r\ninterface IMasterchef {\r\n    // Info of each pool.\r\n    struct PoolInfo {\r\n        address lpToken; // Address of LP token contract.\r\n        uint256 allocPoint; // How many allocation points assigned to this pool. Tokenss to distribute per block.\r\n        uint256 lastRewardBlock; // Last block number that Tokens distribution occurs.\r\n        uint256 acctokenPerShare; // Accumulated Tokens per share, times 1e12. See below.\r\n    }\r\n\r\n    // Info of each user.\r\n    struct UserInfo {\r\n        uint256 amount; // How many LP tokens the user has provided.\r\n        uint256 rewardDebt; // Reward debt.\r\n    }\r\n\r\n    function deposit(uint256 _pid, uint256 _amount) external;\r\n\r\n    function withdraw(uint256 _pid, uint256 _amount) external;\r\n\r\n    function userInfo(uint256, address) external view returns (UserInfo memory);\r\n\r\n    function poolInfo(uint256) external view returns (PoolInfo memory);\r\n}\r\n\r\n// Part: IPriceCalculator\r\n\r\n/**\r\n * Hegic\r\n * Copyright (C) 2021 Hegic Protocol\r\n *\r\n * This program is free software: you can redistribute it and/or modify\r\n * it under the terms of the GNU General Public License as published by\r\n * the Free Software Foundation, either version 3 of the License, or\r\n * (at your option) any later version.\r\n *\r\n * This program is distributed in the hope that it will be useful,\r\n * but WITHOUT ANY WARRANTY; without even the implied warranty of\r\n * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\r\n * GNU General Public License for more details.\r\n *\r\n * You should have received a copy of the GNU General Public License\r\n * along with this program.  If not, see <http://www.gnu.org/licenses/>.\r\n **/\r\n\r\n// /**\r\n//  * @author 0mllwntrmt3\r\n//  * @title Hegic Protocol V8888 Interface\r\n//  * @notice The interface for the price calculator,\r\n//  *   options, pools and staking contracts.\r\n//  **/\r\n\r\n/**\r\n * @notice The interface fot the contract that calculates\r\n *   the options prices (the premiums) that are adjusted\r\n *   through balancing the `ImpliedVolRate` parameter.\r\n **/\r\ninterface IPriceCalculator {\r\n    /**\r\n     * @param period The option period\r\n     * @param amount The option size\r\n     * @param strike The option strike\r\n     **/\r\n    function calculateTotalPremium(\r\n        uint256 period,\r\n        uint256 amount,\r\n        uint256 strike\r\n    ) external view returns (uint256 settlementFee, uint256 premium);\r\n}\r\n\r\n// Part: IUniswapV2Factory\r\n\r\ninterface IUniswapV2Factory {\r\n    event PairCreated(\r\n        address indexed token0,\r\n        address indexed token1,\r\n        address pair,\r\n        uint256\r\n    );\r\n\r\n    function feeTo() external view returns (address);\r\n\r\n    function feeToSetter() external view returns (address);\r\n\r\n    function getPair(address tokenA, address tokenB)\r\n        external\r\n        view\r\n        returns (address pair);\r\n\r\n    function allPairs(uint256) external view returns (address pair);\r\n\r\n    function allPairsLength() external view returns (uint256);\r\n\r\n    function createPair(address tokenA, address tokenB)\r\n        external\r\n        returns (address pair);\r\n\r\n    function setFeeTo(address) external;\r\n\r\n    function setFeeToSetter(address) external;\r\n}\r\n\r\n// Part: IUniswapV2Pair\r\n\r\ninterface IUniswapV2Pair {\r\n    event Approval(\r\n        address indexed owner,\r\n        address indexed spender,\r\n        uint256 value\r\n    );\r\n    event Transfer(address indexed from, address indexed to, uint256 value);\r\n\r\n    function name() external pure returns (string memory);\r\n\r\n    function symbol() external pure returns (string memory);\r\n\r\n    function decimals() external pure returns (uint8);\r\n\r\n    function totalSupply() external view returns (uint256);\r\n\r\n    function balanceOf(address owner) external view returns (uint256);\r\n\r\n    function allowance(address owner, address spender)\r\n        external\r\n        view\r\n        returns (uint256);\r\n\r\n    function approve(address spender, uint256 value) external returns (bool);\r\n\r\n    function transfer(address to, uint256 value) external returns (bool);\r\n\r\n    function transferFrom(\r\n        address from,\r\n        address to,\r\n        uint256 value\r\n    ) external returns (bool);\r\n\r\n    function DOMAIN_SEPARATOR() external view returns (bytes32);\r\n\r\n    function PERMIT_TYPEHASH() external pure returns (bytes32);\r\n\r\n    function nonces(address owner) external view returns (uint256);\r\n\r\n    function permit(\r\n        address owner,\r\n        address spender,\r\n        uint256 value,\r\n        uint256 deadline,\r\n        uint8 v,\r\n        bytes32 r,\r\n        bytes32 s\r\n    ) external;\r\n\r\n    event Mint(address indexed sender, uint256 amount0, uint256 amount1);\r\n    event Burn(\r\n        address indexed sender,\r\n        uint256 amount0,\r\n        uint256 amount1,\r\n        address indexed to\r\n    );\r\n    event Swap(\r\n        address indexed sender,\r\n        uint256 amount0In,\r\n        uint256 amount1In,\r\n        uint256 amount0Out,\r\n        uint256 amount1Out,\r\n        address indexed to\r\n    );\r\n    event Sync(uint112 reserve0, uint112 reserve1);\r\n\r\n    function MINIMUM_LIQUIDITY() external pure returns (uint256);\r\n\r\n    function factory() external view returns (address);\r\n\r\n    function token0() external view returns (address);\r\n\r\n    function token1() external view returns (address);\r\n\r\n    function getReserves()\r\n        external\r\n        view\r\n        returns (\r\n            uint112 reserve0,\r\n            uint112 reserve1,\r\n            uint32 blockTimestampLast\r\n        );\r\n\r\n    function price0CumulativeLast() external view returns (uint256);\r\n\r\n    function price1CumulativeLast() external view returns (uint256);\r\n\r\n    function kLast() external view returns (uint256);\r\n\r\n    function mint(address to) external returns (uint256 liquidity);\r\n\r\n    function burn(address to)\r\n        external\r\n        returns (uint256 amount0, uint256 amount1);\r\n\r\n    function swap(\r\n        uint256 amount0Out,\r\n        uint256 amount1Out,\r\n        address to,\r\n        bytes calldata data\r\n    ) external;\r\n\r\n    function skim(address to) external;\r\n\r\n    function sync() external;\r\n\r\n    function initialize(address, address) external;\r\n}\r\n\r\n// Part: IUniswapV2Router01\r\n\r\ninterface IUniswapV2Router01 {\r\n    function factory() external pure returns (address);\r\n\r\n    function WETH() external pure returns (address);\r\n\r\n    function addLiquidity(\r\n        address tokenA,\r\n        address tokenB,\r\n        uint256 amountADesired,\r\n        uint256 amountBDesired,\r\n        uint256 amountAMin,\r\n        uint256 amountBMin,\r\n        address to,\r\n        uint256 deadline\r\n    )\r\n        external\r\n        returns (\r\n            uint256 amountA,\r\n            uint256 amountB,\r\n            uint256 liquidity\r\n        );\r\n\r\n    function addLiquidityETH(\r\n        address token,\r\n        uint256 amountTokenDesired,\r\n        uint256 amountTokenMin,\r\n        uint256 amountETHMin,\r\n        address to,\r\n        uint256 deadline\r\n    )\r\n        external\r\n        payable\r\n        returns (\r\n            uint256 amountToken,\r\n            uint256 amountETH,\r\n            uint256 liquidity\r\n        );\r\n\r\n    function removeLiquidity(\r\n        address tokenA,\r\n        address tokenB,\r\n        uint256 liquidity,\r\n        uint256 amountAMin,\r\n        uint256 amountBMin,\r\n        address to,\r\n        uint256 deadline\r\n    ) external returns (uint256 amountA, uint256 amountB);\r\n\r\n    function removeLiquidityETH(\r\n        address token,\r\n        uint256 liquidity,\r\n        uint256 amountTokenMin,\r\n        uint256 amountETHMin,\r\n        address to,\r\n        uint256 deadline\r\n    ) external returns (uint256 amountToken, uint256 amountETH);\r\n\r\n    function removeLiquidityWithPermit(\r\n        address tokenA,\r\n        address tokenB,\r\n        uint256 liquidity,\r\n        uint256 amountAMin,\r\n        uint256 amountBMin,\r\n        address to,\r\n        uint256 deadline,\r\n        bool approveMax,\r\n        uint8 v,\r\n        bytes32 r,\r\n        bytes32 s\r\n    ) external returns (uint256 amountA, uint256 amountB);\r\n\r\n    function removeLiquidityETHWithPermit(\r\n        address token,\r\n        uint256 liquidity,\r\n        uint256 amountTokenMin,\r\n        uint256 amountETHMin,\r\n        address to,\r\n        uint256 deadline,\r\n        bool approveMax,\r\n        uint8 v,\r\n        bytes32 r,\r\n        bytes32 s\r\n    ) external returns (uint256 amountToken, uint256 amountETH);\r\n\r\n    function swapExactTokensForTokens(\r\n        uint256 amountIn,\r\n        uint256 amountOutMin,\r\n        address[] calldata path,\r\n        address to,\r\n        uint256 deadline\r\n    ) external returns (uint256[] memory amounts);\r\n\r\n    function swapTokensForExactTokens(\r\n        uint256 amountOut,\r\n        uint256 amountInMax,\r\n        address[] calldata path,\r\n        address to,\r\n        uint256 deadline\r\n    ) external returns (uint256[] memory amounts);\r\n\r\n    function swapExactETHForTokens(\r\n        uint256 amountOutMin,\r\n        address[] calldata path,\r\n        address to,\r\n        uint256 deadline\r\n    ) external payable returns (uint256[] memory amounts);\r\n\r\n    function swapTokensForExactETH(\r\n        uint256 amountOut,\r\n        uint256 amountInMax,\r\n        address[] calldata path,\r\n        address to,\r\n        uint256 deadline\r\n    ) external returns (uint256[] memory amounts);\r\n\r\n    function swapExactTokensForETH(\r\n        uint256 amountIn,\r\n        uint256 amountOutMin,\r\n        address[] calldata path,\r\n        address to,\r\n        uint256 deadline\r\n    ) external returns (uint256[] memory amounts);\r\n\r\n    function swapETHForExactTokens(\r\n        uint256 amountOut,\r\n        address[] calldata path,\r\n        address to,\r\n        uint256 deadline\r\n    ) external payable returns (uint256[] memory amounts);\r\n\r\n    function quote(\r\n        uint256 amountA,\r\n        uint256 reserveA,\r\n        uint256 reserveB\r\n    ) external pure returns (uint256 amountB);\r\n\r\n    function getAmountOut(\r\n        uint256 amountIn,\r\n        uint256 reserveIn,\r\n        uint256 reserveOut\r\n    ) external pure returns (uint256 amountOut);\r\n\r\n    function getAmountIn(\r\n        uint256 amountOut,\r\n        uint256 reserveIn,\r\n        uint256 reserveOut\r\n    ) external pure returns (uint256 amountIn);\r\n\r\n    function getAmountsOut(uint256 amountIn, address[] calldata path)\r\n        external\r\n        view\r\n        returns (uint256[] memory amounts);\r\n\r\n    function getAmountsIn(uint256 amountOut, address[] calldata path)\r\n        external\r\n        view\r\n        returns (uint256[] memory amounts);\r\n}\r\n\r\n// Part: JointAPI\r\n\r\ninterface JointAPI {\r\n    function prepareReturn(bool returnFunds) external;\r\n\r\n    function adjustPosition() external;\r\n\r\n    function providerA() external view returns (address);\r\n\r\n    function providerB() external view returns (address);\r\n\r\n    function estimatedTotalAssetsInToken(address token)\r\n        external\r\n        view\r\n        returns (uint256);\r\n}\r\n\r\n// Part: OpenZeppelin/openzeppelin-contracts@3.1.0/Address\r\n\r\n/**\r\n * @dev Collection of functions related to the address type\r\n */\r\nlibrary Address {\r\n    /**\r\n     * @dev Returns true if `account` is a contract.\r\n     *\r\n     * [IMPORTANT]\r\n     * ====\r\n     * It is unsafe to assume that an address for which this function returns\r\n     * false is an externally-owned account (EOA) and not a contract.\r\n     *\r\n     * Among others, `isContract` will return false for the following\r\n     * types of addresses:\r\n     *\r\n     *  - an externally-owned account\r\n     *  - a contract in construction\r\n     *  - an address where a contract will be created\r\n     *  - an address where a contract lived, but was destroyed\r\n     * ====\r\n     */\r\n    function isContract(address account) internal view returns (bool) {\r\n        // According to EIP-1052, 0x0 is the value returned for not-yet created accounts\r\n        // and 0xc5d2460186f7233c927e7db2dcc703c0e500b653ca82273b7bfad8045d85a470 is returned\r\n        // for accounts without code, i.e. `keccak256('')`\r\n        bytes32 codehash;\r\n        bytes32 accountHash = 0xc5d2460186f7233c927e7db2dcc703c0e500b653ca82273b7bfad8045d85a470;\r\n        // solhint-disable-next-line no-inline-assembly\r\n        assembly { codehash := extcodehash(account) }\r\n        return (codehash != accountHash && codehash != 0x0);\r\n    }\r\n\r\n    /**\r\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\r\n     * `recipient`, forwarding all available gas and reverting on errors.\r\n     *\r\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\r\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\r\n     * imposed by `transfer`, making them unable to receive funds via\r\n     * `transfer`. {sendValue} removes this limitation.\r\n     *\r\n     * https://diligence.consensys.net/posts/2019/09/stop-using-soliditys-transfer-now/[Learn more].\r\n     *\r\n     * IMPORTANT: because control is transferred to `recipient`, care must be\r\n     * taken to not create reentrancy vulnerabilities. Consider using\r\n     * {ReentrancyGuard} or the\r\n     * https://solidity.readthedocs.io/en/v0.5.11/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\r\n     */\r\n    function sendValue(address payable recipient, uint256 amount) internal {\r\n        require(address(this).balance >= amount, \"Address: insufficient balance\");\r\n\r\n        // solhint-disable-next-line avoid-low-level-calls, avoid-call-value\r\n        (bool success, ) = recipient.call{ value: amount }(\"\");\r\n        require(success, \"Address: unable to send value, recipient may have reverted\");\r\n    }\r\n\r\n    /**\r\n     * @dev Performs a Solidity function call using a low level `call`. A\r\n     * plain`call` is an unsafe replacement for a function call: use this\r\n     * function instead.\r\n     *\r\n     * If `target` reverts with a revert reason, it is bubbled up by this\r\n     * function (like regular Solidity function calls).\r\n     *\r\n     * Returns the raw returned data. To convert to the expected return value,\r\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - `target` must be a contract.\r\n     * - calling `target` with `data` must not revert.\r\n     *\r\n     * _Available since v3.1._\r\n     */\r\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\r\n      return functionCall(target, data, \"Address: low-level call failed\");\r\n    }\r\n\r\n    /**\r\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\r\n     * `errorMessage` as a fallback revert reason when `target` reverts.\r\n     *\r\n     * _Available since v3.1._\r\n     */\r\n    function functionCall(address target, bytes memory data, string memory errorMessage) internal returns (bytes memory) {\r\n        return _functionCallWithValue(target, data, 0, errorMessage);\r\n    }\r\n\r\n    /**\r\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\r\n     * but also transferring `value` wei to `target`.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - the calling contract must have an ETH balance of at least `value`.\r\n     * - the called Solidity function must be `payable`.\r\n     *\r\n     * _Available since v3.1._\r\n     */\r\n    function functionCallWithValue(address target, bytes memory data, uint256 value) internal returns (bytes memory) {\r\n        return functionCallWithValue(target, data, value, \"Address: low-level call with value failed\");\r\n    }\r\n\r\n    /**\r\n     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\r\n     * with `errorMessage` as a fallback revert reason when `target` reverts.\r\n     *\r\n     * _Available since v3.1._\r\n     */\r\n    function functionCallWithValue(address target, bytes memory data, uint256 value, string memory errorMessage) internal returns (bytes memory) {\r\n        require(address(this).balance >= value, \"Address: insufficient balance for call\");\r\n        return _functionCallWithValue(target, data, value, errorMessage);\r\n    }\r\n\r\n    function _functionCallWithValue(address target, bytes memory data, uint256 weiValue, string memory errorMessage) private returns (bytes memory) {\r\n        require(isContract(target), \"Address: call to non-contract\");\r\n\r\n        // solhint-disable-next-line avoid-low-level-calls\r\n        (bool success, bytes memory returndata) = target.call{ value: weiValue }(data);\r\n        if (success) {\r\n            return returndata;\r\n        } else {\r\n            // Look for revert reason and bubble it up if present\r\n            if (returndata.length > 0) {\r\n                // The easiest way to bubble the revert reason is using memory via assembly\r\n\r\n                // solhint-disable-next-line no-inline-assembly\r\n                assembly {\r\n                    let returndata_size := mload(returndata)\r\n                    revert(add(32, returndata), returndata_size)\r\n                }\r\n            } else {\r\n                revert(errorMessage);\r\n            }\r\n        }\r\n    }\r\n}\r\n\r\n// Part: OpenZeppelin/openzeppelin-contracts@3.1.0/IERC165\r\n\r\n/**\r\n * @dev Interface of the ERC165 standard, as defined in the\r\n * https://eips.ethereum.org/EIPS/eip-165[EIP].\r\n *\r\n * Implementers can declare support of contract interfaces, which can then be\r\n * queried by others ({ERC165Checker}).\r\n *\r\n * For an implementation, see {ERC165}.\r\n */\r\ninterface IERC165 {\r\n    /**\r\n     * @dev Returns true if this contract implements the interface defined by\r\n     * `interfaceId`. See the corresponding\r\n     * https://eips.ethereum.org/EIPS/eip-165#how-interfaces-are-identified[EIP section]\r\n     * to learn more about how these ids are created.\r\n     *\r\n     * This function call must use less than 30 000 gas.\r\n     */\r\n    function supportsInterface(bytes4 interfaceId) external view returns (bool);\r\n}\r\n\r\n// Part: OpenZeppelin/openzeppelin-contracts@3.1.0/IERC20\r\n\r\n/**\r\n * @dev Interface of the ERC20 standard as defined in the EIP.\r\n */\r\ninterface IERC20 {\r\n    /**\r\n     * @dev Returns the amount of tokens in existence.\r\n     */\r\n    function totalSupply() external view returns (uint256);\r\n\r\n    /**\r\n     * @dev Returns the amount of tokens owned by `account`.\r\n     */\r\n    function balanceOf(address account) external view returns (uint256);\r\n\r\n    /**\r\n     * @dev Moves `amount` tokens from the caller's account to `recipient`.\r\n     *\r\n     * Returns a boolean value indicating whether the operation succeeded.\r\n     *\r\n     * Emits a {Transfer} event.\r\n     */\r\n    function transfer(address recipient, uint256 amount) external returns (bool);\r\n\r\n    /**\r\n     * @dev Returns the remaining number of tokens that `spender` will be\r\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\r\n     * zero by default.\r\n     *\r\n     * This value changes when {approve} or {transferFrom} are called.\r\n     */\r\n    function allowance(address owner, address spender) external view returns (uint256);\r\n\r\n    /**\r\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\r\n     *\r\n     * Returns a boolean value indicating whether the operation succeeded.\r\n     *\r\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\r\n     * that someone may use both the old and the new allowance by unfortunate\r\n     * transaction ordering. One possible solution to mitigate this race\r\n     * condition is to first reduce the spender's allowance to 0 and set the\r\n     * desired value afterwards:\r\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\r\n     *\r\n     * Emits an {Approval} event.\r\n     */\r\n    function approve(address spender, uint256 amount) external returns (bool);\r\n\r\n    /**\r\n     * @dev Moves `amount` tokens from `sender` to `recipient` using the\r\n     * allowance mechanism. `amount` is then deducted from the caller's\r\n     * allowance.\r\n     *\r\n     * Returns a boolean value indicating whether the operation succeeded.\r\n     *\r\n     * Emits a {Transfer} event.\r\n     */\r\n    function transferFrom(address sender, address recipient, uint256 amount) external returns (bool);\r\n\r\n    /**\r\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\r\n     * another (`to`).\r\n     *\r\n     * Note that `value` may be zero.\r\n     */\r\n    event Transfer(address indexed from, address indexed to, uint256 value);\r\n\r\n    /**\r\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\r\n     * a call to {approve}. `value` is the new allowance.\r\n     */\r\n    event Approval(address indexed owner, address indexed spender, uint256 value);\r\n}\r\n\r\n// Part: OpenZeppelin/openzeppelin-contracts@3.1.0/Math\r\n\r\n/**\r\n * @dev Standard math utilities missing in the Solidity language.\r\n */\r\nlibrary Math {\r\n    /**\r\n     * @dev Returns the largest of two numbers.\r\n     */\r\n    function max(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        return a >= b ? a : b;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the smallest of two numbers.\r\n     */\r\n    function min(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        return a < b ? a : b;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the average of two numbers. The result is rounded towards\r\n     * zero.\r\n     */\r\n    function average(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        // (a + b) / 2 can overflow, so we distribute\r\n        return (a / 2) + (b / 2) + ((a % 2 + b % 2) / 2);\r\n    }\r\n}\r\n\r\n// Part: OpenZeppelin/openzeppelin-contracts@3.1.0/SafeMath\r\n\r\n/**\r\n * @dev Wrappers over Solidity's arithmetic operations with added overflow\r\n * checks.\r\n *\r\n * Arithmetic operations in Solidity wrap on overflow. This can easily result\r\n * in bugs, because programmers usually assume that an overflow raises an\r\n * error, which is the standard behavior in high level programming languages.\r\n * `SafeMath` restores this intuition by reverting the transaction when an\r\n * operation overflows.\r\n *\r\n * Using this library instead of the unchecked operations eliminates an entire\r\n * class of bugs, so it's recommended to use it always.\r\n */\r\nlibrary SafeMath {\r\n    /**\r\n     * @dev Returns the addition of two unsigned integers, reverting on\r\n     * overflow.\r\n     *\r\n     * Counterpart to Solidity's `+` operator.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - Addition cannot overflow.\r\n     */\r\n    function add(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        uint256 c = a + b;\r\n        require(c >= a, \"SafeMath: addition overflow\");\r\n\r\n        return c;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the subtraction of two unsigned integers, reverting on\r\n     * overflow (when the result is negative).\r\n     *\r\n     * Counterpart to Solidity's `-` operator.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - Subtraction cannot overflow.\r\n     */\r\n    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        return sub(a, b, \"SafeMath: subtraction overflow\");\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the subtraction of two unsigned integers, reverting with custom message on\r\n     * overflow (when the result is negative).\r\n     *\r\n     * Counterpart to Solidity's `-` operator.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - Subtraction cannot overflow.\r\n     */\r\n    function sub(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\r\n        require(b <= a, errorMessage);\r\n        uint256 c = a - b;\r\n\r\n        return c;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the multiplication of two unsigned integers, reverting on\r\n     * overflow.\r\n     *\r\n     * Counterpart to Solidity's `*` operator.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - Multiplication cannot overflow.\r\n     */\r\n    function mul(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        // Gas optimization: this is cheaper than requiring 'a' not being zero, but the\r\n        // benefit is lost if 'b' is also tested.\r\n        // See: https://github.com/OpenZeppelin/openzeppelin-contracts/pull/522\r\n        if (a == 0) {\r\n            return 0;\r\n        }\r\n\r\n        uint256 c = a * b;\r\n        require(c / a == b, \"SafeMath: multiplication overflow\");\r\n\r\n        return c;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the integer division of two unsigned integers. Reverts on\r\n     * division by zero. The result is rounded towards zero.\r\n     *\r\n     * Counterpart to Solidity's `/` operator. Note: this function uses a\r\n     * `revert` opcode (which leaves remaining gas untouched) while Solidity\r\n     * uses an invalid opcode to revert (consuming all remaining gas).\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - The divisor cannot be zero.\r\n     */\r\n    function div(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        return div(a, b, \"SafeMath: division by zero\");\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the integer division of two unsigned integers. Reverts with custom message on\r\n     * division by zero. The result is rounded towards zero.\r\n     *\r\n     * Counterpart to Solidity's `/` operator. Note: this function uses a\r\n     * `revert` opcode (which leaves remaining gas untouched) while Solidity\r\n     * uses an invalid opcode to revert (consuming all remaining gas).\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - The divisor cannot be zero.\r\n     */\r\n    function div(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\r\n        require(b > 0, errorMessage);\r\n        uint256 c = a / b;\r\n        // assert(a == b * c + a % b); // There is no case in which this doesn't hold\r\n\r\n        return c;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\r\n     * Reverts when dividing by zero.\r\n     *\r\n     * Counterpart to Solidity's `%` operator. This function uses a `revert`\r\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\r\n     * invalid opcode to revert (consuming all remaining gas).\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - The divisor cannot be zero.\r\n     */\r\n    function mod(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        return mod(a, b, \"SafeMath: modulo by zero\");\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\r\n     * Reverts with custom message when dividing by zero.\r\n     *\r\n     * Counterpart to Solidity's `%` operator. This function uses a `revert`\r\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\r\n     * invalid opcode to revert (consuming all remaining gas).\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - The divisor cannot be zero.\r\n     */\r\n    function mod(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\r\n        require(b != 0, errorMessage);\r\n        return a % b;\r\n    }\r\n}\r\n\r\n// Part: SafeMathUniswap\r\n\r\nlibrary SafeMathUniswap {\r\n    function add(uint256 x, uint256 y) internal pure returns (uint256 z) {\r\n        require((z = x + y) >= x, \"ds-math-add-overflow\");\r\n    }\r\n\r\n    function sub(uint256 x, uint256 y) internal pure returns (uint256 z) {\r\n        require((z = x - y) <= x, \"ds-math-sub-underflow\");\r\n    }\r\n\r\n    function mul(uint256 x, uint256 y) internal pure returns (uint256 z) {\r\n        require(y == 0 || (z = x * y) / y == x, \"ds-math-mul-overflow\");\r\n    }\r\n}\r\n\r\n// Part: iearn-finance/yearn-vaults@0.4.3/BaseStrategy\r\n\r\n/**\r\n * @title Yearn Base Strategy\r\n * @author yearn.finance\r\n * @notice\r\n *  BaseStrategy implements all of the required functionality to interoperate\r\n *  closely with the Vault contract. This contract should be inherited and the\r\n *  abstract methods implemented to adapt the Strategy to the particular needs\r\n *  it has to create a return.\r\n *\r\n *  Of special interest is the relationship between `harvest()` and\r\n *  `vault.report()'. `harvest()` may be called simply because enough time has\r\n *  elapsed since the last report, and not because any funds need to be moved\r\n *  or positions adjusted. This is critical so that the Vault may maintain an\r\n *  accurate picture of the Strategy's performance. See  `vault.report()`,\r\n *  `harvest()`, and `harvestTrigger()` for further details.\r\n */\r\n\r\nabstract contract BaseStrategy {\r\n    using SafeMath for uint256;\r\n    using SafeERC20 for IERC20;\r\n    string public metadataURI;\r\n\r\n    // health checks\r\n    bool public doHealthCheck;\r\n    address public healthCheck;\r\n\r\n    /**\r\n     * @notice\r\n     *  Used to track which version of `StrategyAPI` this Strategy\r\n     *  implements.\r\n     * @dev The Strategy's version must match the Vault's `API_VERSION`.\r\n     * @return A string which holds the current API version of this contract.\r\n     */\r\n    function apiVersion() public pure returns (string memory) {\r\n        return \"0.4.3\";\r\n    }\r\n\r\n    /**\r\n     * @notice This Strategy's name.\r\n     * @dev\r\n     *  You can use this field to manage the \"version\" of this Strategy, e.g.\r\n     *  `StrategySomethingOrOtherV1`. However, \"API Version\" is managed by\r\n     *  `apiVersion()` function above.\r\n     * @return This Strategy's name.\r\n     */\r\n    function name() external view virtual returns (string memory);\r\n\r\n    /**\r\n     * @notice\r\n     *  The amount (priced in want) of the total assets managed by this strategy should not count\r\n     *  towards Yearn's TVL calculations.\r\n     * @dev\r\n     *  You can override this field to set it to a non-zero value if some of the assets of this\r\n     *  Strategy is somehow delegated inside another part of of Yearn's ecosystem e.g. another Vault.\r\n     *  Note that this value must be strictly less than or equal to the amount provided by\r\n     *  `estimatedTotalAssets()` below, as the TVL calc will be total assets minus delegated assets.\r\n     *  Also note that this value is used to determine the total assets under management by this\r\n     *  strategy, for the purposes of computing the management fee in `Vault`\r\n     * @return\r\n     *  The amount of assets this strategy manages that should not be included in Yearn's Total Value\r\n     *  Locked (TVL) calculation across it's ecosystem.\r\n     */\r\n    function delegatedAssets() external view virtual returns (uint256) {\r\n        return 0;\r\n    }\r\n\r\n    VaultAPI public vault;\r\n    address public strategist;\r\n    address public rewards;\r\n    address public keeper;\r\n\r\n    IERC20 public want;\r\n\r\n    // So indexers can keep track of this\r\n    event Harvested(uint256 profit, uint256 loss, uint256 debtPayment, uint256 debtOutstanding);\r\n\r\n    event UpdatedStrategist(address newStrategist);\r\n\r\n    event UpdatedKeeper(address newKeeper);\r\n\r\n    event UpdatedRewards(address rewards);\r\n\r\n    event UpdatedMinReportDelay(uint256 delay);\r\n\r\n    event UpdatedMaxReportDelay(uint256 delay);\r\n\r\n    event UpdatedProfitFactor(uint256 profitFactor);\r\n\r\n    event UpdatedDebtThreshold(uint256 debtThreshold);\r\n\r\n    event EmergencyExitEnabled();\r\n\r\n    event UpdatedMetadataURI(string metadataURI);\r\n\r\n    // The minimum number of seconds between harvest calls. See\r\n    // `setMinReportDelay()` for more details.\r\n    uint256 public minReportDelay;\r\n\r\n    // The maximum number of seconds between harvest calls. See\r\n    // `setMaxReportDelay()` for more details.\r\n    uint256 public maxReportDelay;\r\n\r\n    // The minimum multiple that `callCost` must be above the credit/profit to\r\n    // be \"justifiable\". See `setProfitFactor()` for more details.\r\n    uint256 public profitFactor;\r\n\r\n    // Use this to adjust the threshold at which running a debt causes a\r\n    // harvest trigger. See `setDebtThreshold()` for more details.\r\n    uint256 public debtThreshold;\r\n\r\n    // See note on `setEmergencyExit()`.\r\n    bool public emergencyExit;\r\n\r\n    // modifiers\r\n    modifier onlyAuthorized() {\r\n        require(msg.sender == strategist || msg.sender == governance(), \"!authorized\");\r\n        _;\r\n    }\r\n\r\n    modifier onlyEmergencyAuthorized() {\r\n        require(\r\n            msg.sender == strategist || msg.sender == governance() || msg.sender == vault.guardian() || msg.sender == vault.management(),\r\n            \"!authorized\"\r\n        );\r\n        _;\r\n    }\r\n\r\n    modifier onlyStrategist() {\r\n        require(msg.sender == strategist, \"!strategist\");\r\n        _;\r\n    }\r\n\r\n    modifier onlyGovernance() {\r\n        require(msg.sender == governance(), \"!authorized\");\r\n        _;\r\n    }\r\n\r\n    modifier onlyKeepers() {\r\n        require(\r\n            msg.sender == keeper ||\r\n                msg.sender == strategist ||\r\n                msg.sender == governance() ||\r\n                msg.sender == vault.guardian() ||\r\n                msg.sender == vault.management(),\r\n            \"!authorized\"\r\n        );\r\n        _;\r\n    }\r\n\r\n    modifier onlyVaultManagers() {\r\n        require(msg.sender == vault.management() || msg.sender == governance(), \"!authorized\");\r\n        _;\r\n    }\r\n\r\n    constructor(address _vault) public {\r\n        _initialize(_vault, msg.sender, msg.sender, msg.sender);\r\n    }\r\n\r\n    /**\r\n     * @notice\r\n     *  Initializes the Strategy, this is called only once, when the\r\n     *  contract is deployed.\r\n     * @dev `_vault` should implement `VaultAPI`.\r\n     * @param _vault The address of the Vault responsible for this Strategy.\r\n     * @param _strategist The address to assign as `strategist`.\r\n     * The strategist is able to change the reward address\r\n     * @param _rewards  The address to use for pulling rewards.\r\n     * @param _keeper The adddress of the _keeper. _keeper\r\n     * can harvest and tend a strategy.\r\n     */\r\n    function _initialize(\r\n        address _vault,\r\n        address _strategist,\r\n        address _rewards,\r\n        address _keeper\r\n    ) internal {\r\n        require(address(want) == address(0), \"Strategy already initialized\");\r\n\r\n        vault = VaultAPI(_vault);\r\n        want = IERC20(vault.token());\r\n        want.safeApprove(_vault, uint256(-1)); // Give Vault unlimited access (might save gas)\r\n        strategist = _strategist;\r\n        rewards = _rewards;\r\n        keeper = _keeper;\r\n\r\n        // initialize variables\r\n        minReportDelay = 0;\r\n        maxReportDelay = 86400;\r\n        profitFactor = 100;\r\n        debtThreshold = 0;\r\n\r\n        vault.approve(rewards, uint256(-1)); // Allow rewards to be pulled\r\n    }\r\n\r\n    function setHealthCheck(address _healthCheck) external onlyVaultManagers {\r\n        healthCheck = _healthCheck;\r\n    }\r\n\r\n    function setDoHealthCheck(bool _doHealthCheck) external onlyVaultManagers {\r\n        doHealthCheck = _doHealthCheck;\r\n    }\r\n\r\n    /**\r\n     * @notice\r\n     *  Used to change `strategist`.\r\n     *\r\n     *  This may only be called by governance or the existing strategist.\r\n     * @param _strategist The new address to assign as `strategist`.\r\n     */\r\n    function setStrategist(address _strategist) external onlyAuthorized {\r\n        require(_strategist != address(0));\r\n        strategist = _strategist;\r\n        emit UpdatedStrategist(_strategist);\r\n    }\r\n\r\n    /**\r\n     * @notice\r\n     *  Used to change `keeper`.\r\n     *\r\n     *  `keeper` is the only address that may call `tend()` or `harvest()`,\r\n     *  other than `governance()` or `strategist`. However, unlike\r\n     *  `governance()` or `strategist`, `keeper` may *only* call `tend()`\r\n     *  and `harvest()`, and no other authorized functions, following the\r\n     *  principle of least privilege.\r\n     *\r\n     *  This may only be called by governance or the strategist.\r\n     * @param _keeper The new address to assign as `keeper`.\r\n     */\r\n    function setKeeper(address _keeper) external onlyAuthorized {\r\n        require(_keeper != address(0));\r\n        keeper = _keeper;\r\n        emit UpdatedKeeper(_keeper);\r\n    }\r\n\r\n    /**\r\n     * @notice\r\n     *  Used to change `rewards`. EOA or smart contract which has the permission\r\n     *  to pull rewards from the vault.\r\n     *\r\n     *  This may only be called by the strategist.\r\n     * @param _rewards The address to use for pulling rewards.\r\n     */\r\n    function setRewards(address _rewards) external onlyStrategist {\r\n        require(_rewards != address(0));\r\n        vault.approve(rewards, 0);\r\n        rewards = _rewards;\r\n        vault.approve(rewards, uint256(-1));\r\n        emit UpdatedRewards(_rewards);\r\n    }\r\n\r\n    /**\r\n     * @notice\r\n     *  Used to change `minReportDelay`. `minReportDelay` is the minimum number\r\n     *  of blocks that should pass for `harvest()` to be called.\r\n     *\r\n     *  For external keepers (such as the Keep3r network), this is the minimum\r\n     *  time between jobs to wait. (see `harvestTrigger()`\r\n     *  for more details.)\r\n     *\r\n     *  This may only be called by governance or the strategist.\r\n     * @param _delay The minimum number of seconds to wait between harvests.\r\n     */\r\n    function setMinReportDelay(uint256 _delay) external onlyAuthorized {\r\n        minReportDelay = _delay;\r\n        emit UpdatedMinReportDelay(_delay);\r\n    }\r\n\r\n    /**\r\n     * @notice\r\n     *  Used to change `maxReportDelay`. `maxReportDelay` is the maximum number\r\n     *  of blocks that should pass for `harvest()` to be called.\r\n     *\r\n     *  For external keepers (such as the Keep3r network), this is the maximum\r\n     *  time between jobs to wait. (see `harvestTrigger()`\r\n     *  for more details.)\r\n     *\r\n     *  This may only be called by governance or the strategist.\r\n     * @param _delay The maximum number of seconds to wait between harvests.\r\n     */\r\n    function setMaxReportDelay(uint256 _delay) external onlyAuthorized {\r\n        maxReportDelay = _delay;\r\n        emit UpdatedMaxReportDelay(_delay);\r\n    }\r\n\r\n    /**\r\n     * @notice\r\n     *  Used to change `profitFactor`. `profitFactor` is used to determine\r\n     *  if it's worthwhile to harvest, given gas costs. (See `harvestTrigger()`\r\n     *  for more details.)\r\n     *\r\n     *  This may only be called by governance or the strategist.\r\n     * @param _profitFactor A ratio to multiply anticipated\r\n     * `harvest()` gas cost against.\r\n     */\r\n    function setProfitFactor(uint256 _profitFactor) external onlyAuthorized {\r\n        profitFactor = _profitFactor;\r\n        emit UpdatedProfitFactor(_profitFactor);\r\n    }\r\n\r\n    /**\r\n     * @notice\r\n     *  Sets how far the Strategy can go into loss without a harvest and report\r\n     *  being required.\r\n     *\r\n     *  By default this is 0, meaning any losses would cause a harvest which\r\n     *  will subsequently report the loss to the Vault for tracking. (See\r\n     *  `harvestTrigger()` for more details.)\r\n     *\r\n     *  This may only be called by governance or the strategist.\r\n     * @param _debtThreshold How big of a loss this Strategy may carry without\r\n     * being required to report to the Vault.\r\n     */\r\n    function setDebtThreshold(uint256 _debtThreshold) external onlyAuthorized {\r\n        debtThreshold = _debtThreshold;\r\n        emit UpdatedDebtThreshold(_debtThreshold);\r\n    }\r\n\r\n    /**\r\n     * @notice\r\n     *  Used to change `metadataURI`. `metadataURI` is used to store the URI\r\n     * of the file describing the strategy.\r\n     *\r\n     *  This may only be called by governance or the strategist.\r\n     * @param _metadataURI The URI that describe the strategy.\r\n     */\r\n    function setMetadataURI(string calldata _metadataURI) external onlyAuthorized {\r\n        metadataURI = _metadataURI;\r\n        emit UpdatedMetadataURI(_metadataURI);\r\n    }\r\n\r\n    /**\r\n     * Resolve governance address from Vault contract, used to make assertions\r\n     * on protected functions in the Strategy.\r\n     */\r\n    function governance() internal view returns (address) {\r\n        return vault.governance();\r\n    }\r\n\r\n    /**\r\n     * @notice\r\n     *  Provide an accurate conversion from `_amtInWei` (denominated in wei)\r\n     *  to `want` (using the native decimal characteristics of `want`).\r\n     * @dev\r\n     *  Care must be taken when working with decimals to assure that the conversion\r\n     *  is compatible. As an example:\r\n     *\r\n     *      given 1e17 wei (0.1 ETH) as input, and want is USDC (6 decimals),\r\n     *      with USDC/ETH = 1800, this should give back 1800000000 (180 USDC)\r\n     *\r\n     * @param _amtInWei The amount (in wei/1e-18 ETH) to convert to `want`\r\n     * @return The amount in `want` of `_amtInEth` converted to `want`\r\n     **/\r\n    function ethToWant(uint256 _amtInWei) public view virtual returns (uint256);\r\n\r\n    /**\r\n     * @notice\r\n     *  Provide an accurate estimate for the total amount of assets\r\n     *  (principle + return) that this Strategy is currently managing,\r\n     *  denominated in terms of `want` tokens.\r\n     *\r\n     *  This total should be \"realizable\" e.g. the total value that could\r\n     *  *actually* be obtained from this Strategy if it were to divest its\r\n     *  entire position based on current on-chain conditions.\r\n     * @dev\r\n     *  Care must be taken in using this function, since it relies on external\r\n     *  systems, which could be manipulated by the attacker to give an inflated\r\n     *  (or reduced) value produced by this function, based on current on-chain\r\n     *  conditions (e.g. this function is possible to influence through\r\n     *  flashloan attacks, oracle manipulations, or other DeFi attack\r\n     *  mechanisms).\r\n     *\r\n     *  It is up to governance to use this function to correctly order this\r\n     *  Strategy relative to its peers in the withdrawal queue to minimize\r\n     *  losses for the Vault based on sudden withdrawals. This value should be\r\n     *  higher than the total debt of the Strategy and higher than its expected\r\n     *  value to be \"safe\".\r\n     * @return The estimated total assets in this Strategy.\r\n     */\r\n    function estimatedTotalAssets() public view virtual returns (uint256);\r\n\r\n    /*\r\n     * @notice\r\n     *  Provide an indication of whether this strategy is currently \"active\"\r\n     *  in that it is managing an active position, or will manage a position in\r\n     *  the future. This should correlate to `harvest()` activity, so that Harvest\r\n     *  events can be tracked externally by indexing agents.\r\n     * @return True if the strategy is actively managing a position.\r\n     */\r\n    function isActive() public view returns (bool) {\r\n        return vault.strategies(address(this)).debtRatio > 0 || estimatedTotalAssets() > 0;\r\n    }\r\n\r\n    /**\r\n     * Perform any Strategy unwinding or other calls necessary to capture the\r\n     * \"free return\" this Strategy has generated since the last time its core\r\n     * position(s) were adjusted. Examples include unwrapping extra rewards.\r\n     * This call is only used during \"normal operation\" of a Strategy, and\r\n     * should be optimized to minimize losses as much as possible.\r\n     *\r\n     * This method returns any realized profits and/or realized losses\r\n     * incurred, and should return the total amounts of profits/losses/debt\r\n     * payments (in `want` tokens) for the Vault's accounting (e.g.\r\n     * `want.balanceOf(this) >= _debtPayment + _profit`).\r\n     *\r\n     * `_debtOutstanding` will be 0 if the Strategy is not past the configured\r\n     * debt limit, otherwise its value will be how far past the debt limit\r\n     * the Strategy is. The Strategy's debt limit is configured in the Vault.\r\n     *\r\n     * NOTE: `_debtPayment` should be less than or equal to `_debtOutstanding`.\r\n     *       It is okay for it to be less than `_debtOutstanding`, as that\r\n     *       should only used as a guide for how much is left to pay back.\r\n     *       Payments should be made to minimize loss from slippage, debt,\r\n     *       withdrawal fees, etc.\r\n     *\r\n     * See `vault.debtOutstanding()`.\r\n     */\r\n    function prepareReturn(uint256 _debtOutstanding)\r\n        internal\r\n        virtual\r\n        returns (\r\n            uint256 _profit,\r\n            uint256 _loss,\r\n            uint256 _debtPayment\r\n        );\r\n\r\n    /**\r\n     * Perform any adjustments to the core position(s) of this Strategy given\r\n     * what change the Vault made in the \"investable capital\" available to the\r\n     * Strategy. Note that all \"free capital\" in the Strategy after the report\r\n     * was made is available for reinvestment. Also note that this number\r\n     * could be 0, and you should handle that scenario accordingly.\r\n     *\r\n     * See comments regarding `_debtOutstanding` on `prepareReturn()`.\r\n     */\r\n    function adjustPosition(uint256 _debtOutstanding) internal virtual;\r\n\r\n    /**\r\n     * Liquidate up to `_amountNeeded` of `want` of this strategy's positions,\r\n     * irregardless of slippage. Any excess will be re-invested with `adjustPosition()`.\r\n     * This function should return the amount of `want` tokens made available by the\r\n     * liquidation. If there is a difference between them, `_loss` indicates whether the\r\n     * difference is due to a realized loss, or if there is some other sitution at play\r\n     * (e.g. locked funds) where the amount made available is less than what is needed.\r\n     *\r\n     * NOTE: The invariant `_liquidatedAmount + _loss <= _amountNeeded` should always be maintained\r\n     */\r\n    function liquidatePosition(uint256 _amountNeeded) internal virtual returns (uint256 _liquidatedAmount, uint256 _loss);\r\n\r\n    /**\r\n     * Liquidate everything and returns the amount that got freed.\r\n     * This function is used during emergency exit instead of `prepareReturn()` to\r\n     * liquidate all of the Strategy's positions back to the Vault.\r\n     */\r\n\r\n    function liquidateAllPositions() internal virtual returns (uint256 _amountFreed);\r\n\r\n    /**\r\n     * @notice\r\n     *  Provide a signal to the keeper that `tend()` should be called. The\r\n     *  keeper will provide the estimated gas cost that they would pay to call\r\n     *  `tend()`, and this function should use that estimate to make a\r\n     *  determination if calling it is \"worth it\" for the keeper. This is not\r\n     *  the only consideration into issuing this trigger, for example if the\r\n     *  position would be negatively affected if `tend()` is not called\r\n     *  shortly, then this can return `true` even if the keeper might be\r\n     *  \"at a loss\" (keepers are always reimbursed by Yearn).\r\n     * @dev\r\n     *  `callCostInWei` must be priced in terms of `wei` (1e-18 ETH).\r\n     *\r\n     *  This call and `harvestTrigger()` should never return `true` at the same\r\n     *  time.\r\n     * @param callCostInWei The keeper's estimated gas cost to call `tend()` (in wei).\r\n     * @return `true` if `tend()` should be called, `false` otherwise.\r\n     */\r\n    function tendTrigger(uint256 callCostInWei) public view virtual returns (bool) {\r\n        // We usually don't need tend, but if there are positions that need\r\n        // active maintainence, overriding this function is how you would\r\n        // signal for that.\r\n        // If your implementation uses the cost of the call in want, you can\r\n        // use uint256 callCost = ethToWant(callCostInWei);\r\n\r\n        return false;\r\n    }\r\n\r\n    /**\r\n     * @notice\r\n     *  Adjust the Strategy's position. The purpose of tending isn't to\r\n     *  realize gains, but to maximize yield by reinvesting any returns.\r\n     *\r\n     *  See comments on `adjustPosition()`.\r\n     *\r\n     *  This may only be called by governance, the strategist, or the keeper.\r\n     */\r\n    function tend() external onlyKeepers {\r\n        // Don't take profits with this call, but adjust for better gains\r\n        adjustPosition(vault.debtOutstanding());\r\n    }\r\n\r\n    /**\r\n     * @notice\r\n     *  Provide a signal to the keeper that `harvest()` should be called. The\r\n     *  keeper will provide the estimated gas cost that they would pay to call\r\n     *  `harvest()`, and this function should use that estimate to make a\r\n     *  determination if calling it is \"worth it\" for the keeper. This is not\r\n     *  the only consideration into issuing this trigger, for example if the\r\n     *  position would be negatively affected if `harvest()` is not called\r\n     *  shortly, then this can return `true` even if the keeper might be \"at a\r\n     *  loss\" (keepers are always reimbursed by Yearn).\r\n     * @dev\r\n     *  `callCostInWei` must be priced in terms of `wei` (1e-18 ETH).\r\n     *\r\n     *  This call and `tendTrigger` should never return `true` at the\r\n     *  same time.\r\n     *\r\n     *  See `min/maxReportDelay`, `profitFactor`, `debtThreshold` to adjust the\r\n     *  strategist-controlled parameters that will influence whether this call\r\n     *  returns `true` or not. These parameters will be used in conjunction\r\n     *  with the parameters reported to the Vault (see `params`) to determine\r\n     *  if calling `harvest()` is merited.\r\n     *\r\n     *  It is expected that an external system will check `harvestTrigger()`.\r\n     *  This could be a script run off a desktop or cloud bot (e.g.\r\n     *  https://github.com/iearn-finance/yearn-vaults/blob/main/scripts/keep.py),\r\n     *  or via an integration with the Keep3r network (e.g.\r\n     *  https://github.com/Macarse/GenericKeep3rV2/blob/master/contracts/keep3r/GenericKeep3rV2.sol).\r\n     * @param callCostInWei The keeper's estimated gas cost to call `harvest()` (in wei).\r\n     * @return `true` if `harvest()` should be called, `false` otherwise.\r\n     */\r\n    function harvestTrigger(uint256 callCostInWei) public view virtual returns (bool) {\r\n        uint256 callCost = ethToWant(callCostInWei);\r\n        StrategyParams memory params = vault.strategies(address(this));\r\n\r\n        // Should not trigger if Strategy is not activated\r\n        if (params.activation == 0) return false;\r\n\r\n        // Should not trigger if we haven't waited long enough since previous harvest\r\n        if (block.timestamp.sub(params.lastReport) < minReportDelay) return false;\r\n\r\n        // Should trigger if hasn't been called in a while\r\n        if (block.timestamp.sub(params.lastReport) >= maxReportDelay) return true;\r\n\r\n        // If some amount is owed, pay it back\r\n        // NOTE: Since debt is based on deposits, it makes sense to guard against large\r\n        //       changes to the value from triggering a harvest directly through user\r\n        //       behavior. This should ensure reasonable resistance to manipulation\r\n        //       from user-initiated withdrawals as the outstanding debt fluctuates.\r\n        uint256 outstanding = vault.debtOutstanding();\r\n        if (outstanding > debtThreshold) return true;\r\n\r\n        // Check for profits and losses\r\n        uint256 total = estimatedTotalAssets();\r\n        // Trigger if we have a loss to report\r\n        if (total.add(debtThreshold) < params.totalDebt) return true;\r\n\r\n        uint256 profit = 0;\r\n        if (total > params.totalDebt) profit = total.sub(params.totalDebt); // We've earned a profit!\r\n\r\n        // Otherwise, only trigger if it \"makes sense\" economically (gas cost\r\n        // is <N% of value moved)\r\n        uint256 credit = vault.creditAvailable();\r\n        return (profitFactor.mul(callCost) < credit.add(profit));\r\n    }\r\n\r\n    /**\r\n     * @notice\r\n     *  Harvests the Strategy, recognizing any profits or losses and adjusting\r\n     *  the Strategy's position.\r\n     *\r\n     *  In the rare case the Strategy is in emergency shutdown, this will exit\r\n     *  the Strategy's position.\r\n     *\r\n     *  This may only be called by governance, the strategist, or the keeper.\r\n     * @dev\r\n     *  When `harvest()` is called, the Strategy reports to the Vault (via\r\n     *  `vault.report()`), so in some cases `harvest()` must be called in order\r\n     *  to take in profits, to borrow newly available funds from the Vault, or\r\n     *  otherwise adjust its position. In other cases `harvest()` must be\r\n     *  called to report to the Vault on the Strategy's position, especially if\r\n     *  any losses have occurred.\r\n     */\r\n    function harvest() external onlyKeepers {\r\n        uint256 profit = 0;\r\n        uint256 loss = 0;\r\n        uint256 debtOutstanding = vault.debtOutstanding();\r\n        uint256 debtPayment = 0;\r\n        if (emergencyExit) {\r\n            // Free up as much capital as possible\r\n            uint256 amountFreed = liquidateAllPositions();\r\n            if (amountFreed < debtOutstanding) {\r\n                loss = debtOutstanding.sub(amountFreed);\r\n            } else if (amountFreed > debtOutstanding) {\r\n                profit = amountFreed.sub(debtOutstanding);\r\n            }\r\n            debtPayment = debtOutstanding.sub(loss);\r\n        } else {\r\n            // Free up returns for Vault to pull\r\n            (profit, loss, debtPayment) = prepareReturn(debtOutstanding);\r\n        }\r\n\r\n        // Allow Vault to take up to the \"harvested\" balance of this contract,\r\n        // which is the amount it has earned since the last time it reported to\r\n        // the Vault.\r\n        uint256 totalDebt = vault.strategies(address(this)).totalDebt;\r\n        debtOutstanding = vault.report(profit, loss, debtPayment);\r\n\r\n        // Check if free returns are left, and re-invest them\r\n        adjustPosition(debtOutstanding);\r\n\r\n        // call healthCheck contract\r\n        if (doHealthCheck && healthCheck != address(0)) {\r\n            require(HealthCheck(healthCheck).check(profit, loss, debtPayment, debtOutstanding, totalDebt), \"!healthcheck\");\r\n        } else {\r\n            doHealthCheck = true;\r\n        }\r\n\r\n        emit Harvested(profit, loss, debtPayment, debtOutstanding);\r\n    }\r\n\r\n    /**\r\n     * @notice\r\n     *  Withdraws `_amountNeeded` to `vault`.\r\n     *\r\n     *  This may only be called by the Vault.\r\n     * @param _amountNeeded How much `want` to withdraw.\r\n     * @return _loss Any realized losses\r\n     */\r\n    function withdraw(uint256 _amountNeeded) external returns (uint256 _loss) {\r\n        require(msg.sender == address(vault), \"!vault\");\r\n        // Liquidate as much as possible to `want`, up to `_amountNeeded`\r\n        uint256 amountFreed;\r\n        (amountFreed, _loss) = liquidatePosition(_amountNeeded);\r\n        // Send it directly back (NOTE: Using `msg.sender` saves some gas here)\r\n        want.safeTransfer(msg.sender, amountFreed);\r\n        // NOTE: Reinvest anything leftover on next `tend`/`harvest`\r\n    }\r\n\r\n    /**\r\n     * Do anything necessary to prepare this Strategy for migration, such as\r\n     * transferring any reserve or LP tokens, CDPs, or other tokens or stores of\r\n     * value.\r\n     */\r\n    function prepareMigration(address _newStrategy) internal virtual;\r\n\r\n    /**\r\n     * @notice\r\n     *  Transfers all `want` from this Strategy to `_newStrategy`.\r\n     *\r\n     *  This may only be called by the Vault.\r\n     * @dev\r\n     * The new Strategy's Vault must be the same as this Strategy's Vault.\r\n     *  The migration process should be carefully performed to make sure all\r\n     * the assets are migrated to the new address, which should have never\r\n     * interacted with the vault before.\r\n     * @param _newStrategy The Strategy to migrate to.\r\n     */\r\n    function migrate(address _newStrategy) external {\r\n        require(msg.sender == address(vault));\r\n        require(BaseStrategy(_newStrategy).vault() == vault);\r\n        prepareMigration(_newStrategy);\r\n        want.safeTransfer(_newStrategy, want.balanceOf(address(this)));\r\n    }\r\n\r\n    /**\r\n     * @notice\r\n     *  Activates emergency exit. Once activated, the Strategy will exit its\r\n     *  position upon the next harvest, depositing all funds into the Vault as\r\n     *  quickly as is reasonable given on-chain conditions.\r\n     *\r\n     *  This may only be called by governance or the strategist.\r\n     * @dev\r\n     *  See `vault.setEmergencyShutdown()` and `harvest()` for further details.\r\n     */\r\n    function setEmergencyExit() external onlyEmergencyAuthorized {\r\n        emergencyExit = true;\r\n        vault.revokeStrategy();\r\n\r\n        emit EmergencyExitEnabled();\r\n    }\r\n\r\n    /**\r\n     * Override this to add all tokens/tokenized positions this contract\r\n     * manages on a *persistent* basis (e.g. not just for swapping back to\r\n     * want ephemerally).\r\n     *\r\n     * NOTE: Do *not* include `want`, already included in `sweep` below.\r\n     *\r\n     * Example:\r\n     * ```\r\n     *    function protectedTokens() internal override view returns (address[] memory) {\r\n     *      address[] memory protected = new address[](3);\r\n     *      protected[0] = tokenA;\r\n     *      protected[1] = tokenB;\r\n     *      protected[2] = tokenC;\r\n     *      return protected;\r\n     *    }\r\n     * ```\r\n     */\r\n    function protectedTokens() internal view virtual returns (address[] memory);\r\n\r\n    /**\r\n     * @notice\r\n     *  Removes tokens from this Strategy that are not the type of tokens\r\n     *  managed by this Strategy. This may be used in case of accidentally\r\n     *  sending the wrong kind of token to this Strategy.\r\n     *\r\n     *  Tokens will be sent to `governance()`.\r\n     *\r\n     *  This will fail if an attempt is made to sweep `want`, or any tokens\r\n     *  that are protected by this Strategy.\r\n     *\r\n     *  This may only be called by governance.\r\n     * @dev\r\n     *  Implement `protectedTokens()` to specify any additional tokens that\r\n     *  should be protected from sweeping in addition to `want`.\r\n     * @param _token The token to transfer out of this vault.\r\n     */\r\n    function sweep(address _token) external onlyGovernance {\r\n        require(_token != address(want), \"!want\");\r\n        require(_token != address(vault), \"!shares\");\r\n\r\n        address[] memory _protectedTokens = protectedTokens();\r\n        for (uint256 i; i < _protectedTokens.length; i++) require(_token != _protectedTokens[i], \"!protected\");\r\n\r\n        IERC20(_token).safeTransfer(governance(), IERC20(_token).balanceOf(address(this)));\r\n    }\r\n}\r\n\r\n// Part: iearn-finance/yearn-vaults@0.4.3/HealthCheck\r\n\r\ninterface HealthCheck {\r\n    function check(\r\n        uint256 profit,\r\n        uint256 loss,\r\n        uint256 debtPayment,\r\n        uint256 debtOutstanding,\r\n        uint256 totalDebt\r\n    ) external view returns (bool);\r\n}\r\n\r\n// Part: IERC20Extended\r\n\r\ninterface IERC20Extended is IERC20 {\r\n    function decimals() external view returns (uint8);\r\n\r\n    function name() external view returns (string memory);\r\n\r\n    function symbol() external view returns (string memory);\r\n}\r\n\r\n// Part: ISushiMasterchef\r\n\r\ninterface ISushiMasterchef is IMasterchef {\r\n    function pendingSushi(uint256 _pid, address _user)\r\n        external\r\n        view\r\n        returns (uint256);\r\n}\r\n\r\n// Part: IUniswapV2Router02\r\n\r\ninterface IUniswapV2Router02 is IUniswapV2Router01 {\r\n    function removeLiquidityETHSupportingFeeOnTransferTokens(\r\n        address token,\r\n        uint256 liquidity,\r\n        uint256 amountTokenMin,\r\n        uint256 amountETHMin,\r\n        address to,\r\n        uint256 deadline\r\n    ) external returns (uint256 amountETH);\r\n\r\n    function removeLiquidityETHWithPermitSupportingFeeOnTransferTokens(\r\n        address token,\r\n        uint256 liquidity,\r\n        uint256 amountTokenMin,\r\n        uint256 amountETHMin,\r\n        address to,\r\n        uint256 deadline,\r\n        bool approveMax,\r\n        uint8 v,\r\n        bytes32 r,\r\n        bytes32 s\r\n    ) external returns (uint256 amountETH);\r\n\r\n    function swapExactTokensForTokensSupportingFeeOnTransferTokens(\r\n        uint256 amountIn,\r\n        uint256 amountOutMin,\r\n        address[] calldata path,\r\n        address to,\r\n        uint256 deadline\r\n    ) external;\r\n\r\n    function swapExactETHForTokensSupportingFeeOnTransferTokens(\r\n        uint256 amountOutMin,\r\n        address[] calldata path,\r\n        address to,\r\n        uint256 deadline\r\n    ) external payable;\r\n\r\n    function swapExactTokensForETHSupportingFeeOnTransferTokens(\r\n        uint256 amountIn,\r\n        uint256 amountOutMin,\r\n        address[] calldata path,\r\n        address to,\r\n        uint256 deadline\r\n    ) external;\r\n}\r\n\r\n// Part: OpenZeppelin/openzeppelin-contracts@3.1.0/IERC721\r\n\r\n/**\r\n * @dev Required interface of an ERC721 compliant contract.\r\n */\r\ninterface IERC721 is IERC165 {\r\n    /**\r\n     * @dev Emitted when `tokenId` token is transfered from `from` to `to`.\r\n     */\r\n    event Transfer(address indexed from, address indexed to, uint256 indexed tokenId);\r\n\r\n    /**\r\n     * @dev Emitted when `owner` enables `approved` to manage the `tokenId` token.\r\n     */\r\n    event Approval(address indexed owner, address indexed approved, uint256 indexed tokenId);\r\n\r\n    /**\r\n     * @dev Emitted when `owner` enables or disables (`approved`) `operator` to manage all of its assets.\r\n     */\r\n    event ApprovalForAll(address indexed owner, address indexed operator, bool approved);\r\n\r\n    /**\r\n     * @dev Returns the number of tokens in ``owner``'s account.\r\n     */\r\n    function balanceOf(address owner) external view returns (uint256 balance);\r\n\r\n    /**\r\n     * @dev Returns the owner of the `tokenId` token.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - `tokenId` must exist.\r\n     */\r\n    function ownerOf(uint256 tokenId) external view returns (address owner);\r\n\r\n    /**\r\n     * @dev Safely transfers `tokenId` token from `from` to `to`, checking first that contract recipients\r\n     * are aware of the ERC721 protocol to prevent tokens from being forever locked.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - `from` cannot be the zero address.\r\n     * - `to` cannot be the zero address.\r\n     * - `tokenId` token must exist and be owned by `from`.\r\n     * - If the caller is not `from`, it must be have been allowed to move this token by either {approve} or {setApprovalForAll}.\r\n     * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer.\r\n     *\r\n     * Emits a {Transfer} event.\r\n     */\r\n    function safeTransferFrom(address from, address to, uint256 tokenId) external;\r\n\r\n    /**\r\n     * @dev Transfers `tokenId` token from `from` to `to`.\r\n     *\r\n     * WARNING: Usage of this method is discouraged, use {safeTransferFrom} whenever possible.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - `from` cannot be the zero address.\r\n     * - `to` cannot be the zero address.\r\n     * - `tokenId` token must be owned by `from`.\r\n     * - If the caller is not `from`, it must be approved to move this token by either {approve} or {setApprovalForAll}.\r\n     *\r\n     * Emits a {Transfer} event.\r\n     */\r\n    function transferFrom(address from, address to, uint256 tokenId) external;\r\n\r\n    /**\r\n     * @dev Gives permission to `to` to transfer `tokenId` token to another account.\r\n     * The approval is cleared when the token is transferred.\r\n     *\r\n     * Only a single account can be approved at a time, so approving the zero address clears previous approvals.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - The caller must own the token or be an approved operator.\r\n     * - `tokenId` must exist.\r\n     *\r\n     * Emits an {Approval} event.\r\n     */\r\n    function approve(address to, uint256 tokenId) external;\r\n\r\n    /**\r\n     * @dev Returns the account approved for `tokenId` token.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - `tokenId` must exist.\r\n     */\r\n    function getApproved(uint256 tokenId) external view returns (address operator);\r\n\r\n    /**\r\n     * @dev Approve or remove `operator` as an operator for the caller.\r\n     * Operators can call {transferFrom} or {safeTransferFrom} for any token owned by the caller.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - The `operator` cannot be the caller.\r\n     *\r\n     * Emits an {ApprovalForAll} event.\r\n     */\r\n    function setApprovalForAll(address operator, bool _approved) external;\r\n\r\n    /**\r\n     * @dev Returns if the `operator` is allowed to manage all of the assets of `owner`.\r\n     *\r\n     * See {setApprovalForAll}\r\n     */\r\n    function isApprovedForAll(address owner, address operator) external view returns (bool);\r\n\r\n    /**\r\n      * @dev Safely transfers `tokenId` token from `from` to `to`.\r\n      *\r\n      * Requirements:\r\n      *\r\n     * - `from` cannot be the zero address.\r\n     * - `to` cannot be the zero address.\r\n      * - `tokenId` token must exist and be owned by `from`.\r\n      * - If the caller is not `from`, it must be approved to move this token by either {approve} or {setApprovalForAll}.\r\n      * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer.\r\n      *\r\n      * Emits a {Transfer} event.\r\n      */\r\n    function safeTransferFrom(address from, address to, uint256 tokenId, bytes calldata data) external;\r\n}\r\n\r\n// Part: OpenZeppelin/openzeppelin-contracts@3.1.0/SafeERC20\r\n\r\n/**\r\n * @title SafeERC20\r\n * @dev Wrappers around ERC20 operations that throw on failure (when the token\r\n * contract returns false). Tokens that return no value (and instead revert or\r\n * throw on failure) are also supported, non-reverting calls are assumed to be\r\n * successful.\r\n * To use this library you can add a `using SafeERC20 for IERC20;` statement to your contract,\r\n * which allows you to call the safe operations as `token.safeTransfer(...)`, etc.\r\n */\r\nlibrary SafeERC20 {\r\n    using SafeMath for uint256;\r\n    using Address for address;\r\n\r\n    function safeTransfer(IERC20 token, address to, uint256 value) internal {\r\n        _callOptionalReturn(token, abi.encodeWithSelector(token.transfer.selector, to, value));\r\n    }\r\n\r\n    function safeTransferFrom(IERC20 token, address from, address to, uint256 value) internal {\r\n        _callOptionalReturn(token, abi.encodeWithSelector(token.transferFrom.selector, from, to, value));\r\n    }\r\n\r\n    /**\r\n     * @dev Deprecated. This function has issues similar to the ones found in\r\n     * {IERC20-approve}, and its usage is discouraged.\r\n     *\r\n     * Whenever possible, use {safeIncreaseAllowance} and\r\n     * {safeDecreaseAllowance} instead.\r\n     */\r\n    function safeApprove(IERC20 token, address spender, uint256 value) internal {\r\n        // safeApprove should only be called when setting an initial allowance,\r\n        // or when resetting it to zero. To increase and decrease it, use\r\n        // 'safeIncreaseAllowance' and 'safeDecreaseAllowance'\r\n        // solhint-disable-next-line max-line-length\r\n        require((value == 0) || (token.allowance(address(this), spender) == 0),\r\n            \"SafeERC20: approve from non-zero to non-zero allowance\"\r\n        );\r\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, value));\r\n    }\r\n\r\n    function safeIncreaseAllowance(IERC20 token, address spender, uint256 value) internal {\r\n        uint256 newAllowance = token.allowance(address(this), spender).add(value);\r\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));\r\n    }\r\n\r\n    function safeDecreaseAllowance(IERC20 token, address spender, uint256 value) internal {\r\n        uint256 newAllowance = token.allowance(address(this), spender).sub(value, \"SafeERC20: decreased allowance below zero\");\r\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));\r\n    }\r\n\r\n    /**\r\n     * @dev Imitates a Solidity high-level call (i.e. a regular function call to a contract), relaxing the requirement\r\n     * on the return value: the return value is optional (but if data is returned, it must not be false).\r\n     * @param token The token targeted by the call.\r\n     * @param data The call data (encoded using abi.encode or one of its variants).\r\n     */\r\n    function _callOptionalReturn(IERC20 token, bytes memory data) private {\r\n        // We need to perform a low level call here, to bypass Solidity's return data size checking mechanism, since\r\n        // we're implementing it ourselves. We use {Address.functionCall} to perform this call, which verifies that\r\n        // the target address contains contract code and also asserts for success in the low-level call.\r\n\r\n        bytes memory returndata = address(token).functionCall(data, \"SafeERC20: low-level call failed\");\r\n        if (returndata.length > 0) { // Return data is optional\r\n            // solhint-disable-next-line max-line-length\r\n            require(abi.decode(returndata, (bool)), \"SafeERC20: ERC20 operation did not succeed\");\r\n        }\r\n    }\r\n}\r\n\r\n// Part: UniswapV2Library\r\n\r\nlibrary UniswapV2Library {\r\n    using SafeMathUniswap for uint256;\r\n\r\n    // returns sorted token addresses, used to handle return values from pairs sorted in this order\r\n    function sortTokens(address tokenA, address tokenB)\r\n        internal\r\n        pure\r\n        returns (address token0, address token1)\r\n    {\r\n        require(tokenA != tokenB, \"UniswapV2Library: IDENTICAL_ADDRESSES\");\r\n        (token0, token1) = tokenA < tokenB\r\n            ? (tokenA, tokenB)\r\n            : (tokenB, tokenA);\r\n        require(token0 != address(0), \"UniswapV2Library: ZERO_ADDRESS\");\r\n    }\r\n\r\n    // calculates the CREATE2 address for a pair without making any external calls\r\n    function pairFor(\r\n        address factory,\r\n        address tokenA,\r\n        address tokenB\r\n    ) internal pure returns (address pair) {\r\n        (address token0, address token1) = sortTokens(tokenA, tokenB);\r\n        pair = address(\r\n            uint256(\r\n                keccak256(\r\n                    abi.encodePacked(\r\n                        hex\"ff\",\r\n                        factory,\r\n                        keccak256(abi.encodePacked(token0, token1)),\r\n                        hex\"e18a34eb0e04b04f7a0ac29a6e80748dca96319b42c54d679cb821dca90c6303\" // init code hash\r\n                    )\r\n                )\r\n            )\r\n        );\r\n    }\r\n\r\n    // fetches and sorts the reserves for a pair\r\n    function getReserves(\r\n        address factory,\r\n        address tokenA,\r\n        address tokenB\r\n    ) internal view returns (uint256 reserveA, uint256 reserveB) {\r\n        (address token0, ) = sortTokens(tokenA, tokenB);\r\n        (uint256 reserve0, uint256 reserve1, ) =\r\n            IUniswapV2Pair(pairFor(factory, tokenA, tokenB)).getReserves();\r\n        (reserveA, reserveB) = tokenA == token0\r\n            ? (reserve0, reserve1)\r\n            : (reserve1, reserve0);\r\n    }\r\n\r\n    // given some amount of an asset and pair reserves, returns an equivalent amount of the other asset\r\n    function quote(\r\n        uint256 amountA,\r\n        uint256 reserveA,\r\n        uint256 reserveB\r\n    ) internal pure returns (uint256 amountB) {\r\n        require(amountA > 0, \"UniswapV2Library: INSUFFICIENT_AMOUNT\");\r\n        require(\r\n            reserveA > 0 && reserveB > 0,\r\n            \"UniswapV2Library: INSUFFICIENT_LIQUIDITY\"\r\n        );\r\n        amountB = amountA.mul(reserveB) / reserveA;\r\n    }\r\n\r\n    // given an input amount of an asset and pair reserves, returns the maximum output amount of the other asset\r\n    function getAmountOut(\r\n        uint256 amountIn,\r\n        uint256 reserveIn,\r\n        uint256 reserveOut\r\n    ) internal pure returns (uint256 amountOut) {\r\n        require(amountIn > 0, \"UniswapV2Library: INSUFFICIENT_INPUT_AMOUNT\");\r\n        require(\r\n            reserveIn > 0 && reserveOut > 0,\r\n            \"UniswapV2Library: INSUFFICIENT_LIQUIDITY\"\r\n        );\r\n        uint256 amountInWithFee = amountIn.mul(997);\r\n        uint256 numerator = amountInWithFee.mul(reserveOut);\r\n        uint256 denominator = reserveIn.mul(1000).add(amountInWithFee);\r\n        amountOut = numerator / denominator;\r\n    }\r\n\r\n    // given an output amount of an asset and pair reserves, returns a required input amount of the other asset\r\n    function getAmountIn(\r\n        uint256 amountOut,\r\n        uint256 reserveIn,\r\n        uint256 reserveOut\r\n    ) internal pure returns (uint256 amountIn) {\r\n        require(amountOut > 0, \"UniswapV2Library: INSUFFICIENT_OUTPUT_AMOUNT\");\r\n        require(\r\n            reserveIn > 0 && reserveOut > 0,\r\n            \"UniswapV2Library: INSUFFICIENT_LIQUIDITY\"\r\n        );\r\n        uint256 numerator = reserveIn.mul(amountOut).mul(1000);\r\n        uint256 denominator = reserveOut.sub(amountOut).mul(997);\r\n        amountIn = (numerator / denominator).add(1);\r\n    }\r\n\r\n    // performs chained getAmountOut calculations on any number of pairs\r\n    function getAmountsOut(\r\n        address factory,\r\n        uint256 amountIn,\r\n        address[] memory path\r\n    ) internal view returns (uint256[] memory amounts) {\r\n        require(path.length >= 2, \"UniswapV2Library: INVALID_PATH\");\r\n        amounts = new uint256[](path.length);\r\n        amounts[0] = amountIn;\r\n        for (uint256 i; i < path.length - 1; i++) {\r\n            (uint256 reserveIn, uint256 reserveOut) =\r\n                getReserves(factory, path[i], path[i + 1]);\r\n            amounts[i + 1] = getAmountOut(amounts[i], reserveIn, reserveOut);\r\n        }\r\n    }\r\n\r\n    // performs chained getAmountIn calculations on any number of pairs\r\n    function getAmountsIn(\r\n        address factory,\r\n        uint256 amountOut,\r\n        address[] memory path\r\n    ) internal view returns (uint256[] memory amounts) {\r\n        require(path.length >= 2, \"UniswapV2Library: INVALID_PATH\");\r\n        amounts = new uint256[](path.length);\r\n        amounts[amounts.length - 1] = amountOut;\r\n        for (uint256 i = path.length - 1; i > 0; i--) {\r\n            (uint256 reserveIn, uint256 reserveOut) =\r\n                getReserves(factory, path[i - 1], path[i]);\r\n            amounts[i - 1] = getAmountIn(amounts[i], reserveIn, reserveOut);\r\n        }\r\n    }\r\n}\r\n\r\n// Part: iearn-finance/yearn-vaults@0.4.3/VaultAPI\r\n\r\ninterface VaultAPI is IERC20 {\r\n    function name() external view returns (string calldata);\r\n\r\n    function symbol() external view returns (string calldata);\r\n\r\n    function decimals() external view returns (uint256);\r\n\r\n    function apiVersion() external pure returns (string memory);\r\n\r\n    function permit(\r\n        address owner,\r\n        address spender,\r\n        uint256 amount,\r\n        uint256 expiry,\r\n        bytes calldata signature\r\n    ) external returns (bool);\r\n\r\n    // NOTE: Vyper produces multiple signatures for a given function with \"default\" args\r\n    function deposit() external returns (uint256);\r\n\r\n    function deposit(uint256 amount) external returns (uint256);\r\n\r\n    function deposit(uint256 amount, address recipient) external returns (uint256);\r\n\r\n    // NOTE: Vyper produces multiple signatures for a given function with \"default\" args\r\n    function withdraw() external returns (uint256);\r\n\r\n    function withdraw(uint256 maxShares) external returns (uint256);\r\n\r\n    function withdraw(uint256 maxShares, address recipient) external returns (uint256);\r\n\r\n    function token() external view returns (address);\r\n\r\n    function strategies(address _strategy) external view returns (StrategyParams memory);\r\n\r\n    function pricePerShare() external view returns (uint256);\r\n\r\n    function totalAssets() external view returns (uint256);\r\n\r\n    function depositLimit() external view returns (uint256);\r\n\r\n    function maxAvailableShares() external view returns (uint256);\r\n\r\n    /**\r\n     * View how much the Vault would increase this Strategy's borrow limit,\r\n     * based on its present performance (since its last report). Can be used to\r\n     * determine expectedReturn in your Strategy.\r\n     */\r\n    function creditAvailable() external view returns (uint256);\r\n\r\n    /**\r\n     * View how much the Vault would like to pull back from the Strategy,\r\n     * based on its present performance (since its last report). Can be used to\r\n     * determine expectedReturn in your Strategy.\r\n     */\r\n    function debtOutstanding() external view returns (uint256);\r\n\r\n    /**\r\n     * View how much the Vault expect this Strategy to return at the current\r\n     * block, based on its present performance (since its last report). Can be\r\n     * used to determine expectedReturn in your Strategy.\r\n     */\r\n    function expectedReturn() external view returns (uint256);\r\n\r\n    /**\r\n     * This is the main contact point where the Strategy interacts with the\r\n     * Vault. It is critical that this call is handled as intended by the\r\n     * Strategy. Therefore, this function will be called by BaseStrategy to\r\n     * make sure the integration is correct.\r\n     */\r\n    function report(\r\n        uint256 _gain,\r\n        uint256 _loss,\r\n        uint256 _debtPayment\r\n    ) external returns (uint256);\r\n\r\n    /**\r\n     * This function should only be used in the scenario where the Strategy is\r\n     * being retired but no migration of the positions are possible, or in the\r\n     * extreme scenario that the Strategy needs to be put into \"Emergency Exit\"\r\n     * mode in order for it to exit as quickly as possible. The latter scenario\r\n     * could be for any reason that is considered \"critical\" that the Strategy\r\n     * exits its position as fast as possible, such as a sudden change in\r\n     * market conditions leading to losses, or an imminent failure in an\r\n     * external dependency.\r\n     */\r\n    function revokeStrategy() external;\r\n\r\n    /**\r\n     * View the governance address of the Vault to assert privileged functions\r\n     * can only be called by governance. The Strategy serves the Vault, so it\r\n     * is subject to governance defined by the Vault.\r\n     */\r\n    function governance() external view returns (address);\r\n\r\n    /**\r\n     * View the management address of the Vault to assert privileged functions\r\n     * can only be called by management. The Strategy serves the Vault, so it\r\n     * is subject to management defined by the Vault.\r\n     */\r\n    function management() external view returns (address);\r\n\r\n    /**\r\n     * View the guardian address of the Vault to assert privileged functions\r\n     * can only be called by guardian. The Strategy serves the Vault, so it\r\n     * is subject to guardian defined by the Vault.\r\n     */\r\n    function guardian() external view returns (address);\r\n}\r\n\r\n// Part: IHegicPool\r\n\r\n/**\r\n * @notice The interface for the contract that manages pools and the options parameters,\r\n *   accumulates the funds from the liquidity providers and makes the withdrawals for them,\r\n *   sells the options contracts to the options buyers and collateralizes them,\r\n *   exercises the ITM (in-the-money) options with the unrealized P&L and settles them,\r\n *   unlocks the expired options and distributes the premiums among the liquidity providers.\r\n **/\r\ninterface IHegicPool is IERC721, IPriceCalculator {\r\n    enum OptionState {Invalid, Active, Exercised, Expired}\r\n    enum TrancheState {Invalid, Open, Closed}\r\n\r\n    /**\r\n     * @param state The state of the option: Invalid, Active, Exercised, Expired\r\n     * @param strike The option strike\r\n     * @param amount The option size\r\n     * @param lockedAmount The option collateral size locked\r\n     * @param expired The option expiration timestamp\r\n     * @param hedgePremium The share of the premium paid for hedging from the losses\r\n     * @param unhedgePremium The share of the premium paid to the hedged liquidity provider\r\n     **/\r\n    struct Option {\r\n        OptionState state;\r\n        uint256 strike;\r\n        uint256 amount;\r\n        uint256 lockedAmount;\r\n        uint256 expired;\r\n        uint256 hedgePremium;\r\n        uint256 unhedgePremium;\r\n    }\r\n\r\n    /**\r\n     * @param state The state of the liquidity tranche: Invalid, Open, Closed\r\n     * @param share The liquidity provider's share in the pool\r\n     * @param amount The size of liquidity provided\r\n     * @param creationTimestamp The liquidity deposit timestamp\r\n     * @param hedged The liquidity tranche type: hedged or unhedged (classic)\r\n     **/\r\n    struct Tranche {\r\n        TrancheState state;\r\n        uint256 share;\r\n        uint256 amount;\r\n        uint256 creationTimestamp;\r\n        bool hedged;\r\n    }\r\n\r\n    /**\r\n     * @param id The ERC721 token ID linked to the option\r\n     * @param settlementFee The part of the premium that\r\n     *   is distributed among the HEGIC staking participants\r\n     * @param premium The part of the premium that\r\n     *   is distributed among the liquidity providers\r\n     **/\r\n    event Acquired(uint256 indexed id, uint256 settlementFee, uint256 premium);\r\n\r\n    /**\r\n     * @param id The ERC721 token ID linked to the option\r\n     * @param profit The profits of the option if exercised\r\n     **/\r\n    event Exercised(uint256 indexed id, uint256 profit);\r\n\r\n    /**\r\n     * @param id The ERC721 token ID linked to the option\r\n     **/\r\n    event Expired(uint256 indexed id);\r\n\r\n    /**\r\n     * @param account The liquidity provider's address\r\n     * @param trancheID The liquidity tranche ID\r\n     **/\r\n    event Withdrawn(\r\n        address indexed account,\r\n        uint256 indexed trancheID,\r\n        uint256 amount\r\n    );\r\n\r\n    /**\r\n     * @param id The ERC721 token ID linked to the option\r\n     **/\r\n    function unlock(uint256 id) external;\r\n\r\n    /**\r\n     * @param id The ERC721 token ID linked to the option\r\n     **/\r\n    function exercise(uint256 id) external;\r\n\r\n    function setLockupPeriod(uint256, uint256) external;\r\n\r\n    /**\r\n     * @param value The hedging pool address\r\n     **/\r\n    function setHedgePool(address value) external;\r\n\r\n    /**\r\n     * @param trancheID The liquidity tranche ID\r\n     * @return amount The liquidity to be received with\r\n     *   the positive or negative P&L earned or lost during\r\n     *   the period of holding the liquidity tranche considered\r\n     **/\r\n    function withdraw(uint256 trancheID) external returns (uint256 amount);\r\n\r\n    function pricer() external view returns (IPriceCalculator);\r\n\r\n    /**\r\n     * @return amount The unhedged liquidity size\r\n     *   (unprotected from the losses on selling the options)\r\n     **/\r\n    function unhedgedBalance() external view returns (uint256 amount);\r\n\r\n    /**\r\n     * @return amount The hedged liquidity size\r\n     * (protected from the losses on selling the options)\r\n     **/\r\n    function hedgedBalance() external view returns (uint256 amount);\r\n\r\n    /**\r\n     * @param account The liquidity provider's address\r\n     * @param amount The size of the liquidity tranche\r\n     * @param hedged The type of the liquidity tranche\r\n     * @param minShare The minimum share in the pool of the user\r\n     **/\r\n    function provideFrom(\r\n        address account,\r\n        uint256 amount,\r\n        bool hedged,\r\n        uint256 minShare\r\n    ) external returns (uint256 share);\r\n\r\n    /**\r\n     * @param holder The option buyer address\r\n     * @param period The option period\r\n     * @param amount The option size\r\n     * @param strike The option strike\r\n     **/\r\n    function sellOption(\r\n        address holder,\r\n        uint256 period,\r\n        uint256 amount,\r\n        uint256 strike\r\n    ) external returns (uint256 id);\r\n\r\n    /**\r\n     * @param trancheID The liquidity tranche ID\r\n     * @return amount The amount to be received after the withdrawal\r\n     **/\r\n    function withdrawWithoutHedge(uint256 trancheID)\r\n        external\r\n        returns (uint256 amount);\r\n\r\n    /**\r\n     * @return amount The total liquidity provided into the pool\r\n     **/\r\n    function totalBalance() external view returns (uint256 amount);\r\n\r\n    /**\r\n     * @return amount The total liquidity locked in the pool\r\n     **/\r\n    function lockedAmount() external view returns (uint256 amount);\r\n\r\n    function token() external view returns (IERC20);\r\n\r\n    /**\r\n     * @return state The state of the option: Invalid, Active, Exercised, Expired\r\n     * @return strike The option strike\r\n     * @return amount The option size\r\n     * @return lockedAmount The option collateral size locked\r\n     * @return expired The option expiration timestamp\r\n     * @return hedgePremium The share of the premium paid for hedging from the losses\r\n     * @return unhedgePremium The share of the premium paid to the hedged liquidity provider\r\n     **/\r\n    function options(uint256 id)\r\n        external\r\n        view\r\n        returns (\r\n            OptionState state,\r\n            uint256 strike,\r\n            uint256 amount,\r\n            uint256 lockedAmount,\r\n            uint256 expired,\r\n            uint256 hedgePremium,\r\n            uint256 unhedgePremium\r\n        );\r\n\r\n    /**\r\n     * @return state The state of the liquidity tranche: Invalid, Open, Closed\r\n     * @return share The liquidity provider's share in the pool\r\n     * @return amount The size of liquidity provided\r\n     * @return creationTimestamp The liquidity deposit timestamp\r\n     * @return hedged The liquidity tranche type: hedged or unhedged (classic)\r\n     **/\r\n    function tranches(uint256 id)\r\n        external\r\n        view\r\n        returns (\r\n            TrancheState state,\r\n            uint256 share,\r\n            uint256 amount,\r\n            uint256 creationTimestamp,\r\n            bool hedged\r\n        );\r\n\r\n    function profitOf(uint256 id) external view returns (uint256);\r\n}\r\n\r\n// Part: ProviderStrategy\r\n\r\ncontract ProviderStrategy is BaseStrategy {\r\n    using SafeERC20 for IERC20;\r\n    using Address for address;\r\n    using SafeMath for uint256;\r\n\r\n    address public joint;\r\n    bool public takeProfit;\r\n    bool public investWant;\r\n\r\n    constructor(address _vault) public BaseStrategy(_vault) {\r\n        _initializeStrat();\r\n    }\r\n\r\n    function initialize(\r\n        address _vault,\r\n        address _strategist,\r\n        address _rewards,\r\n        address _keeper\r\n    ) external {\r\n        _initialize(_vault, _strategist, _rewards, _keeper);\r\n        _initializeStrat();\r\n    }\r\n\r\n    function _initializeStrat() internal {\r\n        investWant = true;\r\n        takeProfit = false;\r\n    }\r\n\r\n    event Cloned(address indexed clone);\r\n\r\n    function cloneProviderStrategy(\r\n        address _vault,\r\n        address _strategist,\r\n        address _rewards,\r\n        address _keeper\r\n    ) external returns (address newStrategy) {\r\n        bytes20 addressBytes = bytes20(address(this));\r\n\r\n        assembly {\r\n            // EIP-1167 bytecode\r\n            let clone_code := mload(0x40)\r\n            mstore(\r\n                clone_code,\r\n                0x3d602d80600a3d3981f3363d3d373d3d3d363d73000000000000000000000000\r\n            )\r\n            mstore(add(clone_code, 0x14), addressBytes)\r\n            mstore(\r\n                add(clone_code, 0x28),\r\n                0x5af43d82803e903d91602b57fd5bf30000000000000000000000000000000000\r\n            )\r\n            newStrategy := create(0, clone_code, 0x37)\r\n        }\r\n\r\n        ProviderStrategy(newStrategy).initialize(\r\n            _vault,\r\n            _strategist,\r\n            _rewards,\r\n            _keeper\r\n        );\r\n\r\n        emit Cloned(newStrategy);\r\n    }\r\n\r\n    function name() external view override returns (string memory) {\r\n        return\r\n            string(\r\n                abi.encodePacked(\r\n                    \"ProviderOf\",\r\n                    IERC20Extended(address(want)).symbol(),\r\n                    \"To\",\r\n                    IERC20Extended(address(joint)).name()\r\n                )\r\n            );\r\n    }\r\n\r\n    function estimatedTotalAssets() public view override returns (uint256) {\r\n        return\r\n            want.balanceOf(address(this)).add(\r\n                JointAPI(joint).estimatedTotalAssetsInToken(address(want))\r\n            );\r\n    }\r\n\r\n    function prepareReturn(uint256 _debtOutstanding)\r\n        internal\r\n        override\r\n        returns (\r\n            uint256 _profit,\r\n            uint256 _loss,\r\n            uint256 _debtPayment\r\n        )\r\n    {\r\n        JointAPI(joint).prepareReturn(!investWant || takeProfit);\r\n\r\n        // if we are not taking profit, there is nothing to do\r\n        if (!takeProfit) {\r\n            return (0, 0, 0);\r\n        }\r\n\r\n        // If we reach this point, it means that we are winding down\r\n        // and we will take profit / losses or pay back debt\r\n        uint256 debt = vault.strategies(address(this)).totalDebt;\r\n        uint256 wantBalance = balanceOfWant();\r\n\r\n        // Set profit or loss based on the initial debt\r\n        if (debt <= wantBalance) {\r\n            _profit = wantBalance - debt;\r\n        } else {\r\n            _loss = debt - wantBalance;\r\n        }\r\n\r\n        // Repay debt. Amount will depend if we had profit or loss\r\n        if (_debtOutstanding > 0) {\r\n            if (_profit >= 0) {\r\n                _debtPayment = Math.min(\r\n                    _debtOutstanding,\r\n                    wantBalance.sub(_profit)\r\n                );\r\n            } else {\r\n                _debtPayment = Math.min(\r\n                    _debtOutstanding,\r\n                    wantBalance.sub(_loss)\r\n                );\r\n            }\r\n        }\r\n    }\r\n\r\n    function adjustPosition(uint256 _debtOutstanding) internal override {\r\n        if (emergencyExit) {\r\n            return;\r\n        }\r\n\r\n        // If we shouldn't invest, don't do it :D\r\n        if (!investWant) {\r\n            return;\r\n        }\r\n\r\n        uint256 wantBalance = balanceOfWant();\r\n        if (wantBalance > 0) {\r\n            want.transfer(joint, wantBalance);\r\n        }\r\n        JointAPI(joint).adjustPosition();\r\n    }\r\n\r\n    function liquidatePosition(uint256 _amountNeeded)\r\n        internal\r\n        override\r\n        returns (uint256 _liquidatedAmount, uint256 _loss)\r\n    {\r\n        uint256 totalAssets = want.balanceOf(address(this));\r\n        if (_amountNeeded > totalAssets) {\r\n            _liquidatedAmount = totalAssets;\r\n            _loss = _amountNeeded.sub(totalAssets);\r\n        } else {\r\n            _liquidatedAmount = _amountNeeded;\r\n        }\r\n    }\r\n\r\n    function prepareMigration(address _newStrategy) internal override {\r\n        // Want is sent to the new strategy in the base class\r\n        // nothing to do here\r\n    }\r\n\r\n    function protectedTokens()\r\n        internal\r\n        view\r\n        override\r\n        returns (address[] memory)\r\n    {}\r\n\r\n    function balanceOfWant() public view returns (uint256) {\r\n        return IERC20(want).balanceOf(address(this));\r\n    }\r\n\r\n    function setJoint(address _joint) external onlyGovernance {\r\n        require(\r\n            JointAPI(_joint).providerA() == address(this) ||\r\n                JointAPI(_joint).providerB() == address(this)\r\n        );\r\n        joint = _joint;\r\n    }\r\n\r\n    function setTakeProfit(bool _takeProfit) external onlyAuthorized {\r\n        takeProfit = _takeProfit;\r\n    }\r\n\r\n    function setInvestWant(bool _investWant) external onlyAuthorized {\r\n        investWant = _investWant;\r\n    }\r\n\r\n    function liquidateAllPositions()\r\n        internal\r\n        virtual\r\n        override\r\n        returns (uint256 _amountFreed)\r\n    {\r\n        JointAPI(joint).prepareReturn(true);\r\n        _amountFreed = balanceOfWant();\r\n    }\r\n\r\n    function ethToWant(uint256 _amtInWei)\r\n        public\r\n        view\r\n        virtual\r\n        override\r\n        returns (uint256)\r\n    {\r\n        // TODO create an accurate price oracle\r\n        return _amtInWei;\r\n    }\r\n}\r\n\r\n// Part: LPHedgingLib\r\n\r\nlibrary LPHedgingLib {\r\n    using SafeMath for uint256;\r\n    using SafeERC20 for IERC20;\r\n    using Address for address;\r\n\r\n    IHegicPool public constant hegicCallOptionsPool =\r\n        IHegicPool(0xb9ed94c6d594b2517c4296e24A8c517FF133fb6d);\r\n    IHegicPool public constant hegicPutOptionsPool =\r\n        IHegicPool(0x790e96E7452c3c2200bbCAA58a468256d482DD8b);\r\n    address public constant hegicOptionsManager =\r\n        0x1BA4b447d0dF64DA64024e5Ec47dA94458C1e97f;\r\n\r\n    address public constant asset1 = 0xC02aaA39b223FE8D0A0e5C4F27eAD9083C756Cc2;\r\n\r\n    uint256 private constant MAX_BPS = 10_000;\r\n\r\n    function _checkAllowance() internal {\r\n        // TODO: add correct check (currently checking uint256 max)\r\n        IERC20 _token;\r\n\r\n        _token = hegicCallOptionsPool.token();\r\n        if (\r\n            _token.allowance(address(hegicCallOptionsPool), address(this)) <\r\n            type(uint256).max\r\n        ) {\r\n            _token.approve(address(hegicCallOptionsPool), type(uint256).max);\r\n        }\r\n\r\n        _token = hegicPutOptionsPool.token();\r\n        if (\r\n            _token.allowance(address(hegicPutOptionsPool), address(this)) <\r\n            type(uint256).max\r\n        ) {\r\n            _token.approve(address(hegicPutOptionsPool), type(uint256).max);\r\n        }\r\n    }\r\n\r\n    function hedgeLPToken(\r\n        address lpToken,\r\n        uint256 h,\r\n        uint256 period\r\n    ) external returns (uint256 callID, uint256 putID) {\r\n        // TODO: check if this require makes sense\r\n        (\r\n            ,\r\n            address token0,\r\n            address token1,\r\n            uint256 token0Amount,\r\n            uint256 token1Amount\r\n        ) = getLPInfo(lpToken);\r\n        if (h == 0 || period == 0 || token0Amount == 0 || token1Amount == 0) {\r\n            return (0, 0);\r\n        }\r\n\r\n        uint256 q;\r\n        if (asset1 == token0) {\r\n            q = token0Amount;\r\n        } else if (asset1 == token1) {\r\n            q = token1Amount;\r\n        } else {\r\n            revert(\"LPtoken not supported\");\r\n        }\r\n\r\n        (uint256 putAmount, uint256 callAmount) = getOptionsAmount(q, h);\r\n\r\n        // TODO: check enough liquidity available in options provider\r\n        // TODO: check enough balance to pay for this\r\n        _checkAllowance();\r\n        callID = buyOptionFrom(hegicCallOptionsPool, callAmount, period);\r\n        putID = buyOptionFrom(hegicPutOptionsPool, putAmount, period);\r\n    }\r\n\r\n    function getOptionsProfit(uint256 callID, uint256 putID)\r\n        external\r\n        view\r\n        returns (uint256, uint256)\r\n    {\r\n        return (getCallProfit(callID), getPutProfit(putID));\r\n    }\r\n\r\n    function getCallProfit(uint256 id) internal view returns (uint256) {\r\n        if (id == 0) {\r\n            return 0;\r\n        }\r\n        return hegicCallOptionsPool.profitOf(id);\r\n    }\r\n\r\n    function getPutProfit(uint256 id) internal view returns (uint256) {\r\n        if (id == 0) {\r\n            return 0;\r\n        }\r\n        return hegicPutOptionsPool.profitOf(id);\r\n    }\r\n\r\n    function closeHedge(uint256 callID, uint256 putID)\r\n        external\r\n        returns (uint256 payoutToken0, uint256 payoutToken1)\r\n    {\r\n        uint256 callProfit = hegicCallOptionsPool.profitOf(callID);\r\n        uint256 putProfit = hegicPutOptionsPool.profitOf(putID);\r\n\r\n        if (callProfit > 0) {\r\n            // call option is ITM\r\n            hegicCallOptionsPool.exercise(callID);\r\n            // TODO: sell in secondary market\r\n        } else {\r\n            // TODO: sell in secondary market\r\n        }\r\n\r\n        if (putProfit > 0) {\r\n            // put option is ITM\r\n            hegicPutOptionsPool.exercise(putID);\r\n            // TODO: sell in secondary market\r\n        } else {\r\n            // TODO: sell in secondary market\r\n        }\r\n        // TODO: return payout per token from exercise\r\n    }\r\n\r\n    function getOptionsAmount(uint256 q, uint256 h)\r\n        public\r\n        view\r\n        returns (uint256 putAmount, uint256 callAmount)\r\n    {\r\n        callAmount = getCallAmount(q, h);\r\n        putAmount = getPutAmount(q, h);\r\n    }\r\n\r\n    function getCallAmount(uint256 q, uint256 h) public view returns (uint256) {\r\n        uint256 one = MAX_BPS;\r\n        return\r\n            one\r\n                .sub(uint256(2).mul(one).mul(sqrt(one.add(h)).sub(one)).div(h))\r\n                .mul(q)\r\n                .div(MAX_BPS); // 1 + 2 / h * (1 - sqrt(1 + h))\r\n    }\r\n\r\n    function getPutAmount(uint256 q, uint256 h) public view returns (uint256) {\r\n        uint256 one = MAX_BPS;\r\n        return\r\n            uint256(2)\r\n                .mul(one)\r\n                .mul(one.sub(sqrt(one.sub(h))))\r\n                .div(h)\r\n                .sub(one)\r\n                .mul(q)\r\n                .div(MAX_BPS); // 1 - 2 / h * (1 - sqrt(1 - h))\r\n    }\r\n\r\n    function buyOptionFrom(\r\n        IHegicPool pool,\r\n        uint256 amount,\r\n        uint256 period\r\n    ) internal returns (uint256) {\r\n        return pool.sellOption(address(this), period, amount, 0); // strike = 0 is ATM\r\n    }\r\n\r\n    function getLPInfo(address lpToken)\r\n        public\r\n        view\r\n        returns (\r\n            uint256 amount,\r\n            address token0,\r\n            address token1,\r\n            uint256 token0Amount,\r\n            uint256 token1Amount\r\n        )\r\n    {\r\n        amount = IUniswapV2Pair(lpToken).balanceOf(address(this));\r\n\r\n        token0 = IUniswapV2Pair(lpToken).token0();\r\n        token1 = IUniswapV2Pair(lpToken).token1();\r\n\r\n        uint256 balance0 = IERC20(token0).balanceOf(address(lpToken));\r\n        uint256 balance1 = IERC20(token1).balanceOf(address(lpToken));\r\n        uint256 totalSupply = IUniswapV2Pair(lpToken).totalSupply();\r\n\r\n        token0Amount = amount.mul(balance0) / totalSupply;\r\n        token1Amount = amount.mul(balance1) / totalSupply;\r\n    }\r\n\r\n    function sqrt(uint256 x) public pure returns (uint256 result) {\r\n        x = x.mul(MAX_BPS);\r\n        result = x;\r\n        uint256 k = (x >> 1) + 1;\r\n        while (k < result) (result, k) = (k, (x / k + k) >> 1);\r\n    }\r\n}\r\n\r\n// Part: Joint\r\n\r\nabstract contract Joint {\r\n    using SafeERC20 for IERC20;\r\n    using Address for address;\r\n    using SafeMath for uint256;\r\n\r\n    uint256 private constant RATIO_PRECISION = 1e4;\r\n\r\n    ProviderStrategy public providerA;\r\n    ProviderStrategy public providerB;\r\n\r\n    address public tokenA;\r\n    address public tokenB;\r\n\r\n    address public WETH;\r\n    address public reward;\r\n    address public router;\r\n\r\n    uint256 public pid;\r\n\r\n    IMasterchef public masterchef;\r\n\r\n    IUniswapV2Pair public pair;\r\n\r\n    uint256 private investedA;\r\n    uint256 private investedB;\r\n\r\n    // HEDGING\r\n    uint256 public activeCallID;\r\n    uint256 public activePutID;\r\n\r\n    uint256 public hedgeBudget = 50; // 0.5% per hedging period\r\n    uint256 private h = 1500; // 15%\r\n    uint256 private period = 7 days;\r\n\r\n    modifier onlyGovernance {\r\n        require(\r\n            msg.sender == providerA.vault().governance() ||\r\n                msg.sender == providerB.vault().governance()\r\n        );\r\n        _;\r\n    }\r\n\r\n    modifier onlyAuthorized {\r\n        require(\r\n            msg.sender == providerA.vault().governance() ||\r\n                msg.sender == providerB.vault().governance() ||\r\n                msg.sender == providerA.strategist() ||\r\n                msg.sender == providerB.strategist()\r\n        );\r\n        _;\r\n    }\r\n\r\n    modifier onlyProviders {\r\n        require(\r\n            msg.sender == address(providerA) || msg.sender == address(providerB)\r\n        );\r\n        _;\r\n    }\r\n\r\n    constructor(\r\n        address _providerA,\r\n        address _providerB,\r\n        address _router,\r\n        address _weth,\r\n        address _masterchef,\r\n        address _reward,\r\n        uint256 _pid\r\n    ) public {\r\n        _initialize(\r\n            _providerA,\r\n            _providerB,\r\n            _router,\r\n            _weth,\r\n            _masterchef,\r\n            _reward,\r\n            _pid\r\n        );\r\n    }\r\n\r\n    function initialize(\r\n        address _providerA,\r\n        address _providerB,\r\n        address _router,\r\n        address _weth,\r\n        address _masterchef,\r\n        address _reward,\r\n        uint256 _pid\r\n    ) external {\r\n        _initialize(\r\n            _providerA,\r\n            _providerB,\r\n            _router,\r\n            _weth,\r\n            _masterchef,\r\n            _reward,\r\n            _pid\r\n        );\r\n    }\r\n\r\n    function _initialize(\r\n        address _providerA,\r\n        address _providerB,\r\n        address _router,\r\n        address _weth,\r\n        address _masterchef,\r\n        address _reward,\r\n        uint256 _pid\r\n    ) internal {\r\n        require(address(providerA) == address(0), \"Joint already initialized\");\r\n        providerA = ProviderStrategy(_providerA);\r\n        providerB = ProviderStrategy(_providerB);\r\n        router = _router;\r\n        WETH = _weth;\r\n        masterchef = IMasterchef(_masterchef);\r\n        reward = _reward;\r\n        pid = _pid;\r\n\r\n        tokenA = address(providerA.want());\r\n        tokenB = address(providerB.want());\r\n\r\n        pair = IUniswapV2Pair(getPair());\r\n\r\n        IERC20(address(pair)).approve(address(masterchef), type(uint256).max);\r\n        IERC20(tokenA).approve(address(router), type(uint256).max);\r\n        IERC20(tokenB).approve(address(router), type(uint256).max);\r\n        IERC20(reward).approve(address(router), type(uint256).max);\r\n        IERC20(address(pair)).approve(address(router), type(uint256).max);\r\n    }\r\n\r\n    event Cloned(address indexed clone);\r\n\r\n    function cloneJoint(\r\n        address _providerA,\r\n        address _providerB,\r\n        address _router,\r\n        address _weth,\r\n        address _masterchef,\r\n        address _reward,\r\n        uint256 _pid\r\n    ) external returns (address newJoint) {\r\n        bytes20 addressBytes = bytes20(address(this));\r\n\r\n        assembly {\r\n            // EIP-1167 bytecode\r\n            let clone_code := mload(0x40)\r\n            mstore(\r\n                clone_code,\r\n                0x3d602d80600a3d3981f3363d3d373d3d3d363d73000000000000000000000000\r\n            )\r\n            mstore(add(clone_code, 0x14), addressBytes)\r\n            mstore(\r\n                add(clone_code, 0x28),\r\n                0x5af43d82803e903d91602b57fd5bf30000000000000000000000000000000000\r\n            )\r\n            newJoint := create(0, clone_code, 0x37)\r\n        }\r\n\r\n        Joint(newJoint).initialize(\r\n            _providerA,\r\n            _providerB,\r\n            _router,\r\n            _weth,\r\n            _masterchef,\r\n            _reward,\r\n            _pid\r\n        );\r\n\r\n        emit Cloned(newJoint);\r\n    }\r\n\r\n    function name() external view virtual returns (string memory) {}\r\n\r\n    function prepareReturn(bool returnFunds) external onlyProviders {\r\n        // If we have previously invested funds, let's distribute PnL equally in\r\n        // each token's own terms\r\n        if (investedA != 0 && investedB != 0) {\r\n            // Liquidate will also claim rewards & close hedge\r\n            (uint256 currentA, uint256 currentB) = _liquidatePosition();\r\n\r\n            if (tokenA != reward && tokenB != reward) {\r\n                (address rewardSwappedTo, uint256 rewardSwapOutAmount) =\r\n                    swapReward(balanceOfReward());\r\n                if (rewardSwappedTo == tokenA) {\r\n                    currentA = currentA.add(rewardSwapOutAmount);\r\n                } else if (rewardSwappedTo == tokenB) {\r\n                    currentB = currentB.add(rewardSwapOutAmount);\r\n                }\r\n            }\r\n\r\n            (uint256 ratioA, uint256 ratioB) =\r\n                getRatios(currentA, currentB, investedA, investedB);\r\n\r\n            (address sellToken, uint256 sellAmount) =\r\n                calculateSellToBalance(\r\n                    currentA,\r\n                    currentB,\r\n                    investedA,\r\n                    investedB\r\n                );\r\n\r\n            if (sellToken != address(0) && sellAmount != 0) {\r\n                uint256 buyAmount =\r\n                    sellCapital(\r\n                        sellToken,\r\n                        sellToken == tokenA ? tokenB : tokenA,\r\n                        sellAmount\r\n                    );\r\n\r\n                if (sellToken == tokenA) {\r\n                    currentA = currentA.sub(sellAmount);\r\n                    currentB = currentB.add(buyAmount);\r\n                } else {\r\n                    currentB = currentB.sub(sellAmount);\r\n                    currentA = currentA.add(buyAmount);\r\n                }\r\n\r\n                (ratioA, ratioB) = getRatios(\r\n                    currentA,\r\n                    currentB,\r\n                    investedA,\r\n                    investedB\r\n                );\r\n            }\r\n        }\r\n\r\n        investedA = investedB = 0;\r\n\r\n        if (returnFunds) {\r\n            _returnLooseToProviders();\r\n        }\r\n    }\r\n\r\n    function adjustPosition() external onlyProviders {\r\n        // No capital, nothing to do\r\n        if (balanceOfA() == 0 || balanceOfB() == 0) {\r\n            return;\r\n        }\r\n\r\n        require(\r\n            balanceOfStake() == 0 &&\r\n                balanceOfPair() == 0 &&\r\n                investedA == 0 &&\r\n                investedB == 0\r\n        ); // don't create LP if we are already invested\r\n\r\n        (investedA, investedB, ) = createLP();\r\n        if (hedgeBudget > 0) {\r\n            // take into account that if hedgeBudget is not enough, it will revert\r\n            hedgeLP();\r\n        }\r\n        depositLP();\r\n\r\n        if (balanceOfStake() != 0 || balanceOfPair() != 0) {\r\n            _returnLooseToProviders();\r\n        }\r\n    }\r\n\r\n    function getOptionsProfit() public view returns (uint256, uint256) {\r\n        return LPHedgingLib.getOptionsProfit(activeCallID, activePutID);\r\n    }\r\n\r\n    function estimatedTotalAssetsAfterBalance()\r\n        public\r\n        view\r\n        returns (uint256 _aBalance, uint256 _bBalance)\r\n    {\r\n        uint256 rewardsPending = pendingReward();\r\n\r\n        (_aBalance, _bBalance) = balanceOfTokensInLP();\r\n\r\n        _aBalance = _aBalance.add(balanceOfA());\r\n        _bBalance = _bBalance.add(balanceOfB());\r\n\r\n        (uint256 callProfit, uint256 putProfit) = getOptionsProfit();\r\n        _aBalance = _aBalance.add(callProfit);\r\n        _bBalance = _bBalance.add(putProfit);\r\n\r\n        if (reward == tokenA) {\r\n            _aBalance = _aBalance.add(rewardsPending);\r\n        } else if (reward == tokenB) {\r\n            _bBalance = _bBalance.add(rewardsPending);\r\n        } else if (rewardsPending != 0) {\r\n            address swapTo = findSwapTo(reward);\r\n            uint256[] memory outAmounts =\r\n                IUniswapV2Router02(router).getAmountsOut(\r\n                    rewardsPending,\r\n                    getTokenOutPath(reward, swapTo)\r\n                );\r\n            if (swapTo == tokenA) {\r\n                _aBalance = _aBalance.add(outAmounts[outAmounts.length - 1]);\r\n            } else if (swapTo == tokenB) {\r\n                _bBalance = _bBalance.add(outAmounts[outAmounts.length - 1]);\r\n            }\r\n        }\r\n\r\n        (address sellToken, uint256 sellAmount) =\r\n            calculateSellToBalance(_aBalance, _bBalance, investedA, investedB);\r\n\r\n        (uint256 reserveA, uint256 reserveB) = getReserves();\r\n\r\n        if (sellToken == tokenA) {\r\n            uint256 buyAmount =\r\n                UniswapV2Library.getAmountOut(sellAmount, reserveA, reserveB);\r\n            _aBalance = _aBalance.sub(sellAmount);\r\n            _bBalance = _bBalance.add(buyAmount);\r\n        } else if (sellToken == tokenB) {\r\n            uint256 buyAmount =\r\n                UniswapV2Library.getAmountOut(sellAmount, reserveB, reserveA);\r\n            _bBalance = _bBalance.sub(sellAmount);\r\n            _aBalance = _aBalance.add(buyAmount);\r\n        }\r\n    }\r\n\r\n    function estimatedTotalAssetsInToken(address token)\r\n        external\r\n        view\r\n        returns (uint256 _balance)\r\n    {\r\n        if (token == tokenA) {\r\n            (_balance, ) = estimatedTotalAssetsAfterBalance();\r\n        } else if (token == tokenB) {\r\n            (, _balance) = estimatedTotalAssetsAfterBalance();\r\n        }\r\n    }\r\n\r\n    function hedgeLP() internal {\r\n        IERC20 _pair = IERC20(getPair());\r\n        // TODO: sell options if they are active\r\n        require(activeCallID == 0 && activePutID == 0);\r\n        (activeCallID, activePutID) = LPHedgingLib.hedgeLPToken(\r\n            address(_pair),\r\n            h,\r\n            period\r\n        );\r\n    }\r\n\r\n    function calculateSellToBalance(\r\n        uint256 currentA,\r\n        uint256 currentB,\r\n        uint256 startingA,\r\n        uint256 startingB\r\n    ) internal view returns (address _sellToken, uint256 _sellAmount) {\r\n        if (startingA == 0 || startingB == 0) return (address(0), 0);\r\n\r\n        (uint256 ratioA, uint256 ratioB) =\r\n            getRatios(currentA, currentB, startingA, startingB);\r\n\r\n        if (ratioA == ratioB) return (address(0), 0);\r\n\r\n        (uint256 reserveA, uint256 reserveB) = getReserves();\r\n\r\n        if (ratioA > ratioB) {\r\n            _sellToken = tokenA;\r\n            _sellAmount = _calculateSellToBalance(\r\n                currentA,\r\n                currentB,\r\n                startingA,\r\n                startingB,\r\n                reserveA,\r\n                reserveB,\r\n                10**uint256(IERC20Extended(tokenA).decimals())\r\n            );\r\n        } else {\r\n            _sellToken = tokenB;\r\n            _sellAmount = _calculateSellToBalance(\r\n                currentB,\r\n                currentA,\r\n                startingB,\r\n                startingA,\r\n                reserveB,\r\n                reserveA,\r\n                10**uint256(IERC20Extended(tokenB).decimals())\r\n            );\r\n        }\r\n    }\r\n\r\n    function _calculateSellToBalance(\r\n        uint256 current0,\r\n        uint256 current1,\r\n        uint256 starting0,\r\n        uint256 starting1,\r\n        uint256 reserve0,\r\n        uint256 reserve1,\r\n        uint256 precision\r\n    ) internal pure returns (uint256 _sellAmount) {\r\n        uint256 numerator =\r\n            current0.sub(starting0.mul(current1).div(starting1)).mul(precision);\r\n        uint256 denominator;\r\n        uint256 exchangeRate;\r\n\r\n        // First time to approximate\r\n        exchangeRate = UniswapV2Library.getAmountOut(\r\n            precision,\r\n            reserve0,\r\n            reserve1\r\n        );\r\n        denominator = precision + starting0.mul(exchangeRate).div(starting1);\r\n        _sellAmount = numerator.div(denominator);\r\n\r\n        // Second time to account for price impact\r\n        exchangeRate = UniswapV2Library\r\n            .getAmountOut(_sellAmount, reserve0, reserve1)\r\n            .mul(precision)\r\n            .div(_sellAmount);\r\n        denominator = precision + starting0.mul(exchangeRate).div(starting1);\r\n        _sellAmount = numerator.div(denominator);\r\n    }\r\n\r\n    function getRatios(\r\n        uint256 currentA,\r\n        uint256 currentB,\r\n        uint256 startingA,\r\n        uint256 startingB\r\n    ) internal pure returns (uint256 _a, uint256 _b) {\r\n        _a = currentA.mul(RATIO_PRECISION).div(startingA);\r\n        _b = currentB.mul(RATIO_PRECISION).div(startingB);\r\n    }\r\n\r\n    function getReserves()\r\n        public\r\n        view\r\n        returns (uint256 reserveA, uint256 reserveB)\r\n    {\r\n        if (tokenA == pair.token0()) {\r\n            (reserveA, reserveB, ) = pair.getReserves();\r\n        } else {\r\n            (reserveB, reserveA, ) = pair.getReserves();\r\n        }\r\n    }\r\n\r\n    function createLP()\r\n        internal\r\n        returns (\r\n            uint256,\r\n            uint256,\r\n            uint256\r\n        )\r\n    {\r\n        // **WARNING**: This call is sandwichable, care should be taken\r\n        //              to always execute with a private relay\r\n        return\r\n            IUniswapV2Router02(router).addLiquidity(\r\n                tokenA,\r\n                tokenB,\r\n                balanceOfA().mul(RATIO_PRECISION.sub(hedgeBudget)).div(\r\n                    RATIO_PRECISION\r\n                ),\r\n                balanceOfB().mul(RATIO_PRECISION.sub(hedgeBudget)).div(\r\n                    RATIO_PRECISION\r\n                ),\r\n                0,\r\n                0,\r\n                address(this),\r\n                now\r\n            );\r\n    }\r\n\r\n    function findSwapTo(address token) internal view returns (address) {\r\n        if (tokenA == token) {\r\n            return tokenB;\r\n        } else if (tokenB == token) {\r\n            return tokenA;\r\n        } else if (reward == token) {\r\n            if (tokenA == WETH || tokenB == WETH) {\r\n                return WETH;\r\n            }\r\n            return tokenA;\r\n        } else {\r\n            revert(\"!swapTo\");\r\n        }\r\n    }\r\n\r\n    function getTokenOutPath(address _token_in, address _token_out)\r\n        internal\r\n        view\r\n        returns (address[] memory _path)\r\n    {\r\n        bool is_weth =\r\n            _token_in == address(WETH) || _token_out == address(WETH);\r\n        _path = new address[](is_weth ? 2 : 3);\r\n        _path[0] = _token_in;\r\n        if (is_weth) {\r\n            _path[1] = _token_out;\r\n        } else {\r\n            _path[1] = address(WETH);\r\n            _path[2] = _token_out;\r\n        }\r\n    }\r\n\r\n    function getReward() internal {\r\n        masterchef.deposit(pid, 0);\r\n    }\r\n\r\n    function depositLP() internal {\r\n        if (balanceOfPair() > 0) masterchef.deposit(pid, balanceOfPair());\r\n    }\r\n\r\n    function swapReward(uint256 _rewardBal)\r\n        internal\r\n        returns (address _swapTo, uint256 _receivedAmount)\r\n    {\r\n        if (reward == tokenA || reward == tokenB || _rewardBal == 0) {\r\n            return (address(0), 0);\r\n        }\r\n\r\n        _swapTo = findSwapTo(reward);\r\n        _receivedAmount = sellCapital(reward, _swapTo, _rewardBal);\r\n    }\r\n\r\n    // If there is a lot of impermanent loss, some capital will need to be sold\r\n    // To make both sides even\r\n    function sellCapital(\r\n        address _tokenFrom,\r\n        address _tokenTo,\r\n        uint256 _amountIn\r\n    ) internal returns (uint256 _amountOut) {\r\n        uint256[] memory amounts =\r\n            IUniswapV2Router02(router).swapExactTokensForTokens(\r\n                _amountIn,\r\n                0,\r\n                getTokenOutPath(_tokenFrom, _tokenTo),\r\n                address(this),\r\n                now\r\n            );\r\n        _amountOut = amounts[amounts.length - 1];\r\n    }\r\n\r\n    function _liquidatePosition() internal returns (uint256, uint256) {\r\n        if (balanceOfStake() != 0) {\r\n            masterchef.withdraw(pid, balanceOfStake());\r\n        }\r\n\r\n        if (balanceOfPair() == 0) {\r\n            return (0, 0);\r\n        }\r\n        // only close hedge if a hedge is open\r\n        if (activeCallID != 0 && activePutID != 0) {\r\n            LPHedgingLib.closeHedge(activeCallID, activePutID);\r\n        }\r\n\r\n        activeCallID = 0;\r\n        activePutID = 0;\r\n        // **WARNING**: This call is sandwichable, care should be taken\r\n        //              to always execute with a private relay\r\n        IUniswapV2Router02(router).removeLiquidity(\r\n            tokenA,\r\n            tokenB,\r\n            balanceOfPair(),\r\n            0,\r\n            0,\r\n            address(this),\r\n            now\r\n        );\r\n        return (balanceOfA(), balanceOfB());\r\n    }\r\n\r\n    function _returnLooseToProviders() internal {\r\n        uint256 balanceA = balanceOfA();\r\n        if (balanceA > 0) {\r\n            IERC20(tokenA).transfer(address(providerA), balanceA);\r\n        }\r\n\r\n        uint256 balanceB = balanceOfB();\r\n        if (balanceB > 0) {\r\n            IERC20(tokenB).transfer(address(providerB), balanceB);\r\n        }\r\n    }\r\n\r\n    function onERC721Received(\r\n        address,\r\n        address,\r\n        uint256,\r\n        bytes calldata\r\n    ) public pure virtual returns (bytes4) {\r\n        return this.onERC721Received.selector;\r\n    }\r\n\r\n    function getPair() internal view returns (address) {\r\n        address factory = IUniswapV2Router02(router).factory();\r\n        return IUniswapV2Factory(factory).getPair(tokenA, tokenB);\r\n    }\r\n\r\n    function balanceOfPair() public view returns (uint256) {\r\n        return IERC20(getPair()).balanceOf(address(this));\r\n    }\r\n\r\n    function balanceOfA() public view returns (uint256) {\r\n        return IERC20(tokenA).balanceOf(address(this));\r\n    }\r\n\r\n    function balanceOfB() public view returns (uint256) {\r\n        return IERC20(tokenB).balanceOf(address(this));\r\n    }\r\n\r\n    function balanceOfReward() public view returns (uint256) {\r\n        return IERC20(reward).balanceOf(address(this));\r\n    }\r\n\r\n    function balanceOfStake() public view returns (uint256) {\r\n        return masterchef.userInfo(pid, address(this)).amount;\r\n    }\r\n\r\n    function balanceOfTokensInLP()\r\n        public\r\n        view\r\n        returns (uint256 _balanceA, uint256 _balanceB)\r\n    {\r\n        (uint256 reserveA, uint256 reserveB) = getReserves();\r\n        uint256 lpBal = balanceOfStake().add(balanceOfPair());\r\n        uint256 pairPrecision = 10**uint256(pair.decimals());\r\n        uint256 percentTotal = lpBal.mul(pairPrecision).div(pair.totalSupply());\r\n        _balanceA = reserveA.mul(percentTotal).div(pairPrecision);\r\n        _balanceB = reserveB.mul(percentTotal).div(pairPrecision);\r\n    }\r\n\r\n    function pendingReward() public view virtual returns (uint256) {}\r\n\r\n    function liquidatePosition() external onlyAuthorized {\r\n        _liquidatePosition();\r\n    }\r\n\r\n    function returnLooseToProviders() external onlyAuthorized {\r\n        _returnLooseToProviders();\r\n    }\r\n\r\n    function setHedgeBudget(uint256 _hedgeBudget) external onlyAuthorized {\r\n        require(_hedgeBudget < RATIO_PRECISION);\r\n        hedgeBudget = _hedgeBudget;\r\n    }\r\n\r\n    function setHedgingPeriod(uint256 _period) external onlyAuthorized {\r\n        require(_period < 90 days);\r\n        period = _period;\r\n    }\r\n\r\n    function setProtectionRange(uint256 _h) external onlyAuthorized {\r\n        require(_h < RATIO_PRECISION);\r\n        h = _h;\r\n    }\r\n\r\n    function swapTokenForToken(\r\n        address swapFrom,\r\n        address swapTo,\r\n        uint256 swapInAmount\r\n    ) external onlyGovernance returns (uint256) {\r\n        require(swapTo == tokenA || swapTo == tokenB); // swapTo must be tokenA or tokenB\r\n        return sellCapital(swapFrom, swapTo, swapInAmount);\r\n    }\r\n\r\n    function sweep(address _token) external onlyGovernance {\r\n        require(_token != address(tokenA));\r\n        require(_token != address(tokenB));\r\n\r\n        SafeERC20.safeTransfer(\r\n            IERC20(_token),\r\n            providerA.vault().governance(),\r\n            IERC20(_token).balanceOf(address(this))\r\n        );\r\n    }\r\n}\r\n\r\n// File: SushiJoint.sol\r\n\r\ncontract SushiJoint is Joint {\r\n    constructor(\r\n        address _providerA,\r\n        address _providerB,\r\n        address _router,\r\n        address _weth,\r\n        address _masterchef,\r\n        address _reward,\r\n        uint256 _pid\r\n    )\r\n        public\r\n        Joint(\r\n            _providerA,\r\n            _providerB,\r\n            _router,\r\n            _weth,\r\n            _masterchef,\r\n            _reward,\r\n            _pid\r\n        )\r\n    {}\r\n\r\n    function name() external view override returns (string memory) {\r\n        string memory ab =\r\n            string(\r\n                abi.encodePacked(\r\n                    \"SushiJoint\",\r\n                    IERC20Extended(address(tokenA)).symbol(),\r\n                    IERC20Extended(address(tokenB)).symbol()\r\n                )\r\n            );\r\n\r\n        return string(abi.encodePacked(\"SushiJointOf\", ab));\r\n    }\r\n\r\n    function pendingReward() public view override returns (uint256) {\r\n        return\r\n            ISushiMasterchef(address(masterchef)).pendingSushi(\r\n                pid,\r\n                address(this)\r\n            );\r\n    }\r\n}","ABI":"[{\"inputs\":[],\"name\":\"asset1\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"q\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"h\",\"type\":\"uint256\"}],\"name\":\"getCallAmount\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"lpToken\",\"type\":\"address\"}],\"name\":\"getLPInfo\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"token0\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"token1\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"token0Amount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"token1Amount\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"q\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"h\",\"type\":\"uint256\"}],\"name\":\"getOptionsAmount\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"putAmount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"callAmount\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"callID\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"putID\",\"type\":\"uint256\"}],\"name\":\"getOptionsProfit\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"q\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"h\",\"type\":\"uint256\"}],\"name\":\"getPutAmount\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"hegicCallOptionsPool\",\"outputs\":[{\"internalType\":\"contract IHegicPool\",\"name\":\"\",\"type\":\"IHegicPool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"hegicOptionsManager\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"hegicPutOptionsPool\",\"outputs\":[{\"internalType\":\"contract IHegicPool\",\"name\":\"\",\"type\":\"IHegicPool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"x\",\"type\":\"uint256\"}],\"name\":\"sqrt\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"result\",\"type\":\"uint256\"}],\"stateMutability\":\"pure\",\"type\":\"function\"}]","ContractName":"LPHedgingLib","CompilerVersion":"v0.6.12+commit.27d51765","OptimizationUsed":"1","Runs":"200","ConstructorArguments":"","EVMVersion":"Default","Library":"","LicenseType":"GNU GPLv3","Proxy":"0","Implementation":"","SwarmSource":"ipfs://12347885310623253f975ee1da5dd926ffb4f5efe09938b0bf015fc887aef992"}]}