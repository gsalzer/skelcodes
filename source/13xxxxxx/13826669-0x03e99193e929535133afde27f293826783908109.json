{"status":"1","message":"OK","result":[{"SourceCode":"{\"IERC20.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity 0.8.4;\\n\\n/**\\n * @dev Interface of the ERC20 standard as defined in the EIP.\\n */\\ninterface IERC20 {\\n    /**\\n     * @dev Returns the amount of tokens in existence.\\n     */\\n    function totalSupply() external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the amount of tokens owned by `account`.\\n     */\\n    function balanceOf(address account) external view returns (uint256);\\n\\n    /**\\n     * @dev Moves `amount` tokens from the caller\\u0027s account to `recipient`.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transfer(address recipient, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Returns the remaining number of tokens that `spender` will be\\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\\n     * zero by default.\\n     *\\n     * This value changes when {approve} or {transferFrom} are called.\\n     */\\n    function allowance(address owner, address spender) external view returns (uint256);\\n\\n    /**\\n     * @dev Sets `amount` as the allowance of `spender` over the caller\\u0027s tokens.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\\n     * that someone may use both the old and the new allowance by unfortunate\\n     * transaction ordering. One possible solution to mitigate this race\\n     * condition is to first reduce the spender\\u0027s allowance to 0 and set the\\n     * desired value afterwards:\\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address spender, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Moves `amount` tokens from `sender` to `recipient` using the\\n     * allowance mechanism. `amount` is then deducted from the caller\\u0027s\\n     * allowance.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(address sender, address recipient, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\\n     * another (`to`).\\n     *\\n     * Note that `value` may be zero.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 value);\\n\\n    /**\\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\\n     * a call to {approve}. `value` is the new allowance.\\n     */\\n    event Approval(address indexed owner, address indexed spender, uint256 value);\\n}\\n\"},\"VickreyAuction.sol\":{\"content\":\"// SPDX-License-Identifier: UNLICENSED\\n\\npragma solidity 0.8.4;\\n\\nimport \\u0027./IERC20.sol\\u0027;\\n\\n\\ncontract VickreyAuction {\\n\\n    event AuctionEnded(\\n        address indexed endUser,\\n        uint auctionId,\\n        address winner, \\n        uint secondHighestBid\\n    );\\n\\n    event BidPlaced(\\n        address indexed endUser,\\n        uint indexed auctionId,\\n        address indexed bidder\\n    );\\n\\n    event PaidOut(\\n        address indexed endUser,\\n        uint indexed auctionId,\\n        uint amount\\n    );\\n\\n    enum Status {\\n        isActive,\\n        isEndedButNotPaid,\\n        isEndedAndPaid\\n    }\\n\\n    struct Bid {\\n        bytes32 blindedBid;\\n        address jobPoster;\\n        uint auctionId;\\n        uint deposit;\\n    }\\n\\n    struct Auction {\\n        uint minimumPayout;\\n        uint reward;\\n        uint biddingDeadline;\\n        uint revealDeadline;\\n        uint bidsPlaced;\\n        uint highestBid;\\n        uint secondHighestBid;\\n        address highestBidder;\\n        Status status;\\n    }\\n\\n    mapping(address =\\u003e Auction[]) public auctions;\\n    mapping(bytes32 =\\u003e Bid) private bids;\\n    mapping(address =\\u003e uint) private staleBids;\\n\\n    IERC20 public token;\\n\\n    error TooEarly(uint time);\\n    error TooLate(uint time);\\n    error AuctionEndAlreadyCalled();\\n    error DoesNotMatchBlindedBid();\\n\\n    modifier onlyBefore(uint _time) {\\n        if (block.timestamp \\u003e= _time) revert TooLate(_time);\\n        _;\\n    }\\n    modifier onlyAfter(uint _time) {\\n        if (block.timestamp \\u003c= _time) revert TooEarly(_time);\\n        _;\\n    }\\n\\n    constructor(\\n        IERC20 _token\\n    ) {\\n        token = _token;\\n    }\\n\\n    function start(\\n        uint _minimumPayout,\\n        uint _biddingDeadline,\\n        uint _revealDeadline,\\n        uint _reward,\\n        address _endUser\\n    )\\n        public\\n    {\\n        auctions[_endUser].push(Auction({\\n            minimumPayout: _minimumPayout,\\n            reward: _reward,\\n            biddingDeadline: _biddingDeadline,\\n            revealDeadline: _revealDeadline,\\n            bidsPlaced: 0,\\n            highestBid: 0,\\n            secondHighestBid: 0,\\n            highestBidder: _endUser,\\n            status: Status.isActive\\n        }));\\n    }\\n\\n    function bid(\\n        address _endUser,\\n        uint _auctionId,\\n        bytes32 _blindedBid,\\n        uint _amount\\n    )\\n        public\\n        onlyBefore(auctions[_endUser][_auctionId].biddingDeadline)\\n    {\\n        require(_amount \\u003c auctions[_endUser][_auctionId].reward,\\u0027_amount must be less than reward\\u0027);\\n        require(_amount \\u003e auctions[_endUser][_auctionId].minimumPayout,\\u0027_amount must be greater than minimumPayout\\u0027);\\n        uint allowedAmount = token.allowance(msg.sender,address(this));\\n        require(allowedAmount \\u003e= _amount,\\u0027allowedAmount must be greater than or equal to _amount\\u0027);\\n        token.transferFrom(msg.sender,address(this),_amount);\\n        bids[keccak256(abi.encodePacked(_endUser,_auctionId,msg.sender))] = Bid({\\n            blindedBid: _blindedBid,\\n            deposit: _amount,\\n            jobPoster: _endUser,\\n            auctionId: _auctionId\\n        });\\n        emit BidPlaced(\\n            _endUser,\\n            _auctionId,\\n            msg.sender);\\n    }\\n\\n    function reveal(\\n        address _endUser,\\n        uint _auctionId,\\n        uint _amount,\\n        bool _fake,\\n        bytes32 _secret\\n    )\\n        public\\n        onlyAfter(auctions[_endUser][_auctionId].biddingDeadline)\\n        onlyBefore(auctions[_endUser][_auctionId].revealDeadline)\\n    {\\n        Bid storage bidToCheck = bids[keccak256(abi.encodePacked(_endUser,_auctionId,msg.sender))];\\n        if (bidToCheck.jobPoster == _endUser \\u0026\\u0026 bidToCheck.auctionId == _auctionId) {\\n            uint refund;\\n            if (bidToCheck.blindedBid != keccak256(abi.encodePacked(_amount, _fake, _secret))) {\\n                revert DoesNotMatchBlindedBid();\\n            }\\n            refund += bidToCheck.deposit;\\n            if (!_fake \\u0026\\u0026 bidToCheck.deposit \\u003e= _amount) {\\n                if (placeBid(_endUser, _auctionId, msg.sender, _amount)) {\\n                    refund -= _amount;\\n                }\\n            }\\n            bidToCheck.blindedBid = bytes32(0);\\n            if (refund \\u003e 0) token.transfer(msg.sender,refund);\\n        }\\n    }\\n\\n    function withdraw() public {\\n        uint amount = staleBids[msg.sender];\\n        if (amount \\u003e 0) {\\n            staleBids[msg.sender] = 0;\\n            token.transfer(msg.sender,amount);\\n        }\\n    }\\n\\n    function auctionEnd(\\n        address _endUser,\\n        uint _auctionId\\n    )\\n        public\\n        onlyAfter(auctions[_endUser][_auctionId].revealDeadline)\\n    {\\n        if (auctions[_endUser][_auctionId].status == Status.isActive) revert AuctionEndAlreadyCalled();\\n        emit AuctionEnded(\\n            _endUser,\\n            _auctionId,\\n            auctions[_endUser][_auctionId].highestBidder,\\n            auctions[_endUser][_auctionId].secondHighestBid);\\n        auctions[_endUser][_auctionId].status = Status.isEndedButNotPaid;\\n    }\\n\\n    function payout(\\n        address _endUser,\\n        uint _auctionId\\n    )\\n        public\\n    {\\n        require(auctions[_endUser][_auctionId].status != Status.isActive, \\u0027VickreyAuction has not ended\\u0027);\\n        require(auctions[_endUser][_auctionId].status != Status.isEndedAndPaid, \\u0027VickreyAuction has been paid-out\\u0027);\\n        if (auctions[_endUser][_auctionId].bidsPlaced == 0) {\\n            token.transfer(_endUser, auctions[_endUser][_auctionId].reward);\\n        } else {\\n            uint leftover = auctions[_endUser][_auctionId].highestBid - auctions[_endUser][_auctionId].secondHighestBid;\\n            uint workerPay = leftover + auctions[_endUser][_auctionId].reward;\\n            token.transfer(auctions[_endUser][_auctionId].highestBidder, workerPay);\\n            emit PaidOut(\\n                _endUser,\\n                _auctionId,\\n                workerPay);\\n        }\\n        auctions[_endUser][_auctionId].status = Status.isEndedAndPaid;\\n    }\\n\\n    function placeBid(\\n        address _endUser,\\n        uint _auctionId,\\n        address _bidder,\\n        uint _amount\\n    )\\n        internal\\n        returns (bool success)\\n    {\\n        if (_amount \\u003c= auctions[_endUser][_auctionId].highestBid) {\\n            return false;\\n        }\\n        if (auctions[_endUser][_auctionId].highestBidder != address(0)) {\\n            address hb = auctions[_endUser][_auctionId].highestBidder;\\n            staleBids[hb] += auctions[_endUser][_auctionId].highestBid;\\n        }\\n        auctions[_endUser][_auctionId].secondHighestBid = auctions[_endUser][_auctionId].highestBid;\\n        auctions[_endUser][_auctionId].highestBid = _amount;\\n        auctions[_endUser][_auctionId].highestBidder = _bidder;\\n        auctions[_endUser][_auctionId].bidsPlaced += 1;\\n        return true;\\n    }\\n}\\n\"}}","ABI":"[{\"inputs\":[{\"internalType\":\"contract IERC20\",\"name\":\"_token\",\"type\":\"address\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"inputs\":[],\"name\":\"AuctionEndAlreadyCalled\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"DoesNotMatchBlindedBid\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"time\",\"type\":\"uint256\"}],\"name\":\"TooEarly\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"time\",\"type\":\"uint256\"}],\"name\":\"TooLate\",\"type\":\"error\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"endUser\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"auctionId\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"winner\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"secondHighestBid\",\"type\":\"uint256\"}],\"name\":\"AuctionEnded\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"endUser\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"auctionId\",\"type\":\"uint256\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"bidder\",\"type\":\"address\"}],\"name\":\"BidPlaced\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"endUser\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"auctionId\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"PaidOut\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_endUser\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_auctionId\",\"type\":\"uint256\"}],\"name\":\"auctionEnd\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"auctions\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"minimumPayout\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"reward\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"biddingDeadline\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"revealDeadline\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"bidsPlaced\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"highestBid\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"secondHighestBid\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"highestBidder\",\"type\":\"address\"},{\"internalType\":\"enum VickreyAuction.Status\",\"name\":\"status\",\"type\":\"uint8\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_endUser\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_auctionId\",\"type\":\"uint256\"},{\"internalType\":\"bytes32\",\"name\":\"_blindedBid\",\"type\":\"bytes32\"},{\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"bid\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_endUser\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_auctionId\",\"type\":\"uint256\"}],\"name\":\"payout\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_endUser\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_auctionId\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"},{\"internalType\":\"bool\",\"name\":\"_fake\",\"type\":\"bool\"},{\"internalType\":\"bytes32\",\"name\":\"_secret\",\"type\":\"bytes32\"}],\"name\":\"reveal\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_minimumPayout\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_biddingDeadline\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_revealDeadline\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_reward\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"_endUser\",\"type\":\"address\"}],\"name\":\"start\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"token\",\"outputs\":[{\"internalType\":\"contract IERC20\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"withdraw\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}]","ContractName":"VickreyAuction","CompilerVersion":"v0.8.4+commit.c7e474f2","OptimizationUsed":"0","Runs":"200","ConstructorArguments":"0000000000000000000000005f80d31044d8b15acffa3454dffda9f022453461","EVMVersion":"Default","Library":"","LicenseType":"None","Proxy":"0","Implementation":"","SwarmSource":"ipfs://efdc38952b94c687b959d28fb348f3b581e64ffcd704dbdde19095ccfe29966c"}]}