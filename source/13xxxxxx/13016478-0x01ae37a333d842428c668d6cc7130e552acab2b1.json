{"status":"1","message":"OK","result":[{"SourceCode":"{{\r\n  \"language\": \"Solidity\",\r\n  \"sources\": {\r\n    \"contracts/PriceFeed.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"@chainlink/contracts/src/v0.8/interfaces/FeedRegistryInterface.sol\\\";\\nimport \\\"@chainlink/contracts/src/v0.8/Denominations.sol\\\";\\nimport \\\"./interfaces/IPriceFeed.sol\\\";\\n\\ncontract PriceFeed is IPriceFeed {\\n    address public registry;\\n    address public token;\\n    address public base;\\n    address public quote;\\n\\n    /**\\n     * @dev Sets the values for {registry}, {token}, {base}, and {quote}.\\n     *\\n     * We retrieve price from ChainLink registry, and normally {token} and {base} should be the same.\\n     * Also, we currently only support ETH and USD as quote.\\n     */\\n    constructor(address _registry, address _token, address _base, address _quote) {\\n        // We only support ETH and USD quote.\\n        require(_quote == Denominations.ETH || _quote == Denominations.USD, \\\"unsupport quote\\\");\\n\\n        // Make sure the aggregator exists.\\n        AggregatorV2V3Interface aggregator = FeedRegistryInterface(_registry).getFeed(_base, _quote);\\n        require(FeedRegistryInterface(_registry).isFeedEnabled(address(aggregator)), \\\"aggregator not enabled\\\");\\n\\n        registry = _registry;\\n        token = _token;\\n        base = _base;\\n        quote = _quote;\\n    }\\n\\n    /**\\n     * @notice Return the token. It should be the collateral token address from IB agreement.\\n     * @return the token address\\n     */\\n    function getToken() external override view returns (address) {\\n        return token;\\n    }\\n\\n    /**\\n     * @notice Return the token latest price in USD.\\n     * @return the price, scaled by 1e18\\n     */\\n    function getPrice() external override view returns (uint) {\\n        uint price = getPriceFromChainlink(base, quote);\\n        if (quote == Denominations.ETH) {\\n            uint ethUsdPrice = getPriceFromChainlink(Denominations.ETH, Denominations.USD);\\n            price = price * ethUsdPrice / 1e18;\\n        }\\n        return price;\\n    }\\n\\n    /**\\n     * @notice Get the token price from ChainLink.\\n     * @param _base The base\\n     * @param _quote The quote\\n     * @return the price, scaled by 1e18\\n     */\\n    function getPriceFromChainlink(address _base, address _quote) internal view returns (uint) {\\n        ( , int price, , , ) = FeedRegistryInterface(registry).latestRoundData(_base, _quote);\\n        require(price > 0, \\\"invalid price\\\");\\n\\n        // Extend the decimals to 1e18.\\n        return uint(price) * 10**(18 - uint(FeedRegistryInterface(registry).decimals(_base, _quote)));\\n    }\\n}\\n\"\r\n    },\r\n    \"@chainlink/contracts/src/v0.8/interfaces/FeedRegistryInterface.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.0;\\npragma abicoder v2;\\n\\nimport \\\"./AggregatorV2V3Interface.sol\\\";\\n\\ninterface FeedRegistryInterface {\\n  struct Phase {\\n    uint16 phaseId;\\n    uint80 startingAggregatorRoundId;\\n    uint80 endingAggregatorRoundId;\\n  }\\n\\n  event FeedProposed(\\n    address indexed asset,\\n    address indexed denomination,\\n    address indexed proposedAggregator,\\n    address currentAggregator,\\n    address sender\\n  );\\n  event FeedConfirmed(\\n    address indexed asset,\\n    address indexed denomination,\\n    address indexed latestAggregator,\\n    address previousAggregator,\\n    uint16 nextPhaseId,\\n    address sender\\n  );\\n\\n  // V3 AggregatorV3Interface\\n\\n  function decimals(\\n    address base,\\n    address quote\\n  )\\n    external\\n    view\\n    returns (\\n      uint8\\n    );\\n\\n  function description(\\n    address base,\\n    address quote\\n  )\\n    external\\n    view\\n    returns (\\n      string memory\\n    );\\n\\n  function version(\\n    address base,\\n    address quote\\n  )\\n    external\\n    view\\n    returns (\\n      uint256\\n    );\\n\\n  function latestRoundData(\\n    address base,\\n    address quote\\n  )\\n    external\\n    view\\n    returns (\\n      uint80 roundId,\\n      int256 answer,\\n      uint256 startedAt,\\n      uint256 updatedAt,\\n      uint80 answeredInRound\\n    );\\n\\n  function getRoundData(\\n    address base,\\n    address quote,\\n    uint80 _roundId\\n  )\\n    external\\n    view\\n    returns (\\n      uint80 roundId,\\n      int256 answer,\\n      uint256 startedAt,\\n      uint256 updatedAt,\\n      uint80 answeredInRound\\n    );\\n\\n  // V2 AggregatorInterface\\n\\n  function latestAnswer(\\n    address base,\\n    address quote\\n  )\\n    external\\n    view\\n    returns (\\n      int256 answer\\n    );\\n\\n  function latestTimestamp(\\n    address base,\\n    address quote\\n  )\\n    external\\n    view\\n    returns (\\n      uint256 timestamp\\n    );\\n\\n  function latestRound(\\n    address base,\\n    address quote\\n  )\\n    external\\n    view\\n    returns (\\n      uint256 roundId\\n    );\\n\\n  function getAnswer(\\n    address base,\\n    address quote,\\n    uint256 roundId\\n  )\\n    external\\n    view\\n    returns (\\n      int256 answer\\n    );\\n\\n  function getTimestamp(\\n    address base,\\n    address quote,\\n    uint256 roundId\\n  )\\n    external\\n    view\\n    returns (\\n      uint256 timestamp\\n    );\\n\\n  // Registry getters\\n\\n  function getFeed(\\n    address base,\\n    address quote\\n  )\\n    external\\n    view\\n    returns (\\n      AggregatorV2V3Interface aggregator\\n    );\\n\\n  function getPhaseFeed(\\n    address base,\\n    address quote,\\n    uint16 phaseId\\n  )\\n    external\\n    view\\n    returns (\\n      AggregatorV2V3Interface aggregator\\n    );\\n\\n  function isFeedEnabled(\\n    address aggregator\\n  )\\n    external\\n    view\\n    returns (\\n      bool\\n    );\\n\\n  function getPhase(\\n    address base,\\n    address quote,\\n    uint16 phaseId\\n  )\\n    external\\n    view\\n    returns (\\n      Phase memory phase\\n    );\\n\\n  // Round helpers\\n\\n  function getRoundFeed(\\n    address base,\\n    address quote,\\n    uint80 roundId\\n  )\\n    external\\n    view\\n    returns (\\n      AggregatorV2V3Interface aggregator\\n    );\\n\\n  function getPhaseRange(\\n    address base,\\n    address quote,\\n    uint16 phaseId\\n  )\\n    external\\n    view\\n    returns (\\n      uint80 startingRoundId,\\n      uint80 endingRoundId\\n    );\\n\\n  function getPreviousRoundId(\\n    address base,\\n    address quote,\\n    uint80 roundId\\n  ) external\\n    view\\n    returns (\\n      uint80 previousRoundId\\n    );\\n\\n  function getNextRoundId(\\n    address base,\\n    address quote,\\n    uint80 roundId\\n  ) external\\n    view\\n    returns (\\n      uint80 nextRoundId\\n    );\\n\\n  // Feed management\\n\\n  function proposeFeed(\\n    address base,\\n    address quote,\\n    address aggregator\\n  ) external;\\n\\n  function confirmFeed(\\n    address base,\\n    address quote,\\n    address aggregator\\n  ) external;\\n\\n  // Proposed aggregator\\n\\n  function getProposedFeed(\\n    address base,\\n    address quote\\n  )\\n    external\\n    view\\n    returns (\\n      AggregatorV2V3Interface proposedAggregator\\n    );\\n\\n  function proposedGetRoundData(\\n    address base,\\n    address quote,\\n    uint80 roundId\\n  )\\n    external\\n    view\\n    returns (\\n      uint80 id,\\n      int256 answer,\\n      uint256 startedAt,\\n      uint256 updatedAt,\\n      uint80 answeredInRound\\n    );\\n\\n  function proposedLatestRoundData(\\n    address base,\\n    address quote\\n  )\\n    external\\n    view\\n    returns (\\n      uint80 id,\\n      int256 answer,\\n      uint256 startedAt,\\n      uint256 updatedAt,\\n      uint80 answeredInRound\\n    );\\n\\n  // Phases\\n  function getCurrentPhaseId(\\n    address base,\\n    address quote\\n  )\\n    external\\n    view\\n    returns (\\n      uint16 currentPhaseId\\n    );\\n}\\n\"\r\n    },\r\n    \"@chainlink/contracts/src/v0.8/Denominations.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\nlibrary Denominations {\\n  address public constant ETH = 0xEeeeeEeeeEeEeeEeEeEeeEEEeeeeEeeeeeeeEEeE;\\n  address public constant BTC = 0xbBbBBBBbbBBBbbbBbbBbbbbBBbBbbbbBbBbbBBbB;\\n\\n  // Fiat currencies follow https://en.wikipedia.org/wiki/ISO_4217\\n  address public constant USD = address(840);\\n  address public constant GBP = address(826);\\n  address public constant EUR = address(978);\\n  address public constant JPY = address(392);\\n  address public constant KRW = address(410);\\n  address public constant CNY = address(156);\\n  address public constant AUD = address(36);\\n  address public constant CAD = address(124);\\n  address public constant CHF = address(756);\\n  address public constant ARS = address(32);\\n}\\n\"\r\n    },\r\n    \"contracts/interfaces/IPriceFeed.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\ninterface IPriceFeed {\\n    function getToken() external view returns (address);\\n    function getPrice() external view returns (uint);\\n}\\n\"\r\n    },\r\n    \"@chainlink/contracts/src/v0.8/interfaces/AggregatorV2V3Interface.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.0;\\n\\nimport \\\"./AggregatorInterface.sol\\\";\\nimport \\\"./AggregatorV3Interface.sol\\\";\\n\\ninterface AggregatorV2V3Interface is AggregatorInterface, AggregatorV3Interface\\n{\\n}\\n\"\r\n    },\r\n    \"@chainlink/contracts/src/v0.8/interfaces/AggregatorInterface.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.0;\\n\\ninterface AggregatorInterface {\\n  function latestAnswer()\\n    external\\n    view\\n    returns (\\n      int256\\n    );\\n  \\n  function latestTimestamp()\\n    external\\n    view\\n    returns (\\n      uint256\\n    );\\n\\n  function latestRound()\\n    external\\n    view\\n    returns (\\n      uint256\\n    );\\n\\n  function getAnswer(\\n    uint256 roundId\\n  )\\n    external\\n    view\\n    returns (\\n      int256\\n    );\\n\\n  function getTimestamp(\\n    uint256 roundId\\n  )\\n    external\\n    view\\n    returns (\\n      uint256\\n    );\\n\\n  event AnswerUpdated(\\n    int256 indexed current,\\n    uint256 indexed roundId,\\n    uint256 updatedAt\\n  );\\n\\n  event NewRound(\\n    uint256 indexed roundId,\\n    address indexed startedBy,\\n    uint256 startedAt\\n  );\\n}\\n\"\r\n    },\r\n    \"@chainlink/contracts/src/v0.8/interfaces/AggregatorV3Interface.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.0;\\n\\ninterface AggregatorV3Interface {\\n\\n  function decimals()\\n    external\\n    view\\n    returns (\\n      uint8\\n    );\\n\\n  function description()\\n    external\\n    view\\n    returns (\\n      string memory\\n    );\\n\\n  function version()\\n    external\\n    view\\n    returns (\\n      uint256\\n    );\\n\\n  // getRoundData and latestRoundData should both raise \\\"No data present\\\"\\n  // if they do not have data to report, instead of returning unset values\\n  // which could be misinterpreted as actual reported values.\\n  function getRoundData(\\n    uint80 _roundId\\n  )\\n    external\\n    view\\n    returns (\\n      uint80 roundId,\\n      int256 answer,\\n      uint256 startedAt,\\n      uint256 updatedAt,\\n      uint80 answeredInRound\\n    );\\n\\n  function latestRoundData()\\n    external\\n    view\\n    returns (\\n      uint80 roundId,\\n      int256 answer,\\n      uint256 startedAt,\\n      uint256 updatedAt,\\n      uint80 answeredInRound\\n    );\\n\\n}\\n\"\r\n    }\r\n  },\r\n  \"settings\": {\r\n    \"optimizer\": {\r\n      \"enabled\": true,\r\n      \"runs\": 200\r\n    },\r\n    \"outputSelection\": {\r\n      \"*\": {\r\n        \"*\": [\r\n          \"evm.bytecode\",\r\n          \"evm.deployedBytecode\",\r\n          \"abi\"\r\n        ]\r\n      }\r\n    },\r\n    \"libraries\": {}\r\n  }\r\n}}","ABI":"[{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_registry\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_token\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_base\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_quote\",\"type\":\"address\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"inputs\":[],\"name\":\"base\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getPrice\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getToken\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"quote\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"registry\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"token\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"}]","ContractName":"PriceFeed","CompilerVersion":"v0.8.2+commit.661d1103","OptimizationUsed":"1","Runs":"200","ConstructorArguments":"00000000000000000000000047fb2585d2c56fe188d0e6ec628a38b74fceeedf0000000000000000000000002ba592f78db6436527729929aaf6c908497cb2000000000000000000000000002ba592f78db6436527729929aaf6c908497cb200000000000000000000000000eeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeee","EVMVersion":"Default","Library":"","LicenseType":"","Proxy":"0","Implementation":"","SwarmSource":""}]}