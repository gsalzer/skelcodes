{"status":"1","message":"OK","result":[{"SourceCode":"contract OUSDResolutionUpgrade {\r\n    enum RebaseOptions {\r\n        NotSet,\r\n        OptOut,\r\n        OptIn\r\n    }\r\n\r\n    // From Initializable\r\n    bool private initialized;\r\n    bool private initializing;\r\n    uint256[50] private ______igap;\r\n\r\n    // From InitializableERC20Detailed\r\n    uint256[100] private _____ugap;\r\n    string private _name;\r\n    string private _symbol;\r\n    uint8 private _decimals;\r\n\r\n    // From OUSD\r\n    uint256 private constant MAX_SUPPLY = ~uint128(0); // (2^128) - 1\r\n    uint256 public _totalSupply;\r\n    mapping(address => mapping(address => uint256)) private _allowances;\r\n    address public vaultAddress = address(0);\r\n    mapping(address => uint256) private _creditBalances;\r\n    uint256 private _rebasingCredits;\r\n    uint256 private _rebasingCreditsPerToken;\r\n    uint256 public nonRebasingSupply;\r\n    mapping(address => uint256) public nonRebasingCreditsPerToken;\r\n    mapping(address => RebaseOptions) public rebaseState;\r\n    mapping(address => uint256) public isUpgraded;\r\n\r\n    uint256 private constant RESOLUTION_INCREASE = 1e9;\r\n\r\n    /**\r\n     * @return High resolution rebasingCreditsPerToken\r\n     */\r\n    function rebasingCreditsPerToken() public view returns (uint256) {\r\n        return _rebasingCreditsPerToken / RESOLUTION_INCREASE;\r\n    }\r\n\r\n    /**\r\n     * @return High resolution total number of rebasing credits\r\n     */\r\n    function rebasingCredits() public view returns (uint256) {\r\n        return _rebasingCredits / RESOLUTION_INCREASE;\r\n    }\r\n\r\n    /**\r\n     * @return High resolution rebasingCreditsPerToken\r\n     */\r\n    function rebasingCreditsPerTokenHighres() public view returns (uint256) {\r\n        return _rebasingCreditsPerToken;\r\n    }\r\n\r\n    /**\r\n     * @return High resolution total number of rebasing credits\r\n     */\r\n    function rebasingCreditsHighres() public view returns (uint256) {\r\n        return _rebasingCredits;\r\n    }\r\n\r\n    function upgradeGlobals() external {\r\n        require(isUpgraded[address(0)] == 0, \"Globals already upgraded\");\r\n        require(_rebasingCredits > 0, \"Sanity _rebasingCredits\");\r\n        require(\r\n            _rebasingCreditsPerToken > 0,\r\n            \"Sanity _rebasingCreditsPerToken\"\r\n        );\r\n        isUpgraded[address(0)] = 1;\r\n        _rebasingCredits = _rebasingCredits * RESOLUTION_INCREASE;\r\n        _rebasingCreditsPerToken =\r\n            _rebasingCreditsPerToken *\r\n            RESOLUTION_INCREASE;\r\n    }\r\n\r\n    function upgradeAccounts(address[] calldata accounts) external {\r\n        for (uint256 i = 0; i < accounts.length; i++) {\r\n            address account = accounts[i];\r\n            require(account != address(0), \"Reserved\");\r\n            require(isUpgraded[account] == 0, \"Account already upgraded\");\r\n            isUpgraded[account] = 1;\r\n\r\n            // Handle special for non-rebasing accounts\r\n            uint256 nrc = nonRebasingCreditsPerToken[account];\r\n            if (nrc > 0) {\r\n                require(nrc < 1e18, \"Account already highres\");\r\n                nonRebasingCreditsPerToken[account] = nrc * RESOLUTION_INCREASE;\r\n            }\r\n            // Upgrade balance\r\n            uint256 balance = _creditBalances[account];\r\n            require(balance > 0, \"Will not upgrade zero balance\");\r\n            _creditBalances[account] = balance * RESOLUTION_INCREASE;\r\n        }\r\n    }\r\n\r\n    function creditsBalanceOfHighres(address _account)\r\n        public\r\n        view\r\n        returns (\r\n            uint256,\r\n            uint256,\r\n            bool\r\n        )\r\n    {\r\n        return (\r\n            _creditBalances[_account],\r\n            _creditsPerToken(_account),\r\n            isUpgraded[_account] == 1\r\n        );\r\n    }\r\n\r\n    /**\r\n     * @dev Get the credits per token for an account. Returns a fixed amount\r\n     *      if the account is non-rebasing.\r\n     * @param _account Address of the account.\r\n     */\r\n    function _creditsPerToken(address _account)\r\n        internal\r\n        view\r\n        returns (uint256)\r\n    {\r\n        if (nonRebasingCreditsPerToken[_account] != 0) {\r\n            return nonRebasingCreditsPerToken[_account];\r\n        } else {\r\n            return _rebasingCreditsPerToken;\r\n        }\r\n    }\r\n}","ABI":"[{\"inputs\":[],\"name\":\"_totalSupply\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_account\",\"type\":\"address\"}],\"name\":\"creditsBalanceOfHighres\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"},{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"isUpgraded\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"nonRebasingCreditsPerToken\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"nonRebasingSupply\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"rebaseState\",\"outputs\":[{\"internalType\":\"enum OUSDResolutionUpgrade.RebaseOptions\",\"name\":\"\",\"type\":\"uint8\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"rebasingCredits\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"rebasingCreditsHighres\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"rebasingCreditsPerToken\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"rebasingCreditsPerTokenHighres\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address[]\",\"name\":\"accounts\",\"type\":\"address[]\"}],\"name\":\"upgradeAccounts\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"upgradeGlobals\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"vaultAddress\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"}]","ContractName":"OUSDResolutionUpgrade","CompilerVersion":"v0.8.7+commit.e28d00a7","OptimizationUsed":"1","Runs":"200","ConstructorArguments":"","EVMVersion":"Default","Library":"","LicenseType":"MIT","Proxy":"0","Implementation":"","SwarmSource":"ipfs://b702652b8e84ebe1dd98b51bbdb1b38e3f38e7168c0ced64be478385cd6651c4"}]}