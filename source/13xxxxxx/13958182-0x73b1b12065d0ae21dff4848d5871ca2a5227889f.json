{"status":"1","message":"OK","result":[{"SourceCode":"// File: contracts\\Interfaces.sol\r\n\r\n// SPDX-License-Identifier: MIT\r\npragma solidity 0.6.12;\r\n\r\n\r\n\r\ninterface ICurveGauge {\r\n    function deposit(uint256) external;\r\n    function balanceOf(address) external view returns (uint256);\r\n    function withdraw(uint256) external;\r\n    function claim_rewards() external;\r\n    function reward_tokens(uint256) external view returns(address);//v2\r\n    function rewarded_token() external view returns(address);//v1\r\n    function lp_token() external view returns(address);\r\n}\r\n\r\ninterface ICurveVoteEscrow {\r\n    function create_lock(uint256, uint256) external;\r\n    function increase_amount(uint256) external;\r\n    function increase_unlock_time(uint256) external;\r\n    function withdraw() external;\r\n    function smart_wallet_checker() external view returns (address);\r\n}\r\n\r\ninterface IWalletChecker {\r\n    function check(address) external view returns (bool);\r\n}\r\n\r\ninterface IVoting{\r\n    function vote(uint256, bool, bool) external; //voteId, support, executeIfDecided\r\n    function getVote(uint256) external view returns(bool,bool,uint64,uint64,uint64,uint64,uint256,uint256,uint256,bytes memory); \r\n    function vote_for_gauge_weights(address,uint256) external;\r\n}\r\n\r\ninterface IMinter{\r\n    function mint(address) external;\r\n}\r\n\r\ninterface IRegistry{\r\n    function get_registry() external view returns(address);\r\n    function get_address(uint256 _id) external view returns(address);\r\n    function gauge_controller() external view returns(address);\r\n    function get_lp_token(address) external view returns(address);\r\n    function get_gauges(address) external view returns(address[10] memory,uint128[10] memory);\r\n}\r\n\r\ninterface IStaker{\r\n    function deposit(address, address) external;\r\n    function withdraw(address) external;\r\n    function withdraw(address, address, uint256) external;\r\n    function withdrawAll(address, address) external;\r\n    function createLock(uint256, uint256) external;\r\n    function increaseAmount(uint256) external;\r\n    function increaseTime(uint256) external;\r\n    function release() external;\r\n    function claimCrv(address) external returns (uint256);\r\n    function claimRewards(address) external;\r\n    function claimFees(address,address) external;\r\n    function setStashAccess(address, bool) external;\r\n    function vote(uint256,address,bool) external;\r\n    function voteGaugeWeight(address,uint256) external;\r\n    function balanceOfPool(address) external view returns (uint256);\r\n    function operator() external view returns (address);\r\n    function execute(address _to, uint256 _value, bytes calldata _data) external returns (bool, bytes memory);\r\n}\r\n\r\ninterface IRewards{\r\n    function stake(address, uint256) external;\r\n    function stakeFor(address, uint256) external;\r\n    function withdraw(address, uint256) external;\r\n    function exit(address) external;\r\n    function getReward(address) external;\r\n    function queueNewRewards(uint256) external;\r\n    function notifyRewardAmount(uint256) external;\r\n    function addExtraReward(address) external;\r\n    function stakingToken() external view returns (address);\r\n    function rewardToken() external view returns(address);\r\n    function earned(address account) external view returns (uint256);\r\n}\r\n\r\ninterface IStash{\r\n    function stashRewards() external returns (bool);\r\n    function processStash() external returns (bool);\r\n    function claimRewards() external returns (bool);\r\n    function initialize(uint256 _pid, address _operator, address _staker, address _gauge, address _rewardFactory) external;\r\n}\r\n\r\ninterface IFeeDistro{\r\n    function claim() external;\r\n    function token() external view returns(address);\r\n}\r\n\r\ninterface ITokenMinter{\r\n    function mint(address,uint256) external;\r\n    function burn(address,uint256) external;\r\n}\r\n\r\ninterface IDeposit{\r\n    function isShutdown() external view returns(bool);\r\n    function balanceOf(address _account) external view returns(uint256);\r\n    function totalSupply() external view returns(uint256);\r\n    function poolInfo(uint256) external view returns(address,address,address,address,address, bool);\r\n    function rewardClaimed(uint256,address,uint256) external;\r\n    function withdrawTo(uint256,uint256,address) external;\r\n    function claimRewards(uint256,address) external returns(bool);\r\n    function rewardArbitrator() external returns(address);\r\n    function setGaugeRedirect(uint256 _pid) external returns(bool);\r\n    function owner() external returns(address);\r\n}\r\n\r\ninterface ICrvDeposit{\r\n    function deposit(uint256, bool) external;\r\n    function lockIncentive() external view returns(uint256);\r\n}\r\n\r\ninterface IRewardFactory{\r\n    function setAccess(address,bool) external;\r\n    function CreateCrvRewards(uint256,address) external returns(address);\r\n    function CreateTokenRewards(address,address,address) external returns(address);\r\n    function activeRewardCount(address) external view returns(uint256);\r\n    function addActiveReward(address,uint256) external returns(bool);\r\n    function removeActiveReward(address,uint256) external returns(bool);\r\n}\r\n\r\ninterface IStashFactory{\r\n    function CreateStash(uint256,address,address,uint256) external returns(address);\r\n}\r\n\r\ninterface ITokenFactory{\r\n    function CreateDepositToken(address) external returns(address);\r\n}\r\n\r\ninterface IPools{\r\n    function addPool(address _lptoken, address _gauge, uint256 _stashVersion) external returns(bool);\r\n    function shutdownPool(uint256 _pid) external returns(bool);\r\n    function poolInfo(uint256) external view returns(address,address,address,address,address,bool);\r\n    function poolLength() external view returns (uint256);\r\n    function gaugeMap(address) external view returns(bool);\r\n    function setPoolManager(address _poolM) external;\r\n}\r\n\r\ninterface IVestedEscrow{\r\n    function fund(address[] calldata _recipient, uint256[] calldata _amount) external returns(bool);\r\n}\r\n\r\n// File: @openzeppelin\\contracts\\token\\ERC20\\IERC20.sol\r\n\r\n\r\npragma solidity >=0.6.0 <0.8.0;\r\n\r\n/**\r\n * @dev Interface of the ERC20 standard as defined in the EIP.\r\n */\r\ninterface IERC20 {\r\n    /**\r\n     * @dev Returns the amount of tokens in existence.\r\n     */\r\n    function totalSupply() external view returns (uint256);\r\n\r\n    /**\r\n     * @dev Returns the amount of tokens owned by `account`.\r\n     */\r\n    function balanceOf(address account) external view returns (uint256);\r\n\r\n    /**\r\n     * @dev Moves `amount` tokens from the caller's account to `recipient`.\r\n     *\r\n     * Returns a boolean value indicating whether the operation succeeded.\r\n     *\r\n     * Emits a {Transfer} event.\r\n     */\r\n    function transfer(address recipient, uint256 amount) external returns (bool);\r\n\r\n    /**\r\n     * @dev Returns the remaining number of tokens that `spender` will be\r\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\r\n     * zero by default.\r\n     *\r\n     * This value changes when {approve} or {transferFrom} are called.\r\n     */\r\n    function allowance(address owner, address spender) external view returns (uint256);\r\n\r\n    /**\r\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\r\n     *\r\n     * Returns a boolean value indicating whether the operation succeeded.\r\n     *\r\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\r\n     * that someone may use both the old and the new allowance by unfortunate\r\n     * transaction ordering. One possible solution to mitigate this race\r\n     * condition is to first reduce the spender's allowance to 0 and set the\r\n     * desired value afterwards:\r\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\r\n     *\r\n     * Emits an {Approval} event.\r\n     */\r\n    function approve(address spender, uint256 amount) external returns (bool);\r\n\r\n    /**\r\n     * @dev Moves `amount` tokens from `sender` to `recipient` using the\r\n     * allowance mechanism. `amount` is then deducted from the caller's\r\n     * allowance.\r\n     *\r\n     * Returns a boolean value indicating whether the operation succeeded.\r\n     *\r\n     * Emits a {Transfer} event.\r\n     */\r\n    function transferFrom(address sender, address recipient, uint256 amount) external returns (bool);\r\n\r\n    /**\r\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\r\n     * another (`to`).\r\n     *\r\n     * Note that `value` may be zero.\r\n     */\r\n    event Transfer(address indexed from, address indexed to, uint256 value);\r\n\r\n    /**\r\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\r\n     * a call to {approve}. `value` is the new allowance.\r\n     */\r\n    event Approval(address indexed owner, address indexed spender, uint256 value);\r\n}\r\n\r\n// File: @openzeppelin\\contracts\\math\\SafeMath.sol\r\n\r\npragma solidity >=0.6.0 <0.8.0;\r\n\r\n/**\r\n * @dev Wrappers over Solidity's arithmetic operations with added overflow\r\n * checks.\r\n *\r\n * Arithmetic operations in Solidity wrap on overflow. This can easily result\r\n * in bugs, because programmers usually assume that an overflow raises an\r\n * error, which is the standard behavior in high level programming languages.\r\n * `SafeMath` restores this intuition by reverting the transaction when an\r\n * operation overflows.\r\n *\r\n * Using this library instead of the unchecked operations eliminates an entire\r\n * class of bugs, so it's recommended to use it always.\r\n */\r\nlibrary SafeMath {\r\n    /**\r\n     * @dev Returns the addition of two unsigned integers, with an overflow flag.\r\n     *\r\n     * _Available since v3.4._\r\n     */\r\n    function tryAdd(uint256 a, uint256 b) internal pure returns (bool, uint256) {\r\n        uint256 c = a + b;\r\n        if (c < a) return (false, 0);\r\n        return (true, c);\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the substraction of two unsigned integers, with an overflow flag.\r\n     *\r\n     * _Available since v3.4._\r\n     */\r\n    function trySub(uint256 a, uint256 b) internal pure returns (bool, uint256) {\r\n        if (b > a) return (false, 0);\r\n        return (true, a - b);\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the multiplication of two unsigned integers, with an overflow flag.\r\n     *\r\n     * _Available since v3.4._\r\n     */\r\n    function tryMul(uint256 a, uint256 b) internal pure returns (bool, uint256) {\r\n        // Gas optimization: this is cheaper than requiring 'a' not being zero, but the\r\n        // benefit is lost if 'b' is also tested.\r\n        // See: https://github.com/OpenZeppelin/openzeppelin-contracts/pull/522\r\n        if (a == 0) return (true, 0);\r\n        uint256 c = a * b;\r\n        if (c / a != b) return (false, 0);\r\n        return (true, c);\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the division of two unsigned integers, with a division by zero flag.\r\n     *\r\n     * _Available since v3.4._\r\n     */\r\n    function tryDiv(uint256 a, uint256 b) internal pure returns (bool, uint256) {\r\n        if (b == 0) return (false, 0);\r\n        return (true, a / b);\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the remainder of dividing two unsigned integers, with a division by zero flag.\r\n     *\r\n     * _Available since v3.4._\r\n     */\r\n    function tryMod(uint256 a, uint256 b) internal pure returns (bool, uint256) {\r\n        if (b == 0) return (false, 0);\r\n        return (true, a % b);\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the addition of two unsigned integers, reverting on\r\n     * overflow.\r\n     *\r\n     * Counterpart to Solidity's `+` operator.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - Addition cannot overflow.\r\n     */\r\n    function add(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        uint256 c = a + b;\r\n        require(c >= a, \"SafeMath: addition overflow\");\r\n        return c;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the subtraction of two unsigned integers, reverting on\r\n     * overflow (when the result is negative).\r\n     *\r\n     * Counterpart to Solidity's `-` operator.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - Subtraction cannot overflow.\r\n     */\r\n    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        require(b <= a, \"SafeMath: subtraction overflow\");\r\n        return a - b;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the multiplication of two unsigned integers, reverting on\r\n     * overflow.\r\n     *\r\n     * Counterpart to Solidity's `*` operator.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - Multiplication cannot overflow.\r\n     */\r\n    function mul(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        if (a == 0) return 0;\r\n        uint256 c = a * b;\r\n        require(c / a == b, \"SafeMath: multiplication overflow\");\r\n        return c;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the integer division of two unsigned integers, reverting on\r\n     * division by zero. The result is rounded towards zero.\r\n     *\r\n     * Counterpart to Solidity's `/` operator. Note: this function uses a\r\n     * `revert` opcode (which leaves remaining gas untouched) while Solidity\r\n     * uses an invalid opcode to revert (consuming all remaining gas).\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - The divisor cannot be zero.\r\n     */\r\n    function div(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        require(b > 0, \"SafeMath: division by zero\");\r\n        return a / b;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\r\n     * reverting when dividing by zero.\r\n     *\r\n     * Counterpart to Solidity's `%` operator. This function uses a `revert`\r\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\r\n     * invalid opcode to revert (consuming all remaining gas).\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - The divisor cannot be zero.\r\n     */\r\n    function mod(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        require(b > 0, \"SafeMath: modulo by zero\");\r\n        return a % b;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the subtraction of two unsigned integers, reverting with custom message on\r\n     * overflow (when the result is negative).\r\n     *\r\n     * CAUTION: This function is deprecated because it requires allocating memory for the error\r\n     * message unnecessarily. For custom revert reasons use {trySub}.\r\n     *\r\n     * Counterpart to Solidity's `-` operator.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - Subtraction cannot overflow.\r\n     */\r\n    function sub(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\r\n        require(b <= a, errorMessage);\r\n        return a - b;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the integer division of two unsigned integers, reverting with custom message on\r\n     * division by zero. The result is rounded towards zero.\r\n     *\r\n     * CAUTION: This function is deprecated because it requires allocating memory for the error\r\n     * message unnecessarily. For custom revert reasons use {tryDiv}.\r\n     *\r\n     * Counterpart to Solidity's `/` operator. Note: this function uses a\r\n     * `revert` opcode (which leaves remaining gas untouched) while Solidity\r\n     * uses an invalid opcode to revert (consuming all remaining gas).\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - The divisor cannot be zero.\r\n     */\r\n    function div(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\r\n        require(b > 0, errorMessage);\r\n        return a / b;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\r\n     * reverting with custom message when dividing by zero.\r\n     *\r\n     * CAUTION: This function is deprecated because it requires allocating memory for the error\r\n     * message unnecessarily. For custom revert reasons use {tryMod}.\r\n     *\r\n     * Counterpart to Solidity's `%` operator. This function uses a `revert`\r\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\r\n     * invalid opcode to revert (consuming all remaining gas).\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - The divisor cannot be zero.\r\n     */\r\n    function mod(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\r\n        require(b > 0, errorMessage);\r\n        return a % b;\r\n    }\r\n}\r\n\r\n// File: contracts\\PoolManagerShutdownProxy.sol\r\n\r\npragma solidity 0.6.12;\r\n\r\n\r\n/*\r\nImmutable pool manager proxy to enforce that when a pool is shutdown, the proper number\r\nof lp tokens are returned to the booster contract for withdrawal\r\n*/\r\ncontract PoolManagerShutdownProxy{\r\n    using SafeMath for uint256;\r\n\r\n    address public constant pools = address(0x5F47010F230cE1568BeA53a06eBAF528D05c5c1B);\r\n    address public constant booster = address(0xF403C135812408BFbE8713b5A23a04b3D48AAE31);\r\n    address public owner;\r\n    address public operator;\r\n\r\n    constructor() public {\r\n        //default to multisig\r\n        owner = address(0xa3C5A1e09150B75ff251c1a7815A07182c3de2FB);\r\n        operator = msg.sender;\r\n    }\r\n\r\n    modifier onlyOwner() {\r\n        require(owner == msg.sender, \"!owner\");\r\n        _;\r\n    }\r\n\r\n    modifier onlyOperator() {\r\n        require(operator == msg.sender, \"!op\");\r\n        _;\r\n    }\r\n\r\n    //set owner - only OWNER\r\n    function setOwner(address _owner) external onlyOwner{\r\n        owner = _owner;\r\n    }\r\n\r\n    //set operator - only OWNER\r\n    function setOperator(address _operator) external onlyOwner{\r\n        operator = _operator;\r\n    }\r\n\r\n    // sealed to be immutable\r\n    // function revertControl() external{\r\n    // }\r\n\r\n    //shutdown a pool - only OPERATOR\r\n    function shutdownPool(uint256 _pid) external onlyOperator returns(bool){\r\n        //get pool info\r\n        (address lptoken, address depositToken,,,,bool isshutdown) = IPools(booster).poolInfo(_pid);\r\n        require(!isshutdown, \"already shutdown\");\r\n\r\n        //shutdown pool and get before and after amounts\r\n        uint256 beforeBalance = IERC20(lptoken).balanceOf(booster);\r\n        IPools(pools).shutdownPool(_pid);\r\n        uint256 afterBalance = IERC20(lptoken).balanceOf(booster);\r\n\r\n        //check that proper amount of tokens were withdrawn(will also fail if already shutdown)\r\n        require( afterBalance.sub(beforeBalance) >= IERC20(depositToken).totalSupply(), \"supply mismatch\");\r\n\r\n        return true;\r\n    }\r\n\r\n    //add a new pool - only OPERATOR\r\n    function addPool(address _lptoken, address _gauge, uint256 _stashVersion) external onlyOperator returns(bool){\r\n        return IPools(pools).addPool(_lptoken,_gauge,_stashVersion);\r\n    }\r\n}","ABI":"[{\"inputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_lptoken\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_gauge\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_stashVersion\",\"type\":\"uint256\"}],\"name\":\"addPool\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"booster\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"operator\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"pools\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_operator\",\"type\":\"address\"}],\"name\":\"setOperator\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_owner\",\"type\":\"address\"}],\"name\":\"setOwner\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_pid\",\"type\":\"uint256\"}],\"name\":\"shutdownPool\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}]","ContractName":"PoolManagerShutdownProxy","CompilerVersion":"v0.6.12+commit.27d51765","OptimizationUsed":"1","Runs":"200","ConstructorArguments":"","EVMVersion":"Default","Library":"","LicenseType":"MIT","Proxy":"0","Implementation":"","SwarmSource":"ipfs://90f76732009b8a6e541379f764481ad12e413d7d7d4b3d558b773779780e6cf3"}]}