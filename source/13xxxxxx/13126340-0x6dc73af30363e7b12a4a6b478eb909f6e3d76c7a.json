{"status":"1","message":"OK","result":[{"SourceCode":"// File: @openzeppelin/contracts/proxy/Clones.sol\r\n\r\n// SPDX-License-Identifier: MIT\r\n\r\npragma solidity >=0.6.0 <0.8.0;\r\n\r\n/**\r\n * @dev https://eips.ethereum.org/EIPS/eip-1167[EIP 1167] is a standard for\r\n * deploying minimal proxy contracts, also known as \"clones\".\r\n *\r\n * > To simply and cheaply clone contract functionality in an immutable way, this standard specifies\r\n * > a minimal bytecode implementation that delegates all calls to a known, fixed address.\r\n *\r\n * The library includes functions to deploy a proxy using either `create` (traditional deployment) or `create2`\r\n * (salted deterministic deployment). It also includes functions to predict the addresses of clones deployed using the\r\n * deterministic method.\r\n *\r\n * _Available since v3.4._\r\n */\r\nlibrary Clones {\r\n    /**\r\n     * @dev Deploys and returns the address of a clone that mimics the behaviour of `master`.\r\n     *\r\n     * This function uses the create opcode, which should never revert.\r\n     */\r\n    function clone(address master) internal returns (address instance) {\r\n        // solhint-disable-next-line no-inline-assembly\r\n        assembly {\r\n            let ptr := mload(0x40)\r\n            mstore(ptr, 0x3d602d80600a3d3981f3363d3d373d3d3d363d73000000000000000000000000)\r\n            mstore(add(ptr, 0x14), shl(0x60, master))\r\n            mstore(add(ptr, 0x28), 0x5af43d82803e903d91602b57fd5bf30000000000000000000000000000000000)\r\n            instance := create(0, ptr, 0x37)\r\n        }\r\n        require(instance != address(0), \"ERC1167: create failed\");\r\n    }\r\n\r\n    /**\r\n     * @dev Deploys and returns the address of a clone that mimics the behaviour of `master`.\r\n     *\r\n     * This function uses the create2 opcode and a `salt` to deterministically deploy\r\n     * the clone. Using the same `master` and `salt` multiple time will revert, since\r\n     * the clones cannot be deployed twice at the same address.\r\n     */\r\n    function cloneDeterministic(address master, bytes32 salt) internal returns (address instance) {\r\n        // solhint-disable-next-line no-inline-assembly\r\n        assembly {\r\n            let ptr := mload(0x40)\r\n            mstore(ptr, 0x3d602d80600a3d3981f3363d3d373d3d3d363d73000000000000000000000000)\r\n            mstore(add(ptr, 0x14), shl(0x60, master))\r\n            mstore(add(ptr, 0x28), 0x5af43d82803e903d91602b57fd5bf30000000000000000000000000000000000)\r\n            instance := create2(0, ptr, 0x37, salt)\r\n        }\r\n        require(instance != address(0), \"ERC1167: create2 failed\");\r\n    }\r\n\r\n    /**\r\n     * @dev Computes the address of a clone deployed using {Clones-cloneDeterministic}.\r\n     */\r\n    function predictDeterministicAddress(address master, bytes32 salt, address deployer) internal pure returns (address predicted) {\r\n        // solhint-disable-next-line no-inline-assembly\r\n        assembly {\r\n            let ptr := mload(0x40)\r\n            mstore(ptr, 0x3d602d80600a3d3981f3363d3d373d3d3d363d73000000000000000000000000)\r\n            mstore(add(ptr, 0x14), shl(0x60, master))\r\n            mstore(add(ptr, 0x28), 0x5af43d82803e903d91602b57fd5bf3ff00000000000000000000000000000000)\r\n            mstore(add(ptr, 0x38), shl(0x60, deployer))\r\n            mstore(add(ptr, 0x4c), salt)\r\n            mstore(add(ptr, 0x6c), keccak256(ptr, 0x37))\r\n            predicted := keccak256(add(ptr, 0x37), 0x55)\r\n        }\r\n    }\r\n\r\n    /**\r\n     * @dev Computes the address of a clone deployed using {Clones-cloneDeterministic}.\r\n     */\r\n    function predictDeterministicAddress(address master, bytes32 salt) internal view returns (address predicted) {\r\n        return predictDeterministicAddress(master, salt, address(this));\r\n    }\r\n}\r\n\r\n// File: contracts/mocks/clone/CloneTest2.sol\r\n\r\n\r\npragma solidity 0.6.12;\r\n\r\n\r\ninterface ITestCaller {\r\n    function setValue(uint256 _v) external;\r\n\r\n    function sender() external view returns (address);\r\n\r\n    function value() external view returns (uint256);\r\n}\r\n\r\ncontract Target {\r\n    address public sender;\r\n    uint256 public value;\r\n\r\n    function setValue(uint256 _v) public {\r\n        value = _v;\r\n        sender = msg.sender;\r\n    }\r\n}\r\n\r\ncontract CloneTest2 {\r\n    address public newClone;\r\n    \r\n    event GasNumber(string name,uint256 gasNumber,uint256 txPrice);\r\n    event GasPrice(string name,uint256 gasPrice,uint256 txPrice);\r\n\r\n    function cloneContract(address _v) public {\r\n        uint256 gasStart = gasleft();\r\n\r\n        newClone = Clones.clone(_v);\r\n\r\n        uint256 gasSpent = (gasStart - gasleft()) * (tx.gasprice);\r\n        uint256 gasNumber = (gasStart - gasleft());\r\n        \r\n        emit GasPrice(\"cloneContract\", gasSpent,tx.gasprice);\r\n        emit GasNumber(\"cloneContract\", gasNumber,tx.gasprice);\r\n    }\r\n\r\n    function newContract() public {\r\n        uint256 gasStart = gasleft();\r\n\r\n        newClone = address(new Target());\r\n\r\n        uint256 gasSpent = (gasStart - gasleft()) * (tx.gasprice);\r\n        uint256 gasNumber = (gasStart - gasleft());\r\n        \r\n        emit GasPrice(\"newContract\", gasSpent,tx.gasprice);\r\n        emit GasNumber(\"newContract\", gasNumber,tx.gasprice);\r\n    }\r\n    \r\n    function setNewCloneNull() public {\r\n        uint256 gasStart = gasleft();\r\n\r\n        newClone = address(new Target());\r\n\r\n        uint256 gasSpent = (gasStart - gasleft()) * (tx.gasprice);\r\n        uint256 gasNumber = (gasStart - gasleft());\r\n        \r\n        newClone = address(0);\r\n        \r\n        emit GasPrice(\"setNewCloneNull\", gasSpent,tx.gasprice);\r\n        emit GasNumber(\"setNewCloneNull\", gasNumber,tx.gasprice);\r\n    }\r\n}","ABI":"[{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"string\",\"name\":\"name\",\"type\":\"string\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"gasNumber\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"txPrice\",\"type\":\"uint256\"}],\"name\":\"GasNumber\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"string\",\"name\":\"name\",\"type\":\"string\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"gasPrice\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"txPrice\",\"type\":\"uint256\"}],\"name\":\"GasPrice\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_v\",\"type\":\"address\"}],\"name\":\"cloneContract\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"newClone\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"newContract\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"setNewCloneNull\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}]","ContractName":"CloneTest2","CompilerVersion":"v0.6.12+commit.27d51765","OptimizationUsed":"1","Runs":"200","ConstructorArguments":"","EVMVersion":"Default","Library":"","LicenseType":"None","Proxy":"0","Implementation":"","SwarmSource":"ipfs://54e2ec09b19acb7a1f2307db7e565e94d28f26350c8489142d1ae6ab641f8915"}]}