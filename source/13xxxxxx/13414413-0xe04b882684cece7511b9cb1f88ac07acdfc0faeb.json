{"status":"1","message":"OK","result":[{"SourceCode":"{{\r\n  \"language\": \"Solidity\",\r\n  \"sources\": {\r\n    \"contracts/NFTMarketplace.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: Apache-2.0\\n\\npragma solidity 0.8.9; // code below expects that integer overflows will revert\\n\\nimport \\\"./Vendor/openzeppelin-contracts-3dadd40034961d5ca75fa209a4188b01d7129501/token/ERC721/IERC721.sol\\\";\\nimport \\\"./Vendor/openzeppelin-contracts-3dadd40034961d5ca75fa209a4188b01d7129501/access/Ownable.sol\\\";\\nimport \\\"./Utilities/Withdrawable.sol\\\";\\n\\n/// @title  Area marketplace contract, 🌐 the earth on the blockchain, 📌 geolocation NFTs\\n/// @notice This decentralized marketplace matches bids and offers for one underlying ERC-721 contract. With much\\n///         respect to CryptoPunks. Your offers & bids on this marketplace will close only if matched on this\\n///         marketplace. If you trade anywhere else, consider to revoke your offers & bids here.\\n/// @author William Entriken\\ncontract NFTMarketplace is Ownable, Withdrawable {\\n    struct TokenMarket {\\n        address offeror;       // The token owner that is selling\\n        uint256 minimumOffer;  // The amount (in Wei) that is the minimum to accept; or zero to indicate no offer\\n        address invitedBidder; // The exclusive invited buyer for this offer; or the zero address if not exclusive\\n\\n        address bidder;        // The party that committed Ether to bid\\n        uint256 lockedBid;     // The amount (in Wei) that the bidder has committed\\n    }\\n\\n    /// @notice The underlying asset contract\\n    IERC721 immutable public tokenContract;\\n\\n    /// @notice The transaction fee (in basis points) as a portion of the sale price\\n    uint256 public feePortion;\\n\\n    /// @notice The best bids and offers for any token\\n    mapping(uint256 => TokenMarket) public tokenMarkets;\\n\\n    /// @notice A token is offered for sale by owner; or such an offer is revoked\\n    /// @param  tokenId       which token\\n    /// @param  offeror       the token owner that is selling\\n    /// @param  minimumOffer  the amount (in Wei) that is the minimum to accept; or zero to indicate no offer\\n    /// @param  invitedBidder the exclusive invited buyer for this offer; or the zero address if not exclusive\\n    event OfferUpdated(uint256 indexed tokenId, address offeror, uint256 minimumOffer, address invitedBidder);\\n\\n    /// @notice A new highest bid is committed for a token; or such a bid is revoked\\n    /// @param  tokenId   which token\\n    /// @param  bidder    the party that committed Ether to bid\\n    /// @param  lockedBid the amount (in Wei) that the bidder has committed\\n    event BidUpdated(uint256 indexed tokenId, address bidder, uint256 lockedBid);\\n\\n    /// @notice A token is traded on the marketplace (this implies any offer for the token is revoked)\\n    /// @param  tokenId which token\\n    /// @param  value   the sale price\\n    /// @param  offeror the party that previously owned the token\\n    /// @param  bidder  the party that now owns the token\\n    event Traded(uint256 indexed tokenId, uint256 value, address indexed offeror, address indexed bidder);\\n\\n    /// @param initialFeePortion         the transaction fee (in basis points) as a portion of the sale price\\n    /// @param immutableNftTokenContract the underlying NFT asset\\n    constructor(uint256 initialFeePortion, IERC721 immutableNftTokenContract) {\\n        feePortion = initialFeePortion;\\n        tokenContract = immutableNftTokenContract;\\n    }\\n\\n    /// @notice An offeror may revoke their offer\\n    /// @dev    It is possible that a token will change owners without this contract being notified (e.g. an ERC-721\\n    ///         \\\"gift\\\" transaction). In this case the old owner who made an offer needs, and gets, a way to revoke that.\\n    ///         There is no reason why the new owner of a token would need to revoke the prior owner's ineffectual\\n    ///         offer. But we provide this option anyway because we recognize the token market to be the prerogative of\\n    ///         that token's owner.\\n    /// @param  tokenId which token\\n    function revokeOffer(uint256 tokenId) external {\\n        require(\\n            (msg.sender == tokenMarkets[tokenId].offeror) ||\\n            (msg.sender == tokenContract.ownerOf(tokenId)),\\n            \\\"Only the offeror or token owner may revoke an offer\\\"\\n        );\\n        _setOffer(tokenId, address(0), 0, address(0));\\n    }\\n\\n    /// @notice Any token owner may offer it for sale\\n    /// @dev    If a bid comes which is higher than the offer then the sale price will be this higher amount.\\n    /// @param  tokenId       which token\\n    /// @param  minimumOffer  the amount (in Wei) that is the minimum to accept\\n    /// @param  invitedBidder the exclusive invited buyer for this offer; or the zero address if not exclusive\\n    function offer(uint256 tokenId, uint256 minimumOffer, address invitedBidder) external {\\n        require(msg.sender == tokenContract.ownerOf(tokenId), \\\"Only the token owner can offer\\\");\\n        require(minimumOffer > 0, \\\"Ask for more\\\");\\n        address bidder = tokenMarkets[tokenId].bidder;\\n        uint256 lockedBid = tokenMarkets[tokenId].lockedBid;\\n        bool isInvited = invitedBidder == address(0) || invitedBidder == bidder;\\n\\n        // Can we match this offer to an existing bid?\\n        if (lockedBid >= minimumOffer && isInvited) {\\n            _doTrade(tokenId, lockedBid, msg.sender, bidder);\\n            _setBid(tokenId, address(0), 0);\\n        } else {\\n            _setOffer(tokenId, msg.sender, minimumOffer, invitedBidder);\\n        }\\n    }\\n\\n    /// @notice An bidder may revoke their bid\\n    /// @param  tokenId which token\\n    function revokeBid(uint256 tokenId) external {\\n        require(msg.sender == tokenMarkets[tokenId].bidder, \\\"Only the bidder may revoke their bid\\\");\\n        _increasePendingWithdrawal(msg.sender, tokenMarkets[tokenId].lockedBid);\\n        _setBid(tokenId, address(0), 0);\\n    }\\n\\n    /// @notice Anyone may commit more than the existing bid for a token.\\n    /// @dev    When reading the below, note there are three important contexts to consider:\\n    ///          1. There is no existing bidder\\n    ///          2. The message caller is the highest bidder\\n    ///          3. Somebody else is the highest bidder\\n    ///         when you submit this transaction and when it settles.\\n    /// @param  tokenId which token\\n    function bid(uint256 tokenId) external payable {\\n        uint256 existingLockedBid = tokenMarkets[tokenId].lockedBid;\\n        require(msg.value > existingLockedBid, \\\"Bid too low\\\");\\n        address existingBidder = tokenMarkets[tokenId].bidder;\\n        uint256 minimumOffer = tokenMarkets[tokenId].minimumOffer;\\n        address invitedBidder = tokenMarkets[tokenId].invitedBidder;\\n        address offeror = tokenMarkets[tokenId].offeror;\\n        bool isInvited = invitedBidder == address(0) || invitedBidder == msg.sender;\\n\\n        // Can we match this bid to an existing offer?\\n        if (minimumOffer > 0 &&\\n            msg.value >= minimumOffer &&\\n            isInvited &&\\n            offeror == tokenContract.ownerOf(tokenId)) {\\n            _doTrade(tokenId, msg.value, offeror, msg.sender);\\n            if (existingBidder == msg.sender) {\\n                // This is context 2\\n                _increasePendingWithdrawal(msg.sender, existingLockedBid);\\n                _setBid(tokenId, address(0), 0);\\n            }\\n        } else {\\n            // Wind up old bid, if any\\n            if (existingLockedBid > 0) {\\n                // This is context 2 or 3\\n                _increasePendingWithdrawal(existingBidder, existingLockedBid);\\n            }\\n            // Enter new bid\\n            _setBid(tokenId, msg.sender, msg.value);\\n        }\\n    }\\n\\n    /// @notice Anyone may add more value to their existing bid\\n    /// @param  tokenId which token\\n    function bidIncrease(uint256 tokenId) external payable {\\n        require(msg.value > 0, \\\"Must send value to increase bid\\\");\\n        require(msg.sender == tokenMarkets[tokenId].bidder, \\\"You are not current bidder\\\");\\n        uint256 newBidAmount = tokenMarkets[tokenId].lockedBid + msg.value;\\n        uint256 minimumOffer = tokenMarkets[tokenId].minimumOffer;\\n        address invitedBidder = tokenMarkets[tokenId].invitedBidder;\\n        address offeror = tokenMarkets[tokenId].offeror;\\n        bool isInvited = invitedBidder == address(0) || invitedBidder == msg.sender;\\n\\n        // Can we match this bid to an existing offer?\\n        if (minimumOffer > 0 &&\\n            newBidAmount >= minimumOffer &&\\n            isInvited &&\\n            offeror == tokenContract.ownerOf(tokenId)) {\\n            _doTrade(tokenId, newBidAmount, offeror, msg.sender);\\n            _setBid(tokenId, address(0), 0);\\n        } else {\\n            tokenMarkets[tokenId].lockedBid = newBidAmount;\\n            _setBid(tokenId, msg.sender, newBidAmount);\\n        }\\n    }\\n\\n    /// @notice The owner can set the fee portion\\n    /// @param  newFeePortion the transaction fee (in basis points) as a portion of the sale price\\n    function setFeePortion(uint256 newFeePortion) external onlyOwner {\\n        require(newFeePortion <= 1000, \\\"Exceeded maximum fee portion of 10%\\\");\\n        feePortion = newFeePortion;\\n    }\\n\\n    /// @dev Collect fee for owner & offeror and transfer underlying asset. The Traded event emits before the\\n    ///      ERC721.Transfer event so that somebody observing the events and seeing the latter will recognize the\\n    ///      context of the former. The bid is NOT cleaned up generally in this function because a circumstance exists\\n    ///      where an existing bid persists after a trade. See \\\"context 3\\\" above.\\n    function _doTrade(uint256 tokenId, uint256 value, address offeror, address bidder) private {\\n        // Divvy up proceeds\\n        uint256 feeAmount = value * feePortion / 10000; // reverts on overflow\\n        _increasePendingWithdrawal(Ownable.owner(), feeAmount);\\n        _increasePendingWithdrawal(offeror, value - feeAmount);\\n\\n        emit Traded(tokenId, value, offeror, bidder);\\n        tokenMarkets[tokenId].offeror = address(0);\\n        tokenMarkets[tokenId].minimumOffer = 0;\\n        tokenMarkets[tokenId].invitedBidder = address(0);\\n        tokenContract.transferFrom(offeror, bidder, tokenId);\\n    }\\n\\n    /// @dev Set and emit new offer\\n    function _setOffer(uint256 tokenId, address offeror, uint256 minimumOffer, address invitedBidder) private {\\n        tokenMarkets[tokenId].offeror = offeror;\\n        tokenMarkets[tokenId].minimumOffer = minimumOffer;\\n        tokenMarkets[tokenId].invitedBidder = invitedBidder;\\n        emit OfferUpdated(tokenId, offeror, minimumOffer, invitedBidder);\\n    }\\n\\n    /// @dev Set and emit new bid\\n    function _setBid(uint256 tokenId, address bidder, uint256 lockedBid) private {\\n        tokenMarkets[tokenId].bidder = bidder;\\n        tokenMarkets[tokenId].lockedBid = lockedBid;\\n        emit BidUpdated(tokenId, bidder, lockedBid);\\n    }\\n}\"\r\n    },\r\n    \"contracts/Utilities/Withdrawable.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: Apache-2.0\\n\\npragma solidity 0.8.9; // code below expects that integer overflows will revert\\n\\n/// @title  Part of Area, 🌐 the earth on the blockchain, 📌 geolocation NFTs\\n/// @notice This Ether accounting system stores value inside this contract and makes it available for beneficiaries to\\n///         withdraw.\\n/// @author William Entriken\\ncontract Withdrawable {\\n    /// @notice Ether waiting for beneficiaries to withdraw\\n    mapping(address => uint256) private _pendingWithdrawals;\\n\\n    /// @notice Amount of Ether waiting for beneficiaries to withdraw is updated\\n    /// @param  beneficiary which beneficiary can withdraw\\n    /// @param  amount      amount (in Wei) that is pending withdrawal\\n    event PendingWithdrawal(address beneficiary, uint256 amount);\\n\\n    /// @notice Beneficiaries can withdraw any Ether held for them\\n    function withdraw() external {\\n        uint256 amountToWithdraw = _pendingWithdrawals[msg.sender];\\n        // Remember to zero the pending refund before sending to prevent re-entrancy attacks\\n        delete _pendingWithdrawals[msg.sender];\\n        payable(msg.sender).transfer(amountToWithdraw);\\n        emit PendingWithdrawal(msg.sender, 0);\\n    }\\n\\n    /// @notice Gets amount of Ether waiting for beneficiary to withdraw\\n    /// @param  beneficiary which beneficiary is queried\\n    /// @return amount      how much the beneficiary can withdraw\\n    function pendingWithdrawal(address beneficiary) public view returns (uint256 amount) {\\n        return _pendingWithdrawals[beneficiary];\\n    }\\n\\n    /// @notice Amount of Ether waiting for beneficiaries to withdraw is increased\\n    /// @param  beneficiary which beneficiary can withdraw\\n    /// @param  amount      amount (in Wei) that is pending withdrawal\\n    function _increasePendingWithdrawal(address beneficiary, uint256 amount) internal {\\n        _pendingWithdrawals[beneficiary] += amount;\\n        emit PendingWithdrawal(beneficiary, _pendingWithdrawals[beneficiary]);\\n    }\\n}\"\r\n    },\r\n    \"contracts/Vendor/openzeppelin-contracts-3dadd40034961d5ca75fa209a4188b01d7129501/access/Ownable.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../utils/Context.sol\\\";\\n\\n/**\\n * @dev Contract module which provides a basic access control mechanism, where\\n * there is an account (an owner) that can be granted exclusive access to\\n * specific functions.\\n *\\n * By default, the owner account will be the one that deploys the contract. This\\n * can later be changed with {transferOwnership}.\\n *\\n * This module is used through inheritance. It will make available the modifier\\n * `onlyOwner`, which can be applied to your functions to restrict their use to\\n * the owner.\\n */\\nabstract contract Ownable is Context {\\n    address private _owner;\\n\\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\\n\\n    /**\\n     * @dev Initializes the contract setting the deployer as the initial owner.\\n     */\\n    constructor() {\\n        _setOwner(_msgSender());\\n    }\\n\\n    /**\\n     * @dev Returns the address of the current owner.\\n     */\\n    function owner() public view virtual returns (address) {\\n        return _owner;\\n    }\\n\\n    /**\\n     * @dev Throws if called by any account other than the owner.\\n     */\\n    modifier onlyOwner() {\\n        require(owner() == _msgSender(), \\\"Ownable: caller is not the owner\\\");\\n        _;\\n    }\\n\\n    /**\\n     * @dev Leaves the contract without owner. It will not be possible to call\\n     * `onlyOwner` functions anymore. Can only be called by the current owner.\\n     *\\n     * NOTE: Renouncing ownership will leave the contract without an owner,\\n     * thereby removing any functionality that is only available to the owner.\\n     */\\n    function renounceOwnership() public virtual onlyOwner {\\n        _setOwner(address(0));\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Can only be called by the current owner.\\n     */\\n    function transferOwnership(address newOwner) public virtual onlyOwner {\\n        require(newOwner != address(0), \\\"Ownable: new owner is the zero address\\\");\\n        _setOwner(newOwner);\\n    }\\n\\n    function _setOwner(address newOwner) private {\\n        address oldOwner = _owner;\\n        _owner = newOwner;\\n        emit OwnershipTransferred(oldOwner, newOwner);\\n    }\\n}\\n\"\r\n    },\r\n    \"contracts/Vendor/openzeppelin-contracts-3dadd40034961d5ca75fa209a4188b01d7129501/token/ERC721/IERC721.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../../utils/introspection/IERC165.sol\\\";\\n\\n/**\\n * @dev Required interface of an ERC721 compliant contract.\\n */\\ninterface IERC721 is IERC165 {\\n    /**\\n     * @dev Emitted when `tokenId` token is transferred from `from` to `to`.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 indexed tokenId);\\n\\n    /**\\n     * @dev Emitted when `owner` enables `approved` to manage the `tokenId` token.\\n     */\\n    event Approval(address indexed owner, address indexed approved, uint256 indexed tokenId);\\n\\n    /**\\n     * @dev Emitted when `owner` enables or disables (`approved`) `operator` to manage all of its assets.\\n     */\\n    event ApprovalForAll(address indexed owner, address indexed operator, bool approved);\\n\\n    /**\\n     * @dev Returns the number of tokens in ``owner``'s account.\\n     */\\n    function balanceOf(address owner) external view returns (uint256 balance);\\n\\n    /**\\n     * @dev Returns the owner of the `tokenId` token.\\n     *\\n     * Requirements:\\n     *\\n     * - `tokenId` must exist.\\n     */\\n    function ownerOf(uint256 tokenId) external view returns (address owner);\\n\\n    /**\\n     * @dev Safely transfers `tokenId` token from `from` to `to`, checking first that contract recipients\\n     * are aware of the ERC721 protocol to prevent tokens from being forever locked.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` cannot be the zero address.\\n     * - `to` cannot be the zero address.\\n     * - `tokenId` token must exist and be owned by `from`.\\n     * - If the caller is not `from`, it must be have been allowed to move this token by either {approve} or {setApprovalForAll}.\\n     * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function safeTransferFrom(\\n        address from,\\n        address to,\\n        uint256 tokenId\\n    ) external;\\n\\n    /**\\n     * @dev Transfers `tokenId` token from `from` to `to`.\\n     *\\n     * WARNING: Usage of this method is discouraged, use {safeTransferFrom} whenever possible.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` cannot be the zero address.\\n     * - `to` cannot be the zero address.\\n     * - `tokenId` token must be owned by `from`.\\n     * - If the caller is not `from`, it must be approved to move this token by either {approve} or {setApprovalForAll}.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(\\n        address from,\\n        address to,\\n        uint256 tokenId\\n    ) external;\\n\\n    /**\\n     * @dev Gives permission to `to` to transfer `tokenId` token to another account.\\n     * The approval is cleared when the token is transferred.\\n     *\\n     * Only a single account can be approved at a time, so approving the zero address clears previous approvals.\\n     *\\n     * Requirements:\\n     *\\n     * - The caller must own the token or be an approved operator.\\n     * - `tokenId` must exist.\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address to, uint256 tokenId) external;\\n\\n    /**\\n     * @dev Returns the account approved for `tokenId` token.\\n     *\\n     * Requirements:\\n     *\\n     * - `tokenId` must exist.\\n     */\\n    function getApproved(uint256 tokenId) external view returns (address operator);\\n\\n    /**\\n     * @dev Approve or remove `operator` as an operator for the caller.\\n     * Operators can call {transferFrom} or {safeTransferFrom} for any token owned by the caller.\\n     *\\n     * Requirements:\\n     *\\n     * - The `operator` cannot be the caller.\\n     *\\n     * Emits an {ApprovalForAll} event.\\n     */\\n    function setApprovalForAll(address operator, bool _approved) external;\\n\\n    /**\\n     * @dev Returns if the `operator` is allowed to manage all of the assets of `owner`.\\n     *\\n     * See {setApprovalForAll}\\n     */\\n    function isApprovedForAll(address owner, address operator) external view returns (bool);\\n\\n    /**\\n     * @dev Safely transfers `tokenId` token from `from` to `to`.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` cannot be the zero address.\\n     * - `to` cannot be the zero address.\\n     * - `tokenId` token must exist and be owned by `from`.\\n     * - If the caller is not `from`, it must be approved to move this token by either {approve} or {setApprovalForAll}.\\n     * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function safeTransferFrom(\\n        address from,\\n        address to,\\n        uint256 tokenId,\\n        bytes calldata data\\n    ) external;\\n}\\n\"\r\n    },\r\n    \"contracts/Vendor/openzeppelin-contracts-3dadd40034961d5ca75fa209a4188b01d7129501/utils/introspection/IERC165.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC165 standard, as defined in the\\n * https://eips.ethereum.org/EIPS/eip-165[EIP].\\n *\\n * Implementers can declare support of contract interfaces, which can then be\\n * queried by others ({ERC165Checker}).\\n *\\n * For an implementation, see {ERC165}.\\n */\\ninterface IERC165 {\\n    /**\\n     * @dev Returns true if this contract implements the interface defined by\\n     * `interfaceId`. See the corresponding\\n     * https://eips.ethereum.org/EIPS/eip-165#how-interfaces-are-identified[EIP section]\\n     * to learn more about how these ids are created.\\n     *\\n     * This function call must use less than 30 000 gas.\\n     */\\n    function supportsInterface(bytes4 interfaceId) external view returns (bool);\\n}\\n\"\r\n    },\r\n    \"contracts/Vendor/openzeppelin-contracts-3dadd40034961d5ca75fa209a4188b01d7129501/utils/Context.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Provides information about the current execution context, including the\\n * sender of the transaction and its data. While these are generally available\\n * via msg.sender and msg.data, they should not be accessed in such a direct\\n * manner, since when dealing with meta-transactions the account sending and\\n * paying for execution may not be the actual sender (as far as an application\\n * is concerned).\\n *\\n * This contract is only required for intermediate, library-like contracts.\\n */\\nabstract contract Context {\\n    function _msgSender() internal view virtual returns (address) {\\n        return msg.sender;\\n    }\\n\\n    function _msgData() internal view virtual returns (bytes calldata) {\\n        return msg.data;\\n    }\\n}\\n\"\r\n    }\r\n  },\r\n  \"settings\": {\r\n    \"optimizer\": {\r\n      \"enabled\": true,\r\n      \"runs\": 200\r\n    },\r\n    \"outputSelection\": {\r\n      \"*\": {\r\n        \"*\": [\r\n          \"evm.bytecode\",\r\n          \"evm.deployedBytecode\",\r\n          \"devdoc\",\r\n          \"userdoc\",\r\n          \"metadata\",\r\n          \"abi\"\r\n        ]\r\n      }\r\n    }\r\n  }\r\n}}","ABI":"[{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"initialFeePortion\",\"type\":\"uint256\"},{\"internalType\":\"contract IERC721\",\"name\":\"immutableNftTokenContract\",\"type\":\"address\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"bidder\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"lockedBid\",\"type\":\"uint256\"}],\"name\":\"BidUpdated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"offeror\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"minimumOffer\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"invitedBidder\",\"type\":\"address\"}],\"name\":\"OfferUpdated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"beneficiary\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"PendingWithdrawal\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"offeror\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"bidder\",\"type\":\"address\"}],\"name\":\"Traded\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"bid\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"bidIncrease\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"feePortion\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"minimumOffer\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"invitedBidder\",\"type\":\"address\"}],\"name\":\"offer\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"beneficiary\",\"type\":\"address\"}],\"name\":\"pendingWithdrawal\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"revokeBid\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"revokeOffer\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"newFeePortion\",\"type\":\"uint256\"}],\"name\":\"setFeePortion\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"tokenContract\",\"outputs\":[{\"internalType\":\"contract IERC721\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"tokenMarkets\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"offeror\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"minimumOffer\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"invitedBidder\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"bidder\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"lockedBid\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"withdraw\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}]","ContractName":"NFTMarketplace","CompilerVersion":"v0.8.9+commit.e5eed63a","OptimizationUsed":"1","Runs":"200","ConstructorArguments":"00000000000000000000000000000000000000000000000000000000000001f4000000000000000000000000f85c6320cc60dec45af1f7ce82b13dd24d539690","EVMVersion":"Default","Library":"","LicenseType":"","Proxy":"0","Implementation":"","SwarmSource":""}]}