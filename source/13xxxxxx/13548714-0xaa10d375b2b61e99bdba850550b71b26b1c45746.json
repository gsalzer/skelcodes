{"status":"1","message":"OK","result":[{"SourceCode":"{{\r\n  \"language\": \"Solidity\",\r\n  \"sources\": {\r\n    \"contracts/VoucherKernel.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: LGPL-3.0-or-later\\n\\npragma solidity 0.7.6;\\n\\nimport \\\"@openzeppelin/contracts/utils/ReentrancyGuard.sol\\\";\\nimport \\\"@openzeppelin/contracts/utils/Address.sol\\\";\\nimport \\\"@openzeppelin/contracts/access/Ownable.sol\\\";\\nimport \\\"@openzeppelin/contracts/utils/Pausable.sol\\\";\\nimport \\\"@openzeppelin/contracts/math/SafeMath.sol\\\";\\nimport \\\"@openzeppelin/contracts/token/ERC721/IERC721Receiver.sol\\\";\\nimport \\\"./interfaces/IVoucherSets.sol\\\";\\nimport \\\"./interfaces/IVouchers.sol\\\";\\nimport \\\"./interfaces/IVoucherKernel.sol\\\";\\nimport {PaymentMethod, VoucherState, VoucherStatus, isStateCommitted, isStateRedemptionSigned, isStateRefunded, isStateExpired, isStatus, determineStatus} from \\\"./UsingHelpers.sol\\\";\\n\\n//preparing for ERC-1066, ERC-1444, EIP-838\\n\\n/**\\n * @title VoucherKernel contract controls the core business logic\\n * @dev Notes:\\n *  - The usage of block.timestamp is honored since vouchers are defined currently with day-precision.\\n *      See: https://ethereum.stackexchange.com/questions/5924/how-do-ethereum-mining-nodes-maintain-a-time-consistent-with-the-network/5931#5931\\n */\\n// solhint-disable-next-line\\ncontract VoucherKernel is IVoucherKernel, Ownable, Pausable, ReentrancyGuard {\\n    using Address for address;\\n    using SafeMath for uint256;\\n\\n    //ERC1155 contract representing voucher sets\\n    address private voucherSetTokenAddress;\\n\\n    //ERC721 contract representing vouchers;\\n    address private voucherTokenAddress;\\n\\n    //promise for an asset could be reusable, but simplified here for brevity\\n    struct Promise {\\n        bytes32 promiseId;\\n        uint256 nonce; //the asset that is offered\\n        address seller; //the seller who created the promise\\n        //we simplify the value for the demoapp, otherwise voucher details would be packed in one bytes32 field value\\n        uint256 validFrom;\\n        uint256 validTo;\\n        uint256 price;\\n        uint256 depositSe;\\n        uint256 depositBu;\\n        uint256 idx;\\n    }\\n\\n    struct VoucherPaymentMethod {\\n        PaymentMethod paymentMethod;\\n        address addressTokenPrice;\\n        address addressTokenDeposits;\\n    }\\n\\n    address private bosonRouterAddress; //address of the Boson Router contract\\n    address private cashierAddress; //address of the Cashier contract\\n\\n    mapping(bytes32 => Promise) private promises; //promises to deliver goods or services\\n    mapping(address => uint256) private tokenNonces; //mapping between seller address and its own nonces. Every time seller creates supply ID it gets incremented. Used to avoid duplicate ID's\\n    mapping(uint256 => VoucherPaymentMethod) private paymentDetails; // tokenSupplyId to VoucherPaymentMethod\\n\\n    bytes32[] private promiseKeys;\\n\\n    mapping(uint256 => bytes32) private ordersPromise; //mapping between an order (supply a.k.a. VoucherSet) and a promise\\n\\n    mapping(uint256 => VoucherStatus) private vouchersStatus; //recording the vouchers evolution\\n\\n    //ID reqs\\n    mapping(uint256 => uint256) private typeCounters; //counter for ID of a particular type of NFT\\n    uint256 private constant MASK_TYPE = uint256(uint128(~0)) << 128; //the type mask in the upper 128 bits\\n    //1111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111100000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000\\n\\n    uint256 private constant MASK_NF_INDEX = uint128(~0); //the non-fungible index mask in the lower 128\\n    //0000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000011111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111\\n\\n    uint256 private constant TYPE_NF_BIT = 1 << 255; //the first bit represents an NFT type\\n    //1000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000\\n\\n    uint256 private typeId; //base token type ... 127-bits cover 1.701411835*10^38 types (not differentiating between FTs and NFTs)\\n    /* Token IDs:\\n    Fungibles: 0, followed by 127-bit FT type ID, in the upper 128 bits, followed by 0 in lower 128-bits\\n    <0><uint127: base token id><uint128: 0>\\n    \\n    Non-fungible VoucherSets (supply tokens): 1, followed by 127-bit NFT type ID, in the upper 128 bits, followed by 0 in lower 128-bits\\n    <1><uint127: base token id><uint128: 0    \\n    \\n    Non-fungible vouchers: 1, followed by 127-bit NFT type ID, in the upper 128 bits, followed by a 1-based index of an NFT token ID.\\n    <1><uint127: base token id><uint128: index of non-fungible>\\n    */\\n\\n    uint256 private complainPeriod;\\n    uint256 private cancelFaultPeriod;\\n\\n    event LogPromiseCreated(\\n        bytes32 indexed _promiseId,\\n        uint256 indexed _nonce,\\n        address indexed _seller,\\n        uint256 _validFrom,\\n        uint256 _validTo,\\n        uint256 _idx\\n    );\\n\\n    event LogVoucherCommitted(\\n        uint256 indexed _tokenIdSupply,\\n        uint256 _tokenIdVoucher,\\n        address _issuer,\\n        address _holder,\\n        bytes32 _promiseId\\n    );\\n\\n    event LogVoucherRedeemed(\\n        uint256 _tokenIdVoucher,\\n        address _holder,\\n        bytes32 _promiseId\\n    );\\n\\n    event LogVoucherRefunded(uint256 _tokenIdVoucher);\\n\\n    event LogVoucherComplain(uint256 _tokenIdVoucher);\\n\\n    event LogVoucherFaultCancel(uint256 _tokenIdVoucher);\\n\\n    event LogExpirationTriggered(uint256 _tokenIdVoucher, address _triggeredBy);\\n\\n    event LogFinalizeVoucher(uint256 _tokenIdVoucher, address _triggeredBy);\\n\\n    event LogBosonRouterSet(address _newBosonRouter, address _triggeredBy);\\n\\n    event LogCashierSet(address _newCashier, address _triggeredBy);\\n\\n    event LogVoucherTokenContractSet(address _newTokenContract, address _triggeredBy);\\n\\n    event LogVoucherSetTokenContractSet(address _newTokenContract, address _triggeredBy);\\n\\n    event LogComplainPeriodChanged(\\n        uint256 _newComplainPeriod,\\n        address _triggeredBy\\n    );\\n\\n    event LogCancelFaultPeriodChanged(\\n        uint256 _newCancelFaultPeriod,\\n        address _triggeredBy\\n    );\\n\\n    event LogVoucherSetFaultCancel(uint256 _tokenIdSupply, address _issuer);\\n\\n    event LogFundsReleased(\\n        uint256 _tokenIdVoucher,\\n        uint8 _type //0 .. payment, 1 .. deposits\\n    );\\n\\n    /**\\n     * @notice Checks that only the BosonRouter contract can call a function\\n    */\\n    modifier onlyFromRouter() {\\n        require(msg.sender == bosonRouterAddress, \\\"UNAUTHORIZED_BR\\\");\\n        _;\\n    }\\n\\n    /**\\n     * @notice Checks that only the Cashier contract can call a function\\n    */\\n    modifier onlyFromCashier() {\\n        require(msg.sender == cashierAddress, \\\"UNAUTHORIZED_C\\\");\\n        _;\\n    }\\n\\n    /**\\n     * @notice Checks that only the owver of the specified voucher can call a function\\n    */\\n    modifier onlyVoucherOwner(uint256 _tokenIdVoucher, address _sender) {\\n        //check authorization\\n        require(\\n            IVouchers(voucherTokenAddress).ownerOf(_tokenIdVoucher) == _sender,\\n            \\\"UNAUTHORIZED_V\\\"\\n        );\\n        _;\\n    }\\n\\n    modifier notZeroAddress(address _addressToCheck) {\\n        require(_addressToCheck != address(0), \\\"0A\\\");\\n        _;\\n    }\\n\\n    /**\\n     * @notice Construct and initialze the contract. Iniialises associated contract addresses, the complain period, and the cancel or fault period\\n     * @param _bosonRouterAddress address of the associated BosonRouter contract\\n     * @param _cashierAddress address of the associated Cashier contract\\n     * @param _voucherSetTokenAddress address of the associated ERC1155 contract instance\\n     * @param _voucherTokenAddress address of the associated ERC721 contract instance\\n      */\\n    constructor(address _bosonRouterAddress, address _cashierAddress, address _voucherSetTokenAddress, address _voucherTokenAddress)\\n    notZeroAddress(_bosonRouterAddress)\\n    notZeroAddress(_cashierAddress)\\n    notZeroAddress(_voucherSetTokenAddress)\\n    notZeroAddress(_voucherTokenAddress)\\n    {\\n        bosonRouterAddress = _bosonRouterAddress;\\n        cashierAddress = _cashierAddress;\\n        voucherSetTokenAddress = _voucherSetTokenAddress;\\n        voucherTokenAddress = _voucherTokenAddress;\\n\\n        complainPeriod = 7 * 1 days;\\n        cancelFaultPeriod = 7 * 1 days;\\n    }\\n\\n    /**\\n     * @notice Pause the process of interaction with voucherID's (ERC-721), in case of emergency.\\n     * Only BR contract is in control of this function.\\n     */\\n    function pause() external override onlyFromRouter {\\n        _pause();\\n    }\\n\\n    /**\\n     * @notice Unpause the process of interaction with voucherID's (ERC-721).\\n     * Only BR contract is in control of this function.\\n     */\\n    function unpause() external override onlyFromRouter {\\n        _unpause();\\n    }\\n\\n    /**\\n     * @notice Creating a new promise for goods or services.\\n     * Can be reused, e.g. for making different batches of these (in the future).\\n     * @param _seller      seller of the promise\\n     * @param _validFrom   Start of valid period\\n     * @param _validTo     End of valid period\\n     * @param _price       Price (payment amount)\\n     * @param _depositSe   Seller's deposit\\n     * @param _depositBu   Buyer's deposit\\n     */\\n    function createTokenSupplyId(\\n        address _seller,\\n        uint256 _validFrom,\\n        uint256 _validTo,\\n        uint256 _price,\\n        uint256 _depositSe,\\n        uint256 _depositBu,\\n        uint256 _quantity\\n    )\\n    external\\n    override\\n    nonReentrant\\n    onlyFromRouter\\n    returns (uint256) {\\n        require(_quantity > 0, \\\"INVALID_QUANTITY\\\");\\n        // solhint-disable-next-line not-rely-on-time\\n        require(_validTo >= block.timestamp + 5 minutes, \\\"INVALID_VALIDITY_TO\\\");\\n        require(_validTo >= _validFrom.add(5 minutes), \\\"VALID_FROM_MUST_BE_AT_LEAST_5_MINUTES_LESS_THAN_VALID_TO\\\");\\n\\n        bytes32 key;\\n        key = keccak256(\\n            abi.encodePacked(_seller, tokenNonces[_seller]++, _validFrom, _validTo, address(this))\\n        );\\n\\n        if (promiseKeys.length > 0) {\\n            require(\\n                promiseKeys[promises[key].idx] != key,\\n                \\\"PROMISE_ALREADY_EXISTS\\\"\\n            );\\n        }\\n\\n        promises[key] = Promise({\\n            promiseId: key,\\n            nonce: tokenNonces[_seller],\\n            seller: _seller,\\n            validFrom: _validFrom,\\n            validTo: _validTo,\\n            price: _price,\\n            depositSe: _depositSe,\\n            depositBu: _depositBu,\\n            idx: promiseKeys.length\\n        });\\n\\n        promiseKeys.push(key);\\n\\n        emit LogPromiseCreated(\\n            key,\\n            tokenNonces[_seller],\\n            _seller,\\n            _validFrom,\\n            _validTo,\\n            promiseKeys.length - 1\\n        );\\n\\n        return createOrder(_seller, key, _quantity);\\n    }\\n\\n    /**\\n     * @notice Creates a Payment method struct recording the details on how the seller requires to receive Price and Deposits for a certain Voucher Set.\\n     * @param _tokenIdSupply     _tokenIdSupply of the voucher set this is related to\\n     * @param _paymentMethod  might be ETHETH, ETHTKN, TKNETH or TKNTKN\\n     * @param _tokenPrice   token address which will hold the funds for the price of the voucher\\n     * @param _tokenDeposits   token address which will hold the funds for the deposits of the voucher\\n     */\\n    function createPaymentMethod(\\n        uint256 _tokenIdSupply,\\n        PaymentMethod _paymentMethod,\\n        address _tokenPrice,\\n        address _tokenDeposits\\n    ) external override onlyFromRouter {       \\n        paymentDetails[_tokenIdSupply] = VoucherPaymentMethod({\\n            paymentMethod: _paymentMethod,\\n            addressTokenPrice: _tokenPrice,\\n            addressTokenDeposits: _tokenDeposits\\n        });\\n    }\\n\\n    /**\\n     * @notice Create an order for offering a certain quantity of an asset\\n     * This creates a listing in a marketplace, technically as an ERC-1155 non-fungible token with supply.\\n     * @param _seller     seller of the promise\\n     * @param _promiseId  ID of a promise (simplified into asset for demo)\\n     * @param _quantity   Quantity of assets on offer\\n     */\\n    function createOrder(\\n        address _seller,\\n        bytes32 _promiseId,\\n        uint256 _quantity\\n    ) private returns (uint256) {\\n        //create & assign a new non-fungible type\\n        typeId++;\\n        uint256 tokenIdSupply = TYPE_NF_BIT | (typeId << 128); //upper bit is 1, followed by sequence, leaving lower 128-bits as 0;\\n\\n        ordersPromise[tokenIdSupply] = _promiseId;\\n\\n        IVoucherSets(voucherSetTokenAddress).mint(\\n            _seller,\\n            tokenIdSupply,\\n            _quantity,\\n            \\\"\\\"\\n        );\\n\\n        return tokenIdSupply;\\n    }\\n\\n    /**\\n     * @notice Fill Voucher Order, iff funds paid, then extract & mint NFT to the voucher holder\\n     * @param _tokenIdSupply   ID of the supply token (ERC-1155)\\n     * @param _issuer          Address of the token's issuer\\n     * @param _holder          Address of the recipient of the voucher (ERC-721)\\n     * @param _paymentMethod   method being used for that particular order that needs to be fulfilled\\n     */\\n    function fillOrder(\\n        uint256 _tokenIdSupply,\\n        address _issuer,\\n        address _holder,\\n        PaymentMethod _paymentMethod\\n    )\\n    external\\n    override\\n    onlyFromRouter\\n    nonReentrant\\n    {\\n        require(_doERC721HolderCheck(_issuer, _holder, _tokenIdSupply), \\\"UNSUPPORTED_ERC721_RECEIVED\\\");\\n        PaymentMethod paymentMethod = getVoucherPaymentMethod(_tokenIdSupply);\\n\\n        //checks\\n        require(paymentMethod == _paymentMethod, \\\"Incorrect Payment Method\\\");\\n        checkOrderFillable(_tokenIdSupply, _issuer, _holder);\\n\\n        //close order\\n        uint256 voucherTokenId = extract721(_issuer, _holder, _tokenIdSupply);\\n\\n        emit LogVoucherCommitted(\\n            _tokenIdSupply,\\n            voucherTokenId,\\n            _issuer,\\n            _holder,\\n            getPromiseIdFromVoucherId(voucherTokenId)\\n        );\\n    }\\n\\n    /**\\n     * @notice Check if holder is a contract that supports ERC721\\n     * @dev ERC-721\\n     * https://github.com/OpenZeppelin/openzeppelin-contracts/blob/v4.4.0-rc.0/contracts/token/ERC721/ERC721.sol\\n     * @param _from     Address of sender\\n     * @param _to       Address of recipient\\n     * @param _tokenId  ID of the token\\n     */\\n    function _doERC721HolderCheck(\\n        address _from,\\n        address _to,\\n        uint256 _tokenId\\n    ) internal returns (bool) {\\n        if (_to.isContract()) {\\n            try IERC721Receiver(_to).onERC721Received(_msgSender(), _from, _tokenId, \\\"\\\") returns (bytes4 retval) {\\n                return retval == IERC721Receiver.onERC721Received.selector;\\n            } catch (bytes memory reason) {\\n                if (reason.length == 0) {\\n                    revert(\\\"UNSUPPORTED_ERC721_RECEIVED\\\");\\n                } else {\\n                    assembly {\\n                        revert(add(32, reason), mload(reason))\\n                    }\\n                }\\n            }\\n        } else {\\n            return true;\\n        }\\n    }\\n\\n    /**\\n     * @notice Check order is fillable\\n     * @dev Will throw if checks don't pass\\n     * @param _tokenIdSupply  ID of the supply token\\n     * @param _issuer  Address of the token's issuer\\n     * @param _holder  Address of the recipient of the voucher (ERC-721)\\n     */\\n    function checkOrderFillable(\\n        uint256 _tokenIdSupply,\\n        address _issuer,\\n        address _holder\\n    ) internal view notZeroAddress(_holder) {\\n        require(_tokenIdSupply != 0, \\\"UNSPECIFIED_ID\\\");\\n\\n        require(\\n            IVoucherSets(voucherSetTokenAddress).balanceOf(_issuer, _tokenIdSupply) > 0,\\n            \\\"OFFER_EMPTY\\\"\\n        );\\n\\n        bytes32 promiseKey = ordersPromise[_tokenIdSupply];\\n\\n        require(\\n            promises[promiseKey].validTo >= block.timestamp,\\n            \\\"OFFER_EXPIRED\\\"\\n        );\\n    }\\n\\n    /**\\n     * @notice Extract a standard non-fungible token ERC-721 from a supply stored in ERC-1155\\n     * @dev Token ID is derived following the same principles for both ERC-1155 and ERC-721\\n     * @param _issuer          The address of the token issuer\\n     * @param _to              The address of the token holder\\n     * @param _tokenIdSupply   ID of the token type\\n     * @return                 ID of the voucher token\\n     */\\n    function extract721(\\n        address _issuer,\\n        address _to,\\n        uint256 _tokenIdSupply\\n    ) internal returns (uint256) {\\n        IVoucherSets(voucherSetTokenAddress).burn(_issuer, _tokenIdSupply, 1); // This is hardcoded as 1 on purpose\\n\\n        //calculate tokenId\\n        uint256 voucherTokenId =\\n            _tokenIdSupply | ++typeCounters[_tokenIdSupply];\\n\\n        //set status\\n        vouchersStatus[voucherTokenId].status = determineStatus(\\n            vouchersStatus[voucherTokenId].status,\\n            VoucherState.COMMIT\\n        );\\n        vouchersStatus[voucherTokenId].isPaymentReleased = false;\\n        vouchersStatus[voucherTokenId].isDepositsReleased = false;\\n\\n        //mint voucher NFT as ERC-721\\n        IVouchers(voucherTokenAddress).mint(_to, voucherTokenId);\\n\\n        return voucherTokenId;\\n    }\\n\\n    /* solhint-disable */\\n\\n    /**\\n     * @notice Redemption of the vouchers promise\\n     * @param _tokenIdVoucher   ID of the voucher\\n     * @param _messageSender   account that called the fn from the BR contract\\n     */\\n    function redeem(uint256 _tokenIdVoucher, address _messageSender)\\n        external\\n        override\\n        whenNotPaused\\n        onlyFromRouter\\n        onlyVoucherOwner(_tokenIdVoucher, _messageSender)\\n    {\\n        //check status\\n        require(\\n            isStateCommitted(vouchersStatus[_tokenIdVoucher].status),\\n            \\\"ALREADY_PROCESSED\\\"\\n        );\\n\\n        //check validity period\\n        isInValidityPeriod(_tokenIdVoucher);\\n        Promise memory tPromise =\\n            promises[getPromiseIdFromVoucherId(_tokenIdVoucher)];\\n\\n        vouchersStatus[_tokenIdVoucher].complainPeriodStart = block.timestamp;\\n        vouchersStatus[_tokenIdVoucher].status = determineStatus(\\n            vouchersStatus[_tokenIdVoucher].status,\\n            VoucherState.REDEEM\\n        );\\n\\n        emit LogVoucherRedeemed(\\n            _tokenIdVoucher,\\n            _messageSender,\\n            tPromise.promiseId\\n        );\\n    }\\n\\n    // // // // // // // //\\n    // UNHAPPY PATH\\n    // // // // // // // //\\n\\n    /**\\n     * @notice Refunding a voucher\\n     * @param _tokenIdVoucher   ID of the voucher\\n     * @param _messageSender   account that called the fn from the BR contract\\n     */\\n    function refund(uint256 _tokenIdVoucher, address _messageSender)\\n        external\\n        override\\n        whenNotPaused\\n        onlyFromRouter\\n        onlyVoucherOwner(_tokenIdVoucher, _messageSender)\\n    {\\n        require(\\n            isStateCommitted(vouchersStatus[_tokenIdVoucher].status),\\n            \\\"INAPPLICABLE_STATUS\\\"\\n        );\\n\\n        //check validity period\\n        isInValidityPeriod(_tokenIdVoucher);\\n\\n        vouchersStatus[_tokenIdVoucher].complainPeriodStart = block.timestamp;\\n        vouchersStatus[_tokenIdVoucher].status = determineStatus(\\n            vouchersStatus[_tokenIdVoucher].status,\\n            VoucherState.REFUND\\n        );\\n\\n        emit LogVoucherRefunded(_tokenIdVoucher);\\n    }\\n\\n    /**\\n     * @notice Issue a complaint for a voucher\\n     * @param _tokenIdVoucher   ID of the voucher\\n     * @param _messageSender   account that called the fn from the BR contract\\n     */\\n    function complain(uint256 _tokenIdVoucher, address _messageSender)\\n        external\\n        override\\n        whenNotPaused\\n        onlyFromRouter\\n        onlyVoucherOwner(_tokenIdVoucher, _messageSender)\\n    {\\n        checkIfApplicableAndResetPeriod(_tokenIdVoucher, VoucherState.COMPLAIN);\\n    }   \\n\\n    /**\\n     * @notice Cancel/Fault transaction by the Seller, admitting to a fault or backing out of the deal\\n     * @param _tokenIdVoucher   ID of the voucher\\n     * @param _messageSender   account that called the fn from the BR contract\\n     */\\n    function cancelOrFault(uint256 _tokenIdVoucher, address _messageSender)\\n        external\\n        override\\n        onlyFromRouter\\n        whenNotPaused\\n    {\\n        uint256 tokenIdSupply = getIdSupplyFromVoucher(_tokenIdVoucher);\\n        require(\\n            getSupplyHolder(tokenIdSupply) == _messageSender,\\n            \\\"UNAUTHORIZED_COF\\\"\\n        );\\n\\n        checkIfApplicableAndResetPeriod(_tokenIdVoucher, VoucherState.CANCEL_FAULT);\\n    }\\n\\n    /**\\n     * @notice Check if voucher status can be changed into desired new status. If yes, the waiting period is resetted, depending on what new status is.\\n     * @param _tokenIdVoucher   ID of the voucher\\n     * @param _newStatus   desired new status, can be {COF, COMPLAIN}\\n     */\\n    function checkIfApplicableAndResetPeriod(uint256 _tokenIdVoucher, VoucherState _newStatus)\\n        internal\\n    {\\n        uint8 tStatus = vouchersStatus[_tokenIdVoucher].status;\\n\\n        require(\\n            !isStatus(tStatus, VoucherState.FINAL),\\n            \\\"ALREADY_FINALIZED\\\"\\n        );\\n\\n        string memory revertReasonAlready; \\n        string memory revertReasonExpired;\\n\\n        if (_newStatus == VoucherState.COMPLAIN) {\\n            revertReasonAlready = \\\"ALREADY_COMPLAINED\\\";\\n            revertReasonExpired = \\\"COMPLAINPERIOD_EXPIRED\\\";\\n        } else {\\n            revertReasonAlready = \\\"ALREADY_CANCELFAULT\\\";\\n            revertReasonExpired = \\\"COFPERIOD_EXPIRED\\\";\\n        }\\n\\n        require(\\n            !isStatus(tStatus, _newStatus),\\n            revertReasonAlready\\n        );\\n\\n        Promise memory tPromise =\\n            promises[getPromiseIdFromVoucherId(_tokenIdVoucher)];\\n      \\n        if (\\n            isStateRedemptionSigned(tStatus) ||\\n            isStateRefunded(tStatus)\\n        ) {\\n            \\n            require(\\n                block.timestamp <=\\n                    vouchersStatus[_tokenIdVoucher].complainPeriodStart +\\n                        complainPeriod +\\n                        cancelFaultPeriod,\\n                revertReasonExpired\\n            );          \\n        } else if (isStateExpired(tStatus)) {\\n            //if redeemed or refunded\\n            require(\\n                block.timestamp <=\\n                    tPromise.validTo + complainPeriod + cancelFaultPeriod,\\n                revertReasonExpired\\n            );            \\n        } else if (\\n            //if the opposite of what is the desired new state. When doing COMPLAIN we need to check if already in COF (and vice versa), since the waiting periods are different.\\n            // VoucherState.COMPLAIN has enum index value 2, while VoucherState.CANCEL_FAULT has enum index value 1. To check the opposite status we use transformation \\\"% 2 + 1\\\" which maps 2 to 1 and 1 to 2 \\n            isStatus(vouchersStatus[_tokenIdVoucher].status, VoucherState((uint8(_newStatus) % 2 + 1))) // making it VoucherState.COMPLAIN or VoucherState.CANCEL_FAULT (opposite to new status) \\n        ) {\\n            uint256 waitPeriod = _newStatus == VoucherState.COMPLAIN ? vouchersStatus[_tokenIdVoucher].complainPeriodStart +\\n                        complainPeriod : vouchersStatus[_tokenIdVoucher].cancelFaultPeriodStart + cancelFaultPeriod;\\n            require(\\n                block.timestamp <= waitPeriod,\\n                revertReasonExpired\\n            );\\n        } else if (_newStatus != VoucherState.COMPLAIN && isStateCommitted(tStatus)) {\\n            //if committed only (applicable only in COF)\\n            require(\\n                block.timestamp <=\\n                    tPromise.validTo + complainPeriod + cancelFaultPeriod,\\n                \\\"COFPERIOD_EXPIRED\\\"\\n            );\\n \\n        } else {\\n            revert(\\\"INAPPLICABLE_STATUS\\\");\\n            }\\n        \\n            vouchersStatus[_tokenIdVoucher].status = determineStatus(\\n                tStatus,\\n                _newStatus\\n            );\\n\\n        if (_newStatus == VoucherState.COMPLAIN) {\\n            if (!isStatus(tStatus, VoucherState.CANCEL_FAULT)) {\\n            vouchersStatus[_tokenIdVoucher].cancelFaultPeriodStart = block\\n                .timestamp;  //COF period starts\\n            }\\n            emit LogVoucherComplain(_tokenIdVoucher);\\n        } else {\\n            if (!isStatus(tStatus, VoucherState.COMPLAIN)) {\\n            vouchersStatus[_tokenIdVoucher].complainPeriodStart = block\\n            .timestamp; //complain period starts\\n            }\\n            emit LogVoucherFaultCancel(_tokenIdVoucher);\\n        }\\n    }\\n\\n    /**\\n     * @notice Cancel/Fault transaction by the Seller, cancelling the remaining uncommitted voucher set so that seller prevents buyers from committing to vouchers for items no longer in exchange.\\n     * @param _tokenIdSupply   ID of the voucher set\\n     * @param _issuer   owner of the voucher\\n     */\\n    function cancelOrFaultVoucherSet(uint256 _tokenIdSupply, address _issuer)\\n    external\\n    override\\n    onlyFromRouter\\n    nonReentrant\\n    whenNotPaused\\n    returns (uint256)\\n    {\\n        require(getSupplyHolder(_tokenIdSupply) == _issuer, \\\"UNAUTHORIZED_COF\\\");\\n\\n        uint256 remQty = getRemQtyForSupply(_tokenIdSupply, _issuer);\\n\\n        require(remQty > 0, \\\"OFFER_EMPTY\\\");\\n\\n        IVoucherSets(voucherSetTokenAddress).burn(_issuer, _tokenIdSupply, remQty);\\n\\n        emit LogVoucherSetFaultCancel(_tokenIdSupply, _issuer);\\n\\n        return remQty;\\n    }\\n\\n    // // // // // // // //\\n    // BACK-END PROCESS\\n    // // // // // // // //\\n\\n    /**\\n     * @notice Mark voucher token that the payment was released\\n     * @param _tokenIdVoucher   ID of the voucher token\\n     */\\n    function setPaymentReleased(uint256 _tokenIdVoucher)\\n        external\\n        override\\n        onlyFromCashier\\n    {\\n        require(_tokenIdVoucher != 0, \\\"UNSPECIFIED_ID\\\");\\n        vouchersStatus[_tokenIdVoucher].isPaymentReleased = true;\\n\\n        emit LogFundsReleased(_tokenIdVoucher, 0);\\n    }\\n\\n    /**\\n     * @notice Mark voucher token that the deposits were released\\n     * @param _tokenIdVoucher   ID of the voucher token\\n     */\\n    function setDepositsReleased(uint256 _tokenIdVoucher)\\n        external\\n        override\\n        onlyFromCashier\\n    {\\n        require(_tokenIdVoucher != 0, \\\"UNSPECIFIED_ID\\\");\\n        vouchersStatus[_tokenIdVoucher].isDepositsReleased = true;\\n\\n        emit LogFundsReleased(_tokenIdVoucher, 1);\\n    }\\n\\n    /**\\n     * @notice Mark voucher token as expired\\n     * @param _tokenIdVoucher   ID of the voucher token\\n     */\\n    function triggerExpiration(uint256 _tokenIdVoucher) external override {\\n        require(_tokenIdVoucher != 0, \\\"UNSPECIFIED_ID\\\");\\n\\n        Promise memory tPromise =\\n            promises[getPromiseIdFromVoucherId(_tokenIdVoucher)];\\n\\n        require(tPromise.validTo < block.timestamp && isStateCommitted(vouchersStatus[_tokenIdVoucher].status),'INAPPLICABLE_STATUS');\\n\\n        vouchersStatus[_tokenIdVoucher].status = determineStatus(\\n            vouchersStatus[_tokenIdVoucher].status,\\n            VoucherState.EXPIRE\\n        );\\n\\n        emit LogExpirationTriggered(_tokenIdVoucher, msg.sender);\\n    }\\n\\n    /**\\n     * @notice Mark voucher token to the final status\\n     * @param _tokenIdVoucher   ID of the voucher token\\n     */\\n    function triggerFinalizeVoucher(uint256 _tokenIdVoucher) external override {\\n        require(_tokenIdVoucher != 0, \\\"UNSPECIFIED_ID\\\");\\n\\n        uint8 tStatus = vouchersStatus[_tokenIdVoucher].status;\\n\\n        require(!isStatus(tStatus, VoucherState.FINAL), \\\"ALREADY_FINALIZED\\\");\\n\\n        bool mark;\\n        Promise memory tPromise =\\n            promises[getPromiseIdFromVoucherId(_tokenIdVoucher)];\\n\\n        if (isStatus(tStatus, VoucherState.COMPLAIN)) {\\n            if (isStatus(tStatus, VoucherState.CANCEL_FAULT)) {\\n                //if COMPLAIN && COF: then final\\n                mark = true;\\n            } else if (\\n                block.timestamp >=\\n                vouchersStatus[_tokenIdVoucher].cancelFaultPeriodStart +\\n                    cancelFaultPeriod\\n            ) {\\n                //if COMPLAIN: then final after cof period\\n                mark = true;\\n            }\\n        } else if (\\n            isStatus(tStatus, VoucherState.CANCEL_FAULT) &&\\n            block.timestamp >=\\n            vouchersStatus[_tokenIdVoucher].complainPeriodStart + complainPeriod\\n        ) {\\n            //if COF: then final after complain period\\n            mark = true;\\n        } else if (\\n            isStateRedemptionSigned(tStatus) || isStateRefunded(tStatus)\\n        ) {\\n            //if RDM/RFND NON_COMPLAIN: then final after complainPeriodStart + complainPeriod\\n            if (\\n                block.timestamp >=\\n                vouchersStatus[_tokenIdVoucher].complainPeriodStart +\\n                    complainPeriod\\n            ) {\\n                mark = true;\\n            }\\n        } else if (isStateExpired(tStatus)) {\\n            //if EXP NON_COMPLAIN: then final after validTo + complainPeriod\\n            if (block.timestamp >= tPromise.validTo + complainPeriod) {\\n                mark = true;\\n            }\\n        }\\n\\n        require(mark, 'INAPPLICABLE_STATUS');\\n\\n        vouchersStatus[_tokenIdVoucher].status = determineStatus(\\n            tStatus,\\n            VoucherState.FINAL\\n        );\\n        emit LogFinalizeVoucher(_tokenIdVoucher, msg.sender);\\n    }\\n\\n    /* solhint-enable */\\n\\n    // // // // // // // //\\n    // UTILS\\n    // // // // // // // //\\n\\n    /**\\n     * @notice Set the address of the new holder of a _tokenIdSupply on transfer\\n     * @param _tokenIdSupply   _tokenIdSupply which will be transferred\\n     * @param _newSeller   new holder of the supply\\n     */\\n    function setSupplyHolderOnTransfer(\\n        uint256 _tokenIdSupply,\\n        address _newSeller\\n    ) external override onlyFromCashier {\\n        bytes32 promiseKey = ordersPromise[_tokenIdSupply];\\n        promises[promiseKey].seller = _newSeller;\\n    }\\n\\n    /**\\n     * @notice Set the address of the Boson Router contract\\n     * @param _bosonRouterAddress   The address of the BR contract\\n     */\\n    function setBosonRouterAddress(address _bosonRouterAddress)\\n        external\\n        override\\n        onlyOwner\\n        whenPaused\\n        notZeroAddress(_bosonRouterAddress)\\n    {\\n        bosonRouterAddress = _bosonRouterAddress;\\n\\n        emit LogBosonRouterSet(_bosonRouterAddress, msg.sender);\\n    }\\n\\n    /**\\n     * @notice Set the address of the Cashier contract\\n     * @param _cashierAddress   The address of the Cashier contract\\n     */\\n    function setCashierAddress(address _cashierAddress)\\n        external\\n        override\\n        onlyOwner\\n        whenPaused\\n        notZeroAddress(_cashierAddress)\\n    {\\n        cashierAddress = _cashierAddress;\\n\\n        emit LogCashierSet(_cashierAddress, msg.sender);\\n    }\\n\\n    /**\\n     * @notice Set the address of the Vouchers token contract, an ERC721 contract\\n     * @param _voucherTokenAddress   The address of the Vouchers token contract\\n     */\\n    function setVoucherTokenAddress(address _voucherTokenAddress)\\n        external\\n        override\\n        onlyOwner\\n        notZeroAddress(_voucherTokenAddress)\\n        whenPaused\\n    {\\n        voucherTokenAddress = _voucherTokenAddress;\\n        emit LogVoucherTokenContractSet(_voucherTokenAddress, msg.sender);\\n    }\\n\\n   /**\\n     * @notice Set the address of the Voucher Sets token contract, an ERC1155 contract\\n     * @param _voucherSetTokenAddress   The address of the Vouchers token contract\\n     */\\n    function setVoucherSetTokenAddress(address _voucherSetTokenAddress)\\n        external\\n        override\\n        onlyOwner\\n        notZeroAddress(_voucherSetTokenAddress)\\n        whenPaused\\n    {\\n        voucherSetTokenAddress = _voucherSetTokenAddress;\\n        emit LogVoucherSetTokenContractSet(_voucherSetTokenAddress, msg.sender);\\n    }\\n\\n    /**\\n     * @notice Set the general complain period, should be used sparingly as it has significant consequences. Here done simply for demo purposes.\\n     * @param _complainPeriod   the new value for complain period (in number of seconds)\\n     */\\n    function setComplainPeriod(uint256 _complainPeriod)\\n        external\\n        override\\n        onlyOwner\\n    {\\n        complainPeriod = _complainPeriod;\\n\\n        emit LogComplainPeriodChanged(_complainPeriod, msg.sender);\\n    }\\n\\n    /**\\n     * @notice Set the general cancelOrFault period, should be used sparingly as it has significant consequences. Here done simply for demo purposes.\\n     * @param _cancelFaultPeriod   the new value for cancelOrFault period (in number of seconds)\\n     */\\n    function setCancelFaultPeriod(uint256 _cancelFaultPeriod)\\n        external\\n        override\\n        onlyOwner\\n    {\\n        cancelFaultPeriod = _cancelFaultPeriod;\\n\\n        emit LogCancelFaultPeriodChanged(_cancelFaultPeriod, msg.sender);\\n    }\\n\\n    // // // // // // // //\\n    // GETTERS\\n    // // // // // // // //\\n\\n    /**\\n     * @notice Get the promise ID at specific index\\n     * @param _idx  Index in the array of promise keys\\n     * @return      Promise ID\\n     */\\n    function getPromiseKey(uint256 _idx)\\n        external\\n        view\\n        override\\n        returns (bytes32)\\n    {\\n        return promiseKeys[_idx];\\n    }\\n\\n    /**\\n     * @notice Get the supply token ID from a voucher token\\n     * @param _tokenIdVoucher   ID of the voucher token\\n     * @return                  ID of the supply token\\n     */\\n    function getIdSupplyFromVoucher(uint256 _tokenIdVoucher)\\n        public\\n        pure\\n        override\\n        returns (uint256)\\n    {\\n        uint256 tokenIdSupply = _tokenIdVoucher & MASK_TYPE;\\n        require(tokenIdSupply !=0, \\\"INEXISTENT_SUPPLY\\\");\\n        return tokenIdSupply;\\n    }\\n\\n    /**\\n     * @notice Get the promise ID from a voucher token\\n     * @param _tokenIdVoucher   ID of the voucher token\\n     * @return                  ID of the promise\\n     */\\n    function getPromiseIdFromVoucherId(uint256 _tokenIdVoucher)\\n        public\\n        view\\n        override\\n        returns (bytes32)\\n    {\\n        require(_tokenIdVoucher != 0, \\\"UNSPECIFIED_ID\\\");\\n\\n        uint256 tokenIdSupply = getIdSupplyFromVoucher(_tokenIdVoucher);\\n        return promises[ordersPromise[tokenIdSupply]].promiseId;\\n    }\\n\\n    /**\\n     * @notice Get the remaining quantity left in supply of tokens (e.g ERC-721 left in ERC-1155) of an account\\n     * @param _tokenSupplyId  Token supply ID\\n     * @param _tokenSupplyOwner    holder of the Token Supply\\n     * @return          remaining quantity\\n     */\\n    function getRemQtyForSupply(uint256 _tokenSupplyId, address _tokenSupplyOwner)\\n        public\\n        view\\n        override\\n        returns (uint256)\\n    {\\n        return IVoucherSets(voucherSetTokenAddress).balanceOf(_tokenSupplyOwner, _tokenSupplyId);\\n    }\\n\\n    /**\\n     * @notice Get all necessary funds for a supply token\\n     * @param _tokenIdSupply   ID of the supply token\\n     * @return                  returns a tuple (Payment amount, Seller's deposit, Buyer's deposit)\\n     */\\n    function getOrderCosts(uint256 _tokenIdSupply)\\n        external\\n        view\\n        override\\n        returns (\\n            uint256,\\n            uint256,\\n            uint256\\n        )\\n    {\\n        bytes32 promiseKey = ordersPromise[_tokenIdSupply];\\n        return (\\n            promises[promiseKey].price,\\n            promises[promiseKey].depositSe,\\n            promises[promiseKey].depositBu\\n        );\\n    }\\n\\n    /**\\n     * @notice Get Buyer costs required to make an order for a supply token\\n     * @param _tokenIdSupply   ID of the supply token\\n     * @return                  returns a tuple (Payment amount, Buyer's deposit)\\n     */\\n    function getBuyerOrderCosts(uint256 _tokenIdSupply)\\n        external\\n        view\\n        override\\n        returns (uint256, uint256)\\n    {\\n        bytes32 promiseKey = ordersPromise[_tokenIdSupply];\\n        return (promises[promiseKey].price, promises[promiseKey].depositBu);\\n    }\\n\\n    /**\\n     * @notice Get Seller deposit\\n     * @param _tokenIdSupply   ID of the supply token\\n     * @return                  returns sellers deposit\\n     */\\n    function getSellerDeposit(uint256 _tokenIdSupply)\\n        external\\n        view\\n        override\\n        returns (uint256)\\n    {\\n        bytes32 promiseKey = ordersPromise[_tokenIdSupply];\\n        return promises[promiseKey].depositSe;\\n    }\\n\\n    /**\\n     * @notice Get the holder of a supply\\n     * @param _tokenIdSupply ID of the order (aka VoucherSet) which is mapped to the corresponding Promise.\\n     * @return                  Address of the holder\\n     */\\n    function getSupplyHolder(uint256 _tokenIdSupply)\\n        public\\n        view\\n        override\\n        returns (address)\\n    {\\n        bytes32 promiseKey = ordersPromise[_tokenIdSupply];\\n        return promises[promiseKey].seller;\\n    }\\n\\n    /**\\n     * @notice Get promise data not retrieved by other accessor functions\\n     * @param _promiseKey   ID of the promise\\n     * @return promise data not returned by other accessor methods\\n     */\\n    function getPromiseData(bytes32 _promiseKey)\\n        external\\n        view\\n        override\\n        returns (bytes32, uint256, uint256, uint256, uint256 )\\n    {\\n        Promise memory tPromise = promises[_promiseKey];\\n        return (tPromise.promiseId, tPromise.nonce, tPromise.validFrom, tPromise.validTo, tPromise.idx); \\n    }\\n\\n    /**\\n     * @notice Get the current status of a voucher\\n     * @param _tokenIdVoucher   ID of the voucher token\\n     * @return                  Status of the voucher (via enum)\\n     */\\n    function getVoucherStatus(uint256 _tokenIdVoucher)\\n        external\\n        view\\n        override\\n        returns (\\n            uint8,\\n            bool,\\n            bool,\\n            uint256,\\n            uint256\\n        )\\n    {\\n        return (\\n            vouchersStatus[_tokenIdVoucher].status,\\n            vouchersStatus[_tokenIdVoucher].isPaymentReleased,\\n            vouchersStatus[_tokenIdVoucher].isDepositsReleased,\\n            vouchersStatus[_tokenIdVoucher].complainPeriodStart,\\n            vouchersStatus[_tokenIdVoucher].cancelFaultPeriodStart\\n        );\\n    }\\n\\n    /**\\n     * @notice Get the holder of a voucher\\n     * @param _tokenIdVoucher   ID of the voucher token\\n     * @return                  Address of the holder\\n     */\\n    function getVoucherHolder(uint256 _tokenIdVoucher)\\n        external\\n        view\\n        override\\n        returns (address)\\n    {\\n        return IVouchers(voucherTokenAddress).ownerOf(_tokenIdVoucher);\\n    }\\n\\n    /**\\n     * @notice Get the address of the token where the price for the supply is held\\n     * @param _tokenIdSupply   ID of the voucher supply token\\n     * @return                  Address of the token\\n     */\\n    function getVoucherPriceToken(uint256 _tokenIdSupply)\\n        external\\n        view\\n        override\\n        returns (address)\\n    {\\n        return paymentDetails[_tokenIdSupply].addressTokenPrice;\\n    }\\n\\n    /**\\n     * @notice Get the address of the token where the deposits for the supply are held\\n     * @param _tokenIdSupply   ID of the voucher supply token\\n     * @return                  Address of the token\\n     */\\n    function getVoucherDepositToken(uint256 _tokenIdSupply)\\n        external\\n        view\\n        override\\n        returns (address)\\n    {\\n        return paymentDetails[_tokenIdSupply].addressTokenDeposits;\\n    }\\n\\n    /**\\n     * @notice Get the payment method for a particular _tokenIdSupply\\n     * @param _tokenIdSupply   ID of the voucher supply token\\n     * @return                  payment method\\n     */\\n    function getVoucherPaymentMethod(uint256 _tokenIdSupply)\\n        public\\n        view\\n        override\\n        returns (PaymentMethod)\\n    {\\n        return paymentDetails[_tokenIdSupply].paymentMethod;\\n    }\\n\\n    /**\\n     * @notice Checks whether a voucher is in valid period for redemption (between start date and end date)\\n     * @param _tokenIdVoucher ID of the voucher token\\n     */\\n    function isInValidityPeriod(uint256 _tokenIdVoucher)\\n        public\\n        view\\n        override\\n        returns (bool)\\n    {\\n        //check validity period\\n        Promise memory tPromise =\\n            promises[getPromiseIdFromVoucherId(_tokenIdVoucher)];\\n        require(tPromise.validFrom <= block.timestamp, \\\"INVALID_VALIDITY_FROM\\\");\\n        require(tPromise.validTo >= block.timestamp, \\\"INVALID_VALIDITY_TO\\\");\\n\\n        return true;\\n    }\\n\\n    /**\\n     * @notice Checks whether a voucher is in valid state to be transferred. If either payments or deposits are released, voucher could not be transferred\\n     * @param _tokenIdVoucher ID of the voucher token\\n     */\\n    function isVoucherTransferable(uint256 _tokenIdVoucher)\\n        external\\n        view\\n        override\\n        returns (bool)\\n    {\\n        return\\n            !(vouchersStatus[_tokenIdVoucher].isPaymentReleased ||\\n                vouchersStatus[_tokenIdVoucher].isDepositsReleased);\\n    }\\n\\n    /**\\n     * @notice Get address of the Boson Router to which this contract points\\n     * @return Address of the Boson Router contract\\n     */\\n    function getBosonRouterAddress()\\n        external\\n        view\\n        override\\n        returns (address) \\n    {\\n        return bosonRouterAddress;\\n    }\\n\\n    /**\\n     * @notice Get address of the Cashier contract to which this contract points\\n     * @return Address of the Cashier contract\\n     */\\n    function getCashierAddress()\\n        external\\n        view\\n        override\\n        returns (address)\\n    {\\n        return cashierAddress;\\n    }\\n\\n    /**\\n     * @notice Get the token nonce for a seller\\n     * @param _seller Address of the seller\\n     * @return The seller's nonce\\n     */\\n    function getTokenNonce(address _seller)\\n        external\\n        view\\n        override\\n        returns (uint256) \\n    {\\n        return tokenNonces[_seller];\\n    }\\n\\n    /**\\n     * @notice Get the current type Id\\n     * @return type Id\\n     */\\n    function getTypeId()\\n        external\\n        view\\n        override\\n        returns (uint256)\\n    {\\n        return typeId;\\n    }\\n\\n    /**\\n     * @notice Get the complain period\\n     * @return complain period\\n     */\\n    function getComplainPeriod()\\n        external\\n        view\\n        override\\n        returns (uint256)\\n    {\\n        return complainPeriod;\\n    }\\n\\n    /**\\n     * @notice Get the cancel or fault period\\n     * @return cancel or fault period\\n     */\\n    function getCancelFaultPeriod()\\n        external\\n        view\\n        override\\n        returns (uint256)\\n    {\\n        return cancelFaultPeriod;\\n    }\\n    \\n     /**\\n     * @notice Get the promise ID from a voucher set\\n     * @param _tokenIdSupply   ID of the voucher token\\n     * @return                  ID of the promise\\n     */\\n    function getPromiseIdFromSupplyId(uint256 _tokenIdSupply)\\n        external\\n        view\\n        override\\n        returns (bytes32) \\n    {\\n        return ordersPromise[_tokenIdSupply];\\n    }\\n\\n    /**\\n     * @notice Get the address of the Vouchers token contract, an ERC721 contract\\n     * @return Address of Vouchers contract\\n     */\\n    function getVoucherTokenAddress() \\n        external \\n        view \\n        override\\n        returns (address)\\n    {\\n        return voucherTokenAddress;\\n    }\\n\\n    /**\\n     * @notice Get the address of the VoucherSets token contract, an ERC155 contract\\n     * @return Address of VoucherSets contract\\n     */\\n    function getVoucherSetTokenAddress() \\n        external \\n        view \\n        override\\n        returns (address)\\n    {\\n        return voucherSetTokenAddress;\\n    }\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/utils/ReentrancyGuard.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.7.0;\\n\\n/**\\n * @dev Contract module that helps prevent reentrant calls to a function.\\n *\\n * Inheriting from `ReentrancyGuard` will make the {nonReentrant} modifier\\n * available, which can be applied to functions to make sure there are no nested\\n * (reentrant) calls to them.\\n *\\n * Note that because there is a single `nonReentrant` guard, functions marked as\\n * `nonReentrant` may not call one another. This can be worked around by making\\n * those functions `private`, and then adding `external` `nonReentrant` entry\\n * points to them.\\n *\\n * TIP: If you would like to learn more about reentrancy and alternative ways\\n * to protect against it, check out our blog post\\n * https://blog.openzeppelin.com/reentrancy-after-istanbul/[Reentrancy After Istanbul].\\n */\\nabstract contract ReentrancyGuard {\\n    // Booleans are more expensive than uint256 or any type that takes up a full\\n    // word because each write operation emits an extra SLOAD to first read the\\n    // slot's contents, replace the bits taken up by the boolean, and then write\\n    // back. This is the compiler's defense against contract upgrades and\\n    // pointer aliasing, and it cannot be disabled.\\n\\n    // The values being non-zero value makes deployment a bit more expensive,\\n    // but in exchange the refund on every call to nonReentrant will be lower in\\n    // amount. Since refunds are capped to a percentage of the total\\n    // transaction's gas, it is best to keep them low in cases like this one, to\\n    // increase the likelihood of the full refund coming into effect.\\n    uint256 private constant _NOT_ENTERED = 1;\\n    uint256 private constant _ENTERED = 2;\\n\\n    uint256 private _status;\\n\\n    constructor () {\\n        _status = _NOT_ENTERED;\\n    }\\n\\n    /**\\n     * @dev Prevents a contract from calling itself, directly or indirectly.\\n     * Calling a `nonReentrant` function from another `nonReentrant`\\n     * function is not supported. It is possible to prevent this from happening\\n     * by making the `nonReentrant` function external, and make it call a\\n     * `private` function that does the actual work.\\n     */\\n    modifier nonReentrant() {\\n        // On the first call to nonReentrant, _notEntered will be true\\n        require(_status != _ENTERED, \\\"ReentrancyGuard: reentrant call\\\");\\n\\n        // Any calls to nonReentrant after this point will fail\\n        _status = _ENTERED;\\n\\n        _;\\n\\n        // By storing the original value once again, a refund is triggered (see\\n        // https://eips.ethereum.org/EIPS/eip-2200)\\n        _status = _NOT_ENTERED;\\n    }\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/utils/Address.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.7.0;\\n\\n/**\\n * @dev Collection of functions related to the address type\\n */\\nlibrary Address {\\n    /**\\n     * @dev Returns true if `account` is a contract.\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * It is unsafe to assume that an address for which this function returns\\n     * false is an externally-owned account (EOA) and not a contract.\\n     *\\n     * Among others, `isContract` will return false for the following\\n     * types of addresses:\\n     *\\n     *  - an externally-owned account\\n     *  - a contract in construction\\n     *  - an address where a contract will be created\\n     *  - an address where a contract lived, but was destroyed\\n     * ====\\n     */\\n    function isContract(address account) internal view returns (bool) {\\n        // This method relies on extcodesize, which returns 0 for contracts in\\n        // construction, since the code is only stored at the end of the\\n        // constructor execution.\\n\\n        uint256 size;\\n        // solhint-disable-next-line no-inline-assembly\\n        assembly { size := extcodesize(account) }\\n        return size > 0;\\n    }\\n\\n    /**\\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\\n     * `recipient`, forwarding all available gas and reverting on errors.\\n     *\\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\\n     * imposed by `transfer`, making them unable to receive funds via\\n     * `transfer`. {sendValue} removes this limitation.\\n     *\\n     * https://diligence.consensys.net/posts/2019/09/stop-using-soliditys-transfer-now/[Learn more].\\n     *\\n     * IMPORTANT: because control is transferred to `recipient`, care must be\\n     * taken to not create reentrancy vulnerabilities. Consider using\\n     * {ReentrancyGuard} or the\\n     * https://solidity.readthedocs.io/en/v0.5.11/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\\n     */\\n    function sendValue(address payable recipient, uint256 amount) internal {\\n        require(address(this).balance >= amount, \\\"Address: insufficient balance\\\");\\n\\n        // solhint-disable-next-line avoid-low-level-calls, avoid-call-value\\n        (bool success, ) = recipient.call{ value: amount }(\\\"\\\");\\n        require(success, \\\"Address: unable to send value, recipient may have reverted\\\");\\n    }\\n\\n    /**\\n     * @dev Performs a Solidity function call using a low level `call`. A\\n     * plain`call` is an unsafe replacement for a function call: use this\\n     * function instead.\\n     *\\n     * If `target` reverts with a revert reason, it is bubbled up by this\\n     * function (like regular Solidity function calls).\\n     *\\n     * Returns the raw returned data. To convert to the expected return value,\\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\\n     *\\n     * Requirements:\\n     *\\n     * - `target` must be a contract.\\n     * - calling `target` with `data` must not revert.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\\n      return functionCall(target, data, \\\"Address: low-level call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\\n     * `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(address target, bytes memory data, string memory errorMessage) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, 0, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but also transferring `value` wei to `target`.\\n     *\\n     * Requirements:\\n     *\\n     * - the calling contract must have an ETH balance of at least `value`.\\n     * - the called Solidity function must be `payable`.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(address target, bytes memory data, uint256 value) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, value, \\\"Address: low-level call with value failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\\n     * with `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(address target, bytes memory data, uint256 value, string memory errorMessage) internal returns (bytes memory) {\\n        require(address(this).balance >= value, \\\"Address: insufficient balance for call\\\");\\n        require(isContract(target), \\\"Address: call to non-contract\\\");\\n\\n        // solhint-disable-next-line avoid-low-level-calls\\n        (bool success, bytes memory returndata) = target.call{ value: value }(data);\\n        return _verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\\n        return functionStaticCall(target, data, \\\"Address: low-level static call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(address target, bytes memory data, string memory errorMessage) internal view returns (bytes memory) {\\n        require(isContract(target), \\\"Address: static call to non-contract\\\");\\n\\n        // solhint-disable-next-line avoid-low-level-calls\\n        (bool success, bytes memory returndata) = target.staticcall(data);\\n        return _verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionDelegateCall(target, data, \\\"Address: low-level delegate call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(address target, bytes memory data, string memory errorMessage) internal returns (bytes memory) {\\n        require(isContract(target), \\\"Address: delegate call to non-contract\\\");\\n\\n        // solhint-disable-next-line avoid-low-level-calls\\n        (bool success, bytes memory returndata) = target.delegatecall(data);\\n        return _verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    function _verifyCallResult(bool success, bytes memory returndata, string memory errorMessage) private pure returns(bytes memory) {\\n        if (success) {\\n            return returndata;\\n        } else {\\n            // Look for revert reason and bubble it up if present\\n            if (returndata.length > 0) {\\n                // The easiest way to bubble the revert reason is using memory via assembly\\n\\n                // solhint-disable-next-line no-inline-assembly\\n                assembly {\\n                    let returndata_size := mload(returndata)\\n                    revert(add(32, returndata), returndata_size)\\n                }\\n            } else {\\n                revert(errorMessage);\\n            }\\n        }\\n    }\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/access/Ownable.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.7.0;\\n\\nimport \\\"../utils/Context.sol\\\";\\n/**\\n * @dev Contract module which provides a basic access control mechanism, where\\n * there is an account (an owner) that can be granted exclusive access to\\n * specific functions.\\n *\\n * By default, the owner account will be the one that deploys the contract. This\\n * can later be changed with {transferOwnership}.\\n *\\n * This module is used through inheritance. It will make available the modifier\\n * `onlyOwner`, which can be applied to your functions to restrict their use to\\n * the owner.\\n */\\nabstract contract Ownable is Context {\\n    address private _owner;\\n\\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\\n\\n    /**\\n     * @dev Initializes the contract setting the deployer as the initial owner.\\n     */\\n    constructor () {\\n        address msgSender = _msgSender();\\n        _owner = msgSender;\\n        emit OwnershipTransferred(address(0), msgSender);\\n    }\\n\\n    /**\\n     * @dev Returns the address of the current owner.\\n     */\\n    function owner() public view virtual returns (address) {\\n        return _owner;\\n    }\\n\\n    /**\\n     * @dev Throws if called by any account other than the owner.\\n     */\\n    modifier onlyOwner() {\\n        require(owner() == _msgSender(), \\\"Ownable: caller is not the owner\\\");\\n        _;\\n    }\\n\\n    /**\\n     * @dev Leaves the contract without owner. It will not be possible to call\\n     * `onlyOwner` functions anymore. Can only be called by the current owner.\\n     *\\n     * NOTE: Renouncing ownership will leave the contract without an owner,\\n     * thereby removing any functionality that is only available to the owner.\\n     */\\n    function renounceOwnership() public virtual onlyOwner {\\n        emit OwnershipTransferred(_owner, address(0));\\n        _owner = address(0);\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Can only be called by the current owner.\\n     */\\n    function transferOwnership(address newOwner) public virtual onlyOwner {\\n        require(newOwner != address(0), \\\"Ownable: new owner is the zero address\\\");\\n        emit OwnershipTransferred(_owner, newOwner);\\n        _owner = newOwner;\\n    }\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/utils/Pausable.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.7.0;\\n\\nimport \\\"./Context.sol\\\";\\n\\n/**\\n * @dev Contract module which allows children to implement an emergency stop\\n * mechanism that can be triggered by an authorized account.\\n *\\n * This module is used through inheritance. It will make available the\\n * modifiers `whenNotPaused` and `whenPaused`, which can be applied to\\n * the functions of your contract. Note that they will not be pausable by\\n * simply including this module, only once the modifiers are put in place.\\n */\\nabstract contract Pausable is Context {\\n    /**\\n     * @dev Emitted when the pause is triggered by `account`.\\n     */\\n    event Paused(address account);\\n\\n    /**\\n     * @dev Emitted when the pause is lifted by `account`.\\n     */\\n    event Unpaused(address account);\\n\\n    bool private _paused;\\n\\n    /**\\n     * @dev Initializes the contract in unpaused state.\\n     */\\n    constructor () {\\n        _paused = false;\\n    }\\n\\n    /**\\n     * @dev Returns true if the contract is paused, and false otherwise.\\n     */\\n    function paused() public view virtual returns (bool) {\\n        return _paused;\\n    }\\n\\n    /**\\n     * @dev Modifier to make a function callable only when the contract is not paused.\\n     *\\n     * Requirements:\\n     *\\n     * - The contract must not be paused.\\n     */\\n    modifier whenNotPaused() {\\n        require(!paused(), \\\"Pausable: paused\\\");\\n        _;\\n    }\\n\\n    /**\\n     * @dev Modifier to make a function callable only when the contract is paused.\\n     *\\n     * Requirements:\\n     *\\n     * - The contract must be paused.\\n     */\\n    modifier whenPaused() {\\n        require(paused(), \\\"Pausable: not paused\\\");\\n        _;\\n    }\\n\\n    /**\\n     * @dev Triggers stopped state.\\n     *\\n     * Requirements:\\n     *\\n     * - The contract must not be paused.\\n     */\\n    function _pause() internal virtual whenNotPaused {\\n        _paused = true;\\n        emit Paused(_msgSender());\\n    }\\n\\n    /**\\n     * @dev Returns to normal state.\\n     *\\n     * Requirements:\\n     *\\n     * - The contract must be paused.\\n     */\\n    function _unpause() internal virtual whenPaused {\\n        _paused = false;\\n        emit Unpaused(_msgSender());\\n    }\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/math/SafeMath.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.7.0;\\n\\n/**\\n * @dev Wrappers over Solidity's arithmetic operations with added overflow\\n * checks.\\n *\\n * Arithmetic operations in Solidity wrap on overflow. This can easily result\\n * in bugs, because programmers usually assume that an overflow raises an\\n * error, which is the standard behavior in high level programming languages.\\n * `SafeMath` restores this intuition by reverting the transaction when an\\n * operation overflows.\\n *\\n * Using this library instead of the unchecked operations eliminates an entire\\n * class of bugs, so it's recommended to use it always.\\n */\\nlibrary SafeMath {\\n    /**\\n     * @dev Returns the addition of two unsigned integers, with an overflow flag.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function tryAdd(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        uint256 c = a + b;\\n        if (c < a) return (false, 0);\\n        return (true, c);\\n    }\\n\\n    /**\\n     * @dev Returns the substraction of two unsigned integers, with an overflow flag.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function trySub(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        if (b > a) return (false, 0);\\n        return (true, a - b);\\n    }\\n\\n    /**\\n     * @dev Returns the multiplication of two unsigned integers, with an overflow flag.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function tryMul(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        // Gas optimization: this is cheaper than requiring 'a' not being zero, but the\\n        // benefit is lost if 'b' is also tested.\\n        // See: https://github.com/OpenZeppelin/openzeppelin-contracts/pull/522\\n        if (a == 0) return (true, 0);\\n        uint256 c = a * b;\\n        if (c / a != b) return (false, 0);\\n        return (true, c);\\n    }\\n\\n    /**\\n     * @dev Returns the division of two unsigned integers, with a division by zero flag.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function tryDiv(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        if (b == 0) return (false, 0);\\n        return (true, a / b);\\n    }\\n\\n    /**\\n     * @dev Returns the remainder of dividing two unsigned integers, with a division by zero flag.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function tryMod(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        if (b == 0) return (false, 0);\\n        return (true, a % b);\\n    }\\n\\n    /**\\n     * @dev Returns the addition of two unsigned integers, reverting on\\n     * overflow.\\n     *\\n     * Counterpart to Solidity's `+` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Addition cannot overflow.\\n     */\\n    function add(uint256 a, uint256 b) internal pure returns (uint256) {\\n        uint256 c = a + b;\\n        require(c >= a, \\\"SafeMath: addition overflow\\\");\\n        return c;\\n    }\\n\\n    /**\\n     * @dev Returns the subtraction of two unsigned integers, reverting on\\n     * overflow (when the result is negative).\\n     *\\n     * Counterpart to Solidity's `-` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Subtraction cannot overflow.\\n     */\\n    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\\n        require(b <= a, \\\"SafeMath: subtraction overflow\\\");\\n        return a - b;\\n    }\\n\\n    /**\\n     * @dev Returns the multiplication of two unsigned integers, reverting on\\n     * overflow.\\n     *\\n     * Counterpart to Solidity's `*` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Multiplication cannot overflow.\\n     */\\n    function mul(uint256 a, uint256 b) internal pure returns (uint256) {\\n        if (a == 0) return 0;\\n        uint256 c = a * b;\\n        require(c / a == b, \\\"SafeMath: multiplication overflow\\\");\\n        return c;\\n    }\\n\\n    /**\\n     * @dev Returns the integer division of two unsigned integers, reverting on\\n     * division by zero. The result is rounded towards zero.\\n     *\\n     * Counterpart to Solidity's `/` operator. Note: this function uses a\\n     * `revert` opcode (which leaves remaining gas untouched) while Solidity\\n     * uses an invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Requirements:\\n     *\\n     * - The divisor cannot be zero.\\n     */\\n    function div(uint256 a, uint256 b) internal pure returns (uint256) {\\n        require(b > 0, \\\"SafeMath: division by zero\\\");\\n        return a / b;\\n    }\\n\\n    /**\\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\\n     * reverting when dividing by zero.\\n     *\\n     * Counterpart to Solidity's `%` operator. This function uses a `revert`\\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\\n     * invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Requirements:\\n     *\\n     * - The divisor cannot be zero.\\n     */\\n    function mod(uint256 a, uint256 b) internal pure returns (uint256) {\\n        require(b > 0, \\\"SafeMath: modulo by zero\\\");\\n        return a % b;\\n    }\\n\\n    /**\\n     * @dev Returns the subtraction of two unsigned integers, reverting with custom message on\\n     * overflow (when the result is negative).\\n     *\\n     * CAUTION: This function is deprecated because it requires allocating memory for the error\\n     * message unnecessarily. For custom revert reasons use {trySub}.\\n     *\\n     * Counterpart to Solidity's `-` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Subtraction cannot overflow.\\n     */\\n    function sub(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\\n        require(b <= a, errorMessage);\\n        return a - b;\\n    }\\n\\n    /**\\n     * @dev Returns the integer division of two unsigned integers, reverting with custom message on\\n     * division by zero. The result is rounded towards zero.\\n     *\\n     * CAUTION: This function is deprecated because it requires allocating memory for the error\\n     * message unnecessarily. For custom revert reasons use {tryDiv}.\\n     *\\n     * Counterpart to Solidity's `/` operator. Note: this function uses a\\n     * `revert` opcode (which leaves remaining gas untouched) while Solidity\\n     * uses an invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Requirements:\\n     *\\n     * - The divisor cannot be zero.\\n     */\\n    function div(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\\n        require(b > 0, errorMessage);\\n        return a / b;\\n    }\\n\\n    /**\\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\\n     * reverting with custom message when dividing by zero.\\n     *\\n     * CAUTION: This function is deprecated because it requires allocating memory for the error\\n     * message unnecessarily. For custom revert reasons use {tryMod}.\\n     *\\n     * Counterpart to Solidity's `%` operator. This function uses a `revert`\\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\\n     * invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Requirements:\\n     *\\n     * - The divisor cannot be zero.\\n     */\\n    function mod(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\\n        require(b > 0, errorMessage);\\n        return a % b;\\n    }\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/token/ERC721/IERC721Receiver.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.7.0;\\n\\n/**\\n * @title ERC721 token receiver interface\\n * @dev Interface for any contract that wants to support safeTransfers\\n * from ERC721 asset contracts.\\n */\\ninterface IERC721Receiver {\\n    /**\\n     * @dev Whenever an {IERC721} `tokenId` token is transferred to this contract via {IERC721-safeTransferFrom}\\n     * by `operator` from `from`, this function is called.\\n     *\\n     * It must return its Solidity selector to confirm the token transfer.\\n     * If any other value is returned or the interface is not implemented by the recipient, the transfer will be reverted.\\n     *\\n     * The selector can be obtained in Solidity with `IERC721.onERC721Received.selector`.\\n     */\\n    function onERC721Received(address operator, address from, uint256 tokenId, bytes calldata data) external returns (bytes4);\\n}\\n\"\r\n    },\r\n    \"contracts/interfaces/IVoucherSets.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: LGPL-3.0-or-later\\npragma solidity 0.7.6;\\n\\nimport \\\"@openzeppelin/contracts/token/ERC1155/IERC1155.sol\\\";\\nimport \\\"@openzeppelin/contracts/token/ERC1155/IERC1155MetadataURI.sol\\\";\\n\\ninterface IVoucherSets is IERC1155, IERC1155MetadataURI {\\n    /**\\n     * @notice Pause the Cashier && the Voucher Kernel contracts in case of emergency.\\n     * All functions related to creating new batch, requestVoucher or withdraw will be paused, hence cannot be executed.\\n     * There is special function for withdrawing funds if contract is paused.\\n     */\\n    function pause() external;\\n\\n    /**\\n     * @notice Unpause the Cashier && the Voucher Kernel contracts.\\n     * All functions related to creating new batch, requestVoucher or withdraw will be unpaused.\\n     */\\n    function unpause() external;\\n\\n    /**\\n     * @notice Mint an amount of a desired token\\n     * Currently no restrictions as to who is allowed to mint - so, it is external.\\n     * @dev ERC-1155\\n     * @param _to       owner of the minted token\\n     * @param _tokenId  ID of the token to be minted\\n     * @param _value    Amount of the token to be minted\\n     * @param _data     Additional data forwarded to onERC1155BatchReceived if _to is a contract\\n     */\\n    function mint(\\n        address _to,\\n        uint256 _tokenId,\\n        uint256 _value,\\n        bytes calldata _data\\n    ) external;\\n\\n    /**\\n     * @notice Burn an amount of tokens with the given ID\\n     * @dev ERC-1155\\n     * @param _account  Account which owns the token\\n     * @param _tokenId  ID of the token\\n     * @param _value    Amount of the token\\n     */\\n    function burn(\\n        address _account,\\n        uint256 _tokenId,\\n        uint256 _value\\n    ) external;\\n\\n    /**\\n     * @notice Set the address of the VoucherKernel contract\\n     * @param _voucherKernelAddress The address of the Voucher Kernel contract\\n     */\\n    function setVoucherKernelAddress(address _voucherKernelAddress) external;\\n\\n    /**\\n     * @notice Set the address of the Cashier contract\\n     * @param _cashierAddress   The address of the Cashier contract\\n     */\\n    function setCashierAddress(address _cashierAddress) external;\\n\\n    /**\\n     * @notice Get the address of Voucher Kernel contract\\n     * @return Address of Voucher Kernel contract\\n     */\\n    function getVoucherKernelAddress() external view returns (address);\\n\\n    /**\\n     * @notice Get the address of Cashier contract\\n     * @return Address of Cashier address\\n     */\\n    function getCashierAddress() external view returns (address);\\n}\\n\"\r\n    },\r\n    \"contracts/interfaces/IVouchers.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: LGPL-3.0-or-later\\npragma solidity 0.7.6;\\n\\nimport \\\"@openzeppelin/contracts/token/ERC721/IERC721.sol\\\";\\nimport \\\"@openzeppelin/contracts/token/ERC721/IERC721Metadata.sol\\\";\\n\\ninterface IVouchers is IERC721, IERC721Metadata {\\n    /**\\n     * @notice Pause the Cashier && the Voucher Kernel contracts in case of emergency.\\n     * All functions related to creating new batch, requestVoucher or withdraw will be paused, hence cannot be executed.\\n     * There is special function for withdrawing funds if contract is paused.\\n     */\\n    function pause() external;\\n\\n    /**\\n     * @notice Unpause the Cashier && the Voucher Kernel contracts.\\n     * All functions related to creating new batch, requestVoucher or withdraw will be unpaused.\\n     */\\n    function unpause() external;\\n\\n    /**\\n     * @notice Function to mint tokens.\\n     * @dev ERC-721\\n     * @param _to The address that will receive the minted tokens.\\n     * @param _tokenId The token id to mint.\\n     * @return A boolean that indicates if the operation was successful.\\n     */\\n    function mint(address _to, uint256 _tokenId) external returns (bool);\\n\\n    /**\\n     * @notice Set the address of the VoucherKernel contract\\n     * @param _voucherKernelAddress The address of the Voucher Kernel contract\\n     */\\n    function setVoucherKernelAddress(address _voucherKernelAddress) external;\\n\\n    /**\\n     * @notice Set the address of the Cashier contract\\n     * @param _cashierAddress   The address of the Cashier contract\\n     */\\n    function setCashierAddress(address _cashierAddress) external;\\n\\n    /**\\n     * @notice Get the address of Voucher Kernel contract\\n     * @return Address of Voucher Kernel contract\\n     */\\n    function getVoucherKernelAddress() external view returns (address);\\n\\n    /**\\n     * @notice Get the address of Cashier contract\\n     * @return Address of Cashier address\\n     */\\n    function getCashierAddress() external view returns (address);\\n}\\n\"\r\n    },\r\n    \"contracts/interfaces/IVoucherKernel.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: LGPL-3.0-or-later\\npragma solidity 0.7.6;\\n\\nimport \\\"./../UsingHelpers.sol\\\";\\n\\ninterface IVoucherKernel {\\n    /**\\n     * @notice Pause the process of interaction with voucherID's (ERC-721), in case of emergency.\\n     * Only Cashier contract is in control of this function.\\n     */\\n    function pause() external;\\n\\n    /**\\n     * @notice Unpause the process of interaction with voucherID's (ERC-721).\\n     * Only Cashier contract is in control of this function.\\n     */\\n    function unpause() external;\\n\\n    /**\\n     * @notice Creating a new promise for goods or services.\\n     * Can be reused, e.g. for making different batches of these (but not in prototype).\\n     * @param _seller      seller of the promise\\n     * @param _validFrom   Start of valid period\\n     * @param _validTo     End of valid period\\n     * @param _price       Price (payment amount)\\n     * @param _depositSe   Seller's deposit\\n     * @param _depositBu   Buyer's deposit\\n     */\\n    function createTokenSupplyId(\\n        address _seller,\\n        uint256 _validFrom,\\n        uint256 _validTo,\\n        uint256 _price,\\n        uint256 _depositSe,\\n        uint256 _depositBu,\\n        uint256 _quantity\\n    ) external returns (uint256);\\n\\n    /**\\n     * @notice Creates a Payment method struct recording the details on how the seller requires to receive Price and Deposits for a certain Voucher Set.\\n     * @param _tokenIdSupply     _tokenIdSupply of the voucher set this is related to\\n     * @param _paymentMethod  might be ETHETH, ETHTKN, TKNETH or TKNTKN\\n     * @param _tokenPrice   token address which will hold the funds for the price of the voucher\\n     * @param _tokenDeposits   token address which will hold the funds for the deposits of the voucher\\n     */\\n    function createPaymentMethod(\\n        uint256 _tokenIdSupply,\\n        PaymentMethod _paymentMethod,\\n        address _tokenPrice,\\n        address _tokenDeposits\\n    ) external;\\n\\n    /**\\n     * @notice Mark voucher token that the payment was released\\n     * @param _tokenIdVoucher   ID of the voucher token\\n     */\\n    function setPaymentReleased(uint256 _tokenIdVoucher) external;\\n\\n    /**\\n     * @notice Mark voucher token that the deposits were released\\n     * @param _tokenIdVoucher   ID of the voucher token\\n     */\\n    function setDepositsReleased(uint256 _tokenIdVoucher) external;\\n\\n    /**\\n     * @notice Redemption of the vouchers promise\\n     * @param _tokenIdVoucher   ID of the voucher\\n     * @param _messageSender owner of the voucher\\n     */\\n    function redeem(uint256 _tokenIdVoucher, address _messageSender) external;\\n\\n    /**\\n     * @notice Refunding a voucher\\n     * @param _tokenIdVoucher   ID of the voucher\\n     * @param _messageSender owner of the voucher\\n     */\\n    function refund(uint256 _tokenIdVoucher, address _messageSender) external;\\n\\n    /**\\n     * @notice Issue a complain for a voucher\\n     * @param _tokenIdVoucher   ID of the voucher\\n     * @param _messageSender owner of the voucher\\n     */\\n    function complain(uint256 _tokenIdVoucher, address _messageSender) external;\\n\\n    /**\\n     * @notice Cancel/Fault transaction by the Seller, admitting to a fault or backing out of the deal\\n     * @param _tokenIdVoucher   ID of the voucher\\n     * @param _messageSender owner of the voucher set (seller)\\n     */\\n    function cancelOrFault(uint256 _tokenIdVoucher, address _messageSender)\\n        external;\\n\\n    /**\\n     * @notice Cancel/Fault transaction by the Seller, cancelling the remaining uncommitted voucher set so that seller prevents buyers from committing to vouchers for items no longer in exchange.\\n     * @param _tokenIdSupply   ID of the voucher\\n     * @param _issuer   owner of the voucher\\n     */\\n    function cancelOrFaultVoucherSet(uint256 _tokenIdSupply, address _issuer)\\n        external\\n        returns (uint256);\\n\\n    /**\\n     * @notice Fill Voucher Order, iff funds paid, then extract & mint NFT to the voucher holder\\n     * @param _tokenIdSupply   ID of the supply token (ERC-1155)\\n     * @param _issuer          Address of the token's issuer\\n     * @param _holder          Address of the recipient of the voucher (ERC-721)\\n     * @param _paymentMethod   method being used for that particular order that needs to be fulfilled\\n     */\\n    function fillOrder(\\n        uint256 _tokenIdSupply,\\n        address _issuer,\\n        address _holder,\\n        PaymentMethod _paymentMethod\\n    ) external;\\n\\n    /**\\n     * @notice Mark voucher token as expired\\n     * @param _tokenIdVoucher   ID of the voucher token\\n     */\\n    function triggerExpiration(uint256 _tokenIdVoucher) external;\\n\\n    /**\\n     * @notice Mark voucher token to the final status\\n     * @param _tokenIdVoucher   ID of the voucher token\\n     */\\n    function triggerFinalizeVoucher(uint256 _tokenIdVoucher) external;\\n\\n    /**\\n     * @notice Set the address of the new holder of a _tokenIdSupply on transfer\\n     * @param _tokenIdSupply   _tokenIdSupply which will be transferred\\n     * @param _newSeller   new holder of the supply\\n     */\\n    function setSupplyHolderOnTransfer(\\n        uint256 _tokenIdSupply,\\n        address _newSeller\\n    ) external;\\n\\n    /**\\n     * @notice Set the general cancelOrFault period, should be used sparingly as it has significant consequences. Here done simply for demo purposes.\\n     * @param _cancelFaultPeriod   the new value for cancelOrFault period (in number of seconds)\\n     */\\n    function setCancelFaultPeriod(uint256 _cancelFaultPeriod) external;\\n\\n    /**\\n     * @notice Set the address of the Boson Router contract\\n     * @param _bosonRouterAddress   The address of the BR contract\\n     */\\n    function setBosonRouterAddress(address _bosonRouterAddress) external;\\n\\n    /**\\n     * @notice Set the address of the Cashier contract\\n     * @param _cashierAddress   The address of the Cashier contract\\n     */\\n    function setCashierAddress(address _cashierAddress) external;\\n\\n    /**\\n     * @notice Set the address of the Vouchers token contract, an ERC721 contract\\n     * @param _voucherTokenAddress   The address of the Vouchers token contract\\n     */\\n    function setVoucherTokenAddress(address _voucherTokenAddress) external;\\n\\n    /**\\n     * @notice Set the address of the Voucher Sets token contract, an ERC1155 contract\\n     * @param _voucherSetTokenAddress   The address of the Voucher Sets token contract\\n     */\\n    function setVoucherSetTokenAddress(address _voucherSetTokenAddress)\\n        external;\\n\\n    /**\\n     * @notice Set the general complain period, should be used sparingly as it has significant consequences. Here done simply for demo purposes.\\n     * @param _complainPeriod   the new value for complain period (in number of seconds)\\n     */\\n    function setComplainPeriod(uint256 _complainPeriod) external;\\n\\n    /**\\n     * @notice Get the promise ID at specific index\\n     * @param _idx  Index in the array of promise keys\\n     * @return      Promise ID\\n     */\\n    function getPromiseKey(uint256 _idx) external view returns (bytes32);\\n\\n    /**\\n     * @notice Get the address of the token where the price for the supply is held\\n     * @param _tokenIdSupply   ID of the voucher token\\n     * @return                  Address of the token\\n     */\\n    function getVoucherPriceToken(uint256 _tokenIdSupply)\\n        external\\n        view\\n        returns (address);\\n\\n    /**\\n     * @notice Get the address of the token where the deposits for the supply are held\\n     * @param _tokenIdSupply   ID of the voucher token\\n     * @return                  Address of the token\\n     */\\n    function getVoucherDepositToken(uint256 _tokenIdSupply)\\n        external\\n        view\\n        returns (address);\\n\\n    /**\\n     * @notice Get Buyer costs required to make an order for a supply token\\n     * @param _tokenIdSupply   ID of the supply token\\n     * @return                  returns a tuple (Payment amount, Buyer's deposit)\\n     */\\n    function getBuyerOrderCosts(uint256 _tokenIdSupply)\\n        external\\n        view\\n        returns (uint256, uint256);\\n\\n    /**\\n     * @notice Get Seller deposit\\n     * @param _tokenIdSupply   ID of the supply token\\n     * @return                  returns sellers deposit\\n     */\\n    function getSellerDeposit(uint256 _tokenIdSupply)\\n        external\\n        view\\n        returns (uint256);\\n\\n    /**\\n     * @notice Get the promise ID from a voucher token\\n     * @param _tokenIdVoucher   ID of the voucher token\\n     * @return                  ID of the promise\\n     */\\n    function getIdSupplyFromVoucher(uint256 _tokenIdVoucher)\\n        external\\n        pure\\n        returns (uint256);\\n\\n    /**\\n     * @notice Get the promise ID from a voucher token\\n     * @param _tokenIdVoucher   ID of the voucher token\\n     * @return                  ID of the promise\\n     */\\n    function getPromiseIdFromVoucherId(uint256 _tokenIdVoucher)\\n        external\\n        view\\n        returns (bytes32);\\n\\n    /**\\n     * @notice Get all necessary funds for a supply token\\n     * @param _tokenIdSupply   ID of the supply token\\n     * @return                  returns a tuple (Payment amount, Seller's deposit, Buyer's deposit)\\n     */\\n    function getOrderCosts(uint256 _tokenIdSupply)\\n        external\\n        view\\n        returns (\\n            uint256,\\n            uint256,\\n            uint256\\n        );\\n\\n    /**\\n     * @notice Get the remaining quantity left in supply of tokens (e.g ERC-721 left in ERC-1155) of an account\\n     * @param _tokenSupplyId  Token supply ID\\n     * @param _owner    holder of the Token Supply\\n     * @return          remaining quantity\\n     */\\n    function getRemQtyForSupply(uint256 _tokenSupplyId, address _owner)\\n        external\\n        view\\n        returns (uint256);\\n\\n    /**\\n     * @notice Get the payment method for a particular _tokenIdSupply\\n     * @param _tokenIdSupply   ID of the voucher supply token\\n     * @return                  payment method\\n     */\\n    function getVoucherPaymentMethod(uint256 _tokenIdSupply)\\n        external\\n        view\\n        returns (PaymentMethod);\\n\\n    /**\\n     * @notice Get the current status of a voucher\\n     * @param _tokenIdVoucher   ID of the voucher token\\n     * @return                  Status of the voucher (via enum)\\n     */\\n    function getVoucherStatus(uint256 _tokenIdVoucher)\\n        external\\n        view\\n        returns (\\n            uint8,\\n            bool,\\n            bool,\\n            uint256,\\n            uint256\\n        );\\n\\n    /**\\n     * @notice Get the holder of a supply\\n     * @param _tokenIdSupply    _tokenIdSupply ID of the order (aka VoucherSet) which is mapped to the corresponding Promise.\\n     * @return                  Address of the holder\\n     */\\n    function getSupplyHolder(uint256 _tokenIdSupply)\\n        external\\n        view\\n        returns (address);\\n\\n    /**\\n     * @notice Get the holder of a voucher\\n     * @param _tokenIdVoucher   ID of the voucher token\\n     * @return                  Address of the holder\\n     */\\n    function getVoucherHolder(uint256 _tokenIdVoucher)\\n        external\\n        view\\n        returns (address);\\n\\n    /**\\n     * @notice Checks whether a voucher is in valid period for redemption (between start date and end date)\\n     * @param _tokenIdVoucher ID of the voucher token\\n     */\\n    function isInValidityPeriod(uint256 _tokenIdVoucher)\\n        external\\n        view\\n        returns (bool);\\n\\n    /**\\n     * @notice Checks whether a voucher is in valid state to be transferred. If either payments or deposits are released, voucher could not be transferred\\n     * @param _tokenIdVoucher ID of the voucher token\\n     */\\n    function isVoucherTransferable(uint256 _tokenIdVoucher)\\n        external\\n        view\\n        returns (bool);\\n\\n    /**\\n     * @notice Get address of the Boson Router contract to which this contract points\\n     * @return Address of the Boson Router contract\\n     */\\n    function getBosonRouterAddress() external view returns (address);\\n\\n    /**\\n     * @notice Get address of the Cashier contract to which this contract points\\n     * @return Address of the Cashier contract\\n     */\\n    function getCashierAddress() external view returns (address);\\n\\n    /**\\n     * @notice Get the token nonce for a seller\\n     * @param _seller Address of the seller\\n     * @return The seller's\\n     */\\n    function getTokenNonce(address _seller) external view returns (uint256);\\n\\n    /**\\n     * @notice Get the current type Id\\n     * @return type Id\\n     */\\n    function getTypeId() external view returns (uint256);\\n\\n    /**\\n     * @notice Get the complain period\\n     * @return complain period\\n     */\\n    function getComplainPeriod() external view returns (uint256);\\n\\n    /**\\n     * @notice Get the cancel or fault period\\n     * @return cancel or fault period\\n     */\\n    function getCancelFaultPeriod() external view returns (uint256);\\n\\n    /**\\n     * @notice Get promise data not retrieved by other accessor functions\\n     * @param _promiseKey   ID of the promise\\n     * @return promise data not returned by other accessor methods\\n     */\\n    function getPromiseData(bytes32 _promiseKey)\\n        external\\n        view\\n        returns (\\n            bytes32,\\n            uint256,\\n            uint256,\\n            uint256,\\n            uint256\\n        );\\n\\n    /**\\n     * @notice Get the promise ID from a voucher set\\n     * @param _tokenIdSupply   ID of the voucher token\\n     * @return                  ID of the promise\\n     */\\n    function getPromiseIdFromSupplyId(uint256 _tokenIdSupply)\\n        external\\n        view\\n        returns (bytes32);\\n\\n    /**\\n     * @notice Get the address of the Vouchers token contract, an ERC721 contract\\n     * @return Address of Vouchers contract\\n     */\\n    function getVoucherTokenAddress() external view returns (address);\\n\\n    /**\\n     * @notice Get the address of the VoucherSets token contract, an ERC155 contract\\n     * @return Address of VoucherSets contract\\n     */\\n    function getVoucherSetTokenAddress() external view returns (address);\\n}\\n\"\r\n    },\r\n    \"contracts/UsingHelpers.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: LGPL-3.0-or-later\\n\\npragma solidity 0.7.6;\\n\\n// Those are the payment methods we are using throughout the system.\\n// Depending on how to user choose to interact with it's funds we store the method, so we could distribute its tokens afterwise\\nenum PaymentMethod {\\n    ETHETH,\\n    ETHTKN,\\n    TKNETH,\\n    TKNTKN\\n}\\n\\nenum VoucherState {FINAL, CANCEL_FAULT, COMPLAIN, EXPIRE, REFUND, REDEEM, COMMIT}\\n/*  Status of the voucher in 8 bits:\\n    [6:COMMITTED] [5:REDEEMED] [4:REFUNDED] [3:EXPIRED] [2:COMPLAINED] [1:CANCELORFAULT] [0:FINAL]\\n*/\\n\\nuint8 constant ONE = 1;\\n\\nstruct VoucherDetails {\\n    uint256 tokenIdSupply;\\n    uint256 tokenIdVoucher;\\n    address issuer;\\n    address holder;\\n    uint256 price;\\n    uint256 depositSe;\\n    uint256 depositBu;\\n    uint256 price2pool;\\n    uint256 deposit2pool;\\n    uint256 price2issuer;\\n    uint256 deposit2issuer;\\n    uint256 price2holder;\\n    uint256 deposit2holder;\\n    PaymentMethod paymentMethod;\\n    VoucherStatus currStatus;\\n}\\n\\nstruct VoucherStatus {\\n    uint8 status;\\n    bool isPaymentReleased;\\n    bool isDepositsReleased;\\n    uint256 complainPeriodStart;\\n    uint256 cancelFaultPeriodStart;\\n}\\n\\n/**\\n    * @notice Based on its lifecycle, voucher can have many different statuses. Checks whether a voucher is in Committed state.\\n    * @param _status current status of a voucher.\\n    */\\nfunction isStateCommitted(uint8 _status) pure returns (bool) {\\n    return _status == determineStatus(0, VoucherState.COMMIT);\\n}\\n\\n/**\\n    * @notice Based on its lifecycle, voucher can have many different statuses. Checks whether a voucher is in RedemptionSigned state.\\n    * @param _status current status of a voucher.\\n    */\\nfunction isStateRedemptionSigned(uint8 _status)\\n    pure\\n    returns (bool)\\n{\\n    return _status == determineStatus(determineStatus(0, VoucherState.COMMIT), VoucherState.REDEEM);\\n}\\n\\n/**\\n    * @notice Based on its lifecycle, voucher can have many different statuses. Checks whether a voucher is in Refunded state.\\n    * @param _status current status of a voucher.\\n    */\\nfunction isStateRefunded(uint8 _status) pure returns (bool) {\\n    return _status == determineStatus(determineStatus(0, VoucherState.COMMIT), VoucherState.REFUND);\\n}\\n\\n/**\\n    * @notice Based on its lifecycle, voucher can have many different statuses. Checks whether a voucher is in Expired state.\\n    * @param _status current status of a voucher.\\n    */\\nfunction isStateExpired(uint8 _status) pure returns (bool) {\\n    return _status == determineStatus(determineStatus(0, VoucherState.COMMIT), VoucherState.EXPIRE);\\n}\\n\\n/**\\n    * @notice Based on its lifecycle, voucher can have many different statuses. Checks the current status a voucher is at.\\n    * @param _status current status of a voucher.\\n    * @param _idx status to compare.\\n    */\\nfunction isStatus(uint8 _status, VoucherState _idx) pure returns (bool) {\\n    return (_status >> uint8(_idx)) & ONE == 1;\\n}\\n\\n/**\\n    * @notice Set voucher status.\\n    * @param _status previous status.\\n    * @param _changeIdx next status.\\n    */\\nfunction determineStatus(uint8 _status, VoucherState _changeIdx)\\n    pure\\n    returns (uint8)\\n{\\n    return _status | (ONE << uint8(_changeIdx));\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/utils/Context.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity >=0.6.0 <0.8.0;\\n\\n/*\\n * @dev Provides information about the current execution context, including the\\n * sender of the transaction and its data. While these are generally available\\n * via msg.sender and msg.data, they should not be accessed in such a direct\\n * manner, since when dealing with GSN meta-transactions the account sending and\\n * paying for execution may not be the actual sender (as far as an application\\n * is concerned).\\n *\\n * This contract is only required for intermediate, library-like contracts.\\n */\\nabstract contract Context {\\n    function _msgSender() internal view virtual returns (address payable) {\\n        return msg.sender;\\n    }\\n\\n    function _msgData() internal view virtual returns (bytes memory) {\\n        this; // silence state mutability warning without generating bytecode - see https://github.com/ethereum/solidity/issues/2691\\n        return msg.data;\\n    }\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/token/ERC1155/IERC1155.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.7.0;\\n\\nimport \\\"../../introspection/IERC165.sol\\\";\\n\\n/**\\n * @dev Required interface of an ERC1155 compliant contract, as defined in the\\n * https://eips.ethereum.org/EIPS/eip-1155[EIP].\\n *\\n * _Available since v3.1._\\n */\\ninterface IERC1155 is IERC165 {\\n    /**\\n     * @dev Emitted when `value` tokens of token type `id` are transferred from `from` to `to` by `operator`.\\n     */\\n    event TransferSingle(address indexed operator, address indexed from, address indexed to, uint256 id, uint256 value);\\n\\n    /**\\n     * @dev Equivalent to multiple {TransferSingle} events, where `operator`, `from` and `to` are the same for all\\n     * transfers.\\n     */\\n    event TransferBatch(address indexed operator, address indexed from, address indexed to, uint256[] ids, uint256[] values);\\n\\n    /**\\n     * @dev Emitted when `account` grants or revokes permission to `operator` to transfer their tokens, according to\\n     * `approved`.\\n     */\\n    event ApprovalForAll(address indexed account, address indexed operator, bool approved);\\n\\n    /**\\n     * @dev Emitted when the URI for token type `id` changes to `value`, if it is a non-programmatic URI.\\n     *\\n     * If an {URI} event was emitted for `id`, the standard\\n     * https://eips.ethereum.org/EIPS/eip-1155#metadata-extensions[guarantees] that `value` will equal the value\\n     * returned by {IERC1155MetadataURI-uri}.\\n     */\\n    event URI(string value, uint256 indexed id);\\n\\n    /**\\n     * @dev Returns the amount of tokens of token type `id` owned by `account`.\\n     *\\n     * Requirements:\\n     *\\n     * - `account` cannot be the zero address.\\n     */\\n    function balanceOf(address account, uint256 id) external view returns (uint256);\\n\\n    /**\\n     * @dev xref:ROOT:erc1155.adoc#batch-operations[Batched] version of {balanceOf}.\\n     *\\n     * Requirements:\\n     *\\n     * - `accounts` and `ids` must have the same length.\\n     */\\n    function balanceOfBatch(address[] calldata accounts, uint256[] calldata ids) external view returns (uint256[] memory);\\n\\n    /**\\n     * @dev Grants or revokes permission to `operator` to transfer the caller's tokens, according to `approved`,\\n     *\\n     * Emits an {ApprovalForAll} event.\\n     *\\n     * Requirements:\\n     *\\n     * - `operator` cannot be the caller.\\n     */\\n    function setApprovalForAll(address operator, bool approved) external;\\n\\n    /**\\n     * @dev Returns true if `operator` is approved to transfer ``account``'s tokens.\\n     *\\n     * See {setApprovalForAll}.\\n     */\\n    function isApprovedForAll(address account, address operator) external view returns (bool);\\n\\n    /**\\n     * @dev Transfers `amount` tokens of token type `id` from `from` to `to`.\\n     *\\n     * Emits a {TransferSingle} event.\\n     *\\n     * Requirements:\\n     *\\n     * - `to` cannot be the zero address.\\n     * - If the caller is not `from`, it must be have been approved to spend ``from``'s tokens via {setApprovalForAll}.\\n     * - `from` must have a balance of tokens of type `id` of at least `amount`.\\n     * - If `to` refers to a smart contract, it must implement {IERC1155Receiver-onERC1155Received} and return the\\n     * acceptance magic value.\\n     */\\n    function safeTransferFrom(address from, address to, uint256 id, uint256 amount, bytes calldata data) external;\\n\\n    /**\\n     * @dev xref:ROOT:erc1155.adoc#batch-operations[Batched] version of {safeTransferFrom}.\\n     *\\n     * Emits a {TransferBatch} event.\\n     *\\n     * Requirements:\\n     *\\n     * - `ids` and `amounts` must have the same length.\\n     * - If `to` refers to a smart contract, it must implement {IERC1155Receiver-onERC1155BatchReceived} and return the\\n     * acceptance magic value.\\n     */\\n    function safeBatchTransferFrom(address from, address to, uint256[] calldata ids, uint256[] calldata amounts, bytes calldata data) external;\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/token/ERC1155/IERC1155MetadataURI.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.7.0;\\n\\nimport \\\"./IERC1155.sol\\\";\\n\\n/**\\n * @dev Interface of the optional ERC1155MetadataExtension interface, as defined\\n * in the https://eips.ethereum.org/EIPS/eip-1155#metadata-extensions[EIP].\\n *\\n * _Available since v3.1._\\n */\\ninterface IERC1155MetadataURI is IERC1155 {\\n    /**\\n     * @dev Returns the URI for token type `id`.\\n     *\\n     * If the `\\\\{id\\\\}` substring is present in the URI, it must be replaced by\\n     * clients with the actual token type ID.\\n     */\\n    function uri(uint256 id) external view returns (string memory);\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/introspection/IERC165.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.7.0;\\n\\n/**\\n * @dev Interface of the ERC165 standard, as defined in the\\n * https://eips.ethereum.org/EIPS/eip-165[EIP].\\n *\\n * Implementers can declare support of contract interfaces, which can then be\\n * queried by others ({ERC165Checker}).\\n *\\n * For an implementation, see {ERC165}.\\n */\\ninterface IERC165 {\\n    /**\\n     * @dev Returns true if this contract implements the interface defined by\\n     * `interfaceId`. See the corresponding\\n     * https://eips.ethereum.org/EIPS/eip-165#how-interfaces-are-identified[EIP section]\\n     * to learn more about how these ids are created.\\n     *\\n     * This function call must use less than 30 000 gas.\\n     */\\n    function supportsInterface(bytes4 interfaceId) external view returns (bool);\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/token/ERC721/IERC721.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.7.0;\\n\\nimport \\\"../../introspection/IERC165.sol\\\";\\n\\n/**\\n * @dev Required interface of an ERC721 compliant contract.\\n */\\ninterface IERC721 is IERC165 {\\n    /**\\n     * @dev Emitted when `tokenId` token is transferred from `from` to `to`.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 indexed tokenId);\\n\\n    /**\\n     * @dev Emitted when `owner` enables `approved` to manage the `tokenId` token.\\n     */\\n    event Approval(address indexed owner, address indexed approved, uint256 indexed tokenId);\\n\\n    /**\\n     * @dev Emitted when `owner` enables or disables (`approved`) `operator` to manage all of its assets.\\n     */\\n    event ApprovalForAll(address indexed owner, address indexed operator, bool approved);\\n\\n    /**\\n     * @dev Returns the number of tokens in ``owner``'s account.\\n     */\\n    function balanceOf(address owner) external view returns (uint256 balance);\\n\\n    /**\\n     * @dev Returns the owner of the `tokenId` token.\\n     *\\n     * Requirements:\\n     *\\n     * - `tokenId` must exist.\\n     */\\n    function ownerOf(uint256 tokenId) external view returns (address owner);\\n\\n    /**\\n     * @dev Safely transfers `tokenId` token from `from` to `to`, checking first that contract recipients\\n     * are aware of the ERC721 protocol to prevent tokens from being forever locked.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` cannot be the zero address.\\n     * - `to` cannot be the zero address.\\n     * - `tokenId` token must exist and be owned by `from`.\\n     * - If the caller is not `from`, it must be have been allowed to move this token by either {approve} or {setApprovalForAll}.\\n     * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function safeTransferFrom(address from, address to, uint256 tokenId) external;\\n\\n    /**\\n     * @dev Transfers `tokenId` token from `from` to `to`.\\n     *\\n     * WARNING: Usage of this method is discouraged, use {safeTransferFrom} whenever possible.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` cannot be the zero address.\\n     * - `to` cannot be the zero address.\\n     * - `tokenId` token must be owned by `from`.\\n     * - If the caller is not `from`, it must be approved to move this token by either {approve} or {setApprovalForAll}.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(address from, address to, uint256 tokenId) external;\\n\\n    /**\\n     * @dev Gives permission to `to` to transfer `tokenId` token to another account.\\n     * The approval is cleared when the token is transferred.\\n     *\\n     * Only a single account can be approved at a time, so approving the zero address clears previous approvals.\\n     *\\n     * Requirements:\\n     *\\n     * - The caller must own the token or be an approved operator.\\n     * - `tokenId` must exist.\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address to, uint256 tokenId) external;\\n\\n    /**\\n     * @dev Returns the account approved for `tokenId` token.\\n     *\\n     * Requirements:\\n     *\\n     * - `tokenId` must exist.\\n     */\\n    function getApproved(uint256 tokenId) external view returns (address operator);\\n\\n    /**\\n     * @dev Approve or remove `operator` as an operator for the caller.\\n     * Operators can call {transferFrom} or {safeTransferFrom} for any token owned by the caller.\\n     *\\n     * Requirements:\\n     *\\n     * - The `operator` cannot be the caller.\\n     *\\n     * Emits an {ApprovalForAll} event.\\n     */\\n    function setApprovalForAll(address operator, bool _approved) external;\\n\\n    /**\\n     * @dev Returns if the `operator` is allowed to manage all of the assets of `owner`.\\n     *\\n     * See {setApprovalForAll}\\n     */\\n    function isApprovedForAll(address owner, address operator) external view returns (bool);\\n\\n    /**\\n      * @dev Safely transfers `tokenId` token from `from` to `to`.\\n      *\\n      * Requirements:\\n      *\\n      * - `from` cannot be the zero address.\\n      * - `to` cannot be the zero address.\\n      * - `tokenId` token must exist and be owned by `from`.\\n      * - If the caller is not `from`, it must be approved to move this token by either {approve} or {setApprovalForAll}.\\n      * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer.\\n      *\\n      * Emits a {Transfer} event.\\n      */\\n    function safeTransferFrom(address from, address to, uint256 tokenId, bytes calldata data) external;\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/token/ERC721/IERC721Metadata.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.7.0;\\n\\nimport \\\"./IERC721.sol\\\";\\n\\n/**\\n * @title ERC-721 Non-Fungible Token Standard, optional metadata extension\\n * @dev See https://eips.ethereum.org/EIPS/eip-721\\n */\\ninterface IERC721Metadata is IERC721 {\\n\\n    /**\\n     * @dev Returns the token collection name.\\n     */\\n    function name() external view returns (string memory);\\n\\n    /**\\n     * @dev Returns the token collection symbol.\\n     */\\n    function symbol() external view returns (string memory);\\n\\n    /**\\n     * @dev Returns the Uniform Resource Identifier (URI) for `tokenId` token.\\n     */\\n    function tokenURI(uint256 tokenId) external view returns (string memory);\\n}\\n\"\r\n    }\r\n  },\r\n  \"settings\": {\r\n    \"optimizer\": {\r\n      \"enabled\": true,\r\n      \"runs\": 200\r\n    },\r\n    \"outputSelection\": {\r\n      \"*\": {\r\n        \"*\": [\r\n          \"evm.bytecode\",\r\n          \"evm.deployedBytecode\",\r\n          \"devdoc\",\r\n          \"userdoc\",\r\n          \"metadata\",\r\n          \"abi\"\r\n        ]\r\n      }\r\n    },\r\n    \"libraries\": {}\r\n  }\r\n}}","ABI":"[{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_bosonRouterAddress\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_cashierAddress\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_voucherSetTokenAddress\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_voucherTokenAddress\",\"type\":\"address\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"_newBosonRouter\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"_triggeredBy\",\"type\":\"address\"}],\"name\":\"LogBosonRouterSet\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"_newCancelFaultPeriod\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"_triggeredBy\",\"type\":\"address\"}],\"name\":\"LogCancelFaultPeriodChanged\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"_newCashier\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"_triggeredBy\",\"type\":\"address\"}],\"name\":\"LogCashierSet\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"_newComplainPeriod\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"_triggeredBy\",\"type\":\"address\"}],\"name\":\"LogComplainPeriodChanged\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"_tokenIdVoucher\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"_triggeredBy\",\"type\":\"address\"}],\"name\":\"LogExpirationTriggered\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"_tokenIdVoucher\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"_triggeredBy\",\"type\":\"address\"}],\"name\":\"LogFinalizeVoucher\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"_tokenIdVoucher\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint8\",\"name\":\"_type\",\"type\":\"uint8\"}],\"name\":\"LogFundsReleased\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"_promiseId\",\"type\":\"bytes32\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"_nonce\",\"type\":\"uint256\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"_seller\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"_validFrom\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"_validTo\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"_idx\",\"type\":\"uint256\"}],\"name\":\"LogPromiseCreated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"_tokenIdSupply\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"_tokenIdVoucher\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"_issuer\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"_holder\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"bytes32\",\"name\":\"_promiseId\",\"type\":\"bytes32\"}],\"name\":\"LogVoucherCommitted\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"_tokenIdVoucher\",\"type\":\"uint256\"}],\"name\":\"LogVoucherComplain\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"_tokenIdVoucher\",\"type\":\"uint256\"}],\"name\":\"LogVoucherFaultCancel\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"_tokenIdVoucher\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"_holder\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"bytes32\",\"name\":\"_promiseId\",\"type\":\"bytes32\"}],\"name\":\"LogVoucherRedeemed\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"_tokenIdVoucher\",\"type\":\"uint256\"}],\"name\":\"LogVoucherRefunded\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"_tokenIdSupply\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"_issuer\",\"type\":\"address\"}],\"name\":\"LogVoucherSetFaultCancel\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"_newTokenContract\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"_triggeredBy\",\"type\":\"address\"}],\"name\":\"LogVoucherSetTokenContractSet\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"_newTokenContract\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"_triggeredBy\",\"type\":\"address\"}],\"name\":\"LogVoucherTokenContractSet\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"Paused\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"Unpaused\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_tokenIdVoucher\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"_messageSender\",\"type\":\"address\"}],\"name\":\"cancelOrFault\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_tokenIdSupply\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"_issuer\",\"type\":\"address\"}],\"name\":\"cancelOrFaultVoucherSet\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_tokenIdVoucher\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"_messageSender\",\"type\":\"address\"}],\"name\":\"complain\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_tokenIdSupply\",\"type\":\"uint256\"},{\"internalType\":\"enum PaymentMethod\",\"name\":\"_paymentMethod\",\"type\":\"uint8\"},{\"internalType\":\"address\",\"name\":\"_tokenPrice\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_tokenDeposits\",\"type\":\"address\"}],\"name\":\"createPaymentMethod\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_seller\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_validFrom\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_validTo\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_price\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_depositSe\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_depositBu\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_quantity\",\"type\":\"uint256\"}],\"name\":\"createTokenSupplyId\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_tokenIdSupply\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"_issuer\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_holder\",\"type\":\"address\"},{\"internalType\":\"enum PaymentMethod\",\"name\":\"_paymentMethod\",\"type\":\"uint8\"}],\"name\":\"fillOrder\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getBosonRouterAddress\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_tokenIdSupply\",\"type\":\"uint256\"}],\"name\":\"getBuyerOrderCosts\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getCancelFaultPeriod\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getCashierAddress\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getComplainPeriod\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_tokenIdVoucher\",\"type\":\"uint256\"}],\"name\":\"getIdSupplyFromVoucher\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_tokenIdSupply\",\"type\":\"uint256\"}],\"name\":\"getOrderCosts\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"_promiseKey\",\"type\":\"bytes32\"}],\"name\":\"getPromiseData\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_tokenIdSupply\",\"type\":\"uint256\"}],\"name\":\"getPromiseIdFromSupplyId\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_tokenIdVoucher\",\"type\":\"uint256\"}],\"name\":\"getPromiseIdFromVoucherId\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_idx\",\"type\":\"uint256\"}],\"name\":\"getPromiseKey\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_tokenSupplyId\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"_tokenSupplyOwner\",\"type\":\"address\"}],\"name\":\"getRemQtyForSupply\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_tokenIdSupply\",\"type\":\"uint256\"}],\"name\":\"getSellerDeposit\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_tokenIdSupply\",\"type\":\"uint256\"}],\"name\":\"getSupplyHolder\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_seller\",\"type\":\"address\"}],\"name\":\"getTokenNonce\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getTypeId\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_tokenIdSupply\",\"type\":\"uint256\"}],\"name\":\"getVoucherDepositToken\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_tokenIdVoucher\",\"type\":\"uint256\"}],\"name\":\"getVoucherHolder\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_tokenIdSupply\",\"type\":\"uint256\"}],\"name\":\"getVoucherPaymentMethod\",\"outputs\":[{\"internalType\":\"enum PaymentMethod\",\"name\":\"\",\"type\":\"uint8\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_tokenIdSupply\",\"type\":\"uint256\"}],\"name\":\"getVoucherPriceToken\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getVoucherSetTokenAddress\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_tokenIdVoucher\",\"type\":\"uint256\"}],\"name\":\"getVoucherStatus\",\"outputs\":[{\"internalType\":\"uint8\",\"name\":\"\",\"type\":\"uint8\"},{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"},{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getVoucherTokenAddress\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_tokenIdVoucher\",\"type\":\"uint256\"}],\"name\":\"isInValidityPeriod\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_tokenIdVoucher\",\"type\":\"uint256\"}],\"name\":\"isVoucherTransferable\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"pause\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"paused\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_tokenIdVoucher\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"_messageSender\",\"type\":\"address\"}],\"name\":\"redeem\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_tokenIdVoucher\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"_messageSender\",\"type\":\"address\"}],\"name\":\"refund\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_bosonRouterAddress\",\"type\":\"address\"}],\"name\":\"setBosonRouterAddress\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_cancelFaultPeriod\",\"type\":\"uint256\"}],\"name\":\"setCancelFaultPeriod\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_cashierAddress\",\"type\":\"address\"}],\"name\":\"setCashierAddress\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_complainPeriod\",\"type\":\"uint256\"}],\"name\":\"setComplainPeriod\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_tokenIdVoucher\",\"type\":\"uint256\"}],\"name\":\"setDepositsReleased\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_tokenIdVoucher\",\"type\":\"uint256\"}],\"name\":\"setPaymentReleased\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_tokenIdSupply\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"_newSeller\",\"type\":\"address\"}],\"name\":\"setSupplyHolderOnTransfer\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_voucherSetTokenAddress\",\"type\":\"address\"}],\"name\":\"setVoucherSetTokenAddress\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_voucherTokenAddress\",\"type\":\"address\"}],\"name\":\"setVoucherTokenAddress\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_tokenIdVoucher\",\"type\":\"uint256\"}],\"name\":\"triggerExpiration\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_tokenIdVoucher\",\"type\":\"uint256\"}],\"name\":\"triggerFinalizeVoucher\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"unpause\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}]","ContractName":"VoucherKernel","CompilerVersion":"v0.7.6+commit.7338295f","OptimizationUsed":"1","Runs":"200","ConstructorArguments":"00000000000000000000000048093736f038935c50dc587d14ba8c7857683293000000000000000000000000783a2e37c1c990435debbf3737d3e4e029f6aae7000000000000000000000000c7ce90b985cbd9b6d6daab012f2622e437a7101c00000000000000000000000017053d2b8a4bea8b878a99636e25b509e081e2e3","EVMVersion":"Default","Library":"","LicenseType":"","Proxy":"0","Implementation":"","SwarmSource":""}]}