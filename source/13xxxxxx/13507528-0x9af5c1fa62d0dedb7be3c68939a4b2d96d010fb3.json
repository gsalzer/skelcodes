{"status":"1","message":"OK","result":[{"SourceCode":"{{\r\n  \"language\": \"Solidity\",\r\n  \"sources\": {\r\n    \"contracts/ButtonToken.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: GPL-3.0-or-later\\npragma solidity 0.8.4;\\n\\nimport {IOracle} from \\\"./interfaces/IOracle.sol\\\";\\nimport \\\"./interfaces/IButtonToken.sol\\\";\\nimport {\\n    OwnableUpgradeable\\n} from \\\"@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol\\\";\\nimport {SafeERC20} from \\\"@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol\\\";\\nimport {Initializable} from \\\"@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol\\\";\\n\\n/**\\n * @title The ButtonToken ERC20 wrapper.\\n *\\n * @dev The ButtonToken is a rebasing wrapper for fixed balance ERC-20 tokens.\\n *\\n *      Users deposit the \\\"underlying\\\" (wrapped) tokens and are\\n *      minted button (wrapper) tokens with elastic balances\\n *      which change up or down when the value of the underlying token changes.\\n *\\n *      For example: Manny “wraps” 1 Ether when the price of Ether is $1800.\\n *      Manny receives 1800 ButtonEther tokens in return.\\n *      The overall value of their ButtonEther is the same as their original Ether,\\n *      however each unit is now priced at exactly $1. The next day,\\n *      the price of Ether changes to $1900. The ButtonEther system detects\\n *      this price change, and rebases such that Manny’s balance is\\n *      now 1900 ButtonEther tokens, still priced at $1 each.\\n *\\n *      The ButtonToken math is almost identical to Ampleforth's μFragments.\\n *\\n *      For AMPL, internal balances are represented using `gons` and\\n *          -> internal account balance     `_gonBalances[account]`\\n *          -> internal supply scalar       `gonsPerFragment = TOTAL_GONS / _totalSupply`\\n *          -> public balance               `_gonBalances[account] * gonsPerFragment`\\n *          -> public total supply          `_totalSupply`\\n *\\n *      In our case internal balances are stored as 'bits'.\\n *          -> underlying token unit price  `p_u = price / 10 ^ (PRICE_DECIMALS)`\\n *          -> total underlying tokens      `_totalUnderlying`\\n *          -> internal account balance     `_accountBits[account]`\\n *          -> internal supply scalar       `_bitsPerToken`\\n                                            ` = TOTAL_BITS / (MAX_UNDERLYING*p_u)`\\n *                                          ` = BITS_PER_UNDERLYING*(10^PRICE_DECIMALS)/price`\\n *                                          ` = PRICE_BITS / price`\\n *          -> user's underlying balance    `(_accountBits[account] / BITS_PER_UNDERLYING`\\n *          -> public balance               `_accountBits[account] * _bitsPerToken`\\n *          -> public total supply          `_totalUnderlying * p_u`\\n *\\n *\\n */\\ncontract ButtonToken is IButtonToken, Initializable, OwnableUpgradeable {\\n    // PLEASE READ BEFORE CHANGING ANY ACCOUNTING OR MATH\\n    // We make the following guarantees:\\n    // - If address 'A' transfers x button tokens to address 'B'.\\n    //   A's resulting external balance will be decreased by \\\"precisely\\\" x button tokens,\\n    //   and B's external balance will be \\\"precisely\\\" increased by x button tokens.\\n    // - If address 'A' deposits y underlying tokens,\\n    //   A's resulting underlying balance will increase by \\\"precisely\\\" y.\\n    // - If address 'A' withdraws y underlying tokens,\\n    //   A's resulting underlying balance will decrease by \\\"precisely\\\" y.\\n    //\\n    using SafeERC20 for IERC20;\\n\\n    //--------------------------------------------------------------------------\\n    // Constants\\n\\n    /// @dev The price has a 8 decimal point precision.\\n    uint256 public constant PRICE_DECIMALS = 8;\\n\\n    /// @dev Math constants.\\n    uint256 private constant MAX_UINT256 = type(uint256).max;\\n\\n    /// @dev The maximum units of the underlying token that can be deposited into this contract\\n    ///      ie) for a underlying token with 18 decimals, MAX_UNDERLYING is 1B tokens.\\n    uint256 public constant MAX_UNDERLYING = 1_000_000_000e18;\\n\\n    /// @dev TOTAL_BITS is a multiple of MAX_UNDERLYING so that {BITS_PER_UNDERLYING} is an integer.\\n    ///      Use the highest value that fits in a uint256 for max granularity.\\n    uint256 private constant TOTAL_BITS = MAX_UINT256 - (MAX_UINT256 % MAX_UNDERLYING);\\n\\n    /// @dev Number of BITS per unit of deposit.\\n    uint256 private constant BITS_PER_UNDERLYING = TOTAL_BITS / MAX_UNDERLYING;\\n\\n    /// @dev Number of BITS per unit of deposit * (1 USD).\\n    uint256 private constant PRICE_BITS = BITS_PER_UNDERLYING * (10**PRICE_DECIMALS);\\n\\n    /// @dev TRUE_MAX_PRICE = maximum integer < (sqrt(4*PRICE_BITS + 1) - 1) / 2\\n    ///      Setting MAX_PRICE to the closest two power which is just under TRUE_MAX_PRICE.\\n    uint256 public constant MAX_PRICE = (2**96 - 1); // (2^96) - 1\\n\\n    //--------------------------------------------------------------------------\\n    // Attributes\\n\\n    /// @inheritdoc IButtonWrapper\\n    address public override underlying;\\n\\n    /// @inheritdoc IButtonToken\\n    address public override oracle;\\n\\n    /// @inheritdoc IButtonToken\\n    uint256 public override lastPrice;\\n\\n    /// @dev Rebase counter\\n    uint256 _epoch;\\n\\n    /// @inheritdoc IERC20Metadata\\n    string public override name;\\n\\n    /// @inheritdoc IERC20Metadata\\n    string public override symbol;\\n\\n    /// @dev internal balance, bits issued per account\\n    mapping(address => uint256) private _accountBits;\\n\\n    /// @dev ERC20 allowances\\n    mapping(address => mapping(address => uint256)) private _allowances;\\n\\n    //--------------------------------------------------------------------------\\n    // Modifiers\\n    modifier validRecipient(address to) {\\n        require(to != address(0x0), \\\"ButtonToken: recipient zero address\\\");\\n        require(to != address(this), \\\"ButtonToken: recipient token address\\\");\\n        _;\\n    }\\n\\n    modifier onAfterRebase() {\\n        uint256 price;\\n        bool valid;\\n        (price, valid) = _queryPrice();\\n        if (valid) {\\n            _rebase(price);\\n        }\\n        _;\\n    }\\n\\n    //--------------------------------------------------------------------------\\n\\n    /// @param underlying_ The underlying ERC20 token address.\\n    /// @param name_ The ERC20 name.\\n    /// @param symbol_ The ERC20 symbol.\\n    /// @param oracle_ The oracle which provides the underlying token price.\\n    function initialize(\\n        address underlying_,\\n        string memory name_,\\n        string memory symbol_,\\n        address oracle_\\n    ) public override initializer {\\n        require(underlying_ != address(0), \\\"ButtonToken: invalid underlying reference\\\");\\n\\n        // Initializing ownership to `msg.sender`\\n        __Ownable_init();\\n        underlying = underlying_;\\n        name = name_;\\n        symbol = symbol_;\\n\\n        // MAX_UNDERLYING worth bits are 'pre-mined' to `address(0x)`\\n        // at the time of construction.\\n        //\\n        // During mint, bits are transferred from `address(0x)`\\n        // and during burn, bits are transferred back to `address(0x)`.\\n        //\\n        // No more than MAX_UNDERLYING can be deposited into the ButtonToken contract.\\n        _accountBits[address(0)] = TOTAL_BITS;\\n\\n        updateOracle(oracle_);\\n    }\\n\\n    //--------------------------------------------------------------------------\\n    // Owner only actions\\n\\n    /// @inheritdoc IButtonToken\\n    function updateOracle(address oracle_) public override onlyOwner {\\n        uint256 price;\\n        bool valid;\\n        (price, valid) = IOracle(oracle_).getData();\\n        require(valid, \\\"ButtonToken: unable to fetch data from oracle\\\");\\n\\n        oracle = oracle_;\\n        emit OracleUpdated(oracle);\\n\\n        _rebase(price);\\n    }\\n\\n    //--------------------------------------------------------------------------\\n    // ERC20 description attributes\\n\\n    /// @inheritdoc IERC20Metadata\\n    function decimals() external view override returns (uint8) {\\n        return IERC20Metadata(underlying).decimals();\\n    }\\n\\n    //--------------------------------------------------------------------------\\n    // ERC-20 token view methods\\n\\n    /// @inheritdoc IERC20\\n    function totalSupply() external view override returns (uint256) {\\n        uint256 price;\\n        (price, ) = _queryPrice();\\n        return _bitsToAmount(_activeBits(), price);\\n    }\\n\\n    /// @inheritdoc IERC20\\n    function balanceOf(address account) external view override returns (uint256) {\\n        if (account == address(0)) {\\n            return 0;\\n        }\\n        uint256 price;\\n        (price, ) = _queryPrice();\\n        return _bitsToAmount(_accountBits[account], price);\\n    }\\n\\n    /// @inheritdoc IRebasingERC20\\n    function scaledTotalSupply() external view override returns (uint256) {\\n        return _bitsToUAmount(_activeBits());\\n    }\\n\\n    /// @inheritdoc IRebasingERC20\\n    function scaledBalanceOf(address account) external view override returns (uint256) {\\n        if (account == address(0)) {\\n            return 0;\\n        }\\n        return _bitsToUAmount(_accountBits[account]);\\n    }\\n\\n    /// @inheritdoc IERC20\\n    function allowance(address owner_, address spender) external view override returns (uint256) {\\n        return _allowances[owner_][spender];\\n    }\\n\\n    //--------------------------------------------------------------------------\\n    // ButtonWrapper view methods\\n\\n    /// @inheritdoc IButtonWrapper\\n    function totalUnderlying() external view override returns (uint256) {\\n        return _bitsToUAmount(_activeBits());\\n    }\\n\\n    /// @inheritdoc IButtonWrapper\\n    function balanceOfUnderlying(address who) external view override returns (uint256) {\\n        if (who == address(0)) {\\n            return 0;\\n        }\\n        return _bitsToUAmount(_accountBits[who]);\\n    }\\n\\n    /// @inheritdoc IButtonWrapper\\n    function underlyingToWrapper(uint256 uAmount) external view override returns (uint256) {\\n        uint256 price;\\n        (price, ) = _queryPrice();\\n        return _bitsToAmount(_uAmountToBits(uAmount), price);\\n    }\\n\\n    /// @inheritdoc IButtonWrapper\\n    function wrapperToUnderlying(uint256 amount) external view override returns (uint256) {\\n        uint256 price;\\n        (price, ) = _queryPrice();\\n        return _bitsToUAmount(_amountToBits(amount, price));\\n    }\\n\\n    //--------------------------------------------------------------------------\\n    // ERC-20 write methods\\n\\n    /// @inheritdoc IERC20\\n    function transfer(address to, uint256 amount)\\n        external\\n        override\\n        validRecipient(to)\\n        onAfterRebase\\n        returns (bool)\\n    {\\n        _transfer(_msgSender(), to, _amountToBits(amount, lastPrice), amount);\\n        return true;\\n    }\\n\\n    /// @inheritdoc IRebasingERC20\\n    function transferAll(address to)\\n        external\\n        override\\n        validRecipient(to)\\n        onAfterRebase\\n        returns (bool)\\n    {\\n        uint256 bits = _accountBits[_msgSender()];\\n        _transfer(_msgSender(), to, bits, _bitsToAmount(bits, lastPrice));\\n        return true;\\n    }\\n\\n    /// @inheritdoc IERC20\\n    function transferFrom(\\n        address from,\\n        address to,\\n        uint256 amount\\n    ) external override validRecipient(to) onAfterRebase returns (bool) {\\n        _allowances[from][_msgSender()] -= amount;\\n        emit Approval(from, _msgSender(), _allowances[from][_msgSender()]);\\n\\n        _transfer(from, to, _amountToBits(amount, lastPrice), amount);\\n        return true;\\n    }\\n\\n    /// @inheritdoc IRebasingERC20\\n    function transferAllFrom(address from, address to)\\n        external\\n        override\\n        validRecipient(to)\\n        onAfterRebase\\n        returns (bool)\\n    {\\n        uint256 bits = _accountBits[from];\\n        uint256 amount = _bitsToAmount(bits, lastPrice);\\n\\n        _allowances[from][_msgSender()] -= amount;\\n        emit Approval(from, _msgSender(), _allowances[from][_msgSender()]);\\n\\n        _transfer(from, to, bits, amount);\\n        return true;\\n    }\\n\\n    /// @inheritdoc IERC20\\n    function approve(address spender, uint256 amount) external override returns (bool) {\\n        _allowances[_msgSender()][spender] = amount;\\n\\n        emit Approval(_msgSender(), spender, amount);\\n        return true;\\n    }\\n\\n    // @inheritdoc IERC20\\n    function increaseAllowance(address spender, uint256 addedAmount) external returns (bool) {\\n        _allowances[_msgSender()][spender] += addedAmount;\\n\\n        emit Approval(_msgSender(), spender, _allowances[_msgSender()][spender]);\\n        return true;\\n    }\\n\\n    // @inheritdoc IERC20\\n    function decreaseAllowance(address spender, uint256 subtractedAmount) external returns (bool) {\\n        if (subtractedAmount >= _allowances[_msgSender()][spender]) {\\n            delete _allowances[_msgSender()][spender];\\n        } else {\\n            _allowances[_msgSender()][spender] -= subtractedAmount;\\n        }\\n\\n        emit Approval(_msgSender(), spender, _allowances[_msgSender()][spender]);\\n        return true;\\n    }\\n\\n    //--------------------------------------------------------------------------\\n    // RebasingERC20 write methods\\n\\n    /// @inheritdoc IRebasingERC20\\n    function rebase() external override onAfterRebase {\\n        return;\\n    }\\n\\n    //--------------------------------------------------------------------------\\n    // ButtonWrapper write methods\\n\\n    /// @inheritdoc IButtonWrapper\\n    function mint(uint256 amount) external override onAfterRebase returns (uint256) {\\n        uint256 bits = _amountToBits(amount, lastPrice);\\n        uint256 uAmount = _bitsToUAmount(bits);\\n        _deposit(_msgSender(), _msgSender(), uAmount, amount, bits);\\n        return amount;\\n    }\\n\\n    /// @inheritdoc IButtonWrapper\\n    function mintFor(address to, uint256 amount) external override onAfterRebase returns (uint256) {\\n        uint256 bits = _amountToBits(amount, lastPrice);\\n        uint256 uAmount = _bitsToUAmount(bits);\\n        _deposit(_msgSender(), to, uAmount, amount, bits);\\n        return amount;\\n    }\\n\\n    /// @inheritdoc IButtonWrapper\\n    function burn(uint256 amount) external override onAfterRebase returns (uint256) {\\n        uint256 bits = _amountToBits(amount, lastPrice);\\n        uint256 uAmount = _bitsToUAmount(bits);\\n        _withdraw(_msgSender(), _msgSender(), uAmount, amount, bits);\\n        return amount;\\n    }\\n\\n    /// @inheritdoc IButtonWrapper\\n    function burnTo(address to, uint256 amount) external override onAfterRebase returns (uint256) {\\n        uint256 bits = _amountToBits(amount, lastPrice);\\n        uint256 uAmount = _bitsToUAmount(bits);\\n        _withdraw(_msgSender(), to, uAmount, amount, bits);\\n        return amount;\\n    }\\n\\n    /// @inheritdoc IButtonWrapper\\n    function burnAll() external override onAfterRebase returns (uint256) {\\n        uint256 bits = _accountBits[_msgSender()];\\n        uint256 uAmount = _bitsToUAmount(bits);\\n        uint256 amount = _bitsToAmount(bits, lastPrice);\\n        _withdraw(_msgSender(), _msgSender(), uAmount, amount, bits);\\n        return uAmount;\\n    }\\n\\n    /// @inheritdoc IButtonWrapper\\n    function burnAllTo(address to) external override onAfterRebase returns (uint256) {\\n        uint256 bits = _accountBits[_msgSender()];\\n        uint256 uAmount = _bitsToUAmount(bits);\\n        uint256 amount = _bitsToAmount(bits, lastPrice);\\n        _withdraw(_msgSender(), to, uAmount, amount, bits);\\n        return uAmount;\\n    }\\n\\n    /// @inheritdoc IButtonWrapper\\n    function deposit(uint256 uAmount) external override onAfterRebase returns (uint256) {\\n        uint256 bits = _uAmountToBits(uAmount);\\n        uint256 amount = _bitsToAmount(bits, lastPrice);\\n        _deposit(_msgSender(), _msgSender(), uAmount, amount, bits);\\n        return amount;\\n    }\\n\\n    /// @inheritdoc IButtonWrapper\\n    function depositFor(address to, uint256 uAmount)\\n        external\\n        override\\n        onAfterRebase\\n        returns (uint256)\\n    {\\n        uint256 bits = _uAmountToBits(uAmount);\\n        uint256 amount = _bitsToAmount(bits, lastPrice);\\n        _deposit(_msgSender(), to, uAmount, amount, bits);\\n        return amount;\\n    }\\n\\n    /// @inheritdoc IButtonWrapper\\n    function withdraw(uint256 uAmount) external override onAfterRebase returns (uint256) {\\n        uint256 bits = _uAmountToBits(uAmount);\\n        uint256 amount = _bitsToAmount(bits, lastPrice);\\n        _withdraw(_msgSender(), _msgSender(), uAmount, amount, bits);\\n        return amount;\\n    }\\n\\n    /// @inheritdoc IButtonWrapper\\n    function withdrawTo(address to, uint256 uAmount)\\n        external\\n        override\\n        onAfterRebase\\n        returns (uint256)\\n    {\\n        uint256 bits = _uAmountToBits(uAmount);\\n        uint256 amount = _bitsToAmount(bits, lastPrice);\\n        _withdraw(_msgSender(), to, uAmount, amount, bits);\\n        return amount;\\n    }\\n\\n    /// @inheritdoc IButtonWrapper\\n    function withdrawAll() external override onAfterRebase returns (uint256) {\\n        uint256 bits = _accountBits[_msgSender()];\\n        uint256 uAmount = _bitsToUAmount(bits);\\n        uint256 amount = _bitsToAmount(bits, lastPrice);\\n        _withdraw(_msgSender(), _msgSender(), uAmount, amount, bits);\\n        return amount;\\n    }\\n\\n    /// @inheritdoc IButtonWrapper\\n    function withdrawAllTo(address to) external override onAfterRebase returns (uint256) {\\n        uint256 bits = _accountBits[_msgSender()];\\n        uint256 uAmount = _bitsToUAmount(bits);\\n        uint256 amount = _bitsToAmount(bits, lastPrice);\\n        _withdraw(_msgSender(), to, uAmount, amount, bits);\\n        return amount;\\n    }\\n\\n    //--------------------------------------------------------------------------\\n    // Private methods\\n\\n    /// @dev Internal method to commit deposit state.\\n    ///      NOTE: Expects bits, uAmount, amount to be pre-calculated.\\n    function _deposit(\\n        address from,\\n        address to,\\n        uint256 uAmount,\\n        uint256 amount,\\n        uint256 bits\\n    ) private {\\n        require(amount > 0, \\\"ButtonToken: too few button tokens to mint\\\");\\n\\n        IERC20(underlying).safeTransferFrom(from, address(this), uAmount);\\n\\n        _transfer(address(0), to, bits, amount);\\n    }\\n\\n    /// @dev Internal method to commit withdraw state.\\n    ///      NOTE: Expects bits, uAmount, amount to be pre-calculated.\\n    function _withdraw(\\n        address from,\\n        address to,\\n        uint256 uAmount,\\n        uint256 amount,\\n        uint256 bits\\n    ) private {\\n        require(amount > 0, \\\"ButtonToken: too few button tokens to burn\\\");\\n\\n        _transfer(from, address(0), bits, amount);\\n\\n        IERC20(underlying).safeTransfer(to, uAmount);\\n    }\\n\\n    /// @dev Internal method to commit transfer state.\\n    ///      NOTE: Expects bits/amounts to be pre-calculated.\\n    function _transfer(\\n        address from,\\n        address to,\\n        uint256 bits,\\n        uint256 amount\\n    ) private {\\n        _accountBits[from] -= bits;\\n        _accountBits[to] += bits;\\n\\n        emit Transfer(from, to, amount);\\n\\n        if (_accountBits[from] == 0) {\\n            delete _accountBits[from];\\n        }\\n    }\\n\\n    /// @dev Updates the `lastPrice` and recomputes the internal scalar.\\n    function _rebase(uint256 price) private {\\n        if (price > MAX_PRICE) {\\n            price = MAX_PRICE;\\n        }\\n\\n        lastPrice = price;\\n\\n        _epoch++;\\n\\n        emit Rebase(_epoch, price);\\n    }\\n\\n    /// @dev Returns the active \\\"un-mined\\\" bits\\n    function _activeBits() private view returns (uint256) {\\n        return TOTAL_BITS - _accountBits[address(0)];\\n    }\\n\\n    /// @dev Queries the oracle for the latest price\\n    ///      If fetched oracle price isn't valid returns the last price,\\n    ///      else returns the new price from the oracle.\\n    function _queryPrice() private view returns (uint256, bool) {\\n        uint256 newPrice;\\n        bool valid;\\n        (newPrice, valid) = IOracle(oracle).getData();\\n\\n        return (valid ? newPrice : lastPrice, valid);\\n    }\\n\\n    /// @dev Convert button token amount to bits.\\n    function _amountToBits(uint256 amount, uint256 price) private pure returns (uint256) {\\n        return amount * _bitsPerToken(price);\\n    }\\n\\n    /// @dev Convert underlying token amount to bits.\\n    function _uAmountToBits(uint256 uAmount) private pure returns (uint256) {\\n        return uAmount * BITS_PER_UNDERLYING;\\n    }\\n\\n    /// @dev Convert bits to button token amount.\\n    function _bitsToAmount(uint256 bits, uint256 price) private pure returns (uint256) {\\n        return bits / _bitsPerToken(price);\\n    }\\n\\n    /// @dev Convert bits to underlying token amount.\\n    function _bitsToUAmount(uint256 bits) private pure returns (uint256) {\\n        return bits / BITS_PER_UNDERLYING;\\n    }\\n\\n    /// @dev Internal scalar to convert bits to button tokens.\\n    function _bitsPerToken(uint256 price) private pure returns (uint256) {\\n        return PRICE_BITS / price;\\n    }\\n}\\n\"\r\n    },\r\n    \"contracts/interfaces/IOracle.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: GPL-3.0-or-later\\n\\ninterface IOracle {\\n    function getData() external view returns (uint256, bool);\\n}\\n\"\r\n    },\r\n    \"contracts/interfaces/IButtonToken.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: GPL-3.0-or-later\\n\\nimport \\\"./IRebasingERC20.sol\\\";\\nimport \\\"./IButtonWrapper.sol\\\";\\n\\n// Interface definition for the ButtonToken ERC20 wrapper contract\\ninterface IButtonToken is IButtonWrapper, IRebasingERC20 {\\n    /// @dev The reference to the oracle which feeds in the\\n    ///      price of the underlying token.\\n    function oracle() external view returns (address);\\n\\n    /// @dev Most recent price recorded from the oracle.\\n    function lastPrice() external view returns (uint256);\\n\\n    /// @dev Update reference to the oracle contract and resets price.\\n    /// @param oracle_ The address of the new oracle.\\n    function updateOracle(address oracle_) external;\\n\\n    /// @dev Log to record changes to the oracle.\\n    /// @param oracle The address of the new oracle.\\n    event OracleUpdated(address oracle);\\n\\n    /// @dev Contract initializer\\n    function initialize(\\n        address underlying_,\\n        string memory name_,\\n        string memory symbol_,\\n        address oracle_\\n    ) external;\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../utils/ContextUpgradeable.sol\\\";\\nimport \\\"../proxy/utils/Initializable.sol\\\";\\n\\n/**\\n * @dev Contract module which provides a basic access control mechanism, where\\n * there is an account (an owner) that can be granted exclusive access to\\n * specific functions.\\n *\\n * By default, the owner account will be the one that deploys the contract. This\\n * can later be changed with {transferOwnership}.\\n *\\n * This module is used through inheritance. It will make available the modifier\\n * `onlyOwner`, which can be applied to your functions to restrict their use to\\n * the owner.\\n */\\nabstract contract OwnableUpgradeable is Initializable, ContextUpgradeable {\\n    address private _owner;\\n\\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\\n\\n    /**\\n     * @dev Initializes the contract setting the deployer as the initial owner.\\n     */\\n    function __Ownable_init() internal initializer {\\n        __Context_init_unchained();\\n        __Ownable_init_unchained();\\n    }\\n\\n    function __Ownable_init_unchained() internal initializer {\\n        _setOwner(_msgSender());\\n    }\\n\\n    /**\\n     * @dev Returns the address of the current owner.\\n     */\\n    function owner() public view virtual returns (address) {\\n        return _owner;\\n    }\\n\\n    /**\\n     * @dev Throws if called by any account other than the owner.\\n     */\\n    modifier onlyOwner() {\\n        require(owner() == _msgSender(), \\\"Ownable: caller is not the owner\\\");\\n        _;\\n    }\\n\\n    /**\\n     * @dev Leaves the contract without owner. It will not be possible to call\\n     * `onlyOwner` functions anymore. Can only be called by the current owner.\\n     *\\n     * NOTE: Renouncing ownership will leave the contract without an owner,\\n     * thereby removing any functionality that is only available to the owner.\\n     */\\n    function renounceOwnership() public virtual onlyOwner {\\n        _setOwner(address(0));\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Can only be called by the current owner.\\n     */\\n    function transferOwnership(address newOwner) public virtual onlyOwner {\\n        require(newOwner != address(0), \\\"Ownable: new owner is the zero address\\\");\\n        _setOwner(newOwner);\\n    }\\n\\n    function _setOwner(address newOwner) private {\\n        address oldOwner = _owner;\\n        _owner = newOwner;\\n        emit OwnershipTransferred(oldOwner, newOwner);\\n    }\\n    uint256[49] private __gap;\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../IERC20.sol\\\";\\nimport \\\"../../../utils/Address.sol\\\";\\n\\n/**\\n * @title SafeERC20\\n * @dev Wrappers around ERC20 operations that throw on failure (when the token\\n * contract returns false). Tokens that return no value (and instead revert or\\n * throw on failure) are also supported, non-reverting calls are assumed to be\\n * successful.\\n * To use this library you can add a `using SafeERC20 for IERC20;` statement to your contract,\\n * which allows you to call the safe operations as `token.safeTransfer(...)`, etc.\\n */\\nlibrary SafeERC20 {\\n    using Address for address;\\n\\n    function safeTransfer(IERC20 token, address to, uint256 value) internal {\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.transfer.selector, to, value));\\n    }\\n\\n    function safeTransferFrom(IERC20 token, address from, address to, uint256 value) internal {\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.transferFrom.selector, from, to, value));\\n    }\\n\\n    /**\\n     * @dev Deprecated. This function has issues similar to the ones found in\\n     * {IERC20-approve}, and its usage is discouraged.\\n     *\\n     * Whenever possible, use {safeIncreaseAllowance} and\\n     * {safeDecreaseAllowance} instead.\\n     */\\n    function safeApprove(IERC20 token, address spender, uint256 value) internal {\\n        // safeApprove should only be called when setting an initial allowance,\\n        // or when resetting it to zero. To increase and decrease it, use\\n        // 'safeIncreaseAllowance' and 'safeDecreaseAllowance'\\n        // solhint-disable-next-line max-line-length\\n        require((value == 0) || (token.allowance(address(this), spender) == 0),\\n            \\\"SafeERC20: approve from non-zero to non-zero allowance\\\"\\n        );\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, value));\\n    }\\n\\n    function safeIncreaseAllowance(IERC20 token, address spender, uint256 value) internal {\\n        uint256 newAllowance = token.allowance(address(this), spender) + value;\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));\\n    }\\n\\n    function safeDecreaseAllowance(IERC20 token, address spender, uint256 value) internal {\\n        unchecked {\\n            uint256 oldAllowance = token.allowance(address(this), spender);\\n            require(oldAllowance >= value, \\\"SafeERC20: decreased allowance below zero\\\");\\n            uint256 newAllowance = oldAllowance - value;\\n            _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));\\n        }\\n    }\\n\\n    /**\\n     * @dev Imitates a Solidity high-level call (i.e. a regular function call to a contract), relaxing the requirement\\n     * on the return value: the return value is optional (but if data is returned, it must not be false).\\n     * @param token The token targeted by the call.\\n     * @param data The call data (encoded using abi.encode or one of its variants).\\n     */\\n    function _callOptionalReturn(IERC20 token, bytes memory data) private {\\n        // We need to perform a low level call here, to bypass Solidity's return data size checking mechanism, since\\n        // we're implementing it ourselves. We use {Address.functionCall} to perform this call, which verifies that\\n        // the target address contains contract code and also asserts for success in the low-level call.\\n\\n        bytes memory returndata = address(token).functionCall(data, \\\"SafeERC20: low-level call failed\\\");\\n        if (returndata.length > 0) { // Return data is optional\\n            // solhint-disable-next-line max-line-length\\n            require(abi.decode(returndata, (bool)), \\\"SafeERC20: ERC20 operation did not succeed\\\");\\n        }\\n    }\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev This is a base contract to aid in writing upgradeable contracts, or any kind of contract that will be deployed\\n * behind a proxy. Since a proxied contract can't have a constructor, it's common to move constructor logic to an\\n * external initializer function, usually called `initialize`. It then becomes necessary to protect this initializer\\n * function so it can only be called once. The {initializer} modifier provided by this contract will have this effect.\\n *\\n * TIP: To avoid leaving the proxy in an uninitialized state, the initializer function should be called as early as\\n * possible by providing the encoded function call as the `_data` argument to {ERC1967Proxy-constructor}.\\n *\\n * CAUTION: When used with inheritance, manual care must be taken to not invoke a parent initializer twice, or to ensure\\n * that all initializers are idempotent. This is not verified automatically as constructors are by Solidity.\\n */\\nabstract contract Initializable {\\n    /**\\n     * @dev Indicates that the contract has been initialized.\\n     */\\n    bool private _initialized;\\n\\n    /**\\n     * @dev Indicates that the contract is in the process of being initialized.\\n     */\\n    bool private _initializing;\\n\\n    /**\\n     * @dev Modifier to protect an initializer function from being invoked twice.\\n     */\\n    modifier initializer() {\\n        require(_initializing || !_initialized, \\\"Initializable: contract is already initialized\\\");\\n\\n        bool isTopLevelCall = !_initializing;\\n        if (isTopLevelCall) {\\n            _initializing = true;\\n            _initialized = true;\\n        }\\n\\n        _;\\n\\n        if (isTopLevelCall) {\\n            _initializing = false;\\n        }\\n    }\\n}\\n\"\r\n    },\r\n    \"contracts/interfaces/IRebasingERC20.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: GPL-3.0-or-later\\n\\nimport \\\"@openzeppelin/contracts/token/ERC20/IERC20.sol\\\";\\nimport \\\"@openzeppelin/contracts/token/ERC20/extensions/IERC20Metadata.sol\\\";\\n\\n// Interface definition for Rebasing ERC20 tokens which have a \\\"elastic\\\" external\\n// balance and \\\"fixed\\\" internal balance. Each user's external balance is\\n// represented as a product of a \\\"scalar\\\" and the user's internal balance.\\n//\\n// From time to time the \\\"Rebase\\\" event updates scaler,\\n// which increases/decreases all user balances proportionally.\\n//\\n// The standard ERC-20 methods are denominated in the elastic balance\\n//\\ninterface IRebasingERC20 is IERC20, IERC20Metadata {\\n    /// @notice Returns the fixed balance of the specified address.\\n    /// @param who The address to query.\\n    function scaledBalanceOf(address who) external view returns (uint256);\\n\\n    /// @notice Returns the total fixed supply.\\n    function scaledTotalSupply() external view returns (uint256);\\n\\n    /// @notice Transfer all of the sender's balance to a specified address.\\n    /// @param to The address to transfer to.\\n    /// @return True on success, false otherwise.\\n    function transferAll(address to) external returns (bool);\\n\\n    /// @notice Transfer all balance tokens from one address to another.\\n    /// @param from The address to send tokens from.\\n    /// @param to The address to transfer to.\\n    function transferAllFrom(address from, address to) external returns (bool);\\n\\n    /// @notice Triggers the next rebase, if applicable.\\n    function rebase() external;\\n\\n    /// @notice Event emitted when the balance scalar is updated.\\n    /// @param epoch The number of rebases since inception.\\n    /// @param newScalar The new scalar.\\n    event Rebase(uint256 indexed epoch, uint256 newScalar);\\n}\\n\"\r\n    },\r\n    \"contracts/interfaces/IButtonWrapper.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: GPL-3.0-or-later\\n\\n// Interface definition for ButtonWrapper contract, which wraps an\\n// underlying ERC20 token into a new ERC20 with different characteristics.\\n// NOTE: \\\"uAmount\\\" => underlying token (wrapped) amount and\\n//       \\\"amount\\\" => wrapper token amount\\ninterface IButtonWrapper {\\n    //--------------------------------------------------------------------------\\n    // ButtonWrapper write methods\\n\\n    /// @notice Transfers underlying tokens from {msg.sender} to the contract and\\n    ///         mints wrapper tokens.\\n    /// @param amount The amount of wrapper tokens to mint.\\n    /// @return The amount of underlying tokens deposited.\\n    function mint(uint256 amount) external returns (uint256);\\n\\n    /// @notice Transfers underlying tokens from {msg.sender} to the contract and\\n    ///         mints wrapper tokens to the specified beneficiary.\\n    /// @param to The beneficiary account.\\n    /// @param amount The amount of wrapper tokens to mint.\\n    /// @return The amount of underlying tokens deposited.\\n    function mintFor(address to, uint256 amount) external returns (uint256);\\n\\n    /// @notice Burns wrapper tokens from {msg.sender} and transfers\\n    ///         the underlying tokens back.\\n    /// @param amount The amount of wrapper tokens to burn.\\n    /// @return The amount of underlying tokens withdrawn.\\n    function burn(uint256 amount) external returns (uint256);\\n\\n    /// @notice Burns wrapper tokens from {msg.sender} and transfers\\n    ///         the underlying tokens to the specified beneficiary.\\n    /// @param to The beneficiary account.\\n    /// @param amount The amount of wrapper tokens to burn.\\n    /// @return The amount of underlying tokens withdrawn.\\n    function burnTo(address to, uint256 amount) external returns (uint256);\\n\\n    /// @notice Burns all wrapper tokens from {msg.sender} and transfers\\n    ///         the underlying tokens back.\\n    /// @return The amount of underlying tokens withdrawn.\\n    function burnAll() external returns (uint256);\\n\\n    /// @notice Burns all wrapper tokens from {msg.sender} and transfers\\n    ///         the underlying tokens back.\\n    /// @param to The beneficiary account.\\n    /// @return The amount of underlying tokens withdrawn.\\n    function burnAllTo(address to) external returns (uint256);\\n\\n    /// @notice Transfers underlying tokens from {msg.sender} to the contract and\\n    ///         mints wrapper tokens to the specified beneficiary.\\n    /// @param uAmount The amount of underlying tokens to deposit.\\n    /// @return The amount of wrapper tokens mint.\\n    function deposit(uint256 uAmount) external returns (uint256);\\n\\n    /// @notice Transfers underlying tokens from {msg.sender} to the contract and\\n    ///         mints wrapper tokens to the specified beneficiary.\\n    /// @param to The beneficiary account.\\n    /// @param uAmount The amount of underlying tokens to deposit.\\n    /// @return The amount of wrapper tokens mint.\\n    function depositFor(address to, uint256 uAmount) external returns (uint256);\\n\\n    /// @notice Burns wrapper tokens from {msg.sender} and transfers\\n    ///         the underlying tokens back.\\n    /// @param uAmount The amount of underlying tokens to withdraw.\\n    /// @return The amount of wrapper tokens burnt.\\n    function withdraw(uint256 uAmount) external returns (uint256);\\n\\n    /// @notice Burns wrapper tokens from {msg.sender} and transfers\\n    ///         the underlying tokens back to the specified beneficiary.\\n    /// @param to The beneficiary account.\\n    /// @param uAmount The amount of underlying tokens to withdraw.\\n    /// @return The amount of wrapper tokens burnt.\\n    function withdrawTo(address to, uint256 uAmount) external returns (uint256);\\n\\n    /// @notice Burns all wrapper tokens from {msg.sender} and transfers\\n    ///         the underlying tokens back.\\n    /// @return The amount of wrapper tokens burnt.\\n    function withdrawAll() external returns (uint256);\\n\\n    /// @notice Burns all wrapper tokens from {msg.sender} and transfers\\n    ///         the underlying tokens back.\\n    /// @param to The beneficiary account.\\n    /// @return The amount of wrapper tokens burnt.\\n    function withdrawAllTo(address to) external returns (uint256);\\n\\n    //--------------------------------------------------------------------------\\n    // ButtonWrapper view methods\\n\\n    /// @return The address of the underlying token.\\n    function underlying() external view returns (address);\\n\\n    /// @return The total underlying tokens held by the wrapper contract.\\n    function totalUnderlying() external view returns (uint256);\\n\\n    /// @param who The account address.\\n    /// @return The underlying token balance of the account.\\n    function balanceOfUnderlying(address who) external view returns (uint256);\\n\\n    /// @param uAmount The amount of underlying tokens.\\n    /// @return The amount of wrapper tokens exchangeable.\\n    function underlyingToWrapper(uint256 uAmount) external view returns (uint256);\\n\\n    /// @param amount The amount of wrapper tokens.\\n    /// @return The amount of underlying tokens exchangeable.\\n    function wrapperToUnderlying(uint256 amount) external view returns (uint256);\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/token/ERC20/IERC20.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC20 standard as defined in the EIP.\\n */\\ninterface IERC20 {\\n    /**\\n     * @dev Returns the amount of tokens in existence.\\n     */\\n    function totalSupply() external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the amount of tokens owned by `account`.\\n     */\\n    function balanceOf(address account) external view returns (uint256);\\n\\n    /**\\n     * @dev Moves `amount` tokens from the caller's account to `recipient`.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transfer(address recipient, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Returns the remaining number of tokens that `spender` will be\\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\\n     * zero by default.\\n     *\\n     * This value changes when {approve} or {transferFrom} are called.\\n     */\\n    function allowance(address owner, address spender) external view returns (uint256);\\n\\n    /**\\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\\n     * that someone may use both the old and the new allowance by unfortunate\\n     * transaction ordering. One possible solution to mitigate this race\\n     * condition is to first reduce the spender's allowance to 0 and set the\\n     * desired value afterwards:\\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address spender, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Moves `amount` tokens from `sender` to `recipient` using the\\n     * allowance mechanism. `amount` is then deducted from the caller's\\n     * allowance.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(address sender, address recipient, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\\n     * another (`to`).\\n     *\\n     * Note that `value` may be zero.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 value);\\n\\n    /**\\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\\n     * a call to {approve}. `value` is the new allowance.\\n     */\\n    event Approval(address indexed owner, address indexed spender, uint256 value);\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/token/ERC20/extensions/IERC20Metadata.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../IERC20.sol\\\";\\n\\n/**\\n * @dev Interface for the optional metadata functions from the ERC20 standard.\\n *\\n * _Available since v4.1._\\n */\\ninterface IERC20Metadata is IERC20 {\\n    /**\\n     * @dev Returns the name of the token.\\n     */\\n    function name() external view returns (string memory);\\n\\n    /**\\n     * @dev Returns the symbol of the token.\\n     */\\n    function symbol() external view returns (string memory);\\n\\n    /**\\n     * @dev Returns the decimals places of the token.\\n     */\\n    function decimals() external view returns (uint8);\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts-upgradeable/utils/ContextUpgradeable.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\nimport \\\"../proxy/utils/Initializable.sol\\\";\\n\\n/**\\n * @dev Provides information about the current execution context, including the\\n * sender of the transaction and its data. While these are generally available\\n * via msg.sender and msg.data, they should not be accessed in such a direct\\n * manner, since when dealing with meta-transactions the account sending and\\n * paying for execution may not be the actual sender (as far as an application\\n * is concerned).\\n *\\n * This contract is only required for intermediate, library-like contracts.\\n */\\nabstract contract ContextUpgradeable is Initializable {\\n    function __Context_init() internal initializer {\\n        __Context_init_unchained();\\n    }\\n\\n    function __Context_init_unchained() internal initializer {\\n    }\\n    function _msgSender() internal view virtual returns (address) {\\n        return msg.sender;\\n    }\\n\\n    function _msgData() internal view virtual returns (bytes calldata) {\\n        return msg.data;\\n    }\\n    uint256[50] private __gap;\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/utils/Address.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Collection of functions related to the address type\\n */\\nlibrary Address {\\n    /**\\n     * @dev Returns true if `account` is a contract.\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * It is unsafe to assume that an address for which this function returns\\n     * false is an externally-owned account (EOA) and not a contract.\\n     *\\n     * Among others, `isContract` will return false for the following\\n     * types of addresses:\\n     *\\n     *  - an externally-owned account\\n     *  - a contract in construction\\n     *  - an address where a contract will be created\\n     *  - an address where a contract lived, but was destroyed\\n     * ====\\n     */\\n    function isContract(address account) internal view returns (bool) {\\n        // This method relies on extcodesize, which returns 0 for contracts in\\n        // construction, since the code is only stored at the end of the\\n        // constructor execution.\\n\\n        uint256 size;\\n        // solhint-disable-next-line no-inline-assembly\\n        assembly { size := extcodesize(account) }\\n        return size > 0;\\n    }\\n\\n    /**\\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\\n     * `recipient`, forwarding all available gas and reverting on errors.\\n     *\\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\\n     * imposed by `transfer`, making them unable to receive funds via\\n     * `transfer`. {sendValue} removes this limitation.\\n     *\\n     * https://diligence.consensys.net/posts/2019/09/stop-using-soliditys-transfer-now/[Learn more].\\n     *\\n     * IMPORTANT: because control is transferred to `recipient`, care must be\\n     * taken to not create reentrancy vulnerabilities. Consider using\\n     * {ReentrancyGuard} or the\\n     * https://solidity.readthedocs.io/en/v0.5.11/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\\n     */\\n    function sendValue(address payable recipient, uint256 amount) internal {\\n        require(address(this).balance >= amount, \\\"Address: insufficient balance\\\");\\n\\n        // solhint-disable-next-line avoid-low-level-calls, avoid-call-value\\n        (bool success, ) = recipient.call{ value: amount }(\\\"\\\");\\n        require(success, \\\"Address: unable to send value, recipient may have reverted\\\");\\n    }\\n\\n    /**\\n     * @dev Performs a Solidity function call using a low level `call`. A\\n     * plain`call` is an unsafe replacement for a function call: use this\\n     * function instead.\\n     *\\n     * If `target` reverts with a revert reason, it is bubbled up by this\\n     * function (like regular Solidity function calls).\\n     *\\n     * Returns the raw returned data. To convert to the expected return value,\\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\\n     *\\n     * Requirements:\\n     *\\n     * - `target` must be a contract.\\n     * - calling `target` with `data` must not revert.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\\n      return functionCall(target, data, \\\"Address: low-level call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\\n     * `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(address target, bytes memory data, string memory errorMessage) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, 0, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but also transferring `value` wei to `target`.\\n     *\\n     * Requirements:\\n     *\\n     * - the calling contract must have an ETH balance of at least `value`.\\n     * - the called Solidity function must be `payable`.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(address target, bytes memory data, uint256 value) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, value, \\\"Address: low-level call with value failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\\n     * with `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(address target, bytes memory data, uint256 value, string memory errorMessage) internal returns (bytes memory) {\\n        require(address(this).balance >= value, \\\"Address: insufficient balance for call\\\");\\n        require(isContract(target), \\\"Address: call to non-contract\\\");\\n\\n        // solhint-disable-next-line avoid-low-level-calls\\n        (bool success, bytes memory returndata) = target.call{ value: value }(data);\\n        return _verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\\n        return functionStaticCall(target, data, \\\"Address: low-level static call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(address target, bytes memory data, string memory errorMessage) internal view returns (bytes memory) {\\n        require(isContract(target), \\\"Address: static call to non-contract\\\");\\n\\n        // solhint-disable-next-line avoid-low-level-calls\\n        (bool success, bytes memory returndata) = target.staticcall(data);\\n        return _verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionDelegateCall(target, data, \\\"Address: low-level delegate call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(address target, bytes memory data, string memory errorMessage) internal returns (bytes memory) {\\n        require(isContract(target), \\\"Address: delegate call to non-contract\\\");\\n\\n        // solhint-disable-next-line avoid-low-level-calls\\n        (bool success, bytes memory returndata) = target.delegatecall(data);\\n        return _verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    function _verifyCallResult(bool success, bytes memory returndata, string memory errorMessage) private pure returns(bytes memory) {\\n        if (success) {\\n            return returndata;\\n        } else {\\n            // Look for revert reason and bubble it up if present\\n            if (returndata.length > 0) {\\n                // The easiest way to bubble the revert reason is using memory via assembly\\n\\n                // solhint-disable-next-line no-inline-assembly\\n                assembly {\\n                    let returndata_size := mload(returndata)\\n                    revert(add(32, returndata), returndata_size)\\n                }\\n            } else {\\n                revert(errorMessage);\\n            }\\n        }\\n    }\\n}\\n\"\r\n    }\r\n  },\r\n  \"settings\": {\r\n    \"optimizer\": {\r\n      \"enabled\": true,\r\n      \"runs\": 200\r\n    },\r\n    \"outputSelection\": {\r\n      \"*\": {\r\n        \"*\": [\r\n          \"evm.bytecode\",\r\n          \"evm.deployedBytecode\",\r\n          \"devdoc\",\r\n          \"userdoc\",\r\n          \"metadata\",\r\n          \"abi\"\r\n        ]\r\n      }\r\n    },\r\n    \"libraries\": {}\r\n  }\r\n}}","ABI":"[{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Approval\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"oracle\",\"type\":\"address\"}],\"name\":\"OracleUpdated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"epoch\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"newScalar\",\"type\":\"uint256\"}],\"name\":\"Rebase\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Transfer\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"MAX_PRICE\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"MAX_UNDERLYING\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"PRICE_DECIMALS\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner_\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"}],\"name\":\"allowance\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"approve\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"who\",\"type\":\"address\"}],\"name\":\"balanceOfUnderlying\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"burn\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"burnAll\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"}],\"name\":\"burnAllTo\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"burnTo\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"decimals\",\"outputs\":[{\"internalType\":\"uint8\",\"name\":\"\",\"type\":\"uint8\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"subtractedAmount\",\"type\":\"uint256\"}],\"name\":\"decreaseAllowance\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"uAmount\",\"type\":\"uint256\"}],\"name\":\"deposit\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"uAmount\",\"type\":\"uint256\"}],\"name\":\"depositFor\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"addedAmount\",\"type\":\"uint256\"}],\"name\":\"increaseAllowance\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"underlying_\",\"type\":\"address\"},{\"internalType\":\"string\",\"name\":\"name_\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"symbol_\",\"type\":\"string\"},{\"internalType\":\"address\",\"name\":\"oracle_\",\"type\":\"address\"}],\"name\":\"initialize\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"lastPrice\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"mint\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"mintFor\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"name\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"oracle\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"rebase\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"scaledBalanceOf\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"scaledTotalSupply\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"symbol\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalSupply\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalUnderlying\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"transfer\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"}],\"name\":\"transferAll\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"}],\"name\":\"transferAllFrom\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"transferFrom\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"underlying\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"uAmount\",\"type\":\"uint256\"}],\"name\":\"underlyingToWrapper\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"oracle_\",\"type\":\"address\"}],\"name\":\"updateOracle\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"uAmount\",\"type\":\"uint256\"}],\"name\":\"withdraw\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"withdrawAll\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"}],\"name\":\"withdrawAllTo\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"uAmount\",\"type\":\"uint256\"}],\"name\":\"withdrawTo\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"wrapperToUnderlying\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"}]","ContractName":"ButtonToken","CompilerVersion":"v0.8.4+commit.c7e474f2","OptimizationUsed":"1","Runs":"200","ConstructorArguments":"","EVMVersion":"Default","Library":"","LicenseType":"","Proxy":"0","Implementation":"","SwarmSource":""}]}