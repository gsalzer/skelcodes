{"status":"1","message":"OK","result":[{"SourceCode":"{{\r\n  \"language\": \"Solidity\",\r\n  \"sources\": {\r\n    \"contracts/ballots/TomiBallot.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\npragma solidity >=0.6.6;\\n\\nimport '../interfaces/IERC20.sol';\\nimport '../interfaces/ITomiGovernance.sol';\\nimport '../libraries/SafeMath.sol';\\n\\nimport \\\"hardhat/console.sol\\\";\\n\\n/**\\n * @title TomiBallot\\n * @dev Implements voting process along with vote delegation\\n */\\ncontract TomiBallot {\\n    using SafeMath for uint;\\n\\n    struct Voter {\\n        uint256 weight; // weight is accumulated by delegation\\n        bool voted; // if true, that person already voted\\n        address delegate; // person delegated to\\n        uint256 vote; // index of the voted proposal\\n    }\\n\\n    mapping(address => Voter) public voters;\\n    mapping(uint256 => uint256) public proposals;\\n\\n    address public TOMI;\\n    address public governor;\\n    address public proposer;\\n    uint256 public value;\\n    uint256 public endTime;\\n    uint256 public executionTime;\\n    bool public ended;\\n    string public subject;\\n    string public content;\\n\\n    uint256 private constant NONE = 0;\\n    uint256 private constant YES = 1;\\n    uint256 private constant NO = 2;\\n    uint256 private constant MINIMUM_TOMI_TO_EXEC = 3 * (10 ** 18);\\n\\n    uint256 public total;\\n    uint256 public createTime;\\n\\n    modifier onlyGovernor() {\\n        require(msg.sender == governor, 'TomiBallot: FORBIDDEN');\\n        _;\\n    }\\n\\n    /**\\n     * @dev Create a new ballot.\\n     */\\n    constructor(\\n        address _TOMI,\\n        address _proposer,\\n        uint256 _value,\\n        uint256 _endTime,\\n        uint256 _executionTime,\\n        address _governor,\\n        string memory _subject,\\n        string memory _content\\n    ) public {\\n        TOMI = _TOMI;\\n        proposer = _proposer;\\n        value = _value;\\n        endTime = _endTime;\\n        executionTime = _executionTime;\\n        governor = _governor;\\n        subject = _subject;\\n        content = _content;\\n        proposals[YES] = 0;\\n        proposals[NO] = 0;\\n        createTime = block.timestamp;\\n    }\\n\\n    /**\\n     * @dev Give 'voter' the right to vote on this ballot.\\n     * @param voter address of voter\\n     */\\n    function _giveRightToVote(address voter) private returns (Voter storage) {\\n        require(block.timestamp < endTime, 'Ballot is ended');\\n        Voter storage sender = voters[voter];\\n        require(!sender.voted, 'You already voted');\\n        sender.weight += IERC20(governor).balanceOf(voter);\\n        require(sender.weight != 0, 'Has no right to vote');\\n        return sender;\\n    }\\n\\n    function _stakeCollateralToVote(uint256 collateral) private returns (bool) {\\n        uint256 collateralRemain = IERC20(governor).balanceOf(msg.sender);\\n        uint256 collateralMore = collateral.sub(collateralRemain);\\n        require(IERC20(TOMI).allowance(msg.sender, address(this)) >= collateralMore, \\\"TomiBallot:Collateral allowance is not enough to vote!\\\");\\n        IERC20(TOMI).transferFrom(msg.sender, address(this), collateralMore);\\n        IERC20(TOMI).approve(governor, collateralMore);\\n        bool success = ITomiGovernance(governor).onBehalfDeposit(msg.sender, collateralMore);\\n        return success;\\n    }\\n\\n    /**\\n     * @dev Delegate your vote to the voter 'to'.\\n     * @param to address to which vote is delegated\\n     */\\n    function delegate(address to) public {\\n        Voter storage sender = _giveRightToVote(msg.sender);\\n        require(to != msg.sender, 'Self-delegation is disallowed');\\n\\n        while (voters[to].delegate != address(0)) {\\n            to = voters[to].delegate;\\n\\n            // We found a loop in the delegation, not allowed.\\n            require(to != msg.sender, 'Found loop in delegation');\\n        }\\n        sender.voted = true;\\n        sender.delegate = to;\\n        Voter storage delegate_ = voters[to];\\n        if (delegate_.voted) {\\n            // If the delegate already voted,\\n            // directly add to the number of votes\\n            proposals[delegate_.vote] += sender.weight;\\n            total += msg.sender != proposer ? sender.weight: 0;\\n        } else {\\n            // If the delegate did not vote yet,\\n            // add to her weight.\\n            delegate_.weight += sender.weight;\\n            total += msg.sender != proposer ? sender.weight: 0;\\n        }\\n    }\\n\\n    // /**\\n    //  * @dev Give your vote (including votes delegated to you) to proposal 'proposals[proposal].name'.\\n    //  * @param proposal index of proposal in the proposals array\\n    //  */\\n    // function vote(uint256 proposal, uint256 collateral) public {\\n    //     if (collateral > 0) {\\n    //         require(_stakeCollateralToVote(collateral), \\\"TomiBallot:Fail due to stake TOMI as collateral!\\\");\\n    //     }\\n\\n    //     Voter storage sender = _giveRightToVote(msg.sender);\\n    //     require(proposal == YES || proposal == NO, 'Only vote 1 or 2');\\n    //     sender.voted = true;\\n    //     sender.vote = proposal;\\n    //     proposals[proposal] += sender.weight;\\n        \\n    //     if (msg.sender != proposer) {\\n    //         total += sender.weight;\\n    //     }\\n    // }\\n\\n    function voteByGovernor(address user, uint256 proposal) public onlyGovernor {\\n        Voter storage sender = _giveRightToVote(user);\\n        require(proposal == YES || proposal == NO, 'Only vote 1 or 2');\\n        sender.voted = true;\\n        sender.vote = proposal;\\n        proposals[proposal] += sender.weight;\\n        \\n        if (user != proposer) {\\n            total += sender.weight;\\n        }\\n    }\\n\\n    /**\\n     * @dev Computes the winning proposal taking all previous votes into account.\\n     * @return winningProposal_ index of winning proposal in the proposals array\\n     */\\n    function winningProposal() public view returns (uint256) {\\n        if (proposals[YES] > proposals[NO]) {\\n            return YES;\\n        } else if (proposals[YES] < proposals[NO]) {\\n            return NO;\\n        } else {\\n            return NONE;\\n        }\\n    }\\n\\n    function result() public view returns (bool) {\\n        uint256 winner = winningProposal();\\n        if (winner == YES && total >= MINIMUM_TOMI_TO_EXEC) {\\n            return true;\\n        }\\n        return false;\\n    }\\n\\n    function end() public onlyGovernor returns (bool) {\\n        require(block.timestamp >= executionTime, 'ballot not yet ended');\\n        require(!ended, 'end has already been called');\\n        ended = true;\\n        return result();\\n    }\\n\\n    function weight(address user) external view returns (uint256) {\\n        Voter memory voter = voters[user];\\n        return voter.weight;\\n    }\\n}\\n\"\r\n    },\r\n    \"contracts/interfaces/IERC20.sol\": {\r\n      \"content\": \"pragma solidity >=0.5.0;\\n\\ninterface IERC20 {\\n    event Approval(address indexed owner, address indexed spender, uint value);\\n    event Transfer(address indexed from, address indexed to, uint value);\\n\\n    function name() external view returns (string memory);\\n    function symbol() external view returns (string memory);\\n    function decimals() external view returns (uint8);\\n    function totalSupply() external view returns (uint);\\n    function balanceOf(address owner) external view returns (uint);\\n    function allowance(address owner, address spender) external view returns (uint);\\n\\n    function approve(address spender, uint value) external returns (bool);\\n    function transfer(address to, uint value) external returns (bool);\\n    function transferFrom(address from, address to, uint value) external returns (bool);\\n}\"\r\n    },\r\n    \"contracts/interfaces/ITomiGovernance.sol\": {\r\n      \"content\": \"pragma solidity >=0.5.0;\\n\\ninterface ITomiGovernance {\\n    function addPair(address _tokenA, address _tokenB) external returns (bool);\\n    function addReward(uint _value) external returns (bool);\\n    function deposit(uint _amount) external returns (bool);\\n    function onBehalfDeposit(address _user, uint _amount) external returns (bool);\\n}\\n\"\r\n    },\r\n    \"contracts/libraries/SafeMath.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity >=0.6.6;\\n\\n/**\\n * @dev Wrappers over Solidity's arithmetic operations with added overflow\\n * checks.\\n *\\n * Arithmetic operations in Solidity wrap on overflow. This can easily result\\n * in bugs, because programmers usually assume that an overflow raises an\\n * error, which is the standard behavior in high level programming languages.\\n * `SafeMath` restores this intuition by reverting the transaction when an\\n * operation overflows.\\n *\\n * Using this library instead of the unchecked operations eliminates an entire\\n * class of bugs, so it's recommended to use it always.\\n */\\nlibrary SafeMath {\\n    /**\\n     * @dev Returns the addition of two unsigned integers, reverting on\\n     * overflow.\\n     *\\n     * Counterpart to Solidity's `+` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Addition cannot overflow.\\n     */\\n    function add(uint256 a, uint256 b) internal pure returns (uint256) {\\n        uint256 c = a + b;\\n        require(c >= a, \\\"SafeMath: addition overflow\\\");\\n\\n        return c;\\n    }\\n\\n    /**\\n     * @dev Returns the subtraction of two unsigned integers, reverting on\\n     * overflow (when the result is negative).\\n     *\\n     * Counterpart to Solidity's `-` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Subtraction cannot overflow.\\n     */\\n    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return sub(a, b, \\\"SafeMath: subtraction overflow\\\");\\n    }\\n\\n    /**\\n     * @dev Returns the subtraction of two unsigned integers, reverting with custom message on\\n     * overflow (when the result is negative).\\n     *\\n     * Counterpart to Solidity's `-` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Subtraction cannot overflow.\\n     */\\n    function sub(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\\n        require(b <= a, errorMessage);\\n        uint256 c = a - b;\\n\\n        return c;\\n    }\\n\\n    /**\\n     * @dev Returns the multiplication of two unsigned integers, reverting on\\n     * overflow.\\n     *\\n     * Counterpart to Solidity's `*` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Multiplication cannot overflow.\\n     */\\n    function mul(uint256 a, uint256 b) internal pure returns (uint256) {\\n        // Gas optimization: this is cheaper than requiring 'a' not being zero, but the\\n        // benefit is lost if 'b' is also tested.\\n        // See: https://github.com/OpenZeppelin/openzeppelin-contracts/pull/522\\n        if (a == 0) {\\n            return 0;\\n        }\\n\\n        uint256 c = a * b;\\n        require(c / a == b, \\\"SafeMath: multiplication overflow\\\");\\n\\n        return c;\\n    }\\n\\n    /**\\n     * @dev Returns the integer division of two unsigned integers. Reverts on\\n     * division by zero. The result is rounded towards zero.\\n     *\\n     * Counterpart to Solidity's `/` operator. Note: this function uses a\\n     * `revert` opcode (which leaves remaining gas untouched) while Solidity\\n     * uses an invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Requirements:\\n     *\\n     * - The divisor cannot be zero.\\n     */\\n    function div(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return div(a, b, \\\"SafeMath: division by zero\\\");\\n    }\\n\\n    /**\\n     * @dev Returns the integer division of two unsigned integers. Reverts with custom message on\\n     * division by zero. The result is rounded towards zero.\\n     *\\n     * Counterpart to Solidity's `/` operator. Note: this function uses a\\n     * `revert` opcode (which leaves remaining gas untouched) while Solidity\\n     * uses an invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Requirements:\\n     *\\n     * - The divisor cannot be zero.\\n     */\\n    function div(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\\n        require(b > 0, errorMessage);\\n        uint256 c = a / b;\\n        // assert(a == b * c + a % b); // There is no case in which this doesn't hold\\n\\n        return c;\\n    }\\n\\n    /**\\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\\n     * Reverts when dividing by zero.\\n     *\\n     * Counterpart to Solidity's `%` operator. This function uses a `revert`\\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\\n     * invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Requirements:\\n     *\\n     * - The divisor cannot be zero.\\n     */\\n    function mod(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return mod(a, b, \\\"SafeMath: modulo by zero\\\");\\n    }\\n\\n    /**\\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\\n     * Reverts with custom message when dividing by zero.\\n     *\\n     * Counterpart to Solidity's `%` operator. This function uses a `revert`\\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\\n     * invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Requirements:\\n     *\\n     * - The divisor cannot be zero.\\n     */\\n    function mod(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\\n        require(b != 0, errorMessage);\\n        return a % b;\\n    }\\n}\"\r\n    },\r\n    \"hardhat/console.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\npragma solidity >= 0.4.22 <0.9.0;\\n\\nlibrary console {\\n\\taddress constant CONSOLE_ADDRESS = address(0x000000000000000000636F6e736F6c652e6c6f67);\\n\\n\\tfunction _sendLogPayload(bytes memory payload) private view {\\n\\t\\tuint256 payloadLength = payload.length;\\n\\t\\taddress consoleAddress = CONSOLE_ADDRESS;\\n\\t\\tassembly {\\n\\t\\t\\tlet payloadStart := add(payload, 32)\\n\\t\\t\\tlet r := staticcall(gas(), consoleAddress, payloadStart, payloadLength, 0, 0)\\n\\t\\t}\\n\\t}\\n\\n\\tfunction log() internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log()\\\"));\\n\\t}\\n\\n\\tfunction logInt(int p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(int)\\\", p0));\\n\\t}\\n\\n\\tfunction logUint(uint p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint)\\\", p0));\\n\\t}\\n\\n\\tfunction logString(string memory p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string)\\\", p0));\\n\\t}\\n\\n\\tfunction logBool(bool p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool)\\\", p0));\\n\\t}\\n\\n\\tfunction logAddress(address p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes(bytes memory p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes1(bytes1 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes1)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes2(bytes2 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes2)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes3(bytes3 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes3)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes4(bytes4 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes4)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes5(bytes5 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes5)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes6(bytes6 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes6)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes7(bytes7 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes7)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes8(bytes8 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes8)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes9(bytes9 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes9)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes10(bytes10 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes10)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes11(bytes11 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes11)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes12(bytes12 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes12)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes13(bytes13 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes13)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes14(bytes14 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes14)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes15(bytes15 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes15)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes16(bytes16 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes16)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes17(bytes17 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes17)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes18(bytes18 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes18)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes19(bytes19 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes19)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes20(bytes20 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes20)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes21(bytes21 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes21)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes22(bytes22 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes22)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes23(bytes23 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes23)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes24(bytes24 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes24)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes25(bytes25 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes25)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes26(bytes26 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes26)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes27(bytes27 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes27)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes28(bytes28 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes28)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes29(bytes29 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes29)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes30(bytes30 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes30)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes31(bytes31 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes31)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes32(bytes32 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes32)\\\", p0));\\n\\t}\\n\\n\\tfunction log(uint p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint)\\\", p0));\\n\\t}\\n\\n\\tfunction log(string memory p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string)\\\", p0));\\n\\t}\\n\\n\\tfunction log(bool p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool)\\\", p0));\\n\\t}\\n\\n\\tfunction log(address p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address)\\\", p0));\\n\\t}\\n\\n\\tfunction log(uint p0, uint p1) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,uint)\\\", p0, p1));\\n\\t}\\n\\n\\tfunction log(uint p0, string memory p1) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,string)\\\", p0, p1));\\n\\t}\\n\\n\\tfunction log(uint p0, bool p1) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,bool)\\\", p0, p1));\\n\\t}\\n\\n\\tfunction log(uint p0, address p1) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,address)\\\", p0, p1));\\n\\t}\\n\\n\\tfunction log(string memory p0, uint p1) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint)\\\", p0, p1));\\n\\t}\\n\\n\\tfunction log(string memory p0, string memory p1) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,string)\\\", p0, p1));\\n\\t}\\n\\n\\tfunction log(string memory p0, bool p1) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool)\\\", p0, p1));\\n\\t}\\n\\n\\tfunction log(string memory p0, address p1) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,address)\\\", p0, p1));\\n\\t}\\n\\n\\tfunction log(bool p0, uint p1) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint)\\\", p0, p1));\\n\\t}\\n\\n\\tfunction log(bool p0, string memory p1) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string)\\\", p0, p1));\\n\\t}\\n\\n\\tfunction log(bool p0, bool p1) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool)\\\", p0, p1));\\n\\t}\\n\\n\\tfunction log(bool p0, address p1) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address)\\\", p0, p1));\\n\\t}\\n\\n\\tfunction log(address p0, uint p1) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint)\\\", p0, p1));\\n\\t}\\n\\n\\tfunction log(address p0, string memory p1) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,string)\\\", p0, p1));\\n\\t}\\n\\n\\tfunction log(address p0, bool p1) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool)\\\", p0, p1));\\n\\t}\\n\\n\\tfunction log(address p0, address p1) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,address)\\\", p0, p1));\\n\\t}\\n\\n\\tfunction log(uint p0, uint p1, uint p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,uint,uint)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(uint p0, uint p1, string memory p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,uint,string)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(uint p0, uint p1, bool p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,uint,bool)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(uint p0, uint p1, address p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,uint,address)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(uint p0, string memory p1, uint p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,string,uint)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(uint p0, string memory p1, string memory p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,string,string)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(uint p0, string memory p1, bool p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,string,bool)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(uint p0, string memory p1, address p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,string,address)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(uint p0, bool p1, uint p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,bool,uint)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(uint p0, bool p1, string memory p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,bool,string)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(uint p0, bool p1, bool p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,bool,bool)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(uint p0, bool p1, address p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,bool,address)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(uint p0, address p1, uint p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,address,uint)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(uint p0, address p1, string memory p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,address,string)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(uint p0, address p1, bool p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,address,bool)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(uint p0, address p1, address p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,address,address)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(string memory p0, uint p1, uint p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint,uint)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(string memory p0, uint p1, string memory p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint,string)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(string memory p0, uint p1, bool p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint,bool)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(string memory p0, uint p1, address p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint,address)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(string memory p0, string memory p1, uint p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,uint)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(string memory p0, string memory p1, string memory p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,string)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(string memory p0, string memory p1, bool p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,bool)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(string memory p0, string memory p1, address p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,address)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(string memory p0, bool p1, uint p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,uint)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(string memory p0, bool p1, string memory p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,string)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(string memory p0, bool p1, bool p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,bool)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(string memory p0, bool p1, address p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,address)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(string memory p0, address p1, uint p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,uint)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(string memory p0, address p1, string memory p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,string)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(string memory p0, address p1, bool p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,bool)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(string memory p0, address p1, address p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,address)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(bool p0, uint p1, uint p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint,uint)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(bool p0, uint p1, string memory p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint,string)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(bool p0, uint p1, bool p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint,bool)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(bool p0, uint p1, address p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint,address)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(bool p0, string memory p1, uint p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,uint)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(bool p0, string memory p1, string memory p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,string)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(bool p0, string memory p1, bool p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,bool)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(bool p0, string memory p1, address p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,address)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(bool p0, bool p1, uint p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,uint)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(bool p0, bool p1, string memory p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,string)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(bool p0, bool p1, bool p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,bool)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(bool p0, bool p1, address p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,address)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(bool p0, address p1, uint p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,uint)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(bool p0, address p1, string memory p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,string)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(bool p0, address p1, bool p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,bool)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(bool p0, address p1, address p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,address)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(address p0, uint p1, uint p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint,uint)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(address p0, uint p1, string memory p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint,string)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(address p0, uint p1, bool p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint,bool)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(address p0, uint p1, address p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint,address)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(address p0, string memory p1, uint p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,uint)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(address p0, string memory p1, string memory p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,string)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(address p0, string memory p1, bool p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,bool)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(address p0, string memory p1, address p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,address)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(address p0, bool p1, uint p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,uint)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(address p0, bool p1, string memory p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,string)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(address p0, bool p1, bool p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,bool)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(address p0, bool p1, address p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,address)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(address p0, address p1, uint p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,uint)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(address p0, address p1, string memory p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,string)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(address p0, address p1, bool p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,bool)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(address p0, address p1, address p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,address)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(uint p0, uint p1, uint p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,uint,uint,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, uint p1, uint p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,uint,uint,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, uint p1, uint p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,uint,uint,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, uint p1, uint p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,uint,uint,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, uint p1, string memory p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,uint,string,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, uint p1, string memory p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,uint,string,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, uint p1, string memory p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,uint,string,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, uint p1, string memory p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,uint,string,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, uint p1, bool p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,uint,bool,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, uint p1, bool p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,uint,bool,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, uint p1, bool p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,uint,bool,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, uint p1, bool p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,uint,bool,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, uint p1, address p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,uint,address,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, uint p1, address p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,uint,address,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, uint p1, address p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,uint,address,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, uint p1, address p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,uint,address,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, string memory p1, uint p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,string,uint,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, string memory p1, uint p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,string,uint,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, string memory p1, uint p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,string,uint,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, string memory p1, uint p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,string,uint,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, string memory p1, string memory p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,string,string,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, string memory p1, string memory p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,string,string,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, string memory p1, string memory p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,string,string,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, string memory p1, string memory p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,string,string,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, string memory p1, bool p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,string,bool,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, string memory p1, bool p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,string,bool,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, string memory p1, bool p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,string,bool,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, string memory p1, bool p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,string,bool,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, string memory p1, address p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,string,address,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, string memory p1, address p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,string,address,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, string memory p1, address p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,string,address,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, string memory p1, address p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,string,address,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, bool p1, uint p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,bool,uint,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, bool p1, uint p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,bool,uint,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, bool p1, uint p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,bool,uint,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, bool p1, uint p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,bool,uint,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, bool p1, string memory p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,bool,string,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, bool p1, string memory p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,bool,string,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, bool p1, string memory p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,bool,string,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, bool p1, string memory p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,bool,string,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, bool p1, bool p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,bool,bool,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, bool p1, bool p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,bool,bool,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, bool p1, bool p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,bool,bool,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, bool p1, bool p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,bool,bool,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, bool p1, address p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,bool,address,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, bool p1, address p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,bool,address,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, bool p1, address p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,bool,address,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, bool p1, address p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,bool,address,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, address p1, uint p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,address,uint,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, address p1, uint p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,address,uint,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, address p1, uint p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,address,uint,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, address p1, uint p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,address,uint,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, address p1, string memory p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,address,string,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, address p1, string memory p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,address,string,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, address p1, string memory p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,address,string,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, address p1, string memory p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,address,string,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, address p1, bool p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,address,bool,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, address p1, bool p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,address,bool,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, address p1, bool p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,address,bool,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, address p1, bool p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,address,bool,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, address p1, address p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,address,address,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, address p1, address p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,address,address,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, address p1, address p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,address,address,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, address p1, address p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,address,address,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, uint p1, uint p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint,uint,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, uint p1, uint p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint,uint,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, uint p1, uint p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint,uint,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, uint p1, uint p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint,uint,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, uint p1, string memory p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint,string,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, uint p1, string memory p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint,string,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, uint p1, string memory p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint,string,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, uint p1, string memory p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint,string,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, uint p1, bool p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint,bool,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, uint p1, bool p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint,bool,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, uint p1, bool p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint,bool,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, uint p1, bool p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint,bool,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, uint p1, address p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint,address,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, uint p1, address p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint,address,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, uint p1, address p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint,address,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, uint p1, address p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint,address,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, string memory p1, uint p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,uint,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, string memory p1, uint p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,uint,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, string memory p1, uint p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,uint,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, string memory p1, uint p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,uint,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, string memory p1, string memory p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,string,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, string memory p1, string memory p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,string,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, string memory p1, string memory p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,string,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, string memory p1, string memory p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,string,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, string memory p1, bool p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,bool,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, string memory p1, bool p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,bool,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, string memory p1, bool p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,bool,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, string memory p1, bool p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,bool,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, string memory p1, address p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,address,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, string memory p1, address p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,address,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, string memory p1, address p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,address,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, string memory p1, address p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,address,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, bool p1, uint p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,uint,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, bool p1, uint p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,uint,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, bool p1, uint p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,uint,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, bool p1, uint p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,uint,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, bool p1, string memory p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,string,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, bool p1, string memory p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,string,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, bool p1, string memory p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,string,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, bool p1, string memory p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,string,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, bool p1, bool p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,bool,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, bool p1, bool p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,bool,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, bool p1, bool p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,bool,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, bool p1, bool p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,bool,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, bool p1, address p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,address,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, bool p1, address p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,address,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, bool p1, address p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,address,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, bool p1, address p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,address,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, address p1, uint p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,uint,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, address p1, uint p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,uint,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, address p1, uint p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,uint,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, address p1, uint p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,uint,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, address p1, string memory p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,string,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, address p1, string memory p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,string,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, address p1, string memory p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,string,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, address p1, string memory p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,string,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, address p1, bool p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,bool,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, address p1, bool p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,bool,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, address p1, bool p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,bool,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, address p1, bool p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,bool,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, address p1, address p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,address,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, address p1, address p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,address,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, address p1, address p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,address,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, address p1, address p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,address,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, uint p1, uint p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint,uint,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, uint p1, uint p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint,uint,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, uint p1, uint p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint,uint,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, uint p1, uint p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint,uint,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, uint p1, string memory p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint,string,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, uint p1, string memory p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint,string,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, uint p1, string memory p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint,string,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, uint p1, string memory p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint,string,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, uint p1, bool p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint,bool,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, uint p1, bool p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint,bool,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, uint p1, bool p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint,bool,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, uint p1, bool p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint,bool,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, uint p1, address p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint,address,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, uint p1, address p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint,address,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, uint p1, address p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint,address,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, uint p1, address p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint,address,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, string memory p1, uint p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,uint,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, string memory p1, uint p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,uint,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, string memory p1, uint p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,uint,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, string memory p1, uint p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,uint,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, string memory p1, string memory p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,string,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, string memory p1, string memory p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,string,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, string memory p1, string memory p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,string,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, string memory p1, string memory p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,string,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, string memory p1, bool p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,bool,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, string memory p1, bool p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,bool,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, string memory p1, bool p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,bool,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, string memory p1, bool p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,bool,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, string memory p1, address p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,address,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, string memory p1, address p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,address,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, string memory p1, address p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,address,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, string memory p1, address p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,address,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, bool p1, uint p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,uint,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, bool p1, uint p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,uint,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, bool p1, uint p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,uint,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, bool p1, uint p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,uint,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, bool p1, string memory p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,string,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, bool p1, string memory p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,string,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, bool p1, string memory p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,string,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, bool p1, string memory p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,string,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, bool p1, bool p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,bool,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, bool p1, bool p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,bool,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, bool p1, bool p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,bool,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, bool p1, bool p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,bool,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, bool p1, address p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,address,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, bool p1, address p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,address,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, bool p1, address p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,address,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, bool p1, address p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,address,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, address p1, uint p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,uint,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, address p1, uint p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,uint,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, address p1, uint p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,uint,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, address p1, uint p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,uint,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, address p1, string memory p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,string,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, address p1, string memory p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,string,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, address p1, string memory p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,string,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, address p1, string memory p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,string,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, address p1, bool p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,bool,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, address p1, bool p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,bool,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, address p1, bool p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,bool,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, address p1, bool p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,bool,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, address p1, address p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,address,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, address p1, address p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,address,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, address p1, address p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,address,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, address p1, address p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,address,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, uint p1, uint p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint,uint,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, uint p1, uint p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint,uint,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, uint p1, uint p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint,uint,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, uint p1, uint p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint,uint,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, uint p1, string memory p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint,string,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, uint p1, string memory p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint,string,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, uint p1, string memory p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint,string,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, uint p1, string memory p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint,string,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, uint p1, bool p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint,bool,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, uint p1, bool p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint,bool,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, uint p1, bool p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint,bool,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, uint p1, bool p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint,bool,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, uint p1, address p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint,address,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, uint p1, address p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint,address,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, uint p1, address p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint,address,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, uint p1, address p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint,address,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, string memory p1, uint p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,uint,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, string memory p1, uint p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,uint,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, string memory p1, uint p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,uint,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, string memory p1, uint p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,uint,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, string memory p1, string memory p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,string,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, string memory p1, string memory p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,string,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, string memory p1, string memory p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,string,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, string memory p1, string memory p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,string,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, string memory p1, bool p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,bool,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, string memory p1, bool p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,bool,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, string memory p1, bool p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,bool,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, string memory p1, bool p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,bool,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, string memory p1, address p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,address,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, string memory p1, address p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,address,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, string memory p1, address p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,address,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, string memory p1, address p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,address,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, bool p1, uint p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,uint,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, bool p1, uint p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,uint,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, bool p1, uint p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,uint,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, bool p1, uint p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,uint,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, bool p1, string memory p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,string,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, bool p1, string memory p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,string,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, bool p1, string memory p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,string,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, bool p1, string memory p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,string,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, bool p1, bool p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,bool,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, bool p1, bool p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,bool,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, bool p1, bool p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,bool,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, bool p1, bool p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,bool,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, bool p1, address p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,address,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, bool p1, address p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,address,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, bool p1, address p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,address,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, bool p1, address p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,address,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, address p1, uint p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,uint,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, address p1, uint p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,uint,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, address p1, uint p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,uint,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, address p1, uint p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,uint,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, address p1, string memory p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,string,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, address p1, string memory p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,string,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, address p1, string memory p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,string,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, address p1, string memory p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,string,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, address p1, bool p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,bool,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, address p1, bool p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,bool,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, address p1, bool p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,bool,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, address p1, bool p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,bool,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, address p1, address p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,address,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, address p1, address p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,address,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, address p1, address p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,address,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, address p1, address p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,address,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n}\\n\"\r\n    },\r\n    \"contracts/ballots/TomiBallotFactory.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\npragma solidity >=0.6.6;\\n\\nimport \\\"./TomiBallot.sol\\\";\\nimport \\\"./TomiBallotRevenue.sol\\\";\\n\\ncontract TomiBallotFactory {\\n    address public TOMI;\\n\\n    event Created(address indexed proposer, address indexed ballotAddr, uint256 createTime);\\n    event RevenueCreated(address indexed proposer, address indexed ballotAddr, uint256 createTime);\\n\\n    constructor(address _TOMI) public {\\n        TOMI = _TOMI;\\n    }\\n\\n    function create(\\n        address _proposer,\\n        uint256 _value,\\n        uint256 _endTime,\\n        uint256 _executionTime,\\n        string calldata _subject,\\n        string calldata _content\\n    ) external returns (address) {\\n        require(_value >= 0, 'TomiBallotFactory: INVALID_PARAMTERS');\\n        address ballotAddr = address(\\n            new TomiBallot(TOMI, _proposer, _value, _endTime, _executionTime, msg.sender, _subject, _content)\\n        );\\n        emit Created(_proposer, ballotAddr, block.timestamp);\\n        return ballotAddr;\\n    }\\n\\n    function createShareRevenue(\\n        address _proposer,\\n        uint256 _endTime,\\n        uint256 _executionTime,\\n        string calldata _subject,\\n        string calldata _content\\n    ) external returns (address) {\\n        address ballotAddr = address(\\n            new TomiBallotRevenue(TOMI, _proposer, _endTime, _executionTime, msg.sender, _subject, _content)\\n        );\\n        emit RevenueCreated(_proposer, ballotAddr, block.timestamp);\\n        return ballotAddr;\\n    }\\n}\\n\"\r\n    },\r\n    \"contracts/ballots/TomiBallotRevenue.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\npragma solidity >=0.6.6;\\n\\nimport '../interfaces/IERC20.sol';\\nimport '../interfaces/ITomiGovernance.sol';\\nimport '../libraries/SafeMath.sol';\\n\\n/**\\n * @title TomiBallot\\n * @dev Implements voting process along with vote delegation\\n */\\ncontract TomiBallotRevenue {\\n    using SafeMath for uint;\\n\\n    struct Participator {\\n        uint256 weight; // weight is accumulated by delegation\\n        bool participated; // if true, that person already voted\\n        address delegate; // person delegated to\\n    }\\n\\n    mapping(address => Participator) public participators;\\n\\n    address public TOMI;\\n    address public governor;\\n    address public proposer;\\n    uint256 public endTime;\\n    uint256 public executionTime;\\n    bool public ended;\\n    string public subject;\\n    string public content;\\n\\n\\n    uint256 public total;\\n    uint256 public createTime;\\n\\n    modifier onlyGovernor() {\\n        require(msg.sender == governor, 'TomiBallot: FORBIDDEN');\\n        _;\\n    }\\n\\n    /**\\n     * @dev Create a new ballot.\\n     */\\n    constructor(\\n        address _TOMI,\\n        address _proposer,\\n        uint256 _endTime,\\n        uint256 _executionTime,\\n        address _governor,\\n        string memory _subject,\\n        string memory _content\\n    ) public {\\n        TOMI = _TOMI;\\n        proposer = _proposer;\\n        endTime = _endTime;\\n        executionTime = _executionTime;\\n        governor = _governor;\\n        subject = _subject;\\n        content = _content;\\n        createTime = block.timestamp;\\n    }\\n\\n\\n    /**\\n     * @dev Give 'participator' the right to vote on this ballot.\\n     * @param participator address of participator\\n     */\\n    function _giveRightToJoin(address participator) private returns (Participator storage) {\\n        require(block.timestamp < endTime, 'Ballot is ended');\\n        Participator storage sender = participators[participator];\\n        require(!sender.participated, 'You already participate in');\\n        sender.weight += IERC20(governor).balanceOf(participator);\\n        require(sender.weight != 0, 'Has no right to participate in');\\n        return sender;\\n    }\\n\\n    function _stakeCollateralToJoin(uint256 collateral) private returns (bool) {\\n        uint256 collateralRemain = IERC20(governor).balanceOf(msg.sender);\\n        uint256 collateralMore = collateral.sub(collateralRemain);\\n        require(IERC20(TOMI).allowance(msg.sender, address(this)) >= collateralMore, \\\"TomiBallot:Collateral allowance is not enough to vote!\\\");\\n        IERC20(TOMI).transferFrom(msg.sender, address(this), collateralMore);\\n        IERC20(TOMI).approve(governor, collateralMore);\\n        bool success = ITomiGovernance(governor).onBehalfDeposit(msg.sender, collateralMore);\\n        return success;\\n    }\\n\\n    /**\\n     * @dev Delegate your vote to the voter 'to'.\\n     * @param to address to which vote is delegated\\n     */\\n    function delegate(address to) public {\\n        Participator storage sender = _giveRightToJoin(msg.sender);\\n        require(to != msg.sender, 'Self-delegation is disallowed');\\n\\n        while (participators[to].delegate != address(0)) {\\n            to = participators[to].delegate;\\n\\n            // We found a loop in the delegation, not allowed.\\n            require(to != msg.sender, 'Found loop in delegation');\\n        }\\n        sender.participated = true;\\n        sender.delegate = to;\\n        Participator storage delegate_ = participators[to];\\n        if (delegate_.participated) {\\n            // If the delegate already voted,\\n            // directly add to the number of votes\\n            total += msg.sender != proposer ? sender.weight: 0;\\n        } else {\\n            // If the delegate did not vote yet,\\n            // add to her weight.\\n            delegate_.weight += sender.weight;\\n            total += msg.sender != proposer ? sender.weight: 0;\\n        }\\n    }\\n\\n    // /**\\n    //  * @dev Give your vote (including votes delegated to you) to proposal 'proposals[proposal].name'.\\n    //  */\\n    // function participate(uint256 collateral) public {\\n    //     if (collateral > 0) {\\n    //         require(_stakeCollateralToJoin(collateral), \\\"TomiBallotRevenue:Fail due to stake TOMI as collateral!\\\");\\n    //     }\\n\\n    //     Participator storage sender = _giveRightToJoin(msg.sender);\\n    //     sender.participated = true;\\n\\n    //     if (msg.sender != proposer) {\\n    //         total += sender.weight;\\n    //     }\\n    // }\\n\\n    function participateByGovernor(address user) public onlyGovernor {\\n        Participator storage sender = _giveRightToJoin(user);\\n        sender.participated = true;\\n\\n        if (user != proposer) {\\n            total += sender.weight;\\n        }\\n    }\\n\\n    function end() public onlyGovernor returns (bool) {\\n        require(block.timestamp >= executionTime, 'ballot not yet ended');\\n        require(!ended, 'end has already been called');\\n        ended = true;\\n        return ended;\\n    }\\n\\n    function weight(address user) external view returns (uint256) {\\n        Participator memory participator = participators[user];\\n        return participator.weight;\\n    }\\n}\\n\"\r\n    },\r\n    \"contracts/TomiTransferListener.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\npragma solidity >=0.6.6;\\nimport './modules/Ownable.sol';\\nimport './interfaces/ITgas.sol';\\nimport './interfaces/ITomiFactory.sol';\\nimport './interfaces/IERC20.sol';\\nimport './interfaces/ITomiPair.sol';\\nimport './libraries/TomiSwapLibrary.sol';\\nimport './libraries/SafeMath.sol';\\n\\ncontract TomiTransferListener is Ownable {\\n    uint256 public version = 1;\\n    address public TGAS;\\n    address public PLATFORM;\\n    address public WETH;\\n    address public FACTORY;\\n    address public admin;\\n\\n    mapping(address => uint) public pairWeights;\\n\\n    event Transfer(address indexed from, address indexed to, address indexed token, uint256 amount);\\n    event WeightChanged(address indexed pair, uint weight);\\n\\n    function initialize(\\n        address _TGAS,\\n        address _FACTORY,\\n        address _WETH,\\n        address _PLATFORM,\\n        address _admin\\n    ) external onlyOwner {\\n        require(\\n            _FACTORY != address(0) && _WETH != address(0) && _PLATFORM != address(0),\\n            'TOMI TRANSFER LISTENER : INPUT ADDRESS IS ZERO'\\n        );\\n        TGAS = _TGAS;\\n        FACTORY = _FACTORY;\\n        WETH = _WETH;\\n        PLATFORM = _PLATFORM;\\n        admin = _admin;\\n    }\\n\\n    function changeAdmin(address _admin) external onlyOwner {\\n        admin = _admin;\\n    }\\n\\n    function updateTGASImpl(address _newImpl) external onlyOwner {\\n        ITgas(TGAS).upgradeImpl(_newImpl);\\n    }\\n\\n    function updatePairPowers(address[] calldata _pairs, uint[] calldata _weights) external {\\n        require(msg.sender == admin, 'TOMI TRANSFER LISTENER: ADMIN PERMISSION');\\n        require(_pairs.length == _weights.length, \\\"TOMI TRANSFER LISTENER: INVALID PARAMS\\\");\\n\\n        for(uint i = 0;i < _weights.length;i++) {\\n            pairWeights[_pairs[i]] = _weights[i];\\n            _setProdutivity(_pairs[i]);\\n            emit WeightChanged(_pairs[i], _weights[i]);\\n        }\\n    }\\n\\n\\n    function _setProdutivity(address _pair) internal {\\n        (uint256 lastProdutivity, ) = ITgas(TGAS).getProductivity(_pair);\\n        address token0 = ITomiPair(_pair).token0();\\n        address token1 = ITomiPair(_pair).token1();\\n        (uint reserve0, uint reserve1, ) = ITomiPair(_pair).getReserves();\\n        uint currentProdutivity = 0;\\n        if(token0 == TGAS) {\\n            currentProdutivity = reserve0 * pairWeights[_pair];\\n        } else if(token1 == TGAS) {\\n            currentProdutivity = reserve1 * pairWeights[_pair];\\n        }\\n\\n        if(lastProdutivity != currentProdutivity) {\\n            if(lastProdutivity > 0) {\\n                ITgas(TGAS).decreaseProductivity(_pair, lastProdutivity);\\n            } \\n\\n            if(currentProdutivity > 0) {\\n                ITgas(TGAS).increaseProductivity(_pair, currentProdutivity);\\n            }\\n        }\\n    }\\n\\n    function upgradeProdutivity(address fromPair, address toPair) external {\\n        require(msg.sender == PLATFORM, 'TOMI TRANSFER LISTENER: PERMISSION');\\n        (uint256 fromPairPower, ) = ITgas(TGAS).getProductivity(fromPair);\\n        (uint256 toPairPower, ) = ITgas(TGAS).getProductivity(toPair);\\n        if(fromPairPower > 0 && toPairPower == 0) {\\n            ITgas(TGAS).decreaseProductivity(fromPair, fromPairPower);\\n            ITgas(TGAS).increaseProductivity(toPair, fromPairPower);\\n        }\\n    }\\n\\n    function transferNotify(\\n        address from,\\n        address to,\\n        address token,\\n        uint256 amount\\n    ) external returns (bool) {\\n        require(msg.sender == PLATFORM, 'TOMI TRANSFER LISTENER: PERMISSION');\\n        if(ITomiFactory(FACTORY).isPair(from) && token == TGAS) {\\n            _setProdutivity(from);\\n        }\\n\\n        if(ITomiFactory(FACTORY).isPair(to) && token == TGAS) {\\n            _setProdutivity(to);\\n        }\\n\\n        emit Transfer(from, to, token, amount);\\n        return true;\\n    }\\n}\"\r\n    },\r\n    \"contracts/modules/Ownable.sol\": {\r\n      \"content\": \"pragma solidity >=0.5.16;\\n\\ncontract Ownable {\\n    address public owner;\\n\\n    event OwnerChanged(address indexed _oldOwner, address indexed _newOwner);\\n\\n    constructor() public {\\n        owner = msg.sender;\\n    }\\n\\n    modifier onlyOwner() {\\n        require(msg.sender == owner, 'Ownable: FORBIDDEN');\\n        _;\\n    }\\n\\n    function changeOwner(address _newOwner) public onlyOwner {\\n        require(_newOwner != address(0), 'Ownable: INVALID_ADDRESS');\\n        emit OwnerChanged(owner, _newOwner);\\n        owner = _newOwner;\\n    }\\n\\n}\"\r\n    },\r\n    \"contracts/interfaces/ITgas.sol\": {\r\n      \"content\": \"pragma solidity >=0.5.0;\\n\\ninterface ITgas {\\n    function amountPerBlock() external view returns (uint);\\n    function changeInterestRatePerBlock(uint value) external returns (bool);\\n    function getProductivity(address user) external view returns (uint, uint);\\n    function increaseProductivity(address user, uint value) external returns (bool);\\n    function decreaseProductivity(address user, uint value) external returns (bool);\\n    function take() external view returns (uint);\\n    function takeWithBlock() external view returns (uint, uint);\\n    function mint() external returns (uint);\\n    function balanceOf(address owner) external view returns (uint);\\n    function upgradeImpl(address _newImpl) external;\\n    function upgradeGovernance(address _newGovernor) external;\\n    function transfer(address to, uint value) external returns (bool);\\n    function approve(address spender, uint value) external returns (bool);\\n}\"\r\n    },\r\n    \"contracts/interfaces/ITomiFactory.sol\": {\r\n      \"content\": \"pragma solidity >=0.5.0;\\n\\ninterface ITomiFactory {\\n    event PairCreated(address indexed token0, address indexed token1, address pair, uint);\\n\\n    function contractCodeHash() external view returns (bytes32);\\n    function getPair(address tokenA, address tokenB) external view returns (address pair);\\n    function isPair(address pair) external view returns (bool);\\n    function allPairs(uint) external view returns (address pair);\\n    function allPairsLength() external view returns (uint);\\n    function playerPairs(address player, uint index) external view returns (address pair);\\n    function getPlayerPairCount(address player) external view returns (uint);\\n\\n    function createPair(address tokenA, address tokenB) external returns (address pair);\\n    function addPlayerPair(address player, address _pair) external returns (bool);\\n}\"\r\n    },\r\n    \"contracts/interfaces/ITomiPair.sol\": {\r\n      \"content\": \"pragma solidity >=0.5.0;\\n\\ninterface ITomiPair {\\n  \\n    event Mint(address indexed sender, uint amount0, uint amount1);\\n    event Burn(address indexed sender, uint amount0, uint amount1, address indexed to);\\n    event Swap(\\n        address indexed sender,\\n        uint amount0In,\\n        uint amount1In,\\n        uint amount0Out,\\n        uint amount1Out,\\n        address indexed to\\n    );\\n    event Sync(uint112 reserve0, uint112 reserve1);\\n\\n    function MINIMUM_LIQUIDITY() external pure returns (uint);\\n    function factory() external view returns (address);\\n    function token0() external view returns (address);\\n    function token1() external view returns (address);\\n    function getReserves() external view returns (uint112 reserve0, uint112 reserve1, uint32 blockTimestampLast);\\n    function price0CumulativeLast() external view returns (uint);\\n    function price1CumulativeLast() external view returns (uint);\\n    function kLast() external view returns (uint);\\n    function totalSupply() external view returns (uint);\\n    function balanceOf(address) external view returns (uint);\\n\\n    function mint(address to) external returns (uint liquidity);\\n    function burn(address from, address to, uint amount) external returns (uint amount0, uint amount1);\\n    function swap(uint amount0Out, uint amount1Out, address to, bytes calldata data) external;\\n    function skim(address to) external;\\n    function sync() external;\\n\\n    function initialize(address tokenA, address tokenB, address platform, address tgas) external;\\n    function swapFee(uint amount, address token, address to) external ;\\n    function queryReward() external view returns (uint rewardAmount, uint blockNumber);\\n    function mintReward() external returns (uint rewardAmount);\\n    function getTGASReserve() external view returns (uint);\\n}\"\r\n    },\r\n    \"contracts/libraries/TomiSwapLibrary.sol\": {\r\n      \"content\": \"pragma solidity >=0.5.0;\\n\\nimport '../interfaces/ITomiPair.sol';\\nimport '../interfaces/ITomiFactory.sol';\\nimport \\\"./SafeMath.sol\\\";\\n\\nlibrary TomiSwapLibrary {\\n    using SafeMath for uint;\\n\\n    function sortTokens(address tokenA, address tokenB) internal pure returns (address token0, address token1) {\\n        require(tokenA != tokenB, 'TomiSwapLibrary: IDENTICAL_ADDRESSES');\\n        (token0, token1) = tokenA < tokenB ? (tokenA, tokenB) : (tokenB, tokenA);\\n        require(token0 != address(0), 'TomiSwapLibrary: ZERO_ADDRESS');\\n    }\\n\\n    function pairFor(address factory, address tokenA, address tokenB) internal view returns (address pair) {\\n        (address token0, address token1) = sortTokens(tokenA, tokenB);\\n        bytes32 salt = keccak256(abi.encodePacked(token0, token1));\\n        bytes32 rawAddress = keccak256(\\n        abi.encodePacked(\\n            bytes1(0xff),\\n            factory,\\n            salt,\\n            ITomiFactory(factory).contractCodeHash()\\n            )\\n        );\\n        return address(bytes20(rawAddress << 96));\\n    }\\n\\n    function getReserves(address factory, address tokenA, address tokenB) internal view returns (uint reserveA, uint reserveB) {\\n        (address token0,) = sortTokens(tokenA, tokenB);\\n        (uint reserve0, uint reserve1,) = ITomiPair(pairFor(factory, tokenA, tokenB)).getReserves();\\n        (reserveA, reserveB) = tokenA == token0 ? (reserve0, reserve1) : (reserve1, reserve0);\\n    }\\n    \\n    function quoteEnhance(address factory, address tokenA, address tokenB, uint amountA) internal view returns(uint amountB) {\\n        (uint reserveA, uint reserveB) = getReserves(factory, tokenA, tokenB);\\n        return quote(amountA, reserveA, reserveB);\\n    }\\n\\n    function quote(uint amountA, uint reserveA, uint reserveB) internal pure returns (uint amountB) {\\n        require(amountA > 0, 'TomiSwapLibrary: INSUFFICIENT_AMOUNT');\\n        require(reserveA > 0 && reserveB > 0, 'TomiSwapLibrary: INSUFFICIENT_LIQUIDITY');\\n        amountB = amountA.mul(reserveB) / reserveA;\\n    }\\n\\n    function getAmountOut(uint amountIn, uint reserveIn, uint reserveOut) internal pure returns (uint amountOut) {\\n        require(amountIn > 0, 'TomiSwapLibrary: INSUFFICIENT_INPUT_AMOUNT');\\n        require(reserveIn > 0 && reserveOut > 0, 'TomiSwapLibrary: INSUFFICIENT_LIQUIDITY');\\n        uint numerator = amountIn.mul(reserveOut);\\n        uint denominator = reserveIn.add(amountIn);\\n        amountOut = numerator / denominator;\\n    }\\n    \\n    function getAmountIn(uint amountOut, uint reserveIn, uint reserveOut) internal pure returns (uint amountIn) {\\n        require(amountOut > 0, 'TomiSwapLibrary: INSUFFICIENT_OUTPUT_AMOUNT');\\n        require(reserveIn > 0 && reserveOut > 0, 'TomiSwapLibrary: INSUFFICIENT_LIQUIDITY');\\n        uint numerator = reserveIn.mul(amountOut);\\n        uint denominator = reserveOut.sub(amountOut);\\n        amountIn = (numerator / denominator).add(1);\\n    }\\n\\n}\\n\"\r\n    },\r\n    \"contracts/TomiPlatform.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\npragma solidity >=0.6.6;\\n\\nimport './libraries/ConfigNames.sol';\\nimport './libraries/SafeMath.sol';\\nimport './libraries/TransferHelper.sol';\\nimport './libraries/TomiSwapLibrary.sol';\\nimport './interfaces/IWETH.sol';\\nimport './interfaces/ITomiGovernance.sol';\\nimport './interfaces/ITomiConfig.sol';\\nimport './interfaces/IERC20.sol';\\nimport './interfaces/ITomiFactory.sol';\\nimport './interfaces/ITomiPair.sol';\\nimport './interfaces/ITomiPool.sol';\\nimport './modules/Ownable.sol';\\nimport './modules/ReentrancyGuard.sol';\\nimport './interfaces/ITomiTransferListener.sol';\\nimport './interfaces/ITokenRegistry.sol';\\nimport './interfaces/ITomiStaking.sol';\\n\\ncontract TomiPlatform is Ownable {\\n    uint256 public version = 1;\\n    address public TOMI;\\n    address public CONFIG;\\n    address public FACTORY;\\n    address public WETH;\\n    address public GOVERNANCE;\\n    address public TRANSFER_LISTENER;\\n    address public POOL;\\n    uint256 public constant PERCENT_DENOMINATOR = 10000;\\n\\n    bool public isPause;\\n\\n    event AddLiquidity(\\n        address indexed player,\\n        address indexed tokenA,\\n        address indexed tokenB,\\n        uint256 amountA,\\n        uint256 amountB\\n    );\\n    event RemoveLiquidity(\\n        address indexed player,\\n        address indexed tokenA,\\n        address indexed tokenB,\\n        uint256 amountA,\\n        uint256 amountB\\n    );\\n    event SwapToken(\\n        address indexed receiver,\\n        address indexed fromToken,\\n        address indexed toToken,\\n        uint256 inAmount,\\n        uint256 outAmount\\n    );\\n\\n    receive() external payable {\\n        assert(msg.sender == WETH);\\n    }\\n\\n    modifier ensure(uint256 deadline) {\\n        require(deadline >= block.timestamp, 'TOMI PLATFORM : EXPIRED');\\n        _;\\n    }\\n\\n    modifier noneTokenCall() {\\n        require(ITokenRegistry(CONFIG).tokenStatus(msg.sender) == 0, 'TOMI PLATFORM : ILLEGAL CALL');\\n        _;\\n    }\\n\\n    function initialize(\\n        address _TOMI,\\n        address _CONFIG,\\n        address _FACTORY,\\n        address _WETH,\\n        address _GOVERNANCE,\\n        address _TRANSFER_LISTENER,\\n        address _POOL\\n    ) external onlyOwner {\\n        TOMI = _TOMI;\\n        CONFIG = _CONFIG;\\n        FACTORY = _FACTORY;\\n        WETH = _WETH;\\n        GOVERNANCE = _GOVERNANCE;\\n        TRANSFER_LISTENER = _TRANSFER_LISTENER;\\n        POOL = _POOL;\\n    }\\n\\n    function pause() external onlyOwner {\\n        isPause = true;\\n    }\\n\\n    function resume() external onlyOwner {\\n        isPause = false;\\n    }\\n\\n    function _addLiquidity(\\n        address tokenA,\\n        address tokenB,\\n        uint256 amountADesired,\\n        uint256 amountBDesired,\\n        uint256 amountAMin,\\n        uint256 amountBMin\\n    ) internal returns (uint256 amountA, uint256 amountB) {\\n        if (ITomiFactory(FACTORY).getPair(tokenA, tokenB) == address(0)) {\\n            ITomiConfig(CONFIG).addToken(tokenA);\\n            ITomiConfig(CONFIG).addToken(tokenB);\\n            ITomiFactory(FACTORY).createPair(tokenA, tokenB);\\n        }\\n        require(\\n            ITomiConfig(CONFIG).checkPair(tokenA, tokenB),\\n            'TOMI PLATFORM : ADD LIQUIDITY PAIR CONFIG CHECK FAIL'\\n        );\\n        (uint256 reserveA, uint256 reserveB) = TomiSwapLibrary.getReserves(FACTORY, tokenA, tokenB);\\n        if (reserveA == 0 && reserveB == 0) {\\n            (amountA, amountB) = (amountADesired, amountBDesired);\\n        } else {\\n            uint256 amountBOptimal = TomiSwapLibrary.quote(amountADesired, reserveA, reserveB);\\n            if (amountBOptimal <= amountBDesired) {\\n                require(amountBOptimal >= amountBMin, 'TOMI PLATFORM : INSUFFICIENT_B_AMOUNT');\\n                (amountA, amountB) = (amountADesired, amountBOptimal);\\n            } else {\\n                uint256 amountAOptimal = TomiSwapLibrary.quote(amountBDesired, reserveB, reserveA);\\n                assert(amountAOptimal <= amountADesired);\\n                require(amountAOptimal >= amountAMin, 'TOMI PLATFORM : INSUFFICIENT_A_AMOUNT');\\n                (amountA, amountB) = (amountAOptimal, amountBDesired);\\n            }\\n        }\\n        ITomiFactory(FACTORY).addPlayerPair(msg.sender, ITomiFactory(FACTORY).getPair(tokenA, tokenB));\\n    }\\n\\n    function addLiquidity(\\n        address tokenA,\\n        address tokenB,\\n        uint256 amountA,\\n        uint256 amountB,\\n        uint256 amountAMin,\\n        uint256 amountBMin,\\n        uint256 deadline\\n    )\\n        external\\n        ensure(deadline)\\n        returns (\\n            uint256 _amountA,\\n            uint256 _amountB,\\n            uint256 _liquidity\\n        )\\n{\\n        require(!isPause, \\\"TOMI PAUSED\\\");\\n        (_amountA, _amountB) = _addLiquidity(tokenA, tokenB, amountA, amountB, amountAMin, amountBMin);\\n        address pair = TomiSwapLibrary.pairFor(FACTORY, tokenA, tokenB);\\n        TransferHelper.safeTransferFrom(tokenA, msg.sender, pair, _amountA);\\n        TransferHelper.safeTransferFrom(tokenB, msg.sender, pair, _amountB);\\n\\n        // notify pool\\n        ITomiPool(POOL).preProductivityChanged(pair, msg.sender);\\n        _liquidity = ITomiPair(pair).mint(msg.sender);\\n        ITomiPool(POOL).postProductivityChanged(pair, msg.sender);\\n\\n        _transferNotify(msg.sender, pair, tokenA, _amountA);\\n        _transferNotify(msg.sender, pair, tokenB, _amountB);\\n        emit AddLiquidity(msg.sender, tokenA, tokenB, _amountA, _amountB);\\n    }\\n\\n    function addLiquidityETH(\\n        address token,\\n        uint256 amountTokenDesired,\\n        uint256 amountTokenMin,\\n        uint256 amountETHMin,\\n        uint256 deadline\\n    )\\n        external\\n        payable\\n        ensure(deadline)\\n        returns (\\n            uint256 amountToken,\\n            uint256 amountETH,\\n            uint256 liquidity\\n        )\\n    {\\n        require(!isPause, \\\"TOMI PAUSED\\\");\\n        (amountToken, amountETH) = _addLiquidity(\\n            token,\\n            WETH,\\n            amountTokenDesired,\\n            msg.value,\\n            amountTokenMin,\\n            amountETHMin\\n        );\\n        address pair = TomiSwapLibrary.pairFor(FACTORY, token, WETH);\\n        TransferHelper.safeTransferFrom(token, msg.sender, pair, amountToken);\\n        IWETH(WETH).deposit{value: amountETH}();\\n        assert(IWETH(WETH).transfer(pair, amountETH));\\n\\n        // notify pool\\n        ITomiPool(POOL).preProductivityChanged(pair, msg.sender);\\n        liquidity = ITomiPair(pair).mint(msg.sender);\\n        ITomiPool(POOL).postProductivityChanged(pair, msg.sender);\\n\\n        _transferNotify(msg.sender, pair, WETH, amountETH);\\n        _transferNotify(msg.sender, pair, token, amountToken);\\n        emit AddLiquidity(msg.sender, token, WETH, amountToken, amountETH);\\n        if (msg.value > amountETH) TransferHelper.safeTransferETH(msg.sender, msg.value - amountETH);\\n    }\\n\\n    function removeLiquidity(\\n        address tokenA,\\n        address tokenB,\\n        uint256 liquidity,\\n        uint256 amountAMin,\\n        uint256 amountBMin,\\n        address to,\\n        uint256 deadline\\n    ) public ensure(deadline) returns (uint256 amountA, uint256 amountB) {\\n        require(!isPause, \\\"TOMI PAUSED\\\");\\n        address pair = TomiSwapLibrary.pairFor(FACTORY, tokenA, tokenB);\\n        uint256 _liquidity = liquidity;\\n        address _tokenA = tokenA;\\n        address _tokenB = tokenB;\\n\\n        // notify pool\\n        ITomiPool(POOL).preProductivityChanged(pair, msg.sender);\\n        (uint256 amount0, uint256 amount1) = ITomiPair(pair).burn(msg.sender, to, _liquidity);\\n        ITomiPool(POOL).postProductivityChanged(pair, msg.sender);\\n\\n        (address token0, ) = TomiSwapLibrary.sortTokens(_tokenA, _tokenB);\\n        (amountA, amountB) = _tokenA == token0 ? (amount0, amount1) : (amount1, amount0);\\n        _transferNotify(pair, to, _tokenA, amountA);\\n        _transferNotify(pair, to, _tokenB, amountB);\\n        require(amountA >= amountAMin, 'TOMI PLATFORM : INSUFFICIENT_A_AMOUNT');\\n        require(amountB >= amountBMin, 'TOMI PLATFORM : INSUFFICIENT_B_AMOUNT');\\n        emit RemoveLiquidity(msg.sender, _tokenA, _tokenB, amountA, amountB);\\n    }\\n\\n    function removeLiquidityETH(\\n        address token,\\n        uint256 liquidity,\\n        uint256 amountTokenMin,\\n        uint256 amountETHMin,\\n        address to,\\n        uint256 deadline\\n    ) public ensure(deadline) returns (uint256 amountToken, uint256 amountETH) {\\n        require(!isPause, \\\"TOMI PAUSED\\\");\\n        (amountToken, amountETH) = removeLiquidity(\\n            token,\\n            WETH,\\n            liquidity,\\n            amountTokenMin,\\n            amountETHMin,\\n            address(this),\\n            deadline\\n        );\\n        TransferHelper.safeTransfer(token, to, amountToken);\\n        IWETH(WETH).withdraw(amountETH);\\n        TransferHelper.safeTransferETH(to, amountETH);\\n        _transferNotify(address(this), to, token, amountToken);\\n        _transferNotify(address(this), to, WETH, amountETH);\\n    }\\n\\n    function _getAmountsOut(\\n        uint256 amount,\\n        address[] memory path,\\n        uint256 percent\\n    ) internal view returns (uint256[] memory amountOuts) {\\n        amountOuts = new uint256[](path.length);\\n        amountOuts[0] = amount;\\n        for (uint256 i = 0; i < path.length - 1; i++) {\\n            address inPath = path[i];\\n            address outPath = path[i + 1];\\n            (uint256 reserveA, uint256 reserveB) = TomiSwapLibrary.getReserves(FACTORY, inPath, outPath);\\n            uint256 outAmount = SafeMath.mul(amountOuts[i], SafeMath.sub(PERCENT_DENOMINATOR, percent));\\n            amountOuts[i + 1] = TomiSwapLibrary.getAmountOut(outAmount / PERCENT_DENOMINATOR, reserveA, reserveB);\\n        }\\n    }\\n\\n    function _getAmountsIn(\\n        uint256 amount,\\n        address[] memory path,\\n        uint256 percent\\n    ) internal view returns (uint256[] memory amountIn) {\\n        amountIn = new uint256[](path.length);\\n        amountIn[path.length - 1] = amount;\\n        for (uint256 i = path.length - 1; i > 0; i--) {\\n            address inPath = path[i - 1];\\n            address outPath = path[i];\\n            (uint256 reserveA, uint256 reserveB) = TomiSwapLibrary.getReserves(FACTORY, inPath, outPath);\\n            uint256 inAmount = TomiSwapLibrary.getAmountIn(amountIn[i], reserveA, reserveB);\\n            amountIn[i - 1] = SafeMath.add(\\n                SafeMath.mul(inAmount, PERCENT_DENOMINATOR) / SafeMath.sub(PERCENT_DENOMINATOR, percent),\\n                1\\n            );\\n        }\\n        amountIn = _getAmountsOut(amountIn[0], path, percent);\\n    }\\n\\n    function swapPrecondition(address token) public view returns (bool) {\\n        if (token == TOMI || token == WETH) return true;\\n        uint256 percent = ITomiConfig(CONFIG).getConfigValue(ConfigNames.TOKEN_TO_TGAS_PAIR_MIN_PERCENT);\\n        if (!existPair(WETH, TOMI)) return false;\\n        if (!existPair(TOMI, token)) return false;\\n        if (!(ITomiConfig(CONFIG).checkPair(TOMI, token) && ITomiConfig(CONFIG).checkPair(WETH, token))) return false;\\n        if (!existPair(WETH, token)) return true;\\n        if (percent == 0) return true;\\n        (uint256 reserveTOMI, ) = TomiSwapLibrary.getReserves(FACTORY, TOMI, token);\\n        (uint256 reserveWETH, ) = TomiSwapLibrary.getReserves(FACTORY, WETH, token);\\n        (uint256 reserveWETH2, uint256 reserveTOMI2) = TomiSwapLibrary.getReserves(FACTORY, WETH, TOMI);\\n        uint256 tomiValue = SafeMath.mul(reserveTOMI, reserveWETH2) / reserveTOMI2;\\n        uint256 limitValue = SafeMath.mul(SafeMath.add(tomiValue, reserveWETH), percent) / PERCENT_DENOMINATOR;\\n        return tomiValue >= limitValue;\\n    }\\n         \\n    function checkPath(address _path, address[] memory _paths) public pure returns (bool) {\\n        uint count;\\n        for(uint i; i<_paths.length; i++) {\\n            if(_paths[i] == _path) {\\n                count++;\\n            }\\n        }\\n        if(count == 1) {\\n            return true;\\n        } else {\\n            return false;\\n        }\\n    }\\n\\n    function _swap(\\n        uint256[] memory amounts,\\n        address[] memory path,\\n        address _to\\n    ) internal {\\n        require(!isPause, \\\"TOMI PAUSED\\\");\\n        require(swapPrecondition(path[path.length - 1]), 'TOMI PLATFORM : CHECK TOMI/TOKEN TO VALUE FAIL');\\n        for (uint256 i; i < path.length - 1; i++) {\\n            require(checkPath(path[i], path) && checkPath(path[i + 1], path), 'DEMAX PLATFORM : INVALID PATH');\\n            (address input, address output) = (path[i], path[i + 1]);\\n            require(swapPrecondition(input), 'TOMI PLATFORM : CHECK TOMI/TOKEN VALUE FROM FAIL');\\n            require(ITomiConfig(CONFIG).checkPair(input, output), 'TOMI PLATFORM : SWAP PAIR CONFIG CHECK FAIL');\\n            (address token0, address token1) = TomiSwapLibrary.sortTokens(input, output);\\n            uint256 amountOut = amounts[i + 1];\\n            (uint256 amount0Out, uint256 amount1Out) = input == token0\\n                ? (uint256(0), amountOut)\\n                : (amountOut, uint256(0));\\n            address to = i < path.length - 2 ? TomiSwapLibrary.pairFor(FACTORY, output, path[i + 2]) : _to;\\n\\n            // add k check\\n            address pair = TomiSwapLibrary.pairFor(FACTORY, input, output);\\n            (uint reserve0, uint resereve1, ) = ITomiPair(pair).getReserves();\\n            uint kBefore = SafeMath.mul(reserve0, resereve1);\\n\\n            ITomiPair(pair).swap(amount0Out, amount1Out, to, new bytes(0));\\n\\n            (reserve0, resereve1, ) = ITomiPair(pair).getReserves();\\n            uint kAfter = SafeMath.mul(reserve0, resereve1);\\n            require(kBefore <= kAfter, \\\"Burger K\\\");\\n\\n            if (amount0Out > 0)\\n                _transferNotify(TomiSwapLibrary.pairFor(FACTORY, input, output), to, token0, amount0Out);\\n            if (amount1Out > 0)\\n                _transferNotify(TomiSwapLibrary.pairFor(FACTORY, input, output), to, token1, amount1Out);\\n        }\\n        emit SwapToken(_to, path[0], path[path.length - 1], amounts[0], amounts[path.length - 1]);\\n    }\\n\\n    function _swapFee(\\n        uint256[] memory amounts,\\n        address[] memory path,\\n        uint256 percent\\n    ) internal {\\n        for (uint256 i = 0; i < path.length - 1; i++) {\\n            uint256 fee = SafeMath.mul(amounts[i], percent) / PERCENT_DENOMINATOR;\\n            address input = path[i];\\n            address output = path[i + 1];\\n            address currentPair = TomiSwapLibrary.pairFor(FACTORY, input, output);\\n            if (input == TOMI) {\\n                ITomiPair(currentPair).swapFee(fee, TOMI, POOL);\\n                _transferNotify(currentPair, POOL, TOMI, fee);\\n            } else {\\n                ITomiPair(currentPair).swapFee(fee, input, TomiSwapLibrary.pairFor(FACTORY, input, TOMI));\\n                (uint256 reserveIn, uint256 reserveTOMI) = TomiSwapLibrary.getReserves(FACTORY, input, TOMI);\\n                uint256 feeOut = TomiSwapLibrary.getAmountOut(fee, reserveIn, reserveTOMI);\\n                ITomiPair(TomiSwapLibrary.pairFor(FACTORY, input, TOMI)).swapFee(feeOut, TOMI, POOL);\\n                _transferNotify(currentPair, TomiSwapLibrary.pairFor(FACTORY, input, TOMI), input, fee);\\n                _transferNotify(TomiSwapLibrary.pairFor(FACTORY, input, TOMI), POOL, TOMI, feeOut);\\n                fee = feeOut;\\n            }\\n            if (fee > 0) { \\n                ITomiPool(POOL).addRewardFromPlatform(currentPair, fee); \\n            }\\n        }\\n    }\\n\\n    function _getSwapFeePercent() internal view returns (uint256) {\\n        return ITomiConfig(CONFIG).getConfigValue(ConfigNames.SWAP_FEE_PERCENT);\\n    }\\n\\n    function swapExactTokensForTokens(\\n        uint256 amountIn,\\n        uint256 amountOutMin,\\n        address[] calldata path,\\n        address to,\\n        uint256 deadline\\n    ) external ensure(deadline) returns (uint256[] memory amounts) {\\n\\n        uint256 percent = _getSwapFeePercent();\\n        amounts = _getAmountsOut(amountIn, path, percent);\\n        require(amounts[amounts.length - 1] >= amountOutMin, 'TOMI PLATFORM : INSUFFICIENT_OUTPUT_AMOUNT');\\n        address pair = TomiSwapLibrary.pairFor(FACTORY, path[0], path[1]);\\n        _innerTransferFrom(\\n            path[0],\\n            msg.sender,\\n            pair,\\n            SafeMath.mul(amountIn, SafeMath.sub(PERCENT_DENOMINATOR, percent)) / PERCENT_DENOMINATOR\\n        );\\n        _swap(amounts, path, to);\\n        _innerTransferFrom(path[0], msg.sender, pair, SafeMath.mul(amounts[0], percent) / PERCENT_DENOMINATOR);\\n        _swapFee(amounts, path, percent);\\n    }\\n\\n    function _innerTransferFrom(\\n        address token,\\n        address from,\\n        address to,\\n        uint256 amount\\n    ) internal {\\n        TransferHelper.safeTransferFrom(token, from, to, amount);\\n        _transferNotify(from, to, token, amount);\\n    }\\n\\n    function _innerTransferWETH(address to, uint256 amount) internal {\\n        assert(IWETH(WETH).transfer(to, amount));\\n        _transferNotify(address(this), to, WETH, amount);\\n    }\\n\\n    function swapExactETHForTokens(\\n        uint256 amountOutMin,\\n        address[] calldata path,\\n        address to,\\n        uint256 deadline\\n    ) external payable ensure(deadline) returns (uint256[] memory amounts) {\\n        require(path[0] == WETH, 'TOMI PLATFORM : INVALID_PATH');\\n        uint256 percent = _getSwapFeePercent();\\n        amounts = _getAmountsOut(msg.value, path, percent);\\n        require(amounts[amounts.length - 1] >= amountOutMin, 'TOMI PLATFORM : INSUFFICIENT_OUTPUT_AMOUNT');\\n        address pair = TomiSwapLibrary.pairFor(FACTORY, path[0], path[1]);\\n        IWETH(WETH).deposit{\\n            value: SafeMath.mul(amounts[0], SafeMath.sub(PERCENT_DENOMINATOR, percent)) / PERCENT_DENOMINATOR\\n        }();\\n        _innerTransferWETH(\\n            pair,\\n            SafeMath.mul(amounts[0], SafeMath.sub(PERCENT_DENOMINATOR, percent)) / PERCENT_DENOMINATOR\\n        );\\n        _swap(amounts, path, to);\\n\\n        IWETH(WETH).deposit{value: SafeMath.mul(amounts[0], percent) / PERCENT_DENOMINATOR}();\\n        _innerTransferWETH(pair, SafeMath.mul(amounts[0], percent) / PERCENT_DENOMINATOR);\\n        _swapFee(amounts, path, percent);\\n    }\\n\\n    function swapExactTokensForETH(\\n        uint256 amountIn,\\n        uint256 amountOutMin,\\n        address[] calldata path,\\n        address to,\\n        uint256 deadline\\n    ) external ensure(deadline) returns (uint256[] memory amounts) {\\n        require(path[path.length - 1] == WETH, 'TOMI PLATFORM : INVALID_PATH');\\n        uint256 percent = _getSwapFeePercent();\\n        amounts = _getAmountsOut(amountIn, path, percent);\\n        require(amounts[amounts.length - 1] >= amountOutMin, 'TOMI PLATFORM : INSUFFICIENT_OUTPUT_AMOUNT');\\n        address pair = TomiSwapLibrary.pairFor(FACTORY, path[0], path[1]);\\n        _innerTransferFrom(\\n            path[0],\\n            msg.sender,\\n            pair,\\n            SafeMath.mul(amountIn, SafeMath.sub(PERCENT_DENOMINATOR, percent)) / PERCENT_DENOMINATOR\\n        );\\n        _swap(amounts, path, address(this));\\n\\n        _innerTransferFrom(path[0], msg.sender, pair, SafeMath.mul(amounts[0], percent) / PERCENT_DENOMINATOR);\\n        _swapFee(amounts, path, percent);\\n\\n        IWETH(WETH).withdraw(amounts[amounts.length - 1]);\\n        TransferHelper.safeTransferETH(to, amounts[amounts.length - 1]);\\n    }\\n\\n    function swapTokensForExactTokens(\\n        uint256 amountOut,\\n        uint256 amountInMax,\\n        address[] calldata path,\\n        address to,\\n        uint256 deadline\\n    ) external ensure(deadline) returns (uint256[] memory amounts) {\\n        uint256 percent = _getSwapFeePercent();\\n        amounts = _getAmountsIn(amountOut, path, percent);\\n        require(amounts[0] <= amountInMax, 'TOMI PLATFORM : EXCESSIVE_INPUT_AMOUNT');\\n        address pair = TomiSwapLibrary.pairFor(FACTORY, path[0], path[1]);\\n\\n        _innerTransferFrom(\\n            path[0],\\n            msg.sender,\\n            pair,\\n            SafeMath.mul(amounts[0], SafeMath.sub(PERCENT_DENOMINATOR, percent)) / PERCENT_DENOMINATOR\\n        );\\n        _swap(amounts, path, to);\\n        _innerTransferFrom(path[0], msg.sender, pair, SafeMath.mul(amounts[0], percent) / PERCENT_DENOMINATOR);\\n        _swapFee(amounts, path, percent);\\n    }\\n\\n    function swapTokensForExactETH(\\n        uint256 amountOut,\\n        uint256 amountInMax,\\n        address[] calldata path,\\n        address to,\\n        uint256 deadline\\n    ) external ensure(deadline) returns (uint256[] memory amounts) {\\n        require(path[path.length - 1] == WETH, 'TOMI PLATFORM : INVALID_PATH');\\n        uint256 percent = _getSwapFeePercent();\\n        amounts = _getAmountsIn(amountOut, path, percent);\\n        require(amounts[0] <= amountInMax, 'TOMI PLATFORM : EXCESSIVE_INPUT_AMOUNT');\\n        address pair = TomiSwapLibrary.pairFor(FACTORY, path[0], path[1]);\\n        _innerTransferFrom(\\n            path[0],\\n            msg.sender,\\n            pair,\\n            SafeMath.mul(amounts[0], SafeMath.sub(PERCENT_DENOMINATOR, percent)) / PERCENT_DENOMINATOR\\n        );\\n        _swap(amounts, path, address(this));\\n        IWETH(WETH).withdraw(amounts[amounts.length - 1]);\\n        TransferHelper.safeTransferETH(to, amounts[amounts.length - 1]);\\n\\n        _innerTransferFrom(path[0], msg.sender, pair, SafeMath.mul(amounts[0], percent) / PERCENT_DENOMINATOR);\\n        _swapFee(amounts, path, percent);\\n    }\\n\\n    function swapETHForExactTokens(\\n        uint256 amountOut,\\n        address[] calldata path,\\n        address to,\\n        uint256 deadline\\n    ) external payable ensure(deadline) returns (uint256[] memory amounts) {\\n        require(path[0] == WETH, 'TOMI PLATFORM : INVALID_PATH');\\n        uint256 percent = _getSwapFeePercent();\\n        amounts = _getAmountsIn(amountOut, path, percent);\\n        require(amounts[0] <= msg.value, 'TOMI PLATFORM : EXCESSIVE_INPUT_AMOUNT');\\n\\n        IWETH(WETH).deposit{\\n            value: SafeMath.mul(amounts[0], SafeMath.sub(PERCENT_DENOMINATOR, percent)) / PERCENT_DENOMINATOR\\n        }();\\n        address pair = TomiSwapLibrary.pairFor(FACTORY, path[0], path[1]);\\n        _innerTransferWETH(\\n            pair,\\n            SafeMath.mul(amounts[0], SafeMath.sub(PERCENT_DENOMINATOR, percent)) / PERCENT_DENOMINATOR\\n        );\\n        _swap(amounts, path, to);\\n\\n        IWETH(WETH).deposit{value: SafeMath.mul(amounts[0], percent) / PERCENT_DENOMINATOR}();\\n        _innerTransferWETH(pair, SafeMath.mul(amounts[0], percent) / PERCENT_DENOMINATOR);\\n        _swapFee(amounts, path, percent);\\n        if (msg.value > amounts[0]) TransferHelper.safeTransferETH(msg.sender, msg.value - amounts[0]);\\n    }\\n\\n    function _transferNotify(\\n        address from,\\n        address to,\\n        address token,\\n        uint256 amount\\n    ) internal {\\n        ITomiTransferListener(TRANSFER_LISTENER).transferNotify(from, to, token, amount);\\n    }\\n\\n    function existPair(address tokenA, address tokenB) public view returns (bool) {\\n        return ITomiFactory(FACTORY).getPair(tokenA, tokenB) != address(0);\\n    }\\n\\n    function getReserves(address tokenA, address tokenB) public view returns (uint256, uint256) {\\n        return TomiSwapLibrary.getReserves(FACTORY, tokenA, tokenB);\\n    }\\n\\n    function pairFor(address tokenA, address tokenB) public view returns (address) {\\n        return TomiSwapLibrary.pairFor(FACTORY, tokenA, tokenB);\\n    }\\n\\n    function getAmountOut(\\n        uint256 amountIn,\\n        uint256 reserveIn,\\n        uint256 reserveOut\\n    ) public view returns (uint256 amountOut) {\\n        uint256 percent = _getSwapFeePercent();\\n        uint256 amount = SafeMath.mul(amountIn, SafeMath.sub(PERCENT_DENOMINATOR, percent)) / PERCENT_DENOMINATOR;\\n        return TomiSwapLibrary.getAmountOut(amount, reserveIn, reserveOut);\\n    }\\n\\n    function getAmountIn(\\n        uint256 amountOut,\\n        uint256 reserveIn,\\n        uint256 reserveOut\\n    ) public view returns (uint256 amountIn) {\\n        uint256 percent = _getSwapFeePercent();\\n        uint256 amount = TomiSwapLibrary.getAmountIn(amountOut, reserveIn, reserveOut);\\n        return SafeMath.mul(amount, PERCENT_DENOMINATOR) / SafeMath.sub(PERCENT_DENOMINATOR, percent);\\n    }\\n\\n    function getAmountsOut(uint256 amountIn, address[] memory path) public view returns (uint256[] memory amounts) {\\n        uint256 percent = _getSwapFeePercent();\\n        return _getAmountsOut(amountIn, path, percent);\\n    }\\n\\n    function getAmountsIn(uint256 amountOut, address[] memory path) public view returns (uint256[] memory amounts) {\\n        uint256 percent = _getSwapFeePercent();\\n        return _getAmountsIn(amountOut, path, percent);\\n    }\\n\\n    function migrateLiquidity(address pair, address tokenA, address tokenB, address[] calldata users) external onlyOwner {\\n        if (ITomiFactory(FACTORY).getPair(tokenA, tokenB) == address(0)) {\\n            ITomiFactory(FACTORY).createPair(tokenA, tokenB);\\n        }\\n        address newPair = ITomiFactory(FACTORY).getPair(tokenA, tokenB);\\n        for(uint i = 0; i < users.length; i++) {\\n            uint liquidity = ITomiPair(pair).balanceOf(users[i]);\\n            if(liquidity > 0) {\\n                ITomiPair(pair).burn(users[i], newPair, liquidity);\\n                ITomiPair(newPair).mint(users[i]);\\n                ITomiFactory(FACTORY).addPlayerPair(users[i], newPair);\\n            }\\n        }\\n\\n        ITomiTransferListener(TRANSFER_LISTENER).upgradeProdutivity(pair, newPair);    \\n\\n    }\\n}\\n\"\r\n    },\r\n    \"contracts/libraries/ConfigNames.sol\": {\r\n      \"content\": \"pragma solidity >=0.5.16;\\n\\nlibrary ConfigNames {\\n    bytes32 public constant PRODUCE_TGAS_RATE = bytes32('PRODUCE_TGAS_RATE');\\n    bytes32 public constant SWAP_FEE_PERCENT = bytes32('SWAP_FEE_PERCENT');\\n    bytes32 public constant LIST_TGAS_AMOUNT = bytes32('LIST_TGAS_AMOUNT');\\n    bytes32 public constant UNSTAKE_DURATION = bytes32('UNSTAKE_DURATION');\\n    // bytes32 public constant EXECUTION_DURATION = bytes32('EXECUTION_DURATION');\\n    bytes32 public constant REMOVE_LIQUIDITY_DURATION = bytes32('REMOVE_LIQUIDITY_DURATION');\\n    bytes32 public constant TOKEN_TO_TGAS_PAIR_MIN_PERCENT = bytes32('TOKEN_TO_TGAS_PAIR_MIN_PERCENT');\\n    bytes32 public constant LIST_TOKEN_FAILURE_BURN_PRECENT = bytes32('LIST_TOKEN_FAILURE_BURN_PRECENT');\\n    bytes32 public constant LIST_TOKEN_SUCCESS_BURN_PRECENT = bytes32('LIST_TOKEN_SUCCESS_BURN_PRECENT');\\n    bytes32 public constant PROPOSAL_TGAS_AMOUNT = bytes32('PROPOSAL_TGAS_AMOUNT');\\n    // bytes32 public constant VOTE_DURATION = bytes32('VOTE_DURATION');\\n    bytes32 public constant VOTE_REWARD_PERCENT = bytes32('VOTE_REWARD_PERCENT');\\n    bytes32 public constant TOKEN_PENGDING_SWITCH = bytes32('TOKEN_PENGDING_SWITCH');\\n    bytes32 public constant TOKEN_PENGDING_TIME = bytes32('TOKEN_PENGDING_TIME');\\n    bytes32 public constant LIST_TOKEN_SWITCH = bytes32('LIST_TOKEN_SWITCH');\\n    bytes32 public constant DEV_PRECENT = bytes32('DEV_PRECENT');\\n    bytes32 public constant FEE_GOVERNANCE_REWARD_PERCENT = bytes32('FEE_GOVERNANCE_REWARD_PERCENT');\\n    bytes32 public constant FEE_LP_REWARD_PERCENT = bytes32('FEE_LP_REWARD_PERCENT');\\n    bytes32 public constant FEE_FUNDME_REWARD_PERCENT = bytes32('FEE_FUNDME_REWARD_PERCENT');\\n    bytes32 public constant FEE_LOTTERY_REWARD_PERCENT = bytes32('FEE_LOTTERY_REWARD_PERCENT');\\n    bytes32 public constant FEE_STAKING_REWARD_PERCENT = bytes32('FEE_STAKING_REWARD_PERCENT');\\n}\"\r\n    },\r\n    \"contracts/libraries/TransferHelper.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: GPL-3.0-or-later\\n\\npragma solidity >=0.6.0;\\n\\n// helper methods for interacting with ERC20 tokens and sending ETH that do not consistently return true/false\\nlibrary TransferHelper {\\n    function safeApprove(address token, address to, uint value) internal {\\n        // bytes4(keccak256(bytes('approve(address,uint256)')));\\n        (bool success, bytes memory data) = token.call(abi.encodeWithSelector(0x095ea7b3, to, value));\\n        require(success && (data.length == 0 || abi.decode(data, (bool))), 'TransferHelper: APPROVE_FAILED');\\n    }\\n\\n    function safeTransfer(address token, address to, uint value) internal {\\n        // bytes4(keccak256(bytes('transfer(address,uint256)')));\\n        (bool success, bytes memory data) = token.call(abi.encodeWithSelector(0xa9059cbb, to, value));\\n        require(success && (data.length == 0 || abi.decode(data, (bool))), 'TransferHelper: TRANSFER_FAILED');\\n    }\\n\\n    function safeTransferFrom(address token, address from, address to, uint value) internal {\\n        // bytes4(keccak256(bytes('transferFrom(address,address,uint256)')));\\n        (bool success, bytes memory data) = token.call(abi.encodeWithSelector(0x23b872dd, from, to, value));\\n        require(success && (data.length == 0 || abi.decode(data, (bool))), 'TransferHelper: TRANSFER_FROM_FAILED');\\n    }\\n\\n    function safeTransferETH(address to, uint value) internal {\\n        (bool success,) = to.call{value:value}(new bytes(0));\\n        require(success, 'TransferHelper: ETH_TRANSFER_FAILED');\\n    }\\n}\"\r\n    },\r\n    \"contracts/interfaces/IWETH.sol\": {\r\n      \"content\": \"pragma solidity >=0.5.0;\\n\\ninterface IWETH {\\n    function deposit() external payable;\\n    function transfer(address to, uint value) external returns (bool);\\n    function withdraw(uint) external;\\n}\\n\"\r\n    },\r\n    \"contracts/interfaces/ITomiConfig.sol\": {\r\n      \"content\": \"pragma solidity >=0.5.0;\\n\\ninterface ITomiConfig {\\n    function governor() external view returns (address);\\n    function dev() external view returns (address);\\n    function PERCENT_DENOMINATOR() external view returns (uint);\\n    function getConfig(bytes32 _name) external view returns (uint minValue, uint maxValue, uint maxSpan, uint value, uint enable);\\n    function getConfigValue(bytes32 _name) external view returns (uint);\\n    function changeConfigValue(bytes32 _name, uint _value) external returns (bool);\\n    function checkToken(address _token) external view returns(bool);\\n    function checkPair(address tokenA, address tokenB) external view returns (bool);\\n    function listToken(address _token) external returns (bool);\\n    function getDefaultListTokens() external returns (address[] memory);\\n    function platform() external view returns  (address);\\n    function addToken(address _token) external returns (bool);\\n}\"\r\n    },\r\n    \"contracts/interfaces/ITomiPool.sol\": {\r\n      \"content\": \"pragma solidity >=0.5.0;\\n\\ninterface ITomiPool {\\n    function addRewardFromPlatform(address _pair, uint _amount) external;\\n    function preProductivityChanged(address _pair, address _user) external;\\n    function postProductivityChanged(address _pair, address _user) external;\\n}\"\r\n    },\r\n    \"contracts/modules/ReentrancyGuard.sol\": {\r\n      \"content\": \"/**\\n *Submitted for verification at BscScan.com on 2021-06-30\\n*/\\n\\npragma solidity >=0.6.6;\\n\\ninterface IDemaxTransferListener {\\n    function transferNotify(address from, address to, address token, uint amount)  external returns (bool);\\n    function upgradeProdutivity(address fromPair, address toPair) external;\\n}\\n// Dependency file: contracts/modules/ReentrancyGuard.sol\\n\\n// SPDX-License-Identifier: MIT\\n\\n// pragma solidity >=0.6.0 <0.8.0;\\n\\n/**\\n * @dev Contract module that helps prevent reentrant calls to a function.\\n *\\n * Inheriting from `ReentrancyGuard` will make the {nonReentrant} modifier\\n * available, which can be applied to functions to make sure there are no nested\\n * (reentrant) calls to them.\\n *\\n * Note that because there is a single `nonReentrant` guard, functions marked as\\n * `nonReentrant` may not call one another. This can be worked around by making\\n * those functions `private`, and then adding `external` `nonReentrant` entry\\n * points to them.\\n *\\n * TIP: If you would like to learn more about reentrancy and alternative ways\\n * to protect against it, check out our blog post\\n * https://blog.openzeppelin.com/reentrancy-after-istanbul/[Reentrancy After Istanbul].\\n */\\nabstract contract ReentrancyGuard {\\n    // Booleans are more expensive than uint256 or any type that takes up a full\\n    // word because each write operation emits an extra SLOAD to first read the\\n    // slot's contents, replace the bits taken up by the boolean, and then write\\n    // back. This is the compiler's defense against contract upgrades and\\n    // pointer aliasing, and it cannot be disabled.\\n\\n    // The values being non-zero value makes deployment a bit more expensive,\\n    // but in exchange the refund on every call to nonReentrant will be lower in\\n    // amount. Since refunds are capped to a percentage of the total\\n    // transaction's gas, it is best to keep them low in cases like this one, to\\n    // increase the likelihood of the full refund coming into effect.\\n    uint256 private constant _NOT_ENTERED = 1;\\n    uint256 private constant _ENTERED = 2;\\n\\n    uint256 private _status;\\n\\n    constructor () internal {\\n        _status = _NOT_ENTERED;\\n    }\\n\\n    /**\\n     * @dev Prevents a contract from calling itself, directly or indirectly.\\n     * Calling a `nonReentrant` function from another `nonReentrant`\\n     * function is not supported. It is possible to prevent this from happening\\n     * by making the `nonReentrant` function external, and make it call a\\n     * `private` function that does the actual work.\\n     */\\n    modifier nonReentrant() {\\n        // On the first call to nonReentrant, _notEntered will be true\\n        require(_status != _ENTERED, \\\"ReentrancyGuard: reentrant call\\\");\\n\\n        // Any calls to nonReentrant after this point will fail\\n        _status = _ENTERED;\\n\\n        _;\\n\\n        // By storing the original value once again, a refund is triggered (see\\n        // https://eips.ethereum.org/EIPS/eip-2200)\\n        _status = _NOT_ENTERED;\\n    }\\n}\\n\"\r\n    },\r\n    \"contracts/interfaces/ITomiTransferListener.sol\": {\r\n      \"content\": \"pragma solidity >=0.6.6;\\n\\ninterface ITomiTransferListener {\\n    function transferNotify(address from, address to, address token, uint amount)  external returns (bool);\\n    function upgradeProdutivity(address fromPair, address toPair) external;\\n}\"\r\n    },\r\n    \"contracts/interfaces/ITokenRegistry.sol\": {\r\n      \"content\": \"pragma solidity >=0.5.16;\\n\\ninterface ITokenRegistry {\\n    function tokenStatus(address _token) external view returns(uint);\\n    function pairStatus(address tokenA, address tokenB) external view returns (uint);\\n    function NONE() external view returns(uint);\\n    function REGISTERED() external view returns(uint);\\n    function PENDING() external view returns(uint);\\n    function OPENED() external view returns(uint);\\n    function CLOSED() external view returns(uint);\\n    function registryToken(address _token) external returns (bool);\\n    function publishToken(address _token) external returns (bool);\\n    function updateToken(address _token, uint _status) external returns (bool);\\n    function updatePair(address tokenA, address tokenB, uint _status) external returns (bool);\\n    function tokenCount() external view returns(uint);\\n    function validTokens() external view returns(address[] memory);\\n    function iterateValidTokens(uint32 _start, uint32 _end) external view returns (address[] memory);\\n}\"\r\n    },\r\n    \"contracts/interfaces/ITomiStaking.sol\": {\r\n      \"content\": \"pragma solidity >=0.5.0;\\n\\ninterface ITomiStaking {\\n    function updateRevenueShare(uint256 revenueShared) external;\\n}\\n\"\r\n    },\r\n    \"contracts/TomiPool.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\npragma solidity >= 0.5.1;\\n\\nimport './modules/Ownable.sol';\\nimport './libraries/TransferHelper.sol';\\nimport './interfaces/ITomiPair.sol';\\nimport './interfaces/ITomiFactory.sol';\\nimport './interfaces/ITomiGovernance.sol';\\nimport './libraries/SafeMath.sol';\\nimport './libraries/ConfigNames.sol';\\nimport './interfaces/ITomiConfig.sol';\\nimport './interfaces/IERC20.sol';\\nimport './interfaces/ITomiStaking.sol';\\n\\ninterface ITomiPlatform {\\n    function swapExactTokensForETH(\\n        uint256 amountIn,\\n        uint256 amountOutMin,\\n        address[] calldata path,\\n        address to,\\n        uint256 deadline\\n    ) external returns (uint256[] memory amounts) ;\\n    function swapExactTokensForTokens(\\n        uint256 amountIn,\\n        uint256 amountOutMin,\\n        address[] calldata path,\\n        address to,\\n        uint256 deadline\\n    ) external returns (uint256[] memory amounts);\\n}\\n\\ncontract TomiPool is Ownable {\\n\\n    using SafeMath for uint;\\n    address public TOMI;\\n    address public FACTORY;\\n    address public PLATFORM;\\n    address public WETH;\\n    address public CONFIG;\\n    address public GOVERNANCE;\\n    address public FUNDING;\\n    address public LOTTERY;\\n    address public STAKING;\\n    uint public totalReward;\\n    \\n    struct UserInfo {\\n        uint rewardDebt; // Reward debt. \\n        uint rewardEarn; // Reward earn and not minted\\n    }\\n    \\n    event ClaimReward(address indexed user, address indexed pair, address indexed rewardToken, uint amountTOMI);\\n    event AddReward(address indexed pair, uint amount);\\n\\n    mapping(address => mapping (address => UserInfo)) public users;\\n    \\n    mapping (address => uint) public pairAmountPerShare;\\n    mapping (address => uint) public pairReward;\\n    \\n     function initialize(address _TOMI, address _WETH, address _FACTORY, address _PLATFORM, address _CONFIG, address _GOVERNANCE, address _FUNDING, address _LOTTERY, address _STAKING) external onlyOwner {\\n        TOMI = _TOMI;\\n        WETH = _WETH;\\n        FACTORY = _FACTORY;\\n        PLATFORM = _PLATFORM;\\n        CONFIG = _CONFIG;\\n        GOVERNANCE = _GOVERNANCE;\\n        FUNDING = _FUNDING;\\n        LOTTERY = _LOTTERY;\\n        STAKING = _STAKING;\\n    }\\n    \\n    function upgrade(address _newPool, address[] calldata _pairs) external onlyOwner {\\n        IERC20(TOMI).approve(_newPool, totalReward);\\n        for(uint i = 0;i < _pairs.length;i++) {\\n            if(pairReward[_pairs[i]] > 0) {\\n                TomiPool(_newPool).addReward(_pairs[i], pairReward[_pairs[i]]);\\n                totalReward = totalReward.sub(pairReward[_pairs[i]]);\\n                pairReward[_pairs[i]] = 0;\\n            }\\n        }\\n    }\\n\\n    function newStakingSettle(address _STAKING) external onlyOwner {\\n        require(_STAKING != STAKING, \\\"STAKING ADDRESS IS THE SAME\\\");\\n        require(_STAKING != address(0), \\\"STAKING ADDRESS IS DEFAULT ADDRESS\\\");\\n        STAKING = _STAKING;\\n    }\\n    \\n    function addRewardFromPlatform(address _pair, uint _amount) external {\\n       require(msg.sender == PLATFORM, \\\"TOMI POOL: FORBIDDEN\\\");\\n        uint balanceOf = IERC20(TOMI).balanceOf(address(this));\\n        require(balanceOf.sub(totalReward) >= _amount, 'TOMI POOL: ADD_REWARD_EXCEED');\\n\\n        uint rewardAmount = ITomiConfig(CONFIG).getConfigValue(ConfigNames.FEE_LP_REWARD_PERCENT).mul(_amount).div(10000);\\n        _addReward(_pair, rewardAmount);\\n\\n        uint remainAmount = _amount.sub(rewardAmount);        \\n        uint fundingAmount = ITomiConfig(CONFIG).getConfigValue(ConfigNames.FEE_FUNDME_REWARD_PERCENT).mul(remainAmount).div(10000);\\n      \\n        if(fundingAmount > 0) {\\n            TransferHelper.safeTransfer(TOMI, FUNDING, fundingAmount);\\n        }\\n\\n        remainAmount = remainAmount.sub(fundingAmount);      \\n        uint lotteryAmount = ITomiConfig(CONFIG).getConfigValue(ConfigNames.FEE_LOTTERY_REWARD_PERCENT).mul(remainAmount).div(10000);\\n\\n        if(lotteryAmount > 0) {\\n            TransferHelper.safeTransfer(TOMI, LOTTERY, lotteryAmount);\\n        }  \\n\\n        remainAmount = remainAmount.sub(lotteryAmount);\\n        // uint governanceAmount = ITomiConfig(CONFIG).getConfigValue(ConfigNames.FEE_GOVERNANCE_REWARD_PERCENT).mul(remainAmount).div(10000);\\n        if(remainAmount > 0) {\\n            TransferHelper.safeTransfer(TOMI, STAKING, remainAmount);\\n            ITomiStaking(STAKING).updateRevenueShare(remainAmount);\\n            // ITomiGovernance(GOVERNANCE).addReward(remainAmount);\\n        }\\n\\n        emit AddReward(_pair, rewardAmount);\\n    }\\n    \\n    function addReward(address _pair, uint _amount) external {\\n        TransferHelper.safeTransferFrom(TOMI, msg.sender, address(this), _amount);\\n        \\n        require(ITomiFactory(FACTORY).isPair(_pair), \\\"TOMI POOL: INVALID PAIR\\\");\\n        _addReward(_pair, _amount);\\n        \\n        emit AddReward(_pair, _amount);\\n    }\\n    \\n    function preProductivityChanged(address _pair, address _user) external {\\n        require(msg.sender == PLATFORM, \\\"TOMI POOL: FORBIDDEN\\\");\\n        _auditUser(_pair, _user);\\n    }\\n    \\n    function postProductivityChanged(address _pair, address _user) external {\\n        require(msg.sender == PLATFORM, \\\"TOMI POOL: FORBIDDEN\\\");\\n        require(ITomiFactory(FACTORY).isPair(_pair), \\\"TOMI POOL: INVALID PAIR\\\");\\n        \\n        _updateDebt(_pair, _user);\\n    }\\n    \\n    function _addReward(address _pair, uint _amount) internal {\\n        pairReward[_pair] = pairReward[_pair].add(_amount);\\n        uint totalProdutivity = ITomiPair(_pair).totalSupply();\\n        if(totalProdutivity > 0) {\\n            pairAmountPerShare[_pair] = pairAmountPerShare[_pair].add(_amount.mul(1e12).div(totalProdutivity));\\n            totalReward = totalReward.add(_amount);\\n        }\\n    }\\n    \\n    function _auditUser(address _pair, address _user) internal {\\n        require(ITomiFactory(FACTORY).isPair(_pair), \\\"TOMI POOL: INVALID PAIR\\\");\\n    \\n        uint balance = ITomiPair(_pair).balanceOf(_user);\\n        uint accAmountPerShare = pairAmountPerShare[_pair];\\n        UserInfo storage userInfo = users[_user][_pair];\\n        uint pending = balance.mul(accAmountPerShare).div(1e12).sub(userInfo.rewardDebt);\\n        userInfo.rewardEarn = userInfo.rewardEarn.add(pending);\\n        userInfo.rewardDebt = balance.mul(accAmountPerShare).div(1e12);\\n    }\\n    \\n    function _updateDebt(address _pair, address _user) internal {\\n        uint balance = ITomiPair(_pair).balanceOf(_user);\\n        uint accAmountPerShare = pairAmountPerShare[_pair];\\n        users[_user][_pair].rewardDebt = balance.mul(accAmountPerShare).div(1e12);\\n    }\\n    \\n    function claimReward(address _pair, address _rewardToken) external {\\n        _auditUser(_pair, msg.sender);\\n        UserInfo storage userInfo = users[msg.sender][_pair];\\n        \\n        uint amount = userInfo.rewardEarn;\\n        pairReward[_pair] = pairReward[_pair].sub(amount);\\n        totalReward = totalReward.sub(amount);\\n        require(amount > 0, \\\"NOTHING TO MINT\\\");\\n        \\n        if(_rewardToken == TOMI) {\\n            TransferHelper.safeTransfer(TOMI, msg.sender, amount);\\n        } else if(_rewardToken == WETH) {\\n            require(ITomiFactory(FACTORY).isPair(_pair), \\\"TOMI POOL: INVALID PAIR\\\");\\n            IERC20(TOMI).approve(PLATFORM, amount);\\n            address[] memory path = new address[](2);\\n            path[0] = TOMI;\\n            path[1] = WETH; \\n            ITomiPlatform(PLATFORM).swapExactTokensForETH(amount, 0, path, msg.sender, block.timestamp + 1);\\n        } else {\\n            require(ITomiFactory(FACTORY).isPair(_pair), \\\"TOMI POOL: INVALID PAIR\\\");\\n            IERC20(TOMI).approve(PLATFORM, amount);\\n            address[] memory path = new address[](2);\\n            path[0] = TOMI;\\n            path[1] = _rewardToken;\\n            ITomiPlatform(PLATFORM).swapExactTokensForTokens(amount, 0, path, msg.sender, block.timestamp + 1);\\n        }\\n        \\n        userInfo.rewardEarn = 0;\\n        emit ClaimReward(msg.sender, _pair, _rewardToken, amount);\\n    }\\n    \\n    function queryReward(address _pair, address _user) external view returns(uint) {\\n        require(ITomiFactory(FACTORY).isPair(_pair), \\\"TOMI POOL: INVALID PAIR\\\");\\n        \\n        UserInfo memory userInfo = users[msg.sender][_pair];\\n        uint balance = ITomiPair(_pair).balanceOf(_user);\\n        return balance.mul(pairAmountPerShare[_pair]).div(1e12).add(userInfo.rewardEarn).sub(userInfo.rewardDebt);\\n    }\\n}\"\r\n    },\r\n    \"contracts/TomiGovernance.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\npragma solidity >=0.6.6;\\n\\nimport \\\"@openzeppelin/contracts/access/AccessControl.sol\\\";\\n\\nimport './interfaces/IERC20.sol';\\nimport './interfaces/ITomiStaking.sol';\\nimport './interfaces/ITomiConfig.sol';\\nimport './interfaces/ITomiBallotFactory.sol';\\nimport './interfaces/ITomiBallot.sol';\\nimport './interfaces/ITomiBallotRevenue.sol';\\nimport './interfaces/ITgas.sol';\\nimport './interfaces/ITokenRegistry.sol';\\nimport './libraries/ConfigNames.sol';\\nimport './libraries/TransferHelper.sol';\\nimport './modules/TgasStaking.sol';\\nimport './modules/Ownable.sol';\\nimport './libraries/SafeMath.sol';\\n\\ncontract TomiGovernance is TgasStaking, Ownable, AccessControl {\\n    using SafeMath for uint;\\n\\n    uint public version = 1;\\n    address public configAddr;\\n    address public ballotFactoryAddr;\\n    address public rewardAddr;\\n    address public stakingAddr;\\n\\n    uint public T_CONFIG = 1;\\n    uint public T_LIST_TOKEN = 2;\\n    uint public T_TOKEN = 3;\\n    uint public T_SNAPSHOT = 4;\\n    uint public T_REVENUE = 5;\\n\\n    uint public VOTE_DURATION;\\n    uint public FREEZE_DURATION;\\n    uint public REVENUE_VOTE_DURATION;\\n    uint public REVENUE_FREEZE_DURATION;\\n    uint public MINIMUM_TOMI_REQUIRED_IN_BALANCE = 100e18;\\n\\n    bytes32 public constant SUPER_ADMIN_ROLE = keccak256(abi.encodePacked(\\\"SUPER_ADMIN_ROLE\\\"));\\n    bytes32 REVENUE_PROPOSAL = bytes32('REVENUE_PROPOSAL');\\n    bytes32 SNAPSHOT_PROPOSAL = bytes32('SNAPSHOT_PROPOSAL');\\n\\n    mapping(address => uint) public ballotTypes;\\n    mapping(address => bytes32) public configBallots;\\n    mapping(address => address) public tokenBallots;\\n    mapping(address => uint) public rewardOf;\\n    mapping(address => uint) public ballotOf;\\n    mapping(address => mapping(address => uint)) public applyTokenOf;\\n    mapping(address => mapping(address => bool)) public collectUsers;\\n    mapping(address => address) public tokenUsers;\\n\\n    address[] public ballots;\\n    address[] public revenueBallots;\\n\\n    event ConfigAudited(bytes32 name, address indexed ballot, uint proposal);\\n    event ConfigBallotCreated(address indexed proposer, bytes32 name, uint value, address indexed ballotAddr, uint reward);\\n    event TokenBallotCreated(address indexed proposer, address indexed token, uint value, address indexed ballotAddr, uint reward);\\n    event ProposalerRewardRateUpdated(uint oldVaue, uint newValue);\\n    event RewardTransfered(address indexed from, address indexed to, uint value);\\n    event TokenListed(address user, address token, uint amount);\\n    event ListTokenAudited(address user, address token, uint status, uint burn, uint reward, uint refund);\\n    event TokenAudited(address user, address token, uint status, bool result);\\n    event RewardCollected(address indexed user, address indexed ballot, uint value);\\n    event RewardReceived(address indexed user, uint value);\\n\\n    modifier onlyRewarder() {\\n        require(msg.sender == rewardAddr, 'TomiGovernance: ONLY_REWARDER');\\n        _;\\n    }\\n\\n    modifier onlyRole(bytes32 role) {\\n        require(hasRole(role, msg.sender), \\\"TomiGovernance: sender not allowed to do!\\\");\\n        _;\\n    }\\n\\n    constructor (\\n        address _tgas, \\n        uint _VOTE_DURATION,\\n        uint _FREEZE_DURATION,\\n        uint _REVENUE_VOTE_DURATION,\\n        uint _REVENUE_FREEZE_DURATION\\n    ) TgasStaking(_tgas) public {\\n        _setupRole(SUPER_ADMIN_ROLE, msg.sender);\\n        _setupRole(DEFAULT_ADMIN_ROLE, msg.sender);\\n        _setRoleAdmin(DEFAULT_ADMIN_ROLE, SUPER_ADMIN_ROLE);\\n\\n        VOTE_DURATION = _VOTE_DURATION;\\n        FREEZE_DURATION = _FREEZE_DURATION;\\n        REVENUE_VOTE_DURATION = _REVENUE_VOTE_DURATION;\\n        REVENUE_FREEZE_DURATION = _REVENUE_FREEZE_DURATION;\\n    }\\n\\n    // called after deployment\\n    function initialize(address _rewardAddr, address _configContractAddr, address _ballotFactoryAddr, address _stakingAddr) external onlyOwner {\\n        require(_rewardAddr != address(0) && _configContractAddr != address(0) && _ballotFactoryAddr != address(0) && _stakingAddr != address(0), 'TomiGovernance: INPUT_ADDRESS_IS_ZERO');\\n\\n        stakingAddr = _stakingAddr;\\n        rewardAddr = _rewardAddr;\\n        configAddr = _configContractAddr;\\n        ballotFactoryAddr = _ballotFactoryAddr;\\n        lockTime = getConfigValue(ConfigNames.UNSTAKE_DURATION);\\n    }\\n\\n    function newStakingSettle(address _STAKING) external onlyRole(SUPER_ADMIN_ROLE) {\\n        require(stakingAddr != _STAKING, \\\"STAKING ADDRESS IS THE SAME\\\");\\n        require(_STAKING != address(0), \\\"STAKING ADDRESS IS DEFAULT ADDRESS\\\");\\n        stakingAddr = _STAKING;\\n    }\\n\\n    function changeProposalDuration(uint[4] calldata _durations) external onlyRole(SUPER_ADMIN_ROLE) {\\n        VOTE_DURATION = _durations[0];\\n        FREEZE_DURATION = _durations[1];\\n        REVENUE_VOTE_DURATION = _durations[2];\\n        REVENUE_FREEZE_DURATION = _durations[3];\\n    }\\n\\n    function changeTomiMinimumRequired(uint _newMinimum) external onlyRole(SUPER_ADMIN_ROLE) {\\n        require(_newMinimum != MINIMUM_TOMI_REQUIRED_IN_BALANCE, \\\"TomiGovernance::Tomi required is identical!\\\");\\n        MINIMUM_TOMI_REQUIRED_IN_BALANCE = _newMinimum;\\n    }\\n\\n    // function changeProposalVoteDuration(uint _newDuration) external onlyRole(SUPER_ADMIN_ROLE) {\\n    //     require(_newDuration != VOTE_DURATION, \\\"TomiGovernance::Vote duration has not changed\\\");\\n    //     VOTE_DURATION = _newDuration;\\n    // }\\n\\n    // function changeProposalFreezeDuration(uint _newDuration) external onlyRole(SUPER_ADMIN_ROLE) {\\n    //     require(_newDuration != FREEZE_DURATION, \\\"TomiGovernance::Freeze duration has not changed\\\");\\n    //     FREEZE_DURATION = _newDuration;\\n    // }\\n\\n    // function changeRevenueProposalVoteDuration(uint _newDuration) external onlyRole(SUPER_ADMIN_ROLE) {\\n    //     require(_newDuration != REVENUE_VOTE_DURATION, \\\"TomiGovernance::Vote duration has not changed\\\");\\n    //     REVENUE_VOTE_DURATION = _newDuration;\\n    // }\\n\\n    // function changeRevenueProposalFreezeDuration(uint _newDuration) external onlyRole(SUPER_ADMIN_ROLE) {\\n    //     require(_newDuration != REVENUE_FREEZE_DURATION, \\\"TomiGovernance::Freeze duration has not changed\\\");\\n    //     REVENUE_FREEZE_DURATION = _newDuration;\\n    // }\\n\\n    function vote(address _ballot, uint256 _proposal, uint256 _collateral) external {\\n        require(configBallots[_ballot] != REVENUE_PROPOSAL, \\\"TomiGovernance::Fail due to wrong ballot\\\");\\n        uint256 collateralRemain = balanceOf[msg.sender]; \\n\\n        if (_collateral > collateralRemain) {\\n            uint256 collateralMore = _collateral.sub(collateralRemain);\\n            _transferForBallot(collateralMore, true, ITomiBallot(_ballot).executionTime());\\n        }\\n\\n        ITomiBallot(_ballot).voteByGovernor(msg.sender, _proposal);\\n        balanceOf[msg.sender] = balanceOf[msg.sender].sub(_collateral);\\n\\n        _transferToStaking(_collateral);\\n        // rewardOf[rewardAddr] = rewardOf[rewardAddr].add(_collateral); \\n    }\\n\\n    function participate(address _ballot, uint256 _collateral) external {\\n        require(configBallots[_ballot] == REVENUE_PROPOSAL, \\\"TomiGovernance::Fail due to wrong ballot\\\");\\n        \\n        uint256 collateralRemain = balanceOf[msg.sender];\\n        uint256 collateralMore = _collateral.sub(collateralRemain);\\n\\n        _transferForBallot(collateralMore, true, ITomiBallot(_ballot).executionTime());\\n        ITomiBallotRevenue(_ballot).participateByGovernor(msg.sender);\\n    }\\n\\n    function audit(address _ballot) external returns (bool) {\\n        if(ballotTypes[_ballot] == T_CONFIG) {\\n            return auditConfig(_ballot);\\n        } else if (ballotTypes[_ballot] == T_LIST_TOKEN) {\\n            return auditListToken(_ballot);\\n        } else if (ballotTypes[_ballot] == T_TOKEN) {\\n            return auditToken(_ballot);\\n        } else {\\n            revert('TomiGovernance: UNKNOWN_TYPE');\\n        }\\n    }\\n\\n    function auditConfig(address _ballot) public returns (bool) {\\n        bool result = ITomiBallot(_ballot).end();\\n        require(result, 'TomiGovernance: NO_PASS');\\n        uint value = ITomiBallot(_ballot).value();\\n        bytes32 name = configBallots[_ballot];\\n        result = ITomiConfig(configAddr).changeConfigValue(name, value);\\n        if (name == ConfigNames.UNSTAKE_DURATION) {\\n            lockTime = value;\\n        } else if (name == ConfigNames.PRODUCE_TGAS_RATE) {\\n            _changeAmountPerBlock(value);\\n        }\\n        emit ConfigAudited(name, _ballot, value);\\n        return result;\\n    }\\n\\n    function auditListToken(address _ballot) public returns (bool) {\\n        bool result = ITomiBallot(_ballot).end();\\n        address token = tokenBallots[_ballot];\\n        address user = tokenUsers[token];\\n        require(ITokenRegistry(configAddr).tokenStatus(token) == ITokenRegistry(configAddr).REGISTERED(), 'TomiGovernance: AUDITED');\\n        uint status = result ? ITokenRegistry(configAddr).PENDING() : ITokenRegistry(configAddr).CLOSED();\\n\\t    uint amount = applyTokenOf[user][token];\\n        (uint burnAmount, uint rewardAmount, uint refundAmount) = (0, 0, 0);\\n        if (result) {\\n            burnAmount = amount * getConfigValue(ConfigNames.LIST_TOKEN_SUCCESS_BURN_PRECENT) / ITomiConfig(configAddr).PERCENT_DENOMINATOR();\\n            rewardAmount = amount - burnAmount;\\n            if (burnAmount > 0) {\\n                TransferHelper.safeTransfer(baseToken, address(0), burnAmount);\\n                totalSupply = totalSupply.sub(burnAmount);\\n            }\\n            if (rewardAmount > 0) {\\n                rewardOf[rewardAddr] = rewardOf[rewardAddr].add(rewardAmount);\\n                ballotOf[_ballot] = ballotOf[_ballot].add(rewardAmount);\\n                _rewardTransfer(rewardAddr, _ballot, rewardAmount);\\n            }\\n            ITokenRegistry(configAddr).publishToken(token);\\n        } else {\\n            burnAmount = amount * getConfigValue(ConfigNames.LIST_TOKEN_FAILURE_BURN_PRECENT) / ITomiConfig(configAddr).PERCENT_DENOMINATOR();\\n            refundAmount = amount - burnAmount;\\n            if (burnAmount > 0) TransferHelper.safeTransfer(baseToken, address(0), burnAmount);\\n            if (refundAmount > 0) TransferHelper.safeTransfer(baseToken, user, refundAmount);\\n            totalSupply = totalSupply.sub(amount);\\n            ITokenRegistry(configAddr).updateToken(token, status);\\n        }\\n\\t    emit ListTokenAudited(user, token, status, burnAmount, rewardAmount, refundAmount);\\n        return result;\\n    }\\n\\n    function auditToken(address _ballot) public returns (bool) {\\n        bool result = ITomiBallot(_ballot).end();\\n        uint status = ITomiBallot(_ballot).value();\\n        address token = tokenBallots[_ballot];\\n        address user = tokenUsers[token];\\n        require(ITokenRegistry(configAddr).tokenStatus(token) != status, 'TomiGovernance: TOKEN_STATUS_NO_CHANGE');\\n        if (result) {\\n            ITokenRegistry(configAddr).updateToken(token, status);\\n        } else {\\n            status = ITokenRegistry(configAddr).tokenStatus(token);\\n        }\\n\\t    emit TokenAudited(user, token, status, result);\\n        return result;\\n    }\\n\\n    function getConfigValue(bytes32 _name) public view returns (uint) {\\n        return ITomiConfig(configAddr).getConfigValue(_name);\\n    }\\n\\n    function _createProposalPrecondition(uint _amount, uint _executionTime) private {\\n        address sender = msg.sender;\\n        if (!hasRole(DEFAULT_ADMIN_ROLE, sender)) {\\n            require(IERC20(baseToken).balanceOf(sender).add(balanceOf[sender]) >= MINIMUM_TOMI_REQUIRED_IN_BALANCE, \\\"TomiGovernance::Require minimum TOMI in balance\\\");\\n            require(_amount >= getConfigValue(ConfigNames.PROPOSAL_TGAS_AMOUNT), \\\"TomiGovernance: NOT_ENOUGH_AMOUNT_TO_PROPOSAL\\\");\\n            \\n            uint256 collateralRemain = balanceOf[sender];\\n\\n            if (_amount > collateralRemain) {\\n                uint256 collateralMore = _amount.sub(collateralRemain);\\n                _transferForBallot(collateralMore, true, _executionTime);\\n            } \\n\\n            collateralRemain = balanceOf[sender];\\n            \\n            require(collateralRemain >= getConfigValue(ConfigNames.PROPOSAL_TGAS_AMOUNT), \\\"TomiGovernance: COLLATERAL_NOT_ENOUGH_AMOUNT_TO_PROPOSAL\\\");\\n            balanceOf[sender] = collateralRemain.sub(_amount);\\n\\n            _transferToStaking(_amount);\\n        }\\n    }\\n\\n    function createRevenueBallot(\\n        string calldata _subject, \\n        string calldata _content\\n    ) external onlyRole(DEFAULT_ADMIN_ROLE) returns (address) {\\n        uint endTime = block.timestamp.add(REVENUE_VOTE_DURATION);\\n        uint executionTime = endTime.add(REVENUE_FREEZE_DURATION);\\n\\n        address ballotAddr = ITomiBallotFactory(ballotFactoryAddr).createShareRevenue(msg.sender, endTime, executionTime, _subject, _content);\\n        configBallots[ballotAddr] = REVENUE_PROPOSAL;\\n        uint reward = _createdBallot(ballotAddr, T_REVENUE);\\n        emit ConfigBallotCreated(msg.sender, REVENUE_PROPOSAL, 0, ballotAddr, reward);\\n        return ballotAddr;\\n    }\\n\\n    function createSnapshotBallot(\\n        uint _amount, \\n        string calldata _subject, \\n        string calldata _content\\n    ) external returns (address) {\\n        uint endTime = block.timestamp.add(VOTE_DURATION);\\n        uint executionTime = endTime.add(FREEZE_DURATION);\\n\\n        _createProposalPrecondition(_amount, executionTime);\\n\\n        address ballotAddr = ITomiBallotFactory(ballotFactoryAddr).create(msg.sender, 0, endTime, executionTime, _subject, _content);\\n        \\n        configBallots[ballotAddr] = SNAPSHOT_PROPOSAL;\\n        // rewardOf[rewardAddr] = rewardOf[rewardAddr].add(_amount);\\n\\n        uint reward = _createdBallot(ballotAddr, T_SNAPSHOT);\\n        emit ConfigBallotCreated(msg.sender, SNAPSHOT_PROPOSAL, 0, ballotAddr, reward);\\n        return ballotAddr;\\n    }\\n\\n    function createConfigBallot(bytes32 _name, uint _value, uint _amount, string calldata _subject, string calldata _content) external returns (address) {\\n        require(_value >= 0, 'TomiGovernance: INVALID_PARAMTERS');\\n        { // avoids stack too deep errors\\n        (uint minValue, uint maxValue, uint maxSpan, uint value, uint enable) = ITomiConfig(configAddr).getConfig(_name);\\n        require(enable == 1, \\\"TomiGovernance: CONFIG_DISABLE\\\");\\n        require(_value >= minValue && _value <= maxValue, \\\"TomiGovernance: OUTSIDE\\\");\\n        uint span = _value >= value? (_value - value) : (value - _value);\\n        require(maxSpan >= span, \\\"TomiGovernance: OVERSTEP\\\");\\n        }\\n\\n        uint endTime = block.timestamp.add(VOTE_DURATION);\\n        uint executionTime = endTime.add(FREEZE_DURATION);\\n\\n        _createProposalPrecondition(_amount, executionTime);\\n        \\n        address ballotAddr = ITomiBallotFactory(ballotFactoryAddr).create(msg.sender, _value, endTime, executionTime, _subject, _content);\\n        \\n        configBallots[ballotAddr] = _name;\\n        // rewardOf[rewardAddr] = rewardOf[rewardAddr].add(_amount);\\n\\n        uint reward = _createdBallot(ballotAddr, T_CONFIG);\\n        emit ConfigBallotCreated(msg.sender, _name, _value, ballotAddr, reward);\\n        return ballotAddr;\\n    }\\n\\n    function createTokenBallot(address _token, uint _value, uint _amount, string calldata _subject, string calldata _content) external returns (address) {\\n        require(!_isDefaultToken(_token), 'TomiGovernance: DEFAULT_LIST_TOKENS_PROPOSAL_DENY');\\n        uint status = ITokenRegistry(configAddr).tokenStatus(_token);\\n        require(status == ITokenRegistry(configAddr).PENDING(), 'TomiGovernance: ONLY_ALLOW_PENDING');\\n        require(_value == ITokenRegistry(configAddr).OPENED() || _value == ITokenRegistry(configAddr).CLOSED(), 'TomiGovernance: INVALID_STATUS');\\n        require(status != _value, 'TomiGovernance: STATUS_NO_CHANGE');\\n\\n        uint endTime = block.timestamp.add(VOTE_DURATION);\\n        uint executionTime = endTime.add(FREEZE_DURATION);\\n\\n        _createProposalPrecondition(_amount, executionTime);\\n\\n        address ballotAddr = _createTokenBallot(T_TOKEN, _token, _value, _subject, _content, endTime, executionTime);\\n        // rewardOf[rewardAddr] = rewardOf[rewardAddr].add(_amount);\\n        return ballotAddr;\\n    }\\n\\n\\tfunction listToken(address _token, uint _amount, string calldata _subject, string calldata _content) external returns (address) {\\n        uint status = ITokenRegistry(configAddr).tokenStatus(_token);\\n        require(status == ITokenRegistry(configAddr).NONE() || status == ITokenRegistry(configAddr).CLOSED(), 'TomiGovernance: LISTED');\\n\\t    // require(_amount >= getConfigValue(ConfigNames.LIST_TGAS_AMOUNT), \\\"TomiGovernance: NOT_ENOUGH_AMOUNT_TO_LIST\\\");\\n\\t    tokenUsers[_token] = msg.sender;\\n\\n        uint endTime = block.timestamp.add(VOTE_DURATION);\\n        uint executionTime = endTime.add(FREEZE_DURATION);\\n\\n        if (!hasRole(DEFAULT_ADMIN_ROLE, msg.sender)) {\\n            require(_amount >= getConfigValue(ConfigNames.PROPOSAL_TGAS_AMOUNT), \\\"TomiGovernance: NOT_ENOUGH_AMOUNT_TO_PROPOSAL\\\");\\n            \\n            uint256 collateralRemain = balanceOf[msg.sender]; \\n            uint256 collateralMore = _amount.sub(collateralRemain);\\n            \\n            applyTokenOf[msg.sender][_token] = _transferForBallot(collateralMore, true, executionTime);\\n            collateralRemain = balanceOf[msg.sender];\\n\\n            require(collateralRemain >= getConfigValue(ConfigNames.PROPOSAL_TGAS_AMOUNT), \\\"TomiGovernance: COLLATERAL_NOT_ENOUGH_AMOUNT_TO_PROPOSAL\\\");\\n            balanceOf[msg.sender] = collateralRemain.sub(_amount);\\n\\n            _transferToStaking(_amount);\\n        }\\n\\n\\t    ITokenRegistry(configAddr).registryToken(_token);\\n        address ballotAddr = _createTokenBallot(T_LIST_TOKEN, _token, ITokenRegistry(configAddr).PENDING(), _subject, _content, endTime, executionTime);\\n        // rewardOf[rewardAddr] = rewardOf[rewardAddr].add(_amount);\\n        emit TokenListed(msg.sender, _token, _amount);\\n        return ballotAddr;\\n\\t}\\n\\n    function _createTokenBallot(uint _type, address _token, uint _value, string memory _subject, string memory _content, uint _endTime, uint _executionTime) private returns (address) {\\n        address ballotAddr = ITomiBallotFactory(ballotFactoryAddr).create(msg.sender, _value, _endTime, _executionTime, _subject, _content);\\n        \\n        uint reward = _createdBallot(ballotAddr, _type);\\n        ballotOf[ballotAddr] = reward;\\n        tokenBallots[ballotAddr] = _token;\\n        emit TokenBallotCreated(msg.sender, _token, _value, ballotAddr, reward);\\n        return ballotAddr;\\n    }\\n\\n    function collectReward(address _ballot) external returns (uint) {\\n        require(block.timestamp >= ITomiBallot(_ballot).endTime(), \\\"TomiGovernance: NOT_YET_ENDED\\\");\\n        require(!collectUsers[_ballot][msg.sender], 'TomiGovernance: REWARD_COLLECTED');\\n        require(configBallots[_ballot] == REVENUE_PROPOSAL, \\\"TomiGovernance::Fail due to wrong ballot\\\");\\n        \\n        uint amount = getRewardForRevenueProposal(_ballot);\\n        _rewardTransfer(_ballot, msg.sender, amount);\\n        balanceOf[msg.sender] = balanceOf[msg.sender].add(amount);\\n        stakingSupply = stakingSupply.add(amount);\\n        rewardOf[msg.sender] = rewardOf[msg.sender].sub(amount);\\n        collectUsers[_ballot][msg.sender] = true;\\n       \\n        emit RewardCollected(msg.sender, _ballot, amount);\\n    }\\n\\n    // function getReward(address _ballot) public view returns (uint) {\\n    //     if (block.timestamp < ITomiBallot(_ballot).endTime() || collectUsers[_ballot][msg.sender]) {\\n    //         return 0;\\n    //     }\\n    //     uint amount;\\n    //     uint shares = ballotOf[_ballot];\\n\\n    //     bool result = ITomiBallot(_ballot).result();\\n\\n    //     if (result) {\\n    //         uint extra;\\n    //         uint rewardRate = getConfigValue(ConfigNames.VOTE_REWARD_PERCENT);\\n    //         if ( rewardRate > 0) {\\n    //            extra = shares * rewardRate / ITomiConfig(configAddr).PERCENT_DENOMINATOR();\\n    //            shares -= extra;\\n    //         }\\n    //         if (msg.sender == ITomiBallot(_ballot).proposer()) {\\n    //             amount = extra;\\n    //         }\\n    //     }\\n\\n    //     if (ITomiBallot(_ballot).total() > 0) {  \\n    //         uint reward = shares * ITomiBallot(_ballot).weight(msg.sender) / ITomiBallot(_ballot).total();\\n    //         amount += ITomiBallot(_ballot).proposer() == msg.sender ? 0: reward;\\n    //     }\\n    //     return amount;\\n    // }\\n\\n    function getRewardForRevenueProposal(address _ballot) public view returns (uint) {\\n        if (block.timestamp < ITomiBallotRevenue(_ballot).endTime() || collectUsers[_ballot][msg.sender]) {\\n            return 0;\\n        }\\n        \\n        uint amount = 0;\\n        uint shares = ballotOf[_ballot];\\n\\n        if (ITomiBallotRevenue(_ballot).total() > 0) {  \\n            uint reward = shares * ITomiBallotRevenue(_ballot).weight(msg.sender) / ITomiBallotRevenue(_ballot).total();\\n            amount += ITomiBallotRevenue(_ballot).proposer() == msg.sender ? 0 : reward; \\n        }\\n        return amount;\\n    }\\n\\n    // TOMI TEST ONLY\\n    // function addReward(uint _value) external onlyRewarder returns (bool) {\\n    function addReward(uint _value) external returns (bool) {\\n        require(_value > 0, 'TomiGovernance: ADD_REWARD_VALUE_IS_ZERO');\\n        uint total = IERC20(baseToken).balanceOf(address(this));\\n        uint diff = total.sub(totalSupply);\\n        require(_value <= diff, 'TomiGovernance: ADD_REWARD_EXCEED');\\n        rewardOf[rewardAddr] = rewardOf[rewardAddr].add(_value);\\n        totalSupply = total;\\n        emit RewardReceived(rewardAddr, _value);\\n    }\\n\\n    function _rewardTransfer(address _from, address _to, uint _value) private returns (bool) {\\n        require(_value >= 0 && rewardOf[_from] >= _value, 'TomiGovernance: INSUFFICIENT_BALANCE');\\n        rewardOf[_from] = rewardOf[_from].sub(_value);\\n        rewardOf[_to] = rewardOf[_to].add(_value);\\n        emit RewardTransfered(_from, _to, _value);\\n    }\\n\\n    function _isDefaultToken(address _token) internal returns (bool) {\\n        address[] memory tokens = ITomiConfig(configAddr).getDefaultListTokens();\\n        for(uint i = 0 ; i < tokens.length; i++){\\n            if (tokens[i] == _token) {\\n                return true;\\n            }\\n        }\\n        return false;\\n    }\\n\\n    function _transferForBallot(uint _amount, bool _wallet, uint _endTime) internal returns (uint) {\\n        if (_wallet && _amount > 0) {\\n            _add(msg.sender, _amount, _endTime);\\n            TransferHelper.safeTransferFrom(baseToken, msg.sender, address(this), _amount);\\n            totalSupply += _amount;\\n        } \\n\\n        if (_amount == 0) allowance[msg.sender] = estimateLocktime(msg.sender, _endTime);\\n\\n        return _amount;\\n    }\\n\\n    function _transferToStaking(uint _amount) internal {\\n        if (stakingAddr != address(0)) {\\n            TransferHelper.safeTransfer(baseToken, stakingAddr, _amount);\\n            ITomiStaking(stakingAddr).updateRevenueShare(_amount);\\n        }\\n    }\\n\\n    function _createdBallot(address _ballot, uint _type) internal returns (uint) {\\n        uint reward = 0;\\n        \\n        if (_type == T_REVENUE) {\\n            reward = rewardOf[rewardAddr];\\n            ballotOf[_ballot] = reward;\\n            _rewardTransfer(rewardAddr, _ballot, reward);\\n        }\\n\\n        _type == T_REVENUE ? revenueBallots.push(_ballot): ballots.push(_ballot);\\n        ballotTypes[_ballot] = _type;\\n        return reward;\\n    }\\n\\n    function ballotCount() external view returns (uint) {\\n        return ballots.length;\\n    }\\n\\n    function ballotRevenueCount() external view returns (uint) {\\n        return revenueBallots.length;\\n    }\\n\\n    function _changeAmountPerBlock(uint _value) internal returns (bool) {\\n        return ITgas(baseToken).changeInterestRatePerBlock(_value);\\n    }\\n\\n    function updateTgasGovernor(address _new) external onlyOwner {\\n        ITgas(baseToken).upgradeGovernance(_new);\\n    }\\n\\n    function upgradeApproveReward() external returns (uint) {\\n        require(rewardOf[rewardAddr] > 0, 'TomiGovernance: UPGRADE_NO_REWARD');\\n        require(ITomiConfig(configAddr).governor() != address(this), 'TomiGovernance: UPGRADE_NO_CHANGE');\\n        TransferHelper.safeApprove(baseToken, ITomiConfig(configAddr).governor(), rewardOf[rewardAddr]);\\n        return rewardOf[rewardAddr]; \\n    }\\n\\n    function receiveReward(address _from, uint _value) external returns (bool) {\\n        require(_value > 0, 'TomiGovernance: RECEIVE_REWARD_VALUE_IS_ZERO');\\n        TransferHelper.safeTransferFrom(baseToken, _from, address(this), _value);\\n        rewardOf[rewardAddr] += _value;\\n        totalSupply += _value;\\n        emit RewardReceived(_from, _value);\\n        return true;\\n    }\\n\\n}\"\r\n    },\r\n    \"@openzeppelin/contracts/access/AccessControl.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity >=0.6.0 <0.8.0;\\n\\nimport \\\"../utils/EnumerableSet.sol\\\";\\nimport \\\"../utils/Address.sol\\\";\\nimport \\\"../GSN/Context.sol\\\";\\n\\n/**\\n * @dev Contract module that allows children to implement role-based access\\n * control mechanisms.\\n *\\n * Roles are referred to by their `bytes32` identifier. These should be exposed\\n * in the external API and be unique. The best way to achieve this is by\\n * using `public constant` hash digests:\\n *\\n * ```\\n * bytes32 public constant MY_ROLE = keccak256(\\\"MY_ROLE\\\");\\n * ```\\n *\\n * Roles can be used to represent a set of permissions. To restrict access to a\\n * function call, use {hasRole}:\\n *\\n * ```\\n * function foo() public {\\n *     require(hasRole(MY_ROLE, msg.sender));\\n *     ...\\n * }\\n * ```\\n *\\n * Roles can be granted and revoked dynamically via the {grantRole} and\\n * {revokeRole} functions. Each role has an associated admin role, and only\\n * accounts that have a role's admin role can call {grantRole} and {revokeRole}.\\n *\\n * By default, the admin role for all roles is `DEFAULT_ADMIN_ROLE`, which means\\n * that only accounts with this role will be able to grant or revoke other\\n * roles. More complex role relationships can be created by using\\n * {_setRoleAdmin}.\\n *\\n * WARNING: The `DEFAULT_ADMIN_ROLE` is also its own admin: it has permission to\\n * grant and revoke this role. Extra precautions should be taken to secure\\n * accounts that have been granted it.\\n */\\nabstract contract AccessControl is Context {\\n    using EnumerableSet for EnumerableSet.AddressSet;\\n    using Address for address;\\n\\n    struct RoleData {\\n        EnumerableSet.AddressSet members;\\n        bytes32 adminRole;\\n    }\\n\\n    mapping (bytes32 => RoleData) private _roles;\\n\\n    bytes32 public constant DEFAULT_ADMIN_ROLE = 0x00;\\n\\n    /**\\n     * @dev Emitted when `newAdminRole` is set as ``role``'s admin role, replacing `previousAdminRole`\\n     *\\n     * `DEFAULT_ADMIN_ROLE` is the starting admin for all roles, despite\\n     * {RoleAdminChanged} not being emitted signaling this.\\n     *\\n     * _Available since v3.1._\\n     */\\n    event RoleAdminChanged(bytes32 indexed role, bytes32 indexed previousAdminRole, bytes32 indexed newAdminRole);\\n\\n    /**\\n     * @dev Emitted when `account` is granted `role`.\\n     *\\n     * `sender` is the account that originated the contract call, an admin role\\n     * bearer except when using {_setupRole}.\\n     */\\n    event RoleGranted(bytes32 indexed role, address indexed account, address indexed sender);\\n\\n    /**\\n     * @dev Emitted when `account` is revoked `role`.\\n     *\\n     * `sender` is the account that originated the contract call:\\n     *   - if using `revokeRole`, it is the admin role bearer\\n     *   - if using `renounceRole`, it is the role bearer (i.e. `account`)\\n     */\\n    event RoleRevoked(bytes32 indexed role, address indexed account, address indexed sender);\\n\\n    /**\\n     * @dev Returns `true` if `account` has been granted `role`.\\n     */\\n    function hasRole(bytes32 role, address account) public view returns (bool) {\\n        return _roles[role].members.contains(account);\\n    }\\n\\n    /**\\n     * @dev Returns the number of accounts that have `role`. Can be used\\n     * together with {getRoleMember} to enumerate all bearers of a role.\\n     */\\n    function getRoleMemberCount(bytes32 role) public view returns (uint256) {\\n        return _roles[role].members.length();\\n    }\\n\\n    /**\\n     * @dev Returns one of the accounts that have `role`. `index` must be a\\n     * value between 0 and {getRoleMemberCount}, non-inclusive.\\n     *\\n     * Role bearers are not sorted in any particular way, and their ordering may\\n     * change at any point.\\n     *\\n     * WARNING: When using {getRoleMember} and {getRoleMemberCount}, make sure\\n     * you perform all queries on the same block. See the following\\n     * https://forum.openzeppelin.com/t/iterating-over-elements-on-enumerableset-in-openzeppelin-contracts/2296[forum post]\\n     * for more information.\\n     */\\n    function getRoleMember(bytes32 role, uint256 index) public view returns (address) {\\n        return _roles[role].members.at(index);\\n    }\\n\\n    /**\\n     * @dev Returns the admin role that controls `role`. See {grantRole} and\\n     * {revokeRole}.\\n     *\\n     * To change a role's admin, use {_setRoleAdmin}.\\n     */\\n    function getRoleAdmin(bytes32 role) public view returns (bytes32) {\\n        return _roles[role].adminRole;\\n    }\\n\\n    /**\\n     * @dev Grants `role` to `account`.\\n     *\\n     * If `account` had not been already granted `role`, emits a {RoleGranted}\\n     * event.\\n     *\\n     * Requirements:\\n     *\\n     * - the caller must have ``role``'s admin role.\\n     */\\n    function grantRole(bytes32 role, address account) public virtual {\\n        require(hasRole(_roles[role].adminRole, _msgSender()), \\\"AccessControl: sender must be an admin to grant\\\");\\n\\n        _grantRole(role, account);\\n    }\\n\\n    /**\\n     * @dev Revokes `role` from `account`.\\n     *\\n     * If `account` had been granted `role`, emits a {RoleRevoked} event.\\n     *\\n     * Requirements:\\n     *\\n     * - the caller must have ``role``'s admin role.\\n     */\\n    function revokeRole(bytes32 role, address account) public virtual {\\n        require(hasRole(_roles[role].adminRole, _msgSender()), \\\"AccessControl: sender must be an admin to revoke\\\");\\n\\n        _revokeRole(role, account);\\n    }\\n\\n    /**\\n     * @dev Revokes `role` from the calling account.\\n     *\\n     * Roles are often managed via {grantRole} and {revokeRole}: this function's\\n     * purpose is to provide a mechanism for accounts to lose their privileges\\n     * if they are compromised (such as when a trusted device is misplaced).\\n     *\\n     * If the calling account had been granted `role`, emits a {RoleRevoked}\\n     * event.\\n     *\\n     * Requirements:\\n     *\\n     * - the caller must be `account`.\\n     */\\n    function renounceRole(bytes32 role, address account) public virtual {\\n        require(account == _msgSender(), \\\"AccessControl: can only renounce roles for self\\\");\\n\\n        _revokeRole(role, account);\\n    }\\n\\n    /**\\n     * @dev Grants `role` to `account`.\\n     *\\n     * If `account` had not been already granted `role`, emits a {RoleGranted}\\n     * event. Note that unlike {grantRole}, this function doesn't perform any\\n     * checks on the calling account.\\n     *\\n     * [WARNING]\\n     * ====\\n     * This function should only be called from the constructor when setting\\n     * up the initial roles for the system.\\n     *\\n     * Using this function in any other way is effectively circumventing the admin\\n     * system imposed by {AccessControl}.\\n     * ====\\n     */\\n    function _setupRole(bytes32 role, address account) internal virtual {\\n        _grantRole(role, account);\\n    }\\n\\n    /**\\n     * @dev Sets `adminRole` as ``role``'s admin role.\\n     *\\n     * Emits a {RoleAdminChanged} event.\\n     */\\n    function _setRoleAdmin(bytes32 role, bytes32 adminRole) internal virtual {\\n        emit RoleAdminChanged(role, _roles[role].adminRole, adminRole);\\n        _roles[role].adminRole = adminRole;\\n    }\\n\\n    function _grantRole(bytes32 role, address account) private {\\n        if (_roles[role].members.add(account)) {\\n            emit RoleGranted(role, account, _msgSender());\\n        }\\n    }\\n\\n    function _revokeRole(bytes32 role, address account) private {\\n        if (_roles[role].members.remove(account)) {\\n            emit RoleRevoked(role, account, _msgSender());\\n        }\\n    }\\n}\\n\"\r\n    },\r\n    \"contracts/interfaces/ITomiBallotFactory.sol\": {\r\n      \"content\": \"pragma solidity >=0.5.0;\\n\\ninterface ITomiBallotFactory {\\n    function create(\\n        address _proposer,\\n        uint _value,\\n        uint _endTime,\\n        uint _executionTime,\\n        string calldata _subject,\\n        string calldata _content\\n    ) external returns (address);\\n\\n     function createShareRevenue(\\n        address _proposer,\\n        uint _endTime,\\n        uint _executionTime,\\n        string calldata _subject,\\n        string calldata _content\\n    ) external returns (address);\\n}\"\r\n    },\r\n    \"contracts/interfaces/ITomiBallot.sol\": {\r\n      \"content\": \"pragma solidity >=0.5.0;\\n\\ninterface ITomiBallot {\\n    function proposer() external view returns(address);\\n    function endTime() external view returns(uint);\\n    function executionTime() external view returns(uint);\\n    function value() external view returns(uint);\\n    function result() external view returns(bool);\\n    function end() external returns (bool);\\n    function total() external view returns(uint);\\n    function weight(address user) external view returns (uint);\\n    function voteByGovernor(address user, uint256 proposal) external;\\n}\"\r\n    },\r\n    \"contracts/interfaces/ITomiBallotRevenue.sol\": {\r\n      \"content\": \"pragma solidity >=0.5.0;\\n\\ninterface ITomiBallotRevenue {\\n    function proposer() external view returns(address);\\n    function endTime() external view returns(uint);\\n    function executionTime() external view returns(uint);\\n    function end() external returns (bool);\\n    function total() external view returns(uint);\\n    function weight(address user) external view returns (uint);\\n    function participateByGovernor(address user) external;\\n}\"\r\n    },\r\n    \"contracts/modules/TgasStaking.sol\": {\r\n      \"content\": \"pragma solidity >=0.5.16;\\n\\nimport '../libraries/TransferHelper.sol';\\nimport '../libraries/SafeMath.sol';\\nimport '../interfaces/IERC20.sol';\\nimport '../interfaces/ITomiConfig.sol';\\nimport '../modules/BaseToken.sol';\\n\\n\\ncontract TgasStaking is BaseToken {\\n    using SafeMath for uint;\\n\\n    uint public lockTime;\\n    uint public totalSupply;\\n    uint public stakingSupply;\\n    mapping(address => uint) public balanceOf;\\n    mapping(address => uint) public allowance;\\n\\n    constructor (address _baseToken) public {\\n        initBaseToken(_baseToken);\\n    }\\n\\n    function estimateLocktime(address user, uint _endTime) internal view returns(uint) {\\n        uint collateralLocktime = allowance[user];\\n\\n        if (_endTime == 0) {\\n            uint depositLockTime = block.timestamp + lockTime;\\n            return depositLockTime > collateralLocktime ? depositLockTime: collateralLocktime;\\n        }\\n\\n        return _endTime > collateralLocktime ? _endTime: collateralLocktime; \\n    }\\n\\n    function _add(address user, uint value, uint endTime) internal {\\n        require(value > 0, 'ZERO');\\n        balanceOf[user] = balanceOf[user].add(value);\\n        stakingSupply = stakingSupply.add(value);\\n        allowance[user] = estimateLocktime(user, endTime);\\n    }\\n\\n    function _reduce(address user, uint value) internal {\\n        require(balanceOf[user] >= value && value > 0, 'TgasStaking: INSUFFICIENT_BALANCE');\\n        balanceOf[user] = balanceOf[user].sub(value);\\n        stakingSupply = stakingSupply.sub(value);\\n    }\\n\\n    function deposit(uint _amount) external returns (bool) {\\n        TransferHelper.safeTransferFrom(baseToken, msg.sender, address(this), _amount);\\n        _add(msg.sender, _amount, 0);\\n        totalSupply = IERC20(baseToken).balanceOf(address(this));\\n        return true;\\n    }\\n\\n    // function onBehalfDeposit(address _user, uint _amount) external returns (bool) {\\n    //     TransferHelper.safeTransferFrom(baseToken, msg.sender, address(this), _amount);\\n    //     _add(_user, _amount);\\n    //     totalSupply = IERC20(baseToken).balanceOf(address(this));\\n    //     return true;\\n    // }\\n\\n    function withdraw(uint _amount) external returns (bool) {\\n        require(block.timestamp > allowance[msg.sender], 'TgasStaking: NOT_DUE');\\n        TransferHelper.safeTransfer(baseToken, msg.sender, _amount);\\n        _reduce(msg.sender, _amount);\\n        totalSupply = IERC20(baseToken).balanceOf(address(this));\\n        return true;\\n    }\\n\\n}\"\r\n    },\r\n    \"@openzeppelin/contracts/utils/EnumerableSet.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity >=0.6.0 <0.8.0;\\n\\n/**\\n * @dev Library for managing\\n * https://en.wikipedia.org/wiki/Set_(abstract_data_type)[sets] of primitive\\n * types.\\n *\\n * Sets have the following properties:\\n *\\n * - Elements are added, removed, and checked for existence in constant time\\n * (O(1)).\\n * - Elements are enumerated in O(n). No guarantees are made on the ordering.\\n *\\n * ```\\n * contract Example {\\n *     // Add the library methods\\n *     using EnumerableSet for EnumerableSet.AddressSet;\\n *\\n *     // Declare a set state variable\\n *     EnumerableSet.AddressSet private mySet;\\n * }\\n * ```\\n *\\n * As of v3.3.0, sets of type `bytes32` (`Bytes32Set`), `address` (`AddressSet`)\\n * and `uint256` (`UintSet`) are supported.\\n */\\nlibrary EnumerableSet {\\n    // To implement this library for multiple types with as little code\\n    // repetition as possible, we write it in terms of a generic Set type with\\n    // bytes32 values.\\n    // The Set implementation uses private functions, and user-facing\\n    // implementations (such as AddressSet) are just wrappers around the\\n    // underlying Set.\\n    // This means that we can only create new EnumerableSets for types that fit\\n    // in bytes32.\\n\\n    struct Set {\\n        // Storage of set values\\n        bytes32[] _values;\\n\\n        // Position of the value in the `values` array, plus 1 because index 0\\n        // means a value is not in the set.\\n        mapping (bytes32 => uint256) _indexes;\\n    }\\n\\n    /**\\n     * @dev Add a value to a set. O(1).\\n     *\\n     * Returns true if the value was added to the set, that is if it was not\\n     * already present.\\n     */\\n    function _add(Set storage set, bytes32 value) private returns (bool) {\\n        if (!_contains(set, value)) {\\n            set._values.push(value);\\n            // The value is stored at length-1, but we add 1 to all indexes\\n            // and use 0 as a sentinel value\\n            set._indexes[value] = set._values.length;\\n            return true;\\n        } else {\\n            return false;\\n        }\\n    }\\n\\n    /**\\n     * @dev Removes a value from a set. O(1).\\n     *\\n     * Returns true if the value was removed from the set, that is if it was\\n     * present.\\n     */\\n    function _remove(Set storage set, bytes32 value) private returns (bool) {\\n        // We read and store the value's index to prevent multiple reads from the same storage slot\\n        uint256 valueIndex = set._indexes[value];\\n\\n        if (valueIndex != 0) { // Equivalent to contains(set, value)\\n            // To delete an element from the _values array in O(1), we swap the element to delete with the last one in\\n            // the array, and then remove the last element (sometimes called as 'swap and pop').\\n            // This modifies the order of the array, as noted in {at}.\\n\\n            uint256 toDeleteIndex = valueIndex - 1;\\n            uint256 lastIndex = set._values.length - 1;\\n\\n            // When the value to delete is the last one, the swap operation is unnecessary. However, since this occurs\\n            // so rarely, we still do the swap anyway to avoid the gas cost of adding an 'if' statement.\\n\\n            bytes32 lastvalue = set._values[lastIndex];\\n\\n            // Move the last value to the index where the value to delete is\\n            set._values[toDeleteIndex] = lastvalue;\\n            // Update the index for the moved value\\n            set._indexes[lastvalue] = toDeleteIndex + 1; // All indexes are 1-based\\n\\n            // Delete the slot where the moved value was stored\\n            set._values.pop();\\n\\n            // Delete the index for the deleted slot\\n            delete set._indexes[value];\\n\\n            return true;\\n        } else {\\n            return false;\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns true if the value is in the set. O(1).\\n     */\\n    function _contains(Set storage set, bytes32 value) private view returns (bool) {\\n        return set._indexes[value] != 0;\\n    }\\n\\n    /**\\n     * @dev Returns the number of values on the set. O(1).\\n     */\\n    function _length(Set storage set) private view returns (uint256) {\\n        return set._values.length;\\n    }\\n\\n   /**\\n    * @dev Returns the value stored at position `index` in the set. O(1).\\n    *\\n    * Note that there are no guarantees on the ordering of values inside the\\n    * array, and it may change when more values are added or removed.\\n    *\\n    * Requirements:\\n    *\\n    * - `index` must be strictly less than {length}.\\n    */\\n    function _at(Set storage set, uint256 index) private view returns (bytes32) {\\n        require(set._values.length > index, \\\"EnumerableSet: index out of bounds\\\");\\n        return set._values[index];\\n    }\\n\\n    // Bytes32Set\\n\\n    struct Bytes32Set {\\n        Set _inner;\\n    }\\n\\n    /**\\n     * @dev Add a value to a set. O(1).\\n     *\\n     * Returns true if the value was added to the set, that is if it was not\\n     * already present.\\n     */\\n    function add(Bytes32Set storage set, bytes32 value) internal returns (bool) {\\n        return _add(set._inner, value);\\n    }\\n\\n    /**\\n     * @dev Removes a value from a set. O(1).\\n     *\\n     * Returns true if the value was removed from the set, that is if it was\\n     * present.\\n     */\\n    function remove(Bytes32Set storage set, bytes32 value) internal returns (bool) {\\n        return _remove(set._inner, value);\\n    }\\n\\n    /**\\n     * @dev Returns true if the value is in the set. O(1).\\n     */\\n    function contains(Bytes32Set storage set, bytes32 value) internal view returns (bool) {\\n        return _contains(set._inner, value);\\n    }\\n\\n    /**\\n     * @dev Returns the number of values in the set. O(1).\\n     */\\n    function length(Bytes32Set storage set) internal view returns (uint256) {\\n        return _length(set._inner);\\n    }\\n\\n   /**\\n    * @dev Returns the value stored at position `index` in the set. O(1).\\n    *\\n    * Note that there are no guarantees on the ordering of values inside the\\n    * array, and it may change when more values are added or removed.\\n    *\\n    * Requirements:\\n    *\\n    * - `index` must be strictly less than {length}.\\n    */\\n    function at(Bytes32Set storage set, uint256 index) internal view returns (bytes32) {\\n        return _at(set._inner, index);\\n    }\\n\\n    // AddressSet\\n\\n    struct AddressSet {\\n        Set _inner;\\n    }\\n\\n    /**\\n     * @dev Add a value to a set. O(1).\\n     *\\n     * Returns true if the value was added to the set, that is if it was not\\n     * already present.\\n     */\\n    function add(AddressSet storage set, address value) internal returns (bool) {\\n        return _add(set._inner, bytes32(uint256(value)));\\n    }\\n\\n    /**\\n     * @dev Removes a value from a set. O(1).\\n     *\\n     * Returns true if the value was removed from the set, that is if it was\\n     * present.\\n     */\\n    function remove(AddressSet storage set, address value) internal returns (bool) {\\n        return _remove(set._inner, bytes32(uint256(value)));\\n    }\\n\\n    /**\\n     * @dev Returns true if the value is in the set. O(1).\\n     */\\n    function contains(AddressSet storage set, address value) internal view returns (bool) {\\n        return _contains(set._inner, bytes32(uint256(value)));\\n    }\\n\\n    /**\\n     * @dev Returns the number of values in the set. O(1).\\n     */\\n    function length(AddressSet storage set) internal view returns (uint256) {\\n        return _length(set._inner);\\n    }\\n\\n   /**\\n    * @dev Returns the value stored at position `index` in the set. O(1).\\n    *\\n    * Note that there are no guarantees on the ordering of values inside the\\n    * array, and it may change when more values are added or removed.\\n    *\\n    * Requirements:\\n    *\\n    * - `index` must be strictly less than {length}.\\n    */\\n    function at(AddressSet storage set, uint256 index) internal view returns (address) {\\n        return address(uint256(_at(set._inner, index)));\\n    }\\n\\n\\n    // UintSet\\n\\n    struct UintSet {\\n        Set _inner;\\n    }\\n\\n    /**\\n     * @dev Add a value to a set. O(1).\\n     *\\n     * Returns true if the value was added to the set, that is if it was not\\n     * already present.\\n     */\\n    function add(UintSet storage set, uint256 value) internal returns (bool) {\\n        return _add(set._inner, bytes32(value));\\n    }\\n\\n    /**\\n     * @dev Removes a value from a set. O(1).\\n     *\\n     * Returns true if the value was removed from the set, that is if it was\\n     * present.\\n     */\\n    function remove(UintSet storage set, uint256 value) internal returns (bool) {\\n        return _remove(set._inner, bytes32(value));\\n    }\\n\\n    /**\\n     * @dev Returns true if the value is in the set. O(1).\\n     */\\n    function contains(UintSet storage set, uint256 value) internal view returns (bool) {\\n        return _contains(set._inner, bytes32(value));\\n    }\\n\\n    /**\\n     * @dev Returns the number of values on the set. O(1).\\n     */\\n    function length(UintSet storage set) internal view returns (uint256) {\\n        return _length(set._inner);\\n    }\\n\\n   /**\\n    * @dev Returns the value stored at position `index` in the set. O(1).\\n    *\\n    * Note that there are no guarantees on the ordering of values inside the\\n    * array, and it may change when more values are added or removed.\\n    *\\n    * Requirements:\\n    *\\n    * - `index` must be strictly less than {length}.\\n    */\\n    function at(UintSet storage set, uint256 index) internal view returns (uint256) {\\n        return uint256(_at(set._inner, index));\\n    }\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/utils/Address.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity >=0.6.2 <0.8.0;\\n\\n/**\\n * @dev Collection of functions related to the address type\\n */\\nlibrary Address {\\n    /**\\n     * @dev Returns true if `account` is a contract.\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * It is unsafe to assume that an address for which this function returns\\n     * false is an externally-owned account (EOA) and not a contract.\\n     *\\n     * Among others, `isContract` will return false for the following\\n     * types of addresses:\\n     *\\n     *  - an externally-owned account\\n     *  - a contract in construction\\n     *  - an address where a contract will be created\\n     *  - an address where a contract lived, but was destroyed\\n     * ====\\n     */\\n    function isContract(address account) internal view returns (bool) {\\n        // This method relies on extcodesize, which returns 0 for contracts in\\n        // construction, since the code is only stored at the end of the\\n        // constructor execution.\\n\\n        uint256 size;\\n        // solhint-disable-next-line no-inline-assembly\\n        assembly { size := extcodesize(account) }\\n        return size > 0;\\n    }\\n\\n    /**\\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\\n     * `recipient`, forwarding all available gas and reverting on errors.\\n     *\\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\\n     * imposed by `transfer`, making them unable to receive funds via\\n     * `transfer`. {sendValue} removes this limitation.\\n     *\\n     * https://diligence.consensys.net/posts/2019/09/stop-using-soliditys-transfer-now/[Learn more].\\n     *\\n     * IMPORTANT: because control is transferred to `recipient`, care must be\\n     * taken to not create reentrancy vulnerabilities. Consider using\\n     * {ReentrancyGuard} or the\\n     * https://solidity.readthedocs.io/en/v0.5.11/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\\n     */\\n    function sendValue(address payable recipient, uint256 amount) internal {\\n        require(address(this).balance >= amount, \\\"Address: insufficient balance\\\");\\n\\n        // solhint-disable-next-line avoid-low-level-calls, avoid-call-value\\n        (bool success, ) = recipient.call{ value: amount }(\\\"\\\");\\n        require(success, \\\"Address: unable to send value, recipient may have reverted\\\");\\n    }\\n\\n    /**\\n     * @dev Performs a Solidity function call using a low level `call`. A\\n     * plain`call` is an unsafe replacement for a function call: use this\\n     * function instead.\\n     *\\n     * If `target` reverts with a revert reason, it is bubbled up by this\\n     * function (like regular Solidity function calls).\\n     *\\n     * Returns the raw returned data. To convert to the expected return value,\\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\\n     *\\n     * Requirements:\\n     *\\n     * - `target` must be a contract.\\n     * - calling `target` with `data` must not revert.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\\n      return functionCall(target, data, \\\"Address: low-level call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\\n     * `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(address target, bytes memory data, string memory errorMessage) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, 0, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but also transferring `value` wei to `target`.\\n     *\\n     * Requirements:\\n     *\\n     * - the calling contract must have an ETH balance of at least `value`.\\n     * - the called Solidity function must be `payable`.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(address target, bytes memory data, uint256 value) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, value, \\\"Address: low-level call with value failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\\n     * with `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(address target, bytes memory data, uint256 value, string memory errorMessage) internal returns (bytes memory) {\\n        require(address(this).balance >= value, \\\"Address: insufficient balance for call\\\");\\n        require(isContract(target), \\\"Address: call to non-contract\\\");\\n\\n        // solhint-disable-next-line avoid-low-level-calls\\n        (bool success, bytes memory returndata) = target.call{ value: value }(data);\\n        return _verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\\n        return functionStaticCall(target, data, \\\"Address: low-level static call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(address target, bytes memory data, string memory errorMessage) internal view returns (bytes memory) {\\n        require(isContract(target), \\\"Address: static call to non-contract\\\");\\n\\n        // solhint-disable-next-line avoid-low-level-calls\\n        (bool success, bytes memory returndata) = target.staticcall(data);\\n        return _verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    function _verifyCallResult(bool success, bytes memory returndata, string memory errorMessage) private pure returns(bytes memory) {\\n        if (success) {\\n            return returndata;\\n        } else {\\n            // Look for revert reason and bubble it up if present\\n            if (returndata.length > 0) {\\n                // The easiest way to bubble the revert reason is using memory via assembly\\n\\n                // solhint-disable-next-line no-inline-assembly\\n                assembly {\\n                    let returndata_size := mload(returndata)\\n                    revert(add(32, returndata), returndata_size)\\n                }\\n            } else {\\n                revert(errorMessage);\\n            }\\n        }\\n    }\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/GSN/Context.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity >=0.6.0 <0.8.0;\\n\\n/*\\n * @dev Provides information about the current execution context, including the\\n * sender of the transaction and its data. While these are generally available\\n * via msg.sender and msg.data, they should not be accessed in such a direct\\n * manner, since when dealing with GSN meta-transactions the account sending and\\n * paying for execution may not be the actual sender (as far as an application\\n * is concerned).\\n *\\n * This contract is only required for intermediate, library-like contracts.\\n */\\nabstract contract Context {\\n    function _msgSender() internal view virtual returns (address payable) {\\n        return msg.sender;\\n    }\\n\\n    function _msgData() internal view virtual returns (bytes memory) {\\n        this; // silence state mutability warning without generating bytecode - see https://github.com/ethereum/solidity/issues/2691\\n        return msg.data;\\n    }\\n}\\n\"\r\n    },\r\n    \"contracts/modules/BaseToken.sol\": {\r\n      \"content\": \"\\npragma solidity >=0.5.16;\\n\\ncontract BaseToken {\\n    address public baseToken;\\n\\n    // called after deployment\\n    function initBaseToken(address _baseToken) internal {\\n        require(baseToken == address(0), 'INITIALIZED');\\n        require(_baseToken != address(0), 'ADDRESS_IS_ZERO');\\n        baseToken = _baseToken;  // it should be tgas token address\\n    }\\n}\"\r\n    },\r\n    \"contracts/TomiFunding.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\npragma solidity >=0.6.6;\\n\\nimport \\\"./libraries/TransferHelper.sol\\\";\\nimport \\\"./modules/Ownable.sol\\\";\\nimport \\\"./interfaces/IERC20.sol\\\";\\n\\ncontract TomiFunding is Ownable {\\n    address public tomi;\\n\\n    mapping(address => bool) included;\\n    \\n    event ClaimableGranted(address _userAddress);\\n    event ClaimableRevoked(address _userAddress);\\n    event Claimed(address _userAddress, uint256 _amount);\\n    event FundingTokenSettled(address tokenAddress);\\n    \\n    constructor(address _tomi) public {\\n        tomi = _tomi;\\n    }\\n    \\n    modifier inClaimable(address _userAddress) {\\n        require(included[_userAddress], \\\"TomiFunding::User not in claimable list!\\\");\\n        _;\\n    }\\n\\n    modifier notInClaimable(address _userAddress) {\\n        require(!included[_userAddress], \\\"TomiFunding::User already in claimable list!\\\");\\n        _;\\n    }\\n    \\n    function setTomi(address _tomi) public onlyOwner {\\n        tomi = _tomi;\\n        emit FundingTokenSettled(_tomi);\\n    }\\n    \\n    function grantClaimable(address _userAddress) public onlyOwner notInClaimable(_userAddress) {\\n        require(_userAddress != address(0), \\\"TomiFunding::User address is not legit!\\\");\\n        \\n        included[_userAddress] = true;\\n        emit ClaimableGranted(_userAddress);\\n    }\\n    \\n    function revokeClaimable(address _userAddress) public onlyOwner inClaimable(_userAddress) {\\n        require(_userAddress != address(0), \\\"TomiFunding::User address is not legit!\\\");\\n        \\n        included[_userAddress] = false;\\n        emit ClaimableRevoked(_userAddress);\\n    }\\n    \\n    function claim(uint256 _amount) public inClaimable(msg.sender) {\\n        uint256 remainBalance = IERC20(tomi).balanceOf(address(this));\\n        require(remainBalance >= _amount, \\\"TomiFunding::Remain balance is not enough to claim!\\\");\\n        \\n        TransferHelper.safeTransfer(address(tomi), msg.sender, _amount); \\n        emit Claimed(msg.sender, _amount);\\n    }\\n}\"\r\n    },\r\n    \"contracts/TomiConfig.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\npragma solidity >=0.6.6;\\n\\nimport './libraries/ConfigNames.sol';\\nimport './libraries/TransferHelper.sol';\\nimport './modules/TokenRegistry.sol';\\nimport './modules/Ownable.sol';\\n\\ncontract TomiConfig is TokenRegistry, Ownable {\\n    uint public version = 1;\\n    event ConfigValueChanged(bytes32 _name, uint _old, uint _value);\\n\\n    struct Config {\\n        uint minValue;\\n        uint maxValue;\\n        uint maxSpan;\\n        uint value;\\n        uint enable;  // 0:disable, 1: enable\\n    }\\n\\n    mapping(bytes32 => Config) public configs;\\n    address public tgas;                                // TGAS contract address\\n    address public platform;      \\n    address public dev;                         \\n    uint public constant PERCENT_DENOMINATOR = 10000;\\n    uint public constant TGAS_DECIMAL = 10 ** 18;\\n    address[] public defaultListTokens;\\n\\n    modifier onlyPlatform() {\\n        require(msg.sender == platform, 'TomiConfig: ONLY_PLATFORM');\\n        _;\\n    }\\n\\n    constructor()  public {\\n        _initConfig(ConfigNames.PRODUCE_TGAS_RATE, 1 * TGAS_DECIMAL, 120 * TGAS_DECIMAL, 10 * TGAS_DECIMAL, 40 * TGAS_DECIMAL);\\n        _initConfig(ConfigNames.SWAP_FEE_PERCENT, 5,30,5,30);\\n        _initConfig(ConfigNames.LIST_TGAS_AMOUNT, 0, 100000 * TGAS_DECIMAL, 1000 * TGAS_DECIMAL, 0);\\n        _initConfig(ConfigNames.UNSTAKE_DURATION, 17280, 17280*7, 17280, 17280);\\n        // _initConfig(ConfigNames.EXECUTION_DURATION, 0, 18000, 1200, 300);\\n        _initConfig(ConfigNames.REMOVE_LIQUIDITY_DURATION, 0, 17280*7, 17280, 0);\\n        _initConfig(ConfigNames.TOKEN_TO_TGAS_PAIR_MIN_PERCENT, 20, 500, 10, 100);\\n        _initConfig(ConfigNames.LIST_TOKEN_FAILURE_BURN_PRECENT, 100, 5000, 500, 1000);\\n        _initConfig(ConfigNames.LIST_TOKEN_SUCCESS_BURN_PRECENT, 1000, 5000, 500, 5000);\\n        _initConfig(ConfigNames.PROPOSAL_TGAS_AMOUNT, 100 * TGAS_DECIMAL, 10000 * TGAS_DECIMAL, 100 * TGAS_DECIMAL, 100 * TGAS_DECIMAL);\\n        // _initConfig(ConfigNames.VOTE_DURATION, 17280, 17280*7, 17280, 17280);\\n        _initConfig(ConfigNames.VOTE_REWARD_PERCENT, 0, 1000, 100, 500);\\n        _initConfig(ConfigNames.TOKEN_PENGDING_SWITCH, 0, 1, 1, 1);  // 0:off, 1:on\\n        _initConfig(ConfigNames.TOKEN_PENGDING_TIME, 0, 100*17280, 10*17280, 100*17280);\\n        _initConfig(ConfigNames.LIST_TOKEN_SWITCH, 0, 1, 1, 0);  // 0:off, 1:on\\n        _initConfig(ConfigNames.DEV_PRECENT, 1000, 1000, 1000, 1000);\\n\\n        _initConfig(ConfigNames.DEV_PRECENT, 1000, 1000, 1000, 1000);\\n\\n        _initConfig(ConfigNames.FEE_FUNDME_REWARD_PERCENT, 833, 833, 833, 833);  \\n        _initConfig(ConfigNames.FEE_LOTTERY_REWARD_PERCENT, 833, 833, 833, 833);\\n        _initConfig(ConfigNames.FEE_STAKING_REWARD_PERCENT, 833, 833, 833, 833);\\n    }\\n\\n    function _initConfig(bytes32 _name, uint _minValue, uint _maxValue, uint _maxSpan, uint _value) internal {\\n        Config storage config = configs[_name];\\n        config.minValue = _minValue;\\n        config.maxValue = _maxValue;\\n        config.maxSpan = _maxSpan;\\n        config.value = _value;\\n        config.enable = 1;\\n    }\\n\\n    function initialize(\\n        address _tgas,\\n        address _governor,\\n        address _platform,\\n        address _dev,\\n        address[] memory _listTokens) public onlyOwner {\\n        require(_tgas != address(0), \\\"TomiConfig: ZERO ADDRESS\\\");\\n        tgas = _tgas;\\n        platform = _platform;\\n        dev = _dev;\\n        for(uint i = 0 ; i < _listTokens.length; i++){\\n            _updateToken(_listTokens[i], OPENED);\\n            defaultListTokens.push(_listTokens[i]);\\n        }\\n        initGovernorAddress(_governor);\\n    }\\n\\n    function modifyGovernor(address _new) public onlyOwner {\\n        _changeGovernor(_new);\\n    }\\n\\n    function modifyDev(address _new) public {\\n        require(msg.sender == dev, 'TomiConfig: FORBIDDEN');\\n        dev = _new;\\n    }\\n\\n    function changeConfig(bytes32 _name, uint _minValue, uint _maxValue, uint _maxSpan, uint _value) external onlyOwner returns (bool) {\\n        _initConfig(_name, _minValue, _maxValue, _maxSpan, _value);\\n        return true;\\n    }\\n\\n    function getConfig(bytes32 _name) external view returns (uint minValue, uint maxValue, uint maxSpan, uint value, uint enable) {\\n        Config memory config = configs[_name];\\n        minValue = config.minValue;\\n        maxValue = config.maxValue;\\n        maxSpan = config.maxSpan;\\n        value = config.value;\\n        enable = config.enable;\\n    }\\n    \\n    function getConfigValue(bytes32 _name) public view returns (uint) {\\n        return configs[_name].value;\\n    }\\n\\n    function changeConfigValue(bytes32 _name, uint _value) external onlyGovernor returns (bool) {\\n        Config storage config = configs[_name];\\n        require(config.enable == 1, \\\"TomiConfig: DISABLE\\\");\\n        require(_value <= config.maxValue && _value >= config.minValue, \\\"TomiConfig: OVERFLOW\\\");\\n        uint old = config.value;\\n        uint span = _value >= old ? (_value - old) : (old - _value);\\n        require(span <= config.maxSpan, \\\"TomiConfig: EXCEED MAX ADJUST SPAN\\\");\\n        config.value = _value;\\n        emit ConfigValueChanged(_name, old, _value);\\n        return true;\\n    }\\n\\n    function checkToken(address _token) public view returns(bool) {\\n        if (getConfigValue(ConfigNames.LIST_TOKEN_SWITCH) == 0) {\\n            return true;\\n        }\\n        if (tokenStatus[_token] == OPENED) {\\n            return true;\\n        } else if (tokenStatus[_token] == PENDING ) {\\n            if (getConfigValue(ConfigNames.TOKEN_PENGDING_SWITCH) == 1 && block.number > publishTime[_token] + getConfigValue(ConfigNames.TOKEN_PENGDING_TIME)) {\\n                return false;\\n            } else {\\n                return true;\\n            }\\n        }\\n        return false;\\n    }\\n\\n    function checkPair(address tokenA, address tokenB) external view returns (bool) {\\n        if (checkToken(tokenA) && checkToken(tokenB)) {\\n            return true;\\n        }\\n        return false;\\n    }\\n\\n    function getDefaultListTokens() external view returns (address[] memory) {\\n        address[] memory res = new address[](defaultListTokens.length);\\n        for (uint i; i < defaultListTokens.length; i++) {\\n            res[i] = defaultListTokens[i];\\n        }\\n        return res;\\n    }\\n\\n    function addToken(address _token) external onlyPlatform returns (bool) {\\n        if(getConfigValue(ConfigNames.LIST_TOKEN_SWITCH) == 0) {\\n            if(tokenStatus[_token] != OPENED) {\\n                _updateToken(_token, OPENED);\\n            }\\n        }\\n        return true;\\n    }\\n\\n}\"\r\n    },\r\n    \"contracts/modules/TokenRegistry.sol\": {\r\n      \"content\": \"pragma solidity >=0.5.16;\\n\\nimport './Governable.sol';\\n\\n/**\\n    Business Process\\n    step 1. publishToken\\n    step 2. addToken or removeToken\\n */\\n\\ncontract TokenRegistry is Governable {\\n    mapping (address => uint) public tokenStatus;\\n    mapping (address => uint) public publishTime;\\n    uint public tokenCount;\\n    address[] public tokenList;\\n    uint public constant NONE = 0;\\n    uint public constant REGISTERED = 1;\\n    uint public constant PENDING = 2;\\n    uint public constant OPENED = 3;\\n    uint public constant CLOSED = 4;\\n\\n    event TokenStatusChanged(address indexed _token, uint _status, uint _block);\\n\\n    function registryToken(address _token) external onlyGovernor returns (bool) {\\n        return _updateToken(_token, REGISTERED);\\n    }\\n\\n    function publishToken(address _token) external onlyGovernor returns (bool) {\\n        publishTime[_token] = block.number;\\n        return _updateToken(_token, PENDING);\\n    }\\n\\n    function updateToken(address _token, uint _status) external onlyGovernor returns (bool) {\\n        return _updateToken(_token, _status);\\n    }\\n\\n    function validTokens() external view returns (address[] memory) {\\n        uint count;\\n        for (uint i; i < tokenList.length; i++) {\\n            if (tokenStatus[tokenList[i]] == PENDING || tokenStatus[tokenList[i]] == OPENED) {\\n                count++;\\n            }\\n        }\\n        address[] memory res = new address[](count);\\n        uint index = 0;\\n        for (uint i; i < tokenList.length; i++) {\\n            if (tokenStatus[tokenList[i]] == PENDING || tokenStatus[tokenList[i]] == OPENED) {\\n                res[index] = tokenList[i];\\n                index++;\\n            }\\n        }\\n        return res;\\n    }\\n\\n    function iterateValidTokens(uint _start, uint _end) external view returns (address[] memory) {\\n        require(_end <= tokenList.length, \\\"TokenRegistry: OVERFLOW\\\");\\n        require(_start <= _end && _start >= 0 && _end >= 0, \\\"TokenRegistry: INVAID_PARAMTERS\\\");\\n        uint count;\\n        for (uint i = _start; i < _end; i++) {\\n            if (tokenStatus[tokenList[i]] == PENDING || tokenStatus[tokenList[i]] == OPENED) {\\n                count++;\\n            }\\n        }\\n        address[] memory res = new address[](count);\\n        uint index = 0;\\n        for (uint i = _start; i < _end; i++) {\\n            if (tokenStatus[tokenList[i]] == PENDING || tokenStatus[tokenList[i]] == OPENED) {\\n                res[index] = tokenList[i];\\n                index++;\\n            }\\n        }\\n        return res;\\n    }\\n\\n    function _updateToken(address _token, uint _status) internal returns (bool) {\\n        require(_token != address(0), 'TokenRegistry: INVALID_TOKEN');\\n        require(tokenStatus[_token] != _status, 'TokenRegistry: TOKEN_STATUS_NO_CHANGE');\\n        if (tokenStatus[_token] == NONE) {\\n            tokenCount++;\\n            require(tokenCount <= uint(-1), 'TokenRegistry: OVERFLOW');\\n            tokenList.push(_token);\\n        }\\n        tokenStatus[_token] = _status;\\n        emit TokenStatusChanged(_token, _status, block.number);\\n        return true;\\n    }\\n\\n}\"\r\n    },\r\n    \"contracts/modules/Governable.sol\": {\r\n      \"content\": \"pragma solidity >=0.5.16;\\n\\ncontract Governable {\\n    address public governor;\\n\\n    event ChangeGovernor(address indexed _old, address indexed _new);\\n\\n    modifier onlyGovernor() {\\n        require(msg.sender == governor, 'Governable: FORBIDDEN');\\n        _;\\n    }\\n\\n    // called after deployment\\n    function initGovernorAddress(address _governor) internal {\\n        require(_governor != address(0), 'Governable: INPUT_ADDRESS_IS_ZERO');\\n        governor = _governor;\\n    }\\n\\n    function changeGovernor(address _new) public onlyGovernor {\\n        _changeGovernor(_new);\\n    }\\n\\n    function _changeGovernor(address _new) internal {\\n        require(_new != address(0), 'Governable: INVALID_ADDRESS');\\n        require(_new != governor, 'Governable: NO_CHANGE');\\n        address old = governor;\\n        governor = _new;\\n        emit ChangeGovernor(old, _new);\\n    }\\n\\n}\"\r\n    },\r\n    \"contracts/TomiPair.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\npragma solidity >=0.6.6;\\n\\nimport './libraries/Math.sol';\\nimport './libraries/UQ112x112.sol';\\nimport './interfaces/ITomiFactory.sol';\\nimport './interfaces/ITgas.sol';\\nimport './interfaces/IERC20.sol';\\nimport './interfaces/ITomiCallee.sol';\\nimport './interfaces/ITomiConfig.sol';\\nimport './modules/BaseShareField.sol';\\nimport './libraries/ConfigNames.sol';\\n\\ncontract TomiPair is BaseShareField {\\n    uint256 public version = 1;\\n    using SafeMath for uint256;\\n    using UQ112x112 for uint224;\\n\\n    uint256 public constant MINIMUM_LIQUIDITY = 10**3;\\n    bytes4 private constant SELECTOR = bytes4(keccak256(bytes('transfer(address,uint256)')));\\n\\n    address public FACTORY;\\n    address public CONFIG;\\n    address public TOMI;\\n    address public token0;\\n    address public token1;\\n\\n    uint112 private reserve0; // uses single storage slot, accessible via getReserves\\n    uint112 private reserve1; // uses single storage slot, accessible via getReserves\\n    uint32 private blockTimestampLast; // uses single storage slot, accessible via getReserves\\n\\n    uint256 public price0CumulativeLast;\\n    uint256 public price1CumulativeLast;\\n\\n    uint256 public totalReward;\\n    uint256 public remainReward;\\n    uint256 public totalSupply;\\n    mapping(address => uint256) public balanceOf;\\n    event Mint(address indexed from, address indexed to, uint256 value);\\n    event Burn(address indexed from, address indexed to, uint256 value);\\n    event ClaimTOMI(address indexed player, uint256 pairMint, uint256 userMint);\\n    mapping(address => uint256) public lastMintBlock;\\n\\n    uint private unlocked = 1;\\n    modifier lock() {\\n        require(unlocked == 1, 'Locked');\\n        unlocked = 0;\\n        _;\\n        unlocked = 1;\\n    }\\n\\n    function _mint(address to, uint256 value) internal {\\n        totalSupply = totalSupply.add(value);\\n        balanceOf[to] = balanceOf[to].add(value);\\n        emit Mint(address(0), to, value);\\n    }\\n\\n    function _burn(address from, uint256 value) internal {\\n        balanceOf[from] = balanceOf[from].sub(value);\\n        totalSupply = totalSupply.sub(value);\\n        emit Burn(from, address(0), value);\\n    }\\n    \\n    // function _mintTGAS() internal {\\n    //     if(ITgas(TGAS).take() > 0) {\\n    //         uint reward = ITgas(TGAS).mint();\\n    //         uint devAmount = reward * ITomiConfig(CONFIG).getConfigValue(ConfigNames.DEV_PRECENT) / 10000;\\n    //         address devAddress = ITomiConfig(CONFIG).dev();\\n    //         _safeTransfer(TGAS, devAddress, devAmount);\\n    //         remainReward = remainReward.add(reward.sub(devAmount));\\n    //     }\\n    // }\\n    \\n    // function _currentReward() internal override view returns (uint) {\\n    //     uint devPercent = ITomiConfig(CONFIG).getConfigValue(ConfigNames.DEV_PRECENT);\\n    //     uint pairReward = IERC20(TOMI).take().mul(10000 - devPercent).div(10000);\\n    //     return mintedShare.add(remainReward).add(pairReward).sub(totalShare);\\n    // }\\n\\n    function getReserves()\\n        public\\n        view\\n        returns (\\n            uint112 _reserve0,\\n            uint112 _reserve1,\\n            uint32 _blockTimestampLast\\n        )\\n    {\\n        _reserve0 = reserve0;\\n        _reserve1 = reserve1;\\n        _blockTimestampLast = blockTimestampLast;\\n    }\\n\\n    function _safeTransfer(\\n        address token,\\n        address to,\\n        uint256 value\\n    ) private {\\n        (bool success, bytes memory data) = token.call(abi.encodeWithSelector(SELECTOR, to, value));\\n        require(success && (data.length == 0 || abi.decode(data, (bool))), 'TOMI PAIR : TRANSFER_FAILED');\\n    }\\n\\n    event Mint(address indexed sender, uint256 amount0, uint256 amount1);\\n    event Burn(address indexed sender, uint256 amount0, uint256 amount1, address indexed to);\\n    event Swap(\\n        address indexed sender,\\n        uint256 amount0In,\\n        uint256 amount1In,\\n        uint256 amount0Out,\\n        uint256 amount1Out,\\n        address indexed to\\n    );\\n    event SwapFee(address indexed token, address indexed to, uint256 amount);\\n    event Sync(uint112 reserve0, uint112 reserve1);\\n\\n    constructor() public {\\n        FACTORY = msg.sender;\\n    }\\n\\n    modifier onlyPlatform {\\n        address platform = ITomiConfig(CONFIG).platform();\\n        require(msg.sender == platform, 'TOMI PAIR : FORBIDDEN');\\n        _;\\n    }\\n\\n    // called once by the factory at time of deployment\\n    function initialize(\\n        address _token0,\\n        address _token1,\\n        address _config,\\n        address _tomi\\n    ) external {\\n        require(msg.sender == FACTORY, 'TOMI PAIR : FORBIDDEN');\\n        token0 = _token0;\\n        token1 = _token1;\\n        CONFIG = _config;\\n        TOMI = _tomi;\\n        _setShareToken(TOMI);\\n    }\\n\\n    // update reserves and, on the first call per block, price accumulators\\n    function _update(\\n        uint256 balance0,\\n        uint256 balance1,\\n        uint112 _reserve0,\\n        uint112 _reserve1\\n    ) private {\\n        require(balance0 <= uint112(-1) && balance1 <= uint112(-1), 'TOMI PAIR : OVERFLOW');\\n        uint32 blockTimestamp = uint32(block.timestamp % 2**32);\\n        uint32 timeElapsed = blockTimestamp - blockTimestampLast; // overflow is desired\\n        if (timeElapsed > 0 && _reserve0 != 0 && _reserve1 != 0) {\\n            // * never overflows, and + overflow is desired\\n            price0CumulativeLast += uint256(UQ112x112.encode(_reserve1).uqdiv(_reserve0)) * timeElapsed;\\n            price1CumulativeLast += uint256(UQ112x112.encode(_reserve0).uqdiv(_reserve1)) * timeElapsed;\\n        }\\n        reserve0 = uint112(balance0);\\n        reserve1 = uint112(balance1);\\n        blockTimestampLast = blockTimestamp;\\n        emit Sync(reserve0, reserve1);\\n    }\\n\\n    // this low-level function should be called from a contract which performs // important safety checks\\n    function mint(address to) external onlyPlatform lock returns (uint256 liquidity) {\\n        (uint112 _reserve0, uint112 _reserve1, ) = getReserves(); // gas savings\\n        uint256 balance0 = _balanceOf(token0, address(this));\\n        uint256 balance1 = _balanceOf(token1, address(this));\\n        uint256 amount0 = balance0.sub(_reserve0);\\n        uint256 amount1 = balance1.sub(_reserve1);\\n        uint256 _totalSupply = totalSupply; // gas savings, must be defined here since totalSupply can update in _mintFee\\n        if (_totalSupply == 0) {\\n            liquidity = Math.sqrt(amount0.mul(amount1)).sub(MINIMUM_LIQUIDITY);\\n            _mint(address(0), MINIMUM_LIQUIDITY); // permanently lock the first MINIMUM_LIQUIDITY tokens\\n        } else {\\n            liquidity = Math.min(amount0.mul(_totalSupply) / _reserve0, amount1.mul(_totalSupply) / _reserve1);\\n        }\\n        require(liquidity > 0, 'TOMI PAIR : INSUFFICIENT_LIQUIDITY_MINTED');\\n        _mint(to, liquidity);\\n        // _mintTGAS();\\n        // _increaseProductivity(to, liquidity);\\n        lastMintBlock[to] = block.number;\\n        _update(balance0, balance1, _reserve0, _reserve1);\\n        emit Mint(msg.sender, amount0, amount1);\\n    }\\n\\n    // this low-level function should be called from a contract which performs // important safety checks\\n    function burn(\\n        address from,\\n        address to,\\n        uint256 amount\\n    ) external onlyPlatform lock returns (uint256 amount0, uint256 amount1) {\\n        require(\\n            block.number >=\\n                lastMintBlock[from] + ITomiConfig(CONFIG).getConfigValue(ConfigNames.REMOVE_LIQUIDITY_DURATION),\\n            'TOMI PLATFORM : REMOVE LIQUIDITY DURATION FAIL'\\n        );\\n        (uint112 _reserve0, uint112 _reserve1, ) = getReserves(); // gas savings\\n        address _token0 = token0; // gas savings\\n        address _token1 = token1; // gas savings\\n        uint256 balance0 = _balanceOf(_token0, address(this));\\n        uint256 balance1 = _balanceOf(_token1, address(this));\\n        require(balanceOf[from] >= amount, 'TOMI PAIR : INSUFFICIENT_LIQUIDITY_AMOUNT');\\n\\n        uint256 _totalSupply = totalSupply; // gas savings, must be defined here since totalSupply can update in _mintFee\\n        amount0 = amount.mul(balance0) / _totalSupply; // using balances ensures pro-rata distribution\\n        amount1 = amount.mul(balance1) / _totalSupply; // using balances ensures pro-rata distribution\\n        require(amount0 > 0 && amount1 > 0, 'TOMI PAIR : INSUFFICIENT_LIQUIDITY_BURNED');\\n        _burn(from, amount);\\n        // _mintTGAS();\\n        // _decreaseProductivity(from, amount);\\n\\n        _safeTransfer(_token0, to, amount0);\\n        _safeTransfer(_token1, to, amount1);\\n        balance0 = _balanceOf(_token0, address(this));\\n        balance1 = _balanceOf(_token1, address(this));\\n        _update(balance0, balance1, _reserve0, _reserve1);\\n\\n        emit Burn(msg.sender, amount0, amount1, to);\\n    }\\n\\n    // this low-level function should be called from a contract which performs // important safety checks\\n    function swap(\\n        uint256 amount0Out,\\n        uint256 amount1Out,\\n        address to,\\n        bytes calldata data\\n    ) external onlyPlatform lock {\\n        require(amount0Out > 0 || amount1Out > 0, 'TOMI PAIR : INSUFFICIENT_OUTPUT_AMOUNT');\\n        (uint112 _reserve0, uint112 _reserve1, ) = getReserves(); // gas savings\\n        require(amount0Out < _reserve0 && amount1Out < _reserve1, 'TOMI PAIR :  INSUFFICIENT_LIQUIDITY');\\n        uint256 balance0;\\n        uint256 balance1;\\n        {\\n            address _token0 = token0;\\n            address _token1 = token1;\\n            require(to != _token0 && to != _token1, 'TOMI PAIR : INVALID_TO');\\n            if (amount0Out > 0) _safeTransfer(_token0, to, amount0Out);\\n            if (amount1Out > 0) _safeTransfer(_token1, to, amount1Out);\\n            if (data.length > 0) ITomiCallee(to).tomiCall(msg.sender, amount0Out, amount1Out, data);\\n            balance0 = _balanceOf(_token0, address(this));\\n            balance1 = _balanceOf(_token1, address(this));\\n        }\\n        uint256 amount0In = balance0 > _reserve0 - amount0Out ? balance0 - (_reserve0 - amount0Out) : 0;\\n        uint256 amount1In = balance1 > _reserve1 - amount1Out ? balance1 - (_reserve1 - amount1Out) : 0;\\n        uint256 _amount0Out = amount0Out;\\n        uint256 _amount1Out = amount1Out;\\n        require(amount0In > 0 || amount1In > 0, 'TOMI PAIR : INSUFFICIENT_INPUT_AMOUNT');\\n        _update(balance0, balance1, _reserve0, _reserve1);\\n        emit Swap(msg.sender, amount0In, amount1In, _amount0Out, _amount1Out, to);\\n    }\\n\\n    function swapFee(\\n        uint256 amount,\\n        address token,\\n        address to\\n    ) external onlyPlatform {\\n        if (amount == 0 || token == to) return;\\n        (uint112 _reserve0, uint112 _reserve1, ) = getReserves();\\n        require(to != token0 && to != token1, 'TOMI PAIR : INVALID_TO');\\n        _safeTransfer(token, to, amount);\\n        uint256 balance0 = _balanceOf(token0, address(this));\\n        uint256 balance1 = _balanceOf(token1, address(this));\\n        _update(balance0, balance1, _reserve0, _reserve1);\\n        emit SwapFee(token, to , amount);\\n    }\\n\\n    function queryReward() external view returns (uint256 rewardAmount, uint256 blockNumber) {\\n        rewardAmount = _takeWithAddress(msg.sender);\\n        blockNumber = block.number;\\n    }\\n\\n    function mintReward() external lock returns (uint256 userReward) {\\n        // _mintTGAS();\\n        userReward = _mint(msg.sender);\\n        remainReward = remainReward.sub(userReward);\\n        emit ClaimTOMI(msg.sender, remainReward, userReward);\\n    }\\n\\n    function getTOMIReserve() public view returns (uint256) {\\n        return _balanceOf(TOMI, address(this));\\n    }\\n\\n    function _balanceOf(address token, address owner) internal view returns (uint256) {\\n        if (token == TOMI && owner == address(this)) {\\n            return IERC20(token).balanceOf(owner).sub(remainReward);\\n        } else {\\n            return IERC20(token).balanceOf(owner);\\n        }\\n    }\\n\\n    // force reserves to match balances\\n    function sync() external lock {\\n        _update(_balanceOf(token0, address(this)), _balanceOf(token1, address(this)), reserve0, reserve1);\\n    }\\n}\\n\"\r\n    },\r\n    \"contracts/libraries/Math.sol\": {\r\n      \"content\": \"pragma solidity >=0.5.0;\\n\\n// a library for performing various math operations\\n\\nlibrary Math {\\n    function min(uint x, uint y) internal pure returns (uint z) {\\n        z = x < y ? x : y;\\n    }\\n\\n    // babylonian method (https://en.wikipedia.org/wiki/Methods_of_computing_square_roots#Babylonian_method)\\n    function sqrt(uint y) internal pure returns (uint z) {\\n        if (y > 3) {\\n            z = y;\\n            uint x = y / 2 + 1;\\n            while (x < z) {\\n                z = x;\\n                x = (y / x + x) / 2;\\n            }\\n        } else if (y != 0) {\\n            z = 1;\\n        }\\n    }\\n}\"\r\n    },\r\n    \"contracts/libraries/UQ112x112.sol\": {\r\n      \"content\": \"pragma solidity >=0.5.0;\\n\\n// a library for handling binary fixed point numbers (https://en.wikipedia.org/wiki/Q_(number_format))\\n\\n// range: [0, 2**112 - 1]\\n// resolution: 1 / 2**112\\n\\nlibrary UQ112x112 {\\n    uint224 constant Q112 = 2**112;\\n\\n    // encode a uint112 as a UQ112x112\\n    function encode(uint112 y) internal pure returns (uint224 z) {\\n        z = uint224(y) * Q112; // never overflows\\n    }\\n\\n    // divide a UQ112x112 by a uint112, returning a UQ112x112\\n    function uqdiv(uint224 x, uint112 y) internal pure returns (uint224 z) {\\n        z = x / uint224(y);\\n    }\\n}\"\r\n    },\r\n    \"contracts/interfaces/ITomiCallee.sol\": {\r\n      \"content\": \"pragma solidity >=0.5.0;\\n\\ninterface ITomiCallee {\\n    function tomiCall(address sender, uint amount0, uint amount1, bytes calldata data) external;\\n}\"\r\n    },\r\n    \"contracts/modules/BaseShareField.sol\": {\r\n      \"content\": \"pragma solidity >=0.6.6;\\nimport '../interfaces/ERC2917-Interface.sol';\\nimport '../libraries/SafeMath.sol';\\nimport '../libraries/TransferHelper.sol';\\n\\ncontract BaseShareField {\\n    using SafeMath for uint;\\n    \\n    uint totalProductivity;\\n    uint accAmountPerShare;\\n    \\n    uint public totalShare;\\n    uint public mintedShare;\\n    uint public mintCumulation;\\n    \\n    address public shareToken;\\n    \\n    struct UserInfo {\\n        uint amount;     // How many tokens the user has provided.\\n        uint rewardDebt; // Reward debt. \\n        uint rewardEarn; // Reward earn and not minted\\n    }\\n\\n    mapping(address => UserInfo) public users;\\n    \\n    function _setShareToken(address _shareToken) internal {\\n        shareToken = _shareToken;\\n    }\\n\\n    // Update reward variables of the given pool to be up-to-date.\\n    function _update() internal virtual {\\n        if (totalProductivity == 0) {\\n            totalShare = totalShare.add(_currentReward());\\n            return;\\n        }\\n        \\n        uint256 reward = _currentReward();\\n        accAmountPerShare = accAmountPerShare.add(reward.mul(1e12).div(totalProductivity));\\n        totalShare = totalShare.add(reward);\\n    }\\n    \\n    function _currentReward() internal virtual view returns (uint) {\\n        return mintedShare.add(IERC20(shareToken).balanceOf(address(this))).sub(totalShare);\\n    }\\n    \\n    // Audit user's reward to be up-to-date\\n    function _audit(address user) internal virtual {\\n        UserInfo storage userInfo = users[user];\\n        if (userInfo.amount > 0) {\\n            uint pending = userInfo.amount.mul(accAmountPerShare).div(1e12).sub(userInfo.rewardDebt);\\n            userInfo.rewardEarn = userInfo.rewardEarn.add(pending);\\n            mintCumulation = mintCumulation.add(pending);\\n            userInfo.rewardDebt = userInfo.amount.mul(accAmountPerShare).div(1e12);\\n        }\\n    }\\n\\n    // External function call\\n    // This function increase user's productivity and updates the global productivity.\\n    // the users' actual share percentage will calculated by:\\n    // Formula:     user_productivity / global_productivity\\n    function _increaseProductivity(address user, uint value) internal virtual returns (bool) {\\n        require(value > 0, 'PRODUCTIVITY_VALUE_MUST_BE_GREATER_THAN_ZERO');\\n\\n        UserInfo storage userInfo = users[user];\\n        _update();\\n        _audit(user);\\n\\n        totalProductivity = totalProductivity.add(value);\\n\\n        userInfo.amount = userInfo.amount.add(value);\\n        userInfo.rewardDebt = userInfo.amount.mul(accAmountPerShare).div(1e12);\\n        return true;\\n    }\\n\\n    // External function call \\n    // This function will decreases user's productivity by value, and updates the global productivity\\n    // it will record which block this is happenning and accumulates the area of (productivity * time)\\n    function _decreaseProductivity(address user, uint value) internal virtual returns (bool) {\\n        UserInfo storage userInfo = users[user];\\n        require(value > 0 && userInfo.amount >= value, 'INSUFFICIENT_PRODUCTIVITY');\\n        \\n        _update();\\n        _audit(user);\\n        \\n        userInfo.amount = userInfo.amount.sub(value);\\n        userInfo.rewardDebt = userInfo.amount.mul(accAmountPerShare).div(1e12);\\n        totalProductivity = totalProductivity.sub(value);\\n        \\n        return true;\\n    }\\n    \\n    function _takeWithAddress(address user) internal view returns (uint) {\\n        UserInfo storage userInfo = users[user];\\n        uint _accAmountPerShare = accAmountPerShare;\\n        // uint256 lpSupply = totalProductivity;\\n        if (totalProductivity != 0) {\\n            uint reward = _currentReward();\\n            _accAmountPerShare = _accAmountPerShare.add(reward.mul(1e12).div(totalProductivity));\\n        }\\n        return userInfo.amount.mul(_accAmountPerShare).div(1e12).add(userInfo.rewardEarn).sub(userInfo.rewardDebt);\\n    }\\n\\n    // External function call\\n    // When user calls this function, it will calculate how many token will mint to user from his productivity * time\\n    // Also it calculates global token supply from last time the user mint to this time.\\n    function _mint(address user) internal virtual returns (uint) {\\n        _update();\\n        _audit(user);\\n        require(users[user].rewardEarn > 0, \\\"NOTHING TO MINT\\\");\\n        uint amount = users[user].rewardEarn;\\n        TransferHelper.safeTransfer(shareToken, msg.sender, amount);\\n        users[user].rewardEarn = 0;\\n        mintedShare += amount;\\n        return amount;\\n    }\\n\\n    // Returns how many productivity a user has and global has.\\n    function getProductivity(address user) public virtual view returns (uint, uint) {\\n        return (users[user].amount, totalProductivity);\\n    }\\n\\n    // Returns the current gorss product rate.\\n    function interestsPerBlock() public virtual view returns (uint) {\\n        return accAmountPerShare;\\n    }\\n    \\n}\"\r\n    },\r\n    \"contracts/interfaces/ERC2917-Interface.sol\": {\r\n      \"content\": \"//SPDX-License-Identifier: MIT\\npragma solidity >=0.6.6;\\nimport '../interfaces/IERC20.sol';\\n\\ninterface IERC2917 is IERC20 {\\n\\n    /// @dev This emit when interests amount per block is changed by the owner of the contract.\\n    /// It emits with the old interests amount and the new interests amount.\\n    event InterestRatePerBlockChanged (uint oldValue, uint newValue);\\n\\n    /// @dev This emit when a users' productivity has changed\\n    /// It emits with the user's address and the the value after the change.\\n    event ProductivityIncreased (address indexed user, uint value);\\n\\n    /// @dev This emit when a users' productivity has changed\\n    /// It emits with the user's address and the the value after the change.\\n    event ProductivityDecreased (address indexed user, uint value);\\n\\n    /// @dev Return the current contract's interests rate per block.\\n    /// @return The amount of interests currently producing per each block.\\n    function interestsPerBlock() external view returns (uint);\\n\\n    /// @notice Change the current contract's interests rate.\\n    /// @dev Note the best practice will be restrict the gross product provider's contract address to call this.\\n    /// @return The true/fase to notice that the value has successfully changed or not, when it succeed, it will emite the InterestRatePerBlockChanged event.\\n    function changeInterestRatePerBlock(uint value) external returns (bool);\\n\\n    /// @notice It will get the productivity of given user.\\n    /// @dev it will return 0 if user has no productivity proved in the contract.\\n    /// @return user's productivity and overall productivity.\\n    function getProductivity(address user) external view returns (uint, uint);\\n\\n    /// @notice increase a user's productivity.\\n    /// @dev Note the best practice will be restrict the callee to prove of productivity's contract address.\\n    /// @return true to confirm that the productivity added success.\\n    function increaseProductivity(address user, uint value) external returns (bool);\\n\\n    /// @notice decrease a user's productivity.\\n    /// @dev Note the best practice will be restrict the callee to prove of productivity's contract address.\\n    /// @return true to confirm that the productivity removed success.\\n    function decreaseProductivity(address user, uint value) external returns (bool);\\n\\n    /// @notice take() will return the interests that callee will get at current block height.\\n    /// @dev it will always calculated by block.number, so it will change when block height changes.\\n    /// @return amount of the interests that user are able to mint() at current block height.\\n    function take() external view returns (uint);\\n\\n    /// @notice similar to take(), but with the block height joined to calculate return.\\n    /// @dev for instance, it returns (_amount, _block), which means at block height _block, the callee has accumulated _amount of interests.\\n    /// @return amount of interests and the block height.\\n    function takeWithBlock() external view returns (uint, uint);\\n\\n    /// @notice mint the avaiable interests to callee.\\n    /// @dev once it mint, the amount of interests will transfer to callee's address.\\n    /// @return the amount of interests minted.\\n    function mint() external returns (uint);\\n}\\n\"\r\n    },\r\n    \"contracts/TomiLP.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\npragma solidity >=0.6.6;\\n\\nimport './libraries/SafeMath.sol';\\nimport './modules/BaseShareField.sol';\\n\\ninterface ITomiPool {\\n    function queryReward(address _pair, address _user) external view returns(uint);\\n    function claimReward(address _pair, address _rewardToken) external;\\n}\\n\\ninterface ITomiPair {\\n    function queryReward() external view returns (uint256 rewardAmount, uint256 blockNumber);\\n    function mintReward() external returns (uint256 userReward);\\n}\\n\\ninterface ITomiDelegate {\\n    function addPlayerPair(address _user) external;\\n}\\n\\ninterface ITomiPlatform{\\n    function addLiquidity(\\n        address tokenA,\\n        address tokenB,\\n        uint256 amountA,\\n        uint256 amountB,\\n        uint256 amountAMin,\\n        uint256 amountBMin,\\n        uint256 deadline\\n    )\\n        external\\n        returns (\\n            uint256 _amountA,\\n            uint256 _amountB,\\n            uint256 _liquidity\\n        );\\n        \\n    function addLiquidityETH(\\n        address token,\\n        uint256 amountTokenDesired,\\n        uint256 amountTokenMin,\\n        uint256 amountETHMin,\\n        uint256 deadline\\n    )\\n        external\\n        payable\\n        returns (\\n            uint256 _amountToken,\\n            uint256 _amountETH,\\n            uint256 _liquidity\\n        );\\n    function removeLiquidityETH(\\n        address token,\\n        uint256 liquidity,\\n        uint256 amountTokenMin,\\n        uint256 amountETHMin,\\n        address to,\\n        uint256 deadline\\n    ) external returns (uint256 amountToken, uint256 amountETH);\\n    function removeLiquidity(\\n        address tokenA,\\n        address tokenB,\\n        uint256 liquidity,\\n        uint256 amountAMin,\\n        uint256 amountBMin,\\n        address to,\\n        uint256 deadline\\n    ) external returns (uint256 amountA, uint256 amountB);\\n    \\n    function pairFor(address tokenA, address tokenB) external view returns (address);\\n}\\n\\ncontract TomiLP is BaseShareField {\\n    // ERC20 Start\\n    \\n    using SafeMath for uint;\\n\\n    string public constant name = 'Tomi LP';\\n    string public constant symbol = 'BLP';\\n    uint8 public constant decimals = 18;\\n    uint public totalSupply;\\n    \\n    mapping(address => uint) public balanceOf;\\n    mapping(address => mapping(address => uint)) public allowance;\\n\\n    event Mint(address indexed user, uint amount);\\n    event Transfer(address indexed from, address indexed to, uint value);\\n    event Approval(address indexed owner, address indexed spender, uint value);\\n    \\n    function _mint(address to, uint value) internal {\\n        totalSupply = totalSupply.add(value);\\n        balanceOf[to] = balanceOf[to].add(value);\\n        emit Transfer(address(0), to, value);\\n    }\\n    \\n    receive() external payable {\\n    }\\n    \\n    function _burn(address from, uint value) internal {\\n        balanceOf[from] = balanceOf[from].sub(value);\\n        totalSupply = totalSupply.sub(value);\\n        emit Transfer(from, address(0), value);\\n    }\\n\\n    function _transfer(address from, address to, uint value) private {\\n        require(balanceOf[from] >= value, 'ERC20Token: INSUFFICIENT_BALANCE');\\n        balanceOf[from] = balanceOf[from].sub(value);\\n        balanceOf[to] = balanceOf[to].add(value);\\n        if (to == address(0)) { // burn\\n            totalSupply = totalSupply.sub(value);\\n        }\\n\\n        ITomiDelegate(owner).addPlayerPair(to);\\n        _mintReward();\\n        _decreaseProductivity(from, value);\\n        _increaseProductivity(to, value);\\n        emit Transfer(from, to, value);\\n    }\\n\\n    function approve(address spender, uint value) external returns (bool) {\\n        allowance[msg.sender][spender] = value;\\n        emit Approval(msg.sender, spender, value);\\n        return true;\\n    }\\n\\n    function transfer(address to, uint value) external returns (bool) {\\n        _transfer(msg.sender, to, value);\\n        return true;\\n    }\\n\\n    function transferFrom(address from, address to, uint value) external returns (bool) {\\n        require(allowance[from][msg.sender] >= value, 'ERC20Token: INSUFFICIENT_ALLOWANCE');\\n        allowance[from][msg.sender] = allowance[from][msg.sender].sub(value);\\n        _transfer(from, to, value);\\n        return true;\\n    }    \\n    \\n    // ERC20 End\\n    \\n    \\n    address public owner;\\n    address public POOL;\\n    address public PLATFORM;\\n    address public tokenA;\\n    address public tokenB;\\n    address public WETH;\\n    \\n    event AddLiquidity (address indexed user, uint amountA, uint amountB, uint value);\\n    event RemoveLiquidity (address indexed user, uint amountA, uint amountB, uint value);\\n    \\n    constructor() public {\\n        owner = msg.sender;\\n    }\\n    \\n    function initialize(address _tokenA, address _tokenB, address _TOMI, address _POOL, address _PLATFORM, address _WETH) external {\\n        require(msg.sender == owner, \\\"Tomi LP Forbidden\\\");\\n        tokenA = _tokenA;\\n        tokenB = _tokenB;\\n        _setShareToken(_TOMI);\\n        PLATFORM = _PLATFORM;\\n        POOL = _POOL;\\n        WETH = _WETH;\\n    }\\n \\n    function upgrade(address _PLATFORM) external {\\n        require(msg.sender == owner, \\\"Tomi LP Forbidden\\\");\\n        PLATFORM = _PLATFORM;\\n    }\\n\\n    function approveContract(address token, address spender, uint amount) internal {\\n        uint allowAmount = IERC20(token).totalSupply();\\n        if(allowAmount < amount) {\\n            allowAmount = amount;\\n        }\\n        if(IERC20(token).allowance(address(this), spender) < amount) {\\n            TransferHelper.safeApprove(token, spender, allowAmount);\\n        }\\n    }\\n    \\n    function addLiquidityETH(\\n        address user,\\n        uint256 amountTokenDesired,\\n        uint256 amountTokenMin,\\n        uint256 amountETHMin,\\n        uint256 deadline) external payable returns (\\n            uint256 _amountToken,\\n            uint256 _amountETH,\\n            uint256 _liquidity\\n        ) {\\n           require(msg.sender == owner, \\\"Tomi LP Forbidden\\\");\\n           require(tokenA == WETH || tokenB == WETH, \\\"INVALID CALL\\\");\\n           address token = tokenA == WETH ? tokenB: tokenA;\\n           approveContract(token, PLATFORM, amountTokenDesired);\\n           TransferHelper.safeTransferFrom(token, msg.sender, address(this), amountTokenDesired);\\n           \\n           (_amountToken, _amountETH, _liquidity) = ITomiPlatform(PLATFORM).addLiquidityETH{value: msg.value}(token, amountTokenDesired, amountTokenMin, amountETHMin, deadline);\\n           \\n           if(amountTokenDesired > _amountToken) {\\n                TransferHelper.safeTransfer(token, user, amountTokenDesired.sub(_amountToken));\\n            }\\n            \\n            if(msg.value > _amountETH) {\\n                TransferHelper.safeTransferETH(user, msg.value.sub(_amountETH));\\n            }\\n        _mintReward();\\n        _mint(user, _liquidity);\\n        _increaseProductivity(user, _liquidity);\\n        (uint amountA, uint amountB) = token == tokenA ? (_amountToken, _amountETH): (_amountETH, _amountToken);\\n        emit AddLiquidity (user, amountA, amountB, _liquidity);\\n    }\\n    \\n    function addLiquidity(\\n        address user,\\n        uint256 amountA,\\n        uint256 amountB,\\n        uint256 amountAMin,\\n        uint256 amountBMin,\\n        uint256 deadline) external returns (\\n            uint256 _amountA,\\n            uint256 _amountB,\\n            uint256 _liquidity\\n        ) {\\n            require(msg.sender == owner, \\\"Tomi LP Forbidden\\\");\\n            approveContract(tokenA, PLATFORM, amountA);\\n            approveContract(tokenB, PLATFORM, amountB);\\n            TransferHelper.safeTransferFrom(tokenA, msg.sender, address(this), amountA);\\n            TransferHelper.safeTransferFrom(tokenB, msg.sender, address(this), amountB);\\n        (_amountA, _amountB, _liquidity) = ITomiPlatform(PLATFORM).addLiquidity(tokenA, tokenB, amountA, amountB, amountAMin, amountBMin, deadline);\\n        if(amountA > _amountA) {\\n            TransferHelper.safeTransfer(tokenA, user, amountA.sub(_amountA));\\n        }\\n        \\n        if(amountB > _amountB) {\\n            TransferHelper.safeTransfer(tokenB, user, amountB.sub(_amountB));\\n        }\\n        \\n        _mintReward();\\n        _mint(user, _liquidity);\\n        _increaseProductivity(user, _liquidity);\\n        emit AddLiquidity (user, _amountA, _amountB, _liquidity);\\n    }\\n    \\n    function removeLiquidityETH (\\n        address user,\\n        uint256 liquidity,\\n        uint256 amountTokenMin,\\n        uint256 amountETHMin,\\n        uint256 deadline) external returns (uint256 _amountToken, uint256 _amountETH) {\\n         require(msg.sender == owner, \\\"Tomi LP Forbidden\\\");\\n         require(tokenA == WETH || tokenB == WETH, \\\"INVALID CALL\\\");\\n         address token = tokenA == WETH ? tokenB: tokenA;\\n           \\n        (_amountToken, _amountETH) = ITomiPlatform(PLATFORM).removeLiquidityETH(token, liquidity, amountTokenMin, amountETHMin, user, deadline);\\n         \\n        _mintReward();\\n        _burn(user, liquidity);\\n        _decreaseProductivity(user, liquidity);\\n        (uint amountA, uint amountB) = token == tokenA ? (_amountToken, _amountETH): (_amountETH, _amountToken);\\n        emit RemoveLiquidity (user, amountA, amountB, liquidity);\\n    }\\n    \\n    function removeLiquidity(\\n        address user,\\n        uint256 liquidity,\\n        uint256 amountAMin,\\n        uint256 amountBMin,\\n        uint256 deadline) external returns (\\n            uint256 _amountA,\\n            uint256 _amountB\\n        ) {\\n            require(msg.sender == owner, \\\"Tomi LP Forbidden\\\");\\n        (_amountA, _amountB) = ITomiPlatform(PLATFORM).removeLiquidity(tokenA, tokenB, liquidity, amountAMin, amountBMin, user, deadline);\\n        \\n        _mintReward();\\n        _burn(user, liquidity);\\n        _decreaseProductivity(user, liquidity);\\n        emit RemoveLiquidity (user, _amountA, _amountB, liquidity);\\n    }\\n    \\n    function _currentReward() internal override view returns (uint) {\\n        address pair = ITomiPlatform(PLATFORM).pairFor(tokenA, tokenB);\\n        uint countractAmount = mintedShare.add(IERC20(shareToken).balanceOf(address(this))).sub(totalShare);\\n        if(pair != address(0)) {\\n            uint poolAmount = ITomiPool(POOL).queryReward(pair, address(this));\\n            // (uint pairAmount, ) = ITomiPair(pair).queryReward();\\n            // return countractAmount.add(poolAmount).add(pairAmount);\\n            return countractAmount.add(poolAmount);\\n        } else {\\n            return countractAmount;\\n        }\\n    }\\n    \\n    function _mintReward() internal {\\n        address pair = ITomiPlatform(PLATFORM).pairFor(tokenA, tokenB);\\n        if(pair != address(0)) {\\n            uint poolAmount = ITomiPool(POOL).queryReward(pair, address(this));\\n            // (uint pairAmount, ) = ITomiPair(pair).queryReward();\\n            if(poolAmount > 0) {\\n                ITomiPool(POOL).claimReward(pair, shareToken);\\n            }\\n            \\n            // if(pairAmount > 0) {\\n            //     ITomiPair(pair).mintReward();\\n            // }\\n        } \\n    }\\n    \\n    function queryReward() external view returns (uint) {\\n        return _takeWithAddress(msg.sender);\\n    }\\n    \\n    function mintReward() external returns (uint amount) {\\n        _mintReward();\\n        amount = _mint(msg.sender);\\n        emit Mint(msg.sender, amount);\\n    }\\n}\"\r\n    },\r\n    \"contracts/TomiDelegate.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\npragma solidity >=0.6.6;\\n\\nimport './TomiLP.sol';\\nimport './modules/Ownable.sol';\\n\\ninterface ITomiLP {\\n    function addLiquidity(\\n        address user,\\n        uint256 amountA,\\n        uint256 amountB,\\n        uint256 amountAMin,\\n        uint256 amountBMin,\\n        uint256 deadline) external returns (\\n            uint256 _amountA,\\n            uint256 _amountB,\\n            uint256 _liquidity\\n        );\\n    function removeLiquidity(\\n        address user,\\n        uint256 liquidity,\\n        uint256 amountAMin,\\n        uint256 amountBMin,\\n        uint256 deadline) external returns (\\n            uint256 _amountA,\\n            uint256 _amountB\\n        );\\n    function addLiquidityETH(\\n        address user,\\n        uint256 amountTokenDesired,\\n        uint256 amountTokenMin,\\n        uint256 amountETHMin,\\n        uint256 deadline) external payable returns (\\n            uint256 _amountToken,\\n            uint256 _amountETH,\\n            uint256 _liquidity\\n        );\\n    function removeLiquidityETH (\\n        address user,\\n        uint256 liquidity,\\n        uint256 amountTokenMin,\\n        uint256 amountETHMin,\\n        uint256 deadline) external returns (uint256 _amountToken, uint256 _amountETH);\\n    function initialize(address _tokenA, address _tokenB, address _TOMI, address _POOL, address _PLATFORM, address _WETH) external;\\n    function upgrade(address _PLATFORM) external;\\n    function tokenA() external returns(address);\\n}\\n\\ncontract TomiDelegate is Ownable{\\n    using SafeMath for uint;\\n    \\n    address public PLATFORM;\\n    address public POOL;\\n    address public TOMI;\\n    address public WETH;\\n    mapping(address => mapping(address => address)) public getPair;\\n    address[] public allPairs;\\n    mapping(address => bool) public isPair;\\n    mapping(address => address[]) public playerPairs;\\n    mapping(address => mapping(address => bool)) public isAddPlayerPair;\\n\\n    bytes32 public contractCodeHash;\\n    event PairCreated(address indexed token0, address indexed token1, address pair, uint256);\\n    \\n    constructor(address _PLATFORM, address _POOL, address _TOMI, address _WETH) public {\\n        PLATFORM = _PLATFORM;\\n        POOL = _POOL;\\n        TOMI = _TOMI;\\n        WETH = _WETH;\\n    }\\n    \\n    receive() external payable {\\n    }\\n    \\n    function upgradePlatform(address _PLATFORM) external onlyOwner {\\n        for(uint i = 0; i < allPairs.length;i++) {\\n            ITomiLP(allPairs[i]).upgrade(_PLATFORM);\\n        }\\n    }\\n\\n    function allPairsLength() external view returns (uint256) {\\n        return allPairs.length;\\n    }\\n\\n    function getPlayerPairCount(address player) external view returns (uint256) {\\n        return playerPairs[player].length;\\n    }\\n\\n    function _addPlayerPair(address _user, address _pair) internal {\\n        if (isAddPlayerPair[_user][_pair] == false) {\\n            isAddPlayerPair[_user][_pair] = true;\\n            playerPairs[_user].push(_pair);\\n        }\\n    }\\n\\n    function addPlayerPair(address _user) external {\\n        require(isPair[msg.sender], 'addPlayerPair Forbidden');\\n        _addPlayerPair(_user, msg.sender);\\n    }\\n    \\n    function approveContract(address token, address spender, uint amount) internal {\\n        uint allowAmount = IERC20(token).totalSupply();\\n        if(allowAmount < amount) {\\n            allowAmount = amount;\\n        }\\n        if(IERC20(token).allowance(address(this), spender) < amount) {\\n            TransferHelper.safeApprove(token, spender, allowAmount);\\n        }\\n    }\\n\\n    function addLiquidityETH(\\n        address token,\\n        uint256 amountTokenDesired,\\n        uint256 amountTokenMin,\\n        uint256 amountETHMin,\\n        uint256 deadline\\n        ) payable external returns (\\n            uint256 _amountToken,\\n            uint256 _amountETH,\\n            uint256 _liquidity\\n        ) {\\n        address pair = getPair[token][WETH];\\n            if(pair == address(0)) {\\n                pair = _createPair(token, WETH);\\n            }\\n            \\n            _addPlayerPair(msg.sender, pair);\\n\\n            TransferHelper.safeTransferFrom(token, msg.sender, address(this), amountTokenDesired);\\n            approveContract(token, pair, amountTokenDesired);\\n            (_amountToken, _amountETH, _liquidity) = ITomiLP(pair).addLiquidityETH{value: msg.value}(msg.sender, amountTokenDesired, amountTokenMin, amountETHMin, deadline);\\n    }\\n    \\n    \\n    \\n    function addLiquidity(\\n        address tokenA,\\n        address tokenB,\\n        uint256 amountA,\\n        uint256 amountB,\\n        uint256 amountAMin,\\n        uint256 amountBMin,\\n        uint256 deadline) external returns (\\n            uint256 _amountA,\\n            uint256 _amountB,\\n            uint256 _liquidity\\n        ) {\\n            address pair = getPair[tokenA][tokenB];\\n            if(pair == address(0)) {\\n                pair = _createPair(tokenA, tokenB);\\n            }\\n\\n            _addPlayerPair(msg.sender, pair);\\n\\n            if(tokenA != ITomiLP(pair).tokenA()) {\\n                (tokenA, tokenB) = (tokenB, tokenA);\\n                (amountA, amountB, amountAMin, amountBMin) = (amountB, amountA, amountBMin, amountAMin);\\n            }\\n            \\n            TransferHelper.safeTransferFrom(tokenA, msg.sender, address(this), amountA);\\n            TransferHelper.safeTransferFrom(tokenB, msg.sender, address(this), amountB);\\n            approveContract(tokenA, pair, amountA);\\n            approveContract(tokenB, pair, amountB);\\n\\n            (_amountA, _amountB, _liquidity) = ITomiLP(pair).addLiquidity(msg.sender, amountA, amountB, amountAMin, amountBMin, deadline);\\n            if(tokenA != ITomiLP(pair).tokenA()) {\\n                (_amountA, _amountB) = (_amountB, _amountA);\\n            }\\n    }\\n    \\n    function removeLiquidityETH(\\n        address token,\\n        uint liquidity,\\n        uint amountTokenMin,\\n        uint amountETHMin,\\n        uint deadline\\n        ) external returns (uint _amountToken, uint _amountETH) {\\n            address pair = getPair[token][WETH];\\n            (_amountToken, _amountETH) = ITomiLP(pair).removeLiquidityETH(msg.sender, liquidity, amountTokenMin, amountETHMin, deadline);\\n        }\\n    \\n    function removeLiquidity(\\n        address tokenA,\\n        address tokenB,\\n        uint256 liquidity,\\n        uint256 amountAMin,\\n        uint256 amountBMin,\\n        uint256 deadline) external returns (\\n            uint256 _amountA,\\n            uint256 _amountB\\n        ) {\\n        address pair = getPair[tokenA][tokenB];\\n        (_amountA, _amountB) = ITomiLP(pair).removeLiquidity(msg.sender, liquidity, amountAMin, amountBMin, deadline);\\n    }\\n\\n    function _createPair(address tokenA, address tokenB) internal returns (address pair){\\n        (address token0, address token1) = tokenA < tokenB ? (tokenA, tokenB) : (tokenB, tokenA);\\n        require(token0 != address(0), 'TOMI FACTORY: ZERO_ADDRESS');\\n        require(getPair[token0][token1] == address(0), 'TOMI FACTORY: PAIR_EXISTS'); // single check is sufficient\\n        bytes memory bytecode = type(TomiLP).creationCode;\\n        if (uint256(contractCodeHash) == 0) {\\n            contractCodeHash = keccak256(bytecode);\\n        }\\n        bytes32 salt = keccak256(abi.encodePacked(token0, token1));\\n        assembly {\\n            pair := create2(0, add(bytecode, 32), mload(bytecode), salt)\\n        }\\n        isPair[pair] = true;\\n        ITomiLP(pair).initialize(token0, token1, TOMI, POOL, PLATFORM, WETH);\\n        getPair[token0][token1] = pair;\\n        getPair[token1][token0] = pair; // populate mapping in the reverse direction\\n        allPairs.push(pair);\\n        emit PairCreated(token0, token1, pair, allPairs.length);\\n    }\\n}\"\r\n    },\r\n    \"contracts/modules/ERC2917Impl.sol\": {\r\n      \"content\": \"//SPDX-License-Identifier: MIT\\npragma solidity >=0.6.6;\\n\\nimport '../interfaces/ERC2917-Interface.sol';\\nimport '../modules/Upgradable.sol';\\nimport '../libraries/SafeMath.sol';\\n\\n/*\\n    The Objective of ERC2917 Demo is to implement a decentralized staking mechanism, which calculates users' share\\n    by accumulating productiviy * time. And calculates users revenue from anytime t0 to t1 by the formula below:\\n\\n        user_accumulated_productivity(time1) - user_accumulated_productivity(time0)\\n       _____________________________________________________________________________  * (gross_product(t1) - gross_product(t0))\\n       total_accumulated_productivity(time1) - total_accumulated_productivity(time0)\\n\\n*/\\ncontract ERC2917Impl is IERC2917, UpgradableProduct, UpgradableGovernance {\\n    using SafeMath for uint;\\n\\n    uint public mintCumulation;\\n    uint public amountPerBlock;\\n\\n    uint public nounce;\\n\\n    function incNounce() public {\\n        nounce ++;\\n    }\\n\\n    // implementation of ERC20 interfaces.\\n    string override public name;\\n    string override public symbol;\\n    uint8 override public decimals = 18;\\n    uint override public totalSupply;\\n\\n    mapping(address => uint) override public balanceOf;\\n    mapping(address => mapping(address => uint)) override public allowance;\\n\\n    function _transfer(address from, address to, uint value) internal virtual {\\n        require(balanceOf[from] >= value, 'ERC20Token: INSUFFICIENT_BALANCE');\\n        balanceOf[from] = balanceOf[from].sub(value);\\n        balanceOf[to] = balanceOf[to].add(value);\\n        if (to == address(0)) { // burn\\n            totalSupply = totalSupply.sub(value);\\n        }\\n        emit Transfer(from, to, value);\\n    }\\n\\n    function approve(address spender, uint value) external virtual override  returns (bool) {\\n        allowance[msg.sender][spender] = value;\\n        emit Approval(msg.sender, spender, value);\\n        return true;\\n    }\\n\\n    function transfer(address to, uint value) external virtual override returns (bool) {\\n        _transfer(msg.sender, to, value);\\n        return true;\\n    }\\n\\n    function transferFrom(address from, address to, uint value) external virtual override returns (bool) {\\n        require(allowance[from][msg.sender] >= value, 'ERC20Token: INSUFFICIENT_ALLOWANCE');\\n        allowance[from][msg.sender] = allowance[from][msg.sender].sub(value);\\n        _transfer(from, to, value);\\n        return true;\\n    }\\n\\n    // end of implementation of ERC20\\n    \\n    uint lastRewardBlock;\\n    uint totalProductivity;\\n    uint accAmountPerShare;\\n    struct UserInfo {\\n        uint amount;     // How many LP tokens the user has provided.\\n        uint rewardDebt; // Reward debt. \\n        uint rewardEarn; // Reward earn and not minted\\n    }\\n\\n    mapping(address => UserInfo) public users;\\n\\n    // creation of the interests token.\\n    constructor(string memory _name, string memory _symbol, uint8 _decimals, uint _interestsRate) UpgradableProduct() UpgradableGovernance() public {\\n        name        = _name;\\n        symbol      = _symbol;\\n        decimals    = _decimals;\\n\\n        amountPerBlock = _interestsRate;\\n    }\\n\\n    // External function call\\n    // This function adjust how many token will be produced by each block, eg:\\n    // changeAmountPerBlock(100)\\n    // will set the produce rate to 100/block.\\n    function changeInterestRatePerBlock(uint value) external virtual override requireGovernor returns (bool) {\\n        uint old = amountPerBlock;\\n        require(value != old, 'AMOUNT_PER_BLOCK_NO_CHANGE');\\n\\n        _update();\\n        amountPerBlock = value;\\n\\n        emit InterestRatePerBlockChanged(old, value);\\n        return true;\\n    }\\n\\n    // Update reward variables of the given pool to be up-to-date.\\n    function _update() internal virtual {\\n        if (block.number <= lastRewardBlock) {\\n            return;\\n        }\\n\\n        if (totalProductivity == 0) {\\n            lastRewardBlock = block.number;\\n            return;\\n        }\\n        \\n        uint256 reward = _currentReward();\\n        balanceOf[address(this)] = balanceOf[address(this)].add(reward);\\n        totalSupply = totalSupply.add(reward);\\n\\n        accAmountPerShare = accAmountPerShare.add(reward.mul(1e12).div(totalProductivity));\\n        lastRewardBlock = block.number;\\n    }\\n    \\n    function _currentReward() internal virtual view returns (uint){\\n        uint256 multiplier = block.number.sub(lastRewardBlock);\\n        return multiplier.mul(amountPerBlock);\\n    }\\n    \\n    // Audit user's reward to be up-to-date\\n    function _audit(address user) internal virtual {\\n        UserInfo storage userInfo = users[user];\\n        if (userInfo.amount > 0) {\\n            uint pending = userInfo.amount.mul(accAmountPerShare).div(1e12).sub(userInfo.rewardDebt);\\n            userInfo.rewardEarn = userInfo.rewardEarn.add(pending);\\n            mintCumulation = mintCumulation.add(pending);\\n            userInfo.rewardDebt = userInfo.amount.mul(accAmountPerShare).div(1e12);\\n        }\\n    }\\n\\n    // External function call\\n    // This function increase user's productivity and updates the global productivity.\\n    // the users' actual share percentage will calculated by:\\n    // Formula:     user_productivity / global_productivity\\n    function increaseProductivity(address user, uint value) external virtual override requireImpl returns (bool) {\\n        require(value > 0, 'PRODUCTIVITY_VALUE_MUST_BE_GREATER_THAN_ZERO');\\n\\n        UserInfo storage userInfo = users[user];\\n        _update();\\n        _audit(user);\\n\\n        totalProductivity = totalProductivity.add(value);\\n\\n        userInfo.amount = userInfo.amount.add(value);\\n        userInfo.rewardDebt = userInfo.amount.mul(accAmountPerShare).div(1e12);\\n        emit ProductivityIncreased(user, value);\\n        return true;\\n    }\\n\\n    // External function call \\n    // This function will decreases user's productivity by value, and updates the global productivity\\n    // it will record which block this is happenning and accumulates the area of (productivity * time)\\n    function decreaseProductivity(address user, uint value) external virtual override requireImpl returns (bool) {\\n        UserInfo storage userInfo = users[user];\\n        require(value > 0 && userInfo.amount >= value, \\\"INSUFFICIENT_PRODUCTIVITY\\\");\\n        _update();\\n        _audit(user);\\n        \\n        userInfo.amount = userInfo.amount.sub(value);\\n        userInfo.rewardDebt = userInfo.amount.mul(accAmountPerShare).div(1e12);\\n        totalProductivity = totalProductivity.sub(value);\\n\\n        emit ProductivityDecreased(user, value);\\n        return true;\\n    }\\n    \\n    function takeWithAddress(address user) public view returns (uint) {\\n        UserInfo storage userInfo = users[user];\\n        uint _accAmountPerShare = accAmountPerShare;\\n        // uint256 lpSupply = totalProductivity;\\n        if (block.number > lastRewardBlock && totalProductivity != 0) {\\n            uint reward = _currentReward();\\n            _accAmountPerShare = _accAmountPerShare.add(reward.mul(1e12).div(totalProductivity));\\n        }\\n        return userInfo.amount.mul(_accAmountPerShare).div(1e12).sub(userInfo.rewardDebt).add(userInfo.rewardEarn);\\n    }\\n\\n    function take() external override virtual view returns (uint) {\\n        return takeWithAddress(msg.sender);\\n    }\\n\\n    // Returns how much a user could earn plus the giving block number.\\n    function takeWithBlock() external override virtual view returns (uint, uint) {\\n        uint earn = takeWithAddress(msg.sender);\\n        return (earn, block.number);\\n    }\\n\\n\\n    // External function call\\n    // When user calls this function, it will calculate how many token will mint to user from his productivity * time\\n    // Also it calculates global token supply from last time the user mint to this time.\\n    function mint() external override virtual returns (uint) {\\n        _update();\\n        _audit(msg.sender);\\n        require(users[msg.sender].rewardEarn > 0, \\\"NO_PRODUCTIVITY\\\");\\n        uint amount = users[msg.sender].rewardEarn;\\n        _transfer(address(this), msg.sender, users[msg.sender].rewardEarn);\\n        users[msg.sender].rewardEarn = 0;\\n        return amount;\\n    }\\n\\n    // Returns how many productivity a user has and global has.\\n    function getProductivity(address user) external override virtual view returns (uint, uint) {\\n        return (users[user].amount, totalProductivity);\\n    }\\n\\n    // Returns the current gorss product rate.\\n    function interestsPerBlock() external override virtual view returns (uint) {\\n        return accAmountPerShare;\\n    }\\n}\"\r\n    },\r\n    \"contracts/modules/Upgradable.sol\": {\r\n      \"content\": \"pragma solidity >=0.5.16;\\n\\ncontract UpgradableProduct {\\n    address public impl;\\n\\n    event ImplChanged(address indexed _oldImpl, address indexed _newImpl);\\n\\n    constructor() public {\\n        impl = msg.sender;\\n    }\\n\\n    modifier requireImpl() {\\n        require(msg.sender == impl, 'FORBIDDEN');\\n        _;\\n    }\\n\\n    function upgradeImpl(address _newImpl) public requireImpl {\\n        require(_newImpl != address(0), 'INVALID_ADDRESS');\\n        require(_newImpl != impl, 'NO_CHANGE');\\n        address lastImpl = impl;\\n        impl = _newImpl;\\n        emit ImplChanged(lastImpl, _newImpl);\\n    }\\n}\\n\\ncontract UpgradableGovernance {\\n    address public governor;\\n\\n    event GovernorChanged(address indexed _oldGovernor, address indexed _newGovernor);\\n\\n    constructor() public {\\n        governor = msg.sender;\\n    }\\n\\n    modifier requireGovernor() {\\n        require(msg.sender == governor, 'FORBIDDEN');\\n        _;\\n    }\\n\\n    function upgradeGovernance(address _newGovernor) public requireGovernor {\\n        require(_newGovernor != address(0), 'INVALID_ADDRESS');\\n        require(_newGovernor != governor, 'NO_CHANGE');\\n        address lastGovernor = governor;\\n        governor = _newGovernor;\\n        emit GovernorChanged(lastGovernor, _newGovernor);\\n    }\\n}\"\r\n    },\r\n    \"contracts/test/TgasTest.sol\": {\r\n      \"content\": \"pragma solidity >=0.5.16;\\n\\nimport '../modules/ERC2917Impl.sol';\\n\\ncontract TgasTest is ERC2917Impl(\\\"Demax Gas\\\", \\\"DGAS\\\", 18, 1 * (10 ** 18)) {\\n\\n    constructor() public {\\n        totalSupply += 1000000000000000* 10 ** 18;\\n        balanceOf[msg.sender] = 1000000000000000* 10 ** 18;   \\n    }\\n}\\n\"\r\n    },\r\n    \"contracts/TomiFactory.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\npragma solidity >=0.6.6;\\n\\nimport './TomiPair.sol';\\nimport './interfaces/ITomiConfig.sol';\\n\\ncontract TomiFactory {\\n    uint256 public version = 1;\\n    address public TOMI;\\n    address public CONFIG;\\n    address public owner;\\n    mapping(address => mapping(address => address)) public getPair;\\n    mapping(address => bool) public isPair;\\n    address[] public allPairs;\\n\\n    mapping(address => address[]) public playerPairs;\\n    mapping(address => mapping(address => bool)) isAddPlayerPair;\\n\\n    bytes32 public contractCodeHash;\\n    event PairCreated(address indexed token0, address indexed token1, address pair, uint256);\\n\\n    constructor(address _TOMI, address _CONFIG) public {\\n        TOMI = _TOMI;\\n        CONFIG = _CONFIG;\\n        owner = msg.sender;\\n    }\\n\\n    function updateConfig(address _CONFIG) external {\\n        require(msg.sender == owner, 'TOMI FACTORY: PERMISSION');\\n        CONFIG = _CONFIG;\\n        for(uint i = 0; i < allPairs.length; i ++) {\\n            TomiPair(allPairs[i]).initialize(TomiPair(allPairs[i]).token0(), TomiPair(allPairs[i]).token1(), _CONFIG, TOMI);\\n        }\\n    }\\n\\n    function getPlayerPairCount(address player) external view returns (uint256) {\\n        address[] storage existAddress = playerPairs[player];\\n        if (existAddress.length == 0) return 0;\\n        return existAddress.length;\\n    }\\n\\n    function addPlayerPair(address _player, address _pair) external returns (bool) {\\n        require(msg.sender == ITomiConfig(CONFIG).platform(), 'TOMI FACTORY: PERMISSION');\\n        if (isAddPlayerPair[_player][_pair] == false) {\\n            isAddPlayerPair[_player][_pair] = true;\\n            playerPairs[_player].push(_pair);\\n        }\\n        return true;\\n    }\\n\\n    function allPairsLength() external view returns (uint256) {\\n        return allPairs.length;\\n    }\\n\\n    function createPair(address tokenA, address tokenB) external returns (address pair) {\\n        require(msg.sender == ITomiConfig(CONFIG).platform(), 'TOMI FACTORY: PERMISSION');\\n        require(tokenA != tokenB, 'TOMI FACTORY: IDENTICAL_ADDRESSES');\\n        require(\\n            ITomiConfig(CONFIG).checkToken(tokenA) && ITomiConfig(CONFIG).checkToken(tokenB),\\n            'TOMI FACTORY: NOT LIST'\\n        );\\n        (address token0, address token1) = tokenA < tokenB ? (tokenA, tokenB) : (tokenB, tokenA);\\n        require(token0 != address(0), 'TOMI FACTORY: ZERO_ADDRESS');\\n        require(getPair[token0][token1] == address(0), 'TOMI FACTORY: PAIR_EXISTS'); // single check is sufficient\\n        bytes memory bytecode = type(TomiPair).creationCode;\\n        if (uint256(contractCodeHash) == 0) {\\n            contractCodeHash = keccak256(bytecode);\\n        }\\n        bytes32 salt = keccak256(abi.encodePacked(token0, token1));\\n        assembly {\\n            pair := create2(0, add(bytecode, 32), mload(bytecode), salt)\\n        }\\n        isPair[pair] = true;\\n        TomiPair(pair).initialize(token0, token1, CONFIG, TOMI);\\n        getPair[token0][token1] = pair;\\n        getPair[token1][token0] = pair; // populate mapping in the reverse direction\\n        allPairs.push(pair);\\n        emit PairCreated(token0, token1, pair, allPairs.length);\\n    }\\n}\"\r\n    },\r\n    \"@openzeppelin/contracts/token/ERC20/ERC20.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity >=0.6.0 <0.8.0;\\n\\nimport \\\"../../GSN/Context.sol\\\";\\nimport \\\"./IERC20.sol\\\";\\nimport \\\"../../math/SafeMath.sol\\\";\\n\\n/**\\n * @dev Implementation of the {IERC20} interface.\\n *\\n * This implementation is agnostic to the way tokens are created. This means\\n * that a supply mechanism has to be added in a derived contract using {_mint}.\\n * For a generic mechanism see {ERC20PresetMinterPauser}.\\n *\\n * TIP: For a detailed writeup see our guide\\n * https://forum.zeppelin.solutions/t/how-to-implement-erc20-supply-mechanisms/226[How\\n * to implement supply mechanisms].\\n *\\n * We have followed general OpenZeppelin guidelines: functions revert instead\\n * of returning `false` on failure. This behavior is nonetheless conventional\\n * and does not conflict with the expectations of ERC20 applications.\\n *\\n * Additionally, an {Approval} event is emitted on calls to {transferFrom}.\\n * This allows applications to reconstruct the allowance for all accounts just\\n * by listening to said events. Other implementations of the EIP may not emit\\n * these events, as it isn't required by the specification.\\n *\\n * Finally, the non-standard {decreaseAllowance} and {increaseAllowance}\\n * functions have been added to mitigate the well-known issues around setting\\n * allowances. See {IERC20-approve}.\\n */\\ncontract ERC20 is Context, IERC20 {\\n    using SafeMath for uint256;\\n\\n    mapping (address => uint256) private _balances;\\n\\n    mapping (address => mapping (address => uint256)) private _allowances;\\n\\n    uint256 private _totalSupply;\\n\\n    string private _name;\\n    string private _symbol;\\n    uint8 private _decimals;\\n\\n    /**\\n     * @dev Sets the values for {name} and {symbol}, initializes {decimals} with\\n     * a default value of 18.\\n     *\\n     * To select a different value for {decimals}, use {_setupDecimals}.\\n     *\\n     * All three of these values are immutable: they can only be set once during\\n     * construction.\\n     */\\n    constructor (string memory name_, string memory symbol_) public {\\n        _name = name_;\\n        _symbol = symbol_;\\n        _decimals = 18;\\n    }\\n\\n    /**\\n     * @dev Returns the name of the token.\\n     */\\n    function name() public view returns (string memory) {\\n        return _name;\\n    }\\n\\n    /**\\n     * @dev Returns the symbol of the token, usually a shorter version of the\\n     * name.\\n     */\\n    function symbol() public view returns (string memory) {\\n        return _symbol;\\n    }\\n\\n    /**\\n     * @dev Returns the number of decimals used to get its user representation.\\n     * For example, if `decimals` equals `2`, a balance of `505` tokens should\\n     * be displayed to a user as `5,05` (`505 / 10 ** 2`).\\n     *\\n     * Tokens usually opt for a value of 18, imitating the relationship between\\n     * Ether and Wei. This is the value {ERC20} uses, unless {_setupDecimals} is\\n     * called.\\n     *\\n     * NOTE: This information is only used for _display_ purposes: it in\\n     * no way affects any of the arithmetic of the contract, including\\n     * {IERC20-balanceOf} and {IERC20-transfer}.\\n     */\\n    function decimals() public view returns (uint8) {\\n        return _decimals;\\n    }\\n\\n    /**\\n     * @dev See {IERC20-totalSupply}.\\n     */\\n    function totalSupply() public view override returns (uint256) {\\n        return _totalSupply;\\n    }\\n\\n    /**\\n     * @dev See {IERC20-balanceOf}.\\n     */\\n    function balanceOf(address account) public view override returns (uint256) {\\n        return _balances[account];\\n    }\\n\\n    /**\\n     * @dev See {IERC20-transfer}.\\n     *\\n     * Requirements:\\n     *\\n     * - `recipient` cannot be the zero address.\\n     * - the caller must have a balance of at least `amount`.\\n     */\\n    function transfer(address recipient, uint256 amount) public virtual override returns (bool) {\\n        _transfer(_msgSender(), recipient, amount);\\n        return true;\\n    }\\n\\n    /**\\n     * @dev See {IERC20-allowance}.\\n     */\\n    function allowance(address owner, address spender) public view virtual override returns (uint256) {\\n        return _allowances[owner][spender];\\n    }\\n\\n    /**\\n     * @dev See {IERC20-approve}.\\n     *\\n     * Requirements:\\n     *\\n     * - `spender` cannot be the zero address.\\n     */\\n    function approve(address spender, uint256 amount) public virtual override returns (bool) {\\n        _approve(_msgSender(), spender, amount);\\n        return true;\\n    }\\n\\n    /**\\n     * @dev See {IERC20-transferFrom}.\\n     *\\n     * Emits an {Approval} event indicating the updated allowance. This is not\\n     * required by the EIP. See the note at the beginning of {ERC20}.\\n     *\\n     * Requirements:\\n     *\\n     * - `sender` and `recipient` cannot be the zero address.\\n     * - `sender` must have a balance of at least `amount`.\\n     * - the caller must have allowance for ``sender``'s tokens of at least\\n     * `amount`.\\n     */\\n    function transferFrom(address sender, address recipient, uint256 amount) public virtual override returns (bool) {\\n        _transfer(sender, recipient, amount);\\n        _approve(sender, _msgSender(), _allowances[sender][_msgSender()].sub(amount, \\\"ERC20: transfer amount exceeds allowance\\\"));\\n        return true;\\n    }\\n\\n    /**\\n     * @dev Atomically increases the allowance granted to `spender` by the caller.\\n     *\\n     * This is an alternative to {approve} that can be used as a mitigation for\\n     * problems described in {IERC20-approve}.\\n     *\\n     * Emits an {Approval} event indicating the updated allowance.\\n     *\\n     * Requirements:\\n     *\\n     * - `spender` cannot be the zero address.\\n     */\\n    function increaseAllowance(address spender, uint256 addedValue) public virtual returns (bool) {\\n        _approve(_msgSender(), spender, _allowances[_msgSender()][spender].add(addedValue));\\n        return true;\\n    }\\n\\n    /**\\n     * @dev Atomically decreases the allowance granted to `spender` by the caller.\\n     *\\n     * This is an alternative to {approve} that can be used as a mitigation for\\n     * problems described in {IERC20-approve}.\\n     *\\n     * Emits an {Approval} event indicating the updated allowance.\\n     *\\n     * Requirements:\\n     *\\n     * - `spender` cannot be the zero address.\\n     * - `spender` must have allowance for the caller of at least\\n     * `subtractedValue`.\\n     */\\n    function decreaseAllowance(address spender, uint256 subtractedValue) public virtual returns (bool) {\\n        _approve(_msgSender(), spender, _allowances[_msgSender()][spender].sub(subtractedValue, \\\"ERC20: decreased allowance below zero\\\"));\\n        return true;\\n    }\\n\\n    /**\\n     * @dev Moves tokens `amount` from `sender` to `recipient`.\\n     *\\n     * This is internal function is equivalent to {transfer}, and can be used to\\n     * e.g. implement automatic token fees, slashing mechanisms, etc.\\n     *\\n     * Emits a {Transfer} event.\\n     *\\n     * Requirements:\\n     *\\n     * - `sender` cannot be the zero address.\\n     * - `recipient` cannot be the zero address.\\n     * - `sender` must have a balance of at least `amount`.\\n     */\\n    function _transfer(address sender, address recipient, uint256 amount) internal virtual {\\n        require(sender != address(0), \\\"ERC20: transfer from the zero address\\\");\\n        require(recipient != address(0), \\\"ERC20: transfer to the zero address\\\");\\n\\n        _beforeTokenTransfer(sender, recipient, amount);\\n\\n        _balances[sender] = _balances[sender].sub(amount, \\\"ERC20: transfer amount exceeds balance\\\");\\n        _balances[recipient] = _balances[recipient].add(amount);\\n        emit Transfer(sender, recipient, amount);\\n    }\\n\\n    /** @dev Creates `amount` tokens and assigns them to `account`, increasing\\n     * the total supply.\\n     *\\n     * Emits a {Transfer} event with `from` set to the zero address.\\n     *\\n     * Requirements:\\n     *\\n     * - `to` cannot be the zero address.\\n     */\\n    function _mint(address account, uint256 amount) internal virtual {\\n        require(account != address(0), \\\"ERC20: mint to the zero address\\\");\\n\\n        _beforeTokenTransfer(address(0), account, amount);\\n\\n        _totalSupply = _totalSupply.add(amount);\\n        _balances[account] = _balances[account].add(amount);\\n        emit Transfer(address(0), account, amount);\\n    }\\n\\n    /**\\n     * @dev Destroys `amount` tokens from `account`, reducing the\\n     * total supply.\\n     *\\n     * Emits a {Transfer} event with `to` set to the zero address.\\n     *\\n     * Requirements:\\n     *\\n     * - `account` cannot be the zero address.\\n     * - `account` must have at least `amount` tokens.\\n     */\\n    function _burn(address account, uint256 amount) internal virtual {\\n        require(account != address(0), \\\"ERC20: burn from the zero address\\\");\\n\\n        _beforeTokenTransfer(account, address(0), amount);\\n\\n        _balances[account] = _balances[account].sub(amount, \\\"ERC20: burn amount exceeds balance\\\");\\n        _totalSupply = _totalSupply.sub(amount);\\n        emit Transfer(account, address(0), amount);\\n    }\\n\\n    /**\\n     * @dev Sets `amount` as the allowance of `spender` over the `owner` s tokens.\\n     *\\n     * This internal function is equivalent to `approve`, and can be used to\\n     * e.g. set automatic allowances for certain subsystems, etc.\\n     *\\n     * Emits an {Approval} event.\\n     *\\n     * Requirements:\\n     *\\n     * - `owner` cannot be the zero address.\\n     * - `spender` cannot be the zero address.\\n     */\\n    function _approve(address owner, address spender, uint256 amount) internal virtual {\\n        require(owner != address(0), \\\"ERC20: approve from the zero address\\\");\\n        require(spender != address(0), \\\"ERC20: approve to the zero address\\\");\\n\\n        _allowances[owner][spender] = amount;\\n        emit Approval(owner, spender, amount);\\n    }\\n\\n    /**\\n     * @dev Sets {decimals} to a value other than the default one of 18.\\n     *\\n     * WARNING: This function should only be called from the constructor. Most\\n     * applications that interact with token contracts will not expect\\n     * {decimals} to ever change, and may work incorrectly if it does.\\n     */\\n    function _setupDecimals(uint8 decimals_) internal {\\n        _decimals = decimals_;\\n    }\\n\\n    /**\\n     * @dev Hook that is called before any transfer of tokens. This includes\\n     * minting and burning.\\n     *\\n     * Calling conditions:\\n     *\\n     * - when `from` and `to` are both non-zero, `amount` of ``from``'s tokens\\n     * will be to transferred to `to`.\\n     * - when `from` is zero, `amount` tokens will be minted for `to`.\\n     * - when `to` is zero, `amount` of ``from``'s tokens will be burned.\\n     * - `from` and `to` are never both zero.\\n     *\\n     * To learn more about hooks, head to xref:ROOT:extending-contracts.adoc#using-hooks[Using Hooks].\\n     */\\n    function _beforeTokenTransfer(address from, address to, uint256 amount) internal virtual { }\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/token/ERC20/IERC20.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity >=0.6.0 <0.8.0;\\n\\n/**\\n * @dev Interface of the ERC20 standard as defined in the EIP.\\n */\\ninterface IERC20 {\\n    /**\\n     * @dev Returns the amount of tokens in existence.\\n     */\\n    function totalSupply() external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the amount of tokens owned by `account`.\\n     */\\n    function balanceOf(address account) external view returns (uint256);\\n\\n    /**\\n     * @dev Moves `amount` tokens from the caller's account to `recipient`.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transfer(address recipient, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Returns the remaining number of tokens that `spender` will be\\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\\n     * zero by default.\\n     *\\n     * This value changes when {approve} or {transferFrom} are called.\\n     */\\n    function allowance(address owner, address spender) external view returns (uint256);\\n\\n    /**\\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\\n     * that someone may use both the old and the new allowance by unfortunate\\n     * transaction ordering. One possible solution to mitigate this race\\n     * condition is to first reduce the spender's allowance to 0 and set the\\n     * desired value afterwards:\\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address spender, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Moves `amount` tokens from `sender` to `recipient` using the\\n     * allowance mechanism. `amount` is then deducted from the caller's\\n     * allowance.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(address sender, address recipient, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\\n     * another (`to`).\\n     *\\n     * Note that `value` may be zero.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 value);\\n\\n    /**\\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\\n     * a call to {approve}. `value` is the new allowance.\\n     */\\n    event Approval(address indexed owner, address indexed spender, uint256 value);\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/math/SafeMath.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity >=0.6.0 <0.8.0;\\n\\n/**\\n * @dev Wrappers over Solidity's arithmetic operations with added overflow\\n * checks.\\n *\\n * Arithmetic operations in Solidity wrap on overflow. This can easily result\\n * in bugs, because programmers usually assume that an overflow raises an\\n * error, which is the standard behavior in high level programming languages.\\n * `SafeMath` restores this intuition by reverting the transaction when an\\n * operation overflows.\\n *\\n * Using this library instead of the unchecked operations eliminates an entire\\n * class of bugs, so it's recommended to use it always.\\n */\\nlibrary SafeMath {\\n    /**\\n     * @dev Returns the addition of two unsigned integers, reverting on\\n     * overflow.\\n     *\\n     * Counterpart to Solidity's `+` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Addition cannot overflow.\\n     */\\n    function add(uint256 a, uint256 b) internal pure returns (uint256) {\\n        uint256 c = a + b;\\n        require(c >= a, \\\"SafeMath: addition overflow\\\");\\n\\n        return c;\\n    }\\n\\n    /**\\n     * @dev Returns the subtraction of two unsigned integers, reverting on\\n     * overflow (when the result is negative).\\n     *\\n     * Counterpart to Solidity's `-` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Subtraction cannot overflow.\\n     */\\n    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return sub(a, b, \\\"SafeMath: subtraction overflow\\\");\\n    }\\n\\n    /**\\n     * @dev Returns the subtraction of two unsigned integers, reverting with custom message on\\n     * overflow (when the result is negative).\\n     *\\n     * Counterpart to Solidity's `-` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Subtraction cannot overflow.\\n     */\\n    function sub(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\\n        require(b <= a, errorMessage);\\n        uint256 c = a - b;\\n\\n        return c;\\n    }\\n\\n    /**\\n     * @dev Returns the multiplication of two unsigned integers, reverting on\\n     * overflow.\\n     *\\n     * Counterpart to Solidity's `*` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Multiplication cannot overflow.\\n     */\\n    function mul(uint256 a, uint256 b) internal pure returns (uint256) {\\n        // Gas optimization: this is cheaper than requiring 'a' not being zero, but the\\n        // benefit is lost if 'b' is also tested.\\n        // See: https://github.com/OpenZeppelin/openzeppelin-contracts/pull/522\\n        if (a == 0) {\\n            return 0;\\n        }\\n\\n        uint256 c = a * b;\\n        require(c / a == b, \\\"SafeMath: multiplication overflow\\\");\\n\\n        return c;\\n    }\\n\\n    /**\\n     * @dev Returns the integer division of two unsigned integers. Reverts on\\n     * division by zero. The result is rounded towards zero.\\n     *\\n     * Counterpart to Solidity's `/` operator. Note: this function uses a\\n     * `revert` opcode (which leaves remaining gas untouched) while Solidity\\n     * uses an invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Requirements:\\n     *\\n     * - The divisor cannot be zero.\\n     */\\n    function div(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return div(a, b, \\\"SafeMath: division by zero\\\");\\n    }\\n\\n    /**\\n     * @dev Returns the integer division of two unsigned integers. Reverts with custom message on\\n     * division by zero. The result is rounded towards zero.\\n     *\\n     * Counterpart to Solidity's `/` operator. Note: this function uses a\\n     * `revert` opcode (which leaves remaining gas untouched) while Solidity\\n     * uses an invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Requirements:\\n     *\\n     * - The divisor cannot be zero.\\n     */\\n    function div(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\\n        require(b > 0, errorMessage);\\n        uint256 c = a / b;\\n        // assert(a == b * c + a % b); // There is no case in which this doesn't hold\\n\\n        return c;\\n    }\\n\\n    /**\\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\\n     * Reverts when dividing by zero.\\n     *\\n     * Counterpart to Solidity's `%` operator. This function uses a `revert`\\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\\n     * invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Requirements:\\n     *\\n     * - The divisor cannot be zero.\\n     */\\n    function mod(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return mod(a, b, \\\"SafeMath: modulo by zero\\\");\\n    }\\n\\n    /**\\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\\n     * Reverts with custom message when dividing by zero.\\n     *\\n     * Counterpart to Solidity's `%` operator. This function uses a `revert`\\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\\n     * invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Requirements:\\n     *\\n     * - The divisor cannot be zero.\\n     */\\n    function mod(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\\n        require(b != 0, errorMessage);\\n        return a % b;\\n    }\\n}\\n\"\r\n    },\r\n    \"contracts/TomiStaking.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\npragma solidity >=0.6.6;\\n\\nimport \\\"@openzeppelin/contracts/math/Math.sol\\\";\\nimport \\\"@openzeppelin/contracts/access/Ownable.sol\\\";\\nimport \\\"@openzeppelin/contracts/math/SafeMath.sol\\\";\\nimport \\\"@openzeppelin/contracts/token/ERC20/SafeERC20.sol\\\";\\nimport \\\"@openzeppelin/contracts/utils/ReentrancyGuard.sol\\\";\\nimport \\\"@openzeppelin/contracts/utils/Pausable.sol\\\";\\nimport \\\"@openzeppelin/contracts/proxy/Initializable.sol\\\";\\n\\n\\ncontract TomiStaking is Ownable, ReentrancyGuard, Pausable, Initializable {\\n    using SafeMath for uint256;\\n    using SafeERC20 for IERC20;\\n\\n    /* ========== STATE VARIABLES ========== */\\n\\n    address public tomiPool;\\n    address public tomiGovernance;\\n    IERC20 public tomi;\\n    address public rewardsDistribution;\\n    uint256 public periodFinish;\\n    uint256 public rewardRate;\\n    uint256 public rewardsDuration = 7 days;\\n    uint256 public lastUpdateTime;\\n    uint256 public rewardPerTokenStored;\\n    uint256 public timestampNotify;\\n\\n    mapping(address => uint256) public userRewardPerTokenPaid;\\n    mapping(address => uint256) public rewards;\\n\\n    uint256 private _totalSupply;\\n    uint256 private _totalRevenueShared;\\n    uint256 private _revenueShared;\\n    uint256 private _accAmountPerRevenueShared;\\n\\n\\n    mapping(address => uint256) private _balances;\\n    mapping(address => uint256) private _rewardDebts;\\n\\n    /* ========== CONSTRUCTOR ========== */\\n\\n    constructor(address _rewardsDistribution) public {\\n        rewardsDistribution = _rewardsDistribution;\\n    }\\n\\n    function initialize(address _tomiToken, address _tomiPool, address _tomiGovernance) external initializer {\\n        tomi = IERC20(_tomiToken);\\n        tomiPool = _tomiPool;\\n        tomiGovernance = _tomiGovernance;\\n    }\\n\\n    /* ========== VIEWS ========== */\\n\\n    function totalSupply() external view returns (uint256) {\\n        return _totalSupply;\\n    }\\n\\n    function balanceOf(address account) external view returns (uint256) {\\n        return _balances[account];\\n    }\\n\\n    function lastTimeRewardApplicable() public view returns (uint256) {\\n        return Math.min(block.timestamp, periodFinish);\\n    }\\n\\n    function rewardPerToken() public view returns (uint256) {\\n        if (_totalSupply == 0) {\\n            return rewardPerTokenStored;\\n        }\\n        return\\n            rewardPerTokenStored.add(\\n                lastTimeRewardApplicable()\\n                    .sub(lastUpdateTime)\\n                    .mul(rewardRate)\\n                    .mul(1e18)\\n                    .div(_totalSupply)\\n            );\\n    }\\n\\n    // FE functions\\n    function earned(address account) public view returns (uint256) {\\n        return\\n            _balances[account]\\n                .mul(rewardPerToken().sub(userRewardPerTokenPaid[account]))\\n                .div(1e18)\\n                .add(rewards[account]);\\n    }\\n\\n    // FE functions\\n    function getRewardRevenueShare(address account)\\n        public\\n        view\\n        returns (uint256)\\n    {\\n        if (_balances[account] == 0) return 0;\\n\\n        return _balances[account].mul(_accAmountPerRevenueShared).sub(_rewardDebts[account]).div(1e18);\\n    }\\n\\n    function getTotalRevenueShare() external view returns (uint256) {\\n        return _totalRevenueShared;\\n    }\\n\\n    function getRewardForDuration() external view returns (uint256) {\\n        return rewardRate.mul(rewardsDuration);\\n    }\\n\\n    function getTotalRewardPool() external view returns (uint256) {\\n        if (periodFinish <= 0) return 0;\\n        uint256 remainRewardCommunityPool = (periodFinish.sub(block.timestamp)).mul(rewardRate.mul(rewardsDuration)).div(rewardsDuration);\\n        return _revenueShared.add(remainRewardCommunityPool);\\n    }\\n\\n    function stake(uint256 amount)\\n        external\\n        nonReentrant\\n        whenNotPaused\\n        updateReward(msg.sender)\\n    {\\n        require(amount > 0, \\\"TomiStaking: cannot stake 0\\\");\\n        _totalSupply = _totalSupply.add(amount);\\n        _balances[msg.sender] = _balances[msg.sender].add(amount);\\n        _rewardDebts[msg.sender] = _balances[msg.sender].mul(_accAmountPerRevenueShared);\\n\\n        tomi.safeTransferFrom(msg.sender, address(this), amount);\\n        emit Staked(msg.sender, amount);\\n    }\\n\\n    function withdraw(uint256 amount)\\n        public\\n        nonReentrant\\n        updateReward(msg.sender)\\n    {\\n        require(amount > 0, \\\"TomiStaking: cannot withdraw 0\\\");\\n        require(_balances[msg.sender] > 0, \\\"TomiStaking: balance must greater than 0\\\");\\n        _totalSupply = _totalSupply.sub(amount);\\n        _balances[msg.sender] = _balances[msg.sender].sub(amount);\\n        _rewardDebts[msg.sender] = _balances[msg.sender].mul(_accAmountPerRevenueShared);\\n        tomi.safeTransfer(msg.sender, amount);\\n        emit Withdrawn(msg.sender, amount);\\n    }\\n\\n    function claimReward() public nonReentrant updateReward(msg.sender) {\\n        uint256 reward = rewards[msg.sender];\\n\\n        _rewardDebts[msg.sender] = _balances[msg.sender].mul(_accAmountPerRevenueShared);\\n\\n        if (reward > 0) {\\n            rewards[msg.sender] = 0;\\n            tomi.safeTransfer(msg.sender, reward);\\n            emit RewardPaid(msg.sender, reward);\\n        }\\n    }\\n\\n    function exit() external {\\n        withdraw(_balances[msg.sender]);\\n        claimReward();\\n    }\\n\\n    /* ========== RESTRICTED FUNCTIONS ========== */\\n\\n    function pause() external onlyOwner {\\n        _pause();\\n    }\\n\\n    function unpause() external onlyOwner {\\n        _unpause();\\n    }\\n\\n    function updateRevenueShare(uint256 revenueShared) external PoolAndGovernance {\\n        _totalRevenueShared = _totalRevenueShared.add(revenueShared);\\n        _revenueShared = _revenueShared.add(revenueShared);\\n        if (_totalSupply != 0) {\\n            _accAmountPerRevenueShared = _accAmountPerRevenueShared.add(revenueShared.div(_totalSupply).mul(1e18));\\n        }\\n    }\\n\\n    function setRewardsDuration(uint256 _rewardsDuration)\\n        external\\n        onlyRewardsDistribution\\n    {\\n        require(\\n            block.timestamp > periodFinish,\\n            \\\"Previous rewards period must be complete before changing the duration for the new period\\\"\\n        );\\n        rewardsDuration = _rewardsDuration;\\n        emit RewardsDurationUpdated(rewardsDuration);\\n    }\\n\\n    function notifyRewardAmount(uint256 reward)\\n        external\\n        onlyRewardsDistribution\\n        updateReward(address(0))\\n    {\\n        if (block.timestamp >= periodFinish) {\\n            rewardRate = reward.div(rewardsDuration);\\n        } else {\\n            uint256 remaining = periodFinish.sub(block.timestamp);\\n            uint256 leftover = remaining.mul(rewardRate);\\n            rewardRate = reward.add(leftover).div(rewardsDuration);\\n        }\\n\\n        // Ensure the provided reward amount is not more than the balance in the contract.\\n        // This keeps the reward rate in the right range, preventing overflows due to\\n        // very high values of rewardRate in the earned and rewardsPerToken functions;\\n        // Reward + leftover must be less than 2^256 / 10^18 to avoid overflow.\\n        uint256 balance = tomi.balanceOf(address(this));\\n        require(\\n            rewardRate <= balance.div(rewardsDuration),\\n            \\\"Provided reward too high\\\"\\n        );\\n\\n        lastUpdateTime = block.timestamp;\\n        periodFinish = block.timestamp.add(rewardsDuration);\\n        emit RewardAdded(reward);\\n    }\\n\\n    function recoverERC20(address tokenAddress, uint256 tokenAmount) external onlyOwner {\\n      require (tokenAddress != address(tomi), \\\"TomiStaking: cannot withdraw the staking token\\\");\\n      IERC20(tokenAddress).safeTransfer(owner(), tokenAmount);\\n    }\\n\\n    function transferTomiGovernance(address newTomiGovernance) external onlyOwner {\\n        require(newTomiGovernance != address(0), \\\"New TomiGovernance is the zero address\\\");\\n        tomiGovernance = newTomiGovernance;\\n    }\\n\\n    function transferTomiPool(address newTomiPool) external onlyOwner {\\n        require(newTomiPool != address(0), \\\"New TomiPool is the zero address\\\");\\n        tomiPool = newTomiPool;\\n    }\\n\\n    /* ========== MODIFIERS ========== */\\n\\n    modifier onlyRewardsDistribution() {\\n        require(\\n            msg.sender == rewardsDistribution,\\n            \\\"TomiStaking: caller is not reward distribution\\\"\\n        );\\n        _;\\n    }\\n\\n    modifier PoolAndGovernance() {\\n        require((msg.sender == tomiPool) || (msg.sender == tomiGovernance), \\\"TomiStaking: caller is not TomiPool or TomiGovernance\\\");\\n        _;\\n    }\\n\\n    modifier updateReward(address account) {\\n        rewardPerTokenStored = rewardPerToken();\\n        lastUpdateTime = lastTimeRewardApplicable();\\n        if (account != address(0)) {\\n            uint256 rewardRevenueShared = getRewardRevenueShare(account);\\n            _revenueShared = _revenueShared.sub(rewardRevenueShared);\\n            rewards[account] = earned(account).add(rewardRevenueShared);\\n            userRewardPerTokenPaid[account] = rewardPerTokenStored;\\n            _rewardDebts[account] = rewardRevenueShared;\\n        }\\n        _;\\n    }\\n\\n    /* ========== EVENTS ========== */\\n\\n    event RewardAdded(uint256 reward);\\n    event RewardsDurationUpdated(uint256 newDuration);\\n    event Staked(address indexed user, uint256 amount);\\n    event Withdrawn(address indexed user, uint256 amount);\\n    event RewardPaid(address indexed user, uint256 reward);\\n}\"\r\n    },\r\n    \"@openzeppelin/contracts/math/Math.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity >=0.6.0 <0.8.0;\\n\\n/**\\n * @dev Standard math utilities missing in the Solidity language.\\n */\\nlibrary Math {\\n    /**\\n     * @dev Returns the largest of two numbers.\\n     */\\n    function max(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a >= b ? a : b;\\n    }\\n\\n    /**\\n     * @dev Returns the smallest of two numbers.\\n     */\\n    function min(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a < b ? a : b;\\n    }\\n\\n    /**\\n     * @dev Returns the average of two numbers. The result is rounded towards\\n     * zero.\\n     */\\n    function average(uint256 a, uint256 b) internal pure returns (uint256) {\\n        // (a + b) / 2 can overflow, so we distribute\\n        return (a / 2) + (b / 2) + ((a % 2 + b % 2) / 2);\\n    }\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/access/Ownable.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity >=0.6.0 <0.8.0;\\n\\nimport \\\"../GSN/Context.sol\\\";\\n/**\\n * @dev Contract module which provides a basic access control mechanism, where\\n * there is an account (an owner) that can be granted exclusive access to\\n * specific functions.\\n *\\n * By default, the owner account will be the one that deploys the contract. This\\n * can later be changed with {transferOwnership}.\\n *\\n * This module is used through inheritance. It will make available the modifier\\n * `onlyOwner`, which can be applied to your functions to restrict their use to\\n * the owner.\\n */\\nabstract contract Ownable is Context {\\n    address private _owner;\\n\\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\\n\\n    /**\\n     * @dev Initializes the contract setting the deployer as the initial owner.\\n     */\\n    constructor () internal {\\n        address msgSender = _msgSender();\\n        _owner = msgSender;\\n        emit OwnershipTransferred(address(0), msgSender);\\n    }\\n\\n    /**\\n     * @dev Returns the address of the current owner.\\n     */\\n    function owner() public view returns (address) {\\n        return _owner;\\n    }\\n\\n    /**\\n     * @dev Throws if called by any account other than the owner.\\n     */\\n    modifier onlyOwner() {\\n        require(_owner == _msgSender(), \\\"Ownable: caller is not the owner\\\");\\n        _;\\n    }\\n\\n    /**\\n     * @dev Leaves the contract without owner. It will not be possible to call\\n     * `onlyOwner` functions anymore. Can only be called by the current owner.\\n     *\\n     * NOTE: Renouncing ownership will leave the contract without an owner,\\n     * thereby removing any functionality that is only available to the owner.\\n     */\\n    function renounceOwnership() public virtual onlyOwner {\\n        emit OwnershipTransferred(_owner, address(0));\\n        _owner = address(0);\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Can only be called by the current owner.\\n     */\\n    function transferOwnership(address newOwner) public virtual onlyOwner {\\n        require(newOwner != address(0), \\\"Ownable: new owner is the zero address\\\");\\n        emit OwnershipTransferred(_owner, newOwner);\\n        _owner = newOwner;\\n    }\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/token/ERC20/SafeERC20.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity >=0.6.0 <0.8.0;\\n\\nimport \\\"./IERC20.sol\\\";\\nimport \\\"../../math/SafeMath.sol\\\";\\nimport \\\"../../utils/Address.sol\\\";\\n\\n/**\\n * @title SafeERC20\\n * @dev Wrappers around ERC20 operations that throw on failure (when the token\\n * contract returns false). Tokens that return no value (and instead revert or\\n * throw on failure) are also supported, non-reverting calls are assumed to be\\n * successful.\\n * To use this library you can add a `using SafeERC20 for IERC20;` statement to your contract,\\n * which allows you to call the safe operations as `token.safeTransfer(...)`, etc.\\n */\\nlibrary SafeERC20 {\\n    using SafeMath for uint256;\\n    using Address for address;\\n\\n    function safeTransfer(IERC20 token, address to, uint256 value) internal {\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.transfer.selector, to, value));\\n    }\\n\\n    function safeTransferFrom(IERC20 token, address from, address to, uint256 value) internal {\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.transferFrom.selector, from, to, value));\\n    }\\n\\n    /**\\n     * @dev Deprecated. This function has issues similar to the ones found in\\n     * {IERC20-approve}, and its usage is discouraged.\\n     *\\n     * Whenever possible, use {safeIncreaseAllowance} and\\n     * {safeDecreaseAllowance} instead.\\n     */\\n    function safeApprove(IERC20 token, address spender, uint256 value) internal {\\n        // safeApprove should only be called when setting an initial allowance,\\n        // or when resetting it to zero. To increase and decrease it, use\\n        // 'safeIncreaseAllowance' and 'safeDecreaseAllowance'\\n        // solhint-disable-next-line max-line-length\\n        require((value == 0) || (token.allowance(address(this), spender) == 0),\\n            \\\"SafeERC20: approve from non-zero to non-zero allowance\\\"\\n        );\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, value));\\n    }\\n\\n    function safeIncreaseAllowance(IERC20 token, address spender, uint256 value) internal {\\n        uint256 newAllowance = token.allowance(address(this), spender).add(value);\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));\\n    }\\n\\n    function safeDecreaseAllowance(IERC20 token, address spender, uint256 value) internal {\\n        uint256 newAllowance = token.allowance(address(this), spender).sub(value, \\\"SafeERC20: decreased allowance below zero\\\");\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));\\n    }\\n\\n    /**\\n     * @dev Imitates a Solidity high-level call (i.e. a regular function call to a contract), relaxing the requirement\\n     * on the return value: the return value is optional (but if data is returned, it must not be false).\\n     * @param token The token targeted by the call.\\n     * @param data The call data (encoded using abi.encode or one of its variants).\\n     */\\n    function _callOptionalReturn(IERC20 token, bytes memory data) private {\\n        // We need to perform a low level call here, to bypass Solidity's return data size checking mechanism, since\\n        // we're implementing it ourselves. We use {Address.functionCall} to perform this call, which verifies that\\n        // the target address contains contract code and also asserts for success in the low-level call.\\n\\n        bytes memory returndata = address(token).functionCall(data, \\\"SafeERC20: low-level call failed\\\");\\n        if (returndata.length > 0) { // Return data is optional\\n            // solhint-disable-next-line max-line-length\\n            require(abi.decode(returndata, (bool)), \\\"SafeERC20: ERC20 operation did not succeed\\\");\\n        }\\n    }\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/utils/ReentrancyGuard.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity >=0.6.0 <0.8.0;\\n\\n/**\\n * @dev Contract module that helps prevent reentrant calls to a function.\\n *\\n * Inheriting from `ReentrancyGuard` will make the {nonReentrant} modifier\\n * available, which can be applied to functions to make sure there are no nested\\n * (reentrant) calls to them.\\n *\\n * Note that because there is a single `nonReentrant` guard, functions marked as\\n * `nonReentrant` may not call one another. This can be worked around by making\\n * those functions `private`, and then adding `external` `nonReentrant` entry\\n * points to them.\\n *\\n * TIP: If you would like to learn more about reentrancy and alternative ways\\n * to protect against it, check out our blog post\\n * https://blog.openzeppelin.com/reentrancy-after-istanbul/[Reentrancy After Istanbul].\\n */\\nabstract contract ReentrancyGuard {\\n    // Booleans are more expensive than uint256 or any type that takes up a full\\n    // word because each write operation emits an extra SLOAD to first read the\\n    // slot's contents, replace the bits taken up by the boolean, and then write\\n    // back. This is the compiler's defense against contract upgrades and\\n    // pointer aliasing, and it cannot be disabled.\\n\\n    // The values being non-zero value makes deployment a bit more expensive,\\n    // but in exchange the refund on every call to nonReentrant will be lower in\\n    // amount. Since refunds are capped to a percentage of the total\\n    // transaction's gas, it is best to keep them low in cases like this one, to\\n    // increase the likelihood of the full refund coming into effect.\\n    uint256 private constant _NOT_ENTERED = 1;\\n    uint256 private constant _ENTERED = 2;\\n\\n    uint256 private _status;\\n\\n    constructor () internal {\\n        _status = _NOT_ENTERED;\\n    }\\n\\n    /**\\n     * @dev Prevents a contract from calling itself, directly or indirectly.\\n     * Calling a `nonReentrant` function from another `nonReentrant`\\n     * function is not supported. It is possible to prevent this from happening\\n     * by making the `nonReentrant` function external, and make it call a\\n     * `private` function that does the actual work.\\n     */\\n    modifier nonReentrant() {\\n        // On the first call to nonReentrant, _notEntered will be true\\n        require(_status != _ENTERED, \\\"ReentrancyGuard: reentrant call\\\");\\n\\n        // Any calls to nonReentrant after this point will fail\\n        _status = _ENTERED;\\n\\n        _;\\n\\n        // By storing the original value once again, a refund is triggered (see\\n        // https://eips.ethereum.org/EIPS/eip-2200)\\n        _status = _NOT_ENTERED;\\n    }\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/utils/Pausable.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity >=0.6.0 <0.8.0;\\n\\nimport \\\"../GSN/Context.sol\\\";\\n\\n/**\\n * @dev Contract module which allows children to implement an emergency stop\\n * mechanism that can be triggered by an authorized account.\\n *\\n * This module is used through inheritance. It will make available the\\n * modifiers `whenNotPaused` and `whenPaused`, which can be applied to\\n * the functions of your contract. Note that they will not be pausable by\\n * simply including this module, only once the modifiers are put in place.\\n */\\nabstract contract Pausable is Context {\\n    /**\\n     * @dev Emitted when the pause is triggered by `account`.\\n     */\\n    event Paused(address account);\\n\\n    /**\\n     * @dev Emitted when the pause is lifted by `account`.\\n     */\\n    event Unpaused(address account);\\n\\n    bool private _paused;\\n\\n    /**\\n     * @dev Initializes the contract in unpaused state.\\n     */\\n    constructor () internal {\\n        _paused = false;\\n    }\\n\\n    /**\\n     * @dev Returns true if the contract is paused, and false otherwise.\\n     */\\n    function paused() public view returns (bool) {\\n        return _paused;\\n    }\\n\\n    /**\\n     * @dev Modifier to make a function callable only when the contract is not paused.\\n     *\\n     * Requirements:\\n     *\\n     * - The contract must not be paused.\\n     */\\n    modifier whenNotPaused() {\\n        require(!_paused, \\\"Pausable: paused\\\");\\n        _;\\n    }\\n\\n    /**\\n     * @dev Modifier to make a function callable only when the contract is paused.\\n     *\\n     * Requirements:\\n     *\\n     * - The contract must be paused.\\n     */\\n    modifier whenPaused() {\\n        require(_paused, \\\"Pausable: not paused\\\");\\n        _;\\n    }\\n\\n    /**\\n     * @dev Triggers stopped state.\\n     *\\n     * Requirements:\\n     *\\n     * - The contract must not be paused.\\n     */\\n    function _pause() internal virtual whenNotPaused {\\n        _paused = true;\\n        emit Paused(_msgSender());\\n    }\\n\\n    /**\\n     * @dev Returns to normal state.\\n     *\\n     * Requirements:\\n     *\\n     * - The contract must be paused.\\n     */\\n    function _unpause() internal virtual whenPaused {\\n        _paused = false;\\n        emit Unpaused(_msgSender());\\n    }\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/proxy/Initializable.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\n// solhint-disable-next-line compiler-version\\npragma solidity >=0.4.24 <0.8.0;\\n\\n\\n/**\\n * @dev This is a base contract to aid in writing upgradeable contracts, or any kind of contract that will be deployed\\n * behind a proxy. Since a proxied contract can't have a constructor, it's common to move constructor logic to an\\n * external initializer function, usually called `initialize`. It then becomes necessary to protect this initializer\\n * function so it can only be called once. The {initializer} modifier provided by this contract will have this effect.\\n * \\n * TIP: To avoid leaving the proxy in an uninitialized state, the initializer function should be called as early as\\n * possible by providing the encoded function call as the `_data` argument to {UpgradeableProxy-constructor}.\\n * \\n * CAUTION: When used with inheritance, manual care must be taken to not invoke a parent initializer twice, or to ensure\\n * that all initializers are idempotent. This is not verified automatically as constructors are by Solidity.\\n */\\nabstract contract Initializable {\\n\\n    /**\\n     * @dev Indicates that the contract has been initialized.\\n     */\\n    bool private _initialized;\\n\\n    /**\\n     * @dev Indicates that the contract is in the process of being initialized.\\n     */\\n    bool private _initializing;\\n\\n    /**\\n     * @dev Modifier to protect an initializer function from being invoked twice.\\n     */\\n    modifier initializer() {\\n        require(_initializing || _isConstructor() || !_initialized, \\\"Initializable: contract is already initialized\\\");\\n\\n        bool isTopLevelCall = !_initializing;\\n        if (isTopLevelCall) {\\n            _initializing = true;\\n            _initialized = true;\\n        }\\n\\n        _;\\n\\n        if (isTopLevelCall) {\\n            _initializing = false;\\n        }\\n    }\\n\\n    /// @dev Returns true if and only if the function is running in the constructor\\n    function _isConstructor() private view returns (bool) {\\n        // extcodesize checks the size of the code stored in an address, and\\n        // address returns the current address. Since the code is still not\\n        // deployed when running a constructor, any checks on its code size will\\n        // yield zero, making it an effective way to detect if a contract is\\n        // under construction or not.\\n        address self = address(this);\\n        uint256 cs;\\n        // solhint-disable-next-line no-inline-assembly\\n        assembly { cs := extcodesize(self) }\\n        return cs == 0;\\n    }\\n}\\n\"\r\n    },\r\n    \"contracts/modules/TokenLocker.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\npragma solidity >=0.6.6;\\n\\nimport '@openzeppelin/contracts/access/Ownable.sol';\\nimport '@openzeppelin/contracts/math/SafeMath.sol';\\nimport '@openzeppelin/contracts/token/ERC20/IERC20.sol';\\nimport '@openzeppelin/contracts/token/ERC20/SafeERC20.sol';\\nimport '@openzeppelin/contracts/utils/ReentrancyGuard.sol';\\nimport '@openzeppelin/contracts/cryptography/MerkleProof.sol';\\n\\ninterface ITokenLocker {\\n    function merkleRoot() external view returns (bytes32);\\n\\n    function lockOf(address _account) external view returns (uint256);\\n\\n    function released(address _account) external view returns (uint256);\\n\\n    function canUnlockAmount(address _account) external view returns (uint256);\\n\\n    function firstUnlockAmount(uint256 _lockAmount) external view returns (uint256);\\n\\n    function unlock(address _account) external;\\n\\n    function firstUnlock(\\n        uint256 _index,\\n        address _account,\\n        uint256 _amount,\\n        bytes32[] calldata _merkleProof\\n    ) external;\\n}\\n\\ncontract TokenLocker is ITokenLocker, Ownable, ReentrancyGuard {\\n    using SafeMath for uint256;\\n    using SafeERC20 for IERC20;\\n\\n    IERC20 public token;\\n\\n    uint256 public startReleaseTimestamp;\\n    uint256 public endReleaseTimestamp;\\n\\n    mapping(address => uint256) private _locks;\\n    mapping(address => uint256) private _released;\\n\\n    bytes32 public override merkleRoot;\\n\\n    event Lock(address indexed to, uint256 value);\\n    event UnLock(address indexed to, uint256 value);\\n\\n    constructor(\\n        IERC20 _token,\\n        uint256 _startReleaseTimestamp,\\n        uint256 _endReleaseTimestamp,\\n        bytes32 _merkleRoot\\n    ) public {\\n        require(_endReleaseTimestamp > _startReleaseTimestamp, 'endReleaseTimestamp < startReleaseTimestamp');\\n        token = _token;\\n        startReleaseTimestamp = _startReleaseTimestamp;\\n        endReleaseTimestamp = _endReleaseTimestamp;\\n        merkleRoot = _merkleRoot;\\n    }\\n\\n    function lockOf(address _account) external view override returns (uint256) {\\n        return _locks[_account];\\n    }\\n\\n    function released(address _account) external view override returns (uint256) {\\n        return _released[_account];\\n    }\\n\\n    function canUnlockAmount(address _account) public view override returns (uint256) {\\n        uint256 timestamp = block.timestamp;\\n        if (timestamp < startReleaseTimestamp) {\\n            return 0;\\n        } else if (timestamp >= endReleaseTimestamp) {\\n            return _locks[_account].sub(_released[_account]);\\n        } else {\\n            uint256 _releasedTime = timestamp.sub(startReleaseTimestamp);\\n            uint256 _totalVestingTime = endReleaseTimestamp.sub(startReleaseTimestamp);\\n            return _locks[_account].mul(_releasedTime).div(_totalVestingTime).sub(_released[_account]);\\n        }\\n    }\\n\\n    function firstUnlockAmount(uint256 _lockAmount) public view override returns (uint256) {\\n        uint256 timestamp = block.timestamp;\\n        if (timestamp < startReleaseTimestamp) {\\n            return 0;\\n        } else if (timestamp >= endReleaseTimestamp) {\\n            return _lockAmount;\\n        } else {\\n            uint256 _releasedTime = timestamp.sub(startReleaseTimestamp);\\n            uint256 _totalVestingTime = endReleaseTimestamp.sub(startReleaseTimestamp);\\n            return _lockAmount.mul(_releasedTime).div(_totalVestingTime);\\n        }\\n    }\\n\\n    function firstUnlock(\\n        uint256 _index,\\n        address _account,\\n        uint256 _amount,\\n        bytes32[] calldata _merkleProof\\n    ) external override nonReentrant {\\n        require(block.timestamp > startReleaseTimestamp, 'still locked');\\n        require(_locks[_account] == 0, 'User claimed once');\\n        // Verify the merkle proof.\\n        bytes32 node = keccak256(abi.encodePacked(_index, _account, _amount));\\n        require(MerkleProof.verify(_merkleProof, merkleRoot, node), 'MerkleDistributor: Invalid proof.');\\n        _setLockAmount(_account, _amount);\\n        _unlock(_account);\\n    }\\n\\n    function unlock(address _account) public override nonReentrant {\\n        require(block.timestamp > startReleaseTimestamp, 'still locked');\\n        require(_locks[_account] > _released[_account], 'no locked');\\n        _unlock(_account);\\n    }\\n\\n    function setLockAmount(address _account, uint256 _amount) external onlyOwner {\\n        _setLockAmount(_account, _amount);\\n    }\\n\\n    function updateRoot(bytes32 _merkleRoot) external onlyOwner {\\n        merkleRoot = _merkleRoot;\\n    }\\n\\n    function emergencyWithdraw(IERC20 _token, uint256 _amount) external onlyOwner {\\n        _safeTransfer(_token, owner(), _amount);\\n    }\\n\\n    function _safeTransfer(\\n        IERC20 _token,\\n        address _to,\\n        uint256 _amount\\n    ) internal {\\n        if (_token == IERC20(0)) {\\n            (bool success, ) = _to.call{value: _amount}('');\\n            require(success, 'transfer failed');\\n        } else {\\n            _token.safeTransfer(_to, _amount);\\n        }\\n    }\\n\\n    function _unlock(address _account) internal {\\n        uint256 _amount = canUnlockAmount(_account);\\n\\n        require(_amount > 0, 'zero unlock');\\n\\n        token.safeTransfer(_account, _amount);\\n        _released[_account] = _released[_account].add(_amount);\\n        emit UnLock(_account, _amount);\\n    }\\n\\n    function _setLockAmount(address _account, uint256 _amount) internal {\\n        _locks[_account] = _amount;\\n        emit Lock(_account, _amount);\\n    }\\n}\"\r\n    },\r\n    \"@openzeppelin/contracts/cryptography/MerkleProof.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity >=0.6.0 <0.8.0;\\n\\n/**\\n * @dev These functions deal with verification of Merkle trees (hash trees),\\n */\\nlibrary MerkleProof {\\n    /**\\n     * @dev Returns true if a `leaf` can be proved to be a part of a Merkle tree\\n     * defined by `root`. For this, a `proof` must be provided, containing\\n     * sibling hashes on the branch from the leaf to the root of the tree. Each\\n     * pair of leaves and each pair of pre-images are assumed to be sorted.\\n     */\\n    function verify(bytes32[] memory proof, bytes32 root, bytes32 leaf) internal pure returns (bool) {\\n        bytes32 computedHash = leaf;\\n\\n        for (uint256 i = 0; i < proof.length; i++) {\\n            bytes32 proofElement = proof[i];\\n\\n            if (computedHash <= proofElement) {\\n                // Hash(current computed hash + current element of the proof)\\n                computedHash = keccak256(abi.encodePacked(computedHash, proofElement));\\n            } else {\\n                // Hash(current element of the proof + current computed hash)\\n                computedHash = keccak256(abi.encodePacked(proofElement, computedHash));\\n            }\\n        }\\n\\n        // Check if the computed hash (root) is equal to the provided root\\n        return computedHash == root;\\n    }\\n}\\n\"\r\n    },\r\n    \"contracts/TomiToken.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\npragma solidity 0.6.6;\\n\\nimport \\\"@openzeppelin/contracts/token/ERC20/ERC20.sol\\\";\\n\\ncontract TomiToken is ERC20 {\\n    uint8 private constant COMMUNITY_INDEX = 0;\\n    uint8 private constant DEVELOPMENT_INDEX = 1;\\n    uint8 private constant LIQUIDITY_INDEX = 2;\\n    uint8 private constant COMMUNITY_LOCKER1_INDEX = 3;\\n    uint8 private constant COMMUNITY_LOCKER2_INDEX = 4;\\n    uint8 private constant INVALID_INDEX = 5;\\n\\n    // 1500 M total supply\\n    uint256[5] private _pools_amount = [\\n        250 * 10**(6 + 18), // COMMUNITY_SUPPLY_AT_LAUCH, // 250 M at lauch date\\n        250 * 10**(6 + 18), // DEVELOPMENT_SUPPLY,\\n        750 * 10**(6 + 18), // LIQUIDITY_SUPPLY,\\n        150 * 10**(6 + 18), // COMMUNITY_LOCKER1_SUPPLY, 150M 2nd year – June 25th, 2022\\n        100 * 10**(6 + 18) // COMMUNITY_LOCKER2_SUPPLY, 100M 3rd year – June 25th 2023\\n    ];\\n\\n    bool[5] public _minted_pool;\\n    address private _owner;\\n\\n    constructor(\\n        address community,\\n        address develop,\\n        address liquidity\\n    ) public ERC20(\\\"TOMI\\\", \\\"TOMI\\\") {\\n        require(community != address(0), \\\"TomiToken: ZERO ADDRESS\\\");\\n        require(develop != address(0), \\\"TomiToken: ZERO ADDRESS\\\");\\n        require(liquidity != address(0), \\\"TomiToken: ZERO ADDRESS\\\");\\n\\n        _owner = msg.sender;\\n\\n        _mint(community, _pools_amount[COMMUNITY_INDEX]);\\n        _minted_pool[COMMUNITY_INDEX] = true;\\n\\n        _mint(develop, _pools_amount[DEVELOPMENT_INDEX]);\\n        _minted_pool[DEVELOPMENT_INDEX] = true;\\n\\n        _mint(liquidity, _pools_amount[LIQUIDITY_INDEX]);\\n        _minted_pool[LIQUIDITY_INDEX] = true;\\n\\n        _minted_pool[COMMUNITY_LOCKER1_INDEX] = false;\\n        _minted_pool[COMMUNITY_LOCKER2_INDEX] = false;\\n    }\\n\\n    function addLocker(uint8 pool_index, address pool_address) external {\\n        require(msg.sender == _owner);\\n        require(pool_address != address(0), \\\"TomiToken: ZERO ADDRESS\\\");\\n        require(pool_index >= COMMUNITY_LOCKER1_INDEX);\\n        require(pool_index <= COMMUNITY_LOCKER2_INDEX);\\n        require(_minted_pool[pool_index] == false);\\n\\n        _mint(pool_address, _pools_amount[pool_index]);\\n        _minted_pool[pool_index] = true;\\n    }\\n}\\n\"\r\n    },\r\n    \"contracts/modules/ERC20Token.sol\": {\r\n      \"content\": \"pragma solidity >=0.5.16;\\n\\nimport '../libraries/SafeMath.sol';\\n\\ncontract ERC20Token {\\n    using SafeMath for uint;\\n\\n    string public name;\\n    string public symbol;\\n    uint8 public decimals = 18;\\n    uint public totalSupply;\\n    mapping(address => uint) public balanceOf;\\n    mapping(address => mapping(address => uint)) public allowance;\\n\\n    event Transfer(address indexed from, address indexed to, uint value);\\n    event Approval(address indexed owner, address indexed spender, uint value);\\n\\n    function _transfer(address from, address to, uint value) private {\\n        require(balanceOf[from] >= value, 'ERC20Token: INSUFFICIENT_BALANCE');\\n        balanceOf[from] = balanceOf[from].sub(value);\\n        balanceOf[to] = balanceOf[to].add(value);\\n        if (to == address(0)) { // burn\\n            totalSupply = totalSupply.sub(value);\\n        }\\n        emit Transfer(from, to, value);\\n    }\\n\\n    function approve(address spender, uint value) external returns (bool) {\\n        allowance[msg.sender][spender] = value;\\n        emit Approval(msg.sender, spender, value);\\n        return true;\\n    }\\n\\n    function transfer(address to, uint value) external returns (bool) {\\n        _transfer(msg.sender, to, value);\\n        return true;\\n    }\\n\\n    function transferFrom(address from, address to, uint value) external returns (bool) {\\n        require(allowance[from][msg.sender] >= value, 'ERC20Token: INSUFFICIENT_ALLOWANCE');\\n        allowance[from][msg.sender] = allowance[from][msg.sender].sub(value);\\n        _transfer(from, to, value);\\n        return true;\\n    }\\n\\n}\\n\"\r\n    },\r\n    \"contracts/test/ERC20.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\npragma solidity >=0.5.16;\\n\\nimport '../modules/ERC20Token.sol';\\n\\ncontract ERC20 is ERC20Token {\\n    constructor(uint _totalSupply, string memory _name, string memory _symbol) public {\\n        name = _name;\\n        symbol = _symbol;\\n        totalSupply = _totalSupply;\\n        balanceOf[msg.sender] = totalSupply;\\n    }\\n}\\n\"\r\n    },\r\n    \"contracts/TomiQueryV2.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\npragma solidity >= 0.5.1;\\n\\nimport \\\"hardhat/console.sol\\\";\\n\\nstruct Config {\\n        uint minValue;\\n        uint maxValue;\\n        uint maxSpan;\\n        uint value;\\n        uint enable;  // 0:disable, 1: enable\\n    }\\n\\ninterface IERC20 {\\n    event Approval(address indexed owner, address indexed spender, uint value);\\n    event Transfer(address indexed from, address indexed to, uint value);\\n\\n    function name() external view returns (string memory);\\n    function symbol() external view returns (string memory);\\n    function decimals() external view returns (uint8);\\n    function totalSupply() external view returns (uint);\\n    function balanceOf(address owner) external view returns (uint);\\n    function allowance(address owner, address spender) external view returns (uint);\\n\\n    function approve(address spender, uint value) external returns (bool);\\n    function transfer(address to, uint value) external returns (bool);\\n    function transferFrom(address from, address to, uint value) external returns (bool);\\n}\\n\\ninterface ITomiConfig {\\n    function tokenCount() external view returns(uint);\\n    function tokenList(uint index) external view returns(address);\\n    function getConfigValue(bytes32 _name) external view returns (uint);\\n    function configs(bytes32 name) external view returns(Config memory);\\n    function tokenStatus(address token) external view returns(uint);\\n}\\n\\ninterface ITomiPlatform {\\n    function existPair(address tokenA, address tokenB) external view returns (bool);\\n    function swapPrecondition(address token) external view returns (bool);\\n    function getReserves(address tokenA, address tokenB) external view returns (uint256, uint256);\\n}\\n\\ninterface ITomiFactory {\\n    function getPair(address tokenA, address tokenB) external view returns(address);\\n}\\n\\ninterface ITomiDelegate {\\n    function getPlayerPairCount(address player) external view returns(uint);\\n    function playerPairs(address user, uint index) external view returns(address);\\n}\\n\\ninterface ITomiLP {\\n    function tokenA() external view returns (address);\\n    function tokenB() external view returns (address);\\n}\\n\\ninterface ITomiPair {\\n    function token0() external view returns(address);\\n    function token1() external view returns(address);\\n    function getReserves() external view returns(uint, uint, uint);\\n    function lastMintBlock(address user) external view returns(uint); \\n}\\n\\ninterface ITomiGovernance {\\n    function ballotCount() external view returns(uint);\\n    function rewardOf(address ballot) external view returns(uint);\\n    function tokenBallots(address ballot) external view returns(address);\\n    function ballotTypes(address ballot) external view returns(uint);\\n    function revenueBallots(uint index) external view returns(address);\\n    function ballots(uint index) external view returns(address);\\n    function balanceOf(address owner) external view returns (uint);\\n    function ballotOf(address ballot) external view returns (uint);\\n    function allowance(address owner) external view returns (uint);\\n    function configBallots(address ballot) external view returns (bytes32);\\n    function stakingSupply() external view returns (uint);\\n    function collectUsers(address ballot, address user) external view returns(uint);\\n    function ballotRevenueCount() external view returns (uint);\\n}\\n\\ninterface ITomiBallot {\\n    struct Voter {\\n        uint weight; // weight is accumulated by delegation\\n        bool voted;  // if true, that person already voted\\n        address delegate; // person delegated to\\n        uint vote;   // index of the voted proposal\\n    }\\n    function subject() external view returns(string memory);\\n    function content() external view returns(string memory);\\n    function createTime() external view returns(uint);\\n    function endTime() external view returns(uint);\\n    function executionTime() external view returns(uint);\\n    function result() external view returns(bool);\\n    function proposer() external view returns(address);\\n    function proposals(uint index) external view returns(uint);\\n    function ended() external view returns (bool);\\n    function value() external view returns (uint);\\n    function voters(address user) external view returns (Voter memory);\\n}\\n\\ninterface ITomiBallotRevenue {\\n    struct Participator {\\n        uint256 weight; // weight is accumulated by delegation\\n        bool participated; // if true, that person already voted\\n        address delegate; // person delegated to\\n    }\\n    function subject() external view returns(string memory);\\n    function content() external view returns(string memory);\\n    function createTime() external view returns(uint);\\n    function endTime() external view returns(uint);\\n    function executionTime() external view returns(uint);\\n    function proposer() external view returns(address);\\n    function proposals(uint index) external view returns(uint);\\n    function ended() external view returns (bool);\\n    function participators(address user) external view returns (Participator memory);\\n    function total() external view returns(uint256);\\n}\\n\\ninterface ITomiTransferListener {\\n    function pairWeights(address pair) external view returns(uint);\\n}\\n\\npragma experimental ABIEncoderV2;\\n\\ncontract TomiQuery2 {\\n    bytes32 public constant PRODUCE_TGAS_RATE = bytes32('PRODUCE_TGAS_RATE');\\n    bytes32 public constant SWAP_FEE_PERCENT = bytes32('SWAP_FEE_PERCENT');\\n    bytes32 public constant LIST_TGAS_AMOUNT = bytes32('LIST_TGAS_AMOUNT');\\n    bytes32 public constant UNSTAKE_DURATION = bytes32('UNSTAKE_DURATION');\\n    bytes32 public constant REMOVE_LIQUIDITY_DURATION = bytes32('REMOVE_LIQUIDITY_DURATION');\\n    bytes32 public constant TOKEN_TO_TGAS_PAIR_MIN_PERCENT = bytes32('TOKEN_TO_TGAS_PAIR_MIN_PERCENT');\\n    bytes32 public constant LIST_TOKEN_FAILURE_BURN_PRECENT = bytes32('LIST_TOKEN_FAILURE_BURN_PRECENT');\\n    bytes32 public constant LIST_TOKEN_SUCCESS_BURN_PRECENT = bytes32('LIST_TOKEN_SUCCESS_BURN_PRECENT');\\n    bytes32 public constant PROPOSAL_TGAS_AMOUNT = bytes32('PROPOSAL_TGAS_AMOUNT');\\n    bytes32 public constant VOTE_DURATION = bytes32('VOTE_DURATION');\\n    bytes32 public constant VOTE_REWARD_PERCENT = bytes32('VOTE_REWARD_PERCENT');\\n    bytes32 public constant PAIR_SWITCH = bytes32('PAIR_SWITCH');\\n    bytes32 public constant TOKEN_PENGDING_SWITCH = bytes32('TOKEN_PENGDING_SWITCH');\\n    bytes32 public constant TOKEN_PENGDING_TIME = bytes32('TOKEN_PENGDING_TIME');\\n\\n    address public configAddr;\\n    address public platform;\\n    address public factory;\\n    address public owner;\\n    address public governance;\\n    address public transferListener;\\n    address public delegate;\\n\\n    uint public T_REVENUE = 5;\\n    \\n    struct Proposal {\\n        address proposer;\\n        address ballotAddress;\\n        address tokenAddress;\\n        string subject;\\n        string content;\\n        uint proposalType;\\n        uint createTime;\\n        uint endTime;\\n        uint executionTime;\\n        bool end;\\n        bool result;\\n        uint YES;\\n        uint NO;\\n        uint totalReward;\\n        uint ballotType;\\n        uint weight;\\n        bool minted;\\n        bool voted;\\n        uint voteIndex;\\n        bool audited;\\n        uint value;\\n        bytes32 key;\\n        uint currentValue;\\n    }\\n\\n    struct RevenueProposal {\\n        address proposer;\\n        address ballotAddress;\\n        address tokenAddress;\\n        string subject;\\n        string content;\\n        uint createTime;\\n        uint endTime;\\n        uint executionTime;\\n        uint total;\\n        bool end;\\n        uint totalReward;\\n        uint ballotType;\\n        uint weight;\\n        bool minted;\\n        bool participated;\\n        bool audited;\\n    }\\n    \\n    struct Token {\\n        address tokenAddress;\\n        string symbol;\\n        uint decimal;\\n        uint balance;\\n        uint allowance;\\n        uint allowanceGov;\\n        uint status;\\n        uint totalSupply;\\n    }\\n    \\n    struct Liquidity {\\n        address pair;\\n        address lp;\\n        uint balance;\\n        uint totalSupply;\\n        uint lastBlock;\\n    }\\n    \\n    constructor() public {\\n        owner = msg.sender;\\n    }\\n    \\n    function upgrade(address _config, address _platform, address _factory, address _governance, address _transferListener, address _delegate) public {\\n        require(owner == msg.sender);\\n        configAddr = _config;\\n        platform = _platform;\\n        factory = _factory;\\n        governance = _governance;\\n        transferListener = _transferListener;\\n        delegate = _delegate;\\n    }\\n   \\n    function queryTokenList() public view returns (Token[] memory token_list) {\\n        uint count = ITomiConfig(configAddr).tokenCount();\\n        if(count > 0) {\\n            token_list = new Token[](count);\\n            for(uint i = 0;i < count;i++) {\\n                Token memory tk;\\n                tk.tokenAddress = ITomiConfig(configAddr).tokenList(i);\\n                tk.symbol = IERC20(tk.tokenAddress).symbol();\\n                tk.decimal = IERC20(tk.tokenAddress).decimals();\\n                tk.balance = IERC20(tk.tokenAddress).balanceOf(msg.sender);\\n                tk.allowance = IERC20(tk.tokenAddress).allowance(msg.sender, delegate);\\n                tk.allowanceGov = IERC20(tk.tokenAddress).allowance(msg.sender, governance);\\n                tk.status = ITomiConfig(configAddr).tokenStatus(tk.tokenAddress);\\n                tk.totalSupply = IERC20(tk.tokenAddress).totalSupply();\\n                token_list[i] = tk;\\n            }\\n        }\\n    }\\n\\n    function countTokenList() public view returns (uint) {\\n        return ITomiConfig(configAddr).tokenCount();\\n    }\\n\\n    function iterateTokenList(uint _start, uint _end) public view returns (Token[] memory token_list) {\\n        require(_start <= _end && _start >= 0 && _end >= 0, \\\"INVAID_PARAMTERS\\\");\\n        uint count = ITomiConfig(configAddr).tokenCount();\\n        if(count > 0) {\\n            if (_end > count) _end = count;\\n            count = _end - _start;\\n            token_list = new Token[](count);\\n            uint index = 0;\\n            for(uint i = _start; i < _end; i++) {\\n                Token memory tk;\\n                tk.tokenAddress = ITomiConfig(configAddr).tokenList(i);\\n                tk.symbol = IERC20(tk.tokenAddress).symbol();\\n                tk.decimal = IERC20(tk.tokenAddress).decimals();\\n                tk.balance = IERC20(tk.tokenAddress).balanceOf(msg.sender);\\n                tk.allowance = IERC20(tk.tokenAddress).allowance(msg.sender, delegate);\\n                tk.allowanceGov = IERC20(tk.tokenAddress).allowance(msg.sender, governance);\\n                tk.status = ITomiConfig(configAddr).tokenStatus(tk.tokenAddress);\\n                tk.totalSupply = IERC20(tk.tokenAddress).totalSupply();\\n                token_list[index] = tk;\\n                index++;\\n            }\\n        }\\n    }\\n    \\n    function queryLiquidityList() public view returns (Liquidity[] memory liquidity_list) {\\n        uint count = ITomiDelegate(delegate).getPlayerPairCount(msg.sender);\\n        if(count > 0) {\\n            liquidity_list = new Liquidity[](count);\\n            for(uint i = 0;i < count;i++) {\\n                Liquidity memory l;\\n                l.lp  = ITomiDelegate(delegate).playerPairs(msg.sender, i);\\n                l.pair = ITomiFactory(factory).getPair(ITomiLP(l.lp).tokenA(), ITomiLP(l.lp).tokenB());\\n                l.balance = IERC20(l.lp).balanceOf(msg.sender);\\n                l.totalSupply = IERC20(l.pair).totalSupply();\\n                l.lastBlock = ITomiPair(l.pair).lastMintBlock(msg.sender);\\n                liquidity_list[i] = l;\\n            }\\n        }\\n    }\\n\\n    function countLiquidityList() public view returns (uint) {\\n        return ITomiDelegate(delegate).getPlayerPairCount(msg.sender);\\n    }\\n        \\n    function iterateLiquidityList(uint _start, uint _end) public view returns (Liquidity[] memory liquidity_list) {\\n        require(_start <= _end && _start >= 0 && _end >= 0, \\\"INVAID_PARAMTERS\\\");\\n        uint count = ITomiDelegate(delegate).getPlayerPairCount(msg.sender);\\n        if(count > 0) {\\n            if (_end > count) _end = count;\\n            count = _end - _start;\\n            liquidity_list = new Liquidity[](count);\\n            uint index = 0;\\n            for(uint i = 0;i < count;i++) {\\n                Liquidity memory l;\\n                l.lp  = ITomiDelegate(delegate).playerPairs(msg.sender, i);\\n                l.pair = ITomiFactory(factory).getPair(ITomiLP(l.lp).tokenA(), ITomiLP(l.lp).tokenB());\\n                l.balance = IERC20(l.lp).balanceOf(msg.sender);\\n                l.totalSupply = IERC20(l.pair).totalSupply();\\n                l.lastBlock = ITomiPair(l.pair).lastMintBlock(msg.sender);\\n                liquidity_list[index] = l;\\n                index++;\\n            }\\n        }\\n    }\\n\\n    function queryPairListInfo(address[] memory pair_list) public view returns (address[] memory token0_list, address[] memory token1_list,\\n    uint[] memory reserve0_list, uint[] memory reserve1_list) {\\n        uint count = pair_list.length;\\n        if(count > 0) {\\n            token0_list = new address[](count);\\n            token1_list = new address[](count);\\n            reserve0_list = new uint[](count);\\n            reserve1_list = new uint[](count);\\n            for(uint i = 0;i < count;i++) {\\n                token0_list[i] = ITomiPair(pair_list[i]).token0();\\n                token1_list[i] = ITomiPair(pair_list[i]).token1();\\n                (reserve0_list[i], reserve1_list[i], ) = ITomiPair(pair_list[i]).getReserves();\\n            }\\n        }\\n    }\\n    \\n    function queryPairReserve(address[] memory token0_list, address[] memory token1_list) public\\n    view returns (uint[] memory reserve0_list, uint[] memory reserve1_list, bool[] memory exist_list) {\\n        uint count = token0_list.length;\\n        if(count > 0) {\\n            reserve0_list = new uint[](count);\\n            reserve1_list = new uint[](count);\\n            exist_list = new bool[](count);\\n            for(uint i = 0;i < count;i++) {\\n                if(ITomiPlatform(platform).existPair(token0_list[i], token1_list[i])) {\\n                    (reserve0_list[i], reserve1_list[i]) = ITomiPlatform(platform).getReserves(token0_list[i], token1_list[i]);\\n                    exist_list[i] = true;\\n                } else {\\n                    exist_list[i] = false;\\n                }\\n            }\\n        }\\n    }\\n    \\n    function queryConfig() public view returns (uint fee_percent, uint proposal_amount, uint unstake_duration, \\n    uint remove_duration, uint list_token_amount, uint vote_percent){\\n        fee_percent = ITomiConfig(configAddr).getConfigValue(SWAP_FEE_PERCENT);\\n        proposal_amount = ITomiConfig(configAddr).getConfigValue(PROPOSAL_TGAS_AMOUNT);\\n        unstake_duration = ITomiConfig(configAddr).getConfigValue(UNSTAKE_DURATION);\\n        remove_duration = ITomiConfig(configAddr).getConfigValue(REMOVE_LIQUIDITY_DURATION);\\n        list_token_amount = ITomiConfig(configAddr).getConfigValue(LIST_TGAS_AMOUNT);\\n        vote_percent = ITomiConfig(configAddr).getConfigValue(VOTE_REWARD_PERCENT);\\n    }\\n    \\n    function queryCondition(address[] memory path_list) public view returns (uint){\\n        uint count = path_list.length;\\n        for(uint i = 0;i < count;i++) {\\n            if(!ITomiPlatform(platform).swapPrecondition(path_list[i])) {\\n                return i + 1;\\n            }\\n        }\\n        \\n        return 0;\\n    }\\n    \\n    function generateProposal(address ballot_address) public view returns (Proposal memory proposal){\\n        proposal.proposer = ITomiBallot(ballot_address).proposer();\\n        proposal.subject = ITomiBallot(ballot_address).subject();\\n        proposal.content = ITomiBallot(ballot_address).content();\\n        proposal.createTime = ITomiBallot(ballot_address).createTime();\\n        proposal.endTime = ITomiBallot(ballot_address).endTime();\\n        proposal.executionTime = ITomiBallot(ballot_address).executionTime();\\n        proposal.end = block.number > ITomiBallot(ballot_address).endTime() ? true: false;\\n        proposal.audited = ITomiBallot(ballot_address).ended();\\n        proposal.YES = ITomiBallot(ballot_address).proposals(1);\\n        proposal.NO = ITomiBallot(ballot_address).proposals(2);\\n        proposal.totalReward = ITomiGovernance(governance).ballotOf(ballot_address);\\n        proposal.ballotAddress = ballot_address;\\n        proposal.voted = ITomiBallot(ballot_address).voters(msg.sender).voted;\\n        proposal.voteIndex = ITomiBallot(ballot_address).voters(msg.sender).vote;\\n        proposal.weight = ITomiBallot(ballot_address).voters(msg.sender).weight;\\n        proposal.minted = ITomiGovernance(governance).collectUsers(ballot_address, msg.sender) == 1;\\n        proposal.ballotType = ITomiGovernance(governance).ballotTypes(ballot_address);\\n        proposal.tokenAddress = ITomiGovernance(governance).tokenBallots(ballot_address);\\n        proposal.value = ITomiBallot(ballot_address).value();\\n        proposal.proposalType = ITomiGovernance(governance).ballotTypes(ballot_address);\\n        proposal.result = ITomiBallot(ballot_address).result();\\n\\n        if(proposal.ballotType == 1) {  \\n            proposal.key = ITomiGovernance(governance).configBallots(ballot_address);\\n            proposal.currentValue = ITomiConfig(governance).getConfigValue(proposal.key);\\n        }\\n    }\\n\\n    function generateRevenueProposal(address ballot_address) public view returns (RevenueProposal memory proposal){\\n        proposal.proposer = ITomiBallotRevenue(ballot_address).proposer();\\n        proposal.subject = ITomiBallotRevenue(ballot_address).subject();\\n        proposal.content = ITomiBallotRevenue(ballot_address).content();\\n        proposal.createTime = ITomiBallotRevenue(ballot_address).createTime();\\n        proposal.endTime = ITomiBallotRevenue(ballot_address).endTime();\\n        proposal.executionTime = ITomiBallotRevenue(ballot_address).executionTime();\\n        proposal.end = block.timestamp > ITomiBallotRevenue(ballot_address).endTime() ? true: false;\\n        proposal.audited = ITomiBallotRevenue(ballot_address).ended();\\n        proposal.totalReward = ITomiGovernance(governance).ballotOf(ballot_address);\\n        proposal.ballotAddress = ballot_address;\\n        proposal.participated = ITomiBallotRevenue(ballot_address).participators(msg.sender).participated;\\n        proposal.weight = ITomiBallotRevenue(ballot_address).participators(msg.sender).weight;\\n        proposal.minted = ITomiGovernance(governance).collectUsers(ballot_address, msg.sender) == 1;\\n        proposal.ballotType = ITomiGovernance(governance).ballotTypes(ballot_address);\\n        proposal.tokenAddress = ITomiGovernance(governance).tokenBallots(ballot_address);\\n        proposal.total = ITomiBallotRevenue(ballot_address).total();\\n    }    \\n\\n    function queryTokenItemInfo(address token) public view returns (string memory symbol, uint decimal, uint totalSupply, uint balance, uint allowance) {\\n        symbol = IERC20(token).symbol();\\n        decimal = IERC20(token).decimals();\\n        totalSupply = IERC20(token).totalSupply();\\n        balance = IERC20(token).balanceOf(msg.sender);\\n        allowance = IERC20(token).allowance(msg.sender, delegate);\\n    }\\n    \\n    function queryConfigInfo(bytes32 name) public view returns (Config memory config_item){\\n        config_item = ITomiConfig(configAddr).configs(name);\\n    }\\n    \\n    function queryStakeInfo() public view returns (uint stake_amount, uint stake_block, uint total_stake) {\\n        stake_amount = ITomiGovernance(governance).balanceOf(msg.sender);\\n        stake_block = ITomiGovernance(governance).allowance(msg.sender);\\n        total_stake = ITomiGovernance(governance).stakingSupply();\\n    }\\n\\n    function queryProposalList() public view returns (Proposal[] memory proposal_list){\\n        uint count = ITomiGovernance(governance).ballotCount();\\n        proposal_list = new Proposal[](count);\\n        for(uint i = 0;i < count;i++) {\\n            address ballot_address = ITomiGovernance(governance).ballots(i);\\n            proposal_list[count - i - 1] = generateProposal(ballot_address);\\n        }\\n    }\\n\\n    function queryRevenueProposalList() public view returns (RevenueProposal[] memory proposal_list){\\n        uint count = ITomiGovernance(governance).ballotRevenueCount();\\n        proposal_list = new RevenueProposal[](count);\\n        for(uint i = 0;i < count;i++) {\\n            address ballot_address = ITomiGovernance(governance).revenueBallots(i);\\n            proposal_list[count - i - 1] = generateRevenueProposal(ballot_address);(ballot_address);\\n        }\\n    }\\n\\n    function countProposalList() public view returns (uint) {\\n        return ITomiGovernance(governance).ballotCount();\\n    }\\n\\n    function iterateProposalList(uint _start, uint _end) public view returns (Proposal[] memory proposal_list){\\n        require(_start <= _end && _start >= 0 && _end >= 0, \\\"INVAID_PARAMTERS\\\");\\n        uint count = ITomiGovernance(governance).ballotCount();\\n        if (_end > count) _end = count;\\n        count = _end - _start;\\n        proposal_list = new Proposal[](count);\\n        uint index = 0;\\n        for(uint i = 0;i < count;i++) {\\n            address ballot_address = ITomiGovernance(governance).ballots(i);\\n            proposal_list[index] = generateProposal(ballot_address);\\n            index++;\\n        }\\n    }\\n\\n    function iterateReverseProposalList(uint _start, uint _end) public view returns (Proposal[] memory proposal_list){\\n        require(_end <= _start && _end >= 0 && _start >= 0, \\\"INVAID_PARAMTERS\\\");\\n        uint count = ITomiGovernance(governance).ballotCount();\\n        if (_start > count) _start = count;\\n        count = _start - _end;\\n        proposal_list = new Proposal[](count);\\n        uint index = 0;\\n        for(uint i = 0;i < count;i++) {\\n            address ballot_address = ITomiGovernance(governance).ballots(i);\\n            proposal_list[index] = generateProposal(ballot_address);\\n            index++;\\n        }\\n    }\\n        \\n    function queryPairWeights(address[] memory pairs) public view returns (uint[] memory weights){\\n        uint count = pairs.length;\\n        weights = new uint[](count);\\n        for(uint i = 0; i < count; i++) {\\n            weights[i] = ITomiTransferListener(transferListener).pairWeights(pairs[i]);\\n        }\\n    }\\n\\n    function getPairReserve(address _pair) public view returns (address token0, address token1, uint8 decimals0, uint8 decimals1, uint reserve0, uint reserve1) {\\n        token0 = ITomiPair(_pair).token0();\\n        token1 = ITomiPair(_pair).token1();\\n        decimals0 = IERC20(token0).decimals();\\n        decimals1 = IERC20(token1).decimals();\\n        (reserve0, reserve1, ) = ITomiPair(_pair).getReserves();\\n    }\\n\\n    function getPairReserveWithUser(address _pair, address _user) public view returns (address token0, address token1, uint8 decimals0, uint8 decimals1, uint reserve0, uint reserve1, uint balance0, uint balance1) {\\n        token0 = ITomiPair(_pair).token0();\\n        token1 = ITomiPair(_pair).token1();\\n        decimals0 = IERC20(token0).decimals();\\n        decimals1 = IERC20(token1).decimals();\\n        (reserve0, reserve1, ) = ITomiPair(_pair).getReserves();\\n        balance0 = IERC20(token0).balanceOf(_user);\\n        balance1 = IERC20(token1).balanceOf(_user);\\n    }\\n}\\n\"\r\n    }\r\n  },\r\n  \"settings\": {\r\n    \"optimizer\": {\r\n      \"enabled\": true,\r\n      \"runs\": 1000\r\n    },\r\n    \"outputSelection\": {\r\n      \"*\": {\r\n        \"*\": [\r\n          \"evm.bytecode\",\r\n          \"evm.deployedBytecode\",\r\n          \"devdoc\",\r\n          \"userdoc\",\r\n          \"metadata\",\r\n          \"abi\"\r\n        ]\r\n      }\r\n    },\r\n    \"metadata\": {\r\n      \"useLiteralContent\": true\r\n    },\r\n    \"libraries\": {}\r\n  }\r\n}}","ABI":"[{\"inputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"inputs\":[],\"name\":\"LIST_TGAS_AMOUNT\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"LIST_TOKEN_FAILURE_BURN_PRECENT\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"LIST_TOKEN_SUCCESS_BURN_PRECENT\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"PAIR_SWITCH\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"PRODUCE_TGAS_RATE\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"PROPOSAL_TGAS_AMOUNT\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"REMOVE_LIQUIDITY_DURATION\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"SWAP_FEE_PERCENT\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"TOKEN_PENGDING_SWITCH\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"TOKEN_PENGDING_TIME\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"TOKEN_TO_TGAS_PAIR_MIN_PERCENT\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"T_REVENUE\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"UNSTAKE_DURATION\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"VOTE_DURATION\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"VOTE_REWARD_PERCENT\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"configAddr\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"countLiquidityList\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"countProposalList\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"countTokenList\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"delegate\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"factory\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"ballot_address\",\"type\":\"address\"}],\"name\":\"generateProposal\",\"outputs\":[{\"components\":[{\"internalType\":\"address\",\"name\":\"proposer\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"ballotAddress\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"tokenAddress\",\"type\":\"address\"},{\"internalType\":\"string\",\"name\":\"subject\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"content\",\"type\":\"string\"},{\"internalType\":\"uint256\",\"name\":\"proposalType\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"createTime\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"endTime\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"executionTime\",\"type\":\"uint256\"},{\"internalType\":\"bool\",\"name\":\"end\",\"type\":\"bool\"},{\"internalType\":\"bool\",\"name\":\"result\",\"type\":\"bool\"},{\"internalType\":\"uint256\",\"name\":\"YES\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"NO\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"totalReward\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"ballotType\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"weight\",\"type\":\"uint256\"},{\"internalType\":\"bool\",\"name\":\"minted\",\"type\":\"bool\"},{\"internalType\":\"bool\",\"name\":\"voted\",\"type\":\"bool\"},{\"internalType\":\"uint256\",\"name\":\"voteIndex\",\"type\":\"uint256\"},{\"internalType\":\"bool\",\"name\":\"audited\",\"type\":\"bool\"},{\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"},{\"internalType\":\"bytes32\",\"name\":\"key\",\"type\":\"bytes32\"},{\"internalType\":\"uint256\",\"name\":\"currentValue\",\"type\":\"uint256\"}],\"internalType\":\"struct TomiQuery2.Proposal\",\"name\":\"proposal\",\"type\":\"tuple\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"ballot_address\",\"type\":\"address\"}],\"name\":\"generateRevenueProposal\",\"outputs\":[{\"components\":[{\"internalType\":\"address\",\"name\":\"proposer\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"ballotAddress\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"tokenAddress\",\"type\":\"address\"},{\"internalType\":\"string\",\"name\":\"subject\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"content\",\"type\":\"string\"},{\"internalType\":\"uint256\",\"name\":\"createTime\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"endTime\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"executionTime\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"total\",\"type\":\"uint256\"},{\"internalType\":\"bool\",\"name\":\"end\",\"type\":\"bool\"},{\"internalType\":\"uint256\",\"name\":\"totalReward\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"ballotType\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"weight\",\"type\":\"uint256\"},{\"internalType\":\"bool\",\"name\":\"minted\",\"type\":\"bool\"},{\"internalType\":\"bool\",\"name\":\"participated\",\"type\":\"bool\"},{\"internalType\":\"bool\",\"name\":\"audited\",\"type\":\"bool\"}],\"internalType\":\"struct TomiQuery2.RevenueProposal\",\"name\":\"proposal\",\"type\":\"tuple\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_pair\",\"type\":\"address\"}],\"name\":\"getPairReserve\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"token0\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"token1\",\"type\":\"address\"},{\"internalType\":\"uint8\",\"name\":\"decimals0\",\"type\":\"uint8\"},{\"internalType\":\"uint8\",\"name\":\"decimals1\",\"type\":\"uint8\"},{\"internalType\":\"uint256\",\"name\":\"reserve0\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"reserve1\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_pair\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_user\",\"type\":\"address\"}],\"name\":\"getPairReserveWithUser\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"token0\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"token1\",\"type\":\"address\"},{\"internalType\":\"uint8\",\"name\":\"decimals0\",\"type\":\"uint8\"},{\"internalType\":\"uint8\",\"name\":\"decimals1\",\"type\":\"uint8\"},{\"internalType\":\"uint256\",\"name\":\"reserve0\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"reserve1\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"balance0\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"balance1\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"governance\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_start\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_end\",\"type\":\"uint256\"}],\"name\":\"iterateLiquidityList\",\"outputs\":[{\"components\":[{\"internalType\":\"address\",\"name\":\"pair\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"lp\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"balance\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"totalSupply\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"lastBlock\",\"type\":\"uint256\"}],\"internalType\":\"struct TomiQuery2.Liquidity[]\",\"name\":\"liquidity_list\",\"type\":\"tuple[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_start\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_end\",\"type\":\"uint256\"}],\"name\":\"iterateProposalList\",\"outputs\":[{\"components\":[{\"internalType\":\"address\",\"name\":\"proposer\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"ballotAddress\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"tokenAddress\",\"type\":\"address\"},{\"internalType\":\"string\",\"name\":\"subject\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"content\",\"type\":\"string\"},{\"internalType\":\"uint256\",\"name\":\"proposalType\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"createTime\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"endTime\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"executionTime\",\"type\":\"uint256\"},{\"internalType\":\"bool\",\"name\":\"end\",\"type\":\"bool\"},{\"internalType\":\"bool\",\"name\":\"result\",\"type\":\"bool\"},{\"internalType\":\"uint256\",\"name\":\"YES\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"NO\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"totalReward\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"ballotType\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"weight\",\"type\":\"uint256\"},{\"internalType\":\"bool\",\"name\":\"minted\",\"type\":\"bool\"},{\"internalType\":\"bool\",\"name\":\"voted\",\"type\":\"bool\"},{\"internalType\":\"uint256\",\"name\":\"voteIndex\",\"type\":\"uint256\"},{\"internalType\":\"bool\",\"name\":\"audited\",\"type\":\"bool\"},{\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"},{\"internalType\":\"bytes32\",\"name\":\"key\",\"type\":\"bytes32\"},{\"internalType\":\"uint256\",\"name\":\"currentValue\",\"type\":\"uint256\"}],\"internalType\":\"struct TomiQuery2.Proposal[]\",\"name\":\"proposal_list\",\"type\":\"tuple[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_start\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_end\",\"type\":\"uint256\"}],\"name\":\"iterateReverseProposalList\",\"outputs\":[{\"components\":[{\"internalType\":\"address\",\"name\":\"proposer\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"ballotAddress\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"tokenAddress\",\"type\":\"address\"},{\"internalType\":\"string\",\"name\":\"subject\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"content\",\"type\":\"string\"},{\"internalType\":\"uint256\",\"name\":\"proposalType\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"createTime\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"endTime\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"executionTime\",\"type\":\"uint256\"},{\"internalType\":\"bool\",\"name\":\"end\",\"type\":\"bool\"},{\"internalType\":\"bool\",\"name\":\"result\",\"type\":\"bool\"},{\"internalType\":\"uint256\",\"name\":\"YES\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"NO\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"totalReward\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"ballotType\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"weight\",\"type\":\"uint256\"},{\"internalType\":\"bool\",\"name\":\"minted\",\"type\":\"bool\"},{\"internalType\":\"bool\",\"name\":\"voted\",\"type\":\"bool\"},{\"internalType\":\"uint256\",\"name\":\"voteIndex\",\"type\":\"uint256\"},{\"internalType\":\"bool\",\"name\":\"audited\",\"type\":\"bool\"},{\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"},{\"internalType\":\"bytes32\",\"name\":\"key\",\"type\":\"bytes32\"},{\"internalType\":\"uint256\",\"name\":\"currentValue\",\"type\":\"uint256\"}],\"internalType\":\"struct TomiQuery2.Proposal[]\",\"name\":\"proposal_list\",\"type\":\"tuple[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_start\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_end\",\"type\":\"uint256\"}],\"name\":\"iterateTokenList\",\"outputs\":[{\"components\":[{\"internalType\":\"address\",\"name\":\"tokenAddress\",\"type\":\"address\"},{\"internalType\":\"string\",\"name\":\"symbol\",\"type\":\"string\"},{\"internalType\":\"uint256\",\"name\":\"decimal\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"balance\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"allowance\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"allowanceGov\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"status\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"totalSupply\",\"type\":\"uint256\"}],\"internalType\":\"struct TomiQuery2.Token[]\",\"name\":\"token_list\",\"type\":\"tuple[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"platform\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address[]\",\"name\":\"path_list\",\"type\":\"address[]\"}],\"name\":\"queryCondition\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"queryConfig\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"fee_percent\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"proposal_amount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"unstake_duration\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"remove_duration\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"list_token_amount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"vote_percent\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"name\",\"type\":\"bytes32\"}],\"name\":\"queryConfigInfo\",\"outputs\":[{\"components\":[{\"internalType\":\"uint256\",\"name\":\"minValue\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"maxValue\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"maxSpan\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"enable\",\"type\":\"uint256\"}],\"internalType\":\"struct Config\",\"name\":\"config_item\",\"type\":\"tuple\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"queryLiquidityList\",\"outputs\":[{\"components\":[{\"internalType\":\"address\",\"name\":\"pair\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"lp\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"balance\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"totalSupply\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"lastBlock\",\"type\":\"uint256\"}],\"internalType\":\"struct TomiQuery2.Liquidity[]\",\"name\":\"liquidity_list\",\"type\":\"tuple[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address[]\",\"name\":\"pair_list\",\"type\":\"address[]\"}],\"name\":\"queryPairListInfo\",\"outputs\":[{\"internalType\":\"address[]\",\"name\":\"token0_list\",\"type\":\"address[]\"},{\"internalType\":\"address[]\",\"name\":\"token1_list\",\"type\":\"address[]\"},{\"internalType\":\"uint256[]\",\"name\":\"reserve0_list\",\"type\":\"uint256[]\"},{\"internalType\":\"uint256[]\",\"name\":\"reserve1_list\",\"type\":\"uint256[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address[]\",\"name\":\"token0_list\",\"type\":\"address[]\"},{\"internalType\":\"address[]\",\"name\":\"token1_list\",\"type\":\"address[]\"}],\"name\":\"queryPairReserve\",\"outputs\":[{\"internalType\":\"uint256[]\",\"name\":\"reserve0_list\",\"type\":\"uint256[]\"},{\"internalType\":\"uint256[]\",\"name\":\"reserve1_list\",\"type\":\"uint256[]\"},{\"internalType\":\"bool[]\",\"name\":\"exist_list\",\"type\":\"bool[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address[]\",\"name\":\"pairs\",\"type\":\"address[]\"}],\"name\":\"queryPairWeights\",\"outputs\":[{\"internalType\":\"uint256[]\",\"name\":\"weights\",\"type\":\"uint256[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"queryProposalList\",\"outputs\":[{\"components\":[{\"internalType\":\"address\",\"name\":\"proposer\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"ballotAddress\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"tokenAddress\",\"type\":\"address\"},{\"internalType\":\"string\",\"name\":\"subject\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"content\",\"type\":\"string\"},{\"internalType\":\"uint256\",\"name\":\"proposalType\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"createTime\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"endTime\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"executionTime\",\"type\":\"uint256\"},{\"internalType\":\"bool\",\"name\":\"end\",\"type\":\"bool\"},{\"internalType\":\"bool\",\"name\":\"result\",\"type\":\"bool\"},{\"internalType\":\"uint256\",\"name\":\"YES\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"NO\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"totalReward\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"ballotType\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"weight\",\"type\":\"uint256\"},{\"internalType\":\"bool\",\"name\":\"minted\",\"type\":\"bool\"},{\"internalType\":\"bool\",\"name\":\"voted\",\"type\":\"bool\"},{\"internalType\":\"uint256\",\"name\":\"voteIndex\",\"type\":\"uint256\"},{\"internalType\":\"bool\",\"name\":\"audited\",\"type\":\"bool\"},{\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"},{\"internalType\":\"bytes32\",\"name\":\"key\",\"type\":\"bytes32\"},{\"internalType\":\"uint256\",\"name\":\"currentValue\",\"type\":\"uint256\"}],\"internalType\":\"struct TomiQuery2.Proposal[]\",\"name\":\"proposal_list\",\"type\":\"tuple[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"queryRevenueProposalList\",\"outputs\":[{\"components\":[{\"internalType\":\"address\",\"name\":\"proposer\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"ballotAddress\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"tokenAddress\",\"type\":\"address\"},{\"internalType\":\"string\",\"name\":\"subject\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"content\",\"type\":\"string\"},{\"internalType\":\"uint256\",\"name\":\"createTime\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"endTime\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"executionTime\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"total\",\"type\":\"uint256\"},{\"internalType\":\"bool\",\"name\":\"end\",\"type\":\"bool\"},{\"internalType\":\"uint256\",\"name\":\"totalReward\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"ballotType\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"weight\",\"type\":\"uint256\"},{\"internalType\":\"bool\",\"name\":\"minted\",\"type\":\"bool\"},{\"internalType\":\"bool\",\"name\":\"participated\",\"type\":\"bool\"},{\"internalType\":\"bool\",\"name\":\"audited\",\"type\":\"bool\"}],\"internalType\":\"struct TomiQuery2.RevenueProposal[]\",\"name\":\"proposal_list\",\"type\":\"tuple[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"queryStakeInfo\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"stake_amount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"stake_block\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"total_stake\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"token\",\"type\":\"address\"}],\"name\":\"queryTokenItemInfo\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"symbol\",\"type\":\"string\"},{\"internalType\":\"uint256\",\"name\":\"decimal\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"totalSupply\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"balance\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"allowance\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"queryTokenList\",\"outputs\":[{\"components\":[{\"internalType\":\"address\",\"name\":\"tokenAddress\",\"type\":\"address\"},{\"internalType\":\"string\",\"name\":\"symbol\",\"type\":\"string\"},{\"internalType\":\"uint256\",\"name\":\"decimal\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"balance\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"allowance\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"allowanceGov\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"status\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"totalSupply\",\"type\":\"uint256\"}],\"internalType\":\"struct TomiQuery2.Token[]\",\"name\":\"token_list\",\"type\":\"tuple[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"transferListener\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_config\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_platform\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_factory\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_governance\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_transferListener\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_delegate\",\"type\":\"address\"}],\"name\":\"upgrade\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}]","ContractName":"TomiQuery2","CompilerVersion":"v0.6.6+commit.6c089d02","OptimizationUsed":"1","Runs":"1000","ConstructorArguments":"","EVMVersion":"Default","Library":"","LicenseType":"","Proxy":"0","Implementation":"","SwarmSource":""}]}