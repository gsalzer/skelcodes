{"status":"1","message":"OK","result":[{"SourceCode":"// SPDX-License-Identifier: MIT\r\n\r\npragma solidity ^0.8.0;\r\n\r\ninterface IDice {\r\n\r\n    /**\r\n     * @dev Returns the weight of the side of the die\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - `tokenId` must exist.\r\n     */\r\n    function getSideWeight(uint256 tokenId, uint256 side) external pure returns (uint256);\r\n\r\n    /**\r\n     * @dev Returns the owner of the `tokenId` token.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - `tokenId` must exist.\r\n     */\r\n    function ownerOf(uint256 tokenId) external view returns (address owner);\r\n}\r\n\r\ncontract DiceRoller { \r\n\r\n    IDice dice = IDice(0x36222D5969da94e05Aa953D2fe266dF139756e88);\r\n\r\n    function rollIfOwner(uint256 tokenId, uint256 sideCount, address user) public view returns (uint256) {\r\n        require(isOwner(tokenId, user));\r\n        return roll(tokenId, sideCount, 1);\r\n    }\r\n\r\n    function roll(uint256 tokenId, uint256 sideCount) public view returns (uint256) {\r\n        return roll(tokenId, sideCount, 1);\r\n    }\r\n    \r\n    // Roll the n sided die from your set\r\n    // Seed can be an additional sources of entropy\r\n    function roll(uint256 tokenId, uint256 sideCount, uint256 seed) public view returns (uint256) {\r\n        require(sideCount == 4 ||\r\n                sideCount == 6 ||\r\n                sideCount == 8 ||\r\n                sideCount == 10 ||\r\n                sideCount == 12 ||\r\n                sideCount == 20);\r\n        uint256 pseudoRandom = uint256(keccak256(abi.encodePacked(seed, block.basefee, blockhash(block.number-1), msg.sender, address(this))));\r\n        uint256 total = 0;\r\n        // Add up all side weights for sides considered\r\n        for (uint256 i = 1; i <= sideCount; i++) {\r\n            total = total + dice.getSideWeight(tokenId, i);\r\n        }\r\n        pseudoRandom = pseudoRandom % total + 1;\r\n        for (uint256 i = 1; i <= sideCount; i++) {\r\n            uint256 sideWeight = dice.getSideWeight(tokenId, i);\r\n            if (pseudoRandom <= sideWeight) {\r\n                return i;\r\n            }\r\n            pseudoRandom = pseudoRandom - sideWeight;\r\n        }\r\n        revert();\r\n    }\r\n    \r\n    function isOwner(uint256 tokenId, address owner) public view returns (bool) {\r\n        return dice.ownerOf(tokenId) == owner;\r\n    }\r\n}","ABI":"[{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"}],\"name\":\"isOwner\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"sideCount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"seed\",\"type\":\"uint256\"}],\"name\":\"roll\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"sideCount\",\"type\":\"uint256\"}],\"name\":\"roll\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"sideCount\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"}],\"name\":\"rollIfOwner\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"}]","ContractName":"DiceRoller","CompilerVersion":"v0.8.7+commit.e28d00a7","OptimizationUsed":"1","Runs":"200","ConstructorArguments":"","EVMVersion":"Default","Library":"","LicenseType":"MIT","Proxy":"0","Implementation":"","SwarmSource":"ipfs://79105efda74f546c8826b0809919c343c45341365a3176b9e2798486cb7533cb"}]}