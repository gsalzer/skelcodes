{"status":"1","message":"OK","result":[{"SourceCode":"{{\r\n  \"language\": \"Solidity\",\r\n  \"sources\": {\r\n    \"/Users/huangpenghan/Documents_local/GitHub/HighStreet_jack/client/src/contracts/ProductToken/ProductTokenV1.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.3;\\n\\nimport \\\"@openzeppelin/contracts/token/ERC20/IERC20.sol\\\";\\nimport \\\"@openzeppelin/contracts-upgradeable/utils/math/SafeMathUpgradeable.sol\\\";\\nimport \\\"./ProductToken.sol\\\";\\nimport \\\"./interface/IVNFT.sol\\\";\\n\\n/// @title ProductTokenV1\\n/// @notice This is version 1 of the product token implementation.\\n/// @dev This contract builds on top of version 0 by including transaction logics, such as buy and sell transfers\\n///    and exchange rate computation by including a price oracle.\\ncontract ProductTokenV1 is ProductToken {\\n\\tusing SafeMathUpgradeable for uint256;\\n\\n    struct supplierInfo {\\n        uint256 amount;\\n        address wallet;\\n    }\\n    struct voucherInfo {\\n        address addr;\\n        uint256 tokenId;\\n    }\\n\\n    supplierInfo public supplier;\\n    voucherInfo public voucher;\\n    IERC20 private high;\\n\\n    function setHigh(address highAddress_) external onlyOwner {\\n        require(highAddress_!=address(0), \\\"Invalid address\\\");\\n        high = IERC20(highAddress_);\\n    }\\n\\n    function buy(uint256 maxPrice_) external virtual onlyIfTradable {\\n        require(maxPrice_ > 0, \\\"invalid max price\\\");\\n\\n        bool success = high.transferFrom(msg.sender, address(this), maxPrice_);\\n        require(success, \\\"Purchase failed.\\\");\\n\\n        (uint256 amount,uint256 change, uint price, uint256 fee)  = _buy(maxPrice_);\\n        if (amount > 0) {\\n            if(change > 0) {\\n                high.transfer(msg.sender, change);\\n            }\\n            _updateSupplierFee(fee.mul(1e12).div(4e12));\\n        }else { // If token transaction failed\\n            high.transfer(msg.sender, maxPrice_);\\n        }\\n    }\\n\\n    function sell(uint32 amount_) external virtual onlyIfTradable {\\n        require(balanceOf(msg.sender) >= amount_ || amount_ > 0, 'invalid amount');\\n\\n        (uint256 price, uint256 fee )= _sellForAmount(amount_);\\n\\n        bool success = high.transfer(msg.sender, price);\\n        _updateSupplierFee(fee.mul(1e12).div(2e12));\\n        require(success, \\\"selling token failed\\\");\\n    }\\n\\n    function setSupplier( address wallet_) external virtual onlyOwner {\\n        require(wallet_!=address(0), \\\"Address is invalid\\\");\\n        supplier.wallet = wallet_;\\n    }\\n\\n    function claimSupplier(uint256 amount_) external virtual {\\n        require(supplier.wallet!=address(0), \\\"wallet is invalid\\\");\\n        require(msg.sender == supplier.wallet, \\\"The address is not allowed\\\");\\n        if (amount_ <= supplier.amount){\\n            bool success = high.transfer(msg.sender, amount_);\\n            if (success) {\\n                supplier.amount = supplier.amount.sub(amount_);\\n            }\\n        }\\n    }\\n\\n    function _updateSupplierFee(uint256 fee) internal virtual {\\n        if( fee > 0 ) {\\n            supplier.amount = supplier.amount.add(fee);\\n        }\\n    }\\n\\n    /**\\n    * @dev A method that refunds the value of a product to a buyer/customer.\\n    *\\n    * @param buyer_       The wallet address of the owner whose product token is under the redemption process\\n    * @param value_       The market value of the token being redeemed\\n    *\\n    */\\n    function _refund(address buyer_, uint256 value_) internal virtual override {\\n        bool success = high.transfer(buyer_, value_);\\n        require(success, \\\"refund token failed\\\");\\n    }\\n\\n    function claimHigh(uint256 amount_, address to_) external virtual onlyOwner {\\n        require(to_ != address(0), \\\"invalid address\\\");\\n        require(amount_ <= high.balanceOf(address(this)), 'invalid amount');\\n        high.transfer(to_, amount_);\\n    }\\n\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/token/ERC20/IERC20.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC20 standard as defined in the EIP.\\n */\\ninterface IERC20 {\\n    /**\\n     * @dev Returns the amount of tokens in existence.\\n     */\\n    function totalSupply() external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the amount of tokens owned by `account`.\\n     */\\n    function balanceOf(address account) external view returns (uint256);\\n\\n    /**\\n     * @dev Moves `amount` tokens from the caller's account to `recipient`.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transfer(address recipient, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Returns the remaining number of tokens that `spender` will be\\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\\n     * zero by default.\\n     *\\n     * This value changes when {approve} or {transferFrom} are called.\\n     */\\n    function allowance(address owner, address spender) external view returns (uint256);\\n\\n    /**\\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\\n     * that someone may use both the old and the new allowance by unfortunate\\n     * transaction ordering. One possible solution to mitigate this race\\n     * condition is to first reduce the spender's allowance to 0 and set the\\n     * desired value afterwards:\\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address spender, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Moves `amount` tokens from `sender` to `recipient` using the\\n     * allowance mechanism. `amount` is then deducted from the caller's\\n     * allowance.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(address sender, address recipient, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\\n     * another (`to`).\\n     *\\n     * Note that `value` may be zero.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 value);\\n\\n    /**\\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\\n     * a call to {approve}. `value` is the new allowance.\\n     */\\n    event Approval(address indexed owner, address indexed spender, uint256 value);\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts-upgradeable/utils/math/SafeMathUpgradeable.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\n// CAUTION\\n// This version of SafeMath should only be used with Solidity 0.8 or later,\\n// because it relies on the compiler's built in overflow checks.\\n\\n/**\\n * @dev Wrappers over Solidity's arithmetic operations.\\n *\\n * NOTE: `SafeMath` is no longer needed starting with Solidity 0.8. The compiler\\n * now has built in overflow checking.\\n */\\nlibrary SafeMathUpgradeable {\\n    /**\\n     * @dev Returns the addition of two unsigned integers, with an overflow flag.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function tryAdd(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        unchecked {\\n            uint256 c = a + b;\\n            if (c < a) return (false, 0);\\n            return (true, c);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the substraction of two unsigned integers, with an overflow flag.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function trySub(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        unchecked {\\n            if (b > a) return (false, 0);\\n            return (true, a - b);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the multiplication of two unsigned integers, with an overflow flag.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function tryMul(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        unchecked {\\n            // Gas optimization: this is cheaper than requiring 'a' not being zero, but the\\n            // benefit is lost if 'b' is also tested.\\n            // See: https://github.com/OpenZeppelin/openzeppelin-contracts/pull/522\\n            if (a == 0) return (true, 0);\\n            uint256 c = a * b;\\n            if (c / a != b) return (false, 0);\\n            return (true, c);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the division of two unsigned integers, with a division by zero flag.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function tryDiv(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        unchecked {\\n            if (b == 0) return (false, 0);\\n            return (true, a / b);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the remainder of dividing two unsigned integers, with a division by zero flag.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function tryMod(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        unchecked {\\n            if (b == 0) return (false, 0);\\n            return (true, a % b);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the addition of two unsigned integers, reverting on\\n     * overflow.\\n     *\\n     * Counterpart to Solidity's `+` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Addition cannot overflow.\\n     */\\n    function add(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a + b;\\n    }\\n\\n    /**\\n     * @dev Returns the subtraction of two unsigned integers, reverting on\\n     * overflow (when the result is negative).\\n     *\\n     * Counterpart to Solidity's `-` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Subtraction cannot overflow.\\n     */\\n    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a - b;\\n    }\\n\\n    /**\\n     * @dev Returns the multiplication of two unsigned integers, reverting on\\n     * overflow.\\n     *\\n     * Counterpart to Solidity's `*` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Multiplication cannot overflow.\\n     */\\n    function mul(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a * b;\\n    }\\n\\n    /**\\n     * @dev Returns the integer division of two unsigned integers, reverting on\\n     * division by zero. The result is rounded towards zero.\\n     *\\n     * Counterpart to Solidity's `/` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - The divisor cannot be zero.\\n     */\\n    function div(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a / b;\\n    }\\n\\n    /**\\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\\n     * reverting when dividing by zero.\\n     *\\n     * Counterpart to Solidity's `%` operator. This function uses a `revert`\\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\\n     * invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Requirements:\\n     *\\n     * - The divisor cannot be zero.\\n     */\\n    function mod(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a % b;\\n    }\\n\\n    /**\\n     * @dev Returns the subtraction of two unsigned integers, reverting with custom message on\\n     * overflow (when the result is negative).\\n     *\\n     * CAUTION: This function is deprecated because it requires allocating memory for the error\\n     * message unnecessarily. For custom revert reasons use {trySub}.\\n     *\\n     * Counterpart to Solidity's `-` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Subtraction cannot overflow.\\n     */\\n    function sub(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\\n        unchecked {\\n            require(b <= a, errorMessage);\\n            return a - b;\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the integer division of two unsigned integers, reverting with custom message on\\n     * division by zero. The result is rounded towards zero.\\n     *\\n     * Counterpart to Solidity's `%` operator. This function uses a `revert`\\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\\n     * invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Counterpart to Solidity's `/` operator. Note: this function uses a\\n     * `revert` opcode (which leaves remaining gas untouched) while Solidity\\n     * uses an invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Requirements:\\n     *\\n     * - The divisor cannot be zero.\\n     */\\n    function div(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\\n        unchecked {\\n            require(b > 0, errorMessage);\\n            return a / b;\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\\n     * reverting with custom message when dividing by zero.\\n     *\\n     * CAUTION: This function is deprecated because it requires allocating memory for the error\\n     * message unnecessarily. For custom revert reasons use {tryMod}.\\n     *\\n     * Counterpart to Solidity's `%` operator. This function uses a `revert`\\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\\n     * invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Requirements:\\n     *\\n     * - The divisor cannot be zero.\\n     */\\n    function mod(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\\n        unchecked {\\n            require(b > 0, errorMessage);\\n            return a % b;\\n        }\\n    }\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts-upgradeable/utils/ContextUpgradeable.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\nimport \\\"../proxy/utils/Initializable.sol\\\";\\n\\n/*\\n * @dev Provides information about the current execution context, including the\\n * sender of the transaction and its data. While these are generally available\\n * via msg.sender and msg.data, they should not be accessed in such a direct\\n * manner, since when dealing with meta-transactions the account sending and\\n * paying for execution may not be the actual sender (as far as an application\\n * is concerned).\\n *\\n * This contract is only required for intermediate, library-like contracts.\\n */\\nabstract contract ContextUpgradeable is Initializable {\\n    function __Context_init() internal initializer {\\n        __Context_init_unchained();\\n    }\\n\\n    function __Context_init_unchained() internal initializer {\\n    }\\n    function _msgSender() internal view virtual returns (address) {\\n        return msg.sender;\\n    }\\n\\n    function _msgData() internal view virtual returns (bytes calldata) {\\n        this; // silence state mutability warning without generating bytecode - see https://github.com/ethereum/solidity/issues/2691\\n        return msg.data;\\n    }\\n    uint256[50] private __gap;\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts-upgradeable/utils/AddressUpgradeable.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Collection of functions related to the address type\\n */\\nlibrary AddressUpgradeable {\\n    /**\\n     * @dev Returns true if `account` is a contract.\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * It is unsafe to assume that an address for which this function returns\\n     * false is an externally-owned account (EOA) and not a contract.\\n     *\\n     * Among others, `isContract` will return false for the following\\n     * types of addresses:\\n     *\\n     *  - an externally-owned account\\n     *  - a contract in construction\\n     *  - an address where a contract will be created\\n     *  - an address where a contract lived, but was destroyed\\n     * ====\\n     */\\n    function isContract(address account) internal view returns (bool) {\\n        // This method relies on extcodesize, which returns 0 for contracts in\\n        // construction, since the code is only stored at the end of the\\n        // constructor execution.\\n\\n        uint256 size;\\n        // solhint-disable-next-line no-inline-assembly\\n        assembly { size := extcodesize(account) }\\n        return size > 0;\\n    }\\n\\n    /**\\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\\n     * `recipient`, forwarding all available gas and reverting on errors.\\n     *\\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\\n     * imposed by `transfer`, making them unable to receive funds via\\n     * `transfer`. {sendValue} removes this limitation.\\n     *\\n     * https://diligence.consensys.net/posts/2019/09/stop-using-soliditys-transfer-now/[Learn more].\\n     *\\n     * IMPORTANT: because control is transferred to `recipient`, care must be\\n     * taken to not create reentrancy vulnerabilities. Consider using\\n     * {ReentrancyGuard} or the\\n     * https://solidity.readthedocs.io/en/v0.5.11/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\\n     */\\n    function sendValue(address payable recipient, uint256 amount) internal {\\n        require(address(this).balance >= amount, \\\"Address: insufficient balance\\\");\\n\\n        // solhint-disable-next-line avoid-low-level-calls, avoid-call-value\\n        (bool success, ) = recipient.call{ value: amount }(\\\"\\\");\\n        require(success, \\\"Address: unable to send value, recipient may have reverted\\\");\\n    }\\n\\n    /**\\n     * @dev Performs a Solidity function call using a low level `call`. A\\n     * plain`call` is an unsafe replacement for a function call: use this\\n     * function instead.\\n     *\\n     * If `target` reverts with a revert reason, it is bubbled up by this\\n     * function (like regular Solidity function calls).\\n     *\\n     * Returns the raw returned data. To convert to the expected return value,\\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\\n     *\\n     * Requirements:\\n     *\\n     * - `target` must be a contract.\\n     * - calling `target` with `data` must not revert.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\\n      return functionCall(target, data, \\\"Address: low-level call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\\n     * `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(address target, bytes memory data, string memory errorMessage) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, 0, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but also transferring `value` wei to `target`.\\n     *\\n     * Requirements:\\n     *\\n     * - the calling contract must have an ETH balance of at least `value`.\\n     * - the called Solidity function must be `payable`.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(address target, bytes memory data, uint256 value) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, value, \\\"Address: low-level call with value failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\\n     * with `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(address target, bytes memory data, uint256 value, string memory errorMessage) internal returns (bytes memory) {\\n        require(address(this).balance >= value, \\\"Address: insufficient balance for call\\\");\\n        require(isContract(target), \\\"Address: call to non-contract\\\");\\n\\n        // solhint-disable-next-line avoid-low-level-calls\\n        (bool success, bytes memory returndata) = target.call{ value: value }(data);\\n        return _verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\\n        return functionStaticCall(target, data, \\\"Address: low-level static call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(address target, bytes memory data, string memory errorMessage) internal view returns (bytes memory) {\\n        require(isContract(target), \\\"Address: static call to non-contract\\\");\\n\\n        // solhint-disable-next-line avoid-low-level-calls\\n        (bool success, bytes memory returndata) = target.staticcall(data);\\n        return _verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    function _verifyCallResult(bool success, bytes memory returndata, string memory errorMessage) private pure returns(bytes memory) {\\n        if (success) {\\n            return returndata;\\n        } else {\\n            // Look for revert reason and bubble it up if present\\n            if (returndata.length > 0) {\\n                // The easiest way to bubble the revert reason is using memory via assembly\\n\\n                // solhint-disable-next-line no-inline-assembly\\n                assembly {\\n                    let returndata_size := mload(returndata)\\n                    revert(add(32, returndata), returndata_size)\\n                }\\n            } else {\\n                revert(errorMessage);\\n            }\\n        }\\n    }\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts-upgradeable/token/ERC20/IERC20Upgradeable.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC20 standard as defined in the EIP.\\n */\\ninterface IERC20Upgradeable {\\n    /**\\n     * @dev Returns the amount of tokens in existence.\\n     */\\n    function totalSupply() external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the amount of tokens owned by `account`.\\n     */\\n    function balanceOf(address account) external view returns (uint256);\\n\\n    /**\\n     * @dev Moves `amount` tokens from the caller's account to `recipient`.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transfer(address recipient, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Returns the remaining number of tokens that `spender` will be\\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\\n     * zero by default.\\n     *\\n     * This value changes when {approve} or {transferFrom} are called.\\n     */\\n    function allowance(address owner, address spender) external view returns (uint256);\\n\\n    /**\\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\\n     * that someone may use both the old and the new allowance by unfortunate\\n     * transaction ordering. One possible solution to mitigate this race\\n     * condition is to first reduce the spender's allowance to 0 and set the\\n     * desired value afterwards:\\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address spender, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Moves `amount` tokens from `sender` to `recipient` using the\\n     * allowance mechanism. `amount` is then deducted from the caller's\\n     * allowance.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(address sender, address recipient, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\\n     * another (`to`).\\n     *\\n     * Note that `value` may be zero.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 value);\\n\\n    /**\\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\\n     * a call to {approve}. `value` is the new allowance.\\n     */\\n    event Approval(address indexed owner, address indexed spender, uint256 value);\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts-upgradeable/token/ERC20/ERC20Upgradeable.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"./IERC20Upgradeable.sol\\\";\\nimport \\\"../../utils/ContextUpgradeable.sol\\\";\\nimport \\\"../../proxy/utils/Initializable.sol\\\";\\n\\n/**\\n * @dev Implementation of the {IERC20} interface.\\n *\\n * This implementation is agnostic to the way tokens are created. This means\\n * that a supply mechanism has to be added in a derived contract using {_mint}.\\n * For a generic mechanism see {ERC20PresetMinterPauser}.\\n *\\n * TIP: For a detailed writeup see our guide\\n * https://forum.zeppelin.solutions/t/how-to-implement-erc20-supply-mechanisms/226[How\\n * to implement supply mechanisms].\\n *\\n * We have followed general OpenZeppelin guidelines: functions revert instead\\n * of returning `false` on failure. This behavior is nonetheless conventional\\n * and does not conflict with the expectations of ERC20 applications.\\n *\\n * Additionally, an {Approval} event is emitted on calls to {transferFrom}.\\n * This allows applications to reconstruct the allowance for all accounts just\\n * by listening to said events. Other implementations of the EIP may not emit\\n * these events, as it isn't required by the specification.\\n *\\n * Finally, the non-standard {decreaseAllowance} and {increaseAllowance}\\n * functions have been added to mitigate the well-known issues around setting\\n * allowances. See {IERC20-approve}.\\n */\\ncontract ERC20Upgradeable is Initializable, ContextUpgradeable, IERC20Upgradeable {\\n    mapping (address => uint256) private _balances;\\n\\n    mapping (address => mapping (address => uint256)) private _allowances;\\n\\n    uint256 private _totalSupply;\\n\\n    string private _name;\\n    string private _symbol;\\n\\n    /**\\n     * @dev Sets the values for {name} and {symbol}.\\n     *\\n     * The defaut value of {decimals} is 18. To select a different value for\\n     * {decimals} you should overload it.\\n     *\\n     * All three of these values are immutable: they can only be set once during\\n     * construction.\\n     */\\n    function __ERC20_init(string memory name_, string memory symbol_) internal initializer {\\n        __Context_init_unchained();\\n        __ERC20_init_unchained(name_, symbol_);\\n    }\\n\\n    function __ERC20_init_unchained(string memory name_, string memory symbol_) internal initializer {\\n        _name = name_;\\n        _symbol = symbol_;\\n    }\\n\\n    /**\\n     * @dev Returns the name of the token.\\n     */\\n    function name() public view virtual returns (string memory) {\\n        return _name;\\n    }\\n\\n    /**\\n     * @dev Returns the symbol of the token, usually a shorter version of the\\n     * name.\\n     */\\n    function symbol() public view virtual returns (string memory) {\\n        return _symbol;\\n    }\\n\\n    /**\\n     * @dev Returns the number of decimals used to get its user representation.\\n     * For example, if `decimals` equals `2`, a balance of `505` tokens should\\n     * be displayed to a user as `5,05` (`505 / 10 ** 2`).\\n     *\\n     * Tokens usually opt for a value of 18, imitating the relationship between\\n     * Ether and Wei. This is the value {ERC20} uses, unless this function is\\n     * overloaded;\\n     *\\n     * NOTE: This information is only used for _display_ purposes: it in\\n     * no way affects any of the arithmetic of the contract, including\\n     * {IERC20-balanceOf} and {IERC20-transfer}.\\n     */\\n    function decimals() public view virtual returns (uint8) {\\n        return 18;\\n    }\\n\\n    /**\\n     * @dev See {IERC20-totalSupply}.\\n     */\\n    function totalSupply() public view virtual override returns (uint256) {\\n        return _totalSupply;\\n    }\\n\\n    /**\\n     * @dev See {IERC20-balanceOf}.\\n     */\\n    function balanceOf(address account) public view virtual override returns (uint256) {\\n        return _balances[account];\\n    }\\n\\n    /**\\n     * @dev See {IERC20-transfer}.\\n     *\\n     * Requirements:\\n     *\\n     * - `recipient` cannot be the zero address.\\n     * - the caller must have a balance of at least `amount`.\\n     */\\n    function transfer(address recipient, uint256 amount) public virtual override returns (bool) {\\n        _transfer(_msgSender(), recipient, amount);\\n        return true;\\n    }\\n\\n    /**\\n     * @dev See {IERC20-allowance}.\\n     */\\n    function allowance(address owner, address spender) public view virtual override returns (uint256) {\\n        return _allowances[owner][spender];\\n    }\\n\\n    /**\\n     * @dev See {IERC20-approve}.\\n     *\\n     * Requirements:\\n     *\\n     * - `spender` cannot be the zero address.\\n     */\\n    function approve(address spender, uint256 amount) public virtual override returns (bool) {\\n        _approve(_msgSender(), spender, amount);\\n        return true;\\n    }\\n\\n    /**\\n     * @dev See {IERC20-transferFrom}.\\n     *\\n     * Emits an {Approval} event indicating the updated allowance. This is not\\n     * required by the EIP. See the note at the beginning of {ERC20}.\\n     *\\n     * Requirements:\\n     *\\n     * - `sender` and `recipient` cannot be the zero address.\\n     * - `sender` must have a balance of at least `amount`.\\n     * - the caller must have allowance for ``sender``'s tokens of at least\\n     * `amount`.\\n     */\\n    function transferFrom(address sender, address recipient, uint256 amount) public virtual override returns (bool) {\\n        _transfer(sender, recipient, amount);\\n\\n        uint256 currentAllowance = _allowances[sender][_msgSender()];\\n        require(currentAllowance >= amount, \\\"ERC20: transfer amount exceeds allowance\\\");\\n        _approve(sender, _msgSender(), currentAllowance - amount);\\n\\n        return true;\\n    }\\n\\n    /**\\n     * @dev Atomically increases the allowance granted to `spender` by the caller.\\n     *\\n     * This is an alternative to {approve} that can be used as a mitigation for\\n     * problems described in {IERC20-approve}.\\n     *\\n     * Emits an {Approval} event indicating the updated allowance.\\n     *\\n     * Requirements:\\n     *\\n     * - `spender` cannot be the zero address.\\n     */\\n    function increaseAllowance(address spender, uint256 addedValue) public virtual returns (bool) {\\n        _approve(_msgSender(), spender, _allowances[_msgSender()][spender] + addedValue);\\n        return true;\\n    }\\n\\n    /**\\n     * @dev Atomically decreases the allowance granted to `spender` by the caller.\\n     *\\n     * This is an alternative to {approve} that can be used as a mitigation for\\n     * problems described in {IERC20-approve}.\\n     *\\n     * Emits an {Approval} event indicating the updated allowance.\\n     *\\n     * Requirements:\\n     *\\n     * - `spender` cannot be the zero address.\\n     * - `spender` must have allowance for the caller of at least\\n     * `subtractedValue`.\\n     */\\n    function decreaseAllowance(address spender, uint256 subtractedValue) public virtual returns (bool) {\\n        uint256 currentAllowance = _allowances[_msgSender()][spender];\\n        require(currentAllowance >= subtractedValue, \\\"ERC20: decreased allowance below zero\\\");\\n        _approve(_msgSender(), spender, currentAllowance - subtractedValue);\\n\\n        return true;\\n    }\\n\\n    /**\\n     * @dev Moves tokens `amount` from `sender` to `recipient`.\\n     *\\n     * This is internal function is equivalent to {transfer}, and can be used to\\n     * e.g. implement automatic token fees, slashing mechanisms, etc.\\n     *\\n     * Emits a {Transfer} event.\\n     *\\n     * Requirements:\\n     *\\n     * - `sender` cannot be the zero address.\\n     * - `recipient` cannot be the zero address.\\n     * - `sender` must have a balance of at least `amount`.\\n     */\\n    function _transfer(address sender, address recipient, uint256 amount) internal virtual {\\n        require(sender != address(0), \\\"ERC20: transfer from the zero address\\\");\\n        require(recipient != address(0), \\\"ERC20: transfer to the zero address\\\");\\n\\n        _beforeTokenTransfer(sender, recipient, amount);\\n\\n        uint256 senderBalance = _balances[sender];\\n        require(senderBalance >= amount, \\\"ERC20: transfer amount exceeds balance\\\");\\n        _balances[sender] = senderBalance - amount;\\n        _balances[recipient] += amount;\\n\\n        emit Transfer(sender, recipient, amount);\\n    }\\n\\n    /** @dev Creates `amount` tokens and assigns them to `account`, increasing\\n     * the total supply.\\n     *\\n     * Emits a {Transfer} event with `from` set to the zero address.\\n     *\\n     * Requirements:\\n     *\\n     * - `to` cannot be the zero address.\\n     */\\n    function _mint(address account, uint256 amount) internal virtual {\\n        require(account != address(0), \\\"ERC20: mint to the zero address\\\");\\n\\n        _beforeTokenTransfer(address(0), account, amount);\\n\\n        _totalSupply += amount;\\n        _balances[account] += amount;\\n        emit Transfer(address(0), account, amount);\\n    }\\n\\n    /**\\n     * @dev Destroys `amount` tokens from `account`, reducing the\\n     * total supply.\\n     *\\n     * Emits a {Transfer} event with `to` set to the zero address.\\n     *\\n     * Requirements:\\n     *\\n     * - `account` cannot be the zero address.\\n     * - `account` must have at least `amount` tokens.\\n     */\\n    function _burn(address account, uint256 amount) internal virtual {\\n        require(account != address(0), \\\"ERC20: burn from the zero address\\\");\\n\\n        _beforeTokenTransfer(account, address(0), amount);\\n\\n        uint256 accountBalance = _balances[account];\\n        require(accountBalance >= amount, \\\"ERC20: burn amount exceeds balance\\\");\\n        _balances[account] = accountBalance - amount;\\n        _totalSupply -= amount;\\n\\n        emit Transfer(account, address(0), amount);\\n    }\\n\\n    /**\\n     * @dev Sets `amount` as the allowance of `spender` over the `owner` s tokens.\\n     *\\n     * This internal function is equivalent to `approve`, and can be used to\\n     * e.g. set automatic allowances for certain subsystems, etc.\\n     *\\n     * Emits an {Approval} event.\\n     *\\n     * Requirements:\\n     *\\n     * - `owner` cannot be the zero address.\\n     * - `spender` cannot be the zero address.\\n     */\\n    function _approve(address owner, address spender, uint256 amount) internal virtual {\\n        require(owner != address(0), \\\"ERC20: approve from the zero address\\\");\\n        require(spender != address(0), \\\"ERC20: approve to the zero address\\\");\\n\\n        _allowances[owner][spender] = amount;\\n        emit Approval(owner, spender, amount);\\n    }\\n\\n    /**\\n     * @dev Hook that is called before any transfer of tokens. This includes\\n     * minting and burning.\\n     *\\n     * Calling conditions:\\n     *\\n     * - when `from` and `to` are both non-zero, `amount` of ``from``'s tokens\\n     * will be to transferred to `to`.\\n     * - when `from` is zero, `amount` tokens will be minted for `to`.\\n     * - when `to` is zero, `amount` of ``from``'s tokens will be burned.\\n     * - `from` and `to` are never both zero.\\n     *\\n     * To learn more about hooks, head to xref:ROOT:extending-contracts.adoc#using-hooks[Using Hooks].\\n     */\\n    function _beforeTokenTransfer(address from, address to, uint256 amount) internal virtual { }\\n    uint256[45] private __gap;\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\n// solhint-disable-next-line compiler-version\\npragma solidity ^0.8.0;\\n\\nimport \\\"../../utils/AddressUpgradeable.sol\\\";\\n\\n/**\\n * @dev This is a base contract to aid in writing upgradeable contracts, or any kind of contract that will be deployed\\n * behind a proxy. Since a proxied contract can't have a constructor, it's common to move constructor logic to an\\n * external initializer function, usually called `initialize`. It then becomes necessary to protect this initializer\\n * function so it can only be called once. The {initializer} modifier provided by this contract will have this effect.\\n *\\n * TIP: To avoid leaving the proxy in an uninitialized state, the initializer function should be called as early as\\n * possible by providing the encoded function call as the `_data` argument to {UpgradeableProxy-constructor}.\\n *\\n * CAUTION: When used with inheritance, manual care must be taken to not invoke a parent initializer twice, or to ensure\\n * that all initializers are idempotent. This is not verified automatically as constructors are by Solidity.\\n */\\nabstract contract Initializable {\\n\\n    /**\\n     * @dev Indicates that the contract has been initialized.\\n     */\\n    bool private _initialized;\\n\\n    /**\\n     * @dev Indicates that the contract is in the process of being initialized.\\n     */\\n    bool private _initializing;\\n\\n    /**\\n     * @dev Modifier to protect an initializer function from being invoked twice.\\n     */\\n    modifier initializer() {\\n        require(_initializing || !_initialized, \\\"Initializable: contract is already initialized\\\");\\n\\n        bool isTopLevelCall = !_initializing;\\n        if (isTopLevelCall) {\\n            _initializing = true;\\n            _initialized = true;\\n        }\\n\\n        _;\\n\\n        if (isTopLevelCall) {\\n            _initializing = false;\\n        }\\n    }\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../utils/ContextUpgradeable.sol\\\";\\nimport \\\"../proxy/utils/Initializable.sol\\\";\\n/**\\n * @dev Contract module which provides a basic access control mechanism, where\\n * there is an account (an owner) that can be granted exclusive access to\\n * specific functions.\\n *\\n * By default, the owner account will be the one that deploys the contract. This\\n * can later be changed with {transferOwnership}.\\n *\\n * This module is used through inheritance. It will make available the modifier\\n * `onlyOwner`, which can be applied to your functions to restrict their use to\\n * the owner.\\n */\\nabstract contract OwnableUpgradeable is Initializable, ContextUpgradeable {\\n    address private _owner;\\n\\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\\n\\n    /**\\n     * @dev Initializes the contract setting the deployer as the initial owner.\\n     */\\n    function __Ownable_init() internal initializer {\\n        __Context_init_unchained();\\n        __Ownable_init_unchained();\\n    }\\n\\n    function __Ownable_init_unchained() internal initializer {\\n        address msgSender = _msgSender();\\n        _owner = msgSender;\\n        emit OwnershipTransferred(address(0), msgSender);\\n    }\\n\\n    /**\\n     * @dev Returns the address of the current owner.\\n     */\\n    function owner() public view virtual returns (address) {\\n        return _owner;\\n    }\\n\\n    /**\\n     * @dev Throws if called by any account other than the owner.\\n     */\\n    modifier onlyOwner() {\\n        require(owner() == _msgSender(), \\\"Ownable: caller is not the owner\\\");\\n        _;\\n    }\\n\\n    /**\\n     * @dev Leaves the contract without owner. It will not be possible to call\\n     * `onlyOwner` functions anymore. Can only be called by the current owner.\\n     *\\n     * NOTE: Renouncing ownership will leave the contract without an owner,\\n     * thereby removing any functionality that is only available to the owner.\\n     */\\n    function renounceOwnership() public virtual onlyOwner {\\n        emit OwnershipTransferred(_owner, address(0));\\n        _owner = address(0);\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Can only be called by the current owner.\\n     */\\n    function transferOwnership(address newOwner) public virtual onlyOwner {\\n        require(newOwner != address(0), \\\"Ownable: new owner is the zero address\\\");\\n        emit OwnershipTransferred(_owner, newOwner);\\n        _owner = newOwner;\\n    }\\n    uint256[49] private __gap;\\n}\\n\"\r\n    },\r\n    \"/Users/huangpenghan/Documents_local/GitHub/HighStreet_jack/client/src/contracts/ProductToken/interface/IVNFT.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.2;\\n\\ninterface IVNFT {\\n\\n    function unitsInToken(uint256 tokenId) external view returns (uint256 units);\\n\\n    function approve(address to, uint256 tokenId, uint256 units) external;\\n\\n    function allowance(uint256 tokenId, address spender) external view returns (uint256 allowed);\\n\\n    function split(uint256 tokenId, uint256[] calldata units) external returns (uint256[] memory newTokenIds);\\n\\n    function merge(uint256[] calldata tokenIds, uint256 targetTokenId) external;\\n\\n    function transferFrom(address from, address to, uint256 tokenId,\\n        uint256 units) external returns (uint256 newTokenId);\\n\\n    function safeTransferFrom(address from, address to, uint256 tokenId,\\n        uint256 units, bytes calldata data) external returns (uint256 newTokenId);\\n\\n    function transferFrom(address from, address to, uint256 tokenId, uint256 targetTokenId,\\n        uint256 units) external;\\n\\n    function safeTransferFrom(address from, address to, uint256 tokenId, uint256 targetTokenId,\\n        uint256 units, bytes calldata data) external;\\n\\n    function balanceOf(address owner) external view returns (uint256 balance);\\n    function ownerOf(uint256 tokenId) external view returns (address owner);\\n    function tokenOfOwnerByIndex(address owner, uint256 index) external view returns (uint256);\\n\\n}\"\r\n    },\r\n    \"/Users/huangpenghan/Documents_local/GitHub/HighStreet_jack/client/src/contracts/ProductToken/interface/BancorBondingCurveV1Interface.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.2;\\n\\ninterface BancorBondingCurveV1Interface {\\n\\n  function calculatePriceForNTokens(\\n    uint32 _supply,\\n    uint256 _reserveBalance,\\n    uint32 _reserveRatio,\\n    uint32 _amount\\n  )\\n    external\\n    view\\n    returns (\\n      uint256\\n    );\\n\\n  function calculatePurchaseReturn(\\n    uint32 _supply,\\n    uint256 _reserveBalance,\\n    uint32 _reserveRatio,\\n    uint256 _depositAmount\\n  )\\n    external\\n    view\\n    returns (\\n      uint32\\n    );\\n\\n  function calculateSaleReturn(\\n    uint32 _supply,\\n    uint256 _reserveBalance,\\n    uint32 _reserveRatio,\\n    uint32 _sellAmount\\n  )\\n    external\\n    view\\n    returns(\\n      uint256\\n    );\\n}\"\r\n    },\r\n    \"/Users/huangpenghan/Documents_local/GitHub/HighStreet_jack/client/src/contracts/ProductToken/ProductToken.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.2;\\n\\nimport \\\"@openzeppelin/contracts/token/ERC20/IERC20.sol\\\";\\nimport \\\"@openzeppelin/contracts-upgradeable/token/ERC20/ERC20Upgradeable.sol\\\";\\nimport \\\"@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol\\\";\\nimport \\\"@openzeppelin/contracts-upgradeable/utils/math/SafeMathUpgradeable.sol\\\";\\n\\nimport \\\"./interface/BancorBondingCurveV1Interface.sol\\\";\\nimport \\\"./Escrow.sol\\\";\\n\\n/// @title ProductToken\\n/// @notice This is version 0 of the product token implementation.\\n/// @dev This contract lays the foundation for transaction computations, including\\n///   bonding curve calculations and variable management. Version 0 of this contract\\n///   does not implement any transaction logic.\\ncontract ProductToken is ERC20Upgradeable, Escrow, OwnableUpgradeable {\\n\\tusing SafeMathUpgradeable for uint256;\\n\\n\\tevent Buy(address indexed sender, uint32 amount, uint256 price);\\t\\t// event to fire when a new token is minted\\n  event Sell(address indexed sender, uint32 amount, uint256 price);\\t\\t// event to fire when a token has been sold back\\n  event Tradein(address indexed sender, uint32 amount);\\t\\t\\t\\t\\t\\t\\t// event to fire when a token is redeemed in the real world\\n  event Tradable(bool isTradable);\\n\\n  bool private isTradable;\\n  uint256 public reserveBalance;      // amount of liquidity in the pool\\n  uint256 public tradeinReserveBalance;      // amount of liquidity in the pool\\n  uint32 public reserveRatio;         // computed from the exponential factor in the\\n  uint32 public maxTokenCount;        // max token count, determined by the supply of our physical product\\n  uint32 public tradeinCount;         // number of tokens burned through redeeming procedure. This will drive price up permanently\\n  uint32 internal supplyOffset;       // an initial value used to set an initial price. This is not included in the total supply.\\n  address private _manager;\\n\\n  BancorBondingCurveV1Interface internal bondingCurve;\\n\\n  modifier onlyIfTradable {\\n      require(\\n          isTradable,\\n          \\\"unable to trade now\\\"\\n      );\\n      _;\\n  }\\n\\n\\t/**\\n   * @dev initializer function.\\n   *\\n   * @param _name                     the name of this token\\n   * @param _symbol                   the symbol of this token\\n   * @param _reserveRatio             the reserve ratio in the curve function. Number in parts per million\\n   * @param _maxTokenCount\\t\\t\\t\\t\\t\\tthe amount of token that will exist for this type.\\n   * @param _supplyOffset             this amount is used to determine initial price.\\n   * @param _baseReserve              the base amount of reserve tokens, in accordance to _supplyOffset.\\n   *\\n  */\\n  function initialize(string memory _name, string memory _symbol, address _bondingCurveAddress,\\n      uint32 _reserveRatio, uint32 _maxTokenCount, uint32 _supplyOffset, uint256 _baseReserve) public virtual initializer{\\n    __Ownable_init();\\n    __ERC20_init(_name, _symbol);\\n    __ProductToken_init_unchained(_bondingCurveAddress, _reserveRatio, _maxTokenCount, _supplyOffset, _baseReserve);\\n  }\\n\\n  /**\\n   * @dev unchained initializer function.\\n   *\\n   * @param _reserveRatio             the reserve ratio in the curve function. Number in parts per million\\n   * @param _maxTokenCount            the amount of token that will exist for this type.\\n   * @param _supplyOffset             this amount is used to determine initial price.\\n   * @param _baseReserve              the base amount of reserve tokens, in accordance to _supplyOffset.\\n   *\\n  */\\n  function __ProductToken_init_unchained(address _bondingCurveAddress, uint32 _reserveRatio, uint32 _maxTokenCount, uint32 _supplyOffset, uint256 _baseReserve) internal initializer{\\n    require(_maxTokenCount > 0, \\\"Invalid max token count.\\\");\\n    require(_reserveRatio > 0, \\\"Invalid reserve ratio\\\");\\n    bondingCurve = BancorBondingCurveV1Interface(_bondingCurveAddress);\\n    reserveBalance = _baseReserve;\\n    tradeinReserveBalance = _baseReserve;\\n    supplyOffset = _supplyOffset;\\n    reserveRatio = _reserveRatio;\\n    maxTokenCount = _maxTokenCount;\\n  }\\n\\n  function decimals() public view virtual override returns (uint8) {\\n      return 0;\\n  }\\n\\n  /**\\n   * @dev requires function to be called from owner. sets a bonding curve implementation for this product.\\n   *\\n   * @param _address             the address of the bonding curve implementation\\n   *\\n  */\\n  function setBondingCurve(address _address) external virtual onlyOwner {\\n    require(_address!=address(0), \\\"Invalid address\\\");\\n    bondingCurve = BancorBondingCurveV1Interface(_address);\\n  }\\n\\n  /**\\n   * @dev requires function to be called from owner. this enables customers to buy, sell, or redeem the product.\\n   *\\n  */\\n  function launch() external virtual onlyOwner {\\n    require(!isTradable, 'The product token is already launched');\\n    isTradable = true;\\n    emit Tradable(isTradable);\\n  }\\n\\n  /**\\n   * @dev requires function to be called from owner. this prevents customers from buying, selling, or redeeming the product.\\n   *\\n  */\\n  function pause() external virtual onlyOwner {\\n    require(isTradable, 'The product token is already paused');\\n    isTradable = false;\\n    emit Tradable(isTradable);\\n  }\\n\\n  fallback () external { }\\n\\n  /**\\n   * @dev Function to check how many tokens of this product are currently available for purchase,\\n   * by taking the difference between max cap count and current token in circulation or burned.\\n   *\\n   * @return available                the number of tokens available\\n  */\\n  function getAvailability()\\n    public view virtual returns (uint32 available)\\n  {\\n    return maxTokenCount - uint32(totalSupply()) - tradeinCount;    // add safemath for uint32 later\\n  }\\n\\n  /**\\n   * @dev Function that computes supply value for the bonding curve\\n   * based on current token in circulation, token offset initialized, and tokens already redeemed.\\n   *\\n   * @return supply                   supply value for bonding curve calculation.\\n  */\\n  function _getTotalSupply()\\n    internal view virtual returns (uint32 supply)\\n  {\\n    return uint32(totalSupply().add(uint256(tradeinCount)).add(uint256(supplyOffset)));\\n  }\\n\\n  /**\\n   * @dev Function that computes current price for a token through bonding curve calculation\\n   * based on parameters such as total supply, reserve balance, and reserve ratio.\\n   *\\n   * @return price                   current price in reserve token (in our case, this is dai). (with 4% platform fee)\\n  */\\n  function getCurrentPrice()\\n  \\tpublic view virtual returns\\t(uint256 price)\\n  {\\n    return getPriceForN(1);\\n  }\\n\\n  /**\\n   * @dev Function that computes price total for buying n token through bonding curve calculation\\n   * based on parameters such as total supply, reserve balance, and reserve ratio.\\n   *\\n   * @param  _amountProduct          token amount in traded token\\n   * @return price                   total price in reserve token (in our case, this is dai). (with 4% platform fee)\\n  */\\n  function getPriceForN(uint32 _amountProduct)\\n  \\tpublic view virtual returns\\t(uint256 price)\\n  {\\n    (uint value, uint fee) = _getPriceForN(_amountProduct);\\n    return value.add(fee);\\n  }\\n\\n  function _getPriceForN(uint32 _amountProduct)\\n  \\tinternal view virtual returns\\t(uint256, uint256) {\\n      uint256 price = bondingCurve.calculatePriceForNTokens(_getTotalSupply(), reserveBalance, reserveRatio, _amountProduct);\\n      //4% is the platform transaction fee\\n      uint256 fee = price.mul(4e12).div(1e14);\\n      return (price, fee);\\n    }\\n\\n  function _buyReturn(uint256 _amountReserve)\\n    internal view virtual returns (uint32, uint)\\n  {\\n    uint value = _amountReserve.mul(1e12).div(1.04e12);\\n    //4% is the platform transaction fee\\n    uint fee = value.mul(4e12).div(1e14);\\n    uint32 amount = bondingCurve.calculatePurchaseReturn(_getTotalSupply(), reserveBalance, reserveRatio, value.sub(fee));\\n    return (amount, fee);\\n  }\\n\\n  /**\\n   * @dev Function that computes number of product tokens one can buy given an amount in reserve token.\\n   *\\n   * @param  _amountReserve          purchaing amount in reserve token (dai)(with 4% platform fee)\\n   * @return mintAmount              number of tokens in traded token that can be purchased by given amount.\\n  */\\n  function calculateBuyReturn(uint256 _amountReserve)\\n    public view virtual returns (uint32 mintAmount)\\n  {\\n    (uint32 amount,) = _buyReturn(_amountReserve);\\n    return amount;\\n  }\\n\\n  function _sellReturn(uint32 _amountProduct)\\n    internal view virtual returns (uint256, uint256)\\n  {\\n    // ppm of 98%. 2% is the platform transaction fee\\n    uint reimburseAmount = bondingCurve.calculateSaleReturn(_getTotalSupply(), reserveBalance, reserveRatio, _amountProduct);\\n    uint fee = reimburseAmount.mul(2e10).div(1e12);\\n    return (reimburseAmount, fee);\\n  }\\n\\n  /**\\n   * @dev Function that computes selling price in reserve tokens given an amount in traded token.\\n   *\\n   * @param  _amountProduct          selling amount in product token\\n   * @return soldAmount              total amount that will be transferred to the seller (with 2% platform fee).\\n  */\\n  function calculateSellReturn(uint32 _amountProduct)\\n    public view virtual returns (uint256 soldAmount)\\n  {\\n    (uint reimburseAmount, uint fee) = _sellReturn(_amountProduct);\\n    return reimburseAmount.sub(fee);\\n  }\\n\\n   /**\\n   * @dev calculates the return for a given conversion (in product token)\\n   * This function validate whether is enough to purchase token.\\n   * If enough, the function will deduct, and then mint one token for the user. Any extras are return as change.\\n   * If not enough, will return as change directly\\n   * then replace the _amount with the actual amount and proceed with the above logic.\\n   *\\n   * @param _deposit              reserve token deposited\\n   *\\n   * @return token                amount bought in product token\\n   * @return change               amount of change in reserve tokens.\\n   * @return price\\n   * @return fee\\n  */\\n  function _buy(uint256 _deposit)\\n    internal virtual returns (uint32, uint256, uint256, uint256)\\n  {\\n  \\trequire(getAvailability() > 0, \\\"Sorry, this token is sold out.\\\");\\n    require(_deposit > 0, \\\"Deposit must be non-zero.\\\");\\n\\n    (uint price, uint fee ) = _getPriceForN(1);\\n\\n    if (price > _deposit) {\\n      return (0, _deposit, 0, 0);\\n    }\\n    _mint(msg.sender, 1);\\n    reserveBalance = reserveBalance.add(price);\\n    emit Buy(msg.sender, 1, price.add(fee));\\n    return (1, _deposit.sub(price).sub(fee), price, fee);\\n  }\\n\\n   /**\\n   * @dev calculates the return for a given conversion (in the reserve token)\\n   * This function will try to compute the amount of liquidity one gets by selling _amount token,\\n   * then it will initiate a transfer.\\n   *\\n   * @param _amount              amount of product token wishes to be sold\\n   *\\n   * @return amount               amount sold in reserved token\\n   * @return fee\\n  */\\n  function _sellForAmount(uint32 _amount)\\n    internal virtual returns (uint256, uint256)\\n  {\\n  \\trequire(_amount > 0, \\\"Amount must be non-zero.\\\");\\n    require(balanceOf(msg.sender) >= _amount, \\\"Insufficient tokens to sell.\\\");\\n    // calculate amount of liquidity to reimburse\\n  \\t(uint256 reimburseAmount, uint256 fee) = _sellReturn(_amount);\\n \\t\\treserveBalance = reserveBalance.sub(reimburseAmount);\\n    _burn(msg.sender, _amount);\\n\\n    emit Sell(msg.sender, _amount, reimburseAmount);\\n    return (reimburseAmount.sub(fee), fee);\\n  }\\n\\n  function calculateTradinReturn(uint32 _amount)\\n    public view virtual returns (uint256)\\n  {\\n  \\trequire(_amount > 0, \\\"invalid amount\\\");\\n    uint32 supply = uint32(uint256(_amount).add(uint256(tradeinCount)).add(uint256(supplyOffset)));\\n  \\treturn bondingCurve.calculateSaleReturn(supply, tradeinReserveBalance, reserveRatio, _amount);\\n  }\\n\\n\\n  /**\\n   * @dev used to update the status of redemption to \\\"User Complete\\\" after an escrow process has been started.\\n   *\\n   * @param buyer                 the wallet address of product buyer\\n   * @param id                    the id of the escrow, returned to the user after starting of redemption process\\n  */\\n  function updateUserCompleted(address buyer, uint256 id) external virtual {\\n    require(msg.sender == owner() || msg.sender == _manager, 'permission denied');\\n    require(buyer != address(0), \\\"Invalid buyer\\\");\\n    _updateUserCompleted(buyer, id);\\n  }\\n\\n  /**\\n   * @dev used to update the status of redemption to \\\"User Refunded\\\" after an escrow process has been started.\\n   *\\n   * @param buyer                 the wallet address of product buyer\\n   * @param id                    the id of the escrow, returned to the user after starting of redemption process\\n  */\\n  function updateUserRefund(address buyer, uint256 id) external virtual{\\n    require(msg.sender == owner() || msg.sender == _manager, 'permission denied');\\n    require(buyer != address(0), \\\"Invalid buyer\\\");\\n    uint256 value = _updateUserRefund(buyer, id);\\n    require(value >0 , \\\"Invalid value\\\");\\n    _refund(buyer, value);\\n  }\\n\\n  /**\\n   * @dev refund function.\\n   * This function returns the equivalent amount of Dai (reserve currency) to a product owner if an redemption fails\\n   * This is only triggered in the extremely rare cases.\\n   * This function is not implemented in Version 0 of Product Token\\n   *\\n   * @param _buyer       The wallet address of the owner whose product token is under the redemption process\\n   * @param _value       The market value of the token being redeemed\\n  */\\n  function _refund(address _buyer, uint256 _value) internal virtual {\\n    // override\\n  }\\n\\n  function setManager(address addr_) external virtual onlyOwner {\\n    require(addr_ != address(0), 'invalid address');\\n    _manager = addr_;\\n  }\\n\\n  function getManager() external view virtual returns(address) {\\n    return _manager;\\n  }\\n\\n}\\n\\n\"\r\n    },\r\n    \"/Users/huangpenghan/Documents_local/GitHub/HighStreet_jack/client/src/contracts/ProductToken/Escrow.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.2;\\n\\ncontract Escrow {\\n\\n  /**\\n     * @dev this is the enum representation of shipping status.\\n     * INITIAL                When an escrow has been created\\n     * AWAITING_PROCESSING    When an escrow has been locked and product is in transit\\n     * COMPLETE_USER_REFUND   When an product shipment has failed and user refund is happening\\n     * COMPLETE               When an shipment is delivered successfully\\n  */\\n  enum escrowState {\\n    INITIAL,\\n    AWAITING_PROCESSING,\\n    COMPLETE_USER_REFUND,\\n    COMPLETE\\n  }\\n\\n  /**\\n     * @dev this is the struct class of escrow.\\n     * state                  The current shipping status\\n     * amount                 The amount of token being redeemed\\n     * value                  The actual reserve token being locked up\\n  */\\n  struct escrowInfo {\\n    escrowState state;\\n    uint32 amount;\\n    uint256 value;\\n  }\\n\\n  mapping(address => escrowInfo[]) public escrowList;       // A list of user to escrow being saved\\n\\n  event escrowStateUpdated(address, uint256, escrowInfo);   // Event that's fired when a new redeem request has been created.\\n\\n  /**\\n     * @dev Create a new escrow and add it to the list of pending escrows.\\n     *\\n     * @param _amount        The amount of tokens being redeemed\\n     * @param _value         The value of the product in reserve token\\n     * @return               The id of the escrow created\\n  */\\n  function _addEscrow(uint32 _amount, uint256 _value) internal virtual returns (uint256){\\n    require(_amount > 0, 'Invalid Amount');\\n    escrowInfo memory info;\\n    info.state = escrowState.AWAITING_PROCESSING;\\n    info.amount = _amount;\\n    info.value = _value;\\n    escrowList[msg.sender].push(info);\\n    uint256 _id = escrowList[msg.sender].length -1;\\n    emit escrowStateUpdated(msg.sender, _id, info);\\n    return _id;\\n  }\\n\\n  /**\\n     * @dev Update state for the redemption process to completed\\n     * This is triggered by our backend after shipment partner has confirmed delivery\\n     *\\n     * @param _buyer        The wallet address of the user\\n     * @param _id           The cached id of the escrow, retrieved from database\\n  */\\n  function _updateUserCompleted(address _buyer, uint256 _id) internal virtual {\\n    require(_id >=  0 || _id < escrowList[_buyer].length, \\\"Invalid id\\\");\\n    require(!isStateCompleted(escrowList[_buyer][_id].state), \\\"already completed\\\");\\n\\n    escrowList[_buyer][_id].state = escrowState.COMPLETE;\\n    emit escrowStateUpdated(_buyer, _id, escrowList[_buyer][_id]);\\n  }\\n\\n  /**\\n     * @dev Update state for the redemption process to refunded\\n     * This is triggered by our backend after shipment partner has confirmed deilvery failed\\n     *\\n     * @param _buyer        The wallet address of the user\\n     * @param _id           The cached id of the escrow, retrieved from database\\n     * @return              The amount of reserve currency in dai that needs to be refunded.\\n  */\\n  function _updateUserRefund(address _buyer, uint256 _id) internal virtual returns (uint) {\\n    require(_id >=  0 || _id < escrowList[_buyer].length, \\\"Invalid id\\\");\\n    require(!isStateCompleted(escrowList[_buyer][_id].state), \\\"already completed\\\");\\n\\n    escrowList[_buyer][_id].state = escrowState.COMPLETE_USER_REFUND;\\n    emit escrowStateUpdated(_buyer, _id, escrowList[_buyer][_id]);\\n    return escrowList[_buyer][_id].value;\\n  }\\n\\n  /**\\n     * @dev Helper function to check whether a escrow state is completed\\n     *\\n     * @param _state       The state to be checked\\n  */\\n  function isStateCompleted(escrowState _state) public pure virtual returns (bool) {\\n    return _state == escrowState.COMPLETE ||\\n         _state == escrowState.COMPLETE_USER_REFUND;\\n  }\\n\\n  /**\\n     * @dev Return the list of all escrows created for a certain user\\n     *\\n     * @param _buyer       The address of the buyer\\n     * @return             A list of past escrows\\n  */\\n  function getEscrowHistory(address _buyer) external view virtual returns (escrowInfo [] memory) {\\n    return escrowList[_buyer];\\n  }\\n\\n  /** \\n     * @dev Get status of a particular redemption process\\n     *\\n     * @param _buyer       The address of the buyer\\n     * @param _id          The cached id of the escrow, retrieved from database\\n     * @return             The current status\\n  */\\n  function getRedeemStatus(address _buyer, uint256 _id) external view virtual returns (escrowState) {\\n    require(_id >=  0 || _id < escrowList[_buyer].length, \\\"Invalid id\\\");\\n    return escrowList[_buyer][_id].state;\\n  }\\n\\n}\\n\"\r\n    }\r\n  },\r\n  \"settings\": {\r\n    \"remappings\": [],\r\n    \"optimizer\": {\r\n      \"enabled\": true,\r\n      \"runs\": 50\r\n    },\r\n    \"evmVersion\": \"byzantium\",\r\n    \"libraries\": {},\r\n    \"outputSelection\": {\r\n      \"*\": {\r\n        \"*\": [\r\n          \"evm.bytecode\",\r\n          \"evm.deployedBytecode\",\r\n          \"devdoc\",\r\n          \"userdoc\",\r\n          \"metadata\",\r\n          \"abi\"\r\n        ]\r\n      }\r\n    }\r\n  }\r\n}}","ABI":"[{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Approval\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint32\",\"name\":\"amount\",\"type\":\"uint32\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"price\",\"type\":\"uint256\"}],\"name\":\"Buy\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint32\",\"name\":\"amount\",\"type\":\"uint32\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"price\",\"type\":\"uint256\"}],\"name\":\"Sell\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"bool\",\"name\":\"isTradable\",\"type\":\"bool\"}],\"name\":\"Tradable\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint32\",\"name\":\"amount\",\"type\":\"uint32\"}],\"name\":\"Tradein\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Transfer\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"},{\"components\":[{\"internalType\":\"enum Escrow.escrowState\",\"name\":\"state\",\"type\":\"uint8\"},{\"internalType\":\"uint32\",\"name\":\"amount\",\"type\":\"uint32\"},{\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"indexed\":false,\"internalType\":\"struct Escrow.escrowInfo\",\"name\":\"\",\"type\":\"tuple\"}],\"name\":\"escrowStateUpdated\",\"type\":\"event\"},{\"stateMutability\":\"nonpayable\",\"type\":\"fallback\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"}],\"name\":\"allowance\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"approve\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"maxPrice_\",\"type\":\"uint256\"}],\"name\":\"buy\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_amountReserve\",\"type\":\"uint256\"}],\"name\":\"calculateBuyReturn\",\"outputs\":[{\"internalType\":\"uint32\",\"name\":\"mintAmount\",\"type\":\"uint32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint32\",\"name\":\"_amountProduct\",\"type\":\"uint32\"}],\"name\":\"calculateSellReturn\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"soldAmount\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint32\",\"name\":\"_amount\",\"type\":\"uint32\"}],\"name\":\"calculateTradinReturn\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"amount_\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"to_\",\"type\":\"address\"}],\"name\":\"claimHigh\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"amount_\",\"type\":\"uint256\"}],\"name\":\"claimSupplier\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"decimals\",\"outputs\":[{\"internalType\":\"uint8\",\"name\":\"\",\"type\":\"uint8\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"subtractedValue\",\"type\":\"uint256\"}],\"name\":\"decreaseAllowance\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"escrowList\",\"outputs\":[{\"internalType\":\"enum Escrow.escrowState\",\"name\":\"state\",\"type\":\"uint8\"},{\"internalType\":\"uint32\",\"name\":\"amount\",\"type\":\"uint32\"},{\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getAvailability\",\"outputs\":[{\"internalType\":\"uint32\",\"name\":\"available\",\"type\":\"uint32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getCurrentPrice\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"price\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_buyer\",\"type\":\"address\"}],\"name\":\"getEscrowHistory\",\"outputs\":[{\"components\":[{\"internalType\":\"enum Escrow.escrowState\",\"name\":\"state\",\"type\":\"uint8\"},{\"internalType\":\"uint32\",\"name\":\"amount\",\"type\":\"uint32\"},{\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"internalType\":\"struct Escrow.escrowInfo[]\",\"name\":\"\",\"type\":\"tuple[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getManager\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint32\",\"name\":\"_amountProduct\",\"type\":\"uint32\"}],\"name\":\"getPriceForN\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"price\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_buyer\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_id\",\"type\":\"uint256\"}],\"name\":\"getRedeemStatus\",\"outputs\":[{\"internalType\":\"enum Escrow.escrowState\",\"name\":\"\",\"type\":\"uint8\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"addedValue\",\"type\":\"uint256\"}],\"name\":\"increaseAllowance\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"string\",\"name\":\"_name\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"_symbol\",\"type\":\"string\"},{\"internalType\":\"address\",\"name\":\"_bondingCurveAddress\",\"type\":\"address\"},{\"internalType\":\"uint32\",\"name\":\"_reserveRatio\",\"type\":\"uint32\"},{\"internalType\":\"uint32\",\"name\":\"_maxTokenCount\",\"type\":\"uint32\"},{\"internalType\":\"uint32\",\"name\":\"_supplyOffset\",\"type\":\"uint32\"},{\"internalType\":\"uint256\",\"name\":\"_baseReserve\",\"type\":\"uint256\"}],\"name\":\"initialize\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"enum Escrow.escrowState\",\"name\":\"_state\",\"type\":\"uint8\"}],\"name\":\"isStateCompleted\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"launch\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"maxTokenCount\",\"outputs\":[{\"internalType\":\"uint32\",\"name\":\"\",\"type\":\"uint32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"name\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"pause\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"reserveBalance\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"reserveRatio\",\"outputs\":[{\"internalType\":\"uint32\",\"name\":\"\",\"type\":\"uint32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint32\",\"name\":\"amount_\",\"type\":\"uint32\"}],\"name\":\"sell\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_address\",\"type\":\"address\"}],\"name\":\"setBondingCurve\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"highAddress_\",\"type\":\"address\"}],\"name\":\"setHigh\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"addr_\",\"type\":\"address\"}],\"name\":\"setManager\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"wallet_\",\"type\":\"address\"}],\"name\":\"setSupplier\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"supplier\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"wallet\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"symbol\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalSupply\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"tradeinCount\",\"outputs\":[{\"internalType\":\"uint32\",\"name\":\"\",\"type\":\"uint32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"tradeinReserveBalance\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"recipient\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"transfer\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"recipient\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"transferFrom\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"buyer\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"id\",\"type\":\"uint256\"}],\"name\":\"updateUserCompleted\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"buyer\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"id\",\"type\":\"uint256\"}],\"name\":\"updateUserRefund\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"voucher\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"addr\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"}]","ContractName":"ProductTokenV1","CompilerVersion":"v0.8.3+commit.8d00100c","OptimizationUsed":"1","Runs":"50","ConstructorArguments":"","EVMVersion":"byzantium","Library":"","LicenseType":"","Proxy":"0","Implementation":"","SwarmSource":""}]}