{"status":"1","message":"OK","result":[{"SourceCode":"// SPDX-License-Identifier: UNLICENSED\r\n\r\npragma solidity 0.8.6;\r\n\r\ninterface IVaultController {\r\n  function depositsEnabled() external view returns(bool);\r\n  function depositLimit(address _vault) external view returns(uint);\r\n  function setRebalancer(address _rebalancer) external;\r\n  function rebalancer() external view returns(address);\r\n}\r\n\r\ninterface IVaultRebalancer {\r\n  function unload(address _vault, address _pair, uint _amount) external;\r\n  function distributeIncome(address _vault) external;\r\n}\r\n\r\ninterface IERC20 {\r\n  function totalSupply() external view returns (uint);\r\n  function balanceOf(address account) external view returns (uint);\r\n  function transfer(address recipient, uint256 amount) external returns (bool);\r\n  function allowance(address owner, address spender) external view returns (uint);\r\n  function symbol() external view returns (string memory);\r\n  function decimals() external view returns (uint);\r\n  function approve(address spender, uint amount) external returns (bool);\r\n  function mint(address account, uint amount) external;\r\n  function burn(address account, uint amount) external;\r\n  function transferFrom(address sender, address recipient, uint amount) external returns (bool);\r\n  event Transfer(address indexed from, address indexed to, uint value);\r\n  event Approval(address indexed owner, address indexed spender, uint value);\r\n}\r\n\r\ncontract ERC20 {\r\n\r\n  event Transfer(address indexed from, address indexed to, uint value);\r\n  event Approval(address indexed owner, address indexed spender, uint value);\r\n\r\n  mapping (address => uint) public balanceOf;\r\n  mapping (address => mapping (address => uint)) public allowance;\r\n\r\n  string public name;\r\n  string public symbol;\r\n  uint8  public decimals;\r\n  uint   public totalSupply;\r\n\r\n  constructor(\r\n    string memory _name,\r\n    string memory _symbol,\r\n    uint8 _decimals\r\n  ) {\r\n    name = _name;\r\n    symbol = _symbol;\r\n    decimals = _decimals;\r\n    require(_decimals > 0, \"decimals\");\r\n  }\r\n\r\n  function transfer(address _recipient, uint _amount) external returns (bool) {\r\n    _transfer(msg.sender, _recipient, _amount);\r\n    return true;\r\n  }\r\n\r\n  function approve(address _spender, uint _amount) external returns (bool) {\r\n    _approve(msg.sender, _spender, _amount);\r\n    return true;\r\n  }\r\n\r\n  function transferFrom(address _sender, address _recipient, uint _amount) external returns (bool) {\r\n    require(allowance[_sender][msg.sender] >= _amount, \"ERC20: insufficient approval\");\r\n    _transfer(_sender, _recipient, _amount);\r\n    _approve(_sender, msg.sender, allowance[_sender][msg.sender] - _amount);\r\n    return true;\r\n  }\r\n\r\n  function _transfer(address _sender, address _recipient, uint _amount) internal virtual {\r\n    require(_sender != address(0), \"ERC20: transfer from the zero address\");\r\n    require(_recipient != address(0), \"ERC20: transfer to the zero address\");\r\n    require(balanceOf[_sender] >= _amount, \"ERC20: insufficient funds\");\r\n\r\n    balanceOf[_sender] -= _amount;\r\n    balanceOf[_recipient] += _amount;\r\n    emit Transfer(_sender, _recipient, _amount);\r\n  }\r\n\r\n  function _mint(address _account, uint _amount) internal {\r\n    require(_account != address(0), \"ERC20: mint to the zero address\");\r\n\r\n    totalSupply += _amount;\r\n    balanceOf[_account] += _amount;\r\n    emit Transfer(address(0), _account, _amount);\r\n  }\r\n\r\n  function _burn(address _account, uint _amount) internal {\r\n    require(_account != address(0), \"ERC20: burn from the zero address\");\r\n\r\n    balanceOf[_account] -= _amount;\r\n    totalSupply -= _amount;\r\n    emit Transfer(_account, address(0), _amount);\r\n  }\r\n\r\n  function _approve(address _owner, address _spender, uint _amount) internal {\r\n    require(_owner != address(0), \"ERC20: approve from the zero address\");\r\n    require(_spender != address(0), \"ERC20: approve to the zero address\");\r\n\r\n    allowance[_owner][_spender] = _amount;\r\n    emit Approval(_owner, _spender, _amount);\r\n  }\r\n}\r\n\r\nlibrary Address {\r\n    /**\r\n     * @dev Returns true if `account` is a contract.\r\n     *\r\n     * [IMPORTANT]\r\n     * ====\r\n     * It is unsafe to assume that an address for which this function returns\r\n     * false is an externally-owned account (EOA) and not a contract.\r\n     *\r\n     * Among others, `isContract` will return false for the following\r\n     * types of addresses:\r\n     *\r\n     *  - an externally-owned account\r\n     *  - a contract in construction\r\n     *  - an address where a contract will be created\r\n     *  - an address where a contract lived, but was destroyed\r\n     * ====\r\n     */\r\n    function isContract(address account) internal view returns (bool) {\r\n        // This method relies on extcodesize, which returns 0 for contracts in\r\n        // construction, since the code is only stored at the end of the\r\n        // constructor execution.\r\n\r\n        uint256 size;\r\n        // solhint-disable-next-line no-inline-assembly\r\n        assembly { size := extcodesize(account) }\r\n        return size > 0;\r\n    }\r\n\r\n    /**\r\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\r\n     * `recipient`, forwarding all available gas and reverting on errors.\r\n     *\r\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\r\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\r\n     * imposed by `transfer`, making them unable to receive funds via\r\n     * `transfer`. {sendValue} removes this limitation.\r\n     *\r\n     * https://diligence.consensys.net/posts/2019/09/stop-using-soliditys-transfer-now/[Learn more].\r\n     *\r\n     * IMPORTANT: because control is transferred to `recipient`, care must be\r\n     * taken to not create reentrancy vulnerabilities. Consider using\r\n     * {ReentrancyGuard} or the\r\n     * https://solidity.readthedocs.io/en/v0.5.11/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\r\n     */\r\n    function sendValue(address payable recipient, uint256 amount) internal {\r\n        require(address(this).balance >= amount, \"Address: insufficient balance\");\r\n\r\n        // solhint-disable-next-line avoid-low-level-calls, avoid-call-value\r\n        (bool success, ) = recipient.call{ value: amount }(\"\");\r\n        require(success, \"Address: unable to send value, recipient may have reverted\");\r\n    }\r\n\r\n    /**\r\n     * @dev Performs a Solidity function call using a low level `call`. A\r\n     * plain`call` is an unsafe replacement for a function call: use this\r\n     * function instead.\r\n     *\r\n     * If `target` reverts with a revert reason, it is bubbled up by this\r\n     * function (like regular Solidity function calls).\r\n     *\r\n     * Returns the raw returned data. To convert to the expected return value,\r\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - `target` must be a contract.\r\n     * - calling `target` with `data` must not revert.\r\n     *\r\n     * _Available since v3.1._\r\n     */\r\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\r\n      return functionCall(target, data, \"Address: low-level call failed\");\r\n    }\r\n\r\n    /**\r\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\r\n     * `errorMessage` as a fallback revert reason when `target` reverts.\r\n     *\r\n     * _Available since v3.1._\r\n     */\r\n    function functionCall(address target, bytes memory data, string memory errorMessage) internal returns (bytes memory) {\r\n        return functionCallWithValue(target, data, 0, errorMessage);\r\n    }\r\n\r\n    /**\r\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\r\n     * but also transferring `value` wei to `target`.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - the calling contract must have an ETH balance of at least `value`.\r\n     * - the called Solidity function must be `payable`.\r\n     *\r\n     * _Available since v3.1._\r\n     */\r\n    function functionCallWithValue(address target, bytes memory data, uint256 value) internal returns (bytes memory) {\r\n        return functionCallWithValue(target, data, value, \"Address: low-level call with value failed\");\r\n    }\r\n\r\n    /**\r\n     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\r\n     * with `errorMessage` as a fallback revert reason when `target` reverts.\r\n     *\r\n     * _Available since v3.1._\r\n     */\r\n    function functionCallWithValue(address target, bytes memory data, uint256 value, string memory errorMessage) internal returns (bytes memory) {\r\n        require(address(this).balance >= value, \"Address: insufficient balance for call\");\r\n        require(isContract(target), \"Address: call to non-contract\");\r\n\r\n        // solhint-disable-next-line avoid-low-level-calls\r\n        (bool success, bytes memory returndata) = target.call{ value: value }(data);\r\n        return _verifyCallResult(success, returndata, errorMessage);\r\n    }\r\n\r\n    /**\r\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\r\n     * but performing a static call.\r\n     *\r\n     * _Available since v3.3._\r\n     */\r\n    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\r\n        return functionStaticCall(target, data, \"Address: low-level static call failed\");\r\n    }\r\n\r\n    /**\r\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\r\n     * but performing a static call.\r\n     *\r\n     * _Available since v3.3._\r\n     */\r\n    function functionStaticCall(address target, bytes memory data, string memory errorMessage) internal view returns (bytes memory) {\r\n        require(isContract(target), \"Address: static call to non-contract\");\r\n\r\n        // solhint-disable-next-line avoid-low-level-calls\r\n        (bool success, bytes memory returndata) = target.staticcall(data);\r\n        return _verifyCallResult(success, returndata, errorMessage);\r\n    }\r\n\r\n    /**\r\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\r\n     * but performing a delegate call.\r\n     *\r\n     * _Available since v3.4._\r\n     */\r\n    function functionDelegateCall(address target, bytes memory data) internal returns (bytes memory) {\r\n        return functionDelegateCall(target, data, \"Address: low-level delegate call failed\");\r\n    }\r\n\r\n    /**\r\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\r\n     * but performing a delegate call.\r\n     *\r\n     * _Available since v3.4._\r\n     */\r\n    function functionDelegateCall(address target, bytes memory data, string memory errorMessage) internal returns (bytes memory) {\r\n        require(isContract(target), \"Address: delegate call to non-contract\");\r\n\r\n        // solhint-disable-next-line avoid-low-level-calls\r\n        (bool success, bytes memory returndata) = target.delegatecall(data);\r\n        return _verifyCallResult(success, returndata, errorMessage);\r\n    }\r\n\r\n    function _verifyCallResult(bool success, bytes memory returndata, string memory errorMessage) private pure returns(bytes memory) {\r\n        if (success) {\r\n            return returndata;\r\n        } else {\r\n            // Look for revert reason and bubble it up if present\r\n            if (returndata.length > 0) {\r\n                // The easiest way to bubble the revert reason is using memory via assembly\r\n\r\n                // solhint-disable-next-line no-inline-assembly\r\n                assembly {\r\n                    let returndata_size := mload(returndata)\r\n                    revert(add(32, returndata), returndata_size)\r\n                }\r\n            } else {\r\n                revert(errorMessage);\r\n            }\r\n        }\r\n    }\r\n}\r\n\r\nlibrary Math {\r\n\r\n  function max(uint256 a, uint256 b) internal pure returns (uint256) {\r\n    return a >= b ? a : b;\r\n  }\r\n\r\n  function min(uint256 a, uint256 b) internal pure returns (uint256) {\r\n    return a < b ? a : b;\r\n  }\r\n\r\n  function average(uint256 a, uint256 b) internal pure returns (uint256) {\r\n    // (a + b) / 2 can overflow, so we distribute.\r\n    return (a / 2) + (b / 2) + (((a % 2) + (b % 2)) / 2);\r\n  }\r\n\r\n  function ceilDiv(uint256 a, uint256 b) internal pure returns (uint256) {\r\n    // (a + b - 1) / b can overflow on addition, so we distribute.\r\n    return a / b + (a % b == 0 ? 0 : 1);\r\n  }\r\n}\r\n\r\ncontract ReentrancyGuard {\r\n  uint256 private constant _NOT_ENTERED = 1;\r\n  uint256 private constant _ENTERED = 2;\r\n\r\n  uint256 private _status;\r\n\r\n  constructor () {\r\n    _status = _NOT_ENTERED;\r\n  }\r\n\r\n  modifier nonReentrant() {\r\n    require(_status != _ENTERED, \"ReentrancyGuard: reentrant call\");\r\n    _status = _ENTERED;\r\n    _;\r\n    _status = _NOT_ENTERED;\r\n  }\r\n}\r\n\r\ninterface IWETH {\r\n  function deposit() external payable;\r\n  function withdraw(uint wad) external;\r\n  function balanceOf(address account) external view returns (uint);\r\n  function transfer(address recipient, uint amount) external returns (bool);\r\n  function approve(address spender, uint amount) external returns (bool);\r\n}\r\n\r\nlibrary SafeERC20 {\r\n\r\n    using Address for address;\r\n\r\n    function safeTransfer(\r\n        IERC20 token,\r\n        address to,\r\n        uint256 value\r\n    ) internal {\r\n        _callOptionalReturn(token, abi.encodeWithSelector(token.transfer.selector, to, value));\r\n    }\r\n\r\n    function safeTransferFrom(\r\n        IERC20 token,\r\n        address from,\r\n        address to,\r\n        uint256 value\r\n    ) internal {\r\n        _callOptionalReturn(token, abi.encodeWithSelector(token.transferFrom.selector, from, to, value));\r\n    }\r\n\r\n    /**\r\n     * @dev Deprecated. This function has issues similar to the ones found in\r\n     * {IERC20-approve}, and its usage is discouraged.\r\n     *\r\n     * Whenever possible, use {safeIncreaseAllowance} and\r\n     * {safeDecreaseAllowance} instead.\r\n     */\r\n    function safeApprove(\r\n        IERC20 token,\r\n        address spender,\r\n        uint256 value\r\n    ) internal {\r\n        // safeApprove should only be called when setting an initial allowance,\r\n        // or when resetting it to zero. To increase and decrease it, use\r\n        // 'safeIncreaseAllowance' and 'safeDecreaseAllowance'\r\n        require(\r\n            (value == 0) || (token.allowance(address(this), spender) == 0),\r\n            \"SafeERC20: approve from non-zero to non-zero allowance\"\r\n        );\r\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, value));\r\n    }\r\n\r\n    function safeIncreaseAllowance(\r\n        IERC20 token,\r\n        address spender,\r\n        uint256 value\r\n    ) internal {\r\n        uint256 newAllowance = token.allowance(address(this), spender) + value;\r\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));\r\n    }\r\n\r\n    function safeDecreaseAllowance(\r\n        IERC20 token,\r\n        address spender,\r\n        uint256 value\r\n    ) internal {\r\n        unchecked {\r\n            uint256 oldAllowance = token.allowance(address(this), spender);\r\n            require(oldAllowance >= value, \"SafeERC20: decreased allowance below zero\");\r\n            uint256 newAllowance = oldAllowance - value;\r\n            _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));\r\n        }\r\n    }\r\n\r\n    /**\r\n     * @dev Imitates a Solidity high-level call (i.e. a regular function call to a contract), relaxing the requirement\r\n     * on the return value: the return value is optional (but if data is returned, it must not be false).\r\n     * @param token The token targeted by the call.\r\n     * @param data The call data (encoded using abi.encode or one of its variants).\r\n     */\r\n    function _callOptionalReturn(IERC20 token, bytes memory data) private {\r\n        // We need to perform a low level call here, to bypass Solidity's return data size checking mechanism, since\r\n        // we're implementing it ourselves. We use {Address.functionCall} to perform this call, which verifies that\r\n        // the target address contains contract code and also asserts for success in the low-level call.\r\n\r\n        bytes memory returndata = address(token).functionCall(data, \"SafeERC20: low-level call failed\");\r\n        if (returndata.length > 0) {\r\n            // Return data is optional\r\n            require(abi.decode(returndata, (bool)), \"SafeERC20: ERC20 operation did not succeed\");\r\n        }\r\n    }\r\n}\r\n\r\ncontract TransferHelper {\r\n\r\n  using SafeERC20 for IERC20;\r\n\r\n  // Mainnet\r\n  IWETH internal constant WETH = IWETH(0xC02aaA39b223FE8D0A0e5C4F27eAD9083C756Cc2);\r\n\r\n  function _safeTransferFrom(address _token, address _sender, uint _amount) internal virtual {\r\n    require(_amount > 0, \"TransferHelper: amount must be > 0\");\r\n    IERC20(_token).safeTransferFrom(_sender, address(this), _amount);\r\n  }\r\n\r\n  function _safeTransfer(address _token, address _recipient, uint _amount) internal virtual {\r\n    require(_amount > 0, \"TransferHelper: amount must be > 0\");\r\n    IERC20(_token).safeTransfer(_recipient, _amount);\r\n  }\r\n\r\n  function _wethWithdrawTo(address _to, uint _amount) internal virtual {\r\n    require(_amount > 0, \"TransferHelper: amount must be > 0\");\r\n    require(_to != address(0), \"TransferHelper: invalid recipient\");\r\n\r\n    WETH.withdraw(_amount);\r\n    (bool success, ) = _to.call { value: _amount }(new bytes(0));\r\n    require(success, 'TransferHelper: ETH transfer failed');\r\n  }\r\n\r\n  function _depositWeth() internal {\r\n    require(msg.value > 0, \"TransferHelper: amount must be > 0\");\r\n    WETH.deposit { value: msg.value }();\r\n  }\r\n}\r\n\r\n\r\n// Vault holds all the funds\r\n// Rebalancer transforms the funds and can be replaced\r\n\r\ncontract Vault is TransferHelper, ReentrancyGuard, ERC20(\"X\", \"X\", 18) {\r\n\r\n  uint private constant DISTRIBUTION_PERIOD = 45_800; // ~ 7 days\r\n\r\n  address public vaultController;\r\n  address public underlying;\r\n\r\n  bool private initialized;\r\n  uint private rewardPerToken;\r\n  uint private lastAccrualBlock;\r\n  uint private lastIncomeBlock;\r\n  uint private rewardRateStored;\r\n\r\n  mapping (address => uint) private rewardSnapshot;\r\n\r\n  event Claim(address indexed account, uint amount);\r\n  event NewIncome(uint addAmount, uint rewardRate);\r\n  event NewRebalancer(address indexed rebalancer);\r\n  event Deposit(uint amount);\r\n  event Withdraw(uint amount);\r\n\r\n  modifier onlyRebalancer() {\r\n    require(msg.sender == address(rebalancer()), \"Vault: caller is not the rebalancer\");\r\n    _;\r\n  }\r\n\r\n  receive() external payable {}\r\n\r\n  function initialize(\r\n    address       _vaultController,\r\n    address       _underlying,\r\n    string memory _name\r\n  ) external {\r\n\r\n    require(initialized != true, \"Vault: already intialized\");\r\n    initialized = true;\r\n\r\n    vaultController = _vaultController;\r\n    underlying      = _underlying;\r\n\r\n    name     = _name;\r\n    symbol   = _name;\r\n  }\r\n\r\n  function depositETH(address _account) external payable nonReentrant {\r\n    _checkEthVault();\r\n    _depositWeth();\r\n    _deposit(_account, msg.value);\r\n  }\r\n\r\n  function deposit(\r\n    address _account,\r\n    uint    _amount\r\n  ) external nonReentrant {\r\n    _safeTransferFrom(underlying, msg.sender, _amount);\r\n    _deposit(_account, _amount);\r\n  }\r\n\r\n  // Withdraw from the buffer\r\n  function withdraw(uint _amount) external nonReentrant {\r\n    _withdraw(msg.sender, _amount);\r\n    _safeTransfer(underlying, msg.sender, _amount);\r\n  }\r\n\r\n  function withdrawAll() external nonReentrant {\r\n    uint amount = _withdrawAll(msg.sender);\r\n    _safeTransfer(underlying, msg.sender, amount);\r\n  }\r\n\r\n  function withdrawAllETH() external nonReentrant {\r\n    _checkEthVault();\r\n    uint amount = _withdrawAll(msg.sender);\r\n    _wethWithdrawTo(msg.sender, amount);\r\n  }\r\n\r\n  function withdrawETH(uint _amount) external nonReentrant {\r\n    _checkEthVault();\r\n    _withdraw(msg.sender, _amount);\r\n    _wethWithdrawTo(msg.sender, _amount);\r\n  }\r\n\r\n  // Withdraw from a specific source\r\n  // Call this only if the vault doesn't have enough funds in the buffer\r\n  function withdrawFrom(\r\n    address _source,\r\n    uint    _amount\r\n  ) external nonReentrant {\r\n    _withdrawFrom(_source, _amount);\r\n    _safeTransfer(underlying, msg.sender, _amount);\r\n  }\r\n\r\n  function withdrawFromETH(\r\n    address _source,\r\n    uint    _amount\r\n  ) external nonReentrant {\r\n    _checkEthVault();\r\n    _withdrawFrom(_source, _amount);\r\n    _wethWithdrawTo(msg.sender, _amount);\r\n  }\r\n\r\n  function claim(address _account) public {\r\n    _accrue();\r\n    uint pendingReward = pendingAccountReward(_account);\r\n\r\n    if(pendingReward > 0) {\r\n      _mint(_account, pendingReward);\r\n      emit Claim(_account, pendingReward);\r\n    }\r\n\r\n    rewardSnapshot[_account] = rewardPerToken;\r\n  }\r\n\r\n  // Update rewardRateStored to distribute previous unvested income + new income\r\n  // over te next DISTRIBUTION_PERIOD blocks\r\n  function addIncome(uint _addAmount) external onlyRebalancer {\r\n    _accrue();\r\n    _safeTransferFrom(underlying, msg.sender, _addAmount);\r\n\r\n    uint blocksElapsed  = Math.min(DISTRIBUTION_PERIOD, block.number - lastIncomeBlock);\r\n    uint unvestedIncome = rewardRateStored * (DISTRIBUTION_PERIOD - blocksElapsed);\r\n\r\n    rewardRateStored = (unvestedIncome + _addAmount) / DISTRIBUTION_PERIOD;\r\n    lastIncomeBlock  = block.number;\r\n\r\n    emit NewIncome(_addAmount, rewardRateStored);\r\n  }\r\n\r\n  // Push any ERC20 token to Rebalancer which will transform it and send back the LP tokens\r\n  function pushToken(\r\n    address _token,\r\n    uint    _amount\r\n  ) external onlyRebalancer {\r\n    _safeTransfer(_token, address(rebalancer()), _amount);\r\n  }\r\n\r\n  function pendingAccountReward(address _account) public view returns(uint) {\r\n    uint pedingRewardPerToken = rewardPerToken + _pendingRewardPerToken();\r\n    uint rewardPerTokenDelta  = pedingRewardPerToken - rewardSnapshot[_account];\r\n    return rewardPerTokenDelta * balanceOf[_account] / 1e18;\r\n  }\r\n\r\n  // If no new income is added for more than DISTRIBUTION_PERIOD blocks,\r\n  // then do not distribute any more rewards\r\n  function rewardRate() public view returns(uint) {\r\n    uint blocksElapsed = block.number - lastIncomeBlock;\r\n\r\n    if (blocksElapsed < DISTRIBUTION_PERIOD) {\r\n      return rewardRateStored;\r\n    } else {\r\n      return 0;\r\n    }\r\n  }\r\n\r\n  function rebalancer() public view returns(IVaultRebalancer) {\r\n    return IVaultRebalancer(IVaultController(vaultController).rebalancer());\r\n  }\r\n\r\n  function _accrue() internal {\r\n    rewardPerToken  += _pendingRewardPerToken();\r\n    lastAccrualBlock = block.number;\r\n  }\r\n\r\n  function _deposit(address _account, uint _amount) internal {\r\n    claim(_account);\r\n    _mint(_account, _amount);\r\n    _checkDepositLimit();\r\n    emit Deposit(_amount);\r\n  }\r\n\r\n  function _withdraw(address _account, uint _amount) internal {\r\n    claim(_account);\r\n    _burn(msg.sender, _amount);\r\n    emit Withdraw(_amount);\r\n  }\r\n\r\n  function _withdrawAll(address _account) internal returns(uint) {\r\n    claim(_account);\r\n    uint amount = balanceOf[_account];\r\n    _burn(_account, amount);\r\n    emit Withdraw(amount);\r\n\r\n    return amount;\r\n  }\r\n\r\n  function _withdrawFrom(address _source, uint _amount) internal {\r\n    uint selfBalance = IERC20(underlying).balanceOf(address(this));\r\n    require(selfBalance < _amount, \"Vault: unload not required\");\r\n    rebalancer().unload(address(this), _source, _amount - selfBalance);\r\n    _withdraw(msg.sender, _amount);\r\n  }\r\n\r\n  function _transfer(\r\n    address _sender,\r\n    address _recipient,\r\n    uint    _amount\r\n  ) internal override {\r\n    claim(_sender);\r\n    claim(_recipient);\r\n    super._transfer(_sender, _recipient, _amount);\r\n  }\r\n\r\n  function _pendingRewardPerToken() internal view returns(uint) {\r\n    if (lastAccrualBlock == 0 || totalSupply == 0) {\r\n      return 0;\r\n    }\r\n\r\n    uint blocksElapsed = block.number - lastAccrualBlock;\r\n    return blocksElapsed * rewardRate() * 1e18 / totalSupply;\r\n  }\r\n\r\n  function _checkEthVault() internal view {\r\n    require(\r\n      underlying == address(WETH),\r\n      \"Vault: not ETH vault\"\r\n    );\r\n  }\r\n\r\n  function _checkDepositLimit() internal view {\r\n\r\n    IVaultController vController = IVaultController(vaultController);\r\n    uint depositLimit = vController.depositLimit(address(this));\r\n\r\n    require(vController.depositsEnabled(), \"Vault: deposits disabled\");\r\n\r\n    if (depositLimit > 0) {\r\n      require(totalSupply <= depositLimit, \"Vault: deposit limit reached\");\r\n    }\r\n  }\r\n}","ABI":"[{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Approval\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"Claim\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"Deposit\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"addAmount\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"rewardRate\",\"type\":\"uint256\"}],\"name\":\"NewIncome\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"rebalancer\",\"type\":\"address\"}],\"name\":\"NewRebalancer\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Transfer\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"Withdraw\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_addAmount\",\"type\":\"uint256\"}],\"name\":\"addIncome\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"allowance\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_spender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"approve\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_account\",\"type\":\"address\"}],\"name\":\"claim\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"decimals\",\"outputs\":[{\"internalType\":\"uint8\",\"name\":\"\",\"type\":\"uint8\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_account\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"deposit\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_account\",\"type\":\"address\"}],\"name\":\"depositETH\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_vaultController\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_underlying\",\"type\":\"address\"},{\"internalType\":\"string\",\"name\":\"_name\",\"type\":\"string\"}],\"name\":\"initialize\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"name\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_account\",\"type\":\"address\"}],\"name\":\"pendingAccountReward\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_token\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"pushToken\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"rebalancer\",\"outputs\":[{\"internalType\":\"contract IVaultRebalancer\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"rewardRate\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"symbol\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalSupply\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_recipient\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"transfer\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_sender\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_recipient\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"transferFrom\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"underlying\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"vaultController\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"withdraw\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"withdrawAll\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"withdrawAllETH\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"withdrawETH\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_source\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"withdrawFrom\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_source\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"withdrawFromETH\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"stateMutability\":\"payable\",\"type\":\"receive\"}]","ContractName":"Vault","CompilerVersion":"v0.8.6+commit.11564f7e","OptimizationUsed":"1","Runs":"200","ConstructorArguments":"","EVMVersion":"Default","Library":"","LicenseType":"None","Proxy":"0","Implementation":"","SwarmSource":"ipfs://fe422d15dc85ea60d5d6d56b21997656f3a8b5d3b1ec8bf46f3bcc510248359b"}]}