{"status":"1","message":"OK","result":[{"SourceCode":"{{\r\n  \"language\": \"Solidity\",\r\n  \"sources\": {\r\n    \"contracts/arteQTokens.sol\": {\r\n      \"content\": \"/*\\n * This file is part of the contracts written for artèQ Investment Fund (https://github.com/billionbuild/arteq-contracts).\\n * Copyright (c) 2021 BillionBuild (2B) Team.\\n *\\n * This program is free software: you can redistribute it and/or modify\\n * it under the terms of the GNU General Public License as published by\\n * the Free Software Foundation, version 3.\\n *\\n * This program is distributed in the hope that it will be useful, but\\n * WITHOUT ANY WARRANTY; without even the implied warranty of\\n * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the GNU\\n * General Public License for more details.\\n *\\n * You should have received a copy of the GNU General Public License\\n * along with this program. If not, see <http://www.gnu.org/licenses/>.\\n */\\n// SPDX-License-Identifier: GNU General Public License v3.0\\n\\npragma solidity 0.8.0;\\n\\nimport \\\"@openzeppelin/contracts/token/ERC20/IERC20.sol\\\";\\nimport \\\"@openzeppelin/contracts/token/ERC721/IERC721.sol\\\";\\nimport \\\"./ERC1155Supply.sol\\\";\\nimport \\\"./IarteQTokens.sol\\\";\\nimport \\\"./IarteQTaskFinalizer.sol\\\";\\n\\n/// @author Kam Amini <kam@arteq.io> <kam@2b.team> <kam@arteq.io> <kam.cpp@gmail.com>\\n///\\n/// Reviewed and revised by: Masoud Khosravi <masoud_at_2b.team> <mkh_at_arteq.io>\\n///                          Ali Jafari <ali_at_2b.team> <aj_at_arteq.io>\\n///\\n/// @title This contract keeps track of the tokens used in artèQ Investment\\n/// Fund ecosystem. It also contains the logic used for profit distribution.\\n///\\n/// @notice Use at your own risk\\ncontract arteQTokens is ERC1155Supply, IarteQTokens {\\n\\n    /// The main artèQ token\\n    uint256 public constant ARTEQ = 1;\\n\\n    /// The governance token of artèQ Investment Fund\\n    uint256 public constant gARTEQ = 2;\\n\\n    // The mapping from token IDs to their respective Metadata URIs\\n    mapping (uint256 => string) private _tokenMetadataURIs;\\n\\n    // The admin smart contract\\n    address private _adminContract;\\n\\n    // Treasury account responsible for asset-token ratio appreciation.\\n    address private _treasuryAccount;\\n\\n    // This can be a Uniswap V1/V2 exchange (pool) account created for ARTEQ token,\\n    // or any other exchange account. Treasury contract uses these pools to buy\\n    // back or sell tokens. In case of buy backs, the tokens must be delivered to\\n    // treasury account from these contracts. Otherwise, the profit distribution\\n    // logic doesn't get triggered.\\n    address private _exchange1Account;\\n    address private _exchange2Account;\\n    address private _exchange3Account;\\n    address private _exchange4Account;\\n    address private _exchange5Account;\\n\\n    // All the profits accumulated since the deployment of the contract. This is\\n    // used as a marker to facilitate the caluclation of every eligible account's\\n    // share from the profits in a given time range.\\n    uint256 private _allTimeProfit;\\n\\n    // The actual number of profit tokens transferred to accounts\\n    uint256 private _profitTokensTransferredToAccounts;\\n\\n    // The percentage of the bought back tokens which is considered as profit for gARTEQ owners\\n    // Default value is 20% and only admin contract can change that.\\n    uint private _profitPercentage;\\n\\n    // In order to caluclate the share of each elgiible account from the profits,\\n    // and more importantly, in order to do this efficiently (less gas usage),\\n    // we need this mapping to remember the \\\"all time profit\\\" when an account\\n    // is modified (receives tokens or sends tokens).\\n    mapping (address => uint256) private _profitMarkers;\\n\\n    // A timestamp indicating when the ramp-up phase gets expired.\\n    uint256 private _rampUpPhaseExpireTimestamp;\\n\\n    // Indicates until when the address cannot send any tokens\\n    mapping (address => uint256) private _lockedUntilTimestamps;\\n\\n    /// Emitted when the admin contract is changed.\\n    event AdminContractChanged(address newContract);\\n\\n    /// Emitted when the treasury account is changed.\\n    event TreasuryAccountChanged(address newAccount);\\n\\n    /// Emitted when the exchange account is changed.\\n    event Exchange1AccountChanged(address newAccount);\\n    event Exchange2AccountChanged(address newAccount);\\n    event Exchange3AccountChanged(address newAccount);\\n    event Exchange4AccountChanged(address newAccount);\\n    event Exchange5AccountChanged(address newAccount);\\n\\n    /// Emitted when the profit percentage is changed.\\n    event ProfitPercentageChanged(uint newPercentage);\\n\\n    /// Emitted when a token distribution occurs during the ramp-up phase\\n    event RampUpPhaseTokensDistributed(address to, uint256 amount, uint256 lockedUntilTimestamp);\\n\\n    /// Emitted when some buy back tokens are received by the treasury account.\\n    event ProfitTokensCollected(uint256 amount);\\n\\n    /// Emitted when a share holder receives its tokens from the buy back profits.\\n    event ProfitTokensDistributed(address to, uint256 amount);\\n\\n    // Emitted when profits are caluclated because of a manual buy back event\\n    event ManualBuyBackWithdrawalFromTreasury(uint256 amount);\\n\\n    modifier adminApprovalRequired(uint256 adminTaskId) {\\n        _;\\n        // This must succeed otherwise the tx gets reverted\\n        IarteQTaskFinalizer(_adminContract).finalizeTask(msg.sender, adminTaskId);\\n    }\\n\\n    modifier validToken(uint256 tokenId) {\\n        require(tokenId == ARTEQ || tokenId == gARTEQ, \\\"arteQTokens: non-existing token\\\");\\n        _;\\n    }\\n\\n    modifier onlyRampUpPhase() {\\n        require(block.timestamp < _rampUpPhaseExpireTimestamp, \\\"arteQTokens: ramp up phase is finished\\\");\\n        _;\\n    }\\n\\n    constructor(address adminContract) {\\n        _adminContract = adminContract;\\n\\n        /// Must be set later\\n        _treasuryAccount = address(0);\\n\\n        /// Must be set later\\n        _exchange1Account = address(0);\\n        _exchange2Account = address(0);\\n        _exchange3Account = address(0);\\n        _exchange4Account = address(0);\\n        _exchange5Account = address(0);\\n\\n        string memory arteQURI = \\\"ipfs://QmfBtH8BSztaYn3QFnz2qvu2ehZgy8AZsNMJDkgr3pdqT8\\\";\\n        string memory gArteQURI = \\\"ipfs://QmRAXmU9AymDgtphh37hqx5R2QXSS2ngchQRDFtg6XSD7w\\\";\\n        _tokenMetadataURIs[ARTEQ] = arteQURI;\\n        emit URI(arteQURI, ARTEQ);\\n        _tokenMetadataURIs[gARTEQ] = gArteQURI;\\n        emit URI(gArteQURI, gARTEQ);\\n\\n        /// 10 billion\\n        _initialMint(_adminContract, ARTEQ, 10 ** 10, \\\"\\\");\\n        /// 1 million\\n        _initialMint(_adminContract, gARTEQ, 10 ** 6, \\\"\\\");\\n\\n        /// Obviously, no profit at the time of deployment\\n        _allTimeProfit = 0;\\n\\n        _profitPercentage = 20;\\n\\n        /// Tuesday, February 1, 2022 12:00:00 AM\\n        _rampUpPhaseExpireTimestamp = 1643673600;\\n    }\\n\\n    /// See {ERC1155-uri}\\n    function uri(uint256 tokenId) external view virtual override validToken(tokenId) returns (string memory) {\\n        return _tokenMetadataURIs[tokenId];\\n    }\\n\\n    function setURI(\\n        uint256 adminTaskId,\\n        uint256 tokenId,\\n        string memory newUri\\n    ) external adminApprovalRequired(adminTaskId) validToken(tokenId) {\\n        _tokenMetadataURIs[tokenId] = newUri;\\n        emit URI(newUri, tokenId);\\n    }\\n\\n    /// Returns the set treasury account\\n    /// @return The set treasury account\\n    function getTreasuryAccount() external view returns (address) {\\n        return _treasuryAccount;\\n    }\\n\\n    /// Sets a new treasury account. Just after deployment, treasury account is set to zero address but once\\n    /// set to a non-zero address, it cannot be changed back to zero address again.\\n    ///\\n    /// @param adminTaskId the task which must have been approved by multiple admins\\n    /// @param newAccount new treasury address\\n    function setTreasuryAccount(uint256 adminTaskId, address newAccount) external adminApprovalRequired(adminTaskId) {\\n        require(newAccount != address(0), \\\"arteQTokens: zero address for treasury account\\\");\\n        _treasuryAccount = newAccount;\\n        emit TreasuryAccountChanged(newAccount);\\n    }\\n\\n    /// Returns the 1st exchange account\\n    /// @return The 1st exchnage account\\n    function getExchange1Account() external view returns (address) {\\n        return _exchange1Account;\\n    }\\n\\n    /// Returns the 2nd exchange account\\n    /// @return The 2nd exchnage account\\n    function getExchange2Account() external view returns (address) {\\n        return _exchange2Account;\\n    }\\n\\n    /// Returns the 3rd exchange account\\n    /// @return The 3rd exchnage account\\n    function getExchange3Account() external view returns (address) {\\n        return _exchange3Account;\\n    }\\n\\n    /// Returns the 4th exchange account\\n    /// @return The 4th exchnage account\\n    function getExchange4Account() external view returns (address) {\\n        return _exchange4Account;\\n    }\\n\\n    /// Returns the 5th exchange account\\n    /// @return The 5th exchnage account\\n    function getExchange5Account() external view returns (address) {\\n        return _exchange5Account;\\n    }\\n\\n    /// Sets a new exchange account. Just after deployment, exchange account is set to zero address but once\\n    /// set to a non-zero address, it cannot be changed back to zero address again.\\n    ///\\n    /// @param adminTaskId the task which must have been approved by multiple admins\\n    /// @param newAccount new exchange address\\n    function setExchange1Account(uint256 adminTaskId, address newAccount) external adminApprovalRequired(adminTaskId) {\\n        require(newAccount != address(0), \\\"arteQTokens: zero address for exchange account\\\");\\n        _exchange1Account = newAccount;\\n        emit Exchange1AccountChanged(newAccount);\\n    }\\n\\n    /// Sets a new exchange account. Just after deployment, exchange account is set to zero address but once\\n    /// set to a non-zero address, it cannot be changed back to zero address again.\\n    ///\\n    /// @param adminTaskId the task which must have been approved by multiple admins\\n    /// @param newAccount new exchange address\\n    function setExchange2Account(uint256 adminTaskId, address newAccount) external adminApprovalRequired(adminTaskId) {\\n        require(newAccount != address(0), \\\"arteQTokens: zero address for exchange account\\\");\\n        _exchange2Account = newAccount;\\n        emit Exchange2AccountChanged(newAccount);\\n    }\\n\\n    /// Sets a new exchange account. Just after deployment, exchange account is set to zero address but once\\n    /// set to a non-zero address, it cannot be changed back to zero address again.\\n    ///\\n    /// @param adminTaskId the task which must have been approved by multiple admins\\n    /// @param newAccount new exchange address\\n    function setExchange3Account(uint256 adminTaskId, address newAccount) external adminApprovalRequired(adminTaskId) {\\n        require(newAccount != address(0), \\\"arteQTokens: zero address for exchange account\\\");\\n        _exchange3Account = newAccount;\\n        emit Exchange3AccountChanged(newAccount);\\n    }\\n\\n    /// Sets a new exchange account. Just after deployment, exchange account is set to zero address but once\\n    /// set to a non-zero address, it cannot be changed back to zero address again.\\n    ///\\n    /// @param adminTaskId the task which must have been approved by multiple admins\\n    /// @param newAccount new exchange address\\n    function setExchange4Account(uint256 adminTaskId, address newAccount) external adminApprovalRequired(adminTaskId) {\\n        require(newAccount != address(0), \\\"arteQTokens: zero address for exchange account\\\");\\n        _exchange4Account = newAccount;\\n        emit Exchange4AccountChanged(newAccount);\\n    }\\n\\n    /// Sets a new exchange account. Just after deployment, exchange account is set to zero address but once\\n    /// set to a non-zero address, it cannot be changed back to zero address again.\\n    ///\\n    /// @param adminTaskId the task which must have been approved by multiple admins\\n    /// @param newAccount new exchange address\\n    function setExchange5Account(uint256 adminTaskId, address newAccount) external adminApprovalRequired(adminTaskId) {\\n        require(newAccount != address(0), \\\"arteQTokens: zero address for exchange account\\\");\\n        _exchange5Account = newAccount;\\n        emit Exchange5AccountChanged(newAccount);\\n    }\\n\\n    /// Returns the profit percentage\\n    /// @return The set treasury account\\n    function getProfitPercentage() external view returns (uint) {\\n        return _profitPercentage;\\n    }\\n\\n    /// Sets a new profit percentage. This is the percentage of bought-back tokens which is considered\\n    /// as profit for gARTEQ owners. The value can be between 10% and 50%.\\n    ///\\n    /// @param adminTaskId the task which must have been approved by multiple admins\\n    /// @param newPercentage new exchange address\\n    function setProfitPercentage(uint256 adminTaskId, uint newPercentage) external adminApprovalRequired(adminTaskId) {\\n        require(newPercentage >= 10 && newPercentage <= 50, \\\"arteQTokens: invalid value for profit percentage\\\");\\n        _profitPercentage = newPercentage;\\n        emit ProfitPercentageChanged(newPercentage);\\n    }\\n\\n    /// Transfer from admin contract\\n    function transferFromAdminContract(\\n        uint256 adminTaskId,\\n        address to,\\n        uint256 id,\\n        uint256 amount\\n    ) external adminApprovalRequired(adminTaskId) {\\n        _safeTransferFrom(_msgSender(), _adminContract, to, id, amount, \\\"\\\");\\n    }\\n\\n    /// A token distribution mechanism, only valid in ramp-up phase, valid till the end of Jan 2022.\\n    function rampUpPhaseDistributeToken(\\n        uint256 adminTaskId,\\n        address[] memory tos,\\n        uint256[] memory amounts,\\n        uint256[] memory lockedUntilTimestamps\\n    ) external adminApprovalRequired(adminTaskId) onlyRampUpPhase {\\n        require(tos.length == amounts.length, \\\"arteQTokens: inputs have incorrect lengths\\\");\\n        for (uint256 i = 0; i < tos.length; i++) {\\n            require(tos[i] != _treasuryAccount, \\\"arteQTokens: cannot transfer to treasury account\\\");\\n            require(tos[i] != _adminContract, \\\"arteQTokens: cannot transfer to admin contract\\\");\\n            _safeTransferFrom(_msgSender(), _adminContract, tos[i], ARTEQ, amounts[i], \\\"\\\");\\n            if (lockedUntilTimestamps[i] > 0) {\\n                _lockedUntilTimestamps[tos[i]] = lockedUntilTimestamps[i];\\n            }\\n            emit RampUpPhaseTokensDistributed(tos[i], amounts[i], lockedUntilTimestamps[i]);\\n        }\\n    }\\n\\n    function balanceOf(address account, uint256 tokenId) public view virtual override validToken(tokenId) returns (uint256) {\\n        if (tokenId == gARTEQ) {\\n            return super.balanceOf(account, tokenId);\\n        }\\n        return super.balanceOf(account, tokenId) + _calcUnrealizedProfitTokens(account);\\n    }\\n\\n    function allTimeProfit() external view returns (uint256) {\\n        return _allTimeProfit;\\n    }\\n\\n    function totalCirculatingGovernanceTokens() external view returns (uint256) {\\n        return totalSupply(gARTEQ) - balanceOf(_adminContract, gARTEQ);\\n    }\\n\\n    function profitTokensTransferredToAccounts() external view returns (uint256) {\\n        return _profitTokensTransferredToAccounts;\\n    }\\n\\n    function compatBalanceOf(address /* origin */, address account, uint256 tokenId) external view virtual override returns (uint256) {\\n        return balanceOf(account, tokenId);\\n    }\\n\\n    function compatTotalSupply(address /* origin */, uint256 tokenId) external view virtual override returns (uint256) {\\n        return totalSupply(tokenId);\\n    }\\n\\n    function compatTransfer(address origin, address to, uint256 tokenId, uint256 amount) external virtual override {\\n        address from = origin;\\n        _safeTransferFrom(origin, from, to, tokenId, amount, \\\"\\\");\\n    }\\n\\n    function compatTransferFrom(address origin, address from, address to, uint256 tokenId, uint256 amount) external virtual override {\\n        require(\\n            from == origin || isApprovedForAll(from, origin),\\n            \\\"arteQTokens: caller is not owner nor approved \\\"\\n        );\\n        _safeTransferFrom(origin, from, to, tokenId, amount, \\\"\\\");\\n    }\\n\\n    function compatAllowance(address /* origin */, address account, address operator) external view virtual override returns (uint256) {\\n        if (isApprovedForAll(account, operator)) {\\n            return 2 ** 256 - 1;\\n        }\\n        return 0;\\n    }\\n\\n    function compatApprove(address origin, address operator, uint256 amount) external virtual override {\\n        _setApprovalForAll(origin, operator, amount > 0);\\n    }\\n\\n    // If this contract gets a balance in some ERC20 contract after it's finished, then we can rescue it.\\n    function rescueTokens(uint256 adminTaskId, IERC20 foreignToken, address to) external adminApprovalRequired(adminTaskId) {\\n        foreignToken.transfer(to, foreignToken.balanceOf(address(this)));\\n    }\\n\\n    // If this contract gets a balance in some ERC721 contract after it's finished, then we can rescue it.\\n    function approveNFTRescue(uint256 adminTaskId, IERC721 foreignNFT, address to) external adminApprovalRequired(adminTaskId) {\\n        foreignNFT.setApprovalForAll(to, true);\\n    }\\n\\n    // In case of any manual buy back event which is not processed through DEX contracts, this function\\n    // helps admins distribute the profits. This function must be called only when the bought back tokens\\n    // have been successfully transferred to treasury account.\\n    function processManualBuyBackEvent(uint256 adminTaskId, uint256 boughtBackTokensAmount) external adminApprovalRequired(adminTaskId) {\\n        uint256 profit = (boughtBackTokensAmount * _profitPercentage) / 100;\\n        if (profit > 0) {\\n            _balances[ARTEQ][_treasuryAccount] -= profit;\\n            emit ManualBuyBackWithdrawalFromTreasury(profit);\\n            _allTimeProfit += profit;\\n            emit ProfitTokensCollected(profit);\\n        }\\n    }\\n\\n    function _beforeTokenTransfer(\\n        address operator,\\n        address from,\\n        address to,\\n        uint256 id,\\n        uint256[] memory amounts,\\n        bytes memory data\\n    ) internal virtual override {\\n        // We have to call the super function in order to have the total supply correct.\\n        // It is actually needed by the first two _initialMint calls only. After that, it is\\n        // a no-op function.\\n        super._beforeTokenTransfer(operator, from, to, id, amounts, data);\\n\\n        // this is one of the two first _initialMint calls\\n        if (from == address(0)) {\\n            return;\\n        }\\n\\n        // This is a buy-back callback from exchange account\\n        if ((\\n                from == _exchange1Account ||\\n                from == _exchange2Account ||\\n                from == _exchange3Account ||\\n                from == _exchange4Account ||\\n                from == _exchange5Account\\n        ) && to == _treasuryAccount) {\\n            require(amounts.length == 2 && id == ARTEQ, \\\"arteQTokens: invalid transfer from exchange\\\");\\n            uint256 profit = (amounts[0] * _profitPercentage) / 100;\\n            amounts[1] = amounts[0] - profit;\\n            if (profit > 0) {\\n                _allTimeProfit += profit;\\n                emit ProfitTokensCollected(profit);\\n            }\\n            return;\\n        }\\n\\n        // Ensures that the locked accounts cannot send their ARTEQ tokens\\n        if (id == ARTEQ) {\\n            require(_lockedUntilTimestamps[from] == 0 || block.timestamp > _lockedUntilTimestamps[from], \\\"arteQTokens: account cannot send tokens\\\");\\n        }\\n\\n        // Realize/Transfer the accumulated profit of 'from' account and make it spendable\\n        if (from != _adminContract &&\\n            from != _treasuryAccount &&\\n            from != _exchange1Account &&\\n            from != _exchange2Account &&\\n            from != _exchange3Account &&\\n            from != _exchange4Account &&\\n            from != _exchange5Account) {\\n            _realizeAccountProfitTokens(from);\\n        }\\n\\n        // Realize/Transfer the accumulated profit of 'to' account and make it spendable\\n        if (to != _adminContract &&\\n            to != _treasuryAccount &&\\n            to != _exchange1Account &&\\n            to != _exchange2Account &&\\n            to != _exchange3Account &&\\n            to != _exchange4Account &&\\n            to != _exchange5Account) {\\n            _realizeAccountProfitTokens(to);\\n        }\\n    }\\n\\n    function _calcUnrealizedProfitTokens(address account) internal view returns (uint256) {\\n        if (account == _adminContract ||\\n            account == _treasuryAccount ||\\n            account == _exchange1Account ||\\n            account == _exchange2Account ||\\n            account == _exchange3Account ||\\n            account == _exchange4Account ||\\n            account == _exchange5Account) {\\n            return 0;\\n        }\\n        uint256 profitDifference = _allTimeProfit - _profitMarkers[account];\\n        uint256 totalGovTokens = totalSupply(gARTEQ) - balanceOf(_adminContract, gARTEQ);\\n        if (totalGovTokens == 0) {\\n            return 0;\\n        }\\n        uint256 tokensToTransfer = (profitDifference * balanceOf(account, gARTEQ)) / totalGovTokens;\\n        return tokensToTransfer;\\n    }\\n\\n    // This function actually transfers the unrealized accumulated profit tokens of an account\\n    // and make them spendable by that account. The balance should not differ after the\\n    // trasnfer as the balance already includes the unrealized tokens.\\n    function _realizeAccountProfitTokens(address account) internal {\\n        bool updateProfitMarker = true;\\n        // If 'account' has some governance tokens then calculate the accumulated profit since the last distribution\\n        if (balanceOf(account, gARTEQ) > 0) {\\n            uint256 tokensToTransfer = _calcUnrealizedProfitTokens(account);\\n            // If the profit is too small and no token can be transferred, then don't update the profit marker and\\n            // let the account wait for the next round of profit distribution\\n            if (tokensToTransfer == 0) {\\n                updateProfitMarker = false;\\n            } else {\\n                _balances[ARTEQ][account] += tokensToTransfer;\\n                _profitTokensTransferredToAccounts += tokensToTransfer;\\n                emit ProfitTokensDistributed(account, tokensToTransfer);\\n            }\\n        }\\n        if (updateProfitMarker) {\\n            _profitMarkers[account] = _allTimeProfit;\\n        }\\n    }\\n\\n    receive() external payable {\\n        revert(\\\"arteQTokens: cannot accept ether\\\");\\n    }\\n\\n    fallback() external payable {\\n        revert(\\\"arteQTokens: cannot accept ether\\\");\\n    }\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/token/ERC20/IERC20.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC20 standard as defined in the EIP.\\n */\\ninterface IERC20 {\\n    /**\\n     * @dev Returns the amount of tokens in existence.\\n     */\\n    function totalSupply() external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the amount of tokens owned by `account`.\\n     */\\n    function balanceOf(address account) external view returns (uint256);\\n\\n    /**\\n     * @dev Moves `amount` tokens from the caller's account to `recipient`.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transfer(address recipient, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Returns the remaining number of tokens that `spender` will be\\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\\n     * zero by default.\\n     *\\n     * This value changes when {approve} or {transferFrom} are called.\\n     */\\n    function allowance(address owner, address spender) external view returns (uint256);\\n\\n    /**\\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\\n     * that someone may use both the old and the new allowance by unfortunate\\n     * transaction ordering. One possible solution to mitigate this race\\n     * condition is to first reduce the spender's allowance to 0 and set the\\n     * desired value afterwards:\\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address spender, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Moves `amount` tokens from `sender` to `recipient` using the\\n     * allowance mechanism. `amount` is then deducted from the caller's\\n     * allowance.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(\\n        address sender,\\n        address recipient,\\n        uint256 amount\\n    ) external returns (bool);\\n\\n    /**\\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\\n     * another (`to`).\\n     *\\n     * Note that `value` may be zero.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 value);\\n\\n    /**\\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\\n     * a call to {approve}. `value` is the new allowance.\\n     */\\n    event Approval(address indexed owner, address indexed spender, uint256 value);\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/token/ERC721/IERC721.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../../utils/introspection/IERC165.sol\\\";\\n\\n/**\\n * @dev Required interface of an ERC721 compliant contract.\\n */\\ninterface IERC721 is IERC165 {\\n    /**\\n     * @dev Emitted when `tokenId` token is transferred from `from` to `to`.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 indexed tokenId);\\n\\n    /**\\n     * @dev Emitted when `owner` enables `approved` to manage the `tokenId` token.\\n     */\\n    event Approval(address indexed owner, address indexed approved, uint256 indexed tokenId);\\n\\n    /**\\n     * @dev Emitted when `owner` enables or disables (`approved`) `operator` to manage all of its assets.\\n     */\\n    event ApprovalForAll(address indexed owner, address indexed operator, bool approved);\\n\\n    /**\\n     * @dev Returns the number of tokens in ``owner``'s account.\\n     */\\n    function balanceOf(address owner) external view returns (uint256 balance);\\n\\n    /**\\n     * @dev Returns the owner of the `tokenId` token.\\n     *\\n     * Requirements:\\n     *\\n     * - `tokenId` must exist.\\n     */\\n    function ownerOf(uint256 tokenId) external view returns (address owner);\\n\\n    /**\\n     * @dev Safely transfers `tokenId` token from `from` to `to`, checking first that contract recipients\\n     * are aware of the ERC721 protocol to prevent tokens from being forever locked.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` cannot be the zero address.\\n     * - `to` cannot be the zero address.\\n     * - `tokenId` token must exist and be owned by `from`.\\n     * - If the caller is not `from`, it must be have been allowed to move this token by either {approve} or {setApprovalForAll}.\\n     * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function safeTransferFrom(\\n        address from,\\n        address to,\\n        uint256 tokenId\\n    ) external;\\n\\n    /**\\n     * @dev Transfers `tokenId` token from `from` to `to`.\\n     *\\n     * WARNING: Usage of this method is discouraged, use {safeTransferFrom} whenever possible.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` cannot be the zero address.\\n     * - `to` cannot be the zero address.\\n     * - `tokenId` token must be owned by `from`.\\n     * - If the caller is not `from`, it must be approved to move this token by either {approve} or {setApprovalForAll}.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(\\n        address from,\\n        address to,\\n        uint256 tokenId\\n    ) external;\\n\\n    /**\\n     * @dev Gives permission to `to` to transfer `tokenId` token to another account.\\n     * The approval is cleared when the token is transferred.\\n     *\\n     * Only a single account can be approved at a time, so approving the zero address clears previous approvals.\\n     *\\n     * Requirements:\\n     *\\n     * - The caller must own the token or be an approved operator.\\n     * - `tokenId` must exist.\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address to, uint256 tokenId) external;\\n\\n    /**\\n     * @dev Returns the account approved for `tokenId` token.\\n     *\\n     * Requirements:\\n     *\\n     * - `tokenId` must exist.\\n     */\\n    function getApproved(uint256 tokenId) external view returns (address operator);\\n\\n    /**\\n     * @dev Approve or remove `operator` as an operator for the caller.\\n     * Operators can call {transferFrom} or {safeTransferFrom} for any token owned by the caller.\\n     *\\n     * Requirements:\\n     *\\n     * - The `operator` cannot be the caller.\\n     *\\n     * Emits an {ApprovalForAll} event.\\n     */\\n    function setApprovalForAll(address operator, bool _approved) external;\\n\\n    /**\\n     * @dev Returns if the `operator` is allowed to manage all of the assets of `owner`.\\n     *\\n     * See {setApprovalForAll}\\n     */\\n    function isApprovedForAll(address owner, address operator) external view returns (bool);\\n\\n    /**\\n     * @dev Safely transfers `tokenId` token from `from` to `to`.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` cannot be the zero address.\\n     * - `to` cannot be the zero address.\\n     * - `tokenId` token must exist and be owned by `from`.\\n     * - If the caller is not `from`, it must be approved to move this token by either {approve} or {setApprovalForAll}.\\n     * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function safeTransferFrom(\\n        address from,\\n        address to,\\n        uint256 tokenId,\\n        bytes calldata data\\n    ) external;\\n}\\n\"\r\n    },\r\n    \"contracts/ERC1155Supply.sol\": {\r\n      \"content\": \"/*\\n * This file is part of the contracts written for artèQ Investment Fund (https://github.com/billionbuild/arteq-contracts).\\n * Copyright (c) 2021 BillionBuild (2B) Team.\\n *\\n * This program is free software: you can redistribute it and/or modify\\n * it under the terms of the GNU General Public License as published by\\n * the Free Software Foundation, version 3.\\n *\\n * This program is distributed in the hope that it will be useful, but\\n * WITHOUT ANY WARRANTY; without even the implied warranty of\\n * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the GNU\\n * General Public License for more details.\\n *\\n * You should have received a copy of the GNU General Public License\\n * along with this program. If not, see <http://www.gnu.org/licenses/>.\\n */\\n// SPDX-License-Identifier: GNU General Public License v3.0\\n// Based on OpenZeppelin Contracts v4.3.2 (token/ERC1155/extensions/ERC1155Supply.sol)\\n\\npragma solidity 0.8.0;\\n\\nimport \\\"./ERC1155.sol\\\";\\n\\n/**\\n * @author Modified by Kam Amini <kam@arteq.io> <kam@2b.team> <kam.cpp@gmail.com>\\n *\\n * @notice Use at your own risk\\n *\\n * @dev Extension of ERC1155 that adds tracking of total supply per id.\\n *\\n * Useful for scenarios where Fungible and Non-fungible tokens have to be\\n * clearly identified. Note: While a totalSupply of 1 might mean the\\n * corresponding is an NFT, there is no guarantees that no other token with the\\n * same id are not going to be minted.\\n *\\n * Note: 2B has modified the original code to cover its needs as\\n * part of artèQ Investment Fund ecosystem\\n */\\nabstract contract ERC1155Supply is ERC1155 {\\n    mapping(uint256 => uint256) private _totalSupply;\\n\\n    /**\\n     * @dev Total amount of tokens in with a given id.\\n     */\\n    function totalSupply(uint256 id) public view virtual returns (uint256) {\\n        return _totalSupply[id];\\n    }\\n\\n    /**\\n     * @dev Indicates whether any token exist with a given id, or not.\\n     */\\n    function exists(uint256 id) public view virtual returns (bool) {\\n        return ERC1155Supply.totalSupply(id) > 0;\\n    }\\n\\n    /**\\n     * @dev See {ERC1155-_beforeTokenTransfer}.\\n     */\\n    function _beforeTokenTransfer(\\n        address operator,\\n        address from,\\n        address to,\\n        uint256 id,\\n        uint256[] memory amounts,\\n        bytes memory data\\n    ) internal virtual override {\\n        super._beforeTokenTransfer(operator, from, to, id, amounts, data);\\n\\n        if (from == address(0)) {\\n            _totalSupply[id] += amounts[0];\\n        }\\n\\n        if (to == address(0)) {\\n            _totalSupply[id] -= amounts[0];\\n        }\\n    }\\n}\\n\"\r\n    },\r\n    \"contracts/IarteQTokens.sol\": {\r\n      \"content\": \"/*\\n * This file is part of the contracts written for artèQ Investment Fund (https://github.com/billionbuild/arteq-contracts).\\n * Copyright (c) 2021 BillionBuild (2B) Team.\\n *\\n * This program is free software: you can redistribute it and/or modify\\n * it under the terms of the GNU General Public License as published by\\n * the Free Software Foundation, version 3.\\n *\\n * This program is distributed in the hope that it will be useful, but\\n * WITHOUT ANY WARRANTY; without even the implied warranty of\\n * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the GNU\\n * General Public License for more details.\\n *\\n * You should have received a copy of the GNU General Public License\\n * along with this program. If not, see <http://www.gnu.org/licenses/>.\\n */\\n// SPDX-License-Identifier: GNU General Public License v3.0\\n\\npragma solidity 0.8.0;\\n\\n/// @author Kam Amini <kam@arteq.io> <kam@2b.team> <kam.cpp@gmail.com>\\n///\\n/// @title An interface which allows ERC-20 tokens to interact with the\\n/// main ERC-1155 contract\\n///\\n/// @notice Use at your own risk\\ninterface IarteQTokens {\\n    function compatBalanceOf(address origin, address account, uint256 tokenId) external view returns (uint256);\\n    function compatTotalSupply(address origin, uint256 tokenId) external view returns (uint256);\\n    function compatTransfer(address origin, address to, uint256 tokenId, uint256 amount) external;\\n    function compatTransferFrom(address origin, address from, address to, uint256 tokenId, uint256 amount) external;\\n    function compatAllowance(address origin, address account, address operator) external view returns (uint256);\\n    function compatApprove(address origin, address operator, uint256 amount) external;\\n}\\n\\n\"\r\n    },\r\n    \"contracts/IarteQTaskFinalizer.sol\": {\r\n      \"content\": \"/*\\n * This file is part of the contracts written for artèQ Investment Fund (https://github.com/billionbuild/arteq-contracts).\\n * Copyright (c) 2021 BillionBuild (2B) Team.\\n *\\n * This program is free software: you can redistribute it and/or modify\\n * it under the terms of the GNU General Public License as published by\\n * the Free Software Foundation, version 3.\\n *\\n * This program is distributed in the hope that it will be useful, but\\n * WITHOUT ANY WARRANTY; without even the implied warranty of\\n * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the GNU\\n * General Public License for more details.\\n *\\n * You should have received a copy of the GNU General Public License\\n * along with this program. If not, see <http://www.gnu.org/licenses/>.\\n */\\n// SPDX-License-Identifier: GNU General Public License v3.0\\n\\npragma solidity 0.8.0;\\n\\n/// @author Kam Amini <kam@arteq.io> <kam@2b.team> <kam.cpp@gmail.com>\\n/// @title The interface for finalizing tasks. Mainly used by artèQ contracts to\\n/// perform administrative tasks in conjuction with admin contract.\\ninterface IarteQTaskFinalizer {\\n\\n    event TaskFinalized(address finalizer, address origin, uint256 taskId);\\n\\n    function finalizeTask(address origin, uint256 taskId) external;\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/utils/introspection/IERC165.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC165 standard, as defined in the\\n * https://eips.ethereum.org/EIPS/eip-165[EIP].\\n *\\n * Implementers can declare support of contract interfaces, which can then be\\n * queried by others ({ERC165Checker}).\\n *\\n * For an implementation, see {ERC165}.\\n */\\ninterface IERC165 {\\n    /**\\n     * @dev Returns true if this contract implements the interface defined by\\n     * `interfaceId`. See the corresponding\\n     * https://eips.ethereum.org/EIPS/eip-165#how-interfaces-are-identified[EIP section]\\n     * to learn more about how these ids are created.\\n     *\\n     * This function call must use less than 30 000 gas.\\n     */\\n    function supportsInterface(bytes4 interfaceId) external view returns (bool);\\n}\\n\"\r\n    },\r\n    \"contracts/ERC1155.sol\": {\r\n      \"content\": \"/*\\n * This file is part of the contracts written for artèQ Investment Fund (https://github.com/billionbuild/arteq-contracts).\\n * Copyright (c) 2021 BillionBuild (2B) Team.\\n *\\n * This program is free software: you can redistribute it and/or modify\\n * it under the terms of the GNU General Public License as published by\\n * the Free Software Foundation, version 3.\\n *\\n * This program is distributed in the hope that it will be useful, but\\n * WITHOUT ANY WARRANTY; without even the implied warranty of\\n * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the GNU\\n * General Public License for more details.\\n *\\n * You should have received a copy of the GNU General Public License\\n * along with this program. If not, see <http://www.gnu.org/licenses/>.\\n */\\n// SPDX-License-Identifier: GNU General Public License v3.0\\n// Based on OpenZeppelin Contracts v4.3.2 (token/ERC1155/ERC1155.sol)\\n\\npragma solidity 0.8.0;\\n\\nimport \\\"@openzeppelin/contracts/token/ERC1155/IERC1155.sol\\\";\\nimport \\\"@openzeppelin/contracts/token/ERC1155/IERC1155Receiver.sol\\\";\\nimport \\\"@openzeppelin/contracts/token/ERC1155/extensions/IERC1155MetadataURI.sol\\\";\\nimport \\\"@openzeppelin/contracts/utils/Address.sol\\\";\\nimport \\\"@openzeppelin/contracts/utils/Context.sol\\\";\\nimport \\\"@openzeppelin/contracts/utils/introspection/ERC165.sol\\\";\\n\\n /**\\n  * @author Modified by Kam Amini <kam@arteq.io> <kam@2b.team> <kam.cpp@gmail.com>\\n  *\\n  * @notice Use at your own risk\\n  *\\n  * Note: 2B has modified the original code to cover its needs as\\n  * part of artèQ Investment Fund ecosystem\\n  */\\nabstract contract ERC1155 is Context, ERC165, IERC1155, IERC1155MetadataURI {\\n    using Address for address;\\n\\n    // Mapping from token ID to account balances\\n    // arteQ: we made this field public in order to distribute profits in the token contract\\n    mapping(uint256 => mapping(address => uint256)) public _balances;\\n\\n    // Mapping from account to operator approvals\\n    mapping(address => mapping(address => bool)) private _operatorApprovals;\\n\\n    /**\\n     * @dev See {_setURI}.\\n     */\\n    constructor() {\\n    }\\n\\n    /**\\n     * @dev See {IERC165-supportsInterface}.\\n     */\\n    function supportsInterface(bytes4 interfaceId) public view virtual override(ERC165, IERC165) returns (bool) {\\n        return\\n            interfaceId == type(IERC1155).interfaceId ||\\n            interfaceId == type(IERC1155MetadataURI).interfaceId ||\\n            super.supportsInterface(interfaceId);\\n    }\\n\\n\\n    /**\\n     * @dev See {IERC1155-balanceOf}.\\n     *\\n     * Requirements:\\n     *\\n     * - `account` cannot be the zero address.\\n     */\\n    function balanceOf(address account, uint256 id) public view virtual override returns (uint256) {\\n        require(account != address(0), \\\"ERC1155: balance query for the zero address\\\");\\n        return _balances[id][account];\\n    }\\n\\n    /**\\n     * @dev See {IERC1155-balanceOfBatch}.\\n     *\\n     * Requirements:\\n     *\\n     * - `accounts` and `ids` must have the same length.\\n     */\\n    function balanceOfBatch(address[] memory accounts, uint256[] memory ids)\\n        public\\n        view\\n        virtual\\n        override\\n        returns (uint256[] memory)\\n    {\\n        require(accounts.length == ids.length, \\\"ERC1155: accounts and ids length mismatch\\\");\\n\\n        uint256[] memory batchBalances = new uint256[](accounts.length);\\n\\n        for (uint256 i = 0; i < accounts.length; ++i) {\\n            batchBalances[i] = balanceOf(accounts[i], ids[i]);\\n        }\\n\\n        return batchBalances;\\n    }\\n\\n    /**\\n     * @dev See {IERC1155-setApprovalForAll}.\\n     */\\n    function setApprovalForAll(address operator, bool approved) public virtual override {\\n        _setApprovalForAll(_msgSender(), operator, approved);\\n    }\\n\\n    /**\\n     * @dev See {IERC1155-isApprovedForAll}.\\n     */\\n    function isApprovedForAll(address account, address operator) public view virtual override returns (bool) {\\n        return _operatorApprovals[account][operator];\\n    }\\n\\n    /**\\n     * @dev See {IERC1155-safeTransferFrom}.\\n     */\\n    function safeTransferFrom(\\n        address from,\\n        address to,\\n        uint256 id,\\n        uint256 amount,\\n        bytes memory data\\n    ) public virtual override {\\n        require(\\n            from == _msgSender() || isApprovedForAll(from, _msgSender()),\\n            \\\"ERC1155: caller is not owner nor approved \\\"\\n        );\\n        _safeTransferFrom(_msgSender(), from, to, id, amount, data);\\n    }\\n\\n    /**\\n     * @dev See {IERC1155-safeBatchTransferFrom}.\\n     */\\n    function safeBatchTransferFrom(\\n        address /* from */,\\n        address /* to */,\\n        uint256[] memory /* ids */,\\n        uint256[] memory /* amounts */,\\n        bytes memory /* data */\\n    ) public virtual override {\\n        revert(\\\"ERC1155: not implemented\\\");\\n    }\\n\\n    function _safeTransferFrom(\\n        address operator,\\n        address from,\\n        address to,\\n        uint256 id,\\n        uint256 amount,\\n        bytes memory data\\n    ) internal virtual {\\n        require(to != address(0), \\\"ERC1155: transfer to the zero address\\\");\\n\\n        // arteQ: we have to read the returned amount again as it can change in the function\\n        uint256[] memory amounts = _asArray(amount, 2);\\n        _beforeTokenTransfer(operator, from, to, id, amounts, data);\\n        uint256 fromAmount = amounts[0];\\n        uint256 toAmount = amounts[1];\\n\\n        uint256 fromBalance = _balances[id][from];\\n        require(fromBalance >= fromAmount, \\\"ERC1155: insufficient balance for transfer\\\");\\n        unchecked {\\n            _balances[id][from] = fromBalance - fromAmount;\\n        }\\n        _balances[id][to] += toAmount;\\n\\n        emit TransferSingle(operator, from, to, id, amount);\\n    }\\n\\n    function _initialMint(\\n        address to,\\n        uint256 id,\\n        uint256 amount,\\n        bytes memory data\\n    ) internal virtual {\\n        require(to != address(0), \\\"ERC1155: mint to the zero address\\\");\\n\\n        address operator = _msgSender();\\n\\n        _beforeTokenTransfer(operator, address(0), to, id, _asArray(amount, 2), data);\\n\\n        _balances[id][to] += amount;\\n        emit TransferSingle(operator, address(0), to, id, amount);\\n    }\\n\\n    function _setApprovalForAll(\\n        address owner,\\n        address operator,\\n        bool approved\\n    ) internal virtual {\\n        require(owner != operator, \\\"ERC1155: setting approval status for self\\\");\\n        _operatorApprovals[owner][operator] = approved;\\n        emit ApprovalForAll(owner, operator, approved);\\n    }\\n\\n    function _beforeTokenTransfer(\\n        address /* operator */,\\n        address /* from */,\\n        address /* to */,\\n        uint256 /* id */,\\n        uint256[] memory /* amounts */,\\n        bytes memory /* data */\\n    ) internal virtual {}\\n\\n    function _asArray(uint256 element, uint len) private pure returns (uint256[] memory) {\\n        if (len == 1) {\\n            uint256[] memory array = new uint256[](1);\\n            array[0] = element;\\n            return array;\\n        } else if (len == 2) {\\n            uint256[] memory array = new uint256[](2);\\n            array[0] = element;\\n            array[1] = element;\\n            return array;\\n        }\\n        revert(\\\"ERC1155: length must be 1 or 2\\\");\\n    }\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/token/ERC1155/IERC1155.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../../utils/introspection/IERC165.sol\\\";\\n\\n/**\\n * @dev Required interface of an ERC1155 compliant contract, as defined in the\\n * https://eips.ethereum.org/EIPS/eip-1155[EIP].\\n *\\n * _Available since v3.1._\\n */\\ninterface IERC1155 is IERC165 {\\n    /**\\n     * @dev Emitted when `value` tokens of token type `id` are transferred from `from` to `to` by `operator`.\\n     */\\n    event TransferSingle(address indexed operator, address indexed from, address indexed to, uint256 id, uint256 value);\\n\\n    /**\\n     * @dev Equivalent to multiple {TransferSingle} events, where `operator`, `from` and `to` are the same for all\\n     * transfers.\\n     */\\n    event TransferBatch(\\n        address indexed operator,\\n        address indexed from,\\n        address indexed to,\\n        uint256[] ids,\\n        uint256[] values\\n    );\\n\\n    /**\\n     * @dev Emitted when `account` grants or revokes permission to `operator` to transfer their tokens, according to\\n     * `approved`.\\n     */\\n    event ApprovalForAll(address indexed account, address indexed operator, bool approved);\\n\\n    /**\\n     * @dev Emitted when the URI for token type `id` changes to `value`, if it is a non-programmatic URI.\\n     *\\n     * If an {URI} event was emitted for `id`, the standard\\n     * https://eips.ethereum.org/EIPS/eip-1155#metadata-extensions[guarantees] that `value` will equal the value\\n     * returned by {IERC1155MetadataURI-uri}.\\n     */\\n    event URI(string value, uint256 indexed id);\\n\\n    /**\\n     * @dev Returns the amount of tokens of token type `id` owned by `account`.\\n     *\\n     * Requirements:\\n     *\\n     * - `account` cannot be the zero address.\\n     */\\n    function balanceOf(address account, uint256 id) external view returns (uint256);\\n\\n    /**\\n     * @dev xref:ROOT:erc1155.adoc#batch-operations[Batched] version of {balanceOf}.\\n     *\\n     * Requirements:\\n     *\\n     * - `accounts` and `ids` must have the same length.\\n     */\\n    function balanceOfBatch(address[] calldata accounts, uint256[] calldata ids)\\n        external\\n        view\\n        returns (uint256[] memory);\\n\\n    /**\\n     * @dev Grants or revokes permission to `operator` to transfer the caller's tokens, according to `approved`,\\n     *\\n     * Emits an {ApprovalForAll} event.\\n     *\\n     * Requirements:\\n     *\\n     * - `operator` cannot be the caller.\\n     */\\n    function setApprovalForAll(address operator, bool approved) external;\\n\\n    /**\\n     * @dev Returns true if `operator` is approved to transfer ``account``'s tokens.\\n     *\\n     * See {setApprovalForAll}.\\n     */\\n    function isApprovedForAll(address account, address operator) external view returns (bool);\\n\\n    /**\\n     * @dev Transfers `amount` tokens of token type `id` from `from` to `to`.\\n     *\\n     * Emits a {TransferSingle} event.\\n     *\\n     * Requirements:\\n     *\\n     * - `to` cannot be the zero address.\\n     * - If the caller is not `from`, it must be have been approved to spend ``from``'s tokens via {setApprovalForAll}.\\n     * - `from` must have a balance of tokens of type `id` of at least `amount`.\\n     * - If `to` refers to a smart contract, it must implement {IERC1155Receiver-onERC1155Received} and return the\\n     * acceptance magic value.\\n     */\\n    function safeTransferFrom(\\n        address from,\\n        address to,\\n        uint256 id,\\n        uint256 amount,\\n        bytes calldata data\\n    ) external;\\n\\n    /**\\n     * @dev xref:ROOT:erc1155.adoc#batch-operations[Batched] version of {safeTransferFrom}.\\n     *\\n     * Emits a {TransferBatch} event.\\n     *\\n     * Requirements:\\n     *\\n     * - `ids` and `amounts` must have the same length.\\n     * - If `to` refers to a smart contract, it must implement {IERC1155Receiver-onERC1155BatchReceived} and return the\\n     * acceptance magic value.\\n     */\\n    function safeBatchTransferFrom(\\n        address from,\\n        address to,\\n        uint256[] calldata ids,\\n        uint256[] calldata amounts,\\n        bytes calldata data\\n    ) external;\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/token/ERC1155/IERC1155Receiver.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../../utils/introspection/IERC165.sol\\\";\\n\\n/**\\n * @dev _Available since v3.1._\\n */\\ninterface IERC1155Receiver is IERC165 {\\n    /**\\n        @dev Handles the receipt of a single ERC1155 token type. This function is\\n        called at the end of a `safeTransferFrom` after the balance has been updated.\\n        To accept the transfer, this must return\\n        `bytes4(keccak256(\\\"onERC1155Received(address,address,uint256,uint256,bytes)\\\"))`\\n        (i.e. 0xf23a6e61, or its own function selector).\\n        @param operator The address which initiated the transfer (i.e. msg.sender)\\n        @param from The address which previously owned the token\\n        @param id The ID of the token being transferred\\n        @param value The amount of tokens being transferred\\n        @param data Additional data with no specified format\\n        @return `bytes4(keccak256(\\\"onERC1155Received(address,address,uint256,uint256,bytes)\\\"))` if transfer is allowed\\n    */\\n    function onERC1155Received(\\n        address operator,\\n        address from,\\n        uint256 id,\\n        uint256 value,\\n        bytes calldata data\\n    ) external returns (bytes4);\\n\\n    /**\\n        @dev Handles the receipt of a multiple ERC1155 token types. This function\\n        is called at the end of a `safeBatchTransferFrom` after the balances have\\n        been updated. To accept the transfer(s), this must return\\n        `bytes4(keccak256(\\\"onERC1155BatchReceived(address,address,uint256[],uint256[],bytes)\\\"))`\\n        (i.e. 0xbc197c81, or its own function selector).\\n        @param operator The address which initiated the batch transfer (i.e. msg.sender)\\n        @param from The address which previously owned the token\\n        @param ids An array containing ids of each token being transferred (order and length must match values array)\\n        @param values An array containing amounts of each token being transferred (order and length must match ids array)\\n        @param data Additional data with no specified format\\n        @return `bytes4(keccak256(\\\"onERC1155BatchReceived(address,address,uint256[],uint256[],bytes)\\\"))` if transfer is allowed\\n    */\\n    function onERC1155BatchReceived(\\n        address operator,\\n        address from,\\n        uint256[] calldata ids,\\n        uint256[] calldata values,\\n        bytes calldata data\\n    ) external returns (bytes4);\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/token/ERC1155/extensions/IERC1155MetadataURI.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../IERC1155.sol\\\";\\n\\n/**\\n * @dev Interface of the optional ERC1155MetadataExtension interface, as defined\\n * in the https://eips.ethereum.org/EIPS/eip-1155#metadata-extensions[EIP].\\n *\\n * _Available since v3.1._\\n */\\ninterface IERC1155MetadataURI is IERC1155 {\\n    /**\\n     * @dev Returns the URI for token type `id`.\\n     *\\n     * If the `\\\\{id\\\\}` substring is present in the URI, it must be replaced by\\n     * clients with the actual token type ID.\\n     */\\n    function uri(uint256 id) external view returns (string memory);\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/utils/Address.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Collection of functions related to the address type\\n */\\nlibrary Address {\\n    /**\\n     * @dev Returns true if `account` is a contract.\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * It is unsafe to assume that an address for which this function returns\\n     * false is an externally-owned account (EOA) and not a contract.\\n     *\\n     * Among others, `isContract` will return false for the following\\n     * types of addresses:\\n     *\\n     *  - an externally-owned account\\n     *  - a contract in construction\\n     *  - an address where a contract will be created\\n     *  - an address where a contract lived, but was destroyed\\n     * ====\\n     */\\n    function isContract(address account) internal view returns (bool) {\\n        // This method relies on extcodesize, which returns 0 for contracts in\\n        // construction, since the code is only stored at the end of the\\n        // constructor execution.\\n\\n        uint256 size;\\n        assembly {\\n            size := extcodesize(account)\\n        }\\n        return size > 0;\\n    }\\n\\n    /**\\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\\n     * `recipient`, forwarding all available gas and reverting on errors.\\n     *\\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\\n     * imposed by `transfer`, making them unable to receive funds via\\n     * `transfer`. {sendValue} removes this limitation.\\n     *\\n     * https://diligence.consensys.net/posts/2019/09/stop-using-soliditys-transfer-now/[Learn more].\\n     *\\n     * IMPORTANT: because control is transferred to `recipient`, care must be\\n     * taken to not create reentrancy vulnerabilities. Consider using\\n     * {ReentrancyGuard} or the\\n     * https://solidity.readthedocs.io/en/v0.5.11/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\\n     */\\n    function sendValue(address payable recipient, uint256 amount) internal {\\n        require(address(this).balance >= amount, \\\"Address: insufficient balance\\\");\\n\\n        (bool success, ) = recipient.call{value: amount}(\\\"\\\");\\n        require(success, \\\"Address: unable to send value, recipient may have reverted\\\");\\n    }\\n\\n    /**\\n     * @dev Performs a Solidity function call using a low level `call`. A\\n     * plain `call` is an unsafe replacement for a function call: use this\\n     * function instead.\\n     *\\n     * If `target` reverts with a revert reason, it is bubbled up by this\\n     * function (like regular Solidity function calls).\\n     *\\n     * Returns the raw returned data. To convert to the expected return value,\\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\\n     *\\n     * Requirements:\\n     *\\n     * - `target` must be a contract.\\n     * - calling `target` with `data` must not revert.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionCall(target, data, \\\"Address: low-level call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\\n     * `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, 0, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but also transferring `value` wei to `target`.\\n     *\\n     * Requirements:\\n     *\\n     * - the calling contract must have an ETH balance of at least `value`.\\n     * - the called Solidity function must be `payable`.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, value, \\\"Address: low-level call with value failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\\n     * with `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        require(address(this).balance >= value, \\\"Address: insufficient balance for call\\\");\\n        require(isContract(target), \\\"Address: call to non-contract\\\");\\n\\n        (bool success, bytes memory returndata) = target.call{value: value}(data);\\n        return verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\\n        return functionStaticCall(target, data, \\\"Address: low-level static call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal view returns (bytes memory) {\\n        require(isContract(target), \\\"Address: static call to non-contract\\\");\\n\\n        (bool success, bytes memory returndata) = target.staticcall(data);\\n        return verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionDelegateCall(target, data, \\\"Address: low-level delegate call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        require(isContract(target), \\\"Address: delegate call to non-contract\\\");\\n\\n        (bool success, bytes memory returndata) = target.delegatecall(data);\\n        return verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Tool to verifies that a low level call was successful, and revert if it wasn't, either by bubbling the\\n     * revert reason using the provided one.\\n     *\\n     * _Available since v4.3._\\n     */\\n    function verifyCallResult(\\n        bool success,\\n        bytes memory returndata,\\n        string memory errorMessage\\n    ) internal pure returns (bytes memory) {\\n        if (success) {\\n            return returndata;\\n        } else {\\n            // Look for revert reason and bubble it up if present\\n            if (returndata.length > 0) {\\n                // The easiest way to bubble the revert reason is using memory via assembly\\n\\n                assembly {\\n                    let returndata_size := mload(returndata)\\n                    revert(add(32, returndata), returndata_size)\\n                }\\n            } else {\\n                revert(errorMessage);\\n            }\\n        }\\n    }\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/utils/Context.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Provides information about the current execution context, including the\\n * sender of the transaction and its data. While these are generally available\\n * via msg.sender and msg.data, they should not be accessed in such a direct\\n * manner, since when dealing with meta-transactions the account sending and\\n * paying for execution may not be the actual sender (as far as an application\\n * is concerned).\\n *\\n * This contract is only required for intermediate, library-like contracts.\\n */\\nabstract contract Context {\\n    function _msgSender() internal view virtual returns (address) {\\n        return msg.sender;\\n    }\\n\\n    function _msgData() internal view virtual returns (bytes calldata) {\\n        return msg.data;\\n    }\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/utils/introspection/ERC165.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"./IERC165.sol\\\";\\n\\n/**\\n * @dev Implementation of the {IERC165} interface.\\n *\\n * Contracts that want to implement ERC165 should inherit from this contract and override {supportsInterface} to check\\n * for the additional interface id that will be supported. For example:\\n *\\n * ```solidity\\n * function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {\\n *     return interfaceId == type(MyInterface).interfaceId || super.supportsInterface(interfaceId);\\n * }\\n * ```\\n *\\n * Alternatively, {ERC165Storage} provides an easier to use but more expensive implementation.\\n */\\nabstract contract ERC165 is IERC165 {\\n    /**\\n     * @dev See {IERC165-supportsInterface}.\\n     */\\n    function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {\\n        return interfaceId == type(IERC165).interfaceId;\\n    }\\n}\\n\"\r\n    }\r\n  },\r\n  \"settings\": {\r\n    \"optimizer\": {\r\n      \"enabled\": true,\r\n      \"runs\": 2000,\r\n      \"details\": {\r\n        \"yul\": true,\r\n        \"yulDetails\": {\r\n          \"stackAllocation\": true,\r\n          \"optimizerSteps\": \"dhfoDgvulfnTUtnIf\"\r\n        }\r\n      }\r\n    },\r\n    \"outputSelection\": {\r\n      \"*\": {\r\n        \"*\": [\r\n          \"evm.bytecode\",\r\n          \"evm.deployedBytecode\",\r\n          \"devdoc\",\r\n          \"userdoc\",\r\n          \"metadata\",\r\n          \"abi\"\r\n        ]\r\n      }\r\n    },\r\n    \"libraries\": {}\r\n  }\r\n}}","ABI":"[{\"inputs\":[{\"internalType\":\"address\",\"name\":\"adminContract\",\"type\":\"address\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"newContract\",\"type\":\"address\"}],\"name\":\"AdminContractChanged\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"operator\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"bool\",\"name\":\"approved\",\"type\":\"bool\"}],\"name\":\"ApprovalForAll\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"newAccount\",\"type\":\"address\"}],\"name\":\"Exchange1AccountChanged\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"newAccount\",\"type\":\"address\"}],\"name\":\"Exchange2AccountChanged\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"newAccount\",\"type\":\"address\"}],\"name\":\"Exchange3AccountChanged\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"newAccount\",\"type\":\"address\"}],\"name\":\"Exchange4AccountChanged\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"newAccount\",\"type\":\"address\"}],\"name\":\"Exchange5AccountChanged\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"ManualBuyBackWithdrawalFromTreasury\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"newPercentage\",\"type\":\"uint256\"}],\"name\":\"ProfitPercentageChanged\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"ProfitTokensCollected\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"ProfitTokensDistributed\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"lockedUntilTimestamp\",\"type\":\"uint256\"}],\"name\":\"RampUpPhaseTokensDistributed\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"operator\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256[]\",\"name\":\"ids\",\"type\":\"uint256[]\"},{\"indexed\":false,\"internalType\":\"uint256[]\",\"name\":\"values\",\"type\":\"uint256[]\"}],\"name\":\"TransferBatch\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"operator\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"id\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"TransferSingle\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"newAccount\",\"type\":\"address\"}],\"name\":\"TreasuryAccountChanged\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"string\",\"name\":\"value\",\"type\":\"string\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"id\",\"type\":\"uint256\"}],\"name\":\"URI\",\"type\":\"event\"},{\"stateMutability\":\"payable\",\"type\":\"fallback\"},{\"inputs\":[],\"name\":\"ARTEQ\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"_balances\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"allTimeProfit\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"adminTaskId\",\"type\":\"uint256\"},{\"internalType\":\"contract IERC721\",\"name\":\"foreignNFT\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"}],\"name\":\"approveNFTRescue\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"balanceOf\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address[]\",\"name\":\"accounts\",\"type\":\"address[]\"},{\"internalType\":\"uint256[]\",\"name\":\"ids\",\"type\":\"uint256[]\"}],\"name\":\"balanceOfBatch\",\"outputs\":[{\"internalType\":\"uint256[]\",\"name\":\"\",\"type\":\"uint256[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"operator\",\"type\":\"address\"}],\"name\":\"compatAllowance\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"origin\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"operator\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"compatApprove\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"compatBalanceOf\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"compatTotalSupply\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"origin\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"compatTransfer\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"origin\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"compatTransferFrom\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"id\",\"type\":\"uint256\"}],\"name\":\"exists\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"gARTEQ\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getExchange1Account\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getExchange2Account\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getExchange3Account\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getExchange4Account\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getExchange5Account\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getProfitPercentage\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getTreasuryAccount\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"operator\",\"type\":\"address\"}],\"name\":\"isApprovedForAll\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"adminTaskId\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"boughtBackTokensAmount\",\"type\":\"uint256\"}],\"name\":\"processManualBuyBackEvent\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"profitTokensTransferredToAccounts\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"adminTaskId\",\"type\":\"uint256\"},{\"internalType\":\"address[]\",\"name\":\"tos\",\"type\":\"address[]\"},{\"internalType\":\"uint256[]\",\"name\":\"amounts\",\"type\":\"uint256[]\"},{\"internalType\":\"uint256[]\",\"name\":\"lockedUntilTimestamps\",\"type\":\"uint256[]\"}],\"name\":\"rampUpPhaseDistributeToken\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"adminTaskId\",\"type\":\"uint256\"},{\"internalType\":\"contract IERC20\",\"name\":\"foreignToken\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"}],\"name\":\"rescueTokens\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"},{\"internalType\":\"uint256[]\",\"name\":\"\",\"type\":\"uint256[]\"},{\"internalType\":\"uint256[]\",\"name\":\"\",\"type\":\"uint256[]\"},{\"internalType\":\"bytes\",\"name\":\"\",\"type\":\"bytes\"}],\"name\":\"safeBatchTransferFrom\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"id\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"internalType\":\"bytes\",\"name\":\"data\",\"type\":\"bytes\"}],\"name\":\"safeTransferFrom\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"operator\",\"type\":\"address\"},{\"internalType\":\"bool\",\"name\":\"approved\",\"type\":\"bool\"}],\"name\":\"setApprovalForAll\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"adminTaskId\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"newAccount\",\"type\":\"address\"}],\"name\":\"setExchange1Account\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"adminTaskId\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"newAccount\",\"type\":\"address\"}],\"name\":\"setExchange2Account\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"adminTaskId\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"newAccount\",\"type\":\"address\"}],\"name\":\"setExchange3Account\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"adminTaskId\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"newAccount\",\"type\":\"address\"}],\"name\":\"setExchange4Account\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"adminTaskId\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"newAccount\",\"type\":\"address\"}],\"name\":\"setExchange5Account\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"adminTaskId\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"newPercentage\",\"type\":\"uint256\"}],\"name\":\"setProfitPercentage\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"adminTaskId\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"newAccount\",\"type\":\"address\"}],\"name\":\"setTreasuryAccount\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"adminTaskId\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"},{\"internalType\":\"string\",\"name\":\"newUri\",\"type\":\"string\"}],\"name\":\"setURI\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes4\",\"name\":\"interfaceId\",\"type\":\"bytes4\"}],\"name\":\"supportsInterface\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalCirculatingGovernanceTokens\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"id\",\"type\":\"uint256\"}],\"name\":\"totalSupply\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"adminTaskId\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"id\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"transferFromAdminContract\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"uri\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"stateMutability\":\"payable\",\"type\":\"receive\"}]","ContractName":"arteQTokens","CompilerVersion":"v0.8.0+commit.c7dfd78e","OptimizationUsed":"1","Runs":"2000","ConstructorArguments":"000000000000000000000000554823b9ddb01304252b84dafedfb2214e7e5fd8","EVMVersion":"Default","Library":"","LicenseType":"","Proxy":"0","Implementation":"","SwarmSource":""}]}