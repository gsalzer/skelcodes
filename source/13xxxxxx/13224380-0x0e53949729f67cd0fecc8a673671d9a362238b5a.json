{"status":"1","message":"OK","result":[{"SourceCode":"{{\r\n  \"language\": \"Solidity\",\r\n  \"sources\": {\r\n    \"contracts/amm/IVGuesser.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: agpl-3.0\\n\\npragma solidity 0.6.12;\\npragma experimental ABIEncoderV2;\\n\\nimport \\\"@openzeppelin/contracts/math/SafeMath.sol\\\";\\nimport \\\"../interfaces/IBlackScholes.sol\\\";\\nimport \\\"../interfaces/IPodOption.sol\\\";\\nimport \\\"../interfaces/IIVGuesser.sol\\\";\\nimport \\\"../interfaces/IConfigurationManager.sol\\\";\\n\\ncontract IVGuesser is IIVGuesser {\\n    using SafeMath for uint256;\\n    IBlackScholes private immutable _blackScholes;\\n\\n    /**\\n     * @dev store globally accessed configurations\\n     */\\n    IConfigurationManager public immutable configurationManager;\\n\\n    /**\\n     * @dev numerical method's acceptable range\\n     */\\n    uint256 public acceptableRange;\\n\\n    /**\\n     * @dev Min numerical method's acceptable range\\n     */\\n    uint256 public constant MIN_ACCEPTABLE_RANGE = 10; //10%\\n\\n    struct Boundaries {\\n        uint256 ivLower;\\n        uint256 priceLower;\\n        uint256 ivHigher;\\n        uint256 priceHigher;\\n    }\\n\\n    constructor(IConfigurationManager _configurationManager, address blackScholes) public {\\n        require(blackScholes != address(0), \\\"IV: Invalid blackScholes\\\");\\n\\n        configurationManager = _configurationManager;\\n\\n        acceptableRange = _configurationManager.getParameter(\\\"GUESSER_ACCEPTABLE_RANGE\\\");\\n\\n        require(acceptableRange >= MIN_ACCEPTABLE_RANGE, \\\"IV: Invalid acceptableRange\\\");\\n\\n        _blackScholes = IBlackScholes(blackScholes);\\n    }\\n\\n    function blackScholes() external override view returns (address) {\\n        return address(_blackScholes);\\n    }\\n\\n    function getPutIV(\\n        uint256 _targetPrice,\\n        uint256 _initialIVGuess,\\n        uint256 _spotPrice,\\n        uint256 _strikePrice,\\n        uint256 _timeToMaturity,\\n        int256 _riskFree\\n    ) external override view returns (uint256 calculatedIV, uint256 calculatedPrice) {\\n        (calculatedIV, calculatedPrice) = getApproximatedIV(\\n            _targetPrice,\\n            _initialIVGuess,\\n            _spotPrice,\\n            _strikePrice,\\n            _timeToMaturity,\\n            _riskFree,\\n            IPodOption.OptionType.PUT\\n        );\\n        return (calculatedIV, calculatedPrice);\\n    }\\n\\n    function getCallIV(\\n        uint256 _targetPrice,\\n        uint256 _initialIVGuess,\\n        uint256 _spotPrice,\\n        uint256 _strikePrice,\\n        uint256 _timeToMaturity,\\n        int256 _riskFree\\n    ) external override view returns (uint256 calculatedIV, uint256 calculatedPrice) {\\n        (calculatedIV, calculatedPrice) = getApproximatedIV(\\n            _targetPrice,\\n            _initialIVGuess,\\n            _spotPrice,\\n            _strikePrice,\\n            _timeToMaturity,\\n            _riskFree,\\n            IPodOption.OptionType.CALL\\n        );\\n        return (calculatedIV, calculatedPrice);\\n    }\\n\\n    function getCloserIV(Boundaries memory boundaries, uint256 targetPrice) external pure returns (uint256) {\\n        return _getCloserIV(boundaries, targetPrice);\\n    }\\n\\n    /**\\n     * Get an approximation of implied volatility given a target price inside an error range\\n     *\\n     * @param _targetPrice The target price that we need to find the implied volatility for\\n     * @param _initialIVGuess Implied Volatility guess in order to reduce gas costs\\n     * @param _spotPrice Current spot price of the underlying\\n     * @param _strikePrice Option strike price\\n     * @param _timeToMaturity Annualized time to maturity\\n     * @param _riskFree The risk-free rate\\n     * @param _optionType the option type (0 for PUt, 1 for Call)\\n     * @return calculatedIV The new implied volatility found given _targetPrice and inside ACCEPTABLE_ERROR\\n     * @return calculatedPrice That is the real price found, in the best scenario, calculated price should\\n     * be equal to _targetPrice\\n     */\\n    function getApproximatedIV(\\n        uint256 _targetPrice,\\n        uint256 _initialIVGuess,\\n        uint256 _spotPrice,\\n        uint256 _strikePrice,\\n        uint256 _timeToMaturity,\\n        int256 _riskFree,\\n        IPodOption.OptionType _optionType\\n    ) public view returns (uint256 calculatedIV, uint256 calculatedPrice) {\\n        require(_initialIVGuess > 0, \\\"IV: initial guess should be greater than zero\\\");\\n        uint256 calculatedInitialPrice = _getPrice(\\n            _spotPrice,\\n            _strikePrice,\\n            _initialIVGuess,\\n            _timeToMaturity,\\n            _riskFree,\\n            _optionType\\n        );\\n        if (_equalEnough(_targetPrice, calculatedInitialPrice, acceptableRange)) {\\n            return (_initialIVGuess, calculatedInitialPrice);\\n        } else {\\n            Boundaries memory boundaries = _getInitialBoundaries(\\n                _targetPrice,\\n                calculatedInitialPrice,\\n                _initialIVGuess,\\n                _spotPrice,\\n                _strikePrice,\\n                _timeToMaturity,\\n                _riskFree,\\n                _optionType\\n            );\\n            calculatedIV = _getCloserIV(boundaries, _targetPrice);\\n            calculatedPrice = _getPrice(\\n                _spotPrice,\\n                _strikePrice,\\n                calculatedIV,\\n                _timeToMaturity,\\n                _riskFree,\\n                _optionType\\n            );\\n\\n            while (_equalEnough(_targetPrice, calculatedPrice, acceptableRange) == false) {\\n                if (calculatedPrice < _targetPrice) {\\n                    boundaries.priceLower = calculatedPrice;\\n                    boundaries.ivLower = calculatedIV;\\n                } else {\\n                    boundaries.priceHigher = calculatedPrice;\\n                    boundaries.ivHigher = calculatedIV;\\n                }\\n                calculatedIV = _getCloserIV(boundaries, _targetPrice);\\n\\n                calculatedPrice = _getPrice(\\n                    _spotPrice,\\n                    _strikePrice,\\n                    calculatedIV,\\n                    _timeToMaturity,\\n                    _riskFree,\\n                    _optionType\\n                );\\n            }\\n            return (calculatedIV, calculatedPrice);\\n        }\\n    }\\n\\n    /**********************************************************************************************\\n    // Each time you run this function, returns you a closer implied volatility value to          //\\n    // the target price p0 getCloserIV                                                            //\\n    // sL = IVLower                                                                               //\\n    // sH = IVHigher                                    ( sH - sL )                               //\\n    // pL = priceLower          sN = sL + ( p0 - pL ) * -----------                               //\\n    // pH = priceHigher                                 ( pH - pL )                               //\\n    // p0 = targetPrice                                                                           //\\n    // sN = IVNext                                                                                //\\n    **********************************************************************************************/\\n    function _getCloserIV(Boundaries memory boundaries, uint256 targetPrice) internal pure returns (uint256) {\\n        uint256 numerator = targetPrice.sub(boundaries.priceLower).mul(boundaries.ivHigher.sub(boundaries.ivLower));\\n        uint256 denominator = boundaries.priceHigher.sub(boundaries.priceLower);\\n\\n        uint256 result = numerator.div(denominator);\\n        uint256 nextIV = boundaries.ivLower.add(result);\\n        return nextIV;\\n    }\\n\\n    function _getPrice(\\n        uint256 _spotPrice,\\n        uint256 _strikePrice,\\n        uint256 calculatedIV,\\n        uint256 _timeToMaturity,\\n        int256 _riskFree,\\n        IPodOption.OptionType _optionType\\n    ) internal view returns (uint256 price) {\\n        if (_optionType == IPodOption.OptionType.PUT) {\\n            price = _blackScholes.getPutPrice(_spotPrice, _strikePrice, calculatedIV, _timeToMaturity, _riskFree);\\n        } else {\\n            price = _blackScholes.getCallPrice(_spotPrice, _strikePrice, calculatedIV, _timeToMaturity, _riskFree);\\n        }\\n        return price;\\n    }\\n\\n    function _equalEnough(\\n        uint256 target,\\n        uint256 value,\\n        uint256 range\\n    ) internal pure returns (bool) {\\n        uint256 proportion = target / range;\\n        if (target > value) {\\n            uint256 diff = target - value;\\n            return diff <= proportion;\\n        } else {\\n            uint256 diff = value - target;\\n            return diff <= proportion;\\n        }\\n    }\\n\\n    function _getInitialBoundaries(\\n        uint256 _targetPrice,\\n        uint256 initialPrice,\\n        uint256 initialIV,\\n        uint256 _spotPrice,\\n        uint256 _strikePrice,\\n        uint256 _timeToMaturity,\\n        int256 _riskFree,\\n        IPodOption.OptionType _optionType\\n    ) internal view returns (Boundaries memory b) {\\n        b.ivLower = 0;\\n        b.priceLower = 0;\\n        uint256 newGuessPrice = initialPrice;\\n        uint256 newGuessIV = initialIV;\\n\\n        // nextGuessIV = nextTryPrice\\n        while (newGuessPrice < _targetPrice) {\\n            b.ivLower = newGuessIV;\\n            b.priceLower = newGuessPrice;\\n\\n            // it keep increasing the currentIV in 150% until it finds a new higher boundary\\n            newGuessIV = newGuessIV.add(newGuessIV.div(2));\\n            newGuessPrice = _getPrice(_spotPrice, _strikePrice, newGuessIV, _timeToMaturity, _riskFree, _optionType);\\n        }\\n        b.ivHigher = newGuessIV;\\n        b.priceHigher = newGuessPrice;\\n    }\\n\\n    /**\\n     * @notice Update acceptableRange calling configuratorManager\\n     */\\n    function updateAcceptableRange() external override {\\n        acceptableRange = configurationManager.getParameter(\\\"GUESSER_ACCEPTABLE_RANGE\\\");\\n        require(acceptableRange >= MIN_ACCEPTABLE_RANGE, \\\"IV: Invalid acceptableRange\\\");\\n    }\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/math/SafeMath.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity >=0.6.0 <0.8.0;\\n\\n/**\\n * @dev Wrappers over Solidity's arithmetic operations with added overflow\\n * checks.\\n *\\n * Arithmetic operations in Solidity wrap on overflow. This can easily result\\n * in bugs, because programmers usually assume that an overflow raises an\\n * error, which is the standard behavior in high level programming languages.\\n * `SafeMath` restores this intuition by reverting the transaction when an\\n * operation overflows.\\n *\\n * Using this library instead of the unchecked operations eliminates an entire\\n * class of bugs, so it's recommended to use it always.\\n */\\nlibrary SafeMath {\\n    /**\\n     * @dev Returns the addition of two unsigned integers, with an overflow flag.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function tryAdd(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        uint256 c = a + b;\\n        if (c < a) return (false, 0);\\n        return (true, c);\\n    }\\n\\n    /**\\n     * @dev Returns the substraction of two unsigned integers, with an overflow flag.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function trySub(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        if (b > a) return (false, 0);\\n        return (true, a - b);\\n    }\\n\\n    /**\\n     * @dev Returns the multiplication of two unsigned integers, with an overflow flag.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function tryMul(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        // Gas optimization: this is cheaper than requiring 'a' not being zero, but the\\n        // benefit is lost if 'b' is also tested.\\n        // See: https://github.com/OpenZeppelin/openzeppelin-contracts/pull/522\\n        if (a == 0) return (true, 0);\\n        uint256 c = a * b;\\n        if (c / a != b) return (false, 0);\\n        return (true, c);\\n    }\\n\\n    /**\\n     * @dev Returns the division of two unsigned integers, with a division by zero flag.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function tryDiv(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        if (b == 0) return (false, 0);\\n        return (true, a / b);\\n    }\\n\\n    /**\\n     * @dev Returns the remainder of dividing two unsigned integers, with a division by zero flag.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function tryMod(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        if (b == 0) return (false, 0);\\n        return (true, a % b);\\n    }\\n\\n    /**\\n     * @dev Returns the addition of two unsigned integers, reverting on\\n     * overflow.\\n     *\\n     * Counterpart to Solidity's `+` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Addition cannot overflow.\\n     */\\n    function add(uint256 a, uint256 b) internal pure returns (uint256) {\\n        uint256 c = a + b;\\n        require(c >= a, \\\"SafeMath: addition overflow\\\");\\n        return c;\\n    }\\n\\n    /**\\n     * @dev Returns the subtraction of two unsigned integers, reverting on\\n     * overflow (when the result is negative).\\n     *\\n     * Counterpart to Solidity's `-` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Subtraction cannot overflow.\\n     */\\n    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\\n        require(b <= a, \\\"SafeMath: subtraction overflow\\\");\\n        return a - b;\\n    }\\n\\n    /**\\n     * @dev Returns the multiplication of two unsigned integers, reverting on\\n     * overflow.\\n     *\\n     * Counterpart to Solidity's `*` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Multiplication cannot overflow.\\n     */\\n    function mul(uint256 a, uint256 b) internal pure returns (uint256) {\\n        if (a == 0) return 0;\\n        uint256 c = a * b;\\n        require(c / a == b, \\\"SafeMath: multiplication overflow\\\");\\n        return c;\\n    }\\n\\n    /**\\n     * @dev Returns the integer division of two unsigned integers, reverting on\\n     * division by zero. The result is rounded towards zero.\\n     *\\n     * Counterpart to Solidity's `/` operator. Note: this function uses a\\n     * `revert` opcode (which leaves remaining gas untouched) while Solidity\\n     * uses an invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Requirements:\\n     *\\n     * - The divisor cannot be zero.\\n     */\\n    function div(uint256 a, uint256 b) internal pure returns (uint256) {\\n        require(b > 0, \\\"SafeMath: division by zero\\\");\\n        return a / b;\\n    }\\n\\n    /**\\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\\n     * reverting when dividing by zero.\\n     *\\n     * Counterpart to Solidity's `%` operator. This function uses a `revert`\\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\\n     * invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Requirements:\\n     *\\n     * - The divisor cannot be zero.\\n     */\\n    function mod(uint256 a, uint256 b) internal pure returns (uint256) {\\n        require(b > 0, \\\"SafeMath: modulo by zero\\\");\\n        return a % b;\\n    }\\n\\n    /**\\n     * @dev Returns the subtraction of two unsigned integers, reverting with custom message on\\n     * overflow (when the result is negative).\\n     *\\n     * CAUTION: This function is deprecated because it requires allocating memory for the error\\n     * message unnecessarily. For custom revert reasons use {trySub}.\\n     *\\n     * Counterpart to Solidity's `-` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Subtraction cannot overflow.\\n     */\\n    function sub(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\\n        require(b <= a, errorMessage);\\n        return a - b;\\n    }\\n\\n    /**\\n     * @dev Returns the integer division of two unsigned integers, reverting with custom message on\\n     * division by zero. The result is rounded towards zero.\\n     *\\n     * CAUTION: This function is deprecated because it requires allocating memory for the error\\n     * message unnecessarily. For custom revert reasons use {tryDiv}.\\n     *\\n     * Counterpart to Solidity's `/` operator. Note: this function uses a\\n     * `revert` opcode (which leaves remaining gas untouched) while Solidity\\n     * uses an invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Requirements:\\n     *\\n     * - The divisor cannot be zero.\\n     */\\n    function div(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\\n        require(b > 0, errorMessage);\\n        return a / b;\\n    }\\n\\n    /**\\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\\n     * reverting with custom message when dividing by zero.\\n     *\\n     * CAUTION: This function is deprecated because it requires allocating memory for the error\\n     * message unnecessarily. For custom revert reasons use {tryMod}.\\n     *\\n     * Counterpart to Solidity's `%` operator. This function uses a `revert`\\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\\n     * invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Requirements:\\n     *\\n     * - The divisor cannot be zero.\\n     */\\n    function mod(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\\n        require(b > 0, errorMessage);\\n        return a % b;\\n    }\\n}\\n\"\r\n    },\r\n    \"contracts/interfaces/IBlackScholes.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: agpl-3.0\\n\\npragma solidity >=0.6.12;\\n\\ninterface IBlackScholes {\\n    function getCallPrice(\\n        uint256 spotPrice,\\n        uint256 strikePrice,\\n        uint256 sigma,\\n        uint256 time,\\n        int256 riskFree\\n    ) external view returns (uint256);\\n\\n    function getPutPrice(\\n        uint256 spotPrice,\\n        uint256 strikePrice,\\n        uint256 sigma,\\n        uint256 time,\\n        int256 riskFree\\n    ) external view returns (uint256);\\n}\\n\"\r\n    },\r\n    \"contracts/interfaces/IPodOption.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: agpl-3.0\\n\\npragma solidity 0.6.12;\\n\\nimport \\\"@openzeppelin/contracts/token/ERC20/IERC20.sol\\\";\\n\\ninterface IPodOption is IERC20 {\\n    /** Enums */\\n    // @dev 0 for Put, 1 for Call\\n    enum OptionType { PUT, CALL }\\n    // @dev 0 for European, 1 for American\\n    enum ExerciseType { EUROPEAN, AMERICAN }\\n\\n    /** Events */\\n    event Mint(address indexed minter, uint256 amount);\\n    event Unmint(address indexed minter, uint256 optionAmount, uint256 strikeAmount, uint256 underlyingAmount);\\n    event Exercise(address indexed exerciser, uint256 amount);\\n    event Withdraw(address indexed minter, uint256 strikeAmount, uint256 underlyingAmount);\\n\\n    /** Functions */\\n\\n    /**\\n     * @notice Locks collateral and write option tokens.\\n     *\\n     * @dev The issued amount ratio is 1:1, i.e., 1 option token for 1 underlying token.\\n     *\\n     * The collateral could be the strike or the underlying asset depending on the option type: Put or Call,\\n     * respectively\\n     *\\n     * It presumes the caller has already called IERC20.approve() on the\\n     * strike/underlying token contract to move caller funds.\\n     *\\n     * Options can only be minted while the series is NOT expired.\\n     *\\n     * It is also important to notice that options will be sent back\\n     * to `msg.sender` and not the `owner`. This behavior is designed to allow\\n     * proxy contracts to mint on others behalf. The `owner` will be able to remove\\n     * the deposited collateral after series expiration or by calling unmint(), even\\n     * if a third-party minted options on its behalf.\\n     *\\n     * @param amountOfOptions The amount option tokens to be issued\\n     * @param owner Which address will be the owner of the options\\n     */\\n    function mint(uint256 amountOfOptions, address owner) external;\\n\\n    /**\\n     * @notice Allow option token holders to use them to exercise the amount of units\\n     * of the locked tokens for the equivalent amount of the exercisable assets.\\n     *\\n     * @dev It presumes the caller has already called IERC20.approve() exercisable asset\\n     * to move caller funds.\\n     *\\n     * On American options, this function can only called anytime before expiration.\\n     * For European options, this function can only be called during the exerciseWindow.\\n     * Meaning, after expiration and before the end of exercise window.\\n     *\\n     * @param amountOfOptions The amount option tokens to be exercised\\n     */\\n    function exercise(uint256 amountOfOptions) external;\\n\\n    /**\\n     * @notice After series expiration in case of American or after exercise window for European,\\n     * allow minters who have locked their collateral to withdraw them proportionally\\n     * to their minted options.\\n     *\\n     * @dev If assets had been exercised during the option series the minter may withdraw\\n     * the exercised assets or a combination of exercised and collateral.\\n     */\\n    function withdraw() external;\\n\\n    /**\\n     * @notice Unlocks collateral by burning option tokens.\\n     *\\n     * Options can only be burned while the series is NOT expired.\\n     *\\n     * @param amountOfOptions The amount option tokens to be burned\\n     */\\n    function unmint(uint256 amountOfOptions) external;\\n\\n    function optionType() external view returns (OptionType);\\n\\n    function exerciseType() external view returns (ExerciseType);\\n\\n    function underlyingAsset() external view returns (address);\\n\\n    function underlyingAssetDecimals() external view returns (uint8);\\n\\n    function strikeAsset() external view returns (address);\\n\\n    function strikeAssetDecimals() external view returns (uint8);\\n\\n    function strikePrice() external view returns (uint256);\\n\\n    function strikePriceDecimals() external view returns (uint8);\\n\\n    function expiration() external view returns (uint256);\\n\\n    function startOfExerciseWindow() external view returns (uint256);\\n\\n    function hasExpired() external view returns (bool);\\n\\n    function isTradeWindow() external view returns (bool);\\n\\n    function isExerciseWindow() external view returns (bool);\\n\\n    function isWithdrawWindow() external view returns (bool);\\n\\n    function strikeToTransfer(uint256 amountOfOptions) external view returns (uint256);\\n\\n    function getSellerWithdrawAmounts(address owner)\\n        external\\n        view\\n        returns (uint256 strikeAmount, uint256 underlyingAmount);\\n\\n    function underlyingReserves() external view returns (uint256);\\n\\n    function strikeReserves() external view returns (uint256);\\n}\\n\"\r\n    },\r\n    \"contracts/interfaces/IIVGuesser.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: agpl-3.0\\n\\npragma solidity 0.6.12;\\n\\ninterface IIVGuesser {\\n    function blackScholes() external view returns (address);\\n\\n    function getPutIV(\\n        uint256 _targetPrice,\\n        uint256 _initialIVGuess,\\n        uint256 _spotPrice,\\n        uint256 _strikePrice,\\n        uint256 _timeToMaturity,\\n        int256 _riskFree\\n    ) external view returns (uint256, uint256);\\n\\n    function getCallIV(\\n        uint256 _targetPrice,\\n        uint256 _initialIVGuess,\\n        uint256 _spotPrice,\\n        uint256 _strikePrice,\\n        uint256 _timeToMaturity,\\n        int256 _riskFree\\n    ) external view returns (uint256, uint256);\\n\\n    function updateAcceptableRange() external;\\n}\\n\"\r\n    },\r\n    \"contracts/interfaces/IConfigurationManager.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: agpl-3.0\\n\\npragma solidity >=0.6.12;\\n\\ninterface IConfigurationManager {\\n    function setParameter(bytes32 name, uint256 value) external;\\n\\n    function setEmergencyStop(address emergencyStop) external;\\n\\n    function setPricingMethod(address pricingMethod) external;\\n\\n    function setIVGuesser(address ivGuesser) external;\\n\\n    function setIVProvider(address ivProvider) external;\\n\\n    function setPriceProvider(address priceProvider) external;\\n\\n    function setCapProvider(address capProvider) external;\\n\\n    function setAMMFactory(address ammFactory) external;\\n\\n    function setOptionFactory(address optionFactory) external;\\n\\n    function setOptionHelper(address optionHelper) external;\\n\\n    function setOptionPoolRegistry(address optionPoolRegistry) external;\\n\\n    function getParameter(bytes32 name) external view returns (uint256);\\n\\n    function owner() external view returns (address);\\n\\n    function getEmergencyStop() external view returns (address);\\n\\n    function getPricingMethod() external view returns (address);\\n\\n    function getIVGuesser() external view returns (address);\\n\\n    function getIVProvider() external view returns (address);\\n\\n    function getPriceProvider() external view returns (address);\\n\\n    function getCapProvider() external view returns (address);\\n\\n    function getAMMFactory() external view returns (address);\\n\\n    function getOptionFactory() external view returns (address);\\n\\n    function getOptionHelper() external view returns (address);\\n\\n    function getOptionPoolRegistry() external view returns (address);\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/token/ERC20/IERC20.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity >=0.6.0 <0.8.0;\\n\\n/**\\n * @dev Interface of the ERC20 standard as defined in the EIP.\\n */\\ninterface IERC20 {\\n    /**\\n     * @dev Returns the amount of tokens in existence.\\n     */\\n    function totalSupply() external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the amount of tokens owned by `account`.\\n     */\\n    function balanceOf(address account) external view returns (uint256);\\n\\n    /**\\n     * @dev Moves `amount` tokens from the caller's account to `recipient`.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transfer(address recipient, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Returns the remaining number of tokens that `spender` will be\\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\\n     * zero by default.\\n     *\\n     * This value changes when {approve} or {transferFrom} are called.\\n     */\\n    function allowance(address owner, address spender) external view returns (uint256);\\n\\n    /**\\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\\n     * that someone may use both the old and the new allowance by unfortunate\\n     * transaction ordering. One possible solution to mitigate this race\\n     * condition is to first reduce the spender's allowance to 0 and set the\\n     * desired value afterwards:\\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address spender, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Moves `amount` tokens from `sender` to `recipient` using the\\n     * allowance mechanism. `amount` is then deducted from the caller's\\n     * allowance.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(address sender, address recipient, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\\n     * another (`to`).\\n     *\\n     * Note that `value` may be zero.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 value);\\n\\n    /**\\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\\n     * a call to {approve}. `value` is the new allowance.\\n     */\\n    event Approval(address indexed owner, address indexed spender, uint256 value);\\n}\\n\"\r\n    }\r\n  },\r\n  \"settings\": {\r\n    \"optimizer\": {\r\n      \"enabled\": true,\r\n      \"runs\": 200\r\n    },\r\n    \"outputSelection\": {\r\n      \"*\": {\r\n        \"*\": [\r\n          \"evm.bytecode\",\r\n          \"evm.deployedBytecode\",\r\n          \"abi\"\r\n        ]\r\n      }\r\n    },\r\n    \"libraries\": {}\r\n  }\r\n}}","ABI":"[{\"inputs\":[{\"internalType\":\"contract IConfigurationManager\",\"name\":\"_configurationManager\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"blackScholes\",\"type\":\"address\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"inputs\":[],\"name\":\"MIN_ACCEPTABLE_RANGE\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"acceptableRange\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"blackScholes\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"configurationManager\",\"outputs\":[{\"internalType\":\"contract IConfigurationManager\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_targetPrice\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_initialIVGuess\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_spotPrice\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_strikePrice\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_timeToMaturity\",\"type\":\"uint256\"},{\"internalType\":\"int256\",\"name\":\"_riskFree\",\"type\":\"int256\"},{\"internalType\":\"enum IPodOption.OptionType\",\"name\":\"_optionType\",\"type\":\"uint8\"}],\"name\":\"getApproximatedIV\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"calculatedIV\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"calculatedPrice\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_targetPrice\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_initialIVGuess\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_spotPrice\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_strikePrice\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_timeToMaturity\",\"type\":\"uint256\"},{\"internalType\":\"int256\",\"name\":\"_riskFree\",\"type\":\"int256\"}],\"name\":\"getCallIV\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"calculatedIV\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"calculatedPrice\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"components\":[{\"internalType\":\"uint256\",\"name\":\"ivLower\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"priceLower\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"ivHigher\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"priceHigher\",\"type\":\"uint256\"}],\"internalType\":\"struct IVGuesser.Boundaries\",\"name\":\"boundaries\",\"type\":\"tuple\"},{\"internalType\":\"uint256\",\"name\":\"targetPrice\",\"type\":\"uint256\"}],\"name\":\"getCloserIV\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_targetPrice\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_initialIVGuess\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_spotPrice\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_strikePrice\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_timeToMaturity\",\"type\":\"uint256\"},{\"internalType\":\"int256\",\"name\":\"_riskFree\",\"type\":\"int256\"}],\"name\":\"getPutIV\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"calculatedIV\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"calculatedPrice\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"updateAcceptableRange\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}]","ContractName":"IVGuesser","CompilerVersion":"v0.6.12+commit.27d51765","OptimizationUsed":"1","Runs":"200","ConstructorArguments":"000000000000000000000000e4da64757b2b29db43429a52caf7ad884c76f8b0000000000000000000000000c574a70638ff5428122aa6e709ca2b30e212d9b4","EVMVersion":"Default","Library":"","LicenseType":"","Proxy":"0","Implementation":"","SwarmSource":""}]}