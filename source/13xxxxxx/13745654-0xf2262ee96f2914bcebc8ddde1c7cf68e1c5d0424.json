{"status":"1","message":"OK","result":[{"SourceCode":"{{\r\n  \"language\": \"Solidity\",\r\n  \"settings\": {\r\n    \"evmVersion\": \"london\",\r\n    \"libraries\": {},\r\n    \"metadata\": {\r\n      \"bytecodeHash\": \"ipfs\",\r\n      \"useLiteralContent\": true\r\n    },\r\n    \"optimizer\": {\r\n      \"enabled\": true,\r\n      \"runs\": 200\r\n    },\r\n    \"remappings\": [],\r\n    \"outputSelection\": {\r\n      \"*\": {\r\n        \"*\": [\r\n          \"evm.bytecode\",\r\n          \"evm.deployedBytecode\",\r\n          \"devdoc\",\r\n          \"userdoc\",\r\n          \"metadata\",\r\n          \"abi\"\r\n        ]\r\n      }\r\n    }\r\n  },\r\n  \"sources\": {\r\n    \"@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev This is a base contract to aid in writing upgradeable contracts, or any kind of contract that will be deployed\\n * behind a proxy. Since a proxied contract can't have a constructor, it's common to move constructor logic to an\\n * external initializer function, usually called `initialize`. It then becomes necessary to protect this initializer\\n * function so it can only be called once. The {initializer} modifier provided by this contract will have this effect.\\n *\\n * TIP: To avoid leaving the proxy in an uninitialized state, the initializer function should be called as early as\\n * possible by providing the encoded function call as the `_data` argument to {ERC1967Proxy-constructor}.\\n *\\n * CAUTION: When used with inheritance, manual care must be taken to not invoke a parent initializer twice, or to ensure\\n * that all initializers are idempotent. This is not verified automatically as constructors are by Solidity.\\n */\\nabstract contract Initializable {\\n    /**\\n     * @dev Indicates that the contract has been initialized.\\n     */\\n    bool private _initialized;\\n\\n    /**\\n     * @dev Indicates that the contract is in the process of being initialized.\\n     */\\n    bool private _initializing;\\n\\n    /**\\n     * @dev Modifier to protect an initializer function from being invoked twice.\\n     */\\n    modifier initializer() {\\n        require(_initializing || !_initialized, \\\"Initializable: contract is already initialized\\\");\\n\\n        bool isTopLevelCall = !_initializing;\\n        if (isTopLevelCall) {\\n            _initializing = true;\\n            _initialized = true;\\n        }\\n\\n        _;\\n\\n        if (isTopLevelCall) {\\n            _initializing = false;\\n        }\\n    }\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts-upgradeable/utils/cryptography/MerkleProofUpgradeable.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev These functions deal with verification of Merkle Trees proofs.\\n *\\n * The proofs can be generated using the JavaScript library\\n * https://github.com/miguelmota/merkletreejs[merkletreejs].\\n * Note: the hashing algorithm should be keccak256 and pair sorting should be enabled.\\n *\\n * See `test/utils/cryptography/MerkleProof.test.js` for some examples.\\n */\\nlibrary MerkleProofUpgradeable {\\n    /**\\n     * @dev Returns true if a `leaf` can be proved to be a part of a Merkle tree\\n     * defined by `root`. For this, a `proof` must be provided, containing\\n     * sibling hashes on the branch from the leaf to the root of the tree. Each\\n     * pair of leaves and each pair of pre-images are assumed to be sorted.\\n     */\\n    function verify(\\n        bytes32[] memory proof,\\n        bytes32 root,\\n        bytes32 leaf\\n    ) internal pure returns (bool) {\\n        bytes32 computedHash = leaf;\\n\\n        for (uint256 i = 0; i < proof.length; i++) {\\n            bytes32 proofElement = proof[i];\\n\\n            if (computedHash <= proofElement) {\\n                // Hash(current computed hash + current element of the proof)\\n                computedHash = keccak256(abi.encodePacked(computedHash, proofElement));\\n            } else {\\n                // Hash(current element of the proof + current computed hash)\\n                computedHash = keccak256(abi.encodePacked(proofElement, computedHash));\\n            }\\n        }\\n\\n        // Check if the computed hash (root) is equal to the provided root\\n        return computedHash == root;\\n    }\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/token/ERC20/IERC20.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC20 standard as defined in the EIP.\\n */\\ninterface IERC20 {\\n    /**\\n     * @dev Returns the amount of tokens in existence.\\n     */\\n    function totalSupply() external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the amount of tokens owned by `account`.\\n     */\\n    function balanceOf(address account) external view returns (uint256);\\n\\n    /**\\n     * @dev Moves `amount` tokens from the caller's account to `recipient`.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transfer(address recipient, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Returns the remaining number of tokens that `spender` will be\\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\\n     * zero by default.\\n     *\\n     * This value changes when {approve} or {transferFrom} are called.\\n     */\\n    function allowance(address owner, address spender) external view returns (uint256);\\n\\n    /**\\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\\n     * that someone may use both the old and the new allowance by unfortunate\\n     * transaction ordering. One possible solution to mitigate this race\\n     * condition is to first reduce the spender's allowance to 0 and set the\\n     * desired value afterwards:\\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address spender, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Moves `amount` tokens from `sender` to `recipient` using the\\n     * allowance mechanism. `amount` is then deducted from the caller's\\n     * allowance.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(\\n        address sender,\\n        address recipient,\\n        uint256 amount\\n    ) external returns (bool);\\n\\n    /**\\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\\n     * another (`to`).\\n     *\\n     * Note that `value` may be zero.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 value);\\n\\n    /**\\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\\n     * a call to {approve}. `value` is the new allowance.\\n     */\\n    event Approval(address indexed owner, address indexed spender, uint256 value);\\n}\\n\"\r\n    },\r\n    \"contracts/CollabSplitter.sol\": {\r\n      \"content\": \"//SPDX-License-Identifier: MIT\\npragma solidity ^0.8.9;\\n\\nimport '@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol';\\nimport '@openzeppelin/contracts-upgradeable/utils/cryptography/MerkleProofUpgradeable.sol';\\nimport '@openzeppelin/contracts/token/ERC20/IERC20.sol';\\n\\n/// @title CollabSplitterFactory\\n/// @author Simon Fremaux (@dievardump)\\ncontract CollabSplitter is Initializable {\\n    event ETHClaimed(address operator, address account, uint256 amount);\\n    event ERC20Claimed(\\n        address operator,\\n        address account,\\n        uint256 amount,\\n        address token\\n    );\\n\\n    struct ERC20Data {\\n        uint256 totalReceived;\\n        uint256 lastBalance;\\n    }\\n\\n    // string public name;\\n    bytes32 public merkleRoot;\\n\\n    // keeps track of how much was received in ETH since the start\\n    uint256 public totalReceived;\\n\\n    // keeps track of how much an account already claimed ETH\\n    mapping(address => uint256) public alreadyClaimed;\\n\\n    // keeps track of ERC20 data\\n    mapping(address => ERC20Data) public erc20Data;\\n    // keeps track of how much an account already claimed for a given ERC20\\n    mapping(address => mapping(address => uint256)) private erc20AlreadyClaimed;\\n\\n    function initialize(bytes32 merkleRoot_) external initializer {\\n        merkleRoot = merkleRoot_;\\n    }\\n\\n    receive() external payable {\\n        totalReceived += msg.value;\\n    }\\n\\n    /// @notice Does claimETH and claimERC20 in one call\\n    /// @param account the account we want to claim for\\n    /// @param percent the allocation for this account | 2 decimal basis, meaning 1 = 100, 2.5 = 250 etc...\\n    /// @param merkleProof the merkle proof used to ensure this claim is legit\\n    /// @param erc20s the ERC20 contracts addresses to claim from\\n    function claimBatch(\\n        address account,\\n        uint256 percent,\\n        bytes32[] memory merkleProof,\\n        address[] memory erc20s\\n    ) public {\\n        require(\\n            MerkleProofUpgradeable.verify(\\n                merkleProof,\\n                merkleRoot,\\n                getNode(account, percent)\\n            ),\\n            'Invalid proof.'\\n        );\\n\\n        _claimETH(account, percent);\\n\\n        for (uint256 i; i < erc20s.length; i++) {\\n            _claimERC20(account, percent, erc20s[i]);\\n        }\\n    }\\n\\n    /// @notice Allows to claim the ETH for an account\\n    /// @param account the account we want to claim for\\n    /// @param percent the allocation for this account | 2 decimal basis, meaning 1 = 100, 2.5 = 250 etc...\\n    /// @param merkleProof the merkle proof used to ensure this claim is legit\\n    function claimETH(\\n        address account,\\n        uint256 percent,\\n        bytes32[] memory merkleProof\\n    ) public {\\n        require(\\n            MerkleProofUpgradeable.verify(\\n                merkleProof,\\n                merkleRoot,\\n                getNode(account, percent)\\n            ),\\n            'Invalid proof.'\\n        );\\n\\n        _claimETH(account, percent);\\n    }\\n\\n    /// @notice Allows to claim an ERC20 for an account\\n    /// @dev To be able to do so, every time a claim is asked, we will compare both current and last known\\n    ///      balance for this contract, allowing to keep up to date on how much it has ever received\\n    ///      then we can calculate the full amount due to the account, and substract the amount already claimed\\n    /// @param account the account we want to claim for\\n    /// @param percent the allocation for this account | 2 decimal basis, meaning 1% = 100, 2.5% = 250 etc...\\n    /// @param merkleProof the merkle proof used to ensure this claim is legit\\n    /// @param erc20s the ERC20 contracts addresses to claim from\\n    function claimERC20(\\n        address account,\\n        uint256 percent,\\n        bytes32[] memory merkleProof,\\n        address[] memory erc20s\\n    ) public {\\n        require(\\n            MerkleProofUpgradeable.verify(\\n                merkleProof,\\n                merkleRoot,\\n                getNode(account, percent)\\n            ),\\n            'Invalid proof.'\\n        );\\n\\n        for (uint256 i; i < erc20s.length; i++) {\\n            _claimERC20(account, percent, erc20s[i]);\\n        }\\n    }\\n\\n    /// @notice Function to create the \\\"node\\\" in the merkle tree, given account and allocation\\n    /// @param account the account\\n    /// @param percent the allocation\\n    /// @return the bytes32 representing the node / leaf\\n    function getNode(address account, uint256 percent)\\n        public\\n        pure\\n        returns (bytes32)\\n    {\\n        return keccak256(abi.encode(account, percent));\\n    }\\n\\n    /// @notice Helper allowing to know how much ETH is still claimable for a list of accounts\\n    /// @param accounts the account to check for\\n    /// @param percents the allocation for this account\\n    function getBatchClaimableETH(\\n        address[] memory accounts,\\n        uint256[] memory percents\\n    ) public view returns (uint256[] memory) {\\n        uint256[] memory claimable = new uint256[](accounts.length);\\n        for (uint256 i; i < accounts.length; i++) {\\n            claimable[i] = _calculateDue(\\n                totalReceived,\\n                percents[i],\\n                alreadyClaimed[accounts[i]]\\n            );\\n        }\\n        return claimable;\\n    }\\n\\n    /// @notice Helper allowing to know how much of an ERC20 is still claimable for a list of accounts\\n    /// @param accounts the account to check for\\n    /// @param percents the allocation for this account\\n    /// @param token the token (ERC20 contract) to check on\\n    function getBatchClaimableERC20(\\n        address[] memory accounts,\\n        uint256[] memory percents,\\n        address token\\n    ) public view returns (uint256[] memory) {\\n        ERC20Data memory data = erc20Data[token];\\n        uint256 balance = IERC20(token).balanceOf(address(this));\\n        uint256 sinceLast = balance - data.lastBalance;\\n\\n        // the difference between last claim and today's balance is what has been received as royalties\\n        // so we can add it to the total received\\n        data.totalReceived += sinceLast;\\n\\n        uint256[] memory claimable = new uint256[](accounts.length);\\n        for (uint256 i; i < accounts.length; i++) {\\n            claimable[i] = _calculateDue(\\n                data.totalReceived,\\n                percents[i],\\n                erc20AlreadyClaimed[accounts[i]][token]\\n            );\\n        }\\n\\n        return claimable;\\n    }\\n\\n    /// @notice Helper to query how much an account already claimed for a list of tokens\\n    /// @param account the account to check for\\n    /// @param tokens the tokens addresses\\n    ///        use address(0) to query for nativ chain token\\n    function getBatchClaimed(address account, address[] memory tokens)\\n        public\\n        view\\n        returns (uint256[] memory)\\n    {\\n        uint256[] memory claimed = new uint256[](tokens.length);\\n        for (uint256 i; i < tokens.length; i++) {\\n            if (tokens[i] == address(0)) {\\n                claimed[i] = alreadyClaimed[account];\\n            } else {\\n                claimed[i] = erc20AlreadyClaimed[account][tokens[i]];\\n            }\\n        }\\n\\n        return claimed;\\n    }\\n\\n    /// @dev internal function to claim ETH\\n    /// @param account the account we want to claim for\\n    /// @param percent the allocation for this account | 2 decimal basis, meaning 1% = 100, 2.5% = 250 etc...\\n    function _claimETH(address account, uint256 percent) internal {\\n        if (totalReceived == 0) return;\\n\\n        uint256 dueNow = _calculateDue(\\n            totalReceived,\\n            percent,\\n            alreadyClaimed[account]\\n        );\\n\\n        if (dueNow == 0) return;\\n\\n        // update the already claimed first, blocking reEntrancy\\n        alreadyClaimed[account] += dueNow;\\n\\n        // send the due;\\n        // @TODO: .call{}() calls with all gas left in the tx\\n        // Question: Should we limit the gas used here?!\\n        // It has to be at least enough for contracts (Gnosis etc...) to proxy and store\\n        (bool success, ) = account.call{value: dueNow}('');\\n        require(success, 'Error when sending ETH');\\n\\n        emit ETHClaimed(msg.sender, account, dueNow);\\n    }\\n\\n    /// @dev internal function to claim an ERC20\\n    /// @param account the account we want to claim for\\n    /// @param percent the allocation for this account | 2 decimal basis, meaning 1% = 100, 2.5% = 250 etc...\\n    /// @param erc20 the ERC20 contract to claim from\\n    function _claimERC20(\\n        address account,\\n        uint256 percent,\\n        address erc20\\n    ) internal {\\n        ERC20Data storage data = erc20Data[erc20];\\n        uint256 balance = IERC20(erc20).balanceOf(address(this));\\n        uint256 sinceLast = balance - data.lastBalance;\\n\\n        // the difference between last known balance and today's balance is what has been received as royalties\\n        // so we can add it to the total received\\n        data.totalReceived += sinceLast;\\n\\n        // now we can calculate how much is due to current account the same way we do for ETH\\n        if (data.totalReceived == 0) return;\\n\\n        uint256 dueNow = _calculateDue(\\n            data.totalReceived,\\n            percent,\\n            erc20AlreadyClaimed[account][erc20]\\n        );\\n\\n        if (dueNow == 0) return;\\n\\n        // update the already claimed first\\n        erc20AlreadyClaimed[account][erc20] += dueNow;\\n\\n        // transfer the dueNow\\n        require(\\n            IERC20(erc20).transfer(account, dueNow),\\n            'Error when sending ERC20'\\n        );\\n\\n        // update the lastBalance, so we can recalculate next time\\n        // we could save this call by doing (balance - dueNow) but some ERC20 might have weird behavior\\n        // and actually make the balance different than this after the transfer\\n        // so for safety, reading the actual state again\\n        data.lastBalance = IERC20(erc20).balanceOf(address(this));\\n\\n        // emitting an event will allow to identify claimable ERC20 in TheGraph\\n        // to be able to display them in the UI and keep stats\\n        emit ERC20Claimed(msg.sender, account, dueNow, erc20);\\n    }\\n\\n    /// @dev Helpers that calculates how much is still left to claim\\n    /// @param total total received\\n    /// @param percent allocation\\n    /// @param claimed what was already claimed\\n    /// @return what is left to claim\\n    function _calculateDue(\\n        uint256 total,\\n        uint256 percent,\\n        uint256 claimed\\n    ) internal pure returns (uint256) {\\n        return (total * percent) / 10000 - claimed;\\n    }\\n}\\n\"\r\n    }\r\n  }\r\n}}","ABI":"[{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"operator\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"token\",\"type\":\"address\"}],\"name\":\"ERC20Claimed\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"operator\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"ETHClaimed\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"alreadyClaimed\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"percent\",\"type\":\"uint256\"},{\"internalType\":\"bytes32[]\",\"name\":\"merkleProof\",\"type\":\"bytes32[]\"},{\"internalType\":\"address[]\",\"name\":\"erc20s\",\"type\":\"address[]\"}],\"name\":\"claimBatch\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"percent\",\"type\":\"uint256\"},{\"internalType\":\"bytes32[]\",\"name\":\"merkleProof\",\"type\":\"bytes32[]\"},{\"internalType\":\"address[]\",\"name\":\"erc20s\",\"type\":\"address[]\"}],\"name\":\"claimERC20\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"percent\",\"type\":\"uint256\"},{\"internalType\":\"bytes32[]\",\"name\":\"merkleProof\",\"type\":\"bytes32[]\"}],\"name\":\"claimETH\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"erc20Data\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"totalReceived\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"lastBalance\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address[]\",\"name\":\"accounts\",\"type\":\"address[]\"},{\"internalType\":\"uint256[]\",\"name\":\"percents\",\"type\":\"uint256[]\"},{\"internalType\":\"address\",\"name\":\"token\",\"type\":\"address\"}],\"name\":\"getBatchClaimableERC20\",\"outputs\":[{\"internalType\":\"uint256[]\",\"name\":\"\",\"type\":\"uint256[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address[]\",\"name\":\"accounts\",\"type\":\"address[]\"},{\"internalType\":\"uint256[]\",\"name\":\"percents\",\"type\":\"uint256[]\"}],\"name\":\"getBatchClaimableETH\",\"outputs\":[{\"internalType\":\"uint256[]\",\"name\":\"\",\"type\":\"uint256[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"internalType\":\"address[]\",\"name\":\"tokens\",\"type\":\"address[]\"}],\"name\":\"getBatchClaimed\",\"outputs\":[{\"internalType\":\"uint256[]\",\"name\":\"\",\"type\":\"uint256[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"percent\",\"type\":\"uint256\"}],\"name\":\"getNode\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"merkleRoot_\",\"type\":\"bytes32\"}],\"name\":\"initialize\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"merkleRoot\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalReceived\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"stateMutability\":\"payable\",\"type\":\"receive\"}]","ContractName":"CollabSplitter","CompilerVersion":"v0.8.9+commit.e5eed63a","OptimizationUsed":"1","Runs":"200","ConstructorArguments":"","EVMVersion":"Default","Library":"","LicenseType":"MIT","Proxy":"0","Implementation":"","SwarmSource":""}]}