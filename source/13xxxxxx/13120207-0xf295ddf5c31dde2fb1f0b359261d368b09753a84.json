{"status":"1","message":"OK","result":[{"SourceCode":"{{\r\n  \"language\": \"Solidity\",\r\n  \"sources\": {\r\n    \"/contracts/TokenExchange.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: AGPL-3.0-or-later\\r\\npragma solidity ^0.8.4;\\r\\n\\r\\nimport \\\"./utils/IERC20.sol\\\";\\r\\n\\r\\ncontract TokenExchange {\\r\\n    address private _owner;\\r\\n    address private _newToken;\\r\\n    IERC20 private _oldToken;\\r\\n    address[] private _exchangeList;\\r\\n    constructor (address buffToken, address oldToken, address[] memory exchangeList) {\\r\\n        require(buffToken != address(0), \\\"Zero address\\\");\\r\\n        _owner = msg.sender;\\r\\n        _newToken = buffToken;\\r\\n        _oldToken = IERC20(oldToken);\\r\\n        _exchangeList = exchangeList;\\r\\n    }\\r\\n\\r\\n    modifier onlyOwner() {\\r\\n        require(_owner == msg.sender, \\\"Ownable: caller is not the owner\\\");\\r\\n        _;\\r\\n    }\\r\\n\\r\\n    function exchangeOldToken() external onlyOwner returns (bool) {\\r\\n        require(_exchangeList.length > 0, \\\"ERR: no exchange list\\\");\\r\\n        for(uint k = 0; k < _exchangeList.length; k++) {\\r\\n            uint balances = _oldToken.balanceOf(_exchangeList[k]);\\r\\n            if(balances > 0) {\\r\\n                bool transferCheck = IERC20(_newToken).transferFrom(_newToken, _exchangeList[k], balances);\\r\\n                require(transferCheck, \\\"Official BuffDoge transfer failed\\\");\\r\\n            }\\r\\n        }\\r\\n        return true;\\r\\n    }\\r\\n\\r\\n    function destroySmartContract(address payable _to) external onlyOwner {\\r\\n        selfdestruct(_to);\\r\\n    }\\r\\n}\"\r\n    },\r\n    \"/contracts/utils/IERC20.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\r\\n\\r\\npragma solidity ^0.8.4;\\r\\n\\r\\n/**\\r\\n * @dev Interface of the ERC20 standard as defined in the EIP.\\r\\n */\\r\\ninterface IERC20 {\\r\\n    /**\\r\\n     * @dev Returns the amount of tokens in existence.\\r\\n     */\\r\\n    function totalSupply() external view returns (uint256);\\r\\n\\r\\n    /**\\r\\n     * @dev Returns the amount of tokens owned by `account`.\\r\\n     */\\r\\n    function balanceOf(address account) external view returns (uint256);\\r\\n\\r\\n    /**\\r\\n     * @dev Moves `amount` tokens from the caller's account to `recipient`.\\r\\n     *\\r\\n     * Returns a boolean value indicating whether the operation succeeded.\\r\\n     *\\r\\n     * Emits a {Transfer} event.\\r\\n     */\\r\\n    function transfer(address recipient, uint256 amount) external returns (bool);\\r\\n\\r\\n    /**\\r\\n     * @dev Returns the remaining number of tokens that `spender` will be\\r\\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\\r\\n     * zero by default.\\r\\n     *\\r\\n     * This value changes when {approve} or {transferFrom} are called.\\r\\n     */\\r\\n    function allowance(address owner, address spender) external view returns (uint256);\\r\\n\\r\\n    /**\\r\\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\\r\\n     *\\r\\n     * Returns a boolean value indicating whether the operation succeeded.\\r\\n     *\\r\\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\\r\\n     * that someone may use both the old and the new allowance by unfortunate\\r\\n     * transaction ordering. One possible solution to mitigate this race\\r\\n     * condition is to first reduce the spender's allowance to 0 and set the\\r\\n     * desired value afterwards:\\r\\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\\r\\n     *\\r\\n     * Emits an {Approval} event.\\r\\n     */\\r\\n    function approve(address spender, uint256 amount) external returns (bool);\\r\\n\\r\\n    /**\\r\\n     * @dev Moves `amount` tokens from `sender` to `recipient` using the\\r\\n     * allowance mechanism. `amount` is then deducted from the caller's\\r\\n     * allowance.\\r\\n     *\\r\\n     * Returns a boolean value indicating whether the operation succeeded.\\r\\n     *\\r\\n     * Emits a {Transfer} event.\\r\\n     */\\r\\n    function transferFrom(address sender, address recipient, uint256 amount) external returns (bool);\\r\\n\\r\\n    /**\\r\\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\\r\\n     * another (`to`).\\r\\n     *\\r\\n     * Note that `value` may be zero.\\r\\n     */\\r\\n    event Transfer(address indexed from, address indexed to, uint256 value);\\r\\n\\r\\n    /**\\r\\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\\r\\n     * a call to {approve}. `value` is the new allowance.\\r\\n     */\\r\\n    event Approval(address indexed owner, address indexed spender, uint256 value);\\r\\n}\\r\\n\"\r\n    }\r\n  },\r\n  \"settings\": {\r\n    \"remappings\": [],\r\n    \"optimizer\": {\r\n      \"enabled\": true,\r\n      \"runs\": 200\r\n    },\r\n    \"evmVersion\": \"byzantium\",\r\n    \"libraries\": {},\r\n    \"outputSelection\": {\r\n      \"*\": {\r\n        \"*\": [\r\n          \"evm.bytecode\",\r\n          \"evm.deployedBytecode\",\r\n          \"abi\"\r\n        ]\r\n      }\r\n    }\r\n  }\r\n}}","ABI":"[{\"inputs\":[{\"internalType\":\"address\",\"name\":\"buffToken\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"oldToken\",\"type\":\"address\"},{\"internalType\":\"address[]\",\"name\":\"exchangeList\",\"type\":\"address[]\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"inputs\":[{\"internalType\":\"address payable\",\"name\":\"_to\",\"type\":\"address\"}],\"name\":\"destroySmartContract\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"exchangeOldToken\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}]","ContractName":"TokenExchange","CompilerVersion":"v0.8.4+commit.c7e474f2","OptimizationUsed":"1","Runs":"200","ConstructorArguments":"000000000000000000000000e610185758b5863e79dd9023ac28a31fb02f12e900000000000000000000000091e4d6e309e3e8a0cdf44acfc9e1afd18aefba980000000000000000000000000000000000000000000000000000000000000060000000000000000000000000000000000000000000000000000000000000000d000000000000000000000000f492da4b415cc760cf72a06e3c5fc0a2d038c1ba000000000000000000000000c187d3ff10c4a6b5e4a70be2201527eaf6dcee7a000000000000000000000000788744c2293930bb69415d9027071f868922e152000000000000000000000000d2828245b23a22e156f159721a8c53404eb7d870000000000000000000000000413b32bd3b9ae57e75b18c010f6f30f524a642f0000000000000000000000000ba355abbd461b1ae1c0aad8d9bc00481d3403dad0000000000000000000000004d1adf22e6862b48a0bd18a943fda3c121d6866e0000000000000000000000002272e0ac624bd42f66450f5ac5017901a4c02f9c0000000000000000000000004dad7d926dd541ed8abcd6e9f3e17fe7510e5c9400000000000000000000000065b59c63f996ac360daaf356ec4e05b348a1f5e6000000000000000000000000c3f8e951dcb4c0499b459fd23b123bc00ab8142700000000000000000000000008874f2b779da0221eea7a6579f3a872bf42a2890000000000000000000000006b935de9605eba047d1895c26df1ef008649a05f","EVMVersion":"byzantium","Library":"","LicenseType":"","Proxy":"0","Implementation":"","SwarmSource":""}]}