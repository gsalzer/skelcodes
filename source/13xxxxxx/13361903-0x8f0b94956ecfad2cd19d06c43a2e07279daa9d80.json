{"status":"1","message":"OK","result":[{"SourceCode":"{\"Address.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.6.2;\\n\\n// Source: https://github.com/OpenZeppelin/openzeppelin-contracts\\n\\n/**\\n * @dev Collection of functions related to the address type\\n */\\nlibrary Address {\\n    /**\\n     * @dev Returns true if `account` is a contract.\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * It is unsafe to assume that an address for which this function returns\\n     * false is an externally-owned account (EOA) and not a contract.\\n     *\\n     * Among others, `isContract` will return false for the following\\n     * types of addresses:\\n     *\\n     *  - an externally-owned account\\n     *  - a contract in construction\\n     *  - an address where a contract will be created\\n     *  - an address where a contract lived, but was destroyed\\n     * ====\\n     */\\n    function isContract(address account) internal view returns (bool) {\\n        // This method relies in extcodesize, which returns 0 for contracts in\\n        // construction, since the code is only stored at the end of the\\n        // constructor execution.\\n\\n        uint256 size;\\n        // solhint-disable-next-line no-inline-assembly\\n        assembly { size := extcodesize(account) }\\n        return size \\u003e 0;\\n    }\\n\\n    /**\\n     * @dev Replacement for Solidity\\u0027s `transfer`: sends `amount` wei to\\n     * `recipient`, forwarding all available gas and reverting on errors.\\n     *\\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\\n     * imposed by `transfer`, making them unable to receive funds via\\n     * `transfer`. {sendValue} removes this limitation.\\n     *\\n     * https://diligence.consensys.net/posts/2019/09/stop-using-soliditys-transfer-now/[Learn more].\\n     *\\n     * IMPORTANT: because control is transferred to `recipient`, care must be\\n     * taken to not create reentrancy vulnerabilities. Consider using\\n     * {ReentrancyGuard} or the\\n     * https://solidity.readthedocs.io/en/v0.5.11/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\\n     */\\n    function sendValue(address payable recipient, uint256 amount) internal {\\n        require(address(this).balance \\u003e= amount, \\\"Address: insufficient balance\\\");\\n\\n        // solhint-disable-next-line avoid-low-level-calls, avoid-call-value\\n        (bool success, ) = recipient.call{ value: amount }(\\\"\\\");\\n        require(success, \\\"Address: unable to send value, recipient may have reverted\\\");\\n    }\\n\\n    /**\\n     * @dev Performs a Solidity function call using a low level `call`. A\\n     * plain`call` is an unsafe replacement for a function call: use this\\n     * function instead.\\n     *\\n     * If `target` reverts with a revert reason, it is bubbled up by this\\n     * function (like regular Solidity function calls).\\n     *\\n     * Returns the raw returned data. To convert to the expected return value,\\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\\n     *\\n     * Requirements:\\n     *\\n     * - `target` must be a contract.\\n     * - calling `target` with `data` must not revert.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\\n      return functionCall(target, data, \\\"Address: low-level call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\\n     * `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(address target, bytes memory data, string memory errorMessage) internal returns (bytes memory) {\\n        return _functionCallWithValue(target, data, 0, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but also transferring `value` wei to `target`.\\n     *\\n     * Requirements:\\n     *\\n     * - the calling contract must have an ETH balance of at least `value`.\\n     * - the called Solidity function must be `payable`.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(address target, bytes memory data, uint256 value) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, value, \\\"Address: low-level call with value failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\\n     * with `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(address target, bytes memory data, uint256 value, string memory errorMessage) internal returns (bytes memory) {\\n        require(address(this).balance \\u003e= value, \\\"Address: insufficient balance for call\\\");\\n        return _functionCallWithValue(target, data, value, errorMessage);\\n    }\\n\\n    function _functionCallWithValue(address target, bytes memory data, uint256 weiValue, string memory errorMessage) private returns (bytes memory) {\\n        require(isContract(target), \\\"Address: call to non-contract\\\");\\n\\n        // solhint-disable-next-line avoid-low-level-calls\\n        (bool success, bytes memory returndata) = target.call{ value: weiValue }(data);\\n        if (success) {\\n            return returndata;\\n        } else {\\n            // Look for revert reason and bubble it up if present\\n            if (returndata.length \\u003e 0) {\\n                // The easiest way to bubble the revert reason is using memory via assembly\\n\\n                // solhint-disable-next-line no-inline-assembly\\n                assembly {\\n                    let returndata_size := mload(returndata)\\n                    revert(add(32, returndata), returndata_size)\\n                }\\n            } else {\\n                revert(errorMessage);\\n            }\\n        }\\n    }\\n}\\n\"},\"Context.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.6.0;\\n\\n// Source: https://github.com/OpenZeppelin/openzeppelin-contracts\\n\\n/*\\n * @dev Provides information about the current execution context, including the\\n * sender of the transaction and its data. While these are generally available\\n * via msg.sender and msg.data, they should not be accessed in such a direct\\n * manner, since when dealing with GSN meta-transactions the account sending and\\n * paying for execution may not be the actual sender (as far as an application\\n * is concerned).\\n *\\n * This contract is only required for intermediate, library-like contracts.\\n */\\nabstract contract Context {\\n    function _msgSender() internal view virtual returns (address payable) {\\n        return msg.sender;\\n    }\\n\\n    function _msgData() internal view virtual returns (bytes memory) {\\n        this; // silence state mutability warning without generating bytecode - see https://github.com/ethereum/solidity/issues/2691\\n        return msg.data;\\n    }\\n}\\n\"},\"Describable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.6.0;\\n\\ncontract Describable {\\n    string private _description;\\n\\n    function _setupDescription(string memory description) internal {\\n        _description = description;\\n    }\\n\\n    function description() public view returns (string memory) {\\n        return _description;\\n    }\\n}\\n\"},\"ERC20.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.6.0;\\n\\n// Source: https://github.com/OpenZeppelin/openzeppelin-contracts\\n\\nimport \\\"./Context.sol\\\";\\nimport \\\"./IERC20.sol\\\";\\nimport \\\"./SafeMath.sol\\\";\\nimport \\\"./Address.sol\\\";\\n\\n/**\\n * @dev Implementation of the {IERC20} interface.\\n *\\n * This implementation is agnostic to the way tokens are created. This means\\n * that a supply mechanism has to be added in a derived contract using {_mint}.\\n * For a generic mechanism see {ERC20PresetMinterPauser}.\\n *\\n * TIP: For a detailed writeup see our guide\\n * https://forum.zeppelin.solutions/t/how-to-implement-erc20-supply-mechanisms/226[How\\n * to implement supply mechanisms].\\n *\\n * We have followed general OpenZeppelin guidelines: functions revert instead\\n * of returning `false` on failure. This behavior is nonetheless conventional\\n * and does not conflict with the expectations of ERC20 applications.\\n *\\n * Additionally, an {Approval} event is emitted on calls to {transferFrom}.\\n * This allows applications to reconstruct the allowance for all accounts just\\n * by listening to said events. Other implementations of the EIP may not emit\\n * these events, as it isn\\u0027t required by the specification.\\n *\\n * Finally, the non-standard {decreaseAllowance} and {increaseAllowance}\\n * functions have been added to mitigate the well-known issues around setting\\n * allowances. See {IERC20-approve}.\\n */\\ncontract ERC20 is Context, IERC20 {\\n    using SafeMath for uint256;\\n    using Address for address;\\n\\n    mapping (address =\\u003e uint256) private _balances;\\n\\n    mapping (address =\\u003e mapping (address =\\u003e uint256)) private _allowances;\\n\\n    uint256 private _totalSupply;\\n\\n    string private _name;\\n    string private _symbol;\\n    uint8 private _decimals;\\n\\n    /**\\n     * @dev Sets the values for {name} and {symbol}, initializes {decimals} with\\n     * a default value of 18.\\n     *\\n     * To select a different value for {decimals}, use {_setupDecimals}.\\n     *\\n     * All three of these values are immutable: they can only be set once during\\n     * construction.\\n     */\\n    constructor (string memory name, string memory symbol) public {\\n        _name = name;\\n        _symbol = symbol;\\n        _decimals = 18;\\n    }\\n\\n    /**\\n     * @dev Returns the name of the token.\\n     */\\n    function name() public view returns (string memory) {\\n        return _name;\\n    }\\n\\n    /**\\n     * @dev Returns the symbol of the token, usually a shorter version of the\\n     * name.\\n     */\\n    function symbol() public view returns (string memory) {\\n        return _symbol;\\n    }\\n\\n    /**\\n     * @dev Returns the number of decimals used to get its user representation.\\n     * For example, if `decimals` equals `2`, a balance of `505` tokens should\\n     * be displayed to a user as `5,05` (`505 / 10 ** 2`).\\n     *\\n     * Tokens usually opt for a value of 18, imitating the relationship between\\n     * Ether and Wei. This is the value {ERC20} uses, unless {_setupDecimals} is\\n     * called.\\n     *\\n     * NOTE: This information is only used for _display_ purposes: it in\\n     * no way affects any of the arithmetic of the contract, including\\n     * {IERC20-balanceOf} and {IERC20-transfer}.\\n     */\\n    function decimals() public view returns (uint8) {\\n        return _decimals;\\n    }\\n\\n    /**\\n     * @dev See {IERC20-totalSupply}.\\n     */\\n    function totalSupply() public view override returns (uint256) {\\n        return _totalSupply;\\n    }\\n\\n    /**\\n     * @dev See {IERC20-balanceOf}.\\n     */\\n    function balanceOf(address account) public view override returns (uint256) {\\n        return _balances[account];\\n    }\\n\\n    /**\\n     * @dev See {IERC20-transfer}.\\n     *\\n     * Requirements:\\n     *\\n     * - `recipient` cannot be the zero address.\\n     * - the caller must have a balance of at least `amount`.\\n     */\\n    function transfer(address recipient, uint256 amount) public virtual override returns (bool) {\\n        _transfer(_msgSender(), recipient, amount);\\n        return true;\\n    }\\n\\n    /**\\n     * @dev See {IERC20-allowance}.\\n     */\\n    function allowance(address owner, address spender) public view virtual override returns (uint256) {\\n        return _allowances[owner][spender];\\n    }\\n\\n    /**\\n     * @dev See {IERC20-approve}.\\n     *\\n     * Requirements:\\n     *\\n     * - `spender` cannot be the zero address.\\n     */\\n    function approve(address spender, uint256 amount) public virtual override returns (bool) {\\n        _approve(_msgSender(), spender, amount);\\n        return true;\\n    }\\n\\n    /**\\n     * @dev See {IERC20-transferFrom}.\\n     *\\n     * Emits an {Approval} event indicating the updated allowance. This is not\\n     * required by the EIP. See the note at the beginning of {ERC20};\\n     *\\n     * Requirements:\\n     * - `sender` and `recipient` cannot be the zero address.\\n     * - `sender` must have a balance of at least `amount`.\\n     * - the caller must have allowance for ``sender``\\u0027s tokens of at least\\n     * `amount`.\\n     */\\n    function transferFrom(address sender, address recipient, uint256 amount) public virtual override returns (bool) {\\n        _transfer(sender, recipient, amount);\\n        _approve(sender, _msgSender(), _allowances[sender][_msgSender()].sub(amount, \\\"ERC20: transfer amount exceeds allowance\\\"));\\n        return true;\\n    }\\n\\n    /**\\n     * @dev Atomically increases the allowance granted to `spender` by the caller.\\n     *\\n     * This is an alternative to {approve} that can be used as a mitigation for\\n     * problems described in {IERC20-approve}.\\n     *\\n     * Emits an {Approval} event indicating the updated allowance.\\n     *\\n     * Requirements:\\n     *\\n     * - `spender` cannot be the zero address.\\n     */\\n    function increaseAllowance(address spender, uint256 addedValue) public virtual returns (bool) {\\n        _approve(_msgSender(), spender, _allowances[_msgSender()][spender].add(addedValue));\\n        return true;\\n    }\\n\\n    /**\\n     * @dev Atomically decreases the allowance granted to `spender` by the caller.\\n     *\\n     * This is an alternative to {approve} that can be used as a mitigation for\\n     * problems described in {IERC20-approve}.\\n     *\\n     * Emits an {Approval} event indicating the updated allowance.\\n     *\\n     * Requirements:\\n     *\\n     * - `spender` cannot be the zero address.\\n     * - `spender` must have allowance for the caller of at least\\n     * `subtractedValue`.\\n     */\\n    function decreaseAllowance(address spender, uint256 subtractedValue) public virtual returns (bool) {\\n        _approve(_msgSender(), spender, _allowances[_msgSender()][spender].sub(subtractedValue, \\\"ERC20: decreased allowance below zero\\\"));\\n        return true;\\n    }\\n\\n    /**\\n     * @dev Moves tokens `amount` from `sender` to `recipient`.\\n     *\\n     * This is internal function is equivalent to {transfer}, and can be used to\\n     * e.g. implement automatic token fees, slashing mechanisms, etc.\\n     *\\n     * Emits a {Transfer} event.\\n     *\\n     * Requirements:\\n     *\\n     * - `sender` cannot be the zero address.\\n     * - `recipient` cannot be the zero address.\\n     * - `sender` must have a balance of at least `amount`.\\n     */\\n    function _transfer(address sender, address recipient, uint256 amount) internal virtual {\\n        require(sender != address(0), \\\"ERC20: transfer from the zero address\\\");\\n\\n        _beforeTokenTransfer(sender, recipient, amount);\\n\\n        _balances[sender] = _balances[sender].sub(amount, \\\"ERC20: transfer amount exceeds balance\\\");\\n        _balances[recipient] = _balances[recipient].add(amount);\\n        emit Transfer(sender, recipient, amount);\\n    }\\n\\n    /** @dev Creates `amount` tokens and assigns them to `account`, increasing\\n     * the total supply.\\n     *\\n     * Emits a {Transfer} event with `from` set to the zero address.\\n     *\\n     * Requirements\\n     *\\n     * - `to` cannot be the zero address.\\n     */\\n    function _mint(address account, uint256 amount) internal virtual {\\n        require(account != address(0), \\\"ERC20: mint to the zero address\\\");\\n\\n        _beforeTokenTransfer(address(0), account, amount);\\n\\n        _totalSupply = _totalSupply.add(amount);\\n        _balances[account] = _balances[account].add(amount);\\n        emit Transfer(address(0), account, amount);\\n    }\\n\\n    /**\\n     * @dev Destroys `amount` tokens from `account`, reducing the\\n     * total supply.\\n     *\\n     * Emits a {Transfer} event with `to` set to the zero address.\\n     *\\n     * Requirements\\n     *\\n     * - `account` cannot be the zero address.\\n     * - `account` must have at least `amount` tokens.\\n     */\\n    function _burn(address account, uint256 amount) internal virtual {\\n        require(account != address(0), \\\"ERC20: burn from the zero address\\\");\\n\\n        _beforeTokenTransfer(account, address(0), amount);\\n\\n        _balances[account] = _balances[account].sub(amount, \\\"ERC20: burn amount exceeds balance\\\");\\n        _totalSupply = _totalSupply.sub(amount);\\n        emit Transfer(account, address(0), amount);\\n    }\\n\\n    /**\\n     * @dev Sets `amount` as the allowance of `spender` over the `owner`s tokens.\\n     *\\n     * This is internal function is equivalent to `approve`, and can be used to\\n     * e.g. set automatic allowances for certain subsystems, etc.\\n     *\\n     * Emits an {Approval} event.\\n     *\\n     * Requirements:\\n     *\\n     * - `owner` cannot be the zero address.\\n     * - `spender` cannot be the zero address.\\n     */\\n    function _approve(address owner, address spender, uint256 amount) internal virtual {\\n        require(owner != address(0), \\\"ERC20: approve from the zero address\\\");\\n        require(spender != address(0), \\\"ERC20: approve to the zero address\\\");\\n\\n        _allowances[owner][spender] = amount;\\n        emit Approval(owner, spender, amount);\\n    }\\n\\n    /**\\n     * @dev Sets {decimals} to a value other than the default one of 18.\\n     *\\n     * WARNING: This function should only be called from the constructor. Most\\n     * applications that interact with token contracts will not expect\\n     * {decimals} to ever change, and may work incorrectly if it does.\\n     */\\n    function _setupDecimals(uint8 decimals_) internal {\\n        _decimals = decimals_;\\n    }\\n\\n    /**\\n     * @dev Hook that is called before any transfer of tokens. This includes\\n     * minting and burning.\\n     *\\n     * Calling conditions:\\n     *\\n     * - when `from` and `to` are both non-zero, `amount` of ``from``\\u0027s tokens\\n     * will be to transferred to `to`.\\n     * - when `from` is zero, `amount` tokens will be minted for `to`.\\n     * - when `to` is zero, `amount` of ``from``\\u0027s tokens will be burned.\\n     * - `from` and `to` are never both zero.\\n     *\\n     * To learn more about hooks, head to xref:ROOT:extending-contracts.adoc#using-hooks[Using Hooks].\\n     */\\n    function _beforeTokenTransfer(address from, address to, uint256 amount) internal virtual { }\\n}\\n\"},\"ERC721.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.6.0;\\n\\n// Souce: https://github.com/0xcert/ethereum-erc721/\\n\\nimport \\\"./IERC721.sol\\\";\\nimport \\\"./SafeMath.sol\\\";\\nimport \\\"./IERC721TokenReceiver.sol\\\";\\nimport \\\"./SupportsInterface.sol\\\";\\nimport \\\"./Address.sol\\\";\\n\\n/**\\n * @dev Implementation of ERC-721 non-fungible token standard.\\n */\\ncontract ERC721 is\\n  IERC721,\\n  SupportsInterface\\n{\\n  using SafeMath for uint256;\\n  using Address for address;\\n\\n  /**\\n   * @dev List of revert message codes. Implementing dApp should handle showing the correct message.\\n   * Based on 0xcert framework error codes.\\n   */\\n  string constant ZERO_ADDRESS = \\\"003001\\\";\\n  string constant NOT_VALID_NFT = \\\"003002\\\";\\n  string constant NOT_OWNER_OR_OPERATOR = \\\"003003\\\";\\n  string constant NOT_OWNER_APPROWED_OR_OPERATOR = \\\"003004\\\";\\n  string constant NOT_ABLE_TO_RECEIVE_NFT = \\\"003005\\\";\\n  string constant NFT_ALREADY_EXISTS = \\\"003006\\\";\\n  string constant NOT_OWNER = \\\"003007\\\";\\n  string constant IS_OWNER = \\\"003008\\\";\\n\\n  /**\\n   * @dev Magic value of a smart contract that can recieve NFT.\\n   * Equal to: bytes4(keccak256(\\\"onERC721Received(address,address,uint256,bytes)\\\")).\\n   */\\n  bytes4 internal constant MAGIC_ON_ERC721_RECEIVED = 0x150b7a02;\\n\\n  /**\\n   * @dev A mapping from NFT ID to the address that owns it.\\n   */\\n  mapping (uint256 =\\u003e address) internal idToOwner;\\n\\n  /**\\n   * @dev Mapping from NFT ID to approved address.\\n   */\\n  mapping (uint256 =\\u003e address) internal idToApproval;\\n\\n   /**\\n   * @dev Mapping from owner address to count of his tokens.\\n   */\\n  mapping (address =\\u003e uint256) private ownerToNFTokenCount;\\n\\n  /**\\n   * @dev Mapping from owner address to mapping of operator addresses.\\n   */\\n  mapping (address =\\u003e mapping (address =\\u003e bool)) internal ownerToOperators;\\n\\n  /**\\n   * @dev Emits when ownership of any NFT changes by any mechanism. This event emits when NFTs are\\n   * created (`from` == 0) and destroyed (`to` == 0). Exception: during contract creation, any\\n   * number of NFTs may be created and assigned without emitting Transfer. At the time of any\\n   * transfer, the approved address for that NFT (if any) is reset to none.\\n   * @param _from Sender of NFT (if address is zero address it indicates token creation).\\n   * @param _to Receiver of NFT (if address is zero address it indicates token destruction).\\n   * @param _tokenId The NFT that got transfered.\\n   */\\n  event Transfer(\\n    address indexed _from,\\n    address indexed _to,\\n    uint256 indexed _tokenId\\n  );\\n\\n  /**\\n   * @dev This emits when the approved address for an NFT is changed or reaffirmed. The zero\\n   * address indicates there is no approved address. When a Transfer event emits, this also\\n   * indicates that the approved address for that NFT (if any) is reset to none.\\n   * @param _owner Owner of NFT.\\n   * @param _approved Address that we are approving.\\n   * @param _tokenId NFT which we are approving.\\n   */\\n  event Approval(\\n    address indexed _owner,\\n    address indexed _approved,\\n    uint256 indexed _tokenId\\n  );\\n\\n  /**\\n   * @dev This emits when an operator is enabled or disabled for an owner. The operator can manage\\n   * all NFTs of the owner.\\n   * @param _owner Owner of NFT.\\n   * @param _operator Address to which we are setting operator rights.\\n   * @param _approved Status of operator rights(true if operator rights are given and false if\\n   * revoked).\\n   */\\n  event ApprovalForAll(\\n    address indexed _owner,\\n    address indexed _operator,\\n    bool _approved\\n  );\\n\\n  /**\\n   * @dev Guarantees that the msg.sender is an owner or operator of the given NFT.\\n   * @param _tokenId ID of the NFT to validate.\\n   */\\n  modifier canOperate(\\n    uint256 _tokenId\\n  )\\n  {\\n    address tokenOwner = idToOwner[_tokenId];\\n    require(tokenOwner == msg.sender || ownerToOperators[tokenOwner][msg.sender], NOT_OWNER_OR_OPERATOR);\\n    _;\\n  }\\n\\n  /**\\n   * @dev Guarantees that the msg.sender is allowed to transfer NFT.\\n   * @param _tokenId ID of the NFT to transfer.\\n   */\\n  modifier canTransfer(\\n    uint256 _tokenId\\n  )\\n  {\\n    address tokenOwner = idToOwner[_tokenId];\\n    require(\\n      tokenOwner == msg.sender\\n      || idToApproval[_tokenId] == msg.sender\\n      || ownerToOperators[tokenOwner][msg.sender],\\n      NOT_OWNER_APPROWED_OR_OPERATOR\\n    );\\n    _;\\n  }\\n\\n  /**\\n   * @dev Guarantees that _tokenId is a valid Token.\\n   * @param _tokenId ID of the NFT to validate.\\n   */\\n  modifier validNFToken(\\n    uint256 _tokenId\\n  )\\n  {\\n    require(idToOwner[_tokenId] != address(0), NOT_VALID_NFT);\\n    _;\\n  }\\n\\n  /**\\n   * @dev Contract constructor.\\n   */\\n  constructor()\\n    public\\n  {\\n    supportedInterfaces[0x80ac58cd] = true; // ERC721\\n  }\\n\\n  /**\\n   * @dev Transfers the ownership of an NFT from one address to another address. This function can\\n   * be changed to payable.\\n   * @notice Throws unless `msg.sender` is the current owner, an authorized operator, or the\\n   * approved address for this NFT. Throws if `_from` is not the current owner. Throws if `_to` is\\n   * the zero address. Throws if `_tokenId` is not a valid NFT. When transfer is complete, this\\n   * function checks if `_to` is a smart contract (code size \\u003e 0). If so, it calls\\n   * `onERC721Received` on `_to` and throws if the return value is not\\n   * `bytes4(keccak256(\\\"onERC721Received(address,uint256,bytes)\\\"))`.\\n   * @param _from The current owner of the NFT.\\n   * @param _to The new owner.\\n   * @param _tokenId The NFT to transfer.\\n   * @param _data Additional data with no specified format, sent in call to `_to`.\\n   */\\n  function safeTransferFrom(\\n    address _from,\\n    address _to,\\n    uint256 _tokenId,\\n    bytes calldata _data\\n  )\\n    external\\n    override\\n  {\\n    _safeTransferFrom(_from, _to, _tokenId, _data);\\n  }\\n\\n  /**\\n   * @dev Transfers the ownership of an NFT from one address to another address. This function can\\n   * be changed to payable.\\n   * @notice This works identically to the other function with an extra data parameter, except this\\n   * function just sets data to \\\"\\\"\\n   * @param _from The current owner of the NFT.\\n   * @param _to The new owner.\\n   * @param _tokenId The NFT to transfer.\\n   */\\n  function safeTransferFrom(\\n    address _from,\\n    address _to,\\n    uint256 _tokenId\\n  )\\n    external\\n    override\\n  {\\n    _safeTransferFrom(_from, _to, _tokenId, \\\"\\\");\\n  }\\n\\n  /**\\n   * @dev Throws unless `msg.sender` is the current owner, an authorized operator, or the approved\\n   * address for this NFT. Throws if `_from` is not the current owner. Throws if `_to` is the zero\\n   * address. Throws if `_tokenId` is not a valid NFT. This function can be changed to payable.\\n   * @notice The caller is responsible to confirm that `_to` is capable of receiving NFTs or else\\n   * they maybe be permanently lost.\\n   * @param _from The current owner of the NFT.\\n   * @param _to The new owner.\\n   * @param _tokenId The NFT to transfer.\\n   */\\n  function transferFrom(\\n    address _from,\\n    address _to,\\n    uint256 _tokenId\\n  )\\n    external\\n    override\\n    canTransfer(_tokenId)\\n    validNFToken(_tokenId)\\n  {\\n    address tokenOwner = idToOwner[_tokenId];\\n    require(tokenOwner == _from, NOT_OWNER);\\n\\n    _transfer(_to, _tokenId);\\n  }\\n\\n  /**\\n   * @dev Set or reaffirm the approved address for an NFT. This function can be changed to payable.\\n   * @notice The zero address indicates there is no approved address. Throws unless `msg.sender` is\\n   * the current NFT owner, or an authorized operator of the current owner.\\n   * @param _approved Address to be approved for the given NFT ID.\\n   * @param _tokenId ID of the token to be approved.\\n   */\\n  function approve(\\n    address _approved,\\n    uint256 _tokenId\\n  )\\n    external\\n    override\\n    canOperate(_tokenId)\\n    validNFToken(_tokenId)\\n  {\\n    address tokenOwner = idToOwner[_tokenId];\\n    require(_approved != tokenOwner, IS_OWNER);\\n\\n    idToApproval[_tokenId] = _approved;\\n    emit Approval(tokenOwner, _approved, _tokenId);\\n  }\\n\\n  /**\\n   * @dev Enables or disables approval for a third party (\\\"operator\\\") to manage all of\\n   * `msg.sender`\\u0027s assets. It also emits the ApprovalForAll event.\\n   * @notice This works even if sender doesn\\u0027t own any tokens at the time.\\n   * @param _operator Address to add to the set of authorized operators.\\n   * @param _approved True if the operators is approved, false to revoke approval.\\n   */\\n  function setApprovalForAll(\\n    address _operator,\\n    bool _approved\\n  )\\n    external\\n    override\\n  {\\n    ownerToOperators[msg.sender][_operator] = _approved;\\n    emit ApprovalForAll(msg.sender, _operator, _approved);\\n  }\\n\\n  /**\\n   * @dev Returns the number of NFTs owned by `_owner`. NFTs assigned to the zero address are\\n   * considered invalid, and this function throws for queries about the zero address.\\n   * @param _owner Address for whom to query the balance.\\n   * @return Balance of _owner.\\n   */\\n  function balanceOf(\\n    address _owner\\n  )\\n    external\\n    override\\n    view\\n    returns (uint256)\\n  {\\n    require(_owner != address(0), ZERO_ADDRESS);\\n    return _getOwnerNFTCount(_owner);\\n  }\\n\\n  /**\\n   * @dev Returns the address of the owner of the NFT. NFTs assigned to zero address are considered\\n   * invalid, and queries about them do throw.\\n   * @param _tokenId The identifier for an NFT.\\n   * @return _owner Address of _tokenId owner.\\n   */\\n  function ownerOf(\\n    uint256 _tokenId\\n  )\\n    external\\n    override\\n    view\\n    returns (address _owner)\\n  {\\n    _owner = idToOwner[_tokenId];\\n    require(_owner != address(0), NOT_VALID_NFT);\\n  }\\n\\n  /**\\n   * @dev Get the approved address for a single NFT.\\n   * @notice Throws if `_tokenId` is not a valid NFT.\\n   * @param _tokenId ID of the NFT to query the approval of.\\n   * @return Address that _tokenId is approved for.\\n   */\\n  function getApproved(\\n    uint256 _tokenId\\n  )\\n    external\\n    override\\n    view\\n    validNFToken(_tokenId)\\n    returns (address)\\n  {\\n    return idToApproval[_tokenId];\\n  }\\n\\n  /**\\n   * @dev Checks if `_operator` is an approved operator for `_owner`.\\n   * @param _owner The address that owns the NFTs.\\n   * @param _operator The address that acts on behalf of the owner.\\n   * @return True if approved for all, false otherwise.\\n   */\\n  function isApprovedForAll(\\n    address _owner,\\n    address _operator\\n  )\\n    external\\n    override\\n    view\\n    returns (bool)\\n  {\\n    return ownerToOperators[_owner][_operator];\\n  }\\n\\n  /**\\n   * @dev Actually preforms the transfer.\\n   * @notice Does NO checks.\\n   * @param _to Address of a new owner.\\n   * @param _tokenId The NFT that is being transferred.\\n   */\\n  function _transfer(\\n    address _to,\\n    uint256 _tokenId\\n  )\\n    internal\\n  {\\n    address from = idToOwner[_tokenId];\\n    _clearApproval(_tokenId);\\n\\n    _beforeTokenTransfer(from, _to, _tokenId);\\n\\n    _removeNFToken(from, _tokenId);\\n    _addNFToken(_to, _tokenId);\\n\\n    emit Transfer(from, _to, _tokenId);\\n  }\\n\\n  /**\\n   * @dev Mints a new NFT.\\n   * @notice This is an internal function which should be called from user-implemented external\\n   * mint function. Its purpose is to show and properly initialize data structures when using this\\n   * implementation.\\n   * @param _to The address that will own the minted NFT.\\n   * @param _tokenId of the NFT to be minted by the msg.sender.\\n   */\\n  function _mint(\\n    address _to,\\n    uint256 _tokenId\\n  )\\n    internal\\n    virtual\\n  {\\n    require(_to != address(0), ZERO_ADDRESS);\\n    require(idToOwner[_tokenId] == address(0), NFT_ALREADY_EXISTS);\\n\\n    _addNFToken(_to, _tokenId);\\n    _beforeTokenTransfer(msg.sender, _to, _tokenId);\\n\\n    emit Transfer(address(0), _to, _tokenId);\\n  }\\n\\n  /**\\n   * @dev Burns a NFT.\\n   * @notice This is an internal function which should be called from user-implemented external burn\\n   * function. Its purpose is to show and properly initialize data structures when using this\\n   * implementation. Also, note that this burn implementation allows the minter to re-mint a burned\\n   * NFT.\\n   * @param _tokenId ID of the NFT to be burned.\\n   */\\n  function _burn(\\n    uint256 _tokenId\\n  )\\n    internal\\n    virtual\\n    validNFToken(_tokenId)\\n  {\\n    address tokenOwner = idToOwner[_tokenId];\\n    _clearApproval(_tokenId);\\n    _removeNFToken(tokenOwner, _tokenId);\\n    emit Transfer(tokenOwner, address(0), _tokenId);\\n  }\\n\\n  /**\\n   * @dev Removes a NFT from owner.\\n   * @notice Use and override this function with caution. Wrong usage can have serious consequences.\\n   * @param _from Address from wich we want to remove the NFT.\\n   * @param _tokenId Which NFT we want to remove.\\n   */\\n  function _removeNFToken(\\n    address _from,\\n    uint256 _tokenId\\n  )\\n    internal\\n    virtual\\n  {\\n    require(idToOwner[_tokenId] == _from, NOT_OWNER);\\n    ownerToNFTokenCount[_from] = ownerToNFTokenCount[_from] - 1;\\n    delete idToOwner[_tokenId];\\n  }\\n\\n  /**\\n   * @dev Assignes a new NFT to owner.\\n   * @notice Use and override this function with caution. Wrong usage can have serious consequences.\\n   * @param _to Address to wich we want to add the NFT.\\n   * @param _tokenId Which NFT we want to add.\\n   */\\n  function _addNFToken(\\n    address _to,\\n    uint256 _tokenId\\n  )\\n    internal\\n    virtual\\n  {\\n    require(idToOwner[_tokenId] == address(0), NFT_ALREADY_EXISTS);\\n\\n    idToOwner[_tokenId] = _to;\\n    ownerToNFTokenCount[_to] = ownerToNFTokenCount[_to].add(1);\\n  }\\n\\n  /**\\n   * @dev Helper function that gets NFT count of owner. This is needed for overriding in enumerable\\n   * extension to remove double storage (gas optimization) of owner nft count.\\n   * @param _owner Address for whom to query the count.\\n   * @return Number of _owner NFTs.\\n   */\\n  function _getOwnerNFTCount(\\n    address _owner\\n  )\\n    internal\\n    virtual\\n    view\\n    returns (uint256)\\n  {\\n    return ownerToNFTokenCount[_owner];\\n  }\\n\\n  /**\\n   * @dev Actually perform the safeTransferFrom.\\n   * @param _from The current owner of the NFT.\\n   * @param _to The new owner.\\n   * @param _tokenId The NFT to transfer.\\n   * @param _data Additional data with no specified format, sent in call to `_to`.\\n   */\\n  function _safeTransferFrom(\\n    address _from,\\n    address _to,\\n    uint256 _tokenId,\\n    bytes memory _data\\n  )\\n    private\\n    canTransfer(_tokenId)\\n    validNFToken(_tokenId)\\n  {\\n    address tokenOwner = idToOwner[_tokenId];\\n    require(tokenOwner == _from, NOT_OWNER);\\n    require(_to != address(0), ZERO_ADDRESS);\\n\\n    _transfer(_to, _tokenId);\\n\\n    if (_to.isContract())\\n    {\\n      bytes4 retval = IERC721TokenReceiver(_to).onERC721Received(msg.sender, _from, _tokenId, _data);\\n      require(retval == MAGIC_ON_ERC721_RECEIVED, NOT_ABLE_TO_RECEIVE_NFT);\\n    }\\n  }\\n\\n  /**\\n   * @dev Clears the current approval of a given NFT ID.\\n   * @param _tokenId ID of the NFT to be transferred.\\n   */\\n  function _clearApproval(\\n    uint256 _tokenId\\n  )\\n    private\\n  {\\n    if (idToApproval[_tokenId] != address(0))\\n    {\\n      delete idToApproval[_tokenId];\\n    }\\n  }\\n\\n  /**\\n   * @dev Hook that is called before any transfer of tokens. This includes\\n   * minting and burning.\\n   *\\n   * Calling conditions:\\n   *\\n   * - when `from` and `to` are both non-zero, `tokenId` of ``from``\\u0027s tokens\\n   * will be to transferred to `to`.\\n   * - when `from` is zero, `amount` tokens will be minted for `to`.\\n   * - when `to` is zero, `amount` of ``from``\\u0027s tokens will be burned.\\n   * - `from` and `to` are never both zero.\\n   *\\n   */\\n  function _beforeTokenTransfer(address from, address to, uint256 tokenId) internal virtual { }\\n}\\n\"},\"ERC721Metadata.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.6.0;\\n\\n// Souce: https://github.com/0xcert/ethereum-erc721/\\n\\nimport \\\"./ERC721.sol\\\";\\nimport \\\"./IERC721Metadata.sol\\\";\\n\\n/**\\n * @dev Optional metadata implementation for ERC-721 non-fungible token standard.\\n */\\ncontract ERC721Metadata is\\n  ERC721,\\n  IERC721Metadata\\n{\\n\\n  /**\\n   * @dev A descriptive name for a collection of NFTs.\\n   */\\n  string internal nftName;\\n\\n  /**\\n   * @dev An abbreviated name for NFTokens.\\n   */\\n  string internal nftSymbol;\\n\\n  /**\\n   * @dev Mapping from NFT ID to metadata uri.\\n   */\\n  mapping (uint256 =\\u003e string) internal idToUri;\\n\\n  /**\\n   * @dev Contract constructor.\\n   * @notice When implementing this contract don\\u0027t forget to set nftName and nftSymbol.\\n   */\\n  constructor()\\n    public\\n  {\\n    supportedInterfaces[0x5b5e139f] = true; // ERC721Metadata\\n  }\\n\\n  /**\\n   * @dev Returns a descriptive name for a collection of NFTokens.\\n   * @return _name Representing name.\\n   */\\n  function name()\\n    external\\n    override\\n    view\\n    returns (string memory _name)\\n  {\\n    _name = nftName;\\n  }\\n\\n  /**\\n   * @dev Returns an abbreviated name for NFTokens.\\n   * @return _symbol Representing symbol.\\n   */\\n  function symbol()\\n    external\\n    override\\n    view\\n    returns (string memory _symbol)\\n  {\\n    _symbol = nftSymbol;\\n  }\\n\\n  /**\\n   * @dev A distinct URI (RFC 3986) for a given NFT.\\n   * @param _tokenId Id for which we want uri.\\n   * @return URI of _tokenId.\\n   */\\n  function tokenURI(\\n    uint256 _tokenId\\n  )\\n    external\\n    override\\n    view\\n    validNFToken(_tokenId)\\n    returns (string memory)\\n  {\\n    return idToUri[_tokenId];\\n  }\\n\\n  /**\\n   * @dev Burns a NFT.\\n   * @notice This is an internal function which should be called from user-implemented external\\n   * burn function. Its purpose is to show and properly initialize data structures when using this\\n   * implementation. Also, note that this burn implementation allows the minter to re-mint a burned\\n   * NFT.\\n   * @param _tokenId ID of the NFT to be burned.\\n   */\\n  function _burn(\\n    uint256 _tokenId\\n  )\\n    internal\\n    override\\n    virtual\\n  {\\n    super._burn(_tokenId);\\n\\n    if (bytes(idToUri[_tokenId]).length != 0)\\n    {\\n      delete idToUri[_tokenId];\\n    }\\n  }\\n\\n  /**\\n   * @dev Set a distinct URI (RFC 3986) for a given NFT ID.\\n   * @notice This is an internal function which should be called from user-implemented external\\n   * function. Its purpose is to show and properly initialize data structures when using this\\n   * implementation.\\n   * @param _tokenId Id for which we want URI.\\n   * @param _uri String representing RFC 3986 URI.\\n   */\\n  function _setTokenUri(\\n    uint256 _tokenId,\\n    string memory _uri\\n  )\\n    internal\\n    validNFToken(_tokenId)\\n  {\\n    idToUri[_tokenId] = _uri;\\n  }\\n\\n}\\n\"},\"ERC721MetadataEnumerable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.6.0;\\n\\n// Souce: https://github.com/0xcert/ethereum-erc721/\\n\\nimport \\\"./ERC721Metadata.sol\\\";\\nimport \\\"./IERC721Enumerable.sol\\\";\\n\\n/**\\n * @dev Optional enumeration implementation for ERC-721 non-fungible token standard.\\n */\\ncontract ERC721MetadataEnumerable is\\n  ERC721Metadata,\\n  IERC721Enumerable\\n{\\n\\n  /**\\n   * @dev List of revert message codes. Implementing dApp should handle showing\\n   * the correct message. Based on 0xcert framework error codes.\\n   */\\n  string constant INVALID_INDEX = \\\"005007\\\";\\n\\n  /**\\n   * @dev Array of all NFT IDs.\\n   */\\n  uint256[] internal tokens;\\n\\n  /**\\n   * @dev Mapping from token ID to its index in global tokens array.\\n   */\\n  mapping(uint256 =\\u003e uint256) internal idToIndex;\\n\\n  /**\\n   * @dev Mapping from owner to list of owned NFT IDs.\\n   */\\n  mapping(address =\\u003e uint256[]) internal ownerToIds;\\n\\n  /**\\n   * @dev Mapping from NFT ID to its index in the owner tokens list.\\n   */\\n  mapping(uint256 =\\u003e uint256) internal idToOwnerIndex;\\n\\n  /**\\n   * @dev Contract constructor.\\n   */\\n  constructor()\\n    public\\n  {\\n    supportedInterfaces[0x780e9d63] = true; // ERC721Enumerable\\n  }\\n\\n  /**\\n   * @dev Returns the count of all existing NFTokens.\\n   * @return Total supply of NFTs.\\n   */\\n  function totalSupply()\\n    external\\n    override\\n    view\\n    returns (uint256)\\n  {\\n    return tokens.length;\\n  }\\n\\n  /**\\n   * @dev Returns NFT ID by its index.\\n   * @param _index A counter less than `totalSupply()`.\\n   * @return Token id.\\n   */\\n  function tokenByIndex(\\n    uint256 _index\\n  )\\n    external\\n    override\\n    view\\n    returns (uint256)\\n  {\\n    require(_index \\u003c tokens.length, INVALID_INDEX);\\n    return tokens[_index];\\n  }\\n\\n  /**\\n   * @dev returns the n-th NFT ID from a list of owner\\u0027s tokens.\\n   * @param _owner Token owner\\u0027s address.\\n   * @param _index Index number representing n-th token in owner\\u0027s list of tokens.\\n   * @return Token id.\\n   */\\n  function tokenOfOwnerByIndex(\\n    address _owner,\\n    uint256 _index\\n  )\\n    external\\n    override\\n    view\\n    returns (uint256)\\n  {\\n    require(_index \\u003c ownerToIds[_owner].length, INVALID_INDEX);\\n    return ownerToIds[_owner][_index];\\n  }\\n\\n  /**\\n   * @dev Mints a new NFT.\\n   * @notice This is an internal function which should be called from user-implemented external\\n   * mint function. Its purpose is to show and properly initialize data structures when using this\\n   * implementation.\\n   * @param _to The address that will own the minted NFT.\\n   * @param _tokenId of the NFT to be minted by the msg.sender.\\n   */\\n  function _mint(\\n    address _to,\\n    uint256 _tokenId\\n  )\\n    internal\\n    override\\n    virtual\\n  {\\n    super._mint(_to, _tokenId);\\n    tokens.push(_tokenId);\\n    idToIndex[_tokenId] = tokens.length - 1;\\n  }\\n\\n  /**\\n   * @dev Burns a NFT.\\n   * @notice This is an internal function which should be called from user-implemented external\\n   * burn function. Its purpose is to show and properly initialize data structures when using this\\n   * implementation. Also, note that this burn implementation allows the minter to re-mint a burned\\n   * NFT.\\n   * @param _tokenId ID of the NFT to be burned.\\n   */\\n  function _burn(\\n    uint256 _tokenId\\n  )\\n    internal\\n    override\\n    virtual\\n  {\\n    super._burn(_tokenId);\\n\\n    uint256 tokenIndex = idToIndex[_tokenId];\\n    uint256 lastTokenIndex = tokens.length - 1;\\n    uint256 lastToken = tokens[lastTokenIndex];\\n\\n    tokens[tokenIndex] = lastToken;\\n\\n    tokens.pop();\\n    // This wastes gas if you are burning the last token but saves a little gas if you are not.\\n    idToIndex[lastToken] = tokenIndex;\\n    idToIndex[_tokenId] = 0;\\n  }\\n\\n  /**\\n   * @dev Removes a NFT from an address.\\n   * @notice Use and override this function with caution. Wrong usage can have serious consequences.\\n   * @param _from Address from wich we want to remove the NFT.\\n   * @param _tokenId Which NFT we want to remove.\\n   */\\n  function _removeNFToken(\\n    address _from,\\n    uint256 _tokenId\\n  )\\n    internal\\n    override\\n    virtual\\n  {\\n    require(idToOwner[_tokenId] == _from, NOT_OWNER);\\n    delete idToOwner[_tokenId];\\n\\n    uint256 tokenToRemoveIndex = idToOwnerIndex[_tokenId];\\n    uint256 lastTokenIndex = ownerToIds[_from].length - 1;\\n\\n    if (lastTokenIndex != tokenToRemoveIndex)\\n    {\\n      uint256 lastToken = ownerToIds[_from][lastTokenIndex];\\n      ownerToIds[_from][tokenToRemoveIndex] = lastToken;\\n      idToOwnerIndex[lastToken] = tokenToRemoveIndex;\\n    }\\n\\n    ownerToIds[_from].pop();\\n  }\\n\\n  /**\\n   * @dev Assignes a new NFT to an address.\\n   * @notice Use and override this function with caution. Wrong usage can have serious consequences.\\n   * @param _to Address to wich we want to add the NFT.\\n   * @param _tokenId Which NFT we want to add.\\n   */\\n  function _addNFToken(\\n    address _to,\\n    uint256 _tokenId\\n  )\\n    internal\\n    override\\n    virtual\\n  {\\n    require(idToOwner[_tokenId] == address(0), NFT_ALREADY_EXISTS);\\n    idToOwner[_tokenId] = _to;\\n\\n    ownerToIds[_to].push(_tokenId);\\n    idToOwnerIndex[_tokenId] = ownerToIds[_to].length - 1;\\n  }\\n\\n  /**\\n   * @dev Helper function that gets NFT count of owner. This is needed for overriding in enumerable\\n   * extension to remove double storage(gas optimization) of owner nft count.\\n   * @param _owner Address for whom to query the count.\\n   * @return Number of _owner NFTs.\\n   */\\n  function _getOwnerNFTCount(\\n    address _owner\\n  )\\n    internal\\n    override\\n    virtual\\n    view\\n    returns (uint256)\\n  {\\n    return ownerToIds[_owner].length;\\n  }\\n}\\n\"},\"Freezable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.6.0;\\n\\nimport \\\"./Pausable.sol\\\";\\n\\ncontract Freezable is Pausable {\\n    mapping (address =\\u003e bool) unfrozenAccounts;\\n\\n    event Freeze(address indexed account);\\n    event Unfreeze(address indexed account);\\n\\n    function _frozen(address account) internal view returns (bool) {\\n        return !unfrozenAccounts[account];\\n    }\\n\\n    function _freeze(address account, bool frozen) internal {\\n        unfrozenAccounts[account] = !frozen;\\n    }\\n\\n    modifier whenUnfrozen(address account) {\\n        require(!_frozen(account), \\\"account is frozen\\\");\\n        _;\\n    }\\n\\n    function frozen(address account) public view returns (bool) {\\n        return _frozen(account);\\n    }\\n\\n    function freeze(address account) public onlyOwner {\\n        _freeze(account, true);\\n        emit Freeze(account);\\n    }\\n\\n    function unfreeze(address account) public onlyOwner {\\n        _freeze(account, false);\\n        emit Unfreeze(account);\\n    }\\n\\n    function _beforeTransfer(address from, address to) internal whenNotPaused whenUnfrozen(from) whenUnfrozen(to) {\\n    }\\n\\n    modifier whenTransfer(address from, address to) {\\n        _beforeTransfer(from, to);\\n\\t_;\\n    }\\n}\\n\"},\"IERC165.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.6.0;\\n\\n// Source: https://github.com/0xcert/ethereum-erc721/\\n\\n/**\\n * @dev A standard for detecting smart contract interfaces.\\n * See: https://eips.ethereum.org/EIPS/eip-165.\\n */\\ninterface IERC165\\n{\\n\\n  /**\\n   * @dev Checks if the smart contract includes a specific interface.\\n   * @notice This function uses less than 30,000 gas.\\n   * @param _interfaceID The interface identifier, as specified in ERC-165.\\n   * @return True if _interfaceID is supported, false otherwise.\\n   */\\n  function supportsInterface(\\n    bytes4 _interfaceID\\n  )\\n    external\\n    view\\n    returns (bool);\\n\\n}\\n\"},\"IERC20.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.6.0;\\n\\n// Source: https://github.com/OpenZeppelin/openzeppelin-contracts\\n\\n/**\\n * @dev Interface of the ERC20 standard as defined in the EIP.\\n */\\ninterface IERC20 {\\n    /**\\n     * @dev Returns the amount of tokens in existence.\\n     */\\n    function totalSupply() external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the amount of tokens owned by `account`.\\n     */\\n    function balanceOf(address account) external view returns (uint256);\\n\\n    /**\\n     * @dev Moves `amount` tokens from the caller\\u0027s account to `recipient`.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transfer(address recipient, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Returns the remaining number of tokens that `spender` will be\\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\\n     * zero by default.\\n     *\\n     * This value changes when {approve} or {transferFrom} are called.\\n     */\\n    function allowance(address owner, address spender) external view returns (uint256);\\n\\n    /**\\n     * @dev Sets `amount` as the allowance of `spender` over the caller\\u0027s tokens.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\\n     * that someone may use both the old and the new allowance by unfortunate\\n     * transaction ordering. One possible solution to mitigate this race\\n     * condition is to first reduce the spender\\u0027s allowance to 0 and set the\\n     * desired value afterwards:\\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address spender, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Moves `amount` tokens from `sender` to `recipient` using the\\n     * allowance mechanism. `amount` is then deducted from the caller\\u0027s\\n     * allowance.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(address sender, address recipient, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\\n     * another (`to`).\\n     *\\n     * Note that `value` may be zero.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 value);\\n\\n    /**\\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\\n     * a call to {approve}. `value` is the new allowance.\\n     */\\n    event Approval(address indexed owner, address indexed spender, uint256 value);\\n}\\n\"},\"IERC721.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.6.0;\\n\\n// Source: https://github.com/0xcert/ethereum-erc721/\\n\\n/**\\n * @dev IERC-721 non-fungible token standard.\\n * See https://github.com/ethereum/EIPs/blob/master/EIPS/eip-721.md.\\n */\\ninterface IERC721\\n{\\n\\n  /**\\n   * @dev Emits when ownership of any NFT changes by any mechanism. This event emits when NFTs are\\n   * created (`from` == 0) and destroyed (`to` == 0). Exception: during contract creation, any\\n   * number of NFTs may be created and assigned without emitting Transfer. At the time of any\\n   * transfer, the approved address for that NFT (if any) is reset to none.\\n   */\\n  event Transfer(\\n    address indexed _from,\\n    address indexed _to,\\n    uint256 indexed _tokenId\\n  );\\n\\n  /**\\n   * @dev This emits when the approved address for an NFT is changed or reaffirmed. The zero\\n   * address indicates there is no approved address. When a Transfer event emits, this also\\n   * indicates that the approved address for that NFT (if any) is reset to none.\\n   */\\n  event Approval(\\n    address indexed _owner,\\n    address indexed _approved,\\n    uint256 indexed _tokenId\\n  );\\n\\n  /**\\n   * @dev This emits when an operator is enabled or disabled for an owner. The operator can manage\\n   * all NFTs of the owner.\\n   */\\n  event ApprovalForAll(\\n    address indexed _owner,\\n    address indexed _operator,\\n    bool _approved\\n  );\\n\\n  /**\\n   * @dev Transfers the ownership of an NFT from one address to another address.\\n   * @notice Throws unless `msg.sender` is the current owner, an authorized operator, or the\\n   * approved address for this NFT. Throws if `_from` is not the current owner. Throws if `_to` is\\n   * the zero address. Throws if `_tokenId` is not a valid NFT. When transfer is complete, this\\n   * function checks if `_to` is a smart contract (code size \\u003e 0). If so, it calls\\n   * `onERC721Received` on `_to` and throws if the return value is not\\n   * `bytes4(keccak256(\\\"onERC721Received(address,uint256,bytes)\\\"))`.\\n   * @param _from The current owner of the NFT.\\n   * @param _to The new owner.\\n   * @param _tokenId The NFT to transfer.\\n   * @param _data Additional data with no specified format, sent in call to `_to`.\\n   */\\n  function safeTransferFrom(\\n    address _from,\\n    address _to,\\n    uint256 _tokenId,\\n    bytes calldata _data\\n  )\\n    external;\\n\\n  /**\\n   * @dev Transfers the ownership of an NFT from one address to another address.\\n   * @notice This works identically to the other function with an extra data parameter, except this\\n   * function just sets data to \\\"\\\"\\n   * @param _from The current owner of the NFT.\\n   * @param _to The new owner.\\n   * @param _tokenId The NFT to transfer.\\n   */\\n  function safeTransferFrom(\\n    address _from,\\n    address _to,\\n    uint256 _tokenId\\n  )\\n    external;\\n\\n  /**\\n   * @dev Throws unless `msg.sender` is the current owner, an authorized operator, or the approved\\n   * address for this NFT. Throws if `_from` is not the current owner. Throws if `_to` is the zero\\n   * address. Throws if `_tokenId` is not a valid NFT.\\n   * @notice The caller is responsible to confirm that `_to` is capable of receiving NFTs or else\\n   * they mayb be permanently lost.\\n   * @param _from The current owner of the NFT.\\n   * @param _to The new owner.\\n   * @param _tokenId The NFT to transfer.\\n   */\\n  function transferFrom(\\n    address _from,\\n    address _to,\\n    uint256 _tokenId\\n  )\\n    external;\\n\\n  /**\\n   * @dev Set or reaffirm the approved address for an NFT.\\n   * @notice The zero address indicates there is no approved address. Throws unless `msg.sender` is\\n   * the current NFT owner, or an authorized operator of the current owner.\\n   * @param _approved The new approved NFT controller.\\n   * @param _tokenId The NFT to approve.\\n   */\\n  function approve(\\n    address _approved,\\n    uint256 _tokenId\\n  )\\n    external;\\n\\n  /**\\n   * @dev Enables or disables approval for a third party (\\\"operator\\\") to manage all of\\n   * `msg.sender`\\u0027s assets. It also emits the ApprovalForAll event.\\n   * @notice The contract MUST allow multiple operators per owner.\\n   * @param _operator Address to add to the set of authorized operators.\\n   * @param _approved True if the operators is approved, false to revoke approval.\\n   */\\n  function setApprovalForAll(\\n    address _operator,\\n    bool _approved\\n  )\\n    external;\\n\\n  /**\\n   * @dev Returns the number of NFTs owned by `_owner`. NFTs assigned to the zero address are\\n   * considered invalid, and this function throws for queries about the zero address.\\n   * @param _owner Address for whom to query the balance.\\n   * @return Balance of _owner.\\n   */\\n  function balanceOf(\\n    address _owner\\n  )\\n    external\\n    view\\n    returns (uint256);\\n\\n  /**\\n   * @dev Returns the address of the owner of the NFT. NFTs assigned to zero address are considered\\n   * invalid, and queries about them do throw.\\n   * @param _tokenId The identifier for an NFT.\\n   * @return Address of _tokenId owner.\\n   */\\n  function ownerOf(\\n    uint256 _tokenId\\n  )\\n    external\\n    view\\n    returns (address);\\n\\n  /**\\n   * @dev Get the approved address for a single NFT.\\n   * @notice Throws if `_tokenId` is not a valid NFT.\\n   * @param _tokenId The NFT to find the approved address for.\\n   * @return Address that _tokenId is approved for.\\n   */\\n  function getApproved(\\n    uint256 _tokenId\\n  )\\n    external\\n    view\\n    returns (address);\\n\\n  /**\\n   * @dev Returns true if `_operator` is an approved operator for `_owner`, false otherwise.\\n   * @param _owner The address that owns the NFTs.\\n   * @param _operator The address that acts on behalf of the owner.\\n   * @return True if approved for all, false otherwise.\\n   */\\n  function isApprovedForAll(\\n    address _owner,\\n    address _operator\\n  )\\n    external\\n    view\\n    returns (bool);\\n\\n}\\n\"},\"IERC721Enumerable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.6.0;\\n\\n// Source: https://github.com/0xcert/ethereum-erc721/\\n\\n/**\\n * @dev Optional enumeration extension for ERC-721 non-fungible token standard.\\n * See https://github.com/ethereum/EIPs/blob/master/EIPS/eip-721.md.\\n */\\ninterface IERC721Enumerable\\n{\\n\\n  /**\\n   * @dev Returns a count of valid NFTs tracked by this contract, where each one of them has an\\n   * assigned and queryable owner not equal to the zero address.\\n   * @return Total supply of NFTs.\\n   */\\n  function totalSupply()\\n    external\\n    view\\n    returns (uint256);\\n\\n  /**\\n   * @dev Returns the token identifier for the `_index`th NFT. Sort order is not specified.\\n   * @param _index A counter less than `totalSupply()`.\\n   * @return Token id.\\n   */\\n  function tokenByIndex(\\n    uint256 _index\\n  )\\n    external\\n    view\\n    returns (uint256);\\n\\n  /**\\n   * @dev Returns the token identifier for the `_index`th NFT assigned to `_owner`. Sort order is\\n   * not specified. It throws if `_index` \\u003e= `balanceOf(_owner)` or if `_owner` is the zero address,\\n   * representing invalid NFTs.\\n   * @param _owner An address where we are interested in NFTs owned by them.\\n   * @param _index A counter less than `balanceOf(_owner)`.\\n   * @return Token id.\\n   */\\n  function tokenOfOwnerByIndex(\\n    address _owner,\\n    uint256 _index\\n  )\\n    external\\n    view\\n    returns (uint256);\\n\\n}\\n\"},\"IERC721Metadata.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.6.0;\\n\\n// Souce: https://github.com/0xcert/ethereum-erc721/\\n\\n/**\\n * @dev Optional metadata extension for ERC-721 non-fungible token standard.\\n * See https://github.com/ethereum/EIPs/blob/master/EIPS/eip-721.md.\\n */\\ninterface IERC721Metadata\\n{\\n\\n  /**\\n   * @dev Returns a descriptive name for a collection of NFTs in this contract.\\n   * @return _name Representing name.\\n   */\\n  function name()\\n    external\\n    view\\n    returns (string memory _name);\\n\\n  /**\\n   * @dev Returns a abbreviated name for a collection of NFTs in this contract.\\n   * @return _symbol Representing symbol.\\n   */\\n  function symbol()\\n    external\\n    view\\n    returns (string memory _symbol);\\n\\n  /**\\n   * @dev Returns a distinct Uniform Resource Identifier (URI) for a given asset. It Throws if\\n   * `_tokenId` is not a valid NFT. URIs are defined in RFC3986. The URI may point to a JSON file\\n   * that conforms to the \\\"ERC721 Metadata JSON Schema\\\".\\n   * @return URI of _tokenId.\\n   */\\n  function tokenURI(uint256 _tokenId)\\n    external\\n    view\\n    returns (string memory);\\n\\n}\\n\"},\"IERC721TokenReceiver.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.6.0;\\n\\n// Source: https://github.com/0xcert/ethereum-erc721/\\n\\n/**\\n * @dev ERC-721 interface for accepting safe transfers.\\n * See https://github.com/ethereum/EIPs/blob/master/EIPS/eip-721.md.\\n */\\ninterface IERC721TokenReceiver\\n{\\n\\n  /**\\n   * @dev Handle the receipt of a NFT. The ERC721 smart contract calls this function on the\\n   * recipient after a `transfer`. This function MAY throw to revert and reject the transfer. Return\\n   * of other than the magic value MUST result in the transaction being reverted.\\n   * Returns `bytes4(keccak256(\\\"onERC721Received(address,address,uint256,bytes)\\\"))` unless throwing.\\n   * @notice The contract address is always the message sender. A wallet/broker/auction application\\n   * MUST implement the wallet interface if it will accept safe transfers.\\n   * @param _operator The address which called `safeTransferFrom` function.\\n   * @param _from The address which previously owned the token.\\n   * @param _tokenId The NFT identifier which is being transferred.\\n   * @param _data Additional data with no specified format.\\n   * @return Returns `bytes4(keccak256(\\\"onERC721Received(address,address,uint256,bytes)\\\"))`.\\n   */\\n  function onERC721Received(\\n    address _operator,\\n    address _from,\\n    uint256 _tokenId,\\n    bytes calldata _data\\n  )\\n    external\\n    returns(bytes4);\\n\\n}\\n\"},\"juno.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.6.0;\\n\\nimport \\\"./ERC20.sol\\\";\\nimport \\\"./Freezable.sol\\\";\\nimport \\\"./Describable.sol\\\";\\n\\ncontract Juno is ERC20, Freezable, Describable {\\n\\n    constructor(string memory name, string memory symbol, uint8 decimals, uint256 totalSupply, string memory description, address issuer) ERC20(name, symbol) public {\\n\\t_setupDescription(description);\\n        _setupDecimals(decimals);\\n        _freeze(issuer, false);\\n        _freeze(address(0), false);\\n        _mint(issuer, totalSupply);\\n        _freeze(address(0), true);\\n    }\\n\\n    function unfreezeAndTransfer(address recipient, uint256 amount) public onlyOwner {\\n        unfreeze(recipient);\\n        require(transfer(recipient, amount), \\\"transfer\\\");\\n    }\\n\\n    function _beforeTokenTransfer(address from, address to, uint256) internal override whenTransfer(from, to) {\\n    }\\n\\n}\\n\"},\"Ownable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.6.0;\\n\\n// Source: https://github.com/OpenZeppelin/openzeppelin-contracts\\n\\n/**\\n * @title Ownable\\n * @dev The Ownable contract has an owner address, and provides basic authorization control\\n * functions, this simplifies the implementation of \\\"user permissions\\\".\\n */\\ncontract Ownable {\\n  address public owner;\\n\\n  event OwnershipRenounced(address indexed previousOwner);\\n  event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\\n\\n  /**\\n   * @dev The Ownable constructor sets the original `owner` of the contract to the sender\\n   * account.\\n   */\\n  constructor() public {\\n      owner = msg.sender;\\n  }\\n\\n  /**\\n   * @dev Throws if called by any account other than the owner.\\n   */\\n  modifier onlyOwner() {\\n      require(msg.sender == owner);\\n      _;\\n  }\\n\\n  /**\\n   * @dev Allows the current owner to transfer control of the contract to a newOwner.\\n   * @param newOwner The address to transfer ownership to.\\n   */\\n  function transferOwnership(address newOwner) public onlyOwner {\\n      require(newOwner != address(0));\\n      emit OwnershipTransferred(owner, newOwner);\\n      owner = newOwner;\\n  }\\n\\n  /**\\n   * @dev Allows the current owner to relinquish control of the contract.\\n   */\\n  function renounceOwnership() public onlyOwner {\\n      emit OwnershipRenounced(owner);\\n      owner = address(0);\\n  }\\n}\\n\"},\"Pausable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.6.0;\\n\\n// Source: https://github.com/OpenZeppelin/openzeppelin-contracts\\n\\nimport \\\"./Ownable.sol\\\";\\n\\n/**\\n * @title Pausable\\n * @dev Base contract which allows children to implement an emergency stop mechanism.\\n */\\ncontract Pausable is Ownable {\\n  event Pause();\\n  event Unpause();\\n  event NotPausable();\\n\\n  bool public paused = false;\\n  bool public canPause = true;\\n\\n  /**\\n   * @dev Modifier to make a function callable only when the contract is not paused.\\n   */\\n  modifier whenNotPaused() {\\n      require(!paused || msg.sender == owner);\\n      _;\\n  }\\n\\n  /**\\n   * @dev Modifier to make a function callable only when the contract is paused.\\n   */\\n  modifier whenPaused() {\\n      require(paused);\\n      _;\\n  }\\n\\n  /**\\n   * @dev called by the owner to pause, triggers stopped state\\n   **/\\n  function pause() onlyOwner whenNotPaused public {\\n      require(canPause == true);\\n      paused = true;\\n      emit Pause();\\n  }\\n\\n  /**\\n   * @dev called by the owner to unpause, returns to normal state\\n   */\\n  function unpause() onlyOwner whenPaused public {\\n      require(paused == true);\\n      paused = false;\\n      emit Unpause();\\n  }\\n\\n  /**\\n   * @dev Prevent the token from ever being paused again\\n   **/\\n  function notPausable() onlyOwner public {\\n      paused = false;\\n      canPause = false;\\n      emit NotPausable();\\n  }\\n}\\n\"},\"SafeMath.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.6.0;\\n\\n// Source: https://github.com/OpenZeppelin/openzeppelin-contracts\\n\\n/**\\n * @dev Wrappers over Solidity\\u0027s arithmetic operations with added overflow\\n * checks.\\n *\\n * Arithmetic operations in Solidity wrap on overflow. This can easily result\\n * in bugs, because programmers usually assume that an overflow raises an\\n * error, which is the standard behavior in high level programming languages.\\n * `SafeMath` restores this intuition by reverting the transaction when an\\n * operation overflows.\\n *\\n * Using this library instead of the unchecked operations eliminates an entire\\n * class of bugs, so it\\u0027s recommended to use it always.\\n */\\nlibrary SafeMath {\\n    /**\\n     * @dev Returns the addition of two unsigned integers, reverting on\\n     * overflow.\\n     *\\n     * Counterpart to Solidity\\u0027s `+` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Addition cannot overflow.\\n     */\\n    function add(uint256 a, uint256 b) internal pure returns (uint256) {\\n        uint256 c = a + b;\\n        require(c \\u003e= a, \\\"SafeMath: addition overflow\\\");\\n\\n        return c;\\n    }\\n\\n    /**\\n     * @dev Returns the subtraction of two unsigned integers, reverting on\\n     * overflow (when the result is negative).\\n     *\\n     * Counterpart to Solidity\\u0027s `-` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Subtraction cannot overflow.\\n     */\\n    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return sub(a, b, \\\"SafeMath: subtraction overflow\\\");\\n    }\\n\\n    /**\\n     * @dev Returns the subtraction of two unsigned integers, reverting with custom message on\\n     * overflow (when the result is negative).\\n     *\\n     * Counterpart to Solidity\\u0027s `-` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Subtraction cannot overflow.\\n     */\\n    function sub(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\\n        require(b \\u003c= a, errorMessage);\\n        uint256 c = a - b;\\n\\n        return c;\\n    }\\n\\n    /**\\n     * @dev Returns the multiplication of two unsigned integers, reverting on\\n     * overflow.\\n     *\\n     * Counterpart to Solidity\\u0027s `*` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Multiplication cannot overflow.\\n     */\\n    function mul(uint256 a, uint256 b) internal pure returns (uint256) {\\n        // Gas optimization: this is cheaper than requiring \\u0027a\\u0027 not being zero, but the\\n        // benefit is lost if \\u0027b\\u0027 is also tested.\\n        // See: https://github.com/OpenZeppelin/openzeppelin-contracts/pull/522\\n        if (a == 0) {\\n            return 0;\\n        }\\n\\n        uint256 c = a * b;\\n        require(c / a == b, \\\"SafeMath: multiplication overflow\\\");\\n\\n        return c;\\n    }\\n\\n    /**\\n     * @dev Returns the integer division of two unsigned integers. Reverts on\\n     * division by zero. The result is rounded towards zero.\\n     *\\n     * Counterpart to Solidity\\u0027s `/` operator. Note: this function uses a\\n     * `revert` opcode (which leaves remaining gas untouched) while Solidity\\n     * uses an invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Requirements:\\n     *\\n     * - The divisor cannot be zero.\\n     */\\n    function div(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return div(a, b, \\\"SafeMath: division by zero\\\");\\n    }\\n\\n    /**\\n     * @dev Returns the integer division of two unsigned integers. Reverts with custom message on\\n     * division by zero. The result is rounded towards zero.\\n     *\\n     * Counterpart to Solidity\\u0027s `/` operator. Note: this function uses a\\n     * `revert` opcode (which leaves remaining gas untouched) while Solidity\\n     * uses an invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Requirements:\\n     *\\n     * - The divisor cannot be zero.\\n     */\\n    function div(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\\n        require(b \\u003e 0, errorMessage);\\n        uint256 c = a / b;\\n        // assert(a == b * c + a % b); // There is no case in which this doesn\\u0027t hold\\n\\n        return c;\\n    }\\n\\n    /**\\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\\n     * Reverts when dividing by zero.\\n     *\\n     * Counterpart to Solidity\\u0027s `%` operator. This function uses a `revert`\\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\\n     * invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Requirements:\\n     *\\n     * - The divisor cannot be zero.\\n     */\\n    function mod(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return mod(a, b, \\\"SafeMath: modulo by zero\\\");\\n    }\\n\\n    /**\\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\\n     * Reverts with custom message when dividing by zero.\\n     *\\n     * Counterpart to Solidity\\u0027s `%` operator. This function uses a `revert`\\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\\n     * invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Requirements:\\n     *\\n     * - The divisor cannot be zero.\\n     */\\n    function mod(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\\n        require(b != 0, errorMessage);\\n        return a % b;\\n    }\\n}\\n\"},\"SupportsInterface.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.6.0;\\n\\n// Source: https://github.com/0xcert/ethereum-erc721/\\n\\nimport \\\"./IERC165.sol\\\";\\n\\n/**\\n * @dev Implementation of standard for detect smart contract interfaces.\\n */\\ncontract SupportsInterface is\\n  IERC165\\n{\\n\\n  /**\\n   * @dev Mapping of supported intefraces.\\n   * You must not set element 0xffffffff to true.\\n   */\\n  mapping(bytes4 =\\u003e bool) internal supportedInterfaces;\\n\\n  /**\\n   * @dev Contract constructor.\\n   */\\n  constructor()\\n    public\\n  {\\n    supportedInterfaces[0x01ffc9a7] = true; // ERC165\\n  }\\n\\n  /**\\n   * @dev Function to check which interfaces are suported by this contract.\\n   * @param _interfaceID Id of the interface.\\n   * @return True if _interfaceID is supported, false otherwise.\\n   */\\n  function supportsInterface(\\n    bytes4 _interfaceID\\n  )\\n    external\\n    override\\n    view\\n    returns (bool)\\n  {\\n    return supportedInterfaces[_interfaceID];\\n  }\\n\\n}\\n\"}}","ABI":"[{\"inputs\":[{\"internalType\":\"string\",\"name\":\"name\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"symbol\",\"type\":\"string\"},{\"internalType\":\"uint8\",\"name\":\"decimals\",\"type\":\"uint8\"},{\"internalType\":\"uint256\",\"name\":\"totalSupply\",\"type\":\"uint256\"},{\"internalType\":\"string\",\"name\":\"description\",\"type\":\"string\"},{\"internalType\":\"address\",\"name\":\"issuer\",\"type\":\"address\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Approval\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"Freeze\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[],\"name\":\"NotPausable\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"}],\"name\":\"OwnershipRenounced\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[],\"name\":\"Pause\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Transfer\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"Unfreeze\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[],\"name\":\"Unpause\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"}],\"name\":\"allowance\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"approve\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"canPause\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"decimals\",\"outputs\":[{\"internalType\":\"uint8\",\"name\":\"\",\"type\":\"uint8\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"subtractedValue\",\"type\":\"uint256\"}],\"name\":\"decreaseAllowance\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"description\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"freeze\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"frozen\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"addedValue\",\"type\":\"uint256\"}],\"name\":\"increaseAllowance\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"name\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"notPausable\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"pause\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"paused\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"symbol\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalSupply\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"recipient\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"transfer\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"recipient\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"transferFrom\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"unfreeze\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"recipient\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"unfreezeAndTransfer\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"unpause\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}]","ContractName":"Juno","CompilerVersion":"v0.6.12+commit.27d51765","OptimizationUsed":"0","Runs":"200","ConstructorArguments":"00000000000000000000000000000000000000000000000000000000000000c0000000000000000000000000000000000000000000000000000000000000012000000000000000000000000000000000000000000000000000000000000000120000000000000000000000000000000000000000000000000de0b6b3a764000000000000000000000000000000000000000000000000000000000000000001600000000000000000000000001208259bfee8bce75867b34d554f8344440b0a5600000000000000000000000000000000000000000000000000000000000000225465737420746f6b656e20313020352032303231204e6f6e2d637573746f6469616c0000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000004544f4b4f0000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000047465737400000000000000000000000000000000000000000000000000000000","EVMVersion":"Default","Library":"","LicenseType":"BSD-3-Clause","Proxy":"0","Implementation":"","SwarmSource":"ipfs://0c057ee8edde0b4554bfa404bab960b4d98e981590aa27b2f592696b1d339e17"}]}