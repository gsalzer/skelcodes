{"status":"1","message":"OK","result":[{"SourceCode":"// Sources flattened with hardhat v2.6.8 https://hardhat.org\r\n\r\n// File @openzeppelin/contracts/utils/Context.sol@v4.3.2\r\n\r\n// SPDX-License-Identifier: MIT\r\n\r\npragma solidity ^0.8.0;\r\n\r\n/**\r\n * @dev Provides information about the current execution context, including the\r\n * sender of the transaction and its data. While these are generally available\r\n * via msg.sender and msg.data, they should not be accessed in such a direct\r\n * manner, since when dealing with meta-transactions the account sending and\r\n * paying for execution may not be the actual sender (as far as an application\r\n * is concerned).\r\n *\r\n * This contract is only required for intermediate, library-like contracts.\r\n */\r\nabstract contract Context {\r\n    function _msgSender() internal view virtual returns (address) {\r\n        return msg.sender;\r\n    }\r\n\r\n    function _msgData() internal view virtual returns (bytes calldata) {\r\n        return msg.data;\r\n    }\r\n}\r\n\r\n\r\n// File @openzeppelin/contracts/access/Ownable.sol@v4.3.2\r\n\r\n\r\n\r\npragma solidity ^0.8.0;\r\n\r\n/**\r\n * @dev Contract module which provides a basic access control mechanism, where\r\n * there is an account (an owner) that can be granted exclusive access to\r\n * specific functions.\r\n *\r\n * By default, the owner account will be the one that deploys the contract. This\r\n * can later be changed with {transferOwnership}.\r\n *\r\n * This module is used through inheritance. It will make available the modifier\r\n * `onlyOwner`, which can be applied to your functions to restrict their use to\r\n * the owner.\r\n */\r\nabstract contract Ownable is Context {\r\n    address private _owner;\r\n\r\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\r\n\r\n    /**\r\n     * @dev Initializes the contract setting the deployer as the initial owner.\r\n     */\r\n    constructor() {\r\n        _setOwner(_msgSender());\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the address of the current owner.\r\n     */\r\n    function owner() public view virtual returns (address) {\r\n        return _owner;\r\n    }\r\n\r\n    /**\r\n     * @dev Throws if called by any account other than the owner.\r\n     */\r\n    modifier onlyOwner() {\r\n        require(owner() == _msgSender(), \"Ownable: caller is not the owner\");\r\n        _;\r\n    }\r\n\r\n    /**\r\n     * @dev Leaves the contract without owner. It will not be possible to call\r\n     * `onlyOwner` functions anymore. Can only be called by the current owner.\r\n     *\r\n     * NOTE: Renouncing ownership will leave the contract without an owner,\r\n     * thereby removing any functionality that is only available to the owner.\r\n     */\r\n    function renounceOwnership() public virtual onlyOwner {\r\n        _setOwner(address(0));\r\n    }\r\n\r\n    /**\r\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\r\n     * Can only be called by the current owner.\r\n     */\r\n    function transferOwnership(address newOwner) public virtual onlyOwner {\r\n        require(newOwner != address(0), \"Ownable: new owner is the zero address\");\r\n        _setOwner(newOwner);\r\n    }\r\n\r\n    function _setOwner(address newOwner) private {\r\n        address oldOwner = _owner;\r\n        _owner = newOwner;\r\n        emit OwnershipTransferred(oldOwner, newOwner);\r\n    }\r\n}\r\n\r\n\r\n// File contracts/comics/ACDrop.sol\r\n\r\n\r\npragma solidity ^0.8.0;\r\n\r\ninterface ACMint {\r\n  function mint(\r\n    address to,\r\n    uint256 tokenId\r\n  )\r\n    external;\r\n}\r\n\r\ncontract ACDrop is Ownable {\r\n\r\n  /**\r\n   * @dev Time when the drop starts\r\n   */\r\n  uint256 public dropStart;\r\n  /**\r\n   * @dev Address of Aradena comics smart contract.\r\n   */\r\n  ACMint public ACaddress;\r\n\r\n  /**\r\n   * @dev AC token ids.\r\n   */\r\n  uint256 public nextId;\r\n\r\n  /**\r\n   * @dev AC token maxId (Total supply is  maxId - nextId + 1).\r\n   */\r\n  uint256 public maxId;\r\n\r\n  /**\r\n   * @dev Used wallets - one mint per wallet.\r\n   */\r\n  mapping(address => bool) usedWallets;\r\n\r\n  /**\r\n   * @dev If drop is paused or not.\r\n   */\r\n  bool public isPaused = false;\r\n\r\n  /**\r\n   * @dev Price per token.\r\n   */\r\n  uint256 public price; // 0.1 ETH\r\n\r\n  /**\r\n   * @dev Amount of reserved tokens.\r\n   */\r\n  uint16 public reserve;\r\n\r\n  /**\r\n   * @dev Sets default variables.\r\n   * @param _ACaddress Address of aradena comic smart contract.\r\n   * @param _dropStart Unix timestamp (in seconds) from which the drop will be available.\r\n   * @param _nextId First id in AC comics that does not yet exist.\r\n   * @param _maxId Max id of AC comics that this drop can create.\r\n   * @param _price Price per token.\r\n   * @param _reserve Amount of tokens reserved.\r\n   */\r\n  constructor(\r\n    address _ACaddress,\r\n    uint256 _dropStart,\r\n    uint256 _nextId, \r\n    uint256 _maxId,\r\n    uint256 _price,\r\n    uint16 _reserve\r\n  ) {\r\n    ACaddress = ACMint(_ACaddress);\r\n    dropStart = _dropStart;\r\n    nextId = _nextId;\r\n    maxId = _maxId;\r\n    price = _price;\r\n    reserve = _reserve;\r\n  }\r\n\r\n  /**\r\n   * @dev Mint tokens reserved for owner.\r\n   * @param _quantity Amount of reserve tokens to mint.\r\n   * @param _receiver Receiver of the tokens.\r\n   */\r\n  function mintReserve(\r\n    uint16 _quantity,\r\n    address _receiver\r\n  )\r\n    external\r\n    onlyOwner\r\n  {\r\n    require(_quantity <= reserve, \"The quantity exceeds the reserve.\");\r\n    reserve -= _quantity;\r\n    for (uint i = 0; i < _quantity; i++) {\r\n      ACaddress.mint(_receiver, nextId);\r\n      nextId++;\r\n    }\r\n  } \r\n\r\n  /**\r\n   * @dev Buys an aradena comic NFT.\r\n   */\r\n  function mint()\r\n    public\r\n    payable\r\n  {\r\n    require(block.timestamp >= dropStart, \"Drop not yet available.\");\r\n    require(!usedWallets[msg.sender], \"Wallet already used.\");\r\n    require(!isPaused, \"Drop is not active.\");\r\n    require(nextId <= maxId - reserve, \"Drop is sold out.\");\r\n    require(price == msg.value, \"Sent ether value is incorrect.\");\r\n\r\n    usedWallets[msg.sender] = true;\r\n    ACaddress.mint(msg.sender, nextId);\r\n    nextId++;\r\n  }\r\n\r\n  /**\r\n   * @dev Changes pause state.\r\n   */\r\n  function flipPauseStatus()\r\n    external\r\n    onlyOwner\r\n  {\r\n    isPaused = !isPaused;\r\n  }\r\n\r\n  /**\r\n   * Default for sending eth.\r\n   */\r\n  receive()\r\n    external\r\n    payable\r\n  {\r\n    mint();\r\n  }\r\n\r\n  /**\r\n   * @dev Withdraws eth.\r\n   */\r\n  function withdraw()\r\n    external\r\n    onlyOwner\r\n  {\r\n    uint balance = address(this).balance;\r\n    payable(msg.sender).transfer(balance);\r\n  }\r\n}","ABI":"[{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_ACaddress\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_dropStart\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_nextId\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_maxId\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_price\",\"type\":\"uint256\"},{\"internalType\":\"uint16\",\"name\":\"_reserve\",\"type\":\"uint16\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"ACaddress\",\"outputs\":[{\"internalType\":\"contract ACMint\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"dropStart\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"flipPauseStatus\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"isPaused\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"maxId\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"mint\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint16\",\"name\":\"_quantity\",\"type\":\"uint16\"},{\"internalType\":\"address\",\"name\":\"_receiver\",\"type\":\"address\"}],\"name\":\"mintReserve\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"nextId\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"price\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"reserve\",\"outputs\":[{\"internalType\":\"uint16\",\"name\":\"\",\"type\":\"uint16\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"withdraw\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"stateMutability\":\"payable\",\"type\":\"receive\"}]","ContractName":"ACDrop","CompilerVersion":"v0.8.9+commit.e5eed63a","OptimizationUsed":"0","Runs":"200","ConstructorArguments":"000000000000000000000000e644fa2b37013754168d372258dfcf503f3263140000000000000000000000000000000000000000000000000000000061a7f06000000000000000000000000000000000000000000000000000000000000000010000000000000000000000000000000000000000000000000000000000000064000000000000000000000000000000000000000000000000016345785d8a0000000000000000000000000000000000000000000000000000000000000000000a","EVMVersion":"Default","Library":"","LicenseType":"MIT","Proxy":"0","Implementation":"","SwarmSource":"ipfs://a452b96fa620385dc9032722bc56be0d94a448d2b83be18721456dafa0c1d83e"}]}