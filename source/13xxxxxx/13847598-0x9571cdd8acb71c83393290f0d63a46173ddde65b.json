{"status":"1","message":"OK","result":[{"SourceCode":"{{\r\n  \"language\": \"Solidity\",\r\n  \"sources\": {\r\n    \"contracts/tokenStaking/privateSale/PrivateSaleWithFeeSharing.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.0;\\n\\nimport {Ownable} from \\\"@openzeppelin/contracts/access/Ownable.sol\\\";\\nimport {ReentrancyGuard} from \\\"@openzeppelin/contracts/security/ReentrancyGuard.sol\\\";\\nimport {IERC20, SafeERC20} from \\\"@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol\\\";\\n\\n/**\\n * @title PrivateSaleWithFeeSharing\\n * @notice It handles the private sale for LOOKS tokens (against ETH) and the fee-sharing\\n * mechanism for sale participants. It uses a 3-tier system with different\\n * costs (in ETH) to participate. The exchange rate is expressed as the price of 1 ETH in LOOKS token.\\n * It is the same for all three tiers.\\n */\\ncontract PrivateSaleWithFeeSharing is Ownable, ReentrancyGuard {\\n    using SafeERC20 for IERC20;\\n\\n    enum SalePhase {\\n        Pending, // Pending (owner sets up parameters)\\n        Deposit, // Deposit (sale is in progress)\\n        Over, // Sale is over, prior to staking\\n        Staking, // Staking starts\\n        Withdraw // Withdraw opens\\n    }\\n\\n    struct UserInfo {\\n        uint256 rewardsDistributedToAccount; // reward claimed by the sale participant\\n        uint8 tier; // sale tier (e.g., 1/2/3)\\n        bool hasDeposited; // whether the user has participated\\n        bool hasWithdrawn; // whether the user has withdrawn (after the end of the fee-sharing period)\\n    }\\n\\n    // Number of eligible tiers in the private sale\\n    uint8 public constant NUMBER_TIERS = 3;\\n\\n    IERC20 public immutable looksRareToken;\\n\\n    IERC20 public immutable rewardToken;\\n\\n    // Maximum blocks for withdrawal\\n    uint256 public immutable MAX_BLOCK_FOR_WITHDRAWAL;\\n\\n    // Total LOOKS expected to be distributed\\n    uint256 public immutable TOTAL_LOOKS_DISTRIBUTED;\\n\\n    // Current sale phase (uint8)\\n    SalePhase public currentPhase;\\n\\n    // Block where participants can withdraw the LOOKS tokens\\n    uint256 public blockForWithdrawal;\\n\\n    // Price of WETH in LOOKS for the sale\\n    uint256 public priceOfETHInLOOKS;\\n\\n    // Total amount committed in the sale (in ETH)\\n    uint256 public totalAmountCommitted;\\n\\n    // Total reward tokens (i.e., WETH) distributed across stakers\\n    uint256 public totalRewardTokensDistributedToStakers;\\n\\n    // Keeps track of the cost to join the sale for a given tier\\n    mapping(uint8 => uint256) public allocationCostPerTier;\\n\\n    // Keeps track of the number of whitelisted participants for each tier\\n    mapping(uint8 => uint256) public numberOfParticipantsForATier;\\n\\n    // Keeps track of user information (e.g., tier, amount collected, participation)\\n    mapping(address => UserInfo) public userInfo;\\n\\n    event Deposit(address indexed user, uint8 tier);\\n    event Harvest(address indexed user, uint256 amount);\\n    event NewSalePhase(SalePhase newSalePhase);\\n    event NewAllocationCostPerTier(uint8 tier, uint256 allocationCostInETH);\\n    event NewBlockForWithdrawal(uint256 blockForWithdrawal);\\n    event NewPriceOfETHInLOOKS(uint256 price);\\n    event UsersWhitelisted(address[] users, uint8 tier);\\n    event UserRemoved(address user);\\n    event Withdraw(address indexed user, uint8 tier, uint256 amount);\\n\\n    /**\\n     * @notice Constructor\\n     * @param _looksRareToken address of the LOOKS token\\n     * @param _rewardToken address of the reward token\\n     * @param _maxBlockForWithdrawal maximum block for withdrawal\\n     * @param _totalLooksDistributed total number of LOOKS tokens to distribute\\n     */\\n    constructor(\\n        address _looksRareToken,\\n        address _rewardToken,\\n        uint256 _maxBlockForWithdrawal,\\n        uint256 _totalLooksDistributed\\n    ) {\\n        require(_maxBlockForWithdrawal > block.number, \\\"Owner: MaxBlockForWithdrawal must be after block number\\\");\\n\\n        looksRareToken = IERC20(_looksRareToken);\\n        rewardToken = IERC20(_rewardToken);\\n        blockForWithdrawal = _maxBlockForWithdrawal;\\n\\n        MAX_BLOCK_FOR_WITHDRAWAL = _maxBlockForWithdrawal;\\n        TOTAL_LOOKS_DISTRIBUTED = _totalLooksDistributed;\\n    }\\n\\n    /**\\n     * @notice Deposit ETH to this contract\\n     */\\n    function deposit() external payable nonReentrant {\\n        require(currentPhase == SalePhase.Deposit, \\\"Deposit: Phase must be Deposit\\\");\\n        require(userInfo[msg.sender].tier != 0, \\\"Deposit: Not whitelisted\\\");\\n        require(!userInfo[msg.sender].hasDeposited, \\\"Deposit: Has deposited\\\");\\n        require(msg.value == allocationCostPerTier[userInfo[msg.sender].tier], \\\"Deposit: Wrong amount\\\");\\n\\n        userInfo[msg.sender].hasDeposited = true;\\n        totalAmountCommitted += msg.value;\\n\\n        emit Deposit(msg.sender, userInfo[msg.sender].tier);\\n    }\\n\\n    /**\\n     * @notice Harvest WETH\\n     */\\n    function harvest() external nonReentrant {\\n        require(currentPhase == SalePhase.Staking, \\\"Harvest: Phase must be Staking\\\");\\n        require(userInfo[msg.sender].hasDeposited, \\\"Harvest: User not eligible\\\");\\n\\n        uint256 totalTokensReceived = rewardToken.balanceOf(address(this)) + totalRewardTokensDistributedToStakers;\\n\\n        uint256 pendingRewardsInWETH = ((totalTokensReceived * allocationCostPerTier[userInfo[msg.sender].tier]) /\\n            totalAmountCommitted) - userInfo[msg.sender].rewardsDistributedToAccount;\\n\\n        // Revert if amount to transfer is equal to 0\\n        require(pendingRewardsInWETH != 0, \\\"Harvest: Nothing to transfer\\\");\\n\\n        userInfo[msg.sender].rewardsDistributedToAccount += pendingRewardsInWETH;\\n        totalRewardTokensDistributedToStakers += pendingRewardsInWETH;\\n\\n        // Transfer funds to account\\n        rewardToken.safeTransfer(msg.sender, pendingRewardsInWETH);\\n\\n        emit Harvest(msg.sender, pendingRewardsInWETH);\\n    }\\n\\n    /**\\n     * @notice Withdraw LOOKS + pending WETH\\n     */\\n    function withdraw() external nonReentrant {\\n        require(currentPhase == SalePhase.Withdraw, \\\"Withdraw: Phase must be Withdraw\\\");\\n        require(userInfo[msg.sender].hasDeposited, \\\"Withdraw: User not eligible\\\");\\n        require(!userInfo[msg.sender].hasWithdrawn, \\\"Withdraw: Has already withdrawn\\\");\\n\\n        // Final harvest logic\\n        {\\n            uint256 totalTokensReceived = rewardToken.balanceOf(address(this)) + totalRewardTokensDistributedToStakers;\\n            uint256 pendingRewardsInWETH = ((totalTokensReceived * allocationCostPerTier[userInfo[msg.sender].tier]) /\\n                totalAmountCommitted) - userInfo[msg.sender].rewardsDistributedToAccount;\\n\\n            // Skip if equal to 0\\n            if (pendingRewardsInWETH > 0) {\\n                userInfo[msg.sender].rewardsDistributedToAccount += pendingRewardsInWETH;\\n                totalRewardTokensDistributedToStakers += pendingRewardsInWETH;\\n\\n                // Transfer funds to sender\\n                rewardToken.safeTransfer(msg.sender, pendingRewardsInWETH);\\n\\n                emit Harvest(msg.sender, pendingRewardsInWETH);\\n            }\\n        }\\n\\n        // Update status to withdrawn\\n        userInfo[msg.sender].hasWithdrawn = true;\\n\\n        // Calculate amount of LOOKS to transfer based on the tier\\n        uint256 looksAmountToTransfer = allocationCostPerTier[userInfo[msg.sender].tier] * priceOfETHInLOOKS;\\n\\n        // Transfer LOOKS token to sender\\n        looksRareToken.safeTransfer(msg.sender, looksAmountToTransfer);\\n\\n        emit Withdraw(msg.sender, userInfo[msg.sender].tier, looksAmountToTransfer);\\n    }\\n\\n    /**\\n     * @notice Update sale phase to withdraw after the sale lock has passed.\\n     * It can called by anyone.\\n     */\\n    function updateSalePhaseToWithdraw() external {\\n        require(currentPhase == SalePhase.Staking, \\\"Phase: Must be Staking\\\");\\n        require(block.number >= blockForWithdrawal, \\\"Phase: Too early to update sale status\\\");\\n\\n        // Update phase to Withdraw\\n        currentPhase = SalePhase.Withdraw;\\n\\n        emit NewSalePhase(SalePhase.Withdraw);\\n    }\\n\\n    /**\\n     * @notice Remove a user from the whitelist\\n     * @param _user address of the user\\n     */\\n    function removeUserFromWhitelist(address _user) external onlyOwner {\\n        require(currentPhase == SalePhase.Pending, \\\"Owner: Phase must be Pending\\\");\\n        require(userInfo[_user].tier != 0, \\\"Owner: Tier not set for user\\\");\\n\\n        numberOfParticipantsForATier[userInfo[_user].tier]--;\\n        userInfo[_user].tier = 0;\\n\\n        emit UserRemoved(_user);\\n    }\\n\\n    /**\\n     * @notice Set allocation per tier\\n     * @param _tier tier of sale\\n     * @param _allocationCostInETH allocation in ETH for the tier\\n     */\\n    function setAllocationCostPerTier(uint8 _tier, uint256 _allocationCostInETH) external onlyOwner {\\n        require(currentPhase == SalePhase.Pending, \\\"Owner: Phase must be Pending\\\");\\n        require(_tier > 0 && _tier <= NUMBER_TIERS, \\\"Owner: Tier outside of range\\\");\\n\\n        allocationCostPerTier[_tier] = _allocationCostInETH;\\n\\n        emit NewAllocationCostPerTier(_tier, _allocationCostInETH);\\n    }\\n\\n    /**\\n     * @notice Update block deadline for withdrawal of LOOKS\\n     * @param _blockForWithdrawal block for withdrawing LOOKS for sale participants\\n     */\\n    function setBlockForWithdrawal(uint256 _blockForWithdrawal) external onlyOwner {\\n        require(\\n            _blockForWithdrawal <= MAX_BLOCK_FOR_WITHDRAWAL,\\n            \\\"Owner: Block for withdrawal must be lower than max block for withdrawal\\\"\\n        );\\n\\n        blockForWithdrawal = _blockForWithdrawal;\\n\\n        emit NewBlockForWithdrawal(_blockForWithdrawal);\\n    }\\n\\n    /**\\n     * @notice Set price of 1 ETH in LOOKS\\n     * @param _priceOfETHinLOOKS price of 1 ETH in LOOKS\\n     */\\n    function setPriceOfETHInLOOKS(uint256 _priceOfETHinLOOKS) external onlyOwner {\\n        require(currentPhase == SalePhase.Pending, \\\"Owner: Phase must be Pending\\\");\\n        priceOfETHInLOOKS = _priceOfETHinLOOKS;\\n\\n        emit NewPriceOfETHInLOOKS(_priceOfETHinLOOKS);\\n    }\\n\\n    /**\\n     * @notice Update sale phase for the first two phases\\n     * @param _newSalePhase SalePhase (uint8)\\n     */\\n    function updateSalePhase(SalePhase _newSalePhase) external onlyOwner {\\n        if (_newSalePhase == SalePhase.Deposit) {\\n            require(currentPhase == SalePhase.Pending, \\\"Owner: Phase must be Pending\\\");\\n\\n            // Risk checks\\n            require(priceOfETHInLOOKS > 0, \\\"Owner: Exchange rate must be > 0\\\");\\n            require(getMaxAmountLOOKSToDistribute() == TOTAL_LOOKS_DISTRIBUTED, \\\"Owner: Wrong amount of LOOKS\\\");\\n            require(\\n                looksRareToken.balanceOf(address(this)) >= TOTAL_LOOKS_DISTRIBUTED,\\n                \\\"Owner: Not enough LOOKS in the contract\\\"\\n            );\\n            require(blockForWithdrawal > block.number, \\\"Owner: Block for withdrawal wrongly set\\\");\\n        } else if (_newSalePhase == SalePhase.Over) {\\n            require(currentPhase == SalePhase.Deposit, \\\"Owner: Phase must be Deposit\\\");\\n        } else {\\n            revert(\\\"Owner: Cannot update to this phase\\\");\\n        }\\n\\n        // Update phase to the new sale phase\\n        currentPhase = _newSalePhase;\\n\\n        emit NewSalePhase(_newSalePhase);\\n    }\\n\\n    /**\\n     * @notice Withdraw the total commited amount (in ETH) and any LOOKS surplus.\\n     * It also updates the sale phase to Staking phase.\\n     */\\n    function withdrawCommittedAmount() external onlyOwner nonReentrant {\\n        require(currentPhase == SalePhase.Over, \\\"Owner: Phase must be Over\\\");\\n\\n        // Transfer ETH to the owner\\n        (bool success, ) = msg.sender.call{value: totalAmountCommitted}(\\\"\\\");\\n        require(success, \\\"Owner: Transfer fail\\\");\\n\\n        // If some tiered users did not participate, transfer the LOOKS surplus to contract owner\\n        if (totalAmountCommitted * priceOfETHInLOOKS < (TOTAL_LOOKS_DISTRIBUTED)) {\\n            uint256 tokenAmountToReturnInLOOKS = TOTAL_LOOKS_DISTRIBUTED - (totalAmountCommitted * priceOfETHInLOOKS);\\n            looksRareToken.safeTransfer(msg.sender, tokenAmountToReturnInLOOKS);\\n        }\\n\\n        // Update phase status to Staking\\n        currentPhase = SalePhase.Staking;\\n\\n        emit NewSalePhase(SalePhase.Staking);\\n    }\\n\\n    /**\\n     * @notice Whitelist a list of user addresses for a given tier\\n     * It updates the sale phase to staking phase.\\n     * @param _users array of user addresses\\n     * @param _tier tier for the array of users\\n     */\\n    function whitelistUsers(address[] calldata _users, uint8 _tier) external onlyOwner {\\n        require(currentPhase == SalePhase.Pending, \\\"Owner: Phase must be Pending\\\");\\n        require(_tier > 0 && _tier <= NUMBER_TIERS, \\\"Owner: Tier outside of range\\\");\\n\\n        for (uint256 i = 0; i < _users.length; i++) {\\n            require(userInfo[_users[i]].tier == 0, \\\"Owner: Tier already set\\\");\\n            userInfo[_users[i]].tier = _tier;\\n        }\\n\\n        // Adjust count of participants for the given tier\\n        numberOfParticipantsForATier[_tier] += _users.length;\\n\\n        emit UsersWhitelisted(_users, _tier);\\n    }\\n\\n    /**\\n     * @notice Retrieve amount of reward token (WETH) a user can collect\\n     * @param user address of the user who participated in the private sale\\n     */\\n    function calculatePendingRewards(address user) external view returns (uint256) {\\n        if (userInfo[user].hasDeposited == false || userInfo[user].hasWithdrawn) {\\n            return 0;\\n        }\\n\\n        uint256 totalTokensReceived = rewardToken.balanceOf(address(this)) + totalRewardTokensDistributedToStakers;\\n        uint256 pendingRewardsInWETH = ((totalTokensReceived * allocationCostPerTier[userInfo[user].tier]) /\\n            totalAmountCommitted) - userInfo[user].rewardsDistributedToAccount;\\n\\n        return pendingRewardsInWETH;\\n    }\\n\\n    /**\\n     * @notice Retrieve max amount to distribute (in LOOKS) for sale\\n     */\\n    function getMaxAmountLOOKSToDistribute() public view returns (uint256 maxAmountCollected) {\\n        for (uint8 i = 1; i <= NUMBER_TIERS; i++) {\\n            maxAmountCollected += (allocationCostPerTier[i] * numberOfParticipantsForATier[i]);\\n        }\\n\\n        return maxAmountCollected * priceOfETHInLOOKS;\\n    }\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/access/Ownable.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (access/Ownable.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../utils/Context.sol\\\";\\n\\n/**\\n * @dev Contract module which provides a basic access control mechanism, where\\n * there is an account (an owner) that can be granted exclusive access to\\n * specific functions.\\n *\\n * By default, the owner account will be the one that deploys the contract. This\\n * can later be changed with {transferOwnership}.\\n *\\n * This module is used through inheritance. It will make available the modifier\\n * `onlyOwner`, which can be applied to your functions to restrict their use to\\n * the owner.\\n */\\nabstract contract Ownable is Context {\\n    address private _owner;\\n\\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\\n\\n    /**\\n     * @dev Initializes the contract setting the deployer as the initial owner.\\n     */\\n    constructor() {\\n        _transferOwnership(_msgSender());\\n    }\\n\\n    /**\\n     * @dev Returns the address of the current owner.\\n     */\\n    function owner() public view virtual returns (address) {\\n        return _owner;\\n    }\\n\\n    /**\\n     * @dev Throws if called by any account other than the owner.\\n     */\\n    modifier onlyOwner() {\\n        require(owner() == _msgSender(), \\\"Ownable: caller is not the owner\\\");\\n        _;\\n    }\\n\\n    /**\\n     * @dev Leaves the contract without owner. It will not be possible to call\\n     * `onlyOwner` functions anymore. Can only be called by the current owner.\\n     *\\n     * NOTE: Renouncing ownership will leave the contract without an owner,\\n     * thereby removing any functionality that is only available to the owner.\\n     */\\n    function renounceOwnership() public virtual onlyOwner {\\n        _transferOwnership(address(0));\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Can only be called by the current owner.\\n     */\\n    function transferOwnership(address newOwner) public virtual onlyOwner {\\n        require(newOwner != address(0), \\\"Ownable: new owner is the zero address\\\");\\n        _transferOwnership(newOwner);\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Internal function without access restriction.\\n     */\\n    function _transferOwnership(address newOwner) internal virtual {\\n        address oldOwner = _owner;\\n        _owner = newOwner;\\n        emit OwnershipTransferred(oldOwner, newOwner);\\n    }\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/security/ReentrancyGuard.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (security/ReentrancyGuard.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Contract module that helps prevent reentrant calls to a function.\\n *\\n * Inheriting from `ReentrancyGuard` will make the {nonReentrant} modifier\\n * available, which can be applied to functions to make sure there are no nested\\n * (reentrant) calls to them.\\n *\\n * Note that because there is a single `nonReentrant` guard, functions marked as\\n * `nonReentrant` may not call one another. This can be worked around by making\\n * those functions `private`, and then adding `external` `nonReentrant` entry\\n * points to them.\\n *\\n * TIP: If you would like to learn more about reentrancy and alternative ways\\n * to protect against it, check out our blog post\\n * https://blog.openzeppelin.com/reentrancy-after-istanbul/[Reentrancy After Istanbul].\\n */\\nabstract contract ReentrancyGuard {\\n    // Booleans are more expensive than uint256 or any type that takes up a full\\n    // word because each write operation emits an extra SLOAD to first read the\\n    // slot's contents, replace the bits taken up by the boolean, and then write\\n    // back. This is the compiler's defense against contract upgrades and\\n    // pointer aliasing, and it cannot be disabled.\\n\\n    // The values being non-zero value makes deployment a bit more expensive,\\n    // but in exchange the refund on every call to nonReentrant will be lower in\\n    // amount. Since refunds are capped to a percentage of the total\\n    // transaction's gas, it is best to keep them low in cases like this one, to\\n    // increase the likelihood of the full refund coming into effect.\\n    uint256 private constant _NOT_ENTERED = 1;\\n    uint256 private constant _ENTERED = 2;\\n\\n    uint256 private _status;\\n\\n    constructor() {\\n        _status = _NOT_ENTERED;\\n    }\\n\\n    /**\\n     * @dev Prevents a contract from calling itself, directly or indirectly.\\n     * Calling a `nonReentrant` function from another `nonReentrant`\\n     * function is not supported. It is possible to prevent this from happening\\n     * by making the `nonReentrant` function external, and making it call a\\n     * `private` function that does the actual work.\\n     */\\n    modifier nonReentrant() {\\n        // On the first call to nonReentrant, _notEntered will be true\\n        require(_status != _ENTERED, \\\"ReentrancyGuard: reentrant call\\\");\\n\\n        // Any calls to nonReentrant after this point will fail\\n        _status = _ENTERED;\\n\\n        _;\\n\\n        // By storing the original value once again, a refund is triggered (see\\n        // https://eips.ethereum.org/EIPS/eip-2200)\\n        _status = _NOT_ENTERED;\\n    }\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (token/ERC20/utils/SafeERC20.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../IERC20.sol\\\";\\nimport \\\"../../../utils/Address.sol\\\";\\n\\n/**\\n * @title SafeERC20\\n * @dev Wrappers around ERC20 operations that throw on failure (when the token\\n * contract returns false). Tokens that return no value (and instead revert or\\n * throw on failure) are also supported, non-reverting calls are assumed to be\\n * successful.\\n * To use this library you can add a `using SafeERC20 for IERC20;` statement to your contract,\\n * which allows you to call the safe operations as `token.safeTransfer(...)`, etc.\\n */\\nlibrary SafeERC20 {\\n    using Address for address;\\n\\n    function safeTransfer(\\n        IERC20 token,\\n        address to,\\n        uint256 value\\n    ) internal {\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.transfer.selector, to, value));\\n    }\\n\\n    function safeTransferFrom(\\n        IERC20 token,\\n        address from,\\n        address to,\\n        uint256 value\\n    ) internal {\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.transferFrom.selector, from, to, value));\\n    }\\n\\n    /**\\n     * @dev Deprecated. This function has issues similar to the ones found in\\n     * {IERC20-approve}, and its usage is discouraged.\\n     *\\n     * Whenever possible, use {safeIncreaseAllowance} and\\n     * {safeDecreaseAllowance} instead.\\n     */\\n    function safeApprove(\\n        IERC20 token,\\n        address spender,\\n        uint256 value\\n    ) internal {\\n        // safeApprove should only be called when setting an initial allowance,\\n        // or when resetting it to zero. To increase and decrease it, use\\n        // 'safeIncreaseAllowance' and 'safeDecreaseAllowance'\\n        require(\\n            (value == 0) || (token.allowance(address(this), spender) == 0),\\n            \\\"SafeERC20: approve from non-zero to non-zero allowance\\\"\\n        );\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, value));\\n    }\\n\\n    function safeIncreaseAllowance(\\n        IERC20 token,\\n        address spender,\\n        uint256 value\\n    ) internal {\\n        uint256 newAllowance = token.allowance(address(this), spender) + value;\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));\\n    }\\n\\n    function safeDecreaseAllowance(\\n        IERC20 token,\\n        address spender,\\n        uint256 value\\n    ) internal {\\n        unchecked {\\n            uint256 oldAllowance = token.allowance(address(this), spender);\\n            require(oldAllowance >= value, \\\"SafeERC20: decreased allowance below zero\\\");\\n            uint256 newAllowance = oldAllowance - value;\\n            _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));\\n        }\\n    }\\n\\n    /**\\n     * @dev Imitates a Solidity high-level call (i.e. a regular function call to a contract), relaxing the requirement\\n     * on the return value: the return value is optional (but if data is returned, it must not be false).\\n     * @param token The token targeted by the call.\\n     * @param data The call data (encoded using abi.encode or one of its variants).\\n     */\\n    function _callOptionalReturn(IERC20 token, bytes memory data) private {\\n        // We need to perform a low level call here, to bypass Solidity's return data size checking mechanism, since\\n        // we're implementing it ourselves. We use {Address.functionCall} to perform this call, which verifies that\\n        // the target address contains contract code and also asserts for success in the low-level call.\\n\\n        bytes memory returndata = address(token).functionCall(data, \\\"SafeERC20: low-level call failed\\\");\\n        if (returndata.length > 0) {\\n            // Return data is optional\\n            require(abi.decode(returndata, (bool)), \\\"SafeERC20: ERC20 operation did not succeed\\\");\\n        }\\n    }\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/utils/Context.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/Context.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Provides information about the current execution context, including the\\n * sender of the transaction and its data. While these are generally available\\n * via msg.sender and msg.data, they should not be accessed in such a direct\\n * manner, since when dealing with meta-transactions the account sending and\\n * paying for execution may not be the actual sender (as far as an application\\n * is concerned).\\n *\\n * This contract is only required for intermediate, library-like contracts.\\n */\\nabstract contract Context {\\n    function _msgSender() internal view virtual returns (address) {\\n        return msg.sender;\\n    }\\n\\n    function _msgData() internal view virtual returns (bytes calldata) {\\n        return msg.data;\\n    }\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/token/ERC20/IERC20.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (token/ERC20/IERC20.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC20 standard as defined in the EIP.\\n */\\ninterface IERC20 {\\n    /**\\n     * @dev Returns the amount of tokens in existence.\\n     */\\n    function totalSupply() external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the amount of tokens owned by `account`.\\n     */\\n    function balanceOf(address account) external view returns (uint256);\\n\\n    /**\\n     * @dev Moves `amount` tokens from the caller's account to `recipient`.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transfer(address recipient, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Returns the remaining number of tokens that `spender` will be\\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\\n     * zero by default.\\n     *\\n     * This value changes when {approve} or {transferFrom} are called.\\n     */\\n    function allowance(address owner, address spender) external view returns (uint256);\\n\\n    /**\\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\\n     * that someone may use both the old and the new allowance by unfortunate\\n     * transaction ordering. One possible solution to mitigate this race\\n     * condition is to first reduce the spender's allowance to 0 and set the\\n     * desired value afterwards:\\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address spender, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Moves `amount` tokens from `sender` to `recipient` using the\\n     * allowance mechanism. `amount` is then deducted from the caller's\\n     * allowance.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(\\n        address sender,\\n        address recipient,\\n        uint256 amount\\n    ) external returns (bool);\\n\\n    /**\\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\\n     * another (`to`).\\n     *\\n     * Note that `value` may be zero.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 value);\\n\\n    /**\\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\\n     * a call to {approve}. `value` is the new allowance.\\n     */\\n    event Approval(address indexed owner, address indexed spender, uint256 value);\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/utils/Address.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/Address.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Collection of functions related to the address type\\n */\\nlibrary Address {\\n    /**\\n     * @dev Returns true if `account` is a contract.\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * It is unsafe to assume that an address for which this function returns\\n     * false is an externally-owned account (EOA) and not a contract.\\n     *\\n     * Among others, `isContract` will return false for the following\\n     * types of addresses:\\n     *\\n     *  - an externally-owned account\\n     *  - a contract in construction\\n     *  - an address where a contract will be created\\n     *  - an address where a contract lived, but was destroyed\\n     * ====\\n     */\\n    function isContract(address account) internal view returns (bool) {\\n        // This method relies on extcodesize, which returns 0 for contracts in\\n        // construction, since the code is only stored at the end of the\\n        // constructor execution.\\n\\n        uint256 size;\\n        assembly {\\n            size := extcodesize(account)\\n        }\\n        return size > 0;\\n    }\\n\\n    /**\\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\\n     * `recipient`, forwarding all available gas and reverting on errors.\\n     *\\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\\n     * imposed by `transfer`, making them unable to receive funds via\\n     * `transfer`. {sendValue} removes this limitation.\\n     *\\n     * https://diligence.consensys.net/posts/2019/09/stop-using-soliditys-transfer-now/[Learn more].\\n     *\\n     * IMPORTANT: because control is transferred to `recipient`, care must be\\n     * taken to not create reentrancy vulnerabilities. Consider using\\n     * {ReentrancyGuard} or the\\n     * https://solidity.readthedocs.io/en/v0.5.11/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\\n     */\\n    function sendValue(address payable recipient, uint256 amount) internal {\\n        require(address(this).balance >= amount, \\\"Address: insufficient balance\\\");\\n\\n        (bool success, ) = recipient.call{value: amount}(\\\"\\\");\\n        require(success, \\\"Address: unable to send value, recipient may have reverted\\\");\\n    }\\n\\n    /**\\n     * @dev Performs a Solidity function call using a low level `call`. A\\n     * plain `call` is an unsafe replacement for a function call: use this\\n     * function instead.\\n     *\\n     * If `target` reverts with a revert reason, it is bubbled up by this\\n     * function (like regular Solidity function calls).\\n     *\\n     * Returns the raw returned data. To convert to the expected return value,\\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\\n     *\\n     * Requirements:\\n     *\\n     * - `target` must be a contract.\\n     * - calling `target` with `data` must not revert.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionCall(target, data, \\\"Address: low-level call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\\n     * `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, 0, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but also transferring `value` wei to `target`.\\n     *\\n     * Requirements:\\n     *\\n     * - the calling contract must have an ETH balance of at least `value`.\\n     * - the called Solidity function must be `payable`.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, value, \\\"Address: low-level call with value failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\\n     * with `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        require(address(this).balance >= value, \\\"Address: insufficient balance for call\\\");\\n        require(isContract(target), \\\"Address: call to non-contract\\\");\\n\\n        (bool success, bytes memory returndata) = target.call{value: value}(data);\\n        return verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\\n        return functionStaticCall(target, data, \\\"Address: low-level static call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal view returns (bytes memory) {\\n        require(isContract(target), \\\"Address: static call to non-contract\\\");\\n\\n        (bool success, bytes memory returndata) = target.staticcall(data);\\n        return verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionDelegateCall(target, data, \\\"Address: low-level delegate call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        require(isContract(target), \\\"Address: delegate call to non-contract\\\");\\n\\n        (bool success, bytes memory returndata) = target.delegatecall(data);\\n        return verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Tool to verifies that a low level call was successful, and revert if it wasn't, either by bubbling the\\n     * revert reason using the provided one.\\n     *\\n     * _Available since v4.3._\\n     */\\n    function verifyCallResult(\\n        bool success,\\n        bytes memory returndata,\\n        string memory errorMessage\\n    ) internal pure returns (bytes memory) {\\n        if (success) {\\n            return returndata;\\n        } else {\\n            // Look for revert reason and bubble it up if present\\n            if (returndata.length > 0) {\\n                // The easiest way to bubble the revert reason is using memory via assembly\\n\\n                assembly {\\n                    let returndata_size := mload(returndata)\\n                    revert(add(32, returndata), returndata_size)\\n                }\\n            } else {\\n                revert(errorMessage);\\n            }\\n        }\\n    }\\n}\\n\"\r\n    }\r\n  },\r\n  \"settings\": {\r\n    \"optimizer\": {\r\n      \"enabled\": true,\r\n      \"runs\": 888888\r\n    },\r\n    \"outputSelection\": {\r\n      \"*\": {\r\n        \"*\": [\r\n          \"evm.bytecode\",\r\n          \"evm.deployedBytecode\",\r\n          \"devdoc\",\r\n          \"userdoc\",\r\n          \"metadata\",\r\n          \"abi\"\r\n        ]\r\n      }\r\n    },\r\n    \"libraries\": {}\r\n  }\r\n}}","ABI":"[{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_looksRareToken\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_rewardToken\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_maxBlockForWithdrawal\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_totalLooksDistributed\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint8\",\"name\":\"tier\",\"type\":\"uint8\"}],\"name\":\"Deposit\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"Harvest\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint8\",\"name\":\"tier\",\"type\":\"uint8\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"allocationCostInETH\",\"type\":\"uint256\"}],\"name\":\"NewAllocationCostPerTier\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"blockForWithdrawal\",\"type\":\"uint256\"}],\"name\":\"NewBlockForWithdrawal\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"price\",\"type\":\"uint256\"}],\"name\":\"NewPriceOfETHInLOOKS\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"enum PrivateSaleWithFeeSharing.SalePhase\",\"name\":\"newSalePhase\",\"type\":\"uint8\"}],\"name\":\"NewSalePhase\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"}],\"name\":\"UserRemoved\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address[]\",\"name\":\"users\",\"type\":\"address[]\"},{\"indexed\":false,\"internalType\":\"uint8\",\"name\":\"tier\",\"type\":\"uint8\"}],\"name\":\"UsersWhitelisted\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint8\",\"name\":\"tier\",\"type\":\"uint8\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"Withdraw\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"MAX_BLOCK_FOR_WITHDRAWAL\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"NUMBER_TIERS\",\"outputs\":[{\"internalType\":\"uint8\",\"name\":\"\",\"type\":\"uint8\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"TOTAL_LOOKS_DISTRIBUTED\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint8\",\"name\":\"\",\"type\":\"uint8\"}],\"name\":\"allocationCostPerTier\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"blockForWithdrawal\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"}],\"name\":\"calculatePendingRewards\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"currentPhase\",\"outputs\":[{\"internalType\":\"enum PrivateSaleWithFeeSharing.SalePhase\",\"name\":\"\",\"type\":\"uint8\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"deposit\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getMaxAmountLOOKSToDistribute\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"maxAmountCollected\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"harvest\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"looksRareToken\",\"outputs\":[{\"internalType\":\"contract IERC20\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint8\",\"name\":\"\",\"type\":\"uint8\"}],\"name\":\"numberOfParticipantsForATier\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"priceOfETHInLOOKS\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_user\",\"type\":\"address\"}],\"name\":\"removeUserFromWhitelist\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"rewardToken\",\"outputs\":[{\"internalType\":\"contract IERC20\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint8\",\"name\":\"_tier\",\"type\":\"uint8\"},{\"internalType\":\"uint256\",\"name\":\"_allocationCostInETH\",\"type\":\"uint256\"}],\"name\":\"setAllocationCostPerTier\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_blockForWithdrawal\",\"type\":\"uint256\"}],\"name\":\"setBlockForWithdrawal\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_priceOfETHinLOOKS\",\"type\":\"uint256\"}],\"name\":\"setPriceOfETHInLOOKS\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalAmountCommitted\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalRewardTokensDistributedToStakers\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"enum PrivateSaleWithFeeSharing.SalePhase\",\"name\":\"_newSalePhase\",\"type\":\"uint8\"}],\"name\":\"updateSalePhase\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"updateSalePhaseToWithdraw\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"userInfo\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"rewardsDistributedToAccount\",\"type\":\"uint256\"},{\"internalType\":\"uint8\",\"name\":\"tier\",\"type\":\"uint8\"},{\"internalType\":\"bool\",\"name\":\"hasDeposited\",\"type\":\"bool\"},{\"internalType\":\"bool\",\"name\":\"hasWithdrawn\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address[]\",\"name\":\"_users\",\"type\":\"address[]\"},{\"internalType\":\"uint8\",\"name\":\"_tier\",\"type\":\"uint8\"}],\"name\":\"whitelistUsers\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"withdraw\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"withdrawCommittedAmount\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}]","ContractName":"PrivateSaleWithFeeSharing","CompilerVersion":"v0.8.7+commit.e28d00a7","OptimizationUsed":"1","Runs":"888888","ConstructorArguments":"000000000000000000000000f4d2888d29d722226fafa5d9b24f9164c092421e000000000000000000000000c02aaa39b223fe8d0a0e5c4f27ead9083c756cc20000000000000000000000000000000000000000000000000000000000e998c80000000000000000000000000000000000000000001b5d9928bd8a8a115a0000","EVMVersion":"Default","Library":"","LicenseType":"","Proxy":"0","Implementation":"","SwarmSource":""}]}