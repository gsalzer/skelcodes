{"status":"1","message":"OK","result":[{"SourceCode":"{{\r\n  \"language\": \"Solidity\",\r\n  \"sources\": {\r\n    \"contracts/sale/SipherNFTSale.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: agpl-3.0\\npragma solidity 0.8.4;\\n\\nimport {Address} from '@openzeppelin/contracts/utils/Address.sol';\\n\\nimport {ISipherNFT} from '../interfaces/ISipherNFT.sol';\\nimport {ISipherNFTSale} from '../interfaces/ISipherNFTSale.sol';\\nimport {Whitelist} from '../utils/Whitelist.sol';\\n\\n\\ncontract SipherNFTSale is ISipherNFTSale, Whitelist {\\n\\n  using Address for address;\\n\\n  // at initial launch, the owner can buy up to 500 tokens\\n  uint64 public constant MAX_OWNER_BOUGHT_INITIAL = 500;\\n  uint64 public constant CAP_PER_WHITELISTED_ADDRESS = 1;\\n  uint64 public constant CAP_PER_ADDRESS = 5;\\n  uint256 public constant SALE_PRICE = 10**17; // 0.1 ether\\n\\n  bytes32 public override merkleRoot; // store the merkle root data for verification purpose\\n\\n  ISipherNFT public immutable override nft;\\n  SaleRecord internal _saleRecord;\\n  SaleConfig internal _saleConfig;\\n  mapping (address => UserRecord) internal _userRecord;\\n\\n  event OwnerBought(address indexed buyer, uint256 amount, uint256 amountWeiPaid);\\n  event WhitelistBought(address indexed buyer, uint256 amount, uint256 amountWeiPaid);\\n  event PublicBought(address indexed buyer, uint256 amount, uint256 amountWeiPaid);\\n  event WithdrawSaleFunds(address indexed recipient, uint256 amount);\\n  event RollStartIndex(address indexed trigger);\\n  event UpdateSaleEndTime(uint64 endTime);\\n  event SetMerkleRoot(bytes32 merkelRoot);\\n\\n  constructor(\\n    ISipherNFT _nft,\\n    uint64 _whitelistTime,\\n    uint64 _publicTime,\\n    uint64 _endTime,\\n    uint64 _maxSupply,\\n    uint256 _maxWhitelistSize\\n  ) Whitelist(_maxWhitelistSize) {\\n    nft = _nft;\\n    _saleConfig = SaleConfig({\\n      whitelistTime: _whitelistTime,\\n      publicTime: _publicTime,\\n      endTime: _endTime,\\n      maxSupply: _maxSupply\\n    });\\n  }\\n\\n  function withdrawSaleFunds(address payable recipient, uint256 amount) external onlyOwner {\\n    (bool success, ) = recipient.call{ value: amount }('');\\n    require(success, 'SipherNFTSale: withdraw funds failed');\\n    emit WithdrawSaleFunds(recipient, amount);\\n  }\\n\\n  /**\\n   * @dev Allow owner to set the merkle root only once before whitelist buy time\\n   */\\n  function setMerkleRoot(bytes32 _root) external onlyOwner {\\n    require(\\n      _blockTimestamp() < _saleConfig.whitelistTime,\\n      'SipherNFTSale: only update before whitelist buy time'\\n    );\\n    require(_root != bytes32(0), 'SipherNFTSale: invalid root');\\n    require(merkleRoot == bytes32(0), 'SipherNFTSale: already set merkle root');\\n    merkleRoot = _root;\\n    emit SetMerkleRoot(_root);\\n  }\\n\\n  /**\\n   * @dev Buy amount of NFT tokens\\n   *   There are different caps for different users at different times\\n   *   The total sold tokens should be capped to maxSupply\\n   * @param amount amount of token to buy\\n   */\\n  function buy(uint64 amount) external payable override {\\n    address buyer = msg.sender;\\n    // only EOA or the owner can buy, disallow contracts to buy\\n    require(!buyer.isContract() || buyer == owner(), 'SipherNFTSale: only EOA or owner');\\n    require(merkleRoot != bytes32(0), 'SipherNFTSale: merkle root is not set yet');\\n\\n    _validateAndUpdateWithBuyAmount(buyer, amount);\\n\\n    nft.mintGenesis(amount, buyer);\\n  }\\n\\n  /**\\n   * @dev Roll the final start index of the NFT, only call after sale is ended\\n   */\\n  function rollStartIndex() external override {\\n    require(_blockTimestamp() > _saleConfig.endTime, 'SipherNFTSale: sale not ended');\\n\\n    address sender = msg.sender;\\n    require(!sender.isContract() || sender == owner(), 'SipherNFTSale: only EOA or owner');\\n\\n    require(merkleRoot != bytes32(0), 'SipherNFTSale: merkle root is not set yet');\\n    nft.rollStartIndex();\\n\\n    emit RollStartIndex(sender);\\n  }\\n\\n  /**\\n   * @dev Update sale end time by the owner only\\n   *  if new sale end time is in the past, the sale round will be halted\\n   */\\n  function updateSaleEndTime(uint64 _endTime) external onlyOwner {\\n    _saleConfig.endTime = _endTime;\\n    emit UpdateSaleEndTime(_endTime);\\n  }\\n\\n  /**\\n   * @dev Return the config, with times (whitelistTime, publicTime, endTime) and max supply\\n   */\\n  function getSaleConfig() external view override returns (SaleConfig memory config) {\\n    config = _saleConfig;\\n  }\\n\\n  /**\\n   * @dev Return the record, with number of tokens have been sold for different groups\\n   */\\n  function getSaleRecord() external view override returns (SaleRecord memory record) {\\n    record = _saleRecord;\\n  }\\n\\n  /**\\n   * @dev Return the user record\\n   */\\n  function getUserRecord(address user) external view override returns (UserRecord memory record) {\\n    record = _userRecord[user];\\n  }\\n  /**\\n   * @dev Validate if it is valid to buy and update corresponding data\\n   *  Logics:\\n   *    1. Can not buy more than maxSupply\\n   *    2. If the buyer is the owner:\\n  *       - can buy up to MAX_OWNER_BOUGHT_INITIAL before endTime with price = 0\\n   *      - after sale is ended, can buy with no limit (but within maxSupply) with price = 0\\n   *    3. If the buy time is in whitelist buy time:\\n   *      - each whitelisted buyer can buy up to CAP_PER_WHITELISTED_ADDRESS tokens with SALE_PRICE per token\\n   *    4. If the buy time is in public buy time:\\n   *      - each buyer can buy up to total of CAP_PER_ADDRESS tokens with SALE_PRICE per token\\n   */\\n  function _validateAndUpdateWithBuyAmount(address buyer, uint64 amount) internal {\\n    SaleConfig memory config = _saleConfig;\\n\\n    // ensure total sold doens't exceed max supply\\n    require(\\n      _saleRecord.totalSold + amount <= _saleConfig.maxSupply,\\n      'SipherNFTSale: max supply reached'\\n    );\\n\\n    address owner = owner();\\n    uint256 totalPaid = msg.value;\\n    uint256 timestamp = _blockTimestamp();\\n\\n    if (buyer == owner) {\\n      // if not ended, owner can buy up to MAX_OWNER_BOUGHT_INITIAL, otherwise there is no cap\\n      if (timestamp <= config.endTime) {\\n        require(\\n          _saleRecord.ownerBought + amount <= MAX_OWNER_BOUGHT_INITIAL,\\n          'SipherNFTSale: max owner initial reached'\\n        );\\n      }\\n      _saleRecord.ownerBought += amount;\\n      _saleRecord.totalSold += amount;\\n      emit OwnerBought(buyer, amount, totalPaid);\\n      return;\\n    }\\n\\n    require(config.whitelistTime <= timestamp, 'SipherNFTSale: not started');\\n    require(timestamp <= config.endTime, 'SipherNFTSale: already ended');\\n\\n    if (config.whitelistTime <= timestamp && timestamp < config.publicTime) {\\n      // only whitelisted can buy at this period\\n      require(isWhitelistedAddress(buyer), 'SipherNFTSale: only whitelisted buyer');\\n      // whitelisted address can buy up to CAP_PER_WHITELISTED_ADDRESS token\\n      require(totalPaid == amount * SALE_PRICE, 'SipherNFTSale: invalid paid value');\\n      require(\\n        _userRecord[buyer].whitelistBought + amount <= CAP_PER_WHITELISTED_ADDRESS,\\n        'SipherNFTSale: whitelisted cap reached'\\n      );\\n      _saleRecord.totalWhitelistSold += amount;\\n      _userRecord[buyer].whitelistBought += amount;\\n      _saleRecord.totalSold += amount;\\n      emit WhitelistBought(buyer, amount, totalPaid);\\n      return;\\n    }\\n\\n    if (config.publicTime <= timestamp && timestamp < config.endTime) {\\n      // anyone can buy up to CAP_PER_ADDRESS tokens with price of SALE_PRICE eth per token\\n      // it is applied for total of whitelistBought + publicBought\\n      require(totalPaid == amount * SALE_PRICE, 'SipherNFTSale: invalid paid value');\\n      require(\\n        _userRecord[buyer].publicBought + _userRecord[buyer].whitelistBought + amount <= CAP_PER_ADDRESS,\\n        'SipherNFTSale: normal cap reached'\\n      );\\n      _saleRecord.totalPublicSold += amount;\\n      _userRecord[buyer].publicBought += amount;\\n      _saleRecord.totalSold += amount;\\n      emit PublicBought(buyer, amount, totalPaid);\\n    }\\n  }\\n\\n  function _blockTimestamp() internal view returns (uint256) {\\n    return block.timestamp;\\n  }\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/utils/Address.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Collection of functions related to the address type\\n */\\nlibrary Address {\\n    /**\\n     * @dev Returns true if `account` is a contract.\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * It is unsafe to assume that an address for which this function returns\\n     * false is an externally-owned account (EOA) and not a contract.\\n     *\\n     * Among others, `isContract` will return false for the following\\n     * types of addresses:\\n     *\\n     *  - an externally-owned account\\n     *  - a contract in construction\\n     *  - an address where a contract will be created\\n     *  - an address where a contract lived, but was destroyed\\n     * ====\\n     */\\n    function isContract(address account) internal view returns (bool) {\\n        // This method relies on extcodesize, which returns 0 for contracts in\\n        // construction, since the code is only stored at the end of the\\n        // constructor execution.\\n\\n        uint256 size;\\n        assembly {\\n            size := extcodesize(account)\\n        }\\n        return size > 0;\\n    }\\n\\n    /**\\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\\n     * `recipient`, forwarding all available gas and reverting on errors.\\n     *\\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\\n     * imposed by `transfer`, making them unable to receive funds via\\n     * `transfer`. {sendValue} removes this limitation.\\n     *\\n     * https://diligence.consensys.net/posts/2019/09/stop-using-soliditys-transfer-now/[Learn more].\\n     *\\n     * IMPORTANT: because control is transferred to `recipient`, care must be\\n     * taken to not create reentrancy vulnerabilities. Consider using\\n     * {ReentrancyGuard} or the\\n     * https://solidity.readthedocs.io/en/v0.5.11/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\\n     */\\n    function sendValue(address payable recipient, uint256 amount) internal {\\n        require(address(this).balance >= amount, \\\"Address: insufficient balance\\\");\\n\\n        (bool success, ) = recipient.call{value: amount}(\\\"\\\");\\n        require(success, \\\"Address: unable to send value, recipient may have reverted\\\");\\n    }\\n\\n    /**\\n     * @dev Performs a Solidity function call using a low level `call`. A\\n     * plain `call` is an unsafe replacement for a function call: use this\\n     * function instead.\\n     *\\n     * If `target` reverts with a revert reason, it is bubbled up by this\\n     * function (like regular Solidity function calls).\\n     *\\n     * Returns the raw returned data. To convert to the expected return value,\\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\\n     *\\n     * Requirements:\\n     *\\n     * - `target` must be a contract.\\n     * - calling `target` with `data` must not revert.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionCall(target, data, \\\"Address: low-level call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\\n     * `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, 0, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but also transferring `value` wei to `target`.\\n     *\\n     * Requirements:\\n     *\\n     * - the calling contract must have an ETH balance of at least `value`.\\n     * - the called Solidity function must be `payable`.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, value, \\\"Address: low-level call with value failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\\n     * with `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        require(address(this).balance >= value, \\\"Address: insufficient balance for call\\\");\\n        require(isContract(target), \\\"Address: call to non-contract\\\");\\n\\n        (bool success, bytes memory returndata) = target.call{value: value}(data);\\n        return _verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\\n        return functionStaticCall(target, data, \\\"Address: low-level static call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal view returns (bytes memory) {\\n        require(isContract(target), \\\"Address: static call to non-contract\\\");\\n\\n        (bool success, bytes memory returndata) = target.staticcall(data);\\n        return _verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionDelegateCall(target, data, \\\"Address: low-level delegate call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        require(isContract(target), \\\"Address: delegate call to non-contract\\\");\\n\\n        (bool success, bytes memory returndata) = target.delegatecall(data);\\n        return _verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    function _verifyCallResult(\\n        bool success,\\n        bytes memory returndata,\\n        string memory errorMessage\\n    ) private pure returns (bytes memory) {\\n        if (success) {\\n            return returndata;\\n        } else {\\n            // Look for revert reason and bubble it up if present\\n            if (returndata.length > 0) {\\n                // The easiest way to bubble the revert reason is using memory via assembly\\n\\n                assembly {\\n                    let returndata_size := mload(returndata)\\n                    revert(add(32, returndata), returndata_size)\\n                }\\n            } else {\\n                revert(errorMessage);\\n            }\\n        }\\n    }\\n}\\n\"\r\n    },\r\n    \"contracts/interfaces/ISipherNFT.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: agpl-3.0\\npragma solidity 0.8.4;\\n\\nimport {IERC721Enumerable} from '@openzeppelin/contracts/token/ERC721/extensions/IERC721Enumerable.sol';\\n\\n\\ninterface ISipherNFT is IERC721Enumerable {\\n  /**\\n   * @dev Call only by the Genesis Minter to roll the start index\\n   */\\n  function rollStartIndex() external;\\n\\n  /**\\n   * @dev Call to mint new genesis tokens, only by Genesis Minter\\n   *  Can mint up to MAX_GENESIS_SUPPLY tokens\\n   * @param amount amount of genesis tokens to mint\\n   * @param to recipient of genesis tokens\\n   */\\n  function mintGenesis(uint256 amount, address to) external;\\n\\n  /**\\n   * @dev Call to mint a fork of a tokenId, only by Fork Minter\\n   *  need to wait for all genesis to be minted before minting forks\\n   *  allow to mint multile forks for a tokenId\\n   * @param tokenId id of token to mint a fork\\n   */\\n  function mintFork(uint256 tokenId) external;\\n\\n  /**\\n   * @dev Return the original of a fork token\\n   * @param forkId fork id to get its original token id\\n   */\\n  function originals(uint256 forkId)\\n    external\\n    view\\n    returns (uint256 originalId);\\n\\n  /**\\n   * @dev Return the current genesis minter address\\n   */\\n  function genesisMinter() external view returns (address);\\n\\n  /**\\n   * @dev Return the current fork minter address\\n   */\\n  function forkMinter() external view returns (address);\\n\\n  /**\\n   * @dev Return the randomized start index, 0 if has not rolled yet\\n   */\\n  function randomizedStartIndex() external view returns (uint256);\\n\\n  /**\\n   * @dev Return the current genesis token id, default 0, the first token has id of 1\\n   */\\n  function currentId() external view returns (uint256);\\n\\n  /**\\n   * @dev Return the base Sipher URI for tokens\\n   */\\n  function baseSipherURI() external view returns (string memory);\\n\\n  /**\\n   * @dev Return the store front URI\\n   */\\n  function contractURI() external view returns (string memory);\\n}\\n\"\r\n    },\r\n    \"contracts/interfaces/ISipherNFTSale.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: agpl-3.0\\npragma solidity 0.8.4;\\n\\nimport {ISipherNFT} from '../interfaces/ISipherNFT.sol';\\n\\n\\ninterface ISipherNFTSale {\\n  struct SaleConfig {\\n    uint64 whitelistTime;     // time that the owner & whitelisted addresses can start buying\\n    uint64 publicTime;        // time that other addresses can start buying\\n    uint64 endTime;           // end time for the sale, only the owner can buy the rest of the supply\\n    uint64 maxSupply;         // max supply of the nft tokens for this sale round\\n  }\\n\\n  struct SaleRecord {\\n    uint64 totalSold;         // total amount of tokens have been sold\\n    uint64 ownerBought;       // total amount of tokens that the owner has bought\\n    uint64 totalWhitelistSold;// total amount of tokens that whitelisted addresses have bought\\n    uint64 totalPublicSold;   // total amount of tokens that have sold to public\\n  }\\n\\n  struct UserRecord {\\n    uint64 whitelistBought;   // amount of tokens that have bought as a whitelisted address\\n    uint64 publicBought;      // amount of tokens that have bought as a public address\\n  }\\n\\n  /**\\n   * @dev Buy amount of NFT tokens\\n   *   There are different caps for different users at different times\\n   *   The total sold tokens should be capped to maxSupply\\n   */\\n  function buy(uint64 amount) external payable;\\n\\n  /**\\n   * @dev Roll the final start index of the NFT\\n   */\\n  function rollStartIndex() external;\\n\\n  /**\\n   * @dev Return the config, with times (t0, t1, t2) and max supply\\n   */\\n  function getSaleConfig() external view returns (SaleConfig memory config);\\n\\n  /**\\n   * @dev Return the sale record\\n   */\\n  function getSaleRecord() external view returns (SaleRecord memory record);\\n\\n  /**\\n   * @dev Return the user record\\n   */\\n  function getUserRecord(address user) external view returns (UserRecord memory record);\\n\\n  function merkleRoot() external view returns (bytes32);\\n  function nft() external view returns (ISipherNFT);\\n}\\n\"\r\n    },\r\n    \"contracts/utils/Whitelist.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: agpl-3.0\\npragma solidity 0.8.4;\\n\\nimport {Ownable} from \\\"@openzeppelin/contracts/access/Ownable.sol\\\";\\nimport {EnumerableSet} from '@openzeppelin/contracts/utils/structs/EnumerableSet.sol';\\n\\nimport {IWhitelist} from '../interfaces/IWhitelist.sol';\\n\\n\\ncontract Whitelist is IWhitelist, Ownable {\\n\\n  using EnumerableSet for EnumerableSet.AddressSet;\\n\\n  // list of whitelisted addresses\\n  EnumerableSet.AddressSet internal _whitelistGroup;\\n  // maximum number of addresses in the _whitelistGroup\\n  uint256 public immutable maxWhitelistSize;\\n\\n  constructor(uint256 _maxWhitelistSize)  {\\n    maxWhitelistSize = _maxWhitelistSize;\\n  }\\n\\n  /**\\n   * @dev Update the list of whitelisted addresses\\n   * @param accounts list of addresses to be updated\\n   * @param isWhitelisted indicate whether to add or remove from the whitelisted list\\n   */\\n  function updateWhitelistedGroup(\\n    address[] calldata accounts,\\n    bool isWhitelisted\\n  ) external override onlyOwner {\\n    for(uint256 i = 0; i < accounts.length; i++) {\\n      if (isWhitelisted && _whitelistGroup.add(accounts[i])) {\\n        emit UpdateWhitelistedAddress(accounts[i], true);\\n      } else if (!isWhitelisted && _whitelistGroup.remove(accounts[i])) {\\n        emit UpdateWhitelistedAddress(accounts[i], false);\\n      }\\n    }\\n    if (isWhitelisted) {\\n      // simplify by checking only in the end, only when adding new accounts\\n      require(_whitelistGroup.length() <= maxWhitelistSize, 'Whitelist: too many addresses');\\n    }\\n  }\\n\\n  function getWhitelistedGroup() external view override returns (address[] memory accounts) {\\n    uint256 len = getWhitelistedGroupLength();\\n    accounts = new address[](len);\\n    for(uint256 i = 0; i < len; i++) {\\n      accounts[i] = getWhitelistedAddressAt(i);\\n    }\\n  }\\n\\n  function isWhitelistedAddress(address account) public view override returns (bool) {\\n    return _whitelistGroup.contains(account);\\n  }\\n\\n  function getWhitelistedGroupLength() public view override returns (uint256 length) {\\n    length = _whitelistGroup.length();\\n  }\\n\\n  function getWhitelistedAddressAt(uint256 index) public view override returns (address account) {\\n    account = _whitelistGroup.at(index);\\n  }\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/token/ERC721/extensions/IERC721Enumerable.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../IERC721.sol\\\";\\n\\n/**\\n * @title ERC-721 Non-Fungible Token Standard, optional enumeration extension\\n * @dev See https://eips.ethereum.org/EIPS/eip-721\\n */\\ninterface IERC721Enumerable is IERC721 {\\n    /**\\n     * @dev Returns the total amount of tokens stored by the contract.\\n     */\\n    function totalSupply() external view returns (uint256);\\n\\n    /**\\n     * @dev Returns a token ID owned by `owner` at a given `index` of its token list.\\n     * Use along with {balanceOf} to enumerate all of ``owner``'s tokens.\\n     */\\n    function tokenOfOwnerByIndex(address owner, uint256 index) external view returns (uint256 tokenId);\\n\\n    /**\\n     * @dev Returns a token ID at a given `index` of all the tokens stored by the contract.\\n     * Use along with {totalSupply} to enumerate all tokens.\\n     */\\n    function tokenByIndex(uint256 index) external view returns (uint256);\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/token/ERC721/IERC721.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../../utils/introspection/IERC165.sol\\\";\\n\\n/**\\n * @dev Required interface of an ERC721 compliant contract.\\n */\\ninterface IERC721 is IERC165 {\\n    /**\\n     * @dev Emitted when `tokenId` token is transferred from `from` to `to`.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 indexed tokenId);\\n\\n    /**\\n     * @dev Emitted when `owner` enables `approved` to manage the `tokenId` token.\\n     */\\n    event Approval(address indexed owner, address indexed approved, uint256 indexed tokenId);\\n\\n    /**\\n     * @dev Emitted when `owner` enables or disables (`approved`) `operator` to manage all of its assets.\\n     */\\n    event ApprovalForAll(address indexed owner, address indexed operator, bool approved);\\n\\n    /**\\n     * @dev Returns the number of tokens in ``owner``'s account.\\n     */\\n    function balanceOf(address owner) external view returns (uint256 balance);\\n\\n    /**\\n     * @dev Returns the owner of the `tokenId` token.\\n     *\\n     * Requirements:\\n     *\\n     * - `tokenId` must exist.\\n     */\\n    function ownerOf(uint256 tokenId) external view returns (address owner);\\n\\n    /**\\n     * @dev Safely transfers `tokenId` token from `from` to `to`, checking first that contract recipients\\n     * are aware of the ERC721 protocol to prevent tokens from being forever locked.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` cannot be the zero address.\\n     * - `to` cannot be the zero address.\\n     * - `tokenId` token must exist and be owned by `from`.\\n     * - If the caller is not `from`, it must be have been allowed to move this token by either {approve} or {setApprovalForAll}.\\n     * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function safeTransferFrom(\\n        address from,\\n        address to,\\n        uint256 tokenId\\n    ) external;\\n\\n    /**\\n     * @dev Transfers `tokenId` token from `from` to `to`.\\n     *\\n     * WARNING: Usage of this method is discouraged, use {safeTransferFrom} whenever possible.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` cannot be the zero address.\\n     * - `to` cannot be the zero address.\\n     * - `tokenId` token must be owned by `from`.\\n     * - If the caller is not `from`, it must be approved to move this token by either {approve} or {setApprovalForAll}.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(\\n        address from,\\n        address to,\\n        uint256 tokenId\\n    ) external;\\n\\n    /**\\n     * @dev Gives permission to `to` to transfer `tokenId` token to another account.\\n     * The approval is cleared when the token is transferred.\\n     *\\n     * Only a single account can be approved at a time, so approving the zero address clears previous approvals.\\n     *\\n     * Requirements:\\n     *\\n     * - The caller must own the token or be an approved operator.\\n     * - `tokenId` must exist.\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address to, uint256 tokenId) external;\\n\\n    /**\\n     * @dev Returns the account approved for `tokenId` token.\\n     *\\n     * Requirements:\\n     *\\n     * - `tokenId` must exist.\\n     */\\n    function getApproved(uint256 tokenId) external view returns (address operator);\\n\\n    /**\\n     * @dev Approve or remove `operator` as an operator for the caller.\\n     * Operators can call {transferFrom} or {safeTransferFrom} for any token owned by the caller.\\n     *\\n     * Requirements:\\n     *\\n     * - The `operator` cannot be the caller.\\n     *\\n     * Emits an {ApprovalForAll} event.\\n     */\\n    function setApprovalForAll(address operator, bool _approved) external;\\n\\n    /**\\n     * @dev Returns if the `operator` is allowed to manage all of the assets of `owner`.\\n     *\\n     * See {setApprovalForAll}\\n     */\\n    function isApprovedForAll(address owner, address operator) external view returns (bool);\\n\\n    /**\\n     * @dev Safely transfers `tokenId` token from `from` to `to`.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` cannot be the zero address.\\n     * - `to` cannot be the zero address.\\n     * - `tokenId` token must exist and be owned by `from`.\\n     * - If the caller is not `from`, it must be approved to move this token by either {approve} or {setApprovalForAll}.\\n     * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function safeTransferFrom(\\n        address from,\\n        address to,\\n        uint256 tokenId,\\n        bytes calldata data\\n    ) external;\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/utils/introspection/IERC165.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC165 standard, as defined in the\\n * https://eips.ethereum.org/EIPS/eip-165[EIP].\\n *\\n * Implementers can declare support of contract interfaces, which can then be\\n * queried by others ({ERC165Checker}).\\n *\\n * For an implementation, see {ERC165}.\\n */\\ninterface IERC165 {\\n    /**\\n     * @dev Returns true if this contract implements the interface defined by\\n     * `interfaceId`. See the corresponding\\n     * https://eips.ethereum.org/EIPS/eip-165#how-interfaces-are-identified[EIP section]\\n     * to learn more about how these ids are created.\\n     *\\n     * This function call must use less than 30 000 gas.\\n     */\\n    function supportsInterface(bytes4 interfaceId) external view returns (bool);\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/access/Ownable.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../utils/Context.sol\\\";\\n\\n/**\\n * @dev Contract module which provides a basic access control mechanism, where\\n * there is an account (an owner) that can be granted exclusive access to\\n * specific functions.\\n *\\n * By default, the owner account will be the one that deploys the contract. This\\n * can later be changed with {transferOwnership}.\\n *\\n * This module is used through inheritance. It will make available the modifier\\n * `onlyOwner`, which can be applied to your functions to restrict their use to\\n * the owner.\\n */\\nabstract contract Ownable is Context {\\n    address private _owner;\\n\\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\\n\\n    /**\\n     * @dev Initializes the contract setting the deployer as the initial owner.\\n     */\\n    constructor() {\\n        _setOwner(_msgSender());\\n    }\\n\\n    /**\\n     * @dev Returns the address of the current owner.\\n     */\\n    function owner() public view virtual returns (address) {\\n        return _owner;\\n    }\\n\\n    /**\\n     * @dev Throws if called by any account other than the owner.\\n     */\\n    modifier onlyOwner() {\\n        require(owner() == _msgSender(), \\\"Ownable: caller is not the owner\\\");\\n        _;\\n    }\\n\\n    /**\\n     * @dev Leaves the contract without owner. It will not be possible to call\\n     * `onlyOwner` functions anymore. Can only be called by the current owner.\\n     *\\n     * NOTE: Renouncing ownership will leave the contract without an owner,\\n     * thereby removing any functionality that is only available to the owner.\\n     */\\n    function renounceOwnership() public virtual onlyOwner {\\n        _setOwner(address(0));\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Can only be called by the current owner.\\n     */\\n    function transferOwnership(address newOwner) public virtual onlyOwner {\\n        require(newOwner != address(0), \\\"Ownable: new owner is the zero address\\\");\\n        _setOwner(newOwner);\\n    }\\n\\n    function _setOwner(address newOwner) private {\\n        address oldOwner = _owner;\\n        _owner = newOwner;\\n        emit OwnershipTransferred(oldOwner, newOwner);\\n    }\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/utils/structs/EnumerableSet.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Library for managing\\n * https://en.wikipedia.org/wiki/Set_(abstract_data_type)[sets] of primitive\\n * types.\\n *\\n * Sets have the following properties:\\n *\\n * - Elements are added, removed, and checked for existence in constant time\\n * (O(1)).\\n * - Elements are enumerated in O(n). No guarantees are made on the ordering.\\n *\\n * ```\\n * contract Example {\\n *     // Add the library methods\\n *     using EnumerableSet for EnumerableSet.AddressSet;\\n *\\n *     // Declare a set state variable\\n *     EnumerableSet.AddressSet private mySet;\\n * }\\n * ```\\n *\\n * As of v3.3.0, sets of type `bytes32` (`Bytes32Set`), `address` (`AddressSet`)\\n * and `uint256` (`UintSet`) are supported.\\n */\\nlibrary EnumerableSet {\\n    // To implement this library for multiple types with as little code\\n    // repetition as possible, we write it in terms of a generic Set type with\\n    // bytes32 values.\\n    // The Set implementation uses private functions, and user-facing\\n    // implementations (such as AddressSet) are just wrappers around the\\n    // underlying Set.\\n    // This means that we can only create new EnumerableSets for types that fit\\n    // in bytes32.\\n\\n    struct Set {\\n        // Storage of set values\\n        bytes32[] _values;\\n        // Position of the value in the `values` array, plus 1 because index 0\\n        // means a value is not in the set.\\n        mapping(bytes32 => uint256) _indexes;\\n    }\\n\\n    /**\\n     * @dev Add a value to a set. O(1).\\n     *\\n     * Returns true if the value was added to the set, that is if it was not\\n     * already present.\\n     */\\n    function _add(Set storage set, bytes32 value) private returns (bool) {\\n        if (!_contains(set, value)) {\\n            set._values.push(value);\\n            // The value is stored at length-1, but we add 1 to all indexes\\n            // and use 0 as a sentinel value\\n            set._indexes[value] = set._values.length;\\n            return true;\\n        } else {\\n            return false;\\n        }\\n    }\\n\\n    /**\\n     * @dev Removes a value from a set. O(1).\\n     *\\n     * Returns true if the value was removed from the set, that is if it was\\n     * present.\\n     */\\n    function _remove(Set storage set, bytes32 value) private returns (bool) {\\n        // We read and store the value's index to prevent multiple reads from the same storage slot\\n        uint256 valueIndex = set._indexes[value];\\n\\n        if (valueIndex != 0) {\\n            // Equivalent to contains(set, value)\\n            // To delete an element from the _values array in O(1), we swap the element to delete with the last one in\\n            // the array, and then remove the last element (sometimes called as 'swap and pop').\\n            // This modifies the order of the array, as noted in {at}.\\n\\n            uint256 toDeleteIndex = valueIndex - 1;\\n            uint256 lastIndex = set._values.length - 1;\\n\\n            if (lastIndex != toDeleteIndex) {\\n                bytes32 lastvalue = set._values[lastIndex];\\n\\n                // Move the last value to the index where the value to delete is\\n                set._values[toDeleteIndex] = lastvalue;\\n                // Update the index for the moved value\\n                set._indexes[lastvalue] = valueIndex; // Replace lastvalue's index to valueIndex\\n            }\\n\\n            // Delete the slot where the moved value was stored\\n            set._values.pop();\\n\\n            // Delete the index for the deleted slot\\n            delete set._indexes[value];\\n\\n            return true;\\n        } else {\\n            return false;\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns true if the value is in the set. O(1).\\n     */\\n    function _contains(Set storage set, bytes32 value) private view returns (bool) {\\n        return set._indexes[value] != 0;\\n    }\\n\\n    /**\\n     * @dev Returns the number of values on the set. O(1).\\n     */\\n    function _length(Set storage set) private view returns (uint256) {\\n        return set._values.length;\\n    }\\n\\n    /**\\n     * @dev Returns the value stored at position `index` in the set. O(1).\\n     *\\n     * Note that there are no guarantees on the ordering of values inside the\\n     * array, and it may change when more values are added or removed.\\n     *\\n     * Requirements:\\n     *\\n     * - `index` must be strictly less than {length}.\\n     */\\n    function _at(Set storage set, uint256 index) private view returns (bytes32) {\\n        return set._values[index];\\n    }\\n\\n    // Bytes32Set\\n\\n    struct Bytes32Set {\\n        Set _inner;\\n    }\\n\\n    /**\\n     * @dev Add a value to a set. O(1).\\n     *\\n     * Returns true if the value was added to the set, that is if it was not\\n     * already present.\\n     */\\n    function add(Bytes32Set storage set, bytes32 value) internal returns (bool) {\\n        return _add(set._inner, value);\\n    }\\n\\n    /**\\n     * @dev Removes a value from a set. O(1).\\n     *\\n     * Returns true if the value was removed from the set, that is if it was\\n     * present.\\n     */\\n    function remove(Bytes32Set storage set, bytes32 value) internal returns (bool) {\\n        return _remove(set._inner, value);\\n    }\\n\\n    /**\\n     * @dev Returns true if the value is in the set. O(1).\\n     */\\n    function contains(Bytes32Set storage set, bytes32 value) internal view returns (bool) {\\n        return _contains(set._inner, value);\\n    }\\n\\n    /**\\n     * @dev Returns the number of values in the set. O(1).\\n     */\\n    function length(Bytes32Set storage set) internal view returns (uint256) {\\n        return _length(set._inner);\\n    }\\n\\n    /**\\n     * @dev Returns the value stored at position `index` in the set. O(1).\\n     *\\n     * Note that there are no guarantees on the ordering of values inside the\\n     * array, and it may change when more values are added or removed.\\n     *\\n     * Requirements:\\n     *\\n     * - `index` must be strictly less than {length}.\\n     */\\n    function at(Bytes32Set storage set, uint256 index) internal view returns (bytes32) {\\n        return _at(set._inner, index);\\n    }\\n\\n    // AddressSet\\n\\n    struct AddressSet {\\n        Set _inner;\\n    }\\n\\n    /**\\n     * @dev Add a value to a set. O(1).\\n     *\\n     * Returns true if the value was added to the set, that is if it was not\\n     * already present.\\n     */\\n    function add(AddressSet storage set, address value) internal returns (bool) {\\n        return _add(set._inner, bytes32(uint256(uint160(value))));\\n    }\\n\\n    /**\\n     * @dev Removes a value from a set. O(1).\\n     *\\n     * Returns true if the value was removed from the set, that is if it was\\n     * present.\\n     */\\n    function remove(AddressSet storage set, address value) internal returns (bool) {\\n        return _remove(set._inner, bytes32(uint256(uint160(value))));\\n    }\\n\\n    /**\\n     * @dev Returns true if the value is in the set. O(1).\\n     */\\n    function contains(AddressSet storage set, address value) internal view returns (bool) {\\n        return _contains(set._inner, bytes32(uint256(uint160(value))));\\n    }\\n\\n    /**\\n     * @dev Returns the number of values in the set. O(1).\\n     */\\n    function length(AddressSet storage set) internal view returns (uint256) {\\n        return _length(set._inner);\\n    }\\n\\n    /**\\n     * @dev Returns the value stored at position `index` in the set. O(1).\\n     *\\n     * Note that there are no guarantees on the ordering of values inside the\\n     * array, and it may change when more values are added or removed.\\n     *\\n     * Requirements:\\n     *\\n     * - `index` must be strictly less than {length}.\\n     */\\n    function at(AddressSet storage set, uint256 index) internal view returns (address) {\\n        return address(uint160(uint256(_at(set._inner, index))));\\n    }\\n\\n    // UintSet\\n\\n    struct UintSet {\\n        Set _inner;\\n    }\\n\\n    /**\\n     * @dev Add a value to a set. O(1).\\n     *\\n     * Returns true if the value was added to the set, that is if it was not\\n     * already present.\\n     */\\n    function add(UintSet storage set, uint256 value) internal returns (bool) {\\n        return _add(set._inner, bytes32(value));\\n    }\\n\\n    /**\\n     * @dev Removes a value from a set. O(1).\\n     *\\n     * Returns true if the value was removed from the set, that is if it was\\n     * present.\\n     */\\n    function remove(UintSet storage set, uint256 value) internal returns (bool) {\\n        return _remove(set._inner, bytes32(value));\\n    }\\n\\n    /**\\n     * @dev Returns true if the value is in the set. O(1).\\n     */\\n    function contains(UintSet storage set, uint256 value) internal view returns (bool) {\\n        return _contains(set._inner, bytes32(value));\\n    }\\n\\n    /**\\n     * @dev Returns the number of values on the set. O(1).\\n     */\\n    function length(UintSet storage set) internal view returns (uint256) {\\n        return _length(set._inner);\\n    }\\n\\n    /**\\n     * @dev Returns the value stored at position `index` in the set. O(1).\\n     *\\n     * Note that there are no guarantees on the ordering of values inside the\\n     * array, and it may change when more values are added or removed.\\n     *\\n     * Requirements:\\n     *\\n     * - `index` must be strictly less than {length}.\\n     */\\n    function at(UintSet storage set, uint256 index) internal view returns (uint256) {\\n        return uint256(_at(set._inner, index));\\n    }\\n}\\n\"\r\n    },\r\n    \"contracts/interfaces/IWhitelist.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: agpl-3.0\\npragma solidity 0.8.4;\\n\\n\\ninterface IWhitelist {\\n\\n  event UpdateWhitelistedAddress(\\n    address account,\\n    bool isWhitelisted\\n  );\\n\\n  /**\\n   * @dev Update the list of whitelisted addresses\\n   * @param accounts list of addresses to be updated\\n   * @param isWhitelisted indicate whether to add or remove from the whitelisted list\\n   */\\n  function updateWhitelistedGroup(\\n    address[] calldata accounts,\\n    bool isWhitelisted\\n  ) external;\\n\\n  function isWhitelistedAddress(address account) external view returns (bool);\\n  function getWhitelistedGroup() external view returns (address[] memory accounts);\\n  function getWhitelistedGroupLength() external view returns (uint256 length);\\n  function getWhitelistedAddressAt(uint256 index) external view returns (address account);\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/utils/Context.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\n/*\\n * @dev Provides information about the current execution context, including the\\n * sender of the transaction and its data. While these are generally available\\n * via msg.sender and msg.data, they should not be accessed in such a direct\\n * manner, since when dealing with meta-transactions the account sending and\\n * paying for execution may not be the actual sender (as far as an application\\n * is concerned).\\n *\\n * This contract is only required for intermediate, library-like contracts.\\n */\\nabstract contract Context {\\n    function _msgSender() internal view virtual returns (address) {\\n        return msg.sender;\\n    }\\n\\n    function _msgData() internal view virtual returns (bytes calldata) {\\n        return msg.data;\\n    }\\n}\\n\"\r\n    }\r\n  },\r\n  \"settings\": {\r\n    \"optimizer\": {\r\n      \"enabled\": true,\r\n      \"runs\": 22000\r\n    },\r\n    \"outputSelection\": {\r\n      \"*\": {\r\n        \"*\": [\r\n          \"evm.bytecode\",\r\n          \"evm.deployedBytecode\",\r\n          \"abi\"\r\n        ]\r\n      }\r\n    },\r\n    \"libraries\": {}\r\n  }\r\n}}","ABI":"[{\"inputs\":[{\"internalType\":\"contract ISipherNFT\",\"name\":\"_nft\",\"type\":\"address\"},{\"internalType\":\"uint64\",\"name\":\"_whitelistTime\",\"type\":\"uint64\"},{\"internalType\":\"uint64\",\"name\":\"_publicTime\",\"type\":\"uint64\"},{\"internalType\":\"uint64\",\"name\":\"_endTime\",\"type\":\"uint64\"},{\"internalType\":\"uint64\",\"name\":\"_maxSupply\",\"type\":\"uint64\"},{\"internalType\":\"uint256\",\"name\":\"_maxWhitelistSize\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"buyer\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amountWeiPaid\",\"type\":\"uint256\"}],\"name\":\"OwnerBought\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"buyer\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amountWeiPaid\",\"type\":\"uint256\"}],\"name\":\"PublicBought\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"trigger\",\"type\":\"address\"}],\"name\":\"RollStartIndex\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"bytes32\",\"name\":\"merkelRoot\",\"type\":\"bytes32\"}],\"name\":\"SetMerkleRoot\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint64\",\"name\":\"endTime\",\"type\":\"uint64\"}],\"name\":\"UpdateSaleEndTime\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"bool\",\"name\":\"isWhitelisted\",\"type\":\"bool\"}],\"name\":\"UpdateWhitelistedAddress\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"buyer\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amountWeiPaid\",\"type\":\"uint256\"}],\"name\":\"WhitelistBought\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"recipient\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"WithdrawSaleFunds\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"CAP_PER_ADDRESS\",\"outputs\":[{\"internalType\":\"uint64\",\"name\":\"\",\"type\":\"uint64\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"CAP_PER_WHITELISTED_ADDRESS\",\"outputs\":[{\"internalType\":\"uint64\",\"name\":\"\",\"type\":\"uint64\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"MAX_OWNER_BOUGHT_INITIAL\",\"outputs\":[{\"internalType\":\"uint64\",\"name\":\"\",\"type\":\"uint64\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"SALE_PRICE\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint64\",\"name\":\"amount\",\"type\":\"uint64\"}],\"name\":\"buy\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getSaleConfig\",\"outputs\":[{\"components\":[{\"internalType\":\"uint64\",\"name\":\"whitelistTime\",\"type\":\"uint64\"},{\"internalType\":\"uint64\",\"name\":\"publicTime\",\"type\":\"uint64\"},{\"internalType\":\"uint64\",\"name\":\"endTime\",\"type\":\"uint64\"},{\"internalType\":\"uint64\",\"name\":\"maxSupply\",\"type\":\"uint64\"}],\"internalType\":\"struct ISipherNFTSale.SaleConfig\",\"name\":\"config\",\"type\":\"tuple\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getSaleRecord\",\"outputs\":[{\"components\":[{\"internalType\":\"uint64\",\"name\":\"totalSold\",\"type\":\"uint64\"},{\"internalType\":\"uint64\",\"name\":\"ownerBought\",\"type\":\"uint64\"},{\"internalType\":\"uint64\",\"name\":\"totalWhitelistSold\",\"type\":\"uint64\"},{\"internalType\":\"uint64\",\"name\":\"totalPublicSold\",\"type\":\"uint64\"}],\"internalType\":\"struct ISipherNFTSale.SaleRecord\",\"name\":\"record\",\"type\":\"tuple\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"}],\"name\":\"getUserRecord\",\"outputs\":[{\"components\":[{\"internalType\":\"uint64\",\"name\":\"whitelistBought\",\"type\":\"uint64\"},{\"internalType\":\"uint64\",\"name\":\"publicBought\",\"type\":\"uint64\"}],\"internalType\":\"struct ISipherNFTSale.UserRecord\",\"name\":\"record\",\"type\":\"tuple\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"index\",\"type\":\"uint256\"}],\"name\":\"getWhitelistedAddressAt\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getWhitelistedGroup\",\"outputs\":[{\"internalType\":\"address[]\",\"name\":\"accounts\",\"type\":\"address[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getWhitelistedGroupLength\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"length\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"isWhitelistedAddress\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"maxWhitelistSize\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"merkleRoot\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"nft\",\"outputs\":[{\"internalType\":\"contract ISipherNFT\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"rollStartIndex\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"_root\",\"type\":\"bytes32\"}],\"name\":\"setMerkleRoot\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint64\",\"name\":\"_endTime\",\"type\":\"uint64\"}],\"name\":\"updateSaleEndTime\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address[]\",\"name\":\"accounts\",\"type\":\"address[]\"},{\"internalType\":\"bool\",\"name\":\"isWhitelisted\",\"type\":\"bool\"}],\"name\":\"updateWhitelistedGroup\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address payable\",\"name\":\"recipient\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"withdrawSaleFunds\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}]","ContractName":"SipherNFTSale","CompilerVersion":"v0.8.4+commit.c7e474f2","OptimizationUsed":"1","Runs":"22000","ConstructorArguments":"0000000000000000000000009c57d0278199c931cf149cc769f37bb7847091e7000000000000000000000000000000000000000000000000000000006136b9900000000000000000000000000000000000000000000000000000000061396aa000000000000000000000000000000000000000000000000000000000613c0da0000000000000000000000000000000000000000000000000000000000000271000000000000000000000000000000000000000000000000000000000000007d0","EVMVersion":"Default","Library":"","LicenseType":"","Proxy":"0","Implementation":"","SwarmSource":""}]}