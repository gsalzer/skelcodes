{"status":"1","message":"OK","result":[{"SourceCode":"// SPDX-License-Identifier: MIT\r\npragma solidity 0.8.4;\r\ninterface IERC20 {\r\n    function balanceOf(address account) external view returns (uint256);\r\n    function transfer(address recipient, uint256 amount) external returns (bool);\r\n    function transferFrom(address sender, address recipient, uint256 amount) external returns (bool);\r\n}\r\ncontract Staking {\r\n    address public owner;\r\n    IERC20 public TKN;\r\n\r\n    uint256[5] public periods = [30 days, 60 days, 90 days, 180 days, 360 days];\r\n    uint8[5] public rates = [101, 102, 103, 106, 112];\r\n    uint256[5] public amounts = [10000e18, 20000e18, 30000e18, 50000e18, 100000e18];\r\n    uint256 public rewardsPool;\r\n    uint256 public MAX_STAKES = 100;\r\n\r\n    struct Stake {\r\n        uint8 class;\r\n        uint8 cycle;\r\n        uint256 initialAmount;\r\n        uint256 finalAmount;\r\n        uint256 timestamp;\r\n        bool unstaked;\r\n    }\r\n\r\n    Stake[] public stakes;\r\n    mapping(address => uint256[]) public stakesOf;\r\n    mapping(uint256 => address) public ownerOf;\r\n\r\n    event Staked(address indexed sender, uint8 indexed class, uint256 amount, uint256 finalAmount);\r\n    event Prolonged(address indexed sender, uint8 indexed class, uint8 cycle, uint256 newAmount, uint256 newFinalAmount);\r\n    event Unstaked(address indexed sender, uint8 indexed class, uint8 cycle, uint256 amount);\r\n    event TransferOwnership(address indexed previousOwner, address indexed newOwner);\r\n    event IncreaseRewardsPool(address indexed adder, uint256 added, uint256 newSize);\r\n\r\n    modifier restricted {\r\n        require(msg.sender == owner, 'This function is restricted to owner');\r\n        _;\r\n    }\r\n\r\n    function stakesInfo(uint256 _from, uint256 _to) public view returns (Stake[] memory s) {\r\n        s = new Stake[](_to - _from);\r\n        for (uint256 i = _from; i <= _to; i++) s[i - _from] = stakes[i];\r\n    }\r\n\r\n    function stakesInfoAll() public view returns (Stake[] memory s) {\r\n        s = new Stake[](stakes.length);\r\n        for (uint256 i = 0; i < stakes.length; i++) s[i] = stakes[i];\r\n    }\r\n\r\n    function stakesLength() public view returns (uint256) {\r\n        return stakes.length;\r\n    }\r\n\r\n    function myStakes(address _me) public view returns (Stake[] memory s, uint256[] memory indexes) {\r\n        s = new Stake[](stakesOf[_me].length);\r\n        indexes = new uint256[](stakesOf[_me].length);\r\n        for (uint256 i = 0; i < stakesOf[_me].length; i++) {\r\n            indexes[i] = stakesOf[_me][i];\r\n            s[i] = stakes[indexes[i]];\r\n        }\r\n    }\r\n\r\n    function myActiveStakesCount(address _me) public view returns (uint256 l) {\r\n        uint256[] storage _s = stakesOf[_me];\r\n        for (uint256 i = 0; i < _s.length; i++) if (!stakes[_s[i]].unstaked) l++;\r\n    }\r\n\r\n    function stake(uint8 _class) public {\r\n        require(_class < 5, \"Wrong class\"); // data valid\r\n        uint256 _amount = amounts[_class];\r\n        require(myActiveStakesCount(msg.sender) < MAX_STAKES, \"MAX_STAKES overflow\"); // has space for new active stake\r\n        uint256 _finalAmount = (_amount * rates[_class]) / 100;\r\n        require(rewardsPool >= _finalAmount - _amount, \"Rewards pool is empty for now\");\r\n        rewardsPool -= _finalAmount - _amount;\r\n        require(TKN.transferFrom(msg.sender, address(this), _amount));\r\n        uint256 _index = stakes.length;\r\n        stakesOf[msg.sender].push(_index);\r\n        stakes.push(Stake({\r\n            class: _class,\r\n            cycle: 1,\r\n            initialAmount: _amount,\r\n            finalAmount: _finalAmount,\r\n            timestamp: block.timestamp,\r\n            unstaked: false\r\n        }));\r\n        ownerOf[_index] = msg.sender;\r\n        emit Staked(msg.sender, _class, _amount, _finalAmount);\r\n    }\r\n\r\n    function prolong(uint256 _index) public {\r\n        require(msg.sender == ownerOf[_index]);\r\n        Stake storage _s = stakes[_index];\r\n        require(!_s.unstaked); // not unstaked yet\r\n        require(block.timestamp >= _s.timestamp + periods[_s.class]); // staking period finished\r\n        uint256 _newFinalAmount = (_s.finalAmount * rates[_s.class]) / 100;\r\n        require(rewardsPool >= _newFinalAmount - _s.finalAmount, \"Rewards pool is empty for now\");\r\n        rewardsPool -= _newFinalAmount - _s.finalAmount;\r\n        _s.timestamp = block.timestamp;\r\n        _s.cycle++;\r\n        require(_s.cycle * periods[_s.class] <= 360 days, \"total staking time exceeds 360 days\");\r\n        emit Prolonged(msg.sender, _s.class, _s.cycle, _s.finalAmount, _newFinalAmount);\r\n        _s.finalAmount = _newFinalAmount;\r\n    }\r\n\r\n    function unstake(uint256 _index) public {\r\n        require(msg.sender == ownerOf[_index]);\r\n        Stake storage _s = stakes[_index];\r\n        require(!_s.unstaked); // not unstaked yet\r\n        require(block.timestamp >= _s.timestamp + periods[_s.class]); // staking period finished\r\n        require(TKN.transfer(msg.sender, _s.finalAmount));\r\n        _s.unstaked = true;\r\n        emit Unstaked(msg.sender, _s.class, _s.cycle, _s.finalAmount);\r\n    }\r\n\r\n    function transferOwnership(address _newOwner) public restricted {\r\n        require(_newOwner != address(0), 'Invalid address: should not be 0x0');\r\n        emit TransferOwnership(owner, _newOwner);\r\n        owner = _newOwner;\r\n    }\r\n\r\n    function returnAccidentallySent(IERC20 _TKN) public restricted {\r\n        require(address(_TKN) != address(TKN));\r\n        uint256 _amount = _TKN.balanceOf(address(this));\r\n        require(TKN.transfer(msg.sender, _amount));\r\n    }\r\n\r\n    function increaseRewardsPool(uint256 _amount) public {\r\n      TKN.transferFrom(msg.sender, address(this), _amount);\r\n      rewardsPool += _amount;\r\n      emit IncreaseRewardsPool(msg.sender, _amount, rewardsPool);\r\n    }\r\n\r\n    function updateMax(uint256 _max) public restricted {\r\n        MAX_STAKES = _max;\r\n    }\r\n\r\n    constructor(IERC20 _TKN) {\r\n        owner = msg.sender;\r\n        TKN = _TKN;\r\n    }\r\n}","ABI":"[{\"inputs\":[{\"internalType\":\"contract IERC20\",\"name\":\"_TKN\",\"type\":\"address\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"adder\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"added\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"newSize\",\"type\":\"uint256\"}],\"name\":\"IncreaseRewardsPool\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"uint8\",\"name\":\"class\",\"type\":\"uint8\"},{\"indexed\":false,\"internalType\":\"uint8\",\"name\":\"cycle\",\"type\":\"uint8\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"newAmount\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"newFinalAmount\",\"type\":\"uint256\"}],\"name\":\"Prolonged\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"uint8\",\"name\":\"class\",\"type\":\"uint8\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"finalAmount\",\"type\":\"uint256\"}],\"name\":\"Staked\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"TransferOwnership\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"uint8\",\"name\":\"class\",\"type\":\"uint8\"},{\"indexed\":false,\"internalType\":\"uint8\",\"name\":\"cycle\",\"type\":\"uint8\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"Unstaked\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"MAX_STAKES\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"TKN\",\"outputs\":[{\"internalType\":\"contract IERC20\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"amounts\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"increaseRewardsPool\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_me\",\"type\":\"address\"}],\"name\":\"myActiveStakesCount\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"l\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_me\",\"type\":\"address\"}],\"name\":\"myStakes\",\"outputs\":[{\"components\":[{\"internalType\":\"uint8\",\"name\":\"class\",\"type\":\"uint8\"},{\"internalType\":\"uint8\",\"name\":\"cycle\",\"type\":\"uint8\"},{\"internalType\":\"uint256\",\"name\":\"initialAmount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"finalAmount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"timestamp\",\"type\":\"uint256\"},{\"internalType\":\"bool\",\"name\":\"unstaked\",\"type\":\"bool\"}],\"internalType\":\"struct Staking.Stake[]\",\"name\":\"s\",\"type\":\"tuple[]\"},{\"internalType\":\"uint256[]\",\"name\":\"indexes\",\"type\":\"uint256[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"ownerOf\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"periods\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_index\",\"type\":\"uint256\"}],\"name\":\"prolong\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"rates\",\"outputs\":[{\"internalType\":\"uint8\",\"name\":\"\",\"type\":\"uint8\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"contract IERC20\",\"name\":\"_TKN\",\"type\":\"address\"}],\"name\":\"returnAccidentallySent\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"rewardsPool\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint8\",\"name\":\"_class\",\"type\":\"uint8\"}],\"name\":\"stake\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"stakes\",\"outputs\":[{\"internalType\":\"uint8\",\"name\":\"class\",\"type\":\"uint8\"},{\"internalType\":\"uint8\",\"name\":\"cycle\",\"type\":\"uint8\"},{\"internalType\":\"uint256\",\"name\":\"initialAmount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"finalAmount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"timestamp\",\"type\":\"uint256\"},{\"internalType\":\"bool\",\"name\":\"unstaked\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_from\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_to\",\"type\":\"uint256\"}],\"name\":\"stakesInfo\",\"outputs\":[{\"components\":[{\"internalType\":\"uint8\",\"name\":\"class\",\"type\":\"uint8\"},{\"internalType\":\"uint8\",\"name\":\"cycle\",\"type\":\"uint8\"},{\"internalType\":\"uint256\",\"name\":\"initialAmount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"finalAmount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"timestamp\",\"type\":\"uint256\"},{\"internalType\":\"bool\",\"name\":\"unstaked\",\"type\":\"bool\"}],\"internalType\":\"struct Staking.Stake[]\",\"name\":\"s\",\"type\":\"tuple[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"stakesInfoAll\",\"outputs\":[{\"components\":[{\"internalType\":\"uint8\",\"name\":\"class\",\"type\":\"uint8\"},{\"internalType\":\"uint8\",\"name\":\"cycle\",\"type\":\"uint8\"},{\"internalType\":\"uint256\",\"name\":\"initialAmount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"finalAmount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"timestamp\",\"type\":\"uint256\"},{\"internalType\":\"bool\",\"name\":\"unstaked\",\"type\":\"bool\"}],\"internalType\":\"struct Staking.Stake[]\",\"name\":\"s\",\"type\":\"tuple[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"stakesLength\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"stakesOf\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_index\",\"type\":\"uint256\"}],\"name\":\"unstake\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_max\",\"type\":\"uint256\"}],\"name\":\"updateMax\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}]","ContractName":"Staking","CompilerVersion":"v0.8.4+commit.c7e474f2","OptimizationUsed":"1","Runs":"200","ConstructorArguments":"000000000000000000000000a0008f510fe9ee696e7e320c9e5cbf61e27791ee","EVMVersion":"Default","Library":"","LicenseType":"MIT","Proxy":"0","Implementation":"","SwarmSource":"ipfs://20419eaf849f59bfecd6f192d73cbd1c475b04ba7f082dbed5ebb476d6dc9f43"}]}