{"status":"1","message":"OK","result":[{"SourceCode":"// SPDX-License-Identifier: BUSL-1.1\n\npragma solidity 0.8.6;\n\n\n\n// Part: IBetaInterestModel\n\ninterface IBetaInterestModel {\n  /// @dev Returns the initial interest rate per year (times 1e18).\n  function initialRate() external view returns (uint);\n\n  /// @dev Returns the next interest rate for the market.\n  /// @param prevRate The current interest rate.\n  /// @param totalAvailable The current available liquidity.\n  /// @param totalLoan The current outstanding loan.\n  /// @param timePast The time past since last interest rate rebase in seconds.\n  function getNextInterestRate(\n    uint prevRate,\n    uint totalAvailable,\n    uint totalLoan,\n    uint timePast\n  ) external view returns (uint);\n}\n\n// Part: OpenZeppelin/openzeppelin-contracts@4.2.0/Math\n\n/**\n * @dev Standard math utilities missing in the Solidity language.\n */\nlibrary Math {\n    /**\n     * @dev Returns the largest of two numbers.\n     */\n    function max(uint256 a, uint256 b) internal pure returns (uint256) {\n        return a >= b ? a : b;\n    }\n\n    /**\n     * @dev Returns the smallest of two numbers.\n     */\n    function min(uint256 a, uint256 b) internal pure returns (uint256) {\n        return a < b ? a : b;\n    }\n\n    /**\n     * @dev Returns the average of two numbers. The result is rounded towards\n     * zero.\n     */\n    function average(uint256 a, uint256 b) internal pure returns (uint256) {\n        // (a + b) / 2 can overflow, so we distribute.\n        return (a / 2) + (b / 2) + (((a % 2) + (b % 2)) / 2);\n    }\n\n    /**\n     * @dev Returns the ceiling of the division of two numbers.\n     *\n     * This differs from standard division with `/` in that it rounds up instead\n     * of rounding down.\n     */\n    function ceilDiv(uint256 a, uint256 b) internal pure returns (uint256) {\n        // (a + b - 1) / b can overflow on addition, so we distribute.\n        return a / b + (a % b == 0 ? 0 : 1);\n    }\n}\n\n// File: BetaInterestModelV1.sol\n\ncontract BetaInterestModelV1 is IBetaInterestModel {\n  uint public immutable override initialRate;\n  uint public immutable minRate;\n  uint public immutable maxRate;\n  uint public immutable adjustRate; // between 0 and 1e18, the higher the more aggressive\n\n  constructor(\n    uint _initialRate,\n    uint _minRate,\n    uint _maxRate,\n    uint _adjustRate\n  ) {\n    require(_minRate < _maxRate, 'constructor/bad-min-max-rate');\n    require(_adjustRate < 1e18, 'constructor/bad-adjust-rate');\n    initialRate = _initialRate;\n    minRate = _minRate;\n    maxRate = _maxRate;\n    adjustRate = _adjustRate;\n  }\n\n  /// @dev Returns the next interest rate for the market.\n  /// @param prevRate The current interest rate.\n  /// @param totalAvailable The current available liquidity.\n  /// @param totalLoan The current outstanding loan.\n  /// @param timePassed The time passed since last interest rate rebase in seconds.\n  /// @notice At utilization 0-50%, the interest rate will decrease at half-per-day rate\n  ///         At utilization 50-70%, the interest rate will decrease linearly from 0 to half-per-day rate\n  ///         At utilization 70-80%, the interest rate will stay the same.\n  ///         At utilization 80-100%, the interest rate will increase linearly from 0 to twice-per-day rate.\n  function getNextInterestRate(\n    uint prevRate,\n    uint totalAvailable,\n    uint totalLoan,\n    uint timePassed\n  ) external view override returns (uint) {\n    uint totalLiquidity = totalAvailable + totalLoan;\n    if (totalLiquidity == 0) {\n      return prevRate;\n    }\n    uint utilRate = (totalLoan * 1e18) / totalLiquidity;\n    uint cappedtimePassed = Math.min(timePassed, 1 days);\n    uint multRate;\n    if (utilRate < 0.5e18) {\n      // utilization 0-50%, decrease at half-per-day rate\n      multRate = 1e18 - (adjustRate * cappedtimePassed) / 1 days;\n    } else if (utilRate < 0.7e18) {\n      // utilization 50-70%, decrease linearly from 0 to half-per-day rate, depending on how far the utilization is from 70%\n      uint downScale = (0.7e18 - utilRate) * 5; // *5 is equivalent to /0.2\n      multRate = 1e18 - (adjustRate * downScale * cappedtimePassed) / 1 days / 1e18;\n    } else if (utilRate < 0.8e18) {\n      // utilization 70-80%, stay the same\n      multRate = 1e18;\n    } else {\n      // utilization 80-100%, increase linearly from 0 to twice-per-day rate, depending on how far the utilization is from 80%\n      uint upScale = (utilRate - 0.8e18) * 5; // *5 is equivalent to /0.2\n      uint upMaxRate = 1e36 / (1e18 - adjustRate) - 1e18;\n      multRate = 1e18 + (upMaxRate * upScale * cappedtimePassed) / 1 days / 1e18;\n    }\n    uint targetRate = (prevRate * multRate) / 1e18;\n    return Math.min(Math.max(targetRate, minRate), maxRate);\n  }\n}\n","ABI":"[{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_initialRate\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_minRate\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_maxRate\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_adjustRate\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"inputs\":[],\"name\":\"adjustRate\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"prevRate\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"totalAvailable\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"totalLoan\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"timePassed\",\"type\":\"uint256\"}],\"name\":\"getNextInterestRate\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"initialRate\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"maxRate\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"minRate\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"}]","ContractName":"BetaInterestModelV1","CompilerVersion":"v0.8.6+commit.11564f7e","OptimizationUsed":"1","Runs":"200","ConstructorArguments":"000000000000000000000000000000000000000000000000016345785d8a0000000000000000000000000000000000000000000000000000002386f26fc100000000000000000000000000000000000000000000000000008ac7230489e8000000000000000000000000000000000000000000000000000006f05b59d3b20000","EVMVersion":"Default","Library":"","LicenseType":"None","Proxy":"0","Implementation":"","SwarmSource":""}]}