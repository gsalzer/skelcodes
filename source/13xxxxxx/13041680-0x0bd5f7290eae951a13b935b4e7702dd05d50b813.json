{"status":"1","message":"OK","result":[{"SourceCode":"{{\r\n  \"language\": \"Solidity\",\r\n  \"sources\": {\r\n    \"contracts/governance/ReignDAO.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: Apache-2.0\\npragma solidity 0.7.6;\\npragma experimental ABIEncoderV2;\\n\\nimport \\\"../interfaces/IReign.sol\\\";\\nimport \\\"../interfaces/IBasketBalancer.sol\\\";\\nimport \\\"./ReignDiamond.sol\\\";\\nimport \\\"./Bridge.sol\\\";\\nimport \\\"@openzeppelin/contracts/math/SafeMath.sol\\\";\\n\\ncontract ReignDAO is Bridge {\\n    using SafeMath for uint256;\\n\\n    enum ProposalState {\\n        WarmUp,\\n        Active,\\n        Canceled,\\n        Failed,\\n        Accepted,\\n        Queued,\\n        Grace,\\n        Expired,\\n        Executed,\\n        Abrogated\\n    }\\n\\n    struct Receipt {\\n        // Whether or not a vote has been cast\\n        bool hasVoted;\\n        // The number of votes the voter had, which were cast\\n        uint256 votes;\\n        // support\\n        bool support;\\n    }\\n\\n    struct AbrogationProposal {\\n        address creator;\\n        uint256 createTime;\\n        string description;\\n        uint256 forVotes;\\n        uint256 againstVotes;\\n        mapping(address => Receipt) receipts;\\n    }\\n\\n    struct ProposalParameters {\\n        uint256 warmUpDuration;\\n        uint256 activeDuration;\\n        uint256 queueDuration;\\n        uint256 gracePeriodDuration;\\n        uint256 acceptanceThreshold;\\n        uint256 minQuorum;\\n    }\\n\\n    struct Proposal {\\n        // proposal identifiers\\n        // unique id\\n        uint256 id;\\n        // Creator of the proposal\\n        address proposer;\\n        // proposal description\\n        string description;\\n        string title;\\n        // proposal technical details\\n        // ordered list of target addresses to be made\\n        address[] targets;\\n        // The ordered list of values (i.e. msg.value) to be passed to the calls to be made\\n        uint256[] values;\\n        // The ordered list of function signatures to be called\\n        string[] signatures;\\n        // The ordered list of calldata to be passed to each call\\n        bytes[] calldatas;\\n        // proposal creation time - 1\\n        uint256 createTime;\\n        // votes status\\n        // The timestamp that the proposal will be available for execution, set once the vote succeeds\\n        uint256 eta;\\n        // Current number of votes in favor of this proposal\\n        uint256 forVotes;\\n        // Current number of votes in opposition to this proposal\\n        uint256 againstVotes;\\n        bool canceled;\\n        bool executed;\\n        // Receipts of ballots for the entire set of voters\\n        mapping(address => Receipt) receipts;\\n        ProposalParameters parameters;\\n    }\\n\\n    uint256 public lastProposalId;\\n    mapping(uint256 => Proposal) public proposals;\\n    mapping(uint256 => AbrogationProposal) public abrogationProposals;\\n    mapping(address => uint256) public latestProposalIds;\\n    IReign private reign;\\n    IBasketBalancer private basketBalancer;\\n    bool private isInitialized;\\n    bool public isActive;\\n\\n    event ProposalCreated(uint256 indexed proposalId);\\n    event Vote(\\n        uint256 indexed proposalId,\\n        address indexed user,\\n        bool support,\\n        uint256 power\\n    );\\n    event VoteCanceled(uint256 indexed proposalId, address indexed user);\\n    event ProposalQueued(\\n        uint256 indexed proposalId,\\n        address caller,\\n        uint256 eta\\n    );\\n    event ProposalExecuted(uint256 indexed proposalId, address caller);\\n    event ProposalCanceled(uint256 indexed proposalId, address caller);\\n    event AbrogationProposalStarted(uint256 indexed proposalId, address caller);\\n    event AbrogationProposalExecuted(\\n        uint256 indexed proposalId,\\n        address caller\\n    );\\n    event AbrogationProposalVote(\\n        uint256 indexed proposalId,\\n        address indexed user,\\n        bool support,\\n        uint256 power\\n    );\\n    event AbrogationProposalVoteCancelled(\\n        uint256 indexed proposalId,\\n        address indexed user\\n    );\\n\\n    receive() external payable {}\\n\\n    // executed only once\\n    function initialize(\\n        address _reignAddr,\\n        address _basketBalancer,\\n        address _smartPool\\n    ) public {\\n        require(isInitialized == false, \\\"Contract already initialized.\\\");\\n        require(_reignAddr != address(0), \\\"reign must not be 0x0\\\");\\n\\n        reign = IReign(_reignAddr);\\n        basketBalancer = IBasketBalancer(_basketBalancer);\\n        setSmartPoolInitial(_smartPool);\\n        isInitialized = true;\\n    }\\n\\n    function activate() public {\\n        require(!isActive, \\\"DAO already active\\\");\\n        require(\\n            reign.reignStaked() >= ACTIVATION_THRESHOLD,\\n            \\\"Threshold not met yet\\\"\\n        );\\n\\n        isActive = true;\\n    }\\n\\n    function triggerWeightUpdate() public {\\n        // this will revert if epoch is not over\\n        basketBalancer.updateBasketBalance();\\n\\n        // get etsablished weights\\n        address[] memory token = basketBalancer.getTokens();\\n        uint256[] memory weights = new uint256[](token.length);\\n        for (uint256 i = 0; i < token.length; i++) {\\n            weights[i] = basketBalancer.getTargetAllocation(token[i]);\\n        }\\n\\n        //update weights gradually in smartPool\\n        updateWeights(weights);\\n    }\\n\\n    function triggerApplyAddToken() public {\\n        // apply addition of new token, reverts if token add lock is not elapsed\\n        applyAddToken();\\n    }\\n\\n    function propose(\\n        address[] memory targets,\\n        uint256[] memory values,\\n        string[] memory signatures,\\n        bytes[] memory calldatas,\\n        string memory description,\\n        string memory title\\n    ) public returns (uint256) {\\n        if (!isActive) {\\n            require(\\n                reign.reignStaked() >= ACTIVATION_THRESHOLD,\\n                \\\"DAO not yet active\\\"\\n            );\\n            isActive = true;\\n        }\\n\\n        require(\\n            reign.votingPowerAtTs(msg.sender, block.timestamp - 1) >=\\n                _getCreationThreshold(),\\n            \\\"Creation threshold not met\\\"\\n        );\\n        require(\\n            targets.length == values.length &&\\n                targets.length == signatures.length &&\\n                targets.length == calldatas.length,\\n            \\\"Proposal function information arity mismatch\\\"\\n        );\\n        require(targets.length != 0, \\\"Must provide actions\\\");\\n        require(\\n            targets.length <= PROPOSAL_MAX_ACTIONS,\\n            \\\"Too many actions on a vote\\\"\\n        );\\n        require(bytes(title).length > 0, \\\"title can't be empty\\\");\\n        require(bytes(description).length > 0, \\\"description can't be empty\\\");\\n\\n        // check if user has another running vote\\n        uint256 previousProposalId = latestProposalIds[msg.sender];\\n        if (previousProposalId != 0) {\\n            require(\\n                _isLiveState(previousProposalId) == false,\\n                \\\"One live proposal per proposer\\\"\\n            );\\n        }\\n\\n        uint256 newProposalId = lastProposalId + 1;\\n        Proposal storage newProposal = proposals[newProposalId];\\n        newProposal.id = newProposalId;\\n        newProposal.proposer = msg.sender;\\n        newProposal.description = description;\\n        newProposal.title = title;\\n        newProposal.targets = targets;\\n        newProposal.values = values;\\n        newProposal.signatures = signatures;\\n        newProposal.calldatas = calldatas;\\n        newProposal.createTime = block.timestamp - 1;\\n        newProposal.parameters.warmUpDuration = warmUpDuration;\\n        newProposal.parameters.activeDuration = activeDuration;\\n        newProposal.parameters.queueDuration = queueDuration;\\n        newProposal.parameters.gracePeriodDuration = gracePeriodDuration;\\n        newProposal.parameters.acceptanceThreshold = acceptanceThreshold;\\n        newProposal.parameters.minQuorum = minQuorum;\\n\\n        lastProposalId = newProposalId;\\n        latestProposalIds[msg.sender] = newProposalId;\\n\\n        emit ProposalCreated(newProposalId);\\n\\n        return newProposalId;\\n    }\\n\\n    function queue(uint256 proposalId) public {\\n        require(\\n            state(proposalId) == ProposalState.Accepted,\\n            \\\"Proposal can only be queued if it is succeeded\\\"\\n        );\\n\\n        Proposal storage proposal = proposals[proposalId];\\n        uint256 eta = proposal.createTime +\\n            proposal.parameters.warmUpDuration +\\n            proposal.parameters.activeDuration +\\n            proposal.parameters.queueDuration;\\n        proposal.eta = eta;\\n\\n        for (uint256 i = 0; i < proposal.targets.length; i++) {\\n            require(\\n                !queuedTransactions[\\n                    _getTxHash(\\n                        proposal.targets[i],\\n                        proposal.values[i],\\n                        proposal.signatures[i],\\n                        proposal.calldatas[i],\\n                        eta\\n                    )\\n                ],\\n                \\\"proposal action already queued at eta\\\"\\n            );\\n\\n            queueTransaction(\\n                proposal.targets[i],\\n                proposal.values[i],\\n                proposal.signatures[i],\\n                proposal.calldatas[i],\\n                eta\\n            );\\n        }\\n\\n        emit ProposalQueued(proposalId, msg.sender, eta);\\n    }\\n\\n    function execute(uint256 proposalId) public payable {\\n        require(_canBeExecuted(proposalId), \\\"Cannot be executed\\\");\\n\\n        Proposal storage proposal = proposals[proposalId];\\n        proposal.executed = true;\\n\\n        for (uint256 i = 0; i < proposal.targets.length; i++) {\\n            executeTransaction(\\n                proposal.targets[i],\\n                proposal.values[i],\\n                proposal.signatures[i],\\n                proposal.calldatas[i],\\n                proposal.eta\\n            );\\n        }\\n\\n        emit ProposalExecuted(proposalId, msg.sender);\\n    }\\n\\n    function cancelProposal(uint256 proposalId) public {\\n        require(\\n            _isCancellableState(proposalId),\\n            \\\"Proposal in state that does not allow cancellation\\\"\\n        );\\n        require(\\n            _canCancelProposal(proposalId),\\n            \\\"Cancellation requirements not met\\\"\\n        );\\n\\n        Proposal storage proposal = proposals[proposalId];\\n        proposal.canceled = true;\\n\\n        for (uint256 i = 0; i < proposal.targets.length; i++) {\\n            cancelTransaction(\\n                proposal.targets[i],\\n                proposal.values[i],\\n                proposal.signatures[i],\\n                proposal.calldatas[i],\\n                proposal.eta\\n            );\\n        }\\n\\n        emit ProposalCanceled(proposalId, msg.sender);\\n    }\\n\\n    function castVote(uint256 proposalId, bool support) public {\\n        require(state(proposalId) == ProposalState.Active, \\\"Voting is closed\\\");\\n\\n        Proposal storage proposal = proposals[proposalId];\\n        Receipt storage receipt = proposal.receipts[msg.sender];\\n\\n        // exit if user already voted\\n        require(\\n            receipt.hasVoted == false ||\\n                (receipt.hasVoted && receipt.support != support),\\n            \\\"Already voted this option\\\"\\n        );\\n\\n        uint256 votes = reign.votingPowerAtTs(\\n            msg.sender,\\n            _getSnapshotTimestamp(proposal)\\n        );\\n        require(votes > 0, \\\"no voting power\\\");\\n\\n        // means it changed its vote\\n        if (receipt.hasVoted) {\\n            if (receipt.support) {\\n                proposal.forVotes = proposal.forVotes.sub(receipt.votes);\\n            } else {\\n                proposal.againstVotes = proposal.againstVotes.sub(\\n                    receipt.votes\\n                );\\n            }\\n        }\\n\\n        if (support) {\\n            proposal.forVotes = proposal.forVotes.add(votes);\\n        } else {\\n            proposal.againstVotes = proposal.againstVotes.add(votes);\\n        }\\n\\n        receipt.hasVoted = true;\\n        receipt.votes = votes;\\n        receipt.support = support;\\n\\n        emit Vote(proposalId, msg.sender, support, votes);\\n    }\\n\\n    function cancelVote(uint256 proposalId) public {\\n        require(state(proposalId) == ProposalState.Active, \\\"Voting is closed\\\");\\n\\n        Proposal storage proposal = proposals[proposalId];\\n        Receipt storage receipt = proposal.receipts[msg.sender];\\n\\n        uint256 votes = reign.votingPowerAtTs(\\n            msg.sender,\\n            _getSnapshotTimestamp(proposal)\\n        );\\n\\n        require(receipt.hasVoted, \\\"Cannot cancel if not voted yet\\\");\\n\\n        if (receipt.support) {\\n            proposal.forVotes = proposal.forVotes.sub(votes);\\n        } else {\\n            proposal.againstVotes = proposal.againstVotes.sub(votes);\\n        }\\n\\n        receipt.hasVoted = false;\\n        receipt.votes = 0;\\n        receipt.support = false;\\n\\n        emit VoteCanceled(proposalId, msg.sender);\\n    }\\n\\n    // ======================================================================================================\\n    // Abrogation proposal methods\\n    // ======================================================================================================\\n\\n    // the Abrogation Proposal is a mechanism for the DAO participants to veto the execution of a proposal that was already\\n    // accepted and it is currently queued. For the Abrogation Proposal to pass, 50% + 1 of the vBOND holders\\n    // must vote FOR the Abrogation Proposal\\n    function startAbrogationProposal(\\n        uint256 proposalId,\\n        string memory description\\n    ) public {\\n        require(\\n            state(proposalId) == ProposalState.Queued,\\n            \\\"Proposal must be in queue\\\"\\n        );\\n        require(\\n            reign.votingPowerAtTs(msg.sender, block.timestamp - 1) >=\\n                _getCreationThreshold(),\\n            \\\"Creation threshold not met\\\"\\n        );\\n\\n        AbrogationProposal storage ap = abrogationProposals[proposalId];\\n\\n        require(ap.createTime == 0, \\\"Abrogation proposal already exists\\\");\\n        require(bytes(description).length > 0, \\\"description can't be empty\\\");\\n\\n        ap.createTime = block.timestamp;\\n        ap.creator = msg.sender;\\n        ap.description = description;\\n\\n        emit AbrogationProposalStarted(proposalId, msg.sender);\\n    }\\n\\n    // abrogateProposal cancels a proposal if there's an Abrogation Proposal that passed\\n    function abrogateProposal(uint256 proposalId) public {\\n        require(\\n            state(proposalId) == ProposalState.Abrogated,\\n            \\\"Cannot be abrogated\\\"\\n        );\\n\\n        Proposal storage proposal = proposals[proposalId];\\n\\n        require(proposal.canceled == false, \\\"Cannot be abrogated\\\");\\n\\n        proposal.canceled = true;\\n\\n        for (uint256 i = 0; i < proposal.targets.length; i++) {\\n            cancelTransaction(\\n                proposal.targets[i],\\n                proposal.values[i],\\n                proposal.signatures[i],\\n                proposal.calldatas[i],\\n                proposal.eta\\n            );\\n        }\\n\\n        emit AbrogationProposalExecuted(proposalId, msg.sender);\\n    }\\n\\n    function abrogationProposal_castVote(uint256 proposalId, bool support)\\n        public\\n    {\\n        require(\\n            0 < proposalId && proposalId <= lastProposalId,\\n            \\\"invalid proposal id\\\"\\n        );\\n\\n        AbrogationProposal storage abrogationProposal = abrogationProposals[\\n            proposalId\\n        ];\\n        require(\\n            state(proposalId) == ProposalState.Queued &&\\n                abrogationProposal.createTime != 0,\\n            \\\"Abrogation Proposal not active\\\"\\n        );\\n\\n        Receipt storage receipt = abrogationProposal.receipts[msg.sender];\\n        require(\\n            receipt.hasVoted == false ||\\n                (receipt.hasVoted && receipt.support != support),\\n            \\\"Already voted this option\\\"\\n        );\\n\\n        uint256 votes = reign.votingPowerAtTs(\\n            msg.sender,\\n            abrogationProposal.createTime - 1\\n        );\\n        require(votes > 0, \\\"no voting power\\\");\\n\\n        // means it changed its vote\\n        if (receipt.hasVoted) {\\n            if (receipt.support) {\\n                abrogationProposal.forVotes = abrogationProposal.forVotes.sub(\\n                    receipt.votes\\n                );\\n            } else {\\n                abrogationProposal.againstVotes = abrogationProposal\\n                    .againstVotes\\n                    .sub(receipt.votes);\\n            }\\n        }\\n\\n        if (support) {\\n            abrogationProposal.forVotes = abrogationProposal.forVotes.add(\\n                votes\\n            );\\n        } else {\\n            abrogationProposal.againstVotes = abrogationProposal\\n                .againstVotes\\n                .add(votes);\\n        }\\n\\n        receipt.hasVoted = true;\\n        receipt.votes = votes;\\n        receipt.support = support;\\n\\n        emit AbrogationProposalVote(proposalId, msg.sender, support, votes);\\n    }\\n\\n    function abrogationProposal_cancelVote(uint256 proposalId) public {\\n        require(\\n            0 < proposalId && proposalId <= lastProposalId,\\n            \\\"invalid proposal id\\\"\\n        );\\n\\n        AbrogationProposal storage abrogationProposal = abrogationProposals[\\n            proposalId\\n        ];\\n        Receipt storage receipt = abrogationProposal.receipts[msg.sender];\\n\\n        require(\\n            state(proposalId) == ProposalState.Queued &&\\n                abrogationProposal.createTime != 0,\\n            \\\"Abrogation Proposal not active\\\"\\n        );\\n\\n        uint256 votes = reign.votingPowerAtTs(\\n            msg.sender,\\n            abrogationProposal.createTime - 1\\n        );\\n\\n        require(receipt.hasVoted, \\\"Cannot cancel if not voted yet\\\");\\n\\n        if (receipt.support) {\\n            abrogationProposal.forVotes = abrogationProposal.forVotes.sub(\\n                votes\\n            );\\n        } else {\\n            abrogationProposal.againstVotes = abrogationProposal\\n                .againstVotes\\n                .sub(votes);\\n        }\\n\\n        receipt.hasVoted = false;\\n        receipt.votes = 0;\\n        receipt.support = false;\\n\\n        emit AbrogationProposalVoteCancelled(proposalId, msg.sender);\\n    }\\n\\n    // ======================================================================================================\\n    // views\\n    // ======================================================================================================\\n\\n    function state(uint256 proposalId) public view returns (ProposalState) {\\n        require(\\n            0 < proposalId && proposalId <= lastProposalId,\\n            \\\"invalid proposal id\\\"\\n        );\\n\\n        Proposal storage proposal = proposals[proposalId];\\n\\n        if (proposal.canceled) {\\n            return ProposalState.Canceled;\\n        }\\n\\n        if (proposal.executed) {\\n            return ProposalState.Executed;\\n        }\\n\\n        if (\\n            block.timestamp <=\\n            proposal.createTime + proposal.parameters.warmUpDuration\\n        ) {\\n            return ProposalState.WarmUp;\\n        }\\n\\n        if (\\n            block.timestamp <=\\n            proposal.createTime +\\n                proposal.parameters.warmUpDuration +\\n                proposal.parameters.activeDuration\\n        ) {\\n            return ProposalState.Active;\\n        }\\n\\n        if (\\n            (proposal.forVotes + proposal.againstVotes) <\\n            _getQuorum(proposal) ||\\n            (proposal.forVotes < _getMinForVotes(proposal))\\n        ) {\\n            return ProposalState.Failed;\\n        }\\n\\n        // what it checks here is if the proposal is not queued\\n        if (proposal.eta == 0) {\\n            return ProposalState.Accepted;\\n        }\\n\\n        if (block.timestamp < proposal.eta) {\\n            return ProposalState.Queued;\\n        }\\n\\n        if (_proposalAbrogated(proposalId)) {\\n            return ProposalState.Abrogated;\\n        }\\n\\n        if (\\n            block.timestamp <=\\n            proposal.eta + proposal.parameters.gracePeriodDuration\\n        ) {\\n            return ProposalState.Grace;\\n        }\\n\\n        return ProposalState.Expired;\\n    }\\n\\n    function getReceipt(uint256 proposalId, address voter)\\n        public\\n        view\\n        returns (Receipt memory)\\n    {\\n        return proposals[proposalId].receipts[voter];\\n    }\\n\\n    function getProposalParameters(uint256 proposalId)\\n        public\\n        view\\n        returns (ProposalParameters memory)\\n    {\\n        return proposals[proposalId].parameters;\\n    }\\n\\n    function getAbrogationProposalReceipt(uint256 proposalId, address voter)\\n        public\\n        view\\n        returns (Receipt memory)\\n    {\\n        return abrogationProposals[proposalId].receipts[voter];\\n    }\\n\\n    function getActions(uint256 proposalId)\\n        public\\n        view\\n        returns (\\n            address[] memory targets,\\n            uint256[] memory values,\\n            string[] memory signatures,\\n            bytes[] memory calldatas\\n        )\\n    {\\n        Proposal storage p = proposals[proposalId];\\n        return (p.targets, p.values, p.signatures, p.calldatas);\\n    }\\n\\n    function getProposalQuorum(uint256 proposalId)\\n        public\\n        view\\n        returns (uint256)\\n    {\\n        require(\\n            0 < proposalId && proposalId <= lastProposalId,\\n            \\\"invalid proposal id\\\"\\n        );\\n\\n        return _getQuorum(proposals[proposalId]);\\n    }\\n\\n    // ======================================================================================================\\n    // internal methods\\n    // ======================================================================================================\\n\\n    function _canCancelProposal(uint256 proposalId)\\n        internal\\n        view\\n        returns (bool)\\n    {\\n        Proposal storage proposal = proposals[proposalId];\\n\\n        if (\\n            msg.sender == proposal.proposer ||\\n            reign.votingPower(proposal.proposer) < _getCreationThreshold()\\n        ) {\\n            return true;\\n        }\\n\\n        return false;\\n    }\\n\\n    function _isCancellableState(uint256 proposalId)\\n        internal\\n        view\\n        returns (bool)\\n    {\\n        ProposalState s = state(proposalId);\\n\\n        return s == ProposalState.WarmUp || s == ProposalState.Active;\\n    }\\n\\n    function _isLiveState(uint256 proposalId) internal view returns (bool) {\\n        ProposalState s = state(proposalId);\\n\\n        return\\n            s == ProposalState.WarmUp ||\\n            s == ProposalState.Active ||\\n            s == ProposalState.Accepted ||\\n            s == ProposalState.Queued ||\\n            s == ProposalState.Grace;\\n    }\\n\\n    function _canBeExecuted(uint256 proposalId) internal view returns (bool) {\\n        return state(proposalId) == ProposalState.Grace;\\n    }\\n\\n    function _getMinForVotes(Proposal storage proposal)\\n        internal\\n        view\\n        returns (uint256)\\n    {\\n        return\\n            (proposal.forVotes + proposal.againstVotes)\\n                .mul(proposal.parameters.acceptanceThreshold)\\n                .div(100);\\n    }\\n\\n    function _getCreationThreshold() internal view returns (uint256) {\\n        return reign.reignStaked().div(100);\\n    }\\n\\n    // Returns the timestamp of the snapshot for a given proposal\\n    // If the current block's timestamp is equal to `proposal.createTime + warmUpDuration` then the state function\\n    // will return WarmUp as state which will prevent any vote to be cast which will gracefully avoid any flashloan attack\\n    function _getSnapshotTimestamp(Proposal storage proposal)\\n        internal\\n        view\\n        returns (uint256)\\n    {\\n        return proposal.createTime + proposal.parameters.warmUpDuration;\\n    }\\n\\n    function _getQuorum(Proposal storage proposal)\\n        internal\\n        view\\n        returns (uint256)\\n    {\\n        return\\n            reign\\n                .reignStakedAtTs(_getSnapshotTimestamp(proposal))\\n                .mul(proposal.parameters.minQuorum)\\n                .div(100);\\n    }\\n\\n    function _proposalAbrogated(uint256 proposalId)\\n        internal\\n        view\\n        returns (bool)\\n    {\\n        Proposal storage p = proposals[proposalId];\\n        AbrogationProposal storage cp = abrogationProposals[proposalId];\\n\\n        if (cp.createTime == 0 || block.timestamp < p.eta) {\\n            return false;\\n        }\\n\\n        return cp.forVotes >= reign.reignStakedAtTs(cp.createTime - 1).div(2);\\n    }\\n}\\n\"\r\n    },\r\n    \"contracts/interfaces/IReign.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: Apache-2.0\\npragma solidity 0.7.6;\\npragma experimental ABIEncoderV2;\\n\\nimport \\\"../libraries/LibReignStorage.sol\\\";\\n\\ninterface IReign {\\n    function BASE_MULTIPLIER() external view returns (uint256);\\n\\n    // deposit allows a user to add more bond to his staked balance\\n    function deposit(uint256 amount) external;\\n\\n    // withdraw allows a user to withdraw funds if the balance is not locked\\n    function withdraw(uint256 amount) external;\\n\\n    // lock a user's currently staked balance until timestamp & add the bonus to his voting power\\n    function lock(uint256 timestamp) external;\\n\\n    // delegate allows a user to delegate his voting power to another user\\n    function delegate(address to) external;\\n\\n    // stopDelegate allows a user to take back the delegated voting power\\n    function stopDelegate() external;\\n\\n    // lock the balance of a proposal creator until the voting ends; only callable by DAO\\n    function lockCreatorBalance(address user, uint256 timestamp) external;\\n\\n    // balanceOf returns the current BOND balance of a user (bonus not included)\\n    function balanceOf(address user) external view returns (uint256);\\n\\n    // balanceAtTs returns the amount of BOND that the user currently staked (bonus NOT included)\\n    function balanceAtTs(address user, uint256 timestamp)\\n        external\\n        view\\n        returns (uint256);\\n\\n    // stakeAtTs returns the Stake object of the user that was valid at `timestamp`\\n    function stakeAtTs(address user, uint256 timestamp)\\n        external\\n        view\\n        returns (LibReignStorage.Stake memory);\\n\\n    // votingPower returns the voting power (bonus included) + delegated voting power for a user at the current block\\n    function votingPower(address user) external view returns (uint256);\\n\\n    // votingPowerAtTs returns the voting power (bonus included) + delegated voting power for a user at a point in time\\n    function votingPowerAtTs(address user, uint256 timestamp)\\n        external\\n        view\\n        returns (uint256);\\n\\n    // bondStaked returns the total raw amount of BOND staked at the current block\\n    function reignStaked() external view returns (uint256);\\n\\n    // reignStakedAtTs returns the total raw amount of BOND users have deposited into the contract\\n    // it does not include any bonus\\n    function reignStakedAtTs(uint256 timestamp) external view returns (uint256);\\n\\n    // delegatedPower returns the total voting power that a user received from other users\\n    function delegatedPower(address user) external view returns (uint256);\\n\\n    // delegatedPowerAtTs returns the total voting power that a user received from other users at a point in time\\n    function delegatedPowerAtTs(address user, uint256 timestamp)\\n        external\\n        view\\n        returns (uint256);\\n\\n    // stakingBoost calculates the multiplier on the user's stake at the current timestamp\\n    function stakingBoost(address user) external view returns (uint256);\\n\\n    // stackingBoostAtTs calculates the multiplier at a given timestamp based on the user's stake a the given timestamp\\n    function stackingBoostAtTs(address user, uint256 timestamp)\\n        external\\n        view\\n        returns (uint256);\\n\\n    // userLockedUntil returns the timestamp until the user's balance is locked\\n    function userLockedUntil(address user) external view returns (uint256);\\n\\n    // userDidDelegate returns the address to which a user delegated their voting power; address(0) if not delegated\\n    function userDelegatedTo(address user) external view returns (address);\\n\\n    // returns the last timestamp in which the user intercated with the staking contarct\\n    function userLastAction(address user) external view returns (uint256);\\n\\n    // reignCirculatingSupply returns the current circulating supply of BOND\\n    function reignCirculatingSupply() external view returns (uint256);\\n\\n    function getEpochDuration() external view returns (uint256);\\n\\n    function getEpoch1Start() external view returns (uint256);\\n\\n    function getCurrentEpoch() external view returns (uint128);\\n\\n    function stakingBoostAtEpoch(address, uint128)\\n        external\\n        view\\n        returns (uint256);\\n\\n    function getEpochUserBalance(address, uint128)\\n        external\\n        view\\n        returns (uint256);\\n}\\n\"\r\n    },\r\n    \"contracts/interfaces/IBasketBalancer.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: Apache-2.0\\npragma solidity 0.7.6;\\n\\ninterface IBasketBalancer {\\n    function addToken(address, uint256) external returns (uint256);\\n\\n    function hasVotedInEpoch(address, uint128) external view returns (bool);\\n\\n    function getTargetAllocation(address) external view returns (uint256);\\n\\n    function full_allocation() external view returns (uint256);\\n\\n    function updateBasketBalance() external;\\n\\n    function reignDiamond() external view returns (address);\\n\\n    function getTokens() external view returns (address[] memory);\\n}\\n\"\r\n    },\r\n    \"contracts/governance/ReignDiamond.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: Apache-2.0\\npragma solidity 0.7.6;\\npragma experimental ABIEncoderV2;\\n\\nimport \\\"diamond-libraries/contracts/libraries/LibDiamond.sol\\\";\\nimport \\\"diamond-libraries/contracts/libraries/LibOwnership.sol\\\";\\nimport \\\"diamond-libraries/contracts/interfaces/IDiamondLoupe.sol\\\";\\nimport \\\"diamond-libraries/contracts/interfaces/IERC165.sol\\\";\\nimport \\\"diamond-libraries/contracts/interfaces/IERC173.sol\\\";\\n\\ncontract ReignDiamond {\\n    constructor(IDiamondCut.FacetCut[] memory _diamondCut, address _owner)\\n        payable\\n    {\\n        require(_owner != address(0), \\\"owner must not be 0x0\\\");\\n\\n        LibDiamond.diamondCut(_diamondCut, address(0), new bytes(0));\\n        LibOwnership.setContractOwner(_owner);\\n\\n        LibDiamondStorage.DiamondStorage storage ds =\\n            LibDiamondStorage.diamondStorage();\\n\\n        // adding ERC165 data\\n        ds.supportedInterfaces[type(IERC165).interfaceId] = true;\\n        ds.supportedInterfaces[type(IDiamondCut).interfaceId] = true;\\n        ds.supportedInterfaces[type(IDiamondLoupe).interfaceId] = true;\\n        ds.supportedInterfaces[type(IERC173).interfaceId] = true;\\n    }\\n\\n    // Find facet for function that is called and execute the\\n    // function if a facet is found and return any value.\\n    fallback() external payable {\\n        LibDiamondStorage.DiamondStorage storage ds =\\n            LibDiamondStorage.diamondStorage();\\n\\n        address facet = address(bytes20(ds.facets[msg.sig].facetAddress));\\n        require(facet != address(0), \\\"Diamond: Function does not exist\\\");\\n\\n        assembly {\\n            calldatacopy(0, 0, calldatasize())\\n            let result := delegatecall(gas(), facet, 0, calldatasize(), 0, 0)\\n            returndatacopy(0, 0, returndatasize())\\n            switch result\\n                case 0 {\\n                    revert(0, returndatasize())\\n                }\\n                default {\\n                    return(0, returndatasize())\\n                }\\n        }\\n    }\\n\\n    receive() external payable {}\\n}\\n\"\r\n    },\r\n    \"contracts/governance/Bridge.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: Apache-2.0\\npragma solidity 0.7.6;\\n\\nimport \\\"./Parameters.sol\\\";\\nimport \\\"../interfaces/ISmartPool.sol\\\";\\n\\nabstract contract Bridge is Parameters {\\n    mapping(bytes32 => bool) public queuedTransactions;\\n\\n    function queueTransaction(\\n        address target,\\n        uint256 value,\\n        string memory signature,\\n        bytes memory data,\\n        uint256 eta\\n    ) internal returns (bytes32) {\\n        bytes32 txHash = _getTxHash(target, value, signature, data, eta);\\n        queuedTransactions[txHash] = true;\\n\\n        return txHash;\\n    }\\n\\n    function cancelTransaction(\\n        address target,\\n        uint256 value,\\n        string memory signature,\\n        bytes memory data,\\n        uint256 eta\\n    ) internal {\\n        bytes32 txHash = _getTxHash(target, value, signature, data, eta);\\n        queuedTransactions[txHash] = false;\\n    }\\n\\n    function executeTransaction(\\n        address target,\\n        uint256 value,\\n        string memory signature,\\n        bytes memory data,\\n        uint256 eta\\n    ) internal returns (bytes memory) {\\n        // reignDAO.execute already checks that the proposal is in grace period\\n        bytes32 txHash = _getTxHash(target, value, signature, data, eta);\\n\\n        queuedTransactions[txHash] = false;\\n\\n        bytes memory callData;\\n\\n        if (bytes(signature).length == 0) {\\n            callData = data;\\n        } else {\\n            callData = abi.encodePacked(\\n                bytes4(keccak256(bytes(signature))),\\n                data\\n            );\\n        }\\n\\n        // solium-disable-next-line security/no-call-value\\n        (bool success, bytes memory returnData) =\\n            target.call{value: value}(callData);\\n        require(success, string(returnData));\\n\\n        return returnData;\\n    }\\n\\n    function updateWeights(uint256[] memory weights) internal {\\n        ISmartPool(smartPool).updateWeightsGradually(\\n            weights,\\n            block.number,\\n            block.number + gradualWeightUpdate // plus 2 days\\n        );\\n    }\\n\\n    function applyAddToken() internal {\\n        ISmartPool(smartPool).applyAddToken();\\n    }\\n\\n    function _getTxHash(\\n        address target,\\n        uint256 value,\\n        string memory signature,\\n        bytes memory data,\\n        uint256 eta\\n    ) internal pure returns (bytes32) {\\n        return keccak256(abi.encode(target, value, signature, data, eta));\\n    }\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/math/SafeMath.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity >=0.6.0 <0.8.0;\\n\\n/**\\n * @dev Wrappers over Solidity's arithmetic operations with added overflow\\n * checks.\\n *\\n * Arithmetic operations in Solidity wrap on overflow. This can easily result\\n * in bugs, because programmers usually assume that an overflow raises an\\n * error, which is the standard behavior in high level programming languages.\\n * `SafeMath` restores this intuition by reverting the transaction when an\\n * operation overflows.\\n *\\n * Using this library instead of the unchecked operations eliminates an entire\\n * class of bugs, so it's recommended to use it always.\\n */\\nlibrary SafeMath {\\n    /**\\n     * @dev Returns the addition of two unsigned integers, with an overflow flag.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function tryAdd(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        uint256 c = a + b;\\n        if (c < a) return (false, 0);\\n        return (true, c);\\n    }\\n\\n    /**\\n     * @dev Returns the substraction of two unsigned integers, with an overflow flag.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function trySub(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        if (b > a) return (false, 0);\\n        return (true, a - b);\\n    }\\n\\n    /**\\n     * @dev Returns the multiplication of two unsigned integers, with an overflow flag.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function tryMul(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        // Gas optimization: this is cheaper than requiring 'a' not being zero, but the\\n        // benefit is lost if 'b' is also tested.\\n        // See: https://github.com/OpenZeppelin/openzeppelin-contracts/pull/522\\n        if (a == 0) return (true, 0);\\n        uint256 c = a * b;\\n        if (c / a != b) return (false, 0);\\n        return (true, c);\\n    }\\n\\n    /**\\n     * @dev Returns the division of two unsigned integers, with a division by zero flag.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function tryDiv(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        if (b == 0) return (false, 0);\\n        return (true, a / b);\\n    }\\n\\n    /**\\n     * @dev Returns the remainder of dividing two unsigned integers, with a division by zero flag.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function tryMod(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        if (b == 0) return (false, 0);\\n        return (true, a % b);\\n    }\\n\\n    /**\\n     * @dev Returns the addition of two unsigned integers, reverting on\\n     * overflow.\\n     *\\n     * Counterpart to Solidity's `+` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Addition cannot overflow.\\n     */\\n    function add(uint256 a, uint256 b) internal pure returns (uint256) {\\n        uint256 c = a + b;\\n        require(c >= a, \\\"SafeMath: addition overflow\\\");\\n        return c;\\n    }\\n\\n    /**\\n     * @dev Returns the subtraction of two unsigned integers, reverting on\\n     * overflow (when the result is negative).\\n     *\\n     * Counterpart to Solidity's `-` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Subtraction cannot overflow.\\n     */\\n    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\\n        require(b <= a, \\\"SafeMath: subtraction overflow\\\");\\n        return a - b;\\n    }\\n\\n    /**\\n     * @dev Returns the multiplication of two unsigned integers, reverting on\\n     * overflow.\\n     *\\n     * Counterpart to Solidity's `*` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Multiplication cannot overflow.\\n     */\\n    function mul(uint256 a, uint256 b) internal pure returns (uint256) {\\n        if (a == 0) return 0;\\n        uint256 c = a * b;\\n        require(c / a == b, \\\"SafeMath: multiplication overflow\\\");\\n        return c;\\n    }\\n\\n    /**\\n     * @dev Returns the integer division of two unsigned integers, reverting on\\n     * division by zero. The result is rounded towards zero.\\n     *\\n     * Counterpart to Solidity's `/` operator. Note: this function uses a\\n     * `revert` opcode (which leaves remaining gas untouched) while Solidity\\n     * uses an invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Requirements:\\n     *\\n     * - The divisor cannot be zero.\\n     */\\n    function div(uint256 a, uint256 b) internal pure returns (uint256) {\\n        require(b > 0, \\\"SafeMath: division by zero\\\");\\n        return a / b;\\n    }\\n\\n    /**\\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\\n     * reverting when dividing by zero.\\n     *\\n     * Counterpart to Solidity's `%` operator. This function uses a `revert`\\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\\n     * invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Requirements:\\n     *\\n     * - The divisor cannot be zero.\\n     */\\n    function mod(uint256 a, uint256 b) internal pure returns (uint256) {\\n        require(b > 0, \\\"SafeMath: modulo by zero\\\");\\n        return a % b;\\n    }\\n\\n    /**\\n     * @dev Returns the subtraction of two unsigned integers, reverting with custom message on\\n     * overflow (when the result is negative).\\n     *\\n     * CAUTION: This function is deprecated because it requires allocating memory for the error\\n     * message unnecessarily. For custom revert reasons use {trySub}.\\n     *\\n     * Counterpart to Solidity's `-` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Subtraction cannot overflow.\\n     */\\n    function sub(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\\n        require(b <= a, errorMessage);\\n        return a - b;\\n    }\\n\\n    /**\\n     * @dev Returns the integer division of two unsigned integers, reverting with custom message on\\n     * division by zero. The result is rounded towards zero.\\n     *\\n     * CAUTION: This function is deprecated because it requires allocating memory for the error\\n     * message unnecessarily. For custom revert reasons use {tryDiv}.\\n     *\\n     * Counterpart to Solidity's `/` operator. Note: this function uses a\\n     * `revert` opcode (which leaves remaining gas untouched) while Solidity\\n     * uses an invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Requirements:\\n     *\\n     * - The divisor cannot be zero.\\n     */\\n    function div(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\\n        require(b > 0, errorMessage);\\n        return a / b;\\n    }\\n\\n    /**\\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\\n     * reverting with custom message when dividing by zero.\\n     *\\n     * CAUTION: This function is deprecated because it requires allocating memory for the error\\n     * message unnecessarily. For custom revert reasons use {tryMod}.\\n     *\\n     * Counterpart to Solidity's `%` operator. This function uses a `revert`\\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\\n     * invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Requirements:\\n     *\\n     * - The divisor cannot be zero.\\n     */\\n    function mod(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\\n        require(b > 0, errorMessage);\\n        return a % b;\\n    }\\n}\\n\"\r\n    },\r\n    \"contracts/libraries/LibReignStorage.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: Apache-2.0\\npragma solidity 0.7.6;\\npragma experimental ABIEncoderV2;\\n\\nimport \\\"@openzeppelin/contracts/token/ERC20/IERC20.sol\\\";\\n\\nlibrary LibReignStorage {\\n\\n    bytes32 constant STORAGE_POSITION = keccak256(\\\"org.sovreign.reign.storage\\\");\\n\\n    struct Checkpoint {\\n        uint256 timestamp;\\n        uint256 amount;\\n    }\\n\\n    struct EpochBalance {\\n        uint128 epochId;\\n        uint128 multiplier;\\n        uint256 startBalance;\\n        uint256 newDeposits;\\n    }\\n\\n    struct Stake {\\n        uint256 timestamp;\\n        uint256 amount;\\n        uint256 expiryTimestamp;\\n        address delegatedTo;\\n        uint256 stakingBoost;\\n    }\\n\\n    struct Storage {\\n        bool initialized;\\n        // mapping of user address to history of Stake objects\\n        // every user action creates a new object in the history\\n        mapping(address => Stake[]) userStakeHistory;\\n        mapping(address => EpochBalance[]) userBalanceHistory;\\n        mapping(address => uint128) lastWithdrawEpochId;\\n        // array of reign staked Checkpoint\\n        // deposits/withdrawals create a new object in the history (max one per block)\\n        Checkpoint[] reignStakedHistory;\\n        // mapping of user address to history of delegated power\\n        // every delegate/stopDelegate call create a new checkpoint (max one per block)\\n        mapping(address => Checkpoint[]) delegatedPowerHistory;\\n        IERC20 reign; // the reign Token\\n        uint256 epoch1Start;\\n        uint256 epochDuration;\\n    }\\n\\n    function reignStorage() internal pure returns (Storage storage ds) {\\n        bytes32 position = STORAGE_POSITION;\\n        assembly {\\n            ds.slot := position\\n        }\\n    }\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/token/ERC20/IERC20.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity >=0.6.0 <0.8.0;\\n\\n/**\\n * @dev Interface of the ERC20 standard as defined in the EIP.\\n */\\ninterface IERC20 {\\n    /**\\n     * @dev Returns the amount of tokens in existence.\\n     */\\n    function totalSupply() external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the amount of tokens owned by `account`.\\n     */\\n    function balanceOf(address account) external view returns (uint256);\\n\\n    /**\\n     * @dev Moves `amount` tokens from the caller's account to `recipient`.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transfer(address recipient, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Returns the remaining number of tokens that `spender` will be\\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\\n     * zero by default.\\n     *\\n     * This value changes when {approve} or {transferFrom} are called.\\n     */\\n    function allowance(address owner, address spender) external view returns (uint256);\\n\\n    /**\\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\\n     * that someone may use both the old and the new allowance by unfortunate\\n     * transaction ordering. One possible solution to mitigate this race\\n     * condition is to first reduce the spender's allowance to 0 and set the\\n     * desired value afterwards:\\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address spender, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Moves `amount` tokens from `sender` to `recipient` using the\\n     * allowance mechanism. `amount` is then deducted from the caller's\\n     * allowance.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(address sender, address recipient, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\\n     * another (`to`).\\n     *\\n     * Note that `value` may be zero.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 value);\\n\\n    /**\\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\\n     * a call to {approve}. `value` is the new allowance.\\n     */\\n    event Approval(address indexed owner, address indexed spender, uint256 value);\\n}\\n\"\r\n    },\r\n    \"diamond-libraries/contracts/libraries/LibDiamond.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: Apache-2.0\\npragma solidity 0.7.6;\\npragma experimental ABIEncoderV2;\\n\\nimport \\\"../interfaces/IDiamondCut.sol\\\";\\nimport \\\"./LibDiamondStorage.sol\\\";\\n\\nlibrary LibDiamond {\\n    event DiamondCut(IDiamondCut.FacetCut[] _diamondCut, address _init, bytes _calldata);\\n\\n    // Internal function version of diamondCut\\n    // This code is almost the same as the external diamondCut,\\n    // except it is using 'Facet[] memory _diamondCut' instead of\\n    // 'Facet[] calldata _diamondCut'.\\n    // The code is duplicated to prevent copying calldata to memory which\\n    // causes an error for a two dimensional array.\\n    function diamondCut(\\n        IDiamondCut.FacetCut[] memory _diamondCut,\\n        address _init,\\n        bytes memory _calldata\\n    ) internal {\\n        uint256 selectorCount = LibDiamondStorage.diamondStorage().selectors.length;\\n\\n        for (uint256 facetIndex; facetIndex < _diamondCut.length; facetIndex++) {\\n            selectorCount = executeDiamondCut(selectorCount, _diamondCut[facetIndex]);\\n        }\\n\\n        emit DiamondCut(_diamondCut, _init, _calldata);\\n\\n        initializeDiamondCut(_init, _calldata);\\n    }\\n\\n    // executeDiamondCut takes one single FacetCut action and executes it\\n    // if FacetCutAction can't be identified, it reverts\\n    function executeDiamondCut(uint256 selectorCount, IDiamondCut.FacetCut memory cut) internal returns (uint256) {\\n        require(cut.functionSelectors.length > 0, \\\"LibDiamond: No selectors in facet to cut\\\");\\n\\n        if (cut.action == IDiamondCut.FacetCutAction.Add) {\\n            require(cut.facetAddress != address(0), \\\"LibDiamond: add facet address can't be address(0)\\\");\\n            enforceHasContractCode(cut.facetAddress, \\\"LibDiamond: add facet must have code\\\");\\n\\n            return _handleAddCut(selectorCount, cut);\\n        }\\n\\n        if (cut.action == IDiamondCut.FacetCutAction.Replace) {\\n            require(cut.facetAddress != address(0), \\\"LibDiamond: remove facet address can't be address(0)\\\");\\n            enforceHasContractCode(cut.facetAddress, \\\"LibDiamond: remove facet must have code\\\");\\n\\n            return _handleReplaceCut(selectorCount, cut);\\n        }\\n\\n        if (cut.action == IDiamondCut.FacetCutAction.Remove) {\\n            require(cut.facetAddress == address(0), \\\"LibDiamond: remove facet address must be address(0)\\\");\\n\\n            return _handleRemoveCut(selectorCount, cut);\\n        }\\n\\n        revert(\\\"LibDiamondCut: Incorrect FacetCutAction\\\");\\n    }\\n\\n    // _handleAddCut executes a cut with the type Add\\n    // it reverts if the selector already exists\\n    function _handleAddCut(uint256 selectorCount, IDiamondCut.FacetCut memory cut) internal returns (uint256) {\\n        LibDiamondStorage.DiamondStorage storage ds = LibDiamondStorage.diamondStorage();\\n\\n        for (uint256 selectorIndex; selectorIndex < cut.functionSelectors.length; selectorIndex++) {\\n            bytes4 selector = cut.functionSelectors[selectorIndex];\\n\\n            address oldFacetAddress = ds.facets[selector].facetAddress;\\n            require(oldFacetAddress == address(0), \\\"LibDiamondCut: Can't add function that already exists\\\");\\n\\n            ds.facets[selector] = LibDiamondStorage.Facet(\\n                cut.facetAddress,\\n                uint16(selectorCount)\\n            );\\n            ds.selectors.push(selector);\\n\\n            selectorCount++;\\n        }\\n\\n        return selectorCount;\\n    }\\n\\n    // _handleReplaceCut executes a cut with the type Replace\\n    // it does not allow replacing immutable functions\\n    // it does not allow replacing with the same function\\n    // it does not allow replacing a function that does not exist\\n    function _handleReplaceCut(uint256 selectorCount, IDiamondCut.FacetCut memory cut) internal returns (uint256) {\\n        LibDiamondStorage.DiamondStorage storage ds = LibDiamondStorage.diamondStorage();\\n\\n        for (uint256 selectorIndex; selectorIndex < cut.functionSelectors.length; selectorIndex++) {\\n            bytes4 selector = cut.functionSelectors[selectorIndex];\\n\\n            address oldFacetAddress = ds.facets[selector].facetAddress;\\n\\n            // only useful if immutable functions exist\\n            require(oldFacetAddress != address(this), \\\"LibDiamondCut: Can't replace immutable function\\\");\\n            require(oldFacetAddress != cut.facetAddress, \\\"LibDiamondCut: Can't replace function with same function\\\");\\n            require(oldFacetAddress != address(0), \\\"LibDiamondCut: Can't replace function that doesn't exist\\\");\\n\\n            // replace old facet address\\n            ds.facets[selector].facetAddress = cut.facetAddress;\\n        }\\n\\n        return selectorCount;\\n    }\\n\\n    // _handleRemoveCut executes a cut with the type Remove\\n    // for efficiency, the selector to be deleted is replaced with the last one and then the last one is popped\\n    // it reverts if the function doesn't exist or it's immutable\\n    function _handleRemoveCut(uint256 selectorCount, IDiamondCut.FacetCut memory cut) internal returns (uint256) {\\n        LibDiamondStorage.DiamondStorage storage ds = LibDiamondStorage.diamondStorage();\\n\\n        for (uint256 selectorIndex; selectorIndex < cut.functionSelectors.length; selectorIndex++) {\\n            bytes4 selector = cut.functionSelectors[selectorIndex];\\n\\n            LibDiamondStorage.Facet memory oldFacet = ds.facets[selector];\\n\\n            require(oldFacet.facetAddress != address(0), \\\"LibDiamondCut: Can't remove function that doesn't exist\\\");\\n            require(oldFacet.facetAddress != address(this), \\\"LibDiamondCut: Can't remove immutable function.\\\");\\n\\n            // replace selector with last selector\\n            if (oldFacet.selectorPosition != selectorCount - 1) {\\n                bytes4 lastSelector = ds.selectors[selectorCount - 1];\\n                ds.selectors[oldFacet.selectorPosition] = lastSelector;\\n                ds.facets[lastSelector].selectorPosition = oldFacet.selectorPosition;\\n            }\\n\\n            // delete last selector\\n            ds.selectors.pop();\\n            delete ds.facets[selector];\\n\\n            selectorCount--;\\n        }\\n\\n        return selectorCount;\\n    }\\n\\n    function initializeDiamondCut(address _init, bytes memory _calldata) internal {\\n        if (_init == address(0)) {\\n            require(_calldata.length == 0, \\\"LibDiamondCut: _init is address(0) but _calldata is not empty\\\");\\n            return;\\n        }\\n\\n        require(_calldata.length > 0, \\\"LibDiamondCut: _calldata is empty but _init is not address(0)\\\");\\n        if (_init != address(this)) {\\n            enforceHasContractCode(_init, \\\"LibDiamondCut: _init address has no code\\\");\\n        }\\n\\n        (bool success, bytes memory error) = _init.delegatecall(_calldata);\\n        if (!success) {\\n            if (error.length > 0) {\\n                // bubble up the error\\n                revert(string(error));\\n            } else {\\n                revert(\\\"LibDiamondCut: _init function reverted\\\");\\n            }\\n        }\\n    }\\n\\n    function enforceHasContractCode(address _contract, string memory _errorMessage) internal view {\\n        uint256 contractSize;\\n        assembly {\\n            contractSize := extcodesize(_contract)\\n        }\\n        require(contractSize > 0, _errorMessage);\\n    }\\n}\\n\"\r\n    },\r\n    \"diamond-libraries/contracts/libraries/LibOwnership.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: Apache-2.0\\npragma solidity 0.7.6;\\npragma experimental ABIEncoderV2;\\n\\nimport \\\"./LibDiamondStorage.sol\\\";\\n\\nlibrary LibOwnership {\\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\\n\\n    function setContractOwner(address _newOwner) internal {\\n        LibDiamondStorage.DiamondStorage storage ds = LibDiamondStorage.diamondStorage();\\n\\n        address previousOwner = ds.contractOwner;\\n        require(previousOwner != _newOwner, \\\"Previous owner and new owner must be different\\\");\\n\\n        ds.contractOwner = _newOwner;\\n\\n        emit OwnershipTransferred(previousOwner, _newOwner);\\n    }\\n\\n    function contractOwner() internal view returns (address contractOwner_) {\\n        contractOwner_ = LibDiamondStorage.diamondStorage().contractOwner;\\n    }\\n\\n    function enforceIsContractOwner() view internal {\\n        require(msg.sender == LibDiamondStorage.diamondStorage().contractOwner, \\\"Must be contract owner\\\");\\n    }\\n\\n    modifier onlyOwner {\\n        require(msg.sender == LibDiamondStorage.diamondStorage().contractOwner, \\\"Must be contract owner\\\");\\n        _;\\n    }\\n}\\n\"\r\n    },\r\n    \"diamond-libraries/contracts/interfaces/IDiamondLoupe.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: Apache-2.0\\npragma solidity 0.7.6;\\npragma experimental ABIEncoderV2;\\n\\n// A loupe is a small magnifying glass used to look at diamonds.\\n// These functions look at diamonds\\ninterface IDiamondLoupe {\\n    /// These functions are expected to be called frequently\\n    /// by tools.\\n\\n    struct Facet {\\n        address facetAddress;\\n        bytes4[] functionSelectors;\\n    }\\n\\n    /// @notice Gets all facet addresses and their four byte function selectors.\\n    /// @return facets_ Facet\\n    function facets() external view returns (Facet[] memory facets_);\\n\\n    /// @notice Gets all the function selectors supported by a specific facet.\\n    /// @param _facet The facet address.\\n    /// @return facetFunctionSelectors_\\n    function facetFunctionSelectors(address _facet) external view returns (bytes4[] memory facetFunctionSelectors_);\\n\\n    /// @notice Get all the facet addresses used by a diamond.\\n    /// @return facetAddresses_\\n    function facetAddresses() external view returns (address[] memory facetAddresses_);\\n\\n    /// @notice Gets the facet that supports the given selector.\\n    /// @dev If facet is not found return address(0).\\n    /// @param _functionSelector The function selector.\\n    /// @return facetAddress_ The facet address.\\n    function facetAddress(bytes4 _functionSelector) external view returns (address facetAddress_);\\n}\\n\"\r\n    },\r\n    \"diamond-libraries/contracts/interfaces/IERC165.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: Apache-2.0\\npragma solidity 0.7.6;\\npragma experimental ABIEncoderV2;\\n\\ninterface IERC165 {\\n    /// @notice Query if a contract implements an interface\\n    /// @param interfaceId The interface identifier, as specified in ERC-165\\n    /// @dev Interface identification is specified in ERC-165. This function\\n    ///  uses less than 30,000 gas.\\n    /// @return `true` if the contract implements `interfaceID` and\\n    ///  `interfaceID` is not 0xffffffff, `false` otherwise\\n    function supportsInterface(bytes4 interfaceId) external view returns (bool);\\n}\\n\"\r\n    },\r\n    \"diamond-libraries/contracts/interfaces/IERC173.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: Apache-2.0\\npragma solidity 0.7.6;\\n\\n/// @title ERC-173 Contract Ownership Standard\\n///  Note: the ERC-165 identifier for this interface is 0x7f5828d0\\n/* is ERC165 */\\ninterface IERC173 {\\n    /// @dev This emits when ownership of a contract changes.\\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\\n\\n    /// @notice Get the address of the owner\\n    /// @return owner_ The address of the owner.\\n    function owner() external view returns (address owner_);\\n\\n    /// @notice Set the address of the new owner of the contract\\n    /// @dev Set _newOwner to address(0) to renounce any ownership.\\n    /// @param _newOwner The address of the new owner of the contract\\n    function transferOwnership(address _newOwner) external;\\n}\\n\"\r\n    },\r\n    \"diamond-libraries/contracts/interfaces/IDiamondCut.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: Apache-2.0\\npragma solidity 0.7.6;\\npragma experimental ABIEncoderV2;\\n\\ninterface IDiamondCut {\\n    enum FacetCutAction {Add, Replace, Remove}\\n    // Add=0, Replace=1, Remove=2\\n\\n    struct FacetCut {\\n        address facetAddress;\\n        FacetCutAction action;\\n        bytes4[] functionSelectors;\\n    }\\n\\n    /// @notice Add/replace/remove any number of functions and optionally execute\\n    ///         a function with delegatecall\\n    /// @param _diamondCut Contains the facet addresses and function selectors\\n    /// @param _init The address of the contract or facet to execute _calldata\\n    /// @param _calldata A function call, including function selector and arguments\\n    ///                  _calldata is executed with delegatecall on _init\\n    function diamondCut(\\n        FacetCut[] calldata _diamondCut,\\n        address _init,\\n        bytes calldata _calldata\\n    ) external;\\n\\n    event DiamondCut(FacetCut[] _diamondCut, address _init, bytes _calldata);\\n}\\n\"\r\n    },\r\n    \"diamond-libraries/contracts/libraries/LibDiamondStorage.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: Apache-2.0\\npragma solidity 0.7.6;\\npragma experimental ABIEncoderV2;\\n\\nlibrary LibDiamondStorage {\\n    bytes32 constant DIAMOND_STORAGE_POSITION = keccak256(\\\"diamond.standard.diamond.storage\\\");\\n\\n    struct Facet {\\n        address facetAddress;\\n        uint16 selectorPosition;\\n    }\\n\\n    struct DiamondStorage {\\n        // function selector => facet address and selector position in selectors array\\n        mapping(bytes4 => Facet) facets;\\n        bytes4[] selectors;\\n\\n        // ERC165\\n        mapping(bytes4 => bool) supportedInterfaces;\\n\\n        // owner of the contract\\n        address contractOwner;\\n    }\\n\\n    function diamondStorage() internal pure returns (DiamondStorage storage ds) {\\n        bytes32 position = DIAMOND_STORAGE_POSITION;\\n        assembly {\\n            ds.slot := position\\n        }\\n    }\\n}\\n\"\r\n    },\r\n    \"contracts/governance/Parameters.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: Apache-2.0\\npragma solidity 0.7.6;\\n\\nabstract contract Parameters {\\n    // These values are set very low in the beginnign to allow the DAO to quickly interveen in case of\\n    // maliscious attacks or other problems.\\n    // Once the DAO has reched a more mature stage these will be voted to be 3-4 days each\\n    uint256 public warmUpDuration = 1 hours;\\n    uint256 public activeDuration = 1 hours;\\n    uint256 public queueDuration = 1 hours;\\n    uint256 public gracePeriodDuration = 1 hours;\\n\\n    uint256 public gradualWeightUpdate = 13300; // 2 days in blocks\\n\\n    uint256 public acceptanceThreshold = 60;\\n    uint256 public minQuorum = 40;\\n\\n    address public smartPool;\\n\\n    uint256 constant ACTIVATION_THRESHOLD = 1_500_000 * 10**18;\\n    uint256 constant PROPOSAL_MAX_ACTIONS = 10;\\n\\n    modifier onlyDAO() {\\n        require(msg.sender == address(this), \\\"Only DAO can call\\\");\\n        _;\\n    }\\n\\n    function setWarmUpDuration(uint256 period) public onlyDAO {\\n        warmUpDuration = period;\\n    }\\n\\n    function setSmartPoolAddress(address _smartPool) public onlyDAO {\\n        smartPool = _smartPool;\\n    }\\n\\n    function setSmartPoolInitial(address _smartPool) public {\\n        require(\\n            smartPool == address(0),\\n            \\\"Can only initialize smartPool address once\\\"\\n        );\\n        smartPool = _smartPool;\\n    }\\n\\n    function setGradualWeightUpdate(uint256 period) public onlyDAO {\\n        gradualWeightUpdate = period;\\n    }\\n\\n    function setActiveDuration(uint256 period) public onlyDAO {\\n        require(period >= 1 days, \\\"period must be > 0\\\");\\n        activeDuration = period;\\n    }\\n\\n    function setQueueDuration(uint256 period) public onlyDAO {\\n        queueDuration = period;\\n    }\\n\\n    function setGracePeriodDuration(uint256 period) public onlyDAO {\\n        require(period >= 1 days, \\\"period must be > 0\\\");\\n        gracePeriodDuration = period;\\n    }\\n\\n    function setAcceptanceThreshold(uint256 threshold) public onlyDAO {\\n        require(threshold <= 100, \\\"Maximum is 100.\\\");\\n        require(threshold > 50, \\\"Minimum is 50.\\\");\\n\\n        acceptanceThreshold = threshold;\\n    }\\n\\n    function setMinQuorum(uint256 quorum) public onlyDAO {\\n        require(quorum > 5, \\\"quorum must be greater than 5\\\");\\n        require(quorum <= 100, \\\"Maximum is 100.\\\");\\n\\n        minQuorum = quorum;\\n    }\\n}\\n\"\r\n    },\r\n    \"contracts/interfaces/ISmartPool.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: Apache-2.0\\npragma solidity 0.7.6;\\n\\nabstract contract BalancerOwnable {\\n    function setController(address controller) external virtual;\\n}\\n\\nabstract contract AbstractPool is BalancerOwnable {\\n    function setSwapFee(uint256 swapFee) external virtual;\\n\\n    function setPublicSwap(bool public_) external virtual;\\n\\n    function joinPool(uint256 poolAmountOut, uint256[] calldata maxAmountsIn)\\n        external\\n        virtual;\\n\\n    function totalSupply() external virtual returns (uint256);\\n}\\n\\nabstract contract ConfigurableRightsPool is AbstractPool {\\n    struct PoolParams {\\n        string poolTokenSymbol;\\n        string poolTokenName;\\n        address[] constituentTokens;\\n        uint256[] tokenBalances;\\n        uint256[] tokenWeights;\\n        uint256 swapFee;\\n    }\\n\\n    struct CrpParams {\\n        uint256 initialSupply;\\n        uint256 minimumWeightChangeBlockPeriod;\\n        uint256 addTokenTimeLockInBlocks;\\n    }\\n\\n    function createPool(\\n        uint256 initialSupply,\\n        uint256 minimumWeightChangeBlockPeriod,\\n        uint256 addTokenTimeLockInBlocks\\n    ) external virtual;\\n\\n    function createPool(uint256 initialSupply) external virtual;\\n\\n    function setCap(uint256 newCap) external virtual;\\n\\n    function updateWeight(address token, uint256 newWeight) external virtual;\\n\\n    function updateWeightsGradually(\\n        uint256[] calldata newWeights,\\n        uint256 startBlock,\\n        uint256 endBlock\\n    ) external virtual;\\n\\n    function commitAddToken(\\n        address token,\\n        uint256 balance,\\n        uint256 denormalizedWeight\\n    ) external virtual;\\n\\n    function applyAddToken() external virtual;\\n\\n    function removeToken(address token) external virtual;\\n\\n    function whitelistLiquidityProvider(address provider) external virtual;\\n\\n    function removeWhitelistedLiquidityProvider(address provider)\\n        external\\n        virtual;\\n\\n    function bPool() external view virtual returns (BPool);\\n}\\n\\nabstract contract BPool is AbstractPool {\\n    function finalize() external virtual;\\n\\n    function bind(\\n        address token,\\n        uint256 balance,\\n        uint256 denorm\\n    ) external virtual;\\n\\n    function rebind(\\n        address token,\\n        uint256 balance,\\n        uint256 denorm\\n    ) external virtual;\\n\\n    function unbind(address token) external virtual;\\n\\n    function isBound(address t) external view virtual returns (bool);\\n\\n    function getCurrentTokens()\\n        external\\n        view\\n        virtual\\n        returns (address[] memory);\\n\\n    function getFinalTokens() external view virtual returns (address[] memory);\\n\\n    function getBalance(address token) external view virtual returns (uint256);\\n\\n    function calcPoolOutGivenSingleIn(\\n        uint256 tokenBalanceIn,\\n        uint256 tokenWeightIn,\\n        uint256 poolSupply,\\n        uint256 totalWeight,\\n        uint256 tokenAmountIn,\\n        uint256 swapFee\\n    ) external pure virtual returns (uint256 poolAmountOut);\\n\\n    function calcPoolInGivenSingleOut(\\n        uint256,\\n        uint256,\\n        uint256,\\n        uint256,\\n        uint256,\\n        uint256\\n    ) external pure virtual returns (uint256 poolAmountIn);\\n\\n    function calcSingleOutGivenPoolIn(\\n        uint256,\\n        uint256,\\n        uint256,\\n        uint256,\\n        uint256,\\n        uint256\\n    ) external pure virtual returns (uint256 poolAmountIn);\\n\\n    function getDenormalizedWeight(address token)\\n        external\\n        view\\n        virtual\\n        returns (uint256);\\n\\n    function getTotalDenormalizedWeight()\\n        external\\n        view\\n        virtual\\n        returns (uint256);\\n\\n    function getSwapFee() external view virtual returns (uint256);\\n}\\n\\nabstract contract ISmartPool is BalancerOwnable {\\n    function updateWeightsGradually(\\n        uint256[] memory,\\n        uint256,\\n        uint256\\n    ) external virtual;\\n\\n    function joinswapExternAmountIn(\\n        address tokenIn,\\n        uint256 tokenAmountIn,\\n        uint256 minPoolAmountOut\\n    ) external virtual returns (uint256);\\n\\n    function exitswapPoolAmountIn(\\n        address tokenOut,\\n        uint256 poolAmountIn,\\n        uint256 minAmountOut\\n    ) external virtual returns (uint256);\\n\\n    function approve(address spender, uint256 value)\\n        external\\n        virtual\\n        returns (bool);\\n\\n    function balanceOf(address owner) external view virtual returns (uint256);\\n\\n    function totalSupply() external view virtual returns (uint256);\\n\\n    function setSwapFee(uint256 swapFee) external virtual;\\n\\n    function setPublicSwap(bool public_) external virtual;\\n\\n    function getDenormalizedWeight(address token)\\n        external\\n        view\\n        virtual\\n        returns (uint256);\\n\\n    function joinPool(uint256 poolAmountOut, uint256[] calldata maxAmountsIn)\\n        external\\n        virtual;\\n\\n    function exitPool(uint256 poolAmountIn, uint256[] calldata minAmountsOut)\\n        external\\n        virtual;\\n\\n    function bPool() external view virtual returns (BPool);\\n\\n    function applyAddToken() external virtual;\\n\\n    function getSmartPoolManagerVersion()\\n        external\\n        view\\n        virtual\\n        returns (address);\\n}\\n\\nabstract contract SmartPoolManager {\\n    function joinPool(\\n        ConfigurableRightsPool,\\n        BPool,\\n        uint256 poolAmountOut,\\n        uint256[] calldata maxAmountsIn\\n    ) external view virtual returns (uint256[] memory actualAmountsIn);\\n\\n    function exitPool(\\n        ConfigurableRightsPool self,\\n        BPool bPool,\\n        uint256 poolAmountIn,\\n        uint256[] calldata minAmountsOut\\n    )\\n        external\\n        view\\n        virtual\\n        returns (\\n            uint256 exitFee,\\n            uint256 pAiAfterExitFee,\\n            uint256[] memory actualAmountsOut\\n        );\\n\\n    function joinswapExternAmountIn(\\n        ConfigurableRightsPool self,\\n        BPool bPool,\\n        address tokenIn,\\n        uint256 tokenAmountIn,\\n        uint256 minPoolAmountOut\\n    ) external view virtual returns (uint256 poolAmountOut);\\n}\\n\"\r\n    }\r\n  },\r\n  \"settings\": {\r\n    \"optimizer\": {\r\n      \"enabled\": true,\r\n      \"runs\": 200\r\n    },\r\n    \"outputSelection\": {\r\n      \"*\": {\r\n        \"*\": [\r\n          \"evm.bytecode\",\r\n          \"evm.deployedBytecode\",\r\n          \"abi\"\r\n        ]\r\n      }\r\n    },\r\n    \"libraries\": {}\r\n  }\r\n}}","ABI":"[{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"proposalId\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"caller\",\"type\":\"address\"}],\"name\":\"AbrogationProposalExecuted\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"proposalId\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"caller\",\"type\":\"address\"}],\"name\":\"AbrogationProposalStarted\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"proposalId\",\"type\":\"uint256\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"bool\",\"name\":\"support\",\"type\":\"bool\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"power\",\"type\":\"uint256\"}],\"name\":\"AbrogationProposalVote\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"proposalId\",\"type\":\"uint256\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"}],\"name\":\"AbrogationProposalVoteCancelled\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"proposalId\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"caller\",\"type\":\"address\"}],\"name\":\"ProposalCanceled\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"proposalId\",\"type\":\"uint256\"}],\"name\":\"ProposalCreated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"proposalId\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"caller\",\"type\":\"address\"}],\"name\":\"ProposalExecuted\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"proposalId\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"caller\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"eta\",\"type\":\"uint256\"}],\"name\":\"ProposalQueued\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"proposalId\",\"type\":\"uint256\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"bool\",\"name\":\"support\",\"type\":\"bool\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"power\",\"type\":\"uint256\"}],\"name\":\"Vote\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"proposalId\",\"type\":\"uint256\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"}],\"name\":\"VoteCanceled\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"proposalId\",\"type\":\"uint256\"}],\"name\":\"abrogateProposal\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"proposalId\",\"type\":\"uint256\"}],\"name\":\"abrogationProposal_cancelVote\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"proposalId\",\"type\":\"uint256\"},{\"internalType\":\"bool\",\"name\":\"support\",\"type\":\"bool\"}],\"name\":\"abrogationProposal_castVote\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"abrogationProposals\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"creator\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"createTime\",\"type\":\"uint256\"},{\"internalType\":\"string\",\"name\":\"description\",\"type\":\"string\"},{\"internalType\":\"uint256\",\"name\":\"forVotes\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"againstVotes\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"acceptanceThreshold\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"activate\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"activeDuration\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"proposalId\",\"type\":\"uint256\"}],\"name\":\"cancelProposal\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"proposalId\",\"type\":\"uint256\"}],\"name\":\"cancelVote\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"proposalId\",\"type\":\"uint256\"},{\"internalType\":\"bool\",\"name\":\"support\",\"type\":\"bool\"}],\"name\":\"castVote\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"proposalId\",\"type\":\"uint256\"}],\"name\":\"execute\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"proposalId\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"voter\",\"type\":\"address\"}],\"name\":\"getAbrogationProposalReceipt\",\"outputs\":[{\"components\":[{\"internalType\":\"bool\",\"name\":\"hasVoted\",\"type\":\"bool\"},{\"internalType\":\"uint256\",\"name\":\"votes\",\"type\":\"uint256\"},{\"internalType\":\"bool\",\"name\":\"support\",\"type\":\"bool\"}],\"internalType\":\"struct ReignDAO.Receipt\",\"name\":\"\",\"type\":\"tuple\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"proposalId\",\"type\":\"uint256\"}],\"name\":\"getActions\",\"outputs\":[{\"internalType\":\"address[]\",\"name\":\"targets\",\"type\":\"address[]\"},{\"internalType\":\"uint256[]\",\"name\":\"values\",\"type\":\"uint256[]\"},{\"internalType\":\"string[]\",\"name\":\"signatures\",\"type\":\"string[]\"},{\"internalType\":\"bytes[]\",\"name\":\"calldatas\",\"type\":\"bytes[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"proposalId\",\"type\":\"uint256\"}],\"name\":\"getProposalParameters\",\"outputs\":[{\"components\":[{\"internalType\":\"uint256\",\"name\":\"warmUpDuration\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"activeDuration\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"queueDuration\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"gracePeriodDuration\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"acceptanceThreshold\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"minQuorum\",\"type\":\"uint256\"}],\"internalType\":\"struct ReignDAO.ProposalParameters\",\"name\":\"\",\"type\":\"tuple\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"proposalId\",\"type\":\"uint256\"}],\"name\":\"getProposalQuorum\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"proposalId\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"voter\",\"type\":\"address\"}],\"name\":\"getReceipt\",\"outputs\":[{\"components\":[{\"internalType\":\"bool\",\"name\":\"hasVoted\",\"type\":\"bool\"},{\"internalType\":\"uint256\",\"name\":\"votes\",\"type\":\"uint256\"},{\"internalType\":\"bool\",\"name\":\"support\",\"type\":\"bool\"}],\"internalType\":\"struct ReignDAO.Receipt\",\"name\":\"\",\"type\":\"tuple\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"gracePeriodDuration\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"gradualWeightUpdate\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_reignAddr\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_basketBalancer\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_smartPool\",\"type\":\"address\"}],\"name\":\"initialize\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"isActive\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"lastProposalId\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"latestProposalIds\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"minQuorum\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"proposals\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"id\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"proposer\",\"type\":\"address\"},{\"internalType\":\"string\",\"name\":\"description\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"title\",\"type\":\"string\"},{\"internalType\":\"uint256\",\"name\":\"createTime\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"eta\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"forVotes\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"againstVotes\",\"type\":\"uint256\"},{\"internalType\":\"bool\",\"name\":\"canceled\",\"type\":\"bool\"},{\"internalType\":\"bool\",\"name\":\"executed\",\"type\":\"bool\"},{\"components\":[{\"internalType\":\"uint256\",\"name\":\"warmUpDuration\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"activeDuration\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"queueDuration\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"gracePeriodDuration\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"acceptanceThreshold\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"minQuorum\",\"type\":\"uint256\"}],\"internalType\":\"struct ReignDAO.ProposalParameters\",\"name\":\"parameters\",\"type\":\"tuple\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address[]\",\"name\":\"targets\",\"type\":\"address[]\"},{\"internalType\":\"uint256[]\",\"name\":\"values\",\"type\":\"uint256[]\"},{\"internalType\":\"string[]\",\"name\":\"signatures\",\"type\":\"string[]\"},{\"internalType\":\"bytes[]\",\"name\":\"calldatas\",\"type\":\"bytes[]\"},{\"internalType\":\"string\",\"name\":\"description\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"title\",\"type\":\"string\"}],\"name\":\"propose\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"proposalId\",\"type\":\"uint256\"}],\"name\":\"queue\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"queueDuration\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"name\":\"queuedTransactions\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"threshold\",\"type\":\"uint256\"}],\"name\":\"setAcceptanceThreshold\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"period\",\"type\":\"uint256\"}],\"name\":\"setActiveDuration\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"period\",\"type\":\"uint256\"}],\"name\":\"setGracePeriodDuration\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"period\",\"type\":\"uint256\"}],\"name\":\"setGradualWeightUpdate\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"quorum\",\"type\":\"uint256\"}],\"name\":\"setMinQuorum\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"period\",\"type\":\"uint256\"}],\"name\":\"setQueueDuration\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_smartPool\",\"type\":\"address\"}],\"name\":\"setSmartPoolAddress\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_smartPool\",\"type\":\"address\"}],\"name\":\"setSmartPoolInitial\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"period\",\"type\":\"uint256\"}],\"name\":\"setWarmUpDuration\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"smartPool\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"proposalId\",\"type\":\"uint256\"},{\"internalType\":\"string\",\"name\":\"description\",\"type\":\"string\"}],\"name\":\"startAbrogationProposal\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"proposalId\",\"type\":\"uint256\"}],\"name\":\"state\",\"outputs\":[{\"internalType\":\"enum ReignDAO.ProposalState\",\"name\":\"\",\"type\":\"uint8\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"triggerApplyAddToken\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"triggerWeightUpdate\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"warmUpDuration\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"stateMutability\":\"payable\",\"type\":\"receive\"}]","ContractName":"ReignDAO","CompilerVersion":"v0.7.6+commit.7338295f","OptimizationUsed":"1","Runs":"200","ConstructorArguments":"","EVMVersion":"Default","Library":"","LicenseType":"","Proxy":"0","Implementation":"","SwarmSource":""}]}