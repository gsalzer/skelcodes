{"status":"1","message":"OK","result":[{"SourceCode":"// oooooo   oooooo     oooo ooooo ooooooooooooo   .oooooo.   ooooo   ooooo oooooooooooo  .oooooo..o                                      \r\n//  `888.    `888.     .8'  `888' 8'   888   `8  d8P'  `Y8b  `888'   `888' `888'     `8 d8P'    `Y8                                      \r\n//   `888.   .8888.   .8'    888       888      888           888     888   888         Y88bo.                                           \r\n//    `888  .8'`888. .8'     888       888      888           888ooooo888   888oooo8     `\"Y8888o.                                       \r\n//     `888.8'  `888.8'      888       888      888           888     888   888    \"         `\"Y88b                                      \r\n//      `888'    `888'       888       888      `88b    ooo   888     888   888       o oo     .d8P                                      \r\n//       `8'      `8'       o888o     o888o      `Y8bood8P'  o888o   o888o o888ooooood8 8\"\"88888P'                                       \r\n//                                                                                                                                       \r\n//                                                                                                                                       \r\n//                                                                                                                                       \r\n//       .o.       ooooo      ooo oooooooooo.        oooooooooo.   oooooooooooo ooo        ooooo   .oooooo.   ooooo      ooo  .oooooo..o \r\n//      .888.      `888b.     `8' `888'   `Y8b       `888'   `Y8b  `888'     `8 `88.       .888'  d8P'  `Y8b  `888b.     `8' d8P'    `Y8 \r\n//     .8\"888.      8 `88b.    8   888      888       888      888  888          888b     d'888  888      888  8 `88b.    8  Y88bo.      \r\n//    .8' `888.     8   `88b.  8   888      888       888      888  888oooo8     8 Y88. .P  888  888      888  8   `88b.  8   `\"Y8888o.  \r\n//   .88ooo8888.    8     `88b.8   888      888       888      888  888    \"     8  `888'   888  888      888  8     `88b.8       `\"Y88b \r\n//  .8'     `888.   8       `888   888     d88'       888     d88'  888       o  8    Y     888  `88b    d88'  8       `888  oo     .d8P \r\n// o88o     o8888o o8o        `8  o888bood8P'        o888bood8P'   o888ooooood8 o8o        o888o  `Y8bood8P'  o8o        `8  8\"\"88888P'  \r\n//                                                                                                                                       \r\n//                                                                                                                                       \r\n//     \r\n//   .oooooo.     .oooooo.   oooooo     oooo oooooooooooo ooooo      ooo                                                                 \r\n//  d8P'  `Y8b   d8P'  `Y8b   `888.     .8'  `888'     `8 `888b.     `8'                                                                 \r\n// 888          888      888   `888.   .8'    888          8 `88b.    8                                                                  \r\n// 888          888      888    `888. .8'     888oooo8     8   `88b.  8                                                                  \r\n// 888          888      888     `888.8'      888    \"     8     `88b.8                                                                  \r\n// `88b    ooo  `88b    d88'      `888'       888       o  8       `888                                                                  \r\n//  `Y8bood8P'   `Y8bood8P'        `8'       o888ooooood8 o8o        `8    \r\n\r\n\r\n// Credit all resources to Wizards and Dragons\r\n// SPDX-License-Identifier: MIT\r\n// http://discord.gg/eFnUheap\r\n\r\n\r\n// Address.sol\r\n\r\npragma solidity ^0.8.0;\r\n\r\n/**\r\n * @dev Collection of functions related to the address type\r\n */\r\nlibrary Address {\r\n    /**\r\n     * @dev Returns true if `account` is a contract.\r\n     *\r\n     * [IMPORTANT]\r\n     * ====\r\n     * It is unsafe to assume that an address for which this function returns\r\n     * false is an externally-owned account (EOA) and not a contract.\r\n     *\r\n     * Among others, `isContract` will return false for the following\r\n     * types of addresses:\r\n     *\r\n     *  - an externally-owned account\r\n     *  - a contract in construction\r\n     *  - an address where a contract will be created\r\n     *  - an address where a contract lived, but was destroyed\r\n     * ====\r\n     */\r\n    function isContract(address account) internal view returns (bool) {\r\n        // This method relies on extcodesize, which returns 0 for contracts in\r\n        // construction, since the code is only stored at the end of the\r\n        // constructor execution.\r\n\r\n        uint256 size;\r\n        assembly {\r\n            size := extcodesize(account)\r\n        }\r\n        return size > 0;\r\n    }\r\n\r\n    /**\r\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\r\n     * `recipient`, forwarding all available gas and reverting on errors.\r\n     *\r\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\r\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\r\n     * imposed by `transfer`, making them unable to receive funds via\r\n     * `transfer`. {sendValue} removes this limitation.\r\n     *\r\n     * https://diligence.consensys.net/posts/2019/09/stop-using-soliditys-transfer-now/[Learn more].\r\n     *\r\n     * IMPORTANT: because control is transferred to `recipient`, care must be\r\n     * taken to not create reentrancy vulnerabilities. Consider using\r\n     * {ReentrancyGuard} or the\r\n     * https://solidity.readthedocs.io/en/v0.5.11/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\r\n     */\r\n    function sendValue(address payable recipient, uint256 amount) internal {\r\n        require(address(this).balance >= amount, \"Address: insufficient balance\");\r\n\r\n        (bool success, ) = recipient.call{value: amount}(\"\");\r\n        require(success, \"Address: unable to send value, recipient may have reverted\");\r\n    }\r\n\r\n    /**\r\n     * @dev Performs a Solidity function call using a low level `call`. A\r\n     * plain `call` is an unsafe replacement for a function call: use this\r\n     * function instead.\r\n     *\r\n     * If `target` reverts with a revert reason, it is bubbled up by this\r\n     * function (like regular Solidity function calls).\r\n     *\r\n     * Returns the raw returned data. To convert to the expected return value,\r\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - `target` must be a contract.\r\n     * - calling `target` with `data` must not revert.\r\n     *\r\n     * _Available since v3.1._\r\n     */\r\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\r\n        return functionCall(target, data, \"Address: low-level call failed\");\r\n    }\r\n\r\n    /**\r\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\r\n     * `errorMessage` as a fallback revert reason when `target` reverts.\r\n     *\r\n     * _Available since v3.1._\r\n     */\r\n    function functionCall(\r\n        address target,\r\n        bytes memory data,\r\n        string memory errorMessage\r\n    ) internal returns (bytes memory) {\r\n        return functionCallWithValue(target, data, 0, errorMessage);\r\n    }\r\n\r\n    /**\r\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\r\n     * but also transferring `value` wei to `target`.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - the calling contract must have an ETH balance of at least `value`.\r\n     * - the called Solidity function must be `payable`.\r\n     *\r\n     * _Available since v3.1._\r\n     */\r\n    function functionCallWithValue(\r\n        address target,\r\n        bytes memory data,\r\n        uint256 value\r\n    ) internal returns (bytes memory) {\r\n        return functionCallWithValue(target, data, value, \"Address: low-level call with value failed\");\r\n    }\r\n\r\n    /**\r\n     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\r\n     * with `errorMessage` as a fallback revert reason when `target` reverts.\r\n     *\r\n     * _Available since v3.1._\r\n     */\r\n    function functionCallWithValue(\r\n        address target,\r\n        bytes memory data,\r\n        uint256 value,\r\n        string memory errorMessage\r\n    ) internal returns (bytes memory) {\r\n        require(address(this).balance >= value, \"Address: insufficient balance for call\");\r\n        require(isContract(target), \"Address: call to non-contract\");\r\n\r\n        (bool success, bytes memory returndata) = target.call{value: value}(data);\r\n        return verifyCallResult(success, returndata, errorMessage);\r\n    }\r\n\r\n    /**\r\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\r\n     * but performing a static call.\r\n     *\r\n     * _Available since v3.3._\r\n     */\r\n    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\r\n        return functionStaticCall(target, data, \"Address: low-level static call failed\");\r\n    }\r\n\r\n    /**\r\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\r\n     * but performing a static call.\r\n     *\r\n     * _Available since v3.3._\r\n     */\r\n    function functionStaticCall(\r\n        address target,\r\n        bytes memory data,\r\n        string memory errorMessage\r\n    ) internal view returns (bytes memory) {\r\n        require(isContract(target), \"Address: static call to non-contract\");\r\n\r\n        (bool success, bytes memory returndata) = target.staticcall(data);\r\n        return verifyCallResult(success, returndata, errorMessage);\r\n    }\r\n\r\n    /**\r\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\r\n     * but performing a delegate call.\r\n     *\r\n     * _Available since v3.4._\r\n     */\r\n    function functionDelegateCall(address target, bytes memory data) internal returns (bytes memory) {\r\n        return functionDelegateCall(target, data, \"Address: low-level delegate call failed\");\r\n    }\r\n\r\n    /**\r\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\r\n     * but performing a delegate call.\r\n     *\r\n     * _Available since v3.4._\r\n     */\r\n    function functionDelegateCall(\r\n        address target,\r\n        bytes memory data,\r\n        string memory errorMessage\r\n    ) internal returns (bytes memory) {\r\n        require(isContract(target), \"Address: delegate call to non-contract\");\r\n\r\n        (bool success, bytes memory returndata) = target.delegatecall(data);\r\n        return verifyCallResult(success, returndata, errorMessage);\r\n    }\r\n\r\n    /**\r\n     * @dev Tool to verifies that a low level call was successful, and revert if it wasn't, either by bubbling the\r\n     * revert reason using the provided one.\r\n     *\r\n     * _Available since v4.3._\r\n     */\r\n    function verifyCallResult(\r\n        bool success,\r\n        bytes memory returndata,\r\n        string memory errorMessage\r\n    ) internal pure returns (bytes memory) {\r\n        if (success) {\r\n            return returndata;\r\n        } else {\r\n            // Look for revert reason and bubble it up if present\r\n            if (returndata.length > 0) {\r\n                // The easiest way to bubble the revert reason is using memory via assembly\r\n\r\n                assembly {\r\n                    let returndata_size := mload(returndata)\r\n                    revert(add(32, returndata), returndata_size)\r\n                }\r\n            } else {\r\n                revert(errorMessage);\r\n            }\r\n        }\r\n    }\r\n}\r\n\r\n// Context.sol\r\n\r\n\r\npragma solidity ^0.8.0;\r\n\r\n/**\r\n * @dev Provides information about the current execution context, including the\r\n * sender of the transaction and its data. While these are generally available\r\n * via msg.sender and msg.data, they should not be accessed in such a direct\r\n * manner, since when dealing with meta-transactions the account sending and\r\n * paying for execution may not be the actual sender (as far as an application\r\n * is concerned).\r\n *\r\n * This contract is only required for intermediate, library-like contracts.\r\n */\r\nabstract contract Context {\r\n    function _msgSender() internal view virtual returns (address) {\r\n        return msg.sender;\r\n    }\r\n\r\n    function _msgData() internal view virtual returns (bytes calldata) {\r\n        return msg.data;\r\n    }\r\n}\r\n\r\n// Counters.sol\r\n\r\n\r\npragma solidity ^0.8.0;\r\n\r\n/**\r\n * @title Counters\r\n * @author Matt Condon (@shrugs)\r\n * @dev Provides counters that can only be incremented, decremented or reset. This can be used e.g. to track the number\r\n * of elements in a mapping, issuing ERC721 ids, or counting request ids.\r\n *\r\n * Include with `using Counters for Counters.Counter;`\r\n */\r\nlibrary Counters {\r\n    struct Counter {\r\n        // This variable should never be directly accessed by users of the library: interactions must be restricted to\r\n        // the library's function. As of Solidity v0.5.2, this cannot be enforced, though there is a proposal to add\r\n        // this feature: see https://github.com/ethereum/solidity/issues/4637\r\n        uint256 _value; // default: 0\r\n    }\r\n\r\n    function current(Counter storage counter) internal view returns (uint256) {\r\n        return counter._value;\r\n    }\r\n\r\n    function increment(Counter storage counter) internal {\r\n        unchecked {\r\n            counter._value += 1;\r\n        }\r\n    }\r\n\r\n    function decrement(Counter storage counter) internal {\r\n        uint256 value = counter._value;\r\n        require(value > 0, \"Counter: decrement overflow\");\r\n        unchecked {\r\n            counter._value = value - 1;\r\n        }\r\n    }\r\n\r\n    function reset(Counter storage counter) internal {\r\n        counter._value = 0;\r\n    }\r\n}\r\n\r\n// EnumerableSet.sol\r\n\r\n\r\npragma solidity ^0.8.0;\r\n\r\n/**\r\n * @dev Library for managing\r\n * https://en.wikipedia.org/wiki/Set_(abstract_data_type)[sets] of primitive\r\n * types.\r\n *\r\n * Sets have the following properties:\r\n *\r\n * - Elements are added, removed, and checked for existence in constant time\r\n * (O(1)).\r\n * - Elements are enumerated in O(n). No guarantees are made on the ordering.\r\n *\r\n * ```\r\n * contract Example {\r\n *     // Add the library methods\r\n *     using EnumerableSet for EnumerableSet.AddressSet;\r\n *\r\n *     // Declare a set state variable\r\n *     EnumerableSet.AddressSet private mySet;\r\n * }\r\n * ```\r\n *\r\n * As of v3.3.0, sets of type `bytes32` (`Bytes32Set`), `address` (`AddressSet`)\r\n * and `uint256` (`UintSet`) are supported.\r\n */\r\nlibrary EnumerableSet {\r\n    // To implement this library for multiple types with as little code\r\n    // repetition as possible, we write it in terms of a generic Set type with\r\n    // bytes32 values.\r\n    // The Set implementation uses private functions, and user-facing\r\n    // implementations (such as AddressSet) are just wrappers around the\r\n    // underlying Set.\r\n    // This means that we can only create new EnumerableSets for types that fit\r\n    // in bytes32.\r\n\r\n    struct Set {\r\n        // Storage of set values\r\n        bytes32[] _values;\r\n        // Position of the value in the `values` array, plus 1 because index 0\r\n        // means a value is not in the set.\r\n        mapping(bytes32 => uint256) _indexes;\r\n    }\r\n\r\n    /**\r\n     * @dev Add a value to a set. O(1).\r\n     *\r\n     * Returns true if the value was added to the set, that is if it was not\r\n     * already present.\r\n     */\r\n    function _add(Set storage set, bytes32 value) private returns (bool) {\r\n        if (!_contains(set, value)) {\r\n            set._values.push(value);\r\n            // The value is stored at length-1, but we add 1 to all indexes\r\n            // and use 0 as a sentinel value\r\n            set._indexes[value] = set._values.length;\r\n            return true;\r\n        } else {\r\n            return false;\r\n        }\r\n    }\r\n\r\n    /**\r\n     * @dev Removes a value from a set. O(1).\r\n     *\r\n     * Returns true if the value was removed from the set, that is if it was\r\n     * present.\r\n     */\r\n    function _remove(Set storage set, bytes32 value) private returns (bool) {\r\n        // We read and store the value's index to prevent multiple reads from the same storage slot\r\n        uint256 valueIndex = set._indexes[value];\r\n\r\n        if (valueIndex != 0) {\r\n            // Equivalent to contains(set, value)\r\n            // To delete an element from the _values array in O(1), we swap the element to delete with the last one in\r\n            // the array, and then remove the last element (sometimes called as 'swap and pop').\r\n            // This modifies the order of the array, as noted in {at}.\r\n\r\n            uint256 toDeleteIndex = valueIndex - 1;\r\n            uint256 lastIndex = set._values.length - 1;\r\n\r\n            if (lastIndex != toDeleteIndex) {\r\n                bytes32 lastvalue = set._values[lastIndex];\r\n\r\n                // Move the last value to the index where the value to delete is\r\n                set._values[toDeleteIndex] = lastvalue;\r\n                // Update the index for the moved value\r\n                set._indexes[lastvalue] = valueIndex; // Replace lastvalue's index to valueIndex\r\n            }\r\n\r\n            // Delete the slot where the moved value was stored\r\n            set._values.pop();\r\n\r\n            // Delete the index for the deleted slot\r\n            delete set._indexes[value];\r\n\r\n            return true;\r\n        } else {\r\n            return false;\r\n        }\r\n    }\r\n\r\n    /**\r\n     * @dev Returns true if the value is in the set. O(1).\r\n     */\r\n    function _contains(Set storage set, bytes32 value) private view returns (bool) {\r\n        return set._indexes[value] != 0;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the number of values on the set. O(1).\r\n     */\r\n    function _length(Set storage set) private view returns (uint256) {\r\n        return set._values.length;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the value stored at position `index` in the set. O(1).\r\n     *\r\n     * Note that there are no guarantees on the ordering of values inside the\r\n     * array, and it may change when more values are added or removed.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - `index` must be strictly less than {length}.\r\n     */\r\n    function _at(Set storage set, uint256 index) private view returns (bytes32) {\r\n        return set._values[index];\r\n    }\r\n\r\n    /**\r\n     * @dev Return the entire set in an array\r\n     *\r\n     * WARNING: This operation will copy the entire storage to memory, which can be quite expensive. This is designed\r\n     * to mostly be used by view accessors that are queried without any gas fees. Developers should keep in mind that\r\n     * this function has an unbounded cost, and using it as part of a state-changing function may render the function\r\n     * uncallable if the set grows to a point where copying to memory consumes too much gas to fit in a block.\r\n     */\r\n    function _values(Set storage set) private view returns (bytes32[] memory) {\r\n        return set._values;\r\n    }\r\n\r\n    // Bytes32Set\r\n\r\n    struct Bytes32Set {\r\n        Set _inner;\r\n    }\r\n\r\n    /**\r\n     * @dev Add a value to a set. O(1).\r\n     *\r\n     * Returns true if the value was added to the set, that is if it was not\r\n     * already present.\r\n     */\r\n    function add(Bytes32Set storage set, bytes32 value) internal returns (bool) {\r\n        return _add(set._inner, value);\r\n    }\r\n\r\n    /**\r\n     * @dev Removes a value from a set. O(1).\r\n     *\r\n     * Returns true if the value was removed from the set, that is if it was\r\n     * present.\r\n     */\r\n    function remove(Bytes32Set storage set, bytes32 value) internal returns (bool) {\r\n        return _remove(set._inner, value);\r\n    }\r\n\r\n    /**\r\n     * @dev Returns true if the value is in the set. O(1).\r\n     */\r\n    function contains(Bytes32Set storage set, bytes32 value) internal view returns (bool) {\r\n        return _contains(set._inner, value);\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the number of values in the set. O(1).\r\n     */\r\n    function length(Bytes32Set storage set) internal view returns (uint256) {\r\n        return _length(set._inner);\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the value stored at position `index` in the set. O(1).\r\n     *\r\n     * Note that there are no guarantees on the ordering of values inside the\r\n     * array, and it may change when more values are added or removed.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - `index` must be strictly less than {length}.\r\n     */\r\n    function at(Bytes32Set storage set, uint256 index) internal view returns (bytes32) {\r\n        return _at(set._inner, index);\r\n    }\r\n\r\n    /**\r\n     * @dev Return the entire set in an array\r\n     *\r\n     * WARNING: This operation will copy the entire storage to memory, which can be quite expensive. This is designed\r\n     * to mostly be used by view accessors that are queried without any gas fees. Developers should keep in mind that\r\n     * this function has an unbounded cost, and using it as part of a state-changing function may render the function\r\n     * uncallable if the set grows to a point where copying to memory consumes too much gas to fit in a block.\r\n     */\r\n    function values(Bytes32Set storage set) internal view returns (bytes32[] memory) {\r\n        return _values(set._inner);\r\n    }\r\n\r\n    // AddressSet\r\n\r\n    struct AddressSet {\r\n        Set _inner;\r\n    }\r\n\r\n    /**\r\n     * @dev Add a value to a set. O(1).\r\n     *\r\n     * Returns true if the value was added to the set, that is if it was not\r\n     * already present.\r\n     */\r\n    function add(AddressSet storage set, address value) internal returns (bool) {\r\n        return _add(set._inner, bytes32(uint256(uint160(value))));\r\n    }\r\n\r\n    /**\r\n     * @dev Removes a value from a set. O(1).\r\n     *\r\n     * Returns true if the value was removed from the set, that is if it was\r\n     * present.\r\n     */\r\n    function remove(AddressSet storage set, address value) internal returns (bool) {\r\n        return _remove(set._inner, bytes32(uint256(uint160(value))));\r\n    }\r\n\r\n    /**\r\n     * @dev Returns true if the value is in the set. O(1).\r\n     */\r\n    function contains(AddressSet storage set, address value) internal view returns (bool) {\r\n        return _contains(set._inner, bytes32(uint256(uint160(value))));\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the number of values in the set. O(1).\r\n     */\r\n    function length(AddressSet storage set) internal view returns (uint256) {\r\n        return _length(set._inner);\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the value stored at position `index` in the set. O(1).\r\n     *\r\n     * Note that there are no guarantees on the ordering of values inside the\r\n     * array, and it may change when more values are added or removed.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - `index` must be strictly less than {length}.\r\n     */\r\n    function at(AddressSet storage set, uint256 index) internal view returns (address) {\r\n        return address(uint160(uint256(_at(set._inner, index))));\r\n    }\r\n\r\n    /**\r\n     * @dev Return the entire set in an array\r\n     *\r\n     * WARNING: This operation will copy the entire storage to memory, which can be quite expensive. This is designed\r\n     * to mostly be used by view accessors that are queried without any gas fees. Developers should keep in mind that\r\n     * this function has an unbounded cost, and using it as part of a state-changing function may render the function\r\n     * uncallable if the set grows to a point where copying to memory consumes too much gas to fit in a block.\r\n     */\r\n    function values(AddressSet storage set) internal view returns (address[] memory) {\r\n        bytes32[] memory store = _values(set._inner);\r\n        address[] memory result;\r\n\r\n        assembly {\r\n            result := store\r\n        }\r\n\r\n        return result;\r\n    }\r\n\r\n    // UintSet\r\n\r\n    struct UintSet {\r\n        Set _inner;\r\n    }\r\n\r\n    /**\r\n     * @dev Add a value to a set. O(1).\r\n     *\r\n     * Returns true if the value was added to the set, that is if it was not\r\n     * already present.\r\n     */\r\n    function add(UintSet storage set, uint256 value) internal returns (bool) {\r\n        return _add(set._inner, bytes32(value));\r\n    }\r\n\r\n    /**\r\n     * @dev Removes a value from a set. O(1).\r\n     *\r\n     * Returns true if the value was removed from the set, that is if it was\r\n     * present.\r\n     */\r\n    function remove(UintSet storage set, uint256 value) internal returns (bool) {\r\n        return _remove(set._inner, bytes32(value));\r\n    }\r\n\r\n    /**\r\n     * @dev Returns true if the value is in the set. O(1).\r\n     */\r\n    function contains(UintSet storage set, uint256 value) internal view returns (bool) {\r\n        return _contains(set._inner, bytes32(value));\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the number of values on the set. O(1).\r\n     */\r\n    function length(UintSet storage set) internal view returns (uint256) {\r\n        return _length(set._inner);\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the value stored at position `index` in the set. O(1).\r\n     *\r\n     * Note that there are no guarantees on the ordering of values inside the\r\n     * array, and it may change when more values are added or removed.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - `index` must be strictly less than {length}.\r\n     */\r\n    function at(UintSet storage set, uint256 index) internal view returns (uint256) {\r\n        return uint256(_at(set._inner, index));\r\n    }\r\n\r\n    /**\r\n     * @dev Return the entire set in an array\r\n     *\r\n     * WARNING: This operation will copy the entire storage to memory, which can be quite expensive. This is designed\r\n     * to mostly be used by view accessors that are queried without any gas fees. Developers should keep in mind that\r\n     * this function has an unbounded cost, and using it as part of a state-changing function may render the function\r\n     * uncallable if the set grows to a point where copying to memory consumes too much gas to fit in a block.\r\n     */\r\n    function values(UintSet storage set) internal view returns (uint256[] memory) {\r\n        bytes32[] memory store = _values(set._inner);\r\n        uint256[] memory result;\r\n\r\n        assembly {\r\n            result := store\r\n        }\r\n\r\n        return result;\r\n    }\r\n}\r\n\r\n// IERC165.sol\r\n\r\n\r\npragma solidity ^0.8.0;\r\n\r\n/**\r\n * @dev Interface of the ERC165 standard, as defined in the\r\n * https://eips.ethereum.org/EIPS/eip-165[EIP].\r\n *\r\n * Implementers can declare support of contract interfaces, which can then be\r\n * queried by others ({ERC165Checker}).\r\n *\r\n * For an implementation, see {ERC165}.\r\n */\r\ninterface IERC165 {\r\n    /**\r\n     * @dev Returns true if this contract implements the interface defined by\r\n     * `interfaceId`. See the corresponding\r\n     * https://eips.ethereum.org/EIPS/eip-165#how-interfaces-are-identified[EIP section]\r\n     * to learn more about how these ids are created.\r\n     *\r\n     * This function call must use less than 30 000 gas.\r\n     */\r\n    function supportsInterface(bytes4 interfaceId) external view returns (bool);\r\n}\r\n\r\n\r\n// ERC165.sol\r\n\r\n\r\npragma solidity ^0.8.0;\r\n\r\n\r\n/**\r\n * @dev Implementation of the {IERC165} interface.\r\n *\r\n * Contracts that want to implement ERC165 should inherit from this contract and override {supportsInterface} to check\r\n * for the additional interface id that will be supported. For example:\r\n *\r\n * ```solidity\r\n * function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {\r\n *     return interfaceId == type(MyInterface).interfaceId || super.supportsInterface(interfaceId);\r\n * }\r\n * ```\r\n *\r\n * Alternatively, {ERC165Storage} provides an easier to use but more expensive implementation.\r\n */\r\nabstract contract ERC165 is IERC165 {\r\n    /**\r\n     * @dev See {IERC165-supportsInterface}.\r\n     */\r\n    function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {\r\n        return interfaceId == type(IERC165).interfaceId;\r\n    }\r\n}\r\n\r\n// IERC721.sol\r\n\r\n\r\npragma solidity ^0.8.0;\r\n\r\n\r\n/**\r\n * @dev Required interface of an ERC721 compliant contract.\r\n */\r\ninterface IERC721 is IERC165 {\r\n    /**\r\n     * @dev Emitted when `tokenId` token is transferred from `from` to `to`.\r\n     */\r\n    event Transfer(address indexed from, address indexed to, uint256 indexed tokenId);\r\n\r\n    /**\r\n     * @dev Emitted when `owner` enables `approved` to manage the `tokenId` token.\r\n     */\r\n    event Approval(address indexed owner, address indexed approved, uint256 indexed tokenId);\r\n\r\n    /**\r\n     * @dev Emitted when `owner` enables or disables (`approved`) `operator` to manage all of its assets.\r\n     */\r\n    event ApprovalForAll(address indexed owner, address indexed operator, bool approved);\r\n\r\n    /**\r\n     * @dev Returns the number of tokens in ``owner``'s account.\r\n     */\r\n    function balanceOf(address owner) external view returns (uint256 balance);\r\n\r\n    /**\r\n     * @dev Returns the owner of the `tokenId` token.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - `tokenId` must exist.\r\n     */\r\n    function ownerOf(uint256 tokenId) external view returns (address owner);\r\n\r\n    /**\r\n     * @dev Safely transfers `tokenId` token from `from` to `to`, checking first that contract recipients\r\n     * are aware of the ERC721 protocol to prevent tokens from being forever locked.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - `from` cannot be the zero address.\r\n     * - `to` cannot be the zero address.\r\n     * - `tokenId` token must exist and be owned by `from`.\r\n     * - If the caller is not `from`, it must be have been allowed to move this token by either {approve} or {setApprovalForAll}.\r\n     * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer.\r\n     *\r\n     * Emits a {Transfer} event.\r\n     */\r\n    function safeTransferFrom(\r\n        address from,\r\n        address to,\r\n        uint256 tokenId\r\n    ) external;\r\n\r\n    /**\r\n     * @dev Transfers `tokenId` token from `from` to `to`.\r\n     *\r\n     * WARNING: Usage of this method is discouraged, use {safeTransferFrom} whenever possible.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - `from` cannot be the zero address.\r\n     * - `to` cannot be the zero address.\r\n     * - `tokenId` token must be owned by `from`.\r\n     * - If the caller is not `from`, it must be approved to move this token by either {approve} or {setApprovalForAll}.\r\n     *\r\n     * Emits a {Transfer} event.\r\n     */\r\n    function transferFrom(\r\n        address from,\r\n        address to,\r\n        uint256 tokenId\r\n    ) external;\r\n\r\n    /**\r\n     * @dev Gives permission to `to` to transfer `tokenId` token to another account.\r\n     * The approval is cleared when the token is transferred.\r\n     *\r\n     * Only a single account can be approved at a time, so approving the zero address clears previous approvals.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - The caller must own the token or be an approved operator.\r\n     * - `tokenId` must exist.\r\n     *\r\n     * Emits an {Approval} event.\r\n     */\r\n    function approve(address to, uint256 tokenId) external;\r\n\r\n    /**\r\n     * @dev Returns the account approved for `tokenId` token.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - `tokenId` must exist.\r\n     */\r\n    function getApproved(uint256 tokenId) external view returns (address operator);\r\n\r\n    /**\r\n     * @dev Approve or remove `operator` as an operator for the caller.\r\n     * Operators can call {transferFrom} or {safeTransferFrom} for any token owned by the caller.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - The `operator` cannot be the caller.\r\n     *\r\n     * Emits an {ApprovalForAll} event.\r\n     */\r\n    function setApprovalForAll(address operator, bool _approved) external;\r\n\r\n    /**\r\n     * @dev Returns if the `operator` is allowed to manage all of the assets of `owner`.\r\n     *\r\n     * See {setApprovalForAll}\r\n     */\r\n    function isApprovedForAll(address owner, address operator) external view returns (bool);\r\n\r\n    /**\r\n     * @dev Safely transfers `tokenId` token from `from` to `to`.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - `from` cannot be the zero address.\r\n     * - `to` cannot be the zero address.\r\n     * - `tokenId` token must exist and be owned by `from`.\r\n     * - If the caller is not `from`, it must be approved to move this token by either {approve} or {setApprovalForAll}.\r\n     * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer.\r\n     *\r\n     * Emits a {Transfer} event.\r\n     */\r\n    function safeTransferFrom(\r\n        address from,\r\n        address to,\r\n        uint256 tokenId,\r\n        bytes calldata data\r\n    ) external;\r\n}\r\n\r\n\r\n// IERC721Metadata.sol\r\n\r\n\r\npragma solidity ^0.8.0;\r\n\r\n\r\n/**\r\n * @title ERC-721 Non-Fungible Token Standard, optional metadata extension\r\n * @dev See https://eips.ethereum.org/EIPS/eip-721\r\n */\r\ninterface IERC721Metadata is IERC721 {\r\n    /**\r\n     * @dev Returns the token collection name.\r\n     */\r\n    function name() external view returns (string memory);\r\n\r\n    /**\r\n     * @dev Returns the token collection symbol.\r\n     */\r\n    function symbol() external view returns (string memory);\r\n\r\n    /**\r\n     * @dev Returns the Uniform Resource Identifier (URI) for `tokenId` token.\r\n     */\r\n    function tokenURI(uint256 tokenId) external view returns (string memory);\r\n}\r\n\r\n// IERC721Receiver.sol\r\n\r\n\r\npragma solidity ^0.8.0;\r\n\r\n/**\r\n * @title ERC721 token receiver interface\r\n * @dev Interface for any contract that wants to support safeTransfers\r\n * from ERC721 asset contracts.\r\n */\r\ninterface IERC721Receiver {\r\n    /**\r\n     * @dev Whenever an {IERC721} `tokenId` token is transferred to this contract via {IERC721-safeTransferFrom}\r\n     * by `operator` from `from`, this function is called.\r\n     *\r\n     * It must return its Solidity selector to confirm the token transfer.\r\n     * If any other value is returned or the interface is not implemented by the recipient, the transfer will be reverted.\r\n     *\r\n     * The selector can be obtained in Solidity with `IERC721.onERC721Received.selector`.\r\n     */\r\n    function onERC721Received(\r\n        address operator,\r\n        address from,\r\n        uint256 tokenId,\r\n        bytes calldata data\r\n    ) external returns (bytes4);\r\n}\r\n\r\n// LinkTokenInterface.sol\r\n\r\npragma solidity ^0.8.0;\r\n\r\ninterface LinkTokenInterface {\r\n\r\n  function allowance(\r\n    address owner,\r\n    address spender\r\n  )\r\n    external\r\n    view\r\n    returns (\r\n      uint256 remaining\r\n    );\r\n\r\n  function approve(\r\n    address spender,\r\n    uint256 value\r\n  )\r\n    external\r\n    returns (\r\n      bool success\r\n    );\r\n\r\n  function balanceOf(\r\n    address owner\r\n  )\r\n    external\r\n    view\r\n    returns (\r\n      uint256 balance\r\n    );\r\n\r\n  function decimals()\r\n    external\r\n    view\r\n    returns (\r\n      uint8 decimalPlaces\r\n    );\r\n\r\n  function decreaseApproval(\r\n    address spender,\r\n    uint256 addedValue\r\n  )\r\n    external\r\n    returns (\r\n      bool success\r\n    );\r\n\r\n  function increaseApproval(\r\n    address spender,\r\n    uint256 subtractedValue\r\n  ) external;\r\n\r\n  function name()\r\n    external\r\n    view\r\n    returns (\r\n      string memory tokenName\r\n    );\r\n\r\n  function symbol()\r\n    external\r\n    view\r\n    returns (\r\n      string memory tokenSymbol\r\n    );\r\n\r\n  function totalSupply()\r\n    external\r\n    view\r\n    returns (\r\n      uint256 totalTokensIssued\r\n    );\r\n\r\n  function transfer(\r\n    address to,\r\n    uint256 value\r\n  )\r\n    external\r\n    returns (\r\n      bool success\r\n    );\r\n\r\n  function transferAndCall(\r\n    address to,\r\n    uint256 value,\r\n    bytes calldata data\r\n  )\r\n    external\r\n    returns (\r\n      bool success\r\n    );\r\n\r\n  function transferFrom(\r\n    address from,\r\n    address to,\r\n    uint256 value\r\n  )\r\n    external\r\n    returns (\r\n      bool success\r\n    );\r\n\r\n}\r\n\r\n// ERC721.sol\r\n\r\n\r\npragma solidity ^0.8.0;\r\n\r\n\r\n/**\r\n * @dev Implementation of https://eips.ethereum.org/EIPS/eip-721[ERC721] Non-Fungible Token Standard, including\r\n * the Metadata extension, but not including the Enumerable extension, which is available separately as\r\n * {ERC721Enumerable}.\r\n */\r\ncontract ERC721 is Context, ERC165, IERC721, IERC721Metadata {\r\n    using Address for address;\r\n    using Strings for uint256;\r\n\r\n    // Token name\r\n    string private _name;\r\n\r\n    // Token symbol\r\n    string private _symbol;\r\n\r\n    // Mapping from token ID to owner address\r\n    mapping(uint256 => address) private _owners;\r\n\r\n    // Mapping owner address to token count\r\n    mapping(address => uint256) private _balances;\r\n\r\n    // Mapping from token ID to approved address\r\n    mapping(uint256 => address) private _tokenApprovals;\r\n\r\n    // Mapping from owner to operator approvals\r\n    mapping(address => mapping(address => bool)) private _operatorApprovals;\r\n\r\n    /**\r\n     * @dev Initializes the contract by setting a `name` and a `symbol` to the token collection.\r\n     */\r\n    constructor(string memory name_, string memory symbol_) {\r\n        _name = name_;\r\n        _symbol = symbol_;\r\n    }\r\n\r\n    /**\r\n     * @dev See {IERC165-supportsInterface}.\r\n     */\r\n    function supportsInterface(bytes4 interfaceId) public view virtual override(ERC165, IERC165) returns (bool) {\r\n        return\r\n            interfaceId == type(IERC721).interfaceId ||\r\n            interfaceId == type(IERC721Metadata).interfaceId ||\r\n            super.supportsInterface(interfaceId);\r\n    }\r\n\r\n    /**\r\n     * @dev See {IERC721-balanceOf}.\r\n     */\r\n    function balanceOf(address owner) public view virtual override returns (uint256) {\r\n        require(owner != address(0), \"ERC721: balance query for the zero address\");\r\n        return _balances[owner];\r\n    }\r\n\r\n    /**\r\n     * @dev See {IERC721-ownerOf}.\r\n     */\r\n    function ownerOf(uint256 tokenId) public view virtual override returns (address) {\r\n        address owner = _owners[tokenId];\r\n        require(owner != address(0), \"ERC721: owner query for nonexistent token\");\r\n        return owner;\r\n    }\r\n\r\n    /**\r\n     * @dev See {IERC721Metadata-name}.\r\n     */\r\n    function name() public view virtual override returns (string memory) {\r\n        return _name;\r\n    }\r\n\r\n    /**\r\n     * @dev See {IERC721Metadata-symbol}.\r\n     */\r\n    function symbol() public view virtual override returns (string memory) {\r\n        return _symbol;\r\n    }\r\n\r\n    /**\r\n     * @dev See {IERC721Metadata-tokenURI}.\r\n     */\r\n    function tokenURI(uint256 tokenId) public view virtual override returns (string memory) {\r\n        require(_exists(tokenId), \"ERC721Metadata: URI query for nonexistent token\");\r\n\r\n        string memory baseURI = _baseURI();\r\n        return bytes(baseURI).length > 0 ? string(abi.encodePacked(baseURI, tokenId.toString())) : \"\";\r\n    }\r\n\r\n    /**\r\n     * @dev Base URI for computing {tokenURI}. If set, the resulting URI for each\r\n     * token will be the concatenation of the `baseURI` and the `tokenId`. Empty\r\n     * by default, can be overriden in child contracts.\r\n     */\r\n    function _baseURI() internal view virtual returns (string memory) {\r\n        return \"\";\r\n    }\r\n\r\n    /**\r\n     * @dev See {IERC721-approve}.\r\n     */\r\n    function approve(address to, uint256 tokenId) public virtual override {\r\n        address owner = ERC721.ownerOf(tokenId);\r\n        require(to != owner, \"ERC721: approval to current owner\");\r\n\r\n        require(\r\n            _msgSender() == owner || isApprovedForAll(owner, _msgSender()),\r\n            \"ERC721: approve caller is not owner nor approved for all\"\r\n        );\r\n\r\n        _approve(to, tokenId);\r\n    }\r\n\r\n    /**\r\n     * @dev See {IERC721-getApproved}.\r\n     */\r\n    function getApproved(uint256 tokenId) public view virtual override returns (address) {\r\n        require(_exists(tokenId), \"ERC721: approved query for nonexistent token\");\r\n\r\n        return _tokenApprovals[tokenId];\r\n    }\r\n\r\n    /**\r\n     * @dev See {IERC721-setApprovalForAll}.\r\n     */\r\n    function setApprovalForAll(address operator, bool approved) public virtual override {\r\n        require(operator != _msgSender(), \"ERC721: approve to caller\");\r\n\r\n        _operatorApprovals[_msgSender()][operator] = approved;\r\n        emit ApprovalForAll(_msgSender(), operator, approved);\r\n    }\r\n\r\n    /**\r\n     * @dev See {IERC721-isApprovedForAll}.\r\n     */\r\n    function isApprovedForAll(address owner, address operator) public view virtual override returns (bool) {\r\n        return _operatorApprovals[owner][operator];\r\n    }\r\n\r\n    /**\r\n     * @dev See {IERC721-transferFrom}.\r\n     */\r\n    function transferFrom(\r\n        address from,\r\n        address to,\r\n        uint256 tokenId\r\n    ) public virtual override {\r\n        //solhint-disable-next-line max-line-length\r\n        require(_isApprovedOrOwner(_msgSender(), tokenId), \"ERC721: transfer caller is not owner nor approved\");\r\n\r\n        _transfer(from, to, tokenId);\r\n    }\r\n\r\n    /**\r\n     * @dev See {IERC721-safeTransferFrom}.\r\n     */\r\n    function safeTransferFrom(\r\n        address from,\r\n        address to,\r\n        uint256 tokenId\r\n    ) public virtual override {\r\n        safeTransferFrom(from, to, tokenId, \"\");\r\n    }\r\n\r\n    /**\r\n     * @dev See {IERC721-safeTransferFrom}.\r\n     */\r\n    function safeTransferFrom(\r\n        address from,\r\n        address to,\r\n        uint256 tokenId,\r\n        bytes memory _data\r\n    ) public virtual override {\r\n        require(_isApprovedOrOwner(_msgSender(), tokenId), \"ERC721: transfer caller is not owner nor approved\");\r\n        _safeTransfer(from, to, tokenId, _data);\r\n    }\r\n\r\n    /**\r\n     * @dev Safely transfers `tokenId` token from `from` to `to`, checking first that contract recipients\r\n     * are aware of the ERC721 protocol to prevent tokens from being forever locked.\r\n     *\r\n     * `_data` is additional data, it has no specified format and it is sent in call to `to`.\r\n     *\r\n     * This internal function is equivalent to {safeTransferFrom}, and can be used to e.g.\r\n     * implement alternative mechanisms to perform token transfer, such as signature-based.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - `from` cannot be the zero address.\r\n     * - `to` cannot be the zero address.\r\n     * - `tokenId` token must exist and be owned by `from`.\r\n     * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer.\r\n     *\r\n     * Emits a {Transfer} event.\r\n     */\r\n    function _safeTransfer(\r\n        address from,\r\n        address to,\r\n        uint256 tokenId,\r\n        bytes memory _data\r\n    ) internal virtual {\r\n        _transfer(from, to, tokenId);\r\n        require(_checkOnERC721Received(from, to, tokenId, _data), \"ERC721: transfer to non ERC721Receiver implementer\");\r\n    }\r\n\r\n    /**\r\n     * @dev Returns whether `tokenId` exists.\r\n     *\r\n     * Tokens can be managed by their owner or approved accounts via {approve} or {setApprovalForAll}.\r\n     *\r\n     * Tokens start existing when they are minted (`_mint`),\r\n     * and stop existing when they are burned (`_burn`).\r\n     */\r\n    function _exists(uint256 tokenId) internal view virtual returns (bool) {\r\n        return _owners[tokenId] != address(0);\r\n    }\r\n\r\n    /**\r\n     * @dev Returns whether `spender` is allowed to manage `tokenId`.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - `tokenId` must exist.\r\n     */\r\n    function _isApprovedOrOwner(address spender, uint256 tokenId) internal view virtual returns (bool) {\r\n        require(_exists(tokenId), \"ERC721: operator query for nonexistent token\");\r\n        address owner = ERC721.ownerOf(tokenId);\r\n        return (spender == owner || getApproved(tokenId) == spender || isApprovedForAll(owner, spender));\r\n    }\r\n\r\n    /**\r\n     * @dev Safely mints `tokenId` and transfers it to `to`.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - `tokenId` must not exist.\r\n     * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer.\r\n     *\r\n     * Emits a {Transfer} event.\r\n     */\r\n    function _safeMint(address to, uint256 tokenId) internal virtual {\r\n        _safeMint(to, tokenId, \"\");\r\n    }\r\n\r\n    /**\r\n     * @dev Same as {xref-ERC721-_safeMint-address-uint256-}[`_safeMint`], with an additional `data` parameter which is\r\n     * forwarded in {IERC721Receiver-onERC721Received} to contract recipients.\r\n     */\r\n    function _safeMint(\r\n        address to,\r\n        uint256 tokenId,\r\n        bytes memory _data\r\n    ) internal virtual {\r\n        _mint(to, tokenId);\r\n        require(\r\n            _checkOnERC721Received(address(0), to, tokenId, _data),\r\n            \"ERC721: transfer to non ERC721Receiver implementer\"\r\n        );\r\n    }\r\n\r\n    /**\r\n     * @dev Mints `tokenId` and transfers it to `to`.\r\n     *\r\n     * WARNING: Usage of this method is discouraged, use {_safeMint} whenever possible\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - `tokenId` must not exist.\r\n     * - `to` cannot be the zero address.\r\n     *\r\n     * Emits a {Transfer} event.\r\n     */\r\n    function _mint(address to, uint256 tokenId) internal virtual {\r\n        require(to != address(0), \"ERC721: mint to the zero address\");\r\n        require(!_exists(tokenId), \"ERC721: token already minted\");\r\n\r\n        _beforeTokenTransfer(address(0), to, tokenId);\r\n\r\n        _balances[to] += 1;\r\n        _owners[tokenId] = to;\r\n\r\n        emit Transfer(address(0), to, tokenId);\r\n    }\r\n\r\n    /**\r\n     * @dev Destroys `tokenId`.\r\n     * The approval is cleared when the token is burned.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - `tokenId` must exist.\r\n     *\r\n     * Emits a {Transfer} event.\r\n     */\r\n    function _burn(uint256 tokenId) internal virtual {\r\n        address owner = ERC721.ownerOf(tokenId);\r\n\r\n        _beforeTokenTransfer(owner, address(0), tokenId);\r\n\r\n        // Clear approvals\r\n        _approve(address(0), tokenId);\r\n\r\n        _balances[owner] -= 1;\r\n        delete _owners[tokenId];\r\n\r\n        emit Transfer(owner, address(0), tokenId);\r\n    }\r\n\r\n    /**\r\n     * @dev Transfers `tokenId` from `from` to `to`.\r\n     *  As opposed to {transferFrom}, this imposes no restrictions on msg.sender.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - `to` cannot be the zero address.\r\n     * - `tokenId` token must be owned by `from`.\r\n     *\r\n     * Emits a {Transfer} event.\r\n     */\r\n    function _transfer(\r\n        address from,\r\n        address to,\r\n        uint256 tokenId\r\n    ) internal virtual {\r\n        require(ERC721.ownerOf(tokenId) == from, \"ERC721: transfer of token that is not own\");\r\n        require(to != address(0), \"ERC721: transfer to the zero address\");\r\n\r\n        _beforeTokenTransfer(from, to, tokenId);\r\n\r\n        // Clear approvals from the previous owner\r\n        _approve(address(0), tokenId);\r\n\r\n        _balances[from] -= 1;\r\n        _balances[to] += 1;\r\n        _owners[tokenId] = to;\r\n\r\n        emit Transfer(from, to, tokenId);\r\n    }\r\n\r\n    /**\r\n     * @dev Approve `to` to operate on `tokenId`\r\n     *\r\n     * Emits a {Approval} event.\r\n     */\r\n    function _approve(address to, uint256 tokenId) internal virtual {\r\n        _tokenApprovals[tokenId] = to;\r\n        emit Approval(ERC721.ownerOf(tokenId), to, tokenId);\r\n    }\r\n\r\n    /**\r\n     * @dev Internal function to invoke {IERC721Receiver-onERC721Received} on a target address.\r\n     * The call is not executed if the target address is not a contract.\r\n     *\r\n     * @param from address representing the previous owner of the given token ID\r\n     * @param to target address that will receive the tokens\r\n     * @param tokenId uint256 ID of the token to be transferred\r\n     * @param _data bytes optional data to send along with the call\r\n     * @return bool whether the call correctly returned the expected magic value\r\n     */\r\n    function _checkOnERC721Received(\r\n        address from,\r\n        address to,\r\n        uint256 tokenId,\r\n        bytes memory _data\r\n    ) private returns (bool) {\r\n        if (to.isContract()) {\r\n            try IERC721Receiver(to).onERC721Received(_msgSender(), from, tokenId, _data) returns (bytes4 retval) {\r\n                return retval == IERC721Receiver.onERC721Received.selector;\r\n            } catch (bytes memory reason) {\r\n                if (reason.length == 0) {\r\n                    revert(\"ERC721: transfer to non ERC721Receiver implementer\");\r\n                } else {\r\n                    assembly {\r\n                        revert(add(32, reason), mload(reason))\r\n                    }\r\n                }\r\n            }\r\n        } else {\r\n            return true;\r\n        }\r\n    }\r\n\r\n    /**\r\n     * @dev Hook that is called before any token transfer. This includes minting\r\n     * and burning.\r\n     *\r\n     * Calling conditions:\r\n     *\r\n     * - When `from` and `to` are both non-zero, ``from``'s `tokenId` will be\r\n     * transferred to `to`.\r\n     * - When `from` is zero, `tokenId` will be minted for `to`.\r\n     * - When `to` is zero, ``from``'s `tokenId` will be burned.\r\n     * - `from` and `to` are never both zero.\r\n     *\r\n     * To learn more about hooks, head to xref:ROOT:extending-contracts.adoc#using-hooks[Using Hooks].\r\n     */\r\n    function _beforeTokenTransfer(\r\n        address from,\r\n        address to,\r\n        uint256 tokenId\r\n    ) internal virtual {}\r\n}\r\n\r\n\r\n// IERC721Enumerable.sol\r\n\r\n\r\npragma solidity ^0.8.0;\r\n\r\n\r\n/**\r\n * @title ERC-721 Non-Fungible Token Standard, optional enumeration extension\r\n * @dev See https://eips.ethereum.org/EIPS/eip-721\r\n */\r\ninterface IERC721Enumerable is IERC721 {\r\n    /**\r\n     * @dev Returns the total amount of tokens stored by the contract.\r\n     */\r\n    function totalSupply() external view returns (uint256);\r\n\r\n    /**\r\n     * @dev Returns a token ID owned by `owner` at a given `index` of its token list.\r\n     * Use along with {balanceOf} to enumerate all of ``owner``'s tokens.\r\n     */\r\n    function tokenOfOwnerByIndex(address owner, uint256 index) external view returns (uint256 tokenId);\r\n\r\n    /**\r\n     * @dev Returns a token ID at a given `index` of all the tokens stored by the contract.\r\n     * Use along with {totalSupply} to enumerate all tokens.\r\n     */\r\n    function tokenByIndex(uint256 index) external view returns (uint256);\r\n}\r\n\r\n\r\n\r\n// ERC721Enumerable.sol\r\n\r\n\r\npragma solidity ^0.8.0;\r\n\r\n\r\n/**\r\n * @dev This implements an optional extension of {ERC721} defined in the EIP that adds\r\n * enumerability of all the token ids in the contract as well as all token ids owned by each\r\n * account.\r\n */\r\nabstract contract ERC721Enumerable is ERC721, IERC721Enumerable {\r\n    // Mapping from owner to list of owned token IDs\r\n    mapping(address => mapping(uint256 => uint256)) private _ownedTokens;\r\n\r\n    // Mapping from token ID to index of the owner tokens list\r\n    mapping(uint256 => uint256) private _ownedTokensIndex;\r\n\r\n    // Array with all token ids, used for enumeration\r\n    uint256[] private _allTokens;\r\n\r\n    // Mapping from token id to position in the allTokens array\r\n    mapping(uint256 => uint256) private _allTokensIndex;\r\n\r\n    /**\r\n     * @dev See {IERC165-supportsInterface}.\r\n     */\r\n    function supportsInterface(bytes4 interfaceId) public view virtual override(IERC165, ERC721) returns (bool) {\r\n        return interfaceId == type(IERC721Enumerable).interfaceId || super.supportsInterface(interfaceId);\r\n    }\r\n\r\n    /**\r\n     * @dev See {IERC721Enumerable-tokenOfOwnerByIndex}.\r\n     */\r\n    function tokenOfOwnerByIndex(address owner, uint256 index) public view virtual override returns (uint256) {\r\n        require(index < ERC721.balanceOf(owner), \"ERC721Enumerable: owner index out of bounds\");\r\n        return _ownedTokens[owner][index];\r\n    }\r\n\r\n    /**\r\n     * @dev See {IERC721Enumerable-totalSupply}.\r\n     */\r\n    function totalSupply() public view virtual override returns (uint256) {\r\n        return _allTokens.length;\r\n    }\r\n\r\n    /**\r\n     * @dev See {IERC721Enumerable-tokenByIndex}.\r\n     */\r\n    function tokenByIndex(uint256 index) public view virtual override returns (uint256) {\r\n        require(index < ERC721Enumerable.totalSupply(), \"ERC721Enumerable: global index out of bounds\");\r\n        return _allTokens[index];\r\n    }\r\n\r\n    /**\r\n     * @dev Hook that is called before any token transfer. This includes minting\r\n     * and burning.\r\n     *\r\n     * Calling conditions:\r\n     *\r\n     * - When `from` and `to` are both non-zero, ``from``'s `tokenId` will be\r\n     * transferred to `to`.\r\n     * - When `from` is zero, `tokenId` will be minted for `to`.\r\n     * - When `to` is zero, ``from``'s `tokenId` will be burned.\r\n     * - `from` cannot be the zero address.\r\n     * - `to` cannot be the zero address.\r\n     *\r\n     * To learn more about hooks, head to xref:ROOT:extending-contracts.adoc#using-hooks[Using Hooks].\r\n     */\r\n    function _beforeTokenTransfer(\r\n        address from,\r\n        address to,\r\n        uint256 tokenId\r\n    ) internal virtual override {\r\n        super._beforeTokenTransfer(from, to, tokenId);\r\n\r\n        if (from == address(0)) {\r\n            _addTokenToAllTokensEnumeration(tokenId);\r\n        } else if (from != to) {\r\n            _removeTokenFromOwnerEnumeration(from, tokenId);\r\n        }\r\n        if (to == address(0)) {\r\n            _removeTokenFromAllTokensEnumeration(tokenId);\r\n        } else if (to != from) {\r\n            _addTokenToOwnerEnumeration(to, tokenId);\r\n        }\r\n    }\r\n\r\n    /**\r\n     * @dev Private function to add a token to this extension's ownership-tracking data structures.\r\n     * @param to address representing the new owner of the given token ID\r\n     * @param tokenId uint256 ID of the token to be added to the tokens list of the given address\r\n     */\r\n    function _addTokenToOwnerEnumeration(address to, uint256 tokenId) private {\r\n        uint256 length = ERC721.balanceOf(to);\r\n        _ownedTokens[to][length] = tokenId;\r\n        _ownedTokensIndex[tokenId] = length;\r\n    }\r\n\r\n    /**\r\n     * @dev Private function to add a token to this extension's token tracking data structures.\r\n     * @param tokenId uint256 ID of the token to be added to the tokens list\r\n     */\r\n    function _addTokenToAllTokensEnumeration(uint256 tokenId) private {\r\n        _allTokensIndex[tokenId] = _allTokens.length;\r\n        _allTokens.push(tokenId);\r\n    }\r\n\r\n    /**\r\n     * @dev Private function to remove a token from this extension's ownership-tracking data structures. Note that\r\n     * while the token is not assigned a new owner, the `_ownedTokensIndex` mapping is _not_ updated: this allows for\r\n     * gas optimizations e.g. when performing a transfer operation (avoiding double writes).\r\n     * This has O(1) time complexity, but alters the order of the _ownedTokens array.\r\n     * @param from address representing the previous owner of the given token ID\r\n     * @param tokenId uint256 ID of the token to be removed from the tokens list of the given address\r\n     */\r\n    function _removeTokenFromOwnerEnumeration(address from, uint256 tokenId) private {\r\n        // To prevent a gap in from's tokens array, we store the last token in the index of the token to delete, and\r\n        // then delete the last slot (swap and pop).\r\n\r\n        uint256 lastTokenIndex = ERC721.balanceOf(from) - 1;\r\n        uint256 tokenIndex = _ownedTokensIndex[tokenId];\r\n\r\n        // When the token to delete is the last token, the swap operation is unnecessary\r\n        if (tokenIndex != lastTokenIndex) {\r\n            uint256 lastTokenId = _ownedTokens[from][lastTokenIndex];\r\n\r\n            _ownedTokens[from][tokenIndex] = lastTokenId; // Move the last token to the slot of the to-delete token\r\n            _ownedTokensIndex[lastTokenId] = tokenIndex; // Update the moved token's index\r\n        }\r\n\r\n        // This also deletes the contents at the last position of the array\r\n        delete _ownedTokensIndex[tokenId];\r\n        delete _ownedTokens[from][lastTokenIndex];\r\n    }\r\n\r\n    /**\r\n     * @dev Private function to remove a token from this extension's token tracking data structures.\r\n     * This has O(1) time complexity, but alters the order of the _allTokens array.\r\n     * @param tokenId uint256 ID of the token to be removed from the tokens list\r\n     */\r\n    function _removeTokenFromAllTokensEnumeration(uint256 tokenId) private {\r\n        // To prevent a gap in the tokens array, we store the last token in the index of the token to delete, and\r\n        // then delete the last slot (swap and pop).\r\n\r\n        uint256 lastTokenIndex = _allTokens.length - 1;\r\n        uint256 tokenIndex = _allTokensIndex[tokenId];\r\n\r\n        // When the token to delete is the last token, the swap operation is unnecessary. However, since this occurs so\r\n        // rarely (when the last minted token is burnt) that we still do the swap here to avoid the gas cost of adding\r\n        // an 'if' statement (like in _removeTokenFromOwnerEnumeration)\r\n        uint256 lastTokenId = _allTokens[lastTokenIndex];\r\n\r\n        _allTokens[tokenIndex] = lastTokenId; // Move the last token to the slot of the to-delete token\r\n        _allTokensIndex[lastTokenId] = tokenIndex; // Update the moved token's index\r\n\r\n        // This also deletes the contents at the last position of the array\r\n        delete _allTokensIndex[tokenId];\r\n        _allTokens.pop();\r\n    }\r\n}\r\n\r\n// IERC20.sol\r\n\r\n\r\npragma solidity ^0.8.0;\r\n\r\n/**\r\n * @dev Interface of the ERC20 standard as defined in the EIP.\r\n */\r\ninterface IERC20 {\r\n    /**\r\n     * @dev Returns the amount of tokens in existence.\r\n     */\r\n    function totalSupply() external view returns (uint256);\r\n\r\n    /**\r\n     * @dev Returns the amount of tokens owned by `account`.\r\n     */\r\n    function balanceOf(address account) external view returns (uint256);\r\n\r\n    /**\r\n     * @dev Moves `amount` tokens from the caller's account to `recipient`.\r\n     *\r\n     * Returns a boolean value indicating whether the operation succeeded.\r\n     *\r\n     * Emits a {Transfer} event.\r\n     */\r\n    function transfer(address recipient, uint256 amount) external returns (bool);\r\n\r\n    /**\r\n     * @dev Returns the remaining number of tokens that `spender` will be\r\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\r\n     * zero by default.\r\n     *\r\n     * This value changes when {approve} or {transferFrom} are called.\r\n     */\r\n    function allowance(address owner, address spender) external view returns (uint256);\r\n\r\n    /**\r\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\r\n     *\r\n     * Returns a boolean value indicating whether the operation succeeded.\r\n     *\r\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\r\n     * that someone may use both the old and the new allowance by unfortunate\r\n     * transaction ordering. One possible solution to mitigate this race\r\n     * condition is to first reduce the spender's allowance to 0 and set the\r\n     * desired value afterwards:\r\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\r\n     *\r\n     * Emits an {Approval} event.\r\n     */\r\n    function approve(address spender, uint256 amount) external returns (bool);\r\n\r\n    /**\r\n     * @dev Moves `amount` tokens from `sender` to `recipient` using the\r\n     * allowance mechanism. `amount` is then deducted from the caller's\r\n     * allowance.\r\n     *\r\n     * Returns a boolean value indicating whether the operation succeeded.\r\n     *\r\n     * Emits a {Transfer} event.\r\n     */\r\n    function transferFrom(\r\n        address sender,\r\n        address recipient,\r\n        uint256 amount\r\n    ) external returns (bool);\r\n\r\n    /**\r\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\r\n     * another (`to`).\r\n     *\r\n     * Note that `value` may be zero.\r\n     */\r\n    event Transfer(address indexed from, address indexed to, uint256 value);\r\n\r\n    /**\r\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\r\n     * a call to {approve}. `value` is the new allowance.\r\n     */\r\n    event Approval(address indexed owner, address indexed spender, uint256 value);\r\n}\r\n\r\n\r\n\r\n\r\n\r\n\r\n// Ownable.sol\r\n\r\n\r\npragma solidity ^0.8.0;\r\n\r\n\r\n/**\r\n * @dev Contract module which provides a basic access control mechanism, where\r\n * there is an account (an owner) that can be granted exclusive access to\r\n * specific functions.\r\n *\r\n * By default, the owner account will be the one that deploys the contract. This\r\n * can later be changed with {transferOwnership}.\r\n *\r\n * This module is used through inheritance. It will make available the modifier\r\n * `onlyOwner`, which can be applied to your functions to restrict their use to\r\n * the owner.\r\n */\r\nabstract contract Ownable is Context {\r\n    address private _owner;\r\n\r\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\r\n\r\n    /**\r\n     * @dev Initializes the contract setting the deployer as the initial owner.\r\n     */\r\n    constructor() {\r\n        _setOwner(_msgSender());\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the address of the current owner.\r\n     */\r\n    function owner() public view virtual returns (address) {\r\n        return _owner;\r\n    }\r\n\r\n    /**\r\n     * @dev Throws if called by any account other than the owner.\r\n     */\r\n    modifier onlyOwner() {\r\n        require(owner() == _msgSender(), \"Ownable: caller is not the owner\");\r\n        _;\r\n    }\r\n\r\n    /**\r\n     * @dev Leaves the contract without owner. It will not be possible to call\r\n     * `onlyOwner` functions anymore. Can only be called by the current owner.\r\n     *\r\n     * NOTE: Renouncing ownership will leave the contract without an owner,\r\n     * thereby removing any functionality that is only available to the owner.\r\n     */\r\n    function renounceOwnership() public virtual onlyOwner {\r\n        _setOwner(address(0));\r\n    }\r\n\r\n    /**\r\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\r\n     * Can only be called by the current owner.\r\n     */\r\n    function transferOwnership(address newOwner) public virtual onlyOwner {\r\n        require(newOwner != address(0), \"Ownable: new owner is the zero address\");\r\n        _setOwner(newOwner);\r\n    }\r\n\r\n    function _setOwner(address newOwner) private {\r\n        address oldOwner = _owner;\r\n        _owner = newOwner;\r\n        emit OwnershipTransferred(oldOwner, newOwner);\r\n    }\r\n}\r\n\r\n// Pausable.sol\r\n\r\n\r\npragma solidity ^0.8.0;\r\n\r\n\r\n/**\r\n * @dev Contract module which allows children to implement an emergency stop\r\n * mechanism that can be triggered by an authorized account.\r\n *\r\n * This module is used through inheritance. It will make available the\r\n * modifiers `whenNotPaused` and `whenPaused`, which can be applied to\r\n * the functions of your contract. Note that they will not be pausable by\r\n * simply including this module, only once the modifiers are put in place.\r\n */\r\nabstract contract Pausable is Context {\r\n    /**\r\n     * @dev Emitted when the pause is triggered by `account`.\r\n     */\r\n    event Paused(address account);\r\n\r\n    /**\r\n     * @dev Emitted when the pause is lifted by `account`.\r\n     */\r\n    event Unpaused(address account);\r\n\r\n    bool private _paused;\r\n\r\n    /**\r\n     * @dev Initializes the contract in unpaused state.\r\n     */\r\n    constructor() {\r\n        _paused = false;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns true if the contract is paused, and false otherwise.\r\n     */\r\n    function paused() public view virtual returns (bool) {\r\n        return _paused;\r\n    }\r\n\r\n    /**\r\n     * @dev Modifier to make a function callable only when the contract is not paused.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - The contract must not be paused.\r\n     */\r\n    modifier whenNotPaused() {\r\n        require(!paused(), \"Pausable: paused\");\r\n        _;\r\n    }\r\n\r\n    /**\r\n     * @dev Modifier to make a function callable only when the contract is paused.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - The contract must be paused.\r\n     */\r\n    modifier whenPaused() {\r\n        require(paused(), \"Pausable: not paused\");\r\n        _;\r\n    }\r\n\r\n    /**\r\n     * @dev Triggers stopped state.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - The contract must not be paused.\r\n     */\r\n    function _pause() internal virtual whenNotPaused {\r\n        _paused = true;\r\n        emit Paused(_msgSender());\r\n    }\r\n\r\n    /**\r\n     * @dev Returns to normal state.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - The contract must be paused.\r\n     */\r\n    function _unpause() internal virtual whenPaused {\r\n        _paused = false;\r\n        emit Unpaused(_msgSender());\r\n    }\r\n}\r\n\r\n// ReentrancyGuard.sol\r\n\r\n\r\npragma solidity ^0.8.0;\r\n\r\n/**\r\n * @dev Contract module that helps prevent reentrant calls to a function.\r\n *\r\n * Inheriting from `ReentrancyGuard` will make the {nonReentrant} modifier\r\n * available, which can be applied to functions to make sure there are no nested\r\n * (reentrant) calls to them.\r\n *\r\n * Note that because there is a single `nonReentrant` guard, functions marked as\r\n * `nonReentrant` may not call one another. This can be worked around by making\r\n * those functions `private`, and then adding `external` `nonReentrant` entry\r\n * points to them.\r\n *\r\n * TIP: If you would like to learn more about reentrancy and alternative ways\r\n * to protect against it, check out our blog post\r\n * https://blog.openzeppelin.com/reentrancy-after-istanbul/[Reentrancy After Istanbul].\r\n */\r\nabstract contract ReentrancyGuard {\r\n    // Booleans are more expensive than uint256 or any type that takes up a full\r\n    // word because each write operation emits an extra SLOAD to first read the\r\n    // slot's contents, replace the bits taken up by the boolean, and then write\r\n    // back. This is the compiler's defense against contract upgrades and\r\n    // pointer aliasing, and it cannot be disabled.\r\n\r\n    // The values being non-zero value makes deployment a bit more expensive,\r\n    // but in exchange the refund on every call to nonReentrant will be lower in\r\n    // amount. Since refunds are capped to a percentage of the total\r\n    // transaction's gas, it is best to keep them low in cases like this one, to\r\n    // increase the likelihood of the full refund coming into effect.\r\n    uint256 private constant _NOT_ENTERED = 1;\r\n    uint256 private constant _ENTERED = 2;\r\n\r\n    uint256 private _status;\r\n\r\n    constructor() {\r\n        _status = _NOT_ENTERED;\r\n    }\r\n\r\n    /**\r\n     * @dev Prevents a contract from calling itself, directly or indirectly.\r\n     * Calling a `nonReentrant` function from another `nonReentrant`\r\n     * function is not supported. It is possible to prevent this from happening\r\n     * by making the `nonReentrant` function external, and make it call a\r\n     * `private` function that does the actual work.\r\n     */\r\n    modifier nonReentrant() {\r\n        // On the first call to nonReentrant, _notEntered will be true\r\n        require(_status != _ENTERED, \"ReentrancyGuard: reentrant call\");\r\n\r\n        // Any calls to nonReentrant after this point will fail\r\n        _status = _ENTERED;\r\n\r\n        _;\r\n\r\n        // By storing the original value once again, a refund is triggered (see\r\n        // https://eips.ethereum.org/EIPS/eip-2200)\r\n        _status = _NOT_ENTERED;\r\n    }\r\n}\r\n\r\n// VRFRequestIDBase.sol\r\n\r\npragma solidity ^0.8.0;\r\n\r\ncontract VRFRequestIDBase {\r\n\r\n  /**\r\n   * @notice returns the seed which is actually input to the VRF coordinator\r\n   *\r\n   * @dev To prevent repetition of VRF output due to repetition of the\r\n   * @dev user-supplied seed, that seed is combined in a hash with the\r\n   * @dev user-specific nonce, and the address of the consuming contract. The\r\n   * @dev risk of repetition is mostly mitigated by inclusion of a blockhash in\r\n   * @dev the final seed, but the nonce does protect against repetition in\r\n   * @dev requests which are included in a single block.\r\n   *\r\n   * @param _userSeed VRF seed input provided by user\r\n   * @param _requester Address of the requesting contract\r\n   * @param _nonce User-specific nonce at the time of the request\r\n   */\r\n  function makeVRFInputSeed(\r\n    bytes32 _keyHash,\r\n    uint256 _userSeed,\r\n    address _requester,\r\n    uint256 _nonce\r\n  )\r\n    internal\r\n    pure\r\n    returns (\r\n      uint256\r\n    )\r\n  {\r\n    return uint256(keccak256(abi.encode(_keyHash, _userSeed, _requester, _nonce)));\r\n  }\r\n\r\n  /**\r\n   * @notice Returns the id for this request\r\n   * @param _keyHash The serviceAgreement ID to be used for this request\r\n   * @param _vRFInputSeed The seed to be passed directly to the VRF\r\n   * @return The id for this request\r\n   *\r\n   * @dev Note that _vRFInputSeed is not the seed passed by the consuming\r\n   * @dev contract, but the one generated by makeVRFInputSeed\r\n   */\r\n  function makeRequestId(\r\n    bytes32 _keyHash,\r\n    uint256 _vRFInputSeed\r\n  )\r\n    internal\r\n    pure\r\n    returns (\r\n      bytes32\r\n    )\r\n  {\r\n    return keccak256(abi.encodePacked(_keyHash, _vRFInputSeed));\r\n  }\r\n}\r\n\r\n// VRFConsumerBase.sol\r\n\r\npragma solidity ^0.8.0;\r\n\r\n\r\n/** ****************************************************************************\r\n * @notice Interface for contracts using VRF randomness\r\n * *****************************************************************************\r\n * @dev PURPOSE\r\n *\r\n * @dev Reggie the Random Oracle (not his real job) wants to provide randomness\r\n * @dev to Vera the verifier in such a way that Vera can be sure he's not\r\n * @dev making his output up to suit himself. Reggie provides Vera a public key\r\n * @dev to which he knows the secret key. Each time Vera provides a seed to\r\n * @dev Reggie, he gives back a value which is computed completely\r\n * @dev deterministically from the seed and the secret key.\r\n *\r\n * @dev Reggie provides a proof by which Vera can verify that the output was\r\n * @dev correctly computed once Reggie tells it to her, but without that proof,\r\n * @dev the output is indistinguishable to her from a uniform random sample\r\n * @dev from the output space.\r\n *\r\n * @dev The purpose of this contract is to make it easy for unrelated contracts\r\n * @dev to talk to Vera the verifier about the work Reggie is doing, to provide\r\n * @dev simple access to a verifiable source of randomness.\r\n * *****************************************************************************\r\n * @dev USAGE\r\n *\r\n * @dev Calling contracts must inherit from VRFConsumerBase, and can\r\n * @dev initialize VRFConsumerBase's attributes in their constructor as\r\n * @dev shown:\r\n *\r\n * @dev   contract VRFConsumer {\r\n * @dev     constuctor(<other arguments>, address _vrfCoordinator, address _link)\r\n * @dev       VRFConsumerBase(_vrfCoordinator, _link) public {\r\n * @dev         <initialization with other arguments goes here>\r\n * @dev       }\r\n * @dev   }\r\n *\r\n * @dev The oracle will have given you an ID for the VRF keypair they have\r\n * @dev committed to (let's call it keyHash), and have told you the minimum LINK\r\n * @dev price for VRF service. Make sure your contract has sufficient LINK, and\r\n * @dev call requestRandomness(keyHash, fee, seed), where seed is the input you\r\n * @dev want to generate randomness from.\r\n *\r\n * @dev Once the VRFCoordinator has received and validated the oracle's response\r\n * @dev to your request, it will call your contract's fulfillRandomness method.\r\n *\r\n * @dev The randomness argument to fulfillRandomness is the actual random value\r\n * @dev generated from your seed.\r\n *\r\n * @dev The requestId argument is generated from the keyHash and the seed by\r\n * @dev makeRequestId(keyHash, seed). If your contract could have concurrent\r\n * @dev requests open, you can use the requestId to track which seed is\r\n * @dev associated with which randomness. See VRFRequestIDBase.sol for more\r\n * @dev details. (See \"SECURITY CONSIDERATIONS\" for principles to keep in mind,\r\n * @dev if your contract could have multiple requests in flight simultaneously.)\r\n *\r\n * @dev Colliding `requestId`s are cryptographically impossible as long as seeds\r\n * @dev differ. (Which is critical to making unpredictable randomness! See the\r\n * @dev next section.)\r\n *\r\n * *****************************************************************************\r\n * @dev SECURITY CONSIDERATIONS\r\n *\r\n * @dev A method with the ability to call your fulfillRandomness method directly\r\n * @dev could spoof a VRF response with any random value, so it's critical that\r\n * @dev it cannot be directly called by anything other than this base contract\r\n * @dev (specifically, by the VRFConsumerBase.rawFulfillRandomness method).\r\n *\r\n * @dev For your users to trust that your contract's random behavior is free\r\n * @dev from malicious interference, it's best if you can write it so that all\r\n * @dev behaviors implied by a VRF response are executed *during* your\r\n * @dev fulfillRandomness method. If your contract must store the response (or\r\n * @dev anything derived from it) and use it later, you must ensure that any\r\n * @dev user-significant behavior which depends on that stored value cannot be\r\n * @dev manipulated by a subsequent VRF request.\r\n *\r\n * @dev Similarly, both miners and the VRF oracle itself have some influence\r\n * @dev over the order in which VRF responses appear on the blockchain, so if\r\n * @dev your contract could have multiple VRF requests in flight simultaneously,\r\n * @dev you must ensure that the order in which the VRF responses arrive cannot\r\n * @dev be used to manipulate your contract's user-significant behavior.\r\n *\r\n * @dev Since the ultimate input to the VRF is mixed with the block hash of the\r\n * @dev block in which the request is made, user-provided seeds have no impact\r\n * @dev on its economic security properties. They are only included for API\r\n * @dev compatability with previous versions of this contract.\r\n *\r\n * @dev Since the block hash of the block which contains the requestRandomness\r\n * @dev call is mixed into the input to the VRF *last*, a sufficiently powerful\r\n * @dev miner could, in principle, fork the blockchain to evict the block\r\n * @dev containing the request, forcing the request to be included in a\r\n * @dev different block with a different hash, and therefore a different input\r\n * @dev to the VRF. However, such an attack would incur a substantial economic\r\n * @dev cost. This cost scales with the number of blocks the VRF oracle waits\r\n * @dev until it calls responds to a request.\r\n */\r\nabstract contract VRFConsumerBase is VRFRequestIDBase {\r\n\r\n  /**\r\n   * @notice fulfillRandomness handles the VRF response. Your contract must\r\n   * @notice implement it. See \"SECURITY CONSIDERATIONS\" above for important\r\n   * @notice principles to keep in mind when implementing your fulfillRandomness\r\n   * @notice method.\r\n   *\r\n   * @dev VRFConsumerBase expects its subcontracts to have a method with this\r\n   * @dev signature, and will call it once it has verified the proof\r\n   * @dev associated with the randomness. (It is triggered via a call to\r\n   * @dev rawFulfillRandomness, below.)\r\n   *\r\n   * @param requestId The Id initially returned by requestRandomness\r\n   * @param randomness the VRF output\r\n   */\r\n  function fulfillRandomness(\r\n    bytes32 requestId,\r\n    uint256 randomness\r\n  )\r\n    internal\r\n    virtual;\r\n\r\n  /**\r\n   * @dev In order to keep backwards compatibility we have kept the user\r\n   * seed field around. We remove the use of it because given that the blockhash\r\n   * enters later, it overrides whatever randomness the used seed provides.\r\n   * Given that it adds no security, and can easily lead to misunderstandings,\r\n   * we have removed it from usage and can now provide a simpler API.\r\n   */\r\n  uint256 constant private USER_SEED_PLACEHOLDER = 0;\r\n\r\n  /**\r\n   * @notice requestRandomness initiates a request for VRF output given _seed\r\n   *\r\n   * @dev The fulfillRandomness method receives the output, once it's provided\r\n   * @dev by the Oracle, and verified by the vrfCoordinator.\r\n   *\r\n   * @dev The _keyHash must already be registered with the VRFCoordinator, and\r\n   * @dev the _fee must exceed the fee specified during registration of the\r\n   * @dev _keyHash.\r\n   *\r\n   * @dev The _seed parameter is vestigial, and is kept only for API\r\n   * @dev compatibility with older versions. It can't *hurt* to mix in some of\r\n   * @dev your own randomness, here, but it's not necessary because the VRF\r\n   * @dev oracle will mix the hash of the block containing your request into the\r\n   * @dev VRF seed it ultimately uses.\r\n   *\r\n   * @param _keyHash ID of public key against which randomness is generated\r\n   * @param _fee The amount of LINK to send with the request\r\n   *\r\n   * @return requestId unique ID for this request\r\n   *\r\n   * @dev The returned requestId can be used to distinguish responses to\r\n   * @dev concurrent requests. It is passed as the first argument to\r\n   * @dev fulfillRandomness.\r\n   */\r\n  function requestRandomness(\r\n    bytes32 _keyHash,\r\n    uint256 _fee\r\n  )\r\n    internal\r\n    returns (\r\n      bytes32 requestId\r\n    )\r\n  {\r\n    LINK.transferAndCall(vrfCoordinator, _fee, abi.encode(_keyHash, USER_SEED_PLACEHOLDER));\r\n    // This is the seed passed to VRFCoordinator. The oracle will mix this with\r\n    // the hash of the block containing this request to obtain the seed/input\r\n    // which is finally passed to the VRF cryptographic machinery.\r\n    uint256 vRFSeed  = makeVRFInputSeed(_keyHash, USER_SEED_PLACEHOLDER, address(this), nonces[_keyHash]);\r\n    // nonces[_keyHash] must stay in sync with\r\n    // VRFCoordinator.nonces[_keyHash][this], which was incremented by the above\r\n    // successful LINK.transferAndCall (in VRFCoordinator.randomnessRequest).\r\n    // This provides protection against the user repeating their input seed,\r\n    // which would result in a predictable/duplicate output, if multiple such\r\n    // requests appeared in the same block.\r\n    nonces[_keyHash] = nonces[_keyHash] + 1;\r\n    return makeRequestId(_keyHash, vRFSeed);\r\n  }\r\n\r\n  LinkTokenInterface immutable internal LINK;\r\n  address immutable private vrfCoordinator;\r\n\r\n  // Nonces for each VRF key from which randomness has been requested.\r\n  //\r\n  // Must stay in sync with VRFCoordinator[_keyHash][this]\r\n  mapping(bytes32 /* keyHash */ => uint256 /* nonce */) private nonces;\r\n\r\n  /**\r\n   * @param _vrfCoordinator address of VRFCoordinator contract\r\n   * @param _link address of LINK token contract\r\n   *\r\n   * @dev https://docs.chain.link/docs/link-token-contracts\r\n   */\r\n  constructor(\r\n    address _vrfCoordinator,\r\n    address _link\r\n  ) {\r\n    vrfCoordinator = _vrfCoordinator;\r\n    LINK = LinkTokenInterface(_link);\r\n  }\r\n\r\n  // rawFulfillRandomness is called by VRFCoordinator when it receives a valid VRF\r\n  // proof. rawFulfillRandomness then calls fulfillRandomness, after validating\r\n  // the origin of the call\r\n  function rawFulfillRandomness(\r\n    bytes32 requestId,\r\n    uint256 randomness\r\n  )\r\n    external\r\n  {\r\n    require(msg.sender == vrfCoordinator, \"Only VRFCoordinator can fulfill\");\r\n    fulfillRandomness(requestId, randomness);\r\n  }\r\n}\r\n\r\n\r\n\r\n// Covenstead.sol\r\n\r\n\r\npragma solidity ^0.8.0;\r\n\r\n\r\n\r\ninterface ITNewt {\r\n  function mint(address to, uint256 amount) external;\r\n}\r\n\r\ncontract Coven is Ownable, IERC721Receiver, Pausable, VRFConsumerBase,ReentrancyGuard {\r\n  using Address for address;\r\n  using Counters for Counters.Counter;\r\n  using EnumerableSet for EnumerableSet.UintSet; \r\n\r\n                             \r\n  struct Stake {\r\n    uint16 tokenId;\r\n    uint80 value;\r\n    address owner;\r\n  }\r\n\r\n\r\n  /** INTERFACES */\r\n  WitchesandDemons witchesanddemons;                                                                 // reference to the WitchesandDemons NFT contract\r\n  ITNewt newt;                                                           // reference to the $NEWT contract for minting $NEWT earnings\r\n\r\n\r\n\r\n  event TokenStaked(address owner, uint256 tokenId, uint256 value);\r\n  event WitchClaimed(uint256 tokenId, uint256 earned, bool unstaked);\r\n  event DemonClaimed(uint256 tokenId, uint256 earned, bool unstaked);\r\n\r\n\r\n  mapping(uint256 => Stake) internal covenstead;                                 // maps tokenId to stake\r\n  mapping(uint256 => Stake[]) internal Demons;                                   // maps alpha to all Demon stakes with that alpha\r\n  mapping(address => EnumerableSet.UintSet) private _deposits;\r\n  mapping(uint256 => uint256) public packIndices;                             // tracks lowitchion of each Demon in Pack\r\n  \r\n  \r\n  uint256 internal totalAlphaStaked = 0;                                    // total alpha scores staked\r\n  uint256 public unaccountedRewards = 0;                                  // any rewards distributed when no demons are staked\r\n  uint256 internal NewtPerAlpha = 0;                                      // amount of $NEWT due for each alpha point staked\r\n\r\n\r\n  uint256 internal  DAILY_NEWT_RATE = 5000 ether;                        // Witch earn 5000 $NEWT per day\r\n  uint256 public  MINIMUM_TO_EXIT = 2 days;                               // Witch must have 3 days worth of $NEWT to unstake or else it's too cold\r\n  \r\n  /** Constant Parameters*/\r\n  uint256 internal  constant NEWT_CLAIM_TAX_PERCENTAGE = 20;              // Demons take a 20% tax on all $NEWT claimed\r\n  uint256 public  constant MAXIMUM_GLOBAL_NEWT = 1000000000 ether;        // there will only ever be (roughly) 1 billion $NEWT earned through staking\r\n  uint8   public  constant MAX_ALPHA = 8;       \r\n\r\n\r\n  uint256 internal totalNewtEarned;                                       // amount of $NEWT earned so far\r\n  uint256 internal totalWitchStaked;                                    // number of Witch staked in the Covenstead\r\n  uint256 public lastClaimTimestamp;                                      // the last time $NEWT was claimed\r\n\r\n  bool public rescueEnabled = false;                                    // emergency rescue to allow unstaking without any checks but without $NEWT\r\n\r\n\r\n  //Chainlink Setup:\r\n  bytes32 internal keyHash;\r\n  uint256 public fee;\r\n  uint256 internal randomResult;\r\n  uint256 internal randomNumber;\r\n  address public linkToken;\r\n  uint256 public vrfcooldown = 10000;\r\n  Counters.Counter public vrfReqd;\r\n\r\n\r\n  constructor(address _witchesanddemons, address _newt, address _vrfCoordinator, address _link) \r\n      VRFConsumerBase(_vrfCoordinator, _link)\r\n  { \r\n    witchesanddemons = WitchesandDemons(_witchesanddemons);                                                    // reference to the WitchesandDemons NFT contract\r\n    newt = ITNewt(_newt);                                                //reference to the $NEWT token\r\n\r\n    keyHash = 0xAA77729D3466CA35AE8D28B3BBAC7CC36A5031EFDC430821C02BC31A238AF445;\r\n    fee = 2 * 10 ** 18; // 0.1 LINK (Varies by network)\r\n    linkToken = _link;\r\n\r\n\r\n\r\n\r\n\r\n  }\r\n\r\n  function depositsOf(address account) external view returns (uint256[] memory) {\r\n    EnumerableSet.UintSet storage depositSet = _deposits[account];\r\n    uint256[] memory tokenIds = new uint256[] (depositSet.length());\r\n\r\n    for (uint256 i; i < depositSet.length(); i++) {\r\n      tokenIds[i] = depositSet.at(i);\r\n    }\r\n\r\n    return tokenIds;\r\n  }\r\n\r\n   function addManyToCoven(address account, uint16[] calldata tokenIds) external {    // called in mint\r\n\r\n    require(account == _msgSender() || _msgSender() == address(witchesanddemons), \"DONT GIVE YOUR TOKENS AWAY\");    /// SEE IF I CAN ADD THE MF CONTRACT BAN\r\n\r\n    for (uint i = 0; i < tokenIds.length; i++) {\r\n      if (_msgSender() != address(witchesanddemons)) { // dont do this step if its a mint + stake\r\n\r\n\r\n        require(witchesanddemons.ownerOf(tokenIds[i]) == _msgSender(), \"AINT YO TOKEN\");\r\n        witchesanddemons.transferFrom(_msgSender(), address(this), tokenIds[i]);\r\n        \r\n\r\n      } else if (tokenIds[i] == 0) {\r\n\r\n        continue; // there may be gaps in the array for stolen tokens\r\n      }\r\n\r\n      if (isWitch(tokenIds[i])) \r\n        _addWitchToCovenstead(account, tokenIds[i]);\r\n        \r\n      else \r\n        _addWitchToCovenstead(account, tokenIds[i]);\r\n    }\r\n  }\r\n\r\n\r\n\r\n  function _addWitchToCovenstead(address account, uint256 tokenId) internal _updateEarnings {\r\n    covenstead[tokenId] = Stake({\r\n      owner: account,\r\n      tokenId: uint16(tokenId),\r\n      value: uint80(block.timestamp)\r\n    });\r\n    totalWitchStaked += 1;\r\n   \r\n    emit TokenStaked(account, tokenId, block.timestamp);\r\n    _deposits[account].add(tokenId);\r\n  }\r\n\r\n  function _sendDemonsFishing(address account, uint256 tokenId) internal {\r\n    uint256 alpha = _alphaForDemon(tokenId);\r\n    totalAlphaStaked += alpha;                                                // Portion of earnings ranges from 8 to 5\r\n    packIndices[tokenId] = Demons[alpha].length;                                // Store the location of the Demon in the Pack\r\n    Demons[alpha].push(Stake({                                                  // Add the Demon to the Pack\r\n      owner: account,\r\n      tokenId: uint16(tokenId),\r\n      value: uint80(NewtPerAlpha)\r\n    })); \r\n    emit TokenStaked(account, tokenId, NewtPerAlpha);\r\n    _deposits[account].add(tokenId);\r\n  }\r\n\r\n  /** CLAIMING / UNSTAKING */\r\n\r\n  // realize $NEWT earnings and optionally unstake tokens from the COVEN / FISHING\r\n  function claimManyFromCovenAndFishing(uint16[] calldata tokenIds, bool unstake) external whenNotPaused _updateEarnings nonReentrant() {\r\n\r\n    require(!_msgSender().isContract(), \"Contracts are not allowed big man\");\r\n    \r\n    uint256  owed = 0;\r\n  \r\n    if (owed == 0) return;\r\n    newt.mint(_msgSender(), owed);\r\n\r\n\r\n  }\r\n\r\n\r\n  function calculateReward(uint16[] calldata tokenIds) public view returns (uint256 owed) {\r\n\r\n    for (uint i = 0; i < tokenIds.length; i++) {\r\n      if (isWitch(tokenIds[i]))\r\n        owed += calcRewardWitch(tokenIds[i]);\r\n      else\r\n        owed += calcRewardWitch(tokenIds[i]);\r\n    }\r\n  \r\n  }\r\n\r\n\r\n  function calcRewardWitch(uint256 tokenId) internal view returns (uint256 owed) {\r\n\r\n    Stake memory stake = covenstead[tokenId];\r\n\r\n    if (totalNewtEarned < MAXIMUM_GLOBAL_NEWT) {\r\n        owed = (block.timestamp - stake.value) * DAILY_NEWT_RATE / 1 days;\r\n\r\n    } else if (stake.value > lastClaimTimestamp) {\r\n        owed = 0; // $NEWT production stopped already\r\n\r\n    } else {\r\n        owed = (lastClaimTimestamp - stake.value) * DAILY_NEWT_RATE / 1 days; // stop earning additional $NEWT if it's all been earned\r\n    }\r\n\r\n\r\n  }\r\n\r\n\r\n  function calcRewardDemon(uint256 tokenId) internal view returns (uint256 owed) {\r\n\r\n    uint256 alpha = _alphaForDemon(tokenId);  \r\n    Stake memory stake = Demons[alpha][packIndices[tokenId]];\r\n    owed = (alpha) * (NewtPerAlpha - stake.value); \r\n    // Calculate portion of tokens based on Alpha\r\n\r\n  }\r\n\r\n  // Basically, withdraws $NEWT earnings for a single Witch and optionally unstake it.\r\n  // 20% Demon Tax, 50% chance all goes to Demon if unstaking. \r\n  function _claimFisherFromCoven(uint256 tokenId, bool unstake) internal returns (uint256 owed) {\r\n\r\n    Stake memory stake = covenstead[tokenId];\r\n\r\n    require(stake.owner == _msgSender(), \"SWIPER, NO SWIPING\");\r\n    require(!(unstake && block.timestamp - stake.value < MINIMUM_TO_EXIT), \"GONNA BE COLD WITHOUT TWO DAY'S NEWT\");\r\n\r\n    owed = calcRewardWitch(tokenId);\r\n\r\n    if (unstake) {\r\n      \r\n      if (random(tokenId) & 1 == 1) {                                           // 50% chance of all $NEWT stolen\r\n        _payDemonTax(owed);\r\n        owed = 0;  \r\n      }\r\n      \r\n      delete covenstead[tokenId];\r\n      totalWitchStaked -= 1;\r\n      _deposits[_msgSender()].remove(tokenId);\r\n      witchesanddemons.safeTransferFrom(address(this), _msgSender(), tokenId, \"\");         // send back Witch        \r\n\r\n\r\n    } else {\r\n\r\n      _payDemonTax(owed * NEWT_CLAIM_TAX_PERCENTAGE / 100);                    // percentage tax to staked Demons    \r\n      covenstead[tokenId] = Stake({\r\n        owner: _msgSender(),\r\n        tokenId: uint16(tokenId),\r\n        value: uint80(block.timestamp)\r\n      }); // reset stake\r\n      owed = owed * (100 - NEWT_CLAIM_TAX_PERCENTAGE) / 100;                  // remainder goes to Witch owner\r\n    }\r\n    emit WitchClaimed(tokenId, owed, unstake);\r\n  }\r\n\r\n\r\n  // Basically, withdraws $NEWT earnings for a single Demon and optionally unstake it.\r\n  function _claimDemonFromFishing(uint256 tokenId, bool unstake) internal returns (uint256 owed) {\r\n\r\n    uint256 alpha = _alphaForDemon(tokenId);  \r\n    Stake memory stake = Demons[alpha][packIndices[tokenId]];\r\n\r\n    require(witchesanddemons.ownerOf(tokenId) == address(this), \"AINT A PART OF THE PACK\");                \r\n    require(stake.owner == _msgSender(), \"SWIPER, NO SWIPING\");\r\n\r\n    owed = calcRewardDemon(tokenId);                                         // Calculate portion of tokens based on Alpha\r\n\r\n    if (unstake) {\r\n      totalAlphaStaked -= alpha;                                            // Remove Alpha from total staked\r\n      Stake memory lastStake = Demons[alpha][Demons[alpha].length - 1];         // Shuffle last Demon to current position PT 1 \r\n      Demons[alpha][packIndices[tokenId]] = lastStake;                        // Shuffle last Demon to current position PT 2\r\n      packIndices[lastStake.tokenId] = packIndices[tokenId];                // Shuffle last Demon to current position PT 3\r\n      Demons[alpha].pop();                                                    // Remove duplicate\r\n\r\n      delete packIndices[tokenId];                                          // Delete old mapping\r\n      _deposits[_msgSender()].remove(tokenId);\r\n      witchesanddemons.safeTransferFrom(address(this), _msgSender(), tokenId, \"\");     // Send back Demon        \r\n\r\n\r\n    } else {\r\n\r\n      Demons[alpha][packIndices[tokenId]] = Stake({\r\n        owner: _msgSender(),\r\n        tokenId: uint16(tokenId),\r\n        value: uint80(NewtPerAlpha)\r\n      }); // reset stake\r\n\r\n    }\r\n    emit DemonClaimed(tokenId, owed, unstake);\r\n  }\r\n\r\n\r\n\r\n   // emergency unstake tokens\r\n  function rescue(uint256[] calldata tokenIds) external nonReentrant() {\r\n    require(!_msgSender().isContract(), \"Contracts are not allowed big man\");\r\n    require(rescueEnabled, \"RESCUE DISABLED\");\r\n\r\n    uint256 tokenId;\r\n    Stake memory stake;\r\n    Stake memory lastStake;\r\n    uint256 alpha;\r\n\r\n    for (uint i = 0; i < tokenIds.length; i++) {\r\n      tokenId = tokenIds[i];\r\n      if (isWitch(tokenId)) {\r\n        stake = covenstead[tokenId];\r\n        require(stake.owner == _msgSender(), \"SWIPER, NO SWIPING\");\r\n        delete covenstead[tokenId];\r\n        totalWitchStaked -= 1;\r\n        witchesanddemons.safeTransferFrom(address(this), _msgSender(), tokenId, \"\"); // send back Witch\r\n        emit WitchClaimed(tokenId, 0, true);\r\n      } else {\r\n        alpha = _alphaForDemon(tokenId);\r\n        stake = Demons[alpha][packIndices[tokenId]];\r\n        require(stake.owner == _msgSender(), \"SWIPER, NO SWIPING\");\r\n        totalAlphaStaked -= alpha; // Remove Alpha from total staked\r\n        lastStake = Demons[alpha][Demons[alpha].length - 1];\r\n        Demons[alpha][packIndices[tokenId]] = lastStake; // Shuffle last demon to current position\r\n        packIndices[lastStake.tokenId] = packIndices[tokenId];\r\n        Demons[alpha].pop(); // Remove duplicate\r\n        delete packIndices[tokenId]; // Delete old mapping\r\n        witchesanddemons.safeTransferFrom(address(this), _msgSender(), tokenId, \"\"); // Send back Witch\r\n        emit DemonClaimed(tokenId, 0, true);\r\n      }\r\n    }\r\n  }\r\n\r\n  /** ACCOUNTING */\r\n\r\n  // add $NEWT to claimable pot for the Pack\r\n  function _payDemonTax(uint256 amount) internal {\r\n\r\n    if (totalAlphaStaked == 0) {                                              // if there's no staked Demon > keep track of $NEWT due to Demon\r\n      unaccountedRewards += amount; \r\n      return;\r\n    }\r\n\r\n    NewtPerAlpha += (amount + unaccountedRewards) / totalAlphaStaked;         // makes sure to include any unaccounted $NEWT\r\n    unaccountedRewards = 0;\r\n  }\r\n\r\n  // tracks $SALMIN earnings to ensure it stops once 2.4 billion is eclipsed\r\n  modifier _updateEarnings() {\r\n\r\n    if (totalNewtEarned < MAXIMUM_GLOBAL_NEWT) {\r\n      totalNewtEarned += \r\n        (block.timestamp - lastClaimTimestamp)\r\n        * totalWitchStaked\r\n        * DAILY_NEWT_RATE / 1 days; \r\n      lastClaimTimestamp = block.timestamp;\r\n    }\r\n    _;\r\n  }\r\n\r\n\r\n  function isWitch(uint256 tokenId) internal view \r\n  returns (bool witch) {\r\n\r\n   \r\n\r\n  \r\n    // SheepWolf memory t = witchesanddemons.getTokenTraits(tokenId);(sheep, , , , , , , , , ) = witchesanddemons.tokenTraits(tokenId);\r\n    (witch, ) = witchesanddemons.tokenTraits(tokenId);\r\n\r\n\r\n  }\r\n\r\n  // gets the alpha score for a Demon                                          \r\n  function _alphaForDemon(uint256 tokenId) internal view returns (uint8) {\r\n    ( ,uint8 alphaIndex) = witchesanddemons.tokenTraits(tokenId);\r\n\r\n    return MAX_ALPHA - alphaIndex; // alpha index is 0-3\r\n  }\r\n\r\n\r\n  // chooses a random Demon thief when a newly minted token is stolen\r\n  function randomDemonOwner(uint256 seed) internal view returns (address) {\r\n    if (totalAlphaStaked == 0) return address(0x0);\r\n\r\n    uint256 bucket = (seed & 0xFFFFFFFF) % totalAlphaStaked;                  // choose a value from 0 to total alpha staked\r\n    uint256 cumulative;\r\n    seed >>= 32;\r\n\r\n    for (uint i = MAX_ALPHA - 3; i <= MAX_ALPHA; i++) {                     // loop through each bucket of Demons with the same alpha score\r\n      cumulative += Demons[i].length * i;\r\n      if (bucket >= cumulative) continue;                                   // if the value is not inside of that bucket, keep going\r\n\r\n      return Demons[i][seed % Demons[i].length].owner;                          // get the address of a random Demon with that alpha score\r\n    }\r\n\r\n    return address(0x0);\r\n  }\r\n\r\n  /** CHANGE PARAMETERS */\r\n\r\n\r\n  function setInit(address _witchesanddemons, address _newt) external onlyOwner{\r\n    witchesanddemons = WitchesandDemons(_witchesanddemons);                                              // reference to the WitchesandDemons NFT contract\r\n    newt = ITNewt(_newt);                                                //reference to the $NEWT token\r\n\r\n  }\r\n\r\n  function changeDailyRate(uint256 _newRate) external onlyOwner{\r\n      DAILY_NEWT_RATE = _newRate;\r\n  }\r\n\r\n  function changeMinExit(uint256 _newExit) external onlyOwner{\r\n      _newExit = _newExit ;\r\n  }\r\n\r\n  function setRescueEnabled(bool _enabled) external onlyOwner {\r\n    rescueEnabled = _enabled;\r\n  }\r\n\r\n  function setPaused(bool _paused) external onlyOwner {\r\n    if (_paused) _pause();\r\n    else _unpause();\r\n  }\r\n  \r\n        \r\n  /** RANDOMNESSSS */\r\n\r\n  function changeLinkFee(uint256 _fee) external onlyOwner {\r\n    // fee = 0.1 * 10 ** 18; // 0.1 LINK (Varies by network)\r\n    fee = _fee;\r\n  }\r\n\r\n  function random(uint256 seed) internal view returns (uint256) {\r\n    return uint256(keccak256(abi.encodePacked(\r\n      tx.origin,\r\n      blockhash(block.number - 1),\r\n      block.timestamp,\r\n      seed,\r\n      randomNumber\r\n    )));\r\n  }\r\n\r\n  function initChainLink() external onlyOwner {\r\n      getRandomChainlink();\r\n  }\r\n\r\n  function getRandomChainlink() internal returns (bytes32 requestId) {\r\n\r\n    if (vrfReqd.current() <= vrfcooldown) {\r\n      vrfReqd.increment();\r\n      return 0x000;\r\n    }\r\n\r\n    require(LINK.balanceOf(address(this)) >= fee, \"Not enough LINK - fill contract with faucet\");\r\n    vrfReqd.reset();\r\n    return requestRandomness(keyHash, fee);\r\n  }\r\n\r\n  function changeVrfCooldown(uint256 _cooldown) external onlyOwner{\r\n      vrfcooldown = _cooldown;\r\n  }\r\n\r\n  function fulfillRandomness(bytes32 requestId, uint256 randomness) internal override {\r\n      bytes32 reqId = requestId;\r\n\r\n      \r\n      randomNumber = randomness;\r\n  }\r\n\r\n  function withdrawLINK() external onlyOwner {\r\n    uint256 tokenSupply = IERC20(linkToken).balanceOf(address(this));\r\n    IERC20(linkToken).transfer(msg.sender, tokenSupply);\r\n  }\r\n   \r\n   \r\n  /** OTHERS  */\r\n\r\n\r\n  function onERC721Received(address, address from, uint256, bytes calldata) external pure override returns (bytes4) {\r\n\r\n    require(from == address(0x0), \"Cannot send tokens to Barn directly\");\r\n    return IERC721Receiver.onERC721Received.selector;\r\n\r\n  }\r\n\r\n\r\n\r\n\r\n  \r\n}\r\n\r\n// WitchesandDemons.sol\r\n\r\n\r\npragma solidity ^0.8.7;\r\n\r\n\r\ninterface INewt {\r\n  function burn(address from, uint256 amount) external;\r\n}\r\n\r\ninterface ITraits {\r\n  function tokenURI(uint256 tokenId) external view returns (string memory);\r\n}\r\n\r\ninterface IWitchesandDemons {\r\n  struct ManBear {bool isFisherman; uint8[14] traitarray; uint8 alphaIndex;}\r\n  function getPaidTokens() external view returns (uint256);\r\n  function getTokenTraits(uint256 tokenId) external view returns (ManBear memory);\r\n}\r\n\r\ninterface ICoven {\r\n  function addManyToCovenSideAndFishing(address account, uint16[] calldata tokenIds) external;\r\n  function randomBearOwner(uint256 seed) external view returns (address);\r\n}\r\n\r\ncontract WitchesandDemons is IWitchesandDemons, ERC721Enumerable, Ownable, Pausable, VRFConsumerBase {\r\n  using Counters for Counters.Counter;\r\n  using EnumerableSet for EnumerableSet.UintSet; \r\n\r\n\r\n  // mint variables                    \r\n  uint256 public immutable MAX_TOKENS;                                   // max number of tokens that can be minted - 50000 in production\r\n  uint256 public PAID_TOKENS;                                            // number of tokens that can be claimed for free - 20% of MAX_TOKENS\r\n  uint16 public minted;                                                  // number of tokens have been minted so far\r\n  uint256 public constant MINT_PRICE = .069420 ether;                    // mint price\r\n      \r\n\r\n  \r\n  string public baseURI;\r\n\r\n  // mappings\r\n  mapping(address => uint256) public whitelists;\r\n  mapping(uint256 => ManBear) public tokenTraits;                       // mapping from tokenId to a struct containing the token's traits\r\n  mapping(uint256 => uint256) public existingCombinations;              // mapping from hashed(tokenTrait) to the tokenId it's associated with, Why? used to ensure there are no duplicates\r\n  mapping(address => uint256[]) public _mints;\r\n\r\n\r\n\r\n  // Pobabilities & Aliases\r\n  // 0 - 8 are associated with fishermen, 9 - 13 are associated with Bears\r\n  uint8[][18] public rarities;\r\n  uint8[][18] public aliases;\r\n\r\n\r\n  ICoven public coven;                                                       // STAKING - reference to the Barn for choosing random Bear thieves\r\n  INewt public newt;                                                       // TOKEN - reference to $NEWT for burning on mint\r\n  ITraits public traits;                                                    // TRAITS - reference to Traits\r\n\r\n  // Team Wallets\r\n\r\n  address private project_wallet = 0x06e8198A5a4AB3E5F4B13DdC9e5c2FCDDD4f8838; \r\n\taddress private Bear1 = 0x9E4FaAA4EFd0fb8CbC653Ee68C01c066d078098D; \r\n\taddress private Bear2 = 0xe18195D4995D994fAa3663db0b6E2FFF4042D0a1; \r\n\taddress private Bear3 = 0x9c39cD2f557B5E851f44ab18714BbBB15FA7417E; \r\n  address private Bear4 = 0x24af21668F33C8C279025b0E53fCC3bFf48426A0; \r\n  \r\n\r\n  //Chainlink Setup:\r\n  bytes32 internal keyHash;\r\n  uint256 public fee;\r\n  uint256 internal randomResult;\r\n  uint256 internal randomNumber;\r\n  address public linkToken;\r\n  uint256 public vrfcooldown = 10000;\r\n  Counters.Counter public vrfReqd;\r\n\r\n\r\n\r\n\r\n  constructor(address _newt, uint256 _maxTokens, address _vrfCoordinator, address _link) \r\n      ERC721(\"BearGame\", 'BEARGAME') \r\n      VRFConsumerBase(_vrfCoordinator, _link)  \r\n\r\n  { \r\n\r\n\r\n    keyHash = 0xAA77729D3466CA35AE8D28B3BBAC7CC36A5031EFDC430821C02BC31A238AF445;\r\n    fee = 2 * 10 ** 18; // 0.1 LINK (Varies by network)\r\n    linkToken = _link;\r\n    \r\n  \r\n\r\n\r\n    // Initate Interfaces\r\n    newt = INewt(_newt);\r\n\r\n    \r\n    MAX_TOKENS = _maxTokens;\r\n    PAID_TOKENS = _maxTokens / 5;\r\n\r\n    // string[13] _traitTypes = ['Hat','Eyes','Body','Pants','Skintone','Mouth','Feet','Fishing Pole','Fish','Fur','Eyes','Clothes','Mouth','Alpha'];\r\n\r\n    rarities[0] = [31,49,51,69,113,187,204,207,225]; \r\n    rarities[1] = [35,48,67,115,189,208,221];\r\n    rarities[2] = [59,97,136,159,197];\r\n    rarities[3] = [85,113,131,143,169];\r\n    rarities[4] = [255,255,255,255];\r\n    rarities[5] = [34,59,118,164,197,222];\r\n    rarities[6] = [59,111,145,197];\r\n    rarities[7] = [57,93,163,199];\r\n    rarities[8] = [255];\r\n\r\n    aliases[0] = [8,7,6,5,4,3,2,1,0];\r\n    aliases[1] = [6,5,4,3,2,1,0];\r\n    aliases[2] = [4,3,2,1,0];\r\n    aliases[3] = [4,3,2,1,0];\r\n    aliases[4] = [3,2,1,0];\r\n    aliases[5] = [5,4,3,2,1,0];\r\n    aliases[6] = [3,2,1,0];\r\n    aliases[7] = [3,2,1,0];\r\n    aliases[8] = [0];\r\n\r\n    rarities[9] = [255,255,255,255,255];\r\n    rarities[10] = [39,51,59,67,125,131,189,197,204,217];\r\n    rarities[11] = [51,54,57,64,72,90,194,199,202,207,212];\r\n    rarities[12] = [48,60,96,160,196,208];\r\n    rarities[13] = [51,102,153,204];\r\n\r\n    aliases[9] = [0,1,2,3,4];\r\n    aliases[10] = [9,8,7,6,5,4,3,2,1,0];\r\n    aliases[11] = [10,9,8,7,6,5,4,3,2,1,0];\r\n    aliases[12] = [5,4,3,2,1,0];\r\n    aliases[13] = [3,2,1,0];\r\n    \r\n\r\n  }\r\n\r\n\r\n  /** \r\n   * mint a token - 90% Bears, 10% Fisherman\r\n   * The first 20% are free to claim, the remaining cost $NEWT\r\n   */\r\n      \r\n    \r\n  // Calculates Mint Cost using $NEWT\r\n  function mintCost(uint256 tokenId) public view returns (uint256) {\r\n    if (tokenId <= PAID_TOKENS) return 0;                           // the first 20% are paid in ETH, Hence 0 $NEWT\r\n    if (tokenId <= MAX_TOKENS * 2 / 5) return 20000 ether;          // the next 20% are 20000 $NEWT\r\n    if (tokenId <= MAX_TOKENS * 4 / 5) return 40000 ether;          // the next 40% are 40000 $NEWT\r\n    return 80000 ether;                                             // the final 20% are 80000 $NEWT\r\n  }\r\n\r\n  // Main Mint Functions\r\n  function mint(uint256 amount, bool stake) external payable whenNotPaused {\r\n\r\n    address msgSender = _msgSender();\r\n\r\n    require(tx.origin == msgSender, \"Only EOA\");\r\n    require(minted + amount <= MAX_TOKENS, \"All tokens minted\");\r\n    require(amount > 0 && amount <= 10, \"Invalid mint amount\");\r\n    \r\n    if (minted < PAID_TOKENS) {\r\n\r\n\r\n      uint256 mintCostEther = MINT_PRICE * amount;\r\n      if (whitelists[msgSender] == 1) {\r\n          mintCostEther = ( amount - 1) * MINT_PRICE;\r\n          whitelists[msgSender] = 0;\r\n      }\r\n    \r\n      require(minted + amount <= PAID_TOKENS, \"All tokens on-sale already sold\");\r\n      require(mintCostEther == msg.value, \"Invalid payment amount\");\r\n\r\n\r\n    } else {\r\n\r\n      require(msg.value == 0);\r\n\r\n    }\r\n\r\n    uint256 totalNewtCost = 0;                                                          // $NEWT Cost to mint. 0 is Gen0\r\n    uint16[] memory tokenIds = stake ? new uint16[](amount) : new uint16[](0);          \r\n    uint256 seed;\r\n\r\n    for (uint i = 0; i < amount; i++) {\r\n      minted++;\r\n      seed = random(minted);                                                             // NOTES: SUS\r\n      generate(minted, seed);                                                            // Generates Token Traits and adds it to the array\r\n      address recipient = selectRecipient(seed);                                         // Selects who the NFT is going to. Gen0 always will be minter. \r\n      if (!stake || recipient != msgSender) {                                            // recipient != _msgSender() -- IF I BAN CONTRACT, SHIT MIGHT BE GOOOOOFY\r\n        _safeMint(recipient, minted);\r\n      } else {\r\n        _safeMint(address(coven), minted);\r\n        tokenIds[i] = minted;\r\n      }\r\n      totalNewtCost += mintCost(minted);\r\n    }\r\n    \r\n    if (totalNewtCost > 0) newt.burn(msgSender, totalNewtCost);\r\n    if (stake) coven.addManyToCovenSideAndFishing(msgSender, tokenIds);\r\n  }\r\n\r\n\r\n\r\n\r\n\r\n  function transferFrom(\r\n    address from,\r\n    address to,\r\n    uint256 tokenId\r\n  ) public virtual override {\r\n    // Hardcode the Coven's approval so that users don't have to waste gas approving\r\n    if (_msgSender() != address(coven))\r\n      require(_isApprovedOrOwner(_msgSender(), tokenId), \"ERC721: transfer caller is not owner nor approved\");\r\n    _transfer(from, to, tokenId);\r\n  }\r\n\r\n\r\n\r\n\r\n  // generates traits for a specific token, checking to make sure it's unique\r\n  function generate(uint256 tokenId, uint256 seed) internal returns (ManBear memory t) {\r\n    getRandomChainlink();\r\n    t = selectTraits(seed);\r\n    if (existingCombinations[structToHash(t.isFisherman, t.traitarray, t.alphaIndex)] == 0) {\r\n      tokenTraits[tokenId] = t;\r\n      existingCombinations[structToHash(t.isFisherman, t.traitarray, t.alphaIndex)] = tokenId;\r\n      return t;\r\n    }\r\n    return generate(tokenId, random(seed));\r\n  }\r\n\r\n  // Selects Trait using A.J. Walker's Alias algorithm for O(1) rarity table lookup\r\n  function selectTrait(uint16 seed, uint8 traitType) internal view returns (uint8) {\r\n\r\n    uint8 trait = uint8(seed) % uint8(rarities[traitType].length);           \r\n    if (seed >> 8 < rarities[traitType][trait]) return trait;                 \r\n    return aliases[traitType][trait];\r\n\r\n  }\r\n\r\n\r\n  // selects the species and all of its traits based on the seed value\r\n  function selectTraits(uint256 seed) internal view returns (ManBear memory t) {    \r\n    t.isFisherman = (seed & 0xFFFF) % 10 != 0;\r\n    uint8 shift = t.isFisherman ? 0 : 9;                                          // 0 if its a Fisherman, 9 if its Bear\r\n\r\n    seed >>= 16;\r\n    if (t.isFisherman) {\r\n\r\n      // / 0 - 8 are associated with fishermen, \r\n\r\n\r\n      t.traitarray[0] = selectTrait(uint16(seed & 0xFFFF), 0 + shift);\r\n      seed >>= 16;\r\n      t.traitarray[1] = selectTrait(uint16(seed & 0xFFFF), 1 + shift);\r\n      seed >>= 16;\r\n      t.traitarray[2] = selectTrait(uint16(seed & 0xFFFF), 2 + shift);\r\n      seed >>= 16;\r\n      t.traitarray[3] = selectTrait(uint16(seed & 0xFFFF), 3 + shift);\r\n      seed >>= 16;\r\n      t.traitarray[4] = selectTrait(uint16(seed & 0xFFFF), 4 + shift);\r\n      seed >>= 16;\r\n      t.traitarray[5] = selectTrait(uint16(seed & 0xFFFF), 5 + shift);\r\n      seed >>= 16;\r\n      t.traitarray[6] = selectTrait(uint16(seed & 0xFFFF), 6 + shift);\r\n      seed >>= 16;\r\n      t.traitarray[7] = selectTrait(uint16(seed & 0xFFFF), 7 + shift);\r\n      seed >>= 16;\r\n      t.traitarray[8] = selectTrait(uint16(seed & 0xFFFF), 8 + shift);\r\n\r\n      t.alphaIndex = 0;\r\n\r\n\r\n\r\n\r\n    } else {\r\n      // 9 - 13 are associated with Bears\r\n\r\n      t.traitarray[9] = selectTrait(uint16(seed & 0xFFFF), 0 + shift);\r\n      seed >>= 16;\r\n      t.traitarray[10] = selectTrait(uint16(seed & 0xFFFF), 1 + shift);\r\n      seed >>= 16;\r\n      t.traitarray[11] = selectTrait(uint16(seed & 0xFFFF), 2 + shift);\r\n      seed >>= 16;\r\n      t.traitarray[12] = selectTrait(uint16(seed & 0xFFFF), 3 + shift);\r\n      seed >>= 16;\r\n      t.traitarray[13] = selectTrait(uint16(seed & 0xFFFF), 4 + shift);\r\n\r\n      t.alphaIndex = t.traitarray[13];\r\n      \r\n      \r\n    }\r\n\r\n  }\r\n\r\n\r\n  // converts a struct to a 256 bit hash to check for uniqueness\r\nfunction structToHash(bool isFisherman, uint8[14] memory traitarray, uint8 alphaIndex) internal pure returns (uint256) {\r\n    if(isFisherman){\r\n      return uint256(bytes32(abi.encodePacked(true,\r\n        traitarray[0],\r\n        traitarray[1],\r\n        traitarray[2],\r\n        traitarray[3],\r\n        traitarray[4],\r\n        traitarray[5],\r\n        traitarray[6],\r\n        traitarray[7],\r\n        traitarray[8],\r\n        \"0\",\r\n        \"0\",\r\n        \"0\",\r\n        \"0\",\r\n        \"0\",\r\n        alphaIndex)));\r\n    }\r\n    else{\r\n      return uint256(bytes32(abi.encodePacked(false,\r\n        \"0\",\r\n        \"0\",\r\n        \"0\",\r\n        \"0\",\r\n        \"0\",\r\n        \"0\",\r\n        \"0\",\r\n        \"0\",\r\n        \"0\",\r\n        traitarray[9],\r\n        traitarray[10],\r\n        traitarray[11],\r\n        traitarray[12],\r\n        traitarray[13],\r\n        alphaIndex)));\r\n    }\r\n    \r\n  }\r\n  // Select who the NFT goes to --- The first 20% (ETH purchases) go to the minter & the remaining 80% have a 10% chance to be given to a random staked Bear\r\n  function selectRecipient(uint256 seed) internal view returns (address) {\r\n    if (minted <= PAID_TOKENS || ((seed >> 245) % 10) != 0) return _msgSender();                 // top 10 bits haven't been used\r\n    address thief = coven.randomBearOwner(seed >> 144);                                          // 144 bits reserved for trait selection\r\n    if (thief == address(0x0)) return _msgSender();\r\n    return thief;\r\n  }\r\n\r\n\r\n  /** READ */\r\n\r\n  function getTokenTraits(uint256 tokenId) external view override returns (ManBear memory) {\r\n    return tokenTraits[tokenId];\r\n  }\r\n\r\n  function getPaidTokens() external view override returns (uint256) {\r\n    return PAID_TOKENS;\r\n  }\r\n\r\n\r\n  // called after deployment so that the contract can get random Bear thieves\r\n  function setCoven(address _coven) external onlyOwner {\r\n    coven = ICoven(_coven);\r\n    getRandomChainlink();\r\n  }\r\n\r\n  // Set Interfaces\r\n  function setInit(address _coven, address erc20Address, address _traits ) public onlyOwner {\r\n    coven = ICoven(_coven);\r\n    newt = INewt(erc20Address);\r\n    // newt = IERC20(_newt);\r\n    traits = ITraits(_traits);\r\n    getRandomChainlink();\r\n  }\r\n  \r\n  // Set Base URL\r\n  function setURI(string memory _newBaseURI) external onlyOwner {\r\n\t\t  baseURI = _newBaseURI;\r\n  }\r\n\r\n  // withdraw functions\r\n  function withdraw() public payable onlyOwner {\r\n\r\n    uint256 _project = (address(this).balance * 10) / 100;        \r\n    uint256 _bear1 = (address(this).balance * 225) / 1000;  \r\n    uint256 _bear2 = (address(this).balance * 225) / 1000;  \r\n    uint256 _bear3 = (address(this).balance * 225) / 1000;  \r\n    uint256 _bear4 = (address(this).balance * 225) / 1000;  \r\n\r\n\t\tpayable(project_wallet).transfer(_project);\r\n    payable(Bear1).transfer(_bear1);\r\n\t\tpayable(Bear2).transfer(_bear2);\r\n    payable(Bear3).transfer(_bear3);\r\n\t\tpayable(Bear4).transfer(_bear4);\r\n\r\n  }\r\n\r\n\r\n\r\n  // updates the number of tokens for sale\r\n  function setPaidTokens(uint256 _paidTokens) external onlyOwner {\r\n    PAID_TOKENS = _paidTokens;\r\n    // MAX_TOKENS = _maxTokens;\r\n    // PAID_TOKENS = _maxTokens / 5;\r\n  }\r\n\r\n\r\n  // enables owner to pause / unpause minting\r\n  function setPaused(bool _paused) external onlyOwner {\r\n    if (_paused) _pause();\r\n    else _unpause();\r\n  }\r\n\r\n\r\n  function addWhitelist(address[] calldata addressArrays) external onlyOwner {\r\n\r\n    uint256 addylength = addressArrays.length;\r\n\r\n    for (uint256 i; i < addylength; i++ ){\r\n\r\n          whitelists[addressArrays[i]] = 1;\r\n    }\r\n  }\r\n\r\n\r\n\r\n\r\n  /** RENDER */\r\n\r\n  function setBaseURI(string memory newUri) public onlyOwner {\r\n      baseURI = newUri;\r\n  }\r\n\r\n\r\n  function _baseURI() internal view virtual override returns (string memory) {\r\n      return baseURI;\r\n  }\r\n\r\n\r\n  function getTokenIds(address _owner) public view returns (uint256[] memory _tokensOfOwner) {\r\n        _tokensOfOwner = new uint256[](balanceOf(_owner));\r\n        for (uint256 i;i<balanceOf(_owner);i++){\r\n            _tokensOfOwner[i] = tokenOfOwnerByIndex(_owner, i);\r\n        }\r\n  }\r\n\r\n\r\n      \r\n  /** RANDOMNESSSS */\r\n\r\n  function random(uint256 seed) internal view returns (uint256) {\r\n    return uint256(keccak256(abi.encodePacked(\r\n      tx.origin,\r\n      blockhash(block.number - 1),\r\n      block.timestamp,\r\n      seed,\r\n      randomNumber\r\n    )));\r\n  }\r\n\r\n  function changeLinkFee(uint256 _fee) external onlyOwner {\r\n    // fee = 0.1 * 10 ** 18; // 0.1 LINK (Varies by network)\r\n    fee = _fee;\r\n  }\r\n\r\n  function initChainLink() external onlyOwner {\r\n      getRandomChainlink();\r\n  }\r\n\r\n  function getRandomChainlink() internal returns (bytes32 requestId) {\r\n\r\n    if (vrfReqd.current() <= vrfcooldown) {\r\n      vrfReqd.increment();\r\n      return 0x000;\r\n    }\r\n\r\n    require(LINK.balanceOf(address(this)) >= fee, \"Not enough LINK - fill contract with faucet\");\r\n    vrfReqd.reset();\r\n    return requestRandomness(keyHash, fee);\r\n  }\r\n\r\n  function changeVrfCooldown(uint256 _cooldown) external onlyOwner{\r\n      vrfcooldown = _cooldown;\r\n  }\r\n\r\n  function fulfillRandomness(bytes32 requestId, uint256 randomness) internal override {\r\n      bytes32 reqId = requestId;\r\n      randomNumber = randomness;\r\n  }\r\n\r\n  function withdrawLINK() external onlyOwner {\r\n    uint256 tokenSupply = IERC20(linkToken).balanceOf(address(this));\r\n    IERC20(linkToken).transfer(msg.sender, tokenSupply);\r\n  }\r\n\r\n\r\n}\r\n\r\n// Strings.sol\r\n\r\n\r\npragma solidity ^0.8.0;\r\n\r\n/**\r\n * @dev String operations.\r\n */\r\nlibrary Strings {\r\n    bytes16 private constant _HEX_SYMBOLS = \"0123456789abcdef\";\r\n\r\n    /**\r\n     * @dev Converts a `uint256` to its ASCII `string` decimal representation.\r\n     */\r\n    function toString(uint256 value) internal pure returns (string memory) {\r\n        // Inspired by OraclizeAPI's implementation - MIT licence\r\n        // https://github.com/oraclize/ethereum-api/blob/b42146b063c7d6ee1358846c198246239e9360e8/oraclizeAPI_0.4.25.sol\r\n\r\n        if (value == 0) {\r\n            return \"0\";\r\n        }\r\n        uint256 temp = value;\r\n        uint256 digits;\r\n        while (temp != 0) {\r\n            digits++;\r\n            temp /= 10;\r\n        }\r\n        bytes memory buffer = new bytes(digits);\r\n        while (value != 0) {\r\n            digits -= 1;\r\n            buffer[digits] = bytes1(uint8(48 + uint256(value % 10)));\r\n            value /= 10;\r\n        }\r\n        return string(buffer);\r\n    }\r\n\r\n    /**\r\n     * @dev Converts a `uint256` to its ASCII `string` hexadecimal representation.\r\n     */\r\n    function toHexString(uint256 value) internal pure returns (string memory) {\r\n        if (value == 0) {\r\n            return \"0x00\";\r\n        }\r\n        uint256 temp = value;\r\n        uint256 length = 0;\r\n        while (temp != 0) {\r\n            length++;\r\n            temp >>= 8;\r\n        }\r\n        return toHexString(value, length);\r\n    }\r\n\r\n    /**\r\n     * @dev Converts a `uint256` to its ASCII `string` hexadecimal representation with fixed length.\r\n     */\r\n    function toHexString(uint256 value, uint256 length) internal pure returns (string memory) {\r\n        bytes memory buffer = new bytes(2 * length + 2);\r\n        buffer[0] = \"0\";\r\n        buffer[1] = \"x\";\r\n        for (uint256 i = 2 * length + 1; i > 1; --i) {\r\n            buffer[i] = _HEX_SYMBOLS[value & 0xf];\r\n            value >>= 4;\r\n        }\r\n        require(value == 0, \"Strings: hex length insufficient\");\r\n        return string(buffer);\r\n    }\r\n}","ABI":"[{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_witchesanddemons\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_newt\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_vrfCoordinator\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_link\",\"type\":\"address\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"earned\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"bool\",\"name\":\"unstaked\",\"type\":\"bool\"}],\"name\":\"DemonClaimed\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"Paused\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"TokenStaked\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"Unpaused\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"earned\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"bool\",\"name\":\"unstaked\",\"type\":\"bool\"}],\"name\":\"WitchClaimed\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"MAXIMUM_GLOBAL_NEWT\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"MAX_ALPHA\",\"outputs\":[{\"internalType\":\"uint8\",\"name\":\"\",\"type\":\"uint8\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"MINIMUM_TO_EXIT\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"internalType\":\"uint16[]\",\"name\":\"tokenIds\",\"type\":\"uint16[]\"}],\"name\":\"addManyToCoven\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint16[]\",\"name\":\"tokenIds\",\"type\":\"uint16[]\"}],\"name\":\"calculateReward\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"owed\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_newRate\",\"type\":\"uint256\"}],\"name\":\"changeDailyRate\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_fee\",\"type\":\"uint256\"}],\"name\":\"changeLinkFee\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_newExit\",\"type\":\"uint256\"}],\"name\":\"changeMinExit\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_cooldown\",\"type\":\"uint256\"}],\"name\":\"changeVrfCooldown\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint16[]\",\"name\":\"tokenIds\",\"type\":\"uint16[]\"},{\"internalType\":\"bool\",\"name\":\"unstake\",\"type\":\"bool\"}],\"name\":\"claimManyFromCovenAndFishing\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"depositsOf\",\"outputs\":[{\"internalType\":\"uint256[]\",\"name\":\"\",\"type\":\"uint256[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"fee\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"initChainLink\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"lastClaimTimestamp\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"linkToken\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"},{\"internalType\":\"bytes\",\"name\":\"\",\"type\":\"bytes\"}],\"name\":\"onERC721Received\",\"outputs\":[{\"internalType\":\"bytes4\",\"name\":\"\",\"type\":\"bytes4\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"packIndices\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"paused\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"requestId\",\"type\":\"bytes32\"},{\"internalType\":\"uint256\",\"name\":\"randomness\",\"type\":\"uint256\"}],\"name\":\"rawFulfillRandomness\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256[]\",\"name\":\"tokenIds\",\"type\":\"uint256[]\"}],\"name\":\"rescue\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"rescueEnabled\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_witchesanddemons\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_newt\",\"type\":\"address\"}],\"name\":\"setInit\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bool\",\"name\":\"_paused\",\"type\":\"bool\"}],\"name\":\"setPaused\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bool\",\"name\":\"_enabled\",\"type\":\"bool\"}],\"name\":\"setRescueEnabled\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"unaccountedRewards\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"vrfReqd\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"_value\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"vrfcooldown\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"withdrawLINK\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}]","ContractName":"Coven","CompilerVersion":"v0.8.7+commit.e28d00a7","OptimizationUsed":"1","Runs":"200","ConstructorArguments":"000000000000000000000000b36cab10277883607fa42a7992fcd9b3bd05adf300000000000000000000000003e25f2d9d34e2e5f9a3659695f8b470ce6c69df0000000000000000000000003d2341adb2d31f1c5530cdc622016af293177ae0000000000000000000000000b0897686c545045afc77cf20ec7a532e3120e0f1","EVMVersion":"Default","Library":"","LicenseType":"MIT","Proxy":"0","Implementation":"","SwarmSource":"ipfs://36c49e9b492a00209a27274bef062b8645a892fa3ec2c39cb5cf993d06438022"}]}