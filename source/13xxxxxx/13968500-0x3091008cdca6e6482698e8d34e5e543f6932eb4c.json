{"status":"1","message":"OK","result":[{"SourceCode":"// contracts/XChainTrade.sol\r\n// SPDX-License-Identifier: GPL-3.0\r\n\r\n// This is the  NFT sale contract for XChain Tech NFTs (ID 0)\r\n// More info at https://xchain.tech and via email at info@xchain.tech\r\n// To contact the XChain Tech Foundation: roberto@xchain.foundation\r\n\r\npragma solidity ^0.8.7;\r\n\r\n// File: IXChainTrade.sol\r\n// XChain Tech Trade Contract\r\n\r\ninterface IXChainTrade {\r\n    function currentPrice() external view returns(uint256);\r\n    function purchase() external payable;\r\n    function withdraw(uint256 amount, address payable destAddr) external;\r\n    function mint(address to, uint256 id, uint256 amount, uint lockedUntilTimestamp) external;\r\n    function totalSupply(uint256 id) external view returns (uint256);\r\n}\r\n\r\nabstract contract Context {\r\n    function _msgSender() internal view virtual returns (address) {return msg.sender;}\r\n    function _msgData() internal view virtual returns (bytes calldata) {return msg.data;}\r\n}\r\n\r\nlibrary Address {\r\n    function isContract(address account) internal view returns (bool) {\r\n        return account.code.length > 0;\r\n    }\r\n\r\n    function sendValue(address payable recipient, uint256 amount) internal {\r\n        require(address(this).balance >= amount, \"Address: insufficient balance\");\r\n        (bool success, ) = recipient.call{value: amount}(\"\");\r\n        require(success, \"Address: unable to send value, recipient may have reverted\");\r\n    }\r\n\r\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\r\n        return functionCall(target, data, \"Address: low-level call failed\");\r\n    }\r\n\r\n    function functionCall(address target, bytes memory data, string memory errorMessage) internal returns (bytes memory) {\r\n        return functionCallWithValue(target, data, 0, errorMessage);\r\n    }\r\n\r\n    function functionCallWithValue(address target, bytes memory data, uint256 value) internal returns (bytes memory) {\r\n        return functionCallWithValue(target, data, value, \"Address: low-level call with value failed\");\r\n    }\r\n\r\n    function functionCallWithValue(address target, bytes memory data, uint256 value, string memory errorMessage) internal returns (bytes memory) {\r\n        require(address(this).balance >= value, \"Address: insufficient balance for call\");\r\n        require(isContract(target), \"Address: call to non-contract\");\r\n        (bool success, bytes memory returndata) = target.call{value: value}(data);\r\n        return verifyCallResult(success, returndata, errorMessage);\r\n    }\r\n\r\n    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\r\n        return functionStaticCall(target, data, \"Address: low-level static call failed\");\r\n    }\r\n\r\n    function functionStaticCall(address target, bytes memory data, string memory errorMessage) internal view returns (bytes memory) {\r\n        require(isContract(target), \"Address: static call to non-contract\");\r\n        (bool success, bytes memory returndata) = target.staticcall(data);\r\n        return verifyCallResult(success, returndata, errorMessage);\r\n    }\r\n\r\n    function functionDelegateCall(address target, bytes memory data) internal returns (bytes memory) {\r\n        return functionDelegateCall(target, data, \"Address: low-level delegate call failed\");\r\n    }\r\n\r\n    function functionDelegateCall(address target, bytes memory data, string memory errorMessage) internal returns (bytes memory) {\r\n        require(isContract(target), \"Address: delegate call to non-contract\");\r\n        (bool success, bytes memory returndata) = target.delegatecall(data);\r\n        return verifyCallResult(success, returndata, errorMessage);\r\n    }\r\n\r\n    function verifyCallResult(bool success, bytes memory returndata, string memory errorMessage) internal pure returns (bytes memory) {\r\n        if (success) {\r\n            return returndata;\r\n        } else {\r\n            if (returndata.length > 0) {\r\n                assembly {\r\n                    let returndata_size := mload(returndata)\r\n                    revert(add(32, returndata), returndata_size)\r\n                }\r\n            } else {\r\n                revert(errorMessage);\r\n            }\r\n        }\r\n    }\r\n}\r\n\r\ninterface IERC165 {\r\n    function supportsInterface(bytes4 interfaceId) external view returns (bool);\r\n}\r\n\r\n/**\r\n * ```solidity\r\n * function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {\r\n *     return interfaceId == type(MyInterface).interfaceId || super.supportsInterface(interfaceId);\r\n * }\r\n * ```\r\n */\r\nabstract contract ERC165 is IERC165 {\r\n    function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {\r\n        return interfaceId == type(IERC165).interfaceId;\r\n    }\r\n}\r\n\r\ninterface IERC1155Receiver is IERC165 {\r\n    /**\r\n     * @param operator The address which initiated the transfer (i.e. msg.sender)\r\n     * @param from The address which previously owned the token\r\n     * @param id The ID of the token being transferred\r\n     * @param value The amount of tokens being transferred\r\n     * @param data Additional data with no specified format\r\n     * @return `bytes4(keccak256(\"onERC1155Received(address,address,uint256,uint256,bytes)\"))` if transfer is allowed\r\n     */\r\n    function onERC1155Received(address operator, address from, uint256 id, uint256 value, bytes calldata data) external returns (bytes4);\r\n\r\n    /**\r\n     * @param operator The address which initiated the batch transfer (i.e. msg.sender)\r\n     * @param from The address which previously owned the token\r\n     * @param ids An array containing ids of each token being transferred (order and length must match values array)\r\n     * @param values An array containing amounts of each token being transferred (order and length must match ids array)\r\n     * @param data Additional data with no specified format\r\n     * @return `bytes4(keccak256(\"onERC1155BatchReceived(address,address,uint256[],uint256[],bytes)\"))` if transfer is allowed\r\n     */\r\n    function onERC1155BatchReceived(address operator, address from, uint256[] calldata ids, uint256[] calldata values, bytes calldata data) external returns (bytes4);\r\n}\r\n\r\ninterface IERC1155 is IERC165 {\r\n    event TransferSingle(address indexed operator, address indexed from, address indexed to, uint256 id, uint256 value);\r\n    event TransferBatch(address indexed operator, address indexed from, address indexed to, uint256[] ids, uint256[] values);\r\n    event ApprovalForAll(address indexed account, address indexed operator, bool approved);\r\n    event URI(string value, uint256 indexed id);\r\n    function balanceOf(address account, uint256 id) external view returns (uint256);\r\n    function balanceOfBatch(address[] calldata accounts, uint256[] calldata ids) external view returns (uint256[] memory);\r\n    function setApprovalForAll(address operator, bool approved) external;\r\n    function isApprovedForAll(address account, address operator) external view returns (bool);\r\n    function safeTransferFrom(address from, address to, uint256 id, uint256 amount, bytes calldata data) external;\r\n    function safeBatchTransferFrom(address from, address to, uint256[] calldata ids, uint256[] calldata amounts, bytes calldata data) external;\r\n}\r\n\r\ninterface IERC1155MetadataURI is IERC1155 {\r\n    function uri(uint256 id) external view returns (string memory);\r\n}\r\n\r\ncontract ERC1155 is Context, ERC165, IERC1155, IERC1155MetadataURI {\r\n    using Address for address;\r\n    mapping(uint256 => mapping(address => uint256)) private _balances;\r\n    mapping(address => mapping(address => bool)) private _operatorApprovals;\r\n    string private _uri;\r\n    constructor(string memory uri_) {_setURI(uri_);}\r\n    function supportsInterface(bytes4 interfaceId) public view virtual override(ERC165, IERC165) returns (bool) {\r\n        return\r\n            interfaceId == type(IERC1155).interfaceId ||\r\n            interfaceId == type(IERC1155MetadataURI).interfaceId ||\r\n            super.supportsInterface(interfaceId);\r\n    }\r\n\r\n    function uri(uint256) public view virtual override returns (string memory) {\r\n        return _uri;\r\n    }\r\n\r\n    function balanceOf(address account, uint256 id) public view virtual override returns (uint256) {\r\n        require(account != address(0), \"ERC1155: balance query for the zero address\");\r\n        return _balances[id][account];\r\n    }\r\n\r\n    function balanceOfBatch(address[] memory accounts, uint256[] memory ids) public view virtual override returns (uint256[] memory) {\r\n        require(accounts.length == ids.length, \"ERC1155: accounts and ids length mismatch\");\r\n        uint256[] memory batchBalances = new uint256[](accounts.length);\r\n        for (uint256 i = 0; i < accounts.length; ++i) {batchBalances[i] = balanceOf(accounts[i], ids[i]);}\r\n        return batchBalances;\r\n    }\r\n\r\n    function setApprovalForAll(address operator, bool approved) public virtual override {\r\n        _setApprovalForAll(_msgSender(), operator, approved);\r\n    }\r\n\r\n    function isApprovedForAll(address account, address operator) public view virtual override returns (bool) {\r\n        return _operatorApprovals[account][operator];\r\n    }\r\n\r\n    function safeTransferFrom(address from, address to, uint256 id, uint256 amount, bytes memory data) public virtual override {\r\n        require(from == _msgSender() || isApprovedForAll(from, _msgSender()), \"ERC1155: caller is not owner nor approved\");\r\n        _safeTransferFrom(from, to, id, amount, data);\r\n    }\r\n\r\n    function safeBatchTransferFrom(address from, address to, uint256[] memory ids, uint256[] memory amounts, bytes memory data) public virtual override {\r\n        require(from == _msgSender() || isApprovedForAll(from, _msgSender()), \"ERC1155: transfer caller is not owner nor approved\");\r\n        _safeBatchTransferFrom(from, to, ids, amounts, data);\r\n    }\r\n\r\n    function _safeTransferFrom(address from, address to, uint256 id, uint256 amount, bytes memory data) internal virtual {\r\n        require(to != address(0), \"ERC1155: transfer to the zero address\");\r\n        address operator = _msgSender();\r\n        _beforeTokenTransfer(operator, from, to, _asSingletonArray(id), _asSingletonArray(amount), data);\r\n        uint256 fromBalance = _balances[id][from];\r\n        require(fromBalance >= amount, \"ERC1155: insufficient balance for transfer\");\r\n        unchecked {_balances[id][from] = fromBalance - amount;}\r\n        _balances[id][to] += amount;\r\n        emit TransferSingle(operator, from, to, id, amount);\r\n        _doSafeTransferAcceptanceCheck(operator, from, to, id, amount, data);\r\n    }\r\n\r\n    function _safeBatchTransferFrom(address from, address to, uint256[] memory ids, uint256[] memory amounts, bytes memory data) internal virtual {\r\n        require(ids.length == amounts.length, \"ERC1155: ids and amounts length mismatch\");\r\n        require(to != address(0), \"ERC1155: transfer to the zero address\");\r\n        address operator = _msgSender();\r\n        _beforeTokenTransfer(operator, from, to, ids, amounts, data);\r\n        for (uint256 i = 0; i < ids.length; ++i) {\r\n            uint256 id = ids[i];\r\n            uint256 amount = amounts[i];\r\n            uint256 fromBalance = _balances[id][from];\r\n            require(fromBalance >= amount, \"ERC1155: insufficient balance for transfer\");\r\n            unchecked {\r\n                _balances[id][from] = fromBalance - amount;\r\n            }\r\n            _balances[id][to] += amount;\r\n        }\r\n        emit TransferBatch(operator, from, to, ids, amounts);\r\n        _doSafeBatchTransferAcceptanceCheck(operator, from, to, ids, amounts, data);\r\n    }\r\n\r\n    function _setURI(string memory newuri) internal virtual {\r\n        _uri = newuri;\r\n    }\r\n\r\n    function _mint(address to, uint256 id, uint256 amount, bytes memory data) internal virtual {\r\n        require(to != address(0), \"ERC1155: mint to the zero address\");\r\n        address operator = _msgSender();\r\n        _beforeTokenTransfer(operator, address(0), to, _asSingletonArray(id), _asSingletonArray(amount), data);\r\n        _balances[id][to] += amount;\r\n        emit TransferSingle(operator, address(0), to, id, amount);\r\n        _doSafeTransferAcceptanceCheck(operator, address(0), to, id, amount, data);\r\n    }\r\n\r\n    function _mintBatch(address to, uint256[] memory ids, uint256[] memory amounts, bytes memory data) internal virtual {\r\n        require(to != address(0), \"ERC1155: mint to the zero address\");\r\n        require(ids.length == amounts.length, \"ERC1155: ids and amounts length mismatch\");\r\n        address operator = _msgSender();\r\n        _beforeTokenTransfer(operator, address(0), to, ids, amounts, data);\r\n        for (uint256 i = 0; i < ids.length; i++) {_balances[ids[i]][to] += amounts[i];}\r\n        emit TransferBatch(operator, address(0), to, ids, amounts);\r\n        _doSafeBatchTransferAcceptanceCheck(operator, address(0), to, ids, amounts, data);\r\n    }\r\n\r\n    function _setApprovalForAll(address owner, address operator, bool approved) internal virtual {\r\n        require(owner != operator, \"ERC1155: setting approval status for self\");\r\n        _operatorApprovals[owner][operator] = approved;\r\n        emit ApprovalForAll(owner, operator, approved);\r\n    }\r\n\r\n    function _beforeTokenTransfer(address operator, address from, address to, uint256[] memory ids, uint256[] memory amounts, bytes memory data) internal virtual {}\r\n\r\n    function _doSafeTransferAcceptanceCheck(address operator, address from, address to, uint256 id, uint256 amount, bytes memory data) private {\r\n        if (to.isContract()) {\r\n            try IERC1155Receiver(to).onERC1155Received(operator, from, id, amount, data) returns (bytes4 response) {\r\n                if (response != IERC1155Receiver.onERC1155Received.selector) {\r\n                    revert(\"ERC1155: ERC1155Receiver rejected tokens\");\r\n                }\r\n            } catch Error(string memory reason) {\r\n                revert(reason);\r\n            } catch {\r\n                revert(\"ERC1155: transfer to non ERC1155Receiver implementer\");\r\n            }\r\n        }\r\n    }\r\n\r\n    function _doSafeBatchTransferAcceptanceCheck(address operator, address from, address to, uint256[] memory ids, uint256[] memory amounts, bytes memory data) private {\r\n        if (to.isContract()) {\r\n            try IERC1155Receiver(to).onERC1155BatchReceived(operator, from, ids, amounts, data) returns (bytes4 response) {\r\n                if (response != IERC1155Receiver.onERC1155BatchReceived.selector) {\r\n                    revert(\"ERC1155: ERC1155Receiver rejected tokens\");\r\n                }\r\n            } catch Error(string memory reason) {\r\n                revert(reason);\r\n            } catch {\r\n                revert(\"ERC1155: transfer to non ERC1155Receiver implementer\");\r\n            }\r\n        }\r\n    }\r\n\r\n    function _asSingletonArray(uint256 element) private pure returns (uint256[] memory) {\r\n        uint256[] memory array = new uint256[](1);\r\n        array[0] = element;\r\n        return array;\r\n    }\r\n}\r\n\r\n// File: XChainTrade.sol\r\n// contracts/XChainTrade.sol\r\n\r\ncontract XChainTrade { \r\n    mapping(address => uint256) public checkUnspentFunds;\r\n    uint256 public NFTprice;\r\n\r\n    receive() external payable {\r\n        XChain c = XChain(0x930a9eb59E15Cd875532B26AEF73B006D4B82779);\r\n        uint256 incwei = msg.value;\r\n        uint256 price = NFTprice;\r\n        uint256 spent;\r\n        uint minted = c.totalSupply(0);\r\n        uint thedate = block.timestamp;\r\n        uint toBeMinted;\r\n        uint lockUntil = c.addressLockedUntilTimestamp(msg.sender);\r\n\r\n        require(thedate >= 1642204800, \"XChain: NFT presale not started yet!\"); // If someone try to purchase a package before 15 January 2022\r\n        require(minted < 50000, \"Sold Out: Sorry all the XChain NFTs have been sold!\"); // Maximum 5000 ID 0 NFTs will be minted\r\n        require(incwei >= price, \"XChain: Not enough funds to perform a purchase!\"); // if somoone sends less ETH than the price of a single NFT\r\n\r\n        if (incwei >= 100 ether && thedate < 1656547200) {\r\n            if (incwei >= 200 ether && minted + 400 <= 5000) {\r\n                uint packages = incwei / 200 ether; // checks how many packages of 200 can be purchased\r\n                uint maxPackages = (5000 - minted) / uint(400); // checks how many packages of 200 are available\r\n                if (maxPackages < packages) {packages = maxPackages;}\r\n                toBeMinted = packages * 400; // how many NFTs will be minted\r\n                spent = packages * 200 ether; // adds the right amount of ETH to the total spent\r\n                incwei -= spent; // removes the amount spent from the budget\r\n                lockUntil = thedate + 3888000; // Locks the account for 45 days since the current time\r\n            }\r\n            \r\n            if (incwei >= 100 ether && minted + toBeMinted + 150 <= 5000) { // else if >= than 100 ETH before 2 hours and 15 minutes from initial time\r\n                spent += 100 ether; // adds 100 ETH to the total spent\r\n                incwei -= 100 ether; // removes 100 ETH from the budget\r\n                toBeMinted += 150; // adds 150 NFTs to the amount of NFTs to be minted\r\n                if (lockUntil < thedate + 2592000) {lockUntil = thedate + 2592000;} // Locks the account for 30 days since the current time\r\n            }\r\n        }\r\n\r\n        if (incwei >= 10 ether && thedate < 1656547200) {\r\n            if (incwei >= 50 ether && minted + toBeMinted + 65 <= 5000) { // else if >= than 50 ETH before 2 hours and 15 minutes from initial time\r\n                spent += 50 ether; // adds 50 ETH to the total spent\r\n                incwei -= 50 ether; // removes 50 ETH from the budget\r\n                toBeMinted += 65; // adds 65 NFTs to the amount of NFTs to be minted\r\n                if (lockUntil < thedate + 1728000) {lockUntil = thedate + 1728000;} // Locks the account for 20 days since the current time\r\n            }\r\n            \r\n            if (minted + toBeMinted + 11 <= 5000) { // else if >= than 10 ETH before 2 hours and 15 minutes from initial time\r\n                uint packages = incwei / 10 ether; // checks how many packages of 10 can be purchased with the left budget\r\n                uint maxPackages = (5000 - (minted + toBeMinted)) / uint(11); // checks how many packages of 11 are available\r\n                if (maxPackages < packages) {packages = maxPackages;}\r\n                toBeMinted += packages * 11; // how many NFTs will be minted\r\n                spent += packages * 10 ether; // adds the right amount of ETH to the total spent\r\n                incwei -=  packages * 10 ether; // removes the amount spent from the budget\r\n                if (lockUntil < thedate + 864000) {lockUntil = thedate + 864000;} // Locks the account for 10 days since the current time\r\n            }\r\n        }\r\n        \r\n        if (thedate >= 1647302400 && minted + toBeMinted + 1 <= 5000 && incwei >= price) { // the date is after March 15, 2022 \r\n            uint canBuy = incwei / price; // checks how many NFTs can be purchased with the left budget\r\n            uint availNFTs = 5000 - (minted + toBeMinted); // checks how many packages of 11 are available\r\n            if (availNFTs < canBuy) {canBuy = availNFTs;}\r\n            toBeMinted += canBuy; // how many NFTs will be minted\r\n            spent += canBuy * price; // adds the right amount of ETH to the total spent\r\n            incwei -=  canBuy * price; // removes the amount spent from the budget\r\n        }\r\n\r\n        require(toBeMinted > 0, \"XChain: Sorry you didn't manage to purchase any NFT!\"); // if somehow someone has managed to go through the loop and come out with 0 NFTs to be minted\r\n\r\n        checkUnspentFunds[0x8b8E1624814975aD4D52BFFA7c38C05101675bB7] += spent; // XChainTech.eth gets the amount spent in its balance\r\n        checkUnspentFunds[msg.sender] += incwei; // the account that made the purchase gets the change in its balance\r\n        c.mint(msg.sender, 0, toBeMinted, lockUntil); // the NFTs are minted and the account locked until the longest date.\r\n    }\r\n\r\n    function updateNFTprice() public {\r\n        require(NFTprice != 49.56144107 ether, \"XChain: no need to update the price, it has already reached the maximum value.\");\r\n        uint thedate = block.timestamp;\r\n        uint256 price = 1 ether;\r\n        if (thedate < 1647302400) {price = 1 ether;} // if before start of sale period 15/03/2022\r\n        else if (thedate > 1695686400) {price = 49.56144107 ether;} // if after NFT price increasing period 26/09/2023\r\n        else { \r\n           for (uint i=0; i < ((thedate - 1647302400) / uint256(604800)); i++) { // given 48384000 epoch difference from start to end, and / by 80 weeks = 604800\r\n                price = price + ((price * 5) / 100); // price increase by 5 percent per week\r\n            } \r\n        }\r\n        NFTprice = price;\r\n    }\r\n\r\n    function withdrawLostFunds(address lostAddr) public {\r\n        require(msg.sender == 0x8b8E1624814975aD4D52BFFA7c38C05101675bB7, \"XChain: funds recovery can only be done by the foundation\");\r\n        if (lostAddr == 0x0000000000000000000000000000000000000000) {\r\n            payable(0x8b8E1624814975aD4D52BFFA7c38C05101675bB7).transfer(address(this).balance);\r\n        } else {\r\n            require(checkUnspentFunds[lostAddr] > 0, \"XChain: Account has no balance.\");\r\n            uint256 amount = checkUnspentFunds[lostAddr]; checkUnspentFunds[lostAddr] = 0;\r\n            payable(0x8b8E1624814975aD4D52BFFA7c38C05101675bB7).transfer(amount);\r\n        }\r\n    }\r\n\r\n    function collectUnspentFunds() public { \r\n        require(checkUnspentFunds[msg.sender] > 0, \"XChain: Your account has no change to withdraw.\");\r\n        uint256 amount = checkUnspentFunds[msg.sender]; checkUnspentFunds[msg.sender] = 0;\r\n        payable(msg.sender).transfer(amount);\r\n    }\r\n}    \r\n\r\ncontract XChain {\r\n    mapping (address => uint) public addressLockedUntilTimestamp;\r\n    function mint(address to, uint256 id, uint256 amount, uint lockedUntilTimestamp) public virtual {}\r\n    function totalSupply(uint256 id) public view virtual returns (uint256) {}\r\n}","ABI":"[{\"inputs\":[],\"name\":\"NFTprice\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"checkUnspentFunds\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"collectUnspentFunds\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"updateNFTprice\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"lostAddr\",\"type\":\"address\"}],\"name\":\"withdrawLostFunds\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"stateMutability\":\"payable\",\"type\":\"receive\"}]","ContractName":"XChainTrade","CompilerVersion":"v0.8.7+commit.e28d00a7","OptimizationUsed":"1","Runs":"200","ConstructorArguments":"","EVMVersion":"Default","Library":"","LicenseType":"GNU GPLv3","Proxy":"0","Implementation":"","SwarmSource":"ipfs://8655bf97d399c1d95fba1b4db00c4af77576c87f62540e0be317af025b4557f5"}]}