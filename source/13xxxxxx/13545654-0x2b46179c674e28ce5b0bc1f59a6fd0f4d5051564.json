{"status":"1","message":"OK","result":[{"SourceCode":"{{\r\n  \"language\": \"Solidity\",\r\n  \"sources\": {\r\n    \"/contracts/Account.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: UNLICENSED\\npragma solidity ^0.8.9;\\n\\nimport './Governed.sol';\\nimport './Bank.sol';\\nimport './Market.sol';\\n\\n/**\\n * @title Helper to check the combined balance and do a combined withdrawal from several contracts\\n */\\ncontract Account is Governed {\\n\\n    // Bank contract\\n    Bank public bank;\\n\\n    // Market contract\\n    Market public market;\\n\\n    /**\\n     * @param governanceAddress Address of the Governance contract\\n     *\\n     * Requirements:\\n     * - Governance contract must be deployed at the given address\\n     */\\n    constructor(address governanceAddress) Governed(governanceAddress) {}\\n\\n    /**\\n     * @dev Sets the Bank contract address\\n     * @param bankAddress Address of the Bank contract\\n     *\\n     * Requirements:\\n     * - the caller must have the bootstrap permission\\n     */\\n    function setBankAddress(address bankAddress) external canBootstrap(msg.sender) {\\n        bank = Bank(bankAddress);\\n    }\\n\\n    /**\\n     * @dev Sets the Market contract address\\n     * @param marketAddress Address of the Market contract\\n     *\\n     * Requirements:\\n     * - the caller must have the bootstrap permission\\n     */\\n    function setMarketAddress(address marketAddress) external canBootstrap(msg.sender) {\\n        market = Market(marketAddress);\\n    }\\n\\n    /**\\n     * @dev Returns combined balance from bank and market contracts\\n     * @return uint\\n     */\\n    function getCombinedBalance() external view returns (uint) {\\n        return bank.getBalance(msg.sender) + market.payments(msg.sender);\\n    }\\n\\n    /**\\n     * Withdraws the combined balance of bank and market contracts\\n     */\\n    function combinedWithdraw() external {\\n        bank.withdraw(payable(msg.sender));\\n        market.withdrawPayments(payable(msg.sender));\\n    }\\n}\\n\"\r\n    },\r\n    \"/contracts/Reaper.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: UNLICENSED\\npragma solidity ^0.8.9;\\n\\nimport './Governed.sol';\\nimport './Bank.sol';\\n\\n/**\\n * @title Contract tracking deaths of Macabris tokens\\n */\\ncontract Reaper is Governed {\\n\\n    // Bank contract\\n    Bank public bank;\\n\\n    // Mapping from token ID to time of death\\n    mapping (uint256 => int64) private _deaths;\\n\\n    /**\\n     * @dev Emitted when a token is marked as dead\\n     * @param tokenId Token ID\\n     * @param timeOfDeath Time of death (unix timestamp)\\n     */\\n    event Death(uint256 indexed tokenId, int64 timeOfDeath);\\n\\n    /**\\n     * @dev Emitted when a previosly dead token is marked as alive\\n     * @param tokenId Token ID\\n     */\\n    event Resurrection(uint256 indexed tokenId);\\n\\n    /**\\n     * @param governanceAddress Address of the Governance contract\\n     *\\n     * Requirements:\\n     * - Governance contract must be deployed at the given address\\n     */\\n    constructor(address governanceAddress) Governed(governanceAddress) {}\\n\\n    /**\\n     * @dev Sets Bank contract address\\n     * @param bankAddress Address of Bank contract\\n     *\\n     * Requirements:\\n     * - the caller must have the boostrap permission\\n     * - Bank contract must be deployed at the given address\\n     */\\n    function setBankAddress(address bankAddress) external canBootstrap(msg.sender) {\\n        bank = Bank(bankAddress);\\n    }\\n\\n    /**\\n     * @dev Marks token as dead and sets time of death\\n     * @param tokenId Token ID\\n     * @param timeOfDeath Tome of death (unix timestamp)\\n     *\\n     * Requirements:\\n     * - the caller must have permission to manage deaths\\n     * - `timeOfDeath` can't be 0\\n     *\\n     * Note that tokenId doesn't have to be minted in order to be marked dead.\\n     *\\n     * Emits {Death} event\\n     */\\n    function markDead(uint256 tokenId, int64 timeOfDeath) external canManageDeaths(msg.sender) {\\n        require(timeOfDeath != 0, \\\"Time of death of 0 represents an alive token\\\");\\n        _deaths[tokenId] = timeOfDeath;\\n\\n        bank.onTokenDeath(tokenId);\\n        emit Death(tokenId, timeOfDeath);\\n    }\\n\\n    /**\\n     * @dev Marks token as alive\\n     * @param tokenId Token ID\\n     *\\n     * Requirements:\\n     * - the caller must have permission to manage deaths\\n     * - `tokenId` must be currently marked as dead\\n     *\\n     * Emits {Resurrection} event\\n     */\\n    function markAlive(uint256 tokenId) external canManageDeaths(msg.sender) {\\n        require(_deaths[tokenId] != 0, \\\"Token is not dead\\\");\\n        _deaths[tokenId] = 0;\\n\\n        bank.onTokenResurrection(tokenId);\\n        emit Resurrection(tokenId);\\n    }\\n\\n    /**\\n     * @dev Returns token's time of death\\n     * @param tokenId Token ID\\n     * @return Time of death (unix timestamp) or zero, if alive\\n     *\\n     * Note that any tokenId could be marked as dead, even not minted or not existant one.\\n     */\\n    function getTimeOfDeath(uint256 tokenId) external view returns (int64) {\\n        return _deaths[tokenId];\\n    }\\n}\\n\"\r\n    },\r\n    \"/contracts/OwnerBalanceContributor.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: UNLICENSED\\npragma solidity ^0.8.9;\\n\\nimport './OwnerBalance.sol';\\n\\n/**\\n * @title Allows allocating portion of the contract's funds to the owner balance\\n */\\nabstract contract OwnerBalanceContributor {\\n\\n    // OwnerBalance contract address\\n    address public immutable ownerBalanceAddress;\\n\\n    uint public ownerBalanceDeposits;\\n\\n    /**\\n     * @param _ownerBalanceAddress Address of the OwnerBalance contract\\n     */\\n    constructor (address _ownerBalanceAddress) {\\n        ownerBalanceAddress = _ownerBalanceAddress;\\n    }\\n\\n    /**\\n     * @dev Assigns given amount of contract funds to the owner's balance\\n     * @param amount Amount in wei\\n     */\\n    function _transferToOwnerBalance(uint amount) internal {\\n        ownerBalanceDeposits += amount;\\n    }\\n\\n    /**\\n     * @dev Allows OwnerBalance contract to withdraw deposits\\n     * @param ownerAddress Owner address to send funds to\\n     *\\n     * Requirements:\\n     * - caller must be the OwnerBalance contract\\n     */\\n    function withdrawOwnerBalanceDeposits(address ownerAddress) external {\\n        require(msg.sender == ownerBalanceAddress, 'Caller must be the OwnerBalance contract');\\n        uint currentBalance = ownerBalanceDeposits;\\n        ownerBalanceDeposits = 0;\\n        payable(ownerAddress).transfer(currentBalance);\\n    }\\n}\\n\"\r\n    },\r\n    \"/contracts/OwnerBalance.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: UNLICENSED\\npragma solidity ^0.8.9;\\n\\nimport './Governed.sol';\\nimport './OwnerBalanceContributor.sol';\\n\\n/**\\n * @title Tracks owner's share of the funds in various Macabris contracts\\n */\\ncontract OwnerBalance is Governed {\\n\\n    address public owner;\\n\\n    // All three contracts, that contribute to the owner's balance\\n    OwnerBalanceContributor public release;\\n    OwnerBalanceContributor public bank;\\n    OwnerBalanceContributor public market;\\n\\n    /**\\n     * @param governanceAddress Address of the Governance contract\\n     *\\n     * Requirements:\\n     * - Governance contract must be deployed at the given address\\n     */\\n    constructor(address governanceAddress) Governed(governanceAddress) {}\\n\\n    /**\\n     * @dev Sets the release contract address\\n     * @param releaseAddress Address of the Release contract\\n     *\\n     * Requirements:\\n     * - the caller must have the bootstrap permission\\n     */\\n    function setReleaseAddress(address releaseAddress) external canBootstrap(msg.sender) {\\n        release = OwnerBalanceContributor(releaseAddress);\\n    }\\n\\n    /**\\n     * @dev Sets Bank contract address\\n     * @param bankAddress Address of the Bank contract\\n     *\\n     * Requirements:\\n     * - the caller must have the bootstrap permission\\n     */\\n    function setBankAddress(address bankAddress) external canBootstrap(msg.sender) {\\n        bank = OwnerBalanceContributor(bankAddress);\\n    }\\n\\n    /**\\n     * @dev Sets the market contract address\\n     * @param marketAddress Address of the Market contract\\n     *\\n     * Requirements:\\n     * - the caller must have the bootstrap permission\\n     */\\n    function setMarketAddress(address marketAddress) external canBootstrap(msg.sender) {\\n        market = OwnerBalanceContributor(marketAddress);\\n    }\\n\\n    /**\\n     * @dev Sets owner address where the funds will be sent during withdrawal\\n     * @param _owner Owner's address\\n     *\\n     * Requirements:\\n     * - sender must have canSetOwnerAddress permission\\n     * - address must not be 0\\n     */\\n    function setOwner(address _owner) external canSetOwnerAddress(msg.sender) {\\n        require(_owner != address(0), \\\"Empty owner address is not allowed!\\\");\\n        owner = _owner;\\n    }\\n\\n    /**\\n     * @dev Returns total available balance in all contributing contracts\\n     * @return Balance in wei\\n     */\\n    function getBalance() external view returns (uint) {\\n        uint balance;\\n\\n        balance += release.ownerBalanceDeposits();\\n        balance += bank.ownerBalanceDeposits();\\n        balance += market.ownerBalanceDeposits();\\n\\n        return balance;\\n    }\\n\\n    /**\\n     * @dev Withdraws available balance to the owner address\\n     *\\n     * Requirements:\\n     * - owner address must be set\\n     * - sender must have canTriggerOwnerWithdraw permission\\n     */\\n    function withdraw() external canTriggerOwnerWithdraw(msg.sender) {\\n        require(owner != address(0), \\\"Owner address is not set\\\");\\n\\n        release.withdrawOwnerBalanceDeposits(owner);\\n        bank.withdrawOwnerBalanceDeposits(owner);\\n        market.withdrawOwnerBalanceDeposits(owner);\\n    }\\n}\\n\"\r\n    },\r\n    \"/contracts/Market.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: UNLICENSED\\npragma solidity ^0.8.9;\\n\\nimport '@openzeppelin/contracts/security/PullPayment.sol';\\nimport './Governed.sol';\\nimport './OwnerBalanceContributor.sol';\\nimport './Macabris.sol';\\nimport './Bank.sol';\\n\\n/**\\n * @title Macabris market contract, tracks bids and asking prices\\n */\\ncontract Market is Governed, OwnerBalanceContributor, PullPayment {\\n\\n    // Macabris NFT contract\\n    Macabris public macabris;\\n\\n    // Bank contract\\n    Bank public bank;\\n\\n    // Mapping from token IDs to asking prices\\n    mapping(uint256 => uint) private asks;\\n\\n    // Mapping of bidder addresses to bid amounts indexed by token IDs\\n    mapping(address => mapping(uint256 => uint)) private bids;\\n\\n    // Mappings of prev/next bidder address in line for each token ID\\n    // Next bid is the smaller one, prev bid is the bigger one\\n    mapping(uint256 => mapping(address => address)) private nextBidders;\\n    mapping(uint256 => mapping(address => address)) private prevBidders;\\n\\n    // Mapping of token IDs to the highest bidder address\\n    mapping(uint256 => address) private highestBidders;\\n\\n    // Owner and bank fees for market operations in bps\\n    uint16 public ownerFee;\\n    uint16 public bankFee;\\n\\n    /**\\n     * @dev Emitted when a bid is placed on a token\\n     * @param tokenId Token ID\\n     * @param bidder Bidder address\\n     * @param amount Bid amount in wei\\n     */\\n    event Bid(uint256 indexed tokenId, address indexed bidder, uint amount);\\n\\n    /**\\n     * @dev Emitted when a bid is canceled\\n     * @param tokenId Token ID\\n     * @param bidder Bidder address\\n     * @param amount Canceled bid amount in wei\\n     */\\n    event BidCancellation(uint256 indexed tokenId, address indexed bidder, uint amount);\\n\\n    /**\\n     * @dev Emitted when an asking price is set\\n     * @param tokenId Token ID\\n     * @param seller Token owner address\\n     * @param price Price in wei\\n     */\\n    event Ask(uint256 indexed tokenId, address indexed seller, uint price);\\n\\n    /**\\n     * @dev Emitted when the asking price is reset marking the token as no longer for sale\\n     * @param tokenId Token ID\\n     * @param seller Token owner address\\n     * @param price Canceled asking price in wei\\n     */\\n    event AskCancellation(uint256 indexed tokenId, address indexed seller, uint price);\\n\\n    /**\\n     * @dev Emitted when a token is sold via `sellForHighestBid` or `buyForAskingPrice` methods\\n     * @param tokenId Token ID\\n     * @param seller Seller address\\n     * @param buyer Buyer addres\\n     * @param price Price in wei\\n     */\\n    event Sale(uint256 indexed tokenId, address indexed seller, address indexed buyer, uint price);\\n\\n    /**\\n     * @param governanceAddress Address of the Governance contract\\n     * @param ownerBalanceAddress Address of the OwnerBalance contract\\n     *\\n     * Requirements:\\n     * - Governance contract must be deployed at the given address\\n     * - OwnerBalance contract must be deployed at the given address\\n     */\\n    constructor(\\n        address governanceAddress,\\n        address ownerBalanceAddress\\n    ) Governed(governanceAddress) OwnerBalanceContributor(ownerBalanceAddress) {}\\n\\n    /**\\n     * @dev Sets Macabris NFT contract address\\n     * @param macabrisAddress Address of Macabris NFT contract\\n     *\\n     * Requirements:\\n     * - the caller must have the boostrap permission\\n     * - Macabris contract must be deployed at the given address\\n     */\\n    function setMacabrisAddress(address macabrisAddress) external canBootstrap(msg.sender) {\\n        macabris = Macabris(macabrisAddress);\\n    }\\n\\n    /**\\n     * @dev Sets Bank contract address\\n     * @param bankAddress Address of Macabris NFT contract\\n     *\\n     * Requirements:\\n     * - the caller must have the bootstrap permission\\n     * - Bank contract must be deployed at the given address\\n     */\\n    function setBankAddress(address bankAddress) external canBootstrap(msg.sender) {\\n        bank = Bank(bankAddress);\\n    }\\n\\n    /**\\n     * @dev Sets owner's fee on market operations\\n     * @param _ownerFee Fee in bps\\n     *\\n     * Requirements:\\n     * - The caller must have canConfigure permission\\n     * - Owner fee should divide 10000 without a remainder\\n     * - Owner and bank fees should not add up to more than 10000 bps (100%)\\n     */\\n    function setOwnerFee(uint16 _ownerFee) external canConfigure(msg.sender) {\\n        require(_ownerFee + bankFee < 10000, \\\"The sum of owner and bank fees should be less than 10000 bps\\\");\\n\\n        if (_ownerFee > 0) {\\n            require(10000 % _ownerFee == 0, \\\"Owner fee amount must divide 10000 without a remainder\\\");\\n        }\\n\\n        ownerFee = _ownerFee;\\n    }\\n\\n    /**\\n     * @dev Sets bank's fee on market operations, that goes to the payouts pool\\n     * @param _bankFee Fee in bps\\n     *\\n     * Requirements:\\n     * - The caller must have canConfigure permission\\n     * - Bank fee should divide 10000 without a remainder\\n     * - Owner and bank fees should not add up to more than 10000 bps (100%)\\n     */\\n    function setBankFee(uint16 _bankFee) external canConfigure(msg.sender) {\\n        require(ownerFee + _bankFee < 10000, \\\"The sum of owner and bank fees should be less than 10000 bps\\\");\\n\\n        if (_bankFee > 0) {\\n            require(10000 % _bankFee == 0, \\\"Bank fee amount must divide 10000 without a remainder\\\");\\n        }\\n\\n        bankFee = _bankFee;\\n    }\\n\\n    /**\\n     * @dev Creates a new bid for a token\\n     * @param tokenId Token ID\\n     *\\n     * Requirements:\\n     * - `tokenId` must exist\\n     * - Bid amount (`msg.value`) must be bigger than 0\\n     * - Bid amount (`msg.value`) must be bigger than the current highest bid\\n     * - Bid amount (`msg.value`) must be lower than the current asking price\\n     * - Sender must not be the token owner\\n     * - Sender must not have an active bid for the token (use `cancelBid` before bidding again)\\n     *\\n     * Emits {Bid} event\\n     */\\n    function bid(uint256 tokenId) external payable {\\n        require(msg.value > 0, \\\"Bid amount invalid\\\");\\n        require(macabris.exists(tokenId), \\\"Token does not exist\\\");\\n        require(macabris.ownerOf(tokenId) != msg.sender, \\\"Can't bid on owned tokens\\\");\\n        require(bids[msg.sender][tokenId] == 0, \\\"Bid already exists, cancel it before bidding again\\\");\\n        (, uint highestBidAmount) = getHighestBid(tokenId);\\n        require(msg.value > highestBidAmount, \\\"Bid must be larger than the current highest bid\\\");\\n        uint askingPrice = getAskingPrice(tokenId);\\n        require(askingPrice == 0 || msg.value < askingPrice, \\\"Bid must be smaller then the asking price\\\");\\n\\n        bids[msg.sender][tokenId] = msg.value;\\n        nextBidders[tokenId][msg.sender] = highestBidders[tokenId];\\n        prevBidders[tokenId][highestBidders[tokenId]] = msg.sender;\\n        highestBidders[tokenId] = msg.sender;\\n\\n        emit Bid(tokenId, msg.sender, msg.value);\\n    }\\n\\n    /**\\n     * @dev Cancels sender's currently active bid for the given token and returns the Ether\\n     * @param tokenId Token ID\\n     *\\n     * Requirements:\\n     * - `tokenId` must exist\\n     * - Sender must have an active bid for the token\\n     *\\n     * Emits {BidCancellation} event\\n     */\\n    function cancelBid(uint256 tokenId) public {\\n        require(macabris.exists(tokenId), \\\"Token does not exist\\\");\\n        require(bids[msg.sender][tokenId] > 0, \\\"Bid does not exist\\\");\\n\\n        uint amount = bids[msg.sender][tokenId];\\n        _removeBid(tokenId, msg.sender);\\n        _asyncTransfer(msg.sender, amount);\\n\\n        emit BidCancellation(tokenId, msg.sender, amount);\\n    }\\n\\n    /**\\n     * @dev Removes bid and does required houskeeping to maintain the bid queue\\n     * @param tokenId Token ID\\n     * @param bidder Bidder address\\n     */\\n    function _removeBid(uint256 tokenId, address bidder) private {\\n        address prevBidder = prevBidders[tokenId][bidder];\\n        address nextBidder = nextBidders[tokenId][bidder];\\n\\n        // If this bid was the highest one, the next one will become the highest\\n        if (prevBidder == address(0)) {\\n            highestBidders[tokenId] = nextBidder;\\n        }\\n\\n        // If there are bigger bids than this, remove the link to this one as the next bid\\n        if (prevBidder != address(0)) {\\n            nextBidders[tokenId][prevBidder] = nextBidder;\\n        }\\n\\n        // If there are smaller bids than this, remove the link to this one as the prev bid\\n        if (nextBidder != address(0)) {\\n            prevBidders[tokenId][nextBidder] = prevBidder;\\n        }\\n\\n        delete bids[bidder][tokenId];\\n    }\\n\\n    /**\\n     * @dev Sets the asking price for the token (enabling instant buy ability)\\n     * @param tokenId Token ID\\n     * @param amount Asking price in wei\\n     *\\n     * Requirements:\\n     * - `tokenId` must exist\\n     * - Sender must be the owner of the token\\n     * - `amount` must be bigger than 0\\n     * - `amount` must be bigger than the highest bid\\n     *\\n     * Emits {Ask} event\\n     */\\n    function ask(uint256 tokenId, uint amount) external {\\n        // Also checks if the token exists\\n        require(macabris.ownerOf(tokenId) == msg.sender, \\\"Token does not belong to the sender\\\");\\n        require(amount > 0, \\\"Ask amount invalid\\\");\\n        (, uint highestBidAmount) = getHighestBid(tokenId);\\n        require(amount > highestBidAmount, \\\"Ask amount must be larger than the highest bid\\\");\\n\\n        asks[tokenId] = amount;\\n\\n        emit Ask(tokenId, msg.sender, amount);\\n    }\\n\\n    /**\\n     * @dev Removes asking price for the token (disabling instant buy ability)\\n     * @param tokenId Token ID\\n     *\\n     * Requirements:\\n     * - `tokenId` must exist\\n     * - Sender must be the owner of the token\\n     *\\n     * Emits {AskCancellation} event\\n     */\\n    function cancelAsk(uint256 tokenId) external {\\n        // Also checks if the token exists\\n        require(macabris.ownerOf(tokenId) == msg.sender, \\\"Token does not belong to the sender\\\");\\n\\n        uint askingPrice = asks[tokenId];\\n        delete asks[tokenId];\\n\\n        emit AskCancellation(tokenId, msg.sender, askingPrice);\\n    }\\n\\n    /**\\n     * @dev Sells token to the highest bidder\\n     * @param tokenId Token ID\\n     * @param amount Expected highest bid amount, fails if the actual bid amount does not match it\\n     *\\n     * Requirements:\\n     * - `tokenId` must exist\\n     * - Sender must be the owner of the token\\n     * - There must be at least a single bid for the token\\n     *\\n     * Emits {Sale} event\\n     */\\n    function sellForHighestBid(uint256 tokenId, uint amount) external {\\n        // Also checks if the token exists\\n        require(macabris.ownerOf(tokenId) == msg.sender, \\\"Token does not belong to the sender\\\");\\n        (address highestBidAddress, uint highestBidAmount) = getHighestBid(tokenId);\\n        require(highestBidAmount > 0, \\\"There are no bids for the token\\\");\\n        require(amount == highestBidAmount, \\\"Highest bid amount does not match given amount value\\\");\\n\\n        delete asks[tokenId];\\n        _removeBid(tokenId, highestBidAddress);\\n\\n        _onSale(tokenId, msg.sender, highestBidAddress, highestBidAmount);\\n    }\\n\\n    /**\\n     * @dev Buys token for the asking price\\n     * @param tokenId Token ID\\n     *\\n     * Requirements:\\n     * - `tokenId` must exist\\n     * - Sender must not be the owner of the token\\n     * - Asking price must be set for the token\\n     * - `msg.value` must match the asking price\\n     *\\n     * Emits {Sale} event\\n     */\\n    function buyForAskingPrice(uint256 tokenId) external payable {\\n        // Implicitly checks if the token exists\\n        address seller = macabris.ownerOf(tokenId);\\n        require(msg.sender != seller, \\\"Can't buy owned tokens\\\");\\n        uint askingPrice = getAskingPrice(tokenId);\\n        require(askingPrice > 0, \\\"Token is not for sale\\\");\\n        require(msg.value == askingPrice, \\\"Transaction value does not match the asking price\\\");\\n\\n        delete asks[tokenId];\\n\\n        // Cancel any bid to prevent a situation where an owner has a bid on own token\\n        if (getBidAmount(tokenId, msg.sender) > 0) {\\n            cancelBid(tokenId);\\n        }\\n\\n        _onSale(tokenId, seller, msg.sender, askingPrice);\\n    }\\n\\n    /**\\n     * @dev Notifes Macabris about the sale, transfers money to the seller and emits a Sale event\\n     * @param tokenId Token ID\\n     * @param seller Seller address\\n     * @param buyer Buyer address\\n     * @param price Sale price\\n     *\\n     * Emits {Sale} event\\n     */\\n    function _onSale(uint256 tokenId, address seller, address buyer, uint price) private {\\n\\n        uint ownerFeeAmount = _calculateFeeAmount(price, ownerFee);\\n        uint bankFeeAmount = _calculateFeeAmount(price, bankFee);\\n        uint priceAfterFees = price - ownerFeeAmount - bankFeeAmount;\\n\\n        macabris.onMarketSale(tokenId, seller, buyer);\\n        bank.deposit{value: bankFeeAmount}();\\n        _transferToOwnerBalance(ownerFeeAmount);\\n        _asyncTransfer(seller, priceAfterFees);\\n\\n        emit Sale(tokenId, seller, buyer, price);\\n    }\\n\\n    /**\\n     * @dev Calculates fee amount based on given price and fee in bps\\n     * @param price Price base for calculation\\n     * @param fee Fee in basis points\\n     * @return Fee amount in wei\\n     */\\n    function _calculateFeeAmount(uint price, uint fee) private pure returns (uint) {\\n\\n        // Fee might be zero, avoiding division by zero\\n        if (fee == 0) {\\n            return 0;\\n        }\\n\\n        // Only using division to make sure there is no overflow of the return value.\\n        // This is the reason why fee must divide 10000 without a remainder, otherwise\\n        // because of integer division fee won't be accurate.\\n        return price / (10000 / fee);\\n    }\\n\\n    /**\\n     * @dev Returns current asking price for which the token can be bought immediately\\n     * @param tokenId Token ID\\n     * @return Amount in wei, 0 if the token is currently not for sale\\n     */\\n    function getAskingPrice(uint256 tokenId) public view returns (uint) {\\n        return asks[tokenId];\\n    }\\n\\n    /**\\n     * @dev Returns the highest bidder address and the bid amount for the given token\\n     * @param tokenId Token ID\\n     * @return Highest bidder address, 0 if not bid exists\\n     * @return Amount in wei, 0 if no bid exists\\n     */\\n    function getHighestBid(uint256 tokenId) public view returns (address, uint) {\\n        address highestBidder = highestBidders[tokenId];\\n        return (highestBidder, bids[highestBidder][tokenId]);\\n    }\\n\\n    /**\\n     * @dev Returns bid amount for the given token and bidder address\\n     * @param tokenId Token ID\\n     * @param bidder Bidder address\\n     * @return Amount in wei, 0 if no bid exists\\n     *\\n     * Requirements:\\n     * - `tokenId` must exist\\n     */\\n    function getBidAmount(uint256 tokenId, address bidder) public view returns (uint) {\\n        require(macabris.exists(tokenId), \\\"Token does not exist\\\");\\n\\n        return bids[bidder][tokenId];\\n    }\\n}\\n\"\r\n    },\r\n    \"/contracts/Macabris.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: UNLICENSED\\npragma solidity ^0.8.9;\\n\\nimport '@openzeppelin/contracts/token/ERC721/ERC721.sol';\\nimport './Governed.sol';\\nimport './Bank.sol';\\n\\ncontract Macabris is ERC721, Governed {\\n\\n    // Release contract address, used to whitelist calls to `onRelease` method\\n    address public releaseAddress;\\n\\n    // Market contract address, used to whitelist calls to `onMarketSale` method\\n    address public marketAddress;\\n\\n    // Bank contract\\n    Bank public bank;\\n\\n    // Base URI of the token's metadata\\n    string public baseUri;\\n\\n    // Personas sha256 hash (all UTF-8 names with a \\\"\\\\n\\\" char after each name, sorted by token ID)\\n    bytes32 public immutable hash;\\n\\n    /**\\n     * @param _hash Personas sha256 hash (all UTF-8 names with a \\\"\\\\n\\\" char after each name, sorted by token ID)\\n     * @param governanceAddress Address of the Governance contract\\n     *\\n     * Requirements:\\n     * - Governance contract must be deployed at the given address\\n     */\\n    constructor(\\n        bytes32 _hash,\\n        address governanceAddress\\n    ) ERC721('Macabris', 'MCBR') Governed(governanceAddress) {\\n        hash = _hash;\\n    }\\n\\n    /**\\n     * @dev Sets the release contract address\\n     * @param _releaseAddress Address of the Release contract\\n     *\\n     * Requirements:\\n     * - the caller must have the bootstrap permission\\n     */\\n    function setReleaseAddress(address _releaseAddress) external canBootstrap(msg.sender) {\\n        releaseAddress = _releaseAddress;\\n    }\\n\\n    /**\\n     * @dev Sets the market contract address\\n     * @param _marketAddress Address of the Market contract\\n     *\\n     * Requirements:\\n     * - the caller must have the bootstrap permission\\n     */\\n    function setMarketAddress(address _marketAddress) external canBootstrap(msg.sender) {\\n        marketAddress = _marketAddress;\\n    }\\n\\n    /**\\n     * @dev Sets Bank contract address\\n     * @param bankAddress Address of the Bank contract\\n     *\\n     * Requirements:\\n     * - the caller must have the bootstrap permission\\n     * - Bank contract must be deployed at the given address\\n     */\\n    function setBankAddress(address bankAddress) external canBootstrap(msg.sender) {\\n        bank = Bank(bankAddress);\\n    }\\n\\n    /**\\n     * @dev Sets metadata base URI\\n     * @param _baseUri Base URI, token's ID will be appended at the end\\n     */\\n    function setBaseUri(string memory _baseUri) external canConfigure(msg.sender) {\\n        baseUri = _baseUri;\\n    }\\n\\n    /**\\n     * @dev Checks if the token exists\\n     * @param tokenId Token ID\\n     * @return True if token with given ID has been minted already, false otherwise\\n     */\\n    function exists(uint256 tokenId) external view returns (bool) {\\n        return _exists(tokenId);\\n    }\\n\\n    /**\\n     * @dev Overwrites to return base URI set by the contract owner\\n     */\\n    function _baseURI() override internal view returns (string memory) {\\n        return baseUri;\\n    }\\n\\n    function _transfer(address from, address to, uint256 tokenId) override internal {\\n        super._transfer(from, to, tokenId);\\n        bank.onTokenTransfer(tokenId, from, to);\\n    }\\n\\n    function _mint(address to, uint256 tokenId) override internal {\\n        super._mint(to, tokenId);\\n        bank.onTokenTransfer(tokenId, address(0), to);\\n    }\\n\\n    /**\\n     * @dev Registers new token after it's sold and revealed in the Release contract\\n     * @param tokenId Token ID\\n     * @param buyer Buyer address\\n     *\\n     * Requirements:\\n     * - The caller must be the Release contract\\n     * - `tokenId` must not exist\\n     * - Buyer cannot be the zero address\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function onRelease(uint256 tokenId, address buyer) external {\\n        require(msg.sender == releaseAddress, \\\"Caller must be the Release contract\\\");\\n\\n        // Also checks that the token does not exist and that the buyer is not 0 address.\\n        // Using unsafe mint to prevent a situation where a sale could not be revealed in the\\n        // realease contract, because the buyer address does not implement IERC721Receiver.\\n        _mint(buyer, tokenId);\\n    }\\n\\n    /**\\n     * @dev Transfers token ownership after a sale on the Market contract\\n     * @param tokenId Token ID\\n     * @param seller Seller address\\n     * @param buyer Buyer address\\n     *\\n     * Requirements:\\n     * - The caller must be the Market contract\\n     * - `tokenId` must exist\\n     * - `seller` must be the owner of the token\\n     * - `buyer` cannot be the zero address\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function onMarketSale(uint256 tokenId, address seller, address buyer) external {\\n        require(msg.sender == marketAddress, \\\"Caller must be the Market contract\\\");\\n\\n        // Also checks if the token exists, if the seller is the current owner and that the buyer is\\n        // not 0 address.\\n        // Using unsafe transfer to prevent a situation where the token owner can't accept the\\n        // highest bid, because the bidder address does not implement IERC721Receiver.\\n        _transfer(seller, buyer, tokenId);\\n    }\\n}\\n\"\r\n    },\r\n    \"/contracts/Governed.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: UNLICENSED\\npragma solidity ^0.8.9;\\n\\nimport './Governance.sol';\\n\\n/**\\n * @title Provides permission check modifiers for child contracts\\n */\\nabstract contract Governed {\\n\\n    // Governance contract\\n    Governance public immutable governance;\\n\\n    /**\\n     * @param governanceAddress Address of the Governance contract\\n     *\\n     * Requirements:\\n     * - Governance contract must be deployed at the given address\\n     */\\n    constructor (address governanceAddress) {\\n        governance = Governance(governanceAddress);\\n    }\\n\\n    /**\\n     * @dev Throws if given address that doesn't have ManagesDeaths permission\\n     * @param subject Address to check permissions for, usually msg.sender\\n     */\\n    modifier canManageDeaths(address subject) {\\n        require(\\n            governance.hasPermission(subject, Governance.Actions.ManageDeaths),\\n            \\\"Governance: subject is not allowed to manage deaths\\\"\\n        );\\n        _;\\n    }\\n\\n    /**\\n     * @dev Throws if given address that doesn't have Configure permission\\n     * @param subject Address to check permissions for, usually msg.sender\\n     */\\n    modifier canConfigure(address subject) {\\n        require(\\n            governance.hasPermission(subject, Governance.Actions.Configure),\\n            \\\"Governance: subject is not allowed to configure contracts\\\"\\n        );\\n        _;\\n    }\\n\\n    /**\\n     * @dev Throws if given address that doesn't have Bootstrap permission\\n     * @param subject Address to check permissions for, usually msg.sender\\n     */\\n    modifier canBootstrap(address subject) {\\n        require(\\n            governance.hasPermission(subject, Governance.Actions.Bootstrap),\\n            \\\"Governance: subject is not allowed to bootstrap\\\"\\n        );\\n        _;\\n    }\\n\\n    /**\\n     * @dev Throws if given address that doesn't have SetOwnerAddress permission\\n     * @param subject Address to check permissions for, usually msg.sender\\n     */\\n    modifier canSetOwnerAddress(address subject) {\\n        require(\\n            governance.hasPermission(subject, Governance.Actions.SetOwnerAddress),\\n            \\\"Governance: subject is not allowed to set owner address\\\"\\n        );\\n        _;\\n    }\\n\\n    /**\\n     * @dev Throws if given address that doesn't have TriggerOwnerWithdraw permission\\n     * @param subject Address to check permissions for, usually msg.sender\\n     */\\n    modifier canTriggerOwnerWithdraw(address subject) {\\n        require(\\n            governance.hasPermission(subject, Governance.Actions.TriggerOwnerWithdraw),\\n            \\\"Governance: subject is not allowed to trigger owner withdraw\\\"\\n        );\\n        _;\\n    }\\n\\n    /**\\n     * @dev Throws if given address that doesn't have StopPayouyts permission\\n     * @param subject Address to check permissions for, usually msg.sender\\n     */\\n    modifier canStopPayouts(address subject) {\\n        require(\\n            governance.hasPermission(subject, Governance.Actions.StopPayouts),\\n            \\\"Governance: subject is not allowed to stop payouts\\\"\\n        );\\n        _;\\n    }\\n}\\n\"\r\n    },\r\n    \"/contracts/Governance.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: UNLICENSED\\npragma solidity ^0.8.9;\\n\\n/**\\n * @title Manages address permissions to act on Macabris contracts\\n */\\ncontract Governance {\\n\\n    enum Actions { Vote, Configure, SetOwnerAddress, TriggerOwnerWithdraw, ManageDeaths, StopPayouts, Bootstrap }\\n\\n    // Stores permissions of an address\\n    struct Permissions {\\n        bool canVote;\\n        bool canConfigure;\\n        bool canSetOwnerAddress;\\n        bool canTriggerOwnerWithdraw;\\n        bool canManageDeaths;\\n        bool canStopPayouts;\\n\\n        // Special permission that can't be voted in and only the deploying address receives\\n        bool canBootstrap;\\n    }\\n\\n    // A call for vote to change address permissions\\n    struct CallForVote {\\n\\n        // Address that will be assigned the permissions if the vote passes\\n        address subject;\\n\\n        // Permissions to be assigned if the vote passes\\n        Permissions permissions;\\n\\n        // Total number of votes for and against the permission change\\n        uint128 yeas;\\n        uint128 nays;\\n    }\\n\\n    // A vote in a call for vote\\n    struct Vote {\\n        uint64 callForVoteIndex;\\n        bool yeaOrNay;\\n    }\\n\\n    // Permissions of addresses\\n    mapping(address => Permissions) private permissions;\\n\\n    // List of calls for a vote: callForVoteIndex => CallForVote, callForVoteIndex starts from 1\\n    mapping(uint => CallForVote) private callsForVote;\\n\\n    // Last registered call for vote of every address: address => callForVoteIndex\\n    mapping(address => uint64) private lastRegisteredCallForVote;\\n\\n    // Votes of every address: address => Vote\\n    mapping(address => Vote) private votes;\\n\\n    uint64 public resolvedCallsForVote;\\n    uint64 public totalCallsForVote;\\n    uint64 public totalVoters;\\n\\n    /**\\n     * @dev Emitted when a new call for vote is registered\\n     * @param callForVoteIndex Index of the call for vote (1-based)\\n     * @param subject Subject address to change permissions to if vote passes\\n     * @param canVote Allow subject address to vote\\n     * @param canConfigure Allow subject address to configure prices, fees and base URI\\n     * @param canSetOwnerAddress Allows subject to change owner withdraw address\\n     * @param canTriggerOwnerWithdraw Allow subject address to trigger withdraw from owner's balance\\n     * @param canManageDeaths Allow subject to set tokens as dead or alive\\n     * @param canStopPayouts Allow subject to stop the bank payout schedule early\\n     */\\n    event CallForVoteRegistered(\\n        uint64 indexed callForVoteIndex,\\n        address indexed caller,\\n        address indexed subject,\\n        bool canVote,\\n        bool canConfigure,\\n        bool canSetOwnerAddress,\\n        bool canTriggerOwnerWithdraw,\\n        bool canManageDeaths,\\n        bool canStopPayouts\\n    );\\n\\n    /**\\n     * @dev Emitted when a call for vote is resolved\\n     * @param callForVoteIndex Index of the call for vote (1-based)\\n     * @param yeas Total yeas for the call after the vote\\n     * @param nays Total nays for the call after the vote\\n     */\\n    event CallForVoteResolved(\\n        uint64 indexed callForVoteIndex,\\n        uint128 yeas,\\n        uint128 nays\\n    );\\n\\n    /**\\n     * @dev Emitted when a vote is casted\\n     * @param callForVoteIndex Index of the call for vote (1-based)\\n     * @param voter Voter address\\n     * @param yeaOrNay Vote, true if yea, false if nay\\n     * @param totalVoters Total addresses with vote permission at the time of event\\n     * @param yeas Total yeas for the call after the vote\\n     * @param nays Total nays for the call after the vote\\n     */\\n    event VoteCasted(\\n        uint64 indexed callForVoteIndex,\\n        address indexed voter,\\n        bool yeaOrNay,\\n        uint64 totalVoters,\\n        uint128 yeas,\\n        uint128 nays\\n    );\\n\\n    /**\\n     * @dev Inits the contract and gives the deployer address all permissions\\n     */\\n    constructor() {\\n        _setPermissions(msg.sender, Permissions({\\n            canVote: true,\\n            canConfigure: true,\\n            canSetOwnerAddress: true,\\n            canTriggerOwnerWithdraw: true,\\n            canManageDeaths: true,\\n            canStopPayouts: true,\\n            canBootstrap: true\\n        }));\\n    }\\n\\n    /**\\n     * @dev Checks if the given address has permission to perform given action\\n     * @param subject Address to check\\n     * @param action Action to check permissions against\\n     * @return True if given address has permission to perform given action\\n     */\\n    function hasPermission(address subject, Actions action) public view returns (bool) {\\n        if (action == Actions.ManageDeaths) {\\n            return permissions[subject].canManageDeaths;\\n        }\\n\\n        if (action == Actions.Vote) {\\n            return permissions[subject].canVote;\\n        }\\n\\n        if (action == Actions.SetOwnerAddress) {\\n            return permissions[subject].canSetOwnerAddress;\\n        }\\n\\n        if (action == Actions.TriggerOwnerWithdraw) {\\n            return permissions[subject].canTriggerOwnerWithdraw;\\n        }\\n\\n        if (action == Actions.Configure) {\\n            return permissions[subject].canConfigure;\\n        }\\n\\n        if (action == Actions.StopPayouts) {\\n            return permissions[subject].canStopPayouts;\\n        }\\n\\n        if (action == Actions.Bootstrap) {\\n            return permissions[subject].canBootstrap;\\n        }\\n\\n        return false;\\n    }\\n\\n    /**\\n     * Sets permissions for a given address\\n     * @param subject Subject address to set permissions to\\n     * @param _permissions Permissions\\n     */\\n    function _setPermissions(address subject, Permissions memory _permissions) private {\\n\\n        // Tracks count of total voting addresses to be able to calculate majority\\n        if (permissions[subject].canVote != _permissions.canVote) {\\n            if (_permissions.canVote) {\\n                totalVoters += 1;\\n            } else {\\n                totalVoters -= 1;\\n\\n                // Cleaning up voting-related state for the address\\n                delete votes[subject];\\n                delete lastRegisteredCallForVote[subject];\\n            }\\n        }\\n\\n        permissions[subject] = _permissions;\\n    }\\n\\n    /**\\n     * @dev Registers a new call for vote to change address permissions\\n     * @param subject Subject address to change permissions to if vote passes\\n     * @param canVote Allow subject address to vote\\n     * @param canConfigure Allow subject address to configure prices, fees and base URI\\n     * @param canSetOwnerAddress Allows subject to change owner withdraw address\\n     * @param canTriggerOwnerWithdraw Allow subject address to trigger withdraw from owner's balance\\n     * @param canManageDeaths Allow subject to set tokens as dead or alive\\n     * @param canStopPayouts Allow subject to stop the bank payout schedule early\\n     *\\n     * Requirements:\\n     * - the caller must have the vote permission\\n     * - the caller shouldn't have any unresolved calls for vote\\n     */\\n    function callForVote(\\n        address subject,\\n        bool canVote,\\n        bool canConfigure,\\n        bool canSetOwnerAddress,\\n        bool canTriggerOwnerWithdraw,\\n        bool canManageDeaths,\\n        bool canStopPayouts\\n    ) external {\\n        require(\\n            hasPermission(msg.sender, Actions.Vote),\\n            \\\"Only addresses with vote permission can register a call for vote\\\"\\n        );\\n\\n        // If the sender has previously created a call for vote that hasn't been resolved yet,\\n        // a second call for vote can't be registered. Prevents a denial of service attack, where\\n        // a minority of voters could flood the call for vote queue.\\n        require(\\n            lastRegisteredCallForVote[msg.sender] <= resolvedCallsForVote,\\n            \\\"Only one active call for vote per address is allowed\\\"\\n        );\\n\\n        totalCallsForVote++;\\n\\n        lastRegisteredCallForVote[msg.sender] = totalCallsForVote;\\n\\n        callsForVote[totalCallsForVote] = CallForVote({\\n            subject: subject,\\n            permissions: Permissions({\\n                canVote: canVote,\\n                canConfigure: canConfigure,\\n                canSetOwnerAddress: canSetOwnerAddress,\\n                canTriggerOwnerWithdraw: canTriggerOwnerWithdraw,\\n                canManageDeaths: canManageDeaths,\\n                canStopPayouts: canStopPayouts,\\n                canBootstrap: false\\n            }),\\n            yeas: 0,\\n            nays: 0\\n        });\\n\\n        emit CallForVoteRegistered(\\n            totalCallsForVote,\\n            msg.sender,\\n            subject,\\n            canVote,\\n            canConfigure,\\n            canSetOwnerAddress,\\n            canTriggerOwnerWithdraw,\\n            canManageDeaths,\\n            canStopPayouts\\n        );\\n    }\\n\\n    /**\\n     * @dev Registers a vote\\n     * @param callForVoteIndex Call for vote index\\n     * @param yeaOrNay True to vote yea, false to vote nay\\n     *\\n     * Requirements:\\n     * - unresolved call for vote must exist\\n     * - call for vote index must match the current active call for vote\\n     * - the caller must have the vote permission\\n     */\\n    function vote(uint64 callForVoteIndex, bool yeaOrNay) external {\\n        require(hasUnresolvedCallForVote(), \\\"No unresolved call for vote exists\\\");\\n        require(\\n            callForVoteIndex == _getCurrenCallForVoteIndex(),\\n            \\\"Call for vote does not exist or is not active\\\"\\n        );\\n        require(\\n            hasPermission(msg.sender, Actions.Vote),\\n            \\\"Sender address does not have vote permission\\\"\\n        );\\n\\n        uint128 yeas = callsForVote[callForVoteIndex].yeas;\\n        uint128 nays = callsForVote[callForVoteIndex].nays;\\n\\n        // If the voter has already voted in this call for vote, undo the last vote\\n        if (votes[msg.sender].callForVoteIndex == callForVoteIndex) {\\n            if (votes[msg.sender].yeaOrNay) {\\n                yeas -= 1;\\n            } else {\\n                nays -= 1;\\n            }\\n        }\\n\\n        if (yeaOrNay) {\\n            yeas += 1;\\n        } else {\\n            nays += 1;\\n        }\\n\\n        emit VoteCasted(callForVoteIndex, msg.sender, yeaOrNay, totalVoters, yeas, nays);\\n\\n        if (yeas == (totalVoters / 2 + 1) || nays == (totalVoters - totalVoters / 2)) {\\n\\n            if (yeas > nays) {\\n                _setPermissions(\\n                    callsForVote[callForVoteIndex].subject,\\n                    callsForVote[callForVoteIndex].permissions\\n                );\\n            }\\n\\n            resolvedCallsForVote += 1;\\n\\n            // Cleaning up what we can\\n            delete callsForVote[callForVoteIndex];\\n            delete votes[msg.sender];\\n\\n            emit CallForVoteResolved(callForVoteIndex, yeas, nays);\\n\\n            return;\\n        }\\n\\n        votes[msg.sender] = Vote({\\n            callForVoteIndex: callForVoteIndex,\\n            yeaOrNay: yeaOrNay\\n        });\\n\\n        callsForVote[callForVoteIndex].yeas = yeas;\\n        callsForVote[callForVoteIndex].nays = nays;\\n    }\\n\\n    /**\\n     * @dev Returns information about the current unresolved call for vote\\n     * @return callForVoteIndex Call for vote index (1-based)\\n     * @return yeas Total yea votes\\n     * @return nays Total nay votes\\n     *\\n     * Requirements:\\n     * - Unresolved call for vote must exist\\n     */\\n    function getCurrentCallForVote() public view returns (\\n        uint64 callForVoteIndex,\\n        uint128 yeas,\\n        uint128 nays\\n    ) {\\n        require(hasUnresolvedCallForVote(), \\\"No unresolved call for vote exists\\\");\\n        uint64 index = _getCurrenCallForVoteIndex();\\n        return (index, callsForVote[index].yeas, callsForVote[index].nays);\\n    }\\n\\n    /**\\n     * @dev Checks if there is an unresolved call for vote\\n     * @return True if an unresolved call for vote exists\\n     */\\n    function hasUnresolvedCallForVote() public view returns (bool) {\\n        return totalCallsForVote > resolvedCallsForVote;\\n    }\\n\\n    /**\\n     * @dev Returns current call for vote index\\n     * @return Call for vote index (1-based)\\n     *\\n     * Doesn't check if an unresolved call for vote exists, hasUnresolvedCallForVote should be used\\n     * before using the index that this method returns.\\n     */\\n    function _getCurrenCallForVoteIndex() private view returns (uint64) {\\n        return resolvedCallsForVote + 1;\\n    }\\n}\\n\"\r\n    },\r\n    \"/contracts/Bank.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: UNLICENSED\\npragma solidity ^0.8.9;\\n\\nimport './Governed.sol';\\nimport './OwnerBalanceContributor.sol';\\nimport './Macabris.sol';\\nimport './Reaper.sol';\\n\\n/**\\n * @title Contract tracking payouts to token owners according to predefined schedule\\n *\\n * Payout schedule is dived into intervalCount intervals of intervalLength durations, starting at\\n * startTime timestamp. After each interval, part of the payouts pool is distributed to the owners\\n * of the tokens that are still alive. After the whole payout schedule is completed, all the funds\\n * in the payout pool will have been distributed.\\n *\\n * There is a possibility of the payout schedule being stopped early. In that case, all of the\\n * remaining funds will be distributed to the owners of the tokens that were alive at the time of\\n * the payout schedule stop.\\n */\\ncontract Bank is Governed, OwnerBalanceContributor {\\n\\n    // Macabris NFT contract\\n    Macabris public macabris;\\n\\n    // Reaper contract\\n    Reaper public reaper;\\n\\n    // Stores active token count change and deposits for an interval\\n    struct IntervalActivity {\\n        int128 activeTokenChange;\\n        uint128 deposits;\\n    }\\n\\n    // Stores aggregate interval information\\n    struct IntervalTotals {\\n        uint index;\\n        uint deposits;\\n        uint payouts;\\n        uint accountPayouts;\\n        uint activeTokens;\\n        uint accountActiveTokens;\\n    }\\n\\n    // The same as IntervalTotals, but a packed version to keep in the lastWithdrawTotals map.\\n    // Packed versions costs less to store, but the math is then more expensive duo to type\\n    // conversions, so the interval data is packed just before storing, and unpacked after loading.\\n    struct IntervalTotalsPacked {\\n        uint128 deposits;\\n        uint128 payouts;\\n        uint128 accountPayouts;\\n        uint48 activeTokens;\\n        uint48 accountActiveTokens;\\n        uint32 index;\\n    }\\n\\n    // Timestamp of when the first interval starts\\n    uint64 public immutable startTime;\\n\\n    // Timestamp of the moment the payouts have been stopped and the bank contents distributed.\\n    // This should remain 0, if the payout schedule is never stopped manually.\\n    uint64 public stopTime;\\n\\n    // Total number of intervals\\n    uint64 public immutable intervalCount;\\n\\n    // Interval length in seconds\\n    uint64 public immutable intervalLength;\\n\\n    // Activity for each interval\\n    mapping(uint => IntervalActivity) private intervals;\\n\\n    // Active token change for every interval for every address individually\\n    mapping(uint => mapping(address => int)) private individualIntervals;\\n\\n    // Total withdrawn amount fo each address\\n    mapping(address => uint) private withdrawals;\\n\\n    // Totals of the interval before the last withdrawal of an address\\n    mapping(address => IntervalTotalsPacked) private lastWithdrawTotals;\\n\\n    /**\\n     * @param _startTime First interval start unix timestamp\\n     * @param _intervalCount Interval count\\n     * @param _intervalLength Interval length in seconds\\n     * @param governanceAddress Address of the Governance contract\\n     * @param ownerBalanceAddress Address of the OwnerBalance contract\\n     *\\n     * Requirements:\\n     * - interval length must be at least one second (but should be more like a month)\\n     * - interval count must be bigger than zero\\n     * - Governance contract must be deployed at the given address\\n     * - OwnerBalance contract must be deployed at the given address\\n     */\\n    constructor(\\n        uint64 _startTime,\\n        uint64 _intervalCount,\\n        uint64 _intervalLength,\\n        address governanceAddress,\\n        address ownerBalanceAddress\\n    ) Governed(governanceAddress) OwnerBalanceContributor(ownerBalanceAddress) {\\n        require(_intervalLength > 0, \\\"Interval length can't be zero\\\");\\n        require(_intervalCount > 0, \\\"At least one interval is required\\\");\\n\\n        startTime = _startTime;\\n        intervalCount = _intervalCount;\\n        intervalLength = _intervalLength;\\n    }\\n\\n    /**\\n     * @dev Sets Macabris NFT contract address\\n     * @param macabrisAddress Address of Macabris NFT contract\\n     *\\n     * Requirements:\\n     * - the caller must have the bootstrap permission\\n     * - Macabris contract must be deployed at the given address\\n     */\\n    function setMacabrisAddress(address macabrisAddress) external canBootstrap(msg.sender) {\\n        macabris = Macabris(macabrisAddress);\\n    }\\n\\n    /**\\n     * @dev Sets Reaper contract address\\n     * @param reaperAddress Address of Reaper contract\\n     *\\n     * Requirements:\\n     * - the caller must have the bootstrap permission\\n     * - Reaper contract must be deployed at the given address\\n     */\\n    function setReaperAddress(address reaperAddress) external canBootstrap(msg.sender) {\\n        reaper = Reaper(reaperAddress);\\n    }\\n\\n    /**\\n     * @dev Stops payouts, distributes remaining funds among alive tokens\\n     *\\n     * Requirements:\\n     * - the caller must have the stop payments permission\\n     * - the payout schedule must not have been stopped previously\\n     * - the payout schedule should not be completed\\n     */\\n    function stopPayouts() external canStopPayouts(msg.sender) {\\n        require(stopTime == 0, \\\"Payouts are already stopped\\\");\\n        require(block.timestamp < getEndTime(), \\\"Payout schedule is already completed\\\");\\n        stopTime = uint64(block.timestamp);\\n    }\\n\\n    /**\\n     * @dev Checks if the payouts are finished or have been stopped manually\\n     * @return True if finished or stopped\\n     */\\n    function hasEnded() public view returns (bool) {\\n        return stopTime > 0 || block.timestamp >= getEndTime();\\n    }\\n\\n    /**\\n     * @dev Returns timestamp of the first second after the last interval\\n     * @return Unix timestamp\\n     */\\n    function getEndTime() public view returns(uint) {\\n        return _getIntervalStartTime(intervalCount);\\n    }\\n\\n    /**\\n     * @dev Returns a timestamp of the first second of the given interval\\n     * @return Unix timestamp\\n     *\\n     * Doesn't make any bound checks for the given interval!\\n     */\\n    function _getIntervalStartTime(uint interval) private view returns(uint) {\\n        return startTime + interval * intervalLength;\\n    }\\n\\n    /**\\n     * @dev Returns start time of the upcoming interval\\n     * @return Unix timestamp\\n     */\\n    function getNextIntervalStartTime() public view returns (uint) {\\n\\n        // If the payouts were ended manually, there will be no next interval\\n        if (stopTime > 0) {\\n            return 0;\\n        }\\n\\n        // Returns first intervals start time if the payout schedule hasn't started yet\\n        if (block.timestamp < startTime) {\\n            return startTime;\\n        }\\n\\n        uint currentInterval = _getInterval(block.timestamp);\\n\\n        // There will be no intervals after the last one, return 0\\n        if (currentInterval >= (intervalCount - 1)) {\\n            return 0;\\n        }\\n\\n        // Returns next interval's start time otherwise\\n        return _getIntervalStartTime(currentInterval + 1);\\n    }\\n\\n    /**\\n     * @dev Deposits ether to the common payout pool\\n     */\\n    function deposit() external payable {\\n\\n        // If the payouts have ended, we don't need to track deposits anymore, everything goes to\\n        // the owner's balance\\n        if (hasEnded()) {\\n            _transferToOwnerBalance(msg.value);\\n            return;\\n        }\\n\\n        require(msg.value <= type(uint128).max, \\\"Deposits bigger than uint128 max value are not allowed!\\\");\\n        uint currentInterval = _getInterval(block.timestamp);\\n        intervals[currentInterval].deposits += uint128(msg.value);\\n    }\\n\\n    /**\\n     * @dev Registers token transfer, minting and burning\\n     * @param tokenId Token ID\\n     * @param from Previous token owner, zero if this is a freshly minted token\\n     * @param to New token owner, zero if the token is being burned\\n     *\\n     * Requirements:\\n     * - the caller must be the Macabris contract\\n     */\\n    function onTokenTransfer(uint tokenId, address from, address to) external {\\n        require(msg.sender == address(macabris), \\\"Caller must be the Macabris contract\\\");\\n\\n        // If the payouts have ended, we don't need to track transfers anymore\\n        if (hasEnded()) {\\n            return;\\n        }\\n\\n        // If token is already dead, nothing changes in terms of payouts\\n        if (reaper.getTimeOfDeath(tokenId) != 0) {\\n            return;\\n        }\\n\\n        uint currentInterval = _getInterval(block.timestamp);\\n\\n        if (from == address(0)) {\\n            // If the token is freshly minted, increase the total active token count for the period\\n            intervals[currentInterval].activeTokenChange += 1;\\n        } else {\\n            // If the token is transfered, decrease the previous ownner's total for the current interval\\n            individualIntervals[currentInterval][from] -= 1;\\n        }\\n\\n        if (to == address(0)) {\\n            // If the token is burned, decrease the total active token count for the period\\n            intervals[currentInterval].activeTokenChange -= 1;\\n        } else {\\n            // If the token is transfered, add it to the receiver's total for the current interval\\n            individualIntervals[currentInterval][to] += 1;\\n        }\\n    }\\n\\n    /**\\n     * @dev Registers token death\\n     * @param tokenId Token ID\\n     *\\n     * Requirements:\\n     * - the caller must be the Reaper contract\\n     */\\n    function onTokenDeath(uint tokenId) external {\\n        require(msg.sender == address(reaper), \\\"Caller must be the Reaper contract\\\");\\n\\n        // If the payouts have ended, we don't need to track deaths anymore\\n        if (hasEnded()) {\\n            return;\\n        }\\n\\n        // If the token isn't minted yet, we don't care about it\\n        if (!macabris.exists(tokenId)) {\\n            return;\\n        }\\n\\n        uint currentInterval = _getInterval(block.timestamp);\\n        address owner = macabris.ownerOf(tokenId);\\n\\n        intervals[currentInterval].activeTokenChange -= 1;\\n        individualIntervals[currentInterval][owner] -= 1;\\n    }\\n\\n    /**\\n     * @dev Registers token resurrection\\n     * @param tokenId Token ID\\n     *\\n     * Requirements:\\n     * - the caller must be the Reaper contract\\n     */\\n    function onTokenResurrection(uint tokenId) external {\\n        require(msg.sender == address(reaper), \\\"Caller must be the Reaper contract\\\");\\n\\n        // If the payouts have ended, we don't need to track deaths anymore\\n        if (hasEnded()) {\\n            return;\\n        }\\n\\n        // If the token isn't minted yet, we don't care about it\\n        if (!macabris.exists(tokenId)) {\\n            return;\\n        }\\n\\n        uint currentInterval = _getInterval(block.timestamp);\\n        address owner = macabris.ownerOf(tokenId);\\n\\n        intervals[currentInterval].activeTokenChange += 1;\\n        individualIntervals[currentInterval][owner] += 1;\\n    }\\n\\n    /**\\n     * Returns current interval index\\n     * @return Interval index (0 for the first interval, intervalCount-1 for the last)\\n     *\\n     * Notes:\\n     * - Returns zero (first interval), if the first interval hasn't started yet\\n     * - Returns the interval at the stop time, if the payouts have been stopped\\n     * - Returns \\\"virtual\\\" interval after the last one, if the payout schedule is completed\\n     */\\n    function _getCurrentInterval() private view returns(uint) {\\n\\n        // If the payouts have been stopped, return interval after the stopped one\\n        if (stopTime > 0) {\\n            return _getInterval(stopTime);\\n        }\\n\\n        uint intervalIndex = _getInterval(block.timestamp);\\n\\n        // Return \\\"virtual\\\" interval that would come after the last one, if payout schedule is completed\\n        if (intervalIndex > intervalCount) {\\n            return intervalCount;\\n        }\\n\\n        return intervalIndex;\\n    }\\n\\n    /**\\n     * Returns interval index for the given timestamp\\n     * @return Interval index (0 for the first interval, intervalCount-1 for the last)\\n     *\\n     * Notes:\\n     * - Returns zero (first interval), if the first interval hasn't started yet\\n     * - Returns non-exitent interval index, if the timestamp is after the end time\\n     */\\n    function _getInterval(uint timestamp) private view returns(uint) {\\n\\n        // Time before the payout schedule start is considered to be a part of the first interval\\n        if (timestamp < startTime) {\\n            return 0;\\n        }\\n\\n        return (timestamp - startTime) / intervalLength;\\n    }\\n\\n    /**\\n     * @dev Returns total pool value (deposits - payouts) for the current interval\\n     * @return Current pool value in wei\\n     */\\n    function getPoolValue() public view returns (uint) {\\n\\n        // If all the payouts are done, pool is empty. In reality, there might something left due to\\n        // last interval pool not dividing equaly between the remaining alive tokens, or if there\\n        // are no alive tokens during the last interval.\\n        if (hasEnded()) {\\n            return 0;\\n        }\\n\\n        uint currentInterval = _getInterval(block.timestamp);\\n        IntervalTotals memory totals = _getIntervalTotals(currentInterval, address(0));\\n\\n        return totals.deposits - totals.payouts;\\n    }\\n\\n    /**\\n     * @dev Returns provisional next payout value per active token of the current interval\\n     * @return Payout in wei, zero if no active tokens exist or all payouts are done\\n     */\\n    function getNextPayout() external view returns (uint) {\\n\\n        // There is no next payout if the payout schedule has run its course\\n        if (hasEnded()) {\\n            return 0;\\n        }\\n\\n        uint currentInterval = _getInterval(block.timestamp);\\n        IntervalTotals memory totals = _getIntervalTotals(currentInterval, address(0));\\n\\n        return _getPayoutPerToken(totals);\\n    }\\n\\n    /**\\n     * @dev Returns payout amount per token for the given interval\\n     * @param totals Interval totals\\n     * @return Payout value in wei\\n     *\\n     * Notes:\\n     * - Returns zero for the \\\"virtual\\\" interval after the payout schedule end\\n     * - Returns zero if no active tokens exists for the interval\\n     */\\n    function _getPayoutPerToken(IntervalTotals memory totals) private view returns (uint) {\\n        // If we're calculating next payout for the \\\"virtual\\\" interval after the last one,\\n        // or if there are no active tokens, we would be dividing the pool by zero\\n        if (totals.activeTokens > 0 && totals.index < intervalCount) {\\n            return (totals.deposits - totals.payouts) / (intervalCount - totals.index) / totals.activeTokens;\\n        } else {\\n            return 0;\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the sum of all payouts made up until this interval\\n     * @return Payouts total in wei\\n     */\\n    function getPayoutsTotal() external view returns (uint) {\\n        uint interval = _getCurrentInterval();\\n        IntervalTotals memory totals = _getIntervalTotals(interval, address(0));\\n        uint payouts = totals.payouts;\\n\\n        // If the payout schedule has been stopped prematurely, all deposits are distributed.\\n        // If there are no active tokens, the remainder of the pool is never distributed.\\n        if (stopTime > 0 && totals.activeTokens > 0) {\\n\\n            // Remaining pool might not divide equally between the active tokens, calculating\\n            // distributed amount without the remainder\\n            payouts += (totals.deposits - totals.payouts) / totals.activeTokens * totals.activeTokens;\\n        }\\n\\n        return payouts;\\n    }\\n\\n    /**\\n     * @dev Returns the sum of payouts for a particular account\\n     * @param account Account address\\n     * @return Payouts total in wei\\n     */\\n    function getAccountPayouts(address account) public view returns (uint) {\\n        uint interval = _getCurrentInterval();\\n        IntervalTotals memory totals = _getIntervalTotals(interval, account);\\n        uint accountPayouts = totals.accountPayouts;\\n\\n        // If the payout schedule has been stopped prematurely, all deposits are distributed.\\n        // If there are no active tokens, the remainder of the pool is never distributed.\\n        if (stopTime > 0 && totals.activeTokens > 0) {\\n            accountPayouts += (totals.deposits - totals.payouts) / totals.activeTokens * totals.accountActiveTokens;\\n        }\\n\\n        return accountPayouts;\\n    }\\n\\n    /**\\n     * @dev Returns amount available for withdrawal\\n     * @param account Address to return balance for\\n     * @return Amount int wei\\n     */\\n    function getBalance(address account) public view returns (uint) {\\n        return getAccountPayouts(account) - withdrawals[account];\\n    }\\n\\n    /**\\n     * @dev Withdraws all available amount\\n     * @param account Address to withdraw for\\n     *\\n     * Note that this method can be called by any address.\\n     */\\n    function withdraw(address payable account) external {\\n\\n        uint interval = _getCurrentInterval();\\n\\n        // Persists last finished interval totals to avoid having to recalculate them from the\\n        // deltas during the next withdrawal. Totals of the first interval should never be saved\\n        // to the lastWithdrawTotals map (see _getIntervalTotals for explanation).\\n        if (interval > 1) {\\n            IntervalTotals memory totals = _getIntervalTotals(interval - 1, account);\\n\\n            // Converting the totals struct to a packed version before saving to storage to save gas\\n            lastWithdrawTotals[account] = IntervalTotalsPacked({\\n                deposits: uint128(totals.deposits),\\n                payouts: uint128(totals.payouts),\\n                accountPayouts: uint128(totals.accountPayouts),\\n                activeTokens: uint48(totals.activeTokens),\\n                accountActiveTokens: uint48(totals.accountActiveTokens),\\n                index: uint32(totals.index)\\n            });\\n        }\\n\\n        uint balance = getBalance(account);\\n        withdrawals[account] += balance;\\n        account.transfer(balance);\\n    }\\n\\n    /**\\n     * @dev Aggregates active token and deposit change history until the given interval\\n     * @param intervalIndex Interval\\n     * @param account Account for account-specific aggregate values\\n     * @return Aggregate values for the interval\\n     */\\n    function _getIntervalTotals(uint intervalIndex, address account) private view returns (IntervalTotals memory) {\\n\\n        IntervalTotalsPacked storage packed = lastWithdrawTotals[account];\\n\\n        // Converting packed totals struct back to unpacked one, to avoid having to do type\\n        // conversions in the loop below.\\n        IntervalTotals memory totals = IntervalTotals({\\n            index: packed.index,\\n            deposits: packed.deposits,\\n            payouts: packed.payouts,\\n            accountPayouts: packed.accountPayouts,\\n            activeTokens: packed.activeTokens,\\n            accountActiveTokens: packed.accountActiveTokens\\n        });\\n\\n        uint prevPayout;\\n        uint prevAccountPayout;\\n        uint prevPayoutPerToken;\\n\\n        // If we don't have previous totals, we need to start from intervalIndex 0 to apply the\\n        // active token and deposit changes of the first interval. If we have previous totals, they\\n        // the include all the activity of the interval already, so we start from the next one.\\n        //\\n        // Note that it's assumed all the interval total values will be 0, if the totals.index is 0.\\n        // This means that the totals of the first interval should never be saved to the\\n        // lastWithdrawTotals maps otherwise the deposits and active token changes will be counted twice.\\n        for (uint i = totals.index > 0 ? totals.index + 1 : 0; i <= intervalIndex; i++) {\\n\\n            // Calculating payouts for the last interval data. If this is the first interval and\\n            // there was no previous interval totals, all these values will resolve to 0.\\n            prevPayoutPerToken = _getPayoutPerToken(totals);\\n            prevPayout = prevPayoutPerToken * totals.activeTokens;\\n            prevAccountPayout = totals.accountActiveTokens * prevPayoutPerToken;\\n\\n            // Updating totals to represent the current interval by adding the payouts of the last\\n            // interval and applying changes in active token count and deposits\\n            totals.index = i;\\n            totals.payouts += prevPayout;\\n            totals.accountPayouts += prevAccountPayout;\\n\\n            IntervalActivity storage interval = intervals[i];\\n            totals.deposits += interval.deposits;\\n\\n            // Even though the token change value might be negative, the sum of all the changes\\n            // will never be negative because of the implicit contrains of the contracts (e.g. token\\n            // can't be transfered from an address that does not own it, or already dead token can't\\n            // be marked dead again). Therefore it's safe to convert the result into unsigned value,\\n            // after doing sum of signed values.\\n            totals.activeTokens = uint(int(totals.activeTokens) + interval.activeTokenChange);\\n            totals.accountActiveTokens = uint(int(totals.accountActiveTokens) + individualIntervals[i][account]);\\n        }\\n\\n        return totals;\\n    }\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/utils/introspection/IERC165.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC165 standard, as defined in the\\n * https://eips.ethereum.org/EIPS/eip-165[EIP].\\n *\\n * Implementers can declare support of contract interfaces, which can then be\\n * queried by others ({ERC165Checker}).\\n *\\n * For an implementation, see {ERC165}.\\n */\\ninterface IERC165 {\\n    /**\\n     * @dev Returns true if this contract implements the interface defined by\\n     * `interfaceId`. See the corresponding\\n     * https://eips.ethereum.org/EIPS/eip-165#how-interfaces-are-identified[EIP section]\\n     * to learn more about how these ids are created.\\n     *\\n     * This function call must use less than 30 000 gas.\\n     */\\n    function supportsInterface(bytes4 interfaceId) external view returns (bool);\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/utils/introspection/ERC165.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"./IERC165.sol\\\";\\n\\n/**\\n * @dev Implementation of the {IERC165} interface.\\n *\\n * Contracts that want to implement ERC165 should inherit from this contract and override {supportsInterface} to check\\n * for the additional interface id that will be supported. For example:\\n *\\n * ```solidity\\n * function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {\\n *     return interfaceId == type(MyInterface).interfaceId || super.supportsInterface(interfaceId);\\n * }\\n * ```\\n *\\n * Alternatively, {ERC165Storage} provides an easier to use but more expensive implementation.\\n */\\nabstract contract ERC165 is IERC165 {\\n    /**\\n     * @dev See {IERC165-supportsInterface}.\\n     */\\n    function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {\\n        return interfaceId == type(IERC165).interfaceId;\\n    }\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/utils/escrow/Escrow.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../../access/Ownable.sol\\\";\\nimport \\\"../Address.sol\\\";\\n\\n/**\\n * @title Escrow\\n * @dev Base escrow contract, holds funds designated for a payee until they\\n * withdraw them.\\n *\\n * Intended usage: This contract (and derived escrow contracts) should be a\\n * standalone contract, that only interacts with the contract that instantiated\\n * it. That way, it is guaranteed that all Ether will be handled according to\\n * the `Escrow` rules, and there is no need to check for payable functions or\\n * transfers in the inheritance tree. The contract that uses the escrow as its\\n * payment method should be its owner, and provide public methods redirecting\\n * to the escrow's deposit and withdraw.\\n */\\ncontract Escrow is Ownable {\\n    using Address for address payable;\\n\\n    event Deposited(address indexed payee, uint256 weiAmount);\\n    event Withdrawn(address indexed payee, uint256 weiAmount);\\n\\n    mapping(address => uint256) private _deposits;\\n\\n    function depositsOf(address payee) public view returns (uint256) {\\n        return _deposits[payee];\\n    }\\n\\n    /**\\n     * @dev Stores the sent amount as credit to be withdrawn.\\n     * @param payee The destination address of the funds.\\n     */\\n    function deposit(address payee) public payable virtual onlyOwner {\\n        uint256 amount = msg.value;\\n        _deposits[payee] += amount;\\n        emit Deposited(payee, amount);\\n    }\\n\\n    /**\\n     * @dev Withdraw accumulated balance for a payee, forwarding all gas to the\\n     * recipient.\\n     *\\n     * WARNING: Forwarding all gas opens the door to reentrancy vulnerabilities.\\n     * Make sure you trust the recipient, or are either following the\\n     * checks-effects-interactions pattern or using {ReentrancyGuard}.\\n     *\\n     * @param payee The address whose funds will be withdrawn and transferred to.\\n     */\\n    function withdraw(address payable payee) public virtual onlyOwner {\\n        uint256 payment = _deposits[payee];\\n\\n        _deposits[payee] = 0;\\n\\n        payee.sendValue(payment);\\n\\n        emit Withdrawn(payee, payment);\\n    }\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/utils/Strings.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev String operations.\\n */\\nlibrary Strings {\\n    bytes16 private constant _HEX_SYMBOLS = \\\"0123456789abcdef\\\";\\n\\n    /**\\n     * @dev Converts a `uint256` to its ASCII `string` decimal representation.\\n     */\\n    function toString(uint256 value) internal pure returns (string memory) {\\n        // Inspired by OraclizeAPI's implementation - MIT licence\\n        // https://github.com/oraclize/ethereum-api/blob/b42146b063c7d6ee1358846c198246239e9360e8/oraclizeAPI_0.4.25.sol\\n\\n        if (value == 0) {\\n            return \\\"0\\\";\\n        }\\n        uint256 temp = value;\\n        uint256 digits;\\n        while (temp != 0) {\\n            digits++;\\n            temp /= 10;\\n        }\\n        bytes memory buffer = new bytes(digits);\\n        while (value != 0) {\\n            digits -= 1;\\n            buffer[digits] = bytes1(uint8(48 + uint256(value % 10)));\\n            value /= 10;\\n        }\\n        return string(buffer);\\n    }\\n\\n    /**\\n     * @dev Converts a `uint256` to its ASCII `string` hexadecimal representation.\\n     */\\n    function toHexString(uint256 value) internal pure returns (string memory) {\\n        if (value == 0) {\\n            return \\\"0x00\\\";\\n        }\\n        uint256 temp = value;\\n        uint256 length = 0;\\n        while (temp != 0) {\\n            length++;\\n            temp >>= 8;\\n        }\\n        return toHexString(value, length);\\n    }\\n\\n    /**\\n     * @dev Converts a `uint256` to its ASCII `string` hexadecimal representation with fixed length.\\n     */\\n    function toHexString(uint256 value, uint256 length) internal pure returns (string memory) {\\n        bytes memory buffer = new bytes(2 * length + 2);\\n        buffer[0] = \\\"0\\\";\\n        buffer[1] = \\\"x\\\";\\n        for (uint256 i = 2 * length + 1; i > 1; --i) {\\n            buffer[i] = _HEX_SYMBOLS[value & 0xf];\\n            value >>= 4;\\n        }\\n        require(value == 0, \\\"Strings: hex length insufficient\\\");\\n        return string(buffer);\\n    }\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/utils/Context.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Provides information about the current execution context, including the\\n * sender of the transaction and its data. While these are generally available\\n * via msg.sender and msg.data, they should not be accessed in such a direct\\n * manner, since when dealing with meta-transactions the account sending and\\n * paying for execution may not be the actual sender (as far as an application\\n * is concerned).\\n *\\n * This contract is only required for intermediate, library-like contracts.\\n */\\nabstract contract Context {\\n    function _msgSender() internal view virtual returns (address) {\\n        return msg.sender;\\n    }\\n\\n    function _msgData() internal view virtual returns (bytes calldata) {\\n        return msg.data;\\n    }\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/utils/Address.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Collection of functions related to the address type\\n */\\nlibrary Address {\\n    /**\\n     * @dev Returns true if `account` is a contract.\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * It is unsafe to assume that an address for which this function returns\\n     * false is an externally-owned account (EOA) and not a contract.\\n     *\\n     * Among others, `isContract` will return false for the following\\n     * types of addresses:\\n     *\\n     *  - an externally-owned account\\n     *  - a contract in construction\\n     *  - an address where a contract will be created\\n     *  - an address where a contract lived, but was destroyed\\n     * ====\\n     */\\n    function isContract(address account) internal view returns (bool) {\\n        // This method relies on extcodesize, which returns 0 for contracts in\\n        // construction, since the code is only stored at the end of the\\n        // constructor execution.\\n\\n        uint256 size;\\n        assembly {\\n            size := extcodesize(account)\\n        }\\n        return size > 0;\\n    }\\n\\n    /**\\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\\n     * `recipient`, forwarding all available gas and reverting on errors.\\n     *\\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\\n     * imposed by `transfer`, making them unable to receive funds via\\n     * `transfer`. {sendValue} removes this limitation.\\n     *\\n     * https://diligence.consensys.net/posts/2019/09/stop-using-soliditys-transfer-now/[Learn more].\\n     *\\n     * IMPORTANT: because control is transferred to `recipient`, care must be\\n     * taken to not create reentrancy vulnerabilities. Consider using\\n     * {ReentrancyGuard} or the\\n     * https://solidity.readthedocs.io/en/v0.5.11/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\\n     */\\n    function sendValue(address payable recipient, uint256 amount) internal {\\n        require(address(this).balance >= amount, \\\"Address: insufficient balance\\\");\\n\\n        (bool success, ) = recipient.call{value: amount}(\\\"\\\");\\n        require(success, \\\"Address: unable to send value, recipient may have reverted\\\");\\n    }\\n\\n    /**\\n     * @dev Performs a Solidity function call using a low level `call`. A\\n     * plain `call` is an unsafe replacement for a function call: use this\\n     * function instead.\\n     *\\n     * If `target` reverts with a revert reason, it is bubbled up by this\\n     * function (like regular Solidity function calls).\\n     *\\n     * Returns the raw returned data. To convert to the expected return value,\\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\\n     *\\n     * Requirements:\\n     *\\n     * - `target` must be a contract.\\n     * - calling `target` with `data` must not revert.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionCall(target, data, \\\"Address: low-level call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\\n     * `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, 0, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but also transferring `value` wei to `target`.\\n     *\\n     * Requirements:\\n     *\\n     * - the calling contract must have an ETH balance of at least `value`.\\n     * - the called Solidity function must be `payable`.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, value, \\\"Address: low-level call with value failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\\n     * with `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        require(address(this).balance >= value, \\\"Address: insufficient balance for call\\\");\\n        require(isContract(target), \\\"Address: call to non-contract\\\");\\n\\n        (bool success, bytes memory returndata) = target.call{value: value}(data);\\n        return verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\\n        return functionStaticCall(target, data, \\\"Address: low-level static call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal view returns (bytes memory) {\\n        require(isContract(target), \\\"Address: static call to non-contract\\\");\\n\\n        (bool success, bytes memory returndata) = target.staticcall(data);\\n        return verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionDelegateCall(target, data, \\\"Address: low-level delegate call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        require(isContract(target), \\\"Address: delegate call to non-contract\\\");\\n\\n        (bool success, bytes memory returndata) = target.delegatecall(data);\\n        return verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Tool to verifies that a low level call was successful, and revert if it wasn't, either by bubbling the\\n     * revert reason using the provided one.\\n     *\\n     * _Available since v4.3._\\n     */\\n    function verifyCallResult(\\n        bool success,\\n        bytes memory returndata,\\n        string memory errorMessage\\n    ) internal pure returns (bytes memory) {\\n        if (success) {\\n            return returndata;\\n        } else {\\n            // Look for revert reason and bubble it up if present\\n            if (returndata.length > 0) {\\n                // The easiest way to bubble the revert reason is using memory via assembly\\n\\n                assembly {\\n                    let returndata_size := mload(returndata)\\n                    revert(add(32, returndata), returndata_size)\\n                }\\n            } else {\\n                revert(errorMessage);\\n            }\\n        }\\n    }\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/token/ERC721/extensions/IERC721Metadata.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../IERC721.sol\\\";\\n\\n/**\\n * @title ERC-721 Non-Fungible Token Standard, optional metadata extension\\n * @dev See https://eips.ethereum.org/EIPS/eip-721\\n */\\ninterface IERC721Metadata is IERC721 {\\n    /**\\n     * @dev Returns the token collection name.\\n     */\\n    function name() external view returns (string memory);\\n\\n    /**\\n     * @dev Returns the token collection symbol.\\n     */\\n    function symbol() external view returns (string memory);\\n\\n    /**\\n     * @dev Returns the Uniform Resource Identifier (URI) for `tokenId` token.\\n     */\\n    function tokenURI(uint256 tokenId) external view returns (string memory);\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/token/ERC721/IERC721Receiver.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @title ERC721 token receiver interface\\n * @dev Interface for any contract that wants to support safeTransfers\\n * from ERC721 asset contracts.\\n */\\ninterface IERC721Receiver {\\n    /**\\n     * @dev Whenever an {IERC721} `tokenId` token is transferred to this contract via {IERC721-safeTransferFrom}\\n     * by `operator` from `from`, this function is called.\\n     *\\n     * It must return its Solidity selector to confirm the token transfer.\\n     * If any other value is returned or the interface is not implemented by the recipient, the transfer will be reverted.\\n     *\\n     * The selector can be obtained in Solidity with `IERC721.onERC721Received.selector`.\\n     */\\n    function onERC721Received(\\n        address operator,\\n        address from,\\n        uint256 tokenId,\\n        bytes calldata data\\n    ) external returns (bytes4);\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/token/ERC721/IERC721.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../../utils/introspection/IERC165.sol\\\";\\n\\n/**\\n * @dev Required interface of an ERC721 compliant contract.\\n */\\ninterface IERC721 is IERC165 {\\n    /**\\n     * @dev Emitted when `tokenId` token is transferred from `from` to `to`.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 indexed tokenId);\\n\\n    /**\\n     * @dev Emitted when `owner` enables `approved` to manage the `tokenId` token.\\n     */\\n    event Approval(address indexed owner, address indexed approved, uint256 indexed tokenId);\\n\\n    /**\\n     * @dev Emitted when `owner` enables or disables (`approved`) `operator` to manage all of its assets.\\n     */\\n    event ApprovalForAll(address indexed owner, address indexed operator, bool approved);\\n\\n    /**\\n     * @dev Returns the number of tokens in ``owner``'s account.\\n     */\\n    function balanceOf(address owner) external view returns (uint256 balance);\\n\\n    /**\\n     * @dev Returns the owner of the `tokenId` token.\\n     *\\n     * Requirements:\\n     *\\n     * - `tokenId` must exist.\\n     */\\n    function ownerOf(uint256 tokenId) external view returns (address owner);\\n\\n    /**\\n     * @dev Safely transfers `tokenId` token from `from` to `to`, checking first that contract recipients\\n     * are aware of the ERC721 protocol to prevent tokens from being forever locked.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` cannot be the zero address.\\n     * - `to` cannot be the zero address.\\n     * - `tokenId` token must exist and be owned by `from`.\\n     * - If the caller is not `from`, it must be have been allowed to move this token by either {approve} or {setApprovalForAll}.\\n     * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function safeTransferFrom(\\n        address from,\\n        address to,\\n        uint256 tokenId\\n    ) external;\\n\\n    /**\\n     * @dev Transfers `tokenId` token from `from` to `to`.\\n     *\\n     * WARNING: Usage of this method is discouraged, use {safeTransferFrom} whenever possible.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` cannot be the zero address.\\n     * - `to` cannot be the zero address.\\n     * - `tokenId` token must be owned by `from`.\\n     * - If the caller is not `from`, it must be approved to move this token by either {approve} or {setApprovalForAll}.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(\\n        address from,\\n        address to,\\n        uint256 tokenId\\n    ) external;\\n\\n    /**\\n     * @dev Gives permission to `to` to transfer `tokenId` token to another account.\\n     * The approval is cleared when the token is transferred.\\n     *\\n     * Only a single account can be approved at a time, so approving the zero address clears previous approvals.\\n     *\\n     * Requirements:\\n     *\\n     * - The caller must own the token or be an approved operator.\\n     * - `tokenId` must exist.\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address to, uint256 tokenId) external;\\n\\n    /**\\n     * @dev Returns the account approved for `tokenId` token.\\n     *\\n     * Requirements:\\n     *\\n     * - `tokenId` must exist.\\n     */\\n    function getApproved(uint256 tokenId) external view returns (address operator);\\n\\n    /**\\n     * @dev Approve or remove `operator` as an operator for the caller.\\n     * Operators can call {transferFrom} or {safeTransferFrom} for any token owned by the caller.\\n     *\\n     * Requirements:\\n     *\\n     * - The `operator` cannot be the caller.\\n     *\\n     * Emits an {ApprovalForAll} event.\\n     */\\n    function setApprovalForAll(address operator, bool _approved) external;\\n\\n    /**\\n     * @dev Returns if the `operator` is allowed to manage all of the assets of `owner`.\\n     *\\n     * See {setApprovalForAll}\\n     */\\n    function isApprovedForAll(address owner, address operator) external view returns (bool);\\n\\n    /**\\n     * @dev Safely transfers `tokenId` token from `from` to `to`.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` cannot be the zero address.\\n     * - `to` cannot be the zero address.\\n     * - `tokenId` token must exist and be owned by `from`.\\n     * - If the caller is not `from`, it must be approved to move this token by either {approve} or {setApprovalForAll}.\\n     * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function safeTransferFrom(\\n        address from,\\n        address to,\\n        uint256 tokenId,\\n        bytes calldata data\\n    ) external;\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/token/ERC721/ERC721.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"./IERC721.sol\\\";\\nimport \\\"./IERC721Receiver.sol\\\";\\nimport \\\"./extensions/IERC721Metadata.sol\\\";\\nimport \\\"../../utils/Address.sol\\\";\\nimport \\\"../../utils/Context.sol\\\";\\nimport \\\"../../utils/Strings.sol\\\";\\nimport \\\"../../utils/introspection/ERC165.sol\\\";\\n\\n/**\\n * @dev Implementation of https://eips.ethereum.org/EIPS/eip-721[ERC721] Non-Fungible Token Standard, including\\n * the Metadata extension, but not including the Enumerable extension, which is available separately as\\n * {ERC721Enumerable}.\\n */\\ncontract ERC721 is Context, ERC165, IERC721, IERC721Metadata {\\n    using Address for address;\\n    using Strings for uint256;\\n\\n    // Token name\\n    string private _name;\\n\\n    // Token symbol\\n    string private _symbol;\\n\\n    // Mapping from token ID to owner address\\n    mapping(uint256 => address) private _owners;\\n\\n    // Mapping owner address to token count\\n    mapping(address => uint256) private _balances;\\n\\n    // Mapping from token ID to approved address\\n    mapping(uint256 => address) private _tokenApprovals;\\n\\n    // Mapping from owner to operator approvals\\n    mapping(address => mapping(address => bool)) private _operatorApprovals;\\n\\n    /**\\n     * @dev Initializes the contract by setting a `name` and a `symbol` to the token collection.\\n     */\\n    constructor(string memory name_, string memory symbol_) {\\n        _name = name_;\\n        _symbol = symbol_;\\n    }\\n\\n    /**\\n     * @dev See {IERC165-supportsInterface}.\\n     */\\n    function supportsInterface(bytes4 interfaceId) public view virtual override(ERC165, IERC165) returns (bool) {\\n        return\\n            interfaceId == type(IERC721).interfaceId ||\\n            interfaceId == type(IERC721Metadata).interfaceId ||\\n            super.supportsInterface(interfaceId);\\n    }\\n\\n    /**\\n     * @dev See {IERC721-balanceOf}.\\n     */\\n    function balanceOf(address owner) public view virtual override returns (uint256) {\\n        require(owner != address(0), \\\"ERC721: balance query for the zero address\\\");\\n        return _balances[owner];\\n    }\\n\\n    /**\\n     * @dev See {IERC721-ownerOf}.\\n     */\\n    function ownerOf(uint256 tokenId) public view virtual override returns (address) {\\n        address owner = _owners[tokenId];\\n        require(owner != address(0), \\\"ERC721: owner query for nonexistent token\\\");\\n        return owner;\\n    }\\n\\n    /**\\n     * @dev See {IERC721Metadata-name}.\\n     */\\n    function name() public view virtual override returns (string memory) {\\n        return _name;\\n    }\\n\\n    /**\\n     * @dev See {IERC721Metadata-symbol}.\\n     */\\n    function symbol() public view virtual override returns (string memory) {\\n        return _symbol;\\n    }\\n\\n    /**\\n     * @dev See {IERC721Metadata-tokenURI}.\\n     */\\n    function tokenURI(uint256 tokenId) public view virtual override returns (string memory) {\\n        require(_exists(tokenId), \\\"ERC721Metadata: URI query for nonexistent token\\\");\\n\\n        string memory baseURI = _baseURI();\\n        return bytes(baseURI).length > 0 ? string(abi.encodePacked(baseURI, tokenId.toString())) : \\\"\\\";\\n    }\\n\\n    /**\\n     * @dev Base URI for computing {tokenURI}. If set, the resulting URI for each\\n     * token will be the concatenation of the `baseURI` and the `tokenId`. Empty\\n     * by default, can be overriden in child contracts.\\n     */\\n    function _baseURI() internal view virtual returns (string memory) {\\n        return \\\"\\\";\\n    }\\n\\n    /**\\n     * @dev See {IERC721-approve}.\\n     */\\n    function approve(address to, uint256 tokenId) public virtual override {\\n        address owner = ERC721.ownerOf(tokenId);\\n        require(to != owner, \\\"ERC721: approval to current owner\\\");\\n\\n        require(\\n            _msgSender() == owner || isApprovedForAll(owner, _msgSender()),\\n            \\\"ERC721: approve caller is not owner nor approved for all\\\"\\n        );\\n\\n        _approve(to, tokenId);\\n    }\\n\\n    /**\\n     * @dev See {IERC721-getApproved}.\\n     */\\n    function getApproved(uint256 tokenId) public view virtual override returns (address) {\\n        require(_exists(tokenId), \\\"ERC721: approved query for nonexistent token\\\");\\n\\n        return _tokenApprovals[tokenId];\\n    }\\n\\n    /**\\n     * @dev See {IERC721-setApprovalForAll}.\\n     */\\n    function setApprovalForAll(address operator, bool approved) public virtual override {\\n        require(operator != _msgSender(), \\\"ERC721: approve to caller\\\");\\n\\n        _operatorApprovals[_msgSender()][operator] = approved;\\n        emit ApprovalForAll(_msgSender(), operator, approved);\\n    }\\n\\n    /**\\n     * @dev See {IERC721-isApprovedForAll}.\\n     */\\n    function isApprovedForAll(address owner, address operator) public view virtual override returns (bool) {\\n        return _operatorApprovals[owner][operator];\\n    }\\n\\n    /**\\n     * @dev See {IERC721-transferFrom}.\\n     */\\n    function transferFrom(\\n        address from,\\n        address to,\\n        uint256 tokenId\\n    ) public virtual override {\\n        //solhint-disable-next-line max-line-length\\n        require(_isApprovedOrOwner(_msgSender(), tokenId), \\\"ERC721: transfer caller is not owner nor approved\\\");\\n\\n        _transfer(from, to, tokenId);\\n    }\\n\\n    /**\\n     * @dev See {IERC721-safeTransferFrom}.\\n     */\\n    function safeTransferFrom(\\n        address from,\\n        address to,\\n        uint256 tokenId\\n    ) public virtual override {\\n        safeTransferFrom(from, to, tokenId, \\\"\\\");\\n    }\\n\\n    /**\\n     * @dev See {IERC721-safeTransferFrom}.\\n     */\\n    function safeTransferFrom(\\n        address from,\\n        address to,\\n        uint256 tokenId,\\n        bytes memory _data\\n    ) public virtual override {\\n        require(_isApprovedOrOwner(_msgSender(), tokenId), \\\"ERC721: transfer caller is not owner nor approved\\\");\\n        _safeTransfer(from, to, tokenId, _data);\\n    }\\n\\n    /**\\n     * @dev Safely transfers `tokenId` token from `from` to `to`, checking first that contract recipients\\n     * are aware of the ERC721 protocol to prevent tokens from being forever locked.\\n     *\\n     * `_data` is additional data, it has no specified format and it is sent in call to `to`.\\n     *\\n     * This internal function is equivalent to {safeTransferFrom}, and can be used to e.g.\\n     * implement alternative mechanisms to perform token transfer, such as signature-based.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` cannot be the zero address.\\n     * - `to` cannot be the zero address.\\n     * - `tokenId` token must exist and be owned by `from`.\\n     * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function _safeTransfer(\\n        address from,\\n        address to,\\n        uint256 tokenId,\\n        bytes memory _data\\n    ) internal virtual {\\n        _transfer(from, to, tokenId);\\n        require(_checkOnERC721Received(from, to, tokenId, _data), \\\"ERC721: transfer to non ERC721Receiver implementer\\\");\\n    }\\n\\n    /**\\n     * @dev Returns whether `tokenId` exists.\\n     *\\n     * Tokens can be managed by their owner or approved accounts via {approve} or {setApprovalForAll}.\\n     *\\n     * Tokens start existing when they are minted (`_mint`),\\n     * and stop existing when they are burned (`_burn`).\\n     */\\n    function _exists(uint256 tokenId) internal view virtual returns (bool) {\\n        return _owners[tokenId] != address(0);\\n    }\\n\\n    /**\\n     * @dev Returns whether `spender` is allowed to manage `tokenId`.\\n     *\\n     * Requirements:\\n     *\\n     * - `tokenId` must exist.\\n     */\\n    function _isApprovedOrOwner(address spender, uint256 tokenId) internal view virtual returns (bool) {\\n        require(_exists(tokenId), \\\"ERC721: operator query for nonexistent token\\\");\\n        address owner = ERC721.ownerOf(tokenId);\\n        return (spender == owner || getApproved(tokenId) == spender || isApprovedForAll(owner, spender));\\n    }\\n\\n    /**\\n     * @dev Safely mints `tokenId` and transfers it to `to`.\\n     *\\n     * Requirements:\\n     *\\n     * - `tokenId` must not exist.\\n     * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function _safeMint(address to, uint256 tokenId) internal virtual {\\n        _safeMint(to, tokenId, \\\"\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-ERC721-_safeMint-address-uint256-}[`_safeMint`], with an additional `data` parameter which is\\n     * forwarded in {IERC721Receiver-onERC721Received} to contract recipients.\\n     */\\n    function _safeMint(\\n        address to,\\n        uint256 tokenId,\\n        bytes memory _data\\n    ) internal virtual {\\n        _mint(to, tokenId);\\n        require(\\n            _checkOnERC721Received(address(0), to, tokenId, _data),\\n            \\\"ERC721: transfer to non ERC721Receiver implementer\\\"\\n        );\\n    }\\n\\n    /**\\n     * @dev Mints `tokenId` and transfers it to `to`.\\n     *\\n     * WARNING: Usage of this method is discouraged, use {_safeMint} whenever possible\\n     *\\n     * Requirements:\\n     *\\n     * - `tokenId` must not exist.\\n     * - `to` cannot be the zero address.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function _mint(address to, uint256 tokenId) internal virtual {\\n        require(to != address(0), \\\"ERC721: mint to the zero address\\\");\\n        require(!_exists(tokenId), \\\"ERC721: token already minted\\\");\\n\\n        _beforeTokenTransfer(address(0), to, tokenId);\\n\\n        _balances[to] += 1;\\n        _owners[tokenId] = to;\\n\\n        emit Transfer(address(0), to, tokenId);\\n    }\\n\\n    /**\\n     * @dev Destroys `tokenId`.\\n     * The approval is cleared when the token is burned.\\n     *\\n     * Requirements:\\n     *\\n     * - `tokenId` must exist.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function _burn(uint256 tokenId) internal virtual {\\n        address owner = ERC721.ownerOf(tokenId);\\n\\n        _beforeTokenTransfer(owner, address(0), tokenId);\\n\\n        // Clear approvals\\n        _approve(address(0), tokenId);\\n\\n        _balances[owner] -= 1;\\n        delete _owners[tokenId];\\n\\n        emit Transfer(owner, address(0), tokenId);\\n    }\\n\\n    /**\\n     * @dev Transfers `tokenId` from `from` to `to`.\\n     *  As opposed to {transferFrom}, this imposes no restrictions on msg.sender.\\n     *\\n     * Requirements:\\n     *\\n     * - `to` cannot be the zero address.\\n     * - `tokenId` token must be owned by `from`.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function _transfer(\\n        address from,\\n        address to,\\n        uint256 tokenId\\n    ) internal virtual {\\n        require(ERC721.ownerOf(tokenId) == from, \\\"ERC721: transfer of token that is not own\\\");\\n        require(to != address(0), \\\"ERC721: transfer to the zero address\\\");\\n\\n        _beforeTokenTransfer(from, to, tokenId);\\n\\n        // Clear approvals from the previous owner\\n        _approve(address(0), tokenId);\\n\\n        _balances[from] -= 1;\\n        _balances[to] += 1;\\n        _owners[tokenId] = to;\\n\\n        emit Transfer(from, to, tokenId);\\n    }\\n\\n    /**\\n     * @dev Approve `to` to operate on `tokenId`\\n     *\\n     * Emits a {Approval} event.\\n     */\\n    function _approve(address to, uint256 tokenId) internal virtual {\\n        _tokenApprovals[tokenId] = to;\\n        emit Approval(ERC721.ownerOf(tokenId), to, tokenId);\\n    }\\n\\n    /**\\n     * @dev Internal function to invoke {IERC721Receiver-onERC721Received} on a target address.\\n     * The call is not executed if the target address is not a contract.\\n     *\\n     * @param from address representing the previous owner of the given token ID\\n     * @param to target address that will receive the tokens\\n     * @param tokenId uint256 ID of the token to be transferred\\n     * @param _data bytes optional data to send along with the call\\n     * @return bool whether the call correctly returned the expected magic value\\n     */\\n    function _checkOnERC721Received(\\n        address from,\\n        address to,\\n        uint256 tokenId,\\n        bytes memory _data\\n    ) private returns (bool) {\\n        if (to.isContract()) {\\n            try IERC721Receiver(to).onERC721Received(_msgSender(), from, tokenId, _data) returns (bytes4 retval) {\\n                return retval == IERC721Receiver.onERC721Received.selector;\\n            } catch (bytes memory reason) {\\n                if (reason.length == 0) {\\n                    revert(\\\"ERC721: transfer to non ERC721Receiver implementer\\\");\\n                } else {\\n                    assembly {\\n                        revert(add(32, reason), mload(reason))\\n                    }\\n                }\\n            }\\n        } else {\\n            return true;\\n        }\\n    }\\n\\n    /**\\n     * @dev Hook that is called before any token transfer. This includes minting\\n     * and burning.\\n     *\\n     * Calling conditions:\\n     *\\n     * - When `from` and `to` are both non-zero, ``from``'s `tokenId` will be\\n     * transferred to `to`.\\n     * - When `from` is zero, `tokenId` will be minted for `to`.\\n     * - When `to` is zero, ``from``'s `tokenId` will be burned.\\n     * - `from` and `to` are never both zero.\\n     *\\n     * To learn more about hooks, head to xref:ROOT:extending-contracts.adoc#using-hooks[Using Hooks].\\n     */\\n    function _beforeTokenTransfer(\\n        address from,\\n        address to,\\n        uint256 tokenId\\n    ) internal virtual {}\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/security/PullPayment.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../utils/escrow/Escrow.sol\\\";\\n\\n/**\\n * @dev Simple implementation of a\\n * https://consensys.github.io/smart-contract-best-practices/recommendations/#favor-pull-over-push-for-external-calls[pull-payment]\\n * strategy, where the paying contract doesn't interact directly with the\\n * receiver account, which must withdraw its payments itself.\\n *\\n * Pull-payments are often considered the best practice when it comes to sending\\n * Ether, security-wise. It prevents recipients from blocking execution, and\\n * eliminates reentrancy concerns.\\n *\\n * TIP: If you would like to learn more about reentrancy and alternative ways\\n * to protect against it, check out our blog post\\n * https://blog.openzeppelin.com/reentrancy-after-istanbul/[Reentrancy After Istanbul].\\n *\\n * To use, derive from the `PullPayment` contract, and use {_asyncTransfer}\\n * instead of Solidity's `transfer` function. Payees can query their due\\n * payments with {payments}, and retrieve them with {withdrawPayments}.\\n */\\nabstract contract PullPayment {\\n    Escrow private immutable _escrow;\\n\\n    constructor() {\\n        _escrow = new Escrow();\\n    }\\n\\n    /**\\n     * @dev Withdraw accumulated payments, forwarding all gas to the recipient.\\n     *\\n     * Note that _any_ account can call this function, not just the `payee`.\\n     * This means that contracts unaware of the `PullPayment` protocol can still\\n     * receive funds this way, by having a separate account call\\n     * {withdrawPayments}.\\n     *\\n     * WARNING: Forwarding all gas opens the door to reentrancy vulnerabilities.\\n     * Make sure you trust the recipient, or are either following the\\n     * checks-effects-interactions pattern or using {ReentrancyGuard}.\\n     *\\n     * @param payee Whose payments will be withdrawn.\\n     */\\n    function withdrawPayments(address payable payee) public virtual {\\n        _escrow.withdraw(payee);\\n    }\\n\\n    /**\\n     * @dev Returns the payments owed to an address.\\n     * @param dest The creditor's address.\\n     */\\n    function payments(address dest) public view returns (uint256) {\\n        return _escrow.depositsOf(dest);\\n    }\\n\\n    /**\\n     * @dev Called by the payer to store the sent amount as credit to be pulled.\\n     * Funds sent in this way are stored in an intermediate {Escrow} contract, so\\n     * there is no danger of them being spent before withdrawal.\\n     *\\n     * @param dest The destination address of the funds.\\n     * @param amount The amount to transfer.\\n     */\\n    function _asyncTransfer(address dest, uint256 amount) internal virtual {\\n        _escrow.deposit{value: amount}(dest);\\n    }\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/access/Ownable.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../utils/Context.sol\\\";\\n\\n/**\\n * @dev Contract module which provides a basic access control mechanism, where\\n * there is an account (an owner) that can be granted exclusive access to\\n * specific functions.\\n *\\n * By default, the owner account will be the one that deploys the contract. This\\n * can later be changed with {transferOwnership}.\\n *\\n * This module is used through inheritance. It will make available the modifier\\n * `onlyOwner`, which can be applied to your functions to restrict their use to\\n * the owner.\\n */\\nabstract contract Ownable is Context {\\n    address private _owner;\\n\\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\\n\\n    /**\\n     * @dev Initializes the contract setting the deployer as the initial owner.\\n     */\\n    constructor() {\\n        _setOwner(_msgSender());\\n    }\\n\\n    /**\\n     * @dev Returns the address of the current owner.\\n     */\\n    function owner() public view virtual returns (address) {\\n        return _owner;\\n    }\\n\\n    /**\\n     * @dev Throws if called by any account other than the owner.\\n     */\\n    modifier onlyOwner() {\\n        require(owner() == _msgSender(), \\\"Ownable: caller is not the owner\\\");\\n        _;\\n    }\\n\\n    /**\\n     * @dev Leaves the contract without owner. It will not be possible to call\\n     * `onlyOwner` functions anymore. Can only be called by the current owner.\\n     *\\n     * NOTE: Renouncing ownership will leave the contract without an owner,\\n     * thereby removing any functionality that is only available to the owner.\\n     */\\n    function renounceOwnership() public virtual onlyOwner {\\n        _setOwner(address(0));\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Can only be called by the current owner.\\n     */\\n    function transferOwnership(address newOwner) public virtual onlyOwner {\\n        require(newOwner != address(0), \\\"Ownable: new owner is the zero address\\\");\\n        _setOwner(newOwner);\\n    }\\n\\n    function _setOwner(address newOwner) private {\\n        address oldOwner = _owner;\\n        _owner = newOwner;\\n        emit OwnershipTransferred(oldOwner, newOwner);\\n    }\\n}\\n\"\r\n    }\r\n  },\r\n  \"settings\": {\r\n    \"remappings\": [],\r\n    \"optimizer\": {\r\n      \"enabled\": true,\r\n      \"runs\": 200\r\n    },\r\n    \"evmVersion\": \"london\",\r\n    \"libraries\": {},\r\n    \"outputSelection\": {\r\n      \"*\": {\r\n        \"*\": [\r\n          \"evm.bytecode\",\r\n          \"evm.deployedBytecode\",\r\n          \"devdoc\",\r\n          \"userdoc\",\r\n          \"metadata\",\r\n          \"abi\"\r\n        ]\r\n      }\r\n    }\r\n  }\r\n}}","ABI":"[{\"inputs\":[{\"internalType\":\"address\",\"name\":\"governanceAddress\",\"type\":\"address\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"inputs\":[],\"name\":\"bank\",\"outputs\":[{\"internalType\":\"contract Bank\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"combinedWithdraw\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getCombinedBalance\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"governance\",\"outputs\":[{\"internalType\":\"contract Governance\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"market\",\"outputs\":[{\"internalType\":\"contract Market\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"bankAddress\",\"type\":\"address\"}],\"name\":\"setBankAddress\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"marketAddress\",\"type\":\"address\"}],\"name\":\"setMarketAddress\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}]","ContractName":"Account","CompilerVersion":"v0.8.9+commit.e5eed63a","OptimizationUsed":"1","Runs":"200","ConstructorArguments":"000000000000000000000000e609cd7cd8b7ad086a6f781f753641da7ae0e956","EVMVersion":"Default","Library":"","LicenseType":"","Proxy":"0","Implementation":"","SwarmSource":""}]}