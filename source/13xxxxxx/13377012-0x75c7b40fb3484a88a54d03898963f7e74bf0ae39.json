{"status":"1","message":"OK","result":[{"SourceCode":"{{\r\n  \"language\": \"Solidity\",\r\n  \"sources\": {\r\n    \"forrest.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\r\\npragma solidity ^0.8.2;\\r\\n\\r\\nimport \\\"@openzeppelin/contracts/token/ERC721/ERC721.sol\\\";\\r\\nimport \\\"@openzeppelin/contracts/token/ERC721/extensions/ERC721Enumerable.sol\\\";\\r\\nimport \\\"@openzeppelin/contracts/access/Ownable.sol\\\";\\r\\nimport \\\"@openzeppelin/contracts/utils/Counters.sol\\\";\\r\\nimport \\\"@openzeppelin/contracts/utils/math/SafeMath.sol\\\";\\r\\n\\r\\ncontract MysticForest is ERC721, ERC721Enumerable, Ownable {\\r\\n    using Counters for Counters.Counter;\\r\\n    using SafeMath for uint256;\\r\\n\\r\\n    Counters.Counter private _tokenIdCounter;\\r\\n    uint256 private tokenPrice = 30000000000000000; //0.03 ETH\\r\\n    uint256 private constant nftsNumber = 3333;\\r\\n\\r\\n    constructor() ERC721(\\\"Mystic Forest\\\", \\\"MFS\\\") {\\r\\n        _tokenIdCounter.increment();\\r\\n    }\\r\\n     \\r\\n    function safeMint(address to) public onlyOwner {\\r\\n        _safeMint(to, _tokenIdCounter.current());\\r\\n        _tokenIdCounter.increment();\\r\\n    }\\r\\n\\r\\n    function _beforeTokenTransfer(address from, address to, uint256 tokenId)\\r\\n        internal\\r\\n        override(ERC721, ERC721Enumerable)\\r\\n    {\\r\\n        super._beforeTokenTransfer(from, to, tokenId);\\r\\n    }\\r\\n\\r\\n    function supportsInterface(bytes4 interfaceId)\\r\\n        public\\r\\n        view\\r\\n        override(ERC721, ERC721Enumerable)\\r\\n        returns (bool)\\r\\n    {\\r\\n        return super.supportsInterface(interfaceId);\\r\\n    }\\r\\n    \\r\\n    function random(string memory input) internal pure returns (uint256) {\\r\\n        return uint256(keccak256(abi.encodePacked(input)));\\r\\n    }\\r\\n    \\r\\n    function toHashCode(uint256 value) internal pure returns (string memory) {\\r\\n        uint256 i;\\r\\n\\r\\n        bytes memory buffer = \\\"000000\\\";\\r\\n        for(i=6;i>0;i--) {\\r\\n            if (value % 16 < 10)\\r\\n                buffer[i-1] = bytes1(uint8(48 + uint256(value % 16)));\\r\\n            else\\r\\n                buffer[i-1] = bytes1(uint8(55 + uint256(value % 16)));\\r\\n\\r\\n            value /= 16;\\r\\n        }\\r\\n        return string(buffer);\\r\\n    }\\r\\n    \\r\\n    \\r\\n    function getSun(uint256 num) internal pure returns (string memory) {\\r\\n        uint256 suns;\\r\\n\\r\\n        suns = 733410643314582114512314603012454017743510734712492414;\\r\\n\\r\\n        if (num > 0)\\r\\n            suns = suns / (100 ** (num*3));\\r\\n\\r\\n        return string(abi.encodePacked('cx=\\\"',toString(10*((suns/10000)%100)),'\\\" cy=\\\"',toString(10*((suns/100)%100)),  '\\\" r=\\\"',toString(10*(suns%100)),'\\\"'));\\r\\n    }\\r\\n\\r\\n    function toString(uint256 value) internal pure returns (string memory) {\\r\\n        if (value == 0) {\\r\\n            return \\\"0\\\";\\r\\n        }\\r\\n        uint256 temp = value;\\r\\n        uint256 digits;\\r\\n        while (temp != 0) {\\r\\n            digits++;\\r\\n            temp /= 10;\\r\\n        }\\r\\n        bytes memory buffer = new bytes(digits);\\r\\n        while (value != 0) {\\r\\n            digits -= 1;\\r\\n            buffer[digits] = bytes1(uint8(48 + uint256(value % 10)));\\r\\n            value /= 10;\\r\\n        }\\r\\n        return string(buffer);\\r\\n    }\\r\\n    \\r\\n    function toStringSgn(int256 value) internal pure returns (string memory) {\\r\\n        if (value == 0) {\\r\\n            return \\\"0\\\";\\r\\n        }\\r\\n        int256 temp = value >= 0 ? value : -value;\\r\\n        uint256 digits;\\r\\n        while (temp != 0) {\\r\\n            digits++;\\r\\n            temp /= 10;\\r\\n        }\\r\\n        if (value < 0) {\\r\\n            digits++;\\r\\n        }\\r\\n        bytes memory buffer = new bytes(digits);\\r\\n        if (value < 0) {\\r\\n            //digits -= 1;\\r\\n            value = -value;\\r\\n            buffer[0] = bytes1(uint8(45));\\r\\n        }\\r\\n        \\r\\n        while (value != 0) {\\r\\n            digits -= 1;\\r\\n            buffer[digits] = bytes1(uint8(48 + uint256(value % 10)));\\r\\n            value /= 10;\\r\\n        }\\r\\n        \\r\\n        return string(buffer);\\r\\n    }\\r\\n    \\r\\n    function getPoints(uint256 num, uint256 dir) public pure returns (string memory ) {\\r\\n        uint256[181]memory xtypes =[\\r\\n            451793160510049142483918980479775049983908311004982111838287590179673737989,\\r\\n            14118699526057964743410206948092109528394018437505512525414365549665044271,\\r\\n            2990036367364346621795866131653571121699026289141046,\\r\\n            2846959607925562073345508372401376781316743025224824348287758227432596905387,\\r\\n            2992194365839321942769086036007447618697968584327369,\\r\\n            3753734288543931459086705196516412049375550376183621772483166746286184606530,\\r\\n            3597369614550173525007166796257012767273641370844282701925507925543792285476,\\r\\n            3075761135342858797770537856738277071188091692804336596343286722299200667402,\\r\\n            3271440244353497429621230532185176914974600625852871336223639350182882160947,\\r\\n            3567277993316903498903678063180104354953965719249179472654654856748081471205,\\r\\n            14116380865331896385391450086178179633152641401541680509438725334071115455,\\r\\n            2928482646864365553151142455467482501976710809299108047461350705223466036572,\\r\\n            3821675339075292395182255302395855070914232488246053891403721248044174656656,\\r\\n            3115984019240715960323244328181115455415043147489357163259133709542708861632,\\r\\n            3244496427842502701626018574735712370044808469909759174473139369101112483559,\\r\\n            2987353119357672916579205987982357504557173396589332,\\r\\n            2324379648625379036385613574183488699472078952337521869568077904426458695082,\\r\\n            1217389987403007936526409203484901692820865472055694339022933326868434208476,\\r\\n            2417010777913069026691127,\\r\\n            3441913708957137518381877344345889930126595129725057885264505170531043574126,\\r\\n            2917600651716002271669893996375613785659812323984791490780495802912166578946,\\r\\n            3708293718636760152364718089342064469940324999664627799228079694530507806907,\\r\\n            14110665356844149303507105224900996936092881811303175606715491365591308984,\\r\\n            3158444373777377413788230076701033876397915336301543208713906208600121680810,\\r\\n            2817275567468375932596139929010515239344556343459808531647085207214086288099,\\r\\n            6033198342414225328300838243277501079158001050375815138405344997606103814822,\\r\\n            511,\\r\\n            2720100494981947149539386702781528929757544005649907703010181904670973973504,\\r\\n            2408277705204458091040044302132094573526111473190295366598038857750651699947,\\r\\n            14107169532839929700752091609538676282944105693729639298668804927339193532,\\r\\n            1221861636475146439091757024136704920792770829275233582034370279380946780480,\\r\\n            1929745078649056008424622866595262801745570856914548905876583021709899361596,\\r\\n            4191612511679389882886921941088289735083347780575901480897275437039305163532,\\r\\n            4343672155361759899968976175801058502330943465806784759312473237134593393414,\\r\\n            3566948221669800087678086064374772626813770766313968875691818267877922725523,\\r\\n            2844054930834458621500612357249982365132495895267457727130737277089430495386,\\r\\n            2831495325425439623070653177758459898886181703506414534104480167890488760425,\\r\\n            1939784730250891792929893416777521507641579746635591985114370828684217120906,\\r\\n            710500672182797626540852971474592761735170912982147831611021980890913641100,\\r\\n            669528245421993200021192424975553018500427455508620586550532192993530410145,\\r\\n            2786907874801123243278384440540569289884967736012447883743896884908079991958,\\r\\n            783107716654838027593076735110698867723631140942751048784,\\r\\n            1223742098789066363086146454490327367432992460366389926123382679180957712679,\\r\\n            2989461533470413134394949618378485716466310952657952709026655806765503873313,\\r\\n            4078587196827700236148252441598457738652016331251713638460871880042585108753,\\r\\n            4093662014144226772182022731933318239401904060323200219570934945711682620714,\\r\\n            4418350303103987658838040236072521517526306626247445323272330839020818545973,\\r\\n            4643374242505799556552622217641105384457783205137552427483606424730257476378,\\r\\n            4486704919427852534038064683873585202257802529007438651353378708385046889726,\\r\\n            4499817856359707397730280519483643102692499149107402831319735562894054958274,\\r\\n            4485047847576554290163471944750006657681399132671410856687041433809695181498,\\r\\n            3339683520300060376447863508244732503262915016529560249180018002256610357913,\\r\\n            4314878010312732853382723482941746333872906915161246828553891387663095579798,\\r\\n            4074365359127156374762978298570824350410250584226094189806368457852740328077,\\r\\n            2436326669430798195291140631745346883464912839142971982342415690991918792828,\\r\\n            2844633605229433334766034265509774244631325963311003701214089162068265098949,\\r\\n            6021414796764815790125087145808661297551719617535403347668275848711477729927,\\r\\n            35115764503978,\\r\\n            2294397700659397197699685406473997836554794841367326523950238727322888134340,\\r\\n            2025283187394261770417930627778433871681276905838016306264739971388040888997,\\r\\n            2139603985908275075394494527883218115071698703519051893093505600987932723858,\\r\\n            1602149956337663419398244079233223101532761471563090164321742541338988053665,\\r\\n            738518038087913997980297120834578920434720559540340738145828685906757868759,\\r\\n            1021903637670771945756436204332950418418658165449833330825908986328191100032,\\r\\n            680321428688133661527588016944122147941545355974128538876479717265524186287,\\r\\n            2913459048355080754922760102631198697031511036604646793395992893426023029303,\\r\\n            3479130709408447676265801231112877966675791703322346548396001197341351923258,\\r\\n            3253854748105555120936084797666487228976513545459761200829578045966826558534,\\r\\n            1699189092874344557865822570537512574159152442335308490674709866561864328806,\\r\\n            667400986628054122756790148927330777523787572677566916314191737094336736856,\\r\\n            2873236813626440676171292303262262666143114256158109036142099440858322466905,\\r\\n            2463849106514764934759999084079940125420965362783417301190030635058228465285,\\r\\n            205438914033105927166860879746299341319617056510616058071714482,\\r\\n            1038298747581850190237060263176966035035230656825643754185710646059835386620,\\r\\n            3732457000988826922007756981740258362491522747964965354310174111752044251,\\r\\n            3438103229906894537734127924212645170137014733982627380114740921114531725405,\\r\\n            6026623316013678363917195968975149767749651216939496676609297726456481298556,\\r\\n            2241115314331019743849717121383702017708454573017073812756468592096814519488,\\r\\n            2681337874473351023978523739001495494271733781408597532984622975686384632096,\\r\\n            2001763240303821190799393538957491125291823459084909037776275767301748935526,\\r\\n            783413015098298932391713953208811102504075259788668508482,\\r\\n            2776969648718084143666140509500198189279833454686509566456828797242640011984,\\r\\n            2414986924677709585549545,\\r\\n            2464981860802702008248797613075615501215516799470075317970249081860416421077,\\r\\n            2790303763375407904938366532926037490714110175281242670150366813065796212937,\\r\\n            2465617633008893670180232371899505684333818314842213059041399293168815016146,\\r\\n            11401324657414517125554847765234191730741173982,\\r\\n            2007586617321629222923565623524787798034647400175032804774855609950202812116,\\r\\n            1672990505318255906211175434427645236074840599879267478213906817477142731280,\\r\\n            9209241678118184635,\\r\\n            3468278804203466157829532655206811853319359876474512079669760097188562518207,\\r\\n            3368092997782354757286082990925204154758011631855831233655982736879923093696,\\r\\n            3466927620119320294039074189203980316785782842647169496311690405307103440018,\\r\\n            5997944131679293691663553390168068182099797190984646160656605843082062729358,\\r\\n            166052324687270284571457507386895010,\\r\\n            3085920706480894367934793525780658400280345745353555300919491971404221773981,\\r\\n            3381923554997078344785988371461154782062075902541709693502099696739921014948,\\r\\n            3325992182572119952955425236755568253968694395336855696455540407431783377038,\\r\\n            3580226521759520107286065368001833307388687503078515293404116916742493691037,\\r\\n            9214447060903921835,\\r\\n            1264984556772872115799239535623524884253620648193824583495524875928754752372,\\r\\n            1518694096269015099096880765822086114228988044590962307891613193926223639292,\\r\\n            14108292701559715841792991169612211414500920245362129234577009518961809647,\\r\\n            4402309342509142896983013934442726920810334999082253451627659966777804363614,\\r\\n            5166666755085030868803444639761683845012503598362881109034321078214982796000,\\r\\n            5209789353333249880387445761925302865630999691231556305081968356544667639561,\\r\\n            4687711984736242421744479873093886204824147798593512993564205989451328829754,\\r\\n            633401437854182220628048116557,\\r\\n            4160112497456759832337992694410202976874104741130252497257247851041788420278,\\r\\n            3891799183155487259340119950380455072303927206702853094379188893373129184420,\\r\\n            4032319059663099998613520512820426697785970979928996764016646343459105024168,\\r\\n            6009124949811886177795131206969081357356598945839022389523915066407043351690,\\r\\n            4372824752384694282188496870332751107712575766430818661088545374422765321323,\\r\\n            511,\\r\\n            4572783505867648305281967398068273625119110075055536844749714995321564755266,\\r\\n            4911328827335463014379332819972782815283711440757324548670808260875358996733,\\r\\n            4954975634469296598514925777471018546955821345030274703468035996303540008180,\\r\\n            9218679515535855434,\\r\\n            3452321906512025464371802897836094518801199388935465272003231966772078459556,\\r\\n            3748795261402758157788885492974445466658083400195392878155357454986132445816,\\r\\n            3693223752333072151459562658612960597342516520193788012145779387957259162222,\\r\\n            166100478298923491154776583125472921,\\r\\n            4106912717246667397226625890641599430529090592382302926370216293486154887481,\\r\\n            3908087369193035517127117204590882787971039887165197271342261232177579172126,\\r\\n            4019730387115211301930848795814057164513472405301479405129673201161948762874,\\r\\n            4018018908936592607058282959488975987548663007885063821141157517257090944708,\\r\\n            4089300309602240007959434644505762866602904250751726411778648112543795920524,\\r\\n            4315071312289070109850147802022436970240917711138035951472706131873335498401,\\r\\n            4725202305958257607474266791898393255878424154030894468088061083124026994324,\\r\\n            4683680110174487984206714084092740316576662890866513069791112855826925306027,\\r\\n            4457910940450972001776820480444395513452836462258651691797388206013323572411,\\r\\n            5914901893015460913288455038769590541213807873541693763162803986498813334735,\\r\\n            5873017302155366219580613819295633263556778663954408054822111840194936602855,\\r\\n            4785246056814329393415455871264870088767110637544142448838340819902228544776,\\r\\n            53873736278750663526986526463830033766076938107653441239559073616152,\\r\\n            3961230583850472195613434616701520650168113370266317092807283110795912059980,\\r\\n            4159974300347659916450908224181423693787057029892764815291476147123686097536,\\r\\n            4696849232163410979886557344830309530276030548981272388554922402907907053214,\\r\\n            4555252517360058801235317977916661134159115037001481971805637241651654724760,\\r\\n            4555280178158998160895654468742184453035832431543937761396878704524961674893,\\r\\n            4682797599279848964386326277705955728837885892369600134905466615452314795661,\\r\\n            2991124662820466729985366582785995318337604215546002,\\r\\n            4094794229538461950196996980986282399454829575579897639099107199351723801495,\\r\\n            4488498896934177163671566746299360720998703618133128471784444635917868747625,\\r\\n            4870470494855650238260992884771850191437967751124123170685490486885430760267,\\r\\n            4996414205762082127019268313479351099601209822643463938109046716488425055526,\\r\\n            4374315480207661070076200965843976990402875250847505604199786248963436759813,\\r\\n            4993487853199467340812965741758286970078604087317064681517188962153421756119,\\r\\n            4611709501646942332033416691737330215799267808709507583702922506831535976105,\\r\\n            4553457678274957529173455164972517555198985209347470674437518245996323048065,\\r\\n            3983655792221959106678542874491535023802240994398748708194091973432699153987,\\r\\n            511,\\r\\n            2751764049184355665970427661834368826893000635972708917258254524379653095834,\\r\\n            3996762043688216515082017709646178332496394459296666445946293863156097062241,\\r\\n            3854557703404383100840836971486404259590598414489461376417567508339986407800,\\r\\n            3401413784224831724878919757846841118321199606089710978620901144409073395044,\\r\\n            4419424766817352224692370267239741687023769241515970830156920086838702632782,\\r\\n            3669119147830135099252246142986051209252166546386211128736251135120952430949,\\r\\n            4036708964316911879340196539985070616330457410477349779590474447422696063757,\\r\\n            4786904208120125539628028421123318453534542575865124491913205630904344135979,\\r\\n            4927010409629265575240327547968006977797442604613099202290221307456865605964,\\r\\n            4530848496956884285912366022076978316699445255927116468642440159401239554349,\\r\\n            4897830200248151060304598534559494633163927757987279030443661669629025228570,\\r\\n            4982141284371903555041559258627467217052791415694756268205937693649074559228,\\r\\n            5051104011357210160921999575117301746262595505134723231406126068278101469919,\\r\\n            4428758230533668701111108424422998856252086733747575715414198910256133618362,\\r\\n            4555916003654641992253243995961629462190195338819898436721465933797476443822,\\r\\n            4922316665112551244551227182538960607585056393399270553803496721819810573972,\\r\\n            4526017686709248224619740044776819724367225939391434944440434506284260568183,\\r\\n            3904388555610503058690726102571162509580816304148758661208200338363226694753,\\r\\n            4610329741180249610163619688882547569496715425741848059399482580093453349996,\\r\\n            4369816174511426972967861755239262887278514684876866413910128789616023209563,\\r\\n            3677346549089972577976174802446580897876944132670129399346325781540561909838,\\r\\n            3408261474405718409088466451838629603401564969655245534647691783341921921622,\\r\\n            165976556783559723167202694497953337,\\r\\n            2990235126345283631822877804924730718839988305133692,\\r\\n            43513319658703679254636568203538827443336,\\r\\n            43522980609105388572596600985827531712216,\\r\\n            43522146275689570242343825481909074813128,\\r\\n            11408759685182567224012020944406186655893315218,\\r\\n            11408934930604125130349902336635238117986951321\\r\\n            ];\\r\\n        uint256 i;\\r\\n        uint256 first_index;\\r\\n        uint256 cur_num;\\r\\n        uint256 k;\\r\\n        int256 dir_y;\\r\\n        uint256 pos;\\r\\n        string memory res;\\r\\n        uint256 result;\\r\\n        \\r\\n        first_index = num < 3 ? num+1 :  (xtypes[0] / (256 ** (num-3)))%256;\\r\\n        \\r\\n        if (dir==1)\\r\\n            dir_y = 140;\\r\\n        else\\r\\n            dir_y = 900;\\r\\n        res = '';\\r\\n    \\r\\n        for(i = first_index; i<=181; i++) {\\r\\n            if (xtypes[i] == 0)\\r\\n                break;\\r\\n    \\r\\n            cur_num= xtypes[i];    \\r\\n            k=0;\\r\\n            for(pos=0;pos<=27;pos++) {\\r\\n                result = (cur_num /  (512 ** pos)) % 512;\\r\\n                if (result == 511)\\r\\n                    break;\\r\\n    \\r\\n                if (k%2 == 0) {\\r\\n                    if (dir==1)\\r\\n                        res = string(abi.encodePacked(res, toStringSgn(int256((result*3))-140), ','));\\r\\n                    else\\r\\n                        res = string(abi.encodePacked(res, toStringSgn(1250-int256((result*3))), ','));\\r\\n\\r\\n                }\\r\\n                else {\\r\\n                    res = string(abi.encodePacked(res, toStringSgn(int256((result*3*dir))-dir_y), ' '));\\r\\n\\r\\n                }\\r\\n                k++;\\r\\n             }   \\r\\n            if (result == 511)\\r\\n                break;\\r\\n        }\\r\\n\\r\\n        return res;\\r\\n    }\\r\\n    \\r\\n    function tokenURI(uint256 tokenId) pure public override(ERC721)  returns (string memory) {\\r\\n        uint256[19] memory xtypes;\\r\\n        string[5] memory colors;\\r\\n\\r\\n        string[15] memory parts;\\r\\n        uint256[12] memory params;\\r\\n\\r\\n        uint256 pos;\\r\\n\\r\\n        uint256 rand = random(string(abi.encodePacked('Forest',toString(tokenId))));\\r\\n\\r\\n        params[0] = 1 + (rand % 36); // pallette=\\r\\n        params[1] = 1 + ((rand/100) % 9);// mount\\r\\n        params[2] = 1 + ((rand/1000) % 2); // savanna\\r\\n        params[3] = 1 + ((rand/10000) % 2); // tree1\\r\\n        params[4] = 1 + ((rand/100000) % 2); // tree2\\r\\n        params[5] = 1 + ((rand/1000000) % 9); // animal\\r\\n        params[6] = 1 + ((rand/10000000) % 9); // monster\\r\\n        params[7] = 1 + ((rand/100000000) % 2); // grass\\r\\n        params[8] = 1 + ((rand/1000000000) % 9); // sun\\r\\n        params[9] = 1 + ((rand/10000000000) % 20); // METEOR\\r\\n        if (((rand/10000000000) % 20) == 1) // rare palette\\r\\n            params[0] = 37 + params[0]%2;\\r\\n\\r\\n        xtypes[0] = 1380184997384756203389348097935548270238418335313894369135963045576512;\\r\\n        xtypes[1] = 83202958701067158272510542586996495922438516550026878711368311707271070;\\r\\n        xtypes[2] = 110890097058345544686991556799584296435994298503832019423597570805434368;\\r\\n        xtypes[3] = 124747513234871200025641583470717623407926130169324315491794011723611968;\\r\\n        xtypes[4] = 172545869938643596635233103058992932872987519665270880114754418406014784;\\r\\n        xtypes[5] = 62901452128639038462844002121514286276591308821405480058892378347355968;\\r\\n        xtypes[6] = 6906312258075195189521669129432903118929838785118276903637969883103134;\\r\\n        xtypes[7] = 34644103446304817287021645401906549158943647054285149371488762479984448;\\r\\n        xtypes[8] = 460428004036880295485476712922934712833987410898445681727580956905712;\\r\\n        xtypes[9] = 165644650256154674906236099093466854341981357834224037341526031155019069;\\r\\n        xtypes[10] = 568830213016122120965376512587328509977555256782756811911715291660190;\\r\\n        xtypes[11] = 408475849166444685717692499863891921759522907256683076899882642964479;\\r\\n        xtypes[12] = 138036611714692334195370901026278071274391887700961563656694752681606976;\\r\\n        xtypes[13] = 138036611664120373689974417613175875397870210537061667156895429971376248;\\r\\n        xtypes[14] = 164484919190898338221032560993011736145912193578603571776097733172223;\\r\\n        xtypes[15] = 262270363244384067749521393870671431072564228073668465975395327494012736;\\r\\n        xtypes[16] = 372697461957250082012985360966108567877767279094447770984938832788406080;\\r\\n        xtypes[17] = 404941104510058468213265706796467786427704521430213011681667002136491;\\r\\n        xtypes[18] = 33834578429608361535043529526350847219631511783612495748003004329;\\r\\n\\r\\n        if (params[9] <= 7) {\\r\\n            for(pos=0;pos<1+params[9]/2;pos++) {\\r\\n                parts[14] = string(abi.encodePacked(parts[14], '<circle opacity=\\\"0.4\\\" fill=\\\"#FFFF9E\\\" cx=\\\"',toString(400 + pos*150),'\\\" cy=\\\"-',toString((69+pos*200)%275),'\\\" r=\\\"4\\\"/>'));\\r\\n            }\\r\\n            parts[14] = string(abi.encodePacked('<g>',parts[14],'<animateMotion path=\\\"M 0 0 l ',(params[9]%2==0?'':'-'),'10000 10000 20 Z\\\" dur=\\\"20s\\\" repeatCount=\\\"indefinite\\\" /> </g>'));\\r\\n        }\\r\\n    \\r\\n        pos = (params[0]-1) * 5;\\r\\n        colors[0] = toHashCode(xtypes[pos/10] / (16777216 ** (pos%10)) % 16777216);\\r\\n    \\r\\n        pos = (params[0]-1) * 5 + 1;\\r\\n        colors[1] = toHashCode(xtypes[pos/10] / (16777216 ** (pos%10)) % 16777216);\\r\\n        \\r\\n        pos = (params[0]-1) * 5 + 2;\\r\\n        colors[4] = toHashCode(xtypes[pos/10] / (16777216 ** (pos%10)) % 16777216);\\r\\n        \\r\\n        pos = (params[0]-1) * 5 + 3;\\r\\n        colors[3] = toHashCode(xtypes[pos/10] / (16777216 ** (pos%10)) % 16777216);\\r\\n        \\r\\n        pos = (params[0]-1) * 5 + 4;\\r\\n        colors[2] = toHashCode(xtypes[pos/10] / (16777216 ** (pos%10)) % 16777216);\\r\\n        \\r\\n        parts[0] = '<?xml version=\\\"1.0\\\" encoding=\\\"utf-8\\\"?> <svg xmlns=\\\"http://www.w3.org/2000/svg\\\" x=\\\"0px\\\" y=\\\"0px\\\" width=\\\"1000px\\\" height=\\\"1000px\\\" viewBox=\\\"0 0 1000 1000\\\"> <linearGradient id=\\\"B\\\" gradientUnits=\\\"userSpaceOnUse\\\" x1=\\\"500\\\" y1=\\\"1000\\\" x2=\\\"500\\\" y2=\\\"0\\\"> <stop offset=\\\"0\\\" style=\\\"stop-color:#'; // 1\\r\\n        parts[1] = '\\\"/> <stop offset=\\\"0.5\\\" style=\\\"stop-color:#'; // 2\\r\\n        parts[2] = '\\\"/> <stop offset=\\\"1\\\" style=\\\"stop-color:#'; // 1\\r\\n        parts[3] = string(abi.encodePacked('\\\"/> </linearGradient> <rect fill=\\\"url(#B)\\\" width=\\\"1000\\\" height=\\\"1000\\\"/> <radialGradient id=\\\"S\\\" ',getSun(params[8]-1),' gradientUnits=\\\"userSpaceOnUse\\\"> <stop offset=\\\"0.75\\\" style=\\\"stop-color:#FFFF9E\\\"/> <stop offset=\\\"1\\\" style=\\\"stop-color:#')); // 2\\r\\n        parts[4] = string(abi.encodePacked('\\\"/> </radialGradient> <circle opacity=\\\"0.9\\\" fill=\\\"url(#S)\\\" ',getSun(params[8]-1),'/> ',parts[14], '<polygon opacity=\\\"0.14\\\" fill=\\\"#')); // 3\\r\\n        parts[5] = string(abi.encodePacked('\\\" points=\\\"',getPoints(0+params[1]-1,1),'\\\"/> <polygon opacity=\\\"0.6\\\" fill=\\\"#')); // 3\\r\\n        parts[6] = string(abi.encodePacked('\\\" points=\\\"',getPoints(9+params[2]-1,1),'\\\"/> <polygon fill=\\\"#')); // 3\\r\\n        parts[7] = string(abi.encodePacked('\\\" points=\\\"',getPoints(11+params[3]-1,1),'\\\"> <animateMotion path=\\\"M 0 0 l 15 20 l 12 15 Z\\\" dur=\\\"19s\\\" repeatCount=\\\"indefinite\\\" /> </polygon> <polygon fill=\\\"#')); // 3\\r\\n        parts[8] = string(abi.encodePacked('\\\" points=\\\"',getPoints(11+params[4]-1,2),'\\\"> <animateMotion path=\\\"M 0 0 l 15 19 l 13 14 Z\\\" dur=\\\"17s\\\" repeatCount=\\\"indefinite\\\" /> </polygon> <polygon fill=\\\"#')); // 3\\r\\n        parts[9] = string(abi.encodePacked('\\\" points=\\\"',getPoints(25+params[7]-1,1),'\\\"> <animateMotion path=\\\"M 0 0 l 10 0Z\\\" dur=\\\"16s\\\" repeatCount=\\\"indefinite\\\" /> </polygon>  <rect opacity=\\\"0\\\" fill=\\\"#')); // 3\\r\\n        parts[10] = string(abi.encodePacked('\\\" width=\\\"1000\\\" height=\\\"1100\\\">',(params[6]<=3 ? '<animate attributeName=\\\"opacity\\\" values=\\\"0;.3;.3;.4;.3;.3;0\\\" dur=\\\"10s\\\" repeatCount=\\\"1\\\" begin=\\\"monster.end-10\\\" restart=\\\"whenNotActive\\\" />' : ''),'</rect><g opacity=\\\"0\\\"> <polygon fill=\\\"#')); // 3\\r\\n        parts[11] = string(abi.encodePacked('\\\" points=\\\"',getPoints((params[6]<=3 ? 22 : 13)+params[(params[6]<=3 ? 6 : 5)]-1 ,1),'\\\"/> ')); // 3\\r\\n        if (params[6]<=3)\\r\\n            parts[12] = string(abi.encodePacked('<polygon fill=\\\"#',colors[0],'\\\" points=\\\"',getPoints(26+params[6]*2-1,1),'\\\"> <animate attributeName=\\\"opacity\\\" values=\\\"1;1;1;1;0;1;1;1;1;1;1;1;1;1;1;1;1;1;1;1;1\\\" dur=\\\"3s\\\" repeatCount=\\\"indefinite\\\" begin=\\\"0s\\\" /> </polygon> <polygon fill=\\\"#',colors[0],'\\\" points=\\\"',getPoints(26+params[6]*2,1),'\\\"> <animate attributeName=\\\"opacity\\\" values=\\\"1;1;1;1;0;1;1;1;1;1;1;1;1;1;1;1;1;1;1;1;1\\\" dur=\\\"3s\\\" repeatCount=\\\"indefinite\\\" begin=\\\"0s\\\" /> </polygon>')); // 3\\r\\n        else\\r\\n            parts[12] = '<rect opacity=\\\"0\\\" x=\\\"250\\\" y=\\\"250\\\" width=\\\"500\\\" height=\\\"500\\\"/>';\\r\\n        parts[13] = '<animate attributeName=\\\"opacity\\\" id=\\\"monster\\\" values=\\\"0;1;1;1;1;0\\\" dur=\\\"10s\\\" repeatCount=\\\"1\\\" begin=\\\"click\\\" restart=\\\"whenNotActive\\\" /><animate attributeName=\\\"opacity\\\" values=\\\"0;1;0;0;0;0;0;0\\\" dur=\\\"60s\\\" repeatCount=\\\"indefinite\\\" begin=\\\"30s\\\" end=\\\"monster.start\\\"/> <animateMotion path=\\\"M 0 0 l 0 -15Z\\\" dur=\\\"30s\\\" repeatCount=\\\"indefinite\\\" /> </g></svg>';\\r\\n                \\r\\n        string memory output = string(abi.encodePacked(parts[0],colors[4],parts[1],colors[3],parts[2]));\\r\\n        output = string(abi.encodePacked(output,colors[4],parts[3],colors[3],parts[4]));\\r\\n        output = string(abi.encodePacked(output,colors[2],parts[5],colors[2],parts[6]));\\r\\n        output = string(abi.encodePacked(output,colors[2],parts[7],colors[2],parts[8]));\\r\\n        output = string(abi.encodePacked(output,colors[2],parts[9],colors[2],parts[10]));\\r\\n        output = string(abi.encodePacked(output,colors[2],parts[11],parts[12],parts[13]));\\r\\n\\r\\n\\r\\n        \\r\\n        parts[0] = '[{ \\\"trait_type\\\": \\\"Far\\\", \\\"value\\\": \\\"';\\r\\n        parts[1] = toString(params[1]);\\r\\n        parts[2] = '\\\" }, { \\\"trait_type\\\": \\\"Palette\\\", \\\"value\\\": \\\"';\\r\\n        parts[3] = toString(params[0]);\\r\\n        parts[4] = '\\\" }, { \\\"trait_type\\\": \\\"Savanna\\\", \\\"value\\\": \\\"';\\r\\n        parts[5] = toString(params[7]*1000 + params[2] * 100 + params[3] * 10 + params[4]);\\r\\n        if (params[6]<=3) {\\r\\n            parts[6] = '\\\" }, { \\\"trait_type\\\": \\\"Monster\\\", \\\"value\\\": \\\"';\\r\\n            parts[7] = toString(params[6]);\\r\\n        } else {\\r\\n            parts[6] = '\\\" }, { \\\"trait_type\\\": \\\"Animal\\\", \\\"value\\\": \\\"';\\r\\n            parts[7] = toString(params[5]);\\r\\n        }\\r\\n        parts[8] = '\\\" }, { \\\"trait_type\\\": \\\"Sun\\\", \\\"value\\\": \\\"';\\r\\n        parts[9] = toString(params[8]);\\r\\n        if (params[9]<=7) {\\r\\n            parts[9] = string(abi.encodePacked(parts[9],'\\\" }, { \\\"trait_type\\\": \\\"Meteor\\\", \\\"value\\\": \\\"', toString(params[9])));\\r\\n        }\\r\\n        parts[10] = '\\\" }]';\\r\\n        \\r\\n        string memory strparams = string(abi.encodePacked(parts[0], parts[1], parts[2], parts[3], parts[4], parts[5]));\\r\\n        strparams = string(abi.encodePacked(strparams, parts[6], parts[7], parts[8], parts[9], parts[10]));\\r\\n\\r\\n\\r\\n\\r\\n        string memory json = Base64.encode(bytes(string(abi.encodePacked('{\\\"name\\\": \\\"Mystic Forest\\\", \\\"description\\\": \\\"Mystic Forest - interactive game, completely generated OnChain\\\",\\\"attributes\\\":', strparams, ', \\\"image\\\": \\\"data:image/svg+xml;base64,', Base64.encode(bytes(output)), '\\\"}'))));\\r\\n        output = string(abi.encodePacked('data:application/json;base64,', json));\\r\\n\\r\\n        return output;\\r\\n    }\\r\\n    \\r\\n    function claim() public  {\\r\\n        require(_tokenIdCounter.current() <= 300, \\\"No more free tokens\\\");\\r\\n        _safeMint(msg.sender, _tokenIdCounter.current());\\r\\n        _tokenIdCounter.increment();\\r\\n\\r\\n    }\\r\\n    \\r\\n    function withdraw() public onlyOwner {\\r\\n        uint balance = address(this).balance;\\r\\n        payable(msg.sender).transfer(balance);\\r\\n    }\\r\\n\\r\\n    function buyTokens(uint tokensNumber) public payable {\\r\\n        require(tokensNumber > 0, \\\"Wrong amount\\\");\\r\\n        require(tokensNumber <= 30, \\\"Not more 30\\\");\\r\\n        require(_tokenIdCounter.current().add(tokensNumber) <= nftsNumber, \\\"Sale finished\\\");\\r\\n        require(tokenPrice.mul(tokensNumber) <= msg.value, \\\"Need more ETH\\\");\\r\\n\\r\\n        for(uint i = 0; i < tokensNumber; i++) {\\r\\n            _safeMint(msg.sender, _tokenIdCounter.current());\\r\\n            _tokenIdCounter.increment();\\r\\n        }\\r\\n    }\\r\\n\\r\\n    \\r\\n}\\r\\n\\r\\n\\r\\n\\r\\n\\r\\n/// [MIT License]\\r\\n/// @title Base64\\r\\n/// @notice Provides a function for encoding some bytes in base64\\r\\n/// @author Brecht Devos <brecht@loopring.org>\\r\\nlibrary Base64 {\\r\\n    bytes internal constant TABLE = \\\"ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/\\\";\\r\\n\\r\\n    /// @notice Encodes some bytes to the base64 representation\\r\\n    function encode(bytes memory data) internal pure returns (string memory) {\\r\\n        uint256 len = data.length;\\r\\n        if (len == 0) return \\\"\\\";\\r\\n\\r\\n        // multiply by 4/3 rounded up\\r\\n        uint256 encodedLen = 4 * ((len + 2) / 3);\\r\\n\\r\\n        // Add some extra buffer at the end\\r\\n        bytes memory result = new bytes(encodedLen + 32);\\r\\n\\r\\n        bytes memory table = TABLE;\\r\\n\\r\\n        assembly {\\r\\n            let tablePtr := add(table, 1)\\r\\n            let resultPtr := add(result, 32)\\r\\n\\r\\n            for {\\r\\n                let i := 0\\r\\n            } lt(i, len) {\\r\\n\\r\\n            } {\\r\\n                i := add(i, 3)\\r\\n                let input := and(mload(add(data, i)), 0xffffff)\\r\\n\\r\\n                let out := mload(add(tablePtr, and(shr(18, input), 0x3F)))\\r\\n                out := shl(8, out)\\r\\n                out := add(out, and(mload(add(tablePtr, and(shr(12, input), 0x3F))), 0xFF))\\r\\n                out := shl(8, out)\\r\\n                out := add(out, and(mload(add(tablePtr, and(shr(6, input), 0x3F))), 0xFF))\\r\\n                out := shl(8, out)\\r\\n                out := add(out, and(mload(add(tablePtr, and(input, 0x3F))), 0xFF))\\r\\n                out := shl(224, out)\\r\\n\\r\\n                mstore(resultPtr, out)\\r\\n\\r\\n                resultPtr := add(resultPtr, 4)\\r\\n            }\\r\\n\\r\\n            switch mod(len, 3)\\r\\n            case 1 {\\r\\n                mstore(sub(resultPtr, 2), shl(240, 0x3d3d))\\r\\n            }\\r\\n            case 2 {\\r\\n                mstore(sub(resultPtr, 1), shl(248, 0x3d))\\r\\n            }\\r\\n\\r\\n            mstore(result, encodedLen)\\r\\n        }\\r\\n\\r\\n        return string(result);\\r\\n    }\\r\\n}\\r\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/utils/math/SafeMath.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\n// CAUTION\\n// This version of SafeMath should only be used with Solidity 0.8 or later,\\n// because it relies on the compiler's built in overflow checks.\\n\\n/**\\n * @dev Wrappers over Solidity's arithmetic operations.\\n *\\n * NOTE: `SafeMath` is no longer needed starting with Solidity 0.8. The compiler\\n * now has built in overflow checking.\\n */\\nlibrary SafeMath {\\n    /**\\n     * @dev Returns the addition of two unsigned integers, with an overflow flag.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function tryAdd(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        unchecked {\\n            uint256 c = a + b;\\n            if (c < a) return (false, 0);\\n            return (true, c);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the substraction of two unsigned integers, with an overflow flag.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function trySub(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        unchecked {\\n            if (b > a) return (false, 0);\\n            return (true, a - b);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the multiplication of two unsigned integers, with an overflow flag.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function tryMul(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        unchecked {\\n            // Gas optimization: this is cheaper than requiring 'a' not being zero, but the\\n            // benefit is lost if 'b' is also tested.\\n            // See: https://github.com/OpenZeppelin/openzeppelin-contracts/pull/522\\n            if (a == 0) return (true, 0);\\n            uint256 c = a * b;\\n            if (c / a != b) return (false, 0);\\n            return (true, c);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the division of two unsigned integers, with a division by zero flag.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function tryDiv(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        unchecked {\\n            if (b == 0) return (false, 0);\\n            return (true, a / b);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the remainder of dividing two unsigned integers, with a division by zero flag.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function tryMod(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        unchecked {\\n            if (b == 0) return (false, 0);\\n            return (true, a % b);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the addition of two unsigned integers, reverting on\\n     * overflow.\\n     *\\n     * Counterpart to Solidity's `+` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Addition cannot overflow.\\n     */\\n    function add(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a + b;\\n    }\\n\\n    /**\\n     * @dev Returns the subtraction of two unsigned integers, reverting on\\n     * overflow (when the result is negative).\\n     *\\n     * Counterpart to Solidity's `-` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Subtraction cannot overflow.\\n     */\\n    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a - b;\\n    }\\n\\n    /**\\n     * @dev Returns the multiplication of two unsigned integers, reverting on\\n     * overflow.\\n     *\\n     * Counterpart to Solidity's `*` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Multiplication cannot overflow.\\n     */\\n    function mul(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a * b;\\n    }\\n\\n    /**\\n     * @dev Returns the integer division of two unsigned integers, reverting on\\n     * division by zero. The result is rounded towards zero.\\n     *\\n     * Counterpart to Solidity's `/` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - The divisor cannot be zero.\\n     */\\n    function div(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a / b;\\n    }\\n\\n    /**\\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\\n     * reverting when dividing by zero.\\n     *\\n     * Counterpart to Solidity's `%` operator. This function uses a `revert`\\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\\n     * invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Requirements:\\n     *\\n     * - The divisor cannot be zero.\\n     */\\n    function mod(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a % b;\\n    }\\n\\n    /**\\n     * @dev Returns the subtraction of two unsigned integers, reverting with custom message on\\n     * overflow (when the result is negative).\\n     *\\n     * CAUTION: This function is deprecated because it requires allocating memory for the error\\n     * message unnecessarily. For custom revert reasons use {trySub}.\\n     *\\n     * Counterpart to Solidity's `-` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Subtraction cannot overflow.\\n     */\\n    function sub(\\n        uint256 a,\\n        uint256 b,\\n        string memory errorMessage\\n    ) internal pure returns (uint256) {\\n        unchecked {\\n            require(b <= a, errorMessage);\\n            return a - b;\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the integer division of two unsigned integers, reverting with custom message on\\n     * division by zero. The result is rounded towards zero.\\n     *\\n     * Counterpart to Solidity's `/` operator. Note: this function uses a\\n     * `revert` opcode (which leaves remaining gas untouched) while Solidity\\n     * uses an invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Requirements:\\n     *\\n     * - The divisor cannot be zero.\\n     */\\n    function div(\\n        uint256 a,\\n        uint256 b,\\n        string memory errorMessage\\n    ) internal pure returns (uint256) {\\n        unchecked {\\n            require(b > 0, errorMessage);\\n            return a / b;\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\\n     * reverting with custom message when dividing by zero.\\n     *\\n     * CAUTION: This function is deprecated because it requires allocating memory for the error\\n     * message unnecessarily. For custom revert reasons use {tryMod}.\\n     *\\n     * Counterpart to Solidity's `%` operator. This function uses a `revert`\\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\\n     * invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Requirements:\\n     *\\n     * - The divisor cannot be zero.\\n     */\\n    function mod(\\n        uint256 a,\\n        uint256 b,\\n        string memory errorMessage\\n    ) internal pure returns (uint256) {\\n        unchecked {\\n            require(b > 0, errorMessage);\\n            return a % b;\\n        }\\n    }\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/utils/Counters.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @title Counters\\n * @author Matt Condon (@shrugs)\\n * @dev Provides counters that can only be incremented, decremented or reset. This can be used e.g. to track the number\\n * of elements in a mapping, issuing ERC721 ids, or counting request ids.\\n *\\n * Include with `using Counters for Counters.Counter;`\\n */\\nlibrary Counters {\\n    struct Counter {\\n        // This variable should never be directly accessed by users of the library: interactions must be restricted to\\n        // the library's function. As of Solidity v0.5.2, this cannot be enforced, though there is a proposal to add\\n        // this feature: see https://github.com/ethereum/solidity/issues/4637\\n        uint256 _value; // default: 0\\n    }\\n\\n    function current(Counter storage counter) internal view returns (uint256) {\\n        return counter._value;\\n    }\\n\\n    function increment(Counter storage counter) internal {\\n        unchecked {\\n            counter._value += 1;\\n        }\\n    }\\n\\n    function decrement(Counter storage counter) internal {\\n        uint256 value = counter._value;\\n        require(value > 0, \\\"Counter: decrement overflow\\\");\\n        unchecked {\\n            counter._value = value - 1;\\n        }\\n    }\\n\\n    function reset(Counter storage counter) internal {\\n        counter._value = 0;\\n    }\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/access/Ownable.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../utils/Context.sol\\\";\\n\\n/**\\n * @dev Contract module which provides a basic access control mechanism, where\\n * there is an account (an owner) that can be granted exclusive access to\\n * specific functions.\\n *\\n * By default, the owner account will be the one that deploys the contract. This\\n * can later be changed with {transferOwnership}.\\n *\\n * This module is used through inheritance. It will make available the modifier\\n * `onlyOwner`, which can be applied to your functions to restrict their use to\\n * the owner.\\n */\\nabstract contract Ownable is Context {\\n    address private _owner;\\n\\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\\n\\n    /**\\n     * @dev Initializes the contract setting the deployer as the initial owner.\\n     */\\n    constructor() {\\n        _setOwner(_msgSender());\\n    }\\n\\n    /**\\n     * @dev Returns the address of the current owner.\\n     */\\n    function owner() public view virtual returns (address) {\\n        return _owner;\\n    }\\n\\n    /**\\n     * @dev Throws if called by any account other than the owner.\\n     */\\n    modifier onlyOwner() {\\n        require(owner() == _msgSender(), \\\"Ownable: caller is not the owner\\\");\\n        _;\\n    }\\n\\n    /**\\n     * @dev Leaves the contract without owner. It will not be possible to call\\n     * `onlyOwner` functions anymore. Can only be called by the current owner.\\n     *\\n     * NOTE: Renouncing ownership will leave the contract without an owner,\\n     * thereby removing any functionality that is only available to the owner.\\n     */\\n    function renounceOwnership() public virtual onlyOwner {\\n        _setOwner(address(0));\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Can only be called by the current owner.\\n     */\\n    function transferOwnership(address newOwner) public virtual onlyOwner {\\n        require(newOwner != address(0), \\\"Ownable: new owner is the zero address\\\");\\n        _setOwner(newOwner);\\n    }\\n\\n    function _setOwner(address newOwner) private {\\n        address oldOwner = _owner;\\n        _owner = newOwner;\\n        emit OwnershipTransferred(oldOwner, newOwner);\\n    }\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/token/ERC721/extensions/ERC721Enumerable.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../ERC721.sol\\\";\\nimport \\\"./IERC721Enumerable.sol\\\";\\n\\n/**\\n * @dev This implements an optional extension of {ERC721} defined in the EIP that adds\\n * enumerability of all the token ids in the contract as well as all token ids owned by each\\n * account.\\n */\\nabstract contract ERC721Enumerable is ERC721, IERC721Enumerable {\\n    // Mapping from owner to list of owned token IDs\\n    mapping(address => mapping(uint256 => uint256)) private _ownedTokens;\\n\\n    // Mapping from token ID to index of the owner tokens list\\n    mapping(uint256 => uint256) private _ownedTokensIndex;\\n\\n    // Array with all token ids, used for enumeration\\n    uint256[] private _allTokens;\\n\\n    // Mapping from token id to position in the allTokens array\\n    mapping(uint256 => uint256) private _allTokensIndex;\\n\\n    /**\\n     * @dev See {IERC165-supportsInterface}.\\n     */\\n    function supportsInterface(bytes4 interfaceId) public view virtual override(IERC165, ERC721) returns (bool) {\\n        return interfaceId == type(IERC721Enumerable).interfaceId || super.supportsInterface(interfaceId);\\n    }\\n\\n    /**\\n     * @dev See {IERC721Enumerable-tokenOfOwnerByIndex}.\\n     */\\n    function tokenOfOwnerByIndex(address owner, uint256 index) public view virtual override returns (uint256) {\\n        require(index < ERC721.balanceOf(owner), \\\"ERC721Enumerable: owner index out of bounds\\\");\\n        return _ownedTokens[owner][index];\\n    }\\n\\n    /**\\n     * @dev See {IERC721Enumerable-totalSupply}.\\n     */\\n    function totalSupply() public view virtual override returns (uint256) {\\n        return _allTokens.length;\\n    }\\n\\n    /**\\n     * @dev See {IERC721Enumerable-tokenByIndex}.\\n     */\\n    function tokenByIndex(uint256 index) public view virtual override returns (uint256) {\\n        require(index < ERC721Enumerable.totalSupply(), \\\"ERC721Enumerable: global index out of bounds\\\");\\n        return _allTokens[index];\\n    }\\n\\n    /**\\n     * @dev Hook that is called before any token transfer. This includes minting\\n     * and burning.\\n     *\\n     * Calling conditions:\\n     *\\n     * - When `from` and `to` are both non-zero, ``from``'s `tokenId` will be\\n     * transferred to `to`.\\n     * - When `from` is zero, `tokenId` will be minted for `to`.\\n     * - When `to` is zero, ``from``'s `tokenId` will be burned.\\n     * - `from` cannot be the zero address.\\n     * - `to` cannot be the zero address.\\n     *\\n     * To learn more about hooks, head to xref:ROOT:extending-contracts.adoc#using-hooks[Using Hooks].\\n     */\\n    function _beforeTokenTransfer(\\n        address from,\\n        address to,\\n        uint256 tokenId\\n    ) internal virtual override {\\n        super._beforeTokenTransfer(from, to, tokenId);\\n\\n        if (from == address(0)) {\\n            _addTokenToAllTokensEnumeration(tokenId);\\n        } else if (from != to) {\\n            _removeTokenFromOwnerEnumeration(from, tokenId);\\n        }\\n        if (to == address(0)) {\\n            _removeTokenFromAllTokensEnumeration(tokenId);\\n        } else if (to != from) {\\n            _addTokenToOwnerEnumeration(to, tokenId);\\n        }\\n    }\\n\\n    /**\\n     * @dev Private function to add a token to this extension's ownership-tracking data structures.\\n     * @param to address representing the new owner of the given token ID\\n     * @param tokenId uint256 ID of the token to be added to the tokens list of the given address\\n     */\\n    function _addTokenToOwnerEnumeration(address to, uint256 tokenId) private {\\n        uint256 length = ERC721.balanceOf(to);\\n        _ownedTokens[to][length] = tokenId;\\n        _ownedTokensIndex[tokenId] = length;\\n    }\\n\\n    /**\\n     * @dev Private function to add a token to this extension's token tracking data structures.\\n     * @param tokenId uint256 ID of the token to be added to the tokens list\\n     */\\n    function _addTokenToAllTokensEnumeration(uint256 tokenId) private {\\n        _allTokensIndex[tokenId] = _allTokens.length;\\n        _allTokens.push(tokenId);\\n    }\\n\\n    /**\\n     * @dev Private function to remove a token from this extension's ownership-tracking data structures. Note that\\n     * while the token is not assigned a new owner, the `_ownedTokensIndex` mapping is _not_ updated: this allows for\\n     * gas optimizations e.g. when performing a transfer operation (avoiding double writes).\\n     * This has O(1) time complexity, but alters the order of the _ownedTokens array.\\n     * @param from address representing the previous owner of the given token ID\\n     * @param tokenId uint256 ID of the token to be removed from the tokens list of the given address\\n     */\\n    function _removeTokenFromOwnerEnumeration(address from, uint256 tokenId) private {\\n        // To prevent a gap in from's tokens array, we store the last token in the index of the token to delete, and\\n        // then delete the last slot (swap and pop).\\n\\n        uint256 lastTokenIndex = ERC721.balanceOf(from) - 1;\\n        uint256 tokenIndex = _ownedTokensIndex[tokenId];\\n\\n        // When the token to delete is the last token, the swap operation is unnecessary\\n        if (tokenIndex != lastTokenIndex) {\\n            uint256 lastTokenId = _ownedTokens[from][lastTokenIndex];\\n\\n            _ownedTokens[from][tokenIndex] = lastTokenId; // Move the last token to the slot of the to-delete token\\n            _ownedTokensIndex[lastTokenId] = tokenIndex; // Update the moved token's index\\n        }\\n\\n        // This also deletes the contents at the last position of the array\\n        delete _ownedTokensIndex[tokenId];\\n        delete _ownedTokens[from][lastTokenIndex];\\n    }\\n\\n    /**\\n     * @dev Private function to remove a token from this extension's token tracking data structures.\\n     * This has O(1) time complexity, but alters the order of the _allTokens array.\\n     * @param tokenId uint256 ID of the token to be removed from the tokens list\\n     */\\n    function _removeTokenFromAllTokensEnumeration(uint256 tokenId) private {\\n        // To prevent a gap in the tokens array, we store the last token in the index of the token to delete, and\\n        // then delete the last slot (swap and pop).\\n\\n        uint256 lastTokenIndex = _allTokens.length - 1;\\n        uint256 tokenIndex = _allTokensIndex[tokenId];\\n\\n        // When the token to delete is the last token, the swap operation is unnecessary. However, since this occurs so\\n        // rarely (when the last minted token is burnt) that we still do the swap here to avoid the gas cost of adding\\n        // an 'if' statement (like in _removeTokenFromOwnerEnumeration)\\n        uint256 lastTokenId = _allTokens[lastTokenIndex];\\n\\n        _allTokens[tokenIndex] = lastTokenId; // Move the last token to the slot of the to-delete token\\n        _allTokensIndex[lastTokenId] = tokenIndex; // Update the moved token's index\\n\\n        // This also deletes the contents at the last position of the array\\n        delete _allTokensIndex[tokenId];\\n        _allTokens.pop();\\n    }\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/token/ERC721/ERC721.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"./IERC721.sol\\\";\\nimport \\\"./IERC721Receiver.sol\\\";\\nimport \\\"./extensions/IERC721Metadata.sol\\\";\\nimport \\\"../../utils/Address.sol\\\";\\nimport \\\"../../utils/Context.sol\\\";\\nimport \\\"../../utils/Strings.sol\\\";\\nimport \\\"../../utils/introspection/ERC165.sol\\\";\\n\\n/**\\n * @dev Implementation of https://eips.ethereum.org/EIPS/eip-721[ERC721] Non-Fungible Token Standard, including\\n * the Metadata extension, but not including the Enumerable extension, which is available separately as\\n * {ERC721Enumerable}.\\n */\\ncontract ERC721 is Context, ERC165, IERC721, IERC721Metadata {\\n    using Address for address;\\n    using Strings for uint256;\\n\\n    // Token name\\n    string private _name;\\n\\n    // Token symbol\\n    string private _symbol;\\n\\n    // Mapping from token ID to owner address\\n    mapping(uint256 => address) private _owners;\\n\\n    // Mapping owner address to token count\\n    mapping(address => uint256) private _balances;\\n\\n    // Mapping from token ID to approved address\\n    mapping(uint256 => address) private _tokenApprovals;\\n\\n    // Mapping from owner to operator approvals\\n    mapping(address => mapping(address => bool)) private _operatorApprovals;\\n\\n    /**\\n     * @dev Initializes the contract by setting a `name` and a `symbol` to the token collection.\\n     */\\n    constructor(string memory name_, string memory symbol_) {\\n        _name = name_;\\n        _symbol = symbol_;\\n    }\\n\\n    /**\\n     * @dev See {IERC165-supportsInterface}.\\n     */\\n    function supportsInterface(bytes4 interfaceId) public view virtual override(ERC165, IERC165) returns (bool) {\\n        return\\n            interfaceId == type(IERC721).interfaceId ||\\n            interfaceId == type(IERC721Metadata).interfaceId ||\\n            super.supportsInterface(interfaceId);\\n    }\\n\\n    /**\\n     * @dev See {IERC721-balanceOf}.\\n     */\\n    function balanceOf(address owner) public view virtual override returns (uint256) {\\n        require(owner != address(0), \\\"ERC721: balance query for the zero address\\\");\\n        return _balances[owner];\\n    }\\n\\n    /**\\n     * @dev See {IERC721-ownerOf}.\\n     */\\n    function ownerOf(uint256 tokenId) public view virtual override returns (address) {\\n        address owner = _owners[tokenId];\\n        require(owner != address(0), \\\"ERC721: owner query for nonexistent token\\\");\\n        return owner;\\n    }\\n\\n    /**\\n     * @dev See {IERC721Metadata-name}.\\n     */\\n    function name() public view virtual override returns (string memory) {\\n        return _name;\\n    }\\n\\n    /**\\n     * @dev See {IERC721Metadata-symbol}.\\n     */\\n    function symbol() public view virtual override returns (string memory) {\\n        return _symbol;\\n    }\\n\\n    /**\\n     * @dev See {IERC721Metadata-tokenURI}.\\n     */\\n    function tokenURI(uint256 tokenId) public view virtual override returns (string memory) {\\n        require(_exists(tokenId), \\\"ERC721Metadata: URI query for nonexistent token\\\");\\n\\n        string memory baseURI = _baseURI();\\n        return bytes(baseURI).length > 0 ? string(abi.encodePacked(baseURI, tokenId.toString())) : \\\"\\\";\\n    }\\n\\n    /**\\n     * @dev Base URI for computing {tokenURI}. If set, the resulting URI for each\\n     * token will be the concatenation of the `baseURI` and the `tokenId`. Empty\\n     * by default, can be overriden in child contracts.\\n     */\\n    function _baseURI() internal view virtual returns (string memory) {\\n        return \\\"\\\";\\n    }\\n\\n    /**\\n     * @dev See {IERC721-approve}.\\n     */\\n    function approve(address to, uint256 tokenId) public virtual override {\\n        address owner = ERC721.ownerOf(tokenId);\\n        require(to != owner, \\\"ERC721: approval to current owner\\\");\\n\\n        require(\\n            _msgSender() == owner || isApprovedForAll(owner, _msgSender()),\\n            \\\"ERC721: approve caller is not owner nor approved for all\\\"\\n        );\\n\\n        _approve(to, tokenId);\\n    }\\n\\n    /**\\n     * @dev See {IERC721-getApproved}.\\n     */\\n    function getApproved(uint256 tokenId) public view virtual override returns (address) {\\n        require(_exists(tokenId), \\\"ERC721: approved query for nonexistent token\\\");\\n\\n        return _tokenApprovals[tokenId];\\n    }\\n\\n    /**\\n     * @dev See {IERC721-setApprovalForAll}.\\n     */\\n    function setApprovalForAll(address operator, bool approved) public virtual override {\\n        require(operator != _msgSender(), \\\"ERC721: approve to caller\\\");\\n\\n        _operatorApprovals[_msgSender()][operator] = approved;\\n        emit ApprovalForAll(_msgSender(), operator, approved);\\n    }\\n\\n    /**\\n     * @dev See {IERC721-isApprovedForAll}.\\n     */\\n    function isApprovedForAll(address owner, address operator) public view virtual override returns (bool) {\\n        return _operatorApprovals[owner][operator];\\n    }\\n\\n    /**\\n     * @dev See {IERC721-transferFrom}.\\n     */\\n    function transferFrom(\\n        address from,\\n        address to,\\n        uint256 tokenId\\n    ) public virtual override {\\n        //solhint-disable-next-line max-line-length\\n        require(_isApprovedOrOwner(_msgSender(), tokenId), \\\"ERC721: transfer caller is not owner nor approved\\\");\\n\\n        _transfer(from, to, tokenId);\\n    }\\n\\n    /**\\n     * @dev See {IERC721-safeTransferFrom}.\\n     */\\n    function safeTransferFrom(\\n        address from,\\n        address to,\\n        uint256 tokenId\\n    ) public virtual override {\\n        safeTransferFrom(from, to, tokenId, \\\"\\\");\\n    }\\n\\n    /**\\n     * @dev See {IERC721-safeTransferFrom}.\\n     */\\n    function safeTransferFrom(\\n        address from,\\n        address to,\\n        uint256 tokenId,\\n        bytes memory _data\\n    ) public virtual override {\\n        require(_isApprovedOrOwner(_msgSender(), tokenId), \\\"ERC721: transfer caller is not owner nor approved\\\");\\n        _safeTransfer(from, to, tokenId, _data);\\n    }\\n\\n    /**\\n     * @dev Safely transfers `tokenId` token from `from` to `to`, checking first that contract recipients\\n     * are aware of the ERC721 protocol to prevent tokens from being forever locked.\\n     *\\n     * `_data` is additional data, it has no specified format and it is sent in call to `to`.\\n     *\\n     * This internal function is equivalent to {safeTransferFrom}, and can be used to e.g.\\n     * implement alternative mechanisms to perform token transfer, such as signature-based.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` cannot be the zero address.\\n     * - `to` cannot be the zero address.\\n     * - `tokenId` token must exist and be owned by `from`.\\n     * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function _safeTransfer(\\n        address from,\\n        address to,\\n        uint256 tokenId,\\n        bytes memory _data\\n    ) internal virtual {\\n        _transfer(from, to, tokenId);\\n        require(_checkOnERC721Received(from, to, tokenId, _data), \\\"ERC721: transfer to non ERC721Receiver implementer\\\");\\n    }\\n\\n    /**\\n     * @dev Returns whether `tokenId` exists.\\n     *\\n     * Tokens can be managed by their owner or approved accounts via {approve} or {setApprovalForAll}.\\n     *\\n     * Tokens start existing when they are minted (`_mint`),\\n     * and stop existing when they are burned (`_burn`).\\n     */\\n    function _exists(uint256 tokenId) internal view virtual returns (bool) {\\n        return _owners[tokenId] != address(0);\\n    }\\n\\n    /**\\n     * @dev Returns whether `spender` is allowed to manage `tokenId`.\\n     *\\n     * Requirements:\\n     *\\n     * - `tokenId` must exist.\\n     */\\n    function _isApprovedOrOwner(address spender, uint256 tokenId) internal view virtual returns (bool) {\\n        require(_exists(tokenId), \\\"ERC721: operator query for nonexistent token\\\");\\n        address owner = ERC721.ownerOf(tokenId);\\n        return (spender == owner || getApproved(tokenId) == spender || isApprovedForAll(owner, spender));\\n    }\\n\\n    /**\\n     * @dev Safely mints `tokenId` and transfers it to `to`.\\n     *\\n     * Requirements:\\n     *\\n     * - `tokenId` must not exist.\\n     * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function _safeMint(address to, uint256 tokenId) internal virtual {\\n        _safeMint(to, tokenId, \\\"\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-ERC721-_safeMint-address-uint256-}[`_safeMint`], with an additional `data` parameter which is\\n     * forwarded in {IERC721Receiver-onERC721Received} to contract recipients.\\n     */\\n    function _safeMint(\\n        address to,\\n        uint256 tokenId,\\n        bytes memory _data\\n    ) internal virtual {\\n        _mint(to, tokenId);\\n        require(\\n            _checkOnERC721Received(address(0), to, tokenId, _data),\\n            \\\"ERC721: transfer to non ERC721Receiver implementer\\\"\\n        );\\n    }\\n\\n    /**\\n     * @dev Mints `tokenId` and transfers it to `to`.\\n     *\\n     * WARNING: Usage of this method is discouraged, use {_safeMint} whenever possible\\n     *\\n     * Requirements:\\n     *\\n     * - `tokenId` must not exist.\\n     * - `to` cannot be the zero address.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function _mint(address to, uint256 tokenId) internal virtual {\\n        require(to != address(0), \\\"ERC721: mint to the zero address\\\");\\n        require(!_exists(tokenId), \\\"ERC721: token already minted\\\");\\n\\n        _beforeTokenTransfer(address(0), to, tokenId);\\n\\n        _balances[to] += 1;\\n        _owners[tokenId] = to;\\n\\n        emit Transfer(address(0), to, tokenId);\\n    }\\n\\n    /**\\n     * @dev Destroys `tokenId`.\\n     * The approval is cleared when the token is burned.\\n     *\\n     * Requirements:\\n     *\\n     * - `tokenId` must exist.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function _burn(uint256 tokenId) internal virtual {\\n        address owner = ERC721.ownerOf(tokenId);\\n\\n        _beforeTokenTransfer(owner, address(0), tokenId);\\n\\n        // Clear approvals\\n        _approve(address(0), tokenId);\\n\\n        _balances[owner] -= 1;\\n        delete _owners[tokenId];\\n\\n        emit Transfer(owner, address(0), tokenId);\\n    }\\n\\n    /**\\n     * @dev Transfers `tokenId` from `from` to `to`.\\n     *  As opposed to {transferFrom}, this imposes no restrictions on msg.sender.\\n     *\\n     * Requirements:\\n     *\\n     * - `to` cannot be the zero address.\\n     * - `tokenId` token must be owned by `from`.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function _transfer(\\n        address from,\\n        address to,\\n        uint256 tokenId\\n    ) internal virtual {\\n        require(ERC721.ownerOf(tokenId) == from, \\\"ERC721: transfer of token that is not own\\\");\\n        require(to != address(0), \\\"ERC721: transfer to the zero address\\\");\\n\\n        _beforeTokenTransfer(from, to, tokenId);\\n\\n        // Clear approvals from the previous owner\\n        _approve(address(0), tokenId);\\n\\n        _balances[from] -= 1;\\n        _balances[to] += 1;\\n        _owners[tokenId] = to;\\n\\n        emit Transfer(from, to, tokenId);\\n    }\\n\\n    /**\\n     * @dev Approve `to` to operate on `tokenId`\\n     *\\n     * Emits a {Approval} event.\\n     */\\n    function _approve(address to, uint256 tokenId) internal virtual {\\n        _tokenApprovals[tokenId] = to;\\n        emit Approval(ERC721.ownerOf(tokenId), to, tokenId);\\n    }\\n\\n    /**\\n     * @dev Internal function to invoke {IERC721Receiver-onERC721Received} on a target address.\\n     * The call is not executed if the target address is not a contract.\\n     *\\n     * @param from address representing the previous owner of the given token ID\\n     * @param to target address that will receive the tokens\\n     * @param tokenId uint256 ID of the token to be transferred\\n     * @param _data bytes optional data to send along with the call\\n     * @return bool whether the call correctly returned the expected magic value\\n     */\\n    function _checkOnERC721Received(\\n        address from,\\n        address to,\\n        uint256 tokenId,\\n        bytes memory _data\\n    ) private returns (bool) {\\n        if (to.isContract()) {\\n            try IERC721Receiver(to).onERC721Received(_msgSender(), from, tokenId, _data) returns (bytes4 retval) {\\n                return retval == IERC721Receiver.onERC721Received.selector;\\n            } catch (bytes memory reason) {\\n                if (reason.length == 0) {\\n                    revert(\\\"ERC721: transfer to non ERC721Receiver implementer\\\");\\n                } else {\\n                    assembly {\\n                        revert(add(32, reason), mload(reason))\\n                    }\\n                }\\n            }\\n        } else {\\n            return true;\\n        }\\n    }\\n\\n    /**\\n     * @dev Hook that is called before any token transfer. This includes minting\\n     * and burning.\\n     *\\n     * Calling conditions:\\n     *\\n     * - When `from` and `to` are both non-zero, ``from``'s `tokenId` will be\\n     * transferred to `to`.\\n     * - When `from` is zero, `tokenId` will be minted for `to`.\\n     * - When `to` is zero, ``from``'s `tokenId` will be burned.\\n     * - `from` and `to` are never both zero.\\n     *\\n     * To learn more about hooks, head to xref:ROOT:extending-contracts.adoc#using-hooks[Using Hooks].\\n     */\\n    function _beforeTokenTransfer(\\n        address from,\\n        address to,\\n        uint256 tokenId\\n    ) internal virtual {}\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/token/ERC721/extensions/IERC721Enumerable.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../IERC721.sol\\\";\\n\\n/**\\n * @title ERC-721 Non-Fungible Token Standard, optional enumeration extension\\n * @dev See https://eips.ethereum.org/EIPS/eip-721\\n */\\ninterface IERC721Enumerable is IERC721 {\\n    /**\\n     * @dev Returns the total amount of tokens stored by the contract.\\n     */\\n    function totalSupply() external view returns (uint256);\\n\\n    /**\\n     * @dev Returns a token ID owned by `owner` at a given `index` of its token list.\\n     * Use along with {balanceOf} to enumerate all of ``owner``'s tokens.\\n     */\\n    function tokenOfOwnerByIndex(address owner, uint256 index) external view returns (uint256 tokenId);\\n\\n    /**\\n     * @dev Returns a token ID at a given `index` of all the tokens stored by the contract.\\n     * Use along with {totalSupply} to enumerate all tokens.\\n     */\\n    function tokenByIndex(uint256 index) external view returns (uint256);\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/utils/introspection/ERC165.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"./IERC165.sol\\\";\\n\\n/**\\n * @dev Implementation of the {IERC165} interface.\\n *\\n * Contracts that want to implement ERC165 should inherit from this contract and override {supportsInterface} to check\\n * for the additional interface id that will be supported. For example:\\n *\\n * ```solidity\\n * function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {\\n *     return interfaceId == type(MyInterface).interfaceId || super.supportsInterface(interfaceId);\\n * }\\n * ```\\n *\\n * Alternatively, {ERC165Storage} provides an easier to use but more expensive implementation.\\n */\\nabstract contract ERC165 is IERC165 {\\n    /**\\n     * @dev See {IERC165-supportsInterface}.\\n     */\\n    function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {\\n        return interfaceId == type(IERC165).interfaceId;\\n    }\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/utils/Strings.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev String operations.\\n */\\nlibrary Strings {\\n    bytes16 private constant _HEX_SYMBOLS = \\\"0123456789abcdef\\\";\\n\\n    /**\\n     * @dev Converts a `uint256` to its ASCII `string` decimal representation.\\n     */\\n    function toString(uint256 value) internal pure returns (string memory) {\\n        // Inspired by OraclizeAPI's implementation - MIT licence\\n        // https://github.com/oraclize/ethereum-api/blob/b42146b063c7d6ee1358846c198246239e9360e8/oraclizeAPI_0.4.25.sol\\n\\n        if (value == 0) {\\n            return \\\"0\\\";\\n        }\\n        uint256 temp = value;\\n        uint256 digits;\\n        while (temp != 0) {\\n            digits++;\\n            temp /= 10;\\n        }\\n        bytes memory buffer = new bytes(digits);\\n        while (value != 0) {\\n            digits -= 1;\\n            buffer[digits] = bytes1(uint8(48 + uint256(value % 10)));\\n            value /= 10;\\n        }\\n        return string(buffer);\\n    }\\n\\n    /**\\n     * @dev Converts a `uint256` to its ASCII `string` hexadecimal representation.\\n     */\\n    function toHexString(uint256 value) internal pure returns (string memory) {\\n        if (value == 0) {\\n            return \\\"0x00\\\";\\n        }\\n        uint256 temp = value;\\n        uint256 length = 0;\\n        while (temp != 0) {\\n            length++;\\n            temp >>= 8;\\n        }\\n        return toHexString(value, length);\\n    }\\n\\n    /**\\n     * @dev Converts a `uint256` to its ASCII `string` hexadecimal representation with fixed length.\\n     */\\n    function toHexString(uint256 value, uint256 length) internal pure returns (string memory) {\\n        bytes memory buffer = new bytes(2 * length + 2);\\n        buffer[0] = \\\"0\\\";\\n        buffer[1] = \\\"x\\\";\\n        for (uint256 i = 2 * length + 1; i > 1; --i) {\\n            buffer[i] = _HEX_SYMBOLS[value & 0xf];\\n            value >>= 4;\\n        }\\n        require(value == 0, \\\"Strings: hex length insufficient\\\");\\n        return string(buffer);\\n    }\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/utils/Context.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Provides information about the current execution context, including the\\n * sender of the transaction and its data. While these are generally available\\n * via msg.sender and msg.data, they should not be accessed in such a direct\\n * manner, since when dealing with meta-transactions the account sending and\\n * paying for execution may not be the actual sender (as far as an application\\n * is concerned).\\n *\\n * This contract is only required for intermediate, library-like contracts.\\n */\\nabstract contract Context {\\n    function _msgSender() internal view virtual returns (address) {\\n        return msg.sender;\\n    }\\n\\n    function _msgData() internal view virtual returns (bytes calldata) {\\n        return msg.data;\\n    }\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/utils/Address.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Collection of functions related to the address type\\n */\\nlibrary Address {\\n    /**\\n     * @dev Returns true if `account` is a contract.\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * It is unsafe to assume that an address for which this function returns\\n     * false is an externally-owned account (EOA) and not a contract.\\n     *\\n     * Among others, `isContract` will return false for the following\\n     * types of addresses:\\n     *\\n     *  - an externally-owned account\\n     *  - a contract in construction\\n     *  - an address where a contract will be created\\n     *  - an address where a contract lived, but was destroyed\\n     * ====\\n     */\\n    function isContract(address account) internal view returns (bool) {\\n        // This method relies on extcodesize, which returns 0 for contracts in\\n        // construction, since the code is only stored at the end of the\\n        // constructor execution.\\n\\n        uint256 size;\\n        assembly {\\n            size := extcodesize(account)\\n        }\\n        return size > 0;\\n    }\\n\\n    /**\\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\\n     * `recipient`, forwarding all available gas and reverting on errors.\\n     *\\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\\n     * imposed by `transfer`, making them unable to receive funds via\\n     * `transfer`. {sendValue} removes this limitation.\\n     *\\n     * https://diligence.consensys.net/posts/2019/09/stop-using-soliditys-transfer-now/[Learn more].\\n     *\\n     * IMPORTANT: because control is transferred to `recipient`, care must be\\n     * taken to not create reentrancy vulnerabilities. Consider using\\n     * {ReentrancyGuard} or the\\n     * https://solidity.readthedocs.io/en/v0.5.11/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\\n     */\\n    function sendValue(address payable recipient, uint256 amount) internal {\\n        require(address(this).balance >= amount, \\\"Address: insufficient balance\\\");\\n\\n        (bool success, ) = recipient.call{value: amount}(\\\"\\\");\\n        require(success, \\\"Address: unable to send value, recipient may have reverted\\\");\\n    }\\n\\n    /**\\n     * @dev Performs a Solidity function call using a low level `call`. A\\n     * plain `call` is an unsafe replacement for a function call: use this\\n     * function instead.\\n     *\\n     * If `target` reverts with a revert reason, it is bubbled up by this\\n     * function (like regular Solidity function calls).\\n     *\\n     * Returns the raw returned data. To convert to the expected return value,\\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\\n     *\\n     * Requirements:\\n     *\\n     * - `target` must be a contract.\\n     * - calling `target` with `data` must not revert.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionCall(target, data, \\\"Address: low-level call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\\n     * `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, 0, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but also transferring `value` wei to `target`.\\n     *\\n     * Requirements:\\n     *\\n     * - the calling contract must have an ETH balance of at least `value`.\\n     * - the called Solidity function must be `payable`.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, value, \\\"Address: low-level call with value failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\\n     * with `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        require(address(this).balance >= value, \\\"Address: insufficient balance for call\\\");\\n        require(isContract(target), \\\"Address: call to non-contract\\\");\\n\\n        (bool success, bytes memory returndata) = target.call{value: value}(data);\\n        return verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\\n        return functionStaticCall(target, data, \\\"Address: low-level static call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal view returns (bytes memory) {\\n        require(isContract(target), \\\"Address: static call to non-contract\\\");\\n\\n        (bool success, bytes memory returndata) = target.staticcall(data);\\n        return verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionDelegateCall(target, data, \\\"Address: low-level delegate call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        require(isContract(target), \\\"Address: delegate call to non-contract\\\");\\n\\n        (bool success, bytes memory returndata) = target.delegatecall(data);\\n        return verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Tool to verifies that a low level call was successful, and revert if it wasn't, either by bubbling the\\n     * revert reason using the provided one.\\n     *\\n     * _Available since v4.3._\\n     */\\n    function verifyCallResult(\\n        bool success,\\n        bytes memory returndata,\\n        string memory errorMessage\\n    ) internal pure returns (bytes memory) {\\n        if (success) {\\n            return returndata;\\n        } else {\\n            // Look for revert reason and bubble it up if present\\n            if (returndata.length > 0) {\\n                // The easiest way to bubble the revert reason is using memory via assembly\\n\\n                assembly {\\n                    let returndata_size := mload(returndata)\\n                    revert(add(32, returndata), returndata_size)\\n                }\\n            } else {\\n                revert(errorMessage);\\n            }\\n        }\\n    }\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/token/ERC721/extensions/IERC721Metadata.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../IERC721.sol\\\";\\n\\n/**\\n * @title ERC-721 Non-Fungible Token Standard, optional metadata extension\\n * @dev See https://eips.ethereum.org/EIPS/eip-721\\n */\\ninterface IERC721Metadata is IERC721 {\\n    /**\\n     * @dev Returns the token collection name.\\n     */\\n    function name() external view returns (string memory);\\n\\n    /**\\n     * @dev Returns the token collection symbol.\\n     */\\n    function symbol() external view returns (string memory);\\n\\n    /**\\n     * @dev Returns the Uniform Resource Identifier (URI) for `tokenId` token.\\n     */\\n    function tokenURI(uint256 tokenId) external view returns (string memory);\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/token/ERC721/IERC721Receiver.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @title ERC721 token receiver interface\\n * @dev Interface for any contract that wants to support safeTransfers\\n * from ERC721 asset contracts.\\n */\\ninterface IERC721Receiver {\\n    /**\\n     * @dev Whenever an {IERC721} `tokenId` token is transferred to this contract via {IERC721-safeTransferFrom}\\n     * by `operator` from `from`, this function is called.\\n     *\\n     * It must return its Solidity selector to confirm the token transfer.\\n     * If any other value is returned or the interface is not implemented by the recipient, the transfer will be reverted.\\n     *\\n     * The selector can be obtained in Solidity with `IERC721.onERC721Received.selector`.\\n     */\\n    function onERC721Received(\\n        address operator,\\n        address from,\\n        uint256 tokenId,\\n        bytes calldata data\\n    ) external returns (bytes4);\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/token/ERC721/IERC721.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../../utils/introspection/IERC165.sol\\\";\\n\\n/**\\n * @dev Required interface of an ERC721 compliant contract.\\n */\\ninterface IERC721 is IERC165 {\\n    /**\\n     * @dev Emitted when `tokenId` token is transferred from `from` to `to`.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 indexed tokenId);\\n\\n    /**\\n     * @dev Emitted when `owner` enables `approved` to manage the `tokenId` token.\\n     */\\n    event Approval(address indexed owner, address indexed approved, uint256 indexed tokenId);\\n\\n    /**\\n     * @dev Emitted when `owner` enables or disables (`approved`) `operator` to manage all of its assets.\\n     */\\n    event ApprovalForAll(address indexed owner, address indexed operator, bool approved);\\n\\n    /**\\n     * @dev Returns the number of tokens in ``owner``'s account.\\n     */\\n    function balanceOf(address owner) external view returns (uint256 balance);\\n\\n    /**\\n     * @dev Returns the owner of the `tokenId` token.\\n     *\\n     * Requirements:\\n     *\\n     * - `tokenId` must exist.\\n     */\\n    function ownerOf(uint256 tokenId) external view returns (address owner);\\n\\n    /**\\n     * @dev Safely transfers `tokenId` token from `from` to `to`, checking first that contract recipients\\n     * are aware of the ERC721 protocol to prevent tokens from being forever locked.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` cannot be the zero address.\\n     * - `to` cannot be the zero address.\\n     * - `tokenId` token must exist and be owned by `from`.\\n     * - If the caller is not `from`, it must be have been allowed to move this token by either {approve} or {setApprovalForAll}.\\n     * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function safeTransferFrom(\\n        address from,\\n        address to,\\n        uint256 tokenId\\n    ) external;\\n\\n    /**\\n     * @dev Transfers `tokenId` token from `from` to `to`.\\n     *\\n     * WARNING: Usage of this method is discouraged, use {safeTransferFrom} whenever possible.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` cannot be the zero address.\\n     * - `to` cannot be the zero address.\\n     * - `tokenId` token must be owned by `from`.\\n     * - If the caller is not `from`, it must be approved to move this token by either {approve} or {setApprovalForAll}.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(\\n        address from,\\n        address to,\\n        uint256 tokenId\\n    ) external;\\n\\n    /**\\n     * @dev Gives permission to `to` to transfer `tokenId` token to another account.\\n     * The approval is cleared when the token is transferred.\\n     *\\n     * Only a single account can be approved at a time, so approving the zero address clears previous approvals.\\n     *\\n     * Requirements:\\n     *\\n     * - The caller must own the token or be an approved operator.\\n     * - `tokenId` must exist.\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address to, uint256 tokenId) external;\\n\\n    /**\\n     * @dev Returns the account approved for `tokenId` token.\\n     *\\n     * Requirements:\\n     *\\n     * - `tokenId` must exist.\\n     */\\n    function getApproved(uint256 tokenId) external view returns (address operator);\\n\\n    /**\\n     * @dev Approve or remove `operator` as an operator for the caller.\\n     * Operators can call {transferFrom} or {safeTransferFrom} for any token owned by the caller.\\n     *\\n     * Requirements:\\n     *\\n     * - The `operator` cannot be the caller.\\n     *\\n     * Emits an {ApprovalForAll} event.\\n     */\\n    function setApprovalForAll(address operator, bool _approved) external;\\n\\n    /**\\n     * @dev Returns if the `operator` is allowed to manage all of the assets of `owner`.\\n     *\\n     * See {setApprovalForAll}\\n     */\\n    function isApprovedForAll(address owner, address operator) external view returns (bool);\\n\\n    /**\\n     * @dev Safely transfers `tokenId` token from `from` to `to`.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` cannot be the zero address.\\n     * - `to` cannot be the zero address.\\n     * - `tokenId` token must exist and be owned by `from`.\\n     * - If the caller is not `from`, it must be approved to move this token by either {approve} or {setApprovalForAll}.\\n     * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function safeTransferFrom(\\n        address from,\\n        address to,\\n        uint256 tokenId,\\n        bytes calldata data\\n    ) external;\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/utils/introspection/IERC165.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC165 standard, as defined in the\\n * https://eips.ethereum.org/EIPS/eip-165[EIP].\\n *\\n * Implementers can declare support of contract interfaces, which can then be\\n * queried by others ({ERC165Checker}).\\n *\\n * For an implementation, see {ERC165}.\\n */\\ninterface IERC165 {\\n    /**\\n     * @dev Returns true if this contract implements the interface defined by\\n     * `interfaceId`. See the corresponding\\n     * https://eips.ethereum.org/EIPS/eip-165#how-interfaces-are-identified[EIP section]\\n     * to learn more about how these ids are created.\\n     *\\n     * This function call must use less than 30 000 gas.\\n     */\\n    function supportsInterface(bytes4 interfaceId) external view returns (bool);\\n}\\n\"\r\n    }\r\n  },\r\n  \"settings\": {\r\n    \"optimizer\": {\r\n      \"enabled\": true,\r\n      \"runs\": 100\r\n    },\r\n    \"outputSelection\": {\r\n      \"*\": {\r\n        \"*\": [\r\n          \"evm.bytecode\",\r\n          \"evm.deployedBytecode\",\r\n          \"devdoc\",\r\n          \"userdoc\",\r\n          \"metadata\",\r\n          \"abi\"\r\n        ]\r\n      }\r\n    }\r\n  }\r\n}}","ABI":"[{\"inputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"approved\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"Approval\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"operator\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"bool\",\"name\":\"approved\",\"type\":\"bool\"}],\"name\":\"ApprovalForAll\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"Transfer\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"approve\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"tokensNumber\",\"type\":\"uint256\"}],\"name\":\"buyTokens\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"claim\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"getApproved\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"num\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"dir\",\"type\":\"uint256\"}],\"name\":\"getPoints\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"operator\",\"type\":\"address\"}],\"name\":\"isApprovedForAll\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"name\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"ownerOf\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"}],\"name\":\"safeMint\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"safeTransferFrom\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"},{\"internalType\":\"bytes\",\"name\":\"_data\",\"type\":\"bytes\"}],\"name\":\"safeTransferFrom\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"operator\",\"type\":\"address\"},{\"internalType\":\"bool\",\"name\":\"approved\",\"type\":\"bool\"}],\"name\":\"setApprovalForAll\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes4\",\"name\":\"interfaceId\",\"type\":\"bytes4\"}],\"name\":\"supportsInterface\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"symbol\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"index\",\"type\":\"uint256\"}],\"name\":\"tokenByIndex\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"index\",\"type\":\"uint256\"}],\"name\":\"tokenOfOwnerByIndex\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"tokenURI\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalSupply\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"transferFrom\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"withdraw\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}]","ContractName":"MysticForest","CompilerVersion":"v0.8.7+commit.e28d00a7","OptimizationUsed":"1","Runs":"100","ConstructorArguments":"","EVMVersion":"Default","Library":"","LicenseType":"","Proxy":"0","Implementation":"","SwarmSource":""}]}