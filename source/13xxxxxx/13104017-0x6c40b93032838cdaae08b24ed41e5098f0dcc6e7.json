{"status":"1","message":"OK","result":[{"SourceCode":"{{\r\n  \"language\": \"Solidity\",\r\n  \"sources\": {\r\n    \"contracts/XenoERC20.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\n/* INHERITANCE IMPORTS */\\n\\nimport \\\"./IXenoERC20.sol\\\";\\nimport \\\"./proxy/Initializable.sol\\\";\\nimport \\\"./proxy/UUPSUpgradeable.sol\\\";\\nimport \\\"./access/manager/ManagerRole.sol\\\";\\nimport \\\"./extensions/freezable/Freezable.sol\\\";\\nimport \\\"./extensions/pausable/Pausable.sol\\\";\\nimport \\\"./extensions/recoverable/Recoverable.sol\\\";\\nimport \\\"./ERC20/ERC20.sol\\\";\\n\\ncontract XenoERC20 is IXenoERC20, Initializable, UUPSUpgradeable, ManagerRole, Freezable, Pausable, Recoverable, ERC20 {\\n\\n    /* INITIALIZE METHOD */\\n\\n    /**\\n     * @dev initalize() replaces the contract constructor in the UUPS proxy upgrade pattern.\\n     * It is gated by the initializer modifier to ensure that it can only be run once.\\n     * All inherited contracts must also replace constructors with initialize methods to be called here.\\n     */\\n    function initialize(string calldata setName, string calldata setSymbol, uint256 initialSupply ) external initializer {\\n        // set initializer as manager\\n        _initializeManagerRole(msg.sender);\\n        \\n        // set ERC20 name, symbol, decimals, and initial supply\\n        _initalizeERC20(setName, setSymbol, 18, initialSupply);\\n\\n        // set pause state to false by default\\n        _initializePausable();\\n    }\\n\\n    /* ManagerRoleInterface METHODS */\\n\\n    /**\\n     * @dev Returns true if `account` holds a manager role, returns false otherwise.\\n     */\\n    function isManager(address account) external view override returns (bool) {\\n        return _isManager(account);\\n    }\\n\\n    /**\\n     * @dev Give the manager role to `account`.\\n     *\\n     * Requirements;\\n     *\\n     * - caller must be a manager\\n     * - `account` is not already a manager\\n     *\\n     * Emits an {ManagerAdded} event.\\n     */\\n    function addManager(address account) external override {\\n       _addManager(account);\\n    }\\n\\n    /**\\n     * @dev Renounce the manager role for the caller.\\n     *\\n     * Requirements;\\n     *\\n     * - caller must be a manager\\n     * - caller must NOT be the ONLY manager\\n     *\\n     * Emits an {ManagerRemoved} event.\\n     */\\n    function renounceManager() external override {\\n        _renounceManager();\\n    }\\n\\n    /* IERC20Metadata METHODS */\\n\\n    /**\\n     * @dev Returns the name of the token.\\n     */\\n    function name() external view override returns (string memory) {\\n        return _name();\\n    }\\n\\n    /**\\n     * @dev Returns the symbol of the token.\\n     */\\n    function symbol() external view override returns (string memory) {\\n        return _symbol();\\n    }\\n\\n    /**\\n     * @dev Returns the decimals places of the token.\\n     */\\n    function decimals() external view override returns (uint8) {\\n        return _decimals();\\n    }\\n\\n    /* IERC20 METHODS */\\n\\n   /**\\n     * @dev Returns the the total amount of tokens that exist.\\n     */\\n    function totalSupply() external view override returns (uint256) {\\n        return _totalSupply();\\n    }\\n\\n    /**\\n     * @dev Returns the amount of tokens owned by `account`.\\n     */\\n    function balanceOf(address account) external view override returns (uint256) {\\n        return _balanceOf(account);\\n    }\\n\\n    /**\\n     * @dev Returns the remaining number of tokens that `spender` will be\\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\\n     * zero by default.\\n     *\\n     * This value changes when {approve} or {transferFrom} are called.\\n     */\\n    function allowance(address owner, address spender) external view override returns (uint256) {\\n        return _allowance(owner, spender);\\n    }\\n\\n    /**\\n     * @dev Moves `amount` tokens from the caller's account to `recipient`.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     *\\n     * Requirements:\\n     * - contract is upaused\\n     * - caller is not frozen\\n     * - `recipient` is not frozen\\n     * - transfer rules apply (i.e. adequate balance, non-zero addresses)\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transfer(address recipient, uint256 amount) external override returns (bool) {\\n        /* check if paused */\\n        require(\\n            !_paused(),\\n            \\\"XenoERC20.transfer: PAUSED\\\"\\n        );\\n        /* check if caller frozen */\\n        require(\\n            !_frozen(_msgSender()),\\n            \\\"XenoERC20.transfer: CALLER_FROZEN\\\"\\n        );\\n        /* check if recipient frozen */\\n        require(\\n            !_frozen(recipient),\\n            \\\"XenoERC20.transfer: RECIPIENT_FROZEN\\\"\\n        );\\n        return _transfer(_msgSender(), recipient, amount);\\n    }\\n\\n    /**\\n     * @dev Moves `amount` tokens from `sender` to `recipient` using the\\n     * allowance mechanism. `amount` is then deducted from the caller's\\n     * allowance.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Requirements:\\n     * - contract is upaused\\n     * - caller is not frozen\\n     * - `sender` is not forzen\\n     * - `recipient` is not frozen\\n     * - transferFrom rules apply (i.e. adequate allowance and balance, non-zero addresses)\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(\\n        address sender,\\n        address recipient,\\n        uint256 amount\\n    ) external override returns (bool) {\\n        /* check if paused */\\n        require(\\n            !_paused(),\\n            \\\"XenoERC20.transferFrom: PAUSED\\\"\\n        );\\n        /* check if caller frozen */\\n        require(\\n            !_frozen(_msgSender()),\\n            \\\"XenoERC20.transferFrom: CALLER_FROZEN\\\"\\n        );\\n        /* check if sender frozen */\\n        require(\\n            !_frozen(sender),\\n            \\\"XenoERC20.transferFrom: SENDER_FROZEN\\\"\\n        );\\n        /* check if recipient frozen */\\n        require(\\n            !_frozen(recipient),\\n            \\\"XenoERC20.transferFrom: RECIPIENT_FROZEN\\\"\\n        );\\n        return _transferFrom(sender, recipient, amount);\\n    }\\n\\n    /**\\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\\n     * that someone may use both the old and the new allowance by unfortunate\\n     * transaction ordering. One possible solution to mitigate this race\\n     * condition is to first reduce the spender's allowance to 0 and set the\\n     * desired value afterwards:\\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\\n     *\\n     * Requirements:\\n     * - contract is upaused\\n     * - caller is not frozen\\n     * - `spender` is not frozen\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address spender, uint256 amount) external override returns (bool) {\\n        /* check if paused */\\n        require(\\n            !_paused(),\\n            \\\"XenoERC20.approve: PAUSED\\\"\\n        );\\n        /* check if caller frozen */\\n        require(\\n            !_frozen(_msgSender()),\\n            \\\"XenoERC20.approve: CALLER_FROZEN\\\"\\n        );\\n        /* check if spender frozen */\\n        require(\\n            !_frozen(spender),\\n            \\\"XenoERC20.approve: SPENDER_FROZEN\\\"\\n        );\\n        return _approve(spender, amount);\\n    }\\n\\n    /* ERC20AllowanceInterface METHODS */\\n\\n    /**\\n     * @dev Atomically increases the allowance granted to `spender` by the caller.\\n     *\\n     * This is an alternative to {approve} that can be used as a mitigation for\\n     * problems described in {IERC20-approve}.\\n     *\\n     * Emits an {Approval} event indicating the updated allowance.\\n     *\\n     * Requirements:\\n     *\\n     * - `spender` cannot be the zero address.\\n     * - contract is upaused\\n     * - caller is not frozen\\n     * - `spender` is not frozen\\n     *\\n     * Emits an {Approval} event\\n     */\\n    function increaseAllowance(address spender, uint256 addedValue) external override returns (bool) {\\n        /* check if paused */\\n        require(\\n            !_paused(),\\n            \\\"XenoERC20.increaseAllowance: PAUSED\\\"\\n        );\\n        /* check if caller frozen */\\n        require(\\n            !_frozen(_msgSender()),\\n            \\\"XenoERC20.increaseAllowance: CALLER_FROZEN\\\"\\n        );\\n        /* check if spender frozen */\\n        require(\\n            !_frozen(spender),\\n            \\\"XenoERC20.increaseAllowance: SPENDER_FROZEN\\\"\\n        );\\n        return _increaseAllowance(spender, addedValue);\\n    }\\n\\n    /**\\n     * @dev Atomically decreases the allowance granted to `spender` by the caller.\\n     *\\n     * This is an alternative to {approve} that can be used as a mitigation for\\n     * problems described in {IERC20-approve}.\\n     *\\n     * Emits an {Approval} event indicating the updated allowance.\\n     *\\n     * Requirements:\\n     *\\n     * - `spender` cannot be the zero address.\\n     * - `spender` must have allowance for the caller of at least\\n     * `subtractedValue`.\\n     * - contract is upaused\\n     * - caller is not frozen\\n     * - `spender` is not frozen\\n     *\\n     * Emits an {Approval} event\\n     */\\n    function decreaseAllowance(address spender, uint256 subtractedValue) external override returns (bool) {\\n        /* check if paused */\\n        require(\\n            !_paused(),\\n            \\\"XenoERC20.decreaseAllowance: PAUSED\\\"\\n        );\\n        /* check if caller frozen */\\n        require(\\n            !_frozen(_msgSender()),\\n            \\\"XenoERC20.decreaseAllowance: CALLER_FROZEN\\\"\\n        );\\n        /* check if spender frozen */\\n        require(\\n            !_frozen(spender),\\n            \\\"XenoERC20.decreaseAllowance: SPENDER_FROZEN\\\"\\n        );\\n        return _decreaseAllowance(spender, subtractedValue);\\n    }\\n\\n    /* IERC20Burnable METHODS */\\n\\n    /**\\n     * @dev Burns `amount` tokens from the caller account\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Requirements:\\n     * - contract is upaused\\n     * - caller is not frozen\\n     * - transfer rules apply (i.e. adequate balance, non-zero addresses)\\n     *\\n     * Emits a {Transfer} event with the ZERO address as recipient\\n     */\\n    function burn(uint256 amount) external override returns (bool) {\\n        /* check if paused */\\n        require(\\n            !_paused(),\\n            \\\"XenoERC20.burn: PAUSED\\\"\\n        );\\n        /* check if caller frozen */\\n        require(\\n            !_frozen(_msgSender()),\\n            \\\"XenoERC20.burn: CALLER_FROZEN\\\"\\n        );\\n        return _burn(amount);\\n    }\\n\\n    /**\\n     * @dev Burns `amount` tokens from caller using the\\n     * allowance mechanism. `amount` is then deducted from the caller's\\n     * allowance.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Requirements:\\n     * - contract is upaused\\n     * - caller is not frozen\\n     * - `account` is not frozen\\n     * - transfer rules apply (i.e. adequate balance)\\n     *\\n     * Emits a {Transfer} event with the ZERO address as recipient\\n     */\\n    function burnFrom(address account, uint256 amount) external override returns (bool) {\\n        /* check if paused */\\n        require(\\n            !_paused(),\\n            \\\"XenoERC20.burnFrom: PAUSED\\\"\\n        );\\n        /* check if caller frozen */\\n        require(\\n            !_frozen(_msgSender()),\\n            \\\"XenoERC20.burnFrom: CALLER_FROZEN\\\"\\n        );\\n        /* check if account frozen */\\n        require(\\n            !_frozen(account),\\n            \\\"XenoERC20.burnFrom: ACCOUNT_FROZEN\\\"\\n        );\\n        return _burnFrom(account, amount);\\n    }\\n\\n    /* FreezableInterface METHODS */\\n\\n    /**\\n     * @dev Returns the frozen state of `account`.\\n     */\\n    function frozen(address account) external view override returns (bool) {\\n        return _frozen(account);\\n    }\\n\\n    /**\\n     * @dev Freezes activity of `account` until unfrozen\\n     *\\n     * Frozen activities include: \\n     * - transfer (as sender and recipient)\\n     * - transferFrom (as caller, owner and recipient)\\n     * - approve (as caller and spender)\\n     * - increaseAllowance (as caller and spender)\\n     * - decreaseAllowance (as caller and spender)\\n     * - burn (as caller)\\n     * - burnFrom (as caller and spender)\\n     *\\n     * Requirements:\\n     * - caller must hold the ManagerRole\\n     * - `account` is unfrozen\\n     *\\n     * * Emits a {Frozen} event\\n     */\\n    function freeze(address account) external override {\\n        require(\\n            _isManager(_msgSender()),\\n            \\\"XenoERC20.freeze: INVALID_CALLER\\\"\\n        );\\n        _freeze(account);\\n    }\\n\\n    /**\\n     * @dev Restores `account` activity\\n     *\\n     * Requirements:\\n     * - caller must hold the ManagerRole\\n     * - `account` is frozen\\n     *\\n     * * Emits an {Unfrozen} event\\n     *\\n     */\\n    function unfreeze(address account) external override {\\n        require(\\n            _isManager(_msgSender()),\\n            \\\"XenoERC20.unfreeze: INVALID_CALLER\\\"\\n        );\\n        _unfreeze(account);\\n    }\\n\\n    /* PausableInterface  METHODS */\\n\\n    /**\\n     * @dev Returns the paused state of the contract.\\n     */\\n    function paused() external view override returns (bool) {\\n        return _paused();\\n    }\\n\\n    /**\\n     * @dev Pauses state changing activity of the entire contract\\n     *\\n     * Paused activities include: \\n     * - transfer\\n     * - transferFrom\\n     * - approve\\n     * - increaseAllowance\\n     * - decreaseAllowance\\n     * - burn\\n     * - burnFrom\\n     *\\n     * Requirements:\\n     * - caller must hold the ManagerRole\\n     * - contract is unpaused\\n     *\\n     * * Emits a {Paused} event\\n     */\\n    function pause() external override {\\n        require(\\n            _isManager(_msgSender()),\\n            \\\"XenoERC20.pause: INVALID_CALLER\\\"\\n        );\\n        _pause();\\n    }\\n\\n    /**\\n     * @dev Restores state changing activity to the entire contract\\n     *\\n     * Requirements:\\n     * - caller must hold the MangaerRole\\n     * - contract is paused\\n     *\\n     * * Emits a {Unpaused} event\\n     */\\n    function unpause() external override {\\n        require(\\n            _isManager(_msgSender()),\\n            \\\"XenoERC20.unpause: INVALID_CALLER\\\"\\n        );\\n        _unpause();\\n    }\\n\\n    /* RecoverableInterface METHODS */\\n\\n    /**\\n     * @dev Recovers `amount` of ERC20 `token` sent to the contract.\\n     *\\n     * Requirements:\\n     * - caller must hold the ManagerRole\\n     * - `token`.balanceOf(contract) must be greater than or equal to `amount`\\n     *\\n     * * Emits a {Recovered} event\\n     */\\n    function recover(IERC20 token, uint256 amount) override external {\\n        require(\\n            _isManager(_msgSender()),\\n            \\\"XenoERC20.recover: INVALID_CALLER\\\"\\n        );\\n        _recover(token, amount);\\n    }\\n\\n    /* UUPSUpgradable METHODS */\\n\\n    /**\\n     * @dev Returns the contract address of the currently deployed logic.\\n     */\\n    function getImplementation() external view returns (address) {\\n        return _getImplementation();\\n    }\\n\\n\\n    /**\\n     * @dev Ensures only manager role accounts can upgrade contract logic.\\n     */\\n    function _authorizeUpgrade(address) internal view override {\\n        require(\\n            _isManager(_msgSender()),\\n            \\\"XenoERC20._authorizeUpgrade: INVALID_CALLER\\\"\\n        );\\n    }\\n}\\n\"\r\n    },\r\n    \"contracts/IXenoERC20.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\n/* INTERFACE INHERITANCE IMPORTS */\\n\\nimport \\\"./access/manager/interfaces/ManagerRoleInterface.sol\\\";\\n\\nimport \\\"./ERC20/interfaces/IERC20.sol\\\";\\nimport \\\"./ERC20/interfaces/IERC20Metadata.sol\\\";\\nimport \\\"./ERC20/interfaces/ERC20AllowanceInterface.sol\\\";\\nimport \\\"./ERC20/interfaces/IERC20Burnable.sol\\\";\\n\\nimport \\\"./extensions/freezable/interfaces/FreezableInterface.sol\\\";\\nimport \\\"./extensions/pausable/interfaces/PausableInterface.sol\\\";\\nimport \\\"./extensions/recoverable/interfaces/RecoverableInterface.sol\\\";\\n\\n/**\\n * @dev Interface for XenoERC20\\n */\\ninterface IXenoERC20 is\\n    ManagerRoleInterface,\\n    IERC20,\\n    IERC20Metadata,\\n    ERC20AllowanceInterface,\\n    IERC20Burnable,\\n    FreezableInterface,\\n    PausableInterface,\\n    RecoverableInterface\\n{ }\"\r\n    },\r\n    \"contracts/proxy/Initializable.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\n/* STORAGE */\\n\\nimport \\\"../ERC20/ERC20Storage.sol\\\";\\n\\n/**\\n * @dev This is a base contract to aid in writing upgradeable contracts, or any kind of contract that will be deployed\\n * behind a proxy. Since a proxied contract can't have a constructor, it's common to move constructor logic to an\\n * external initializer function, usually called `initialize`. It then becomes necessary to protect this initializer\\n * function so it can only be called once. The {initializer} modifier provided by this contract will have this effect.\\n *\\n * TIP: To avoid leaving the proxy in an uninitialized state, the initializer function should be called as early as\\n * possible by providing the encoded function call as the `_data` argument to {ERC1967Proxy-constructor}.\\n *\\n * CAUTION: When used with inheritance, manual care must be taken to not invoke a parent initializer twice, or to ensure\\n * that all initializers are idempotent. This is not verified automatically as constructors are by Solidity.\\n */\\nabstract contract Initializable is ERC20Storage {\\n\\n    /**\\n     * @dev Modifier to protect an initializer function from being invoked twice.\\n     */\\n    modifier initializer() {\\n        require(x.initializable.initializing || !x.initializable.initialized, \\\"Initializable: contract is already initialized\\\");\\n\\n        bool isTopLevelCall = !x.initializable.initializing;\\n        if (isTopLevelCall) {\\n            x.initializable.initializing = true;\\n            x.initializable.initialized = true;\\n        }\\n\\n        _;\\n\\n        if (isTopLevelCall) {\\n            x.initializable.initializing = false;\\n        }\\n    }\\n}\"\r\n    },\r\n    \"contracts/proxy/UUPSUpgradeable.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\n/* INHERITANCE IMPORTS */\\n\\nimport \\\"./ERC1967Upgrade.sol\\\";\\n\\n/**\\n * @dev An upgradeability mechanism designed for UUPS proxies. The functions included here can perform an upgrade of an\\n * {ERC1967Proxy}, when this contract is set as the implementation behind such a proxy.\\n *\\n * A security mechanism ensures that an upgrade does not turn off upgradeability accidentally, although this risk is\\n * reinstated if the upgrade retains upgradeability but removes the security mechanism, e.g. by replacing\\n * `UUPSUpgradeable` with a custom implementation of upgrades.\\n *\\n * The {_authorizeUpgrade} function must be overridden to include access restriction to the upgrade mechanism.\\n *\\n * _Available since v4.1._\\n */\\nabstract contract UUPSUpgradeable is ERC1967Upgrade {\\n    /**\\n     * @dev Upgrade the implementation of the proxy to `newImplementation`.\\n     *\\n     * Calls {_authorizeUpgrade}.\\n     *\\n     * Emits an {Upgraded} event.\\n     */\\n    function upgradeTo(address newImplementation) external virtual {\\n        _authorizeUpgrade(newImplementation);\\n        _upgradeToAndCallSecure(newImplementation, bytes(\\\"\\\"), false);\\n    }\\n\\n    /**\\n     * @dev Upgrade the implementation of the proxy to `newImplementation`, and subsequently execute the function call\\n     * encoded in `data`.\\n     *\\n     * Calls {_authorizeUpgrade}.\\n     *\\n     * Emits an {Upgraded} event.\\n     */\\n    function upgradeToAndCall(address newImplementation, bytes memory data) external payable virtual {\\n        _authorizeUpgrade(newImplementation);\\n        _upgradeToAndCallSecure(newImplementation, data, true);\\n    }\\n\\n    /**\\n     * @dev Function that should revert when `msg.sender` is not authorized to upgrade the contract. Called by\\n     * {upgradeTo} and {upgradeToAndCall}.\\n     *\\n     * Normally, this function will use an xref:access.adoc[access control] modifier such as {Ownable-onlyOwner}.\\n     *\\n     * ```solidity\\n     * function _authorizeUpgrade(address) internal override onlyOwner {}\\n     * ```\\n     */\\n    function _authorizeUpgrade(address newImplementation) internal virtual;\\n}\"\r\n    },\r\n    \"contracts/access/manager/ManagerRole.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\n/* DATA STRUCT IMPORTS */\\n\\nimport \\\"./ManagerRoleStore.sol\\\";\\n\\n/* LIBRARY IMPORTS */\\n\\nimport \\\"../base/Roles.sol\\\";\\n\\n/* INHERITANCE IMPORTS */\\n\\nimport \\\"../../utils/Context.sol\\\";\\nimport \\\"./interfaces/ManagerRoleEvents.sol\\\";\\n\\n/* STORAGE */\\n\\nimport \\\"../../ERC20/ERC20Storage.sol\\\"; \\n\\ncontract ManagerRole is Context, ManagerRoleEvents, ERC20Storage {\\n    /* LIBRARY USAGE */\\n    \\n    using Roles for Role;\\n\\n    /* MODIFIERS */\\n\\n    modifier onlyUninitialized() {\\n        require(!x.managerRole.initialized, \\\"ManagerRole.onlyUninitialized: ALREADY_INITIALIZED\\\");\\n        _;\\n    }\\n\\n    modifier onlyInitialized() {\\n        require(x.managerRole.initialized, \\\"ManagerRole.onlyInitialized: NOT_INITIALIZED\\\");\\n        _;\\n    }\\n\\n    modifier onlyManager() {\\n        require(_isManager(_msgSender()), \\\"ManagerRole.onlyManager: NOT_MANAGER\\\");\\n        _;\\n    }\\n\\n    /* INITIALIZE METHOD */\\n    \\n    /**\\n     * @dev Gives the intialize() caller the manager role during initialization. \\n     * It is the developer's responsibility to only call this \\n     * function in initialize() of the base contract context.\\n     */\\n    function _initializeManagerRole(\\n        address account\\n    )\\n        internal\\n        onlyUninitialized\\n     {\\n        _addManager_(account);\\n        x.managerRole.initialized = true;\\n    }\\n\\n    /* GETTER METHODS */\\n\\n    /**\\n     * @dev Returns true if `account` has the manager role, and false otherwise.\\n     */\\n    function _isManager(\\n        address account\\n    )\\n        internal\\n        view\\n        returns (bool)\\n    {\\n        return _isManager_(account);\\n    }\\n\\n\\n    /* STATE CHANGE METHODS */\\n    \\n    /**\\n     * @dev Give the manager role to `account`.\\n     */\\n    function _addManager(\\n        address account\\n    )\\n        internal\\n        onlyManager\\n        onlyInitialized\\n    {\\n        _addManager_(account);\\n    }\\n\\n    /**\\n     * @dev Renounce the manager role for the caller.\\n     */\\n    function _renounceManager()\\n        internal\\n        onlyInitialized\\n    {\\n        _removeManager_(_msgSender());\\n    }\\n\\n    /* PRIVATE LOGIC METHODS */\\n\\n    function _isManager_(\\n        address account\\n    )\\n        private\\n        view\\n        returns (bool)\\n    {\\n        return x.managerRole.managers._has(account);\\n    }\\n\\n    function _addManager_(\\n        address account\\n    )\\n        private\\n    {\\n        x.managerRole.managers._add(account);\\n        emit ManagerAdded(account);\\n    }\\n\\n    function _removeManager_(\\n        address account\\n    )\\n        private\\n    {\\n        x.managerRole.managers._safeRemove(account);\\n        emit ManagerRemoved(account);\\n    }\\n}\"\r\n    },\r\n    \"contracts/extensions/freezable/Freezable.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\n/* DATA STRUCT IMPORTS */\\n\\nimport \\\"./FreezableStore.sol\\\";\\n\\n/* INHERITANCE IMPORTS */\\n\\nimport \\\"../../utils/Context.sol\\\";\\nimport \\\"./interfaces/FreezableEvents.sol\\\";\\n\\n/* STORAGE */\\n\\nimport \\\"../../ERC20/ERC20Storage.sol\\\";\\n\\ncontract Freezable is Context, FreezableEvents, ERC20Storage {\\n\\n    /* MODIFIERS */\\n\\n    /**\\n     * @dev Modifier to make a function callable only when an account is not frozen.\\n     *\\n     * Requirements:\\n     *\\n     * - `account` must not be frozen.\\n     */\\n    modifier whenNotFrozen(address account) {\\n        require(\\n            !_frozen_(account),\\n            \\\"Freezable.whenNotFrozen: FROZEN\\\"\\n        );\\n        _;\\n    }\\n\\n    /**\\n     * @dev Modifier to make a function callable only when the `account` is frozen.\\n     *\\n     * Requirements:\\n     *\\n     * - `account` must be frozen.\\n     */\\n    modifier whenFrozen(address account) {\\n        require(\\n            _frozen_(account),\\n            \\\"Freezable.whenFrozen: NOT_FROZEN\\\"\\n        );\\n        _;\\n    }\\n\\n    /* GETTER METHODS */\\n\\n    /**\\n     * @dev Returns true if `account` is frozen, and false otherwise.\\n     */\\n    function _frozen(address account) internal view returns (bool) {\\n        return _frozen_(account);\\n    }\\n\\n    /* STATE CHANGE METHODS */\\n\\n    /**\\n     * @dev Triggers stopped `account` state.\\n     *\\n     * Requirements:\\n     *\\n     * - `account` must not be frozen.\\n     */\\n    function _freeze(address account) internal whenNotFrozen(account) {\\n        require(account != address(0), \\\"Freezable._freeze: ACCOUNT_ZERO_ADDRESS\\\");\\n        x.freezable.isFrozen[account] = true;\\n        emit Frozen(_msgSender(), account);\\n    }\\n\\n    /**\\n     * @dev Returns `account` to normal state.\\n     *\\n     * Requirements:\\n     *\\n     * - `account` must be frozen.\\n     */\\n    function _unfreeze(address account) internal whenFrozen(account) {\\n        x.freezable.isFrozen[account] = false;\\n        emit Unfrozen(_msgSender(), account);\\n    }\\n\\n    /* PRIVATE LOGIC METHODS */\\n\\n    function _frozen_(address account) private view returns (bool) {\\n        return x.freezable.isFrozen[account];\\n    }\\n}\"\r\n    },\r\n    \"contracts/extensions/pausable/Pausable.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\n/* DATA STRUCT IMPORTS */\\n\\nimport \\\"./PausableStore.sol\\\";\\n\\n/* INHERITANCE IMPORTS */\\n\\nimport \\\"../../utils/Context.sol\\\";\\nimport \\\"./interfaces/PausableEvents.sol\\\";\\n\\n/* STORAGE */\\n\\nimport \\\"../../ERC20/ERC20Storage.sol\\\";\\n\\ncontract Pausable is Context, PausableEvents, ERC20Storage {\\n\\n    /* MODIFIERS */\\n\\n    /**\\n     * @dev Modifier to make a function callable only when the contract is not paused.\\n     *\\n     * Requirements:\\n     *\\n     * - The contract must not be paused.\\n     */\\n    modifier whenNotPaused() {\\n        require(!_paused_(), \\\"Pausable.whenNotPaused: PAUSED\\\");\\n        _;\\n    }\\n\\n    /**\\n     * @dev Modifier to make a function callable only when the contract is paused.\\n     *\\n     * Requirements:\\n     *\\n     * - The contract must be paused.\\n     */\\n    modifier whenPaused() {\\n        require(_paused_(), \\\"Pausable.whenPaused: NOT_PAUSED\\\");\\n        _;\\n    }\\n    \\n    /* INITIALIZE METHOD */\\n\\n    /**\\n     * @dev Sets the value for {isPaused} to false once during initialization. \\n     * It is the developer's responsibility to only call this \\n     * function in initialize() of the base contract context.\\n     */\\n    function _initializePausable() internal {\\n        x.pausable.isPaused = false;\\n    }\\n\\n    /* GETTER METHODS */\\n\\n    /**\\n     * @dev Returns true if the contract is paused, and false otherwise.\\n     */\\n    function _paused() internal view returns (bool) {\\n        return _paused_();\\n    }\\n\\n    /* STATE CHANGE METHODS */\\n\\n    /**\\n     * @dev Triggers stopped state.\\n     *\\n     * Requirements:\\n     *\\n     * - The contract must not be paused.\\n     */\\n    function _pause() internal whenNotPaused {\\n        x.pausable.isPaused = true;\\n        emit Paused(_msgSender());\\n    }\\n\\n    /**\\n     * @dev Returns to normal state.\\n     *\\n     * Requirements:\\n     *\\n     * - The contract must be paused.\\n     */\\n    function _unpause() internal whenPaused {\\n        x.pausable.isPaused = false;\\n        emit Unpaused(_msgSender());\\n    }\\n\\n    /* PRIVATE LOGIC METHODS */ \\n\\n    function _paused_() private view returns (bool) {\\n        return x.pausable.isPaused;\\n    }\\n}\"\r\n    },\r\n    \"contracts/extensions/recoverable/Recoverable.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\n/* INTERFACE IMPORTS */\\n\\nimport \\\"../../ERC20/interfaces/IERC20.sol\\\";\\n\\n/* INHERITANCE IMPORTS */\\n\\nimport \\\"../../utils/Context.sol\\\";\\nimport \\\"./interfaces/RecoverableEvents.sol\\\";\\n\\n\\ncontract Recoverable is Context, RecoverableEvents {\\n    /**\\n     * @param token - the token contract address to recover\\n     * @param amount - number of tokens to be recovered\\n     */\\n    function _recover(IERC20 token, uint256 amount) internal virtual {\\n        require(token.balanceOf(address(this)) >= amount, \\\"Recoverable.recover: INVALID_AMOUNT\\\");\\n        token.transfer(_msgSender(), amount);\\n        emit Recovered(_msgSender(), token, amount);\\n    }\\n}\"\r\n    },\r\n    \"contracts/ERC20/ERC20.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\n/* INHERITANCE IMPORTS */\\n\\nimport \\\"../utils/Context.sol\\\";\\nimport \\\"./interfaces/IERC20Events.sol\\\";\\n\\n/* STORAGE */\\n\\nimport \\\"./ERC20Storage.sol\\\";\\n\\n/**\\n * @dev Implementation of the {IERC20} interface.\\n *\\n * TIP: For a detailed writeup see our guide\\n * https://forum.zeppelin.solutions/t/how-to-implement-erc20-supply-mechanisms/226[How\\n * to implement supply mechanisms].\\n *\\n * We have followed general OpenZeppelin Contracts guidelines: functions revert\\n * instead returning `false` on failure. This behavior is nonetheless\\n * conventional and does not conflict with the expectations of ERC20\\n * applications.\\n *\\n * Additionally, an {Approval} event is emitted on calls to {transferFrom}.\\n * This allows applications to reconstruct the allowance for all accounts just\\n * by listening to said events. Other implementations of the EIP may not emit\\n * these events, as it isn't required by the specification.\\n *\\n * Finally, the non-standard {decreaseAllowance} and {increaseAllowance}\\n * functions have been added to mitigate the well-known issues around setting\\n * allowances. See {IERC20-approve}.\\n */\\ncontract ERC20 is Context, IERC20Events, ERC20Storage {\\n    \\n    /* INITIALIZE METHOD */\\n\\n    /**\\n     * @dev Sets the values for {name}, {symbol}, {decimals}, and {inital minted supply}.\\n     * All of these values are immutable: they can only be set once during\\n     * initialization. This means it is the developer's responsibility to\\n     * only call this function in the initialize function of the base contract context.\\n     */\\n    function _initalizeERC20(string calldata setName, string calldata setSymbol, uint8 setDecimals, uint256 initialSupply) internal {\\n        x.erc20.named = setName;\\n        x.erc20.symboled = setSymbol;\\n        x.erc20.decimaled = setDecimals;\\n        _mint_(_msgSender(), initialSupply);\\n    }\\n\\n    /* GETTER METHODS */\\n\\n    /**\\n     * @dev Returns the name of the token.\\n     */\\n    function _name() internal view returns (string memory) {\\n        return x.erc20.named;\\n    }\\n\\n    /**\\n     * @dev Returns the symbol of the token, usually a shorter version of the\\n     * name.\\n     */\\n    function _symbol() internal view returns (string memory) {\\n        return x.erc20.symboled;\\n    }\\n\\n    /**\\n     * @dev Returns the number of decimals used to get its user representation.\\n     * For example, if `decimals` equals `2`, a balance of `505` tokens should\\n     * be displayed to a user as `5.05` (`505 / 10 ** 2`).\\n     *\\n     * Tokens usually opt for a value of 18, imitating the relationship between\\n     * Ether and Wei. This is the value {ERC20} uses, unless this function is\\n     * overridden;\\n     *\\n     * NOTE: This information is only used for _display_ purposes: it in\\n     * no way affects any of the arithmetic of the contract, including\\n     * {IERC20-balanceOf} and {IERC20-transfer}.\\n     */\\n    function _decimals() internal view returns (uint8) {\\n        return x.erc20.decimaled;\\n    }\\n\\n    /**\\n     * @dev See {IERC20-totalSupply}.\\n     */\\n    function _totalSupply() internal view returns (uint256) {\\n        return x.erc20.total;\\n    }\\n\\n    /**\\n     * @dev See {IERC20-balanceOf}.\\n     */\\n    function _balanceOf(address account) internal view returns (uint256) {\\n        return x.erc20.balances[account];\\n    }\\n\\n    /* STATE CHANGE METHODS */\\n\\n    /**\\n     * @dev See {IERC20-transfer}.\\n     *\\n     * Requirements:\\n     *\\n     * - `recipient` cannot be the zero address.\\n     * - the caller must have a balance of at least `amount`.\\n     */\\n    function _transfer(address sender, address recipient, uint256 amount) internal returns (bool) {\\n        _transfer_(sender, recipient, amount);\\n        return true;\\n    }\\n\\n    /**\\n     * @dev See {IERC20-allowance}.\\n     */\\n    function _allowance(address owner, address spender) internal view returns (uint256) {\\n        return _allowance_(owner, spender);\\n    }\\n\\n    /**\\n     * @dev See {IERC20-approve}.\\n     *\\n     * Requirements:\\n     *\\n     * - `spender` cannot be the zero address.\\n     */\\n    function _approve(address spender, uint256 amount) internal returns (bool) {\\n        _approve_(_msgSender(), spender, amount);\\n        return true;\\n    }\\n\\n    /**\\n     * @dev See {IERC20-transferFrom}.\\n     *\\n     * Emits an {Approval} event indicating the updated allowance. This is not\\n     * required by the EIP. See the note at the beginning of {ERC20}.\\n     *\\n     * Requirements:\\n     *\\n     * - `sender` and `recipient` cannot be the zero address.\\n     * - `sender` must have a balance of at least `amount`.\\n     * - the caller must have allowance for ``sender``'s tokens of at least\\n     * `amount`.\\n     */\\n    function _transferFrom(\\n        address sender,\\n        address recipient,\\n        uint256 amount\\n    ) internal returns (bool) {\\n        _transfer_(sender, recipient, amount);\\n\\n        uint256 currentAllowance = x.erc20.allowances[sender][_msgSender()];\\n        require(currentAllowance >= amount, \\\"ERC20._transferFrom: AMOUNT_EXCEEDS_ALLOWANCE\\\");\\n        unchecked {\\n            _approve_(sender, _msgSender(), currentAllowance - amount);\\n        }\\n\\n        return true;\\n    }\\n\\n    /**\\n     * @dev Atomically increases the allowance granted to `spender` by the caller.\\n     *\\n     * This is an alternative to {approve} that can be used as a mitigation for\\n     * problems described in {IERC20-approve}.\\n     *\\n     * Emits an {Approval} event indicating the updated allowance.\\n     *\\n     * Requirements:\\n     *\\n     * - `spender` cannot be the zero address.\\n     */\\n    function _increaseAllowance(address spender, uint256 addedValue) internal returns (bool) {\\n        _approve_(_msgSender(), spender, x.erc20.allowances[_msgSender()][spender] + addedValue);\\n        return true;\\n    }\\n\\n    /**\\n     * @dev Atomically decreases the allowance granted to `spender` by the caller.\\n     *\\n     * This is an alternative to {approve} that can be used as a mitigation for\\n     * problems described in {IERC20-approve}.\\n     *\\n     * Emits an {Approval} event indicating the updated allowance.\\n     *\\n     * Requirements:\\n     *\\n     * - `spender` cannot be the zero address.\\n     * - `spender` must have allowance for the caller of at least\\n     * `subtractedValue`.\\n     */\\n    function _decreaseAllowance(address spender, uint256 subtractedValue) internal returns (bool) {\\n        uint256 currentAllowance = x.erc20.allowances[_msgSender()][spender];\\n        require(currentAllowance >= subtractedValue, \\\"ERC20._decreaseAllowance: DECREASE_BELOW_ZERO\\\");\\n        unchecked {\\n            _approve_(_msgSender(), spender, currentAllowance - subtractedValue);\\n        }\\n\\n        return true;\\n    }\\n\\n    /**\\n     * @dev Destroys `amount` tokens from the caller.\\n     *\\n     * See {ERC20-_burn}.\\n     */\\n    function _burn(uint256 amount) internal returns (bool) {\\n        _burn_(_msgSender(), amount);\\n        return true;\\n    }\\n\\n    /**\\n     * @dev Destroys `amount` tokens from `account`, deducting from the caller's\\n     * allowance.\\n     *\\n     * See {ERC20-_burn} and {ERC20-allowance}.\\n     *\\n     * Requirements:\\n     *\\n     * - the caller must have allowance for ``accounts``'s tokens of at least\\n     * `amount`.\\n     */\\n    function _burnFrom(address account, uint256 amount) internal returns (bool) {\\n        uint256 currentAllowance = _allowance_(account, _msgSender());\\n        require(\\n            currentAllowance >= amount,\\n            \\\"ERC20._burnFrom: AMOUNT_EXCEEDS_ALLOWANCE\\\"\\n        );\\n        unchecked {\\n            _approve_(account, _msgSender(), currentAllowance - amount);\\n        }\\n        _burn_(account, amount);\\n        return true;\\n    }\\n\\n    /* PRIVATE LOGIC METHODS */\\n\\n    function _allowance_(address owner, address spender) private view returns (uint256) {\\n        return x.erc20.allowances[owner][spender];\\n    }\\n\\n    /**\\n     * @dev Moves `amount` of tokens from `sender` to `recipient`.\\n     *\\n     * This internal function is equivalent to {transfer}, and can be used to\\n     * e.g. implement automatic token fees, slashing mechanisms, etc.\\n     *\\n     * Emits a {Transfer} event.\\n     *\\n     * Requirements:\\n     *\\n     * - `sender` cannot be the zero address.\\n     * - `recipient` cannot be the zero address.\\n     * - `sender` must have a balance of at least `amount`.\\n     */\\n    function _transfer_(\\n        address sender,\\n        address recipient,\\n        uint256 amount\\n    ) private {\\n        require(sender != address(0), \\\"ERC20._transfer_: SENDER_ZERO_ADDRESS\\\");\\n        require(recipient != address(0), \\\"ERC20._transfer_: RECIPIENT_ZERO_ADDRESS\\\");\\n\\n        _beforeTokenTransfer(sender, recipient, amount);\\n\\n        uint256 senderBalance = x.erc20.balances[sender];\\n        require(senderBalance >= amount, \\\"ERC20._transfer_: AMOUNT_EXCEEDS_BALANCE\\\");\\n        unchecked {\\n            x.erc20.balances[sender] = senderBalance - amount;\\n        }\\n        x.erc20.balances[recipient] += amount;\\n\\n        emit Transfer(sender, recipient, amount);\\n\\n        _afterTokenTransfer(sender, recipient, amount);\\n    }\\n\\n    /** @dev Creates `amount` tokens and assigns them to `account`, increasing\\n     * the total supply.\\n     *\\n     * Emits a {Transfer} event with `from` set to the zero address.\\n     *\\n     * Requirements:\\n     *\\n     * - `account` cannot be the zero address.\\n     */\\n    function _mint_(address account, uint256 amount) private {\\n        require(account != address(0), \\\"ERC20._mint_: ACCOUNT_ZERO_ADDRESS\\\");\\n\\n        _beforeTokenTransfer(address(0), account, amount);\\n\\n        x.erc20.total += amount;\\n        x.erc20.balances[account] += amount;\\n        emit Transfer(address(0), account, amount);\\n\\n        _afterTokenTransfer(address(0), account, amount);\\n    }\\n\\n    /**\\n     * @dev Destroys `amount` tokens from `account`, reducing the\\n     * total supply.\\n     *\\n     * Emits a {Transfer} event with `to` set to the zero address.\\n     *\\n     * Requirements:\\n     *\\n     * - `account` cannot be the zero address.\\n     * - `account` must have at least `amount` tokens.\\n     */\\n    function _burn_(address account, uint256 amount) private {\\n        require(account != address(0), \\\"ERC20._burn_: ACCOUNT_ZERO_ADDRESS\\\");\\n\\n        _beforeTokenTransfer(account, address(0), amount);\\n\\n        uint256 accountBalance = x.erc20.balances[account];\\n        require(accountBalance >= amount, \\\"ERC20._burn_: AMOUNT_EXCEEDS_BALANCE\\\");\\n        unchecked {\\n            x.erc20.balances[account] = accountBalance - amount;\\n        }\\n        x.erc20.total -= amount;\\n\\n        emit Transfer(account, address(0), amount);\\n\\n        _afterTokenTransfer(account, address(0), amount);\\n    }\\n\\n    /**\\n     * @dev Sets `amount` as the allowance of `spender` over the `owner` s tokens.\\n     *\\n     * This internal function is equivalent to `approve`, and can be used to\\n     * e.g. set automatic allowances for certain subsystems, etc.\\n     *\\n     * Emits an {Approval} event.\\n     *\\n     * Requirements:\\n     *\\n     * - `owner` cannot be the zero address.\\n     * - `spender` cannot be the zero address.\\n     */\\n    function _approve_(\\n        address owner,\\n        address spender,\\n        uint256 amount\\n    ) private {\\n        require(owner != address(0), \\\"ERC20._approve_: OWNER_ZERO_ADDRESS\\\");\\n        require(spender != address(0), \\\"ERC20._approve_: SPENDER_ZERO_ADDRESS\\\");\\n\\n        x.erc20.allowances[owner][spender] = amount;\\n        emit Approval(owner, spender, amount);\\n    }\\n\\n    /* INTERNAL HOOKS */\\n\\n    /**\\n     * @dev Hook that is called before any transfer of tokens. This includes\\n     * minting and burning.\\n     *\\n     * Calling conditions:\\n     *\\n     * - when `from` and `to` are both non-zero, `amount` of ``from``'s tokens\\n     * will be transferred to `to`.\\n     * - when `from` is zero, `amount` tokens will be minted for `to`.\\n     * - when `to` is zero, `amount` of ``from``'s tokens will be burned.\\n     * - `from` and `to` are never both zero.\\n     *\\n     * To learn more about hooks, head to xref:ROOT:extending-contracts.adoc#using-hooks[Using Hooks].\\n     */\\n    function _beforeTokenTransfer(\\n        address from,\\n        address to,\\n        uint256 amount\\n    ) internal {}\\n\\n    /**\\n     * @dev Hook that is called after any transfer of tokens. This includes\\n     * minting and burning.\\n     *\\n     * Calling conditions:\\n     *\\n     * - when `from` and `to` are both non-zero, `amount` of ``from``'s tokens\\n     * has been transferred to `to`.\\n     * - when `from` is zero, `amount` tokens have been minted for `to`.\\n     * - when `to` is zero, `amount` of ``from``'s tokens have been burned.\\n     * - `from` and `to` are never both zero.\\n     *\\n     * To learn more about hooks, head to xref:ROOT:extending-contracts.adoc#using-hooks[Using Hooks].\\n     */\\n    function _afterTokenTransfer(\\n        address from,\\n        address to,\\n        uint256 amount\\n    ) internal {}\\n}\"\r\n    },\r\n    \"contracts/access/manager/interfaces/ManagerRoleInterface.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\ninterface ManagerRoleInterface {    \\n\\n    /**\\n     * @dev Returns true if `account` has the manager role, and false otherwise.\\n     */\\n    function isManager(address account) external view returns (bool);\\n\\n    /**\\n     * @dev Give the manager role to `account`.\\n     */\\n    function addManager(address account) external;\\n\\n    /**\\n     * @dev Renounce the manager role for the caller.\\n     */\\n    function renounceManager() external;\\n\\n}\"\r\n    },\r\n    \"contracts/ERC20/interfaces/IERC20.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC20 standard as defined in the EIP.\\n */\\ninterface IERC20 {\\n    /**\\n     * @dev Returns the amount of tokens in existence.\\n     */\\n    function totalSupply() external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the amount of tokens owned by `account`.\\n     */\\n    function balanceOf(address account) external view returns (uint256);\\n\\n    /**\\n     * @dev Moves `amount` tokens from the caller's account to `recipient`.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transfer(address recipient, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Returns the remaining number of tokens that `spender` will be\\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\\n     * zero by default.\\n     *\\n     * This value changes when {approve} or {transferFrom} are called.\\n     */\\n    function allowance(address owner, address spender) external view returns (uint256);\\n\\n    /**\\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\\n     * that someone may use both the old and the new allowance by unfortunate\\n     * transaction ordering. One possible solution to mitigate this race\\n     * condition is to first reduce the spender's allowance to 0 and set the\\n     * desired value afterwards:\\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address spender, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Moves `amount` tokens from `sender` to `recipient` using the\\n     * allowance mechanism. `amount` is then deducted from the caller's\\n     * allowance.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(\\n        address sender,\\n        address recipient,\\n        uint256 amount\\n    ) external returns (bool);\\n\\n}\"\r\n    },\r\n    \"contracts/ERC20/interfaces/IERC20Metadata.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"./IERC20.sol\\\";\\n\\n/**\\n * @dev Interface for the optional metadata functions from the ERC20 standard.\\n *\\n * _Available since v4.1._\\n */\\ninterface IERC20Metadata is IERC20 {\\n    /**\\n     * @dev Returns the name of the token.\\n     */\\n    function name() external view returns (string memory);\\n\\n    /**\\n     * @dev Returns the symbol of the token.\\n     */\\n    function symbol() external view returns (string memory);\\n\\n    /**\\n     * @dev Returns the decimals places of the token.\\n     */\\n    function decimals() external view returns (uint8);\\n}\"\r\n    },\r\n    \"contracts/ERC20/interfaces/ERC20AllowanceInterface.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC20 standard as defined in the EIP.\\n */\\ninterface ERC20AllowanceInterface {\\n\\n    /**\\n     * @dev Atomically increases the allowance granted to `spender` by the caller.\\n     */\\n    function increaseAllowance(address spender, uint256 addedValue) external returns (bool);\\n\\n    /**\\n     * @dev Atomically decreases the allowance granted to `spender` by the caller.\\n     */\\n    function decreaseAllowance(address spender, uint256 subtractedValue) external returns (bool);\\n\\n}\"\r\n    },\r\n    \"contracts/ERC20/interfaces/IERC20Burnable.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\ninterface IERC20Burnable {\\n    \\n    /**\\n     * @dev Burns `amount` tokens from the caller account\\n     */\\n    function burn(uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Burns `amount` tokens from caller using the\\n     * allowance mechanism. `amount` is then deducted from the caller's\\n     * allowance.\\n     */\\n    function burnFrom(address account, uint256 amount) external returns (bool);\\n\\n}\"\r\n    },\r\n    \"contracts/extensions/freezable/interfaces/FreezableInterface.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\ninterface FreezableInterface {\\n\\n    /**\\n     * @dev Returns the frozen state of `account`.\\n     */\\n    function frozen(address account) external view returns (bool);\\n\\n    /**\\n     * @dev Freezes activity of `account` until unfrozen\\n     */\\n    function freeze(address account)  external;\\n\\n    /**\\n     * @dev Restores `account` activity\\n     */\\n    function unfreeze(address account) external;\\n\\n}\"\r\n    },\r\n    \"contracts/extensions/pausable/interfaces/PausableInterface.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\ninterface PausableInterface {\\n\\n    /**\\n     * @dev Returns the paused state of the contract.\\n     */\\n    function paused() external view returns (bool);\\n\\n    /**\\n     * @dev Pauses state changing activity of the entire contract\\n     */\\n    function pause() external;\\n\\n    /**\\n     * @dev Restores state changing activity to the entire contract\\n     */\\n    function unpause() external;\\n\\n}\"\r\n    },\r\n    \"contracts/extensions/recoverable/interfaces/RecoverableInterface.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../../../ERC20/interfaces/IERC20.sol\\\";\\ninterface RecoverableInterface {\\n\\n    /**\\n     * @dev Recovers `amount` of ERC20 `token` sent to the contract.\\n     */\\n    function recover(IERC20 token, uint256 amount) external;\\n\\n}\"\r\n    },\r\n    \"contracts/ERC20/ERC20Storage.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\n/* DATA STRUCT IMPORTS */\\n\\nimport \\\"../XenoERC20Store.sol\\\";\\n\\n/* STORAGE */\\n\\ncontract ERC20Storage {\\n    XenoERC20Store internal x;\\n    uint256[50] private ______gap;\\n}\"\r\n    },\r\n    \"contracts/XenoERC20Store.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\n/* DATA STRUCT IMPORTS */\\n\\nimport \\\"./proxy/InitializableStore.sol\\\";\\nimport \\\"./access/manager/ManagerRoleStore.sol\\\";\\nimport \\\"./ERC20/ERC20Store.sol\\\";\\nimport \\\"./extensions/pausable/PausableStore.sol\\\";\\nimport \\\"./extensions/freezable/FreezableStore.sol\\\";\\n\\nstruct XenoERC20Store {\\n    InitializableStore initializable;\\n    ManagerRoleStore managerRole;\\n    ERC20Store erc20;\\n    PausableStore pausable;\\n    FreezableStore freezable; // the slot taken by the struct of this is the last slotted item\\n}\"\r\n    },\r\n    \"contracts/proxy/InitializableStore.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\n/* STORAGE LAYOUT */\\n\\nstruct InitializableStore {\\n    /**\\n     * @dev Indicates that the contract has been initialized.\\n     */\\n    bool initialized;\\n\\n    /**\\n     * @dev Indicates that the contract is in the process of being initialized.\\n     */\\n    bool initializing;\\n}\"\r\n    },\r\n    \"contracts/access/manager/ManagerRoleStore.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\n/* DATA STRUCT IMPORTS */\\n\\nimport \\\"../base/RolesStore.sol\\\";\\n\\n/* STORAGE LAYOUT */\\n\\nstruct ManagerRoleStore {\\n    bool initialized;\\n    Role managers;\\n}\"\r\n    },\r\n    \"contracts/ERC20/ERC20Store.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\n/* STORAGE LAYOUT */\\n\\nstruct ERC20Store {\\n    mapping(address => uint256) balances;\\n    mapping(address => mapping(address => uint256)) allowances;\\n    uint256 total;\\n    string named;\\n    string symboled;\\n    uint8 decimaled;\\n}\"\r\n    },\r\n    \"contracts/extensions/pausable/PausableStore.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\n/* STORAGE LAYOUT */\\n\\nstruct PausableStore {\\n    bool isPaused;\\n} \"\r\n    },\r\n    \"contracts/extensions/freezable/FreezableStore.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\n/* STORAGE LAYOUT */\\n\\nstruct FreezableStore {\\n    mapping(address => bool) isFrozen;\\n}\"\r\n    },\r\n    \"contracts/access/base/RolesStore.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\n/* STORAGE */\\n\\nstruct Role {\\n    mapping (address => bool) bearer;\\n    uint256 numberOfBearers;\\n}\"\r\n    },\r\n    \"contracts/proxy/ERC1967Upgrade.sol\": {\r\n      \"content\": \"\\n// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.2;\\n\\n/* LIBRARY IMPORTS */\\n\\nimport \\\"./lib/Address.sol\\\";\\nimport \\\"./lib/StorageSlot.sol\\\";\\n\\n/**\\n * @dev This abstract contract provides getters and event emitting update functions for\\n * https://eips.ethereum.org/EIPS/eip-1967[EIP1967] slots.\\n *\\n * _Available since v4.1._\\n *\\n * @custom:oz-upgrades-unsafe-allow delegatecall\\n */\\nabstract contract ERC1967Upgrade {\\n    // This is the keccak-256 hash of \\\"eip1967.proxy.rollback\\\" subtracted by 1\\n    bytes32 private constant _ROLLBACK_SLOT = 0x4910fdfa16fed3260ed0e7147f7cc6da11a60208b5b9406d12a635614ffd9143;\\n\\n    /**\\n     * @dev Storage slot with the address of the current implementation.\\n     * This is the keccak-256 hash of \\\"eip1967.proxy.implementation\\\" subtracted by 1, and is\\n     * validated in the constructor.\\n     */\\n    bytes32 internal constant _IMPLEMENTATION_SLOT = 0x360894a13ba1a3210667c828492db98dca3e2076cc3735a920a3ca505d382bbc;\\n\\n    /**\\n     * @dev Emitted when the implementation is upgraded.\\n     */\\n    event Upgraded(address indexed implementation);\\n\\n    /**\\n     * @dev Returns the current implementation address.\\n     */\\n    function _getImplementation() internal view returns (address) {\\n        return StorageSlot.getAddressSlot(_IMPLEMENTATION_SLOT).value;\\n    }\\n\\n    /**\\n     * @dev Stores a new address in the EIP1967 implementation slot.\\n     */\\n    function _setImplementation(address newImplementation) private {\\n        require(Address.isContract(newImplementation), \\\"ERC1967: new implementation is not a contract\\\");\\n        StorageSlot.getAddressSlot(_IMPLEMENTATION_SLOT).value = newImplementation;\\n    }\\n\\n    /**\\n     * @dev Perform implementation upgrade\\n     *\\n     * Emits an {Upgraded} event.\\n     */\\n    function _upgradeTo(address newImplementation) internal {\\n        _setImplementation(newImplementation);\\n        emit Upgraded(newImplementation);\\n    }\\n\\n    /**\\n     * @dev Perform implementation upgrade with additional setup call.\\n     *\\n     * Emits an {Upgraded} event.\\n     */\\n    function _upgradeToAndCall(\\n        address newImplementation,\\n        bytes memory data,\\n        bool forceCall\\n    ) internal {\\n        _upgradeTo(newImplementation);\\n        if (data.length > 0 || forceCall) {\\n            Address.functionDelegateCall(newImplementation, data);\\n        }\\n    }\\n\\n    /**\\n     * @dev Perform implementation upgrade with security checks for UUPS proxies, and additional setup call.\\n     *\\n     * Emits an {Upgraded} event.\\n     */\\n    function _upgradeToAndCallSecure(\\n        address newImplementation,\\n        bytes memory data,\\n        bool forceCall\\n    ) internal {\\n        address oldImplementation = _getImplementation();\\n\\n        // Initial upgrade and setup call\\n        _setImplementation(newImplementation);\\n        if (data.length > 0 || forceCall) {\\n            Address.functionDelegateCall(newImplementation, data);\\n        }\\n\\n        // Perform rollback test if not already in progress\\n        StorageSlot.BooleanSlot storage rollbackTesting = StorageSlot.getBooleanSlot(_ROLLBACK_SLOT);\\n        if (!rollbackTesting.value) {\\n            // Trigger rollback using upgradeTo from the new implementation\\n            rollbackTesting.value = true;\\n            Address.functionDelegateCall(\\n                newImplementation,\\n                abi.encodeWithSignature(\\\"upgradeTo(address)\\\", oldImplementation)\\n            );\\n            rollbackTesting.value = false;\\n            // Check rollback was effective\\n            require(oldImplementation == _getImplementation(), \\\"ERC1967Upgrade: upgrade breaks further upgrades\\\");\\n            // Finally reset to the new implementation and log the upgrade\\n            _upgradeTo(newImplementation);\\n        }\\n    }\\n}\"\r\n    },\r\n    \"contracts/proxy/lib/Address.sol\": {\r\n      \"content\": \"\\n// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Collection of functions related to the address type\\n */\\nlibrary Address {\\n    /**\\n     * @dev Returns true if `account` is a contract.\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * It is unsafe to assume that an address for which this function returns\\n     * false is an externally-owned account (EOA) and not a contract.\\n     *\\n     * Among others, `isContract` will return false for the following\\n     * types of addresses:\\n     *\\n     *  - an externally-owned account\\n     *  - a contract in construction\\n     *  - an address where a contract will be created\\n     *  - an address where a contract lived, but was destroyed\\n     * ====\\n     */\\n    function isContract(address account) internal view returns (bool) {\\n        // This method relies on extcodesize, which returns 0 for contracts in\\n        // construction, since the code is only stored at the end of the\\n        // constructor execution.\\n\\n        uint256 size;\\n        assembly {\\n            size := extcodesize(account)\\n        }\\n        return size > 0;\\n    }\\n\\n    /**\\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\\n     * `recipient`, forwarding all available gas and reverting on errors.\\n     *\\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\\n     * imposed by `transfer`, making them unable to receive funds via\\n     * `transfer`. {sendValue} removes this limitation.\\n     *\\n     * https://diligence.consensys.net/posts/2019/09/stop-using-soliditys-transfer-now/[Learn more].\\n     *\\n     * IMPORTANT: because control is transferred to `recipient`, care must be\\n     * taken to not create reentrancy vulnerabilities. Consider using\\n     * {ReentrancyGuard} or the\\n     * https://solidity.readthedocs.io/en/v0.5.11/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\\n     */\\n    function sendValue(address payable recipient, uint256 amount) internal {\\n        require(address(this).balance >= amount, \\\"Address: insufficient balance\\\");\\n\\n        (bool success, ) = recipient.call{value: amount}(\\\"\\\");\\n        require(success, \\\"Address: unable to send value, recipient may have reverted\\\");\\n    }\\n\\n    /**\\n     * @dev Performs a Solidity function call using a low level `call`. A\\n     * plain `call` is an unsafe replacement for a function call: use this\\n     * function instead.\\n     *\\n     * If `target` reverts with a revert reason, it is bubbled up by this\\n     * function (like regular Solidity function calls).\\n     *\\n     * Returns the raw returned data. To convert to the expected return value,\\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\\n     *\\n     * Requirements:\\n     *\\n     * - `target` must be a contract.\\n     * - calling `target` with `data` must not revert.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionCall(target, data, \\\"Address: low-level call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\\n     * `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, 0, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but also transferring `value` wei to `target`.\\n     *\\n     * Requirements:\\n     *\\n     * - the calling contract must have an ETH balance of at least `value`.\\n     * - the called Solidity function must be `payable`.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, value, \\\"Address: low-level call with value failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\\n     * with `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        require(address(this).balance >= value, \\\"Address: insufficient balance for call\\\");\\n        require(isContract(target), \\\"Address: call to non-contract\\\");\\n\\n        (bool success, bytes memory returndata) = target.call{value: value}(data);\\n        return verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\\n        return functionStaticCall(target, data, \\\"Address: low-level static call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal view returns (bytes memory) {\\n        require(isContract(target), \\\"Address: static call to non-contract\\\");\\n\\n        (bool success, bytes memory returndata) = target.staticcall(data);\\n        return verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionDelegateCall(target, data, \\\"Address: low-level delegate call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        require(isContract(target), \\\"Address: delegate call to non-contract\\\");\\n\\n        (bool success, bytes memory returndata) = target.delegatecall(data);\\n        return verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Tool to verifies that a low level call was successful, and revert if it wasn't, either by bubbling the\\n     * revert reason using the provided one.\\n     *\\n     * _Available since v4.3._\\n     */\\n    function verifyCallResult(\\n        bool success,\\n        bytes memory returndata,\\n        string memory errorMessage\\n    ) internal pure returns (bytes memory) {\\n        if (success) {\\n            return returndata;\\n        } else {\\n            // Look for revert reason and bubble it up if present\\n            if (returndata.length > 0) {\\n                // The easiest way to bubble the revert reason is using memory via assembly\\n\\n                assembly {\\n                    let returndata_size := mload(returndata)\\n                    revert(add(32, returndata), returndata_size)\\n                }\\n            } else {\\n                revert(errorMessage);\\n            }\\n        }\\n    }\\n}\"\r\n    },\r\n    \"contracts/proxy/lib/StorageSlot.sol\": {\r\n      \"content\": \"\\n// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Library for reading and writing primitive types to specific storage slots.\\n *\\n * Storage slots are often used to avoid storage conflict when dealing with upgradeable contracts.\\n * This library helps with reading and writing to such slots without the need for inline assembly.\\n *\\n * The functions in this library return Slot structs that contain a `value` member that can be used to read or write.\\n *\\n * Example usage to set ERC1967 implementation slot:\\n * ```\\n * contract ERC1967 {\\n *     bytes32 internal constant _IMPLEMENTATION_SLOT = 0x360894a13ba1a3210667c828492db98dca3e2076cc3735a920a3ca505d382bbc;\\n *\\n *     function _getImplementation() internal view returns (address) {\\n *         return StorageSlot.getAddressSlot(_IMPLEMENTATION_SLOT).value;\\n *     }\\n *\\n *     function _setImplementation(address newImplementation) internal {\\n *         require(Address.isContract(newImplementation), \\\"ERC1967: new implementation is not a contract\\\");\\n *         StorageSlot.getAddressSlot(_IMPLEMENTATION_SLOT).value = newImplementation;\\n *     }\\n * }\\n * ```\\n *\\n * _Available since v4.1 for `address`, `bool`, `bytes32`, and `uint256`._\\n */\\nlibrary StorageSlot {\\n    struct AddressSlot {\\n        address value;\\n    }\\n\\n    struct BooleanSlot {\\n        bool value;\\n    }\\n\\n    struct Bytes32Slot {\\n        bytes32 value;\\n    }\\n\\n    struct Uint256Slot {\\n        uint256 value;\\n    }\\n\\n    /**\\n     * @dev Returns an `AddressSlot` with member `value` located at `slot`.\\n     */\\n    function getAddressSlot(bytes32 slot) internal pure returns (AddressSlot storage r) {\\n        assembly {\\n            r.slot := slot\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns an `BooleanSlot` with member `value` located at `slot`.\\n     */\\n    function getBooleanSlot(bytes32 slot) internal pure returns (BooleanSlot storage r) {\\n        assembly {\\n            r.slot := slot\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns an `Bytes32Slot` with member `value` located at `slot`.\\n     */\\n    function getBytes32Slot(bytes32 slot) internal pure returns (Bytes32Slot storage r) {\\n        assembly {\\n            r.slot := slot\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns an `Uint256Slot` with member `value` located at `slot`.\\n     */\\n    function getUint256Slot(bytes32 slot) internal pure returns (Uint256Slot storage r) {\\n        assembly {\\n            r.slot := slot\\n        }\\n    }\\n}\"\r\n    },\r\n    \"contracts/access/base/Roles.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\n/* DATA STRUCT IMPORTS */\\n\\nimport \\\"./RolesStore.sol\\\";\\n\\n/**\\n * @title Roles\\n * @dev Library for managing addresses assigned to a Role.\\n */\\nlibrary Roles {\\n    \\n    /* GETTER METHODS */\\n\\n    /**\\n     * @dev Check if an account has this role.\\n     * @return bool\\n     */\\n    function _has(Role storage role, address account) internal view returns (bool) {\\n        require(account != address(0), \\\"Roles._has: ZERO_ADDRESS\\\");\\n        return role.bearer[account];\\n    }\\n\\n    /**\\n     * @dev Check if this role has at least one account assigned to it.\\n     * @return bool\\n     */\\n    function _atLeastOneBearer(uint256 numberOfBearers) internal pure returns (bool) {\\n        if (numberOfBearers > 0) {\\n            return true;\\n        } else {\\n            return false;\\n        }\\n    }\\n\\n    /* STATE CHANGE METHODS */\\n\\n    /**\\n     * @dev Give an account access to this role.\\n     */\\n    function _add(\\n        Role storage role,\\n        address account\\n    )\\n        internal\\n    {\\n        require(\\n            !_has(role, account),\\n            \\\"Roles._add: ALREADY_ASSIGNED\\\"\\n        );\\n\\n        role.bearer[account] = true;\\n        role.numberOfBearers += 1;\\n    }\\n\\n    /**\\n     * @dev Remove an account's access to this role. (1 account minimum enforced for safeRemove)\\n     */\\n    function _safeRemove(\\n        Role storage role,\\n        address account\\n    )\\n        internal\\n    {\\n        require(\\n            _has(role, account),\\n            \\\"Roles._safeRemove: INVALID_ACCOUNT\\\"\\n        );\\n        uint256 numberOfBearers = role.numberOfBearers -= 1; // roles that use safeRemove must implement initializeRole() and onlyIntialized() and must set the contract deployer as the first account, otherwise this can underflow below zero\\n        require(\\n            _atLeastOneBearer(numberOfBearers),\\n            \\\"Roles._safeRemove: MINIMUM_ACCOUNTS\\\"\\n        );\\n        \\n        role.bearer[account] = false;\\n    }\\n\\n    /**\\n     * @dev Remove an account's access to this role. (no minimum enforced)\\n     */\\n    function _remove(Role storage role, address account) internal {\\n        require(_has(role, account), \\\"Roles.remove: INVALID_ACCOUNT\\\");\\n        role.numberOfBearers -= 1;\\n        \\n        role.bearer[account] = false;\\n    }\\n}\"\r\n    },\r\n    \"contracts/utils/Context.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Provides information about the current execution context, including the\\n * sender of the transaction and its data. While these are generally available\\n * via msg.sender and msg.data, they should not be accessed in such a direct\\n * manner, since when dealing with meta-transactions the account sending and\\n * paying for execution may not be the actual sender (as far as an application\\n * is concerned).\\n *\\n * This contract is only required for intermediate, library-like contracts.\\n */\\ncontract Context {\\n    function _msgSender() internal view returns (address) {\\n        return msg.sender;\\n    }\\n\\n    function _msgData() internal pure returns (bytes calldata) {\\n        return msg.data;\\n    }\\n}\"\r\n    },\r\n    \"contracts/access/manager/interfaces/ManagerRoleEvents.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\ninterface ManagerRoleEvents {\\n\\n    /**\\n     * @dev Emitted when `account` is assigned the manager Role.\\n     */\\n    event ManagerAdded(address indexed account);\\n    \\n    /**\\n     * @dev Emitted when `account` has renounced its manager Role.\\n     */\\n    event ManagerRemoved(address indexed account);\\n    \\n}\"\r\n    },\r\n    \"contracts/extensions/freezable/interfaces/FreezableEvents.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\ninterface FreezableEvents {\\n    \\n    /**\\n     * @dev Emitted when `account` is frozen by `manager`.\\n     */\\n    event Frozen(address manager, address account);\\n\\n    /**\\n     * @dev Emitted when `account` is unfrozen by `manager`.\\n     */\\n    event Unfrozen(address manager, address account);\\n\\n}\"\r\n    },\r\n    \"contracts/extensions/pausable/interfaces/PausableEvents.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\ninterface PausableEvents {\\n\\n    /**\\n     * @dev Emitted when the pause is triggered by `account`.\\n     */\\n    event Paused(address account);\\n\\n    /**\\n     * @dev Emitted when the pause is lifted by `account`.\\n     */\\n    event Unpaused(address account);\\n\\n}\"\r\n    },\r\n    \"contracts/extensions/recoverable/interfaces/RecoverableEvents.sol\": {\r\n      \"content\": \"\\n// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\n/* INTERFACE IMPORTS */\\n\\nimport \\\"../../../ERC20/interfaces/IERC20.sol\\\";\\n\\ninterface RecoverableEvents {\\n    \\n    /**\\n     * @dev Emitted when `account` recovers an `amount` ot `token`.\\n     */\\n    event Recovered(address account, IERC20 token, uint256 amount);\\n\\n}\"\r\n    },\r\n    \"contracts/ERC20/interfaces/IERC20Events.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\ninterface IERC20Events {\\n\\n    /**\\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\\n     * another (`to`).\\n     *\\n     * Note that `value` may be zero.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 value);\\n\\n    /**\\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\\n     * a call to {approve}. `value` is the new allowance.\\n     */\\n    event Approval(address indexed owner, address indexed spender, uint256 value);\\n\\n}\"\r\n    }\r\n  },\r\n  \"settings\": {\r\n    \"optimizer\": {\r\n      \"enabled\": true,\r\n      \"runs\": 200\r\n    },\r\n    \"outputSelection\": {\r\n      \"*\": {\r\n        \"*\": [\r\n          \"evm.bytecode\",\r\n          \"evm.deployedBytecode\",\r\n          \"abi\"\r\n        ]\r\n      }\r\n    },\r\n    \"libraries\": {}\r\n  }\r\n}}","ABI":"[{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Approval\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"manager\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"Frozen\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"ManagerAdded\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"ManagerRemoved\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"Paused\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"contract IERC20\",\"name\":\"token\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"Recovered\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Transfer\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"manager\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"Unfrozen\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"Unpaused\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"implementation\",\"type\":\"address\"}],\"name\":\"Upgraded\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"addManager\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"}],\"name\":\"allowance\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"approve\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"burn\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"burnFrom\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"decimals\",\"outputs\":[{\"internalType\":\"uint8\",\"name\":\"\",\"type\":\"uint8\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"subtractedValue\",\"type\":\"uint256\"}],\"name\":\"decreaseAllowance\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"freeze\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"frozen\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getImplementation\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"addedValue\",\"type\":\"uint256\"}],\"name\":\"increaseAllowance\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"string\",\"name\":\"setName\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"setSymbol\",\"type\":\"string\"},{\"internalType\":\"uint256\",\"name\":\"initialSupply\",\"type\":\"uint256\"}],\"name\":\"initialize\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"isManager\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"name\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"pause\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"paused\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"contract IERC20\",\"name\":\"token\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"recover\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"renounceManager\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"symbol\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalSupply\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"recipient\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"transfer\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"recipient\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"transferFrom\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"unfreeze\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"unpause\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newImplementation\",\"type\":\"address\"}],\"name\":\"upgradeTo\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newImplementation\",\"type\":\"address\"},{\"internalType\":\"bytes\",\"name\":\"data\",\"type\":\"bytes\"}],\"name\":\"upgradeToAndCall\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"}]","ContractName":"XenoERC20","CompilerVersion":"v0.8.4+commit.c7e474f2","OptimizationUsed":"1","Runs":"200","ConstructorArguments":"","EVMVersion":"Default","Library":"","LicenseType":"","Proxy":"0","Implementation":"","SwarmSource":""}]}