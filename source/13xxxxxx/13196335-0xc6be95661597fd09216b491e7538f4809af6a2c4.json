{"status":"1","message":"OK","result":[{"SourceCode":"{{\r\n  \"language\": \"Solidity\",\r\n  \"sources\": {\r\n    \"contracts/NumbersOnTapRender.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: UNLICENSED\\r\\n/// @title NumbersOnTapRender\\r\\n/// @notice Render Numbers on Tap (NFT Faucet)\\r\\n/// @author CyberPnk <cyberpnk@numbersontaprender.cyberpnk.win>\\r\\n\\r\\npragma solidity ^0.8.0;\\r\\n\\r\\nimport \\\"./IStringUtilsV1.sol\\\";\\r\\n\\r\\ncontract NumbersOnTapRender {\\r\\n    IStringUtilsV1 stringUtils;\\r\\n\\r\\n    struct Traits {\\r\\n        bool div2;\\r\\n        bool div3;\\r\\n        bool div5;\\r\\n        bool div7;\\r\\n        bool div10;\\r\\n        bool div11;\\r\\n        bool div42;\\r\\n        bool div69;\\r\\n        bool div100;\\r\\n        bool div360;\\r\\n        bool div1000;\\r\\n        bool pow2;\\r\\n        bool sqr;\\r\\n        bool gt99;\\r\\n        bool gt999;\\r\\n        bool gt9999;\\r\\n    }\\r\\n\\r\\n    constructor(address stringUtilsContract) {\\r\\n        stringUtils = IStringUtilsV1(stringUtilsContract);\\r\\n    }\\r\\n\\r\\n    function sqrt(uint x) pure private returns (uint) {\\r\\n        uint z = (x + 1) / 2;\\r\\n        uint y = x;\\r\\n        while (z < y) {\\r\\n            y = z;\\r\\n            z = (x / z + z) / 2;\\r\\n        }\\r\\n        return y;\\r\\n    }\\r\\n\\r\\n    function getTraits(uint256 itemId) internal pure returns(Traits memory) {\\r\\n        uint maybeSqrt = sqrt(itemId);\\r\\n\\r\\n        return Traits(\\r\\n            itemId % 2 == 0,\\r\\n            itemId % 3 == 0,\\r\\n            itemId % 5 == 0,\\r\\n            itemId % 7 == 0,\\r\\n            itemId % 10 == 0,\\r\\n            itemId % 11 == 0,\\r\\n            itemId % 42 == 0,\\r\\n            itemId % 69 == 0,\\r\\n            itemId % 100 == 0,\\r\\n            itemId % 360 == 0,\\r\\n            itemId % 1000 == 0,\\r\\n            itemId != 0 && (itemId & (itemId - 1) == 0),\\r\\n            itemId == maybeSqrt * maybeSqrt,\\r\\n            itemId > 99,\\r\\n            itemId > 999,\\r\\n            itemId > 9999            \\r\\n        );\\r\\n    }\\r\\n\\r\\n    function getImage(uint256 itemId) public view returns(bytes memory) {\\r\\n        Traits memory traits = getTraits(itemId);\\r\\n        string memory classname = string(abi.encodePacked(string(abi.encodePacked(\\r\\n            traits.div2 ? \\\"d2 \\\" : \\\"\\\",\\r\\n            traits.div3 ? \\\"d3 \\\" : \\\"\\\",\\r\\n            traits.div5 ? \\\"d5 \\\" : \\\"\\\",\\r\\n            traits.div7 ? \\\"d7 \\\" : \\\"\\\",\\r\\n            traits.div10 ? \\\"d10 \\\" : \\\"\\\",\\r\\n            traits.div11 ? \\\"d11 \\\" : \\\"\\\",\\r\\n            traits.div42 ? \\\"d42 \\\" : \\\"\\\")),string(abi.encodePacked(\\r\\n            traits.div69 ? \\\"d69 \\\" : \\\"\\\",\\r\\n            traits.div100 ? \\\"d100 \\\" : \\\"\\\",\\r\\n            traits.div360 ? \\\"d360 \\\" : \\\"\\\",\\r\\n            traits.div1000 ? \\\"d1000 \\\" : \\\"\\\",\\r\\n            traits.pow2 ? \\\"p2 \\\" : \\\"\\\",\\r\\n            traits.sqr ? \\\"sqr \\\" : \\\"\\\",\\r\\n            traits.gt99 ? \\\"gt99 \\\" : \\\"\\\",\\r\\n            traits.gt999 ? \\\"gt999 \\\" : \\\"\\\",\\r\\n            traits.gt9999 ? \\\"gt9999 \\\" : \\\"\\\"\\r\\n        ))));\\r\\n\\r\\n        string memory strId = stringUtils.numberToString(itemId);\\r\\n\\r\\n        return abi.encodePacked(\\r\\n            \\\"<svg viewBox='0 0 640 640' xmlns='http://www.w3.org/2000/svg' xmlns:xlink='http://www.w3.org/1999/xlink' class='\\\", classname, \\\"'>\\\"\\r\\n                  \\\"<style>\\\"\\r\\n                    \\\"svg{background-color:white;}\\\"\\r\\n                    \\\"text{\\\",\\r\\n                        \\\"font-weight:bold;\\\"\\r\\n                        \\\"font-size:25em;\\\"\\r\\n                        \\\"fill:rgba(128, 128, 128, 1);\\\"\\r\\n                        \\\"font-family:sans-serif;\\\",\\r\\n                        \\\"font-style:italic;\\\"\\r\\n                        \\\"paint-order:stroke;\\\"\\r\\n                        \\\"stroke:rgba(0, 0, 0, 1);\\\"\\r\\n                        \\\"stroke-width:0.2em;\\\"\\r\\n                        \\\"stroke-linecap:butt;\\\",\\r\\n                        \\\"stroke-linejoin:round;\\\"\\r\\n                        \\\"stroke-opacity:1;\\\"\\r\\n                        \\\"filter:drop-shadow(4px 4px 0px rgba(0, 0, 0, 0.7));\\\"\\r\\n                    \\\"}\\\",\\r\\n                    \\\".d2{background-color:#F2D0A4;}\\\"\\r\\n                    \\\".d3>text{fill:#F18F01;}\\\"\\r\\n                    \\\".d5>text{stroke-linejoin:miter;}\\\"\\r\\n                    \\\".d7>text{stroke:#2E86AB;fill:white;}\\\",\\r\\n                    \\\".d10>text{filter:drop-shadow(4px 4px 0px rgba(162,59,114,1));}\\\"\\r\\n                    \\\".d11>text{fill:#C73E1D;}\\\"\\r\\n                    \\\".d42{background-color:black;}\\\"\\r\\n                    \\\".d42>text{fill:gold;stroke:white;}\\\",\\r\\n                    \\\".d69>text{letter-spacing:-0.1em;}\\\"\\r\\n                    \\\".d100>text{filter:drop-shadow(8px 8px 4px rgba(162, 59, 114, 1));}\\\"\\r\\n                    \\\".d360{animation:spin 120s;}\\\",\\r\\n                    \\\".d1000>text{filter:drop-shadow(32px 32px 16px rgba(162,59,114,1));}\\\"\\r\\n                    \\\".gt99>text{font-size:20em;}\\\"\\r\\n                    \\\".gt999>text{font-size:15em;}\\\"\\r\\n                    \\\".gt9999>text{font-size:10em;}\\\",\\r\\n                    \\\".p2{\\\"\\r\\n                        \\\"background-image:linear-gradient(45deg,rgba(59,31,43,0.5) 25%, transparent 25%),\\\"\\r\\n                                        \\\"linear-gradient(-45deg,rgba(59,31,43,0.5) 25%, transparent 25%),\\\"\\r\\n                                        \\\"linear-gradient(45deg,transparent 75%, rgba(59,31,43,0.5) 75%),\\\",\\r\\n                                        \\\"linear-gradient(-45deg,transparent 75%, rgba(59,31,43,0.5) 75%);\\\"\\r\\n                        \\\"background-size:1em 1em;\\\"\\r\\n                        \\\"background-position:0 0,0 0.5em,0.5em -0.5em,-0.5em 0px;\\\"\\r\\n                    \\\"}\\\",\\r\\n                    \\\"@keyframes spin {0%{transform:rotate(0deg);}25%{transform:rotate(0deg);}100%{transform:rotate(360deg);}}\\\"\\r\\n                    \\\".sqr{box-shadow:inset 0 0 0 0.7em rgba(162,59,114,0.5);}\\\"\\r\\n                    \\\".sqr>text{font-style:normal;}\\\"\\r\\n                \\\"</style>\\\",\\r\\n                \\\"<text x='\\\", traits.sqr ? \\\"50\\\": \\\"48\\\", \\\"%' y='55%' dominant-baseline='middle' text-anchor='middle'>\\\",\\r\\n                    strId,\\r\\n                \\\"</text>\\\"\\r\\n            \\\"</svg>\\\"\\r\\n        );\\r\\n    }\\r\\n\\r\\n    function getTokenURI(uint256 itemId) public view returns (string memory) {\\r\\n        string memory strId = stringUtils.numberToString(itemId);\\r\\n\\r\\n        bytes memory imageBytes = getImage(itemId);\\r\\n\\r\\n        string memory image = string(abi.encodePacked(\\\"data:image/svg+xml;utf8,\\\", imageBytes));\\r\\n\\r\\n        Traits memory traits = getTraits(itemId);\\r\\n\\r\\n        bytes memory json = abi.encodePacked(string(abi.encodePacked(\\r\\n            '{'\\r\\n                '\\\"name\\\": \\\"Number ', strId, '\\\",'\\r\\n                '\\\"description\\\": \\\"Numbers\\\",'\\r\\n                '\\\"image\\\": \\\"', image, '\\\",'\\r\\n                '\\\"traits\\\": [ ',\\r\\n                    traits.div2 ? '{\\\"trait_type\\\":\\\"Divisible By 2\\\",\\\"value\\\":\\\"Divisible By 2\\\"},' : '',\\r\\n                    traits.div3 ? '{\\\"trait_type\\\":\\\"Divisible By 3\\\",\\\"value\\\":\\\"Divisible By 3\\\"},' : '',\\r\\n                    traits.div5 ? '{\\\"trait_type\\\":\\\"Divisible By 5\\\",\\\"value\\\":\\\"Divisible By 5\\\"},' : '',\\r\\n                    traits.div7 ? '{\\\"trait_type\\\":\\\"Divisible By 7\\\",\\\"value\\\":\\\"Divisible By 7\\\"},' : '',\\r\\n                    traits.div10 ? '{\\\"trait_type\\\":\\\"Divisible By 10\\\",\\\"value\\\":\\\"Divisible By 10\\\"},' : '',\\r\\n                    traits.div11 ? '{\\\"trait_type\\\":\\\"Divisible By 11\\\",\\\"value\\\":\\\"Divisible By 11\\\"},' : '')),string(abi.encodePacked(\\r\\n                    traits.div42 ? '{\\\"trait_type\\\":\\\"Divisible By 42\\\",\\\"value\\\":\\\"Divisible By 42\\\"},' : '',\\r\\n                    traits.div69 ? '{\\\"trait_type\\\":\\\"Divisible By 69\\\",\\\"value\\\":\\\"Divisible By 69\\\"},' : '',\\r\\n                    traits.div100 ? '{\\\"trait_type\\\":\\\"Divisible By 100\\\",\\\"value\\\":\\\"Divisible By 100\\\"},' : '',\\r\\n                    traits.div360 ? '{\\\"trait_type\\\":\\\"Divisible By 360\\\",\\\"value\\\":\\\"Divisible By 360\\\"},' : '',\\r\\n                    traits.div1000 ? '{\\\"trait_type\\\":\\\"Divisible By 1000\\\",\\\"value\\\":\\\"Divisible By 1000\\\"},' : '',\\r\\n                    traits.pow2 ? '{\\\"trait_type\\\":\\\"Power Of 2\\\",\\\"value\\\":\\\"Power Of 2\\\"},' : '',\\r\\n                    traits.sqr ? '{\\\"trait_type\\\":\\\"Square\\\",\\\"value\\\":\\\"Square\\\"},' : '',\\r\\n                    '{\\\"trait_type\\\":\\\"Integer\\\",\\\"value\\\":\\\"Integer\\\"}'\\r\\n                ']'\\r\\n            '}'\\r\\n        )));\\r\\n\\r\\n        return stringUtils.base64EncodeJson(json);\\r\\n    }\\r\\n\\r\\n}\\r\\n\"\r\n    },\r\n    \"contracts/IStringUtilsV1.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\r\\n/// [MIT License]\\r\\n/// @title StringUtilsV1\\r\\n\\r\\npragma solidity ^0.8.0;\\r\\n\\r\\ninterface IStringUtilsV1 {\\r\\n    function base64Encode(bytes memory data) external pure returns (string memory);\\r\\n\\r\\n    function base64EncodeJson(bytes memory data) external pure returns (string memory);\\r\\n\\r\\n    function base64EncodeSvg(bytes memory data) external pure returns (string memory);\\r\\n\\r\\n    function numberToString(uint256 value) external pure returns (string memory);\\r\\n\\r\\n    function addressToString(address account) external pure returns(string memory);\\r\\n\\r\\n    function split(string calldata str, string calldata delim) external pure returns(string[] memory);\\r\\n}\"\r\n    }\r\n  },\r\n  \"settings\": {\r\n    \"optimizer\": {\r\n      \"enabled\": true,\r\n      \"runs\": 1\r\n    },\r\n    \"outputSelection\": {\r\n      \"*\": {\r\n        \"*\": [\r\n          \"evm.bytecode\",\r\n          \"evm.deployedBytecode\",\r\n          \"abi\"\r\n        ]\r\n      }\r\n    },\r\n    \"libraries\": {}\r\n  }\r\n}}","ABI":"[{\"inputs\":[{\"internalType\":\"address\",\"name\":\"stringUtilsContract\",\"type\":\"address\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"itemId\",\"type\":\"uint256\"}],\"name\":\"getImage\",\"outputs\":[{\"internalType\":\"bytes\",\"name\":\"\",\"type\":\"bytes\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"itemId\",\"type\":\"uint256\"}],\"name\":\"getTokenURI\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"}]","ContractName":"NumbersOnTapRender","CompilerVersion":"v0.8.2+commit.661d1103","OptimizationUsed":"1","Runs":"1","ConstructorArguments":"0000000000000000000000006a9ce21b01b7de764142c748cb551a2524e228f2","EVMVersion":"Default","Library":"","LicenseType":"","Proxy":"0","Implementation":"","SwarmSource":""}]}