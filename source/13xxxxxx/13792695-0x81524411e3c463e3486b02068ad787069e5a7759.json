{"status":"1","message":"OK","result":[{"SourceCode":"//SPDX-License-Identifier: GPL-3.0\r\npragma solidity ^0.8.10;\r\n// ----------------------------------------------------------------------------\r\n// EIP-20: ERC-20 Token Standard\r\n// https://eips.ethereum.org/EIPS/eip-20\r\n// -----------------------------------------\r\n\r\nabstract contract Context {\r\n    function messageSender() internal view virtual returns (address) {\r\n        return msg.sender;\r\n    }\r\n}\r\n\r\ninterface IERC20 {\r\n    function totalSupply() external view returns (uint256);\r\n    function balanceOf(address account) external view returns (uint256);\r\n    function transfer(address recipient, uint256 amount) external returns (bool);\r\n    function allowance(address owner, address spender) external view returns (uint256);\r\n    function approve(address spender, uint256 amount) external returns (bool);\r\n    function transferFrom(address sender, address recipient, uint256 amount) external returns (bool);\r\n    event Transfer(address indexed from, address indexed to, uint256 value);\r\n    event Approval(address indexed owner, address indexed spender, uint256 value);\r\n}\r\n\r\nlibrary SafeMath {\r\n    function add(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        uint256 c = a + b;\r\n        require(c >= a, \"SafeMath: addition overflow\");\r\n        return c;\r\n    }\r\n\r\n    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        return sub(a, b, \"SafeMath: subtraction overflow\");\r\n    }\r\n\r\n    function sub(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\r\n        require(b <= a, errorMessage);\r\n        uint256 c = a - b;\r\n        return c;\r\n    }\r\n\r\n    function mul(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        if (a == 0) {\r\n            return 0;\r\n        }\r\n        uint256 c = a * b;\r\n        require(c / a == b, \"SafeMath: multiplication overflow\");\r\n        return c;\r\n    }\r\n\r\n    function div(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        return div(a, b, \"SafeMath: division by zero\");\r\n    }\r\n\r\n    function div(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\r\n        require(b > 0, errorMessage);\r\n        uint256 c = a / b;\r\n        return c;\r\n    }\r\n\r\n}\r\n\r\ncontract Ownable is Context {\r\n    address private _owner;\r\n    address private _previousOwner;\r\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\r\n\r\n    constructor () {\r\n        address msgSender = messageSender();\r\n        _owner = msgSender;\r\n        emit OwnershipTransferred(address(0), msgSender);\r\n    }\r\n\r\n    function owner() public view returns (address) {\r\n        return _owner;\r\n    }\r\n\r\n    modifier onlyOwner() {\r\n        require(_owner == messageSender(), \"Ownable: caller is not the owner\");\r\n        _;\r\n    }\r\n\r\n    function renounceOwnership() public virtual onlyOwner {\r\n        emit OwnershipTransferred(_owner, address(0));\r\n        _owner = address(0);\r\n    }\r\n\r\n}  \r\n\r\ninterface IUniswapV2Factory {\r\n    function createPair(address tokenA, address tokenB) external returns (address pair);\r\n}\r\n\r\ninterface IUniswapV2Router02 {\r\n    function swapExactTokensForETHSupportingFeeOnTransferTokens(\r\n        uint amountIn,\r\n        uint amountOutMin,\r\n        address[] calldata path,\r\n        address to,\r\n        uint deadline\r\n    ) external;\r\n    function factory() external pure returns (address);\r\n    function WETH() external pure returns (address);\r\n    function addLiquidityETH(\r\n        address token,\r\n        uint amountTokenDesired,\r\n        uint amountTokenMin,\r\n        uint amountETHMin,\r\n        address to,\r\n        uint deadline\r\n    ) external payable returns (uint amountToken, uint amountETH, uint liquidity);\r\n}\r\n\r\ncontract FehuToken is Context, IERC20, Ownable {\r\n    using SafeMath for uint256;\r\n    //Token attributes\r\n    uint256 private constant MAX = ~uint256(0);\r\n    uint256 private constant tokens = 10000000000000 * 10**9;\r\n    uint256 private reflectionsTotal = (MAX - (MAX % tokens));\r\n    string private constant _name = \"FehuToken\";\r\n    string private constant _symbol = \"FEHU\";\r\n    uint8 private constant _decimals = 9;\r\n\r\n    //Fees for transactions\r\n    uint256 private reflexFee = 1;\r\n    uint256 private teamFee = 4; //Marketing + Development + Charity \r\n    uint256 private liquidityFee = 5; //Buyback\r\n    //Fee wallet\r\n    address payable private teamWallet;\r\n    \r\n    mapping (address => uint256) private reflectionOwners;\r\n    mapping (address => mapping (address => uint256)) private allowances;\r\n    mapping (address => bool) private feeExemption;\r\n    mapping (address => uint) private cooldown;\r\n    \r\n    IUniswapV2Router02 private uniswapV2Router;\r\n    address private uniswapV2Pair;\r\n    bool private tradingOpen;\r\n    bool private inSwap = false;\r\n    bool private swapEnabled = false;\r\n    bool private cooldownEnabled = false;\r\n    bool private walletOwnershipEnabled = true;\r\n    \r\n    modifier lockTheSwap {\r\n        inSwap = true;\r\n        _;\r\n        inSwap = false;\r\n    }\r\n\r\n    constructor () {\r\n        teamWallet = payable(0x50DE98A520B665c11a0D2868D2aF9F0F6C0Dc435);\r\n        reflectionOwners[address(this)] = reflectionsTotal;\r\n        feeExemption[address(this)] = true;\r\n        feeExemption[teamWallet] = true;\r\n        emit Transfer(address(0), address(this), tokens);\r\n    }\r\n\r\n    function name() public pure returns (string memory) {\r\n        return _name;\r\n    }\r\n\r\n    function symbol() public pure returns (string memory) {\r\n        return _symbol;\r\n    }\r\n\r\n    function decimals() public pure returns (uint8) {\r\n        return _decimals;\r\n    }\r\n\r\n    function totalSupply() public pure override returns (uint256) {\r\n        return tokens;\r\n    }\r\n\r\n    function balanceOf(address account) public view override returns (uint256) {\r\n        return tokenFromReflection(reflectionOwners[account]);\r\n    }\r\n\r\n    function transfer(address recipient, uint256 amount) public override returns (bool) {\r\n        _transfer(messageSender(), recipient, amount);\r\n        return true;\r\n    }\r\n\r\n    function allowance(address owner, address spender) public view override returns (uint256) {\r\n        return allowances[owner][spender];\r\n    }\r\n\r\n    function approve(address spender, uint256 amount) public override returns (bool) {\r\n        _approve(messageSender(), spender, amount);\r\n        return true;\r\n    }\r\n\r\n    function transferFrom(address sender, address recipient, uint256 amount) public override returns (bool) {\r\n        _transfer(sender, recipient, amount);\r\n        _approve(sender, messageSender(), allowances[sender][messageSender()].sub(amount, \"ERC20: transfer amount exceeds allowance\"));\r\n        return true;\r\n    }\r\n\r\n    function tokenFromReflection(uint256 rAmount) private view returns(uint256) {\r\n        require(rAmount <= reflectionsTotal, \"Amount must be less than total reflectionOwners\");\r\n        uint256 currentRate = getSupplyRate();\r\n        return rAmount.div(currentRate);\r\n    }\r\n\r\n    function _approve(address owner, address spender, uint256 amount) private {\r\n        require(owner != address(0), \"ERC20: approve from the zero address\");\r\n        require(spender != address(0), \"ERC20: approve to the zero address\");\r\n        allowances[owner][spender] = amount;\r\n        emit Approval(owner, spender, amount);\r\n    }\r\n    \r\n    function transferMoreThanOwnership(address account, uint256 amount) private view returns (bool) {\r\n        uint256 totalTokensFromTotalReflection = tokenFromReflection(reflectionsTotal);\r\n        uint256 totalTokensOwned = balanceOf(account);\r\n        uint256 additionalRateAllowed = getLPRate(account);\r\n        \r\n        if(calculateTokenOwnership(totalTokensOwned, totalTokensFromTotalReflection, amount) <= 150 + additionalRateAllowed){\r\n            return false;\r\n        }\r\n        return true;\r\n    }\r\n    \r\n    function getBuySellFees(address from, address to) private view returns(uint256, uint256) {\r\n        if(!tradingOpen || feeExemption[from] || feeExemption[to]) {\r\n            return (0, 0);\r\n        }\r\n        \r\n        //Buy tax from uniswap\r\n        if(from == uniswapV2Pair) {\r\n            return (reflexFee, teamFee);\r\n        }\r\n        \r\n        //Sell tax from uniswap\r\n        if(to == uniswapV2Pair) {\r\n            return (reflexFee, teamFee + liquidityFee);\r\n        }\r\n        \r\n        //General transfer tax. No tax from wallet to wallet or contract to contract\r\n        return (0, 0);\r\n    }\r\n    \r\n    function calculateTokenOwnership(uint256 totalTokensOwned, uint256 totalTokensFromTotalReflection, uint256 amount) private pure returns (uint256) {\r\n        return amount.add(totalTokensOwned).mul(10000).div(totalTokensFromTotalReflection);\r\n    }\r\n    \r\n    function checkLPBalance(address sender) public view returns (uint256){\r\n        return IERC20(uniswapV2Pair).balanceOf(sender);\r\n    }\r\n    \r\n    function getPairLPBalance() private view returns (uint256){\r\n        return IERC20(uniswapV2Pair).totalSupply();\r\n    }\r\n    \r\n    function getLPRate(address sender) private view returns (uint256){\r\n        uint256 totalPoolTokens = getPairLPBalance();\r\n        uint256 callerPoolTokens = checkLPBalance(sender);\r\n        return callerPoolTokens.mul(10000).div(totalPoolTokens);\r\n    }\r\n    \r\n    function transferERC20(IERC20 tokenContract, address to, uint256 amount) public {\r\n        require(messageSender() == teamWallet || messageSender() == owner(), \"Only fee owner can transfer ERC20 funds\"); \r\n        uint256 erc20balance = tokenContract.balanceOf(address(this));\r\n        require(amount <= erc20balance, \"amount cannot be higher than current balance\");\r\n        tokenContract.transfer(to, amount);\r\n        emit Transfer(msg.sender, to, amount);\r\n    }\r\n    \r\n    function balanceOfERC20(IERC20 token) public view returns (uint256) {\r\n        return token.balanceOf(address(this));\r\n    }\r\n    \r\n    //Function to unlock wallet ownership rule of 1,5%\r\n    function unlockWalletOwnership() external {\r\n        require(messageSender() == teamWallet, \"Only fee wallet can call this function\");\r\n        require(walletOwnershipEnabled, \"Wallet ownership already unlocked\");\r\n        walletOwnershipEnabled = false;\r\n    }\r\n\r\n    function setTeamFee(uint256 feePercentage) external {\r\n        require(feePercentage <= teamFee, \"New fee cannot be higher than the previous fee\");\r\n        require(messageSender() == teamWallet, \"Only fee wallet can call this function\");\r\n        teamFee = feePercentage;\r\n    }\r\n    \r\n    function setLiquidityFee(uint256 feePercentage) external {\r\n        require(feePercentage <= liquidityFee, \"New fee cannot be higher than the previous fee\");\r\n        require(messageSender() == teamWallet, \"Only fee wallet can call this function\");\r\n        liquidityFee = feePercentage;\r\n    }\r\n\r\n    function _transfer(address from, address to, uint256 amount) private {\r\n        require(from != address(0), \"ERC20: transfer from the zero address\");\r\n        require(to != address(0), \"ERC20: transfer to the zero address\");\r\n        require(amount > 0, \"Transfer amount must be greater than zero\");\r\n\r\n        if (!feeExemption[from] && !feeExemption[to] && from == uniswapV2Pair && to != address(uniswapV2Router) && cooldownEnabled) {\r\n            require(cooldown[to] < block.number);\r\n            //2 block number cooldown aka ~ 30 seconds\r\n            cooldown[to] = block.number + 2;\r\n        }\r\n        \r\n        if(walletOwnershipEnabled) {\r\n            //Wallet to wallet transfer restriction\r\n            if(swapEnabled && from != uniswapV2Pair && to != uniswapV2Pair && from != address(uniswapV2Router) && !feeExemption[to]) {\r\n                require(!transferMoreThanOwnership(to, amount), \"Address owns or will own more than 1,5% + pool_ownership of the token supply\");\r\n            }\r\n            \r\n            //Swapping eth for token restriction\r\n            if(swapEnabled && from == uniswapV2Pair && !feeExemption[to]) {\r\n                require(!transferMoreThanOwnership(to, amount), \"Address owns or will own more than 1,5% + pool_ownership of the token supply\");\r\n            }\r\n        }\r\n        \r\n        transferTokensSupportingFees(from, to, amount);\r\n        \r\n    }\r\n    \r\n     //UniSwap transaction with fees\r\n    function transferTokensSupportingFees(address sender, address recipient, uint256 tAmount) private {\r\n        (uint256 _reflexFee, uint256 _totalTeamFee) = getBuySellFees(sender, recipient);\r\n        uint256 sumFees = _reflexFee + _totalTeamFee;\r\n        \r\n        (uint256 rAmount, uint256 rTransferAmount, uint256 tTransferAmount) = _getAllValues(tAmount, sumFees);\r\n        reflectionOwners[sender] = reflectionOwners[sender].sub(rAmount);\r\n        reflectionOwners[recipient] = reflectionOwners[recipient].add(rTransferAmount); \r\n        applyReflectionFee(rAmount, _reflexFee);\r\n        applyTotalFees(rAmount, _totalTeamFee);\r\n        emit Transfer(sender, recipient, tTransferAmount);\r\n    }\r\n\r\n    //Uniswap router conversion from Token to ETH\r\n    function swapTokensForEth(uint256 tokenAmount) private lockTheSwap {\r\n        address[] memory path = new address[](2);\r\n        path[0] = address(this);\r\n        path[1] = uniswapV2Router.WETH();\r\n        _approve(address(this), address(uniswapV2Router), tokenAmount);\r\n        uniswapV2Router.swapExactTokensForETHSupportingFeeOnTransferTokens(\r\n            tokenAmount,\r\n            0,\r\n            path,\r\n            address(this),\r\n            block.timestamp\r\n        );\r\n    }\r\n        \r\n    function sendFee(uint256 amount) private {\r\n        teamWallet.transfer(amount);\r\n    }\r\n    \r\n    //Start trading\r\n    function openTrading() external onlyOwner() {\r\n        require(!tradingOpen,\"trading is already open\");\r\n        IUniswapV2Router02 _uniswapV2Router = IUniswapV2Router02(0x7a250d5630B4cF539739dF2C5dAcb4c659F2488D);\r\n        uniswapV2Router = _uniswapV2Router;\r\n        feeExemption[address(uniswapV2Router)] = true; //fee exemption for uniswap router\r\n        _approve(address(this), address(uniswapV2Router), tokens);\r\n        uniswapV2Pair = IUniswapV2Factory(_uniswapV2Router.factory()).createPair(address(this), _uniswapV2Router.WETH());\r\n        uniswapV2Router.addLiquidityETH{value:address(this).balance}(address(this), balanceOf(address(this)), 0, 0, teamWallet, block.timestamp);\r\n        swapEnabled = true;\r\n        cooldownEnabled = true;\r\n        tradingOpen = true;\r\n        IERC20(uniswapV2Pair).approve(address(uniswapV2Router), type(uint).max);\r\n        emit Transfer(address(this), uniswapV2Pair, tokens);\r\n    }\r\n\r\n    function addLiquidityTeamWalletOwner(uint256 tokenAmount) external {\r\n        require(messageSender() == teamWallet, \"Only the team wallet can call this function\");\r\n        _approve(address(this), address(uniswapV2Router), tokenAmount);\r\n        uniswapV2Router.addLiquidityETH { \r\n            value: address(this).balance \r\n        }\r\n        (\r\n            address(this),\r\n            tokenAmount,\r\n            0,\r\n            0,\r\n            teamWallet,\r\n            block.timestamp + 30\r\n        );\r\n    }\r\n    \r\n     /* ------- Fee Setup --------   */\r\n    function applyTotalFees(uint256 rAmount, uint256 rSumFees) private {\r\n        uint256 collectedFee = rAmount.mul(rSumFees).div(100);\r\n        reflectionOwners[address(this)] = reflectionOwners[address(this)].add(collectedFee);\r\n    }\r\n    \r\n    function applyReflectionFee(uint256 rAmount, uint256 rReflexFee) private {\r\n        uint256 collectedFee = rAmount.mul(rReflexFee).div(100);\r\n        reflectionsTotal = reflectionsTotal.sub(collectedFee);\r\n    }\r\n    /* ------- Fee Setup END --------   */\r\n\r\n    receive() external payable {}\r\n    \r\n    function manualswap(uint256 amount) external {\r\n        require(messageSender() == teamWallet);\r\n        require(amount <= balanceOf(address(this)));\r\n        uint256 contractBalance = amount;\r\n        swapTokensForEth(contractBalance);\r\n    }\r\n    \r\n    function manualsend() external {\r\n        require(messageSender() == teamWallet);\r\n        uint256 contractETHBalance = address(this).balance;\r\n        sendFee(contractETHBalance);\r\n    }\r\n    \r\n    /* ------- Token, reflection, fees and rate amount calculations  --------   */\r\n    function _getAllValues(uint256 tAmount, uint256 fees) private view returns (uint256, uint256, uint256) {\r\n        uint256 tTransferAmount = _getTokenValues(tAmount, fees);\r\n        uint256 currentRate = getSupplyRate();\r\n        (uint256 rAmount, uint256 rTransferAmount) = _getReflectionValues(tAmount, tTransferAmount, currentRate);\r\n        return (rAmount, rTransferAmount, tTransferAmount);\r\n    }\r\n\r\n    function _getTokenValues(uint256 tAmount, uint256 fees) private pure returns (uint256) {\r\n        uint256 tFees = tAmount.mul(fees).div(100);\r\n        uint256 tTransferAmount = tAmount - tFees;\r\n        return tTransferAmount;\r\n    }\r\n\r\n    function _getReflectionValues(uint256 tAmount, uint256 tTransferAmount, uint256 currentRate) private pure returns (uint256, uint256) {\r\n        uint256 rAmount = tAmount.mul(currentRate);\r\n        uint256 rTransferAmount = tTransferAmount.mul(currentRate);\r\n        return (rAmount, rTransferAmount);\r\n    }\r\n\r\n\tfunction getSupplyRate() private view returns(uint256) {\r\n        (uint256 rSupply, uint256 tSupply) = _getCurrentSupply();\r\n        return rSupply.div(tSupply);\r\n    }\r\n\r\n    function _getCurrentSupply() private view returns(uint256, uint256) {\r\n        uint256 rSupply = reflectionsTotal;\r\n        uint256 tSupply = tokens;      \r\n        if (rSupply < reflectionsTotal.div(tokens)) return (reflectionsTotal, tokens);\r\n        return (rSupply, tSupply);\r\n    }\r\n    /* ------- Token, reflection, fees and rate amount calculations END --------   */\r\n}","ABI":"[{\"inputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Approval\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Transfer\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"tokenAmount\",\"type\":\"uint256\"}],\"name\":\"addLiquidityTeamWalletOwner\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"}],\"name\":\"allowance\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"approve\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"contract IERC20\",\"name\":\"token\",\"type\":\"address\"}],\"name\":\"balanceOfERC20\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"}],\"name\":\"checkLPBalance\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"decimals\",\"outputs\":[{\"internalType\":\"uint8\",\"name\":\"\",\"type\":\"uint8\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"manualsend\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"manualswap\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"name\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"openTrading\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"feePercentage\",\"type\":\"uint256\"}],\"name\":\"setLiquidityFee\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"feePercentage\",\"type\":\"uint256\"}],\"name\":\"setTeamFee\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"symbol\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalSupply\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"recipient\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"transfer\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"contract IERC20\",\"name\":\"tokenContract\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"transferERC20\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"recipient\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"transferFrom\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"unlockWalletOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"stateMutability\":\"payable\",\"type\":\"receive\"}]","ContractName":"FehuToken","CompilerVersion":"v0.8.10+commit.fc410830","OptimizationUsed":"1","Runs":"600","ConstructorArguments":"","EVMVersion":"Default","Library":"","LicenseType":"GNU GPLv3","Proxy":"0","Implementation":"","SwarmSource":"ipfs://75853f3ce14dd2012a8e4d183d8dd4f35b7c421f2f9e800949c4161e91ebd9aa"}]}