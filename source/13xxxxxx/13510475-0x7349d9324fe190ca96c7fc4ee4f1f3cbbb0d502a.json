{"status":"1","message":"OK","result":[{"SourceCode":"// File: contracts/erc721.sol\r\n\r\n// SPDX-License-Identifier: MIT\r\npragma solidity 0.8.6;\r\n\r\n\r\ninterface ERC721\r\n{\r\n\r\n  event Transfer(\r\n    address indexed _from,\r\n    address indexed _to,\r\n    uint256 indexed _tokenId\r\n  );\r\n\r\n  event Approval(\r\n    address indexed _owner,\r\n    address indexed _approved,\r\n    uint256 indexed _tokenId\r\n  );\r\n\r\n  event ApprovalForAll(\r\n    address indexed _owner,\r\n    address indexed _operator,\r\n    bool _approved\r\n  );\r\n\r\n\r\n  function safeTransferFrom(\r\n    address _from,\r\n    address _to,\r\n    uint256 _tokenId,\r\n    bytes calldata _data\r\n  )\r\n    external;\r\n\r\n  function safeTransferFrom(\r\n    address _from,\r\n    address _to,\r\n    uint256 _tokenId\r\n  )\r\n    external;\r\n\r\n  function transferFrom(\r\n    address _from,\r\n    address _to,\r\n    uint256 _tokenId\r\n  )\r\n    external;\r\n\r\n\r\n  function approve(\r\n    address _approved,\r\n    uint256 _tokenId\r\n  )\r\n    external;\r\n\r\n\r\n  function setApprovalForAll(\r\n    address _operator,\r\n    bool _approved\r\n  )\r\n    external;\r\n\r\n\r\n  function balanceOf(\r\n    address _owner\r\n  )\r\n    external\r\n    view\r\n    returns (uint256);\r\n\r\n\r\n  function ownerOf(\r\n    uint256 _tokenId\r\n  )\r\n    external\r\n    view\r\n    returns (address);\r\n\r\n  function getApproved(\r\n    uint256 _tokenId\r\n  )\r\n    external\r\n    view\r\n    returns (address);\r\n\r\n  function isApprovedForAll(\r\n    address _owner,\r\n    address _operator\r\n  )\r\n    external\r\n    view\r\n    returns (bool);\r\n\r\n}\r\n\r\n// File: contracts/Ownable.sol\r\n\r\ncontract Ownable {\r\n  address private _owner;\r\n\r\n  event OwnershipTransferred(\r\n    address indexed previousOwner,\r\n    address indexed newOwner\r\n  );\r\n\r\n\r\n  constructor()  {\r\n    _owner = msg.sender;\r\n    emit OwnershipTransferred(address(0), _owner);\r\n  }\r\n\r\n  function owner() public view returns(address) {\r\n    return _owner;\r\n  }\r\n\r\n\r\n  modifier onlyOwner() {\r\n    require(isOwner());\r\n    _;\r\n  }\r\n\r\n  \r\n  function isOwner() public view returns(bool) {\r\n    return msg.sender == _owner;\r\n  }\r\n\r\n  function renounceOwnership() public onlyOwner {\r\n    emit OwnershipTransferred(_owner, address(0));\r\n    _owner = address(0);\r\n  }\r\n\r\n  function transferOwnership(address newOwner) public onlyOwner {\r\n    _transferOwnership(newOwner);\r\n  }\r\n\r\n  function _transferOwnership(address newOwner) internal {\r\n    require(newOwner != address(0));\r\n    emit OwnershipTransferred(_owner, newOwner);\r\n    _owner = newOwner;\r\n  }\r\n}\r\n\r\n// File: contracts/erc721-token-receiver.sol\r\n\r\ninterface ERC721TokenReceiver\r\n{\r\n  function onERC721Received(\r\n    address _operator,\r\n    address _from,\r\n    uint256 _tokenId,\r\n    bytes calldata _data\r\n  )\r\n    external\r\n    returns(bytes4);\r\n\r\n}\r\n\r\n// File: contracts/erc165.sol\r\n\r\n\r\ninterface ERC165\r\n{\r\n\r\n  function supportsInterface(\r\n    bytes4 _interfaceID\r\n  )\r\n    external\r\n    view\r\n    returns (bool);\r\n    \r\n}\r\n\r\n// File: contracts/supports-interface.sol\r\n\r\ncontract SupportsInterface is\r\n  ERC165\r\n{\r\n\r\n\r\n  mapping(bytes4 => bool) internal supportedInterfaces;\r\n\r\n  constructor()\r\n  {\r\n    supportedInterfaces[0x01ffc9a7] = true; // ERC165\r\n  }\r\n\r\n\r\n  function supportsInterface(\r\n    bytes4 _interfaceID\r\n  )\r\n    external\r\n    override\r\n    view\r\n    returns (bool)\r\n  {\r\n    return supportedInterfaces[_interfaceID];\r\n  }\r\n\r\n}\r\n\r\n// File: contracts/address-utils.sol\r\n\r\nlibrary AddressUtils\r\n{\r\n\r\n\r\n  function isContract(\r\n    address _addr\r\n  )\r\n    internal\r\n    view\r\n    returns (bool addressCheck)\r\n  {\r\n    bytes32 codehash;\r\n    bytes32 accountHash = 0xc5d2460186f7233c927e7db2dcc703c0e500b653ca82273b7bfad8045d85a470;\r\n    assembly { codehash := extcodehash(_addr) } // solhint-disable-line\r\n    addressCheck = (codehash != 0x0 && codehash != accountHash);\r\n  }\r\n\r\n}\r\n\r\n// File: contracts/nf-token.sol\r\n\r\ncontract DIEDED_BASE is\r\n  ERC721,\r\n  SupportsInterface,\r\n  Ownable\r\n{\r\n  using AddressUtils for address;\r\n\r\n  uint256 constant MAX_MINT_NR = 1000;\r\n  uint256 public nextMintID;\r\n\r\n  string baseURI;\r\n  string _symbol;\r\n  string _name;\r\n\r\n  address [] whitelisted;\r\n  \r\n  bool public isMintWindowOpen;\r\n\r\n\r\n  bytes4 internal constant MAGIC_ON_ERC721_RECEIVED = 0x150b7a02;\r\n\r\n  mapping (uint256 => address) internal idToOwner;\r\n\r\n\r\n  mapping (uint256 => address) internal idToApproval;\r\n\r\n\r\n  mapping (address => uint256) internal ownerToNFTokenCount;\r\n\r\n  mapping (address => mapping (address => bool)) internal ownerToOperators;\r\n\r\n  modifier canOperate(\r\n    uint256 _tokenId\r\n  )\r\n  {\r\n    address tokenOwner = idToOwner[_tokenId];\r\n    require(\r\n      tokenOwner == msg.sender || ownerToOperators[tokenOwner][msg.sender],\r\n      \"003003\"\r\n    );\r\n    _;\r\n  }\r\n\r\n  modifier canTransfer(\r\n    uint256 _tokenId\r\n  )\r\n  {\r\n    address tokenOwner = idToOwner[_tokenId];\r\n    require(\r\n      tokenOwner == msg.sender\r\n      || idToApproval[_tokenId] == msg.sender\r\n      || ownerToOperators[tokenOwner][msg.sender],\r\n      \"003004\"\r\n    );\r\n    _;\r\n  }\r\n\r\n  modifier validNFToken(\r\n    uint256 _tokenId\r\n  )\r\n  {\r\n    require(idToOwner[_tokenId] != address(0), \"003002\");\r\n    _;\r\n  }\r\n\r\n  constructor()\r\n  {\r\n    _name = \"DIEDED\";\r\n    _symbol = \"DIEDED\";\r\n    setBaseTokenURI(\"https://dieded.art/URIS/\");\r\n    supportedInterfaces[0x80ac58cd] = true; // ERC721\r\n  }\r\n\r\n\r\n  function setBaseTokenURI(string memory _baseURI) public onlyOwner{\r\n      baseURI = _baseURI;\r\n  }\r\n\r\n  function name() external view returns (string memory name_ret){\r\n      return _name;\r\n  }\r\n\r\n  function symbol() external view returns (string memory symbol_ret){\r\n      return _symbol;\r\n  }\r\n\r\n\r\n  function tokenURI(uint256 tokenId) public view virtual returns (string memory) {\r\n    require(tokenId <= nextMintID, \"ERC721: URI query for nonexistent token\");\r\n    return string(abi.encodePacked(baseURI, uint2str(tokenId), \".json\"));\r\n  }\r\n\r\n\r\n  function _mint(\r\n    address _to,\r\n    uint256 _tokenId\r\n  )\r\n    internal\r\n    virtual\r\n  {\r\n    require(_to != address(0), \"003001\");\r\n    require(idToOwner[_tokenId] == address(0), \"003006\");\r\n\r\n    _addNFToken(_to, _tokenId);\r\n    \r\n    emit Transfer(address(0), _to, _tokenId);\r\n  }\r\n\r\n\r\n  function safeTransferFrom(\r\n    address _from,\r\n    address _to,\r\n    uint256 _tokenId,\r\n    bytes calldata _data\r\n  )\r\n    external\r\n    override\r\n  {\r\n    _safeTransferFrom(_from, _to, _tokenId, _data);\r\n  }\r\n\r\n  function safeTransferFrom(\r\n    address _from,\r\n    address _to,\r\n    uint256 _tokenId\r\n  )\r\n    external\r\n    override\r\n  {\r\n    _safeTransferFrom(_from, _to, _tokenId, \"\");\r\n  }\r\n\r\n  function transferFrom(\r\n    address _from,\r\n    address _to,\r\n    uint256 _tokenId\r\n  )\r\n    external\r\n    override\r\n    canTransfer(_tokenId)\r\n    validNFToken(_tokenId)\r\n  {\r\n    address tokenOwner = idToOwner[_tokenId];\r\n    require(tokenOwner == _from, \"003007\");\r\n    require(_to != address(0), \"003001\");\r\n\r\n    _transfer(_to, _tokenId);\r\n  }\r\n\r\n  function approve(\r\n    address _approved,\r\n    uint256 _tokenId\r\n  )\r\n    external\r\n    override\r\n    canOperate(_tokenId)\r\n    validNFToken(_tokenId)\r\n  {\r\n    address tokenOwner = idToOwner[_tokenId];\r\n    require(_approved != tokenOwner, \"003008\");\r\n\r\n    idToApproval[_tokenId] = _approved;\r\n    emit Approval(tokenOwner, _approved, _tokenId);\r\n  }\r\n\r\n  function setApprovalForAll(\r\n    address _operator,\r\n    bool _approved\r\n  )\r\n    external\r\n    override\r\n  {\r\n    ownerToOperators[msg.sender][_operator] = _approved;\r\n    emit ApprovalForAll(msg.sender, _operator, _approved);\r\n  }\r\n\r\n  function balanceOf(\r\n    address _owner\r\n  )\r\n    external\r\n    override\r\n    view\r\n    returns (uint256)\r\n  {\r\n    require(_owner != address(0), \"003001\");\r\n    return _getOwnerNFTCount(_owner);\r\n  }\r\n\r\n  function ownerOf(\r\n    uint256 _tokenId\r\n  )\r\n    external\r\n    override\r\n    view\r\n    returns (address _owner)\r\n  {\r\n    _owner = idToOwner[_tokenId];\r\n    require(_owner != address(0), \"003002\");\r\n  }\r\n\r\n  function getApproved(\r\n    uint256 _tokenId\r\n  )\r\n    external\r\n    override\r\n    view\r\n    validNFToken(_tokenId)\r\n    returns (address)\r\n  {\r\n    return idToApproval[_tokenId];\r\n  }\r\n\r\n  function isApprovedForAll(\r\n    address _owner,\r\n    address _operator\r\n  )\r\n    external\r\n    override\r\n    view\r\n    returns (bool)\r\n  {\r\n    return ownerToOperators[_owner][_operator];\r\n  }\r\n\r\n  function _transfer(\r\n    address _to,\r\n    uint256 _tokenId\r\n  )\r\n    internal\r\n  {\r\n    address from = idToOwner[_tokenId];\r\n    _clearApproval(_tokenId);\r\n\r\n    _removeNFToken(from, _tokenId);\r\n    _addNFToken(_to, _tokenId);\r\n\r\n    emit Transfer(from, _to, _tokenId);\r\n  }\r\n\r\n\r\n  function _removeNFToken(\r\n    address _from,\r\n    uint256 _tokenId\r\n  )\r\n    internal\r\n    virtual\r\n  {\r\n    require(idToOwner[_tokenId] == _from, \"003007\");\r\n    ownerToNFTokenCount[_from] -= 1;\r\n    delete idToOwner[_tokenId];\r\n  }\r\n\r\n  function _addNFToken(\r\n    address _to,\r\n    uint256 _tokenId\r\n  )\r\n    internal\r\n    virtual\r\n  {\r\n    require(idToOwner[_tokenId] == address(0), \"003006\");\r\n\r\n    idToOwner[_tokenId] = _to;\r\n    ownerToNFTokenCount[_to] += 1;\r\n  }\r\n\r\n\r\n  function _getOwnerNFTCount(\r\n    address _owner\r\n  )\r\n    internal\r\n    virtual\r\n    view\r\n    returns (uint256)\r\n  {\r\n    return ownerToNFTokenCount[_owner];\r\n  }\r\n\r\n  function _safeTransferFrom(\r\n    address _from,\r\n    address _to,\r\n    uint256 _tokenId,\r\n    bytes memory _data\r\n  )\r\n    private\r\n    canTransfer(_tokenId)\r\n    validNFToken(_tokenId)\r\n  {\r\n    address tokenOwner = idToOwner[_tokenId];\r\n    require(tokenOwner == _from, \"003007\");\r\n    require(_to != address(0), \"003001\");\r\n\r\n    _transfer(_to, _tokenId);\r\n\r\n    if (_to.isContract())\r\n    {\r\n      bytes4 retval = ERC721TokenReceiver(_to).onERC721Received(msg.sender, _from, _tokenId, _data);\r\n      require(retval == MAGIC_ON_ERC721_RECEIVED, \"003005\");\r\n    }\r\n  }\r\n\r\n  function _clearApproval(\r\n    uint256 _tokenId\r\n  )\r\n    private\r\n  {\r\n    delete idToApproval[_tokenId];\r\n  }\r\n\r\n  function uint2str(uint _i) internal pure returns (string memory _uintAsString) {\r\n    if (_i == 0) {\r\n        return \"0\";\r\n    }\r\n    uint j = _i;\r\n    uint len;\r\n    while (j != 0) {\r\n        len++;\r\n        j /= 10;\r\n    }\r\n    bytes memory bstr = new bytes(len);\r\n    uint k = len;\r\n    while (_i != 0) {\r\n        k = k-1;\r\n        uint8 temp = (48 + uint8(_i - _i / 10 * 10));\r\n        bytes1 b1 = bytes1(temp);\r\n        bstr[k] = b1;\r\n        _i /= 10;\r\n    }\r\n    return string(bstr);\r\n  }\r\n\r\n}\r\n\r\n// File: contracts/erc721-enumerable.sol\r\n\r\ninterface ERC721Enumerable\r\n{\r\n\r\n  function totalSupply()\r\n    external\r\n    view\r\n    returns (uint256);\r\n\r\n  function tokenByIndex(\r\n    uint256 _index\r\n  )\r\n    external\r\n    view\r\n    returns (uint256);\r\n\r\n  function tokenOfOwnerByIndex(\r\n    address _owner,\r\n    uint256 _index\r\n  )\r\n    external\r\n    view\r\n    returns (uint256);\r\n\r\n}\r\n\r\n// File: contracts/nf-token-enumerable.sol\r\n\r\ncontract DIEDED is\r\n  DIEDED_BASE,\r\n  ERC721Enumerable\r\n{\r\n\r\n\r\n  string constant INVALID_INDEX = \"005007\";\r\n\r\n  uint256[] internal tokens;\r\n\r\n\r\n  mapping(uint256 => uint256) internal idToIndex;\r\n\r\n\r\n  mapping(address => uint256[]) internal ownerToIds;\r\n\r\n  mapping(uint256 => uint256) internal idToOwnerIndex;\r\n\r\n  mapping(address => uint8) internal whitelistedClaimed;\r\n\r\n  constructor(address[] memory _whitelisted)\r\n  {  \r\n    nextMintID = 45;\r\n\r\n    for (uint8 i=0; i<_whitelisted.length; i++)\r\n    {\r\n        whitelisted.push(_whitelisted[i]);\r\n        whitelistedClaimed[_whitelisted[i]] = 10; //not claimed\r\n    }\r\n\r\n    isMintWindowOpen = false;\r\n    supportedInterfaces[0x780e9d63] = true; // ERC721Enumerable\r\n  }\r\n\r\n  function openCloseMint(bool _status) public onlyOwner{\r\n      isMintWindowOpen = _status;\r\n  }\r\n\r\n  function mintForOwner(uint8 section) public onlyOwner{\r\n    if(section == 0){\r\n      for (uint8 i=0; i<45; i++) {    \r\n          _mintForOWner(msg.sender,i); \r\n      }\r\n    }\r\n    else if(section == 1){\r\n      for (uint8 i=0; i<15; i++) {    \r\n          _mintForOWner(msg.sender,i); \r\n      }\r\n    }\r\n    else if(section == 2){\r\n      for (uint8 i=15; i<30; i++) {    \r\n          _mintForOWner(msg.sender,i); \r\n      }\r\n    }\r\n    else if(section == 3){\r\n      for (uint8 i=30; i<45; i++) {    \r\n          _mintForOWner(msg.sender,i); \r\n      }\r\n    }\r\n\r\n  }\r\n\r\n  function addToWhitelistArray(address[] memory _whitelisted) public onlyOwner {\r\n    for (uint8 i=0; i<_whitelisted.length; i++)\r\n    {\r\n        whitelisted.push(_whitelisted[i]);\r\n        whitelistedClaimed[_whitelisted[i]] = 10; //not claimed\r\n    }\r\n  }\r\n\r\n  function totalSupply()\r\n    external\r\n    override\r\n    view\r\n    returns (uint256)\r\n  {\r\n    return tokens.length;\r\n  }\r\n\r\n  function tokenByIndex(\r\n    uint256 _index\r\n  )\r\n    external\r\n    override\r\n    view\r\n    returns (uint256)\r\n  {\r\n    require(_index < tokens.length, INVALID_INDEX);\r\n    return tokens[_index];\r\n  }\r\n\r\n  function tokenOfOwnerByIndex(\r\n    address _owner,\r\n    uint256 _index\r\n  )\r\n    external\r\n    override\r\n    view\r\n    returns (uint256)\r\n  {\r\n    require(_index < ownerToIds[_owner].length, INVALID_INDEX);\r\n    return ownerToIds[_owner][_index];\r\n  }\r\n\r\n  function tokenOfOwnerByIndexInternal(\r\n    address _owner,\r\n    uint256 _index\r\n  )\r\n    internal\r\n    view\r\n    returns (uint256)\r\n  {\r\n    require(_index < ownerToIds[_owner].length, INVALID_INDEX);\r\n    return ownerToIds[_owner][_index];\r\n  }\r\n\r\n  function isEligibleToFutureMints(address who, uint256 _modulo) external view returns (bool)\r\n  {\r\n    \r\n    for (uint256 i=0; i<_getOwnerNFTCount(who); i++)\r\n    {\r\n        uint256 token_id = tokenOfOwnerByIndexInternal(who, i);\r\n        if(token_id % 20 == _modulo)\r\n        {\r\n          return true;\r\n        }\r\n    }\r\n\r\n    return false;\r\n  }\r\n\r\n  function isWhitelistedAndNotClaimedYet(address isWhitelistedAddr) public view returns (bool) {\r\n    bool result = false;\r\n    for (uint256 i=0; i<whitelisted.length; i++)\r\n    {\r\n        if( whitelisted[i] == isWhitelistedAddr && whitelistedClaimed[isWhitelistedAddr] == 10)\r\n        {\r\n            return true;\r\n        }\r\n    }\r\n    return result;\r\n  } \r\n\r\n  function claim(uint8 mint_num) external payable{\r\n    require(isMintWindowOpen, \"Mint window is not open\");\r\n    require(mint_num + nextMintID < MAX_MINT_NR+1, \"The amount of mints would exceed the supply!\");\r\n    require(_getOwnerNFTCount(msg.sender) + mint_num <= 5, \"Claiming too many assets per address\");\r\n\r\n    bool whitelisted_res = isWhitelistedAndNotClaimedYet(msg.sender);\r\n\r\n  if( \r\n      (mint_num == 1 && whitelisted_res == false) ||\r\n      (mint_num == 2 && whitelisted_res == true)\r\n    )\r\n  {\r\n    require(msg.value >= 0.0666 ether, \"Claiming such amount of membership costs 0.0666 ETH for this address\");\r\n  }\r\n  else if ( \r\n      (mint_num == 2 && whitelisted_res == false) ||\r\n      (mint_num == 3 && whitelisted_res == true)\r\n    )\r\n  {\r\n    require(msg.value >= 0.1332 ether, \"Claiming such amount of membership costs 0.1332 ETH for this address\");\r\n  }\r\n  else if ( \r\n      (mint_num == 3 && whitelisted_res == false) ||\r\n      (mint_num == 4 && whitelisted_res == true)\r\n    )\r\n  {\r\n    require(msg.value >= 0.1998 ether, \"Claiming such amount of membership costs 0.1998 ETH for this address\");\r\n  }\r\n  else if ( (mint_num == 4 && whitelisted_res == false) ||\r\n            (mint_num == 5 && whitelisted_res == true)\r\n          )\r\n  {\r\n    require(msg.value >= 0.2664 ether, \"Claiming such amount of membership costs 0.2664 ETH for this address\");\r\n  }\r\n  else if ( (mint_num == 5 && whitelisted_res == false) )\r\n  {\r\n    require(msg.value >= 0.333 ether, \"Claiming such amount of membership costs 0.333 ETH for this address\");\r\n  }\r\n\r\n  for (uint8 i=0; i<mint_num; i++)\r\n  {\r\n    whitelisted_res = isWhitelistedAndNotClaimedYet(msg.sender);\r\n    if ( whitelisted_res == true ){\r\n      whitelistedClaimed[msg.sender] = 20; //claimed\r\n        _mint(msg.sender,nextMintID);\r\n    }\r\n    else{\r\n        _mint(msg.sender,nextMintID);\r\n    }\r\n  }\r\n  // Transfer mint price to contract owner\r\n  payable(owner()).transfer(msg.value);\r\n}\r\n\r\n\r\n  function _mint(\r\n    address _to,\r\n    uint256 _tokenId\r\n  )\r\n    internal\r\n    override\r\n    virtual\r\n  {\r\n    require (nextMintID < MAX_MINT_NR);\r\n    super._mint(_to, _tokenId);\r\n    tokens.push(_tokenId);\r\n    idToIndex[_tokenId] = tokens.length - 1;\r\n    nextMintID += 1;\r\n  }\r\n\r\n  function _mintForOWner(\r\n    address _to,\r\n    uint256 _tokenId\r\n  )\r\n    internal onlyOwner\r\n  {\r\n    super._mint(_to, _tokenId);\r\n    tokens.push(_tokenId);\r\n    idToIndex[_tokenId] = tokens.length - 1;\r\n\r\n  }\r\n\r\n  function _removeNFToken(\r\n    address _from,\r\n    uint256 _tokenId\r\n  )\r\n    internal\r\n    override\r\n    virtual\r\n  {\r\n    require(idToOwner[_tokenId] == _from, \"003006\");\r\n    delete idToOwner[_tokenId];\r\n\r\n    uint256 tokenToRemoveIndex = idToOwnerIndex[_tokenId];\r\n    uint256 lastTokenIndex = ownerToIds[_from].length - 1;\r\n\r\n    if (lastTokenIndex != tokenToRemoveIndex)\r\n    {\r\n      uint256 lastToken = ownerToIds[_from][lastTokenIndex];\r\n      ownerToIds[_from][tokenToRemoveIndex] = lastToken;\r\n      idToOwnerIndex[lastToken] = tokenToRemoveIndex;\r\n    }\r\n\r\n    ownerToIds[_from].pop();\r\n  }\r\n\r\n  function _addNFToken(\r\n    address _to,\r\n    uint256 _tokenId\r\n  )\r\n    internal\r\n    override\r\n    virtual\r\n  {\r\n    require(idToOwner[_tokenId] == address(0), \"003007\");\r\n    idToOwner[_tokenId] = _to;\r\n\r\n    ownerToIds[_to].push(_tokenId);\r\n    idToOwnerIndex[_tokenId] = ownerToIds[_to].length - 1;\r\n  }\r\n\r\n  function _getOwnerNFTCount(\r\n    address _owner\r\n  )\r\n    internal\r\n    override\r\n    virtual\r\n    view\r\n    returns (uint256)\r\n  {\r\n    return ownerToIds[_owner].length;\r\n  }\r\n}","ABI":"[{\"inputs\":[{\"internalType\":\"address[]\",\"name\":\"_whitelisted\",\"type\":\"address[]\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"_owner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"_approved\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"_tokenId\",\"type\":\"uint256\"}],\"name\":\"Approval\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"_owner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"_operator\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"bool\",\"name\":\"_approved\",\"type\":\"bool\"}],\"name\":\"ApprovalForAll\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"_from\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"_to\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"_tokenId\",\"type\":\"uint256\"}],\"name\":\"Transfer\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"address[]\",\"name\":\"_whitelisted\",\"type\":\"address[]\"}],\"name\":\"addToWhitelistArray\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_approved\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_tokenId\",\"type\":\"uint256\"}],\"name\":\"approve\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_owner\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint8\",\"name\":\"mint_num\",\"type\":\"uint8\"}],\"name\":\"claim\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_tokenId\",\"type\":\"uint256\"}],\"name\":\"getApproved\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_owner\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_operator\",\"type\":\"address\"}],\"name\":\"isApprovedForAll\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"who\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_modulo\",\"type\":\"uint256\"}],\"name\":\"isEligibleToFutureMints\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"isMintWindowOpen\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"isOwner\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"isWhitelistedAddr\",\"type\":\"address\"}],\"name\":\"isWhitelistedAndNotClaimedYet\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint8\",\"name\":\"section\",\"type\":\"uint8\"}],\"name\":\"mintForOwner\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"name\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"name_ret\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"nextMintID\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bool\",\"name\":\"_status\",\"type\":\"bool\"}],\"name\":\"openCloseMint\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_tokenId\",\"type\":\"uint256\"}],\"name\":\"ownerOf\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"_owner\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_from\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_tokenId\",\"type\":\"uint256\"}],\"name\":\"safeTransferFrom\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_from\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_tokenId\",\"type\":\"uint256\"},{\"internalType\":\"bytes\",\"name\":\"_data\",\"type\":\"bytes\"}],\"name\":\"safeTransferFrom\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_operator\",\"type\":\"address\"},{\"internalType\":\"bool\",\"name\":\"_approved\",\"type\":\"bool\"}],\"name\":\"setApprovalForAll\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"string\",\"name\":\"_baseURI\",\"type\":\"string\"}],\"name\":\"setBaseTokenURI\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes4\",\"name\":\"_interfaceID\",\"type\":\"bytes4\"}],\"name\":\"supportsInterface\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"symbol\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"symbol_ret\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_index\",\"type\":\"uint256\"}],\"name\":\"tokenByIndex\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_owner\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_index\",\"type\":\"uint256\"}],\"name\":\"tokenOfOwnerByIndex\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"tokenURI\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalSupply\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_from\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_tokenId\",\"type\":\"uint256\"}],\"name\":\"transferFrom\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}]","ContractName":"DIEDED","CompilerVersion":"v0.8.6+commit.11564f7e","OptimizationUsed":"1","Runs":"200","ConstructorArguments":"00000000000000000000000000000000000000000000000000000000000000200000000000000000000000000000000000000000000000000000000000000016000000000000000000000000e5d14cb5775eb034156892c4b2685236901228c2000000000000000000000000f74007f686c5da1f3ec47108cb004063dce9d4d80000000000000000000000008f2d1abe7305ea6e9337ca1a9a2079ac24e6d0990000000000000000000000001c400f46bd88373c2212bbe1e1ca74c4ca8ae02a000000000000000000000000a05318cbd62f8fb023d057a55a44245631102202000000000000000000000000ab833e38a35164c9edae07b9747ab6d32434bef1000000000000000000000000d116a6edaaa77bb0b9d758c8e8d705b3908d9353000000000000000000000000410dabccd4c151cb603db588501922684573f561000000000000000000000000cc72abc33938ae68e96b9b848a9714640ff23f400000000000000000000000000dd3e554c9ca47cb3a7b5935a9743de812dfc0100000000000000000000000001326cfa027c77d5df1bbc3c2c8e602aca3d157e5000000000000000000000000225edf2135fe094a4558b959c47f11a5b4c907c6000000000000000000000000e626c7601a7eb031bbdb75acd1276c4dd78543d2000000000000000000000000e59f57c91bb2684796167eca78dc6aeeefa49cd8000000000000000000000000f7d96755ce28f0d8e0bd0d8875b0ff1c4e1f4e080000000000000000000000002a753194b84b2fb7e01ee8b3cd9b0fd4e7c49b5c000000000000000000000000a6fe71927b49147d8adf5526b7416e0adf82400400000000000000000000000025ec62e26f38e70fe6a77732cadb274761089b60000000000000000000000000ac90c8509b76e1ad31280576ca7998e9982a6770000000000000000000000000cc04b9aad232fe26e5690141fcfd20d619e0cfd4000000000000000000000000601cbb26680cbed98d0b7d1ae5c8374c644ebc77000000000000000000000000833e93b9eb79ae41411bf62146d3f30b5501c182","EVMVersion":"Default","Library":"","LicenseType":"MIT","Proxy":"0","Implementation":"","SwarmSource":"ipfs://a3b192e93d9b629edcdd8940b96ea70775f48ccc4afb25024c52ccc813e646a8"}]}