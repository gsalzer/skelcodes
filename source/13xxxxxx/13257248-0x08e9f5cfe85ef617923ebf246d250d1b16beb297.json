{"status":"1","message":"OK","result":[{"SourceCode":"// SPDX-License-Identifier: GPL-v3.0\r\n\r\n// File: @openzeppelin/contracts/utils/Context.sol\r\n\r\n\r\n\r\npragma solidity ^0.8.0;\r\n\r\n/**\r\n * @dev Provides information about the current execution context, including the\r\n * sender of the transaction and its data. While these are generally available\r\n * via msg.sender and msg.data, they should not be accessed in such a direct\r\n * manner, since when dealing with meta-transactions the account sending and\r\n * paying for execution may not be the actual sender (as far as an application\r\n * is concerned).\r\n *\r\n * This contract is only required for intermediate, library-like contracts.\r\n */\r\nabstract contract Context {\r\n    function _msgSender() internal view virtual returns (address) {\r\n        return msg.sender;\r\n    }\r\n\r\n    function _msgData() internal view virtual returns (bytes calldata) {\r\n        return msg.data;\r\n    }\r\n}\r\n\r\n// File: @openzeppelin/contracts/access/Ownable.sol\r\n\r\n\r\n\r\npragma solidity ^0.8.0;\r\n\r\n\r\n/**\r\n * @dev Contract module which provides a basic access control mechanism, where\r\n * there is an account (an owner) that can be granted exclusive access to\r\n * specific functions.\r\n *\r\n * By default, the owner account will be the one that deploys the contract. This\r\n * can later be changed with {transferOwnership}.\r\n *\r\n * This module is used through inheritance. It will make available the modifier\r\n * `onlyOwner`, which can be applied to your functions to restrict their use to\r\n * the owner.\r\n */\r\nabstract contract Ownable is Context {\r\n    address private _owner;\r\n\r\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\r\n\r\n    /**\r\n     * @dev Initializes the contract setting the deployer as the initial owner.\r\n     */\r\n    constructor() {\r\n        _setOwner(_msgSender());\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the address of the current owner.\r\n     */\r\n    function owner() public view virtual returns (address) {\r\n        return _owner;\r\n    }\r\n\r\n    /**\r\n     * @dev Throws if called by any account other than the owner.\r\n     */\r\n    modifier onlyOwner() {\r\n        require(owner() == _msgSender(), \"Ownable: caller is not the owner\");\r\n        _;\r\n    }\r\n\r\n    /**\r\n     * @dev Leaves the contract without owner. It will not be possible to call\r\n     * `onlyOwner` functions anymore. Can only be called by the current owner.\r\n     *\r\n     * NOTE: Renouncing ownership will leave the contract without an owner,\r\n     * thereby removing any functionality that is only available to the owner.\r\n     */\r\n    function renounceOwnership() public virtual onlyOwner {\r\n        _setOwner(address(0));\r\n    }\r\n\r\n    /**\r\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\r\n     * Can only be called by the current owner.\r\n     */\r\n    function transferOwnership(address newOwner) public virtual onlyOwner {\r\n        require(newOwner != address(0), \"Ownable: new owner is the zero address\");\r\n        _setOwner(newOwner);\r\n    }\r\n\r\n    function _setOwner(address newOwner) private {\r\n        address oldOwner = _owner;\r\n        _owner = newOwner;\r\n        emit OwnershipTransferred(oldOwner, newOwner);\r\n    }\r\n}\r\n\r\n// File: lock.sol\r\n\r\n\r\npragma solidity >=0.8.4;\r\npragma abicoder v2;\r\n\r\n/// @title Non-fungible token for positions\r\n/// @notice Wraps Uniswap V3 positions in a non-fungible token interface which allows for them to be transferred\r\n/// and authorized.\r\ninterface INonfungiblePositionManager {\r\n    /**\r\n     * @dev Transfers `tokenId` token from `from` to `to`.\r\n     *\r\n     * WARNING: Usage of this method is discouraged, use {safeTransferFrom} whenever possible.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - `from` cannot be the zero address.\r\n     * - `to` cannot be the zero address.\r\n     * - `tokenId` token must be owned by `from`.\r\n     * - If the caller is not `from`, it must be approved to move this token by either {approve} or {setApprovalForAll}.\r\n     *\r\n     * Emits a {Transfer} event.\r\n     */\r\n    function transferFrom(\r\n        address from,\r\n        address to,\r\n        uint256 tokenId\r\n    ) external;\r\n\r\n    struct CollectParams {\r\n        uint256 tokenId;\r\n        address recipient;\r\n        uint128 amount0Max;\r\n        uint128 amount1Max;\r\n    }\r\n\r\n    /// @notice Collects up to a maximum amount of fees owed to a specific position to the recipient\r\n    /// @param params tokenId The ID of the NFT for which tokens are being collected,\r\n    /// recipient The account that should receive the tokens,\r\n    /// amount0Max The maximum amount of token0 to collect,\r\n    /// amount1Max The maximum amount of token1 to collect\r\n    /// @return amount0 The amount of fees collected in token0\r\n    /// @return amount1 The amount of fees collected in token1\r\n    function collect(CollectParams calldata params) external payable returns (uint256 amount0, uint256 amount1);\r\n}\r\n\r\n\r\npragma solidity >=0.8.4;\r\n\r\nlibrary Position {\r\n    struct Info {\r\n        uint256 tokenId;\r\n        // duration in which fees can't be claimed\r\n        uint256 cliff;\r\n        // start timestamp\r\n        uint256 start;\r\n        // total lock duration\r\n        uint256 duration;\r\n        // allow fees to be claimed at feeReciever address\r\n        bool allowFeeClaim;\r\n        // allow owner to transfer ownership or update feeReciever\r\n        bool allowBeneficiaryUpdate;\r\n        // address to receive earned fees\r\n        address feeReciever;\r\n        // owner of the position\r\n        address owner;\r\n    }\r\n\r\n    function isPositionValid(Info memory self) internal view {\r\n        require(self.owner != address(0), \"ULL::OWNER_ZERO_ADDRESS\");\r\n        require(self.duration >= self.cliff, \"ULL::CLIFF_GT_DURATION\");\r\n        require(self.duration > 0, \"ULL::INVALID_DURATION\");\r\n        require((self.start + self.duration) > block.timestamp, \"ULL::INVALID_ENDING_TIME\");\r\n    }\r\n\r\n    function isOwner(Info memory self) internal view {\r\n        require(self.owner == msg.sender && self.allowBeneficiaryUpdate, \"ULL::NOT_AUTHORIZED\");\r\n    }\r\n\r\n    function isTokenIdValid(Info memory self, uint256 tokenId) internal pure {\r\n        require(self.tokenId == tokenId, \"ULL::INVALID_TOKEN_ID\");\r\n    }\r\n\r\n    function isTokenUnlocked(Info memory self) internal view {\r\n        require((self.start + self.duration) < block.timestamp, \"ULL::NOT_UNLOCKED\");\r\n    }\r\n\r\n    function isFeeClaimAllowed(Info memory self) internal view {\r\n        require(self.allowFeeClaim, \"ULL::FEE_CLAIM_NOT_ALLOWED\");\r\n        require((self.start + self.cliff) < block.timestamp, \"ULL::CLIFF_NOT_ENDED\");\r\n    }\r\n}\r\n\r\npragma solidity >=0.8.4;\r\n\r\ncontract UniswapV3LiquidityLocker{\r\n    using Position for Position.Info;\r\n\r\n    mapping(uint256 => Position.Info) public lockedLiquidityPositions;\r\n\r\n    INonfungiblePositionManager private _uniswapNFPositionManager;\r\n    uint128 private constant MAX_UINT128 = type(uint128).max;\r\n    address nftAdd;\r\n\r\n    event PositionUpdated(Position.Info position);\r\n    event FeeClaimed(uint256 tokenId);\r\n    event TokenUnlocked(uint256 tokenId);\r\n    event Transfer(address from,address to,uint256 tokenId);\r\n\r\n    constructor(address _nftadd) {\r\n        _uniswapNFPositionManager = INonfungiblePositionManager(_nftadd);\r\n    }\r\n    \r\n    function setNftAdd(address _nftadd) external{\r\n        _uniswapNFPositionManager = INonfungiblePositionManager(_nftadd);\r\n    }\r\n    \r\n    function getNftAdd() external view returns (address){\r\n        return nftAdd;\r\n    }\r\n    \r\n    function lockLPToken(Position.Info calldata params) external {\r\n        _uniswapNFPositionManager.transferFrom(msg.sender, address(this), params.tokenId);\r\n\r\n        params.isPositionValid();\r\n\r\n        lockedLiquidityPositions[params.tokenId] = params;\r\n\r\n        emit PositionUpdated(params);\r\n    }\r\n\r\n    function claimLPFee(uint256 tokenId) external returns (uint256 amount0, uint256 amount1) {\r\n        Position.Info memory llPosition = lockedLiquidityPositions[tokenId];\r\n\r\n        llPosition.isTokenIdValid(tokenId);\r\n        llPosition.isFeeClaimAllowed();\r\n\r\n        (amount0, amount1) = _uniswapNFPositionManager.collect(\r\n            INonfungiblePositionManager.CollectParams(tokenId, llPosition.feeReciever, MAX_UINT128, MAX_UINT128)\r\n        );\r\n\r\n        emit FeeClaimed(tokenId);\r\n    }\r\n\r\n    \r\n    function updateFeeReciever(uint256 tokenId, address feeReciever) external {\r\n        Position.Info storage llPosition = lockedLiquidityPositions[tokenId];\r\n\r\n        llPosition.isTokenIdValid(tokenId);\r\n        llPosition.isOwner();\r\n\r\n        llPosition.feeReciever = feeReciever;\r\n\r\n        emit PositionUpdated(llPosition);\r\n    }\r\n\r\n    function renounceBeneficiaryUpdate(uint256 tokenId) external {\r\n        Position.Info storage llPosition = lockedLiquidityPositions[tokenId];\r\n\r\n        llPosition.isTokenIdValid(tokenId);\r\n        llPosition.isOwner();\r\n\r\n        llPosition.allowBeneficiaryUpdate = false;\r\n\r\n        emit PositionUpdated(llPosition);\r\n    }\r\n\r\n    function unlockToken(uint256 tokenId) external {\r\n        Position.Info memory llPosition = lockedLiquidityPositions[tokenId];\r\n\r\n        llPosition.isTokenIdValid(tokenId);\r\n        llPosition.isTokenUnlocked();\r\n\r\n        _uniswapNFPositionManager.transferFrom(address(this), llPosition.owner, tokenId);\r\n\r\n        delete lockedLiquidityPositions[tokenId];\r\n\r\n        emit TokenUnlocked(tokenId);\r\n    }\r\n}","ABI":"[{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_nftadd\",\"type\":\"address\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"FeeClaimed\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"components\":[{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"cliff\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"start\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"duration\",\"type\":\"uint256\"},{\"internalType\":\"bool\",\"name\":\"allowFeeClaim\",\"type\":\"bool\"},{\"internalType\":\"bool\",\"name\":\"allowBeneficiaryUpdate\",\"type\":\"bool\"},{\"internalType\":\"address\",\"name\":\"feeReciever\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"}],\"indexed\":false,\"internalType\":\"struct Position.Info\",\"name\":\"position\",\"type\":\"tuple\"}],\"name\":\"PositionUpdated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"TokenUnlocked\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"Transfer\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"claimLPFee\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"amount0\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"amount1\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getNftAdd\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"components\":[{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"cliff\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"start\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"duration\",\"type\":\"uint256\"},{\"internalType\":\"bool\",\"name\":\"allowFeeClaim\",\"type\":\"bool\"},{\"internalType\":\"bool\",\"name\":\"allowBeneficiaryUpdate\",\"type\":\"bool\"},{\"internalType\":\"address\",\"name\":\"feeReciever\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"}],\"internalType\":\"struct Position.Info\",\"name\":\"params\",\"type\":\"tuple\"}],\"name\":\"lockLPToken\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"lockedLiquidityPositions\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"cliff\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"start\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"duration\",\"type\":\"uint256\"},{\"internalType\":\"bool\",\"name\":\"allowFeeClaim\",\"type\":\"bool\"},{\"internalType\":\"bool\",\"name\":\"allowBeneficiaryUpdate\",\"type\":\"bool\"},{\"internalType\":\"address\",\"name\":\"feeReciever\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"renounceBeneficiaryUpdate\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_nftadd\",\"type\":\"address\"}],\"name\":\"setNftAdd\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"unlockToken\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"feeReciever\",\"type\":\"address\"}],\"name\":\"updateFeeReciever\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}]","ContractName":"UniswapV3LiquidityLocker","CompilerVersion":"v0.8.7+commit.e28d00a7","OptimizationUsed":"0","Runs":"200","ConstructorArguments":"00000000000000000000000077e17431bf806e7ed2e98dd8a56af45c637bb6c9","EVMVersion":"Default","Library":"","LicenseType":"GNU GPLv3","Proxy":"0","Implementation":"","SwarmSource":"ipfs://d8b5402c9ea8e1f35c813f57fe06acc47648a64f24565b100f04258c7d374848"}]}