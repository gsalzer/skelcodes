{"status":"1","message":"OK","result":[{"SourceCode":"{{\r\n  \"language\": \"Solidity\",\r\n  \"sources\": {\r\n    \"contracts/MintAuthorization.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: UNLICENSED\\npragma solidity ^0.7.0;\\n\\nimport \\\"./lib/OwnerManagable.sol\\\";\\n\\ncontract MintAuthorization is OwnerManagable {\\n    address public immutable layer2;\\n\\n    constructor(\\n        address _owner,\\n        address _layer2,\\n        address[] memory _initialMinters,\\n        address[] memory _initialUpdaters\\n    ) {\\n        // Initially allow the deploying account to add minters/updaters\\n        owner = msg.sender;\\n\\n        layer2 = _layer2;\\n\\n        for (uint256 i = 0; i < _initialMinters.length; i++) {\\n            addActiveMinter(_initialMinters[i]);\\n        }\\n\\n        for (uint256 i = 0; i < _initialUpdaters.length; i++) {\\n            addUpdater(_initialUpdaters[i]);\\n        }\\n\\n        // From now on, only the specified owner can add/remove minters/updaters\\n        owner = _owner;\\n    }\\n}\\n\"\r\n    },\r\n    \"contracts/lib/OwnerManagable.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: UNLICENSED\\npragma solidity ^0.7.0;\\n\\nimport \\\"./AddressSet.sol\\\";\\nimport \\\"./Claimable.sol\\\";\\n\\ncontract OwnerManagable is Claimable, AddressSet {\\n    bytes32 internal constant MINTER = keccak256(\\\"__MINTERS__\\\");\\n    bytes32 internal constant RETIREDMINTER = keccak256(\\\"__RETIREDMINTERS__\\\");\\n    bytes32 internal constant UPDATER = keccak256(\\\"__UPDATER__\\\");\\n\\n    event MinterAdded(address indexed minter);\\n    event MinterRetired(address indexed minter);\\n    event UpdaterAdded(address indexed updater);\\n    event UpdaterRemoved(address indexed updater);\\n\\n    // All address that are currently authorized to mint NFTs on L2.\\n    function activeMinters() public view returns (address[] memory) {\\n        return addressesInSet(MINTER);\\n    }\\n\\n    // All address that were previously authorized to mint NFTs on L2.\\n    function retiredMinters() public view returns (address[] memory) {\\n        return addressesInSet(RETIREDMINTER);\\n    }\\n\\n    // All address that are authorized to add new collections.\\n    function updaters() public view returns (address[] memory) {\\n        return addressesInSet(UPDATER);\\n    }\\n\\n    function numActiveMinters() public view returns (uint256) {\\n        return numAddressesInSet(MINTER);\\n    }\\n\\n    function numRetiredMinters() public view returns (uint256) {\\n        return numAddressesInSet(RETIREDMINTER);\\n    }\\n\\n    function numUpdaters() public view returns (uint256) {\\n        return numAddressesInSet(UPDATER);\\n    }\\n\\n    function isActiveMinter(address addr) public view returns (bool) {\\n        return isAddressInSet(MINTER, addr);\\n    }\\n\\n    function isRetiredMinter(address addr) public view returns (bool) {\\n        return isAddressInSet(RETIREDMINTER, addr);\\n    }\\n\\n    function isUpdater(address addr) public view returns (bool) {\\n        return isAddressInSet(UPDATER, addr);\\n    }\\n\\n    function addActiveMinter(address minter) public virtual onlyOwner {\\n        addAddressToSet(MINTER, minter, true);\\n        if (isRetiredMinter(minter)) {\\n            removeAddressFromSet(RETIREDMINTER, minter);\\n        }\\n        emit MinterAdded(minter);\\n    }\\n\\n    function addUpdater(address updater) public virtual onlyOwner {\\n        addAddressToSet(UPDATER, updater, true);\\n        emit UpdaterAdded(updater);\\n    }\\n\\n    function removeUpdater(address updater) public virtual onlyOwner {\\n        removeAddressFromSet(UPDATER, updater);\\n        emit UpdaterRemoved(updater);\\n    }\\n\\n    function retireMinter(address minter) public virtual onlyOwner {\\n        removeAddressFromSet(MINTER, minter);\\n        addAddressToSet(RETIREDMINTER, minter, true);\\n        emit MinterRetired(minter);\\n    }\\n}\\n\"\r\n    },\r\n    \"contracts/lib/AddressSet.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: UNLICENSED\\npragma solidity ^0.7.0;\\n\\ncontract AddressSet {\\n    struct Set {\\n        address[] addresses;\\n        mapping(address => uint256) positions;\\n        uint256 count;\\n    }\\n    mapping(bytes32 => Set) private sets;\\n\\n    function addAddressToSet(\\n        bytes32 key,\\n        address addr,\\n        bool maintainList\\n    ) internal {\\n        Set storage set = sets[key];\\n        require(set.positions[addr] == 0, \\\"ALREADY_IN_SET\\\");\\n\\n        if (maintainList) {\\n            require(\\n                set.addresses.length == set.count,\\n                \\\"PREVIOUSLY_NOT_MAINTAILED\\\"\\n            );\\n            set.addresses.push(addr);\\n        } else {\\n            require(set.addresses.length == 0, \\\"MUST_MAINTAIN\\\");\\n        }\\n\\n        set.count += 1;\\n        set.positions[addr] = set.count;\\n    }\\n\\n    function removeAddressFromSet(bytes32 key, address addr) internal {\\n        Set storage set = sets[key];\\n        uint256 pos = set.positions[addr];\\n        require(pos != 0, \\\"NOT_IN_SET\\\");\\n\\n        delete set.positions[addr];\\n        set.count -= 1;\\n\\n        if (set.addresses.length > 0) {\\n            address lastAddr = set.addresses[set.count];\\n            if (lastAddr != addr) {\\n                set.addresses[pos - 1] = lastAddr;\\n                set.positions[lastAddr] = pos;\\n            }\\n            set.addresses.pop();\\n        }\\n    }\\n\\n    function isAddressInSet(bytes32 key, address addr)\\n        internal\\n        view\\n        returns (bool)\\n    {\\n        return sets[key].positions[addr] != 0;\\n    }\\n\\n    function numAddressesInSet(bytes32 key) internal view returns (uint256) {\\n        Set storage set = sets[key];\\n        return set.count;\\n    }\\n\\n    function addressesInSet(bytes32 key)\\n        internal\\n        view\\n        returns (address[] memory)\\n    {\\n        Set storage set = sets[key];\\n        require(set.count == set.addresses.length, \\\"NOT_MAINTAINED\\\");\\n        return sets[key].addresses;\\n    }\\n}\\n\"\r\n    },\r\n    \"contracts/lib/Claimable.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: UNLICENSED\\npragma solidity ^0.7.0;\\n\\nimport \\\"./Ownable.sol\\\";\\n\\n// Extension for the Ownable contract, where the ownership needs\\n// to be claimed. This allows the new owner to accept the transfer.\\ncontract Claimable is Ownable {\\n    address public pendingOwner;\\n\\n    modifier onlyPendingOwner() {\\n        require(msg.sender == pendingOwner, \\\"UNAUTHORIZED\\\");\\n        _;\\n    }\\n\\n    function transferOwnership(address newOwner) public onlyOwner {\\n        require(newOwner != address(0) && newOwner != owner, \\\"INVALID_ADDRESS\\\");\\n        pendingOwner = newOwner;\\n    }\\n\\n    function claimOwnership() public onlyPendingOwner {\\n        emit OwnershipTransferred(owner, pendingOwner);\\n        owner = pendingOwner;\\n        pendingOwner = address(0);\\n    }\\n}\\n\"\r\n    },\r\n    \"contracts/lib/Ownable.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: UNLICENSED\\npragma solidity ^0.7.0;\\n\\n// The Ownable contract has an owner address, and provides basic\\n// authorization control functions, this simplifies the implementation of\\n// \\\"user permissions\\\". Subclasses are responsible for initializing the\\n// `owner` property (it is not done in a constructor to faciliate use of\\n// a factory proxy pattern).\\ncontract Ownable {\\n    address public owner;\\n\\n    event OwnershipTransferred(\\n        address indexed previousOwner,\\n        address indexed newOwner\\n    );\\n\\n    modifier onlyOwner() {\\n        require(msg.sender == owner, \\\"UNAUTHORIZED\\\");\\n        _;\\n    }\\n\\n    function renounceOwnership() public onlyOwner {\\n        emit OwnershipTransferred(owner, address(0));\\n        owner = address(0);\\n    }\\n}\\n\"\r\n    }\r\n  },\r\n  \"settings\": {\r\n    \"optimizer\": {\r\n      \"enabled\": true,\r\n      \"runs\": 1000\r\n    },\r\n    \"outputSelection\": {\r\n      \"*\": {\r\n        \"*\": [\r\n          \"evm.bytecode\",\r\n          \"evm.deployedBytecode\",\r\n          \"devdoc\",\r\n          \"userdoc\",\r\n          \"metadata\",\r\n          \"abi\"\r\n        ]\r\n      }\r\n    },\r\n    \"libraries\": {}\r\n  }\r\n}}","ABI":"[{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_owner\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_layer2\",\"type\":\"address\"},{\"internalType\":\"address[]\",\"name\":\"_initialMinters\",\"type\":\"address[]\"},{\"internalType\":\"address[]\",\"name\":\"_initialUpdaters\",\"type\":\"address[]\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"minter\",\"type\":\"address\"}],\"name\":\"MinterAdded\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"minter\",\"type\":\"address\"}],\"name\":\"MinterRetired\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"updater\",\"type\":\"address\"}],\"name\":\"UpdaterAdded\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"updater\",\"type\":\"address\"}],\"name\":\"UpdaterRemoved\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"activeMinters\",\"outputs\":[{\"internalType\":\"address[]\",\"name\":\"\",\"type\":\"address[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"minter\",\"type\":\"address\"}],\"name\":\"addActiveMinter\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"updater\",\"type\":\"address\"}],\"name\":\"addUpdater\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"claimOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"addr\",\"type\":\"address\"}],\"name\":\"isActiveMinter\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"addr\",\"type\":\"address\"}],\"name\":\"isRetiredMinter\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"addr\",\"type\":\"address\"}],\"name\":\"isUpdater\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"layer2\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"numActiveMinters\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"numRetiredMinters\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"numUpdaters\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"pendingOwner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"updater\",\"type\":\"address\"}],\"name\":\"removeUpdater\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"minter\",\"type\":\"address\"}],\"name\":\"retireMinter\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"retiredMinters\",\"outputs\":[{\"internalType\":\"address[]\",\"name\":\"\",\"type\":\"address[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"updaters\",\"outputs\":[{\"internalType\":\"address[]\",\"name\":\"\",\"type\":\"address[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"}]","ContractName":"MintAuthorization","CompilerVersion":"v0.7.0+commit.9e61f92b","OptimizationUsed":"1","Runs":"1000","ConstructorArguments":"0000000000000000000000005593b2b8dc63d0ed68aa8f885707b2dc5787e3910000000000000000000000000baba1ad5be3a5c0a66e7ac838a129bf948f1ea4000000000000000000000000000000000000000000000000000000000000008000000000000000000000000000000000000000000000000000000000000000c000000000000000000000000000000000000000000000000000000000000000010000000000000000000000005593b2b8dc63d0ed68aa8f885707b2dc5787e39100000000000000000000000000000000000000000000000000000000000000010000000000000000000000005593b2b8dc63d0ed68aa8f885707b2dc5787e391","EVMVersion":"Default","Library":"","LicenseType":"","Proxy":"0","Implementation":"","SwarmSource":""}]}