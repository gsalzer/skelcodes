{"status":"1","message":"OK","result":[{"SourceCode":"{{\r\n  \"language\": \"Solidity\",\r\n  \"sources\": {\r\n    \"contracts/YourContract.sol\": {\r\n      \"content\": \"pragma solidity >=0.8.0 <0.9.0;\\n//SPDX-License-Identifier: MIT\\n\\n//import \\\"hardhat/console.sol\\\";\\nimport \\\"@openzeppelin/contracts/token/ERC721/ERC721.sol\\\";\\nimport \\\"@openzeppelin/contracts/token/ERC721/extensions/ERC721Enumerable.sol\\\";\\nimport \\\"@openzeppelin/contracts/security/ReentrancyGuard.sol\\\";\\nimport \\\"@openzeppelin/contracts/access/Ownable.sol\\\";\\nimport \\\"@openzeppelin/contracts/utils/Counters.sol\\\";\\nimport \\\"@openzeppelin/contracts/utils/Strings.sol\\\";\\nimport 'base64-sol/base64.sol';\\nimport \\\"./SnakerMaker.sol\\\";\\n// import \\\"@openzeppelin/contracts/access/Ownable.sol\\\"; \\n// https://github.com/OpenZeppelin/openzeppelin-contracts/blob/master/contracts/access/Ownable.sol\\n\\ncontract YourContract is ERC721, ERC721Enumerable, ReentrancyGuard, Ownable {\\n  constructor() ERC721(\\\"SNAKESONACHAIN\\\", \\\"SNKS\\\") {}\\n\\n\\n  using Strings for uint256;\\n  using Counters for Counters.Counter;\\n\\n  Counters.Counter private _tokenIds;\\n\\n  uint256 public constant MAX_SUPPLY = 2000;\\n  uint256 public constant PRICE = 0.015 ether;\\n\\n  function contractURI() public view returns (string memory) {\\n        return \\\"https://snakesonachain.club/my-metadata\\\";\\n    }\\n  \\n\\n  function mintItem(uint256 numTokens)\\n      public\\n      payable\\n      virtual\\n  {     \\n      _mintItem(numTokens, _msgSender());\\n  }\\n\\n    function mintForFriend(uint256 numTokens, address walletAddress) \\n      public\\n      payable\\n      virtual\\n    {\\n      _mintItem(numTokens, walletAddress);\\n    }\\n\\n  function _mintItem(uint256 numTokens, address destination) private {\\n      require(numTokens > 0, \\\"Negative\\\");\\n      require(PRICE * numTokens == msg.value, \\\"amount wrong\\\");\\n      require(totalSupply() < MAX_SUPPLY, \\\"sold out\\\");\\n      require(totalSupply() + numTokens <= MAX_SUPPLY, \\\"Too many\\\");\\n      require( numTokens < 21, \\\"Too many\\\");\\n\\n      for (uint256 i = 0; i < numTokens; i++) {\\n          uint256 id = _tokenIds.current();\\n          _safeMint(destination, id);\\n          _tokenIds.increment();\\n      }\\n  }\\n\\n  function getTotalSupply() public view returns (uint256) {\\n    return totalSupply();\\n  }\\n\\n  function withdrawAll() public payable nonReentrant onlyOwner {\\n      require(payable(_msgSender()).send(address(this).balance));\\n  }\\n\\n  function tokenURI(uint256 id) public view override returns (string memory) {\\n      require(_exists(id), \\\"id does not exist\\\");\\n      SnakerMaker.Snake memory snk;\\n      string memory svg;\\n\\n      string[3] memory backgroundNames = [\\n            \\\"WATER\\\",\\n            \\\"DESERT\\\",\\n            \\\"SPACE\\\"\\n        ];\\n\\n      string[5] memory thicknessNames = [\\n            \\\"SKINNY\\\",\\n            \\\"WHIMSY\\\",\\n            \\\"BASIC\\\",\\n            \\\"NOICE\\\", \\n            \\\"THICC\\\"\\n        ];\\n\\n       string memory name = string(abi.encodePacked('Snake on a chain #',id.toString()));\\n      string memory description = string(abi.encodePacked('Every snake follows its own path (in life)'));\\n      (snk, svg) = SnakerMaker.generateSVGofTokenById(id);\\n      string memory image = Base64.encode(bytes(svg));\\n\\n      return\\n          string(\\n              abi.encodePacked(\\n                'data:application/json;base64,',\\n                Base64.encode(\\n                    bytes(\\n                          abi.encodePacked(\\n                              '{\\\"name\\\":\\\"',\\n                              name,\\n                              '\\\", \\\"description\\\":\\\"',\\n                              description,\\n                              '\\\", \\\"attributes\\\": [{\\\"trait_type\\\": \\\"Color\\\", \\\"value\\\": \\\"',\\n                              //SnakerMaker.toHSLString(snk.color),\\n                              '\\\"},{\\\"trait_type\\\": \\\"Background\\\", \\\"value\\\": \\\"',\\n                              backgroundNames[snk.bgIdx],\\n                              '\\\"},{\\\"trait_type\\\": \\\"Thickness\\\", \\\"value\\\": \\\"',\\n                              thicknessNames[snk.thickIdx],\\n                              '\\\"}], \\\"image\\\": \\\"',\\n                              'data:image/svg+xml;base64,',\\n                              image,\\n                              '\\\"}'\\n                          )\\n                        )\\n                    )\\n              )\\n          ); \\n  }\\n\\n  function _beforeTokenTransfer(\\n      address from,\\n      address to,\\n      uint256 tokenId\\n  ) internal override(ERC721, ERC721Enumerable) {\\n      super._beforeTokenTransfer(from, to, tokenId);\\n  }\\n\\n  function supportsInterface(bytes4 interfaceId)\\n    public\\n    view\\n    override(ERC721, ERC721Enumerable)\\n    returns (bool)\\n  {\\n    return super.supportsInterface(interfaceId);\\n  }\\n\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/token/ERC721/ERC721.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"./IERC721.sol\\\";\\nimport \\\"./IERC721Receiver.sol\\\";\\nimport \\\"./extensions/IERC721Metadata.sol\\\";\\nimport \\\"../../utils/Address.sol\\\";\\nimport \\\"../../utils/Context.sol\\\";\\nimport \\\"../../utils/Strings.sol\\\";\\nimport \\\"../../utils/introspection/ERC165.sol\\\";\\n\\n/**\\n * @dev Implementation of https://eips.ethereum.org/EIPS/eip-721[ERC721] Non-Fungible Token Standard, including\\n * the Metadata extension, but not including the Enumerable extension, which is available separately as\\n * {ERC721Enumerable}.\\n */\\ncontract ERC721 is Context, ERC165, IERC721, IERC721Metadata {\\n    using Address for address;\\n    using Strings for uint256;\\n\\n    // Token name\\n    string private _name;\\n\\n    // Token symbol\\n    string private _symbol;\\n\\n    // Mapping from token ID to owner address\\n    mapping(uint256 => address) private _owners;\\n\\n    // Mapping owner address to token count\\n    mapping(address => uint256) private _balances;\\n\\n    // Mapping from token ID to approved address\\n    mapping(uint256 => address) private _tokenApprovals;\\n\\n    // Mapping from owner to operator approvals\\n    mapping(address => mapping(address => bool)) private _operatorApprovals;\\n\\n    /**\\n     * @dev Initializes the contract by setting a `name` and a `symbol` to the token collection.\\n     */\\n    constructor(string memory name_, string memory symbol_) {\\n        _name = name_;\\n        _symbol = symbol_;\\n    }\\n\\n    /**\\n     * @dev See {IERC165-supportsInterface}.\\n     */\\n    function supportsInterface(bytes4 interfaceId) public view virtual override(ERC165, IERC165) returns (bool) {\\n        return\\n            interfaceId == type(IERC721).interfaceId ||\\n            interfaceId == type(IERC721Metadata).interfaceId ||\\n            super.supportsInterface(interfaceId);\\n    }\\n\\n    /**\\n     * @dev See {IERC721-balanceOf}.\\n     */\\n    function balanceOf(address owner) public view virtual override returns (uint256) {\\n        require(owner != address(0), \\\"ERC721: balance query for the zero address\\\");\\n        return _balances[owner];\\n    }\\n\\n    /**\\n     * @dev See {IERC721-ownerOf}.\\n     */\\n    function ownerOf(uint256 tokenId) public view virtual override returns (address) {\\n        address owner = _owners[tokenId];\\n        require(owner != address(0), \\\"ERC721: owner query for nonexistent token\\\");\\n        return owner;\\n    }\\n\\n    /**\\n     * @dev See {IERC721Metadata-name}.\\n     */\\n    function name() public view virtual override returns (string memory) {\\n        return _name;\\n    }\\n\\n    /**\\n     * @dev See {IERC721Metadata-symbol}.\\n     */\\n    function symbol() public view virtual override returns (string memory) {\\n        return _symbol;\\n    }\\n\\n    /**\\n     * @dev See {IERC721Metadata-tokenURI}.\\n     */\\n    function tokenURI(uint256 tokenId) public view virtual override returns (string memory) {\\n        require(_exists(tokenId), \\\"ERC721Metadata: URI query for nonexistent token\\\");\\n\\n        string memory baseURI = _baseURI();\\n        return bytes(baseURI).length > 0 ? string(abi.encodePacked(baseURI, tokenId.toString())) : \\\"\\\";\\n    }\\n\\n    /**\\n     * @dev Base URI for computing {tokenURI}. If set, the resulting URI for each\\n     * token will be the concatenation of the `baseURI` and the `tokenId`. Empty\\n     * by default, can be overriden in child contracts.\\n     */\\n    function _baseURI() internal view virtual returns (string memory) {\\n        return \\\"\\\";\\n    }\\n\\n    /**\\n     * @dev See {IERC721-approve}.\\n     */\\n    function approve(address to, uint256 tokenId) public virtual override {\\n        address owner = ERC721.ownerOf(tokenId);\\n        require(to != owner, \\\"ERC721: approval to current owner\\\");\\n\\n        require(\\n            _msgSender() == owner || isApprovedForAll(owner, _msgSender()),\\n            \\\"ERC721: approve caller is not owner nor approved for all\\\"\\n        );\\n\\n        _approve(to, tokenId);\\n    }\\n\\n    /**\\n     * @dev See {IERC721-getApproved}.\\n     */\\n    function getApproved(uint256 tokenId) public view virtual override returns (address) {\\n        require(_exists(tokenId), \\\"ERC721: approved query for nonexistent token\\\");\\n\\n        return _tokenApprovals[tokenId];\\n    }\\n\\n    /**\\n     * @dev See {IERC721-setApprovalForAll}.\\n     */\\n    function setApprovalForAll(address operator, bool approved) public virtual override {\\n        require(operator != _msgSender(), \\\"ERC721: approve to caller\\\");\\n\\n        _operatorApprovals[_msgSender()][operator] = approved;\\n        emit ApprovalForAll(_msgSender(), operator, approved);\\n    }\\n\\n    /**\\n     * @dev See {IERC721-isApprovedForAll}.\\n     */\\n    function isApprovedForAll(address owner, address operator) public view virtual override returns (bool) {\\n        return _operatorApprovals[owner][operator];\\n    }\\n\\n    /**\\n     * @dev See {IERC721-transferFrom}.\\n     */\\n    function transferFrom(\\n        address from,\\n        address to,\\n        uint256 tokenId\\n    ) public virtual override {\\n        //solhint-disable-next-line max-line-length\\n        require(_isApprovedOrOwner(_msgSender(), tokenId), \\\"ERC721: transfer caller is not owner nor approved\\\");\\n\\n        _transfer(from, to, tokenId);\\n    }\\n\\n    /**\\n     * @dev See {IERC721-safeTransferFrom}.\\n     */\\n    function safeTransferFrom(\\n        address from,\\n        address to,\\n        uint256 tokenId\\n    ) public virtual override {\\n        safeTransferFrom(from, to, tokenId, \\\"\\\");\\n    }\\n\\n    /**\\n     * @dev See {IERC721-safeTransferFrom}.\\n     */\\n    function safeTransferFrom(\\n        address from,\\n        address to,\\n        uint256 tokenId,\\n        bytes memory _data\\n    ) public virtual override {\\n        require(_isApprovedOrOwner(_msgSender(), tokenId), \\\"ERC721: transfer caller is not owner nor approved\\\");\\n        _safeTransfer(from, to, tokenId, _data);\\n    }\\n\\n    /**\\n     * @dev Safely transfers `tokenId` token from `from` to `to`, checking first that contract recipients\\n     * are aware of the ERC721 protocol to prevent tokens from being forever locked.\\n     *\\n     * `_data` is additional data, it has no specified format and it is sent in call to `to`.\\n     *\\n     * This internal function is equivalent to {safeTransferFrom}, and can be used to e.g.\\n     * implement alternative mechanisms to perform token transfer, such as signature-based.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` cannot be the zero address.\\n     * - `to` cannot be the zero address.\\n     * - `tokenId` token must exist and be owned by `from`.\\n     * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function _safeTransfer(\\n        address from,\\n        address to,\\n        uint256 tokenId,\\n        bytes memory _data\\n    ) internal virtual {\\n        _transfer(from, to, tokenId);\\n        require(_checkOnERC721Received(from, to, tokenId, _data), \\\"ERC721: transfer to non ERC721Receiver implementer\\\");\\n    }\\n\\n    /**\\n     * @dev Returns whether `tokenId` exists.\\n     *\\n     * Tokens can be managed by their owner or approved accounts via {approve} or {setApprovalForAll}.\\n     *\\n     * Tokens start existing when they are minted (`_mint`),\\n     * and stop existing when they are burned (`_burn`).\\n     */\\n    function _exists(uint256 tokenId) internal view virtual returns (bool) {\\n        return _owners[tokenId] != address(0);\\n    }\\n\\n    /**\\n     * @dev Returns whether `spender` is allowed to manage `tokenId`.\\n     *\\n     * Requirements:\\n     *\\n     * - `tokenId` must exist.\\n     */\\n    function _isApprovedOrOwner(address spender, uint256 tokenId) internal view virtual returns (bool) {\\n        require(_exists(tokenId), \\\"ERC721: operator query for nonexistent token\\\");\\n        address owner = ERC721.ownerOf(tokenId);\\n        return (spender == owner || getApproved(tokenId) == spender || isApprovedForAll(owner, spender));\\n    }\\n\\n    /**\\n     * @dev Safely mints `tokenId` and transfers it to `to`.\\n     *\\n     * Requirements:\\n     *\\n     * - `tokenId` must not exist.\\n     * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function _safeMint(address to, uint256 tokenId) internal virtual {\\n        _safeMint(to, tokenId, \\\"\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-ERC721-_safeMint-address-uint256-}[`_safeMint`], with an additional `data` parameter which is\\n     * forwarded in {IERC721Receiver-onERC721Received} to contract recipients.\\n     */\\n    function _safeMint(\\n        address to,\\n        uint256 tokenId,\\n        bytes memory _data\\n    ) internal virtual {\\n        _mint(to, tokenId);\\n        require(\\n            _checkOnERC721Received(address(0), to, tokenId, _data),\\n            \\\"ERC721: transfer to non ERC721Receiver implementer\\\"\\n        );\\n    }\\n\\n    /**\\n     * @dev Mints `tokenId` and transfers it to `to`.\\n     *\\n     * WARNING: Usage of this method is discouraged, use {_safeMint} whenever possible\\n     *\\n     * Requirements:\\n     *\\n     * - `tokenId` must not exist.\\n     * - `to` cannot be the zero address.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function _mint(address to, uint256 tokenId) internal virtual {\\n        require(to != address(0), \\\"ERC721: mint to the zero address\\\");\\n        require(!_exists(tokenId), \\\"ERC721: token already minted\\\");\\n\\n        _beforeTokenTransfer(address(0), to, tokenId);\\n\\n        _balances[to] += 1;\\n        _owners[tokenId] = to;\\n\\n        emit Transfer(address(0), to, tokenId);\\n    }\\n\\n    /**\\n     * @dev Destroys `tokenId`.\\n     * The approval is cleared when the token is burned.\\n     *\\n     * Requirements:\\n     *\\n     * - `tokenId` must exist.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function _burn(uint256 tokenId) internal virtual {\\n        address owner = ERC721.ownerOf(tokenId);\\n\\n        _beforeTokenTransfer(owner, address(0), tokenId);\\n\\n        // Clear approvals\\n        _approve(address(0), tokenId);\\n\\n        _balances[owner] -= 1;\\n        delete _owners[tokenId];\\n\\n        emit Transfer(owner, address(0), tokenId);\\n    }\\n\\n    /**\\n     * @dev Transfers `tokenId` from `from` to `to`.\\n     *  As opposed to {transferFrom}, this imposes no restrictions on msg.sender.\\n     *\\n     * Requirements:\\n     *\\n     * - `to` cannot be the zero address.\\n     * - `tokenId` token must be owned by `from`.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function _transfer(\\n        address from,\\n        address to,\\n        uint256 tokenId\\n    ) internal virtual {\\n        require(ERC721.ownerOf(tokenId) == from, \\\"ERC721: transfer of token that is not own\\\");\\n        require(to != address(0), \\\"ERC721: transfer to the zero address\\\");\\n\\n        _beforeTokenTransfer(from, to, tokenId);\\n\\n        // Clear approvals from the previous owner\\n        _approve(address(0), tokenId);\\n\\n        _balances[from] -= 1;\\n        _balances[to] += 1;\\n        _owners[tokenId] = to;\\n\\n        emit Transfer(from, to, tokenId);\\n    }\\n\\n    /**\\n     * @dev Approve `to` to operate on `tokenId`\\n     *\\n     * Emits a {Approval} event.\\n     */\\n    function _approve(address to, uint256 tokenId) internal virtual {\\n        _tokenApprovals[tokenId] = to;\\n        emit Approval(ERC721.ownerOf(tokenId), to, tokenId);\\n    }\\n\\n    /**\\n     * @dev Internal function to invoke {IERC721Receiver-onERC721Received} on a target address.\\n     * The call is not executed if the target address is not a contract.\\n     *\\n     * @param from address representing the previous owner of the given token ID\\n     * @param to target address that will receive the tokens\\n     * @param tokenId uint256 ID of the token to be transferred\\n     * @param _data bytes optional data to send along with the call\\n     * @return bool whether the call correctly returned the expected magic value\\n     */\\n    function _checkOnERC721Received(\\n        address from,\\n        address to,\\n        uint256 tokenId,\\n        bytes memory _data\\n    ) private returns (bool) {\\n        if (to.isContract()) {\\n            try IERC721Receiver(to).onERC721Received(_msgSender(), from, tokenId, _data) returns (bytes4 retval) {\\n                return retval == IERC721Receiver.onERC721Received.selector;\\n            } catch (bytes memory reason) {\\n                if (reason.length == 0) {\\n                    revert(\\\"ERC721: transfer to non ERC721Receiver implementer\\\");\\n                } else {\\n                    assembly {\\n                        revert(add(32, reason), mload(reason))\\n                    }\\n                }\\n            }\\n        } else {\\n            return true;\\n        }\\n    }\\n\\n    /**\\n     * @dev Hook that is called before any token transfer. This includes minting\\n     * and burning.\\n     *\\n     * Calling conditions:\\n     *\\n     * - When `from` and `to` are both non-zero, ``from``'s `tokenId` will be\\n     * transferred to `to`.\\n     * - When `from` is zero, `tokenId` will be minted for `to`.\\n     * - When `to` is zero, ``from``'s `tokenId` will be burned.\\n     * - `from` and `to` are never both zero.\\n     *\\n     * To learn more about hooks, head to xref:ROOT:extending-contracts.adoc#using-hooks[Using Hooks].\\n     */\\n    function _beforeTokenTransfer(\\n        address from,\\n        address to,\\n        uint256 tokenId\\n    ) internal virtual {}\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/token/ERC721/extensions/ERC721Enumerable.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../ERC721.sol\\\";\\nimport \\\"./IERC721Enumerable.sol\\\";\\n\\n/**\\n * @dev This implements an optional extension of {ERC721} defined in the EIP that adds\\n * enumerability of all the token ids in the contract as well as all token ids owned by each\\n * account.\\n */\\nabstract contract ERC721Enumerable is ERC721, IERC721Enumerable {\\n    // Mapping from owner to list of owned token IDs\\n    mapping(address => mapping(uint256 => uint256)) private _ownedTokens;\\n\\n    // Mapping from token ID to index of the owner tokens list\\n    mapping(uint256 => uint256) private _ownedTokensIndex;\\n\\n    // Array with all token ids, used for enumeration\\n    uint256[] private _allTokens;\\n\\n    // Mapping from token id to position in the allTokens array\\n    mapping(uint256 => uint256) private _allTokensIndex;\\n\\n    /**\\n     * @dev See {IERC165-supportsInterface}.\\n     */\\n    function supportsInterface(bytes4 interfaceId) public view virtual override(IERC165, ERC721) returns (bool) {\\n        return interfaceId == type(IERC721Enumerable).interfaceId || super.supportsInterface(interfaceId);\\n    }\\n\\n    /**\\n     * @dev See {IERC721Enumerable-tokenOfOwnerByIndex}.\\n     */\\n    function tokenOfOwnerByIndex(address owner, uint256 index) public view virtual override returns (uint256) {\\n        require(index < ERC721.balanceOf(owner), \\\"ERC721Enumerable: owner index out of bounds\\\");\\n        return _ownedTokens[owner][index];\\n    }\\n\\n    /**\\n     * @dev See {IERC721Enumerable-totalSupply}.\\n     */\\n    function totalSupply() public view virtual override returns (uint256) {\\n        return _allTokens.length;\\n    }\\n\\n    /**\\n     * @dev See {IERC721Enumerable-tokenByIndex}.\\n     */\\n    function tokenByIndex(uint256 index) public view virtual override returns (uint256) {\\n        require(index < ERC721Enumerable.totalSupply(), \\\"ERC721Enumerable: global index out of bounds\\\");\\n        return _allTokens[index];\\n    }\\n\\n    /**\\n     * @dev Hook that is called before any token transfer. This includes minting\\n     * and burning.\\n     *\\n     * Calling conditions:\\n     *\\n     * - When `from` and `to` are both non-zero, ``from``'s `tokenId` will be\\n     * transferred to `to`.\\n     * - When `from` is zero, `tokenId` will be minted for `to`.\\n     * - When `to` is zero, ``from``'s `tokenId` will be burned.\\n     * - `from` cannot be the zero address.\\n     * - `to` cannot be the zero address.\\n     *\\n     * To learn more about hooks, head to xref:ROOT:extending-contracts.adoc#using-hooks[Using Hooks].\\n     */\\n    function _beforeTokenTransfer(\\n        address from,\\n        address to,\\n        uint256 tokenId\\n    ) internal virtual override {\\n        super._beforeTokenTransfer(from, to, tokenId);\\n\\n        if (from == address(0)) {\\n            _addTokenToAllTokensEnumeration(tokenId);\\n        } else if (from != to) {\\n            _removeTokenFromOwnerEnumeration(from, tokenId);\\n        }\\n        if (to == address(0)) {\\n            _removeTokenFromAllTokensEnumeration(tokenId);\\n        } else if (to != from) {\\n            _addTokenToOwnerEnumeration(to, tokenId);\\n        }\\n    }\\n\\n    /**\\n     * @dev Private function to add a token to this extension's ownership-tracking data structures.\\n     * @param to address representing the new owner of the given token ID\\n     * @param tokenId uint256 ID of the token to be added to the tokens list of the given address\\n     */\\n    function _addTokenToOwnerEnumeration(address to, uint256 tokenId) private {\\n        uint256 length = ERC721.balanceOf(to);\\n        _ownedTokens[to][length] = tokenId;\\n        _ownedTokensIndex[tokenId] = length;\\n    }\\n\\n    /**\\n     * @dev Private function to add a token to this extension's token tracking data structures.\\n     * @param tokenId uint256 ID of the token to be added to the tokens list\\n     */\\n    function _addTokenToAllTokensEnumeration(uint256 tokenId) private {\\n        _allTokensIndex[tokenId] = _allTokens.length;\\n        _allTokens.push(tokenId);\\n    }\\n\\n    /**\\n     * @dev Private function to remove a token from this extension's ownership-tracking data structures. Note that\\n     * while the token is not assigned a new owner, the `_ownedTokensIndex` mapping is _not_ updated: this allows for\\n     * gas optimizations e.g. when performing a transfer operation (avoiding double writes).\\n     * This has O(1) time complexity, but alters the order of the _ownedTokens array.\\n     * @param from address representing the previous owner of the given token ID\\n     * @param tokenId uint256 ID of the token to be removed from the tokens list of the given address\\n     */\\n    function _removeTokenFromOwnerEnumeration(address from, uint256 tokenId) private {\\n        // To prevent a gap in from's tokens array, we store the last token in the index of the token to delete, and\\n        // then delete the last slot (swap and pop).\\n\\n        uint256 lastTokenIndex = ERC721.balanceOf(from) - 1;\\n        uint256 tokenIndex = _ownedTokensIndex[tokenId];\\n\\n        // When the token to delete is the last token, the swap operation is unnecessary\\n        if (tokenIndex != lastTokenIndex) {\\n            uint256 lastTokenId = _ownedTokens[from][lastTokenIndex];\\n\\n            _ownedTokens[from][tokenIndex] = lastTokenId; // Move the last token to the slot of the to-delete token\\n            _ownedTokensIndex[lastTokenId] = tokenIndex; // Update the moved token's index\\n        }\\n\\n        // This also deletes the contents at the last position of the array\\n        delete _ownedTokensIndex[tokenId];\\n        delete _ownedTokens[from][lastTokenIndex];\\n    }\\n\\n    /**\\n     * @dev Private function to remove a token from this extension's token tracking data structures.\\n     * This has O(1) time complexity, but alters the order of the _allTokens array.\\n     * @param tokenId uint256 ID of the token to be removed from the tokens list\\n     */\\n    function _removeTokenFromAllTokensEnumeration(uint256 tokenId) private {\\n        // To prevent a gap in the tokens array, we store the last token in the index of the token to delete, and\\n        // then delete the last slot (swap and pop).\\n\\n        uint256 lastTokenIndex = _allTokens.length - 1;\\n        uint256 tokenIndex = _allTokensIndex[tokenId];\\n\\n        // When the token to delete is the last token, the swap operation is unnecessary. However, since this occurs so\\n        // rarely (when the last minted token is burnt) that we still do the swap here to avoid the gas cost of adding\\n        // an 'if' statement (like in _removeTokenFromOwnerEnumeration)\\n        uint256 lastTokenId = _allTokens[lastTokenIndex];\\n\\n        _allTokens[tokenIndex] = lastTokenId; // Move the last token to the slot of the to-delete token\\n        _allTokensIndex[lastTokenId] = tokenIndex; // Update the moved token's index\\n\\n        // This also deletes the contents at the last position of the array\\n        delete _allTokensIndex[tokenId];\\n        _allTokens.pop();\\n    }\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/security/ReentrancyGuard.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Contract module that helps prevent reentrant calls to a function.\\n *\\n * Inheriting from `ReentrancyGuard` will make the {nonReentrant} modifier\\n * available, which can be applied to functions to make sure there are no nested\\n * (reentrant) calls to them.\\n *\\n * Note that because there is a single `nonReentrant` guard, functions marked as\\n * `nonReentrant` may not call one another. This can be worked around by making\\n * those functions `private`, and then adding `external` `nonReentrant` entry\\n * points to them.\\n *\\n * TIP: If you would like to learn more about reentrancy and alternative ways\\n * to protect against it, check out our blog post\\n * https://blog.openzeppelin.com/reentrancy-after-istanbul/[Reentrancy After Istanbul].\\n */\\nabstract contract ReentrancyGuard {\\n    // Booleans are more expensive than uint256 or any type that takes up a full\\n    // word because each write operation emits an extra SLOAD to first read the\\n    // slot's contents, replace the bits taken up by the boolean, and then write\\n    // back. This is the compiler's defense against contract upgrades and\\n    // pointer aliasing, and it cannot be disabled.\\n\\n    // The values being non-zero value makes deployment a bit more expensive,\\n    // but in exchange the refund on every call to nonReentrant will be lower in\\n    // amount. Since refunds are capped to a percentage of the total\\n    // transaction's gas, it is best to keep them low in cases like this one, to\\n    // increase the likelihood of the full refund coming into effect.\\n    uint256 private constant _NOT_ENTERED = 1;\\n    uint256 private constant _ENTERED = 2;\\n\\n    uint256 private _status;\\n\\n    constructor() {\\n        _status = _NOT_ENTERED;\\n    }\\n\\n    /**\\n     * @dev Prevents a contract from calling itself, directly or indirectly.\\n     * Calling a `nonReentrant` function from another `nonReentrant`\\n     * function is not supported. It is possible to prevent this from happening\\n     * by making the `nonReentrant` function external, and make it call a\\n     * `private` function that does the actual work.\\n     */\\n    modifier nonReentrant() {\\n        // On the first call to nonReentrant, _notEntered will be true\\n        require(_status != _ENTERED, \\\"ReentrancyGuard: reentrant call\\\");\\n\\n        // Any calls to nonReentrant after this point will fail\\n        _status = _ENTERED;\\n\\n        _;\\n\\n        // By storing the original value once again, a refund is triggered (see\\n        // https://eips.ethereum.org/EIPS/eip-2200)\\n        _status = _NOT_ENTERED;\\n    }\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/access/Ownable.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../utils/Context.sol\\\";\\n\\n/**\\n * @dev Contract module which provides a basic access control mechanism, where\\n * there is an account (an owner) that can be granted exclusive access to\\n * specific functions.\\n *\\n * By default, the owner account will be the one that deploys the contract. This\\n * can later be changed with {transferOwnership}.\\n *\\n * This module is used through inheritance. It will make available the modifier\\n * `onlyOwner`, which can be applied to your functions to restrict their use to\\n * the owner.\\n */\\nabstract contract Ownable is Context {\\n    address private _owner;\\n\\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\\n\\n    /**\\n     * @dev Initializes the contract setting the deployer as the initial owner.\\n     */\\n    constructor() {\\n        _setOwner(_msgSender());\\n    }\\n\\n    /**\\n     * @dev Returns the address of the current owner.\\n     */\\n    function owner() public view virtual returns (address) {\\n        return _owner;\\n    }\\n\\n    /**\\n     * @dev Throws if called by any account other than the owner.\\n     */\\n    modifier onlyOwner() {\\n        require(owner() == _msgSender(), \\\"Ownable: caller is not the owner\\\");\\n        _;\\n    }\\n\\n    /**\\n     * @dev Leaves the contract without owner. It will not be possible to call\\n     * `onlyOwner` functions anymore. Can only be called by the current owner.\\n     *\\n     * NOTE: Renouncing ownership will leave the contract without an owner,\\n     * thereby removing any functionality that is only available to the owner.\\n     */\\n    function renounceOwnership() public virtual onlyOwner {\\n        _setOwner(address(0));\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Can only be called by the current owner.\\n     */\\n    function transferOwnership(address newOwner) public virtual onlyOwner {\\n        require(newOwner != address(0), \\\"Ownable: new owner is the zero address\\\");\\n        _setOwner(newOwner);\\n    }\\n\\n    function _setOwner(address newOwner) private {\\n        address oldOwner = _owner;\\n        _owner = newOwner;\\n        emit OwnershipTransferred(oldOwner, newOwner);\\n    }\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/utils/Counters.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @title Counters\\n * @author Matt Condon (@shrugs)\\n * @dev Provides counters that can only be incremented, decremented or reset. This can be used e.g. to track the number\\n * of elements in a mapping, issuing ERC721 ids, or counting request ids.\\n *\\n * Include with `using Counters for Counters.Counter;`\\n */\\nlibrary Counters {\\n    struct Counter {\\n        // This variable should never be directly accessed by users of the library: interactions must be restricted to\\n        // the library's function. As of Solidity v0.5.2, this cannot be enforced, though there is a proposal to add\\n        // this feature: see https://github.com/ethereum/solidity/issues/4637\\n        uint256 _value; // default: 0\\n    }\\n\\n    function current(Counter storage counter) internal view returns (uint256) {\\n        return counter._value;\\n    }\\n\\n    function increment(Counter storage counter) internal {\\n        unchecked {\\n            counter._value += 1;\\n        }\\n    }\\n\\n    function decrement(Counter storage counter) internal {\\n        uint256 value = counter._value;\\n        require(value > 0, \\\"Counter: decrement overflow\\\");\\n        unchecked {\\n            counter._value = value - 1;\\n        }\\n    }\\n\\n    function reset(Counter storage counter) internal {\\n        counter._value = 0;\\n    }\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/utils/Strings.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev String operations.\\n */\\nlibrary Strings {\\n    bytes16 private constant _HEX_SYMBOLS = \\\"0123456789abcdef\\\";\\n\\n    /**\\n     * @dev Converts a `uint256` to its ASCII `string` decimal representation.\\n     */\\n    function toString(uint256 value) internal pure returns (string memory) {\\n        // Inspired by OraclizeAPI's implementation - MIT licence\\n        // https://github.com/oraclize/ethereum-api/blob/b42146b063c7d6ee1358846c198246239e9360e8/oraclizeAPI_0.4.25.sol\\n\\n        if (value == 0) {\\n            return \\\"0\\\";\\n        }\\n        uint256 temp = value;\\n        uint256 digits;\\n        while (temp != 0) {\\n            digits++;\\n            temp /= 10;\\n        }\\n        bytes memory buffer = new bytes(digits);\\n        while (value != 0) {\\n            digits -= 1;\\n            buffer[digits] = bytes1(uint8(48 + uint256(value % 10)));\\n            value /= 10;\\n        }\\n        return string(buffer);\\n    }\\n\\n    /**\\n     * @dev Converts a `uint256` to its ASCII `string` hexadecimal representation.\\n     */\\n    function toHexString(uint256 value) internal pure returns (string memory) {\\n        if (value == 0) {\\n            return \\\"0x00\\\";\\n        }\\n        uint256 temp = value;\\n        uint256 length = 0;\\n        while (temp != 0) {\\n            length++;\\n            temp >>= 8;\\n        }\\n        return toHexString(value, length);\\n    }\\n\\n    /**\\n     * @dev Converts a `uint256` to its ASCII `string` hexadecimal representation with fixed length.\\n     */\\n    function toHexString(uint256 value, uint256 length) internal pure returns (string memory) {\\n        bytes memory buffer = new bytes(2 * length + 2);\\n        buffer[0] = \\\"0\\\";\\n        buffer[1] = \\\"x\\\";\\n        for (uint256 i = 2 * length + 1; i > 1; --i) {\\n            buffer[i] = _HEX_SYMBOLS[value & 0xf];\\n            value >>= 4;\\n        }\\n        require(value == 0, \\\"Strings: hex length insufficient\\\");\\n        return string(buffer);\\n    }\\n}\\n\"\r\n    },\r\n    \"base64-sol/base64.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity >=0.6.0;\\n\\n/// @title Base64\\n/// @author Brecht Devos - <brecht@loopring.org>\\n/// @notice Provides functions for encoding/decoding base64\\nlibrary Base64 {\\n    string internal constant TABLE_ENCODE = 'ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/';\\n    bytes  internal constant TABLE_DECODE = hex\\\"0000000000000000000000000000000000000000000000000000000000000000\\\"\\n                                            hex\\\"00000000000000000000003e0000003f3435363738393a3b3c3d000000000000\\\"\\n                                            hex\\\"00000102030405060708090a0b0c0d0e0f101112131415161718190000000000\\\"\\n                                            hex\\\"001a1b1c1d1e1f202122232425262728292a2b2c2d2e2f303132330000000000\\\";\\n\\n    function encode(bytes memory data) internal pure returns (string memory) {\\n        if (data.length == 0) return '';\\n\\n        // load the table into memory\\n        string memory table = TABLE_ENCODE;\\n\\n        // multiply by 4/3 rounded up\\n        uint256 encodedLen = 4 * ((data.length + 2) / 3);\\n\\n        // add some extra buffer at the end required for the writing\\n        string memory result = new string(encodedLen + 32);\\n\\n        assembly {\\n            // set the actual output length\\n            mstore(result, encodedLen)\\n\\n            // prepare the lookup table\\n            let tablePtr := add(table, 1)\\n\\n            // input ptr\\n            let dataPtr := data\\n            let endPtr := add(dataPtr, mload(data))\\n\\n            // result ptr, jump over length\\n            let resultPtr := add(result, 32)\\n\\n            // run over the input, 3 bytes at a time\\n            for {} lt(dataPtr, endPtr) {}\\n            {\\n                // read 3 bytes\\n                dataPtr := add(dataPtr, 3)\\n                let input := mload(dataPtr)\\n\\n                // write 4 characters\\n                mstore8(resultPtr, mload(add(tablePtr, and(shr(18, input), 0x3F))))\\n                resultPtr := add(resultPtr, 1)\\n                mstore8(resultPtr, mload(add(tablePtr, and(shr(12, input), 0x3F))))\\n                resultPtr := add(resultPtr, 1)\\n                mstore8(resultPtr, mload(add(tablePtr, and(shr( 6, input), 0x3F))))\\n                resultPtr := add(resultPtr, 1)\\n                mstore8(resultPtr, mload(add(tablePtr, and(        input,  0x3F))))\\n                resultPtr := add(resultPtr, 1)\\n            }\\n\\n            // padding with '='\\n            switch mod(mload(data), 3)\\n            case 1 { mstore(sub(resultPtr, 2), shl(240, 0x3d3d)) }\\n            case 2 { mstore(sub(resultPtr, 1), shl(248, 0x3d)) }\\n        }\\n\\n        return result;\\n    }\\n\\n    function decode(string memory _data) internal pure returns (bytes memory) {\\n        bytes memory data = bytes(_data);\\n\\n        if (data.length == 0) return new bytes(0);\\n        require(data.length % 4 == 0, \\\"invalid base64 decoder input\\\");\\n\\n        // load the table into memory\\n        bytes memory table = TABLE_DECODE;\\n\\n        // every 4 characters represent 3 bytes\\n        uint256 decodedLen = (data.length / 4) * 3;\\n\\n        // add some extra buffer at the end required for the writing\\n        bytes memory result = new bytes(decodedLen + 32);\\n\\n        assembly {\\n            // padding with '='\\n            let lastBytes := mload(add(data, mload(data)))\\n            if eq(and(lastBytes, 0xFF), 0x3d) {\\n                decodedLen := sub(decodedLen, 1)\\n                if eq(and(lastBytes, 0xFFFF), 0x3d3d) {\\n                    decodedLen := sub(decodedLen, 1)\\n                }\\n            }\\n\\n            // set the actual output length\\n            mstore(result, decodedLen)\\n\\n            // prepare the lookup table\\n            let tablePtr := add(table, 1)\\n\\n            // input ptr\\n            let dataPtr := data\\n            let endPtr := add(dataPtr, mload(data))\\n\\n            // result ptr, jump over length\\n            let resultPtr := add(result, 32)\\n\\n            // run over the input, 4 characters at a time\\n            for {} lt(dataPtr, endPtr) {}\\n            {\\n               // read 4 characters\\n               dataPtr := add(dataPtr, 4)\\n               let input := mload(dataPtr)\\n\\n               // write 3 bytes\\n               let output := add(\\n                   add(\\n                       shl(18, and(mload(add(tablePtr, and(shr(24, input), 0xFF))), 0xFF)),\\n                       shl(12, and(mload(add(tablePtr, and(shr(16, input), 0xFF))), 0xFF))),\\n                   add(\\n                       shl( 6, and(mload(add(tablePtr, and(shr( 8, input), 0xFF))), 0xFF)),\\n                               and(mload(add(tablePtr, and(        input , 0xFF))), 0xFF)\\n                    )\\n                )\\n                mstore(resultPtr, shl(232, output))\\n                resultPtr := add(resultPtr, 3)\\n            }\\n        }\\n\\n        return result;\\n    }\\n}\\n\"\r\n    },\r\n    \"contracts/SnakerMaker.sol\": {\r\n      \"content\": \"pragma solidity >=0.8.0 <0.9.0;\\n//SPDX-License-Identifier: MIT\\n\\nimport \\\"@openzeppelin/contracts/utils/Strings.sol\\\";\\nimport 'base64-sol/base64.sol';\\n\\n//import \\\"hardhat/console.sol\\\";\\n\\n//learn more: https://docs.openzeppelin.com/contracts/3.x/erc721\\n\\n// GET LISTED ON OPENSEA: https://testnets.opensea.io/get-listed/step-two\\n\\nlibrary SnakerMaker {\\n\\nusing Strings for uint256;\\n\\n  struct Snake {\\n    Color color;\\n    Color bg_color;\\n    Color bg_color_2;\\n    uint256[2] bg_x;\\n    uint256[2] bg_y;\\n    string path1;\\n    string path2;\\n    uint256 bgIdx;\\n    uint256 thickIdx;\\n    uint256 thickness;\\n    uint256 head;\\n    uint256 head_mark;\\n    Color head_mark_color;\\n    uint256 snakiness_s;\\n    uint256 snakiness_d;\\n    uint256 skin_pattern_scale;\\n    string skin_pattern_freq;\\n    uint256 skin_pattern_octaves;\\n  }\\n\\n  struct Color {\\n      uint256 hue;\\n      uint256 saturation;\\n      uint256 lightness;\\n  }\\n\\n  struct Rands {\\n    uint256[4] x;\\n    uint256[4] y;\\n  }\\n\\n  // Visibility is `public` to enable it being called by other contracts for composition.\\n  function generateSVGofTokenById(uint256 id) internal pure returns (Snake memory, string memory) {\\n    string memory seed = Strings.toString(id * 4209);\\n    Snake memory snk;\\n    Rands memory randVal;\\n\\n    // Snake color\\n    snk.color = randomColor(seed, 0, 359, 40, 100, 20, 60);\\n    //console.log(\\\"rand color %s\\\", toHSLString(snk.color));\\n\\n    // Head mark color\\n    snk.head_mark_color = randomColor(string(abi.encodePacked(seed, \\\"HEADCOLOR\\\")), 0, 359, 40, 100, 20, 60);\\n\\n    // Background\\n    randVal.x[0] = random(seed, \\\"backzies\\\") % 100;\\n    //console.log(\\\"rand bg %s\\\", randVal.x[0]);\\n    if (randVal.x[0] < 30) {\\n      //water\\n      snk.bgIdx = 0;\\n      snk.bg_color = randomColor(string(abi.encodePacked(seed, \\\"bgcolor\\\")), 160, 230, 70, 100, 25, 65); \\n      snk.bg_color_2.hue = snk.bg_color.hue + 8;\\n      snk.bg_color_2.lightness = snk.bg_color.lightness - 25;\\n      snk.bg_color_2.saturation = snk.bg_color.saturation;\\n    } else if (randVal.x[0] < 60) {\\n      //desert\\n      snk.bgIdx = 1;\\n      snk.bg_x[0] = random(seed, \\\"bgx0\\\") % 250;\\n      snk.bg_y[0] = random(seed, \\\"bgy0\\\") % 250;\\n      snk.bg_x[1] = (random(seed, \\\"bgx1\\\") % 250) + 250;\\n      snk.bg_y[1] = (random(seed, \\\"bgy1\\\") % 250) + 250;\\n    } else {\\n      // space\\n      snk.bg_color = randomColor(string(abi.encodePacked(seed, \\\"bgcolorspace\\\")), 0, 359, 80, 100, 25, 60); \\n      snk.bg_x[0] = (random(seed, \\\"bgx0\\\") % 2) + 1;\\n      snk.bg_y[0] = (random(seed, \\\"bgy0\\\") % 60) + 15;\\n      snk.bgIdx = 2;\\n    }    \\n\\n    // Snake thickness    \\n    {\\n    snk.thickIdx = random(seed, \\\"thicc\\\") % 5;\\n    //console.log(\\\"rand thick %s\\\", snk.thickIdx);    \\n\\n    if (snk.thickIdx < 1) {\\n      snk.thickness = 12;\\n      snk.head = 24;\\n      snk.head_mark = 10;\\n    } else if (snk.thickIdx < 2) {\\n      snk.thickness = 21;\\n      snk.head = 30;\\n      snk.head_mark = 12;\\n    } else if (snk.thickIdx < 3) {\\n      snk.thickness =30;\\n      snk.head = 39;\\n      snk.head_mark = 14;\\n    } else if (snk.thickIdx < 4) {\\n      snk.thickness = 39;\\n      snk.head = 42;\\n      snk.head_mark = 16;\\n    } else {\\n      snk.thickness = 48;\\n      snk.head = 48;\\n      snk.head_mark = 18;\\n    } \\n    }\\n\\n    // Snakiness\\n    snk.snakiness_s = (random(seed, \\\"snakinessS\\\") % 15) + 2;\\n    //console.log(\\\"rand snak %s\\\", snk.snakiness_s);\\n    snk.snakiness_d = (random(seed, \\\"snakiness__D\\\") % 30) + 20;\\n    if (snk.snakiness_d < 25) {\\n      snk.snakiness_d = 0;\\n    }\\n    //console.log(\\\"rand snakd %s\\\", snk.snakiness_d);\\n\\n    // Snake pattern\\n    snk.skin_pattern_scale = (random(seed, \\\"patternscale\\\") % 350) + 50;\\n    //console.log(\\\"rand scale %s\\\", snk.skin_pattern_scale);\\n\\n    randVal.x[0] = random(seed, \\\"patternfreq\\\") % 6;    \\n    string[6] memory freq = [\\\"0.02\\\", \\\"0.04\\\", \\\"0.06\\\", \\\"0.08\\\", \\\"0.1\\\", \\\"0.15\\\"];\\n    snk.skin_pattern_freq = freq[randVal.x[0]];      \\n    //console.log(\\\"rand freq %s\\\", snk.skin_pattern_freq);\\n\\n    snk.skin_pattern_octaves = (random(seed, \\\"patternoctaves\\\") % 3) + 2;   \\n    //console.log(\\\"rand octaves %s\\\", snk.skin_pattern_octaves);\\n\\n    // Snake path\\n    randVal.x[0] = 250;\\n    randVal.y[0] = randomMaxMin(seed, \\\"ypos0\\\", 300, 470);\\n    randVal.x[1] = randomMaxMin(seed, \\\"xpos1\\\", 300, 470);\\n    randVal.y[1] = 250;\\n    randVal.x[2] = 250;\\n    randVal.y[2] = randomMaxMin(seed, \\\"ypos2\\\", 30, 200);\\n    randVal.x[3] = randomMaxMin(seed, \\\"xpos3\\\", 30, 200);\\n    randVal.y[3] = 250;\\n\\n    snk.path1 = string(\\n                abi.encodePacked(\\n                  'M250 ',\\n                  Strings.toString(randVal.y[0]),\\n                  'S',\\n                  Strings.toString(randVal.x[1]),\\n                  ',',\\n                  Strings.toString(randVal.y[0]),\\n                  ' ',\\n                  Strings.toString(randVal.x[1]),\\n                  ',250S',\\n                  Strings.toString(randVal.x[1]),\\n                  ',',\\n                  Strings.toString(randVal.y[2]),\\n                  ' 250,',\\n                  Strings.toString(randVal.y[2])\\n                ));\\n\\n    snk.path2 = string(\\n                abi.encodePacked(\\n                  'M250 ',\\n                  Strings.toString(randVal.y[2]),\\n                  'C',\\n                  Strings.toString(500 - randVal.x[1] ),\\n                  ',',\\n                  Strings.toString(randVal.y[2]),\\n                  ' ',\\n                  Strings.toString(randVal.x[3])\\n                  ));\\n\\n    snk.path2 = string(\\n                abi.encodePacked(\\n                  snk.path2,              \\n                  ',',\\n                  Strings.toString(randVal.y[2]),\\n                  ' ',\\n                  Strings.toString(randVal.x[3]),\\n                  ',250S',\\n                  Strings.toString(randVal.x[3]),\\n                  ',',\\n                  Strings.toString(randVal.y[0]),\\n                  ' 250,',\\n                  Strings.toString(randVal.y[0])\\n                ));\\n\\n    //console.log(\\\"path1 %s\\\", snk.path1);\\n    //console.log(\\\"path2 %s\\\", snk.path2);\\n\\n    // backgrounds\\n    string memory bg;\\n    if (snk.bgIdx < 1) {\\n      bg = string(\\n                abi.encodePacked(\\n                  '<path fill=\\\"',\\n                  toHSLString(snk.bg_color),\\n                  '\\\" d=\\\"M0 0h500v500H0z\\\"/><pattern id=\\\"y\\\" width=\\\"40\\\" height=\\\"40\\\" patternUnits=\\\"userSpaceOnUse\\\"><circle cx=\\\"20\\\" cy=\\\"20\\\" r=\\\"10\\\" fill=\\\"',\\n                  toHSLString(snk.bg_color_2),\\n                  '\\\" opacity=\\\".2\\\"/></pattern><filter id=\\\"m\\\"><feTurbulence type=\\\"fractalNoise\\\" baseFrequency=\\\".03\\\" numOctaves=\\\"2\\\" seed=\\\"5515\\\"/><feDisplacementMap in=\\\"SourceGraphic\\\" scale=\\\"100\\\"/></filter><g filter=\\\"url(#m)\\\"><rect x=\\\"-50%\\\" y=\\\"-50%\\\" width=\\\"200%\\\" height=\\\"200%\\\" fill=\\\"url(#y)\\\"><animateTransform attributeName=\\\"transform\\\" type=\\\"translate\\\" dur=\\\"5s\\\" values=\\\"0,0; 40,40;\\\" repeatCount=\\\"indefinite\\\"/></rect></g>'\\n                )\\n            );\\n    } else if (snk.bgIdx < 2) {\\n      bg = string(\\n                abi.encodePacked(\\n                  '<defs><linearGradient id=\\\"z\\\" gradientTransform=\\\"rotate(90)\\\"><stop offset=\\\"5%\\\" stop-color=\\\"#e89f00\\\"/><stop offset=\\\"95%\\\" stop-color=\\\"#e8ba00\\\"/></linearGradient></defs><path fill=\\\"#e8ba00\\\" style=\\\"filter:url(#x)\\\" d=\\\"M0 0h500v500H0z\\\"/><circle cx=\\\"',\\n                  Strings.toString(snk.bg_x[0]),\\n                  '\\\" cy=\\\"',\\n                  Strings.toString(snk.bg_y[0]),\\n                  '\\\" r=\\\"100\\\" fill=\\\"url(#z)\\\" filter=\\\"url(#m)\\\"/><circle cx=\\\"',\\n                  Strings.toString(snk.bg_x[1]),\\n                  '\\\" cy=\\\"',\\n                  Strings.toString(snk.bg_y[1]),\\n                  '\\\" r=\\\"100\\\" fill=\\\"url(#z)\\\" filter=\\\"url(#m)\\\"/><defs><filter id=\\\"x\\\"><feSpecularLighting result=\\\"specOut\\\" specularExponent=\\\"12\\\" lighting-color=\\\"#bbb\\\"><fePointLight x=\\\"250\\\" y=\\\"-100\\\" z=\\\"20\\\"><animate attributeName=\\\"x\\\" values=\\\"250;375;600\\\" dur=\\\"30s\\\" repeatCount=\\\"indefinite\\\"/><animate attributeName=\\\"y\\\" values=\\\"-100;75;250\\\" dur=\\\"30s\\\" repeatCount=\\\"indefinite\\\"/></fePointLight></feSpecularLighting><feComposite in=\\\"SourceGraphic\\\" in2=\\\"specOut\\\" operator=\\\"arithmetic\\\" k1=\\\".1\\\" k2=\\\"1\\\" k3=\\\"2\\\"/></filter><filter id=\\\"m\\\" filterUnits=\\\"userSpaceOnUse\\\"><feTurbulence baseFrequency=\\\".011\\\" type=\\\"fractalNoise\\\"/><feDisplacementMap in=\\\"SourceGraphic\\\" scale=\\\"100\\\"><animate attributeName=\\\"scale\\\" begin=\\\"0s\\\" dur=\\\"3s\\\" values=\\\"3000;3400;2700;3200;2800;3000\\\" repeatCount=\\\"indefinite\\\"/></feDisplacementMap></filter></defs>'\\n                )\\n            );\\n                } else {\\n      bg = string(\\n                abi.encodePacked(\\n                  '<defs><linearGradient id=\\\"z\\\" gradientTransform=\\\"rotate(90)\\\"><stop offset=\\\"5%\\\"/><stop offset=\\\"95%\\\" stop-color=\\\"',\\n                  toHSLString(snk.bg_color),\\n                  '\\\"/></linearGradient></defs><path fill=\\\"#e3eee\\\" d=\\\"M0 0h500v500H0z\\\"/><pattern id=\\\"x\\\" width=\\\"40\\\" height=\\\"40\\\" patternUnits=\\\"userSpaceOnUse\\\"><circle cx=\\\"10\\\" cy=\\\"10\\\" r=\\\"',\\n                  Strings.toString(snk.bg_x[0]),\\n                  '\\\" fill=\\\"transparent\\\" stroke=\\\"#fcfbe6\\\" opacity=\\\".6\\\"/></pattern><g filter=\\\"url(#m)\\\"><rect x=\\\"-50%\\\" y=\\\"-50%\\\" width=\\\"200%\\\" height=\\\"200%\\\" fill=\\\"url(#x)\\\"><animateTransform attributeName=\\\"transform\\\" type=\\\"translate\\\" dur=\\\"',\\n                  Strings.toString(snk.bg_y[0]),\\n                  's\\\" values=\\\"0,0; 0,50; 0,0\\\" repeatCount=\\\"indefinite\\\"/></rect></g><filter id=\\\"n\\\" x=\\\"-50%\\\" y=\\\"-50%\\\" width=\\\"200%\\\" height=\\\"200%\\\"><feTurbulence baseFrequency=\\\".08\\\" numOctaves=\\\"10\\\" result=\\\"lol\\\"/><feDisplacementMap in2=\\\"turbulence\\\" in=\\\"SourceGraphic\\\" scale=\\\"20\\\" xChannelSelector=\\\"R\\\" yChannelSelector=\\\"G\\\"/><feComposite operator=\\\"in\\\" in2=\\\"SourceGraphic\\\"/></filter><filter id=\\\"m\\\"><feTurbulence type=\\\"fractalNoise\\\" baseFrequency=\\\".1\\\" seed=\\\"39996\\\"/><feDisplacementMap in=\\\"SourceGraphic\\\" xChannelSelector=\\\"B\\\" scale=\\\"200\\\"/></filter>'\\n                )\\n            );                 \\n    }\\n\\n    string memory planet = '<circle cx=\\\"400\\\" cy=\\\"100\\\" r=\\\"50\\\" fill=\\\"url(#z)\\\"/><circle cx=\\\"400\\\" cy=\\\"100\\\" r=\\\"50\\\" fill=\\\"url(#z)\\\" filter=\\\"url(#n)\\\"/>';\\n\\n    // Snake\\n    string[5] memory snakeParts;\\n    snakeParts[0] = string(\\n                    abi.encodePacked(\\n                    '<defs><path stroke-dasharray=\\\"1000\\\" pathLength=\\\"1000\\\" fill=\\\"none\\\" stroke-linejoin=\\\"round\\\" stroke-dashoffset=\\\"1000\\\" stroke-linecap=\\\"round\\\" stroke-width=\\\"',\\n                    Strings.toString(snk.thickness),\\n                    '\\\" id=\\\"a\\\" d=\\\"',\\n                    snk.path1,\\n                    '\\\"/><path stroke-dasharray=\\\"1000\\\" pathLength=\\\"1000\\\" fill=\\\"none\\\" stroke-linejoin=\\\"round\\\" stroke-dashoffset=\\\"0\\\" stroke-linecap=\\\"round\\\" stroke-width=\\\"',\\n                    Strings.toString(snk.thickness),\\n                    '\\\" id=\\\"c\\\" d=\\\"',\\n                    snk.path2,\\n                    '\\\"/><circle cx=\\\"0\\\" cy=\\\"0\\\" r=\\\"',\\n                    Strings.toString(snk.head),\\n                    '\\\" id=\\\"f\\\"/></defs><use xlink:href=\\\"#a\\\" filter=\\\"url(#b) url(#S)\\\" stroke=\\\"'\\n                    ));\\n\\n    snakeParts[1] = string(\\n                    abi.encodePacked(                \\n                    snk.bgIdx == 2 ? \\\"#FFF\\\" : \\\"#000\\\",\\n                    '\\\" opacity=\\\"',\\n                    snk.bgIdx == 2 ? \\\".3\\\" : \\\".7\\\",\\n                    '\\\" transform=\\\"translate(6 6)\\\"/><use xlink:href=\\\"#c\\\" filter=\\\"url(#b) url(#S)\\\" stroke=\\\"',\\n                    snk.bgIdx == 2 ? \\\"#FFF\\\" : \\\"#000\\\",\\n                    '\\\" opacity=\\\"',\\n                    snk.bgIdx == 2 ? \\\".3\\\" : \\\".7\\\",\\n                    '\\\" transform=\\\"translate(6 6)\\\"/><use xlink:href=\\\"#a\\\" filter=\\\"url(#b)\\\" stroke=\\\"'\\n                    ));\\n\\n    snakeParts[2] =               \\n                    string(\\n                    abi.encodePacked(\\n                    toHSLString(snk.color),\\n                    '\\\"/><use xlink:href=\\\"#c\\\" filter=\\\"url(#b)\\\" stroke=\\\"',\\n                    toHSLString(snk.color),\\n                    '\\\"/><use xlink:href=\\\"#a\\\" filter=\\\"url(#d) url(#b)\\\" stroke=\\\"',\\n                    toHSLString(snk.color),\\n                    '\\\"/><use xlink:href=\\\"#c\\\" filter=\\\"url(#d) url(#b)\\\" stroke=\\\"',\\n                    toHSLString(snk.color),\\n                    '\\\"/><g transform=\\\"translate(-250 -48)\\\" id=\\\"h\\\" filter=\\\"url(#b)\\\"><g id=\\\"j\\\" opacity=\\\"0\\\" transform=\\\"translate(170 20)\\\" filter=\\\"url(#e)\\\"><line id=\\\"line1\\\" x1=\\\"30\\\" y1=\\\"30\\\" x2=\\\"70\\\" y2=\\\"30\\\" stroke=\\\"red\\\" stroke-width=\\\"3\\\" /><line id=\\\"line1\\\" x1=\\\"30\\\" y1=\\\"30\\\" x2=\\\"10\\\" y2=\\\"10\\\" stroke=\\\"red\\\" stroke-width=\\\"3\\\" /><line id=\\\"line1\\\" x1=\\\"30\\\" y1=\\\"30\\\" x2=\\\"10\\\" y2=\\\"50\\\" stroke=\\\"red\\\" stroke-width=\\\"3\\\" /></g><use x=\\\"250\\\" y=\\\"48\\\" xlink:href=\\\"#f\\\" filter=\\\"url(#b)\\\" fill=\\\"',\\n                    toHSLString(snk.color),\\n                    '\\\"/><use x=\\\"250\\\" y=\\\"48\\\" xlink:href=\\\"#f\\\" filter=\\\"url(#d) url(#b)\\\" fill=\\\"',\\n                    toHSLString(snk.color)\\n                    ));\\n    snakeParts[3] = \\n                    string(\\n                    abi.encodePacked(               \\n                    '\\\"/><path transform=\\\"rotate(45 89.216 337.812)\\\" fill=\\\"',\\n                    toHSLString(snk.head_mark_color),\\n                    '\\\" d=\\\"M0 0h',\\n                    Strings.toString(snk.head_mark),\\n                    'v',\\n                    Strings.toString(snk.head_mark),\\n                    'H0z\\\"/></g>',\\n                    snk.bgIdx == 2 ? planet : \\\"\\\",\\n                    '<animate attributeName=\\\"stroke-dashoffset\\\" fill=\\\"freeze\\\" begin=\\\"0s;g.end+1s\\\" from=\\\"0\\\" dur=\\\"3s\\\" xlink:href=\\\"#c\\\" to=\\\"1000\\\"/><animate attributeName=\\\"stroke-dashoffset\\\" fill=\\\"freeze\\\" begin=\\\"0s;g.end+1s\\\" from=\\\"1000\\\" id=\\\"i\\\" dur=\\\"3s\\\" xlink:href=\\\"#a\\\" to=\\\"2000\\\"/><animateMotion fill=\\\"freeze\\\" begin=\\\"0s;g.end+1s\\\" keyTimes=\\\"0 ; 1\\\" dur=\\\"3s\\\" xlink:href=\\\"#h\\\" keyPoints=\\\"1 ; 0\\\" rotate=\\\"auto\\\" calcMode=\\\"linear\\\"><mpath xlink:href=\\\"#a\\\"/></animateMotion><animate attributeName=\\\"stroke-dashoffset\\\" fill=\\\"freeze\\\" begin=\\\"i.end\\\" from=\\\"0\\\" dur=\\\"3s\\\" xlink:href=\\\"#a\\\" to=\\\"1000\\\"/><animate attributeName=\\\"stroke-dashoffset\\\" fill=\\\"freeze\\\" begin=\\\"i.end\\\" from=\\\"1000\\\" id=\\\"g\\\" dur=\\\"3s\\\" xlink:href=\\\"#c\\\" to=\\\"2000\\\"/><animateMotion fill=\\\"freeze\\\" begin=\\\"i.end\\\" keyTimes=\\\"0 ; 1\\\" dur=\\\"3s\\\" xlink:href=\\\"#h\\\" keyPoints=\\\"1 ; 0\\\" rotate=\\\"auto\\\" calcMode=\\\"linear\\\"><mpath xlink:href=\\\"#c\\\"/></animateMotion><animate attributeName=\\\"opacity\\\" fill=\\\"freeze\\\" begin=\\\"g.end\\\" from=\\\"0\\\" dur=\\\"0.1s\\\" xlink:href=\\\"#j\\\" to=\\\"1\\\"/><animate attributeName=\\\"opacity\\\" fill=\\\"freeze\\\" begin=\\\"g.end+1s\\\" from=\\\"1\\\" dur=\\\"0.1s\\\" xlink:href=\\\"#j\\\" to=\\\"0\\\"/><defs><filter id=\\\"b\\\" filterUnits=\\\"userSpaceOnUse\\\"><feTurbulence baseFrequency=\\\".35\\\" type=\\\"fractalNoise\\\"><animate attributeName=\\\"baseFrequency\\\" begin=\\\"0s\\\" dur=\\\"',\\n                    Strings.toString(snk.snakiness_s)\\n                    ));\\n\\n    snakeParts[4] = \\n                    string(\\n                    abi.encodePacked(   \\n                    's\\\" values=\\\"0.0052;0.00753;0.0041;0.00924;0.0070;0.0052\\\" repeatCount=\\\"indefinite\\\"/></feTurbulence><feDisplacementMap in=\\\"SourceGraphic\\\" scale=\\\"',\\n                    Strings.toString(snk.snakiness_d),\\n                    '\\\"/></filter><filter id=\\\"e\\\" width=\\\"200%\\\" height=\\\"200%\\\"><feTurbulence baseFrequency=\\\".35\\\" type=\\\"fractalNoise\\\"><animate attributeName=\\\"baseFrequency\\\" begin=\\\"0s\\\" dur=\\\"0.1s\\\" values=\\\"0.0052;0.00753;0.0041;0.00924;0.0070;0.004\\\" repeatCount=\\\"indefinite\\\"/></feTurbulence><feDisplacementMap in=\\\"SourceGraphic\\\" scale=\\\"60\\\"/></filter><filter id=\\\"d\\\" filterUnits=\\\"userSpaceOnUse\\\"><feTurbulence baseFrequency=\\\"',\\n                    snk.skin_pattern_freq,\\n                    '\\\" type=\\\"fractalNoise\\\" numOctaves=\\\"',\\n                    Strings.toString(snk.skin_pattern_octaves),\\n                    '\\\"/><feDisplacementMap in=\\\"SourceGraphic\\\" scale=\\\"',\\n                    Strings.toString(snk.skin_pattern_scale),\\n                    '\\\"/><feComposite operator=\\\"in\\\" in2=\\\"SourceGraphic\\\"/></filter><filter id=\\\"S\\\" width=\\\"200%\\\" height=\\\"200%\\\"><feGaussianBlur in=\\\"SourceGraphic\\\" stdDeviation=\\\"4\\\"/></filter></defs>'\\n                    ));\\n\\n    string memory render = string(abi.encodePacked(\\n      '<svg xmlns=\\\"http://www.w3.org/2000/svg\\\" version=\\\"1.2\\\" xmlns:xlink=\\\"http://www.w3.org/1999/xlink\\\" width=\\\"500\\\" height=\\\"500\\\" viewBox=\\\"0 0 500 500\\\">',\\n        bg,\\n        snakeParts[0],\\n        snakeParts[1],\\n        snakeParts[2],\\n        snakeParts[3],\\n        snakeParts[4],\\n        '</svg>'\\n      ));\\n\\n    return (snk, render);\\n  }\\n\\nfunction toHSLString(Color memory color) public pure returns (string memory) {\\n    return\\n      string(\\n        abi.encodePacked(\\n          \\\"hsl(\\\",\\n          color.hue.toString(),\\n          \\\",\\\",\\n          color.saturation.toString(),\\n          \\\"%,\\\",\\n          color.lightness.toString(),\\n          \\\"%)\\\"\\n        )\\n      );\\n  }\\n\\nfunction randomColor(\\n      string memory seed,\\n      uint256 hMin,\\n      uint256 hMax,\\n      uint256 sMin,\\n      uint256 sMax,\\n      uint256 lMin,\\n      uint256 lMax\\n  ) internal pure returns (Color memory) {\\n      return\\n          Color(\\n              randomMaxMin(seed, \\\"hue\\\", hMin, hMax),\\n              randomMaxMin(seed, \\\"saturation\\\", sMin, sMax),\\n              randomMaxMin(seed, \\\"lightness\\\", lMin, lMax)\\n          );\\n  }\\n\\n  function randomMaxMin(\\n      string memory seed,\\n      string memory key,\\n      uint256 min,\\n      uint256 max\\n  ) internal pure returns (uint256) {\\n      return\\n          (uint256(keccak256(abi.encodePacked(\\\"mainnet\\\", seed, key))) % (max - min)) +\\n          min;\\n  }\\n\\n  function random(string memory seed, string memory key)\\n      internal\\n      pure\\n      returns (uint256)\\n  {\\n      return uint256(keccak256(abi.encodePacked(key, seed)));\\n  }\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/token/ERC721/IERC721.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../../utils/introspection/IERC165.sol\\\";\\n\\n/**\\n * @dev Required interface of an ERC721 compliant contract.\\n */\\ninterface IERC721 is IERC165 {\\n    /**\\n     * @dev Emitted when `tokenId` token is transferred from `from` to `to`.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 indexed tokenId);\\n\\n    /**\\n     * @dev Emitted when `owner` enables `approved` to manage the `tokenId` token.\\n     */\\n    event Approval(address indexed owner, address indexed approved, uint256 indexed tokenId);\\n\\n    /**\\n     * @dev Emitted when `owner` enables or disables (`approved`) `operator` to manage all of its assets.\\n     */\\n    event ApprovalForAll(address indexed owner, address indexed operator, bool approved);\\n\\n    /**\\n     * @dev Returns the number of tokens in ``owner``'s account.\\n     */\\n    function balanceOf(address owner) external view returns (uint256 balance);\\n\\n    /**\\n     * @dev Returns the owner of the `tokenId` token.\\n     *\\n     * Requirements:\\n     *\\n     * - `tokenId` must exist.\\n     */\\n    function ownerOf(uint256 tokenId) external view returns (address owner);\\n\\n    /**\\n     * @dev Safely transfers `tokenId` token from `from` to `to`, checking first that contract recipients\\n     * are aware of the ERC721 protocol to prevent tokens from being forever locked.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` cannot be the zero address.\\n     * - `to` cannot be the zero address.\\n     * - `tokenId` token must exist and be owned by `from`.\\n     * - If the caller is not `from`, it must be have been allowed to move this token by either {approve} or {setApprovalForAll}.\\n     * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function safeTransferFrom(\\n        address from,\\n        address to,\\n        uint256 tokenId\\n    ) external;\\n\\n    /**\\n     * @dev Transfers `tokenId` token from `from` to `to`.\\n     *\\n     * WARNING: Usage of this method is discouraged, use {safeTransferFrom} whenever possible.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` cannot be the zero address.\\n     * - `to` cannot be the zero address.\\n     * - `tokenId` token must be owned by `from`.\\n     * - If the caller is not `from`, it must be approved to move this token by either {approve} or {setApprovalForAll}.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(\\n        address from,\\n        address to,\\n        uint256 tokenId\\n    ) external;\\n\\n    /**\\n     * @dev Gives permission to `to` to transfer `tokenId` token to another account.\\n     * The approval is cleared when the token is transferred.\\n     *\\n     * Only a single account can be approved at a time, so approving the zero address clears previous approvals.\\n     *\\n     * Requirements:\\n     *\\n     * - The caller must own the token or be an approved operator.\\n     * - `tokenId` must exist.\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address to, uint256 tokenId) external;\\n\\n    /**\\n     * @dev Returns the account approved for `tokenId` token.\\n     *\\n     * Requirements:\\n     *\\n     * - `tokenId` must exist.\\n     */\\n    function getApproved(uint256 tokenId) external view returns (address operator);\\n\\n    /**\\n     * @dev Approve or remove `operator` as an operator for the caller.\\n     * Operators can call {transferFrom} or {safeTransferFrom} for any token owned by the caller.\\n     *\\n     * Requirements:\\n     *\\n     * - The `operator` cannot be the caller.\\n     *\\n     * Emits an {ApprovalForAll} event.\\n     */\\n    function setApprovalForAll(address operator, bool _approved) external;\\n\\n    /**\\n     * @dev Returns if the `operator` is allowed to manage all of the assets of `owner`.\\n     *\\n     * See {setApprovalForAll}\\n     */\\n    function isApprovedForAll(address owner, address operator) external view returns (bool);\\n\\n    /**\\n     * @dev Safely transfers `tokenId` token from `from` to `to`.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` cannot be the zero address.\\n     * - `to` cannot be the zero address.\\n     * - `tokenId` token must exist and be owned by `from`.\\n     * - If the caller is not `from`, it must be approved to move this token by either {approve} or {setApprovalForAll}.\\n     * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function safeTransferFrom(\\n        address from,\\n        address to,\\n        uint256 tokenId,\\n        bytes calldata data\\n    ) external;\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/token/ERC721/IERC721Receiver.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @title ERC721 token receiver interface\\n * @dev Interface for any contract that wants to support safeTransfers\\n * from ERC721 asset contracts.\\n */\\ninterface IERC721Receiver {\\n    /**\\n     * @dev Whenever an {IERC721} `tokenId` token is transferred to this contract via {IERC721-safeTransferFrom}\\n     * by `operator` from `from`, this function is called.\\n     *\\n     * It must return its Solidity selector to confirm the token transfer.\\n     * If any other value is returned or the interface is not implemented by the recipient, the transfer will be reverted.\\n     *\\n     * The selector can be obtained in Solidity with `IERC721.onERC721Received.selector`.\\n     */\\n    function onERC721Received(\\n        address operator,\\n        address from,\\n        uint256 tokenId,\\n        bytes calldata data\\n    ) external returns (bytes4);\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/token/ERC721/extensions/IERC721Metadata.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../IERC721.sol\\\";\\n\\n/**\\n * @title ERC-721 Non-Fungible Token Standard, optional metadata extension\\n * @dev See https://eips.ethereum.org/EIPS/eip-721\\n */\\ninterface IERC721Metadata is IERC721 {\\n    /**\\n     * @dev Returns the token collection name.\\n     */\\n    function name() external view returns (string memory);\\n\\n    /**\\n     * @dev Returns the token collection symbol.\\n     */\\n    function symbol() external view returns (string memory);\\n\\n    /**\\n     * @dev Returns the Uniform Resource Identifier (URI) for `tokenId` token.\\n     */\\n    function tokenURI(uint256 tokenId) external view returns (string memory);\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/utils/Address.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Collection of functions related to the address type\\n */\\nlibrary Address {\\n    /**\\n     * @dev Returns true if `account` is a contract.\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * It is unsafe to assume that an address for which this function returns\\n     * false is an externally-owned account (EOA) and not a contract.\\n     *\\n     * Among others, `isContract` will return false for the following\\n     * types of addresses:\\n     *\\n     *  - an externally-owned account\\n     *  - a contract in construction\\n     *  - an address where a contract will be created\\n     *  - an address where a contract lived, but was destroyed\\n     * ====\\n     */\\n    function isContract(address account) internal view returns (bool) {\\n        // This method relies on extcodesize, which returns 0 for contracts in\\n        // construction, since the code is only stored at the end of the\\n        // constructor execution.\\n\\n        uint256 size;\\n        assembly {\\n            size := extcodesize(account)\\n        }\\n        return size > 0;\\n    }\\n\\n    /**\\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\\n     * `recipient`, forwarding all available gas and reverting on errors.\\n     *\\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\\n     * imposed by `transfer`, making them unable to receive funds via\\n     * `transfer`. {sendValue} removes this limitation.\\n     *\\n     * https://diligence.consensys.net/posts/2019/09/stop-using-soliditys-transfer-now/[Learn more].\\n     *\\n     * IMPORTANT: because control is transferred to `recipient`, care must be\\n     * taken to not create reentrancy vulnerabilities. Consider using\\n     * {ReentrancyGuard} or the\\n     * https://solidity.readthedocs.io/en/v0.5.11/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\\n     */\\n    function sendValue(address payable recipient, uint256 amount) internal {\\n        require(address(this).balance >= amount, \\\"Address: insufficient balance\\\");\\n\\n        (bool success, ) = recipient.call{value: amount}(\\\"\\\");\\n        require(success, \\\"Address: unable to send value, recipient may have reverted\\\");\\n    }\\n\\n    /**\\n     * @dev Performs a Solidity function call using a low level `call`. A\\n     * plain `call` is an unsafe replacement for a function call: use this\\n     * function instead.\\n     *\\n     * If `target` reverts with a revert reason, it is bubbled up by this\\n     * function (like regular Solidity function calls).\\n     *\\n     * Returns the raw returned data. To convert to the expected return value,\\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\\n     *\\n     * Requirements:\\n     *\\n     * - `target` must be a contract.\\n     * - calling `target` with `data` must not revert.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionCall(target, data, \\\"Address: low-level call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\\n     * `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, 0, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but also transferring `value` wei to `target`.\\n     *\\n     * Requirements:\\n     *\\n     * - the calling contract must have an ETH balance of at least `value`.\\n     * - the called Solidity function must be `payable`.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, value, \\\"Address: low-level call with value failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\\n     * with `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        require(address(this).balance >= value, \\\"Address: insufficient balance for call\\\");\\n        require(isContract(target), \\\"Address: call to non-contract\\\");\\n\\n        (bool success, bytes memory returndata) = target.call{value: value}(data);\\n        return verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\\n        return functionStaticCall(target, data, \\\"Address: low-level static call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal view returns (bytes memory) {\\n        require(isContract(target), \\\"Address: static call to non-contract\\\");\\n\\n        (bool success, bytes memory returndata) = target.staticcall(data);\\n        return verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionDelegateCall(target, data, \\\"Address: low-level delegate call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        require(isContract(target), \\\"Address: delegate call to non-contract\\\");\\n\\n        (bool success, bytes memory returndata) = target.delegatecall(data);\\n        return verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Tool to verifies that a low level call was successful, and revert if it wasn't, either by bubbling the\\n     * revert reason using the provided one.\\n     *\\n     * _Available since v4.3._\\n     */\\n    function verifyCallResult(\\n        bool success,\\n        bytes memory returndata,\\n        string memory errorMessage\\n    ) internal pure returns (bytes memory) {\\n        if (success) {\\n            return returndata;\\n        } else {\\n            // Look for revert reason and bubble it up if present\\n            if (returndata.length > 0) {\\n                // The easiest way to bubble the revert reason is using memory via assembly\\n\\n                assembly {\\n                    let returndata_size := mload(returndata)\\n                    revert(add(32, returndata), returndata_size)\\n                }\\n            } else {\\n                revert(errorMessage);\\n            }\\n        }\\n    }\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/utils/Context.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Provides information about the current execution context, including the\\n * sender of the transaction and its data. While these are generally available\\n * via msg.sender and msg.data, they should not be accessed in such a direct\\n * manner, since when dealing with meta-transactions the account sending and\\n * paying for execution may not be the actual sender (as far as an application\\n * is concerned).\\n *\\n * This contract is only required for intermediate, library-like contracts.\\n */\\nabstract contract Context {\\n    function _msgSender() internal view virtual returns (address) {\\n        return msg.sender;\\n    }\\n\\n    function _msgData() internal view virtual returns (bytes calldata) {\\n        return msg.data;\\n    }\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/utils/introspection/ERC165.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"./IERC165.sol\\\";\\n\\n/**\\n * @dev Implementation of the {IERC165} interface.\\n *\\n * Contracts that want to implement ERC165 should inherit from this contract and override {supportsInterface} to check\\n * for the additional interface id that will be supported. For example:\\n *\\n * ```solidity\\n * function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {\\n *     return interfaceId == type(MyInterface).interfaceId || super.supportsInterface(interfaceId);\\n * }\\n * ```\\n *\\n * Alternatively, {ERC165Storage} provides an easier to use but more expensive implementation.\\n */\\nabstract contract ERC165 is IERC165 {\\n    /**\\n     * @dev See {IERC165-supportsInterface}.\\n     */\\n    function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {\\n        return interfaceId == type(IERC165).interfaceId;\\n    }\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/utils/introspection/IERC165.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC165 standard, as defined in the\\n * https://eips.ethereum.org/EIPS/eip-165[EIP].\\n *\\n * Implementers can declare support of contract interfaces, which can then be\\n * queried by others ({ERC165Checker}).\\n *\\n * For an implementation, see {ERC165}.\\n */\\ninterface IERC165 {\\n    /**\\n     * @dev Returns true if this contract implements the interface defined by\\n     * `interfaceId`. See the corresponding\\n     * https://eips.ethereum.org/EIPS/eip-165#how-interfaces-are-identified[EIP section]\\n     * to learn more about how these ids are created.\\n     *\\n     * This function call must use less than 30 000 gas.\\n     */\\n    function supportsInterface(bytes4 interfaceId) external view returns (bool);\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/token/ERC721/extensions/IERC721Enumerable.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../IERC721.sol\\\";\\n\\n/**\\n * @title ERC-721 Non-Fungible Token Standard, optional enumeration extension\\n * @dev See https://eips.ethereum.org/EIPS/eip-721\\n */\\ninterface IERC721Enumerable is IERC721 {\\n    /**\\n     * @dev Returns the total amount of tokens stored by the contract.\\n     */\\n    function totalSupply() external view returns (uint256);\\n\\n    /**\\n     * @dev Returns a token ID owned by `owner` at a given `index` of its token list.\\n     * Use along with {balanceOf} to enumerate all of ``owner``'s tokens.\\n     */\\n    function tokenOfOwnerByIndex(address owner, uint256 index) external view returns (uint256 tokenId);\\n\\n    /**\\n     * @dev Returns a token ID at a given `index` of all the tokens stored by the contract.\\n     * Use along with {totalSupply} to enumerate all tokens.\\n     */\\n    function tokenByIndex(uint256 index) external view returns (uint256);\\n}\\n\"\r\n    }\r\n  },\r\n  \"settings\": {\r\n    \"optimizer\": {\r\n      \"enabled\": true,\r\n      \"runs\": 200\r\n    },\r\n    \"outputSelection\": {\r\n      \"*\": {\r\n        \"*\": [\r\n          \"evm.bytecode\",\r\n          \"evm.deployedBytecode\",\r\n          \"devdoc\",\r\n          \"userdoc\",\r\n          \"metadata\",\r\n          \"abi\"\r\n        ]\r\n      }\r\n    },\r\n    \"metadata\": {\r\n      \"useLiteralContent\": true\r\n    },\r\n    \"libraries\": {}\r\n  }\r\n}}","ABI":"[{\"inputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"approved\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"Approval\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"operator\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"bool\",\"name\":\"approved\",\"type\":\"bool\"}],\"name\":\"ApprovalForAll\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"Transfer\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"MAX_SUPPLY\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"PRICE\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"approve\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"contractURI\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"getApproved\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getTotalSupply\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"operator\",\"type\":\"address\"}],\"name\":\"isApprovedForAll\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"numTokens\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"walletAddress\",\"type\":\"address\"}],\"name\":\"mintForFriend\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"numTokens\",\"type\":\"uint256\"}],\"name\":\"mintItem\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"name\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"ownerOf\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"safeTransferFrom\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"},{\"internalType\":\"bytes\",\"name\":\"_data\",\"type\":\"bytes\"}],\"name\":\"safeTransferFrom\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"operator\",\"type\":\"address\"},{\"internalType\":\"bool\",\"name\":\"approved\",\"type\":\"bool\"}],\"name\":\"setApprovalForAll\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes4\",\"name\":\"interfaceId\",\"type\":\"bytes4\"}],\"name\":\"supportsInterface\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"symbol\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"index\",\"type\":\"uint256\"}],\"name\":\"tokenByIndex\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"index\",\"type\":\"uint256\"}],\"name\":\"tokenOfOwnerByIndex\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"id\",\"type\":\"uint256\"}],\"name\":\"tokenURI\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalSupply\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"transferFrom\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"withdrawAll\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"}]","ContractName":"YourContract","CompilerVersion":"v0.8.4+commit.c7e474f2","OptimizationUsed":"1","Runs":"200","ConstructorArguments":"","EVMVersion":"Default","Library":"","LicenseType":"","Proxy":"0","Implementation":"","SwarmSource":""}]}