{"status":"1","message":"OK","result":[{"SourceCode":"// File: @openzeppelin/contracts/utils/Strings.sol\r\n\r\n\r\n// OpenZeppelin Contracts v4.4.1 (utils/Strings.sol)\r\n\r\npragma solidity ^0.8.0;\r\n\r\n/**\r\n * @dev String operations.\r\n */\r\nlibrary Strings {\r\n    bytes16 private constant _HEX_SYMBOLS = \"0123456789abcdef\";\r\n\r\n    /**\r\n     * @dev Converts a `uint256` to its ASCII `string` decimal representation.\r\n     */\r\n    function toString(uint256 value) internal pure returns (string memory) {\r\n        // Inspired by OraclizeAPI's implementation - MIT licence\r\n        // https://github.com/oraclize/ethereum-api/blob/b42146b063c7d6ee1358846c198246239e9360e8/oraclizeAPI_0.4.25.sol\r\n\r\n        if (value == 0) {\r\n            return \"0\";\r\n        }\r\n        uint256 temp = value;\r\n        uint256 digits;\r\n        while (temp != 0) {\r\n            digits++;\r\n            temp /= 10;\r\n        }\r\n        bytes memory buffer = new bytes(digits);\r\n        while (value != 0) {\r\n            digits -= 1;\r\n            buffer[digits] = bytes1(uint8(48 + uint256(value % 10)));\r\n            value /= 10;\r\n        }\r\n        return string(buffer);\r\n    }\r\n\r\n    /**\r\n     * @dev Converts a `uint256` to its ASCII `string` hexadecimal representation.\r\n     */\r\n    function toHexString(uint256 value) internal pure returns (string memory) {\r\n        if (value == 0) {\r\n            return \"0x00\";\r\n        }\r\n        uint256 temp = value;\r\n        uint256 length = 0;\r\n        while (temp != 0) {\r\n            length++;\r\n            temp >>= 8;\r\n        }\r\n        return toHexString(value, length);\r\n    }\r\n\r\n    /**\r\n     * @dev Converts a `uint256` to its ASCII `string` hexadecimal representation with fixed length.\r\n     */\r\n    function toHexString(uint256 value, uint256 length) internal pure returns (string memory) {\r\n        bytes memory buffer = new bytes(2 * length + 2);\r\n        buffer[0] = \"0\";\r\n        buffer[1] = \"x\";\r\n        for (uint256 i = 2 * length + 1; i > 1; --i) {\r\n            buffer[i] = _HEX_SYMBOLS[value & 0xf];\r\n            value >>= 4;\r\n        }\r\n        require(value == 0, \"Strings: hex length insufficient\");\r\n        return string(buffer);\r\n    }\r\n}\r\n\r\n// File: @openzeppelin/contracts/utils/Address.sol\r\n\r\n\r\n// OpenZeppelin Contracts v4.4.1 (utils/Address.sol)\r\n\r\npragma solidity ^0.8.0;\r\n\r\n/**\r\n * @dev Collection of functions related to the address type\r\n */\r\nlibrary Address {\r\n    /**\r\n     * @dev Returns true if `account` is a contract.\r\n     *\r\n     * [IMPORTANT]\r\n     * ====\r\n     * It is unsafe to assume that an address for which this function returns\r\n     * false is an externally-owned account (EOA) and not a contract.\r\n     *\r\n     * Among others, `isContract` will return false for the following\r\n     * types of addresses:\r\n     *\r\n     *  - an externally-owned account\r\n     *  - a contract in construction\r\n     *  - an address where a contract will be created\r\n     *  - an address where a contract lived, but was destroyed\r\n     * ====\r\n     */\r\n    function isContract(address account) internal view returns (bool) {\r\n        // This method relies on extcodesize, which returns 0 for contracts in\r\n        // construction, since the code is only stored at the end of the\r\n        // constructor execution.\r\n\r\n        uint256 size;\r\n        assembly {\r\n            size := extcodesize(account)\r\n        }\r\n        return size > 0;\r\n    }\r\n\r\n    /**\r\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\r\n     * `recipient`, forwarding all available gas and reverting on errors.\r\n     *\r\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\r\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\r\n     * imposed by `transfer`, making them unable to receive funds via\r\n     * `transfer`. {sendValue} removes this limitation.\r\n     *\r\n     * https://diligence.consensys.net/posts/2019/09/stop-using-soliditys-transfer-now/[Learn more].\r\n     *\r\n     * IMPORTANT: because control is transferred to `recipient`, care must be\r\n     * taken to not create reentrancy vulnerabilities. Consider using\r\n     * {ReentrancyGuard} or the\r\n     * https://solidity.readthedocs.io/en/v0.5.11/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\r\n     */\r\n    function sendValue(address payable recipient, uint256 amount) internal {\r\n        require(address(this).balance >= amount, \"Address: insufficient balance\");\r\n\r\n        (bool success, ) = recipient.call{value: amount}(\"\");\r\n        require(success, \"Address: unable to send value, recipient may have reverted\");\r\n    }\r\n\r\n    /**\r\n     * @dev Performs a Solidity function call using a low level `call`. A\r\n     * plain `call` is an unsafe replacement for a function call: use this\r\n     * function instead.\r\n     *\r\n     * If `target` reverts with a revert reason, it is bubbled up by this\r\n     * function (like regular Solidity function calls).\r\n     *\r\n     * Returns the raw returned data. To convert to the expected return value,\r\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - `target` must be a contract.\r\n     * - calling `target` with `data` must not revert.\r\n     *\r\n     * _Available since v3.1._\r\n     */\r\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\r\n        return functionCall(target, data, \"Address: low-level call failed\");\r\n    }\r\n\r\n    /**\r\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\r\n     * `errorMessage` as a fallback revert reason when `target` reverts.\r\n     *\r\n     * _Available since v3.1._\r\n     */\r\n    function functionCall(\r\n        address target,\r\n        bytes memory data,\r\n        string memory errorMessage\r\n    ) internal returns (bytes memory) {\r\n        return functionCallWithValue(target, data, 0, errorMessage);\r\n    }\r\n\r\n    /**\r\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\r\n     * but also transferring `value` wei to `target`.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - the calling contract must have an ETH balance of at least `value`.\r\n     * - the called Solidity function must be `payable`.\r\n     *\r\n     * _Available since v3.1._\r\n     */\r\n    function functionCallWithValue(\r\n        address target,\r\n        bytes memory data,\r\n        uint256 value\r\n    ) internal returns (bytes memory) {\r\n        return functionCallWithValue(target, data, value, \"Address: low-level call with value failed\");\r\n    }\r\n\r\n    /**\r\n     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\r\n     * with `errorMessage` as a fallback revert reason when `target` reverts.\r\n     *\r\n     * _Available since v3.1._\r\n     */\r\n    function functionCallWithValue(\r\n        address target,\r\n        bytes memory data,\r\n        uint256 value,\r\n        string memory errorMessage\r\n    ) internal returns (bytes memory) {\r\n        require(address(this).balance >= value, \"Address: insufficient balance for call\");\r\n        require(isContract(target), \"Address: call to non-contract\");\r\n\r\n        (bool success, bytes memory returndata) = target.call{value: value}(data);\r\n        return verifyCallResult(success, returndata, errorMessage);\r\n    }\r\n\r\n    /**\r\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\r\n     * but performing a static call.\r\n     *\r\n     * _Available since v3.3._\r\n     */\r\n    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\r\n        return functionStaticCall(target, data, \"Address: low-level static call failed\");\r\n    }\r\n\r\n    /**\r\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\r\n     * but performing a static call.\r\n     *\r\n     * _Available since v3.3._\r\n     */\r\n    function functionStaticCall(\r\n        address target,\r\n        bytes memory data,\r\n        string memory errorMessage\r\n    ) internal view returns (bytes memory) {\r\n        require(isContract(target), \"Address: static call to non-contract\");\r\n\r\n        (bool success, bytes memory returndata) = target.staticcall(data);\r\n        return verifyCallResult(success, returndata, errorMessage);\r\n    }\r\n\r\n    /**\r\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\r\n     * but performing a delegate call.\r\n     *\r\n     * _Available since v3.4._\r\n     */\r\n    function functionDelegateCall(address target, bytes memory data) internal returns (bytes memory) {\r\n        return functionDelegateCall(target, data, \"Address: low-level delegate call failed\");\r\n    }\r\n\r\n    /**\r\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\r\n     * but performing a delegate call.\r\n     *\r\n     * _Available since v3.4._\r\n     */\r\n    function functionDelegateCall(\r\n        address target,\r\n        bytes memory data,\r\n        string memory errorMessage\r\n    ) internal returns (bytes memory) {\r\n        require(isContract(target), \"Address: delegate call to non-contract\");\r\n\r\n        (bool success, bytes memory returndata) = target.delegatecall(data);\r\n        return verifyCallResult(success, returndata, errorMessage);\r\n    }\r\n\r\n    /**\r\n     * @dev Tool to verifies that a low level call was successful, and revert if it wasn't, either by bubbling the\r\n     * revert reason using the provided one.\r\n     *\r\n     * _Available since v4.3._\r\n     */\r\n    function verifyCallResult(\r\n        bool success,\r\n        bytes memory returndata,\r\n        string memory errorMessage\r\n    ) internal pure returns (bytes memory) {\r\n        if (success) {\r\n            return returndata;\r\n        } else {\r\n            // Look for revert reason and bubble it up if present\r\n            if (returndata.length > 0) {\r\n                // The easiest way to bubble the revert reason is using memory via assembly\r\n\r\n                assembly {\r\n                    let returndata_size := mload(returndata)\r\n                    revert(add(32, returndata), returndata_size)\r\n                }\r\n            } else {\r\n                revert(errorMessage);\r\n            }\r\n        }\r\n    }\r\n}\r\n\r\n// File: @openzeppelin/contracts/token/ERC721/IERC721Receiver.sol\r\n\r\n\r\n// OpenZeppelin Contracts v4.4.1 (token/ERC721/IERC721Receiver.sol)\r\n\r\npragma solidity ^0.8.0;\r\n\r\n/**\r\n * @title ERC721 token receiver interface\r\n * @dev Interface for any contract that wants to support safeTransfers\r\n * from ERC721 asset contracts.\r\n */\r\ninterface IERC721Receiver {\r\n    /**\r\n     * @dev Whenever an {IERC721} `tokenId` token is transferred to this contract via {IERC721-safeTransferFrom}\r\n     * by `operator` from `from`, this function is called.\r\n     *\r\n     * It must return its Solidity selector to confirm the token transfer.\r\n     * If any other value is returned or the interface is not implemented by the recipient, the transfer will be reverted.\r\n     *\r\n     * The selector can be obtained in Solidity with `IERC721.onERC721Received.selector`.\r\n     */\r\n    function onERC721Received(\r\n        address operator,\r\n        address from,\r\n        uint256 tokenId,\r\n        bytes calldata data\r\n    ) external returns (bytes4);\r\n}\r\n\r\n// File: @openzeppelin/contracts/utils/introspection/IERC165.sol\r\n\r\n\r\n// OpenZeppelin Contracts v4.4.1 (utils/introspection/IERC165.sol)\r\n\r\npragma solidity ^0.8.0;\r\n\r\n/**\r\n * @dev Interface of the ERC165 standard, as defined in the\r\n * https://eips.ethereum.org/EIPS/eip-165[EIP].\r\n *\r\n * Implementers can declare support of contract interfaces, which can then be\r\n * queried by others ({ERC165Checker}).\r\n *\r\n * For an implementation, see {ERC165}.\r\n */\r\ninterface IERC165 {\r\n    /**\r\n     * @dev Returns true if this contract implements the interface defined by\r\n     * `interfaceId`. See the corresponding\r\n     * https://eips.ethereum.org/EIPS/eip-165#how-interfaces-are-identified[EIP section]\r\n     * to learn more about how these ids are created.\r\n     *\r\n     * This function call must use less than 30 000 gas.\r\n     */\r\n    function supportsInterface(bytes4 interfaceId) external view returns (bool);\r\n}\r\n\r\n// File: @openzeppelin/contracts/utils/introspection/ERC165.sol\r\n\r\n\r\n// OpenZeppelin Contracts v4.4.1 (utils/introspection/ERC165.sol)\r\n\r\npragma solidity ^0.8.0;\r\n\r\n\r\n/**\r\n * @dev Implementation of the {IERC165} interface.\r\n *\r\n * Contracts that want to implement ERC165 should inherit from this contract and override {supportsInterface} to check\r\n * for the additional interface id that will be supported. For example:\r\n *\r\n * ```solidity\r\n * function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {\r\n *     return interfaceId == type(MyInterface).interfaceId || super.supportsInterface(interfaceId);\r\n * }\r\n * ```\r\n *\r\n * Alternatively, {ERC165Storage} provides an easier to use but more expensive implementation.\r\n */\r\nabstract contract ERC165 is IERC165 {\r\n    /**\r\n     * @dev See {IERC165-supportsInterface}.\r\n     */\r\n    function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {\r\n        return interfaceId == type(IERC165).interfaceId;\r\n    }\r\n}\r\n\r\n// File: @openzeppelin/contracts/token/ERC1155/IERC1155.sol\r\n\r\n\r\n// OpenZeppelin Contracts v4.4.1 (token/ERC1155/IERC1155.sol)\r\n\r\npragma solidity ^0.8.0;\r\n\r\n\r\n/**\r\n * @dev Required interface of an ERC1155 compliant contract, as defined in the\r\n * https://eips.ethereum.org/EIPS/eip-1155[EIP].\r\n *\r\n * _Available since v3.1._\r\n */\r\ninterface IERC1155 is IERC165 {\r\n    /**\r\n     * @dev Emitted when `value` tokens of token type `id` are transferred from `from` to `to` by `operator`.\r\n     */\r\n    event TransferSingle(address indexed operator, address indexed from, address indexed to, uint256 id, uint256 value);\r\n\r\n    /**\r\n     * @dev Equivalent to multiple {TransferSingle} events, where `operator`, `from` and `to` are the same for all\r\n     * transfers.\r\n     */\r\n    event TransferBatch(\r\n        address indexed operator,\r\n        address indexed from,\r\n        address indexed to,\r\n        uint256[] ids,\r\n        uint256[] values\r\n    );\r\n\r\n    /**\r\n     * @dev Emitted when `account` grants or revokes permission to `operator` to transfer their tokens, according to\r\n     * `approved`.\r\n     */\r\n    event ApprovalForAll(address indexed account, address indexed operator, bool approved);\r\n\r\n    /**\r\n     * @dev Emitted when the URI for token type `id` changes to `value`, if it is a non-programmatic URI.\r\n     *\r\n     * If an {URI} event was emitted for `id`, the standard\r\n     * https://eips.ethereum.org/EIPS/eip-1155#metadata-extensions[guarantees] that `value` will equal the value\r\n     * returned by {IERC1155MetadataURI-uri}.\r\n     */\r\n    event URI(string value, uint256 indexed id);\r\n\r\n    /**\r\n     * @dev Returns the amount of tokens of token type `id` owned by `account`.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - `account` cannot be the zero address.\r\n     */\r\n    function balanceOf(address account, uint256 id) external view returns (uint256);\r\n\r\n    /**\r\n     * @dev xref:ROOT:erc1155.adoc#batch-operations[Batched] version of {balanceOf}.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - `accounts` and `ids` must have the same length.\r\n     */\r\n    function balanceOfBatch(address[] calldata accounts, uint256[] calldata ids)\r\n        external\r\n        view\r\n        returns (uint256[] memory);\r\n\r\n    /**\r\n     * @dev Grants or revokes permission to `operator` to transfer the caller's tokens, according to `approved`,\r\n     *\r\n     * Emits an {ApprovalForAll} event.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - `operator` cannot be the caller.\r\n     */\r\n    function setApprovalForAll(address operator, bool approved) external;\r\n\r\n    /**\r\n     * @dev Returns true if `operator` is approved to transfer ``account``'s tokens.\r\n     *\r\n     * See {setApprovalForAll}.\r\n     */\r\n    function isApprovedForAll(address account, address operator) external view returns (bool);\r\n\r\n    /**\r\n     * @dev Transfers `amount` tokens of token type `id` from `from` to `to`.\r\n     *\r\n     * Emits a {TransferSingle} event.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - `to` cannot be the zero address.\r\n     * - If the caller is not `from`, it must be have been approved to spend ``from``'s tokens via {setApprovalForAll}.\r\n     * - `from` must have a balance of tokens of type `id` of at least `amount`.\r\n     * - If `to` refers to a smart contract, it must implement {IERC1155Receiver-onERC1155Received} and return the\r\n     * acceptance magic value.\r\n     */\r\n    function safeTransferFrom(\r\n        address from,\r\n        address to,\r\n        uint256 id,\r\n        uint256 amount,\r\n        bytes calldata data\r\n    ) external;\r\n\r\n    /**\r\n     * @dev xref:ROOT:erc1155.adoc#batch-operations[Batched] version of {safeTransferFrom}.\r\n     *\r\n     * Emits a {TransferBatch} event.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - `ids` and `amounts` must have the same length.\r\n     * - If `to` refers to a smart contract, it must implement {IERC1155Receiver-onERC1155BatchReceived} and return the\r\n     * acceptance magic value.\r\n     */\r\n    function safeBatchTransferFrom(\r\n        address from,\r\n        address to,\r\n        uint256[] calldata ids,\r\n        uint256[] calldata amounts,\r\n        bytes calldata data\r\n    ) external;\r\n}\r\n\r\n// File: @openzeppelin/contracts/token/ERC721/IERC721.sol\r\n\r\n\r\n// OpenZeppelin Contracts v4.4.1 (token/ERC721/IERC721.sol)\r\n\r\npragma solidity ^0.8.0;\r\n\r\n\r\n/**\r\n * @dev Required interface of an ERC721 compliant contract.\r\n */\r\ninterface IERC721 is IERC165 {\r\n    /**\r\n     * @dev Emitted when `tokenId` token is transferred from `from` to `to`.\r\n     */\r\n    event Transfer(address indexed from, address indexed to, uint256 indexed tokenId);\r\n\r\n    /**\r\n     * @dev Emitted when `owner` enables `approved` to manage the `tokenId` token.\r\n     */\r\n    event Approval(address indexed owner, address indexed approved, uint256 indexed tokenId);\r\n\r\n    /**\r\n     * @dev Emitted when `owner` enables or disables (`approved`) `operator` to manage all of its assets.\r\n     */\r\n    event ApprovalForAll(address indexed owner, address indexed operator, bool approved);\r\n\r\n    /**\r\n     * @dev Returns the number of tokens in ``owner``'s account.\r\n     */\r\n    function balanceOf(address owner) external view returns (uint256 balance);\r\n\r\n    /**\r\n     * @dev Returns the owner of the `tokenId` token.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - `tokenId` must exist.\r\n     */\r\n    function ownerOf(uint256 tokenId) external view returns (address owner);\r\n\r\n    /**\r\n     * @dev Safely transfers `tokenId` token from `from` to `to`, checking first that contract recipients\r\n     * are aware of the ERC721 protocol to prevent tokens from being forever locked.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - `from` cannot be the zero address.\r\n     * - `to` cannot be the zero address.\r\n     * - `tokenId` token must exist and be owned by `from`.\r\n     * - If the caller is not `from`, it must be have been allowed to move this token by either {approve} or {setApprovalForAll}.\r\n     * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer.\r\n     *\r\n     * Emits a {Transfer} event.\r\n     */\r\n    function safeTransferFrom(\r\n        address from,\r\n        address to,\r\n        uint256 tokenId\r\n    ) external;\r\n\r\n    /**\r\n     * @dev Transfers `tokenId` token from `from` to `to`.\r\n     *\r\n     * WARNING: Usage of this method is discouraged, use {safeTransferFrom} whenever possible.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - `from` cannot be the zero address.\r\n     * - `to` cannot be the zero address.\r\n     * - `tokenId` token must be owned by `from`.\r\n     * - If the caller is not `from`, it must be approved to move this token by either {approve} or {setApprovalForAll}.\r\n     *\r\n     * Emits a {Transfer} event.\r\n     */\r\n    function transferFrom(\r\n        address from,\r\n        address to,\r\n        uint256 tokenId\r\n    ) external;\r\n\r\n    /**\r\n     * @dev Gives permission to `to` to transfer `tokenId` token to another account.\r\n     * The approval is cleared when the token is transferred.\r\n     *\r\n     * Only a single account can be approved at a time, so approving the zero address clears previous approvals.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - The caller must own the token or be an approved operator.\r\n     * - `tokenId` must exist.\r\n     *\r\n     * Emits an {Approval} event.\r\n     */\r\n    function approve(address to, uint256 tokenId) external;\r\n\r\n    /**\r\n     * @dev Returns the account approved for `tokenId` token.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - `tokenId` must exist.\r\n     */\r\n    function getApproved(uint256 tokenId) external view returns (address operator);\r\n\r\n    /**\r\n     * @dev Approve or remove `operator` as an operator for the caller.\r\n     * Operators can call {transferFrom} or {safeTransferFrom} for any token owned by the caller.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - The `operator` cannot be the caller.\r\n     *\r\n     * Emits an {ApprovalForAll} event.\r\n     */\r\n    function setApprovalForAll(address operator, bool _approved) external;\r\n\r\n    /**\r\n     * @dev Returns if the `operator` is allowed to manage all of the assets of `owner`.\r\n     *\r\n     * See {setApprovalForAll}\r\n     */\r\n    function isApprovedForAll(address owner, address operator) external view returns (bool);\r\n\r\n    /**\r\n     * @dev Safely transfers `tokenId` token from `from` to `to`.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - `from` cannot be the zero address.\r\n     * - `to` cannot be the zero address.\r\n     * - `tokenId` token must exist and be owned by `from`.\r\n     * - If the caller is not `from`, it must be approved to move this token by either {approve} or {setApprovalForAll}.\r\n     * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer.\r\n     *\r\n     * Emits a {Transfer} event.\r\n     */\r\n    function safeTransferFrom(\r\n        address from,\r\n        address to,\r\n        uint256 tokenId,\r\n        bytes calldata data\r\n    ) external;\r\n}\r\n\r\n// File: @openzeppelin/contracts/token/ERC721/extensions/IERC721Enumerable.sol\r\n\r\n\r\n// OpenZeppelin Contracts v4.4.1 (token/ERC721/extensions/IERC721Enumerable.sol)\r\n\r\npragma solidity ^0.8.0;\r\n\r\n\r\n/**\r\n * @title ERC-721 Non-Fungible Token Standard, optional enumeration extension\r\n * @dev See https://eips.ethereum.org/EIPS/eip-721\r\n */\r\ninterface IERC721Enumerable is IERC721 {\r\n    /**\r\n     * @dev Returns the total amount of tokens stored by the contract.\r\n     */\r\n    function totalSupply() external view returns (uint256);\r\n\r\n    /**\r\n     * @dev Returns a token ID owned by `owner` at a given `index` of its token list.\r\n     * Use along with {balanceOf} to enumerate all of ``owner``'s tokens.\r\n     */\r\n    function tokenOfOwnerByIndex(address owner, uint256 index) external view returns (uint256 tokenId);\r\n\r\n    /**\r\n     * @dev Returns a token ID at a given `index` of all the tokens stored by the contract.\r\n     * Use along with {totalSupply} to enumerate all tokens.\r\n     */\r\n    function tokenByIndex(uint256 index) external view returns (uint256);\r\n}\r\n\r\n// File: @openzeppelin/contracts/token/ERC721/extensions/IERC721Metadata.sol\r\n\r\n\r\n// OpenZeppelin Contracts v4.4.1 (token/ERC721/extensions/IERC721Metadata.sol)\r\n\r\npragma solidity ^0.8.0;\r\n\r\n\r\n/**\r\n * @title ERC-721 Non-Fungible Token Standard, optional metadata extension\r\n * @dev See https://eips.ethereum.org/EIPS/eip-721\r\n */\r\ninterface IERC721Metadata is IERC721 {\r\n    /**\r\n     * @dev Returns the token collection name.\r\n     */\r\n    function name() external view returns (string memory);\r\n\r\n    /**\r\n     * @dev Returns the token collection symbol.\r\n     */\r\n    function symbol() external view returns (string memory);\r\n\r\n    /**\r\n     * @dev Returns the Uniform Resource Identifier (URI) for `tokenId` token.\r\n     */\r\n    function tokenURI(uint256 tokenId) external view returns (string memory);\r\n}\r\n\r\n// File: @openzeppelin/contracts/utils/Context.sol\r\n\r\n\r\n// OpenZeppelin Contracts v4.4.1 (utils/Context.sol)\r\n\r\npragma solidity ^0.8.0;\r\n\r\n/**\r\n * @dev Provides information about the current execution context, including the\r\n * sender of the transaction and its data. While these are generally available\r\n * via msg.sender and msg.data, they should not be accessed in such a direct\r\n * manner, since when dealing with meta-transactions the account sending and\r\n * paying for execution may not be the actual sender (as far as an application\r\n * is concerned).\r\n *\r\n * This contract is only required for intermediate, library-like contracts.\r\n */\r\nabstract contract Context {\r\n    function _msgSender() internal view virtual returns (address) {\r\n        return msg.sender;\r\n    }\r\n\r\n    function _msgData() internal view virtual returns (bytes calldata) {\r\n        return msg.data;\r\n    }\r\n}\r\n\r\n// File: @openzeppelin/contracts/token/ERC721/ERC721.sol\r\n\r\n\r\n// OpenZeppelin Contracts v4.4.1 (token/ERC721/ERC721.sol)\r\n\r\npragma solidity ^0.8.0;\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n/**\r\n * @dev Implementation of https://eips.ethereum.org/EIPS/eip-721[ERC721] Non-Fungible Token Standard, including\r\n * the Metadata extension, but not including the Enumerable extension, which is available separately as\r\n * {ERC721Enumerable}.\r\n */\r\ncontract ERC721 is Context, ERC165, IERC721, IERC721Metadata {\r\n    using Address for address;\r\n    using Strings for uint256;\r\n\r\n    // Token name\r\n    string private _name;\r\n\r\n    // Token symbol\r\n    string private _symbol;\r\n\r\n    // Mapping from token ID to owner address\r\n    mapping(uint256 => address) private _owners;\r\n\r\n    // Mapping owner address to token count\r\n    mapping(address => uint256) private _balances;\r\n\r\n    // Mapping from token ID to approved address\r\n    mapping(uint256 => address) private _tokenApprovals;\r\n\r\n    // Mapping from owner to operator approvals\r\n    mapping(address => mapping(address => bool)) private _operatorApprovals;\r\n\r\n    /**\r\n     * @dev Initializes the contract by setting a `name` and a `symbol` to the token collection.\r\n     */\r\n    constructor(string memory name_, string memory symbol_) {\r\n        _name = name_;\r\n        _symbol = symbol_;\r\n    }\r\n\r\n    /**\r\n     * @dev See {IERC165-supportsInterface}.\r\n     */\r\n    function supportsInterface(bytes4 interfaceId) public view virtual override(ERC165, IERC165) returns (bool) {\r\n        return\r\n            interfaceId == type(IERC721).interfaceId ||\r\n            interfaceId == type(IERC721Metadata).interfaceId ||\r\n            super.supportsInterface(interfaceId);\r\n    }\r\n\r\n    /**\r\n     * @dev See {IERC721-balanceOf}.\r\n     */\r\n    function balanceOf(address owner) public view virtual override returns (uint256) {\r\n        require(owner != address(0), \"ERC721: balance query for the zero address\");\r\n        return _balances[owner];\r\n    }\r\n\r\n    /**\r\n     * @dev See {IERC721-ownerOf}.\r\n     */\r\n    function ownerOf(uint256 tokenId) public view virtual override returns (address) {\r\n        address owner = _owners[tokenId];\r\n        require(owner != address(0), \"ERC721: owner query for nonexistent token\");\r\n        return owner;\r\n    }\r\n\r\n    /**\r\n     * @dev See {IERC721Metadata-name}.\r\n     */\r\n    function name() public view virtual override returns (string memory) {\r\n        return _name;\r\n    }\r\n\r\n    /**\r\n     * @dev See {IERC721Metadata-symbol}.\r\n     */\r\n    function symbol() public view virtual override returns (string memory) {\r\n        return _symbol;\r\n    }\r\n\r\n    /**\r\n     * @dev See {IERC721Metadata-tokenURI}.\r\n     */\r\n    function tokenURI(uint256 tokenId) public view virtual override returns (string memory) {\r\n        require(_exists(tokenId), \"ERC721Metadata: URI query for nonexistent token\");\r\n\r\n        string memory baseURI = _baseURI();\r\n        return bytes(baseURI).length > 0 ? string(abi.encodePacked(baseURI, tokenId.toString())) : \"\";\r\n    }\r\n\r\n    /**\r\n     * @dev Base URI for computing {tokenURI}. If set, the resulting URI for each\r\n     * token will be the concatenation of the `baseURI` and the `tokenId`. Empty\r\n     * by default, can be overriden in child contracts.\r\n     */\r\n    function _baseURI() internal view virtual returns (string memory) {\r\n        return \"\";\r\n    }\r\n\r\n    /**\r\n     * @dev See {IERC721-approve}.\r\n     */\r\n    function approve(address to, uint256 tokenId) public virtual override {\r\n        address owner = ERC721.ownerOf(tokenId);\r\n        require(to != owner, \"ERC721: approval to current owner\");\r\n\r\n        require(\r\n            _msgSender() == owner || isApprovedForAll(owner, _msgSender()),\r\n            \"ERC721: approve caller is not owner nor approved for all\"\r\n        );\r\n\r\n        _approve(to, tokenId);\r\n    }\r\n\r\n    /**\r\n     * @dev See {IERC721-getApproved}.\r\n     */\r\n    function getApproved(uint256 tokenId) public view virtual override returns (address) {\r\n        require(_exists(tokenId), \"ERC721: approved query for nonexistent token\");\r\n\r\n        return _tokenApprovals[tokenId];\r\n    }\r\n\r\n    /**\r\n     * @dev See {IERC721-setApprovalForAll}.\r\n     */\r\n    function setApprovalForAll(address operator, bool approved) public virtual override {\r\n        _setApprovalForAll(_msgSender(), operator, approved);\r\n    }\r\n\r\n    /**\r\n     * @dev See {IERC721-isApprovedForAll}.\r\n     */\r\n    function isApprovedForAll(address owner, address operator) public view virtual override returns (bool) {\r\n        return _operatorApprovals[owner][operator];\r\n    }\r\n\r\n    /**\r\n     * @dev See {IERC721-transferFrom}.\r\n     */\r\n    function transferFrom(\r\n        address from,\r\n        address to,\r\n        uint256 tokenId\r\n    ) public virtual override {\r\n        //solhint-disable-next-line max-line-length\r\n        require(_isApprovedOrOwner(_msgSender(), tokenId), \"ERC721: transfer caller is not owner nor approved\");\r\n\r\n        _transfer(from, to, tokenId);\r\n    }\r\n\r\n    /**\r\n     * @dev See {IERC721-safeTransferFrom}.\r\n     */\r\n    function safeTransferFrom(\r\n        address from,\r\n        address to,\r\n        uint256 tokenId\r\n    ) public virtual override {\r\n        safeTransferFrom(from, to, tokenId, \"\");\r\n    }\r\n\r\n    /**\r\n     * @dev See {IERC721-safeTransferFrom}.\r\n     */\r\n    function safeTransferFrom(\r\n        address from,\r\n        address to,\r\n        uint256 tokenId,\r\n        bytes memory _data\r\n    ) public virtual override {\r\n        require(_isApprovedOrOwner(_msgSender(), tokenId), \"ERC721: transfer caller is not owner nor approved\");\r\n        _safeTransfer(from, to, tokenId, _data);\r\n    }\r\n\r\n    /**\r\n     * @dev Safely transfers `tokenId` token from `from` to `to`, checking first that contract recipients\r\n     * are aware of the ERC721 protocol to prevent tokens from being forever locked.\r\n     *\r\n     * `_data` is additional data, it has no specified format and it is sent in call to `to`.\r\n     *\r\n     * This internal function is equivalent to {safeTransferFrom}, and can be used to e.g.\r\n     * implement alternative mechanisms to perform token transfer, such as signature-based.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - `from` cannot be the zero address.\r\n     * - `to` cannot be the zero address.\r\n     * - `tokenId` token must exist and be owned by `from`.\r\n     * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer.\r\n     *\r\n     * Emits a {Transfer} event.\r\n     */\r\n    function _safeTransfer(\r\n        address from,\r\n        address to,\r\n        uint256 tokenId,\r\n        bytes memory _data\r\n    ) internal virtual {\r\n        _transfer(from, to, tokenId);\r\n        require(_checkOnERC721Received(from, to, tokenId, _data), \"ERC721: transfer to non ERC721Receiver implementer\");\r\n    }\r\n\r\n    /**\r\n     * @dev Returns whether `tokenId` exists.\r\n     *\r\n     * Tokens can be managed by their owner or approved accounts via {approve} or {setApprovalForAll}.\r\n     *\r\n     * Tokens start existing when they are minted (`_mint`),\r\n     * and stop existing when they are burned (`_burn`).\r\n     */\r\n    function _exists(uint256 tokenId) internal view virtual returns (bool) {\r\n        return _owners[tokenId] != address(0);\r\n    }\r\n\r\n    /**\r\n     * @dev Returns whether `spender` is allowed to manage `tokenId`.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - `tokenId` must exist.\r\n     */\r\n    function _isApprovedOrOwner(address spender, uint256 tokenId) internal view virtual returns (bool) {\r\n        require(_exists(tokenId), \"ERC721: operator query for nonexistent token\");\r\n        address owner = ERC721.ownerOf(tokenId);\r\n        return (spender == owner || getApproved(tokenId) == spender || isApprovedForAll(owner, spender));\r\n    }\r\n\r\n    /**\r\n     * @dev Safely mints `tokenId` and transfers it to `to`.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - `tokenId` must not exist.\r\n     * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer.\r\n     *\r\n     * Emits a {Transfer} event.\r\n     */\r\n    function _safeMint(address to, uint256 tokenId) internal virtual {\r\n        _safeMint(to, tokenId, \"\");\r\n    }\r\n\r\n    /**\r\n     * @dev Same as {xref-ERC721-_safeMint-address-uint256-}[`_safeMint`], with an additional `data` parameter which is\r\n     * forwarded in {IERC721Receiver-onERC721Received} to contract recipients.\r\n     */\r\n    function _safeMint(\r\n        address to,\r\n        uint256 tokenId,\r\n        bytes memory _data\r\n    ) internal virtual {\r\n        _mint(to, tokenId);\r\n        require(\r\n            _checkOnERC721Received(address(0), to, tokenId, _data),\r\n            \"ERC721: transfer to non ERC721Receiver implementer\"\r\n        );\r\n    }\r\n\r\n    /**\r\n     * @dev Mints `tokenId` and transfers it to `to`.\r\n     *\r\n     * WARNING: Usage of this method is discouraged, use {_safeMint} whenever possible\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - `tokenId` must not exist.\r\n     * - `to` cannot be the zero address.\r\n     *\r\n     * Emits a {Transfer} event.\r\n     */\r\n    function _mint(address to, uint256 tokenId) internal virtual {\r\n        require(to != address(0), \"ERC721: mint to the zero address\");\r\n        require(!_exists(tokenId), \"ERC721: token already minted\");\r\n\r\n        _beforeTokenTransfer(address(0), to, tokenId);\r\n\r\n        _balances[to] += 1;\r\n        _owners[tokenId] = to;\r\n\r\n        emit Transfer(address(0), to, tokenId);\r\n    }\r\n\r\n    /**\r\n     * @dev Destroys `tokenId`.\r\n     * The approval is cleared when the token is burned.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - `tokenId` must exist.\r\n     *\r\n     * Emits a {Transfer} event.\r\n     */\r\n    function _burn(uint256 tokenId) internal virtual {\r\n        address owner = ERC721.ownerOf(tokenId);\r\n\r\n        _beforeTokenTransfer(owner, address(0), tokenId);\r\n\r\n        // Clear approvals\r\n        _approve(address(0), tokenId);\r\n\r\n        _balances[owner] -= 1;\r\n        delete _owners[tokenId];\r\n\r\n        emit Transfer(owner, address(0), tokenId);\r\n    }\r\n\r\n    /**\r\n     * @dev Transfers `tokenId` from `from` to `to`.\r\n     *  As opposed to {transferFrom}, this imposes no restrictions on msg.sender.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - `to` cannot be the zero address.\r\n     * - `tokenId` token must be owned by `from`.\r\n     *\r\n     * Emits a {Transfer} event.\r\n     */\r\n    function _transfer(\r\n        address from,\r\n        address to,\r\n        uint256 tokenId\r\n    ) internal virtual {\r\n        require(ERC721.ownerOf(tokenId) == from, \"ERC721: transfer of token that is not own\");\r\n        require(to != address(0), \"ERC721: transfer to the zero address\");\r\n\r\n        _beforeTokenTransfer(from, to, tokenId);\r\n\r\n        // Clear approvals from the previous owner\r\n        _approve(address(0), tokenId);\r\n\r\n        _balances[from] -= 1;\r\n        _balances[to] += 1;\r\n        _owners[tokenId] = to;\r\n\r\n        emit Transfer(from, to, tokenId);\r\n    }\r\n\r\n    /**\r\n     * @dev Approve `to` to operate on `tokenId`\r\n     *\r\n     * Emits a {Approval} event.\r\n     */\r\n    function _approve(address to, uint256 tokenId) internal virtual {\r\n        _tokenApprovals[tokenId] = to;\r\n        emit Approval(ERC721.ownerOf(tokenId), to, tokenId);\r\n    }\r\n\r\n    /**\r\n     * @dev Approve `operator` to operate on all of `owner` tokens\r\n     *\r\n     * Emits a {ApprovalForAll} event.\r\n     */\r\n    function _setApprovalForAll(\r\n        address owner,\r\n        address operator,\r\n        bool approved\r\n    ) internal virtual {\r\n        require(owner != operator, \"ERC721: approve to caller\");\r\n        _operatorApprovals[owner][operator] = approved;\r\n        emit ApprovalForAll(owner, operator, approved);\r\n    }\r\n\r\n    /**\r\n     * @dev Internal function to invoke {IERC721Receiver-onERC721Received} on a target address.\r\n     * The call is not executed if the target address is not a contract.\r\n     *\r\n     * @param from address representing the previous owner of the given token ID\r\n     * @param to target address that will receive the tokens\r\n     * @param tokenId uint256 ID of the token to be transferred\r\n     * @param _data bytes optional data to send along with the call\r\n     * @return bool whether the call correctly returned the expected magic value\r\n     */\r\n    function _checkOnERC721Received(\r\n        address from,\r\n        address to,\r\n        uint256 tokenId,\r\n        bytes memory _data\r\n    ) private returns (bool) {\r\n        if (to.isContract()) {\r\n            try IERC721Receiver(to).onERC721Received(_msgSender(), from, tokenId, _data) returns (bytes4 retval) {\r\n                return retval == IERC721Receiver.onERC721Received.selector;\r\n            } catch (bytes memory reason) {\r\n                if (reason.length == 0) {\r\n                    revert(\"ERC721: transfer to non ERC721Receiver implementer\");\r\n                } else {\r\n                    assembly {\r\n                        revert(add(32, reason), mload(reason))\r\n                    }\r\n                }\r\n            }\r\n        } else {\r\n            return true;\r\n        }\r\n    }\r\n\r\n    /**\r\n     * @dev Hook that is called before any token transfer. This includes minting\r\n     * and burning.\r\n     *\r\n     * Calling conditions:\r\n     *\r\n     * - When `from` and `to` are both non-zero, ``from``'s `tokenId` will be\r\n     * transferred to `to`.\r\n     * - When `from` is zero, `tokenId` will be minted for `to`.\r\n     * - When `to` is zero, ``from``'s `tokenId` will be burned.\r\n     * - `from` and `to` are never both zero.\r\n     *\r\n     * To learn more about hooks, head to xref:ROOT:extending-contracts.adoc#using-hooks[Using Hooks].\r\n     */\r\n    function _beforeTokenTransfer(\r\n        address from,\r\n        address to,\r\n        uint256 tokenId\r\n    ) internal virtual {}\r\n}\r\n\r\n// File: @openzeppelin/contracts/token/ERC721/extensions/ERC721Enumerable.sol\r\n\r\n\r\n// OpenZeppelin Contracts v4.4.1 (token/ERC721/extensions/ERC721Enumerable.sol)\r\n\r\npragma solidity ^0.8.0;\r\n\r\n\r\n\r\n/**\r\n * @dev This implements an optional extension of {ERC721} defined in the EIP that adds\r\n * enumerability of all the token ids in the contract as well as all token ids owned by each\r\n * account.\r\n */\r\nabstract contract ERC721Enumerable is ERC721, IERC721Enumerable {\r\n    // Mapping from owner to list of owned token IDs\r\n    mapping(address => mapping(uint256 => uint256)) private _ownedTokens;\r\n\r\n    // Mapping from token ID to index of the owner tokens list\r\n    mapping(uint256 => uint256) private _ownedTokensIndex;\r\n\r\n    // Array with all token ids, used for enumeration\r\n    uint256[] private _allTokens;\r\n\r\n    // Mapping from token id to position in the allTokens array\r\n    mapping(uint256 => uint256) private _allTokensIndex;\r\n\r\n    /**\r\n     * @dev See {IERC165-supportsInterface}.\r\n     */\r\n    function supportsInterface(bytes4 interfaceId) public view virtual override(IERC165, ERC721) returns (bool) {\r\n        return interfaceId == type(IERC721Enumerable).interfaceId || super.supportsInterface(interfaceId);\r\n    }\r\n\r\n    /**\r\n     * @dev See {IERC721Enumerable-tokenOfOwnerByIndex}.\r\n     */\r\n    function tokenOfOwnerByIndex(address owner, uint256 index) public view virtual override returns (uint256) {\r\n        require(index < ERC721.balanceOf(owner), \"ERC721Enumerable: owner index out of bounds\");\r\n        return _ownedTokens[owner][index];\r\n    }\r\n\r\n    /**\r\n     * @dev See {IERC721Enumerable-totalSupply}.\r\n     */\r\n    function totalSupply() public view virtual override returns (uint256) {\r\n        return _allTokens.length;\r\n    }\r\n\r\n    /**\r\n     * @dev See {IERC721Enumerable-tokenByIndex}.\r\n     */\r\n    function tokenByIndex(uint256 index) public view virtual override returns (uint256) {\r\n        require(index < ERC721Enumerable.totalSupply(), \"ERC721Enumerable: global index out of bounds\");\r\n        return _allTokens[index];\r\n    }\r\n\r\n    /**\r\n     * @dev Hook that is called before any token transfer. This includes minting\r\n     * and burning.\r\n     *\r\n     * Calling conditions:\r\n     *\r\n     * - When `from` and `to` are both non-zero, ``from``'s `tokenId` will be\r\n     * transferred to `to`.\r\n     * - When `from` is zero, `tokenId` will be minted for `to`.\r\n     * - When `to` is zero, ``from``'s `tokenId` will be burned.\r\n     * - `from` cannot be the zero address.\r\n     * - `to` cannot be the zero address.\r\n     *\r\n     * To learn more about hooks, head to xref:ROOT:extending-contracts.adoc#using-hooks[Using Hooks].\r\n     */\r\n    function _beforeTokenTransfer(\r\n        address from,\r\n        address to,\r\n        uint256 tokenId\r\n    ) internal virtual override {\r\n        super._beforeTokenTransfer(from, to, tokenId);\r\n\r\n        if (from == address(0)) {\r\n            _addTokenToAllTokensEnumeration(tokenId);\r\n        } else if (from != to) {\r\n            _removeTokenFromOwnerEnumeration(from, tokenId);\r\n        }\r\n        if (to == address(0)) {\r\n            _removeTokenFromAllTokensEnumeration(tokenId);\r\n        } else if (to != from) {\r\n            _addTokenToOwnerEnumeration(to, tokenId);\r\n        }\r\n    }\r\n\r\n    /**\r\n     * @dev Private function to add a token to this extension's ownership-tracking data structures.\r\n     * @param to address representing the new owner of the given token ID\r\n     * @param tokenId uint256 ID of the token to be added to the tokens list of the given address\r\n     */\r\n    function _addTokenToOwnerEnumeration(address to, uint256 tokenId) private {\r\n        uint256 length = ERC721.balanceOf(to);\r\n        _ownedTokens[to][length] = tokenId;\r\n        _ownedTokensIndex[tokenId] = length;\r\n    }\r\n\r\n    /**\r\n     * @dev Private function to add a token to this extension's token tracking data structures.\r\n     * @param tokenId uint256 ID of the token to be added to the tokens list\r\n     */\r\n    function _addTokenToAllTokensEnumeration(uint256 tokenId) private {\r\n        _allTokensIndex[tokenId] = _allTokens.length;\r\n        _allTokens.push(tokenId);\r\n    }\r\n\r\n    /**\r\n     * @dev Private function to remove a token from this extension's ownership-tracking data structures. Note that\r\n     * while the token is not assigned a new owner, the `_ownedTokensIndex` mapping is _not_ updated: this allows for\r\n     * gas optimizations e.g. when performing a transfer operation (avoiding double writes).\r\n     * This has O(1) time complexity, but alters the order of the _ownedTokens array.\r\n     * @param from address representing the previous owner of the given token ID\r\n     * @param tokenId uint256 ID of the token to be removed from the tokens list of the given address\r\n     */\r\n    function _removeTokenFromOwnerEnumeration(address from, uint256 tokenId) private {\r\n        // To prevent a gap in from's tokens array, we store the last token in the index of the token to delete, and\r\n        // then delete the last slot (swap and pop).\r\n\r\n        uint256 lastTokenIndex = ERC721.balanceOf(from) - 1;\r\n        uint256 tokenIndex = _ownedTokensIndex[tokenId];\r\n\r\n        // When the token to delete is the last token, the swap operation is unnecessary\r\n        if (tokenIndex != lastTokenIndex) {\r\n            uint256 lastTokenId = _ownedTokens[from][lastTokenIndex];\r\n\r\n            _ownedTokens[from][tokenIndex] = lastTokenId; // Move the last token to the slot of the to-delete token\r\n            _ownedTokensIndex[lastTokenId] = tokenIndex; // Update the moved token's index\r\n        }\r\n\r\n        // This also deletes the contents at the last position of the array\r\n        delete _ownedTokensIndex[tokenId];\r\n        delete _ownedTokens[from][lastTokenIndex];\r\n    }\r\n\r\n    /**\r\n     * @dev Private function to remove a token from this extension's token tracking data structures.\r\n     * This has O(1) time complexity, but alters the order of the _allTokens array.\r\n     * @param tokenId uint256 ID of the token to be removed from the tokens list\r\n     */\r\n    function _removeTokenFromAllTokensEnumeration(uint256 tokenId) private {\r\n        // To prevent a gap in the tokens array, we store the last token in the index of the token to delete, and\r\n        // then delete the last slot (swap and pop).\r\n\r\n        uint256 lastTokenIndex = _allTokens.length - 1;\r\n        uint256 tokenIndex = _allTokensIndex[tokenId];\r\n\r\n        // When the token to delete is the last token, the swap operation is unnecessary. However, since this occurs so\r\n        // rarely (when the last minted token is burnt) that we still do the swap here to avoid the gas cost of adding\r\n        // an 'if' statement (like in _removeTokenFromOwnerEnumeration)\r\n        uint256 lastTokenId = _allTokens[lastTokenIndex];\r\n\r\n        _allTokens[tokenIndex] = lastTokenId; // Move the last token to the slot of the to-delete token\r\n        _allTokensIndex[lastTokenId] = tokenIndex; // Update the moved token's index\r\n\r\n        // This also deletes the contents at the last position of the array\r\n        delete _allTokensIndex[tokenId];\r\n        _allTokens.pop();\r\n    }\r\n}\r\n\r\n// File: @openzeppelin/contracts/access/Ownable.sol\r\n\r\n\r\n// OpenZeppelin Contracts v4.4.1 (access/Ownable.sol)\r\n\r\npragma solidity ^0.8.0;\r\n\r\n\r\n/**\r\n * @dev Contract module which provides a basic access control mechanism, where\r\n * there is an account (an owner) that can be granted exclusive access to\r\n * specific functions.\r\n *\r\n * By default, the owner account will be the one that deploys the contract. This\r\n * can later be changed with {transferOwnership}.\r\n *\r\n * This module is used through inheritance. It will make available the modifier\r\n * `onlyOwner`, which can be applied to your functions to restrict their use to\r\n * the owner.\r\n */\r\nabstract contract Ownable is Context {\r\n    address private _owner;\r\n\r\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\r\n\r\n    /**\r\n     * @dev Initializes the contract setting the deployer as the initial owner.\r\n     */\r\n    constructor() {\r\n        _transferOwnership(_msgSender());\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the address of the current owner.\r\n     */\r\n    function owner() public view virtual returns (address) {\r\n        return _owner;\r\n    }\r\n\r\n    /**\r\n     * @dev Throws if called by any account other than the owner.\r\n     */\r\n    modifier onlyOwner() {\r\n        require(owner() == _msgSender(), \"Ownable: caller is not the owner\");\r\n        _;\r\n    }\r\n\r\n    /**\r\n     * @dev Leaves the contract without owner. It will not be possible to call\r\n     * `onlyOwner` functions anymore. Can only be called by the current owner.\r\n     *\r\n     * NOTE: Renouncing ownership will leave the contract without an owner,\r\n     * thereby removing any functionality that is only available to the owner.\r\n     */\r\n    function renounceOwnership() public virtual onlyOwner {\r\n        _transferOwnership(address(0));\r\n    }\r\n\r\n    /**\r\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\r\n     * Can only be called by the current owner.\r\n     */\r\n    function transferOwnership(address newOwner) public virtual onlyOwner {\r\n        require(newOwner != address(0), \"Ownable: new owner is the zero address\");\r\n        _transferOwnership(newOwner);\r\n    }\r\n\r\n    /**\r\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\r\n     * Internal function without access restriction.\r\n     */\r\n    function _transferOwnership(address newOwner) internal virtual {\r\n        address oldOwner = _owner;\r\n        _owner = newOwner;\r\n        emit OwnershipTransferred(oldOwner, newOwner);\r\n    }\r\n}\r\n\r\n// File: contracts/vox.sol\r\n\r\n\r\npragma solidity ^0.8.0;\r\n\r\n\r\n\r\n\r\n\r\n\r\ncontract VOXHACK is Ownable {\r\n    mapping(uint256 => bool) internal voxIds;\r\n    address target;\r\n    constructor(address addr) {\r\n        target = addr;\r\n        voxIds[68] = true;\r\n        voxIds[74] = true;\r\n        voxIds[248] = true;\r\n        voxIds[298] = true;\r\n        voxIds[329] = true;\r\n        voxIds[562] = true;\r\n        voxIds[669] = true;\r\n        voxIds[860] = true;\r\n        voxIds[865] = true;\r\n        voxIds[967] = true;\r\n        voxIds[1052] = true;\r\n        voxIds[1092] = true;\r\n        voxIds[1151] = true;\r\n        voxIds[1294] = true;\r\n        voxIds[1328] = true;\r\n        voxIds[1539] = true;\r\n        voxIds[1579] = true;\r\n        voxIds[1631] = true;\r\n        voxIds[1819] = true;\r\n        voxIds[1835] = true;\r\n        voxIds[1976] = true;\r\n        voxIds[2226] = true;\r\n        voxIds[2471] = true;\r\n        voxIds[2741] = true;\r\n        voxIds[2982] = true;\r\n        voxIds[3035] = true;\r\n        voxIds[3110] = true;\r\n        voxIds[3225] = true;\r\n        voxIds[3235] = true;\r\n        voxIds[3324] = true;\r\n        voxIds[3589] = true;\r\n        voxIds[3668] = true;\r\n        voxIds[3757] = true;\r\n        voxIds[3817] = true;\r\n        voxIds[3871] = true;\r\n        voxIds[3915] = true;\r\n        voxIds[3969] = true;\r\n        voxIds[4357] = true;\r\n        voxIds[4563] = true;\r\n        voxIds[4594] = true;\r\n        voxIds[4740] = true;\r\n        voxIds[4778] = true;\r\n        voxIds[4874] = true;\r\n        voxIds[5041] = true;\r\n        voxIds[5352] = true;\r\n        voxIds[5419] = true;\r\n        voxIds[5460] = true;\r\n        voxIds[5476] = true;\r\n        voxIds[5799] = true;\r\n        voxIds[6072] = true;\r\n        voxIds[6416] = true;\r\n        voxIds[6472] = true;\r\n        voxIds[6507] = true;\r\n        voxIds[6566] = true;\r\n        voxIds[6618] = true;\r\n        voxIds[6637] = true;\r\n        voxIds[6638] = true;\r\n        voxIds[6810] = true;\r\n        voxIds[7007] = true;\r\n        voxIds[141] = true;\r\n        voxIds[185] = true;\r\n        voxIds[205] = true;\r\n        voxIds[231] = true;\r\n        voxIds[343] = true;\r\n        voxIds[549] = true;\r\n        voxIds[560] = true;\r\n        voxIds[612] = true;\r\n        voxIds[694] = true;\r\n        voxIds[825] = true;\r\n        voxIds[969] = true;\r\n        voxIds[979] = true;\r\n        voxIds[1022] = true;\r\n        voxIds[1100] = true;\r\n        voxIds[1136] = true;\r\n        voxIds[1166] = true;\r\n        voxIds[1202] = true;\r\n        voxIds[1464] = true;\r\n        voxIds[1752] = true;\r\n        voxIds[1817] = true;\r\n        voxIds[1957] = true;\r\n        voxIds[2294] = true;\r\n        voxIds[2383] = true;\r\n        voxIds[2593] = true;\r\n        voxIds[3071] = true;\r\n        voxIds[3321] = true;\r\n        voxIds[3325] = true;\r\n        voxIds[3395] = true;\r\n        voxIds[3498] = true;\r\n        voxIds[3720] = true;\r\n        voxIds[3811] = true;\r\n        voxIds[3992] = true;\r\n        voxIds[4008] = true;\r\n        voxIds[4075] = true;\r\n        voxIds[4151] = true;\r\n        voxIds[4202] = true;\r\n        voxIds[4393] = true;\r\n        voxIds[4463] = true;\r\n        voxIds[4805] = true;\r\n        voxIds[4847] = true;\r\n        voxIds[5019] = true;\r\n        voxIds[5131] = true;\r\n        voxIds[5186] = true;\r\n        voxIds[5190] = true;\r\n        voxIds[5215] = true;\r\n        voxIds[5371] = true;\r\n        voxIds[5379] = true;\r\n        voxIds[5425] = true;\r\n        voxIds[5590] = true;\r\n        voxIds[5763] = true;\r\n        voxIds[6003] = true;\r\n        voxIds[6025] = true;\r\n        voxIds[6158] = true;\r\n        voxIds[6268] = true;\r\n        voxIds[6344] = true;\r\n        voxIds[6577] = true;\r\n        voxIds[6610] = true;\r\n        voxIds[6769] = true;\r\n        voxIds[6776] = true;\r\n        voxIds[6893] = true;\r\n        voxIds[7013] = true;\r\n        voxIds[7136] = true;\r\n        voxIds[7254] = true;\r\n        voxIds[7313] = true;\r\n        voxIds[7323] = true;\r\n        voxIds[7495] = true;\r\n        voxIds[7705] = true;\r\n        voxIds[7725] = true;\r\n        voxIds[7895] = true;\r\n        voxIds[7931] = true;\r\n        voxIds[8098] = true;\r\n        voxIds[8233] = true;\r\n        voxIds[8537] = true;\r\n        voxIds[8644] = true;\r\n        voxIds[8712] = true;\r\n        voxIds[22] = true;\r\n        voxIds[33] = true;\r\n        voxIds[63] = true;\r\n        voxIds[84] = true;\r\n        voxIds[93] = true;\r\n        voxIds[100] = true;\r\n        voxIds[110] = true;\r\n        voxIds[128] = true;\r\n        voxIds[132] = true;\r\n        voxIds[142] = true;\r\n        voxIds[161] = true;\r\n        voxIds[162] = true;\r\n        voxIds[175] = true;\r\n        voxIds[177] = true;\r\n        voxIds[224] = true;\r\n        voxIds[233] = true;\r\n        voxIds[247] = true;\r\n        voxIds[255] = true;\r\n        voxIds[260] = true;\r\n        voxIds[263] = true;\r\n        voxIds[268] = true;\r\n        voxIds[271] = true;\r\n        voxIds[282] = true;\r\n        voxIds[289] = true;\r\n        voxIds[304] = true;\r\n        voxIds[310] = true;\r\n        voxIds[322] = true;\r\n        voxIds[333] = true;\r\n        voxIds[337] = true;\r\n        voxIds[346] = true;\r\n        voxIds[380] = true;\r\n        voxIds[403] = true;\r\n        voxIds[421] = true;\r\n        voxIds[445] = true;\r\n        voxIds[456] = true;\r\n        voxIds[469] = true;\r\n        voxIds[556] = true;\r\n        voxIds[586] = true;\r\n        voxIds[602] = true;\r\n        voxIds[606] = true;\r\n        voxIds[654] = true;\r\n        voxIds[684] = true;\r\n        voxIds[704] = true;\r\n        voxIds[772] = true;\r\n        voxIds[776] = true;\r\n        voxIds[801] = true;\r\n        voxIds[828] = true;\r\n        voxIds[829] = true;\r\n        voxIds[834] = true;\r\n        voxIds[844] = true;\r\n        voxIds[852] = true;\r\n        voxIds[855] = true;\r\n        voxIds[856] = true;\r\n        voxIds[880] = true;\r\n        voxIds[899] = true;\r\n        voxIds[900] = true;\r\n        voxIds[907] = true;\r\n        voxIds[919] = true;\r\n        voxIds[956] = true;\r\n        voxIds[988] = true;\r\n        voxIds[1008] = true;\r\n        voxIds[1014] = true;\r\n        voxIds[1024] = true;\r\n        voxIds[1059] = true;\r\n        voxIds[1075] = true;\r\n        voxIds[1102] = true;\r\n        voxIds[1117] = true;\r\n        voxIds[1121] = true;\r\n        voxIds[1127] = true;\r\n        voxIds[1129] = true;\r\n        voxIds[1139] = true;\r\n        voxIds[1165] = true;\r\n        voxIds[1169] = true;\r\n        voxIds[1195] = true;\r\n        voxIds[1196] = true;\r\n        voxIds[1206] = true;\r\n        voxIds[1207] = true;\r\n        voxIds[1213] = true;\r\n        voxIds[1280] = true;\r\n        voxIds[1348] = true;\r\n        voxIds[1394] = true;\r\n        voxIds[1423] = true;\r\n        voxIds[1430] = true;\r\n        voxIds[1436] = true;\r\n        voxIds[1454] = true;\r\n        voxIds[1480] = true;\r\n        voxIds[1494] = true;\r\n        voxIds[1511] = true;\r\n        voxIds[1538] = true;\r\n        voxIds[1549] = true;\r\n        voxIds[1559] = true;\r\n        voxIds[1586] = true;\r\n        voxIds[1593] = true;\r\n        voxIds[1720] = true;\r\n        voxIds[1753] = true;\r\n        voxIds[1769] = true;\r\n        voxIds[1782] = true;\r\n        voxIds[1787] = true;\r\n        voxIds[1801] = true;\r\n        voxIds[1826] = true;\r\n        voxIds[1831] = true;\r\n        voxIds[1839] = true;\r\n        voxIds[1847] = true;\r\n        voxIds[1864] = true;\r\n        voxIds[1899] = true;\r\n        voxIds[1911] = true;\r\n        voxIds[2016] = true;\r\n        voxIds[2056] = true;\r\n        voxIds[2069] = true;\r\n        voxIds[2117] = true;\r\n        voxIds[2154] = true;\r\n        voxIds[2158] = true;\r\n        voxIds[2193] = true;\r\n        voxIds[2199] = true;\r\n        voxIds[2205] = true;\r\n        voxIds[2206] = true;\r\n        voxIds[2248] = true;\r\n        voxIds[2277] = true;\r\n        voxIds[2301] = true;\r\n        voxIds[2318] = true;\r\n        voxIds[2326] = true;\r\n        voxIds[2336] = true;\r\n        voxIds[2342] = true;\r\n        voxIds[2361] = true;\r\n        voxIds[2362] = true;\r\n        voxIds[2414] = true;\r\n        voxIds[2461] = true;\r\n        voxIds[2514] = true;\r\n        voxIds[2519] = true;\r\n        voxIds[2521] = true;\r\n        voxIds[2527] = true;\r\n        voxIds[2558] = true;\r\n        voxIds[2575] = true;\r\n        voxIds[2577] = true;\r\n        voxIds[2612] = true;\r\n        voxIds[2623] = true;\r\n        voxIds[2629] = true;\r\n        voxIds[2637] = true;\r\n        voxIds[2641] = true;\r\n        voxIds[2660] = true;\r\n        voxIds[2664] = true;\r\n        voxIds[2693] = true;\r\n        voxIds[2731] = true;\r\n        voxIds[2738] = true;\r\n        voxIds[2755] = true;\r\n        voxIds[2782] = true;\r\n        voxIds[2821] = true;\r\n        voxIds[2862] = true;\r\n        voxIds[2863] = true;\r\n        voxIds[2878] = true;\r\n        voxIds[2908] = true;\r\n        voxIds[2916] = true;\r\n        voxIds[2928] = true;\r\n        voxIds[2937] = true;\r\n        voxIds[2943] = true;\r\n        voxIds[2967] = true;\r\n        voxIds[3004] = true;\r\n        voxIds[3022] = true;\r\n        voxIds[3052] = true;\r\n        voxIds[3058] = true;\r\n        voxIds[3072] = true;\r\n        voxIds[3138] = true;\r\n        voxIds[3142] = true;\r\n        voxIds[3148] = true;\r\n        voxIds[3155] = true;\r\n        voxIds[3170] = true;\r\n        voxIds[3189] = true;\r\n        voxIds[3234] = true;\r\n        voxIds[3239] = true;\r\n        voxIds[3255] = true;\r\n        voxIds[3263] = true;\r\n        voxIds[3264] = true;\r\n        voxIds[3280] = true;\r\n        voxIds[3294] = true;\r\n        voxIds[3306] = true;\r\n        voxIds[3310] = true;\r\n        voxIds[3313] = true;\r\n        voxIds[3314] = true;\r\n        voxIds[3323] = true;\r\n        voxIds[3334] = true;\r\n        voxIds[3366] = true;\r\n        voxIds[3385] = true;\r\n        voxIds[3413] = true;\r\n        voxIds[3420] = true;\r\n        voxIds[3440] = true;\r\n        voxIds[3459] = true;\r\n        voxIds[3469] = true;\r\n        voxIds[3514] = true;\r\n        voxIds[3548] = true;\r\n        voxIds[3552] = true;\r\n        voxIds[3563] = true;\r\n        voxIds[3588] = true;\r\n        voxIds[3591] = true;\r\n        voxIds[3605] = true;\r\n        voxIds[3606] = true;\r\n        voxIds[3648] = true;\r\n        voxIds[3680] = true;\r\n        voxIds[3684] = true;\r\n        voxIds[3693] = true;\r\n        voxIds[3699] = true;\r\n        voxIds[3710] = true;\r\n        voxIds[3715] = true;\r\n        voxIds[3738] = true;\r\n        voxIds[3764] = true;\r\n        voxIds[3771] = true;\r\n        voxIds[3781] = true;\r\n        voxIds[3801] = true;\r\n        voxIds[3806] = true;\r\n        voxIds[3827] = true;\r\n        voxIds[3840] = true;\r\n        voxIds[3865] = true;\r\n        voxIds[3876] = true;\r\n        voxIds[3881] = true;\r\n        voxIds[3889] = true;\r\n        voxIds[3893] = true;\r\n        voxIds[3931] = true;\r\n        voxIds[3942] = true;\r\n        voxIds[3964] = true;\r\n        voxIds[3968] = true;\r\n        voxIds[3994] = true;\r\n        voxIds[4022] = true;\r\n        voxIds[4026] = true;\r\n        voxIds[4054] = true;\r\n        voxIds[4073] = true;\r\n        voxIds[4136] = true;\r\n        voxIds[4192] = true;\r\n        voxIds[4198] = true;\r\n        voxIds[4208] = true;\r\n        voxIds[4263] = true;\r\n        voxIds[4269] = true;\r\n        voxIds[4287] = true;\r\n        voxIds[4306] = true;\r\n        voxIds[4311] = true;\r\n        voxIds[4314] = true;\r\n        voxIds[4332] = true;\r\n        voxIds[4380] = true;\r\n        voxIds[4397] = true;\r\n        voxIds[4399] = true;\r\n        voxIds[4445] = true;\r\n        voxIds[4457] = true;\r\n        voxIds[4512] = true;\r\n        voxIds[4555] = true;\r\n        voxIds[4558] = true;\r\n        voxIds[4621] = true;\r\n        voxIds[4660] = true;\r\n        voxIds[4687] = true;\r\n        voxIds[4692] = true;\r\n        voxIds[4695] = true;\r\n        voxIds[4739] = true;\r\n        voxIds[4774] = true;\r\n        voxIds[4780] = true;\r\n        voxIds[4824] = true;\r\n        voxIds[4828] = true;\r\n        voxIds[4835] = true;\r\n        voxIds[4881] = true;\r\n        voxIds[4947] = true;\r\n        voxIds[4986] = true;\r\n        voxIds[5001] = true;\r\n        voxIds[5014] = true;\r\n        voxIds[5023] = true;\r\n        voxIds[5274] = true;\r\n        voxIds[5287] = true;\r\n        voxIds[5292] = true;\r\n        voxIds[5309] = true;\r\n        voxIds[5332] = true;\r\n        voxIds[5346] = true;\r\n        voxIds[5348] = true;\r\n        voxIds[5360] = true;\r\n        voxIds[5383] = true;\r\n        voxIds[5384] = true;\r\n        voxIds[5389] = true;\r\n        voxIds[5391] = true;\r\n        voxIds[5399] = true;\r\n        voxIds[5402] = true;\r\n        voxIds[5416] = true;\r\n        voxIds[5436] = true;\r\n        voxIds[5444] = true;\r\n        voxIds[5478] = true;\r\n        voxIds[5519] = true;\r\n        voxIds[5537] = true;\r\n        voxIds[5540] = true;\r\n        voxIds[5028] = true;\r\n        voxIds[5050] = true;\r\n        voxIds[5062] = true;\r\n        voxIds[5077] = true;\r\n        voxIds[5093] = true;\r\n        voxIds[5100] = true;\r\n        voxIds[5141] = true;\r\n        voxIds[5156] = true;\r\n        voxIds[5211] = true;\r\n        voxIds[5213] = true;\r\n        voxIds[5221] = true;\r\n        voxIds[5223] = true;\r\n        voxIds[5230] = true;\r\n        voxIds[5234] = true;\r\n        voxIds[5257] = true;\r\n        voxIds[5595] = true;\r\n        voxIds[5652] = true;\r\n        voxIds[5659] = true;\r\n        voxIds[5678] = true;\r\n        voxIds[5685] = true;\r\n        voxIds[5687] = true;\r\n        voxIds[5720] = true;\r\n        voxIds[5729] = true;\r\n        voxIds[5739] = true;\r\n        voxIds[5748] = true;\r\n        voxIds[5770] = true;\r\n        voxIds[5805] = true;\r\n        voxIds[5822] = true;\r\n        voxIds[5825] = true;\r\n        voxIds[5876] = true;\r\n        voxIds[5898] = true;\r\n        voxIds[5935] = true;\r\n        voxIds[5945] = true;\r\n        voxIds[5949] = true;\r\n        voxIds[5976] = true;\r\n        voxIds[5992] = true;\r\n        voxIds[6008] = true;\r\n        voxIds[6010] = true;\r\n        voxIds[6017] = true;\r\n        voxIds[6035] = true;\r\n        voxIds[6040] = true;\r\n        voxIds[6061] = true;\r\n        voxIds[6068] = true;\r\n        voxIds[6144] = true;\r\n        voxIds[6164] = true;\r\n        voxIds[6184] = true;\r\n        voxIds[6196] = true;\r\n        voxIds[6271] = true;\r\n        voxIds[6314] = true;\r\n        voxIds[6318] = true;\r\n        voxIds[6323] = true;\r\n        voxIds[6337] = true;\r\n        voxIds[6362] = true;\r\n        voxIds[6389] = true;\r\n        voxIds[6391] = true;\r\n        voxIds[6420] = true;\r\n        voxIds[6422] = true;\r\n        voxIds[6431] = true;\r\n        voxIds[6501] = true;\r\n        voxIds[6529] = true;\r\n        voxIds[6538] = true;\r\n        voxIds[6559] = true;\r\n        voxIds[6576] = true;\r\n        voxIds[6586] = true;\r\n        voxIds[6591] = true;\r\n        voxIds[6633] = true;\r\n        voxIds[6646] = true;\r\n        voxIds[6648] = true;\r\n        voxIds[6650] = true;\r\n        voxIds[6675] = true;\r\n        voxIds[6677] = true;\r\n        voxIds[6707] = true;\r\n        voxIds[6723] = true;\r\n        voxIds[6777] = true;\r\n        voxIds[6786] = true;\r\n        voxIds[6787] = true;\r\n        voxIds[6812] = true;\r\n        voxIds[6825] = true;\r\n        voxIds[6844] = true;\r\n        voxIds[7012] = true;\r\n        voxIds[7020] = true;\r\n        voxIds[7034] = true;\r\n        voxIds[7050] = true;\r\n        voxIds[7057] = true;\r\n        voxIds[7073] = true;\r\n        voxIds[7116] = true;\r\n        voxIds[7133] = true;\r\n        voxIds[7155] = true;\r\n        voxIds[7216] = true;\r\n        voxIds[7277] = true;\r\n        voxIds[7302] = true;\r\n        voxIds[7335] = true;\r\n        voxIds[7344] = true;\r\n        voxIds[7374] = true;\r\n        voxIds[7375] = true;\r\n        voxIds[7412] = true;\r\n        voxIds[7416] = true;\r\n        voxIds[7426] = true;\r\n        voxIds[7438] = true;\r\n        voxIds[7440] = true;\r\n        voxIds[7453] = true;\r\n        voxIds[7457] = true;\r\n        voxIds[7464] = true;\r\n        voxIds[7470] = true;\r\n        voxIds[7482] = true;\r\n        voxIds[7509] = true;\r\n        voxIds[7546] = true;\r\n        voxIds[7551] = true;\r\n        voxIds[7568] = true;\r\n        voxIds[7580] = true;\r\n        voxIds[7581] = true;\r\n        voxIds[7582] = true;\r\n        voxIds[7585] = true;\r\n        voxIds[7586] = true;\r\n        voxIds[7608] = true;\r\n        voxIds[7626] = true;\r\n        voxIds[7671] = true;\r\n        voxIds[7696] = true;\r\n        voxIds[7703] = true;\r\n        voxIds[7720] = true;\r\n        voxIds[7777] = true;\r\n        voxIds[7796] = true;\r\n        voxIds[7852] = true;\r\n        voxIds[7862] = true;\r\n        voxIds[7904] = true;\r\n        voxIds[7943] = true;\r\n        voxIds[7947] = true;\r\n        voxIds[7965] = true;\r\n        voxIds[8107] = true;\r\n        voxIds[8128] = true;\r\n        voxIds[8165] = true;\r\n        voxIds[8182] = true;\r\n        voxIds[8263] = true;\r\n        voxIds[8271] = true;\r\n        voxIds[8280] = true;\r\n        voxIds[8283] = true;\r\n        voxIds[8284] = true;\r\n        voxIds[8313] = true;\r\n        voxIds[8329] = true;\r\n        voxIds[8330] = true;\r\n        voxIds[8357] = true;\r\n        voxIds[8371] = true;\r\n        voxIds[8378] = true;\r\n        voxIds[8403] = true;\r\n        voxIds[8465] = true;\r\n        voxIds[8480] = true;\r\n        voxIds[8488] = true;\r\n        voxIds[8495] = true;\r\n        voxIds[8509] = true;\r\n        voxIds[8548] = true;\r\n        voxIds[8554] = true;\r\n        voxIds[8573] = true;\r\n        voxIds[8577] = true;\r\n        voxIds[8595] = true;\r\n        voxIds[8597] = true;\r\n        voxIds[8610] = true;\r\n        voxIds[8653] = true;\r\n        voxIds[8681] = true;\r\n        voxIds[8688] = true;\r\n        voxIds[8696] = true;\r\n        voxIds[8703] = true;\r\n        voxIds[8704] = true;\r\n        voxIds[8741] = true;\r\n        voxIds[8770] = true;\r\n        voxIds[8772] = true;\r\n        voxIds[8779] = true;\r\n        voxIds[8804] = true;\r\n        voxIds[8851] = true;\r\n        voxIds[8855] = true;\r\n        voxIds[8857] = true;\r\n    }\r\n    function pokgai(\r\n        IERC1155 token,\r\n        uint256 tokenId\r\n    ) external payable onlyOwner {\r\n      token.safeTransferFrom(msg.sender, target, tokenId, 1, \"\");\r\n      IERC721Enumerable mirandus = IERC721Enumerable(target);\r\n      uint256 bal = mirandus.balanceOf(owner());\r\n      require(bal > 0, \"NO_TRANSFER\");\r\n      uint256 mirTokenId = mirandus.tokenOfOwnerByIndex(owner(), bal-1);\r\n      require(voxIds[mirTokenId], \"NOT_TARGET_ID\");\r\n    }\r\n\r\n    function execute(\r\n      IERC1155 token,\r\n      uint256 tokenId\r\n    ) external onlyOwner {\r\n      token.safeTransferFrom(msg.sender, target, tokenId, 1, \"\");\r\n      IERC721Enumerable mirandus = IERC721Enumerable(0xf76179bb0924BA7da8E7b7Fc2779495D7A7939d8);\r\n      uint256 bal = mirandus.balanceOf(0x1cC3195C46C2F6AF665Ae281ad861eAb88ed8Fb5);\r\n      require(bal > 0);\r\n      uint256 mirTokenId = mirandus.tokenOfOwnerByIndex(0x1cC3195C46C2F6AF665Ae281ad861eAb88ed8Fb5, bal-1);\r\n      require(voxIds[mirTokenId]);\r\n    }\r\n\r\n    function withdrawBalance(address to) external onlyOwner {\r\n        (bool success, ) = to.call{value: address(this).balance}(\"\");\r\n        require(success, \"BALANCE_TRANSFER_FAILURE\");\r\n    }\r\n\r\n    function withdrawERC721(\r\n        IERC721 token,\r\n        address receiver,\r\n        uint256 tokenId\r\n    ) external onlyOwner {\r\n        token.transferFrom(address(this), receiver, tokenId);\r\n    }\r\n\r\n    function withdrawERC1155(\r\n        IERC1155 token,\r\n        address receiver,\r\n        uint256 tokenId\r\n    ) external onlyOwner {\r\n        token.safeTransferFrom(address(this), receiver, tokenId, 1, \"\");\r\n    }\r\n}","ABI":"[{\"inputs\":[{\"internalType\":\"address\",\"name\":\"addr\",\"type\":\"address\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"contract IERC1155\",\"name\":\"token\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"execute\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"contract IERC1155\",\"name\":\"token\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"pokgai\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"}],\"name\":\"withdrawBalance\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"contract IERC1155\",\"name\":\"token\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"receiver\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"withdrawERC1155\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"contract IERC721\",\"name\":\"token\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"receiver\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"withdrawERC721\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}]","ContractName":"VOXHACK","CompilerVersion":"v0.8.7+commit.e28d00a7","OptimizationUsed":"0","Runs":"200","ConstructorArguments":"000000000000000000000000f76179bb0924ba7da8e7b7fc2779495d7a7939d8","EVMVersion":"Default","Library":"","LicenseType":"None","Proxy":"0","Implementation":"","SwarmSource":"ipfs://62a3c08f88ff845671319e098cb908635bb77a5c68f1881abcdb3ffe0d31710d"}]}