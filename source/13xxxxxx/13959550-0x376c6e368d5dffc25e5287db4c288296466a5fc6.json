{"status":"1","message":"OK","result":[{"SourceCode":"// SPDX-License-Identifier: Unlicense\r\npragma solidity 0.8.7;\r\n\r\n/// @notice Modern and gas efficient ERC20 + EIP-2612 implementation.\r\n/// @author Modified from Uniswap (https://github.com/Uniswap/uniswap-v2-core/blob/master/contracts/UniswapV2ERC20.sol)\r\n/// Inspired by Solmate: https://github.com/Rari-Capital/solmate\r\n/// Developed by 0xBasset\r\n\r\n// import \"hardhat/console.sol\";\r\n\r\ncontract Oil {\r\n    /*///////////////////////////////////////////////////////////////\r\n                                  EVENTS\r\n    //////////////////////////////////////////////////////////////*/\r\n\r\n    event Transfer(address indexed from, address indexed to, uint256 value);\r\n    event Approval(address indexed owner, address indexed spender, uint256 value);\r\n\r\n    /*///////////////////////////////////////////////////////////////\r\n                             ERC20 STORAGE\r\n    //////////////////////////////////////////////////////////////*/\r\n\r\n    address public impl_;\r\n    address public ruler;\r\n    address public treasury;\r\n    address public uniPair;\r\n    address public weth;\r\n\r\n    uint256 public totalSupply;\r\n    uint256 public startingTime;\r\n    uint256 public baseTax;\r\n    uint256 public minSwap;\r\n\r\n    bool public paused;\r\n    bool public swapping;\r\n\r\n    ERC721Like public habibi;\r\n\r\n    mapping(address => uint256) public balanceOf;\r\n\r\n    mapping(address => mapping(address => uint256)) public allowance;\r\n\r\n    mapping(address => bool) public isMinter;\r\n\r\n    mapping(uint256 => uint256) public claims;\r\n\r\n    /*///////////////////////////////////////////////////////////////\r\n                             METADATA STORAGE\r\n    //////////////////////////////////////////////////////////////*/\r\n\r\n    function name() external pure returns (string memory) {\r\n        return \"OIL\";\r\n    }\r\n\r\n    function symbol() external pure returns (string memory) {\r\n        return \"OIL\";\r\n    }\r\n    \r\n    function decimals() external pure returns (uint8) {\r\n        return 18;\r\n    }\r\n\r\n    /*///////////////////////////////////////////////////////////////\r\n                              ERC20 LOGIC\r\n    //////////////////////////////////////////////////////////////*/\r\n\r\n    \r\n    function initialize(address habibi_,address treasury_, address uniPair_, address weth_) external { \r\n        require(msg.sender == ruler);\r\n       \r\n        ruler    = msg.sender;  \r\n        treasury = treasury_;\r\n        uniPair  = uniPair_;\r\n        weth     = weth_;\r\n\r\n        startingTime = 1640707200;\r\n        baseTax      = 10_000; // 10% in basis point\r\n        habibi       = ERC721Like(habibi_);\r\n    }\r\n\r\n    function approve(address spender, uint256 value) external returns (bool) {\r\n        allowance[msg.sender][spender] = value;\r\n\r\n        emit Approval(msg.sender, spender, value);\r\n\r\n        return true;\r\n    }\r\n\r\n    function transfer(address to, uint256 value) external returns (bool) {\r\n        _transfer(msg.sender, to, value);\r\n\r\n        return true;\r\n    }\r\n\r\n    function transferFrom(\r\n        address from,\r\n        address to,\r\n        uint256 value\r\n    ) external returns (bool) {\r\n        if (allowance[from][msg.sender] != type(uint256).max) {\r\n            allowance[from][msg.sender] -= value;\r\n        }\r\n\r\n        _transfer(from, to, value);\r\n\r\n        return true;\r\n    }\r\n\r\n    /*///////////////////////////////////////////////////////////////\r\n                              CLAIM\r\n    //////////////////////////////////////////////////////////////*/\r\n\r\n    function claim(uint256 id_) public {\r\n        require(!paused || msg.sender == ruler, \"claims are paused\");\r\n\r\n        address owner = habibi.ownerOf(id_);\r\n        require(owner != address(0), \"token does not exist\");\r\n\r\n        uint256 amount = _claimable(id_, owner);\r\n        \r\n        claims[id_] = block.timestamp;\r\n\r\n        _mint(owner, amount);\r\n    }\r\n\r\n    function claimMany(uint256[] calldata ids_) external {\r\n        for (uint256 i = 0; i < ids_.length; i++) {\r\n            claim(ids_[i]);\r\n        }\r\n    }\r\n\r\n    function claimable(uint256 id) public view returns (uint256) {\r\n        return _claimable(id, habibi.ownerOf(id));\r\n    }\r\n\r\n    function _claimable(uint256 id_, address owner_) internal view returns (uint256 amount) {\r\n        uint256 lastClaim = claims[id_];\r\n        uint256 diff      = block.timestamp - (lastClaim == 0 ? startingTime : lastClaim);\r\n        uint256 balance   = habibi.balanceOf(owner_);\r\n        uint256 base      = diff * 1000 ether / 1 days;\r\n        \r\n        amount    = base + ((_getBonusPct(id_, balance) * base * 1e16) / 1e18);\r\n    }\r\n\r\n    /*///////////////////////////////////////////////////////////////\r\n                            OIL PRIVILEGE\r\n    //////////////////////////////////////////////////////////////*/\r\n\r\n    function mint(address to, uint256 value) external {\r\n        require(isMinter[msg.sender], \"FORBIDDEN TO MINT\");\r\n        _mint(to, value);\r\n    }\r\n\r\n    function burn(address from, uint256 value) external {\r\n        require(isMinter[msg.sender], \"FORBIDDEN TO BURN\");\r\n        _burn(from, value);\r\n    }\r\n\r\n    /*///////////////////////////////////////////////////////////////\r\n                         Ruler Function\r\n    //////////////////////////////////////////////////////////////*/\r\n\r\n    function setMinter(address minter, bool status) external {\r\n        require(msg.sender == ruler, \"NOT ALLOWED TO RULE\");\r\n\r\n        isMinter[minter] = status;\r\n    }\r\n\r\n    function setRuler(address ruler_) external {\r\n        require(msg.sender == ruler, \"NOT ALLOWED TO RULE\");\r\n\r\n        ruler = ruler_;\r\n    }\r\n\r\n    function setPaused(bool paused_) external {\r\n        require(msg.sender == ruler, \"NOT ALLOWED TO RULE\");\r\n\r\n        paused = paused_;\r\n    }\r\n\r\n    /*///////////////////////////////////////////////////////////////\r\n                          INTERNAL UTILS\r\n    //////////////////////////////////////////////////////////////*/\r\n\r\n    function _transfer(address from, address to, uint256 value) internal {\r\n        \r\n        uint256 tax = 0;\r\n        if ((to == uniPair || from == uniPair) && !swapping && balanceOf[uniPair] != 0) {\r\n            tax = value * 10_000 / 100_000;\r\n            \r\n            if (to == uniPair) {\r\n                swapping = true;\r\n                _doSwap(tax);\r\n                swapping = false;\r\n            } else {\r\n                totalSupply -= tax;\r\n                emit Transfer(uniPair, address(0), tax);\r\n            }\r\n        }\r\n\r\n        balanceOf[from] -= value;\r\n        balanceOf[to]   += value - tax;\r\n\r\n        emit Transfer(from, to, value - tax);\r\n    }\r\n\r\n    function _doSwap(uint256 amt) internal {\r\n        UniPairLike pair = UniPairLike(uniPair);\r\n        \r\n        (uint256 amount0Out, uint256 amount1Out) = (0,0);\r\n\r\n        uint256 wethBal    = ERC721Like(weth).balanceOf(uniPair);\r\n        uint256 amtWithFee = amt * 997;\r\n        uint256 amtOut     = (wethBal * amtWithFee) / (balanceOf[uniPair] * 1000 + amtWithFee);\r\n\r\n        if (amtOut < minSwap) {\r\n            // If it's too little amt, we just burn it\r\n            totalSupply -= amt;\r\n            emit Transfer(uniPair, address(0), amt);\r\n            return;\r\n        }\r\n\r\n        if (pair.token0() == address(this)) {\r\n            amount1Out = amtOut;\r\n        } else {\r\n            amount0Out = amtOut;\r\n        }\r\n\r\n        balanceOf[uniPair] += amt;\r\n        pair.swap(amount0Out, amount1Out, treasury, new bytes(0));\r\n    }\r\n\r\n    function _mint(address to, uint256 value) internal {\r\n        totalSupply += value;\r\n\r\n        // This is safe because the sum of all user\r\n        // balances can't exceed type(uint256).max!\r\n        unchecked {\r\n            balanceOf[to] += value;\r\n        }\r\n\r\n        emit Transfer(address(0), to, value);\r\n    }\r\n\r\n    function _burn(address from, uint256 value) internal {\r\n        balanceOf[from] -= value;\r\n\r\n        // This is safe because a user won't ever\r\n        // have a balance larger than totalSupply!\r\n        unchecked {\r\n            totalSupply -= value;\r\n        }\r\n\r\n        emit Transfer(from, address(0), value);\r\n    }\r\n\r\n    function _getBonusPct(uint256 id_, uint256 balance) internal pure returns (uint256 bonus) {\r\n        if (_isAnimated(id_)) return 500;\r\n\r\n        if (balance < 5) return 0;\r\n        if (balance < 10) return 15;\r\n        if (balance < 20) return 25;\r\n        return 35;\r\n    }\r\n\r\n    function _isAnimated(uint256 id_) internal pure returns(bool animated) {\r\n        if ( id_ == 40)   return true;\r\n        if ( id_ == 108)  return true;\r\n        if ( id_ == 169)  return true;\r\n        if ( id_ == 191)  return true;\r\n        if ( id_ == 246)  return true;\r\n        if ( id_ == 257)  return true;\r\n        if ( id_ == 319)  return true;\r\n        if ( id_ == 386)  return true;\r\n        if ( id_ == 496)  return true;\r\n        if ( id_ == 562)  return true;\r\n        if ( id_ == 637)  return true;\r\n        if ( id_ == 692)  return true;\r\n        if ( id_ == 832)  return true;\r\n        if ( id_ == 942)  return true;\r\n        if ( id_ == 943)  return true;\r\n        if ( id_ == 957)  return true;\r\n        if ( id_ == 1100) return true;\r\n        if ( id_ == 1108) return true;\r\n        if ( id_ == 1169) return true;\r\n        if ( id_ == 1178) return true;\r\n        if ( id_ == 1627) return true;\r\n        if ( id_ == 1706) return true;\r\n        if ( id_ == 1843) return true;\r\n        if ( id_ == 1884) return true;\r\n        if ( id_ == 2137) return true;  \r\n        if ( id_ == 2158) return true;\r\n        if ( id_ == 2165) return true;\r\n        if ( id_ == 2214) return true;\r\n        if ( id_ == 2232) return true;\r\n        if ( id_ == 2238) return true;\r\n        if ( id_ == 2508) return true;\r\n        if ( id_ == 2629) return true;\r\n        if ( id_ == 2863) return true;\r\n        if ( id_ == 3055) return true;\r\n        if ( id_ == 3073) return true;\r\n        if ( id_ == 3280) return true;\r\n        if ( id_ == 3297) return true;\r\n        if ( id_ == 3322) return true;\r\n        if ( id_ == 3327) return true;\r\n        if ( id_ == 3361) return true;\r\n        if ( id_ == 3411) return true;\r\n        if ( id_ == 3605) return true;\r\n        if ( id_ == 3639) return true;\r\n        if ( id_ == 3774) return true;\r\n        if ( id_ == 4250) return true;\r\n        if ( id_ == 4267) return true;\r\n        if ( id_ == 4302) return true;\r\n        if ( id_ == 4362) return true;\r\n        if ( id_ == 4382) return true;\r\n        if ( id_ == 4397) return true;\r\n        if ( id_ == 4675) return true;\r\n        if ( id_ == 4707) return true;\r\n        if ( id_ == 4863) return true;\r\n        return false;\r\n    }\r\n\r\n}\r\n\r\ninterface ERC721Like {\r\n    function balanceOf(address holder_) external view returns(uint256);\r\n    function ownerOf(uint256 id_) external view returns(address);\r\n}\r\n\r\ninterface UniPairLike {\r\n    function token0() external returns (address);\r\n    function swap(uint amount0Out, uint amount1Out, address to, bytes calldata data) external;\r\n    function getReserves() external view returns (uint112 reserve0, uint112 reserve1, uint32 blockTimestampLast);\r\n}","ABI":"[{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Approval\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Transfer\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"allowance\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"approve\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"baseTax\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"burn\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"id_\",\"type\":\"uint256\"}],\"name\":\"claim\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256[]\",\"name\":\"ids_\",\"type\":\"uint256[]\"}],\"name\":\"claimMany\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"id\",\"type\":\"uint256\"}],\"name\":\"claimable\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"claims\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"decimals\",\"outputs\":[{\"internalType\":\"uint8\",\"name\":\"\",\"type\":\"uint8\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"habibi\",\"outputs\":[{\"internalType\":\"contract ERC721Like\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"impl_\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"habibi_\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"treasury_\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"uniPair_\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"weth_\",\"type\":\"address\"}],\"name\":\"initialize\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"isMinter\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"minSwap\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"mint\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"name\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"paused\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"ruler\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"minter\",\"type\":\"address\"},{\"internalType\":\"bool\",\"name\":\"status\",\"type\":\"bool\"}],\"name\":\"setMinter\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bool\",\"name\":\"paused_\",\"type\":\"bool\"}],\"name\":\"setPaused\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"ruler_\",\"type\":\"address\"}],\"name\":\"setRuler\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"startingTime\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"swapping\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"symbol\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalSupply\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"transfer\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"transferFrom\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"treasury\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"uniPair\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"weth\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"}]","ContractName":"Oil","CompilerVersion":"v0.8.7+commit.e28d00a7","OptimizationUsed":"1","Runs":"200","ConstructorArguments":"","EVMVersion":"Default","Library":"","LicenseType":"MIT","Proxy":"0","Implementation":"","SwarmSource":"ipfs://8dd74f9a8a6fa8bbae2ccf6084195512a8185e096a8e12b2883531e16de24c6e"}]}