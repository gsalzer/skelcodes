{"status":"1","message":"OK","result":[{"SourceCode":"{{\r\n  \"language\": \"Solidity\",\r\n  \"sources\": {\r\n    \"/contracts/cryptofoxes/CryptoFoxesCalculationV2.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\r\\npragma solidity ^0.8.0;\\r\\n\\r\\nimport \\\"./interfaces/ICryptoFoxesOrigins.sol\\\";\\r\\nimport \\\"./interfaces/ICryptoFoxesStakingV2.sol\\\";\\r\\nimport \\\"./interfaces/ICryptoFoxesCalculationOrigin.sol\\\";\\r\\nimport \\\"./interfaces/ICryptoFoxesCalculationV2.sol\\\";\\r\\nimport \\\"./interfaces/ICryptoFoxesStakingStruct.sol\\\";\\r\\nimport \\\"@openzeppelin/contracts/token/ERC721/IERC721.sol\\\";\\r\\nimport \\\"./CryptoFoxesUtility.sol\\\";\\r\\nimport \\\"@openzeppelin/contracts/security/ReentrancyGuard.sol\\\";\\r\\nimport \\\"@openzeppelin/contracts/access/Ownable.sol\\\";\\r\\n\\r\\n// @author: miinded.com\\r\\n\\r\\ncontract CryptoFoxesCalculationV2 is Ownable, ICryptoFoxesCalculationV2, ICryptoFoxesStakingStruct, ICryptoFoxesCalculationOrigin, CryptoFoxesUtility, ReentrancyGuard {\\r\\n    uint256 public constant BASE_RATE_ORIGIN = 6 * 10**18;\\r\\n    uint256 public constant BASE_RATE_V2 = 1 * 10**18;\\r\\n    uint256 public BONUS_MAX_OWNED = 2; // 0.2\\r\\n\\r\\n    address public cryptoFoxesOrigin;\\r\\n    address public cryptoFoxesStakingV2;\\r\\n\\r\\n    function setCryptoFoxesOrigin(address _contract) public onlyOwner{\\r\\n        if(cryptoFoxesOrigin != address(0)) {\\r\\n            setAllowedContract(cryptoFoxesOrigin, false);\\r\\n        }\\r\\n        setAllowedContract(_contract, true);\\r\\n        cryptoFoxesOrigin = _contract;\\r\\n    }\\r\\n\\r\\n    function setCryptoFoxesStakingV2(address _contract) public onlyOwner{\\r\\n        if(cryptoFoxesStakingV2 != address(0)) {\\r\\n            setAllowedContract(cryptoFoxesStakingV2, false);\\r\\n        }\\r\\n        setAllowedContract(_contract, true);\\r\\n        cryptoFoxesStakingV2 = _contract;\\r\\n    }\\r\\n\\r\\n    function calculationRewards(address _contract, uint256[] memory _tokenIds, uint256 _currentTimestamp) public override view returns(uint256){\\r\\n\\r\\n        if(_tokenIds.length <= 0){ return 0; }\\r\\n\\r\\n        address ownerOrigin = IERC721(_contract).ownerOf(_tokenIds[0]);\\r\\n        uint256 _currentTime = ICryptoFoxesOrigins(_contract)._currentTime(_currentTimestamp);\\r\\n\\r\\n        uint256 totalRewards = 0;\\r\\n\\r\\n        unchecked {\\r\\n            for (uint8 i = 0; i < _tokenIds.length; i++) {\\r\\n                if(_tokenIds[i] > 1000) continue;\\r\\n                for (uint8 j = 0; j < i; j++) {\\r\\n                    require(_tokenIds[j] != _tokenIds[i], \\\"Duplicate id\\\");\\r\\n                }\\r\\n\\r\\n                uint256 stackTime = ICryptoFoxesOrigins(_contract).getStackingToken(_tokenIds[i]);\\r\\n                stackTime = stackTime == 0 ? block.timestamp - 5 days : stackTime;\\r\\n                if (_currentTime > stackTime) {\\r\\n                    totalRewards += (_currentTime - stackTime) * BASE_RATE_ORIGIN;\\r\\n                }\\r\\n\\r\\n                // calcul des V2\\r\\n                uint8 maxSlotsOrigin = ICryptoFoxesStakingV2(cryptoFoxesStakingV2).getOriginMaxSlot(uint16(_tokenIds[i]));\\r\\n                Staking[] memory foxesV2 = ICryptoFoxesStakingV2(cryptoFoxesStakingV2).getV2ByOrigin(uint16(_tokenIds[i]));\\r\\n                uint256 numberTokensOwner = 0;\\r\\n                uint256 calculation = 0;\\r\\n                for(uint8 k = 0; k < foxesV2.length; k++){\\r\\n                    // calcul\\r\\n                    calculation += (_currentTime - max(stackTime, foxesV2[k].timestampV2) ) * BASE_RATE_V2;\\r\\n\\r\\n                    if(ownerOrigin == foxesV2[k].owner){\\r\\n                        numberTokensOwner += 1;\\r\\n                    }\\r\\n                }\\r\\n\\r\\n                totalRewards += calculation;\\r\\n\\r\\n                if(numberTokensOwner == foxesV2.length && numberTokensOwner == maxSlotsOrigin){\\r\\n                    totalRewards += calculation * BONUS_MAX_OWNED / 10;\\r\\n                }\\r\\n            }\\r\\n        }\\r\\n\\r\\n        return totalRewards / 86400;\\r\\n    }\\r\\n\\r\\n    function claimRewards(address _contract, uint256[] memory _tokenIds, address _owner) public override isFoxContract nonReentrant {\\r\\n        require(!isPaused(), \\\"Contract paused\\\");\\r\\n\\r\\n        uint256 reward = calculationRewards(_contract, _tokenIds, block.timestamp);\\r\\n        _addRewards(_owner, reward);\\r\\n        _withdrawRewards(_owner);\\r\\n    }\\r\\n\\r\\n    function calculationRewardsV2(address _contract, uint16[] memory _tokenIds, uint256 _currentTimestamp) public override view returns(uint256){\\r\\n        uint256 _currentTime = ICryptoFoxesStakingV2(_contract)._currentTime(_currentTimestamp);\\r\\n        uint256 totalSeconds = 0;\\r\\n        unchecked {\\r\\n            for (uint8 i = 0; i < _tokenIds.length; i++) {\\r\\n\\r\\n                for (uint16 j = 0; j < i; j++) {\\r\\n                    require(_tokenIds[j] != _tokenIds[i], \\\"Duplicate id\\\");\\r\\n                }\\r\\n\\r\\n                uint256 stackTime = ICryptoFoxesStakingV2(_contract).getStakingTokenV2(_tokenIds[i]);\\r\\n\\r\\n                if (_currentTime > stackTime) {\\r\\n                    totalSeconds += _currentTime - stackTime;\\r\\n                }\\r\\n            }\\r\\n        }\\r\\n\\r\\n        return (BASE_RATE_V2 * totalSeconds) / 86400;\\r\\n    }\\r\\n\\r\\n    function claimRewardsV2(address _contract, uint16[] memory _tokenIds, address _owner) public override isFoxContract nonReentrant {\\r\\n        require(!isPaused(), \\\"Contract paused\\\");\\r\\n\\r\\n        uint256 rewardV2 = 0;\\r\\n        uint256 _currentTime = ICryptoFoxesStakingV2(_contract)._currentTime(block.timestamp);\\r\\n\\r\\n        unchecked {\\r\\n            for (uint8 i = 0; i < _tokenIds.length; i++) {\\r\\n\\r\\n                uint256 stackTimeV2 = ICryptoFoxesStakingV2(_contract).getStakingTokenV2(_tokenIds[i]);\\r\\n\\r\\n                uint16 origin = ICryptoFoxesStakingV2(_contract).getOriginByV2( _tokenIds[i] );\\r\\n                uint256 stackTimeOrigin = ICryptoFoxesOrigins(cryptoFoxesOrigin).getStackingToken(origin);\\r\\n                address ownerOrigin = IERC721(cryptoFoxesOrigin).ownerOf( origin );\\r\\n\\r\\n                if (_currentTime > stackTimeV2) {\\r\\n                    rewardV2 += (BASE_RATE_V2 * (_currentTime - stackTimeV2)) / 86400;\\r\\n                    _addRewards(ownerOrigin, (BASE_RATE_V2 * (_currentTime - max(stackTimeOrigin, stackTimeV2) )) / 86400);\\r\\n                }\\r\\n            }\\r\\n        }\\r\\n\\r\\n        _addRewards(_owner, rewardV2);\\r\\n        _withdrawRewards(_owner);\\r\\n    }\\r\\n\\r\\n    function claimMoveRewardsOrigin(address _contract, uint16 _tokenId, address _ownerOrigin) public override isFoxContract nonReentrant {\\r\\n        uint256 _currentTime = ICryptoFoxesStakingV2(_contract)._currentTime(block.timestamp);\\r\\n\\r\\n        uint16 origin = ICryptoFoxesStakingV2(_contract).getOriginByV2( _tokenId );\\r\\n        Staking memory foxesV2 = ICryptoFoxesStakingV2(_contract).getFoxesV2( _tokenId );\\r\\n        uint256 stackTimeOrigin = ICryptoFoxesOrigins(cryptoFoxesOrigin).getStackingToken(origin);\\r\\n        uint256 stackTimeV2 = ICryptoFoxesStakingV2(_contract).getStakingTokenV2(_tokenId);\\r\\n\\r\\n        _addRewards(foxesV2.owner, (BASE_RATE_V2 * (_currentTime - stackTimeV2 )) / 86400);\\r\\n        _addRewards(_ownerOrigin, (BASE_RATE_V2 * (_currentTime - max(stackTimeOrigin, stackTimeV2) )) / 86400);\\r\\n    }\\r\\n\\r\\n    function calculationOriginDay(uint16 _tokenId) public view returns(uint256){\\r\\n\\r\\n        address ownerOrigin = IERC721(cryptoFoxesOrigin).ownerOf(uint256(_tokenId));\\r\\n        uint8 maxSlotsOrigin = ICryptoFoxesStakingV2(cryptoFoxesStakingV2).getOriginMaxSlot(uint16(_tokenId));\\r\\n        Staking[] memory foxesV2 = ICryptoFoxesStakingV2(cryptoFoxesStakingV2).getV2ByOrigin(uint16(_tokenId));\\r\\n\\r\\n        uint256 numberTokensOwner = 0;\\r\\n        uint256 calculationV2 = 0;\\r\\n\\r\\n        for(uint8 k = 0; k < foxesV2.length; k++){\\r\\n\\r\\n            calculationV2 += BASE_RATE_V2;\\r\\n\\r\\n            if(ownerOrigin == foxesV2[k].owner){\\r\\n                numberTokensOwner += 1;\\r\\n            }\\r\\n        }\\r\\n        if(numberTokensOwner == foxesV2.length && numberTokensOwner == maxSlotsOrigin){\\r\\n            calculationV2 += calculationV2 * BONUS_MAX_OWNED / 10;\\r\\n        }\\r\\n\\r\\n        return BASE_RATE_ORIGIN + calculationV2;\\r\\n    }\\r\\n}\"\r\n    },\r\n    \"/contracts/cryptofoxes/interfaces/ICryptoFoxesSteak.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\r\\npragma solidity ^0.8.0;\\r\\n\\r\\n// @author: miinded.com\\r\\n\\r\\ninterface ICryptoFoxesSteak {\\r\\n    function addRewards(address _to, uint256 _amount) external;\\r\\n    function withdrawRewards(address _to) external;\\r\\n    function isPaused() external view returns(bool);\\r\\n    function dateEndRewards() external view returns(uint256);\\r\\n}\"\r\n    },\r\n    \"/contracts/cryptofoxes/interfaces/ICryptoFoxesStakingV2.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\r\\npragma solidity ^0.8.0;\\r\\n\\r\\n// @author: miinded.com\\r\\nimport \\\"./ICryptoFoxesStakingStruct.sol\\\";\\r\\n\\r\\ninterface ICryptoFoxesStakingV2 is ICryptoFoxesStakingStruct  {\\r\\n    function getFoxesV2(uint16 _tokenId) external view returns(Staking memory);\\r\\n    function getOriginMaxSlot(uint16 _tokenIdOrigin) external view returns(uint8);\\r\\n    function getStakingTokenV2(uint16 _tokenId) external view returns(uint256);\\r\\n    function getV2ByOrigin(uint16 _tokenIdOrigin) external view returns(Staking[] memory);\\r\\n    function getOriginByV2(uint16 _tokenId) external view returns(uint16);\\r\\n    function unlockSlot(uint16 _tokenId, uint8 _count) external;\\r\\n    function _currentTime(uint256 _currentTimestamp) external view returns(uint256);\\r\\n}\"\r\n    },\r\n    \"/contracts/cryptofoxes/interfaces/ICryptoFoxesStakingStruct.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\r\\npragma solidity ^0.8.0;\\r\\n\\r\\n// @author: miinded.com\\r\\n\\r\\ninterface ICryptoFoxesStakingStruct {\\r\\n\\r\\n    struct Staking {\\r\\n        uint8 slotIndex;\\r\\n        uint16 tokenId;\\r\\n        uint16 origin;\\r\\n        uint64 timestampV2;\\r\\n        address owner;\\r\\n    }\\r\\n\\r\\n    struct Origin{\\r\\n        uint8 maxSlots;\\r\\n        uint16[] stacked;\\r\\n    }\\r\\n\\r\\n}\"\r\n    },\r\n    \"/contracts/cryptofoxes/interfaces/ICryptoFoxesOrigins.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\r\\npragma solidity ^0.8.0;\\r\\n\\r\\n// @author: miinded.com\\r\\n\\r\\ninterface ICryptoFoxesOrigins {\\r\\n    function getStackingToken(uint256 tokenId) external view returns(uint256);\\r\\n    function _currentTime(uint256 _currentTimestamp) external view returns(uint256);\\r\\n}\"\r\n    },\r\n    \"/contracts/cryptofoxes/interfaces/ICryptoFoxesCalculationV2.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\r\\npragma solidity ^0.8.0;\\r\\n\\r\\n// @author: miinded.com\\r\\n\\r\\ninterface ICryptoFoxesCalculationV2 {\\r\\n    function calculationRewardsV2(address _contract, uint16[] calldata _tokenIds, uint256 _currentTimestamp) external view returns(uint256);\\r\\n    function claimRewardsV2(address _contract, uint16[] calldata _tokenIds, address _owner) external;\\r\\n    function claimMoveRewardsOrigin(address _contract, uint16 _tokenId, address _ownerOrigin) external;\\r\\n}\"\r\n    },\r\n    \"/contracts/cryptofoxes/interfaces/ICryptoFoxesCalculationOrigin.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\r\\npragma solidity ^0.8.0;\\r\\n\\r\\n// @author: miinded.com\\r\\n\\r\\ninterface ICryptoFoxesCalculationOrigin {\\r\\n    function calculationRewards(address _contract, uint256[] calldata _tokenIds, uint256 _currentTimestamp) external view returns(uint256);\\r\\n    function claimRewards(address _contract, uint256[] calldata _tokenIds, address _owner) external;\\r\\n}\"\r\n    },\r\n    \"/contracts/cryptofoxes/CryptoFoxesUtility.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\r\\npragma solidity ^0.8.0;\\r\\n\\r\\nimport \\\"@openzeppelin/contracts/utils/math/SafeMath.sol\\\";\\r\\nimport \\\"@openzeppelin/contracts/access/Ownable.sol\\\";\\r\\nimport \\\"./interfaces/ICryptoFoxesSteak.sol\\\";\\r\\nimport \\\"./CryptoFoxesAllowed.sol\\\";\\r\\n\\r\\n// @author: miinded.com\\r\\n\\r\\nabstract contract CryptoFoxesUtility is Ownable,CryptoFoxesAllowed, ICryptoFoxesSteak {\\r\\n    using SafeMath for uint256;\\r\\n\\r\\n    uint256 public endRewards = 0;\\r\\n    ICryptoFoxesSteak public cryptofoxesSteak;\\r\\n    bool public disablePublicFunctions = false;\\r\\n\\r\\n    function setCryptoFoxesSteak(address _contract) public onlyOwner {\\r\\n        cryptofoxesSteak = ICryptoFoxesSteak(_contract);\\r\\n        setAllowedContract(_contract, true);\\r\\n        synchroEndRewards();\\r\\n    }\\r\\n    function _addRewards(address _to, uint256 _amount) internal {\\r\\n        cryptofoxesSteak.addRewards(_to, _amount);\\r\\n    }\\r\\n    function addRewards(address _to, uint256 _amount) public override isFoxContract  {\\r\\n        _addRewards(_to, _amount);\\r\\n    }\\r\\n    function withdrawRewards(address _to) public override isFoxContract {\\r\\n        cryptofoxesSteak.withdrawRewards(_to);\\r\\n    }\\r\\n    function _withdrawRewards(address _to) internal {\\r\\n        cryptofoxesSteak.withdrawRewards(_to);\\r\\n    }\\r\\n    function isPaused() public view override returns(bool){\\r\\n        return cryptofoxesSteak.isPaused();\\r\\n    }\\r\\n    function synchroEndRewards() public {\\r\\n        endRewards = cryptofoxesSteak.dateEndRewards();\\r\\n    }\\r\\n    function dateEndRewards() public view override returns(uint256){\\r\\n        require(endRewards > 0, \\\"End Rewards error\\\");\\r\\n        return endRewards;\\r\\n    }\\r\\n    function _currentTime(uint256 _currentTimestamp) public view virtual returns (uint256) {\\r\\n        return min(_currentTimestamp, dateEndRewards());\\r\\n    }\\r\\n    function min(uint256 a, uint256 b) public pure returns (uint256){\\r\\n        return a > b ? b : a;\\r\\n    }\\r\\n    function max(uint256 a, uint256 b) public pure returns (uint256){\\r\\n        return a > b ? a : b;\\r\\n    }\\r\\n    function setDisablePublicFunctions(bool _toggle) public isFoxContractOrOwner{\\r\\n        disablePublicFunctions = _toggle;\\r\\n    }\\r\\n}\"\r\n    },\r\n    \"/contracts/cryptofoxes/CryptoFoxesAllowed.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\r\\npragma solidity ^0.8.0;\\r\\n\\r\\nimport \\\"@openzeppelin/contracts/utils/math/SafeMath.sol\\\";\\r\\nimport \\\"@openzeppelin/contracts/access/Ownable.sol\\\";\\r\\nimport \\\"./interfaces/ICryptoFoxesSteak.sol\\\";\\r\\n\\r\\n// @author: miinded.com\\r\\n\\r\\nabstract contract CryptoFoxesAllowed is Ownable {\\r\\n\\r\\n    mapping (address => bool) public allowedContracts;\\r\\n\\r\\n    modifier isFoxContract() {\\r\\n        require(allowedContracts[_msgSender()] == true, \\\"Not allowed\\\");\\r\\n        _;\\r\\n    }\\r\\n    \\r\\n    modifier isFoxContractOrOwner() {\\r\\n        require(allowedContracts[_msgSender()] == true || _msgSender() == owner(), \\\"Not allowed\\\");\\r\\n        _;\\r\\n    }\\r\\n\\r\\n    function setAllowedContract(address _contract, bool _allowed) public onlyOwner {\\r\\n        allowedContracts[_contract] = _allowed;\\r\\n    }\\r\\n\\r\\n}\"\r\n    },\r\n    \"@openzeppelin/contracts/utils/math/SafeMath.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.0 (utils/math/SafeMath.sol)\\n\\npragma solidity ^0.8.0;\\n\\n// CAUTION\\n// This version of SafeMath should only be used with Solidity 0.8 or later,\\n// because it relies on the compiler's built in overflow checks.\\n\\n/**\\n * @dev Wrappers over Solidity's arithmetic operations.\\n *\\n * NOTE: `SafeMath` is generally not needed starting with Solidity 0.8, since the compiler\\n * now has built in overflow checking.\\n */\\nlibrary SafeMath {\\n    /**\\n     * @dev Returns the addition of two unsigned integers, with an overflow flag.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function tryAdd(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        unchecked {\\n            uint256 c = a + b;\\n            if (c < a) return (false, 0);\\n            return (true, c);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the substraction of two unsigned integers, with an overflow flag.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function trySub(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        unchecked {\\n            if (b > a) return (false, 0);\\n            return (true, a - b);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the multiplication of two unsigned integers, with an overflow flag.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function tryMul(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        unchecked {\\n            // Gas optimization: this is cheaper than requiring 'a' not being zero, but the\\n            // benefit is lost if 'b' is also tested.\\n            // See: https://github.com/OpenZeppelin/openzeppelin-contracts/pull/522\\n            if (a == 0) return (true, 0);\\n            uint256 c = a * b;\\n            if (c / a != b) return (false, 0);\\n            return (true, c);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the division of two unsigned integers, with a division by zero flag.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function tryDiv(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        unchecked {\\n            if (b == 0) return (false, 0);\\n            return (true, a / b);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the remainder of dividing two unsigned integers, with a division by zero flag.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function tryMod(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        unchecked {\\n            if (b == 0) return (false, 0);\\n            return (true, a % b);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the addition of two unsigned integers, reverting on\\n     * overflow.\\n     *\\n     * Counterpart to Solidity's `+` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Addition cannot overflow.\\n     */\\n    function add(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a + b;\\n    }\\n\\n    /**\\n     * @dev Returns the subtraction of two unsigned integers, reverting on\\n     * overflow (when the result is negative).\\n     *\\n     * Counterpart to Solidity's `-` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Subtraction cannot overflow.\\n     */\\n    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a - b;\\n    }\\n\\n    /**\\n     * @dev Returns the multiplication of two unsigned integers, reverting on\\n     * overflow.\\n     *\\n     * Counterpart to Solidity's `*` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Multiplication cannot overflow.\\n     */\\n    function mul(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a * b;\\n    }\\n\\n    /**\\n     * @dev Returns the integer division of two unsigned integers, reverting on\\n     * division by zero. The result is rounded towards zero.\\n     *\\n     * Counterpart to Solidity's `/` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - The divisor cannot be zero.\\n     */\\n    function div(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a / b;\\n    }\\n\\n    /**\\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\\n     * reverting when dividing by zero.\\n     *\\n     * Counterpart to Solidity's `%` operator. This function uses a `revert`\\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\\n     * invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Requirements:\\n     *\\n     * - The divisor cannot be zero.\\n     */\\n    function mod(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a % b;\\n    }\\n\\n    /**\\n     * @dev Returns the subtraction of two unsigned integers, reverting with custom message on\\n     * overflow (when the result is negative).\\n     *\\n     * CAUTION: This function is deprecated because it requires allocating memory for the error\\n     * message unnecessarily. For custom revert reasons use {trySub}.\\n     *\\n     * Counterpart to Solidity's `-` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Subtraction cannot overflow.\\n     */\\n    function sub(\\n        uint256 a,\\n        uint256 b,\\n        string memory errorMessage\\n    ) internal pure returns (uint256) {\\n        unchecked {\\n            require(b <= a, errorMessage);\\n            return a - b;\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the integer division of two unsigned integers, reverting with custom message on\\n     * division by zero. The result is rounded towards zero.\\n     *\\n     * Counterpart to Solidity's `/` operator. Note: this function uses a\\n     * `revert` opcode (which leaves remaining gas untouched) while Solidity\\n     * uses an invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Requirements:\\n     *\\n     * - The divisor cannot be zero.\\n     */\\n    function div(\\n        uint256 a,\\n        uint256 b,\\n        string memory errorMessage\\n    ) internal pure returns (uint256) {\\n        unchecked {\\n            require(b > 0, errorMessage);\\n            return a / b;\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\\n     * reverting with custom message when dividing by zero.\\n     *\\n     * CAUTION: This function is deprecated because it requires allocating memory for the error\\n     * message unnecessarily. For custom revert reasons use {tryMod}.\\n     *\\n     * Counterpart to Solidity's `%` operator. This function uses a `revert`\\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\\n     * invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Requirements:\\n     *\\n     * - The divisor cannot be zero.\\n     */\\n    function mod(\\n        uint256 a,\\n        uint256 b,\\n        string memory errorMessage\\n    ) internal pure returns (uint256) {\\n        unchecked {\\n            require(b > 0, errorMessage);\\n            return a % b;\\n        }\\n    }\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/utils/introspection/IERC165.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.0 (utils/introspection/IERC165.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC165 standard, as defined in the\\n * https://eips.ethereum.org/EIPS/eip-165[EIP].\\n *\\n * Implementers can declare support of contract interfaces, which can then be\\n * queried by others ({ERC165Checker}).\\n *\\n * For an implementation, see {ERC165}.\\n */\\ninterface IERC165 {\\n    /**\\n     * @dev Returns true if this contract implements the interface defined by\\n     * `interfaceId`. See the corresponding\\n     * https://eips.ethereum.org/EIPS/eip-165#how-interfaces-are-identified[EIP section]\\n     * to learn more about how these ids are created.\\n     *\\n     * This function call must use less than 30 000 gas.\\n     */\\n    function supportsInterface(bytes4 interfaceId) external view returns (bool);\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/utils/Context.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.0 (utils/Context.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Provides information about the current execution context, including the\\n * sender of the transaction and its data. While these are generally available\\n * via msg.sender and msg.data, they should not be accessed in such a direct\\n * manner, since when dealing with meta-transactions the account sending and\\n * paying for execution may not be the actual sender (as far as an application\\n * is concerned).\\n *\\n * This contract is only required for intermediate, library-like contracts.\\n */\\nabstract contract Context {\\n    function _msgSender() internal view virtual returns (address) {\\n        return msg.sender;\\n    }\\n\\n    function _msgData() internal view virtual returns (bytes calldata) {\\n        return msg.data;\\n    }\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/token/ERC721/IERC721.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.0 (token/ERC721/IERC721.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../../utils/introspection/IERC165.sol\\\";\\n\\n/**\\n * @dev Required interface of an ERC721 compliant contract.\\n */\\ninterface IERC721 is IERC165 {\\n    /**\\n     * @dev Emitted when `tokenId` token is transferred from `from` to `to`.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 indexed tokenId);\\n\\n    /**\\n     * @dev Emitted when `owner` enables `approved` to manage the `tokenId` token.\\n     */\\n    event Approval(address indexed owner, address indexed approved, uint256 indexed tokenId);\\n\\n    /**\\n     * @dev Emitted when `owner` enables or disables (`approved`) `operator` to manage all of its assets.\\n     */\\n    event ApprovalForAll(address indexed owner, address indexed operator, bool approved);\\n\\n    /**\\n     * @dev Returns the number of tokens in ``owner``'s account.\\n     */\\n    function balanceOf(address owner) external view returns (uint256 balance);\\n\\n    /**\\n     * @dev Returns the owner of the `tokenId` token.\\n     *\\n     * Requirements:\\n     *\\n     * - `tokenId` must exist.\\n     */\\n    function ownerOf(uint256 tokenId) external view returns (address owner);\\n\\n    /**\\n     * @dev Safely transfers `tokenId` token from `from` to `to`, checking first that contract recipients\\n     * are aware of the ERC721 protocol to prevent tokens from being forever locked.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` cannot be the zero address.\\n     * - `to` cannot be the zero address.\\n     * - `tokenId` token must exist and be owned by `from`.\\n     * - If the caller is not `from`, it must be have been allowed to move this token by either {approve} or {setApprovalForAll}.\\n     * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function safeTransferFrom(\\n        address from,\\n        address to,\\n        uint256 tokenId\\n    ) external;\\n\\n    /**\\n     * @dev Transfers `tokenId` token from `from` to `to`.\\n     *\\n     * WARNING: Usage of this method is discouraged, use {safeTransferFrom} whenever possible.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` cannot be the zero address.\\n     * - `to` cannot be the zero address.\\n     * - `tokenId` token must be owned by `from`.\\n     * - If the caller is not `from`, it must be approved to move this token by either {approve} or {setApprovalForAll}.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(\\n        address from,\\n        address to,\\n        uint256 tokenId\\n    ) external;\\n\\n    /**\\n     * @dev Gives permission to `to` to transfer `tokenId` token to another account.\\n     * The approval is cleared when the token is transferred.\\n     *\\n     * Only a single account can be approved at a time, so approving the zero address clears previous approvals.\\n     *\\n     * Requirements:\\n     *\\n     * - The caller must own the token or be an approved operator.\\n     * - `tokenId` must exist.\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address to, uint256 tokenId) external;\\n\\n    /**\\n     * @dev Returns the account approved for `tokenId` token.\\n     *\\n     * Requirements:\\n     *\\n     * - `tokenId` must exist.\\n     */\\n    function getApproved(uint256 tokenId) external view returns (address operator);\\n\\n    /**\\n     * @dev Approve or remove `operator` as an operator for the caller.\\n     * Operators can call {transferFrom} or {safeTransferFrom} for any token owned by the caller.\\n     *\\n     * Requirements:\\n     *\\n     * - The `operator` cannot be the caller.\\n     *\\n     * Emits an {ApprovalForAll} event.\\n     */\\n    function setApprovalForAll(address operator, bool _approved) external;\\n\\n    /**\\n     * @dev Returns if the `operator` is allowed to manage all of the assets of `owner`.\\n     *\\n     * See {setApprovalForAll}\\n     */\\n    function isApprovedForAll(address owner, address operator) external view returns (bool);\\n\\n    /**\\n     * @dev Safely transfers `tokenId` token from `from` to `to`.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` cannot be the zero address.\\n     * - `to` cannot be the zero address.\\n     * - `tokenId` token must exist and be owned by `from`.\\n     * - If the caller is not `from`, it must be approved to move this token by either {approve} or {setApprovalForAll}.\\n     * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function safeTransferFrom(\\n        address from,\\n        address to,\\n        uint256 tokenId,\\n        bytes calldata data\\n    ) external;\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/security/ReentrancyGuard.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.0 (security/ReentrancyGuard.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Contract module that helps prevent reentrant calls to a function.\\n *\\n * Inheriting from `ReentrancyGuard` will make the {nonReentrant} modifier\\n * available, which can be applied to functions to make sure there are no nested\\n * (reentrant) calls to them.\\n *\\n * Note that because there is a single `nonReentrant` guard, functions marked as\\n * `nonReentrant` may not call one another. This can be worked around by making\\n * those functions `private`, and then adding `external` `nonReentrant` entry\\n * points to them.\\n *\\n * TIP: If you would like to learn more about reentrancy and alternative ways\\n * to protect against it, check out our blog post\\n * https://blog.openzeppelin.com/reentrancy-after-istanbul/[Reentrancy After Istanbul].\\n */\\nabstract contract ReentrancyGuard {\\n    // Booleans are more expensive than uint256 or any type that takes up a full\\n    // word because each write operation emits an extra SLOAD to first read the\\n    // slot's contents, replace the bits taken up by the boolean, and then write\\n    // back. This is the compiler's defense against contract upgrades and\\n    // pointer aliasing, and it cannot be disabled.\\n\\n    // The values being non-zero value makes deployment a bit more expensive,\\n    // but in exchange the refund on every call to nonReentrant will be lower in\\n    // amount. Since refunds are capped to a percentage of the total\\n    // transaction's gas, it is best to keep them low in cases like this one, to\\n    // increase the likelihood of the full refund coming into effect.\\n    uint256 private constant _NOT_ENTERED = 1;\\n    uint256 private constant _ENTERED = 2;\\n\\n    uint256 private _status;\\n\\n    constructor() {\\n        _status = _NOT_ENTERED;\\n    }\\n\\n    /**\\n     * @dev Prevents a contract from calling itself, directly or indirectly.\\n     * Calling a `nonReentrant` function from another `nonReentrant`\\n     * function is not supported. It is possible to prevent this from happening\\n     * by making the `nonReentrant` function external, and making it call a\\n     * `private` function that does the actual work.\\n     */\\n    modifier nonReentrant() {\\n        // On the first call to nonReentrant, _notEntered will be true\\n        require(_status != _ENTERED, \\\"ReentrancyGuard: reentrant call\\\");\\n\\n        // Any calls to nonReentrant after this point will fail\\n        _status = _ENTERED;\\n\\n        _;\\n\\n        // By storing the original value once again, a refund is triggered (see\\n        // https://eips.ethereum.org/EIPS/eip-2200)\\n        _status = _NOT_ENTERED;\\n    }\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/access/Ownable.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.0 (access/Ownable.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../utils/Context.sol\\\";\\n\\n/**\\n * @dev Contract module which provides a basic access control mechanism, where\\n * there is an account (an owner) that can be granted exclusive access to\\n * specific functions.\\n *\\n * By default, the owner account will be the one that deploys the contract. This\\n * can later be changed with {transferOwnership}.\\n *\\n * This module is used through inheritance. It will make available the modifier\\n * `onlyOwner`, which can be applied to your functions to restrict their use to\\n * the owner.\\n */\\nabstract contract Ownable is Context {\\n    address private _owner;\\n\\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\\n\\n    /**\\n     * @dev Initializes the contract setting the deployer as the initial owner.\\n     */\\n    constructor() {\\n        _transferOwnership(_msgSender());\\n    }\\n\\n    /**\\n     * @dev Returns the address of the current owner.\\n     */\\n    function owner() public view virtual returns (address) {\\n        return _owner;\\n    }\\n\\n    /**\\n     * @dev Throws if called by any account other than the owner.\\n     */\\n    modifier onlyOwner() {\\n        require(owner() == _msgSender(), \\\"Ownable: caller is not the owner\\\");\\n        _;\\n    }\\n\\n    /**\\n     * @dev Leaves the contract without owner. It will not be possible to call\\n     * `onlyOwner` functions anymore. Can only be called by the current owner.\\n     *\\n     * NOTE: Renouncing ownership will leave the contract without an owner,\\n     * thereby removing any functionality that is only available to the owner.\\n     */\\n    function renounceOwnership() public virtual onlyOwner {\\n        _transferOwnership(address(0));\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Can only be called by the current owner.\\n     */\\n    function transferOwnership(address newOwner) public virtual onlyOwner {\\n        require(newOwner != address(0), \\\"Ownable: new owner is the zero address\\\");\\n        _transferOwnership(newOwner);\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Internal function without access restriction.\\n     */\\n    function _transferOwnership(address newOwner) internal virtual {\\n        address oldOwner = _owner;\\n        _owner = newOwner;\\n        emit OwnershipTransferred(oldOwner, newOwner);\\n    }\\n}\\n\"\r\n    }\r\n  },\r\n  \"settings\": {\r\n    \"remappings\": [],\r\n    \"optimizer\": {\r\n      \"enabled\": true,\r\n      \"runs\": 1500\r\n    },\r\n    \"evmVersion\": \"london\",\r\n    \"libraries\": {},\r\n    \"outputSelection\": {\r\n      \"*\": {\r\n        \"*\": [\r\n          \"evm.bytecode\",\r\n          \"evm.deployedBytecode\",\r\n          \"devdoc\",\r\n          \"userdoc\",\r\n          \"metadata\",\r\n          \"abi\"\r\n        ]\r\n      }\r\n    }\r\n  }\r\n}}","ABI":"[{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"BASE_RATE_ORIGIN\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"BASE_RATE_V2\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"BONUS_MAX_OWNED\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_currentTimestamp\",\"type\":\"uint256\"}],\"name\":\"_currentTime\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"addRewards\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"allowedContracts\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint16\",\"name\":\"_tokenId\",\"type\":\"uint16\"}],\"name\":\"calculationOriginDay\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_contract\",\"type\":\"address\"},{\"internalType\":\"uint256[]\",\"name\":\"_tokenIds\",\"type\":\"uint256[]\"},{\"internalType\":\"uint256\",\"name\":\"_currentTimestamp\",\"type\":\"uint256\"}],\"name\":\"calculationRewards\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_contract\",\"type\":\"address\"},{\"internalType\":\"uint16[]\",\"name\":\"_tokenIds\",\"type\":\"uint16[]\"},{\"internalType\":\"uint256\",\"name\":\"_currentTimestamp\",\"type\":\"uint256\"}],\"name\":\"calculationRewardsV2\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_contract\",\"type\":\"address\"},{\"internalType\":\"uint16\",\"name\":\"_tokenId\",\"type\":\"uint16\"},{\"internalType\":\"address\",\"name\":\"_ownerOrigin\",\"type\":\"address\"}],\"name\":\"claimMoveRewardsOrigin\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_contract\",\"type\":\"address\"},{\"internalType\":\"uint256[]\",\"name\":\"_tokenIds\",\"type\":\"uint256[]\"},{\"internalType\":\"address\",\"name\":\"_owner\",\"type\":\"address\"}],\"name\":\"claimRewards\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_contract\",\"type\":\"address\"},{\"internalType\":\"uint16[]\",\"name\":\"_tokenIds\",\"type\":\"uint16[]\"},{\"internalType\":\"address\",\"name\":\"_owner\",\"type\":\"address\"}],\"name\":\"claimRewardsV2\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"cryptoFoxesOrigin\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"cryptoFoxesStakingV2\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"cryptofoxesSteak\",\"outputs\":[{\"internalType\":\"contract ICryptoFoxesSteak\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"dateEndRewards\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"disablePublicFunctions\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"endRewards\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"isPaused\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"a\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"b\",\"type\":\"uint256\"}],\"name\":\"max\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"a\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"b\",\"type\":\"uint256\"}],\"name\":\"min\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_contract\",\"type\":\"address\"},{\"internalType\":\"bool\",\"name\":\"_allowed\",\"type\":\"bool\"}],\"name\":\"setAllowedContract\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_contract\",\"type\":\"address\"}],\"name\":\"setCryptoFoxesOrigin\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_contract\",\"type\":\"address\"}],\"name\":\"setCryptoFoxesStakingV2\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_contract\",\"type\":\"address\"}],\"name\":\"setCryptoFoxesSteak\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bool\",\"name\":\"_toggle\",\"type\":\"bool\"}],\"name\":\"setDisablePublicFunctions\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"synchroEndRewards\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_to\",\"type\":\"address\"}],\"name\":\"withdrawRewards\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}]","ContractName":"CryptoFoxesCalculationV2","CompilerVersion":"v0.8.10+commit.fc410830","OptimizationUsed":"1","Runs":"1500","ConstructorArguments":"","EVMVersion":"Default","Library":"","LicenseType":"","Proxy":"0","Implementation":"","SwarmSource":""}]}