{"status":"1","message":"OK","result":[{"SourceCode":"// SPDX-License-Identifier: MIT\r\npragma solidity ^0.8.0;\r\n\r\n// Sources flattened with hardhat v2.5.0 https://hardhat.org\r\n\r\n// File contracts/external/ovm/OVM_CrossDomainEnabled.sol\r\n\r\n\r\n\r\n\r\n/**\r\n * @title iOVM_CrossDomainMessenger\r\n * @notice Copied directly from https://github.com/ethereum-optimism/optimism/blob/294246d65e650f497527de398f51b2f6d11f602f/packages/contracts/contracts/libraries/bridge/ICrossDomainMessenger.sol\r\n */\r\ninterface iOVM_CrossDomainMessenger {\r\n    /*************\r\n     * Variables *\r\n     *************/\r\n\r\n    function xDomainMessageSender() external view returns (address);\r\n\r\n    /********************\r\n     * Public Functions *\r\n     ********************/\r\n\r\n    /**\r\n     * Sends a cross domain message to the target messenger.\r\n     * @param _target Target contract address.\r\n     * @param _message Message to send to the target.\r\n     * @param _gasLimit Gas limit for the provided message.\r\n     */\r\n    function sendMessage(\r\n        address _target,\r\n        bytes calldata _message,\r\n        uint32 _gasLimit\r\n    ) external;\r\n}\r\n\r\n/**\r\n * @title OVM_CrossDomainEnabled\r\n * @notice Copied from: https://github.com/ethereum-optimism/optimism/blob/294246d65e650f497527de398f51b2f6d11f602f/packages/contracts/contracts/libraries/bridge/CrossDomainEnabled.sol\r\n * @dev Helper contract for contracts performing cross-domain communications\r\n *\r\n * Compiler used: defined by inheriting contract\r\n * Runtime target: defined by inheriting contract\r\n */\r\ncontract OVM_CrossDomainEnabled {\r\n    /*************\r\n     * Variables *\r\n     *************/\r\n\r\n    // Messenger contract used to send and recieve messages from the other domain.\r\n    address public messenger;\r\n\r\n    /***************\r\n     * Constructor *\r\n     ***************/\r\n\r\n    /**\r\n     * @param _messenger Address of the CrossDomainMessenger on the current layer.\r\n     */\r\n    constructor(address _messenger) {\r\n        messenger = _messenger;\r\n    }\r\n\r\n    /**********************\r\n     * Function Modifiers *\r\n     **********************/\r\n\r\n    /**\r\n     * Enforces that the modified function is only callable by a specific cross-domain account.\r\n     * @param _sourceDomainAccount The only account on the originating domain which is\r\n     *  authenticated to call this function.\r\n     */\r\n    modifier onlyFromCrossDomainAccount(address _sourceDomainAccount) {\r\n        require(msg.sender == address(getCrossDomainMessenger()), \"OVM_XCHAIN: messenger contract unauthenticated\");\r\n\r\n        require(\r\n            getCrossDomainMessenger().xDomainMessageSender() == _sourceDomainAccount,\r\n            \"OVM_XCHAIN: wrong sender of cross-domain message\"\r\n        );\r\n\r\n        _;\r\n    }\r\n\r\n    /**********************\r\n     * Internal Functions *\r\n     **********************/\r\n\r\n    /**\r\n     * Gets the messenger, usually from storage. This function is exposed in case a child contract\r\n     * needs to override.\r\n     * @return The address of the cross-domain messenger contract which should be used.\r\n     */\r\n    function getCrossDomainMessenger() internal virtual returns (iOVM_CrossDomainMessenger) {\r\n        return iOVM_CrossDomainMessenger(messenger);\r\n    }\r\n\r\n    /**\r\n     * Sends a message to an account on another domain\r\n     * @param _crossDomainTarget The intended recipient on the destination domain\r\n     * @param _message The data to send to the target (usually calldata to a function with\r\n     *  `onlyFromCrossDomainAccount()`)\r\n     * @param _gasLimit The gasLimit for the receipt of the message on the target domain.\r\n     */\r\n    function sendCrossDomainMessage(\r\n        address _crossDomainTarget,\r\n        uint32 _gasLimit,\r\n        bytes memory _message\r\n    ) internal {\r\n        getCrossDomainMessenger().sendMessage(_crossDomainTarget, _message, _gasLimit);\r\n    }\r\n}\r\n\r\n\r\n// File contracts/insured-bridge/interfaces/MessengerInterface.sol\r\n\r\n\r\n\r\n\r\n/**\r\n * @notice Sends cross chain messages to contracts on a specific L2 network. The `relayMessage` implementation will\r\n * differ for each L2.\r\n */\r\ninterface MessengerInterface {\r\n    function relayMessage(\r\n        address target,\r\n        address userToRefund,\r\n        uint256 l1CallValue,\r\n        uint256 gasLimit,\r\n        uint256 gasPrice,\r\n        uint256 maxSubmissionCost,\r\n        bytes memory message\r\n    ) external payable;\r\n}\r\n\r\n\r\n// File @openzeppelin/contracts/utils/Context.sol@v4.1.0\r\n\r\n\r\n\r\n\r\n\r\n/*\r\n * @dev Provides information about the current execution context, including the\r\n * sender of the transaction and its data. While these are generally available\r\n * via msg.sender and msg.data, they should not be accessed in such a direct\r\n * manner, since when dealing with meta-transactions the account sending and\r\n * paying for execution may not be the actual sender (as far as an application\r\n * is concerned).\r\n *\r\n * This contract is only required for intermediate, library-like contracts.\r\n */\r\nabstract contract Context {\r\n    function _msgSender() internal view virtual returns (address) {\r\n        return msg.sender;\r\n    }\r\n\r\n    function _msgData() internal view virtual returns (bytes calldata) {\r\n        this; // silence state mutability warning without generating bytecode - see https://github.com/ethereum/solidity/issues/2691\r\n        return msg.data;\r\n    }\r\n}\r\n\r\n\r\n// File @openzeppelin/contracts/access/Ownable.sol@v4.1.0\r\n\r\n\r\n\r\n\r\n\r\n/**\r\n * @dev Contract module which provides a basic access control mechanism, where\r\n * there is an account (an owner) that can be granted exclusive access to\r\n * specific functions.\r\n *\r\n * By default, the owner account will be the one that deploys the contract. This\r\n * can later be changed with {transferOwnership}.\r\n *\r\n * This module is used through inheritance. It will make available the modifier\r\n * `onlyOwner`, which can be applied to your functions to restrict their use to\r\n * the owner.\r\n */\r\nabstract contract Ownable is Context {\r\n    address private _owner;\r\n\r\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\r\n\r\n    /**\r\n     * @dev Initializes the contract setting the deployer as the initial owner.\r\n     */\r\n    constructor () {\r\n        address msgSender = _msgSender();\r\n        _owner = msgSender;\r\n        emit OwnershipTransferred(address(0), msgSender);\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the address of the current owner.\r\n     */\r\n    function owner() public view virtual returns (address) {\r\n        return _owner;\r\n    }\r\n\r\n    /**\r\n     * @dev Throws if called by any account other than the owner.\r\n     */\r\n    modifier onlyOwner() {\r\n        require(owner() == _msgSender(), \"Ownable: caller is not the owner\");\r\n        _;\r\n    }\r\n\r\n    /**\r\n     * @dev Leaves the contract without owner. It will not be possible to call\r\n     * `onlyOwner` functions anymore. Can only be called by the current owner.\r\n     *\r\n     * NOTE: Renouncing ownership will leave the contract without an owner,\r\n     * thereby removing any functionality that is only available to the owner.\r\n     */\r\n    function renounceOwnership() public virtual onlyOwner {\r\n        emit OwnershipTransferred(_owner, address(0));\r\n        _owner = address(0);\r\n    }\r\n\r\n    /**\r\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\r\n     * Can only be called by the current owner.\r\n     */\r\n    function transferOwnership(address newOwner) public virtual onlyOwner {\r\n        require(newOwner != address(0), \"Ownable: new owner is the zero address\");\r\n        emit OwnershipTransferred(_owner, newOwner);\r\n        _owner = newOwner;\r\n    }\r\n}\r\n\r\n\r\n// File contracts/insured-bridge/ovm/Optimism_Messenger.sol\r\n\r\n\r\n\r\n\r\n\r\n\r\n/**\r\n * @notice Sends cross chain messages Optimism L2 network.\r\n * @dev This contract's owner should be set to the BridgeAdmin deployed on the same L1 network so that only the\r\n * BridgeAdmin can call cross-chain administrative functions on the L2 DepositBox via this messenger.\r\n */\r\ncontract Optimism_Messenger is Ownable, OVM_CrossDomainEnabled, MessengerInterface {\r\n    constructor(address _crossDomainMessenger) OVM_CrossDomainEnabled(_crossDomainMessenger) {}\r\n\r\n    /**\r\n     * @notice Sends a message to an account on L2.\r\n     * @param target The intended recipient on L2.\r\n     * @param gasLimit The gasLimit for the receipt of the message on L2.\r\n     * @param message The data to send to the target (usually calldata to a function with\r\n     *  `onlyFromCrossDomainAccount()`)\r\n     */\r\n    function relayMessage(\r\n        address target,\r\n        address,\r\n        uint256,\r\n        uint256 gasLimit,\r\n        uint256,\r\n        uint256,\r\n        bytes memory message\r\n    ) external payable override onlyOwner {\r\n        sendCrossDomainMessage(target, uint32(gasLimit), message);\r\n    }\r\n}","ABI":"[{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_crossDomainMessenger\",\"type\":\"address\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"messenger\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"target\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"gasLimit\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"},{\"internalType\":\"bytes\",\"name\":\"message\",\"type\":\"bytes\"}],\"name\":\"relayMessage\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}]","ContractName":"Optimism_Messenger","CompilerVersion":"v0.8.9+commit.e5eed63a","OptimizationUsed":"1","Runs":"200","ConstructorArguments":"00000000000000000000000025ace71c97b33cc4729cf772ae268934f7ab5fa1","EVMVersion":"Default","Library":"","LicenseType":"None","Proxy":"0","Implementation":"","SwarmSource":"ipfs://89ab3b4093e3afc80aaa85bcffbe42adde952e89fae26b262ae7eff6f3a5eb9c"}]}