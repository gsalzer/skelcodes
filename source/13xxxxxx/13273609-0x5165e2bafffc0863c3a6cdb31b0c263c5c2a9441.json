{"status":"1","message":"OK","result":[{"SourceCode":"// File: openzeppelin-solidity/contracts/token/ERC20/IERC20.sol\r\n\r\n\r\n\r\npragma solidity >=0.6.0 <0.8.0;\r\n\r\n/**\r\n * @dev Interface of the ERC20 standard as defined in the EIP.\r\n */\r\ninterface IERC20 {\r\n    /**\r\n     * @dev Returns the amount of tokens in existence.\r\n     */\r\n    function totalSupply() external view returns (uint256);\r\n\r\n    /**\r\n     * @dev Returns the amount of tokens owned by `account`.\r\n     */\r\n    function balanceOf(address account) external view returns (uint256);\r\n\r\n    /**\r\n     * @dev Moves `amount` tokens from the caller's account to `recipient`.\r\n     *\r\n     * Returns a boolean value indicating whether the operation succeeded.\r\n     *\r\n     * Emits a {Transfer} event.\r\n     */\r\n    function transfer(address recipient, uint256 amount) external returns (bool);\r\n\r\n    /**\r\n     * @dev Returns the remaining number of tokens that `spender` will be\r\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\r\n     * zero by default.\r\n     *\r\n     * This value changes when {approve} or {transferFrom} are called.\r\n     */\r\n    function allowance(address owner, address spender) external view returns (uint256);\r\n\r\n    /**\r\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\r\n     *\r\n     * Returns a boolean value indicating whether the operation succeeded.\r\n     *\r\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\r\n     * that someone may use both the old and the new allowance by unfortunate\r\n     * transaction ordering. One possible solution to mitigate this race\r\n     * condition is to first reduce the spender's allowance to 0 and set the\r\n     * desired value afterwards:\r\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\r\n     *\r\n     * Emits an {Approval} event.\r\n     */\r\n    function approve(address spender, uint256 amount) external returns (bool);\r\n\r\n    /**\r\n     * @dev Moves `amount` tokens from `sender` to `recipient` using the\r\n     * allowance mechanism. `amount` is then deducted from the caller's\r\n     * allowance.\r\n     *\r\n     * Returns a boolean value indicating whether the operation succeeded.\r\n     *\r\n     * Emits a {Transfer} event.\r\n     */\r\n    function transferFrom(address sender, address recipient, uint256 amount) external returns (bool);\r\n\r\n    /**\r\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\r\n     * another (`to`).\r\n     *\r\n     * Note that `value` may be zero.\r\n     */\r\n    event Transfer(address indexed from, address indexed to, uint256 value);\r\n\r\n    /**\r\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\r\n     * a call to {approve}. `value` is the new allowance.\r\n     */\r\n    event Approval(address indexed owner, address indexed spender, uint256 value);\r\n}\r\n\r\n// File: openzeppelin-solidity/contracts/math/SafeMath.sol\r\n\r\n\r\n\r\npragma solidity >=0.6.0 <0.8.0;\r\n\r\n/**\r\n * @dev Wrappers over Solidity's arithmetic operations with added overflow\r\n * checks.\r\n *\r\n * Arithmetic operations in Solidity wrap on overflow. This can easily result\r\n * in bugs, because programmers usually assume that an overflow raises an\r\n * error, which is the standard behavior in high level programming languages.\r\n * `SafeMath` restores this intuition by reverting the transaction when an\r\n * operation overflows.\r\n *\r\n * Using this library instead of the unchecked operations eliminates an entire\r\n * class of bugs, so it's recommended to use it always.\r\n */\r\nlibrary SafeMath {\r\n    /**\r\n     * @dev Returns the addition of two unsigned integers, reverting on\r\n     * overflow.\r\n     *\r\n     * Counterpart to Solidity's `+` operator.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - Addition cannot overflow.\r\n     */\r\n    function add(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        uint256 c = a + b;\r\n        require(c >= a, \"SafeMath: addition overflow\");\r\n\r\n        return c;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the subtraction of two unsigned integers, reverting on\r\n     * overflow (when the result is negative).\r\n     *\r\n     * Counterpart to Solidity's `-` operator.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - Subtraction cannot overflow.\r\n     */\r\n    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        return sub(a, b, \"SafeMath: subtraction overflow\");\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the subtraction of two unsigned integers, reverting with custom message on\r\n     * overflow (when the result is negative).\r\n     *\r\n     * Counterpart to Solidity's `-` operator.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - Subtraction cannot overflow.\r\n     */\r\n    function sub(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\r\n        require(b <= a, errorMessage);\r\n        uint256 c = a - b;\r\n\r\n        return c;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the multiplication of two unsigned integers, reverting on\r\n     * overflow.\r\n     *\r\n     * Counterpart to Solidity's `*` operator.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - Multiplication cannot overflow.\r\n     */\r\n    function mul(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        // Gas optimization: this is cheaper than requiring 'a' not being zero, but the\r\n        // benefit is lost if 'b' is also tested.\r\n        // See: https://github.com/OpenZeppelin/openzeppelin-contracts/pull/522\r\n        if (a == 0) {\r\n            return 0;\r\n        }\r\n\r\n        uint256 c = a * b;\r\n        require(c / a == b, \"SafeMath: multiplication overflow\");\r\n\r\n        return c;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the integer division of two unsigned integers. Reverts on\r\n     * division by zero. The result is rounded towards zero.\r\n     *\r\n     * Counterpart to Solidity's `/` operator. Note: this function uses a\r\n     * `revert` opcode (which leaves remaining gas untouched) while Solidity\r\n     * uses an invalid opcode to revert (consuming all remaining gas).\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - The divisor cannot be zero.\r\n     */\r\n    function div(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        return div(a, b, \"SafeMath: division by zero\");\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the integer division of two unsigned integers. Reverts with custom message on\r\n     * division by zero. The result is rounded towards zero.\r\n     *\r\n     * Counterpart to Solidity's `/` operator. Note: this function uses a\r\n     * `revert` opcode (which leaves remaining gas untouched) while Solidity\r\n     * uses an invalid opcode to revert (consuming all remaining gas).\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - The divisor cannot be zero.\r\n     */\r\n    function div(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\r\n        require(b > 0, errorMessage);\r\n        uint256 c = a / b;\r\n        // assert(a == b * c + a % b); // There is no case in which this doesn't hold\r\n\r\n        return c;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\r\n     * Reverts when dividing by zero.\r\n     *\r\n     * Counterpart to Solidity's `%` operator. This function uses a `revert`\r\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\r\n     * invalid opcode to revert (consuming all remaining gas).\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - The divisor cannot be zero.\r\n     */\r\n    function mod(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        return mod(a, b, \"SafeMath: modulo by zero\");\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\r\n     * Reverts with custom message when dividing by zero.\r\n     *\r\n     * Counterpart to Solidity's `%` operator. This function uses a `revert`\r\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\r\n     * invalid opcode to revert (consuming all remaining gas).\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - The divisor cannot be zero.\r\n     */\r\n    function mod(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\r\n        require(b != 0, errorMessage);\r\n        return a % b;\r\n    }\r\n}\r\n\r\n// File: openzeppelin-solidity/contracts/utils/Address.sol\r\n\r\n\r\n\r\npragma solidity >=0.6.2 <0.8.0;\r\n\r\n/**\r\n * @dev Collection of functions related to the address type\r\n */\r\nlibrary Address {\r\n    /**\r\n     * @dev Returns true if `account` is a contract.\r\n     *\r\n     * [IMPORTANT]\r\n     * ====\r\n     * It is unsafe to assume that an address for which this function returns\r\n     * false is an externally-owned account (EOA) and not a contract.\r\n     *\r\n     * Among others, `isContract` will return false for the following\r\n     * types of addresses:\r\n     *\r\n     *  - an externally-owned account\r\n     *  - a contract in construction\r\n     *  - an address where a contract will be created\r\n     *  - an address where a contract lived, but was destroyed\r\n     * ====\r\n     */\r\n    function isContract(address account) internal view returns (bool) {\r\n        // This method relies on extcodesize, which returns 0 for contracts in\r\n        // construction, since the code is only stored at the end of the\r\n        // constructor execution.\r\n\r\n        uint256 size;\r\n        // solhint-disable-next-line no-inline-assembly\r\n        assembly { size := extcodesize(account) }\r\n        return size > 0;\r\n    }\r\n\r\n    /**\r\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\r\n     * `recipient`, forwarding all available gas and reverting on errors.\r\n     *\r\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\r\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\r\n     * imposed by `transfer`, making them unable to receive funds via\r\n     * `transfer`. {sendValue} removes this limitation.\r\n     *\r\n     * https://diligence.consensys.net/posts/2019/09/stop-using-soliditys-transfer-now/[Learn more].\r\n     *\r\n     * IMPORTANT: because control is transferred to `recipient`, care must be\r\n     * taken to not create reentrancy vulnerabilities. Consider using\r\n     * {ReentrancyGuard} or the\r\n     * https://solidity.readthedocs.io/en/v0.5.11/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\r\n     */\r\n    function sendValue(address payable recipient, uint256 amount) internal {\r\n        require(address(this).balance >= amount, \"Address: insufficient balance\");\r\n\r\n        // solhint-disable-next-line avoid-low-level-calls, avoid-call-value\r\n        (bool success, ) = recipient.call{ value: amount }(\"\");\r\n        require(success, \"Address: unable to send value, recipient may have reverted\");\r\n    }\r\n\r\n    /**\r\n     * @dev Performs a Solidity function call using a low level `call`. A\r\n     * plain`call` is an unsafe replacement for a function call: use this\r\n     * function instead.\r\n     *\r\n     * If `target` reverts with a revert reason, it is bubbled up by this\r\n     * function (like regular Solidity function calls).\r\n     *\r\n     * Returns the raw returned data. To convert to the expected return value,\r\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - `target` must be a contract.\r\n     * - calling `target` with `data` must not revert.\r\n     *\r\n     * _Available since v3.1._\r\n     */\r\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\r\n      return functionCall(target, data, \"Address: low-level call failed\");\r\n    }\r\n\r\n    /**\r\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\r\n     * `errorMessage` as a fallback revert reason when `target` reverts.\r\n     *\r\n     * _Available since v3.1._\r\n     */\r\n    function functionCall(address target, bytes memory data, string memory errorMessage) internal returns (bytes memory) {\r\n        return functionCallWithValue(target, data, 0, errorMessage);\r\n    }\r\n\r\n    /**\r\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\r\n     * but also transferring `value` wei to `target`.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - the calling contract must have an ETH balance of at least `value`.\r\n     * - the called Solidity function must be `payable`.\r\n     *\r\n     * _Available since v3.1._\r\n     */\r\n    function functionCallWithValue(address target, bytes memory data, uint256 value) internal returns (bytes memory) {\r\n        return functionCallWithValue(target, data, value, \"Address: low-level call with value failed\");\r\n    }\r\n\r\n    /**\r\n     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\r\n     * with `errorMessage` as a fallback revert reason when `target` reverts.\r\n     *\r\n     * _Available since v3.1._\r\n     */\r\n    function functionCallWithValue(address target, bytes memory data, uint256 value, string memory errorMessage) internal returns (bytes memory) {\r\n        require(address(this).balance >= value, \"Address: insufficient balance for call\");\r\n        require(isContract(target), \"Address: call to non-contract\");\r\n\r\n        // solhint-disable-next-line avoid-low-level-calls\r\n        (bool success, bytes memory returndata) = target.call{ value: value }(data);\r\n        return _verifyCallResult(success, returndata, errorMessage);\r\n    }\r\n\r\n    /**\r\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\r\n     * but performing a static call.\r\n     *\r\n     * _Available since v3.3._\r\n     */\r\n    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\r\n        return functionStaticCall(target, data, \"Address: low-level static call failed\");\r\n    }\r\n\r\n    /**\r\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\r\n     * but performing a static call.\r\n     *\r\n     * _Available since v3.3._\r\n     */\r\n    function functionStaticCall(address target, bytes memory data, string memory errorMessage) internal view returns (bytes memory) {\r\n        require(isContract(target), \"Address: static call to non-contract\");\r\n\r\n        // solhint-disable-next-line avoid-low-level-calls\r\n        (bool success, bytes memory returndata) = target.staticcall(data);\r\n        return _verifyCallResult(success, returndata, errorMessage);\r\n    }\r\n\r\n    function _verifyCallResult(bool success, bytes memory returndata, string memory errorMessage) private pure returns(bytes memory) {\r\n        if (success) {\r\n            return returndata;\r\n        } else {\r\n            // Look for revert reason and bubble it up if present\r\n            if (returndata.length > 0) {\r\n                // The easiest way to bubble the revert reason is using memory via assembly\r\n\r\n                // solhint-disable-next-line no-inline-assembly\r\n                assembly {\r\n                    let returndata_size := mload(returndata)\r\n                    revert(add(32, returndata), returndata_size)\r\n                }\r\n            } else {\r\n                revert(errorMessage);\r\n            }\r\n        }\r\n    }\r\n}\r\n\r\n// File: openzeppelin-solidity/contracts/token/ERC20/SafeERC20.sol\r\n\r\n\r\n\r\npragma solidity >=0.6.0 <0.8.0;\r\n\r\n\r\n\r\n\r\n/**\r\n * @title SafeERC20\r\n * @dev Wrappers around ERC20 operations that throw on failure (when the token\r\n * contract returns false). Tokens that return no value (and instead revert or\r\n * throw on failure) are also supported, non-reverting calls are assumed to be\r\n * successful.\r\n * To use this library you can add a `using SafeERC20 for IERC20;` statement to your contract,\r\n * which allows you to call the safe operations as `token.safeTransfer(...)`, etc.\r\n */\r\nlibrary SafeERC20 {\r\n    using SafeMath for uint256;\r\n    using Address for address;\r\n\r\n    function safeTransfer(IERC20 token, address to, uint256 value) internal {\r\n        _callOptionalReturn(token, abi.encodeWithSelector(token.transfer.selector, to, value));\r\n    }\r\n\r\n    function safeTransferFrom(IERC20 token, address from, address to, uint256 value) internal {\r\n        _callOptionalReturn(token, abi.encodeWithSelector(token.transferFrom.selector, from, to, value));\r\n    }\r\n\r\n    /**\r\n     * @dev Deprecated. This function has issues similar to the ones found in\r\n     * {IERC20-approve}, and its usage is discouraged.\r\n     *\r\n     * Whenever possible, use {safeIncreaseAllowance} and\r\n     * {safeDecreaseAllowance} instead.\r\n     */\r\n    function safeApprove(IERC20 token, address spender, uint256 value) internal {\r\n        // safeApprove should only be called when setting an initial allowance,\r\n        // or when resetting it to zero. To increase and decrease it, use\r\n        // 'safeIncreaseAllowance' and 'safeDecreaseAllowance'\r\n        // solhint-disable-next-line max-line-length\r\n        require((value == 0) || (token.allowance(address(this), spender) == 0),\r\n            \"SafeERC20: approve from non-zero to non-zero allowance\"\r\n        );\r\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, value));\r\n    }\r\n\r\n    function safeIncreaseAllowance(IERC20 token, address spender, uint256 value) internal {\r\n        uint256 newAllowance = token.allowance(address(this), spender).add(value);\r\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));\r\n    }\r\n\r\n    function safeDecreaseAllowance(IERC20 token, address spender, uint256 value) internal {\r\n        uint256 newAllowance = token.allowance(address(this), spender).sub(value, \"SafeERC20: decreased allowance below zero\");\r\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));\r\n    }\r\n\r\n    /**\r\n     * @dev Imitates a Solidity high-level call (i.e. a regular function call to a contract), relaxing the requirement\r\n     * on the return value: the return value is optional (but if data is returned, it must not be false).\r\n     * @param token The token targeted by the call.\r\n     * @param data The call data (encoded using abi.encode or one of its variants).\r\n     */\r\n    function _callOptionalReturn(IERC20 token, bytes memory data) private {\r\n        // We need to perform a low level call here, to bypass Solidity's return data size checking mechanism, since\r\n        // we're implementing it ourselves. We use {Address.functionCall} to perform this call, which verifies that\r\n        // the target address contains contract code and also asserts for success in the low-level call.\r\n\r\n        bytes memory returndata = address(token).functionCall(data, \"SafeERC20: low-level call failed\");\r\n        if (returndata.length > 0) { // Return data is optional\r\n            // solhint-disable-next-line max-line-length\r\n            require(abi.decode(returndata, (bool)), \"SafeERC20: ERC20 operation did not succeed\");\r\n        }\r\n    }\r\n}\r\n\r\n// File: original_contracts/ITokenTransferProxy.sol\r\n\r\npragma solidity 0.7.5;\r\n\r\n\r\ninterface ITokenTransferProxy {\r\n\r\n    function transferFrom(\r\n        address token,\r\n        address from,\r\n        address to,\r\n        uint256 amount\r\n    )\r\n        external;\r\n}\r\n\r\n// File: original_contracts/lib/Utils.sol\r\n\r\npragma solidity 0.7.5;\r\npragma experimental ABIEncoderV2;\r\n\r\n\r\n\r\n\r\n\r\ninterface IERC20Permit {\r\n    function permit(address owner, address spender, uint256 amount, uint256 deadline, uint8 v, bytes32 r, bytes32 s) external;\r\n}\r\n\r\nlibrary Utils {\r\n    using SafeMath for uint256;\r\n    using SafeERC20 for IERC20;\r\n\r\n    address constant ETH_ADDRESS = address(\r\n        0xEeeeeEeeeEeEeeEeEeEeeEEEeeeeEeeeeeeeEEeE\r\n    );\r\n    \r\n    uint256 constant MAX_UINT = type(uint256).max;\r\n\r\n    /**\r\n   * @param fromToken Address of the source token\r\n   * @param fromAmount Amount of source tokens to be swapped\r\n   * @param toAmount Minimum destination token amount expected out of this swap\r\n   * @param expectedAmount Expected amount of destination tokens without slippage\r\n   * @param beneficiary Beneficiary address\r\n   * 0 then 100% will be transferred to beneficiary. Pass 10000 for 100%\r\n   * @param path Route to be taken for this swap to take place\r\n\r\n   */\r\n    struct SellData {\r\n        address fromToken;\r\n        uint256 fromAmount;\r\n        uint256 toAmount;\r\n        uint256 expectedAmount;\r\n        address payable beneficiary;\r\n        Utils.Path[] path;\r\n        address payable partner;\r\n        uint256 feePercent;\r\n        bytes permit;\r\n        uint256 deadline;\r\n        bytes16 uuid;\r\n    }\r\n\r\n    struct MegaSwapSellData {\r\n        address fromToken;\r\n        uint256 fromAmount;\r\n        uint256 toAmount;\r\n        uint256 expectedAmount;\r\n        address payable beneficiary;\r\n        Utils.MegaSwapPath[] path;\r\n        address payable partner;\r\n        uint256 feePercent;\r\n        bytes permit;\r\n        uint256 deadline;\r\n        bytes16 uuid;\r\n    }\r\n\r\n    struct SimpleData {\r\n        address fromToken;\r\n        address toToken;\r\n        uint256 fromAmount;\r\n        uint256 toAmount;\r\n        uint256 expectedAmount;\r\n        address[] callees;\r\n        bytes exchangeData;\r\n        uint256[] startIndexes;\r\n        uint256[] values;\r\n        address payable beneficiary;\r\n        address payable partner;\r\n        uint256 feePercent;\r\n        bytes permit;\r\n        uint256 deadline;\r\n        bytes16 uuid;\r\n    }\r\n\r\n    struct Adapter {\r\n        address payable adapter;\r\n        uint256 percent;\r\n        uint256 networkFee;\r\n        Route[] route;\r\n    }\r\n\r\n    struct Route {\r\n        uint256 index;//Adapter at which index needs to be used\r\n        address targetExchange;\r\n        uint percent;\r\n        bytes payload;\r\n        uint256 networkFee;//Network fee is associated with 0xv3 trades\r\n    }\r\n\r\n    struct MegaSwapPath {\r\n        uint256 fromAmountPercent;\r\n        Path[] path;\r\n    }\r\n\r\n    struct Path {\r\n        address to;\r\n        uint256 totalNetworkFee;//Network fee is associated with 0xv3 trades\r\n        Adapter[] adapters;\r\n    }\r\n\r\n    function ethAddress() internal pure returns (address) {return ETH_ADDRESS;}\r\n\r\n    function maxUint() internal pure returns (uint256) {return MAX_UINT;}\r\n\r\n    function approve(\r\n        address addressToApprove,\r\n        address token,\r\n        uint256 amount\r\n    ) internal {\r\n        if (token != ETH_ADDRESS) {\r\n            IERC20 _token = IERC20(token);\r\n\r\n            uint allowance = _token.allowance(address(this), addressToApprove);\r\n\r\n            if (allowance < amount) {\r\n                _token.safeApprove(addressToApprove, 0);\r\n                _token.safeIncreaseAllowance(addressToApprove, MAX_UINT);\r\n            }\r\n        }\r\n    }\r\n\r\n    function transferTokens(\r\n        address token,\r\n        address payable destination,\r\n        uint256 amount\r\n    )\r\n    internal\r\n    {\r\n        if (amount > 0) {\r\n            if (token == ETH_ADDRESS) {\r\n                (bool result, ) = destination.call{value: amount, gas: 10000}(\"\");\r\n                require(result, \"Failed to transfer Ether\");\r\n            }\r\n            else {\r\n                IERC20(token).safeTransfer(destination, amount);\r\n            }\r\n        }\r\n\r\n    }\r\n\r\n    function tokenBalance(\r\n        address token,\r\n        address account\r\n    )\r\n    internal\r\n    view\r\n    returns (uint256)\r\n    {\r\n        if (token == ETH_ADDRESS) {\r\n            return account.balance;\r\n        } else {\r\n            return IERC20(token).balanceOf(account);\r\n        }\r\n    }\r\n\r\n    function permit(\r\n        address token,\r\n        bytes memory permit\r\n    )\r\n        internal\r\n    {\r\n        if (permit.length == 32 * 7) {\r\n            (bool success,) = token.call(abi.encodePacked(IERC20Permit.permit.selector, permit));\r\n            require(success, \"Permit failed\");\r\n        }\r\n    }\r\n\r\n}\r\n\r\n// File: original_contracts/adapters/IAdapter.sol\r\n\r\npragma solidity 0.7.5;\r\n\r\n\r\n\r\ninterface IAdapter {\r\n\r\n    /**\r\n    * @dev Certain adapters needs to be initialized.\r\n    * This method will be called from Augustus\r\n    */\r\n    function initialize(bytes calldata data) external;\r\n\r\n    /**\r\n   * @dev The function which performs the swap on an exchange.\r\n   * @param fromToken Address of the source token\r\n   * @param toToken Address of the destination token\r\n   * @param fromAmount Amount of source tokens to be swapped\r\n   * @param networkFee Network fee to be used in this router\r\n   * @param route Route to be followed\r\n   */\r\n    function swap(\r\n        IERC20 fromToken,\r\n        IERC20 toToken,\r\n        uint256 fromAmount,\r\n        uint256 networkFee,\r\n        Utils.Route[] calldata route\r\n    )\r\n        external\r\n        payable;\r\n}\r\n\r\n// File: original_contracts/lib/aavee/IAavee.sol\r\n\r\npragma solidity 0.7.5;\r\n\r\n\r\ninterface IAaveToken {\r\n    function redeem(uint256 amount) external;\r\n    function underlyingAssetAddress() external view returns(address);\r\n\r\n}\r\n\r\ninterface IAaveV1LendingPool {\r\n    function deposit(\r\n        IERC20 token,\r\n        uint256 amount,\r\n        uint16 refCode\r\n    )\r\n        external\r\n        payable;\r\n\r\n}\r\n\r\n// File: original_contracts/lib/aavee/Aavee.sol\r\n\r\npragma solidity 0.7.5;\r\n\r\n\r\n\r\n\r\ncontract Aavee {\r\n\r\n    struct AaveeDataV1 {\r\n        address aToken;\r\n    }\r\n\r\n    uint16 public immutable refCodeV1;\r\n    address public immutable spender;\r\n\r\n    constructor(uint16 _refCode, address _spender) public {\r\n        refCodeV1 = _refCode;\r\n        spender = _spender;\r\n    }\r\n\r\n    function swapOnAavee(\r\n        IERC20 fromToken,\r\n        IERC20 toToken,\r\n        uint256 fromAmount,\r\n        address exchange,\r\n        bytes calldata payload\r\n    )\r\n        internal\r\n    {\r\n        _swapOnAavee(\r\n            fromToken,\r\n            toToken,\r\n            fromAmount,\r\n            exchange,\r\n            payload\r\n        );\r\n    }\r\n\r\n    function buyOnAavee(\r\n        IERC20 fromToken,\r\n        IERC20 toToken,\r\n        uint256 fromAmount,\r\n        address exchange,\r\n        bytes calldata payload\r\n    )\r\n        internal\r\n    {\r\n        _swapOnAavee(\r\n            fromToken,\r\n            toToken,\r\n            fromAmount,\r\n            exchange,\r\n            payload\r\n        );\r\n    }\r\n\r\n    function _swapOnAavee(\r\n        IERC20 fromToken,\r\n        IERC20 toToken,\r\n        uint256 fromAmount,\r\n        address exchange,\r\n        bytes memory payload\r\n    )\r\n      private\r\n    {\r\n        AaveeDataV1 memory data = abi.decode(payload, (AaveeDataV1));\r\n\r\n        Utils.approve(spender, address(fromToken), fromAmount);\r\n\r\n        if (address(fromToken) == address(data.aToken)) {\r\n            require(\r\n                IAaveToken(data.aToken).underlyingAssetAddress() == address(toToken),\r\n                \"Invalid to token\"\r\n            );\r\n\r\n            IAaveToken(data.aToken).redeem(fromAmount);\r\n        }\r\n        else if(address(toToken) == address(data.aToken)) {\r\n            require(\r\n                IAaveToken(data.aToken).underlyingAssetAddress() == address(fromToken),\r\n                \"Invalid to token\"\r\n            );\r\n            if (address(fromToken) == Utils.ethAddress()) {\r\n                IAaveV1LendingPool(exchange).deposit{value: fromAmount}(fromToken, fromAmount, refCodeV1);\r\n            }\r\n            else {\r\n                IAaveV1LendingPool(exchange).deposit(fromToken, fromAmount, refCodeV1);\r\n            }\r\n        }\r\n        else {\r\n            revert(\"Invalid aToken\");\r\n        }\r\n    }\r\n}\r\n\r\n// File: original_contracts/lib/chai/IChai.sol\r\n\r\npragma solidity 0.7.5;\r\n\r\n\r\ninterface IChai {\r\n\r\n    function join(address dst, uint wad) external;\r\n\r\n    function exit(address src, uint wad) external;\r\n}\r\n\r\n// File: original_contracts/lib/chai/ChaiExchange.sol\r\n\r\npragma solidity 0.7.5;\r\n\r\n\r\n\r\n\r\n\r\ncontract ChaiExchange {\r\n\r\n    address public immutable chai;\r\n    address public immutable dai ;\r\n\r\n    constructor(address _chai, address _dai) public {\r\n        chai = _chai;\r\n        dai = _dai;\r\n    }\r\n\r\n    function swapOnChai(\r\n        IERC20 fromToken,\r\n        IERC20 toToken,\r\n        uint256 fromAmount\r\n    )\r\n        internal\r\n\r\n    {\r\n\r\n        _swapOnChai(\r\n            fromToken,\r\n            toToken,\r\n            fromAmount\r\n        );\r\n    }\r\n\r\n    function buyOnChai(\r\n        IERC20 fromToken,\r\n        IERC20 toToken,\r\n        uint256 fromAmount\r\n    )\r\n        internal\r\n\r\n    {\r\n\r\n        _swapOnChai(\r\n            fromToken,\r\n            toToken,\r\n            fromAmount\r\n        );\r\n    }\r\n\r\n    function _swapOnChai(\r\n        IERC20 fromToken,\r\n        IERC20 toToken,\r\n        uint256 fromAmount\r\n    )\r\n        private\r\n    {\r\n\r\n        Utils.approve(address(chai), address(fromToken), fromAmount);\r\n\r\n        if (address(fromToken) == chai){\r\n            require(address(toToken) == dai, \"Destination token should be dai\");\r\n            IChai(chai).exit(address(this), fromAmount);\r\n        }\r\n        else if (address(fromToken) == dai) {\r\n            require(address(toToken) == chai, \"Destination token should be chai\");\r\n            IChai(chai).join(address(this), fromAmount);\r\n        }\r\n        else {\r\n            revert(\"Invalid fromToken\");\r\n        }\r\n    }\r\n}\r\n\r\n// File: original_contracts/lib/bprotocol/IBProtocolAMM.sol\r\n\r\npragma solidity 0.7.5;\r\n\r\ninterface IBProtocolAMM {\r\n    function swap(\r\n        uint lusdAmount,\r\n        uint minEthReturn,\r\n        address payable dest\r\n    ) external returns(uint);\r\n}\r\n\r\n// File: original_contracts/lib/bprotocol/BProtocolAMM.sol\r\n\r\npragma solidity 0.7.5;\r\n\r\n\r\n\r\n\r\ncontract BProtocol {\r\n\r\n    function swapOnBProtocol(\r\n        IERC20 fromToken,\r\n        IERC20 toToken,\r\n        uint256 fromAmount,\r\n        address exchange,\r\n        bytes calldata payload\r\n    )\r\n    internal\r\n\r\n    {\r\n\r\n        Utils.approve(address(exchange), address(fromToken), fromAmount);\r\n\r\n        IBProtocolAMM(exchange).swap(fromAmount, 1, payable(address(this)));\r\n    }\r\n}\r\n\r\n// File: original_contracts/lib/bzx/IBZX.sol\r\n\r\npragma solidity 0.7.5;\r\n\r\n\r\ninterface IBZX {\r\n\r\n    function mint(\r\n        address receiver,\r\n        uint256 depositAmount\r\n    )\r\n    external\r\n    returns (uint256 mintAmount);\r\n\r\n    function mintWithEther(address receiver) external payable returns (uint256 mintAmount);\r\n\r\n    function burn(\r\n        address receiver,\r\n        uint256 burnAmount\r\n    )\r\n        external\r\n        returns (uint256 loanAmountPaid);\r\n\r\n    function burnToEther(\r\n        address payable receiver,\r\n        uint256 burnAmount\r\n    )\r\n        external\r\n        returns (uint256 loanAmountPaid);\r\n\r\n    function loanTokenAddress() external view returns(address );\r\n}\r\n\r\n// File: original_contracts/lib/WethProvider.sol\r\n\r\npragma solidity 0.7.5;\r\n\r\n\r\ncontract WethProvider {\r\n    address public immutable WETH;\r\n\r\n    constructor(address weth) public {\r\n        WETH = weth;\r\n    }\r\n}\r\n\r\n// File: original_contracts/lib/bzx/BZX.sol\r\n\r\npragma solidity 0.7.5;\r\n\r\n\r\n\r\n\r\n\r\nabstract contract BZX is WethProvider {\r\n\r\n    struct BZXData {\r\n        address iToken;\r\n    }\r\n\r\n    function swapOnBzx(\r\n        IERC20 fromToken,\r\n        IERC20 toToken,\r\n        uint256 fromAmount,\r\n        bytes calldata payload\r\n    )\r\n        internal\r\n\r\n    {\r\n        _swapOnBZX(\r\n            fromToken,\r\n            toToken,\r\n            fromAmount,\r\n            payload\r\n        );\r\n    }\r\n\r\n    function buyOnBzx(\r\n        IERC20 fromToken,\r\n        IERC20 toToken,\r\n        uint256 fromAmount,\r\n        bytes calldata payload\r\n    )\r\n        internal\r\n\r\n    {\r\n        _swapOnBZX(\r\n            fromToken,\r\n            toToken,\r\n            fromAmount,\r\n            payload\r\n        );\r\n    }\r\n\r\n    function _swapOnBZX(\r\n        IERC20 fromToken,\r\n        IERC20 toToken,\r\n        uint256 fromAmount,\r\n        bytes memory payload\r\n    )\r\n        private\r\n    {\r\n        BZXData memory data = abi.decode(payload, (BZXData));\r\n\r\n        Utils.approve(address(data.iToken), address(fromToken), fromAmount);\r\n\r\n        if (address(fromToken) == address(data.iToken)) {\r\n            if (address(toToken) == Utils.ethAddress()) {\r\n                require(\r\n                    IBZX(data.iToken).loanTokenAddress() == WETH,\r\n                    \"Invalid to token\"\r\n                );\r\n                IBZX(data.iToken).burnToEther(payable(address(this)), fromAmount);\r\n            }\r\n            else {\r\n                require(\r\n                    IBZX(data.iToken).loanTokenAddress() == address(toToken),\r\n                    \"Invalid to token\"\r\n                );\r\n                IBZX(data.iToken).burn(address(this), fromAmount);\r\n            }\r\n        }\r\n        else if (address(toToken) == address(data.iToken)){\r\n            if (address(fromToken) == Utils.ethAddress()) {\r\n                require(\r\n                    IBZX(data.iToken).loanTokenAddress() == WETH,\r\n                    \"Invalid from token\"\r\n                );\r\n\r\n                IBZX(data.iToken).mintWithEther{value: fromAmount}(address(this));\r\n            }\r\n            else {\r\n                require(\r\n                    IBZX(data.iToken).loanTokenAddress() == address(fromToken),\r\n                    \"Invalid from token\"\r\n                );\r\n                IBZX(data.iToken).mint(address(this), fromAmount);\r\n            }\r\n        }\r\n        else {\r\n            revert(\"Invalid token pair!!\");\r\n        }\r\n    }\r\n}\r\n\r\n// File: original_contracts/lib/smoothy/ISmoothyV1.sol\r\n\r\npragma solidity 0.7.5;\r\n\r\ninterface ISmoothyV1 {\r\n\r\n  function swap(\r\n    uint256 bTokenIdxIn,\r\n    uint256 bTokenIdxOut,\r\n    uint256 bTokenInAmount,\r\n    uint256 bTokenOutMin\r\n  )\r\n  external;\r\n\r\n}\r\n\r\n// File: original_contracts/lib/weth/IWETH.sol\r\n\r\npragma solidity 0.7.5;\r\n\r\n\r\n\r\nabstract contract IWETH is IERC20 {\r\n    function deposit() external virtual payable;\r\n    function withdraw(uint256 amount) external virtual;\r\n}\r\n\r\n// File: original_contracts/lib/smoothy/SmoothyV1.sol\r\n\r\npragma solidity 0.7.5;\r\n\r\n\r\n\r\n\r\n\r\ncontract SmoothyV1 {\r\n\r\n  struct SmoothyV1Data {\r\n    uint256 i;\r\n    uint256 j;\r\n  }\r\n\r\n  function swapOnSmoothyV1(\r\n    IERC20 fromToken,\r\n    IERC20 toToken,\r\n    uint256 fromAmount,\r\n    address exchange,\r\n    bytes calldata payload\r\n  )\r\n    internal\r\n  {\r\n\r\n    SmoothyV1Data memory data = abi.decode(payload, (SmoothyV1Data));\r\n\r\n    Utils.approve(exchange, address(fromToken), fromAmount);\r\n\r\n    ISmoothyV1(exchange).swap(data.i, data.j, fromAmount, 1);\r\n\r\n  }\r\n}\r\n\r\n// File: original_contracts/lib/uniswap/IUniswapExchange.sol\r\n\r\npragma solidity 0.7.5;\r\n\r\ninterface IUniswapExchange {\r\n    function ethToTokenSwapInput(\r\n        uint256 minTokens,\r\n        uint256 deadline) external payable returns (uint256 tokensBought);\r\n\r\n     function ethToTokenSwapOutput(\r\n        uint256 tokensBought,\r\n        uint256 deadline) external payable returns (uint256 ethSold);\r\n\r\n    function tokenToEthSwapInput(\r\n        uint256 tokensSold,\r\n        uint256 minEth,\r\n        uint256 deadline) external returns (uint256 ethBought);\r\n\r\n    function tokenToEthSwapOutput(\r\n        uint256 ethBought,\r\n        uint256 maxTokens,\r\n        uint256 deadline) external returns (uint256 tokensSold);\r\n\r\n    function tokenToTokenSwapInput(\r\n        uint256 tokensSold,\r\n        uint256 minTokensBought,\r\n        uint256 minEthBought,\r\n        uint256 deadline,\r\n        address tokenAddr\r\n    ) external returns (uint256 tokensBought);\r\n\r\n    function tokenToTokenSwapOutput(\r\n        uint256 tokensBought,\r\n        uint256 maxTokensSold,\r\n        uint256 maxEthSold,\r\n        uint256 deadline,\r\n        address toToken\r\n    ) external returns (uint256 tokensSold);\r\n\r\n    function ethToTokenTransferInput(\r\n        uint256 min_tokens,\r\n        uint256 deadline,\r\n        address recipient\r\n    ) external payable returns (uint256 tokens_bought);\r\n\r\n    function ethToTokenTransferOutput(\r\n        uint256 tokens_bought,\r\n        uint256 deadline,\r\n        address recipient\r\n    ) external payable returns (uint256 eth_sold);\r\n\r\n    function tokenToEthTransferInput(\r\n        uint256 tokens_sold,\r\n        uint256 min_tokens,\r\n        uint256 deadline,\r\n        address recipient\r\n    ) external returns (uint256 eth_bought);\r\n\r\n    function tokenToEthTransferOutput(\r\n        uint256 eth_bought,\r\n        uint256 max_tokens,\r\n        uint256 deadline,\r\n        address recipient\r\n    ) external returns (uint256 tokens_sold);\r\n\r\n    function tokenToTokenTransferInput(\r\n        uint256 tokens_sold,\r\n        uint256 min_tokens_bought,\r\n        uint256 min_eth_bought,\r\n        uint256 deadline,\r\n        address recipient,\r\n        address token_addr\r\n    ) external returns (uint256 tokens_bought);\r\n\r\n    function tokenToTokenTransferOutput(\r\n        uint256 tokens_bought,\r\n        uint256 max_tokens_sold,\r\n        uint256 max_eth_sold,\r\n        uint256 deadline,\r\n        address recipient,\r\n        address token_addr\r\n    ) external returns (uint256 tokens_sold);\r\n}\r\n\r\n// File: original_contracts/lib/uniswap/IUniswapFactory.sol\r\n\r\npragma solidity 0.7.5;\r\n\r\n\r\ninterface IUniswapFactory {\r\n    function getExchange(address token) external view returns (address exchange);\r\n}\r\n\r\n// File: original_contracts/lib/uniswap/UniswapV1.sol\r\n\r\npragma solidity 0.7.5;\r\n\r\n\r\n\r\n\r\n\r\n\r\ncontract UniswapV1 {\r\n    using SafeMath for uint256;\r\n\r\n    address public immutable factory;\r\n\r\n    constructor(address _factory) public {\r\n        factory = _factory;\r\n    }\r\n\r\n    function swapOnUniswapV1(\r\n        IERC20 fromToken,\r\n        IERC20 toToken,\r\n        uint256 fromAmount\r\n    )\r\n        internal\r\n\r\n    {\r\n\r\n        _swapOnUniswapV1(\r\n            fromToken,\r\n            toToken,\r\n            fromAmount,\r\n            1\r\n        );\r\n    }\r\n\r\n    function buyOnUniswapV1(\r\n        IERC20 fromToken,\r\n        IERC20 toToken,\r\n        uint256 fromAmount,\r\n        uint256 toAmount\r\n    )\r\n        internal\r\n\r\n    {\r\n\r\n        address exchange = getExchange(fromToken, toToken);\r\n\r\n        Utils.approve(address(exchange), address(fromToken), fromAmount);\r\n\r\n        if (address(fromToken) == Utils.ethAddress()) {\r\n            IUniswapExchange(exchange).ethToTokenSwapOutput{value: fromAmount}(toAmount, block.timestamp);\r\n        }\r\n        else if (address(toToken) == Utils.ethAddress()) {\r\n            IUniswapExchange(exchange).tokenToEthSwapOutput(toAmount, fromAmount, block.timestamp);\r\n        }\r\n        else {\r\n            IUniswapExchange(exchange).tokenToTokenSwapOutput(\r\n              toAmount,\r\n              fromAmount,\r\n              Utils.maxUint(),\r\n              block.timestamp,\r\n              address(toToken)\r\n            );\r\n        }\r\n\r\n    }\r\n\r\n    function getExchange(\r\n        IERC20 fromToken,\r\n        IERC20 toToken\r\n    )\r\n      private\r\n      view\r\n      returns (address)\r\n    {\r\n        address exchangeAddress = address(fromToken) == Utils.ethAddress() ? address(toToken) : address(fromToken);\r\n\r\n        return IUniswapFactory(factory).getExchange(exchangeAddress);\r\n    }\r\n\r\n    function _swapOnUniswapV1(\r\n        IERC20 fromToken,\r\n        IERC20 toToken,\r\n        uint256 fromAmount,\r\n        uint256 toAmount\r\n    )\r\n      private\r\n      returns(uint256)\r\n    {\r\n        address exchange = getExchange(fromToken, toToken);\r\n\r\n        Utils.approve(\r\n          exchange,\r\n          address(fromToken),\r\n          fromAmount\r\n        );\r\n\r\n        uint256 receivedAmount = 0;\r\n\r\n        if (address(fromToken) == Utils.ethAddress()) {\r\n            receivedAmount = IUniswapExchange(exchange).ethToTokenSwapInput{value: fromAmount}(toAmount, block.timestamp);\r\n        }\r\n        else if (address(toToken) == Utils.ethAddress()) {\r\n            receivedAmount = IUniswapExchange(exchange).tokenToEthSwapInput(fromAmount, toAmount, block.timestamp);\r\n        }\r\n        else {\r\n            receivedAmount = IUniswapExchange(exchange).tokenToTokenSwapInput(fromAmount, toAmount, 1, block.timestamp, address(toToken));\r\n        }\r\n\r\n        return receivedAmount;\r\n    }\r\n\r\n}\r\n\r\n// File: original_contracts/lib/kyberdmm/IKyberDmmRouter.sol\r\n\r\npragma solidity 0.7.5;\r\n\r\n\r\ninterface IDMMExchangeRouter {\r\n    function swapExactTokensForTokens(\r\n        uint256 amountIn,\r\n        uint256 amountOutMin,\r\n        address[] calldata poolsPath,\r\n        IERC20[] calldata path,\r\n        address to,\r\n        uint256 deadline\r\n    ) external returns (uint256[] memory amounts);\r\n\r\n    function swapTokensForExactTokens(\r\n        uint256 amountOut,\r\n        uint256 amountInMax,\r\n        address[] calldata poolsPath,\r\n        IERC20[] calldata path,\r\n        address to,\r\n        uint256 deadline\r\n    ) external returns (uint256[] memory amounts);\r\n}\r\n\r\n// File: original_contracts/lib/kyberdmm/KyberDmm.sol\r\n\r\npragma solidity 0.7.5;\r\n\r\n\r\n\r\n\r\n\r\n\r\nabstract contract KyberDmm is WethProvider {\r\n\r\n    uint256 constant MAX_INT = 115792089237316195423570985008687907853269984665640564039457584007913129639935;\r\n\r\n    struct KyberDMMData {\r\n        address[] poolPath;\r\n        IERC20[] path;\r\n    }\r\n\r\n    function swapOnKyberDmm(\r\n        IERC20 fromToken,\r\n        IERC20 toToken,\r\n        uint256 fromAmount,\r\n        address exchange,\r\n        bytes calldata payload\r\n    )\r\n    internal\r\n    {\r\n\r\n        KyberDMMData memory data = abi.decode(payload, (KyberDMMData));\r\n\r\n        address _fromToken = address(fromToken) == Utils.ethAddress()\r\n        ? WETH : address(fromToken);\r\n        address _toToken = address(toToken) == Utils.ethAddress()\r\n        ? WETH : address(toToken);\r\n\r\n        if (address(fromToken) == Utils.ethAddress()) {\r\n            IWETH(WETH).deposit{value : fromAmount}();\r\n        }\r\n\r\n        Utils.approve(address(exchange), _fromToken, fromAmount);\r\n\r\n        IDMMExchangeRouter(exchange).swapExactTokensForTokens(\r\n            fromAmount,\r\n            1,\r\n            data.poolPath,\r\n            data.path,\r\n            address(this),\r\n            MAX_INT // deadline\r\n        );\r\n\r\n        if (address(toToken) == Utils.ethAddress()) {\r\n            IWETH(WETH).withdraw(\r\n                IERC20(WETH).balanceOf(address(this))\r\n            );\r\n        }\r\n\r\n    }\r\n}\r\n\r\n// File: original_contracts/adapters/mainnet/Adapter03.sol\r\n\r\npragma solidity 0.7.5;\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n/**\r\n* @dev This contract will route call to:\r\n* 0- ChaiExchange\r\n* 1- UniswapV1\r\n* 2- SmoothyV1\r\n* 3- BZX\r\n* 4- BProtocol\r\n* 5- Aave\r\n* 6- KyberDMM\r\n* The above are the indexes\r\n*/\r\n\r\ncontract Adapter03 is IAdapter, ChaiExchange, UniswapV1, SmoothyV1, BZX, BProtocol, Aavee, KyberDmm {\r\n    using SafeMath for uint256;\r\n\r\n    constructor(\r\n        uint16 aaveeRefCode,\r\n        address aaveeSpender,\r\n        address uniswapFactory,\r\n        address chai,\r\n        address dai,\r\n        address weth\r\n    )\r\n        WethProvider(weth)\r\n        Aavee(aaveeRefCode, aaveeSpender)\r\n        UniswapV1(uniswapFactory)\r\n        ChaiExchange(chai, dai)\r\n        public\r\n    {\r\n    }\r\n\r\n    function initialize(bytes calldata data) override external {\r\n        revert(\"METHOD NOT IMPLEMENTED\");\r\n    }\r\n\r\n    function swap(\r\n        IERC20 fromToken,\r\n        IERC20 toToken,\r\n        uint256 fromAmount,\r\n        uint256 networkFee,\r\n        Utils.Route[] calldata route\r\n    )\r\n        external\r\n        override\r\n        payable\r\n    {\r\n        for (uint256 i = 0; i < route.length; i++) {\r\n            if (route[i].index == 0) {\r\n                //swap on ChaiExchange\r\n                swapOnChai(\r\n                    fromToken,\r\n                    toToken,\r\n                    fromAmount.mul(route[i].percent).div(10000)\r\n                );\r\n            }\r\n            else if (route[i].index == 1) {\r\n                //swap on Uniswap\r\n                swapOnUniswapV1(\r\n                    fromToken,\r\n                    toToken,\r\n                    fromAmount.mul(route[i].percent).div(10000)\r\n                );\r\n            }\r\n            else if (route[i].index == 2) {\r\n                //swap on Smoothy\r\n                swapOnSmoothyV1(\r\n                    fromToken,\r\n                    toToken,\r\n                    fromAmount.mul(route[i].percent).div(10000),\r\n                    route[i].targetExchange,\r\n                    route[i].payload\r\n                );\r\n            }\r\n            else if (route[i].index == 3) {\r\n                //swap on BZX\r\n                swapOnBzx(\r\n                    fromToken,\r\n                    toToken,\r\n                    fromAmount.mul(route[i].percent).div(10000),\r\n                    route[i].payload\r\n                );\r\n            }\r\n            else if (route[i].index == 4) {\r\n                //swap on BProtocol\r\n                swapOnBProtocol(\r\n                    fromToken,\r\n                    toToken,\r\n                    fromAmount.mul(route[i].percent).div(10000),\r\n                    route[i].targetExchange,\r\n                    route[i].payload\r\n                );\r\n            }\r\n            else if (route[i].index == 5) {\r\n                //swap on aavee\r\n                swapOnAavee(\r\n                    fromToken,\r\n                    toToken,\r\n                    fromAmount.mul(route[i].percent).div(10000),\r\n                    route[i].targetExchange,\r\n                    route[i].payload\r\n                );\r\n            }\r\n            else if (route[i].index == 6) {\r\n                //swap on KyberDmm\r\n                swapOnKyberDmm(\r\n                    fromToken,\r\n                    toToken,\r\n                    fromAmount.mul(route[i].percent).div(10000),\r\n                    route[i].targetExchange,\r\n                    route[i].payload\r\n                );\r\n            }\r\n            else {\r\n                revert(\"Index not supported\");\r\n            }\r\n        }\r\n    }\r\n}","ABI":"[{\"inputs\":[{\"internalType\":\"uint16\",\"name\":\"aaveeRefCode\",\"type\":\"uint16\"},{\"internalType\":\"address\",\"name\":\"aaveeSpender\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"uniswapFactory\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"chai\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"dai\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"weth\",\"type\":\"address\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"inputs\":[],\"name\":\"WETH\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"chai\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"dai\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"factory\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes\",\"name\":\"data\",\"type\":\"bytes\"}],\"name\":\"initialize\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"refCodeV1\",\"outputs\":[{\"internalType\":\"uint16\",\"name\":\"\",\"type\":\"uint16\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"spender\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"contract IERC20\",\"name\":\"fromToken\",\"type\":\"address\"},{\"internalType\":\"contract IERC20\",\"name\":\"toToken\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"fromAmount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"networkFee\",\"type\":\"uint256\"},{\"components\":[{\"internalType\":\"uint256\",\"name\":\"index\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"targetExchange\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"percent\",\"type\":\"uint256\"},{\"internalType\":\"bytes\",\"name\":\"payload\",\"type\":\"bytes\"},{\"internalType\":\"uint256\",\"name\":\"networkFee\",\"type\":\"uint256\"}],\"internalType\":\"struct Utils.Route[]\",\"name\":\"route\",\"type\":\"tuple[]\"}],\"name\":\"swap\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"}]","ContractName":"Adapter03","CompilerVersion":"v0.7.5+commit.eb77ed08","OptimizationUsed":"1","Runs":"1000000","ConstructorArguments":"00000000000000000000000000000000000000000000000000000000000000010000000000000000000000003dfd23a6c5e8bbcfc9581d2e864a68feb6a076d3000000000000000000000000c0a47dfe034b400b47bdad5fecda2621de6c4d9500000000000000000000000006af07097c9eeb7fd685c692751d5c66db49c2150000000000000000000000006b175474e89094c44da98b954eedeac495271d0f000000000000000000000000c02aaa39b223fe8d0a0e5c4f27ead9083c756cc2","EVMVersion":"Default","Library":"","LicenseType":"None","Proxy":"0","Implementation":"","SwarmSource":"ipfs://2a8f020500f7f74ca79f6ba4e40e5927af433251cf2a40e8b2bd6b7e6027da1f"}]}