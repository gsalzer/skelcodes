{"status":"1","message":"OK","result":[{"SourceCode":"{{\r\n  \"language\": \"Solidity\",\r\n  \"sources\": {\r\n    \"/src/active/MultiSender.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\r\\n// @nhancv\\r\\npragma solidity 0.8.4;\\r\\n\\r\\nimport \\\"@openzeppelin/contracts/token/ERC20/IERC20.sol\\\";\\r\\nimport \\\"@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol\\\";\\r\\nimport \\\"./interfaces/IHookSender.sol\\\";\\r\\n\\r\\n// ---------------------------------------------------------------------\\r\\n// MultiSender\\r\\n// Maximum 700 addresses per TX\\r\\n// ---------------------------------------------------------------------\\r\\ncontract MultiSender is OwnableUpgradeable {\\r\\n  event LogEthSent(uint total);\\r\\n  event LogTokenSent(address token, uint total);\\r\\n  event LogHookSent(address hook);\\r\\n\\r\\n  uint public txFee;\\r\\n  uint public VIPFee;\\r\\n\\r\\n  /**\\r\\n   * @dev Upgradable initializer\\r\\n   */\\r\\n  function __MultiSender_init() public initializer {\\r\\n    __Ownable_init();\\r\\n  }\\r\\n\\r\\n  mapping(address => bool) public vipList;\\r\\n\\r\\n  function registerVIP() public payable {\\r\\n    require(msg.value >= VIPFee, \\\"0x00000000001\\\");\\r\\n    require(!vipList[_msgSender()], \\\"0x00000000017\\\");\\r\\n    vipList[_msgSender()] = true;\\r\\n    require(payable(_msgSender()).send(msg.value), \\\"0x00000000002\\\");\\r\\n  }\\r\\n\\r\\n  function addToVIPList(address[] memory _vipList) public onlyOwner {\\r\\n    for (uint i = 0; i < _vipList.length; i++) {\\r\\n      vipList[_vipList[i]] = true;\\r\\n    }\\r\\n  }\\r\\n\\r\\n  function removeFromVIPList(address[] memory _vipList) public onlyOwner {\\r\\n    for (uint i = 0; i < _vipList.length; i++) {\\r\\n      vipList[_vipList[i]] = false;\\r\\n    }\\r\\n  }\\r\\n\\r\\n  function isVIP(address _addr) public view returns (bool) {\\r\\n    return _addr == owner() || vipList[_addr];\\r\\n  }\\r\\n\\r\\n  function setVIPFee(uint _fee) public onlyOwner {\\r\\n    VIPFee = _fee;\\r\\n  }\\r\\n\\r\\n  function setTxFee(uint _fee) public onlyOwner {\\r\\n    txFee = _fee;\\r\\n  }\\r\\n\\r\\n  function ethSendSameValue(address[] memory _to, uint _value) public payable {\\r\\n    // Validate fee\\r\\n    uint totalAmount = _to.length * _value;\\r\\n    uint totalEthValue = msg.value;\\r\\n    if (isVIP(_msgSender())) {\\r\\n      require(totalEthValue >= totalAmount, \\\"0x00000000003\\\");\\r\\n    } else {\\r\\n      require(totalEthValue >= (totalAmount + txFee), \\\"0x00000000004\\\");\\r\\n    }\\r\\n\\r\\n    // Send\\r\\n    // solhint-disable multiple-sends\\r\\n    for (uint i = 0; i < _to.length; i++) {\\r\\n      require(payable(_to[i]).send(_value), \\\"0x00000000005\\\");\\r\\n    }\\r\\n\\r\\n    emit LogEthSent(msg.value);\\r\\n  }\\r\\n\\r\\n  function ethSendDifferentValue(address[] memory _to, uint[] memory _value) public payable {\\r\\n    require(_to.length == _value.length, \\\"0x00000000006\\\");\\r\\n\\r\\n    uint totalEthValue = msg.value;\\r\\n\\r\\n    // Validate fee\\r\\n    uint totalAmount = 0;\\r\\n    for (uint i = 0; i < _to.length; i++) {\\r\\n      totalAmount = totalAmount + _value[i];\\r\\n    }\\r\\n\\r\\n    if (isVIP(_msgSender())) {\\r\\n      require(totalEthValue >= totalAmount, \\\"0x00000000007\\\");\\r\\n    } else {\\r\\n      require(totalEthValue >= (totalAmount + txFee), \\\"0x00000000008\\\");\\r\\n    }\\r\\n\\r\\n    // Send\\r\\n    for (uint i = 0; i < _to.length; i++) {\\r\\n      require(payable(_to[i]).send(_value[i]), \\\"0x00000000009\\\");\\r\\n    }\\r\\n\\r\\n    emit LogEthSent(msg.value);\\r\\n  }\\r\\n\\r\\n  function coinSendSameValue(\\r\\n    address _tokenAddress,\\r\\n    address[] memory _to,\\r\\n    uint _value\\r\\n  ) public payable {\\r\\n    // Validate fee\\r\\n    uint totalEthValue = msg.value;\\r\\n    if (!isVIP(_msgSender())) {\\r\\n      require(totalEthValue >= txFee, \\\"0x00000000010\\\");\\r\\n    }\\r\\n\\r\\n    // Validate token balance\\r\\n    IERC20 token = IERC20(_tokenAddress);\\r\\n    uint tokenBalance = token.balanceOf(_msgSender());\\r\\n    uint totalAmount = _to.length * _value;\\r\\n    require(tokenBalance >= totalAmount, \\\"0x00000000011\\\");\\r\\n\\r\\n    // Send\\r\\n    for (uint i = 0; i < _to.length; i++) {\\r\\n      token.transferFrom(_msgSender(), _to[i], _value);\\r\\n    }\\r\\n\\r\\n    emit LogTokenSent(_tokenAddress, totalAmount);\\r\\n  }\\r\\n\\r\\n  function coinSendDifferentValue(\\r\\n    address _tokenAddress,\\r\\n    address[] memory _to,\\r\\n    uint[] memory _value\\r\\n  ) public payable {\\r\\n    require(_to.length == _value.length, \\\"0x00000000012\\\");\\r\\n\\r\\n    // Validate fee\\r\\n    uint totalEthValue = msg.value;\\r\\n    if (!isVIP(_msgSender())) {\\r\\n      require(totalEthValue >= txFee, \\\"0x00000000013\\\");\\r\\n    }\\r\\n\\r\\n    // Validate token balance\\r\\n    IERC20 token = IERC20(_tokenAddress);\\r\\n    uint tokenBalance = token.balanceOf(_msgSender());\\r\\n    uint totalAmount = 0;\\r\\n    for (uint i = 0; i < _to.length; i++) {\\r\\n      totalAmount = totalAmount + _value[i];\\r\\n    }\\r\\n    require(tokenBalance >= totalAmount, \\\"0x00000000014\\\");\\r\\n\\r\\n    // Send\\r\\n    for (uint i = 0; i < _to.length; i++) {\\r\\n      token.transferFrom(_msgSender(), _to[i], _value[i]);\\r\\n    }\\r\\n\\r\\n    emit LogTokenSent(_tokenAddress, totalAmount);\\r\\n  }\\r\\n\\r\\n  function hookSend(address _hookAddress, uint maxLoop) public payable {\\r\\n    // Validate fee\\r\\n    uint totalEthValue = msg.value;\\r\\n    if (!isVIP(_msgSender())) {\\r\\n      require(totalEthValue >= txFee, \\\"0x00000000015\\\");\\r\\n    }\\r\\n\\r\\n    // Loop\\r\\n    IHookSender hook = IHookSender(_hookAddress);\\r\\n    for (uint i = 0; i < maxLoop; i++) {\\r\\n      require(hook.multiSenderLoop(_msgSender(), i, maxLoop), \\\"0x00000000016\\\");\\r\\n    }\\r\\n\\r\\n    emit LogHookSent(_hookAddress);\\r\\n  }\\r\\n\\r\\n  function getEthBalance() public view returns (uint) {\\r\\n    return address(this).balance;\\r\\n  }\\r\\n\\r\\n  function withdrawEthBalance() external onlyOwner {\\r\\n    payable(owner()).transfer(getEthBalance());\\r\\n  }\\r\\n\\r\\n  function getTokenBalance(address _tokenAddress) public view returns (uint) {\\r\\n    IERC20 token = IERC20(_tokenAddress);\\r\\n    return token.balanceOf(address(this));\\r\\n  }\\r\\n\\r\\n  function withdrawTokenBalance(address _tokenAddress) external onlyOwner {\\r\\n    IERC20 token = IERC20(_tokenAddress);\\r\\n    token.transfer(owner(), getTokenBalance(_tokenAddress));\\r\\n  }\\r\\n}\\r\\n\"\r\n    },\r\n    \"/src/active/interfaces/IHookSender.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\r\\n// @nhancv\\r\\npragma solidity 0.8.4;\\r\\n\\r\\n// ---------------------------------------------------------------------\\r\\n// HookSender\\r\\n// To make MultiSender can be a unlimited integration\\r\\n// ---------------------------------------------------------------------\\r\\nabstract contract IHookSender {\\r\\n  function multiSenderLoop(\\r\\n    address caller,\\r\\n    uint index,\\r\\n    uint maxLoop\\r\\n  ) public virtual returns (bool success);\\r\\n}\\r\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/token/ERC20/IERC20.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC20 standard as defined in the EIP.\\n */\\ninterface IERC20 {\\n    /**\\n     * @dev Returns the amount of tokens in existence.\\n     */\\n    function totalSupply() external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the amount of tokens owned by `account`.\\n     */\\n    function balanceOf(address account) external view returns (uint256);\\n\\n    /**\\n     * @dev Moves `amount` tokens from the caller's account to `recipient`.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transfer(address recipient, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Returns the remaining number of tokens that `spender` will be\\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\\n     * zero by default.\\n     *\\n     * This value changes when {approve} or {transferFrom} are called.\\n     */\\n    function allowance(address owner, address spender) external view returns (uint256);\\n\\n    /**\\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\\n     * that someone may use both the old and the new allowance by unfortunate\\n     * transaction ordering. One possible solution to mitigate this race\\n     * condition is to first reduce the spender's allowance to 0 and set the\\n     * desired value afterwards:\\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address spender, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Moves `amount` tokens from `sender` to `recipient` using the\\n     * allowance mechanism. `amount` is then deducted from the caller's\\n     * allowance.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(\\n        address sender,\\n        address recipient,\\n        uint256 amount\\n    ) external returns (bool);\\n\\n    /**\\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\\n     * another (`to`).\\n     *\\n     * Note that `value` may be zero.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 value);\\n\\n    /**\\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\\n     * a call to {approve}. `value` is the new allowance.\\n     */\\n    event Approval(address indexed owner, address indexed spender, uint256 value);\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts-upgradeable/utils/ContextUpgradeable.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\nimport \\\"../proxy/utils/Initializable.sol\\\";\\n\\n/**\\n * @dev Provides information about the current execution context, including the\\n * sender of the transaction and its data. While these are generally available\\n * via msg.sender and msg.data, they should not be accessed in such a direct\\n * manner, since when dealing with meta-transactions the account sending and\\n * paying for execution may not be the actual sender (as far as an application\\n * is concerned).\\n *\\n * This contract is only required for intermediate, library-like contracts.\\n */\\nabstract contract ContextUpgradeable is Initializable {\\n    function __Context_init() internal initializer {\\n        __Context_init_unchained();\\n    }\\n\\n    function __Context_init_unchained() internal initializer {\\n    }\\n    function _msgSender() internal view virtual returns (address) {\\n        return msg.sender;\\n    }\\n\\n    function _msgData() internal view virtual returns (bytes calldata) {\\n        return msg.data;\\n    }\\n    uint256[50] private __gap;\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev This is a base contract to aid in writing upgradeable contracts, or any kind of contract that will be deployed\\n * behind a proxy. Since a proxied contract can't have a constructor, it's common to move constructor logic to an\\n * external initializer function, usually called `initialize`. It then becomes necessary to protect this initializer\\n * function so it can only be called once. The {initializer} modifier provided by this contract will have this effect.\\n *\\n * TIP: To avoid leaving the proxy in an uninitialized state, the initializer function should be called as early as\\n * possible by providing the encoded function call as the `_data` argument to {ERC1967Proxy-constructor}.\\n *\\n * CAUTION: When used with inheritance, manual care must be taken to not invoke a parent initializer twice, or to ensure\\n * that all initializers are idempotent. This is not verified automatically as constructors are by Solidity.\\n */\\nabstract contract Initializable {\\n    /**\\n     * @dev Indicates that the contract has been initialized.\\n     */\\n    bool private _initialized;\\n\\n    /**\\n     * @dev Indicates that the contract is in the process of being initialized.\\n     */\\n    bool private _initializing;\\n\\n    /**\\n     * @dev Modifier to protect an initializer function from being invoked twice.\\n     */\\n    modifier initializer() {\\n        require(_initializing || !_initialized, \\\"Initializable: contract is already initialized\\\");\\n\\n        bool isTopLevelCall = !_initializing;\\n        if (isTopLevelCall) {\\n            _initializing = true;\\n            _initialized = true;\\n        }\\n\\n        _;\\n\\n        if (isTopLevelCall) {\\n            _initializing = false;\\n        }\\n    }\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../utils/ContextUpgradeable.sol\\\";\\nimport \\\"../proxy/utils/Initializable.sol\\\";\\n\\n/**\\n * @dev Contract module which provides a basic access control mechanism, where\\n * there is an account (an owner) that can be granted exclusive access to\\n * specific functions.\\n *\\n * By default, the owner account will be the one that deploys the contract. This\\n * can later be changed with {transferOwnership}.\\n *\\n * This module is used through inheritance. It will make available the modifier\\n * `onlyOwner`, which can be applied to your functions to restrict their use to\\n * the owner.\\n */\\nabstract contract OwnableUpgradeable is Initializable, ContextUpgradeable {\\n    address private _owner;\\n\\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\\n\\n    /**\\n     * @dev Initializes the contract setting the deployer as the initial owner.\\n     */\\n    function __Ownable_init() internal initializer {\\n        __Context_init_unchained();\\n        __Ownable_init_unchained();\\n    }\\n\\n    function __Ownable_init_unchained() internal initializer {\\n        _setOwner(_msgSender());\\n    }\\n\\n    /**\\n     * @dev Returns the address of the current owner.\\n     */\\n    function owner() public view virtual returns (address) {\\n        return _owner;\\n    }\\n\\n    /**\\n     * @dev Throws if called by any account other than the owner.\\n     */\\n    modifier onlyOwner() {\\n        require(owner() == _msgSender(), \\\"Ownable: caller is not the owner\\\");\\n        _;\\n    }\\n\\n    /**\\n     * @dev Leaves the contract without owner. It will not be possible to call\\n     * `onlyOwner` functions anymore. Can only be called by the current owner.\\n     *\\n     * NOTE: Renouncing ownership will leave the contract without an owner,\\n     * thereby removing any functionality that is only available to the owner.\\n     */\\n    function renounceOwnership() public virtual onlyOwner {\\n        _setOwner(address(0));\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Can only be called by the current owner.\\n     */\\n    function transferOwnership(address newOwner) public virtual onlyOwner {\\n        require(newOwner != address(0), \\\"Ownable: new owner is the zero address\\\");\\n        _setOwner(newOwner);\\n    }\\n\\n    function _setOwner(address newOwner) private {\\n        address oldOwner = _owner;\\n        _owner = newOwner;\\n        emit OwnershipTransferred(oldOwner, newOwner);\\n    }\\n    uint256[49] private __gap;\\n}\\n\"\r\n    }\r\n  },\r\n  \"settings\": {\r\n    \"remappings\": [],\r\n    \"optimizer\": {\r\n      \"enabled\": false,\r\n      \"runs\": 200\r\n    },\r\n    \"evmVersion\": \"byzantium\",\r\n    \"libraries\": {},\r\n    \"outputSelection\": {\r\n      \"*\": {\r\n        \"*\": [\r\n          \"evm.bytecode\",\r\n          \"evm.deployedBytecode\",\r\n          \"abi\"\r\n        ]\r\n      }\r\n    }\r\n  }\r\n}}","ABI":"[{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"total\",\"type\":\"uint256\"}],\"name\":\"LogEthSent\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"hook\",\"type\":\"address\"}],\"name\":\"LogHookSent\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"token\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"total\",\"type\":\"uint256\"}],\"name\":\"LogTokenSent\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"VIPFee\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"__MultiSender_init\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address[]\",\"name\":\"_vipList\",\"type\":\"address[]\"}],\"name\":\"addToVIPList\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_tokenAddress\",\"type\":\"address\"},{\"internalType\":\"address[]\",\"name\":\"_to\",\"type\":\"address[]\"},{\"internalType\":\"uint256[]\",\"name\":\"_value\",\"type\":\"uint256[]\"}],\"name\":\"coinSendDifferentValue\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_tokenAddress\",\"type\":\"address\"},{\"internalType\":\"address[]\",\"name\":\"_to\",\"type\":\"address[]\"},{\"internalType\":\"uint256\",\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"coinSendSameValue\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address[]\",\"name\":\"_to\",\"type\":\"address[]\"},{\"internalType\":\"uint256[]\",\"name\":\"_value\",\"type\":\"uint256[]\"}],\"name\":\"ethSendDifferentValue\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address[]\",\"name\":\"_to\",\"type\":\"address[]\"},{\"internalType\":\"uint256\",\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"ethSendSameValue\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getEthBalance\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_tokenAddress\",\"type\":\"address\"}],\"name\":\"getTokenBalance\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_hookAddress\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"maxLoop\",\"type\":\"uint256\"}],\"name\":\"hookSend\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_addr\",\"type\":\"address\"}],\"name\":\"isVIP\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"registerVIP\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address[]\",\"name\":\"_vipList\",\"type\":\"address[]\"}],\"name\":\"removeFromVIPList\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_fee\",\"type\":\"uint256\"}],\"name\":\"setTxFee\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_fee\",\"type\":\"uint256\"}],\"name\":\"setVIPFee\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"txFee\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"vipList\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"withdrawEthBalance\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_tokenAddress\",\"type\":\"address\"}],\"name\":\"withdrawTokenBalance\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}]","ContractName":"MultiSender","CompilerVersion":"v0.8.4+commit.c7e474f2","OptimizationUsed":"0","Runs":"200","ConstructorArguments":"","EVMVersion":"byzantium","Library":"","LicenseType":"","Proxy":"0","Implementation":"","SwarmSource":""}]}