{"status":"1","message":"OK","result":[{"SourceCode":"/**\r\n *Submitted for verification at arbiscan.io on 2021-10-29\r\n*/\r\n\r\npragma solidity ^0.8.0;\r\n\r\n/**\r\n * @title ERC20 interface\r\n * @dev see https://github.com/ethereum/EIPs/issues/20\r\n */\r\ninterface IERC20 {\r\n  function totalSupply() external view returns (uint256);\r\n\r\n  function balanceOf(address who) external view returns (uint256);\r\n\r\n  function allowance(address owner, address spender)\r\n    external view returns (uint256);\r\n\r\n  function transfer(address to, uint256 value) external returns (bool);\r\n\r\n  function approve(address spender, uint256 value)\r\n    external returns (bool);\r\n\r\n  function transferFrom(address from, address to, uint256 value)\r\n    external returns (bool);\r\n\r\n  event Transfer(\r\n    address indexed from,\r\n    address indexed to,\r\n    uint256 value\r\n  );\r\n\r\n  event Approval(\r\n    address indexed owner,\r\n    address indexed spender,\r\n    uint256 value\r\n  );\r\n}\r\n\r\n\r\n/**\r\n * @title SafeERC20\r\n * @dev Wrappers around ERC20 operations that throw on failure.\r\n * To use this library you can add a `using SafeERC20 for ERC20;` statement to your contract,\r\n * which allows you to call the safe operations as `token.safeTransfer(...)`, etc.\r\n */\r\nlibrary SafeERC20 {\r\n\r\n  function safeTransfer(\r\n    IERC20 token,\r\n    address to,\r\n    uint256 value\r\n  )\r\n    internal\r\n  {\r\n    require(token.transfer(to, value));\r\n  }\r\n\r\n  function safeTransferFrom(\r\n    IERC20 token,\r\n    address from,\r\n    address to,\r\n    uint256 value\r\n  )\r\n    internal\r\n  {\r\n    require(token.transferFrom(from, to, value));\r\n  }\r\n\r\n  function safeApprove(\r\n    IERC20 token,\r\n    address spender,\r\n    uint256 value\r\n  )\r\n    internal\r\n  {\r\n    // safeApprove should only be called when setting an initial allowance, \r\n    // or when resetting it to zero. To increase and decrease it, use \r\n    // 'safeIncreaseAllowance' and 'safeDecreaseAllowance'\r\n    require((value == 0) || (token.allowance(msg.sender, spender) == 0));\r\n    require(token.approve(spender, value));\r\n  }\r\n\r\n  function safeIncreaseAllowance(\r\n    IERC20 token,\r\n    address spender,\r\n    uint256 value\r\n  )\r\n    internal\r\n  {\r\n    uint256 newAllowance = token.allowance(address(this), spender) + value;\r\n    require(token.approve(spender, newAllowance));\r\n  }\r\n\r\n  function safeDecreaseAllowance(\r\n    IERC20 token,\r\n    address spender,\r\n    uint256 value\r\n  )\r\n    internal\r\n  {\r\n    uint256 newAllowance = token.allowance(address(this), spender) - value;\r\n    require(token.approve(spender, newAllowance));\r\n  }\r\n}\r\n\r\n/**\r\n * @title ERC20Vesting\r\n * @dev A token holder contract that can release its token balance gradually like a\r\n * typical vesting scheme, with a cliff and vesting period.\r\n * \r\n * Note: Deploy one Vesting contract per user\r\n *\r\n * Note you do not want to transfer tokens you have withdrawn back to this contract. This will\r\n * result in some fraction of your transferred tokens being locked up again.\r\n *\r\n * Updated from Code taken from OpenZeppelin/openzeppelin-solidity at commit 4115686b4f8c1abf29f1f855eb15308076159959.\r\n */\r\ncontract ERC20Vesting {\r\n  using SafeERC20 for IERC20;\r\n\r\n  event TokensReleased(address token, uint256 amount);\r\n\r\n  // beneficiary of tokens after they are released\r\n  address public beneficiary;\r\n\r\n  uint256 public cliff;\r\n  uint256 public start;\r\n  uint256 public duration;\r\n\r\n  mapping (address => uint256) public released;\r\n  /**\r\n   * @dev Creates a vesting contract that vests its balance of any ERC20 token to the\r\n   * beneficiary, gradually in a linear fashion until start + duration. By then all\r\n   * of the balance will have vested.\r\n   * @param beneficiary_ address of the beneficiary to whom vested tokens are transferred\r\n   * @param cliffDuration_ duration in seconds of the cliff in which tokens will begin to vest\r\n   * @param duration_ duration in seconds of the period in which the tokens will vest\r\n   */\r\n  constructor(\r\n    address beneficiary_,\r\n    uint256 cliffDuration_,\r\n    uint256 duration_\r\n  )\r\n  {\r\n    require(beneficiary_ != address(0));\r\n    require(cliffDuration_ <= duration_);\r\n    require(duration_ > 0);\r\n    \r\n    beneficiary = beneficiary_;\r\n    duration = duration_;\r\n    cliff = block.timestamp + cliffDuration_;\r\n    start = block.timestamp;\r\n  }\r\n  \r\n   /**\r\n   * @dev The current beneficiary is able to set the next beneficiary if they'd\r\n   * like to renounce their share.\r\n   * @param newBeneficiary the address of the new beneficiary\r\n   */\r\n  function setBeneficiary(address newBeneficiary) external {\r\n    require(msg.sender == beneficiary, \"Not beneficiary\");\r\n    beneficiary = newBeneficiary;\r\n  }\r\n\r\n  /**\r\n   * @return the amount of token that can be released at the current block timestamp.\r\n   */\r\n  function releasable(address token) external view returns(uint256) {\r\n    return _releasableAmount(IERC20(token));\r\n  }\r\n\r\n  /**\r\n   * @notice Transfers vested tokens to beneficiary.\r\n   * @param token ERC20 token which is being vested\r\n   */\r\n  function release(IERC20 token) external {\r\n    uint256 unreleased = _releasableAmount(token);\r\n\r\n    require(unreleased > 0);\r\n    address tokenAddress = address(token);\r\n    released[tokenAddress] = released[tokenAddress] + unreleased;\r\n\r\n    token.safeTransfer(beneficiary, unreleased);\r\n\r\n    emit TokensReleased(tokenAddress, unreleased);\r\n  }\r\n\r\n  /**\r\n   * @dev Calculates the amount that has already vested but hasn't been released yet.\r\n   * @param token ERC20 token which is being vested\r\n   */\r\n  function _releasableAmount(IERC20 token) private view returns (uint256) {\r\n    return _vestedAmount(token) - released[address(token)];\r\n  }\r\n\r\n  /**\r\n   * @dev Calculates the amount that has already vested.\r\n   * @param token ERC20 token which is being vested\r\n   */\r\n  function _vestedAmount(IERC20 token) private view returns (uint256) {\r\n    uint256 currentBalance = token.balanceOf(address(this));\r\n    uint256 totalBalance = currentBalance + released[address(token)];\r\n\r\n    if (block.timestamp < cliff) {\r\n      return 0;\r\n    } else if (block.timestamp >= start + duration) {\r\n      return totalBalance;\r\n    } else {\r\n      return (totalBalance * (block.timestamp - start)) / duration;\r\n    }\r\n  }\r\n}","ABI":"[{\"inputs\":[{\"internalType\":\"address\",\"name\":\"beneficiary_\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"cliffDuration_\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"duration_\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"token\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"TokensReleased\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"beneficiary\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"cliff\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"duration\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"token\",\"type\":\"address\"}],\"name\":\"releasable\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"contract IERC20\",\"name\":\"token\",\"type\":\"address\"}],\"name\":\"release\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"released\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newBeneficiary\",\"type\":\"address\"}],\"name\":\"setBeneficiary\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"start\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"}]","ContractName":"ERC20Vesting","CompilerVersion":"v0.8.8+commit.dddeac2f","OptimizationUsed":"0","Runs":"200","ConstructorArguments":"000000000000000000000000ba57fce5c0ab8c871b7aa0f432f9450b3db5d82400000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000f0c8a0","EVMVersion":"Default","Library":"","LicenseType":"Unlicense","Proxy":"0","Implementation":"","SwarmSource":"ipfs://653413fa09ac5f7082b4b1ecc695e6c0db39b91315844d2d7fcbb68923cdc52e"}]}