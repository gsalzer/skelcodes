{"status":"1","message":"OK","result":[{"SourceCode":"// SPDX-License-Identifier: UNLICENSED\r\npragma solidity ^0.6.7;\r\n\r\nlibrary SafeMath {\r\n    function add(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        uint256 c = a + b;\r\n        require(c >= a, \"SafeMath: addition overflow\");\r\n        return c;\r\n    }\r\n    \r\n    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        return sub(a, b, \"SafeMath: subtraction overflow\");\r\n    }\r\n    \r\n    function sub(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\r\n        require(b <= a, errorMessage);\r\n        uint256 c = a - b;\r\n        return c;\r\n    }\r\n    \r\n    function mul(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        // Gas optimization: this is cheaper than requiring 'a' not being zero, but the\r\n        // benefit is lost if 'b' is also tested.\r\n        // See: https://github.com/OpenZeppelin/openzeppelin-contracts/pull/522\r\n        if (a == 0) {\r\n            return 0;\r\n        }\r\n        uint256 c = a * b;\r\n        require(c / a == b, \"SafeMath: multiplication overflow\");\r\n        return c;\r\n    }\r\n    \r\n    function div(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        return div(a, b, \"SafeMath: division by zero\");\r\n    }\r\n    \r\n    function div(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\r\n        // Solidity only automatically asserts when dividing by 0\r\n        require(b > 0, errorMessage);\r\n        uint256 c = a / b;\r\n        // assert(a == b * c + a % b); // There is no case in which this doesn't hold\r\n        return c;\r\n    }\r\n    \r\n    function mod(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        return mod(a, b, \"SafeMath: modulo by zero\");\r\n    }\r\n    \r\n    function mod(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\r\n        require(b != 0, errorMessage);\r\n        return a % b;\r\n    }\r\n}\r\n\r\ninterface IERC1155 {\r\n    function balanceOf(address _owner, uint256 _id) external view returns (uint256);\r\n    function safeTransferFrom(address _from, address _to, uint256 _id, uint256 _value, bytes calldata _data) external;\r\n}\r\n\r\ncontract EnglishAuctionReservePrice {\r\n    using SafeMath for uint256;\r\n    using SafeMath for uint8;\r\n    // System settings\r\n    uint8 public percentageIncreasePerBid;\r\n    uint256 public stakingRewardPercentageBasisPoints;\r\n    uint256 public tokenId;\r\n    address public tokenAddress;\r\n    bool public ended = false;\r\n    address public controller;\r\n    address public deployer;\r\n    \r\n    // Current winning bid\r\n    uint256 public lastBid;\r\n    address payable public winning;\r\n    \r\n    uint256 public length;\r\n    uint256 public minimumStartTime;\r\n    uint256 public startTime;\r\n    uint256 public endTime;\r\n    \r\n    address public hausAddress;\r\n    address public stakingSwapContract;\r\n    \r\n    event Bid(address who, uint256 amount);\r\n    event Won(address who, uint256 amount);\r\n    \r\n    constructor(\r\n        uint256 _tokenId,\r\n        address _tokenAddress,\r\n        uint256 _reservePriceWei,\r\n        uint256 _minimumStartTime,\r\n        uint256 _stakingRewardPercentageBasisPoints,\r\n        uint8 _percentageIncreasePerBid,\r\n        address _hausAddress,\r\n        address _stakingSwapContract\r\n    ) public {\r\n        tokenAddress = address(_tokenAddress);\r\n        tokenId = _tokenId;\r\n        lastBid = _reservePriceWei;\r\n        percentageIncreasePerBid = _percentageIncreasePerBid;\r\n        stakingSwapContract = _stakingSwapContract;\r\n        hausAddress = _hausAddress;\r\n        controller = msg.sender;\r\n        minimumStartTime = _minimumStartTime;\r\n        deployer = msg.sender;\r\n        stakingRewardPercentageBasisPoints = _stakingRewardPercentageBasisPoints;\r\n    }\r\n    \r\n    function bid() public payable {\r\n        require(msg.sender == tx.origin, \"no contracts\");\r\n        require(block.timestamp >= minimumStartTime, \"Bidding has not opened\");\r\n        \r\n        // Give back the last bidders money\r\n        if (winning != address(0)) {\r\n            require(block.timestamp >= startTime, \"Auction not started\");\r\n            require(block.timestamp < endTime, \"Auction ended\");\r\n            uint8 base = 100;\r\n            uint256 multiplier = base.add(percentageIncreasePerBid);\r\n            require(msg.value >= lastBid.mul(multiplier).div(100), \"Bid too small\"); // % increase\r\n            winning.transfer(lastBid);\r\n        } else {\r\n            require(msg.value >= lastBid, \"Bid too small\"); // no increase required for reserve price to be met\r\n            // First bid, reserve met, start auction\r\n            startTime = block.timestamp;\r\n            length = 24 hours;\r\n            endTime = startTime + length;\r\n        }\r\n        \r\n        if (endTime - now < 15 minutes) {\r\n            endTime = now + 15 minutes;\r\n        }\r\n        \r\n        lastBid = msg.value;\r\n        winning = msg.sender;\r\n        emit Bid(msg.sender, msg.value);\r\n    }\r\n    \r\n    function end() public {\r\n        require(!ended, \"end already called\");\r\n        require(winning != address(0), \"no bids\");\r\n        require(!live(), \"Auction live\");\r\n        // transfer erc1155 to winner\r\n        IERC1155(tokenAddress).safeTransferFrom(address(this), winning, tokenId, 1, new bytes(0x0)); // Will transfer IERC1155 from current owner to new owner\r\n        uint256 stakingReward = address(this).balance.mul(stakingRewardPercentageBasisPoints).div(10000);\r\n        (bool stakingRewardSuccess, ) = stakingSwapContract.call{value: stakingReward}(\"\");\r\n        require(stakingRewardSuccess, \"Staking reward transfer failed.\");\r\n        (bool successMultisig, ) = hausAddress.call{value: address(this).balance}(\"\");\r\n        require(successMultisig, \"Multisig transfer failed.\");\r\n        ended = true;\r\n        emit Won(winning, lastBid);\r\n    }\r\n    \r\n    function pull() public {\r\n        require(msg.sender == controller, \"must be controller\");\r\n        require(!ended, \"end already called\");\r\n        require(winning == address(0), \"There were bids\");\r\n        require(!live(), \"Auction live\");\r\n        // transfer erc1155 to controller\r\n        IERC1155(tokenAddress).safeTransferFrom(address(this), controller, tokenId, 1, new bytes(0x0));\r\n        ended = true;\r\n    }\r\n    \r\n    function live() public view returns(bool) {\r\n        return block.timestamp < endTime;\r\n    }\r\n\r\n    function containsAuctionNFT() public view returns(bool) {\r\n        return IERC1155(tokenAddress).balanceOf(address(this), tokenId) > 0;\r\n    }\r\n    \r\n    function onERC1155Received(address, address, uint256, uint256, bytes calldata) external pure returns(bytes4) {\r\n        return bytes4(keccak256(\"onERC1155Received(address,address,uint256,uint256,bytes)\"));\r\n    }\r\n}","ABI":"[{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_tokenId\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"_tokenAddress\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_reservePriceWei\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_minimumStartTime\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_stakingRewardPercentageBasisPoints\",\"type\":\"uint256\"},{\"internalType\":\"uint8\",\"name\":\"_percentageIncreasePerBid\",\"type\":\"uint8\"},{\"internalType\":\"address\",\"name\":\"_hausAddress\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_stakingSwapContract\",\"type\":\"address\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"who\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"Bid\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"who\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"Won\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"bid\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"containsAuctionNFT\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"controller\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"deployer\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"end\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"endTime\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"ended\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"hausAddress\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"lastBid\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"length\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"live\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"minimumStartTime\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"},{\"internalType\":\"bytes\",\"name\":\"\",\"type\":\"bytes\"}],\"name\":\"onERC1155Received\",\"outputs\":[{\"internalType\":\"bytes4\",\"name\":\"\",\"type\":\"bytes4\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"percentageIncreasePerBid\",\"outputs\":[{\"internalType\":\"uint8\",\"name\":\"\",\"type\":\"uint8\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"pull\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"stakingRewardPercentageBasisPoints\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"stakingSwapContract\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"startTime\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"tokenAddress\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"tokenId\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"winning\",\"outputs\":[{\"internalType\":\"address payable\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"}]","ContractName":"EnglishAuctionReservePrice","CompilerVersion":"v0.6.12+commit.27d51765","OptimizationUsed":"0","Runs":"200","ConstructorArguments":"00000000000000000000000000000000000000000000000000000000000000a200000000000000000000000013bab10a88fc5f6c77b87878d71c9f1707d2688a0000000000000000000000000000000000000000000000001158e460913d0000000000000000000000000000000000000000000000000000000000006143943000000000000000000000000000000000000000000000000000000000000005dc000000000000000000000000000000000000000000000000000000000000000a0000000000000000000000004a25e18076ddcfd646ed14abc07286c2a4c1256a0000000000000000000000001c436a02ea4c17522e656f730537d68f71fab92c","EVMVersion":"Default","Library":"","LicenseType":"Unlicense","Proxy":"0","Implementation":"","SwarmSource":"ipfs://8311a12a62712f2c023da9d8369fb244d38ce1a0a3f70a1ab9b78872157ac9f3"}]}