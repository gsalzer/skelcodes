{"status":"1","message":"OK","result":[{"SourceCode":"// SPDX-License-Identifier: UNLICENSED\r\n\r\npragma solidity 0.8.4;\r\n\r\n/*______/\\\\\\\\\\\\\\\\\\__/\\\\\\_______/\\\\\\__/\\\\\\\\\\\\\\\\\\\\\\__/\\\\\\\\\\\\\\\\\\\\\\\\\\___\r\n _____/\\\\\\////////__\\///\\\\\\___/\\\\\\/__\\/////\\\\\\///__\\/\\\\\\/////////\\\\\\_\r\n  ___/\\\\\\/_____________\\///\\\\\\\\\\\\/________\\/\\\\\\_____\\/\\\\\\_______\\/\\\\\\_\r\n   __/\\\\\\_________________\\//\\\\\\\\__________\\/\\\\\\_____\\/\\\\\\\\\\\\\\\\\\\\\\\\\\/__\r\n    _\\/\\\\\\__________________\\/\\\\\\\\__________\\/\\\\\\_____\\/\\\\\\/////////____\r\n     _\\//\\\\\\_________________/\\\\\\\\\\\\_________\\/\\\\\\_____\\/\\\\\\_____________\r\n      __\\///\\\\\\_____________/\\\\\\////\\\\\\_______\\/\\\\\\_____\\/\\\\\\_____________\r\n       ____\\////\\\\\\\\\\\\\\\\\\__/\\\\\\/___\\///\\\\\\__/\\\\\\\\\\\\\\\\\\\\\\_\\/\\\\\\_____________\r\n        _______\\/////////__\\///_______\\///__\\///////////__\\///____________*/\r\n\r\n/**\r\n * @title CXIP Asset\r\n * @author CXIP-Labs\r\n * @notice A smart contract for providing a single entry for checking validity of collections and tokens minted through CXIP.\r\n * @dev Listen events broadcasted by this smart contract, to get all collections and NFT being minted with CXIP smart contracts.\r\n */\r\ncontract CxipAsset {\r\n\tfunction getRegistry () internal pure returns (ICxipRegistry) {\r\n\t\treturn ICxipRegistry (0xC267d41f81308D7773ecB3BDd863a902ACC01Ade);\r\n\t}\r\n\r\n\tusing Address for address;\r\n\r\n\tevent CollectionAdded (address collectionAddress, address creatorWallet);\r\n\tevent CollectionCreated (address collectionAddress, address creatorWallet);\r\n\tevent TokenAdded (address collectionAddress, address creatorWallet, uint256 tokenId);\r\n\tevent TokenCreated (address collectionAddress, address creatorWallet, uint256 tokenId);\r\n\r\n\tUriType private _defaultUri;\r\n\r\n\tmapping (address => address) _collectionIdentity;\r\n\r\n\tconstructor () {\r\n\t\t_defaultUri = UriType.ARWEAVE;\r\n\t}\r\n\r\n\tfunction defaultUriType () public view returns (UriType) {\r\n\t\treturn _defaultUri;\r\n\t}\r\n\r\n\tfunction AddCollection (address creator, address collection, bool fresh) public {\r\n\t\taddress identityAddress = msg.sender;\r\n\t\trequire (\r\n\t\t\tICxipProvenance (getRegistry ().getProvenance ()).isIdentityValid (identityAddress),\r\n\t\t\t'CXIP: invalid Identity contract'\r\n\t\t);\r\n\t\tICxipIdentity identity = ICxipIdentity (identityAddress);\r\n\t\trequire (identity.isWalletRegistered (creator), 'CXIP: creator wallet not owner');\r\n\t\trequire (identity.isCollectionRegistered (collection), 'CXIP: not registered collection');\r\n\t\tbool certified = false;\r\n\t\tif (fresh) {\r\n\t\t\trequire (identity.isNew (), 'CXIP: not a new collection');\r\n\t\t\tcertified = true;\r\n\t\t\temit CollectionCreated (collection, creator);\r\n\t\t} else {\r\n\t\t\temit CollectionAdded (collection, creator);\r\n\t\t}\r\n\t\t_collectionIdentity [collection] = identityAddress;\r\n\t}\r\n\r\n\tfunction AddToken (address creator, address collection, uint256 tokenId, bool fresh) public {\r\n\t\taddress identityAddress = msg.sender;\r\n\t\trequire (\r\n\t\t\tICxipProvenance (getRegistry ().getProvenance ()).isIdentityValid (identityAddress),\r\n\t\t\t'CXIP: invalid Identity contract'\r\n\t\t);\r\n\t\tICxipIdentity identity = ICxipIdentity (identityAddress);\r\n\t\trequire (identity.isWalletRegistered (creator), 'CXIP: creator wallet not owner');\r\n\t\trequire (identity.isCollectionRegistered (collection), 'CXIP: not registered collection');\r\n\t\trequire (identity.isTokenRegistered (collection, tokenId), 'CXIP: not registered token');\r\n\t\tbool certified = false;\r\n\t\tif (fresh) {\r\n\t\t\trequire (identity.isNew (), 'CXIP: not a new collection token');\r\n\t\t\tcertified = true;\r\n\t\t\temit TokenCreated (collection, creator, tokenId);\r\n\t\t} else {\r\n\t\t\temit TokenAdded (collection, creator, tokenId);\r\n\t\t}\r\n\t}\r\n\r\n\tfunction _getIdentity (address collection) internal view returns (ICxipIdentity) {\r\n\t\taddress identityAddress = _collectionIdentity [collection];\r\n\t\treturn ICxipIdentity (identityAddress);\r\n\t}\r\n\r\n\tfunction getCollectionIdentity (address collection) public view returns (address) {\r\n\t\tICxipIdentity identity = _getIdentity (collection);\r\n\t\treturn address (identity);\r\n\t}\r\n\r\n\tfunction getCollectionType (address collection) public view returns (InterfaceType) {\r\n\t\tICxipIdentity identity = _getIdentity (collection);\r\n\t\trequire (!address (identity).isZero (), 'CXIP: not registered collection');\r\n\t\treturn identity.getCollectionType (collection);\r\n\t}\r\n\r\n\tfunction isCollectionOpen (address collection) public view returns (bool) {\r\n\t\tICxipIdentity identity = _getIdentity (collection);\r\n\t\tif (address (identity).isZero ()) {\r\n\t\t\treturn false;\r\n\t\t}\r\n\t\treturn identity.isCollectionOpen (collection);\r\n\t}\r\n\r\n\tfunction isCollectionCertified (address collection) public view returns (bool) {\r\n\t\tICxipIdentity identity = _getIdentity (collection);\r\n\t\tif (address (identity).isZero ()) {\r\n\t\t\treturn false;\r\n\t\t}\r\n\t\treturn identity.isCollectionCertified (collection);\r\n\t}\r\n\r\n\tfunction isCollectionRegistered (address collection) public view returns (bool) {\r\n\t\tICxipIdentity identity = _getIdentity (collection);\r\n\t\tif (address (identity).isZero ()) {\r\n\t\t\treturn false;\r\n\t\t}\r\n\t\treturn identity.isCollectionRegistered (collection);\r\n\t}\r\n\r\n\tfunction isTokenCertified (address collection, uint256 tokenId) public view returns (bool) {\r\n\t\tICxipIdentity identity = _getIdentity (collection);\r\n\t\tif (address (identity).isZero ()) {\r\n\t\t\treturn false;\r\n\t\t}\r\n\t\treturn identity.isTokenCertified (collection, tokenId);\r\n\t}\r\n\r\n\tfunction isTokenRegistered (address collection, uint256 tokenId) public view returns (bool) {\r\n\t\tICxipIdentity identity = _getIdentity (collection);\r\n\t\tif (address (identity).isZero ()) {\r\n\t\t\treturn false;\r\n\t\t}\r\n\t\treturn identity.isTokenRegistered (collection, tokenId);\r\n\t}\r\n}\r\n\r\nlibrary Address {\r\n    function isContract(address account) internal view returns (bool) {\r\n        bytes32 codehash;\r\n        assembly {\r\n            codehash := extcodehash(account)\r\n        }\r\n        return (codehash != 0x0 && codehash != 0xc5d2460186f7233c927e7db2dcc703c0e500b653ca82273b7bfad8045d85a470);\r\n    }\r\n\r\n    function isZero(address account) internal pure returns (bool) {\r\n        return (account == address(0));\r\n    }\r\n}\r\n\r\nstruct CollectionData {\r\n    bytes32 name;\r\n    bytes32 name2;\r\n    bytes32 symbol;\r\n    address royalties;\r\n    uint96 bps;\r\n}\r\n\r\ninterface ICxipERC721 {\r\n    function arweaveURI(uint256 tokenId) external view returns (string memory);\r\n\r\n    function contractURI() external view returns (string memory);\r\n\r\n    function creator(uint256 tokenId) external view returns (address);\r\n\r\n    function httpURI(uint256 tokenId) external view returns (string memory);\r\n\r\n    function ipfsURI(uint256 tokenId) external view returns (string memory);\r\n\r\n    function name() external view returns (string memory);\r\n\r\n    function payloadHash(uint256 tokenId) external view returns (bytes32);\r\n\r\n    function payloadSignature(uint256 tokenId) external view returns (Verification memory);\r\n\r\n    function payloadSigner(uint256 tokenId) external view returns (address);\r\n\r\n    function supportsInterface(bytes4 interfaceId) external view returns (bool);\r\n\r\n    function symbol() external view returns (string memory);\r\n\r\n    function tokenURI(uint256 tokenId) external view returns (string memory);\r\n\r\n    /* Disabled due to tokenEnumeration not enabled.\r\n    function tokensOfOwner(\r\n        address wallet\r\n    ) external view returns (uint256[] memory);\r\n    */\r\n\r\n    function verifySHA256(bytes32 hash, bytes calldata payload) external pure returns (bool);\r\n\r\n    function approve(address to, uint256 tokenId) external;\r\n\r\n    function burn(uint256 tokenId) external;\r\n\r\n    function init(address newOwner, CollectionData calldata collectionData) external;\r\n\r\n    /* Disabled since this flow has not been agreed on.\r\n    function onERC721Received(\r\n        address operator,\r\n        address from,\r\n        uint256 tokenId,\r\n        bytes calldata data\r\n    ) external returns (bytes4);\r\n    */\r\n\r\n    function safeTransferFrom(\r\n        address from,\r\n        address to,\r\n        uint256 tokenId\r\n    ) external payable;\r\n\r\n    function safeTransferFrom(\r\n        address from,\r\n        address to,\r\n        uint256 tokenId,\r\n        bytes memory data\r\n    ) external payable;\r\n\r\n    function setApprovalForAll(address to, bool approved) external;\r\n\r\n    function transferFrom(\r\n        address from,\r\n        address to,\r\n        uint256 tokenId\r\n    ) external payable;\r\n\r\n    function transferFrom(\r\n        address from,\r\n        address to,\r\n        uint256 tokenId,\r\n        bytes memory data\r\n    ) external payable;\r\n\r\n    function cxipMint(uint256 id, TokenData calldata tokenData) external returns (uint256);\r\n\r\n    function setApprovalForAll(\r\n        address from,\r\n        address to,\r\n        bool approved\r\n    ) external;\r\n\r\n    function setName(bytes32 newName, bytes32 newName2) external;\r\n\r\n    function setSymbol(bytes32 newSymbol) external;\r\n\r\n    function transferOwnership(address newOwner) external;\r\n\r\n    /*\r\n    // Disabled due to tokenEnumeration not enabled.\r\n    function balanceOf(address wallet) external view returns (uint256);\r\n    */\r\n    function baseURI() external view returns (string memory);\r\n\r\n    function getApproved(uint256 tokenId) external view returns (address);\r\n\r\n    function getIdentity() external view returns (address);\r\n\r\n    function isApprovedForAll(address wallet, address operator) external view returns (bool);\r\n\r\n    function isOwner() external view returns (bool);\r\n\r\n    function owner() external view returns (address);\r\n\r\n    function ownerOf(uint256 tokenId) external view returns (address);\r\n\r\n    /* Disabled due to tokenEnumeration not enabled.\r\n    function tokenByIndex(uint256 index) external view returns (uint256);\r\n    */\r\n\r\n    /* Disabled due to tokenEnumeration not enabled.\r\n    function tokenOfOwnerByIndex(\r\n        address wallet,\r\n        uint256 index\r\n    ) external view returns (uint256);\r\n    */\r\n\r\n    /* Disabled due to tokenEnumeration not enabled.\r\n    function totalSupply() external view returns (uint256);\r\n    */\r\n\r\n    function totalSupply() external view returns (uint256);\r\n\r\n    function onERC721Received(\r\n        address operator,\r\n        address from,\r\n        uint256 tokenId,\r\n        bytes calldata data\r\n    ) external pure returns (bytes4);\r\n}\r\n\r\ninterface ICxipIdentity {\r\n    function addSignedWallet(\r\n        address newWallet,\r\n        uint8 v,\r\n        bytes32 r,\r\n        bytes32 s\r\n    ) external;\r\n\r\n    function addWallet(address newWallet) external;\r\n\r\n    function connectWallet() external;\r\n\r\n    function createERC721Token(\r\n        address collection,\r\n        uint256 id,\r\n        TokenData calldata tokenData,\r\n        Verification calldata verification\r\n    ) external returns (uint256);\r\n\r\n    function createERC721Collection(\r\n        bytes32 saltHash,\r\n        address collectionCreator,\r\n        Verification calldata verification,\r\n        CollectionData calldata collectionData\r\n    ) external returns (address);\r\n\r\n    function createCustomERC721Collection(\r\n        bytes32 saltHash,\r\n        address collectionCreator,\r\n        Verification calldata verification,\r\n        CollectionData calldata collectionData,\r\n        bytes32 slot,\r\n        bytes memory bytecode\r\n    ) external returns (address);\r\n\r\n    function init(address wallet, address secondaryWallet) external;\r\n\r\n    function getAuthorizer(address wallet) external view returns (address);\r\n\r\n    function getCollectionById(uint256 index) external view returns (address);\r\n\r\n    function getCollectionType(address collection) external view returns (InterfaceType);\r\n\r\n    function getWallets() external view returns (address[] memory);\r\n\r\n    function isCollectionCertified(address collection) external view returns (bool);\r\n\r\n    function isCollectionRegistered(address collection) external view returns (bool);\r\n\r\n    function isNew() external view returns (bool);\r\n\r\n    function isOwner() external view returns (bool);\r\n\r\n    function isTokenCertified(address collection, uint256 tokenId) external view returns (bool);\r\n\r\n    function isTokenRegistered(address collection, uint256 tokenId) external view returns (bool);\r\n\r\n    function isWalletRegistered(address wallet) external view returns (bool);\r\n\r\n    function listCollections(uint256 offset, uint256 length) external view returns (address[] memory);\r\n\r\n    function nextNonce(address wallet) external view returns (uint256);\r\n\r\n    function totalCollections() external view returns (uint256);\r\n\r\n    function isCollectionOpen(address collection) external pure returns (bool);\r\n}\r\n\r\ninterface ICxipProvenance {\r\n    function createIdentity(\r\n        bytes32 saltHash,\r\n        address wallet,\r\n        uint8 v,\r\n        bytes32 r,\r\n        bytes32 s\r\n    ) external returns (uint256, address);\r\n\r\n    function createIdentityBatch(\r\n        bytes32 saltHash,\r\n        address[] memory wallets,\r\n        uint8[] memory V,\r\n        bytes32[] memory RS\r\n    ) external returns (uint256, address);\r\n\r\n    function getIdentity() external view returns (address);\r\n\r\n    function getWalletIdentity(address wallet) external view returns (address);\r\n\r\n    function informAboutNewWallet(address newWallet) external;\r\n\r\n    function isIdentityValid(address identity) external view returns (bool);\r\n\r\n    function nextNonce(address wallet) external view returns (uint256);\r\n}\r\n\r\ninterface ICxipRegistry {\r\n    function getAsset() external view returns (address);\r\n\r\n    function getAssetSigner() external view returns (address);\r\n\r\n    function getAssetSource() external view returns (address);\r\n\r\n    function getCopyright() external view returns (address);\r\n\r\n    function getCopyrightSource() external view returns (address);\r\n\r\n    function getCustomSource(bytes32 name) external view returns (address);\r\n\r\n    function getCustomSourceFromString(string memory name) external view returns (address);\r\n\r\n    function getERC1155CollectionSource() external view returns (address);\r\n\r\n    function getERC721CollectionSource() external view returns (address);\r\n\r\n    function getIdentitySource() external view returns (address);\r\n\r\n    function getPA1D() external view returns (address);\r\n\r\n    function getPA1DSource() external view returns (address);\r\n\r\n    function getProvenance() external view returns (address);\r\n\r\n    function getProvenanceSource() external view returns (address);\r\n\r\n    function owner() external view returns (address);\r\n\r\n    function setAsset(address proxy) external;\r\n\r\n    function setAssetSigner(address source) external;\r\n\r\n    function setAssetSource(address source) external;\r\n\r\n    function setCopyright(address proxy) external;\r\n\r\n    function setCopyrightSource(address source) external;\r\n\r\n    function setCustomSource(string memory name, address source) external;\r\n\r\n    function setERC1155CollectionSource(address source) external;\r\n\r\n    function setERC721CollectionSource(address source) external;\r\n\r\n    function setIdentitySource(address source) external;\r\n\r\n    function setPA1D(address proxy) external;\r\n\r\n    function setPA1DSource(address source) external;\r\n\r\n    function setProvenance(address proxy) external;\r\n\r\n    function setProvenanceSource(address source) external;\r\n}\r\n\r\n// This is a 256 value limit (uint8)\r\nenum InterfaceType {\r\n    NULL, // 0\r\n    ERC20, // 1\r\n    ERC721, // 2\r\n    ERC1155 // 3\r\n}\r\n\r\nstruct Token {\r\n    address collection;\r\n    uint256 tokenId;\r\n    InterfaceType tokenType;\r\n    address creator;\r\n}\r\n\r\nstruct TokenData {\r\n    bytes32 payloadHash;\r\n    Verification payloadSignature;\r\n    address creator;\r\n    bytes32 arweave;\r\n    bytes11 arweave2;\r\n    bytes32 ipfs;\r\n    bytes14 ipfs2;\r\n}\r\n\r\n// This is a 256 value limit (uint8)\r\nenum UriType {\r\n    ARWEAVE, // 0\r\n    IPFS, // 1\r\n    HTTP // 2\r\n}\r\n\r\nstruct Verification {\r\n    bytes32 r;\r\n    bytes32 s;\r\n    uint8 v;\r\n}","ABI":"[{\"inputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"collectionAddress\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"creatorWallet\",\"type\":\"address\"}],\"name\":\"CollectionAdded\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"collectionAddress\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"creatorWallet\",\"type\":\"address\"}],\"name\":\"CollectionCreated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"collectionAddress\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"creatorWallet\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"TokenAdded\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"collectionAddress\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"creatorWallet\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"TokenCreated\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"creator\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"collection\",\"type\":\"address\"},{\"internalType\":\"bool\",\"name\":\"fresh\",\"type\":\"bool\"}],\"name\":\"AddCollection\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"creator\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"collection\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"},{\"internalType\":\"bool\",\"name\":\"fresh\",\"type\":\"bool\"}],\"name\":\"AddToken\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"defaultUriType\",\"outputs\":[{\"internalType\":\"enum UriType\",\"name\":\"\",\"type\":\"uint8\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"collection\",\"type\":\"address\"}],\"name\":\"getCollectionIdentity\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"collection\",\"type\":\"address\"}],\"name\":\"getCollectionType\",\"outputs\":[{\"internalType\":\"enum InterfaceType\",\"name\":\"\",\"type\":\"uint8\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"collection\",\"type\":\"address\"}],\"name\":\"isCollectionCertified\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"collection\",\"type\":\"address\"}],\"name\":\"isCollectionOpen\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"collection\",\"type\":\"address\"}],\"name\":\"isCollectionRegistered\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"collection\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"isTokenCertified\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"collection\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"isTokenRegistered\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"}]","ContractName":"CxipAsset","CompilerVersion":"v0.8.4+commit.c7e474f2","OptimizationUsed":"1","Runs":"20000","ConstructorArguments":"","EVMVersion":"Default","Library":"","LicenseType":"None","Proxy":"0","Implementation":"","SwarmSource":"ipfs://8f4fa10b962496969089a0aaee8da6e673bab7c42961fbdeeac8704408855f66"}]}