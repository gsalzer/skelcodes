{"status":"1","message":"OK","result":[{"SourceCode":"{{\r\n  \"language\": \"Solidity\",\r\n  \"sources\": {\r\n    \"contracts/TheMaster.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\r\\npragma solidity ^0.8.5;\\r\\n\\r\\nimport \\\"@openzeppelin/contracts/access/Ownable.sol\\\";\\r\\nimport \\\"@openzeppelin/contracts/token/ERC20/IERC20.sol\\\";\\r\\nimport \\\"@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol\\\";\\r\\nimport \\\"./uniswapv2/interfaces/IUniswapV2ERC20.sol\\\";\\r\\nimport \\\"./interfaces/ITheMaster.sol\\\";\\r\\nimport \\\"./libraries/MasterChefModule.sol\\\";\\r\\n\\r\\ncontract TheMaster is Ownable, MasterChefModule, ITheMaster {\\r\\n    using SafeERC20 for IERC20;\\r\\n\\r\\n    struct UserInfo {\\r\\n        uint256 amount;\\r\\n        uint256 rewardDebt;\\r\\n    }\\r\\n\\r\\n    struct PoolInfo {\\r\\n        address addr;\\r\\n        bool delegate;\\r\\n        ISupportable supportable;\\r\\n        uint8 supportingRatio; //out of 100\\r\\n        uint256 allocPoint;\\r\\n        uint256 lastRewardBlock;\\r\\n        uint256 accRewardPerShare;\\r\\n        uint256 supply;\\r\\n    }\\r\\n\\r\\n    uint256 private constant PRECISION = 1e20;\\r\\n\\r\\n    uint256 public immutable override initialRewardPerBlock;\\r\\n    uint256 public immutable override decreasingInterval;\\r\\n    uint256 public immutable override startBlock;\\r\\n\\r\\n    IMaidCoin public immutable override maidCoin;\\r\\n    IRewardCalculator public override rewardCalculator;\\r\\n\\r\\n    PoolInfo[] public override poolInfo;\\r\\n    mapping(uint256 => mapping(uint256 => UserInfo)) public override userInfo;\\r\\n    mapping(uint256 => mapping(address => uint256)) private sushiRewardDebt;\\r\\n    mapping(address => bool) public override mintableByAddr;\\r\\n    uint256 public override totalAllocPoint;\\r\\n\\r\\n    constructor(\\r\\n        uint256 _initialRewardPerBlock,\\r\\n        uint256 _decreasingInterval,\\r\\n        uint256 _startBlock,\\r\\n        IMaidCoin _maidCoin,\\r\\n        IUniswapV2Pair _lpToken,\\r\\n        IERC20 _sushi\\r\\n    ) MasterChefModule(_lpToken, _sushi) {\\r\\n        initialRewardPerBlock = _initialRewardPerBlock;\\r\\n        decreasingInterval = _decreasingInterval;\\r\\n        startBlock = _startBlock;\\r\\n        maidCoin = _maidCoin;\\r\\n    }\\r\\n\\r\\n    function poolCount() external view override returns (uint256) {\\r\\n        return poolInfo.length;\\r\\n    }\\r\\n\\r\\n    function pendingReward(uint256 pid, uint256 userId) external view override returns (uint256) {\\r\\n        PoolInfo storage pool = poolInfo[pid];\\r\\n        UserInfo storage user = userInfo[pid][userId];\\r\\n        (uint256 accRewardPerShare, uint256 supply) = (pool.accRewardPerShare, pool.supply);\\r\\n        uint256 _lastRewardBlock = pool.lastRewardBlock;\\r\\n        if (block.number > _lastRewardBlock && supply != 0) {\\r\\n            uint256 reward = ((block.number - _lastRewardBlock) * rewardPerBlock() * pool.allocPoint) / totalAllocPoint;\\r\\n            accRewardPerShare = accRewardPerShare + (reward * PRECISION) / supply;\\r\\n        }\\r\\n        uint256 pending = ((user.amount * accRewardPerShare) / PRECISION) - user.rewardDebt;\\r\\n        uint256 _supportingRatio = pool.supportingRatio;\\r\\n        if (_supportingRatio == 0) {\\r\\n            return pending;\\r\\n        } else {\\r\\n            return pending - ((pending * _supportingRatio) / 100);\\r\\n        }\\r\\n    }\\r\\n\\r\\n    function rewardPerBlock() public view override returns (uint256) {\\r\\n        if (address(rewardCalculator) != address(0)) {\\r\\n            return rewardCalculator.rewardPerBlock();\\r\\n        }\\r\\n        uint256 era = (block.number - startBlock) / decreasingInterval;\\r\\n        return initialRewardPerBlock / (era + 1);\\r\\n    }\\r\\n\\r\\n    function changeRewardCalculator(address addr) external override onlyOwner {\\r\\n        rewardCalculator = IRewardCalculator(addr);\\r\\n        emit ChangeRewardCalculator(addr);\\r\\n    }\\r\\n\\r\\n    function add(\\r\\n        address addr,\\r\\n        bool delegate,\\r\\n        bool mintable,\\r\\n        address supportable,\\r\\n        uint8 supportingRatio,\\r\\n        uint256 allocPoint\\r\\n    ) external override onlyOwner {\\r\\n        if (supportable != address(0)) {\\r\\n            require(supportingRatio > 0 && supportingRatio <= 80, \\\"TheMaster: Outranged supportingRatio\\\");\\r\\n        } else {\\r\\n            require(supportingRatio == 0, \\\"TheMaster: Not supportable pool\\\");\\r\\n        }\\r\\n        massUpdatePools();\\r\\n        uint256 lastRewardBlock = block.number > startBlock ? block.number : startBlock;\\r\\n        totalAllocPoint += allocPoint;\\r\\n        uint256 pid = poolInfo.length;\\r\\n        poolInfo.push(\\r\\n            PoolInfo(addr, delegate, ISupportable(supportable), supportingRatio, allocPoint, lastRewardBlock, 0, 0)\\r\\n        );\\r\\n        if (mintable) {\\r\\n            mintableByAddr[addr] = true;\\r\\n        }\\r\\n        emit Add(pid, addr, delegate, mintableByAddr[addr], supportable, supportingRatio, allocPoint);\\r\\n    }\\r\\n\\r\\n    function set(uint256[] calldata pids, uint256[] calldata allocPoints) external override onlyOwner {\\r\\n        massUpdatePools();\\r\\n        for (uint256 i = 0; i < pids.length; i += 1) {\\r\\n            totalAllocPoint = totalAllocPoint - poolInfo[pids[i]].allocPoint + allocPoints[i];\\r\\n            poolInfo[pids[i]].allocPoint = allocPoints[i];\\r\\n            emit Set(pids[i], allocPoints[i]);\\r\\n        }\\r\\n    }\\r\\n\\r\\n    function updatePool(PoolInfo storage pool) internal {\\r\\n        uint256 _lastRewardBlock = pool.lastRewardBlock;\\r\\n        if (block.number <= _lastRewardBlock) {\\r\\n            return;\\r\\n        }\\r\\n        uint256 supply = pool.supply;\\r\\n        if (supply == 0 || pool.allocPoint == 0) {\\r\\n            pool.lastRewardBlock = block.number;\\r\\n            return;\\r\\n        }\\r\\n        uint256 reward = ((block.number - _lastRewardBlock) * rewardPerBlock() * pool.allocPoint) / totalAllocPoint;\\r\\n        maidCoin.mint(address(this), reward);\\r\\n        pool.accRewardPerShare = pool.accRewardPerShare + (reward * PRECISION) / supply;\\r\\n        pool.lastRewardBlock = block.number;\\r\\n    }\\r\\n\\r\\n    function massUpdatePools() internal {\\r\\n        uint256 length = poolInfo.length;\\r\\n        for (uint256 pid = 0; pid < length; ++pid) {\\r\\n            updatePool(poolInfo[pid]);\\r\\n        }\\r\\n    }\\r\\n\\r\\n    function deposit(\\r\\n        uint256 pid,\\r\\n        uint256 amount,\\r\\n        uint256 userId\\r\\n    ) public override {\\r\\n        PoolInfo storage pool = poolInfo[pid];\\r\\n        require(address(pool.supportable) == address(0), \\\"TheMaster: Use support func\\\");\\r\\n        UserInfo storage user = userInfo[pid][userId];\\r\\n        if (pool.delegate) {\\r\\n            require(pool.addr == msg.sender, \\\"TheMaster: Not called by delegate\\\");\\r\\n            _deposit(pid, pool, user, amount, false);\\r\\n        } else {\\r\\n            require(address(uint160(userId)) == msg.sender, \\\"TheMaster: Deposit to your address\\\");\\r\\n            _deposit(pid, pool, user, amount, true);\\r\\n        }\\r\\n        emit Deposit(userId, pid, amount);\\r\\n    }\\r\\n\\r\\n    function _deposit(\\r\\n        uint256 pid,\\r\\n        PoolInfo storage pool,\\r\\n        UserInfo storage user,\\r\\n        uint256 amount,\\r\\n        bool tokenTransfer\\r\\n    ) internal {\\r\\n        updatePool(pool);\\r\\n        uint256 _accRewardPerShare = pool.accRewardPerShare;\\r\\n        uint256 _amount = user.amount;\\r\\n        if (_amount > 0) {\\r\\n            uint256 pending = ((_amount * _accRewardPerShare) / PRECISION) - user.rewardDebt;\\r\\n            if (pending > 0) safeRewardTransfer(msg.sender, pending);\\r\\n        }\\r\\n        if (amount > 0) {\\r\\n            if (tokenTransfer) {\\r\\n                IERC20(pool.addr).safeTransferFrom(msg.sender, address(this), amount);\\r\\n                uint256 _mcPid = masterChefPid;\\r\\n                if (_mcPid > 0 && pool.addr == address(lpToken)) {\\r\\n                    sushiRewardDebt[pid][msg.sender] = _depositModule(\\r\\n                        _mcPid,\\r\\n                        amount,\\r\\n                        _amount,\\r\\n                        sushiRewardDebt[pid][msg.sender]\\r\\n                    );\\r\\n                }\\r\\n            }\\r\\n            pool.supply += amount;\\r\\n            _amount += amount;\\r\\n            user.amount = _amount;\\r\\n        }\\r\\n        user.rewardDebt = (_amount * _accRewardPerShare) / PRECISION;\\r\\n    }\\r\\n\\r\\n    function depositWithPermit(\\r\\n        uint256 pid,\\r\\n        uint256 amount,\\r\\n        uint256 userId,\\r\\n        uint256 deadline,\\r\\n        uint8 v,\\r\\n        bytes32 r,\\r\\n        bytes32 s\\r\\n    ) external override {\\r\\n        IUniswapV2ERC20(poolInfo[pid].addr).permit(msg.sender, address(this), amount, deadline, v, r, s);\\r\\n        deposit(pid, amount, userId);\\r\\n    }\\r\\n\\r\\n    function depositWithPermitMax(\\r\\n        uint256 pid,\\r\\n        uint256 amount,\\r\\n        uint256 userId,\\r\\n        uint256 deadline,\\r\\n        uint8 v,\\r\\n        bytes32 r,\\r\\n        bytes32 s\\r\\n    ) external override {\\r\\n        IUniswapV2ERC20(poolInfo[pid].addr).permit(msg.sender, address(this), type(uint256).max, deadline, v, r, s);\\r\\n        deposit(pid, amount, userId);\\r\\n    }\\r\\n\\r\\n    function withdraw(\\r\\n        uint256 pid,\\r\\n        uint256 amount,\\r\\n        uint256 userId\\r\\n    ) public override {\\r\\n        PoolInfo storage pool = poolInfo[pid];\\r\\n        require(address(pool.supportable) == address(0), \\\"TheMaster: Use desupport func\\\");\\r\\n        UserInfo storage user = userInfo[pid][userId];\\r\\n        if (pool.delegate) {\\r\\n            require(pool.addr == msg.sender, \\\"TheMaster: Not called by delegate\\\");\\r\\n            _withdraw(pid, pool, user, amount, false);\\r\\n        } else {\\r\\n            require(address(uint160(userId)) == msg.sender, \\\"TheMaster: Not called by user\\\");\\r\\n            _withdraw(pid, pool, user, amount, true);\\r\\n        }\\r\\n        emit Withdraw(userId, pid, amount);\\r\\n    }\\r\\n\\r\\n    function _withdraw(\\r\\n        uint256 pid,\\r\\n        PoolInfo storage pool,\\r\\n        UserInfo storage user,\\r\\n        uint256 amount,\\r\\n        bool tokenTransfer\\r\\n    ) internal {\\r\\n        uint256 _amount = user.amount;\\r\\n        require(_amount >= amount, \\\"TheMaster: Insufficient amount\\\");\\r\\n        updatePool(pool);\\r\\n        uint256 _accRewardPerShare = pool.accRewardPerShare;\\r\\n        uint256 pending = ((_amount * _accRewardPerShare) / PRECISION) - user.rewardDebt;\\r\\n        if (pending > 0) safeRewardTransfer(msg.sender, pending);\\r\\n        if (amount > 0) {\\r\\n            pool.supply -= amount;\\r\\n            _amount -= amount;\\r\\n            user.amount = _amount;\\r\\n            if (tokenTransfer) {\\r\\n                uint256 _mcPid = masterChefPid;\\r\\n                if (_mcPid > 0 && pool.addr == address(lpToken)) {\\r\\n                    sushiRewardDebt[pid][msg.sender] = _withdrawModule(\\r\\n                        _mcPid,\\r\\n                        amount,\\r\\n                        _amount + amount,\\r\\n                        sushiRewardDebt[pid][msg.sender]\\r\\n                    );\\r\\n                }\\r\\n\\r\\n                IERC20(pool.addr).safeTransfer(msg.sender, amount);\\r\\n            }\\r\\n        }\\r\\n        user.rewardDebt = (_amount * _accRewardPerShare) / PRECISION;\\r\\n    }\\r\\n\\r\\n    function emergencyWithdraw(uint256 pid) external override {\\r\\n        PoolInfo storage pool = poolInfo[pid];\\r\\n        require(address(pool.supportable) == address(0), \\\"TheMaster: Use desupport func\\\");\\r\\n        require(!pool.delegate, \\\"TheMaster: Pool should be non-delegate\\\");\\r\\n        UserInfo storage user = userInfo[pid][uint256(uint160(msg.sender))];\\r\\n        uint256 amounts = user.amount;\\r\\n        user.amount = 0;\\r\\n        user.rewardDebt = 0;\\r\\n        pool.supply -= amounts;\\r\\n\\r\\n        uint256 _mcPid = masterChefPid;\\r\\n        if (_mcPid > 0 && pool.addr == address(lpToken)) {\\r\\n            sushiRewardDebt[pid][msg.sender] = _withdrawModule(\\r\\n                _mcPid,\\r\\n                amounts,\\r\\n                amounts,\\r\\n                sushiRewardDebt[pid][msg.sender]\\r\\n            );\\r\\n        }\\r\\n\\r\\n        IERC20(pool.addr).safeTransfer(msg.sender, amounts);\\r\\n        emit EmergencyWithdraw(msg.sender, pid, amounts);\\r\\n    }\\r\\n\\r\\n    function support(\\r\\n        uint256 pid,\\r\\n        uint256 amount,\\r\\n        uint256 supportTo\\r\\n    ) public override {\\r\\n        PoolInfo storage pool = poolInfo[pid];\\r\\n        ISupportable supportable = pool.supportable;\\r\\n        require(address(supportable) != address(0), \\\"TheMaster: Use deposit func\\\");\\r\\n        UserInfo storage user = userInfo[pid][uint256(uint160(msg.sender))];\\r\\n        updatePool(pool);\\r\\n        uint256 _accRewardPerShare = pool.accRewardPerShare;\\r\\n        uint256 _amount = user.amount;\\r\\n        if (_amount > 0) {\\r\\n            uint256 pending = ((_amount * _accRewardPerShare) / PRECISION) - user.rewardDebt;\\r\\n            if (pending > 0) {\\r\\n                (address to, uint256 amounts) = supportable.shareRewards(pending, msg.sender, pool.supportingRatio);\\r\\n                if (amounts > 0) safeRewardTransfer(to, amounts);\\r\\n                safeRewardTransfer(msg.sender, pending - amounts);\\r\\n            }\\r\\n        }\\r\\n        if (amount > 0) {\\r\\n            if (_amount == 0) {\\r\\n                supportable.setSupportingTo(msg.sender, supportTo, amount);\\r\\n            } else {\\r\\n                supportable.changeSupportedPower(msg.sender, int256(amount));\\r\\n            }\\r\\n            IERC20(pool.addr).safeTransferFrom(msg.sender, address(this), amount);\\r\\n\\r\\n            uint256 _mcPid = masterChefPid;\\r\\n            if (_mcPid > 0 && pool.addr == address(lpToken)) {\\r\\n                sushiRewardDebt[pid][msg.sender] = _depositModule(\\r\\n                    _mcPid,\\r\\n                    amount,\\r\\n                    _amount,\\r\\n                    sushiRewardDebt[pid][msg.sender]\\r\\n                );\\r\\n            }\\r\\n\\r\\n            pool.supply += amount;\\r\\n            _amount += amount;\\r\\n            user.amount = _amount;\\r\\n        }\\r\\n        user.rewardDebt = (_amount * _accRewardPerShare) / PRECISION;\\r\\n        emit Support(msg.sender, pid, amount);\\r\\n    }\\r\\n\\r\\n    function supportWithPermit(\\r\\n        uint256 pid,\\r\\n        uint256 amount,\\r\\n        uint256 supportTo,\\r\\n        uint256 deadline,\\r\\n        uint8 v,\\r\\n        bytes32 r,\\r\\n        bytes32 s\\r\\n    ) external override {\\r\\n        IUniswapV2ERC20(poolInfo[pid].addr).permit(msg.sender, address(this), amount, deadline, v, r, s);\\r\\n        support(pid, amount, supportTo);\\r\\n    }\\r\\n\\r\\n    function supportWithPermitMax(\\r\\n        uint256 pid,\\r\\n        uint256 amount,\\r\\n        uint256 supportTo,\\r\\n        uint256 deadline,\\r\\n        uint8 v,\\r\\n        bytes32 r,\\r\\n        bytes32 s\\r\\n    ) external override {\\r\\n        IUniswapV2ERC20(poolInfo[pid].addr).permit(msg.sender, address(this), type(uint256).max, deadline, v, r, s);\\r\\n        support(pid, amount, supportTo);\\r\\n    }\\r\\n\\r\\n    function desupport(uint256 pid, uint256 amount) external override {\\r\\n        PoolInfo storage pool = poolInfo[pid];\\r\\n        ISupportable supportable = pool.supportable;\\r\\n        require(address(supportable) != address(0), \\\"TheMaster: Use withdraw func\\\");\\r\\n        UserInfo storage user = userInfo[pid][uint256(uint160(msg.sender))];\\r\\n        uint256 _amount = user.amount;\\r\\n        require(_amount >= amount, \\\"TheMaster: Insufficient amount\\\");\\r\\n        updatePool(pool);\\r\\n        uint256 _accRewardPerShare = pool.accRewardPerShare;\\r\\n        uint256 pending = ((_amount * _accRewardPerShare) / PRECISION) - user.rewardDebt;\\r\\n        if (pending > 0) {\\r\\n            (address to, uint256 amounts) = supportable.shareRewards(pending, msg.sender, pool.supportingRatio);\\r\\n            if (amounts > 0) safeRewardTransfer(to, amounts);\\r\\n            safeRewardTransfer(msg.sender, pending - amounts);\\r\\n        }\\r\\n        if (amount > 0) {\\r\\n            supportable.changeSupportedPower(msg.sender, -int256(amount));\\r\\n\\r\\n            uint256 _mcPid = masterChefPid;\\r\\n            if (_mcPid > 0 && pool.addr == address(lpToken)) {\\r\\n                sushiRewardDebt[pid][msg.sender] = _withdrawModule(\\r\\n                    _mcPid,\\r\\n                    amount,\\r\\n                    _amount,\\r\\n                    sushiRewardDebt[pid][msg.sender]\\r\\n                );\\r\\n            }\\r\\n\\r\\n            pool.supply -= amount;\\r\\n            _amount -= amount;\\r\\n            user.amount = _amount;\\r\\n            IERC20(pool.addr).safeTransfer(msg.sender, amount);\\r\\n        }\\r\\n        user.rewardDebt = (_amount * _accRewardPerShare) / PRECISION;\\r\\n        emit Desupport(msg.sender, pid, amount);\\r\\n    }\\r\\n\\r\\n    function emergencyDesupport(uint256 pid) external override {\\r\\n        PoolInfo storage pool = poolInfo[pid];\\r\\n        ISupportable supportable = pool.supportable;\\r\\n        require(address(supportable) != address(0), \\\"TheMaster: Use emergencyWithdraw func\\\");\\r\\n        UserInfo storage user = userInfo[pid][uint256(uint160(msg.sender))];\\r\\n        uint256 amounts = user.amount;\\r\\n        user.amount = 0;\\r\\n        user.rewardDebt = 0;\\r\\n        pool.supply -= amounts;\\r\\n        supportable.changeSupportedPower(msg.sender, -int256(amounts));\\r\\n\\r\\n        uint256 _mcPid = masterChefPid;\\r\\n        if (_mcPid > 0 && pool.addr == address(lpToken)) {\\r\\n            sushiRewardDebt[pid][msg.sender] = _withdrawModule(\\r\\n                _mcPid,\\r\\n                amounts,\\r\\n                amounts,\\r\\n                sushiRewardDebt[pid][msg.sender]\\r\\n            );\\r\\n        }\\r\\n\\r\\n        IERC20(pool.addr).safeTransfer(msg.sender, amounts);\\r\\n        emit EmergencyDesupport(msg.sender, pid, amounts);\\r\\n    }\\r\\n\\r\\n    function mint(address to, uint256 amount) external override {\\r\\n        require(mintableByAddr[msg.sender], \\\"TheMaster: Called from un-mintable\\\");\\r\\n        maidCoin.mint(to, amount);\\r\\n    }\\r\\n\\r\\n    function safeRewardTransfer(address to, uint256 amount) internal {\\r\\n        uint256 balance = maidCoin.balanceOf(address(this));\\r\\n        if (amount > balance) {\\r\\n            maidCoin.transfer(to, balance);\\r\\n        } else {\\r\\n            maidCoin.transfer(to, amount);\\r\\n        }\\r\\n    }\\r\\n\\r\\n    function pendingSushiReward(uint256 pid) external view override returns (uint256) {\\r\\n        return\\r\\n            _pendingSushiReward(userInfo[pid][uint256(uint160(msg.sender))].amount, sushiRewardDebt[pid][msg.sender]);\\r\\n    }\\r\\n\\r\\n    function claimSushiReward(uint256 pid) public override {\\r\\n        PoolInfo storage pool = poolInfo[pid];\\r\\n        require(pool.addr == address(lpToken) && !pool.delegate, \\\"TheMaster: Invalid pid\\\");\\r\\n\\r\\n        sushiRewardDebt[pid][msg.sender] = _claimSushiReward(\\r\\n            userInfo[pid][uint256(uint160(msg.sender))].amount,\\r\\n            sushiRewardDebt[pid][msg.sender]\\r\\n        );\\r\\n    }\\r\\n\\r\\n    function claimAllReward(uint256 pid) public {\\r\\n        PoolInfo storage pool = poolInfo[pid];\\r\\n        require(pool.addr == address(lpToken) && !pool.delegate, \\\"TheMaster: Invalid pid\\\");\\r\\n\\r\\n        UserInfo storage user = userInfo[pid][uint256(uint160(msg.sender))];\\r\\n        uint256 amount = user.amount;\\r\\n        require(amount > 0, \\\"TheMaster: Nothing can be claimed\\\");\\r\\n        sushiRewardDebt[pid][msg.sender] = _claimSushiReward(amount, sushiRewardDebt[pid][msg.sender]);\\r\\n\\r\\n        updatePool(pool);\\r\\n        ISupportable supportable = pool.supportable;\\r\\n\\r\\n        if (address(supportable) == address(0)) {\\r\\n            uint256 _accRewardPerShare = pool.accRewardPerShare;\\r\\n            uint256 pending = ((amount * _accRewardPerShare) / PRECISION) - user.rewardDebt;\\r\\n            if (pending > 0) safeRewardTransfer(msg.sender, pending);\\r\\n            user.rewardDebt = (amount * _accRewardPerShare) / PRECISION;\\r\\n        } else {\\r\\n            uint256 _accRewardPerShare = pool.accRewardPerShare;\\r\\n            uint256 pending = ((amount * _accRewardPerShare) / PRECISION) - user.rewardDebt;\\r\\n            if (pending > 0) {\\r\\n                (address to, uint256 amounts) = supportable.shareRewards(pending, msg.sender, pool.supportingRatio);\\r\\n                if (amounts > 0) safeRewardTransfer(to, amounts);\\r\\n                safeRewardTransfer(msg.sender, pending - amounts);\\r\\n            }\\r\\n            user.rewardDebt = (amount * _accRewardPerShare) / PRECISION;\\r\\n        }\\r\\n    }\\r\\n}\\r\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/access/Ownable.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../utils/Context.sol\\\";\\n/**\\n * @dev Contract module which provides a basic access control mechanism, where\\n * there is an account (an owner) that can be granted exclusive access to\\n * specific functions.\\n *\\n * By default, the owner account will be the one that deploys the contract. This\\n * can later be changed with {transferOwnership}.\\n *\\n * This module is used through inheritance. It will make available the modifier\\n * `onlyOwner`, which can be applied to your functions to restrict their use to\\n * the owner.\\n */\\nabstract contract Ownable is Context {\\n    address private _owner;\\n\\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\\n\\n    /**\\n     * @dev Initializes the contract setting the deployer as the initial owner.\\n     */\\n    constructor () {\\n        address msgSender = _msgSender();\\n        _owner = msgSender;\\n        emit OwnershipTransferred(address(0), msgSender);\\n    }\\n\\n    /**\\n     * @dev Returns the address of the current owner.\\n     */\\n    function owner() public view virtual returns (address) {\\n        return _owner;\\n    }\\n\\n    /**\\n     * @dev Throws if called by any account other than the owner.\\n     */\\n    modifier onlyOwner() {\\n        require(owner() == _msgSender(), \\\"Ownable: caller is not the owner\\\");\\n        _;\\n    }\\n\\n    /**\\n     * @dev Leaves the contract without owner. It will not be possible to call\\n     * `onlyOwner` functions anymore. Can only be called by the current owner.\\n     *\\n     * NOTE: Renouncing ownership will leave the contract without an owner,\\n     * thereby removing any functionality that is only available to the owner.\\n     */\\n    function renounceOwnership() public virtual onlyOwner {\\n        emit OwnershipTransferred(_owner, address(0));\\n        _owner = address(0);\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Can only be called by the current owner.\\n     */\\n    function transferOwnership(address newOwner) public virtual onlyOwner {\\n        require(newOwner != address(0), \\\"Ownable: new owner is the zero address\\\");\\n        emit OwnershipTransferred(_owner, newOwner);\\n        _owner = newOwner;\\n    }\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/token/ERC20/IERC20.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC20 standard as defined in the EIP.\\n */\\ninterface IERC20 {\\n    /**\\n     * @dev Returns the amount of tokens in existence.\\n     */\\n    function totalSupply() external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the amount of tokens owned by `account`.\\n     */\\n    function balanceOf(address account) external view returns (uint256);\\n\\n    /**\\n     * @dev Moves `amount` tokens from the caller's account to `recipient`.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transfer(address recipient, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Returns the remaining number of tokens that `spender` will be\\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\\n     * zero by default.\\n     *\\n     * This value changes when {approve} or {transferFrom} are called.\\n     */\\n    function allowance(address owner, address spender) external view returns (uint256);\\n\\n    /**\\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\\n     * that someone may use both the old and the new allowance by unfortunate\\n     * transaction ordering. One possible solution to mitigate this race\\n     * condition is to first reduce the spender's allowance to 0 and set the\\n     * desired value afterwards:\\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address spender, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Moves `amount` tokens from `sender` to `recipient` using the\\n     * allowance mechanism. `amount` is then deducted from the caller's\\n     * allowance.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(address sender, address recipient, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\\n     * another (`to`).\\n     *\\n     * Note that `value` may be zero.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 value);\\n\\n    /**\\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\\n     * a call to {approve}. `value` is the new allowance.\\n     */\\n    event Approval(address indexed owner, address indexed spender, uint256 value);\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../IERC20.sol\\\";\\nimport \\\"../../../utils/Address.sol\\\";\\n\\n/**\\n * @title SafeERC20\\n * @dev Wrappers around ERC20 operations that throw on failure (when the token\\n * contract returns false). Tokens that return no value (and instead revert or\\n * throw on failure) are also supported, non-reverting calls are assumed to be\\n * successful.\\n * To use this library you can add a `using SafeERC20 for IERC20;` statement to your contract,\\n * which allows you to call the safe operations as `token.safeTransfer(...)`, etc.\\n */\\nlibrary SafeERC20 {\\n    using Address for address;\\n\\n    function safeTransfer(IERC20 token, address to, uint256 value) internal {\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.transfer.selector, to, value));\\n    }\\n\\n    function safeTransferFrom(IERC20 token, address from, address to, uint256 value) internal {\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.transferFrom.selector, from, to, value));\\n    }\\n\\n    /**\\n     * @dev Deprecated. This function has issues similar to the ones found in\\n     * {IERC20-approve}, and its usage is discouraged.\\n     *\\n     * Whenever possible, use {safeIncreaseAllowance} and\\n     * {safeDecreaseAllowance} instead.\\n     */\\n    function safeApprove(IERC20 token, address spender, uint256 value) internal {\\n        // safeApprove should only be called when setting an initial allowance,\\n        // or when resetting it to zero. To increase and decrease it, use\\n        // 'safeIncreaseAllowance' and 'safeDecreaseAllowance'\\n        // solhint-disable-next-line max-line-length\\n        require((value == 0) || (token.allowance(address(this), spender) == 0),\\n            \\\"SafeERC20: approve from non-zero to non-zero allowance\\\"\\n        );\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, value));\\n    }\\n\\n    function safeIncreaseAllowance(IERC20 token, address spender, uint256 value) internal {\\n        uint256 newAllowance = token.allowance(address(this), spender) + value;\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));\\n    }\\n\\n    function safeDecreaseAllowance(IERC20 token, address spender, uint256 value) internal {\\n        unchecked {\\n            uint256 oldAllowance = token.allowance(address(this), spender);\\n            require(oldAllowance >= value, \\\"SafeERC20: decreased allowance below zero\\\");\\n            uint256 newAllowance = oldAllowance - value;\\n            _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));\\n        }\\n    }\\n\\n    /**\\n     * @dev Imitates a Solidity high-level call (i.e. a regular function call to a contract), relaxing the requirement\\n     * on the return value: the return value is optional (but if data is returned, it must not be false).\\n     * @param token The token targeted by the call.\\n     * @param data The call data (encoded using abi.encode or one of its variants).\\n     */\\n    function _callOptionalReturn(IERC20 token, bytes memory data) private {\\n        // We need to perform a low level call here, to bypass Solidity's return data size checking mechanism, since\\n        // we're implementing it ourselves. We use {Address.functionCall} to perform this call, which verifies that\\n        // the target address contains contract code and also asserts for success in the low-level call.\\n\\n        bytes memory returndata = address(token).functionCall(data, \\\"SafeERC20: low-level call failed\\\");\\n        if (returndata.length > 0) { // Return data is optional\\n            // solhint-disable-next-line max-line-length\\n            require(abi.decode(returndata, (bool)), \\\"SafeERC20: ERC20 operation did not succeed\\\");\\n        }\\n    }\\n}\\n\"\r\n    },\r\n    \"contracts/uniswapv2/interfaces/IUniswapV2ERC20.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\r\\npragma solidity >=0.5.0;\\r\\n\\r\\ninterface IUniswapV2ERC20 {\\r\\n    event Approval(address indexed owner, address indexed spender, uint256 value);\\r\\n    event Transfer(address indexed from, address indexed to, uint256 value);\\r\\n\\r\\n    function name() external pure returns (string memory);\\r\\n\\r\\n    function symbol() external pure returns (string memory);\\r\\n\\r\\n    function decimals() external pure returns (uint8);\\r\\n\\r\\n    function totalSupply() external view returns (uint256);\\r\\n\\r\\n    function balanceOf(address owner) external view returns (uint256);\\r\\n\\r\\n    function allowance(address owner, address spender) external view returns (uint256);\\r\\n\\r\\n    function approve(address spender, uint256 value) external returns (bool);\\r\\n\\r\\n    function transfer(address to, uint256 value) external returns (bool);\\r\\n\\r\\n    function transferFrom(\\r\\n        address from,\\r\\n        address to,\\r\\n        uint256 value\\r\\n    ) external returns (bool);\\r\\n\\r\\n    function DOMAIN_SEPARATOR() external view returns (bytes32);\\r\\n\\r\\n    function PERMIT_TYPEHASH() external pure returns (bytes32);\\r\\n\\r\\n    function nonces(address owner) external view returns (uint256);\\r\\n\\r\\n    function permit(\\r\\n        address owner,\\r\\n        address spender,\\r\\n        uint256 value,\\r\\n        uint256 deadline,\\r\\n        uint8 v,\\r\\n        bytes32 r,\\r\\n        bytes32 s\\r\\n    ) external;\\r\\n}\\r\\n\"\r\n    },\r\n    \"contracts/interfaces/ITheMaster.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\r\\npragma solidity >=0.5.0;\\r\\n\\r\\nimport \\\"./IMaidCoin.sol\\\";\\r\\nimport \\\"./IRewardCalculator.sol\\\";\\r\\nimport \\\"./ISupportable.sol\\\";\\r\\nimport \\\"./IMasterChefModule.sol\\\";\\r\\n\\r\\ninterface ITheMaster is IMasterChefModule {\\r\\n    event ChangeRewardCalculator(address addr);\\r\\n\\r\\n    event Add(\\r\\n        uint256 indexed pid,\\r\\n        address addr,\\r\\n        bool indexed delegate,\\r\\n        bool indexed mintable,\\r\\n        address supportable,\\r\\n        uint8 supportingRatio,\\r\\n        uint256 allocPoint\\r\\n    );\\r\\n\\r\\n    event Set(uint256 indexed pid, uint256 allocPoint);\\r\\n    event Deposit(uint256 indexed userId, uint256 indexed pid, uint256 amount);\\r\\n    event Withdraw(uint256 indexed userId, uint256 indexed pid, uint256 amount);\\r\\n    event EmergencyWithdraw(address indexed user, uint256 indexed pid, uint256 amount);\\r\\n\\r\\n    event Support(address indexed supporter, uint256 indexed pid, uint256 amount);\\r\\n    event Desupport(address indexed supporter, uint256 indexed pid, uint256 amount);\\r\\n    event EmergencyDesupport(address indexed user, uint256 indexed pid, uint256 amount);\\r\\n\\r\\n    event SetIsSupporterPool(uint256 indexed pid, bool indexed status);\\r\\n\\r\\n    function initialRewardPerBlock() external view returns (uint256);\\r\\n\\r\\n    function decreasingInterval() external view returns (uint256);\\r\\n\\r\\n    function startBlock() external view returns (uint256);\\r\\n\\r\\n    function maidCoin() external view returns (IMaidCoin);\\r\\n\\r\\n    function rewardCalculator() external view returns (IRewardCalculator);\\r\\n\\r\\n    function poolInfo(uint256 pid)\\r\\n        external\\r\\n        view\\r\\n        returns (\\r\\n            address addr,\\r\\n            bool delegate,\\r\\n            ISupportable supportable,\\r\\n            uint8 supportingRatio,\\r\\n            uint256 allocPoint,\\r\\n            uint256 lastRewardBlock,\\r\\n            uint256 accRewardPerShare,\\r\\n            uint256 supply\\r\\n        );\\r\\n\\r\\n    function poolCount() external view returns (uint256);\\r\\n\\r\\n    function userInfo(uint256 pid, uint256 user) external view returns (uint256 amount, uint256 rewardDebt);\\r\\n\\r\\n    function mintableByAddr(address addr) external view returns (bool);\\r\\n\\r\\n    function totalAllocPoint() external view returns (uint256);\\r\\n\\r\\n    function pendingReward(uint256 pid, uint256 userId) external view returns (uint256);\\r\\n\\r\\n    function rewardPerBlock() external view returns (uint256);\\r\\n\\r\\n    function changeRewardCalculator(address addr) external;\\r\\n\\r\\n    function add(\\r\\n        address addr,\\r\\n        bool delegate,\\r\\n        bool mintable,\\r\\n        address supportable,\\r\\n        uint8 supportingRatio,\\r\\n        uint256 allocPoint\\r\\n    ) external;\\r\\n\\r\\n    function set(uint256[] calldata pid, uint256[] calldata allocPoint) external;\\r\\n\\r\\n    function deposit(\\r\\n        uint256 pid,\\r\\n        uint256 amount,\\r\\n        uint256 userId\\r\\n    ) external;\\r\\n\\r\\n    function depositWithPermit(\\r\\n        uint256 pid,\\r\\n        uint256 amount,\\r\\n        uint256 userId,\\r\\n        uint256 deadline,\\r\\n        uint8 v,\\r\\n        bytes32 r,\\r\\n        bytes32 s\\r\\n    ) external;\\r\\n\\r\\n    function depositWithPermitMax(\\r\\n        uint256 pid,\\r\\n        uint256 amount,\\r\\n        uint256 userId,\\r\\n        uint256 deadline,\\r\\n        uint8 v,\\r\\n        bytes32 r,\\r\\n        bytes32 s\\r\\n    ) external;\\r\\n\\r\\n    function withdraw(\\r\\n        uint256 pid,\\r\\n        uint256 amount,\\r\\n        uint256 userId\\r\\n    ) external;\\r\\n\\r\\n    function emergencyWithdraw(uint256 pid) external;\\r\\n\\r\\n    function support(\\r\\n        uint256 pid,\\r\\n        uint256 amount,\\r\\n        uint256 supportTo\\r\\n    ) external;\\r\\n\\r\\n    function supportWithPermit(\\r\\n        uint256 pid,\\r\\n        uint256 amount,\\r\\n        uint256 supportTo,\\r\\n        uint256 deadline,\\r\\n        uint8 v,\\r\\n        bytes32 r,\\r\\n        bytes32 s\\r\\n    ) external;\\r\\n\\r\\n    function supportWithPermitMax(\\r\\n        uint256 pid,\\r\\n        uint256 amount,\\r\\n        uint256 supportTo,\\r\\n        uint256 deadline,\\r\\n        uint8 v,\\r\\n        bytes32 r,\\r\\n        bytes32 s\\r\\n    ) external;\\r\\n\\r\\n    function desupport(uint256 pid, uint256 amount) external;\\r\\n\\r\\n    function emergencyDesupport(uint256 pid) external;\\r\\n\\r\\n    function mint(address to, uint256 amount) external;\\r\\n\\r\\n    function claimSushiReward(uint256 id) external;\\r\\n\\r\\n    function pendingSushiReward(uint256 id) external view returns (uint256);\\r\\n}\\r\\n\"\r\n    },\r\n    \"contracts/libraries/MasterChefModule.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\r\\npragma solidity ^0.8.5;\\r\\n\\r\\nimport \\\"@openzeppelin/contracts/access/Ownable.sol\\\";\\r\\nimport \\\"../interfaces/IMasterChefModule.sol\\\";\\r\\n\\r\\nabstract contract MasterChefModule is Ownable, IMasterChefModule {\\r\\n    IUniswapV2Pair public immutable override lpToken;\\r\\n\\r\\n    IERC20 public immutable override sushi;\\r\\n    IMasterChef public override sushiMasterChef;\\r\\n    uint256 public override masterChefPid;\\r\\n    uint256 public override sushiLastRewardBlock;\\r\\n    uint256 public override accSushiPerShare;\\r\\n    bool private initialDeposited;\\r\\n\\r\\n    constructor(IUniswapV2Pair _lpToken, IERC20 _sushi) {\\r\\n        lpToken = _lpToken;\\r\\n        sushi = _sushi;\\r\\n    }\\r\\n\\r\\n    function _depositModule(\\r\\n        uint256 _pid,\\r\\n        uint256 depositAmount,\\r\\n        uint256 supportedLPTokenAmount,\\r\\n        uint256 sushiRewardDebt\\r\\n    ) internal returns (uint256 newRewardDebt) {\\r\\n        uint256 _totalSupportedLPTokenAmount = sushiMasterChef.userInfo(_pid, address(this)).amount;\\r\\n        uint256 _accSushiPerShare = _depositToSushiMasterChef(_pid, depositAmount, _totalSupportedLPTokenAmount);\\r\\n        uint256 pending = (supportedLPTokenAmount * _accSushiPerShare) / 1e18 - sushiRewardDebt;\\r\\n        if (pending > 0) safeSushiTransfer(msg.sender, pending);\\r\\n        return ((supportedLPTokenAmount + depositAmount) * _accSushiPerShare) / 1e18;\\r\\n    }\\r\\n\\r\\n    function _withdrawModule(\\r\\n        uint256 _pid,\\r\\n        uint256 withdrawalAmount,\\r\\n        uint256 supportedLPTokenAmount,\\r\\n        uint256 sushiRewardDebt\\r\\n    ) internal returns (uint256 newRewardDebt) {\\r\\n        uint256 _totalSupportedLPTokenAmount = sushiMasterChef.userInfo(_pid, address(this)).amount;\\r\\n        uint256 _accSushiPerShare = _withdrawFromSushiMasterChef(_pid, withdrawalAmount, _totalSupportedLPTokenAmount);\\r\\n        uint256 pending = (supportedLPTokenAmount * _accSushiPerShare) / 1e18 - sushiRewardDebt;\\r\\n        if (pending > 0) safeSushiTransfer(msg.sender, pending);\\r\\n        return ((supportedLPTokenAmount - withdrawalAmount) * _accSushiPerShare) / 1e18;\\r\\n    }\\r\\n\\r\\n    function _claimSushiReward(uint256 supportedLPTokenAmount, uint256 sushiRewardDebt)\\r\\n        internal\\r\\n        returns (uint256 newRewardDebt)\\r\\n    {\\r\\n        uint256 _pid = masterChefPid;\\r\\n        require(_pid > 0, \\\"MasterChefModule: Unclaimable\\\");\\r\\n\\r\\n        uint256 _totalSupportedLPTokenAmount = sushiMasterChef.userInfo(_pid, address(this)).amount;\\r\\n        uint256 _accSushiPerShare = _depositToSushiMasterChef(_pid, 0, _totalSupportedLPTokenAmount);\\r\\n        uint256 pending = (supportedLPTokenAmount * _accSushiPerShare) / 1e18 - sushiRewardDebt;\\r\\n        require(pending > 0, \\\"MasterChefModule: Nothing can be claimed\\\");\\r\\n        safeSushiTransfer(msg.sender, pending);\\r\\n        return (supportedLPTokenAmount * _accSushiPerShare) / 1e18;\\r\\n    }\\r\\n\\r\\n    function _pendingSushiReward(uint256 supportedLPTokenAmount, uint256 sushiRewardDebt)\\r\\n        internal\\r\\n        view\\r\\n        returns (uint256)\\r\\n    {\\r\\n        uint256 _pid = masterChefPid;\\r\\n        if (_pid == 0) return 0;\\r\\n        uint256 _totalSupportedLPTokenAmount = sushiMasterChef.userInfo(_pid, address(this)).amount;\\r\\n\\r\\n        uint256 _accSushiPerShare = accSushiPerShare;\\r\\n        if (block.number > sushiLastRewardBlock && _totalSupportedLPTokenAmount != 0) {\\r\\n            uint256 reward = sushiMasterChef.pendingSushi(masterChefPid, address(this));\\r\\n            _accSushiPerShare += ((reward * 1e18) / _totalSupportedLPTokenAmount);\\r\\n        }\\r\\n\\r\\n        return (supportedLPTokenAmount * _accSushiPerShare) / 1e18 - sushiRewardDebt;\\r\\n    }\\r\\n\\r\\n    function setSushiMasterChef(IMasterChef _masterChef, uint256 _pid) external onlyOwner {\\r\\n        require(address(_masterChef.poolInfo(_pid).lpToken) == address(lpToken), \\\"MasterChefModule: Invalid pid\\\");\\r\\n        if (!initialDeposited) {\\r\\n            initialDeposited = true;\\r\\n            lpToken.approve(address(_masterChef), type(uint256).max);\\r\\n\\r\\n            sushiMasterChef = _masterChef;\\r\\n            masterChefPid = _pid;\\r\\n            _depositToSushiMasterChef(_pid, lpToken.balanceOf(address(this)), 0);\\r\\n        } else {\\r\\n            IMasterChef oldChef = sushiMasterChef;\\r\\n            uint256 oldpid = masterChefPid;\\r\\n            _withdrawFromSushiMasterChef(oldpid, oldChef.userInfo(oldpid, address(this)).amount, 0);\\r\\n            if (_masterChef != oldChef) {\\r\\n                lpToken.approve(address(oldChef), 0);\\r\\n                lpToken.approve(address(_masterChef), type(uint256).max);\\r\\n            }\\r\\n\\r\\n            sushiMasterChef = _masterChef;\\r\\n            masterChefPid = _pid;\\r\\n            _depositToSushiMasterChef(_pid, lpToken.balanceOf(address(this)), 0);\\r\\n        }\\r\\n    }\\r\\n\\r\\n    function _depositToSushiMasterChef(\\r\\n        uint256 _pid,\\r\\n        uint256 _amount,\\r\\n        uint256 _totalSupportedLPTokenAmount\\r\\n    ) internal returns (uint256 _accSushiPerShare) {\\r\\n        return _toSushiMasterChef(true, _pid, _amount, _totalSupportedLPTokenAmount);\\r\\n    }\\r\\n\\r\\n    function _withdrawFromSushiMasterChef(\\r\\n        uint256 _pid,\\r\\n        uint256 _amount,\\r\\n        uint256 _totalSupportedLPTokenAmount\\r\\n    ) internal returns (uint256 _accSushiPerShare) {\\r\\n        return _toSushiMasterChef(false, _pid, _amount, _totalSupportedLPTokenAmount);\\r\\n    }\\r\\n\\r\\n    function _toSushiMasterChef(\\r\\n        bool deposit,\\r\\n        uint256 _pid,\\r\\n        uint256 _amount,\\r\\n        uint256 _totalSupportedLPTokenAmount\\r\\n    ) internal returns (uint256) {\\r\\n        uint256 reward;\\r\\n        if (block.number <= sushiLastRewardBlock) {\\r\\n            if (deposit) sushiMasterChef.deposit(_pid, _amount);\\r\\n            else sushiMasterChef.withdraw(_pid, _amount);\\r\\n            return accSushiPerShare;\\r\\n        } else {\\r\\n            uint256 balance0 = sushi.balanceOf(address(this));\\r\\n            if (deposit) sushiMasterChef.deposit(_pid, _amount);\\r\\n            else sushiMasterChef.withdraw(_pid, _amount);\\r\\n            uint256 balance1 = sushi.balanceOf(address(this));\\r\\n            reward = balance1 - balance0;\\r\\n        }\\r\\n        sushiLastRewardBlock = block.number;\\r\\n        if (_totalSupportedLPTokenAmount > 0 && reward > 0) {\\r\\n            uint256 _accSushiPerShare = accSushiPerShare + ((reward * 1e18) / _totalSupportedLPTokenAmount);\\r\\n            accSushiPerShare = _accSushiPerShare;\\r\\n            return _accSushiPerShare;\\r\\n        } else {\\r\\n            return accSushiPerShare;\\r\\n        }\\r\\n    }\\r\\n\\r\\n    function safeSushiTransfer(address _to, uint256 _amount) internal {\\r\\n        uint256 sushiBal = sushi.balanceOf(address(this));\\r\\n        if (_amount > sushiBal) {\\r\\n            sushi.transfer(_to, sushiBal);\\r\\n        } else {\\r\\n            sushi.transfer(_to, _amount);\\r\\n        }\\r\\n    }\\r\\n}\\r\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/utils/Context.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\n/*\\n * @dev Provides information about the current execution context, including the\\n * sender of the transaction and its data. While these are generally available\\n * via msg.sender and msg.data, they should not be accessed in such a direct\\n * manner, since when dealing with meta-transactions the account sending and\\n * paying for execution may not be the actual sender (as far as an application\\n * is concerned).\\n *\\n * This contract is only required for intermediate, library-like contracts.\\n */\\nabstract contract Context {\\n    function _msgSender() internal view virtual returns (address) {\\n        return msg.sender;\\n    }\\n\\n    function _msgData() internal view virtual returns (bytes calldata) {\\n        this; // silence state mutability warning without generating bytecode - see https://github.com/ethereum/solidity/issues/2691\\n        return msg.data;\\n    }\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/utils/Address.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Collection of functions related to the address type\\n */\\nlibrary Address {\\n    /**\\n     * @dev Returns true if `account` is a contract.\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * It is unsafe to assume that an address for which this function returns\\n     * false is an externally-owned account (EOA) and not a contract.\\n     *\\n     * Among others, `isContract` will return false for the following\\n     * types of addresses:\\n     *\\n     *  - an externally-owned account\\n     *  - a contract in construction\\n     *  - an address where a contract will be created\\n     *  - an address where a contract lived, but was destroyed\\n     * ====\\n     */\\n    function isContract(address account) internal view returns (bool) {\\n        // This method relies on extcodesize, which returns 0 for contracts in\\n        // construction, since the code is only stored at the end of the\\n        // constructor execution.\\n\\n        uint256 size;\\n        // solhint-disable-next-line no-inline-assembly\\n        assembly { size := extcodesize(account) }\\n        return size > 0;\\n    }\\n\\n    /**\\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\\n     * `recipient`, forwarding all available gas and reverting on errors.\\n     *\\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\\n     * imposed by `transfer`, making them unable to receive funds via\\n     * `transfer`. {sendValue} removes this limitation.\\n     *\\n     * https://diligence.consensys.net/posts/2019/09/stop-using-soliditys-transfer-now/[Learn more].\\n     *\\n     * IMPORTANT: because control is transferred to `recipient`, care must be\\n     * taken to not create reentrancy vulnerabilities. Consider using\\n     * {ReentrancyGuard} or the\\n     * https://solidity.readthedocs.io/en/v0.5.11/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\\n     */\\n    function sendValue(address payable recipient, uint256 amount) internal {\\n        require(address(this).balance >= amount, \\\"Address: insufficient balance\\\");\\n\\n        // solhint-disable-next-line avoid-low-level-calls, avoid-call-value\\n        (bool success, ) = recipient.call{ value: amount }(\\\"\\\");\\n        require(success, \\\"Address: unable to send value, recipient may have reverted\\\");\\n    }\\n\\n    /**\\n     * @dev Performs a Solidity function call using a low level `call`. A\\n     * plain`call` is an unsafe replacement for a function call: use this\\n     * function instead.\\n     *\\n     * If `target` reverts with a revert reason, it is bubbled up by this\\n     * function (like regular Solidity function calls).\\n     *\\n     * Returns the raw returned data. To convert to the expected return value,\\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\\n     *\\n     * Requirements:\\n     *\\n     * - `target` must be a contract.\\n     * - calling `target` with `data` must not revert.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\\n      return functionCall(target, data, \\\"Address: low-level call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\\n     * `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(address target, bytes memory data, string memory errorMessage) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, 0, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but also transferring `value` wei to `target`.\\n     *\\n     * Requirements:\\n     *\\n     * - the calling contract must have an ETH balance of at least `value`.\\n     * - the called Solidity function must be `payable`.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(address target, bytes memory data, uint256 value) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, value, \\\"Address: low-level call with value failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\\n     * with `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(address target, bytes memory data, uint256 value, string memory errorMessage) internal returns (bytes memory) {\\n        require(address(this).balance >= value, \\\"Address: insufficient balance for call\\\");\\n        require(isContract(target), \\\"Address: call to non-contract\\\");\\n\\n        // solhint-disable-next-line avoid-low-level-calls\\n        (bool success, bytes memory returndata) = target.call{ value: value }(data);\\n        return _verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\\n        return functionStaticCall(target, data, \\\"Address: low-level static call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(address target, bytes memory data, string memory errorMessage) internal view returns (bytes memory) {\\n        require(isContract(target), \\\"Address: static call to non-contract\\\");\\n\\n        // solhint-disable-next-line avoid-low-level-calls\\n        (bool success, bytes memory returndata) = target.staticcall(data);\\n        return _verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionDelegateCall(target, data, \\\"Address: low-level delegate call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(address target, bytes memory data, string memory errorMessage) internal returns (bytes memory) {\\n        require(isContract(target), \\\"Address: delegate call to non-contract\\\");\\n\\n        // solhint-disable-next-line avoid-low-level-calls\\n        (bool success, bytes memory returndata) = target.delegatecall(data);\\n        return _verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    function _verifyCallResult(bool success, bytes memory returndata, string memory errorMessage) private pure returns(bytes memory) {\\n        if (success) {\\n            return returndata;\\n        } else {\\n            // Look for revert reason and bubble it up if present\\n            if (returndata.length > 0) {\\n                // The easiest way to bubble the revert reason is using memory via assembly\\n\\n                // solhint-disable-next-line no-inline-assembly\\n                assembly {\\n                    let returndata_size := mload(returndata)\\n                    revert(add(32, returndata), returndata_size)\\n                }\\n            } else {\\n                revert(errorMessage);\\n            }\\n        }\\n    }\\n}\\n\"\r\n    },\r\n    \"contracts/interfaces/IMaidCoin.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\r\\npragma solidity >=0.5.0;\\r\\n\\r\\ninterface IMaidCoin {\\r\\n    event Approval(address indexed owner, address indexed spender, uint256 value);\\r\\n    event Transfer(address indexed from, address indexed to, uint256 value);\\r\\n\\r\\n    function name() external pure returns (string memory);\\r\\n\\r\\n    function symbol() external pure returns (string memory);\\r\\n\\r\\n    function decimals() external pure returns (uint8);\\r\\n\\r\\n    function totalSupply() external view returns (uint256);\\r\\n\\r\\n    function INITIAL_SUPPLY() external pure returns (uint256);\\r\\n\\r\\n    function balanceOf(address owner) external view returns (uint256);\\r\\n\\r\\n    function allowance(address owner, address spender) external view returns (uint256);\\r\\n\\r\\n    function approve(address spender, uint256 value) external returns (bool);\\r\\n\\r\\n    function transfer(address to, uint256 value) external returns (bool);\\r\\n\\r\\n    function transferFrom(\\r\\n        address from,\\r\\n        address to,\\r\\n        uint256 value\\r\\n    ) external returns (bool);\\r\\n\\r\\n    function DOMAIN_SEPARATOR() external view returns (bytes32);\\r\\n\\r\\n    function PERMIT_TYPEHASH() external pure returns (bytes32);\\r\\n\\r\\n    function nonces(address owner) external view returns (uint256);\\r\\n\\r\\n    function permit(\\r\\n        address owner,\\r\\n        address spender,\\r\\n        uint256 value,\\r\\n        uint256 deadline,\\r\\n        uint8 v,\\r\\n        bytes32 r,\\r\\n        bytes32 s\\r\\n    ) external;\\r\\n\\r\\n    function mint(address to, uint256 amount) external;\\r\\n\\r\\n    function burn(uint256 amount) external;\\r\\n}\\r\\n\"\r\n    },\r\n    \"contracts/interfaces/IRewardCalculator.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\r\\npragma solidity >=0.5.0;\\r\\n\\r\\ninterface IRewardCalculator {\\r\\n    function rewardPerBlock() external view returns (uint256);\\r\\n}\\r\\n\"\r\n    },\r\n    \"contracts/interfaces/ISupportable.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\r\\npragma solidity >=0.5.0;\\r\\n\\r\\ninterface ISupportable {\\r\\n    event SupportTo(address indexed supporter, uint256 indexed to);\\r\\n    event ChangeSupportingRoute(uint256 indexed from, uint256 indexed to);\\r\\n    event ChangeSupportedPower(uint256 indexed id, int256 power);\\r\\n    event TransferSupportingRewards(address indexed supporter, uint256 indexed id, uint256 amounts);\\r\\n\\r\\n    function supportingRoute(uint256 id) external view returns (uint256);\\r\\n\\r\\n    function supportingTo(address supporter) external view returns (uint256);\\r\\n\\r\\n    function supportedPower(uint256 id) external view returns (uint256);\\r\\n\\r\\n    function totalRewardsFromSupporters(uint256 id) external view returns (uint256);\\r\\n\\r\\n    function setSupportingTo(\\r\\n        address supporter,\\r\\n        uint256 to,\\r\\n        uint256 amounts\\r\\n    ) external;\\r\\n\\r\\n    function checkSupportingRoute(address supporter) external returns (address, uint256);\\r\\n\\r\\n    function changeSupportedPower(address supporter, int256 power) external;\\r\\n\\r\\n    function shareRewards(\\r\\n        uint256 pending,\\r\\n        address supporter,\\r\\n        uint8 supportingRatio\\r\\n    ) external returns (address nurseOwner, uint256 amountToNurseOwner);\\r\\n}\\r\\n\"\r\n    },\r\n    \"contracts/interfaces/IMasterChefModule.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\r\\npragma solidity >=0.5.0;\\r\\n\\r\\nimport \\\"./IMasterChef.sol\\\";\\r\\nimport \\\"../uniswapv2/interfaces/IUniswapV2Pair.sol\\\";\\r\\n\\r\\ninterface IMasterChefModule {\\r\\n    function lpToken() external view returns (IUniswapV2Pair);\\r\\n\\r\\n    function sushi() external view returns (IERC20);\\r\\n\\r\\n    function sushiMasterChef() external view returns (IMasterChef);\\r\\n\\r\\n    function masterChefPid() external view returns (uint256);\\r\\n\\r\\n    function sushiLastRewardBlock() external view returns (uint256);\\r\\n\\r\\n    function accSushiPerShare() external view returns (uint256);\\r\\n}\\r\\n\"\r\n    },\r\n    \"contracts/interfaces/IMasterChef.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\r\\npragma solidity >=0.6.12;\\r\\npragma experimental ABIEncoderV2;\\r\\nimport \\\"@openzeppelin/contracts/token/ERC20/IERC20.sol\\\";\\r\\n\\r\\ninterface IMasterChef {\\r\\n    struct UserInfo {\\r\\n        uint256 amount; // How many LP tokens the user has provided.\\r\\n        uint256 rewardDebt; // Reward debt. See explanation below.\\r\\n    }\\r\\n\\r\\n    struct PoolInfo {\\r\\n        IERC20 lpToken; // Address of LP token contract.\\r\\n        uint256 allocPoint; // How many allocation points assigned to this pool. SUSHI to distribute per block.\\r\\n        uint256 lastRewardBlock; // Last block number that SUSHI distribution occurs.\\r\\n        uint256 accSushiPerShare; // Accumulated SUSHI per share, times 1e12. See below.\\r\\n    }\\r\\n\\r\\n    function poolInfo(uint256 pid) external view returns (IMasterChef.PoolInfo memory);\\r\\n\\r\\n    function userInfo(uint256 pid, address user) external view returns (IMasterChef.UserInfo memory);\\r\\n\\r\\n    function pendingSushi(uint256 _pid, address _user) external view returns (uint256);\\r\\n\\r\\n    function deposit(uint256 _pid, uint256 _amount) external;\\r\\n\\r\\n    function withdraw(uint256 _pid, uint256 _amount) external;\\r\\n}\\r\\n\"\r\n    },\r\n    \"contracts/uniswapv2/interfaces/IUniswapV2Pair.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\r\\npragma solidity >=0.5.0;\\r\\n\\r\\ninterface IUniswapV2Pair {\\r\\n    event Approval(address indexed owner, address indexed spender, uint256 value);\\r\\n    event Transfer(address indexed from, address indexed to, uint256 value);\\r\\n\\r\\n    function name() external pure returns (string memory);\\r\\n\\r\\n    function symbol() external pure returns (string memory);\\r\\n\\r\\n    function decimals() external pure returns (uint8);\\r\\n\\r\\n    function totalSupply() external view returns (uint256);\\r\\n\\r\\n    function balanceOf(address owner) external view returns (uint256);\\r\\n\\r\\n    function allowance(address owner, address spender) external view returns (uint256);\\r\\n\\r\\n    function approve(address spender, uint256 value) external returns (bool);\\r\\n\\r\\n    function transfer(address to, uint256 value) external returns (bool);\\r\\n\\r\\n    function transferFrom(\\r\\n        address from,\\r\\n        address to,\\r\\n        uint256 value\\r\\n    ) external returns (bool);\\r\\n\\r\\n    function DOMAIN_SEPARATOR() external view returns (bytes32);\\r\\n\\r\\n    function PERMIT_TYPEHASH() external pure returns (bytes32);\\r\\n\\r\\n    function nonces(address owner) external view returns (uint256);\\r\\n\\r\\n    function permit(\\r\\n        address owner,\\r\\n        address spender,\\r\\n        uint256 value,\\r\\n        uint256 deadline,\\r\\n        uint8 v,\\r\\n        bytes32 r,\\r\\n        bytes32 s\\r\\n    ) external;\\r\\n\\r\\n    event Mint(address indexed sender, uint256 amount0, uint256 amount1);\\r\\n    event Burn(address indexed sender, uint256 amount0, uint256 amount1, address indexed to);\\r\\n    event Swap(\\r\\n        address indexed sender,\\r\\n        uint256 amount0In,\\r\\n        uint256 amount1In,\\r\\n        uint256 amount0Out,\\r\\n        uint256 amount1Out,\\r\\n        address indexed to\\r\\n    );\\r\\n    event Sync(uint112 reserve0, uint112 reserve1);\\r\\n\\r\\n    function MINIMUM_LIQUIDITY() external pure returns (uint256);\\r\\n\\r\\n    function factory() external view returns (address);\\r\\n\\r\\n    function token0() external view returns (address);\\r\\n\\r\\n    function token1() external view returns (address);\\r\\n\\r\\n    function getReserves()\\r\\n        external\\r\\n        view\\r\\n        returns (\\r\\n            uint112 reserve0,\\r\\n            uint112 reserve1,\\r\\n            uint32 blockTimestampLast\\r\\n        );\\r\\n\\r\\n    function price0CumulativeLast() external view returns (uint256);\\r\\n\\r\\n    function price1CumulativeLast() external view returns (uint256);\\r\\n\\r\\n    function kLast() external view returns (uint256);\\r\\n\\r\\n    function mint(address to) external returns (uint256 liquidity);\\r\\n\\r\\n    function burn(address to) external returns (uint256 amount0, uint256 amount1);\\r\\n\\r\\n    function swap(\\r\\n        uint256 amount0Out,\\r\\n        uint256 amount1Out,\\r\\n        address to,\\r\\n        bytes calldata data\\r\\n    ) external;\\r\\n\\r\\n    function skim(address to) external;\\r\\n\\r\\n    function sync() external;\\r\\n\\r\\n    function initialize(address, address) external;\\r\\n}\\r\\n\"\r\n    }\r\n  },\r\n  \"settings\": {\r\n    \"optimizer\": {\r\n      \"enabled\": true,\r\n      \"runs\": 200\r\n    },\r\n    \"outputSelection\": {\r\n      \"*\": {\r\n        \"*\": [\r\n          \"evm.bytecode\",\r\n          \"evm.deployedBytecode\",\r\n          \"abi\"\r\n        ]\r\n      }\r\n    },\r\n    \"metadata\": {\r\n      \"useLiteralContent\": true\r\n    },\r\n    \"libraries\": {}\r\n  }\r\n}}","ABI":"[{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_initialRewardPerBlock\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_decreasingInterval\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_startBlock\",\"type\":\"uint256\"},{\"internalType\":\"contract IMaidCoin\",\"name\":\"_maidCoin\",\"type\":\"address\"},{\"internalType\":\"contract IUniswapV2Pair\",\"name\":\"_lpToken\",\"type\":\"address\"},{\"internalType\":\"contract IERC20\",\"name\":\"_sushi\",\"type\":\"address\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"pid\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"addr\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"bool\",\"name\":\"delegate\",\"type\":\"bool\"},{\"indexed\":true,\"internalType\":\"bool\",\"name\":\"mintable\",\"type\":\"bool\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"supportable\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint8\",\"name\":\"supportingRatio\",\"type\":\"uint8\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"allocPoint\",\"type\":\"uint256\"}],\"name\":\"Add\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"addr\",\"type\":\"address\"}],\"name\":\"ChangeRewardCalculator\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"userId\",\"type\":\"uint256\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"pid\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"Deposit\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"supporter\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"pid\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"Desupport\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"pid\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"EmergencyDesupport\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"pid\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"EmergencyWithdraw\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"pid\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"allocPoint\",\"type\":\"uint256\"}],\"name\":\"Set\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"pid\",\"type\":\"uint256\"},{\"indexed\":true,\"internalType\":\"bool\",\"name\":\"status\",\"type\":\"bool\"}],\"name\":\"SetIsSupporterPool\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"supporter\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"pid\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"Support\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"userId\",\"type\":\"uint256\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"pid\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"Withdraw\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"accSushiPerShare\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"addr\",\"type\":\"address\"},{\"internalType\":\"bool\",\"name\":\"delegate\",\"type\":\"bool\"},{\"internalType\":\"bool\",\"name\":\"mintable\",\"type\":\"bool\"},{\"internalType\":\"address\",\"name\":\"supportable\",\"type\":\"address\"},{\"internalType\":\"uint8\",\"name\":\"supportingRatio\",\"type\":\"uint8\"},{\"internalType\":\"uint256\",\"name\":\"allocPoint\",\"type\":\"uint256\"}],\"name\":\"add\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"addr\",\"type\":\"address\"}],\"name\":\"changeRewardCalculator\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"pid\",\"type\":\"uint256\"}],\"name\":\"claimAllReward\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"pid\",\"type\":\"uint256\"}],\"name\":\"claimSushiReward\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"decreasingInterval\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"pid\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"userId\",\"type\":\"uint256\"}],\"name\":\"deposit\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"pid\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"userId\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"deadline\",\"type\":\"uint256\"},{\"internalType\":\"uint8\",\"name\":\"v\",\"type\":\"uint8\"},{\"internalType\":\"bytes32\",\"name\":\"r\",\"type\":\"bytes32\"},{\"internalType\":\"bytes32\",\"name\":\"s\",\"type\":\"bytes32\"}],\"name\":\"depositWithPermit\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"pid\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"userId\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"deadline\",\"type\":\"uint256\"},{\"internalType\":\"uint8\",\"name\":\"v\",\"type\":\"uint8\"},{\"internalType\":\"bytes32\",\"name\":\"r\",\"type\":\"bytes32\"},{\"internalType\":\"bytes32\",\"name\":\"s\",\"type\":\"bytes32\"}],\"name\":\"depositWithPermitMax\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"pid\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"desupport\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"pid\",\"type\":\"uint256\"}],\"name\":\"emergencyDesupport\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"pid\",\"type\":\"uint256\"}],\"name\":\"emergencyWithdraw\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"initialRewardPerBlock\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"lpToken\",\"outputs\":[{\"internalType\":\"contract IUniswapV2Pair\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"maidCoin\",\"outputs\":[{\"internalType\":\"contract IMaidCoin\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"masterChefPid\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"mint\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"mintableByAddr\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"pid\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"userId\",\"type\":\"uint256\"}],\"name\":\"pendingReward\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"pid\",\"type\":\"uint256\"}],\"name\":\"pendingSushiReward\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"poolCount\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"poolInfo\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"addr\",\"type\":\"address\"},{\"internalType\":\"bool\",\"name\":\"delegate\",\"type\":\"bool\"},{\"internalType\":\"contract ISupportable\",\"name\":\"supportable\",\"type\":\"address\"},{\"internalType\":\"uint8\",\"name\":\"supportingRatio\",\"type\":\"uint8\"},{\"internalType\":\"uint256\",\"name\":\"allocPoint\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"lastRewardBlock\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"accRewardPerShare\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"supply\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"rewardCalculator\",\"outputs\":[{\"internalType\":\"contract IRewardCalculator\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"rewardPerBlock\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256[]\",\"name\":\"pids\",\"type\":\"uint256[]\"},{\"internalType\":\"uint256[]\",\"name\":\"allocPoints\",\"type\":\"uint256[]\"}],\"name\":\"set\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"contract IMasterChef\",\"name\":\"_masterChef\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_pid\",\"type\":\"uint256\"}],\"name\":\"setSushiMasterChef\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"startBlock\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"pid\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"supportTo\",\"type\":\"uint256\"}],\"name\":\"support\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"pid\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"supportTo\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"deadline\",\"type\":\"uint256\"},{\"internalType\":\"uint8\",\"name\":\"v\",\"type\":\"uint8\"},{\"internalType\":\"bytes32\",\"name\":\"r\",\"type\":\"bytes32\"},{\"internalType\":\"bytes32\",\"name\":\"s\",\"type\":\"bytes32\"}],\"name\":\"supportWithPermit\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"pid\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"supportTo\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"deadline\",\"type\":\"uint256\"},{\"internalType\":\"uint8\",\"name\":\"v\",\"type\":\"uint8\"},{\"internalType\":\"bytes32\",\"name\":\"r\",\"type\":\"bytes32\"},{\"internalType\":\"bytes32\",\"name\":\"s\",\"type\":\"bytes32\"}],\"name\":\"supportWithPermitMax\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"sushi\",\"outputs\":[{\"internalType\":\"contract IERC20\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"sushiLastRewardBlock\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"sushiMasterChef\",\"outputs\":[{\"internalType\":\"contract IMasterChef\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalAllocPoint\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"userInfo\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"rewardDebt\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"pid\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"userId\",\"type\":\"uint256\"}],\"name\":\"withdraw\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}]","ContractName":"TheMaster","CompilerVersion":"v0.8.5+commit.a4f2e591","OptimizationUsed":"1","Runs":"200","ConstructorArguments":"0000000000000000000000000000000000000000000000000de0b6b3a764000000000000000000000000000000000000000000000000000000000000000805200000000000000000000000000000000000000000000000000000000000cb2fa00000000000000000000000004af698b479d0098229dc715655c667ceb6cd8433000000000000000000000000c7175038323562cb68e4bbdd379e9fe65134937f0000000000000000000000006b3595068778dd592e39a122f4f5a5cf09c90fe2","EVMVersion":"Default","Library":"","LicenseType":"","Proxy":"0","Implementation":"","SwarmSource":""}]}