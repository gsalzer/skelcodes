{"status":"1","message":"OK","result":[{"SourceCode":"{{\r\n  \"language\": \"Solidity\",\r\n  \"sources\": {\r\n    \"contracts/flattened/Adapter03.sol\": {\r\n      \"content\": \"// File: openzeppelin-solidity/contracts/token/ERC20/IERC20.sol\\n\\n\\n\\npragma solidity >=0.6.0 <0.8.0;\\n\\n/**\\n * @dev Interface of the ERC20 standard as defined in the EIP.\\n */\\ninterface IERC20 {\\n    /**\\n     * @dev Returns the amount of tokens in existence.\\n     */\\n    function totalSupply() external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the amount of tokens owned by `account`.\\n     */\\n    function balanceOf(address account) external view returns (uint256);\\n\\n    /**\\n     * @dev Moves `amount` tokens from the caller's account to `recipient`.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transfer(address recipient, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Returns the remaining number of tokens that `spender` will be\\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\\n     * zero by default.\\n     *\\n     * This value changes when {approve} or {transferFrom} are called.\\n     */\\n    function allowance(address owner, address spender) external view returns (uint256);\\n\\n    /**\\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\\n     * that someone may use both the old and the new allowance by unfortunate\\n     * transaction ordering. One possible solution to mitigate this race\\n     * condition is to first reduce the spender's allowance to 0 and set the\\n     * desired value afterwards:\\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address spender, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Moves `amount` tokens from `sender` to `recipient` using the\\n     * allowance mechanism. `amount` is then deducted from the caller's\\n     * allowance.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(address sender, address recipient, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\\n     * another (`to`).\\n     *\\n     * Note that `value` may be zero.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 value);\\n\\n    /**\\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\\n     * a call to {approve}. `value` is the new allowance.\\n     */\\n    event Approval(address indexed owner, address indexed spender, uint256 value);\\n}\\n\\n// File: openzeppelin-solidity/contracts/math/SafeMath.sol\\n\\n\\n\\npragma solidity >=0.6.0 <0.8.0;\\n\\n/**\\n * @dev Wrappers over Solidity's arithmetic operations with added overflow\\n * checks.\\n *\\n * Arithmetic operations in Solidity wrap on overflow. This can easily result\\n * in bugs, because programmers usually assume that an overflow raises an\\n * error, which is the standard behavior in high level programming languages.\\n * `SafeMath` restores this intuition by reverting the transaction when an\\n * operation overflows.\\n *\\n * Using this library instead of the unchecked operations eliminates an entire\\n * class of bugs, so it's recommended to use it always.\\n */\\nlibrary SafeMath {\\n    /**\\n     * @dev Returns the addition of two unsigned integers, reverting on\\n     * overflow.\\n     *\\n     * Counterpart to Solidity's `+` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Addition cannot overflow.\\n     */\\n    function add(uint256 a, uint256 b) internal pure returns (uint256) {\\n        uint256 c = a + b;\\n        require(c >= a, \\\"SafeMath: addition overflow\\\");\\n\\n        return c;\\n    }\\n\\n    /**\\n     * @dev Returns the subtraction of two unsigned integers, reverting on\\n     * overflow (when the result is negative).\\n     *\\n     * Counterpart to Solidity's `-` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Subtraction cannot overflow.\\n     */\\n    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return sub(a, b, \\\"SafeMath: subtraction overflow\\\");\\n    }\\n\\n    /**\\n     * @dev Returns the subtraction of two unsigned integers, reverting with custom message on\\n     * overflow (when the result is negative).\\n     *\\n     * Counterpart to Solidity's `-` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Subtraction cannot overflow.\\n     */\\n    function sub(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\\n        require(b <= a, errorMessage);\\n        uint256 c = a - b;\\n\\n        return c;\\n    }\\n\\n    /**\\n     * @dev Returns the multiplication of two unsigned integers, reverting on\\n     * overflow.\\n     *\\n     * Counterpart to Solidity's `*` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Multiplication cannot overflow.\\n     */\\n    function mul(uint256 a, uint256 b) internal pure returns (uint256) {\\n        // Gas optimization: this is cheaper than requiring 'a' not being zero, but the\\n        // benefit is lost if 'b' is also tested.\\n        // See: https://github.com/OpenZeppelin/openzeppelin-contracts/pull/522\\n        if (a == 0) {\\n            return 0;\\n        }\\n\\n        uint256 c = a * b;\\n        require(c / a == b, \\\"SafeMath: multiplication overflow\\\");\\n\\n        return c;\\n    }\\n\\n    /**\\n     * @dev Returns the integer division of two unsigned integers. Reverts on\\n     * division by zero. The result is rounded towards zero.\\n     *\\n     * Counterpart to Solidity's `/` operator. Note: this function uses a\\n     * `revert` opcode (which leaves remaining gas untouched) while Solidity\\n     * uses an invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Requirements:\\n     *\\n     * - The divisor cannot be zero.\\n     */\\n    function div(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return div(a, b, \\\"SafeMath: division by zero\\\");\\n    }\\n\\n    /**\\n     * @dev Returns the integer division of two unsigned integers. Reverts with custom message on\\n     * division by zero. The result is rounded towards zero.\\n     *\\n     * Counterpart to Solidity's `/` operator. Note: this function uses a\\n     * `revert` opcode (which leaves remaining gas untouched) while Solidity\\n     * uses an invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Requirements:\\n     *\\n     * - The divisor cannot be zero.\\n     */\\n    function div(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\\n        require(b > 0, errorMessage);\\n        uint256 c = a / b;\\n        // assert(a == b * c + a % b); // There is no case in which this doesn't hold\\n\\n        return c;\\n    }\\n\\n    /**\\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\\n     * Reverts when dividing by zero.\\n     *\\n     * Counterpart to Solidity's `%` operator. This function uses a `revert`\\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\\n     * invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Requirements:\\n     *\\n     * - The divisor cannot be zero.\\n     */\\n    function mod(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return mod(a, b, \\\"SafeMath: modulo by zero\\\");\\n    }\\n\\n    /**\\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\\n     * Reverts with custom message when dividing by zero.\\n     *\\n     * Counterpart to Solidity's `%` operator. This function uses a `revert`\\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\\n     * invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Requirements:\\n     *\\n     * - The divisor cannot be zero.\\n     */\\n    function mod(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\\n        require(b != 0, errorMessage);\\n        return a % b;\\n    }\\n}\\n\\n// File: openzeppelin-solidity/contracts/utils/Address.sol\\n\\n\\n\\npragma solidity >=0.6.2 <0.8.0;\\n\\n/**\\n * @dev Collection of functions related to the address type\\n */\\nlibrary Address {\\n    /**\\n     * @dev Returns true if `account` is a contract.\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * It is unsafe to assume that an address for which this function returns\\n     * false is an externally-owned account (EOA) and not a contract.\\n     *\\n     * Among others, `isContract` will return false for the following\\n     * types of addresses:\\n     *\\n     *  - an externally-owned account\\n     *  - a contract in construction\\n     *  - an address where a contract will be created\\n     *  - an address where a contract lived, but was destroyed\\n     * ====\\n     */\\n    function isContract(address account) internal view returns (bool) {\\n        // This method relies on extcodesize, which returns 0 for contracts in\\n        // construction, since the code is only stored at the end of the\\n        // constructor execution.\\n\\n        uint256 size;\\n        // solhint-disable-next-line no-inline-assembly\\n        assembly { size := extcodesize(account) }\\n        return size > 0;\\n    }\\n\\n    /**\\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\\n     * `recipient`, forwarding all available gas and reverting on errors.\\n     *\\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\\n     * imposed by `transfer`, making them unable to receive funds via\\n     * `transfer`. {sendValue} removes this limitation.\\n     *\\n     * https://diligence.consensys.net/posts/2019/09/stop-using-soliditys-transfer-now/[Learn more].\\n     *\\n     * IMPORTANT: because control is transferred to `recipient`, care must be\\n     * taken to not create reentrancy vulnerabilities. Consider using\\n     * {ReentrancyGuard} or the\\n     * https://solidity.readthedocs.io/en/v0.5.11/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\\n     */\\n    function sendValue(address payable recipient, uint256 amount) internal {\\n        require(address(this).balance >= amount, \\\"Address: insufficient balance\\\");\\n\\n        // solhint-disable-next-line avoid-low-level-calls, avoid-call-value\\n        (bool success, ) = recipient.call{ value: amount }(\\\"\\\");\\n        require(success, \\\"Address: unable to send value, recipient may have reverted\\\");\\n    }\\n\\n    /**\\n     * @dev Performs a Solidity function call using a low level `call`. A\\n     * plain`call` is an unsafe replacement for a function call: use this\\n     * function instead.\\n     *\\n     * If `target` reverts with a revert reason, it is bubbled up by this\\n     * function (like regular Solidity function calls).\\n     *\\n     * Returns the raw returned data. To convert to the expected return value,\\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\\n     *\\n     * Requirements:\\n     *\\n     * - `target` must be a contract.\\n     * - calling `target` with `data` must not revert.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\\n      return functionCall(target, data, \\\"Address: low-level call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\\n     * `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(address target, bytes memory data, string memory errorMessage) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, 0, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but also transferring `value` wei to `target`.\\n     *\\n     * Requirements:\\n     *\\n     * - the calling contract must have an ETH balance of at least `value`.\\n     * - the called Solidity function must be `payable`.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(address target, bytes memory data, uint256 value) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, value, \\\"Address: low-level call with value failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\\n     * with `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(address target, bytes memory data, uint256 value, string memory errorMessage) internal returns (bytes memory) {\\n        require(address(this).balance >= value, \\\"Address: insufficient balance for call\\\");\\n        require(isContract(target), \\\"Address: call to non-contract\\\");\\n\\n        // solhint-disable-next-line avoid-low-level-calls\\n        (bool success, bytes memory returndata) = target.call{ value: value }(data);\\n        return _verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\\n        return functionStaticCall(target, data, \\\"Address: low-level static call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(address target, bytes memory data, string memory errorMessage) internal view returns (bytes memory) {\\n        require(isContract(target), \\\"Address: static call to non-contract\\\");\\n\\n        // solhint-disable-next-line avoid-low-level-calls\\n        (bool success, bytes memory returndata) = target.staticcall(data);\\n        return _verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    function _verifyCallResult(bool success, bytes memory returndata, string memory errorMessage) private pure returns(bytes memory) {\\n        if (success) {\\n            return returndata;\\n        } else {\\n            // Look for revert reason and bubble it up if present\\n            if (returndata.length > 0) {\\n                // The easiest way to bubble the revert reason is using memory via assembly\\n\\n                // solhint-disable-next-line no-inline-assembly\\n                assembly {\\n                    let returndata_size := mload(returndata)\\n                    revert(add(32, returndata), returndata_size)\\n                }\\n            } else {\\n                revert(errorMessage);\\n            }\\n        }\\n    }\\n}\\n\\n// File: openzeppelin-solidity/contracts/token/ERC20/SafeERC20.sol\\n\\n\\n\\npragma solidity >=0.6.0 <0.8.0;\\n\\n\\n\\n\\n/**\\n * @title SafeERC20\\n * @dev Wrappers around ERC20 operations that throw on failure (when the token\\n * contract returns false). Tokens that return no value (and instead revert or\\n * throw on failure) are also supported, non-reverting calls are assumed to be\\n * successful.\\n * To use this library you can add a `using SafeERC20 for IERC20;` statement to your contract,\\n * which allows you to call the safe operations as `token.safeTransfer(...)`, etc.\\n */\\nlibrary SafeERC20 {\\n    using SafeMath for uint256;\\n    using Address for address;\\n\\n    function safeTransfer(IERC20 token, address to, uint256 value) internal {\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.transfer.selector, to, value));\\n    }\\n\\n    function safeTransferFrom(IERC20 token, address from, address to, uint256 value) internal {\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.transferFrom.selector, from, to, value));\\n    }\\n\\n    /**\\n     * @dev Deprecated. This function has issues similar to the ones found in\\n     * {IERC20-approve}, and its usage is discouraged.\\n     *\\n     * Whenever possible, use {safeIncreaseAllowance} and\\n     * {safeDecreaseAllowance} instead.\\n     */\\n    function safeApprove(IERC20 token, address spender, uint256 value) internal {\\n        // safeApprove should only be called when setting an initial allowance,\\n        // or when resetting it to zero. To increase and decrease it, use\\n        // 'safeIncreaseAllowance' and 'safeDecreaseAllowance'\\n        // solhint-disable-next-line max-line-length\\n        require((value == 0) || (token.allowance(address(this), spender) == 0),\\n            \\\"SafeERC20: approve from non-zero to non-zero allowance\\\"\\n        );\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, value));\\n    }\\n\\n    function safeIncreaseAllowance(IERC20 token, address spender, uint256 value) internal {\\n        uint256 newAllowance = token.allowance(address(this), spender).add(value);\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));\\n    }\\n\\n    function safeDecreaseAllowance(IERC20 token, address spender, uint256 value) internal {\\n        uint256 newAllowance = token.allowance(address(this), spender).sub(value, \\\"SafeERC20: decreased allowance below zero\\\");\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));\\n    }\\n\\n    /**\\n     * @dev Imitates a Solidity high-level call (i.e. a regular function call to a contract), relaxing the requirement\\n     * on the return value: the return value is optional (but if data is returned, it must not be false).\\n     * @param token The token targeted by the call.\\n     * @param data The call data (encoded using abi.encode or one of its variants).\\n     */\\n    function _callOptionalReturn(IERC20 token, bytes memory data) private {\\n        // We need to perform a low level call here, to bypass Solidity's return data size checking mechanism, since\\n        // we're implementing it ourselves. We use {Address.functionCall} to perform this call, which verifies that\\n        // the target address contains contract code and also asserts for success in the low-level call.\\n\\n        bytes memory returndata = address(token).functionCall(data, \\\"SafeERC20: low-level call failed\\\");\\n        if (returndata.length > 0) { // Return data is optional\\n            // solhint-disable-next-line max-line-length\\n            require(abi.decode(returndata, (bool)), \\\"SafeERC20: ERC20 operation did not succeed\\\");\\n        }\\n    }\\n}\\n\\n// File: original_contracts/ITokenTransferProxy.sol\\n\\npragma solidity 0.7.5;\\n\\n\\ninterface ITokenTransferProxy {\\n\\n    function transferFrom(\\n        address token,\\n        address from,\\n        address to,\\n        uint256 amount\\n    )\\n        external;\\n}\\n\\n// File: original_contracts/lib/Utils.sol\\n\\npragma solidity 0.7.5;\\npragma experimental ABIEncoderV2;\\n\\n\\n\\n\\n\\ninterface IERC20Permit {\\n    function permit(address owner, address spender, uint256 amount, uint256 deadline, uint8 v, bytes32 r, bytes32 s) external;\\n}\\n\\nlibrary Utils {\\n    using SafeMath for uint256;\\n    using SafeERC20 for IERC20;\\n\\n    address constant ETH_ADDRESS = address(\\n        0xEeeeeEeeeEeEeeEeEeEeeEEEeeeeEeeeeeeeEEeE\\n    );\\n    \\n    uint256 constant MAX_UINT = type(uint256).max;\\n\\n    /**\\n   * @param fromToken Address of the source token\\n   * @param fromAmount Amount of source tokens to be swapped\\n   * @param toAmount Minimum destination token amount expected out of this swap\\n   * @param expectedAmount Expected amount of destination tokens without slippage\\n   * @param beneficiary Beneficiary address\\n   * 0 then 100% will be transferred to beneficiary. Pass 10000 for 100%\\n   * @param path Route to be taken for this swap to take place\\n\\n   */\\n    struct SellData {\\n        address fromToken;\\n        uint256 fromAmount;\\n        uint256 toAmount;\\n        uint256 expectedAmount;\\n        address payable beneficiary;\\n        Utils.Path[] path;\\n        address payable partner;\\n        uint256 feePercent;\\n        bytes permit;\\n        uint256 deadline;\\n        bytes16 uuid;\\n    }\\n\\n    struct MegaSwapSellData {\\n        address fromToken;\\n        uint256 fromAmount;\\n        uint256 toAmount;\\n        uint256 expectedAmount;\\n        address payable beneficiary;\\n        Utils.MegaSwapPath[] path;\\n        address payable partner;\\n        uint256 feePercent;\\n        bytes permit;\\n        uint256 deadline;\\n        bytes16 uuid;\\n    }\\n\\n    struct SimpleData {\\n        address fromToken;\\n        address toToken;\\n        uint256 fromAmount;\\n        uint256 toAmount;\\n        uint256 expectedAmount;\\n        address[] callees;\\n        bytes exchangeData;\\n        uint256[] startIndexes;\\n        uint256[] values;\\n        address payable beneficiary;\\n        address payable partner;\\n        uint256 feePercent;\\n        bytes permit;\\n        uint256 deadline;\\n        bytes16 uuid;\\n    }\\n\\n    struct Adapter {\\n        address payable adapter;\\n        uint256 percent;\\n        uint256 networkFee;\\n        Route[] route;\\n    }\\n\\n    struct Route {\\n        uint256 index;//Adapter at which index needs to be used\\n        address targetExchange;\\n        uint percent;\\n        bytes payload;\\n        uint256 networkFee;//Network fee is associated with 0xv3 trades\\n    }\\n\\n    struct MegaSwapPath {\\n        uint256 fromAmountPercent;\\n        Path[] path;\\n    }\\n\\n    struct Path {\\n        address to;\\n        uint256 totalNetworkFee;//Network fee is associated with 0xv3 trades\\n        Adapter[] adapters;\\n    }\\n\\n    function ethAddress() internal pure returns (address) {return ETH_ADDRESS;}\\n\\n    function maxUint() internal pure returns (uint256) {return MAX_UINT;}\\n\\n    function approve(\\n        address addressToApprove,\\n        address token,\\n        uint256 amount\\n    ) internal {\\n        if (token != ETH_ADDRESS) {\\n            IERC20 _token = IERC20(token);\\n\\n            uint allowance = _token.allowance(address(this), addressToApprove);\\n\\n            if (allowance < amount) {\\n                _token.safeApprove(addressToApprove, 0);\\n                _token.safeIncreaseAllowance(addressToApprove, MAX_UINT);\\n            }\\n        }\\n    }\\n\\n    function transferTokens(\\n        address token,\\n        address payable destination,\\n        uint256 amount\\n    )\\n    internal\\n    {\\n        if (amount > 0) {\\n            if (token == ETH_ADDRESS) {\\n                (bool result, ) = destination.call{value: amount, gas: 10000}(\\\"\\\");\\n                require(result, \\\"Failed to transfer Ether\\\");\\n            }\\n            else {\\n                IERC20(token).safeTransfer(destination, amount);\\n            }\\n        }\\n\\n    }\\n\\n    function tokenBalance(\\n        address token,\\n        address account\\n    )\\n    internal\\n    view\\n    returns (uint256)\\n    {\\n        if (token == ETH_ADDRESS) {\\n            return account.balance;\\n        } else {\\n            return IERC20(token).balanceOf(account);\\n        }\\n    }\\n\\n    function permit(\\n        address token,\\n        bytes memory permit\\n    )\\n        internal\\n    {\\n        if (permit.length == 32 * 7) {\\n            (bool success,) = token.call(abi.encodePacked(IERC20Permit.permit.selector, permit));\\n            require(success, \\\"Permit failed\\\");\\n        }\\n    }\\n\\n}\\n\\n// File: original_contracts/adapters/IAdapter.sol\\n\\npragma solidity 0.7.5;\\n\\n\\n\\ninterface IAdapter {\\n\\n    /**\\n    * @dev Certain adapters needs to be initialized.\\n    * This method will be called from Augustus\\n    */\\n    function initialize(bytes calldata data) external;\\n\\n    /**\\n   * @dev The function which performs the swap on an exchange.\\n   * @param fromToken Address of the source token\\n   * @param toToken Address of the destination token\\n   * @param fromAmount Amount of source tokens to be swapped\\n   * @param networkFee Network fee to be used in this router\\n   * @param route Route to be followed\\n   */\\n    function swap(\\n        IERC20 fromToken,\\n        IERC20 toToken,\\n        uint256 fromAmount,\\n        uint256 networkFee,\\n        Utils.Route[] calldata route\\n    )\\n        external\\n        payable;\\n}\\n\\n// File: original_contracts/lib/aavee/IAavee.sol\\n\\npragma solidity 0.7.5;\\n\\n\\ninterface IAaveToken {\\n    function redeem(uint256 amount) external;\\n    function underlyingAssetAddress() external view returns(address);\\n\\n}\\n\\ninterface IAaveV1LendingPool {\\n    function deposit(\\n        IERC20 token,\\n        uint256 amount,\\n        uint16 refCode\\n    )\\n        external\\n        payable;\\n\\n}\\n\\n// File: original_contracts/lib/aavee/Aavee.sol\\n\\npragma solidity 0.7.5;\\n\\n\\n\\n\\ncontract Aavee {\\n\\n    struct AaveeDataV1 {\\n        address aToken;\\n    }\\n\\n    uint16 public immutable refCodeV1;\\n    address public immutable spender;\\n\\n    constructor(uint16 _refCode, address _spender) public {\\n        refCodeV1 = _refCode;\\n        spender = _spender;\\n    }\\n\\n    function swapOnAavee(\\n        IERC20 fromToken,\\n        IERC20 toToken,\\n        uint256 fromAmount,\\n        address exchange,\\n        bytes calldata payload\\n    )\\n        internal\\n    {\\n        _swapOnAavee(\\n            fromToken,\\n            toToken,\\n            fromAmount,\\n            exchange,\\n            payload\\n        );\\n    }\\n\\n    function buyOnAavee(\\n        IERC20 fromToken,\\n        IERC20 toToken,\\n        uint256 fromAmount,\\n        address exchange,\\n        bytes calldata payload\\n    )\\n        internal\\n    {\\n        _swapOnAavee(\\n            fromToken,\\n            toToken,\\n            fromAmount,\\n            exchange,\\n            payload\\n        );\\n    }\\n\\n    function _swapOnAavee(\\n        IERC20 fromToken,\\n        IERC20 toToken,\\n        uint256 fromAmount,\\n        address exchange,\\n        bytes memory payload\\n    )\\n      private\\n    {\\n        AaveeDataV1 memory data = abi.decode(payload, (AaveeDataV1));\\n\\n        Utils.approve(spender, address(fromToken), fromAmount);\\n\\n        if (address(fromToken) == address(data.aToken)) {\\n            require(\\n                IAaveToken(data.aToken).underlyingAssetAddress() == address(toToken),\\n                \\\"Invalid to token\\\"\\n            );\\n\\n            IAaveToken(data.aToken).redeem(fromAmount);\\n        }\\n        else if(address(toToken) == address(data.aToken)) {\\n            require(\\n                IAaveToken(data.aToken).underlyingAssetAddress() == address(fromToken),\\n                \\\"Invalid to token\\\"\\n            );\\n            if (address(fromToken) == Utils.ethAddress()) {\\n                IAaveV1LendingPool(exchange).deposit{value: fromAmount}(fromToken, fromAmount, refCodeV1);\\n            }\\n            else {\\n                IAaveV1LendingPool(exchange).deposit(fromToken, fromAmount, refCodeV1);\\n            }\\n        }\\n        else {\\n            revert(\\\"Invalid aToken\\\");\\n        }\\n    }\\n}\\n\\n// File: original_contracts/lib/chai/IChai.sol\\n\\npragma solidity 0.7.5;\\n\\n\\ninterface IChai {\\n\\n    function join(address dst, uint wad) external;\\n\\n    function exit(address src, uint wad) external;\\n}\\n\\n// File: original_contracts/lib/chai/ChaiExchange.sol\\n\\npragma solidity 0.7.5;\\n\\n\\n\\n\\n\\ncontract ChaiExchange {\\n\\n    address public immutable chai;\\n    address public immutable dai ;\\n\\n    constructor(address _chai, address _dai) public {\\n        chai = _chai;\\n        dai = _dai;\\n    }\\n\\n    function swapOnChai(\\n        IERC20 fromToken,\\n        IERC20 toToken,\\n        uint256 fromAmount\\n    )\\n        internal\\n\\n    {\\n\\n        _swapOnChai(\\n            fromToken,\\n            toToken,\\n            fromAmount\\n        );\\n    }\\n\\n    function buyOnChai(\\n        IERC20 fromToken,\\n        IERC20 toToken,\\n        uint256 fromAmount\\n    )\\n        internal\\n\\n    {\\n\\n        _swapOnChai(\\n            fromToken,\\n            toToken,\\n            fromAmount\\n        );\\n    }\\n\\n    function _swapOnChai(\\n        IERC20 fromToken,\\n        IERC20 toToken,\\n        uint256 fromAmount\\n    )\\n        private\\n    {\\n\\n        Utils.approve(address(chai), address(fromToken), fromAmount);\\n\\n        if (address(fromToken) == chai){\\n            require(address(toToken) == dai, \\\"Destination token should be dai\\\");\\n            IChai(chai).exit(address(this), fromAmount);\\n        }\\n        else if (address(fromToken) == dai) {\\n            require(address(toToken) == chai, \\\"Destination token should be chai\\\");\\n            IChai(chai).join(address(this), fromAmount);\\n        }\\n        else {\\n            revert(\\\"Invalid fromToken\\\");\\n        }\\n    }\\n}\\n\\n// File: original_contracts/lib/bprotocol/IBProtocolAMM.sol\\n\\npragma solidity 0.7.5;\\n\\ninterface IBProtocolAMM {\\n    function swap(\\n        uint lusdAmount,\\n        uint minEthReturn,\\n        address payable dest\\n    ) external returns(uint);\\n}\\n\\n// File: original_contracts/lib/bprotocol/BProtocolAMM.sol\\n\\npragma solidity 0.7.5;\\n\\n\\n\\n\\ncontract BProtocol {\\n\\n    function swapOnBProtocol(\\n        IERC20 fromToken,\\n        IERC20 toToken,\\n        uint256 fromAmount,\\n        address exchange,\\n        bytes calldata payload\\n    )\\n    internal\\n\\n    {\\n\\n        Utils.approve(address(exchange), address(fromToken), fromAmount);\\n\\n        IBProtocolAMM(exchange).swap(fromAmount, 1, payable(address(this)));\\n    }\\n}\\n\\n// File: original_contracts/lib/bzx/IBZX.sol\\n\\npragma solidity 0.7.5;\\n\\n\\ninterface IBZX {\\n\\n    function mint(\\n        address receiver,\\n        uint256 depositAmount\\n    )\\n    external\\n    returns (uint256 mintAmount);\\n\\n    function mintWithEther(address receiver) external payable returns (uint256 mintAmount);\\n\\n    function burn(\\n        address receiver,\\n        uint256 burnAmount\\n    )\\n        external\\n        returns (uint256 loanAmountPaid);\\n\\n    function burnToEther(\\n        address payable receiver,\\n        uint256 burnAmount\\n    )\\n        external\\n        returns (uint256 loanAmountPaid);\\n\\n    function loanTokenAddress() external view returns(address );\\n}\\n\\n// File: original_contracts/lib/WethProvider.sol\\n\\npragma solidity 0.7.5;\\n\\n\\ncontract WethProvider {\\n    address public immutable WETH;\\n\\n    constructor(address weth) public {\\n        WETH = weth;\\n    }\\n}\\n\\n// File: original_contracts/lib/bzx/BZX.sol\\n\\npragma solidity 0.7.5;\\n\\n\\n\\n\\n\\nabstract contract BZX is WethProvider {\\n\\n    struct BZXData {\\n        address iToken;\\n    }\\n\\n    function swapOnBzx(\\n        IERC20 fromToken,\\n        IERC20 toToken,\\n        uint256 fromAmount,\\n        bytes calldata payload\\n    )\\n        internal\\n\\n    {\\n        _swapOnBZX(\\n            fromToken,\\n            toToken,\\n            fromAmount,\\n            payload\\n        );\\n    }\\n\\n    function buyOnBzx(\\n        IERC20 fromToken,\\n        IERC20 toToken,\\n        uint256 fromAmount,\\n        bytes calldata payload\\n    )\\n        internal\\n\\n    {\\n        _swapOnBZX(\\n            fromToken,\\n            toToken,\\n            fromAmount,\\n            payload\\n        );\\n    }\\n\\n    function _swapOnBZX(\\n        IERC20 fromToken,\\n        IERC20 toToken,\\n        uint256 fromAmount,\\n        bytes memory payload\\n    )\\n        private\\n    {\\n        BZXData memory data = abi.decode(payload, (BZXData));\\n\\n        Utils.approve(address(data.iToken), address(fromToken), fromAmount);\\n\\n        if (address(fromToken) == address(data.iToken)) {\\n            if (address(toToken) == Utils.ethAddress()) {\\n                require(\\n                    IBZX(data.iToken).loanTokenAddress() == WETH,\\n                    \\\"Invalid to token\\\"\\n                );\\n                IBZX(data.iToken).burnToEther(payable(address(this)), fromAmount);\\n            }\\n            else {\\n                require(\\n                    IBZX(data.iToken).loanTokenAddress() == address(toToken),\\n                    \\\"Invalid to token\\\"\\n                );\\n                IBZX(data.iToken).burn(address(this), fromAmount);\\n            }\\n        }\\n        else if (address(toToken) == address(data.iToken)){\\n            if (address(fromToken) == Utils.ethAddress()) {\\n                require(\\n                    IBZX(data.iToken).loanTokenAddress() == WETH,\\n                    \\\"Invalid from token\\\"\\n                );\\n\\n                IBZX(data.iToken).mintWithEther{value: fromAmount}(address(this));\\n            }\\n            else {\\n                require(\\n                    IBZX(data.iToken).loanTokenAddress() == address(fromToken),\\n                    \\\"Invalid from token\\\"\\n                );\\n                IBZX(data.iToken).mint(address(this), fromAmount);\\n            }\\n        }\\n        else {\\n            revert(\\\"Invalid token pair!!\\\");\\n        }\\n    }\\n}\\n\\n// File: original_contracts/lib/smoothy/ISmoothyV1.sol\\n\\npragma solidity 0.7.5;\\n\\ninterface ISmoothyV1 {\\n\\n  function swap(\\n    uint256 bTokenIdxIn,\\n    uint256 bTokenIdxOut,\\n    uint256 bTokenInAmount,\\n    uint256 bTokenOutMin\\n  )\\n  external;\\n\\n}\\n\\n// File: original_contracts/lib/weth/IWETH.sol\\n\\npragma solidity 0.7.5;\\n\\n\\n\\nabstract contract IWETH is IERC20 {\\n    function deposit() external virtual payable;\\n    function withdraw(uint256 amount) external virtual;\\n}\\n\\n// File: original_contracts/lib/smoothy/SmoothyV1.sol\\n\\npragma solidity 0.7.5;\\n\\n\\n\\n\\n\\ncontract SmoothyV1 {\\n\\n  struct SmoothyV1Data {\\n    uint256 i;\\n    uint256 j;\\n  }\\n\\n  function swapOnSmoothyV1(\\n    IERC20 fromToken,\\n    IERC20 toToken,\\n    uint256 fromAmount,\\n    address exchange,\\n    bytes calldata payload\\n  )\\n    internal\\n  {\\n\\n    SmoothyV1Data memory data = abi.decode(payload, (SmoothyV1Data));\\n\\n    Utils.approve(exchange, address(fromToken), fromAmount);\\n\\n    ISmoothyV1(exchange).swap(data.i, data.j, fromAmount, 1);\\n\\n  }\\n}\\n\\n// File: original_contracts/lib/uniswap/IUniswapExchange.sol\\n\\npragma solidity 0.7.5;\\n\\ninterface IUniswapExchange {\\n    function ethToTokenSwapInput(\\n        uint256 minTokens,\\n        uint256 deadline) external payable returns (uint256 tokensBought);\\n\\n     function ethToTokenSwapOutput(\\n        uint256 tokensBought,\\n        uint256 deadline) external payable returns (uint256 ethSold);\\n\\n    function tokenToEthSwapInput(\\n        uint256 tokensSold,\\n        uint256 minEth,\\n        uint256 deadline) external returns (uint256 ethBought);\\n\\n    function tokenToEthSwapOutput(\\n        uint256 ethBought,\\n        uint256 maxTokens,\\n        uint256 deadline) external returns (uint256 tokensSold);\\n\\n    function tokenToTokenSwapInput(\\n        uint256 tokensSold,\\n        uint256 minTokensBought,\\n        uint256 minEthBought,\\n        uint256 deadline,\\n        address tokenAddr\\n    ) external returns (uint256 tokensBought);\\n\\n    function tokenToTokenSwapOutput(\\n        uint256 tokensBought,\\n        uint256 maxTokensSold,\\n        uint256 maxEthSold,\\n        uint256 deadline,\\n        address toToken\\n    ) external returns (uint256 tokensSold);\\n\\n    function ethToTokenTransferInput(\\n        uint256 min_tokens,\\n        uint256 deadline,\\n        address recipient\\n    ) external payable returns (uint256 tokens_bought);\\n\\n    function ethToTokenTransferOutput(\\n        uint256 tokens_bought,\\n        uint256 deadline,\\n        address recipient\\n    ) external payable returns (uint256 eth_sold);\\n\\n    function tokenToEthTransferInput(\\n        uint256 tokens_sold,\\n        uint256 min_tokens,\\n        uint256 deadline,\\n        address recipient\\n    ) external returns (uint256 eth_bought);\\n\\n    function tokenToEthTransferOutput(\\n        uint256 eth_bought,\\n        uint256 max_tokens,\\n        uint256 deadline,\\n        address recipient\\n    ) external returns (uint256 tokens_sold);\\n\\n    function tokenToTokenTransferInput(\\n        uint256 tokens_sold,\\n        uint256 min_tokens_bought,\\n        uint256 min_eth_bought,\\n        uint256 deadline,\\n        address recipient,\\n        address token_addr\\n    ) external returns (uint256 tokens_bought);\\n\\n    function tokenToTokenTransferOutput(\\n        uint256 tokens_bought,\\n        uint256 max_tokens_sold,\\n        uint256 max_eth_sold,\\n        uint256 deadline,\\n        address recipient,\\n        address token_addr\\n    ) external returns (uint256 tokens_sold);\\n}\\n\\n// File: original_contracts/lib/uniswap/IUniswapFactory.sol\\n\\npragma solidity 0.7.5;\\n\\n\\ninterface IUniswapFactory {\\n    function getExchange(address token) external view returns (address exchange);\\n}\\n\\n// File: original_contracts/lib/uniswap/UniswapV1.sol\\n\\npragma solidity 0.7.5;\\n\\n\\n\\n\\n\\n\\ncontract UniswapV1 {\\n    using SafeMath for uint256;\\n\\n    address public immutable factory;\\n\\n    constructor(address _factory) public {\\n        factory = _factory;\\n    }\\n\\n    function swapOnUniswapV1(\\n        IERC20 fromToken,\\n        IERC20 toToken,\\n        uint256 fromAmount\\n    )\\n        internal\\n\\n    {\\n\\n        _swapOnUniswapV1(\\n            fromToken,\\n            toToken,\\n            fromAmount,\\n            1\\n        );\\n    }\\n\\n    function buyOnUniswapV1(\\n        IERC20 fromToken,\\n        IERC20 toToken,\\n        uint256 fromAmount,\\n        uint256 toAmount\\n    )\\n        internal\\n\\n    {\\n\\n        address exchange = getExchange(fromToken, toToken);\\n\\n        Utils.approve(address(exchange), address(fromToken), fromAmount);\\n\\n        if (address(fromToken) == Utils.ethAddress()) {\\n            IUniswapExchange(exchange).ethToTokenSwapOutput{value: fromAmount}(toAmount, block.timestamp);\\n        }\\n        else if (address(toToken) == Utils.ethAddress()) {\\n            IUniswapExchange(exchange).tokenToEthSwapOutput(toAmount, fromAmount, block.timestamp);\\n        }\\n        else {\\n            IUniswapExchange(exchange).tokenToTokenSwapOutput(\\n              toAmount,\\n              fromAmount,\\n              Utils.maxUint(),\\n              block.timestamp,\\n              address(toToken)\\n            );\\n        }\\n\\n    }\\n\\n    function getExchange(\\n        IERC20 fromToken,\\n        IERC20 toToken\\n    )\\n      private\\n      view\\n      returns (address)\\n    {\\n        address exchangeAddress = address(fromToken) == Utils.ethAddress() ? address(toToken) : address(fromToken);\\n\\n        return IUniswapFactory(factory).getExchange(exchangeAddress);\\n    }\\n\\n    function _swapOnUniswapV1(\\n        IERC20 fromToken,\\n        IERC20 toToken,\\n        uint256 fromAmount,\\n        uint256 toAmount\\n    )\\n      private\\n      returns(uint256)\\n    {\\n        address exchange = getExchange(fromToken, toToken);\\n\\n        Utils.approve(\\n          exchange,\\n          address(fromToken),\\n          fromAmount\\n        );\\n\\n        uint256 receivedAmount = 0;\\n\\n        if (address(fromToken) == Utils.ethAddress()) {\\n            receivedAmount = IUniswapExchange(exchange).ethToTokenSwapInput{value: fromAmount}(toAmount, block.timestamp);\\n        }\\n        else if (address(toToken) == Utils.ethAddress()) {\\n            receivedAmount = IUniswapExchange(exchange).tokenToEthSwapInput(fromAmount, toAmount, block.timestamp);\\n        }\\n        else {\\n            receivedAmount = IUniswapExchange(exchange).tokenToTokenSwapInput(fromAmount, toAmount, 1, block.timestamp, address(toToken));\\n        }\\n\\n        return receivedAmount;\\n    }\\n\\n}\\n\\n// File: original_contracts/adapters/mainnet/Adapter03.sol\\n\\npragma solidity 0.7.5;\\n\\n\\n\\n\\n\\n\\n\\n\\n/**\\n* @dev This contract will route call to:\\n* 0- ChaiExchange\\n* 1- UniswapV1\\n* 2- SmoothyV1\\n* 3- BZX\\n* 4- BProtocol\\n* 5- Aave\\n* The above are the indexes\\n*/\\n\\ncontract Adapter03 is IAdapter, ChaiExchange, UniswapV1, SmoothyV1, BZX, BProtocol, Aavee {\\n    using SafeMath for uint256;\\n\\n    constructor(\\n        uint16 aaveeRefCode,\\n        address aaveeSpender,\\n        address uniswapFactory,\\n        address chai,\\n        address dai,\\n        address weth\\n    )\\n        WethProvider(weth)\\n        Aavee(aaveeRefCode, aaveeSpender)\\n        UniswapV1(uniswapFactory)\\n        ChaiExchange(chai, dai)\\n        public\\n    {\\n    }\\n\\n    function initialize(bytes calldata data) override external {\\n        revert(\\\"METHOD NOT IMPLEMENTED\\\");\\n    }\\n\\n    function swap(\\n        IERC20 fromToken,\\n        IERC20 toToken,\\n        uint256 fromAmount,\\n        uint256 networkFee,\\n        Utils.Route[] calldata route\\n    )\\n        external\\n        override\\n        payable\\n    {\\n        for (uint256 i = 0; i < route.length; i++) {\\n            if (route[i].index == 0) {\\n                //swap on ChaiExchange\\n                swapOnChai(\\n                    fromToken,\\n                    toToken,\\n                    fromAmount.mul(route[i].percent).div(10000)\\n                );\\n            }\\n            else if (route[i].index == 1) {\\n                //swap on Uniswap\\n                swapOnUniswapV1(\\n                    fromToken,\\n                    toToken,\\n                    fromAmount.mul(route[i].percent).div(10000)\\n                );\\n            }\\n            else if (route[i].index == 2) {\\n                //swap on Smoothy\\n                swapOnSmoothyV1(\\n                    fromToken,\\n                    toToken,\\n                    fromAmount.mul(route[i].percent).div(10000),\\n                    route[i].targetExchange,\\n                    route[i].payload\\n                );\\n            }\\n            else if (route[i].index == 3) {\\n                //swap on BZX\\n                swapOnBzx(\\n                    fromToken,\\n                    toToken,\\n                    fromAmount.mul(route[i].percent).div(10000),\\n                    route[i].payload\\n                );\\n            }\\n            else if (route[i].index == 4) {\\n                //swap on BProtocol\\n                swapOnBProtocol(\\n                    fromToken,\\n                    toToken,\\n                    fromAmount.mul(route[i].percent).div(10000),\\n                    route[i].targetExchange,\\n                    route[i].payload\\n                );\\n            }\\n            else if (route[i].index == 5) {\\n                //swap on aavee\\n                swapOnAavee(\\n                    fromToken,\\n                    toToken,\\n                    fromAmount.mul(route[i].percent).div(10000),\\n                    route[i].targetExchange,\\n                    route[i].payload\\n                );\\n            }\\n            else {\\n                revert(\\\"Index not supported\\\");\\n            }\\n        }\\n    }\\n}\\n\"\r\n    }\r\n  },\r\n  \"settings\": {\r\n    \"optimizer\": {\r\n      \"enabled\": true,\r\n      \"runs\": 1000000\r\n    },\r\n    \"outputSelection\": {\r\n      \"*\": {\r\n        \"*\": [\r\n          \"evm.bytecode\",\r\n          \"evm.deployedBytecode\",\r\n          \"abi\"\r\n        ]\r\n      }\r\n    },\r\n    \"metadata\": {\r\n      \"useLiteralContent\": true\r\n    },\r\n    \"libraries\": {}\r\n  }\r\n}}","ABI":"[{\"inputs\":[{\"internalType\":\"uint16\",\"name\":\"aaveeRefCode\",\"type\":\"uint16\"},{\"internalType\":\"address\",\"name\":\"aaveeSpender\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"uniswapFactory\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"chai\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"dai\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"weth\",\"type\":\"address\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"inputs\":[],\"name\":\"WETH\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"chai\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"dai\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"factory\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes\",\"name\":\"data\",\"type\":\"bytes\"}],\"name\":\"initialize\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"refCodeV1\",\"outputs\":[{\"internalType\":\"uint16\",\"name\":\"\",\"type\":\"uint16\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"spender\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"contract IERC20\",\"name\":\"fromToken\",\"type\":\"address\"},{\"internalType\":\"contract IERC20\",\"name\":\"toToken\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"fromAmount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"networkFee\",\"type\":\"uint256\"},{\"components\":[{\"internalType\":\"uint256\",\"name\":\"index\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"targetExchange\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"percent\",\"type\":\"uint256\"},{\"internalType\":\"bytes\",\"name\":\"payload\",\"type\":\"bytes\"},{\"internalType\":\"uint256\",\"name\":\"networkFee\",\"type\":\"uint256\"}],\"internalType\":\"struct Utils.Route[]\",\"name\":\"route\",\"type\":\"tuple[]\"}],\"name\":\"swap\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"}]","ContractName":"Adapter03","CompilerVersion":"v0.7.5+commit.eb77ed08","OptimizationUsed":"1","Runs":"1000000","ConstructorArguments":"00000000000000000000000000000000000000000000000000000000000000010000000000000000000000003dfd23a6c5e8bbcfc9581d2e864a68feb6a076d3000000000000000000000000c0a47dfe034b400b47bdad5fecda2621de6c4d9500000000000000000000000006af07097c9eeb7fd685c692751d5c66db49c2150000000000000000000000006b175474e89094c44da98b954eedeac495271d0f000000000000000000000000c02aaa39b223fe8d0a0e5c4f27ead9083c756cc2","EVMVersion":"Default","Library":"","LicenseType":"","Proxy":"0","Implementation":"","SwarmSource":""}]}