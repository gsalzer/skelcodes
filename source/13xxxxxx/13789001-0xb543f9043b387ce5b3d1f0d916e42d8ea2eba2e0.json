{"status":"1","message":"OK","result":[{"SourceCode":"{{\r\n  \"language\": \"Solidity\",\r\n  \"sources\": {\r\n    \"contracts/fiveoutofnine.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.9;\\n\\nimport \\\"@openzeppelin/contracts/token/ERC721/ERC721.sol\\\";\\nimport \\\"@openzeppelin/contracts/access/Ownable.sol\\\";\\nimport \\\"@openzeppelin/contracts/security/ReentrancyGuard.sol\\\";\\nimport \\\"@openzeppelin/contracts/utils/Strings.sol\\\";\\n\\nimport { Chess } from \\\"./Chess.sol\\\";\\nimport { Engine } from \\\"./Engine.sol\\\";\\nimport { fiveoutofnineART } from \\\"./fiveoutofnineART.sol\\\";\\n\\n/// @title fiveoutofnine NFT - the first 100% on-chain chess engine.\\n/// @author fiveoutofnine\\n/// @notice This file has few docstrings (by choice) because most of it is standard. Refer to\\n/// {Chess}, {Engine}, and {fiveoutofnineART} for thorough documentation.\\ncontract fiveoutofnine is ERC721, Ownable, ReentrancyGuard {\\n    using Chess for uint256;\\n    using Strings for uint256;\\n\\n    uint256 public board;\\n    uint256 private internalId;\\n\\n    mapping(uint256 => uint256) public tokenInternalIds;\\n    mapping(uint256 => Chess.Move) public tokenMoves;\\n\\n    uint256 public totalSupply;\\n    string private baseURI;\\n\\n    constructor() ERC721(\\\"fiveoutofnine\\\", unicode\\\"♞\\\") {\\n        honorableMints();\\n        board = 0x32562300110101000010010000000C0099999000BCDE0B000000001;\\n        internalId = (1 << 0x80) | 2;\\n        totalSupply = 11;\\n    }\\n\\n    function mintMove(uint256 _move, uint256 _depth) external payable nonReentrant {\\n        require(_depth >= 3 && _depth <= 10);\\n        require((internalId >> 0x80) < 59 && uint128(internalId) < 59);\\n\\n        playMove(_move, _depth);\\n        _safeMint(msg.sender, totalSupply++);\\n    }\\n\\n    function playMove(uint256 _move, uint256 _depth) internal {\\n        unchecked {\\n            uint256 inMemoryBoard = board;\\n            require(inMemoryBoard.isLegalMove(_move));\\n\\n            inMemoryBoard = inMemoryBoard.applyMove(_move);\\n            (uint256 bestMove, bool isWhiteCheckmated) = Engine.searchMove(inMemoryBoard, _depth);\\n\\n            tokenInternalIds[totalSupply] = internalId++;\\n            tokenMoves[totalSupply] = Chess.Move(board, (_depth << 24) | (_move << 12) | bestMove);\\n\\n            if (bestMove == 0 || uint128(internalId) >= 59) {\\n                resetBoard();\\n            } else {\\n                board = inMemoryBoard.applyMove(bestMove);\\n                if (isWhiteCheckmated) {\\n                    resetBoard();\\n                }\\n            }\\n        }\\n    }\\n\\n    function resetBoard() internal {\\n        board = 0x3256230011111100000000000000000099999900BCDECB000000001;\\n        internalId = ((internalId >> 0x80) + 1) << 0x80;\\n    }\\n\\n    function tokenURI(uint256 _tokenId) public view virtual override returns (string memory) {\\n        return bytes(baseURI).length == 0\\n            ? _tokenURI(_tokenId)\\n            : string(abi.encodePacked(baseURI, _tokenId.toString()));\\n    }\\n\\n    function _tokenURI(uint256 _tokenId) public view returns (string memory) {\\n        return fiveoutofnineART.getMetadata(tokenInternalIds[_tokenId], tokenMoves[_tokenId]);\\n    }\\n\\n    function setBaseURI(string memory _baseURI) external onlyOwner {\\n        baseURI = _baseURI;\\n    }\\n\\n    function honorableMints() internal {\\n        _safeMint(0xA85572Cd96f1643458f17340b6f0D6549Af482F5, 0);\\n        tokenInternalIds[0] = 0;\\n        tokenMoves[0] = Chess.Move(\\n            0x3256230011111100000000000000000099999900BCDECB000000001,\\n            0x851C4A2\\n        );\\n\\n        _safeMint(0x3759328b1CE944642d36a61F06783f2865212515, 1);\\n        tokenInternalIds[1] = 1;\\n        tokenMoves[1] = Chess.Move(\\n            0x3256230010111100000000000190000099099900BCDECB000000001,\\n            0x759E51C\\n        );\\n\\n        _safeMint(0xFD8eA0F05dB884A78B1A1C1B3767B9E5D6664764, 2);\\n        tokenInternalIds[2] = 2;\\n        tokenMoves[2] = Chess.Move(\\n            0x3256230010101100000100009190000009099900BCDECB000000001,\\n            0x64DB565\\n        );\\n\\n        _safeMint(0x174787a207BF4eD4D8db0945602e49f42c146474, 3);\\n        tokenInternalIds[3] = 3;\\n        tokenMoves[3] = Chess.Move(\\n            0x3256230010100100000100009199100009009900BCDECB000000001,\\n            0x645A725\\n        );\\n\\n        _safeMint(0x6dEa5dCFa64DC0bb4E5AC53A375A4377CF4eD0Ee, 4);\\n        tokenInternalIds[4] = 4;\\n        tokenMoves[4] = Chess.Move(\\n            0x3256230010100100000000009199100009009000BCDECB000000001,\\n            0x631A4DB\\n        );\\n\\n        _safeMint(0x333601a803CAc32B7D17A38d32c9728A93b422f4, 5);\\n        tokenInternalIds[5] = 5;\\n        tokenMoves[5] = Chess.Move(\\n            0x3256230010000100001000009199D00009009000BC0ECB000000001,\\n            0x6693315\\n        );\\n\\n        _safeMint(0x530cF036Ed4Fa58f7301a9C788C9806624ceFD19, 6);\\n        tokenInternalIds[6] = 6;\\n        tokenMoves[6] = Chess.Move(\\n            0x32502300100061000010000091990000090D9000BC0ECB000000001,\\n            0x64E1554\\n        );\\n\\n        _safeMint(0xD6A9cB7aB95293a7D38f416Cd3A4Fe9059CCd5B2, 7);\\n        tokenInternalIds[7] = 7;\\n        tokenMoves[7] = Chess.Move(\\n            0x325023001006010000100D009199000009009000BC0ECB000000001,\\n            0x63532A5\\n        );\\n\\n        _safeMint(0xaFDc1A3EF3992f53C10fC798d242E15E2F0DF51A, 8);\\n        tokenInternalIds[8] = 8;\\n        tokenMoves[8] = Chess.Move(\\n            0x305023001006010000100D0091992000090C9000B00ECB000000001,\\n            0x66E4000\\n        );\\n\\n        _safeMint(0xC1A80D351232fD07EE5733b5F581E01C269068A9, 9);\\n        tokenInternalIds[9] = 1 << 0x80;\\n        tokenMoves[9] = Chess.Move(\\n            0x3256230011111100000000000000000099999900BCDECB000000001,\\n            0x646155E\\n        );\\n\\n        _safeMint(0xF42D1c0c0165AF5625b2ecD5027c5C5554e5b039, 10);\\n        tokenInternalIds[10] = (1 << 0x80) | 1;\\n        tokenMoves[10] = Chess.Move(\\n            0x3256230011110100000001000000000099999000BCDECB000000001,\\n            0x62994DB\\n        );\\n    }\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/token/ERC721/ERC721.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.0 (token/ERC721/ERC721.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"./IERC721.sol\\\";\\nimport \\\"./IERC721Receiver.sol\\\";\\nimport \\\"./extensions/IERC721Metadata.sol\\\";\\nimport \\\"../../utils/Address.sol\\\";\\nimport \\\"../../utils/Context.sol\\\";\\nimport \\\"../../utils/Strings.sol\\\";\\nimport \\\"../../utils/introspection/ERC165.sol\\\";\\n\\n/**\\n * @dev Implementation of https://eips.ethereum.org/EIPS/eip-721[ERC721] Non-Fungible Token Standard, including\\n * the Metadata extension, but not including the Enumerable extension, which is available separately as\\n * {ERC721Enumerable}.\\n */\\ncontract ERC721 is Context, ERC165, IERC721, IERC721Metadata {\\n    using Address for address;\\n    using Strings for uint256;\\n\\n    // Token name\\n    string private _name;\\n\\n    // Token symbol\\n    string private _symbol;\\n\\n    // Mapping from token ID to owner address\\n    mapping(uint256 => address) private _owners;\\n\\n    // Mapping owner address to token count\\n    mapping(address => uint256) private _balances;\\n\\n    // Mapping from token ID to approved address\\n    mapping(uint256 => address) private _tokenApprovals;\\n\\n    // Mapping from owner to operator approvals\\n    mapping(address => mapping(address => bool)) private _operatorApprovals;\\n\\n    /**\\n     * @dev Initializes the contract by setting a `name` and a `symbol` to the token collection.\\n     */\\n    constructor(string memory name_, string memory symbol_) {\\n        _name = name_;\\n        _symbol = symbol_;\\n    }\\n\\n    /**\\n     * @dev See {IERC165-supportsInterface}.\\n     */\\n    function supportsInterface(bytes4 interfaceId) public view virtual override(ERC165, IERC165) returns (bool) {\\n        return\\n            interfaceId == type(IERC721).interfaceId ||\\n            interfaceId == type(IERC721Metadata).interfaceId ||\\n            super.supportsInterface(interfaceId);\\n    }\\n\\n    /**\\n     * @dev See {IERC721-balanceOf}.\\n     */\\n    function balanceOf(address owner) public view virtual override returns (uint256) {\\n        require(owner != address(0), \\\"ERC721: balance query for the zero address\\\");\\n        return _balances[owner];\\n    }\\n\\n    /**\\n     * @dev See {IERC721-ownerOf}.\\n     */\\n    function ownerOf(uint256 tokenId) public view virtual override returns (address) {\\n        address owner = _owners[tokenId];\\n        require(owner != address(0), \\\"ERC721: owner query for nonexistent token\\\");\\n        return owner;\\n    }\\n\\n    /**\\n     * @dev See {IERC721Metadata-name}.\\n     */\\n    function name() public view virtual override returns (string memory) {\\n        return _name;\\n    }\\n\\n    /**\\n     * @dev See {IERC721Metadata-symbol}.\\n     */\\n    function symbol() public view virtual override returns (string memory) {\\n        return _symbol;\\n    }\\n\\n    /**\\n     * @dev See {IERC721Metadata-tokenURI}.\\n     */\\n    function tokenURI(uint256 tokenId) public view virtual override returns (string memory) {\\n        require(_exists(tokenId), \\\"ERC721Metadata: URI query for nonexistent token\\\");\\n\\n        string memory baseURI = _baseURI();\\n        return bytes(baseURI).length > 0 ? string(abi.encodePacked(baseURI, tokenId.toString())) : \\\"\\\";\\n    }\\n\\n    /**\\n     * @dev Base URI for computing {tokenURI}. If set, the resulting URI for each\\n     * token will be the concatenation of the `baseURI` and the `tokenId`. Empty\\n     * by default, can be overriden in child contracts.\\n     */\\n    function _baseURI() internal view virtual returns (string memory) {\\n        return \\\"\\\";\\n    }\\n\\n    /**\\n     * @dev See {IERC721-approve}.\\n     */\\n    function approve(address to, uint256 tokenId) public virtual override {\\n        address owner = ERC721.ownerOf(tokenId);\\n        require(to != owner, \\\"ERC721: approval to current owner\\\");\\n\\n        require(\\n            _msgSender() == owner || isApprovedForAll(owner, _msgSender()),\\n            \\\"ERC721: approve caller is not owner nor approved for all\\\"\\n        );\\n\\n        _approve(to, tokenId);\\n    }\\n\\n    /**\\n     * @dev See {IERC721-getApproved}.\\n     */\\n    function getApproved(uint256 tokenId) public view virtual override returns (address) {\\n        require(_exists(tokenId), \\\"ERC721: approved query for nonexistent token\\\");\\n\\n        return _tokenApprovals[tokenId];\\n    }\\n\\n    /**\\n     * @dev See {IERC721-setApprovalForAll}.\\n     */\\n    function setApprovalForAll(address operator, bool approved) public virtual override {\\n        _setApprovalForAll(_msgSender(), operator, approved);\\n    }\\n\\n    /**\\n     * @dev See {IERC721-isApprovedForAll}.\\n     */\\n    function isApprovedForAll(address owner, address operator) public view virtual override returns (bool) {\\n        return _operatorApprovals[owner][operator];\\n    }\\n\\n    /**\\n     * @dev See {IERC721-transferFrom}.\\n     */\\n    function transferFrom(\\n        address from,\\n        address to,\\n        uint256 tokenId\\n    ) public virtual override {\\n        //solhint-disable-next-line max-line-length\\n        require(_isApprovedOrOwner(_msgSender(), tokenId), \\\"ERC721: transfer caller is not owner nor approved\\\");\\n\\n        _transfer(from, to, tokenId);\\n    }\\n\\n    /**\\n     * @dev See {IERC721-safeTransferFrom}.\\n     */\\n    function safeTransferFrom(\\n        address from,\\n        address to,\\n        uint256 tokenId\\n    ) public virtual override {\\n        safeTransferFrom(from, to, tokenId, \\\"\\\");\\n    }\\n\\n    /**\\n     * @dev See {IERC721-safeTransferFrom}.\\n     */\\n    function safeTransferFrom(\\n        address from,\\n        address to,\\n        uint256 tokenId,\\n        bytes memory _data\\n    ) public virtual override {\\n        require(_isApprovedOrOwner(_msgSender(), tokenId), \\\"ERC721: transfer caller is not owner nor approved\\\");\\n        _safeTransfer(from, to, tokenId, _data);\\n    }\\n\\n    /**\\n     * @dev Safely transfers `tokenId` token from `from` to `to`, checking first that contract recipients\\n     * are aware of the ERC721 protocol to prevent tokens from being forever locked.\\n     *\\n     * `_data` is additional data, it has no specified format and it is sent in call to `to`.\\n     *\\n     * This internal function is equivalent to {safeTransferFrom}, and can be used to e.g.\\n     * implement alternative mechanisms to perform token transfer, such as signature-based.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` cannot be the zero address.\\n     * - `to` cannot be the zero address.\\n     * - `tokenId` token must exist and be owned by `from`.\\n     * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function _safeTransfer(\\n        address from,\\n        address to,\\n        uint256 tokenId,\\n        bytes memory _data\\n    ) internal virtual {\\n        _transfer(from, to, tokenId);\\n        require(_checkOnERC721Received(from, to, tokenId, _data), \\\"ERC721: transfer to non ERC721Receiver implementer\\\");\\n    }\\n\\n    /**\\n     * @dev Returns whether `tokenId` exists.\\n     *\\n     * Tokens can be managed by their owner or approved accounts via {approve} or {setApprovalForAll}.\\n     *\\n     * Tokens start existing when they are minted (`_mint`),\\n     * and stop existing when they are burned (`_burn`).\\n     */\\n    function _exists(uint256 tokenId) internal view virtual returns (bool) {\\n        return _owners[tokenId] != address(0);\\n    }\\n\\n    /**\\n     * @dev Returns whether `spender` is allowed to manage `tokenId`.\\n     *\\n     * Requirements:\\n     *\\n     * - `tokenId` must exist.\\n     */\\n    function _isApprovedOrOwner(address spender, uint256 tokenId) internal view virtual returns (bool) {\\n        require(_exists(tokenId), \\\"ERC721: operator query for nonexistent token\\\");\\n        address owner = ERC721.ownerOf(tokenId);\\n        return (spender == owner || getApproved(tokenId) == spender || isApprovedForAll(owner, spender));\\n    }\\n\\n    /**\\n     * @dev Safely mints `tokenId` and transfers it to `to`.\\n     *\\n     * Requirements:\\n     *\\n     * - `tokenId` must not exist.\\n     * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function _safeMint(address to, uint256 tokenId) internal virtual {\\n        _safeMint(to, tokenId, \\\"\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-ERC721-_safeMint-address-uint256-}[`_safeMint`], with an additional `data` parameter which is\\n     * forwarded in {IERC721Receiver-onERC721Received} to contract recipients.\\n     */\\n    function _safeMint(\\n        address to,\\n        uint256 tokenId,\\n        bytes memory _data\\n    ) internal virtual {\\n        _mint(to, tokenId);\\n        require(\\n            _checkOnERC721Received(address(0), to, tokenId, _data),\\n            \\\"ERC721: transfer to non ERC721Receiver implementer\\\"\\n        );\\n    }\\n\\n    /**\\n     * @dev Mints `tokenId` and transfers it to `to`.\\n     *\\n     * WARNING: Usage of this method is discouraged, use {_safeMint} whenever possible\\n     *\\n     * Requirements:\\n     *\\n     * - `tokenId` must not exist.\\n     * - `to` cannot be the zero address.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function _mint(address to, uint256 tokenId) internal virtual {\\n        require(to != address(0), \\\"ERC721: mint to the zero address\\\");\\n        require(!_exists(tokenId), \\\"ERC721: token already minted\\\");\\n\\n        _beforeTokenTransfer(address(0), to, tokenId);\\n\\n        _balances[to] += 1;\\n        _owners[tokenId] = to;\\n\\n        emit Transfer(address(0), to, tokenId);\\n    }\\n\\n    /**\\n     * @dev Destroys `tokenId`.\\n     * The approval is cleared when the token is burned.\\n     *\\n     * Requirements:\\n     *\\n     * - `tokenId` must exist.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function _burn(uint256 tokenId) internal virtual {\\n        address owner = ERC721.ownerOf(tokenId);\\n\\n        _beforeTokenTransfer(owner, address(0), tokenId);\\n\\n        // Clear approvals\\n        _approve(address(0), tokenId);\\n\\n        _balances[owner] -= 1;\\n        delete _owners[tokenId];\\n\\n        emit Transfer(owner, address(0), tokenId);\\n    }\\n\\n    /**\\n     * @dev Transfers `tokenId` from `from` to `to`.\\n     *  As opposed to {transferFrom}, this imposes no restrictions on msg.sender.\\n     *\\n     * Requirements:\\n     *\\n     * - `to` cannot be the zero address.\\n     * - `tokenId` token must be owned by `from`.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function _transfer(\\n        address from,\\n        address to,\\n        uint256 tokenId\\n    ) internal virtual {\\n        require(ERC721.ownerOf(tokenId) == from, \\\"ERC721: transfer of token that is not own\\\");\\n        require(to != address(0), \\\"ERC721: transfer to the zero address\\\");\\n\\n        _beforeTokenTransfer(from, to, tokenId);\\n\\n        // Clear approvals from the previous owner\\n        _approve(address(0), tokenId);\\n\\n        _balances[from] -= 1;\\n        _balances[to] += 1;\\n        _owners[tokenId] = to;\\n\\n        emit Transfer(from, to, tokenId);\\n    }\\n\\n    /**\\n     * @dev Approve `to` to operate on `tokenId`\\n     *\\n     * Emits a {Approval} event.\\n     */\\n    function _approve(address to, uint256 tokenId) internal virtual {\\n        _tokenApprovals[tokenId] = to;\\n        emit Approval(ERC721.ownerOf(tokenId), to, tokenId);\\n    }\\n\\n    /**\\n     * @dev Approve `operator` to operate on all of `owner` tokens\\n     *\\n     * Emits a {ApprovalForAll} event.\\n     */\\n    function _setApprovalForAll(\\n        address owner,\\n        address operator,\\n        bool approved\\n    ) internal virtual {\\n        require(owner != operator, \\\"ERC721: approve to caller\\\");\\n        _operatorApprovals[owner][operator] = approved;\\n        emit ApprovalForAll(owner, operator, approved);\\n    }\\n\\n    /**\\n     * @dev Internal function to invoke {IERC721Receiver-onERC721Received} on a target address.\\n     * The call is not executed if the target address is not a contract.\\n     *\\n     * @param from address representing the previous owner of the given token ID\\n     * @param to target address that will receive the tokens\\n     * @param tokenId uint256 ID of the token to be transferred\\n     * @param _data bytes optional data to send along with the call\\n     * @return bool whether the call correctly returned the expected magic value\\n     */\\n    function _checkOnERC721Received(\\n        address from,\\n        address to,\\n        uint256 tokenId,\\n        bytes memory _data\\n    ) private returns (bool) {\\n        if (to.isContract()) {\\n            try IERC721Receiver(to).onERC721Received(_msgSender(), from, tokenId, _data) returns (bytes4 retval) {\\n                return retval == IERC721Receiver.onERC721Received.selector;\\n            } catch (bytes memory reason) {\\n                if (reason.length == 0) {\\n                    revert(\\\"ERC721: transfer to non ERC721Receiver implementer\\\");\\n                } else {\\n                    assembly {\\n                        revert(add(32, reason), mload(reason))\\n                    }\\n                }\\n            }\\n        } else {\\n            return true;\\n        }\\n    }\\n\\n    /**\\n     * @dev Hook that is called before any token transfer. This includes minting\\n     * and burning.\\n     *\\n     * Calling conditions:\\n     *\\n     * - When `from` and `to` are both non-zero, ``from``'s `tokenId` will be\\n     * transferred to `to`.\\n     * - When `from` is zero, `tokenId` will be minted for `to`.\\n     * - When `to` is zero, ``from``'s `tokenId` will be burned.\\n     * - `from` and `to` are never both zero.\\n     *\\n     * To learn more about hooks, head to xref:ROOT:extending-contracts.adoc#using-hooks[Using Hooks].\\n     */\\n    function _beforeTokenTransfer(\\n        address from,\\n        address to,\\n        uint256 tokenId\\n    ) internal virtual {}\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/access/Ownable.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.0 (access/Ownable.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../utils/Context.sol\\\";\\n\\n/**\\n * @dev Contract module which provides a basic access control mechanism, where\\n * there is an account (an owner) that can be granted exclusive access to\\n * specific functions.\\n *\\n * By default, the owner account will be the one that deploys the contract. This\\n * can later be changed with {transferOwnership}.\\n *\\n * This module is used through inheritance. It will make available the modifier\\n * `onlyOwner`, which can be applied to your functions to restrict their use to\\n * the owner.\\n */\\nabstract contract Ownable is Context {\\n    address private _owner;\\n\\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\\n\\n    /**\\n     * @dev Initializes the contract setting the deployer as the initial owner.\\n     */\\n    constructor() {\\n        _transferOwnership(_msgSender());\\n    }\\n\\n    /**\\n     * @dev Returns the address of the current owner.\\n     */\\n    function owner() public view virtual returns (address) {\\n        return _owner;\\n    }\\n\\n    /**\\n     * @dev Throws if called by any account other than the owner.\\n     */\\n    modifier onlyOwner() {\\n        require(owner() == _msgSender(), \\\"Ownable: caller is not the owner\\\");\\n        _;\\n    }\\n\\n    /**\\n     * @dev Leaves the contract without owner. It will not be possible to call\\n     * `onlyOwner` functions anymore. Can only be called by the current owner.\\n     *\\n     * NOTE: Renouncing ownership will leave the contract without an owner,\\n     * thereby removing any functionality that is only available to the owner.\\n     */\\n    function renounceOwnership() public virtual onlyOwner {\\n        _transferOwnership(address(0));\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Can only be called by the current owner.\\n     */\\n    function transferOwnership(address newOwner) public virtual onlyOwner {\\n        require(newOwner != address(0), \\\"Ownable: new owner is the zero address\\\");\\n        _transferOwnership(newOwner);\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Internal function without access restriction.\\n     */\\n    function _transferOwnership(address newOwner) internal virtual {\\n        address oldOwner = _owner;\\n        _owner = newOwner;\\n        emit OwnershipTransferred(oldOwner, newOwner);\\n    }\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/security/ReentrancyGuard.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.0 (security/ReentrancyGuard.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Contract module that helps prevent reentrant calls to a function.\\n *\\n * Inheriting from `ReentrancyGuard` will make the {nonReentrant} modifier\\n * available, which can be applied to functions to make sure there are no nested\\n * (reentrant) calls to them.\\n *\\n * Note that because there is a single `nonReentrant` guard, functions marked as\\n * `nonReentrant` may not call one another. This can be worked around by making\\n * those functions `private`, and then adding `external` `nonReentrant` entry\\n * points to them.\\n *\\n * TIP: If you would like to learn more about reentrancy and alternative ways\\n * to protect against it, check out our blog post\\n * https://blog.openzeppelin.com/reentrancy-after-istanbul/[Reentrancy After Istanbul].\\n */\\nabstract contract ReentrancyGuard {\\n    // Booleans are more expensive than uint256 or any type that takes up a full\\n    // word because each write operation emits an extra SLOAD to first read the\\n    // slot's contents, replace the bits taken up by the boolean, and then write\\n    // back. This is the compiler's defense against contract upgrades and\\n    // pointer aliasing, and it cannot be disabled.\\n\\n    // The values being non-zero value makes deployment a bit more expensive,\\n    // but in exchange the refund on every call to nonReentrant will be lower in\\n    // amount. Since refunds are capped to a percentage of the total\\n    // transaction's gas, it is best to keep them low in cases like this one, to\\n    // increase the likelihood of the full refund coming into effect.\\n    uint256 private constant _NOT_ENTERED = 1;\\n    uint256 private constant _ENTERED = 2;\\n\\n    uint256 private _status;\\n\\n    constructor() {\\n        _status = _NOT_ENTERED;\\n    }\\n\\n    /**\\n     * @dev Prevents a contract from calling itself, directly or indirectly.\\n     * Calling a `nonReentrant` function from another `nonReentrant`\\n     * function is not supported. It is possible to prevent this from happening\\n     * by making the `nonReentrant` function external, and making it call a\\n     * `private` function that does the actual work.\\n     */\\n    modifier nonReentrant() {\\n        // On the first call to nonReentrant, _notEntered will be true\\n        require(_status != _ENTERED, \\\"ReentrancyGuard: reentrant call\\\");\\n\\n        // Any calls to nonReentrant after this point will fail\\n        _status = _ENTERED;\\n\\n        _;\\n\\n        // By storing the original value once again, a refund is triggered (see\\n        // https://eips.ethereum.org/EIPS/eip-2200)\\n        _status = _NOT_ENTERED;\\n    }\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/utils/Strings.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.0 (utils/Strings.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev String operations.\\n */\\nlibrary Strings {\\n    bytes16 private constant _HEX_SYMBOLS = \\\"0123456789abcdef\\\";\\n\\n    /**\\n     * @dev Converts a `uint256` to its ASCII `string` decimal representation.\\n     */\\n    function toString(uint256 value) internal pure returns (string memory) {\\n        // Inspired by OraclizeAPI's implementation - MIT licence\\n        // https://github.com/oraclize/ethereum-api/blob/b42146b063c7d6ee1358846c198246239e9360e8/oraclizeAPI_0.4.25.sol\\n\\n        if (value == 0) {\\n            return \\\"0\\\";\\n        }\\n        uint256 temp = value;\\n        uint256 digits;\\n        while (temp != 0) {\\n            digits++;\\n            temp /= 10;\\n        }\\n        bytes memory buffer = new bytes(digits);\\n        while (value != 0) {\\n            digits -= 1;\\n            buffer[digits] = bytes1(uint8(48 + uint256(value % 10)));\\n            value /= 10;\\n        }\\n        return string(buffer);\\n    }\\n\\n    /**\\n     * @dev Converts a `uint256` to its ASCII `string` hexadecimal representation.\\n     */\\n    function toHexString(uint256 value) internal pure returns (string memory) {\\n        if (value == 0) {\\n            return \\\"0x00\\\";\\n        }\\n        uint256 temp = value;\\n        uint256 length = 0;\\n        while (temp != 0) {\\n            length++;\\n            temp >>= 8;\\n        }\\n        return toHexString(value, length);\\n    }\\n\\n    /**\\n     * @dev Converts a `uint256` to its ASCII `string` hexadecimal representation with fixed length.\\n     */\\n    function toHexString(uint256 value, uint256 length) internal pure returns (string memory) {\\n        bytes memory buffer = new bytes(2 * length + 2);\\n        buffer[0] = \\\"0\\\";\\n        buffer[1] = \\\"x\\\";\\n        for (uint256 i = 2 * length + 1; i > 1; --i) {\\n            buffer[i] = _HEX_SYMBOLS[value & 0xf];\\n            value >>= 4;\\n        }\\n        require(value == 0, \\\"Strings: hex length insufficient\\\");\\n        return string(buffer);\\n    }\\n}\\n\"\r\n    },\r\n    \"contracts/Chess.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.9;\\n\\nimport { Engine } from \\\"./Engine.sol\\\";\\n\\n/// @title Utils library for fiveoutofnine (a 100% on-chain 6x6 chess engine)\\n/// @author fiveoutofnine\\n/// @dev Understand the representations of the chess pieces, board, and moves very carefully before\\n/// using this library:\\n/// ======================================Piece Representation======================================\\n/// Each chess piece is defined with 4 bits as follows:\\n///     * The first bit denotes the color (0 means black; 1 means white).\\n///     * The last 3 bits denote the type:\\n///         | Bits | # | Type   |\\n///         | ---- | - | ------ |\\n///         | 000  | 0 | Empty  |\\n///         | 001  | 1 | Pawn   |\\n///         | 010  | 2 | Bishop |\\n///         | 011  | 3 | Rook   |\\n///         | 100  | 4 | Knight |\\n///         | 101  | 5 | Queen  |\\n///         | 110  | 6 | King   |\\n/// ======================================Board Representation======================================\\n/// The board is an 8x8 representation of a 6x6 chess board. For efficiency, all information is\\n/// bitpacked into a single uint256. Thus, unlike typical implementations, board positions are\\n/// accessed via bit shifts and bit masks, as opposed to array accesses. Since each piece is 4 bits,\\n/// there are 64 ``indices'' to access:\\n///                                     63 62 61 60 59 58 57 56\\n///                                     55 54 53 52 51 50 49 48\\n///                                     47 46 45 44 43 42 41 40\\n///                                     39 38 37 36 35 34 33 32\\n///                                     31 30 29 28 27 26 25 24\\n///                                     23 22 21 20 19 18 17 16\\n///                                     15 14 13 12 11 10 09 08\\n///                                     07 06 05 04 03 02 01 00\\n/// All numbers in the figure above are in decimal representation.\\n/// For example, the piece at index 27 is accessed with ``(board >> (27 << 2)) & 0xF''.\\n///\\n/// The top/bottom rows and left/right columns are treated as sentinel rows/columns for efficient\\n/// boundary validation (see {Chess-generateMoves} and {Chess-isValid}). i.e., (63, ..., 56),\\n/// (07, ..., 00), (63, ..., 07), and (56, ..., 00) never contain pieces. Every bit in those rows\\n/// and columns should be ignored, except for the last bit. The last bit denotes whose turn it is to\\n/// play (0 means black's turn; 1 means white's turn). e.g. a potential starting position:\\n///                                Black\\n///                       00 00 00 00 00 00 00 00                    Black\\n///                       00 03 02 05 06 02 03 00                 ♜ ♝ ♛ ♚ ♝ ♜\\n///                       00 01 01 01 01 01 01 00                 ♟ ♟ ♟ ♟ ♟ ♟\\n///                       00 00 00 00 00 00 00 00     denotes\\n///                       00 00 00 00 00 00 00 00    the board\\n///                       00 09 09 09 09 09 09 00                 ♙ ♙ ♙ ♙ ♙ ♙\\n///                       00 11 12 13 14 12 11 00                 ♖ ♘ ♕ ♔ ♘ ♖\\n///                       00 00 00 00 00 00 00 01                    White\\n///                                White\\n/// All numbers in the example above are in decimal representation.\\n/// ======================================Move Representation=======================================\\n/// Each move is allocated 12 bits. The first 6 bits are the index the piece is moving from, and the\\n/// last 6 bits are the index the piece is moving to. Since the index representing a square is at\\n/// most 54, 6 bits sufficiently represents any index (0b111111 = 63 > 54). e.g. 1243 denotes a move\\n/// from index 19 to 27 (1243 = (19 << 6) | 27).\\n///\\n/// Since the board is represented by a uint256, consider including ``using Chess for uint256''.\\nlibrary Chess {\\n    using Chess for uint256;\\n    using Chess for Chess.MovesArray;\\n\\n    /// The depth, white's move, and black's move are bitpacked in that order as `metadata` for\\n    /// efficiency. As explained above, 12 bits sufficiently describe a move, so both white's and\\n    /// black's moves are allocated 12 bits each.\\n    struct Move {\\n        uint256 board;\\n        uint256 metadata;\\n    }\\n\\n    /// ``moves'' are bitpacked into uint256s for efficiency. Since every move is defined by at most\\n    /// 12 bits, a uint256 can contain up to 21 moves via bitpacking (21 * 12 = 252 < 256).\\n    /// Therefore, `items` can contain up to 21 * 5 = 105 moves. 105 is a safe upper bound for the\\n    /// number of possible moves a given side may have during a real game, but be wary because there\\n    /// is no formal proof of the upper bound being less than or equal to 105.\\n    struct MovesArray {\\n        uint256 index;\\n        uint256[5] items;\\n    }\\n\\n    /// @notice Takes in a board position, and applies the move `_move` to it.\\n    /// @dev After applying the move, the board's perspective is updated (see {rotate}). Thus,\\n    /// engines with symmterical search algorithms -- like negamax search -- probably work best.\\n    /// @param _board The board to apply the move to.\\n    /// @param _move The move to apply.\\n    /// @return The reversed board after applying `_move` to `_board`.\\n    function applyMove(uint256 _board, uint256 _move) internal pure returns (uint256) {\\n        unchecked {\\n            // Get piece at the from index\\n            uint256 piece = (_board >> ((_move >> 6) << 2)) & 0xF;\\n            // Replace 4 bits at the from index with 0000\\n            _board &= type(uint256).max ^ (0xF << ((_move >> 6) << 2));\\n            // Replace 4 bits at the to index with 0000\\n            _board &= type(uint256).max ^ (0xF << ((_move & 0x3F) << 2));\\n            // Place the piece at the to index\\n            _board |= (piece << ((_move & 0x3F) << 2));\\n\\n            return _board.rotate();\\n        }\\n    }\\n\\n    /// @notice Switches the perspective of the board by reversing its 4-bit subdivisions (e.g.\\n    /// 1100-0011 would become 0011-1100).\\n    /// @dev Since the last bit exchanges positions with the 4th bit, the turn identifier is updated\\n    /// as well.\\n    /// @param _board The board to reverse the perspective on.\\n    /// @return `_board` reversed.\\n    function rotate(uint256 _board) internal pure returns (uint256) {\\n        uint256 rotatedBoard;\\n\\n        unchecked {\\n            for (uint256 i; i < 64; ++i) {\\n                rotatedBoard = (rotatedBoard << 4) | (_board & 0xF);\\n                _board >>= 4;\\n            }\\n        }\\n\\n        return rotatedBoard;\\n    }\\n\\n    /// @notice Generates all possible pseudolegal moves for a given position and color.\\n    /// @dev The last bit denotes which color to generate the moves for (see {Chess}). Also, the\\n    /// function errors if more than 105 moves are found (see {Chess-MovesArray}). All moves are\\n    /// expressed in code as shifts respective to the board's 8x8 representation (see {Chess}).\\n    /// @param _board The board position to generate moves for.\\n    /// @return Bitpacked uint256(s) containing moves.\\n    function generateMoves(uint256 _board) internal pure returns (uint256[5] memory) {\\n        Chess.MovesArray memory movesArray;\\n        uint256 move;\\n        uint256 moveTo;\\n\\n        unchecked {\\n            // `0xDB5D33CB1BADB2BAA99A59238A179D71B69959551349138D30B289` is a mapping of indices\\n            // relative to the 6x6 board to indices relative to the 8x8 representation (see\\n            // {Chess-getAdjustedIndex}).\\n            for (\\n                uint256 index = 0xDB5D33CB1BADB2BAA99A59238A179D71B69959551349138D30B289;\\n                index != 0;\\n                index >>= 6\\n            ) {\\n                uint256 adjustedIndex = index & 0x3F;\\n                uint256 adjustedBoard = _board >> (adjustedIndex << 2);\\n                uint256 piece = adjustedBoard & 0xF;\\n                // Skip if square is empty or not the color of the board the function call is\\n                // analyzing.\\n                if (piece == 0 || piece >> 3 != _board & 1) continue;\\n                // The first bit can be discarded because the if statement above catches all\\n                // redundant squares.\\n                piece &= 7;\\n\\n                if (piece == 1) { // Piece is a pawn.\\n                    // 1 square in front of the pawn is empty.\\n                    if ((adjustedBoard >> 0x20) & 0xF == 0) {\\n                        movesArray.append(adjustedIndex, adjustedIndex + 8);\\n                        // The pawn is in its starting row and 2 squares in front is empty. This\\n                        // must be nested because moving 2 squares would not be valid if there was\\n                        // an obstruction 1 square in front (i.e. pawns can not jump over pieces).\\n                        if (adjustedIndex >> 3 == 2 && (adjustedBoard >> 0x40) & 0xF == 0) {\\n                            movesArray.append(adjustedIndex, adjustedIndex + 0x10);\\n                        }\\n                    }\\n                    // Moving to the right diagonal by 1 captures a piece.\\n                    if (_board.isCapture(adjustedBoard >> 0x1C)) {\\n                        movesArray.append(adjustedIndex, adjustedIndex + 7); \\n                    }\\n                    // Moving to the left diagonal by 1 captures a piece.\\n                    if (_board.isCapture(adjustedBoard >> 0x24)) {\\n                        movesArray.append(adjustedIndex, adjustedIndex + 9);\\n                    }\\n                } else if (piece > 3 && piece & 1 == 0) { // Piece is a knight or a king.\\n                    // Knights and kings always only have 8 positions to check relative to their\\n                    // current position, and the relative distances are always the same. For\\n                    // knights, positions to check are ±{6, 10, 15, 17}. This is bitpacked into\\n                    // `0x060A0F11` to reduce code redundancy. Similarly, the positions to check for\\n                    // kings are ±{1, 7, 8, 9}, which is `0x01070809` when bitpacked.\\n                    for (move = piece == 4 ? 0x060A0F11 : 0x01070809; move != 0; move >>= 8) {\\n                        if (_board.isValid(moveTo = adjustedIndex + (move & 0xFF))) {\\n                            movesArray.append(adjustedIndex, moveTo);\\n                        }\\n                        if (move <= adjustedIndex\\n                            && _board.isValid(moveTo = adjustedIndex - (move & 0xFF)))\\n                        {\\n                            movesArray.append(adjustedIndex, moveTo);\\n                        }\\n                    }\\n                } else {\\n                    // This else block generates moves for all sliding pieces. All of the 8 for\\n                    // loops terminate\\n                    //     * before a sliding piece makes an illegal move\\n                    //     * or after a sliding piece captures a piece.\\n                    if (piece != 2) { // Ortholinear pieces (i.e. rook and queen)\\n                        for (move = adjustedIndex + 1; _board.isValid(move); move += 1) {\\n                            movesArray.append(adjustedIndex, move);\\n                            if (_board.isCapture(_board >> (move << 2))) break;\\n                        }\\n                        for (move = adjustedIndex - 1; _board.isValid(move); move -= 1) {\\n                            movesArray.append(adjustedIndex, move);\\n                            if (_board.isCapture(_board >> (move << 2))) break;\\n                        }\\n                        for (move = adjustedIndex + 8; _board.isValid(move); move += 8) {\\n                            movesArray.append(adjustedIndex, move);\\n                            if (_board.isCapture(_board >> (move << 2))) break;\\n                        }\\n                        for (move = adjustedIndex - 8; _board.isValid(move); move -= 8) {\\n                            movesArray.append(adjustedIndex, move);\\n                            if (_board.isCapture(_board >> (move << 2))) break;\\n                        }\\n                    }\\n                    if (piece != 3) { // Diagonal pieces (i.e. bishop and queen)\\n                        for (move = adjustedIndex + 7; _board.isValid(move); move += 7) {\\n                            movesArray.append(adjustedIndex, move);\\n                            if (_board.isCapture(_board >> (move << 2))) break;\\n                        }\\n                        for (move = adjustedIndex - 7; _board.isValid(move); move -= 7) {\\n                            movesArray.append(adjustedIndex, move);\\n                            if (_board.isCapture(_board >> (move << 2))) break;\\n                        }\\n                        for (move = adjustedIndex + 9; _board.isValid(move); move += 9) {\\n                            movesArray.append(adjustedIndex, move);\\n                            if (_board.isCapture(_board >> (move << 2))) break;\\n                        }\\n                        for (move = adjustedIndex - 9; _board.isValid(move); move -= 9) {\\n                            // Handles the edge case where a white bishop believes it can capture\\n                            // the ``piece'' at index 0, when it is actually the turn identifier It\\n                            // would mistakenly believe it is valid move via capturing a black pawn.\\n                            if (move == 0) break;\\n                            movesArray.append(adjustedIndex, move);\\n                            if (_board.isCapture(_board >> (move << 2))) break;\\n                        }\\n                    }\\n                }\\n            }\\n        }\\n\\n        return movesArray.items;\\n    }\\n\\n    /// @notice Determines whether a move is a legal move or not (includes checking whether king is\\n    /// checked or not after the move).\\n    /// @param _board The board to analyze.\\n    /// @param _move The move to check.\\n    /// @return Whether the move is legal or not.\\n    function isLegalMove(uint256 _board, uint256 _move) internal pure returns (bool) {\\n        unchecked {\\n            uint256 fromIndex = _move >> 6;\\n            uint256 toIndex = _move & 0x3F;\\n            if ((0x7E7E7E7E7E7E00 >> fromIndex) & 1 == 0) return false;\\n            if ((0x7E7E7E7E7E7E00 >> toIndex) & 1 == 0) return false;\\n\\n            uint256 pieceAtFromIndex = (_board >> (fromIndex << 2)) & 0xF;\\n            if (pieceAtFromIndex == 0) return false;\\n            if (pieceAtFromIndex >> 3 != _board & 1) return false;\\n            pieceAtFromIndex &= 7;\\n\\n            uint256 adjustedBoard = _board >> (toIndex << 2);\\n            uint256 indexChange = toIndex < fromIndex\\n                    ? fromIndex - toIndex\\n                    : toIndex - fromIndex;\\n            if (pieceAtFromIndex == 1) {\\n                if (toIndex <= fromIndex) return false;\\n                indexChange = toIndex - fromIndex;\\n                if ((indexChange == 7 || indexChange == 9)) {\\n                    if (!_board.isCapture(adjustedBoard)) return false;\\n                } else if (indexChange == 8) {\\n                    if (!isValid(_board, toIndex)) return false;\\n                } else if (indexChange == 0x10) {\\n                    if (!isValid(_board, toIndex - 8) || !isValid(_board, toIndex)) return false;\\n                } else {\\n                    return false;\\n                }\\n            } else if (pieceAtFromIndex == 4 || pieceAtFromIndex == 6) {\\n                if (((pieceAtFromIndex == 4 ? 0x28440 : 0x382) >> indexChange) & 1 == 0) {\\n                    return false;\\n                }\\n                if (!isValid(_board, toIndex)) return false;\\n            } else {\\n                bool rayFound;\\n                if (pieceAtFromIndex != 2) {\\n                    rayFound = searchRay(_board, fromIndex, toIndex, 1)\\n                        || searchRay(_board, fromIndex, toIndex, 8);\\n                }\\n                if (pieceAtFromIndex != 3) {\\n                    rayFound = rayFound\\n                        || searchRay(_board, fromIndex, toIndex, 7)\\n                        || searchRay(_board, fromIndex, toIndex, 9);\\n                }\\n                if (!rayFound) return false;\\n            }\\n\\n            if (Engine.negaMax(_board.applyMove(_move), 1) < -1_260) return false;\\n\\n            return true;\\n        }\\n    }\\n\\n    /// @notice Determines whether there is a clear path along a direction vector from one index to\\n    /// another index on the board.\\n    /// @dev The board's representation essentially flattens it from 2D to 1D, so `_directionVector`\\n    /// should be the change in index that represents the direction vector.\\n    /// @param _board The board to analyze.\\n    /// @param _fromIndex The index of the starting piece.\\n    /// @param _toIndex The index of the ending piece.\\n    /// @param _directionVector The direction vector of the ray.\\n    /// @return Whether there is a clear path between `_fromIndex` and `_toIndex` or not.\\n    function searchRay(\\n        uint256 _board,\\n        uint256 _fromIndex,\\n        uint256 _toIndex,\\n        uint256 _directionVector\\n    )\\n        internal pure\\n        returns (bool)\\n    {\\n        unchecked {\\n            uint256 indexChange;\\n            uint256 rayStart;\\n            uint256 rayEnd;\\n            if (_fromIndex < _toIndex) {\\n                indexChange = _toIndex - _fromIndex;\\n                rayStart = _fromIndex + _directionVector;\\n                rayEnd = _toIndex;\\n            } else {\\n                indexChange = _fromIndex - _toIndex;\\n                rayStart = _toIndex;\\n                rayEnd = _fromIndex - _directionVector;\\n            }\\n            if (indexChange % _directionVector != 0) return false;\\n\\n            for (\\n                rayStart = rayStart;\\n                rayStart < rayEnd;\\n                rayStart += _directionVector\\n            ) {\\n                if (!isValid(_board, rayStart)) return false;\\n                if (isCapture(_board, _board >> (rayStart << 2))) return false;\\n            }\\n\\n            if (!isValid(_board, rayStart)) return false;\\n\\n            return rayStart == rayEnd;\\n        }\\n    }\\n\\n    /// @notice Determines whether a move results in a capture or not.\\n    /// @param _board The board prior to the potential capture.\\n    /// @param _indexAdjustedBoard The board bitshifted to the to index to consider.\\n    /// @return Whether the move is a capture or not.\\n    function isCapture(uint256 _board, uint256 _indexAdjustedBoard) internal pure returns (bool) {\\n        unchecked {\\n            return (_indexAdjustedBoard & 0xF) != 0 // The square is not empty.\\n                && (_indexAdjustedBoard & 0xF) >> 3 != _board & 1; // The piece is opposite color.\\n        }\\n    }\\n\\n    /// @notice Determines whether a move is valid or not (i.e. within bounds and not capturing\\n    /// same colored piece).\\n    /// @dev As mentioned above, the board representation has 2 sentinel rows and columns for\\n    /// efficient boundary validation as follows:\\n    ///                                           0 0 0 0 0 0 0 0\\n    ///                                           0 1 1 1 1 1 1 0\\n    ///                                           0 1 1 1 1 1 1 0\\n    ///                                           0 1 1 1 1 1 1 0\\n    ///                                           0 1 1 1 1 1 1 0\\n    ///                                           0 1 1 1 1 1 1 0\\n    ///                                           0 1 1 1 1 1 1 0\\n    ///                                           0 0 0 0 0 0 0 0,\\n    /// where 1 means a piece is within the board, and 0 means the piece is out of bounds. The bits\\n    /// are bitpacked into a uint256 (i.e. ``0x7E7E7E7E7E7E00 = 0 << 63 | ... | 0 << 0'') for\\n    /// efficiency.\\n    ///\\n    /// Moves that overflow the uint256 are computed correctly because bitshifting more than bits\\n    /// available results in 0. However, moves that underflow the uint256 (i.e. applying the move\\n    /// results in a negative index) must be checked beforehand.\\n    /// @param _board The board on which to consider whether the move is valid.\\n    /// @param _toIndex The to index of the move.\\n    /// @return Whether the move is valid or not.\\n    function isValid(uint256 _board, uint256 _toIndex) internal pure returns (bool) {\\n        unchecked {\\n            return (0x7E7E7E7E7E7E00 >> _toIndex) & 1 == 1 // Move is within bounds.\\n                && ((_board >> (_toIndex << 2)) & 0xF == 0 // Square is empty.\\n                    || (((_board >> (_toIndex << 2)) & 0xF) >> 3) != _board & 1); // Piece captured.\\n        }\\n    }\\n\\n    /// @notice Maps an index relative to the 6x6 board to the index relative to the 8x8\\n    /// representation.\\n    /// @dev The indices are mapped as follows:\\n    ///                           35 34 33 32 31 30              54 53 52 51 50 49\\n    ///                           29 28 27 26 25 24              46 45 44 43 42 41\\n    ///                           23 22 21 20 19 18    mapped    38 37 36 35 34 33\\n    ///                           17 16 15 14 13 12      to      30 29 28 27 26 25\\n    ///                           11 10 09 08 07 06              22 21 20 19 18 17\\n    ///                           05 04 03 02 01 00              14 13 12 11 10 09\\n    /// All numbers in the figure above are in decimal representation. The bits are bitpacked into a\\n    /// uint256 (i.e. ``0xDB5D33CB1BADB2BAA99A59238A179D71B69959551349138D30B289 = 54 << (6 * 35) |\\n    /// ... | 9 << (6 * 0)'') for efficiency.\\n    /// @param _index Index relative to the 6x6 board.\\n    /// @return Index relative to the 8x8 representation.\\n    function getAdjustedIndex(uint256 _index) internal pure returns (uint256) {\\n        unchecked {\\n            return (\\n                (0xDB5D33CB1BADB2BAA99A59238A179D71B69959551349138D30B289 >> (_index * 6)) & 0x3F\\n            );\\n        }\\n    }\\n\\n    /// @notice Appends a move to a {Chess-MovesArray} object.\\n    /// @dev Since each uint256 fits at most 21 moves (see {Chess-MovesArray}), {Chess-append}\\n    /// bitpacks 21 moves per uint256 before moving on to the next uint256.\\n    /// @param _movesArray {Chess-MovesArray} object to append the new move to.\\n    /// @param _fromMoveIndex Index the piece moves from.\\n    /// @param _toMoveIndex Index the piece moves to.\\n    function append(MovesArray memory _movesArray, uint256 _fromMoveIndex, uint256 _toMoveIndex)\\n        internal pure\\n    {\\n        unchecked {\\n            uint256 currentIndex = _movesArray.index;\\n            uint256 currentPartition = _movesArray.items[currentIndex];\\n\\n            if (currentPartition > (1 << 0xF6)) {\\n                _movesArray.items[++_movesArray.index] = (_fromMoveIndex << 6) | _toMoveIndex;\\n            } else {\\n                _movesArray.items[currentIndex] = (currentPartition << 0xC)\\n                    | (_fromMoveIndex << 6)\\n                    | _toMoveIndex;\\n            }\\n        }\\n    }\\n}\\n\"\r\n    },\r\n    \"contracts/Engine.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.9;\\n\\nimport { Chess } from \\\"./Chess.sol\\\";\\n\\n/// @title A 6x6 chess engine with negamax search\\n/// @author fiveoutofnine\\n/// @notice Docstrings below are written from the perspective of black (i.e. written as if the\\n/// engine is always black). However, due to negamax's symmetric nature, the engine may be used for\\n/// white as well.\\nlibrary Engine {\\n    using Chess for uint256;\\n    using Engine for uint256;\\n\\n    /// @notice Searches for the ``best'' move.\\n    /// @dev The ply depth must be at least 3 because game ending scenarios are determined lazily.\\n    /// This is because {generateMoves} generates pseudolegal moves. Consider the following:\\n    ///     1. In the case of white checkmates black, depth 2 is necessary:\\n    ///         * Depth 1: This is the move black plays after considering depth 2.\\n    ///         * Depth 2: Check whether white captures black's king within 1 turn for every such\\n    ///           move. If so, white has checkmated black.\\n    ///     2. In the case of black checkmates white, depth 3 is necessary:\\n    ///         * Depth 1: This is the move black plays after considering depths 2 and 3.\\n    ///         * Depth 2: Generate all pseudolegal moves for white in response to black's move.\\n    ///         * Depth 3: Check whether black captures white's king within 1 turn for every such\\n    ///         * move. If so, black has checkmated white.\\n    /// The minimum depth required to cover all the cases above is 3. For simplicity, stalemates\\n    /// are treated as checkmates.\\n    ///\\n    /// The function returns 0 if the game is over after white's move (no collision with any\\n    /// potentially real moves because 0 is not a valid index), and returns true if the game is over\\n    /// after black's move.\\n    /// @param _board The board position to analyze.\\n    /// @param _depth The ply depth to analyze to. Must be at least 3.\\n    /// @return The best move for the player (denoted by the last bit in `_board`).\\n    /// @return Whether white is checkmated or not.\\n    function searchMove(uint256 _board, uint256 _depth) internal pure returns (uint256, bool) {\\n        uint256[5] memory moves = _board.generateMoves();\\n        if (moves[0] == 0) return (0, false);\\n        // See {Engine-negaMax} for explanation on why `bestScore` is set to -4_196.\\n        int256 bestScore = -4_196;\\n        int256 currentScore;\\n        uint256 bestMove;\\n\\n        unchecked {\\n            for (uint256 i; moves[i] != 0; ++i) {\\n                for (uint256 movePartition = moves[i]; movePartition != 0; movePartition >>= 0xC) {\\n                    currentScore = _board.evaluateMove(movePartition & 0xFFF)\\n                        + negaMax(_board.applyMove(movePartition & 0xFFF), _depth - 1);\\n                    if (currentScore > bestScore) {\\n                        bestScore = currentScore;\\n                        bestMove = movePartition & 0xFFF;\\n                    }\\n                }\\n            }\\n        }\\n\\n        // 1_260 is equivalent to 7 queens (7 * 180 = 1260). Since a king's capture is equivalent to\\n        // an evaluation of 4_000, ±1_260 catches all lines that include the capture of a king.\\n        if (bestScore < -1_260) return (0, false);\\n        return (bestMove, bestScore > 1_260);\\n    }\\n\\n    /// @notice Searches and evaluates moves using a variant of the negamax search algorithm.\\n    /// @dev For efficiency, the function evaluates how good moves are and sums them up, rather than\\n    /// evaluating entire board positions. Thus, the only pruning the algorithm performs is when a\\n    /// king is captured. If a king is captured, it always returns -4,000, which is the king's value\\n    /// (see {Chess}) because there is nothing more to consider.\\n    /// @param _board The board position to analyze.\\n    /// @param _depth The ply depth to analyze to.\\n    /// @return The cumulative score searched to a ply depth of `_depth`, assuming each side picks\\n    /// their ``best'' (as decided by {Engine-evaluateMove}) moves.\\n    function negaMax(uint256 _board, uint256 _depth) internal pure returns (int256) {\\n        // Base case for the recursion.\\n        if (_depth == 0) return 0;\\n        uint256[5] memory moves = _board.generateMoves();\\n        // There is no ``best'' score if there are no moves to play.\\n        if (moves[0] == 0) return 0;\\n        // `bestScore` is initially set to -4_196 because no line will result in a cumulative\\n        // evaluation of <-4_195. -4_195 occurs, for example. when the engine's king is captured\\n        // (-4000), and the player captures an engine's queen on index 35 (-181) with knight from\\n        // index 52 (-14).\\n        int256 bestScore = -4_196;\\n        int256 currentScore;\\n        uint256 bestMove;\\n\\n        unchecked {\\n            for (uint256 i; moves[i] != 0; ++i) {\\n                for (uint256 movePartition = moves[i]; movePartition != 0; movePartition >>= 0xC) {\\n                    currentScore = _board.evaluateMove(movePartition & 0xFFF);\\n                    if (currentScore > bestScore) {\\n                        bestScore = currentScore;\\n                        bestMove = movePartition & 0xFFF;\\n                    }\\n                }\\n            }\\n\\n            // If a king is captured, stop the recursive call stack and return a score of -4_000.\\n            // There is nothing more to consider.\\n            if (((_board >> ((bestMove & 0x3F) << 2)) & 7) == 6) return -4_000;\\n            return _board & 1 == 0\\n                ? bestScore + negaMax(_board.applyMove(bestMove), _depth - 1)\\n                : -bestScore + negaMax(_board.applyMove(bestMove), _depth - 1);\\n        }\\n    }\\n\\n    /// @notice Uses piece-square tables (PSTs) to evaluate how ``good'' a move is.\\n    /// @dev The PSTs were selected semi-arbitrarily with chess strategies in mind (e.g. pawns are\\n    /// good in the center). Updating them changes the way the engine ``thinks.'' Each piece's PST\\n    /// is bitpacked into as few uint256s as possible for efficiency (see {Engine-getPst} and\\n    /// {Engine-getPstTwo}):\\n    ///          Pawn                Bishop               Knight                   Rook\\n    ///    20 20 20 20 20 20    62 64 64 64 64 62    54 56 54 54 56 58    100 100 100 100 100 100\\n    ///    30 30 30 30 30 30    64 66 66 66 66 64    56 60 64 64 60 56    101 102 102 102 102 101\\n    ///    20 22 24 24 22 20    64 67 68 68 67 64    58 64 68 68 64 58     99 100 100 100 100  99\\n    ///    21 20 26 26 20 21    64 68 68 68 68 64    58 65 68 68 65 58     99 100 100 100 100  99\\n    ///    21 30 16 16 30 21    64 67 66 66 67 64    56 60 65 65 60 56     99 100 100 100 100  99\\n    ///    20 20 20 20 20 20    62 64 64 64 64 62    54 56 58 58 56 54    100 100 101 101 100 100\\n    ///                            Queen                         King\\n    ///                   176 178 179 179 178 176    3994 3992 3990 3990 3992 3994\\n    ///                   178 180 180 180 180 178    3994 3992 3990 3990 3992 3994\\n    ///                   179 180 181 181 180 179    3996 3994 3992 3992 3994 3995\\n    ///                   179 181 181 181 180 179    3998 3996 3996 3996 3996 3998\\n    ///                   178 180 181 180 180 178    4001 4001 4000 4000 4001 4001\\n    ///                   176 178 179 179 178 176    4004 4006 4002 4002 4006 4004\\n    /// All entries in the figure above are in decimal representation.\\n    ///\\n    /// Each entry in the pawn's, bishop's, knight's, and rook's PSTs uses 7 bits, and each entry in\\n    /// the queen's and king's PSTs uses 12 bits. Additionally, each piece is valued as following:\\n    ///                                      | Type   | Value |\\n    ///                                      | ------ | ----- |\\n    ///                                      | Pawn   | 20    |\\n    ///                                      | Bishop | 66    |\\n    ///                                      | Knight | 64    |\\n    ///                                      | Rook   | 100   |\\n    ///                                      | Queen  | 180   |\\n    ///                                      | King   | 4000  |\\n    /// The king's value just has to be sufficiently larger than 180 * 7 = 1260 (i.e. equivalent to\\n    /// 7 queens) because check/checkmates are detected lazily (see {Engine-generateMoves}).\\n    ///\\n    /// The evaluation of a move is given by\\n    ///                Δ(PST value of the moved piece) + (PST value of any captured pieces).\\n    /// @param _board The board to apply the move to.\\n    /// @param _move The move to evaluate.\\n    /// @return The evaluation of the move applied to the given position.\\n    function evaluateMove(uint256 _board, uint256 _move) internal pure returns (int256) {\\n        unchecked {\\n            uint256 fromIndex = 6 * (_move >> 9) + ((_move >> 6) & 7) - 7;\\n            uint256 toIndex = 6 * ((_move & 0x3F) >> 3) + ((_move & 0x3F) & 7) - 7;\\n            uint256 pieceAtFromIndex = (_board >> ((_move >> 6) << 2)) & 7;\\n            uint256 pieceAtToIndex = (_board >> ((_move & 0x3F) << 2)) & 7;\\n            uint256 oldPst;\\n            uint256 newPst;\\n            uint256 captureValue;\\n\\n            if (pieceAtToIndex != 0) {\\n                if (pieceAtToIndex < 5) { // Piece is not a queen or king\\n                    captureValue = (getPst(pieceAtToIndex) >> (7 * (0x23 - toIndex))) & 0x7F;\\n                } else if (toIndex < 0x12) { // Piece is queen or king and in the closer half\\n                    captureValue = (getPst(pieceAtToIndex) >> (0xC * (0x11 - toIndex))) & 0xFFF;\\n                } else { // Piece is queen or king and in the further half\\n                    captureValue = (getPstTwo(pieceAtToIndex) >> (0xC * (0x23 - toIndex))) & 0xFFF;\\n                }\\n            }\\n            if (pieceAtFromIndex < 5) { // Piece is not a queen or king\\n                oldPst = (getPst(pieceAtFromIndex) >> (7 * fromIndex)) & 0x7F;\\n                newPst = (getPst(pieceAtFromIndex) >> (7 * toIndex)) & 0x7F;\\n            } else if (fromIndex < 0x12) { // Piece is queen or king and in the closer half\\n                oldPst = (getPstTwo(pieceAtFromIndex) >> (0xC * fromIndex)) & 0xFFF;\\n                newPst = (getPstTwo(pieceAtFromIndex) >> (0xC * toIndex)) & 0xFFF;\\n            } else { // Piece is queen or king and in the further half\\n                oldPst = (getPst(pieceAtFromIndex) >> (0xC * (fromIndex - 0x12))) & 0xFFF;\\n                newPst = (getPst(pieceAtFromIndex) >> (0xC * (toIndex - 0x12))) & 0xFFF;\\n            }\\n\\n            return int256(captureValue + newPst) - int256(oldPst);\\n        }\\n    }\\n\\n    /// @notice Maps a given piece type to its PST (see {Engine-evaluateMove} for details on the\\n    /// PSTs and {Chess} for piece representation).\\n    /// @dev The queen's and king's PSTs do not fit in 1 uint256, so their PSTs are split into 2\\n    /// uint256s each. {Chess-getPst} contains the first half, and {Chess-getPstTwo} contains the\\n    /// second half.\\n    /// @param _type A piece type defined in {Chess}.\\n    /// @return The PST corresponding to `_type`.\\n    function getPst(uint256 _type) internal pure returns (uint256) {\\n        if (_type == 1) return 0x2850A142850F1E3C78F1E2858C182C50A943468A152A788103C54A142850A14;\\n        if (_type == 2) return 0x7D0204080FA042850A140810E24487020448912240810E1428701F40810203E;\\n        if (_type == 3) return 0xC993264C9932E6CD9B365C793264C98F1E4C993263C793264C98F264CB97264;\\n        if (_type == 4) return 0x6CE1B3670E9C3C8101E38750224480E9D4189120BA70F20C178E1B3874E9C36;\\n        if (_type == 5) return 0xB00B20B30B30B20B00B20B40B40B40B40B20B30B40B50B50B40B3;\\n        return 0xF9AF98F96F96F98F9AF9AF98F96F96F98F9AF9CF9AF98F98F9AF9B;\\n    }\\n\\n    /// @notice Maps a queen or king to the second half of its PST (see {Engine-getPst}).\\n    /// @param _type A piece type defined in {Chess}. Must be a queen or a king (see\\n    /// {Engine-getPst}).\\n    /// @return The PST corresponding to `_type`.\\n    function getPstTwo(uint256 _type) internal pure returns (uint256) {\\n        return _type == 5\\n            ? 0xB30B50B50B50B40B30B20B40B50B40B40B20B00B20B30B30B20B0\\n            : 0xF9EF9CF9CF9CF9CF9EFA1FA1FA0FA0FA1FA1FA4FA6FA2FA2FA6FA4;\\n    }\\n}\\n\"\r\n    },\r\n    \"contracts/fiveoutofnineART.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.9;\\n\\nimport \\\"@openzeppelin/contracts/utils/Strings.sol\\\";\\n\\nimport { Chess } from \\\"./Chess.sol\\\";\\nimport { Base64 } from \\\"./Base64.sol\\\";\\n\\n/// @title A library that generates HTML art for fiveoutofnine (an on-chain 6x6 chess engine)\\n/// @author fiveoutofnine\\n/// @notice Below details how the metadata and art are generated:\\n/// ==============================================Name==============================================\\n/// Expressed as Python3 f-strings below, token names generate as\\n///                     ``f\\\"fiveoutofnine - Game #{game_id}, Move #{move_id}\\\"''.\\n/// ==========================================Description===========================================\\n/// Token descriptions describe white's move in algebraic notation and black's move in algebraic\\n/// notation. If white's move results in checkmating black or a stalemate, the description will say\\n/// black resigned (for simplicity, stalemates are treated as checkmates). Since the engine always\\n/// plays black, and the player always plays white, white is indicated as ``Player'', and black is\\n/// indicated as ``fiveoutofnine''. Additionally, for every non game-ending turn, a string graphic\\n/// is generated after the moves' descriptions. An example:\\n///                             Player plays e4 rook captures e5 queen.\\n///                             6 · · ♜ · ♚ ♜\\n///                             5 · ♟ · · ♖ ♟\\n///                             4 ♟ ♙ ♟ ♙ * ♙\\n///                             3 ♙ · ♙ · · ·\\n///                             2 · · · · ♖ ·\\n///                             1 · ♘ · ♔ · ·\\n///                               a b c d e f\\n///\\n///                             fiveoutofnine resigns.\\n/// * indicates the square the piece moved from.\\n/// ==============================================Art===============================================\\n/// The art is generated as HTML code with in-line CSS (0 JS) according to the following table:\\n///  | Property       | Name      | Value/Description                       | Determination       |\\n///  | ============== | ========= | ======================================= | =================== |\\n///  | Dimension      | 1 × 1     | 1 × 1 pillars                           | Player moved king   |\\n///  | (6 traits)     | 2 × 2     | 2 × 2 pillars                           | Player moved rook   |\\n///  |                | 3 × 3     | 3 × 3 pillars                           | Engine moved bishop |\\n///  |                | 4 × 4     | 4 × 4 pillars                           | Player moved knight |\\n///  |                | 6 × 6     | 6 × 6 pillars                           | Player moved pawn   |\\n///  |                | 12 × 12   | 12 × 12 pillars                         | Player moved queen  |\\n///  | -------------- | --------- | --------------------------------------- | ------------------- |\\n///  | Height         | Plane     | 8px pillar height                       | 1 / 64 chance[^0]   |\\n///  | (5 traits)     | 1/4       | 98px pillar height                      | 10 / 64 chance[^0]  |\\n///  |                | 1/2       | 197px pillar height                     | 10 / 64 chance[^0]  |\\n///  |                | Cube      | 394px pillar height                     | 40 / 64 chance[^0]  |\\n///  |                | Infinite  | 1000px pillar height                    | 3 / 64 chance[^0]   |\\n///  | -------------- | --------- | --------------------------------------- | ------------------- |\\n///  | Gap[^1]        | None      | 0px gap between the pillars             | 4 / 16 chance[^0]   |\\n///  | (4 traits)     | Narrow    | 2px gap between the pillars             | 9 / 16 chance[^0]   |\\n///  |                | Wide      | 12px gap between the pillars            | 2 / 16 chance[^0]   |\\n///  |                | Ultrawide | 24px gap between the pillars            | 1 / 16 chance[^0]   |\\n///  | -------------- | --------- | --------------------------------------- | ------------------- |\\n///  | Color          | Uniform   | All faces are the same color            | 7 / 32 chance[^0]   |\\n///  | Generation[^2] | Shades    | Faces get darker anticlockwise          | 7 / 32 chance[^0]   |\\n///  | (6 traits)     | Tints     | Faces get lighter anticlockwise         | 7 / 32 chance[^0]   |\\n///  |                | Eclipse   | Left face is white; black face is black | 3 / 32 chance[^0]   |\\n///  |                | Void      | Left and right face are black           | 1 / 32 chance[^0]   |\\n///  |                | Curated   | One of 8 color themes (see below)       | 7 / 32 chance[^0]   |\\n///  | -------------- | --------- | --------------------------------------- | ------------------- |\\n///  | Color          | Nord      | 0x8FBCBBEBCB8BD087705E81ACB48EAD        | 1 / 8 chance[^0]    |\\n///  | Theme[^3]      | B/W       | 0x000000FFFFFFFFFFFFFFFFFF000000        | 1 / 8 chance[^0]    |\\n///  | (8 traits)     | Candycorn | 0x0D3B66F4D35EEE964BFAF0CAF95738        | 1 / 8 chance[^0]    |\\n///  |                | RGB       | 0xFFFF0000FF000000FFFF0000FFFF00        | 1 / 8 chance[^0]    |\\n///  |                | VSCode    | 0x1E1E1E569CD6D2D1A2BA7FB54DC4AC        | 1 / 8 chance[^0]    |\\n///  |                | Neon      | 0x00FFFFFFFF000000FF00FF00FF00FF        | 1 / 8 chance[^0]    |\\n///  |                | Jungle    | 0xBE3400015045020D22EABAACBE3400        | 1 / 8 chance[^0]    |\\n///  |                | Corn      | 0xF9C233705860211A28346830F9C233        | 1 / 8 chance[^0]    |\\n///  | -------------- | --------- | --------------------------------------- | ------------------- |\\n///  | Bit Border[^4] | True      | The bits have a 1px solid black border  | Any pieces captured |\\n///  | (2 traits)     | False     | The bits don't have any border          | No pieces captuered |\\n///  | ============== | ========= | ======================================= | =================== |\\n///  | [^0]: Determined from `_seed`.                                                             |\\n///  | [^1]: Gap is omitted when dimension is 1 x 1.                                              |\\n///  | [^2]: The first 5 color generation traits are algorithms. A base color is generated from   |\\n///  | `seed`, and the remaining colors are generated according to the selected algorithm. The    |\\n///  | color of the bits is always the complement of the randomly generated base color, and the   |\\n///  | background color depends on the algorithm:                                                 |\\n///  |     * Uniform: same as the base color;                                                     |\\n///  |     * Shades: darkest shade of the base color;                                             |\\n///  |     * Tints: lightest shade of the base color;                                             |\\n///  |     * Eclipse: same as the base color;                                                     |\\n///  |     * Void: complement of the base color.                                                  |\\n///  | If the selected color generation trait is \\\"Curated,\\\" 1 of 8 pre-curated themes is randomly |\\n///  | selected.                                                                                  |\\n///  | [^3]: The entries in the 3rd column are bitpacked integers where                           |\\n///  |     * the first 24 bits represent the background color,                                    |\\n///  |     * the second 24 bits represent the left face's color,                                  |\\n///  |     * the third 24 bits represent the right face's color,                                  |\\n///  |     * the fourth 24 bits represent the top face's color,                                   |\\n///  |     * and the last 24 bits represent the bits' color.                                      |\\n///  | [^4]: Bit border is omitted when dimension is 12 x 12.                                     |\\nlibrary fiveoutofnineART {\\n    using Strings for uint256;\\n    using Chess for uint256;\\n\\n    string internal constant SVG_STYLES = \\\"--n:calc((394px - (var(--b) - 1)*var(--c))/var(--b));--o\\\"\\n        \\\":calc(106px + var(--n));--p:calc(var(--a)/2)}section{height:var(--a);width:var(--a);backgr\\\"\\n        \\\"ound:var(--e);position:absolute;left:0;top:0;right:0;bottom:0;overflow:hidden}.c{height:0;\\\"\\n        \\\"width:0;position:absolute;transition:0.25s}.c:hover{transform:translate(0px,-64px);transit\\\"\\n        \\\"ion:0.25s}.c>*{height:var(--n);width:var(--n);border-bottom:4px solid black;border-right:4\\\"\\n        \\\"px solid black;border-left:1px solid black;border-top:1px solid black;transform-origin:0 0\\\"\\n        \\\";position:relative;box-sizing:border-box}.c>*:nth-child(1){width:var(--d);background-color\\\"\\n        \\\":var(--f);transform:rotate(90deg)skewX(-30deg)scaleY(0.864)}.c>*:nth-child(2){height:var(-\\\"\\n        \\\"-d);bottom:var(--n);background-color:var(--g);transform:rotate(-30deg)skewX(-30deg)scaleY(\\\"\\n        \\\"0.864)}#h{background-color:var(--h)}#i{background-color:var(--i)}.c>*:nth-child(3){bottom:\\\"\\n        \\\"calc(var(--d) + var(--n));background-color:var(--h);display:grid;grid-template-columns:rep\\\"\\n        \\\"eat(\\\";\\n    bytes32 internal constant HEXADECIMAL_DIGITS = \\\"0123456789ABCDEF\\\";\\n    bytes32 internal constant FILE_NAMES = \\\"abcdef\\\";\\n\\n    /// @notice Takes in data for a given fiveoutofnine NFT and outputs its metadata in JSON form.\\n    /// Refer to {fiveoutofnineART} for details.\\n    /// @dev The output is base 64-encoded.\\n    /// @param _internalId A bitpacked uint256 where the first 128 bits are the game ID, and the\\n    /// last 128 bits are the move ID within the game.\\n    /// @param _move A struct with information about the player's move and engine's response (see\\n    /// {Chess-Move}).\\n    /// @return Base 64-encoded JSON of metadata generated from `_internalId` and `_move`.\\n    function getMetadata(uint256 _internalId, Chess.Move memory _move)\\n        internal pure\\n        returns (string memory)\\n    {\\n        string memory description;\\n        string memory image;\\n        string memory attributes;\\n        uint256 whiteMove;\\n        uint256 blackMove;\\n        uint256 boardAfterWhiteMove;\\n        uint256 boardAfterBlackMove;\\n        bool whiteCaptures;\\n        bool blackCaptures;\\n        uint256 depth;\\n\\n        {\\n            whiteMove = (_move.metadata >> 0xC) & 0xFFF;\\n            blackMove = _move.metadata & 0xFFF;\\n\\n            boardAfterWhiteMove = _move.board.applyMove(whiteMove);\\n            boardAfterBlackMove = boardAfterWhiteMove.applyMove(blackMove);\\n\\n            whiteCaptures = _move.board.isCapture(\\n                _move.board >> ((whiteMove & 0x3F) << 2)\\n            );\\n            blackCaptures = boardAfterWhiteMove.isCapture(\\n                boardAfterWhiteMove >> ((blackMove & 0x3F) << 2)\\n            );\\n\\n            depth = _move.metadata >> 0x18;\\n        }\\n\\n        {\\n            uint256 numSquares;\\n            {\\n                uint256 whitePieceType = (_move.board >> ((whiteMove >> 6) << 2)) & 7;\\n                uint256 blackPieceType = (boardAfterWhiteMove >> ((blackMove >> 6) << 2)) & 7;\\n\\n                if (whitePieceType == 1) numSquares = 6;\\n                else if (whitePieceType == 3) numSquares = 2;\\n                else if (whitePieceType == 4) numSquares = 4;\\n                else if (whitePieceType == 5) numSquares = 12;\\n                else numSquares = 1;\\n                if (blackPieceType == 2) numSquares = 3;\\n            }\\n\\n            uint256 seed = uint256(\\n                keccak256(abi.encodePacked(_internalId, boardAfterBlackMove, _move.metadata))\\n            );\\n\\n            (image, attributes) = getImage(\\n                boardAfterBlackMove,\\n                numSquares,\\n                seed,\\n                whiteCaptures || blackCaptures\\n            );\\n        }\\n\\n        // Lots of unusual identation and braces to get around the 16 local variable limitation.\\n        {\\n            description = string(\\n                abi.encodePacked(\\n                    \\\"---\\\\\\\\n\\\\\\\\n**Player** plays **`\\\",\\n                    indexToPosition(whiteMove >> 6, true),\\n                    \\\"` \\\",\\n                    getPieceName((_move.board >> ((whiteMove >> 6) << 2)) & 7),\\n                    \\\"**\\\",\\n                    whiteCaptures\\n                        ? \\\" captures \\\"\\n                        : \\\" to \\\",\\n                    \\\"**`\\\",\\n                    indexToPosition(whiteMove & 0x3F, true)\\n                )\\n            );\\n        }\\n        {\\n            description = string(\\n                abi.encodePacked(\\n                    description,\\n                    \\\"`\\\",\\n                    whiteCaptures\\n                        ? \\\" \\\"\\n                        : \\\"\\\",\\n                    whiteCaptures\\n                        ? getPieceName((_move.board >> ((whiteMove & 0x3F) << 2)) & 7)\\n                        : \\\"\\\",\\n                    \\\"**.\\\\\\\\n\\\\\\\\n\\\",\\n                    drawMove(boardAfterWhiteMove, whiteMove >> 6),\\n                    \\\"\\\\\\\\n\\\\\\\\n---\\\\\\\\n\\\\\\\\n**fiveoutofnine** \\\"\\n                )\\n            );\\n        }\\n\\n        {\\n            if (blackMove == 0) {\\n                description = string(abi.encodePacked(description, \\\"**resigns**.\\\"));\\n            } else {\\n                description = string(\\n                    abi.encodePacked(\\n                        description,\\n                        \\\"responds with **`\\\",\\n                        indexToPosition(blackMove >> 6, false),\\n                        \\\"` \\\",\\n                        getPieceName((boardAfterWhiteMove >> ((blackMove >> 6) << 2)) & 7),\\n                        \\\"**\\\",\\n                        blackCaptures\\n                            ? \\\" captures \\\"\\n                            : \\\" to \\\",\\n                        \\\"**`\\\",\\n                        indexToPosition(blackMove & 0x3F, false),\\n                        \\\"`\\\",\\n                        blackCaptures\\n                            ? \\\" \\\"\\n                            : \\\"\\\",\\n                        blackCaptures\\n                            ? getPieceName((boardAfterWhiteMove>> ((blackMove & 0x3F) << 2)) & 7)\\n                            : \\\"\\\",\\n                        \\\"**.\\\\\\\\n\\\\\\\\n\\\",\\n                        drawMove(boardAfterBlackMove, blackMove >> 6)\\n                    )\\n                );\\n            }\\n        }\\n\\n        return string(\\n            abi.encodePacked(\\n                \\\"data:application/json;base64,\\\",\\n                Base64.encode(\\n                    abi.encodePacked(\\n                        '{\\\"name\\\":\\\"Game #',\\n                        Strings.toString(_internalId >> 0x80),\\n                        \\\", Move #\\\",\\n                        Strings.toString(uint128(_internalId)),\\n                        '\\\",'\\n                        '\\\"description\\\":\\\"',\\n                        description,\\n                        '\\\",\\\"animation_url\\\":\\\"data:text/html;base64,',\\n                        image,\\n                        '\\\",\\\"attributes\\\":[{\\\"trait_type\\\":\\\"Depth\\\",\\\"value\\\":',\\n                        depth.toString(),\\n                        \\\"},\\\",\\n                        attributes,\\n                        \\\"]}\\\"\\n                    )\\n                )\\n            )\\n        );\\n    }\\n\\n    /// @notice Generates the HTML image and its attributes for a given board/seed according to the\\n    /// table described in {fiveoutofnineART}.\\n    /// @dev The output of the image is base 64-encoded.\\n    /// @param _board The board after the player's and engine's move are played.\\n    /// @param _numSquares The dimension of the board.\\n    /// @param _seed A hash of the game ID, move ID, board position, and metadata.\\n    /// @param _pieceCaptured Whether or not any piees were captured.\\n    /// @return Base 64-encoded image (in HTML) and its attributes.\\n    function getImage(uint256 _board, uint256 _numSquares, uint256 _seed, bool _pieceCaptured)\\n        internal pure\\n        returns (string memory, string memory)\\n    {\\n        string memory attributes = string(\\n            abi.encodePacked(\\n                '{\\\"trait_type\\\":\\\"Dimension\\\",\\\"value\\\":\\\"',\\n                _numSquares.toString(),\\n                unicode\\\" × \\\",\\n                _numSquares.toString(),\\n                '\\\"}'\\n            )\\n        );\\n        string memory styles = string(\\n            abi.encodePacked(\\n                \\\"<style>:root{--a:1000px;--b:\\\",\\n                _numSquares.toString(),\\n                \\\";--c:\\\"\\n            )\\n        );\\n\\n        {\\n            string memory tempAttribute;\\n            string memory tempValue = \\\"0\\\";\\n            if (_numSquares != 1) {\\n                if (_seed & 0xF < 4) { (tempAttribute, tempValue) = (\\\"None\\\", \\\"0\\\"); }\\n                else if (_seed & 0xF < 13) { (tempAttribute, tempValue) = (\\\"Narrow\\\", \\\"2\\\"); }\\n                else if (_seed & 0xF < 15) { (tempAttribute, tempValue) = (\\\"Wide\\\", \\\"12\\\"); }\\n                else { (tempAttribute, tempValue) = (\\\"Ultrawide\\\", \\\"24\\\"); }\\n\\n                attributes = string(\\n                    abi.encodePacked(\\n                        attributes,\\n                        ',{\\\"trait_type\\\":\\\"Gap\\\",\\\"value\\\":\\\"',\\n                        tempAttribute,\\n                        '\\\"}'\\n                    )\\n                );\\n            }\\n            styles = string(abi.encodePacked(styles, tempValue, \\\"px;--d:\\\"));\\n        }\\n        _seed >>= 4;\\n\\n        {\\n            string memory tempAttribute;\\n            string memory tempValue;\\n            if (_seed & 0x3F < 1) { (tempAttribute, tempValue) = (\\\"Plane\\\", \\\"8\\\"); }\\n            else if (_seed & 0x3F < 11) { (tempAttribute, tempValue) = (\\\"1/4\\\", \\\"98\\\"); }\\n            else if (_seed & 0x3F < 21) { (tempAttribute, tempValue) = (\\\"1/2\\\", \\\"197\\\"); }\\n            else if (_seed & 0x3F < 51) { (tempAttribute, tempValue) = (\\\"Cube\\\", \\\"394\\\"); }\\n            else { (tempAttribute, tempValue) = (\\\"Infinite\\\", \\\"1000\\\"); }\\n\\n            attributes = string(\\n                abi.encodePacked(\\n                    attributes,\\n                    ',{\\\"trait_type\\\":\\\"Height\\\",\\\"value\\\":\\\"',\\n                    tempAttribute,\\n                    '\\\"}'\\n                )\\n            );\\n            styles = string(abi.encodePacked(styles, tempValue, \\\"px;\\\"));\\n        }\\n        _seed >>= 6;\\n\\n        {\\n            string memory tempAttribute;\\n            uint256 colorTheme;\\n            if (_seed & 0x1F < 25) {\\n                colorTheme = (_seed >> 5) & 0xFFFFFF;\\n                attributes = string(\\n                    abi.encodePacked(\\n                        attributes,\\n                        ',{\\\"trait_type\\\":\\\"Base Color\\\",\\\"value\\\":',\\n                        colorTheme.toString(),\\n                        \\\"}\\\"\\n                    )\\n                );\\n                if (_seed & 0x1F < 7) {\\n                    tempAttribute = \\\"Uniform\\\";\\n                    colorTheme = (colorTheme << 0x60)\\n                        | (colorTheme << 0x48)\\n                        | (colorTheme << 0x30)\\n                        | (colorTheme << 0x18)\\n                        | complementColor(colorTheme);\\n                } else if (_seed & 0x1F < 14) {\\n                    tempAttribute = \\\"Shades\\\";\\n                    colorTheme = (darkenColor(colorTheme, 3) << 0x60)\\n                        | (darkenColor(colorTheme, 1) << 0x48)\\n                        | (darkenColor(colorTheme, 2) << 0x30)\\n                        | (colorTheme << 0x18)\\n                        | complementColor(colorTheme);\\n                } else if (_seed & 0x1F < 21) {\\n                    tempAttribute = \\\"Tints\\\";\\n                    colorTheme = (brightenColor(colorTheme, 3) << 0x60)\\n                        | (brightenColor(colorTheme, 1) << 0x48)\\n                        | (brightenColor(colorTheme, 2) << 0x30)\\n                        | (colorTheme << 0x18)\\n                        | complementColor(colorTheme);\\n                } else if (_seed & 0x1F < 24) {\\n                    tempAttribute = \\\"Eclipse\\\";\\n                    colorTheme = (colorTheme << 0x60)\\n                        | (0xFFFFFF << 0x48)\\n                        | (colorTheme << 0x18)\\n                        | complementColor(colorTheme);\\n                } else {\\n                    tempAttribute = \\\"Void\\\";\\n                    colorTheme = (complementColor(colorTheme) << 0x60)\\n                        | (colorTheme << 0x18)\\n                        | complementColor(colorTheme);\\n                }\\n            } else {\\n                tempAttribute = \\\"Curated\\\";\\n                _seed >>= 5;\\n\\n                attributes = string(\\n                    abi.encodePacked(\\n                        attributes,\\n                        ',{\\\"trait_type\\\":\\\"Color Theme\\\",\\\"value\\\":\\\"',\\n                        [\\\"Nord\\\", \\\"B/W\\\", \\\"Candycorn\\\", \\\"RGB\\\", \\\"VSCode\\\", \\\"Neon\\\", \\\"Jungle\\\", \\\"Corn\\\"]\\n                        [_seed & 7],\\n                        '\\\"}'\\n                    )\\n                );\\n\\n                colorTheme = [\\n                    0x8FBCBBEBCB8BD087705E81ACB48EAD000000FFFFFFFFFFFFFFFFFF000000,\\n                    0x0D3B66F4D35EEE964BFAF0CAF95738FFFF0000FF000000FFFF0000FFFF00,\\n                    0x1E1E1E569CD6D2D1A2BA7FB54DC4AC00FFFFFFFF000000FF00FF00FF00FF,\\n                    0xBE3400015045020D22EABAACBE3400F9C233705860211A28346830F9C233\\n                ][(_seed & 7) >> 1];\\n                colorTheme = _seed & 1 == 0\\n                    ? colorTheme >> 0x78\\n                    : colorTheme & 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF;\\n            }\\n            attributes = string(\\n                abi.encodePacked(\\n                    attributes,\\n                    ',{\\\"trait_type\\\":\\\"Color Generation\\\",\\\"value\\\":\\\"',\\n                    tempAttribute,\\n                    '\\\"}'\\n                )\\n            );\\n            styles = string(\\n                abi.encodePacked(\\n                    styles,\\n                    \\\"--e:\\\",\\n                    toColorHexString(colorTheme >> 0x60),\\n                    \\\";--f:\\\",\\n                    toColorHexString((colorTheme >> 0x48) & 0xFFFFFF),\\n                    \\\";--g:\\\",\\n                    toColorHexString((colorTheme >> 0x30) & 0xFFFFFF),\\n                    \\\";--h:\\\",\\n                    toColorHexString((colorTheme >> 0x18) & 0xFFFFFF),\\n                    \\\";--i:\\\",\\n                    toColorHexString(colorTheme & 0xFFFFFF),\\n                    \\\";\\\"\\n                )\\n            );\\n        }\\n\\n        {\\n            string memory tempAttribute;\\n            styles = string(\\n                abi.encodePacked(\\n                    styles,\\n                    SVG_STYLES,\\n                    Strings.toString(12 / _numSquares),\\n                    \\\",1fr);grid-template-rows:repeat(\\\",\\n                    Strings.toString(12 / _numSquares),\\n                    \\\",1fr);transform:rotate(210deg)skew(-30deg)scaleY(0.864)}\\\"\\n                )\\n            );\\n            if (_numSquares != 12) {\\n                if (_pieceCaptured) {\\n                    tempAttribute = \\\"True\\\";\\n                    styles = string(\\n                        abi.encodePacked(\\n                            styles,\\n                            \\\".c>*:nth-child(3)>div{border: 1px solid black}\\\"\\n                        )\\n                    );\\n                } else {\\n                    tempAttribute = \\\"False\\\";\\n                }\\n                attributes = string(\\n                    abi.encodePacked(\\n                        attributes,\\n                        ',{\\\"trait_type\\\":\\\"Bit Border\\\",\\\"value\\\":\\\"',\\n                        tempAttribute,\\n                        '\\\"}'\\n                    )\\n                );\\n            }\\n        }\\n\\n        unchecked {\\n            for (uint256 i; i < 23; ++i) {\\n                styles = string(\\n                    abi.encodePacked(\\n                        styles,\\n                        \\\".r\\\",\\n                        i.toString(),\\n                        \\\"{top:calc(var(--o) + \\\",\\n                        i.toString(),\\n                        \\\"*(var(--n)/2 + var(--c)))}\\\"\\n                        \\\".c\\\",\\n                        i.toString(),\\n                        \\\"{left:calc(var(--p) \\\",\\n                        i < 11 ? \\\"-\\\" : \\\"+\\\",\\n                        \\\" 0.866*\\\",\\n                        i < 11 ? (11 - i).toString() : (i - 11).toString(),\\n                        \\\"*(var(--n) + var(--c)))}\\\"\\n                    )\\n                );\\n            }\\n\\n            string memory image;\\n            for (uint256 row; row < (_numSquares << 1) - 1; ++row) {\\n                uint256 tempCol = row <= _numSquares - 1\\n                    ? 11 - row\\n                    : 11 - ((_numSquares << 1) - 2 - row);\\n                for (\\n                    uint256 col = tempCol;\\n                    col <= (row <= _numSquares - 1\\n                        ? tempCol + (row << 1)\\n                        : tempCol + (((_numSquares << 1) - 2 - row) << 1));\\n                    col = col + 2\\n                ) {\\n                    image = string(\\n                        abi.encodePacked(\\n                            image,\\n                            getPillarHtml(_board, 12 / _numSquares, row, col)\\n                        )\\n                    );\\n                }\\n            }\\n\\n            return (\\n                Base64.encode(\\n                    abi.encodePacked(\\n                        styles,\\n                        \\\"</style><section>\\\",\\n                        image,\\n                        \\\"</section>\\\"\\n                    )\\n                ),\\n                attributes\\n            );\\n        }\\n    }\\n\\n    /// @notice Returns the HTML for a particular pillar within the image.\\n    /// @param _board The board after the player's and engine's move are played.\\n    /// @param _dim The dimension of the bits within a pillar.\\n    /// @param _row The row index of the pillar.\\n    /// @param _col The column index of the pillar.\\n    /// @return The HTML for the pillar described by the parameters.\\n    function getPillarHtml(uint256 _board, uint256 _dim, uint256 _row, uint256 _col)\\n        internal pure\\n        returns (string memory)\\n    {\\n        string memory pillar = string(\\n            abi.encodePacked(\\n                '<div class=\\\"c r',\\n                _row.toString(),\\n                \\\" c\\\",\\n                _col.toString(),\\n                '\\\"><div></div><div></div><div>'\\n            )\\n        );\\n\\n        uint256 x;\\n        uint256 y;\\n        uint256 colOffset;\\n        uint256 rowOffset;\\n        unchecked {\\n            for (\\n                uint256 subRow = _row * _dim + ((_dim - 1) << 1);\\n                subRow >= _row * _dim + (_dim - 1);\\n                --subRow\\n            ) {\\n                rowOffset = 0;\\n                uint256 tempSubCol = _col <= 11\\n                    ? 11 - _dim * (11 - _col) + colOffset\\n                    : 11 + _dim * (_col - 11) + colOffset;\\n                for (\\n                    uint256 subCol = tempSubCol;\\n                    subCol >= tempSubCol + 1 - _dim;\\n                    --subCol\\n                ) {\\n                    x = 11 - ((11 + subCol - (subRow - rowOffset)) >> 1);\\n                    y = 16 - ((subCol + subRow - rowOffset) >> 1);\\n                    pillar = string(\\n                        abi.encodePacked(\\n                            pillar,\\n                            '<div id=\\\"',\\n                            (\\n                                _board\\n                                >> (Chess.getAdjustedIndex(6 * (y >> 1) + (x >> 1)) << 2)\\n                                >> (((0xD8 >> ((x & 1) << 2)) >> ((y & 1) << 1)) & 3)\\n                            )\\n                            & 1 == 0\\n                                ? \\\"h\\\"\\n                                : \\\"i\\\",\\n                            '\\\"></div>'\\n                        )\\n                    );\\n                    rowOffset++;\\n                    if (subCol == 0) { break; }\\n                }\\n                colOffset++;\\n                if (subRow == 0) { break; }\\n            }\\n        }\\n\\n        return string(abi.encodePacked(pillar, \\\"</div></div>\\\"));\\n    }\\n\\n    /// @notice Draws out a move being played out on a board position as a string with unicode\\n    /// characters to represent pieces. Files and rows are labeled with standard algebraic\\n    /// notation. For example:\\n    /// ```\\n    /// 6 ♜ ♝ ♛ ♚ ♝ ♜\\n    /// 5 ♟ ♟ ♟ ♟ ♟ ♟\\n    /// 4 · · · · · ·\\n    /// 3 · · ♙ · · ·\\n    /// 2 ♙ ♙ * ♙ ♙ ♙\\n    /// 1 ♖ ♘ ♕ ♔ ♘ ♖\\n    ///  a b c d e f\\n    /// ```\\n    /// * indicates the square the piece moved from.\\n    /// @param _board The board the move is played on.\\n    /// @param _fromIndex The from index of the move.\\n    /// @return The string showing the move played out on the board.\\n    function drawMove(uint256 _board, uint256 _fromIndex) internal pure returns (string memory) {\\n        string memory boardString = \\\"```\\\\\\\\n\\\";\\n\\n        if (_board & 1 == 0) _board = _board.rotate();\\n        else _fromIndex = ((7 - (_fromIndex >> 3)) << 3) + (7 - (_fromIndex & 7));\\n\\n        for (\\n            uint256 index = 0x24A2CC34E4524D455665A6DC75E8628E4966A6AAECB6EC72CF4D76;\\n            index != 0;\\n            index >>= 6\\n        ) {\\n            uint256 indexToDraw = index & 0x3F;\\n            boardString = string(\\n                abi.encodePacked(\\n                    boardString,\\n                    indexToDraw & 7 == 6\\n                        ? string(abi.encodePacked(Strings.toString((indexToDraw >> 3)), \\\" \\\"))\\n                        : \\\"\\\",\\n                    indexToDraw == _fromIndex\\n                        ? \\\"*\\\"\\n                        : getPieceChar((_board >> (indexToDraw << 2)) & 0xF),\\n                    indexToDraw & 7 == 1 && indexToDraw != 9\\n                        ? \\\"\\\\\\\\n\\\"\\n                        : indexToDraw != 9\\n                            ? \\\" \\\"\\n                            : \\\"\\\"\\n                )\\n            );\\n        }\\n\\n        boardString = string(\\n            abi.encodePacked(\\n                boardString,\\n                \\\"\\\\\\\\n  a b c d e f\\\\\\\\n```\\\"\\n                )\\n            );\\n\\n        return boardString;\\n    }\\n\\n    /// @notice Computes the complement of 24-bit colors.\\n    /// @param _color A 24-bit color.\\n    /// @return The complement of `_color`.\\n    function complementColor(uint256 _color) internal pure returns (uint256) {\\n        unchecked {\\n            return 0xFFFFFF - _color;\\n        }\\n    }\\n\\n    /// @notice Darkens 24-bit colors.\\n    /// @param _color A 24-bit color.\\n    /// @param _num The number of shades to darken by.\\n    /// @return `_color` darkened `_num` times.\\n    function darkenColor(uint256 _color, uint256 _num) internal pure returns (uint256) {\\n        return (((_color >> 0x10) >> _num) << 0x10)\\n            | ((((_color >> 8) & 0xFF) >> _num) << 8)\\n            | ((_color & 0xFF) >> _num);\\n    }\\n\\n    /// @notice Brightens 24-bit colors.\\n    /// @param _color A 24-bit color.\\n    /// @param _num The number of tints to brighten by.\\n    /// @return `_color` brightened `_num` times.\\n    function brightenColor(uint256 _color, uint256 _num) internal pure returns (uint256) {\\n        unchecked {\\n            return ((0xFF - ((0xFF - (_color >> 0x10)) >> _num)) << 0x10)\\n                | ((0xFF - ((0xFF - ((_color >> 8) & 0xFF)) >> _num)) << 8)\\n                | (0xFF - ((0xFF - (_color & 0xFF)) >> _num));\\n        }\\n    }\\n\\n    /// @notice Returns the color hex string of a 24-bit color.\\n    /// @param _integer A 24-bit color.\\n    /// @return The color hex string of `_integer`.\\n    function toColorHexString(uint256 _integer) internal pure returns (string memory) {\\n        return string(\\n            abi.encodePacked(\\n                \\\"#\\\",\\n                HEXADECIMAL_DIGITS[(_integer >> 0x14) & 0xF],\\n                HEXADECIMAL_DIGITS[(_integer >> 0x10) & 0xF],\\n                HEXADECIMAL_DIGITS[(_integer >> 0xC) & 0xF],\\n                HEXADECIMAL_DIGITS[(_integer >> 8) & 0xF],\\n                HEXADECIMAL_DIGITS[(_integer >> 4) & 0xF],\\n                HEXADECIMAL_DIGITS[_integer & 0xF]\\n            )\\n        );\\n    }\\n\\n    /// @notice Maps piece type to its corresponding name.\\n    /// @param _type A piece type defined in {Chess}.\\n    /// @return The name corresponding to `_type`.\\n    function getPieceName(uint256 _type) internal pure returns (string memory) {\\n        if (_type == 1) return \\\"pawn\\\";\\n        else if (_type == 2) return \\\"bishop\\\";\\n        else if (_type == 3) return \\\"rook\\\";\\n        else if (_type == 4) return \\\"knight\\\";\\n        else if (_type == 5) return \\\"queen\\\";\\n        return \\\"king\\\";\\n    }\\n\\n    /// @notice Converts a position's index to algebraic notation.\\n    /// @param _index The index of the position.\\n    /// @param _isWhite Whether the piece is being determined for a white piece or not.\\n    /// @return The algebraic notation of `_index`.\\n    function indexToPosition(uint256 _index, bool _isWhite) internal pure returns (string memory) {\\n        unchecked {\\n            return _isWhite\\n                ? string(\\n                    abi.encodePacked(\\n                        FILE_NAMES[6 - (_index & 7)],\\n                        Strings.toString(_index >> 3))\\n                )\\n                : string(\\n                    abi.encodePacked(\\n                        FILE_NAMES[(_index & 7) - 1],\\n                        Strings.toString(7 - (_index >> 3))\\n                    )\\n                );\\n        }\\n    }\\n\\n    /// @notice Maps pieces to its corresponding unicode character.\\n    /// @param _piece A piece.\\n    /// @return The unicode character corresponding to `_piece`. It returns ``.'' otherwise.\\n    function getPieceChar(uint256 _piece) internal pure returns (string memory) {\\n        if (_piece == 1) return unicode\\\"♟\\\";\\n        if (_piece == 2) return unicode\\\"♝\\\";\\n        if (_piece == 3) return unicode\\\"♜\\\";\\n        if (_piece == 4) return unicode\\\"♞\\\";\\n        if (_piece == 5) return unicode\\\"♛\\\";\\n        if (_piece == 6) return unicode\\\"♚\\\";\\n        if (_piece == 9) return unicode\\\"♙\\\";\\n        if (_piece == 0xA) return unicode\\\"♗\\\";\\n        if (_piece == 0xB) return unicode\\\"♖\\\";\\n        if (_piece == 0xC) return unicode\\\"♘\\\";\\n        if (_piece == 0xD) return unicode\\\"♕\\\";\\n        if (_piece == 0xE) return unicode\\\"♔\\\";\\n        return unicode\\\"·\\\";\\n    }\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/token/ERC721/IERC721.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.0 (token/ERC721/IERC721.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../../utils/introspection/IERC165.sol\\\";\\n\\n/**\\n * @dev Required interface of an ERC721 compliant contract.\\n */\\ninterface IERC721 is IERC165 {\\n    /**\\n     * @dev Emitted when `tokenId` token is transferred from `from` to `to`.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 indexed tokenId);\\n\\n    /**\\n     * @dev Emitted when `owner` enables `approved` to manage the `tokenId` token.\\n     */\\n    event Approval(address indexed owner, address indexed approved, uint256 indexed tokenId);\\n\\n    /**\\n     * @dev Emitted when `owner` enables or disables (`approved`) `operator` to manage all of its assets.\\n     */\\n    event ApprovalForAll(address indexed owner, address indexed operator, bool approved);\\n\\n    /**\\n     * @dev Returns the number of tokens in ``owner``'s account.\\n     */\\n    function balanceOf(address owner) external view returns (uint256 balance);\\n\\n    /**\\n     * @dev Returns the owner of the `tokenId` token.\\n     *\\n     * Requirements:\\n     *\\n     * - `tokenId` must exist.\\n     */\\n    function ownerOf(uint256 tokenId) external view returns (address owner);\\n\\n    /**\\n     * @dev Safely transfers `tokenId` token from `from` to `to`, checking first that contract recipients\\n     * are aware of the ERC721 protocol to prevent tokens from being forever locked.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` cannot be the zero address.\\n     * - `to` cannot be the zero address.\\n     * - `tokenId` token must exist and be owned by `from`.\\n     * - If the caller is not `from`, it must be have been allowed to move this token by either {approve} or {setApprovalForAll}.\\n     * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function safeTransferFrom(\\n        address from,\\n        address to,\\n        uint256 tokenId\\n    ) external;\\n\\n    /**\\n     * @dev Transfers `tokenId` token from `from` to `to`.\\n     *\\n     * WARNING: Usage of this method is discouraged, use {safeTransferFrom} whenever possible.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` cannot be the zero address.\\n     * - `to` cannot be the zero address.\\n     * - `tokenId` token must be owned by `from`.\\n     * - If the caller is not `from`, it must be approved to move this token by either {approve} or {setApprovalForAll}.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(\\n        address from,\\n        address to,\\n        uint256 tokenId\\n    ) external;\\n\\n    /**\\n     * @dev Gives permission to `to` to transfer `tokenId` token to another account.\\n     * The approval is cleared when the token is transferred.\\n     *\\n     * Only a single account can be approved at a time, so approving the zero address clears previous approvals.\\n     *\\n     * Requirements:\\n     *\\n     * - The caller must own the token or be an approved operator.\\n     * - `tokenId` must exist.\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address to, uint256 tokenId) external;\\n\\n    /**\\n     * @dev Returns the account approved for `tokenId` token.\\n     *\\n     * Requirements:\\n     *\\n     * - `tokenId` must exist.\\n     */\\n    function getApproved(uint256 tokenId) external view returns (address operator);\\n\\n    /**\\n     * @dev Approve or remove `operator` as an operator for the caller.\\n     * Operators can call {transferFrom} or {safeTransferFrom} for any token owned by the caller.\\n     *\\n     * Requirements:\\n     *\\n     * - The `operator` cannot be the caller.\\n     *\\n     * Emits an {ApprovalForAll} event.\\n     */\\n    function setApprovalForAll(address operator, bool _approved) external;\\n\\n    /**\\n     * @dev Returns if the `operator` is allowed to manage all of the assets of `owner`.\\n     *\\n     * See {setApprovalForAll}\\n     */\\n    function isApprovedForAll(address owner, address operator) external view returns (bool);\\n\\n    /**\\n     * @dev Safely transfers `tokenId` token from `from` to `to`.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` cannot be the zero address.\\n     * - `to` cannot be the zero address.\\n     * - `tokenId` token must exist and be owned by `from`.\\n     * - If the caller is not `from`, it must be approved to move this token by either {approve} or {setApprovalForAll}.\\n     * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function safeTransferFrom(\\n        address from,\\n        address to,\\n        uint256 tokenId,\\n        bytes calldata data\\n    ) external;\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/token/ERC721/IERC721Receiver.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.0 (token/ERC721/IERC721Receiver.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @title ERC721 token receiver interface\\n * @dev Interface for any contract that wants to support safeTransfers\\n * from ERC721 asset contracts.\\n */\\ninterface IERC721Receiver {\\n    /**\\n     * @dev Whenever an {IERC721} `tokenId` token is transferred to this contract via {IERC721-safeTransferFrom}\\n     * by `operator` from `from`, this function is called.\\n     *\\n     * It must return its Solidity selector to confirm the token transfer.\\n     * If any other value is returned or the interface is not implemented by the recipient, the transfer will be reverted.\\n     *\\n     * The selector can be obtained in Solidity with `IERC721.onERC721Received.selector`.\\n     */\\n    function onERC721Received(\\n        address operator,\\n        address from,\\n        uint256 tokenId,\\n        bytes calldata data\\n    ) external returns (bytes4);\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/token/ERC721/extensions/IERC721Metadata.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.0 (token/ERC721/extensions/IERC721Metadata.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../IERC721.sol\\\";\\n\\n/**\\n * @title ERC-721 Non-Fungible Token Standard, optional metadata extension\\n * @dev See https://eips.ethereum.org/EIPS/eip-721\\n */\\ninterface IERC721Metadata is IERC721 {\\n    /**\\n     * @dev Returns the token collection name.\\n     */\\n    function name() external view returns (string memory);\\n\\n    /**\\n     * @dev Returns the token collection symbol.\\n     */\\n    function symbol() external view returns (string memory);\\n\\n    /**\\n     * @dev Returns the Uniform Resource Identifier (URI) for `tokenId` token.\\n     */\\n    function tokenURI(uint256 tokenId) external view returns (string memory);\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/utils/Address.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.0 (utils/Address.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Collection of functions related to the address type\\n */\\nlibrary Address {\\n    /**\\n     * @dev Returns true if `account` is a contract.\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * It is unsafe to assume that an address for which this function returns\\n     * false is an externally-owned account (EOA) and not a contract.\\n     *\\n     * Among others, `isContract` will return false for the following\\n     * types of addresses:\\n     *\\n     *  - an externally-owned account\\n     *  - a contract in construction\\n     *  - an address where a contract will be created\\n     *  - an address where a contract lived, but was destroyed\\n     * ====\\n     */\\n    function isContract(address account) internal view returns (bool) {\\n        // This method relies on extcodesize, which returns 0 for contracts in\\n        // construction, since the code is only stored at the end of the\\n        // constructor execution.\\n\\n        uint256 size;\\n        assembly {\\n            size := extcodesize(account)\\n        }\\n        return size > 0;\\n    }\\n\\n    /**\\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\\n     * `recipient`, forwarding all available gas and reverting on errors.\\n     *\\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\\n     * imposed by `transfer`, making them unable to receive funds via\\n     * `transfer`. {sendValue} removes this limitation.\\n     *\\n     * https://diligence.consensys.net/posts/2019/09/stop-using-soliditys-transfer-now/[Learn more].\\n     *\\n     * IMPORTANT: because control is transferred to `recipient`, care must be\\n     * taken to not create reentrancy vulnerabilities. Consider using\\n     * {ReentrancyGuard} or the\\n     * https://solidity.readthedocs.io/en/v0.5.11/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\\n     */\\n    function sendValue(address payable recipient, uint256 amount) internal {\\n        require(address(this).balance >= amount, \\\"Address: insufficient balance\\\");\\n\\n        (bool success, ) = recipient.call{value: amount}(\\\"\\\");\\n        require(success, \\\"Address: unable to send value, recipient may have reverted\\\");\\n    }\\n\\n    /**\\n     * @dev Performs a Solidity function call using a low level `call`. A\\n     * plain `call` is an unsafe replacement for a function call: use this\\n     * function instead.\\n     *\\n     * If `target` reverts with a revert reason, it is bubbled up by this\\n     * function (like regular Solidity function calls).\\n     *\\n     * Returns the raw returned data. To convert to the expected return value,\\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\\n     *\\n     * Requirements:\\n     *\\n     * - `target` must be a contract.\\n     * - calling `target` with `data` must not revert.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionCall(target, data, \\\"Address: low-level call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\\n     * `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, 0, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but also transferring `value` wei to `target`.\\n     *\\n     * Requirements:\\n     *\\n     * - the calling contract must have an ETH balance of at least `value`.\\n     * - the called Solidity function must be `payable`.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, value, \\\"Address: low-level call with value failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\\n     * with `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        require(address(this).balance >= value, \\\"Address: insufficient balance for call\\\");\\n        require(isContract(target), \\\"Address: call to non-contract\\\");\\n\\n        (bool success, bytes memory returndata) = target.call{value: value}(data);\\n        return verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\\n        return functionStaticCall(target, data, \\\"Address: low-level static call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal view returns (bytes memory) {\\n        require(isContract(target), \\\"Address: static call to non-contract\\\");\\n\\n        (bool success, bytes memory returndata) = target.staticcall(data);\\n        return verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionDelegateCall(target, data, \\\"Address: low-level delegate call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        require(isContract(target), \\\"Address: delegate call to non-contract\\\");\\n\\n        (bool success, bytes memory returndata) = target.delegatecall(data);\\n        return verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Tool to verifies that a low level call was successful, and revert if it wasn't, either by bubbling the\\n     * revert reason using the provided one.\\n     *\\n     * _Available since v4.3._\\n     */\\n    function verifyCallResult(\\n        bool success,\\n        bytes memory returndata,\\n        string memory errorMessage\\n    ) internal pure returns (bytes memory) {\\n        if (success) {\\n            return returndata;\\n        } else {\\n            // Look for revert reason and bubble it up if present\\n            if (returndata.length > 0) {\\n                // The easiest way to bubble the revert reason is using memory via assembly\\n\\n                assembly {\\n                    let returndata_size := mload(returndata)\\n                    revert(add(32, returndata), returndata_size)\\n                }\\n            } else {\\n                revert(errorMessage);\\n            }\\n        }\\n    }\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/utils/Context.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.0 (utils/Context.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Provides information about the current execution context, including the\\n * sender of the transaction and its data. While these are generally available\\n * via msg.sender and msg.data, they should not be accessed in such a direct\\n * manner, since when dealing with meta-transactions the account sending and\\n * paying for execution may not be the actual sender (as far as an application\\n * is concerned).\\n *\\n * This contract is only required for intermediate, library-like contracts.\\n */\\nabstract contract Context {\\n    function _msgSender() internal view virtual returns (address) {\\n        return msg.sender;\\n    }\\n\\n    function _msgData() internal view virtual returns (bytes calldata) {\\n        return msg.data;\\n    }\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/utils/introspection/ERC165.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.0 (utils/introspection/ERC165.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"./IERC165.sol\\\";\\n\\n/**\\n * @dev Implementation of the {IERC165} interface.\\n *\\n * Contracts that want to implement ERC165 should inherit from this contract and override {supportsInterface} to check\\n * for the additional interface id that will be supported. For example:\\n *\\n * ```solidity\\n * function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {\\n *     return interfaceId == type(MyInterface).interfaceId || super.supportsInterface(interfaceId);\\n * }\\n * ```\\n *\\n * Alternatively, {ERC165Storage} provides an easier to use but more expensive implementation.\\n */\\nabstract contract ERC165 is IERC165 {\\n    /**\\n     * @dev See {IERC165-supportsInterface}.\\n     */\\n    function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {\\n        return interfaceId == type(IERC165).interfaceId;\\n    }\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/utils/introspection/IERC165.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.0 (utils/introspection/IERC165.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC165 standard, as defined in the\\n * https://eips.ethereum.org/EIPS/eip-165[EIP].\\n *\\n * Implementers can declare support of contract interfaces, which can then be\\n * queried by others ({ERC165Checker}).\\n *\\n * For an implementation, see {ERC165}.\\n */\\ninterface IERC165 {\\n    /**\\n     * @dev Returns true if this contract implements the interface defined by\\n     * `interfaceId`. See the corresponding\\n     * https://eips.ethereum.org/EIPS/eip-165#how-interfaces-are-identified[EIP section]\\n     * to learn more about how these ids are created.\\n     *\\n     * This function call must use less than 30 000 gas.\\n     */\\n    function supportsInterface(bytes4 interfaceId) external view returns (bool);\\n}\\n\"\r\n    },\r\n    \"contracts/Base64.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.9;\\n\\n/// @title Base64\\n/// @author Brecht Devos - <brecht@loopring.org>\\n/// @notice Provides a function for encoding some bytes in base64\\nlibrary Base64 {\\n    string internal constant TABLE = \\\"ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz012345678\\\"\\n        \\\"9+/\\\";\\n\\n    function encode(bytes memory data) internal pure returns (string memory) {\\n        if (data.length == 0) return \\\"\\\";\\n        string memory table = TABLE;\\n        uint256 encodedLength = ((data.length + 2) / 3) << 2;\\n        string memory result = new string(encodedLength + 0x20);\\n\\n        assembly {\\n            mstore(result, encodedLength)\\n            let tablePtr := add(table, 1)\\n            let dataPtr := data\\n            let endPtr := add(dataPtr, mload(data))\\n            let resultPtr := add(result, 0x20)\\n            for {} lt(dataPtr, endPtr) {}\\n            {\\n               dataPtr := add(dataPtr, 3)\\n               let input := mload(dataPtr)\\n               mstore(resultPtr, shl(0xF8, mload(add(tablePtr, and(shr(0x12, input), 0x3F)))))\\n               resultPtr := add(resultPtr, 1)\\n               mstore(resultPtr, shl(0xF8, mload(add(tablePtr, and(shr(0xC, input), 0x3F)))))\\n               resultPtr := add(resultPtr, 1)\\n               mstore(resultPtr, shl(0xF8, mload(add(tablePtr, and(shr(6, input), 0x3F)))))\\n               resultPtr := add(resultPtr, 1)\\n               mstore(resultPtr, shl(0xF8, mload(add(tablePtr, and(input, 0x3F)))))\\n               resultPtr := add(resultPtr, 1)\\n            }\\n            switch mod(mload(data), 3)\\n            case 1 { mstore(sub(resultPtr, 2), shl(0xF0, 0x3D3D)) }\\n            case 2 { mstore(sub(resultPtr, 1), shl(0xF8, 0x3D)) }\\n        }\\n\\n        return result;\\n    }\\n}\\n\"\r\n    }\r\n  },\r\n  \"settings\": {\r\n    \"optimizer\": {\r\n      \"enabled\": true,\r\n      \"runs\": 500\r\n    },\r\n    \"outputSelection\": {\r\n      \"*\": {\r\n        \"*\": [\r\n          \"evm.bytecode\",\r\n          \"evm.deployedBytecode\",\r\n          \"devdoc\",\r\n          \"userdoc\",\r\n          \"metadata\",\r\n          \"abi\"\r\n        ]\r\n      }\r\n    },\r\n    \"libraries\": {}\r\n  }\r\n}}","ABI":"[{\"inputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"approved\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"Approval\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"operator\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"bool\",\"name\":\"approved\",\"type\":\"bool\"}],\"name\":\"ApprovalForAll\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"Transfer\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_tokenId\",\"type\":\"uint256\"}],\"name\":\"_tokenURI\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"approve\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"board\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"getApproved\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"operator\",\"type\":\"address\"}],\"name\":\"isApprovedForAll\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_move\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_depth\",\"type\":\"uint256\"}],\"name\":\"mintMove\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"name\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"ownerOf\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"safeTransferFrom\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"},{\"internalType\":\"bytes\",\"name\":\"_data\",\"type\":\"bytes\"}],\"name\":\"safeTransferFrom\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"operator\",\"type\":\"address\"},{\"internalType\":\"bool\",\"name\":\"approved\",\"type\":\"bool\"}],\"name\":\"setApprovalForAll\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"string\",\"name\":\"_baseURI\",\"type\":\"string\"}],\"name\":\"setBaseURI\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes4\",\"name\":\"interfaceId\",\"type\":\"bytes4\"}],\"name\":\"supportsInterface\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"symbol\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"tokenInternalIds\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"tokenMoves\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"board\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"metadata\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_tokenId\",\"type\":\"uint256\"}],\"name\":\"tokenURI\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalSupply\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"transferFrom\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}]","ContractName":"fiveoutofnine","CompilerVersion":"v0.8.9+commit.e5eed63a","OptimizationUsed":"1","Runs":"500","ConstructorArguments":"","EVMVersion":"Default","Library":"","LicenseType":"","Proxy":"0","Implementation":"","SwarmSource":""}]}