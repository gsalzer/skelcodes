{"status":"1","message":"OK","result":[{"SourceCode":"{\"Address.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Collection of functions related to the address type\\n */\\nlibrary Address {\\n    /**\\n     * @dev Returns true if `account` is a contract.\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * It is unsafe to assume that an address for which this function returns\\n     * false is an externally-owned account (EOA) and not a contract.\\n     *\\n     * Among others, `isContract` will return false for the following\\n     * types of addresses:\\n     *\\n     *  - an externally-owned account\\n     *  - a contract in construction\\n     *  - an address where a contract will be created\\n     *  - an address where a contract lived, but was destroyed\\n     * ====\\n     */\\n    function isContract(address account) internal view returns (bool) {\\n        // This method relies on extcodesize, which returns 0 for contracts in\\n        // construction, since the code is only stored at the end of the\\n        // constructor execution.\\n\\n        uint256 size;\\n        assembly {\\n            size := extcodesize(account)\\n        }\\n        return size \\u003e 0;\\n    }\\n\\n    /**\\n     * @dev Replacement for Solidity\\u0027s `transfer`: sends `amount` wei to\\n     * `recipient`, forwarding all available gas and reverting on errors.\\n     *\\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\\n     * imposed by `transfer`, making them unable to receive funds via\\n     * `transfer`. {sendValue} removes this limitation.\\n     *\\n     * https://diligence.consensys.net/posts/2019/09/stop-using-soliditys-transfer-now/[Learn more].\\n     *\\n     * IMPORTANT: because control is transferred to `recipient`, care must be\\n     * taken to not create reentrancy vulnerabilities. Consider using\\n     * {ReentrancyGuard} or the\\n     * https://solidity.readthedocs.io/en/v0.5.11/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\\n     */\\n    function sendValue(address payable recipient, uint256 amount) internal {\\n        require(address(this).balance \\u003e= amount, \\\"Address: insufficient balance\\\");\\n\\n        (bool success, ) = recipient.call{value: amount}(\\\"\\\");\\n        require(success, \\\"Address: unable to send value, recipient may have reverted\\\");\\n    }\\n\\n    /**\\n     * @dev Performs a Solidity function call using a low level `call`. A\\n     * plain `call` is an unsafe replacement for a function call: use this\\n     * function instead.\\n     *\\n     * If `target` reverts with a revert reason, it is bubbled up by this\\n     * function (like regular Solidity function calls).\\n     *\\n     * Returns the raw returned data. To convert to the expected return value,\\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\\n     *\\n     * Requirements:\\n     *\\n     * - `target` must be a contract.\\n     * - calling `target` with `data` must not revert.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionCall(target, data, \\\"Address: low-level call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\\n     * `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, 0, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but also transferring `value` wei to `target`.\\n     *\\n     * Requirements:\\n     *\\n     * - the calling contract must have an ETH balance of at least `value`.\\n     * - the called Solidity function must be `payable`.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, value, \\\"Address: low-level call with value failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\\n     * with `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        require(address(this).balance \\u003e= value, \\\"Address: insufficient balance for call\\\");\\n        require(isContract(target), \\\"Address: call to non-contract\\\");\\n\\n        (bool success, bytes memory returndata) = target.call{value: value}(data);\\n        return verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\\n        return functionStaticCall(target, data, \\\"Address: low-level static call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal view returns (bytes memory) {\\n        require(isContract(target), \\\"Address: static call to non-contract\\\");\\n\\n        (bool success, bytes memory returndata) = target.staticcall(data);\\n        return verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionDelegateCall(target, data, \\\"Address: low-level delegate call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        require(isContract(target), \\\"Address: delegate call to non-contract\\\");\\n\\n        (bool success, bytes memory returndata) = target.delegatecall(data);\\n        return verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Tool to verifies that a low level call was successful, and revert if it wasn\\u0027t, either by bubbling the\\n     * revert reason using the provided one.\\n     *\\n     * _Available since v4.3._\\n     */\\n    function verifyCallResult(\\n        bool success,\\n        bytes memory returndata,\\n        string memory errorMessage\\n    ) internal pure returns (bytes memory) {\\n        if (success) {\\n            return returndata;\\n        } else {\\n            // Look for revert reason and bubble it up if present\\n            if (returndata.length \\u003e 0) {\\n                // The easiest way to bubble the revert reason is using memory via assembly\\n\\n                assembly {\\n                    let returndata_size := mload(returndata)\\n                    revert(add(32, returndata), returndata_size)\\n                }\\n            } else {\\n                revert(errorMessage);\\n            }\\n        }\\n    }\\n}\\n\"},\"Context.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Provides information about the current execution context, including the\\n * sender of the transaction and its data. While these are generally available\\n * via msg.sender and msg.data, they should not be accessed in such a direct\\n * manner, since when dealing with meta-transactions the account sending and\\n * paying for execution may not be the actual sender (as far as an application\\n * is concerned).\\n *\\n * This contract is only required for intermediate, library-like contracts.\\n */\\nabstract contract Context {\\n    function _msgSender() internal view virtual returns (address) {\\n        return msg.sender;\\n    }\\n\\n    function _msgData() internal view virtual returns (bytes calldata) {\\n        return msg.data;\\n    }\\n}\\n\"},\"ERC1155.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"./IERC1155.sol\\\";\\nimport \\\"./IERC1155Receiver.sol\\\";\\nimport \\\"./IERC1155MetadataURI.sol\\\";\\nimport \\\"./Address.sol\\\";\\nimport \\\"./Context.sol\\\";\\nimport \\\"./ERC165.sol\\\";\\n\\n/**\\n * @dev Implementation of the basic standard multi-token.\\n * See https://eips.ethereum.org/EIPS/eip-1155\\n * Originally based on code by Enjin: https://github.com/enjin/erc-1155\\n *\\n * _Available since v3.1._\\n */\\ncontract ERC1155 is Context, ERC165, IERC1155, IERC1155MetadataURI {\\n    using Address for address;\\n\\n    // Mapping from token ID to account balances\\n    mapping(uint256 =\\u003e mapping(address =\\u003e uint256)) internal _balances;\\n\\n    // Mapping from account to operator approvals\\n    mapping(address =\\u003e mapping(address =\\u003e bool)) private _operatorApprovals;\\n\\n    /**\\n     * @dev See {IERC165-supportsInterface}.\\n     */\\n    function supportsInterface(bytes4 interfaceId) public view virtual override(ERC165, IERC165) returns (bool) {\\n        return\\n            interfaceId == type(IERC1155).interfaceId ||\\n            interfaceId == type(IERC1155MetadataURI).interfaceId ||\\n            super.supportsInterface(interfaceId);\\n    }\\n\\n    /**\\n     * @dev See {IERC1155MetadataURI-uri}.\\n     *\\n     * This implementation returns the same URI for *all* token types. It relies\\n     * on the token type ID substitution mechanism\\n     * https://eips.ethereum.org/EIPS/eip-1155#metadata[defined in the EIP].\\n     *\\n     * Clients calling this function must replace the `\\\\{id\\\\}` substring with the\\n     * actual token type ID.\\n     */\\n    function uri(uint256) public view virtual override returns (string memory) {\\n        return \\\"\\\";\\n    }\\n\\n    /**\\n     * @dev See {IERC1155-balanceOf}.\\n     *\\n     * Requirements:\\n     *\\n     * - `account` cannot be the zero address.\\n     */\\n    function balanceOf(address account, uint256 id) public view virtual override returns (uint256) {\\n        require(account != address(0), \\\"ERC1155: balance query for the zero address\\\");\\n        return _balances[id][account];\\n    }\\n\\n    /**\\n     * @dev See {IERC1155-balanceOfBatch}.\\n     *\\n     * Requirements:\\n     *\\n     * - `accounts` and `ids` must have the same length.\\n     */\\n    function balanceOfBatch(address[] memory accounts, uint256[] memory ids)\\n        public\\n        view\\n        virtual\\n        override\\n        returns (uint256[] memory)\\n    {\\n        require(accounts.length == ids.length, \\\"ERC1155: accounts and ids length mismatch\\\");\\n\\n        uint256[] memory batchBalances = new uint256[](accounts.length);\\n\\n        for (uint256 i = 0; i \\u003c accounts.length; ++i) {\\n            batchBalances[i] = balanceOf(accounts[i], ids[i]);\\n        }\\n\\n        return batchBalances;\\n    }\\n\\n    /**\\n     * @dev See {IERC1155-setApprovalForAll}.\\n     */\\n    function setApprovalForAll(address operator, bool approved) public virtual override {\\n        require(_msgSender() != operator, \\\"ERC1155: setting approval status for self\\\");\\n\\n        _operatorApprovals[_msgSender()][operator] = approved;\\n        emit ApprovalForAll(_msgSender(), operator, approved);\\n    }\\n\\n    /**\\n     * @dev See {IERC1155-isApprovedForAll}.\\n     */\\n    function isApprovedForAll(address account, address operator) public view virtual override returns (bool) {\\n        return _operatorApprovals[account][operator];\\n    }\\n\\n    /**\\n     * @dev See {IERC1155-safeTransferFrom}.\\n     */\\n    function safeTransferFrom(\\n        address from,\\n        address to,\\n        uint256 id,\\n        uint256 amount,\\n        bytes memory data\\n    ) public virtual override {\\n        require(\\n            from == _msgSender() || isApprovedForAll(from, _msgSender()),\\n            \\\"ERC1155: caller is not owner nor approved\\\"\\n        );\\n        _safeTransferFrom(from, to, id, amount, data);\\n    }\\n\\n    /**\\n     * @dev See {IERC1155-safeBatchTransferFrom}.\\n     */\\n    function safeBatchTransferFrom(\\n        address from,\\n        address to,\\n        uint256[] memory ids,\\n        uint256[] memory amounts,\\n        bytes memory data\\n    ) public virtual override {\\n        require(\\n            from == _msgSender() || isApprovedForAll(from, _msgSender()),\\n            \\\"ERC1155: transfer caller is not owner nor approved\\\"\\n        );\\n        _safeBatchTransferFrom(from, to, ids, amounts, data);\\n    }\\n\\n    /**\\n     * @dev Transfers `amount` tokens of token type `id` from `from` to `to`.\\n     *\\n     * Emits a {TransferSingle} event.\\n     *\\n     * Requirements:\\n     *\\n     * - `to` cannot be the zero address.\\n     * - `from` must have a balance of tokens of type `id` of at least `amount`.\\n     * - If `to` refers to a smart contract, it must implement {IERC1155Receiver-onERC1155Received} and return the\\n     * acceptance magic value.\\n     */\\n    function _safeTransferFrom(\\n        address from,\\n        address to,\\n        uint256 id,\\n        uint256 amount,\\n        bytes memory data\\n    ) internal virtual {\\n        require(to != address(0), \\\"ERC1155: transfer to the zero address\\\");\\n\\n        address operator = _msgSender();\\n\\n        _beforeTokenTransfer(operator, from, to, _asSingletonArray(id), _asSingletonArray(amount), data);\\n\\n        uint256 fromBalance = _balances[id][from];\\n        require(fromBalance \\u003e= amount, \\\"ERC1155: insufficient balance for transfer\\\");\\n        unchecked {\\n            _balances[id][from] = fromBalance - amount;\\n        }\\n        _balances[id][to] += amount;\\n\\n        emit TransferSingle(operator, from, to, id, amount);\\n\\n        _doSafeTransferAcceptanceCheck(operator, from, to, id, amount, data);\\n    }\\n\\n    /**\\n     * @dev xref:ROOT:erc1155.adoc#batch-operations[Batched] version of {_safeTransferFrom}.\\n     *\\n     * Emits a {TransferBatch} event.\\n     *\\n     * Requirements:\\n     *\\n     * - If `to` refers to a smart contract, it must implement {IERC1155Receiver-onERC1155BatchReceived} and return the\\n     * acceptance magic value.\\n     */\\n    function _safeBatchTransferFrom(\\n        address from,\\n        address to,\\n        uint256[] memory ids,\\n        uint256[] memory amounts,\\n        bytes memory data\\n    ) internal virtual {\\n        require(ids.length == amounts.length, \\\"ERC1155: ids and amounts length mismatch\\\");\\n        require(to != address(0), \\\"ERC1155: transfer to the zero address\\\");\\n\\n        address operator = _msgSender();\\n\\n        _beforeTokenTransfer(operator, from, to, ids, amounts, data);\\n\\n        for (uint256 i = 0; i \\u003c ids.length; ++i) {\\n            uint256 id = ids[i];\\n            uint256 amount = amounts[i];\\n\\n            uint256 fromBalance = _balances[id][from];\\n            require(fromBalance \\u003e= amount, \\\"ERC1155: insufficient balance for transfer\\\");\\n            unchecked {\\n                _balances[id][from] = fromBalance - amount;\\n            }\\n            _balances[id][to] += amount;\\n        }\\n\\n        emit TransferBatch(operator, from, to, ids, amounts);\\n\\n        _doSafeBatchTransferAcceptanceCheck(operator, from, to, ids, amounts, data);\\n    }\\n\\n    /**\\n     * @dev Creates `amount` tokens of token type `id`, and assigns them to `account`.\\n     *\\n     * Emits a {TransferSingle} event.\\n     *\\n     * Requirements:\\n     *\\n     * - `account` cannot be the zero address.\\n     * - If `account` refers to a smart contract, it must implement {IERC1155Receiver-onERC1155Received} and return the\\n     * acceptance magic value.\\n     */\\n    function _mint(\\n        address account,\\n        uint256 id,\\n        uint256 amount,\\n        bytes memory data\\n    ) internal virtual {\\n        require(account != address(0), \\\"ERC1155: mint to the zero address\\\");\\n\\n        address operator = _msgSender();\\n\\n        _beforeTokenTransfer(operator, address(0), account, _asSingletonArray(id), _asSingletonArray(amount), data);\\n\\n        _balances[id][account] += amount;\\n        emit TransferSingle(operator, address(0), account, id, amount);\\n\\n        _doSafeTransferAcceptanceCheck(operator, address(0), account, id, amount, data);\\n    }\\n\\n    /**\\n     * @dev xref:ROOT:erc1155.adoc#batch-operations[Batched] version of {_mint}.\\n     *\\n     * Requirements:\\n     *\\n     * - `ids` and `amounts` must have the same length.\\n     * - If `to` refers to a smart contract, it must implement {IERC1155Receiver-onERC1155BatchReceived} and return the\\n     * acceptance magic value.\\n     */\\n    function _mintBatch(\\n        address to,\\n        uint256[] memory ids,\\n        uint256[] memory amounts,\\n        bytes memory data\\n    ) internal virtual {\\n        require(to != address(0), \\\"ERC1155: mint to the zero address\\\");\\n        require(ids.length == amounts.length, \\\"ERC1155: ids and amounts length mismatch\\\");\\n\\n        address operator = _msgSender();\\n\\n        _beforeTokenTransfer(operator, address(0), to, ids, amounts, data);\\n\\n        for (uint256 i = 0; i \\u003c ids.length; i++) {\\n            _balances[ids[i]][to] += amounts[i];\\n        }\\n\\n        emit TransferBatch(operator, address(0), to, ids, amounts);\\n\\n        _doSafeBatchTransferAcceptanceCheck(operator, address(0), to, ids, amounts, data);\\n    }\\n\\n    /**\\n     * @dev Hook that is called before any token transfer. This includes minting\\n     * and burning, as well as batched variants.\\n     *\\n     * The same hook is called on both single and batched variants. For single\\n     * transfers, the length of the `id` and `amount` arrays will be 1.\\n     *\\n     * Calling conditions (for each `id` and `amount` pair):\\n     *\\n     * - When `from` and `to` are both non-zero, `amount` of ``from``\\u0027s tokens\\n     * of token type `id` will be  transferred to `to`.\\n     * - When `from` is zero, `amount` tokens of token type `id` will be minted\\n     * for `to`.\\n     * - when `to` is zero, `amount` of ``from``\\u0027s tokens of token type `id`\\n     * will be burned.\\n     * - `from` and `to` are never both zero.\\n     * - `ids` and `amounts` have the same, non-zero length.\\n     *\\n     * To learn more about hooks, head to xref:ROOT:extending-contracts.adoc#using-hooks[Using Hooks].\\n     */\\n    function _beforeTokenTransfer(\\n        address operator,\\n        address from,\\n        address to,\\n        uint256[] memory ids,\\n        uint256[] memory amounts,\\n        bytes memory data\\n    ) internal virtual {}\\n\\n    function _doSafeTransferAcceptanceCheck(\\n        address operator,\\n        address from,\\n        address to,\\n        uint256 id,\\n        uint256 amount,\\n        bytes memory data\\n    ) private {\\n        if (to.isContract()) {\\n            try IERC1155Receiver(to).onERC1155Received(operator, from, id, amount, data) returns (bytes4 response) {\\n                if (response != IERC1155Receiver.onERC1155Received.selector) {\\n                    revert(\\\"ERC1155: ERC1155Receiver rejected tokens\\\");\\n                }\\n            } catch Error(string memory reason) {\\n                revert(reason);\\n            } catch {\\n                revert(\\\"ERC1155: transfer to non ERC1155Receiver implementer\\\");\\n            }\\n        }\\n    }\\n\\n    function _doSafeBatchTransferAcceptanceCheck(\\n        address operator,\\n        address from,\\n        address to,\\n        uint256[] memory ids,\\n        uint256[] memory amounts,\\n        bytes memory data\\n    ) private {\\n        if (to.isContract()) {\\n            try IERC1155Receiver(to).onERC1155BatchReceived(operator, from, ids, amounts, data) returns (\\n                bytes4 response\\n            ) {\\n                if (response != IERC1155Receiver.onERC1155BatchReceived.selector) {\\n                    revert(\\\"ERC1155: ERC1155Receiver rejected tokens\\\");\\n                }\\n            } catch Error(string memory reason) {\\n                revert(reason);\\n            } catch {\\n                revert(\\\"ERC1155: transfer to non ERC1155Receiver implementer\\\");\\n            }\\n        }\\n    }\\n\\n    function _asSingletonArray(uint256 element) internal pure returns (uint256[] memory) {\\n        uint256[] memory array = new uint256[](1);\\n        array[0] = element;\\n\\n        return array;\\n    }\\n}\\n\"},\"ERC165.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"./IERC165.sol\\\";\\n\\n/**\\n * @dev Implementation of the {IERC165} interface.\\n *\\n * Contracts that want to implement ERC165 should inherit from this contract and override {supportsInterface} to check\\n * for the additional interface id that will be supported. For example:\\n *\\n * ```solidity\\n * function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {\\n *     return interfaceId == type(MyInterface).interfaceId || super.supportsInterface(interfaceId);\\n * }\\n * ```\\n *\\n * Alternatively, {ERC165Storage} provides an easier to use but more expensive implementation.\\n */\\nabstract contract ERC165 is IERC165 {\\n    /**\\n     * @dev See {IERC165-supportsInterface}.\\n     */\\n    function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {\\n        return interfaceId == type(IERC165).interfaceId;\\n    }\\n}\\n\"},\"IERC1155.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"./IERC165.sol\\\";\\n\\n/**\\n * @dev Required interface of an ERC1155 compliant contract, as defined in the\\n * https://eips.ethereum.org/EIPS/eip-1155[EIP].\\n *\\n * _Available since v3.1._\\n */\\ninterface IERC1155 is IERC165 {\\n    /**\\n     * @dev Emitted when `value` tokens of token type `id` are transferred from `from` to `to` by `operator`.\\n     */\\n    event TransferSingle(address indexed operator, address indexed from, address indexed to, uint256 id, uint256 value);\\n\\n    /**\\n     * @dev Equivalent to multiple {TransferSingle} events, where `operator`, `from` and `to` are the same for all\\n     * transfers.\\n     */\\n    event TransferBatch(\\n        address indexed operator,\\n        address indexed from,\\n        address indexed to,\\n        uint256[] ids,\\n        uint256[] values\\n    );\\n\\n    /**\\n     * @dev Emitted when `account` grants or revokes permission to `operator` to transfer their tokens, according to\\n     * `approved`.\\n     */\\n    event ApprovalForAll(address indexed account, address indexed operator, bool approved);\\n\\n    /**\\n     * @dev Emitted when the URI for token type `id` changes to `value`, if it is a non-programmatic URI.\\n     *\\n     * If an {URI} event was emitted for `id`, the standard\\n     * https://eips.ethereum.org/EIPS/eip-1155#metadata-extensions[guarantees] that `value` will equal the value\\n     * returned by {IERC1155MetadataURI-uri}.\\n     */\\n    event URI(string value, uint256 indexed id);\\n\\n    /**\\n     * @dev Returns the amount of tokens of token type `id` owned by `account`.\\n     *\\n     * Requirements:\\n     *\\n     * - `account` cannot be the zero address.\\n     */\\n    function balanceOf(address account, uint256 id) external view returns (uint256);\\n\\n    /**\\n     * @dev xref:ROOT:erc1155.adoc#batch-operations[Batched] version of {balanceOf}.\\n     *\\n     * Requirements:\\n     *\\n     * - `accounts` and `ids` must have the same length.\\n     */\\n    function balanceOfBatch(address[] calldata accounts, uint256[] calldata ids)\\n        external\\n        view\\n        returns (uint256[] memory);\\n\\n    /**\\n     * @dev Grants or revokes permission to `operator` to transfer the caller\\u0027s tokens, according to `approved`,\\n     *\\n     * Emits an {ApprovalForAll} event.\\n     *\\n     * Requirements:\\n     *\\n     * - `operator` cannot be the caller.\\n     */\\n    function setApprovalForAll(address operator, bool approved) external;\\n\\n    /**\\n     * @dev Returns true if `operator` is approved to transfer ``account``\\u0027s tokens.\\n     *\\n     * See {setApprovalForAll}.\\n     */\\n    function isApprovedForAll(address account, address operator) external view returns (bool);\\n\\n    /**\\n     * @dev Transfers `amount` tokens of token type `id` from `from` to `to`.\\n     *\\n     * Emits a {TransferSingle} event.\\n     *\\n     * Requirements:\\n     *\\n     * - `to` cannot be the zero address.\\n     * - If the caller is not `from`, it must be have been approved to spend ``from``\\u0027s tokens via {setApprovalForAll}.\\n     * - `from` must have a balance of tokens of type `id` of at least `amount`.\\n     * - If `to` refers to a smart contract, it must implement {IERC1155Receiver-onERC1155Received} and return the\\n     * acceptance magic value.\\n     */\\n    function safeTransferFrom(\\n        address from,\\n        address to,\\n        uint256 id,\\n        uint256 amount,\\n        bytes calldata data\\n    ) external;\\n\\n    /**\\n     * @dev xref:ROOT:erc1155.adoc#batch-operations[Batched] version of {safeTransferFrom}.\\n     *\\n     * Emits a {TransferBatch} event.\\n     *\\n     * Requirements:\\n     *\\n     * - `ids` and `amounts` must have the same length.\\n     * - If `to` refers to a smart contract, it must implement {IERC1155Receiver-onERC1155BatchReceived} and return the\\n     * acceptance magic value.\\n     */\\n    function safeBatchTransferFrom(\\n        address from,\\n        address to,\\n        uint256[] calldata ids,\\n        uint256[] calldata amounts,\\n        bytes calldata data\\n    ) external;\\n}\\n\"},\"IERC1155MetadataURI.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"./IERC1155.sol\\\";\\n\\n/**\\n * @dev Interface of the optional ERC1155MetadataExtension interface, as defined\\n * in the https://eips.ethereum.org/EIPS/eip-1155#metadata-extensions[EIP].\\n *\\n * _Available since v3.1._\\n */\\ninterface IERC1155MetadataURI is IERC1155 {\\n    /**\\n     * @dev Returns the URI for token type `id`.\\n     *\\n     * If the `\\\\{id\\\\}` substring is present in the URI, it must be replaced by\\n     * clients with the actual token type ID.\\n     */\\n    function uri(uint256 id) external view returns (string memory);\\n}\\n\"},\"IERC1155Receiver.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"./IERC165.sol\\\";\\n\\n/**\\n * @dev _Available since v3.1._\\n */\\ninterface IERC1155Receiver is IERC165 {\\n    /**\\n        @dev Handles the receipt of a single ERC1155 token type. This function is\\n        called at the end of a `safeTransferFrom` after the balance has been updated.\\n        To accept the transfer, this must return\\n        `bytes4(keccak256(\\\"onERC1155Received(address,address,uint256,uint256,bytes)\\\"))`\\n        (i.e. 0xf23a6e61, or its own function selector).\\n        @param operator The address which initiated the transfer (i.e. msg.sender)\\n        @param from The address which previously owned the token\\n        @param id The ID of the token being transferred\\n        @param value The amount of tokens being transferred\\n        @param data Additional data with no specified format\\n        @return `bytes4(keccak256(\\\"onERC1155Received(address,address,uint256,uint256,bytes)\\\"))` if transfer is allowed\\n    */\\n    function onERC1155Received(\\n        address operator,\\n        address from,\\n        uint256 id,\\n        uint256 value,\\n        bytes calldata data\\n    ) external returns (bytes4);\\n\\n    /**\\n        @dev Handles the receipt of a multiple ERC1155 token types. This function\\n        is called at the end of a `safeBatchTransferFrom` after the balances have\\n        been updated. To accept the transfer(s), this must return\\n        `bytes4(keccak256(\\\"onERC1155BatchReceived(address,address,uint256[],uint256[],bytes)\\\"))`\\n        (i.e. 0xbc197c81, or its own function selector).\\n        @param operator The address which initiated the batch transfer (i.e. msg.sender)\\n        @param from The address which previously owned the token\\n        @param ids An array containing ids of each token being transferred (order and length must match values array)\\n        @param values An array containing amounts of each token being transferred (order and length must match ids array)\\n        @param data Additional data with no specified format\\n        @return `bytes4(keccak256(\\\"onERC1155BatchReceived(address,address,uint256[],uint256[],bytes)\\\"))` if transfer is allowed\\n    */\\n    function onERC1155BatchReceived(\\n        address operator,\\n        address from,\\n        uint256[] calldata ids,\\n        uint256[] calldata values,\\n        bytes calldata data\\n    ) external returns (bytes4);\\n}\\n\"},\"IERC165.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC165 standard, as defined in the\\n * https://eips.ethereum.org/EIPS/eip-165[EIP].\\n *\\n * Implementers can declare support of contract interfaces, which can then be\\n * queried by others ({ERC165Checker}).\\n *\\n * For an implementation, see {ERC165}.\\n */\\ninterface IERC165 {\\n    /**\\n     * @dev Returns true if this contract implements the interface defined by\\n     * `interfaceId`. See the corresponding\\n     * https://eips.ethereum.org/EIPS/eip-165#how-interfaces-are-identified[EIP section]\\n     * to learn more about how these ids are created.\\n     *\\n     * This function call must use less than 30 000 gas.\\n     */\\n    function supportsInterface(bytes4 interfaceId) external view returns (bool);\\n}\\n\"},\"ISwapMeet.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-3.0\\n\\n/// @title Interface for SwapMeet\\n\\npragma solidity ^0.8.6;\\n\\nimport { IERC1155 } from \\u0027./ERC1155.sol\\u0027;\\n\\ninterface IPaletteProvider {\\n    function palette(uint8) external view returns (bytes4[] memory);\\n}\\n\\ninterface ISwapMeet is IPaletteProvider, IERC1155 {\\n    function params(uint256 tokenId)\\n        external\\n        view\\n        returns (\\n            string memory,\\n            string memory,\\n            string memory,\\n            string memory,\\n            string memory,\\n            bytes4\\n        );\\n\\n    function fullname(uint256 tokenId) external view returns (string memory n);\\n\\n    function tokenRle(uint256 id, uint8 gender) external view returns (bytes memory);\\n\\n    function open(\\n        uint256 tokenId,\\n        address to,\\n        bytes memory data\\n    ) external;\\n\\n    function cost() external returns (uint256);\\n}\\n\"},\"MetadataBuilder.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-3.0\\n\\n/// @title A library used to convert multi-part RLE compressed images to SVG\\n/// From: https://raw.githubusercontent.com/nounsDAO/nouns-monorepo/master/packages/nouns-contracts/contracts/libs/MetadataBuilder.sol\\n\\npragma solidity ^0.8.6;\\n\\nimport { IPaletteProvider } from \\u0027./ISwapMeet.sol\\u0027;\\nimport { Base64, toString } from \\u0027./MetadataUtils.sol\\u0027;\\n\\nlibrary DisplayTypes {\\n    uint8 constant NONE = 0x0;\\n    uint8 constant RANKING = 0x1;\\n    uint8 constant NUMBER = 0x2;\\n    uint8 constant BOOST_PERCENT = 0x3;\\n    uint8 constant BOOST_NUMBER = 0x4;\\n    uint8 constant DATE = 0x5;\\n}\\n\\nlibrary Transform {\\n    function translate(\\n        int256 direction,\\n        bytes memory b,\\n        bytes32 offset\\n    ) internal pure returns (bytes memory) {\\n        assembly {\\n            mstore(add(b, 32), add(mload(add(b, 32)), mul(direction, offset)))\\n        }\\n        return b;\\n    }\\n}\\n\\nlibrary MetadataBuilder {\\n    bytes16 internal constant HEX = \\u00270123456789abcdef\\u0027;\\n\\n    struct Params {\\n        uint8 resolution;\\n        bytes4 color;\\n        bytes4 background;\\n        uint8[4] viewbox;\\n        string text;\\n        string subtext;\\n        string name;\\n        string description;\\n        string attributes;\\n        bytes[] parts;\\n    }\\n\\n    struct ContentBounds {\\n        uint8 top;\\n        uint8 right;\\n        uint8 bottom;\\n        uint8 left;\\n    }\\n\\n    struct Rect {\\n        uint8 length;\\n        uint8 colorIndex;\\n    }\\n\\n    struct DecodedImage {\\n        uint8 paletteIndex;\\n        ContentBounds bounds;\\n        Rect[] rects;\\n    }\\n\\n    /**\\n     * @notice Given RLE image parts and color palettes, merge to generate a single SVG image.\\n     */\\n    function generateSVG(Params memory params, IPaletteProvider paletteProvider)\\n        public\\n        view\\n        returns (string memory svg)\\n    {\\n        // prettier-ignore\\n        return string(\\n            abi.encodePacked(\\n                \\u0027\\u003csvg width=\\\"320\\\" height=\\\"320\\\" viewBox=\\\"\\u0027, generateViewbox(params.viewbox), \\u0027\\\" xmlns=\\\"http://www.w3.org/2000/svg\\\" shape-rendering=\\\"crispEdges\\\"\\u003e\\u0027,\\n                generateStyles(params),\\n                \\u0027\\u003crect width=\\\"320px\\\" height=\\\"320px\\\" fill=\\\"#\\u0027, toColor(params.background), \\u0027\\\" /\\u003e\\u0027,\\n                generateText(params), generateSVGRects(params, paletteProvider),\\n                \\u0027\\u003c/svg\\u003e\\u0027\\n            )\\n        );\\n    }\\n\\n    function generateViewbox(uint8[4] memory viewbox) private pure returns (string memory) {\\n        if (viewbox[0] == 0 \\u0026\\u0026 viewbox[1] == 0 \\u0026\\u0026 viewbox[2] == 0 \\u0026\\u0026 viewbox[3] == 0) {\\n            return \\u00270 0 320 320\\u0027;\\n        }\\n\\n        return\\n            string(\\n                abi.encodePacked(\\n                    toString(viewbox[0]),\\n                    \\u0027 \\u0027,\\n                    toString(viewbox[1]),\\n                    \\u0027 \\u0027,\\n                    toString(viewbox[2]),\\n                    \\u0027 \\u0027,\\n                    toString(viewbox[3])\\n                )\\n            );\\n    }\\n\\n    function generateStyles(Params memory params) private pure returns (string memory) {\\n        return\\n            string(\\n                abi.encodePacked(\\n                    \\u0027\\u003cstyle\\u003e@font-face { font-family: \\\"d\\\"; src: url(data:application/octet-stream;base64,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);}\\u003c/style\\u003e\\u0027,\\n                    \\u0027\\u003cstyle\\u003e.base { fill: #\\u0027,\\n                    toColor(params.color),\\n                    \\u0027; font-family: d; font-size: 14px; }\\u003c/style\\u003e\\u0027\\n                )\\n            );\\n    }\\n\\n    function generateText(Params memory params) private pure returns (string memory) {\\n        return\\n            string(\\n                abi.encodePacked(\\n                    \\u0027\\u003ctext x=\\\"160\\\" y=\\\"25\\\" with=\\\"320\\\" text-anchor=\\\"middle\\\" class=\\\"base\\\"\\u003e\\u0027,\\n                    params.text,\\n                    \\u0027\\u003c/text\\u003e\\u003ctext x=\\\"160\\\" y=\\\"303\\\" with=\\\"320\\\" text-anchor=\\\"middle\\\" class=\\\"base\\\"\\u003e\\u0027,\\n                    params.subtext,\\n                    \\u0027\\u003c/text\\u003e\\u0027\\n                )\\n            );\\n    }\\n\\n    /// @dev Opensea contract metadata: https://docs.opensea.io/docs/contract-level-metadata\\n    function contractURI(string calldata name, string calldata description) external pure returns (string memory) {\\n        string memory json = string(abi.encodePacked(\\u0027{ \\\"name\\\": \\\"\\u0027, name, \\u0027\\\", \\u0027, \\u0027\\\"description\\\" : \\u0027, description, \\u0027}\\u0027));\\n        string memory encodedJson = Base64.encode(bytes(json));\\n        string memory output = string(abi.encodePacked(\\u0027data:application/json;base64,\\u0027, encodedJson));\\n        return output;\\n    }\\n\\n    function tokenURI(Params memory params, IPaletteProvider paletteProvider) external view returns (string memory) {\\n        string memory output = Base64.encode(bytes(generateSVG(params, paletteProvider)));\\n        string memory json = Base64.encode(\\n            bytes(\\n                string(\\n                    abi.encodePacked(\\n                        \\u0027{ \\\"name\\\": \\\"\\u0027,\\n                        params.name,\\n                        \\u0027\\\", \\u0027,\\n                        \\u0027\\\"description\\\" : \\\"\\u0027,\\n                        params.description,\\n                        \\u0027\\\", \\u0027,\\n                        \\u0027\\\"image\\\": \\\"data:image/svg+xml;base64,\\u0027,\\n                        output,\\n                        \\u0027\\\", \\u0027\\n                        \\u0027\\\"attributes\\\": \\u0027,\\n                        params.attributes,\\n                        \\u0027}\\u0027\\n                    )\\n                )\\n            )\\n        );\\n        output = string(abi.encodePacked(\\u0027data:application/json;base64,\\u0027, json));\\n        return output;\\n    }\\n\\n    /**\\n     * @notice Given RLE image parts and color palettes, generate SVG rects.\\n     */\\n    // prettier-ignore\\n    function generateSVGRects(Params memory params, IPaletteProvider paletteProvider)\\n        private\\n        view\\n        returns (string memory svg)\\n    {\\n        string[] memory lookup = new string[](params.resolution + 1);\\n        uint16 step = 320 / params.resolution;\\n        string memory stepstr = toString(step);\\n        for (uint16 i = 0; i \\u003c= 320; i += step) {\\n            lookup[i/step] = toString(i);\\n        }\\n\\n        string memory rects;\\n        for (uint8 p = 0; p \\u003c params.parts.length; p++) {\\n            if (params.parts[p].length == 0) {\\n                continue;\\n            }\\n        \\n            DecodedImage memory image = _decodeRLEImage(params.parts[p]);\\n            bytes4[] memory palette = paletteProvider.palette(image.paletteIndex);\\n            uint256 currentX = image.bounds.left;\\n            uint256 currentY = image.bounds.top;\\n            uint256 cursor;\\n            string[16] memory buffer;\\n\\n            string memory part;\\n            for (uint256 i = 0; i \\u003c image.rects.length; i++) {\\n                Rect memory rect = image.rects[i];\\n                if (rect.colorIndex != 0) {\\n                    buffer[cursor] = lookup[rect.length];          // width\\n                    buffer[cursor + 1] = lookup[currentX];         // x\\n                    buffer[cursor + 2] = lookup[currentY];         // y\\n                    buffer[cursor + 3] = toColor(palette[rect.colorIndex]); // color\\n\\n                    cursor += 4;\\n\\n                    if (cursor \\u003e= 16) {\\n                        part = string(abi.encodePacked(part, _getChunk(cursor, buffer, stepstr)));\\n                        cursor = 0;\\n                    }\\n                }\\n\\n                currentX += rect.length;\\n                if (currentX == image.bounds.right) {\\n                    currentX = image.bounds.left;\\n                    currentY++;\\n                }\\n            }\\n\\n            if (cursor != 0) {\\n                part = string(abi.encodePacked(part, _getChunk(cursor, buffer, stepstr)));\\n            }\\n            rects = string(abi.encodePacked(rects, part));\\n        }\\n        return rects;\\n    }\\n\\n    /**\\n     * @notice Return a string that consists of all rects in the provided `buffer`.\\n     */\\n    // prettier-ignore\\n    function _getChunk(uint256 cursor, string[16] memory buffer, string memory height) private pure returns (string memory) {\\n        string memory chunk;\\n        for (uint256 i = 0; i \\u003c cursor; i += 4) {\\n            chunk = string(\\n                abi.encodePacked(\\n                    chunk,\\n                    \\u0027\\u003crect width=\\\"\\u0027, buffer[i], \\u0027\\\" height=\\\"\\u0027, height, \\u0027\\\" x=\\\"\\u0027, buffer[i + 1], \\u0027\\\" y=\\\"\\u0027, buffer[i + 2], \\u0027\\\" fill=\\\"#\\u0027, buffer[i + 3], \\u0027\\\" /\\u003e\\u0027\\n                )\\n            );\\n        }\\n        return chunk;\\n    }\\n\\n    /**\\n     * @notice Decode a single RLE compressed image into a `DecodedImage`.\\n     */\\n    function _decodeRLEImage(bytes memory image) private pure returns (DecodedImage memory) {\\n        uint8 paletteIndex = uint8(image[0]);\\n        ContentBounds memory bounds = ContentBounds({\\n            top: uint8(image[1]),\\n            right: uint8(image[2]),\\n            bottom: uint8(image[3]),\\n            left: uint8(image[4])\\n        });\\n\\n        uint256 cursor;\\n        Rect[] memory rects = new Rect[]((image.length - 5) / 2);\\n        for (uint256 i = 5; i \\u003c image.length; i += 2) {\\n            rects[cursor] = Rect({ length: uint8(image[i]), colorIndex: uint8(image[i + 1]) });\\n            cursor++;\\n        }\\n\\n        return DecodedImage({ paletteIndex: paletteIndex, bounds: bounds, rects: rects });\\n    }\\n\\n    function attributes(bytes[] calldata traits) external pure returns (string memory) {\\n        string memory res = string(abi.encodePacked(\\u0027[\\u0027));\\n\\n        for (uint256 i = 0; i \\u003c traits.length; i++) {\\n            if (traits[i].length == 0) {\\n                continue;\\n            }\\n\\n            if (i \\u003e 0) {\\n                res = string(abi.encodePacked(res, \\u0027,\\u0027));\\n            }\\n\\n            res = string(abi.encodePacked(res, trait(traits[i])));\\n        }\\n\\n        res = string(abi.encodePacked(res, \\u0027]\\u0027));\\n        return res;\\n    }\\n\\n    // Helper for encoding as json w/ trait_type / value from opensea\\n    function trait(bytes calldata t) internal pure returns (string memory) {\\n        (uint8 d, string memory typ, bytes memory v) = abi.decode(t, (uint8, string, bytes));\\n\\n        string memory value = \\u0027\\u0027;\\n        if (d == DisplayTypes.NONE) {\\n            value = abi.decode(v, (string));\\n            value = string(abi.encodePacked(\\u0027\\\"\\u0027, value, \\u0027\\\"\\u0027));\\n        } else {\\n            uint256 num = abi.decode(v, (uint256));\\n            value = string(abi.encodePacked(toString(num)));\\n        }\\n\\n        if (d == DisplayTypes.RANKING) {\\n            return string(abi.encodePacked(\\u0027{\\u0027, \\u0027\\\"trait_type\\\": \\\"\\u0027, typ, \\u0027\\\", \\u0027, \\u0027\\\"value\\\": \\u0027, value, \\u0027}\\u0027));\\n        }\\n\\n        string memory display = \\u0027\\u0027;\\n        if (d == DisplayTypes.NUMBER) {\\n            display = string(abi.encodePacked(\\u0027\\\"display_type\\\": \\\"number\\\", \\u0027));\\n        } else if (d == DisplayTypes.BOOST_NUMBER) {\\n            display = string(abi.encodePacked(\\u0027\\\"display_type\\\": \\\"boost_number\\\", \\u0027));\\n        } else if (d == DisplayTypes.BOOST_PERCENT) {\\n            display = string(abi.encodePacked(\\u0027\\\"display_type\\\": \\\"boost_percentage\\\", \\u0027));\\n        } else if (d == DisplayTypes.DATE) {\\n            display = string(abi.encodePacked(\\u0027\\\"display_type\\\": \\\"date\\\", \\u0027));\\n        }\\n\\n        return string(abi.encodePacked(\\u0027{\\\"trait_type\\\": \\\"\\u0027, typ, \\u0027\\\", \\u0027, display, \\u0027\\\"value\\\": \\u0027, value, \\u0027}\\u0027));\\n    }\\n\\n    function toColor(bytes4 value) internal pure returns (string memory) {\\n        bytes memory buffer = new bytes(8);\\n        for (uint256 i = 0; i \\u003c value.length; i++) {\\n            buffer[i * 2 + 1] = HEX[uint8(value[i]) \\u0026 0xf];\\n            buffer[i * 2] = HEX[uint8(value[i] \\u003e\\u003e 4) \\u0026 0xf];\\n        }\\n        return string(buffer);\\n    }\\n}\\n\"},\"MetadataUtils.sol\":{\"content\":\"//SPDX-License-Identifier: GPL-3.0-or-later\\npragma solidity ^0.8.0;\\n\\nfunction toString(uint256 value) pure returns (string memory) {\\n    // Inspired by OraclizeAPI\\u0027s implementation - MIT license\\n    // https://github.com/oraclize/ethereum-api/blob/b42146b063c7d6ee1358846c198246239e9360e8/oraclizeAPI_0.4.25.sol\\n\\n    if (value == 0) {\\n        return \\u00270\\u0027;\\n    }\\n    uint256 temp = value;\\n    uint256 digits;\\n    while (temp != 0) {\\n        digits++;\\n        temp /= 10;\\n    }\\n    bytes memory buffer = new bytes(digits);\\n    while (value != 0) {\\n        digits -= 1;\\n        buffer[digits] = bytes1(uint8(48 + uint256(value % 10)));\\n        value /= 10;\\n    }\\n    return string(buffer);\\n}\\n\\n/// [MIT License]\\n/// @title Base64\\n/// @notice Provides a function for encoding some bytes in base64\\n/// @author Brecht Devos \\u003cbrecht@loopring.org\\u003e\\nlibrary Base64 {\\n    bytes internal constant TABLE = \\u0027ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/\\u0027;\\n\\n    /// @notice Encodes some bytes to the base64 representation\\n    function encode(bytes memory data) internal pure returns (string memory) {\\n        uint256 len = data.length;\\n        if (len == 0) return \\u0027\\u0027;\\n\\n        // multiply by 4/3 rounded up\\n        uint256 encodedLen = 4 * ((len + 2) / 3);\\n\\n        // Add some extra buffer at the end\\n        bytes memory result = new bytes(encodedLen + 32);\\n\\n        bytes memory table = TABLE;\\n\\n        assembly {\\n            let tablePtr := add(table, 1)\\n            let resultPtr := add(result, 32)\\n\\n            for {\\n                let i := 0\\n            } lt(i, len) {\\n\\n            } {\\n                i := add(i, 3)\\n                let input := and(mload(add(data, i)), 0xffffff)\\n\\n                let out := mload(add(tablePtr, and(shr(18, input), 0x3F)))\\n                out := shl(8, out)\\n                out := add(out, and(mload(add(tablePtr, and(shr(12, input), 0x3F))), 0xFF))\\n                out := shl(8, out)\\n                out := add(out, and(mload(add(tablePtr, and(shr(6, input), 0x3F))), 0xFF))\\n                out := shl(8, out)\\n                out := add(out, and(mload(add(tablePtr, and(input, 0x3F))), 0xFF))\\n                out := shl(224, out)\\n\\n                mstore(resultPtr, out)\\n\\n                resultPtr := add(resultPtr, 4)\\n            }\\n\\n            switch mod(len, 3)\\n            case 1 {\\n                mstore(sub(resultPtr, 2), shl(240, 0x3d3d))\\n            }\\n            case 2 {\\n                mstore(sub(resultPtr, 1), shl(248, 0x3d))\\n            }\\n\\n            mstore(result, encodedLen)\\n        }\\n\\n        return string(result);\\n    }\\n}\\n\"}}","ABI":"[{\"inputs\":[{\"internalType\":\"bytes[]\",\"name\":\"traits\",\"type\":\"bytes[]\"}],\"name\":\"attributes\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"string\",\"name\":\"name\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"description\",\"type\":\"string\"}],\"name\":\"contractURI\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[{\"components\":[{\"internalType\":\"uint8\",\"name\":\"resolution\",\"type\":\"uint8\"},{\"internalType\":\"bytes4\",\"name\":\"color\",\"type\":\"bytes4\"},{\"internalType\":\"bytes4\",\"name\":\"background\",\"type\":\"bytes4\"},{\"internalType\":\"uint8[4]\",\"name\":\"viewbox\",\"type\":\"uint8[4]\"},{\"internalType\":\"string\",\"name\":\"text\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"subtext\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"name\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"description\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"attributes\",\"type\":\"string\"},{\"internalType\":\"bytes[]\",\"name\":\"parts\",\"type\":\"bytes[]\"}],\"internalType\":\"struct MetadataBuilder.Params\",\"name\":\"params\",\"type\":\"tuple\"},{\"internalType\":\"contract IPaletteProvider\",\"name\":\"paletteProvider\",\"type\":\"IPaletteProvider\"}],\"name\":\"generateSVG\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"svg\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"components\":[{\"internalType\":\"uint8\",\"name\":\"resolution\",\"type\":\"uint8\"},{\"internalType\":\"bytes4\",\"name\":\"color\",\"type\":\"bytes4\"},{\"internalType\":\"bytes4\",\"name\":\"background\",\"type\":\"bytes4\"},{\"internalType\":\"uint8[4]\",\"name\":\"viewbox\",\"type\":\"uint8[4]\"},{\"internalType\":\"string\",\"name\":\"text\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"subtext\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"name\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"description\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"attributes\",\"type\":\"string\"},{\"internalType\":\"bytes[]\",\"name\":\"parts\",\"type\":\"bytes[]\"}],\"internalType\":\"struct MetadataBuilder.Params\",\"name\":\"params\",\"type\":\"tuple\"},{\"internalType\":\"contract IPaletteProvider\",\"name\":\"paletteProvider\",\"type\":\"IPaletteProvider\"}],\"name\":\"tokenURI\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"}]","ContractName":"MetadataBuilder","CompilerVersion":"v0.8.6+commit.11564f7e","OptimizationUsed":"1","Runs":"200","ConstructorArguments":"","EVMVersion":"Default","Library":"","LicenseType":"None","Proxy":"0","Implementation":"","SwarmSource":"ipfs://e9a4dce49c335213f0797de89809015c795149eff0b454aef1fa225851e41aad"}]}