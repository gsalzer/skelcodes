{"status":"1","message":"OK","result":[{"SourceCode":"{{\r\n  \"language\": \"Solidity\",\r\n  \"sources\": {\r\n    \"contracts/CityParkUtils.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.4;\\n\\nimport \\\"@openzeppelin/contracts/utils/Strings.sol\\\";\\nimport \\\"@openzeppelin/contracts/utils/math/SafeMath.sol\\\";\\n\\nlibrary CityParkUtils {\\n\\n    using SafeMath for uint16;\\n    using Strings for uint256;\\n    using Strings for uint8;\\n    using Strings for uint16;\\n\\n    struct Art {\\n        uint8 numTrees;\\n        bool hasUFO;\\n        bool hasSun;\\n        bool hasFence;\\n        bool hasBricks;\\n        bool overrideWhite;\\n        uint48 randomTimestamp;\\n        uint128 randomDifficulty;\\n        uint256 randomSeed;\\n    }\\n\\n    struct ColorXY {\\n        uint16 x;\\n        uint16 y;\\n        string color;\\n    }\\n\\n    string public constant _imageFooter = \\\"</svg>\\\";\\n    string public constant _borderRect = \\\"<rect width='100%' height='166%' y='-33%' rx='20' style='fill:none;stroke:black;stroke-width:20'></rect>\\\";\\n\\n    function getColor(uint seed, Art memory artData) public pure returns(string memory) {\\n        return ['%23a85dee', '%2323cd73', '%23ef2839', '%230bd2fa', '%23fdd131'][seededRandom(0,5,seed,artData)];\\n    }\\n\\n    function getBWColor(uint seed, Art memory artData) public pure returns(string memory) {\\n        return ['white', '%23e8e8e8', '%23e0e0e0', '%23aeaeae', '%236e6e6e'][seededRandom(0,5,seed,artData)];\\n    }\\n\\n    function _generateHeader(uint seed, Art memory artData) public pure returns (string memory) {\\n        string memory header = \\\"data:image/svg+xml;utf8,<svg xmlns='http://www.w3.org/2000/svg' width='300' height='500' viewBox='0 0 1000 1000' style='background-color:\\\";\\n        return string(abi.encodePacked(\\n            header,\\n            getColor(seed, artData),\\n            \\\"'><!--You are loved.-->\\\"\\n        ));\\n    }\\n\\n    function _boolToString(bool value) public pure returns (string memory) {\\n        if (value) {\\n            return \\\"True\\\";\\n        } else {\\n            return \\\"False\\\";\\n        }\\n    }\\n\\n    function seededRandom(uint low, uint high, uint seed, Art memory artData) public pure returns (uint16) {\\n        return uint16(uint(uint256(keccak256(abi.encodePacked(seed, uint256(keccak256(abi.encodePacked(artData.randomDifficulty, artData.randomTimestamp, artData.randomSeed)))))))%high + low);\\n    }\\n\\n    function _wrapTrait(string memory trait, string memory value) public pure returns(string memory) {\\n        return string(abi.encodePacked(\\n            '{\\\"trait_type\\\":\\\"',\\n            trait,\\n            '\\\",\\\"value\\\":\\\"',\\n            value,\\n            '\\\"}'\\n        ));\\n    }\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/utils/Strings.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev String operations.\\n */\\nlibrary Strings {\\n    bytes16 private constant _HEX_SYMBOLS = \\\"0123456789abcdef\\\";\\n\\n    /**\\n     * @dev Converts a `uint256` to its ASCII `string` decimal representation.\\n     */\\n    function toString(uint256 value) internal pure returns (string memory) {\\n        // Inspired by OraclizeAPI's implementation - MIT licence\\n        // https://github.com/oraclize/ethereum-api/blob/b42146b063c7d6ee1358846c198246239e9360e8/oraclizeAPI_0.4.25.sol\\n\\n        if (value == 0) {\\n            return \\\"0\\\";\\n        }\\n        uint256 temp = value;\\n        uint256 digits;\\n        while (temp != 0) {\\n            digits++;\\n            temp /= 10;\\n        }\\n        bytes memory buffer = new bytes(digits);\\n        while (value != 0) {\\n            digits -= 1;\\n            buffer[digits] = bytes1(uint8(48 + uint256(value % 10)));\\n            value /= 10;\\n        }\\n        return string(buffer);\\n    }\\n\\n    /**\\n     * @dev Converts a `uint256` to its ASCII `string` hexadecimal representation.\\n     */\\n    function toHexString(uint256 value) internal pure returns (string memory) {\\n        if (value == 0) {\\n            return \\\"0x00\\\";\\n        }\\n        uint256 temp = value;\\n        uint256 length = 0;\\n        while (temp != 0) {\\n            length++;\\n            temp >>= 8;\\n        }\\n        return toHexString(value, length);\\n    }\\n\\n    /**\\n     * @dev Converts a `uint256` to its ASCII `string` hexadecimal representation with fixed length.\\n     */\\n    function toHexString(uint256 value, uint256 length) internal pure returns (string memory) {\\n        bytes memory buffer = new bytes(2 * length + 2);\\n        buffer[0] = \\\"0\\\";\\n        buffer[1] = \\\"x\\\";\\n        for (uint256 i = 2 * length + 1; i > 1; --i) {\\n            buffer[i] = _HEX_SYMBOLS[value & 0xf];\\n            value >>= 4;\\n        }\\n        require(value == 0, \\\"Strings: hex length insufficient\\\");\\n        return string(buffer);\\n    }\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/utils/math/SafeMath.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\n// CAUTION\\n// This version of SafeMath should only be used with Solidity 0.8 or later,\\n// because it relies on the compiler's built in overflow checks.\\n\\n/**\\n * @dev Wrappers over Solidity's arithmetic operations.\\n *\\n * NOTE: `SafeMath` is no longer needed starting with Solidity 0.8. The compiler\\n * now has built in overflow checking.\\n */\\nlibrary SafeMath {\\n    /**\\n     * @dev Returns the addition of two unsigned integers, with an overflow flag.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function tryAdd(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        unchecked {\\n            uint256 c = a + b;\\n            if (c < a) return (false, 0);\\n            return (true, c);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the substraction of two unsigned integers, with an overflow flag.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function trySub(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        unchecked {\\n            if (b > a) return (false, 0);\\n            return (true, a - b);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the multiplication of two unsigned integers, with an overflow flag.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function tryMul(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        unchecked {\\n            // Gas optimization: this is cheaper than requiring 'a' not being zero, but the\\n            // benefit is lost if 'b' is also tested.\\n            // See: https://github.com/OpenZeppelin/openzeppelin-contracts/pull/522\\n            if (a == 0) return (true, 0);\\n            uint256 c = a * b;\\n            if (c / a != b) return (false, 0);\\n            return (true, c);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the division of two unsigned integers, with a division by zero flag.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function tryDiv(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        unchecked {\\n            if (b == 0) return (false, 0);\\n            return (true, a / b);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the remainder of dividing two unsigned integers, with a division by zero flag.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function tryMod(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        unchecked {\\n            if (b == 0) return (false, 0);\\n            return (true, a % b);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the addition of two unsigned integers, reverting on\\n     * overflow.\\n     *\\n     * Counterpart to Solidity's `+` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Addition cannot overflow.\\n     */\\n    function add(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a + b;\\n    }\\n\\n    /**\\n     * @dev Returns the subtraction of two unsigned integers, reverting on\\n     * overflow (when the result is negative).\\n     *\\n     * Counterpart to Solidity's `-` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Subtraction cannot overflow.\\n     */\\n    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a - b;\\n    }\\n\\n    /**\\n     * @dev Returns the multiplication of two unsigned integers, reverting on\\n     * overflow.\\n     *\\n     * Counterpart to Solidity's `*` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Multiplication cannot overflow.\\n     */\\n    function mul(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a * b;\\n    }\\n\\n    /**\\n     * @dev Returns the integer division of two unsigned integers, reverting on\\n     * division by zero. The result is rounded towards zero.\\n     *\\n     * Counterpart to Solidity's `/` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - The divisor cannot be zero.\\n     */\\n    function div(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a / b;\\n    }\\n\\n    /**\\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\\n     * reverting when dividing by zero.\\n     *\\n     * Counterpart to Solidity's `%` operator. This function uses a `revert`\\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\\n     * invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Requirements:\\n     *\\n     * - The divisor cannot be zero.\\n     */\\n    function mod(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a % b;\\n    }\\n\\n    /**\\n     * @dev Returns the subtraction of two unsigned integers, reverting with custom message on\\n     * overflow (when the result is negative).\\n     *\\n     * CAUTION: This function is deprecated because it requires allocating memory for the error\\n     * message unnecessarily. For custom revert reasons use {trySub}.\\n     *\\n     * Counterpart to Solidity's `-` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Subtraction cannot overflow.\\n     */\\n    function sub(\\n        uint256 a,\\n        uint256 b,\\n        string memory errorMessage\\n    ) internal pure returns (uint256) {\\n        unchecked {\\n            require(b <= a, errorMessage);\\n            return a - b;\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the integer division of two unsigned integers, reverting with custom message on\\n     * division by zero. The result is rounded towards zero.\\n     *\\n     * Counterpart to Solidity's `/` operator. Note: this function uses a\\n     * `revert` opcode (which leaves remaining gas untouched) while Solidity\\n     * uses an invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Requirements:\\n     *\\n     * - The divisor cannot be zero.\\n     */\\n    function div(\\n        uint256 a,\\n        uint256 b,\\n        string memory errorMessage\\n    ) internal pure returns (uint256) {\\n        unchecked {\\n            require(b > 0, errorMessage);\\n            return a / b;\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\\n     * reverting with custom message when dividing by zero.\\n     *\\n     * CAUTION: This function is deprecated because it requires allocating memory for the error\\n     * message unnecessarily. For custom revert reasons use {tryMod}.\\n     *\\n     * Counterpart to Solidity's `%` operator. This function uses a `revert`\\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\\n     * invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Requirements:\\n     *\\n     * - The divisor cannot be zero.\\n     */\\n    function mod(\\n        uint256 a,\\n        uint256 b,\\n        string memory errorMessage\\n    ) internal pure returns (uint256) {\\n        unchecked {\\n            require(b > 0, errorMessage);\\n            return a % b;\\n        }\\n    }\\n}\\n\"\r\n    }\r\n  },\r\n  \"settings\": {\r\n    \"optimizer\": {\r\n      \"enabled\": false,\r\n      \"runs\": 200\r\n    },\r\n    \"outputSelection\": {\r\n      \"*\": {\r\n        \"*\": [\r\n          \"evm.bytecode\",\r\n          \"evm.deployedBytecode\",\r\n          \"devdoc\",\r\n          \"userdoc\",\r\n          \"metadata\",\r\n          \"abi\"\r\n        ]\r\n      }\r\n    },\r\n    \"libraries\": {}\r\n  }\r\n}}","ABI":"[{\"inputs\":[{\"internalType\":\"bool\",\"name\":\"value\",\"type\":\"bool\"}],\"name\":\"_boolToString\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"_borderRect\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"seed\",\"type\":\"uint256\"},{\"components\":[{\"internalType\":\"uint8\",\"name\":\"numTrees\",\"type\":\"uint8\"},{\"internalType\":\"bool\",\"name\":\"hasUFO\",\"type\":\"bool\"},{\"internalType\":\"bool\",\"name\":\"hasSun\",\"type\":\"bool\"},{\"internalType\":\"bool\",\"name\":\"hasFence\",\"type\":\"bool\"},{\"internalType\":\"bool\",\"name\":\"hasBricks\",\"type\":\"bool\"},{\"internalType\":\"bool\",\"name\":\"overrideWhite\",\"type\":\"bool\"},{\"internalType\":\"uint48\",\"name\":\"randomTimestamp\",\"type\":\"uint48\"},{\"internalType\":\"uint128\",\"name\":\"randomDifficulty\",\"type\":\"uint128\"},{\"internalType\":\"uint256\",\"name\":\"randomSeed\",\"type\":\"uint256\"}],\"internalType\":\"struct CityParkUtils.Art\",\"name\":\"artData\",\"type\":\"tuple\"}],\"name\":\"_generateHeader\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"_imageFooter\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"string\",\"name\":\"trait\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"value\",\"type\":\"string\"}],\"name\":\"_wrapTrait\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"seed\",\"type\":\"uint256\"},{\"components\":[{\"internalType\":\"uint8\",\"name\":\"numTrees\",\"type\":\"uint8\"},{\"internalType\":\"bool\",\"name\":\"hasUFO\",\"type\":\"bool\"},{\"internalType\":\"bool\",\"name\":\"hasSun\",\"type\":\"bool\"},{\"internalType\":\"bool\",\"name\":\"hasFence\",\"type\":\"bool\"},{\"internalType\":\"bool\",\"name\":\"hasBricks\",\"type\":\"bool\"},{\"internalType\":\"bool\",\"name\":\"overrideWhite\",\"type\":\"bool\"},{\"internalType\":\"uint48\",\"name\":\"randomTimestamp\",\"type\":\"uint48\"},{\"internalType\":\"uint128\",\"name\":\"randomDifficulty\",\"type\":\"uint128\"},{\"internalType\":\"uint256\",\"name\":\"randomSeed\",\"type\":\"uint256\"}],\"internalType\":\"struct CityParkUtils.Art\",\"name\":\"artData\",\"type\":\"tuple\"}],\"name\":\"getBWColor\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"seed\",\"type\":\"uint256\"},{\"components\":[{\"internalType\":\"uint8\",\"name\":\"numTrees\",\"type\":\"uint8\"},{\"internalType\":\"bool\",\"name\":\"hasUFO\",\"type\":\"bool\"},{\"internalType\":\"bool\",\"name\":\"hasSun\",\"type\":\"bool\"},{\"internalType\":\"bool\",\"name\":\"hasFence\",\"type\":\"bool\"},{\"internalType\":\"bool\",\"name\":\"hasBricks\",\"type\":\"bool\"},{\"internalType\":\"bool\",\"name\":\"overrideWhite\",\"type\":\"bool\"},{\"internalType\":\"uint48\",\"name\":\"randomTimestamp\",\"type\":\"uint48\"},{\"internalType\":\"uint128\",\"name\":\"randomDifficulty\",\"type\":\"uint128\"},{\"internalType\":\"uint256\",\"name\":\"randomSeed\",\"type\":\"uint256\"}],\"internalType\":\"struct CityParkUtils.Art\",\"name\":\"artData\",\"type\":\"tuple\"}],\"name\":\"getColor\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"low\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"high\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"seed\",\"type\":\"uint256\"},{\"components\":[{\"internalType\":\"uint8\",\"name\":\"numTrees\",\"type\":\"uint8\"},{\"internalType\":\"bool\",\"name\":\"hasUFO\",\"type\":\"bool\"},{\"internalType\":\"bool\",\"name\":\"hasSun\",\"type\":\"bool\"},{\"internalType\":\"bool\",\"name\":\"hasFence\",\"type\":\"bool\"},{\"internalType\":\"bool\",\"name\":\"hasBricks\",\"type\":\"bool\"},{\"internalType\":\"bool\",\"name\":\"overrideWhite\",\"type\":\"bool\"},{\"internalType\":\"uint48\",\"name\":\"randomTimestamp\",\"type\":\"uint48\"},{\"internalType\":\"uint128\",\"name\":\"randomDifficulty\",\"type\":\"uint128\"},{\"internalType\":\"uint256\",\"name\":\"randomSeed\",\"type\":\"uint256\"}],\"internalType\":\"struct CityParkUtils.Art\",\"name\":\"artData\",\"type\":\"tuple\"}],\"name\":\"seededRandom\",\"outputs\":[{\"internalType\":\"uint16\",\"name\":\"\",\"type\":\"uint16\"}],\"stateMutability\":\"pure\",\"type\":\"function\"}]","ContractName":"CityParkUtils","CompilerVersion":"v0.8.7+commit.e28d00a7","OptimizationUsed":"0","Runs":"200","ConstructorArguments":"","EVMVersion":"Default","Library":"","LicenseType":"","Proxy":"0","Implementation":"","SwarmSource":""}]}