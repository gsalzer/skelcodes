{"status":"1","message":"OK","result":[{"SourceCode":"{{\r\n  \"language\": \"Solidity\",\r\n  \"sources\": {\r\n    \"./contracts/governance/DAOVesting.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: AGPLv3\\npragma solidity 0.8.4;\\n\\nimport \\\"./GROBaseVester.sol\\\";\\n\\ninterface ICommunityVester {\\n    function totalLockedAmount() external view returns (uint256);\\n}\\n\\n/// @notice Vesting contract for the GRO DAO - This vesting contract can\\n///     create vesting positions from both the DAO and community quota and also has\\n///     The ability to create instantaniously vesting positions. The later has to be\\n///     done behing a timelock contract, and users are encouraged to check that the\\n///     TIME_LOCK variable links to a verified timelock contract\\ncontract GRODaoVesting is GROBaseVesting {\\n    // Contract cannot create vesting positions for the first week after\\n    //  deployment, this stops a vesting contract with a fake time lock to\\n    //  insta mint the community QUOTA to itself without anyone being able to react.\\n    uint256 private constant COOLDOWN = 604800;\\n    uint256 private immutable deploymentTime;\\n\\n    struct DaoPosition {\\n        uint256 total;\\n        uint256 withdrawn;\\n        uint256 startTime;\\n        uint256 endTime;\\n        uint256 cliff;\\n        bool community;\\n    }\\n\\n    // !Important! Time lock contract\\n    address public immutable TIME_LOCK;\\n    // Community quota\\n    uint256 public immutable COMMUNITY_QUOTA;\\n\\n    mapping(address => DaoPosition) public daoPositions;\\n    uint256 private _vestingCommunity;\\n\\n    // The main community vester, used to read current vesting amount ensure that position that draw from community funds\\n    //  are not exceeding the community qouta.\\n    address public communityVester;\\n\\n    event LogNewVest(address indexed dao, uint256 amount, bool community);\\n    event LogClaimed(address indexed dao, uint256 amount, uint256 withdrawn, uint256 available, bool community);\\n    event LogPositionRemoved(address account, uint256 amount, uint256 withdrawn, bool community);\\n    event LogPositionHalted(address account, uint256 amount, uint256 withdrawn, uint256 available, bool community);\\n    event LogNewCommunityVester(address communityVester);\\n\\n    constructor(\\n        uint256 startTime,\\n        uint256 quotaDao,\\n        uint256 quotaCommunity,\\n        address dao,\\n        address timeLock\\n    ) GROBaseVesting(startTime, quotaDao) {\\n        transferOwnership(dao);\\n        TIME_LOCK = timeLock;\\n        COMMUNITY_QUOTA = quotaCommunity;\\n        deploymentTime = block.timestamp;\\n    }\\n\\n    /// @notice set the community vester contract\\n    /// @param newVester address of community vester\\n    function setCommunityVester(address newVester) external onlyOwner {\\n        communityVester = newVester;\\n        emit LogNewCommunityVester(newVester);\\n    }\\n\\n    /// @notice how much assets is vesting in the community vester + the dao vester\\n    function vestingCommunity() public view returns (uint256) {\\n        return _vestingCommunity + ICommunityVester(communityVester).totalLockedAmount();\\n    }\\n\\n    /// @notice Create a vesting position - uses default vesting paramers from base contract\\n    /// @param account Account which to add vesting position for\\n    /// @param amount Amount to add to vesting position\\n    function baseVest(address account, uint256 amount) external onlyOwner {\\n        require(block.timestamp > deploymentTime + COOLDOWN, \\\"vest: cannot create a vesting position yet\\\");\\n        require(account != address(0), \\\"vest: !account\\\");\\n        require(amount > 0, \\\"vest: !amount\\\");\\n\\n        DaoPosition storage dp = daoPositions[account];\\n\\n        require(dp.startTime == 0, \\\"vest: position already exists\\\");\\n        require((QUOTA - vestingAssets) >= amount, \\\"vest: not enough assets available\\\");\\n        dp.startTime = block.timestamp;\\n        dp.endTime = block.timestamp + VESTING_TIME;\\n        dp.cliff = block.timestamp + VESTING_CLIFF;\\n        dp.total = amount;\\n        vestingAssets += amount;\\n\\n        emit LogNewVest(account, amount, false);\\n    }\\n\\n    function vest(\\n        address account,\\n        uint256 startDate,\\n        uint256 amount\\n    ) external override {}\\n\\n    /// @notice remove a vesting position\\n    /// @param account Account which to remove vesting position for\\n    /// @dev this effectively nulifies the position, no more assets can be withdrawn\\n    function removePosition(address account) external onlyOwner {\\n        DaoPosition memory dp = daoPositions[account];\\n        require(dp.startTime > 0, \\\"removePosition: no position for user\\\");\\n        delete daoPositions[account];\\n        bool community = dp.community;\\n        if (community) {\\n            _vestingCommunity -= (dp.total - dp.withdrawn);\\n        } else {\\n            vestingAssets -= (dp.total - dp.withdrawn);\\n        }\\n        emit LogPositionRemoved(account, dp.total, dp.withdrawn, community);\\n    }\\n\\n    /// @notice halt a vesting position\\n    /// @param account Account which to remove vesting position for\\n    /// @dev this stops the posits, no more assets will vest, but what currently has\\n    ///     vested can be withdrawn\\n    function haltPosition(address account) external onlyOwner {\\n        DaoPosition storage dp = daoPositions[account];\\n        require(dp.startTime > 0, \\\"haltPosition: no position for user\\\");\\n        (uint256 unlocked, uint256 available, , ) = unlockedBalance(account);\\n        uint256 forfeited = dp.total - unlocked;\\n        bool community = dp.community;\\n        if (community) {\\n            _vestingCommunity -= forfeited;\\n        } else {\\n            vestingAssets -= forfeited;\\n        }\\n        dp.total = unlocked;\\n        dp.endTime = block.timestamp;\\n        emit LogPositionHalted(account, unlocked, dp.withdrawn, available, community);\\n    }\\n\\n    /// @notice Create a custom vesting position\\n    /// @param account Account which to add vesting position for\\n    /// @param amount Amount to add to vesting position\\n    /// @param vestingTime custom vesting time for the vesting position\\n    /// @param vestingCliff custom cliff for the vesting position\\n    /// @param community is the position created from the DAO or community asset pool\\n    function customVest(\\n        address account,\\n        uint256 amount,\\n        uint256 vestingTime,\\n        uint256 vestingCliff,\\n        bool community\\n    ) external {\\n        require(block.timestamp > deploymentTime + COOLDOWN, \\\"customVest: cannot create a vesting position yet\\\");\\n        require(msg.sender == TIME_LOCK, \\\"customVest: Can only create custom vest from timelock\\\");\\n        require(account != address(0), \\\"customVest: !account\\\");\\n        require(amount > 0, \\\"customVest: !amount\\\");\\n        require(vestingTime >= vestingCliff, \\\"customVest: _endDate < _cliff\\\");\\n\\n        DaoPosition storage dp = daoPositions[account];\\n        if (community) {\\n            require((COMMUNITY_QUOTA - vestingCommunity()) >= amount, \\\"customVest: not enough assets available\\\");\\n            _vestingCommunity += amount;\\n            dp.community = community;\\n        } else {\\n            require((QUOTA - vestingAssets) >= amount, \\\"customVest: not enough assets available\\\");\\n            vestingAssets += amount;\\n        }\\n        require(dp.startTime == 0, \\\"customVest: position already exists\\\");\\n        dp.startTime = block.timestamp;\\n        dp.endTime = block.timestamp + vestingTime;\\n        dp.cliff = block.timestamp + vestingCliff;\\n        dp.total = amount;\\n\\n        emit LogNewVest(account, amount, community);\\n    }\\n\\n    /// @notice Claim an amount of tokens\\n    function claim(uint256 amount) external override {\\n        require(amount > 0, \\\"claim: No amount specified\\\");\\n        (uint256 unlocked, uint256 available, , ) = unlockedBalance(msg.sender);\\n        require(available >= amount, \\\"claim: Not enough user assets available\\\");\\n        DaoPosition storage dp = daoPositions[msg.sender];\\n\\n        // record contract withdrawals\\n        bool community = dp.community;\\n\\n        // record account withdrawals\\n        uint256 _withdrawn = unlocked - available + amount;\\n        dp.withdrawn = _withdrawn;\\n        distributer.mintDao(msg.sender, amount, community);\\n        emit LogClaimed(msg.sender, amount, _withdrawn, available - amount, community);\\n    }\\n\\n    /// @notice See the amount of vested assets the account has accumulated\\n    /// @param account Account to get vested amount for\\n    function unlockedBalance(address account)\\n        internal\\n        view\\n        override\\n        returns (\\n            uint256,\\n            uint256,\\n            uint256,\\n            uint256\\n        )\\n    {\\n        DaoPosition storage dp = daoPositions[account];\\n        uint256 startTime = dp.startTime;\\n        uint256 endTime = dp.endTime;\\n        uint256 cliff = dp.cliff;\\n        if (block.timestamp <= cliff) {\\n            return (0, 0, startTime, endTime);\\n        }\\n        uint256 unlocked;\\n        uint256 available;\\n        if (block.timestamp < endTime) {\\n            unlocked = (dp.total * (block.timestamp - startTime)) / (endTime - startTime);\\n        } else {\\n            unlocked = dp.total;\\n        }\\n        available = unlocked - dp.withdrawn;\\n        return (unlocked, available, startTime, endTime);\\n    }\\n\\n    /// @notice Get total size of position, vested + vesting\\n    /// @param account Target account\\n    function totalBalance(address account) external view override returns (uint256 balance) {\\n        DaoPosition storage dp = daoPositions[account];\\n        balance = dp.total;\\n    }\\n}\\n\"\r\n    },\r\n    \"./contracts/governance/GROBaseVester.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: AGPLv3\\npragma solidity 0.8.4;\\n\\nimport \\\"@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol\\\";\\nimport \\\"@openzeppelin/contracts/access/Ownable.sol\\\";\\n\\ninterface IMintable {\\n    function mint(address _receiver, uint256 _amount) external;\\n    function mintDao(address _receiver, uint256 _amount, bool community) external;\\n}\\n\\nabstract contract GROBaseVesting is Ownable {\\n    using SafeERC20 for IERC20;\\n\\n    uint256 internal constant ONE_YEAR_SECONDS = 31556952; // average year (including leap years) in seconds\\n    uint256 internal constant START_TIME_LOWER_BOUND = 5184000; // 2 Months\\n    uint256 internal constant VESTING_TIME = ONE_YEAR_SECONDS * 3; // 3 years period\\n    uint256 internal constant VESTING_CLIFF = ONE_YEAR_SECONDS; // 1 years period\\n    uint256 public constant PERCENTAGE_DECIMAL_FACTOR = 10000; // BP\\n    uint256 public immutable QUOTA;\\n    uint256 public immutable VESTING_START_TIME;\\n\\n    uint256 public vestingAssets;\\n\\n    IMintable public distributer;\\n\\n    event LogNewDistributer(address indexed distributer);\\n\\n    constructor(uint256 startTime, uint256 quota) {\\n        VESTING_START_TIME = startTime;\\n        QUOTA = quota;\\n    }\\n\\n    function setDistributer(address _distributer) external onlyOwner {\\n        distributer = IMintable(_distributer);\\n        emit LogNewDistributer(_distributer);\\n    }\\n\\n    /// @notice Create or modify a vesting position\\n    function vest(address account, uint256 startDate, uint256 amount) external virtual;\\n\\n    /// @notice Claim an amount of tokens\\n    function claim(uint256 amount) external virtual;\\n\\n    /// @notice See the amount of vested assets the account has accumulated\\n    /// @param account Account to get vested amount for\\n    function unlockedBalance(address account)\\n        internal\\n        view\\n        virtual\\n        returns ( uint256, uint256, uint256, uint256 );\\n\\n    /// @notice How much of the quota is unlocked, vesting and available\\n    function globallyUnlocked() public view virtual returns (uint256 unlocked, uint256 vesting, uint256 available) {\\n        if (block.timestamp > VESTING_START_TIME + VESTING_TIME) {\\n            unlocked = QUOTA;\\n        } else {\\n            unlocked = (QUOTA) * (block.timestamp - VESTING_START_TIME) / (VESTING_TIME);\\n        }\\n        vesting = vestingAssets;\\n        available = unlocked - vesting;\\n    }\\n\\n    /// @notice Get total size of position, vested + vesting\\n    /// @param account Target account\\n    function totalBalance(address account) external view virtual returns (uint256 unvested);\\n\\n    /// @notice Get current vested position\\n    /// @param account Target account\\n    function vestedBalance(address account) external view returns (uint256 vested, uint256 available) {\\n        (vested, available, , ) = unlockedBalance(account);\\n    }\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../IERC20.sol\\\";\\nimport \\\"../../../utils/Address.sol\\\";\\n\\n/**\\n * @title SafeERC20\\n * @dev Wrappers around ERC20 operations that throw on failure (when the token\\n * contract returns false). Tokens that return no value (and instead revert or\\n * throw on failure) are also supported, non-reverting calls are assumed to be\\n * successful.\\n * To use this library you can add a `using SafeERC20 for IERC20;` statement to your contract,\\n * which allows you to call the safe operations as `token.safeTransfer(...)`, etc.\\n */\\nlibrary SafeERC20 {\\n    using Address for address;\\n\\n    function safeTransfer(\\n        IERC20 token,\\n        address to,\\n        uint256 value\\n    ) internal {\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.transfer.selector, to, value));\\n    }\\n\\n    function safeTransferFrom(\\n        IERC20 token,\\n        address from,\\n        address to,\\n        uint256 value\\n    ) internal {\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.transferFrom.selector, from, to, value));\\n    }\\n\\n    /**\\n     * @dev Deprecated. This function has issues similar to the ones found in\\n     * {IERC20-approve}, and its usage is discouraged.\\n     *\\n     * Whenever possible, use {safeIncreaseAllowance} and\\n     * {safeDecreaseAllowance} instead.\\n     */\\n    function safeApprove(\\n        IERC20 token,\\n        address spender,\\n        uint256 value\\n    ) internal {\\n        // safeApprove should only be called when setting an initial allowance,\\n        // or when resetting it to zero. To increase and decrease it, use\\n        // 'safeIncreaseAllowance' and 'safeDecreaseAllowance'\\n        require(\\n            (value == 0) || (token.allowance(address(this), spender) == 0),\\n            \\\"SafeERC20: approve from non-zero to non-zero allowance\\\"\\n        );\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, value));\\n    }\\n\\n    function safeIncreaseAllowance(\\n        IERC20 token,\\n        address spender,\\n        uint256 value\\n    ) internal {\\n        uint256 newAllowance = token.allowance(address(this), spender) + value;\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));\\n    }\\n\\n    function safeDecreaseAllowance(\\n        IERC20 token,\\n        address spender,\\n        uint256 value\\n    ) internal {\\n        unchecked {\\n            uint256 oldAllowance = token.allowance(address(this), spender);\\n            require(oldAllowance >= value, \\\"SafeERC20: decreased allowance below zero\\\");\\n            uint256 newAllowance = oldAllowance - value;\\n            _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));\\n        }\\n    }\\n\\n    /**\\n     * @dev Imitates a Solidity high-level call (i.e. a regular function call to a contract), relaxing the requirement\\n     * on the return value: the return value is optional (but if data is returned, it must not be false).\\n     * @param token The token targeted by the call.\\n     * @param data The call data (encoded using abi.encode or one of its variants).\\n     */\\n    function _callOptionalReturn(IERC20 token, bytes memory data) private {\\n        // We need to perform a low level call here, to bypass Solidity's return data size checking mechanism, since\\n        // we're implementing it ourselves. We use {Address.functionCall} to perform this call, which verifies that\\n        // the target address contains contract code and also asserts for success in the low-level call.\\n\\n        bytes memory returndata = address(token).functionCall(data, \\\"SafeERC20: low-level call failed\\\");\\n        if (returndata.length > 0) {\\n            // Return data is optional\\n            require(abi.decode(returndata, (bool)), \\\"SafeERC20: ERC20 operation did not succeed\\\");\\n        }\\n    }\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/token/ERC20/IERC20.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC20 standard as defined in the EIP.\\n */\\ninterface IERC20 {\\n    /**\\n     * @dev Returns the amount of tokens in existence.\\n     */\\n    function totalSupply() external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the amount of tokens owned by `account`.\\n     */\\n    function balanceOf(address account) external view returns (uint256);\\n\\n    /**\\n     * @dev Moves `amount` tokens from the caller's account to `recipient`.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transfer(address recipient, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Returns the remaining number of tokens that `spender` will be\\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\\n     * zero by default.\\n     *\\n     * This value changes when {approve} or {transferFrom} are called.\\n     */\\n    function allowance(address owner, address spender) external view returns (uint256);\\n\\n    /**\\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\\n     * that someone may use both the old and the new allowance by unfortunate\\n     * transaction ordering. One possible solution to mitigate this race\\n     * condition is to first reduce the spender's allowance to 0 and set the\\n     * desired value afterwards:\\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address spender, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Moves `amount` tokens from `sender` to `recipient` using the\\n     * allowance mechanism. `amount` is then deducted from the caller's\\n     * allowance.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(\\n        address sender,\\n        address recipient,\\n        uint256 amount\\n    ) external returns (bool);\\n\\n    /**\\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\\n     * another (`to`).\\n     *\\n     * Note that `value` may be zero.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 value);\\n\\n    /**\\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\\n     * a call to {approve}. `value` is the new allowance.\\n     */\\n    event Approval(address indexed owner, address indexed spender, uint256 value);\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/utils/Address.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Collection of functions related to the address type\\n */\\nlibrary Address {\\n    /**\\n     * @dev Returns true if `account` is a contract.\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * It is unsafe to assume that an address for which this function returns\\n     * false is an externally-owned account (EOA) and not a contract.\\n     *\\n     * Among others, `isContract` will return false for the following\\n     * types of addresses:\\n     *\\n     *  - an externally-owned account\\n     *  - a contract in construction\\n     *  - an address where a contract will be created\\n     *  - an address where a contract lived, but was destroyed\\n     * ====\\n     */\\n    function isContract(address account) internal view returns (bool) {\\n        // This method relies on extcodesize, which returns 0 for contracts in\\n        // construction, since the code is only stored at the end of the\\n        // constructor execution.\\n\\n        uint256 size;\\n        assembly {\\n            size := extcodesize(account)\\n        }\\n        return size > 0;\\n    }\\n\\n    /**\\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\\n     * `recipient`, forwarding all available gas and reverting on errors.\\n     *\\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\\n     * imposed by `transfer`, making them unable to receive funds via\\n     * `transfer`. {sendValue} removes this limitation.\\n     *\\n     * https://diligence.consensys.net/posts/2019/09/stop-using-soliditys-transfer-now/[Learn more].\\n     *\\n     * IMPORTANT: because control is transferred to `recipient`, care must be\\n     * taken to not create reentrancy vulnerabilities. Consider using\\n     * {ReentrancyGuard} or the\\n     * https://solidity.readthedocs.io/en/v0.5.11/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\\n     */\\n    function sendValue(address payable recipient, uint256 amount) internal {\\n        require(address(this).balance >= amount, \\\"Address: insufficient balance\\\");\\n\\n        (bool success, ) = recipient.call{value: amount}(\\\"\\\");\\n        require(success, \\\"Address: unable to send value, recipient may have reverted\\\");\\n    }\\n\\n    /**\\n     * @dev Performs a Solidity function call using a low level `call`. A\\n     * plain `call` is an unsafe replacement for a function call: use this\\n     * function instead.\\n     *\\n     * If `target` reverts with a revert reason, it is bubbled up by this\\n     * function (like regular Solidity function calls).\\n     *\\n     * Returns the raw returned data. To convert to the expected return value,\\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\\n     *\\n     * Requirements:\\n     *\\n     * - `target` must be a contract.\\n     * - calling `target` with `data` must not revert.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionCall(target, data, \\\"Address: low-level call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\\n     * `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, 0, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but also transferring `value` wei to `target`.\\n     *\\n     * Requirements:\\n     *\\n     * - the calling contract must have an ETH balance of at least `value`.\\n     * - the called Solidity function must be `payable`.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, value, \\\"Address: low-level call with value failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\\n     * with `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        require(address(this).balance >= value, \\\"Address: insufficient balance for call\\\");\\n        require(isContract(target), \\\"Address: call to non-contract\\\");\\n\\n        (bool success, bytes memory returndata) = target.call{value: value}(data);\\n        return verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\\n        return functionStaticCall(target, data, \\\"Address: low-level static call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal view returns (bytes memory) {\\n        require(isContract(target), \\\"Address: static call to non-contract\\\");\\n\\n        (bool success, bytes memory returndata) = target.staticcall(data);\\n        return verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionDelegateCall(target, data, \\\"Address: low-level delegate call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        require(isContract(target), \\\"Address: delegate call to non-contract\\\");\\n\\n        (bool success, bytes memory returndata) = target.delegatecall(data);\\n        return verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Tool to verifies that a low level call was successful, and revert if it wasn't, either by bubbling the\\n     * revert reason using the provided one.\\n     *\\n     * _Available since v4.3._\\n     */\\n    function verifyCallResult(\\n        bool success,\\n        bytes memory returndata,\\n        string memory errorMessage\\n    ) internal pure returns (bytes memory) {\\n        if (success) {\\n            return returndata;\\n        } else {\\n            // Look for revert reason and bubble it up if present\\n            if (returndata.length > 0) {\\n                // The easiest way to bubble the revert reason is using memory via assembly\\n\\n                assembly {\\n                    let returndata_size := mload(returndata)\\n                    revert(add(32, returndata), returndata_size)\\n                }\\n            } else {\\n                revert(errorMessage);\\n            }\\n        }\\n    }\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/access/Ownable.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../utils/Context.sol\\\";\\n\\n/**\\n * @dev Contract module which provides a basic access control mechanism, where\\n * there is an account (an owner) that can be granted exclusive access to\\n * specific functions.\\n *\\n * By default, the owner account will be the one that deploys the contract. This\\n * can later be changed with {transferOwnership}.\\n *\\n * This module is used through inheritance. It will make available the modifier\\n * `onlyOwner`, which can be applied to your functions to restrict their use to\\n * the owner.\\n */\\nabstract contract Ownable is Context {\\n    address private _owner;\\n\\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\\n\\n    /**\\n     * @dev Initializes the contract setting the deployer as the initial owner.\\n     */\\n    constructor() {\\n        _setOwner(_msgSender());\\n    }\\n\\n    /**\\n     * @dev Returns the address of the current owner.\\n     */\\n    function owner() public view virtual returns (address) {\\n        return _owner;\\n    }\\n\\n    /**\\n     * @dev Throws if called by any account other than the owner.\\n     */\\n    modifier onlyOwner() {\\n        require(owner() == _msgSender(), \\\"Ownable: caller is not the owner\\\");\\n        _;\\n    }\\n\\n    /**\\n     * @dev Leaves the contract without owner. It will not be possible to call\\n     * `onlyOwner` functions anymore. Can only be called by the current owner.\\n     *\\n     * NOTE: Renouncing ownership will leave the contract without an owner,\\n     * thereby removing any functionality that is only available to the owner.\\n     */\\n    function renounceOwnership() public virtual onlyOwner {\\n        _setOwner(address(0));\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Can only be called by the current owner.\\n     */\\n    function transferOwnership(address newOwner) public virtual onlyOwner {\\n        require(newOwner != address(0), \\\"Ownable: new owner is the zero address\\\");\\n        _setOwner(newOwner);\\n    }\\n\\n    function _setOwner(address newOwner) private {\\n        address oldOwner = _owner;\\n        _owner = newOwner;\\n        emit OwnershipTransferred(oldOwner, newOwner);\\n    }\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/utils/Context.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Provides information about the current execution context, including the\\n * sender of the transaction and its data. While these are generally available\\n * via msg.sender and msg.data, they should not be accessed in such a direct\\n * manner, since when dealing with meta-transactions the account sending and\\n * paying for execution may not be the actual sender (as far as an application\\n * is concerned).\\n *\\n * This contract is only required for intermediate, library-like contracts.\\n */\\nabstract contract Context {\\n    function _msgSender() internal view virtual returns (address) {\\n        return msg.sender;\\n    }\\n\\n    function _msgData() internal view virtual returns (bytes calldata) {\\n        return msg.data;\\n    }\\n}\\n\"\r\n    }\r\n  },\r\n  \"settings\": {\r\n    \"metadata\": {\r\n      \"useLiteralContent\": true\r\n    },\r\n    \"optimizer\": {\r\n      \"enabled\": true,\r\n      \"runs\": 200\r\n    },\r\n    \"outputSelection\": {\r\n      \"*\": {\r\n        \"*\": [\r\n          \"evm.bytecode\",\r\n          \"evm.deployedBytecode\",\r\n          \"abi\"\r\n        ]\r\n      }\r\n    }\r\n  }\r\n}}","ABI":"[{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"startTime\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"quotaDao\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"quotaCommunity\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"dao\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"timeLock\",\"type\":\"address\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"dao\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"withdrawn\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"available\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"bool\",\"name\":\"community\",\"type\":\"bool\"}],\"name\":\"LogClaimed\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"communityVester\",\"type\":\"address\"}],\"name\":\"LogNewCommunityVester\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"distributer\",\"type\":\"address\"}],\"name\":\"LogNewDistributer\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"dao\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"bool\",\"name\":\"community\",\"type\":\"bool\"}],\"name\":\"LogNewVest\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"withdrawn\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"available\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"bool\",\"name\":\"community\",\"type\":\"bool\"}],\"name\":\"LogPositionHalted\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"withdrawn\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"bool\",\"name\":\"community\",\"type\":\"bool\"}],\"name\":\"LogPositionRemoved\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"COMMUNITY_QUOTA\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"PERCENTAGE_DECIMAL_FACTOR\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"QUOTA\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"TIME_LOCK\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"VESTING_START_TIME\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"baseVest\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"claim\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"communityVester\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"vestingTime\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"vestingCliff\",\"type\":\"uint256\"},{\"internalType\":\"bool\",\"name\":\"community\",\"type\":\"bool\"}],\"name\":\"customVest\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"daoPositions\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"total\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"withdrawn\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"startTime\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"endTime\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"cliff\",\"type\":\"uint256\"},{\"internalType\":\"bool\",\"name\":\"community\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"distributer\",\"outputs\":[{\"internalType\":\"contract IMintable\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"globallyUnlocked\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"unlocked\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"vesting\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"available\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"haltPosition\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"removePosition\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newVester\",\"type\":\"address\"}],\"name\":\"setCommunityVester\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_distributer\",\"type\":\"address\"}],\"name\":\"setDistributer\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"totalBalance\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"balance\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"startDate\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"vest\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"vestedBalance\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"vested\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"available\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"vestingAssets\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"vestingCommunity\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"}]","ContractName":"GRODaoVesting","CompilerVersion":"v0.8.4+commit.c7e474f2","OptimizationUsed":"1","Runs":"200","ConstructorArguments":"0000000000000000000000000000000000000000000000000000000061533c00000000000000000000000000000000000000000000069e10de76676d0800000000000000000000000000000000000000000000000025391ee35a05c54d000000000000000000000000000000359f4fe841f246a095a82cb26f5819e10a91fe0d0000000000000000000000001aebe9147766936906ab56ec0693306da3539824","EVMVersion":"Default","Library":"","LicenseType":"Unknown","Proxy":"0","Implementation":"","SwarmSource":"ipfs://fea46d7345c9e93cefc1f16d608e27c27db1950c3e1c6f9322073b3744e879c6"}]}