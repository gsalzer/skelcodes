{"status":"1","message":"OK","result":[{"SourceCode":"{{\r\n  \"language\": \"Solidity\",\r\n  \"sources\": {\r\n    \"contracts/PaladinZap.sol\": {\r\n      \"content\": \"//██████╗  █████╗ ██╗      █████╗ ██████╗ ██╗███╗   ██╗\\n//██╔══██╗██╔══██╗██║     ██╔══██╗██╔══██╗██║████╗  ██║\\n//██████╔╝███████║██║     ███████║██║  ██║██║██╔██╗ ██║\\n//██╔═══╝ ██╔══██║██║     ██╔══██║██║  ██║██║██║╚██╗██║\\n//██║     ██║  ██║███████╗██║  ██║██████╔╝██║██║ ╚████║\\n//╚═╝     ╚═╝  ╚═╝╚══════╝╚═╝  ╚═╝╚═════╝ ╚═╝╚═╝  ╚═══╝\\n                                                     \\npragma solidity ^0.8.0;\\n//SPDX-License-Identifier: MIT\\n\\n\\nimport \\\"./interfaces/IERC20.sol\\\";\\nimport \\\"./interfaces/IPaladinController.sol\\\";\\nimport \\\"./interfaces/IPalPool.sol\\\";\\nimport \\\"./interfaces/IPalLoanToken.sol\\\";\\nimport \\\"./interfaces/IStakedAave.sol\\\";\\n\\nimport \\\"./utils/Ownable.sol\\\";\\nimport \\\"./utils/Pausable.sol\\\";\\nimport \\\"./utils/SafeERC20.sol\\\";\\n\\n/** @title PaladinZap contract  */\\n/// @author Paladin\\ncontract PalZap is Ownable, Pausable {\\n    using SafeERC20 for IERC20;\\n\\n    //Storage\\n    mapping(address => bool) private allowedSwapTargets;\\n\\n    IPaladinController public controller;\\n    IPalLoanToken public loanToken;\\n\\n    address private aaveAddress;\\n    address private stkAaveAddress;\\n\\n    //Events\\n    event ZapDeposit(address sender, address palPool, uint256 palTokenAmount);\\n    event ZapBorrow(address sender, address palPool, uint256 palLoanTokenId);\\n    event ZapExpandBorrow(address sender, address palPool, address palLoan, uint256 palLoanTokenId);\\n\\n\\n    //Constructor\\n    constructor(\\n        address _controller,\\n        address _loanToken,\\n        address _swapTarget,\\n        address _aaveAddress,\\n        address _stkAaveAddress\\n    ) {\\n        controller = IPaladinController(_controller);\\n        loanToken = IPalLoanToken(_loanToken);\\n\\n        allowedSwapTargets[_swapTarget] = true;\\n\\n        aaveAddress = _aaveAddress;\\n        stkAaveAddress = _stkAaveAddress;\\n    }\\n\\n\\n    //Functions\\n    function zapDeposit(\\n        address _fromTokenAddress,\\n        address _toTokenAddress,\\n        address _poolAddress,\\n        uint256 _amount,\\n        address _swapTarget,\\n        address _allowanceTarget,\\n        bytes memory _swapData\\n    ) external payable whenNotPaused returns(uint){\\n        //Check valid PalPool Address\\n        require(controller.isPalPool(_poolAddress), \\\"Paladin Zap : Incorrect PalPool\\\");\\n        IPalPool _pool = IPalPool(_poolAddress);\\n\\n        //Check input values\\n        require(\\n            _toTokenAddress!= address(0) && _poolAddress!= address(0) && _swapTarget!= address(0),\\n            \\\"Paladin Zap : Zero Address\\\"\\n        );\\n        require(_amount > 0 || msg.value > 0 , \\\"Paladin Zap : Zero amount\\\");\\n        require(_toTokenAddress == _pool.underlying(), \\\"Paladin Zap : Incorrect toToken\\\");\\n\\n        //Pull the fromToken to the Zap\\n        uint _pulledAmount = _pullTokens(_fromTokenAddress, _amount);\\n\\n        //Check the swapTarget is allowed in the Zap\\n        require(allowedSwapTargets[_swapTarget], \\\"Paladin Zap : SwapTarget not allowed\\\");\\n\\n        //Make the swap and receive the fromToken\\n        uint _receivedAmount = _makeSwap(_fromTokenAddress, _toTokenAddress, _pulledAmount, _swapTarget, _allowanceTarget, _swapData);\\n\\n        //Deposit the fromToken to the PalPool and receive palTokens\\n        uint _palTokenAmount = _depositInPool(_toTokenAddress, _poolAddress, _receivedAmount);\\n\\n        //Send the palTokens to the user\\n        address _palTokenAddress = _pool.palToken();\\n        IERC20(_palTokenAddress).safeTransfer(msg.sender, _palTokenAmount);\\n\\n        //emit Event\\n        emit ZapDeposit(msg.sender, _poolAddress, _palTokenAmount);\\n\\n        return _palTokenAmount;\\n    }\\n\\n    function zapBorrow(\\n        address _fromTokenAddress,\\n        address _toTokenAddress,\\n        address _poolAddress,\\n        address _delegatee,\\n        uint256 _borrowAmount,\\n        uint256 _feesAmount,\\n        address _swapTarget,\\n        address _allowanceTarget,\\n        bytes memory _swapData\\n    ) external payable whenNotPaused returns(uint){\\n        //Check valid PalPool Address\\n        require(controller.isPalPool(_poolAddress), \\\"Paladin Zap : Incorrect PalPool\\\");\\n        IPalPool _pool = IPalPool(_poolAddress);\\n\\n        //Check input values\\n        require(\\n            _toTokenAddress!= address(0) && _poolAddress!= address(0) && _delegatee!= address(0) && _swapTarget!= address(0),\\n            \\\"Paladin Zap : Zero Address\\\"\\n        );\\n        require(_borrowAmount > 0 && (_feesAmount > 0 || msg.value > 0), \\\"Paladin Zap : Zero amount\\\");\\n        require(_toTokenAddress == _pool.underlying(), \\\"Paladin Zap : Incorrect toToken\\\");\\n\\n        //Pull the fromToken to the Zap\\n        uint _pulledAmount = _pullTokens(_fromTokenAddress, _feesAmount);\\n\\n        //Check the swapTarget is allowed in the Zap\\n        require(allowedSwapTargets[_swapTarget], \\\"Paladin Zap : SwapTarget not allowed\\\");\\n\\n        //Make the swap and receive the fromToken\\n        uint _receivedAmount = _makeSwap(_fromTokenAddress, _toTokenAddress, _pulledAmount, _swapTarget, _allowanceTarget, _swapData);\\n\\n        uint _minBorrowAmount = _pool.minBorrowFees(_borrowAmount);\\n        require(_receivedAmount >= _minBorrowAmount, \\\"Paladin Zap : Fee amount too low\\\");\\n\\n        //Make the Borrow to the PalPool, and get the new PalLoanToken Id\\n        uint _newTokenId = _borrowFromPool(_toTokenAddress, _poolAddress, _delegatee, _borrowAmount, _receivedAmount);\\n\\n        //Check the Zap received the PalLoanToken\\n        require(\\n            loanToken.ownerOf(_newTokenId) == address(this),\\n            \\\"Paladin Zap : PalPool Borrow failed\\\"\\n        );\\n\\n        //Send the PalLoanToken to the user\\n        loanToken.safeTransferFrom(address(this), msg.sender, _newTokenId);\\n\\n        //emit Event\\n        emit ZapBorrow(msg.sender, _poolAddress, _newTokenId);\\n\\n        return _newTokenId;\\n    }\\n\\n\\n    function zapExpandBorrow(\\n        address _fromTokenAddress,\\n        address _toTokenAddress,\\n        address _loanAddress,\\n        address _poolAddress,\\n        uint256 _amount,\\n        address _swapTarget,\\n        address _allowanceTarget,\\n        bytes memory _swapData\\n    ) external payable whenNotPaused returns(bool){\\n        //Check valid PalPool Address\\n        require(controller.isPalPool(_poolAddress), \\\"Paladin Zap : Incorrect PalPool\\\");\\n        IPalPool _pool = IPalPool(_poolAddress);\\n\\n        //Check input values\\n        require(\\n            _toTokenAddress!= address(0) && _poolAddress!= address(0) && _loanAddress!= address(0) && _swapTarget!= address(0),\\n            \\\"Paladin Zap : Zero Address\\\"\\n        );\\n        require(_amount > 0 || msg.value > 0 , \\\"Paladin Zap : Zero amount\\\");\\n        require(_toTokenAddress == _pool.underlying(), \\\"Paladin Zap : Incorrect toToken\\\");\\n\\n        //Check PalLoan ownership\\n        require(_pool.isLoanOwner(_loanAddress, msg.sender), \\\"Paladin Zap : Not PalLoan owner\\\");\\n\\n        uint _tokenId = _pool.idOfLoan(_loanAddress);\\n\\n        //Check PalLoan is linked to the given PalPool\\n        require(loanToken.poolOf(_tokenId) == _poolAddress, \\\"Paladin Zap : Incorrect PalPool\\\");\\n\\n        //Check allowance to transfer the PalLoanToken\\n        require(loanToken.isApprovedForAll(msg.sender, address(this)), \\\"Paladin Zap : Not approved for PalLoanToken\\\");\\n\\n        //Transfer PalLoanToken to Zap\\n        loanToken.safeTransferFrom(msg.sender, address(this), _tokenId);\\n\\n        //Pull the fromToken to the Zap\\n        uint _pulledAmount = _pullTokens(_fromTokenAddress, _amount);\\n\\n        //Check the swapTarget is allowed in the Zap\\n        require(allowedSwapTargets[_swapTarget], \\\"Paladin Zap : SwapTarget not allowed\\\");\\n\\n        //Make the swap and receive the fromToken\\n        uint _receivedAmount = _makeSwap(_fromTokenAddress, _toTokenAddress, _pulledAmount, _swapTarget, _allowanceTarget, _swapData);\\n\\n        //Pay fees of the PalLoan\\n        _increaseFees(_toTokenAddress, _loanAddress, _poolAddress, _receivedAmount);\\n\\n        //Return the PalLoanToken to the user\\n        loanToken.safeTransferFrom(address(this), msg.sender, _tokenId);\\n\\n        //emit Event\\n        emit ZapExpandBorrow(msg.sender, _poolAddress, _loanAddress, _tokenId);\\n\\n        return true;\\n    }\\n\\n\\n\\n\\n\\n    //Internal Functions\\n    function _pullTokens(\\n        address _fromTokenAddress,\\n        uint256 _amount\\n    ) internal returns(uint256 _receivedAmount) {\\n        if(_fromTokenAddress == address(0)){\\n            require(msg.value > 0 , \\\"Paladin Zap : No ETH received\\\");\\n\\n            return msg.value;\\n        }\\n        \\n        require(_amount > 0 , \\\"Paladin Zap : Token amount null\\\");\\n        require(msg.value == 0, \\\"Paladin Zap : Multiple tokens sent\\\");\\n\\n        IERC20 _fromToken = IERC20(_fromTokenAddress);\\n\\n        require(_fromToken.allowance(msg.sender, address(this)) >= _amount, \\\"Paladin Zap : Allowance too low\\\");\\n\\n        _fromToken.safeTransferFrom(msg.sender, address(this), _amount);\\n\\n        return _amount;\\n    }\\n\\n\\n    function _getRevertMsg(bytes memory _returnData) internal pure returns (string memory) {\\n        if (_returnData.length < 68) return 'Transaction reverted silently';\\n    \\n        assembly {\\n            _returnData := add(_returnData, 0x04)\\n        }\\n\\n        return abi.decode(_returnData, (string));\\n    }\\n\\n    function _makeSwap(\\n        address _fromTokenAddress,\\n        address _toTokenAddress,\\n        uint256 _amount,\\n        address _swapTarget,\\n        address _allowanceTarget,\\n        bytes memory _swapData\\n    ) internal returns(uint256 _returnAmount) {\\n        //same token\\n        if(_fromTokenAddress == _toTokenAddress){\\n            return _amount;\\n        }\\n\\n        //AAVE -> stkAAVE : just need to stake in the Safety Module\\n        if(_fromTokenAddress == aaveAddress && _toTokenAddress == stkAaveAddress){\\n            return _stakeInAave(_amount);\\n        }\\n\\n        //If output token is stkAAVE -> swap to AAVE then stake in the Safety Module \\n        address _outputTokenAddress = _toTokenAddress;\\n        if(_toTokenAddress == stkAaveAddress){\\n            _outputTokenAddress = aaveAddress;\\n        }\\n\\n        uint256 _valueSwap;\\n        if (_fromTokenAddress == address(0)) {\\n            _valueSwap = _amount;\\n        } else {\\n            IERC20(_fromTokenAddress).safeIncreaseAllowance(_allowanceTarget, _amount);\\n        }\\n\\n        IERC20 _outputToken = IERC20(_outputTokenAddress);\\n        uint256 _intitialBalance = _outputToken.balanceOf(address(this));\\n\\n        //Make the swap\\n        (bool _success, bytes memory _res) = _swapTarget.call{ value: _valueSwap }(_swapData);\\n        require(_success, _getRevertMsg(_res));\\n\\n        _returnAmount = _outputToken.balanceOf(address(this)) - _intitialBalance;\\n\\n        //If the swap return AAVE, stake them to get stkAAVE\\n        if(_toTokenAddress == stkAaveAddress){\\n            _returnAmount = _stakeInAave(_amount);\\n        }\\n\\n        require(_returnAmount > 0, \\\"Paladin Zap : Swap output null\\\");\\n    }\\n\\n\\n    function _stakeInAave(\\n        uint256 _amount\\n    ) internal returns(uint256 _stakedAmount) {\\n        IStakedAave _stkAave = IStakedAave(stkAaveAddress);\\n\\n        uint256 _initialBalance = _stkAave.balanceOf(address(this));\\n\\n        IERC20(aaveAddress).safeApprove(stkAaveAddress, _amount);\\n        _stkAave.stake(address(this), _amount);\\n\\n        uint256 _newBalance = _stkAave.balanceOf(address(this));\\n        _stakedAmount = _newBalance - _initialBalance;\\n\\n        require(_stakedAmount == _amount, \\\"Paladin Zap : Error staking in Aave\\\");\\n\\n    }\\n\\n\\n    function _depositInPool(\\n        address _tokenAddress,\\n        address _poolAddress,\\n        uint256 _amount\\n    ) internal returns(uint256 _palTokenAmount) {\\n        IPalPool _pool = IPalPool(_poolAddress);\\n        IERC20 _palToken = IERC20(_pool.palToken());\\n\\n        uint256 _initialBalance = _palToken.balanceOf(address(this));\\n\\n        IERC20(_tokenAddress).safeApprove(_poolAddress, _amount);\\n\\n        _palTokenAmount = _pool.deposit(_amount);\\n\\n        uint256 _newBalance = _palToken.balanceOf(address(this));\\n\\n        require(_newBalance - _initialBalance == _palTokenAmount, \\\"Paladin Zap : Error depositing in PalPool\\\");\\n        \\n    }\\n\\n\\n    function _borrowFromPool(\\n        address _tokenAddress,\\n        address _poolAddress,\\n        address _delegatee,\\n        uint256 _borrowAmount,\\n        uint256 _feesAmount\\n    ) internal returns(uint256 _tokenId) {\\n        IERC20(_tokenAddress).safeApprove(_poolAddress, _feesAmount);\\n\\n        _tokenId = IPalPool(_poolAddress).borrow(_delegatee, _borrowAmount, _feesAmount);\\n    }\\n\\n\\n    function _increaseFees(\\n        address _tokenAddress,\\n        address _loanAddress,\\n        address _poolAddress,\\n        uint256 _feesAmount\\n    ) internal returns(bool) {\\n        IERC20(_tokenAddress).safeApprove(_poolAddress, _feesAmount);\\n\\n        uint _paidFees = IPalPool(_poolAddress).expandBorrow(_loanAddress, _feesAmount);\\n\\n        require(_feesAmount == _paidFees ,\\\"Paladin Zap : Error expanding Borrow\\\");\\n\\n        return true;\\n    }\\n\\n\\n    //Admin Functions\\n\\n    // In case tokens are stuck in the contract\\n    function sendToken(address _tokenAddress, address payable _recipient) external onlyOwner {\\n        if(_tokenAddress == address(0)){\\n            Address.sendValue(_recipient, address(this).balance);\\n        }\\n        else{\\n            IERC20(_tokenAddress).safeTransfer(_recipient, IERC20(_tokenAddress).balanceOf(address(this)));\\n        }\\n    }\\n\\n    /**\\n    * @notice Set a new Controller\\n    * @dev Loads the new Controller for the Pool\\n    * @param  _newController address of the new Controller\\n    */\\n    function setNewController(address _newController) external onlyOwner {\\n        controller = IPaladinController(_newController);\\n    }\\n\\n    function setNewPalLoanToken(address _newPalLoanToken) external onlyOwner {\\n        loanToken = IPalLoanToken(_newPalLoanToken);\\n    }\\n\\n\\n    function addSwapTarget(address _swapTarget) external onlyOwner {\\n        allowedSwapTargets[_swapTarget] = true;\\n    }\\n\\n\\n\\n    receive() external payable {\\n        require(msg.sender != tx.origin, \\\"Paladin Zap : Do not send ETH directly\\\");\\n    }\\n\\n}\"\r\n    },\r\n    \"contracts/interfaces/IERC20.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC20 standard as defined in the EIP.\\n */\\ninterface IERC20 {\\n    /**\\n     * @dev Returns the amount of tokens in existence.\\n     */\\n    function totalSupply() external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the amount of tokens owned by `account`.\\n     */\\n    function balanceOf(address account) external view returns (uint256);\\n\\n    /**\\n     * @dev Moves `amount` tokens from the caller's account to `recipient`.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transfer(address recipient, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Returns the remaining number of tokens that `spender` will be\\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\\n     * zero by default.\\n     *\\n     * This value changes when {approve} or {transferFrom} are called.\\n     */\\n    function allowance(address owner, address spender) external view returns (uint256);\\n\\n    /**\\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\\n     * that someone may use both the old and the new allowance by unfortunate\\n     * transaction ordering. One possible solution to mitigate this race\\n     * condition is to first reduce the spender's allowance to 0 and set the\\n     * desired value afterwards:\\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address spender, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Moves `amount` tokens from `sender` to `recipient` using the\\n     * allowance mechanism. `amount` is then deducted from the caller's\\n     * allowance.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(\\n        address sender,\\n        address recipient,\\n        uint256 amount\\n    ) external returns (bool);\\n\\n    /**\\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\\n     * another (`to`).\\n     *\\n     * Note that `value` may be zero.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 value);\\n\\n    /**\\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\\n     * a call to {approve}. `value` is the new allowance.\\n     */\\n    event Approval(address indexed owner, address indexed spender, uint256 value);\\n}\"\r\n    },\r\n    \"contracts/interfaces/IPaladinController.sol\": {\r\n      \"content\": \"//██████╗  █████╗ ██╗      █████╗ ██████╗ ██╗███╗   ██╗\\n//██╔══██╗██╔══██╗██║     ██╔══██╗██╔══██╗██║████╗  ██║\\n//██████╔╝███████║██║     ███████║██║  ██║██║██╔██╗ ██║\\n//██╔═══╝ ██╔══██║██║     ██╔══██║██║  ██║██║██║╚██╗██║\\n//██║     ██║  ██║███████╗██║  ██║██████╔╝██║██║ ╚████║\\n//╚═╝     ╚═╝  ╚═╝╚══════╝╚═╝  ╚═╝╚═════╝ ╚═╝╚═╝  ╚═══╝\\n                                                     \\n\\npragma solidity ^0.8.0;\\n//SPDX-License-Identifier: MIT\\n\\n/** @title Paladin Controller Interface  */\\n/// @author Paladin\\ninterface IPaladinController {\\n    \\n    function isPalPool(address pool) external view returns(bool);\\n\\n}\"\r\n    },\r\n    \"contracts/interfaces/IPalPool.sol\": {\r\n      \"content\": \"//██████╗  █████╗ ██╗      █████╗ ██████╗ ██╗███╗   ██╗\\n//██╔══██╗██╔══██╗██║     ██╔══██╗██╔══██╗██║████╗  ██║\\n//██████╔╝███████║██║     ███████║██║  ██║██║██╔██╗ ██║\\n//██╔═══╝ ██╔══██║██║     ██╔══██║██║  ██║██║██║╚██╗██║\\n//██║     ██║  ██║███████╗██║  ██║██████╔╝██║██║ ╚████║\\n//╚═╝     ╚═╝  ╚═╝╚══════╝╚═╝  ╚═╝╚═════╝ ╚═╝╚═╝  ╚═══╝\\n                                                     \\n\\npragma solidity ^0.8.0;\\npragma abicoder v2;\\n//SPDX-License-Identifier: MIT\\n\\n/** @title palPool Interface  */\\n/// @author Paladin\\ninterface IPalPool {\\n\\n    //Events\\n    /** @notice Event when an user deposit tokens in the pool */\\n    event Deposit(address user, uint amount, address palPool);\\n    /** @notice Event when an user withdraw tokens from the pool */\\n    event Withdraw(address user, uint amount, address palPool);\\n    /** @notice Event when a loan is started */\\n    event NewLoan(\\n        address borrower,\\n        address delegatee,\\n        address underlying,\\n        uint amount,\\n        address palPool,\\n        address loanAddress,\\n        uint256 palLoanTokenId,\\n        uint startBlock);\\n    /** @notice Event when the fee amount in the loan is updated */\\n    event ExpandLoan(\\n        address borrower,\\n        address delegatee,\\n        address underlying,\\n        address palPool,\\n        uint newFeesAmount,\\n        address loanAddress,\\n        uint256 palLoanTokenId\\n    );\\n    /** @notice Event when the delegatee of the loan is updated */\\n    event ChangeLoanDelegatee(\\n        address borrower,\\n        address newDelegatee,\\n        address underlying,\\n        address palPool,\\n        address loanAddress,\\n        uint256 palLoanTokenId\\n    );\\n    /** @notice Event when a loan is ended */\\n    event CloseLoan(\\n        address borrower,\\n        address delegatee,\\n        address underlying,\\n        uint amount,\\n        address palPool,\\n        uint usedFees,\\n        address loanAddress,\\n        uint256 palLoanTokenId,\\n        bool wasKilled\\n    );\\n\\n    /** @notice Reserve Events */\\n    event AddReserve(uint amount);\\n    event RemoveReserve(uint amount);\\n\\n\\n    function underlying() external view returns(address);\\n    function palToken() external view returns(address);\\n\\n    //Functions\\n    function deposit(uint _amount) external returns(uint);\\n    function withdraw(uint _amount) external returns(uint);\\n    \\n    function borrow(address _delegatee, uint _amount, uint _feeAmount) external returns(uint);\\n    function expandBorrow(address _loanPool, uint _feeAmount) external returns(uint);\\n    function closeBorrow(address _loanPool) external;\\n    function killBorrow(address _loanPool) external;\\n    function changeBorrowDelegatee(address _loanPool, address _newDelegatee) external;\\n\\n    function balanceOf(address _account) external view returns(uint);\\n    function underlyingBalanceOf(address _account) external view returns(uint);\\n\\n    function isLoanOwner(address _loanAddress, address _user) external view returns(bool);\\n    function idOfLoan(address _loanAddress) external view returns(uint256);\\n\\n    function getLoansPools() external view returns(address [] memory);\\n    function getLoansByBorrower(address _borrower) external view returns(address [] memory);\\n    function getBorrowData(address _loanAddress) external view returns(\\n        address _borrower,\\n        address _delegatee,\\n        address _loanPool,\\n        uint256 _palLoanTokenId,\\n        uint _amount,\\n        address _underlying,\\n        uint _feesAmount,\\n        uint _feesUsed,\\n        uint _startBlock,\\n        uint _closeBlock,\\n        bool _closed,\\n        bool _killed\\n    );\\n\\n    function borrowRatePerBlock() external view returns (uint);\\n    function supplyRatePerBlock() external view returns (uint);\\n\\n    function exchangeRateCurrent() external returns (uint);\\n    function exchangeRateStored() external view returns (uint);\\n\\n    function minBorrowFees(uint _amount) external view returns (uint);\\n\\n    function isKillable(address _loan) external view returns(bool);\\n\\n    //Admin functions : \\n    function setNewController(address _newController) external;\\n    function setNewInterestModule(address _interestModule) external;\\n    function setNewDelegator(address _delegator) external;\\n\\n    function updateMinBorrowLength(uint _length) external;\\n    function updatePoolFactors(uint _reserveFactor, uint _killerRatio) external;\\n\\n    function addReserve(uint _amount) external;\\n    function removeReserve(uint _amount, address _recipient) external;\\n\\n}\"\r\n    },\r\n    \"contracts/interfaces/IPalLoanToken.sol\": {\r\n      \"content\": \"//██████╗  █████╗ ██╗      █████╗ ██████╗ ██╗███╗   ██╗\\n//██╔══██╗██╔══██╗██║     ██╔══██╗██╔══██╗██║████╗  ██║\\n//██████╔╝███████║██║     ███████║██║  ██║██║██╔██╗ ██║\\n//██╔═══╝ ██╔══██║██║     ██╔══██║██║  ██║██║██║╚██╗██║\\n//██║     ██║  ██║███████╗██║  ██║██████╔╝██║██║ ╚████║\\n//╚═╝     ╚═╝  ╚═╝╚══════╝╚═╝  ╚═╝╚═════╝ ╚═╝╚═╝  ╚═══╝\\n                                                     \\n\\npragma solidity ^0.8.0;\\npragma abicoder v2;\\n//SPDX-License-Identifier: MIT\\n\\nimport \\\"./IERC721.sol\\\";\\n\\n/** @title palLoanToken Interface  */\\n/// @author Paladin\\ninterface IPalLoanToken is IERC721 {\\n\\n    //Events\\n\\n    /** @notice Event when a new Loan Token is minted */\\n    event NewLoanToken(address palPool, address indexed owner, address indexed palLoan, uint256 indexed tokenId);\\n    /** @notice Event when a Loan Token is burned */\\n    event BurnLoanToken(address palPool, address indexed owner, address indexed palLoan, uint256 indexed tokenId);\\n\\n\\n    //Functions\\n    function mint(address to, address palPool, address palLoan) external returns(uint256);\\n    function burn(uint256 tokenId) external returns(bool);\\n\\n    function tokenURI(uint256 tokenId) external view returns (string memory);\\n\\n    function tokenOfByIndex(address owner, uint256 tokenIdex) external view returns (uint256);\\n    function loanOf(uint256 tokenId) external view returns(address);\\n    function poolOf(uint256 tokenId) external view returns(address);\\n    function loansOf(address owner) external view returns(address[] memory);\\n    function tokensOf(address owner) external view returns(uint256[] memory);\\n    function loansOfForPool(address owner, address palPool) external view returns(address[] memory);\\n    function allTokensOf(address owner) external view returns(uint256[] memory);\\n    function allLoansOf(address owner) external view returns(address[] memory);\\n    function allLoansOfForPool(address owner, address palPool) external view returns(address[] memory);\\n    function allOwnerOf(uint256 tokenId) external view returns(address);\\n\\n    function isBurned(uint256 tokenId) external view returns(bool);\\n\\n    //Admin functions\\n    function setNewController(address _newController) external;\\n    function setNewBaseURI(string memory _newBaseURI) external;\\n\\n}\"\r\n    },\r\n    \"contracts/interfaces/IStakedAave.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: agpl-3.0\\npragma solidity ^0.8.0;\\n\\ninterface IStakedAave {\\n    function stake(address to, uint256 amount) external;\\n    function balanceOf(address account) external view returns (uint256);\\n}\"\r\n    },\r\n    \"contracts/utils/Ownable.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"./Context.sol\\\";\\n\\n/**\\n * @dev Contract module which provides a basic access control mechanism, where\\n * there is an account (an owner) that can be granted exclusive access to\\n * specific functions.\\n *\\n * By default, the owner account will be the one that deploys the contract. This\\n * can later be changed with {transferOwnership}.\\n *\\n * This module is used through inheritance. It will make available the modifier\\n * `onlyOwner`, which can be applied to your functions to restrict their use to\\n * the owner.\\n */\\nabstract contract Ownable is Context {\\n    address private _owner;\\n\\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\\n\\n    /**\\n     * @dev Initializes the contract setting the deployer as the initial owner.\\n     */\\n    constructor() {\\n        _setOwner(_msgSender());\\n    }\\n\\n    /**\\n     * @dev Returns the address of the current owner.\\n     */\\n    function owner() public view virtual returns (address) {\\n        return _owner;\\n    }\\n\\n    /**\\n     * @dev Throws if called by any account other than the owner.\\n     */\\n    modifier onlyOwner() {\\n        require(owner() == _msgSender(), \\\"Ownable: caller is not the owner\\\");\\n        _;\\n    }\\n\\n    /**\\n     * @dev Leaves the contract without owner. It will not be possible to call\\n     * `onlyOwner` functions anymore. Can only be called by the current owner.\\n     *\\n     * NOTE: Renouncing ownership will leave the contract without an owner,\\n     * thereby removing any functionality that is only available to the owner.\\n     */\\n    function renounceOwnership() public virtual onlyOwner {\\n        _setOwner(address(0));\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Can only be called by the current owner.\\n     */\\n    function transferOwnership(address newOwner) public virtual onlyOwner {\\n        require(newOwner != address(0), \\\"Ownable: new owner is the zero address\\\");\\n        _setOwner(newOwner);\\n    }\\n\\n    function _setOwner(address newOwner) private {\\n        address oldOwner = _owner;\\n        _owner = newOwner;\\n        emit OwnershipTransferred(oldOwner, newOwner);\\n    }\\n}\"\r\n    },\r\n    \"contracts/utils/Pausable.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"./Context.sol\\\";\\n\\n/**\\n * @dev Contract module which allows children to implement an emergency stop\\n * mechanism that can be triggered by an authorized account.\\n *\\n * This module is used through inheritance. It will make available the\\n * modifiers `whenNotPaused` and `whenPaused`, which can be applied to\\n * the functions of your contract. Note that they will not be pausable by\\n * simply including this module, only once the modifiers are put in place.\\n */\\nabstract contract Pausable is Context {\\n    /**\\n     * @dev Emitted when the pause is triggered by `account`.\\n     */\\n    event Paused(address account);\\n\\n    /**\\n     * @dev Emitted when the pause is lifted by `account`.\\n     */\\n    event Unpaused(address account);\\n\\n    bool private _paused;\\n\\n    /**\\n     * @dev Initializes the contract in unpaused state.\\n     */\\n    constructor() {\\n        _paused = false;\\n    }\\n\\n    /**\\n     * @dev Returns true if the contract is paused, and false otherwise.\\n     */\\n    function paused() public view virtual returns (bool) {\\n        return _paused;\\n    }\\n\\n    /**\\n     * @dev Modifier to make a function callable only when the contract is not paused.\\n     *\\n     * Requirements:\\n     *\\n     * - The contract must not be paused.\\n     */\\n    modifier whenNotPaused() {\\n        require(!paused(), \\\"Pausable: paused\\\");\\n        _;\\n    }\\n\\n    /**\\n     * @dev Modifier to make a function callable only when the contract is paused.\\n     *\\n     * Requirements:\\n     *\\n     * - The contract must be paused.\\n     */\\n    modifier whenPaused() {\\n        require(paused(), \\\"Pausable: not paused\\\");\\n        _;\\n    }\\n\\n    /**\\n     * @dev Triggers stopped state.\\n     *\\n     * Requirements:\\n     *\\n     * - The contract must not be paused.\\n     */\\n    function _pause() internal virtual whenNotPaused {\\n        _paused = true;\\n        emit Paused(_msgSender());\\n    }\\n\\n    /**\\n     * @dev Returns to normal state.\\n     *\\n     * Requirements:\\n     *\\n     * - The contract must be paused.\\n     */\\n    function _unpause() internal virtual whenPaused {\\n        _paused = false;\\n        emit Unpaused(_msgSender());\\n    }\\n}\"\r\n    },\r\n    \"contracts/utils/SafeERC20.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../interfaces/IERC20.sol\\\";\\nimport \\\"./Address.sol\\\";\\n\\n/**\\n * @title SafeERC20\\n * @dev Wrappers around ERC20 operations that throw on failure (when the token\\n * contract returns false). Tokens that return no value (and instead revert or\\n * throw on failure) are also supported, non-reverting calls are assumed to be\\n * successful.\\n * To use this library you can add a `using SafeERC20 for IERC20;` statement to your contract,\\n * which allows you to call the safe operations as `token.safeTransfer(...)`, etc.\\n */\\nlibrary SafeERC20 {\\n    using Address for address;\\n\\n    function safeTransfer(\\n        IERC20 token,\\n        address to,\\n        uint256 value\\n    ) internal {\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.transfer.selector, to, value));\\n    }\\n\\n    function safeTransferFrom(\\n        IERC20 token,\\n        address from,\\n        address to,\\n        uint256 value\\n    ) internal {\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.transferFrom.selector, from, to, value));\\n    }\\n\\n    /**\\n     * @dev Deprecated. This function has issues similar to the ones found in\\n     * {IERC20-approve}, and its usage is discouraged.\\n     *\\n     * Whenever possible, use {safeIncreaseAllowance} and\\n     * {safeDecreaseAllowance} instead.\\n     */\\n    function safeApprove(\\n        IERC20 token,\\n        address spender,\\n        uint256 value\\n    ) internal {\\n        // safeApprove should only be called when setting an initial allowance,\\n        // or when resetting it to zero. To increase and decrease it, use\\n        // 'safeIncreaseAllowance' and 'safeDecreaseAllowance'\\n        require(\\n            (value == 0) || (token.allowance(address(this), spender) == 0),\\n            \\\"SafeERC20: approve from non-zero to non-zero allowance\\\"\\n        );\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, value));\\n    }\\n\\n    function safeIncreaseAllowance(\\n        IERC20 token,\\n        address spender,\\n        uint256 value\\n    ) internal {\\n        uint256 newAllowance = token.allowance(address(this), spender) + value;\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));\\n    }\\n\\n    function safeDecreaseAllowance(\\n        IERC20 token,\\n        address spender,\\n        uint256 value\\n    ) internal {\\n        unchecked {\\n            uint256 oldAllowance = token.allowance(address(this), spender);\\n            require(oldAllowance >= value, \\\"SafeERC20: decreased allowance below zero\\\");\\n            uint256 newAllowance = oldAllowance - value;\\n            _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));\\n        }\\n    }\\n\\n    /**\\n     * @dev Imitates a Solidity high-level call (i.e. a regular function call to a contract), relaxing the requirement\\n     * on the return value: the return value is optional (but if data is returned, it must not be false).\\n     * @param token The token targeted by the call.\\n     * @param data The call data (encoded using abi.encode or one of its variants).\\n     */\\n    function _callOptionalReturn(IERC20 token, bytes memory data) private {\\n        // We need to perform a low level call here, to bypass Solidity's return data size checking mechanism, since\\n        // we're implementing it ourselves. We use {Address.functionCall} to perform this call, which verifies that\\n        // the target address contains contract code and also asserts for success in the low-level call.\\n\\n        bytes memory returndata = address(token).functionCall(data, \\\"SafeERC20: low-level call failed\\\");\\n        if (returndata.length > 0) {\\n            // Return data is optional\\n            require(abi.decode(returndata, (bool)), \\\"SafeERC20: ERC20 operation did not succeed\\\");\\n        }\\n    }\\n}\"\r\n    },\r\n    \"contracts/interfaces/IERC721.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"./IERC165.sol\\\";\\n\\n/**\\n * @dev Required interface of an ERC721 compliant contract.\\n */\\ninterface IERC721 is IERC165 {\\n    /**\\n     * @dev Emitted when `tokenId` token is transferred from `from` to `to`.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 indexed tokenId);\\n\\n    /**\\n     * @dev Emitted when `owner` enables `approved` to manage the `tokenId` token.\\n     */\\n    event Approval(address indexed owner, address indexed approved, uint256 indexed tokenId);\\n\\n    /**\\n     * @dev Emitted when `owner` enables or disables (`approved`) `operator` to manage all of its assets.\\n     */\\n    event ApprovalForAll(address indexed owner, address indexed operator, bool approved);\\n\\n    /**\\n     * @dev Returns the number of tokens in ``owner``'s account.\\n     */\\n    function balanceOf(address owner) external view returns (uint256 balance);\\n\\n    /**\\n     * @dev Returns the owner of the `tokenId` token.\\n     *\\n     * Requirements:\\n     *\\n     * - `tokenId` must exist.\\n     */\\n    function ownerOf(uint256 tokenId) external view returns (address owner);\\n\\n    /**\\n     * @dev Safely transfers `tokenId` token from `from` to `to`, checking first that contract recipients\\n     * are aware of the ERC721 protocol to prevent tokens from being forever locked.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` cannot be the zero address.\\n     * - `to` cannot be the zero address.\\n     * - `tokenId` token must exist and be owned by `from`.\\n     * - If the caller is not `from`, it must be have been allowed to move this token by either {approve} or {setApprovalForAll}.\\n     * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function safeTransferFrom(\\n        address from,\\n        address to,\\n        uint256 tokenId\\n    ) external;\\n\\n    /**\\n     * @dev Transfers `tokenId` token from `from` to `to`.\\n     *\\n     * WARNING: Usage of this method is discouraged, use {safeTransferFrom} whenever possible.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` cannot be the zero address.\\n     * - `to` cannot be the zero address.\\n     * - `tokenId` token must be owned by `from`.\\n     * - If the caller is not `from`, it must be approved to move this token by either {approve} or {setApprovalForAll}.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(\\n        address from,\\n        address to,\\n        uint256 tokenId\\n    ) external;\\n\\n    /**\\n     * @dev Gives permission to `to` to transfer `tokenId` token to another account.\\n     * The approval is cleared when the token is transferred.\\n     *\\n     * Only a single account can be approved at a time, so approving the zero address clears previous approvals.\\n     *\\n     * Requirements:\\n     *\\n     * - The caller must own the token or be an approved operator.\\n     * - `tokenId` must exist.\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address to, uint256 tokenId) external;\\n\\n    /**\\n     * @dev Returns the account approved for `tokenId` token.\\n     *\\n     * Requirements:\\n     *\\n     * - `tokenId` must exist.\\n     */\\n    function getApproved(uint256 tokenId) external view returns (address operator);\\n\\n    /**\\n     * @dev Approve or remove `operator` as an operator for the caller.\\n     * Operators can call {transferFrom} or {safeTransferFrom} for any token owned by the caller.\\n     *\\n     * Requirements:\\n     *\\n     * - The `operator` cannot be the caller.\\n     *\\n     * Emits an {ApprovalForAll} event.\\n     */\\n    function setApprovalForAll(address operator, bool _approved) external;\\n\\n    /**\\n     * @dev Returns if the `operator` is allowed to manage all of the assets of `owner`.\\n     *\\n     * See {setApprovalForAll}\\n     */\\n    function isApprovedForAll(address owner, address operator) external view returns (bool);\\n\\n    /**\\n     * @dev Safely transfers `tokenId` token from `from` to `to`.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` cannot be the zero address.\\n     * - `to` cannot be the zero address.\\n     * - `tokenId` token must exist and be owned by `from`.\\n     * - If the caller is not `from`, it must be approved to move this token by either {approve} or {setApprovalForAll}.\\n     * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function safeTransferFrom(\\n        address from,\\n        address to,\\n        uint256 tokenId,\\n        bytes calldata data\\n    ) external;\\n}\\n\"\r\n    },\r\n    \"contracts/interfaces/IERC165.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC165 standard, as defined in the\\n * https://eips.ethereum.org/EIPS/eip-165[EIP].\\n *\\n * Implementers can declare support of contract interfaces, which can then be\\n * queried by others ({ERC165Checker}).\\n *\\n * For an implementation, see {ERC165}.\\n */\\ninterface IERC165 {\\n    /**\\n     * @dev Returns true if this contract implements the interface defined by\\n     * `interfaceId`. See the corresponding\\n     * https://eips.ethereum.org/EIPS/eip-165#how-interfaces-are-identified[EIP section]\\n     * to learn more about how these ids are created.\\n     *\\n     * This function call must use less than 30 000 gas.\\n     */\\n    function supportsInterface(bytes4 interfaceId) external view returns (bool);\\n}\"\r\n    },\r\n    \"contracts/utils/Context.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\n/*\\n * @dev Provides information about the current execution context, including the\\n * sender of the transaction and its data. While these are generally available\\n * via msg.sender and msg.data, they should not be accessed in such a direct\\n * manner, since when dealing with meta-transactions the account sending and\\n * paying for execution may not be the actual sender (as far as an application\\n * is concerned).\\n *\\n * This contract is only required for intermediate, library-like contracts.\\n */\\nabstract contract Context {\\n    function _msgSender() internal view virtual returns (address) {\\n        return msg.sender;\\n    }\\n\\n    function _msgData() internal view virtual returns (bytes calldata) {\\n        return msg.data;\\n    }\\n}\"\r\n    },\r\n    \"contracts/utils/Address.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Collection of functions related to the address type\\n */\\nlibrary Address {\\n    /**\\n     * @dev Returns true if `account` is a contract.\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * It is unsafe to assume that an address for which this function returns\\n     * false is an externally-owned account (EOA) and not a contract.\\n     *\\n     * Among others, `isContract` will return false for the following\\n     * types of addresses:\\n     *\\n     *  - an externally-owned account\\n     *  - a contract in construction\\n     *  - an address where a contract will be created\\n     *  - an address where a contract lived, but was destroyed\\n     * ====\\n     */\\n    function isContract(address account) internal view returns (bool) {\\n        // This method relies on extcodesize, which returns 0 for contracts in\\n        // construction, since the code is only stored at the end of the\\n        // constructor execution.\\n\\n        uint256 size;\\n        assembly {\\n            size := extcodesize(account)\\n        }\\n        return size > 0;\\n    }\\n\\n    /**\\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\\n     * `recipient`, forwarding all available gas and reverting on errors.\\n     *\\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\\n     * imposed by `transfer`, making them unable to receive funds via\\n     * `transfer`. {sendValue} removes this limitation.\\n     *\\n     * https://diligence.consensys.net/posts/2019/09/stop-using-soliditys-transfer-now/[Learn more].\\n     *\\n     * IMPORTANT: because control is transferred to `recipient`, care must be\\n     * taken to not create reentrancy vulnerabilities. Consider using\\n     * {ReentrancyGuard} or the\\n     * https://solidity.readthedocs.io/en/v0.5.11/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\\n     */\\n    function sendValue(address payable recipient, uint256 amount) internal {\\n        require(address(this).balance >= amount, \\\"Address: insufficient balance\\\");\\n\\n        (bool success, ) = recipient.call{value: amount}(\\\"\\\");\\n        require(success, \\\"Address: unable to send value, recipient may have reverted\\\");\\n    }\\n\\n    /**\\n     * @dev Performs a Solidity function call using a low level `call`. A\\n     * plain `call` is an unsafe replacement for a function call: use this\\n     * function instead.\\n     *\\n     * If `target` reverts with a revert reason, it is bubbled up by this\\n     * function (like regular Solidity function calls).\\n     *\\n     * Returns the raw returned data. To convert to the expected return value,\\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\\n     *\\n     * Requirements:\\n     *\\n     * - `target` must be a contract.\\n     * - calling `target` with `data` must not revert.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionCall(target, data, \\\"Address: low-level call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\\n     * `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, 0, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but also transferring `value` wei to `target`.\\n     *\\n     * Requirements:\\n     *\\n     * - the calling contract must have an ETH balance of at least `value`.\\n     * - the called Solidity function must be `payable`.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, value, \\\"Address: low-level call with value failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\\n     * with `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        require(address(this).balance >= value, \\\"Address: insufficient balance for call\\\");\\n        require(isContract(target), \\\"Address: call to non-contract\\\");\\n\\n        (bool success, bytes memory returndata) = target.call{value: value}(data);\\n        return _verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\\n        return functionStaticCall(target, data, \\\"Address: low-level static call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal view returns (bytes memory) {\\n        require(isContract(target), \\\"Address: static call to non-contract\\\");\\n\\n        (bool success, bytes memory returndata) = target.staticcall(data);\\n        return _verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionDelegateCall(target, data, \\\"Address: low-level delegate call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        require(isContract(target), \\\"Address: delegate call to non-contract\\\");\\n\\n        (bool success, bytes memory returndata) = target.delegatecall(data);\\n        return _verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    function _verifyCallResult(\\n        bool success,\\n        bytes memory returndata,\\n        string memory errorMessage\\n    ) private pure returns (bytes memory) {\\n        if (success) {\\n            return returndata;\\n        } else {\\n            // Look for revert reason and bubble it up if present\\n            if (returndata.length > 0) {\\n                // The easiest way to bubble the revert reason is using memory via assembly\\n\\n                assembly {\\n                    let returndata_size := mload(returndata)\\n                    revert(add(32, returndata), returndata_size)\\n                }\\n            } else {\\n                revert(errorMessage);\\n            }\\n        }\\n    }\\n}\"\r\n    }\r\n  },\r\n  \"settings\": {\r\n    \"optimizer\": {\r\n      \"enabled\": true,\r\n      \"runs\": 999999\r\n    },\r\n    \"outputSelection\": {\r\n      \"*\": {\r\n        \"*\": [\r\n          \"evm.bytecode\",\r\n          \"evm.deployedBytecode\",\r\n          \"abi\"\r\n        ]\r\n      }\r\n    },\r\n    \"libraries\": {}\r\n  }\r\n}}","ABI":"[{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_controller\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_loanToken\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_swapTarget\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_aaveAddress\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_stkAaveAddress\",\"type\":\"address\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"Paused\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"Unpaused\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"palPool\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"palLoanTokenId\",\"type\":\"uint256\"}],\"name\":\"ZapBorrow\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"palPool\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"palTokenAmount\",\"type\":\"uint256\"}],\"name\":\"ZapDeposit\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"palPool\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"palLoan\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"palLoanTokenId\",\"type\":\"uint256\"}],\"name\":\"ZapExpandBorrow\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_swapTarget\",\"type\":\"address\"}],\"name\":\"addSwapTarget\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"controller\",\"outputs\":[{\"internalType\":\"contract IPaladinController\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"loanToken\",\"outputs\":[{\"internalType\":\"contract IPalLoanToken\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"paused\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_tokenAddress\",\"type\":\"address\"},{\"internalType\":\"address payable\",\"name\":\"_recipient\",\"type\":\"address\"}],\"name\":\"sendToken\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_newController\",\"type\":\"address\"}],\"name\":\"setNewController\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_newPalLoanToken\",\"type\":\"address\"}],\"name\":\"setNewPalLoanToken\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_fromTokenAddress\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_toTokenAddress\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_poolAddress\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_delegatee\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_borrowAmount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_feesAmount\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"_swapTarget\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_allowanceTarget\",\"type\":\"address\"},{\"internalType\":\"bytes\",\"name\":\"_swapData\",\"type\":\"bytes\"}],\"name\":\"zapBorrow\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_fromTokenAddress\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_toTokenAddress\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_poolAddress\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"_swapTarget\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_allowanceTarget\",\"type\":\"address\"},{\"internalType\":\"bytes\",\"name\":\"_swapData\",\"type\":\"bytes\"}],\"name\":\"zapDeposit\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_fromTokenAddress\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_toTokenAddress\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_loanAddress\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_poolAddress\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"_swapTarget\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_allowanceTarget\",\"type\":\"address\"},{\"internalType\":\"bytes\",\"name\":\"_swapData\",\"type\":\"bytes\"}],\"name\":\"zapExpandBorrow\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"stateMutability\":\"payable\",\"type\":\"receive\"}]","ContractName":"PalZap","CompilerVersion":"v0.8.0+commit.c7dfd78e","OptimizationUsed":"1","Runs":"999999","ConstructorArguments":"000000000000000000000000bbfa3b05b2dae65fb4c05ec7f1598793a4bc062300000000000000000000000055da1cbd77b1c3b2d8bfe0f5fdf63d684b49f8a5000000000000000000000000def1c0ded9bec7f1a1670819833240f027b25eff0000000000000000000000007fc66500c84a76ad7e9c93437bfc5ac33e2ddae90000000000000000000000004da27a545c0c5b758a6ba100e3a049001de870f5","EVMVersion":"Default","Library":"","LicenseType":"","Proxy":"0","Implementation":"","SwarmSource":""}]}