{"status":"1","message":"OK","result":[{"SourceCode":"{{\r\n  \"language\": \"Solidity\",\r\n  \"sources\": {\r\n    \"contracts/ethereans/osMinter/impl/OSMinter.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\npragma solidity >=0.7.0;\\n\\nimport \\\"../model/IOSMinter.sol\\\";\\nimport \\\"../../../core/model/IOrganization.sol\\\";\\nimport \\\"@ethereansos/swissknife/contracts/generic/impl/LazyInitCapableElement.sol\\\";\\nimport \\\"@ethereansos/items-v2/contracts/projection/IItemProjection.sol\\\";\\nimport \\\"@ethereansos/items-v2/contracts/model/IItemInteroperableInterface.sol\\\";\\nimport { ComponentsGrimoire } from \\\"../../lib/KnowledgeBase.sol\\\";\\nimport { AddressUtilities, Uint256Utilities } from \\\"@ethereansos/swissknife/contracts/lib/GeneralUtilities.sol\\\";\\n\\ncontract OSMinter is IOSMinter, LazyInitCapableElement {\\n    using AddressUtilities for address;\\n    using Uint256Utilities for uint256;\\n\\n    address private _projectionAddress;\\n    uint256 private _itemId;\\n    bytes32 private _collectionId;\\n\\n    constructor(bytes memory lazyInitData) LazyInitCapableElement(lazyInitData) {\\n    }\\n\\n    function _lazyInit(bytes memory lazyInitData) internal override returns (bytes memory) {\\n        address itemAddress;\\n        (_projectionAddress, itemAddress) = abi.decode(lazyInitData, (address, address));\\n        _collectionId = IItemProjection(_projectionAddress).collectionId();\\n        _itemId = IItemInteroperableInterface(itemAddress).itemId();\\n        return \\\"\\\";\\n    }\\n\\n    function _supportsInterface(bytes4 interfaceId) internal override pure returns(bool) {\\n        return\\n            interfaceId == type(IOSMinter).interfaceId ||\\n            interfaceId == this.mint.selector;\\n    }\\n\\n    function mint(uint256 value, address receiver) external override {\\n        require(msg.sender == IOrganization(host).get(ComponentsGrimoire.COMPONENT_KEY_TOKEN_MINTER_AUTH), \\\"unauthorized\\\");\\n        CreateItem[] memory createItems = new CreateItem[](1);\\n        createItems[0] = CreateItem(\\n            Header(address(0), \\\"\\\", \\\"\\\", \\\"\\\"),\\n            _collectionId,\\n            _itemId,\\n            receiver.asSingletonArray(),\\n            value.asSingletonArray()\\n        );\\n        IItemProjection(_projectionAddress).mintItems(createItems);\\n    }\\n}\"\r\n    },\r\n    \"@ethereansos/swissknife/contracts/lib/GeneralUtilities.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\npragma solidity >=0.7.0;\\n\\nimport \\\"@openzeppelin/contracts/token/ERC20/IERC20.sol\\\";\\n\\nlibrary BehaviorUtilities {\\n\\n    function randomKey(uint256 i) internal view returns (bytes32) {\\n        return keccak256(abi.encode(i, block.timestamp, block.number, tx.origin, tx.gasprice, block.coinbase, block.difficulty, msg.sender, blockhash(block.number - 5)));\\n    }\\n\\n    function calculateProjectedArraySizeAndLoopUpperBound(uint256 arraySize, uint256 start, uint256 offset) internal pure returns(uint256 projectedArraySize, uint256 projectedArrayLoopUpperBound) {\\n        if(arraySize != 0 && start < arraySize && offset != 0) {\\n            uint256 length = start + offset;\\n            if(start < (length = length > arraySize ? arraySize : length)) {\\n                projectedArraySize = (projectedArrayLoopUpperBound = length) - start;\\n            }\\n        }\\n    }\\n}\\n\\nlibrary ReflectionUtilities {\\n\\n    function read(address subject, bytes memory inputData) internal view returns(bytes memory returnData) {\\n        bool result;\\n        (result, returnData) = subject.staticcall(inputData);\\n        if(!result) {\\n            assembly {\\n                revert(add(returnData, 0x20), mload(returnData))\\n            }\\n        }\\n    }\\n\\n    function submit(address subject, uint256 value, bytes memory inputData) internal returns(bytes memory returnData) {\\n        bool result;\\n        (result, returnData) = subject.call{value : value}(inputData);\\n        if(!result) {\\n            assembly {\\n                revert(add(returnData, 0x20), mload(returnData))\\n            }\\n        }\\n    }\\n\\n    function isContract(address subject) internal view returns (bool) {\\n        if(subject == address(0)) {\\n            return false;\\n        }\\n        uint256 codeLength;\\n        assembly {\\n            codeLength := extcodesize(subject)\\n        }\\n        return codeLength > 0;\\n    }\\n\\n    function clone(address originalContract) internal returns(address copyContract) {\\n        assembly {\\n            mstore(\\n                0,\\n                or(\\n                    0x5880730000000000000000000000000000000000000000803b80938091923cF3,\\n                    mul(originalContract, 0x1000000000000000000)\\n                )\\n            )\\n            copyContract := create(0, 0, 32)\\n            switch extcodesize(copyContract)\\n                case 0 {\\n                    invalid()\\n                }\\n        }\\n    }\\n}\\n\\nlibrary BytesUtilities {\\n\\n    bytes private constant ALPHABET = \\\"0123456789abcdef\\\";\\n    string internal constant BASE64_ENCODER_DATA = 'ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/';\\n\\n    function asAddress(bytes memory b) internal pure returns(address) {\\n        if(b.length == 0) {\\n            return address(0);\\n        }\\n        if(b.length == 20) {\\n            address addr;\\n            assembly {\\n                addr := mload(add(b, 20))\\n            }\\n            return addr;\\n        }\\n        return abi.decode(b, (address));\\n    }\\n\\n    function asAddressArray(bytes memory b) internal pure returns(address[] memory callResult) {\\n        if(b.length > 0) {\\n            return abi.decode(b, (address[]));\\n        }\\n    }\\n\\n    function asBool(bytes memory bs) internal pure returns(bool) {\\n        return asUint256(bs) != 0;\\n    }\\n\\n    function asBoolArray(bytes memory b) internal pure returns(bool[] memory callResult) {\\n        if(b.length > 0) {\\n            return abi.decode(b, (bool[]));\\n        }\\n    }\\n\\n    function asBytesArray(bytes memory b) internal pure returns(bytes[] memory callResult) {\\n        if(b.length > 0) {\\n            return abi.decode(b, (bytes[]));\\n        }\\n    }\\n\\n    function asString(bytes memory b) internal pure returns(string memory callResult) {\\n        if(b.length > 0) {\\n            return abi.decode(b, (string));\\n        }\\n    }\\n\\n    function asStringArray(bytes memory b) internal pure returns(string[] memory callResult) {\\n        if(b.length > 0) {\\n            return abi.decode(b, (string[]));\\n        }\\n    }\\n\\n    function asUint256(bytes memory bs) internal pure returns(uint256 x) {\\n        if (bs.length >= 32) {\\n            assembly {\\n                x := mload(add(bs, add(0x20, 0)))\\n            }\\n        }\\n    }\\n\\n    function asUint256Array(bytes memory b) internal pure returns(uint256[] memory callResult) {\\n        if(b.length > 0) {\\n            return abi.decode(b, (uint256[]));\\n        }\\n    }\\n\\n    function toString(bytes memory data) internal pure returns(string memory) {\\n        bytes memory str = new bytes(2 + data.length * 2);\\n        str[0] = \\\"0\\\";\\n        str[1] = \\\"x\\\";\\n        for (uint256 i = 0; i < data.length; i++) {\\n            str[2+i*2] = ALPHABET[uint256(uint8(data[i] >> 4))];\\n            str[3+i*2] = ALPHABET[uint256(uint8(data[i] & 0x0f))];\\n        }\\n        return string(str);\\n    }\\n\\n    function asSingletonArray(bytes memory a) internal pure returns(bytes[] memory array) {\\n        array = new bytes[](1);\\n        array[0] = a;\\n    }\\n\\n    function toBase64(bytes memory data) internal pure returns (string memory) {\\n        if (data.length == 0) return '';\\n\\n        string memory table = BASE64_ENCODER_DATA;\\n\\n        uint256 encodedLen = 4 * ((data.length + 2) / 3);\\n\\n        string memory result = new string(encodedLen + 32);\\n\\n        assembly {\\n            mstore(result, encodedLen)\\n\\n            let tablePtr := add(table, 1)\\n\\n            let dataPtr := data\\n            let endPtr := add(dataPtr, mload(data))\\n\\n            let resultPtr := add(result, 32)\\n\\n            for {} lt(dataPtr, endPtr) {}\\n            {\\n                dataPtr := add(dataPtr, 3)\\n                let input := mload(dataPtr)\\n\\n                mstore8(resultPtr, mload(add(tablePtr, and(shr(18, input), 0x3F))))\\n                resultPtr := add(resultPtr, 1)\\n                mstore8(resultPtr, mload(add(tablePtr, and(shr(12, input), 0x3F))))\\n                resultPtr := add(resultPtr, 1)\\n                mstore8(resultPtr, mload(add(tablePtr, and(shr( 6, input), 0x3F))))\\n                resultPtr := add(resultPtr, 1)\\n                mstore8(resultPtr, mload(add(tablePtr, and(        input,  0x3F))))\\n                resultPtr := add(resultPtr, 1)\\n            }\\n\\n            switch mod(mload(data), 3)\\n            case 1 { mstore(sub(resultPtr, 2), shl(240, 0x3d3d)) }\\n            case 2 { mstore(sub(resultPtr, 1), shl(248, 0x3d)) }\\n        }\\n\\n        return result;\\n    }\\n}\\n\\nlibrary StringUtilities {\\n\\n    bytes1 private constant CHAR_0 = bytes1('0');\\n    bytes1 private constant CHAR_A = bytes1('A');\\n    bytes1 private constant CHAR_a = bytes1('a');\\n    bytes1 private constant CHAR_f = bytes1('f');\\n\\n    bytes  internal constant BASE64_DECODER_DATA = hex\\\"0000000000000000000000000000000000000000000000000000000000000000\\\"\\n                                                   hex\\\"00000000000000000000003e0000003f3435363738393a3b3c3d000000000000\\\"\\n                                                   hex\\\"00000102030405060708090a0b0c0d0e0f101112131415161718190000000000\\\"\\n                                                   hex\\\"001a1b1c1d1e1f202122232425262728292a2b2c2d2e2f303132330000000000\\\";\\n\\n    function isEmpty(string memory test) internal pure returns (bool) {\\n        return equals(test, \\\"\\\");\\n    }\\n\\n    function equals(string memory a, string memory b) internal pure returns(bool) {\\n        return keccak256(abi.encodePacked(a)) == keccak256(abi.encodePacked(b));\\n    }\\n\\n    function toLowerCase(string memory str) internal pure returns(string memory) {\\n        bytes memory bStr = bytes(str);\\n        for (uint256 i = 0; i < bStr.length; i++) {\\n            bStr[i] = bStr[i] >= 0x41 && bStr[i] <= 0x5A ? bytes1(uint8(bStr[i]) + 0x20) : bStr[i];\\n        }\\n        return string(bStr);\\n    }\\n\\n    function asBytes(string memory str) internal pure returns(bytes memory toDecode) {\\n        bytes memory data = abi.encodePacked(str);\\n        if(data.length == 0 || data[0] != \\\"0\\\" || (data[1] != \\\"x\\\" && data[1] != \\\"X\\\")) {\\n            return \\\"\\\";\\n        }\\n        uint256 start = 2;\\n        toDecode = new bytes((data.length - 2) / 2);\\n\\n        for(uint256 i = 0; i < toDecode.length; i++) {\\n            toDecode[i] = bytes1(_fromHexChar(uint8(data[start++])) + _fromHexChar(uint8(data[start++])) * 16);\\n        }\\n    }\\n\\n    function toBase64(string memory input) internal pure returns(string memory) {\\n        return BytesUtilities.toBase64(abi.encodePacked(input));\\n    }\\n\\n    function fromBase64(string memory _data) internal pure returns (bytes memory) {\\n        bytes memory data = bytes(_data);\\n\\n        if (data.length == 0) return new bytes(0);\\n        require(data.length % 4 == 0, \\\"invalid base64 decoder input\\\");\\n\\n        bytes memory table = BASE64_DECODER_DATA;\\n\\n        uint256 decodedLen = (data.length / 4) * 3;\\n\\n        bytes memory result = new bytes(decodedLen + 32);\\n\\n        assembly {\\n            let lastBytes := mload(add(data, mload(data)))\\n            if eq(and(lastBytes, 0xFF), 0x3d) {\\n                decodedLen := sub(decodedLen, 1)\\n                if eq(and(lastBytes, 0xFFFF), 0x3d3d) {\\n                    decodedLen := sub(decodedLen, 1)\\n                }\\n            }\\n\\n            mstore(result, decodedLen)\\n\\n            let tablePtr := add(table, 1)\\n\\n            let dataPtr := data\\n            let endPtr := add(dataPtr, mload(data))\\n\\n            let resultPtr := add(result, 32)\\n\\n            for {} lt(dataPtr, endPtr) {}\\n            {\\n               dataPtr := add(dataPtr, 4)\\n               let input := mload(dataPtr)\\n\\n               let output := add(\\n                   add(\\n                       shl(18, and(mload(add(tablePtr, and(shr(24, input), 0xFF))), 0xFF)),\\n                       shl(12, and(mload(add(tablePtr, and(shr(16, input), 0xFF))), 0xFF))),\\n                   add(\\n                       shl( 6, and(mload(add(tablePtr, and(shr( 8, input), 0xFF))), 0xFF)),\\n                               and(mload(add(tablePtr, and(        input , 0xFF))), 0xFF)\\n                    )\\n                )\\n                mstore(resultPtr, shl(232, output))\\n                resultPtr := add(resultPtr, 3)\\n            }\\n        }\\n\\n        return result;\\n    }\\n\\n    function _fromHexChar(uint8 c) private pure returns (uint8) {\\n        bytes1 charc = bytes1(c);\\n        return charc < CHAR_0 || charc > CHAR_f ? 0 : (charc < CHAR_A ? 0 : 10) + c - uint8(charc < CHAR_A ? CHAR_0 : charc < CHAR_a ? CHAR_A : CHAR_a);\\n    }\\n}\\n\\nlibrary Uint256Utilities {\\n    function asSingletonArray(uint256 n) internal pure returns(uint256[] memory array) {\\n        array = new uint256[](1);\\n        array[0] = n;\\n    }\\n\\n    function toHex(uint256 _i) internal pure returns (string memory) {\\n        return BytesUtilities.toString(abi.encodePacked(_i));\\n    }\\n\\n    function toString(uint256 _i) internal pure returns (string memory _uintAsString) {\\n        if (_i == 0) {\\n            return \\\"0\\\";\\n        }\\n        uint256 j = _i;\\n        uint256 len;\\n        while (j != 0) {\\n            len++;\\n            j /= 10;\\n        }\\n        bytes memory bstr = new bytes(len);\\n        uint256 k = len;\\n        while (_i != 0) {\\n            k = k-1;\\n            uint8 temp = (48 + uint8(_i - _i / 10 * 10));\\n            bytes1 b1 = bytes1(temp);\\n            bstr[k] = b1;\\n            _i /= 10;\\n        }\\n        return string(bstr);\\n    }\\n\\n    function sum(uint256[] memory arr) internal pure returns (uint256 result) {\\n        for(uint256 i = 0; i < arr.length; i++) {\\n            result += arr[i];\\n        }\\n    }\\n}\\n\\nlibrary AddressUtilities {\\n    function asSingletonArray(address a) internal pure returns(address[] memory array) {\\n        array = new address[](1);\\n        array[0] = a;\\n    }\\n\\n    function toString(address _addr) internal pure returns (string memory) {\\n        return _addr == address(0) ? \\\"0x0000000000000000000000000000000000000000\\\" : BytesUtilities.toString(abi.encodePacked(_addr));\\n    }\\n}\\n\\nlibrary Bytes32Utilities {\\n\\n    function asSingletonArray(bytes32 a) internal pure returns(bytes32[] memory array) {\\n        array = new bytes32[](1);\\n        array[0] = a;\\n    }\\n\\n    function toString(bytes32 bt) internal pure returns (string memory) {\\n        return bt == bytes32(0) ?  \\\"0x0000000000000000000000000000000000000000000000000000000000000000\\\" : BytesUtilities.toString(abi.encodePacked(bt));\\n    }\\n}\\n\\nlibrary TransferUtilities {\\n    using ReflectionUtilities for address;\\n\\n    function balanceOf(address erc20TokenAddress, address account) internal view returns(uint256) {\\n        if(erc20TokenAddress == address(0)) {\\n            return account.balance;\\n        }\\n        return abi.decode(erc20TokenAddress.read(abi.encodeWithSelector(IERC20(erc20TokenAddress).balanceOf.selector, account)), (uint256));\\n    }\\n\\n    function allowance(address erc20TokenAddress, address account, address spender) internal view returns(uint256) {\\n        if(erc20TokenAddress == address(0)) {\\n            return 0;\\n        }\\n        return abi.decode(erc20TokenAddress.read(abi.encodeWithSelector(IERC20(erc20TokenAddress).allowance.selector, account, spender)), (uint256));\\n    }\\n\\n    function safeApprove(address erc20TokenAddress, address spender, uint256 value) internal {\\n        bytes memory returnData = erc20TokenAddress.submit(0, abi.encodeWithSelector(IERC20(erc20TokenAddress).approve.selector, spender, value));\\n        require(returnData.length == 0 || abi.decode(returnData, (bool)), 'APPROVE_FAILED');\\n    }\\n\\n    function safeTransfer(address erc20TokenAddress, address to, uint256 value) internal {\\n        if(value == 0) {\\n            return;\\n        }\\n        if(erc20TokenAddress == address(0)) {\\n            to.submit(value, \\\"\\\");\\n            return;\\n        }\\n        bytes memory returnData = erc20TokenAddress.submit(0, abi.encodeWithSelector(IERC20(erc20TokenAddress).transfer.selector, to, value));\\n        require(returnData.length == 0 || abi.decode(returnData, (bool)), 'TRANSFER_FAILED');\\n    }\\n\\n    function safeTransferFrom(address erc20TokenAddress, address from, address to, uint256 value) internal {\\n        if(value == 0) {\\n            return;\\n        }\\n        if(erc20TokenAddress == address(0)) {\\n            to.submit(value, \\\"\\\");\\n            return;\\n        }\\n        bytes memory returnData = erc20TokenAddress.submit(0, abi.encodeWithSelector(IERC20(erc20TokenAddress).transferFrom.selector, from, to, value));\\n        require(returnData.length == 0 || abi.decode(returnData, (bool)), 'TRANSFERFROM_FAILED');\\n    }\\n}\"\r\n    },\r\n    \"contracts/ethereans/lib/KnowledgeBase.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\npragma solidity >=0.7.0;\\n\\nlibrary Grimoire {\\n    bytes32 constant public SUBDAO_KEY_ETHEREANSOS_V1 = 0x1d3784c94477427ee3ebf963dc80bcdc1be400c47ff2754fc2a9cd7328837eb4;\\n}\\n\\nlibrary ComponentsGrimoire {\\n    bytes32 constant public COMPONENT_KEY_TOKEN_MINTER = 0x4668877ff569021c2e8188be2e797f8aa73265eac3479789edfd2531e130b1a1;\\n    bytes32 constant public COMPONENT_KEY_TOKEN_MINTER_AUTH = 0x9c4db151be7222e332a1dcdb260c7b85b81f214f6b6d83d96c94f814d48a75a5;\\n    bytes32 constant public COMPONENT_KEY_DIVIDENDS_FARMING = 0x3104750b9808e498d0ff489ed3bdbb01b8ea8018a22c284a054db2dc8fc580a7;\\n    bytes32 constant public COMPONENT_KEY_OS_FARMING = 0x8ec6626208f22327b5df97db347dd390d4bbb54909af6bc9e8b044839ff9c2ef;\\n}\\n\\nlibrary State {\\n    string constant public STATEMANAGER_ENTRY_NAME_FACTORY_OF_FACTORIES_FEE_PERCENTAGE_FOR_TRANSACTED = \\\"factoryOfFactoriesFeePercentageTransacted\\\";\\n    string constant public STATEMANAGER_ENTRY_NAME_FACTORY_OF_FACTORIES_FEE_PERCENTAGE_FOR_BURN = \\\"factoryOfFactoriesFeePercentageBurn\\\";\\n\\n    string constant public STATEMANAGER_ENTRY_NAME_FARMING_FEE_PERCENTAGE_FOR_TRANSACTED = \\\"farmingFeePercentageTransacted\\\";\\n    string constant public STATEMANAGER_ENTRY_NAME_FARMING_FEE_FOR_BURNING_OS = \\\"farmingFeeBurnOS\\\";\\n\\n    string constant public STATEMANAGER_ENTRY_NAME_INFLATION_FEE_PERCENTAGE_FOR_TRANSACTED = \\\"inflationFeePercentageTransacted\\\";\\n\\n    string constant public STATEMANAGER_ENTRY_NAME_DELEGATIONS_ATTACH_INSURANCE = \\\"delegationsAttachInsurance\\\";\\n}\"\r\n    },\r\n    \"@ethereansos/items-v2/contracts/model/IItemInteroperableInterface.sol\": {\r\n      \"content\": \"//SPDX-License-Identifier: MIT\\n\\npragma solidity >=0.7.0;\\n\\nimport \\\"@openzeppelin/contracts/token/ERC20/IERC20.sol\\\";\\nimport \\\"@openzeppelin/contracts/token/ERC20/extensions/IERC20Metadata.sol\\\";\\nimport \\\"@openzeppelin/contracts/token/ERC20/extensions/draft-IERC20Permit.sol\\\";\\n\\ninterface IItemInteroperableInterface is IERC20, IERC20Metadata, IERC20Permit {\\n\\n    function init() external;\\n    function mainInterface() external view returns(address);\\n    function itemId() external view returns(uint256);\\n    function emitEvent(bool forApprove, bool isMulti, bytes calldata data) external;\\n    function burn(uint256 amount) external;\\n    function burnFrom(address account, uint256 amount) external;\\n    function EIP712_PERMIT_DOMAINSEPARATOR_NAME_AND_VERSION() external view returns(string memory name, string memory version);\\n}\"\r\n    },\r\n    \"@ethereansos/items-v2/contracts/projection/IItemProjection.sol\": {\r\n      \"content\": \"//SPDX-License-Identifier: MIT\\n\\npragma solidity >=0.7.0;\\npragma abicoder v2;\\n\\nimport \\\"../model/Item.sol\\\";\\nimport \\\"@ethereansos/swissknife/contracts/generic/model/ILazyInitCapableElement.sol\\\";\\n\\ninterface IItemProjection is Item, ILazyInitCapableElement {\\n\\n    function mainInterface() external view returns(address);\\n\\n    function collectionId() external view returns(bytes32);\\n    function uri() external view returns(string memory);\\n    function plainUri() external view returns(string memory);\\n    function itemPlainUri(uint256 itemId) external view returns(string memory);\\n    function setHeader(Header calldata value) external returns(Header memory oldValue);\\n\\n    function toInteroperableInterfaceAmount(uint256 amount, uint256 itemId, address account) external view returns(uint256);\\n    function toMainInterfaceAmount(uint256 amount, uint256 itemId) external view returns(uint256);\\n}\"\r\n    },\r\n    \"@ethereansos/swissknife/contracts/generic/impl/LazyInitCapableElement.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\npragma solidity >=0.7.0;\\n\\nimport \\\"../model/ILazyInitCapableElement.sol\\\";\\nimport { ReflectionUtilities } from \\\"../../lib/GeneralUtilities.sol\\\";\\n\\nabstract contract LazyInitCapableElement is ILazyInitCapableElement {\\n    using ReflectionUtilities for address;\\n\\n    address public override initializer;\\n    address public override host;\\n\\n    constructor(bytes memory lazyInitData) {\\n        if(lazyInitData.length > 0) {\\n            _privateLazyInit(lazyInitData);\\n        }\\n    }\\n\\n    function lazyInit(bytes calldata lazyInitData) override external returns (bytes memory lazyInitResponse) {\\n        return _privateLazyInit(lazyInitData);\\n    }\\n\\n    function supportsInterface(bytes4 interfaceId) override external view returns(bool) {\\n        return\\n            interfaceId == type(IERC165).interfaceId ||\\n            interfaceId == this.supportsInterface.selector ||\\n            interfaceId == type(ILazyInitCapableElement).interfaceId ||\\n            interfaceId == this.lazyInit.selector ||\\n            interfaceId == this.initializer.selector ||\\n            interfaceId == this.subjectIsAuthorizedFor.selector ||\\n            interfaceId == this.host.selector ||\\n            interfaceId == this.setHost.selector ||\\n            _supportsInterface(interfaceId);\\n    }\\n\\n    function setHost(address newValue) external override authorizedOnly returns(address oldValue) {\\n        oldValue = host;\\n        host = newValue;\\n        emit Host(oldValue, newValue);\\n    }\\n\\n    function subjectIsAuthorizedFor(address subject, address location, bytes4 selector, bytes calldata payload, uint256 value) public override virtual view returns(bool) {\\n        (bool chidlElementValidationIsConsistent, bool chidlElementValidationResult) = _subjectIsAuthorizedFor(subject, location, selector, payload, value);\\n        if(chidlElementValidationIsConsistent) {\\n            return chidlElementValidationResult;\\n        }\\n        if(subject == host) {\\n            return true;\\n        }\\n        if(!host.isContract()) {\\n            return false;\\n        }\\n        (bool result, bytes memory resultData) = host.staticcall(abi.encodeWithSelector(ILazyInitCapableElement(host).subjectIsAuthorizedFor.selector, subject, location, selector, payload, value));\\n        return result && abi.decode(resultData, (bool));\\n    }\\n\\n    function _privateLazyInit(bytes memory lazyInitData) private returns (bytes memory lazyInitResponse) {\\n        require(initializer == address(0), \\\"init\\\");\\n        initializer = msg.sender;\\n        (host, lazyInitResponse) = abi.decode(lazyInitData, (address, bytes));\\n        emit Host(address(0), host);\\n        lazyInitResponse = _lazyInit(lazyInitResponse);\\n    }\\n\\n    function _lazyInit(bytes memory) internal virtual returns (bytes memory) {\\n        return \\\"\\\";\\n    }\\n\\n    function _supportsInterface(bytes4 selector) internal virtual view returns (bool);\\n\\n    function _subjectIsAuthorizedFor(address, address, bytes4, bytes calldata, uint256) internal virtual view returns(bool, bool) {\\n    }\\n\\n    modifier authorizedOnly {\\n        require(_authorizedOnly(), \\\"unauthorized\\\");\\n        _;\\n    }\\n\\n    function _authorizedOnly() internal returns(bool) {\\n        return subjectIsAuthorizedFor(msg.sender, address(this), msg.sig, msg.data, msg.value);\\n    }\\n}\"\r\n    },\r\n    \"contracts/core/model/IOrganization.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\npragma solidity >=0.7.0;\\n\\nimport \\\"@ethereansos/swissknife/contracts/dynamicMetadata/model/IDynamicMetadataCapableElement.sol\\\";\\n\\ninterface IOrganization is IDynamicMetadataCapableElement {\\n\\n    struct Component {\\n        bytes32 key;\\n        address location;\\n        bool active;\\n        bool log;\\n    }\\n\\n    function keyOf(address componentAddress) external view returns(bytes32);\\n    function history(bytes32 key) external view returns(address[] memory componentsAddresses);\\n    function batchHistory(bytes32[] calldata keys) external view returns(address[][] memory componentsAddresses);\\n\\n    function get(bytes32 key) external view returns(address componentAddress);\\n    function list(bytes32[] calldata keys) external view returns(address[] memory componentsAddresses);\\n    function isActive(address subject) external view returns(bool);\\n    function keyIsActive(bytes32 key) external view returns(bool);\\n\\n    function set(Component calldata) external returns(address replacedComponentAddress);\\n    function batchSet(Component[] calldata) external returns (address[] memory replacedComponentAddresses);\\n\\n    event ComponentSet(bytes32 indexed key, address indexed from, address indexed to, bool active);\\n\\n    function submit(address location, bytes calldata payload, address restReceiver) external payable returns(bytes memory response);\\n}\"\r\n    },\r\n    \"contracts/ethereans/osMinter/model/IOSMinter.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\npragma solidity >=0.7.0;\\n\\nimport \\\"@ethereansos/swissknife/contracts/generic/model/ILazyInitCapableElement.sol\\\";\\n\\ninterface IOSMinter is ILazyInitCapableElement {\\n    function mint(uint256 value, address receiver) external;\\n}\"\r\n    },\r\n    \"@ethereansos/swissknife/contracts/generic/model/ILazyInitCapableElement.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\npragma solidity >=0.7.0;\\n\\nimport \\\"@openzeppelin/contracts/utils/introspection/IERC165.sol\\\";\\n\\ninterface ILazyInitCapableElement is IERC165 {\\n\\n    function lazyInit(bytes calldata lazyInitData) external returns(bytes memory initResponse);\\n    function initializer() external view returns(address);\\n\\n    event Host(address indexed from, address indexed to);\\n\\n    function host() external view returns(address);\\n    function setHost(address newValue) external returns(address oldValue);\\n\\n    function subjectIsAuthorizedFor(address subject, address location, bytes4 selector, bytes calldata payload, uint256 value) external view returns(bool);\\n}\"\r\n    },\r\n    \"@ethereansos/swissknife/contracts/dynamicMetadata/model/IDynamicMetadataCapableElement.sol\": {\r\n      \"content\": \"//SPDX-License-Identifier: MIT\\r\\npragma solidity >=0.7.0;\\r\\n\\r\\nimport \\\"../../generic/model/ILazyInitCapableElement.sol\\\";\\r\\n\\r\\ninterface IDynamicMetadataCapableElement is ILazyInitCapableElement {\\r\\n\\r\\n    function uri() external view returns(string memory);\\r\\n    function plainUri() external view returns(string memory);\\r\\n\\r\\n    function setUri(string calldata newValue) external returns (string memory oldValue);\\r\\n\\r\\n    function dynamicUriResolver() external view returns(address);\\r\\n    function setDynamicUriResolver(address newValue) external returns(address oldValue);\\r\\n}\"\r\n    },\r\n    \"@openzeppelin/contracts/token/ERC20/IERC20.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC20 standard as defined in the EIP.\\n */\\ninterface IERC20 {\\n    /**\\n     * @dev Returns the amount of tokens in existence.\\n     */\\n    function totalSupply() external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the amount of tokens owned by `account`.\\n     */\\n    function balanceOf(address account) external view returns (uint256);\\n\\n    /**\\n     * @dev Moves `amount` tokens from the caller's account to `recipient`.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transfer(address recipient, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Returns the remaining number of tokens that `spender` will be\\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\\n     * zero by default.\\n     *\\n     * This value changes when {approve} or {transferFrom} are called.\\n     */\\n    function allowance(address owner, address spender) external view returns (uint256);\\n\\n    /**\\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\\n     * that someone may use both the old and the new allowance by unfortunate\\n     * transaction ordering. One possible solution to mitigate this race\\n     * condition is to first reduce the spender's allowance to 0 and set the\\n     * desired value afterwards:\\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address spender, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Moves `amount` tokens from `sender` to `recipient` using the\\n     * allowance mechanism. `amount` is then deducted from the caller's\\n     * allowance.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(\\n        address sender,\\n        address recipient,\\n        uint256 amount\\n    ) external returns (bool);\\n\\n    /**\\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\\n     * another (`to`).\\n     *\\n     * Note that `value` may be zero.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 value);\\n\\n    /**\\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\\n     * a call to {approve}. `value` is the new allowance.\\n     */\\n    event Approval(address indexed owner, address indexed spender, uint256 value);\\n}\\n\"\r\n    },\r\n    \"@ethereansos/items-v2/contracts/model/Item.sol\": {\r\n      \"content\": \"//SPDX-License-Identifier: MIT\\n\\npragma solidity >=0.7.0;\\npragma abicoder v2;\\n\\nimport \\\"@openzeppelin/contracts/token/ERC1155/IERC1155.sol\\\";\\nimport \\\"./IERC1155Views.sol\\\";\\n\\nstruct Header {\\n    address host;\\n    string name;\\n    string symbol;\\n    string uri;\\n}\\n\\nstruct CreateItem {\\n    Header header;\\n    bytes32 collectionId;\\n    uint256 id;\\n    address[] accounts;\\n    uint256[] amounts;\\n}\\n\\ninterface Item is IERC1155, IERC1155Views {\\n\\n    event CollectionItem(bytes32 indexed fromCollectionId, bytes32 indexed toCollectionId, uint256 indexed itemId);\\n\\n    function name() external view returns(string memory);\\n    function symbol() external view returns(string memory);\\n    function decimals() external view returns(uint256);\\n\\n    function burn(address account, uint256 itemId, uint256 amount) external;\\n    function burnBatch(address account, uint256[] calldata itemIds, uint256[] calldata amounts) external;\\n\\n    function burn(address account, uint256 itemId, uint256 amount, bytes calldata data) external;\\n    function burnBatch(address account, uint256[] calldata itemIds, uint256[] calldata amounts, bytes calldata data) external;\\n\\n    function mintItems(CreateItem[] calldata items) external returns(uint256[] memory itemIds);\\n    function setItemsCollection(uint256[] calldata itemIds, bytes32[] calldata collectionIds) external returns(bytes32[] memory oldCollectionIds);\\n    function setItemsMetadata(uint256[] calldata itemIds, Header[] calldata newValues) external returns(Header[] memory oldValues);\\n\\n    function interoperableOf(uint256 itemId) external view returns(address);\\n}\"\r\n    },\r\n    \"@openzeppelin/contracts/token/ERC20/extensions/draft-IERC20Permit.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC20 Permit extension allowing approvals to be made via signatures, as defined in\\n * https://eips.ethereum.org/EIPS/eip-2612[EIP-2612].\\n *\\n * Adds the {permit} method, which can be used to change an account's ERC20 allowance (see {IERC20-allowance}) by\\n * presenting a message signed by the account. By not relying on {IERC20-approve}, the token holder account doesn't\\n * need to send a transaction, and thus is not required to hold Ether at all.\\n */\\ninterface IERC20Permit {\\n    /**\\n     * @dev Sets `value` as the allowance of `spender` over ``owner``'s tokens,\\n     * given ``owner``'s signed approval.\\n     *\\n     * IMPORTANT: The same issues {IERC20-approve} has related to transaction\\n     * ordering also apply here.\\n     *\\n     * Emits an {Approval} event.\\n     *\\n     * Requirements:\\n     *\\n     * - `spender` cannot be the zero address.\\n     * - `deadline` must be a timestamp in the future.\\n     * - `v`, `r` and `s` must be a valid `secp256k1` signature from `owner`\\n     * over the EIP712-formatted function arguments.\\n     * - the signature must use ``owner``'s current nonce (see {nonces}).\\n     *\\n     * For more information on the signature format, see the\\n     * https://eips.ethereum.org/EIPS/eip-2612#specification[relevant EIP\\n     * section].\\n     */\\n    function permit(\\n        address owner,\\n        address spender,\\n        uint256 value,\\n        uint256 deadline,\\n        uint8 v,\\n        bytes32 r,\\n        bytes32 s\\n    ) external;\\n\\n    /**\\n     * @dev Returns the current nonce for `owner`. This value must be\\n     * included whenever a signature is generated for {permit}.\\n     *\\n     * Every successful call to {permit} increases ``owner``'s nonce by one. This\\n     * prevents a signature from being used multiple times.\\n     */\\n    function nonces(address owner) external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the domain separator used in the encoding of the signature for {permit}, as defined by {EIP712}.\\n     */\\n    // solhint-disable-next-line func-name-mixedcase\\n    function DOMAIN_SEPARATOR() external view returns (bytes32);\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/token/ERC20/extensions/IERC20Metadata.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../IERC20.sol\\\";\\n\\n/**\\n * @dev Interface for the optional metadata functions from the ERC20 standard.\\n *\\n * _Available since v4.1._\\n */\\ninterface IERC20Metadata is IERC20 {\\n    /**\\n     * @dev Returns the name of the token.\\n     */\\n    function name() external view returns (string memory);\\n\\n    /**\\n     * @dev Returns the symbol of the token.\\n     */\\n    function symbol() external view returns (string memory);\\n\\n    /**\\n     * @dev Returns the decimals places of the token.\\n     */\\n    function decimals() external view returns (uint8);\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/utils/introspection/IERC165.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC165 standard, as defined in the\\n * https://eips.ethereum.org/EIPS/eip-165[EIP].\\n *\\n * Implementers can declare support of contract interfaces, which can then be\\n * queried by others ({ERC165Checker}).\\n *\\n * For an implementation, see {ERC165}.\\n */\\ninterface IERC165 {\\n    /**\\n     * @dev Returns true if this contract implements the interface defined by\\n     * `interfaceId`. See the corresponding\\n     * https://eips.ethereum.org/EIPS/eip-165#how-interfaces-are-identified[EIP section]\\n     * to learn more about how these ids are created.\\n     *\\n     * This function call must use less than 30 000 gas.\\n     */\\n    function supportsInterface(bytes4 interfaceId) external view returns (bool);\\n}\\n\"\r\n    },\r\n    \"@ethereansos/items-v2/contracts/model/IERC1155Views.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity >=0.7.0;\\n\\n/**\\n * @title IERC1155Views - An optional utility interface to improve the ERC-1155 Standard.\\n * @dev This interface introduces some additional capabilities for ERC-1155 Tokens.\\n */\\ninterface IERC1155Views {\\n\\n    /**\\n     * @dev Returns the total supply of the given token id\\n     * @param itemId the id of the token whose availability you want to know \\n     */\\n    function totalSupply(uint256 itemId) external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the name of the given token id\\n     * @param itemId the id of the token whose name you want to know \\n     */\\n    function name(uint256 itemId) external view returns (string memory);\\n\\n    /**\\n     * @dev Returns the symbol of the given token id\\n     * @param itemId the id of the token whose symbol you want to know \\n     */\\n    function symbol(uint256 itemId) external view returns (string memory);\\n\\n    /**\\n     * @dev Returns the decimals of the given token id\\n     * @param itemId the id of the token whose decimals you want to know \\n     */\\n    function decimals(uint256 itemId) external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the uri of the given token id\\n     * @param itemId the id of the token whose uri you want to know \\n     */\\n    function uri(uint256 itemId) external view returns (string memory);\\n}\"\r\n    },\r\n    \"@openzeppelin/contracts/token/ERC1155/IERC1155.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../../utils/introspection/IERC165.sol\\\";\\n\\n/**\\n * @dev Required interface of an ERC1155 compliant contract, as defined in the\\n * https://eips.ethereum.org/EIPS/eip-1155[EIP].\\n *\\n * _Available since v3.1._\\n */\\ninterface IERC1155 is IERC165 {\\n    /**\\n     * @dev Emitted when `value` tokens of token type `id` are transferred from `from` to `to` by `operator`.\\n     */\\n    event TransferSingle(address indexed operator, address indexed from, address indexed to, uint256 id, uint256 value);\\n\\n    /**\\n     * @dev Equivalent to multiple {TransferSingle} events, where `operator`, `from` and `to` are the same for all\\n     * transfers.\\n     */\\n    event TransferBatch(\\n        address indexed operator,\\n        address indexed from,\\n        address indexed to,\\n        uint256[] ids,\\n        uint256[] values\\n    );\\n\\n    /**\\n     * @dev Emitted when `account` grants or revokes permission to `operator` to transfer their tokens, according to\\n     * `approved`.\\n     */\\n    event ApprovalForAll(address indexed account, address indexed operator, bool approved);\\n\\n    /**\\n     * @dev Emitted when the URI for token type `id` changes to `value`, if it is a non-programmatic URI.\\n     *\\n     * If an {URI} event was emitted for `id`, the standard\\n     * https://eips.ethereum.org/EIPS/eip-1155#metadata-extensions[guarantees] that `value` will equal the value\\n     * returned by {IERC1155MetadataURI-uri}.\\n     */\\n    event URI(string value, uint256 indexed id);\\n\\n    /**\\n     * @dev Returns the amount of tokens of token type `id` owned by `account`.\\n     *\\n     * Requirements:\\n     *\\n     * - `account` cannot be the zero address.\\n     */\\n    function balanceOf(address account, uint256 id) external view returns (uint256);\\n\\n    /**\\n     * @dev xref:ROOT:erc1155.adoc#batch-operations[Batched] version of {balanceOf}.\\n     *\\n     * Requirements:\\n     *\\n     * - `accounts` and `ids` must have the same length.\\n     */\\n    function balanceOfBatch(address[] calldata accounts, uint256[] calldata ids)\\n        external\\n        view\\n        returns (uint256[] memory);\\n\\n    /**\\n     * @dev Grants or revokes permission to `operator` to transfer the caller's tokens, according to `approved`,\\n     *\\n     * Emits an {ApprovalForAll} event.\\n     *\\n     * Requirements:\\n     *\\n     * - `operator` cannot be the caller.\\n     */\\n    function setApprovalForAll(address operator, bool approved) external;\\n\\n    /**\\n     * @dev Returns true if `operator` is approved to transfer ``account``'s tokens.\\n     *\\n     * See {setApprovalForAll}.\\n     */\\n    function isApprovedForAll(address account, address operator) external view returns (bool);\\n\\n    /**\\n     * @dev Transfers `amount` tokens of token type `id` from `from` to `to`.\\n     *\\n     * Emits a {TransferSingle} event.\\n     *\\n     * Requirements:\\n     *\\n     * - `to` cannot be the zero address.\\n     * - If the caller is not `from`, it must be have been approved to spend ``from``'s tokens via {setApprovalForAll}.\\n     * - `from` must have a balance of tokens of type `id` of at least `amount`.\\n     * - If `to` refers to a smart contract, it must implement {IERC1155Receiver-onERC1155Received} and return the\\n     * acceptance magic value.\\n     */\\n    function safeTransferFrom(\\n        address from,\\n        address to,\\n        uint256 id,\\n        uint256 amount,\\n        bytes calldata data\\n    ) external;\\n\\n    /**\\n     * @dev xref:ROOT:erc1155.adoc#batch-operations[Batched] version of {safeTransferFrom}.\\n     *\\n     * Emits a {TransferBatch} event.\\n     *\\n     * Requirements:\\n     *\\n     * - `ids` and `amounts` must have the same length.\\n     * - If `to` refers to a smart contract, it must implement {IERC1155Receiver-onERC1155BatchReceived} and return the\\n     * acceptance magic value.\\n     */\\n    function safeBatchTransferFrom(\\n        address from,\\n        address to,\\n        uint256[] calldata ids,\\n        uint256[] calldata amounts,\\n        bytes calldata data\\n    ) external;\\n}\\n\"\r\n    }\r\n  },\r\n  \"settings\": {\r\n    \"optimizer\": {\r\n      \"enabled\": true,\r\n      \"runs\": 200\r\n    },\r\n    \"outputSelection\": {\r\n      \"*\": {\r\n        \"*\": [\r\n          \"evm.bytecode\",\r\n          \"evm.deployedBytecode\",\r\n          \"devdoc\",\r\n          \"userdoc\",\r\n          \"metadata\",\r\n          \"abi\"\r\n        ]\r\n      }\r\n    }\r\n  }\r\n}}","ABI":"[{\"inputs\":[{\"internalType\":\"bytes\",\"name\":\"lazyInitData\",\"type\":\"bytes\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"}],\"name\":\"Host\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"host\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"initializer\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes\",\"name\":\"lazyInitData\",\"type\":\"bytes\"}],\"name\":\"lazyInit\",\"outputs\":[{\"internalType\":\"bytes\",\"name\":\"lazyInitResponse\",\"type\":\"bytes\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"receiver\",\"type\":\"address\"}],\"name\":\"mint\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newValue\",\"type\":\"address\"}],\"name\":\"setHost\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"oldValue\",\"type\":\"address\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"subject\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"location\",\"type\":\"address\"},{\"internalType\":\"bytes4\",\"name\":\"selector\",\"type\":\"bytes4\"},{\"internalType\":\"bytes\",\"name\":\"payload\",\"type\":\"bytes\"},{\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"subjectIsAuthorizedFor\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes4\",\"name\":\"interfaceId\",\"type\":\"bytes4\"}],\"name\":\"supportsInterface\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"}]","ContractName":"OSMinter","CompilerVersion":"v0.8.6+commit.11564f7e","OptimizationUsed":"1","Runs":"200","ConstructorArguments":"00000000000000000000000000000000000000000000000000000000000000200000000000000000000000000000000000000000000000000000000000000000","EVMVersion":"Default","Library":"","LicenseType":"","Proxy":"0","Implementation":"","SwarmSource":""}]}