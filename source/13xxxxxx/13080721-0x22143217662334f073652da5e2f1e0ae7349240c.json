{"status":"1","message":"OK","result":[{"SourceCode":"pragma solidity ^0.8.0 ; //SPDX-License-Identifier: UNLICENSED\r\n\r\ninterface IERC20 {\r\n    function totalSupply() external view returns (uint256);\r\n    function balanceOf(address account) external view returns (uint256);\r\n    function transfer(address to, uint value) external;\r\n    function allowance(address owner, address spender) external view returns (uint256);\r\n    function approve(address spender, uint256 amount) external returns (bool);\r\n    function transferFrom(address sender, address recipient, uint256 amount) external returns (bool);\r\n    event Transfer(address indexed from, address indexed to, uint256 value);\r\n    event Approval(address indexed owner, address indexed spender, uint256 value);\r\n}\r\n\r\nlibrary Address {\r\n\r\n    function isContract(address account) internal view returns (bool) {\r\n        uint256 size;\r\n        assembly {\r\n            size := extcodesize(account)\r\n        }\r\n        return size > 0;\r\n    }\r\n\r\n    function sendValue(address payable recipient, uint256 amount) internal {\r\n        require(address(this).balance >= amount, \"Address: insufficient balance\");\r\n\r\n        (bool success, ) = recipient.call{value: amount}(\"\");\r\n        require(success, \"Address: unable to send value, recipient may have reverted\");\r\n    }\r\n\r\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\r\n        return functionCall(target, data, \"Address: low-level call failed\");\r\n    }\r\n\r\n    function functionCall(address target, bytes memory data, string memory errorMessage) internal returns (bytes memory) {\r\n        return functionCallWithValue(target, data, 0, errorMessage);\r\n    }\r\n\r\n    function functionCallWithValue(address target, bytes memory data, uint256 value) internal returns (bytes memory) {\r\n        return functionCallWithValue(target, data, value, \"Address: low-level call with value failed\");\r\n    }\r\n\r\n    function functionCallWithValue(address target, bytes memory data, uint256 value, string memory errorMessage) internal returns (bytes memory) {\r\n        require(address(this).balance >= value, \"Address: insufficient balance for call\");\r\n        require(isContract(target), \"Address: call to non-contract\");\r\n\r\n        (bool success, bytes memory returndata) = target.call{value: value}(data);\r\n        return verifyCallResult(success, returndata, errorMessage);\r\n    }\r\n\r\n    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\r\n        return functionStaticCall(target, data, \"Address: low-level static call failed\");\r\n    }\r\n\r\n    function functionStaticCall(address target, bytes memory data, string memory errorMessage) internal view returns (bytes memory) {\r\n        require(isContract(target), \"Address: static call to non-contract\");\r\n\r\n        (bool success, bytes memory returndata) = target.staticcall(data);\r\n        return verifyCallResult(success, returndata, errorMessage);\r\n    }\r\n\r\n    function functionDelegateCall(address target, bytes memory data) internal returns (bytes memory) {\r\n        return functionDelegateCall(target, data, \"Address: low-level delegate call failed\");\r\n    }\r\n\r\n    function functionDelegateCall(address target, bytes memory data, string memory errorMessage) internal returns (bytes memory) {\r\n        require(isContract(target), \"Address: delegate call to non-contract\");\r\n\r\n        (bool success, bytes memory returndata) = target.delegatecall(data);\r\n        return verifyCallResult(success, returndata, errorMessage);\r\n    }\r\n\r\n    function verifyCallResult(bool success, bytes memory returndata, string memory errorMessage) internal pure returns (bytes memory) {\r\n        if (success) {\r\n            return returndata;\r\n        } else {\r\n            if (returndata.length > 0) {\r\n                assembly {\r\n                    let returndata_size := mload(returndata)\r\n                    revert(add(32, returndata), returndata_size)\r\n                }\r\n            } else {\r\n                revert(errorMessage);\r\n            }\r\n        }\r\n    }\r\n}\r\n\r\nlibrary SafeERC20 {\r\n    using Address for address;\r\n\r\n    function safeTransfer(IERC20 token, address to, uint256 value) internal {\r\n        _callOptionalReturn(token, abi.encodeWithSelector(token.transfer.selector, to, value));\r\n    }\r\n\r\n    function safeTransferFrom(IERC20 token, address from, address to, uint256 value) internal {\r\n        _callOptionalReturn(token, abi.encodeWithSelector(token.transferFrom.selector, from, to, value));\r\n    }\r\n\r\n    function safeApprove(IERC20 token, address spender, uint256 value) internal {\r\n        require((value == 0) || (token.allowance(address(this), spender) == 0),\r\n            \"SafeERC20: approve from non-zero to non-zero allowance\"\r\n        );\r\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, value));\r\n    }\r\n\r\n    function safeIncreaseAllowance(IERC20 token, address spender, uint256 value) internal {\r\n        uint256 newAllowance = token.allowance(address(this), spender) + value;\r\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));\r\n    }\r\n\r\n    function safeDecreaseAllowance(IERC20 token, address spender, uint256 value) internal {\r\n        unchecked {\r\n            uint256 oldAllowance = token.allowance(address(this), spender);\r\n            require(oldAllowance >= value, \"SafeERC20: decreased allowance below zero\");\r\n            uint256 newAllowance = oldAllowance - value;\r\n            _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));\r\n        }\r\n    }\r\n\r\n    function _callOptionalReturn(IERC20 token, bytes memory data) private {\r\n        bytes memory returndata = address(token).functionCall(data, \"SafeERC20: low-level call failed\");\r\n        if (returndata.length > 0) {\r\n            require(abi.decode(returndata, (bool)), \"SafeERC20: ERC20 operation did not succeed\");\r\n        }\r\n    }\r\n}\r\n\r\nabstract contract Context {\r\n    function _msgSender() internal view virtual returns (address) {\r\n        return msg.sender;\r\n    }\r\n\r\n    function _msgData() internal view virtual returns (bytes calldata) {\r\n        this;\r\n        return msg.data;\r\n    }\r\n}\r\n\r\nabstract contract Ownable is Context {\r\n    address private _owner;\r\n\r\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\r\n\r\n    constructor () {\r\n        address msgSender = _msgSender();\r\n        _owner = msgSender;\r\n        emit OwnershipTransferred(address(0), msgSender);\r\n    }\r\n\r\n    function owner() public view virtual returns (address) {\r\n        return _owner;\r\n    }\r\n\r\n    modifier onlyOwner() {\r\n        require(owner() == _msgSender(), \"Ownable: caller is not the owner\");\r\n        _;\r\n    }\r\n\r\n    function renounceOwnership() public virtual onlyOwner {\r\n        emit OwnershipTransferred(_owner, address(0));\r\n        _owner = address(0);\r\n    }\r\n\r\n    function transferOwnership(address newOwner) public virtual onlyOwner {\r\n        require(newOwner != address(0), \"Ownable: new owner is the zero address\");\r\n        emit OwnershipTransferred(_owner, newOwner);\r\n        _owner = newOwner;\r\n    }\r\n}\r\n\r\ninterface IERC20Metadata is IERC20 {\r\n    function name() external view returns (string memory);\r\n    function symbol() external view returns (string memory);\r\n    function decimals() external view returns (uint8);\r\n}\r\n\r\ncontract ERC20 is Context, IERC20, IERC20Metadata {\r\n    mapping (address => uint256) private _balances;\r\n    mapping (address => mapping (address => uint256)) private _allowances;\r\n    uint256 private _totalSupply;\r\n    string private _name;\r\n    string private _symbol;\r\n\r\n    constructor (string memory name_, string memory symbol_) {\r\n        _name = name_;\r\n        _symbol = symbol_;\r\n    }\r\n\r\n    function name() public view virtual override returns (string memory) {\r\n        return _name;\r\n    }\r\n\r\n    function symbol() public view virtual override returns (string memory) {\r\n        return _symbol;\r\n    }\r\n\r\n    function decimals() public view virtual override returns (uint8) {\r\n        return 18;\r\n    }\r\n\r\n    function totalSupply() public view virtual override returns (uint256) {\r\n        return _totalSupply;\r\n    }\r\n\r\n    function balanceOf(address account) public view virtual override returns (uint256) {\r\n        return _balances[account];\r\n    }\r\n\r\n    function transfer(address recipient, uint256 amount) public virtual override {\r\n        _transfer(_msgSender(), recipient, amount);\r\n    }\r\n\r\n    function allowance(address owner, address spender) public view virtual override returns (uint256) {\r\n        return _allowances[owner][spender];\r\n    }\r\n\r\n    function approve(address spender, uint256 amount) public virtual override returns (bool) {\r\n        _approve(_msgSender(), spender, amount);\r\n        return true;\r\n    }\r\n\r\n    function transferFrom(address sender, address recipient, uint256 amount) public virtual override returns (bool) {\r\n        _transfer(sender, recipient, amount);\r\n\r\n        uint256 currentAllowance = _allowances[sender][_msgSender()];\r\n        require(currentAllowance >= amount, \"ERC20: transfer amount exceeds allowance\");\r\n        _approve(sender, _msgSender(), currentAllowance - amount);\r\n\r\n        return true;\r\n    }\r\n\r\n    function increaseAllowance(address spender, uint256 addedValue) public virtual returns (bool) {\r\n        _approve(_msgSender(), spender, _allowances[_msgSender()][spender] + addedValue);\r\n        return true;\r\n    }\r\n\r\n    function decreaseAllowance(address spender, uint256 subtractedValue) public virtual returns (bool) {\r\n        uint256 currentAllowance = _allowances[_msgSender()][spender];\r\n        require(currentAllowance >= subtractedValue, \"ERC20: decreased allowance below zero\");\r\n        _approve(_msgSender(), spender, currentAllowance - subtractedValue);\r\n\r\n        return true;\r\n    }\r\n\r\n    function _transfer(address sender, address recipient, uint256 amount) internal virtual {\r\n        require(sender != address(0), \"ERC20: transfer from the zero address\");\r\n        require(recipient != address(0), \"ERC20: transfer to the zero address\");\r\n\r\n        _beforeTokenTransfer(sender, recipient, amount);\r\n\r\n        uint256 senderBalance = _balances[sender];\r\n        require(senderBalance >= amount, \"ERC20: transfer amount exceeds balance\");\r\n        _balances[sender] = senderBalance - amount;\r\n        _balances[recipient] += amount;\r\n\r\n        emit Transfer(sender, recipient, amount);\r\n    }\r\n\r\n    function _mint(address account, uint256 amount) internal virtual {\r\n        require(account != address(0), \"ERC20: mint to the zero address\");\r\n\r\n        _beforeTokenTransfer(address(0), account, amount);\r\n\r\n        _totalSupply += amount;\r\n        _balances[account] += amount;\r\n        emit Transfer(address(0), account, amount);\r\n    }\r\n\r\n    function _approve(address owner, address spender, uint256 amount) internal virtual {\r\n        require(owner != address(0), \"ERC20: approve from the zero address\");\r\n        require(spender != address(0), \"ERC20: approve to the zero address\");\r\n\r\n        _allowances[owner][spender] = amount;\r\n        emit Approval(owner, spender, amount);\r\n    }\r\n\r\n    function _beforeTokenTransfer(address from, address to, uint256 amount) internal virtual { }\r\n}\r\n\r\ncontract CROWN is Ownable, ERC20 {\r\n    \r\n    using SafeERC20 for IERC20;\r\n    \r\n    constructor(address _usdt, address _usdc) ERC20(\"CROWN\", \"CWT\") {\r\n        _mint(msg.sender, 140000000 * 10 ** decimals());\r\n        usdt = _usdt;\r\n        usdc = _usdc;\r\n        stableCoinAddress = _usdt; //set default dividend token as USDT\r\n        decimalOfStableCoin = IERC20Metadata(stableCoinAddress).decimals();\r\n    }\r\n    \r\n    //---------------------ERC20 extended functions---------------------\r\n    function transferTokenFrom(address sender, address recipient, uint256 amount) public onlyOwnerOrContract returns (bool) {\r\n        _transfer(sender, recipient, amount);\r\n        return true;\r\n    }\r\n    \r\n    function multiTransfer(address[] memory receivers, uint256[] memory amounts) public {\r\n        for (uint256 i = 0; i < receivers.length; i++) {\r\n            require(receivers[i] == address(receivers[i]));\r\n            transfer(receivers[i], amounts[i]);\r\n        }\r\n    }\r\n    \r\n    //----------------------------Staking Part-------------------------------\r\n    mapping(address => bool) public isStaking;\r\n    mapping(address => StakeInfo) public stakeInfo;\r\n    address[] internal stakeholders;\r\n    uint256 public crownPrice = 1e18; // CROWN token initial price $1 US Dollar.\r\n    uint256 public dividendRate = 4e18; // Initial dividend rate 4% of stake amount.\r\n    uint256 public decimalOfStableCoin = 1e6; // Default decimals point of USDT/USDC token\r\n    uint256 public startDate;\r\n    uint256 public endDate;\r\n    address public usdt;\r\n    address public usdc;\r\n    address public stableCoinAddress; // Current dividend token address.\r\n    \r\n    struct StakeInfo {\r\n        uint256 amount;\r\n        uint256 crownReward;\r\n        uint256 dividendUSDT;\r\n        uint256 dividendUSDC;\r\n    }\r\n    \r\n    //---------------------Staking Events---------------------\r\n    event DepositStake(address indexed stakeholder, uint256 amount, uint256 timestamp);\r\n    event WithdrawStake(address indexed stakeholder, uint256 amount, uint256 timestamp);\r\n    event DividendWithdrawal(address indexed from, address indexed to, uint256 amount, string symbol, uint256 timestamp);\r\n    \r\n    //---------------------Modifier functions---------------------\r\n    modifier validAddress(address account){    \r\n        require(account == address(account),\"Invalid address\");\r\n        require(account != address(0));\r\n        _;\r\n    }\r\n    \r\n    modifier onlyOwnerOrContract() {\r\n        require(msg.sender == owner() || msg.sender == address(this), \"Ownable: caller is not an owner or contract!\");\r\n        _;\r\n    }\r\n    \r\n    modifier onlyWithinStakePeriod() {    \r\n        require(startDate > 0 && endDate > 0, \"Invalid stake date!\");\r\n        require(block.timestamp >= startDate && block.timestamp <= endDate, \"Please stake in the staking period!\");\r\n        _;\r\n    }\r\n    \r\n    modifier onlyAfterPeriod() {    \r\n        require(startDate > 0 && endDate > 0, \"Invalid stake end date!\");\r\n        require(block.timestamp >= endDate, \"Please wait until the stake removal date!\");\r\n        _;\r\n    }\r\n    \r\n    //---------------------Getter functions---------------------\r\n\r\n    function totalStakes() public view returns (uint256) {\r\n       uint256 _totalStakes = 0;\r\n       for (uint256 i = 0; i < stakeholders.length; i += 1) {\r\n           _totalStakes += (stakeInfo[stakeholders[i]].amount);\r\n       }\r\n       return _totalStakes;\r\n    }\r\n   \r\n    function getDividendSupply() public view returns (uint256) {\r\n       if (address(stableCoinAddress) == address(usdc)) {\r\n           return IERC20(usdc).balanceOf(address(this));\r\n       } else {\r\n           return IERC20(usdt).balanceOf(address(this));\r\n       }\r\n    }\r\n    \r\n    function getUSDTBalance() external view returns (uint256) {\r\n        return IERC20(usdt).balanceOf(address(this));\r\n    }\r\n    \r\n    function getUSDCBalance() external view returns (uint256) {\r\n        return IERC20(usdc).balanceOf(address(this));\r\n    }\r\n   \r\n    function stakeOf(address stakeHolder) external view returns (uint256) {\r\n       return stakeInfo[stakeHolder].amount;\r\n    }\r\n   \r\n    function dividendUSDTOf(address stakeHolder) external view returns (uint256) {\r\n       return stakeInfo[stakeHolder].dividendUSDT;\r\n    }\r\n    \r\n    function dividendUSDCOf(address stakeHolder) external view returns (uint256) {\r\n       return stakeInfo[stakeHolder].dividendUSDC;\r\n    }\r\n    \r\n    //---------------------Setter functions---------------------\r\n    \r\n    function updateDividendRate(uint256 _newDividendRate) public onlyOwnerOrContract {\r\n        require(_newDividendRate > 0, \"Dividend rate can not be zero!\");\r\n        dividendRate = _newDividendRate;\r\n        massUpdateDividend();\r\n    }\r\n    \r\n    function massUpdateDividend() internal {\r\n        for (uint256 i; i < stakeholders.length; i+=1){\r\n            address stakeholder = stakeholders[i];\r\n            updateDividend(stakeholder);\r\n        }\r\n    }\r\n    \r\n    function updateCrownPrice(uint256 _crownPrice) public onlyOwnerOrContract {\r\n       require(_crownPrice > 0, \"Price must be more than 0!\");\r\n       crownPrice = _crownPrice;\r\n    }\r\n    \r\n    function updateUSDTAddress(address addressOfUSDT) public validAddress(addressOfUSDT) onlyOwner returns (bool){\r\n        usdt = addressOfUSDT;\r\n        decimalOfStableCoin = IERC20Metadata(usdt).decimals();\r\n        return true;\r\n    }\r\n    \r\n    function updateUSDCAddress(address addressOfUSDC) public validAddress(addressOfUSDC) onlyOwner returns (bool){\r\n        usdc = addressOfUSDC;\r\n        decimalOfStableCoin = IERC20Metadata(usdc).decimals();\r\n        return true;\r\n    }\r\n    \r\n    function updateDividend(address stakeHolder) internal {\r\n       uint256 reward = stakeInfo[stakeHolder].crownReward;\r\n       uint256 crownReward = ((reward * dividendRate) / 1e2) / 1e18;\r\n       require(crownPrice > 0, \"CROWN price can not be zero!\");\r\n       if (crownReward > 0) { \r\n           uint256 dividendAmount = ((crownReward * crownPrice) / 1e18) / (1e18 / 10 ** decimalOfStableCoin);\r\n           if (address(stableCoinAddress) == address(usdc)) {\r\n               stakeInfo[stakeHolder].dividendUSDC += dividendAmount; \r\n           } else {\r\n               stakeInfo[stakeHolder].dividendUSDT += dividendAmount;\r\n           }\r\n           stakeInfo[stakeHolder].crownReward -= reward;\r\n       }\r\n    }\r\n   \r\n    function updateStableCoin(string memory currency) internal {\r\n       if (keccak256(abi.encodePacked(currency)) == keccak256(abi.encodePacked(\"USDC\"))) {\r\n            stableCoinAddress = address(usdc);\r\n       } else {\r\n            stableCoinAddress = address(usdt);\r\n       }\r\n    }\r\n    \r\n    function setStakingPeriod (uint256 periodInDay) public onlyOwner returns(bool) {\r\n        startDate = block.timestamp;\r\n        endDate = startDate + (periodInDay * 1 days);\r\n        return true;\r\n    } \r\n\r\n    function addStakeholder(address stakeHolder) internal validAddress(stakeHolder) {\r\n        bool _isStaking = isStaking[stakeHolder];\r\n        if(!_isStaking) {\r\n           stakeholders.push(stakeHolder);\r\n           isStaking[stakeHolder] = true;\r\n       }\r\n    }\r\n\r\n    function removeStakeholder(address stakeHolder) internal validAddress(stakeHolder) {\r\n        bool _isStaking = isStaking[stakeHolder];\r\n        if(_isStaking){\r\n           isStaking[stakeHolder] = false;\r\n        }\r\n    }\r\n    \r\n    function massWithdrawStake() public onlyOwner onlyAfterPeriod {\r\n        for (uint256 i; i < stakeholders.length; i+=1){\r\n            address stakeholder = stakeholders[i];\r\n            uint256 amount = stakeInfo[stakeholders[i]].amount;\r\n            if (amount > 0) {\r\n                withdrawStake(stakeholder, amount);\r\n            } \r\n        }\r\n    }\r\n    \r\n//-------------------------------- Main Staking Functions ---------------------------------------------\r\n\r\n   function depositStake(address stakeHolder, uint256 amount) public validAddress(stakeHolder) onlyWithinStakePeriod {\r\n       uint256 crownBalance = balanceOf(stakeHolder);\r\n       if (amount > 0) {\r\n           require(crownBalance >= amount,\"Not enough token to stake!\");\r\n           require(msg.sender == owner() || msg.sender == stakeHolder, \"Just an admin & stakeHolder can remove stake!\");\r\n           transferTokenFrom(stakeHolder, address(this), amount);\r\n           if (stakeInfo[stakeHolder].amount == 0) {\r\n               addStakeholder(stakeHolder);\r\n           }\r\n           stakeInfo[stakeHolder].amount += amount;\r\n           stakeInfo[stakeHolder].crownReward += amount;\r\n           emit DepositStake(stakeHolder, amount, block.timestamp);\r\n       }\r\n   }\r\n\r\n   function withdrawStake(address stakeHolder, uint256 amount) public validAddress(stakeHolder) onlyAfterPeriod {\r\n       if (amount > 0) { \r\n           require(stakeInfo[stakeHolder].amount >= amount, \"Not enough staking to be removed!\");\r\n           require(msg.sender == owner() || msg.sender == stakeHolder, \"Just an admin & stakeHolder can remove stake!\");\r\n           SafeERC20.safeTransfer(IERC20(address(this)), stakeHolder, amount); \r\n           stakeInfo[stakeHolder].amount -= amount;\r\n           if (stakeInfo[stakeHolder].amount == 0) { \r\n               removeStakeholder(stakeHolder);\r\n           }\r\n           emit WithdrawStake(stakeHolder, amount, block.timestamp);\r\n       }\r\n   }\r\n   \r\n   function distributeDividend(string memory currency, uint256 _dividendRate, uint256 _crownUSDPrice) public onlyOwner {\r\n       assert(keccak256(abi.encodePacked(currency)) == keccak256(abi.encodePacked(\"USDC\")) || keccak256(abi.encodePacked(currency)) == keccak256(abi.encodePacked(\"USDT\")));\r\n       updateStableCoin(currency);\r\n       uint256 dividendSupply = getDividendSupply();\r\n       require(dividendSupply > 0, \"Insufficient dividend supply!\");\r\n       require(_dividendRate > 0, \"Dividend rate can not be zero!\");\r\n       require(_crownUSDPrice > 0, \"Crown token price can not be zero!\");\r\n       updateCrownPrice(_crownUSDPrice);\r\n       updateDividendRate(_dividendRate);\r\n   }\r\n   \r\n   function withdrawDividend(address stakeHolder, address toAddress, string memory currency, uint256 amount) public validAddress(stakeHolder) {\r\n       assert(keccak256(abi.encodePacked(currency)) == keccak256(abi.encodePacked(\"USDC\")) || keccak256(abi.encodePacked(currency)) == keccak256(abi.encodePacked(\"USDT\")));\r\n       uint256 dividendAmount = 0;\r\n       uint256 dividendSupply = getDividendSupply();\r\n       require(dividendSupply >= amount && dividendSupply > 0, \"Withdraw amount exceed dividend supply!\");\r\n       require(msg.sender == owner() || msg.sender == stakeHolder, \"Just an admin & stakeHolder can remove stake!\");\r\n       if (amount > 0) {\r\n           if (keccak256(abi.encodePacked(currency)) == keccak256(abi.encodePacked(\"USDC\"))) {\r\n               dividendAmount = stakeInfo[stakeHolder].dividendUSDC;\r\n               require(dividendAmount >= amount && dividendAmount > 0, \"Withdraw amount exceed dividend balance!\");\r\n               SafeERC20.safeTransfer(IERC20(usdc), toAddress, amount);\r\n               stakeInfo[stakeHolder].dividendUSDC -= amount;\r\n           } else {\r\n               dividendAmount = stakeInfo[stakeHolder].dividendUSDT;\r\n               require(dividendAmount >= amount && dividendAmount > 0, \"Withdraw amount exceed dividend balance!\");\r\n               SafeERC20.safeTransfer(IERC20(usdt), toAddress, amount);\r\n               stakeInfo[stakeHolder].dividendUSDT -= amount;\r\n           }\r\n       } else {\r\n           revert(\"Withdraw amount can not be zero!\");\r\n       }\r\n       emit DividendWithdrawal(stakeHolder, toAddress, amount, currency, block.timestamp);\r\n   }\r\n}","ABI":"[{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_usdt\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_usdc\",\"type\":\"address\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Approval\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"stakeholder\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"timestamp\",\"type\":\"uint256\"}],\"name\":\"DepositStake\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"string\",\"name\":\"symbol\",\"type\":\"string\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"timestamp\",\"type\":\"uint256\"}],\"name\":\"DividendWithdrawal\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Transfer\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"stakeholder\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"timestamp\",\"type\":\"uint256\"}],\"name\":\"WithdrawStake\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"}],\"name\":\"allowance\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"approve\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"crownPrice\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"decimalOfStableCoin\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"decimals\",\"outputs\":[{\"internalType\":\"uint8\",\"name\":\"\",\"type\":\"uint8\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"subtractedValue\",\"type\":\"uint256\"}],\"name\":\"decreaseAllowance\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"stakeHolder\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"depositStake\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"string\",\"name\":\"currency\",\"type\":\"string\"},{\"internalType\":\"uint256\",\"name\":\"_dividendRate\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_crownUSDPrice\",\"type\":\"uint256\"}],\"name\":\"distributeDividend\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"dividendRate\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"stakeHolder\",\"type\":\"address\"}],\"name\":\"dividendUSDCOf\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"stakeHolder\",\"type\":\"address\"}],\"name\":\"dividendUSDTOf\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"endDate\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getDividendSupply\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getUSDCBalance\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getUSDTBalance\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"addedValue\",\"type\":\"uint256\"}],\"name\":\"increaseAllowance\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"isStaking\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"massWithdrawStake\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address[]\",\"name\":\"receivers\",\"type\":\"address[]\"},{\"internalType\":\"uint256[]\",\"name\":\"amounts\",\"type\":\"uint256[]\"}],\"name\":\"multiTransfer\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"name\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"periodInDay\",\"type\":\"uint256\"}],\"name\":\"setStakingPeriod\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"stableCoinAddress\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"stakeInfo\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"crownReward\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"dividendUSDT\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"dividendUSDC\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"stakeHolder\",\"type\":\"address\"}],\"name\":\"stakeOf\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"startDate\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"symbol\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalStakes\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalSupply\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"recipient\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"transfer\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"recipient\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"transferFrom\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"recipient\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"transferTokenFrom\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_crownPrice\",\"type\":\"uint256\"}],\"name\":\"updateCrownPrice\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_newDividendRate\",\"type\":\"uint256\"}],\"name\":\"updateDividendRate\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"addressOfUSDC\",\"type\":\"address\"}],\"name\":\"updateUSDCAddress\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"addressOfUSDT\",\"type\":\"address\"}],\"name\":\"updateUSDTAddress\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"usdc\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"usdt\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"stakeHolder\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"toAddress\",\"type\":\"address\"},{\"internalType\":\"string\",\"name\":\"currency\",\"type\":\"string\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"withdrawDividend\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"stakeHolder\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"withdrawStake\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}]","ContractName":"CROWN","CompilerVersion":"v0.8.0+commit.c7dfd78e","OptimizationUsed":"1","Runs":"200","ConstructorArguments":"000000000000000000000000dac17f958d2ee523a2206206994597c13d831ec7000000000000000000000000a0b86991c6218b36c1d19d4a2e9eb0ce3606eb48","EVMVersion":"Default","Library":"","LicenseType":"None","Proxy":"0","Implementation":"","SwarmSource":"ipfs://369eaa1fa9b67565d80151b4a04e9d4a11e01977cc83ffa5adc8f7df0248eac0"}]}