{"status":"1","message":"OK","result":[{"SourceCode":"// Sources flattened with hardhat v2.4.1 https://hardhat.org\r\n\r\n// File @openzeppelin/contracts/token/ERC20/IERC20.sol@v4.2.0\r\n\r\n// SPDX-License-Identifier: MIT\r\n\r\npragma solidity ^0.8.0;\r\n\r\n/**\r\n * @dev Interface of the ERC20 standard as defined in the EIP.\r\n */\r\ninterface IERC20 {\r\n    /**\r\n     * @dev Returns the amount of tokens in existence.\r\n     */\r\n    function totalSupply() external view returns (uint256);\r\n\r\n    /**\r\n     * @dev Returns the amount of tokens owned by `account`.\r\n     */\r\n    function balanceOf(address account) external view returns (uint256);\r\n\r\n    /**\r\n     * @dev Moves `amount` tokens from the caller's account to `recipient`.\r\n     *\r\n     * Returns a boolean value indicating whether the operation succeeded.\r\n     *\r\n     * Emits a {Transfer} event.\r\n     */\r\n    function transfer(address recipient, uint256 amount) external returns (bool);\r\n\r\n    /**\r\n     * @dev Returns the remaining number of tokens that `spender` will be\r\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\r\n     * zero by default.\r\n     *\r\n     * This value changes when {approve} or {transferFrom} are called.\r\n     */\r\n    function allowance(address owner, address spender) external view returns (uint256);\r\n\r\n    /**\r\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\r\n     *\r\n     * Returns a boolean value indicating whether the operation succeeded.\r\n     *\r\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\r\n     * that someone may use both the old and the new allowance by unfortunate\r\n     * transaction ordering. One possible solution to mitigate this race\r\n     * condition is to first reduce the spender's allowance to 0 and set the\r\n     * desired value afterwards:\r\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\r\n     *\r\n     * Emits an {Approval} event.\r\n     */\r\n    function approve(address spender, uint256 amount) external returns (bool);\r\n\r\n    /**\r\n     * @dev Moves `amount` tokens from `sender` to `recipient` using the\r\n     * allowance mechanism. `amount` is then deducted from the caller's\r\n     * allowance.\r\n     *\r\n     * Returns a boolean value indicating whether the operation succeeded.\r\n     *\r\n     * Emits a {Transfer} event.\r\n     */\r\n    function transferFrom(\r\n        address sender,\r\n        address recipient,\r\n        uint256 amount\r\n    ) external returns (bool);\r\n\r\n    /**\r\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\r\n     * another (`to`).\r\n     *\r\n     * Note that `value` may be zero.\r\n     */\r\n    event Transfer(address indexed from, address indexed to, uint256 value);\r\n\r\n    /**\r\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\r\n     * a call to {approve}. `value` is the new allowance.\r\n     */\r\n    event Approval(address indexed owner, address indexed spender, uint256 value);\r\n}\r\n\r\n// File contracts/interfaces/utils/IUtils.sol\r\n\r\npragma solidity ^0.8.0;\r\n\r\ninterface IUtils {\r\n    function isContract(address addr) external view returns (bool);\r\n\r\n    function isContracts(address[] calldata addrs) external view returns (bool[] memory);\r\n\r\n    function getBalances(address token, address[] calldata addrs) external view returns (uint256[] memory);\r\n}\r\n\r\n// File contracts/utils/SNXAirDropHelper.sol\r\n\r\npragma solidity ^0.8.0;\r\n\r\ninterface IIssuer {\r\n    function collateral(address addr) external view returns (uint256);\r\n}\r\n\r\ncontract SNXAirDropHelper {\r\n    IERC20 public snx;\r\n    IUtils public utils;\r\n    IIssuer public issuer;\r\n\r\n    struct Info {\r\n        uint256 snx;\r\n        uint256 collateral;\r\n    }\r\n\r\n    constructor(\r\n        IERC20 _snx,\r\n        IUtils _utils,\r\n        IIssuer _issuer\r\n    ) {\r\n        require(address(_snx) != address(0), \"Invalid _snx\");\r\n        require(address(_utils) != address(0), \"Invalid _utils\");\r\n        require(address(_issuer) != address(0), \"Invalid _issuer\");\r\n\r\n        snx = _snx;\r\n        utils = _utils;\r\n        issuer = _issuer;\r\n    }\r\n\r\n    function getBalances(address[] calldata addrs) external view returns (Info[] memory) {\r\n        Info[] memory results = new Info[](addrs.length);\r\n\r\n        for (uint256 index = 0; index < addrs.length; index++) {\r\n            address addr = addrs[index];\r\n            if (!utils.isContract(addr)) {\r\n                // EOA address\r\n\r\n                results[index].snx = snx.balanceOf(addr);\r\n                results[index].collateral = issuer.collateral(addr);\r\n            }\r\n        }\r\n\r\n        return results;\r\n    }\r\n}","ABI":"[{\"inputs\":[{\"internalType\":\"contract IERC20\",\"name\":\"_snx\",\"type\":\"address\"},{\"internalType\":\"contract IUtils\",\"name\":\"_utils\",\"type\":\"address\"},{\"internalType\":\"contract IIssuer\",\"name\":\"_issuer\",\"type\":\"address\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"inputs\":[{\"internalType\":\"address[]\",\"name\":\"addrs\",\"type\":\"address[]\"}],\"name\":\"getBalances\",\"outputs\":[{\"components\":[{\"internalType\":\"uint256\",\"name\":\"snx\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"collateral\",\"type\":\"uint256\"}],\"internalType\":\"struct SNXAirDropHelper.Info[]\",\"name\":\"\",\"type\":\"tuple[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"issuer\",\"outputs\":[{\"internalType\":\"contract IIssuer\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"snx\",\"outputs\":[{\"internalType\":\"contract IERC20\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"utils\",\"outputs\":[{\"internalType\":\"contract IUtils\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"}]","ContractName":"SNXAirDropHelper","CompilerVersion":"v0.8.0+commit.c7dfd78e","OptimizationUsed":"1","Runs":"200","ConstructorArguments":"000000000000000000000000c011a73ee8576fb46f5e1c5751ca3b9fe0af2a6f000000000000000000000000e6b02d1686aac8fa2bca73f4e449aeb979fca140000000000000000000000000922c84b3894298296c34842d866bfc0d36c54778","EVMVersion":"Default","Library":"","LicenseType":"None","Proxy":"0","Implementation":"","SwarmSource":"ipfs://c6490f9e281f56873f6193720f351840092881f08de1928dc1bbafa131096418"}]}