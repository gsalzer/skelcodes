{"status":"1","message":"OK","result":[{"SourceCode":"pragma solidity ^0.5.16;\r\n\r\n\r\n// Copied from Compound/ExponentialNoError\r\n/**\r\n * @title Exponential module for storing fixed-precision decimals\r\n * @author DeFil\r\n * @notice Exp is a struct which stores decimals with a fixed precision of 18 decimal places.\r\n *         Thus, if we wanted to store the 5.1, mantissa would store 5.1e18. That is:\r\n *         `Exp({mantissa: 5100000000000000000})`.\r\n */\r\ncontract ExponentialNoError {\r\n    uint constant expScale = 1e18;\r\n    uint constant doubleScale = 1e36;\r\n    uint constant halfExpScale = expScale/2;\r\n    uint constant mantissaOne = expScale;\r\n\r\n    struct Exp {\r\n        uint mantissa;\r\n    }\r\n\r\n    struct Double {\r\n        uint mantissa;\r\n    }\r\n\r\n    /**\r\n     * @dev Truncates the given exp to a whole number value.\r\n     *      For example, truncate(Exp{mantissa: 15 * expScale}) = 15\r\n     */\r\n    function truncate(Exp memory exp) pure internal returns (uint) {\r\n        // Note: We are not using careful math here as we're performing a division that cannot fail\r\n        return exp.mantissa / expScale;\r\n    }\r\n\r\n    /**\r\n     * @dev Multiply an Exp by a scalar, then truncate to return an unsigned integer.\r\n     */\r\n    function mul_ScalarTruncate(Exp memory a, uint scalar) pure internal returns (uint) {\r\n        Exp memory product = mul_(a, scalar);\r\n        return truncate(product);\r\n    }\r\n\r\n    /**\r\n     * @dev Multiply an Exp by a scalar, truncate, then add an to an unsigned integer, returning an unsigned integer.\r\n     */\r\n    function mul_ScalarTruncateAddUInt(Exp memory a, uint scalar, uint addend) pure internal returns (uint) {\r\n        Exp memory product = mul_(a, scalar);\r\n        return add_(truncate(product), addend);\r\n    }\r\n\r\n    /**\r\n     * @dev Checks if first Exp is less than second Exp.\r\n     */\r\n    function lessThanExp(Exp memory left, Exp memory right) pure internal returns (bool) {\r\n        return left.mantissa < right.mantissa;\r\n    }\r\n\r\n    /**\r\n     * @dev Checks if left Exp <= right Exp.\r\n     */\r\n    function lessThanOrEqualExp(Exp memory left, Exp memory right) pure internal returns (bool) {\r\n        return left.mantissa <= right.mantissa;\r\n    }\r\n\r\n    /**\r\n     * @dev Checks if left Exp > right Exp.\r\n     */\r\n    function greaterThanExp(Exp memory left, Exp memory right) pure internal returns (bool) {\r\n        return left.mantissa > right.mantissa;\r\n    }\r\n\r\n    /**\r\n     * @dev returns true if Exp is exactly zero\r\n     */\r\n    function isZeroExp(Exp memory value) pure internal returns (bool) {\r\n        return value.mantissa == 0;\r\n    }\r\n\r\n    function safe224(uint n, string memory errorMessage) pure internal returns (uint224) {\r\n        require(n < 2**224, errorMessage);\r\n        return uint224(n);\r\n    }\r\n\r\n    function safe32(uint n, string memory errorMessage) pure internal returns (uint32) {\r\n        require(n < 2**32, errorMessage);\r\n        return uint32(n);\r\n    }\r\n\r\n    function add_(Exp memory a, Exp memory b) pure internal returns (Exp memory) {\r\n        return Exp({mantissa: add_(a.mantissa, b.mantissa)});\r\n    }\r\n\r\n    function add_(Double memory a, Double memory b) pure internal returns (Double memory) {\r\n        return Double({mantissa: add_(a.mantissa, b.mantissa)});\r\n    }\r\n\r\n    function add_(uint a, uint b) pure internal returns (uint) {\r\n        return add_(a, b, \"addition overflow\");\r\n    }\r\n\r\n    function add_(uint a, uint b, string memory errorMessage) pure internal returns (uint) {\r\n        uint c = a + b;\r\n        require(c >= a, errorMessage);\r\n        return c;\r\n    }\r\n\r\n    function sub_(Exp memory a, Exp memory b) pure internal returns (Exp memory) {\r\n        return Exp({mantissa: sub_(a.mantissa, b.mantissa)});\r\n    }\r\n\r\n    function sub_(Double memory a, Double memory b) pure internal returns (Double memory) {\r\n        return Double({mantissa: sub_(a.mantissa, b.mantissa)});\r\n    }\r\n\r\n    function sub_(uint a, uint b) pure internal returns (uint) {\r\n        return sub_(a, b, \"subtraction underflow\");\r\n    }\r\n\r\n    function sub_(uint a, uint b, string memory errorMessage) pure internal returns (uint) {\r\n        require(b <= a, errorMessage);\r\n        return a - b;\r\n    }\r\n\r\n    function mul_(Exp memory a, Exp memory b) pure internal returns (Exp memory) {\r\n        return Exp({mantissa: mul_(a.mantissa, b.mantissa) / expScale});\r\n    }\r\n\r\n    function mul_(Exp memory a, uint b) pure internal returns (Exp memory) {\r\n        return Exp({mantissa: mul_(a.mantissa, b)});\r\n    }\r\n\r\n    function mul_(uint a, Exp memory b) pure internal returns (uint) {\r\n        return mul_(a, b.mantissa) / expScale;\r\n    }\r\n\r\n    function mul_(Double memory a, Double memory b) pure internal returns (Double memory) {\r\n        return Double({mantissa: mul_(a.mantissa, b.mantissa) / doubleScale});\r\n    }\r\n\r\n    function mul_(Double memory a, uint b) pure internal returns (Double memory) {\r\n        return Double({mantissa: mul_(a.mantissa, b)});\r\n    }\r\n\r\n    function mul_(uint a, Double memory b) pure internal returns (uint) {\r\n        return mul_(a, b.mantissa) / doubleScale;\r\n    }\r\n\r\n    function mul_(uint a, uint b) pure internal returns (uint) {\r\n        return mul_(a, b, \"multiplication overflow\");\r\n    }\r\n\r\n    function mul_(uint a, uint b, string memory errorMessage) pure internal returns (uint) {\r\n        if (a == 0 || b == 0) {\r\n            return 0;\r\n        }\r\n        uint c = a * b;\r\n        require(c / a == b, errorMessage);\r\n        return c;\r\n    }\r\n\r\n    function div_(Exp memory a, Exp memory b) pure internal returns (Exp memory) {\r\n        return Exp({mantissa: div_(mul_(a.mantissa, expScale), b.mantissa)});\r\n    }\r\n\r\n    function div_(Exp memory a, uint b) pure internal returns (Exp memory) {\r\n        return Exp({mantissa: div_(a.mantissa, b)});\r\n    }\r\n\r\n    function div_(uint a, Exp memory b) pure internal returns (uint) {\r\n        return div_(mul_(a, expScale), b.mantissa);\r\n    }\r\n\r\n    function div_(Double memory a, Double memory b) pure internal returns (Double memory) {\r\n        return Double({mantissa: div_(mul_(a.mantissa, doubleScale), b.mantissa)});\r\n    }\r\n\r\n    function div_(Double memory a, uint b) pure internal returns (Double memory) {\r\n        return Double({mantissa: div_(a.mantissa, b)});\r\n    }\r\n\r\n    function div_(uint a, Double memory b) pure internal returns (uint) {\r\n        return div_(mul_(a, doubleScale), b.mantissa);\r\n    }\r\n\r\n    function div_(uint a, uint b) pure internal returns (uint) {\r\n        return div_(a, b, \"divide by zero\");\r\n    }\r\n\r\n    function div_(uint a, uint b, string memory errorMessage) pure internal returns (uint) {\r\n        require(b > 0, errorMessage);\r\n        return a / b;\r\n    }\r\n\r\n    function fraction(uint a, uint b) pure internal returns (Double memory) {\r\n        return Double({mantissa: div_(mul_(a, doubleScale), b)});\r\n    }\r\n}\r\n\r\ninterface Distributor {\r\n    // The asset to be distributed\r\n    function asset() external view returns (address);\r\n\r\n    // Return the accrued amount of account based on stored data\r\n    function accruedStored(address account) external view returns (uint);\r\n\r\n    // Accrue and distribute for caller, but not actually transfer assets to the caller\r\n    // returns the new accrued amount\r\n    function accrue() external returns (uint);\r\n\r\n    // Claim asset, transfer the given amount assets to receiver\r\n    function claim(address receiver, uint amount) external returns (uint);\r\n}\r\n\r\ncontract Redistributor is Distributor, ExponentialNoError {\r\n    /**\r\n     * @notice The superior Distributor contract\r\n     */\r\n    Distributor public superior;\r\n\r\n    // The accrued amount of this address in superior Distributor\r\n    uint public superiorAccruedAmount;\r\n\r\n    // The initial accrual index\r\n    uint internal constant initialAccruedIndex = 1e36;\r\n\r\n    // The last accrued block number\r\n    uint public accrualBlockNumber;\r\n\r\n    // The last accrued index\r\n    uint public globalAccruedIndex;\r\n\r\n    // Total count of shares.\r\n    uint internal totalShares;\r\n\r\n    struct AccountState {\r\n        /// @notice The share of account\r\n        uint share;\r\n        // The last accrued index of account\r\n        uint accruedIndex;\r\n        /// @notice The accrued but not yet transferred to account\r\n        uint accruedAmount;\r\n    }\r\n\r\n    // The AccountState for each account\r\n    mapping(address => AccountState) internal accountStates;\r\n\r\n    /*** Events ***/\r\n    // Emitted when dfl is accrued\r\n    event Accrued(uint amount, uint globalAccruedIndex);\r\n\r\n    // Emitted when distribute to a account\r\n    event Distributed(address account, uint amount, uint accruedIndex);\r\n\r\n    // Emitted when account claims asset\r\n    event Claimed(address account, address receiver, uint amount);\r\n\r\n    // Emitted when account transfer asset\r\n    event Transferred(address from, address to, uint amount);\r\n\r\n    constructor(Distributor superior_) public {\r\n        // set superior\r\n        superior = superior_;\r\n        // init accrued index\r\n        globalAccruedIndex = initialAccruedIndex;\r\n    }\r\n\r\n    function asset() external view returns (address) {\r\n        return superior.asset();\r\n    }\r\n\r\n    // Return the accrued amount of account based on stored data\r\n    function accruedStored(address account) external view returns(uint) {\r\n        uint storedGlobalAccruedIndex;\r\n        if (totalShares == 0) {\r\n            storedGlobalAccruedIndex = globalAccruedIndex;\r\n        } else {\r\n            uint superiorAccruedStored = superior.accruedStored(address(this));\r\n            uint delta = sub_(superiorAccruedStored, superiorAccruedAmount);\r\n\r\n            Double memory ratio = fraction(delta, totalShares);\r\n            Double memory doubleGlobalAccruedIndex = add_(Double({mantissa: globalAccruedIndex}), ratio);\r\n            storedGlobalAccruedIndex = doubleGlobalAccruedIndex.mantissa;\r\n        }\r\n\r\n        (, uint instantAccountAccruedAmount) = accruedStoredInternal(account, storedGlobalAccruedIndex);\r\n        return instantAccountAccruedAmount;\r\n    }\r\n\r\n    // Return the accrued amount of account based on stored data\r\n    function accruedStoredInternal(address account, uint withGlobalAccruedIndex) internal view returns(uint, uint) {\r\n        AccountState memory state = accountStates[account];\r\n\r\n        Double memory doubleGlobalAccruedIndex = Double({mantissa: withGlobalAccruedIndex});\r\n        Double memory doubleAccountAccruedIndex = Double({mantissa: state.accruedIndex});\r\n        if (doubleAccountAccruedIndex.mantissa == 0 && doubleGlobalAccruedIndex.mantissa > 0) {\r\n            doubleAccountAccruedIndex.mantissa = initialAccruedIndex;\r\n        }\r\n\r\n        Double memory deltaIndex = sub_(doubleGlobalAccruedIndex, doubleAccountAccruedIndex);\r\n        uint delta = mul_(state.share, deltaIndex);\r\n\r\n        return (delta, add_(state.accruedAmount, delta));\r\n    }\r\n\r\n    function accrueInternal() internal {\r\n        uint blockNumber = getBlockNumber();\r\n        if (accrualBlockNumber == blockNumber) {\r\n            return;\r\n        }\r\n\r\n        uint newSuperiorAccruedAmount = superior.accrue();\r\n        if (totalShares == 0) {\r\n            accrualBlockNumber = blockNumber;\r\n            return;\r\n        }\r\n\r\n        uint delta = sub_(newSuperiorAccruedAmount, superiorAccruedAmount);\r\n\r\n        Double memory ratio = fraction(delta, totalShares);\r\n        Double memory doubleAccruedIndex = add_(Double({mantissa: globalAccruedIndex}), ratio);\r\n\r\n        // update globalAccruedIndex\r\n        globalAccruedIndex = doubleAccruedIndex.mantissa;\r\n        superiorAccruedAmount = newSuperiorAccruedAmount;\r\n        accrualBlockNumber = blockNumber;\r\n\r\n        emit Accrued(delta, doubleAccruedIndex.mantissa);\r\n    }\r\n\r\n    /**\r\n     * @notice accrue and returns accrued stored of msg.sender\r\n     */\r\n    function accrue() external returns (uint) {\r\n        accrueInternal();\r\n\r\n        (, uint instantAccountAccruedAmount) = accruedStoredInternal(msg.sender, globalAccruedIndex);\r\n        return instantAccountAccruedAmount;\r\n    }\r\n\r\n    function distributeInternal(address account) internal {\r\n        (uint delta, uint instantAccruedAmount) = accruedStoredInternal(account, globalAccruedIndex);\r\n\r\n        AccountState storage state = accountStates[account];\r\n        state.accruedIndex = globalAccruedIndex;\r\n        state.accruedAmount = instantAccruedAmount;\r\n\r\n        // emit Distributed event\r\n        emit Distributed(account, delta, globalAccruedIndex);\r\n    }\r\n\r\n    function claim(address receiver, uint amount) external returns (uint) {\r\n        address account = msg.sender;\r\n\r\n        // keep fresh\r\n        accrueInternal();\r\n        distributeInternal(account);\r\n\r\n        AccountState storage state = accountStates[account];\r\n        require(amount <= state.accruedAmount, \"claim: insufficient value\");\r\n\r\n        // claim from superior\r\n        require(superior.claim(receiver, amount) == amount, \"claim: amount mismatch\");\r\n\r\n        // update storage\r\n        state.accruedAmount = sub_(state.accruedAmount, amount);\r\n        superiorAccruedAmount = sub_(superiorAccruedAmount, amount);\r\n\r\n        emit Claimed(account, receiver, amount);\r\n\r\n        return amount;\r\n    }\r\n\r\n    function claimAll() external {\r\n        address account = msg.sender;\r\n\r\n        // accrue and distribute\r\n        accrueInternal();\r\n        distributeInternal(account);\r\n\r\n        AccountState storage state = accountStates[account];\r\n        uint amount = state.accruedAmount;\r\n\r\n        // claim from superior\r\n        require(superior.claim(account, amount) == amount, \"claim: amount mismatch\");\r\n\r\n        // update storage\r\n        state.accruedAmount = 0;\r\n        superiorAccruedAmount = sub_(superiorAccruedAmount, amount);\r\n\r\n        emit Claimed(account, account, amount);\r\n    }\r\n\r\n    function transfer(address to, uint amount) external {\r\n        address from = msg.sender;\r\n\r\n        // keep fresh\r\n        accrueInternal();\r\n        distributeInternal(from);\r\n\r\n        AccountState storage fromState = accountStates[from];\r\n        uint actualAmount = amount;\r\n        if (actualAmount == 0) {\r\n            actualAmount = fromState.accruedAmount;\r\n        }\r\n        require(fromState.accruedAmount >= actualAmount, \"transfer: insufficient value\");\r\n\r\n        AccountState storage toState = accountStates[to];\r\n\r\n        // update storage\r\n        fromState.accruedAmount = sub_(fromState.accruedAmount, actualAmount);\r\n        toState.accruedAmount = add_(toState.accruedAmount, actualAmount);\r\n\r\n        emit Transferred(from, to, actualAmount);\r\n    }\r\n\r\n    function getBlockNumber() public view returns (uint) {\r\n        return block.number;\r\n    }\r\n}\r\n\r\n/**\r\n * @dev Contract module which provides a basic access control mechanism, where\r\n * there is an account (an owner) that can be granted exclusive access to\r\n * specific functions.\r\n *\r\n * By default, the owner account will be the one that deploys the contract. This\r\n * can later be changed with {transferOwnership}.\r\n *\r\n * This module is used through inheritance. It will make available the modifier\r\n * `onlyOwner`, which can be applied to your functions to restrict their use to\r\n * the owner.\r\n */\r\ncontract Ownable {\r\n    address private _owner;\r\n\r\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\r\n\r\n    /**\r\n     * @dev Initializes the contract setting the deployer as the initial owner.\r\n     */\r\n    constructor () internal {\r\n        _owner = msg.sender;\r\n        emit OwnershipTransferred(address(0), msg.sender);\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the address of the current owner.\r\n     */\r\n    function owner() public view returns (address) {\r\n        return _owner;\r\n    }\r\n\r\n    /**\r\n     * @dev Throws if called by any account other than the owner.\r\n     */\r\n    modifier onlyOwner() {\r\n        require(_owner == msg.sender, \"Ownable: caller is not the owner\");\r\n        _;\r\n    }\r\n\r\n    /**\r\n     * @dev Leaves the contract without owner. It will not be possible to call\r\n     * `onlyOwner` functions anymore. Can only be called by the current owner.\r\n     *\r\n     * NOTE: Renouncing ownership will leave the contract without an owner,\r\n     * thereby removing any functionality that is only available to the owner.\r\n     */\r\n    function renounceOwnership() public onlyOwner {\r\n        emit OwnershipTransferred(_owner, address(0));\r\n        _owner = address(0);\r\n    }\r\n\r\n    /**\r\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\r\n     * Can only be called by the current owner.\r\n     */\r\n    function transferOwnership(address newOwner) public onlyOwner {\r\n        require(newOwner != address(0), \"Ownable: new owner is the zero address\");\r\n        emit OwnershipTransferred(_owner, newOwner);\r\n        _owner = newOwner;\r\n    }\r\n}\r\n\r\ncontract PrivilegedRedistributor is Redistributor, Ownable {\r\n    /// @notice A list of all valid members\r\n    address[] public members;\r\n\r\n    /// @notice Emitted when members changed\r\n    event Changed(address[] newMembers, uint[] newPercentages);\r\n\r\n    constructor(Distributor superior_) Redistributor(superior_) public {}\r\n\r\n    function allMembers() external view returns (address[] memory, uint[] memory) {\r\n        address[] memory storedMembers = members;\r\n\r\n        uint[] memory percentages = new uint[](storedMembers.length);\r\n        for (uint i = 0; i < storedMembers.length; i++) {\r\n            percentages[i] = accountStates[storedMembers[i]].share;\r\n        }\r\n\r\n        return (storedMembers, percentages);\r\n    }\r\n\r\n    function memberState(address member) external view returns (uint, uint, uint) {\r\n        AccountState memory state = accountStates[member];\r\n        return (state.share, state.accruedIndex, state.accruedAmount);\r\n    }\r\n\r\n    /*** Admin Functions ***/\r\n\r\n    /**\r\n     * @notice Admin function to change members and their percentages\r\n     */\r\n    function _setPercentages(uint[] calldata newPercentages) external onlyOwner {\r\n        uint sumNewPercentagesMantissa;\r\n        for (uint i = 0; i < newPercentages.length; i++) {\r\n            sumNewPercentagesMantissa = add_(sumNewPercentagesMantissa, newPercentages[i]);\r\n        }\r\n        // Check sum of new percentages equals 1\r\n        require(sumNewPercentagesMantissa == mantissaOne, \"_setPercentages: bad sum\");\r\n\r\n        // reference storage\r\n        address[] storage storedMembers = members;\r\n        require(storedMembers.length == newPercentages.length, \"_setPercentages: bad length\");\r\n\r\n        // accrue first\r\n        accrueInternal();\r\n\r\n        // distribute to members if its percentage changes\r\n        for (uint i = 0; i < storedMembers.length; i++) {\r\n            AccountState storage state = accountStates[storedMembers[i]];\r\n            distributeInternal(storedMembers[i]);\r\n            // set new percentage for member\r\n            state.share = newPercentages[i];\r\n        }\r\n\r\n        emit Changed(storedMembers, newPercentages);\r\n    }\r\n\r\n    /**\r\n     * @notice Admin function to change members and their percentages\r\n     */\r\n    function _setMembers(address[] memory newMembers, uint[] memory newPercentages) public onlyOwner {\r\n        require(newMembers.length == newPercentages.length, \"_setMembers: bad length\");\r\n\r\n        uint sumNewPercentagesMantissa;\r\n        for (uint i = 0; i < newPercentages.length; i++) {\r\n            require(newPercentages[i] != 0, \"_setMembers: bad percentage\");\r\n            sumNewPercentagesMantissa = add_(sumNewPercentagesMantissa, newPercentages[i]);\r\n        }\r\n        // Check sum of new percentages equals 1\r\n        require(sumNewPercentagesMantissa == mantissaOne, \"_setMembers: bad sum\");\r\n\r\n        // accrue first\r\n        accrueInternal();\r\n\r\n        // distribute for old members\r\n        address[] storage storedMembers = members;\r\n        for (uint i = 0; i < storedMembers.length; i++) {\r\n            distributeInternal(storedMembers[i]);\r\n            AccountState storage state = accountStates[storedMembers[i]];\r\n            state.share = 0;\r\n        }\r\n\r\n        // clear old members\r\n        storedMembers.length = 0;\r\n        for (uint i = 0; i < newMembers.length; i++) {\r\n            AccountState storage state = accountStates[newMembers[i]];\r\n            accountStates[newMembers[i]] = AccountState({share: newPercentages[i], accruedIndex: globalAccruedIndex, accruedAmount: state.accruedAmount});\r\n\r\n            storedMembers.push(newMembers[i]);\r\n        }\r\n\r\n        totalShares = mantissaOne;\r\n        emit Changed(newMembers, newPercentages);\r\n    }\r\n}","ABI":"[{\"inputs\":[{\"internalType\":\"contract Distributor\",\"name\":\"superior_\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"globalAccruedIndex\",\"type\":\"uint256\"}],\"name\":\"Accrued\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address[]\",\"name\":\"newMembers\",\"type\":\"address[]\"},{\"indexed\":false,\"internalType\":\"uint256[]\",\"name\":\"newPercentages\",\"type\":\"uint256[]\"}],\"name\":\"Changed\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"receiver\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"Claimed\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"accruedIndex\",\"type\":\"uint256\"}],\"name\":\"Distributed\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"Transferred\",\"type\":\"event\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"address[]\",\"name\":\"newMembers\",\"type\":\"address[]\"},{\"internalType\":\"uint256[]\",\"name\":\"newPercentages\",\"type\":\"uint256[]\"}],\"name\":\"_setMembers\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"uint256[]\",\"name\":\"newPercentages\",\"type\":\"uint256[]\"}],\"name\":\"_setPercentages\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"accrualBlockNumber\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"accrue\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"accruedStored\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"allMembers\",\"outputs\":[{\"internalType\":\"address[]\",\"name\":\"\",\"type\":\"address[]\"},{\"internalType\":\"uint256[]\",\"name\":\"\",\"type\":\"uint256[]\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"asset\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"address\",\"name\":\"receiver\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"claim\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"claimAll\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"getBlockNumber\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"globalAccruedIndex\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"internalType\":\"address\",\"name\":\"member\",\"type\":\"address\"}],\"name\":\"memberState\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"members\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"superior\",\"outputs\":[{\"internalType\":\"contract Distributor\",\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"superiorAccruedAmount\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"transfer\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"}]","ContractName":"PrivilegedRedistributor","CompilerVersion":"v0.5.17+commit.d19bba13","OptimizationUsed":"1","Runs":"200","ConstructorArguments":"0000000000000000000000006b4f20b2259eebb97945b6ef549a1c44fca6cd81","EVMVersion":"Default","Library":"","LicenseType":"None","Proxy":"0","Implementation":"","SwarmSource":"bzzr://e17a6cbb07c7d8a78f18d3ca1b9e56c01db5314ea038a30eb627d1a897fa6488"}]}