{"status":"1","message":"OK","result":[{"SourceCode":"{{\r\n  \"language\": \"Solidity\",\r\n  \"sources\": {\r\n    \"/contracts/PlacesDescriptor.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\n/// @title Places descriptor\\n/// @author Places DAO\\n\\n/*************************************\\n * ████░░░░░░░░░░░░░░░░░░░░░░░░░████ *\\n * ██░░░░░░░██████░░██████░░░░░░░░██ *\\n * ░░░░░░░██████████████████░░░░░░░░ *\\n * ░░░░░████████      ████████░░░░░░ *\\n * ░░░░░██████  ██████  ██████░░░░░░ *\\n * ░░░░░██████  ██████  ██████░░░░░░ *\\n * ░░░░░░░████  ██████  ████░░░░░░░░ *\\n * ░░░░░░░░░████      ████░░░░░░░░░░ *\\n * ░░░░░░░░░░░██████████░░░░░░░░░░░░ *\\n * ░░░░░░░░░░░░░██████░░░░░░░░░░░░░░ *\\n * ██░░░░░░░░░░░░░██░░░░░░░░░░░░░░██ *\\n * ████░░░░░░░░░░░░░░░░░░░░░░░░░████ *\\n *************************************/\\n\\npragma solidity ^0.8.6;\\n\\nimport {Ownable} from \\\"@openzeppelin/contracts/access/Ownable.sol\\\";\\nimport {Base64} from \\\"base64-sol/base64.sol\\\";\\nimport {IPlaces} from \\\"./interfaces/IPlaces.sol\\\";\\nimport {IPlacesDescriptor} from \\\"./interfaces/IPlacesDescriptor.sol\\\";\\n\\ncontract PlacesDescriptor is IPlacesDescriptor, Ownable {\\n    /**\\n     * @notice Create contract metadata for Opensea.\\n     */\\n    function constructContractURI()\\n        external\\n        pure\\n        override\\n        returns (string memory)\\n    {\\n        return \\\"\\\";\\n    }\\n\\n    /**\\n     * @notice Create the ERC721 token URI for a token.\\n     */\\n    function constructTokenURI(uint256 tokenId, IPlaces.Place memory place)\\n        external\\n        pure\\n        override\\n        returns (string memory)\\n    {\\n        string[30] memory parts;\\n        parts[\\n            0\\n        ] = '<svg xmlns=\\\"http://www.w3.org/2000/svg\\\" preserveAspectRatio=\\\"xMinYMin meet\\\" viewBox=\\\"0 0 520 520\\\"><style>.text { font-family: monospace; font-size: 16px; fill: white; } .name { font-size: 18px; font-weight: 600; } .blue { fill: #2681FF; }.black { fill: black; }</style>';\\n\\n        parts[\\n            1\\n        ] = '<defs><filter x=\\\"0\\\" y=\\\"0\\\" width=\\\"1\\\" height=\\\"1\\\" id=\\\"blue\\\"><feFlood flood-color=\\\"#2681FF\\\" /><feComposite in=\\\"SourceGraphic\\\" operator=\\\"xor\\\" /></filter></defs><rect width=\\\"100%\\\" height=\\\"100%\\\" fill=\\\"black\\\"/>';\\n\\n        parts[\\n            2\\n        ] = '<circle cx=\\\"260\\\" cy=\\\"260\\\" r=\\\"164\\\" fill=\\\"#102440\\\" stroke=\\\"#none\\\"/><circle cx=\\\"260\\\" cy=\\\"260\\\" r=\\\"12\\\" fill=\\\"black\\\" stroke=\\\"#2681FF\\\" stroke-width=\\\"4\\\"/><rect x=\\\"252\\\" y=\\\"220\\\" width=\\\"16\\\" height=\\\"16\\\" transform=\\\"rotate(45 260 228)\\\" fill=\\\"#2681FF\\\"/>';\\n\\n        parts[\\n            3\\n        ] = '<text x=\\\"50%\\\" y=\\\"224\\\" text-anchor=\\\"middle\\\" filter=\\\"url(#blue)\\\" class=\\\"text name\\\">';\\n\\n        parts[4] = place.name;\\n        parts[\\n            5\\n        ] = '</text><text x=\\\"50%\\\" y=\\\"224\\\" text-anchor=\\\"middle\\\" class=\\\"text name black\\\">';\\n        parts[6] = place.name;\\n        parts[\\n            7\\n        ] = '</text><text x=\\\"50%\\\" y=\\\"223\\\" text-anchor=\\\"middle\\\" class=\\\"text name\\\">';\\n        parts[8] = place.name;\\n        parts[9] = '</text><g class=\\\"text\\\"><text x=\\\"24\\\" y=\\\"34\\\">';\\n        parts[10] = place.attributes[0];\\n        parts[11] = '</text><text x=\\\"24\\\" y=\\\"58\\\">';\\n        parts[12] = place.attributes[1];\\n        parts[13] = '</text><text x=\\\"24\\\" y=\\\"82\\\">';\\n        parts[14] = place.attributes[2];\\n        parts[15] = '</text></g><g class=\\\"text\\\"><text x=\\\"24\\\" y=\\\"398\\\">';\\n        parts[16] = place.sublocality;\\n        parts[17] = '</text><text x=\\\"24\\\" y=\\\"422\\\"><tspan>';\\n        parts[18] = place.locality;\\n        parts[19] = \\\"</tspan><tspan>, </tspan><tspan>\\\";\\n        parts[20] = place.administrativeArea;\\n        parts[21] = '</tspan></text><text x=\\\"24\\\" y=\\\"446\\\">';\\n        parts[22] = place.streetAddress;\\n        parts[23] = '</text><text x=\\\"24\\\" y=\\\"470\\\">Elevation ';\\n        parts[24] = (place.location.hasAltitude)\\n            ? place.location.altitude\\n            : \\\"???\\\";\\n        if (place.location.hasAltitude) {\\n            parts[25] = 'm</text><text x=\\\"24\\\" y=\\\"494\\\" class=\\\"blue\\\">';\\n        } else {\\n            parts[25] = '</text><text x=\\\"24\\\" y=\\\"494\\\" class=\\\"blue\\\">';\\n        }\\n        parts[26] = place.location.latitude;\\n        parts[27] = \\\", \\\";\\n        parts[28] = place.location.longitude;\\n        parts[29] = \\\"</text></g></svg>\\\";\\n\\n        string memory output = string(\\n            abi.encodePacked(\\n                parts[0],\\n                parts[1],\\n                parts[2],\\n                parts[3],\\n                parts[4],\\n                parts[5],\\n                parts[6],\\n                parts[7],\\n                parts[8]\\n            )\\n        );\\n        output = string(\\n            abi.encodePacked(\\n                output,\\n                parts[9],\\n                parts[10],\\n                parts[11],\\n                parts[12],\\n                parts[13],\\n                parts[14],\\n                parts[15],\\n                parts[16]\\n            )\\n        );\\n        output = string(\\n            abi.encodePacked(\\n                output,\\n                parts[17],\\n                parts[18],\\n                parts[19],\\n                parts[20],\\n                parts[21],\\n                parts[22],\\n                parts[23],\\n                parts[24]\\n            )\\n        );\\n        output = string(\\n            abi.encodePacked(\\n                output,\\n                parts[25],\\n                parts[26],\\n                parts[27],\\n                parts[28],\\n                parts[29]\\n            )\\n        );\\n\\n        string[14] memory traitParts;\\n        traitParts[0] = '\\\"trait_type\\\": \\\"SUBLOCALITY\\\", \\\"value\\\": \\\"';\\n        traitParts[1] = place.sublocality;\\n        traitParts[2] = '\\\"}, {\\\"trait_type\\\": \\\"LOCALITY\\\", \\\"value\\\": \\\"';\\n        traitParts[3] = place.locality;\\n        traitParts[\\n            4\\n        ] = '\\\"}, {\\\"trait_type\\\": \\\"SUBADMINISTRATIVE AREA\\\", \\\"value\\\": \\\"';\\n        traitParts[5] = place.subadministrativeArea;\\n        traitParts[6] = '\\\"}, {\\\"trait_type\\\": \\\"ADMINISTRATIVE AREA\\\", \\\"value\\\": \\\"';\\n        traitParts[7] = place.administrativeArea;\\n        traitParts[8] = '\\\"}, {\\\"trait_type\\\": \\\"COUNTRY\\\", \\\"value\\\": \\\"';\\n        traitParts[9] = place.country;\\n        traitParts[10] = '\\\"}, {\\\"trait_type\\\": \\\"POSTAL CODE\\\", \\\"value\\\": \\\"';\\n        traitParts[11] = place.postalCode;\\n        traitParts[12] = '\\\"}, {\\\"trait_type\\\": \\\"ATTRIBUTE\\\", \\\"value\\\": \\\"';\\n        traitParts[13] = place.attributes[0];\\n\\n        string memory traits = string(\\n            abi.encodePacked(\\n                traitParts[0],\\n                traitParts[1],\\n                traitParts[2],\\n                traitParts[3],\\n                traitParts[4],\\n                traitParts[5],\\n                traitParts[6],\\n                traitParts[7],\\n                traitParts[8]\\n            )\\n        );\\n        traits = string(\\n            abi.encodePacked(\\n                traits,\\n                traitParts[9],\\n                traitParts[10],\\n                traitParts[11],\\n                traitParts[12],\\n                traitParts[13]\\n            )\\n        );\\n\\n        bool hasSecondTrait = bytes(place.attributes[1]).length > 0;\\n        bool hasThirdTrait = bytes(place.attributes[2]).length > 0;\\n        if (hasSecondTrait && hasThirdTrait) {\\n            traits = string(\\n                abi.encodePacked(\\n                    traits,\\n                    '\\\"}, {\\\"trait_type\\\": \\\"ATTRIBUTE\\\", \\\"value\\\": \\\"',\\n                    place.attributes[1],\\n                    '\\\"}, {\\\"trait_type\\\": \\\"ATTRIBUTE\\\", \\\"value\\\": \\\"',\\n                    place.attributes[2]\\n                )\\n            );\\n        } else if (hasSecondTrait) {\\n            traits = string(\\n                abi.encodePacked(\\n                    traits,\\n                    '\\\"}, {\\\"trait_type\\\": \\\"ATTRIBUTE\\\", \\\"value\\\": \\\"',\\n                    place.attributes[1]\\n                )\\n            );\\n        } else if (hasThirdTrait) {\\n            traits = string(\\n                abi.encodePacked(\\n                    traits,\\n                    '\\\"}, {\\\"trait_type\\\": \\\"ATTRIBUTE\\\", \\\"value\\\": \\\"',\\n                    place.attributes[2]\\n                )\\n            );\\n        }\\n\\n        traits = string(\\n            abi.encodePacked(\\n                traits,\\n                '\\\"}, {\\\"display_type\\\": \\\"number\\\", \\\"trait_type\\\": \\\"LATITUDE\\\", \\\"value\\\": ',\\n                place.location.latitude,\\n                '}, {\\\"display_type\\\": \\\"number\\\", \\\"trait_type\\\": \\\"LONGITUDE\\\", \\\"value\\\": ',\\n                place.location.longitude\\n            )\\n        );\\n\\n        if (place.location.hasAltitude) {\\n            traits = string(\\n                abi.encodePacked(\\n                    traits,\\n                    '}, {\\\"display_type\\\": \\\"number\\\", \\\"trait_type\\\": \\\"ALTITUDE\\\", \\\"value\\\": ',\\n                    place.location.altitude\\n                )\\n            );\\n        }\\n\\n        // props to Brecht Devos Base64\\n        string memory json = Base64.encode(\\n            bytes(\\n                string(\\n                    abi.encodePacked(\\n                        '{\\\"name\\\": \\\"',\\n                        place.name,\\n                        unicode\\\" – Place #\\\",\\n                        toString(tokenId),\\n                        '\\\", \\\"description\\\": \\\"Places is an experiment to establish geographic locations as non-fungible tokens on the Ethereum blockchain.\\\", \\\"image\\\": \\\"data:image/svg+xml;base64,',\\n                        Base64.encode(bytes(output)),\\n                        '\\\", \\\"attributes\\\": [{',\\n                        traits,\\n                        \\\"}]}\\\"\\n                    )\\n                )\\n            )\\n        );\\n        output = string(\\n            abi.encodePacked(\\\"data:application/json;base64,\\\", json)\\n        );\\n\\n        return output;\\n    }\\n\\n    /**\\n     * @notice [MIT License] via Loot, inspired by OraclizeAPI's implementation - MIT license\\n     * @dev https://github.com/oraclize/ethereum-api/blob/b42146b063c7d6ee1358846c198246239e9360e8/oraclizeAPI_0.4.25.sol\\n     */\\n    function toString(uint256 value) internal pure returns (string memory) {\\n        if (value == 0) {\\n            return \\\"0\\\";\\n        }\\n        uint256 temp = value;\\n        uint256 digits;\\n        while (temp != 0) {\\n            digits++;\\n            temp /= 10;\\n        }\\n        bytes memory buffer = new bytes(digits);\\n        while (value != 0) {\\n            digits -= 1;\\n            buffer[digits] = bytes1(uint8(48 + uint256(value % 10)));\\n            value /= 10;\\n        }\\n        return string(buffer);\\n    }\\n}\\n\"\r\n    },\r\n    \"/contracts/interfaces/IPlacesDescriptor.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\n/// @title Interface for Places descriptor\\n/// @author Places DAO\\n\\n/*************************************\\n * ░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░ *\\n * ░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░ *\\n * ░░░░░░░███░░░░░░░░░░░░░███░░░░░░░ *\\n * ░▒▒▒░░░███░░░░░░░░░░░░░███░░░▒▒▒░ *\\n * ░▒▒▒░░░░░░░░░░░░░░░░░░░░░░░░░▒▒▒░ *\\n * ░░░░█████████████████████████░░░░ *\\n * ░░░░░░█████    ███    █████░░░░░░ *\\n * ░░░░░░░░█████████████████░░░░░░░░ *\\n * ░░░░░░░░░░████▓▓▓▓▓▓███░░░░░░░░░░ *\\n * ░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░ *\\n * ░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░ *\\n *************************************/\\n\\npragma solidity ^0.8.6;\\n\\nimport {IPlaces} from \\\"./IPlaces.sol\\\";\\n\\ninterface IPlacesDescriptor {\\n    function constructContractURI() external pure returns (string memory);\\n\\n    function constructTokenURI(uint256 tokenId, IPlaces.Place memory place)\\n        external\\n        pure\\n        returns (string memory);\\n}\\n\"\r\n    },\r\n    \"/contracts/interfaces/IPlaces.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\n/// @title Interface for Places\\n/// @author Places DAO\\n\\n/*************************************\\n * ████░░░░░░░░░░░░░░░░░░░░░░░░░████ *\\n * ██░░░░░░░██████░░██████░░░░░░░░██ *\\n * ░░░░░░░██████████████████░░░░░░░░ *\\n * ░░░░░████████      ████████░░░░░░ *\\n * ░░░░░██████  ██████  ██████░░░░░░ *\\n * ░░░░░██████  ██████  ██████░░░░░░ *\\n * ░░░░░░░████  ██████  ████░░░░░░░░ *\\n * ░░░░░░░░░████      ████░░░░░░░░░░ *\\n * ░░░░░░░░░░░██████████░░░░░░░░░░░░ *\\n * ░░░░░░░░░░░░░██████░░░░░░░░░░░░░░ *\\n * ██░░░░░░░░░░░░░██░░░░░░░░░░░░░░██ *\\n * ████░░░░░░░░░░░░░░░░░░░░░░░░░████ *\\n *************************************/\\n\\npragma solidity ^0.8.6;\\n\\ninterface IPlaces {\\n    /**\\n     * @notice Location – Represents a geographic coordinate with altitude.\\n     *\\n     * Latitude and longitude values are in degrees under the WGS 84 reference\\n     * frame. Altitude values are in meters. Two location types are provided\\n     * int256 and string. The integer representation enables on chain computation\\n     * where as the string representation provides future computational compatability.\\n     *\\n     * Converting a location from a to integer uses GEO_RESOLUTION_INT denominator.\\n     * 37.73957402260721 encodes to 3773957402260721\\n     * -122.41902666230027 encodes to -12241902666230027\\n     *\\n     * hasAltitude – a boolean that indicates the validity of the altitude values\\n     * latitudeInt – integer representing the latitude in degrees encoded with\\n     * GEO_RESOLUTION_INT\\n     * longitudeInt – integer representing the longitude in degrees encoded with\\n     * GEO_RESOLUTION_INT\\n     * altitudeInt – integer representing the altitude in meters encoded with\\n     * GEO_RESOLUTION_INT\\n     * latitude – string representing the latitude coordinate in degrees under\\n     * the WGS 84 reference frame\\n     * longitude – string representing the longitude coordinate in degrees under\\n     * the WGS 84 reference frame\\n     * altitude – string representing the altitude measurement in meters\\n     */\\n    struct Location {\\n        int256 latitudeInt;\\n        int256 longitudeInt;\\n        int256 altitudeInt;\\n        bool hasAltitude;\\n        string latitude;\\n        string longitude;\\n        string altitude;\\n    }\\n\\n    /**\\n     * @notice Place – Represents place information for a geographic location.\\n     *\\n     * name – string representing the place name\\n     * streetAddress – string indicating a precise address\\n     * sublocality – string representing the subdivision and first-order civil\\n     * entity below locality (neighborhood or common name)\\n     * locality – string representing the incorporated city or town political\\n     * entity\\n     * subadministrativeArea – string representing the subdivision of the\\n     * second-order civil entity (county name)\\n     * administrativeArea – string representing the second-order civil entity\\n     * below country (state or region name)\\n     * country – string representing the national political entity\\n     * postalCode – string representing the code used to address postal mail\\n     * within the country\\n     * countryCode – string representing the ISO 3166-1 country code,\\n     * https://en.wikipedia.org/wiki/ISO_3166-1\\n     * location – geographic location of the place, see Location type\\n     * attributes – string array of attributes describing the place\\n     */\\n    struct Place {\\n        string name;\\n        string streetAddress;\\n        string sublocality;\\n        string locality;\\n        string subadministrativeArea;\\n        string administrativeArea;\\n        string country;\\n        string postalCode;\\n        string countryCode;\\n        Location location;\\n        string[3] attributes;\\n    }\\n}\\n\"\r\n    },\r\n    \"base64-sol/base64.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\n/// @title Base64\\n/// @author Brecht Devos - <brecht@loopring.org>\\n/// @notice Provides a function for encoding some bytes in base64\\nlibrary Base64 {\\n    string internal constant TABLE = 'ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/';\\n\\n    function encode(bytes memory data) internal pure returns (string memory) {\\n        if (data.length == 0) return '';\\n        \\n        // load the table into memory\\n        string memory table = TABLE;\\n\\n        // multiply by 4/3 rounded up\\n        uint256 encodedLen = 4 * ((data.length + 2) / 3);\\n\\n        // add some extra buffer at the end required for the writing\\n        string memory result = new string(encodedLen + 32);\\n\\n        assembly {\\n            // set the actual output length\\n            mstore(result, encodedLen)\\n            \\n            // prepare the lookup table\\n            let tablePtr := add(table, 1)\\n            \\n            // input ptr\\n            let dataPtr := data\\n            let endPtr := add(dataPtr, mload(data))\\n            \\n            // result ptr, jump over length\\n            let resultPtr := add(result, 32)\\n            \\n            // run over the input, 3 bytes at a time\\n            for {} lt(dataPtr, endPtr) {}\\n            {\\n               dataPtr := add(dataPtr, 3)\\n               \\n               // read 3 bytes\\n               let input := mload(dataPtr)\\n               \\n               // write 4 characters\\n               mstore(resultPtr, shl(248, mload(add(tablePtr, and(shr(18, input), 0x3F)))))\\n               resultPtr := add(resultPtr, 1)\\n               mstore(resultPtr, shl(248, mload(add(tablePtr, and(shr(12, input), 0x3F)))))\\n               resultPtr := add(resultPtr, 1)\\n               mstore(resultPtr, shl(248, mload(add(tablePtr, and(shr( 6, input), 0x3F)))))\\n               resultPtr := add(resultPtr, 1)\\n               mstore(resultPtr, shl(248, mload(add(tablePtr, and(        input,  0x3F)))))\\n               resultPtr := add(resultPtr, 1)\\n            }\\n            \\n            // padding with '='\\n            switch mod(mload(data), 3)\\n            case 1 { mstore(sub(resultPtr, 2), shl(240, 0x3d3d)) }\\n            case 2 { mstore(sub(resultPtr, 1), shl(248, 0x3d)) }\\n        }\\n        \\n        return result;\\n    }\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/utils/Context.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Provides information about the current execution context, including the\\n * sender of the transaction and its data. While these are generally available\\n * via msg.sender and msg.data, they should not be accessed in such a direct\\n * manner, since when dealing with meta-transactions the account sending and\\n * paying for execution may not be the actual sender (as far as an application\\n * is concerned).\\n *\\n * This contract is only required for intermediate, library-like contracts.\\n */\\nabstract contract Context {\\n    function _msgSender() internal view virtual returns (address) {\\n        return msg.sender;\\n    }\\n\\n    function _msgData() internal view virtual returns (bytes calldata) {\\n        return msg.data;\\n    }\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/access/Ownable.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../utils/Context.sol\\\";\\n\\n/**\\n * @dev Contract module which provides a basic access control mechanism, where\\n * there is an account (an owner) that can be granted exclusive access to\\n * specific functions.\\n *\\n * By default, the owner account will be the one that deploys the contract. This\\n * can later be changed with {transferOwnership}.\\n *\\n * This module is used through inheritance. It will make available the modifier\\n * `onlyOwner`, which can be applied to your functions to restrict their use to\\n * the owner.\\n */\\nabstract contract Ownable is Context {\\n    address private _owner;\\n\\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\\n\\n    /**\\n     * @dev Initializes the contract setting the deployer as the initial owner.\\n     */\\n    constructor() {\\n        _setOwner(_msgSender());\\n    }\\n\\n    /**\\n     * @dev Returns the address of the current owner.\\n     */\\n    function owner() public view virtual returns (address) {\\n        return _owner;\\n    }\\n\\n    /**\\n     * @dev Throws if called by any account other than the owner.\\n     */\\n    modifier onlyOwner() {\\n        require(owner() == _msgSender(), \\\"Ownable: caller is not the owner\\\");\\n        _;\\n    }\\n\\n    /**\\n     * @dev Leaves the contract without owner. It will not be possible to call\\n     * `onlyOwner` functions anymore. Can only be called by the current owner.\\n     *\\n     * NOTE: Renouncing ownership will leave the contract without an owner,\\n     * thereby removing any functionality that is only available to the owner.\\n     */\\n    function renounceOwnership() public virtual onlyOwner {\\n        _setOwner(address(0));\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Can only be called by the current owner.\\n     */\\n    function transferOwnership(address newOwner) public virtual onlyOwner {\\n        require(newOwner != address(0), \\\"Ownable: new owner is the zero address\\\");\\n        _setOwner(newOwner);\\n    }\\n\\n    function _setOwner(address newOwner) private {\\n        address oldOwner = _owner;\\n        _owner = newOwner;\\n        emit OwnershipTransferred(oldOwner, newOwner);\\n    }\\n}\\n\"\r\n    }\r\n  },\r\n  \"settings\": {\r\n    \"remappings\": [],\r\n    \"optimizer\": {\r\n      \"enabled\": true,\r\n      \"runs\": 1000\r\n    },\r\n    \"evmVersion\": \"london\",\r\n    \"libraries\": {},\r\n    \"outputSelection\": {\r\n      \"*\": {\r\n        \"*\": [\r\n          \"evm.bytecode\",\r\n          \"evm.deployedBytecode\",\r\n          \"devdoc\",\r\n          \"userdoc\",\r\n          \"metadata\",\r\n          \"abi\"\r\n        ]\r\n      }\r\n    }\r\n  }\r\n}}","ABI":"[{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"constructContractURI\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"},{\"components\":[{\"internalType\":\"string\",\"name\":\"name\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"streetAddress\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"sublocality\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"locality\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"subadministrativeArea\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"administrativeArea\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"country\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"postalCode\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"countryCode\",\"type\":\"string\"},{\"components\":[{\"internalType\":\"int256\",\"name\":\"latitudeInt\",\"type\":\"int256\"},{\"internalType\":\"int256\",\"name\":\"longitudeInt\",\"type\":\"int256\"},{\"internalType\":\"int256\",\"name\":\"altitudeInt\",\"type\":\"int256\"},{\"internalType\":\"bool\",\"name\":\"hasAltitude\",\"type\":\"bool\"},{\"internalType\":\"string\",\"name\":\"latitude\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"longitude\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"altitude\",\"type\":\"string\"}],\"internalType\":\"struct IPlaces.Location\",\"name\":\"location\",\"type\":\"tuple\"},{\"internalType\":\"string[3]\",\"name\":\"attributes\",\"type\":\"string[3]\"}],\"internalType\":\"struct IPlaces.Place\",\"name\":\"place\",\"type\":\"tuple\"}],\"name\":\"constructTokenURI\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}]","ContractName":"PlacesDescriptor","CompilerVersion":"v0.8.9+commit.e5eed63a","OptimizationUsed":"1","Runs":"1000","ConstructorArguments":"","EVMVersion":"Default","Library":"","LicenseType":"","Proxy":"0","Implementation":"","SwarmSource":""}]}