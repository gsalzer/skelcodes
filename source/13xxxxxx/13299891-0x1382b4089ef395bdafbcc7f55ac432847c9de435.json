{"status":"1","message":"OK","result":[{"SourceCode":"{{\r\n  \"language\": \"Solidity\",\r\n  \"settings\": {\r\n    \"evmVersion\": \"berlin\",\r\n    \"libraries\": {},\r\n    \"metadata\": {\r\n      \"bytecodeHash\": \"ipfs\",\r\n      \"useLiteralContent\": true\r\n    },\r\n    \"optimizer\": {\r\n      \"enabled\": true,\r\n      \"runs\": 1000\r\n    },\r\n    \"remappings\": [],\r\n    \"outputSelection\": {\r\n      \"*\": {\r\n        \"*\": [\r\n          \"evm.bytecode\",\r\n          \"evm.deployedBytecode\",\r\n          \"abi\"\r\n        ]\r\n      }\r\n    }\r\n  },\r\n  \"sources\": {\r\n    \"contracts/0xerc1155/access/AccessControl.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity 0.7.6;\\n\\nimport '../utils/EnumerableSet.sol';\\nimport '../utils/Address.sol';\\nimport '../utils/Context.sol';\\n\\n/**\\n * @dev Contract module that allows children to implement role-based access\\n * control mechanisms.\\n *\\n * Roles are referred to by their `bytes32` identifier. These should be exposed\\n * in the external API and be unique. The best way to achieve this is by\\n * using `public constant` hash digests:\\n *\\n * ```\\n * bytes32 public constant MY_ROLE = keccak256(\\\"MY_ROLE\\\");\\n * ```\\n *\\n * Roles can be used to represent a set of permissions. To restrict access to a\\n * function call, use {hasRole}:\\n *\\n * ```\\n * function foo() public {\\n *     require(hasRole(MY_ROLE, msg.sender));\\n *     ...\\n * }\\n * ```\\n *\\n * Roles can be granted and revoked dynamically via the {grantRole} and\\n * {revokeRole} functions. Each role has an associated admin role, and only\\n * accounts that have a role's admin role can call {grantRole} and {revokeRole}.\\n *\\n * By default, the admin role for all roles is `DEFAULT_ADMIN_ROLE`, which means\\n * that only accounts with this role will be able to grant or revoke other\\n * roles. More complex role relationships can be created by using\\n * {_setRoleAdmin}.\\n *\\n * WARNING: The `DEFAULT_ADMIN_ROLE` is also its own admin: it has permission to\\n * grant and revoke this role. Extra precautions should be taken to secure\\n * accounts that have been granted it.\\n */\\nabstract contract AccessControl is Context {\\n  using EnumerableSet for EnumerableSet.AddressSet;\\n  using Address for address;\\n\\n  struct RoleData {\\n    EnumerableSet.AddressSet members;\\n    bytes32 adminRole;\\n  }\\n\\n  mapping(bytes32 => RoleData) private _roles;\\n\\n  bytes32 public constant DEFAULT_ADMIN_ROLE = 0x00;\\n\\n  /**\\n   * @dev Emitted when `newAdminRole` is set as ``role``'s admin role, replacing `previousAdminRole`\\n   *\\n   * `DEFAULT_ADMIN_ROLE` is the starting admin for all roles, despite\\n   * {RoleAdminChanged} not being emitted signaling this.\\n   *\\n   * _Available since v3.1._\\n   */\\n  event RoleAdminChanged(\\n    bytes32 indexed role,\\n    bytes32 indexed previousAdminRole,\\n    bytes32 indexed newAdminRole\\n  );\\n\\n  /**\\n   * @dev Emitted when `account` is granted `role`.\\n   *\\n   * `sender` is the account that originated the contract call, an admin role\\n   * bearer except when using {_setupRole}.\\n   */\\n  event RoleGranted(\\n    bytes32 indexed role,\\n    address indexed account,\\n    address indexed sender\\n  );\\n\\n  /**\\n   * @dev Emitted when `account` is revoked `role`.\\n   *\\n   * `sender` is the account that originated the contract call:\\n   *   - if using `revokeRole`, it is the admin role bearer\\n   *   - if using `renounceRole`, it is the role bearer (i.e. `account`)\\n   */\\n  event RoleRevoked(\\n    bytes32 indexed role,\\n    address indexed account,\\n    address indexed sender\\n  );\\n\\n  /**\\n   * @dev Returns `true` if `account` has been granted `role`.\\n   */\\n  function hasRole(bytes32 role, address account) public view returns (bool) {\\n    return _roles[role].members.contains(account);\\n  }\\n\\n  /**\\n   * @dev Returns the number of accounts that have `role`. Can be used\\n   * together with {getRoleMember} to enumerate all bearers of a role.\\n   */\\n  function getRoleMemberCount(bytes32 role) public view returns (uint256) {\\n    return _roles[role].members.length();\\n  }\\n\\n  /**\\n   * @dev Returns one of the accounts that have `role`. `index` must be a\\n   * value between 0 and {getRoleMemberCount}, non-inclusive.\\n   *\\n   * Role bearers are not sorted in any particular way, and their ordering may\\n   * change at any point.\\n   *\\n   * WARNING: When using {getRoleMember} and {getRoleMemberCount}, make sure\\n   * you perform all queries on the same block. See the following\\n   * https://forum.openzeppelin.com/t/iterating-over-elements-on-enumerableset-in-openzeppelin-contracts/2296[forum post]\\n   * for more information.\\n   */\\n  function getRoleMember(bytes32 role, uint256 index)\\n    public\\n    view\\n    returns (address)\\n  {\\n    return _roles[role].members.at(index);\\n  }\\n\\n  /**\\n   * @dev Returns the admin role that controls `role`. See {grantRole} and\\n   * {revokeRole}.\\n   *\\n   * To change a role's admin, use {_setRoleAdmin}.\\n   */\\n  function getRoleAdmin(bytes32 role) public view returns (bytes32) {\\n    return _roles[role].adminRole;\\n  }\\n\\n  /**\\n   * @dev Grants `role` to `account`.\\n   *\\n   * If `account` had not been already granted `role`, emits a {RoleGranted}\\n   * event.\\n   *\\n   * Requirements:\\n   *\\n   * - the caller must have ``role``'s admin role.\\n   */\\n  function grantRole(bytes32 role, address account) public virtual {\\n    require(\\n      hasRole(_roles[role].adminRole, _msgSender()),\\n      'AccessControl: sender must be an admin to grant'\\n    );\\n\\n    _grantRole(role, account);\\n  }\\n\\n  /**\\n   * @dev Revokes `role` from `account`.\\n   *\\n   * If `account` had been granted `role`, emits a {RoleRevoked} event.\\n   *\\n   * Requirements:\\n   *\\n   * - the caller must have ``role``'s admin role.\\n   */\\n  function revokeRole(bytes32 role, address account) public virtual {\\n    require(\\n      hasRole(_roles[role].adminRole, _msgSender()),\\n      'AccessControl: sender must be an admin to revoke'\\n    );\\n\\n    _revokeRole(role, account);\\n  }\\n\\n  /**\\n   * @dev Revokes `role` from the calling account.\\n   *\\n   * Roles are often managed via {grantRole} and {revokeRole}: this function's\\n   * purpose is to provide a mechanism for accounts to lose their privileges\\n   * if they are compromised (such as when a trusted device is misplaced).\\n   *\\n   * If the calling account had been granted `role`, emits a {RoleRevoked}\\n   * event.\\n   *\\n   * Requirements:\\n   *\\n   * - the caller must be `account`.\\n   */\\n  function renounceRole(bytes32 role, address account) public virtual {\\n    require(\\n      account == _msgSender(),\\n      'AccessControl: can only renounce roles for self'\\n    );\\n\\n    _revokeRole(role, account);\\n  }\\n\\n  /**\\n   * @dev Grants `role` to `account`.\\n   *\\n   * If `account` had not been already granted `role`, emits a {RoleGranted}\\n   * event. Note that unlike {grantRole}, this function doesn't perform any\\n   * checks on the calling account.\\n   *\\n   * [WARNING]\\n   * ====\\n   * This function should only be called from the constructor when setting\\n   * up the initial roles for the system.\\n   *\\n   * Using this function in any other way is effectively circumventing the admin\\n   * system imposed by {AccessControl}.\\n   * ====\\n   */\\n  function _setupRole(bytes32 role, address account) internal virtual {\\n    _grantRole(role, account);\\n  }\\n\\n  /**\\n   * @dev Sets `adminRole` as ``role``'s admin role.\\n   *\\n   * Emits a {RoleAdminChanged} event.\\n   */\\n  function _setRoleAdmin(bytes32 role, bytes32 adminRole) internal virtual {\\n    emit RoleAdminChanged(role, _roles[role].adminRole, adminRole);\\n    _roles[role].adminRole = adminRole;\\n  }\\n\\n  function _grantRole(bytes32 role, address account) private {\\n    if (_roles[role].members.add(account)) {\\n      emit RoleGranted(role, account, _msgSender());\\n    }\\n  }\\n\\n  function _revokeRole(bytes32 role, address account) private {\\n    if (_roles[role].members.remove(account)) {\\n      emit RoleRevoked(role, account, _msgSender());\\n    }\\n  }\\n}\\n\"\r\n    },\r\n    \"contracts/0xerc1155/interfaces/IERC1155TokenReceiver.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: Apache-2.0\\npragma solidity 0.7.6;\\n\\n/**\\n * @dev ERC-1155 interface for accepting safe transfers.\\n */\\ninterface IERC1155TokenReceiver {\\n  /**\\n   * @notice Handle the receipt of a single ERC1155 token type\\n   * @dev An ERC1155-compliant smart contract MUST call this function on the token recipient contract, at the end of a `safeTransferFrom` after the balance has been updated\\n   * This function MAY throw to revert and reject the transfer\\n   * Return of other amount than the magic value MUST result in the transaction being reverted\\n   * Note: The token contract address is always the message sender\\n   * @param _operator  The address which called the `safeTransferFrom` function\\n   * @param _from      The address which previously owned the token\\n   * @param _id        The id of the token being transferred\\n   * @param _amount    The amount of tokens being transferred\\n   * @param _data      Additional data with no specified format\\n   * @return           `bytes4(keccak256(\\\"onERC1155Received(address,address,uint256,uint256,bytes)\\\"))`\\n   */\\n  function onERC1155Received(\\n    address _operator,\\n    address _from,\\n    uint256 _id,\\n    uint256 _amount,\\n    bytes calldata _data\\n  ) external returns (bytes4);\\n\\n  /**\\n   * @notice Handle the receipt of multiple ERC1155 token types\\n   * @dev An ERC1155-compliant smart contract MUST call this function on the token recipient contract, at the end of a `safeBatchTransferFrom` after the balances have been updated\\n   * This function MAY throw to revert and reject the transfer\\n   * Return of other amount than the magic value WILL result in the transaction being reverted\\n   * Note: The token contract address is always the message sender\\n   * @param _operator  The address which called the `safeBatchTransferFrom` function\\n   * @param _from      The address which previously owned the token\\n   * @param _ids       An array containing ids of each token being transferred\\n   * @param _amounts   An array containing amounts of each token being transferred\\n   * @param _data      Additional data with no specified format\\n   * @return           `bytes4(keccak256(\\\"onERC1155BatchReceived(address,address,uint256[],uint256[],bytes)\\\"))`\\n   */\\n  function onERC1155BatchReceived(\\n    address _operator,\\n    address _from,\\n    uint256[] calldata _ids,\\n    uint256[] calldata _amounts,\\n    bytes calldata _data\\n  ) external returns (bytes4);\\n}\\n\"\r\n    },\r\n    \"contracts/0xerc1155/utils/Address.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT AND Apache-2.0\\n\\npragma solidity 0.7.6;\\n\\n/**\\n * Utility library of inline functions on addresses\\n */\\nlibrary Address {\\n  // Default hash for EOA accounts returned by extcodehash\\n  bytes32 internal constant ACCOUNT_HASH =\\n    0xc5d2460186f7233c927e7db2dcc703c0e500b653ca82273b7bfad8045d85a470;\\n\\n  /**\\n   * Returns whether the target address is a contract\\n   * @dev This function will return false if invoked during the constructor of a contract.\\n   * @param _address address of the account to check\\n   * @return Whether the target address is a contract\\n   */\\n  function isContract(address _address) internal view returns (bool) {\\n    bytes32 codehash;\\n\\n    // Currently there is no better way to check if there is a contract in an address\\n    // than to check the size of the code at that address or if it has a non-zero code hash or account hash\\n    // solhint-disable-next-line no-inline-assembly\\n    assembly {\\n      codehash := extcodehash(_address)\\n    }\\n    return (codehash != 0x0 && codehash != ACCOUNT_HASH);\\n  }\\n\\n  /**\\n   * @dev Performs a Solidity function call using a low level `call`.\\n   *\\n   * If `target` reverts with a revert reason, it is bubbled up by this\\n   * function (like regular Solidity function calls).\\n   *\\n   * Returns the raw returned data. To convert to the expected return value,\\n   * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\\n   *\\n   * Requirements:\\n   *\\n   * - `target` must be a contract.\\n   * - calling `target` with `data` must not revert.\\n   */\\n  function functionCall(\\n    address target,\\n    bytes memory data,\\n    string memory errorMessage\\n  ) internal returns (bytes memory) {\\n    require(isContract(target), 'Address: No contract');\\n\\n    // solhint-disable-next-line avoid-low-level-calls\\n    (bool success, bytes memory returndata) = target.call(data);\\n    return _verifyCallResult(success, returndata, errorMessage);\\n  }\\n\\n  /**\\n   * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n   * but performing a delegate call.\\n   */\\n  function functionDelegateCall(\\n    address target,\\n    bytes memory data,\\n    string memory errorMessage\\n  ) internal returns (bytes memory) {\\n    require(isContract(target), 'Address: No contract');\\n\\n    // solhint-disable-next-line avoid-low-level-calls\\n    (bool success, bytes memory returndata) = target.delegatecall(data);\\n    return _verifyCallResult(success, returndata, errorMessage);\\n  }\\n\\n  function _verifyCallResult(\\n    bool success,\\n    bytes memory returndata,\\n    string memory errorMessage\\n  ) private pure returns (bytes memory) {\\n    if (success) {\\n      return returndata;\\n    } else {\\n      // Look for revert reason and bubble it up if present\\n      if (returndata.length > 0) {\\n        // The easiest way to bubble the revert reason is using memory via assembly\\n\\n        // solhint-disable-next-line no-inline-assembly\\n        assembly {\\n          let returndata_size := mload(returndata)\\n          revert(add(32, returndata), returndata_size)\\n        }\\n      } else {\\n        revert(errorMessage);\\n      }\\n    }\\n  }\\n}\\n\"\r\n    },\r\n    \"contracts/0xerc1155/utils/Context.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity 0.7.6;\\n\\n/*\\n * @dev Provides information about the current execution context, including the\\n * sender of the transaction and its data. While these are generally available\\n * via msg.sender and msg.data, they should not be accessed in such a direct\\n * manner, since when dealing with GSN meta-transactions the account sending and\\n * paying for execution may not be the actual sender (as far as an application\\n * is concerned).\\n *\\n * This contract is only required for intermediate, library-like contracts.\\n */\\nabstract contract Context {\\n  function _msgSender() internal view virtual returns (address payable) {\\n    return msg.sender;\\n  }\\n\\n  function _msgData() internal view virtual returns (bytes memory) {\\n    this; // silence state mutability warning without generating bytecode - see https://github.com/ethereum/solidity/issues/2691\\n    return msg.data;\\n  }\\n}\\n\"\r\n    },\r\n    \"contracts/0xerc1155/utils/EnumerableSet.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity 0.7.6;\\n\\n/**\\n * @dev Library for managing\\n * https://en.wikipedia.org/wiki/Set_(abstract_data_type)[sets] of primitive\\n * types.\\n *\\n * Sets have the following properties:\\n *\\n * - Elements are added, removed, and checked for existence in constant time\\n * (O(1)).\\n * - Elements are enumerated in O(n). No guarantees are made on the ordering.\\n *\\n * ```\\n * contract Example {\\n *     // Add the library methods\\n *     using EnumerableSet for EnumerableSet.AddressSet;\\n *\\n *     // Declare a set state variable\\n *     EnumerableSet.AddressSet private mySet;\\n * }\\n * ```\\n *\\n * As of v3.3.0, sets of type `bytes32` (`Bytes32Set`), `address` (`AddressSet`)\\n * and `uint256` (`UintSet`) are supported.\\n */\\nlibrary EnumerableSet {\\n  // To implement this library for multiple types with as little code\\n  // repetition as possible, we write it in terms of a generic Set type with\\n  // bytes32 values.\\n  // The Set implementation uses private functions, and user-facing\\n  // implementations (such as AddressSet) are just wrappers around the\\n  // underlying Set.\\n  // This means that we can only create new EnumerableSets for types that fit\\n  // in bytes32.\\n\\n  struct Set {\\n    // Storage of set values\\n    bytes32[] _values;\\n    // Position of the value in the `values` array, plus 1 because index 0\\n    // means a value is not in the set.\\n    mapping(bytes32 => uint256) _indexes;\\n  }\\n\\n  /**\\n   * @dev Add a value to a set. O(1).\\n   *\\n   * Returns true if the value was added to the set, that is if it was not\\n   * already present.\\n   */\\n  function _add(Set storage set, bytes32 value) private returns (bool) {\\n    if (!_contains(set, value)) {\\n      set._values.push(value);\\n      // The value is stored at length-1, but we add 1 to all indexes\\n      // and use 0 as a sentinel value\\n      set._indexes[value] = set._values.length;\\n      return true;\\n    } else {\\n      return false;\\n    }\\n  }\\n\\n  /**\\n   * @dev Removes a value from a set. O(1).\\n   *\\n   * Returns true if the value was removed from the set, that is if it was\\n   * present.\\n   */\\n  function _remove(Set storage set, bytes32 value) private returns (bool) {\\n    // We read and store the value's index to prevent multiple reads from the same storage slot\\n    uint256 valueIndex = set._indexes[value];\\n\\n    if (valueIndex != 0) {\\n      // Equivalent to contains(set, value)\\n      // To delete an element from the _values array in O(1), we swap the element to delete with the last one in\\n      // the array, and then remove the last element (sometimes called as 'swap and pop').\\n      // This modifies the order of the array, as noted in {at}.\\n\\n      uint256 toDeleteIndex = valueIndex - 1;\\n      uint256 lastIndex = set._values.length - 1;\\n\\n      // When the value to delete is the last one, the swap operation is unnecessary. However, since this occurs\\n      // so rarely, we still do the swap anyway to avoid the gas cost of adding an 'if' statement.\\n\\n      bytes32 lastvalue = set._values[lastIndex];\\n\\n      // Move the last value to the index where the value to delete is\\n      set._values[toDeleteIndex] = lastvalue;\\n      // Update the index for the moved value\\n      set._indexes[lastvalue] = toDeleteIndex + 1; // All indexes are 1-based\\n\\n      // Delete the slot where the moved value was stored\\n      set._values.pop();\\n\\n      // Delete the index for the deleted slot\\n      delete set._indexes[value];\\n\\n      return true;\\n    } else {\\n      return false;\\n    }\\n  }\\n\\n  /**\\n   * @dev Returns true if the value is in the set. O(1).\\n   */\\n  function _contains(Set storage set, bytes32 value)\\n    private\\n    view\\n    returns (bool)\\n  {\\n    return set._indexes[value] != 0;\\n  }\\n\\n  /**\\n   * @dev Returns the number of values on the set. O(1).\\n   */\\n  function _length(Set storage set) private view returns (uint256) {\\n    return set._values.length;\\n  }\\n\\n  /**\\n   * @dev Returns the value stored at position `index` in the set. O(1).\\n   *\\n   * Note that there are no guarantees on the ordering of values inside the\\n   * array, and it may change when more values are added or removed.\\n   *\\n   * Requirements:\\n   *\\n   * - `index` must be strictly less than {length}.\\n   */\\n  function _at(Set storage set, uint256 index) private view returns (bytes32) {\\n    require(set._values.length > index, 'EnumerableSet: index out of bounds');\\n    return set._values[index];\\n  }\\n\\n  // Bytes32Set\\n\\n  struct Bytes32Set {\\n    Set _inner;\\n  }\\n\\n  /**\\n   * @dev Add a value to a set. O(1).\\n   *\\n   * Returns true if the value was added to the set, that is if it was not\\n   * already present.\\n   */\\n  function add(Bytes32Set storage set, bytes32 value) internal returns (bool) {\\n    return _add(set._inner, value);\\n  }\\n\\n  /**\\n   * @dev Removes a value from a set. O(1).\\n   *\\n   * Returns true if the value was removed from the set, that is if it was\\n   * present.\\n   */\\n  function remove(Bytes32Set storage set, bytes32 value)\\n    internal\\n    returns (bool)\\n  {\\n    return _remove(set._inner, value);\\n  }\\n\\n  /**\\n   * @dev Returns true if the value is in the set. O(1).\\n   */\\n  function contains(Bytes32Set storage set, bytes32 value)\\n    internal\\n    view\\n    returns (bool)\\n  {\\n    return _contains(set._inner, value);\\n  }\\n\\n  /**\\n   * @dev Returns the number of values in the set. O(1).\\n   */\\n  function length(Bytes32Set storage set) internal view returns (uint256) {\\n    return _length(set._inner);\\n  }\\n\\n  /**\\n   * @dev Returns the value stored at position `index` in the set. O(1).\\n   *\\n   * Note that there are no guarantees on the ordering of values inside the\\n   * array, and it may change when more values are added or removed.\\n   *\\n   * Requirements:\\n   *\\n   * - `index` must be strictly less than {length}.\\n   */\\n  function at(Bytes32Set storage set, uint256 index)\\n    internal\\n    view\\n    returns (bytes32)\\n  {\\n    return _at(set._inner, index);\\n  }\\n\\n  // AddressSet\\n\\n  struct AddressSet {\\n    Set _inner;\\n  }\\n\\n  /**\\n   * @dev Add a value to a set. O(1).\\n   *\\n   * Returns true if the value was added to the set, that is if it was not\\n   * already present.\\n   */\\n  function add(AddressSet storage set, address value) internal returns (bool) {\\n    return _add(set._inner, bytes32(uint256(uint160(value))));\\n  }\\n\\n  /**\\n   * @dev Removes a value from a set. O(1).\\n   *\\n   * Returns true if the value was removed from the set, that is if it was\\n   * present.\\n   */\\n  function remove(AddressSet storage set, address value)\\n    internal\\n    returns (bool)\\n  {\\n    return _remove(set._inner, bytes32(uint256(uint160(value))));\\n  }\\n\\n  /**\\n   * @dev Returns true if the value is in the set. O(1).\\n   */\\n  function contains(AddressSet storage set, address value)\\n    internal\\n    view\\n    returns (bool)\\n  {\\n    return _contains(set._inner, bytes32(uint256(uint160(value))));\\n  }\\n\\n  /**\\n   * @dev Returns the number of values in the set. O(1).\\n   */\\n  function length(AddressSet storage set) internal view returns (uint256) {\\n    return _length(set._inner);\\n  }\\n\\n  /**\\n   * @dev Returns the value stored at position `index` in the set. O(1).\\n   *\\n   * Note that there are no guarantees on the ordering of values inside the\\n   * array, and it may change when more values are added or removed.\\n   *\\n   * Requirements:\\n   *\\n   * - `index` must be strictly less than {length}.\\n   */\\n  function at(AddressSet storage set, uint256 index)\\n    internal\\n    view\\n    returns (address)\\n  {\\n    return address(uint160(uint256(_at(set._inner, index))));\\n  }\\n\\n  // UintSet\\n\\n  struct UintSet {\\n    Set _inner;\\n  }\\n\\n  /**\\n   * @dev Add a value to a set. O(1).\\n   *\\n   * Returns true if the value was added to the set, that is if it was not\\n   * already present.\\n   */\\n  function add(UintSet storage set, uint256 value) internal returns (bool) {\\n    return _add(set._inner, bytes32(value));\\n  }\\n\\n  /**\\n   * @dev Removes a value from a set. O(1).\\n   *\\n   * Returns true if the value was removed from the set, that is if it was\\n   * present.\\n   */\\n  function remove(UintSet storage set, uint256 value) internal returns (bool) {\\n    return _remove(set._inner, bytes32(value));\\n  }\\n\\n  /**\\n   * @dev Returns true if the value is in the set. O(1).\\n   */\\n  function contains(UintSet storage set, uint256 value)\\n    internal\\n    view\\n    returns (bool)\\n  {\\n    return _contains(set._inner, bytes32(value));\\n  }\\n\\n  /**\\n   * @dev Returns the number of values on the set. O(1).\\n   */\\n  function length(UintSet storage set) internal view returns (uint256) {\\n    return _length(set._inner);\\n  }\\n\\n  /**\\n   * @dev Returns the value stored at position `index` in the set. O(1).\\n   *\\n   * Note that there are no guarantees on the ordering of values inside the\\n   * array, and it may change when more values are added or removed.\\n   *\\n   * Requirements:\\n   *\\n   * - `index` must be strictly less than {length}.\\n   */\\n  function at(UintSet storage set, uint256 index)\\n    internal\\n    view\\n    returns (uint256)\\n  {\\n    return uint256(_at(set._inner, index));\\n  }\\n}\\n\"\r\n    },\r\n    \"contracts/src/cfolio/interfaces/ICFolioItemHandler.sol\": {\r\n      \"content\": \"/*\\n * Copyright (C) 2021 The Wolfpack\\n * This file is part of wolves.finance - https://github.com/wolvesofwallstreet/wolves.finance\\n *\\n * SPDX-License-Identifier: Apache-2.0\\n * See LICENSE.txt for more information.\\n */\\n\\npragma solidity >=0.7.0 <0.8.0;\\n\\nimport '../../token/interfaces/ICFolioItemCallback.sol';\\n\\n/**\\n * @dev Interface to C-folio item contracts\\n */\\ninterface ICFolioItemHandler is ICFolioItemCallback {\\n  /**\\n   * @dev Called when a SFT tokens grade needs re-evaluation\\n   *\\n   * @param tokenId The ERC-1155 token ID. Rate is in 1E6 convention: 1E6 = 100%\\n   * @param newRate The new value rate\\n   */\\n  function sftUpgrade(uint256 tokenId, uint32 newRate) external;\\n\\n  //////////////////////////////////////////////////////////////////////////////\\n  // Asset access\\n  //////////////////////////////////////////////////////////////////////////////\\n\\n  /**\\n   * @dev Adds investments into a cFolioItem SFT\\n   *\\n   * Transfers amounts of assets from users wallet to the contract. In general,\\n   * an Approval call is required before the function is called.\\n   *\\n   * @param from must be msg.sender for calls not from sftMinter\\n   * @param baseTokenId cFolio tokenId, must be unlocked, or -1\\n   * @param tokenId cFolioItem tokenId, must be unlocked if not in unlocked cFolio\\n   * @param amounts Investment amounts, implementation specific\\n   */\\n  function deposit(\\n    address from,\\n    uint256 baseTokenId,\\n    uint256 tokenId,\\n    uint256[] calldata amounts\\n  ) external;\\n\\n  /**\\n   * @dev Removes investments from a cFolioItem SFT\\n   *\\n   * Withdrawn token are transfered back to msg.sender.\\n   *\\n   * @param baseTokenId cFolio tokenId, must be unlocked, or -1\\n   * @param tokenId cFolioItem tokenId, must be unlocked if not in unlocked cFolio\\n   * @param amounts Investment amounts, implementation specific\\n   */\\n  function withdraw(\\n    uint256 baseTokenId,\\n    uint256 tokenId,\\n    uint256[] calldata amounts\\n  ) external;\\n\\n  /**\\n   * @dev Update investment values from sidechain\\n   *\\n   * Must be called from a registered root tunnel\\n   *\\n   * @param tokenId cFolioItem tokenId\\n   * @param amounts Investment amounts, implementation specific\\n   */\\n  function update(uint256 tokenId, uint256[] calldata amounts) external;\\n\\n  /**\\n   * @dev Get the rewards collected by an SFT base card\\n   *\\n   * Calls only allowed from sftMinter.\\n   *\\n   * @param owner The owner of the NFT token\\n   * @param recipient Recipient of the rewards (- fees)\\n   * @param tokenId SFT base card tokenId, must be unlocked\\n   */\\n  function getRewards(\\n    address owner,\\n    address recipient,\\n    uint256 tokenId\\n  ) external;\\n\\n  /**\\n   * @dev Get amounts (handler specific) for a cfolioItem\\n   *\\n   * @param cfolioItem address of CFolioItem contract\\n   */\\n  function getAmounts(address cfolioItem)\\n    external\\n    view\\n    returns (uint256[] memory);\\n\\n  /**\\n   * @dev Get information obout the rewardFarm\\n   *\\n   * @param tokenIds List of basecard tokenIds\\n   * @return bytes of uint256[]: total, rewardDur, rewardRateForDur, [share, earned]\\n   */\\n  function getRewardInfo(uint256[] calldata tokenIds)\\n    external\\n    view\\n    returns (bytes memory);\\n}\\n\"\r\n    },\r\n    \"contracts/src/token/WOWSERC1155.sol\": {\r\n      \"content\": \"/*\\n * Copyright (C) 2020-2021 The Wolfpack\\n * This file is part of wolves.finance - https://github.com/wolvesofwallstreet/wolves.finance\\n *\\n * SPDX-License-Identifier: Apache-2.0\\n * See the file LICENSES/README.md for more information.\\n */\\n\\npragma solidity >=0.7.0 <0.8.0;\\n\\nimport '../../0xerc1155/access/AccessControl.sol';\\nimport '../../0xerc1155/interfaces/IERC1155TokenReceiver.sol';\\nimport '../../0xerc1155/utils/Address.sol';\\n\\nimport './interfaces/IWOWSCryptofolio.sol';\\nimport './interfaces/IWOWSERC1155.sol';\\nimport '../cfolio/interfaces/ICFolioItemHandler.sol';\\nimport '../utils/Clones.sol';\\nimport '../utils/TokenIds.sol';\\n\\ncontract WOWSERC1155 is IWOWSERC1155, AccessControl {\\n  using TokenIds for uint256;\\n  using Address for address;\\n\\n  //////////////////////////////////////////////////////////////////////////////\\n  // Constants\\n  //////////////////////////////////////////////////////////////////////////////\\n\\n  // Role to mint new tokens\\n  bytes32 public constant MINTER_ROLE = 'MINTER_ROLE';\\n\\n  // Role which is allowed to call chain related functions\\n  bytes32 public constant CHAIN_ROLE = 'CHAIN_ROLE';\\n\\n  // Token receiver return value\\n  bytes4 internal constant ERC1155_BATCH_RECEIVED_VALUE = 0xbc197c81;\\n\\n  //////////////////////////////////////////////////////////////////////////////\\n  // State\\n  //////////////////////////////////////////////////////////////////////////////\\n\\n  // Pause all transfer operations\\n  bool public pause;\\n\\n  // Card state of custom NFT's\\n  mapping(uint256 => uint8) private _customLevels;\\n\\n  struct ListKey {\\n    uint256 index;\\n  }\\n\\n  // Per-token data\\n  struct TokenInfo {\\n    address owner; // Make sure we only mint 1\\n    uint64 timestamp;\\n    ListKey listKey; // Next tokenId in the owner linkedList\\n  }\\n  mapping(uint256 => TokenInfo) private _tokenInfos;\\n\\n  struct ExternalNft {\\n    address collection;\\n    uint256 tokenId;\\n  }\\n  mapping(uint256 => ExternalNft) public externalNfts;\\n\\n  // Mapping tokenId -> generated address\\n  mapping(uint256 => address) private _tokenIdToAddress;\\n\\n  // Mapping generated address -> tokenId\\n  mapping(address => uint256) private _addressToTokenId;\\n\\n  // Mapping owner -> first owned token\\n  //\\n  // Note that we work 1-based here because of initialization\\n  // e.g. firstId == 1 links to tokenId 0\\n  struct Owned {\\n    uint256 count;\\n    ListKey listKey; // First tokenId in linked list\\n  }\\n  mapping(address => Owned) private _owned;\\n\\n  // cfolioType of cfolioItem\\n  mapping(uint256 => uint256) private _cfolioItemTypes;\\n\\n  // Our master cryptofolio used for clones\\n  address public cryptofolio;\\n\\n  //////////////////////////////////////////////////////////////////////////////\\n  // Modifier\\n  //////////////////////////////////////////////////////////////////////////////\\n\\n  modifier onlyAdmin() {\\n    require(hasRole(DEFAULT_ADMIN_ROLE, _msgSender()), 'SFT: Only admin');\\n    _;\\n  }\\n\\n  modifier onlyMinter() {\\n    require(hasRole(MINTER_ROLE, _msgSender()), 'SFT: Only minter');\\n    _;\\n  }\\n\\n  modifier onlyChain() {\\n    require(hasRole(CHAIN_ROLE, _msgSender()), 'SFT: Only chain operator');\\n    _;\\n  }\\n\\n  //////////////////////////////////////////////////////////////////////////////\\n  // Events\\n  //////////////////////////////////////////////////////////////////////////////\\n\\n  // Fired on each transfer operation\\n  event SftTokenTransfer(\\n    address indexed operator,\\n    address indexed from,\\n    address indexed to,\\n    uint256[] tokenIds\\n  );\\n\\n  // Fired if the type of a CFolioItem is set\\n  event UpdatedCFolioType(uint256 indexed tokenId, uint256 cfolioItemType);\\n\\n  // Fired if a Cryptofolio clone was set\\n  event CryptofolioSet(address cryptofolio);\\n\\n  // Fired if a SidechainTunnel was set\\n  event SidechainTunnelSet(address sidechainTunnel);\\n\\n  // Fired if we selfdestruct contract\\n  event Destruct();\\n\\n  //////////////////////////////////////////////////////////////////////////////\\n  // Initialization\\n  //////////////////////////////////////////////////////////////////////////////\\n\\n  /*\\n   * @dev URI is for WOWS predefined NFT's\\n   *\\n   * The other token URI's must be set separately.\\n   */\\n  constructor(address owner) {\\n    // Initialize {AccessControl}\\n    _setupRole(DEFAULT_ADMIN_ROLE, owner);\\n  }\\n\\n  function initialize(address owner) public {\\n    // Check for one time initialization\\n    require(\\n      getRoleMemberCount(DEFAULT_ADMIN_ROLE) == 0,\\n      'SFT: Already initialized'\\n    );\\n\\n    // Initialize {AccessControl}\\n    _setupRole(DEFAULT_ADMIN_ROLE, owner);\\n  }\\n\\n  //////////////////////////////////////////////////////////////////////////////\\n  // Implementation of {IWOWSERC1155}\\n  //////////////////////////////////////////////////////////////////////////////\\n\\n  /**\\n   * See {IWOWSERC1155-mintBatch}.\\n   */\\n  function mintBatch(\\n    address to,\\n    uint256[] calldata tokenIds,\\n    bytes calldata data\\n  ) external override onlyMinter {\\n    // Validate parameters\\n    require(to != address(0), 'SFT: Zero address');\\n\\n    _tokenTransfer(address(0), to, tokenIds, data);\\n  }\\n\\n  /**\\n   * See {IWOWSERC1155-burnBatch}.\\n   */\\n  function burnBatch(address account, uint256[] calldata tokenIds)\\n    external\\n    override\\n  {\\n    // Validate access\\n    require(account == _msgSender(), 'SFT: Caller not owner');\\n\\n    _tokenTransfer(account, address(0), tokenIds, '');\\n  }\\n\\n  /**\\n   * See {IWOWSERC1155-safeTransferFrom}.\\n   */\\n  function safeTransferFrom(\\n    address from,\\n    address to,\\n    uint256 tokenId,\\n    uint256 amount,\\n    bytes calldata data\\n  ) external override {\\n    require(from != address(0) && to != address(0), 'SFT: Null address');\\n    require(amount == 1, 'SFT: Wrong amount');\\n\\n    _tokenTransfer(from, to, _toArray(tokenId), data);\\n  }\\n\\n  /**\\n   * See {IWOWSERC1155-safeBatchTransferFrom}.\\n   */\\n  function safeBatchTransferFrom(\\n    address from,\\n    address to,\\n    uint256[] calldata tokenIds,\\n    uint256[] calldata amounts,\\n    bytes calldata data\\n  ) external override {\\n    require(from != address(0) && to != address(0), 'SFT: Null address');\\n    require(\\n      amounts.length == 0 || tokenIds.length == amounts.length,\\n      'SFT: Length mismatch'\\n    );\\n    if (amounts.length > 0) {\\n      for (uint256 i = 0; i < amounts.length; ++i)\\n        require(amounts[i] == 1, 'SFT: Wrong amount');\\n    }\\n\\n    _tokenTransfer(from, to, tokenIds, data);\\n  }\\n\\n  /**\\n   * @dev See {IWOWSERC1155-addressToTokenId}.\\n   */\\n  function addressToTokenId(address tokenAddress)\\n    public\\n    view\\n    override\\n    returns (uint256)\\n  {\\n    // Load state\\n    uint256 tokenId = _addressToTokenId[tokenAddress];\\n\\n    // Error case: token ID isn't known\\n    if (_tokenIdToAddress[tokenId] != tokenAddress) {\\n      return uint256(-1);\\n    }\\n\\n    // Success\\n    return tokenId;\\n  }\\n\\n  /**\\n   * @dev See {IWOWSERC1155-tokenIdToAddress}.\\n   */\\n  function tokenIdToAddress(uint256 tokenId)\\n    external\\n    view\\n    override\\n    returns (address)\\n  {\\n    // Load state\\n    return _tokenIdToAddress[tokenId];\\n  }\\n\\n  /**\\n   * @dev See {IWOWSERC1155-setCustomCardLevel}.\\n   */\\n  function setCustomCardLevel(uint256 tokenId, uint8 cardLevel)\\n    public\\n    override\\n    onlyMinter\\n  {\\n    // Validate parameter\\n    require(!tokenId.isCustomCard(), 'SFT: Only custom cards');\\n\\n    // Update state\\n    _customLevels[tokenId] = cardLevel;\\n  }\\n\\n  /**\\n   * @dev See {IWOWSERC1155-setCFolioType}.\\n   */\\n  function setCFolioItemType(uint256 tokenId, uint256 cfolioItemType)\\n    external\\n    override\\n    onlyMinter\\n  {\\n    require(tokenId.isCFolioCard(), 'SFT: Invalid tokenId');\\n\\n    _cfolioItemTypes[tokenId] = cfolioItemType;\\n\\n    // Dispatch event\\n    emit UpdatedCFolioType(tokenId, cfolioItemType);\\n  }\\n\\n  /**\\n   * @dev See {IWOWSERC1155-setExternalNft}.\\n   */\\n  function setExternalNft(\\n    uint256 tokenId,\\n    address externalCollection,\\n    uint256 externalTokenId\\n  ) external override onlyMinter {\\n    ExternalNft storage nft = externalNfts[tokenId];\\n\\n    nft.collection = externalCollection;\\n    nft.tokenId = externalTokenId;\\n  }\\n\\n  /**\\n   * @dev See {IWOWSERC1155-deleteExternalNft}.\\n   */\\n  function deleteExternalNft(uint256 tokenId) external override onlyMinter {\\n    delete (externalNfts[tokenId]);\\n  }\\n\\n  //////////////////////////////////////////////////////////////////////////////\\n  // Getters\\n  //////////////////////////////////////////////////////////////////////////////\\n\\n  /**\\n   * @dev See {IWOWSERC1155-getTokenData}.\\n   */\\n  function getTokenData(uint256 tokenId)\\n    external\\n    view\\n    override\\n    returns (uint64 mintTimestamp, uint8 level)\\n  {\\n    // Decode token ID\\n    uint8 _level = _getLevel(tokenId);\\n\\n    // Load state\\n    return (_tokenInfos[tokenId].timestamp, _level);\\n  }\\n\\n  /**\\n   * @dev See {IWOWSERC1155-getTokenIds}.\\n   */\\n  function getTokenIds(address account)\\n    public\\n    view\\n    override\\n    returns (uint256[] memory)\\n  {\\n    // Load state\\n    Owned storage list = _owned[account];\\n\\n    // Return value\\n    uint256[] memory result = new uint256[](list.count);\\n\\n    // Search state\\n    ListKey storage key = list.listKey;\\n    for (uint256 i = 0; i < list.count; ++i) {\\n      result[i] = key.index;\\n      key = _tokenInfos[key.index].listKey;\\n    }\\n\\n    return result;\\n  }\\n\\n  /**\\n   * @dev See {IWOWSERC1155-getCFolioItemType}.\\n   */\\n  function getCFolioItemType(uint256 tokenId)\\n    external\\n    view\\n    override\\n    returns (uint256)\\n  {\\n    // Validate parameters\\n    require(tokenId.isCFolioCard(), 'SFT: Invalid tokenId');\\n\\n    // Load state\\n    return _cfolioItemTypes[tokenId.toSftTokenId()];\\n  }\\n\\n  /**\\n   * @dev See {IWOWSERC1155-balanceOf}.\\n   */\\n  function balanceOf(address owner, uint256 tokenId)\\n    external\\n    view\\n    override\\n    returns (uint256)\\n  {\\n    return _tokenInfos[tokenId].owner == owner ? 1 : 0;\\n  }\\n\\n  /**\\n   * @dev See {IWOWSERC1155-balanceOfBatch}.\\n   */\\n  function balanceOfBatch(\\n    address[] calldata owners,\\n    uint256[] calldata tokenIds\\n  ) external view override returns (uint256[] memory) {\\n    require(owners.length == tokenIds.length, 'SFT: Length mismatch');\\n    uint256[] memory result = new uint256[](owners.length);\\n\\n    for (uint256 i = 0; i < owners.length; ++i)\\n      result[i] = _tokenInfos[tokenIds[i]].owner == owners[i] ? 1 : 0;\\n\\n    return result;\\n  }\\n\\n  //////////////////////////////////////////////////////////////////////////////\\n  // Maintanance\\n  //////////////////////////////////////////////////////////////////////////////\\n\\n  // Pause all transfer operations\\n  function setPause(bool _pause) external onlyAdmin {\\n    pause = _pause;\\n  }\\n\\n  // Set Cryptofolio clone\\n  function setCryptofolio(address newCryptofolio) external onlyAdmin {\\n    cryptofolio = newCryptofolio;\\n    emit CryptofolioSet(cryptofolio);\\n  }\\n\\n  /**\\n   * @dev destruct old implementation\\n   */\\n  function destructContract() external onlyAdmin {\\n    emit Destruct();\\n\\n    // Disable high-impact Slither detector \\\"suicidal\\\" here. Slither explains\\n    // that \\\"WOWSSftMinter.destructContract() allows anyone to destruct the\\n    // contract\\\", which is not the case due to the {Ownable-onlyOwner} modifier.\\n    //\\n    // slither-disable-next-line suicidal\\n    selfdestruct(_msgSender());\\n  }\\n\\n  //////////////////////////////////////////////////////////////////////////////\\n  // Internal functionality\\n  //////////////////////////////////////////////////////////////////////////////\\n\\n  /**\\n   * @dev Handles transfer of an SFT token\\n   */\\n  function _tokenTransfer(\\n    address from,\\n    address to,\\n    uint256[] memory tokenIds,\\n    bytes memory data\\n  ) private {\\n    require(!pause, 'SFT: Paused!');\\n\\n    uint256 numUniqueCFolioHandlers = 0;\\n    address[] memory uniqueCFolioHandlers = new address[](tokenIds.length);\\n    address[] memory cFolioHandlers = new address[](tokenIds.length);\\n    uint256 toTokenId = to == address(0) ? uint256(-1) : addressToTokenId(to);\\n\\n    for (uint256 i = 0; i < tokenIds.length; ++i) {\\n      uint256 tokenId = tokenIds[i];\\n\\n      // Load state\\n      address tokenAddress = _tokenIdToAddress[tokenId];\\n      TokenInfo storage tokenInfo = _tokenInfos[tokenId];\\n\\n      // Minting\\n      if (from == address(0)) {\\n        // Validate state\\n        require(tokenInfo.owner == address(0), 'SFT: Already minted');\\n\\n        // solhint-disable-next-line not-rely-on-time\\n        tokenInfo.timestamp = uint64(block.timestamp);\\n\\n        // Create a new WOWSCryptofolio by cloning masterTokenReceiver\\n        // The clone itself is a minimal delegate proxy.\\n        if (tokenAddress == address(0)) {\\n          tokenAddress = Clones.clone(cryptofolio);\\n          _tokenIdToAddress[tokenId] = tokenAddress;\\n          if (tokenId.isCFolioCard()) {\\n            require(data.length == 20, 'SFT: Invalid data');\\n            address handler = _getAddress(data);\\n            require(handler != address(0), 'SFT: Invalid address');\\n            IWOWSCryptofolio(tokenAddress).setHandler(handler);\\n          } else if (data.length > i * 32) {\\n            //Migration / Bridge. First uint is recipient\\n            tokenInfo.timestamp = uint64(_getUint256(data, i));\\n          }\\n        }\\n        _addressToTokenId[tokenAddress] = tokenId;\\n      }\\n      // Burning\\n      else {\\n        if (to == address(0)) {\\n          // Make sure underlying assets gets burned\\n          if (tokenId.isBaseCard()) {\\n            uint256[] memory cfolioItems = getTokenIds(tokenAddress);\\n            if (cfolioItems.length > 0) {\\n              _tokenTransfer(tokenAddress, to, cfolioItems, data);\\n            }\\n          }\\n        }\\n        // Allow transfer only if from is either owner or owner of cfolio.\\n        require(\\n          tokenInfo.owner == from || _cfolioOwner(tokenInfo.owner) == from,\\n          'SFT: Access denied'\\n        );\\n      }\\n      // Update state\\n      tokenInfo.owner = to;\\n\\n      if (!tokenId.isBaseCard()) {\\n        address handler = IWOWSCryptofolio(tokenAddress).handler();\\n        uint256 iter = numUniqueCFolioHandlers;\\n        while (iter > 0 && uniqueCFolioHandlers[iter - 1] != handler) --iter;\\n        if (iter == 0) {\\n          require(handler != address(0), 'SFT: Invalid handler');\\n          uniqueCFolioHandlers[numUniqueCFolioHandlers++] = handler;\\n        }\\n        cFolioHandlers[i] = handler;\\n      } else {\\n        // Avoid cfolio as child of cfolio\\n        require(toTokenId == uint256(-1), 'SFT: Invalid to');\\n      }\\n\\n      // Remove tokenId from List\\n      if (from != address(0)) {\\n        // Load state\\n        Owned storage fromList = _owned[from];\\n\\n        // Validate state\\n        require(fromList.count > 0, 'SFT: Count mismatch');\\n\\n        ListKey storage key = fromList.listKey;\\n        uint256 count = fromList.count;\\n\\n        // Search the token which links to tokenId\\n        for (; count > 0 && key.index != tokenId; --count)\\n          key = _tokenInfos[key.index].listKey;\\n        require(key.index == tokenId, 'SFT: Key mismatch');\\n\\n        // Unlink prev -> tokenId\\n        key.index = tokenInfo.listKey.index;\\n        // Unlink tokenId -> next\\n        tokenInfo.listKey.index = 0;\\n        // Decrement count\\n        fromList.count--;\\n      }\\n\\n      // Update state\\n      if (to != address(0)) {\\n        Owned storage toList = _owned[to];\\n        tokenInfo.listKey.index = toList.listKey.index;\\n        toList.listKey.index = tokenId;\\n        toList.count++;\\n      }\\n    }\\n\\n    // Notify to that NFT's has arrived\\n    if (to.isContract()) {\\n      uint256[] memory amounts = new uint256[](tokenIds.length);\\n      for (uint256 i = 0; i < tokenIds.length; ++i) amounts[i] = 1;\\n      bytes4 retval = IERC1155TokenReceiver(to).onERC1155BatchReceived(\\n        msg.sender,\\n        from,\\n        tokenIds,\\n        amounts,\\n        data\\n      );\\n      require(retval == ERC1155_BATCH_RECEIVED_VALUE, 'SFTE: Unsupported');\\n    }\\n\\n    for (uint256 i = 0; i < numUniqueCFolioHandlers; ++i) {\\n      ICFolioItemHandler(uniqueCFolioHandlers[i]).onCFolioItemsTransferedFrom(\\n        from,\\n        to,\\n        tokenIds,\\n        cFolioHandlers\\n      );\\n    }\\n    emit SftTokenTransfer(_msgSender(), from, to, tokenIds);\\n  }\\n\\n  /**\\n   * @dev Get the level of a given token\\n   *\\n   * @param tokenId The ID of the token\\n   *\\n   * @return level The level of the token\\n   */\\n  function _getLevel(uint256 tokenId) private view returns (uint8 level) {\\n    if (tokenId.isCustomCard()) {\\n      level = _customLevels[tokenId];\\n    } else {\\n      level = uint8(tokenId >> 24);\\n    }\\n  }\\n\\n  /**\\n   * @dev Get the address from the user data parameter\\n   *\\n   * @param data Per ERC-1155, the data parameter is additional data with no\\n   * specified format, and is sent unaltered in the call to\\n   * {IERC1155Receiver-onERC1155Received} on the receiver of the minted token.\\n   */\\n  function _getAddress(bytes memory data) public pure returns (address addr) {\\n    // solhint-disable-next-line no-inline-assembly\\n    assembly {\\n      addr := mload(add(data, 20))\\n    }\\n  }\\n\\n  /**\\n   * @dev Get the uint256 from the user data parameter\\n   */\\n  function _getUint256(bytes memory data, uint256 index)\\n    private\\n    pure\\n    returns (uint256 val)\\n  {\\n    // solhint-disable-next-line no-inline-assembly\\n    assembly {\\n      val := mload(add(data, mul(0x20, add(index, 1))))\\n    }\\n  }\\n\\n  /**\\n   * @dev Convert uint to uint[](1)\\n   */\\n  function _toArray(uint256 value)\\n    private\\n    pure\\n    returns (uint256[] memory result)\\n  {\\n    result = new uint256[](1);\\n    result[0] = value;\\n  }\\n\\n  /**\\n   * @dev Return owner of cfolio\\n   */\\n  function _cfolioOwner(address cfolio) private view returns (address) {\\n    uint256 tokenId = addressToTokenId(cfolio);\\n    if (tokenId == uint256(-1)) return address(0);\\n    return _tokenInfos[tokenId].owner;\\n  }\\n}\\n\"\r\n    },\r\n    \"contracts/src/token/interfaces/ICFolioItemCallback.sol\": {\r\n      \"content\": \"/*\\n * Copyright (C) 2021 The Wolfpack\\n * This file is part of wolves.finance - https://github.com/wolvesofwallstreet/wolves.finance\\n *\\n * SPDX-License-Identifier: Apache-2.0\\n * See LICENSE.txt for more information.\\n */\\n\\npragma solidity >=0.7.0 <0.8.0;\\n\\n/**\\n * @dev Interface to receive callbacks when minted tokens are burnt\\n */\\ninterface ICFolioItemCallback {\\n  /**\\n   * @dev Called when a TradeFloor CFolioItem is transfered\\n   *\\n   * In case of mint `from` is address(0).\\n   * In case of burn `to` is address(0).\\n   *\\n   * cfolioHandlers are passed to let each cfolioHandler filter for its own\\n   * token. This eliminates the need for creating separate lists.\\n   *\\n   * @param from The account sending the token\\n   * @param to The account receiving the token\\n   * @param tokenIds The ERC-1155 token IDs\\n   * @param cfolioHandlers cFolioItem handlers\\n   */\\n  function onCFolioItemsTransferedFrom(\\n    address from,\\n    address to,\\n    uint256[] calldata tokenIds,\\n    address[] calldata cfolioHandlers\\n  ) external;\\n\\n  /**\\n   * @dev Append data we use later for hashing\\n   *\\n   * @param cfolioItem The token ID of the c-folio item\\n   * @param current The current data being hashes\\n   *\\n   * @return The current data, with internal data appended\\n   */\\n  function appendHash(address cfolioItem, bytes calldata current)\\n    external\\n    view\\n    returns (bytes memory);\\n}\\n\"\r\n    },\r\n    \"contracts/src/token/interfaces/IWOWSCryptofolio.sol\": {\r\n      \"content\": \"/*\\n * Copyright (C) 2021 The Wolfpack\\n * This file is part of wolves.finance - https://github.com/wolvesofwallstreet/wolves.finance\\n *\\n * SPDX-License-Identifier: Apache-2.0\\n * See the file LICENSES/README.md for more information.\\n */\\n\\npragma solidity >=0.7.0 <0.8.0;\\n\\n/**\\n * @notice Cryptofolio interface\\n */\\ninterface IWOWSCryptofolio {\\n  //////////////////////////////////////////////////////////////////////////////\\n  // Getter\\n  //////////////////////////////////////////////////////////////////////////////\\n  /**\\n   * @dev Return the handler (CFIH) of the underlying NFT\\n   */\\n  function handler() external view returns (address);\\n\\n  //////////////////////////////////////////////////////////////////////////////\\n  // State modifiers\\n  //////////////////////////////////////////////////////////////////////////////\\n  /**\\n   * @dev Set the handler of the underlying NFT\\n   *\\n   * This function is called during I-NFT setup\\n   *\\n   * @param newHandler The new handler of the underlying NFT,\\n   */\\n  function setHandler(address newHandler) external;\\n}\\n\"\r\n    },\r\n    \"contracts/src/token/interfaces/IWOWSERC1155.sol\": {\r\n      \"content\": \"/*\\n * Copyright (C) 2021 The Wolfpack\\n * This file is part of wolves.finance - https://github.com/wolvesofwallstreet/wolves.finance\\n *\\n * SPDX-License-Identifier: Apache-2.0\\n * See the file LICENSES/README.md for more information.\\n */\\n\\npragma solidity >=0.7.0 <0.8.0;\\n\\n/**\\n * @notice Sft holder contract\\n */\\ninterface IWOWSERC1155 {\\n  //////////////////////////////////////////////////////////////////////////////\\n  // Getters\\n  //////////////////////////////////////////////////////////////////////////////\\n\\n  /**\\n   * @dev Get the token ID of a given address\\n   *\\n   * A cross check is required because token ID 0 is valid.\\n   *\\n   * @param tokenAddress The address to convert to a token ID\\n   *\\n   * @return The token ID on success, or uint256(-1) if `tokenAddress` does not\\n   * belong to a token ID\\n   */\\n  function addressToTokenId(address tokenAddress)\\n    external\\n    view\\n    returns (uint256);\\n\\n  /**\\n   * @dev Get the address for a given token ID\\n   *\\n   * @param tokenId The token ID to convert\\n   *\\n   * @return The address, or address(0) in case the token ID does not belong\\n   * to an NFT\\n   */\\n  function tokenIdToAddress(uint256 tokenId) external view returns (address);\\n\\n  /**\\n   * @dev Return the level and the mint timestamp of tokenId\\n   *\\n   * @param tokenId The tokenId to query\\n   *\\n   * @return mintTimestamp The timestamp token was minted\\n   * @return level The level token belongs to\\n   */\\n  function getTokenData(uint256 tokenId)\\n    external\\n    view\\n    returns (uint64 mintTimestamp, uint8 level);\\n\\n  /**\\n   * @dev Return all tokenIds owned by account\\n   */\\n  function getTokenIds(address account)\\n    external\\n    view\\n    returns (uint256[] memory);\\n\\n  /**\\n   * @dev Returns the cFolioItemType of a given cFolioItem tokenId\\n   */\\n  function getCFolioItemType(uint256 tokenId) external view returns (uint256);\\n\\n  /**\\n   * @notice Get the balance of an account's Tokens\\n   * @param owner  The address of the token holder\\n   * @param tokenId ID of the Token\\n   * @return The _owner's balance of the token type requested\\n   */\\n  function balanceOf(address owner, uint256 tokenId)\\n    external\\n    view\\n    returns (uint256);\\n\\n  /**\\n   * @notice Get the balance of multiple account/token pairs\\n   * @param owners The addresses of the token holders\\n   * @param tokenIds ID of the Tokens\\n   * @return       The _owner's balance of the Token types requested (i.e. balance for each (owner, id) pair)\\n   */\\n  function balanceOfBatch(\\n    address[] calldata owners,\\n    uint256[] calldata tokenIds\\n  ) external view returns (uint256[] memory);\\n\\n  //////////////////////////////////////////////////////////////////////////////\\n  // State modifiers\\n  //////////////////////////////////////////////////////////////////////////////\\n\\n  /**\\n   * @notice Mints tokenIds into 'to' account\\n   * @dev Emits SftTokenTransfer Event\\n   *\\n   * Throws if sender has no MINTER_ROLE\\n   * 'data' holds the CFolioItemHandler if CFI's are minted\\n   */\\n  function mintBatch(\\n    address to,\\n    uint256[] calldata tokenIds,\\n    bytes calldata data\\n  ) external;\\n\\n  /**\\n   * @notice Burns tokenIds owned by 'account'\\n   * @dev Emits SftTokenTransfer Event\\n   *\\n   * Burns all owned CFolioItems\\n   * Throws if CFolioItems have assets\\n   */\\n  function burnBatch(address account, uint256[] calldata tokenIds) external;\\n\\n  /**\\n   * @notice Transfers amount of an id from the from address to the 'to' address specified\\n   * @dev Emits SftTokenTransfer Event\\n   * Throws if 'to' is the zero address\\n   * Throws if 'from' is not the current owner\\n   * If 'to' is a smart contract, ERC1155TokenReceiver interface will checked\\n   * @param from    Source address\\n   * @param to      Target address\\n   * @param tokenId ID of the token type\\n   * @param amount  Transfered amount\\n   * @param data    Additional data with no specified format, sent in call to `_to`\\n   */\\n  function safeTransferFrom(\\n    address from,\\n    address to,\\n    uint256 tokenId,\\n    uint256 amount,\\n    bytes calldata data\\n  ) external;\\n\\n  /**\\n   * @dev Batch version of {safeTransferFrom}\\n   */\\n  function safeBatchTransferFrom(\\n    address from,\\n    address to,\\n    uint256[] calldata tokenIds,\\n    uint256[] calldata amounts,\\n    bytes calldata data\\n  ) external;\\n\\n  /**\\n   * @dev Each custom card has its own level. Level will be used when\\n   * calculating rewards and raiding power.\\n   *\\n   * @param tokenId The ID of the token whose level is being set\\n   * @param cardLevel The new level of the specified token\\n   */\\n  function setCustomCardLevel(uint256 tokenId, uint8 cardLevel) external;\\n\\n  /**\\n   * @dev Sets the cfolioItemType of a cfolioItem tokenId, not yet used\\n   * sftHolder tokenId expected (without hash)\\n   */\\n  function setCFolioItemType(uint256 tokenId, uint256 cfolioItemType_) external;\\n\\n  /**\\n   * @dev Sets external NFT for display tokenId\\n   * By default NFT is rendered using our internal metadata\\n   *\\n   * Throws if not called from MINTER role\\n   */\\n  function setExternalNft(\\n    uint256 tokenId,\\n    address externalCollection,\\n    uint256 externalTokenId\\n  ) external;\\n\\n  /**\\n   * @dev Deletes external NFT settings\\n   *\\n   * Throws if not called from MINTER role\\n   */\\n  function deleteExternalNft(uint256 tokenId) external;\\n}\\n\"\r\n    },\r\n    \"contracts/src/utils/Clones.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity >=0.6.0 <0.8.0;\\n\\n/**\\n * @dev https://eips.ethereum.org/EIPS/eip-1167[EIP 1167] is a standard for\\n * deploying minimal proxy contracts, also known as \\\"clones\\\".\\n *\\n * > To simply and cheaply clone contract functionality in an immutable way, this standard specifies\\n * > a minimal bytecode implementation that delegates all calls to a known, fixed address.\\n *\\n * The library includes functions to deploy a proxy using either `create` (traditional deployment) or `create2`\\n * (salted deterministic deployment). It also includes functions to predict the addresses of clones deployed using the\\n * deterministic method.\\n */\\nlibrary Clones {\\n  /**\\n   * @dev Deploys and returns the address of a clone that mimics the behaviour of `master`.\\n   *\\n   * This function uses the create opcode, which should never revert.\\n   */\\n  function clone(address master) internal returns (address instance) {\\n    // solhint-disable-next-line no-inline-assembly\\n    assembly {\\n      let ptr := mload(0x40)\\n      mstore(\\n        ptr,\\n        0x3d602d80600a3d3981f3363d3d373d3d3d363d73000000000000000000000000\\n      )\\n      mstore(add(ptr, 0x14), shl(0x60, master))\\n      mstore(\\n        add(ptr, 0x28),\\n        0x5af43d82803e903d91602b57fd5bf30000000000000000000000000000000000\\n      )\\n      instance := create(0, ptr, 0x37)\\n    }\\n    require(instance != address(0), 'ERC1167: create failed');\\n  }\\n\\n  /**\\n   * @dev Deploys and returns the address of a clone that mimics the behaviour of `master`.\\n   *\\n   * This function uses the create2 opcode and a `salt` to deterministically deploy\\n   * the clone. Using the same `master` and `salt` multiple time will revert, since\\n   * the clones cannot be deployed twice at the same address.\\n   */\\n  function cloneDeterministic(address master, bytes32 salt)\\n    internal\\n    returns (address instance)\\n  {\\n    // solhint-disable-next-line no-inline-assembly\\n    assembly {\\n      let ptr := mload(0x40)\\n      mstore(\\n        ptr,\\n        0x3d602d80600a3d3981f3363d3d373d3d3d363d73000000000000000000000000\\n      )\\n      mstore(add(ptr, 0x14), shl(0x60, master))\\n      mstore(\\n        add(ptr, 0x28),\\n        0x5af43d82803e903d91602b57fd5bf30000000000000000000000000000000000\\n      )\\n      instance := create2(0, ptr, 0x37, salt)\\n    }\\n    require(instance != address(0), 'ERC1167: create2 failed');\\n  }\\n\\n  /**\\n   * @dev Computes the address of a clone deployed using {Clones-cloneDeterministic}.\\n   */\\n  function predictDeterministicAddress(\\n    address master,\\n    bytes32 salt,\\n    address deployer\\n  ) internal pure returns (address predicted) {\\n    // solhint-disable-next-line no-inline-assembly\\n    assembly {\\n      let ptr := mload(0x40)\\n      mstore(\\n        ptr,\\n        0x3d602d80600a3d3981f3363d3d373d3d3d363d73000000000000000000000000\\n      )\\n      mstore(add(ptr, 0x14), shl(0x60, master))\\n      mstore(\\n        add(ptr, 0x28),\\n        0x5af43d82803e903d91602b57fd5bf3ff00000000000000000000000000000000\\n      )\\n      mstore(add(ptr, 0x38), shl(0x60, deployer))\\n      mstore(add(ptr, 0x4c), salt)\\n      mstore(add(ptr, 0x6c), keccak256(ptr, 0x37))\\n      predicted := keccak256(add(ptr, 0x37), 0x55)\\n    }\\n  }\\n\\n  /**\\n   * @dev Computes the address of a clone deployed using {Clones-cloneDeterministic}.\\n   */\\n  function predictDeterministicAddress(address master, bytes32 salt)\\n    internal\\n    view\\n    returns (address predicted)\\n  {\\n    return predictDeterministicAddress(master, salt, address(this));\\n  }\\n}\\n\"\r\n    },\r\n    \"contracts/src/utils/TokenIds.sol\": {\r\n      \"content\": \"/*\\n * Copyright (C) 2021 The Wolfpack\\n * This file is part of wolves.finance - https://github.com/wolvesofwallstreet/wolves.finance\\n *\\n * SPDX-License-Identifier: Apache-2.0\\n * See LICENSE.txt for more information.\\n */\\n\\npragma solidity >=0.7.0 <0.8.0;\\n\\nlibrary TokenIds {\\n  // 128 bit underlying hash\\n  uint256 public constant HASH_MASK = (1 << 128) - 1;\\n\\n  function isBaseCard(uint256 tokenId) internal pure returns (bool) {\\n    return (tokenId & HASH_MASK) < (1 << 64);\\n  }\\n\\n  function isStockCard(uint256 tokenId) internal pure returns (bool) {\\n    return (tokenId & HASH_MASK) < (1 << 32);\\n  }\\n\\n  function isCustomCard(uint256 tokenId) internal pure returns (bool) {\\n    return\\n      (tokenId & HASH_MASK) >= (1 << 32) && (tokenId & HASH_MASK) < (1 << 64);\\n  }\\n\\n  function isCFolioCard(uint256 tokenId) internal pure returns (bool) {\\n    return\\n      (tokenId & HASH_MASK) >= (1 << 64) && (tokenId & HASH_MASK) < (1 << 128);\\n  }\\n\\n  function toSftTokenId(uint256 tokenId) internal pure returns (uint256) {\\n    return tokenId & HASH_MASK;\\n  }\\n\\n  function maskHash(uint256 tokenId) internal pure returns (uint256) {\\n    return tokenId & ~HASH_MASK;\\n  }\\n}\\n\"\r\n    }\r\n  }\r\n}}","ABI":"[{\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"cryptofolio\",\"type\":\"address\"}],\"name\":\"CryptofolioSet\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[],\"name\":\"Destruct\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"previousAdminRole\",\"type\":\"bytes32\"},{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"newAdminRole\",\"type\":\"bytes32\"}],\"name\":\"RoleAdminChanged\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"}],\"name\":\"RoleGranted\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"}],\"name\":\"RoleRevoked\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"operator\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256[]\",\"name\":\"tokenIds\",\"type\":\"uint256[]\"}],\"name\":\"SftTokenTransfer\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"sidechainTunnel\",\"type\":\"address\"}],\"name\":\"SidechainTunnelSet\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"cfolioItemType\",\"type\":\"uint256\"}],\"name\":\"UpdatedCFolioType\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"CHAIN_ROLE\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"DEFAULT_ADMIN_ROLE\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"MINTER_ROLE\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes\",\"name\":\"data\",\"type\":\"bytes\"}],\"name\":\"_getAddress\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"addr\",\"type\":\"address\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"tokenAddress\",\"type\":\"address\"}],\"name\":\"addressToTokenId\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"balanceOf\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address[]\",\"name\":\"owners\",\"type\":\"address[]\"},{\"internalType\":\"uint256[]\",\"name\":\"tokenIds\",\"type\":\"uint256[]\"}],\"name\":\"balanceOfBatch\",\"outputs\":[{\"internalType\":\"uint256[]\",\"name\":\"\",\"type\":\"uint256[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"internalType\":\"uint256[]\",\"name\":\"tokenIds\",\"type\":\"uint256[]\"}],\"name\":\"burnBatch\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"cryptofolio\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"deleteExternalNft\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"destructContract\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"externalNfts\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"collection\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"getCFolioItemType\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"}],\"name\":\"getRoleAdmin\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"internalType\":\"uint256\",\"name\":\"index\",\"type\":\"uint256\"}],\"name\":\"getRoleMember\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"}],\"name\":\"getRoleMemberCount\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"getTokenData\",\"outputs\":[{\"internalType\":\"uint64\",\"name\":\"mintTimestamp\",\"type\":\"uint64\"},{\"internalType\":\"uint8\",\"name\":\"level\",\"type\":\"uint8\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"getTokenIds\",\"outputs\":[{\"internalType\":\"uint256[]\",\"name\":\"\",\"type\":\"uint256[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"grantRole\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"hasRole\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"}],\"name\":\"initialize\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256[]\",\"name\":\"tokenIds\",\"type\":\"uint256[]\"},{\"internalType\":\"bytes\",\"name\":\"data\",\"type\":\"bytes\"}],\"name\":\"mintBatch\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"pause\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"renounceRole\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"revokeRole\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256[]\",\"name\":\"tokenIds\",\"type\":\"uint256[]\"},{\"internalType\":\"uint256[]\",\"name\":\"amounts\",\"type\":\"uint256[]\"},{\"internalType\":\"bytes\",\"name\":\"data\",\"type\":\"bytes\"}],\"name\":\"safeBatchTransferFrom\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"internalType\":\"bytes\",\"name\":\"data\",\"type\":\"bytes\"}],\"name\":\"safeTransferFrom\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"cfolioItemType\",\"type\":\"uint256\"}],\"name\":\"setCFolioItemType\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newCryptofolio\",\"type\":\"address\"}],\"name\":\"setCryptofolio\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"},{\"internalType\":\"uint8\",\"name\":\"cardLevel\",\"type\":\"uint8\"}],\"name\":\"setCustomCardLevel\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"externalCollection\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"externalTokenId\",\"type\":\"uint256\"}],\"name\":\"setExternalNft\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bool\",\"name\":\"_pause\",\"type\":\"bool\"}],\"name\":\"setPause\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"tokenIdToAddress\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"}]","ContractName":"WOWSERC1155","CompilerVersion":"v0.7.6+commit.7338295f","OptimizationUsed":"1","Runs":"1000","ConstructorArguments":"000000000000000000000000bb5a7c17ade983f03afd8b09922b1c117b9eabc0","EVMVersion":"Default","Library":"","LicenseType":"Apache-2.0","Proxy":"0","Implementation":"","SwarmSource":""}]}