{"status":"1","message":"OK","result":[{"SourceCode":"// File: contracts/utils/Ownable.sol\r\n\r\npragma solidity >=0.4.21 <0.6.0;\r\n\r\ncontract Ownable {\r\n    address private _contract_owner;\r\n\r\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\r\n\r\n    /**\r\n     * @dev Initializes the contract setting the deployer as the initial owner.\r\n     */\r\n    constructor () internal {\r\n        address msgSender = msg.sender;\r\n        _contract_owner = msgSender;\r\n        emit OwnershipTransferred(address(0), msgSender);\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the address of the current owner.\r\n     */\r\n    function owner() public view returns (address) {\r\n        return _contract_owner;\r\n    }\r\n\r\n    /**\r\n     * @dev Throws if called by any account other than the owner.\r\n     */\r\n    modifier onlyOwner() {\r\n        require(_contract_owner == msg.sender, \"Ownable: caller is not the owner\");\r\n        _;\r\n    }\r\n\r\n    /**\r\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\r\n     * Can only be called by the current owner.\r\n     */\r\n    function transferOwnership(address newOwner) public onlyOwner {\r\n        _transferOwnership(newOwner);\r\n    }\r\n\r\n    /**\r\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\r\n     */\r\n    function _transferOwnership(address newOwner) internal {\r\n        require(newOwner != address(0), \"Ownable: new owner is the zero address\");\r\n        emit OwnershipTransferred(_contract_owner, newOwner);\r\n        _contract_owner = newOwner;\r\n    }\r\n}\r\n\r\n// File: contracts/utils/SafeMath.sol\r\n\r\npragma solidity >=0.4.21 <0.6.0;\r\n\r\nlibrary SafeMath {\r\n    function safeAdd(uint a, uint b) public pure returns (uint c) {\r\n        c = a + b;\r\n        require(c >= a, \"add\");\r\n    }\r\n    function safeSubR(uint a, uint b, string memory s) public pure returns (uint c) {\r\n        require(b <= a, s);\r\n        c = a - b;\r\n    }\r\n    function safeSub(uint a, uint b) public pure returns (uint c) {\r\n        require(b <= a, \"sub\");\r\n        c = a - b;\r\n    }\r\n    function safeMul(uint a, uint b) public pure returns (uint c) {\r\n        c = a * b;\r\n        require(a == 0 || c / a == b, \"mul\");\r\n    }\r\n    function safeDiv(uint a, uint b) public pure returns (uint c) {\r\n        require(b > 0, \"div\");\r\n        c = a / b;\r\n    }\r\n    function safeDivR(uint a, uint b, string memory s) public pure returns (uint c) {\r\n        require(b > 0, s);\r\n        c = a / b;\r\n    }\r\n}\r\n\r\n// File: contracts/utils/Address.sol\r\n\r\npragma solidity >=0.4.21 <0.6.0;\r\n\r\nlibrary Address {\r\n    function isContract(address account) internal view returns (bool) {\r\n        bytes32 codehash;\r\n        bytes32 accountHash = 0xc5d2460186f7233c927e7db2dcc703c0e500b653ca82273b7bfad8045d85a470;\r\n        // solhint-disable-next-line no-inline-assembly\r\n        assembly { codehash := extcodehash(account) }\r\n        return (codehash != 0x0 && codehash != accountHash);\r\n    }\r\n    function toPayable(address account) internal pure returns (address payable) {\r\n        return address(uint160(account));\r\n    }\r\n    function sendValue(address payable recipient, uint256 amount) internal {\r\n        require(address(this).balance >= amount, \"Address: insufficient balance\");\r\n\r\n        // solhint-disable-next-line avoid-call-value\r\n        (bool success, ) = recipient.call.value(amount)(\"\");\r\n        require(success, \"Address: unable to send value, recipient may have reverted\");\r\n    }\r\n}\r\n\r\n// File: contracts/utils/ReentrancyGuard.sol\r\n\r\npragma solidity >=0.4.21 <0.6.0;\r\n\r\ncontract ReentrancyGuard {\r\n    uint256 private _guardCounter;\r\n\r\n    constructor () internal {\r\n        _guardCounter = 1;\r\n    }\r\n\r\n    modifier nonReentrant() {\r\n        _guardCounter += 1;\r\n        uint256 localCounter = _guardCounter;\r\n        _;\r\n        require(localCounter == _guardCounter, \"ReentrancyGuard: reentrant call\");\r\n    }\r\n}\r\n\r\n// File: contracts/erc20/IERC20.sol\r\n\r\npragma solidity >=0.4.21 <0.6.0;\r\n\r\ninterface IERC20 {\r\n    function totalSupply() external view returns (uint256);\r\n    function balanceOf(address account) external view returns (uint256);\r\n    function transfer(address recipient, uint256 amount) external returns (bool);\r\n    function allowance(address owner, address spender) external view returns (uint256);\r\n    function approve(address spender, uint256 amount) external returns (bool);\r\n    function transferFrom(address sender, address recipient, uint256 amount) external returns (bool);\r\n    event Transfer(address indexed from, address indexed to, uint256 value);\r\n    event Approval(address indexed owner, address indexed spender, uint256 value);\r\n}\r\n\r\n// File: contracts/erc20/SafeERC20.sol\r\n\r\npragma solidity >=0.4.21 <0.6.0;\r\n\r\n\r\n\r\n\r\nlibrary SafeERC20 {\r\n    using SafeMath for uint256;\r\n    using Address for address;\r\n\r\n    function safeTransfer(IERC20 token, address to, uint256 value) internal {\r\n        callOptionalReturn(token, abi.encodeWithSelector(token.transfer.selector, to, value));\r\n    }\r\n\r\n    function safeTransferFrom(IERC20 token, address from, address to, uint256 value) internal {\r\n        callOptionalReturn(token, abi.encodeWithSelector(token.transferFrom.selector, from, to, value));\r\n    }\r\n\r\n    function safeApprove(IERC20 token, address spender, uint256 value) internal {\r\n        require((value == 0) || (token.allowance(address(this), spender) == 0),\r\n            \"SafeERC20: approve from non-zero to non-zero allowance\"\r\n        );\r\n        callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, value));\r\n    }\r\n\r\n    function safeIncreaseAllowance(IERC20 token, address spender, uint256 value) internal {\r\n        uint256 newAllowance = token.allowance(address(this), spender).safeAdd(value);\r\n        callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));\r\n    }\r\n\r\n    function safeDecreaseAllowance(IERC20 token, address spender, uint256 value) internal {\r\n        uint256 newAllowance = token.allowance(address(this), spender).safeSub(value);\r\n        callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));\r\n    }\r\n    function callOptionalReturn(IERC20 token, bytes memory data) private {\r\n        require(address(token).isContract(), \"SafeERC20: call to non-contract\");\r\n\r\n        // solhint-disable-next-line avoid-low-level-calls\r\n        (bool success, bytes memory returndata) = address(token).call(data);\r\n        require(success, \"SafeERC20: low-level call failed\");\r\n\r\n        if (returndata.length > 0) { // Return data is optional\r\n            // solhint-disable-next-line max-line-length\r\n            require(abi.decode(returndata, (bool)), \"SafeERC20: ERC20 operation did not succeed\");\r\n        }\r\n    }\r\n}\r\n\r\n// File: contracts/utils/TransferableToken.sol\r\n\r\npragma solidity >=0.4.21 <0.6.0;\r\n\r\n\r\n\r\ncontract TransferableTokenHelper{\r\n  uint256 public decimals;\r\n}\r\n\r\nlibrary TransferableToken{\r\n  using SafeERC20 for IERC20;\r\n\r\n  function transfer(address target_token, address payable to, uint256 amount) public {\r\n    if(target_token == address(0x0)){\r\n      (bool status, ) = to.call.value(address(this).balance)(\"\");\r\n      require(status, \"TransferableToken, transfer eth failed\");\r\n    }else{\r\n      IERC20(target_token).safeTransfer(to, amount);\r\n    }\r\n  }\r\n\r\n  function balanceOfAddr(address target_token, address _of) public view returns(uint256){\r\n    if(target_token == address(0x0)){\r\n      return address(_of).balance;\r\n    }else{\r\n      return IERC20(target_token).balanceOf(address(_of));\r\n    }\r\n  }\r\n\r\n  function decimals(address target_token) public view returns(uint256) {\r\n    if(target_token == address(0x0)){\r\n      return 18;\r\n    }else{\r\n      return TransferableTokenHelper(target_token).decimals();\r\n    }\r\n  }\r\n}\r\n\r\n// File: contracts/erc20/TokenInterface.sol\r\n\r\npragma solidity >=0.4.21 <0.6.0;\r\ncontract TokenInterface{\r\n  function destroyTokens(address _owner, uint _amount) public returns(bool);\r\n  function generateTokens(address _owner, uint _amount) public returns(bool);\r\n}\r\n\r\n// File: contracts/core/UpgradeV1ToV2.sol\r\n\r\npragma solidity >=0.4.21 <0.6.0;\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\ncontract CFVaultInterface{\r\n  address public target_token; //this is for V2\r\n  address public lp_token; //this is for both V1 and V2\r\n  function withdraw(uint256 _amount) public; //this is for V2\r\n  function deposit(uint256 _amount) public payable; //this is for V1\r\n}\r\n\r\n\r\ncontract UpgradeV1ToV2{\r\n  using SafeERC20 for IERC20;\r\n\r\n  CFVaultInterface public v1_vault;\r\n  CFVaultInterface public v2_vault;\r\n\r\n  constructor(address _v1, address _v2) public{\r\n    v1_vault = CFVaultInterface(_v1);\r\n    v2_vault = CFVaultInterface(_v2);\r\n  }\r\n\r\n  function upgrade(uint256 _amount) public{\r\n\r\n    address v1_lp_token = v1_vault.lp_token();\r\n    address v2_lp_token = v2_vault.lp_token();\r\n\r\n    require(IERC20(v1_lp_token).balanceOf(msg.sender) >= _amount, \"not enough to upgrade\");\r\n    TokenInterface(v1_lp_token).destroyTokens(msg.sender, _amount);\r\n    TokenInterface(v1_lp_token).generateTokens(address(this), _amount);\r\n\r\n    v1_vault.withdraw(_amount);\r\n\r\n    uint256 new_amount = TransferableToken.balanceOfAddr(v2_vault.target_token(), address(this));\r\n    if(v2_vault.target_token() == address(0x0)){\r\n      v2_vault.deposit.value(new_amount)(new_amount);\r\n    }else{\r\n      IERC20(v2_vault.target_token()).safeApprove(address(v2_vault), new_amount);\r\n      v2_vault.deposit(new_amount);\r\n    }\r\n    uint256 t = IERC20(v2_lp_token).balanceOf(address(this));\r\n    IERC20(v2_lp_token).safeTransfer(msg.sender, t);\r\n  }\r\n\r\n  function() external payable{}\r\n\r\n}","ABI":"[{\"constant\":true,\"inputs\":[],\"name\":\"v1_vault\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"upgrade\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"v2_vault\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"name\":\"_v1\",\"type\":\"address\"},{\"name\":\"_v2\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"payable\":true,\"stateMutability\":\"payable\",\"type\":\"fallback\"}]","ContractName":"UpgradeV1ToV2","CompilerVersion":"v0.5.10+commit.5a6ea5b1","OptimizationUsed":"1","Runs":"200","ConstructorArguments":"000000000000000000000000a1e263225e24333ca4d26083c94092d6bfee1ddd000000000000000000000000889b9194fb1d66509d3d043e7c839582fed6e607","EVMVersion":"Default","Library":"TransferableToken:3fae5f25953e16833fbf9c1fa55b683dc87e2aad","LicenseType":"MIT","Proxy":"0","Implementation":"","SwarmSource":"bzzr://36bb1dc42062217e9bf7b3c7b853e10f663e35079769d43bfd3454537efc0670"}]}