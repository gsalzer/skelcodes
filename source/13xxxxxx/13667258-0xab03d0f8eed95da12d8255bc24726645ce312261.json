{"status":"1","message":"OK","result":[{"SourceCode":"{{\r\n  \"language\": \"Solidity\",\r\n  \"sources\": {\r\n    \"contracts/CreaticlesDapp.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity 0.8.9;\\n\\n// import \\\"@openzeppelin/contracts/token/ERC721/IERC721.sol\\\";\\nimport \\\"@openzeppelin/contracts-upgradeable/utils/ContextUpgradeable.sol\\\" ;\\n// import \\\"hardhat/console.sol\\\";\\n\\ncontract CreaticlesDapp is ContextUpgradeable {\\n\\n    uint256 public CHOOSING_PERIOD;\\n\\n    struct Request {\\n        address requester;\\n        bytes32 detailsHash;\\n        uint256 value;\\n        uint128 numberOfWinners;\\n        uint256 createdAt;\\n        uint256 expiresAt;\\n        bool active;\\n        uint256 numMintPerToken;\\n    }\\n\\n    uint256 public cval;\\n\\n    uint256 public numberOfRequests;\\n\\n    mapping(uint256 => Request) public requests;\\n\\n    address public adm;\\n\\n    address public nftContractAddress;\\n\\n    bool private initialized;\\n\\n\\n    //EVENTS\\n    event RequestCreated(uint256 requestId, address requester, bytes32 detailsHash, uint256 value, uint128 numberOfWinners, uint256 createdAt, uint256 expiresAt, bool active, uint256 numMintPerToken );\\n    event ProposalAccepted(address to, uint256 requestId, uint256[] _proposalId, uint256[] _tokenIds, string[] _tokenURLs, address[] _winners, uint256 remainingValue, uint256 tokenSupplies);\\n    event FundsReclaimed(uint256 requestId, address requester, uint256 amount);\\n    event ChoosingPeriodChanged(uint256 period);\\n\\n  \\n    //MODIFIERS\\n    modifier onlyRequester(uint256 _requestId) {\\n        require(requests[_requestId].requester == msg.sender);\\n        _;\\n    }\\n    modifier isCreaticlesNFTContract(){\\n        require(_msgSender() == nftContractAddress, \\\"Only Creaticles NFT Contract has permission to call this function\\\");\\n        _;\\n    }\\n    modifier isAdmin(){\\n        require(_msgSender() == adm, \\\"This function can only be called by an admin\\\");\\n        _;\\n    }\\n\\n    //INTITIALIZER\\n    /**\\n    * \\n    * @param choosingPeriod: units DAYS => used to set allowable time period for requester to choose winners\\n    */\\n    function initialize(uint256 choosingPeriod) public {\\n        require(!initialized, \\\"Contract instance has already been initialized\\\");\\n        initialized = true;\\n        adm = msg.sender;\\n        CHOOSING_PERIOD = choosingPeriod * 1 days;\\n    }\\n\\n    function setNFTContractAddress(address nftAddress) public isAdmin(){\\n        nftContractAddress = nftAddress;\\n\\n    }\\n\\n\\n    //MUTABLE FUNCTIONS\\n    /**\\n    @dev creates a request\\n    @param _detailsHash => keccak256 hash of the metadata of the request\\n    @param _numberOfWinners => the initially set number of winners. A request cannot take more winners than specified\\n    @param _duration => time span of contest in seconds. After this time is up. No more proposals can be taken and the choosing period starts\\n    */\\n    function createRequest(bytes32 _detailsHash, uint16 _numberOfWinners, uint32 _duration, uint256 _numMintPerToken) public payable returns(uint256) {\\n        require(msg.value > 0);\\n        require(_numberOfWinners > 0);\\n        require(_numberOfWinners <= 10);\\n        uint256 _cval = (msg.value * 25) / 1000;    // 2.5% commision\\n        uint256 _value = msg.value - _cval;\\n        cval += _cval;\\n        Request storage _request = requests[numberOfRequests];\\n        _request.requester = msg.sender;\\n        _request.detailsHash = _detailsHash;\\n        _request.value = _value;\\n        _request.numberOfWinners = _numberOfWinners;\\n        _request.createdAt = block.timestamp;\\n        _request.expiresAt = block.timestamp + _duration;\\n        _request.active = true;\\n        _request.numMintPerToken = _numMintPerToken;\\n        numberOfRequests += 1;\\n        emit RequestCreated(numberOfRequests - 1, msg.sender, _detailsHash, _value, _numberOfWinners, block.timestamp, block.timestamp + _duration, true, _numMintPerToken);\\n  \\n        return numberOfRequests;\\n    }\\n\\n    \\n\\n    /**\\n    @dev can only be called by the CreaticlesNFT contract. Used to pay winners after the CreaticlesNFT contract mints the winning NFTs\\n    @param _requestId => the requestId of the respective request\\n    @param _winners => list of the addresses of the chosen winners\\n    */\\n    function acceptProposals(address _to, uint256 _requestId, uint256[] memory _proposalId, uint256[] memory _tokenIds, string[] memory _tokenURLs, address[] memory _winners, uint256 _tokenSupplies) public isCreaticlesNFTContract(){\\n        \\n        Request storage _request = requests[_requestId];\\n        require(_winners.length <= _request.numberOfWinners, \\\"Requester cannot claim more winners than intially set\\\");\\n        uint256 _winnerValue = _request.value / _request.numberOfWinners;\\n        _request.value -= (_winnerValue * _winners.length);\\n        _request.active = false;\\n        //loop through winners and send their ETH\\n        for(uint256 i = 0; i < _winners.length; i++){\\n            require(payable(_winners[i]).send(_winnerValue), \\\"Failed to send Ether\\\");\\n            \\n        }\\n        \\n        _request.active = false;\\n        emit ProposalAccepted(_to, _requestId, _proposalId, _tokenIds, _tokenURLs,_winners,_winnerValue, _tokenSupplies);\\n        \\n    }\\n\\n    /**\\n    @dev allows requester to reclaim their funds if they still have funds and the choosing period is over\\n    */\\n    function reclaimFunds(uint256 requestId) public {\\n        Request storage _request = requests[requestId];\\n        require(_msgSender() == _request.requester, \\\"Sender is not Requester\\\");\\n        require(block.timestamp >= _request.expiresAt + CHOOSING_PERIOD || !_request.active, \\\"Funds are not available\\\");\\n  \\n        payable(msg.sender).transfer(_request.value);\\n        emit FundsReclaimed(requestId, _request.requester, _request.value);\\n        _request.value = 0;\\n        \\n\\n    }\\n\\n    /**\\n    @param duration => (units of days)\\n    */\\n    function setChoosingPeriod(uint256 duration) public isAdmin(){ \\n        CHOOSING_PERIOD = duration * 1 days;\\n        emit ChoosingPeriodChanged(CHOOSING_PERIOD);\\n    }\\n\\n\\n    //VIEW FUNCTIONS\\n    /**\\n    @dev used by CreaticlesNFT contract to determine if the minter is the owner of the specified request\\n    */\\n    function isRequester(address _addr, uint256 _requestId) public view returns (bool){\\n        Request memory _request = requests[_requestId];\\n        require(_addr ==  _request.requester, \\\"Address is not the requester\\\");\\n        return true;\\n    }\\n\\n    /**\\n    @dev used by CreaticlesNFT contract to determine if the specified request is not closed\\n    */\\n    function isOpenForChoosing(uint256 _requestId) public view returns (bool){\\n        Request memory _request = requests[_requestId];\\n        require(block.timestamp >= ((_request.expiresAt * 1 seconds)), \\\"Choosing period has not started\\\");\\n        require(block.timestamp <= ((_request.expiresAt * 1 seconds) + CHOOSING_PERIOD), \\\"Choosing period is up\\\");\\n        require(_request.active, \\\"request not active\\\");\\n        return true;\\n    }\\n\\n    /**\\n    @dev used to set new admin\\n    */\\n    function setAdmin(address newAdmin) external isCreaticlesNFTContract() {\\n        adm = newAdmin;\\n    }\\n\\n    function sendValue(uint256 _amount, address payable _dest) public isAdmin(){\\n        require(_amount <= cval);\\n        cval -= _amount;\\n        _dest.transfer(_amount);\\n    }\\n\\n\\n\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts-upgradeable/utils/ContextUpgradeable.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\nimport \\\"../proxy/utils/Initializable.sol\\\";\\n\\n/**\\n * @dev Provides information about the current execution context, including the\\n * sender of the transaction and its data. While these are generally available\\n * via msg.sender and msg.data, they should not be accessed in such a direct\\n * manner, since when dealing with meta-transactions the account sending and\\n * paying for execution may not be the actual sender (as far as an application\\n * is concerned).\\n *\\n * This contract is only required for intermediate, library-like contracts.\\n */\\nabstract contract ContextUpgradeable is Initializable {\\n    function __Context_init() internal initializer {\\n        __Context_init_unchained();\\n    }\\n\\n    function __Context_init_unchained() internal initializer {\\n    }\\n    function _msgSender() internal view virtual returns (address) {\\n        return msg.sender;\\n    }\\n\\n    function _msgData() internal view virtual returns (bytes calldata) {\\n        return msg.data;\\n    }\\n    uint256[50] private __gap;\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev This is a base contract to aid in writing upgradeable contracts, or any kind of contract that will be deployed\\n * behind a proxy. Since a proxied contract can't have a constructor, it's common to move constructor logic to an\\n * external initializer function, usually called `initialize`. It then becomes necessary to protect this initializer\\n * function so it can only be called once. The {initializer} modifier provided by this contract will have this effect.\\n *\\n * TIP: To avoid leaving the proxy in an uninitialized state, the initializer function should be called as early as\\n * possible by providing the encoded function call as the `_data` argument to {ERC1967Proxy-constructor}.\\n *\\n * CAUTION: When used with inheritance, manual care must be taken to not invoke a parent initializer twice, or to ensure\\n * that all initializers are idempotent. This is not verified automatically as constructors are by Solidity.\\n */\\nabstract contract Initializable {\\n    /**\\n     * @dev Indicates that the contract has been initialized.\\n     */\\n    bool private _initialized;\\n\\n    /**\\n     * @dev Indicates that the contract is in the process of being initialized.\\n     */\\n    bool private _initializing;\\n\\n    /**\\n     * @dev Modifier to protect an initializer function from being invoked twice.\\n     */\\n    modifier initializer() {\\n        require(_initializing || !_initialized, \\\"Initializable: contract is already initialized\\\");\\n\\n        bool isTopLevelCall = !_initializing;\\n        if (isTopLevelCall) {\\n            _initializing = true;\\n            _initialized = true;\\n        }\\n\\n        _;\\n\\n        if (isTopLevelCall) {\\n            _initializing = false;\\n        }\\n    }\\n}\\n\"\r\n    }\r\n  },\r\n  \"settings\": {\r\n    \"optimizer\": {\r\n      \"enabled\": false,\r\n      \"runs\": 200\r\n    },\r\n    \"outputSelection\": {\r\n      \"*\": {\r\n        \"*\": [\r\n          \"evm.bytecode\",\r\n          \"evm.deployedBytecode\",\r\n          \"devdoc\",\r\n          \"userdoc\",\r\n          \"metadata\",\r\n          \"abi\"\r\n        ]\r\n      }\r\n    },\r\n    \"libraries\": {}\r\n  }\r\n}}","ABI":"[{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"period\",\"type\":\"uint256\"}],\"name\":\"ChoosingPeriodChanged\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"requestId\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"requester\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"FundsReclaimed\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"requestId\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256[]\",\"name\":\"_proposalId\",\"type\":\"uint256[]\"},{\"indexed\":false,\"internalType\":\"uint256[]\",\"name\":\"_tokenIds\",\"type\":\"uint256[]\"},{\"indexed\":false,\"internalType\":\"string[]\",\"name\":\"_tokenURLs\",\"type\":\"string[]\"},{\"indexed\":false,\"internalType\":\"address[]\",\"name\":\"_winners\",\"type\":\"address[]\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"remainingValue\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"tokenSupplies\",\"type\":\"uint256\"}],\"name\":\"ProposalAccepted\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"requestId\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"requester\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"bytes32\",\"name\":\"detailsHash\",\"type\":\"bytes32\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint128\",\"name\":\"numberOfWinners\",\"type\":\"uint128\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"createdAt\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"expiresAt\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"bool\",\"name\":\"active\",\"type\":\"bool\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"numMintPerToken\",\"type\":\"uint256\"}],\"name\":\"RequestCreated\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"CHOOSING_PERIOD\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_requestId\",\"type\":\"uint256\"},{\"internalType\":\"uint256[]\",\"name\":\"_proposalId\",\"type\":\"uint256[]\"},{\"internalType\":\"uint256[]\",\"name\":\"_tokenIds\",\"type\":\"uint256[]\"},{\"internalType\":\"string[]\",\"name\":\"_tokenURLs\",\"type\":\"string[]\"},{\"internalType\":\"address[]\",\"name\":\"_winners\",\"type\":\"address[]\"},{\"internalType\":\"uint256\",\"name\":\"_tokenSupplies\",\"type\":\"uint256\"}],\"name\":\"acceptProposals\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"adm\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"_detailsHash\",\"type\":\"bytes32\"},{\"internalType\":\"uint16\",\"name\":\"_numberOfWinners\",\"type\":\"uint16\"},{\"internalType\":\"uint32\",\"name\":\"_duration\",\"type\":\"uint32\"},{\"internalType\":\"uint256\",\"name\":\"_numMintPerToken\",\"type\":\"uint256\"}],\"name\":\"createRequest\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"cval\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"choosingPeriod\",\"type\":\"uint256\"}],\"name\":\"initialize\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_requestId\",\"type\":\"uint256\"}],\"name\":\"isOpenForChoosing\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_addr\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_requestId\",\"type\":\"uint256\"}],\"name\":\"isRequester\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"nftContractAddress\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"numberOfRequests\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"requestId\",\"type\":\"uint256\"}],\"name\":\"reclaimFunds\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"requests\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"requester\",\"type\":\"address\"},{\"internalType\":\"bytes32\",\"name\":\"detailsHash\",\"type\":\"bytes32\"},{\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"},{\"internalType\":\"uint128\",\"name\":\"numberOfWinners\",\"type\":\"uint128\"},{\"internalType\":\"uint256\",\"name\":\"createdAt\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"expiresAt\",\"type\":\"uint256\"},{\"internalType\":\"bool\",\"name\":\"active\",\"type\":\"bool\"},{\"internalType\":\"uint256\",\"name\":\"numMintPerToken\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"},{\"internalType\":\"address payable\",\"name\":\"_dest\",\"type\":\"address\"}],\"name\":\"sendValue\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newAdmin\",\"type\":\"address\"}],\"name\":\"setAdmin\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"duration\",\"type\":\"uint256\"}],\"name\":\"setChoosingPeriod\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"nftAddress\",\"type\":\"address\"}],\"name\":\"setNFTContractAddress\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}]","ContractName":"CreaticlesDapp","CompilerVersion":"v0.8.9+commit.e5eed63a","OptimizationUsed":"0","Runs":"200","ConstructorArguments":"","EVMVersion":"Default","Library":"","LicenseType":"","Proxy":"0","Implementation":"","SwarmSource":""}]}