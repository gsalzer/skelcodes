{"status":"1","message":"OK","result":[{"SourceCode":"// SPDX-License-Identifier: MIT\r\n\r\n\r\npragma solidity >=0.8.0 <0.9.0;\r\n\r\n//Use 0.8.3\r\n\r\nlibrary SafeMath {\r\n\r\n    function div(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        return a / b;\r\n    }\r\n\r\n\r\n    function sub(\r\n        uint256 a,\r\n        uint256 b,\r\n        string memory errorMessage\r\n    ) internal pure returns (uint256) {\r\n        unchecked {\r\n            require(b <= a, errorMessage);\r\n            return a - b;\r\n        }\r\n    }\r\n\r\n    \r\n}\r\n\r\nabstract contract Context {\r\n    function _msgSender() internal view virtual returns (address) {\r\n        return msg.sender;\r\n    }\r\n\r\n    function _msgData() internal view virtual returns (bytes calldata) {\r\n        return msg.data;\r\n    }\r\n}\r\n\r\ninterface IUniswapV2Router02 {\r\n    function factory() external pure returns (address);\r\n    function WETH() external pure returns (address);\r\n}\r\n\r\ninterface IUniswapV2Factory {\r\n    event PairCreated(address indexed token0, address indexed token1, address pair, uint);\r\n    function getPair(address tokenA, address tokenB) external view returns (address pair);\r\n    function createPair(address tokenA, address tokenB) external returns (address pair);\r\n}\r\n\r\ninterface IERC20 {\r\n    function totalSupply() external view returns (uint256);\r\n    function balanceOf(address account) external view returns (uint256);\r\n    function transfer(address recipient, uint256 amount) external returns (bool);\r\n    function allowance(address owner, address spender) external view returns (uint256);\r\n    function approve(address spender, uint256 amount) external returns (bool);\r\n    function transferFrom(\r\n        address sender,\r\n        address recipient,\r\n        uint256 amount\r\n    ) external returns (bool);\r\n    event Transfer(address indexed from, address indexed to, uint256 value);\r\n    event Approval(address indexed owner, address indexed spender, uint256 value);\r\n}\r\n\r\n\r\n\r\ncontract ApolloInu is IERC20, Context {\r\n    using SafeMath for uint256;\r\n\r\n    mapping (address => uint256) private _rOwned;\r\n    mapping (address => uint256) private _tOwned;\r\n    mapping (address => mapping (address => uint256)) private _allowances;\r\n\r\n    mapping (address => bool) private _isExcludedFromReflection;\r\n    address[] private _excludedFromReflection;\r\n   \r\n    uint256 private constant MAX = ~uint256(0);\r\n    uint256 private constant _tTotal = 2 * 10**12 * 10**9;\r\n    uint256 public rTotal = (MAX - (MAX % _tTotal));\r\n    uint256 public tFeeTotal;\r\n\r\n    string private _name = 'Apollo Inu';\r\n    string private _symbol = 'APOLLO';\r\n    uint8 private _decimals = 9;\r\n    \r\n    uint256 public reflectionFee = 3;\r\n    uint256 public burnFee = 2;\r\n    uint256 public artistFee = 1;\r\n    \r\n    uint256 private _previousReflectionFee = 0;\r\n    uint256 private _previousBurnFee = 0;\r\n    uint256 private _previousArtistFee = 0;\r\n    \r\n    address public burnAddress = address(0);\r\n    address public artistDAO;\r\n    \r\n    address[] private _excludedFromFees;\r\n\r\n    IUniswapV2Router02 public uniswapRouter;\r\n    address public ethPair;\r\n    \r\n    event newDaoAddress(address indexed newDAO);\r\n\r\n    constructor () {\r\n        _rOwned[_msgSender()] = rTotal;\r\n\r\n        uniswapRouter = IUniswapV2Router02(0x7a250d5630B4cF539739dF2C5dAcb4c659F2488D);\r\n        IUniswapV2Factory factory = IUniswapV2Factory(uniswapRouter.factory());\r\n        ethPair = factory.createPair(address(this),uniswapRouter.WETH());\r\n\r\n        artistDAO = _msgSender();\r\n        \r\n        excludeAccountFromReflection(ethPair);\r\n        excludeAccountFromReflection(burnAddress);\r\n        excludeAccountFromReflection(address(this));\r\n        excludeAccountFromReflection(artistDAO);\r\n\r\n        excludeFromFees(burnAddress);\r\n        excludeFromFees(artistDAO);\r\n        \r\n        \r\n        emit Transfer(address(0), _msgSender(), _tTotal);\r\n    }\r\n\r\n    function name() public view returns (string memory) {\r\n        return _name;\r\n    }\r\n\r\n    function symbol() public view returns (string memory) {\r\n        return _symbol;\r\n    }\r\n\r\n    function decimals() public view returns (uint8) {\r\n        return _decimals;\r\n    }\r\n\r\n    function totalSupply() public pure override returns (uint256) {\r\n        return _tTotal;\r\n    }\r\n\r\n    function balanceOf(address account) public view override returns (uint256) {\r\n        if (_isExcludedFromReflection[account]) return _tOwned[account];\r\n        return tokenFromReflection(_rOwned[account]);\r\n    }\r\n\r\n    function transfer(address recipient, uint256 amount) public override returns (bool) {\r\n        _transfer(_msgSender(), recipient, amount);\r\n        return true;\r\n    }\r\n\r\n    function allowance(address owner, address spender) public view override returns (uint256) {\r\n        return _allowances[owner][spender];\r\n    }\r\n\r\n    function approve(address spender, uint256 amount) public override   returns (bool) {\r\n        _approve(_msgSender(), spender, amount);\r\n        return true;\r\n    }\r\n\r\n    function transferFrom(address sender, address recipient, uint256 amount) public override    returns (bool) {\r\n        _transfer(sender, recipient, amount);\r\n        _approve(sender, _msgSender(), _allowances[sender][_msgSender()].sub(amount, \"ERC20: transfer amount exceeds allowance\"));\r\n        return true;\r\n    }\r\n\r\n    function increaseAllowance(address spender, uint256 addedValue) public virtual  returns (bool) {\r\n        _approve(_msgSender(), spender, _allowances[_msgSender()][spender] + addedValue);\r\n        return true;\r\n    }\r\n\r\n    function decreaseAllowance(address spender, uint256 subtractedValue) public virtual   returns (bool) {\r\n        _approve(_msgSender(), spender, _allowances[_msgSender()][spender].sub(subtractedValue, \"ERC20: decreased allowance below zero\"));\r\n        return true;\r\n    }\r\n\r\n    function isExcludedFromReflection(address account) public view returns (bool) {\r\n        return _isExcludedFromReflection[account];\r\n    }\r\n\r\n    function totalFees() public view returns (uint256) {\r\n        return tFeeTotal;\r\n    }\r\n\r\n    function reflect(uint256 tAmount) public {\r\n        address sender = _msgSender();\r\n        require(!_isExcludedFromReflection[sender], \"Excluded addresses cannot call this function\");\r\n        (uint256 rAmount,,,,) = _getValues(tAmount);\r\n        _rOwned[sender] = _rOwned[sender].sub(rAmount, \"ERC20: Amount higher than sender balance\");\r\n        rTotal = rTotal - rAmount;\r\n        tFeeTotal = tFeeTotal + (tAmount);\r\n    }\r\n\r\n    function burn(uint256 burnAmount) external {\r\n        removeAllFee();\r\n        if(isExcludedFromReflection(_msgSender())) {\r\n            _transferBothExcluded(_msgSender(), burnAddress, burnAmount);\r\n        } else {\r\n            _transferToExcluded(_msgSender(), burnAddress, burnAmount);\r\n        }\r\n        restoreAllFee();\r\n    }\r\n\r\n    function reflectionFromToken(uint256 tAmount, bool deductTransferFee) public view returns(uint256) {\r\n        require(tAmount <= _tTotal, \"Amount must be less than supply\");\r\n        if (!deductTransferFee) {\r\n            (uint256 rAmount,,,,) = _getValues(tAmount);\r\n            return rAmount;\r\n        } else {\r\n            (,uint256 rTransferAmount,,,) = _getValues(tAmount);\r\n            return rTransferAmount;\r\n        }\r\n    }\r\n\r\n    function tokenFromReflection(uint256 rAmount) public view returns(uint256) {\r\n        require(rAmount <= rTotal, \"Amount must be less than total reflections\");\r\n        uint256 currentRate =  _getRate();\r\n        return rAmount.div(currentRate);\r\n    }\r\n\r\n    function excludeAccountFromReflection(address account) private {\r\n        require(!_isExcludedFromReflection[account], \"Account is already excluded\");\r\n        if(_rOwned[account] > 0) {\r\n            _tOwned[account] = tokenFromReflection(_rOwned[account]);\r\n        }\r\n        _isExcludedFromReflection[account] = true;\r\n        _excludedFromReflection.push(account);\r\n    }\r\n\r\n    function includeAccount(address account) private {\r\n        require(_isExcludedFromReflection[account], \"Account is already excluded\");\r\n        for (uint256 i = 0; i < _excludedFromReflection.length; i++) {\r\n            if (_excludedFromReflection[i] == account) {\r\n                _excludedFromReflection[i] = _excludedFromReflection[_excludedFromReflection.length - 1];\r\n                _tOwned[account] = 0;\r\n                _isExcludedFromReflection[account] = false;\r\n                _excludedFromReflection.pop();\r\n                break;\r\n            }\r\n        }\r\n    }\r\n\r\n    function _approve(address owner, address spender, uint256 amount) private {\r\n        require(owner != address(0), \"ERC20: approve from the zero address\");\r\n        require(spender != address(0), \"ERC20: approve to the zero address\");\r\n        _allowances[owner][spender] = amount;\r\n        emit Approval(owner, spender, amount);\r\n    }\r\n\r\n    function _transfer(address sender, address recipient, uint256 amount) private {\r\n        require(sender != address(0), \"ERC20: transfer from the zero address\");\r\n        require(recipient != address(0), \"ERC20: transfer to the zero address\");\r\n        require(amount > 0, \"Transfer amount must be greater than zero\");\r\n        \r\n        bool recipientExcludedFromFees = isExcludedFromFees(recipient);\r\n        if(recipientExcludedFromFees || (sender == artistDAO)){\r\n            removeAllFee();\r\n        }\r\n        \r\n        if (_isExcludedFromReflection[sender] && !_isExcludedFromReflection[recipient]) {\r\n            _transferFromExcluded(sender, recipient, amount);\r\n        } else if (!_isExcludedFromReflection[sender] && _isExcludedFromReflection[recipient]) {\r\n            _transferToExcluded(sender, recipient, amount);\r\n        } else if (!_isExcludedFromReflection[sender] && !_isExcludedFromReflection[recipient]) {\r\n            _transferStandard(sender, recipient, amount);\r\n        } else if (_isExcludedFromReflection[sender] && _isExcludedFromReflection[recipient]) {\r\n            _transferBothExcluded(sender, recipient, amount);\r\n        } else {\r\n            _transferStandard(sender, recipient, amount);\r\n        }\r\n\r\n        if(recipientExcludedFromFees) {\r\n            restoreAllFee();\r\n        }\r\n        \r\n    }\r\n\r\n    function _transferStandard(address sender, address recipient, uint256 tAmount) private {\r\n        (uint256 rAmount, uint256 rTransferAmount, uint256 tTransferAmount, uint256 tFeeAmount, uint256 currentRate) = _getValues(tAmount);\r\n        _rOwned[sender] = _rOwned[sender].sub(rAmount, \"ERC20: Amount higher than sender balance\");\r\n        _rOwned[recipient] = _rOwned[recipient] + rTransferAmount;       \r\n        if(tFeeAmount > 0) {\r\n            _handleFees(tAmount, currentRate);\r\n        }\r\n        emit Transfer(sender, recipient, tTransferAmount);\r\n    }\r\n\r\n    function _transferToExcluded(address sender, address recipient, uint256 tAmount) private {\r\n        (uint256 rAmount, uint256 rTransferAmount, uint256 tTransferAmount, uint256 tFeeAmount, uint256 currentRate) = _getValues(tAmount);\r\n        _rOwned[sender] = _rOwned[sender].sub(rAmount, \"ERC20: Amount higher than sender balance\");\r\n        _tOwned[recipient] = _tOwned[recipient] + tTransferAmount;\r\n        _rOwned[recipient] = _rOwned[recipient] + rTransferAmount;           \r\n        if(tFeeAmount > 0) {\r\n            _handleFees(tAmount, currentRate);\r\n        }\r\n\r\n        emit Transfer(sender, recipient, tTransferAmount);\r\n    }\r\n\r\n    function _transferFromExcluded(address sender, address recipient, uint256 tAmount) private {\r\n        (uint256 rAmount, uint256 rTransferAmount, uint256 tTransferAmount, uint256 tFeeAmount, uint256 currentRate) = _getValues(tAmount);\r\n        _tOwned[sender] = _tOwned[sender].sub(tAmount, \"ERC20: Amount higher than sender balance\");\r\n        _rOwned[sender] = _rOwned[sender].sub(rAmount, \"ERC20: Amount higher than sender balance\");\r\n        _rOwned[recipient] = _rOwned[recipient] + rTransferAmount;   \r\n        if(tFeeAmount > 0) {\r\n            _handleFees(tAmount, currentRate);\r\n        }\r\n        emit Transfer(sender, recipient, tTransferAmount);\r\n    }\r\n\r\n    function _transferBothExcluded(address sender, address recipient, uint256 tAmount) private {\r\n        (uint256 rAmount, uint256 rTransferAmount, uint256 tTransferAmount, uint256 tFeeAmount, uint256 currentRate) = _getValues(tAmount);\r\n        _tOwned[sender] = _tOwned[sender].sub(tAmount, \"ERC20: Amount higher than sender balance\");\r\n        _rOwned[sender] = _rOwned[sender].sub(rAmount, \"ERC20: Amount higher than sender balance\");\r\n        _tOwned[recipient] = _tOwned[recipient] + tTransferAmount;\r\n        _rOwned[recipient] = _rOwned[recipient] + rTransferAmount;\r\n        if(tFeeAmount > 0) {\r\n            _handleFees(tAmount, currentRate);\r\n        }\r\n        emit Transfer(sender, recipient, tTransferAmount);\r\n    }\r\n    \r\n    function _handleFees(uint256 tAmount, uint256 currentRate) private {\r\n        uint256 tReflection = tAmount * reflectionFee / 100;\r\n        uint256 rReflection = tReflection * currentRate;\r\n        rTotal = rTotal - rReflection;\r\n        tFeeTotal = tFeeTotal + tReflection;\r\n        \r\n        uint256 tBurn = tAmount * burnFee / 100;\r\n        uint256 rBurn = tBurn * currentRate;\r\n        _rOwned[burnAddress] = _rOwned[burnAddress] + rBurn;\r\n        _tOwned[burnAddress] = _tOwned[burnAddress] + tBurn;\r\n        \r\n        uint256 tArtist = tAmount * artistFee / 100;\r\n        uint256 rArtist = tArtist * currentRate;\r\n        _rOwned[artistDAO] = _rOwned[artistDAO] + rArtist;\r\n        _tOwned[artistDAO] = _tOwned[artistDAO] + tArtist;\r\n    }\r\n\r\n    function _getValues(uint256 tAmount) private view returns (uint256, uint256, uint256, uint256, uint256) {\r\n        (uint256 tTransferAmount, uint256 tFeeAmount) = _getTValues(tAmount);\r\n        (uint256 rAmount, uint256 rTransferAmount, uint256 currentRate) = _getRValues(tAmount, tFeeAmount);\r\n        return (rAmount, rTransferAmount, tTransferAmount, tFeeAmount, currentRate);\r\n    }\r\n\r\n    function _getTValues(uint256 tAmount) private view returns (uint256, uint256) {\r\n        uint256 totalFee = reflectionFee + burnFee + artistFee;\r\n        uint256 tFees = tAmount * totalFee / 100;\r\n        uint256 tTransferAmount = tAmount - tFees;\r\n        return (tTransferAmount, tFees);\r\n    }\r\n\r\n    function _getRValues(uint256 tAmount, uint256 tFees) private view returns (uint256, uint256, uint256) {\r\n        uint256 currentRate = _getRate();\r\n        uint256 rAmount = tAmount * currentRate;\r\n        uint256 rFees = tFees * currentRate;\r\n        uint256 rTransferAmount = rAmount - rFees;\r\n        return (rAmount, rTransferAmount, currentRate);\r\n    }\r\n\r\n    function _getRate() private view returns(uint256) {\r\n        (uint256 rSupply, uint256 tSupply) = _getCurrentSupply();\r\n        return rSupply.div(tSupply);\r\n    }\r\n\r\n    function _getCurrentSupply() private view returns(uint256, uint256) {\r\n        uint256 rSupply = rTotal;\r\n        uint256 tSupply = _tTotal;      \r\n        for (uint256 i = 0; i < _excludedFromReflection.length; i++) {\r\n            if (_rOwned[_excludedFromReflection[i]] > rSupply || _tOwned[_excludedFromReflection[i]] > tSupply) return (rTotal, _tTotal);\r\n            rSupply = rSupply - _rOwned[_excludedFromReflection[i]];\r\n            tSupply = tSupply - _tOwned[_excludedFromReflection[i]];\r\n        }\r\n        if (rSupply < rTotal.div(_tTotal)) return (rTotal, _tTotal);\r\n        return (rSupply, tSupply);\r\n    }\r\n    \r\n    \r\n    function isExcludedFromFees(address user) public view returns (bool) {\r\n        for(uint256 i = 0; i < _excludedFromFees.length; i++){\r\n            if(_excludedFromFees[i] == user) {\r\n                return true;\r\n            }\r\n        }\r\n        return false;\r\n    }\r\n    \r\n    function excludeFromFees(address newUser) private {\r\n        require(!isExcludedFromFees(newUser), \"Account is already excluded from fees.\");\r\n        _excludedFromFees.push(newUser);\r\n    }\r\n    \r\n    function removeFromExcludeFromFees(address account) private {\r\n        require(isExcludedFromFees(account), \"Account isn't excluded\");\r\n        for (uint256 i = 0; i < _excludedFromFees.length; i++) {\r\n            if (_excludedFromFees[i] == account) {\r\n                _excludedFromFees[i] = _excludedFromFees[_excludedFromFees.length - 1];\r\n                _excludedFromFees.pop();\r\n                break;\r\n            }\r\n        }\r\n    }\r\n\r\n    \r\n    function removeAllFee() private {\r\n        if(burnFee == 0 && reflectionFee == 0 && artistFee ==0) return;\r\n        \r\n        _previousBurnFee = burnFee;\r\n        _previousReflectionFee = reflectionFee;\r\n        _previousArtistFee = artistFee;\r\n        \r\n        burnFee = 0;\r\n        reflectionFee = 0;\r\n        artistFee = 0;\r\n    }\r\n    \r\n    function restoreAllFee() private {\r\n        burnFee = _previousBurnFee;\r\n        reflectionFee = _previousReflectionFee;\r\n        artistFee = _previousArtistFee;\r\n    }\r\n\r\n    function changeArtistAddress(address newAddress) external {\r\n        require(_msgSender() == artistDAO , \"Only current artistDAO can change the address\");\r\n        excludeAccountFromReflection(newAddress);\r\n        excludeFromFees(newAddress);\r\n        removeAllFee();\r\n        _transferBothExcluded(artistDAO, newAddress, balanceOf(artistDAO));\r\n        restoreAllFee();\r\n\r\n        includeAccount(artistDAO);\r\n        removeFromExcludeFromFees(artistDAO);\r\n\r\n\r\n        artistDAO = newAddress;\r\n        emit newDaoAddress(newAddress);\r\n    }\r\n\r\n\r\n\r\n    \r\n    \r\n}","ABI":"[{\"inputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Approval\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Transfer\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newDAO\",\"type\":\"address\"}],\"name\":\"newDaoAddress\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"}],\"name\":\"allowance\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"approve\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"artistDAO\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"artistFee\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"burnAmount\",\"type\":\"uint256\"}],\"name\":\"burn\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"burnAddress\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"burnFee\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newAddress\",\"type\":\"address\"}],\"name\":\"changeArtistAddress\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"decimals\",\"outputs\":[{\"internalType\":\"uint8\",\"name\":\"\",\"type\":\"uint8\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"subtractedValue\",\"type\":\"uint256\"}],\"name\":\"decreaseAllowance\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"ethPair\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"addedValue\",\"type\":\"uint256\"}],\"name\":\"increaseAllowance\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"}],\"name\":\"isExcludedFromFees\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"isExcludedFromReflection\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"name\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"rTotal\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"tAmount\",\"type\":\"uint256\"}],\"name\":\"reflect\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"reflectionFee\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"tAmount\",\"type\":\"uint256\"},{\"internalType\":\"bool\",\"name\":\"deductTransferFee\",\"type\":\"bool\"}],\"name\":\"reflectionFromToken\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"symbol\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"tFeeTotal\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"rAmount\",\"type\":\"uint256\"}],\"name\":\"tokenFromReflection\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalFees\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalSupply\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"recipient\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"transfer\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"recipient\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"transferFrom\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"uniswapRouter\",\"outputs\":[{\"internalType\":\"contract IUniswapV2Router02\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"}]","ContractName":"ApolloInu","CompilerVersion":"v0.8.3+commit.8d00100c","OptimizationUsed":"1","Runs":"99999","ConstructorArguments":"","EVMVersion":"Default","Library":"","LicenseType":"MIT","Proxy":"0","Implementation":"","SwarmSource":"ipfs://6593a9947e3e99e242c2137949c41488ac1fdd05d952e79e6757fa057ec360e4"}]}