{"status":"1","message":"OK","result":[{"SourceCode":"{\"CollectorPool.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.0;\\n\\nimport \\\"./Ownable.sol\\\";\\nimport \\\"./ReentrancyGuard.sol\\\";\\n\\nimport \\\"./IOre.sol\\\";\\n\\n\\ncontract CollectorPool is Ownable, ReentrancyGuard {\\n  // Ore token contract interface\\n  IOre public ore;\\n\\n  // Determines if collectors can deposit ore to be burnt\\n  bool private _openForBurning;\\n  // Keeps track fo the currently active launch counter\\n  uint256 private _currentLaunch;\\n\\n  // Keeps track of whitelisted fund sources\\n  mapping (address =\\u003e bool) public fundAddresses;\\n  // Keeps track of when an address last claimed their shares from the pool\\n  mapping (address =\\u003e uint256) private _lastClaimedByAddress;\\n  // Keeps track of the total burnt ore by an address for each launch\\n  mapping (address =\\u003e mapping (uint256 =\\u003e uint256)) private _burntOreByAddress;\\n  // Keeps track of the total burnt ore in each launch\\n  mapping (uint256 =\\u003e uint256) private _totalBurntOreByLaunch;\\n  // Keeps track of the total funds received in each launch\\n  mapping (uint256 =\\u003e uint256) private _totalFundsByLaunch;\\n\\n  constructor(address _ore) {\\n    ore = IOre(_ore);\\n  }\\n\\n  function currentLaunch() external view returns (uint256) {\\n    return _currentLaunch;\\n  }\\n\\n  function openForBurning() external view returns (bool) {\\n    return _openForBurning;\\n  }\\n\\n  function setBurningState(bool _state) external onlyOwner {\\n    require(_openForBurning != _state, \\\"Invalid State\\\");\\n    _openForBurning = _state;\\n  }\\n\\n  function setCurrentLaunch(uint256 _launch) external onlyOwner {\\n    require(_currentLaunch \\u003c _launch, \\\"Invalud Launch Number\\\");\\n    _currentLaunch = _launch;\\n  }\\n\\n  function setFundAddress(address _address, bool _state) external onlyOwner {\\n    require(_address != address(0), \\\"Invalid Address\\\");\\n\\n    if (fundAddresses[_address] != _state) {\\n      fundAddresses[_address] = _state;\\n    }\\n  }\\n\\n  function lastClaimedByAddress(address _address) external view returns (uint256) {\\n    return _lastClaimedByAddress[_address];\\n  }\\n\\n  function burntOreByAddress(address _address, uint256 _launch) external view returns (uint256) {\\n    return _burntOreByAddress[_address][_launch];\\n  }\\n\\n  function totalBurntOreByLaunch(uint256 _launch) external view returns (uint256) {\\n    return _totalBurntOreByLaunch[_launch];\\n  }\\n\\n  // Deposits ore to be burned\\n  function burnOre(uint256 _amount) external nonReentrant {\\n    require(_openForBurning, \\\"Not Open For Burning\\\");\\n    require(_amount \\u003e 0, \\\"Invalid Ore Amount\\\");\\n    require(ore.balanceOf(msg.sender) \\u003e= _amount, \\\"Insufficient Ore\\\");\\n\\n    ore.burn(msg.sender, _amount);\\n\\n    _burntOreByAddress[msg.sender][_currentLaunch] += _amount;\\n    _totalBurntOreByLaunch[_currentLaunch] += _amount;\\n  }\\n\\n  // Calculates and returns the total amount of claimable funds for the specified account\\n  function totalClaimableByAccount(address _account) public view returns (uint256, uint256) {\\n    uint256 totalClaimable = 0;\\n    uint256 lastClaimed = _lastClaimedByAddress[_account];\\n    uint256 lastAvailableClaim = 0;\\n    for (uint256 i = lastClaimed + 1; i \\u003c= _currentLaunch ; i++) {\\n      if (_totalBurntOreByLaunch[i] == 0 || _totalFundsByLaunch[i] == 0) {\\n        continue;\\n      }\\n\\n      lastAvailableClaim = i;\\n\\n      uint256 claimable = (_burntOreByAddress[_account][i] * _totalFundsByLaunch[i]) / _totalBurntOreByLaunch[i];\\n\\n      if (claimable \\u003e 0) {\\n        totalClaimable += claimable;\\n      }\\n    }\\n\\n    return (totalClaimable, lastAvailableClaim);\\n  }\\n\\n  // Can be called by collectors for claiming funds from the ore burning mechanism\\n  function claim() external nonReentrant {\\n    uint256 totalClaimable;\\n    uint256 lastAvailableClaim;\\n    (totalClaimable, lastAvailableClaim) = totalClaimableByAccount(msg.sender);\\n\\n    require(totalClaimable \\u003e 0, \\\"Insufficient Claimable Funds\\\");\\n    _lastClaimedByAddress[msg.sender] = lastAvailableClaim;\\n\\n    payable(msg.sender).transfer(totalClaimable);\\n  }\\n\\n  // Handles funds received for the pool\\n  receive() external payable {\\n    // Make sure enough funds are sent, and the source is whitelisted\\n    require(msg.value \\u003e 0, \\\"Insufficient Funds\\\");\\n    require(fundAddresses[msg.sender], \\\"Invalid Fund Address\\\");\\n\\n    // Update the total received funds for the currently open launch\\n    _totalFundsByLaunch[_currentLaunch] += msg.value;\\n  }\\n}\\n\"},\"Context.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Provides information about the current execution context, including the\\n * sender of the transaction and its data. While these are generally available\\n * via msg.sender and msg.data, they should not be accessed in such a direct\\n * manner, since when dealing with meta-transactions the account sending and\\n * paying for execution may not be the actual sender (as far as an application\\n * is concerned).\\n *\\n * This contract is only required for intermediate, library-like contracts.\\n */\\nabstract contract Context {\\n    function _msgSender() internal view virtual returns (address) {\\n        return msg.sender;\\n    }\\n\\n    function _msgData() internal view virtual returns (bytes calldata) {\\n        return msg.data;\\n    }\\n}\\n\"},\"IOre.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.0;\\n\\n\\ninterface IOre {\\n  function balanceOf(address owner) external view returns (uint256);\\n  function mint(address account, uint256 amount) external;\\n  function burn(address account, uint256 amount) external;\\n}\\n\"},\"Ownable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"./Context.sol\\\";\\n\\n/**\\n * @dev Contract module which provides a basic access control mechanism, where\\n * there is an account (an owner) that can be granted exclusive access to\\n * specific functions.\\n *\\n * By default, the owner account will be the one that deploys the contract. This\\n * can later be changed with {transferOwnership}.\\n *\\n * This module is used through inheritance. It will make available the modifier\\n * `onlyOwner`, which can be applied to your functions to restrict their use to\\n * the owner.\\n */\\nabstract contract Ownable is Context {\\n    address private _owner;\\n\\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\\n\\n    /**\\n     * @dev Initializes the contract setting the deployer as the initial owner.\\n     */\\n    constructor() {\\n        _setOwner(_msgSender());\\n    }\\n\\n    /**\\n     * @dev Returns the address of the current owner.\\n     */\\n    function owner() public view virtual returns (address) {\\n        return _owner;\\n    }\\n\\n    /**\\n     * @dev Throws if called by any account other than the owner.\\n     */\\n    modifier onlyOwner() {\\n        require(owner() == _msgSender(), \\\"Ownable: caller is not the owner\\\");\\n        _;\\n    }\\n\\n    /**\\n     * @dev Leaves the contract without owner. It will not be possible to call\\n     * `onlyOwner` functions anymore. Can only be called by the current owner.\\n     *\\n     * NOTE: Renouncing ownership will leave the contract without an owner,\\n     * thereby removing any functionality that is only available to the owner.\\n     */\\n    function renounceOwnership() public virtual onlyOwner {\\n        _setOwner(address(0));\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Can only be called by the current owner.\\n     */\\n    function transferOwnership(address newOwner) public virtual onlyOwner {\\n        require(newOwner != address(0), \\\"Ownable: new owner is the zero address\\\");\\n        _setOwner(newOwner);\\n    }\\n\\n    function _setOwner(address newOwner) private {\\n        address oldOwner = _owner;\\n        _owner = newOwner;\\n        emit OwnershipTransferred(oldOwner, newOwner);\\n    }\\n}\\n\"},\"ReentrancyGuard.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Contract module that helps prevent reentrant calls to a function.\\n *\\n * Inheriting from `ReentrancyGuard` will make the {nonReentrant} modifier\\n * available, which can be applied to functions to make sure there are no nested\\n * (reentrant) calls to them.\\n *\\n * Note that because there is a single `nonReentrant` guard, functions marked as\\n * `nonReentrant` may not call one another. This can be worked around by making\\n * those functions `private`, and then adding `external` `nonReentrant` entry\\n * points to them.\\n *\\n * TIP: If you would like to learn more about reentrancy and alternative ways\\n * to protect against it, check out our blog post\\n * https://blog.openzeppelin.com/reentrancy-after-istanbul/[Reentrancy After Istanbul].\\n */\\nabstract contract ReentrancyGuard {\\n    // Booleans are more expensive than uint256 or any type that takes up a full\\n    // word because each write operation emits an extra SLOAD to first read the\\n    // slot\\u0027s contents, replace the bits taken up by the boolean, and then write\\n    // back. This is the compiler\\u0027s defense against contract upgrades and\\n    // pointer aliasing, and it cannot be disabled.\\n\\n    // The values being non-zero value makes deployment a bit more expensive,\\n    // but in exchange the refund on every call to nonReentrant will be lower in\\n    // amount. Since refunds are capped to a percentage of the total\\n    // transaction\\u0027s gas, it is best to keep them low in cases like this one, to\\n    // increase the likelihood of the full refund coming into effect.\\n    uint256 private constant _NOT_ENTERED = 1;\\n    uint256 private constant _ENTERED = 2;\\n\\n    uint256 private _status;\\n\\n    constructor() {\\n        _status = _NOT_ENTERED;\\n    }\\n\\n    /**\\n     * @dev Prevents a contract from calling itself, directly or indirectly.\\n     * Calling a `nonReentrant` function from another `nonReentrant`\\n     * function is not supported. It is possible to prevent this from happening\\n     * by making the `nonReentrant` function external, and make it call a\\n     * `private` function that does the actual work.\\n     */\\n    modifier nonReentrant() {\\n        // On the first call to nonReentrant, _notEntered will be true\\n        require(_status != _ENTERED, \\\"ReentrancyGuard: reentrant call\\\");\\n\\n        // Any calls to nonReentrant after this point will fail\\n        _status = _ENTERED;\\n\\n        _;\\n\\n        // By storing the original value once again, a refund is triggered (see\\n        // https://eips.ethereum.org/EIPS/eip-2200)\\n        _status = _NOT_ENTERED;\\n    }\\n}\\n\"}}","ABI":"[{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_ore\",\"type\":\"address\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"burnOre\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_address\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_launch\",\"type\":\"uint256\"}],\"name\":\"burntOreByAddress\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"claim\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"currentLaunch\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"fundAddresses\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_address\",\"type\":\"address\"}],\"name\":\"lastClaimedByAddress\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"openForBurning\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"ore\",\"outputs\":[{\"internalType\":\"contract IOre\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bool\",\"name\":\"_state\",\"type\":\"bool\"}],\"name\":\"setBurningState\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_launch\",\"type\":\"uint256\"}],\"name\":\"setCurrentLaunch\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_address\",\"type\":\"address\"},{\"internalType\":\"bool\",\"name\":\"_state\",\"type\":\"bool\"}],\"name\":\"setFundAddress\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_launch\",\"type\":\"uint256\"}],\"name\":\"totalBurntOreByLaunch\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_account\",\"type\":\"address\"}],\"name\":\"totalClaimableByAccount\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"stateMutability\":\"payable\",\"type\":\"receive\"}]","ContractName":"CollectorPool","CompilerVersion":"v0.8.9+commit.e5eed63a","OptimizationUsed":"1","Runs":"1000","ConstructorArguments":"000000000000000000000000c40107e23c285d9cc9759f7c656805d6e5c88a3c","EVMVersion":"Default","Library":"","LicenseType":"None","Proxy":"0","Implementation":"","SwarmSource":"ipfs://d4eab5c9b88fba07fc22705582152b2c1997f365dfeb3e7921514e10b2e0d236"}]}