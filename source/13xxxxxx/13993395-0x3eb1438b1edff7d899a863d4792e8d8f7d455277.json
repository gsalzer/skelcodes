{"status":"1","message":"OK","result":[{"SourceCode":"// Sources flattened with hardhat v2.7.1 https://hardhat.org\r\n\r\n// File @openzeppelin/contracts/utils/Context.sol@v4.4.1\r\n\r\n// OpenZeppelin Contracts v4.4.1 (utils/Context.sol)\r\n// SPDX-License-Identifier: BlueOak-1.0.0\r\n\r\npragma solidity 0.8.4;\r\n\r\n/**\r\n * @dev Provides information about the current execution context, including the\r\n * sender of the transaction and its data. While these are generally available\r\n * via msg.sender and msg.data, they should not be accessed in such a direct\r\n * manner, since when dealing with meta-transactions the account sending and\r\n * paying for execution may not be the actual sender (as far as an application\r\n * is concerned).\r\n *\r\n * This contract is only required for intermediate, library-like contracts.\r\n */\r\nabstract contract Context {\r\n    function _msgSender() internal view virtual returns (address) {\r\n        return msg.sender;\r\n    }\r\n\r\n    function _msgData() internal view virtual returns (bytes calldata) {\r\n        return msg.data;\r\n    }\r\n}\r\n\r\n// File @openzeppelin/contracts/access/Ownable.sol@v4.4.1\r\n\r\n// OpenZeppelin Contracts v4.4.1 (access/Ownable.sol)\r\n\r\n/**\r\n * @dev Contract module which provides a basic access control mechanism, where\r\n * there is an account (an owner) that can be granted exclusive access to\r\n * specific functions.\r\n *\r\n * By default, the owner account will be the one that deploys the contract. This\r\n * can later be changed with {transferOwnership}.\r\n *\r\n * This module is used through inheritance. It will make available the modifier\r\n * `onlyOwner`, which can be applied to your functions to restrict their use to\r\n * the owner.\r\n */\r\nabstract contract Ownable is Context {\r\n    address private _owner;\r\n\r\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\r\n\r\n    /**\r\n     * @dev Initializes the contract setting the deployer as the initial owner.\r\n     */\r\n    constructor() {\r\n        _transferOwnership(_msgSender());\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the address of the current owner.\r\n     */\r\n    function owner() public view virtual returns (address) {\r\n        return _owner;\r\n    }\r\n\r\n    /**\r\n     * @dev Throws if called by any account other than the owner.\r\n     */\r\n    modifier onlyOwner() {\r\n        require(owner() == _msgSender(), \"Ownable: caller is not the owner\");\r\n        _;\r\n    }\r\n\r\n    /**\r\n     * @dev Leaves the contract without owner. It will not be possible to call\r\n     * `onlyOwner` functions anymore. Can only be called by the current owner.\r\n     *\r\n     * NOTE: Renouncing ownership will leave the contract without an owner,\r\n     * thereby removing any functionality that is only available to the owner.\r\n     */\r\n    function renounceOwnership() public virtual onlyOwner {\r\n        _transferOwnership(address(0));\r\n    }\r\n\r\n    /**\r\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\r\n     * Can only be called by the current owner.\r\n     */\r\n    function transferOwnership(address newOwner) public virtual onlyOwner {\r\n        require(newOwner != address(0), \"Ownable: new owner is the zero address\");\r\n        _transferOwnership(newOwner);\r\n    }\r\n\r\n    /**\r\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\r\n     * Internal function without access restriction.\r\n     */\r\n    function _transferOwnership(address newOwner) internal virtual {\r\n        address oldOwner = _owner;\r\n        _owner = newOwner;\r\n        emit OwnershipTransferred(oldOwner, newOwner);\r\n    }\r\n}\r\n\r\n// File contracts/Spell.sol\r\n\r\n/**\r\n * @title Spell\r\n * @dev A one-time-use atomic sequence of actions, hasBeenCast by RSR for contract changes.\r\n */\r\nabstract contract Spell {\r\n    address public immutable rsrAddr;\r\n\r\n    bool public hasBeenCast;\r\n\r\n    constructor(address rsr_) {\r\n        rsrAddr = rsr_;\r\n    }\r\n\r\n    function cast() external {\r\n        require(msg.sender == rsrAddr, \"rsr only\");\r\n        require(!hasBeenCast, \"spell already cast\");\r\n        hasBeenCast = true;\r\n        spell();\r\n    }\r\n\r\n    /// A derived Spell overrides spell() to enact its intended effects.\r\n    function spell() internal virtual;\r\n}\r\n\r\n// File contracts/Enchantable.sol\r\n\r\n/**\r\n * @title Enchantable\r\n * @dev A very simple mixin that enables the spell-casting pattern.\r\n */\r\nabstract contract Enchantable is Ownable {\r\n    address private _mage;\r\n\r\n    event MageChanged(address oldMage, address newMage);\r\n    event SpellCast(address indexed addr);\r\n\r\n    modifier onlyAdmin() {\r\n        require(_msgSender() == _mage || _msgSender() == owner(), \"only mage or owner\");\r\n        _;\r\n    }\r\n\r\n    /// At the end of a transaction, mage() should *always* be 0!\r\n    function mage() public view returns (address) {\r\n        return _mage;\r\n    }\r\n\r\n    /// Grants mage to a Spell, casts the spell, and restore mage\r\n    function castSpell(Spell spell) external onlyOwner {\r\n        _grantMage(address(spell));\r\n        spell.cast();\r\n        _grantMage(address(0));\r\n        emit SpellCast(address(spell));\r\n    }\r\n\r\n    function _grantMage(address mage_) private {\r\n        emit MageChanged(_mage, mage_);\r\n        _mage = mage_;\r\n    }\r\n}\r\n\r\n// File @openzeppelin/contracts/utils/structs/EnumerableSet.sol@v4.4.1\r\n\r\n// OpenZeppelin Contracts v4.4.1 (utils/structs/EnumerableSet.sol)\r\n\r\n/**\r\n * @dev Library for managing\r\n * https://en.wikipedia.org/wiki/Set_(abstract_data_type)[sets] of primitive\r\n * types.\r\n *\r\n * Sets have the following properties:\r\n *\r\n * - Elements are added, removed, and checked for existence in constant time\r\n * (O(1)).\r\n * - Elements are enumerated in O(n). No guarantees are made on the ordering.\r\n *\r\n * ```\r\n * contract Example {\r\n *     // Add the library methods\r\n *     using EnumerableSet for EnumerableSet.AddressSet;\r\n *\r\n *     // Declare a set state variable\r\n *     EnumerableSet.AddressSet private mySet;\r\n * }\r\n * ```\r\n *\r\n * As of v3.3.0, sets of type `bytes32` (`Bytes32Set`), `address` (`AddressSet`)\r\n * and `uint256` (`UintSet`) are supported.\r\n */\r\nlibrary EnumerableSet {\r\n    // To implement this library for multiple types with as little code\r\n    // repetition as possible, we write it in terms of a generic Set type with\r\n    // bytes32 values.\r\n    // The Set implementation uses private functions, and user-facing\r\n    // implementations (such as AddressSet) are just wrappers around the\r\n    // underlying Set.\r\n    // This means that we can only create new EnumerableSets for types that fit\r\n    // in bytes32.\r\n\r\n    struct Set {\r\n        // Storage of set values\r\n        bytes32[] _values;\r\n        // Position of the value in the `values` array, plus 1 because index 0\r\n        // means a value is not in the set.\r\n        mapping(bytes32 => uint256) _indexes;\r\n    }\r\n\r\n    /**\r\n     * @dev Add a value to a set. O(1).\r\n     *\r\n     * Returns true if the value was added to the set, that is if it was not\r\n     * already present.\r\n     */\r\n    function _add(Set storage set, bytes32 value) private returns (bool) {\r\n        if (!_contains(set, value)) {\r\n            set._values.push(value);\r\n            // The value is stored at length-1, but we add 1 to all indexes\r\n            // and use 0 as a sentinel value\r\n            set._indexes[value] = set._values.length;\r\n            return true;\r\n        } else {\r\n            return false;\r\n        }\r\n    }\r\n\r\n    /**\r\n     * @dev Removes a value from a set. O(1).\r\n     *\r\n     * Returns true if the value was removed from the set, that is if it was\r\n     * present.\r\n     */\r\n    function _remove(Set storage set, bytes32 value) private returns (bool) {\r\n        // We read and store the value's index to prevent multiple reads from the same storage slot\r\n        uint256 valueIndex = set._indexes[value];\r\n\r\n        if (valueIndex != 0) {\r\n            // Equivalent to contains(set, value)\r\n            // To delete an element from the _values array in O(1), we swap the element to delete with the last one in\r\n            // the array, and then remove the last element (sometimes called as 'swap and pop').\r\n            // This modifies the order of the array, as noted in {at}.\r\n\r\n            uint256 toDeleteIndex = valueIndex - 1;\r\n            uint256 lastIndex = set._values.length - 1;\r\n\r\n            if (lastIndex != toDeleteIndex) {\r\n                bytes32 lastvalue = set._values[lastIndex];\r\n\r\n                // Move the last value to the index where the value to delete is\r\n                set._values[toDeleteIndex] = lastvalue;\r\n                // Update the index for the moved value\r\n                set._indexes[lastvalue] = valueIndex; // Replace lastvalue's index to valueIndex\r\n            }\r\n\r\n            // Delete the slot where the moved value was stored\r\n            set._values.pop();\r\n\r\n            // Delete the index for the deleted slot\r\n            delete set._indexes[value];\r\n\r\n            return true;\r\n        } else {\r\n            return false;\r\n        }\r\n    }\r\n\r\n    /**\r\n     * @dev Returns true if the value is in the set. O(1).\r\n     */\r\n    function _contains(Set storage set, bytes32 value) private view returns (bool) {\r\n        return set._indexes[value] != 0;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the number of values on the set. O(1).\r\n     */\r\n    function _length(Set storage set) private view returns (uint256) {\r\n        return set._values.length;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the value stored at position `index` in the set. O(1).\r\n     *\r\n     * Note that there are no guarantees on the ordering of values inside the\r\n     * array, and it may change when more values are added or removed.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - `index` must be strictly less than {length}.\r\n     */\r\n    function _at(Set storage set, uint256 index) private view returns (bytes32) {\r\n        return set._values[index];\r\n    }\r\n\r\n    /**\r\n     * @dev Return the entire set in an array\r\n     *\r\n     * WARNING: This operation will copy the entire storage to memory, which can be quite expensive. This is designed\r\n     * to mostly be used by view accessors that are queried without any gas fees. Developers should keep in mind that\r\n     * this function has an unbounded cost, and using it as part of a state-changing function may render the function\r\n     * uncallable if the set grows to a point where copying to memory consumes too much gas to fit in a block.\r\n     */\r\n    function _values(Set storage set) private view returns (bytes32[] memory) {\r\n        return set._values;\r\n    }\r\n\r\n    // Bytes32Set\r\n\r\n    struct Bytes32Set {\r\n        Set _inner;\r\n    }\r\n\r\n    /**\r\n     * @dev Add a value to a set. O(1).\r\n     *\r\n     * Returns true if the value was added to the set, that is if it was not\r\n     * already present.\r\n     */\r\n    function add(Bytes32Set storage set, bytes32 value) internal returns (bool) {\r\n        return _add(set._inner, value);\r\n    }\r\n\r\n    /**\r\n     * @dev Removes a value from a set. O(1).\r\n     *\r\n     * Returns true if the value was removed from the set, that is if it was\r\n     * present.\r\n     */\r\n    function remove(Bytes32Set storage set, bytes32 value) internal returns (bool) {\r\n        return _remove(set._inner, value);\r\n    }\r\n\r\n    /**\r\n     * @dev Returns true if the value is in the set. O(1).\r\n     */\r\n    function contains(Bytes32Set storage set, bytes32 value) internal view returns (bool) {\r\n        return _contains(set._inner, value);\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the number of values in the set. O(1).\r\n     */\r\n    function length(Bytes32Set storage set) internal view returns (uint256) {\r\n        return _length(set._inner);\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the value stored at position `index` in the set. O(1).\r\n     *\r\n     * Note that there are no guarantees on the ordering of values inside the\r\n     * array, and it may change when more values are added or removed.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - `index` must be strictly less than {length}.\r\n     */\r\n    function at(Bytes32Set storage set, uint256 index) internal view returns (bytes32) {\r\n        return _at(set._inner, index);\r\n    }\r\n\r\n    /**\r\n     * @dev Return the entire set in an array\r\n     *\r\n     * WARNING: This operation will copy the entire storage to memory, which can be quite expensive. This is designed\r\n     * to mostly be used by view accessors that are queried without any gas fees. Developers should keep in mind that\r\n     * this function has an unbounded cost, and using it as part of a state-changing function may render the function\r\n     * uncallable if the set grows to a point where copying to memory consumes too much gas to fit in a block.\r\n     */\r\n    function values(Bytes32Set storage set) internal view returns (bytes32[] memory) {\r\n        return _values(set._inner);\r\n    }\r\n\r\n    // AddressSet\r\n\r\n    struct AddressSet {\r\n        Set _inner;\r\n    }\r\n\r\n    /**\r\n     * @dev Add a value to a set. O(1).\r\n     *\r\n     * Returns true if the value was added to the set, that is if it was not\r\n     * already present.\r\n     */\r\n    function add(AddressSet storage set, address value) internal returns (bool) {\r\n        return _add(set._inner, bytes32(uint256(uint160(value))));\r\n    }\r\n\r\n    /**\r\n     * @dev Removes a value from a set. O(1).\r\n     *\r\n     * Returns true if the value was removed from the set, that is if it was\r\n     * present.\r\n     */\r\n    function remove(AddressSet storage set, address value) internal returns (bool) {\r\n        return _remove(set._inner, bytes32(uint256(uint160(value))));\r\n    }\r\n\r\n    /**\r\n     * @dev Returns true if the value is in the set. O(1).\r\n     */\r\n    function contains(AddressSet storage set, address value) internal view returns (bool) {\r\n        return _contains(set._inner, bytes32(uint256(uint160(value))));\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the number of values in the set. O(1).\r\n     */\r\n    function length(AddressSet storage set) internal view returns (uint256) {\r\n        return _length(set._inner);\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the value stored at position `index` in the set. O(1).\r\n     *\r\n     * Note that there are no guarantees on the ordering of values inside the\r\n     * array, and it may change when more values are added or removed.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - `index` must be strictly less than {length}.\r\n     */\r\n    function at(AddressSet storage set, uint256 index) internal view returns (address) {\r\n        return address(uint160(uint256(_at(set._inner, index))));\r\n    }\r\n\r\n    /**\r\n     * @dev Return the entire set in an array\r\n     *\r\n     * WARNING: This operation will copy the entire storage to memory, which can be quite expensive. This is designed\r\n     * to mostly be used by view accessors that are queried without any gas fees. Developers should keep in mind that\r\n     * this function has an unbounded cost, and using it as part of a state-changing function may render the function\r\n     * uncallable if the set grows to a point where copying to memory consumes too much gas to fit in a block.\r\n     */\r\n    function values(AddressSet storage set) internal view returns (address[] memory) {\r\n        bytes32[] memory store = _values(set._inner);\r\n        address[] memory result;\r\n\r\n        assembly {\r\n            result := store\r\n        }\r\n\r\n        return result;\r\n    }\r\n\r\n    // UintSet\r\n\r\n    struct UintSet {\r\n        Set _inner;\r\n    }\r\n\r\n    /**\r\n     * @dev Add a value to a set. O(1).\r\n     *\r\n     * Returns true if the value was added to the set, that is if it was not\r\n     * already present.\r\n     */\r\n    function add(UintSet storage set, uint256 value) internal returns (bool) {\r\n        return _add(set._inner, bytes32(value));\r\n    }\r\n\r\n    /**\r\n     * @dev Removes a value from a set. O(1).\r\n     *\r\n     * Returns true if the value was removed from the set, that is if it was\r\n     * present.\r\n     */\r\n    function remove(UintSet storage set, uint256 value) internal returns (bool) {\r\n        return _remove(set._inner, bytes32(value));\r\n    }\r\n\r\n    /**\r\n     * @dev Returns true if the value is in the set. O(1).\r\n     */\r\n    function contains(UintSet storage set, uint256 value) internal view returns (bool) {\r\n        return _contains(set._inner, bytes32(value));\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the number of values on the set. O(1).\r\n     */\r\n    function length(UintSet storage set) internal view returns (uint256) {\r\n        return _length(set._inner);\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the value stored at position `index` in the set. O(1).\r\n     *\r\n     * Note that there are no guarantees on the ordering of values inside the\r\n     * array, and it may change when more values are added or removed.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - `index` must be strictly less than {length}.\r\n     */\r\n    function at(UintSet storage set, uint256 index) internal view returns (uint256) {\r\n        return uint256(_at(set._inner, index));\r\n    }\r\n\r\n    /**\r\n     * @dev Return the entire set in an array\r\n     *\r\n     * WARNING: This operation will copy the entire storage to memory, which can be quite expensive. This is designed\r\n     * to mostly be used by view accessors that are queried without any gas fees. Developers should keep in mind that\r\n     * this function has an unbounded cost, and using it as part of a state-changing function may render the function\r\n     * uncallable if the set grows to a point where copying to memory consumes too much gas to fit in a block.\r\n     */\r\n    function values(UintSet storage set) internal view returns (uint256[] memory) {\r\n        bytes32[] memory store = _values(set._inner);\r\n        uint256[] memory result;\r\n\r\n        assembly {\r\n            result := store\r\n        }\r\n\r\n        return result;\r\n    }\r\n}\r\n\r\n// File @openzeppelin/contracts/token/ERC20/extensions/draft-IERC20Permit.sol@v4.4.1\r\n\r\n// OpenZeppelin Contracts v4.4.1 (token/ERC20/extensions/draft-IERC20Permit.sol)\r\n\r\n/**\r\n * @dev Interface of the ERC20 Permit extension allowing approvals to be made via signatures, as defined in\r\n * https://eips.ethereum.org/EIPS/eip-2612[EIP-2612].\r\n *\r\n * Adds the {permit} method, which can be used to change an account's ERC20 allowance (see {IERC20-allowance}) by\r\n * presenting a message signed by the account. By not relying on {IERC20-approve}, the token holder account doesn't\r\n * need to send a transaction, and thus is not required to hold Ether at all.\r\n */\r\ninterface IERC20Permit {\r\n    /**\r\n     * @dev Sets `value` as the allowance of `spender` over ``owner``'s tokens,\r\n     * given ``owner``'s signed approval.\r\n     *\r\n     * IMPORTANT: The same issues {IERC20-approve} has related to transaction\r\n     * ordering also apply here.\r\n     *\r\n     * Emits an {Approval} event.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - `spender` cannot be the zero address.\r\n     * - `deadline` must be a timestamp in the future.\r\n     * - `v`, `r` and `s` must be a valid `secp256k1` signature from `owner`\r\n     * over the EIP712-formatted function arguments.\r\n     * - the signature must use ``owner``'s current nonce (see {nonces}).\r\n     *\r\n     * For more information on the signature format, see the\r\n     * https://eips.ethereum.org/EIPS/eip-2612#specification[relevant EIP\r\n     * section].\r\n     */\r\n    function permit(\r\n        address owner,\r\n        address spender,\r\n        uint256 value,\r\n        uint256 deadline,\r\n        uint8 v,\r\n        bytes32 r,\r\n        bytes32 s\r\n    ) external;\r\n\r\n    /**\r\n     * @dev Returns the current nonce for `owner`. This value must be\r\n     * included whenever a signature is generated for {permit}.\r\n     *\r\n     * Every successful call to {permit} increases ``owner``'s nonce by one. This\r\n     * prevents a signature from being used multiple times.\r\n     */\r\n    function nonces(address owner) external view returns (uint256);\r\n\r\n    /**\r\n     * @dev Returns the domain separator used in the encoding of the signature for {permit}, as defined by {EIP712}.\r\n     */\r\n    // solhint-disable-next-line func-name-mixedcase\r\n    function DOMAIN_SEPARATOR() external view returns (bytes32);\r\n}\r\n\r\n// File @openzeppelin/contracts/token/ERC20/IERC20.sol@v4.4.1\r\n\r\n// OpenZeppelin Contracts v4.4.1 (token/ERC20/IERC20.sol)\r\n\r\n/**\r\n * @dev Interface of the ERC20 standard as defined in the EIP.\r\n */\r\ninterface IERC20 {\r\n    /**\r\n     * @dev Returns the amount of tokens in existence.\r\n     */\r\n    function totalSupply() external view returns (uint256);\r\n\r\n    /**\r\n     * @dev Returns the amount of tokens owned by `account`.\r\n     */\r\n    function balanceOf(address account) external view returns (uint256);\r\n\r\n    /**\r\n     * @dev Moves `amount` tokens from the caller's account to `recipient`.\r\n     *\r\n     * Returns a boolean value indicating whether the operation succeeded.\r\n     *\r\n     * Emits a {Transfer} event.\r\n     */\r\n    function transfer(address recipient, uint256 amount) external returns (bool);\r\n\r\n    /**\r\n     * @dev Returns the remaining number of tokens that `spender` will be\r\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\r\n     * zero by default.\r\n     *\r\n     * This value changes when {approve} or {transferFrom} are called.\r\n     */\r\n    function allowance(address owner, address spender) external view returns (uint256);\r\n\r\n    /**\r\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\r\n     *\r\n     * Returns a boolean value indicating whether the operation succeeded.\r\n     *\r\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\r\n     * that someone may use both the old and the new allowance by unfortunate\r\n     * transaction ordering. One possible solution to mitigate this race\r\n     * condition is to first reduce the spender's allowance to 0 and set the\r\n     * desired value afterwards:\r\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\r\n     *\r\n     * Emits an {Approval} event.\r\n     */\r\n    function approve(address spender, uint256 amount) external returns (bool);\r\n\r\n    /**\r\n     * @dev Moves `amount` tokens from `sender` to `recipient` using the\r\n     * allowance mechanism. `amount` is then deducted from the caller's\r\n     * allowance.\r\n     *\r\n     * Returns a boolean value indicating whether the operation succeeded.\r\n     *\r\n     * Emits a {Transfer} event.\r\n     */\r\n    function transferFrom(\r\n        address sender,\r\n        address recipient,\r\n        uint256 amount\r\n    ) external returns (bool);\r\n\r\n    /**\r\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\r\n     * another (`to`).\r\n     *\r\n     * Note that `value` may be zero.\r\n     */\r\n    event Transfer(address indexed from, address indexed to, uint256 value);\r\n\r\n    /**\r\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\r\n     * a call to {approve}. `value` is the new allowance.\r\n     */\r\n    event Approval(address indexed owner, address indexed spender, uint256 value);\r\n}\r\n\r\n// File @openzeppelin/contracts/token/ERC20/extensions/IERC20Metadata.sol@v4.4.1\r\n\r\n// OpenZeppelin Contracts v4.4.1 (token/ERC20/extensions/IERC20Metadata.sol)\r\n\r\n/**\r\n * @dev Interface for the optional metadata functions from the ERC20 standard.\r\n *\r\n * _Available since v4.1._\r\n */\r\ninterface IERC20Metadata is IERC20 {\r\n    /**\r\n     * @dev Returns the name of the token.\r\n     */\r\n    function name() external view returns (string memory);\r\n\r\n    /**\r\n     * @dev Returns the symbol of the token.\r\n     */\r\n    function symbol() external view returns (string memory);\r\n\r\n    /**\r\n     * @dev Returns the decimals places of the token.\r\n     */\r\n    function decimals() external view returns (uint8);\r\n}\r\n\r\n// File @openzeppelin/contracts/token/ERC20/ERC20.sol@v4.4.1\r\n\r\n// OpenZeppelin Contracts v4.4.1 (token/ERC20/ERC20.sol)\r\n\r\n/**\r\n * @dev Implementation of the {IERC20} interface.\r\n *\r\n * This implementation is agnostic to the way tokens are created. This means\r\n * that a supply mechanism has to be added in a derived contract using {_mint}.\r\n * For a generic mechanism see {ERC20PresetMinterPauser}.\r\n *\r\n * TIP: For a detailed writeup see our guide\r\n * https://forum.zeppelin.solutions/t/how-to-implement-erc20-supply-mechanisms/226[How\r\n * to implement supply mechanisms].\r\n *\r\n * We have followed general OpenZeppelin Contracts guidelines: functions revert\r\n * instead returning `false` on failure. This behavior is nonetheless\r\n * conventional and does not conflict with the expectations of ERC20\r\n * applications.\r\n *\r\n * Additionally, an {Approval} event is emitted on calls to {transferFrom}.\r\n * This allows applications to reconstruct the allowance for all accounts just\r\n * by listening to said events. Other implementations of the EIP may not emit\r\n * these events, as it isn't required by the specification.\r\n *\r\n * Finally, the non-standard {decreaseAllowance} and {increaseAllowance}\r\n * functions have been added to mitigate the well-known issues around setting\r\n * allowances. See {IERC20-approve}.\r\n */\r\ncontract ERC20 is Context, IERC20, IERC20Metadata {\r\n    mapping(address => uint256) private _balances;\r\n\r\n    mapping(address => mapping(address => uint256)) private _allowances;\r\n\r\n    uint256 private _totalSupply;\r\n\r\n    string private _name;\r\n    string private _symbol;\r\n\r\n    /**\r\n     * @dev Sets the values for {name} and {symbol}.\r\n     *\r\n     * The default value of {decimals} is 18. To select a different value for\r\n     * {decimals} you should overload it.\r\n     *\r\n     * All two of these values are immutable: they can only be set once during\r\n     * construction.\r\n     */\r\n    constructor(string memory name_, string memory symbol_) {\r\n        _name = name_;\r\n        _symbol = symbol_;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the name of the token.\r\n     */\r\n    function name() public view virtual override returns (string memory) {\r\n        return _name;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the symbol of the token, usually a shorter version of the\r\n     * name.\r\n     */\r\n    function symbol() public view virtual override returns (string memory) {\r\n        return _symbol;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the number of decimals used to get its user representation.\r\n     * For example, if `decimals` equals `2`, a balance of `505` tokens should\r\n     * be displayed to a user as `5.05` (`505 / 10 ** 2`).\r\n     *\r\n     * Tokens usually opt for a value of 18, imitating the relationship between\r\n     * Ether and Wei. This is the value {ERC20} uses, unless this function is\r\n     * overridden;\r\n     *\r\n     * NOTE: This information is only used for _display_ purposes: it in\r\n     * no way affects any of the arithmetic of the contract, including\r\n     * {IERC20-balanceOf} and {IERC20-transfer}.\r\n     */\r\n    function decimals() public view virtual override returns (uint8) {\r\n        return 18;\r\n    }\r\n\r\n    /**\r\n     * @dev See {IERC20-totalSupply}.\r\n     */\r\n    function totalSupply() public view virtual override returns (uint256) {\r\n        return _totalSupply;\r\n    }\r\n\r\n    /**\r\n     * @dev See {IERC20-balanceOf}.\r\n     */\r\n    function balanceOf(address account) public view virtual override returns (uint256) {\r\n        return _balances[account];\r\n    }\r\n\r\n    /**\r\n     * @dev See {IERC20-transfer}.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - `recipient` cannot be the zero address.\r\n     * - the caller must have a balance of at least `amount`.\r\n     */\r\n    function transfer(address recipient, uint256 amount) public virtual override returns (bool) {\r\n        _transfer(_msgSender(), recipient, amount);\r\n        return true;\r\n    }\r\n\r\n    /**\r\n     * @dev See {IERC20-allowance}.\r\n     */\r\n    function allowance(address owner, address spender)\r\n        public\r\n        view\r\n        virtual\r\n        override\r\n        returns (uint256)\r\n    {\r\n        return _allowances[owner][spender];\r\n    }\r\n\r\n    /**\r\n     * @dev See {IERC20-approve}.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - `spender` cannot be the zero address.\r\n     */\r\n    function approve(address spender, uint256 amount) public virtual override returns (bool) {\r\n        _approve(_msgSender(), spender, amount);\r\n        return true;\r\n    }\r\n\r\n    /**\r\n     * @dev See {IERC20-transferFrom}.\r\n     *\r\n     * Emits an {Approval} event indicating the updated allowance. This is not\r\n     * required by the EIP. See the note at the beginning of {ERC20}.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - `sender` and `recipient` cannot be the zero address.\r\n     * - `sender` must have a balance of at least `amount`.\r\n     * - the caller must have allowance for ``sender``'s tokens of at least\r\n     * `amount`.\r\n     */\r\n    function transferFrom(\r\n        address sender,\r\n        address recipient,\r\n        uint256 amount\r\n    ) public virtual override returns (bool) {\r\n        _transfer(sender, recipient, amount);\r\n\r\n        uint256 currentAllowance = _allowances[sender][_msgSender()];\r\n        require(currentAllowance >= amount, \"ERC20: transfer amount exceeds allowance\");\r\n        unchecked {\r\n            _approve(sender, _msgSender(), currentAllowance - amount);\r\n        }\r\n\r\n        return true;\r\n    }\r\n\r\n    /**\r\n     * @dev Atomically increases the allowance granted to `spender` by the caller.\r\n     *\r\n     * This is an alternative to {approve} that can be used as a mitigation for\r\n     * problems described in {IERC20-approve}.\r\n     *\r\n     * Emits an {Approval} event indicating the updated allowance.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - `spender` cannot be the zero address.\r\n     */\r\n    function increaseAllowance(address spender, uint256 addedValue) public virtual returns (bool) {\r\n        _approve(_msgSender(), spender, _allowances[_msgSender()][spender] + addedValue);\r\n        return true;\r\n    }\r\n\r\n    /**\r\n     * @dev Atomically decreases the allowance granted to `spender` by the caller.\r\n     *\r\n     * This is an alternative to {approve} that can be used as a mitigation for\r\n     * problems described in {IERC20-approve}.\r\n     *\r\n     * Emits an {Approval} event indicating the updated allowance.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - `spender` cannot be the zero address.\r\n     * - `spender` must have allowance for the caller of at least\r\n     * `subtractedValue`.\r\n     */\r\n    function decreaseAllowance(address spender, uint256 subtractedValue)\r\n        public\r\n        virtual\r\n        returns (bool)\r\n    {\r\n        uint256 currentAllowance = _allowances[_msgSender()][spender];\r\n        require(currentAllowance >= subtractedValue, \"ERC20: decreased allowance below zero\");\r\n        unchecked {\r\n            _approve(_msgSender(), spender, currentAllowance - subtractedValue);\r\n        }\r\n\r\n        return true;\r\n    }\r\n\r\n    /**\r\n     * @dev Moves `amount` of tokens from `sender` to `recipient`.\r\n     *\r\n     * This internal function is equivalent to {transfer}, and can be used to\r\n     * e.g. implement automatic token fees, slashing mechanisms, etc.\r\n     *\r\n     * Emits a {Transfer} event.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - `sender` cannot be the zero address.\r\n     * - `recipient` cannot be the zero address.\r\n     * - `sender` must have a balance of at least `amount`.\r\n     */\r\n    function _transfer(\r\n        address sender,\r\n        address recipient,\r\n        uint256 amount\r\n    ) internal virtual {\r\n        require(sender != address(0), \"ERC20: transfer from the zero address\");\r\n        require(recipient != address(0), \"ERC20: transfer to the zero address\");\r\n\r\n        _beforeTokenTransfer(sender, recipient, amount);\r\n\r\n        uint256 senderBalance = _balances[sender];\r\n        require(senderBalance >= amount, \"ERC20: transfer amount exceeds balance\");\r\n        unchecked {\r\n            _balances[sender] = senderBalance - amount;\r\n        }\r\n        _balances[recipient] += amount;\r\n\r\n        emit Transfer(sender, recipient, amount);\r\n\r\n        _afterTokenTransfer(sender, recipient, amount);\r\n    }\r\n\r\n    /** @dev Creates `amount` tokens and assigns them to `account`, increasing\r\n     * the total supply.\r\n     *\r\n     * Emits a {Transfer} event with `from` set to the zero address.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - `account` cannot be the zero address.\r\n     */\r\n    function _mint(address account, uint256 amount) internal virtual {\r\n        require(account != address(0), \"ERC20: mint to the zero address\");\r\n\r\n        _beforeTokenTransfer(address(0), account, amount);\r\n\r\n        _totalSupply += amount;\r\n        _balances[account] += amount;\r\n        emit Transfer(address(0), account, amount);\r\n\r\n        _afterTokenTransfer(address(0), account, amount);\r\n    }\r\n\r\n    /**\r\n     * @dev Destroys `amount` tokens from `account`, reducing the\r\n     * total supply.\r\n     *\r\n     * Emits a {Transfer} event with `to` set to the zero address.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - `account` cannot be the zero address.\r\n     * - `account` must have at least `amount` tokens.\r\n     */\r\n    function _burn(address account, uint256 amount) internal virtual {\r\n        require(account != address(0), \"ERC20: burn from the zero address\");\r\n\r\n        _beforeTokenTransfer(account, address(0), amount);\r\n\r\n        uint256 accountBalance = _balances[account];\r\n        require(accountBalance >= amount, \"ERC20: burn amount exceeds balance\");\r\n        unchecked {\r\n            _balances[account] = accountBalance - amount;\r\n        }\r\n        _totalSupply -= amount;\r\n\r\n        emit Transfer(account, address(0), amount);\r\n\r\n        _afterTokenTransfer(account, address(0), amount);\r\n    }\r\n\r\n    /**\r\n     * @dev Sets `amount` as the allowance of `spender` over the `owner` s tokens.\r\n     *\r\n     * This internal function is equivalent to `approve`, and can be used to\r\n     * e.g. set automatic allowances for certain subsystems, etc.\r\n     *\r\n     * Emits an {Approval} event.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - `owner` cannot be the zero address.\r\n     * - `spender` cannot be the zero address.\r\n     */\r\n    function _approve(\r\n        address owner,\r\n        address spender,\r\n        uint256 amount\r\n    ) internal virtual {\r\n        require(owner != address(0), \"ERC20: approve from the zero address\");\r\n        require(spender != address(0), \"ERC20: approve to the zero address\");\r\n\r\n        _allowances[owner][spender] = amount;\r\n        emit Approval(owner, spender, amount);\r\n    }\r\n\r\n    /**\r\n     * @dev Hook that is called before any transfer of tokens. This includes\r\n     * minting and burning.\r\n     *\r\n     * Calling conditions:\r\n     *\r\n     * - when `from` and `to` are both non-zero, `amount` of ``from``'s tokens\r\n     * will be transferred to `to`.\r\n     * - when `from` is zero, `amount` tokens will be minted for `to`.\r\n     * - when `to` is zero, `amount` of ``from``'s tokens will be burned.\r\n     * - `from` and `to` are never both zero.\r\n     *\r\n     * To learn more about hooks, head to xref:ROOT:extending-contracts.adoc#using-hooks[Using Hooks].\r\n     */\r\n    function _beforeTokenTransfer(\r\n        address from,\r\n        address to,\r\n        uint256 amount\r\n    ) internal virtual {}\r\n\r\n    /**\r\n     * @dev Hook that is called after any transfer of tokens. This includes\r\n     * minting and burning.\r\n     *\r\n     * Calling conditions:\r\n     *\r\n     * - when `from` and `to` are both non-zero, `amount` of ``from``'s tokens\r\n     * has been transferred to `to`.\r\n     * - when `from` is zero, `amount` tokens have been minted for `to`.\r\n     * - when `to` is zero, `amount` of ``from``'s tokens have been burned.\r\n     * - `from` and `to` are never both zero.\r\n     *\r\n     * To learn more about hooks, head to xref:ROOT:extending-contracts.adoc#using-hooks[Using Hooks].\r\n     */\r\n    function _afterTokenTransfer(\r\n        address from,\r\n        address to,\r\n        uint256 amount\r\n    ) internal virtual {}\r\n}\r\n\r\n// File @openzeppelin/contracts/utils/Strings.sol@v4.4.1\r\n\r\n// OpenZeppelin Contracts v4.4.1 (utils/Strings.sol)\r\n\r\n/**\r\n * @dev String operations.\r\n */\r\nlibrary Strings {\r\n    bytes16 private constant _HEX_SYMBOLS = \"0123456789abcdef\";\r\n\r\n    /**\r\n     * @dev Converts a `uint256` to its ASCII `string` decimal representation.\r\n     */\r\n    function toString(uint256 value) internal pure returns (string memory) {\r\n        // Inspired by OraclizeAPI's implementation - MIT licence\r\n        // https://github.com/oraclize/ethereum-api/blob/b42146b063c7d6ee1358846c198246239e9360e8/oraclizeAPI_0.4.25.sol\r\n\r\n        if (value == 0) {\r\n            return \"0\";\r\n        }\r\n        uint256 temp = value;\r\n        uint256 digits;\r\n        while (temp != 0) {\r\n            digits++;\r\n            temp /= 10;\r\n        }\r\n        bytes memory buffer = new bytes(digits);\r\n        while (value != 0) {\r\n            digits -= 1;\r\n            buffer[digits] = bytes1(uint8(48 + uint256(value % 10)));\r\n            value /= 10;\r\n        }\r\n        return string(buffer);\r\n    }\r\n\r\n    /**\r\n     * @dev Converts a `uint256` to its ASCII `string` hexadecimal representation.\r\n     */\r\n    function toHexString(uint256 value) internal pure returns (string memory) {\r\n        if (value == 0) {\r\n            return \"0x00\";\r\n        }\r\n        uint256 temp = value;\r\n        uint256 length = 0;\r\n        while (temp != 0) {\r\n            length++;\r\n            temp >>= 8;\r\n        }\r\n        return toHexString(value, length);\r\n    }\r\n\r\n    /**\r\n     * @dev Converts a `uint256` to its ASCII `string` hexadecimal representation with fixed length.\r\n     */\r\n    function toHexString(uint256 value, uint256 length) internal pure returns (string memory) {\r\n        bytes memory buffer = new bytes(2 * length + 2);\r\n        buffer[0] = \"0\";\r\n        buffer[1] = \"x\";\r\n        for (uint256 i = 2 * length + 1; i > 1; --i) {\r\n            buffer[i] = _HEX_SYMBOLS[value & 0xf];\r\n            value >>= 4;\r\n        }\r\n        require(value == 0, \"Strings: hex length insufficient\");\r\n        return string(buffer);\r\n    }\r\n}\r\n\r\n// File @openzeppelin/contracts/utils/cryptography/ECDSA.sol@v4.4.1\r\n\r\n// OpenZeppelin Contracts v4.4.1 (utils/cryptography/ECDSA.sol)\r\n\r\n/**\r\n * @dev Elliptic Curve Digital Signature Algorithm (ECDSA) operations.\r\n *\r\n * These functions can be used to verify that a message was signed by the holder\r\n * of the private keys of a given address.\r\n */\r\nlibrary ECDSA {\r\n    enum RecoverError {\r\n        NoError,\r\n        InvalidSignature,\r\n        InvalidSignatureLength,\r\n        InvalidSignatureS,\r\n        InvalidSignatureV\r\n    }\r\n\r\n    function _throwError(RecoverError error) private pure {\r\n        if (error == RecoverError.NoError) {\r\n            return; // no error: do nothing\r\n        } else if (error == RecoverError.InvalidSignature) {\r\n            revert(\"ECDSA: invalid signature\");\r\n        } else if (error == RecoverError.InvalidSignatureLength) {\r\n            revert(\"ECDSA: invalid signature length\");\r\n        } else if (error == RecoverError.InvalidSignatureS) {\r\n            revert(\"ECDSA: invalid signature 's' value\");\r\n        } else if (error == RecoverError.InvalidSignatureV) {\r\n            revert(\"ECDSA: invalid signature 'v' value\");\r\n        }\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the address that signed a hashed message (`hash`) with\r\n     * `signature` or error string. This address can then be used for verification purposes.\r\n     *\r\n     * The `ecrecover` EVM opcode allows for malleable (non-unique) signatures:\r\n     * this function rejects them by requiring the `s` value to be in the lower\r\n     * half order, and the `v` value to be either 27 or 28.\r\n     *\r\n     * IMPORTANT: `hash` _must_ be the result of a hash operation for the\r\n     * verification to be secure: it is possible to craft signatures that\r\n     * recover to arbitrary addresses for non-hashed data. A safe way to ensure\r\n     * this is by receiving a hash of the original message (which may otherwise\r\n     * be too long), and then calling {toEthSignedMessageHash} on it.\r\n     *\r\n     * Documentation for signature generation:\r\n     * - with https://web3js.readthedocs.io/en/v1.3.4/web3-eth-accounts.html#sign[Web3.js]\r\n     * - with https://docs.ethers.io/v5/api/signer/#Signer-signMessage[ethers]\r\n     *\r\n     * _Available since v4.3._\r\n     */\r\n    function tryRecover(bytes32 hash, bytes memory signature)\r\n        internal\r\n        pure\r\n        returns (address, RecoverError)\r\n    {\r\n        // Check the signature length\r\n        // - case 65: r,s,v signature (standard)\r\n        // - case 64: r,vs signature (cf https://eips.ethereum.org/EIPS/eip-2098) _Available since v4.1._\r\n        if (signature.length == 65) {\r\n            bytes32 r;\r\n            bytes32 s;\r\n            uint8 v;\r\n            // ecrecover takes the signature parameters, and the only way to get them\r\n            // currently is to use assembly.\r\n            assembly {\r\n                r := mload(add(signature, 0x20))\r\n                s := mload(add(signature, 0x40))\r\n                v := byte(0, mload(add(signature, 0x60)))\r\n            }\r\n            return tryRecover(hash, v, r, s);\r\n        } else if (signature.length == 64) {\r\n            bytes32 r;\r\n            bytes32 vs;\r\n            // ecrecover takes the signature parameters, and the only way to get them\r\n            // currently is to use assembly.\r\n            assembly {\r\n                r := mload(add(signature, 0x20))\r\n                vs := mload(add(signature, 0x40))\r\n            }\r\n            return tryRecover(hash, r, vs);\r\n        } else {\r\n            return (address(0), RecoverError.InvalidSignatureLength);\r\n        }\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the address that signed a hashed message (`hash`) with\r\n     * `signature`. This address can then be used for verification purposes.\r\n     *\r\n     * The `ecrecover` EVM opcode allows for malleable (non-unique) signatures:\r\n     * this function rejects them by requiring the `s` value to be in the lower\r\n     * half order, and the `v` value to be either 27 or 28.\r\n     *\r\n     * IMPORTANT: `hash` _must_ be the result of a hash operation for the\r\n     * verification to be secure: it is possible to craft signatures that\r\n     * recover to arbitrary addresses for non-hashed data. A safe way to ensure\r\n     * this is by receiving a hash of the original message (which may otherwise\r\n     * be too long), and then calling {toEthSignedMessageHash} on it.\r\n     */\r\n    function recover(bytes32 hash, bytes memory signature) internal pure returns (address) {\r\n        (address recovered, RecoverError error) = tryRecover(hash, signature);\r\n        _throwError(error);\r\n        return recovered;\r\n    }\r\n\r\n    /**\r\n     * @dev Overload of {ECDSA-tryRecover} that receives the `r` and `vs` short-signature fields separately.\r\n     *\r\n     * See https://eips.ethereum.org/EIPS/eip-2098[EIP-2098 short signatures]\r\n     *\r\n     * _Available since v4.3._\r\n     */\r\n    function tryRecover(\r\n        bytes32 hash,\r\n        bytes32 r,\r\n        bytes32 vs\r\n    ) internal pure returns (address, RecoverError) {\r\n        bytes32 s;\r\n        uint8 v;\r\n        assembly {\r\n            s := and(vs, 0x7fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff)\r\n            v := add(shr(255, vs), 27)\r\n        }\r\n        return tryRecover(hash, v, r, s);\r\n    }\r\n\r\n    /**\r\n     * @dev Overload of {ECDSA-recover} that receives the `r and `vs` short-signature fields separately.\r\n     *\r\n     * _Available since v4.2._\r\n     */\r\n    function recover(\r\n        bytes32 hash,\r\n        bytes32 r,\r\n        bytes32 vs\r\n    ) internal pure returns (address) {\r\n        (address recovered, RecoverError error) = tryRecover(hash, r, vs);\r\n        _throwError(error);\r\n        return recovered;\r\n    }\r\n\r\n    /**\r\n     * @dev Overload of {ECDSA-tryRecover} that receives the `v`,\r\n     * `r` and `s` signature fields separately.\r\n     *\r\n     * _Available since v4.3._\r\n     */\r\n    function tryRecover(\r\n        bytes32 hash,\r\n        uint8 v,\r\n        bytes32 r,\r\n        bytes32 s\r\n    ) internal pure returns (address, RecoverError) {\r\n        // EIP-2 still allows signature malleability for ecrecover(). Remove this possibility and make the signature\r\n        // unique. Appendix F in the Ethereum Yellow paper (https://ethereum.github.io/yellowpaper/paper.pdf), defines\r\n        // the valid range for s in (301): 0 < s < secp256k1n ÷ 2 + 1, and for v in (302): v ∈ {27, 28}. Most\r\n        // signatures from current libraries generate a unique signature with an s-value in the lower half order.\r\n        //\r\n        // If your library generates malleable signatures, such as s-values in the upper range, calculate a new s-value\r\n        // with 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFEBAAEDCE6AF48A03BBFD25E8CD0364141 - s1 and flip v from 27 to 28 or\r\n        // vice versa. If your library also generates signatures with 0/1 for v instead 27/28, add 27 to v to accept\r\n        // these malleable signatures as well.\r\n        if (uint256(s) > 0x7FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF5D576E7357A4501DDFE92F46681B20A0) {\r\n            return (address(0), RecoverError.InvalidSignatureS);\r\n        }\r\n        if (v != 27 && v != 28) {\r\n            return (address(0), RecoverError.InvalidSignatureV);\r\n        }\r\n\r\n        // If the signature is valid (and not malleable), return the signer address\r\n        address signer = ecrecover(hash, v, r, s);\r\n        if (signer == address(0)) {\r\n            return (address(0), RecoverError.InvalidSignature);\r\n        }\r\n\r\n        return (signer, RecoverError.NoError);\r\n    }\r\n\r\n    /**\r\n     * @dev Overload of {ECDSA-recover} that receives the `v`,\r\n     * `r` and `s` signature fields separately.\r\n     */\r\n    function recover(\r\n        bytes32 hash,\r\n        uint8 v,\r\n        bytes32 r,\r\n        bytes32 s\r\n    ) internal pure returns (address) {\r\n        (address recovered, RecoverError error) = tryRecover(hash, v, r, s);\r\n        _throwError(error);\r\n        return recovered;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns an Ethereum Signed Message, created from a `hash`. This\r\n     * produces hash corresponding to the one signed with the\r\n     * https://eth.wiki/json-rpc/API#eth_sign[`eth_sign`]\r\n     * JSON-RPC method as part of EIP-191.\r\n     *\r\n     * See {recover}.\r\n     */\r\n    function toEthSignedMessageHash(bytes32 hash) internal pure returns (bytes32) {\r\n        // 32 is the length in bytes of hash,\r\n        // enforced by the type signature above\r\n        return keccak256(abi.encodePacked(\"\\x19Ethereum Signed Message:\\n32\", hash));\r\n    }\r\n\r\n    /**\r\n     * @dev Returns an Ethereum Signed Message, created from `s`. This\r\n     * produces hash corresponding to the one signed with the\r\n     * https://eth.wiki/json-rpc/API#eth_sign[`eth_sign`]\r\n     * JSON-RPC method as part of EIP-191.\r\n     *\r\n     * See {recover}.\r\n     */\r\n    function toEthSignedMessageHash(bytes memory s) internal pure returns (bytes32) {\r\n        return\r\n            keccak256(\r\n                abi.encodePacked(\"\\x19Ethereum Signed Message:\\n\", Strings.toString(s.length), s)\r\n            );\r\n    }\r\n\r\n    /**\r\n     * @dev Returns an Ethereum Signed Typed Data, created from a\r\n     * `domainSeparator` and a `structHash`. This produces hash corresponding\r\n     * to the one signed with the\r\n     * https://eips.ethereum.org/EIPS/eip-712[`eth_signTypedData`]\r\n     * JSON-RPC method as part of EIP-712.\r\n     *\r\n     * See {recover}.\r\n     */\r\n    function toTypedDataHash(bytes32 domainSeparator, bytes32 structHash)\r\n        internal\r\n        pure\r\n        returns (bytes32)\r\n    {\r\n        return keccak256(abi.encodePacked(\"\\x19\\x01\", domainSeparator, structHash));\r\n    }\r\n}\r\n\r\n// File @openzeppelin/contracts/utils/cryptography/draft-EIP712.sol@v4.4.1\r\n\r\n// OpenZeppelin Contracts v4.4.1 (utils/cryptography/draft-EIP712.sol)\r\n\r\n/**\r\n * @dev https://eips.ethereum.org/EIPS/eip-712[EIP 712] is a standard for hashing and signing of typed structured data.\r\n *\r\n * The encoding specified in the EIP is very generic, and such a generic implementation in Solidity is not feasible,\r\n * thus this contract does not implement the encoding itself. Protocols need to implement the type-specific encoding\r\n * they need in their contracts using a combination of `abi.encode` and `keccak256`.\r\n *\r\n * This contract implements the EIP 712 domain separator ({_domainSeparatorV4}) that is used as part of the encoding\r\n * scheme, and the final step of the encoding to obtain the message digest that is then signed via ECDSA\r\n * ({_hashTypedDataV4}).\r\n *\r\n * The implementation of the domain separator was designed to be as efficient as possible while still properly updating\r\n * the chain id to protect against replay attacks on an eventual fork of the chain.\r\n *\r\n * NOTE: This contract implements the version of the encoding known as \"v4\", as implemented by the JSON RPC method\r\n * https://docs.metamask.io/guide/signing-data.html[`eth_signTypedDataV4` in MetaMask].\r\n *\r\n * _Available since v3.4._\r\n */\r\nabstract contract EIP712 {\r\n    /* solhint-disable var-name-mixedcase */\r\n    // Cache the domain separator as an immutable value, but also store the chain id that it corresponds to, in order to\r\n    // invalidate the cached domain separator if the chain id changes.\r\n    bytes32 private immutable _CACHED_DOMAIN_SEPARATOR;\r\n    uint256 private immutable _CACHED_CHAIN_ID;\r\n    address private immutable _CACHED_THIS;\r\n\r\n    bytes32 private immutable _HASHED_NAME;\r\n    bytes32 private immutable _HASHED_VERSION;\r\n    bytes32 private immutable _TYPE_HASH;\r\n\r\n    /* solhint-enable var-name-mixedcase */\r\n\r\n    /**\r\n     * @dev Initializes the domain separator and parameter caches.\r\n     *\r\n     * The meaning of `name` and `version` is specified in\r\n     * https://eips.ethereum.org/EIPS/eip-712#definition-of-domainseparator[EIP 712]:\r\n     *\r\n     * - `name`: the user readable name of the signing domain, i.e. the name of the DApp or the protocol.\r\n     * - `version`: the current major version of the signing domain.\r\n     *\r\n     * NOTE: These parameters cannot be changed except through a xref:learn::upgrading-smart-contracts.adoc[smart\r\n     * contract upgrade].\r\n     */\r\n    constructor(string memory name, string memory version) {\r\n        bytes32 hashedName = keccak256(bytes(name));\r\n        bytes32 hashedVersion = keccak256(bytes(version));\r\n        bytes32 typeHash = keccak256(\r\n            \"EIP712Domain(string name,string version,uint256 chainId,address verifyingContract)\"\r\n        );\r\n        _HASHED_NAME = hashedName;\r\n        _HASHED_VERSION = hashedVersion;\r\n        _CACHED_CHAIN_ID = block.chainid;\r\n        _CACHED_DOMAIN_SEPARATOR = _buildDomainSeparator(typeHash, hashedName, hashedVersion);\r\n        _CACHED_THIS = address(this);\r\n        _TYPE_HASH = typeHash;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the domain separator for the current chain.\r\n     */\r\n    function _domainSeparatorV4() internal view returns (bytes32) {\r\n        if (address(this) == _CACHED_THIS && block.chainid == _CACHED_CHAIN_ID) {\r\n            return _CACHED_DOMAIN_SEPARATOR;\r\n        } else {\r\n            return _buildDomainSeparator(_TYPE_HASH, _HASHED_NAME, _HASHED_VERSION);\r\n        }\r\n    }\r\n\r\n    function _buildDomainSeparator(\r\n        bytes32 typeHash,\r\n        bytes32 nameHash,\r\n        bytes32 versionHash\r\n    ) private view returns (bytes32) {\r\n        return keccak256(abi.encode(typeHash, nameHash, versionHash, block.chainid, address(this)));\r\n    }\r\n\r\n    /**\r\n     * @dev Given an already https://eips.ethereum.org/EIPS/eip-712#definition-of-hashstruct[hashed struct], this\r\n     * function returns the hash of the fully encoded EIP712 message for this domain.\r\n     *\r\n     * This hash can be used together with {ECDSA-recover} to obtain the signer of a message. For example:\r\n     *\r\n     * ```solidity\r\n     * bytes32 digest = _hashTypedDataV4(keccak256(abi.encode(\r\n     *     keccak256(\"Mail(address to,string contents)\"),\r\n     *     mailTo,\r\n     *     keccak256(bytes(mailContents))\r\n     * )));\r\n     * address signer = ECDSA.recover(digest, signature);\r\n     * ```\r\n     */\r\n    function _hashTypedDataV4(bytes32 structHash) internal view virtual returns (bytes32) {\r\n        return ECDSA.toTypedDataHash(_domainSeparatorV4(), structHash);\r\n    }\r\n}\r\n\r\n// File @openzeppelin/contracts/utils/Counters.sol@v4.4.1\r\n\r\n// OpenZeppelin Contracts v4.4.1 (utils/Counters.sol)\r\n\r\n/**\r\n * @title Counters\r\n * @author Matt Condon (@shrugs)\r\n * @dev Provides counters that can only be incremented, decremented or reset. This can be used e.g. to track the number\r\n * of elements in a mapping, issuing ERC721 ids, or counting request ids.\r\n *\r\n * Include with `using Counters for Counters.Counter;`\r\n */\r\nlibrary Counters {\r\n    struct Counter {\r\n        // This variable should never be directly accessed by users of the library: interactions must be restricted to\r\n        // the library's function. As of Solidity v0.5.2, this cannot be enforced, though there is a proposal to add\r\n        // this feature: see https://github.com/ethereum/solidity/issues/4637\r\n        uint256 _value; // default: 0\r\n    }\r\n\r\n    function current(Counter storage counter) internal view returns (uint256) {\r\n        return counter._value;\r\n    }\r\n\r\n    function increment(Counter storage counter) internal {\r\n        unchecked {\r\n            counter._value += 1;\r\n        }\r\n    }\r\n\r\n    function decrement(Counter storage counter) internal {\r\n        uint256 value = counter._value;\r\n        require(value > 0, \"Counter: decrement overflow\");\r\n        unchecked {\r\n            counter._value = value - 1;\r\n        }\r\n    }\r\n\r\n    function reset(Counter storage counter) internal {\r\n        counter._value = 0;\r\n    }\r\n}\r\n\r\n// File @openzeppelin/contracts/token/ERC20/extensions/draft-ERC20Permit.sol@v4.4.1\r\n\r\n// OpenZeppelin Contracts v4.4.1 (token/ERC20/extensions/draft-ERC20Permit.sol)\r\n\r\n/**\r\n * @dev Implementation of the ERC20 Permit extension allowing approvals to be made via signatures, as defined in\r\n * https://eips.ethereum.org/EIPS/eip-2612[EIP-2612].\r\n *\r\n * Adds the {permit} method, which can be used to change an account's ERC20 allowance (see {IERC20-allowance}) by\r\n * presenting a message signed by the account. By not relying on `{IERC20-approve}`, the token holder account doesn't\r\n * need to send a transaction, and thus is not required to hold Ether at all.\r\n *\r\n * _Available since v3.4._\r\n */\r\nabstract contract ERC20Permit is ERC20, IERC20Permit, EIP712 {\r\n    using Counters for Counters.Counter;\r\n\r\n    mapping(address => Counters.Counter) private _nonces;\r\n\r\n    // solhint-disable-next-line var-name-mixedcase\r\n    bytes32 private immutable _PERMIT_TYPEHASH =\r\n        keccak256(\r\n            \"Permit(address owner,address spender,uint256 value,uint256 nonce,uint256 deadline)\"\r\n        );\r\n\r\n    /**\r\n     * @dev Initializes the {EIP712} domain separator using the `name` parameter, and setting `version` to `\"1\"`.\r\n     *\r\n     * It's a good idea to use the same `name` that is defined as the ERC20 token name.\r\n     */\r\n    constructor(string memory name) EIP712(name, \"1\") {}\r\n\r\n    /**\r\n     * @dev See {IERC20Permit-permit}.\r\n     */\r\n    function permit(\r\n        address owner,\r\n        address spender,\r\n        uint256 value,\r\n        uint256 deadline,\r\n        uint8 v,\r\n        bytes32 r,\r\n        bytes32 s\r\n    ) public virtual override {\r\n        require(block.timestamp <= deadline, \"ERC20Permit: expired deadline\");\r\n\r\n        bytes32 structHash = keccak256(\r\n            abi.encode(_PERMIT_TYPEHASH, owner, spender, value, _useNonce(owner), deadline)\r\n        );\r\n\r\n        bytes32 hash = _hashTypedDataV4(structHash);\r\n\r\n        address signer = ECDSA.recover(hash, v, r, s);\r\n        require(signer == owner, \"ERC20Permit: invalid signature\");\r\n\r\n        _approve(owner, spender, value);\r\n    }\r\n\r\n    /**\r\n     * @dev See {IERC20Permit-nonces}.\r\n     */\r\n    function nonces(address owner) public view virtual override returns (uint256) {\r\n        return _nonces[owner].current();\r\n    }\r\n\r\n    /**\r\n     * @dev See {IERC20Permit-DOMAIN_SEPARATOR}.\r\n     */\r\n    // solhint-disable-next-line func-name-mixedcase\r\n    function DOMAIN_SEPARATOR() external view override returns (bytes32) {\r\n        return _domainSeparatorV4();\r\n    }\r\n\r\n    /**\r\n     * @dev \"Consume a nonce\": return the current value and increment.\r\n     *\r\n     * _Available since v4.1._\r\n     */\r\n    function _useNonce(address owner) internal virtual returns (uint256 current) {\r\n        Counters.Counter storage nonce = _nonces[owner];\r\n        current = nonce.current();\r\n        nonce.increment();\r\n    }\r\n}\r\n\r\n// File @openzeppelin/contracts/security/Pausable.sol@v4.4.1\r\n\r\n// OpenZeppelin Contracts v4.4.1 (security/Pausable.sol)\r\n\r\n/**\r\n * @dev Contract module which allows children to implement an emergency stop\r\n * mechanism that can be triggered by an authorized account.\r\n *\r\n * This module is used through inheritance. It will make available the\r\n * modifiers `whenNotPaused` and `whenPaused`, which can be applied to\r\n * the functions of your contract. Note that they will not be pausable by\r\n * simply including this module, only once the modifiers are put in place.\r\n */\r\nabstract contract Pausable is Context {\r\n    /**\r\n     * @dev Emitted when the pause is triggered by `account`.\r\n     */\r\n    event Paused(address account);\r\n\r\n    /**\r\n     * @dev Emitted when the pause is lifted by `account`.\r\n     */\r\n    event Unpaused(address account);\r\n\r\n    bool private _paused;\r\n\r\n    /**\r\n     * @dev Initializes the contract in unpaused state.\r\n     */\r\n    constructor() {\r\n        _paused = false;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns true if the contract is paused, and false otherwise.\r\n     */\r\n    function paused() public view virtual returns (bool) {\r\n        return _paused;\r\n    }\r\n\r\n    /**\r\n     * @dev Modifier to make a function callable only when the contract is not paused.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - The contract must not be paused.\r\n     */\r\n    modifier whenNotPaused() {\r\n        require(!paused(), \"Pausable: paused\");\r\n        _;\r\n    }\r\n\r\n    /**\r\n     * @dev Modifier to make a function callable only when the contract is paused.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - The contract must be paused.\r\n     */\r\n    modifier whenPaused() {\r\n        require(paused(), \"Pausable: not paused\");\r\n        _;\r\n    }\r\n\r\n    /**\r\n     * @dev Triggers stopped state.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - The contract must not be paused.\r\n     */\r\n    function _pause() internal virtual whenNotPaused {\r\n        _paused = true;\r\n        emit Paused(_msgSender());\r\n    }\r\n\r\n    /**\r\n     * @dev Returns to normal state.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - The contract must be paused.\r\n     */\r\n    function _unpause() internal virtual whenPaused {\r\n        _paused = false;\r\n        emit Unpaused(_msgSender());\r\n    }\r\n}\r\n\r\n// File @openzeppelin/contracts/token/ERC20/extensions/ERC20Pausable.sol@v4.4.1\r\n\r\n// OpenZeppelin Contracts v4.4.1 (token/ERC20/extensions/ERC20Pausable.sol)\r\n\r\n/**\r\n * @dev ERC20 token with pausable token transfers, minting and burning.\r\n *\r\n * Useful for scenarios such as preventing trades until the end of an evaluation\r\n * period, or having an emergency switch for freezing all token transfers in the\r\n * event of a large bug.\r\n */\r\nabstract contract ERC20Pausable is ERC20, Pausable {\r\n    /**\r\n     * @dev See {ERC20-_beforeTokenTransfer}.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - the contract must not be paused.\r\n     */\r\n    function _beforeTokenTransfer(\r\n        address from,\r\n        address to,\r\n        uint256 amount\r\n    ) internal virtual override {\r\n        super._beforeTokenTransfer(from, to, amount);\r\n\r\n        require(!paused(), \"ERC20Pausable: token transfer while paused\");\r\n    }\r\n}\r\n\r\n// File contracts/RSR.sol\r\n\r\n/**\r\n * @title RSR\r\n\r\n * An ERC20 insurance token for the Reserve Protocol ecosystem, using the copy-on-write\r\n * pattern to enable a ugprade from the old RSR token.\r\n\r\n * This token allows the configuration of a rich system of \"siphons\" to administer the\r\n * copy pattern of some holder addresses, before the token goes into its WORKING phase.\r\n */\r\ncontract RSR is Pausable, Ownable, Enchantable, ERC20Permit {\r\n    using EnumerableSet for EnumerableSet.AddressSet;\r\n\r\n    ERC20Pausable public immutable oldRSR;\r\n\r\n    /// weight scale\r\n    /// A uint64 value `w` is a _weight_, and it represents the fractional value `w / WEIGHT_ONE`.\r\n    uint64 public constant WEIGHT_ONE = 1e18;\r\n\r\n    /// fixedSupply inherited from oldRSR contract\r\n    /// Note that due to lost dust crossing, it's possible sum(_balances) < fixedSupply\r\n    uint256 private immutable fixedSupply;\r\n\r\n    /** Operational Lifecycle\r\n    The contract is initially deployed into SETUP. During the SETUP phase:\r\n    - admins can configure siphons\r\n    - no ERC20 operations can happen\r\n    - the contract is always paused\r\n\r\n    The contract can transition from SETUP to WORKING only after oldRSR is paused.\r\n    During that transition, the owner is set to the zero address.\r\n\r\n    In the WORKING phase:\r\n    - siphons cannot be changed\r\n    - ERC20 operations happen as usual\r\n    - the pauser can pause and unpause the contract\r\n\r\n    Once in WORKING, the contract cannot move back to SETUP.\r\n    */\r\n    enum Phase {\r\n        SETUP,\r\n        WORKING\r\n    }\r\n    Phase public phase;\r\n\r\n    /// Pausing\r\n    /// Note well that, because of the above about lifecycle phase, whenNotPaused implies isWorking.\r\n    event PauserChanged(address indexed oldPauser, address newPauser);\r\n    address public pauser;\r\n\r\n    /** @dev\r\n    Relative Immutability\r\n    =====================\r\n\r\n    We assume that, once OldRSR is paused, its paused status, balances, and allowances\r\n    are immutable, and this contract's values for hasWeights, weights, and origins\r\n    are immutable as well.\r\n\r\n    Before OldRSR is paused, the booleans in balCrossed and allownceCrossed are all\r\n    false (immutable). After OldRSR is paused, the entries in those maps can change to true.\r\n    Once the entry value is true, it remains immutable.\r\n    */\r\n\r\n    /// weights: map(OldRSR addr -> RSR addr -> uint64 weight)\r\n    /// weights[A][B] is the fraction of A's old balance that should be forwarded to B.\r\n    mapping(address => mapping(address => uint64)) public weights;\r\n\r\n    /// Invariant:\r\n    /// For all OldRSR addresses A,\r\n    /// if !hasWeights[A], then for all RSR Addresses B, weights[A][B] == 0\r\n    /// if hasWeights[A], then sum_{all RSR addresses B} (weights[A][B]) == WEIGHT_ONE\r\n    ///\r\n    /// hasWeights: map(OldRSR addr -> bool)\r\n    /// If !hasWeights[A], then A's OldRSR balances should be forwarded as by default.\r\n    /// If hasWeights[A], then A's OldRSR balances should be forwarded as by weights[A][_]\r\n    mapping(address => bool) public hasWeights;\r\n\r\n    /// Invariant: For all A and B, if weights[A][B] > 0, then A is in origins[B]\r\n    ///\r\n    /// origins: map(RSR addr -> set(OldRSR addr))\r\n    mapping(address => EnumerableSet.AddressSet) private origins;\r\n\r\n    /// balCrossed[A]: true if and only if OldRSR address \"A\" has already crossed\r\n    mapping(address => bool) public balCrossed;\r\n\r\n    /// allowanceCrossed[A][B]: true if and only if oldRSR.allowances[A][B] has crossed\r\n    mapping(address => mapping(address => bool)) public allowanceCrossed;\r\n\r\n    /** @dev A few mathematical functions, so we can be really precise here:\r\n\r\n    totalWeight(A, B) = (hasWeights[A] ? weights[A][B] : ((A == B) ? WEIGHT_ONE : 0))\r\n    inheritedBalance(A) = sum_{all addrs B} ( oldRSR.balanceOf(A) * totalWeight(A,B) / WEIGHT_ONE )\r\n\r\n    # Properties of balances:\r\n\r\n    For all RSR addresses \"A\":\r\n    - If OldRSR is not yet paused, balCrossed[A] is `false`.\r\n    - Once balCrossed[A] is `true`, it stays `true` forever.\r\n    - balanceOf(A) == this._balances[A] + (balCrossed[A] ? inheritedBalance(A) : 0)\r\n    - The function `balanceOf` satisfies all the usual rules for ERC20 tokens.\r\n\r\n    # Properties of allowances:\r\n\r\n    For all addresses A and B,\r\n    - If OldRSR is not yet paused, then allowanceCrossed[A][B] is false\r\n    - Once allowanceCrossed[A][B] == true, it stays true forever\r\n    - allowance(A,B) == allowanceCrossed[A][B] ? this._allowance[A][B] : oldRSR.allowance(A,B)\r\n    - The function `allowance` satisfies all the usual rules for ERC20 tokens.\r\n    */\r\n\r\n    constructor(address oldRSR_) ERC20(\"Reserve Rights\", \"RSR\") ERC20Permit(\"Reserve Rights\") {\r\n        oldRSR = ERC20Pausable(oldRSR_);\r\n        // `totalSupply` for both OldRSR and RSR is fixed and equal\r\n        fixedSupply = ERC20Pausable(oldRSR_).totalSupply();\r\n        pauser = _msgSender();\r\n        _pause();\r\n        phase = Phase.SETUP;\r\n    }\r\n\r\n    // ========================= Modifiers =========================\r\n\r\n    modifier ensureBalCrossed(address from) {\r\n        if (!balCrossed[from]) {\r\n            balCrossed[from] = true;\r\n            _mint(from, _oldBal(from));\r\n        }\r\n        _;\r\n    }\r\n\r\n    modifier ensureAllowanceCrossed(address from, address to) {\r\n        if (!allowanceCrossed[from][to]) {\r\n            allowanceCrossed[from][to] = true;\r\n            _approve(from, to, oldRSR.allowance(from, to));\r\n        }\r\n        _;\r\n    }\r\n\r\n    modifier onlyAdminOrPauser() {\r\n        require(\r\n            _msgSender() == pauser || _msgSender() == mage() || _msgSender() == owner(),\r\n            \"only pauser, mage, or owner\"\r\n        );\r\n        _;\r\n    }\r\n\r\n    modifier inWorking() {\r\n        require(phase == Phase.WORKING, \"only during working phase\");\r\n        _;\r\n    }\r\n    modifier inSetup() {\r\n        require(phase == Phase.SETUP, \"only during setup phase\");\r\n        _;\r\n    }\r\n\r\n    // ========================= Governance =========================\r\n\r\n    function moveToWorking() external onlyAdmin inSetup {\r\n        require(oldRSR.paused(), \"waiting for oldRSR to pause\");\r\n        phase = Phase.WORKING;\r\n        _unpause();\r\n        _transferOwnership(address(0));\r\n    }\r\n\r\n    /// Pause ERC20 + ERC2612 functions\r\n    function pause() external onlyAdminOrPauser inWorking {\r\n        _pause();\r\n    }\r\n\r\n    /// Unpause ERC20 + ERC2612 functions\r\n    function unpause() external onlyAdminOrPauser inWorking {\r\n        _unpause();\r\n    }\r\n\r\n    function changePauser(address newPauser) external onlyAdminOrPauser {\r\n        require(newPauser != address(0), \"use renouncePauser\");\r\n        emit PauserChanged(pauser, newPauser);\r\n        pauser = newPauser;\r\n    }\r\n\r\n    function renouncePauser() external onlyAdminOrPauser {\r\n        emit PauserChanged(pauser, address(0));\r\n        pauser = address(0);\r\n    }\r\n\r\n    // ========================= Weight Management =========================\r\n\r\n    /// Moves weight from old->prev to old->to\r\n    /// @param from The address that has the balance on OldRSR\r\n    /// @param oldTo The receiving address to siphon tokens away from\r\n    /// @param newTo The receiving address to siphon tokens towards\r\n    /// @param weight A uint between 0 and the current old->prev weight, max WEIGHT_ONE\r\n    function siphon(\r\n        address from,\r\n        address oldTo,\r\n        address newTo,\r\n        uint64 weight\r\n    ) external onlyAdmin inSetup {\r\n        _siphon(from, oldTo, newTo, weight);\r\n    }\r\n\r\n    /// Partially crosses an account balance.\r\n    /// Calling this function does not impact final balances after completing account crossing.\r\n    function partiallyCross(address to, uint256 n) public inWorking {\r\n        if (!balCrossed[to]) {\r\n            while (origins[to].length() > 0 && n > 0) {\r\n                address from = origins[to].at(origins[to].length() - 1);\r\n                _mint(to, (oldRSR.balanceOf(from) * weights[from][to]) / WEIGHT_ONE);\r\n                weights[from][to] = 0;\r\n                origins[to].remove(from);\r\n                n -= 1;\r\n            }\r\n        }\r\n    }\r\n\r\n    // ========================= ERC20 + ERC2612 ==============================\r\n\r\n    function transfer(address recipient, uint256 amount)\r\n        public\r\n        override\r\n        whenNotPaused\r\n        ensureBalCrossed(_msgSender())\r\n        returns (bool)\r\n    {\r\n        require(recipient != address(this), \"no transfers to this token address\");\r\n        return super.transfer(recipient, amount);\r\n    }\r\n\r\n    function transferFrom(\r\n        address sender,\r\n        address recipient,\r\n        uint256 amount\r\n    )\r\n        public\r\n        override\r\n        whenNotPaused\r\n        ensureBalCrossed(sender)\r\n        ensureAllowanceCrossed(sender, _msgSender())\r\n        returns (bool)\r\n    {\r\n        require(recipient != address(this), \"no transfers to this token address\");\r\n        return super.transferFrom(sender, recipient, amount);\r\n    }\r\n\r\n    function approve(address spender, uint256 amount) public override whenNotPaused returns (bool) {\r\n        _approve(_msgSender(), spender, amount);\r\n        allowanceCrossed[_msgSender()][spender] = true;\r\n        return true;\r\n    }\r\n\r\n    function permit(\r\n        address owner,\r\n        address spender,\r\n        uint256 value,\r\n        uint256 deadline,\r\n        uint8 v,\r\n        bytes32 r,\r\n        bytes32 s\r\n    ) public override whenNotPaused {\r\n        super.permit(owner, spender, value, deadline, v, r, s);\r\n        allowanceCrossed[owner][spender] = true;\r\n    }\r\n\r\n    function increaseAllowance(address spender, uint256 addedValue)\r\n        public\r\n        override\r\n        whenNotPaused\r\n        ensureAllowanceCrossed(_msgSender(), spender)\r\n        returns (bool)\r\n    {\r\n        return super.increaseAllowance(spender, addedValue);\r\n    }\r\n\r\n    function decreaseAllowance(address spender, uint256 subbedValue)\r\n        public\r\n        override\r\n        whenNotPaused\r\n        ensureAllowanceCrossed(_msgSender(), spender)\r\n        returns (bool)\r\n    {\r\n        return super.decreaseAllowance(spender, subbedValue);\r\n    }\r\n\r\n    /// @return The fixed total supply of the token\r\n    function totalSupply() public view override returns (uint256) {\r\n        return fixedSupply;\r\n    }\r\n\r\n    /// @return The RSR balance of account\r\n    /// @dev The balance we return from balanceOf is the sum of three sources of balances:\r\n    ///     - newly received tokens\r\n    ///     - already-crossed oldRSR balances\r\n    ///     - not-yet-crossed oldRSR balances\r\n    /// super.balanceOf(account) == (newly received tokens + already-crossed oldRSR balances)\r\n    /// if not balCrossed[account], then _oldBal(account) == not-yet-crossed oldRSR balances\r\n    function balanceOf(address account) public view override returns (uint256) {\r\n        if (balCrossed[account]) {\r\n            return super.balanceOf(account);\r\n        }\r\n        return _oldBal(account) + super.balanceOf(account);\r\n    }\r\n\r\n    /// The allowance is a combination of crossing allowance + newly granted allowances\r\n    function allowance(address owner, address spender) public view override returns (uint256) {\r\n        if (allowanceCrossed[owner][spender]) {\r\n            return super.allowance(owner, spender);\r\n        }\r\n        return oldRSR.allowance(owner, spender);\r\n    }\r\n\r\n    // ========================= Internal =============================\r\n\r\n    /// Moves weight from old->prev to old->to\r\n    /// @param from The address that has the balance on OldRSR\r\n    /// @param oldTo The receiving address to siphon tokens away from\r\n    /// @param newTo The receiving address newTo siphon tokens towards\r\n    /// @param weight A uint between 0 and the current from->oldTo weight, max WEIGHT_ONE (1e18)\r\n    function _siphon(\r\n        address from,\r\n        address oldTo,\r\n        address newTo,\r\n        uint64 weight\r\n    ) internal {\r\n        /// Ensure that hasWeights[from] is true (base case)\r\n        if (!hasWeights[from]) {\r\n            origins[from].add(from);\r\n            weights[from][from] = WEIGHT_ONE;\r\n            hasWeights[from] = true;\r\n        }\r\n\r\n        require(weight <= weights[from][oldTo], \"weight too big\");\r\n        require(from != address(0), \"from cannot be zero address\");\r\n        // Redistribute weights\r\n        weights[from][oldTo] -= weight;\r\n        weights[from][newTo] += weight;\r\n        origins[newTo].add(from);\r\n    }\r\n\r\n    /// @return sum The starting balance for an account after crossing from OldRSR\r\n    function _oldBal(address account) internal view returns (uint256 sum) {\r\n        if (!hasWeights[account]) {\r\n            sum = oldRSR.balanceOf(account);\r\n        }\r\n        for (uint256 i = 0; i < origins[account].length(); i++) {\r\n            // Note that there is an acceptable loss of precision equal to ~1e18 RSR quanta\r\n            address from = origins[account].at(i);\r\n            sum += (oldRSR.balanceOf(from) * weights[from][account]) / WEIGHT_ONE;\r\n        }\r\n    }\r\n}\r\n\r\n// File contracts/ForkSpell.sol\r\n\r\ninterface IPausable {\r\n    function pause() external;\r\n}\r\n\r\n// File contracts/SiphonSpell.sol\r\n\r\n/**\r\n * @title SiphonSpell\r\n * @dev A one-time-use atomic series of siphon actions, castable via a Mage\r\n */\r\ncontract SiphonSpell is Spell {\r\n    /// An allocation of weight to be siphoned\r\n    struct Siphon {\r\n        address from;\r\n        address to;\r\n        uint64 weight; // 0 to MAX_WEIGHT==1e18\r\n    }\r\n\r\n    Siphon[] public siphons;\r\n\r\n    /// We expect the number of siphons we need to create to fit into this array.\r\n    /// If you need to make more siphons than will fit, use multiple SiphonSpells.\r\n    constructor(address rsr_, Siphon[] memory siphons_) Spell(rsr_) {\r\n        for (uint256 i = 0; i < siphons_.length; i++) {\r\n            siphons.push(siphons_[i]);\r\n        }\r\n    }\r\n\r\n    /// Cast the saved siphons\r\n    function spell() internal override {\r\n        for (uint256 i = 0; i < siphons.length; i++) {\r\n            Siphon storage s = siphons[i];\r\n            RSR(rsrAddr).siphon(s.from, s.from, s.to, s.weight);\r\n        }\r\n    }\r\n}","ABI":"[{\"inputs\":[{\"internalType\":\"address\",\"name\":\"rsr_\",\"type\":\"address\"},{\"components\":[{\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint64\",\"name\":\"weight\",\"type\":\"uint64\"}],\"internalType\":\"struct SiphonSpell.Siphon[]\",\"name\":\"siphons_\",\"type\":\"tuple[]\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"inputs\":[],\"name\":\"cast\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"hasBeenCast\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"rsrAddr\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"siphons\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint64\",\"name\":\"weight\",\"type\":\"uint64\"}],\"stateMutability\":\"view\",\"type\":\"function\"}]","ContractName":"SiphonSpell","CompilerVersion":"v0.8.4+commit.c7e474f2","OptimizationUsed":"1","Runs":"100000","ConstructorArguments":"000000000000000000000000320623b8E4fF03373931769A31Fc52A4E78B5d70000000000000000000000000000000000000000000000000000000000000004000000000000000000000000000000000000000000000000000000000000000a5000000000000000000000000c4bf963aa86f272af84796c160598d326e6d3078000000000000000000000000774cdf60F32eB1022801c4b629FdfC9AeB0C1A69000000000000000000000000000000000000000000000000007c585087238000000000000000000000000000c4bf963aa86f272af84796c160598d326e6d3078000000000000000000000000379AD184932aBDE64F7A6dd8728114Ad5D872Dfc00000000000000000000000000000000000000000000000000ae153d89fe8000000000000000000000000000c4bf963aa86f272af84796c160598d326e6d307800000000000000000000000008c8f38156eC1E30365CfC3848223ce5f12806fD00000000000000000000000000000000000000000000000000c3663566a58000000000000000000000000000c4bf963aa86f272af84796c160598d326e6d307800000000000000000000000006167BA5f91Ad31711Aef02b1AD2b9eaffb4710100000000000000000000000000000000000000000000000000a36cc19bab0000000000000000000000000000c4bf963aa86f272af84796c160598d326e6d3078000000000000000000000000e1b23473b30C6834cdcf973615017630c7800b4a00000000000000000000000000000000000000000000000000b1a2bc2ec50000000000000000000000000000c4bf963aa86f272af84796c160598d326e6d30780000000000000000000000003C108E94c395398F534f6F18d578b3aA84c6BCCC000000000000000000000000000000000000000000000000007fe5cf2bea0000000000000000000000000000c4bf963aa86f272af84796c160598d326e6d3078000000000000000000000000D25096bcd013dAFBeC27c785Cf79D58Acf3c3092000000000000000000000000000000000000000000000000009a8b04ffbac000000000000000000000000000c4bf963aa86f272af84796c160598d326e6d30780000000000000000000000005475f3Bf6b325b5f141740AD93daE50B5Aae3fbd000000000000000000000000000000000000000000000000009a8b04ffbac000000000000000000000000000c4bf963aa86f272af84796c160598d326e6d30780000000000000000000000002969ACE89570EF6Cf863887ED42E9cFb7a2864ac00000000000000000000000000000000000000000000000000a36cc19bab0000000000000000000000000000c4bf963aa86f272af84796c160598d326e6d3078000000000000000000000000891df2154895D3582DEf9C928F731963b74A0E01000000000000000000000000000000000000000000000000007fe5cf2bea0000000000000000000000000000c4bf963aa86f272af84796c160598d326e6d30780000000000000000000000007D61c72cE44fCF9099c371810F039E7Dc6D0fDBd00000000000000000000000000000000000000000000000000ae153d89fe8000000000000000000000000000c4bf963aa86f272af84796c160598d326e6d307800000000000000000000000054fac320F9BfDcAdD829525a7e2D31AeAFAE71BB00000000000000000000000000000000000000000000000000c3663566a58000000000000000000000000000c4bf963aa86f272af84796c160598d326e6d30780000000000000000000000000557ABA984d10622d3B66ad5e7eD3cA141C20268000000000000000000000000000000000000000000000000007fe5cf2bea0000000000000000000000000000c4bf963aa86f272af84796c160598d326e6d30780000000000000000000000003423153ef621FacD3AB474DF87F4AFe8f5E3CC9B000000000000000000000000000000000000000000000000009a8b04ffbac000000000000000000000000000c4bf963aa86f272af84796c160598d326e6d3078000000000000000000000000cC544A65aBD12007190240D68EF88AA0E5a5a0c3000000000000000000000000000000000000000000000000009a8b04ffbac000000000000000000000000000c4bf963aa86f272af84796c160598d326e6d307800000000000000000000000042aBBDc027d1Ef81e97F352F515768613aC81eB600000000000000000000000000000000000000000000000000a36cc19bab0000000000000000000000000000c4bf963aa86f272af84796c160598d326e6d30780000000000000000000000008D5EAee131F39F0aBB301A8E6bD14fDbB0cC5C9d00000000000000000000000000000000000000000000000000a36cc19bab0000000000000000000000000000c4bf963aa86f272af84796c160598d326e6d3078000000000000000000000000adD6a538D588c511a833fb7cAF44108D4588017C00000000000000000000000000000000000000000000000000b1a2bc2ec50000000000000000000000000000c4bf963aa86f272af84796c160598d326e6d3078000000000000000000000000030ff2326AC9011E06DF1a2c54b362ABB14E0c79000000000000000000000000000000000000000000000000007fe5cf2bea0000000000000000000000000000c4bf963aa86f272af84796c160598d326e6d30780000000000000000000000005bCEDD2dB60F4994863e85fc69cFE0EDc1392FF0000000000000000000000000000000000000000000000000009a8b04ffbac000000000000000000000000000c4bf963aa86f272af84796c160598d326e6d30780000000000000000000000001d1A4Ee2B1f427776E28418e9573B742F6cB28B9000000000000000000000000000000000000000000000000009a8b04ffbac000000000000000000000000000c4bf963aa86f272af84796c160598d326e6d307800000000000000000000000098DafDd1DC963785717c7e673533F5e05117AE05000000000000000000000000000000000000000000000000002386f26fc10000000000000000000000000000c4bf963aa86f272af84796c160598d326e6d3078000000000000000000000000E07B955c7aA98c14Eb2AFFD36A575a8722F1105F000000000000000000000000000000000000000000000000007fe5cf2bea0000000000000000000000000000c4bf963aa86f272af84796c160598d326e6d3078000000000000000000000000eF475E27c6586019FF79A6b600c89Bb6D39D23fb000000000000000000000000000000000000000000000000004e28e2290f00000000000000000000000000008ad9c8ebe26eadab9251b8fc36cd06a1ec399a7f0000000000000000000000005671037C789c46507cfDC3b3A2077499bD4496A400000000000000000000000000000000000000000000000001f161421c8e00000000000000000000000000008ad9c8ebe26eadab9251b8fc36cd06a1ec399a7f000000000000000000000000a6A0e8aF5d2b57CFEF1FC07D57b2Cd2f468d9B83000000000000000000000000000000000000000000000000015c2a7b13fd00000000000000000000000000008ad9c8ebe26eadab9251b8fc36cd06a1ec399a7f00000000000000000000000049c20c83EBB7a3722b9615B0133bf5e1B677f4e80000000000000000000000000000000000000000000000000186cc6acd4b00000000000000000000000000008ad9c8ebe26eadab9251b8fc36cd06a1ec399a7f000000000000000000000000f1fed6Ad8845206Fe4f570FB0fa10E5518D2D53A0000000000000000000000000000000000000000000000000146d983375600000000000000000000000000008ad9c8ebe26eadab9251b8fc36cd06a1ec399a7f000000000000000000000000cb3b9173E65e64F66618a7bf88ea456f9e4983d9000000000000000000000000000000000000000000000000016345785d8a00000000000000000000000000008ad9c8ebe26eadab9251b8fc36cd06a1ec399a7f000000000000000000000000362Fc673B5B7DF6B407038E670E331726e67cB7300000000000000000000000000000000000000000000000000ffcb9e57d400000000000000000000000000008ad9c8ebe26eadab9251b8fc36cd06a1ec399a7f0000000000000000000000004550bFD2Bebac08B5CE368630f6F17e272419cdc00000000000000000000000000000000000000000000000001351609ff7580000000000000000000000000008ad9c8ebe26eadab9251b8fc36cd06a1ec399a7f000000000000000000000000Fb647dC2bc3F02507FCa4c97E8241c7a03CE9Abe00000000000000000000000000000000000000000000000001351609ff7580000000000000000000000000008ad9c8ebe26eadab9251b8fc36cd06a1ec399a7f0000000000000000000000002AcefB268978f45d131B1ae296dfA179e0D18a950000000000000000000000000000000000000000000000000146d983375600000000000000000000000000008ad9c8ebe26eadab9251b8fc36cd06a1ec399a7f000000000000000000000000fc787375ffb55d780CF8E12a75A960B757a138A600000000000000000000000000000000000000000000000000ffcb9e57d400000000000000000000000000008ad9c8ebe26eadab9251b8fc36cd06a1ec399a7f000000000000000000000000Df181778E2e10EfcEd7523c8243e585B96CdF5c000000000000000000000000000000000000000000000000000b1a2bc2ec50000000000000000000000000000b268c230720d16c69a61cbee24731e3b2a3330a10000000000000000000000007F68766857f1277F263AfE67B8B753BA57a12B6800000000000000000000000000000000000000000000000001f161421c8e0000000000000000000000000000b268c230720d16c69a61cbee24731e3b2a3330a1000000000000000000000000286eA6A57c50fd35d65eB4264254b29E5a421AAA000000000000000000000000000000000000000000000000015c2a7b13fd0000000000000000000000000000b268c230720d16c69a61cbee24731e3b2a3330a10000000000000000000000008e52EF47605392D58df217Cf1E84cbdF99442c900000000000000000000000000000000000000000000000000186cc6acd4b0000000000000000000000000000b268c230720d16c69a61cbee24731e3b2a3330a1000000000000000000000000DB0850A46548441cA611B204AD1b6Bd00aff0F9c0000000000000000000000000000000000000000000000000146d98337560000000000000000000000000000b268c230720d16c69a61cbee24731e3b2a3330a1000000000000000000000000051D587f225A41FF2956Cf73cd3812f17c939cCE000000000000000000000000000000000000000000000000016345785d8a0000000000000000000000000000b268c230720d16c69a61cbee24731e3b2a3330a1000000000000000000000000ea8F2f3e1aED132179E38D777C20a8bdE9997f5E00000000000000000000000000000000000000000000000000ffcb9e57d40000000000000000000000000000b268c230720d16c69a61cbee24731e3b2a3330a1000000000000000000000000Bd8a78A1e4707278d0cda90F5f528F180a2ceA7900000000000000000000000000000000000000000000000001351609ff758000000000000000000000000000b268c230720d16c69a61cbee24731e3b2a3330a1000000000000000000000000B7D09f63d4C49D848bDe012c8A77F0E9f90697ff00000000000000000000000000000000000000000000000001351609ff758000000000000000000000000000b268c230720d16c69a61cbee24731e3b2a3330a1000000000000000000000000A67CAaD6A6daD70041F5320CbdA20c22Be6dc7D70000000000000000000000000000000000000000000000000146d98337560000000000000000000000000000b268c230720d16c69a61cbee24731e3b2a3330a1000000000000000000000000192453EeEB10fc1eD8a10309a15994Df6B47b1ae00000000000000000000000000000000000000000000000000ffcb9e57d40000000000000000000000000000b268c230720d16c69a61cbee24731e3b2a3330a100000000000000000000000065F325D33e5940E0e8649090e614Ee838dFf9eed00000000000000000000000000000000000000000000000000b1a2bc2ec5000000000000000000000000000024B4a6847cCb32972de40170C02FdA121DdC6a30000000000000000000000000F51987598F208851Fb44d7991Ef803BB26a5a61f000000000000000000000000000000000000000000000000016bb86e33be700000000000000000000000000024B4a6847cCb32972de40170C02FdA121DdC6a3000000000000000000000000036B097f718d9341369A928529AcEfc3D792948af00000000000000000000000000000000000000000000000002cf01fe4e2f380000000000000000000000000024B4a6847cCb32972de40170C02FdA121DdC6a30000000000000000000000000cff68308E75d0110a6364C3c4B913862071FebF800000000000000000000000000000000000000000000000004324776abb9380000000000000000000000000024B4a6847cCb32972de40170C02FdA121DdC6a300000000000000000000000008D931DE1224160fffa9207626b11044822dc2d850000000000000000000000000000000000000000000000000573b4d079bd2000000000000000000000000000698a10B5D0972bFFEa306BA5950BD74D2aF3C7CA0000000000000000000000008233a34fA1f0AF4fa3710d367F56F479800F16D90000000000000000000000000000000000000000000000000167c612a3dce800000000000000000000000000698a10B5D0972bFFEa306BA5950BD74D2aF3C7CA00000000000000000000000039E42CC24f84C10eC66a1dFc319ddE03fd798D7900000000000000000000000000000000000000000000000002ced3f91328a800000000000000000000000000698a10B5D0972bFFEa306BA5950BD74D2aF3C7CA0000000000000000000000005a8c6bF49dB4516B0ab88447b7cF3617fBdc400e0000000000000000000000000000000000000000000000000433b342eda23800000000000000000000000000698a10B5D0972bFFEa306BA5950BD74D2aF3C7CA00000000000000000000000012a9Eb74c601233f4A844E1F78A3b3959cb29aEf0000000000000000000000000000000000000000000000000576696502bc380000000000000000000000000014f018CCe044f9d3Fb1e1644dB6f2FAb70F6e3cb00000000000000000000000017Fb344Aa8b0ce4B8C8cf2E3a81cB1313aE937ce000000000000000000000000000000000000000000000000016bb86e33be700000000000000000000000000014f018CCe044f9d3Fb1e1644dB6f2FAb70F6e3cb00000000000000000000000094754b42A2AF29e0468f56C9B32fdDC7dEC6d98B00000000000000000000000000000000000000000000000002cf01fe4e2f380000000000000000000000000014f018CCe044f9d3Fb1e1644dB6f2FAb70F6e3cb000000000000000000000000D8F2D6880d728cd3a48906Fd44d993819C212B8200000000000000000000000000000000000000000000000004324776abb9380000000000000000000000000014f018CCe044f9d3Fb1e1644dB6f2FAb70F6e3cb000000000000000000000000057e009e6160092283F4862DF00E4eA7F537D6cf0000000000000000000000000000000000000000000000000573b4d079bd20000000000000000000000000005f57bbccc7ffa4c46864b5ed999a271bc36bb0ce0000000000000000000000001bebCC3AEd7b4CbD93Fc748597c947AeB583a252000000000000000000000000000000000000000000000000016bb86e33be70000000000000000000000000005f57bbccc7ffa4c46864b5ed999a271bc36bb0ce00000000000000000000000029aAA1AE379CcfA8976FFB6211B4734E9b8Cc96700000000000000000000000000000000000000000000000002cf01fe4e2f38000000000000000000000000005f57bbccc7ffa4c46864b5ed999a271bc36bb0ce0000000000000000000000005d8DB28405e44c16068Bb82D0aDE924e4b75706800000000000000000000000000000000000000000000000004324776abb938000000000000000000000000005f57bbccc7ffa4c46864b5ed999a271bc36bb0ce000000000000000000000000ef62209bB9DFa07906089AF418Cd23184DF952470000000000000000000000000000000000000000000000000573b4d079bd20000000000000000000000000009e454fe7d8e087fcac4ec8c40562de781004477e000000000000000000000000c7fE5964B2327008D532B3d60822eB288651af85000000000000000000000000000000000000000000000000016345785d8a00000000000000000000000000009e454fe7d8e087fcac4ec8c40562de781004477e000000000000000000000000e1869e50C297c96d59fBDDc7bF0dAD37C958749300000000000000000000000000000000000000000000000002c68af0bb1400000000000000000000000000009e454fe7d8e087fcac4ec8c40562de781004477e0000000000000000000000006Eeb3f390d30138dAd669d1C310749D3C5BfB79B0000000000000000000000000000000000000000000000000429d069189e00000000000000000000000000009e454fe7d8e087fcac4ec8c40562de781004477e00000000000000000000000086b60668519649E7A4a1374Db0Bb0572A498a98F000000000000000000000000000000000000000000000000058d15e176280000000000000000000000000000c59119d8e4d129890036a108aed9d9fe94db1ba9000000000000000000000000794A044323172908D48e782c8db939B0Df7f83ae000000000000000000000000000000000000000000000000016345785d8a0000000000000000000000000000c59119d8e4d129890036a108aed9d9fe94db1ba9000000000000000000000000d60A1A08582f0B3f5f2cC47862DC8b5B5d1988cb00000000000000000000000000000000000000000000000002c68af0bb140000000000000000000000000000c59119d8e4d129890036a108aed9d9fe94db1ba9000000000000000000000000954793ee97503195B0D27af85002320f290dc8600000000000000000000000000000000000000000000000000429d069189e0000000000000000000000000000c59119d8e4d129890036a108aed9d9fe94db1ba90000000000000000000000003D689FdB204A6bdB29aeb5c64de2871c451fB49A000000000000000000000000000000000000000000000000058d15e1762800000000000000000000000000004fcc7ca22680aed155f981eeb13089383d624aa9000000000000000000000000cDac44171d183528ABb016b214B08fe76C254032000000000000000000000000000000000000000000000000016345785d8a00000000000000000000000000004fcc7ca22680aed155f981eeb13089383d624aa90000000000000000000000006C081F0A4D7af43ED2f257CA6bAff6059e26F12900000000000000000000000000000000000000000000000002c68af0bb1400000000000000000000000000004fcc7ca22680aed155f981eeb13089383d624aa90000000000000000000000006dbb05d50BE6dA5f255C3Cd182a3E14C69DB634F0000000000000000000000000000000000000000000000000429d069189e00000000000000000000000000004fcc7ca22680aed155f981eeb13089383d624aa9000000000000000000000000328ac69Cc6dbd41060F67e3D85491b3ef41a2ea4000000000000000000000000000000000000000000000000058d15e176280000000000000000000000000000fc2e9a5cd1bb9b3953ffa7e6ddf0c0447eb95f11000000000000000000000000b0a320d3Ed2B0f07282B1c89002f31BE913F4849000000000000000000000000000000000000000000000000016345785d8a0000000000000000000000000000fc2e9a5cd1bb9b3953ffa7e6ddf0c0447eb95f110000000000000000000000009022dC2347F7050a752dFfa63F306022a583e8E100000000000000000000000000000000000000000000000002c68af0bb140000000000000000000000000000fc2e9a5cd1bb9b3953ffa7e6ddf0c0447eb95f11000000000000000000000000536e10bE5cED4b0D153E7433512964789448586e0000000000000000000000000000000000000000000000000429d069189e0000000000000000000000000000fc2e9a5cd1bb9b3953ffa7e6ddf0c0447eb95f11000000000000000000000000AbD92344c1e4B6e0acbf206d4ACe029D639a3a53000000000000000000000000000000000000000000000000058d15e1762800000000000000000000000000008d29a24f91df381feb4ee7f05405d3fb888c643e000000000000000000000000d6eD2D91816276b5b52791546A6E0f236afEe840000000000000000000000000000000000000000000000000016345785d8a00000000000000000000000000008d29a24f91df381feb4ee7f05405d3fb888c643e00000000000000000000000062e6EcfEF0355B83Da93Cb57eBa0148a16b1bc8b00000000000000000000000000000000000000000000000002c68af0bb1400000000000000000000000000008d29a24f91df381feb4ee7f05405d3fb888c643e000000000000000000000000FA163382e1a696362E74CA1fC47D2037B2Dd56760000000000000000000000000000000000000000000000000429d069189e00000000000000000000000000008d29a24f91df381feb4ee7f05405d3fb888c643e0000000000000000000000000F7706ddf2D7dF0597683BAf02BeE142a534F206000000000000000000000000000000000000000000000000058d15e17628000000000000000000000000000063c5ffb388d83477a15eb940cfa23991ca0b30f000000000000000000000000044F84ED0D2f2fb5d5dee313B037150FB0eea91B5000000000000000000000000000000000000000000000000016345785d8a000000000000000000000000000063c5ffb388d83477a15eb940cfa23991ca0b30f0000000000000000000000000462cACa81f6a41C6d06138947dd134C907A178e100000000000000000000000000000000000000000000000002c68af0bb14000000000000000000000000000063c5ffb388d83477a15eb940cfa23991ca0b30f0000000000000000000000000Be6C39CB2C166A6E93069F72623772F42eaF78A10000000000000000000000000000000000000000000000000429d069189e000000000000000000000000000063c5ffb388d83477a15eb940cfa23991ca0b30f00000000000000000000000006Ba785faDaA1CcA3dA7DdCF5e8dc94f0747C1f80000000000000000000000000000000000000000000000000058d15e1762800000000000000000000000000005f84660cabb98f7b7764cd1ae2553442da91984e0000000000000000000000009f0E6C9d4e73e715f744993191a90A8dE201D830000000000000000000000000000000000000000000000000016345785d8a00000000000000000000000000005f84660cabb98f7b7764cd1ae2553442da91984e0000000000000000000000009035771D02E2422d85976040c427e8B36776a4b900000000000000000000000000000000000000000000000002c68af0bb1400000000000000000000000000005f84660cabb98f7b7764cd1ae2553442da91984e0000000000000000000000004f7cad9D799b256b8a45d7B00aB66B5E1843d2E80000000000000000000000000000000000000000000000000429d069189e00000000000000000000000000005f84660cabb98f7b7764cd1ae2553442da91984e0000000000000000000000005a2EDbC829F14F23Ed8ba169a0EA0bBD7aeb91F5000000000000000000000000000000000000000000000000058d15e176280000000000000000000000000000c3aa4ced5dea58a3d1ca76e507515c79ca1e4436000000000000000000000000F04a0FAca77239a508cC93F0d7e944C6e754eBbc000000000000000000000000000000000000000000000000016345785d8a0000000000000000000000000000c3aa4ced5dea58a3d1ca76e507515c79ca1e44360000000000000000000000001b752DC3450beF2E6EA5f57CE5Fae72A5F73c5Ca00000000000000000000000000000000000000000000000002c68af0bb140000000000000000000000000000c3aa4ced5dea58a3d1ca76e507515c79ca1e44360000000000000000000000006a72cE334a16B842baDA84c2A6f474De3a6609050000000000000000000000000000000000000000000000000429d069189e0000000000000000000000000000c3aa4ced5dea58a3d1ca76e507515c79ca1e44360000000000000000000000000e241fc10a5FBA63f8BD9150000e6e798cefBE81000000000000000000000000000000000000000000000000058d15e17628000000000000000000000000000047fc47cbcc5217740905e16c4c953b2f247369d2000000000000000000000000008b26999De58A891023A9582b21b8daa0323a03000000000000000000000000000000000000000000000000016345785d8a000000000000000000000000000047fc47cbcc5217740905e16c4c953b2f247369d2000000000000000000000000A83CA3AFF44B17A8386fd6747eFF20A06eBB141900000000000000000000000000000000000000000000000002c68af0bb14000000000000000000000000000047fc47cbcc5217740905e16c4c953b2f247369d2000000000000000000000000536eAfeBb8d82F154bbCA8a59f42267966d75E340000000000000000000000000000000000000000000000000429d069189e000000000000000000000000000047fc47cbcc5217740905e16c4c953b2f247369d20000000000000000000000000928844D610661B49AA8749673eE481987f0C62e000000000000000000000000000000000000000000000000058d15e176280000000000000000000000000000082705fabf49bd30de8f0222821f6d940713b89d00000000000000000000000077573D54dD0B56C8661cA2092Ee09F9406886725000000000000000000000000000000000000000000000000016345785d8a0000000000000000000000000000082705fabf49bd30de8f0222821f6d940713b89d0000000000000000000000001a9A9e6FA2b0DF69406F7994987510B64DAC6D2000000000000000000000000000000000000000000000000002c68af0bb140000000000000000000000000000082705fabf49bd30de8f0222821f6d940713b89d00000000000000000000000023403c5534C6a3cDfFcc06263e8b451b72E93Db80000000000000000000000000000000000000000000000000429d069189e0000000000000000000000000000082705fabf49bd30de8f0222821f6d940713b89d00000000000000000000000063Ba79503643F03F5426fFffFc373e70eFAA3D12000000000000000000000000000000000000000000000000058d15e176280000000000000000000000000000cb2d434bf72d3cd43d0c368493971183640ffe9900000000000000000000000074D0768Bd0851CEfC17D1adabDf534938B7Aa1Ad000000000000000000000000000000000000000000000000016345785d8a0000000000000000000000000000cb2d434bf72d3cd43d0c368493971183640ffe9900000000000000000000000052b0b7a0A6BeD68B3a6f9F884863d89713429fd800000000000000000000000000000000000000000000000002c68af0bb140000000000000000000000000000cb2d434bf72d3cd43d0c368493971183640ffe990000000000000000000000007feC349Da1a1fBa7d0265446342F48780bb045890000000000000000000000000000000000000000000000000429d069189e0000000000000000000000000000cb2d434bf72d3cd43d0c368493971183640ffe9900000000000000000000000063A6632609C193B177e04277cbc908D01BE72423000000000000000000000000000000000000000000000000058d15e176280000000000000000000000000000de59cd3aa43a2bf863723662b31906660c7d12b6000000000000000000000000404EfB4C2e23BbcF429c993bB40490BE78d628DE000000000000000000000000000000000000000000000000016345785d8a0000000000000000000000000000de59cd3aa43a2bf863723662b31906660c7d12b60000000000000000000000005ff1Eeb9d9704577D3c1d7eC910861906D08BB1600000000000000000000000000000000000000000000000002c68af0bb140000000000000000000000000000de59cd3aa43a2bf863723662b31906660c7d12b6000000000000000000000000EDb765C6BBFA04Fe74C86e8aa4a284E2594422cb0000000000000000000000000000000000000000000000000429d069189e0000000000000000000000000000de59cd3aa43a2bf863723662b31906660c7d12b60000000000000000000000004872E23216cF74B5440F59219497b339b93461A5000000000000000000000000000000000000000000000000058d15e1762800000000000000000000000000003ac7a6c3a2ff08613b611485f795d07e785cbb950000000000000000000000008A0A6C017a6F0FDE5AFBF0090e78bF92322B36A5000000000000000000000000000000000000000000000000016345785d8a00000000000000000000000000003ac7a6c3a2ff08613b611485f795d07e785cbb95000000000000000000000000fe7677dB081388DC65fd4fFE61e97D8a9Cdd9F7300000000000000000000000000000000000000000000000002c68af0bb1400000000000000000000000000003ac7a6c3a2ff08613b611485f795d07e785cbb95000000000000000000000000ceA17912e8718EBB0C97702D6f3cd9AbbdA38Ad30000000000000000000000000000000000000000000000000429d069189e00000000000000000000000000003ac7a6c3a2ff08613b611485f795d07e785cbb95000000000000000000000000AEA3916B5d6095564d8ea776E3ECD614189DBD78000000000000000000000000000000000000000000000000058d15e176280000000000000000000000000000efbaaf73fc22f70785515c1e2be3d5ba2fb8e9b0000000000000000000000000552Be8F9DD7f356adef19be0e67aE8c995E1Ab0E000000000000000000000000000000000000000000000000016345785d8a0000000000000000000000000000efbaaf73fc22f70785515c1e2be3d5ba2fb8e9b0000000000000000000000000A527cE60d03A3549620a008c1cF8a3177dc115ae00000000000000000000000000000000000000000000000002c68af0bb140000000000000000000000000000efbaaf73fc22f70785515c1e2be3d5ba2fb8e9b0000000000000000000000000A47FC36Bc3765358e966967f2d71780C9267B5370000000000000000000000000000000000000000000000000429d069189e0000000000000000000000000000efbaaf73fc22f70785515c1e2be3d5ba2fb8e9b0000000000000000000000000df5c22a18c6D3C15739FFfadcD85f566a7768Cc7000000000000000000000000000000000000000000000000058d15e1762800000000000000000000000000005cf4bbb0ff093f3c725abec32fba8f34e4e98af100000000000000000000000062BA95aDc3dC0280D7A07364643F13FcB0994291000000000000000000000000000000000000000000000000016345785d8a00000000000000000000000000005cf4bbb0ff093f3c725abec32fba8f34e4e98af10000000000000000000000003976AE1770B89b6681D877F3209ecf0dB8f495dE00000000000000000000000000000000000000000000000002c68af0bb1400000000000000000000000000005cf4bbb0ff093f3c725abec32fba8f34e4e98af100000000000000000000000069d4EB63b76C2fb05B9b5397d659524A83c787e30000000000000000000000000000000000000000000000000429d069189e00000000000000000000000000005cf4bbb0ff093f3c725abec32fba8f34e4e98af10000000000000000000000005fB5A5dCBd75197d0318A44FBB6012304bD9E44f000000000000000000000000000000000000000000000000058d15e17628000000000000000000000000000066f25f036eb4463d8a45c6594a325f9e89baa6db000000000000000000000000E2Ab3458cd61fa6A57d128d6EAaC015a47053Cd9000000000000000000000000000000000000000000000000016345785d8a000000000000000000000000000066f25f036eb4463d8a45c6594a325f9e89baa6db000000000000000000000000C592dD780E0016B9B5436c005435c2e2c152988200000000000000000000000000000000000000000000000002c68af0bb14000000000000000000000000000066f25f036eb4463d8a45c6594a325f9e89baa6db000000000000000000000000a671532eF1010883EF21Bb5408BbbA1519561FEf0000000000000000000000000000000000000000000000000429d069189e000000000000000000000000000066f25f036eb4463d8a45c6594a325f9e89baa6db0000000000000000000000002e90BDd3bEFbdca1e780B573aD74cE942955B4CA000000000000000000000000000000000000000000000000058d15e1762800000000000000000000000000005a7350d95b9e644dcab4bc642707f43a361bf62800000000000000000000000060A410062F28B5B6b503Bb8bF8EFeBA2D1A31EB9000000000000000000000000000000000000000000000000016345785d8a00000000000000000000000000005a7350d95b9e644dcab4bc642707f43a361bf628000000000000000000000000B4839d0b07668a2095C8307AB42bF3867242faC400000000000000000000000000000000000000000000000002c68af0bb1400000000000000000000000000005a7350d95b9e644dcab4bc642707f43a361bf628000000000000000000000000BfB04cB3b4B8f1f22A64AF8e3701F91814e3d0710000000000000000000000000000000000000000000000000429d069189e00000000000000000000000000005a7350d95b9e644dcab4bc642707f43a361bf6280000000000000000000000009A91AC798b16fc6BB348C5Cb3d3Ffc7ef200e5BF000000000000000000000000000000000000000000000000058d15e176280000000000000000000000000000cfef27288bedcd587a1ed6e86a996c8c5b01d7c1000000000000000000000000fb15a3C8B8A257dB077A65eC53FF2046787A0085000000000000000000000000000000000000000000000000016345785d8a0000000000000000000000000000cfef27288bedcd587a1ed6e86a996c8c5b01d7c100000000000000000000000031700bD38e3BC93a9C51c0f8816a3fe40bC3151400000000000000000000000000000000000000000000000002c68af0bb140000000000000000000000000000cfef27288bedcd587a1ed6e86a996c8c5b01d7c1000000000000000000000000d59B78051c1795c531221bF320398386950AD1850000000000000000000000000000000000000000000000000429d069189e0000000000000000000000000000cfef27288bedcd587a1ed6e86a996c8c5b01d7c100000000000000000000000054925d79bf5d4AD8378baF4aA8fC1A213431c271000000000000000000000000000000000000000000000000058d15e176280000000000000000000000000000be30069d27a250f90c2ee5507bcaca5f868265f7000000000000000000000000819b593aC8De75c0F1dc11d2A6Bbe2b9404a8E94000000000000000000000000000000000000000000000000016345785d8a0000000000000000000000000000be30069d27a250f90c2ee5507bcaca5f868265f7000000000000000000000000B6c980544508b7db8ad9032cCb9A4987BE76fA4500000000000000000000000000000000000000000000000002c68af0bb140000000000000000000000000000be30069d27a250f90c2ee5507bcaca5f868265f7000000000000000000000000d8d0a326a007F472D86E03C3b7629F5B4e71C6210000000000000000000000000000000000000000000000000429d069189e0000000000000000000000000000be30069d27a250f90c2ee5507bcaca5f868265f7000000000000000000000000b286643290Ca87e34f6f3a8c4EAB0DA37BfbFeEB000000000000000000000000000000000000000000000000058d15e176280000000000000000000000000000d282337950ac6e936d0f0ebaaff1ffc3de79f3d50000000000000000000000004add5A47D7abcba09F65621c5fD3333505559Ccc000000000000000000000000000000000000000000000000016345785d8a0000000000000000000000000000d282337950ac6e936d0f0ebaaff1ffc3de79f3d50000000000000000000000009a01BCEba145962aB8Bb6a55fe897A3B3B28691700000000000000000000000000000000000000000000000002c68af0bb140000000000000000000000000000d282337950ac6e936d0f0ebaaff1ffc3de79f3d5000000000000000000000000fAd60348410B878265679AfaA4203fef4013c3120000000000000000000000000000000000000000000000000429d069189e0000000000000000000000000000d282337950ac6e936d0f0ebaaff1ffc3de79f3d5000000000000000000000000B9D58Cc331B9547B640bed34337C2D6deD210cB1000000000000000000000000000000000000000000000000058d15e1762800000000000000000000000000005a66650e5345d76eb8136ea1490cbcce1c08072e0000000000000000000000005B357EaE1fb1db3590afebE2acd2f736Db33b3cF000000000000000000000000000000000000000000000000016345785d8a00000000000000000000000000005a66650e5345d76eb8136ea1490cbcce1c08072e000000000000000000000000EaDc12E4416A71E04901ab69724985a66ac2E6Dc00000000000000000000000000000000000000000000000002c68af0bb1400000000000000000000000000005a66650e5345d76eb8136ea1490cbcce1c08072e000000000000000000000000dFeD9e1c8C08e66481fD11D200FFB9B003A986aE0000000000000000000000000000000000000000000000000429d069189e00000000000000000000000000005a66650e5345d76eb8136ea1490cbcce1c08072e000000000000000000000000b5CE7d7ABFd589eba233D3B6f366b657831b9c2D000000000000000000000000000000000000000000000000058d15e176280000000000000000000000000000942dcbc5f83f954d71f06321ef90ac3b0d0b9c8a00000000000000000000000001d9a62Da0094a948dd2113D8B11eCd8fa653fa8000000000000000000000000000000000000000000000000016345785d8a0000000000000000000000000000942dcbc5f83f954d71f06321ef90ac3b0d0b9c8a0000000000000000000000004E1B415fA2b727691322BE15e555d527E404222E00000000000000000000000000000000000000000000000002c68af0bb140000000000000000000000000000942dcbc5f83f954d71f06321ef90ac3b0d0b9c8a000000000000000000000000b5ab4BF4Ce5779b165C4A64f0d5a5BC388B13F0a0000000000000000000000000000000000000000000000000429d069189e0000000000000000000000000000942dcbc5f83f954d71f06321ef90ac3b0d0b9c8a000000000000000000000000758aBb104467897da20d1d2Db47869D7bEe37869000000000000000000000000000000000000000000000000058d15e176280000000000000000000000000000DF437625216cCa3d7148E18d09F4aAB0D47c763b000000000000000000000000244327cfe5a7AAcd313Fe643ad185536d29CEd30000000000000000000000000000000000000000000000000016345785d8a0000000000000000000000000000DF437625216cCa3d7148E18d09F4aAB0D47c763b0000000000000000000000007Ed99076E22fe2C321D65715dea526FD3E11B8CB00000000000000000000000000000000000000000000000002c68af0bb140000000000000000000000000000DF437625216cCa3d7148E18d09F4aAB0D47c763b0000000000000000000000001D8d61d64696A9e29673eDB8a05df6f824Ac13590000000000000000000000000000000000000000000000000429d069189e0000000000000000000000000000DF437625216cCa3d7148E18d09F4aAB0D47c763b0000000000000000000000008357322C624219300d266092d6766FA1EB43F9A5000000000000000000000000000000000000000000000000058d15e17628000000000000000000000000000002fc8e99401b970c265480140721b28bb3af85ab00000000000000000000000003bd5fa10bFe2d92F5998d80a88600A98F46d3300000000000000000000000000000000000000000000000000de0b6b3a7640000000000000000000000000000657a127639b9e0ccccfbe795a8e394d5ca15852600000000000000000000000093E5cC54Be10e99568D357a3E15438f56eFD840F0000000000000000000000000000000000000000000000000de0b6b3a7640000000000000000000000000000ba385610025b1ea8091ae3e4a2e98913e2691ff7000000000000000000000000465E689865D221b49e9938e85bD2C3355f5B69410000000000000000000000000000000000000000000000000de0b6b3a7640000000000000000000000000000cd74834b8f3f71d2e82c6240ae0291c563785356000000000000000000000000aFD2A2bf874B1B5be69bdC46AC64b250f07879180000000000000000000000000000000000000000000000000de0b6b3a7640000000000000000000000000000d28661e4c75d177d9c1f3c8b821902c1abd103a6000000000000000000000000F21229F30De4D980279484e0dFb7A92EcF47C06a0000000000000000000000000000000000000000000000000de0b6b3a7640000000000000000000000000000bae85de9858375706dde5907c8c9c6ee22b19212000000000000000000000000ad2BfC69f71FE3DFc94193c5C91Af6d521fb56cf0000000000000000000000000000000000000000000000000de0b6b3a7640000000000000000000000000000e7ad11517d7254f6a0758cee932bffa328002dd00000000000000000000000008792b0E6Aae17Ac58333548F156656aEE179552C0000000000000000000000000000000000000000000000000de0b6b3a76400000000000000000000000000006b39195c164d693d3b6518b70d99877d4f7c87ef0000000000000000000000007AbbdEE2153b734796aE3AE3Fb687E1e0C8798610000000000000000000000000000000000000000000000000de0b6b3a76400000000000000000000000000006b55187ec97cd9ae8831a11614c95042fc621361000000000000000000000000A7b123D54BcEc14b4206dAb796982a6d5aaA67700000000000000000000000000000000000000000000000000de0b6b3a76400000000000000000000000000004903dc97816f99410e8dfff51149fa4c3cdad1b80000000000000000000000006bab6EB87Aa5a1e4A8310C73bDAAA8A5dAAd81C10000000000000000000000000000000000000000000000000de0b6b3a76400000000000000000000000000008762db106b2c2a0bccb3a80d1ed41273552616e8000000000000000000000000A7b123D54BcEc14b4206dAb796982a6d5aaA67700000000000000000000000000000000000000000000000000de0b6b3a7640000","EVMVersion":"Default","Library":"","LicenseType":"None","Proxy":"0","Implementation":"","SwarmSource":"ipfs://5c36139a121e82091af76ce2170afcbe41e2fe31f57117997a02ad4cc6ebcd4d"}]}