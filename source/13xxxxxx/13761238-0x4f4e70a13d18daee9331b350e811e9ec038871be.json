{"status":"1","message":"OK","result":[{"SourceCode":"{{\r\n  \"language\": \"Solidity\",\r\n  \"settings\": {\r\n    \"evmVersion\": \"istanbul\",\r\n    \"libraries\": {},\r\n    \"metadata\": {\r\n      \"bytecodeHash\": \"ipfs\",\r\n      \"useLiteralContent\": true\r\n    },\r\n    \"optimizer\": {\r\n      \"enabled\": true,\r\n      \"runs\": 1000\r\n    },\r\n    \"remappings\": [],\r\n    \"outputSelection\": {\r\n      \"*\": {\r\n        \"*\": [\r\n          \"evm.bytecode\",\r\n          \"evm.deployedBytecode\",\r\n          \"devdoc\",\r\n          \"userdoc\",\r\n          \"metadata\",\r\n          \"abi\"\r\n        ]\r\n      }\r\n    }\r\n  },\r\n  \"sources\": {\r\n    \"@openzeppelin/contracts/token/ERC20/IERC20.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.0 (token/ERC20/IERC20.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC20 standard as defined in the EIP.\\n */\\ninterface IERC20 {\\n    /**\\n     * @dev Returns the amount of tokens in existence.\\n     */\\n    function totalSupply() external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the amount of tokens owned by `account`.\\n     */\\n    function balanceOf(address account) external view returns (uint256);\\n\\n    /**\\n     * @dev Moves `amount` tokens from the caller's account to `recipient`.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transfer(address recipient, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Returns the remaining number of tokens that `spender` will be\\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\\n     * zero by default.\\n     *\\n     * This value changes when {approve} or {transferFrom} are called.\\n     */\\n    function allowance(address owner, address spender) external view returns (uint256);\\n\\n    /**\\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\\n     * that someone may use both the old and the new allowance by unfortunate\\n     * transaction ordering. One possible solution to mitigate this race\\n     * condition is to first reduce the spender's allowance to 0 and set the\\n     * desired value afterwards:\\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address spender, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Moves `amount` tokens from `sender` to `recipient` using the\\n     * allowance mechanism. `amount` is then deducted from the caller's\\n     * allowance.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(\\n        address sender,\\n        address recipient,\\n        uint256 amount\\n    ) external returns (bool);\\n\\n    /**\\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\\n     * another (`to`).\\n     *\\n     * Note that `value` may be zero.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 value);\\n\\n    /**\\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\\n     * a call to {approve}. `value` is the new allowance.\\n     */\\n    event Approval(address indexed owner, address indexed spender, uint256 value);\\n}\\n\"\r\n    },\r\n    \"contracts/lbp/UniAddLiquidity.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: GPL-3.0\\npragma solidity ^0.8.0;\\nimport {IERC20} from \\\"@openzeppelin/contracts/token/ERC20/IERC20.sol\\\";\\n\\ninterface UniswapV2Router02 {\\n  function addLiquidity(\\n    address,\\n    address,\\n    uint256,\\n    uint256,\\n    uint256,\\n    uint256,\\n    address,\\n    uint256\\n  ) external;\\n}\\n\\ncontract UniAddLiquidity {\\n  address public constant UNI_ROUTER = 0x7a250d5630B4cF539739dF2C5dAcb4c659F2488D;\\n  address public constant POP = 0xD0Cd466b34A24fcB2f87676278AF2005Ca8A78c4;\\n  address public constant USDC = 0xA0b86991c6218b36c1d19D4a2e9Eb0cE3606eB48;\\n\\n  uint256 public popLiquidity = 0;\\n  uint256 public usdcLiquidity = 0;\\n  uint256 public minPopLiquidity = 0;\\n  uint256 public minUsdcLiquidity = 0;\\n\\n  address public immutable admin;\\n  address public immutable dao;\\n\\n  constructor(address _admin, address _dao) {\\n    admin = _admin;\\n    dao = _dao;\\n  }\\n\\n  function setLiquidity(\\n    uint256 _popLiquidity,\\n    uint256 _usdcLiquidity,\\n    uint256 _minPopLiquidity,\\n    uint256 _minUsdcLiquidity\\n  ) public {\\n    require(msg.sender == admin, \\\"Sender must be admin\\\");\\n    require(_popLiquidity <= 500_000e18, \\\"POP liquidity must not exceed maximum\\\");\\n    require(_usdcLiquidity <= 1_000_000e6, \\\"USDC liquidity must not exceed maximum\\\");\\n    require(_minPopLiquidity <= _popLiquidity);\\n    require(_minUsdcLiquidity <= _usdcLiquidity);\\n\\n    popLiquidity = _popLiquidity;\\n    usdcLiquidity = _usdcLiquidity;\\n    minPopLiquidity = _minPopLiquidity;\\n    minUsdcLiquidity = _minUsdcLiquidity;\\n  }\\n\\n  function addLiquidity() public {\\n    require(IERC20(POP).transferFrom(msg.sender, address(this), popLiquidity), \\\"Transfer of POP must succeed\\\");\\n    require(IERC20(USDC).transferFrom(msg.sender, address(this), usdcLiquidity), \\\"Transfer of USDC must succeed\\\");\\n    IERC20(POP).approve(UNI_ROUTER, popLiquidity);\\n    IERC20(USDC).approve(UNI_ROUTER, usdcLiquidity);\\n    UniswapV2Router02(UNI_ROUTER).addLiquidity(\\n      POP,\\n      USDC,\\n      popLiquidity,\\n      usdcLiquidity,\\n      minPopLiquidity,\\n      minUsdcLiquidity,\\n      dao,\\n      block.timestamp + 1 days\\n    );\\n  }\\n}\\n\"\r\n    }\r\n  }\r\n}}","ABI":"[{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_admin\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_dao\",\"type\":\"address\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"inputs\":[],\"name\":\"POP\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"UNI_ROUTER\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"USDC\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"addLiquidity\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"admin\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"dao\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"minPopLiquidity\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"minUsdcLiquidity\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"popLiquidity\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_popLiquidity\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_usdcLiquidity\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_minPopLiquidity\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_minUsdcLiquidity\",\"type\":\"uint256\"}],\"name\":\"setLiquidity\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"usdcLiquidity\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"}]","ContractName":"UniAddLiquidity","CompilerVersion":"v0.8.0+commit.c7dfd78e","OptimizationUsed":"1","Runs":"1000","ConstructorArguments":"000000000000000000000000084e8a8cf1c38def1d6db8542a73aa0d54284f8d0000000000000000000000000ec6290abb4714ba5f1371647894ce53c6dd673a","EVMVersion":"Default","Library":"","LicenseType":"GNU GPLv3","Proxy":"0","Implementation":"","SwarmSource":""}]}