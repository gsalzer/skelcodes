{"status":"1","message":"OK","result":[{"SourceCode":"pragma solidity ^0.8.0;\r\n\r\n\r\n// SPDX-License-Identifier: MIT\r\n// CAUTION\r\n// This version of SafeMath should only be used with Solidity 0.8 or later,\r\n// because it relies on the compiler's built in overflow checks.\r\n/**\r\n * @dev Wrappers over Solidity's arithmetic operations.\r\n *\r\n * NOTE: `SafeMath` is no longer needed starting with Solidity 0.8. The compiler\r\n * now has built in overflow checking.\r\n */\r\nlibrary SafeMath {\r\n    /**\r\n     * @dev Returns the addition of two unsigned integers, with an overflow flag.\r\n     *\r\n     * _Available since v3.4._\r\n     */\r\n    function tryAdd(uint256 a, uint256 b) internal pure returns (bool, uint256) {\r\n        unchecked {\r\n            uint256 c = a + b;\r\n            if (c < a) return (false, 0);\r\n            return (true, c);\r\n        }\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the substraction of two unsigned integers, with an overflow flag.\r\n     *\r\n     * _Available since v3.4._\r\n     */\r\n    function trySub(uint256 a, uint256 b) internal pure returns (bool, uint256) {\r\n        unchecked {\r\n            if (b > a) return (false, 0);\r\n            return (true, a - b);\r\n        }\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the multiplication of two unsigned integers, with an overflow flag.\r\n     *\r\n     * _Available since v3.4._\r\n     */\r\n    function tryMul(uint256 a, uint256 b) internal pure returns (bool, uint256) {\r\n        unchecked {\r\n            // Gas optimization: this is cheaper than requiring 'a' not being zero, but the\r\n            // benefit is lost if 'b' is also tested.\r\n            // See: https://github.com/OpenZeppelin/openzeppelin-contracts/pull/522\r\n            if (a == 0) return (true, 0);\r\n            uint256 c = a * b;\r\n            if (c / a != b) return (false, 0);\r\n            return (true, c);\r\n        }\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the division of two unsigned integers, with a division by zero flag.\r\n     *\r\n     * _Available since v3.4._\r\n     */\r\n    function tryDiv(uint256 a, uint256 b) internal pure returns (bool, uint256) {\r\n        unchecked {\r\n            if (b == 0) return (false, 0);\r\n            return (true, a / b);\r\n        }\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the remainder of dividing two unsigned integers, with a division by zero flag.\r\n     *\r\n     * _Available since v3.4._\r\n     */\r\n    function tryMod(uint256 a, uint256 b) internal pure returns (bool, uint256) {\r\n        unchecked {\r\n            if (b == 0) return (false, 0);\r\n            return (true, a % b);\r\n        }\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the addition of two unsigned integers, reverting on\r\n     * overflow.\r\n     *\r\n     * Counterpart to Solidity's `+` operator.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - Addition cannot overflow.\r\n     */\r\n    function add(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        return a + b;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the subtraction of two unsigned integers, reverting on\r\n     * overflow (when the result is negative).\r\n     *\r\n     * Counterpart to Solidity's `-` operator.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - Subtraction cannot overflow.\r\n     */\r\n    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        return a - b;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the multiplication of two unsigned integers, reverting on\r\n     * overflow.\r\n     *\r\n     * Counterpart to Solidity's `*` operator.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - Multiplication cannot overflow.\r\n     */\r\n    function mul(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        return a * b;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the integer division of two unsigned integers, reverting on\r\n     * division by zero. The result is rounded towards zero.\r\n     *\r\n     * Counterpart to Solidity's `/` operator.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - The divisor cannot be zero.\r\n     */\r\n    function div(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        return a / b;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\r\n     * reverting when dividing by zero.\r\n     *\r\n     * Counterpart to Solidity's `%` operator. This function uses a `revert`\r\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\r\n     * invalid opcode to revert (consuming all remaining gas).\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - The divisor cannot be zero.\r\n     */\r\n    function mod(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        return a % b;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the subtraction of two unsigned integers, reverting with custom message on\r\n     * overflow (when the result is negative).\r\n     *\r\n     * CAUTION: This function is deprecated because it requires allocating memory for the error\r\n     * message unnecessarily. For custom revert reasons use {trySub}.\r\n     *\r\n     * Counterpart to Solidity's `-` operator.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - Subtraction cannot overflow.\r\n     */\r\n    function sub(\r\n        uint256 a,\r\n        uint256 b,\r\n        string memory errorMessage\r\n    ) internal pure returns (uint256) {\r\n        unchecked {\r\n            require(b <= a, errorMessage);\r\n            return a - b;\r\n        }\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the integer division of two unsigned integers, reverting with custom message on\r\n     * division by zero. The result is rounded towards zero.\r\n     *\r\n     * Counterpart to Solidity's `/` operator. Note: this function uses a\r\n     * `revert` opcode (which leaves remaining gas untouched) while Solidity\r\n     * uses an invalid opcode to revert (consuming all remaining gas).\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - The divisor cannot be zero.\r\n     */\r\n    function div(\r\n        uint256 a,\r\n        uint256 b,\r\n        string memory errorMessage\r\n    ) internal pure returns (uint256) {\r\n        unchecked {\r\n            require(b > 0, errorMessage);\r\n            return a / b;\r\n        }\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\r\n     * reverting with custom message when dividing by zero.\r\n     *\r\n     * CAUTION: This function is deprecated because it requires allocating memory for the error\r\n     * message unnecessarily. For custom revert reasons use {tryMod}.\r\n     *\r\n     * Counterpart to Solidity's `%` operator. This function uses a `revert`\r\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\r\n     * invalid opcode to revert (consuming all remaining gas).\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - The divisor cannot be zero.\r\n     */\r\n    function mod(\r\n        uint256 a,\r\n        uint256 b,\r\n        string memory errorMessage\r\n    ) internal pure returns (uint256) {\r\n        unchecked {\r\n            require(b > 0, errorMessage);\r\n            return a % b;\r\n        }\r\n    }\r\n}\r\n\r\ninterface IMinerManage {\r\n\r\n    function setOracleAddress(address _oracleAddress) external;\r\n    function minerAdjustedStoragePowerInTiB(string memory minerId) external view returns(uint256);\r\n    function whiteList(address walletAddress) external returns(bool);\r\n    function minerInfoMap(address walletAddress) external returns(string memory);\r\n    function getMinerList() external view returns(string[] memory);\r\n    function getMinerId(address walletAddress) external view returns(string memory);\r\n}\r\n\r\n\r\n/*\r\n * @dev Provides information about the current execution context, including the\r\n * sender of the transaction and its data. While these are generally available\r\n * via msg.sender and msg.data, they should not be accessed in such a direct\r\n * manner, since when dealing with meta-transactions the account sending and\r\n * paying for execution may not be the actual sender (as far as an application\r\n * is concerned).\r\n *\r\n * This contract is only required for intermediate, library-like contracts.\r\n */\r\nabstract contract Context {\r\n    function _msgSender() internal view virtual returns (address) {\r\n        return msg.sender;\r\n    }\r\n\r\n    function _msgData() internal view virtual returns (bytes calldata) {\r\n        return msg.data;\r\n    }\r\n}\r\n\r\n\r\n/**\r\n * @dev Contract module which provides a basic access control mechanism, where\r\n * there is an account (an owner) that can be granted exclusive access to\r\n * specific functions.\r\n *\r\n * By default, the owner account will be the one that deploys the contract. This\r\n * can later be changed with {transferOwnership}.\r\n *\r\n * This module is used through inheritance. It will make available the modifier\r\n * `onlyOwner`, which can be applied to your functions to restrict their use to\r\n * the owner.\r\n */\r\nabstract contract Ownable is Context {\r\n    address private _owner;\r\n\r\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\r\n\r\n    /**\r\n     * @dev Initializes the contract setting the deployer as the initial owner.\r\n     */\r\n    constructor() {\r\n        _setOwner(_msgSender());\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the address of the current owner.\r\n     */\r\n    function owner() public view virtual returns (address) {\r\n        return _owner;\r\n    }\r\n\r\n    /**\r\n     * @dev Throws if called by any account other than the owner.\r\n     */\r\n    modifier onlyOwner() {\r\n        require(owner() == _msgSender(), \"Ownable: caller is not the owner\");\r\n        _;\r\n    }\r\n\r\n    /**\r\n     * @dev Leaves the contract without owner. It will not be possible to call\r\n     * `onlyOwner` functions anymore. Can only be called by the current owner.\r\n     *\r\n     * NOTE: Renouncing ownership will leave the contract without an owner,\r\n     * thereby removing any functionality that is only available to the owner.\r\n     */\r\n    function renounceOwnership() public virtual onlyOwner {\r\n        _setOwner(address(0));\r\n    }\r\n\r\n    /**\r\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\r\n     * Can only be called by the current owner.\r\n     */\r\n    function transferOwnership(address newOwner) public virtual onlyOwner {\r\n        require(newOwner != address(0), \"Ownable: new owner is the zero address\");\r\n        _setOwner(newOwner);\r\n    }\r\n\r\n    function _setOwner(address newOwner) private {\r\n        address oldOwner = _owner;\r\n        _owner = newOwner;\r\n        emit OwnershipTransferred(oldOwner, newOwner);\r\n    }\r\n}\r\n\r\ninterface IFilChainStatOracle {\r\n    function sectorInitialPledge() external view returns(uint256);\r\n    function minerAdjustedPower(string memory _minerId) external view returns(uint256);\r\n    function minerMiningEfficiency(string memory _minerId) external view returns(uint256);\r\n    function minerSectorInitialPledge(string memory _minerId) external view returns(uint256);\r\n    function minerTotalAdjustedPower() external view returns(uint256);\r\n    function avgMiningEfficiency() external view returns(uint256);\r\n    function latest24hBlockReward() external view returns(uint256);\r\n    function rewardAttenuationFactor() external view returns(uint256);\r\n    function networkStoragePower() external view returns(uint256);\r\n    function dailyStoragePowerIncrease() external view returns(uint256);\r\n    function removeMinerAdjustedPower(string memory _minerId) external;\r\n    \r\n}\r\n\r\ninterface IMiningNFTMintingLimitationData {\r\n    function totalMintLimitationInTiB() external view returns(uint256);\r\n    function minerMintAmountLimitation(string memory _minerId) external view returns(uint256);\r\n    function setTotalMintLimitationInTiB(uint _totalMintLimitationInTiB) external;\r\n    function setMinerMintAmountLimitationBatch(string[] memory minerIds, uint[] memory limitations) external;\r\n    function setMinerMintAmountLimitation(string memory minerId, uint limitation) external;\r\n    function increaseTotalLimitation(uint256 _limitationDelta) external;\r\n    function decreaseTotalLimitation(uint256 _limitationDelta) external;\r\n    function increaseMinerLimitation(string memory _minerId, uint256 _minerLimitationDelta) external;\r\n    function decreaseMinerLimitation(string memory _minerId, uint256 _minerLimitationDelta) external;\r\n}\r\n\r\ncontract MiningNFTMintingLimitationBase is Ownable{\r\n    using SafeMath for uint256;\r\n\r\n    IMinerManage public minerManage;\r\n    IFilChainStatOracle public filChainStatOracle;\r\n    IMiningNFTMintingLimitationData public limitationData;\r\n\r\n    uint256 public mintAmountLimitationRatio = 200; // one-thousandth\r\n    uint constant public RATIO_DENOMINATOR = 1000;\r\n\r\n    event FilChainStatOracleChanged(address originalOracle, address newOracle);\r\n    event LimitationRatioChanged(uint256 originalValue, uint256 newValue);\r\n    event MiningNFTMintingLimitationDataChanged(address originalDataContract, address newDataContract);\r\n    event MinerManageChanged(address originalMinerManage, address newMinerManage);\r\n\r\n    constructor(IMinerManage _minerManage,IFilChainStatOracle _filChainStatOracle, IMiningNFTMintingLimitationData _limitationData){\r\n        minerManage = _minerManage;\r\n        filChainStatOracle = _filChainStatOracle;\r\n        limitationData = _limitationData;\r\n    }\r\n\r\n    function setMinerManage(IMinerManage _minerManage) public onlyOwner{\r\n        require(address(_minerManage)!=address(0), \"address should not be 0\");\r\n        address original = address(minerManage);\r\n        minerManage = _minerManage;\r\n        emit MinerManageChanged(original, address(_minerManage));\r\n    }\r\n\r\n    function getTotalLimitationCap() public view returns(uint256){\r\n        return filChainStatOracle.minerTotalAdjustedPower().mul(mintAmountLimitationRatio).div(RATIO_DENOMINATOR);\r\n    }\r\n\r\n    function getMinerLimitationCap(string memory minerId) public view returns(uint256){\r\n        return filChainStatOracle.minerAdjustedPower(minerId).mul(mintAmountLimitationRatio).div(RATIO_DENOMINATOR);\r\n    }\r\n\r\n    function setFilChainStatOracle(IFilChainStatOracle _filChainStatOracle) public onlyOwner{\r\n        require(address(_filChainStatOracle)!=address(0), \"address should not be 0\");\r\n        address originalOracle = address(filChainStatOracle);\r\n        filChainStatOracle = _filChainStatOracle;\r\n        emit FilChainStatOracleChanged(originalOracle, address(_filChainStatOracle));\r\n    }\r\n\r\n    function setLimitationRatio(uint256 _mintAmountLimitationRatio) public onlyOwner{\r\n        require(_mintAmountLimitationRatio > 0, \"value should be > 0\");\r\n        uint256 originalValue = mintAmountLimitationRatio;\r\n        mintAmountLimitationRatio = _mintAmountLimitationRatio;\r\n        emit LimitationRatioChanged(originalValue, _mintAmountLimitationRatio);\r\n    }\r\n\r\n    function setMiningNFTMintingLimitationData(IMiningNFTMintingLimitationData _limitationData) public onlyOwner{\r\n        require(address(_limitationData)!=address(0), \"address should not be 0\");\r\n        address original = address(limitationData);\r\n        limitationData = _limitationData;\r\n        emit MiningNFTMintingLimitationDataChanged(original, address(_limitationData));\r\n    }\r\n   \r\n\r\n}\r\n\r\ncontract Poster is Ownable{\r\n    address public poster;\r\n    event PosterChanged(address originalPoster, address newPoster);\r\n\r\n    modifier onlyPoster(){\r\n        require(poster == _msgSender(), \"not poster\");\r\n        _;\r\n    }\r\n\r\n    function setPoster(address _poster) public onlyOwner{\r\n        require(_poster != address(0), \"address should not be 0\");\r\n        emit PosterChanged(poster, _poster);\r\n        poster = _poster;\r\n    }\r\n}\r\n\r\ncontract MiningNFTMintingLimitation is Poster,MiningNFTMintingLimitationBase{\r\n    using SafeMath for uint256;\r\n\r\n    constructor(IMinerManage _minerManage, IFilChainStatOracle _filChainStatOracle, IMiningNFTMintingLimitationData _limitationData) MiningNFTMintingLimitationBase(_minerManage, _filChainStatOracle, _limitationData){\r\n        \r\n    }\r\n\r\n    function increaseLimitation(uint256 _limitationDelta) public onlyPoster{\r\n        require(limitationData.totalMintLimitationInTiB().add(_limitationDelta) <= getTotalLimitationCap(), \"limitaion exceed hardcap\");\r\n        \r\n        string[] memory minerList = minerManage.getMinerList();\r\n        uint256 totalAdjustedPower = filChainStatOracle.minerTotalAdjustedPower();\r\n\r\n        for(uint i=0; i<minerList.length; i++){\r\n            string memory minerId = minerList[i];\r\n            increaseMinerLimitation(minerId, _limitationDelta, totalAdjustedPower);\r\n        }\r\n    }\r\n\r\n    function increaseLimitationBatch(string[] memory _minerList, uint256 _limitationDelta) public onlyPoster{\r\n        require(limitationData.totalMintLimitationInTiB().add(_limitationDelta) <= getTotalLimitationCap(), \"limitaion exceed hardcap\");\r\n        uint256 totalAdjustedPower = getTotalAdjustedPower(_minerList);\r\n\r\n        for(uint i=0; i<_minerList.length; i++){\r\n            string memory minerId = _minerList[i];\r\n            increaseMinerLimitation(minerId, _limitationDelta, totalAdjustedPower);\r\n        }\r\n    }\r\n\r\n    function increaseMinerLimitation(string memory _minerId, uint256 _limitationDelta, uint256 totalAdjustedPower) internal {\r\n        uint256 minerAdjustedPower = filChainStatOracle.minerAdjustedPower(_minerId);\r\n        uint256 minerLimitationHardCap = minerAdjustedPower.mul(mintAmountLimitationRatio).div(RATIO_DENOMINATOR);\r\n        uint256 minerLimitationDelta = minerAdjustedPower.mul(_limitationDelta).div(totalAdjustedPower);\r\n        uint256 minerLimitationPrev = limitationData.minerMintAmountLimitation(_minerId);\r\n        \r\n        if(minerLimitationPrev.add(minerLimitationDelta) > minerLimitationHardCap){\r\n            minerLimitationDelta = minerLimitationHardCap.sub(minerLimitationPrev);\r\n        }\r\n\r\n        limitationData.increaseMinerLimitation(_minerId, minerLimitationDelta);\r\n    }\r\n\r\n    function decreaseLimitation(uint256 _limitationDelta) public onlyPoster{\r\n        string[] memory minerList = minerManage.getMinerList();\r\n        uint256 totalAdjustedPower = filChainStatOracle.minerTotalAdjustedPower();\r\n\r\n        for(uint i=0; i<minerList.length; i++){\r\n            string memory minerId = minerList[i];\r\n            decreaseMinerLimitation(minerId, _limitationDelta, totalAdjustedPower);\r\n        }\r\n    }\r\n\r\n    function decreaseLimitationBatch(string[] memory _minerList, uint256 _limitationDelta) public onlyPoster{\r\n        uint256 totalAdjustedPower = getTotalAdjustedPower(_minerList);\r\n\r\n        for(uint i=0; i<_minerList.length; i++){\r\n            string memory minerId = _minerList[i];\r\n            decreaseMinerLimitation(minerId, _limitationDelta, totalAdjustedPower);\r\n        }\r\n    }\r\n\r\n    function decreaseMinerLimitation(string memory _minerId, uint256 _limitationDelta, uint256 totalAdjustedPower) internal{\r\n        uint256 minerAdjustedPower = filChainStatOracle.minerAdjustedPower(_minerId);\r\n        uint256 minerLimitationDelta = minerAdjustedPower.mul(_limitationDelta).div(totalAdjustedPower);\r\n\r\n        limitationData.decreaseMinerLimitation(_minerId, minerLimitationDelta);\r\n    }\r\n\r\n    function getTotalAdjustedPower(string[] memory _minerList) internal view returns(uint256 totalAdjustedPower){\r\n        for(uint i=0; i<_minerList.length; i++){\r\n            string memory minerId = _minerList[i];\r\n            uint256 minerAdjustedPower = filChainStatOracle.minerAdjustedPower(minerId);\r\n            totalAdjustedPower = totalAdjustedPower.add(minerAdjustedPower);\r\n        }\r\n    }\r\n\r\n    function checkLimitation(string memory _minerId, uint256 _minerTotalMinted, uint256 _allMinersTotalMinted) public view returns(bool, string memory){\r\n        if(_minerTotalMinted > limitationData.minerMintAmountLimitation(_minerId)){\r\n            return (false, \"mint amount exceed miner limitation\");\r\n        }\r\n\r\n        if(_allMinersTotalMinted > limitationData.totalMintLimitationInTiB()){\r\n            return (false, \"exceed platform total mint limitation\");\r\n        }\r\n\r\n        return (true, \"\");\r\n    }\r\n\r\n\r\n}","ABI":"[{\"inputs\":[{\"internalType\":\"contract IMinerManage\",\"name\":\"_minerManage\",\"type\":\"address\"},{\"internalType\":\"contract IFilChainStatOracle\",\"name\":\"_filChainStatOracle\",\"type\":\"address\"},{\"internalType\":\"contract IMiningNFTMintingLimitationData\",\"name\":\"_limitationData\",\"type\":\"address\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"originalOracle\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"newOracle\",\"type\":\"address\"}],\"name\":\"FilChainStatOracleChanged\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"originalValue\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"newValue\",\"type\":\"uint256\"}],\"name\":\"LimitationRatioChanged\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"originalMinerManage\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"newMinerManage\",\"type\":\"address\"}],\"name\":\"MinerManageChanged\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"originalDataContract\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"newDataContract\",\"type\":\"address\"}],\"name\":\"MiningNFTMintingLimitationDataChanged\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"originalPoster\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"newPoster\",\"type\":\"address\"}],\"name\":\"PosterChanged\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"RATIO_DENOMINATOR\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"string\",\"name\":\"_minerId\",\"type\":\"string\"},{\"internalType\":\"uint256\",\"name\":\"_minerTotalMinted\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_allMinersTotalMinted\",\"type\":\"uint256\"}],\"name\":\"checkLimitation\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"},{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_limitationDelta\",\"type\":\"uint256\"}],\"name\":\"decreaseLimitation\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"string[]\",\"name\":\"_minerList\",\"type\":\"string[]\"},{\"internalType\":\"uint256\",\"name\":\"_limitationDelta\",\"type\":\"uint256\"}],\"name\":\"decreaseLimitationBatch\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"filChainStatOracle\",\"outputs\":[{\"internalType\":\"contract IFilChainStatOracle\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"string\",\"name\":\"minerId\",\"type\":\"string\"}],\"name\":\"getMinerLimitationCap\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getTotalLimitationCap\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_limitationDelta\",\"type\":\"uint256\"}],\"name\":\"increaseLimitation\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"string[]\",\"name\":\"_minerList\",\"type\":\"string[]\"},{\"internalType\":\"uint256\",\"name\":\"_limitationDelta\",\"type\":\"uint256\"}],\"name\":\"increaseLimitationBatch\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"limitationData\",\"outputs\":[{\"internalType\":\"contract IMiningNFTMintingLimitationData\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"minerManage\",\"outputs\":[{\"internalType\":\"contract IMinerManage\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"mintAmountLimitationRatio\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"poster\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"contract IFilChainStatOracle\",\"name\":\"_filChainStatOracle\",\"type\":\"address\"}],\"name\":\"setFilChainStatOracle\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_mintAmountLimitationRatio\",\"type\":\"uint256\"}],\"name\":\"setLimitationRatio\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"contract IMinerManage\",\"name\":\"_minerManage\",\"type\":\"address\"}],\"name\":\"setMinerManage\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"contract IMiningNFTMintingLimitationData\",\"name\":\"_limitationData\",\"type\":\"address\"}],\"name\":\"setMiningNFTMintingLimitationData\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_poster\",\"type\":\"address\"}],\"name\":\"setPoster\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}]","ContractName":"MiningNFTMintingLimitation","CompilerVersion":"v0.8.4+commit.c7e474f2","OptimizationUsed":"1","Runs":"200","ConstructorArguments":"0000000000000000000000002d7a678eb9196d0de4f5467141038dbc949c97a1000000000000000000000000ca106916ca1f9c53442435036edf9b137b381c90000000000000000000000000097eb2025019ebec0faf9f8077804a10eb692f57","EVMVersion":"Default","Library":"","LicenseType":"None","Proxy":"0","Implementation":"","SwarmSource":"ipfs://87ea60915abbd6d288a899e74edfe529c97056db90a13ac9dda83d60d995e8e6"}]}