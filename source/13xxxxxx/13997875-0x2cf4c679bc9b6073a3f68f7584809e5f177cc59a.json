{"status":"1","message":"OK","result":[{"SourceCode":"{{\r\n  \"language\": \"Solidity\",\r\n  \"sources\": {\r\n    \"Refinancer.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: AGPL-3.0-or-later\\n\\npragma solidity =0.8.7;\\n\\ninterface IERC20Like {\\n\\n    function approve(address spender_, uint256 amount_) external returns (bool success_);\\n\\n    function balanceOf(address account_) external view returns (uint256 balance_);\\n\\n    function transfer(address recipient_, uint256 amount_) external returns (bool success_);\\n\\n    function transferFrom(address owner_, address recipient_, uint256 amount_) external returns (bool success_);\\n\\n}\\n\\ninterface ILenderLike {\\n\\n    function poolDelegate() external view returns (address poolDelegate_);\\n\\n}\\n\\ninterface IMapleGlobalsLike {\\n\\n    function governor() external view returns (address governor_);\\n\\n    function investorFee() external view returns (uint256 investorFee_);\\n\\n    function mapleTreasury() external view returns (address mapleTreasury_);\\n\\n    function protocolPaused() external view returns (bool paused_);\\n\\n    function treasuryFee() external view returns (uint256 treasuryFee_);\\n\\n}\\n\\ninterface IMapleLoanFactoryLike {\\n\\n    function mapleGlobals() external view returns (address mapleGlobals_);\\n\\n}\\n\\n/// @title Small Library to standardize erc20 token interactions.\\nlibrary ERC20Helper {\\n\\n    /**************************/\\n    /*** Internal Functions ***/\\n    /**************************/\\n\\n    function transfer(address token_, address to_, uint256 amount_) internal returns (bool success_) {\\n        return _call(token_, abi.encodeWithSelector(IERC20Like.transfer.selector, to_, amount_));\\n    }\\n\\n    function transferFrom(address token_, address from_, address to_, uint256 amount_) internal returns (bool success_) {\\n        return _call(token_, abi.encodeWithSelector(IERC20Like.transferFrom.selector, from_, to_, amount_));\\n    }\\n\\n    function approve(address token_, address spender_, uint256 amount_) internal returns (bool success_) {\\n        // If setting approval to zero fails, return false.\\n        if (!_call(token_, abi.encodeWithSelector(IERC20Like.approve.selector, spender_, uint256(0)))) return false;\\n\\n        // If `amount_` is zero, return true as the previous step already did this.\\n        if (amount_ == uint256(0)) return true;\\n\\n        // Return the result of setting the approval to `amount_`.\\n        return _call(token_, abi.encodeWithSelector(IERC20Like.approve.selector, spender_, amount_));\\n    }\\n\\n    function _call(address token_, bytes memory data_) private returns (bool success_) {\\n        if (token_.code.length == uint256(0)) return false;\\n\\n        bytes memory returnData;\\n        ( success_, returnData ) = token_.call(data_);\\n\\n        return success_ && (returnData.length == uint256(0) || abi.decode(returnData, (bool)));\\n    }\\n\\n}\\n\\n/// @title Refinancer uses storage from Maple Loan.\\ninterface IRefinancer {\\n\\n    /**************/\\n    /*** Events ***/\\n    /**************/\\n\\n    /**\\n     *  @dev   A new value for collateralRequired has been set.\\n     *  @param collateralRequired_ The new value for collateralRequired.\\n     */\\n    event CollateralRequiredSet(uint256 collateralRequired_);\\n\\n    /**\\n     *  @dev   A new value for earlyFeeRate has been set.\\n     *  @param earlyFeeRate_ The new value for earlyFeeRate.\\n     */\\n    event EarlyFeeRateSet(uint256 earlyFeeRate_);\\n\\n    /**\\n     *  @dev   A new value for endingPrincipal has been set.\\n     *  @param endingPrincipal_ The new value for endingPrincipal.\\n     */\\n    event EndingPrincipalSet(uint256 endingPrincipal_);\\n\\n    /**\\n     *  @dev   A new value for gracePeriod has been set.\\n     *  @param gracePeriod_ The new value for gracePeriod.\\n     */\\n    event GracePeriodSet(uint256 gracePeriod_);\\n\\n    /**\\n     *  @dev   A new value for interestRate has been set.\\n     *  @param interestRate_ The new value for interestRate.\\n     */\\n    event InterestRateSet(uint256 interestRate_);\\n\\n    /**\\n     *  @dev   A new value for lateFeeRate has been set.\\n     *  @param lateFeeRate_ The new value for lateFeeRate.\\n     */\\n    event LateFeeRateSet(uint256 lateFeeRate_);\\n\\n    /**\\n     *  @dev   A new value for lateInterestPremium has been set.\\n     *  @param lateInterestPremium_ The new value for lateInterestPremium.\\n     */\\n    event LateInterestPremiumSet(uint256 lateInterestPremium_);\\n\\n    /**\\n     *  @dev   A new value for paymentInterval has been set.\\n     *  @param paymentInterval_ The new value for paymentInterval.\\n     */\\n    event PaymentIntervalSet(uint256 paymentInterval_);\\n\\n    /**\\n     *  @dev   A new value for paymentsRemaining has been set.\\n     *  @param paymentsRemaining_ The new value for paymentsRemaining.\\n     */\\n    event PaymentsRemainingSet(uint256 paymentsRemaining_);\\n\\n    /**\\n     *  @dev   The value of the principal has been decreased.\\n     *  @param decreasedBy_ The amount of which the value was decreased by.\\n     */\\n    event PrincipalDecreased(uint256 decreasedBy_);\\n\\n    /**\\n     *  @dev   The value of the principal has been increased.\\n     *  @param increasedBy_ The amount of which the value was increased by.\\n     */\\n    event PrincipalIncreased(uint256 increasedBy_);\\n\\n    /*****************/\\n    /*** Functions ***/\\n    /*****************/\\n\\n    /**\\n     *  @dev   Function to decrease the principal during a refinance.\\n     *  @param amount_ The amount of which the value will decrease by.\\n     */\\n    function decreasePrincipal(uint256 amount_) external;\\n\\n    /**\\n     *  @dev   Function to increase the principal during a refinance.\\n     *  @param amount_ The amount of which the value will increase by.\\n     */\\n    function increasePrincipal(uint256 amount_) external;\\n\\n    /**\\n     *  @dev   Function to set the collateralRequired during a refinance.\\n     *  @param collateralRequired_ The new value for collateralRequired.\\n     */\\n    function setCollateralRequired(uint256 collateralRequired_) external;\\n\\n    /**\\n     *  @dev   Function to set the earlyFeeRate during a refinance.\\n     *  @param earlyFeeRate_ The new value for earlyFeeRate.\\n     */\\n    function setEarlyFeeRate(uint256 earlyFeeRate_) external;\\n\\n    /**\\n     *  @dev   Function to set the endingPrincipal during a refinance.\\n     *  @param endingPrincipal_ The new value for endingPrincipal.\\n     */\\n    function setEndingPrincipal(uint256 endingPrincipal_) external;\\n\\n    /**\\n     *  @dev   Function to set the gracePeriod during a refinance.\\n     *  @param gracePeriod_ The new value for gracePeriod.\\n     */\\n    function setGracePeriod(uint256 gracePeriod_) external;\\n\\n    /**\\n     *  @dev   Function to set the interestRate during a refinance.\\n     *  @param interestRate_ The new value for interestRate.\\n     */\\n    function setInterestRate(uint256 interestRate_) external;\\n\\n    /**\\n     *  @dev   Function to set the lateFeeRate during a refinance.\\n     *  @param lateFeeRate_ The new value for lateFeeRate.\\n     */\\n    function setLateFeeRate(uint256 lateFeeRate_) external;\\n\\n    /**\\n     *  @dev   Function to set the lateInterestPremium during a refinance.\\n     *  @param lateInterestPremium_ The new value for lateInterestPremium.\\n     */\\n    function setLateInterestPremium(uint256 lateInterestPremium_) external;\\n\\n    /**\\n     *  @dev   Function to set the paymentInterval during a refinance.\\n     *  @param paymentInterval_ The new value for paymentInterval.\\n     */\\n    function setPaymentInterval(uint256 paymentInterval_) external;\\n\\n    /**\\n     *  @dev   Function to set the paymentsRemaining during a refinance.\\n     *  @param paymentsRemaining_ The new value for paymentsRemaining.\\n     */\\n    function setPaymentsRemaining(uint256 paymentsRemaining_) external;\\n\\n}\\n\\nabstract contract SlotManipulatable {\\n\\n    function _getReferenceTypeSlot(bytes32 slot_, bytes32 key_) internal pure returns (bytes32 value_) {\\n        return keccak256(abi.encodePacked(key_, slot_));\\n    }\\n\\n    function _getSlotValue(bytes32 slot_) internal view returns (bytes32 value_) {\\n        assembly {\\n            value_ := sload(slot_)\\n        }\\n    }\\n\\n    function _setSlotValue(bytes32 slot_, bytes32 value_) internal {\\n        assembly {\\n            sstore(slot_, value_)\\n        }\\n    }\\n\\n}\\n\\n/// @title An implementation that is to be proxied, will need ProxiedInternals.\\nabstract contract ProxiedInternals is SlotManipulatable {\\n\\n    /// @dev Storage slot with the address of the current factory. `keccak256('eip1967.proxy.factory') - 1`.\\n    bytes32 private constant FACTORY_SLOT = bytes32(0x7a45a402e4cb6e08ebc196f20f66d5d30e67285a2a8aa80503fa409e727a4af1);\\n\\n    /// @dev Storage slot with the address of the current factory. `keccak256('eip1967.proxy.implementation') - 1`.\\n    bytes32 private constant IMPLEMENTATION_SLOT = bytes32(0x360894a13ba1a3210667c828492db98dca3e2076cc3735a920a3ca505d382bbc);\\n\\n    /// @dev Delegatecalls to a migrator contract to manipulate storage during an initialization or migration.\\n    function _migrate(address migrator_, bytes calldata arguments_) internal virtual returns (bool success_) {\\n        uint256 size;\\n\\n        assembly {\\n            size := extcodesize(migrator_)\\n        }\\n\\n        if (size == uint256(0)) return false;\\n\\n        ( success_, ) = migrator_.delegatecall(arguments_);\\n    }\\n\\n    /// @dev Sets the factory address in storage.\\n    function _setFactory(address factory_) internal virtual returns (bool success_) {\\n        _setSlotValue(FACTORY_SLOT, bytes32(uint256(uint160(factory_))));\\n        return true;\\n    }\\n\\n    /// @dev Sets the implementation address in storage.\\n    function _setImplementation(address implementation_) internal virtual returns (bool success_) {\\n        _setSlotValue(IMPLEMENTATION_SLOT, bytes32(uint256(uint160(implementation_))));\\n        return true;\\n    }\\n\\n    /// @dev Returns the factory address.\\n    function _factory() internal view virtual returns (address factory_) {\\n        return address(uint160(uint256(_getSlotValue(FACTORY_SLOT))));\\n    }\\n\\n    /// @dev Returns the implementation address.\\n    function _implementation() internal view virtual returns (address implementation_) {\\n        return address(uint160(uint256(_getSlotValue(IMPLEMENTATION_SLOT))));\\n    }\\n\\n}\\n\\n/// @title A Maple implementation that is to be proxied, will need MapleProxiedInternals.\\nabstract contract MapleProxiedInternals is ProxiedInternals {}\\n\\n/// @title MapleLoanInternals defines the storage layout and internal logic of MapleLoan.\\nabstract contract MapleLoanInternals is MapleProxiedInternals {\\n\\n    uint256 private constant SCALED_ONE = uint256(10 ** 18);\\n\\n    // Roles\\n    address internal _borrower;         // The address of the borrower.\\n    address internal _lender;           // The address of the lender.\\n    address internal _pendingBorrower;  // The address of the pendingBorrower, the only address that can accept the borrower role.\\n    address internal _pendingLender;    // The address of the pendingLender, the only address that can accept the lender role.\\n\\n    // Assets\\n    address internal _collateralAsset;  // The address of the asset used as collateral.\\n    address internal _fundsAsset;       // The address of the asset used as funds.\\n\\n    // Loan Term Parameters\\n    uint256 internal _gracePeriod;      // The number of seconds a payment can be late.\\n    uint256 internal _paymentInterval;  // The number of seconds between payments.\\n\\n    // Rates\\n    uint256 internal _interestRate;         // The annualized interest rate of the loan.\\n    uint256 internal _earlyFeeRate;         // The fee rate for prematurely closing loans.\\n    uint256 internal _lateFeeRate;          // The fee rate for late payments.\\n    uint256 internal _lateInterestPremium;  // The amount to increase the interest rate by for late payments.\\n\\n    // Requested Amounts\\n    uint256 internal _collateralRequired;  // The collateral the borrower is expected to put up to draw down all _principalRequested.\\n    uint256 internal _principalRequested;  // The funds the borrowers wants to borrow.\\n    uint256 internal _endingPrincipal;     // The principal to remain at end of loan.\\n\\n    // State\\n    uint256 internal _drawableFunds;       // The amount of funds that can be drawn down.\\n    uint256 internal _claimableFunds;      // The amount of funds that the lender can claim (principal repayments, interest, etc).\\n    uint256 internal _collateral;          // The amount of collateral, in collateral asset, that is currently posted.\\n    uint256 internal _nextPaymentDueDate;  // The timestamp of due date of next payment.\\n    uint256 internal _paymentsRemaining;   // The number of payments remaining.\\n    uint256 internal _principal;           // The amount of principal yet to be paid down.\\n\\n    // Refinance\\n    bytes32 internal _refinanceCommitment;\\n\\n    /**********************************/\\n    /*** Internal General Functions ***/\\n    /**********************************/\\n\\n    /// @dev Clears all state variables to end a loan, but keep borrower and lender withdrawal functionality intact.\\n    function _clearLoanAccounting() internal {\\n        _gracePeriod     = uint256(0);\\n        _paymentInterval = uint256(0);\\n\\n        _interestRate        = uint256(0);\\n        _earlyFeeRate        = uint256(0);\\n        _lateFeeRate         = uint256(0);\\n        _lateInterestPremium = uint256(0);\\n\\n        _endingPrincipal = uint256(0);\\n\\n        _nextPaymentDueDate = uint256(0);\\n        _paymentsRemaining  = uint256(0);\\n        _principal          = uint256(0);\\n    }\\n\\n    /**\\n     *  @dev   Initializes the loan.\\n     *  @param borrower_    The address of the borrower.\\n     *  @param assets_      Array of asset addresses.\\n     *                          [0]: collateralAsset,\\n     *                          [1]: fundsAsset.\\n     *  @param termDetails_ Array of loan parameters:\\n     *                          [0]: gracePeriod,\\n     *                          [1]: paymentInterval,\\n     *                          [2]: payments,\\n     *  @param amounts_     Requested amounts:\\n     *                          [0]: collateralRequired,\\n     *                          [1]: principalRequested,\\n     *                          [2]: endingPrincipal.\\n     *  @param rates_       Fee parameters:\\n     *                          [0]: interestRate,\\n     *                          [1]: earlyFeeRate,\\n     *                          [2]: lateFeeRate,\\n     *                          [3]: lateInterestPremium.\\n     */\\n    function _initialize(\\n        address borrower_,\\n        address[2] memory assets_,\\n        uint256[3] memory termDetails_,\\n        uint256[3] memory amounts_,\\n        uint256[4] memory rates_\\n    )\\n        internal\\n    {\\n        // Principal requested needs to be non-zero (see `_getCollateralRequiredFor` math).\\n        require(amounts_[1] > uint256(0), \\\"MLI:I:INVALID_PRINCIPAL\\\");\\n\\n        // Ending principal needs to be less than or equal to principal requested.\\n        require(amounts_[2] <= amounts_[1], \\\"MLI:I:INVALID_ENDING_PRINCIPAL\\\");\\n\\n        require((_borrower = borrower_) != address(0), \\\"MLI:I:INVALID_BORROWER\\\");\\n\\n        _collateralAsset = assets_[0];\\n        _fundsAsset      = assets_[1];\\n\\n        _gracePeriod       = termDetails_[0];\\n        _paymentInterval   = termDetails_[1];\\n        _paymentsRemaining = termDetails_[2];\\n\\n        _collateralRequired = amounts_[0];\\n        _principalRequested = amounts_[1];\\n        _endingPrincipal    = amounts_[2];\\n\\n        _interestRate        = rates_[0];\\n        _earlyFeeRate        = rates_[1];\\n        _lateFeeRate         = rates_[2];\\n        _lateInterestPremium = rates_[3];\\n    }\\n\\n    /**************************************/\\n    /*** Internal Borrow-side Functions ***/\\n    /**************************************/\\n\\n    /// @dev Prematurely ends a loan by making all remaining payments.\\n    function _closeLoan() internal returns (uint256 principal_, uint256 interest_) {\\n        require(block.timestamp <= _nextPaymentDueDate, \\\"MLI:CL:PAYMENT_IS_LATE\\\");\\n\\n        ( principal_, interest_ ) = _getEarlyPaymentBreakdown();\\n\\n        uint256 totalPaid = principal_ + interest_;\\n\\n        // The drawable funds are increased by the extra funds in the contract, minus the total needed for payment.\\n        _drawableFunds = _drawableFunds + _getUnaccountedAmount(_fundsAsset) - totalPaid;\\n\\n        _claimableFunds += totalPaid;\\n\\n        _clearLoanAccounting();\\n    }\\n\\n    /// @dev Sends `amount_` of `_drawableFunds` to `destination_`.\\n    function _drawdownFunds(uint256 amount_, address destination_) internal {\\n        _drawableFunds -= amount_;\\n\\n        require(ERC20Helper.transfer(_fundsAsset, destination_, amount_), \\\"MLI:DF:TRANSFER_FAILED\\\");\\n        require(_isCollateralMaintained(),                                \\\"MLI:DF:INSUFFICIENT_COLLATERAL\\\");\\n    }\\n\\n    /// @dev Makes a payment to progress the loan closer to maturity.\\n    function _makePayment() internal returns (uint256 principal_, uint256 interest_) {\\n        ( principal_, interest_ ) = _getNextPaymentBreakdown();\\n\\n        uint256 totalPaid = principal_ + interest_;\\n\\n        // The drawable funds are increased by the extra funds in the contract, minus the total needed for payment.\\n        // NOTE: This line will revert if not enough funds were added for the full payment amount.\\n        _drawableFunds = (_drawableFunds + _getUnaccountedAmount(_fundsAsset)) - totalPaid;\\n\\n        _claimableFunds += totalPaid;\\n\\n        uint256 paymentsRemaining = _paymentsRemaining;\\n\\n        if (paymentsRemaining == uint256(1)) {\\n            _clearLoanAccounting();  // Assumes `_getNextPaymentBreakdown` returns a `principal_` that is `_principal`.\\n        } else {\\n            _nextPaymentDueDate += _paymentInterval;\\n            _principal          -= principal_;\\n            _paymentsRemaining   = paymentsRemaining - uint256(1);\\n        }\\n    }\\n\\n    /// @dev Registers the delivery of an amount of collateral to be posted.\\n    function _postCollateral() internal returns (uint256 collateralPosted_) {\\n        _collateral += (collateralPosted_ = _getUnaccountedAmount(_collateralAsset));\\n    }\\n\\n    /// @dev Sets refinance commitment given refinance operations.\\n    function _proposeNewTerms(address refinancer_, bytes[] calldata calls_) internal returns (bytes32 proposedRefinanceCommitment_) {\\n        // NOTE: There is no way to invalidate the `refinanceCommitment` (i.e. bytes32(0)) without explicitly setting it if `calls_.length` is 0.\\n        return _refinanceCommitment =\\n            calls_.length > uint256(0)\\n                ? _getRefinanceCommitment(refinancer_, calls_)\\n                : bytes32(0);\\n    }\\n\\n    /// @dev Sends `amount_` of `_collateral` to `destination_`.\\n    function _removeCollateral(uint256 amount_, address destination_) internal {\\n        _collateral -= amount_;\\n\\n        require(ERC20Helper.transfer(_collateralAsset, destination_, amount_), \\\"MLI:RC:TRANSFER_FAILED\\\");\\n        require(_isCollateralMaintained(),                                     \\\"MLI:RC:INSUFFICIENT_COLLATERAL\\\");\\n    }\\n\\n    /// @dev Registers the delivery of an amount of funds to be returned as `_drawableFunds`.\\n    function _returnFunds() internal returns (uint256 fundsReturned_) {\\n        _drawableFunds += (fundsReturned_ = _getUnaccountedAmount(_fundsAsset));\\n    }\\n\\n    /************************************/\\n    /*** Internal Lend-side Functions ***/\\n    /************************************/\\n\\n    /// @dev Processes refinance operations.\\n    function _acceptNewTerms(address refinancer_, bytes[] calldata calls_) internal returns (bytes32 acceptedRefinanceCommitment_) {\\n        // NOTE: A zero refinancer address and/or empty calls array will never (probabilistically) match a refinance commitment in storage.\\n        require(_refinanceCommitment == (acceptedRefinanceCommitment_ = _getRefinanceCommitment(refinancer_, calls_)), \\\"MLI:ANT:COMMITMENT_MISMATCH\\\");\\n\\n        require(refinancer_.code.length != uint256(0), \\\"MLI:ANT:INVALID_REFINANCER\\\");\\n\\n        // Clear refinance commitment to prevent implications of re-acceptance of another call to `_acceptNewTerms`.\\n        _refinanceCommitment = bytes32(0);\\n\\n        uint256 callCount = calls_.length;\\n\\n        for (uint256 i; i < callCount; ++i) {\\n            ( bool success, ) = refinancer_.delegatecall(calls_[i]);\\n            require(success, \\\"MLI:ANT:FAILED\\\");\\n        }\\n\\n        // Ensure that collateral is maintained after changes made.\\n        require(_isCollateralMaintained(), \\\"MLI:ANT:INSUFFICIENT_COLLATERAL\\\");\\n    }\\n\\n    /// @dev Sends `amount_` of `_claimableFunds` to `destination_`.\\n    ///      If `amount_` is higher than `_claimableFunds` the transaction will underflow and revert.\\n    function _claimFunds(uint256 amount_, address destination_) internal {\\n        _claimableFunds -= amount_;\\n\\n        require(ERC20Helper.transfer(_fundsAsset, destination_, amount_), \\\"MLI:CF:TRANSFER_FAILED\\\");\\n    }\\n\\n    /// @dev Fund the loan and kick off the repayment requirements.\\n    function _fundLoan(address lender_) internal returns (uint256 fundsLent_) {\\n        uint256 paymentsRemaining = _paymentsRemaining;\\n\\n        // Can only fund loan if there are payments remaining (as defined by the initialization) and no payment is due yet (as set by a funding).\\n        require((_nextPaymentDueDate == uint256(0)) && (paymentsRemaining != uint256(0)), \\\"MLI:FL:LOAN_ACTIVE\\\");\\n\\n        uint256 paymentInterval = _paymentInterval;\\n\\n        // NOTE: Don't need to check if lender_ is nonzero or valid, since it is done implicitly in calls to `lender_` below.\\n        _lender = lender_;\\n\\n        _nextPaymentDueDate = block.timestamp + paymentInterval;\\n\\n        // Amount funded and principal are as requested.\\n        fundsLent_ = _principal = _principalRequested;\\n\\n        address fundsAsset = _fundsAsset;\\n\\n        // Cannot under-fund loan, but over-funding results in additional funds left unaccounted for.\\n        require(_getUnaccountedAmount(fundsAsset) >= fundsLent_, \\\"MLI:FL:WRONG_FUND_AMOUNT\\\");\\n\\n        IMapleGlobalsLike globals = IMapleGlobalsLike(IMapleLoanFactoryLike(_factory()).mapleGlobals());\\n\\n        // Transfer the annualized treasury fee, if any, to the Maple treasury, and decrement drawable funds.\\n        uint256 treasuryFee = (fundsLent_ * globals.treasuryFee() * paymentInterval * paymentsRemaining) / uint256(365 days * 10_000);\\n\\n        // Transfer delegate fee, if any, to the pool delegate, and decrement drawable funds.\\n        uint256 delegateFee = (fundsLent_ * globals.investorFee() * paymentInterval * paymentsRemaining) / uint256(365 days * 10_000);\\n\\n        // Drawable funds is the amount funded, minus any fees.\\n        _drawableFunds = fundsLent_ - treasuryFee - delegateFee;\\n\\n        require(\\n            treasuryFee == uint256(0) || ERC20Helper.transfer(fundsAsset, globals.mapleTreasury(), treasuryFee),\\n            \\\"MLI:FL:T_TRANSFER_FAILED\\\"\\n        );\\n\\n        require(\\n            delegateFee == uint256(0) || ERC20Helper.transfer(fundsAsset, ILenderLike(lender_).poolDelegate(), delegateFee),\\n            \\\"MLI:FL:PD_TRANSFER_FAILED\\\"\\n        );\\n    }\\n\\n    /// @dev Reset all state variables in order to release funds and collateral of a loan in default.\\n    function _repossess(address destination_) internal returns (uint256 collateralRepossessed_, uint256 fundsRepossessed_) {\\n        uint256 nextPaymentDueDate = _nextPaymentDueDate;\\n\\n        require(\\n            nextPaymentDueDate != uint256(0) && (block.timestamp > nextPaymentDueDate + _gracePeriod),\\n            \\\"MLI:R:NOT_IN_DEFAULT\\\"\\n        );\\n\\n        _clearLoanAccounting();\\n\\n        // Uniquely in `_repossess`, stop accounting for all funds so that they can be swept.\\n        _collateral     = uint256(0);\\n        _claimableFunds = uint256(0);\\n        _drawableFunds  = uint256(0);\\n\\n        address collateralAsset = _collateralAsset;\\n\\n        // Either there is no collateral to repossess, or the transfer of the collateral succeeds.\\n        require(\\n            (collateralRepossessed_ = _getUnaccountedAmount(collateralAsset)) == uint256(0) ||\\n            ERC20Helper.transfer(collateralAsset, destination_, collateralRepossessed_),\\n            \\\"MLI:R:C_TRANSFER_FAILED\\\"\\n        );\\n\\n        address fundsAsset = _fundsAsset;\\n\\n        // Either there are no funds to repossess, or the transfer of the funds succeeds.\\n        require(\\n            (fundsRepossessed_ = _getUnaccountedAmount(fundsAsset)) == uint256(0) ||\\n            ERC20Helper.transfer(fundsAsset, destination_, fundsRepossessed_),\\n            \\\"MLI:R:F_TRANSFER_FAILED\\\"\\n        );\\n    }\\n\\n    /*******************************/\\n    /*** Internal View Functions ***/\\n    /*******************************/\\n\\n    /// @dev Returns whether the amount of collateral posted is commensurate with the amount of drawn down (outstanding) principal.\\n    function _isCollateralMaintained() internal view returns (bool isMaintained_) {\\n        return _collateral >= _getCollateralRequiredFor(_principal, _drawableFunds, _principalRequested, _collateralRequired);\\n    }\\n\\n    /// @dev Get principal and interest breakdown for paying off the entire loan early.\\n    function _getEarlyPaymentBreakdown() internal view returns (uint256 principal_, uint256 interest_) {\\n        interest_ = ((principal_ = _principal) * _earlyFeeRate) / SCALED_ONE;\\n    }\\n\\n    /// @dev Get principal and interest breakdown for next standard payment.\\n    function _getNextPaymentBreakdown() internal view returns (uint256 principal_, uint256 interest_) {\\n        ( principal_, interest_ ) = _getPaymentBreakdown(\\n            block.timestamp,\\n            _nextPaymentDueDate,\\n            _paymentInterval,\\n            _principal,\\n            _endingPrincipal,\\n            _paymentsRemaining,\\n            _interestRate,\\n            _lateFeeRate,\\n            _lateInterestPremium\\n        );\\n    }\\n\\n    /// @dev Returns the amount of an `asset_` that this contract owns, which is not currently accounted for by its state variables.\\n    function _getUnaccountedAmount(address asset_) internal view virtual returns (uint256 unaccountedAmount_) {\\n        return IERC20Like(asset_).balanceOf(address(this))\\n            - (asset_ == _collateralAsset ? _collateral : uint256(0))                   // `_collateral` is `_collateralAsset` accounted for.\\n            - (asset_ == _fundsAsset ? _claimableFunds + _drawableFunds : uint256(0));  // `_claimableFunds` and `_drawableFunds` are `_fundsAsset` accounted for.\\n    }\\n\\n    /*******************************/\\n    /*** Internal Pure Functions ***/\\n    /*******************************/\\n\\n    /// @dev Returns the total collateral to be posted for some drawn down (outstanding) principal and overall collateral ratio requirement.\\n    function _getCollateralRequiredFor(\\n        uint256 principal_,\\n        uint256 drawableFunds_,\\n        uint256 principalRequested_,\\n        uint256 collateralRequired_\\n    )\\n        internal pure returns (uint256 collateral_)\\n    {\\n        // Where (collateral / outstandingPrincipal) should be greater or equal to (collateralRequired / principalRequested).\\n        // NOTE: principalRequested_ cannot be 0, which is reasonable, since it means this was never a loan.\\n        return principal_ <= drawableFunds_ ? uint256(0) : (collateralRequired_ * (principal_ - drawableFunds_)) / principalRequested_;\\n    }\\n\\n    /// @dev Returns principal and interest portions of a payment instalment, given generic, stateless loan parameters.\\n    function _getInstallment(uint256 principal_, uint256 endingPrincipal_, uint256 interestRate_, uint256 paymentInterval_, uint256 totalPayments_)\\n        internal pure virtual returns (uint256 principalAmount_, uint256 interestAmount_)\\n    {\\n        /*************************************************************************************************\\\\\\n         *                             |                                                                 *\\n         * A = installment amount      |      /                         \\\\     /           R           \\\\  *\\n         * P = principal remaining     |     |  /                 \\\\      |   | ----------------------- | *\\n         * R = interest rate           | A = | | P * ( 1 + R ) ^ N | - E | * |   /             \\\\       | *\\n         * N = payments remaining      |     |  \\\\                 /      |   |  | ( 1 + R ) ^ N | - 1  | *\\n         * E = ending principal target |      \\\\                         /     \\\\  \\\\             /      /  *\\n         *                             |                                                                 *\\n         *                             |---------------------------------------------------------------- *\\n         *                                                                                               *\\n         * - Where R           is `periodicRate`                                                         *\\n         * - Where (1 + R) ^ N is `raisedRate`                                                           *\\n         * - Both of these rates are scaled by 1e18 (e.g., 12% => 0.12 * 10 ** 18)                       *\\n        \\\\*************************************************************************************************/\\n\\n        uint256 periodicRate = _getPeriodicInterestRate(interestRate_, paymentInterval_);\\n        uint256 raisedRate   = _scaledExponent(SCALED_ONE + periodicRate, totalPayments_, SCALED_ONE);\\n\\n        // NOTE: If a lack of precision in `_scaledExponent` results in a `raisedRate` smaller than one, assume it to be one and simplify the equation.\\n        if (raisedRate <= SCALED_ONE) return ((principal_ - endingPrincipal_) / totalPayments_, uint256(0));\\n\\n        uint256 total = ((((principal_ * raisedRate) / SCALED_ONE) - endingPrincipal_) * periodicRate) / (raisedRate - SCALED_ONE);\\n\\n        interestAmount_  = _getInterest(principal_, interestRate_, paymentInterval_);\\n        principalAmount_ = total >= interestAmount_ ? total - interestAmount_ : uint256(0);\\n    }\\n\\n    /// @dev Returns an amount by applying an annualized and scaled interest rate, to a principal, over an interval of time.\\n    function _getInterest(uint256 principal_, uint256 interestRate_, uint256 interval_) internal pure virtual returns (uint256 interest_) {\\n        return (principal_ * _getPeriodicInterestRate(interestRate_, interval_)) / SCALED_ONE;\\n    }\\n\\n    /// @dev Returns total principal and interest portion of a number of payments, given generic, stateless loan parameters and loan state.\\n    function _getPaymentBreakdown(\\n        uint256 currentTime_,\\n        uint256 nextPaymentDueDate_,\\n        uint256 paymentInterval_,\\n        uint256 principal_,\\n        uint256 endingPrincipal_,\\n        uint256 paymentsRemaining_,\\n        uint256 interestRate_,\\n        uint256 lateFeeRate_,\\n        uint256 lateInterestPremium_\\n    )\\n        internal pure virtual\\n        returns (uint256 principalAmount_, uint256 interestAmount_)\\n    {\\n        ( principalAmount_, interestAmount_ ) = _getInstallment(\\n            principal_,\\n            endingPrincipal_,\\n            interestRate_,\\n            paymentInterval_,\\n            paymentsRemaining_\\n        );\\n\\n        principalAmount_ = paymentsRemaining_ == uint256(1) ? principal_ : principalAmount_;\\n\\n        if (currentTime_ > nextPaymentDueDate_) {\\n            uint256 daysLate = (((currentTime_ - nextPaymentDueDate_ - 1) / 1 days) + 1) * 1 days;\\n\\n            interestAmount_ += _getInterest(principal_, interestRate_ + lateInterestPremium_, daysLate);\\n            interestAmount_ += (lateFeeRate_ * principal_) / SCALED_ONE;\\n        }\\n    }\\n\\n    /// @dev Returns the interest rate over an interval, given an annualized interest rate.\\n    function _getPeriodicInterestRate(uint256 interestRate_, uint256 interval_) internal pure virtual returns (uint256 periodicInterestRate_) {\\n        return (interestRate_ * interval_) / uint256(365 days);\\n    }\\n\\n    /// @dev Returns refinance commitment given refinance parameters.\\n    function _getRefinanceCommitment(address refinancer_, bytes[] calldata calls_) internal pure returns (bytes32 refinanceCommitment_) {\\n        return keccak256(abi.encode(refinancer_, calls_));\\n    }\\n\\n    /**\\n     *  @dev Returns exponentiation of a scaled base value.\\n     *\\n     *       Walk through example:\\n     *       LINE  |  base_          |  exponent_  |  one_  |  result_\\n     *             |  3_00           |  18         |  1_00  |  0_00\\n     *        A    |  3_00           |  18         |  1_00  |  1_00\\n     *        B    |  3_00           |  9          |  1_00  |  1_00\\n     *        C    |  9_00           |  9          |  1_00  |  1_00\\n     *        D    |  9_00           |  9          |  1_00  |  9_00\\n     *        B    |  9_00           |  4          |  1_00  |  9_00\\n     *        C    |  81_00          |  4          |  1_00  |  9_00\\n     *        B    |  81_00          |  2          |  1_00  |  9_00\\n     *        C    |  6_561_00       |  2          |  1_00  |  9_00\\n     *        B    |  6_561_00       |  1          |  1_00  |  9_00\\n     *        C    |  43_046_721_00  |  1          |  1_00  |  9_00\\n     *        D    |  43_046_721_00  |  1          |  1_00  |  387_420_489_00\\n     *        B    |  43_046_721_00  |  0          |  1_00  |  387_420_489_00\\n     *\\n     * Another implementation of this algorithm can be found in Dapphub's DSMath contract:\\n     * https://github.com/dapphub/ds-math/blob/ce67c0fa9f8262ecd3d76b9e4c026cda6045e96c/src/math.sol#L77\\n     */\\n    function _scaledExponent(uint256 base_, uint256 exponent_, uint256 one_) internal pure returns (uint256 result_) {\\n        // If exponent_ is odd, set result_ to base_, else set to one_.\\n        result_ = exponent_ & uint256(1) != uint256(0) ? base_ : one_;          // A\\n\\n        // Divide exponent_ by 2 (overwriting itself) and proceed if not zero.\\n        while ((exponent_ >>= uint256(1)) != uint256(0)) {                      // B\\n            base_ = (base_ * base_) / one_;                                     // C\\n\\n            // If exponent_ is even, go back to top.\\n            if (exponent_ & uint256(1) == uint256(0)) continue;\\n\\n            // If exponent_ is odd, multiply result_ is multiplied by base_.\\n            result_ = (result_ * base_) / one_;                                 // D\\n        }\\n    }\\n\\n}\\n\\n/// @title Refinancer uses storage from a MapleLoan defined by MapleLoanInternals.\\ncontract Refinancer is IRefinancer, MapleLoanInternals {\\n\\n    function decreasePrincipal(uint256 amount_) external override {\\n        require(_drawableFunds >= amount_, \\\"R:DP:OUTSTANDING_TOO_LARGE\\\");\\n\\n        _principal          -= amount_;\\n        _principalRequested -= amount_;\\n        _drawableFunds      -= amount_;\\n\\n        require(_principal >= _endingPrincipal, \\\"R:DP:BELOW_ENDING_PRINCIPAL\\\");\\n\\n        emit PrincipalDecreased(amount_);\\n    }\\n\\n    function increasePrincipal(uint256 amount_) external override {\\n        // Cannot under-fund the principal increase, but over-funding results in additional funds left unaccounted for.\\n        require(_getUnaccountedAmount(_fundsAsset) >= amount_, \\\"R:IP:INSUFFICIENT_AMOUNT\\\");\\n\\n        _principal          += amount_;\\n        _principalRequested += amount_;\\n        _drawableFunds      += amount_;\\n\\n        emit PrincipalIncreased(amount_);\\n    }\\n\\n    function setCollateralRequired(uint256 collateralRequired_) external override {\\n        emit CollateralRequiredSet(_collateralRequired = collateralRequired_);\\n    }\\n\\n    function setEarlyFeeRate(uint256 earlyFeeRate_) external override {\\n        emit EarlyFeeRateSet(_earlyFeeRate = earlyFeeRate_);\\n    }\\n\\n    function setEndingPrincipal(uint256 endingPrincipal_) external override {\\n        require(endingPrincipal_ <= _principal, \\\"R:DP:ABOVE_CURRENT_PRINCIPAL\\\");\\n        emit EndingPrincipalSet(_endingPrincipal = endingPrincipal_);\\n    }\\n\\n    function setGracePeriod(uint256 gracePeriod_) external override {\\n        emit GracePeriodSet(_gracePeriod = gracePeriod_);\\n    }\\n\\n    function setInterestRate(uint256 interestRate_) external override {\\n        emit InterestRateSet(_interestRate = interestRate_);\\n    }\\n\\n    function setLateFeeRate(uint256 lateFeeRate_) external override {\\n        emit LateFeeRateSet(_lateFeeRate = lateFeeRate_);\\n    }\\n\\n    function setLateInterestPremium(uint256 lateInterestPremium_) external override {\\n        emit LateInterestPremiumSet(_lateInterestPremium = lateInterestPremium_);\\n    }\\n\\n    function setPaymentInterval(uint256 paymentInterval_) external override {\\n        emit PaymentIntervalSet(_paymentInterval = paymentInterval_);\\n    }\\n\\n    function setPaymentsRemaining(uint256 paymentsRemaining_) external override {\\n        emit PaymentsRemainingSet(_paymentsRemaining = paymentsRemaining_);\\n    }\\n\\n}\\n\"\r\n    }\r\n  },\r\n  \"settings\": {\r\n    \"optimizer\": {\r\n      \"enabled\": true,\r\n      \"runs\": 200\r\n    },\r\n    \"outputSelection\": {\r\n      \"*\": {\r\n        \"*\": [\r\n          \"evm.bytecode\",\r\n          \"evm.deployedBytecode\",\r\n          \"abi\"\r\n        ]\r\n      }\r\n    },\r\n    \"metadata\": {\r\n      \"bytecodeHash\": \"none\"\r\n    }\r\n  }\r\n}}","ABI":"[{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"collateralRequired_\",\"type\":\"uint256\"}],\"name\":\"CollateralRequiredSet\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"earlyFeeRate_\",\"type\":\"uint256\"}],\"name\":\"EarlyFeeRateSet\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"endingPrincipal_\",\"type\":\"uint256\"}],\"name\":\"EndingPrincipalSet\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"gracePeriod_\",\"type\":\"uint256\"}],\"name\":\"GracePeriodSet\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"interestRate_\",\"type\":\"uint256\"}],\"name\":\"InterestRateSet\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"lateFeeRate_\",\"type\":\"uint256\"}],\"name\":\"LateFeeRateSet\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"lateInterestPremium_\",\"type\":\"uint256\"}],\"name\":\"LateInterestPremiumSet\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"paymentInterval_\",\"type\":\"uint256\"}],\"name\":\"PaymentIntervalSet\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"paymentsRemaining_\",\"type\":\"uint256\"}],\"name\":\"PaymentsRemainingSet\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"decreasedBy_\",\"type\":\"uint256\"}],\"name\":\"PrincipalDecreased\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"increasedBy_\",\"type\":\"uint256\"}],\"name\":\"PrincipalIncreased\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"amount_\",\"type\":\"uint256\"}],\"name\":\"decreasePrincipal\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"amount_\",\"type\":\"uint256\"}],\"name\":\"increasePrincipal\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"collateralRequired_\",\"type\":\"uint256\"}],\"name\":\"setCollateralRequired\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"earlyFeeRate_\",\"type\":\"uint256\"}],\"name\":\"setEarlyFeeRate\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"endingPrincipal_\",\"type\":\"uint256\"}],\"name\":\"setEndingPrincipal\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"gracePeriod_\",\"type\":\"uint256\"}],\"name\":\"setGracePeriod\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"interestRate_\",\"type\":\"uint256\"}],\"name\":\"setInterestRate\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"lateFeeRate_\",\"type\":\"uint256\"}],\"name\":\"setLateFeeRate\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"lateInterestPremium_\",\"type\":\"uint256\"}],\"name\":\"setLateInterestPremium\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"paymentInterval_\",\"type\":\"uint256\"}],\"name\":\"setPaymentInterval\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"paymentsRemaining_\",\"type\":\"uint256\"}],\"name\":\"setPaymentsRemaining\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}]","ContractName":"Refinancer","CompilerVersion":"v0.8.7+commit.e28d00a7","OptimizationUsed":"1","Runs":"200","ConstructorArguments":"","EVMVersion":"Default","Library":"","LicenseType":"Unknown","Proxy":"0","Implementation":"","SwarmSource":"none"}]}