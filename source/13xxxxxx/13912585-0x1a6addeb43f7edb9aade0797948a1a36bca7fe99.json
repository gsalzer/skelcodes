{"status":"1","message":"OK","result":[{"SourceCode":"// File: @openzeppelin\\contracts\\utils\\introspection\\IERC165.sol\r\n\r\n// SPDX-License-Identifier: MIT\r\n\r\n// OpenZeppelin Contracts v4.4.1 (utils/introspection/IERC165.sol)\r\n\r\npragma solidity ^0.8.0;\r\n\r\n/**\r\n * @dev Interface of the ERC165 standard, as defined in the\r\n * https://eips.ethereum.org/EIPS/eip-165[EIP].\r\n *\r\n * Implementers can declare support of contract interfaces, which can then be\r\n * queried by others ({ERC165Checker}).\r\n *\r\n * For an implementation, see {ERC165}.\r\n */\r\ninterface IERC165 {\r\n    /**\r\n     * @dev Returns true if this contract implements the interface defined by\r\n     * `interfaceId`. See the corresponding\r\n     * https://eips.ethereum.org/EIPS/eip-165#how-interfaces-are-identified[EIP section]\r\n     * to learn more about how these ids are created.\r\n     *\r\n     * This function call must use less than 30 000 gas.\r\n     */\r\n    function supportsInterface(bytes4 interfaceId) external view returns (bool);\r\n}\r\n\r\n// File: contracts\\core\\ICreatorCore.sol\r\n\r\npragma solidity ^0.8.0;\r\n\r\n/// @author: manifold.xyz\r\n\r\n\r\n/**\r\n * @dev Core creator interface\r\n */\r\ninterface ICreatorCore is IERC165 {\r\n\r\n    event ExtensionRegistered(address indexed extension, address indexed sender);\r\n    event ExtensionUnregistered(address indexed extension, address indexed sender);\r\n    event ExtensionBlacklisted(address indexed extension, address indexed sender);\r\n    event MintPermissionsUpdated(address indexed extension, address indexed permissions, address indexed sender);\r\n    event RoyaltiesUpdated(uint256 indexed tokenId, address payable[] receivers, uint256[] basisPoints);\r\n    event DefaultRoyaltiesUpdated(address payable[] receivers, uint256[] basisPoints);\r\n    event ExtensionRoyaltiesUpdated(address indexed extension, address payable[] receivers, uint256[] basisPoints);\r\n    event ExtensionApproveTransferUpdated(address indexed extension, bool enabled);\r\n\r\n    /**\r\n     * @dev gets address of all extensions\r\n     */\r\n    function getExtensions() external view returns (address[] memory);\r\n\r\n    /**\r\n     * @dev add an extension.  Can only be called by contract owner or admin.\r\n     * extension address must point to a contract implementing ICreatorExtension.\r\n     * Returns True if newly added, False if already added.\r\n     */\r\n    function registerExtension(address extension, string calldata baseURI) external;\r\n\r\n    /**\r\n     * @dev add an extension.  Can only be called by contract owner or admin.\r\n     * extension address must point to a contract implementing ICreatorExtension.\r\n     * Returns True if newly added, False if already added.\r\n     */\r\n    function registerExtension(address extension, string calldata baseURI, bool baseURIIdentical) external;\r\n\r\n    /**\r\n     * @dev add an extension.  Can only be called by contract owner or admin.\r\n     * Returns True if removed, False if already removed.\r\n     */\r\n    function unregisterExtension(address extension) external;\r\n\r\n    /**\r\n     * @dev blacklist an extension.  Can only be called by contract owner or admin.\r\n     * This function will destroy all ability to reference the metadata of any tokens created\r\n     * by the specified extension. It will also unregister the extension if needed.\r\n     * Returns True if removed, False if already removed.\r\n     */\r\n    function blacklistExtension(address extension) external;\r\n\r\n    /**\r\n     * @dev set the baseTokenURI of an extension.  Can only be called by extension.\r\n     */\r\n    function setBaseTokenURIExtension(string calldata uri) external;\r\n\r\n    /**\r\n     * @dev set the baseTokenURI of an extension.  Can only be called by extension.\r\n     * For tokens with no uri configured, tokenURI will return \"uri+tokenId\"\r\n     */\r\n    function setBaseTokenURIExtension(string calldata uri, bool identical) external;\r\n\r\n    /**\r\n     * @dev set the common prefix of an extension.  Can only be called by extension.\r\n     * If configured, and a token has a uri set, tokenURI will return \"prefixURI+tokenURI\"\r\n     * Useful if you want to use ipfs/arweave\r\n     */\r\n    function setTokenURIPrefixExtension(string calldata prefix) external;\r\n\r\n    /**\r\n     * @dev set the tokenURI of a token extension.  Can only be called by extension that minted token.\r\n     */\r\n    function setTokenURIExtension(uint256 tokenId, string calldata uri) external;\r\n\r\n    /**\r\n     * @dev set the tokenURI of a token extension for multiple tokens.  Can only be called by extension that minted token.\r\n     */\r\n    function setTokenURIExtension(uint256[] memory tokenId, string[] calldata uri) external;\r\n\r\n    /**\r\n     * @dev set the baseTokenURI for tokens with no extension.  Can only be called by owner/admin.\r\n     * For tokens with no uri configured, tokenURI will return \"uri+tokenId\"\r\n     */\r\n    function setBaseTokenURI(string calldata uri) external;\r\n\r\n    /**\r\n     * @dev set the common prefix for tokens with no extension.  Can only be called by owner/admin.\r\n     * If configured, and a token has a uri set, tokenURI will return \"prefixURI+tokenURI\"\r\n     * Useful if you want to use ipfs/arweave\r\n     */\r\n    function setTokenURIPrefix(string calldata prefix) external;\r\n\r\n    /**\r\n     * @dev set the tokenURI of a token with no extension.  Can only be called by owner/admin.\r\n     */\r\n    function setTokenURI(uint256 tokenId, string calldata uri) external;\r\n\r\n    /**\r\n     * @dev set the tokenURI of multiple tokens with no extension.  Can only be called by owner/admin.\r\n     */\r\n    function setTokenURI(uint256[] memory tokenIds, string[] calldata uris) external;\r\n\r\n    /**\r\n     * @dev set a permissions contract for an extension.  Used to control minting.\r\n     */\r\n    function setMintPermissions(address extension, address permissions) external;\r\n\r\n    /**\r\n     * @dev Configure so transfers of tokens created by the caller (must be extension) gets approval\r\n     * from the extension before transferring\r\n     */\r\n    function setApproveTransferExtension(bool enabled) external;\r\n\r\n    /**\r\n     * @dev get the extension of a given token\r\n     */\r\n    function tokenExtension(uint256 tokenId) external view returns (address);\r\n\r\n    /**\r\n     * @dev Set default royalties\r\n     */\r\n    function setRoyalties(address payable[] calldata receivers, uint256[] calldata basisPoints) external;\r\n\r\n    /**\r\n     * @dev Set royalties of a token\r\n     */\r\n    function setRoyalties(uint256 tokenId, address payable[] calldata receivers, uint256[] calldata basisPoints) external;\r\n\r\n    /**\r\n     * @dev Set royalties of an extension\r\n     */\r\n    function setRoyaltiesExtension(address extension, address payable[] calldata receivers, uint256[] calldata basisPoints) external;\r\n\r\n    /**\r\n     * @dev Get royalites of a token.  Returns list of receivers and basisPoints\r\n     */\r\n    function getRoyalties(uint256 tokenId) external view returns (address payable[] memory, uint256[] memory);\r\n    \r\n    // Royalty support for various other standards\r\n    function getFeeRecipients(uint256 tokenId) external view returns (address payable[] memory);\r\n    function getFeeBps(uint256 tokenId) external view returns (uint[] memory);\r\n    function getFees(uint256 tokenId) external view returns (address payable[] memory, uint256[] memory);\r\n    function royaltyInfo(uint256 tokenId, uint256 value, bytes calldata data) external view returns (address, uint256, bytes memory);\r\n\r\n}\r\n\r\n// File: contracts\\core\\IERC721CreatorCore.sol\r\n\r\npragma solidity ^0.8.0;\r\n\r\n/// @author: manifold.xyz\r\n\r\n\r\n/**\r\n * @dev Core ERC721 creator interface\r\n */\r\ninterface IERC721CreatorCore is ICreatorCore {\r\n\r\n    /**\r\n     * @dev mint a token with no extension. Can only be called by an admin.\r\n     * Returns tokenId minted\r\n     */\r\n    function mintBase(address to) external returns (uint256);\r\n\r\n    /**\r\n     * @dev mint a token with no extension. Can only be called by an admin.\r\n     * Returns tokenId minted\r\n     */\r\n    function mintBase(address to, string calldata uri) external returns (uint256);\r\n\r\n    /**\r\n     * @dev batch mint a token with no extension. Can only be called by an admin.\r\n     * Returns tokenId minted\r\n     */\r\n    function mintBaseBatch(address to, uint16 count) external returns (uint256[] memory);\r\n\r\n    /**\r\n     * @dev batch mint a token with no extension. Can only be called by an admin.\r\n     * Returns tokenId minted\r\n     */\r\n    function mintBaseBatch(address to, string[] calldata uris) external returns (uint256[] memory);\r\n\r\n    /**\r\n     * @dev mint a token. Can only be called by a registered extension.\r\n     * Returns tokenId minted\r\n     */\r\n    function mintExtension(address to) external returns (uint256);\r\n\r\n    /**\r\n     * @dev mint a token. Can only be called by a registered extension.\r\n     * Returns tokenId minted\r\n     */\r\n    function mintExtension(address to, string calldata uri) external returns (uint256);\r\n\r\n    /**\r\n     * @dev batch mint a token. Can only be called by a registered extension.\r\n     * Returns tokenIds minted\r\n     */\r\n    function mintExtensionBatch(address to, uint16 count) external returns (uint256[] memory);\r\n\r\n    /**\r\n     * @dev batch mint a token. Can only be called by a registered extension.\r\n     * Returns tokenId minted\r\n     */\r\n    function mintExtensionBatch(address to, string[] calldata uris) external returns (uint256[] memory);\r\n\r\n    /**\r\n     * @dev burn a token. Can only be called by token owner or approved address.\r\n     * On burn, calls back to the registered extension's onBurn method\r\n     */\r\n    function burn(uint256 tokenId) external;\r\n\r\n}\r\n\r\n// File: node_modules\\@openzeppelin\\contracts\\utils\\introspection\\IERC165.sol\r\n\r\n\r\n// OpenZeppelin Contracts v4.4.1 (utils/introspection/IERC165.sol)\r\n\r\n// File: @openzeppelin\\contracts\\utils\\introspection\\ERC165Checker.sol\r\n\r\n\r\n// OpenZeppelin Contracts v4.4.1 (utils/introspection/ERC165Checker.sol)\r\n\r\npragma solidity ^0.8.0;\r\n\r\n/**\r\n * @dev Library used to query support of an interface declared via {IERC165}.\r\n *\r\n * Note that these functions return the actual result of the query: they do not\r\n * `revert` if an interface is not supported. It is up to the caller to decide\r\n * what to do in these cases.\r\n */\r\nlibrary ERC165Checker {\r\n    // As per the EIP-165 spec, no interface should ever match 0xffffffff\r\n    bytes4 private constant _INTERFACE_ID_INVALID = 0xffffffff;\r\n\r\n    /**\r\n     * @dev Returns true if `account` supports the {IERC165} interface,\r\n     */\r\n    function supportsERC165(address account) internal view returns (bool) {\r\n        // Any contract that implements ERC165 must explicitly indicate support of\r\n        // InterfaceId_ERC165 and explicitly indicate non-support of InterfaceId_Invalid\r\n        return\r\n            _supportsERC165Interface(account, type(IERC165).interfaceId) &&\r\n            !_supportsERC165Interface(account, _INTERFACE_ID_INVALID);\r\n    }\r\n\r\n    /**\r\n     * @dev Returns true if `account` supports the interface defined by\r\n     * `interfaceId`. Support for {IERC165} itself is queried automatically.\r\n     *\r\n     * See {IERC165-supportsInterface}.\r\n     */\r\n    function supportsInterface(address account, bytes4 interfaceId) internal view returns (bool) {\r\n        // query support of both ERC165 as per the spec and support of _interfaceId\r\n        return supportsERC165(account) && _supportsERC165Interface(account, interfaceId);\r\n    }\r\n\r\n    /**\r\n     * @dev Returns a boolean array where each value corresponds to the\r\n     * interfaces passed in and whether they're supported or not. This allows\r\n     * you to batch check interfaces for a contract where your expectation\r\n     * is that some interfaces may not be supported.\r\n     *\r\n     * See {IERC165-supportsInterface}.\r\n     *\r\n     * _Available since v3.4._\r\n     */\r\n    function getSupportedInterfaces(address account, bytes4[] memory interfaceIds)\r\n        internal\r\n        view\r\n        returns (bool[] memory)\r\n    {\r\n        // an array of booleans corresponding to interfaceIds and whether they're supported or not\r\n        bool[] memory interfaceIdsSupported = new bool[](interfaceIds.length);\r\n\r\n        // query support of ERC165 itself\r\n        if (supportsERC165(account)) {\r\n            // query support of each interface in interfaceIds\r\n            for (uint256 i = 0; i < interfaceIds.length; i++) {\r\n                interfaceIdsSupported[i] = _supportsERC165Interface(account, interfaceIds[i]);\r\n            }\r\n        }\r\n\r\n        return interfaceIdsSupported;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns true if `account` supports all the interfaces defined in\r\n     * `interfaceIds`. Support for {IERC165} itself is queried automatically.\r\n     *\r\n     * Batch-querying can lead to gas savings by skipping repeated checks for\r\n     * {IERC165} support.\r\n     *\r\n     * See {IERC165-supportsInterface}.\r\n     */\r\n    function supportsAllInterfaces(address account, bytes4[] memory interfaceIds) internal view returns (bool) {\r\n        // query support of ERC165 itself\r\n        if (!supportsERC165(account)) {\r\n            return false;\r\n        }\r\n\r\n        // query support of each interface in _interfaceIds\r\n        for (uint256 i = 0; i < interfaceIds.length; i++) {\r\n            if (!_supportsERC165Interface(account, interfaceIds[i])) {\r\n                return false;\r\n            }\r\n        }\r\n\r\n        // all interfaces supported\r\n        return true;\r\n    }\r\n\r\n    /**\r\n     * @notice Query if a contract implements an interface, does not check ERC165 support\r\n     * @param account The address of the contract to query for support of an interface\r\n     * @param interfaceId The interface identifier, as specified in ERC-165\r\n     * @return true if the contract at account indicates support of the interface with\r\n     * identifier interfaceId, false otherwise\r\n     * @dev Assumes that account contains a contract that supports ERC165, otherwise\r\n     * the behavior of this method is undefined. This precondition can be checked\r\n     * with {supportsERC165}.\r\n     * Interface identification is specified in ERC-165.\r\n     */\r\n    function _supportsERC165Interface(address account, bytes4 interfaceId) private view returns (bool) {\r\n        bytes memory encodedParams = abi.encodeWithSelector(IERC165.supportsInterface.selector, interfaceId);\r\n        (bool success, bytes memory result) = account.staticcall{gas: 30000}(encodedParams);\r\n        if (result.length < 32) return false;\r\n        return success && abi.decode(result, (bool));\r\n    }\r\n}\r\n\r\n// File: @openzeppelin\\contracts\\utils\\introspection\\ERC165.sol\r\n\r\n\r\n// OpenZeppelin Contracts v4.4.1 (utils/introspection/ERC165.sol)\r\n\r\npragma solidity ^0.8.0;\r\n\r\n\r\n/**\r\n * @dev Implementation of the {IERC165} interface.\r\n *\r\n * Contracts that want to implement ERC165 should inherit from this contract and override {supportsInterface} to check\r\n * for the additional interface id that will be supported. For example:\r\n *\r\n * ```solidity\r\n * function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {\r\n *     return interfaceId == type(MyInterface).interfaceId || super.supportsInterface(interfaceId);\r\n * }\r\n * ```\r\n *\r\n * Alternatively, {ERC165Storage} provides an easier to use but more expensive implementation.\r\n */\r\nabstract contract ERC165 is IERC165 {\r\n    /**\r\n     * @dev See {IERC165-supportsInterface}.\r\n     */\r\n    function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {\r\n        return interfaceId == type(IERC165).interfaceId;\r\n    }\r\n}\r\n\r\n// File: @openzeppelin\\contracts\\utils\\structs\\EnumerableSet.sol\r\n\r\n\r\n// OpenZeppelin Contracts v4.4.1 (utils/structs/EnumerableSet.sol)\r\n\r\npragma solidity ^0.8.0;\r\n\r\n/**\r\n * @dev Library for managing\r\n * https://en.wikipedia.org/wiki/Set_(abstract_data_type)[sets] of primitive\r\n * types.\r\n *\r\n * Sets have the following properties:\r\n *\r\n * - Elements are added, removed, and checked for existence in constant time\r\n * (O(1)).\r\n * - Elements are enumerated in O(n). No guarantees are made on the ordering.\r\n *\r\n * ```\r\n * contract Example {\r\n *     // Add the library methods\r\n *     using EnumerableSet for EnumerableSet.AddressSet;\r\n *\r\n *     // Declare a set state variable\r\n *     EnumerableSet.AddressSet private mySet;\r\n * }\r\n * ```\r\n *\r\n * As of v3.3.0, sets of type `bytes32` (`Bytes32Set`), `address` (`AddressSet`)\r\n * and `uint256` (`UintSet`) are supported.\r\n */\r\nlibrary EnumerableSet {\r\n    // To implement this library for multiple types with as little code\r\n    // repetition as possible, we write it in terms of a generic Set type with\r\n    // bytes32 values.\r\n    // The Set implementation uses private functions, and user-facing\r\n    // implementations (such as AddressSet) are just wrappers around the\r\n    // underlying Set.\r\n    // This means that we can only create new EnumerableSets for types that fit\r\n    // in bytes32.\r\n\r\n    struct Set {\r\n        // Storage of set values\r\n        bytes32[] _values;\r\n        // Position of the value in the `values` array, plus 1 because index 0\r\n        // means a value is not in the set.\r\n        mapping(bytes32 => uint256) _indexes;\r\n    }\r\n\r\n    /**\r\n     * @dev Add a value to a set. O(1).\r\n     *\r\n     * Returns true if the value was added to the set, that is if it was not\r\n     * already present.\r\n     */\r\n    function _add(Set storage set, bytes32 value) private returns (bool) {\r\n        if (!_contains(set, value)) {\r\n            set._values.push(value);\r\n            // The value is stored at length-1, but we add 1 to all indexes\r\n            // and use 0 as a sentinel value\r\n            set._indexes[value] = set._values.length;\r\n            return true;\r\n        } else {\r\n            return false;\r\n        }\r\n    }\r\n\r\n    /**\r\n     * @dev Removes a value from a set. O(1).\r\n     *\r\n     * Returns true if the value was removed from the set, that is if it was\r\n     * present.\r\n     */\r\n    function _remove(Set storage set, bytes32 value) private returns (bool) {\r\n        // We read and store the value's index to prevent multiple reads from the same storage slot\r\n        uint256 valueIndex = set._indexes[value];\r\n\r\n        if (valueIndex != 0) {\r\n            // Equivalent to contains(set, value)\r\n            // To delete an element from the _values array in O(1), we swap the element to delete with the last one in\r\n            // the array, and then remove the last element (sometimes called as 'swap and pop').\r\n            // This modifies the order of the array, as noted in {at}.\r\n\r\n            uint256 toDeleteIndex = valueIndex - 1;\r\n            uint256 lastIndex = set._values.length - 1;\r\n\r\n            if (lastIndex != toDeleteIndex) {\r\n                bytes32 lastvalue = set._values[lastIndex];\r\n\r\n                // Move the last value to the index where the value to delete is\r\n                set._values[toDeleteIndex] = lastvalue;\r\n                // Update the index for the moved value\r\n                set._indexes[lastvalue] = valueIndex; // Replace lastvalue's index to valueIndex\r\n            }\r\n\r\n            // Delete the slot where the moved value was stored\r\n            set._values.pop();\r\n\r\n            // Delete the index for the deleted slot\r\n            delete set._indexes[value];\r\n\r\n            return true;\r\n        } else {\r\n            return false;\r\n        }\r\n    }\r\n\r\n    /**\r\n     * @dev Returns true if the value is in the set. O(1).\r\n     */\r\n    function _contains(Set storage set, bytes32 value) private view returns (bool) {\r\n        return set._indexes[value] != 0;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the number of values on the set. O(1).\r\n     */\r\n    function _length(Set storage set) private view returns (uint256) {\r\n        return set._values.length;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the value stored at position `index` in the set. O(1).\r\n     *\r\n     * Note that there are no guarantees on the ordering of values inside the\r\n     * array, and it may change when more values are added or removed.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - `index` must be strictly less than {length}.\r\n     */\r\n    function _at(Set storage set, uint256 index) private view returns (bytes32) {\r\n        return set._values[index];\r\n    }\r\n\r\n    /**\r\n     * @dev Return the entire set in an array\r\n     *\r\n     * WARNING: This operation will copy the entire storage to memory, which can be quite expensive. This is designed\r\n     * to mostly be used by view accessors that are queried without any gas fees. Developers should keep in mind that\r\n     * this function has an unbounded cost, and using it as part of a state-changing function may render the function\r\n     * uncallable if the set grows to a point where copying to memory consumes too much gas to fit in a block.\r\n     */\r\n    function _values(Set storage set) private view returns (bytes32[] memory) {\r\n        return set._values;\r\n    }\r\n\r\n    // Bytes32Set\r\n\r\n    struct Bytes32Set {\r\n        Set _inner;\r\n    }\r\n\r\n    /**\r\n     * @dev Add a value to a set. O(1).\r\n     *\r\n     * Returns true if the value was added to the set, that is if it was not\r\n     * already present.\r\n     */\r\n    function add(Bytes32Set storage set, bytes32 value) internal returns (bool) {\r\n        return _add(set._inner, value);\r\n    }\r\n\r\n    /**\r\n     * @dev Removes a value from a set. O(1).\r\n     *\r\n     * Returns true if the value was removed from the set, that is if it was\r\n     * present.\r\n     */\r\n    function remove(Bytes32Set storage set, bytes32 value) internal returns (bool) {\r\n        return _remove(set._inner, value);\r\n    }\r\n\r\n    /**\r\n     * @dev Returns true if the value is in the set. O(1).\r\n     */\r\n    function contains(Bytes32Set storage set, bytes32 value) internal view returns (bool) {\r\n        return _contains(set._inner, value);\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the number of values in the set. O(1).\r\n     */\r\n    function length(Bytes32Set storage set) internal view returns (uint256) {\r\n        return _length(set._inner);\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the value stored at position `index` in the set. O(1).\r\n     *\r\n     * Note that there are no guarantees on the ordering of values inside the\r\n     * array, and it may change when more values are added or removed.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - `index` must be strictly less than {length}.\r\n     */\r\n    function at(Bytes32Set storage set, uint256 index) internal view returns (bytes32) {\r\n        return _at(set._inner, index);\r\n    }\r\n\r\n    /**\r\n     * @dev Return the entire set in an array\r\n     *\r\n     * WARNING: This operation will copy the entire storage to memory, which can be quite expensive. This is designed\r\n     * to mostly be used by view accessors that are queried without any gas fees. Developers should keep in mind that\r\n     * this function has an unbounded cost, and using it as part of a state-changing function may render the function\r\n     * uncallable if the set grows to a point where copying to memory consumes too much gas to fit in a block.\r\n     */\r\n    function values(Bytes32Set storage set) internal view returns (bytes32[] memory) {\r\n        return _values(set._inner);\r\n    }\r\n\r\n    // AddressSet\r\n\r\n    struct AddressSet {\r\n        Set _inner;\r\n    }\r\n\r\n    /**\r\n     * @dev Add a value to a set. O(1).\r\n     *\r\n     * Returns true if the value was added to the set, that is if it was not\r\n     * already present.\r\n     */\r\n    function add(AddressSet storage set, address value) internal returns (bool) {\r\n        return _add(set._inner, bytes32(uint256(uint160(value))));\r\n    }\r\n\r\n    /**\r\n     * @dev Removes a value from a set. O(1).\r\n     *\r\n     * Returns true if the value was removed from the set, that is if it was\r\n     * present.\r\n     */\r\n    function remove(AddressSet storage set, address value) internal returns (bool) {\r\n        return _remove(set._inner, bytes32(uint256(uint160(value))));\r\n    }\r\n\r\n    /**\r\n     * @dev Returns true if the value is in the set. O(1).\r\n     */\r\n    function contains(AddressSet storage set, address value) internal view returns (bool) {\r\n        return _contains(set._inner, bytes32(uint256(uint160(value))));\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the number of values in the set. O(1).\r\n     */\r\n    function length(AddressSet storage set) internal view returns (uint256) {\r\n        return _length(set._inner);\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the value stored at position `index` in the set. O(1).\r\n     *\r\n     * Note that there are no guarantees on the ordering of values inside the\r\n     * array, and it may change when more values are added or removed.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - `index` must be strictly less than {length}.\r\n     */\r\n    function at(AddressSet storage set, uint256 index) internal view returns (address) {\r\n        return address(uint160(uint256(_at(set._inner, index))));\r\n    }\r\n\r\n    /**\r\n     * @dev Return the entire set in an array\r\n     *\r\n     * WARNING: This operation will copy the entire storage to memory, which can be quite expensive. This is designed\r\n     * to mostly be used by view accessors that are queried without any gas fees. Developers should keep in mind that\r\n     * this function has an unbounded cost, and using it as part of a state-changing function may render the function\r\n     * uncallable if the set grows to a point where copying to memory consumes too much gas to fit in a block.\r\n     */\r\n    function values(AddressSet storage set) internal view returns (address[] memory) {\r\n        bytes32[] memory store = _values(set._inner);\r\n        address[] memory result;\r\n\r\n        assembly {\r\n            result := store\r\n        }\r\n\r\n        return result;\r\n    }\r\n\r\n    // UintSet\r\n\r\n    struct UintSet {\r\n        Set _inner;\r\n    }\r\n\r\n    /**\r\n     * @dev Add a value to a set. O(1).\r\n     *\r\n     * Returns true if the value was added to the set, that is if it was not\r\n     * already present.\r\n     */\r\n    function add(UintSet storage set, uint256 value) internal returns (bool) {\r\n        return _add(set._inner, bytes32(value));\r\n    }\r\n\r\n    /**\r\n     * @dev Removes a value from a set. O(1).\r\n     *\r\n     * Returns true if the value was removed from the set, that is if it was\r\n     * present.\r\n     */\r\n    function remove(UintSet storage set, uint256 value) internal returns (bool) {\r\n        return _remove(set._inner, bytes32(value));\r\n    }\r\n\r\n    /**\r\n     * @dev Returns true if the value is in the set. O(1).\r\n     */\r\n    function contains(UintSet storage set, uint256 value) internal view returns (bool) {\r\n        return _contains(set._inner, bytes32(value));\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the number of values on the set. O(1).\r\n     */\r\n    function length(UintSet storage set) internal view returns (uint256) {\r\n        return _length(set._inner);\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the value stored at position `index` in the set. O(1).\r\n     *\r\n     * Note that there are no guarantees on the ordering of values inside the\r\n     * array, and it may change when more values are added or removed.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - `index` must be strictly less than {length}.\r\n     */\r\n    function at(UintSet storage set, uint256 index) internal view returns (uint256) {\r\n        return uint256(_at(set._inner, index));\r\n    }\r\n\r\n    /**\r\n     * @dev Return the entire set in an array\r\n     *\r\n     * WARNING: This operation will copy the entire storage to memory, which can be quite expensive. This is designed\r\n     * to mostly be used by view accessors that are queried without any gas fees. Developers should keep in mind that\r\n     * this function has an unbounded cost, and using it as part of a state-changing function may render the function\r\n     * uncallable if the set grows to a point where copying to memory consumes too much gas to fit in a block.\r\n     */\r\n    function values(UintSet storage set) internal view returns (uint256[] memory) {\r\n        bytes32[] memory store = _values(set._inner);\r\n        uint256[] memory result;\r\n\r\n        assembly {\r\n            result := store\r\n        }\r\n\r\n        return result;\r\n    }\r\n}\r\n\r\n// File: node_modules\\@openzeppelin\\contracts\\utils\\Context.sol\r\n\r\n\r\n// OpenZeppelin Contracts v4.4.1 (utils/Context.sol)\r\n\r\npragma solidity ^0.8.0;\r\n\r\n/**\r\n * @dev Provides information about the current execution context, including the\r\n * sender of the transaction and its data. While these are generally available\r\n * via msg.sender and msg.data, they should not be accessed in such a direct\r\n * manner, since when dealing with meta-transactions the account sending and\r\n * paying for execution may not be the actual sender (as far as an application\r\n * is concerned).\r\n *\r\n * This contract is only required for intermediate, library-like contracts.\r\n */\r\nabstract contract Context {\r\n    function _msgSender() internal view virtual returns (address) {\r\n        return msg.sender;\r\n    }\r\n\r\n    function _msgData() internal view virtual returns (bytes calldata) {\r\n        return msg.data;\r\n    }\r\n}\r\n\r\n// File: @openzeppelin\\contracts\\access\\Ownable.sol\r\n\r\n\r\n// OpenZeppelin Contracts v4.4.1 (access/Ownable.sol)\r\n\r\npragma solidity ^0.8.0;\r\n\r\n\r\n/**\r\n * @dev Contract module which provides a basic access control mechanism, where\r\n * there is an account (an owner) that can be granted exclusive access to\r\n * specific functions.\r\n *\r\n * By default, the owner account will be the one that deploys the contract. This\r\n * can later be changed with {transferOwnership}.\r\n *\r\n * This module is used through inheritance. It will make available the modifier\r\n * `onlyOwner`, which can be applied to your functions to restrict their use to\r\n * the owner.\r\n */\r\nabstract contract Ownable is Context {\r\n    address private _owner;\r\n\r\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\r\n\r\n    /**\r\n     * @dev Initializes the contract setting the deployer as the initial owner.\r\n     */\r\n    constructor() {\r\n        _transferOwnership(_msgSender());\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the address of the current owner.\r\n     */\r\n    function owner() public view virtual returns (address) {\r\n        return _owner;\r\n    }\r\n\r\n    /**\r\n     * @dev Throws if called by any account other than the owner.\r\n     */\r\n    modifier onlyOwner() {\r\n        require(owner() == _msgSender(), \"Ownable: caller is not the owner\");\r\n        _;\r\n    }\r\n\r\n    /**\r\n     * @dev Leaves the contract without owner. It will not be possible to call\r\n     * `onlyOwner` functions anymore. Can only be called by the current owner.\r\n     *\r\n     * NOTE: Renouncing ownership will leave the contract without an owner,\r\n     * thereby removing any functionality that is only available to the owner.\r\n     */\r\n    function renounceOwnership() public virtual onlyOwner {\r\n        _transferOwnership(address(0));\r\n    }\r\n\r\n    /**\r\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\r\n     * Can only be called by the current owner.\r\n     */\r\n    function transferOwnership(address newOwner) public virtual onlyOwner {\r\n        require(newOwner != address(0), \"Ownable: new owner is the zero address\");\r\n        _transferOwnership(newOwner);\r\n    }\r\n\r\n    /**\r\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\r\n     * Internal function without access restriction.\r\n     */\r\n    function _transferOwnership(address newOwner) internal virtual {\r\n        address oldOwner = _owner;\r\n        _owner = newOwner;\r\n        emit OwnershipTransferred(oldOwner, newOwner);\r\n    }\r\n}\r\n\r\n// File: contracts\\access\\IAdminControl.sol\r\n\r\npragma solidity ^0.8.0;\r\n\r\n/// @author: manifold.xyz\r\n\r\n\r\n/**\r\n * @dev Interface for admin control\r\n */\r\ninterface IAdminControl is IERC165 {\r\n\r\n    event AdminApproved(address indexed account, address indexed sender);\r\n    event AdminRevoked(address indexed account, address indexed sender);\r\n\r\n    /**\r\n     * @dev gets address of all admins\r\n     */\r\n    function getAdmins() external view returns (address[] memory);\r\n\r\n    /**\r\n     * @dev add an admin.  Can only be called by contract owner.\r\n     */\r\n    function approveAdmin(address admin) external;\r\n\r\n    /**\r\n     * @dev remove an admin.  Can only be called by contract owner.\r\n     */\r\n    function revokeAdmin(address admin) external;\r\n\r\n    /**\r\n     * @dev checks whether or not given address is an admin\r\n     * Returns True if they are\r\n     */\r\n    function isAdmin(address admin) external view returns (bool);\r\n\r\n}\r\n\r\n// File: contracts\\access\\AdminControl.sol\r\n\r\n\r\n\r\npragma solidity ^0.8.0;\r\n\r\n\r\n\r\n\r\n\r\nabstract contract AdminControl is Ownable, IAdminControl, ERC165 {\r\n    using EnumerableSet for EnumerableSet.AddressSet;\r\n\r\n    // Track registered admins\r\n    EnumerableSet.AddressSet private _admins;\r\n\r\n    /**\r\n     * @dev See {IERC165-supportsInterface}.\r\n     */\r\n    function supportsInterface(bytes4 interfaceId) public view virtual override(ERC165, IERC165) returns (bool) {\r\n        return interfaceId == type(IAdminControl).interfaceId\r\n            || super.supportsInterface(interfaceId);\r\n    }\r\n\r\n    /**\r\n     * @dev Only allows approved admins to call the specified function\r\n     */\r\n    modifier adminRequired() {\r\n        require(owner() == msg.sender || _admins.contains(msg.sender), \"AdminControl: Must be owner or admin\");\r\n        _;\r\n    }   \r\n\r\n    /**\r\n     * @dev See {IAdminControl-getAdmins}.\r\n     */\r\n    function getAdmins() external view override returns (address[] memory admins) {\r\n        admins = new address[](_admins.length());\r\n        for (uint i = 0; i < _admins.length(); i++) {\r\n            admins[i] = _admins.at(i);\r\n        }\r\n        return admins;\r\n    }\r\n\r\n    /**\r\n     * @dev See {IAdminControl-approveAdmin}.\r\n     */\r\n    function approveAdmin(address admin) external override onlyOwner {\r\n        if (!_admins.contains(admin)) {\r\n            emit AdminApproved(admin, msg.sender);\r\n            _admins.add(admin);\r\n        }\r\n    }\r\n\r\n    /**\r\n     * @dev See {IAdminControl-revokeAdmin}.\r\n     */\r\n    function revokeAdmin(address admin) external override onlyOwner {\r\n        if (_admins.contains(admin)) {\r\n            emit AdminRevoked(admin, msg.sender);\r\n            _admins.remove(admin);\r\n        }\r\n    }\r\n\r\n    /**\r\n     * @dev See {IAdminControl-isAdmin}.\r\n     */\r\n    function isAdmin(address admin) public override view returns (bool) {\r\n        return (owner() == admin || _admins.contains(admin));\r\n    }\r\n\r\n}\r\n\r\n// File: contracts\\extensions\\CreatorExtension.sol\r\n\r\n\r\n\r\npragma solidity ^0.8.0;\r\n\r\n/// @author: manifold.xyz\r\n\r\n\r\n/**\r\n * @dev Base creator extension variables\r\n */\r\nabstract contract CreatorExtension is ERC165 {\r\n\r\n    /**\r\n     * @dev Legacy extension interface identifiers\r\n     *\r\n     * {IERC165-supportsInterface} needs to return 'true' for this interface\r\n     * in order backwards compatible with older creator contracts\r\n     */\r\n    bytes4 constant internal LEGACY_EXTENSION_INTERFACE = 0x7005caad;\r\n\r\n    /**\r\n     * @dev See {IERC165-supportsInterface}.\r\n     */\r\n    function supportsInterface(bytes4 interfaceId) public view virtual override(ERC165) returns (bool) {\r\n        return interfaceId == LEGACY_EXTENSION_INTERFACE\r\n            || super.supportsInterface(interfaceId);\r\n    }\r\n    \r\n}\r\n\r\n// File: contracts\\extensions\\ERC721\\ERC721CreatorExtension.sol\r\n\r\n\r\n\r\npragma solidity ^0.8.0;\r\n\r\n/// @author: manifold.xyz\r\n\r\n\r\n/**\r\n * @dev Base ERC721 creator extension variables\r\n */\r\nabstract contract ERC721CreatorExtension is CreatorExtension {\r\n\r\n    /**\r\n     * @dev Legacy extension interface identifiers (see CreatorExtension for more)\r\n     *\r\n     * {IERC165-supportsInterface} needs to return 'true' for this interface\r\n     * in order backwards compatible with older creator contracts\r\n     */\r\n\r\n    // Required to be recognized as a contract to receive onBurn for older creator contracts\r\n    bytes4 constant internal LEGACY_ERC721_EXTENSION_BURNABLE_INTERFACE = 0xf3f4e68b;\r\n\r\n}\r\n\r\n// File: contracts\\extensions\\ERC721\\IERC721CreatorExtensionApproveTransfer.sol\r\n\r\n\r\n\r\npragma solidity ^0.8.0;\r\n\r\n/// @author: manifold.xyz\r\n\r\n\r\n/**\r\n * Implement this if you want your extension to approve a transfer\r\n */\r\ninterface IERC721CreatorExtensionApproveTransfer is IERC165 {\r\n    /**\r\n     * @dev Set whether or not the creator will check the extension for approval of token transfer\r\n     */\r\n    function setApproveTransfer(address creator, bool enabled) external;\r\n\r\n    /**\r\n     * @dev Called by creator contract to approve a transfer\r\n     */\r\n    function approveTransfer(\r\n        address from,\r\n        address to,\r\n        uint256 tokenId\r\n    ) external returns (bool);\r\n}\r\n\r\n// File: contracts\\extensions\\ERC721\\ERC721CreatorExtensionApproveTransfer.sol\r\n\r\n\r\n\r\npragma solidity ^0.8.0;\r\n\r\n/// @author: manifold.xyz\r\n\r\n\r\n\r\n\r\n\r\n\r\n/**\r\n * @dev Suggested implementation for extensions that require the creator to\r\n * check with it before a transfer occurs\r\n */\r\nabstract contract ERC721CreatorExtensionApproveTransfer is AdminControl, ERC721CreatorExtension, IERC721CreatorExtensionApproveTransfer {\r\n\r\n    /**\r\n     * @dev See {IERC165-supportsInterface}.\r\n     */\r\n    function supportsInterface(bytes4 interfaceId) public view virtual override(AdminControl, CreatorExtension, IERC165) returns (bool) {\r\n        return interfaceId == type(IERC721CreatorExtensionApproveTransfer).interfaceId\r\n            || super.supportsInterface(interfaceId);\r\n    }\r\n\r\n    /**\r\n     * @dev See {IERC721CreatorExtensionApproveTransfer-setApproveTransfer}\r\n     */\r\n    function setApproveTransfer(address creator, bool enabled) external override adminRequired {\r\n        require(ERC165Checker.supportsInterface(creator, type(IERC721CreatorCore).interfaceId), \"creator must implement IERC721CreatorCore\");\r\n        IERC721CreatorCore(creator).setApproveTransferExtension(enabled);\r\n    }\r\n\r\n}\r\n\r\n// File: contracts\\extensions\\LegacyInterfaces.sol\r\n\r\npragma solidity ^0.8.0;\r\n\r\n/// @author: manifold.xyz\r\n\r\n/**\r\n * Library of legacy interface constants\r\n */\r\nlibrary LegacyInterfaces {\r\n\r\n    // LEGACY ERC721CreatorCore interface\r\n    bytes4 internal constant IERC721CreatorCore_v1 = 0x478c8530;\r\n\r\n}\r\n\r\n// File: contracts\\extensions\\SingleCreatorExtension.sol\r\n\r\n\r\n\r\npragma solidity ^0.8.0;\r\n\r\n\r\nabstract contract SingleCreatorBase {\r\n    address internal _creator;\r\n}\r\n\r\n/**\r\n * @dev Extension that only uses a single creator contract instance\r\n */\r\nabstract contract ERC721SingleCreatorExtension is SingleCreatorBase {\r\n\r\n    constructor(address creator) {\r\n        require(ERC165Checker.supportsInterface(creator, type(IERC721CreatorCore).interfaceId) ||\r\n                ERC165Checker.supportsInterface(creator, LegacyInterfaces.IERC721CreatorCore_v1), \r\n                \"Contract must implement IERC721CreatorCore\");\r\n        _creator = creator;\r\n    }\r\n\r\n}\r\n\r\n// File: @openzeppelin\\contracts\\security\\Pausable.sol\r\n\r\n\r\n// OpenZeppelin Contracts v4.4.1 (security/Pausable.sol)\r\n\r\npragma solidity ^0.8.0;\r\n\r\n\r\n/**\r\n * @dev Contract module which allows children to implement an emergency stop\r\n * mechanism that can be triggered by an authorized account.\r\n *\r\n * This module is used through inheritance. It will make available the\r\n * modifiers `whenNotPaused` and `whenPaused`, which can be applied to\r\n * the functions of your contract. Note that they will not be pausable by\r\n * simply including this module, only once the modifiers are put in place.\r\n */\r\nabstract contract Pausable is Context {\r\n    /**\r\n     * @dev Emitted when the pause is triggered by `account`.\r\n     */\r\n    event Paused(address account);\r\n\r\n    /**\r\n     * @dev Emitted when the pause is lifted by `account`.\r\n     */\r\n    event Unpaused(address account);\r\n\r\n    bool private _paused;\r\n\r\n    /**\r\n     * @dev Initializes the contract in unpaused state.\r\n     */\r\n    constructor() {\r\n        _paused = false;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns true if the contract is paused, and false otherwise.\r\n     */\r\n    function paused() public view virtual returns (bool) {\r\n        return _paused;\r\n    }\r\n\r\n    /**\r\n     * @dev Modifier to make a function callable only when the contract is not paused.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - The contract must not be paused.\r\n     */\r\n    modifier whenNotPaused() {\r\n        require(!paused(), \"Pausable: paused\");\r\n        _;\r\n    }\r\n\r\n    /**\r\n     * @dev Modifier to make a function callable only when the contract is paused.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - The contract must be paused.\r\n     */\r\n    modifier whenPaused() {\r\n        require(paused(), \"Pausable: not paused\");\r\n        _;\r\n    }\r\n\r\n    /**\r\n     * @dev Triggers stopped state.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - The contract must not be paused.\r\n     */\r\n    function _pause() internal virtual whenNotPaused {\r\n        _paused = true;\r\n        emit Paused(_msgSender());\r\n    }\r\n\r\n    /**\r\n     * @dev Returns to normal state.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - The contract must be paused.\r\n     */\r\n    function _unpause() internal virtual whenPaused {\r\n        _paused = false;\r\n        emit Unpaused(_msgSender());\r\n    }\r\n}\r\n\r\n// File: contracts\\RASCManager.sol\r\n\r\n\r\n\r\npragma solidity ^0.8.0;\r\n\r\n\r\n\r\n/**\r\n * @dev Implement this if you want your extension to have overloadable URI's\r\n */\r\ninterface ICreatorExtensionTokenURI is IERC165 {\r\n\r\n    /**\r\n     * Get the uri for a given creator/tokenId\r\n     */\r\n    function tokenURI(address creator, uint256 tokenId) external view returns (string memory);\r\n}\r\n\r\n\r\n/// @author: radix\r\n\r\n/**\r\n * TokenManager handles airdropping and transfer restrictions for Radix Art Social Club tokens.\r\n */\r\ncontract RASCManager is Ownable, Pausable, ERC721SingleCreatorExtension, ERC721CreatorExtensionApproveTransfer {\r\n    \r\n    //address private _creator;\r\n    uint256 private _minted;\r\n\r\n    //event ApprovalCheck(address from, address to, uint256 tokenId);\r\n\r\n    constructor(address creator_) ERC721SingleCreatorExtension(creator_)  { _minted = 0; }\r\n\r\n    function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {\r\n        return interfaceId == \r\n            type(ICreatorExtensionTokenURI).interfaceId || \r\n            AdminControl.supportsInterface(interfaceId) ||\r\n            ERC721CreatorExtensionApproveTransfer.supportsInterface(interfaceId);\r\n    }\r\n\r\n    function pause() external adminRequired {\r\n        _pause();\r\n    }\r\n\r\n    function unpause() external adminRequired {\r\n        _unpause();\r\n    }\r\n\r\n    function approveTransfer(address from, address to, uint256 tokenId) external override returns (bool) {\r\n        require(msg.sender == _creator, \"Invalid caller\");\r\n\r\n        // can't mint or transfer if this contract is paused (unless minting or sending to admin)\r\n        require(!paused() || isAdmin(to) || isAdmin(from), \"Tokens aren't transferable now\");\r\n\r\n        //emit ApprovalCheck(from, to, tokenId);\r\n\r\n        return true;\r\n    }\r\n\r\n    function setBaseTokenURI(string calldata uri, bool identical) external adminRequired {\r\n        IERC721CreatorCore(_creator).setBaseTokenURIExtension(uri, identical);\r\n    }\r\n\r\n    function setTokenURI(uint256[] calldata tokenIds, string[] calldata uris) external adminRequired {\r\n        IERC721CreatorCore(_creator).setTokenURIExtension(tokenIds, uris);\r\n    }    \r\n\r\n    function setTokenURIPrefix(string calldata prefix) external onlyOwner {\r\n        IERC721CreatorCore(_creator).setTokenURIPrefixExtension(prefix);\r\n    }\r\n\r\n    // Make sure draft tokens are already set up in Manifold Studio and get their metadata URIs prior to bulk minting        \r\n    function airdropURIs(address[] calldata receivers, string[] calldata uris) external adminRequired {\r\n        require(receivers.length == uris.length, \"Length mismatch\");\r\n\r\n        for (uint i = 0; i < receivers.length; i++) {\r\n            IERC721CreatorCore(_creator).mintExtension(receivers[i], uris[i]);\r\n        }\r\n        _minted += receivers.length;\r\n    }\r\n\r\n    function numMinted() external view returns (uint256)\r\n    {\r\n        return _minted;\r\n    }\r\n}","ABI":"[{\"inputs\":[{\"internalType\":\"address\",\"name\":\"creator_\",\"type\":\"address\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"}],\"name\":\"AdminApproved\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"}],\"name\":\"AdminRevoked\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"Paused\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"Unpaused\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"address[]\",\"name\":\"receivers\",\"type\":\"address[]\"},{\"internalType\":\"string[]\",\"name\":\"uris\",\"type\":\"string[]\"}],\"name\":\"airdropURIs\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"admin\",\"type\":\"address\"}],\"name\":\"approveAdmin\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"approveTransfer\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getAdmins\",\"outputs\":[{\"internalType\":\"address[]\",\"name\":\"admins\",\"type\":\"address[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"admin\",\"type\":\"address\"}],\"name\":\"isAdmin\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"numMinted\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"pause\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"paused\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"admin\",\"type\":\"address\"}],\"name\":\"revokeAdmin\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"creator\",\"type\":\"address\"},{\"internalType\":\"bool\",\"name\":\"enabled\",\"type\":\"bool\"}],\"name\":\"setApproveTransfer\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"string\",\"name\":\"uri\",\"type\":\"string\"},{\"internalType\":\"bool\",\"name\":\"identical\",\"type\":\"bool\"}],\"name\":\"setBaseTokenURI\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256[]\",\"name\":\"tokenIds\",\"type\":\"uint256[]\"},{\"internalType\":\"string[]\",\"name\":\"uris\",\"type\":\"string[]\"}],\"name\":\"setTokenURI\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"string\",\"name\":\"prefix\",\"type\":\"string\"}],\"name\":\"setTokenURIPrefix\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes4\",\"name\":\"interfaceId\",\"type\":\"bytes4\"}],\"name\":\"supportsInterface\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"unpause\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}]","ContractName":"RASCManager","CompilerVersion":"v0.8.7+commit.e28d00a7","OptimizationUsed":"0","Runs":"200","ConstructorArguments":"000000000000000000000000edad219521c18e964b1a2d722a4373448a95b61b","EVMVersion":"Default","Library":"","LicenseType":"MIT","Proxy":"0","Implementation":"","SwarmSource":"ipfs://2300ef32a81e349171ad1dc463b4efed3b7b172d5b583fa8679a89bf576958c7"}]}