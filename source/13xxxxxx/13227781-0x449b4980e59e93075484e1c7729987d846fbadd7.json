{"status":"1","message":"OK","result":[{"SourceCode":"{{\r\n  \"language\": \"Solidity\",\r\n  \"sources\": {\r\n    \"contracts/ScriptChecker.sol\": {\r\n      \"content\": \"//SPDX-License-Identifier: MIT\\r\\n\\r\\npragma solidity ^0.8.0;\\r\\n\\r\\nimport \\\"./interfaces/ISvgValidator.sol\\\";\\r\\n\\r\\n// solhint-disable quotes\\r\\ncontract ScriptChecker is ISvgValidator {\\r\\n    function isValid(string memory check) external pure override returns (bool) {\\r\\n        return _strContains(\\\"<script\\\", _lowerAndFilterControlChars(check));\\r\\n    }\\r\\n\\r\\n    function _strContains(string memory what, string memory where) internal pure returns (bool) {\\r\\n        bytes memory whatBytes = bytes(what);\\r\\n        bytes memory whereBytes = bytes(where);\\r\\n\\r\\n        bool found = false;\\r\\n        for (uint256 i = 0; i < whereBytes.length - whatBytes.length; i++) {\\r\\n            bool flag = true;\\r\\n            for (uint256 j = 0; j < whatBytes.length; j++)\\r\\n                if (whereBytes[i + j] != whatBytes[j]) {\\r\\n                    flag = false;\\r\\n                    break;\\r\\n                }\\r\\n            if (flag) {\\r\\n                found = true;\\r\\n                break;\\r\\n            }\\r\\n        }\\r\\n\\r\\n        return found;\\r\\n    }\\r\\n\\r\\n    function _lowerAndFilterControlChars(string memory _base) private pure returns (string memory) {\\r\\n        bytes memory _baseBytes = bytes(_base);\\r\\n        uint256 skip = 0;\\r\\n        for (uint256 i = 0; i < _baseBytes.length; i++) {\\r\\n            if (_baseBytes[i] > 0x20) {\\r\\n                _baseBytes[i - skip] = _lower(_baseBytes[i]);\\r\\n            } else {\\r\\n                skip = skip + 1;\\r\\n            }\\r\\n        }\\r\\n        return string(_baseBytes);\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * Lower\\r\\n     *\\r\\n     * Convert an alphabetic character to lower case and return the original\\r\\n     * value when not alphabetic\\r\\n     *\\r\\n     * @param _b1 The byte to be converted to lower case\\r\\n     * @return bytes1 The converted value if the passed value was alphabetic\\r\\n     *                and in a upper case otherwise returns the original value\\r\\n     */\\r\\n    function _lower(bytes1 _b1) private pure returns (bytes1) {\\r\\n        if (_b1 >= 0x41 && _b1 <= 0x5A) {\\r\\n            return bytes1(uint8(_b1) + 32);\\r\\n        }\\r\\n\\r\\n        return _b1;\\r\\n    }\\r\\n}\\r\\n\"\r\n    },\r\n    \"contracts/interfaces/ISvgValidator.sol\": {\r\n      \"content\": \"//SPDX-License-Identifier: MIT\\r\\n\\r\\npragma solidity ^0.8.0;\\r\\n\\r\\ninterface ISvgValidator {\\r\\n    function isValid(string memory check) external view returns (bool);\\r\\n}\\r\\n\"\r\n    }\r\n  },\r\n  \"settings\": {\r\n    \"optimizer\": {\r\n      \"enabled\": true,\r\n      \"runs\": 20\r\n    },\r\n    \"outputSelection\": {\r\n      \"*\": {\r\n        \"*\": [\r\n          \"evm.bytecode\",\r\n          \"evm.deployedBytecode\",\r\n          \"abi\"\r\n        ]\r\n      }\r\n    },\r\n    \"libraries\": {}\r\n  }\r\n}}","ABI":"[{\"inputs\":[{\"internalType\":\"string\",\"name\":\"check\",\"type\":\"string\"}],\"name\":\"isValid\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"pure\",\"type\":\"function\"}]","ContractName":"ScriptChecker","CompilerVersion":"v0.8.4+commit.c7e474f2","OptimizationUsed":"1","Runs":"20","ConstructorArguments":"","EVMVersion":"Default","Library":"","LicenseType":"","Proxy":"0","Implementation":"","SwarmSource":""}]}