{"status":"1","message":"OK","result":[{"SourceCode":"// SPDX-License-Identifier: MIT\r\npragma solidity ^0.8.2;\r\n\r\n/*\r\n\r\n   /$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$\r\n  | $DOCDOCDOCDOCDOOWWNNNXXXNNWCDOCDOCDOCDO$\r\n  | $OCDOCDOCOOWXOdc:,'......',:ld0NDOCDOCO$     /$$$$$$             /$$$$$$  /$$                 /$$          \r\n  | $CDOCDOCDKo;.                 .;0OCDOCD$    /$$__  $$           /$$__  $$| $$                |__/   \r\n  | $DOCDOOO0;                    .:0CDOCDO$   | $$  \\ $$ /$$$$$$$ | $$  \\__/| $$$$$$$   /$$$$$$  /$$ /$$$$$$$ \r\n  | $OCDOCONc    ';,'..........';o0NDOCDOCO$   | $$  | $$| $$__  $$| $$      | $$__  $$ |____  $$| $$| $$__  $$\r\n  | $CDOCDO0,   .cxxdddddddddddxx0NOCDOCDOC$   | $$  | $$| $$  \\ $$| $$      | $$  \\ $$  /$$$$$$$| $$| $$  \\ $$\r\n  | $DOCDOO0'   ,ddc::cdxxxo:;:oxOXCDOCDOCD$   | $$  | $$| $$  | $$| $$    $$| $$  | $$ /$$__  $$| $$| $$  | $$\r\n  | $OCDOCONl..,oxxxddxxxxxxdddxxkXDOCDOCDO$   |  $$$$$$/| $$  | $$|  $$$$$$/| $$  | $$|  $$$$$$$| $$| $$  | $$\r\n  | $CDOCDOON0kxxxxxxxxxdddxxxxxxONOCDOCDOC$    \\______/ |__/  |__/ \\______/ |__/  |__/ \\_______/|__/|__/  |__/\r\n  | $DOCDOCDOON0xxxxxxxxxxxxxxxxkKWCDOCDOCD$\r\n  | $OCDOCDOCOON0xxxxxdxxxxxxxxkKWDOCDOCDOC$              /$$$$$$$                                /$$       /$$\r\n  | $CDOCDOCDOCDKddxxxxxxxxxxdd0WOCDOCDOCDO$             | $$__  $$                              | $$      | $$\r\n  | $DOCDOCDOON0c'oK0kxxdxkO0o'cKWCDOCDOCDO$             | $$  \\ $$  /$$$$$$  /$$$$$$$   /$$$$$$ | $$  /$$$$$$$\r\n  | $OCDOCNKxl;...,0W0occo0WK:..'ckNWDOCDOC$             | $$  | $$ /$$__  $$| $$__  $$ |____  $$| $$ /$$__  $$\r\n  | $OWKkl,.   ....cKKdccdKNd.... .'o0WOCDO$             | $$  | $$| $$  \\ $$| $$  \\ $$  /$$$$$$$| $$| $$  | $$\r\n  | $l,.       .....o0d::o0k,...     .;xXWO$             | $$  | $$| $$  | $$| $$  | $$ /$$__  $$| $$| $$  | $$\r\n  | $          .....,lc::cdc.....       .cO$             | $$$$$$$/|  $$$$$$/| $$  | $$|  $$$$$$$| $$|  $$$$$$$\r\n  | $           .....';:::;......         .$             |_______/  \\______/ |__/  |__/ \\_______/|__/ \\_______/\r\n  | $$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$\r\n  |________________________________________/\r\n\r\n  OnChainDonald (OCD) is a collection of 2024 unique Donalds:\r\n  - Built with long term preservation and decentralization in mind\r\n  - All metadata and images are generated and stored 100% on-chain\r\n  - Each Donald is unique and is composed from 9 traits with 73 values\r\n  - In addition, there is an optional special trait with 17 values (opt-in on mint)\r\n  - Extensive API surface to build on\r\n\r\n*/\r\n\r\n// File: base64-sol/base64.sol\r\n\r\n/// @title Base64\r\n/// @author Brecht Devos - <brecht@loopring.org>\r\n/// @notice Provides functions for encoding/decoding base64\r\nlibrary Base64 {\r\n    string internal constant TABLE_ENCODE = 'ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/';\r\n    bytes  internal constant TABLE_DECODE = hex\"0000000000000000000000000000000000000000000000000000000000000000\"\r\n                                            hex\"00000000000000000000003e0000003f3435363738393a3b3c3d000000000000\"\r\n                                            hex\"00000102030405060708090a0b0c0d0e0f101112131415161718190000000000\"\r\n                                            hex\"001a1b1c1d1e1f202122232425262728292a2b2c2d2e2f303132330000000000\";\r\n\r\n    function encode(bytes memory data) internal pure returns (string memory) {\r\n        if (data.length == 0) return '';\r\n\r\n        // load the table into memory\r\n        string memory table = TABLE_ENCODE;\r\n\r\n        // multiply by 4/3 rounded up\r\n        uint256 encodedLen = 4 * ((data.length + 2) / 3);\r\n\r\n        // add some extra buffer at the end required for the writing\r\n        string memory result = new string(encodedLen + 32);\r\n\r\n        assembly {\r\n            // set the actual output length\r\n            mstore(result, encodedLen)\r\n\r\n            // prepare the lookup table\r\n            let tablePtr := add(table, 1)\r\n\r\n            // input ptr\r\n            let dataPtr := data\r\n            let endPtr := add(dataPtr, mload(data))\r\n\r\n            // result ptr, jump over length\r\n            let resultPtr := add(result, 32)\r\n\r\n            // run over the input, 3 bytes at a time\r\n            for {} lt(dataPtr, endPtr) {}\r\n            {\r\n                // read 3 bytes\r\n                dataPtr := add(dataPtr, 3)\r\n                let input := mload(dataPtr)\r\n\r\n                // write 4 characters\r\n                mstore8(resultPtr, mload(add(tablePtr, and(shr(18, input), 0x3F))))\r\n                resultPtr := add(resultPtr, 1)\r\n                mstore8(resultPtr, mload(add(tablePtr, and(shr(12, input), 0x3F))))\r\n                resultPtr := add(resultPtr, 1)\r\n                mstore8(resultPtr, mload(add(tablePtr, and(shr( 6, input), 0x3F))))\r\n                resultPtr := add(resultPtr, 1)\r\n                mstore8(resultPtr, mload(add(tablePtr, and(        input,  0x3F))))\r\n                resultPtr := add(resultPtr, 1)\r\n            }\r\n\r\n            // padding with '='\r\n            switch mod(mload(data), 3)\r\n            case 1 { mstore(sub(resultPtr, 2), shl(240, 0x3d3d)) }\r\n            case 2 { mstore(sub(resultPtr, 1), shl(248, 0x3d)) }\r\n        }\r\n\r\n        return result;\r\n    }\r\n\r\n    function decode(string memory _data) internal pure returns (bytes memory) {\r\n        bytes memory data = bytes(_data);\r\n\r\n        if (data.length == 0) return new bytes(0);\r\n        require(data.length % 4 == 0, \"invalid base64 decoder input\");\r\n\r\n        // load the table into memory\r\n        bytes memory table = TABLE_DECODE;\r\n\r\n        // every 4 characters represent 3 bytes\r\n        uint256 decodedLen = (data.length / 4) * 3;\r\n\r\n        // add some extra buffer at the end required for the writing\r\n        bytes memory result = new bytes(decodedLen + 32);\r\n\r\n        assembly {\r\n            // padding with '='\r\n            let lastBytes := mload(add(data, mload(data)))\r\n            if eq(and(lastBytes, 0xFF), 0x3d) {\r\n                decodedLen := sub(decodedLen, 1)\r\n                if eq(and(lastBytes, 0xFFFF), 0x3d3d) {\r\n                    decodedLen := sub(decodedLen, 1)\r\n                }\r\n            }\r\n\r\n            // set the actual output length\r\n            mstore(result, decodedLen)\r\n\r\n            // prepare the lookup table\r\n            let tablePtr := add(table, 1)\r\n\r\n            // input ptr\r\n            let dataPtr := data\r\n            let endPtr := add(dataPtr, mload(data))\r\n\r\n            // result ptr, jump over length\r\n            let resultPtr := add(result, 32)\r\n\r\n            // run over the input, 4 characters at a time\r\n            for {} lt(dataPtr, endPtr) {}\r\n            {\r\n               // read 4 characters\r\n               dataPtr := add(dataPtr, 4)\r\n               let input := mload(dataPtr)\r\n\r\n               // write 3 bytes\r\n               let output := add(\r\n                   add(\r\n                       shl(18, and(mload(add(tablePtr, and(shr(24, input), 0xFF))), 0xFF)),\r\n                       shl(12, and(mload(add(tablePtr, and(shr(16, input), 0xFF))), 0xFF))),\r\n                   add(\r\n                       shl( 6, and(mload(add(tablePtr, and(shr( 8, input), 0xFF))), 0xFF)),\r\n                               and(mload(add(tablePtr, and(        input , 0xFF))), 0xFF)\r\n                    )\r\n                )\r\n                mstore(resultPtr, shl(232, output))\r\n                resultPtr := add(resultPtr, 3)\r\n            }\r\n        }\r\n\r\n        return result;\r\n    }\r\n}\r\n\r\n// File: @openzeppelin/contracts/security/ReentrancyGuard.sol\r\n\r\n// OpenZeppelin Contracts v4.4.0 (security/ReentrancyGuard.sol)\r\n\r\n/**\r\n * @dev Contract module that helps prevent reentrant calls to a function.\r\n *\r\n * Inheriting from `ReentrancyGuard` will make the {nonReentrant} modifier\r\n * available, which can be applied to functions to make sure there are no nested\r\n * (reentrant) calls to them.\r\n *\r\n * Note that because there is a single `nonReentrant` guard, functions marked as\r\n * `nonReentrant` may not call one another. This can be worked around by making\r\n * those functions `private`, and then adding `external` `nonReentrant` entry\r\n * points to them.\r\n *\r\n * TIP: If you would like to learn more about reentrancy and alternative ways\r\n * to protect against it, check out our blog post\r\n * https://blog.openzeppelin.com/reentrancy-after-istanbul/[Reentrancy After Istanbul].\r\n */\r\nabstract contract ReentrancyGuard {\r\n    // Booleans are more expensive than uint256 or any type that takes up a full\r\n    // word because each write operation emits an extra SLOAD to first read the\r\n    // slot's contents, replace the bits taken up by the boolean, and then write\r\n    // back. This is the compiler's defense against contract upgrades and\r\n    // pointer aliasing, and it cannot be disabled.\r\n\r\n    // The values being non-zero value makes deployment a bit more expensive,\r\n    // but in exchange the refund on every call to nonReentrant will be lower in\r\n    // amount. Since refunds are capped to a percentage of the total\r\n    // transaction's gas, it is best to keep them low in cases like this one, to\r\n    // increase the likelihood of the full refund coming into effect.\r\n    uint256 private constant _NOT_ENTERED = 1;\r\n    uint256 private constant _ENTERED = 2;\r\n\r\n    uint256 private _status;\r\n\r\n    constructor() {\r\n        _status = _NOT_ENTERED;\r\n    }\r\n\r\n    /**\r\n     * @dev Prevents a contract from calling itself, directly or indirectly.\r\n     * Calling a `nonReentrant` function from another `nonReentrant`\r\n     * function is not supported. It is possible to prevent this from happening\r\n     * by making the `nonReentrant` function external, and making it call a\r\n     * `private` function that does the actual work.\r\n     */\r\n    modifier nonReentrant() {\r\n        // On the first call to nonReentrant, _notEntered will be true\r\n        require(_status != _ENTERED, \"ReentrancyGuard: reentrant call\");\r\n\r\n        // Any calls to nonReentrant after this point will fail\r\n        _status = _ENTERED;\r\n\r\n        _;\r\n\r\n        // By storing the original value once again, a refund is triggered (see\r\n        // https://eips.ethereum.org/EIPS/eip-2200)\r\n        _status = _NOT_ENTERED;\r\n    }\r\n}\r\n\r\n// File: @openzeppelin/contracts/utils/Counters.sol\r\n\r\n/**\r\n * @title Counters\r\n * @author Matt Condon (@shrugs)\r\n * @dev Provides counters that can only be incremented, decremented or reset. This can be used e.g. to track the number\r\n * of elements in a mapping, issuing ERC721 ids, or counting request ids.\r\n *\r\n * Include with `using Counters for Counters.Counter;`\r\n */\r\nlibrary Counters {\r\n    struct Counter {\r\n        // This variable should never be directly accessed by users of the library: interactions must be restricted to\r\n        // the library's function. As of Solidity v0.5.2, this cannot be enforced, though there is a proposal to add\r\n        // this feature: see https://github.com/ethereum/solidity/issues/4637\r\n        uint256 _value; // default: 0\r\n    }\r\n\r\n    function current(Counter storage counter) internal view returns (uint256) {\r\n        return counter._value;\r\n    }\r\n\r\n    function increment(Counter storage counter) internal {\r\n        unchecked {\r\n            counter._value += 1;\r\n        }\r\n    }\r\n\r\n    function decrement(Counter storage counter) internal {\r\n        uint256 value = counter._value;\r\n        require(value > 0, \"Counter: decrement overflow\");\r\n        unchecked {\r\n            counter._value = value - 1;\r\n        }\r\n    }\r\n\r\n    function reset(Counter storage counter) internal {\r\n        counter._value = 0;\r\n    }\r\n}\r\n\r\n// File: @openzeppelin/contracts/utils/math/SafeMath.sol\r\n\r\n// CAUTION\r\n// This version of SafeMath should only be used with Solidity 0.8 or later,\r\n// because it relies on the compiler's built in overflow checks.\r\n\r\n/**\r\n * @dev Wrappers over Solidity's arithmetic operations.\r\n *\r\n * NOTE: `SafeMath` is no longer needed starting with Solidity 0.8. The compiler\r\n * now has built in overflow checking.\r\n */\r\nlibrary SafeMath {\r\n    /**\r\n     * @dev Returns the addition of two unsigned integers, with an overflow flag.\r\n     *\r\n     * _Available since v3.4._\r\n     */\r\n    function tryAdd(uint256 a, uint256 b) internal pure returns (bool, uint256) {\r\n        unchecked {\r\n            uint256 c = a + b;\r\n            if (c < a) return (false, 0);\r\n            return (true, c);\r\n        }\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the substraction of two unsigned integers, with an overflow flag.\r\n     *\r\n     * _Available since v3.4._\r\n     */\r\n    function trySub(uint256 a, uint256 b) internal pure returns (bool, uint256) {\r\n        unchecked {\r\n            if (b > a) return (false, 0);\r\n            return (true, a - b);\r\n        }\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the multiplication of two unsigned integers, with an overflow flag.\r\n     *\r\n     * _Available since v3.4._\r\n     */\r\n    function tryMul(uint256 a, uint256 b) internal pure returns (bool, uint256) {\r\n        unchecked {\r\n            // Gas optimization: this is cheaper than requiring 'a' not being zero, but the\r\n            // benefit is lost if 'b' is also tested.\r\n            // See: https://github.com/OpenZeppelin/openzeppelin-contracts/pull/522\r\n            if (a == 0) return (true, 0);\r\n            uint256 c = a * b;\r\n            if (c / a != b) return (false, 0);\r\n            return (true, c);\r\n        }\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the division of two unsigned integers, with a division by zero flag.\r\n     *\r\n     * _Available since v3.4._\r\n     */\r\n    function tryDiv(uint256 a, uint256 b) internal pure returns (bool, uint256) {\r\n        unchecked {\r\n            if (b == 0) return (false, 0);\r\n            return (true, a / b);\r\n        }\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the remainder of dividing two unsigned integers, with a division by zero flag.\r\n     *\r\n     * _Available since v3.4._\r\n     */\r\n    function tryMod(uint256 a, uint256 b) internal pure returns (bool, uint256) {\r\n        unchecked {\r\n            if (b == 0) return (false, 0);\r\n            return (true, a % b);\r\n        }\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the addition of two unsigned integers, reverting on\r\n     * overflow.\r\n     *\r\n     * Counterpart to Solidity's `+` operator.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - Addition cannot overflow.\r\n     */\r\n    function add(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        return a + b;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the subtraction of two unsigned integers, reverting on\r\n     * overflow (when the result is negative).\r\n     *\r\n     * Counterpart to Solidity's `-` operator.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - Subtraction cannot overflow.\r\n     */\r\n    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        return a - b;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the multiplication of two unsigned integers, reverting on\r\n     * overflow.\r\n     *\r\n     * Counterpart to Solidity's `*` operator.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - Multiplication cannot overflow.\r\n     */\r\n    function mul(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        return a * b;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the integer division of two unsigned integers, reverting on\r\n     * division by zero. The result is rounded towards zero.\r\n     *\r\n     * Counterpart to Solidity's `/` operator.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - The divisor cannot be zero.\r\n     */\r\n    function div(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        return a / b;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\r\n     * reverting when dividing by zero.\r\n     *\r\n     * Counterpart to Solidity's `%` operator. This function uses a `revert`\r\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\r\n     * invalid opcode to revert (consuming all remaining gas).\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - The divisor cannot be zero.\r\n     */\r\n    function mod(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        return a % b;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the subtraction of two unsigned integers, reverting with custom message on\r\n     * overflow (when the result is negative).\r\n     *\r\n     * CAUTION: This function is deprecated because it requires allocating memory for the error\r\n     * message unnecessarily. For custom revert reasons use {trySub}.\r\n     *\r\n     * Counterpart to Solidity's `-` operator.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - Subtraction cannot overflow.\r\n     */\r\n    function sub(\r\n        uint256 a,\r\n        uint256 b,\r\n        string memory errorMessage\r\n    ) internal pure returns (uint256) {\r\n        unchecked {\r\n            require(b <= a, errorMessage);\r\n            return a - b;\r\n        }\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the integer division of two unsigned integers, reverting with custom message on\r\n     * division by zero. The result is rounded towards zero.\r\n     *\r\n     * Counterpart to Solidity's `/` operator. Note: this function uses a\r\n     * `revert` opcode (which leaves remaining gas untouched) while Solidity\r\n     * uses an invalid opcode to revert (consuming all remaining gas).\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - The divisor cannot be zero.\r\n     */\r\n    function div(\r\n        uint256 a,\r\n        uint256 b,\r\n        string memory errorMessage\r\n    ) internal pure returns (uint256) {\r\n        unchecked {\r\n            require(b > 0, errorMessage);\r\n            return a / b;\r\n        }\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\r\n     * reverting with custom message when dividing by zero.\r\n     *\r\n     * CAUTION: This function is deprecated because it requires allocating memory for the error\r\n     * message unnecessarily. For custom revert reasons use {tryMod}.\r\n     *\r\n     * Counterpart to Solidity's `%` operator. This function uses a `revert`\r\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\r\n     * invalid opcode to revert (consuming all remaining gas).\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - The divisor cannot be zero.\r\n     */\r\n    function mod(\r\n        uint256 a,\r\n        uint256 b,\r\n        string memory errorMessage\r\n    ) internal pure returns (uint256) {\r\n        unchecked {\r\n            require(b > 0, errorMessage);\r\n            return a % b;\r\n        }\r\n    }\r\n}\r\n\r\n// File: @openzeppelin/contracts/utils/Strings.sol\r\n\r\n/**\r\n * @dev String operations.\r\n */\r\nlibrary Strings {\r\n    bytes16 private constant _HEX_SYMBOLS = \"0123456789abcdef\";\r\n\r\n    /**\r\n     * @dev Converts a `uint256` to its ASCII `string` decimal representation.\r\n     */\r\n    function toString(uint256 value) internal pure returns (string memory) {\r\n        // Inspired by OraclizeAPI's implementation - MIT licence\r\n        // https://github.com/oraclize/ethereum-api/blob/b42146b063c7d6ee1358846c198246239e9360e8/oraclizeAPI_0.4.25.sol\r\n\r\n        if (value == 0) {\r\n            return \"0\";\r\n        }\r\n        uint256 temp = value;\r\n        uint256 digits;\r\n        while (temp != 0) {\r\n            digits++;\r\n            temp /= 10;\r\n        }\r\n        bytes memory buffer = new bytes(digits);\r\n        while (value != 0) {\r\n            digits -= 1;\r\n            buffer[digits] = bytes1(uint8(48 + uint256(value % 10)));\r\n            value /= 10;\r\n        }\r\n        return string(buffer);\r\n    }\r\n\r\n    /**\r\n     * @dev Converts a `uint256` to its ASCII `string` hexadecimal representation.\r\n     */\r\n    function toHexString(uint256 value) internal pure returns (string memory) {\r\n        if (value == 0) {\r\n            return \"0x00\";\r\n        }\r\n        uint256 temp = value;\r\n        uint256 length = 0;\r\n        while (temp != 0) {\r\n            length++;\r\n            temp >>= 8;\r\n        }\r\n        return toHexString(value, length);\r\n    }\r\n\r\n    /**\r\n     * @dev Converts a `uint256` to its ASCII `string` hexadecimal representation with fixed length.\r\n     */\r\n    function toHexString(uint256 value, uint256 length) internal pure returns (string memory) {\r\n        bytes memory buffer = new bytes(2 * length + 2);\r\n        buffer[0] = \"0\";\r\n        buffer[1] = \"x\";\r\n        for (uint256 i = 2 * length + 1; i > 1; --i) {\r\n            buffer[i] = _HEX_SYMBOLS[value & 0xf];\r\n            value >>= 4;\r\n        }\r\n        require(value == 0, \"Strings: hex length insufficient\");\r\n        return string(buffer);\r\n    }\r\n}\r\n\r\n// File: @openzeppelin/contracts/utils/Context.sol\r\n\r\n/**\r\n * @dev Provides information about the current execution context, including the\r\n * sender of the transaction and its data. While these are generally available\r\n * via msg.sender and msg.data, they should not be accessed in such a direct\r\n * manner, since when dealing with meta-transactions the account sending and\r\n * paying for execution may not be the actual sender (as far as an application\r\n * is concerned).\r\n *\r\n * This contract is only required for intermediate, library-like contracts.\r\n */\r\nabstract contract Context {\r\n    function _msgSender() internal view virtual returns (address) {\r\n        return msg.sender;\r\n    }\r\n\r\n    function _msgData() internal view virtual returns (bytes calldata) {\r\n        return msg.data;\r\n    }\r\n}\r\n\r\n// File: @openzeppelin/contracts/access/Ownable.sol\r\n\r\n/**\r\n * @dev Contract module which provides a basic access control mechanism, where\r\n * there is an account (an owner) that can be granted exclusive access to\r\n * specific functions.\r\n *\r\n * By default, the owner account will be the one that deploys the contract. This\r\n * can later be changed with {transferOwnership}.\r\n *\r\n * This module is used through inheritance. It will make available the modifier\r\n * `onlyOwner`, which can be applied to your functions to restrict their use to\r\n * the owner.\r\n */\r\nabstract contract Ownable is Context {\r\n    address private _owner;\r\n\r\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\r\n\r\n    /**\r\n     * @dev Initializes the contract setting the deployer as the initial owner.\r\n     */\r\n    constructor() {\r\n        _setOwner(_msgSender());\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the address of the current owner.\r\n     */\r\n    function owner() public view virtual returns (address) {\r\n        return _owner;\r\n    }\r\n\r\n    /**\r\n     * @dev Throws if called by any account other than the owner.\r\n     */\r\n    modifier onlyOwner() {\r\n        require(owner() == _msgSender(), \"Ownable: caller is not the owner\");\r\n        _;\r\n    }\r\n\r\n    /**\r\n     * @dev Leaves the contract without owner. It will not be possible to call\r\n     * `onlyOwner` functions anymore. Can only be called by the current owner.\r\n     *\r\n     * NOTE: Renouncing ownership will leave the contract without an owner,\r\n     * thereby removing any functionality that is only available to the owner.\r\n     */\r\n    function renounceOwnership() public virtual onlyOwner {\r\n        _setOwner(address(0));\r\n    }\r\n\r\n    /**\r\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\r\n     * Can only be called by the current owner.\r\n     */\r\n    function transferOwnership(address newOwner) public virtual onlyOwner {\r\n        require(newOwner != address(0), \"Ownable: new owner is the zero address\");\r\n        _setOwner(newOwner);\r\n    }\r\n\r\n    function _setOwner(address newOwner) private {\r\n        address oldOwner = _owner;\r\n        _owner = newOwner;\r\n        emit OwnershipTransferred(oldOwner, newOwner);\r\n    }\r\n}\r\n\r\n// File: @openzeppelin/contracts/utils/Address.sol\r\n\r\n/**\r\n * @dev Collection of functions related to the address type\r\n */\r\nlibrary Address {\r\n    /**\r\n     * @dev Returns true if `account` is a contract.\r\n     *\r\n     * [IMPORTANT]\r\n     * ====\r\n     * It is unsafe to assume that an address for which this function returns\r\n     * false is an externally-owned account (EOA) and not a contract.\r\n     *\r\n     * Among others, `isContract` will return false for the following\r\n     * types of addresses:\r\n     *\r\n     *  - an externally-owned account\r\n     *  - a contract in construction\r\n     *  - an address where a contract will be created\r\n     *  - an address where a contract lived, but was destroyed\r\n     * ====\r\n     */\r\n    function isContract(address account) internal view returns (bool) {\r\n        // This method relies on extcodesize, which returns 0 for contracts in\r\n        // construction, since the code is only stored at the end of the\r\n        // constructor execution.\r\n\r\n        uint256 size;\r\n        assembly {\r\n            size := extcodesize(account)\r\n        }\r\n        return size > 0;\r\n    }\r\n\r\n    /**\r\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\r\n     * `recipient`, forwarding all available gas and reverting on errors.\r\n     *\r\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\r\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\r\n     * imposed by `transfer`, making them unable to receive funds via\r\n     * `transfer`. {sendValue} removes this limitation.\r\n     *\r\n     * https://diligence.consensys.net/posts/2019/09/stop-using-soliditys-transfer-now/[Learn more].\r\n     *\r\n     * IMPORTANT: because control is transferred to `recipient`, care must be\r\n     * taken to not create reentrancy vulnerabilities. Consider using\r\n     * {ReentrancyGuard} or the\r\n     * https://solidity.readthedocs.io/en/v0.5.11/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\r\n     */\r\n    function sendValue(address payable recipient, uint256 amount) internal {\r\n        require(address(this).balance >= amount, \"Address: insufficient balance\");\r\n\r\n        (bool success, ) = recipient.call{value: amount}(\"\");\r\n        require(success, \"Address: unable to send value, recipient may have reverted\");\r\n    }\r\n\r\n    /**\r\n     * @dev Performs a Solidity function call using a low level `call`. A\r\n     * plain `call` is an unsafe replacement for a function call: use this\r\n     * function instead.\r\n     *\r\n     * If `target` reverts with a revert reason, it is bubbled up by this\r\n     * function (like regular Solidity function calls).\r\n     *\r\n     * Returns the raw returned data. To convert to the expected return value,\r\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - `target` must be a contract.\r\n     * - calling `target` with `data` must not revert.\r\n     *\r\n     * _Available since v3.1._\r\n     */\r\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\r\n        return functionCall(target, data, \"Address: low-level call failed\");\r\n    }\r\n\r\n    /**\r\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\r\n     * `errorMessage` as a fallback revert reason when `target` reverts.\r\n     *\r\n     * _Available since v3.1._\r\n     */\r\n    function functionCall(\r\n        address target,\r\n        bytes memory data,\r\n        string memory errorMessage\r\n    ) internal returns (bytes memory) {\r\n        return functionCallWithValue(target, data, 0, errorMessage);\r\n    }\r\n\r\n    /**\r\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\r\n     * but also transferring `value` wei to `target`.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - the calling contract must have an ETH balance of at least `value`.\r\n     * - the called Solidity function must be `payable`.\r\n     *\r\n     * _Available since v3.1._\r\n     */\r\n    function functionCallWithValue(\r\n        address target,\r\n        bytes memory data,\r\n        uint256 value\r\n    ) internal returns (bytes memory) {\r\n        return functionCallWithValue(target, data, value, \"Address: low-level call with value failed\");\r\n    }\r\n\r\n    /**\r\n     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\r\n     * with `errorMessage` as a fallback revert reason when `target` reverts.\r\n     *\r\n     * _Available since v3.1._\r\n     */\r\n    function functionCallWithValue(\r\n        address target,\r\n        bytes memory data,\r\n        uint256 value,\r\n        string memory errorMessage\r\n    ) internal returns (bytes memory) {\r\n        require(address(this).balance >= value, \"Address: insufficient balance for call\");\r\n        require(isContract(target), \"Address: call to non-contract\");\r\n\r\n        (bool success, bytes memory returndata) = target.call{value: value}(data);\r\n        return verifyCallResult(success, returndata, errorMessage);\r\n    }\r\n\r\n    /**\r\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\r\n     * but performing a static call.\r\n     *\r\n     * _Available since v3.3._\r\n     */\r\n    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\r\n        return functionStaticCall(target, data, \"Address: low-level static call failed\");\r\n    }\r\n\r\n    /**\r\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\r\n     * but performing a static call.\r\n     *\r\n     * _Available since v3.3._\r\n     */\r\n    function functionStaticCall(\r\n        address target,\r\n        bytes memory data,\r\n        string memory errorMessage\r\n    ) internal view returns (bytes memory) {\r\n        require(isContract(target), \"Address: static call to non-contract\");\r\n\r\n        (bool success, bytes memory returndata) = target.staticcall(data);\r\n        return verifyCallResult(success, returndata, errorMessage);\r\n    }\r\n\r\n    /**\r\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\r\n     * but performing a delegate call.\r\n     *\r\n     * _Available since v3.4._\r\n     */\r\n    function functionDelegateCall(address target, bytes memory data) internal returns (bytes memory) {\r\n        return functionDelegateCall(target, data, \"Address: low-level delegate call failed\");\r\n    }\r\n\r\n    /**\r\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\r\n     * but performing a delegate call.\r\n     *\r\n     * _Available since v3.4._\r\n     */\r\n    function functionDelegateCall(\r\n        address target,\r\n        bytes memory data,\r\n        string memory errorMessage\r\n    ) internal returns (bytes memory) {\r\n        require(isContract(target), \"Address: delegate call to non-contract\");\r\n\r\n        (bool success, bytes memory returndata) = target.delegatecall(data);\r\n        return verifyCallResult(success, returndata, errorMessage);\r\n    }\r\n\r\n    /**\r\n     * @dev Tool to verifies that a low level call was successful, and revert if it wasn't, either by bubbling the\r\n     * revert reason using the provided one.\r\n     *\r\n     * _Available since v4.3._\r\n     */\r\n    function verifyCallResult(\r\n        bool success,\r\n        bytes memory returndata,\r\n        string memory errorMessage\r\n    ) internal pure returns (bytes memory) {\r\n        if (success) {\r\n            return returndata;\r\n        } else {\r\n            // Look for revert reason and bubble it up if present\r\n            if (returndata.length > 0) {\r\n                // The easiest way to bubble the revert reason is using memory via assembly\r\n\r\n                assembly {\r\n                    let returndata_size := mload(returndata)\r\n                    revert(add(32, returndata), returndata_size)\r\n                }\r\n            } else {\r\n                revert(errorMessage);\r\n            }\r\n        }\r\n    }\r\n}\r\n\r\n// File: @openzeppelin/contracts/token/ERC721/IERC721Receiver.sol\r\n\r\n/**\r\n * @title ERC721 token receiver interface\r\n * @dev Interface for any contract that wants to support safeTransfers\r\n * from ERC721 asset contracts.\r\n */\r\ninterface IERC721Receiver {\r\n    /**\r\n     * @dev Whenever an {IERC721} `tokenId` token is transferred to this contract via {IERC721-safeTransferFrom}\r\n     * by `operator` from `from`, this function is called.\r\n     *\r\n     * It must return its Solidity selector to confirm the token transfer.\r\n     * If any other value is returned or the interface is not implemented by the recipient, the transfer will be reverted.\r\n     *\r\n     * The selector can be obtained in Solidity with `IERC721.onERC721Received.selector`.\r\n     */\r\n    function onERC721Received(\r\n        address operator,\r\n        address from,\r\n        uint256 tokenId,\r\n        bytes calldata data\r\n    ) external returns (bytes4);\r\n}\r\n\r\n// File: @openzeppelin/contracts/utils/introspection/IERC165.sol\r\n\r\n/**\r\n * @dev Interface of the ERC165 standard, as defined in the\r\n * https://eips.ethereum.org/EIPS/eip-165[EIP].\r\n *\r\n * Implementers can declare support of contract interfaces, which can then be\r\n * queried by others ({ERC165Checker}).\r\n *\r\n * For an implementation, see {ERC165}.\r\n */\r\ninterface IERC165 {\r\n    /**\r\n     * @dev Returns true if this contract implements the interface defined by\r\n     * `interfaceId`. See the corresponding\r\n     * https://eips.ethereum.org/EIPS/eip-165#how-interfaces-are-identified[EIP section]\r\n     * to learn more about how these ids are created.\r\n     *\r\n     * This function call must use less than 30 000 gas.\r\n     */\r\n    function supportsInterface(bytes4 interfaceId) external view returns (bool);\r\n}\r\n\r\n// File: @openzeppelin/contracts/utils/introspection/ERC165.sol\r\n\r\n/**\r\n * @dev Implementation of the {IERC165} interface.\r\n *\r\n * Contracts that want to implement ERC165 should inherit from this contract and override {supportsInterface} to check\r\n * for the additional interface id that will be supported. For example:\r\n *\r\n * ```solidity\r\n * function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {\r\n *     return interfaceId == type(MyInterface).interfaceId || super.supportsInterface(interfaceId);\r\n * }\r\n * ```\r\n *\r\n * Alternatively, {ERC165Storage} provides an easier to use but more expensive implementation.\r\n */\r\nabstract contract ERC165 is IERC165 {\r\n    /**\r\n     * @dev See {IERC165-supportsInterface}.\r\n     */\r\n    function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {\r\n        return interfaceId == type(IERC165).interfaceId;\r\n    }\r\n}\r\n\r\n// File: @openzeppelin/contracts/token/ERC721/IERC721.sol\r\n\r\n/**\r\n * @dev Required interface of an ERC721 compliant contract.\r\n */\r\ninterface IERC721 is IERC165 {\r\n    /**\r\n     * @dev Emitted when `tokenId` token is transferred from `from` to `to`.\r\n     */\r\n    event Transfer(address indexed from, address indexed to, uint256 indexed tokenId);\r\n\r\n    /**\r\n     * @dev Emitted when `owner` enables `approved` to manage the `tokenId` token.\r\n     */\r\n    event Approval(address indexed owner, address indexed approved, uint256 indexed tokenId);\r\n\r\n    /**\r\n     * @dev Emitted when `owner` enables or disables (`approved`) `operator` to manage all of its assets.\r\n     */\r\n    event ApprovalForAll(address indexed owner, address indexed operator, bool approved);\r\n\r\n    /**\r\n     * @dev Returns the number of tokens in ``owner``'s account.\r\n     */\r\n    function balanceOf(address owner) external view returns (uint256 balance);\r\n\r\n    /**\r\n     * @dev Returns the owner of the `tokenId` token.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - `tokenId` must exist.\r\n     */\r\n    function ownerOf(uint256 tokenId) external view returns (address owner);\r\n\r\n    /**\r\n     * @dev Safely transfers `tokenId` token from `from` to `to`, checking first that contract recipients\r\n     * are aware of the ERC721 protocol to prevent tokens from being forever locked.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - `from` cannot be the zero address.\r\n     * - `to` cannot be the zero address.\r\n     * - `tokenId` token must exist and be owned by `from`.\r\n     * - If the caller is not `from`, it must be have been allowed to move this token by either {approve} or {setApprovalForAll}.\r\n     * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer.\r\n     *\r\n     * Emits a {Transfer} event.\r\n     */\r\n    function safeTransferFrom(\r\n        address from,\r\n        address to,\r\n        uint256 tokenId\r\n    ) external;\r\n\r\n    /**\r\n     * @dev Transfers `tokenId` token from `from` to `to`.\r\n     *\r\n     * WARNING: Usage of this method is discouraged, use {safeTransferFrom} whenever possible.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - `from` cannot be the zero address.\r\n     * - `to` cannot be the zero address.\r\n     * - `tokenId` token must be owned by `from`.\r\n     * - If the caller is not `from`, it must be approved to move this token by either {approve} or {setApprovalForAll}.\r\n     *\r\n     * Emits a {Transfer} event.\r\n     */\r\n    function transferFrom(\r\n        address from,\r\n        address to,\r\n        uint256 tokenId\r\n    ) external;\r\n\r\n    /**\r\n     * @dev Gives permission to `to` to transfer `tokenId` token to another account.\r\n     * The approval is cleared when the token is transferred.\r\n     *\r\n     * Only a single account can be approved at a time, so approving the zero address clears previous approvals.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - The caller must own the token or be an approved operator.\r\n     * - `tokenId` must exist.\r\n     *\r\n     * Emits an {Approval} event.\r\n     */\r\n    function approve(address to, uint256 tokenId) external;\r\n\r\n    /**\r\n     * @dev Returns the account approved for `tokenId` token.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - `tokenId` must exist.\r\n     */\r\n    function getApproved(uint256 tokenId) external view returns (address operator);\r\n\r\n    /**\r\n     * @dev Approve or remove `operator` as an operator for the caller.\r\n     * Operators can call {transferFrom} or {safeTransferFrom} for any token owned by the caller.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - The `operator` cannot be the caller.\r\n     *\r\n     * Emits an {ApprovalForAll} event.\r\n     */\r\n    function setApprovalForAll(address operator, bool _approved) external;\r\n\r\n    /**\r\n     * @dev Returns if the `operator` is allowed to manage all of the assets of `owner`.\r\n     *\r\n     * See {setApprovalForAll}\r\n     */\r\n    function isApprovedForAll(address owner, address operator) external view returns (bool);\r\n\r\n    /**\r\n     * @dev Safely transfers `tokenId` token from `from` to `to`.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - `from` cannot be the zero address.\r\n     * - `to` cannot be the zero address.\r\n     * - `tokenId` token must exist and be owned by `from`.\r\n     * - If the caller is not `from`, it must be approved to move this token by either {approve} or {setApprovalForAll}.\r\n     * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer.\r\n     *\r\n     * Emits a {Transfer} event.\r\n     */\r\n    function safeTransferFrom(\r\n        address from,\r\n        address to,\r\n        uint256 tokenId,\r\n        bytes calldata data\r\n    ) external;\r\n}\r\n\r\n// File: @openzeppelin/contracts/token/ERC721/extensions/IERC721Enumerable.sol\r\n\r\n/**\r\n * @title ERC-721 Non-Fungible Token Standard, optional enumeration extension\r\n * @dev See https://eips.ethereum.org/EIPS/eip-721\r\n */\r\ninterface IERC721Enumerable is IERC721 {\r\n    /**\r\n     * @dev Returns the total amount of tokens stored by the contract.\r\n     */\r\n    function totalSupply() external view returns (uint256);\r\n\r\n    /**\r\n     * @dev Returns a token ID owned by `owner` at a given `index` of its token list.\r\n     * Use along with {balanceOf} to enumerate all of ``owner``'s tokens.\r\n     */\r\n    function tokenOfOwnerByIndex(address owner, uint256 index) external view returns (uint256 tokenId);\r\n\r\n    /**\r\n     * @dev Returns a token ID at a given `index` of all the tokens stored by the contract.\r\n     * Use along with {totalSupply} to enumerate all tokens.\r\n     */\r\n    function tokenByIndex(uint256 index) external view returns (uint256);\r\n}\r\n\r\n// File: @openzeppelin/contracts/token/ERC721/extensions/IERC721Metadata.sol\r\n\r\n/**\r\n * @title ERC-721 Non-Fungible Token Standard, optional metadata extension\r\n * @dev See https://eips.ethereum.org/EIPS/eip-721\r\n */\r\ninterface IERC721Metadata is IERC721 {\r\n    /**\r\n     * @dev Returns the token collection name.\r\n     */\r\n    function name() external view returns (string memory);\r\n\r\n    /**\r\n     * @dev Returns the token collection symbol.\r\n     */\r\n    function symbol() external view returns (string memory);\r\n\r\n    /**\r\n     * @dev Returns the Uniform Resource Identifier (URI) for `tokenId` token.\r\n     */\r\n    function tokenURI(uint256 tokenId) external view returns (string memory);\r\n}\r\n\r\n// File: @openzeppelin/contracts/token/ERC721/ERC721.sol\r\n\r\n/**\r\n * @dev Implementation of https://eips.ethereum.org/EIPS/eip-721[ERC721] Non-Fungible Token Standard, including\r\n * the Metadata extension, but not including the Enumerable extension, which is available separately as\r\n * {ERC721Enumerable}.\r\n */\r\ncontract ERC721 is Context, ERC165, IERC721, IERC721Metadata {\r\n    using Address for address;\r\n    using Strings for uint256;\r\n\r\n    // Token name\r\n    string private _name;\r\n\r\n    // Token symbol\r\n    string private _symbol;\r\n\r\n    // Mapping from token ID to owner address\r\n    mapping(uint256 => address) private _owners;\r\n\r\n    // Mapping owner address to token count\r\n    mapping(address => uint256) private _balances;\r\n\r\n    // Mapping from token ID to approved address\r\n    mapping(uint256 => address) private _tokenApprovals;\r\n\r\n    // Mapping from owner to operator approvals\r\n    mapping(address => mapping(address => bool)) private _operatorApprovals;\r\n\r\n    /**\r\n     * @dev Initializes the contract by setting a `name` and a `symbol` to the token collection.\r\n     */\r\n    constructor(string memory name_, string memory symbol_) {\r\n        _name = name_;\r\n        _symbol = symbol_;\r\n    }\r\n\r\n    /**\r\n     * @dev See {IERC165-supportsInterface}.\r\n     */\r\n    function supportsInterface(bytes4 interfaceId) public view virtual override(ERC165, IERC165) returns (bool) {\r\n        return\r\n            interfaceId == type(IERC721).interfaceId ||\r\n            interfaceId == type(IERC721Metadata).interfaceId ||\r\n            super.supportsInterface(interfaceId);\r\n    }\r\n\r\n    /**\r\n     * @dev See {IERC721-balanceOf}.\r\n     */\r\n    function balanceOf(address owner) public view virtual override returns (uint256) {\r\n        require(owner != address(0), \"ERC721: balance query for the zero address\");\r\n        return _balances[owner];\r\n    }\r\n\r\n    /**\r\n     * @dev See {IERC721-ownerOf}.\r\n     */\r\n    function ownerOf(uint256 tokenId) public view virtual override returns (address) {\r\n        address owner = _owners[tokenId];\r\n        require(owner != address(0), \"ERC721: owner query for nonexistent token\");\r\n        return owner;\r\n    }\r\n\r\n    /**\r\n     * @dev See {IERC721Metadata-name}.\r\n     */\r\n    function name() public view virtual override returns (string memory) {\r\n        return _name;\r\n    }\r\n\r\n    /**\r\n     * @dev See {IERC721Metadata-symbol}.\r\n     */\r\n    function symbol() public view virtual override returns (string memory) {\r\n        return _symbol;\r\n    }\r\n\r\n    /**\r\n     * @dev See {IERC721Metadata-tokenURI}.\r\n     */\r\n    function tokenURI(uint256 tokenId) public view virtual override returns (string memory) {\r\n        require(_exists(tokenId), \"ERC721Metadata: URI query for nonexistent token\");\r\n\r\n        string memory baseURI = _baseURI();\r\n        return bytes(baseURI).length > 0 ? string(abi.encodePacked(baseURI, tokenId.toString())) : \"\";\r\n    }\r\n\r\n    /**\r\n     * @dev Base URI for computing {tokenURI}. If set, the resulting URI for each\r\n     * token will be the concatenation of the `baseURI` and the `tokenId`. Empty\r\n     * by default, can be overriden in child contracts.\r\n     */\r\n    function _baseURI() internal view virtual returns (string memory) {\r\n        return \"\";\r\n    }\r\n\r\n    /**\r\n     * @dev See {IERC721-approve}.\r\n     */\r\n    function approve(address to, uint256 tokenId) public virtual override {\r\n        address owner = ERC721.ownerOf(tokenId);\r\n        require(to != owner, \"ERC721: approval to current owner\");\r\n\r\n        require(\r\n            _msgSender() == owner || isApprovedForAll(owner, _msgSender()),\r\n            \"ERC721: approve caller is not owner nor approved for all\"\r\n        );\r\n\r\n        _approve(to, tokenId);\r\n    }\r\n\r\n    /**\r\n     * @dev See {IERC721-getApproved}.\r\n     */\r\n    function getApproved(uint256 tokenId) public view virtual override returns (address) {\r\n        require(_exists(tokenId), \"ERC721: approved query for nonexistent token\");\r\n\r\n        return _tokenApprovals[tokenId];\r\n    }\r\n\r\n    /**\r\n     * @dev See {IERC721-setApprovalForAll}.\r\n     */\r\n    function setApprovalForAll(address operator, bool approved) public virtual override {\r\n        require(operator != _msgSender(), \"ERC721: approve to caller\");\r\n\r\n        _operatorApprovals[_msgSender()][operator] = approved;\r\n        emit ApprovalForAll(_msgSender(), operator, approved);\r\n    }\r\n\r\n    /**\r\n     * @dev See {IERC721-isApprovedForAll}.\r\n     */\r\n    function isApprovedForAll(address owner, address operator) public view virtual override returns (bool) {\r\n        return _operatorApprovals[owner][operator];\r\n    }\r\n\r\n    /**\r\n     * @dev See {IERC721-transferFrom}.\r\n     */\r\n    function transferFrom(\r\n        address from,\r\n        address to,\r\n        uint256 tokenId\r\n    ) public virtual override {\r\n        //solhint-disable-next-line max-line-length\r\n        require(_isApprovedOrOwner(_msgSender(), tokenId), \"ERC721: transfer caller is not owner nor approved\");\r\n\r\n        _transfer(from, to, tokenId);\r\n    }\r\n\r\n    /**\r\n     * @dev See {IERC721-safeTransferFrom}.\r\n     */\r\n    function safeTransferFrom(\r\n        address from,\r\n        address to,\r\n        uint256 tokenId\r\n    ) public virtual override {\r\n        safeTransferFrom(from, to, tokenId, \"\");\r\n    }\r\n\r\n    /**\r\n     * @dev See {IERC721-safeTransferFrom}.\r\n     */\r\n    function safeTransferFrom(\r\n        address from,\r\n        address to,\r\n        uint256 tokenId,\r\n        bytes memory _data\r\n    ) public virtual override {\r\n        require(_isApprovedOrOwner(_msgSender(), tokenId), \"ERC721: transfer caller is not owner nor approved\");\r\n        _safeTransfer(from, to, tokenId, _data);\r\n    }\r\n\r\n    /**\r\n     * @dev Safely transfers `tokenId` token from `from` to `to`, checking first that contract recipients\r\n     * are aware of the ERC721 protocol to prevent tokens from being forever locked.\r\n     *\r\n     * `_data` is additional data, it has no specified format and it is sent in call to `to`.\r\n     *\r\n     * This internal function is equivalent to {safeTransferFrom}, and can be used to e.g.\r\n     * implement alternative mechanisms to perform token transfer, such as signature-based.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - `from` cannot be the zero address.\r\n     * - `to` cannot be the zero address.\r\n     * - `tokenId` token must exist and be owned by `from`.\r\n     * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer.\r\n     *\r\n     * Emits a {Transfer} event.\r\n     */\r\n    function _safeTransfer(\r\n        address from,\r\n        address to,\r\n        uint256 tokenId,\r\n        bytes memory _data\r\n    ) internal virtual {\r\n        _transfer(from, to, tokenId);\r\n        require(_checkOnERC721Received(from, to, tokenId, _data), \"ERC721: transfer to non ERC721Receiver implementer\");\r\n    }\r\n\r\n    /**\r\n     * @dev Returns whether `tokenId` exists.\r\n     *\r\n     * Tokens can be managed by their owner or approved accounts via {approve} or {setApprovalForAll}.\r\n     *\r\n     * Tokens start existing when they are minted (`_mint`),\r\n     * and stop existing when they are burned (`_burn`).\r\n     */\r\n    function _exists(uint256 tokenId) internal view virtual returns (bool) {\r\n        return _owners[tokenId] != address(0);\r\n    }\r\n\r\n    /**\r\n     * @dev Returns whether `spender` is allowed to manage `tokenId`.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - `tokenId` must exist.\r\n     */\r\n    function _isApprovedOrOwner(address spender, uint256 tokenId) internal view virtual returns (bool) {\r\n        require(_exists(tokenId), \"ERC721: operator query for nonexistent token\");\r\n        address owner = ERC721.ownerOf(tokenId);\r\n        return (spender == owner || getApproved(tokenId) == spender || isApprovedForAll(owner, spender));\r\n    }\r\n\r\n    /**\r\n     * @dev Safely mints `tokenId` and transfers it to `to`.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - `tokenId` must not exist.\r\n     * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer.\r\n     *\r\n     * Emits a {Transfer} event.\r\n     */\r\n    function _safeMint(address to, uint256 tokenId) internal virtual {\r\n        _safeMint(to, tokenId, \"\");\r\n    }\r\n\r\n    /**\r\n     * @dev Same as {xref-ERC721-_safeMint-address-uint256-}[`_safeMint`], with an additional `data` parameter which is\r\n     * forwarded in {IERC721Receiver-onERC721Received} to contract recipients.\r\n     */\r\n    function _safeMint(\r\n        address to,\r\n        uint256 tokenId,\r\n        bytes memory _data\r\n    ) internal virtual {\r\n        _mint(to, tokenId);\r\n        require(\r\n            _checkOnERC721Received(address(0), to, tokenId, _data),\r\n            \"ERC721: transfer to non ERC721Receiver implementer\"\r\n        );\r\n    }\r\n\r\n    /**\r\n     * @dev Mints `tokenId` and transfers it to `to`.\r\n     *\r\n     * WARNING: Usage of this method is discouraged, use {_safeMint} whenever possible\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - `tokenId` must not exist.\r\n     * - `to` cannot be the zero address.\r\n     *\r\n     * Emits a {Transfer} event.\r\n     */\r\n    function _mint(address to, uint256 tokenId) internal virtual {\r\n        require(to != address(0), \"ERC721: mint to the zero address\");\r\n        require(!_exists(tokenId), \"ERC721: token already minted\");\r\n\r\n        _beforeTokenTransfer(address(0), to, tokenId);\r\n\r\n        _balances[to] += 1;\r\n        _owners[tokenId] = to;\r\n\r\n        emit Transfer(address(0), to, tokenId);\r\n    }\r\n\r\n    /**\r\n     * @dev Destroys `tokenId`.\r\n     * The approval is cleared when the token is burned.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - `tokenId` must exist.\r\n     *\r\n     * Emits a {Transfer} event.\r\n     */\r\n    function _burn(uint256 tokenId) internal virtual {\r\n        address owner = ERC721.ownerOf(tokenId);\r\n\r\n        _beforeTokenTransfer(owner, address(0), tokenId);\r\n\r\n        // Clear approvals\r\n        _approve(address(0), tokenId);\r\n\r\n        _balances[owner] -= 1;\r\n        delete _owners[tokenId];\r\n\r\n        emit Transfer(owner, address(0), tokenId);\r\n    }\r\n\r\n    /**\r\n     * @dev Transfers `tokenId` from `from` to `to`.\r\n     *  As opposed to {transferFrom}, this imposes no restrictions on msg.sender.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - `to` cannot be the zero address.\r\n     * - `tokenId` token must be owned by `from`.\r\n     *\r\n     * Emits a {Transfer} event.\r\n     */\r\n    function _transfer(\r\n        address from,\r\n        address to,\r\n        uint256 tokenId\r\n    ) internal virtual {\r\n        require(ERC721.ownerOf(tokenId) == from, \"ERC721: transfer of token that is not own\");\r\n        require(to != address(0), \"ERC721: transfer to the zero address\");\r\n\r\n        _beforeTokenTransfer(from, to, tokenId);\r\n\r\n        // Clear approvals from the previous owner\r\n        _approve(address(0), tokenId);\r\n\r\n        _balances[from] -= 1;\r\n        _balances[to] += 1;\r\n        _owners[tokenId] = to;\r\n\r\n        emit Transfer(from, to, tokenId);\r\n    }\r\n\r\n    /**\r\n     * @dev Approve `to` to operate on `tokenId`\r\n     *\r\n     * Emits a {Approval} event.\r\n     */\r\n    function _approve(address to, uint256 tokenId) internal virtual {\r\n        _tokenApprovals[tokenId] = to;\r\n        emit Approval(ERC721.ownerOf(tokenId), to, tokenId);\r\n    }\r\n\r\n    /**\r\n     * @dev Internal function to invoke {IERC721Receiver-onERC721Received} on a target address.\r\n     * The call is not executed if the target address is not a contract.\r\n     *\r\n     * @param from address representing the previous owner of the given token ID\r\n     * @param to target address that will receive the tokens\r\n     * @param tokenId uint256 ID of the token to be transferred\r\n     * @param _data bytes optional data to send along with the call\r\n     * @return bool whether the call correctly returned the expected magic value\r\n     */\r\n    function _checkOnERC721Received(\r\n        address from,\r\n        address to,\r\n        uint256 tokenId,\r\n        bytes memory _data\r\n    ) private returns (bool) {\r\n        if (to.isContract()) {\r\n            try IERC721Receiver(to).onERC721Received(_msgSender(), from, tokenId, _data) returns (bytes4 retval) {\r\n                return retval == IERC721Receiver.onERC721Received.selector;\r\n            } catch (bytes memory reason) {\r\n                if (reason.length == 0) {\r\n                    revert(\"ERC721: transfer to non ERC721Receiver implementer\");\r\n                } else {\r\n                    assembly {\r\n                        revert(add(32, reason), mload(reason))\r\n                    }\r\n                }\r\n            }\r\n        } else {\r\n            return true;\r\n        }\r\n    }\r\n\r\n    /**\r\n     * @dev Hook that is called before any token transfer. This includes minting\r\n     * and burning.\r\n     *\r\n     * Calling conditions:\r\n     *\r\n     * - When `from` and `to` are both non-zero, ``from``'s `tokenId` will be\r\n     * transferred to `to`.\r\n     * - When `from` is zero, `tokenId` will be minted for `to`.\r\n     * - When `to` is zero, ``from``'s `tokenId` will be burned.\r\n     * - `from` and `to` are never both zero.\r\n     *\r\n     * To learn more about hooks, head to xref:ROOT:extending-contracts.adoc#using-hooks[Using Hooks].\r\n     */\r\n    function _beforeTokenTransfer(\r\n        address from,\r\n        address to,\r\n        uint256 tokenId\r\n    ) internal virtual {}\r\n}\r\n\r\n// File: @openzeppelin/contracts/token/ERC721/extensions/ERC721Enumerable.sol\r\n\r\n/**\r\n * @dev This implements an optional extension of {ERC721} defined in the EIP that adds\r\n * enumerability of all the token ids in the contract as well as all token ids owned by each\r\n * account.\r\n */\r\nabstract contract ERC721Enumerable is ERC721, IERC721Enumerable {\r\n    // Mapping from owner to list of owned token IDs\r\n    mapping(address => mapping(uint256 => uint256)) private _ownedTokens;\r\n\r\n    // Mapping from token ID to index of the owner tokens list\r\n    mapping(uint256 => uint256) private _ownedTokensIndex;\r\n\r\n    // Array with all token ids, used for enumeration\r\n    uint256[] private _allTokens;\r\n\r\n    // Mapping from token id to position in the allTokens array\r\n    mapping(uint256 => uint256) private _allTokensIndex;\r\n\r\n    /**\r\n     * @dev See {IERC165-supportsInterface}.\r\n     */\r\n    function supportsInterface(bytes4 interfaceId) public view virtual override(IERC165, ERC721) returns (bool) {\r\n        return interfaceId == type(IERC721Enumerable).interfaceId || super.supportsInterface(interfaceId);\r\n    }\r\n\r\n    /**\r\n     * @dev See {IERC721Enumerable-tokenOfOwnerByIndex}.\r\n     */\r\n    function tokenOfOwnerByIndex(address owner, uint256 index) public view virtual override returns (uint256) {\r\n        require(index < ERC721.balanceOf(owner), \"ERC721Enumerable: owner index out of bounds\");\r\n        return _ownedTokens[owner][index];\r\n    }\r\n\r\n    /**\r\n     * @dev See {IERC721Enumerable-totalSupply}.\r\n     */\r\n    function totalSupply() public view virtual override returns (uint256) {\r\n        return _allTokens.length;\r\n    }\r\n\r\n    /**\r\n     * @dev See {IERC721Enumerable-tokenByIndex}.\r\n     */\r\n    function tokenByIndex(uint256 index) public view virtual override returns (uint256) {\r\n        require(index < ERC721Enumerable.totalSupply(), \"ERC721Enumerable: global index out of bounds\");\r\n        return _allTokens[index];\r\n    }\r\n\r\n    /**\r\n     * @dev Hook that is called before any token transfer. This includes minting\r\n     * and burning.\r\n     *\r\n     * Calling conditions:\r\n     *\r\n     * - When `from` and `to` are both non-zero, ``from``'s `tokenId` will be\r\n     * transferred to `to`.\r\n     * - When `from` is zero, `tokenId` will be minted for `to`.\r\n     * - When `to` is zero, ``from``'s `tokenId` will be burned.\r\n     * - `from` cannot be the zero address.\r\n     * - `to` cannot be the zero address.\r\n     *\r\n     * To learn more about hooks, head to xref:ROOT:extending-contracts.adoc#using-hooks[Using Hooks].\r\n     */\r\n    function _beforeTokenTransfer(\r\n        address from,\r\n        address to,\r\n        uint256 tokenId\r\n    ) internal virtual override {\r\n        super._beforeTokenTransfer(from, to, tokenId);\r\n\r\n        if (from == address(0)) {\r\n            _addTokenToAllTokensEnumeration(tokenId);\r\n        } else if (from != to) {\r\n            _removeTokenFromOwnerEnumeration(from, tokenId);\r\n        }\r\n        if (to == address(0)) {\r\n            _removeTokenFromAllTokensEnumeration(tokenId);\r\n        } else if (to != from) {\r\n            _addTokenToOwnerEnumeration(to, tokenId);\r\n        }\r\n    }\r\n\r\n    /**\r\n     * @dev Private function to add a token to this extension's ownership-tracking data structures.\r\n     * @param to address representing the new owner of the given token ID\r\n     * @param tokenId uint256 ID of the token to be added to the tokens list of the given address\r\n     */\r\n    function _addTokenToOwnerEnumeration(address to, uint256 tokenId) private {\r\n        uint256 length = ERC721.balanceOf(to);\r\n        _ownedTokens[to][length] = tokenId;\r\n        _ownedTokensIndex[tokenId] = length;\r\n    }\r\n\r\n    /**\r\n     * @dev Private function to add a token to this extension's token tracking data structures.\r\n     * @param tokenId uint256 ID of the token to be added to the tokens list\r\n     */\r\n    function _addTokenToAllTokensEnumeration(uint256 tokenId) private {\r\n        _allTokensIndex[tokenId] = _allTokens.length;\r\n        _allTokens.push(tokenId);\r\n    }\r\n\r\n    /**\r\n     * @dev Private function to remove a token from this extension's ownership-tracking data structures. Note that\r\n     * while the token is not assigned a new owner, the `_ownedTokensIndex` mapping is _not_ updated: this allows for\r\n     * gas optimizations e.g. when performing a transfer operation (avoiding double writes).\r\n     * This has O(1) time complexity, but alters the order of the _ownedTokens array.\r\n     * @param from address representing the previous owner of the given token ID\r\n     * @param tokenId uint256 ID of the token to be removed from the tokens list of the given address\r\n     */\r\n    function _removeTokenFromOwnerEnumeration(address from, uint256 tokenId) private {\r\n        // To prevent a gap in from's tokens array, we store the last token in the index of the token to delete, and\r\n        // then delete the last slot (swap and pop).\r\n\r\n        uint256 lastTokenIndex = ERC721.balanceOf(from) - 1;\r\n        uint256 tokenIndex = _ownedTokensIndex[tokenId];\r\n\r\n        // When the token to delete is the last token, the swap operation is unnecessary\r\n        if (tokenIndex != lastTokenIndex) {\r\n            uint256 lastTokenId = _ownedTokens[from][lastTokenIndex];\r\n\r\n            _ownedTokens[from][tokenIndex] = lastTokenId; // Move the last token to the slot of the to-delete token\r\n            _ownedTokensIndex[lastTokenId] = tokenIndex; // Update the moved token's index\r\n        }\r\n\r\n        // This also deletes the contents at the last position of the array\r\n        delete _ownedTokensIndex[tokenId];\r\n        delete _ownedTokens[from][lastTokenIndex];\r\n    }\r\n\r\n    /**\r\n     * @dev Private function to remove a token from this extension's token tracking data structures.\r\n     * This has O(1) time complexity, but alters the order of the _allTokens array.\r\n     * @param tokenId uint256 ID of the token to be removed from the tokens list\r\n     */\r\n    function _removeTokenFromAllTokensEnumeration(uint256 tokenId) private {\r\n        // To prevent a gap in the tokens array, we store the last token in the index of the token to delete, and\r\n        // then delete the last slot (swap and pop).\r\n\r\n        uint256 lastTokenIndex = _allTokens.length - 1;\r\n        uint256 tokenIndex = _allTokensIndex[tokenId];\r\n\r\n        // When the token to delete is the last token, the swap operation is unnecessary. However, since this occurs so\r\n        // rarely (when the last minted token is burnt) that we still do the swap here to avoid the gas cost of adding\r\n        // an 'if' statement (like in _removeTokenFromOwnerEnumeration)\r\n        uint256 lastTokenId = _allTokens[lastTokenIndex];\r\n\r\n        _allTokens[tokenIndex] = lastTokenId; // Move the last token to the slot of the to-delete token\r\n        _allTokensIndex[lastTokenId] = tokenIndex; // Update the moved token's index\r\n\r\n        // This also deletes the contents at the last position of the array\r\n        delete _allTokensIndex[tokenId];\r\n        _allTokens.pop();\r\n    }\r\n}\r\n\r\n// File: @openzeppelin/contracts/token/ERC20/IERC20.sol\r\n\r\n/**\r\n * @dev Interface of the ERC20 standard as defined in the EIP.\r\n */\r\ninterface IERC20 {\r\n    /**\r\n     * @dev Returns the amount of tokens in existence.\r\n     */\r\n    function totalSupply() external view returns (uint256);\r\n\r\n    /**\r\n     * @dev Returns the amount of tokens owned by `account`.\r\n     */\r\n    function balanceOf(address account) external view returns (uint256);\r\n\r\n    /**\r\n     * @dev Moves `amount` tokens from the caller's account to `recipient`.\r\n     *\r\n     * Returns a boolean value indicating whether the operation succeeded.\r\n     *\r\n     * Emits a {Transfer} event.\r\n     */\r\n    function transfer(address recipient, uint256 amount) external returns (bool);\r\n\r\n    /**\r\n     * @dev Returns the remaining number of tokens that `spender` will be\r\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\r\n     * zero by default.\r\n     *\r\n     * This value changes when {approve} or {transferFrom} are called.\r\n     */\r\n    function allowance(address owner, address spender) external view returns (uint256);\r\n\r\n    /**\r\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\r\n     *\r\n     * Returns a boolean value indicating whether the operation succeeded.\r\n     *\r\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\r\n     * that someone may use both the old and the new allowance by unfortunate\r\n     * transaction ordering. One possible solution to mitigate this race\r\n     * condition is to first reduce the spender's allowance to 0 and set the\r\n     * desired value afterwards:\r\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\r\n     *\r\n     * Emits an {Approval} event.\r\n     */\r\n    function approve(address spender, uint256 amount) external returns (bool);\r\n\r\n    /**\r\n     * @dev Moves `amount` tokens from `sender` to `recipient` using the\r\n     * allowance mechanism. `amount` is then deducted from the caller's\r\n     * allowance.\r\n     *\r\n     * Returns a boolean value indicating whether the operation succeeded.\r\n     *\r\n     * Emits a {Transfer} event.\r\n     */\r\n    function transferFrom(\r\n        address sender,\r\n        address recipient,\r\n        uint256 amount\r\n    ) external returns (bool);\r\n\r\n    /**\r\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\r\n     * another (`to`).\r\n     *\r\n     * Note that `value` may be zero.\r\n     */\r\n    event Transfer(address indexed from, address indexed to, uint256 value);\r\n\r\n    /**\r\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\r\n     * a call to {approve}. `value` is the new allowance.\r\n     */\r\n    event Approval(address indexed owner, address indexed spender, uint256 value);\r\n}\r\n\r\n// File: @openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol\r\n\r\n\r\n// OpenZeppelin Contracts v4.4.1 (token/ERC20/utils/SafeERC20.sol)\r\n\r\n/**\r\n * @title SafeERC20\r\n * @dev Wrappers around ERC20 operations that throw on failure (when the token\r\n * contract returns false). Tokens that return no value (and instead revert or\r\n * throw on failure) are also supported, non-reverting calls are assumed to be\r\n * successful.\r\n * To use this library you can add a `using SafeERC20 for IERC20;` statement to your contract,\r\n * which allows you to call the safe operations as `token.safeTransfer(...)`, etc.\r\n */\r\nlibrary SafeERC20 {\r\n    using Address for address;\r\n\r\n    function safeTransfer(\r\n        IERC20 token,\r\n        address to,\r\n        uint256 value\r\n    ) internal {\r\n        _callOptionalReturn(token, abi.encodeWithSelector(token.transfer.selector, to, value));\r\n    }\r\n\r\n    function safeTransferFrom(\r\n        IERC20 token,\r\n        address from,\r\n        address to,\r\n        uint256 value\r\n    ) internal {\r\n        _callOptionalReturn(token, abi.encodeWithSelector(token.transferFrom.selector, from, to, value));\r\n    }\r\n\r\n    /**\r\n     * @dev Deprecated. This function has issues similar to the ones found in\r\n     * {IERC20-approve}, and its usage is discouraged.\r\n     *\r\n     * Whenever possible, use {safeIncreaseAllowance} and\r\n     * {safeDecreaseAllowance} instead.\r\n     */\r\n    function safeApprove(\r\n        IERC20 token,\r\n        address spender,\r\n        uint256 value\r\n    ) internal {\r\n        // safeApprove should only be called when setting an initial allowance,\r\n        // or when resetting it to zero. To increase and decrease it, use\r\n        // 'safeIncreaseAllowance' and 'safeDecreaseAllowance'\r\n        require(\r\n            (value == 0) || (token.allowance(address(this), spender) == 0),\r\n            \"SafeERC20: approve from non-zero to non-zero allowance\"\r\n        );\r\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, value));\r\n    }\r\n\r\n    function safeIncreaseAllowance(\r\n        IERC20 token,\r\n        address spender,\r\n        uint256 value\r\n    ) internal {\r\n        uint256 newAllowance = token.allowance(address(this), spender) + value;\r\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));\r\n    }\r\n\r\n    function safeDecreaseAllowance(\r\n        IERC20 token,\r\n        address spender,\r\n        uint256 value\r\n    ) internal {\r\n        unchecked {\r\n            uint256 oldAllowance = token.allowance(address(this), spender);\r\n            require(oldAllowance >= value, \"SafeERC20: decreased allowance below zero\");\r\n            uint256 newAllowance = oldAllowance - value;\r\n            _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));\r\n        }\r\n    }\r\n\r\n    /**\r\n     * @dev Imitates a Solidity high-level call (i.e. a regular function call to a contract), relaxing the requirement\r\n     * on the return value: the return value is optional (but if data is returned, it must not be false).\r\n     * @param token The token targeted by the call.\r\n     * @param data The call data (encoded using abi.encode or one of its variants).\r\n     */\r\n    function _callOptionalReturn(IERC20 token, bytes memory data) private {\r\n        // We need to perform a low level call here, to bypass Solidity's return data size checking mechanism, since\r\n        // we're implementing it ourselves. We use {Address.functionCall} to perform this call, which verifies that\r\n        // the target address contains contract code and also asserts for success in the low-level call.\r\n\r\n        bytes memory returndata = address(token).functionCall(data, \"SafeERC20: low-level call failed\");\r\n        if (returndata.length > 0) {\r\n            // Return data is optional\r\n            require(abi.decode(returndata, (bool)), \"SafeERC20: ERC20 operation did not succeed\");\r\n        }\r\n    }\r\n}\r\n\r\n// File: @openzeppelin/contracts/finance/PaymentSplitter.sol\r\n\r\n\r\n// OpenZeppelin Contracts v4.4.1 (finance/PaymentSplitter.sol)\r\n\r\n/**\r\n * @title PaymentSplitter\r\n * @dev This contract allows to split Ether payments among a group of accounts. The sender does not need to be aware\r\n * that the Ether will be split in this way, since it is handled transparently by the contract.\r\n *\r\n * The split can be in equal parts or in any other arbitrary proportion. The way this is specified is by assigning each\r\n * account to a number of shares. Of all the Ether that this contract receives, each account will then be able to claim\r\n * an amount proportional to the percentage of total shares they were assigned.\r\n *\r\n * `PaymentSplitter` follows a _pull payment_ model. This means that payments are not automatically forwarded to the\r\n * accounts but kept in this contract, and the actual transfer is triggered as a separate step by calling the {release}\r\n * function.\r\n *\r\n * NOTE: This contract assumes that ERC20 tokens will behave similarly to native tokens (Ether). Rebasing tokens, and\r\n * tokens that apply fees during transfers, are likely to not be supported as expected. If in doubt, we encourage you\r\n * to run tests before sending real value to this contract.\r\n */\r\ncontract PaymentSplitter is Context {\r\n    event PayeeAdded(address account, uint256 shares);\r\n    event PaymentReleased(address to, uint256 amount);\r\n    event ERC20PaymentReleased(IERC20 indexed token, address to, uint256 amount);\r\n    event PaymentReceived(address from, uint256 amount);\r\n\r\n    uint256 private _totalShares;\r\n    uint256 private _totalReleased;\r\n\r\n    mapping(address => uint256) private _shares;\r\n    mapping(address => uint256) private _released;\r\n    address[] private _payees;\r\n\r\n    mapping(IERC20 => uint256) private _erc20TotalReleased;\r\n    mapping(IERC20 => mapping(address => uint256)) private _erc20Released;\r\n\r\n    /**\r\n     * @dev Creates an instance of `PaymentSplitter` where each account in `payees` is assigned the number of shares at\r\n     * the matching position in the `shares` array.\r\n     *\r\n     * All addresses in `payees` must be non-zero. Both arrays must have the same non-zero length, and there must be no\r\n     * duplicates in `payees`.\r\n     */\r\n    constructor(address[] memory payees, uint256[] memory shares_) payable {\r\n        require(payees.length == shares_.length, \"PaymentSplitter: payees and shares length mismatch\");\r\n        require(payees.length > 0, \"PaymentSplitter: no payees\");\r\n\r\n        for (uint256 i = 0; i < payees.length; i++) {\r\n            _addPayee(payees[i], shares_[i]);\r\n        }\r\n    }\r\n\r\n    /**\r\n     * @dev The Ether received will be logged with {PaymentReceived} events. Note that these events are not fully\r\n     * reliable: it's possible for a contract to receive Ether without triggering this function. This only affects the\r\n     * reliability of the events, and not the actual splitting of Ether.\r\n     *\r\n     * To learn more about this see the Solidity documentation for\r\n     * https://solidity.readthedocs.io/en/latest/contracts.html#fallback-function[fallback\r\n     * functions].\r\n     */\r\n    receive() external payable virtual {\r\n        emit PaymentReceived(_msgSender(), msg.value);\r\n    }\r\n\r\n    /**\r\n     * @dev Getter for the total shares held by payees.\r\n     */\r\n    function totalShares() public view returns (uint256) {\r\n        return _totalShares;\r\n    }\r\n\r\n    /**\r\n     * @dev Getter for the total amount of Ether already released.\r\n     */\r\n    function totalReleased() public view returns (uint256) {\r\n        return _totalReleased;\r\n    }\r\n\r\n    /**\r\n     * @dev Getter for the total amount of `token` already released. `token` should be the address of an IERC20\r\n     * contract.\r\n     */\r\n    function totalReleased(IERC20 token) public view returns (uint256) {\r\n        return _erc20TotalReleased[token];\r\n    }\r\n\r\n    /**\r\n     * @dev Getter for the amount of shares held by an account.\r\n     */\r\n    function shares(address account) public view returns (uint256) {\r\n        return _shares[account];\r\n    }\r\n\r\n    /**\r\n     * @dev Getter for the amount of Ether already released to a payee.\r\n     */\r\n    function released(address account) public view returns (uint256) {\r\n        return _released[account];\r\n    }\r\n\r\n    /**\r\n     * @dev Getter for the amount of `token` tokens already released to a payee. `token` should be the address of an\r\n     * IERC20 contract.\r\n     */\r\n    function released(IERC20 token, address account) public view returns (uint256) {\r\n        return _erc20Released[token][account];\r\n    }\r\n\r\n    /**\r\n     * @dev Getter for the address of the payee number `index`.\r\n     */\r\n    function payee(uint256 index) public view returns (address) {\r\n        return _payees[index];\r\n    }\r\n\r\n    /**\r\n     * @dev Triggers a transfer to `account` of the amount of Ether they are owed, according to their percentage of the\r\n     * total shares and their previous withdrawals.\r\n     */\r\n    function release(address payable account) public virtual {\r\n        require(_shares[account] > 0, \"PaymentSplitter: account has no shares\");\r\n\r\n        uint256 totalReceived = address(this).balance + totalReleased();\r\n        uint256 payment = _pendingPayment(account, totalReceived, released(account));\r\n\r\n        require(payment != 0, \"PaymentSplitter: account is not due payment\");\r\n\r\n        _released[account] += payment;\r\n        _totalReleased += payment;\r\n\r\n        Address.sendValue(account, payment);\r\n        emit PaymentReleased(account, payment);\r\n    }\r\n\r\n    /**\r\n     * @dev Triggers a transfer to `account` of the amount of `token` tokens they are owed, according to their\r\n     * percentage of the total shares and their previous withdrawals. `token` must be the address of an IERC20\r\n     * contract.\r\n     */\r\n    function release(IERC20 token, address account) public virtual {\r\n        require(_shares[account] > 0, \"PaymentSplitter: account has no shares\");\r\n\r\n        uint256 totalReceived = token.balanceOf(address(this)) + totalReleased(token);\r\n        uint256 payment = _pendingPayment(account, totalReceived, released(token, account));\r\n\r\n        require(payment != 0, \"PaymentSplitter: account is not due payment\");\r\n\r\n        _erc20Released[token][account] += payment;\r\n        _erc20TotalReleased[token] += payment;\r\n\r\n        SafeERC20.safeTransfer(token, account, payment);\r\n        emit ERC20PaymentReleased(token, account, payment);\r\n    }\r\n\r\n    /**\r\n     * @dev internal logic for computing the pending payment of an `account` given the token historical balances and\r\n     * already released amounts.\r\n     */\r\n    function _pendingPayment(\r\n        address account,\r\n        uint256 totalReceived,\r\n        uint256 alreadyReleased\r\n    ) private view returns (uint256) {\r\n        return (totalReceived * _shares[account]) / _totalShares - alreadyReleased;\r\n    }\r\n\r\n    /**\r\n     * @dev Add a new payee to the contract.\r\n     * @param account The address of the payee to add.\r\n     * @param shares_ The number of shares owned by the payee.\r\n     */\r\n    function _addPayee(address account, uint256 shares_) private {\r\n        require(account != address(0), \"PaymentSplitter: account is the zero address\");\r\n        require(shares_ > 0, \"PaymentSplitter: shares are 0\");\r\n        require(_shares[account] == 0, \"PaymentSplitter: account already has shares\");\r\n\r\n        _payees.push(account);\r\n        _shares[account] = shares_;\r\n        _totalShares = _totalShares + shares_;\r\n        emit PayeeAdded(account, shares_);\r\n    }\r\n}\r\n\r\n// File: contracts/OnChainDonald.sol\r\n\r\ncontract OnChainDonald is\r\n    ERC721,\r\n    ERC721Enumerable,\r\n    Ownable,\r\n    ReentrancyGuard,\r\n    PaymentSplitter\r\n{\r\n    using SafeMath for uint256;\r\n    using Counters for Counters.Counter;\r\n\r\n    // State\r\n    uint256 public state;\r\n    uint256 internal constant STATE_INIT = 0;\r\n    uint256 internal constant STATE_MINTING = 1;\r\n    uint256 internal constant STATE_MINTING_REVEALED = 2;\r\n    uint256 internal constant STATE_MINTED = 3;\r\n    uint256 internal constant STATE_LOCKED = 4;\r\n\r\n    // Nifties\r\n    Counters.Counter public numMinted;\r\n    uint256 public constant MAX_MINTS = 2024;\r\n    uint256 internal constant MAX_MINTS_PER_TX = 5;\r\n    uint256 internal constant MINT_PRICE = 0.02024 ether;\r\n    uint256 internal constant SPECIAL_MINT_PRICE = 0.045 ether;\r\n    uint256 internal constant MAX_WHITELIST_MINTS_PER_TX = 2;\r\n    mapping (address => bool) public whitelist;\r\n    mapping(uint256 => bool) internal special;\r\n    uint256 internal seed;\r\n    string internal description =\r\n        \"OnChainDonald is a collection of 2024 unique Donalds. \"\r\n        \"The artwork and metadata are fully on-chain, in a single contract.\";\r\n\r\n    // Traits\r\n    string internal constant COLOR_BLACK = \"#000000\";\r\n    string internal constant COLOR_WHITE = \"#ffffff\";\r\n    string internal constant ATTRIBUTE_NAME_EYES = \"Eyes\";\r\n    string internal constant ATTRIBUTE_NAME_EXPRESSION = \"Expression\";\r\n    string internal constant ATTRIBUTE_NAME_SKIN = \"Skin\";\r\n    string internal constant ATTRIBUTE_NAME_LOCATION = \"Location\";\r\n    string internal constant ATTRIBUTE_NAME_HAIR = \"Hair\";\r\n    string internal constant ATTRIBUTE_NAME_TIE = \"Tie\";\r\n    string internal constant ATTRIBUTE_NAME_MOUTH = \"Mouth\";\r\n    string internal constant ATTRIBUTE_NAME_SUIT = \"Suit\";\r\n    string internal constant ATTRIBUTE_NAME_PIN = \"Pin\";\r\n    string internal constant ATTRIBUTE_NAME_SPECIALITY = \"Speciality\";\r\n\r\n    string[] internal locations = [\r\n        \"\",\r\n        \"Red Room\",\r\n        \"Blue Room\",\r\n        \"Office\",\r\n        \"Boardroom\",\r\n        \"Beach Villa\",\r\n        \"Golf Resort\",\r\n        \"Casino\",\r\n        \"Penthouse\",\r\n        \"Podium\",\r\n        \"Mars\",\r\n        \"Swamp\"\r\n    ];\r\n\r\n    uint256[] internal locationColors = [\r\n        0xb31942, 0xb31942, 0xb31942,\r\n        0x54000c, 0x54000c, 0x54000c,\r\n        0x000c54, 0x000c54, 0x000c54,\r\n        0xb22234, 0xffffff, 0x3c3b6e,\r\n        0xd98922, 0xf9c35d, 0xa83809,\r\n        0x3e91a3, 0x718e73, 0xbba58f,\r\n        0x93dbdf, 0x52a9bb, 0x8daf23,\r\n        0xfbd946, 0xf55022, 0xff98b0,\r\n        0xb38728, 0xfbf5b8, 0xcfb162,\r\n        0xb5a084, 0x9c815d, 0x957d64,\r\n        0x0e0a22, 0xcb3927, 0xf8b37c,\r\n        0xe5d059, 0x6dba3c, 0x42063c\r\n    ];\r\n\r\n    string[] internal expressions = [\r\n        \"\",\r\n        \"Neutral\",\r\n        \"Wink\",\r\n        \"Squint\",\r\n        \"Surprised\"\r\n    ];\r\n\r\n    uint256 internal NEUTRAL_EXPRESSION_INDEX = 1;\r\n    uint256 internal WINK_EXPRESSION_INDEX = 2;\r\n    uint256 internal SQUINT_EXPRESSION_INDEX = 3;\r\n    uint256 internal SURPRISED_EXPRESSION_INDEX = 4;\r\n\r\n    string[] internal eyes = [\r\n        \"\",\r\n        \"Brown\",\r\n        \"Dark Grey\",\r\n        \"Black\",\r\n        \"Hollow\",\r\n        \"Pearl\",\r\n        \"Blue\",\r\n        \"Green\",\r\n        \"Pepe\",\r\n        \"Patriot\",\r\n        \"Laser\",\r\n        \"Hollow Blue\",\r\n        \"Candy Apple\"\r\n    ];\r\n\r\n    uint256[] internal eyeRarities = [\r\n        0, // Unrevealed\r\n        120, // Brown\r\n        410, // Dark Grey\r\n        30, // Black\r\n        60, // Hollow\r\n        50, // Pearl\r\n        60, // Blue\r\n        60, // Green\r\n        30, // Pepe\r\n        50, // Patriot\r\n        40, // Laser\r\n        40, // Hollow Blue\r\n        50  // Candy Apple\r\n    ];\r\n\r\n    uint256 internal HOLLOW_EYES_INDEX = 4;\r\n    uint256 internal PEPE_EYES_INDEX = 8;\r\n    uint256 internal PATRIOT_EYES_INDEX = 9;\r\n    uint256 internal LASER_EYES_INDEX = 10;\r\n\r\n    uint256[] internal eyeColors = [\r\n        0x000000,\r\n        0x804800, // Brown\r\n        0x394545, // Dark Grey\r\n        0x111111, // Black\r\n        0x000000, // Hollow\r\n        0x6e695f, // Pearl\r\n        0x3d4dcb, // Blue\r\n        0x55ab35, // Green\r\n        0x000000, // Regular\r\n        0x0000ff, // Patriot\r\n        0xff0000, // Laser\r\n        0x2222d8, // Hollow Blue\r\n        0xf51600  // Candy Apple\r\n    ];\r\n\r\n    bool[] internal pupils = [\r\n        false,\r\n        true,\r\n        true,\r\n        false,\r\n        false,\r\n        true,\r\n        true,\r\n        true,\r\n        true,\r\n        false,\r\n        false,\r\n        false,\r\n        true\r\n    ];\r\n\r\n    string[] internal skins = [\r\n        \"\",\r\n        \"Pale\",\r\n        \"Warm Pale\",\r\n        \"Toned Pale\",\r\n        \"Glow\",\r\n        \"Mahogany\",\r\n        \"Orange\",\r\n        \"Carrot\",\r\n        \"Burned\",\r\n        \"Mango\",\r\n        \"Alien\",\r\n        \"Pepe\",\r\n        \"Nyan\",\r\n        \"White\"\r\n    ];\r\n\r\n    uint256[] internal skinRarities = [\r\n        0, // Unrevealed\r\n        110, // Pale\r\n        170, // Warm Pale\r\n        176, // Toned Pale\r\n        163, // Glow\r\n        30, // Mahogany\r\n        85, // Orange\r\n        85, // Carrot\r\n        80, // Burned\r\n        65, // Mango\r\n        7, // Alien\r\n        5, // Pepe\r\n        4, // Nyan\r\n        20 // White\r\n    ];\r\n\r\n    uint256[] internal skinFaceColors = [\r\n        0x000000,\r\n        0xfee2da,\r\n        0xfecebe,\r\n        0xf0be9b,\r\n        0xf6a685,\r\n        0xb55e45,\r\n        0xffa500,\r\n        0xec9332,\r\n        0xe5887c,\r\n        0xfd844e,        \r\n        0x98aa9c,\r\n        0x69804d,\r\n        0xf391f2,\r\n        0xfff0ea\r\n    ];\r\n\r\n    uint256[] internal skinNoseColors = [\r\n        0x000000,\r\n        0xfdf6f6,\r\n        0xffe0e0,\r\n        0xf6ccc6,\r\n        0xffc0a0,\r\n        0xc56e55,\r\n        0xffd020,\r\n        0xe9793c,\r\n        0xf5988c,\r\n        0xff995e,\r\n        0xb2beb5,\r\n        0x89a06d,\r\n        0xf361c1,\r\n        0xfffbfb\r\n    ];\r\n\r\n    uint256[] internal skinLipsColors = [\r\n        0x000000,\r\n        0xf0c4b9,\r\n        0xca848a,\r\n        0xb56d69,\r\n        0xc86070,\r\n        0x803d3e,\r\n        0xa06000,\r\n        0xcc6332,\r\n        0xc5685c,\r\n        0xfd541e,\r\n        0x648688,\r\n        0x9a3828,\r\n        0xf33191,\r\n        0xf4c8bc\r\n    ];\r\n\r\n    string[] internal mouths = [\r\n        \"\",\r\n        \"Teethy\",\r\n        \"Closed\",\r\n        \"Yelling\",\r\n        \"Taunting\",\r\n        \"Stern\",\r\n        \"Pursed\",\r\n        \"Pepe\"\r\n    ];\r\n\r\n    uint256[] internal mouthRarities = [\r\n        0,\r\n        175, // Teethy\r\n        150, // Closed\r\n        225, // Yelling\r\n        100, // Taunting\r\n        150, // Stern\r\n        100, // Pursed\r\n        100  // Pepe\r\n    ];\r\n\r\n    uint256 internal TEETHY_MOUTH_INDEX = 1;\r\n    uint256 internal CLOSED_MOUTH_INDEX = 2;\r\n    uint256 internal OPEN_MOUTH_INDEX = 3;\r\n    uint256 internal TAUNTING_MOUTH_INDEX = 4;\r\n    uint256 internal STERN_MOUTH_INDEX = 5;\r\n    uint256 internal PURSED_MOUTH_INDEX = 6;\r\n    uint256 internal PEPE_MOUTH_INDEX = 7;\r\n\r\n    string[] internal hairs = [\r\n        \"\",\r\n        \"Brown\",\r\n        \"Copper\",\r\n        \"Maga\",\r\n        \"Blonde\",\r\n        \"White\",\r\n        \"Cream\",\r\n        \"Platinum\",\r\n        \"Silver\",\r\n        \"Punk\",\r\n        \"Black\",\r\n        \"Bald\",\r\n        \"Gold Flame\"\r\n    ];\r\n\r\n    uint256[] internal hairRarities = [\r\n        0,\r\n        100, // Brown\r\n        60, // Copper\r\n        160, // Maga\r\n        140, // Blonde\r\n        100, // White\r\n        100, // Cream\r\n        60, // Platinum\r\n        70, // Silver\r\n        20, // Punk\r\n        60, // Black\r\n        100, // Bald,\r\n        30 // Gold Flame\r\n    ];\r\n\r\n    uint256[] internal hairColors = [\r\n        0x000000,\r\n        0xd7a183,\r\n        0xef9655,\r\n        0xefc680,\r\n        0xfad799,\r\n        0xf8f8f8,\r\n        0xfaebd7,\r\n        0xdfdad0,\r\n        0xbabfc8,\r\n        0xc46ce9,\r\n        0x080808,\r\n        0x000000,\r\n        0xe46029,\r\n        0xef8045\r\n    ];\r\n\r\n    uint256 internal BALD_HAIR_INDEX = 11;\r\n\r\n    string[] internal ties = [\r\n        \"\",\r\n        \"Red\",\r\n        \"Black\",\r\n        \"Blue\",\r\n        \"Yellow\",\r\n        \"Gold\",\r\n        \"Red Stripes\",\r\n        \"Blue Stripes\",\r\n        \"Black Stripes\",\r\n        \"True Patriot\"\r\n    ];\r\n\r\n    uint256 internal TIE_STRIPES_START_INDEX = 6;\r\n    uint256 internal PATRIOT_TIE_INDEX = 9;\r\n\r\n    uint256[] internal tieColors = [\r\n        0x000000,\r\n        0xd7282a,\r\n        0x000000,\r\n        0x0000ff,\r\n        0xfff642,\r\n        0xffd700,\r\n        0xff0000,\r\n        0x0000ff,\r\n        0x000000,\r\n        0x1010e0\r\n    ];\r\n\r\n    string[] internal suits = [\r\n        \"\",\r\n        \"Black\",\r\n        \"Navy\",\r\n        \"None\"\r\n    ];\r\n\r\n    uint256[] internal suitRarities = [\r\n        0,\r\n        400,\r\n        400,\r\n        200\r\n    ];\r\n\r\n    uint256[] internal suitColors = [\r\n        0x000000,\r\n        0x080808,\r\n        0x193059,\r\n        0x000000\r\n    ];\r\n\r\n    uint256[] internal suitLapelColors = [\r\n        0x000000,\r\n        0x161616,\r\n        0x203865,\r\n        0x000000\r\n    ];\r\n\r\n    uint256 internal SUIT_NONE_INDEX = 3;\r\n\r\n    string[] internal pins = [\r\n        \"\",\r\n        \"None\",\r\n        \"Patriot\"\r\n    ];\r\n\r\n    uint256 internal PIN_NONE_INDEX = 1;\r\n    uint256 internal PIN_PATRIOT_INDEX = 2;\r\n\r\n    string[] internal specialities = [\r\n        \"None\",\r\n        \"Covfefe\",\r\n        \"Hamberder\",\r\n        \"Macho\",\r\n        \"Dancer\",\r\n        \"Big Hands\",\r\n        \"Golfer\",\r\n        \"Honest\",\r\n        \"Dealmaker\",\r\n        \"Rich\",\r\n        \"Genius\",\r\n        \"Patriot\",\r\n        \"Strong\",\r\n        \"Great\",\r\n        \"Humble\",\r\n        \"Big League\",\r\n        \"Winner\",\r\n        \"Handsome\"\r\n    ];\r\n\r\n    uint256 internal SPECIALITY_NONE_INDEX = 0;\r\n\r\n    struct Don {\r\n        uint256 tokenId;\r\n        bool revealed;\r\n        bool special;\r\n        uint256 eyes;\r\n        uint256 expression;\r\n        uint256 skin;\r\n        uint256 location;\r\n        uint256 hair;\r\n        uint256 tie;\r\n        uint256 mouth;\r\n        uint256 suit;\r\n        uint256 pin;\r\n        uint256 speciality;\r\n    }\r\n\r\n    constructor(address[] memory _payees, uint256[] memory _shares)\r\n        payable\r\n        ERC721(\"OnChainDonald\", \"OCD\")\r\n        PaymentSplitter(_payees, _shares) {}\r\n\r\n    function _safeMint(uint256 _quantity, bool _special) private {\r\n        require(_quantity > 0);\r\n        require(\r\n            numMinted.current().add(_quantity) <= MAX_MINTS,\r\n            \"Cannot exceed total supply\"\r\n        );\r\n\r\n        for (uint256 i = 0; i < _quantity; i++) {\r\n            numMinted.increment();\r\n            uint256 mintIndex = numMinted.current();\r\n\r\n            if (mintIndex <= MAX_MINTS) {\r\n                _safeMint(msg.sender, mintIndex);\r\n                if (_special) {\r\n                    special[mintIndex] = true;\r\n                }\r\n            }\r\n        }\r\n    }\r\n\r\n    function mint(uint256 _quantity, bool _special)\r\n        external\r\n        payable\r\n        nonReentrant\r\n    {\r\n        require(\r\n            state == STATE_MINTING || state == STATE_MINTING_REVEALED,\r\n            \"Mint closed\"\r\n        );\r\n        require(_quantity > 0 && _quantity <= MAX_MINTS_PER_TX);\r\n        require(\r\n            msg.value >=\r\n                (_special ? SPECIAL_MINT_PRICE : MINT_PRICE).mul(_quantity),\r\n            \"Payment too small\"\r\n        );\r\n\r\n        _safeMint(_quantity, _special);\r\n    }\r\n\r\n    function whitelistMint(uint256 _quantity)\r\n        external\r\n        payable\r\n        nonReentrant\r\n    {\r\n        require(state == STATE_MINTING || state == STATE_MINTING);\r\n        require(whitelist[msg.sender], \"Not whitelisted\");\r\n        require(_quantity > 0 && _quantity <= MAX_WHITELIST_MINTS_PER_TX);\r\n        require(msg.value >= MINT_PRICE.mul(_quantity), \"Payment too small\");\r\n\r\n        _safeMint(_quantity, true);\r\n        whitelist[msg.sender] = false;\r\n    }\r\n\r\n    function whitelistAddresses(address[] memory _addresses) external onlyOwner {\r\n        require(state == STATE_INIT || state == STATE_MINTING);\r\n\r\n        for (uint256 i = 0; i < _addresses.length; i++) {\r\n            whitelist[_addresses[i]] = true;\r\n        }\r\n    }\r\n\r\n    function startMint() external onlyOwner {\r\n        require(state == STATE_INIT);\r\n\r\n        state = STATE_MINTING;\r\n    }\r\n\r\n    function reveal(uint256 _seed) external onlyOwner {\r\n        require(state == STATE_MINTING);\r\n        require(_seed != 0);\r\n\r\n        state = STATE_MINTING_REVEALED;\r\n        seed = _seed + 0x201620202024c0fefe;\r\n    }\r\n\r\n    function closeMint() external onlyOwner {\r\n        require(state == STATE_MINTING_REVEALED);\r\n\r\n        state = STATE_MINTED;\r\n    }\r\n\r\n    function lock() external onlyOwner {\r\n        require(state == STATE_MINTED);\r\n\r\n        state = STATE_LOCKED;\r\n    }\r\n\r\n    function setMeta(string memory _description) external onlyOwner {\r\n        require(state != STATE_LOCKED);\r\n\r\n        description = _description;\r\n    }\r\n\r\n    function random(uint256 _seed, string memory input)\r\n        private\r\n        pure\r\n        returns (uint256)\r\n    {\r\n        return _seed + uint256(keccak256(abi.encodePacked(input)));\r\n    }\r\n\r\n    function pluck(\r\n        uint256 _seed,\r\n        uint256 tokenId,\r\n        string memory keyPrefix,\r\n        string[] memory sourceArray\r\n    ) private pure returns (uint256) {\r\n        uint256 rand = random(\r\n            _seed,\r\n            string(abi.encodePacked(keyPrefix, Strings.toString(tokenId)))\r\n        );\r\n        return (rand % (sourceArray.length - 1)) + 1;\r\n    }\r\n\r\n    function pluckRarities(\r\n        uint256 _seed,\r\n        uint256 tokenId,\r\n        string memory keyPrefix,\r\n        uint256[] memory rarityArray\r\n    ) private pure returns (uint256) {\r\n\r\n        uint256 rand = random(\r\n            _seed,\r\n            string(abi.encodePacked(keyPrefix, Strings.toString(tokenId)))\r\n        ) % 1000;\r\n\r\n        uint256 i = 0;\r\n        uint256 acc = 0;\r\n\r\n        while (i < rarityArray.length - 1) {\r\n            acc += rarityArray[i];\r\n            if(rand < acc) break;\r\n            i++;\r\n        }\r\n\r\n        return i;\r\n    }\r\n\r\n    function makeFilledEllipse(\r\n        uint256 cx,\r\n        uint256 cy,\r\n        uint256 rx,\r\n        uint256 ry,\r\n        string memory fill,\r\n        string memory extras\r\n    ) private pure returns (string memory) {\r\n        return\r\n            string(\r\n                abi.encodePacked(\r\n                    '<ellipse cx=\"',\r\n                    Strings.toString(cx),\r\n                    '\" cy=\"',\r\n                    Strings.toString(cy),\r\n                    '\" rx=\"',\r\n                    Strings.toString(rx),\r\n                    '\" ry=\"',\r\n                    Strings.toString(ry),\r\n                    '\" fill=\"',\r\n                    fill,\r\n                    '\" ',\r\n                    extras,\r\n                    \"/>\"\r\n                )\r\n            );\r\n    }\r\n\r\n    function makePolygon(string memory points, string memory fill)\r\n        private\r\n        pure\r\n        returns (string memory)\r\n    {\r\n        return\r\n            string(\r\n                abi.encodePacked(\r\n                    '<polygon points=\"',\r\n                    points,\r\n                    '\" fill=\"',\r\n                    fill,\r\n                    '\" />'\r\n                )\r\n            );\r\n    }\r\n\r\n    function uint8tohexchar(uint8 i) private pure returns (uint8) {\r\n        return\r\n            (i > 9)\r\n                ? (i + 87) // ascii a-f\r\n                : (i + 48); // ascii 0-9\r\n    }\r\n\r\n    function hexColorToString(uint256 i) private pure returns (string memory) {\r\n        bytes memory o = new bytes(7);\r\n        uint24 mask = 0x00000f;\r\n\r\n        uint256 j;\r\n        for (j = 6; j > 0; --j) {\r\n            o[j] = bytes1(uint8tohexchar(uint8(i & mask)));\r\n            i = i >> 4;\r\n        }\r\n        o[0] = \"#\";\r\n        return string(o);\r\n    }\r\n\r\n    function getSuitSVG(Don memory don) private view returns (string memory) {\r\n        uint256 suitIndex = don.suit;\r\n        uint256 pinIndex = don.pin;\r\n        string memory suitColor = hexColorToString(suitColors[suitIndex]);\r\n        string memory suitLapelColor = hexColorToString(\r\n            suitLapelColors[suitIndex]\r\n        );\r\n\r\n        return\r\n            string(\r\n                abi.encodePacked(\r\n                    suitIndex < SUIT_NONE_INDEX\r\n                        ? makePolygon(\r\n                            \"0 220 80 180 90 160 122 256 0 256\",\r\n                            suitColor\r\n                        )\r\n                        : \"\",\r\n                    suitIndex < SUIT_NONE_INDEX\r\n                        ? makePolygon(\r\n                            \"256 240 176 180 166 160 138 256 256 256\",\r\n                            suitColor\r\n                        )\r\n                        : \"\",\r\n                    suitIndex < SUIT_NONE_INDEX\r\n                        ? makePolygon(\r\n                            \"90 160 122 256 83 256 65 225 78 218 64 210\",\r\n                            suitLapelColor\r\n                        )\r\n                        : \"\",\r\n                    suitIndex < SUIT_NONE_INDEX\r\n                        ? makePolygon(\r\n                            \"166 160 138 256 173 256 191 225 178 218 192 210\",\r\n                            suitLapelColor\r\n                        )\r\n                        : \"\",\r\n                    pinIndex == PIN_PATRIOT_INDEX\r\n                        ? '<text x=\"226\" y=\"175\" transform=\"rotate(18 0 0)\" font-family=\"Tahoma, sans-serif\" font-size=\"14\" fill=\"#FFD700\">&#127482;&#127480;</text>'\r\n                        : \"\"\r\n                )\r\n            );\r\n    }\r\n\r\n    function getShirtAndTieSVG(Don memory don)\r\n        private\r\n        view\r\n        returns (string memory)\r\n    {\r\n        uint256 tieIndex = don.tie;\r\n        uint256 suitIndex = don.suit;\r\n        string memory tieColor = hexColorToString(tieColors[tieIndex]);\r\n        string memory shirtCollarColor = hexColorToString(0xffffff);\r\n        string memory shirtBodyColor = hexColorToString(0xeaeaea);\r\n        string\r\n            memory shirtWithSuit = \"92 160 160 160 180 190 220 256 190 256 168 220 170 256 85 256 85 220 66 256 38 256\";\r\n        string\r\n            memory shirtWithoutSuit = \"92 160 160 160 220 180 240 256 170 256 85 256 20 256 30 180\";\r\n        string\r\n            memory tiePolygon = \"129, 160, 141, 190, 133, 200, 150, 256, 110, 256, 123, 200, 115, 190\";\r\n\r\n        return\r\n            string(\r\n                abi.encodePacked(\r\n                    makePolygon(\r\n                        suitIndex < SUIT_NONE_INDEX\r\n                            ? shirtWithSuit\r\n                            : shirtWithoutSuit,\r\n                        shirtBodyColor\r\n                    ),\r\n                    makePolygon(\"130 160 105 210 90 165\", shirtCollarColor),\r\n                    makePolygon(\"126 160 151 210 166 165\", shirtCollarColor),\r\n                    makePolygon(tiePolygon, tieColor),\r\n                    tieIndex >= TIE_STRIPES_START_INDEX\r\n                        ? makePolygon(tiePolygon, \"url(#p1)\")\r\n                        : \"\"\r\n                )\r\n            );\r\n    }\r\n\r\n    function getEyesSVG(Don memory don, string memory eyelashColor) private view returns (string memory) {\r\n        uint256 eyeIndex = don.eyes;\r\n        bool hasPupils = pupils[eyeIndex];\r\n        uint256 expressionIndex = don.expression;\r\n        uint256 eyeWidth = 12;\r\n        uint256 eyeHeight = 5;\r\n        uint256 pupilHeight = 4;\r\n        uint256 pupilWidth = 4;\r\n        uint256 laserWidth = 7;\r\n        string memory lEyeColor = hasPupils ? COLOR_WHITE : hexColorToString(eyeColors[eyeIndex]);\r\n        string memory rEyeColor = lEyeColor;\r\n        string memory pupilColor = hexColorToString(eyeColors[eyeIndex]);\r\n        string memory extras = \"\";\r\n        string memory extraAttrs = \"\";\r\n        string memory rEyeEmptyStr = \"\";\r\n\r\n        if (expressionIndex == SQUINT_EXPRESSION_INDEX) {\r\n            eyeHeight -= 2;\r\n            pupilHeight--;\r\n            laserWidth = 4;\r\n        } else if (expressionIndex == WINK_EXPRESSION_INDEX) {\r\n            rEyeEmptyStr = string(\r\n                abi.encodePacked(\r\n                    '<path d=\"M 150 100 C 155 99, 165 99, 170 100\" stroke=\"',\r\n                    hasPupils ? eyelashColor : rEyeColor,\r\n                    '\" stroke-linecap=\"round\" stroke-width=\"4\"',\r\n                    (eyeIndex == HOLLOW_EYES_INDEX) ? ' opacity=\"0.5\"' : \"\",\r\n                    \" />\"\r\n                )\r\n            );\r\n        } else if (expressionIndex == SURPRISED_EXPRESSION_INDEX) {\r\n            eyeWidth -= 4;\r\n            eyeHeight++;\r\n            laserWidth += 5;\r\n            pupilWidth++;\r\n        }\r\n\r\n        if(eyeIndex == PEPE_EYES_INDEX && expressionIndex != SQUINT_EXPRESSION_INDEX) {\r\n            pupilHeight++;\r\n            pupilWidth++;\r\n        }\r\n\r\n        if (expressionIndex == SURPRISED_EXPRESSION_INDEX && eyeIndex == PEPE_EYES_INDEX) {\r\n            eyeWidth++;\r\n            eyeHeight++;\r\n        }\r\n\r\n        if (hasPupils) {\r\n            extras = string(\r\n                abi.encodePacked(\r\n                    makeFilledEllipse(\r\n                        112,\r\n                        100,\r\n                        pupilWidth,\r\n                        pupilHeight,\r\n                        pupilColor,\r\n                        extraAttrs\r\n                    ),\r\n                    (expressionIndex != WINK_EXPRESSION_INDEX)\r\n                        ? makeFilledEllipse(\r\n                            160,\r\n                            100,\r\n                            pupilWidth,\r\n                            pupilHeight,\r\n                            pupilColor,\r\n                            extraAttrs\r\n                        )\r\n                        : \"\"\r\n                )\r\n            );\r\n\r\n            lEyeColor = COLOR_WHITE;\r\n            rEyeColor = COLOR_WHITE;\r\n        }\r\n\r\n        if (eyeIndex == PATRIOT_EYES_INDEX) {\r\n            lEyeColor = hexColorToString(0xff0000);\r\n        } else if (eyeIndex == LASER_EYES_INDEX) {\r\n            if (laserWidth > 0) {\r\n                extras = string(\r\n                    abi.encodePacked(\r\n                        '<line x1=\"112\" y1=\"100\" x2=\"266\" y2=\"36\" style=\"stroke:',\r\n                        lEyeColor,\r\n                        \";stroke-width:\",\r\n                        Strings.toString(laserWidth),\r\n                        '\" opacity=\"0.8\" />'\r\n                    )\r\n                );\r\n            }\r\n            if (laserWidth > 0 && expressionIndex != WINK_EXPRESSION_INDEX) {\r\n                extras = string(\r\n                    abi.encodePacked(\r\n                        extras,\r\n                        '<line x1=\"160\" y1=\"100\" x2=\"266\" y2=\"56\" style=\"stroke:',\r\n                        lEyeColor,\r\n                        \";stroke-width:\",\r\n                        Strings.toString(laserWidth),\r\n                        '\" opacity=\"0.8\" />'\r\n                    )\r\n                );\r\n            }\r\n        } else if (eyeIndex == HOLLOW_EYES_INDEX) {\r\n            extraAttrs = 'fill-opacity=\"0.5\"';\r\n        }\r\n\r\n        return\r\n            string(\r\n                abi.encodePacked(\r\n                    makeFilledEllipse(\r\n                        112,\r\n                        100,\r\n                        eyeWidth,\r\n                        eyeHeight,\r\n                        lEyeColor,\r\n                        extraAttrs\r\n                    ),\r\n                    (expressionIndex != WINK_EXPRESSION_INDEX)\r\n                        ? makeFilledEllipse(\r\n                            160,\r\n                            100,\r\n                            eyeWidth,\r\n                            eyeHeight,\r\n                            rEyeColor,\r\n                            extraAttrs\r\n                        )\r\n                        : rEyeEmptyStr,\r\n                    extras\r\n                )\r\n            );\r\n    }\r\n\r\n    function getSkinSVG(Don memory don) private view returns (string memory) {\r\n        uint256 skinIndex = don.skin;\r\n        uint256 mouthIndex = don.mouth;\r\n        string memory skinFaceColorStr = hexColorToString(\r\n            skinFaceColors[skinIndex]\r\n        );\r\n        string memory skinNoseColorStr = hexColorToString(\r\n            skinNoseColors[skinIndex]\r\n        );\r\n        string memory skinLipsColorStr = hexColorToString(\r\n            skinLipsColors[skinIndex]\r\n        );\r\n        string memory mouthStr = \"\";\r\n\r\n        if (mouthIndex == TEETHY_MOUTH_INDEX) {\r\n            mouthStr = string(\r\n                abi.encodePacked(\r\n                    makeFilledEllipse(135, 156, 16, 8, skinLipsColorStr, \"\"),\r\n                    makeFilledEllipse(135, 156, 12, 2, COLOR_WHITE, \"\")\r\n                )\r\n            );\r\n        } else if (mouthIndex == CLOSED_MOUTH_INDEX) {\r\n            mouthStr = makeFilledEllipse(135, 156, 16, 4, skinLipsColorStr, \"\");\r\n        } else if (mouthIndex == OPEN_MOUTH_INDEX) {\r\n            mouthStr = string(\r\n                abi.encodePacked(\r\n                    makeFilledEllipse(135, 156, 18, 9, skinLipsColorStr, \"\"),\r\n                    makeFilledEllipse(135, 149, 11, 2, COLOR_WHITE, \"\"),\r\n                    makeFilledEllipse(135, 163, 11, 2, COLOR_WHITE, \"\")\r\n                )\r\n            );\r\n        } else if (mouthIndex == TAUNTING_MOUTH_INDEX) {\r\n            mouthStr = makeFilledEllipse(135, 156, 8, 8, skinLipsColorStr, \"\");\r\n        } else if (mouthIndex == STERN_MOUTH_INDEX) {\r\n            mouthStr = string(\r\n                abi.encodePacked(\r\n                    '<path d=\"M 121 156 C 126 153, 147 152, 151 155\" stroke=\"',\r\n                    skinLipsColorStr,\r\n                    '\" stroke-linecap=\"round\" stroke-width=\"4\" fill=\"transparent\" />'\r\n                )\r\n            );\r\n        } else if (mouthIndex == PURSED_MOUTH_INDEX) {\r\n            mouthStr = string(\r\n                abi.encodePacked(\r\n                    '<ellipse cx=\"3\" cy=\"206\" rx=\"11\" ry=\"7\" fill=\"',\r\n                    skinLipsColorStr,\r\n                    '\" transform=\"rotate(-40 0 0)\" />'\r\n                )\r\n            );\r\n        } else if (mouthIndex == PEPE_MOUTH_INDEX) {\r\n            mouthStr = string(\r\n                abi.encodePacked(\r\n                    '<path d=\"M 110 150 C 118 155, 154 155, 162 150\" stroke=\"',\r\n                    skinLipsColorStr,\r\n                    '\" stroke-linecap=\"round\" stroke-width=\"6\" fill=\"transparent\" />'\r\n                )\r\n            );\r\n        } \r\n\r\n        return\r\n            string(\r\n                abi.encodePacked(\r\n                    makeFilledEllipse(130, 108, 60, 75, skinFaceColorStr, \"\"),\r\n                    makeFilledEllipse(138, 124, 8, 12, skinNoseColorStr, \"\"),\r\n                    mouthStr\r\n                )\r\n            );\r\n    }\r\n\r\n    function getHairSVG(Don memory don) private view returns (string memory) {\r\n        uint256 hairIndex = don.hair;\r\n        string memory hairColorStr = hexColorToString(hairColors[hairIndex]);\r\n\r\n        if (hairIndex == BALD_HAIR_INDEX) {\r\n            return \"\";\r\n        } else {\r\n            return\r\n                string(\r\n                    abi.encodePacked(\r\n                        makeFilledEllipse(140, 55, 64, 24, hairColorStr, \"\"),\r\n                        makeFilledEllipse(\r\n                            85,\r\n                            70,\r\n                            16,\r\n                            38,\r\n                            hairColorStr,\r\n                            'transform=\"rotate(10 0 0)\"'\r\n                        )\r\n                    )\r\n                );\r\n        }\r\n    }\r\n\r\n    function getLocationSVG(Don memory don, bool transparent)\r\n        private\r\n        view\r\n        returns (string memory)\r\n    {\r\n        uint256 index = don.location * 3;\r\n        string memory fill = transparent ? 'none' : 'url(#gr1)';\r\n        \r\n        return\r\n            string(\r\n                abi.encodePacked(\r\n                    '<linearGradient id=\"gr1\" x1=\"0\" x2=\"0\" y1=\"0\" y2=\"1\">'\r\n                    '<stop offset=\"0%\" stop-color=\"',\r\n                    hexColorToString(locationColors[index]),\r\n                    '\"/>'\r\n                    '<stop offset=\"40%\" stop-color=\"',\r\n                    hexColorToString(locationColors[index + 1]),\r\n                    '\"/>'\r\n                    '<stop offset=\"80%\" stop-color=\"',\r\n                    hexColorToString(locationColors[index + 2]),\r\n                    '\"/>'\r\n                    \"</linearGradient>\"\r\n                    '<rect x=\"0\" y=\"0\" rx=\"0\" ry=\"0\" width=\"256\" height=\"256\" fill=\"', fill, '\" />'\r\n                )\r\n            );\r\n    }\r\n\r\n    function getDefsSVG(Don memory don) private view returns (string memory) {\r\n        string memory stroke = (don.tie == PATRIOT_TIE_INDEX)\r\n            ? \"#e01010\"\r\n            : COLOR_WHITE;\r\n        string memory strokeOpacity = (don.tie == PATRIOT_TIE_INDEX)\r\n            ? \"\"\r\n            : 'stroke-opacity=\"0.7\" ';\r\n\r\n        return\r\n            string(\r\n                abi.encodePacked(\r\n                    '<pattern id=\"p1\" patternUnits=\"userSpaceOnUse\" width=\"8\" height=\"8\" patternTransform=\"rotate(-55)\">'\r\n                    '<line x1=\"0\" y=\"0\" x2=\"0\" y2=\"30\" stroke=\"',\r\n                    stroke,\r\n                    '\" ',\r\n                    strokeOpacity,\r\n                    'stroke-width=\"6\" /></pattern>'\r\n                )\r\n            );\r\n    }\r\n\r\n    function getSVG(Don memory don, bool transparent) private view returns (string memory) {\r\n        return\r\n            string(\r\n                abi.encodePacked(\r\n                    '<svg xmlns=\"http://www.w3.org/2000/svg\" preserveaspectratio=\"xMidYMid meet\" viewBox=\"0 0 256 256\">',\r\n                    getDefsSVG(don),\r\n                    getLocationSVG(don, transparent),\r\n                    getShirtAndTieSVG(don),\r\n                    getSuitSVG(don),\r\n                    getSkinSVG(don),\r\n                    getHairSVG(don),\r\n                    getEyesSVG(don, hexColorToString(skinLipsColors[don.skin])),\r\n                    \"</svg>\"\r\n                )\r\n            );\r\n    }\r\n\r\n    function makeAttributeJson(string memory name, string memory value)\r\n        private\r\n        pure\r\n        returns (string memory)\r\n    {\r\n        return\r\n            string(\r\n                abi.encodePacked(\r\n                    '{\"trait_type\": \"',\r\n                    name,\r\n                    '\", \"value\": \"',\r\n                    value,\r\n                    '\"},'\r\n                )\r\n            );\r\n    }\r\n\r\n    function makeCoreAttributesJson(Don memory don)\r\n        private\r\n        view\r\n        returns (string memory)\r\n    {\r\n        return\r\n            string(\r\n                abi.encodePacked(\r\n                    makeAttributeJson(ATTRIBUTE_NAME_EYES, eyes[don.eyes]),\r\n                    makeAttributeJson(\r\n                        ATTRIBUTE_NAME_EXPRESSION,\r\n                        expressions[don.expression]\r\n                    ),\r\n                    makeAttributeJson(ATTRIBUTE_NAME_SKIN, skins[don.skin]),\r\n                    makeAttributeJson(\r\n                        ATTRIBUTE_NAME_LOCATION,\r\n                        locations[don.location]\r\n                    ),\r\n                    makeAttributeJson(ATTRIBUTE_NAME_HAIR, hairs[don.hair]),\r\n                    makeAttributeJson(ATTRIBUTE_NAME_TIE, ties[don.tie]),\r\n                    makeAttributeJson(ATTRIBUTE_NAME_MOUTH, mouths[don.mouth]),\r\n                    makeAttributeJson(ATTRIBUTE_NAME_SUIT, suits[don.suit]),\r\n                    makeAttributeJson(ATTRIBUTE_NAME_PIN, pins[don.pin])\r\n                )\r\n            );\r\n    }\r\n\r\n    function pluckPin(\r\n        uint256 _seed,\r\n        uint256 tokenId,\r\n        uint256 suit\r\n    ) internal view returns (uint256) {\r\n        if (suit == SUIT_NONE_INDEX) {\r\n            return PIN_NONE_INDEX;\r\n        }\r\n\r\n        uint256 val = random(\r\n            _seed,\r\n            string(\r\n                abi.encodePacked(ATTRIBUTE_NAME_PIN, Strings.toString(tokenId))\r\n            )\r\n        ) % 4;\r\n        if (val == 1) {\r\n            return PIN_PATRIOT_INDEX;\r\n        } else {\r\n            return PIN_NONE_INDEX;\r\n        }\r\n    }\r\n\r\n    function randomDon(\r\n        uint256 _tokenId,\r\n        uint256 _seed,\r\n        bool _special,\r\n        bool _revealed\r\n    ) internal view returns (Don memory) {\r\n        if (_revealed == false) {\r\n            return Don(_tokenId, false, _special, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0);\r\n        }\r\n\r\n        uint256 suit = pluckRarities(\r\n            _seed,\r\n            _tokenId,\r\n            ATTRIBUTE_NAME_SUIT,\r\n            suitRarities\r\n        );\r\n        uint256 speciality = _special\r\n            ? pluck(\r\n                _seed,\r\n                _tokenId,\r\n                ATTRIBUTE_NAME_SPECIALITY,\r\n                specialities\r\n            )\r\n            : SPECIALITY_NONE_INDEX;\r\n\r\n        return\r\n            Don({\r\n                tokenId: _tokenId,\r\n                special: _special,\r\n                revealed: true,\r\n                eyes: pluckRarities(_seed, _tokenId, ATTRIBUTE_NAME_EYES, eyeRarities),\r\n                expression: pluck(\r\n                    _seed,\r\n                    _tokenId,\r\n                    ATTRIBUTE_NAME_EXPRESSION,\r\n                    expressions\r\n                ),\r\n                skin: pluckRarities(_seed, _tokenId, ATTRIBUTE_NAME_SKIN, skinRarities),\r\n                location: pluck(\r\n                    _seed,\r\n                    _tokenId,\r\n                    ATTRIBUTE_NAME_LOCATION,\r\n                    locations\r\n                ),\r\n                hair: pluckRarities(_seed, _tokenId, ATTRIBUTE_NAME_HAIR, hairRarities),\r\n                tie: pluck(_seed, _tokenId, ATTRIBUTE_NAME_TIE, ties),\r\n                mouth: pluckRarities(\r\n                    _seed,\r\n                    _tokenId,\r\n                    ATTRIBUTE_NAME_MOUTH,\r\n                    mouthRarities\r\n                ),\r\n                suit: suit,\r\n                pin: pluckPin(_seed, _tokenId, suit),\r\n                speciality: speciality\r\n            });\r\n    }\r\n\r\n    function attrs(uint256 tokenId) public view returns (Don memory) {\r\n        require(\r\n            _exists(tokenId),\r\n            \"ERC721Metadata: URI query for nonexistent token\"\r\n        );\r\n\r\n        return\r\n            randomDon(\r\n                tokenId,\r\n                seed,\r\n                special[tokenId],\r\n                state != STATE_INIT && state != STATE_MINTING\r\n            );\r\n    }\r\n\r\n    function tokenURI(uint256 tokenId)\r\n        public\r\n        view\r\n        virtual\r\n        override\r\n        returns (string memory)\r\n    {\r\n        return encodedMetadata(attrs(tokenId), false);\r\n    }\r\n\r\n    function namePrefix(Don memory don) internal view returns (string memory) {\r\n        if (!don.revealed && don.special) {\r\n            return \"Special \";\r\n        } else if (don.revealed && don.speciality != SPECIALITY_NONE_INDEX) {\r\n            return string(abi.encodePacked(specialities[don.speciality], \" \"));\r\n        } else {\r\n            return \"\";\r\n        }\r\n    }\r\n\r\n    function metadata(Don memory don, bool transparent)\r\n        internal\r\n        view\r\n        returns (string memory)\r\n    {\r\n        return\r\n            string(\r\n                abi.encodePacked(\r\n                    '{\"name\":\"',\r\n                    namePrefix(don),\r\n                    \"Donald #\",\r\n                    Strings.toString(don.tokenId),\r\n                    '\",\"description\":\"',\r\n                    description,\r\n                    '\",\"attributes\":[',\r\n                    makeCoreAttributesJson(don),\r\n                    makeAttributeJson(\r\n                        ATTRIBUTE_NAME_SPECIALITY,\r\n                        specialities[don.speciality]\r\n                    ),\r\n                    '{\"trait_type\": \"Special\", \"value\": \"',\r\n                    (don.special ? \"Yes\" : \"No\"),\r\n                    '\"}'\r\n                    '],\"image\": \"data:image/svg+xml;base64,',\r\n                    Base64.encode(bytes(getSVG(don, transparent))),\r\n                    '\"}'\r\n                )\r\n            );\r\n    }\r\n\r\n    function encodedMetadata(Don memory don, bool transparent)\r\n        internal\r\n        view\r\n        returns (string memory)\r\n    {\r\n        return\r\n            string(\r\n                abi.encodePacked(\r\n                    \"data:application/json;base64,\",\r\n                    Base64.encode(bytes(metadata(don, transparent)))\r\n                )\r\n            );\r\n    }\r\n\r\n    function render(Don memory don, bool transparent)\r\n        external\r\n        view\r\n        returns (string memory)\r\n    {\r\n        return encodedMetadata(don, transparent);\r\n    }\r\n\r\n    // The following functions are overrides required by Solidity.\r\n    function _beforeTokenTransfer(\r\n        address from,\r\n        address to,\r\n        uint256 tokenId\r\n    ) internal override(ERC721, ERC721Enumerable) {\r\n        super._beforeTokenTransfer(from, to, tokenId);\r\n    }\r\n\r\n    function supportsInterface(bytes4 interfaceId)\r\n        public\r\n        view\r\n        override(ERC721, ERC721Enumerable)\r\n        returns (bool)\r\n    {\r\n        return super.supportsInterface(interfaceId);\r\n    }\r\n}","ABI":"[{\"inputs\":[{\"internalType\":\"address[]\",\"name\":\"_payees\",\"type\":\"address[]\"},{\"internalType\":\"uint256[]\",\"name\":\"_shares\",\"type\":\"uint256[]\"}],\"stateMutability\":\"payable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"approved\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"Approval\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"operator\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"bool\",\"name\":\"approved\",\"type\":\"bool\"}],\"name\":\"ApprovalForAll\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"contract IERC20\",\"name\":\"token\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"ERC20PaymentReleased\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"shares\",\"type\":\"uint256\"}],\"name\":\"PayeeAdded\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"PaymentReceived\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"PaymentReleased\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"Transfer\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"MAX_MINTS\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"approve\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"attrs\",\"outputs\":[{\"components\":[{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"},{\"internalType\":\"bool\",\"name\":\"revealed\",\"type\":\"bool\"},{\"internalType\":\"bool\",\"name\":\"special\",\"type\":\"bool\"},{\"internalType\":\"uint256\",\"name\":\"eyes\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"expression\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"skin\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"location\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"hair\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"tie\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"mouth\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"suit\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"pin\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"speciality\",\"type\":\"uint256\"}],\"internalType\":\"struct OnChainDonald.Don\",\"name\":\"\",\"type\":\"tuple\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"closeMint\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"getApproved\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"operator\",\"type\":\"address\"}],\"name\":\"isApprovedForAll\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"lock\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_quantity\",\"type\":\"uint256\"},{\"internalType\":\"bool\",\"name\":\"_special\",\"type\":\"bool\"}],\"name\":\"mint\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"name\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"numMinted\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"_value\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"ownerOf\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"index\",\"type\":\"uint256\"}],\"name\":\"payee\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address payable\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"release\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"contract IERC20\",\"name\":\"token\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"release\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"contract IERC20\",\"name\":\"token\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"released\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"released\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"components\":[{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"},{\"internalType\":\"bool\",\"name\":\"revealed\",\"type\":\"bool\"},{\"internalType\":\"bool\",\"name\":\"special\",\"type\":\"bool\"},{\"internalType\":\"uint256\",\"name\":\"eyes\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"expression\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"skin\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"location\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"hair\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"tie\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"mouth\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"suit\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"pin\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"speciality\",\"type\":\"uint256\"}],\"internalType\":\"struct OnChainDonald.Don\",\"name\":\"don\",\"type\":\"tuple\"},{\"internalType\":\"bool\",\"name\":\"transparent\",\"type\":\"bool\"}],\"name\":\"render\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_seed\",\"type\":\"uint256\"}],\"name\":\"reveal\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"safeTransferFrom\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"},{\"internalType\":\"bytes\",\"name\":\"_data\",\"type\":\"bytes\"}],\"name\":\"safeTransferFrom\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"operator\",\"type\":\"address\"},{\"internalType\":\"bool\",\"name\":\"approved\",\"type\":\"bool\"}],\"name\":\"setApprovalForAll\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"string\",\"name\":\"_description\",\"type\":\"string\"}],\"name\":\"setMeta\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"shares\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"startMint\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"state\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes4\",\"name\":\"interfaceId\",\"type\":\"bytes4\"}],\"name\":\"supportsInterface\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"symbol\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"index\",\"type\":\"uint256\"}],\"name\":\"tokenByIndex\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"index\",\"type\":\"uint256\"}],\"name\":\"tokenOfOwnerByIndex\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"tokenURI\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"contract IERC20\",\"name\":\"token\",\"type\":\"address\"}],\"name\":\"totalReleased\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalReleased\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalShares\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalSupply\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"transferFrom\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"whitelist\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address[]\",\"name\":\"_addresses\",\"type\":\"address[]\"}],\"name\":\"whitelistAddresses\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_quantity\",\"type\":\"uint256\"}],\"name\":\"whitelistMint\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"stateMutability\":\"payable\",\"type\":\"receive\"}]","ContractName":"OnChainDonald","CompilerVersion":"v0.8.11+commit.d7f03943","OptimizationUsed":"1","Runs":"200","ConstructorArguments":"000000000000000000000000000000000000000000000000000000000000004000000000000000000000000000000000000000000000000000000000000001200000000000000000000000000000000000000000000000000000000000000006000000000000000000000000eefbdae2b62f9a1639bcba81a7e76e84b2c6813b000000000000000000000000236ff0657e76e11ad981d08c358638de8ad778d60000000000000000000000001d42949af932ad94022d5546239616c9c6de06760000000000000000000000007d81af7a1c7d04aae4f1a4819865528017f1664b000000000000000000000000440bd23858e50918895171f24d4e142e5a1abe390000000000000000000000000c97e7502bc647e5aaeca08d569ee78475c9b8180000000000000000000000000000000000000000000000000000000000000006000000000000000000000000000000000000000000000000000000000000000500000000000000000000000000000000000000000000000000000000000000010000000000000000000000000000000000000000000000000000000000000001000000000000000000000000000000000000000000000000000000000000000100000000000000000000000000000000000000000000000000000000000000010000000000000000000000000000000000000000000000000000000000000001","EVMVersion":"Default","Library":"","LicenseType":"MIT","Proxy":"0","Implementation":"","SwarmSource":"ipfs://265a3b17db23bdd11919155598a99529d162dc098df495c9a3c2531d506e99e8"}]}