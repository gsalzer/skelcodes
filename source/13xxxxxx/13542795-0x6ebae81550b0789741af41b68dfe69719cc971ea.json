{"status":"1","message":"OK","result":[{"SourceCode":"pragma solidity ^0.7.4;\r\npragma experimental ABIEncoderV2;\r\nabstract contract Outbox {\r\n    struct OutboxEntry {\r\n        bytes32 root;\r\n        mapping(bytes32 => bool) spentOutput;\r\n    }\r\n    mapping(uint256 => OutboxEntry) public outboxEntries;\r\n    function executeTransaction(\r\n        uint256 batchNum,\r\n        bytes32[] calldata proof,\r\n        uint256 index,\r\n        address l2Sender,\r\n        address destAddr,\r\n        uint256 l2Block,\r\n        uint256 l1Block,\r\n        uint256 l2Timestamp,\r\n        uint256 amount,\r\n        bytes calldata calldataForL1\r\n    ) external virtual;\r\n    function calculateItemHash(\r\n        address l2Sender,\r\n        address destAddr,\r\n        uint256 l2Block,\r\n        uint256 l1Block,\r\n        uint256 l2Timestamp,\r\n        uint256 amount,\r\n        bytes calldata calldataForL1\r\n    ) public pure virtual returns (bytes32);\r\n    function calculateMerkleRoot(\r\n        bytes32[] memory proof,\r\n        uint256 path,\r\n        bytes32 item\r\n    ) public pure virtual returns (bytes32);\r\n    function outboxEntryExists(uint256 batchNum) public view virtual returns (bool);\r\n}\r\n\r\ncontract MultiClaim {\r\n    address constant outboxAddress = 0x760723CD2e632826c38Fef8CD438A4CC7E7E1A40;\r\n    address constant l2Sender = 0x4e352cF164E64ADCBad318C3a1e222E9EBa4Ce42;\r\n    address constant l1Dest = 0x4e352cF164E64ADCBad318C3a1e222E9EBa4Ce42;\r\n    uint256 constant amount = 0;\r\n    struct Param {\r\n        uint32 batchNum;\r\n        uint32 index;\r\n        uint32 l2Block;\r\n        uint32 l1Block;\r\n        uint32 l2Timestamp;\r\n        bytes32[] proof;\r\n        bytes calldataForL1;\r\n    }\r\n    \r\n    function multi(Param[] memory claims) public {\r\n        for (uint i = 0; i < claims.length; i++) {\r\n            Outbox(outboxAddress).executeTransaction(\r\n                claims[i].batchNum,\r\n                claims[i].proof,\r\n                claims[i].index,\r\n                l2Sender,\r\n                l1Dest,\r\n                claims[i].l2Block,\r\n                claims[i].l1Block,\r\n                claims[i].l2Timestamp,\r\n                amount,\r\n                claims[i].calldataForL1\r\n            );\r\n        }\r\n    }\r\n}","ABI":"[{\"inputs\":[{\"components\":[{\"internalType\":\"uint32\",\"name\":\"batchNum\",\"type\":\"uint32\"},{\"internalType\":\"uint32\",\"name\":\"index\",\"type\":\"uint32\"},{\"internalType\":\"uint32\",\"name\":\"l2Block\",\"type\":\"uint32\"},{\"internalType\":\"uint32\",\"name\":\"l1Block\",\"type\":\"uint32\"},{\"internalType\":\"uint32\",\"name\":\"l2Timestamp\",\"type\":\"uint32\"},{\"internalType\":\"bytes32[]\",\"name\":\"proof\",\"type\":\"bytes32[]\"},{\"internalType\":\"bytes\",\"name\":\"calldataForL1\",\"type\":\"bytes\"}],\"internalType\":\"struct MultiClaim.Param[]\",\"name\":\"claims\",\"type\":\"tuple[]\"}],\"name\":\"multi\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}]","ContractName":"MultiClaim","CompilerVersion":"v0.7.6+commit.7338295f","OptimizationUsed":"1","Runs":"1000","ConstructorArguments":"","EVMVersion":"Default","Library":"","LicenseType":"MIT","Proxy":"0","Implementation":"","SwarmSource":"ipfs://c52ef1f1bd897375947305d32bb83d7690c7df9c3460fc385762544a372c5590"}]}