{"status":"1","message":"OK","result":[{"SourceCode":"pragma solidity ^0.5.16;\r\n\r\n\r\n\r\n\r\n// Math operations with safety checks that throw on error\r\nlibrary SafeMath {\r\n    \r\n    function add(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        uint256 c = a + b;\r\n        require(c >= a);\r\n        return c;\r\n    }\r\n  \r\n    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        require(b <= a);\r\n        return a - b;\r\n    }\r\n    \r\n    function mul(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        if (a == 0) {\r\n            return 0;\r\n        }\r\n        uint256 c = a * b;\r\n        require(c / a == b);\r\n        return c;\r\n    }\r\n  \r\n    function div(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        uint256 c = a / b;\r\n        return c;\r\n    }\r\n    \r\n}\r\n\r\n\r\n// Abstract contract for the full ERC 20 Token standard\r\ncontract ERC20 {\r\n    \r\n    function balanceOf(address _address) public view returns (uint256 balance);\r\n    \r\n    function transfer(address _to, uint256 _value) public returns (bool success);\r\n    \r\n    function transferFrom(address _from, address _to, uint256 _value) public returns (bool success);\r\n    \r\n    function approve(address _spender, uint256 _value) public returns (bool success);\r\n    \r\n    function allowance(address _owner, address _spender) public view returns (uint256 remaining);\r\n\r\n\r\n    event Transfer(address indexed _from, address indexed _to, uint256 _value);\r\n    \r\n    event Approval(address indexed _owner, address indexed _spender, uint256 _value);\r\n    \r\n}\r\n\r\n\r\n\r\n\r\n// Token contract\r\ncontract Send {\r\n    // 交易\r\n    bytes4 private constant TRANSFER = bytes4(\r\n        keccak256(bytes(\"transfer(address,uint256)\"))\r\n    );\r\n    // 授权交易\r\n    bytes4 private constant TRANSFERFROM = bytes4(\r\n        keccak256(bytes(\"transferFrom(address,address,uint256)\"))\r\n    );\r\n    // 管理员\r\n    address public owner;\r\n    \r\n    // 构造函数;\r\n    constructor() public {\r\n        owner = msg.sender;\r\n    }\r\n    \r\n    // 管理员修饰符\r\n    modifier onlyOwner {\r\n        require(msg.sender == owner, \"You are not owner\");\r\n        _;\r\n    }\r\n    \r\n    // 设置新的管理员\r\n    function setOwner(address _owner) public onlyOwner returns (bool success) {\r\n        require(_owner != address(0), \"zero address\");\r\n        owner = _owner;\r\n        success = true;\r\n    }\r\n    \r\n    // 提取合约里面的币\r\n    // 参数1: Token地址\r\n    function fetch(ERC20 _erc20Address) public onlyOwner returns (bool success2) {\r\n        uint256 _value = _erc20Address.balanceOf(address(this));\r\n        (bool success, ) = address(_erc20Address).call(\r\n            abi.encodeWithSelector(TRANSFER, msg.sender, _value)\r\n        );\r\n        if(!success) {\r\n            revert(\"transfer fail\");\r\n        }\r\n        success2 = true;\r\n    }\r\n    \r\n    // 批量转代币, 从合约里面扣币, 一样的数量\r\n    // 参数1: Token地址\r\n    // 参数2: 接收者地址数组\r\n    // 参数3: 数量\r\n    function batchTranferEqually(address _tokenAddress, address[] memory _addresss, uint256 _value) public onlyOwner returns (bool success2) {\r\n        for(uint256 i = 0; i < _addresss.length; i++) {\r\n            (bool success, ) = _tokenAddress.call(\r\n                abi.encodeWithSelector(TRANSFER, _addresss[i], _value)\r\n            );\r\n            if(!success) {\r\n                revert(\"transfer fail\");\r\n                \r\n            }\r\n        }\r\n        success2 = true;\r\n    }\r\n    \r\n    // 批量转代币, 从发送者地址扣币, 一样的数量\r\n    // 参数1: Token地址\r\n    // 参数2: 接收者地址数组\r\n    // 参数3: 数量\r\n    function batchTranferFromEqually(address _tokenAddress, address[] memory _addresss, uint256 _value) public onlyOwner returns (bool success2) {\r\n        for(uint256 i = 0; i < _addresss.length; i++) {\r\n            (bool success, ) = _tokenAddress.call(\r\n                abi.encodeWithSelector(TRANSFERFROM, msg.sender, _addresss[i], _value)\r\n            );\r\n            if(!success) {\r\n                revert(\"transfer fail\");\r\n                \r\n            }\r\n        }\r\n        success2 = true;\r\n    }\r\n    \r\n    // 批量转代币, 从合约里面扣币, 不一样的数量\r\n    // 参数1: Token地址\r\n    // 参数2: 接收者地址数组\r\n    // 参数3: 数量\r\n    function batchTranferUnlike(address _tokenAddress, address[] memory _addresss, uint256[] memory _value) public onlyOwner returns (bool success2) {\r\n        require(_addresss.length == _value.length, \"length Unlike\");\r\n        for(uint256 i = 0; i < _addresss.length; i++) {\r\n            (bool success, ) = _tokenAddress.call(\r\n                abi.encodeWithSelector(TRANSFER, _addresss[i], _value[i])\r\n            );\r\n            if(!success) {\r\n                revert(\"transfer fail\");\r\n                \r\n            }\r\n        }\r\n        success2 = true;\r\n    }\r\n    \r\n    // 批量转代币, 从发送者地址扣币, 不一样的数量\r\n    // 参数1: Token地址\r\n    // 参数2: 接收者地址数组\r\n    // 参数3: 数量\r\n    function batchTranferFromUnlike(address _tokenAddress, address[] memory _addresss, uint256[] memory _value) public onlyOwner returns (bool success2) {\r\n        require(_addresss.length == _value.length, \"length Unlike\");\r\n        for(uint256 i = 0; i < _addresss.length; i++) {\r\n            (bool success, ) = _tokenAddress.call(\r\n                abi.encodeWithSelector(TRANSFERFROM, msg.sender, _addresss[i], _value[i])\r\n            );\r\n            if(!success) {\r\n                revert(\"transfer fail\");\r\n                \r\n            }\r\n        }\r\n        success2 = true;\r\n    }\r\n    \r\n    \r\n    \r\n}","ABI":"[{\"inputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"address\",\"name\":\"_tokenAddress\",\"type\":\"address\"},{\"internalType\":\"address[]\",\"name\":\"_addresss\",\"type\":\"address[]\"},{\"internalType\":\"uint256\",\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"batchTranferEqually\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"success2\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"address\",\"name\":\"_tokenAddress\",\"type\":\"address\"},{\"internalType\":\"address[]\",\"name\":\"_addresss\",\"type\":\"address[]\"},{\"internalType\":\"uint256\",\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"batchTranferFromEqually\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"success2\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"address\",\"name\":\"_tokenAddress\",\"type\":\"address\"},{\"internalType\":\"address[]\",\"name\":\"_addresss\",\"type\":\"address[]\"},{\"internalType\":\"uint256[]\",\"name\":\"_value\",\"type\":\"uint256[]\"}],\"name\":\"batchTranferFromUnlike\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"success2\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"address\",\"name\":\"_tokenAddress\",\"type\":\"address\"},{\"internalType\":\"address[]\",\"name\":\"_addresss\",\"type\":\"address[]\"},{\"internalType\":\"uint256[]\",\"name\":\"_value\",\"type\":\"uint256[]\"}],\"name\":\"batchTranferUnlike\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"success2\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"contract ERC20\",\"name\":\"_erc20Address\",\"type\":\"address\"}],\"name\":\"fetch\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"success2\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"address\",\"name\":\"_owner\",\"type\":\"address\"}],\"name\":\"setOwner\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"success\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"}]","ContractName":"Send","CompilerVersion":"v0.5.17+commit.d19bba13","OptimizationUsed":"0","Runs":"200","ConstructorArguments":"","EVMVersion":"Default","Library":"","LicenseType":"None","Proxy":"0","Implementation":"","SwarmSource":"bzzr://3e9e54ccb2aa997e11be1474b2514803985679107672cf7d8bbf65bf2f760758"}]}