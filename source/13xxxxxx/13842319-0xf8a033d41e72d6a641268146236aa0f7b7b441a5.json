{"status":"1","message":"OK","result":[{"SourceCode":"{{\r\n  \"language\": \"Solidity\",\r\n  \"sources\": {\r\n    \"contracts/Kingdom.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT LICENSE\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"@openzeppelin/contracts/access/Ownable.sol\\\";\\nimport \\\"@openzeppelin/contracts/token/ERC721/IERC721Receiver.sol\\\";\\nimport \\\"@openzeppelin/contracts/security/ReentrancyGuard.sol\\\";\\nimport \\\"@openzeppelin/contracts/security/Pausable.sol\\\";\\nimport \\\"./interfaces/IHNDGame.sol\\\";\\nimport \\\"./interfaces/IHND.sol\\\";\\nimport \\\"./interfaces/IEXP.sol\\\";\\nimport \\\"./interfaces/IKingdom.sol\\\";\\n\\ncontract Kingdom is IKingdom, Ownable, ReentrancyGuard, IERC721Receiver, Pausable {\\n  \\n  // maximum rank for a Hero/Demon\\n  uint8 public constant MAX_RANK = 8;\\n\\n  // struct to store a stake's token, owner, and earning values\\n  struct Stake {\\n    uint16 tokenId;\\n    uint80 value;\\n    address owner;\\n  }\\n\\n  uint256 private totalRankStaked;\\n  uint256 private numHeroesStaked;\\n\\n  event TokenStaked(address indexed owner, uint256 indexed tokenId, bool indexed isHero, uint256 value);\\n  event HeroClaimed(uint256 indexed tokenId, bool indexed unstaked, uint256 earned);\\n  event DemonClaimed(uint256 indexed tokenId, bool indexed unstaked, uint256 earned);\\n\\n  // reference to the HND NFT contract\\n  IHND public HNDNFT;\\n  // reference to the HND NFT contract\\n  IHNDGame public HNDGame;\\n  // reference to the $EXP contract for minting $EXP earnings\\n  IEXP public expToken;\\n\\n  // maps tokenId to stake\\n  mapping(uint256 => Stake) private kingdom; \\n  // maps rank to all Demon staked with that rank\\n  mapping(uint256 => Stake[]) private army; \\n  // tracks location of each Demon in Army\\n  mapping(uint256 => uint256) private armyIndices; \\n  // any rewards distributed when no demons are staked\\n  mapping(address => uint256[]) public stakedTokenOwners;\\n  //holds mapping of their position in stakedTokenOwners\\n  mapping(uint256 => uint256) private stakedTokenIndex;\\n\\n  uint256 private unaccountedRewards = 0; \\n  // amount of $EXP due for each rank point staked\\n  uint256 private expPerRank = 0; \\n\\n  // heroes earn 10000 $EXP per day\\n  uint256 public constant DAILY_EXP_RATE = 10000 ether;\\n  // heroes must have 2 days worth of $EXP to unstake or else they're still guarding the Kingdom\\n  uint256 public constant MINIMUM_TO_EXIT = 2 days;\\n  // demons take a 20% tax on all $EXP claimed\\n  uint256 public constant EXP_CLAIM_TAX_PERCENTAGE = 20;\\n\\n  // when heroes are leaving demons have 50% chance to take 50% of their earned $EXP instead of 20%\\n  uint256 public constant EXP_STOLEN_DENOMINATOR = 2;\\n\\n  // 10,000,000,000  $EXP used and cycled through during combat\\n  uint256 public constant MAXIMUM_GLOBAL_EXP = 10000000000 ether;\\n  \\n  // $EXP that has been dispensed from the faucet during combat\\n  uint256 public expFromFaucet;\\n  // the last time $EXP was claimed\\n  uint256 private lastClaimTimestamp;\\n\\n  // emergency rescue to allow unstaking without any checks but without $EXP\\n  bool public rescueEnabled = false;\\n\\n  mapping(address => bool) private admins;\\n\\n  /**\\n   */\\n  constructor() {\\n    _pause();\\n  }\\n\\n  /** CRITICAL TO SETUP */\\n\\n  modifier requireContractsSet() {\\n      require(address(HNDNFT) != address(0) && address(expToken) != address(0) \\n        && address(HNDGame) != address(0), \\\"Contracts not set\\\");\\n      _;\\n  }\\n\\n  function setContracts(address _HNDNFT, address _exp, address _HNDGame) external onlyOwner {\\n    HNDNFT = IHND(_HNDNFT);\\n    expToken = IEXP(_exp);\\n    HNDGame = IHNDGame(_HNDGame);\\n  }\\n\\n  /** STAKING */\\n\\n  /**\\n   * adds Heros and Demons to the Kingdom and Army\\n   * @param account the address of the staker\\n   * @param tokenIds the IDs of the Heros and Demons to stake\\n   */\\n  function addManyToKingdom(address account, uint16[] calldata tokenIds) external override nonReentrant {\\n    require(tx.origin == _msgSender() || _msgSender() == address(HNDGame), \\\"Only EOA\\\");\\n    require(account == tx.origin, \\\"account to sender mismatch\\\");\\n    for (uint i = 0; i < tokenIds.length; i++) {\\n      if (_msgSender() != address(HNDGame)) { // dont do this step if its a mint + stake\\n        require(HNDNFT.ownerOf(tokenIds[i]) == _msgSender(), \\\"You don't own this token\\\");\\n        HNDNFT.transferFrom(_msgSender(), address(this), tokenIds[i]);\\n      } else if (tokenIds[i] == 0) {\\n        continue; // there may be gaps in the array for stolen tokens\\n      }\\n\\n      if (HNDNFT.isHero(tokenIds[i])) \\n        _addHeroToKingdom(account, tokenIds[i]);\\n      else \\n        _addDemonToArmy(account, tokenIds[i]);\\n    }\\n  }\\n\\n  /**\\n   * adds a single Hero to the Kingdom\\n   * @param account the address of the staker\\n   * @param tokenId the ID of the Hero to add to the Kingdom\\n   */\\n  function _addHeroToKingdom(address account, uint256 tokenId) internal whenNotPaused _updateEarnings {\\n    kingdom[tokenId] = Stake({\\n      owner: account,\\n      tokenId: uint16(tokenId),\\n      value: uint80(block.timestamp)\\n    });\\n    stakedTokenIndex[tokenId] = stakedTokenOwners[account].length;\\n    stakedTokenOwners[account].push(tokenId);\\n    numHeroesStaked += 1;\\n    emit TokenStaked(account, tokenId, true, block.timestamp);\\n  }\\n\\n  /**\\n   * adds a single Demon to the Army\\n   * @param account the address of the staker\\n   * @param tokenId the ID of the Demon to add to the Army\\n   */\\n  function _addDemonToArmy(address account, uint256 tokenId) internal {\\n    uint8 rank = _rankForDemon(tokenId);\\n    totalRankStaked += rank; // Portion of earnings ranges from 8 to 5\\n    armyIndices[tokenId] = army[rank].length; // Store the location of the demon in the Army\\n    army[rank].push(Stake({\\n      owner: account,\\n      tokenId: uint16(tokenId),\\n      value: uint80(expPerRank)\\n    })); // Add the demon to the Army\\n    stakedTokenIndex[tokenId] = stakedTokenOwners[account].length;\\n    stakedTokenOwners[account].push(tokenId);\\n    emit TokenStaked(account, tokenId, false, expPerRank);\\n  }\\n\\n  /** CLAIMING / UNSTAKING */\\n\\n  /**\\n   * realize $EXP earnings and optionally unstake tokens from the Kingdom\\n   * to unstake a Hero it will require it has 2 days worth of $EXP unclaimed\\n   * @param tokenIds the IDs of the tokens to claim earnings from\\n   * @param unstake whether or not to unstake ALL of the tokens listed in tokenIds\\n   */\\n  function claimManyFromKingdom(uint16[] calldata tokenIds, bool unstake) external whenNotPaused _updateEarnings nonReentrant {\\n    require(tx.origin == _msgSender() || _msgSender() == address(HNDGame), \\\"Only EOA\\\");\\n    uint256 owed = 0;\\n    for (uint i = 0; i < tokenIds.length; i++) {\\n      if (HNDNFT.isHero(tokenIds[i])) {\\n        owed += _claimHeroFromKingdom(tokenIds[i], unstake);\\n      }\\n      else {\\n        owed += _claimDemonFromArmy(tokenIds[i], unstake);\\n      }\\n    }\\n    expToken.updateOriginAccess();\\n    if (owed == 0) {\\n      return;\\n    }\\n\\n    expToken.mint(_msgSender(), owed);\\n  }\\n\\n  function calculateRewards(uint256 tokenId) external view returns (uint256 owed) {\\n    uint64 lastTokenWrite = HNDNFT.getTokenWriteBlock(tokenId);\\n    // Must check this, as getTokenTraits will be allowed since this contract is an admin\\n    require(lastTokenWrite < block.number, \\\"hmmmm what doing?\\\");\\n    Stake memory stake = kingdom[tokenId];\\n    if(HNDNFT.isHero(tokenId)) {\\n      if (expFromFaucet < MAXIMUM_GLOBAL_EXP) {\\n        owed = (block.timestamp - stake.value) * DAILY_EXP_RATE / 1 days;\\n      } else if (stake.value > lastClaimTimestamp) {\\n        owed = 0; // $EXP production stopped already\\n      } else {\\n        owed = (lastClaimTimestamp - stake.value) * DAILY_EXP_RATE / 1 days; // stop earning additional $EXP if it's all been earned\\n      }\\n    }\\n    else {\\n      uint8 rank = _rankForDemon(tokenId);\\n      owed = (rank) * (expPerRank - stake.value); // Calculate portion of tokens based on Rank\\n    }\\n  }\\n\\n  /**\\n   * realize $EXP earnings for a single Hero and optionally unstake it\\n   * if not unstaking, pay a 20% tax to the staked Demons\\n   * if unstaking, there is a 50% chance all $EXP is stolen\\n   * @param tokenId the ID of the Heros to claim earnings from\\n   * @param unstake whether or not to unstake the Heros\\n   * @return owed - the amount of $EXP earned\\n   */\\n  function _claimHeroFromKingdom(uint256 tokenId, bool unstake) internal returns (uint256 owed) {\\n    require(HNDNFT.ownerOf(tokenId) == address(this), \\\"Kingdom: Claiming unstaked hero!\\\");\\n    Stake memory stake = kingdom[tokenId];\\n    require(stake.owner == _msgSender(), \\\"Kingdom: Claiming unowned hero!\\\");\\n    require(!(unstake && block.timestamp - stake.value < MINIMUM_TO_EXIT), \\\"Kingdom: Hero is still guarding!\\\");\\n    if (expFromFaucet < MAXIMUM_GLOBAL_EXP) {\\n      owed = (block.timestamp - stake.value) * DAILY_EXP_RATE / 1 days;\\n    } else if (stake.value > lastClaimTimestamp) {\\n      owed = 0; // $EXP production stopped already\\n    } else {\\n      owed = (lastClaimTimestamp - stake.value) * DAILY_EXP_RATE / 1 days; // stop earning additional $EXP if it's all been earned\\n    }\\n    if (unstake) {\\n      // 50% chance of half $EXP being stolen\\n      if (uint256(keccak256(abi.encode(blockhash(block.number-1), _msgSender(), tokenId))) % 2 == 1) { \\n\\n        //steal half of $EXP accumulated\\n        _payDemonTax(owed/EXP_STOLEN_DENOMINATOR); \\n\\n        // keep half the $EXP\\n        owed = (owed/EXP_STOLEN_DENOMINATOR);\\n      }\\n      delete kingdom[tokenId];\\n      delete stakedTokenOwners[_msgSender()][stakedTokenIndex[tokenId]];\\n      stakedTokenIndex[tokenId] = 0;\\n      numHeroesStaked -= 1;\\n      \\n      HNDNFT.safeTransferFrom(address(this), _msgSender(), tokenId, \\\"\\\"); // send back Hero\\n    } else {\\n      _payDemonTax(owed * EXP_CLAIM_TAX_PERCENTAGE / 100); // percentage tax to staked demons\\n      \\n      // send leftover\\n      owed = owed * (100 - EXP_CLAIM_TAX_PERCENTAGE) / 100; // remainder goes to Hero owner\\n      \\n      // reset their stake\\n      kingdom[tokenId] = Stake({\\n        owner: _msgSender(),\\n        tokenId: uint16(tokenId),\\n        value: uint80(block.timestamp)\\n      }); \\n    }\\n    emit HeroClaimed(tokenId, unstake, owed);\\n  }\\n\\n  /**\\n   * realize $EXP earnings for a single Demon and optionally unstake it\\n   * Demons earn $EXP proportional to their rank\\n   * @param tokenId the ID of the Demon to claim earnings from\\n   * @param unstake whether or not to unstake the Demon\\n   * @return  owed  the amount of $EXP earned\\n   */\\n  function _claimDemonFromArmy(uint256 tokenId, bool unstake) internal returns (uint256 owed) {\\n    require(HNDNFT.ownerOf(tokenId) == address(this), \\\"Kingdom: Claiming unstaked demon!\\\");\\n    uint8 rank = _rankForDemon(tokenId);\\n    Stake memory stake = army[rank][armyIndices[tokenId]];\\n    require(stake.owner == _msgSender(), \\\"Kingdom: Claiming unowned demon!\\\");\\n    owed = (rank) * (expPerRank - stake.value); // Calculate portion of tokens based on Rank\\n    if (unstake) {\\n      totalRankStaked -= rank; // Remove rank from total staked\\n      Stake memory lastStake = army[rank][army[rank].length - 1];\\n      army[rank][armyIndices[tokenId]] = lastStake; // Shuffle last Demon to current position\\n      armyIndices[lastStake.tokenId] = armyIndices[tokenId];\\n      army[rank].pop(); // Remove duplicate\\n      delete armyIndices[tokenId]; // Delete old mapping\\n      delete stakedTokenOwners[_msgSender()][stakedTokenIndex[tokenId]];\\n      stakedTokenIndex[tokenId] = 0;\\n      // Always remove last to guard against reentrance\\n      HNDNFT.safeTransferFrom(address(this), _msgSender(), tokenId, \\\"\\\"); // Send back Demon\\n    } else {\\n\\n      // we reset their stake\\n      army[rank][armyIndices[tokenId]] = Stake({\\n        owner: _msgSender(),\\n        tokenId: uint16(tokenId),\\n        value: uint80(expPerRank)\\n      });\\n    }\\n    emit DemonClaimed(tokenId, unstake, owed);\\n  }\\n  /**\\n   * emergency unstake tokens\\n   * @param tokenIds the IDs of the tokens to claim earnings from\\n   */\\n  function rescue(uint256[] calldata tokenIds) external nonReentrant {\\n    require(rescueEnabled, \\\"RESCUE DISABLED\\\");\\n    uint256 tokenId;\\n    Stake memory stake;\\n    Stake memory lastStake;\\n    uint8 rank;\\n    for (uint i = 0; i < tokenIds.length; i++) {\\n      tokenId = tokenIds[i];\\n      if (HNDNFT.isHero(tokenId)) {\\n        stake = kingdom[tokenId];\\n        require(stake.owner == _msgSender(), \\\"must own token\\\");\\n        delete kingdom[tokenId];\\n        numHeroesStaked -= 1;\\n        HNDNFT.safeTransferFrom(address(this), _msgSender(), tokenId, \\\"\\\"); // send back Heros\\n        emit HeroClaimed(tokenId, true, 0);\\n      } else {\\n        rank = _rankForDemon(tokenId);\\n        stake = army[rank][armyIndices[tokenId]];\\n        require(stake.owner == _msgSender(), \\\"must own token\\\");\\n        totalRankStaked -= rank; // Remove Rank from total staked\\n        lastStake = army[rank][army[rank].length - 1];\\n        army[rank][armyIndices[tokenId]] = lastStake; // Shuffle last Demon to current position\\n        armyIndices[lastStake.tokenId] = armyIndices[tokenId];\\n        army[rank].pop(); // Remove duplicate\\n        delete armyIndices[tokenId]; // Delete old mapping\\n        HNDNFT.safeTransferFrom(address(this), _msgSender(), tokenId, \\\"\\\"); // Send back Demon\\n        emit DemonClaimed(tokenId, true, 0);\\n      }\\n    }\\n  }\\n\\n  /** ACCOUNTING */\\n\\n  /** \\n   * add $EXP to claimable pot for the Army\\n   * @param amount $EXP to add to the pot\\n   */\\n  function _payDemonTax(uint256 amount) internal {\\n    if (totalRankStaked == 0) { // if there's no staked demons\\n      unaccountedRewards += amount; // keep track of $EXP due to demons\\n      return;\\n    }\\n    // makes sure to include any unaccounted $EXP \\n    expPerRank += (amount + unaccountedRewards) / totalRankStaked;\\n    unaccountedRewards = 0;\\n  }\\n\\n    /** \\n   * add $EXP to claimable pot for the Army\\n   * @param amount $EXP to add to the pot\\n   */\\n  function recycleExp(uint256 amount) override external {\\n    require(owner() == _msgSender() || admins[_msgSender()], \\\"Only admins can call this\\\");\\n    expFromFaucet -= amount;\\n  }\\n\\n  /**\\n   * tracks $EXP earnings to ensure it stops once 10 billion is eclipsed\\n   */\\n  modifier _updateEarnings() {\\n    if (expFromFaucet < MAXIMUM_GLOBAL_EXP) {\\n      expFromFaucet += \\n        (block.timestamp - lastClaimTimestamp)\\n        * numHeroesStaked\\n        * DAILY_EXP_RATE / 1 days; \\n      lastClaimTimestamp = block.timestamp;\\n    }\\n    _;\\n  }\\n\\n  /** ADMIN */\\n\\n  /**\\n   * allows owner to enable \\\"rescue mode\\\"\\n   * simplifies accounting, prioritizes tokens out in emergency\\n   */\\n  function setRescueEnabled(bool _enabled) external onlyOwner {\\n    rescueEnabled = _enabled;\\n  }\\n\\n  /**\\n   * enables owner to pause / unpause contract\\n   */\\n  function setPaused(bool _paused) external requireContractsSet onlyOwner {\\n    if (_paused) _pause();\\n    else _unpause();\\n  }\\n\\n  /** READ ONLY */\\n\\n  /**\\n   * gets the rank score for a Demon\\n   * @param tokenId the ID of the Demon to get the rank score for\\n   * @return the rank score of the Demon (5-8)\\n   */\\n  function _rankForDemon(uint256 tokenId) internal view returns (uint8) {\\n    IHND.HeroDemon memory s = HNDNFT.getTokenTraits(tokenId);\\n    return MAX_RANK - s.rankIndex; // rank index is 0-3\\n  }\\n\\n  /**\\n   * chooses a random Demon thief when a newly minted token is stolen\\n   * @param seed a random value to choose a Demon from\\n   * @return the owner of the randomly selected Demon thief\\n   */\\n  function randomDemonOwner(uint256 seed) external view override returns (address) {\\n    if (totalRankStaked == 0) {\\n      return address(0x0);\\n    }\\n    uint256 bucket = (seed & 0xFFFFFFFF) % totalRankStaked; // choose a value from 0 to total rank staked\\n    uint256 cumulative;\\n    seed >>= 32;\\n    // loop through each bucket of Demons with the same rank score\\n    for (uint i = MAX_RANK - 3; i <= MAX_RANK; i++) {\\n      cumulative += army[i].length * i;\\n      // if the value is not inside of that bucket, keep going\\n      if (bucket >= cumulative) continue;\\n      // get the address of a random Demon with that rank score\\n      return army[i][seed % army[i].length].owner;\\n    }\\n    return address(0x0);\\n  }\\n\\n  function onERC721Received(\\n        address,\\n        address from,\\n        uint256,\\n        bytes calldata\\n    ) external pure override returns (bytes4) {\\n      require(from == address(0x0), \\\"Cannot send to Kingdom directly\\\");\\n      return IERC721Receiver.onERC721Received.selector;\\n    }\\n\\n  /**\\n  * enables an address to mint / burn\\n  * @param addr the address to enable\\n  */\\n  function addAdmin(address addr) external onlyOwner {\\n      admins[addr] = true;\\n  }\\n\\n  /**\\n  * disables an address from minting / burning\\n  * @param addr the address to disbale\\n  */\\n  function removeAdmin(address addr) external onlyOwner {\\n      admins[addr] = false;\\n  }\\n  \\n  }\\n\\n\"\r\n    },\r\n    \"contracts/interfaces/IKingdom.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT LICENSE \\n\\npragma solidity ^0.8.0;\\n\\ninterface IKingdom {\\n  function addManyToKingdom(address account, uint16[] calldata tokenIds) external;\\n  function randomDemonOwner(uint256 seed) external view returns (address);\\n  function recycleExp(uint256 amount) external;\\n}\"\r\n    },\r\n    \"contracts/interfaces/IEXP.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT LICENSE\\n\\npragma solidity ^0.8.0;\\n\\ninterface IEXP {\\n    function mint(address to, uint256 amount) external;\\n    function burn(address from, uint256 amount) external;\\n    function updateOriginAccess() external;\\n    function transferFrom(address sender, address recipient, uint256 amount) external returns (bool);\\n}\"\r\n    },\r\n    \"contracts/interfaces/IHND.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT LICENSE\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"@openzeppelin/contracts/token/ERC721/extensions/IERC721Enumerable.sol\\\";\\n\\ninterface IHND is IERC721Enumerable {\\n\\n    // game data storage\\n    struct HeroDemon {\\n        bool isHero;\\n        bool isFemale;\\n        uint8 body;\\n        uint8 face;\\n        uint8 eyes;\\n        uint8 headpiecehorns;\\n        uint8 gloves;\\n        uint8 armor;\\n        uint8 weapon;\\n        uint8 shield;\\n        uint8 shoes;\\n        uint8 tailflame;\\n        uint8 rankIndex;\\n    }\\n\\n    function minted() external returns (uint16);\\n    function updateOriginAccess(uint16[] memory tokenIds) external;\\n    function mint(address recipient, uint256 seed) external;\\n    function burn(uint256 tokenId) external;\\n    function getMaxTokens() external view returns (uint256);\\n    function getPaidTokens() external view returns (uint256);\\n    function getTokenTraits(uint256 tokenId) external view returns (HeroDemon memory);\\n    function getTokenWriteBlock(uint256 tokenId) external view returns(uint64);\\n    function isHero(uint256 tokenId) external view returns(bool);\\n  \\n}\"\r\n    },\r\n    \"contracts/interfaces/IHNDGame.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT LICENSE\\n\\npragma solidity ^0.8.0;\\n\\ninterface IHNDGame {\\n  \\n}\"\r\n    },\r\n    \"@openzeppelin/contracts/security/Pausable.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (security/Pausable.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../utils/Context.sol\\\";\\n\\n/**\\n * @dev Contract module which allows children to implement an emergency stop\\n * mechanism that can be triggered by an authorized account.\\n *\\n * This module is used through inheritance. It will make available the\\n * modifiers `whenNotPaused` and `whenPaused`, which can be applied to\\n * the functions of your contract. Note that they will not be pausable by\\n * simply including this module, only once the modifiers are put in place.\\n */\\nabstract contract Pausable is Context {\\n    /**\\n     * @dev Emitted when the pause is triggered by `account`.\\n     */\\n    event Paused(address account);\\n\\n    /**\\n     * @dev Emitted when the pause is lifted by `account`.\\n     */\\n    event Unpaused(address account);\\n\\n    bool private _paused;\\n\\n    /**\\n     * @dev Initializes the contract in unpaused state.\\n     */\\n    constructor() {\\n        _paused = false;\\n    }\\n\\n    /**\\n     * @dev Returns true if the contract is paused, and false otherwise.\\n     */\\n    function paused() public view virtual returns (bool) {\\n        return _paused;\\n    }\\n\\n    /**\\n     * @dev Modifier to make a function callable only when the contract is not paused.\\n     *\\n     * Requirements:\\n     *\\n     * - The contract must not be paused.\\n     */\\n    modifier whenNotPaused() {\\n        require(!paused(), \\\"Pausable: paused\\\");\\n        _;\\n    }\\n\\n    /**\\n     * @dev Modifier to make a function callable only when the contract is paused.\\n     *\\n     * Requirements:\\n     *\\n     * - The contract must be paused.\\n     */\\n    modifier whenPaused() {\\n        require(paused(), \\\"Pausable: not paused\\\");\\n        _;\\n    }\\n\\n    /**\\n     * @dev Triggers stopped state.\\n     *\\n     * Requirements:\\n     *\\n     * - The contract must not be paused.\\n     */\\n    function _pause() internal virtual whenNotPaused {\\n        _paused = true;\\n        emit Paused(_msgSender());\\n    }\\n\\n    /**\\n     * @dev Returns to normal state.\\n     *\\n     * Requirements:\\n     *\\n     * - The contract must be paused.\\n     */\\n    function _unpause() internal virtual whenPaused {\\n        _paused = false;\\n        emit Unpaused(_msgSender());\\n    }\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/security/ReentrancyGuard.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (security/ReentrancyGuard.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Contract module that helps prevent reentrant calls to a function.\\n *\\n * Inheriting from `ReentrancyGuard` will make the {nonReentrant} modifier\\n * available, which can be applied to functions to make sure there are no nested\\n * (reentrant) calls to them.\\n *\\n * Note that because there is a single `nonReentrant` guard, functions marked as\\n * `nonReentrant` may not call one another. This can be worked around by making\\n * those functions `private`, and then adding `external` `nonReentrant` entry\\n * points to them.\\n *\\n * TIP: If you would like to learn more about reentrancy and alternative ways\\n * to protect against it, check out our blog post\\n * https://blog.openzeppelin.com/reentrancy-after-istanbul/[Reentrancy After Istanbul].\\n */\\nabstract contract ReentrancyGuard {\\n    // Booleans are more expensive than uint256 or any type that takes up a full\\n    // word because each write operation emits an extra SLOAD to first read the\\n    // slot's contents, replace the bits taken up by the boolean, and then write\\n    // back. This is the compiler's defense against contract upgrades and\\n    // pointer aliasing, and it cannot be disabled.\\n\\n    // The values being non-zero value makes deployment a bit more expensive,\\n    // but in exchange the refund on every call to nonReentrant will be lower in\\n    // amount. Since refunds are capped to a percentage of the total\\n    // transaction's gas, it is best to keep them low in cases like this one, to\\n    // increase the likelihood of the full refund coming into effect.\\n    uint256 private constant _NOT_ENTERED = 1;\\n    uint256 private constant _ENTERED = 2;\\n\\n    uint256 private _status;\\n\\n    constructor() {\\n        _status = _NOT_ENTERED;\\n    }\\n\\n    /**\\n     * @dev Prevents a contract from calling itself, directly or indirectly.\\n     * Calling a `nonReentrant` function from another `nonReentrant`\\n     * function is not supported. It is possible to prevent this from happening\\n     * by making the `nonReentrant` function external, and making it call a\\n     * `private` function that does the actual work.\\n     */\\n    modifier nonReentrant() {\\n        // On the first call to nonReentrant, _notEntered will be true\\n        require(_status != _ENTERED, \\\"ReentrancyGuard: reentrant call\\\");\\n\\n        // Any calls to nonReentrant after this point will fail\\n        _status = _ENTERED;\\n\\n        _;\\n\\n        // By storing the original value once again, a refund is triggered (see\\n        // https://eips.ethereum.org/EIPS/eip-2200)\\n        _status = _NOT_ENTERED;\\n    }\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/token/ERC721/IERC721Receiver.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (token/ERC721/IERC721Receiver.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @title ERC721 token receiver interface\\n * @dev Interface for any contract that wants to support safeTransfers\\n * from ERC721 asset contracts.\\n */\\ninterface IERC721Receiver {\\n    /**\\n     * @dev Whenever an {IERC721} `tokenId` token is transferred to this contract via {IERC721-safeTransferFrom}\\n     * by `operator` from `from`, this function is called.\\n     *\\n     * It must return its Solidity selector to confirm the token transfer.\\n     * If any other value is returned or the interface is not implemented by the recipient, the transfer will be reverted.\\n     *\\n     * The selector can be obtained in Solidity with `IERC721.onERC721Received.selector`.\\n     */\\n    function onERC721Received(\\n        address operator,\\n        address from,\\n        uint256 tokenId,\\n        bytes calldata data\\n    ) external returns (bytes4);\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/access/Ownable.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (access/Ownable.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../utils/Context.sol\\\";\\n\\n/**\\n * @dev Contract module which provides a basic access control mechanism, where\\n * there is an account (an owner) that can be granted exclusive access to\\n * specific functions.\\n *\\n * By default, the owner account will be the one that deploys the contract. This\\n * can later be changed with {transferOwnership}.\\n *\\n * This module is used through inheritance. It will make available the modifier\\n * `onlyOwner`, which can be applied to your functions to restrict their use to\\n * the owner.\\n */\\nabstract contract Ownable is Context {\\n    address private _owner;\\n\\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\\n\\n    /**\\n     * @dev Initializes the contract setting the deployer as the initial owner.\\n     */\\n    constructor() {\\n        _transferOwnership(_msgSender());\\n    }\\n\\n    /**\\n     * @dev Returns the address of the current owner.\\n     */\\n    function owner() public view virtual returns (address) {\\n        return _owner;\\n    }\\n\\n    /**\\n     * @dev Throws if called by any account other than the owner.\\n     */\\n    modifier onlyOwner() {\\n        require(owner() == _msgSender(), \\\"Ownable: caller is not the owner\\\");\\n        _;\\n    }\\n\\n    /**\\n     * @dev Leaves the contract without owner. It will not be possible to call\\n     * `onlyOwner` functions anymore. Can only be called by the current owner.\\n     *\\n     * NOTE: Renouncing ownership will leave the contract without an owner,\\n     * thereby removing any functionality that is only available to the owner.\\n     */\\n    function renounceOwnership() public virtual onlyOwner {\\n        _transferOwnership(address(0));\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Can only be called by the current owner.\\n     */\\n    function transferOwnership(address newOwner) public virtual onlyOwner {\\n        require(newOwner != address(0), \\\"Ownable: new owner is the zero address\\\");\\n        _transferOwnership(newOwner);\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Internal function without access restriction.\\n     */\\n    function _transferOwnership(address newOwner) internal virtual {\\n        address oldOwner = _owner;\\n        _owner = newOwner;\\n        emit OwnershipTransferred(oldOwner, newOwner);\\n    }\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/token/ERC721/extensions/IERC721Enumerable.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (token/ERC721/extensions/IERC721Enumerable.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../IERC721.sol\\\";\\n\\n/**\\n * @title ERC-721 Non-Fungible Token Standard, optional enumeration extension\\n * @dev See https://eips.ethereum.org/EIPS/eip-721\\n */\\ninterface IERC721Enumerable is IERC721 {\\n    /**\\n     * @dev Returns the total amount of tokens stored by the contract.\\n     */\\n    function totalSupply() external view returns (uint256);\\n\\n    /**\\n     * @dev Returns a token ID owned by `owner` at a given `index` of its token list.\\n     * Use along with {balanceOf} to enumerate all of ``owner``'s tokens.\\n     */\\n    function tokenOfOwnerByIndex(address owner, uint256 index) external view returns (uint256 tokenId);\\n\\n    /**\\n     * @dev Returns a token ID at a given `index` of all the tokens stored by the contract.\\n     * Use along with {totalSupply} to enumerate all tokens.\\n     */\\n    function tokenByIndex(uint256 index) external view returns (uint256);\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/utils/Context.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/Context.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Provides information about the current execution context, including the\\n * sender of the transaction and its data. While these are generally available\\n * via msg.sender and msg.data, they should not be accessed in such a direct\\n * manner, since when dealing with meta-transactions the account sending and\\n * paying for execution may not be the actual sender (as far as an application\\n * is concerned).\\n *\\n * This contract is only required for intermediate, library-like contracts.\\n */\\nabstract contract Context {\\n    function _msgSender() internal view virtual returns (address) {\\n        return msg.sender;\\n    }\\n\\n    function _msgData() internal view virtual returns (bytes calldata) {\\n        return msg.data;\\n    }\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/token/ERC721/IERC721.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (token/ERC721/IERC721.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../../utils/introspection/IERC165.sol\\\";\\n\\n/**\\n * @dev Required interface of an ERC721 compliant contract.\\n */\\ninterface IERC721 is IERC165 {\\n    /**\\n     * @dev Emitted when `tokenId` token is transferred from `from` to `to`.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 indexed tokenId);\\n\\n    /**\\n     * @dev Emitted when `owner` enables `approved` to manage the `tokenId` token.\\n     */\\n    event Approval(address indexed owner, address indexed approved, uint256 indexed tokenId);\\n\\n    /**\\n     * @dev Emitted when `owner` enables or disables (`approved`) `operator` to manage all of its assets.\\n     */\\n    event ApprovalForAll(address indexed owner, address indexed operator, bool approved);\\n\\n    /**\\n     * @dev Returns the number of tokens in ``owner``'s account.\\n     */\\n    function balanceOf(address owner) external view returns (uint256 balance);\\n\\n    /**\\n     * @dev Returns the owner of the `tokenId` token.\\n     *\\n     * Requirements:\\n     *\\n     * - `tokenId` must exist.\\n     */\\n    function ownerOf(uint256 tokenId) external view returns (address owner);\\n\\n    /**\\n     * @dev Safely transfers `tokenId` token from `from` to `to`, checking first that contract recipients\\n     * are aware of the ERC721 protocol to prevent tokens from being forever locked.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` cannot be the zero address.\\n     * - `to` cannot be the zero address.\\n     * - `tokenId` token must exist and be owned by `from`.\\n     * - If the caller is not `from`, it must be have been allowed to move this token by either {approve} or {setApprovalForAll}.\\n     * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function safeTransferFrom(\\n        address from,\\n        address to,\\n        uint256 tokenId\\n    ) external;\\n\\n    /**\\n     * @dev Transfers `tokenId` token from `from` to `to`.\\n     *\\n     * WARNING: Usage of this method is discouraged, use {safeTransferFrom} whenever possible.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` cannot be the zero address.\\n     * - `to` cannot be the zero address.\\n     * - `tokenId` token must be owned by `from`.\\n     * - If the caller is not `from`, it must be approved to move this token by either {approve} or {setApprovalForAll}.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(\\n        address from,\\n        address to,\\n        uint256 tokenId\\n    ) external;\\n\\n    /**\\n     * @dev Gives permission to `to` to transfer `tokenId` token to another account.\\n     * The approval is cleared when the token is transferred.\\n     *\\n     * Only a single account can be approved at a time, so approving the zero address clears previous approvals.\\n     *\\n     * Requirements:\\n     *\\n     * - The caller must own the token or be an approved operator.\\n     * - `tokenId` must exist.\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address to, uint256 tokenId) external;\\n\\n    /**\\n     * @dev Returns the account approved for `tokenId` token.\\n     *\\n     * Requirements:\\n     *\\n     * - `tokenId` must exist.\\n     */\\n    function getApproved(uint256 tokenId) external view returns (address operator);\\n\\n    /**\\n     * @dev Approve or remove `operator` as an operator for the caller.\\n     * Operators can call {transferFrom} or {safeTransferFrom} for any token owned by the caller.\\n     *\\n     * Requirements:\\n     *\\n     * - The `operator` cannot be the caller.\\n     *\\n     * Emits an {ApprovalForAll} event.\\n     */\\n    function setApprovalForAll(address operator, bool _approved) external;\\n\\n    /**\\n     * @dev Returns if the `operator` is allowed to manage all of the assets of `owner`.\\n     *\\n     * See {setApprovalForAll}\\n     */\\n    function isApprovedForAll(address owner, address operator) external view returns (bool);\\n\\n    /**\\n     * @dev Safely transfers `tokenId` token from `from` to `to`.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` cannot be the zero address.\\n     * - `to` cannot be the zero address.\\n     * - `tokenId` token must exist and be owned by `from`.\\n     * - If the caller is not `from`, it must be approved to move this token by either {approve} or {setApprovalForAll}.\\n     * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function safeTransferFrom(\\n        address from,\\n        address to,\\n        uint256 tokenId,\\n        bytes calldata data\\n    ) external;\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/utils/introspection/IERC165.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/introspection/IERC165.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC165 standard, as defined in the\\n * https://eips.ethereum.org/EIPS/eip-165[EIP].\\n *\\n * Implementers can declare support of contract interfaces, which can then be\\n * queried by others ({ERC165Checker}).\\n *\\n * For an implementation, see {ERC165}.\\n */\\ninterface IERC165 {\\n    /**\\n     * @dev Returns true if this contract implements the interface defined by\\n     * `interfaceId`. See the corresponding\\n     * https://eips.ethereum.org/EIPS/eip-165#how-interfaces-are-identified[EIP section]\\n     * to learn more about how these ids are created.\\n     *\\n     * This function call must use less than 30 000 gas.\\n     */\\n    function supportsInterface(bytes4 interfaceId) external view returns (bool);\\n}\\n\"\r\n    }\r\n  },\r\n  \"settings\": {\r\n    \"optimizer\": {\r\n      \"enabled\": true,\r\n      \"runs\": 500\r\n    },\r\n    \"outputSelection\": {\r\n      \"*\": {\r\n        \"*\": [\r\n          \"evm.bytecode\",\r\n          \"evm.deployedBytecode\",\r\n          \"devdoc\",\r\n          \"userdoc\",\r\n          \"metadata\",\r\n          \"abi\"\r\n        ]\r\n      }\r\n    }\r\n  }\r\n}}","ABI":"[{\"inputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"},{\"indexed\":true,\"internalType\":\"bool\",\"name\":\"unstaked\",\"type\":\"bool\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"earned\",\"type\":\"uint256\"}],\"name\":\"DemonClaimed\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"},{\"indexed\":true,\"internalType\":\"bool\",\"name\":\"unstaked\",\"type\":\"bool\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"earned\",\"type\":\"uint256\"}],\"name\":\"HeroClaimed\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"Paused\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"},{\"indexed\":true,\"internalType\":\"bool\",\"name\":\"isHero\",\"type\":\"bool\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"TokenStaked\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"Unpaused\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"DAILY_EXP_RATE\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"EXP_CLAIM_TAX_PERCENTAGE\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"EXP_STOLEN_DENOMINATOR\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"HNDGame\",\"outputs\":[{\"internalType\":\"contract IHNDGame\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"HNDNFT\",\"outputs\":[{\"internalType\":\"contract IHND\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"MAXIMUM_GLOBAL_EXP\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"MAX_RANK\",\"outputs\":[{\"internalType\":\"uint8\",\"name\":\"\",\"type\":\"uint8\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"MINIMUM_TO_EXIT\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"addr\",\"type\":\"address\"}],\"name\":\"addAdmin\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"internalType\":\"uint16[]\",\"name\":\"tokenIds\",\"type\":\"uint16[]\"}],\"name\":\"addManyToKingdom\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"calculateRewards\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"owed\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint16[]\",\"name\":\"tokenIds\",\"type\":\"uint16[]\"},{\"internalType\":\"bool\",\"name\":\"unstake\",\"type\":\"bool\"}],\"name\":\"claimManyFromKingdom\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"expFromFaucet\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"expToken\",\"outputs\":[{\"internalType\":\"contract IEXP\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"},{\"internalType\":\"bytes\",\"name\":\"\",\"type\":\"bytes\"}],\"name\":\"onERC721Received\",\"outputs\":[{\"internalType\":\"bytes4\",\"name\":\"\",\"type\":\"bytes4\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"paused\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"seed\",\"type\":\"uint256\"}],\"name\":\"randomDemonOwner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"recycleExp\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"addr\",\"type\":\"address\"}],\"name\":\"removeAdmin\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256[]\",\"name\":\"tokenIds\",\"type\":\"uint256[]\"}],\"name\":\"rescue\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"rescueEnabled\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_HNDNFT\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_exp\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_HNDGame\",\"type\":\"address\"}],\"name\":\"setContracts\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bool\",\"name\":\"_paused\",\"type\":\"bool\"}],\"name\":\"setPaused\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bool\",\"name\":\"_enabled\",\"type\":\"bool\"}],\"name\":\"setRescueEnabled\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"stakedTokenOwners\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}]","ContractName":"Kingdom","CompilerVersion":"v0.8.7+commit.e28d00a7","OptimizationUsed":"1","Runs":"500","ConstructorArguments":"","EVMVersion":"Default","Library":"","LicenseType":"","Proxy":"0","Implementation":"","SwarmSource":""}]}