{"status":"1","message":"OK","result":[{"SourceCode":"{{\r\n  \"language\": \"Solidity\",\r\n  \"sources\": {\r\n    \"contracts/mainnet/connectors/1inch/1inch-v4/main.sol\": {\r\n      \"content\": \"pragma solidity ^0.7.0;\\r\\npragma experimental ABIEncoderV2;\\r\\n\\r\\n/**\\r\\n * @title 1InchV4.\\r\\n * @dev On-chain DEX Aggregator.\\r\\n */\\r\\n\\r\\n// import files from common directory\\r\\nimport { TokenInterface , MemoryInterface } from \\\"../../../common/interfaces.sol\\\";\\r\\nimport { Stores } from \\\"../../../common/stores.sol\\\";\\r\\nimport { OneInchInterace, OneInchData } from \\\"./interface.sol\\\";\\r\\nimport { Helpers } from \\\"./helpers.sol\\\";\\r\\nimport { Events } from \\\"./events.sol\\\";\\r\\n\\r\\nabstract contract OneInchResolver is Helpers, Events {\\r\\n    /**\\r\\n     * @dev 1inch API swap handler\\r\\n     * @param oneInchData - contains data returned from 1inch API. Struct defined in interfaces.sol\\r\\n     * @param ethAmt - Eth to swap for .value()\\r\\n     */\\r\\n    function oneInchSwap(\\r\\n        OneInchData memory oneInchData,\\r\\n        uint ethAmt\\r\\n    ) internal returns (uint buyAmt) {\\r\\n        TokenInterface buyToken = oneInchData.buyToken;\\r\\n        (uint _buyDec, uint _sellDec) = getTokensDec(buyToken, oneInchData.sellToken);\\r\\n        uint _sellAmt18 = convertTo18(_sellDec, oneInchData._sellAmt);\\r\\n        uint _slippageAmt = convert18ToDec(_buyDec, wmul(oneInchData.unitAmt, _sellAmt18));\\r\\n\\r\\n        uint initalBal = getTokenBal(buyToken);\\r\\n\\r\\n        // solium-disable-next-line security/no-call-value\\r\\n        (bool success, ) = oneInchAddr.call{value: ethAmt}(oneInchData.callData);\\r\\n        if (!success) revert(\\\"1Inch-swap-failed\\\");\\r\\n\\r\\n        uint finalBal = getTokenBal(buyToken);\\r\\n\\r\\n        buyAmt = sub(finalBal, initalBal);\\r\\n\\r\\n        require(_slippageAmt <= buyAmt, \\\"Too much slippage\\\");\\r\\n    }\\r\\n\\r\\n}\\r\\n\\r\\nabstract contract OneInchResolverHelpers is OneInchResolver {\\r\\n\\r\\n    /**\\r\\n     * @dev Gets the swapping data from 1inch's API.\\r\\n     * @param oneInchData Struct with multiple swap data defined in interfaces.sol \\r\\n     * @param setId Set token amount at this ID in `InstaMemory` Contract.\\r\\n     */\\r\\n    function _sell(\\r\\n        OneInchData memory oneInchData,\\r\\n        uint setId\\r\\n    ) internal returns (OneInchData memory) {\\r\\n        TokenInterface _sellAddr = oneInchData.sellToken;\\r\\n\\r\\n        uint ethAmt;\\r\\n        if (address(_sellAddr) == ethAddr) {\\r\\n            ethAmt = oneInchData._sellAmt;\\r\\n        } else {\\r\\n            approve(TokenInterface(_sellAddr), oneInchAddr, oneInchData._sellAmt);\\r\\n        }\\r\\n\\r\\n        oneInchData._buyAmt = oneInchSwap(oneInchData, ethAmt);\\r\\n        setUint(setId, oneInchData._buyAmt);\\r\\n\\r\\n        return oneInchData;\\r\\n\\r\\n    }\\r\\n}\\r\\n\\r\\nabstract contract OneInch is OneInchResolverHelpers {\\r\\n    /**\\r\\n     * @dev Sell ETH/ERC20_Token using 1Inch.\\r\\n     * @notice Swap tokens from exchanges like kyber, 0x etc, with calculation done off-chain.\\r\\n     * @param buyAddr The address of the token to buy.(For ETH: 0xEeeeeEeeeEeEeeEeEeEeeEEEeeeeEeeeeeeeEEeE)\\r\\n     * @param sellAddr The address of the token to sell.(For ETH: 0xEeeeeEeeeEeEeeEeEeEeeEEEeeeeEeeeeeeeEEeE)\\r\\n     * @param sellAmt The amount of the token to sell.\\r\\n     * @param unitAmt The amount of buyAmt/sellAmt with slippage.\\r\\n     * @param callData Data from 1inch API.\\r\\n     * @param setId ID stores the amount of token brought.\\r\\n    */\\r\\n    function sell(\\r\\n        address buyAddr,\\r\\n        address sellAddr,\\r\\n        uint sellAmt,\\r\\n        uint unitAmt,\\r\\n        bytes calldata callData,\\r\\n        uint setId\\r\\n    ) external payable returns (string memory _eventName, bytes memory _eventParam) {\\r\\n        OneInchData memory oneInchData = OneInchData({\\r\\n            buyToken: TokenInterface(buyAddr),\\r\\n            sellToken: TokenInterface(sellAddr),\\r\\n            unitAmt: unitAmt,\\r\\n            callData: callData,\\r\\n            _sellAmt: sellAmt,\\r\\n            _buyAmt: 0\\r\\n        });\\r\\n\\r\\n        oneInchData = _sell(oneInchData, setId);\\r\\n\\r\\n        _eventName = \\\"LogSell(address,address,uint256,uint256,uint256,uint256)\\\";\\r\\n        _eventParam = abi.encode(buyAddr, sellAddr, oneInchData._buyAmt, oneInchData._sellAmt, 0, setId);\\r\\n    }\\r\\n}\\r\\n\\r\\ncontract ConnectV2OneInchV4 is OneInch {\\r\\n    string public name = \\\"1Inch-v4\\\";\\r\\n}\\r\\n\"\r\n    },\r\n    \"contracts/mainnet/common/interfaces.sol\": {\r\n      \"content\": \"pragma solidity ^0.7.0;\\r\\n\\r\\ninterface TokenInterface {\\r\\n    function approve(address, uint256) external;\\r\\n    function transfer(address, uint) external;\\r\\n    function transferFrom(address, address, uint) external;\\r\\n    function deposit() external payable;\\r\\n    function withdraw(uint) external;\\r\\n    function balanceOf(address) external view returns (uint);\\r\\n    function decimals() external view returns (uint);\\r\\n    function totalSupply() external view returns (uint);\\r\\n}\\r\\n\\r\\ninterface MemoryInterface {\\r\\n    function getUint(uint id) external returns (uint num);\\r\\n    function setUint(uint id, uint val) external;\\r\\n}\\r\\n\\r\\ninterface InstaMapping {\\r\\n    function cTokenMapping(address) external view returns (address);\\r\\n    function gemJoinMapping(bytes32) external view returns (address);\\r\\n}\\r\\n\\r\\ninterface AccountInterface {\\r\\n    function enable(address) external;\\r\\n    function disable(address) external;\\r\\n    function isAuth(address) external view returns (bool);\\r\\n}\\r\\n\"\r\n    },\r\n    \"contracts/mainnet/common/stores.sol\": {\r\n      \"content\": \"pragma solidity ^0.7.0;\\r\\n\\r\\nimport { MemoryInterface, InstaMapping } from \\\"./interfaces.sol\\\";\\r\\n\\r\\n\\r\\nabstract contract Stores {\\r\\n\\r\\n  /**\\r\\n   * @dev Return ethereum address\\r\\n   */\\r\\n  address constant internal ethAddr = 0xEeeeeEeeeEeEeeEeEeEeeEEEeeeeEeeeeeeeEEeE;\\r\\n\\r\\n  /**\\r\\n   * @dev Return Wrapped ETH address\\r\\n   */\\r\\n  address constant internal wethAddr = 0xC02aaA39b223FE8D0A0e5C4F27eAD9083C756Cc2;\\r\\n\\r\\n  /**\\r\\n   * @dev Return memory variable address\\r\\n   */\\r\\n  MemoryInterface constant internal instaMemory = MemoryInterface(0x8a5419CfC711B2343c17a6ABf4B2bAFaBb06957F);\\r\\n\\r\\n  /**\\r\\n   * @dev Return InstaDApp Mapping Addresses\\r\\n   */\\r\\n  InstaMapping constant internal instaMapping = InstaMapping(0xe81F70Cc7C0D46e12d70efc60607F16bbD617E88);\\r\\n\\r\\n  /**\\r\\n   * @dev Get Uint value from InstaMemory Contract.\\r\\n   */\\r\\n  function getUint(uint getId, uint val) internal returns (uint returnVal) {\\r\\n    returnVal = getId == 0 ? val : instaMemory.getUint(getId);\\r\\n  }\\r\\n\\r\\n  /**\\r\\n  * @dev Set Uint value in InstaMemory Contract.\\r\\n  */\\r\\n  function setUint(uint setId, uint val) virtual internal {\\r\\n    if (setId != 0) instaMemory.setUint(setId, val);\\r\\n  }\\r\\n\\r\\n}\\r\\n\"\r\n    },\r\n    \"contracts/mainnet/connectors/1inch/1inch-v4/interface.sol\": {\r\n      \"content\": \"pragma solidity ^0.7.0;\\r\\n\\r\\nimport { TokenInterface } from \\\"../../../common/interfaces.sol\\\";\\r\\n\\r\\ninterface OneInchInterace {\\r\\n    function swap(\\r\\n        TokenInterface fromToken,\\r\\n        TokenInterface toToken,\\r\\n        uint256 fromTokenAmount,\\r\\n        uint256 minReturnAmount,\\r\\n        uint256 guaranteedAmount,\\r\\n        address payable referrer,\\r\\n        address[] calldata callAddresses,\\r\\n        bytes calldata callDataConcat,\\r\\n        uint256[] calldata starts,\\r\\n        uint256[] calldata gasLimitsAndValues\\r\\n    )\\r\\n    external\\r\\n    payable\\r\\n    returns (uint256 returnAmount);\\r\\n}\\r\\n\\r\\nstruct OneInchData {\\r\\n    TokenInterface sellToken;\\r\\n    TokenInterface buyToken;\\r\\n    uint _sellAmt;\\r\\n    uint _buyAmt;\\r\\n    uint unitAmt;\\r\\n    bytes callData;\\r\\n}\"\r\n    },\r\n    \"contracts/mainnet/connectors/1inch/1inch-v4/helpers.sol\": {\r\n      \"content\": \"pragma solidity ^0.7.0;\\r\\n\\r\\nimport { TokenInterface } from \\\"../../../common/interfaces.sol\\\";\\r\\nimport { DSMath } from \\\"../../../common/math.sol\\\";\\r\\nimport { Basic } from \\\"../../../common/basic.sol\\\";\\r\\n\\r\\n\\r\\nabstract contract Helpers is DSMath, Basic {\\r\\n    /**\\r\\n     * @dev 1Inch Address\\r\\n     */\\r\\n   address internal constant oneInchAddr = 0x1111111254fb6c44bAC0beD2854e76F90643097d;\\r\\n}\"\r\n    },\r\n    \"contracts/mainnet/connectors/1inch/1inch-v4/events.sol\": {\r\n      \"content\": \"pragma solidity ^0.7.0;\\r\\n\\r\\ncontract Events {\\r\\n    event LogSell(\\r\\n        address indexed buyToken,\\r\\n        address indexed sellToken,\\r\\n        uint256 buyAmt,\\r\\n        uint256 sellAmt,\\r\\n        uint256 getId,\\r\\n        uint256 setId\\r\\n    );\\r\\n}\"\r\n    },\r\n    \"contracts/mainnet/common/math.sol\": {\r\n      \"content\": \"pragma solidity ^0.7.0;\\r\\n\\r\\nimport { SafeMath } from \\\"@openzeppelin/contracts/math/SafeMath.sol\\\";\\r\\n\\r\\ncontract DSMath {\\r\\n  uint constant WAD = 10 ** 18;\\r\\n  uint constant RAY = 10 ** 27;\\r\\n\\r\\n  function add(uint x, uint y) internal pure returns (uint z) {\\r\\n    z = SafeMath.add(x, y);\\r\\n  }\\r\\n\\r\\n  function sub(uint x, uint y) internal virtual pure returns (uint z) {\\r\\n    z = SafeMath.sub(x, y);\\r\\n  }\\r\\n\\r\\n  function mul(uint x, uint y) internal pure returns (uint z) {\\r\\n    z = SafeMath.mul(x, y);\\r\\n  }\\r\\n\\r\\n  function div(uint x, uint y) internal pure returns (uint z) {\\r\\n    z = SafeMath.div(x, y);\\r\\n  }\\r\\n\\r\\n  function wmul(uint x, uint y) internal pure returns (uint z) {\\r\\n    z = SafeMath.add(SafeMath.mul(x, y), WAD / 2) / WAD;\\r\\n  }\\r\\n\\r\\n  function wdiv(uint x, uint y) internal pure returns (uint z) {\\r\\n    z = SafeMath.add(SafeMath.mul(x, WAD), y / 2) / y;\\r\\n  }\\r\\n\\r\\n  function rdiv(uint x, uint y) internal pure returns (uint z) {\\r\\n    z = SafeMath.add(SafeMath.mul(x, RAY), y / 2) / y;\\r\\n  }\\r\\n\\r\\n  function rmul(uint x, uint y) internal pure returns (uint z) {\\r\\n    z = SafeMath.add(SafeMath.mul(x, y), RAY / 2) / RAY;\\r\\n  }\\r\\n\\r\\n  function toInt(uint x) internal pure returns (int y) {\\r\\n    y = int(x);\\r\\n    require(y >= 0, \\\"int-overflow\\\");\\r\\n  }\\r\\n\\r\\n  function toRad(uint wad) internal pure returns (uint rad) {\\r\\n    rad = mul(wad, 10 ** 27);\\r\\n  }\\r\\n\\r\\n}\\r\\n\"\r\n    },\r\n    \"contracts/mainnet/common/basic.sol\": {\r\n      \"content\": \"pragma solidity ^0.7.0;\\r\\n\\r\\nimport { TokenInterface } from \\\"./interfaces.sol\\\";\\r\\nimport { Stores } from \\\"./stores.sol\\\";\\r\\nimport { DSMath } from \\\"./math.sol\\\";\\r\\n\\r\\nabstract contract Basic is DSMath, Stores {\\r\\n\\r\\n    function convert18ToDec(uint _dec, uint256 _amt) internal pure returns (uint256 amt) {\\r\\n        amt = (_amt / 10 ** (18 - _dec));\\r\\n    }\\r\\n\\r\\n    function convertTo18(uint _dec, uint256 _amt) internal pure returns (uint256 amt) {\\r\\n        amt = mul(_amt, 10 ** (18 - _dec));\\r\\n    }\\r\\n\\r\\n    function getTokenBal(TokenInterface token) internal view returns(uint _amt) {\\r\\n        _amt = address(token) == ethAddr ? address(this).balance : token.balanceOf(address(this));\\r\\n    }\\r\\n\\r\\n    function getTokensDec(TokenInterface buyAddr, TokenInterface sellAddr) internal view returns(uint buyDec, uint sellDec) {\\r\\n        buyDec = address(buyAddr) == ethAddr ?  18 : buyAddr.decimals();\\r\\n        sellDec = address(sellAddr) == ethAddr ?  18 : sellAddr.decimals();\\r\\n    }\\r\\n\\r\\n    function encodeEvent(string memory eventName, bytes memory eventParam) internal pure returns (bytes memory) {\\r\\n        return abi.encode(eventName, eventParam);\\r\\n    }\\r\\n\\r\\n    function approve(TokenInterface token, address spender, uint256 amount) internal {\\r\\n        try token.approve(spender, amount) {\\r\\n\\r\\n        } catch {\\r\\n            token.approve(spender, 0);\\r\\n            token.approve(spender, amount);\\r\\n        }\\r\\n    }\\r\\n\\r\\n    function changeEthAddress(address buy, address sell) internal pure returns(TokenInterface _buy, TokenInterface _sell){\\r\\n        _buy = buy == ethAddr ? TokenInterface(wethAddr) : TokenInterface(buy);\\r\\n        _sell = sell == ethAddr ? TokenInterface(wethAddr) : TokenInterface(sell);\\r\\n    }\\r\\n\\r\\n    function changeEthAddrToWethAddr(address token) internal pure returns(address tokenAddr){\\r\\n        tokenAddr = token == ethAddr ? wethAddr : token;\\r\\n    }\\r\\n\\r\\n    function convertEthToWeth(bool isEth, TokenInterface token, uint amount) internal {\\r\\n        if(isEth) token.deposit{value: amount}();\\r\\n    }\\r\\n\\r\\n    function convertWethToEth(bool isEth, TokenInterface token, uint amount) internal {\\r\\n       if(isEth) {\\r\\n            approve(token, address(token), amount);\\r\\n            token.withdraw(amount);\\r\\n        }\\r\\n    }\\r\\n}\\r\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/math/SafeMath.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity >=0.6.0 <0.8.0;\\n\\n/**\\n * @dev Wrappers over Solidity's arithmetic operations with added overflow\\n * checks.\\n *\\n * Arithmetic operations in Solidity wrap on overflow. This can easily result\\n * in bugs, because programmers usually assume that an overflow raises an\\n * error, which is the standard behavior in high level programming languages.\\n * `SafeMath` restores this intuition by reverting the transaction when an\\n * operation overflows.\\n *\\n * Using this library instead of the unchecked operations eliminates an entire\\n * class of bugs, so it's recommended to use it always.\\n */\\nlibrary SafeMath {\\n    /**\\n     * @dev Returns the addition of two unsigned integers, with an overflow flag.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function tryAdd(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        uint256 c = a + b;\\n        if (c < a) return (false, 0);\\n        return (true, c);\\n    }\\n\\n    /**\\n     * @dev Returns the substraction of two unsigned integers, with an overflow flag.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function trySub(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        if (b > a) return (false, 0);\\n        return (true, a - b);\\n    }\\n\\n    /**\\n     * @dev Returns the multiplication of two unsigned integers, with an overflow flag.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function tryMul(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        // Gas optimization: this is cheaper than requiring 'a' not being zero, but the\\n        // benefit is lost if 'b' is also tested.\\n        // See: https://github.com/OpenZeppelin/openzeppelin-contracts/pull/522\\n        if (a == 0) return (true, 0);\\n        uint256 c = a * b;\\n        if (c / a != b) return (false, 0);\\n        return (true, c);\\n    }\\n\\n    /**\\n     * @dev Returns the division of two unsigned integers, with a division by zero flag.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function tryDiv(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        if (b == 0) return (false, 0);\\n        return (true, a / b);\\n    }\\n\\n    /**\\n     * @dev Returns the remainder of dividing two unsigned integers, with a division by zero flag.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function tryMod(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        if (b == 0) return (false, 0);\\n        return (true, a % b);\\n    }\\n\\n    /**\\n     * @dev Returns the addition of two unsigned integers, reverting on\\n     * overflow.\\n     *\\n     * Counterpart to Solidity's `+` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Addition cannot overflow.\\n     */\\n    function add(uint256 a, uint256 b) internal pure returns (uint256) {\\n        uint256 c = a + b;\\n        require(c >= a, \\\"SafeMath: addition overflow\\\");\\n        return c;\\n    }\\n\\n    /**\\n     * @dev Returns the subtraction of two unsigned integers, reverting on\\n     * overflow (when the result is negative).\\n     *\\n     * Counterpart to Solidity's `-` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Subtraction cannot overflow.\\n     */\\n    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\\n        require(b <= a, \\\"SafeMath: subtraction overflow\\\");\\n        return a - b;\\n    }\\n\\n    /**\\n     * @dev Returns the multiplication of two unsigned integers, reverting on\\n     * overflow.\\n     *\\n     * Counterpart to Solidity's `*` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Multiplication cannot overflow.\\n     */\\n    function mul(uint256 a, uint256 b) internal pure returns (uint256) {\\n        if (a == 0) return 0;\\n        uint256 c = a * b;\\n        require(c / a == b, \\\"SafeMath: multiplication overflow\\\");\\n        return c;\\n    }\\n\\n    /**\\n     * @dev Returns the integer division of two unsigned integers, reverting on\\n     * division by zero. The result is rounded towards zero.\\n     *\\n     * Counterpart to Solidity's `/` operator. Note: this function uses a\\n     * `revert` opcode (which leaves remaining gas untouched) while Solidity\\n     * uses an invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Requirements:\\n     *\\n     * - The divisor cannot be zero.\\n     */\\n    function div(uint256 a, uint256 b) internal pure returns (uint256) {\\n        require(b > 0, \\\"SafeMath: division by zero\\\");\\n        return a / b;\\n    }\\n\\n    /**\\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\\n     * reverting when dividing by zero.\\n     *\\n     * Counterpart to Solidity's `%` operator. This function uses a `revert`\\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\\n     * invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Requirements:\\n     *\\n     * - The divisor cannot be zero.\\n     */\\n    function mod(uint256 a, uint256 b) internal pure returns (uint256) {\\n        require(b > 0, \\\"SafeMath: modulo by zero\\\");\\n        return a % b;\\n    }\\n\\n    /**\\n     * @dev Returns the subtraction of two unsigned integers, reverting with custom message on\\n     * overflow (when the result is negative).\\n     *\\n     * CAUTION: This function is deprecated because it requires allocating memory for the error\\n     * message unnecessarily. For custom revert reasons use {trySub}.\\n     *\\n     * Counterpart to Solidity's `-` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Subtraction cannot overflow.\\n     */\\n    function sub(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\\n        require(b <= a, errorMessage);\\n        return a - b;\\n    }\\n\\n    /**\\n     * @dev Returns the integer division of two unsigned integers, reverting with custom message on\\n     * division by zero. The result is rounded towards zero.\\n     *\\n     * CAUTION: This function is deprecated because it requires allocating memory for the error\\n     * message unnecessarily. For custom revert reasons use {tryDiv}.\\n     *\\n     * Counterpart to Solidity's `/` operator. Note: this function uses a\\n     * `revert` opcode (which leaves remaining gas untouched) while Solidity\\n     * uses an invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Requirements:\\n     *\\n     * - The divisor cannot be zero.\\n     */\\n    function div(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\\n        require(b > 0, errorMessage);\\n        return a / b;\\n    }\\n\\n    /**\\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\\n     * reverting with custom message when dividing by zero.\\n     *\\n     * CAUTION: This function is deprecated because it requires allocating memory for the error\\n     * message unnecessarily. For custom revert reasons use {tryMod}.\\n     *\\n     * Counterpart to Solidity's `%` operator. This function uses a `revert`\\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\\n     * invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Requirements:\\n     *\\n     * - The divisor cannot be zero.\\n     */\\n    function mod(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\\n        require(b > 0, errorMessage);\\n        return a % b;\\n    }\\n}\\n\"\r\n    }\r\n  },\r\n  \"settings\": {\r\n    \"optimizer\": {\r\n      \"enabled\": true,\r\n      \"runs\": 200\r\n    },\r\n    \"outputSelection\": {\r\n      \"*\": {\r\n        \"*\": [\r\n          \"evm.bytecode\",\r\n          \"evm.deployedBytecode\",\r\n          \"devdoc\",\r\n          \"userdoc\",\r\n          \"metadata\",\r\n          \"abi\"\r\n        ]\r\n      }\r\n    },\r\n    \"metadata\": {\r\n      \"useLiteralContent\": true\r\n    },\r\n    \"libraries\": {}\r\n  }\r\n}}","ABI":"[{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"buyToken\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"sellToken\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"buyAmt\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"sellAmt\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"getId\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"setId\",\"type\":\"uint256\"}],\"name\":\"LogSell\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"name\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"buyAddr\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"sellAddr\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"sellAmt\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"unitAmt\",\"type\":\"uint256\"},{\"internalType\":\"bytes\",\"name\":\"callData\",\"type\":\"bytes\"},{\"internalType\":\"uint256\",\"name\":\"setId\",\"type\":\"uint256\"}],\"name\":\"sell\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"_eventName\",\"type\":\"string\"},{\"internalType\":\"bytes\",\"name\":\"_eventParam\",\"type\":\"bytes\"}],\"stateMutability\":\"payable\",\"type\":\"function\"}]","ContractName":"ConnectV2OneInchV4","CompilerVersion":"v0.7.6+commit.7338295f","OptimizationUsed":"1","Runs":"200","ConstructorArguments":"","EVMVersion":"Default","Library":"","LicenseType":"","Proxy":"0","Implementation":"","SwarmSource":""}]}