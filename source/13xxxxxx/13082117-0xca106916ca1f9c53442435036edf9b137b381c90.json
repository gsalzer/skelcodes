{"status":"1","message":"OK","result":[{"SourceCode":"pragma solidity ^0.8.0;\r\n\r\n\r\n// SPDX-License-Identifier: MIT\r\n// CAUTION\r\n// This version of SafeMath should only be used with Solidity 0.8 or later,\r\n// because it relies on the compiler's built in overflow checks.\r\n/**\r\n * @dev Wrappers over Solidity's arithmetic operations.\r\n *\r\n * NOTE: `SafeMath` is no longer needed starting with Solidity 0.8. The compiler\r\n * now has built in overflow checking.\r\n */\r\nlibrary SafeMath {\r\n    /**\r\n     * @dev Returns the addition of two unsigned integers, with an overflow flag.\r\n     *\r\n     * _Available since v3.4._\r\n     */\r\n    function tryAdd(uint256 a, uint256 b) internal pure returns (bool, uint256) {\r\n        unchecked {\r\n            uint256 c = a + b;\r\n            if (c < a) return (false, 0);\r\n            return (true, c);\r\n        }\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the substraction of two unsigned integers, with an overflow flag.\r\n     *\r\n     * _Available since v3.4._\r\n     */\r\n    function trySub(uint256 a, uint256 b) internal pure returns (bool, uint256) {\r\n        unchecked {\r\n            if (b > a) return (false, 0);\r\n            return (true, a - b);\r\n        }\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the multiplication of two unsigned integers, with an overflow flag.\r\n     *\r\n     * _Available since v3.4._\r\n     */\r\n    function tryMul(uint256 a, uint256 b) internal pure returns (bool, uint256) {\r\n        unchecked {\r\n            // Gas optimization: this is cheaper than requiring 'a' not being zero, but the\r\n            // benefit is lost if 'b' is also tested.\r\n            // See: https://github.com/OpenZeppelin/openzeppelin-contracts/pull/522\r\n            if (a == 0) return (true, 0);\r\n            uint256 c = a * b;\r\n            if (c / a != b) return (false, 0);\r\n            return (true, c);\r\n        }\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the division of two unsigned integers, with a division by zero flag.\r\n     *\r\n     * _Available since v3.4._\r\n     */\r\n    function tryDiv(uint256 a, uint256 b) internal pure returns (bool, uint256) {\r\n        unchecked {\r\n            if (b == 0) return (false, 0);\r\n            return (true, a / b);\r\n        }\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the remainder of dividing two unsigned integers, with a division by zero flag.\r\n     *\r\n     * _Available since v3.4._\r\n     */\r\n    function tryMod(uint256 a, uint256 b) internal pure returns (bool, uint256) {\r\n        unchecked {\r\n            if (b == 0) return (false, 0);\r\n            return (true, a % b);\r\n        }\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the addition of two unsigned integers, reverting on\r\n     * overflow.\r\n     *\r\n     * Counterpart to Solidity's `+` operator.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - Addition cannot overflow.\r\n     */\r\n    function add(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        return a + b;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the subtraction of two unsigned integers, reverting on\r\n     * overflow (when the result is negative).\r\n     *\r\n     * Counterpart to Solidity's `-` operator.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - Subtraction cannot overflow.\r\n     */\r\n    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        return a - b;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the multiplication of two unsigned integers, reverting on\r\n     * overflow.\r\n     *\r\n     * Counterpart to Solidity's `*` operator.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - Multiplication cannot overflow.\r\n     */\r\n    function mul(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        return a * b;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the integer division of two unsigned integers, reverting on\r\n     * division by zero. The result is rounded towards zero.\r\n     *\r\n     * Counterpart to Solidity's `/` operator.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - The divisor cannot be zero.\r\n     */\r\n    function div(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        return a / b;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\r\n     * reverting when dividing by zero.\r\n     *\r\n     * Counterpart to Solidity's `%` operator. This function uses a `revert`\r\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\r\n     * invalid opcode to revert (consuming all remaining gas).\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - The divisor cannot be zero.\r\n     */\r\n    function mod(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        return a % b;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the subtraction of two unsigned integers, reverting with custom message on\r\n     * overflow (when the result is negative).\r\n     *\r\n     * CAUTION: This function is deprecated because it requires allocating memory for the error\r\n     * message unnecessarily. For custom revert reasons use {trySub}.\r\n     *\r\n     * Counterpart to Solidity's `-` operator.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - Subtraction cannot overflow.\r\n     */\r\n    function sub(\r\n        uint256 a,\r\n        uint256 b,\r\n        string memory errorMessage\r\n    ) internal pure returns (uint256) {\r\n        unchecked {\r\n            require(b <= a, errorMessage);\r\n            return a - b;\r\n        }\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the integer division of two unsigned integers, reverting with custom message on\r\n     * division by zero. The result is rounded towards zero.\r\n     *\r\n     * Counterpart to Solidity's `/` operator. Note: this function uses a\r\n     * `revert` opcode (which leaves remaining gas untouched) while Solidity\r\n     * uses an invalid opcode to revert (consuming all remaining gas).\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - The divisor cannot be zero.\r\n     */\r\n    function div(\r\n        uint256 a,\r\n        uint256 b,\r\n        string memory errorMessage\r\n    ) internal pure returns (uint256) {\r\n        unchecked {\r\n            require(b > 0, errorMessage);\r\n            return a / b;\r\n        }\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\r\n     * reverting with custom message when dividing by zero.\r\n     *\r\n     * CAUTION: This function is deprecated because it requires allocating memory for the error\r\n     * message unnecessarily. For custom revert reasons use {tryMod}.\r\n     *\r\n     * Counterpart to Solidity's `%` operator. This function uses a `revert`\r\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\r\n     * invalid opcode to revert (consuming all remaining gas).\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - The divisor cannot be zero.\r\n     */\r\n    function mod(\r\n        uint256 a,\r\n        uint256 b,\r\n        string memory errorMessage\r\n    ) internal pure returns (uint256) {\r\n        unchecked {\r\n            require(b > 0, errorMessage);\r\n            return a % b;\r\n        }\r\n    }\r\n}\r\n\r\n\r\nlibrary StringUtil {\r\n    \r\n    function equal(string memory a, string memory b) internal pure returns(bool){\r\n        return equal(bytes(a),bytes(b));\r\n    }\r\n\r\n    function equal(bytes memory a, bytes memory b) internal pure returns(bool){\r\n        return keccak256(a) == keccak256(b);\r\n    }\r\n    \r\n    function notEmpty(string memory a) internal pure returns(bool){\r\n        return bytes(a).length > 0;\r\n    }\r\n\r\n}\r\n\r\n\r\n/*\r\n * @dev Provides information about the current execution context, including the\r\n * sender of the transaction and its data. While these are generally available\r\n * via msg.sender and msg.data, they should not be accessed in such a direct\r\n * manner, since when dealing with meta-transactions the account sending and\r\n * paying for execution may not be the actual sender (as far as an application\r\n * is concerned).\r\n *\r\n * This contract is only required for intermediate, library-like contracts.\r\n */\r\nabstract contract Context {\r\n    function _msgSender() internal view virtual returns (address) {\r\n        return msg.sender;\r\n    }\r\n\r\n    function _msgData() internal view virtual returns (bytes calldata) {\r\n        return msg.data;\r\n    }\r\n}\r\n\r\n\r\n/**\r\n * @dev Contract module which provides a basic access control mechanism, where\r\n * there is an account (an owner) that can be granted exclusive access to\r\n * specific functions.\r\n *\r\n * By default, the owner account will be the one that deploys the contract. This\r\n * can later be changed with {transferOwnership}.\r\n *\r\n * This module is used through inheritance. It will make available the modifier\r\n * `onlyOwner`, which can be applied to your functions to restrict their use to\r\n * the owner.\r\n */\r\nabstract contract Ownable is Context {\r\n    address private _owner;\r\n\r\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\r\n\r\n    /**\r\n     * @dev Initializes the contract setting the deployer as the initial owner.\r\n     */\r\n    constructor() {\r\n        _setOwner(_msgSender());\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the address of the current owner.\r\n     */\r\n    function owner() public view virtual returns (address) {\r\n        return _owner;\r\n    }\r\n\r\n    /**\r\n     * @dev Throws if called by any account other than the owner.\r\n     */\r\n    modifier onlyOwner() {\r\n        require(owner() == _msgSender(), \"Ownable: caller is not the owner\");\r\n        _;\r\n    }\r\n\r\n    /**\r\n     * @dev Leaves the contract without owner. It will not be possible to call\r\n     * `onlyOwner` functions anymore. Can only be called by the current owner.\r\n     *\r\n     * NOTE: Renouncing ownership will leave the contract without an owner,\r\n     * thereby removing any functionality that is only available to the owner.\r\n     */\r\n    function renounceOwnership() public virtual onlyOwner {\r\n        _setOwner(address(0));\r\n    }\r\n\r\n    /**\r\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\r\n     * Can only be called by the current owner.\r\n     */\r\n    function transferOwnership(address newOwner) public virtual onlyOwner {\r\n        require(newOwner != address(0), \"Ownable: new owner is the zero address\");\r\n        _setOwner(newOwner);\r\n    }\r\n\r\n    function _setOwner(address newOwner) private {\r\n        address oldOwner = _owner;\r\n        _owner = newOwner;\r\n        emit OwnershipTransferred(oldOwner, newOwner);\r\n    }\r\n}\r\n\r\ncontract WhiteList is Ownable{\r\n\r\n    mapping(address=>bool) public whiteList;\r\n\r\n    event AddWhiteList(address account);\r\n    event RemoveWhiteList(address account);\r\n\r\n    modifier onlyWhiteList(){\r\n        require(whiteList[_msgSender()] == true, \"not in white list\");\r\n        _;\r\n    }\r\n\r\n    function addWhiteList(address account) public onlyOwner{\r\n        require(account != address(0), \"address should not be 0\");\r\n        whiteList[account] = true;\r\n        emit AddWhiteList(account);\r\n    }\r\n\r\n    function removeWhiteList(address account) public onlyOwner{\r\n        whiteList[account] = false;\r\n        emit RemoveWhiteList(account);\r\n    }\r\n\r\n}\r\n\r\ncontract FilChainStatOracle is WhiteList{\r\n    using StringUtil for string;\r\n    using SafeMath for uint256;\r\n\r\n    // all FIL related value use attoFil\r\n    uint256 public sectorInitialPledge; // attoFil/TiB\r\n    mapping(string=>uint256) public minerAdjustedPower; // TiB\r\n    mapping(string=>uint256) public minerMiningEfficiency; // attoFil/GiB\r\n    mapping(string=>uint256) public minerSectorInitialPledge; // attoFil/TiB\r\n    \r\n    /**\r\n        TiB, \r\n        the total adjusted power of all miners listed in the platform\r\n     */\r\n    uint256 public minerTotalAdjustedPower;\r\n    \r\n    /**\r\n        attoFil/GiB/24H,\r\n        the avg mining efficiency of all miners listed on this platform of last 24 hours\r\n     */\r\n    uint256 public avgMiningEfficiency;\r\n    \r\n    /**\r\n        attoFil/24H,\r\n        the total block rewards of last 24 hours of the the whole Filecoin network\r\n     */\r\n    uint256 public latest24hBlockReward;\r\n    \r\n    uint256 public rewardAttenuationFactor; // *10000\r\n    uint256 public networkStoragePower; // TiB\r\n    uint256 public dailyStoragePowerIncrease; //TiB\r\n\r\n    event SectorInitialPledgeChanged(uint256 originalValue, uint256 newValue);\r\n    event MinerSectorInitialPledgeChanged(string minerId, uint256 originalValue, uint256 newValue);\r\n    event MinerAdjustedPowerChanged(string minerId, uint256 originalValue, uint256 newValue);\r\n    event MinerMiningEfficiencyChanged(string minerId, uint256 originalValue, uint256 newValue);\r\n    event AvgMiningEfficiencyChanged(uint256 originalValue, uint256 newValue);\r\n    event Latest24hBlockRewardChanged(uint256 originalValue, uint256 newValue);\r\n    event RewardAttenuationFactorChanged(uint256 originalValue, uint256 newValue);\r\n    event NetworkStoragePowerChanged(uint256 originalValue, uint256 newValue);\r\n    event DailyStoragePowerIncreaseChanged(uint256 originalValue, uint256 newValue);\r\n\r\n    function setSectorInitialPledge(uint256 _sectorInitialPledge) public onlyWhiteList{\r\n        require(_sectorInitialPledge>0, \"value should not be 0\");\r\n        emit SectorInitialPledgeChanged(sectorInitialPledge, _sectorInitialPledge);\r\n        sectorInitialPledge = _sectorInitialPledge;\r\n    }\r\n\r\n    function setMinerSectorInitialPledge(string memory _minerId, uint256 _minerSectorInitialPledge) public onlyWhiteList{\r\n        require(_minerSectorInitialPledge>0, \"value should not be 0\");\r\n        emit MinerSectorInitialPledgeChanged(_minerId, minerSectorInitialPledge[_minerId], _minerSectorInitialPledge);\r\n        minerSectorInitialPledge[_minerId] = _minerSectorInitialPledge;\r\n    }\r\n\r\n    function setMinerSectorInitialPledgeBatch(string[] memory _minerIdList, uint256[] memory _minerSectorInitialPledgeList) public onlyWhiteList{\r\n        require(_minerIdList.length>0, \"miner array should not be 0 length\");\r\n        require(_minerSectorInitialPledgeList.length>0, \"value array should not be 0 length\");\r\n        require(_minerIdList.length == _minerSectorInitialPledgeList.length, \"array length not equal\");\r\n\r\n        for(uint i=0; i<_minerIdList.length; i++){\r\n            require(_minerSectorInitialPledgeList[i]>0, \"value should not be 0\");\r\n            emit MinerSectorInitialPledgeChanged(_minerIdList[i], minerSectorInitialPledge[_minerIdList[i]], _minerSectorInitialPledgeList[i]);\r\n            minerSectorInitialPledge[_minerIdList[i]] = _minerSectorInitialPledgeList[i];\r\n        }\r\n    }\r\n\r\n    function setMinerAdjustedPower(string memory _minerId, uint256 _minerAdjustedPower) public onlyWhiteList{\r\n        require(_minerId.notEmpty(), \"miner id should not be empty\");\r\n        require(_minerAdjustedPower>0, \"value should not be 0\");\r\n        minerTotalAdjustedPower = minerTotalAdjustedPower.sub(minerAdjustedPower[_minerId]).add(_minerAdjustedPower);\r\n        emit MinerAdjustedPowerChanged(_minerId, minerAdjustedPower[_minerId], _minerAdjustedPower);\r\n        minerAdjustedPower[_minerId] = _minerAdjustedPower;\r\n    }\r\n\r\n    function setMinerAdjustedPowerBatch(string[] memory _minerIds, uint256[] memory _minerAdjustedPowers) public onlyWhiteList{\r\n        require(_minerIds.length == _minerAdjustedPowers.length, \"minerId list count is not equal to power list\");\r\n        for(uint i; i<_minerIds.length; i++){\r\n            require(_minerIds[i].notEmpty(), \"miner id should not be empty\");\r\n            require(_minerAdjustedPowers[i]>0, \"value should not be 0\");\r\n            minerTotalAdjustedPower = minerTotalAdjustedPower.sub(minerAdjustedPower[_minerIds[i]]).add(_minerAdjustedPowers[i]);\r\n            emit MinerAdjustedPowerChanged(_minerIds[i], minerAdjustedPower[_minerIds[i]], _minerAdjustedPowers[i]);\r\n            minerAdjustedPower[_minerIds[i]] = _minerAdjustedPowers[i];\r\n        }\r\n    }\r\n\r\n    function removeMinerAdjustedPower(string memory _minerId) public onlyWhiteList{\r\n        uint256 adjustedPower = minerAdjustedPower[_minerId];\r\n        minerTotalAdjustedPower = minerTotalAdjustedPower.sub(adjustedPower);\r\n        delete minerAdjustedPower[_minerId];\r\n        emit MinerAdjustedPowerChanged(_minerId, adjustedPower, 0);\r\n    }\r\n\r\n    function setMinerMiningEfficiency(string memory _minerId, uint256 _minerMiningEfficiency) public onlyWhiteList{\r\n        require(_minerId.notEmpty(), \"miner id should not be empty\");\r\n        require(_minerMiningEfficiency>0, \"value should not be 0\");\r\n        emit MinerMiningEfficiencyChanged(_minerId, minerMiningEfficiency[_minerId], _minerMiningEfficiency);\r\n        minerMiningEfficiency[_minerId] = _minerMiningEfficiency;\r\n    }\r\n\r\n    function setMinerMiningEfficiencyBatch(string[] memory _minerIds, uint256[] memory _minerMiningEfficiencys) public onlyWhiteList{\r\n        require(_minerIds.length == _minerMiningEfficiencys.length, \"minerId list count is not equal to power list\");\r\n        for(uint i; i<_minerIds.length; i++){\r\n            require(_minerIds[i].notEmpty(), \"miner id should not be empty\");\r\n            require(_minerMiningEfficiencys[i]>0, \"value should not be 0\");\r\n            emit MinerMiningEfficiencyChanged(_minerIds[i], minerMiningEfficiency[_minerIds[i]], _minerMiningEfficiencys[i]);\r\n            minerMiningEfficiency[_minerIds[i]] = _minerMiningEfficiencys[i];\r\n        }\r\n    }\r\n\r\n    function setAvgMiningEfficiency(uint256 _avgMiningEfficiency) public onlyWhiteList{\r\n        require(_avgMiningEfficiency>0, \"value should not be 0\");\r\n        emit AvgMiningEfficiencyChanged(avgMiningEfficiency, _avgMiningEfficiency);\r\n        avgMiningEfficiency = _avgMiningEfficiency;\r\n    }\r\n\r\n    function setLatest24hBlockReward(uint256 _latest24hBlockReward) public onlyWhiteList{\r\n        require(_latest24hBlockReward>0, \"value should not be 0\");\r\n        emit Latest24hBlockRewardChanged(latest24hBlockReward, _latest24hBlockReward);\r\n        latest24hBlockReward = _latest24hBlockReward;\r\n    }\r\n\r\n    function setRewardAttenuationFactor(uint256 _rewardAttenuationFactor) public onlyWhiteList{\r\n        require(_rewardAttenuationFactor>0, \"value should not be 0\");\r\n        emit RewardAttenuationFactorChanged(rewardAttenuationFactor, _rewardAttenuationFactor);\r\n        rewardAttenuationFactor = _rewardAttenuationFactor;\r\n    }\r\n\r\n    function setNetworkStoragePower(uint256 _networkStoragePower) public onlyWhiteList{\r\n        require(_networkStoragePower>0, \"value should not be 0\");\r\n        emit NetworkStoragePowerChanged(networkStoragePower, _networkStoragePower);\r\n        networkStoragePower = _networkStoragePower;\r\n    }\r\n\r\n    function setDailyStoragePowerIncrease(uint256 _dailyStoragePowerIncrease) public onlyWhiteList{\r\n        require(_dailyStoragePowerIncrease>0, \"value should not be 0\");\r\n        emit DailyStoragePowerIncreaseChanged(dailyStoragePowerIncrease, _dailyStoragePowerIncrease);\r\n        dailyStoragePowerIncrease = _dailyStoragePowerIncrease;\r\n    }\r\n\r\n}","ABI":"[{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"AddWhiteList\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"originalValue\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"newValue\",\"type\":\"uint256\"}],\"name\":\"AvgMiningEfficiencyChanged\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"originalValue\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"newValue\",\"type\":\"uint256\"}],\"name\":\"DailyStoragePowerIncreaseChanged\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"originalValue\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"newValue\",\"type\":\"uint256\"}],\"name\":\"Latest24hBlockRewardChanged\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"string\",\"name\":\"minerId\",\"type\":\"string\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"originalValue\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"newValue\",\"type\":\"uint256\"}],\"name\":\"MinerAdjustedPowerChanged\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"string\",\"name\":\"minerId\",\"type\":\"string\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"originalValue\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"newValue\",\"type\":\"uint256\"}],\"name\":\"MinerMiningEfficiencyChanged\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"string\",\"name\":\"minerId\",\"type\":\"string\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"originalValue\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"newValue\",\"type\":\"uint256\"}],\"name\":\"MinerSectorInitialPledgeChanged\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"originalValue\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"newValue\",\"type\":\"uint256\"}],\"name\":\"NetworkStoragePowerChanged\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"RemoveWhiteList\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"originalValue\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"newValue\",\"type\":\"uint256\"}],\"name\":\"RewardAttenuationFactorChanged\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"originalValue\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"newValue\",\"type\":\"uint256\"}],\"name\":\"SectorInitialPledgeChanged\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"addWhiteList\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"avgMiningEfficiency\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"dailyStoragePowerIncrease\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"latest24hBlockReward\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"name\":\"minerAdjustedPower\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"name\":\"minerMiningEfficiency\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"name\":\"minerSectorInitialPledge\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"minerTotalAdjustedPower\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"networkStoragePower\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"string\",\"name\":\"_minerId\",\"type\":\"string\"}],\"name\":\"removeMinerAdjustedPower\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"removeWhiteList\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"rewardAttenuationFactor\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"sectorInitialPledge\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_avgMiningEfficiency\",\"type\":\"uint256\"}],\"name\":\"setAvgMiningEfficiency\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_dailyStoragePowerIncrease\",\"type\":\"uint256\"}],\"name\":\"setDailyStoragePowerIncrease\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_latest24hBlockReward\",\"type\":\"uint256\"}],\"name\":\"setLatest24hBlockReward\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"string\",\"name\":\"_minerId\",\"type\":\"string\"},{\"internalType\":\"uint256\",\"name\":\"_minerAdjustedPower\",\"type\":\"uint256\"}],\"name\":\"setMinerAdjustedPower\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"string[]\",\"name\":\"_minerIds\",\"type\":\"string[]\"},{\"internalType\":\"uint256[]\",\"name\":\"_minerAdjustedPowers\",\"type\":\"uint256[]\"}],\"name\":\"setMinerAdjustedPowerBatch\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"string\",\"name\":\"_minerId\",\"type\":\"string\"},{\"internalType\":\"uint256\",\"name\":\"_minerMiningEfficiency\",\"type\":\"uint256\"}],\"name\":\"setMinerMiningEfficiency\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"string[]\",\"name\":\"_minerIds\",\"type\":\"string[]\"},{\"internalType\":\"uint256[]\",\"name\":\"_minerMiningEfficiencys\",\"type\":\"uint256[]\"}],\"name\":\"setMinerMiningEfficiencyBatch\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"string\",\"name\":\"_minerId\",\"type\":\"string\"},{\"internalType\":\"uint256\",\"name\":\"_minerSectorInitialPledge\",\"type\":\"uint256\"}],\"name\":\"setMinerSectorInitialPledge\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"string[]\",\"name\":\"_minerIdList\",\"type\":\"string[]\"},{\"internalType\":\"uint256[]\",\"name\":\"_minerSectorInitialPledgeList\",\"type\":\"uint256[]\"}],\"name\":\"setMinerSectorInitialPledgeBatch\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_networkStoragePower\",\"type\":\"uint256\"}],\"name\":\"setNetworkStoragePower\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_rewardAttenuationFactor\",\"type\":\"uint256\"}],\"name\":\"setRewardAttenuationFactor\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_sectorInitialPledge\",\"type\":\"uint256\"}],\"name\":\"setSectorInitialPledge\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"whiteList\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"}]","ContractName":"FilChainStatOracle","CompilerVersion":"v0.8.4+commit.c7e474f2","OptimizationUsed":"1","Runs":"200","ConstructorArguments":"","EVMVersion":"Default","Library":"","LicenseType":"None","Proxy":"0","Implementation":"","SwarmSource":"ipfs://e733587ac49f84babd3cb82673a5a04e8566be9a180dc34d9d59c3aece64aa57"}]}