{"status":"1","message":"OK","result":[{"SourceCode":"// SPDX-License-Identifier: MIT\r\npragma solidity 0.8.4;\r\n\r\ncontract SafeMath {\r\n\r\n    function safeAdd(uint256 x, uint256 y) internal pure returns(uint256) {\r\n      uint256 z = x + y;\r\n      assert((z >= x) && (z >= y));\r\n      return z;\r\n    }\r\n\r\n    function safeSubtract(uint256 x, uint256 y) internal pure returns(uint256) {\r\n      assert(x >= y);\r\n      uint256 z = x - y;\r\n      return z;\r\n    }\r\n\r\n    function safeMult(uint256 x, uint256 y) internal pure returns(uint256) {\r\n      uint256 z = x * y;\r\n      assert((x == 0)||(z/x == y));\r\n      return z;\r\n    }\r\n\r\n}\r\n\r\n/* ERC20 Token Interface */\r\ninterface Token {\r\n    function totalSupply() external view returns (uint256);\r\n    function balanceOf(address _owner) external returns (uint256 balance);\r\n    function transfer(address _to, uint256 _value) external returns (bool success);\r\n    function transferFrom(address _from, address _to, uint256 _value) external returns (bool success);\r\n    function approve(address _spender, uint256 _value) external returns (bool success);\r\n    function allowance(address _owner, address _spender) external returns (uint256 remaining);\r\n    event Transfer(address indexed _from, address indexed _to, uint256 _value);\r\n    event Approval(address indexed _owner, address indexed _spender, uint256 _value);\r\n}\r\n\r\n/*  ERC20 token Implementation */\r\nabstract contract StandardToken is Token {\r\n\r\n    function transfer(address _to, uint256 _value) public override returns (bool success) {\r\n      if (balances[msg.sender] >= _value && _value > 0) {\r\n        balances[msg.sender] -= _value;\r\n        balances[_to] += _value;\r\n        emit Transfer(msg.sender, _to, _value);\r\n        return true;\r\n      } else {\r\n        return false;\r\n      }\r\n    }\r\n\r\n    function transferFrom(address _from, address _to, uint256 _value) public override returns (bool success)  {\r\n      if (balances[_from] >= _value && allowed[_from][msg.sender] >= _value && _value > 0) {\r\n        balances[_to] += _value;\r\n        balances[_from] -= _value;\r\n        allowed[_from][msg.sender] -= _value;\r\n        emit Transfer(_from, _to, _value);\r\n        return true;\r\n      } else {\r\n        return false;\r\n      }\r\n    }\r\n\r\n    function balanceOf(address _owner) public override view returns (uint256 balance) {\r\n        return balances[_owner];\r\n    }\r\n\r\n    function approve(address _spender, uint256 _value) public override returns (bool success) {\r\n        allowed[msg.sender][_spender] = _value;\r\n        emit Approval(msg.sender, _spender, _value);\r\n        return true;\r\n    }\r\n\r\n    function allowance(address _owner, address _spender) public override view returns (uint256 remaining) {\r\n      return allowed[_owner][_spender];\r\n    }\r\n\r\n    mapping (address => uint256) balances;\r\n    mapping (address => mapping (address => uint256)) allowed;\r\n}\r\n\r\ncontract LifeCoin2 is StandardToken, SafeMath {\r\n\r\n    fallback() external {\r\n      require(false, \"Function does not exist\");\r\n    }\r\n\r\n    // metadata\r\n    string public constant name = \"LifeCoin\";\r\n    string public constant symbol = \"LFE\";\r\n    uint256 public constant decimals = 2;\r\n\t  uint256 private immutable _totalSupply;\r\n    string public version = \"1.0\";\r\n\r\n    // contracts\r\n    address public ethFundDeposit;        // deposit address for ETH for YawLife Pty. Ltd.\r\n    address public yawLifeFundDeposit;   // deposit address for LifeCoin for YawLife Pty. Ltd.\r\n\r\n    // crowdsale parameters\r\n    bool public isFinalized;              // switched to true in operational state\r\n    uint256 public fundingStartBlock;\r\n    uint256 public fundingEndBlock;\r\n    uint256 public constant yawLifeFund = 2.2 * (10**9) * 10**decimals;             // 2.2 Billion LifeCoin reserved for YawLife Pty. Ltd. (some to be re-allocated (e.g. to mining) later)\r\n    uint256 public constant totalLifeCoins =  10 * (10**9) * 10**decimals;          // 7.8 Billion LifeCoins will be created.\r\n    uint256 public baseLifeCoinExchangeRate;\r\n\r\n    // Bonus parameters.\r\n    // Assuming an average blocktime of 19s. 1 Week is 31831 blocks.\r\n    uint256 public blocksPerWeek;\r\n\r\n    mapping (address => uint256[7]) public icoEthBalances;   // Keeps track of amount of eth deposited during each week of the ICO;\r\n\r\n    uint256[7] public icoEthPerWeek;  // Keeps track of amount of eth deposited during each week of the ICO;\r\n    // Stores the relative percentages participants gain during the weeks.\r\n    // uint32[7] public bonusesPerWeek;\r\n\r\n    // events\r\n    event CreateLifeCoin(address indexed _to, uint256 _value);\r\n    event DepositETH(address indexed _from, uint256 _value, uint256 _bonusPeriod); //The naming is similar to contract function. However it looks nicer in public facing results.\r\n\r\n    // constructor\r\n    constructor(\r\n        address _ethFundDeposit,\r\n        address _yawLifeFundDeposit,\r\n        uint256 _fundingStartBlock,\r\n        uint256 _fundingEndBlock,\r\n        uint256 _blocksPerWeek\r\n      )\r\n    {\r\n      require(_fundingEndBlock > (_fundingStartBlock + _blocksPerWeek), \"_fundingEndBlock > _fundingStartBlock\");\r\n      isFinalized = false;                   //controls pre through crowdsale state\r\n      ethFundDeposit = _ethFundDeposit;\r\n      yawLifeFundDeposit = _yawLifeFundDeposit;\r\n      blocksPerWeek = _blocksPerWeek;\r\n      fundingStartBlock = _fundingStartBlock;\r\n      fundingEndBlock = _fundingEndBlock;\r\n      _totalSupply = totalLifeCoins;\r\n    }\r\n\r\n\tfunction totalSupply() public view virtual override returns (uint256) {\r\n        return _totalSupply;\r\n    }\r\n\r\n    /// Accepts ether and creates new LifeCoin tokens.\r\n    function depositETH() external payable {\r\n\t  require(!isFinalized, \"Already finalized\");\r\n\t  require(block.timestamp >= fundingStartBlock, \"Current block-number should not be less than fundingStartBlock\");\r\n\t  require(block.timestamp <= fundingEndBlock, \"Current block-number should not be greater than fundingEndBlock\");\r\n\t  require(msg.value > 0, \"Ether not sent\");\r\n\r\n      uint256 weekIndex = (block.timestamp - fundingStartBlock) / blocksPerWeek;  // Calculate the array index to credit account\r\n      uint256 currentBalance = icoEthBalances[msg.sender][weekIndex];\r\n      icoEthBalances[msg.sender][weekIndex] = safeAdd(currentBalance, msg.value); //Credit the senders account for the bonus period.\r\n\r\n      // Store the totals for each week\r\n      uint256 currentETHWeek = icoEthPerWeek[weekIndex];\r\n      icoEthPerWeek[weekIndex] = safeAdd(currentETHWeek, msg.value); //Credit the senders account for the bonus period.\r\n      emit DepositETH(msg.sender, msg.value, weekIndex);                                          // Log the deposit.\r\n    }\r\n\r\n    /// Ends the funding period and sends the ETH to the ethFundDeposit.\r\n    function finalize() external {\r\n      assert(address(this).balance > 0);\r\n\t  require(!isFinalized, \"Already finalized\");\r\n      require(msg.sender == ethFundDeposit, \"Sender should be ethFundDeposit\"); // locks finalize to the ultimate ETH owner\r\n\t  require(block.timestamp > fundingEndBlock, \"Current block-number is not greater than fundingEndBlock\");\r\n      //Calculate the base exchange rate\r\n\r\n      uint256 totalEffectiveWei = 0;\r\n      for(uint32 i =0; i < 7; i++){\r\n        totalEffectiveWei = safeAdd(totalEffectiveWei, icoEthPerWeek[i]);\r\n      }\r\n\r\n      //Convert to wei\r\n      baseLifeCoinExchangeRate = ((totalLifeCoins - yawLifeFund)*1e29) / totalEffectiveWei; //((totalLifeCoins - yawLifeFund)*1e29) / totalEffectiveWei\r\n      // switch to operational\r\n      isFinalized = true;\r\n      balances[yawLifeFundDeposit] += yawLifeFund;       // Credit YawLife Pty. Ltd. After the ICO Finishes.\r\n      emit CreateLifeCoin(yawLifeFundDeposit, yawLifeFund);  // Log the creation of the first new LifeCoin Tokens.\r\n\t  payable(ethFundDeposit).transfer(address(this).balance);   // send the eth to YawLife Pty. Ltd.\r\n    }\r\n\r\n    /// After the ICO - Allow participants to withdraw their tokens at the price dictated by amount of ETH raised.\r\n    function withdraw() external {\r\n      assert(isFinalized == true);            // Wait until YawLife has checked and confirmed the details of the ICO before withdrawing tokens.\r\n      //VERIFY THIS\r\n      // Check balance. Only permit if balance is non Zero\r\n      uint256 balance =0;\r\n      for(uint256 k=0; k < 7; k++){\r\n        balance = safeAdd(balance, icoEthBalances[msg.sender][k]);\r\n      }\r\n      assert(balance > 0);  // TODO: CHECK THIS\r\n\r\n      uint256 lifeCoinsOwed=0;\r\n      uint256 effectiveWeiInvestment =0;\r\n      for(uint32 i =0; i < 7; i++ ) {\r\n          effectiveWeiInvestment = icoEthBalances[msg.sender][i];\r\n          // Convert exchange rate to Wei after multiplying.\r\n          lifeCoinsOwed = safeAdd(lifeCoinsOwed, baseLifeCoinExchangeRate*effectiveWeiInvestment/1e29); //baseLifeCoinExchangeRate*effectiveWeiInvestment/1e29\r\n          icoEthBalances[msg.sender][i] = 0;\r\n      }\r\n      balances[msg.sender] = lifeCoinsOwed; // Credit the participants account with LifeCoins.\r\n      emit CreateLifeCoin(msg.sender, lifeCoinsOwed); // Log the creation of new coins.\r\n    }\r\n\r\n}","ABI":"[{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_ethFundDeposit\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_yawLifeFundDeposit\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_fundingStartBlock\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_fundingEndBlock\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_blocksPerWeek\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"_owner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"_spender\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"Approval\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"_to\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"CreateLifeCoin\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"_from\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"_value\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"_bonusPeriod\",\"type\":\"uint256\"}],\"name\":\"DepositETH\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"_from\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"_to\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"Transfer\",\"type\":\"event\"},{\"stateMutability\":\"nonpayable\",\"type\":\"fallback\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_owner\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_spender\",\"type\":\"address\"}],\"name\":\"allowance\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"remaining\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_spender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"approve\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"success\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_owner\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"balance\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"baseLifeCoinExchangeRate\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"blocksPerWeek\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"decimals\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"depositETH\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"ethFundDeposit\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"finalize\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"fundingEndBlock\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"fundingStartBlock\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"icoEthBalances\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"icoEthPerWeek\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"isFinalized\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"name\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"symbol\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalLifeCoins\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalSupply\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"transfer\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"success\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_from\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"transferFrom\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"success\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"version\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"withdraw\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"yawLifeFund\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"yawLifeFundDeposit\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"}]","ContractName":"LifeCoin2","CompilerVersion":"v0.8.4+commit.c7e474f2","OptimizationUsed":"1","Runs":"200","ConstructorArguments":"000000000000000000000000dc63f1b976065a72a3cfe72c42798d6fdf01c1f7000000000000000000000000dc63f1b976065a72a3cfe72c42798d6fdf01c1f70000000000000000000000000000000000000000000000000000000000d592850000000000000000000000000000000000000000000000000000000000dab219000000000000000000000000000000000000000000000000000000000000b08f","EVMVersion":"Default","Library":"","LicenseType":"None","Proxy":"0","Implementation":"","SwarmSource":"ipfs://8875ad31d9e2b42ed4c9d188c4cac746243d270f74e91450d2fd737a8b53a8cd"}]}