{"status":"1","message":"OK","result":[{"SourceCode":"{{\r\n  \"language\": \"Solidity\",\r\n  \"sources\": {\r\n    \"/contracts/PriceFeed.sol\": {\r\n      \"content\": \"\\r\\n// SPDX-License-Identifier: MIT\\r\\n\\r\\npragma solidity ^0.6.0;\\r\\n\\r\\nimport \\\"@openzeppelin/contracts/access/Ownable.sol\\\";\\r\\nimport \\\"./interface/IPriceFeed.sol\\\";\\r\\nimport \\\"./SafeDecimalMath.sol\\\";\\r\\nimport \\\"@openzeppelin/contracts/math/SafeMath.sol\\\";\\r\\nimport \\\"@chainlink/contracts/src/v0.6/interfaces/AggregatorV3Interface.sol\\\";\\r\\n\\r\\ncontract PriceFeed is Ownable, IPriceFeed {\\r\\n    uint80 private mRoundId;\\r\\n    int256 private  mAnswer;\\r\\n    uint256 private  mStartedAt; \\r\\n    uint256 private  mUpdatedAt;\\r\\n    uint80 private  mAnsweredInRound;\\r\\n    bool private mPriceError;\\r\\n\\r\\n    function setRoundData( uint80 roundId, \\r\\n            int256 answer, \\r\\n            uint256 startedAt, \\r\\n            uint256 updatedAt, \\r\\n            uint80 answeredInRound ) public onlyOwner {\\r\\n\\r\\n        mRoundId = roundId;\\r\\n        mAnswer = answer;\\r\\n        mStartedAt = startedAt; \\r\\n        mUpdatedAt = updatedAt;\\r\\n        mAnsweredInRound = answeredInRound;\\r\\n        mPriceError = false;\\r\\n    }\\r\\n\\r\\n    function latestRoundData() override external view \\r\\n        returns (\\r\\n            uint80 roundId, \\r\\n            int256 answer, \\r\\n            uint256 startedAt, \\r\\n            uint256 updatedAt, \\r\\n            uint80 answeredInRound\\r\\n        ){\\r\\n        roundId = mRoundId;\\r\\n        answer = mAnswer;\\r\\n        startedAt = mStartedAt; \\r\\n        updatedAt = mUpdatedAt;\\r\\n        answeredInRound = mAnsweredInRound;\\r\\n    }\\r\\n\\r\\n    function setPriceError( bool bError ) public onlyOwner {\\r\\n        mPriceError = bError;\\r\\n    }\\r\\n\\r\\n    function checkPriceError() external view override returns ( bool error ){\\r\\n        return mPriceError;\\r\\n    }     \\r\\n\\r\\n}\\r\\n\\r\\ncontract ChickPriceFeed is PriceFeed {\\r\\n\\r\\n}\\r\\n\\r\\n\\r\\ncontract ChainlinkEurEthPriceFeed is Ownable, IPriceFeed {\\r\\n    using SafeDecimalMath for uint;\\r\\n    using SafeMath for uint;\\r\\n\\r\\n    AggregatorV3Interface public mEthUsdPrice;\\r\\n    AggregatorV3Interface public mEurUsdPrice;\\r\\n\\r\\n    constructor( AggregatorV3Interface ethPriceFeed, AggregatorV3Interface eurPriceFeed ) public {\\r\\n        mEthUsdPrice = ethPriceFeed;\\r\\n        mEurUsdPrice = eurPriceFeed;\\r\\n    }\\r\\n\\r\\n    function setPriceFeed( AggregatorV3Interface ethPriceFeed, AggregatorV3Interface eurPriceFeed ) public onlyOwner {\\r\\n        mEthUsdPrice = ethPriceFeed;\\r\\n        mEurUsdPrice = eurPriceFeed;\\r\\n    }\\r\\n\\r\\n    function latestRoundData() override external view \\r\\n        returns (\\r\\n            uint80 roundId, \\r\\n            int256 answer, \\r\\n            uint256 startedAt, \\r\\n            uint256 updatedAt, \\r\\n            uint80 answeredInRound\\r\\n        ){\\r\\n        int256 ethAnswer;\\r\\n        int256 eurAnswer;            \\r\\n        ( roundId, ethAnswer, startedAt, updatedAt, answeredInRound ) = mEthUsdPrice.latestRoundData();\\r\\n        ( , eurAnswer, , , ) = mEurUsdPrice.latestRoundData();\\r\\n        if( ethAnswer > 0 && eurAnswer > 0 ){\\r\\n            // chainlink is 8 precise\\r\\n            uint256 uEthPrice = uint256(ethAnswer).mul(100000000);\\r\\n            uint256 uEurPrice = uint256(eurAnswer).mul(100000000);\\r\\n\\r\\n            answer = int256(uEthPrice.divideDecimal( uEurPrice));\\r\\n        }\\r\\n    }\\r\\n\\r\\n    function setPriceError( bool bError ) public onlyOwner {\\r\\n    }\\r\\n\\r\\n    function checkPriceError() external view override returns ( bool error ){\\r\\n        return false;\\r\\n    }     \\r\\n\\r\\n}\\r\\n\\r\\n\"\r\n    },\r\n    \"/contracts/interface/IPriceFeed.sol\": {\r\n      \"content\": \"\\n// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.6.0;\\n\\nimport \\\"@openzeppelin/contracts/access/Ownable.sol\\\";\\n\\n\\n/*\\nroundId: The round ID.\\nanswer: The price.\\nstartedAt: Timestamp of when the round started.\\nupdatedAt: Timestamp of when the round was updated.\\nansweredInRound: The round ID of the round in which the answer\\nwas computed.\\n*/\\ninterface IPriceFeed  {\\n    function latestRoundData() external view \\n        returns (\\n            uint80 roundId, \\n            int256 answer, \\n            uint256 startedAt, \\n            uint256 updatedAt, \\n            uint80 answeredInRound\\n        );\\n    function checkPriceError() external view returns ( bool error );     \\n}\"\r\n    },\r\n    \"/contracts/SafeDecimalMath.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\r\\npragma solidity ^0.6.12;\\r\\n\\r\\nimport \\\"@openzeppelin/contracts/math/SafeMath.sol\\\";\\r\\n\\r\\nlibrary SafeDecimalMath {\\r\\n    using SafeMath for uint;\\r\\n\\r\\n    uint8 public constant decimals = 18;\\r\\n    uint8 public constant highPrecisionDecimals = 27;\\r\\n\\r\\n    uint public constant UNIT = 10**uint(decimals);\\r\\n\\r\\n    uint public constant PRECISE_UNIT = 10**uint(highPrecisionDecimals);\\r\\n    uint private constant UNIT_TO_HIGH_PRECISION_CONVERSION_FACTOR = 10**uint(highPrecisionDecimals - decimals);\\r\\n\\r\\n    function unit() external pure returns (uint) {\\r\\n        return UNIT;\\r\\n    }\\r\\n\\r\\n    function preciseUnit() external pure returns (uint) {\\r\\n        return PRECISE_UNIT;\\r\\n    }\\r\\n\\r\\n    function multiplyDecimal(uint x, uint y) internal pure returns (uint) {\\r\\n        \\r\\n        return x.mul(y) / UNIT;\\r\\n    }\\r\\n\\r\\n    function _multiplyDecimalRound(\\r\\n        uint x,\\r\\n        uint y,\\r\\n        uint precisionUnit\\r\\n    ) private pure returns (uint) {\\r\\n        \\r\\n        uint quotientTimesTen = x.mul(y) / (precisionUnit / 10);\\r\\n\\r\\n        if (quotientTimesTen % 10 >= 5) {\\r\\n            quotientTimesTen += 10;\\r\\n        }\\r\\n\\r\\n        return quotientTimesTen / 10;\\r\\n    }\\r\\n\\r\\n    function multiplyDecimalRoundPrecise(uint x, uint y) internal pure returns (uint) {\\r\\n        return _multiplyDecimalRound(x, y, PRECISE_UNIT);\\r\\n    }\\r\\n\\r\\n    function multiplyDecimalRound(uint x, uint y) internal pure returns (uint) {\\r\\n        return _multiplyDecimalRound(x, y, UNIT);\\r\\n    }\\r\\n\\r\\n    function divideDecimal(uint x, uint y) internal pure returns (uint) {\\r\\n        \\r\\n        return x.mul(UNIT).div(y);\\r\\n    }\\r\\n\\r\\n    function _divideDecimalRound(\\r\\n        uint x,\\r\\n        uint y,\\r\\n        uint precisionUnit\\r\\n    ) private pure returns (uint) {\\r\\n        uint resultTimesTen = x.mul(precisionUnit * 10).div(y);\\r\\n\\r\\n        if (resultTimesTen % 10 >= 5) {\\r\\n            resultTimesTen += 10;\\r\\n        }\\r\\n\\r\\n        return resultTimesTen / 10;\\r\\n    }\\r\\n\\r\\n    function divideDecimalRound(uint x, uint y) internal pure returns (uint) {\\r\\n        return _divideDecimalRound(x, y, UNIT);\\r\\n    }\\r\\n\\r\\n    function divideDecimalRoundPrecise(uint x, uint y) internal pure returns (uint) {\\r\\n        return _divideDecimalRound(x, y, PRECISE_UNIT);\\r\\n    }\\r\\n\\r\\n    function decimalToPreciseDecimal(uint i) internal pure returns (uint) {\\r\\n        return i.mul(UNIT_TO_HIGH_PRECISION_CONVERSION_FACTOR);\\r\\n    }\\r\\n\\r\\n    function preciseDecimalToDecimal(uint i) internal pure returns (uint) {\\r\\n        uint quotientTimesTen = i / (UNIT_TO_HIGH_PRECISION_CONVERSION_FACTOR / 10);\\r\\n\\r\\n        if (quotientTimesTen % 10 >= 5) {\\r\\n            quotientTimesTen += 10;\\r\\n        }\\r\\n\\r\\n        return quotientTimesTen / 10;\\r\\n    }\\r\\n}\\r\\n\\r\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/math/SafeMath.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.6.0;\\n\\n/**\\n * @dev Wrappers over Solidity's arithmetic operations with added overflow\\n * checks.\\n *\\n * Arithmetic operations in Solidity wrap on overflow. This can easily result\\n * in bugs, because programmers usually assume that an overflow raises an\\n * error, which is the standard behavior in high level programming languages.\\n * `SafeMath` restores this intuition by reverting the transaction when an\\n * operation overflows.\\n *\\n * Using this library instead of the unchecked operations eliminates an entire\\n * class of bugs, so it's recommended to use it always.\\n */\\nlibrary SafeMath {\\n    /**\\n     * @dev Returns the addition of two unsigned integers, reverting on\\n     * overflow.\\n     *\\n     * Counterpart to Solidity's `+` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Addition cannot overflow.\\n     */\\n    function add(uint256 a, uint256 b) internal pure returns (uint256) {\\n        uint256 c = a + b;\\n        require(c >= a, \\\"SafeMath: addition overflow\\\");\\n\\n        return c;\\n    }\\n\\n    /**\\n     * @dev Returns the subtraction of two unsigned integers, reverting on\\n     * overflow (when the result is negative).\\n     *\\n     * Counterpart to Solidity's `-` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Subtraction cannot overflow.\\n     */\\n    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return sub(a, b, \\\"SafeMath: subtraction overflow\\\");\\n    }\\n\\n    /**\\n     * @dev Returns the subtraction of two unsigned integers, reverting with custom message on\\n     * overflow (when the result is negative).\\n     *\\n     * Counterpart to Solidity's `-` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Subtraction cannot overflow.\\n     */\\n    function sub(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\\n        require(b <= a, errorMessage);\\n        uint256 c = a - b;\\n\\n        return c;\\n    }\\n\\n    /**\\n     * @dev Returns the multiplication of two unsigned integers, reverting on\\n     * overflow.\\n     *\\n     * Counterpart to Solidity's `*` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Multiplication cannot overflow.\\n     */\\n    function mul(uint256 a, uint256 b) internal pure returns (uint256) {\\n        // Gas optimization: this is cheaper than requiring 'a' not being zero, but the\\n        // benefit is lost if 'b' is also tested.\\n        // See: https://github.com/OpenZeppelin/openzeppelin-contracts/pull/522\\n        if (a == 0) {\\n            return 0;\\n        }\\n\\n        uint256 c = a * b;\\n        require(c / a == b, \\\"SafeMath: multiplication overflow\\\");\\n\\n        return c;\\n    }\\n\\n    /**\\n     * @dev Returns the integer division of two unsigned integers. Reverts on\\n     * division by zero. The result is rounded towards zero.\\n     *\\n     * Counterpart to Solidity's `/` operator. Note: this function uses a\\n     * `revert` opcode (which leaves remaining gas untouched) while Solidity\\n     * uses an invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Requirements:\\n     *\\n     * - The divisor cannot be zero.\\n     */\\n    function div(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return div(a, b, \\\"SafeMath: division by zero\\\");\\n    }\\n\\n    /**\\n     * @dev Returns the integer division of two unsigned integers. Reverts with custom message on\\n     * division by zero. The result is rounded towards zero.\\n     *\\n     * Counterpart to Solidity's `/` operator. Note: this function uses a\\n     * `revert` opcode (which leaves remaining gas untouched) while Solidity\\n     * uses an invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Requirements:\\n     *\\n     * - The divisor cannot be zero.\\n     */\\n    function div(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\\n        require(b > 0, errorMessage);\\n        uint256 c = a / b;\\n        // assert(a == b * c + a % b); // There is no case in which this doesn't hold\\n\\n        return c;\\n    }\\n\\n    /**\\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\\n     * Reverts when dividing by zero.\\n     *\\n     * Counterpart to Solidity's `%` operator. This function uses a `revert`\\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\\n     * invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Requirements:\\n     *\\n     * - The divisor cannot be zero.\\n     */\\n    function mod(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return mod(a, b, \\\"SafeMath: modulo by zero\\\");\\n    }\\n\\n    /**\\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\\n     * Reverts with custom message when dividing by zero.\\n     *\\n     * Counterpart to Solidity's `%` operator. This function uses a `revert`\\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\\n     * invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Requirements:\\n     *\\n     * - The divisor cannot be zero.\\n     */\\n    function mod(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\\n        require(b != 0, errorMessage);\\n        return a % b;\\n    }\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/access/Ownable.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.6.0;\\n\\nimport \\\"../GSN/Context.sol\\\";\\n/**\\n * @dev Contract module which provides a basic access control mechanism, where\\n * there is an account (an owner) that can be granted exclusive access to\\n * specific functions.\\n *\\n * By default, the owner account will be the one that deploys the contract. This\\n * can later be changed with {transferOwnership}.\\n *\\n * This module is used through inheritance. It will make available the modifier\\n * `onlyOwner`, which can be applied to your functions to restrict their use to\\n * the owner.\\n */\\ncontract Ownable is Context {\\n    address private _owner;\\n\\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\\n\\n    /**\\n     * @dev Initializes the contract setting the deployer as the initial owner.\\n     */\\n    constructor () internal {\\n        address msgSender = _msgSender();\\n        _owner = msgSender;\\n        emit OwnershipTransferred(address(0), msgSender);\\n    }\\n\\n    /**\\n     * @dev Returns the address of the current owner.\\n     */\\n    function owner() public view returns (address) {\\n        return _owner;\\n    }\\n\\n    /**\\n     * @dev Throws if called by any account other than the owner.\\n     */\\n    modifier onlyOwner() {\\n        require(_owner == _msgSender(), \\\"Ownable: caller is not the owner\\\");\\n        _;\\n    }\\n\\n    /**\\n     * @dev Leaves the contract without owner. It will not be possible to call\\n     * `onlyOwner` functions anymore. Can only be called by the current owner.\\n     *\\n     * NOTE: Renouncing ownership will leave the contract without an owner,\\n     * thereby removing any functionality that is only available to the owner.\\n     */\\n    function renounceOwnership() public virtual onlyOwner {\\n        emit OwnershipTransferred(_owner, address(0));\\n        _owner = address(0);\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Can only be called by the current owner.\\n     */\\n    function transferOwnership(address newOwner) public virtual onlyOwner {\\n        require(newOwner != address(0), \\\"Ownable: new owner is the zero address\\\");\\n        emit OwnershipTransferred(_owner, newOwner);\\n        _owner = newOwner;\\n    }\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/GSN/Context.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.6.0;\\n\\n/*\\n * @dev Provides information about the current execution context, including the\\n * sender of the transaction and its data. While these are generally available\\n * via msg.sender and msg.data, they should not be accessed in such a direct\\n * manner, since when dealing with GSN meta-transactions the account sending and\\n * paying for execution may not be the actual sender (as far as an application\\n * is concerned).\\n *\\n * This contract is only required for intermediate, library-like contracts.\\n */\\nabstract contract Context {\\n    function _msgSender() internal view virtual returns (address payable) {\\n        return msg.sender;\\n    }\\n\\n    function _msgData() internal view virtual returns (bytes memory) {\\n        this; // silence state mutability warning without generating bytecode - see https://github.com/ethereum/solidity/issues/2691\\n        return msg.data;\\n    }\\n}\\n\"\r\n    },\r\n    \"@chainlink/contracts/src/v0.6/interfaces/AggregatorV3Interface.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\npragma solidity ^0.6.0;\\n\\ninterface AggregatorV3Interface {\\n\\n  function decimals()\\n    external\\n    view\\n    returns (\\n      uint8\\n    );\\n\\n  function description()\\n    external\\n    view\\n    returns (\\n      string memory\\n    );\\n\\n  function version()\\n    external\\n    view\\n    returns (\\n      uint256\\n    );\\n\\n  // getRoundData and latestRoundData should both raise \\\"No data present\\\"\\n  // if they do not have data to report, instead of returning unset values\\n  // which could be misinterpreted as actual reported values.\\n  function getRoundData(\\n    uint80 _roundId\\n  )\\n    external\\n    view\\n    returns (\\n      uint80 roundId,\\n      int256 answer,\\n      uint256 startedAt,\\n      uint256 updatedAt,\\n      uint80 answeredInRound\\n    );\\n\\n  function latestRoundData()\\n    external\\n    view\\n    returns (\\n      uint80 roundId,\\n      int256 answer,\\n      uint256 startedAt,\\n      uint256 updatedAt,\\n      uint80 answeredInRound\\n    );\\n\\n}\\n\"\r\n    }\r\n  },\r\n  \"settings\": {\r\n    \"remappings\": [],\r\n    \"optimizer\": {\r\n      \"enabled\": false,\r\n      \"runs\": 200\r\n    },\r\n    \"evmVersion\": \"istanbul\",\r\n    \"libraries\": {},\r\n    \"outputSelection\": {\r\n      \"*\": {\r\n        \"*\": [\r\n          \"evm.bytecode\",\r\n          \"evm.deployedBytecode\",\r\n          \"devdoc\",\r\n          \"userdoc\",\r\n          \"metadata\",\r\n          \"abi\"\r\n        ]\r\n      }\r\n    }\r\n  }\r\n}}","ABI":"[{\"inputs\":[{\"internalType\":\"contract AggregatorV3Interface\",\"name\":\"ethPriceFeed\",\"type\":\"address\"},{\"internalType\":\"contract AggregatorV3Interface\",\"name\":\"eurPriceFeed\",\"type\":\"address\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"checkPriceError\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"error\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"latestRoundData\",\"outputs\":[{\"internalType\":\"uint80\",\"name\":\"roundId\",\"type\":\"uint80\"},{\"internalType\":\"int256\",\"name\":\"answer\",\"type\":\"int256\"},{\"internalType\":\"uint256\",\"name\":\"startedAt\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"updatedAt\",\"type\":\"uint256\"},{\"internalType\":\"uint80\",\"name\":\"answeredInRound\",\"type\":\"uint80\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"mEthUsdPrice\",\"outputs\":[{\"internalType\":\"contract AggregatorV3Interface\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"mEurUsdPrice\",\"outputs\":[{\"internalType\":\"contract AggregatorV3Interface\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bool\",\"name\":\"bError\",\"type\":\"bool\"}],\"name\":\"setPriceError\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"contract AggregatorV3Interface\",\"name\":\"ethPriceFeed\",\"type\":\"address\"},{\"internalType\":\"contract AggregatorV3Interface\",\"name\":\"eurPriceFeed\",\"type\":\"address\"}],\"name\":\"setPriceFeed\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}]","ContractName":"ChainlinkEurEthPriceFeed","CompilerVersion":"v0.6.12+commit.27d51765","OptimizationUsed":"0","Runs":"200","ConstructorArguments":"0000000000000000000000005f4ec3df9cbd43714fe2740f5e3616155c5b8419000000000000000000000000b49f677943bc038e9857d61e7d053caa2c1734c1","EVMVersion":"Default","Library":"","LicenseType":"","Proxy":"0","Implementation":"","SwarmSource":""}]}