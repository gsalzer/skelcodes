{"status":"1","message":"OK","result":[{"SourceCode":"// File: @openzeppelin/contracts/token/ERC20/IERC20.sol\r\n\r\n\r\n\r\npragma solidity ^0.8.0;\r\n\r\n/**\r\n * @dev Interface of the ERC20 standard as defined in the EIP.\r\n */\r\ninterface IERC20 {\r\n    /**\r\n     * @dev Returns the amount of tokens in existence.\r\n     */\r\n    function totalSupply() external view returns (uint256);\r\n\r\n    /**\r\n     * @dev Returns the amount of tokens owned by `account`.\r\n     */\r\n    function balanceOf(address account) external view returns (uint256);\r\n\r\n    /**\r\n     * @dev Moves `amount` tokens from the caller's account to `recipient`.\r\n     *\r\n     * Returns a boolean value indicating whether the operation succeeded.\r\n     *\r\n     * Emits a {Transfer} event.\r\n     */\r\n    function transfer(address recipient, uint256 amount) external returns (bool);\r\n\r\n    /**\r\n     * @dev Returns the remaining number of tokens that `spender` will be\r\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\r\n     * zero by default.\r\n     *\r\n     * This value changes when {approve} or {transferFrom} are called.\r\n     */\r\n    function allowance(address owner, address spender) external view returns (uint256);\r\n\r\n    /**\r\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\r\n     *\r\n     * Returns a boolean value indicating whether the operation succeeded.\r\n     *\r\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\r\n     * that someone may use both the old and the new allowance by unfortunate\r\n     * transaction ordering. One possible solution to mitigate this race\r\n     * condition is to first reduce the spender's allowance to 0 and set the\r\n     * desired value afterwards:\r\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\r\n     *\r\n     * Emits an {Approval} event.\r\n     */\r\n    function approve(address spender, uint256 amount) external returns (bool);\r\n\r\n    /**\r\n     * @dev Moves `amount` tokens from `sender` to `recipient` using the\r\n     * allowance mechanism. `amount` is then deducted from the caller's\r\n     * allowance.\r\n     *\r\n     * Returns a boolean value indicating whether the operation succeeded.\r\n     *\r\n     * Emits a {Transfer} event.\r\n     */\r\n    function transferFrom(\r\n        address sender,\r\n        address recipient,\r\n        uint256 amount\r\n    ) external returns (bool);\r\n\r\n    /**\r\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\r\n     * another (`to`).\r\n     *\r\n     * Note that `value` may be zero.\r\n     */\r\n    event Transfer(address indexed from, address indexed to, uint256 value);\r\n\r\n    /**\r\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\r\n     * a call to {approve}. `value` is the new allowance.\r\n     */\r\n    event Approval(address indexed owner, address indexed spender, uint256 value);\r\n}\r\n\r\n// File: contracts/utils/Ownable.sol\r\n\r\n\r\n// OpenZeppelin Contracts v4.4.1 (access/Ownable.sol)\r\n\r\npragma solidity ^0.8.0;\r\n\r\n/**\r\n * @dev Contract module which provides a basic access control mechanism, where\r\n * there is an account (an owner) that can be granted exclusive access to\r\n * specific functions.\r\n *\r\n * By default, the owner account will be the one that deploys the contract. This\r\n * can later be changed with {transferOwnership}.\r\n *\r\n * This module is used through inheritance. It will make available the modifier\r\n * `onlyOwner`, which can be applied to your functions to restrict their use to\r\n * the owner.\r\n */\r\nabstract contract Ownable {\r\n    address private _owner;\r\n\r\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\r\n\r\n    /**\r\n     * @dev Initializes the contract setting the deployer as the initial owner.\r\n     */\r\n    constructor() {\r\n        _transferOwnership(msg.sender);\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the address of the current owner.\r\n     */\r\n    function owner() public view virtual returns (address) {\r\n        return _owner;\r\n    }\r\n\r\n    /**\r\n     * @dev Throws if called by any account other than the owner.\r\n     */\r\n    modifier onlyOwner() {\r\n        require(owner() == msg.sender, \"Ownable: caller is not the owner\");\r\n        _;\r\n    }\r\n\r\n    /**\r\n     * @dev Leaves the contract without owner. It will not be possible to call\r\n     * `onlyOwner` functions anymore. Can only be called by the current owner.\r\n     *\r\n     * NOTE: Renouncing ownership will leave the contract without an owner,\r\n     * thereby removing any functionality that is only available to the owner.\r\n     */\r\n    function renounceOwnership() public virtual onlyOwner {\r\n        _transferOwnership(address(0));\r\n    }\r\n\r\n    /**\r\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\r\n     * Can only be called by the current owner.\r\n     */\r\n    function transferOwnership(address newOwner) public virtual onlyOwner {\r\n        require(newOwner != address(0), \"Ownable: new owner is the zero address\");\r\n        _transferOwnership(newOwner);\r\n    }\r\n\r\n    /**\r\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\r\n     * Internal function without access restriction.\r\n     */\r\n    function _transferOwnership(address newOwner) internal {\r\n        address oldOwner = _owner;\r\n        _owner = newOwner;\r\n        emit OwnershipTransferred(oldOwner, newOwner);\r\n    }\r\n}\r\n// File: contracts/callAgent.sol\r\n\r\n\r\npragma solidity ^0.8.0;\r\n\r\n\r\n\r\ninterface SafeGuardWhiteList {\r\n    function isWhiteListed(address callee) external view returns (bool);\r\n}\r\n\r\ncontract CallAgent is Ownable {\r\n    address constant NULL = 0x0000000000000000000000000000000000000000;\r\n    bool private initialized = false;\r\n    address private _admin;\r\n    // If white list contract is null. local whitelist filter will be used.\r\n    address public whiteListContract = NULL;\r\n    mapping(address => bool) filter;\r\n    // todo add method to modify signaturedb\r\n    mapping(bytes4 => uint256) signatures;\r\n\r\n    // When operator changed.\r\n    event adminChanged(address newAdmin);\r\n    //  When operator triggered emergency\r\n    event paused();\r\n    // When switched to white list contract.\r\n    event whiteListChanged(address newWhiteList);\r\n\r\n    modifier requireAdmin() {\r\n        require(owner() == msg.sender || admin() == msg.sender, \"denied\");\r\n        _;\r\n    }\r\n\r\n    function ChangeAdmin(address newAdmin) public onlyOwner {\r\n        _admin = newAdmin;\r\n        emit adminChanged(newAdmin);\r\n    }\r\n\r\n    function ChangeWhiteList(address newWhiteList) public onlyOwner {\r\n        // todo: check if the external contract is legal whitelist.\r\n        whiteListContract = newWhiteList;\r\n        emit whiteListChanged(newWhiteList);\r\n    }\r\n\r\n    // Add local target address.\r\n    // Available when whitelist contract is null\r\n    function addLocalWhiteList(address[] memory callee) public onlyOwner {\r\n        for (uint256 i = 0; i < callee.length; i++) {\r\n            filter[callee[i]] = true;\r\n        }\r\n    }\r\n\r\n    function removeLocalWhiteList(address[] memory callee) public onlyOwner {\r\n        for (uint256 i = 0; i < callee.length; i++) {\r\n            filter[callee[i]] = false;\r\n        }\r\n    }\r\n\r\n    function checkWhiteList(address callee) public view returns (bool) {\r\n        if(whiteListContract == NULL) {\r\n            return filter[callee];\r\n        } \r\n        return SafeGuardWhiteList(whiteListContract).isWhiteListed(callee);\r\n    }\r\n\r\n    function initialize(address owner, address admin_) public {\r\n        require(!initialized, \"Already Initialized\");\r\n        Ownable._transferOwnership(owner);\r\n        _admin = admin_;\r\n        initialized = true;\r\n    }\r\n\r\n    function admin() public view returns (address) {\r\n        return _admin;\r\n    }\r\n\r\n    // Owner withdrawal ethereum.\r\n    function withdrawEth(uint256 amount, address payable out) public onlyOwner {\r\n        out.transfer(amount);\r\n    }\r\n\r\n    function withdrawErc20(uint256 amount, address erc20, address out) public onlyOwner {\r\n        IERC20(erc20).transfer(out, amount);\r\n    }\r\n\r\n    function emergencyPause() public requireAdmin {\r\n        _admin = 0x0000000000000000000000000000000000000000;\r\n        emit paused();\r\n    }\r\n\r\n    // Add filtered signatures\r\n    // src: function signature\r\n    // address_filter: where address begins\r\n    // Example:\r\n    //        src: 0xa9059cbb(Transfer)\r\n    //        address_filter: 4 (in ABI Encode of transfer(address, uint256), address begins at hex 0x4 location)\r\n    function addSignature(bytes4[] memory src, uint256[] memory address_filter) public onlyOwner {\r\n        for (uint256 i = 0; i < src.length; i++) {\r\n            signatures[src[i]] = address_filter[i];\r\n        }\r\n    }\r\n\r\n    function removeSignature(bytes4[] memory src) public onlyOwner {\r\n        for (uint256 i = 0; i < src.length; i++) {\r\n            signatures[src[i]] = 0;\r\n        }\r\n    }\r\n\r\n    function toBytes4(bytes memory payload) internal pure returns (bytes4 b) {\r\n        assembly {\r\n            b := mload(add(payload, 0x20))\r\n        }\r\n    }\r\n\r\n    function toAddress(bytes memory payload) internal pure returns (address b) {\r\n        assembly {\r\n            b := mload(add(payload, 0x20))\r\n        }\r\n    }\r\n\r\n    function callAgent(address callee, uint256 ethAmount, bytes calldata payload) public requireAdmin returns (bool, bytes memory) {\r\n        if(ethAmount != 0) {\r\n            if(!checkWhiteList(callee)) {\r\n                revert(\"no whitelist\");\r\n            }\r\n        } else {\r\n            bytes4 signature = toBytes4(payload[:4]);\r\n            uint256 p = signatures[signature];\r\n            if(p > 0) {\r\n                address addr = toAddress(payload[p:p + 32]);\r\n                if(!checkWhiteList(addr)) {\r\n                    revert(\"no whitelist\");\r\n                }\r\n            }\r\n        }\r\n        return callee.call{value: ethAmount}(payload);\r\n    }\r\n\r\n    receive() external payable {}\r\n    fallback() external payable {}\r\n\r\n}","ABI":"[{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"newAdmin\",\"type\":\"address\"}],\"name\":\"adminChanged\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[],\"name\":\"paused\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"newWhiteList\",\"type\":\"address\"}],\"name\":\"whiteListChanged\",\"type\":\"event\"},{\"stateMutability\":\"payable\",\"type\":\"fallback\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newAdmin\",\"type\":\"address\"}],\"name\":\"ChangeAdmin\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newWhiteList\",\"type\":\"address\"}],\"name\":\"ChangeWhiteList\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address[]\",\"name\":\"callee\",\"type\":\"address[]\"}],\"name\":\"addLocalWhiteList\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes4[]\",\"name\":\"src\",\"type\":\"bytes4[]\"},{\"internalType\":\"uint256[]\",\"name\":\"address_filter\",\"type\":\"uint256[]\"}],\"name\":\"addSignature\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"admin\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"callee\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"ethAmount\",\"type\":\"uint256\"},{\"internalType\":\"bytes\",\"name\":\"payload\",\"type\":\"bytes\"}],\"name\":\"callAgent\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"},{\"internalType\":\"bytes\",\"name\":\"\",\"type\":\"bytes\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"callee\",\"type\":\"address\"}],\"name\":\"checkWhiteList\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"emergencyPause\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"admin_\",\"type\":\"address\"}],\"name\":\"initialize\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address[]\",\"name\":\"callee\",\"type\":\"address[]\"}],\"name\":\"removeLocalWhiteList\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes4[]\",\"name\":\"src\",\"type\":\"bytes4[]\"}],\"name\":\"removeSignature\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"whiteListContract\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"erc20\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"out\",\"type\":\"address\"}],\"name\":\"withdrawErc20\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"internalType\":\"address payable\",\"name\":\"out\",\"type\":\"address\"}],\"name\":\"withdrawEth\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"stateMutability\":\"payable\",\"type\":\"receive\"}]","ContractName":"CallAgent","CompilerVersion":"v0.8.7+commit.e28d00a7","OptimizationUsed":"0","Runs":"200","ConstructorArguments":"","EVMVersion":"Default","Library":"","LicenseType":"MIT","Proxy":"0","Implementation":"","SwarmSource":"ipfs://2f45fb63637535fc837922f13755f8a305da4337e75e13291713833506334ed9"}]}