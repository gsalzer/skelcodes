{"status":"1","message":"OK","result":[{"SourceCode":"// SPDX-License-Identifier: MIT\r\npragma solidity >=0.6.0 <0.8.0;\r\n\r\ncontract PriorApprovalERC20 {\r\n\r\n    event OnPriorApproval (\r\n        address indexed receiver,\r\n        address indexed approver,\r\n        uint256 indexed blockTime\r\n    );\r\n\r\n    event OnPriorApprovalRemoval (        \r\n        address indexed receiver,\r\n        address indexed approver,\r\n        uint256 indexed blockTime\r\n    );\r\n\r\n    //List of addresses that can approve receivers to receive tokens sent from the Token Contract\r\n    address[] private _approverAddressList; \r\n\r\n    //Minimum number of approvals required for any address to receive tokens sent from the Token Contract\r\n    uint256 private _minimumApprovalCountRequired;\r\n    \r\n    //A map with key as receiver and value as approver. \r\n    //This map gets an entry when an approver approves a receiver\r\n    //The entry gets removed when approver revokes the approval\r\n    mapping(bytes32 => bool) _receiverApproverMapping;\r\n\r\n    constructor(address[] memory approverAddressList, uint256 minimumApprovalCountRequired){\r\n         require(approverAddressList.length == 4, \"Approver count does not match the number of assigned approvers\");\r\n         require(minimumApprovalCountRequired == 3, \"Minimum approval count does not  match the number of assigned approvals\");\r\n        _approverAddressList = approverAddressList;\r\n        _minimumApprovalCountRequired = minimumApprovalCountRequired;\r\n    }\r\n\r\n    modifier restricted() {\r\n        require(isApprover() == true, \"Caller is not an approver\");\r\n        _;\r\n    }\r\n    \r\n    function append(address a, address c) internal pure returns (bytes32) {\r\n        return sha256(abi.encodePacked(a, c));\r\n    }\r\n\r\n    //This function is called when an approver makes a request to approve a receiver\r\n    function newPriorApprovalERC20(\r\n        address receiver) \r\n        external\r\n        restricted()\r\n    returns (bool)\r\n    {\r\n        _receiverApproverMapping[append(receiver, msg.sender)] = true;\r\n        emit OnPriorApproval(receiver, msg.sender, block.timestamp);\r\n        return true;\r\n    }\r\n    \r\n    //This function is called when an approval makes a request to revoke an approval\r\n    function removePriorApprovalERC20(address receiver)\r\n        external\r\n        restricted()\r\n        returns (bool)\r\n    {\r\n        _receiverApproverMapping[append(receiver, msg.sender)] = false;\r\n        emit OnPriorApprovalRemoval(receiver, msg.sender, block.timestamp);\r\n        return true;\r\n    }\r\n\r\n    //This function is called when you need to check whether the receiver is approved or not\r\n    function verifyPriorApprovalERC20(address receiver)\r\n        public\r\n        view\r\n        returns (bool)\r\n    {\r\n        uint256 approvalCount = 0; \r\n        uint arrayLength = _approverAddressList.length;\r\n        for (uint i = 0; i < arrayLength; i++) {\r\n            if(_receiverApproverMapping[append(receiver, _approverAddressList[i])] == true) {\r\n                approvalCount = approvalCount + 1;\r\n            }\r\n        }\r\n        \r\n        if(approvalCount >= _minimumApprovalCountRequired){\r\n            return true;\r\n        }\r\n        \r\n        return false;\r\n    }\r\n    \r\n    //This function is called to find whether an approver has approved a receiver or not\r\n    function getPriorApprovalERC20(address receiver, address approver)\r\n        public\r\n        view\r\n        returns (\r\n            bool approved\r\n        )\r\n    {\r\n        approved = _receiverApproverMapping[append(receiver, approver)];\r\n    }\r\n\r\n\r\n    //This function is called to find whether the message sender is an approver or not\r\n    function isApprover()\r\n        private\r\n        view\r\n        returns (bool)\r\n    {\r\n        uint arrayLength = _approverAddressList.length;\r\n        for (uint i = 0; i < arrayLength; i++) {\r\n            if(_approverAddressList[i] == msg.sender) {\r\n                return true;\r\n            }\r\n        }\r\n        return false;\r\n    }\r\n}","ABI":"[{\"inputs\":[{\"internalType\":\"address[]\",\"name\":\"approverAddressList\",\"type\":\"address[]\"},{\"internalType\":\"uint256\",\"name\":\"minimumApprovalCountRequired\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"receiver\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"approver\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"blockTime\",\"type\":\"uint256\"}],\"name\":\"OnPriorApproval\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"receiver\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"approver\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"blockTime\",\"type\":\"uint256\"}],\"name\":\"OnPriorApprovalRemoval\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"receiver\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"approver\",\"type\":\"address\"}],\"name\":\"getPriorApprovalERC20\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"approved\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"receiver\",\"type\":\"address\"}],\"name\":\"newPriorApprovalERC20\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"receiver\",\"type\":\"address\"}],\"name\":\"removePriorApprovalERC20\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"receiver\",\"type\":\"address\"}],\"name\":\"verifyPriorApprovalERC20\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"}]","ContractName":"PriorApprovalERC20","CompilerVersion":"v0.7.6+commit.7338295f","OptimizationUsed":"0","Runs":"200","ConstructorArguments":"0000000000000000000000000000000000000000000000000000000000000040000000000000000000000000000000000000000000000000000000000000000300000000000000000000000000000000000000000000000000000000000000040000000000000000000000003669bce71b492a57a83c3079f329ef5701289e17000000000000000000000000e15ac7c970e64e4c68d111076560a28d9634db0f000000000000000000000000cd1f32710eaf137549e0d00c26d826d34ea81f640000000000000000000000003095e4a3ffb7a1e7c25eb46b988180b7840801f1","EVMVersion":"Default","Library":"","LicenseType":"MIT","Proxy":"0","Implementation":"","SwarmSource":"ipfs://65310958790aa0c111b8312db1229afda4fb6f820a04d6fbdaea6f7c86523b2d"}]}