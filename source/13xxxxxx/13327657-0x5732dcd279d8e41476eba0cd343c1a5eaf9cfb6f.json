{"status":"1","message":"OK","result":[{"SourceCode":"{\"DFBTCpools.sol\":{\"content\":\"pragma solidity =0.6.6;\\r\\npragma experimental ABIEncoderV2;\\r\\n\\r\\nimport \\u0027./SafeMath.sol\\u0027;\\r\\nimport \\u0027./TransferHelper.sol\\u0027;\\r\\nimport \\u0027./IERC20.sol\\u0027;\\r\\nimport \\u0027./UQ112x112.sol\\u0027;\\r\\n\\r\\ncontract DFBTCPools {\\r\\n   \\r\\n    using SafeMath for uint; \\r\\n    using UQ112x112 for uint224;\\r\\n   \\r\\n    struct UserAssetsRecord {\\r\\n        address _user;\\r\\n        uint _startTime;\\r\\n        uint _pledgeCycle;\\r\\n        uint _amount;\\r\\n        uint _hasTakeOut;\\r\\n        bool _bFinished;\\r\\n    }\\r\\n    \\r\\n    UserAssetsRecord[] public userAssetsRecordList;\\r\\n    mapping(address=\\u003eUserAssetsRecord[]) public userAmounts;\\r\\n    \\r\\n    uint  public decreaseVal = 10;\\r\\n    uint  public totalDays = 365;\\r\\n    uint  public dayTakeout = 40;\\r\\n    address public dfbtc = 0x67C8d54F38369571AAe70183b8568494032b5D7C;\\r\\n    address public aom = 0x060924FB947e37EEE230d0B1A71D9618aEc269fC;\\r\\n    address public owner;\\r\\n    mapping(uint=\\u003ebool) public pledgeCyclemap;\\r\\n    mapping(uint=\\u003euint) public baseCalPower;\\r\\n    mapping(uint=\\u003euint) public annualizedRate;\\r\\n    mapping(address=\\u003euint) public userToCounts;\\r\\n    mapping(address=\\u003euint) public userToTakeOut;\\r\\n    \\r\\n    uint private unlocked = 1;\\r\\n    modifier lock() {\\r\\n        require(unlocked == 1, \\u0027dfbtc: LOCKED\\u0027);\\r\\n        unlocked = 0;\\r\\n        _;\\r\\n        unlocked = 1;\\r\\n    }\\r\\n    \\r\\n    modifier onlyOnwer {\\r\\n        require(owner == msg.sender, \\\"dfbtc: The caller must be onwer!!!\\\");\\r\\n        _;\\r\\n    }\\r\\n    \\r\\n    constructor() public {\\r\\n        owner = msg.sender;\\r\\n        \\r\\n        pledgeCyclemap[7] = true;\\r\\n        pledgeCyclemap[30] = true;\\r\\n        pledgeCyclemap[90] = true;\\r\\n        pledgeCyclemap[180] = true;\\r\\n        \\r\\n        baseCalPower[7] = 55;\\r\\n        baseCalPower[30] = 65;\\r\\n        baseCalPower[90] = 75;\\r\\n        baseCalPower[180] = 81;\\r\\n        \\r\\n        annualizedRate[7] = 6;\\r\\n        annualizedRate[30] = 8;\\r\\n        annualizedRate[90] = 11;\\r\\n        annualizedRate[180] = 15;\\r\\n        \\r\\n        //addAssets(msg.sender, 7, 10000);\\r\\n        //addAssets(msg.sender, 30, 10000);\\r\\n        //addAssets(msg.sender, 90, 10000);\\r\\n        //addAssets(msg.sender, 180, 10000);\\r\\n    }\\r\\n    \\r\\n    function setPledgeCycle(uint cyclein, bool valin) public lock onlyOnwer returns(bool){\\r\\n        pledgeCyclemap[cyclein] = valin;\\r\\n        return true;\\r\\n    }\\r\\n    \\r\\n    function setBasePower(uint cyclein, uint valin) public lock onlyOnwer returns(bool){\\r\\n        baseCalPower[cyclein] = valin;\\r\\n        return true;\\r\\n    }\\r\\n    \\r\\n    function setAnnualizedRate(uint cyclein, uint valin) public lock onlyOnwer returns(bool){\\r\\n        annualizedRate[cyclein] = valin;\\r\\n        return true;\\r\\n    }\\r\\n    \\r\\n    function setTotalDays(uint valin) public lock onlyOnwer returns(bool){\\r\\n        totalDays = valin;\\r\\n        return true;\\r\\n    }\\r\\n    \\r\\n    function setDecreaseVal(uint valin) public lock onlyOnwer returns(bool){\\r\\n        decreaseVal = valin;\\r\\n        return true;\\r\\n    }\\r\\n    \\r\\n    function setDayTakeout(uint valin) public lock onlyOnwer returns(bool){\\r\\n        dayTakeout = valin;\\r\\n        return true;\\r\\n    }\\r\\n    \\r\\n    function setDfbtc(address valin) public lock onlyOnwer returns(bool){\\r\\n        dfbtc = valin;\\r\\n        return true;\\r\\n    }\\r\\n    \\r\\n    function setAom(address valin) public lock onlyOnwer returns(bool){\\r\\n        aom = valin;\\r\\n        return true;\\r\\n    }\\r\\n    \\r\\n    function setOwner(address valin) public lock onlyOnwer returns(bool){\\r\\n        owner = valin;\\r\\n        return true;\\r\\n    }\\r\\n    function safeTransferToOtherPools(address tokenAddress, address toAdddress, uint transferValue) public lock onlyOnwer {\\r\\n        TransferHelper.safeTransfer(tokenAddress, toAdddress, transferValue);\\r\\n    }\\r\\n    \\r\\n    function getPledgeAmount(address user) public view returns(uint){\\r\\n        uint totalAom = 0;\\r\\n        for(uint i=0; i\\u003cuserAmounts[user].length; i++){\\r\\n            if(userAmounts[user][i]._bFinished == false){\\r\\n                totalAom = totalAom.add(userAmounts[user][i]._amount);\\r\\n            }\\r\\n        }\\r\\n        return totalAom;\\r\\n    }\\r\\n    \\r\\n    function getAomByUser(address user) public view returns(uint){\\r\\n        //UserAssetsRecord[] storage uRecord = userAmounts[user];\\r\\n        uint totalAom = 0;\\r\\n        for(uint i=0; i\\u003cuserAmounts[user].length; i++){\\r\\n            if(userAmounts[user][i]._bFinished == false){\\r\\n                totalAom = totalAom.add(calTotalAomByStartTime(userAmounts[user][i]._startTime, userAmounts[user][i]._pledgeCycle, userAmounts[user][i]._amount));\\r\\n                totalAom = totalAom.sub(userAmounts[user][i]._hasTakeOut);\\r\\n            }\\r\\n        }\\r\\n        \\r\\n        return totalAom;\\r\\n    }\\r\\n    \\r\\n    function getAomByOrder(address user, uint order) public view returns(uint,uint,bool){\\r\\n        uint hasDays = (now.sub(userAmounts[user][order]._startTime)).div(1 days);\\r\\n        \\r\\n        uint totalAom = calTotalAomByStartTime(userAmounts[user][order]._startTime, userAmounts[user][order]._pledgeCycle, userAmounts[user][order]._amount);\\r\\n        bool isEnd = hasDays\\u003euserAmounts[user][order]._pledgeCycle ? true : false;\\r\\n        \\r\\n        uint remainingAom = 0;\\r\\n        if(isEnd){\\r\\n            remainingAom = totalAom.sub(userAmounts[msg.sender][order]._hasTakeOut);\\r\\n        }else{\\r\\n            remainingAom = totalAom.mul(dayTakeout).div(100).sub(userAmounts[msg.sender][order]._hasTakeOut);\\r\\n        }\\r\\n        \\r\\n        return (totalAom, remainingAom, isEnd);\\r\\n    }\\r\\n    \\r\\n    function getAomByOrderOne(address user, uint order) public view returns(uint,uint){\\r\\n        uint hasDays = (now.sub(userAmounts[user][order]._startTime)).div(1 days);\\r\\n        \\r\\n        uint totalAom = calTotalAomByStartTime(userAmounts[user][order]._startTime, userAmounts[user][order]._pledgeCycle, userAmounts[user][order]._amount);\\r\\n        bool isEnd = hasDays\\u003euserAmounts[user][order]._pledgeCycle ? true : false;\\r\\n        \\r\\n        uint remainingAom = 0;\\r\\n        if(isEnd){\\r\\n            remainingAom = totalAom.sub(userAmounts[msg.sender][order]._hasTakeOut);\\r\\n        }else{\\r\\n            remainingAom = totalAom.mul(dayTakeout).div(100).sub(userAmounts[msg.sender][order]._hasTakeOut);\\r\\n        }\\r\\n        \\r\\n        return (totalAom, remainingAom);\\r\\n    }\\r\\n    \\r\\n    function getAomByOrderTwo(address user, uint order) public view returns(uint){\\r\\n        uint totalAom = calTotalAomByStartTime(userAmounts[user][order]._startTime, userAmounts[user][order]._pledgeCycle, userAmounts[user][order]._amount);\\r\\n        return totalAom;\\r\\n    }\\r\\n    \\r\\n    function addAssets(address user, uint pledgeCycle, uint amount) public returns(bool){\\r\\n        require(pledgeCyclemap[pledgeCycle], \\\"dfbtc: No such cycle!!!\\\");\\r\\n        require(amount\\u003e0, \\\"dfbtc: You have no assets!!!\\\");\\r\\n        require(IERC20(dfbtc).balanceOf(user)\\u003e=amount, \\\"dfbtc: Insufficient quantity!!!\\\");\\r\\n        \\r\\n        UserAssetsRecord memory record = UserAssetsRecord({\\r\\n            _user : user,\\r\\n            _startTime : now,\\r\\n            _pledgeCycle : pledgeCycle,//*1 days,\\r\\n            _amount : amount,\\r\\n            _hasTakeOut : 0,\\r\\n            _bFinished: false\\r\\n        });\\r\\n        \\r\\n        TransferHelper.safeTransferFrom(dfbtc, user, address(this), amount);\\r\\n      \\r\\n        userAssetsRecordList.push(record);\\r\\n        userAmounts[user].push(record);\\r\\n        userToCounts[user] = userToCounts[user].add(1);\\r\\n        \\r\\n        return true;\\r\\n    }\\r\\n    \\r\\n    function takeOutAssets(uint order) public returns(bool){\\r\\n        require(userAmounts[msg.sender][order]._user == msg.sender, \\\"dfbtc: You have no assets!!!\\\");\\r\\n        require(userAmounts[msg.sender][order]._bFinished == false, \\\"dfbtc: You have no assets!!!\\\");\\r\\n        \\r\\n        uint hasDays = (now.sub(userAmounts[msg.sender][order]._startTime)).div(1 days);\\r\\n        \\r\\n        uint totalAom = calTotalAomByStartTime(userAmounts[msg.sender][order]._startTime, userAmounts[msg.sender][order]._pledgeCycle, userAmounts[msg.sender][order]._amount);\\r\\n        bool isEnd = hasDays\\u003euserAmounts[msg.sender][order]._pledgeCycle ? true : false;\\r\\n        \\r\\n        uint remainingAom = 0;\\r\\n        if(isEnd){\\r\\n            remainingAom = totalAom.sub(userAmounts[msg.sender][order]._hasTakeOut);\\r\\n        }else{\\r\\n            remainingAom = totalAom.mul(dayTakeout).div(100).sub(userAmounts[msg.sender][order]._hasTakeOut);\\r\\n        }\\r\\n        \\r\\n        \\r\\n        require(remainingAom\\u003e0, \\\"dfbtc: You have no assets!!!\\\");\\r\\n        userAmounts[msg.sender][order]._hasTakeOut = remainingAom.add(userAmounts[msg.sender][order]._hasTakeOut);\\r\\n        userToTakeOut[msg.sender] = userToTakeOut[msg.sender].add(remainingAom);\\r\\n        TransferHelper.safeTransfer(aom, msg.sender, remainingAom);\\r\\n        \\r\\n        if(isEnd){\\r\\n            userAmounts[msg.sender][order]._bFinished = true;\\r\\n            TransferHelper.safeTransfer(dfbtc, msg.sender, userAmounts[msg.sender][order]._amount);\\r\\n        }\\r\\n        \\r\\n        return true;\\r\\n    }\\r\\n    \\r\\n    function takeOutAom(uint order, uint amount) public returns(bool){\\r\\n        require(userAmounts[msg.sender][order]._user == msg.sender, \\\"dfbtc: You have no assets!!!\\\");\\r\\n        require(userAmounts[msg.sender][order]._bFinished == false, \\\"dfbtc: You have no assets!!!\\\");\\r\\n        \\r\\n        uint hasDays = (now.sub(userAmounts[msg.sender][order]._startTime)).div(1 days);\\r\\n        \\r\\n        uint totalAom = calTotalAomByStartTime(userAmounts[msg.sender][order]._startTime, userAmounts[msg.sender][order]._pledgeCycle, userAmounts[msg.sender][order]._amount);\\r\\n        uint remainingAom = totalAom.mul(dayTakeout.div(100)).sub(userAmounts[msg.sender][order]._hasTakeOut);\\r\\n        \\r\\n        require(remainingAom\\u003e0, \\\"dfbtc: You have no assets!!!\\\");\\r\\n        require(remainingAom\\u003e=amount, \\\"dfbtc: You have no assets!!!\\\");\\r\\n        userAmounts[msg.sender][order]._hasTakeOut = amount.add(userAmounts[msg.sender][order]._hasTakeOut);\\r\\n        userToTakeOut[msg.sender] = userToTakeOut[msg.sender].add(amount);\\r\\n        TransferHelper.safeTransfer(dfbtc, msg.sender, amount);\\r\\n        \\r\\n        if(hasDays\\u003e=userAmounts[msg.sender][order]._pledgeCycle \\u0026\\u0026 totalAom == userAmounts[msg.sender][order]._hasTakeOut){\\r\\n            userAmounts[msg.sender][order]._bFinished = true;\\r\\n        }\\r\\n        \\r\\n        return true;\\r\\n    }\\r\\n    \\r\\n    function takeOutAomByAmount(uint amount) public returns(bool){\\r\\n        require(userToCounts[msg.sender] \\u003e 0, \\\"dfbtc: You have no assets!!!\\\");\\r\\n        uint totalAom = calAomByUser(msg.sender);\\r\\n        require(userToTakeOut[msg.sender] \\u003c totalAom, \\\"dfbtc: You have no assets!!!\\\");\\r\\n        require(totalAom.sub(userToTakeOut[msg.sender]) \\u003e= amount, \\\"dfbtc: You have no assets!!!\\\");\\r\\n        \\r\\n        userToTakeOut[msg.sender] = userToTakeOut[msg.sender].add(amount);\\r\\n        TransferHelper.safeTransfer(dfbtc, msg.sender, amount);\\r\\n        \\r\\n        return true;\\r\\n    }\\r\\n    \\r\\n    function calAom(uint startTime, uint pledgeCycle, uint amount) public view returns(uint){\\r\\n        uint nowTime = now;\\r\\n        uint hasDays = (nowTime.sub(startTime)).div(1 days);\\r\\n        hasDays = (hasDays\\u003c=pledgeCycle) ? hasDays : pledgeCycle;\\r\\n        uint calPower = decreaseVal.mul(baseCalPower[pledgeCycle].add(hasDays.div(10)).add(amount.div(10000)));\\r\\n        uint stakingAmount = (amount.mul(calPower).mul(hasDays).mul(annualizedRate[pledgeCycle].div(100))).div(totalDays);\\r\\n        return stakingAmount.div(pledgeCycle);\\r\\n    }\\r\\n    \\r\\n    function calAomEveryDay(uint hasDays, uint pledgeCycle, uint amount) public  view returns(uint){\\r\\n        uint calPower = decreaseVal.mul(baseCalPower[pledgeCycle].mul(10000).mul(1000000000000000000).add(hasDays.mul(1000).mul(1000000000000000000)).add(amount));\\r\\n        uint stakingAmount = (amount.mul(calPower).mul(hasDays).mul(annualizedRate[pledgeCycle])).div(totalDays).div(10000000000000000000000000);\\r\\n        return stakingAmount.div(pledgeCycle);\\r\\n    }\\r\\n    \\r\\n    function calTotalAomByStartTime(uint startTime, uint pledgeCycle, uint amount) public view returns(uint){\\r\\n        uint hasDays = (now.sub(startTime)).div(1 days);\\r\\n        uint totalAom = 0;\\r\\n        hasDays = (hasDays\\u003c=pledgeCycle) ? hasDays : pledgeCycle;\\r\\n        for(uint i=1; i\\u003c=hasDays; i++){\\r\\n            totalAom = totalAom.add(calAomEveryDay(i, pledgeCycle, amount));\\r\\n        }\\r\\n        \\r\\n        return totalAom;\\r\\n    }\\r\\n    \\r\\n    function calTotalAomCount(uint hasDays, uint pledgeCycle, uint amount) public view returns(uint){\\r\\n        uint totalAom = 0;\\r\\n        for(uint i=1; i\\u003c=hasDays; i++){\\r\\n            totalAom = totalAom.add(calAomEveryDay(i, pledgeCycle, amount));\\r\\n        }\\r\\n        \\r\\n        return totalAom;\\r\\n    }\\r\\n    \\r\\n    function calAomByUser(address user) public view returns(uint){\\r\\n        //UserAssetsRecord[] storage uRecord = userAmounts[user];\\r\\n        uint totalAom = 0;\\r\\n        for(uint i=0; i\\u003cuserAmounts[user].length; i++){\\r\\n            if(userAmounts[user][i]._bFinished == false){\\r\\n                totalAom = totalAom.add(calTotalAomByStartTime(userAmounts[user][i]._startTime, userAmounts[user][i]._pledgeCycle, userAmounts[user][i]._amount));\\r\\n            }\\r\\n        }\\r\\n        \\r\\n        return totalAom;\\r\\n    }\\r\\n    \\r\\n    function getAssetsRecord(address user) public view returns(UserAssetsRecord[] memory){\\r\\n        return userAmounts[user];\\r\\n    }\\r\\n  \\r\\n}\\r\\n\"},\"IERC20.sol\":{\"content\":\"pragma solidity \\u003e=0.5.0;\\n\\ninterface IERC20 {\\n    event Approval(address indexed owner, address indexed spender, uint value);\\n    event Transfer(address indexed from, address indexed to, uint value);\\n\\n    function name() external view returns (string memory);\\n    function symbol() external view returns (string memory);\\n    function decimals() external view returns (uint8);\\n    function totalSupply() external view returns (uint);\\n    function balanceOf(address owner) external view returns (uint);\\n    function allowance(address owner, address spender) external view returns (uint);\\n\\n    function approve(address spender, uint value) external returns (bool);\\n    function transfer(address to, uint value) external returns (bool);\\n    function transferFrom(address from, address to, uint value) external returns (bool);\\n\\n    function mint(address _to, uint256 _amount) external returns (bool);\\n    function burn(uint value) external;\\n}\\n\"},\"SafeMath.sol\":{\"content\":\"pragma solidity =0.6.6;\\n\\n// a library for performing overflow-safe math, courtesy of DappHub (https://github.com/dapphub/ds-math)\\n\\nlibrary SafeMath {\\n  function mul(uint256 _a, uint256 _b) internal pure returns (uint256 c) {\\n    if (_a == 0) {\\n      return 0;\\n    }\\n\\n    c = _a * _b;\\n    assert(c / _a == _b);\\n    return c;\\n  }\\n\\n  function div(uint256 _a, uint256 _b) internal pure returns (uint256) {\\n    return _a / _b;\\n  }\\n\\n  function sub(uint256 _a, uint256 _b) internal pure returns (uint256) {\\n    assert(_b \\u003c= _a);\\n    return _a - _b;\\n  }\\n\\n  function add(uint256 _a, uint256 _b) internal pure returns (uint256 c) {\\n    c = _a + _b;\\n    assert(c \\u003e= _a);\\n    return c;\\n  }\\n}\"},\"TransferHelper.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-3.0-or-later\\n\\npragma solidity \\u003e=0.5.16;\\n\\n// helper methods for interacting with ERC20 tokens and sending ETH that do not consistently return true/false\\nlibrary TransferHelper {\\n    function safeApprove(\\n        address token,\\n        address to,\\n        uint256 value\\n    ) internal {\\n        // bytes4(keccak256(bytes(\\u0027approve(address,uint256)\\u0027)));\\n        (bool success, bytes memory data) = token.call(abi.encodeWithSelector(0x095ea7b3, to, value));\\n        require(\\n            success \\u0026\\u0026 (data.length == 0 || abi.decode(data, (bool))),\\n            \\u0027TransferHelper::safeApprove: approve failed\\u0027\\n        );\\n    }\\n\\n    function safeTransfer(\\n        address token,\\n        address to,\\n        uint256 value\\n    ) internal {\\n        // bytes4(keccak256(bytes(\\u0027transfer(address,uint256)\\u0027)));\\n        (bool success, bytes memory data) = token.call(abi.encodeWithSelector(0xa9059cbb, to, value));\\n        require(\\n            success \\u0026\\u0026 (data.length == 0 || abi.decode(data, (bool))),\\n            \\u0027TransferHelper::safeTransfer: transfer failed\\u0027\\n        );\\n    }\\n\\n    function safeTransferFrom(\\n        address token,\\n        address from,\\n        address to,\\n        uint256 value\\n    ) internal {\\n        // bytes4(keccak256(bytes(\\u0027transferFrom(address,address,uint256)\\u0027)));\\n        (bool success, bytes memory data) = token.call(abi.encodeWithSelector(0x23b872dd, from, to, value));\\n        require(\\n            success \\u0026\\u0026 (data.length == 0 || abi.decode(data, (bool))),\\n            \\u0027TransferHelper::transferFrom: transferFrom failed\\u0027\\n        );\\n    }\\n}\\n\"},\"UQ112x112.sol\":{\"content\":\"pragma solidity =0.6.6;\\n\\n// a library for handling binary fixed point numbers (https://en.wikipedia.org/wiki/Q_(number_format))\\n\\n// range: [0, 2**112 - 1]\\n// resolution: 1 / 2**112\\n\\nlibrary UQ112x112 {\\n    uint224 constant Q112 = 2**112;\\n\\n    // encode a uint112 as a UQ112x112\\n    function encode(uint112 y) internal pure returns (uint224 z) {\\n        z = uint224(y) * Q112; // never overflows\\n    }\\n\\n    // divide a UQ112x112 by a uint112, returning a UQ112x112\\n    function uqdiv(uint224 x, uint112 y) internal pure returns (uint224 z) {\\n        z = x / uint224(y);\\n    }\\n}\\n\"}}","ABI":"[{\"inputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"pledgeCycle\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"addAssets\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"annualizedRate\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"aom\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"baseCalPower\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"startTime\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"pledgeCycle\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"calAom\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"}],\"name\":\"calAomByUser\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"hasDays\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"pledgeCycle\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"calAomEveryDay\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"startTime\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"pledgeCycle\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"calTotalAomByStartTime\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"hasDays\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"pledgeCycle\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"calTotalAomCount\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"dayTakeout\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"decreaseVal\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"dfbtc\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"order\",\"type\":\"uint256\"}],\"name\":\"getAomByOrder\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"},{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"order\",\"type\":\"uint256\"}],\"name\":\"getAomByOrderOne\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"order\",\"type\":\"uint256\"}],\"name\":\"getAomByOrderTwo\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"}],\"name\":\"getAomByUser\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"}],\"name\":\"getAssetsRecord\",\"outputs\":[{\"components\":[{\"internalType\":\"address\",\"name\":\"_user\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_startTime\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_pledgeCycle\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_hasTakeOut\",\"type\":\"uint256\"},{\"internalType\":\"bool\",\"name\":\"_bFinished\",\"type\":\"bool\"}],\"internalType\":\"struct DFBTCPools.UserAssetsRecord[]\",\"name\":\"\",\"type\":\"tuple[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"}],\"name\":\"getPledgeAmount\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"pledgeCyclemap\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"tokenAddress\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"toAdddress\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"transferValue\",\"type\":\"uint256\"}],\"name\":\"safeTransferToOtherPools\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"cyclein\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"valin\",\"type\":\"uint256\"}],\"name\":\"setAnnualizedRate\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"valin\",\"type\":\"address\"}],\"name\":\"setAom\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"cyclein\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"valin\",\"type\":\"uint256\"}],\"name\":\"setBasePower\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"valin\",\"type\":\"uint256\"}],\"name\":\"setDayTakeout\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"valin\",\"type\":\"uint256\"}],\"name\":\"setDecreaseVal\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"valin\",\"type\":\"address\"}],\"name\":\"setDfbtc\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"valin\",\"type\":\"address\"}],\"name\":\"setOwner\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"cyclein\",\"type\":\"uint256\"},{\"internalType\":\"bool\",\"name\":\"valin\",\"type\":\"bool\"}],\"name\":\"setPledgeCycle\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"valin\",\"type\":\"uint256\"}],\"name\":\"setTotalDays\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"order\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"takeOutAom\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"takeOutAomByAmount\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"order\",\"type\":\"uint256\"}],\"name\":\"takeOutAssets\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalDays\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"userAmounts\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"_user\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_startTime\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_pledgeCycle\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_hasTakeOut\",\"type\":\"uint256\"},{\"internalType\":\"bool\",\"name\":\"_bFinished\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"userAssetsRecordList\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"_user\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_startTime\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_pledgeCycle\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_hasTakeOut\",\"type\":\"uint256\"},{\"internalType\":\"bool\",\"name\":\"_bFinished\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"userToCounts\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"userToTakeOut\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"}]","ContractName":"DFBTCPools","CompilerVersion":"v0.6.6+commit.6c089d02","OptimizationUsed":"1","Runs":"200","ConstructorArguments":"","EVMVersion":"Default","Library":"","LicenseType":"MIT","Proxy":"0","Implementation":"","SwarmSource":"ipfs://3dfb59eee1ed9a678366f40e1d232b5b1af0cc11bf11e018a7b50b0b64023ad8"}]}