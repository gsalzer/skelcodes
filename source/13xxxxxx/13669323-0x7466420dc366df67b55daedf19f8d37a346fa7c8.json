{"status":"1","message":"OK","result":[{"SourceCode":"{{\r\n  \"language\": \"Solidity\",\r\n  \"sources\": {\r\n    \"/contracts/interfaces/Context.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\npragma solidity >=0.6.0 <0.8.0;\\n\\n/*\\n * @dev Provides information about the current execution context, including the\\n * sender of the transaction and its data. While these are generally available\\n * via msg.sender and msg.data, they should not be accessed in such a direct\\n * manner, since when dealing with GSN meta-transactions the account sending and\\n * paying for execution may not be the actual sender (as far as an application\\n * is concerned).\\n *\\n * This contract is only required for intermediate, library-like contracts.\\n */\\nabstract contract Context {\\n    function _msgSender() internal view virtual returns (address payable) {\\n        return msg.sender;\\n    }\\n\\n    function _msgData() internal view virtual returns (bytes memory) {\\n        this; // silence state mutability warning without generating bytecode - see https://github.com/ethereum/solidity/issues/2691\\n        return msg.data;\\n    }\\n}\\n\"\r\n    },\r\n    \"/contracts/interfaces/Ownable.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\npragma solidity ^0.7.0;\\n\\nimport \\\"./Context.sol\\\";\\n\\n/**\\n * @dev Contract module which provides a basic access control mechanism, where\\n * there is an account (an owner) that can be granted exclusive access to\\n * specific functions.\\n *\\n * By default, the owner account will be the one that deploys the contract. This\\n * can later be changed with {transferOwnership}.\\n *\\n * This module is used through inheritance. It will make available the modifier\\n * `onlyOwner`, which can be applied to your functions to restrict their use to\\n * the owner.\\n */\\nabstract contract Ownable is Context {\\n    address private _owner;\\n\\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\\n\\n    /**\\n     * @dev Initializes the contract setting the deployer as the initial owner.\\n     */\\n    constructor () {\\n        address msgSender = _msgSender();\\n        _owner = msgSender;\\n        emit OwnershipTransferred(address(0), msgSender);\\n    }\\n\\n    /**\\n     * @dev Returns the address of the current owner.\\n     */\\n    function owner() public view virtual returns (address) {\\n        return _owner;\\n    }\\n\\n    /**\\n     * @dev Throws if called by any account other than the owner.\\n     */\\n    modifier onlyOwner() {\\n        require(owner() == _msgSender(), \\\"Ownable: caller is not the owner\\\");\\n        _;\\n    }\\n\\n    /**\\n     * @dev Leaves the contract without owner. It will not be possible to call\\n     * `onlyOwner` functions anymore. Can only be called by the current owner.\\n     *\\n     * NOTE: Renouncing ownership will leave the contract without an owner,\\n     * thereby removing any functionality that is only available to the owner.\\n     */\\n    function renounceOwnership() public virtual onlyOwner {\\n        emit OwnershipTransferred(_owner, address(0));\\n        _owner = address(0);\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Can only be called by the current owner.\\n     */\\n    function transferOwnership(address newOwner) public virtual onlyOwner {\\n        require(newOwner != address(0), \\\"Ownable: new owner is the zero address\\\");\\n        emit OwnershipTransferred(_owner, newOwner);\\n        _owner = newOwner;\\n    }\\n}\"\r\n    },\r\n    \"/contracts/other/UniverseResolver.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: BUSL-1.1\\npragma solidity ^0.7.6;\\n\\nimport \\\"../interfaces/Ownable.sol\\\";\\n\\ninterface IVaultCommon {\\n\\n    function token0() external returns(address);\\n\\n    function token1() external returns(address);\\n\\n}\\n\\ncontract UniverseResolver is Ownable {\\n\\n    /// @dev Status of Universe Vault\\n    enum Status { unRegistered, working, abandon }\\n\\n    /// @dev Have been Registered Vault Address\\n    address[] public vaultLists;\\n    /// @dev Status of Universe Vault\\n    mapping(address => Status) private vaultStatus;\\n    /// @dev Binding Vaults of UniverseVault and otherVault （Same Token0 and Token1）\\n    mapping(address => mapping(address => bool)) private bindingVault;\\n\\n    /* ========== VIEW ========== */\\n\\n    function checkUniverseVault(address universeVault) external view returns(bool status){\\n        if (vaultStatus[universeVault] == Status.working) {\\n            status = true;\\n        }\\n    }\\n\\n    /// @dev Check Relationship of two vault\\n    function checkBindingStatus(address universeVault, address vault) external view returns(bool status){\\n        if (vaultStatus[universeVault] == Status.working && bindingVault[universeVault][vault]) {\\n            status = true;\\n        }\\n    }\\n\\n    /// @dev Get All Official Vaults List\\n    function getAllVaultAddress() external view returns(address[] memory workingVaults) {\\n        address[] memory vaults = vaultLists;\\n        uint256 length = vaults.length;\\n        bool[] memory status = new bool[](length);\\n        // get abandon Vaults status\\n        uint256 workNumber;\\n        for (uint256 i; i < length; i++) {\\n            if (vaultStatus[vaults[i]] == Status.working) {\\n                status[i] = true;\\n                workNumber++;\\n            }\\n        }\\n        if(workNumber > 0){\\n            // get working vaults list\\n            workingVaults = new address[](workNumber);\\n            uint256 idx;\\n            for (uint256 i; i < length; i++) {\\n                if (status[i]) {\\n                    workingVaults[idx] = vaults[i];\\n                    idx += 1;\\n                }\\n            }\\n        }\\n    }\\n\\n    /* ========== INTERNAL ========== */\\n\\n    function _addVault(address universeVault) internal {\\n        Status oldStatus = vaultStatus[universeVault];\\n        if (oldStatus != Status.working) {\\n            vaultStatus[universeVault] = Status.working;\\n        }\\n        if (oldStatus == Status.unRegistered) {\\n            vaultLists.push(universeVault);\\n            emit AddVault(universeVault);\\n        }\\n    }\\n\\n    function _removeVault(address universeVault) internal {\\n        if (vaultStatus[universeVault] == Status.working) {\\n            vaultStatus[universeVault] = Status.abandon;\\n            emit RemoveVault(universeVault);\\n        }\\n    }\\n\\n    function _addBinding(address universeVault, address bonding) internal {\\n        if (!bindingVault[universeVault][bonding]) {\\n            if (   IVaultCommon(universeVault).token0() == IVaultCommon(bonding).token0()\\n                && IVaultCommon(universeVault).token1() == IVaultCommon(bonding).token1()\\n            ){\\n                bindingVault[universeVault][bonding] = true;\\n                emit AddBinding(universeVault, bonding);\\n            }\\n        }\\n    }\\n\\n    function _removeBinding(address universeVault, address bonding) internal {\\n        bindingVault[universeVault][bonding] = false;\\n        emit RemoveBinding(universeVault, bonding);\\n    }\\n\\n    /* ========== EXTERNAL ========== */\\n\\n    function addVault(address[] memory universeVaults) external onlyOwner {\\n        for (uint256 i; i < universeVaults.length; i++) {\\n            _addVault(universeVaults[i]);\\n        }\\n    }\\n\\n    function removeVault(address[] memory universeVaults) external onlyOwner {\\n        for (uint256 i; i < universeVaults.length; i++) {\\n            _removeVault(universeVaults[i]);\\n        }\\n    }\\n\\n    function addBinding(address universeVault, address[] memory bindings) external onlyOwner {\\n        require(vaultStatus[universeVault] == Status.working, 'universeVault is not Working!');\\n        for (uint256 i; i < bindings.length; i++) {\\n            _addBinding(universeVault, bindings[i]);\\n        }\\n    }\\n\\n    function removeBinding(address universeVault, address[] memory bindings) external onlyOwner {\\n        for (uint256 i; i < bindings.length; i++) {\\n            _removeBinding(universeVault, bindings[i]);\\n        }\\n    }\\n\\n    /* ========== EVENT ========== */\\n\\n    /// @dev Add Vault to the Vault List\\n    event AddVault(address indexed vault);\\n    /// @dev Set Status From Working to Abandon\\n    event RemoveVault(address indexed vault);\\n    /// @dev Binding RelationShip\\n    event AddBinding(address indexed vault, address bonding);\\n    /// @dev Remove RelationShip\\n    event RemoveBinding(address indexed vault, address bonding);\\n\\n}\\n\"\r\n    }\r\n  },\r\n  \"settings\": {\r\n    \"remappings\": [],\r\n    \"optimizer\": {\r\n      \"enabled\": true,\r\n      \"runs\": 1000\r\n    },\r\n    \"evmVersion\": \"istanbul\",\r\n    \"libraries\": {},\r\n    \"outputSelection\": {\r\n      \"*\": {\r\n        \"*\": [\r\n          \"evm.bytecode\",\r\n          \"evm.deployedBytecode\",\r\n          \"devdoc\",\r\n          \"userdoc\",\r\n          \"metadata\",\r\n          \"abi\"\r\n        ]\r\n      }\r\n    }\r\n  }\r\n}}","ABI":"[{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"vault\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"bonding\",\"type\":\"address\"}],\"name\":\"AddBinding\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"vault\",\"type\":\"address\"}],\"name\":\"AddVault\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"vault\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"bonding\",\"type\":\"address\"}],\"name\":\"RemoveBinding\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"vault\",\"type\":\"address\"}],\"name\":\"RemoveVault\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"universeVault\",\"type\":\"address\"},{\"internalType\":\"address[]\",\"name\":\"bindings\",\"type\":\"address[]\"}],\"name\":\"addBinding\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address[]\",\"name\":\"universeVaults\",\"type\":\"address[]\"}],\"name\":\"addVault\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"universeVault\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"vault\",\"type\":\"address\"}],\"name\":\"checkBindingStatus\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"status\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"universeVault\",\"type\":\"address\"}],\"name\":\"checkUniverseVault\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"status\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getAllVaultAddress\",\"outputs\":[{\"internalType\":\"address[]\",\"name\":\"workingVaults\",\"type\":\"address[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"universeVault\",\"type\":\"address\"},{\"internalType\":\"address[]\",\"name\":\"bindings\",\"type\":\"address[]\"}],\"name\":\"removeBinding\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address[]\",\"name\":\"universeVaults\",\"type\":\"address[]\"}],\"name\":\"removeVault\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"vaultLists\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"}]","ContractName":"UniverseResolver","CompilerVersion":"v0.7.6+commit.7338295f","OptimizationUsed":"1","Runs":"1000","ConstructorArguments":"","EVMVersion":"Default","Library":"","LicenseType":"","Proxy":"0","Implementation":"","SwarmSource":""}]}