{"status":"1","message":"OK","result":[{"SourceCode":"{{\r\n  \"language\": \"Solidity\",\r\n  \"sources\": {\r\n    \"contracts/registry/list.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: UNLICENSED\\npragma solidity ^0.7.6;\\n\\n/**\\n * @title StakeAllList\\n * @dev Registry For DeFi Smart Account Authorised user.\\n */\\n\\ninterface AccountInterface {\\n    function isAuth(address _user) external view returns (bool);\\n}\\n\\ncontract DSMath {\\n    function add(uint64 x, uint64 y) internal pure returns (uint64 z) {\\n        require((z = x + y) >= x, \\\"ds-math-add-overflow\\\");\\n    }\\n\\n    function sub(uint64 x, uint64 y) internal pure returns (uint64 z) {\\n        require((z = x - y) <= x, \\\"ds-math-sub-underflow\\\");\\n    }\\n}\\n\\ncontract Variables is DSMath {\\n    // StakeAllIndex Address.\\n    address public immutable stakeAllIndex;\\n\\n    constructor(address _stakeAllIndex) {\\n        stakeAllIndex = _stakeAllIndex;\\n    }\\n\\n    // Smart Account Count.\\n    uint64 public accounts;\\n    // Smart Account ID (Smart Account Address => Account ID).\\n    mapping(address => uint64) public accountID;\\n    // Smart Account Address (Smart Account ID => Smart Account Address).\\n    mapping(uint64 => address) public accountAddr;\\n\\n    // User Link (User Address => UserLink(Account ID of First and Last And Count of Smart Accounts)).\\n    mapping(address => UserLink) public userLink;\\n    // Linked List of Users (User Address => Smart Account ID => UserList(Previous and next Account ID)).\\n    mapping(address => mapping(uint64 => UserList)) public userList;\\n\\n    struct UserLink {\\n        uint64 first;\\n        uint64 last;\\n        uint64 count;\\n    }\\n    struct UserList {\\n        uint64 prev;\\n        uint64 next;\\n    }\\n\\n    // Account Link (Smart Account ID => AccountLink).\\n    mapping(uint64 => AccountLink) public accountLink; // account => account linked list connection\\n    // Linked List of Accounts (Smart Account ID => Account Address => AccountList).\\n    mapping(uint64 => mapping(address => AccountList)) public accountList; // account => user address => list\\n\\n    struct AccountLink {\\n        address first;\\n        address last;\\n        uint64 count;\\n    }\\n    struct AccountList {\\n        address prev;\\n        address next;\\n    }\\n}\\n\\ncontract Configure is Variables {\\n    constructor(address _stakeAllIndex) Variables(_stakeAllIndex) {}\\n\\n    /**\\n     * @dev Add Account to User Linked List.\\n     * @param _owner Account Owner.\\n     * @param _account Smart Account Address.\\n     */\\n    function addAccount(address _owner, uint64 _account) internal {\\n        if (userLink[_owner].last != 0) {\\n            userList[_owner][_account].prev = userLink[_owner].last;\\n            userList[_owner][userLink[_owner].last].next = _account;\\n        }\\n        if (userLink[_owner].first == 0) userLink[_owner].first = _account;\\n        userLink[_owner].last = _account;\\n        userLink[_owner].count = add(userLink[_owner].count, 1);\\n    }\\n\\n    /**\\n     * @dev Remove Account from User Linked List.\\n     * @param _owner Account Owner/User.\\n     * @param _account Smart Account Address.\\n     */\\n    function removeAccount(address _owner, uint64 _account) internal {\\n        uint64 _prev = userList[_owner][_account].prev;\\n        uint64 _next = userList[_owner][_account].next;\\n        if (_prev != 0) userList[_owner][_prev].next = _next;\\n        if (_next != 0) userList[_owner][_next].prev = _prev;\\n        if (_prev == 0) userLink[_owner].first = _next;\\n        if (_next == 0) userLink[_owner].last = _prev;\\n        userLink[_owner].count = sub(userLink[_owner].count, 1);\\n        delete userList[_owner][_account];\\n    }\\n\\n    /**\\n     * @dev Add Owner to Account Linked List.\\n     * @param _owner Account Owner.\\n     * @param _account Smart Account Address.\\n     */\\n    function addUser(address _owner, uint64 _account) internal {\\n        if (accountLink[_account].last != address(0)) {\\n            accountList[_account][_owner].prev = accountLink[_account].last;\\n            accountList[_account][accountLink[_account].last].next = _owner;\\n        }\\n        if (accountLink[_account].first == address(0))\\n            accountLink[_account].first = _owner;\\n        accountLink[_account].last = _owner;\\n        accountLink[_account].count = add(accountLink[_account].count, 1);\\n    }\\n\\n    /**\\n     * @dev Remove Owner from Account Linked List.\\n     * @param _owner Account Owner.\\n     * @param _account Smart Account Address.\\n     */\\n    function removeUser(address _owner, uint64 _account) internal {\\n        address _prev = accountList[_account][_owner].prev;\\n        address _next = accountList[_account][_owner].next;\\n        if (_prev != address(0)) accountList[_account][_prev].next = _next;\\n        if (_next != address(0)) accountList[_account][_next].prev = _prev;\\n        if (_prev == address(0)) accountLink[_account].first = _next;\\n        if (_next == address(0)) accountLink[_account].last = _prev;\\n        accountLink[_account].count = sub(accountLink[_account].count, 1);\\n        delete accountList[_account][_owner];\\n    }\\n}\\n\\ncontract StakeAllList is Configure {\\n    constructor(address _stakeAllIndex) public Configure(_stakeAllIndex) {}\\n\\n    /**\\n     * @dev Enable Auth for Smart Account.\\n     * @param _owner Owner Address.\\n     */\\n    function addAuth(address _owner) external {\\n        require(accountID[msg.sender] != 0, \\\"not-account\\\");\\n        require(AccountInterface(msg.sender).isAuth(_owner), \\\"not-owner\\\");\\n        addAccount(_owner, accountID[msg.sender]);\\n        addUser(_owner, accountID[msg.sender]);\\n    }\\n\\n    /**\\n     * @dev Disable Auth for Smart Account.\\n     * @param _owner Owner Address.\\n     */\\n    function removeAuth(address _owner) external {\\n        require(accountID[msg.sender] != 0, \\\"not-account\\\");\\n        require(!AccountInterface(msg.sender).isAuth(_owner), \\\"already-owner\\\");\\n        removeAccount(_owner, accountID[msg.sender]);\\n        removeUser(_owner, accountID[msg.sender]);\\n    }\\n\\n    /**\\n     * @dev Setup Initial configuration of Smart Account.\\n     * @param _account Smart Account Address.\\n     */\\n    function init(address _account) external {\\n        require(msg.sender == stakeAllIndex, \\\"not-index\\\");\\n        accounts++;\\n        accountID[_account] = accounts;\\n        accountAddr[accounts] = _account;\\n    }\\n}\\n\"\r\n    }\r\n  },\r\n  \"settings\": {\r\n    \"optimizer\": {\r\n      \"enabled\": false,\r\n      \"runs\": 200\r\n    },\r\n    \"outputSelection\": {\r\n      \"*\": {\r\n        \"*\": [\r\n          \"evm.bytecode\",\r\n          \"evm.deployedBytecode\",\r\n          \"devdoc\",\r\n          \"userdoc\",\r\n          \"metadata\",\r\n          \"abi\"\r\n        ]\r\n      }\r\n    },\r\n    \"libraries\": {}\r\n  }\r\n}}","ABI":"[{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_stakeAllIndex\",\"type\":\"address\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"inputs\":[{\"internalType\":\"uint64\",\"name\":\"\",\"type\":\"uint64\"}],\"name\":\"accountAddr\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"accountID\",\"outputs\":[{\"internalType\":\"uint64\",\"name\":\"\",\"type\":\"uint64\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint64\",\"name\":\"\",\"type\":\"uint64\"}],\"name\":\"accountLink\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"first\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"last\",\"type\":\"address\"},{\"internalType\":\"uint64\",\"name\":\"count\",\"type\":\"uint64\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint64\",\"name\":\"\",\"type\":\"uint64\"},{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"accountList\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"prev\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"next\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"accounts\",\"outputs\":[{\"internalType\":\"uint64\",\"name\":\"\",\"type\":\"uint64\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_owner\",\"type\":\"address\"}],\"name\":\"addAuth\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_account\",\"type\":\"address\"}],\"name\":\"init\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_owner\",\"type\":\"address\"}],\"name\":\"removeAuth\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"stakeAllIndex\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"userLink\",\"outputs\":[{\"internalType\":\"uint64\",\"name\":\"first\",\"type\":\"uint64\"},{\"internalType\":\"uint64\",\"name\":\"last\",\"type\":\"uint64\"},{\"internalType\":\"uint64\",\"name\":\"count\",\"type\":\"uint64\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"},{\"internalType\":\"uint64\",\"name\":\"\",\"type\":\"uint64\"}],\"name\":\"userList\",\"outputs\":[{\"internalType\":\"uint64\",\"name\":\"prev\",\"type\":\"uint64\"},{\"internalType\":\"uint64\",\"name\":\"next\",\"type\":\"uint64\"}],\"stateMutability\":\"view\",\"type\":\"function\"}]","ContractName":"StakeAllList","CompilerVersion":"v0.7.6+commit.7338295f","OptimizationUsed":"0","Runs":"200","ConstructorArguments":"00000000000000000000000086d9b80cf2907843b4030c8aa60f1bc8d92a226c","EVMVersion":"Default","Library":"","LicenseType":"","Proxy":"0","Implementation":"","SwarmSource":""}]}