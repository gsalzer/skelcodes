{"status":"1","message":"OK","result":[{"SourceCode":"// SPDX-License-Identifier: MIT\r\npragma solidity ^0.8.0;\r\n\r\ninterface IERC20 {\r\n    event Approval(address indexed owner, address indexed spender, uint value);\r\n    event Transfer(address indexed from, address indexed to, uint value);\r\n\r\n    function name() external view returns (string memory);\r\n    function symbol() external view returns (string memory);\r\n    function decimals() external view returns (uint8);\r\n    function totalSupply() external view returns (uint);\r\n    function balanceOf(address owner) external view returns (uint);\r\n    function allowance(address owner, address spender) external view returns (uint);\r\n\r\n    function approve(address spender, uint value) external returns (bool);\r\n    function transfer(address to, uint value) external returns (bool);\r\n    function transferFrom(address from, address to, uint value) external returns (bool);\r\n\r\n    function mint(address to, uint256 value) external returns (bool);\r\n    function burn(address from, uint256 value) external returns (bool);\r\n}\r\n\r\ncontract BridgeEth {\r\n    address public admin;\r\n    IERC20 public token;\r\n\r\n    struct Balance {\r\n        uint256 tokens;\r\n        uint256 gas;\r\n    }\r\n\r\n    mapping(address => mapping(uint => bool)) public processedNonces;\r\n    mapping (address => Balance) public accounts;\r\n    \r\n    mapping(address => uint) public nextNonce;\r\n\r\n    uint256 public _basefees = 50000000000000000;\r\n    enum Step { Burn, Mint }\r\n    event Deposit(\r\n        address from,\r\n        uint256 amount,\r\n        uint date,\r\n        uint nonce,\r\n        bytes signature,\r\n        Step indexed step\r\n    );\r\n    event Mint(\r\n        address to,\r\n        uint256 amount,\r\n        uint date,\r\n        uint nonce,\r\n        bytes signature,\r\n        Step indexed step,\r\n        uint256 gas\r\n    );\r\n    event Withdraw(\r\n        address from,\r\n        uint256 amount\r\n    );\r\n\r\n    constructor () {\r\n        admin = 0xEd708471D98D8F005DA0c7F83CBB5d628E7ec27B;\r\n        token = IERC20(0x9cF77be84214beb066F26a4ea1c38ddcc2AFbcf7);\r\n    }\r\n\r\n    function setToken (address _token ) external {\r\n        require(msg.sender == admin, \"only admin\");\r\n        token = IERC20(_token);\r\n    }\r\n\r\n    function setAdmin (address _admin ) external {\r\n        require(msg.sender == admin, \"only admin\");\r\n        admin = _admin;\r\n    }\r\n\r\n    function setFees (uint256 _fees ) external {\r\n        require(msg.sender == admin, \"only admin\");\r\n        _basefees = _fees;\r\n    }\r\n\r\n\r\n    function deposit(address from, uint256 amount, uint nonce, bytes calldata signature) external {\r\n        require(processedNonces[msg.sender][nonce] == false, 'transfer already processed');\r\n        processedNonces[msg.sender][nonce] = true;\r\n        token.transferFrom(msg.sender, address(this), amount);\r\n        nextNonce[msg.sender] = nonce + 1;\r\n\r\n        emit Deposit(\r\n            from,\r\n            amount,\r\n            block.timestamp,\r\n            nonce,\r\n            signature,\r\n            Step.Burn\r\n        );\r\n    }\r\n\r\n    function calculateBurnFee(uint256 _amount) private pure returns (uint256) {\r\n        return _amount*(5)/(10**3);\r\n\r\n    }\r\n\r\n    fallback () external payable {\r\n    }\r\n\r\n    receive () external payable {\r\n    }\r\n\r\n    function withdraw( ) external payable {\r\n        // require(amount > 0 , \"invalid amount: 0\");\r\n        require(accounts[msg.sender].tokens > 0, \"invalid amount\");\r\n        require(msg.value >= accounts[msg.sender].gas, \"insufficient fees\");\r\n        payable(admin).transfer(msg.value);\r\n\r\n        bool succ = token.transfer(msg.sender, accounts[msg.sender].tokens);\r\n        require(succ, \"tokens not minted\");\r\n\r\n        accounts[msg.sender].tokens = 0;\r\n        accounts[msg.sender].gas = 0;\r\n\r\n        emit Withdraw(msg.sender, accounts[msg.sender].tokens);\r\n    }\r\n\r\n    function mint(\r\n        address to, \r\n        uint256 amount, \r\n        uint nonce,\r\n        bytes calldata signature\r\n    ) external {\r\n        uint256 startGas = gasleft();\r\n        require(msg.sender == admin, \"only admin\");\r\n        bytes32 message = prefixed(keccak256(abi.encodePacked(to, amount, nonce )));\r\n        require(recoverSigner(message, signature) == to , 'wrong signature');\r\n        require(processedNonces[to][nonce] == false, 'transfer already processed');\r\n        processedNonces[to][nonce] = true;\r\n        nextNonce[to] = nonce + 1;\r\n        uint256 _burn = calculateBurnFee(amount);\r\n        amount = amount - _burn;\r\n        accounts[to].tokens += amount;\r\n        \r\n        uint256 gasUsed = (startGas - gasleft()) * tx.gasprice*2;\r\n        gasUsed = gasUsed > _basefees ? gasUsed : _basefees;\r\n        accounts[to].gas += gasUsed;\r\n        emit Mint(\r\n            to,\r\n            amount,\r\n            block.timestamp,\r\n            nonce,\r\n            signature,\r\n            Step.Mint,\r\n            gasUsed\r\n        );\r\n    }\r\n\r\n    function prefixed(bytes32 hash) internal pure returns (bytes32) {\r\n        return keccak256(abi.encodePacked(\r\n        '\\x19Ethereum Signed Message:\\n32', \r\n        hash\r\n        ));\r\n    }\r\n\r\n    function recoverSigner(bytes32 message, bytes memory sig)\r\n        internal\r\n        pure\r\n        returns (address)\r\n    {\r\n        uint8 v;\r\n        bytes32 r;\r\n        bytes32 s;\r\n    \r\n        (v, r, s) = splitSignature(sig);\r\n    \r\n        return ecrecover(message, v, r, s);\r\n    }\r\n\r\n    function splitSignature(bytes memory sig)\r\n        internal\r\n        pure\r\n        returns (uint8, bytes32, bytes32)\r\n    {\r\n        require(sig.length == 65);\r\n    \r\n        bytes32 r;\r\n        bytes32 s;\r\n        uint8 v;\r\n    \r\n        assembly {\r\n            // first 32 bytes, after the length prefix\r\n            r := mload(add(sig, 32))\r\n            // second 32 bytes\r\n            s := mload(add(sig, 64))\r\n            // final byte (first byte of the next 32 bytes)\r\n            v := byte(0, mload(add(sig, 96)))\r\n        }\r\n    \r\n        return (v, r, s);\r\n    }\r\n}","ABI":"[{\"inputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"date\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"nonce\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"bytes\",\"name\":\"signature\",\"type\":\"bytes\"},{\"indexed\":true,\"internalType\":\"enum BridgeEth.Step\",\"name\":\"step\",\"type\":\"uint8\"}],\"name\":\"Deposit\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"date\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"nonce\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"bytes\",\"name\":\"signature\",\"type\":\"bytes\"},{\"indexed\":true,\"internalType\":\"enum BridgeEth.Step\",\"name\":\"step\",\"type\":\"uint8\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"gas\",\"type\":\"uint256\"}],\"name\":\"Mint\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"Withdraw\",\"type\":\"event\"},{\"stateMutability\":\"payable\",\"type\":\"fallback\"},{\"inputs\":[],\"name\":\"_basefees\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"accounts\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"tokens\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"gas\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"admin\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"nonce\",\"type\":\"uint256\"},{\"internalType\":\"bytes\",\"name\":\"signature\",\"type\":\"bytes\"}],\"name\":\"deposit\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"nonce\",\"type\":\"uint256\"},{\"internalType\":\"bytes\",\"name\":\"signature\",\"type\":\"bytes\"}],\"name\":\"mint\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"nextNonce\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"processedNonces\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_admin\",\"type\":\"address\"}],\"name\":\"setAdmin\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_fees\",\"type\":\"uint256\"}],\"name\":\"setFees\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_token\",\"type\":\"address\"}],\"name\":\"setToken\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"token\",\"outputs\":[{\"internalType\":\"contract IERC20\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"withdraw\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"stateMutability\":\"payable\",\"type\":\"receive\"}]","ContractName":"BridgeEth","CompilerVersion":"v0.8.10+commit.fc410830","OptimizationUsed":"1","Runs":"200","ConstructorArguments":"","EVMVersion":"Default","Library":"","LicenseType":"None","Proxy":"0","Implementation":"","SwarmSource":"ipfs://c42bb765bc637f864b9e5786bf17c268ea476bfe6b495f57f00f4572cb03232f"}]}