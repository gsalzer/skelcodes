{"status":"1","message":"OK","result":[{"SourceCode":"// Sources flattened with hardhat v2.4.3 https://hardhat.org\r\n\r\n// File openzeppelin-solidity/contracts/utils/Context.sol@v4.1.0\r\n\r\n// SPDX-License-Identifier: MIT\r\n\r\npragma solidity ^0.8.0;\r\n\r\n/*\r\n * @dev Provides information about the current execution context, including the\r\n * sender of the transaction and its data. While these are generally available\r\n * via msg.sender and msg.data, they should not be accessed in such a direct\r\n * manner, since when dealing with meta-transactions the account sending and\r\n * paying for execution may not be the actual sender (as far as an application\r\n * is concerned).\r\n *\r\n * This contract is only required for intermediate, library-like contracts.\r\n */\r\nabstract contract Context {\r\n    function _msgSender() internal view virtual returns (address) {\r\n        return msg.sender;\r\n    }\r\n\r\n    function _msgData() internal view virtual returns (bytes calldata) {\r\n        this; // silence state mutability warning without generating bytecode - see https://github.com/ethereum/solidity/issues/2691\r\n        return msg.data;\r\n    }\r\n}\r\n\r\n\r\n// File openzeppelin-solidity/contracts/utils/Strings.sol@v4.1.0\r\n\r\n\r\n\r\npragma solidity ^0.8.0;\r\n\r\n/**\r\n * @dev String operations.\r\n */\r\nlibrary Strings {\r\n    bytes16 private constant alphabet = \"0123456789abcdef\";\r\n\r\n    /**\r\n     * @dev Converts a `uint256` to its ASCII `string` decimal representation.\r\n     */\r\n    function toString(uint256 value) internal pure returns (string memory) {\r\n        // Inspired by OraclizeAPI's implementation - MIT licence\r\n        // https://github.com/oraclize/ethereum-api/blob/b42146b063c7d6ee1358846c198246239e9360e8/oraclizeAPI_0.4.25.sol\r\n\r\n        if (value == 0) {\r\n            return \"0\";\r\n        }\r\n        uint256 temp = value;\r\n        uint256 digits;\r\n        while (temp != 0) {\r\n            digits++;\r\n            temp /= 10;\r\n        }\r\n        bytes memory buffer = new bytes(digits);\r\n        while (value != 0) {\r\n            digits -= 1;\r\n            buffer[digits] = bytes1(uint8(48 + uint256(value % 10)));\r\n            value /= 10;\r\n        }\r\n        return string(buffer);\r\n    }\r\n\r\n    /**\r\n     * @dev Converts a `uint256` to its ASCII `string` hexadecimal representation.\r\n     */\r\n    function toHexString(uint256 value) internal pure returns (string memory) {\r\n        if (value == 0) {\r\n            return \"0x00\";\r\n        }\r\n        uint256 temp = value;\r\n        uint256 length = 0;\r\n        while (temp != 0) {\r\n            length++;\r\n            temp >>= 8;\r\n        }\r\n        return toHexString(value, length);\r\n    }\r\n\r\n    /**\r\n     * @dev Converts a `uint256` to its ASCII `string` hexadecimal representation with fixed length.\r\n     */\r\n    function toHexString(uint256 value, uint256 length) internal pure returns (string memory) {\r\n        bytes memory buffer = new bytes(2 * length + 2);\r\n        buffer[0] = \"0\";\r\n        buffer[1] = \"x\";\r\n        for (uint256 i = 2 * length + 1; i > 1; --i) {\r\n            buffer[i] = alphabet[value & 0xf];\r\n            value >>= 4;\r\n        }\r\n        require(value == 0, \"Strings: hex length insufficient\");\r\n        return string(buffer);\r\n    }\r\n\r\n}\r\n\r\n\r\n// File openzeppelin-solidity/contracts/utils/introspection/IERC165.sol@v4.1.0\r\n\r\n\r\n\r\npragma solidity ^0.8.0;\r\n\r\n/**\r\n * @dev Interface of the ERC165 standard, as defined in the\r\n * https://eips.ethereum.org/EIPS/eip-165[EIP].\r\n *\r\n * Implementers can declare support of contract interfaces, which can then be\r\n * queried by others ({ERC165Checker}).\r\n *\r\n * For an implementation, see {ERC165}.\r\n */\r\ninterface IERC165 {\r\n    /**\r\n     * @dev Returns true if this contract implements the interface defined by\r\n     * `interfaceId`. See the corresponding\r\n     * https://eips.ethereum.org/EIPS/eip-165#how-interfaces-are-identified[EIP section]\r\n     * to learn more about how these ids are created.\r\n     *\r\n     * This function call must use less than 30 000 gas.\r\n     */\r\n    function supportsInterface(bytes4 interfaceId) external view returns (bool);\r\n}\r\n\r\n\r\n// File openzeppelin-solidity/contracts/utils/introspection/ERC165.sol@v4.1.0\r\n\r\n\r\n\r\npragma solidity ^0.8.0;\r\n\r\n/**\r\n * @dev Implementation of the {IERC165} interface.\r\n *\r\n * Contracts that want to implement ERC165 should inherit from this contract and override {supportsInterface} to check\r\n * for the additional interface id that will be supported. For example:\r\n *\r\n * ```solidity\r\n * function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {\r\n *     return interfaceId == type(MyInterface).interfaceId || super.supportsInterface(interfaceId);\r\n * }\r\n * ```\r\n *\r\n * Alternatively, {ERC165Storage} provides an easier to use but more expensive implementation.\r\n */\r\nabstract contract ERC165 is IERC165 {\r\n    /**\r\n     * @dev See {IERC165-supportsInterface}.\r\n     */\r\n    function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {\r\n        return interfaceId == type(IERC165).interfaceId;\r\n    }\r\n}\r\n\r\n\r\n// File openzeppelin-solidity/contracts/access/AccessControl.sol@v4.1.0\r\n\r\n\r\n\r\npragma solidity ^0.8.0;\r\n\r\n\r\n\r\n/**\r\n * @dev External interface of AccessControl declared to support ERC165 detection.\r\n */\r\ninterface IAccessControl {\r\n    function hasRole(bytes32 role, address account) external view returns (bool);\r\n    function getRoleAdmin(bytes32 role) external view returns (bytes32);\r\n    function grantRole(bytes32 role, address account) external;\r\n    function revokeRole(bytes32 role, address account) external;\r\n    function renounceRole(bytes32 role, address account) external;\r\n}\r\n\r\n/**\r\n * @dev Contract module that allows children to implement role-based access\r\n * control mechanisms. This is a lightweight version that doesn't allow enumerating role\r\n * members except through off-chain means by accessing the contract event logs. Some\r\n * applications may benefit from on-chain enumerability, for those cases see\r\n * {AccessControlEnumerable}.\r\n *\r\n * Roles are referred to by their `bytes32` identifier. These should be exposed\r\n * in the external API and be unique. The best way to achieve this is by\r\n * using `public constant` hash digests:\r\n *\r\n * ```\r\n * bytes32 public constant MY_ROLE = keccak256(\"MY_ROLE\");\r\n * ```\r\n *\r\n * Roles can be used to represent a set of permissions. To restrict access to a\r\n * function call, use {hasRole}:\r\n *\r\n * ```\r\n * function foo() public {\r\n *     require(hasRole(MY_ROLE, msg.sender));\r\n *     ...\r\n * }\r\n * ```\r\n *\r\n * Roles can be granted and revoked dynamically via the {grantRole} and\r\n * {revokeRole} functions. Each role has an associated admin role, and only\r\n * accounts that have a role's admin role can call {grantRole} and {revokeRole}.\r\n *\r\n * By default, the admin role for all roles is `DEFAULT_ADMIN_ROLE`, which means\r\n * that only accounts with this role will be able to grant or revoke other\r\n * roles. More complex role relationships can be created by using\r\n * {_setRoleAdmin}.\r\n *\r\n * WARNING: The `DEFAULT_ADMIN_ROLE` is also its own admin: it has permission to\r\n * grant and revoke this role. Extra precautions should be taken to secure\r\n * accounts that have been granted it.\r\n */\r\nabstract contract AccessControl is Context, IAccessControl, ERC165 {\r\n    struct RoleData {\r\n        mapping (address => bool) members;\r\n        bytes32 adminRole;\r\n    }\r\n\r\n    mapping (bytes32 => RoleData) private _roles;\r\n\r\n    bytes32 public constant DEFAULT_ADMIN_ROLE = 0x00;\r\n\r\n    /**\r\n     * @dev Emitted when `newAdminRole` is set as ``role``'s admin role, replacing `previousAdminRole`\r\n     *\r\n     * `DEFAULT_ADMIN_ROLE` is the starting admin for all roles, despite\r\n     * {RoleAdminChanged} not being emitted signaling this.\r\n     *\r\n     * _Available since v3.1._\r\n     */\r\n    event RoleAdminChanged(bytes32 indexed role, bytes32 indexed previousAdminRole, bytes32 indexed newAdminRole);\r\n\r\n    /**\r\n     * @dev Emitted when `account` is granted `role`.\r\n     *\r\n     * `sender` is the account that originated the contract call, an admin role\r\n     * bearer except when using {_setupRole}.\r\n     */\r\n    event RoleGranted(bytes32 indexed role, address indexed account, address indexed sender);\r\n\r\n    /**\r\n     * @dev Emitted when `account` is revoked `role`.\r\n     *\r\n     * `sender` is the account that originated the contract call:\r\n     *   - if using `revokeRole`, it is the admin role bearer\r\n     *   - if using `renounceRole`, it is the role bearer (i.e. `account`)\r\n     */\r\n    event RoleRevoked(bytes32 indexed role, address indexed account, address indexed sender);\r\n\r\n    /**\r\n     * @dev Modifier that checks that an account has a specific role. Reverts\r\n     * with a standardized message including the required role.\r\n     *\r\n     * The format of the revert reason is given by the following regular expression:\r\n     *\r\n     *  /^AccessControl: account (0x[0-9a-f]{20}) is missing role (0x[0-9a-f]{32})$/\r\n     *\r\n     * _Available since v4.1._\r\n     */\r\n    modifier onlyRole(bytes32 role) {\r\n        _checkRole(role, _msgSender());\r\n        _;\r\n    }\r\n\r\n    /**\r\n     * @dev See {IERC165-supportsInterface}.\r\n     */\r\n    function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {\r\n        return interfaceId == type(IAccessControl).interfaceId\r\n            || super.supportsInterface(interfaceId);\r\n    }\r\n\r\n    /**\r\n     * @dev Returns `true` if `account` has been granted `role`.\r\n     */\r\n    function hasRole(bytes32 role, address account) public view override returns (bool) {\r\n        return _roles[role].members[account];\r\n    }\r\n\r\n    /**\r\n     * @dev Revert with a standard message if `account` is missing `role`.\r\n     *\r\n     * The format of the revert reason is given by the following regular expression:\r\n     *\r\n     *  /^AccessControl: account (0x[0-9a-f]{20}) is missing role (0x[0-9a-f]{32})$/\r\n     */\r\n    function _checkRole(bytes32 role, address account) internal view {\r\n        if(!hasRole(role, account)) {\r\n            revert(string(abi.encodePacked(\r\n                \"AccessControl: account \",\r\n                Strings.toHexString(uint160(account), 20),\r\n                \" is missing role \",\r\n                Strings.toHexString(uint256(role), 32)\r\n            )));\r\n        }\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the admin role that controls `role`. See {grantRole} and\r\n     * {revokeRole}.\r\n     *\r\n     * To change a role's admin, use {_setRoleAdmin}.\r\n     */\r\n    function getRoleAdmin(bytes32 role) public view override returns (bytes32) {\r\n        return _roles[role].adminRole;\r\n    }\r\n\r\n    /**\r\n     * @dev Grants `role` to `account`.\r\n     *\r\n     * If `account` had not been already granted `role`, emits a {RoleGranted}\r\n     * event.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - the caller must have ``role``'s admin role.\r\n     */\r\n    function grantRole(bytes32 role, address account) public virtual override onlyRole(getRoleAdmin(role)) {\r\n        _grantRole(role, account);\r\n    }\r\n\r\n    /**\r\n     * @dev Revokes `role` from `account`.\r\n     *\r\n     * If `account` had been granted `role`, emits a {RoleRevoked} event.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - the caller must have ``role``'s admin role.\r\n     */\r\n    function revokeRole(bytes32 role, address account) public virtual override onlyRole(getRoleAdmin(role)) {\r\n        _revokeRole(role, account);\r\n    }\r\n\r\n    /**\r\n     * @dev Revokes `role` from the calling account.\r\n     *\r\n     * Roles are often managed via {grantRole} and {revokeRole}: this function's\r\n     * purpose is to provide a mechanism for accounts to lose their privileges\r\n     * if they are compromised (such as when a trusted device is misplaced).\r\n     *\r\n     * If the calling account had been granted `role`, emits a {RoleRevoked}\r\n     * event.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - the caller must be `account`.\r\n     */\r\n    function renounceRole(bytes32 role, address account) public virtual override {\r\n        require(account == _msgSender(), \"AccessControl: can only renounce roles for self\");\r\n\r\n        _revokeRole(role, account);\r\n    }\r\n\r\n    /**\r\n     * @dev Grants `role` to `account`.\r\n     *\r\n     * If `account` had not been already granted `role`, emits a {RoleGranted}\r\n     * event. Note that unlike {grantRole}, this function doesn't perform any\r\n     * checks on the calling account.\r\n     *\r\n     * [WARNING]\r\n     * ====\r\n     * This function should only be called from the constructor when setting\r\n     * up the initial roles for the system.\r\n     *\r\n     * Using this function in any other way is effectively circumventing the admin\r\n     * system imposed by {AccessControl}.\r\n     * ====\r\n     */\r\n    function _setupRole(bytes32 role, address account) internal virtual {\r\n        _grantRole(role, account);\r\n    }\r\n\r\n    /**\r\n     * @dev Sets `adminRole` as ``role``'s admin role.\r\n     *\r\n     * Emits a {RoleAdminChanged} event.\r\n     */\r\n    function _setRoleAdmin(bytes32 role, bytes32 adminRole) internal virtual {\r\n        emit RoleAdminChanged(role, getRoleAdmin(role), adminRole);\r\n        _roles[role].adminRole = adminRole;\r\n    }\r\n\r\n    function _grantRole(bytes32 role, address account) private {\r\n        if (!hasRole(role, account)) {\r\n            _roles[role].members[account] = true;\r\n            emit RoleGranted(role, account, _msgSender());\r\n        }\r\n    }\r\n\r\n    function _revokeRole(bytes32 role, address account) private {\r\n        if (hasRole(role, account)) {\r\n            _roles[role].members[account] = false;\r\n            emit RoleRevoked(role, account, _msgSender());\r\n        }\r\n    }\r\n}\r\n\r\n\r\n// File openzeppelin-solidity/contracts/governance/TimelockController.sol@v4.1.0\r\n\r\n\r\n\r\npragma solidity ^0.8.0;\r\n\r\n/**\r\n * @dev Contract module which acts as a timelocked controller. When set as the\r\n * owner of an `Ownable` smart contract, it enforces a timelock on all\r\n * `onlyOwner` maintenance operations. This gives time for users of the\r\n * controlled contract to exit before a potentially dangerous maintenance\r\n * operation is applied.\r\n *\r\n * By default, this contract is self administered, meaning administration tasks\r\n * have to go through the timelock process. The proposer (resp executor) role\r\n * is in charge of proposing (resp executing) operations. A common use case is\r\n * to position this {TimelockController} as the owner of a smart contract, with\r\n * a multisig or a DAO as the sole proposer.\r\n *\r\n * _Available since v3.3._\r\n */\r\ncontract TimelockController is AccessControl {\r\n    bytes32 public constant TIMELOCK_ADMIN_ROLE = keccak256(\"TIMELOCK_ADMIN_ROLE\");\r\n    bytes32 public constant PROPOSER_ROLE = keccak256(\"PROPOSER_ROLE\");\r\n    bytes32 public constant EXECUTOR_ROLE = keccak256(\"EXECUTOR_ROLE\");\r\n    uint256 internal constant _DONE_TIMESTAMP = uint256(1);\r\n\r\n    mapping(bytes32 => uint256) private _timestamps;\r\n    uint256 private _minDelay;\r\n\r\n    /**\r\n     * @dev Emitted when a call is scheduled as part of operation `id`.\r\n     */\r\n    event CallScheduled(bytes32 indexed id, uint256 indexed index, address target, uint256 value, bytes data, bytes32 predecessor, uint256 delay);\r\n\r\n    /**\r\n     * @dev Emitted when a call is performed as part of operation `id`.\r\n     */\r\n    event CallExecuted(bytes32 indexed id, uint256 indexed index, address target, uint256 value, bytes data);\r\n\r\n    /**\r\n     * @dev Emitted when operation `id` is cancelled.\r\n     */\r\n    event Cancelled(bytes32 indexed id);\r\n\r\n    /**\r\n     * @dev Emitted when the minimum delay for future operations is modified.\r\n     */\r\n    event MinDelayChange(uint256 oldDuration, uint256 newDuration);\r\n\r\n    /**\r\n     * @dev Initializes the contract with a given `minDelay`.\r\n     */\r\n    constructor(uint256 minDelay, address[] memory proposers, address[] memory executors) {\r\n        _setRoleAdmin(TIMELOCK_ADMIN_ROLE, TIMELOCK_ADMIN_ROLE);\r\n        _setRoleAdmin(PROPOSER_ROLE, TIMELOCK_ADMIN_ROLE);\r\n        _setRoleAdmin(EXECUTOR_ROLE, TIMELOCK_ADMIN_ROLE);\r\n\r\n        // deployer + self administration\r\n        _setupRole(TIMELOCK_ADMIN_ROLE, _msgSender());\r\n        _setupRole(TIMELOCK_ADMIN_ROLE, address(this));\r\n\r\n        // register proposers\r\n        for (uint256 i = 0; i < proposers.length; ++i) {\r\n            _setupRole(PROPOSER_ROLE, proposers[i]);\r\n        }\r\n\r\n        // register executors\r\n        for (uint256 i = 0; i < executors.length; ++i) {\r\n            _setupRole(EXECUTOR_ROLE, executors[i]);\r\n        }\r\n\r\n        _minDelay = minDelay;\r\n        emit MinDelayChange(0, minDelay);\r\n    }\r\n\r\n    /**\r\n     * @dev Modifier to make a function callable only by a certain role. In\r\n     * addition to checking the sender's role, `address(0)` 's role is also\r\n     * considered. Granting a role to `address(0)` is equivalent to enabling\r\n     * this role for everyone.\r\n     */\r\n    modifier onlyRoleOrOpenRole(bytes32 role) {\r\n        if (!hasRole(role, address(0))) {\r\n            _checkRole(role, _msgSender());\r\n        }\r\n        _;\r\n    }\r\n\r\n    /**\r\n     * @dev Contract might receive/hold ETH as part of the maintenance process.\r\n     */\r\n    receive() external payable {}\r\n\r\n    /**\r\n     * @dev Returns whether an id correspond to a registered operation. This\r\n     * includes both Pending, Ready and Done operations.\r\n     */\r\n    function isOperation(bytes32 id) public view virtual returns (bool pending) {\r\n        return getTimestamp(id) > 0;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns whether an operation is pending or not.\r\n     */\r\n    function isOperationPending(bytes32 id) public view virtual returns (bool pending) {\r\n        return getTimestamp(id) > _DONE_TIMESTAMP;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns whether an operation is ready or not.\r\n     */\r\n    function isOperationReady(bytes32 id) public view virtual returns (bool ready) {\r\n        uint256 timestamp = getTimestamp(id);\r\n        // solhint-disable-next-line not-rely-on-time\r\n        return timestamp > _DONE_TIMESTAMP && timestamp <= block.timestamp;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns whether an operation is done or not.\r\n     */\r\n    function isOperationDone(bytes32 id) public view virtual returns (bool done) {\r\n        return getTimestamp(id) == _DONE_TIMESTAMP;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the timestamp at with an operation becomes ready (0 for\r\n     * unset operations, 1 for done operations).\r\n     */\r\n    function getTimestamp(bytes32 id) public view virtual returns (uint256 timestamp) {\r\n        return _timestamps[id];\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the minimum delay for an operation to become valid.\r\n     *\r\n     * This value can be changed by executing an operation that calls `updateDelay`.\r\n     */\r\n    function getMinDelay() public view virtual returns (uint256 duration) {\r\n        return _minDelay;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the identifier of an operation containing a single\r\n     * transaction.\r\n     */\r\n    function hashOperation(address target, uint256 value, bytes calldata data, bytes32 predecessor, bytes32 salt) public pure virtual returns (bytes32 hash) {\r\n        return keccak256(abi.encode(target, value, data, predecessor, salt));\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the identifier of an operation containing a batch of\r\n     * transactions.\r\n     */\r\n    function hashOperationBatch(address[] calldata targets, uint256[] calldata values, bytes[] calldata datas, bytes32 predecessor, bytes32 salt) public pure virtual returns (bytes32 hash) {\r\n        return keccak256(abi.encode(targets, values, datas, predecessor, salt));\r\n    }\r\n\r\n    /**\r\n     * @dev Schedule an operation containing a single transaction.\r\n     *\r\n     * Emits a {CallScheduled} event.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - the caller must have the 'proposer' role.\r\n     */\r\n    function schedule(address target, uint256 value, bytes calldata data, bytes32 predecessor, bytes32 salt, uint256 delay) public virtual onlyRole(PROPOSER_ROLE) {\r\n        bytes32 id = hashOperation(target, value, data, predecessor, salt);\r\n        _schedule(id, delay);\r\n        emit CallScheduled(id, 0, target, value, data, predecessor, delay);\r\n    }\r\n\r\n    /**\r\n     * @dev Schedule an operation containing a batch of transactions.\r\n     *\r\n     * Emits one {CallScheduled} event per transaction in the batch.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - the caller must have the 'proposer' role.\r\n     */\r\n    function scheduleBatch(address[] calldata targets, uint256[] calldata values, bytes[] calldata datas, bytes32 predecessor, bytes32 salt, uint256 delay) public virtual onlyRole(PROPOSER_ROLE) {\r\n        require(targets.length == values.length, \"TimelockController: length mismatch\");\r\n        require(targets.length == datas.length, \"TimelockController: length mismatch\");\r\n\r\n        bytes32 id = hashOperationBatch(targets, values, datas, predecessor, salt);\r\n        _schedule(id, delay);\r\n        for (uint256 i = 0; i < targets.length; ++i) {\r\n            emit CallScheduled(id, i, targets[i], values[i], datas[i], predecessor, delay);\r\n        }\r\n    }\r\n\r\n    /**\r\n     * @dev Schedule an operation that is to becomes valid after a given delay.\r\n     */\r\n    function _schedule(bytes32 id, uint256 delay) private {\r\n        require(!isOperation(id), \"TimelockController: operation already scheduled\");\r\n        require(delay >= getMinDelay(), \"TimelockController: insufficient delay\");\r\n        // solhint-disable-next-line not-rely-on-time\r\n        _timestamps[id] = block.timestamp + delay;\r\n    }\r\n\r\n    /**\r\n     * @dev Cancel an operation.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - the caller must have the 'proposer' role.\r\n     */\r\n    function cancel(bytes32 id) public virtual onlyRole(PROPOSER_ROLE) {\r\n        require(isOperationPending(id), \"TimelockController: operation cannot be cancelled\");\r\n        delete _timestamps[id];\r\n\r\n        emit Cancelled(id);\r\n    }\r\n\r\n    /**\r\n     * @dev Execute an (ready) operation containing a single transaction.\r\n     *\r\n     * Emits a {CallExecuted} event.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - the caller must have the 'executor' role.\r\n     */\r\n    function execute(address target, uint256 value, bytes calldata data, bytes32 predecessor, bytes32 salt) public payable virtual onlyRoleOrOpenRole(EXECUTOR_ROLE) {\r\n        bytes32 id = hashOperation(target, value, data, predecessor, salt);\r\n        _beforeCall(predecessor);\r\n        _call(id, 0, target, value, data);\r\n        _afterCall(id);\r\n    }\r\n\r\n    /**\r\n     * @dev Execute an (ready) operation containing a batch of transactions.\r\n     *\r\n     * Emits one {CallExecuted} event per transaction in the batch.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - the caller must have the 'executor' role.\r\n     */\r\n    function executeBatch(address[] calldata targets, uint256[] calldata values, bytes[] calldata datas, bytes32 predecessor, bytes32 salt) public payable virtual onlyRoleOrOpenRole(EXECUTOR_ROLE) {\r\n        require(targets.length == values.length, \"TimelockController: length mismatch\");\r\n        require(targets.length == datas.length, \"TimelockController: length mismatch\");\r\n\r\n        bytes32 id = hashOperationBatch(targets, values, datas, predecessor, salt);\r\n        _beforeCall(predecessor);\r\n        for (uint256 i = 0; i < targets.length; ++i) {\r\n            _call(id, i, targets[i], values[i], datas[i]);\r\n        }\r\n        _afterCall(id);\r\n    }\r\n\r\n    /**\r\n     * @dev Checks before execution of an operation's calls.\r\n     */\r\n    function _beforeCall(bytes32 predecessor) private view {\r\n        require(predecessor == bytes32(0) || isOperationDone(predecessor), \"TimelockController: missing dependency\");\r\n    }\r\n\r\n    /**\r\n     * @dev Checks after execution of an operation's calls.\r\n     */\r\n    function _afterCall(bytes32 id) private {\r\n        require(isOperationReady(id), \"TimelockController: operation is not ready\");\r\n        _timestamps[id] = _DONE_TIMESTAMP;\r\n    }\r\n\r\n    /**\r\n     * @dev Execute an operation's call.\r\n     *\r\n     * Emits a {CallExecuted} event.\r\n     */\r\n    function _call(bytes32 id, uint256 index, address target, uint256 value, bytes calldata data) private {\r\n        // solhint-disable-next-line avoid-low-level-calls\r\n        (bool success,) = target.call{value: value}(data);\r\n        require(success, \"TimelockController: underlying transaction reverted\");\r\n\r\n        emit CallExecuted(id, index, target, value, data);\r\n    }\r\n\r\n    /**\r\n     * @dev Changes the minimum timelock duration for future operations.\r\n     *\r\n     * Emits a {MinDelayChange} event.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - the caller must be the timelock itself. This can only be achieved by scheduling and later executing\r\n     * an operation where the timelock is the target and the data is the ABI-encoded call to this function.\r\n     */\r\n    function updateDelay(uint256 newDelay) external virtual {\r\n        require(msg.sender == address(this), \"TimelockController: caller must be timelock\");\r\n        emit MinDelayChange(_minDelay, newDelay);\r\n        _minDelay = newDelay;\r\n    }\r\n}\r\n\r\n\r\n// File contracts/interfaces/ISwapRouter.sol\r\n\r\n\r\npragma solidity 0.8.6;\r\n\r\n/// @title Router token swapping functionality\r\n/// @notice Functions for swapping tokens via Uniswap V3\r\ninterface ISwapRouter {\r\n    struct ExactInputSingleParams {\r\n        address tokenIn;\r\n        address tokenOut;\r\n        uint24 fee;\r\n        address recipient;\r\n        uint256 deadline;\r\n        uint256 amountIn;\r\n        uint256 amountOutMinimum;\r\n        uint160 sqrtPriceLimitX96;\r\n    }\r\n\r\n    /// @notice Swaps `amountIn` of one token for as much as possible of another token\r\n    /// @param params The parameters necessary for the swap, encoded as `ExactInputSingleParams` in calldata\r\n    /// @return amountOut The amount of the received token\r\n    function exactInputSingle(ExactInputSingleParams calldata params) external payable returns (uint256 amountOut);\r\n\r\n    struct ExactInputParams {\r\n        bytes path;\r\n        address recipient;\r\n        uint256 deadline;\r\n        uint256 amountIn;\r\n        uint256 amountOutMinimum;\r\n    }\r\n\r\n    /// @notice Swaps `amountIn` of one token for as much as possible of another along the specified path\r\n    /// @param params The parameters necessary for the multi-hop swap, encoded as `ExactInputParams` in calldata\r\n    /// @return amountOut The amount of the received token\r\n    function exactInput(ExactInputParams calldata params) external payable returns (uint256 amountOut);\r\n\r\n    struct ExactOutputSingleParams {\r\n        address tokenIn;\r\n        address tokenOut;\r\n        uint24 fee;\r\n        address recipient;\r\n        uint256 deadline;\r\n        uint256 amountOut;\r\n        uint256 amountInMaximum;\r\n        uint160 sqrtPriceLimitX96;\r\n    }\r\n\r\n    /// @notice Swaps as little as possible of one token for `amountOut` of another token\r\n    /// @param params The parameters necessary for the swap, encoded as `ExactOutputSingleParams` in calldata\r\n    /// @return amountIn The amount of the input token\r\n    function exactOutputSingle(ExactOutputSingleParams calldata params) external payable returns (uint256 amountIn);\r\n\r\n    struct ExactOutputParams {\r\n        bytes path;\r\n        address recipient;\r\n        uint256 deadline;\r\n        uint256 amountOut;\r\n        uint256 amountInMaximum;\r\n    }\r\n    /// @notice Swaps as little as possible of one token for `amountOut` of another along the specified path (reversed)\r\n    /// @param params The parameters necessary for the multi-hop swap, encoded as `ExactOutputParams` in calldata\r\n    /// @return amountIn The amount of the input token\r\n    function exactOutput(ExactOutputParams calldata params) external payable returns (uint256 amountIn);\r\n\r\n    // solhint-disable-next-line func-name-mixedcase\r\n    function WETH9() external pure returns (address);\r\n}\r\n\r\n\r\n// File openzeppelin-solidity/contracts/token/ERC20/IERC20.sol@v4.1.0\r\n\r\n\r\n\r\npragma solidity ^0.8.0;\r\n\r\n/**\r\n * @dev Interface of the ERC20 standard as defined in the EIP.\r\n */\r\ninterface IERC20 {\r\n    /**\r\n     * @dev Returns the amount of tokens in existence.\r\n     */\r\n    function totalSupply() external view returns (uint256);\r\n\r\n    /**\r\n     * @dev Returns the amount of tokens owned by `account`.\r\n     */\r\n    function balanceOf(address account) external view returns (uint256);\r\n\r\n    /**\r\n     * @dev Moves `amount` tokens from the caller's account to `recipient`.\r\n     *\r\n     * Returns a boolean value indicating whether the operation succeeded.\r\n     *\r\n     * Emits a {Transfer} event.\r\n     */\r\n    function transfer(address recipient, uint256 amount) external returns (bool);\r\n\r\n    /**\r\n     * @dev Returns the remaining number of tokens that `spender` will be\r\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\r\n     * zero by default.\r\n     *\r\n     * This value changes when {approve} or {transferFrom} are called.\r\n     */\r\n    function allowance(address owner, address spender) external view returns (uint256);\r\n\r\n    /**\r\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\r\n     *\r\n     * Returns a boolean value indicating whether the operation succeeded.\r\n     *\r\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\r\n     * that someone may use both the old and the new allowance by unfortunate\r\n     * transaction ordering. One possible solution to mitigate this race\r\n     * condition is to first reduce the spender's allowance to 0 and set the\r\n     * desired value afterwards:\r\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\r\n     *\r\n     * Emits an {Approval} event.\r\n     */\r\n    function approve(address spender, uint256 amount) external returns (bool);\r\n\r\n    /**\r\n     * @dev Moves `amount` tokens from `sender` to `recipient` using the\r\n     * allowance mechanism. `amount` is then deducted from the caller's\r\n     * allowance.\r\n     *\r\n     * Returns a boolean value indicating whether the operation succeeded.\r\n     *\r\n     * Emits a {Transfer} event.\r\n     */\r\n    function transferFrom(address sender, address recipient, uint256 amount) external returns (bool);\r\n\r\n    /**\r\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\r\n     * another (`to`).\r\n     *\r\n     * Note that `value` may be zero.\r\n     */\r\n    event Transfer(address indexed from, address indexed to, uint256 value);\r\n\r\n    /**\r\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\r\n     * a call to {approve}. `value` is the new allowance.\r\n     */\r\n    event Approval(address indexed owner, address indexed spender, uint256 value);\r\n}\r\n\r\n\r\n// File openzeppelin-solidity/contracts/utils/Address.sol@v4.1.0\r\n\r\n\r\n\r\npragma solidity ^0.8.0;\r\n\r\n/**\r\n * @dev Collection of functions related to the address type\r\n */\r\nlibrary Address {\r\n    /**\r\n     * @dev Returns true if `account` is a contract.\r\n     *\r\n     * [IMPORTANT]\r\n     * ====\r\n     * It is unsafe to assume that an address for which this function returns\r\n     * false is an externally-owned account (EOA) and not a contract.\r\n     *\r\n     * Among others, `isContract` will return false for the following\r\n     * types of addresses:\r\n     *\r\n     *  - an externally-owned account\r\n     *  - a contract in construction\r\n     *  - an address where a contract will be created\r\n     *  - an address where a contract lived, but was destroyed\r\n     * ====\r\n     */\r\n    function isContract(address account) internal view returns (bool) {\r\n        // This method relies on extcodesize, which returns 0 for contracts in\r\n        // construction, since the code is only stored at the end of the\r\n        // constructor execution.\r\n\r\n        uint256 size;\r\n        // solhint-disable-next-line no-inline-assembly\r\n        assembly { size := extcodesize(account) }\r\n        return size > 0;\r\n    }\r\n\r\n    /**\r\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\r\n     * `recipient`, forwarding all available gas and reverting on errors.\r\n     *\r\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\r\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\r\n     * imposed by `transfer`, making them unable to receive funds via\r\n     * `transfer`. {sendValue} removes this limitation.\r\n     *\r\n     * https://diligence.consensys.net/posts/2019/09/stop-using-soliditys-transfer-now/[Learn more].\r\n     *\r\n     * IMPORTANT: because control is transferred to `recipient`, care must be\r\n     * taken to not create reentrancy vulnerabilities. Consider using\r\n     * {ReentrancyGuard} or the\r\n     * https://solidity.readthedocs.io/en/v0.5.11/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\r\n     */\r\n    function sendValue(address payable recipient, uint256 amount) internal {\r\n        require(address(this).balance >= amount, \"Address: insufficient balance\");\r\n\r\n        // solhint-disable-next-line avoid-low-level-calls, avoid-call-value\r\n        (bool success, ) = recipient.call{ value: amount }(\"\");\r\n        require(success, \"Address: unable to send value, recipient may have reverted\");\r\n    }\r\n\r\n    /**\r\n     * @dev Performs a Solidity function call using a low level `call`. A\r\n     * plain`call` is an unsafe replacement for a function call: use this\r\n     * function instead.\r\n     *\r\n     * If `target` reverts with a revert reason, it is bubbled up by this\r\n     * function (like regular Solidity function calls).\r\n     *\r\n     * Returns the raw returned data. To convert to the expected return value,\r\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - `target` must be a contract.\r\n     * - calling `target` with `data` must not revert.\r\n     *\r\n     * _Available since v3.1._\r\n     */\r\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\r\n      return functionCall(target, data, \"Address: low-level call failed\");\r\n    }\r\n\r\n    /**\r\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\r\n     * `errorMessage` as a fallback revert reason when `target` reverts.\r\n     *\r\n     * _Available since v3.1._\r\n     */\r\n    function functionCall(address target, bytes memory data, string memory errorMessage) internal returns (bytes memory) {\r\n        return functionCallWithValue(target, data, 0, errorMessage);\r\n    }\r\n\r\n    /**\r\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\r\n     * but also transferring `value` wei to `target`.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - the calling contract must have an ETH balance of at least `value`.\r\n     * - the called Solidity function must be `payable`.\r\n     *\r\n     * _Available since v3.1._\r\n     */\r\n    function functionCallWithValue(address target, bytes memory data, uint256 value) internal returns (bytes memory) {\r\n        return functionCallWithValue(target, data, value, \"Address: low-level call with value failed\");\r\n    }\r\n\r\n    /**\r\n     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\r\n     * with `errorMessage` as a fallback revert reason when `target` reverts.\r\n     *\r\n     * _Available since v3.1._\r\n     */\r\n    function functionCallWithValue(address target, bytes memory data, uint256 value, string memory errorMessage) internal returns (bytes memory) {\r\n        require(address(this).balance >= value, \"Address: insufficient balance for call\");\r\n        require(isContract(target), \"Address: call to non-contract\");\r\n\r\n        // solhint-disable-next-line avoid-low-level-calls\r\n        (bool success, bytes memory returndata) = target.call{ value: value }(data);\r\n        return _verifyCallResult(success, returndata, errorMessage);\r\n    }\r\n\r\n    /**\r\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\r\n     * but performing a static call.\r\n     *\r\n     * _Available since v3.3._\r\n     */\r\n    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\r\n        return functionStaticCall(target, data, \"Address: low-level static call failed\");\r\n    }\r\n\r\n    /**\r\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\r\n     * but performing a static call.\r\n     *\r\n     * _Available since v3.3._\r\n     */\r\n    function functionStaticCall(address target, bytes memory data, string memory errorMessage) internal view returns (bytes memory) {\r\n        require(isContract(target), \"Address: static call to non-contract\");\r\n\r\n        // solhint-disable-next-line avoid-low-level-calls\r\n        (bool success, bytes memory returndata) = target.staticcall(data);\r\n        return _verifyCallResult(success, returndata, errorMessage);\r\n    }\r\n\r\n    /**\r\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\r\n     * but performing a delegate call.\r\n     *\r\n     * _Available since v3.4._\r\n     */\r\n    function functionDelegateCall(address target, bytes memory data) internal returns (bytes memory) {\r\n        return functionDelegateCall(target, data, \"Address: low-level delegate call failed\");\r\n    }\r\n\r\n    /**\r\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\r\n     * but performing a delegate call.\r\n     *\r\n     * _Available since v3.4._\r\n     */\r\n    function functionDelegateCall(address target, bytes memory data, string memory errorMessage) internal returns (bytes memory) {\r\n        require(isContract(target), \"Address: delegate call to non-contract\");\r\n\r\n        // solhint-disable-next-line avoid-low-level-calls\r\n        (bool success, bytes memory returndata) = target.delegatecall(data);\r\n        return _verifyCallResult(success, returndata, errorMessage);\r\n    }\r\n\r\n    function _verifyCallResult(bool success, bytes memory returndata, string memory errorMessage) private pure returns(bytes memory) {\r\n        if (success) {\r\n            return returndata;\r\n        } else {\r\n            // Look for revert reason and bubble it up if present\r\n            if (returndata.length > 0) {\r\n                // The easiest way to bubble the revert reason is using memory via assembly\r\n\r\n                // solhint-disable-next-line no-inline-assembly\r\n                assembly {\r\n                    let returndata_size := mload(returndata)\r\n                    revert(add(32, returndata), returndata_size)\r\n                }\r\n            } else {\r\n                revert(errorMessage);\r\n            }\r\n        }\r\n    }\r\n}\r\n\r\n\r\n// File openzeppelin-solidity/contracts/token/ERC20/utils/SafeERC20.sol@v4.1.0\r\n\r\n\r\n\r\npragma solidity ^0.8.0;\r\n\r\n\r\n/**\r\n * @title SafeERC20\r\n * @dev Wrappers around ERC20 operations that throw on failure (when the token\r\n * contract returns false). Tokens that return no value (and instead revert or\r\n * throw on failure) are also supported, non-reverting calls are assumed to be\r\n * successful.\r\n * To use this library you can add a `using SafeERC20 for IERC20;` statement to your contract,\r\n * which allows you to call the safe operations as `token.safeTransfer(...)`, etc.\r\n */\r\nlibrary SafeERC20 {\r\n    using Address for address;\r\n\r\n    function safeTransfer(IERC20 token, address to, uint256 value) internal {\r\n        _callOptionalReturn(token, abi.encodeWithSelector(token.transfer.selector, to, value));\r\n    }\r\n\r\n    function safeTransferFrom(IERC20 token, address from, address to, uint256 value) internal {\r\n        _callOptionalReturn(token, abi.encodeWithSelector(token.transferFrom.selector, from, to, value));\r\n    }\r\n\r\n    /**\r\n     * @dev Deprecated. This function has issues similar to the ones found in\r\n     * {IERC20-approve}, and its usage is discouraged.\r\n     *\r\n     * Whenever possible, use {safeIncreaseAllowance} and\r\n     * {safeDecreaseAllowance} instead.\r\n     */\r\n    function safeApprove(IERC20 token, address spender, uint256 value) internal {\r\n        // safeApprove should only be called when setting an initial allowance,\r\n        // or when resetting it to zero. To increase and decrease it, use\r\n        // 'safeIncreaseAllowance' and 'safeDecreaseAllowance'\r\n        // solhint-disable-next-line max-line-length\r\n        require((value == 0) || (token.allowance(address(this), spender) == 0),\r\n            \"SafeERC20: approve from non-zero to non-zero allowance\"\r\n        );\r\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, value));\r\n    }\r\n\r\n    function safeIncreaseAllowance(IERC20 token, address spender, uint256 value) internal {\r\n        uint256 newAllowance = token.allowance(address(this), spender) + value;\r\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));\r\n    }\r\n\r\n    function safeDecreaseAllowance(IERC20 token, address spender, uint256 value) internal {\r\n        unchecked {\r\n            uint256 oldAllowance = token.allowance(address(this), spender);\r\n            require(oldAllowance >= value, \"SafeERC20: decreased allowance below zero\");\r\n            uint256 newAllowance = oldAllowance - value;\r\n            _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));\r\n        }\r\n    }\r\n\r\n    /**\r\n     * @dev Imitates a Solidity high-level call (i.e. a regular function call to a contract), relaxing the requirement\r\n     * on the return value: the return value is optional (but if data is returned, it must not be false).\r\n     * @param token The token targeted by the call.\r\n     * @param data The call data (encoded using abi.encode or one of its variants).\r\n     */\r\n    function _callOptionalReturn(IERC20 token, bytes memory data) private {\r\n        // We need to perform a low level call here, to bypass Solidity's return data size checking mechanism, since\r\n        // we're implementing it ourselves. We use {Address.functionCall} to perform this call, which verifies that\r\n        // the target address contains contract code and also asserts for success in the low-level call.\r\n\r\n        bytes memory returndata = address(token).functionCall(data, \"SafeERC20: low-level call failed\");\r\n        if (returndata.length > 0) { // Return data is optional\r\n            // solhint-disable-next-line max-line-length\r\n            require(abi.decode(returndata, (bool)), \"SafeERC20: ERC20 operation did not succeed\");\r\n        }\r\n    }\r\n}\r\n\r\n\r\n// File openzeppelin-solidity/contracts/token/ERC20/extensions/IERC20Metadata.sol@v4.1.0\r\n\r\n\r\n\r\npragma solidity ^0.8.0;\r\n\r\n/**\r\n * @dev Interface for the optional metadata functions from the ERC20 standard.\r\n *\r\n * _Available since v4.1._\r\n */\r\ninterface IERC20Metadata is IERC20 {\r\n    /**\r\n     * @dev Returns the name of the token.\r\n     */\r\n    function name() external view returns (string memory);\r\n\r\n    /**\r\n     * @dev Returns the symbol of the token.\r\n     */\r\n    function symbol() external view returns (string memory);\r\n\r\n    /**\r\n     * @dev Returns the decimals places of the token.\r\n     */\r\n    function decimals() external view returns (uint8);\r\n}\r\n\r\n\r\n// File openzeppelin-solidity/contracts/token/ERC20/ERC20.sol@v4.1.0\r\n\r\n\r\n\r\npragma solidity ^0.8.0;\r\n\r\n\r\n\r\n/**\r\n * @dev Implementation of the {IERC20} interface.\r\n *\r\n * This implementation is agnostic to the way tokens are created. This means\r\n * that a supply mechanism has to be added in a derived contract using {_mint}.\r\n * For a generic mechanism see {ERC20PresetMinterPauser}.\r\n *\r\n * TIP: For a detailed writeup see our guide\r\n * https://forum.zeppelin.solutions/t/how-to-implement-erc20-supply-mechanisms/226[How\r\n * to implement supply mechanisms].\r\n *\r\n * We have followed general OpenZeppelin guidelines: functions revert instead\r\n * of returning `false` on failure. This behavior is nonetheless conventional\r\n * and does not conflict with the expectations of ERC20 applications.\r\n *\r\n * Additionally, an {Approval} event is emitted on calls to {transferFrom}.\r\n * This allows applications to reconstruct the allowance for all accounts just\r\n * by listening to said events. Other implementations of the EIP may not emit\r\n * these events, as it isn't required by the specification.\r\n *\r\n * Finally, the non-standard {decreaseAllowance} and {increaseAllowance}\r\n * functions have been added to mitigate the well-known issues around setting\r\n * allowances. See {IERC20-approve}.\r\n */\r\ncontract ERC20 is Context, IERC20, IERC20Metadata {\r\n    mapping (address => uint256) private _balances;\r\n\r\n    mapping (address => mapping (address => uint256)) private _allowances;\r\n\r\n    uint256 private _totalSupply;\r\n\r\n    string private _name;\r\n    string private _symbol;\r\n\r\n    /**\r\n     * @dev Sets the values for {name} and {symbol}.\r\n     *\r\n     * The defaut value of {decimals} is 18. To select a different value for\r\n     * {decimals} you should overload it.\r\n     *\r\n     * All two of these values are immutable: they can only be set once during\r\n     * construction.\r\n     */\r\n    constructor (string memory name_, string memory symbol_) {\r\n        _name = name_;\r\n        _symbol = symbol_;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the name of the token.\r\n     */\r\n    function name() public view virtual override returns (string memory) {\r\n        return _name;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the symbol of the token, usually a shorter version of the\r\n     * name.\r\n     */\r\n    function symbol() public view virtual override returns (string memory) {\r\n        return _symbol;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the number of decimals used to get its user representation.\r\n     * For example, if `decimals` equals `2`, a balance of `505` tokens should\r\n     * be displayed to a user as `5,05` (`505 / 10 ** 2`).\r\n     *\r\n     * Tokens usually opt for a value of 18, imitating the relationship between\r\n     * Ether and Wei. This is the value {ERC20} uses, unless this function is\r\n     * overridden;\r\n     *\r\n     * NOTE: This information is only used for _display_ purposes: it in\r\n     * no way affects any of the arithmetic of the contract, including\r\n     * {IERC20-balanceOf} and {IERC20-transfer}.\r\n     */\r\n    function decimals() public view virtual override returns (uint8) {\r\n        return 18;\r\n    }\r\n\r\n    /**\r\n     * @dev See {IERC20-totalSupply}.\r\n     */\r\n    function totalSupply() public view virtual override returns (uint256) {\r\n        return _totalSupply;\r\n    }\r\n\r\n    /**\r\n     * @dev See {IERC20-balanceOf}.\r\n     */\r\n    function balanceOf(address account) public view virtual override returns (uint256) {\r\n        return _balances[account];\r\n    }\r\n\r\n    /**\r\n     * @dev See {IERC20-transfer}.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - `recipient` cannot be the zero address.\r\n     * - the caller must have a balance of at least `amount`.\r\n     */\r\n    function transfer(address recipient, uint256 amount) public virtual override returns (bool) {\r\n        _transfer(_msgSender(), recipient, amount);\r\n        return true;\r\n    }\r\n\r\n    /**\r\n     * @dev See {IERC20-allowance}.\r\n     */\r\n    function allowance(address owner, address spender) public view virtual override returns (uint256) {\r\n        return _allowances[owner][spender];\r\n    }\r\n\r\n    /**\r\n     * @dev See {IERC20-approve}.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - `spender` cannot be the zero address.\r\n     */\r\n    function approve(address spender, uint256 amount) public virtual override returns (bool) {\r\n        _approve(_msgSender(), spender, amount);\r\n        return true;\r\n    }\r\n\r\n    /**\r\n     * @dev See {IERC20-transferFrom}.\r\n     *\r\n     * Emits an {Approval} event indicating the updated allowance. This is not\r\n     * required by the EIP. See the note at the beginning of {ERC20}.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - `sender` and `recipient` cannot be the zero address.\r\n     * - `sender` must have a balance of at least `amount`.\r\n     * - the caller must have allowance for ``sender``'s tokens of at least\r\n     * `amount`.\r\n     */\r\n    function transferFrom(address sender, address recipient, uint256 amount) public virtual override returns (bool) {\r\n        _transfer(sender, recipient, amount);\r\n\r\n        uint256 currentAllowance = _allowances[sender][_msgSender()];\r\n        require(currentAllowance >= amount, \"ERC20: transfer amount exceeds allowance\");\r\n        _approve(sender, _msgSender(), currentAllowance - amount);\r\n\r\n        return true;\r\n    }\r\n\r\n    /**\r\n     * @dev Atomically increases the allowance granted to `spender` by the caller.\r\n     *\r\n     * This is an alternative to {approve} that can be used as a mitigation for\r\n     * problems described in {IERC20-approve}.\r\n     *\r\n     * Emits an {Approval} event indicating the updated allowance.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - `spender` cannot be the zero address.\r\n     */\r\n    function increaseAllowance(address spender, uint256 addedValue) public virtual returns (bool) {\r\n        _approve(_msgSender(), spender, _allowances[_msgSender()][spender] + addedValue);\r\n        return true;\r\n    }\r\n\r\n    /**\r\n     * @dev Atomically decreases the allowance granted to `spender` by the caller.\r\n     *\r\n     * This is an alternative to {approve} that can be used as a mitigation for\r\n     * problems described in {IERC20-approve}.\r\n     *\r\n     * Emits an {Approval} event indicating the updated allowance.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - `spender` cannot be the zero address.\r\n     * - `spender` must have allowance for the caller of at least\r\n     * `subtractedValue`.\r\n     */\r\n    function decreaseAllowance(address spender, uint256 subtractedValue) public virtual returns (bool) {\r\n        uint256 currentAllowance = _allowances[_msgSender()][spender];\r\n        require(currentAllowance >= subtractedValue, \"ERC20: decreased allowance below zero\");\r\n        _approve(_msgSender(), spender, currentAllowance - subtractedValue);\r\n\r\n        return true;\r\n    }\r\n\r\n    /**\r\n     * @dev Moves tokens `amount` from `sender` to `recipient`.\r\n     *\r\n     * This is internal function is equivalent to {transfer}, and can be used to\r\n     * e.g. implement automatic token fees, slashing mechanisms, etc.\r\n     *\r\n     * Emits a {Transfer} event.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - `sender` cannot be the zero address.\r\n     * - `recipient` cannot be the zero address.\r\n     * - `sender` must have a balance of at least `amount`.\r\n     */\r\n    function _transfer(address sender, address recipient, uint256 amount) internal virtual {\r\n        require(sender != address(0), \"ERC20: transfer from the zero address\");\r\n        require(recipient != address(0), \"ERC20: transfer to the zero address\");\r\n\r\n        _beforeTokenTransfer(sender, recipient, amount);\r\n\r\n        uint256 senderBalance = _balances[sender];\r\n        require(senderBalance >= amount, \"ERC20: transfer amount exceeds balance\");\r\n        _balances[sender] = senderBalance - amount;\r\n        _balances[recipient] += amount;\r\n\r\n        emit Transfer(sender, recipient, amount);\r\n    }\r\n\r\n    /** @dev Creates `amount` tokens and assigns them to `account`, increasing\r\n     * the total supply.\r\n     *\r\n     * Emits a {Transfer} event with `from` set to the zero address.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - `to` cannot be the zero address.\r\n     */\r\n    function _mint(address account, uint256 amount) internal virtual {\r\n        require(account != address(0), \"ERC20: mint to the zero address\");\r\n\r\n        _beforeTokenTransfer(address(0), account, amount);\r\n\r\n        _totalSupply += amount;\r\n        _balances[account] += amount;\r\n        emit Transfer(address(0), account, amount);\r\n    }\r\n\r\n    /**\r\n     * @dev Destroys `amount` tokens from `account`, reducing the\r\n     * total supply.\r\n     *\r\n     * Emits a {Transfer} event with `to` set to the zero address.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - `account` cannot be the zero address.\r\n     * - `account` must have at least `amount` tokens.\r\n     */\r\n    function _burn(address account, uint256 amount) internal virtual {\r\n        require(account != address(0), \"ERC20: burn from the zero address\");\r\n\r\n        _beforeTokenTransfer(account, address(0), amount);\r\n\r\n        uint256 accountBalance = _balances[account];\r\n        require(accountBalance >= amount, \"ERC20: burn amount exceeds balance\");\r\n        _balances[account] = accountBalance - amount;\r\n        _totalSupply -= amount;\r\n\r\n        emit Transfer(account, address(0), amount);\r\n    }\r\n\r\n    /**\r\n     * @dev Sets `amount` as the allowance of `spender` over the `owner` s tokens.\r\n     *\r\n     * This internal function is equivalent to `approve`, and can be used to\r\n     * e.g. set automatic allowances for certain subsystems, etc.\r\n     *\r\n     * Emits an {Approval} event.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - `owner` cannot be the zero address.\r\n     * - `spender` cannot be the zero address.\r\n     */\r\n    function _approve(address owner, address spender, uint256 amount) internal virtual {\r\n        require(owner != address(0), \"ERC20: approve from the zero address\");\r\n        require(spender != address(0), \"ERC20: approve to the zero address\");\r\n\r\n        _allowances[owner][spender] = amount;\r\n        emit Approval(owner, spender, amount);\r\n    }\r\n\r\n    /**\r\n     * @dev Hook that is called before any transfer of tokens. This includes\r\n     * minting and burning.\r\n     *\r\n     * Calling conditions:\r\n     *\r\n     * - when `from` and `to` are both non-zero, `amount` of ``from``'s tokens\r\n     * will be to transferred to `to`.\r\n     * - when `from` is zero, `amount` tokens will be minted for `to`.\r\n     * - when `to` is zero, `amount` of ``from``'s tokens will be burned.\r\n     * - `from` and `to` are never both zero.\r\n     *\r\n     * To learn more about hooks, head to xref:ROOT:extending-contracts.adoc#using-hooks[Using Hooks].\r\n     */\r\n    function _beforeTokenTransfer(address from, address to, uint256 amount) internal virtual { }\r\n}\r\n\r\n\r\n// File openzeppelin-solidity/contracts/utils/math/SafeMath.sol@v4.1.0\r\n\r\n\r\n\r\npragma solidity ^0.8.0;\r\n\r\n// CAUTION\r\n// This version of SafeMath should only be used with Solidity 0.8 or later,\r\n// because it relies on the compiler's built in overflow checks.\r\n\r\n/**\r\n * @dev Wrappers over Solidity's arithmetic operations.\r\n *\r\n * NOTE: `SafeMath` is no longer needed starting with Solidity 0.8. The compiler\r\n * now has built in overflow checking.\r\n */\r\nlibrary SafeMath {\r\n    /**\r\n     * @dev Returns the addition of two unsigned integers, with an overflow flag.\r\n     *\r\n     * _Available since v3.4._\r\n     */\r\n    function tryAdd(uint256 a, uint256 b) internal pure returns (bool, uint256) {\r\n        unchecked {\r\n            uint256 c = a + b;\r\n            if (c < a) return (false, 0);\r\n            return (true, c);\r\n        }\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the substraction of two unsigned integers, with an overflow flag.\r\n     *\r\n     * _Available since v3.4._\r\n     */\r\n    function trySub(uint256 a, uint256 b) internal pure returns (bool, uint256) {\r\n        unchecked {\r\n            if (b > a) return (false, 0);\r\n            return (true, a - b);\r\n        }\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the multiplication of two unsigned integers, with an overflow flag.\r\n     *\r\n     * _Available since v3.4._\r\n     */\r\n    function tryMul(uint256 a, uint256 b) internal pure returns (bool, uint256) {\r\n        unchecked {\r\n            // Gas optimization: this is cheaper than requiring 'a' not being zero, but the\r\n            // benefit is lost if 'b' is also tested.\r\n            // See: https://github.com/OpenZeppelin/openzeppelin-contracts/pull/522\r\n            if (a == 0) return (true, 0);\r\n            uint256 c = a * b;\r\n            if (c / a != b) return (false, 0);\r\n            return (true, c);\r\n        }\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the division of two unsigned integers, with a division by zero flag.\r\n     *\r\n     * _Available since v3.4._\r\n     */\r\n    function tryDiv(uint256 a, uint256 b) internal pure returns (bool, uint256) {\r\n        unchecked {\r\n            if (b == 0) return (false, 0);\r\n            return (true, a / b);\r\n        }\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the remainder of dividing two unsigned integers, with a division by zero flag.\r\n     *\r\n     * _Available since v3.4._\r\n     */\r\n    function tryMod(uint256 a, uint256 b) internal pure returns (bool, uint256) {\r\n        unchecked {\r\n            if (b == 0) return (false, 0);\r\n            return (true, a % b);\r\n        }\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the addition of two unsigned integers, reverting on\r\n     * overflow.\r\n     *\r\n     * Counterpart to Solidity's `+` operator.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - Addition cannot overflow.\r\n     */\r\n    function add(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        return a + b;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the subtraction of two unsigned integers, reverting on\r\n     * overflow (when the result is negative).\r\n     *\r\n     * Counterpart to Solidity's `-` operator.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - Subtraction cannot overflow.\r\n     */\r\n    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        return a - b;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the multiplication of two unsigned integers, reverting on\r\n     * overflow.\r\n     *\r\n     * Counterpart to Solidity's `*` operator.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - Multiplication cannot overflow.\r\n     */\r\n    function mul(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        return a * b;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the integer division of two unsigned integers, reverting on\r\n     * division by zero. The result is rounded towards zero.\r\n     *\r\n     * Counterpart to Solidity's `/` operator.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - The divisor cannot be zero.\r\n     */\r\n    function div(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        return a / b;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\r\n     * reverting when dividing by zero.\r\n     *\r\n     * Counterpart to Solidity's `%` operator. This function uses a `revert`\r\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\r\n     * invalid opcode to revert (consuming all remaining gas).\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - The divisor cannot be zero.\r\n     */\r\n    function mod(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        return a % b;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the subtraction of two unsigned integers, reverting with custom message on\r\n     * overflow (when the result is negative).\r\n     *\r\n     * CAUTION: This function is deprecated because it requires allocating memory for the error\r\n     * message unnecessarily. For custom revert reasons use {trySub}.\r\n     *\r\n     * Counterpart to Solidity's `-` operator.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - Subtraction cannot overflow.\r\n     */\r\n    function sub(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\r\n        unchecked {\r\n            require(b <= a, errorMessage);\r\n            return a - b;\r\n        }\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the integer division of two unsigned integers, reverting with custom message on\r\n     * division by zero. The result is rounded towards zero.\r\n     *\r\n     * Counterpart to Solidity's `%` operator. This function uses a `revert`\r\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\r\n     * invalid opcode to revert (consuming all remaining gas).\r\n     *\r\n     * Counterpart to Solidity's `/` operator. Note: this function uses a\r\n     * `revert` opcode (which leaves remaining gas untouched) while Solidity\r\n     * uses an invalid opcode to revert (consuming all remaining gas).\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - The divisor cannot be zero.\r\n     */\r\n    function div(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\r\n        unchecked {\r\n            require(b > 0, errorMessage);\r\n            return a / b;\r\n        }\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\r\n     * reverting with custom message when dividing by zero.\r\n     *\r\n     * CAUTION: This function is deprecated because it requires allocating memory for the error\r\n     * message unnecessarily. For custom revert reasons use {tryMod}.\r\n     *\r\n     * Counterpart to Solidity's `%` operator. This function uses a `revert`\r\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\r\n     * invalid opcode to revert (consuming all remaining gas).\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - The divisor cannot be zero.\r\n     */\r\n    function mod(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\r\n        unchecked {\r\n            require(b > 0, errorMessage);\r\n            return a % b;\r\n        }\r\n    }\r\n}\r\n\r\n\r\n// File contracts/HATToken.sol\r\n\r\n\r\npragma solidity 0.8.6;\r\n\r\n\r\ncontract HATToken is IERC20 {\r\n\r\n    struct PendingMinter {\r\n        uint256 seedAmount;\r\n        uint256 setMinterPendingAt;\r\n    }\r\n\r\n    /// @notice A checkpoint for marking number of votes from a given block\r\n    struct Checkpoint {\r\n        uint32 fromBlock;\r\n        uint96 votes;\r\n    }\r\n\r\n    /// @notice EIP-20 token name for this token\r\n    // solhint-disable-next-line const-name-snakecase\r\n    string public constant name = \"hats.finance\";\r\n\r\n    /// @notice EIP-20 token symbol for this token\r\n    // solhint-disable-next-line const-name-snakecase\r\n    string public constant symbol = \"HAT\";\r\n\r\n    /// @notice EIP-20 token decimals for this token\r\n    // solhint-disable-next-line const-name-snakecase\r\n    uint8 public constant decimals = 18;\r\n\r\n    /// @notice Total number of tokens in circulation\r\n    uint public override totalSupply;\r\n\r\n    address public governance;\r\n    address public governancePending;\r\n    uint256 public setGovernancePendingAt;\r\n    uint256 public immutable timeLockDelay;\r\n    uint256 public constant CAP = 10000000e18;\r\n\r\n    /// @notice Address which may mint new tokens\r\n    /// minter -> minting seedAmount\r\n    mapping (address => uint256) public minters;\r\n\r\n    /// @notice Address which may mint new tokens\r\n    /// minter -> minting seedAmount\r\n    mapping (address => PendingMinter) public pendingMinters;\r\n\r\n    // @notice Allowance amounts on behalf of others\r\n    mapping (address => mapping (address => uint96)) internal allowances;\r\n\r\n    // @notice Official record of token balances for each account\r\n    mapping (address => uint96) internal balances;\r\n\r\n    /// @notice A record of each accounts delegate\r\n    mapping (address => address) public delegates;\r\n\r\n    /// @notice A record of votes checkpoints for each account, by index\r\n    mapping (address => mapping (uint32 => Checkpoint)) public checkpoints;\r\n\r\n    /// @notice The number of checkpoints for each account\r\n    mapping (address => uint32) public numCheckpoints;\r\n\r\n    /// @notice A record of states for signing / validating signatures\r\n    mapping (address => uint) public nonces;\r\n\r\n    /// @notice The EIP-712 typehash for the contract's domain\r\n    bytes32 public constant DOMAIN_TYPEHASH =\r\n    keccak256(\"EIP712Domain(string name,uint256 chainId,address verifyingContract)\");\r\n\r\n    /// @notice The EIP-712 typehash for the delegation struct used by the contract\r\n    bytes32 public constant DELEGATION_TYPEHASH =\r\n    keccak256(\"Delegation(address delegatee,uint256 nonce,uint256 expiry)\");\r\n\r\n    /// @notice The EIP-712 typehash for the permit struct used by the contract\r\n    bytes32 public constant PERMIT_TYPEHASH =\r\n    keccak256(\"Permit(address owner,address spender,uint256 value,uint256 nonce,uint256 deadline)\");\r\n\r\n    /// @notice An event thats emitted when a new minter address is pending\r\n    event MinterPending(address indexed minter, uint256 seedAmount, uint256 at);\r\n    /// @notice An event thats emitted when the minter address is changed\r\n    event MinterChanged(address indexed minter, uint256 seedAmount);\r\n    /// @notice An event thats emitted when a new governance address is pending\r\n    event GovernancePending(address indexed oldGovernance, address indexed newGovernance, uint256 at);\r\n    /// @notice An event thats emitted when a new governance address is set\r\n    event GovernanceChanged(address indexed oldGovernance, address indexed newGovernance);\r\n    /// @notice An event thats emitted when an account changes its delegate\r\n    event DelegateChanged(address indexed delegator, address indexed fromDelegate, address indexed toDelegate);\r\n    /// @notice An event thats emitted when a delegate account's vote balance changes\r\n    event DelegateVotesChanged(address indexed delegate, uint previousBalance, uint newBalance);\r\n\r\n    /**\r\n     * @notice Construct a new HAT token\r\n     */\r\n    // solhint-disable-next-line func-visibility\r\n    constructor(address _governance, uint256 _timeLockDelay) {\r\n        governance = _governance;\r\n        timeLockDelay = _timeLockDelay;\r\n    }\r\n\r\n    function setPendingGovernance(address _governance) external {\r\n        require(msg.sender == governance, \"HAT:!governance\");\r\n        require(_governance != address(0), \"HAT:!_governance\");\r\n        governancePending = _governance;\r\n        // solhint-disable-next-line not-rely-on-time\r\n        setGovernancePendingAt = block.timestamp;\r\n        emit GovernancePending(governance, _governance, setGovernancePendingAt);\r\n    }\r\n\r\n    function confirmGovernance() external {\r\n        require(msg.sender == governance, \"HAT:!governance\");\r\n        require(setGovernancePendingAt > 0, \"HAT:!governancePending\");\r\n        // solhint-disable-next-line not-rely-on-time\r\n        require(block.timestamp - setGovernancePendingAt > timeLockDelay,\r\n        \"HAT: cannot confirm governance at this time\");\r\n        emit GovernanceChanged(governance, governancePending);\r\n        governance = governancePending;\r\n        setGovernancePendingAt = 0;\r\n    }\r\n\r\n    function setPendingMinter(address _minter, uint256 _cap) external {\r\n        require(msg.sender == governance, \"HAT::!governance\");\r\n        pendingMinters[_minter].seedAmount = _cap;\r\n        // solhint-disable-next-line not-rely-on-time\r\n        pendingMinters[_minter].setMinterPendingAt = block.timestamp;\r\n        emit MinterPending(_minter, _cap, pendingMinters[_minter].setMinterPendingAt);\r\n    }\r\n\r\n    function confirmMinter(address _minter) external {\r\n        require(msg.sender == governance, \"HAT::mint: only the governance can confirm minter\");\r\n        require(pendingMinters[_minter].setMinterPendingAt > 0, \"HAT:: no pending minter was set\");\r\n        // solhint-disable-next-line not-rely-on-time\r\n        require(block.timestamp - pendingMinters[_minter].setMinterPendingAt > timeLockDelay,\r\n        \"HATToken: cannot confirm at this time\");\r\n        minters[_minter] = pendingMinters[_minter].seedAmount;\r\n        pendingMinters[_minter].setMinterPendingAt = 0;\r\n        emit MinterChanged(_minter, pendingMinters[_minter].seedAmount);\r\n    }\r\n\r\n    function burn(uint256 _amount) external {\r\n        return _burn(msg.sender, _amount);\r\n    }\r\n\r\n    function mint(address _account, uint _amount) external {\r\n        require(minters[msg.sender] >= _amount, \"HATToken: amount greater than limitation\");\r\n        minters[msg.sender] = SafeMath.sub(minters[msg.sender], _amount);\r\n        _mint(_account, _amount);\r\n    }\r\n\r\n    /**\r\n     * @notice Get the number of tokens `spender` is approved to spend on behalf of `account`\r\n     * @param account The address of the account holding the funds\r\n     * @param spender The address of the account spending the funds\r\n     * @return The number of tokens approved\r\n     */\r\n    function allowance(address account, address spender) external override view returns (uint) {\r\n        return allowances[account][spender];\r\n    }\r\n\r\n    /**\r\n     * @notice Approve `spender` to transfer up to `amount` from `src`\r\n     * @dev This will overwrite the approval amount for `spender`\r\n     *  and is subject to issues noted [here](https://eips.ethereum.org/EIPS/eip-20#approve)\r\n     * @param spender The address of the account which may transfer tokens\r\n     * @param rawAmount The number of tokens that are approved (2^256-1 means infinite)\r\n     * @return Whether or not the approval succeeded\r\n     */\r\n    function approve(address spender, uint rawAmount) external override returns (bool) {\r\n        uint96 amount;\r\n        if (rawAmount == type(uint256).max) {\r\n            amount = type(uint96).max;\r\n        } else {\r\n            amount = safe96(rawAmount, \"HAT::approve: amount exceeds 96 bits\");\r\n        }\r\n\r\n        allowances[msg.sender][spender] = amount;\r\n\r\n        emit Approval(msg.sender, spender, amount);\r\n        return true;\r\n    }\r\n\r\n    /**\r\n     * @dev Atomically increases the allowance granted to `spender` by the caller.\r\n     *\r\n     * This is an alternative to {approve} that can be used as a mitigation for\r\n     * problems described in {IERC20-approve}.\r\n     *\r\n     * Emits an {Approval} event indicating the updated allowance.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - `spender` cannot be the zero address.\r\n     */\r\n    function increaseAllowance(address spender, uint addedValue) external virtual returns (bool) {\r\n        require(spender != address(0), \"HAT: increaseAllowance to the zero address\");\r\n        uint96 valueToAdd = safe96(addedValue, \"HAT::increaseAllowance: addedValue exceeds 96 bits\");\r\n        allowances[msg.sender][spender] =\r\n        add96(allowances[msg.sender][spender], valueToAdd, \"HAT::increaseAllowance: overflows\");\r\n        emit Approval(msg.sender, spender, allowances[msg.sender][spender]);\r\n        return true;\r\n    }\r\n\r\n    /**\r\n     * @dev Atomically decreases the allowance granted to `spender` by the caller.\r\n     *\r\n     * This is an alternative to {approve} that can be used as a mitigation for\r\n     * problems described in {IERC20-approve}.\r\n     *\r\n     * Emits an {Approval} event indicating the updated allowance.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - `spender` cannot be the zero address.\r\n     * - `spender` must have allowance for the caller of at least\r\n     * `subtractedValue`.\r\n     */\r\n    function decreaseAllowance(address spender, uint subtractedValue) external virtual returns (bool) {\r\n        require(spender != address(0), \"HAT: decreaseAllowance to the zero address\");\r\n        uint96 valueTosubtract = safe96(subtractedValue, \"HAT::decreaseAllowance: subtractedValue exceeds 96 bits\");\r\n        allowances[msg.sender][spender] = sub96(allowances[msg.sender][spender], valueTosubtract,\r\n        \"HAT::decreaseAllowance: spender allowance is less than subtractedValue\");\r\n        emit Approval(msg.sender, spender, allowances[msg.sender][spender]);\r\n        return true;\r\n    }\r\n\r\n    /**\r\n     * @notice Triggers an approval from owner to spends\r\n     * @param owner The address to approve from\r\n     * @param spender The address to be approved\r\n     * @param rawAmount The number of tokens that are approved (2^256-1 means infinite)\r\n     * @param deadline The time at which to expire the signature\r\n     * @param v The recovery byte of the signature\r\n     * @param r Half of the ECDSA signature pair\r\n     * @param s Half of the ECDSA signature pair\r\n     */\r\n    function permit(address owner, address spender, uint rawAmount, uint deadline, uint8 v, bytes32 r, bytes32 s) external {\r\n        uint96 amount;\r\n        if (rawAmount == type(uint256).max) {\r\n            amount = type(uint96).max;\r\n        } else {\r\n            amount = safe96(rawAmount, \"HAT::permit: amount exceeds 96 bits\");\r\n        }\r\n\r\n        bytes32 domainSeparator = keccak256(abi.encode(DOMAIN_TYPEHASH, keccak256(bytes(name)), getChainId(), address(this)));\r\n        bytes32 structHash = keccak256(abi.encode(PERMIT_TYPEHASH, owner, spender, rawAmount, nonces[owner]++, deadline));\r\n        bytes32 digest = keccak256(abi.encodePacked(\"\\x19\\x01\", domainSeparator, structHash));\r\n        address signatory = ecrecover(digest, v, r, s);\r\n        require(signatory != address(0), \"HAT::permit: invalid signature\");\r\n        require(signatory == owner, \"HAT::permit: unauthorized\");\r\n        // solhint-disable-next-line not-rely-on-time\r\n        require(block.timestamp <= deadline, \"HAT::permit: signature expired\");\r\n\r\n        allowances[owner][spender] = amount;\r\n\r\n        emit Approval(owner, spender, amount);\r\n    }\r\n\r\n    /**\r\n     * @notice Get the number of tokens held by the `account`\r\n     * @param account The address of the account to get the balance of\r\n     * @return The number of tokens held\r\n     */\r\n    function balanceOf(address account) external view override returns (uint) {\r\n        return balances[account];\r\n    }\r\n\r\n    /**\r\n     * @notice Transfer `amount` tokens from `msg.sender` to `dst`\r\n     * @param dst The address of the destination account\r\n     * @param rawAmount The number of tokens to transfer\r\n     * @return Whether or not the transfer succeeded\r\n     */\r\n    function transfer(address dst, uint rawAmount) external override returns (bool) {\r\n        uint96 amount = safe96(rawAmount, \"HAT::transfer: amount exceeds 96 bits\");\r\n        _transferTokens(msg.sender, dst, amount);\r\n        return true;\r\n    }\r\n\r\n    /**\r\n     * @notice Transfer `amount` tokens from `src` to `dst`\r\n     * @param src The address of the source account\r\n     * @param dst The address of the destination account\r\n     * @param rawAmount The number of tokens to transfer\r\n     * @return Whether or not the transfer succeeded\r\n     */\r\n    function transferFrom(address src, address dst, uint rawAmount) external override returns (bool) {\r\n        address spender = msg.sender;\r\n        uint96 spenderAllowance = allowances[src][spender];\r\n        uint96 amount = safe96(rawAmount, \"HAT::approve: amount exceeds 96 bits\");\r\n\r\n        if (spender != src && spenderAllowance != type(uint96).max) {\r\n            uint96 newAllowance = sub96(spenderAllowance, amount,\r\n            \"HAT::transferFrom: transfer amount exceeds spender allowance\");\r\n            allowances[src][spender] = newAllowance;\r\n\r\n            emit Approval(src, spender, newAllowance);\r\n        }\r\n\r\n        _transferTokens(src, dst, amount);\r\n        return true;\r\n    }\r\n\r\n    /**\r\n     * @notice Delegate votes from `msg.sender` to `delegatee`\r\n     * @param delegatee The address to delegate votes to\r\n     */\r\n    function delegate(address delegatee) external {\r\n        return _delegate(msg.sender, delegatee);\r\n    }\r\n\r\n    /**\r\n     * @notice Delegates votes from signatory to `delegatee`\r\n     * @param delegatee The address to delegate votes to\r\n     * @param nonce The contract state required to match the signature\r\n     * @param expiry The time at which to expire the signature\r\n     * @param v The recovery byte of the signature\r\n     * @param r Half of the ECDSA signature pair\r\n     * @param s Half of the ECDSA signature pair\r\n     */\r\n    function delegateBySig(address delegatee, uint nonce, uint expiry, uint8 v, bytes32 r, bytes32 s) external {\r\n        bytes32 domainSeparator = keccak256(abi.encode(DOMAIN_TYPEHASH, keccak256(bytes(name)), getChainId(), address(this)));\r\n        bytes32 structHash = keccak256(abi.encode(DELEGATION_TYPEHASH, delegatee, nonce, expiry));\r\n        bytes32 digest = keccak256(abi.encodePacked(\"\\x19\\x01\", domainSeparator, structHash));\r\n        address signatory = ecrecover(digest, v, r, s);\r\n        require(signatory != address(0), \"HAT::delegateBySig: invalid signature\");\r\n        require(nonce == nonces[signatory]++, \"HAT::delegateBySig: invalid nonce\");\r\n        // solhint-disable-next-line not-rely-on-time\r\n        require(block.timestamp <= expiry, \"HAT::delegateBySig: signature expired\");\r\n        return _delegate(signatory, delegatee);\r\n    }\r\n\r\n    /**\r\n     * @notice Gets the current votes balance for `account`\r\n     * @param account The address to get votes balance\r\n     * @return The number of current votes for `account`\r\n     */\r\n    function getCurrentVotes(address account) external view returns (uint96) {\r\n        uint32 nCheckpoints = numCheckpoints[account];\r\n        return nCheckpoints > 0 ? checkpoints[account][nCheckpoints - 1].votes : 0;\r\n    }\r\n\r\n    /**\r\n     * @notice Determine the prior number of votes for an account as of a block number\r\n     * @dev Block number must be a finalized block or else this function will revert to prevent misinformation.\r\n     * @param account The address of the account to check\r\n     * @param blockNumber The block number to get the vote balance at\r\n     * @return The number of votes the account had as of the given block\r\n     */\r\n    function getPriorVotes(address account, uint blockNumber) external view returns (uint96) {\r\n        require(blockNumber < block.number, \"HAT::getPriorVotes: not yet determined\");\r\n\r\n        uint32 nCheckpoints = numCheckpoints[account];\r\n        if (nCheckpoints == 0) {\r\n            return 0;\r\n        }\r\n\r\n        // First check most recent balance\r\n        if (checkpoints[account][nCheckpoints - 1].fromBlock <= blockNumber) {\r\n            return checkpoints[account][nCheckpoints - 1].votes;\r\n        }\r\n\r\n        // Next check implicit zero balance\r\n        if (checkpoints[account][0].fromBlock > blockNumber) {\r\n            return 0;\r\n        }\r\n\r\n        uint32 lower = 0;\r\n        uint32 upper = nCheckpoints - 1;\r\n        while (upper > lower) {\r\n            uint32 center = upper - (upper - lower) / 2; // ceil, avoiding overflow\r\n            Checkpoint memory cp = checkpoints[account][center];\r\n            if (cp.fromBlock == blockNumber) {\r\n                return cp.votes;\r\n            } else if (cp.fromBlock < blockNumber) {\r\n                lower = center;\r\n            } else {\r\n                upper = center - 1;\r\n            }\r\n        }\r\n        return checkpoints[account][lower].votes;\r\n    }\r\n\r\n    /**\r\n     * @notice Mint new tokens\r\n     * @param dst The address of the destination account\r\n     * @param rawAmount The number of tokens to be minted\r\n     */\r\n    function _mint(address dst, uint rawAmount) internal {\r\n        require(dst != address(0), \"HAT::mint: cannot transfer to the zero address\");\r\n        require(SafeMath.add(totalSupply, rawAmount) <= CAP, \"ERC20Capped: CAP exceeded\");\r\n\r\n        // mint the amount\r\n        uint96 amount = safe96(rawAmount, \"HAT::mint: amount exceeds 96 bits\");\r\n        totalSupply = safe96(SafeMath.add(totalSupply, amount), \"HAT::mint: totalSupply exceeds 96 bits\");\r\n\r\n        // transfer the amount to the recipient\r\n        balances[dst] = add96(balances[dst], amount, \"HAT::mint: transfer amount overflows\");\r\n        emit Transfer(address(0), dst, amount);\r\n\r\n        // move delegates\r\n        _moveDelegates(address(0), delegates[dst], amount);\r\n    }\r\n\r\n    /**\r\n     * Burn tokens\r\n     * @param src The address of the source account\r\n     * @param rawAmount The number of tokens to be burned\r\n     */\r\n    function _burn(address src, uint rawAmount) internal {\r\n        require(src != address(0), \"HAT::burn: cannot burn to the zero address\");\r\n\r\n        // burn the amount\r\n        uint96 amount = safe96(rawAmount, \"HAT::burn: amount exceeds 96 bits\");\r\n        totalSupply = safe96(SafeMath.sub(totalSupply, amount), \"HAT::mint: totalSupply exceeds 96 bits\");\r\n\r\n        // reduce the amount from src address\r\n        balances[src] = sub96(balances[src], amount, \"HAT::burn: burn amount exceeds balance\");\r\n        emit Transfer(src, address(0), amount);\r\n\r\n        // move delegates\r\n        _moveDelegates(delegates[src], address(0), amount);\r\n    }\r\n\r\n    function _delegate(address delegator, address delegatee) internal {\r\n        address currentDelegate = delegates[delegator];\r\n        uint96 delegatorBalance = balances[delegator];\r\n        delegates[delegator] = delegatee;\r\n\r\n        emit DelegateChanged(delegator, currentDelegate, delegatee);\r\n\r\n        _moveDelegates(currentDelegate, delegatee, delegatorBalance);\r\n    }\r\n\r\n    function _transferTokens(address src, address dst, uint96 amount) internal {\r\n        require(src != address(0), \"HAT::_transferTokens: cannot transfer from the zero address\");\r\n        require(dst != address(0), \"HAT::_transferTokens: cannot transfer to the zero address\");\r\n\r\n        balances[src] = sub96(balances[src], amount, \"HAT::_transferTokens: transfer amount exceeds balance\");\r\n        balances[dst] = add96(balances[dst], amount, \"HAT::_transferTokens: transfer amount overflows\");\r\n        emit Transfer(src, dst, amount);\r\n\r\n        _moveDelegates(delegates[src], delegates[dst], amount);\r\n    }\r\n\r\n    function _moveDelegates(address srcRep, address dstRep, uint96 amount) internal {\r\n        if (srcRep != dstRep && amount > 0) {\r\n            if (srcRep != address(0)) {\r\n                uint32 srcRepNum = numCheckpoints[srcRep];\r\n                uint96 srcRepOld = srcRepNum > 0 ? checkpoints[srcRep][srcRepNum - 1].votes : 0;\r\n                uint96 srcRepNew = sub96(srcRepOld, amount, \"HAT::_moveVotes: vote amount underflows\");\r\n                _writeCheckpoint(srcRep, srcRepNum, srcRepOld, srcRepNew);\r\n            }\r\n\r\n            if (dstRep != address(0)) {\r\n                uint32 dstRepNum = numCheckpoints[dstRep];\r\n                uint96 dstRepOld = dstRepNum > 0 ? checkpoints[dstRep][dstRepNum - 1].votes : 0;\r\n                uint96 dstRepNew = add96(dstRepOld, amount, \"HAT::_moveVotes: vote amount overflows\");\r\n                _writeCheckpoint(dstRep, dstRepNum, dstRepOld, dstRepNew);\r\n            }\r\n        }\r\n    }\r\n\r\n    function _writeCheckpoint(address delegatee, uint32 nCheckpoints, uint96 oldVotes, uint96 newVotes) internal {\r\n        uint32 blockNumber = safe32(block.number, \"HAT::_writeCheckpoint: block number exceeds 32 bits\");\r\n\r\n        if (nCheckpoints > 0 && checkpoints[delegatee][nCheckpoints - 1].fromBlock == blockNumber) {\r\n            checkpoints[delegatee][nCheckpoints - 1].votes = newVotes;\r\n        } else {\r\n            checkpoints[delegatee][nCheckpoints] = Checkpoint(blockNumber, newVotes);\r\n            numCheckpoints[delegatee] = nCheckpoints + 1;\r\n        }\r\n\r\n        emit DelegateVotesChanged(delegatee, oldVotes, newVotes);\r\n    }\r\n\r\n    function safe32(uint n, string memory errorMessage) internal pure returns (uint32) {\r\n        require(n < 2**32, errorMessage);\r\n        return uint32(n);\r\n    }\r\n\r\n    function safe96(uint n, string memory errorMessage) internal pure returns (uint96) {\r\n        require(n < 2**96, errorMessage);\r\n        return uint96(n);\r\n    }\r\n\r\n    function add96(uint96 a, uint96 b, string memory errorMessage) internal pure returns (uint96) {\r\n        uint96 c = a + b;\r\n        require(c >= a, errorMessage);\r\n        return c;\r\n    }\r\n\r\n    function sub96(uint96 a, uint96 b, string memory errorMessage) internal pure returns (uint96) {\r\n        require(b <= a, errorMessage);\r\n        return a - b;\r\n    }\r\n\r\n    function getChainId() internal view returns (uint) {\r\n        uint256 chainId;\r\n        // solhint-disable-next-line no-inline-assembly\r\n        assembly { chainId := chainid() }\r\n        return chainId;\r\n    }\r\n}\r\n\r\n\r\n// File openzeppelin-solidity/contracts/security/ReentrancyGuard.sol@v4.1.0\r\n\r\n\r\n\r\npragma solidity ^0.8.0;\r\n\r\n/**\r\n * @dev Contract module that helps prevent reentrant calls to a function.\r\n *\r\n * Inheriting from `ReentrancyGuard` will make the {nonReentrant} modifier\r\n * available, which can be applied to functions to make sure there are no nested\r\n * (reentrant) calls to them.\r\n *\r\n * Note that because there is a single `nonReentrant` guard, functions marked as\r\n * `nonReentrant` may not call one another. This can be worked around by making\r\n * those functions `private`, and then adding `external` `nonReentrant` entry\r\n * points to them.\r\n *\r\n * TIP: If you would like to learn more about reentrancy and alternative ways\r\n * to protect against it, check out our blog post\r\n * https://blog.openzeppelin.com/reentrancy-after-istanbul/[Reentrancy After Istanbul].\r\n */\r\nabstract contract ReentrancyGuard {\r\n    // Booleans are more expensive than uint256 or any type that takes up a full\r\n    // word because each write operation emits an extra SLOAD to first read the\r\n    // slot's contents, replace the bits taken up by the boolean, and then write\r\n    // back. This is the compiler's defense against contract upgrades and\r\n    // pointer aliasing, and it cannot be disabled.\r\n\r\n    // The values being non-zero value makes deployment a bit more expensive,\r\n    // but in exchange the refund on every call to nonReentrant will be lower in\r\n    // amount. Since refunds are capped to a percentage of the total\r\n    // transaction's gas, it is best to keep them low in cases like this one, to\r\n    // increase the likelihood of the full refund coming into effect.\r\n    uint256 private constant _NOT_ENTERED = 1;\r\n    uint256 private constant _ENTERED = 2;\r\n\r\n    uint256 private _status;\r\n\r\n    constructor () {\r\n        _status = _NOT_ENTERED;\r\n    }\r\n\r\n    /**\r\n     * @dev Prevents a contract from calling itself, directly or indirectly.\r\n     * Calling a `nonReentrant` function from another `nonReentrant`\r\n     * function is not supported. It is possible to prevent this from happening\r\n     * by making the `nonReentrant` function external, and make it call a\r\n     * `private` function that does the actual work.\r\n     */\r\n    modifier nonReentrant() {\r\n        // On the first call to nonReentrant, _notEntered will be true\r\n        require(_status != _ENTERED, \"ReentrancyGuard: reentrant call\");\r\n\r\n        // Any calls to nonReentrant after this point will fail\r\n        _status = _ENTERED;\r\n\r\n        _;\r\n\r\n        // By storing the original value once again, a refund is triggered (see\r\n        // https://eips.ethereum.org/EIPS/eip-2200)\r\n        _status = _NOT_ENTERED;\r\n    }\r\n}\r\n\r\n\r\n// File contracts/HATMaster.sol\r\n\r\n\r\n// Disclaimer https://github.com/hats-finance/hats-contracts/blob/main/DISCLAIMER.md\r\n\r\npragma solidity 0.8.6;\r\n\r\n\r\n\r\n\r\n\r\ncontract HATMaster is ReentrancyGuard {\r\n    using SafeMath for uint256;\r\n    using SafeERC20 for IERC20;\r\n\r\n    struct UserInfo {\r\n        uint256 amount;     // The user share of the pool based on the amount of lpToken the user has provided.\r\n        uint256 rewardDebt; // Reward debt. See explanation below.\r\n      //\r\n      // We do some fancy math here. Basically, any point in time, the amount of HATs\r\n      // entitled to a user but is pending to be distributed is:\r\n      //\r\n      //   pending reward = (user.amount * pool.rewardPerShare) - user.rewardDebt\r\n      //\r\n      // Whenever a user deposits or withdraws LP tokens to a pool. Here's what happens:\r\n      //   1. The pool's `rewardPerShare` (and `lastRewardBlock`) gets updated.\r\n      //   2. User receives the pending reward sent to his/her address.\r\n      //   3. User's `amount` gets updated.\r\n      //   4. User's `rewardDebt` gets updated.\r\n    }\r\n\r\n    struct PoolUpdate {\r\n        uint256 blockNumber;// update blocknumber\r\n        uint256 totalAllocPoint; //totalAllocPoint\r\n    }\r\n\r\n    struct RewardsSplit {\r\n        //the percentage of the total reward to reward the hacker via vesting contract(claim reported)\r\n        uint256 hackerVestedReward;\r\n        //the percentage of the total reward to reward the hacker(claim reported)\r\n        uint256 hackerReward;\r\n        // the percentage of the total reward to be sent to the committee\r\n        uint256 committeeReward;\r\n        // the percentage of the total reward to be swap to HAT and to be burned\r\n        uint256 swapAndBurn;\r\n        // the percentage of the total reward to be swap to HAT and sent to governance\r\n        uint256 governanceHatReward;\r\n        // the percentage of the total reward to be swap to HAT and sent to the hacker\r\n        uint256 hackerHatReward;\r\n    }\r\n\r\n    // Info of each pool.\r\n    struct PoolInfo {\r\n        IERC20 lpToken;\r\n        uint256 allocPoint;\r\n        uint256 lastRewardBlock;\r\n        uint256 rewardPerShare;\r\n        uint256 totalUsersAmount;\r\n        uint256 lastProcessedTotalAllocPoint;\r\n        uint256 balance;\r\n    }\r\n\r\n    // Info of each pool.\r\n    struct PoolReward {\r\n        RewardsSplit rewardsSplit;\r\n        uint256[]  rewardsLevels;\r\n        bool committeeCheckIn;\r\n        uint256 vestingDuration;\r\n        uint256 vestingPeriods;\r\n    }\r\n\r\n    HATToken public immutable HAT;\r\n    uint256 public immutable REWARD_PER_BLOCK;\r\n    uint256 public immutable START_BLOCK;\r\n    uint256 public immutable MULTIPLIER_PERIOD;\r\n\r\n    // Info of each pool.\r\n    PoolInfo[] public poolInfo;\r\n    PoolUpdate[] public globalPoolUpdates;\r\n    mapping(address => uint256) public poolId1; // poolId1 count from 1, subtraction 1 before using with poolInfo\r\n    // Info of each user that stakes LP tokens. pid => user address => info\r\n    mapping (uint256 => mapping (address => UserInfo)) public userInfo;\r\n    //pid -> PoolReward\r\n    mapping (uint256=>PoolReward) internal poolsRewards;\r\n\r\n    event Deposit(address indexed user, uint256 indexed pid, uint256 amount);\r\n    event Withdraw(address indexed user, uint256 indexed pid, uint256 amount);\r\n    event EmergencyWithdraw(address indexed user, uint256 indexed pid, uint256 amount);\r\n    event SendReward(address indexed user, uint256 indexed pid, uint256 amount, uint256 requestedAmount);\r\n    event MassUpdatePools(uint256 _fromPid, uint256 _toPid);\r\n\r\n    constructor(\r\n        HATToken _hat,\r\n        uint256 _rewardPerBlock,\r\n        uint256 _startBlock,\r\n        uint256 _multiplierPeriod\r\n    // solhint-disable-next-line func-visibility\r\n    ) {\r\n        HAT = _hat;\r\n        REWARD_PER_BLOCK = _rewardPerBlock;\r\n        START_BLOCK = _startBlock;\r\n        MULTIPLIER_PERIOD = _multiplierPeriod;\r\n    }\r\n\r\n  /**\r\n   * @dev massUpdatePools - Update reward variables for all pools\r\n   * Be careful of gas spending!\r\n   * @param _fromPid update pools range from this pool id\r\n   * @param _toPid update pools range to this pool id\r\n   */\r\n    function massUpdatePools(uint256 _fromPid, uint256 _toPid) external {\r\n        require(_toPid <= poolInfo.length, \"pool range is too big\");\r\n        require(_fromPid <= _toPid, \"invalid pool range\");\r\n        for (uint256 pid = _fromPid; pid < _toPid; ++pid) {\r\n            updatePool(pid);\r\n        }\r\n        emit MassUpdatePools(_fromPid, _toPid);\r\n    }\r\n\r\n    function claimReward(uint256 _pid) external {\r\n        _deposit(_pid, 0);\r\n    }\r\n\r\n    function updatePool(uint256 _pid) public {\r\n        PoolInfo storage pool = poolInfo[_pid];\r\n        uint256 lastRewardBlock = pool.lastRewardBlock;\r\n        if (block.number <= lastRewardBlock) {\r\n            return;\r\n        }\r\n        uint256 totalUsersAmount = pool.totalUsersAmount;\r\n        uint256 lastPoolUpdate = globalPoolUpdates.length-1;\r\n        if (totalUsersAmount == 0) {\r\n            pool.lastRewardBlock = block.number;\r\n            pool.lastProcessedTotalAllocPoint = lastPoolUpdate;\r\n            return;\r\n        }\r\n        uint256 reward = calcPoolReward(_pid, lastRewardBlock, lastPoolUpdate);\r\n        uint256 amountCanMint = HAT.minters(address(this));\r\n        reward = amountCanMint < reward ? amountCanMint : reward;\r\n        if (reward > 0) {\r\n            HAT.mint(address(this), reward);\r\n        }\r\n        pool.rewardPerShare = pool.rewardPerShare.add(reward.mul(1e12).div(totalUsersAmount));\r\n        pool.lastRewardBlock = block.number;\r\n        pool.lastProcessedTotalAllocPoint = lastPoolUpdate;\r\n    }\r\n\r\n    /**\r\n     * @dev getMultiplier - multiply blocks with relevant multiplier for specific range\r\n     * @param _from range's from block\r\n     * @param _to range's to block\r\n     * will revert if from < START_BLOCK or _to < _from\r\n     */\r\n    function getMultiplier(uint256 _from, uint256 _to) public view returns (uint256 result) {\r\n        uint256[25] memory rewardMultipliers = [uint256(4413), 4413, 8825, 7788, 6873, 6065,\r\n                                            5353, 4724, 4169, 3679, 3247, 2865,\r\n                                            2528, 2231, 1969, 1738, 1534, 1353,\r\n                                            1194, 1054, 930, 821, 724, 639, 0];\r\n        uint256 max = rewardMultipliers.length;\r\n        uint256 i = (_from - START_BLOCK) / MULTIPLIER_PERIOD + 1;\r\n        for (; i < max; i++) {\r\n            uint256 endBlock = MULTIPLIER_PERIOD * i + START_BLOCK;\r\n            if (_to <= endBlock) {\r\n                break;\r\n            }\r\n            result += (endBlock - _from) * rewardMultipliers[i-1];\r\n            _from = endBlock;\r\n        }\r\n        result += (_to - _from) * rewardMultipliers[i > max ? (max-1) : (i-1)];\r\n    }\r\n\r\n    function getRewardForBlocksRange(uint256 _from, uint256 _to, uint256 _allocPoint, uint256 _totalAllocPoint)\r\n    public\r\n    view\r\n    returns (uint256 reward) {\r\n        if (_totalAllocPoint > 0) {\r\n            reward = getMultiplier(_from, _to).mul(REWARD_PER_BLOCK).mul(_allocPoint).div(_totalAllocPoint).div(100);\r\n        }\r\n    }\r\n\r\n    /**\r\n     * @dev calcPoolReward -\r\n     * calculate rewards for a pool by iterating over the history of totalAllocPoints updates.\r\n     * and sum up all rewards periods from pool.lastRewardBlock till current block number.\r\n     * @param _pid pool id\r\n     * @param _from block starting calculation\r\n     * @param _lastPoolUpdate lastPoolUpdate\r\n     * @return reward\r\n     */\r\n    function calcPoolReward(uint256 _pid, uint256 _from, uint256 _lastPoolUpdate) public view returns(uint256 reward) {\r\n        uint256 poolAllocPoint = poolInfo[_pid].allocPoint;\r\n        uint256 i = poolInfo[_pid].lastProcessedTotalAllocPoint;\r\n        for (; i < _lastPoolUpdate; i++) {\r\n            uint256 nextUpdateBlock = globalPoolUpdates[i+1].blockNumber;\r\n            reward =\r\n            reward.add(getRewardForBlocksRange(_from,\r\n                                            nextUpdateBlock,\r\n                                            poolAllocPoint,\r\n                                            globalPoolUpdates[i].totalAllocPoint));\r\n            _from = nextUpdateBlock;\r\n        }\r\n        return reward.add(getRewardForBlocksRange(_from,\r\n                                                block.number,\r\n                                                poolAllocPoint,\r\n                                                globalPoolUpdates[i].totalAllocPoint));\r\n    }\r\n\r\n    function _deposit(uint256 _pid, uint256 _amount) internal nonReentrant {\r\n        require(poolsRewards[_pid].committeeCheckIn, \"committee not checked in yet\");\r\n        PoolInfo storage pool = poolInfo[_pid];\r\n        UserInfo storage user = userInfo[_pid][msg.sender];\r\n        updatePool(_pid);\r\n        if (user.amount > 0) {\r\n            uint256 pending = user.amount.mul(pool.rewardPerShare).div(1e12).sub(user.rewardDebt);\r\n            if (pending > 0) {\r\n                safeTransferReward(msg.sender, pending, _pid);\r\n            }\r\n        }\r\n        if (_amount > 0) {\r\n            uint256 lpSupply = pool.balance;\r\n            pool.lpToken.safeTransferFrom(address(msg.sender), address(this), _amount);\r\n            pool.balance = pool.balance.add(_amount);\r\n            uint256 factoredAmount = _amount;\r\n            if (pool.totalUsersAmount > 0) {\r\n                factoredAmount = pool.totalUsersAmount.mul(_amount).div(lpSupply);\r\n            }\r\n            user.amount = user.amount.add(factoredAmount);\r\n            pool.totalUsersAmount = pool.totalUsersAmount.add(factoredAmount);\r\n        }\r\n        user.rewardDebt = user.amount.mul(pool.rewardPerShare).div(1e12);\r\n        emit Deposit(msg.sender, _pid, _amount);\r\n    }\r\n\r\n    function _withdraw(uint256 _pid, uint256 _amount) internal nonReentrant {\r\n        PoolInfo storage pool = poolInfo[_pid];\r\n        UserInfo storage user = userInfo[_pid][msg.sender];\r\n        require(user.amount >= _amount, \"withdraw: not enough user balance\");\r\n\r\n        updatePool(_pid);\r\n        uint256 pending = user.amount.mul(pool.rewardPerShare).div(1e12).sub(user.rewardDebt);\r\n        if (pending > 0) {\r\n            safeTransferReward(msg.sender, pending, _pid);\r\n        }\r\n        if (_amount > 0) {\r\n            user.amount = user.amount.sub(_amount);\r\n            uint256 amountToWithdraw = _amount.mul(pool.balance).div(pool.totalUsersAmount);\r\n            pool.balance = pool.balance.sub(amountToWithdraw);\r\n            pool.lpToken.safeTransfer(msg.sender, amountToWithdraw);\r\n            pool.totalUsersAmount = pool.totalUsersAmount.sub(_amount);\r\n        }\r\n        user.rewardDebt = user.amount.mul(pool.rewardPerShare).div(1e12);\r\n        emit Withdraw(msg.sender, _pid, _amount);\r\n    }\r\n\r\n    // Withdraw without caring about rewards. EMERGENCY ONLY.\r\n    function _emergencyWithdraw(uint256 _pid) internal {\r\n        PoolInfo storage pool = poolInfo[_pid];\r\n        UserInfo storage user = userInfo[_pid][msg.sender];\r\n        require(user.amount > 0, \"user.amount = 0\");\r\n        uint256 factoredBalance = user.amount.mul(pool.balance).div(pool.totalUsersAmount);\r\n        pool.totalUsersAmount = pool.totalUsersAmount.sub(user.amount);\r\n        user.amount = 0;\r\n        user.rewardDebt = 0;\r\n        pool.balance = pool.balance.sub(factoredBalance);\r\n        pool.lpToken.safeTransfer(msg.sender, factoredBalance);\r\n        emit EmergencyWithdraw(msg.sender, _pid, factoredBalance);\r\n    }\r\n\r\n    // -------- For manage pool ---------\r\n    function add(uint256 _allocPoint, IERC20 _lpToken) internal {\r\n        require(poolId1[address(_lpToken)] == 0, \"HATMaster::add: lpToken is already in pool\");\r\n        poolId1[address(_lpToken)] = poolInfo.length + 1;\r\n        uint256 lastRewardBlock = block.number > START_BLOCK ? block.number : START_BLOCK;\r\n        uint256 totalAllocPoint = (globalPoolUpdates.length == 0) ? _allocPoint :\r\n        globalPoolUpdates[globalPoolUpdates.length-1].totalAllocPoint.add(_allocPoint);\r\n\r\n        if (globalPoolUpdates.length > 0 &&\r\n            globalPoolUpdates[globalPoolUpdates.length-1].blockNumber == block.number) {\r\n           //already update in this block\r\n            globalPoolUpdates[globalPoolUpdates.length-1].totalAllocPoint = totalAllocPoint;\r\n        } else {\r\n            globalPoolUpdates.push(PoolUpdate({\r\n                blockNumber: block.number,\r\n                totalAllocPoint: totalAllocPoint\r\n            }));\r\n        }\r\n\r\n        poolInfo.push(PoolInfo({\r\n            lpToken: _lpToken,\r\n            allocPoint: _allocPoint,\r\n            lastRewardBlock: lastRewardBlock,\r\n            rewardPerShare: 0,\r\n            totalUsersAmount: 0,\r\n            lastProcessedTotalAllocPoint: globalPoolUpdates.length-1,\r\n            balance: 0\r\n        }));\r\n    }\r\n\r\n    function set(uint256 _pid, uint256 _allocPoint) internal {\r\n        updatePool(_pid);\r\n        uint256 totalAllocPoint =\r\n        globalPoolUpdates[globalPoolUpdates.length-1].totalAllocPoint\r\n        .sub(poolInfo[_pid].allocPoint).add(_allocPoint);\r\n\r\n        if (globalPoolUpdates[globalPoolUpdates.length-1].blockNumber == block.number) {\r\n           //already update in this block\r\n            globalPoolUpdates[globalPoolUpdates.length-1].totalAllocPoint = totalAllocPoint;\r\n        } else {\r\n            globalPoolUpdates.push(PoolUpdate({\r\n                blockNumber: block.number,\r\n                totalAllocPoint: totalAllocPoint\r\n            }));\r\n        }\r\n        poolInfo[_pid].allocPoint = _allocPoint;\r\n    }\r\n\r\n    // Safe HAT transfer function, just in case if rounding error causes pool to not have enough HATs.\r\n    function safeTransferReward(address _to, uint256 _amount, uint256 _pid) internal {\r\n        uint256 hatBalance = HAT.balanceOf(address(this));\r\n        if (_amount > hatBalance) {\r\n            HAT.transfer(_to, hatBalance);\r\n            emit SendReward(_to, _pid, hatBalance, _amount);\r\n        } else {\r\n            HAT.transfer(_to, _amount);\r\n            emit SendReward(_to, _pid, _amount, _amount);\r\n        }\r\n    }\r\n}\r\n\r\n\r\n// File contracts/tokenlock/ITokenLock.sol\r\n\r\n\r\n\r\npragma solidity 0.8.6;\r\npragma experimental ABIEncoderV2;\r\n\r\ninterface ITokenLock {\r\n    enum Revocability { NotSet, Enabled, Disabled }\r\n\r\n    // -- Balances --\r\n\r\n    function currentBalance() external view returns (uint256);\r\n\r\n    // -- Time & Periods --\r\n\r\n    function currentTime() external view returns (uint256);\r\n\r\n    function duration() external view returns (uint256);\r\n\r\n    function sinceStartTime() external view returns (uint256);\r\n\r\n    function amountPerPeriod() external view returns (uint256);\r\n\r\n    function periodDuration() external view returns (uint256);\r\n\r\n    function currentPeriod() external view returns (uint256);\r\n\r\n    function passedPeriods() external view returns (uint256);\r\n\r\n    // -- Locking & Release Schedule --\r\n\r\n    function availableAmount() external view returns (uint256);\r\n\r\n    function vestedAmount() external view returns (uint256);\r\n\r\n    function releasableAmount() external view returns (uint256);\r\n\r\n    function totalOutstandingAmount() external view returns (uint256);\r\n\r\n    function surplusAmount() external view returns (uint256);\r\n\r\n    // -- Value Transfer --\r\n\r\n    function release() external;\r\n\r\n    function withdrawSurplus(uint256 _amount) external;\r\n\r\n    function revoke() external;\r\n}\r\n\r\n\r\n// File contracts/tokenlock/ITokenLockFactory.sol\r\n\r\n\r\npragma solidity 0.8.6;\r\n\r\ninterface ITokenLockFactory {\r\n    // -- Factory --\r\n    function setMasterCopy(address _masterCopy) external;\r\n\r\n    function createTokenLock(\r\n        address _token,\r\n        address _owner,\r\n        address _beneficiary,\r\n        uint256 _managedAmount,\r\n        uint256 _startTime,\r\n        uint256 _endTime,\r\n        uint256 _periods,\r\n        uint256 _releaseStartTime,\r\n        uint256 _vestingCliffTime,\r\n        ITokenLock.Revocability _revocable,\r\n        bool _canDelegate\r\n    ) external returns(address contractAddress);\r\n}\r\n\r\n\r\n// File contracts/Governable.sol\r\n\r\n\r\n\r\npragma solidity 0.8.6;\r\n\r\n\r\n/**\r\n * @dev Contract module which provides a basic access control mechanism, where\r\n * there is an account (an governance) that can be granted exclusive access to\r\n * specific functions.\r\n *\r\n * The governance account will be passed on initialization of the contract. This\r\n * can later be changed with {setPendingGovernance and then transferGovernorship  after 2 days}.\r\n *\r\n * This module is used through inheritance. It will make available the modifier\r\n * `onlyGovernance`, which can be applied to your functions to restrict their use to\r\n * the governance.\r\n */\r\ncontract Governable {\r\n    address private _governance;\r\n    address public governancePending;\r\n    uint256 public setGovernancePendingAt;\r\n    uint256 public constant TIME_LOCK_DELAY = 2 days;\r\n\r\n\r\n    /// @notice An event thats emitted when a new governance address is set\r\n    event GovernorshipTransferred(address indexed _previousGovernance, address indexed _newGovernance);\r\n    /// @notice An event thats emitted when a new governance address is pending\r\n    event GovernancePending(address indexed _previousGovernance, address indexed _newGovernance, uint256 _at);\r\n\r\n    /**\r\n     * @dev Throws if called by any account other than the governance.\r\n     */\r\n    modifier onlyGovernance() {\r\n        require(msg.sender == _governance, \"only governance\");\r\n        _;\r\n    }\r\n\r\n    /**\r\n     * @dev setPendingGovernance set a pending governance address.\r\n     * NOTE: transferGovernorship can be called after a time delay of 2 days.\r\n     */\r\n    function setPendingGovernance(address _newGovernance) external  onlyGovernance {\r\n        require(_newGovernance != address(0), \"Governable:new governance is the zero address\");\r\n        governancePending = _newGovernance;\r\n        // solhint-disable-next-line not-rely-on-time\r\n        setGovernancePendingAt = block.timestamp;\r\n        emit GovernancePending(_governance, _newGovernance, setGovernancePendingAt);\r\n    }\r\n\r\n    /**\r\n     * @dev transferGovernorship transfer governorship to the pending governance address.\r\n     * NOTE: transferGovernorship can be called after a time delay of 2 days from the latest setPendingGovernance.\r\n     */\r\n    function transferGovernorship() external onlyGovernance {\r\n        require(setGovernancePendingAt > 0, \"Governable: no pending governance\");\r\n        // solhint-disable-next-line not-rely-on-time\r\n        require(block.timestamp - setGovernancePendingAt > TIME_LOCK_DELAY,\r\n        \"Governable: cannot confirm governance at this time\");\r\n        emit GovernorshipTransferred(_governance, governancePending);\r\n        _governance = governancePending;\r\n        setGovernancePendingAt = 0;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the address of the current governance.\r\n     */\r\n    function governance() public view returns (address) {\r\n        return _governance;\r\n    }\r\n\r\n    /**\r\n     * @dev Initializes the contract setting the initial governance.\r\n     */\r\n    function initialize(address _initialGovernance) internal {\r\n        _governance = _initialGovernance;\r\n        emit GovernorshipTransferred(address(0), _initialGovernance);\r\n    }\r\n}\r\n\r\n\r\n// File contracts/HATVaults.sol\r\n\r\n\r\n// Disclaimer https://github.com/hats-finance/hats-contracts/blob/main/DISCLAIMER.md\r\n\r\npragma solidity 0.8.6;\r\n\r\n\r\n\r\n\r\n\r\n\r\ncontract  HATVaults is Governable, HATMaster {\r\n    using SafeMath  for uint256;\r\n    using SafeERC20 for IERC20;\r\n\r\n    struct PendingApproval {\r\n        address beneficiary;\r\n        uint256 severity;\r\n        address approver;\r\n    }\r\n\r\n    struct ClaimReward {\r\n        uint256 hackerVestedReward;\r\n        uint256 hackerReward;\r\n        uint256 committeeReward;\r\n        uint256 swapAndBurn;\r\n        uint256 governanceHatReward;\r\n        uint256 hackerHatReward;\r\n    }\r\n\r\n    struct PendingRewardsLevels {\r\n        uint256 timestamp;\r\n        uint256[] rewardsLevels;\r\n    }\r\n\r\n    struct GeneralParameters {\r\n        uint256 hatVestingDuration;\r\n        uint256 hatVestingPeriods;\r\n        uint256 withdrawPeriod;\r\n        uint256 safetyPeriod; //withdraw disable period in seconds\r\n        uint256 setRewardsLevelsDelay;\r\n        uint256 withdrawRequestEnablePeriod;\r\n        uint256 withdrawRequestPendingPeriod;\r\n        uint256 claimFee;  //claim fee in ETH\r\n    }\r\n\r\n    //pid -> committee address\r\n    mapping(uint256=>address) public committees;\r\n    mapping(address => uint256) public swapAndBurns;\r\n    //hackerAddress ->(token->amount)\r\n    mapping(address => mapping(address => uint256)) public hackersHatRewards;\r\n    //token -> amount\r\n    mapping(address => uint256) public governanceHatRewards;\r\n    //pid -> PendingApproval\r\n    mapping(uint256 => PendingApproval) public pendingApprovals;\r\n    //poolId -> (address -> requestTime)\r\n    mapping(uint256 => mapping(address => uint256)) public withdrawRequests;\r\n    //poolId -> PendingRewardsLevels\r\n    mapping(uint256 => PendingRewardsLevels) public pendingRewardsLevels;\r\n\r\n    mapping(uint256 => bool) public poolDepositPause;\r\n\r\n    GeneralParameters public generalParameters;\r\n\r\n    uint256 internal constant REWARDS_LEVEL_DENOMINATOR = 10000;\r\n    ITokenLockFactory public immutable tokenLockFactory;\r\n    ISwapRouter public immutable uniSwapRouter;\r\n    uint256 public constant MINIMUM_DEPOSIT = 1e6;\r\n\r\n    modifier onlyCommittee(uint256 _pid) {\r\n        require(committees[_pid] == msg.sender, \"only committee\");\r\n        _;\r\n    }\r\n\r\n    modifier noPendingApproval(uint256 _pid) {\r\n        require(pendingApprovals[_pid].beneficiary == address(0), \"pending approval exist\");\r\n        _;\r\n    }\r\n\r\n    modifier noSafetyPeriod() {\r\n      //disable withdraw for safetyPeriod (e.g 1 hour) each withdrawPeriod(e.g 11 hours)\r\n      // solhint-disable-next-line not-rely-on-time\r\n        require(block.timestamp % (generalParameters.withdrawPeriod + generalParameters.safetyPeriod) <\r\n        generalParameters.withdrawPeriod,\r\n        \"safety period\");\r\n        _;\r\n    }\r\n\r\n    event SetCommittee(uint256 indexed _pid, address indexed _committee);\r\n\r\n    event AddPool(uint256 indexed _pid,\r\n                uint256 indexed _allocPoint,\r\n                address indexed _lpToken,\r\n                address _committee,\r\n                string _descriptionHash,\r\n                uint256[] _rewardsLevels,\r\n                RewardsSplit _rewardsSplit,\r\n                uint256 _rewardVestingDuration,\r\n                uint256 _rewardVestingPeriods);\r\n\r\n    event SetPool(uint256 indexed _pid, uint256 indexed _allocPoint, bool indexed _registered, string _descriptionHash);\r\n    event Claim(address indexed _claimer, string _descriptionHash);\r\n    event SetRewardsSplit(uint256 indexed _pid, RewardsSplit _rewardsSplit);\r\n    event SetRewardsLevels(uint256 indexed _pid, uint256[] _rewardsLevels);\r\n    event PendingRewardsLevelsLog(uint256 indexed _pid, uint256[] _rewardsLevels, uint256 _timeStamp);\r\n\r\n    event SwapAndSend(uint256 indexed _pid,\r\n                    address indexed _beneficiary,\r\n                    uint256 indexed _amountSwaped,\r\n                    uint256 _amountReceived,\r\n                    address _tokenLock);\r\n\r\n    event SwapAndBurn(uint256 indexed _pid, uint256 indexed _amountSwaped, uint256 indexed _amountBurned);\r\n    event SetVestingParams(uint256 indexed _pid, uint256 indexed _duration, uint256 indexed _periods);\r\n    event SetHatVestingParams(uint256 indexed _duration, uint256 indexed _periods);\r\n\r\n    event ClaimApprove(address indexed _approver,\r\n                    uint256 indexed _pid,\r\n                    address indexed _beneficiary,\r\n                    uint256 _severity,\r\n                    address _tokenLock,\r\n                    ClaimReward _claimReward);\r\n\r\n    event PendingApprovalLog(uint256 indexed _pid,\r\n                            address indexed _beneficiary,\r\n                            uint256 indexed _severity,\r\n                            address _approver);\r\n\r\n    event WithdrawRequest(uint256 indexed _pid,\r\n                        address indexed _beneficiary,\r\n                        uint256 indexed _withdrawEnableTime);\r\n\r\n    event SetWithdrawSafetyPeriod(uint256 indexed _withdrawPeriod, uint256 indexed _safetyPeriod);\r\n\r\n    event RewardDepositors(uint256 indexed _pid, uint256 indexed _amount);\r\n\r\n    /**\r\n   * @dev constructor -\r\n   * @param _rewardsToken the reward token address (HAT)\r\n   * @param _rewardPerBlock the reward amount per block the contract will reward pools\r\n   * @param _startBlock start block of of which the contract will start rewarding from.\r\n   * @param _multiplierPeriod a fix period value. each period will have its own multiplier value.\r\n   *        which set the reward for each period. e.g a value of 100000 means that each such period is 100000 blocks.\r\n   * @param _hatGovernance the governance address.\r\n   *        Some of the contracts functions are limited only to governance :\r\n   *         addPool,setPool,dismissPendingApprovalClaim,approveClaim,\r\n   *         setHatVestingParams,setVestingParams,setRewardsSplit\r\n   * @param _uniSwapRouter uni swap v3 router to be used to swap tokens for HAT token.\r\n   * @param _tokenLockFactory address of the token lock factory to be used\r\n   *        to create a vesting contract for the approved claim reporter.\r\n */\r\n    constructor(\r\n        address _rewardsToken,\r\n        uint256 _rewardPerBlock,\r\n        uint256 _startBlock,\r\n        uint256 _multiplierPeriod,\r\n        address _hatGovernance,\r\n        ISwapRouter _uniSwapRouter,\r\n        ITokenLockFactory _tokenLockFactory\r\n    // solhint-disable-next-line func-visibility\r\n    ) HATMaster(HATToken(_rewardsToken), _rewardPerBlock, _startBlock, _multiplierPeriod) {\r\n        Governable.initialize(_hatGovernance);\r\n        uniSwapRouter = _uniSwapRouter;\r\n        tokenLockFactory = _tokenLockFactory;\r\n        generalParameters = GeneralParameters({\r\n            hatVestingDuration: 90 days,\r\n            hatVestingPeriods:90,\r\n            withdrawPeriod: 11 hours,\r\n            safetyPeriod: 1 hours,\r\n            setRewardsLevelsDelay: 2 days,\r\n            withdrawRequestEnablePeriod: 7 days,\r\n            withdrawRequestPendingPeriod: 7 days,\r\n            claimFee: 0\r\n        });\r\n    }\r\n\r\n      /**\r\n     * @dev pendingApprovalClaim - called by a committee to set a pending approval claim.\r\n     * The pending approval need to be approved or dismissed  by the hats governance.\r\n     * This function should be called only on a safety period, where withdrawn is disable.\r\n     * Upon a call to this function by the committee the pool withdrawn will be disable\r\n     * till governance will approve or dismiss this pending approval.\r\n     * @param _pid pool id\r\n     * @param _beneficiary the approval claim beneficiary\r\n     * @param _severity approval claim severity\r\n   */\r\n    function pendingApprovalClaim(uint256 _pid, address _beneficiary, uint256 _severity)\r\n    external\r\n    onlyCommittee(_pid)\r\n    noPendingApproval(_pid) {\r\n        require(_beneficiary != address(0), \"beneficiary is zero\");\r\n        // solhint-disable-next-line not-rely-on-time\r\n        require(block.timestamp % (generalParameters.withdrawPeriod + generalParameters.safetyPeriod) >=\r\n        generalParameters.withdrawPeriod,\r\n        \"none safety period\");\r\n        require(_severity < poolsRewards[_pid].rewardsLevels.length, \"_severity is not in the range\");\r\n\r\n        pendingApprovals[_pid] = PendingApproval({\r\n            beneficiary: _beneficiary,\r\n            severity: _severity,\r\n            approver: msg.sender\r\n        });\r\n        emit PendingApprovalLog(_pid, _beneficiary, _severity, msg.sender);\r\n    }\r\n\r\n    /**\r\n     * @dev setWithdrawRequestParams - called by hats governance to set withdraw request params\r\n     * @param _withdrawRequestPendingPeriod - the time period where the withdraw request is pending.\r\n     * @param _withdrawRequestEnablePeriod - the time period where the withdraw is enable for a withdraw request.\r\n    */\r\n    function setWithdrawRequestParams(uint256 _withdrawRequestPendingPeriod, uint256  _withdrawRequestEnablePeriod)\r\n    external\r\n    onlyGovernance {\r\n        generalParameters.withdrawRequestPendingPeriod = _withdrawRequestPendingPeriod;\r\n        generalParameters.withdrawRequestEnablePeriod = _withdrawRequestEnablePeriod;\r\n    }\r\n\r\n  /**\r\n   * @dev dismissPendingApprovalClaim - called by hats governance to dismiss a pending approval claim.\r\n   * @param _pid pool id\r\n  */\r\n    function dismissPendingApprovalClaim(uint256 _pid) external onlyGovernance {\r\n        delete pendingApprovals[_pid];\r\n    }\r\n\r\n    /**\r\n   * @dev approveClaim - called by hats governance to approve a pending approval claim.\r\n   * @param _pid pool id\r\n */\r\n    function approveClaim(uint256 _pid) external onlyGovernance nonReentrant {\r\n        require(pendingApprovals[_pid].beneficiary != address(0), \"no pending approval\");\r\n        PoolReward storage poolReward = poolsRewards[_pid];\r\n        PendingApproval memory pendingApproval = pendingApprovals[_pid];\r\n        delete pendingApprovals[_pid];\r\n\r\n        IERC20 lpToken = poolInfo[_pid].lpToken;\r\n        ClaimReward memory claimRewards = calcClaimRewards(_pid, pendingApproval.severity);\r\n        poolInfo[_pid].balance = poolInfo[_pid].balance.sub(\r\n                            claimRewards.hackerReward\r\n                            .add(claimRewards.hackerVestedReward)\r\n                            .add(claimRewards.committeeReward)\r\n                            .add(claimRewards.swapAndBurn)\r\n                            .add(claimRewards.hackerHatReward)\r\n                            .add(claimRewards.governanceHatReward));\r\n        address tokenLock;\r\n        if (claimRewards.hackerVestedReward > 0) {\r\n        //hacker get its reward to a vesting contract\r\n            tokenLock = tokenLockFactory.createTokenLock(\r\n            address(lpToken),\r\n            0x000000000000000000000000000000000000dEaD, //this address as owner, so it can do nothing.\r\n            pendingApproval.beneficiary,\r\n            claimRewards.hackerVestedReward,\r\n            // solhint-disable-next-line not-rely-on-time\r\n            block.timestamp, //start\r\n            // solhint-disable-next-line not-rely-on-time\r\n            block.timestamp + poolReward.vestingDuration, //end\r\n            poolReward.vestingPeriods,\r\n            0, //no release start\r\n            0, //no cliff\r\n            ITokenLock.Revocability.Disabled,\r\n            false\r\n        );\r\n            lpToken.safeTransfer(tokenLock, claimRewards.hackerVestedReward);\r\n        }\r\n        lpToken.safeTransfer(pendingApproval.beneficiary, claimRewards.hackerReward);\r\n        lpToken.safeTransfer(pendingApproval.approver, claimRewards.committeeReward);\r\n        //storing the amount of token which can be swap and burned so it could be swapAndBurn in a seperate tx.\r\n        swapAndBurns[address(lpToken)] = swapAndBurns[address(lpToken)].add(claimRewards.swapAndBurn);\r\n        governanceHatRewards[address(lpToken)] =\r\n        governanceHatRewards[address(lpToken)].add(claimRewards.governanceHatReward);\r\n        hackersHatRewards[pendingApproval.beneficiary][address(lpToken)] =\r\n        hackersHatRewards[pendingApproval.beneficiary][address(lpToken)].add(claimRewards.hackerHatReward);\r\n\r\n        emit ClaimApprove(msg.sender,\r\n                        _pid,\r\n                        pendingApproval.beneficiary,\r\n                        pendingApproval.severity,\r\n                        tokenLock,\r\n                        claimRewards);\r\n        assert(poolInfo[_pid].balance > 0);\r\n    }\r\n\r\n    /**\r\n     * @dev rewardDepositors - add funds to pool to reward depositors.\r\n     * The funds will be given to depositors pro rata upon withdraw\r\n     * @param _pid pool id\r\n     * @param _amount amount to add\r\n    */\r\n    function rewardDepositors(uint256 _pid, uint256 _amount) external {\r\n        require(poolInfo[_pid].balance.add(_amount).div(MINIMUM_DEPOSIT) < poolInfo[_pid].totalUsersAmount,\r\n        \"amount to reward is too big\");\r\n        poolInfo[_pid].lpToken.safeTransferFrom(msg.sender, address(this), _amount);\r\n        poolInfo[_pid].balance = poolInfo[_pid].balance.add(_amount);\r\n        emit RewardDepositors(_pid, _amount);\r\n    }\r\n\r\n    /**\r\n     * @dev setClaimFee - called by hats governance to set claim fee\r\n     * @param _fee claim fee in ETH\r\n    */\r\n    function setClaimFee(uint256 _fee) external onlyGovernance {\r\n        generalParameters.claimFee = _fee;\r\n    }\r\n\r\n    /**\r\n     * @dev setWithdrawSafetyPeriod - called by hats governance to set Withdraw Period\r\n     * @param _withdrawPeriod withdraw enable period\r\n     * @param _safetyPeriod withdraw disable period\r\n    */\r\n    function setWithdrawSafetyPeriod(uint256 _withdrawPeriod, uint256 _safetyPeriod) external onlyGovernance {\r\n        generalParameters.withdrawPeriod = _withdrawPeriod;\r\n        generalParameters.safetyPeriod = _safetyPeriod;\r\n        emit SetWithdrawSafetyPeriod(generalParameters.withdrawPeriod, generalParameters.safetyPeriod);\r\n    }\r\n\r\n    //_descriptionHash - a hash of an ipfs encrypted file which describe the claim.\r\n    // this can be use later on by the claimer to prove her claim\r\n    function claim(string memory _descriptionHash) external payable {\r\n        if (generalParameters.claimFee > 0) {\r\n            require(msg.value >= generalParameters.claimFee, \"not enough fee payed\");\r\n            // solhint-disable-next-line indent\r\n            payable(governance()).transfer(msg.value);\r\n        }\r\n        emit Claim(msg.sender, _descriptionHash);\r\n    }\r\n\r\n    /**\r\n   * @dev setVestingParams - set pool vesting params for rewarding claim reporter with the pool token\r\n   * @param _pid pool id\r\n   * @param _duration duration of the vesting period\r\n   * @param _periods the vesting periods\r\n */\r\n    function setVestingParams(uint256 _pid, uint256 _duration, uint256 _periods) external onlyGovernance {\r\n        require(_duration < 120 days, \"vesting duration is too long\");\r\n        require(_periods > 0, \"vesting periods cannot be zero\");\r\n        require(_duration >= _periods, \"vesting duration smaller than periods\");\r\n        poolsRewards[_pid].vestingDuration = _duration;\r\n        poolsRewards[_pid].vestingPeriods = _periods;\r\n        emit SetVestingParams(_pid, _duration, _periods);\r\n    }\r\n\r\n    /**\r\n   * @dev setHatVestingParams - set HAT vesting params for rewarding claim reporter with HAT token\r\n   * the function can be called only by governance.\r\n   * @param _duration duration of the vesting period\r\n   * @param _periods the vesting periods\r\n */\r\n    function setHatVestingParams(uint256 _duration, uint256 _periods) external onlyGovernance {\r\n        require(_duration < 180 days, \"vesting duration is too long\");\r\n        require(_periods > 0, \"vesting periods cannot be zero\");\r\n        require(_duration >= _periods, \"vesting duration smaller than periods\");\r\n        generalParameters.hatVestingDuration = _duration;\r\n        generalParameters.hatVestingPeriods = _periods;\r\n        emit SetHatVestingParams(_duration, _periods);\r\n    }\r\n\r\n    /**\r\n   * @dev setRewardsSplit - set the pool token rewards split upon an approval\r\n   * the function can be called only by governance.\r\n   * the sum of the rewards split should be less than 10000 (less than 100%)\r\n   * @param _pid pool id\r\n   * @param _rewardsSplit split\r\n   * and sent to the hacker(claim reported)\r\n */\r\n    function setRewardsSplit(uint256 _pid, RewardsSplit memory _rewardsSplit)\r\n    external\r\n    onlyGovernance noPendingApproval(_pid) noSafetyPeriod {\r\n        validateSplit(_rewardsSplit);\r\n        poolsRewards[_pid].rewardsSplit = _rewardsSplit;\r\n        emit SetRewardsSplit(_pid, _rewardsSplit);\r\n    }\r\n\r\n    /**\r\n   * @dev setRewardsLevelsDelay - set the timelock delay for setting rewars level\r\n   * @param _delay time delay\r\n */\r\n    function setRewardsLevelsDelay(uint256 _delay)\r\n    external\r\n    onlyGovernance {\r\n        require(_delay >= 2 days, \"delay is too short\");\r\n        generalParameters.setRewardsLevelsDelay = _delay;\r\n    }\r\n\r\n    /**\r\n   * @dev setPendingRewardsLevels - set pending request to set pool token rewards level.\r\n   * the reward level represent the percentage of the pool's token which will be split as a reward.\r\n   * the function can be called only by the pool committee.\r\n   * cannot be called if there already pending approval.\r\n   * each level should be less than 10000\r\n   * @param _pid pool id\r\n   * @param _rewardsLevels the reward levels array\r\n */\r\n    function setPendingRewardsLevels(uint256 _pid, uint256[] memory _rewardsLevels)\r\n    external\r\n    onlyCommittee(_pid) noPendingApproval(_pid) {\r\n        pendingRewardsLevels[_pid].rewardsLevels = checkRewardsLevels(_rewardsLevels);\r\n        // solhint-disable-next-line not-rely-on-time\r\n        pendingRewardsLevels[_pid].timestamp = block.timestamp;\r\n        emit PendingRewardsLevelsLog(_pid, _rewardsLevels, pendingRewardsLevels[_pid].timestamp);\r\n    }\r\n\r\n  /**\r\n   * @dev setRewardsLevels - set the pool token rewards level of already pending set rewards level.\r\n   * see pendingRewardsLevels\r\n   * the reward level represent the percentage of the pool's token which will be split as a reward.\r\n   * the function can be called only by the pool committee.\r\n   * cannot be called if there already pending approval.\r\n   * each level should be less than 10000\r\n   * @param _pid pool id\r\n */\r\n    function setRewardsLevels(uint256 _pid)\r\n    external\r\n    onlyCommittee(_pid) noPendingApproval(_pid) {\r\n        require(pendingRewardsLevels[_pid].timestamp > 0, \"no pending set rewards levels\");\r\n        // solhint-disable-next-line not-rely-on-time\r\n        require(block.timestamp - pendingRewardsLevels[_pid].timestamp > generalParameters.setRewardsLevelsDelay,\r\n        \"cannot confirm setRewardsLevels at this time\");\r\n        poolsRewards[_pid].rewardsLevels = pendingRewardsLevels[_pid].rewardsLevels;\r\n        delete pendingRewardsLevels[_pid];\r\n        emit SetRewardsLevels(_pid, poolsRewards[_pid].rewardsLevels);\r\n    }\r\n\r\n    /**\r\n   * @dev committeeCheckIn - committee check in.\r\n   * deposit is enable only after committee check in\r\n   * @param _pid pool id\r\n */\r\n    function committeeCheckIn(uint256 _pid) external onlyCommittee(_pid) {\r\n        poolsRewards[_pid].committeeCheckIn = true;\r\n    }\r\n\r\n\r\n    /**\r\n   * @dev setCommittee - set new committee address.\r\n   * @param _pid pool id\r\n   * @param _committee new committee address\r\n */\r\n    function setCommittee(uint256 _pid, address _committee)\r\n    external {\r\n        require(_committee != address(0), \"committee is zero\");\r\n        //governance can update committee only if committee was not checked in yet.\r\n        if (msg.sender == governance() && committees[_pid] != msg.sender) {\r\n            require(!poolsRewards[_pid].committeeCheckIn, \"Committee already checked in\");\r\n        } else {\r\n            require(committees[_pid] == msg.sender, \"Only committee\");\r\n        }\r\n\r\n        committees[_pid] = _committee;\r\n\r\n        emit SetCommittee(_pid, _committee);\r\n    }\r\n\r\n    /**\r\n   * @dev addPool - only Governance\r\n   * @param _allocPoint the pool allocation point\r\n   * @param _lpToken pool token\r\n   * @param _committee pool committee address\r\n   * @param _rewardsLevels pool reward levels(sevirities)\r\n     each level is a number between 0 and 10000.\r\n   * @param _rewardsSplit pool reward split.\r\n     each entry is a number between 0 and 10000.\r\n     total splits should be equal to 10000\r\n   * @param _descriptionHash the hash of the pool description.\r\n   * @param _rewardVestingParams vesting params\r\n   *        _rewardVestingParams[0] - vesting duration\r\n   *        _rewardVestingParams[1] - vesting periods\r\n */\r\n    function addPool(uint256 _allocPoint,\r\n                    address _lpToken,\r\n                    address _committee,\r\n                    uint256[] memory _rewardsLevels,\r\n                    RewardsSplit memory _rewardsSplit,\r\n                    string memory _descriptionHash,\r\n                    uint256[2] memory _rewardVestingParams)\r\n    external\r\n    onlyGovernance {\r\n        require(_rewardVestingParams[0] < 120 days, \"vesting duration is too long\");\r\n        require(_rewardVestingParams[1] > 0, \"vesting periods cannot be zero\");\r\n        require(_rewardVestingParams[0] >= _rewardVestingParams[1], \"vesting duration smaller than periods\");\r\n        require(_committee != address(0), \"committee is zero\");\r\n        add(_allocPoint, IERC20(_lpToken));\r\n        uint256 poolId = poolInfo.length-1;\r\n        committees[poolId] = _committee;\r\n        uint256[] memory rewardsLevels = checkRewardsLevels(_rewardsLevels);\r\n\r\n        RewardsSplit memory rewardsSplit = (_rewardsSplit.hackerVestedReward == 0 && _rewardsSplit.hackerReward == 0) ?\r\n        getDefaultRewardsSplit() : _rewardsSplit;\r\n\r\n        validateSplit(rewardsSplit);\r\n        poolsRewards[poolId] = PoolReward({\r\n            rewardsLevels: rewardsLevels,\r\n            rewardsSplit: rewardsSplit,\r\n            committeeCheckIn: false,\r\n            vestingDuration: _rewardVestingParams[0],\r\n            vestingPeriods: _rewardVestingParams[1]\r\n        });\r\n\r\n        emit AddPool(poolId,\r\n                    _allocPoint,\r\n                    address(_lpToken),\r\n                    _committee,\r\n                    _descriptionHash,\r\n                    rewardsLevels,\r\n                    rewardsSplit,\r\n                    _rewardVestingParams[0],\r\n                    _rewardVestingParams[1]);\r\n    }\r\n\r\n    /**\r\n   * @dev setPool\r\n   * @param _pid the pool id\r\n   * @param _allocPoint the pool allocation point\r\n   * @param _registered does this pool is registered (default true).\r\n   * @param _depositPause pause pool deposit (default false).\r\n   * This parameter can be used by the UI to include or exclude the pool\r\n   * @param _descriptionHash the hash of the pool description.\r\n */\r\n    function setPool(uint256 _pid,\r\n                    uint256 _allocPoint,\r\n                    bool _registered,\r\n                    bool _depositPause,\r\n                    string memory _descriptionHash)\r\n    external onlyGovernance {\r\n        require(poolInfo[_pid].lpToken != IERC20(address(0)), \"pool does not exist\");\r\n        set(_pid, _allocPoint);\r\n        poolDepositPause[_pid] = _depositPause;\r\n        emit SetPool(_pid, _allocPoint, _registered, _descriptionHash);\r\n    }\r\n\r\n    /**\r\n    * @dev swapBurnSend swap lptoken to HAT.\r\n    * send to beneficiary and governance its hats rewards .\r\n    * burn the rest of HAT.\r\n    * only governance are authorized to call this function.\r\n    * @param _pid the pool id\r\n    * @param _beneficiary beneficiary\r\n    * @param _amountOutMinimum minimum output of HATs at swap\r\n    * @param _fees the fees for the multi path swap\r\n    **/\r\n    function swapBurnSend(uint256 _pid,\r\n                        address _beneficiary,\r\n                        uint256 _amountOutMinimum,\r\n                        uint24[2] memory _fees)\r\n    external\r\n    onlyGovernance {\r\n        IERC20 token = poolInfo[_pid].lpToken;\r\n        uint256 amountToSwapAndBurn = swapAndBurns[address(token)];\r\n        uint256 amountForHackersHatRewards = hackersHatRewards[_beneficiary][address(token)];\r\n        uint256 amount = amountToSwapAndBurn.add(amountForHackersHatRewards).add(governanceHatRewards[address(token)]);\r\n        require(amount > 0, \"amount is zero\");\r\n        swapAndBurns[address(token)] = 0;\r\n        governanceHatRewards[address(token)] = 0;\r\n        hackersHatRewards[_beneficiary][address(token)] = 0;\r\n        uint256 hatsReceived = swapTokenForHAT(amount, token, _fees, _amountOutMinimum);\r\n        uint256 burntHats = hatsReceived.mul(amountToSwapAndBurn).div(amount);\r\n        if (burntHats > 0) {\r\n            HAT.burn(burntHats);\r\n        }\r\n        emit SwapAndBurn(_pid, amount, burntHats);\r\n        address tokenLock;\r\n        uint256 hackerReward = hatsReceived.mul(amountForHackersHatRewards).div(amount);\r\n        if (hackerReward > 0) {\r\n           //hacker get its reward via vesting contract\r\n            tokenLock = tokenLockFactory.createTokenLock(\r\n                address(HAT),\r\n                0x000000000000000000000000000000000000dEaD, //this address as owner, so it can do nothing.\r\n                _beneficiary,\r\n                hackerReward,\r\n                // solhint-disable-next-line not-rely-on-time\r\n                block.timestamp, //start\r\n                // solhint-disable-next-line not-rely-on-time\r\n                block.timestamp + generalParameters.hatVestingDuration, //end\r\n                generalParameters.hatVestingPeriods,\r\n                0, //no release start\r\n                0, //no cliff\r\n                ITokenLock.Revocability.Disabled,\r\n                true\r\n            );\r\n            HAT.transfer(tokenLock, hackerReward);\r\n        }\r\n        emit SwapAndSend(_pid, _beneficiary, amount, hackerReward, tokenLock);\r\n        HAT.transfer(governance(), hatsReceived.sub(hackerReward).sub(burntHats));\r\n    }\r\n\r\n    /**\r\n    * @dev withdrawRequest submit a withdraw request\r\n    * @param _pid the pool id\r\n    **/\r\n    function withdrawRequest(uint256 _pid) external {\r\n      // solhint-disable-next-line not-rely-on-time\r\n        require(block.timestamp > withdrawRequests[_pid][msg.sender] + generalParameters.withdrawRequestEnablePeriod,\r\n        \"pending withdraw request exist\");\r\n        // solhint-disable-next-line not-rely-on-time\r\n        withdrawRequests[_pid][msg.sender] = block.timestamp + generalParameters.withdrawRequestPendingPeriod;\r\n        emit WithdrawRequest(_pid, msg.sender, withdrawRequests[_pid][msg.sender]);\r\n    }\r\n\r\n    /**\r\n    * @dev deposit deposit to pool\r\n    * @param _pid the pool id\r\n    * @param _amount amount of pool's token to deposit\r\n    **/\r\n    function deposit(uint256 _pid, uint256 _amount) external {\r\n        require(!poolDepositPause[_pid], \"deposit paused\");\r\n        require(_amount >= MINIMUM_DEPOSIT, \"amount less than 1e6\");\r\n        //clear withdraw request\r\n        withdrawRequests[_pid][msg.sender] = 0;\r\n        _deposit(_pid, _amount);\r\n    }\r\n\r\n    /**\r\n    * @dev withdraw  - withdraw user's pool share.\r\n    * user need first to submit a withdraw request.\r\n    * @param _pid the pool id\r\n    * @param _shares amount of shares user wants to withdraw\r\n    **/\r\n    function withdraw(uint256 _pid, uint256 _shares) external {\r\n        checkWithdrawRequest(_pid);\r\n        _withdraw(_pid, _shares);\r\n    }\r\n\r\n    /**\r\n    * @dev emergencyWithdraw withdraw all user's pool share without claim for reward.\r\n    * user need first to submit a withdraw request.\r\n    * @param _pid the pool id\r\n    **/\r\n    function emergencyWithdraw(uint256 _pid) external {\r\n        checkWithdrawRequest(_pid);\r\n        _emergencyWithdraw(_pid);\r\n    }\r\n\r\n    function getPoolRewardsLevels(uint256 _pid) external view returns(uint256[] memory) {\r\n        return poolsRewards[_pid].rewardsLevels;\r\n    }\r\n\r\n    function getPoolRewards(uint256 _pid) external view returns(PoolReward memory) {\r\n        return poolsRewards[_pid];\r\n    }\r\n\r\n    // GET INFO for UI\r\n    /**\r\n    * @dev getRewardPerBlock return the current pool reward per block\r\n    * @param _pid1 the pool id.\r\n    *        if _pid1 = 0 , it return the current block reward for whole pools.\r\n    *        otherwise it return the current block reward for _pid1-1.\r\n    * @return rewardPerBlock\r\n    **/\r\n    function getRewardPerBlock(uint256 _pid1) external view returns (uint256) {\r\n        if (_pid1 == 0) {\r\n            return getRewardForBlocksRange(block.number-1, block.number, 1, 1);\r\n        } else {\r\n            return getRewardForBlocksRange(block.number-1,\r\n                                        block.number,\r\n                                        poolInfo[_pid1 - 1].allocPoint,\r\n                                        globalPoolUpdates[globalPoolUpdates.length-1].totalAllocPoint);\r\n        }\r\n    }\r\n\r\n    function pendingReward(uint256 _pid, address _user) external view returns (uint256) {\r\n        PoolInfo storage pool = poolInfo[_pid];\r\n        UserInfo storage user = userInfo[_pid][_user];\r\n        uint256 rewardPerShare = pool.rewardPerShare;\r\n\r\n        if (block.number > pool.lastRewardBlock && pool.totalUsersAmount > 0) {\r\n            uint256 reward = calcPoolReward(_pid, pool.lastRewardBlock, globalPoolUpdates.length-1);\r\n            rewardPerShare = rewardPerShare.add(reward.mul(1e12).div(pool.totalUsersAmount));\r\n        }\r\n        return user.amount.mul(rewardPerShare).div(1e12).sub(user.rewardDebt);\r\n    }\r\n\r\n    function getGlobalPoolUpdatesLength() external view returns (uint256) {\r\n        return globalPoolUpdates.length;\r\n    }\r\n\r\n    function getStakedAmount(uint _pid, address _user) external view returns (uint256) {\r\n        UserInfo storage user = userInfo[_pid][_user];\r\n        return  user.amount;\r\n    }\r\n\r\n    function poolLength() external view returns (uint256) {\r\n        return poolInfo.length;\r\n    }\r\n\r\n    function calcClaimRewards(uint256 _pid, uint256 _severity)\r\n    public\r\n    view\r\n    returns(ClaimReward memory claimRewards) {\r\n        uint256 totalSupply = poolInfo[_pid].balance;\r\n        require(totalSupply > 0, \"totalSupply is zero\");\r\n        require(_severity < poolsRewards[_pid].rewardsLevels.length, \"_severity is not in the range\");\r\n        //hackingRewardAmount\r\n        uint256 claimRewardAmount =\r\n        totalSupply.mul(poolsRewards[_pid].rewardsLevels[_severity]);\r\n        claimRewards.hackerVestedReward =\r\n        claimRewardAmount.mul(poolsRewards[_pid].rewardsSplit.hackerVestedReward)\r\n        .div(REWARDS_LEVEL_DENOMINATOR*REWARDS_LEVEL_DENOMINATOR);\r\n        claimRewards.hackerReward =\r\n        claimRewardAmount.mul(poolsRewards[_pid].rewardsSplit.hackerReward)\r\n        .div(REWARDS_LEVEL_DENOMINATOR*REWARDS_LEVEL_DENOMINATOR);\r\n        claimRewards.committeeReward =\r\n        claimRewardAmount.mul(poolsRewards[_pid].rewardsSplit.committeeReward)\r\n        .div(REWARDS_LEVEL_DENOMINATOR*REWARDS_LEVEL_DENOMINATOR);\r\n        claimRewards.swapAndBurn =\r\n        claimRewardAmount.mul(poolsRewards[_pid].rewardsSplit.swapAndBurn)\r\n        .div(REWARDS_LEVEL_DENOMINATOR*REWARDS_LEVEL_DENOMINATOR);\r\n        claimRewards.governanceHatReward =\r\n        claimRewardAmount.mul(poolsRewards[_pid].rewardsSplit.governanceHatReward)\r\n        .div(REWARDS_LEVEL_DENOMINATOR*REWARDS_LEVEL_DENOMINATOR);\r\n        claimRewards.hackerHatReward =\r\n        claimRewardAmount.mul(poolsRewards[_pid].rewardsSplit.hackerHatReward)\r\n        .div(REWARDS_LEVEL_DENOMINATOR*REWARDS_LEVEL_DENOMINATOR);\r\n    }\r\n\r\n    function getDefaultRewardsSplit() public pure returns (RewardsSplit memory) {\r\n        return RewardsSplit({\r\n            hackerVestedReward: 6000,\r\n            hackerReward: 2000,\r\n            committeeReward: 500,\r\n            swapAndBurn: 0,\r\n            governanceHatReward: 1000,\r\n            hackerHatReward: 500\r\n        });\r\n    }\r\n\r\n    function validateSplit(RewardsSplit memory _rewardsSplit) internal pure {\r\n        require(_rewardsSplit.hackerVestedReward\r\n            .add(_rewardsSplit.hackerReward)\r\n            .add(_rewardsSplit.committeeReward)\r\n            .add(_rewardsSplit.swapAndBurn)\r\n            .add(_rewardsSplit.governanceHatReward)\r\n            .add(_rewardsSplit.hackerHatReward) == REWARDS_LEVEL_DENOMINATOR,\r\n        \"total split % should be 10000\");\r\n    }\r\n\r\n    function checkWithdrawRequest(uint256 _pid) internal noPendingApproval(_pid) noSafetyPeriod {\r\n      // solhint-disable-next-line not-rely-on-time\r\n        require(block.timestamp > withdrawRequests[_pid][msg.sender] &&\r\n      // solhint-disable-next-line not-rely-on-time\r\n                block.timestamp < withdrawRequests[_pid][msg.sender] + generalParameters.withdrawRequestEnablePeriod,\r\n                \"withdraw request not valid\");\r\n        withdrawRequests[_pid][msg.sender] = 0;\r\n    }\r\n\r\n    function swapTokenForHAT(uint256 _amount,\r\n                            IERC20 _token,\r\n                            uint24[2] memory _fees,\r\n                            uint256 _amountOutMinimum)\r\n    internal\r\n    returns (uint256 hatsReceived)\r\n    {\r\n        if (address(_token) == address(HAT)) {\r\n            return _amount;\r\n        }\r\n        require(_token.approve(address(uniSwapRouter), _amount), \"token approve failed\");\r\n        uint256 hatBalanceBefore = HAT.balanceOf(address(this));\r\n        address weth = uniSwapRouter.WETH9();\r\n        bytes memory path;\r\n        if (address(_token) == weth) {\r\n            path = abi.encodePacked(address(_token), _fees[0], address(HAT));\r\n        } else {\r\n            path = abi.encodePacked(address(_token), _fees[0], weth, _fees[1], address(HAT));\r\n        }\r\n        hatsReceived = uniSwapRouter.exactInput(ISwapRouter.ExactInputParams({\r\n            path: path,\r\n            recipient: address(this),\r\n            // solhint-disable-next-line not-rely-on-time\r\n            deadline: block.timestamp,\r\n            amountIn: _amount,\r\n            amountOutMinimum: _amountOutMinimum\r\n        }));\r\n        require(HAT.balanceOf(address(this)) - hatBalanceBefore >= _amountOutMinimum, \"wrong amount received\");\r\n    }\r\n\r\n    /**\r\n   * @dev checkRewardsLevels - check rewards levels.\r\n   * each level should be less than 10000\r\n   * if _rewardsLevels length is 0 a default reward levels will be return\r\n   * default reward levels = [2000, 4000, 6000, 8000]\r\n   * @param _rewardsLevels the reward levels array\r\n   * @return rewardsLevels\r\n */\r\n    function checkRewardsLevels(uint256[] memory _rewardsLevels)\r\n    private\r\n    pure\r\n    returns (uint256[] memory rewardsLevels) {\r\n\r\n        uint256 i;\r\n        if (_rewardsLevels.length == 0) {\r\n            rewardsLevels = new uint256[](4);\r\n            for (i; i < 4; i++) {\r\n              //defaultRewardLevels = [2000, 4000, 6000, 8000];\r\n                rewardsLevels[i] = 2000*(i+1);\r\n            }\r\n        } else {\r\n            for (i; i < _rewardsLevels.length; i++) {\r\n                require(_rewardsLevels[i] < REWARDS_LEVEL_DENOMINATOR, \"reward level can not be more than 10000\");\r\n            }\r\n            rewardsLevels = _rewardsLevels;\r\n        }\r\n    }\r\n}\r\n\r\n\r\n// File contracts/HATTimelockController.sol\r\n\r\n\r\n// Disclaimer https://github.com/hats-finance/hats-contracts/blob/main/DISCLAIMER.md\r\n\r\npragma solidity 0.8.6;\r\n\r\n\r\ncontract HATTimelockController is TimelockController {\r\n    HATVaults public hatVaults;\r\n\r\n    constructor(\r\n        HATVaults _hatVaults,\r\n        uint256 _minDelay,\r\n        address[] memory _proposers,\r\n        address[] memory _executors\r\n    // solhint-disable-next-line func-visibility\r\n    ) TimelockController(_minDelay, _proposers, _executors) {\r\n        require(address(_hatVaults) != address(0), \"HATTimelockController: HATVaults address must not be 0\");\r\n        hatVaults = _hatVaults;\r\n\r\n    }\r\n    \r\n    // Whitelisted functions\r\n\r\n    function approveClaim(uint256 _pid) external onlyRole(PROPOSER_ROLE) {\r\n        hatVaults.approveClaim(_pid);\r\n    }\r\n\r\n    function addPool(uint256 _allocPoint,\r\n                    address _lpToken,\r\n                    address _committee,\r\n                    uint256[] memory _rewardsLevels,\r\n                    HATVaults.RewardsSplit memory _rewardsSplit,\r\n                    string memory _descriptionHash,\r\n                    uint256[2] memory _rewardVestingParams)\r\n    external\r\n    onlyRole(PROPOSER_ROLE) {\r\n        hatVaults.addPool(\r\n            _allocPoint,\r\n            _lpToken,\r\n            _committee,\r\n            _rewardsLevels,\r\n            _rewardsSplit,\r\n            _descriptionHash,\r\n            _rewardVestingParams\r\n        );\r\n    }\r\n\r\n    function setPool(uint256 _pid,\r\n                    uint256 _allocPoint,\r\n                    bool _registered,\r\n                    bool _depositPause,\r\n                    string memory _descriptionHash)\r\n    external onlyRole(PROPOSER_ROLE) {\r\n        hatVaults.setPool(\r\n            _pid,\r\n            _allocPoint,\r\n            _registered,\r\n            _depositPause,\r\n            _descriptionHash\r\n        );\r\n    }\r\n\r\n    function swapBurnSend(uint256 _pid,\r\n                        address _beneficiary,\r\n                        uint256 _amountOutMinimum,\r\n                        uint24[2] memory _fees)\r\n    external\r\n    onlyRole(PROPOSER_ROLE) {\r\n        hatVaults.swapBurnSend(\r\n            _pid,\r\n            _beneficiary,\r\n            _amountOutMinimum,\r\n            _fees\r\n        );\r\n    }\r\n}","ABI":"[{\"inputs\":[{\"internalType\":\"contract HATVaults\",\"name\":\"_hatVaults\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_minDelay\",\"type\":\"uint256\"},{\"internalType\":\"address[]\",\"name\":\"_proposers\",\"type\":\"address[]\"},{\"internalType\":\"address[]\",\"name\":\"_executors\",\"type\":\"address[]\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"id\",\"type\":\"bytes32\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"index\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"target\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"bytes\",\"name\":\"data\",\"type\":\"bytes\"}],\"name\":\"CallExecuted\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"id\",\"type\":\"bytes32\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"index\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"target\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"bytes\",\"name\":\"data\",\"type\":\"bytes\"},{\"indexed\":false,\"internalType\":\"bytes32\",\"name\":\"predecessor\",\"type\":\"bytes32\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"delay\",\"type\":\"uint256\"}],\"name\":\"CallScheduled\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"id\",\"type\":\"bytes32\"}],\"name\":\"Cancelled\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"oldDuration\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"newDuration\",\"type\":\"uint256\"}],\"name\":\"MinDelayChange\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"previousAdminRole\",\"type\":\"bytes32\"},{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"newAdminRole\",\"type\":\"bytes32\"}],\"name\":\"RoleAdminChanged\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"}],\"name\":\"RoleGranted\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"}],\"name\":\"RoleRevoked\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"DEFAULT_ADMIN_ROLE\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"EXECUTOR_ROLE\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"PROPOSER_ROLE\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"TIMELOCK_ADMIN_ROLE\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_allocPoint\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"_lpToken\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_committee\",\"type\":\"address\"},{\"internalType\":\"uint256[]\",\"name\":\"_rewardsLevels\",\"type\":\"uint256[]\"},{\"components\":[{\"internalType\":\"uint256\",\"name\":\"hackerVestedReward\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"hackerReward\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"committeeReward\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"swapAndBurn\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"governanceHatReward\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"hackerHatReward\",\"type\":\"uint256\"}],\"internalType\":\"struct HATMaster.RewardsSplit\",\"name\":\"_rewardsSplit\",\"type\":\"tuple\"},{\"internalType\":\"string\",\"name\":\"_descriptionHash\",\"type\":\"string\"},{\"internalType\":\"uint256[2]\",\"name\":\"_rewardVestingParams\",\"type\":\"uint256[2]\"}],\"name\":\"addPool\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_pid\",\"type\":\"uint256\"}],\"name\":\"approveClaim\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"id\",\"type\":\"bytes32\"}],\"name\":\"cancel\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"target\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"},{\"internalType\":\"bytes\",\"name\":\"data\",\"type\":\"bytes\"},{\"internalType\":\"bytes32\",\"name\":\"predecessor\",\"type\":\"bytes32\"},{\"internalType\":\"bytes32\",\"name\":\"salt\",\"type\":\"bytes32\"}],\"name\":\"execute\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address[]\",\"name\":\"targets\",\"type\":\"address[]\"},{\"internalType\":\"uint256[]\",\"name\":\"values\",\"type\":\"uint256[]\"},{\"internalType\":\"bytes[]\",\"name\":\"datas\",\"type\":\"bytes[]\"},{\"internalType\":\"bytes32\",\"name\":\"predecessor\",\"type\":\"bytes32\"},{\"internalType\":\"bytes32\",\"name\":\"salt\",\"type\":\"bytes32\"}],\"name\":\"executeBatch\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getMinDelay\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"duration\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"}],\"name\":\"getRoleAdmin\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"id\",\"type\":\"bytes32\"}],\"name\":\"getTimestamp\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"timestamp\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"grantRole\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"hasRole\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"target\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"},{\"internalType\":\"bytes\",\"name\":\"data\",\"type\":\"bytes\"},{\"internalType\":\"bytes32\",\"name\":\"predecessor\",\"type\":\"bytes32\"},{\"internalType\":\"bytes32\",\"name\":\"salt\",\"type\":\"bytes32\"}],\"name\":\"hashOperation\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"hash\",\"type\":\"bytes32\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address[]\",\"name\":\"targets\",\"type\":\"address[]\"},{\"internalType\":\"uint256[]\",\"name\":\"values\",\"type\":\"uint256[]\"},{\"internalType\":\"bytes[]\",\"name\":\"datas\",\"type\":\"bytes[]\"},{\"internalType\":\"bytes32\",\"name\":\"predecessor\",\"type\":\"bytes32\"},{\"internalType\":\"bytes32\",\"name\":\"salt\",\"type\":\"bytes32\"}],\"name\":\"hashOperationBatch\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"hash\",\"type\":\"bytes32\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"hatVaults\",\"outputs\":[{\"internalType\":\"contract HATVaults\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"id\",\"type\":\"bytes32\"}],\"name\":\"isOperation\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"pending\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"id\",\"type\":\"bytes32\"}],\"name\":\"isOperationDone\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"done\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"id\",\"type\":\"bytes32\"}],\"name\":\"isOperationPending\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"pending\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"id\",\"type\":\"bytes32\"}],\"name\":\"isOperationReady\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"ready\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"renounceRole\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"revokeRole\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"target\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"},{\"internalType\":\"bytes\",\"name\":\"data\",\"type\":\"bytes\"},{\"internalType\":\"bytes32\",\"name\":\"predecessor\",\"type\":\"bytes32\"},{\"internalType\":\"bytes32\",\"name\":\"salt\",\"type\":\"bytes32\"},{\"internalType\":\"uint256\",\"name\":\"delay\",\"type\":\"uint256\"}],\"name\":\"schedule\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address[]\",\"name\":\"targets\",\"type\":\"address[]\"},{\"internalType\":\"uint256[]\",\"name\":\"values\",\"type\":\"uint256[]\"},{\"internalType\":\"bytes[]\",\"name\":\"datas\",\"type\":\"bytes[]\"},{\"internalType\":\"bytes32\",\"name\":\"predecessor\",\"type\":\"bytes32\"},{\"internalType\":\"bytes32\",\"name\":\"salt\",\"type\":\"bytes32\"},{\"internalType\":\"uint256\",\"name\":\"delay\",\"type\":\"uint256\"}],\"name\":\"scheduleBatch\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_pid\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_allocPoint\",\"type\":\"uint256\"},{\"internalType\":\"bool\",\"name\":\"_registered\",\"type\":\"bool\"},{\"internalType\":\"bool\",\"name\":\"_depositPause\",\"type\":\"bool\"},{\"internalType\":\"string\",\"name\":\"_descriptionHash\",\"type\":\"string\"}],\"name\":\"setPool\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes4\",\"name\":\"interfaceId\",\"type\":\"bytes4\"}],\"name\":\"supportsInterface\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_pid\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"_beneficiary\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_amountOutMinimum\",\"type\":\"uint256\"},{\"internalType\":\"uint24[2]\",\"name\":\"_fees\",\"type\":\"uint24[2]\"}],\"name\":\"swapBurnSend\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"newDelay\",\"type\":\"uint256\"}],\"name\":\"updateDelay\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"stateMutability\":\"payable\",\"type\":\"receive\"}]","ContractName":"HATTimelockController","CompilerVersion":"v0.8.6+commit.11564f7e","OptimizationUsed":"1","Runs":"200","ConstructorArguments":"000000000000000000000000571f39d351513146248acafa9d0509319a327c4d0000000000000000000000000000000000000000000000000000000000093a80000000000000000000000000000000000000000000000000000000000000008000000000000000000000000000000000000000000000000000000000000000c00000000000000000000000000000000000000000000000000000000000000001000000000000000000000000ba5ddb6af728f01e91d77d12073548d823f6d1ef00000000000000000000000000000000000000000000000000000000000000050000000000000000000000002b6656e212f315d3c2dd477fe7ebfb3a86bb1c940000000000000000000000009fb3d86157a9e2dc2a771c297f88fa9784fa4e31000000000000000000000000f6aef099e4473e08bed75e0bb1252c4cdad96416000000000000000000000000b3e7828ec7ce2b270e3008b6400597c3a203809e000000000000000000000000d714dd60e22bbb1cbafd0e40de5cfa7bbdd3f3c8","EVMVersion":"Default","Library":"","LicenseType":"MIT","Proxy":"0","Implementation":"","SwarmSource":"ipfs://aa139c6876984343d83fb6ce6f6a0c9b0698ebb4eb2a6247ddfe3ceed9210e5f"}]}