{"status":"1","message":"OK","result":[{"SourceCode":"// File: contracts\\interfaces\\ILockedCvx.sol\r\n\r\n// SPDX-License-Identifier: MIT\r\npragma solidity 0.6.12;\r\n\r\ninterface ILockedCvx{\r\n    function lock(address _account, uint256 _amount, uint256 _spendRatio) external;\r\n    function processExpiredLocks(bool _relock, uint256 _spendRatio, address _withdrawTo) external;\r\n    function getReward(address _account, bool _stake) external;\r\n    function balanceAtEpochOf(uint256 _epoch, address _user) view external returns(uint256 amount);\r\n    function totalSupplyAtEpoch(uint256 _epoch) view external returns(uint256 supply);\r\n    function epochCount() external view returns(uint256);\r\n    function checkpointEpoch() external;\r\n    function balanceOf(address _account) external view returns(uint256);\r\n    function totalSupply() view external returns(uint256 supply);\r\n\r\n    function addReward(\r\n        address _rewardsToken,\r\n        address _distributor,\r\n        bool _useBoost\r\n    ) external;\r\n    function approveRewardDistributor(\r\n        address _rewardsToken,\r\n        address _distributor,\r\n        bool _approved\r\n    ) external;\r\n    function setStakeLimits(uint256 _minimum, uint256 _maximum) external;\r\n    function setBoost(uint256 _max, uint256 _rate, address _receivingAddress) external;\r\n    function setKickIncentive(uint256 _rate, uint256 _delay) external;\r\n    function shutdown() external;\r\n    function recoverERC20(address _tokenAddress, uint256 _tokenAmount) external;\r\n}\r\n\r\n// File: @openzeppelin\\contracts\\token\\ERC20\\IERC20.sol\r\n\r\n\r\npragma solidity >=0.6.0 <0.8.0;\r\n\r\n/**\r\n * @dev Interface of the ERC20 standard as defined in the EIP.\r\n */\r\ninterface IERC20 {\r\n    /**\r\n     * @dev Returns the amount of tokens in existence.\r\n     */\r\n    function totalSupply() external view returns (uint256);\r\n\r\n    /**\r\n     * @dev Returns the amount of tokens owned by `account`.\r\n     */\r\n    function balanceOf(address account) external view returns (uint256);\r\n\r\n    /**\r\n     * @dev Moves `amount` tokens from the caller's account to `recipient`.\r\n     *\r\n     * Returns a boolean value indicating whether the operation succeeded.\r\n     *\r\n     * Emits a {Transfer} event.\r\n     */\r\n    function transfer(address recipient, uint256 amount) external returns (bool);\r\n\r\n    /**\r\n     * @dev Returns the remaining number of tokens that `spender` will be\r\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\r\n     * zero by default.\r\n     *\r\n     * This value changes when {approve} or {transferFrom} are called.\r\n     */\r\n    function allowance(address owner, address spender) external view returns (uint256);\r\n\r\n    /**\r\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\r\n     *\r\n     * Returns a boolean value indicating whether the operation succeeded.\r\n     *\r\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\r\n     * that someone may use both the old and the new allowance by unfortunate\r\n     * transaction ordering. One possible solution to mitigate this race\r\n     * condition is to first reduce the spender's allowance to 0 and set the\r\n     * desired value afterwards:\r\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\r\n     *\r\n     * Emits an {Approval} event.\r\n     */\r\n    function approve(address spender, uint256 amount) external returns (bool);\r\n\r\n    /**\r\n     * @dev Moves `amount` tokens from `sender` to `recipient` using the\r\n     * allowance mechanism. `amount` is then deducted from the caller's\r\n     * allowance.\r\n     *\r\n     * Returns a boolean value indicating whether the operation succeeded.\r\n     *\r\n     * Emits a {Transfer} event.\r\n     */\r\n    function transferFrom(address sender, address recipient, uint256 amount) external returns (bool);\r\n\r\n    /**\r\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\r\n     * another (`to`).\r\n     *\r\n     * Note that `value` may be zero.\r\n     */\r\n    event Transfer(address indexed from, address indexed to, uint256 value);\r\n\r\n    /**\r\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\r\n     * a call to {approve}. `value` is the new allowance.\r\n     */\r\n    event Approval(address indexed owner, address indexed spender, uint256 value);\r\n}\r\n\r\n// File: contracts\\LockerAdmin.sol\r\n\r\npragma solidity 0.6.12;\r\n\r\n\r\n/*\r\nAdmin proxy for locker contract to fix require checks and seal off staking proxy changes\r\n*/\r\ncontract LockerAdmin{\r\n\r\n    ILockedCvx public constant locker = ILockedCvx(0xD18140b4B819b895A3dba5442F959fA44994AF50);\r\n    address public operator;\r\n\r\n    constructor() public {\r\n        operator = address(0xa3C5A1e09150B75ff251c1a7815A07182c3de2FB);\r\n    }\r\n\r\n    modifier onlyOwner() {\r\n        require(operator == msg.sender, \"!auth\");\r\n        _;\r\n    }\r\n\r\n    function setOperator(address _operator) external onlyOwner{\r\n        operator = _operator;\r\n    }\r\n\r\n\r\n    function addReward(\r\n        address _rewardsToken,\r\n        address _distributor,\r\n        bool _useBoost\r\n    ) external onlyOwner{\r\n        locker.addReward(_rewardsToken, _distributor, _useBoost);\r\n    }\r\n\r\n    function approveRewardDistributor(\r\n        address _rewardsToken,\r\n        address _distributor,\r\n        bool _approved\r\n    ) external onlyOwner{\r\n        locker.approveRewardDistributor(_rewardsToken, _distributor, _approved);\r\n    }\r\n\r\n    //seal setStakingContract off, make it immutable\r\n    // function setStakingContract(address _staking) external onlyOwner{\r\n    //     locker.setStakingContract(_staking);\r\n    // }\r\n\r\n    function setStakeLimits(uint256 _minimum, uint256 _maximum) external onlyOwner {\r\n        require(_minimum <= _maximum, \"min range\");\r\n        locker.setStakeLimits(_minimum, _maximum);\r\n    }\r\n\r\n    function setBoost(uint256 _max, uint256 _rate, address _receivingAddress) external onlyOwner {\r\n        require(_max < 1500, \"over max payment\"); //max 15%\r\n        require(_rate < 30000, \"over max rate\"); //max 3x\r\n        locker.setBoost(_max, _rate, _receivingAddress);\r\n    }\r\n\r\n    function setKickIncentive(uint256 _rate, uint256 _delay) external onlyOwner {\r\n        locker.setKickIncentive(_rate, _delay);\r\n    }\r\n\r\n    function shutdown() external onlyOwner {\r\n        locker.shutdown();\r\n    }\r\n\r\n    function recoverERC20(address _tokenAddress, uint256 _tokenAmount) external onlyOwner {\r\n        locker.recoverERC20(_tokenAddress, _tokenAmount);\r\n        transferToken(_tokenAddress, _tokenAmount);\r\n    }\r\n\r\n    function transferToken(address _tokenAddress, uint256 _tokenAmount) public onlyOwner {\r\n        IERC20(_tokenAddress).transfer(operator, _tokenAmount);\r\n    }\r\n}","ABI":"[{\"inputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_rewardsToken\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_distributor\",\"type\":\"address\"},{\"internalType\":\"bool\",\"name\":\"_useBoost\",\"type\":\"bool\"}],\"name\":\"addReward\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_rewardsToken\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_distributor\",\"type\":\"address\"},{\"internalType\":\"bool\",\"name\":\"_approved\",\"type\":\"bool\"}],\"name\":\"approveRewardDistributor\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"locker\",\"outputs\":[{\"internalType\":\"contract ILockedCvx\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"operator\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_tokenAddress\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_tokenAmount\",\"type\":\"uint256\"}],\"name\":\"recoverERC20\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_max\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_rate\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"_receivingAddress\",\"type\":\"address\"}],\"name\":\"setBoost\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_rate\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_delay\",\"type\":\"uint256\"}],\"name\":\"setKickIncentive\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_operator\",\"type\":\"address\"}],\"name\":\"setOperator\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_minimum\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_maximum\",\"type\":\"uint256\"}],\"name\":\"setStakeLimits\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"shutdown\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_tokenAddress\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_tokenAmount\",\"type\":\"uint256\"}],\"name\":\"transferToken\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}]","ContractName":"LockerAdmin","CompilerVersion":"v0.6.12+commit.27d51765","OptimizationUsed":"1","Runs":"200","ConstructorArguments":"","EVMVersion":"Default","Library":"","LicenseType":"MIT","Proxy":"0","Implementation":"","SwarmSource":"ipfs://d0554ee933dca1239fbc29a707584d021dc967624ae5a5ebaaea9afefe8bc63d"}]}