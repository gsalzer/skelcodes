{"status":"1","message":"OK","result":[{"SourceCode":"{{\r\n  \"language\": \"Solidity\",\r\n  \"sources\": {\r\n    \"/Users/svancoller/Development/bloXroute/egl/contracts/EglContract.sol\": {\r\n      \"content\": \"pragma solidity 0.6.6;\\n\\nimport \\\"./EglToken.sol\\\";\\nimport \\\"./interfaces/IEglGenesis.sol\\\";\\nimport \\\"./libraries/Math.sol\\\";\\n\\nimport \\\"@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol\\\";\\nimport \\\"@openzeppelin/contracts-upgradeable/math/SafeMathUpgradeable.sol\\\";\\nimport \\\"@openzeppelin/contracts-upgradeable/math/SignedSafeMathUpgradeable.sol\\\";\\nimport \\\"@openzeppelin/contracts-upgradeable/proxy/Initializable.sol\\\";\\nimport \\\"@openzeppelin/contracts-upgradeable/token/ERC20/IERC20Upgradeable.sol\\\";\\nimport \\\"@openzeppelin/contracts-upgradeable/utils/PausableUpgradeable.sol\\\";\\nimport \\\"@openzeppelin/contracts-upgradeable/utils/ReentrancyGuardUpgradeable.sol\\\";\\n\\n/**\\n * @title EGL Voting Smart Contract\\n * @author Shane van Coller\\n */\\ncontract EglContract is Initializable, OwnableUpgradeable, PausableUpgradeable, ReentrancyGuardUpgradeable {\\n    using Math for *;\\n    using SafeMathUpgradeable for *;\\n    using SignedSafeMathUpgradeable for int;\\n\\n    uint8 constant WEEKS_IN_YEAR = 52;\\n    uint constant DECIMAL_PRECISION = 10**18;\\n\\n    /* PUBLIC STATE VARIABLES */\\n    int public desiredEgl;\\n    int public baselineEgl;\\n    int public initialEgl;\\n    int public tallyVotesGasLimit;\\n\\n    uint public creatorEglsTotal;\\n    uint public liquidityEglMatchingTotal;\\n\\n    uint16 public currentEpoch;\\n    uint public currentEpochStartDate;\\n    uint public tokensInCirculation;\\n\\n    uint[52] public voterRewardSums;\\n    uint[8] public votesTotal;\\n    uint[8] public voteWeightsSum;\\n    uint[8] public gasTargetSum;\\n\\n    mapping(address => Voter) public voters;\\n    mapping(address => Supporter) public supporters;\\n    mapping(address => uint) public seeders;\\n\\n    struct Voter {\\n        uint8 lockupDuration;\\n        uint16 voteEpoch;\\n        uint releaseDate;\\n        uint tokensLocked;\\n        uint gasTarget;\\n    }\\n\\n    struct Supporter {\\n        uint32 claimed;\\n        uint poolTokens;\\n        uint firstEgl;\\n        uint lastEgl;\\n    }\\n\\n    /* PRIVATE STATE VARIABLES */\\n    EglToken private eglToken;\\n    IERC20Upgradeable private balancerPoolToken;\\n    IEglGenesis private eglGenesis;\\n\\n    address private creatorRewardsAddress;\\n    \\n    int private epochGasLimitSum;\\n    int private epochVoteCount;\\n    int private desiredEglThreshold;\\n\\n    uint24 private votingPauseSeconds;\\n    uint32 private epochLength;\\n    uint private firstEpochStartDate;\\n    uint private latestRewardSwept;\\n    uint private minLiquidityTokensLockup;\\n    uint private creatorRewardFirstEpoch;\\n    uint private remainingPoolReward;\\n    uint private remainingCreatorReward;\\n    uint private remainingDaoBalance;\\n    uint private remainingSeederBalance;\\n    uint private remainingSupporterBalance;\\n    uint private remainingBptBalance;\\n    uint private remainingVoterReward;\\n    uint private lastSerializedEgl;\\n    uint private ethEglRatio;\\n    uint private ethBptRatio;\\n    uint private voterRewardMultiplier;\\n    uint private gasTargetTolerance;    \\n    uint16 private voteThresholdGracePeriod;\\n\\n    /* EVENTS */\\n    event Initialized(\\n        address deployer,\\n        address eglContract,\\n        address eglToken,\\n        address genesisContract,\\n        address balancerToken,\\n        uint totalGenesisEth,\\n        uint ethEglRatio,\\n        uint ethBptRatio,\\n        uint minLiquidityTokensLockup,\\n        uint firstEpochStartDate,\\n        uint votingPauseSeconds,\\n        uint epochLength,\\n        uint date\\n    );\\n    event Vote(\\n        address caller,\\n        uint16 currentEpoch,\\n        uint gasTarget,\\n        uint eglAmount,\\n        uint8 lockupDuration,\\n        uint releaseDate,\\n        uint epochVoteWeightSum,\\n        uint epochGasTargetSum,\\n        uint epochVoterRewardSum,\\n        uint epochTotalVotes,\\n        uint date\\n    );\\n    event ReVote(\\n        address caller, \\n        uint gasTarget, \\n        uint eglAmount, \\n        uint date\\n    );\\n    event Withdraw(\\n        address caller,\\n        uint16 currentEpoch,\\n        uint tokensLocked,\\n        uint rewardTokens,\\n        uint gasTarget,\\n        uint epochVoterRewardSum,\\n        uint epochTotalVotes,\\n        uint epochVoteWeightSum,\\n        uint epochGasTargetSum,\\n        uint date\\n    );\\n    event VotesTallied(\\n        address caller,\\n        uint16 currentEpoch,\\n        int desiredEgl,\\n        int averageGasTarget,\\n        uint votingThreshold,\\n        uint actualVotePercentage,\\n        int baselineEgl,\\n        uint tokensInCirculation,\\n        uint date\\n    );\\n    event CreatorRewardsClaimed(\\n        address caller,\\n        address creatorRewardAddress,\\n        uint amountClaimed,\\n        uint lastSerializedEgl,\\n        uint remainingCreatorReward,\\n        uint16 currentEpoch,\\n        uint date\\n    );\\n    event VoteThresholdMet(\\n        address caller,\\n        uint16 currentEpoch,\\n        int desiredEgl,\\n        uint voteThreshold,\\n        uint actualVotePercentage,\\n        int gasLimitSum,\\n        int voteCount,\\n        int baselineEgl,\\n        uint date\\n    );\\n    event VoteThresholdFailed(\\n        address caller,\\n        uint16 currentEpoch,\\n        int desiredEgl,\\n        uint voteThreshold,\\n        uint actualVotePercentage,\\n        int baselineEgl,\\n        int initialEgl,\\n        uint timeSinceFirstEpoch,\\n        uint gracePeriodSeconds,\\n        uint date\\n    );\\n    event PoolRewardsSwept(\\n        address caller, \\n        address coinbaseAddress,\\n        uint blockNumber, \\n        int blockGasLimit, \\n        uint blockReward, \\n        uint date\\n    );\\n    event BlockRewardCalculated(\\n        uint blockNumber, \\n        uint16 currentEpoch,\\n        uint remainingPoolReward,\\n        int blockGasLimit, \\n        int desiredEgl,\\n        int tallyVotesGasLimit,\\n        uint proximityRewardPercent,\\n        uint totalRewardPercent,\\n        uint blockReward,\\n        uint date\\n    );\\n    event SeedAccountClaimed(\\n        address seedAddress, \\n        uint individualSeedAmount, \\n        uint releaseDate,\\n        uint date\\n    );\\n    event VoterRewardCalculated(\\n        address voter,\\n        uint16 currentEpoch,\\n        uint voterReward,\\n        uint epochVoterReward,\\n        uint voteWeight,\\n        uint rewardMultiplier,\\n        uint weeksDiv,\\n        uint epochVoterRewardSum,\\n        uint remainingVoterRewards,\\n        uint date\\n    );\\n    event SupporterTokensClaimed(\\n        address caller,\\n        uint amountContributed,\\n        uint gasTarget,\\n        uint lockDuration,\\n        uint ethEglRatio,\\n        uint ethBptRatio,\\n        uint bonusEglsReceived,\\n        uint poolTokensReceived,\\n        uint remainingSupporterBalance,\\n        uint remainingBptBalance, \\n        uint date\\n    );\\n    event PoolTokensWithdrawn(\\n        address caller, \\n        uint currentSerializedEgl, \\n        uint poolTokensDue, \\n        uint poolTokens, \\n        uint firstEgl, \\n        uint lastEgl, \\n        uint eglReleaseDate,\\n        uint date\\n    );  \\n    event SerializedEglCalculated(\\n        uint currentEpoch, \\n        uint secondsSinceEglStart,\\n        uint timePassedPercentage, \\n        uint serializedEgl,\\n        uint maxSupply,\\n        uint date\\n    );\\n    event SeedAccountAdded(\\n        address seedAccount,\\n        uint seedAmount,\\n        uint remainingSeederBalance,\\n        uint date\\n    );\\n    \\n    /**\\n     * @notice Revert any transactions that attempts to send ETH to the contract directly\\n     */\\n    receive() external payable {\\n        revert(\\\"EGL:NO_PAYMENTS\\\");\\n    }\\n\\n    /* EXTERNAL FUNCTIONS */\\n    /**\\n     * @notice Initialized contract variables and sets up token bucket sizes\\n     *\\n     * @param _token Address of the EGL token     \\n     * @param _poolToken Address of the Balance Pool Token (BPT)\\n     * @param _genesis Address of the EGL Genesis contract\\n     * @param _currentEpochStartDate Start date for the first epoch\\n     * @param _votingPauseSeconds Number of seconds to pause voting before votes are tallied\\n     * @param _epochLength The length of each epoch in seconds\\n     * @param _seedAccounts List of accounts to seed with EGL's\\n     * @param _seedAmounts Amount of EGLS's to seed accounts with\\n     * @param _creatorRewardsAccount Address that creator rewards get sent to\\n     */\\n    function initialize(\\n        address _token,\\n        address _poolToken,\\n        address _genesis,\\n        uint _currentEpochStartDate,\\n        uint24 _votingPauseSeconds,\\n        uint32 _epochLength,\\n        address[] memory _seedAccounts,\\n        uint[] memory _seedAmounts,\\n        address _creatorRewardsAccount\\n    ) \\n        public \\n        initializer \\n    {\\n        require(_token != address(0), \\\"EGL:INVALID_EGL_TOKEN_ADDR\\\");\\n        require(_poolToken != address(0), \\\"EGL:INVALID_BP_TOKEN_ADDR\\\");\\n        require(_genesis != address(0), \\\"EGL:INVALID_GENESIS_ADDR\\\");\\n\\n        __Context_init_unchained();\\n        __Ownable_init_unchained();\\n        __Pausable_init_unchained();\\n        __ReentrancyGuard_init_unchained();\\n\\n        eglToken = EglToken(_token);\\n        balancerPoolToken = IERC20Upgradeable(_poolToken);\\n        eglGenesis = IEglGenesis(_genesis);        \\n\\n        creatorEglsTotal = 750000000 ether;\\n        remainingCreatorReward = creatorEglsTotal;\\n\\n        liquidityEglMatchingTotal = 750000000 ether;\\n        remainingPoolReward = 1250000000 ether;        \\n        remainingDaoBalance = 250000000 ether;\\n        remainingSeederBalance = 50000000 ether;\\n        remainingSupporterBalance = 500000000 ether;\\n        remainingVoterReward = 500000000 ether;\\n        \\n        voterRewardMultiplier = 362844.70 ether;\\n\\n        uint totalGenesisEth = eglGenesis.cumulativeBalance();\\n        require(totalGenesisEth > 0, \\\"EGL:NO_GENESIS_BALANCE\\\");\\n\\n        remainingBptBalance = balancerPoolToken.balanceOf(eglGenesis.owner());\\n        require(remainingBptBalance > 0, \\\"EGL:NO_BPT_BALANCE\\\");\\n        ethEglRatio = liquidityEglMatchingTotal.mul(DECIMAL_PRECISION)\\n            .div(totalGenesisEth);\\n        ethBptRatio = remainingBptBalance.mul(DECIMAL_PRECISION)\\n            .div(totalGenesisEth);\\n\\n        creatorRewardFirstEpoch = 10;\\n        minLiquidityTokensLockup = _epochLength.mul(10);\\n\\n        firstEpochStartDate = _currentEpochStartDate;\\n        currentEpochStartDate = _currentEpochStartDate;\\n        votingPauseSeconds = _votingPauseSeconds;\\n        epochLength = _epochLength;\\n        creatorRewardsAddress = _creatorRewardsAccount;\\n        tokensInCirculation = liquidityEglMatchingTotal;\\n        tallyVotesGasLimit = int(block.gaslimit);\\n        \\n        baselineEgl = int(block.gaslimit);\\n        initialEgl = baselineEgl;\\n        desiredEgl = baselineEgl;\\n\\n        gasTargetTolerance = 4000000;\\n        desiredEglThreshold = 1000000;\\n        voteThresholdGracePeriod = 7;\\n\\n        if (_seedAccounts.length > 0) {\\n            for (uint8 i = 0; i < _seedAccounts.length; i++) {\\n                addSeedAccount(_seedAccounts[i], _seedAmounts[i]);\\n            }\\n        }\\n        \\n        emit Initialized(\\n            msg.sender,\\n            address(this),\\n            address(eglToken),\\n            address(eglGenesis), \\n            address(balancerPoolToken), \\n            totalGenesisEth,\\n            ethEglRatio,\\n            ethBptRatio,\\n            minLiquidityTokensLockup,\\n            firstEpochStartDate,\\n            votingPauseSeconds,\\n            epochLength,\\n            block.timestamp\\n        );\\n    }\\n\\n    /**\\n    * @notice Allows EGL Genesis contributors to claim their \\\"bonus\\\" EGL's from contributing in Genesis. Bonus EGL's\\n    * get locked up in a vote right away and can only be withdrawn once all BPT's are available\\n    *\\n    * @param _gasTarget desired gas target for initial vote\\n    * @param _lockupDuration duration to lock tokens for - determines vote multiplier\\n    */\\n    function claimSupporterEgls(uint _gasTarget, uint8 _lockupDuration) external whenNotPaused {\\n        require(remainingSupporterBalance > 0, \\\"EGL:SUPPORTER_EGLS_DEPLETED\\\");\\n        require(remainingBptBalance > 0, \\\"EGL:BPT_BALANCE_DEPLETED\\\");\\n        require(\\n            eglGenesis.canContribute() == false && eglGenesis.canWithdraw() == false, \\n            \\\"EGL:GENESIS_LOCKED\\\"\\n        );\\n        require(supporters[msg.sender].claimed == 0, \\\"EGL:ALREADY_CLAIMED\\\");\\n\\n        (uint contributionAmount, uint cumulativeBalance, ,) = eglGenesis.contributors(msg.sender);\\n        require(contributionAmount > 0, \\\"EGL:NOT_CONTRIBUTED\\\");\\n\\n        if (block.timestamp > currentEpochStartDate.add(epochLength))\\n            tallyVotes();\\n        \\n        uint serializedEgls = contributionAmount.mul(ethEglRatio).div(DECIMAL_PRECISION);\\n        uint firstEgl = cumulativeBalance.sub(contributionAmount)\\n            .mul(ethEglRatio)\\n            .div(DECIMAL_PRECISION);\\n        uint lastEgl = firstEgl.add(serializedEgls);\\n        uint bonusEglsDue = Math.umin(\\n            _calculateBonusEglsDue(firstEgl, lastEgl), \\n            remainingSupporterBalance\\n        );\\n        uint poolTokensDue = Math.umin(\\n            contributionAmount.mul(ethBptRatio).div(DECIMAL_PRECISION),\\n            remainingBptBalance\\n        );\\n\\n        remainingSupporterBalance = remainingSupporterBalance.sub(bonusEglsDue);\\n        remainingBptBalance = remainingBptBalance.sub(poolTokensDue);\\n        tokensInCirculation = tokensInCirculation.add(bonusEglsDue);\\n\\n        Supporter storage _supporter = supporters[msg.sender];        \\n        _supporter.claimed = 1;\\n        _supporter.poolTokens = poolTokensDue;\\n        _supporter.firstEgl = firstEgl;\\n        _supporter.lastEgl = lastEgl;        \\n        \\n        emit SupporterTokensClaimed(\\n            msg.sender,\\n            contributionAmount,\\n            _gasTarget,\\n            _lockupDuration,\\n            ethEglRatio,\\n            ethBptRatio,\\n            bonusEglsDue,\\n            poolTokensDue,\\n            remainingSupporterBalance,\\n            remainingBptBalance,\\n            block.timestamp\\n        );\\n\\n        _internalVote(\\n            msg.sender,\\n            _gasTarget,\\n            bonusEglsDue,\\n            _lockupDuration,\\n            firstEpochStartDate.add(epochLength.mul(WEEKS_IN_YEAR))\\n        );\\n    }\\n\\n    /**\\n     * @notice Function for seed/signal accounts to claim their EGL's. EGL's get locked up in a vote right away and can \\n     * only be withdrawn after the seeder/signal lockup period\\n     *\\n     * @param _gasTarget desired gas target for initial vote\\n     * @param _lockupDuration duration to lock tokens for - determines vote multiplier\\n     */\\n    function claimSeederEgls(uint _gasTarget, uint8 _lockupDuration) external whenNotPaused {\\n        require(seeders[msg.sender] > 0, \\\"EGL:NOT_SEEDER\\\");\\n        if (block.timestamp > currentEpochStartDate.add(epochLength))\\n            tallyVotes();\\n        \\n        uint seedAmount = seeders[msg.sender];\\n        delete seeders[msg.sender];\\n\\n        tokensInCirculation = tokensInCirculation.add(seedAmount);\\n        uint releaseDate = firstEpochStartDate.add(epochLength.mul(WEEKS_IN_YEAR));\\n        emit SeedAccountClaimed(msg.sender, seedAmount, releaseDate, block.timestamp);\\n\\n        _internalVote(\\n            msg.sender,\\n            _gasTarget,\\n            seedAmount,\\n            _lockupDuration,\\n            releaseDate\\n        );\\n    }\\n\\n    /**\\n     * @notice Submit vote to either increase or decrease the desired gas limit\\n     *\\n     * @param _gasTarget The votes target gas limit\\n     * @param _eglAmount Amount of EGL's to vote with\\n     * @param _lockupDuration Duration to lock the EGL's\\n     */\\n    function vote(\\n        uint _gasTarget,\\n        uint _eglAmount,\\n        uint8 _lockupDuration\\n    ) \\n        external \\n        whenNotPaused\\n        nonReentrant \\n    {\\n        require(_eglAmount >= 1 ether, \\\"EGL:AMNT_TOO_LOW\\\");\\n        require(_eglAmount <= eglToken.balanceOf(msg.sender), \\\"EGL:INSUFFICIENT_EGL_BALANCE\\\");\\n        require(eglToken.allowance(msg.sender, address(this)) >= _eglAmount, \\\"EGL:INSUFFICIENT_ALLOWANCE\\\");\\n        if (block.timestamp > currentEpochStartDate.add(epochLength))\\n            tallyVotes();\\n\\n        bool success = eglToken.transferFrom(msg.sender, address(this), _eglAmount);\\n        require(success, \\\"EGL:TOKEN_TRANSFER_FAILED\\\");\\n        _internalVote(\\n            msg.sender,\\n            _gasTarget,\\n            _eglAmount,\\n            _lockupDuration,\\n            0\\n        );\\n    }\\n\\n    /**\\n     * @notice Re-Vote to change parameters of an existing vote. Will not shorten the time the tokens are \\n     * locked up from the original vote \\n     *\\n     * @param _gasTarget The votes target gas limit\\n     * @param _eglAmount Amount of EGL's to vote with\\n     * @param _lockupDuration Duration to lock the EGL's\\n     */\\n    function reVote(\\n        uint _gasTarget,\\n        uint _eglAmount,\\n        uint8 _lockupDuration\\n    ) \\n        external \\n        whenNotPaused\\n        nonReentrant\\n    {\\n        require(voters[msg.sender].tokensLocked > 0, \\\"EGL:NOT_VOTED\\\");\\n        if (_eglAmount > 0) {\\n            require(_eglAmount >= 1 ether, \\\"EGL:AMNT_TOO_LOW\\\");\\n            require(_eglAmount <= eglToken.balanceOf(msg.sender), \\\"EGL:INSUFFICIENT_EGL_BALANCE\\\");\\n            require(eglToken.allowance(msg.sender, address(this)) >= _eglAmount, \\\"EGL:INSUFFICIENT_ALLOWANCE\\\");\\n            bool success = eglToken.transferFrom(msg.sender, address(this), _eglAmount);\\n            require(success, \\\"EGL:TOKEN_TRANSFER_FAILED\\\");\\n        }\\n        if (block.timestamp > currentEpochStartDate.add(epochLength))\\n            tallyVotes();\\n\\n        uint originalReleaseDate = voters[msg.sender].releaseDate;\\n        _eglAmount = _eglAmount.add(_internalWithdraw(msg.sender));\\n        _internalVote(\\n            msg.sender,\\n            _gasTarget,\\n            _eglAmount,\\n            _lockupDuration,\\n            originalReleaseDate\\n        );\\n        emit ReVote(msg.sender, _gasTarget, _eglAmount, block.timestamp);\\n    }\\n\\n    /**\\n     * @notice Withdraw EGL's once they have matured\\n     */\\n    function withdraw() external whenNotPaused {\\n        require(voters[msg.sender].tokensLocked > 0, \\\"EGL:NOT_VOTED\\\");\\n        require(block.timestamp > voters[msg.sender].releaseDate, \\\"EGL:NOT_RELEASE_DATE\\\");\\n        bool success = eglToken.transfer(msg.sender, _internalWithdraw(msg.sender));\\n        require(success, \\\"EGL:TOKEN_TRANSFER_FAILED\\\");\\n    }\\n\\n    /**\\n     * @notice Send EGL reward to miner of the block. Reward caclulated based on how close the block gas limit\\n     * is to the desired EGL. The closer it is, the higher the reward\\n     */\\n    function sweepPoolRewards() external whenNotPaused {\\n        require(block.number > latestRewardSwept, \\\"EGL:ALREADY_SWEPT\\\");\\n        latestRewardSwept = block.number;\\n        int blockGasLimit = int(block.gaslimit);\\n        uint blockReward = _calculateBlockReward(blockGasLimit, desiredEgl, tallyVotesGasLimit);\\n        if (blockReward > 0) {\\n            remainingPoolReward = remainingPoolReward.sub(blockReward);\\n            tokensInCirculation = tokensInCirculation.add(blockReward);\\n            bool success = eglToken.transfer(block.coinbase, Math.umin(eglToken.balanceOf(address(this)), blockReward));\\n            require(success, \\\"EGL:TOKEN_TRANSFER_FAILED\\\");\\n        }\\n\\n        emit PoolRewardsSwept(\\n            msg.sender, \\n            block.coinbase,\\n            latestRewardSwept, \\n            blockGasLimit, \\n            blockReward,\\n            block.timestamp\\n        );\\n    }\\n\\n    /**\\n     * @notice Allows for the withdrawal of liquidity pool tokens once they have matured\\n     */\\n    function withdrawPoolTokens() external whenNotPaused {\\n        require(supporters[msg.sender].poolTokens > 0, \\\"EGL:NO_POOL_TOKENS\\\");\\n        require(block.timestamp.sub(firstEpochStartDate) > minLiquidityTokensLockup, \\\"EGL:ALL_TOKENS_LOCKED\\\");\\n\\n        uint currentSerializedEgl = _calculateSerializedEgl(\\n            block.timestamp.sub(firstEpochStartDate), \\n            liquidityEglMatchingTotal, \\n            minLiquidityTokensLockup\\n        );\\n\\n        Voter storage _voter = voters[msg.sender];\\n        Supporter storage _supporter = supporters[msg.sender];\\n        require(_supporter.firstEgl <= currentSerializedEgl, \\\"EGL:ADDR_TOKENS_LOCKED\\\");\\n\\n        uint poolTokensDue;\\n        if (currentSerializedEgl >= _supporter.lastEgl) {\\n            poolTokensDue = _supporter.poolTokens;\\n            _supporter.poolTokens = 0;\\n            \\n            uint releaseEpoch = _voter.voteEpoch.add(_voter.lockupDuration);\\n            _voter.releaseDate = releaseEpoch > currentEpoch\\n                ? block.timestamp.add(releaseEpoch.sub(currentEpoch).mul(epochLength))\\n                : block.timestamp;\\n\\n            emit PoolTokensWithdrawn(\\n                msg.sender, \\n                currentSerializedEgl, \\n                poolTokensDue, \\n                _supporter.poolTokens,\\n                _supporter.firstEgl, \\n                _supporter.lastEgl, \\n                _voter.releaseDate,\\n                block.timestamp\\n            );\\n        } else {\\n            poolTokensDue = _calculateCurrentPoolTokensDue(\\n                currentSerializedEgl, \\n                _supporter.firstEgl, \\n                _supporter.lastEgl, \\n                _supporter.poolTokens\\n            );\\n            _supporter.poolTokens = _supporter.poolTokens.sub(poolTokensDue);\\n            emit PoolTokensWithdrawn(\\n                msg.sender,\\n                currentSerializedEgl,\\n                poolTokensDue,\\n                _supporter.poolTokens,\\n                _supporter.firstEgl,\\n                _supporter.lastEgl,\\n                _voter.releaseDate,\\n                block.timestamp\\n            );\\n            _supporter.firstEgl = currentSerializedEgl;\\n        }        \\n\\n        bool success = balancerPoolToken.transfer(\\n            msg.sender, \\n            Math.umin(balancerPoolToken.balanceOf(address(this)), poolTokensDue)\\n        );        \\n        require(success, \\\"EGL:TOKEN_TRANSFER_FAILED\\\");\\n    }\\n\\n    /**\\n     * @notice Ower only funciton to pause contract\\n     */\\n    function pauseEgl() external onlyOwner whenNotPaused {\\n        _pause();\\n    }\\n\\n    /** \\n     * @notice Owner only function to unpause contract\\n     */\\n    function unpauseEgl() external onlyOwner whenPaused {\\n        _unpause();\\n    }\\n\\n    /* PUBLIC FUNCTIONS */\\n    /**\\n     * @notice Tally Votes for the most recent epoch and calculate the new desired EGL amount\\n     */\\n    function tallyVotes() public whenNotPaused {\\n        require(block.timestamp > currentEpochStartDate.add(epochLength), \\\"EGL:VOTE_NOT_ENDED\\\");\\n        tallyVotesGasLimit = int(block.gaslimit);\\n\\n        uint votingThreshold = currentEpoch <= voteThresholdGracePeriod\\n            ? DECIMAL_PRECISION.mul(10)\\n            : DECIMAL_PRECISION.mul(30);\\n\\n\\t    if (currentEpoch >= WEEKS_IN_YEAR) {\\n            uint actualThreshold = votingThreshold.add(\\n                (DECIMAL_PRECISION.mul(20).div(WEEKS_IN_YEAR.mul(2)))\\n                .mul(currentEpoch.sub(WEEKS_IN_YEAR.sub(1)))\\n            );\\n            votingThreshold = Math.umin(actualThreshold, 50 * DECIMAL_PRECISION);\\n        }\\n\\n        int averageGasTarget = voteWeightsSum[0] > 0\\n            ? int(gasTargetSum[0].div(voteWeightsSum[0]))\\n            : 0;\\n        uint votePercentage = _calculatePercentageOfTokensInCirculation(votesTotal[0]);\\n        if (votePercentage >= votingThreshold) {\\n            epochGasLimitSum = epochGasLimitSum.add(int(tallyVotesGasLimit));\\n            epochVoteCount = epochVoteCount.add(1);\\n            baselineEgl = epochGasLimitSum.div(epochVoteCount);\\n\\n            desiredEgl = baselineEgl > averageGasTarget\\n                ? baselineEgl.sub(baselineEgl.sub(averageGasTarget).min(desiredEglThreshold))\\n                : baselineEgl.add(averageGasTarget.sub(baselineEgl).min(desiredEglThreshold));\\n\\n            if (\\n                desiredEgl >= tallyVotesGasLimit.sub(10000) &&\\n                desiredEgl <= tallyVotesGasLimit.add(10000)\\n            ) \\n                desiredEgl = tallyVotesGasLimit;\\n\\n            emit VoteThresholdMet(\\n                msg.sender,\\n                currentEpoch,\\n                desiredEgl,\\n                votingThreshold,\\n                votePercentage,\\n                epochGasLimitSum,\\n                epochVoteCount,\\n                baselineEgl,\\n                block.timestamp\\n            );\\n        } else {\\n            if (block.timestamp.sub(firstEpochStartDate) >= epochLength.mul(voteThresholdGracePeriod))\\n                desiredEgl = tallyVotesGasLimit.mul(95).div(100);\\n\\n            emit VoteThresholdFailed(\\n                msg.sender,\\n                currentEpoch,\\n                desiredEgl,\\n                votingThreshold,\\n                votePercentage,\\n                baselineEgl,\\n                initialEgl,\\n                block.timestamp.sub(firstEpochStartDate),\\n                epochLength.mul(6),\\n                block.timestamp\\n            );\\n        }\\n\\n        // move values 1 slot earlier and put a '0' at the last slot\\n        for (uint8 i = 0; i < 7; i++) {\\n            voteWeightsSum[i] = voteWeightsSum[i + 1];\\n            gasTargetSum[i] = gasTargetSum[i + 1];\\n            votesTotal[i] = votesTotal[i + 1];\\n        }\\n        voteWeightsSum[7] = 0;\\n        gasTargetSum[7] = 0;\\n        votesTotal[7] = 0;\\n\\n        epochGasLimitSum = 0;\\n        epochVoteCount = 0;\\n\\n        if (currentEpoch >= creatorRewardFirstEpoch && remainingCreatorReward > 0)\\n            _issueCreatorRewards(currentEpoch);\\n\\n        currentEpoch += 1;\\n        currentEpochStartDate = currentEpochStartDate.add(epochLength);\\n\\n        emit VotesTallied(\\n            msg.sender,\\n            currentEpoch - 1,\\n            desiredEgl,\\n            averageGasTarget,\\n            votingThreshold,\\n            votePercentage,\\n            baselineEgl,\\n            tokensInCirculation,\\n            block.timestamp\\n        );\\n    }\\n\\n    /**\\n     * @notice Owner only function to add a seeder account with specified number of EGL's. Amount cannot\\n     * exceed balance allocated for seed/signal accounts\\n     *\\n     * @param _seedAccount Wallet address of seeder\\n     * @param _seedAmount Amount of EGL's to seed\\n     */\\n    function addSeedAccount(address _seedAccount, uint _seedAmount) public onlyOwner {\\n        require(_seedAmount <= remainingSeederBalance, \\\"EGL:INSUFFICIENT_SEED_BALANCE\\\");\\n        require(seeders[_seedAccount] == 0, \\\"EGL:ALREADY_SEEDER\\\");\\n        require(voters[_seedAccount].tokensLocked == 0, \\\"EGL:ALREADY_HAS_VOTE\\\");\\n        require(eglToken.balanceOf(_seedAccount) == 0, \\\"EGL:ALREADY_HAS_EGLS\\\");\\n        require(block.timestamp < firstEpochStartDate.add(minLiquidityTokensLockup), \\\"EGL:SEED_PERIOD_PASSED\\\");\\n        (uint contributorAmount,,,) = eglGenesis.contributors(_seedAccount);\\n        require(contributorAmount == 0, \\\"EGL:IS_CONTRIBUTOR\\\");\\n        \\n        remainingSeederBalance = remainingSeederBalance.sub(_seedAmount);\\n        remainingDaoBalance = remainingDaoBalance.sub(_seedAmount);\\n        seeders[_seedAccount] = _seedAmount;\\n        emit SeedAccountAdded(\\n            _seedAccount,\\n            _seedAmount,\\n            remainingSeederBalance,\\n            block.timestamp\\n        );\\n    }\\n\\n    /**\\n     * @notice Do not allow owner to renounce ownership, only transferOwnership\\n     */\\n    function renounceOwnership() public override onlyOwner {\\n        revert(\\\"EGL:NO_RENOUNCE_OWNERSHIP\\\");\\n    }\\n\\n    /* INTERNAL FUNCTIONS */\\n    /**\\n     * @notice Internal function that adds the vote \\n     *\\n     * @param _voter Address the vote should to assigned to\\n     * @param _gasTarget The target gas limit amount\\n     * @param _eglAmount Amount of EGL's to vote with\\n     * @param _lockupDuration Duration to lock the EGL's\\n     * @param _releaseTime Date the EGL's are available to withdraw\\n     */\\n    function _internalVote(\\n        address _voter,\\n        uint _gasTarget,\\n        uint _eglAmount,\\n        uint8 _lockupDuration,\\n        uint _releaseTime\\n    ) internal {\\n        require(_voter != address(0), \\\"EGL:VOTER_ADDRESS_0\\\");\\n        require(block.timestamp >= firstEpochStartDate, \\\"EGL:VOTING_NOT_STARTED\\\");\\n        require(voters[_voter].tokensLocked == 0, \\\"EGL:ALREADY_VOTED\\\");\\n        require(\\n            Math.udelta(_gasTarget, block.gaslimit) < gasTargetTolerance,\\n            \\\"EGL:INVALID_GAS_TARGET\\\"\\n        );\\n\\n        require(_lockupDuration >= 1 && _lockupDuration <= 8, \\\"EGL:INVALID_LOCKUP\\\");\\n        require(block.timestamp < currentEpochStartDate.add(epochLength), \\\"EGL:VOTE_TOO_FAR\\\");\\n        require(block.timestamp < currentEpochStartDate.add(epochLength).sub(votingPauseSeconds), \\\"EGL:VOTE_TOO_CLOSE\\\");\\n\\n        epochGasLimitSum = epochGasLimitSum.add(int(block.gaslimit));\\n        epochVoteCount = epochVoteCount.add(1);\\n\\n        uint updatedReleaseDate = block.timestamp.add(_lockupDuration.mul(epochLength)).umax(_releaseTime);\\n\\n        Voter storage voter = voters[_voter];\\n        voter.voteEpoch = currentEpoch;\\n        voter.lockupDuration = _lockupDuration;\\n        voter.releaseDate = updatedReleaseDate;\\n        voter.tokensLocked = _eglAmount;\\n        voter.gasTarget = _gasTarget;\\n\\n        // Add the vote\\n        uint voteWeight = _eglAmount.mul(_lockupDuration);\\n        for (uint8 i = 0; i < _lockupDuration; i++) {\\n            voteWeightsSum[i] = voteWeightsSum[i].add(voteWeight);\\n            gasTargetSum[i] = gasTargetSum[i].add(_gasTarget.mul(voteWeight));\\n            if (currentEpoch.add(i) < WEEKS_IN_YEAR)\\n                voterRewardSums[currentEpoch.add(i)] = voterRewardSums[currentEpoch.add(i)].add(voteWeight);\\n            votesTotal[i] = votesTotal[i].add(_eglAmount);\\n        }\\n\\n        emit Vote(\\n            _voter,\\n            currentEpoch,\\n            _gasTarget,\\n            _eglAmount,\\n            _lockupDuration,\\n            updatedReleaseDate,\\n            voteWeightsSum[0],\\n            gasTargetSum[0],\\n            currentEpoch < WEEKS_IN_YEAR ? voterRewardSums[currentEpoch]: 0,\\n            votesTotal[0],\\n            block.timestamp\\n        );\\n    }\\n\\n    /**\\n     * @notice Internal function that removes the vote from current and future epochs as well as\\n     * calculates the rewards due for the time the tokens were locked\\n     *\\n     * @param _voter Address the voter for be withdrawn for\\n     * @return totalWithdrawn - The original vote amount + the total reward tokens due\\n     */\\n    function _internalWithdraw(address _voter) internal returns (uint totalWithdrawn) {\\n        require(_voter != address(0), \\\"EGL:VOTER_ADDRESS_0\\\");\\n        Voter storage voter = voters[_voter];\\n        uint16 voterEpoch = voter.voteEpoch;\\n        uint originalEglAmount = voter.tokensLocked;\\n        uint8 lockupDuration = voter.lockupDuration;\\n        uint gasTarget = voter.gasTarget;\\n        delete voters[_voter];\\n\\n        uint voteWeight = originalEglAmount.mul(lockupDuration);\\n        uint voterReward = _calculateVoterReward(_voter, currentEpoch, voterEpoch, lockupDuration, voteWeight);        \\n\\n        // Remove the gas target vote\\n        uint voterInterval = voterEpoch.add(lockupDuration);\\n        uint affectedEpochs = currentEpoch < voterInterval ? voterInterval.sub(currentEpoch) : 0;\\n        for (uint8 i = 0; i < affectedEpochs; i++) {\\n            voteWeightsSum[i] = voteWeightsSum[i].sub(voteWeight);\\n            gasTargetSum[i] = gasTargetSum[i].sub(voteWeight.mul(gasTarget));\\n            if (currentEpoch.add(i) < WEEKS_IN_YEAR) {\\n                voterRewardSums[currentEpoch.add(i)] = voterRewardSums[currentEpoch.add(i)].sub(voteWeight);\\n            }\\n            votesTotal[i] = votesTotal[i].sub(originalEglAmount);\\n        }\\n        \\n        tokensInCirculation = tokensInCirculation.add(voterReward);\\n\\n        emit Withdraw(\\n            _voter,\\n            currentEpoch,\\n            originalEglAmount,\\n            voterReward,\\n            gasTarget,\\n            currentEpoch < WEEKS_IN_YEAR ? voterRewardSums[currentEpoch]: 0,\\n            votesTotal[0],\\n            voteWeightsSum[0],\\n            gasTargetSum[0],\\n            block.timestamp\\n        );\\n        totalWithdrawn = originalEglAmount.add(voterReward);\\n    }\\n\\n    /**\\n     * @notice Calculates and issues creator reward EGLs' based on the release schedule\\n     *\\n     * @param _rewardEpoch The epoch number to calcualte the rewards for\\n     */\\n    function _issueCreatorRewards(uint _rewardEpoch) internal {\\n        uint serializedEgl = _calculateSerializedEgl(\\n            _rewardEpoch.mul(epochLength), \\n            creatorEglsTotal,\\n            creatorRewardFirstEpoch.mul(epochLength)\\n        );\\n        uint creatorRewardForEpoch = serializedEgl > 0\\n            ? serializedEgl.sub(lastSerializedEgl).umin(remainingCreatorReward)\\n            : 0;\\n                \\n        bool success = eglToken.transfer(creatorRewardsAddress, creatorRewardForEpoch);\\n        require(success, \\\"EGL:TOKEN_TRANSFER_FAILED\\\");\\n        remainingCreatorReward = remainingCreatorReward.sub(creatorRewardForEpoch);\\n        tokensInCirculation = tokensInCirculation.add(creatorRewardForEpoch);\\n\\n        emit CreatorRewardsClaimed(\\n            msg.sender,\\n            creatorRewardsAddress,\\n            creatorRewardForEpoch,\\n            lastSerializedEgl,\\n            remainingCreatorReward,\\n            currentEpoch,\\n            block.timestamp\\n        );\\n        lastSerializedEgl = serializedEgl;\\n    }\\n\\n    /**\\n     * @notice Calulates the block reward depending on the current blocks gas limit\\n     *\\n     * @param _blockGasLimit Gas limit of the currently mined block\\n     * @param _desiredEgl Current desired EGL value\\n     * @param _tallyVotesGasLimit Gas limit of the block that contained the tally votes tx\\n     * @return blockReward The calculated block reward\\n     */\\n    function _calculateBlockReward(\\n        int _blockGasLimit, \\n        int _desiredEgl, \\n        int _tallyVotesGasLimit\\n    ) \\n        internal \\n        returns (uint blockReward) \\n    {\\n        uint totalRewardPercent;\\n        uint proximityRewardPercent;\\n        int eglDelta = Math.delta(_tallyVotesGasLimit, _desiredEgl);\\n        int actualDelta = Math.delta(_tallyVotesGasLimit, _blockGasLimit);\\n        int ceiling = _desiredEgl.add(10000);\\n        int floor = _desiredEgl.sub(10000);\\n\\n        if (_blockGasLimit >= floor && _blockGasLimit <= ceiling) {\\n            totalRewardPercent = DECIMAL_PRECISION.mul(100);\\n        } else if (eglDelta > 0 && (\\n                (\\n                    _desiredEgl > _tallyVotesGasLimit \\n                    && _blockGasLimit > _tallyVotesGasLimit \\n                    && _blockGasLimit <= ceiling\\n                ) || (\\n                    _desiredEgl < _tallyVotesGasLimit \\n                    && _blockGasLimit < _tallyVotesGasLimit \\n                    && _blockGasLimit >= floor\\n                )\\n            )            \\n        ) {\\n            proximityRewardPercent = uint(actualDelta.mul(int(DECIMAL_PRECISION))\\n                .div(eglDelta))\\n                .mul(75);                \\n            totalRewardPercent = proximityRewardPercent.add(DECIMAL_PRECISION.mul(25));\\n        }\\n\\n        blockReward = totalRewardPercent.mul(remainingPoolReward.div(2500000))\\n            .div(DECIMAL_PRECISION)\\n            .div(100);\\n\\n        emit BlockRewardCalculated(\\n            block.number,\\n            currentEpoch,\\n            remainingPoolReward,\\n            _blockGasLimit,\\n            _desiredEgl,\\n            _tallyVotesGasLimit,\\n            proximityRewardPercent,\\n            totalRewardPercent, \\n            blockReward,\\n            block.timestamp\\n        );\\n    }\\n\\n    /**\\n     * @notice Calculates the current serialized EGL given a time input\\n     * \\n     * @param _timeSinceOrigin Seconds passed since the first epoch started\\n     * @param _maxEglSupply The maximum supply of EGL's for the thing we're calculating for\\n     * @param _timeLocked The minimum lockup period for the thing we're calculating for\\n     * @return serializedEgl The serialized EGL for the exact second the function was called\\n     */\\n    function _calculateSerializedEgl(uint _timeSinceOrigin, uint _maxEglSupply, uint _timeLocked) \\n        internal                  \\n        returns (uint serializedEgl) \\n    {\\n        if (_timeSinceOrigin >= epochLength.mul(WEEKS_IN_YEAR))\\n            return _maxEglSupply;\\n\\n        uint timePassedPercentage = _timeSinceOrigin\\n            .sub(_timeLocked)\\n            .mul(DECIMAL_PRECISION)\\n            .div(\\n                epochLength.mul(WEEKS_IN_YEAR).sub(_timeLocked)\\n            );\\n\\n        // Reduced precision so that we don't overflow the uint256 when we raise to 4th power\\n        serializedEgl = ((timePassedPercentage.div(10**8))**4)\\n            .mul(_maxEglSupply.div(DECIMAL_PRECISION))\\n            .mul(10**8)\\n            .div((10**10)**3);\\n\\n        emit SerializedEglCalculated(\\n            currentEpoch, \\n            _timeSinceOrigin,\\n            timePassedPercentage.mul(100), \\n            serializedEgl, \\n            _maxEglSupply,\\n            block.timestamp\\n        );\\n    }\\n\\n    /**\\n     * @notice Calculates the pool tokens due at time of calling\\n     * \\n     * @param _currentEgl The current serialized EGL\\n     * @param _firstEgl The first serialized EGL of the participant\\n     * @param _lastEgl The last serialized EGL of the participant\\n     * @param _totalPoolTokens The total number of pool tokens due to the participant\\n     * @return poolTokensDue The number of pool tokens due based on the serialized EGL\\n     */\\n    function _calculateCurrentPoolTokensDue(\\n        uint _currentEgl, \\n        uint _firstEgl, \\n        uint _lastEgl, \\n        uint _totalPoolTokens\\n    ) \\n        internal \\n        pure\\n        returns (uint poolTokensDue) \\n    {\\n        require(_firstEgl < _lastEgl, \\\"EGL:INVALID_SERIALIZED_EGLS\\\");\\n\\n        if (_currentEgl < _firstEgl) \\n            return 0;\\n\\n        uint eglsReleased = (_currentEgl.umin(_lastEgl)).sub(_firstEgl);\\n        poolTokensDue = _totalPoolTokens\\n            .mul(eglsReleased)\\n            .div(\\n                _lastEgl.sub(_firstEgl)\\n            );\\n    }\\n\\n    /**\\n     * @notice Calculates bonus EGLs due\\n     * \\n     * @param _firstEgl The first serialized EGL of the participant\\n     * @param _lastEgl The last serialized EGL of the participant\\n     * @return bonusEglsDue The number of bonus EGL's due as a result of participating in Genesis\\n     */\\n    function _calculateBonusEglsDue(\\n        uint _firstEgl, \\n        uint _lastEgl\\n    )\\n        internal    \\n        pure     \\n        returns (uint bonusEglsDue)  \\n    {\\n        require(_firstEgl < _lastEgl, \\\"EGL:INVALID_SERIALIZED_EGLS\\\");\\n\\n        bonusEglsDue = (_lastEgl.div(DECIMAL_PRECISION)**4)\\n            .sub(_firstEgl.div(DECIMAL_PRECISION)**4)\\n            .mul(DECIMAL_PRECISION)\\n            .div(\\n                (81/128)*(10**27)\\n            );\\n    }\\n\\n    /**\\n     * @notice Calculates voter reward at time of withdrawal\\n     * \\n     * @param _voter The voter to calculate rewards for\\n     * @param _currentEpoch The current epoch to calculate rewards for\\n     * @param _voterEpoch The epoch the vote was originally entered\\n     * @param _lockupDuration The number of epochs the vote is locked up for\\n     * @param _voteWeight The vote weight for this vote (vote amount * lockup duration)\\n     * @return rewardsDue The total rewards due for all relevant epochs\\n     */\\n    function _calculateVoterReward(\\n        address _voter,\\n        uint16 _currentEpoch,\\n        uint16 _voterEpoch,\\n        uint8 _lockupDuration,\\n        uint _voteWeight\\n    ) \\n        internal         \\n        returns(uint rewardsDue) \\n    {\\n        require(_voter != address(0), \\\"EGL:VOTER_ADDRESS_0\\\");\\n\\n        uint rewardEpochs = _voterEpoch.add(_lockupDuration).umin(_currentEpoch).umin(WEEKS_IN_YEAR);\\n        for (uint16 i = _voterEpoch; i < rewardEpochs; i++) {\\n            uint epochReward = voterRewardSums[i] > 0 \\n                ? Math.umin(\\n                    _voteWeight.mul(voterRewardMultiplier)\\n                        .mul(WEEKS_IN_YEAR.sub(i))\\n                        .div(voterRewardSums[i]),\\n                    remainingVoterReward\\n                )\\n                : 0;\\n            rewardsDue = rewardsDue.add(epochReward);\\n            remainingVoterReward = remainingVoterReward.sub(epochReward);\\n            emit VoterRewardCalculated(\\n                _voter,\\n                _currentEpoch,\\n                rewardsDue,\\n                epochReward,\\n                _voteWeight,\\n                voterRewardMultiplier,\\n                WEEKS_IN_YEAR.sub(i),\\n                voterRewardSums[i],\\n                remainingVoterReward,\\n                block.timestamp\\n            );\\n        }\\n    }\\n\\n    /**\\n     * @notice Calculates the percentage of tokens in circulation for a given total\\n     *\\n     * @param _total The total to calculate the percentage of\\n     * @return votePercentage The percentage of the total\\n     */\\n    function _calculatePercentageOfTokensInCirculation(uint _total) \\n        internal \\n        view \\n        returns (uint votePercentage) \\n    {\\n        votePercentage = tokensInCirculation > 0\\n            ? _total.mul(DECIMAL_PRECISION).mul(100).div(tokensInCirculation)\\n            : 0;\\n    }\\n}\\n\"\r\n    },\r\n    \"/Users/svancoller/Development/bloXroute/egl/contracts/EglToken.sol\": {\r\n      \"content\": \"pragma solidity 0.6.6;\\n\\nimport \\\"@openzeppelin/contracts-upgradeable/token/ERC20/ERC20CappedUpgradeable.sol\\\";\\n\\ncontract EglToken is Initializable, ContextUpgradeable, ERC20CappedUpgradeable {\\n    function initialize(\\n        address initialRecipient, \\n        string memory name, \\n        string memory symbol, \\n        uint256 initialSupply\\n    ) \\n        public \\n        initializer \\n    {\\n        require(initialRecipient != address(0), \\\"EGLTOKEN:INVALID_RECIPIENT\\\");\\n\\n        __ERC20_init(name, symbol);\\n        __ERC20Capped_init_unchained(initialSupply);\\n\\n        _mint(initialRecipient, initialSupply);\\n    }\\n}\\n\"\r\n    },\r\n    \"/Users/svancoller/Development/bloXroute/egl/contracts/interfaces/IEglGenesis.sol\": {\r\n      \"content\": \"pragma solidity 0.6.6;\\n\\ninterface IEglGenesis {\\n    function owner() external view returns(address);\\n    function cumulativeBalance() external view returns(uint);\\n    function canContribute() external view returns(bool);\\n    function canWithdraw() external view returns(bool);\\n    function contributors(address contributor) external view returns(uint, uint, uint, uint);\\n}\"\r\n    },\r\n    \"/Users/svancoller/Development/bloXroute/egl/contracts/libraries/Math.sol\": {\r\n      \"content\": \"pragma solidity ^0.6.0;\\n\\nlibrary Math {\\n    /**\\n     * @dev Returns max value of 2 unsigned ints\\n     */\\n    function umax(uint a, uint b) internal pure returns (uint) {\\n        return a >= b ? a : b;\\n    }\\n\\n    /**\\n     * @dev Returns min value of 2 unsigned ints\\n     */\\n    function umin(uint a, uint b) internal pure returns (uint) {\\n        return a < b ? a : b;\\n    }\\n\\n    /**\\n     * @dev Returns max value of 2 signed ints\\n     */\\n    function max(int a, int b) internal pure returns (int) {\\n        return a >= b ? a : b;\\n    }\\n\\n    /**\\n     * @dev Returns min value of 2 signed ints\\n     */\\n    function min(int a, int b) internal pure returns (int) {\\n        return a < b ? a : b;\\n    }\\n\\n    /**\\n     * @dev Returns the positive delta between 2 unsigned ints\\n     */\\n    function udelta(uint a, uint b) internal pure returns (uint) {\\n        return a > b ? a - b : b - a;\\n    } \\n    /**\\n     * @dev Returns the positive delta between 2 signed ints\\n     */\\n    function delta(int a, int b) internal pure returns (int) {\\n        return a > b ? a - b : b - a;\\n    } \\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts-upgradeable/GSN/ContextUpgradeable.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity >=0.6.0 <0.8.0;\\nimport \\\"../proxy/Initializable.sol\\\";\\n\\n/*\\n * @dev Provides information about the current execution context, including the\\n * sender of the transaction and its data. While these are generally available\\n * via msg.sender and msg.data, they should not be accessed in such a direct\\n * manner, since when dealing with GSN meta-transactions the account sending and\\n * paying for execution may not be the actual sender (as far as an application\\n * is concerned).\\n *\\n * This contract is only required for intermediate, library-like contracts.\\n */\\nabstract contract ContextUpgradeable is Initializable {\\n    function __Context_init() internal initializer {\\n        __Context_init_unchained();\\n    }\\n\\n    function __Context_init_unchained() internal initializer {\\n    }\\n    function _msgSender() internal view virtual returns (address payable) {\\n        return msg.sender;\\n    }\\n\\n    function _msgData() internal view virtual returns (bytes memory) {\\n        this; // silence state mutability warning without generating bytecode - see https://github.com/ethereum/solidity/issues/2691\\n        return msg.data;\\n    }\\n    uint256[50] private __gap;\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity >=0.6.0 <0.8.0;\\n\\nimport \\\"../GSN/ContextUpgradeable.sol\\\";\\nimport \\\"../proxy/Initializable.sol\\\";\\n/**\\n * @dev Contract module which provides a basic access control mechanism, where\\n * there is an account (an owner) that can be granted exclusive access to\\n * specific functions.\\n *\\n * By default, the owner account will be the one that deploys the contract. This\\n * can later be changed with {transferOwnership}.\\n *\\n * This module is used through inheritance. It will make available the modifier\\n * `onlyOwner`, which can be applied to your functions to restrict their use to\\n * the owner.\\n */\\nabstract contract OwnableUpgradeable is Initializable, ContextUpgradeable {\\n    address private _owner;\\n\\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\\n\\n    /**\\n     * @dev Initializes the contract setting the deployer as the initial owner.\\n     */\\n    function __Ownable_init() internal initializer {\\n        __Context_init_unchained();\\n        __Ownable_init_unchained();\\n    }\\n\\n    function __Ownable_init_unchained() internal initializer {\\n        address msgSender = _msgSender();\\n        _owner = msgSender;\\n        emit OwnershipTransferred(address(0), msgSender);\\n    }\\n\\n    /**\\n     * @dev Returns the address of the current owner.\\n     */\\n    function owner() public view returns (address) {\\n        return _owner;\\n    }\\n\\n    /**\\n     * @dev Throws if called by any account other than the owner.\\n     */\\n    modifier onlyOwner() {\\n        require(_owner == _msgSender(), \\\"Ownable: caller is not the owner\\\");\\n        _;\\n    }\\n\\n    /**\\n     * @dev Leaves the contract without owner. It will not be possible to call\\n     * `onlyOwner` functions anymore. Can only be called by the current owner.\\n     *\\n     * NOTE: Renouncing ownership will leave the contract without an owner,\\n     * thereby removing any functionality that is only available to the owner.\\n     */\\n    function renounceOwnership() public virtual onlyOwner {\\n        emit OwnershipTransferred(_owner, address(0));\\n        _owner = address(0);\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Can only be called by the current owner.\\n     */\\n    function transferOwnership(address newOwner) public virtual onlyOwner {\\n        require(newOwner != address(0), \\\"Ownable: new owner is the zero address\\\");\\n        emit OwnershipTransferred(_owner, newOwner);\\n        _owner = newOwner;\\n    }\\n    uint256[49] private __gap;\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts-upgradeable/math/SafeMathUpgradeable.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity >=0.6.0 <0.8.0;\\n\\n/**\\n * @dev Wrappers over Solidity's arithmetic operations with added overflow\\n * checks.\\n *\\n * Arithmetic operations in Solidity wrap on overflow. This can easily result\\n * in bugs, because programmers usually assume that an overflow raises an\\n * error, which is the standard behavior in high level programming languages.\\n * `SafeMath` restores this intuition by reverting the transaction when an\\n * operation overflows.\\n *\\n * Using this library instead of the unchecked operations eliminates an entire\\n * class of bugs, so it's recommended to use it always.\\n */\\nlibrary SafeMathUpgradeable {\\n    /**\\n     * @dev Returns the addition of two unsigned integers, reverting on\\n     * overflow.\\n     *\\n     * Counterpart to Solidity's `+` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Addition cannot overflow.\\n     */\\n    function add(uint256 a, uint256 b) internal pure returns (uint256) {\\n        uint256 c = a + b;\\n        require(c >= a, \\\"SafeMath: addition overflow\\\");\\n\\n        return c;\\n    }\\n\\n    /**\\n     * @dev Returns the subtraction of two unsigned integers, reverting on\\n     * overflow (when the result is negative).\\n     *\\n     * Counterpart to Solidity's `-` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Subtraction cannot overflow.\\n     */\\n    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return sub(a, b, \\\"SafeMath: subtraction overflow\\\");\\n    }\\n\\n    /**\\n     * @dev Returns the subtraction of two unsigned integers, reverting with custom message on\\n     * overflow (when the result is negative).\\n     *\\n     * Counterpart to Solidity's `-` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Subtraction cannot overflow.\\n     */\\n    function sub(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\\n        require(b <= a, errorMessage);\\n        uint256 c = a - b;\\n\\n        return c;\\n    }\\n\\n    /**\\n     * @dev Returns the multiplication of two unsigned integers, reverting on\\n     * overflow.\\n     *\\n     * Counterpart to Solidity's `*` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Multiplication cannot overflow.\\n     */\\n    function mul(uint256 a, uint256 b) internal pure returns (uint256) {\\n        // Gas optimization: this is cheaper than requiring 'a' not being zero, but the\\n        // benefit is lost if 'b' is also tested.\\n        // See: https://github.com/OpenZeppelin/openzeppelin-contracts/pull/522\\n        if (a == 0) {\\n            return 0;\\n        }\\n\\n        uint256 c = a * b;\\n        require(c / a == b, \\\"SafeMath: multiplication overflow\\\");\\n\\n        return c;\\n    }\\n\\n    /**\\n     * @dev Returns the integer division of two unsigned integers. Reverts on\\n     * division by zero. The result is rounded towards zero.\\n     *\\n     * Counterpart to Solidity's `/` operator. Note: this function uses a\\n     * `revert` opcode (which leaves remaining gas untouched) while Solidity\\n     * uses an invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Requirements:\\n     *\\n     * - The divisor cannot be zero.\\n     */\\n    function div(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return div(a, b, \\\"SafeMath: division by zero\\\");\\n    }\\n\\n    /**\\n     * @dev Returns the integer division of two unsigned integers. Reverts with custom message on\\n     * division by zero. The result is rounded towards zero.\\n     *\\n     * Counterpart to Solidity's `/` operator. Note: this function uses a\\n     * `revert` opcode (which leaves remaining gas untouched) while Solidity\\n     * uses an invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Requirements:\\n     *\\n     * - The divisor cannot be zero.\\n     */\\n    function div(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\\n        require(b > 0, errorMessage);\\n        uint256 c = a / b;\\n        // assert(a == b * c + a % b); // There is no case in which this doesn't hold\\n\\n        return c;\\n    }\\n\\n    /**\\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\\n     * Reverts when dividing by zero.\\n     *\\n     * Counterpart to Solidity's `%` operator. This function uses a `revert`\\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\\n     * invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Requirements:\\n     *\\n     * - The divisor cannot be zero.\\n     */\\n    function mod(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return mod(a, b, \\\"SafeMath: modulo by zero\\\");\\n    }\\n\\n    /**\\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\\n     * Reverts with custom message when dividing by zero.\\n     *\\n     * Counterpart to Solidity's `%` operator. This function uses a `revert`\\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\\n     * invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Requirements:\\n     *\\n     * - The divisor cannot be zero.\\n     */\\n    function mod(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\\n        require(b != 0, errorMessage);\\n        return a % b;\\n    }\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts-upgradeable/math/SignedSafeMathUpgradeable.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity >=0.6.0 <0.8.0;\\n\\n/**\\n * @title SignedSafeMath\\n * @dev Signed math operations with safety checks that revert on error.\\n */\\nlibrary SignedSafeMathUpgradeable {\\n    int256 constant private _INT256_MIN = -2**255;\\n\\n    /**\\n     * @dev Returns the multiplication of two signed integers, reverting on\\n     * overflow.\\n     *\\n     * Counterpart to Solidity's `*` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Multiplication cannot overflow.\\n     */\\n    function mul(int256 a, int256 b) internal pure returns (int256) {\\n        // Gas optimization: this is cheaper than requiring 'a' not being zero, but the\\n        // benefit is lost if 'b' is also tested.\\n        // See: https://github.com/OpenZeppelin/openzeppelin-contracts/pull/522\\n        if (a == 0) {\\n            return 0;\\n        }\\n\\n        require(!(a == -1 && b == _INT256_MIN), \\\"SignedSafeMath: multiplication overflow\\\");\\n\\n        int256 c = a * b;\\n        require(c / a == b, \\\"SignedSafeMath: multiplication overflow\\\");\\n\\n        return c;\\n    }\\n\\n    /**\\n     * @dev Returns the integer division of two signed integers. Reverts on\\n     * division by zero. The result is rounded towards zero.\\n     *\\n     * Counterpart to Solidity's `/` operator. Note: this function uses a\\n     * `revert` opcode (which leaves remaining gas untouched) while Solidity\\n     * uses an invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Requirements:\\n     *\\n     * - The divisor cannot be zero.\\n     */\\n    function div(int256 a, int256 b) internal pure returns (int256) {\\n        require(b != 0, \\\"SignedSafeMath: division by zero\\\");\\n        require(!(b == -1 && a == _INT256_MIN), \\\"SignedSafeMath: division overflow\\\");\\n\\n        int256 c = a / b;\\n\\n        return c;\\n    }\\n\\n    /**\\n     * @dev Returns the subtraction of two signed integers, reverting on\\n     * overflow.\\n     *\\n     * Counterpart to Solidity's `-` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Subtraction cannot overflow.\\n     */\\n    function sub(int256 a, int256 b) internal pure returns (int256) {\\n        int256 c = a - b;\\n        require((b >= 0 && c <= a) || (b < 0 && c > a), \\\"SignedSafeMath: subtraction overflow\\\");\\n\\n        return c;\\n    }\\n\\n    /**\\n     * @dev Returns the addition of two signed integers, reverting on\\n     * overflow.\\n     *\\n     * Counterpart to Solidity's `+` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Addition cannot overflow.\\n     */\\n    function add(int256 a, int256 b) internal pure returns (int256) {\\n        int256 c = a + b;\\n        require((b >= 0 && c >= a) || (b < 0 && c < a), \\\"SignedSafeMath: addition overflow\\\");\\n\\n        return c;\\n    }\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts-upgradeable/proxy/Initializable.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\n// solhint-disable-next-line compiler-version\\npragma solidity >=0.4.24 <0.8.0;\\n\\n\\n/**\\n * @dev This is a base contract to aid in writing upgradeable contracts, or any kind of contract that will be deployed\\n * behind a proxy. Since a proxied contract can't have a constructor, it's common to move constructor logic to an\\n * external initializer function, usually called `initialize`. It then becomes necessary to protect this initializer\\n * function so it can only be called once. The {initializer} modifier provided by this contract will have this effect.\\n * \\n * TIP: To avoid leaving the proxy in an uninitialized state, the initializer function should be called as early as\\n * possible by providing the encoded function call as the `_data` argument to {UpgradeableProxy-constructor}.\\n * \\n * CAUTION: When used with inheritance, manual care must be taken to not invoke a parent initializer twice, or to ensure\\n * that all initializers are idempotent. This is not verified automatically as constructors are by Solidity.\\n */\\nabstract contract Initializable {\\n\\n    /**\\n     * @dev Indicates that the contract has been initialized.\\n     */\\n    bool private _initialized;\\n\\n    /**\\n     * @dev Indicates that the contract is in the process of being initialized.\\n     */\\n    bool private _initializing;\\n\\n    /**\\n     * @dev Modifier to protect an initializer function from being invoked twice.\\n     */\\n    modifier initializer() {\\n        require(_initializing || _isConstructor() || !_initialized, \\\"Initializable: contract is already initialized\\\");\\n\\n        bool isTopLevelCall = !_initializing;\\n        if (isTopLevelCall) {\\n            _initializing = true;\\n            _initialized = true;\\n        }\\n\\n        _;\\n\\n        if (isTopLevelCall) {\\n            _initializing = false;\\n        }\\n    }\\n\\n    /// @dev Returns true if and only if the function is running in the constructor\\n    function _isConstructor() private view returns (bool) {\\n        // extcodesize checks the size of the code stored in an address, and\\n        // address returns the current address. Since the code is still not\\n        // deployed when running a constructor, any checks on its code size will\\n        // yield zero, making it an effective way to detect if a contract is\\n        // under construction or not.\\n        address self = address(this);\\n        uint256 cs;\\n        // solhint-disable-next-line no-inline-assembly\\n        assembly { cs := extcodesize(self) }\\n        return cs == 0;\\n    }\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts-upgradeable/token/ERC20/ERC20CappedUpgradeable.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity >=0.6.0 <0.8.0;\\n\\nimport \\\"./ERC20Upgradeable.sol\\\";\\nimport \\\"../../proxy/Initializable.sol\\\";\\n\\n/**\\n * @dev Extension of {ERC20} that adds a cap to the supply of tokens.\\n */\\nabstract contract ERC20CappedUpgradeable is Initializable, ERC20Upgradeable {\\n    using SafeMathUpgradeable for uint256;\\n\\n    uint256 private _cap;\\n\\n    /**\\n     * @dev Sets the value of the `cap`. This value is immutable, it can only be\\n     * set once during construction.\\n     */\\n    function __ERC20Capped_init(uint256 cap_) internal initializer {\\n        __Context_init_unchained();\\n        __ERC20Capped_init_unchained(cap_);\\n    }\\n\\n    function __ERC20Capped_init_unchained(uint256 cap_) internal initializer {\\n        require(cap_ > 0, \\\"ERC20Capped: cap is 0\\\");\\n        _cap = cap_;\\n    }\\n\\n    /**\\n     * @dev Returns the cap on the token's total supply.\\n     */\\n    function cap() public view returns (uint256) {\\n        return _cap;\\n    }\\n\\n    /**\\n     * @dev See {ERC20-_beforeTokenTransfer}.\\n     *\\n     * Requirements:\\n     *\\n     * - minted tokens must not cause the total supply to go over the cap.\\n     */\\n    function _beforeTokenTransfer(address from, address to, uint256 amount) internal virtual override {\\n        super._beforeTokenTransfer(from, to, amount);\\n\\n        if (from == address(0)) { // When minting tokens\\n            require(totalSupply().add(amount) <= _cap, \\\"ERC20Capped: cap exceeded\\\");\\n        }\\n    }\\n    uint256[49] private __gap;\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts-upgradeable/token/ERC20/ERC20Upgradeable.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity >=0.6.0 <0.8.0;\\n\\nimport \\\"../../GSN/ContextUpgradeable.sol\\\";\\nimport \\\"./IERC20Upgradeable.sol\\\";\\nimport \\\"../../math/SafeMathUpgradeable.sol\\\";\\nimport \\\"../../proxy/Initializable.sol\\\";\\n\\n/**\\n * @dev Implementation of the {IERC20} interface.\\n *\\n * This implementation is agnostic to the way tokens are created. This means\\n * that a supply mechanism has to be added in a derived contract using {_mint}.\\n * For a generic mechanism see {ERC20PresetMinterPauser}.\\n *\\n * TIP: For a detailed writeup see our guide\\n * https://forum.zeppelin.solutions/t/how-to-implement-erc20-supply-mechanisms/226[How\\n * to implement supply mechanisms].\\n *\\n * We have followed general OpenZeppelin guidelines: functions revert instead\\n * of returning `false` on failure. This behavior is nonetheless conventional\\n * and does not conflict with the expectations of ERC20 applications.\\n *\\n * Additionally, an {Approval} event is emitted on calls to {transferFrom}.\\n * This allows applications to reconstruct the allowance for all accounts just\\n * by listening to said events. Other implementations of the EIP may not emit\\n * these events, as it isn't required by the specification.\\n *\\n * Finally, the non-standard {decreaseAllowance} and {increaseAllowance}\\n * functions have been added to mitigate the well-known issues around setting\\n * allowances. See {IERC20-approve}.\\n */\\ncontract ERC20Upgradeable is Initializable, ContextUpgradeable, IERC20Upgradeable {\\n    using SafeMathUpgradeable for uint256;\\n\\n    mapping (address => uint256) private _balances;\\n\\n    mapping (address => mapping (address => uint256)) private _allowances;\\n\\n    uint256 private _totalSupply;\\n\\n    string private _name;\\n    string private _symbol;\\n    uint8 private _decimals;\\n\\n    /**\\n     * @dev Sets the values for {name} and {symbol}, initializes {decimals} with\\n     * a default value of 18.\\n     *\\n     * To select a different value for {decimals}, use {_setupDecimals}.\\n     *\\n     * All three of these values are immutable: they can only be set once during\\n     * construction.\\n     */\\n    function __ERC20_init(string memory name_, string memory symbol_) internal initializer {\\n        __Context_init_unchained();\\n        __ERC20_init_unchained(name_, symbol_);\\n    }\\n\\n    function __ERC20_init_unchained(string memory name_, string memory symbol_) internal initializer {\\n        _name = name_;\\n        _symbol = symbol_;\\n        _decimals = 18;\\n    }\\n\\n    /**\\n     * @dev Returns the name of the token.\\n     */\\n    function name() public view returns (string memory) {\\n        return _name;\\n    }\\n\\n    /**\\n     * @dev Returns the symbol of the token, usually a shorter version of the\\n     * name.\\n     */\\n    function symbol() public view returns (string memory) {\\n        return _symbol;\\n    }\\n\\n    /**\\n     * @dev Returns the number of decimals used to get its user representation.\\n     * For example, if `decimals` equals `2`, a balance of `505` tokens should\\n     * be displayed to a user as `5,05` (`505 / 10 ** 2`).\\n     *\\n     * Tokens usually opt for a value of 18, imitating the relationship between\\n     * Ether and Wei. This is the value {ERC20} uses, unless {_setupDecimals} is\\n     * called.\\n     *\\n     * NOTE: This information is only used for _display_ purposes: it in\\n     * no way affects any of the arithmetic of the contract, including\\n     * {IERC20-balanceOf} and {IERC20-transfer}.\\n     */\\n    function decimals() public view returns (uint8) {\\n        return _decimals;\\n    }\\n\\n    /**\\n     * @dev See {IERC20-totalSupply}.\\n     */\\n    function totalSupply() public view override returns (uint256) {\\n        return _totalSupply;\\n    }\\n\\n    /**\\n     * @dev See {IERC20-balanceOf}.\\n     */\\n    function balanceOf(address account) public view override returns (uint256) {\\n        return _balances[account];\\n    }\\n\\n    /**\\n     * @dev See {IERC20-transfer}.\\n     *\\n     * Requirements:\\n     *\\n     * - `recipient` cannot be the zero address.\\n     * - the caller must have a balance of at least `amount`.\\n     */\\n    function transfer(address recipient, uint256 amount) public virtual override returns (bool) {\\n        _transfer(_msgSender(), recipient, amount);\\n        return true;\\n    }\\n\\n    /**\\n     * @dev See {IERC20-allowance}.\\n     */\\n    function allowance(address owner, address spender) public view virtual override returns (uint256) {\\n        return _allowances[owner][spender];\\n    }\\n\\n    /**\\n     * @dev See {IERC20-approve}.\\n     *\\n     * Requirements:\\n     *\\n     * - `spender` cannot be the zero address.\\n     */\\n    function approve(address spender, uint256 amount) public virtual override returns (bool) {\\n        _approve(_msgSender(), spender, amount);\\n        return true;\\n    }\\n\\n    /**\\n     * @dev See {IERC20-transferFrom}.\\n     *\\n     * Emits an {Approval} event indicating the updated allowance. This is not\\n     * required by the EIP. See the note at the beginning of {ERC20}.\\n     *\\n     * Requirements:\\n     *\\n     * - `sender` and `recipient` cannot be the zero address.\\n     * - `sender` must have a balance of at least `amount`.\\n     * - the caller must have allowance for ``sender``'s tokens of at least\\n     * `amount`.\\n     */\\n    function transferFrom(address sender, address recipient, uint256 amount) public virtual override returns (bool) {\\n        _transfer(sender, recipient, amount);\\n        _approve(sender, _msgSender(), _allowances[sender][_msgSender()].sub(amount, \\\"ERC20: transfer amount exceeds allowance\\\"));\\n        return true;\\n    }\\n\\n    /**\\n     * @dev Atomically increases the allowance granted to `spender` by the caller.\\n     *\\n     * This is an alternative to {approve} that can be used as a mitigation for\\n     * problems described in {IERC20-approve}.\\n     *\\n     * Emits an {Approval} event indicating the updated allowance.\\n     *\\n     * Requirements:\\n     *\\n     * - `spender` cannot be the zero address.\\n     */\\n    function increaseAllowance(address spender, uint256 addedValue) public virtual returns (bool) {\\n        _approve(_msgSender(), spender, _allowances[_msgSender()][spender].add(addedValue));\\n        return true;\\n    }\\n\\n    /**\\n     * @dev Atomically decreases the allowance granted to `spender` by the caller.\\n     *\\n     * This is an alternative to {approve} that can be used as a mitigation for\\n     * problems described in {IERC20-approve}.\\n     *\\n     * Emits an {Approval} event indicating the updated allowance.\\n     *\\n     * Requirements:\\n     *\\n     * - `spender` cannot be the zero address.\\n     * - `spender` must have allowance for the caller of at least\\n     * `subtractedValue`.\\n     */\\n    function decreaseAllowance(address spender, uint256 subtractedValue) public virtual returns (bool) {\\n        _approve(_msgSender(), spender, _allowances[_msgSender()][spender].sub(subtractedValue, \\\"ERC20: decreased allowance below zero\\\"));\\n        return true;\\n    }\\n\\n    /**\\n     * @dev Moves tokens `amount` from `sender` to `recipient`.\\n     *\\n     * This is internal function is equivalent to {transfer}, and can be used to\\n     * e.g. implement automatic token fees, slashing mechanisms, etc.\\n     *\\n     * Emits a {Transfer} event.\\n     *\\n     * Requirements:\\n     *\\n     * - `sender` cannot be the zero address.\\n     * - `recipient` cannot be the zero address.\\n     * - `sender` must have a balance of at least `amount`.\\n     */\\n    function _transfer(address sender, address recipient, uint256 amount) internal virtual {\\n        require(sender != address(0), \\\"ERC20: transfer from the zero address\\\");\\n        require(recipient != address(0), \\\"ERC20: transfer to the zero address\\\");\\n\\n        _beforeTokenTransfer(sender, recipient, amount);\\n\\n        _balances[sender] = _balances[sender].sub(amount, \\\"ERC20: transfer amount exceeds balance\\\");\\n        _balances[recipient] = _balances[recipient].add(amount);\\n        emit Transfer(sender, recipient, amount);\\n    }\\n\\n    /** @dev Creates `amount` tokens and assigns them to `account`, increasing\\n     * the total supply.\\n     *\\n     * Emits a {Transfer} event with `from` set to the zero address.\\n     *\\n     * Requirements:\\n     *\\n     * - `to` cannot be the zero address.\\n     */\\n    function _mint(address account, uint256 amount) internal virtual {\\n        require(account != address(0), \\\"ERC20: mint to the zero address\\\");\\n\\n        _beforeTokenTransfer(address(0), account, amount);\\n\\n        _totalSupply = _totalSupply.add(amount);\\n        _balances[account] = _balances[account].add(amount);\\n        emit Transfer(address(0), account, amount);\\n    }\\n\\n    /**\\n     * @dev Destroys `amount` tokens from `account`, reducing the\\n     * total supply.\\n     *\\n     * Emits a {Transfer} event with `to` set to the zero address.\\n     *\\n     * Requirements:\\n     *\\n     * - `account` cannot be the zero address.\\n     * - `account` must have at least `amount` tokens.\\n     */\\n    function _burn(address account, uint256 amount) internal virtual {\\n        require(account != address(0), \\\"ERC20: burn from the zero address\\\");\\n\\n        _beforeTokenTransfer(account, address(0), amount);\\n\\n        _balances[account] = _balances[account].sub(amount, \\\"ERC20: burn amount exceeds balance\\\");\\n        _totalSupply = _totalSupply.sub(amount);\\n        emit Transfer(account, address(0), amount);\\n    }\\n\\n    /**\\n     * @dev Sets `amount` as the allowance of `spender` over the `owner` s tokens.\\n     *\\n     * This internal function is equivalent to `approve`, and can be used to\\n     * e.g. set automatic allowances for certain subsystems, etc.\\n     *\\n     * Emits an {Approval} event.\\n     *\\n     * Requirements:\\n     *\\n     * - `owner` cannot be the zero address.\\n     * - `spender` cannot be the zero address.\\n     */\\n    function _approve(address owner, address spender, uint256 amount) internal virtual {\\n        require(owner != address(0), \\\"ERC20: approve from the zero address\\\");\\n        require(spender != address(0), \\\"ERC20: approve to the zero address\\\");\\n\\n        _allowances[owner][spender] = amount;\\n        emit Approval(owner, spender, amount);\\n    }\\n\\n    /**\\n     * @dev Sets {decimals} to a value other than the default one of 18.\\n     *\\n     * WARNING: This function should only be called from the constructor. Most\\n     * applications that interact with token contracts will not expect\\n     * {decimals} to ever change, and may work incorrectly if it does.\\n     */\\n    function _setupDecimals(uint8 decimals_) internal {\\n        _decimals = decimals_;\\n    }\\n\\n    /**\\n     * @dev Hook that is called before any transfer of tokens. This includes\\n     * minting and burning.\\n     *\\n     * Calling conditions:\\n     *\\n     * - when `from` and `to` are both non-zero, `amount` of ``from``'s tokens\\n     * will be to transferred to `to`.\\n     * - when `from` is zero, `amount` tokens will be minted for `to`.\\n     * - when `to` is zero, `amount` of ``from``'s tokens will be burned.\\n     * - `from` and `to` are never both zero.\\n     *\\n     * To learn more about hooks, head to xref:ROOT:extending-contracts.adoc#using-hooks[Using Hooks].\\n     */\\n    function _beforeTokenTransfer(address from, address to, uint256 amount) internal virtual { }\\n    uint256[44] private __gap;\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts-upgradeable/token/ERC20/IERC20Upgradeable.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity >=0.6.0 <0.8.0;\\n\\n/**\\n * @dev Interface of the ERC20 standard as defined in the EIP.\\n */\\ninterface IERC20Upgradeable {\\n    /**\\n     * @dev Returns the amount of tokens in existence.\\n     */\\n    function totalSupply() external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the amount of tokens owned by `account`.\\n     */\\n    function balanceOf(address account) external view returns (uint256);\\n\\n    /**\\n     * @dev Moves `amount` tokens from the caller's account to `recipient`.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transfer(address recipient, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Returns the remaining number of tokens that `spender` will be\\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\\n     * zero by default.\\n     *\\n     * This value changes when {approve} or {transferFrom} are called.\\n     */\\n    function allowance(address owner, address spender) external view returns (uint256);\\n\\n    /**\\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\\n     * that someone may use both the old and the new allowance by unfortunate\\n     * transaction ordering. One possible solution to mitigate this race\\n     * condition is to first reduce the spender's allowance to 0 and set the\\n     * desired value afterwards:\\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address spender, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Moves `amount` tokens from `sender` to `recipient` using the\\n     * allowance mechanism. `amount` is then deducted from the caller's\\n     * allowance.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(address sender, address recipient, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\\n     * another (`to`).\\n     *\\n     * Note that `value` may be zero.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 value);\\n\\n    /**\\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\\n     * a call to {approve}. `value` is the new allowance.\\n     */\\n    event Approval(address indexed owner, address indexed spender, uint256 value);\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts-upgradeable/utils/PausableUpgradeable.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity >=0.6.0 <0.8.0;\\n\\nimport \\\"../GSN/ContextUpgradeable.sol\\\";\\nimport \\\"../proxy/Initializable.sol\\\";\\n\\n/**\\n * @dev Contract module which allows children to implement an emergency stop\\n * mechanism that can be triggered by an authorized account.\\n *\\n * This module is used through inheritance. It will make available the\\n * modifiers `whenNotPaused` and `whenPaused`, which can be applied to\\n * the functions of your contract. Note that they will not be pausable by\\n * simply including this module, only once the modifiers are put in place.\\n */\\nabstract contract PausableUpgradeable is Initializable, ContextUpgradeable {\\n    /**\\n     * @dev Emitted when the pause is triggered by `account`.\\n     */\\n    event Paused(address account);\\n\\n    /**\\n     * @dev Emitted when the pause is lifted by `account`.\\n     */\\n    event Unpaused(address account);\\n\\n    bool private _paused;\\n\\n    /**\\n     * @dev Initializes the contract in unpaused state.\\n     */\\n    function __Pausable_init() internal initializer {\\n        __Context_init_unchained();\\n        __Pausable_init_unchained();\\n    }\\n\\n    function __Pausable_init_unchained() internal initializer {\\n        _paused = false;\\n    }\\n\\n    /**\\n     * @dev Returns true if the contract is paused, and false otherwise.\\n     */\\n    function paused() public view returns (bool) {\\n        return _paused;\\n    }\\n\\n    /**\\n     * @dev Modifier to make a function callable only when the contract is not paused.\\n     *\\n     * Requirements:\\n     *\\n     * - The contract must not be paused.\\n     */\\n    modifier whenNotPaused() {\\n        require(!_paused, \\\"Pausable: paused\\\");\\n        _;\\n    }\\n\\n    /**\\n     * @dev Modifier to make a function callable only when the contract is paused.\\n     *\\n     * Requirements:\\n     *\\n     * - The contract must be paused.\\n     */\\n    modifier whenPaused() {\\n        require(_paused, \\\"Pausable: not paused\\\");\\n        _;\\n    }\\n\\n    /**\\n     * @dev Triggers stopped state.\\n     *\\n     * Requirements:\\n     *\\n     * - The contract must not be paused.\\n     */\\n    function _pause() internal virtual whenNotPaused {\\n        _paused = true;\\n        emit Paused(_msgSender());\\n    }\\n\\n    /**\\n     * @dev Returns to normal state.\\n     *\\n     * Requirements:\\n     *\\n     * - The contract must be paused.\\n     */\\n    function _unpause() internal virtual whenPaused {\\n        _paused = false;\\n        emit Unpaused(_msgSender());\\n    }\\n    uint256[49] private __gap;\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts-upgradeable/utils/ReentrancyGuardUpgradeable.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity >=0.6.0 <0.8.0;\\nimport \\\"../proxy/Initializable.sol\\\";\\n\\n/**\\n * @dev Contract module that helps prevent reentrant calls to a function.\\n *\\n * Inheriting from `ReentrancyGuard` will make the {nonReentrant} modifier\\n * available, which can be applied to functions to make sure there are no nested\\n * (reentrant) calls to them.\\n *\\n * Note that because there is a single `nonReentrant` guard, functions marked as\\n * `nonReentrant` may not call one another. This can be worked around by making\\n * those functions `private`, and then adding `external` `nonReentrant` entry\\n * points to them.\\n *\\n * TIP: If you would like to learn more about reentrancy and alternative ways\\n * to protect against it, check out our blog post\\n * https://blog.openzeppelin.com/reentrancy-after-istanbul/[Reentrancy After Istanbul].\\n */\\nabstract contract ReentrancyGuardUpgradeable is Initializable {\\n    // Booleans are more expensive than uint256 or any type that takes up a full\\n    // word because each write operation emits an extra SLOAD to first read the\\n    // slot's contents, replace the bits taken up by the boolean, and then write\\n    // back. This is the compiler's defense against contract upgrades and\\n    // pointer aliasing, and it cannot be disabled.\\n\\n    // The values being non-zero value makes deployment a bit more expensive,\\n    // but in exchange the refund on every call to nonReentrant will be lower in\\n    // amount. Since refunds are capped to a percentage of the total\\n    // transaction's gas, it is best to keep them low in cases like this one, to\\n    // increase the likelihood of the full refund coming into effect.\\n    uint256 private constant _NOT_ENTERED = 1;\\n    uint256 private constant _ENTERED = 2;\\n\\n    uint256 private _status;\\n\\n    function __ReentrancyGuard_init() internal initializer {\\n        __ReentrancyGuard_init_unchained();\\n    }\\n\\n    function __ReentrancyGuard_init_unchained() internal initializer {\\n        _status = _NOT_ENTERED;\\n    }\\n\\n    /**\\n     * @dev Prevents a contract from calling itself, directly or indirectly.\\n     * Calling a `nonReentrant` function from another `nonReentrant`\\n     * function is not supported. It is possible to prevent this from happening\\n     * by making the `nonReentrant` function external, and make it call a\\n     * `private` function that does the actual work.\\n     */\\n    modifier nonReentrant() {\\n        // On the first call to nonReentrant, _notEntered will be true\\n        require(_status != _ENTERED, \\\"ReentrancyGuard: reentrant call\\\");\\n\\n        // Any calls to nonReentrant after this point will fail\\n        _status = _ENTERED;\\n\\n        _;\\n\\n        // By storing the original value once again, a refund is triggered (see\\n        // https://eips.ethereum.org/EIPS/eip-2200)\\n        _status = _NOT_ENTERED;\\n    }\\n    uint256[49] private __gap;\\n}\\n\"\r\n    }\r\n  },\r\n  \"settings\": {\r\n    \"remappings\": [],\r\n    \"optimizer\": {\r\n      \"enabled\": true,\r\n      \"runs\": 1000\r\n    },\r\n    \"evmVersion\": \"istanbul\",\r\n    \"libraries\": {},\r\n    \"outputSelection\": {\r\n      \"*\": {\r\n        \"*\": [\r\n          \"evm.bytecode\",\r\n          \"evm.deployedBytecode\",\r\n          \"abi\"\r\n        ]\r\n      }\r\n    }\r\n  }\r\n}}","ABI":"[{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"blockNumber\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint16\",\"name\":\"currentEpoch\",\"type\":\"uint16\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"remainingPoolReward\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"int256\",\"name\":\"blockGasLimit\",\"type\":\"int256\"},{\"indexed\":false,\"internalType\":\"int256\",\"name\":\"desiredEgl\",\"type\":\"int256\"},{\"indexed\":false,\"internalType\":\"int256\",\"name\":\"tallyVotesGasLimit\",\"type\":\"int256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"proximityRewardPercent\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"totalRewardPercent\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"blockReward\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"date\",\"type\":\"uint256\"}],\"name\":\"BlockRewardCalculated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"caller\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"creatorRewardAddress\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amountClaimed\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"lastSerializedEgl\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"remainingCreatorReward\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint16\",\"name\":\"currentEpoch\",\"type\":\"uint16\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"date\",\"type\":\"uint256\"}],\"name\":\"CreatorRewardsClaimed\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"deployer\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"eglContract\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"eglToken\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"genesisContract\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"balancerToken\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"totalGenesisEth\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"ethEglRatio\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"ethBptRatio\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"minLiquidityTokensLockup\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"firstEpochStartDate\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"votingPauseSeconds\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"epochLength\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"date\",\"type\":\"uint256\"}],\"name\":\"Initialized\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"Paused\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"caller\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"coinbaseAddress\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"blockNumber\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"int256\",\"name\":\"blockGasLimit\",\"type\":\"int256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"blockReward\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"date\",\"type\":\"uint256\"}],\"name\":\"PoolRewardsSwept\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"caller\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"currentSerializedEgl\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"poolTokensDue\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"poolTokens\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"firstEgl\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"lastEgl\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"eglReleaseDate\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"date\",\"type\":\"uint256\"}],\"name\":\"PoolTokensWithdrawn\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"caller\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"gasTarget\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"eglAmount\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"date\",\"type\":\"uint256\"}],\"name\":\"ReVote\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"seedAccount\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"seedAmount\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"remainingSeederBalance\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"date\",\"type\":\"uint256\"}],\"name\":\"SeedAccountAdded\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"seedAddress\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"individualSeedAmount\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"releaseDate\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"date\",\"type\":\"uint256\"}],\"name\":\"SeedAccountClaimed\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"currentEpoch\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"secondsSinceEglStart\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"timePassedPercentage\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"serializedEgl\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"maxSupply\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"date\",\"type\":\"uint256\"}],\"name\":\"SerializedEglCalculated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"caller\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amountContributed\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"gasTarget\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"lockDuration\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"ethEglRatio\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"ethBptRatio\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"bonusEglsReceived\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"poolTokensReceived\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"remainingSupporterBalance\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"remainingBptBalance\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"date\",\"type\":\"uint256\"}],\"name\":\"SupporterTokensClaimed\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"Unpaused\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"caller\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint16\",\"name\":\"currentEpoch\",\"type\":\"uint16\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"gasTarget\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"eglAmount\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint8\",\"name\":\"lockupDuration\",\"type\":\"uint8\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"releaseDate\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"epochVoteWeightSum\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"epochGasTargetSum\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"epochVoterRewardSum\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"epochTotalVotes\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"date\",\"type\":\"uint256\"}],\"name\":\"Vote\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"caller\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint16\",\"name\":\"currentEpoch\",\"type\":\"uint16\"},{\"indexed\":false,\"internalType\":\"int256\",\"name\":\"desiredEgl\",\"type\":\"int256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"voteThreshold\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"actualVotePercentage\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"int256\",\"name\":\"baselineEgl\",\"type\":\"int256\"},{\"indexed\":false,\"internalType\":\"int256\",\"name\":\"initialEgl\",\"type\":\"int256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"timeSinceFirstEpoch\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"gracePeriodSeconds\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"date\",\"type\":\"uint256\"}],\"name\":\"VoteThresholdFailed\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"caller\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint16\",\"name\":\"currentEpoch\",\"type\":\"uint16\"},{\"indexed\":false,\"internalType\":\"int256\",\"name\":\"desiredEgl\",\"type\":\"int256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"voteThreshold\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"actualVotePercentage\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"int256\",\"name\":\"gasLimitSum\",\"type\":\"int256\"},{\"indexed\":false,\"internalType\":\"int256\",\"name\":\"voteCount\",\"type\":\"int256\"},{\"indexed\":false,\"internalType\":\"int256\",\"name\":\"baselineEgl\",\"type\":\"int256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"date\",\"type\":\"uint256\"}],\"name\":\"VoteThresholdMet\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"voter\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint16\",\"name\":\"currentEpoch\",\"type\":\"uint16\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"voterReward\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"epochVoterReward\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"voteWeight\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"rewardMultiplier\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"weeksDiv\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"epochVoterRewardSum\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"remainingVoterRewards\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"date\",\"type\":\"uint256\"}],\"name\":\"VoterRewardCalculated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"caller\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint16\",\"name\":\"currentEpoch\",\"type\":\"uint16\"},{\"indexed\":false,\"internalType\":\"int256\",\"name\":\"desiredEgl\",\"type\":\"int256\"},{\"indexed\":false,\"internalType\":\"int256\",\"name\":\"averageGasTarget\",\"type\":\"int256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"votingThreshold\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"actualVotePercentage\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"int256\",\"name\":\"baselineEgl\",\"type\":\"int256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"tokensInCirculation\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"date\",\"type\":\"uint256\"}],\"name\":\"VotesTallied\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"caller\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint16\",\"name\":\"currentEpoch\",\"type\":\"uint16\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"tokensLocked\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"rewardTokens\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"gasTarget\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"epochVoterRewardSum\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"epochTotalVotes\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"epochVoteWeightSum\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"epochGasTargetSum\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"date\",\"type\":\"uint256\"}],\"name\":\"Withdraw\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_seedAccount\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_seedAmount\",\"type\":\"uint256\"}],\"name\":\"addSeedAccount\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"baselineEgl\",\"outputs\":[{\"internalType\":\"int256\",\"name\":\"\",\"type\":\"int256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_gasTarget\",\"type\":\"uint256\"},{\"internalType\":\"uint8\",\"name\":\"_lockupDuration\",\"type\":\"uint8\"}],\"name\":\"claimSeederEgls\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_gasTarget\",\"type\":\"uint256\"},{\"internalType\":\"uint8\",\"name\":\"_lockupDuration\",\"type\":\"uint8\"}],\"name\":\"claimSupporterEgls\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"creatorEglsTotal\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"currentEpoch\",\"outputs\":[{\"internalType\":\"uint16\",\"name\":\"\",\"type\":\"uint16\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"currentEpochStartDate\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"desiredEgl\",\"outputs\":[{\"internalType\":\"int256\",\"name\":\"\",\"type\":\"int256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"gasTargetSum\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"initialEgl\",\"outputs\":[{\"internalType\":\"int256\",\"name\":\"\",\"type\":\"int256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_token\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_poolToken\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_genesis\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_currentEpochStartDate\",\"type\":\"uint256\"},{\"internalType\":\"uint24\",\"name\":\"_votingPauseSeconds\",\"type\":\"uint24\"},{\"internalType\":\"uint32\",\"name\":\"_epochLength\",\"type\":\"uint32\"},{\"internalType\":\"address[]\",\"name\":\"_seedAccounts\",\"type\":\"address[]\"},{\"internalType\":\"uint256[]\",\"name\":\"_seedAmounts\",\"type\":\"uint256[]\"},{\"internalType\":\"address\",\"name\":\"_creatorRewardsAccount\",\"type\":\"address\"}],\"name\":\"initialize\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"liquidityEglMatchingTotal\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"pauseEgl\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"paused\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_gasTarget\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_eglAmount\",\"type\":\"uint256\"},{\"internalType\":\"uint8\",\"name\":\"_lockupDuration\",\"type\":\"uint8\"}],\"name\":\"reVote\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"seeders\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"supporters\",\"outputs\":[{\"internalType\":\"uint32\",\"name\":\"claimed\",\"type\":\"uint32\"},{\"internalType\":\"uint256\",\"name\":\"poolTokens\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"firstEgl\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"lastEgl\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"sweepPoolRewards\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"tallyVotes\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"tallyVotesGasLimit\",\"outputs\":[{\"internalType\":\"int256\",\"name\":\"\",\"type\":\"int256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"tokensInCirculation\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"unpauseEgl\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_gasTarget\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_eglAmount\",\"type\":\"uint256\"},{\"internalType\":\"uint8\",\"name\":\"_lockupDuration\",\"type\":\"uint8\"}],\"name\":\"vote\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"voteWeightsSum\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"voterRewardSums\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"voters\",\"outputs\":[{\"internalType\":\"uint8\",\"name\":\"lockupDuration\",\"type\":\"uint8\"},{\"internalType\":\"uint16\",\"name\":\"voteEpoch\",\"type\":\"uint16\"},{\"internalType\":\"uint256\",\"name\":\"releaseDate\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"tokensLocked\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"gasTarget\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"votesTotal\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"withdraw\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"withdrawPoolTokens\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"stateMutability\":\"payable\",\"type\":\"receive\"}]","ContractName":"EglContract","CompilerVersion":"v0.6.6+commit.6c089d02","OptimizationUsed":"1","Runs":"1000","ConstructorArguments":"","EVMVersion":"Default","Library":"","LicenseType":"","Proxy":"0","Implementation":"","SwarmSource":""}]}