{"status":"1","message":"OK","result":[{"SourceCode":"// File: @openzeppelin/contracts/utils/Context.sol\r\n\r\n// SPDX-License-Identifier: MIT\r\n\r\npragma solidity ^0.8.0;\r\n\r\n/*\r\n * @dev Provides information about the current execution context, including the\r\n * sender of the transaction and its data. While these are generally available\r\n * via msg.sender and msg.data, they should not be accessed in such a direct\r\n * manner, since when dealing with meta-transactions the account sending and\r\n * paying for execution may not be the actual sender (as far as an application\r\n * is concerned).\r\n *\r\n * This contract is only required for intermediate, library-like contracts.\r\n */\r\nabstract contract Context {\r\n    function _msgSender() internal view virtual returns (address) {\r\n        return msg.sender;\r\n    }\r\n\r\n    function _msgData() internal view virtual returns (bytes calldata) {\r\n        this; // silence state mutability warning without generating bytecode - see https://github.com/ethereum/solidity/issues/2691\r\n        return msg.data;\r\n    }\r\n}\r\n\r\n// File: @openzeppelin/contracts/access/Ownable.sol\r\n\r\n\r\n\r\npragma solidity ^0.8.0;\r\n\r\n/**\r\n * @dev Contract module which provides a basic access control mechanism, where\r\n * there is an account (an owner) that can be granted exclusive access to\r\n * specific functions.\r\n *\r\n * By default, the owner account will be the one that deploys the contract. This\r\n * can later be changed with {transferOwnership}.\r\n *\r\n * This module is used through inheritance. It will make available the modifier\r\n * `onlyOwner`, which can be applied to your functions to restrict their use to\r\n * the owner.\r\n */\r\nabstract contract Ownable is Context {\r\n    address private _owner;\r\n\r\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\r\n\r\n    /**\r\n     * @dev Initializes the contract setting the deployer as the initial owner.\r\n     */\r\n    constructor () {\r\n        address msgSender = _msgSender();\r\n        _owner = msgSender;\r\n        emit OwnershipTransferred(address(0), msgSender);\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the address of the current owner.\r\n     */\r\n    function owner() public view virtual returns (address) {\r\n        return _owner;\r\n    }\r\n\r\n    /**\r\n     * @dev Throws if called by any account other than the owner.\r\n     */\r\n    modifier onlyOwner() {\r\n        require(owner() == _msgSender(), \"Ownable: caller is not the owner\");\r\n        _;\r\n    }\r\n\r\n    /**\r\n     * @dev Leaves the contract without owner. It will not be possible to call\r\n     * `onlyOwner` functions anymore. Can only be called by the current owner.\r\n     *\r\n     * NOTE: Renouncing ownership will leave the contract without an owner,\r\n     * thereby removing any functionality that is only available to the owner.\r\n     */\r\n    function renounceOwnership() public virtual onlyOwner {\r\n        emit OwnershipTransferred(_owner, address(0));\r\n        _owner = address(0);\r\n    }\r\n\r\n    /**\r\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\r\n     * Can only be called by the current owner.\r\n     */\r\n    function transferOwnership(address newOwner) public virtual onlyOwner {\r\n        require(newOwner != address(0), \"Ownable: new owner is the zero address\");\r\n        emit OwnershipTransferred(_owner, newOwner);\r\n        _owner = newOwner;\r\n    }\r\n}\r\n\r\n// File: @openzeppelin/contracts/security/Pausable.sol\r\n\r\n\r\n\r\npragma solidity ^0.8.0;\r\n\r\n\r\n/**\r\n * @dev Contract module which allows children to implement an emergency stop\r\n * mechanism that can be triggered by an authorized account.\r\n *\r\n * This module is used through inheritance. It will make available the\r\n * modifiers `whenNotPaused` and `whenPaused`, which can be applied to\r\n * the functions of your contract. Note that they will not be pausable by\r\n * simply including this module, only once the modifiers are put in place.\r\n */\r\nabstract contract Pausable is Context {\r\n    /**\r\n     * @dev Emitted when the pause is triggered by `account`.\r\n     */\r\n    event Paused(address account);\r\n\r\n    /**\r\n     * @dev Emitted when the pause is lifted by `account`.\r\n     */\r\n    event Unpaused(address account);\r\n\r\n    bool private _paused;\r\n\r\n    /**\r\n     * @dev Initializes the contract in unpaused state.\r\n     */\r\n    constructor () {\r\n        _paused = false;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns true if the contract is paused, and false otherwise.\r\n     */\r\n    function paused() public view virtual returns (bool) {\r\n        return _paused;\r\n    }\r\n\r\n    /**\r\n     * @dev Modifier to make a function callable only when the contract is not paused.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - The contract must not be paused.\r\n     */\r\n    modifier whenNotPaused() {\r\n        require(!paused(), \"Pausable: paused\");\r\n        _;\r\n    }\r\n\r\n    /**\r\n     * @dev Modifier to make a function callable only when the contract is paused.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - The contract must be paused.\r\n     */\r\n    modifier whenPaused() {\r\n        require(paused(), \"Pausable: not paused\");\r\n        _;\r\n    }\r\n\r\n    /**\r\n     * @dev Triggers stopped state.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - The contract must not be paused.\r\n     */\r\n    function _pause() internal virtual whenNotPaused {\r\n        _paused = true;\r\n        emit Paused(_msgSender());\r\n    }\r\n\r\n    /**\r\n     * @dev Returns to normal state.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - The contract must be paused.\r\n     */\r\n    function _unpause() internal virtual whenPaused {\r\n        _paused = false;\r\n        emit Unpaused(_msgSender());\r\n    }\r\n}\r\n\r\n// File: @openzeppelin/contracts/security/ReentrancyGuard.sol\r\n\r\n\r\n\r\npragma solidity ^0.8.0;\r\n\r\n/**\r\n * @dev Contract module that helps prevent reentrant calls to a function.\r\n *\r\n * Inheriting from `ReentrancyGuard` will make the {nonReentrant} modifier\r\n * available, which can be applied to functions to make sure there are no nested\r\n * (reentrant) calls to them.\r\n *\r\n * Note that because there is a single `nonReentrant` guard, functions marked as\r\n * `nonReentrant` may not call one another. This can be worked around by making\r\n * those functions `private`, and then adding `external` `nonReentrant` entry\r\n * points to them.\r\n *\r\n * TIP: If you would like to learn more about reentrancy and alternative ways\r\n * to protect against it, check out our blog post\r\n * https://blog.openzeppelin.com/reentrancy-after-istanbul/[Reentrancy After Istanbul].\r\n */\r\nabstract contract ReentrancyGuard {\r\n    // Booleans are more expensive than uint256 or any type that takes up a full\r\n    // word because each write operation emits an extra SLOAD to first read the\r\n    // slot's contents, replace the bits taken up by the boolean, and then write\r\n    // back. This is the compiler's defense against contract upgrades and\r\n    // pointer aliasing, and it cannot be disabled.\r\n\r\n    // The values being non-zero value makes deployment a bit more expensive,\r\n    // but in exchange the refund on every call to nonReentrant will be lower in\r\n    // amount. Since refunds are capped to a percentage of the total\r\n    // transaction's gas, it is best to keep them low in cases like this one, to\r\n    // increase the likelihood of the full refund coming into effect.\r\n    uint256 private constant _NOT_ENTERED = 1;\r\n    uint256 private constant _ENTERED = 2;\r\n\r\n    uint256 private _status;\r\n\r\n    constructor () {\r\n        _status = _NOT_ENTERED;\r\n    }\r\n\r\n    /**\r\n     * @dev Prevents a contract from calling itself, directly or indirectly.\r\n     * Calling a `nonReentrant` function from another `nonReentrant`\r\n     * function is not supported. It is possible to prevent this from happening\r\n     * by making the `nonReentrant` function external, and make it call a\r\n     * `private` function that does the actual work.\r\n     */\r\n    modifier nonReentrant() {\r\n        // On the first call to nonReentrant, _notEntered will be true\r\n        require(_status != _ENTERED, \"ReentrancyGuard: reentrant call\");\r\n\r\n        // Any calls to nonReentrant after this point will fail\r\n        _status = _ENTERED;\r\n\r\n        _;\r\n\r\n        // By storing the original value once again, a refund is triggered (see\r\n        // https://eips.ethereum.org/EIPS/eip-2200)\r\n        _status = _NOT_ENTERED;\r\n    }\r\n}\r\n\r\n// File: @openzeppelin/contracts/utils/Address.sol\r\n\r\n\r\n\r\npragma solidity ^0.8.0;\r\n\r\n/**\r\n * @dev Collection of functions related to the address type\r\n */\r\nlibrary Address {\r\n    /**\r\n     * @dev Returns true if `account` is a contract.\r\n     *\r\n     * [IMPORTANT]\r\n     * ====\r\n     * It is unsafe to assume that an address for which this function returns\r\n     * false is an externally-owned account (EOA) and not a contract.\r\n     *\r\n     * Among others, `isContract` will return false for the following\r\n     * types of addresses:\r\n     *\r\n     *  - an externally-owned account\r\n     *  - a contract in construction\r\n     *  - an address where a contract will be created\r\n     *  - an address where a contract lived, but was destroyed\r\n     * ====\r\n     */\r\n    function isContract(address account) internal view returns (bool) {\r\n        // This method relies on extcodesize, which returns 0 for contracts in\r\n        // construction, since the code is only stored at the end of the\r\n        // constructor execution.\r\n\r\n        uint256 size;\r\n        // solhint-disable-next-line no-inline-assembly\r\n        assembly { size := extcodesize(account) }\r\n        return size > 0;\r\n    }\r\n\r\n    /**\r\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\r\n     * `recipient`, forwarding all available gas and reverting on errors.\r\n     *\r\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\r\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\r\n     * imposed by `transfer`, making them unable to receive funds via\r\n     * `transfer`. {sendValue} removes this limitation.\r\n     *\r\n     * https://diligence.consensys.net/posts/2019/09/stop-using-soliditys-transfer-now/[Learn more].\r\n     *\r\n     * IMPORTANT: because control is transferred to `recipient`, care must be\r\n     * taken to not create reentrancy vulnerabilities. Consider using\r\n     * {ReentrancyGuard} or the\r\n     * https://solidity.readthedocs.io/en/v0.5.11/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\r\n     */\r\n    function sendValue(address payable recipient, uint256 amount) internal {\r\n        require(address(this).balance >= amount, \"Address: insufficient balance\");\r\n\r\n        // solhint-disable-next-line avoid-low-level-calls, avoid-call-value\r\n        (bool success, ) = recipient.call{ value: amount }(\"\");\r\n        require(success, \"Address: unable to send value, recipient may have reverted\");\r\n    }\r\n\r\n    /**\r\n     * @dev Performs a Solidity function call using a low level `call`. A\r\n     * plain`call` is an unsafe replacement for a function call: use this\r\n     * function instead.\r\n     *\r\n     * If `target` reverts with a revert reason, it is bubbled up by this\r\n     * function (like regular Solidity function calls).\r\n     *\r\n     * Returns the raw returned data. To convert to the expected return value,\r\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - `target` must be a contract.\r\n     * - calling `target` with `data` must not revert.\r\n     *\r\n     * _Available since v3.1._\r\n     */\r\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\r\n      return functionCall(target, data, \"Address: low-level call failed\");\r\n    }\r\n\r\n    /**\r\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\r\n     * `errorMessage` as a fallback revert reason when `target` reverts.\r\n     *\r\n     * _Available since v3.1._\r\n     */\r\n    function functionCall(address target, bytes memory data, string memory errorMessage) internal returns (bytes memory) {\r\n        return functionCallWithValue(target, data, 0, errorMessage);\r\n    }\r\n\r\n    /**\r\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\r\n     * but also transferring `value` wei to `target`.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - the calling contract must have an ETH balance of at least `value`.\r\n     * - the called Solidity function must be `payable`.\r\n     *\r\n     * _Available since v3.1._\r\n     */\r\n    function functionCallWithValue(address target, bytes memory data, uint256 value) internal returns (bytes memory) {\r\n        return functionCallWithValue(target, data, value, \"Address: low-level call with value failed\");\r\n    }\r\n\r\n    /**\r\n     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\r\n     * with `errorMessage` as a fallback revert reason when `target` reverts.\r\n     *\r\n     * _Available since v3.1._\r\n     */\r\n    function functionCallWithValue(address target, bytes memory data, uint256 value, string memory errorMessage) internal returns (bytes memory) {\r\n        require(address(this).balance >= value, \"Address: insufficient balance for call\");\r\n        require(isContract(target), \"Address: call to non-contract\");\r\n\r\n        // solhint-disable-next-line avoid-low-level-calls\r\n        (bool success, bytes memory returndata) = target.call{ value: value }(data);\r\n        return _verifyCallResult(success, returndata, errorMessage);\r\n    }\r\n\r\n    /**\r\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\r\n     * but performing a static call.\r\n     *\r\n     * _Available since v3.3._\r\n     */\r\n    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\r\n        return functionStaticCall(target, data, \"Address: low-level static call failed\");\r\n    }\r\n\r\n    /**\r\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\r\n     * but performing a static call.\r\n     *\r\n     * _Available since v3.3._\r\n     */\r\n    function functionStaticCall(address target, bytes memory data, string memory errorMessage) internal view returns (bytes memory) {\r\n        require(isContract(target), \"Address: static call to non-contract\");\r\n\r\n        // solhint-disable-next-line avoid-low-level-calls\r\n        (bool success, bytes memory returndata) = target.staticcall(data);\r\n        return _verifyCallResult(success, returndata, errorMessage);\r\n    }\r\n\r\n    /**\r\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\r\n     * but performing a delegate call.\r\n     *\r\n     * _Available since v3.4._\r\n     */\r\n    function functionDelegateCall(address target, bytes memory data) internal returns (bytes memory) {\r\n        return functionDelegateCall(target, data, \"Address: low-level delegate call failed\");\r\n    }\r\n\r\n    /**\r\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\r\n     * but performing a delegate call.\r\n     *\r\n     * _Available since v3.4._\r\n     */\r\n    function functionDelegateCall(address target, bytes memory data, string memory errorMessage) internal returns (bytes memory) {\r\n        require(isContract(target), \"Address: delegate call to non-contract\");\r\n\r\n        // solhint-disable-next-line avoid-low-level-calls\r\n        (bool success, bytes memory returndata) = target.delegatecall(data);\r\n        return _verifyCallResult(success, returndata, errorMessage);\r\n    }\r\n\r\n    function _verifyCallResult(bool success, bytes memory returndata, string memory errorMessage) private pure returns(bytes memory) {\r\n        if (success) {\r\n            return returndata;\r\n        } else {\r\n            // Look for revert reason and bubble it up if present\r\n            if (returndata.length > 0) {\r\n                // The easiest way to bubble the revert reason is using memory via assembly\r\n\r\n                // solhint-disable-next-line no-inline-assembly\r\n                assembly {\r\n                    let returndata_size := mload(returndata)\r\n                    revert(add(32, returndata), returndata_size)\r\n                }\r\n            } else {\r\n                revert(errorMessage);\r\n            }\r\n        }\r\n    }\r\n}\r\n\r\n// File: @openzeppelin/contracts/utils/introspection/IERC165.sol\r\n\r\n\r\n\r\npragma solidity ^0.8.0;\r\n\r\n/**\r\n * @dev Interface of the ERC165 standard, as defined in the\r\n * https://eips.ethereum.org/EIPS/eip-165[EIP].\r\n *\r\n * Implementers can declare support of contract interfaces, which can then be\r\n * queried by others ({ERC165Checker}).\r\n *\r\n * For an implementation, see {ERC165}.\r\n */\r\ninterface IERC165 {\r\n    /**\r\n     * @dev Returns true if this contract implements the interface defined by\r\n     * `interfaceId`. See the corresponding\r\n     * https://eips.ethereum.org/EIPS/eip-165#how-interfaces-are-identified[EIP section]\r\n     * to learn more about how these ids are created.\r\n     *\r\n     * This function call must use less than 30 000 gas.\r\n     */\r\n    function supportsInterface(bytes4 interfaceId) external view returns (bool);\r\n}\r\n\r\n// File: @openzeppelin/contracts/token/ERC1155/IERC1155Receiver.sol\r\n\r\n\r\n\r\npragma solidity ^0.8.0;\r\n\r\n\r\n/**\r\n * @dev _Available since v3.1._\r\n */\r\ninterface IERC1155Receiver is IERC165 {\r\n\r\n    /**\r\n        @dev Handles the receipt of a single ERC1155 token type. This function is\r\n        called at the end of a `safeTransferFrom` after the balance has been updated.\r\n        To accept the transfer, this must return\r\n        `bytes4(keccak256(\"onERC1155Received(address,address,uint256,uint256,bytes)\"))`\r\n        (i.e. 0xf23a6e61, or its own function selector).\r\n        @param operator The address which initiated the transfer (i.e. msg.sender)\r\n        @param from The address which previously owned the token\r\n        @param id The ID of the token being transferred\r\n        @param value The amount of tokens being transferred\r\n        @param data Additional data with no specified format\r\n        @return `bytes4(keccak256(\"onERC1155Received(address,address,uint256,uint256,bytes)\"))` if transfer is allowed\r\n    */\r\n    function onERC1155Received(\r\n        address operator,\r\n        address from,\r\n        uint256 id,\r\n        uint256 value,\r\n        bytes calldata data\r\n    )\r\n        external\r\n        returns(bytes4);\r\n\r\n    /**\r\n        @dev Handles the receipt of a multiple ERC1155 token types. This function\r\n        is called at the end of a `safeBatchTransferFrom` after the balances have\r\n        been updated. To accept the transfer(s), this must return\r\n        `bytes4(keccak256(\"onERC1155BatchReceived(address,address,uint256[],uint256[],bytes)\"))`\r\n        (i.e. 0xbc197c81, or its own function selector).\r\n        @param operator The address which initiated the batch transfer (i.e. msg.sender)\r\n        @param from The address which previously owned the token\r\n        @param ids An array containing ids of each token being transferred (order and length must match values array)\r\n        @param values An array containing amounts of each token being transferred (order and length must match ids array)\r\n        @param data Additional data with no specified format\r\n        @return `bytes4(keccak256(\"onERC1155BatchReceived(address,address,uint256[],uint256[],bytes)\"))` if transfer is allowed\r\n    */\r\n    function onERC1155BatchReceived(\r\n        address operator,\r\n        address from,\r\n        uint256[] calldata ids,\r\n        uint256[] calldata values,\r\n        bytes calldata data\r\n    )\r\n        external\r\n        returns(bytes4);\r\n}\r\n\r\n// File: @openzeppelin/contracts/utils/introspection/ERC165.sol\r\n\r\n\r\n\r\npragma solidity ^0.8.0;\r\n\r\n\r\n/**\r\n * @dev Implementation of the {IERC165} interface.\r\n *\r\n * Contracts that want to implement ERC165 should inherit from this contract and override {supportsInterface} to check\r\n * for the additional interface id that will be supported. For example:\r\n *\r\n * ```solidity\r\n * function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {\r\n *     return interfaceId == type(MyInterface).interfaceId || super.supportsInterface(interfaceId);\r\n * }\r\n * ```\r\n *\r\n * Alternatively, {ERC165Storage} provides an easier to use but more expensive implementation.\r\n */\r\nabstract contract ERC165 is IERC165 {\r\n    /**\r\n     * @dev See {IERC165-supportsInterface}.\r\n     */\r\n    function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {\r\n        return interfaceId == type(IERC165).interfaceId;\r\n    }\r\n}\r\n\r\n// File: @openzeppelin/contracts/token/ERC1155/utils/ERC1155Receiver.sol\r\n\r\n\r\n\r\npragma solidity ^0.8.0;\r\n\r\n\r\n\r\n/**\r\n * @dev _Available since v3.1._\r\n */\r\nabstract contract ERC1155Receiver is ERC165, IERC1155Receiver {\r\n    /**\r\n     * @dev See {IERC165-supportsInterface}.\r\n     */\r\n    function supportsInterface(bytes4 interfaceId) public view virtual override(ERC165, IERC165) returns (bool) {\r\n        return interfaceId == type(IERC1155Receiver).interfaceId\r\n            || super.supportsInterface(interfaceId);\r\n    }\r\n}\r\n\r\n// File: @openzeppelin/contracts/token/ERC1155/utils/ERC1155Holder.sol\r\n\r\n\r\n\r\npragma solidity ^0.8.0;\r\n\r\n\r\n/**\r\n * @dev _Available since v3.1._\r\n */\r\ncontract ERC1155Holder is ERC1155Receiver {\r\n    function onERC1155Received(address, address, uint256, uint256, bytes memory) public virtual override returns (bytes4) {\r\n        return this.onERC1155Received.selector;\r\n    }\r\n\r\n    function onERC1155BatchReceived(address, address, uint256[] memory, uint256[] memory, bytes memory) public virtual override returns (bytes4) {\r\n        return this.onERC1155BatchReceived.selector;\r\n    }\r\n}\r\n\r\n// File: @openzeppelin/contracts/token/ERC20/extensions/draft-IERC20Permit.sol\r\n\r\n\r\n\r\npragma solidity ^0.8.0;\r\n\r\n/**\r\n * @dev Interface of the ERC20 Permit extension allowing approvals to be made via signatures, as defined in\r\n * https://eips.ethereum.org/EIPS/eip-2612[EIP-2612].\r\n *\r\n * Adds the {permit} method, which can be used to change an account's ERC20 allowance (see {IERC20-allowance}) by\r\n * presenting a message signed by the account. By not relying on {IERC20-approve}, the token holder account doesn't\r\n * need to send a transaction, and thus is not required to hold Ether at all.\r\n */\r\ninterface IERC20Permit {\r\n    /**\r\n     * @dev Sets `value` as the allowance of `spender` over ``owner``'s tokens,\r\n     * given ``owner``'s signed approval.\r\n     *\r\n     * IMPORTANT: The same issues {IERC20-approve} has related to transaction\r\n     * ordering also apply here.\r\n     *\r\n     * Emits an {Approval} event.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - `spender` cannot be the zero address.\r\n     * - `deadline` must be a timestamp in the future.\r\n     * - `v`, `r` and `s` must be a valid `secp256k1` signature from `owner`\r\n     * over the EIP712-formatted function arguments.\r\n     * - the signature must use ``owner``'s current nonce (see {nonces}).\r\n     *\r\n     * For more information on the signature format, see the\r\n     * https://eips.ethereum.org/EIPS/eip-2612#specification[relevant EIP\r\n     * section].\r\n     */\r\n    function permit(address owner, address spender, uint256 value, uint256 deadline, uint8 v, bytes32 r, bytes32 s) external;\r\n\r\n    /**\r\n     * @dev Returns the current nonce for `owner`. This value must be\r\n     * included whenever a signature is generated for {permit}.\r\n     *\r\n     * Every successful call to {permit} increases ``owner``'s nonce by one. This\r\n     * prevents a signature from being used multiple times.\r\n     */\r\n    function nonces(address owner) external view returns (uint256);\r\n\r\n    /**\r\n     * @dev Returns the domain separator used in the encoding of the signature for {permit}, as defined by {EIP712}.\r\n     */\r\n    // solhint-disable-next-line func-name-mixedcase\r\n    function DOMAIN_SEPARATOR() external view returns (bytes32);\r\n}\r\n\r\n// File: @openzeppelin/contracts/token/ERC1155/IERC1155.sol\r\n\r\n\r\n\r\npragma solidity ^0.8.0;\r\n\r\n\r\n/**\r\n * @dev Required interface of an ERC1155 compliant contract, as defined in the\r\n * https://eips.ethereum.org/EIPS/eip-1155[EIP].\r\n *\r\n * _Available since v3.1._\r\n */\r\ninterface IERC1155 is IERC165 {\r\n    /**\r\n     * @dev Emitted when `value` tokens of token type `id` are transferred from `from` to `to` by `operator`.\r\n     */\r\n    event TransferSingle(address indexed operator, address indexed from, address indexed to, uint256 id, uint256 value);\r\n\r\n    /**\r\n     * @dev Equivalent to multiple {TransferSingle} events, where `operator`, `from` and `to` are the same for all\r\n     * transfers.\r\n     */\r\n    event TransferBatch(address indexed operator, address indexed from, address indexed to, uint256[] ids, uint256[] values);\r\n\r\n    /**\r\n     * @dev Emitted when `account` grants or revokes permission to `operator` to transfer their tokens, according to\r\n     * `approved`.\r\n     */\r\n    event ApprovalForAll(address indexed account, address indexed operator, bool approved);\r\n\r\n    /**\r\n     * @dev Emitted when the URI for token type `id` changes to `value`, if it is a non-programmatic URI.\r\n     *\r\n     * If an {URI} event was emitted for `id`, the standard\r\n     * https://eips.ethereum.org/EIPS/eip-1155#metadata-extensions[guarantees] that `value` will equal the value\r\n     * returned by {IERC1155MetadataURI-uri}.\r\n     */\r\n    event URI(string value, uint256 indexed id);\r\n\r\n    /**\r\n     * @dev Returns the amount of tokens of token type `id` owned by `account`.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - `account` cannot be the zero address.\r\n     */\r\n    function balanceOf(address account, uint256 id) external view returns (uint256);\r\n\r\n    /**\r\n     * @dev xref:ROOT:erc1155.adoc#batch-operations[Batched] version of {balanceOf}.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - `accounts` and `ids` must have the same length.\r\n     */\r\n    function balanceOfBatch(address[] calldata accounts, uint256[] calldata ids) external view returns (uint256[] memory);\r\n\r\n    /**\r\n     * @dev Grants or revokes permission to `operator` to transfer the caller's tokens, according to `approved`,\r\n     *\r\n     * Emits an {ApprovalForAll} event.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - `operator` cannot be the caller.\r\n     */\r\n    function setApprovalForAll(address operator, bool approved) external;\r\n\r\n    /**\r\n     * @dev Returns true if `operator` is approved to transfer ``account``'s tokens.\r\n     *\r\n     * See {setApprovalForAll}.\r\n     */\r\n    function isApprovedForAll(address account, address operator) external view returns (bool);\r\n\r\n    /**\r\n     * @dev Transfers `amount` tokens of token type `id` from `from` to `to`.\r\n     *\r\n     * Emits a {TransferSingle} event.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - `to` cannot be the zero address.\r\n     * - If the caller is not `from`, it must be have been approved to spend ``from``'s tokens via {setApprovalForAll}.\r\n     * - `from` must have a balance of tokens of type `id` of at least `amount`.\r\n     * - If `to` refers to a smart contract, it must implement {IERC1155Receiver-onERC1155Received} and return the\r\n     * acceptance magic value.\r\n     */\r\n    function safeTransferFrom(address from, address to, uint256 id, uint256 amount, bytes calldata data) external;\r\n\r\n    /**\r\n     * @dev xref:ROOT:erc1155.adoc#batch-operations[Batched] version of {safeTransferFrom}.\r\n     *\r\n     * Emits a {TransferBatch} event.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - `ids` and `amounts` must have the same length.\r\n     * - If `to` refers to a smart contract, it must implement {IERC1155Receiver-onERC1155BatchReceived} and return the\r\n     * acceptance magic value.\r\n     */\r\n    function safeBatchTransferFrom(address from, address to, uint256[] calldata ids, uint256[] calldata amounts, bytes calldata data) external;\r\n}\r\n\r\n// File: contracts/OwnixNFT/IOwnixERC1155.sol\r\n\r\n\r\n\r\npragma solidity =0.8.7;\r\n\r\n\r\n\r\n/**\r\n * @title Interface for contracts conforming to Ownix ERC155\r\n */\r\ninterface IOwnixERC1155 is IERC1155 {\r\n  function getFirstTimeOwner(uint256 _tokenId) external view returns (address);\r\n}\r\n\r\n// File: @openzeppelin/contracts/token/ERC20/IERC20.sol\r\n\r\n\r\n\r\npragma solidity ^0.8.0;\r\n\r\n/**\r\n * @dev Interface of the ERC20 standard as defined in the EIP.\r\n */\r\ninterface IERC20 {\r\n    /**\r\n     * @dev Returns the amount of tokens in existence.\r\n     */\r\n    function totalSupply() external view returns (uint256);\r\n\r\n    /**\r\n     * @dev Returns the amount of tokens owned by `account`.\r\n     */\r\n    function balanceOf(address account) external view returns (uint256);\r\n\r\n    /**\r\n     * @dev Moves `amount` tokens from the caller's account to `recipient`.\r\n     *\r\n     * Returns a boolean value indicating whether the operation succeeded.\r\n     *\r\n     * Emits a {Transfer} event.\r\n     */\r\n    function transfer(address recipient, uint256 amount) external returns (bool);\r\n\r\n    /**\r\n     * @dev Returns the remaining number of tokens that `spender` will be\r\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\r\n     * zero by default.\r\n     *\r\n     * This value changes when {approve} or {transferFrom} are called.\r\n     */\r\n    function allowance(address owner, address spender) external view returns (uint256);\r\n\r\n    /**\r\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\r\n     *\r\n     * Returns a boolean value indicating whether the operation succeeded.\r\n     *\r\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\r\n     * that someone may use both the old and the new allowance by unfortunate\r\n     * transaction ordering. One possible solution to mitigate this race\r\n     * condition is to first reduce the spender's allowance to 0 and set the\r\n     * desired value afterwards:\r\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\r\n     *\r\n     * Emits an {Approval} event.\r\n     */\r\n    function approve(address spender, uint256 amount) external returns (bool);\r\n\r\n    /**\r\n     * @dev Moves `amount` tokens from `sender` to `recipient` using the\r\n     * allowance mechanism. `amount` is then deducted from the caller's\r\n     * allowance.\r\n     *\r\n     * Returns a boolean value indicating whether the operation succeeded.\r\n     *\r\n     * Emits a {Transfer} event.\r\n     */\r\n    function transferFrom(address sender, address recipient, uint256 amount) external returns (bool);\r\n\r\n    /**\r\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\r\n     * another (`to`).\r\n     *\r\n     * Note that `value` may be zero.\r\n     */\r\n    event Transfer(address indexed from, address indexed to, uint256 value);\r\n\r\n    /**\r\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\r\n     * a call to {approve}. `value` is the new allowance.\r\n     */\r\n    event Approval(address indexed owner, address indexed spender, uint256 value);\r\n}\r\n\r\n// File: contracts/OwnixToken/IOwnixERC20.sol\r\n\r\n\r\n\r\npragma solidity =0.8.7;\r\n\r\n\r\n/**\r\n * @title Interface for contracts conforming to Ownix ERC-20\r\n */\r\ninterface IOwnixERC20 is IERC20 {\r\n  function mint(address account, uint256 amount) external;\r\n}\r\n\r\n// File: contracts/OwnixMarket/IOwnixMarket.sol\r\n\r\n\r\n\r\npragma solidity =0.8.7;\r\n\r\n\r\n\r\n\r\ninterface IOwnixMarket {\r\n  struct Auction {\r\n    // nft owner address\r\n    address nftOwner;\r\n    // ERC1155 address\r\n    IOwnixERC1155 nft;\r\n    // ERC1155 token id\r\n    uint256 tokenId;\r\n    // Amount\r\n    uint256 amount;\r\n    // NFT Index\r\n    uint32 index;\r\n    // Reserve price for the list in wei\r\n    uint256 reservePrice;\r\n    // List duration\r\n    uint32 duration;\r\n    // Time when this list expires at\r\n    uint256 expiresAt;\r\n    // Bidder address\r\n    address bidder;\r\n    // Price for the bid in wei\r\n    uint256 bidPrice;\r\n    // Time when this bid create at\r\n    uint256 bidCreatedAt;\r\n  }\r\n\r\n  // EVENTS\r\n  event NFTListed(\r\n    address indexed _owner,\r\n    IOwnixERC1155 indexed _nft,\r\n    uint256 indexed _tokenId,\r\n    uint256 _amount,\r\n    uint256 _index,\r\n    uint256 _reservePrice,\r\n    uint256 _expiresAt\r\n  );\r\n\r\n  event NFTUnlisted(\r\n    address indexed _owner,\r\n    IOwnixERC1155 indexed _nft,\r\n    uint256 indexed _tokenId,\r\n    uint256 _amount,\r\n    uint256 _index\r\n  );\r\n\r\n  event ReservePriceChanged(\r\n    address indexed _owner,\r\n    IOwnixERC1155 indexed _nft,\r\n    uint256 indexed _tokenId,\r\n    uint256 _amount,\r\n    uint32 _index,\r\n    uint256 _reservePrice\r\n  );\r\n\r\n  event BidCreated(\r\n    IOwnixERC1155 indexed _nft,\r\n    uint256 indexed _tokenId,\r\n    uint256 _amount,\r\n    uint32 _index,\r\n    address indexed _bidder,\r\n    uint256 _price,\r\n    uint256 bidCreatedAt\r\n  );\r\n\r\n  event AuctionExtended(\r\n    address indexed _owner,\r\n    IOwnixERC1155 indexed _nft,\r\n    uint256 indexed _tokenId,\r\n    uint256 _amount,\r\n    uint32 _index,\r\n    uint256 _reservePrice,\r\n    uint256 _expiresAt\r\n  );\r\n\r\n  event AuctionStarted(\r\n    address _owner,\r\n    IOwnixERC1155 _nft,\r\n    uint256 _tokenId,\r\n    uint256 _amount,\r\n    uint32 _index,\r\n    uint256 _reservePrice,\r\n    uint256 _expiresAt\r\n  );\r\n\r\n  event BidAccepted(\r\n    IOwnixERC1155 indexed _nft,\r\n    uint256 indexed _tokenId,\r\n    uint256 _amount,\r\n    uint256 _index,\r\n    address _bidder,\r\n    address indexed _seller,\r\n    uint256 _price\r\n  );\r\n\r\n  event InflationPerMillionChanged(uint256 _inflationFeePerMillion);\r\n  event BidFeePerMillionChanged(uint256 _bidFeePerMillion);\r\n  event OwnerSharePerMillionChanged(uint256 _ownerSharePerMillion);\r\n  event BidMinimumRaisePerMillionChanged(uint256 _bidMinimumRaisePerMillion);\r\n  event BidMinimumRaiseAmountChanged(uint256 _bidMinimumRaiseAmount);\r\n  event RoyaltiesPerMillionChanged(uint256 _royaltiesPerMillion);\r\n  event MinimumAuctionDurationChanged(uint256 _minimumAuctionDuration);\r\n  event FeeCollectorChanged(address _feeCollector);\r\n  event InflationCollectorChanged(address _inflationCollector);\r\n\r\n  /**\r\n   * @dev List NFT\r\n   * @param _tokenId - The token id\r\n   * @param _amount The amount of tokens being transferred\r\n   * @param _reservePrice The reserve price\r\n   * @param _duration The auction duration in seconds\r\n   */\r\n  function listNFT(uint256 _tokenId, uint256 _amount, uint256 _reservePrice, uint32 _duration) external;\r\n\r\n  /**\r\n   * @dev Unlist NFT\r\n   * @param _tokenId - The token id\r\n   * @param _index The index of tokens being transferred\r\n   */\r\n  function unlistNFT(uint256 _tokenId, uint32 _index) external;\r\n\r\n   /**\r\n   * @dev Change reserve price\r\n   * @param _tokenId - The token id\r\n   * @param _index - The index of tokens being transferred\r\n   * @param _reservePrice - The new reserve price\r\n   */\r\n  function changeReservePrice(uint256 _tokenId, uint32 _index, uint256 _reservePrice) external;\r\n\r\n  /**\r\n   * @dev Place a bid for an ERC1155 token.\r\n   * @notice Tokens can have multiple bids by different users.\r\n   * Users can have only one bid per token.\r\n   * If the user places a bid and has an active bid for that token,\r\n   * the older one will be replaced with the new one.\r\n   * @param _tokenId - The  token id\r\n   * @param _index - The index of tokens being transferred\r\n   * @param _price - The price for the bid\r\n   */\r\n  function placeBid(uint256 _tokenId, uint32 _index, uint256 _price) external;\r\n\r\n  /**\r\n   * @dev Place a bid for an ERC1155 token.\r\n   * @notice Tokens can have multiple bids by different users.\r\n   * Users can have only one bid per token.\r\n   * If the user places a bid and has an active bid for that token,\r\n   * the older one will be replaced with the new one.\r\n   * @param _bidder - The bidder address \r\n   * @param _tokenId - The token id\r\n   * @param _index - The index of tokens being transferred\r\n   * @param _price - The price for the bid\r\n   * @param _deadline A timestamp, the current blocktime must be less than or equal to this timestamp\r\n   * @param _v - Must produce valid secp256k1 signature from the holder along with `r` and `s`\r\n   * @param _r - Must produce valid secp256k1 signature from the holder along with `v` and `s`\r\n   * @param _s - Must produce valid secp256k1 signature from the holder along with `r` and `v`\r\n   */\r\n  function placeBidWithPermit(address _bidder, uint256 _tokenId, uint32 _index, uint256 _price, uint256 _deadline, uint8 _v, bytes32 _r, bytes32 _s) external;\r\n  \r\n /**\r\n  * @dev Finish auction\r\n  * @param _tokenId - The token id\r\n  * @param _index - The index of tokens being transferred\r\n  */\r\n  function finishAuction(uint256 _tokenId, uint32 _index) external;\r\n\r\n   /**\r\n   * @dev Sets the inflation that's we mint every transfer\r\n   * @param _inflationPerMillion - The inflation amount from 0 to 999,999\r\n   */\r\n  function setInflationPerMillion(uint256 _inflationPerMillion) external;\r\n\r\n   /**\r\n   * @dev Sets the bid fee that's charged to users to bid\r\n   * @param _bidFeePerMillion - The fee amount from 0 to 999,999\r\n   */\r\n  function setBidFeePerMillion(uint256 _bidFeePerMillion) external;\r\n\r\n   /**\r\n   * @dev Sets the share Share for the owner of the contract that's\r\n   * charged to the seller on a successful sale\r\n   * @param _ownerSharePerMillion - The amount, from 0 to 999,999\r\n   */\r\n  function setOwnerSharePerMillion(uint256 _ownerSharePerMillion) external;\r\n\r\n  /**\r\n   * @dev Sets bid minimum raise percentage value\r\n   * @param _bidMinimumRaisePerMillion - amount, from 0 to 999,999\r\n   */\r\n  function setBidMinimumRaisePerMillion(uint256 _bidMinimumRaisePerMillion) external;\r\n\r\n  /**\r\n   * @dev Sets bid minimum raise token amount value\r\n   * @param _bidMinimumRaiseAmount - The raise token amount, bigger then 0\r\n   */\r\n  function setBidMinimumRaiseAmount(uint256 _bidMinimumRaiseAmount) external;\r\n\r\n  /**\r\n   * @dev Sets the fee collector address\r\n   * @param _feeCollector - The fee collector address\r\n   */\r\n  function setFeeCollector(address _feeCollector) external;\r\n\r\n   /**\r\n   * @dev Sets the inflation collector address\r\n   * @param _inflationCollector - The fee collector address\r\n   */\r\n  function setInflationCollector(address _inflationCollector) external;\r\n\r\n   /**\r\n   * @dev Sets royalties percentage value\r\n   * @param _royaltiesPerMillion - The royalties amount, from 0 to 999,999\r\n   */\r\n  function setRoyaltiesPerMillion(uint256 _royaltiesPerMillion) external;\r\n\r\n  /**\r\n   * @dev Sets minimum auction duration\r\n   * @param _minimumAuctionDuration - The minimum auction duration, bigger then 0\r\n   */\r\n  function setMinimumAuctionDuration(uint256 _minimumAuctionDuration) external;\r\n  \r\n   /**\r\n   * @dev withdraw the erc20 tokens from the contract\r\n   * @param _withdrawAddress - The withdraw address\r\n   * @param _amount - The withdrawal amount\r\n   */\r\n  function withdrawERC20(address _withdrawAddress, uint256 _amount) external;\r\n\r\n  /**\r\n   * @dev withdraw the erc1155 tokens from the contract\r\n   * @param _tokenAddress - The address of the ERC1155 token\r\n   * @param _tokenId - The token id\r\n   * @param _withdrawAddress - The withdraw address\r\n   * @param _amount - The withdrawal amount\r\n   */\r\n  function withdrawERC1155(address _tokenAddress, uint256 _tokenId, address _withdrawAddress, uint256 _amount) external;\r\n\r\n  /**\r\n   * @dev Get auction by token id and index\r\n   * @param _tokenId - The token id\r\n   * @param _index - token index\r\n   * @return auction\r\n   */\r\n  function getAuction(uint256 _tokenId, uint32 _index) external returns (Auction memory);\r\n\r\n  /**\r\n    * @dev Triggers stopped state.\r\n    *\r\n    * Requirements:\r\n    *\r\n    * - The contract must not be paused.\r\n    */\r\n  function pause() external;\r\n\r\n  /**\r\n    * @dev Returns to normal state.\r\n    *\r\n    * Requirements:\r\n    *\r\n    * - The contract must be paused.\r\n    */\r\n  function unpause() external;\r\n}\r\n\r\n// File: contracts/OwnixMarket/OwnixMarket.sol\r\n\r\n\r\n\r\npragma solidity =0.8.7;\r\npragma abicoder v2;\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\ncontract OwnixMarket is ERC1155Holder, Ownable, Pausable, IOwnixMarket, ReentrancyGuard {\r\n  using Address for address;\r\n\r\n  uint256 public constant ONE_MILLION = 1 * 10**6;\r\n\r\n   // The ERC20 ownix token\r\n  IOwnixERC20 immutable public ownixToken;\r\n\r\n  // The ERC1155 ownix token\r\n  IOwnixERC1155 immutable public ownixNFTToken;\r\n\r\n   // The fee collector address\r\n  address public feeCollector;\r\n  \r\n  // The inflation collector address\r\n  address public inflationCollector;\r\n\r\n  // Auctions by token token id => index => auction\r\n  mapping(uint256 => mapping (uint256 => Auction)) private auctions;\r\n\r\n  uint256 public inflationPerMillion;\r\n  uint256 public bidFeePerMillion;\r\n  uint256 public ownerSharePerMillion;\r\n  uint256 public bidMinimumRaisePerMillion;\r\n  uint256 public bidMinimumRaiseAmount;\r\n  uint256 public royaltiesPerMillion;\r\n  uint256 public minimumAuctionDuration;\r\n\r\n  /**\r\n   * @dev Constructor of the contract.\r\n   * @param _ownixToken - address of the Ownix token\r\n   * @param _ownixNFTToken - address of the Ownix NFT token\r\n   * @param _owner - address of the owner for the contract\r\n   * @param _feeCollector - address of the fee collector address\r\n   * @param _inflationCollector - address of the inflation collector address\r\n   */\r\n  constructor(\r\n    address _ownixToken,\r\n    address _ownixNFTToken,\r\n    address _owner,\r\n    address _feeCollector,\r\n    address _inflationCollector,\r\n    uint256 _minimumAuctionDuration\r\n  ) Ownable() Pausable() {\r\n    require(_ownixToken != address(0), \"Can't be zero address\");\r\n    require(_ownixNFTToken != address(0), \"Can't not be zero address\");\r\n    require(_owner != address(0), \"Can't be zero address\");\r\n    require(_feeCollector != address(0), \"Can't be zero address\");\r\n    require(_inflationCollector != address(0), \"Can't be zero address\");\r\n    require(_minimumAuctionDuration > 0, \"Minimum auction duration can't be zero\");\r\n\r\n    ownixToken = IOwnixERC20(_ownixToken);\r\n    ownixNFTToken = IOwnixERC1155(_ownixNFTToken);\r\n\r\n    // Set owner\r\n    transferOwnership(_owner);\r\n    // Set fee collector address\r\n    feeCollector = _feeCollector;\r\n    // Set inflation fee collector address\r\n    inflationCollector = _inflationCollector;\r\n    // Set the minimum auction duration\r\n    minimumAuctionDuration = _minimumAuctionDuration;\r\n  }\r\n\r\n  function listNFT(uint256 _tokenId, uint256 _amount, uint256 _reservePrice, uint32 _duration) override external nonReentrant() whenNotPaused() {\r\n    require(_tokenId > 0, \"token id can't be zero\");\r\n    require(_amount > 0, \"amount can't be zero\");\r\n    require(_reservePrice > 0, \"reservePrice id can't be zero\");\r\n    require(_duration >= minimumAuctionDuration, \"duration must be bigger the minimum uction duration\");\r\n\r\n    for (uint32 i=0; i < _amount; ++i) {\r\n      uint32 index = i;\r\n      require(auctions[_tokenId][index].tokenId == 0, \"auction with the same token id is already exists\");\r\n      \r\n      auctions[_tokenId][index] = Auction({\r\n        nftOwner: msg.sender,\r\n        nft: ownixNFTToken,\r\n        tokenId: _tokenId,\r\n        amount: _amount,\r\n        index: index,\r\n        reservePrice: _reservePrice,\r\n        duration: _duration,\r\n        expiresAt: 0,\r\n        bidder: address(0),\r\n        bidPrice: 0,\r\n        bidCreatedAt: 0\r\n      });\r\n\r\n      emit NFTListed(\r\n        msg.sender,\r\n        ownixNFTToken,\r\n        _tokenId,\r\n        _amount,\r\n        index,\r\n        _reservePrice,\r\n        0\r\n      );\r\n     }\r\n     \r\n\r\n    ownixNFTToken.safeTransferFrom(\r\n      msg.sender,\r\n      address(this),\r\n      _tokenId,\r\n      _amount,\r\n      \"\"\r\n    );\r\n  }\r\n\r\n  function unlistNFT(uint256 _tokenId, uint32 _index) override external nonReentrant() whenNotPaused() {\r\n    Auction memory auction = auctions[_tokenId][_index];\r\n    require(auction.expiresAt == 0, \"Can't unlist NFT after auction started\");\r\n    require(auction.nftOwner == msg.sender,  \"Must be nft owner unlist NFT\");\r\n   \r\n    emit NFTUnlisted(\r\n     auction.nftOwner,\r\n     ownixNFTToken, \r\n     _tokenId, \r\n     1,\r\n     _index);\r\n\r\n    ownixNFTToken.safeTransferFrom(\r\n      address(this),\r\n     auction.nftOwner,\r\n      _tokenId,\r\n      1,\r\n      \"\"\r\n    );\r\n\r\n    delete auctions[_tokenId][_index];\r\n  }\r\n\r\n  function changeReservePrice(uint256 _tokenId, uint32 _index, uint256 _reservePrice) override external whenNotPaused() {\r\n    Auction memory auction = auctions[_tokenId][_index];\r\n    require(auction.expiresAt == 0, \"Can't change reserve price after auction started\");\r\n    require(auction.nftOwner == msg.sender, \"Must be nft owner to change reserve\");\r\n\r\n    auction.reservePrice = _reservePrice;\r\n\r\n    auctions[_tokenId][_index] = auction;\r\n\r\n    emit ReservePriceChanged(\r\n      msg.sender,\r\n      ownixNFTToken,\r\n      _tokenId,\r\n      1,\r\n      _index,\r\n      _reservePrice\r\n    );\r\n  }\r\n\r\n  function placeBid(uint256 _tokenId, uint32 _index, uint256 _price) override external whenNotPaused() nonReentrant() { \r\n      _placeBid(msg.sender, _tokenId, _index, _price);\r\n  }\r\n\r\n  function placeBidWithPermit(\r\n    address _bidder,\r\n    uint256 _tokenId, \r\n    uint32 _index, \r\n    uint256 _price,\r\n    uint256 _deadline,\r\n    uint8 _v,\r\n    bytes32 _r,\r\n    bytes32 _s) override external whenNotPaused() nonReentrant() {\r\n     \r\n      IERC20Permit(address(ownixToken)).permit(_bidder, address(this), _price, _deadline, _v, _r, _s);\r\n      _placeBid(_bidder, _tokenId, _index, _price);\r\n  }\r\n\r\n  function finishAuction(uint256 _tokenId, uint32 _index) override external nonReentrant() whenNotPaused() {\r\n   \r\n    Auction memory auction = auctions[_tokenId][_index];\r\n\r\n    require(auction.bidder != address(0), \"Can't finish Auction without any bids\");\r\n    require(auction.expiresAt < block.timestamp, \"Can't finish Auction before it been ended\");\r\n\r\n    uint256 saleShareAmount;\r\n    if (ownerSharePerMillion > 0) {\r\n      // Calculate sale share\r\n      saleShareAmount = auction.bidPrice * ownerSharePerMillion / ONE_MILLION;\r\n      // Transfer share amount to the bid contract\r\n      require(\r\n        ownixToken.transfer(feeCollector, saleShareAmount),\r\n        \"Transferring the share failed\"\r\n      );\r\n    }\r\n\r\n    uint256 royaltiesAmount;\r\n    if (royaltiesPerMillion > 0) {\r\n       address firstTimeOwner = ownixNFTToken.getFirstTimeOwner(auction.tokenId);\r\n       if(firstTimeOwner != auction.nftOwner) {\r\n        // Calculate royalties\r\n        royaltiesAmount = auction.bidPrice * royaltiesPerMillion / ONE_MILLION;\r\n        // Transfer royalties Owner\r\n        require(\r\n          ownixToken.transfer(firstTimeOwner, royaltiesAmount),\r\n          \"Transferring the royalties failed\"\r\n        );\r\n      }\r\n    }\r\n\r\n    // Transfer ownixToken from bidder to seller\r\n    require(\r\n      ownixToken.transfer(auction.nftOwner, auction.bidPrice - (saleShareAmount + royaltiesAmount)),\r\n      \"Transferring ownixToken to nft owner failed\"\r\n    );\r\n\r\n    if (inflationPerMillion > 0) {\r\n      // Calculate mint tokens\r\n      uint256 mintShareAmount = auction.bidPrice * inflationPerMillion / ONE_MILLION;\r\n      // Mint the new ownix tokens to the inflationCollector\r\n      ownixToken.mint(inflationCollector, mintShareAmount);\r\n    }\r\n\r\n    delete auctions[_tokenId][_index];\r\n    \r\n    // Transfer token to bidder\r\n    ownixNFTToken.safeTransferFrom(\r\n      address(this),\r\n      auction.bidder,\r\n      _tokenId,\r\n      1,\r\n      \"\");\r\n\r\n    emit BidAccepted(\r\n      ownixNFTToken,\r\n      _tokenId,\r\n      1,\r\n      auction.index,\r\n      auction.bidder,\r\n      auction.nftOwner,\r\n      auction.bidPrice\r\n    );\r\n  }\r\n\r\n  function setInflationPerMillion(uint256 _inflationPerMillion) override external onlyOwner {\r\n    require(\r\n      _inflationPerMillion < ONE_MILLION,\r\n      \"The inflation should be between 0 and 999,999\"\r\n    );\r\n\r\n    inflationPerMillion = _inflationPerMillion;\r\n    emit InflationPerMillionChanged(inflationPerMillion);\r\n  }\r\n\r\n  function setBidFeePerMillion(uint256 _bidFeePerMillion) override external onlyOwner {\r\n    require(\r\n      _bidFeePerMillion < ONE_MILLION,\r\n      \"The bid fee should be between 0 and 999,999\"\r\n    );\r\n\r\n    bidFeePerMillion = _bidFeePerMillion;\r\n    emit BidFeePerMillionChanged(bidFeePerMillion);\r\n  }\r\n\r\n  function setOwnerSharePerMillion(uint256 _ownerSharePerMillion) override external onlyOwner {\r\n    require(\r\n      _ownerSharePerMillion < ONE_MILLION,\r\n      \"The owner share should be between 0 and 999,999\"\r\n    );\r\n\r\n    ownerSharePerMillion = _ownerSharePerMillion;\r\n    emit OwnerSharePerMillionChanged(ownerSharePerMillion);\r\n  }\r\n\r\n  function setBidMinimumRaisePerMillion(uint256 _bidMinimumRaisePerMillion) override external onlyOwner {\r\n    require(\r\n      _bidMinimumRaisePerMillion < ONE_MILLION,\r\n      \"bid minimum raise should be between 0 and 999,999\"\r\n    );\r\n\r\n    bidMinimumRaisePerMillion = _bidMinimumRaisePerMillion;\r\n    emit BidMinimumRaisePerMillionChanged(bidMinimumRaisePerMillion);\r\n  }\r\n\r\n  function setBidMinimumRaiseAmount(uint256 _bidMinimumRaiseAmount) override external onlyOwner {\r\n    require(\r\n      _bidMinimumRaiseAmount > 0,\r\n      \"bid minimum raise should be bigger then 0\"\r\n    );\r\n\r\n    bidMinimumRaiseAmount = _bidMinimumRaiseAmount;\r\n    emit BidMinimumRaiseAmountChanged(_bidMinimumRaiseAmount);\r\n  }\r\n\r\n  function setFeeCollector(address _feeCollector) override external onlyOwner {\r\n    require(_feeCollector != address(0), \"address can't be the zero address\");\r\n\r\n    feeCollector = _feeCollector;\r\n    emit FeeCollectorChanged(_feeCollector);\r\n  }\r\n\r\n  function setInflationCollector(address _inflationCollector) override external onlyOwner {\r\n    require(\r\n      _inflationCollector != address(0),\r\n      \"address can't be the zero address\"\r\n    );\r\n\r\n    inflationCollector = _inflationCollector;\r\n    emit InflationCollectorChanged(_inflationCollector);\r\n  }\r\n\r\n  function setRoyaltiesPerMillion(uint256 _royaltiesPerMillion) override external onlyOwner {\r\n    require(\r\n      _royaltiesPerMillion < ONE_MILLION,\r\n      \"bid minimum raise should be between 0 and 999,999\"\r\n    );\r\n\r\n    royaltiesPerMillion = _royaltiesPerMillion;\r\n    emit RoyaltiesPerMillionChanged(_royaltiesPerMillion);\r\n  }\r\n\r\n  function setMinimumAuctionDuration(uint256 _minimumAuctionDuration) override external onlyOwner {\r\n    require(\r\n      _minimumAuctionDuration > 0,\r\n      \"Minimum auction duration should be bigger then 0\"\r\n    );\r\n\r\n    minimumAuctionDuration = _minimumAuctionDuration;\r\n    emit MinimumAuctionDurationChanged(_minimumAuctionDuration);\r\n  }\r\n\r\n  function withdrawERC20(address _withdrawAddress, uint256 _amount) override external onlyOwner {\r\n    require(\r\n      _withdrawAddress != address(0),\r\n      \"address can't be the zero address\"\r\n    );\r\n\r\n    require(\r\n      ownixToken.transfer(_withdrawAddress, _amount),\r\n      \"Withdraw failed\"\r\n    );\r\n  }\r\n\r\n  function withdrawERC1155(\r\n    address _tokenAddress,\r\n    uint256 _tokenId,\r\n    address _withdrawAddress,\r\n    uint256 _amount) override external onlyOwner {\r\n    require(\r\n      _withdrawAddress != address(0),\r\n      \"address can't be the zero address\"\r\n    );\r\n\r\n    IERC1155(_tokenAddress).safeTransferFrom(\r\n      address(this),\r\n      _withdrawAddress,\r\n      _tokenId,\r\n      _amount,\r\n      \"\"\r\n    );\r\n  }\r\n\r\n  function getAuction(uint256 _tokenId, uint32 _index) override external view returns (Auction memory)  {\r\n    return auctions[_tokenId][_index];\r\n  }\r\n\r\n  function pause() override external onlyOwner {\r\n    _pause();\r\n  }\r\n\r\n  function unpause() override external onlyOwner {\r\n    _unpause();\r\n  }\r\n\r\n\r\n  /**\r\n   * @dev Place a bid for an ERC1155 token.\r\n   * @notice Tokens can have multiple bids by different users.\r\n   * Users can have only one bid per token.\r\n   * If the user places a bid and has an active bid for that token,\r\n   * the older one will be replaced with the new one.\r\n   * @param _bidder - address the bidder address\r\n   * @param _tokenId - uint256 of the token id\r\n   * @param _index The index of tokens being transferred\r\n   * @param _price - of the price for the bid\r\n   */\r\n  function _placeBid(address _bidder, uint256 _tokenId, uint32 _index, uint256 _price) private whenNotPaused() {\r\n    Auction memory auction = auctions[_tokenId][_index];\r\n\r\n    require(auctions[_tokenId][_index].tokenId != 0, \"auction must be listed first\");\r\n    require(auction.expiresAt == 0 || auction.expiresAt > block.timestamp,\r\n      \"List has been ended, Can't place bid\"\r\n    );\r\n\r\n    require(\r\n      (_price >= (auction.bidPrice + bidMinimumRaiseAmount) ||\r\n        _price >= auction.bidPrice + (auction.bidPrice * bidMinimumRaisePerMillion / ONE_MILLION)) &&\r\n        _price >= auction.reservePrice,\r\n      \"Price should be bigger than highest bid and reserve price\"\r\n    );\r\n\r\n    \r\n    if(auction.bidder == address(0)) {\r\n      auction.expiresAt = block.timestamp + auction.duration;\r\n      auctions[_tokenId][_index] = auction;\r\n\r\n        emit AuctionStarted(\r\n          auction.nftOwner,\r\n          ownixNFTToken,\r\n          _tokenId,\r\n          auction.amount,\r\n          auction.index,\r\n          auction.reservePrice,\r\n          auction.expiresAt);\r\n    } else {\r\n      require(ownixToken.transfer(auction.bidder, auction.bidPrice), \"Refund failed\");\r\n    }\r\n\r\n    // check if place bid in the last minimum auction duration\r\n    if (auction.expiresAt - block.timestamp <= minimumAuctionDuration) {\r\n      auction.expiresAt = block.timestamp + minimumAuctionDuration;\r\n\r\n      emit AuctionExtended(\r\n        auction.nftOwner,\r\n        ownixNFTToken,\r\n        _tokenId,\r\n        auction.amount,\r\n        _index,\r\n        auction.reservePrice,\r\n        auction.expiresAt\r\n      );\r\n    }\r\n\r\n    // Transfer tokens to the market\r\n    require(\r\n      ownixToken.transferFrom(_bidder, address(this), _price),\r\n      \"Transferring the bid amount to the marketplace failed\"\r\n    );\r\n\r\n    // Check if there's a bid fee and transfer the amount to marketplace owner\r\n    if (bidFeePerMillion > 0) {\r\n      // Calculate sale share\r\n      uint256 feeAmount  = _price * bidFeePerMillion / ONE_MILLION;\r\n      require(\r\n        ownixToken.transferFrom(_bidder, feeCollector, feeAmount),\r\n        \"Transferring the bid fee to the marketplace owner failed\"\r\n      );\r\n    }\r\n\r\n    uint256 bidCreatedAt = block.timestamp;\r\n\r\n    // Save Bid\r\n    auction.bidder = _bidder;\r\n    auction.bidPrice = _price;\r\n    auction.bidCreatedAt = bidCreatedAt;\r\n\r\n    auctions[_tokenId][_index] = auction;\r\n\r\n    emit BidCreated(\r\n      ownixNFTToken,\r\n      _tokenId,\r\n      1,\r\n      _index,\r\n      _bidder,\r\n      _price,\r\n      bidCreatedAt\r\n    );\r\n  }\r\n}","ABI":"[{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_ownixToken\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_ownixNFTToken\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_owner\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_feeCollector\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_inflationCollector\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_minimumAuctionDuration\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"_owner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"contract IOwnixERC1155\",\"name\":\"_nft\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"_tokenId\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint32\",\"name\":\"_index\",\"type\":\"uint32\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"_reservePrice\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"_expiresAt\",\"type\":\"uint256\"}],\"name\":\"AuctionExtended\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"_owner\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"contract IOwnixERC1155\",\"name\":\"_nft\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"_tokenId\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint32\",\"name\":\"_index\",\"type\":\"uint32\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"_reservePrice\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"_expiresAt\",\"type\":\"uint256\"}],\"name\":\"AuctionStarted\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"contract IOwnixERC1155\",\"name\":\"_nft\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"_tokenId\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"_index\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"_bidder\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"_seller\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"_price\",\"type\":\"uint256\"}],\"name\":\"BidAccepted\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"contract IOwnixERC1155\",\"name\":\"_nft\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"_tokenId\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint32\",\"name\":\"_index\",\"type\":\"uint32\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"_bidder\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"_price\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"bidCreatedAt\",\"type\":\"uint256\"}],\"name\":\"BidCreated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"_bidFeePerMillion\",\"type\":\"uint256\"}],\"name\":\"BidFeePerMillionChanged\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"_bidMinimumRaiseAmount\",\"type\":\"uint256\"}],\"name\":\"BidMinimumRaiseAmountChanged\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"_bidMinimumRaisePerMillion\",\"type\":\"uint256\"}],\"name\":\"BidMinimumRaisePerMillionChanged\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"_feeCollector\",\"type\":\"address\"}],\"name\":\"FeeCollectorChanged\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"_inflationCollector\",\"type\":\"address\"}],\"name\":\"InflationCollectorChanged\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"_inflationFeePerMillion\",\"type\":\"uint256\"}],\"name\":\"InflationPerMillionChanged\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"_minimumAuctionDuration\",\"type\":\"uint256\"}],\"name\":\"MinimumAuctionDurationChanged\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"_owner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"contract IOwnixERC1155\",\"name\":\"_nft\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"_tokenId\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"_index\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"_reservePrice\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"_expiresAt\",\"type\":\"uint256\"}],\"name\":\"NFTListed\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"_owner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"contract IOwnixERC1155\",\"name\":\"_nft\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"_tokenId\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"_index\",\"type\":\"uint256\"}],\"name\":\"NFTUnlisted\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"_ownerSharePerMillion\",\"type\":\"uint256\"}],\"name\":\"OwnerSharePerMillionChanged\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"Paused\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"_owner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"contract IOwnixERC1155\",\"name\":\"_nft\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"_tokenId\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint32\",\"name\":\"_index\",\"type\":\"uint32\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"_reservePrice\",\"type\":\"uint256\"}],\"name\":\"ReservePriceChanged\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"_royaltiesPerMillion\",\"type\":\"uint256\"}],\"name\":\"RoyaltiesPerMillionChanged\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"Unpaused\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"ONE_MILLION\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"bidFeePerMillion\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"bidMinimumRaiseAmount\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"bidMinimumRaisePerMillion\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_tokenId\",\"type\":\"uint256\"},{\"internalType\":\"uint32\",\"name\":\"_index\",\"type\":\"uint32\"},{\"internalType\":\"uint256\",\"name\":\"_reservePrice\",\"type\":\"uint256\"}],\"name\":\"changeReservePrice\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"feeCollector\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_tokenId\",\"type\":\"uint256\"},{\"internalType\":\"uint32\",\"name\":\"_index\",\"type\":\"uint32\"}],\"name\":\"finishAuction\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_tokenId\",\"type\":\"uint256\"},{\"internalType\":\"uint32\",\"name\":\"_index\",\"type\":\"uint32\"}],\"name\":\"getAuction\",\"outputs\":[{\"components\":[{\"internalType\":\"address\",\"name\":\"nftOwner\",\"type\":\"address\"},{\"internalType\":\"contract IOwnixERC1155\",\"name\":\"nft\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"internalType\":\"uint32\",\"name\":\"index\",\"type\":\"uint32\"},{\"internalType\":\"uint256\",\"name\":\"reservePrice\",\"type\":\"uint256\"},{\"internalType\":\"uint32\",\"name\":\"duration\",\"type\":\"uint32\"},{\"internalType\":\"uint256\",\"name\":\"expiresAt\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"bidder\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"bidPrice\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"bidCreatedAt\",\"type\":\"uint256\"}],\"internalType\":\"struct IOwnixMarket.Auction\",\"name\":\"\",\"type\":\"tuple\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"inflationCollector\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"inflationPerMillion\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_tokenId\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_reservePrice\",\"type\":\"uint256\"},{\"internalType\":\"uint32\",\"name\":\"_duration\",\"type\":\"uint32\"}],\"name\":\"listNFT\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"minimumAuctionDuration\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"},{\"internalType\":\"uint256[]\",\"name\":\"\",\"type\":\"uint256[]\"},{\"internalType\":\"uint256[]\",\"name\":\"\",\"type\":\"uint256[]\"},{\"internalType\":\"bytes\",\"name\":\"\",\"type\":\"bytes\"}],\"name\":\"onERC1155BatchReceived\",\"outputs\":[{\"internalType\":\"bytes4\",\"name\":\"\",\"type\":\"bytes4\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"},{\"internalType\":\"bytes\",\"name\":\"\",\"type\":\"bytes\"}],\"name\":\"onERC1155Received\",\"outputs\":[{\"internalType\":\"bytes4\",\"name\":\"\",\"type\":\"bytes4\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"ownerSharePerMillion\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"ownixNFTToken\",\"outputs\":[{\"internalType\":\"contract IOwnixERC1155\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"ownixToken\",\"outputs\":[{\"internalType\":\"contract IOwnixERC20\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"pause\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"paused\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_tokenId\",\"type\":\"uint256\"},{\"internalType\":\"uint32\",\"name\":\"_index\",\"type\":\"uint32\"},{\"internalType\":\"uint256\",\"name\":\"_price\",\"type\":\"uint256\"}],\"name\":\"placeBid\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_bidder\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_tokenId\",\"type\":\"uint256\"},{\"internalType\":\"uint32\",\"name\":\"_index\",\"type\":\"uint32\"},{\"internalType\":\"uint256\",\"name\":\"_price\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_deadline\",\"type\":\"uint256\"},{\"internalType\":\"uint8\",\"name\":\"_v\",\"type\":\"uint8\"},{\"internalType\":\"bytes32\",\"name\":\"_r\",\"type\":\"bytes32\"},{\"internalType\":\"bytes32\",\"name\":\"_s\",\"type\":\"bytes32\"}],\"name\":\"placeBidWithPermit\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"royaltiesPerMillion\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_bidFeePerMillion\",\"type\":\"uint256\"}],\"name\":\"setBidFeePerMillion\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_bidMinimumRaiseAmount\",\"type\":\"uint256\"}],\"name\":\"setBidMinimumRaiseAmount\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_bidMinimumRaisePerMillion\",\"type\":\"uint256\"}],\"name\":\"setBidMinimumRaisePerMillion\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_feeCollector\",\"type\":\"address\"}],\"name\":\"setFeeCollector\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_inflationCollector\",\"type\":\"address\"}],\"name\":\"setInflationCollector\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_inflationPerMillion\",\"type\":\"uint256\"}],\"name\":\"setInflationPerMillion\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_minimumAuctionDuration\",\"type\":\"uint256\"}],\"name\":\"setMinimumAuctionDuration\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_ownerSharePerMillion\",\"type\":\"uint256\"}],\"name\":\"setOwnerSharePerMillion\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_royaltiesPerMillion\",\"type\":\"uint256\"}],\"name\":\"setRoyaltiesPerMillion\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes4\",\"name\":\"interfaceId\",\"type\":\"bytes4\"}],\"name\":\"supportsInterface\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_tokenId\",\"type\":\"uint256\"},{\"internalType\":\"uint32\",\"name\":\"_index\",\"type\":\"uint32\"}],\"name\":\"unlistNFT\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"unpause\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_tokenAddress\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_tokenId\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"_withdrawAddress\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"withdrawERC1155\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_withdrawAddress\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"withdrawERC20\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}]","ContractName":"OwnixMarket","CompilerVersion":"v0.8.7+commit.e28d00a7","OptimizationUsed":"1","Runs":"1000","ConstructorArguments":"000000000000000000000000cf78c7dd70d6f30f6e3609e905e78305da98c863000000000000000000000000c13c9714ea4cbbc0a747978ca89cd057209bbed30000000000000000000000001baa1a23a345039a69467c220a17b346b57e45760000000000000000000000002e3b6158a284fb8746a86f254535152848a6ba5f0000000000000000000000005bc1fdc000d16198b1379ff05a3ab844a39341e10000000000000000000000000000000000000000000000000000000000000384","EVMVersion":"Default","Library":"","LicenseType":"MIT","Proxy":"0","Implementation":"","SwarmSource":"ipfs://6128838a3afdeebcb91a3a9928565d6463dc6952612a95a5d8606025110cef58"}]}