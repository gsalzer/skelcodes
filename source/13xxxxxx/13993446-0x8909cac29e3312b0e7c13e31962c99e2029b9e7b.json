{"status":"1","message":"OK","result":[{"SourceCode":"{{\r\n  \"language\": \"Solidity\",\r\n  \"settings\": {\r\n    \"evmVersion\": \"istanbul\",\r\n    \"libraries\": {},\r\n    \"metadata\": {\r\n      \"bytecodeHash\": \"ipfs\",\r\n      \"useLiteralContent\": true\r\n    },\r\n    \"optimizer\": {\r\n      \"enabled\": true,\r\n      \"runs\": 100\r\n    },\r\n    \"remappings\": [],\r\n    \"outputSelection\": {\r\n      \"*\": {\r\n        \"*\": [\r\n          \"evm.bytecode\",\r\n          \"evm.deployedBytecode\",\r\n          \"devdoc\",\r\n          \"userdoc\",\r\n          \"metadata\",\r\n          \"abi\"\r\n        ]\r\n      }\r\n    }\r\n  },\r\n  \"sources\": {\r\n    \"@openzeppelin/contracts/token/ERC20/IERC20.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC20 standard as defined in the EIP.\\n */\\ninterface IERC20 {\\n    /**\\n     * @dev Returns the amount of tokens in existence.\\n     */\\n    function totalSupply() external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the amount of tokens owned by `account`.\\n     */\\n    function balanceOf(address account) external view returns (uint256);\\n\\n    /**\\n     * @dev Moves `amount` tokens from the caller's account to `recipient`.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transfer(address recipient, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Returns the remaining number of tokens that `spender` will be\\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\\n     * zero by default.\\n     *\\n     * This value changes when {approve} or {transferFrom} are called.\\n     */\\n    function allowance(address owner, address spender) external view returns (uint256);\\n\\n    /**\\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\\n     * that someone may use both the old and the new allowance by unfortunate\\n     * transaction ordering. One possible solution to mitigate this race\\n     * condition is to first reduce the spender's allowance to 0 and set the\\n     * desired value afterwards:\\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address spender, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Moves `amount` tokens from `sender` to `recipient` using the\\n     * allowance mechanism. `amount` is then deducted from the caller's\\n     * allowance.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(address sender, address recipient, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\\n     * another (`to`).\\n     *\\n     * Note that `value` may be zero.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 value);\\n\\n    /**\\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\\n     * a call to {approve}. `value` is the new allowance.\\n     */\\n    event Approval(address indexed owner, address indexed spender, uint256 value);\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/token/ERC20/extensions/IERC20Metadata.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../IERC20.sol\\\";\\n\\n/**\\n * @dev Interface for the optional metadata functions from the ERC20 standard.\\n *\\n * _Available since v4.1._\\n */\\ninterface IERC20Metadata is IERC20 {\\n    /**\\n     * @dev Returns the name of the token.\\n     */\\n    function name() external view returns (string memory);\\n\\n    /**\\n     * @dev Returns the symbol of the token.\\n     */\\n    function symbol() external view returns (string memory);\\n\\n    /**\\n     * @dev Returns the decimals places of the token.\\n     */\\n    function decimals() external view returns (uint8);\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../IERC20.sol\\\";\\nimport \\\"../../../utils/Address.sol\\\";\\n\\n/**\\n * @title SafeERC20\\n * @dev Wrappers around ERC20 operations that throw on failure (when the token\\n * contract returns false). Tokens that return no value (and instead revert or\\n * throw on failure) are also supported, non-reverting calls are assumed to be\\n * successful.\\n * To use this library you can add a `using SafeERC20 for IERC20;` statement to your contract,\\n * which allows you to call the safe operations as `token.safeTransfer(...)`, etc.\\n */\\nlibrary SafeERC20 {\\n    using Address for address;\\n\\n    function safeTransfer(IERC20 token, address to, uint256 value) internal {\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.transfer.selector, to, value));\\n    }\\n\\n    function safeTransferFrom(IERC20 token, address from, address to, uint256 value) internal {\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.transferFrom.selector, from, to, value));\\n    }\\n\\n    /**\\n     * @dev Deprecated. This function has issues similar to the ones found in\\n     * {IERC20-approve}, and its usage is discouraged.\\n     *\\n     * Whenever possible, use {safeIncreaseAllowance} and\\n     * {safeDecreaseAllowance} instead.\\n     */\\n    function safeApprove(IERC20 token, address spender, uint256 value) internal {\\n        // safeApprove should only be called when setting an initial allowance,\\n        // or when resetting it to zero. To increase and decrease it, use\\n        // 'safeIncreaseAllowance' and 'safeDecreaseAllowance'\\n        // solhint-disable-next-line max-line-length\\n        require((value == 0) || (token.allowance(address(this), spender) == 0),\\n            \\\"SafeERC20: approve from non-zero to non-zero allowance\\\"\\n        );\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, value));\\n    }\\n\\n    function safeIncreaseAllowance(IERC20 token, address spender, uint256 value) internal {\\n        uint256 newAllowance = token.allowance(address(this), spender) + value;\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));\\n    }\\n\\n    function safeDecreaseAllowance(IERC20 token, address spender, uint256 value) internal {\\n        unchecked {\\n            uint256 oldAllowance = token.allowance(address(this), spender);\\n            require(oldAllowance >= value, \\\"SafeERC20: decreased allowance below zero\\\");\\n            uint256 newAllowance = oldAllowance - value;\\n            _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));\\n        }\\n    }\\n\\n    /**\\n     * @dev Imitates a Solidity high-level call (i.e. a regular function call to a contract), relaxing the requirement\\n     * on the return value: the return value is optional (but if data is returned, it must not be false).\\n     * @param token The token targeted by the call.\\n     * @param data The call data (encoded using abi.encode or one of its variants).\\n     */\\n    function _callOptionalReturn(IERC20 token, bytes memory data) private {\\n        // We need to perform a low level call here, to bypass Solidity's return data size checking mechanism, since\\n        // we're implementing it ourselves. We use {Address.functionCall} to perform this call, which verifies that\\n        // the target address contains contract code and also asserts for success in the low-level call.\\n\\n        bytes memory returndata = address(token).functionCall(data, \\\"SafeERC20: low-level call failed\\\");\\n        if (returndata.length > 0) { // Return data is optional\\n            // solhint-disable-next-line max-line-length\\n            require(abi.decode(returndata, (bool)), \\\"SafeERC20: ERC20 operation did not succeed\\\");\\n        }\\n    }\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/utils/Address.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Collection of functions related to the address type\\n */\\nlibrary Address {\\n    /**\\n     * @dev Returns true if `account` is a contract.\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * It is unsafe to assume that an address for which this function returns\\n     * false is an externally-owned account (EOA) and not a contract.\\n     *\\n     * Among others, `isContract` will return false for the following\\n     * types of addresses:\\n     *\\n     *  - an externally-owned account\\n     *  - a contract in construction\\n     *  - an address where a contract will be created\\n     *  - an address where a contract lived, but was destroyed\\n     * ====\\n     */\\n    function isContract(address account) internal view returns (bool) {\\n        // This method relies on extcodesize, which returns 0 for contracts in\\n        // construction, since the code is only stored at the end of the\\n        // constructor execution.\\n\\n        uint256 size;\\n        // solhint-disable-next-line no-inline-assembly\\n        assembly { size := extcodesize(account) }\\n        return size > 0;\\n    }\\n\\n    /**\\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\\n     * `recipient`, forwarding all available gas and reverting on errors.\\n     *\\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\\n     * imposed by `transfer`, making them unable to receive funds via\\n     * `transfer`. {sendValue} removes this limitation.\\n     *\\n     * https://diligence.consensys.net/posts/2019/09/stop-using-soliditys-transfer-now/[Learn more].\\n     *\\n     * IMPORTANT: because control is transferred to `recipient`, care must be\\n     * taken to not create reentrancy vulnerabilities. Consider using\\n     * {ReentrancyGuard} or the\\n     * https://solidity.readthedocs.io/en/v0.5.11/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\\n     */\\n    function sendValue(address payable recipient, uint256 amount) internal {\\n        require(address(this).balance >= amount, \\\"Address: insufficient balance\\\");\\n\\n        // solhint-disable-next-line avoid-low-level-calls, avoid-call-value\\n        (bool success, ) = recipient.call{ value: amount }(\\\"\\\");\\n        require(success, \\\"Address: unable to send value, recipient may have reverted\\\");\\n    }\\n\\n    /**\\n     * @dev Performs a Solidity function call using a low level `call`. A\\n     * plain`call` is an unsafe replacement for a function call: use this\\n     * function instead.\\n     *\\n     * If `target` reverts with a revert reason, it is bubbled up by this\\n     * function (like regular Solidity function calls).\\n     *\\n     * Returns the raw returned data. To convert to the expected return value,\\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\\n     *\\n     * Requirements:\\n     *\\n     * - `target` must be a contract.\\n     * - calling `target` with `data` must not revert.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\\n      return functionCall(target, data, \\\"Address: low-level call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\\n     * `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(address target, bytes memory data, string memory errorMessage) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, 0, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but also transferring `value` wei to `target`.\\n     *\\n     * Requirements:\\n     *\\n     * - the calling contract must have an ETH balance of at least `value`.\\n     * - the called Solidity function must be `payable`.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(address target, bytes memory data, uint256 value) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, value, \\\"Address: low-level call with value failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\\n     * with `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(address target, bytes memory data, uint256 value, string memory errorMessage) internal returns (bytes memory) {\\n        require(address(this).balance >= value, \\\"Address: insufficient balance for call\\\");\\n        require(isContract(target), \\\"Address: call to non-contract\\\");\\n\\n        // solhint-disable-next-line avoid-low-level-calls\\n        (bool success, bytes memory returndata) = target.call{ value: value }(data);\\n        return _verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\\n        return functionStaticCall(target, data, \\\"Address: low-level static call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(address target, bytes memory data, string memory errorMessage) internal view returns (bytes memory) {\\n        require(isContract(target), \\\"Address: static call to non-contract\\\");\\n\\n        // solhint-disable-next-line avoid-low-level-calls\\n        (bool success, bytes memory returndata) = target.staticcall(data);\\n        return _verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionDelegateCall(target, data, \\\"Address: low-level delegate call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(address target, bytes memory data, string memory errorMessage) internal returns (bytes memory) {\\n        require(isContract(target), \\\"Address: delegate call to non-contract\\\");\\n\\n        // solhint-disable-next-line avoid-low-level-calls\\n        (bool success, bytes memory returndata) = target.delegatecall(data);\\n        return _verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    function _verifyCallResult(bool success, bytes memory returndata, string memory errorMessage) private pure returns(bytes memory) {\\n        if (success) {\\n            return returndata;\\n        } else {\\n            // Look for revert reason and bubble it up if present\\n            if (returndata.length > 0) {\\n                // The easiest way to bubble the revert reason is using memory via assembly\\n\\n                // solhint-disable-next-line no-inline-assembly\\n                assembly {\\n                    let returndata_size := mload(returndata)\\n                    revert(add(32, returndata), returndata_size)\\n                }\\n            } else {\\n                revert(errorMessage);\\n            }\\n        }\\n    }\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/utils/Context.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\n/*\\n * @dev Provides information about the current execution context, including the\\n * sender of the transaction and its data. While these are generally available\\n * via msg.sender and msg.data, they should not be accessed in such a direct\\n * manner, since when dealing with meta-transactions the account sending and\\n * paying for execution may not be the actual sender (as far as an application\\n * is concerned).\\n *\\n * This contract is only required for intermediate, library-like contracts.\\n */\\nabstract contract Context {\\n    function _msgSender() internal view virtual returns (address) {\\n        return msg.sender;\\n    }\\n\\n    function _msgData() internal view virtual returns (bytes calldata) {\\n        this; // silence state mutability warning without generating bytecode - see https://github.com/ethereum/solidity/issues/2691\\n        return msg.data;\\n    }\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/utils/math/SafeCast.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Wrappers over Solidity's uintXX/intXX casting operators with added overflow\\n * checks.\\n *\\n * Downcasting from uint256/int256 in Solidity does not revert on overflow. This can\\n * easily result in undesired exploitation or bugs, since developers usually\\n * assume that overflows raise errors. `SafeCast` restores this intuition by\\n * reverting the transaction when such an operation overflows.\\n *\\n * Using this library instead of the unchecked operations eliminates an entire\\n * class of bugs, so it's recommended to use it always.\\n *\\n * Can be combined with {SafeMath} and {SignedSafeMath} to extend it to smaller types, by performing\\n * all math on `uint256` and `int256` and then downcasting.\\n */\\nlibrary SafeCast {\\n    /**\\n     * @dev Returns the downcasted uint128 from uint256, reverting on\\n     * overflow (when the input is greater than largest uint128).\\n     *\\n     * Counterpart to Solidity's `uint128` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 128 bits\\n     */\\n    function toUint128(uint256 value) internal pure returns (uint128) {\\n        require(value < 2**128, \\\"SafeCast: value doesn\\\\'t fit in 128 bits\\\");\\n        return uint128(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted uint64 from uint256, reverting on\\n     * overflow (when the input is greater than largest uint64).\\n     *\\n     * Counterpart to Solidity's `uint64` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 64 bits\\n     */\\n    function toUint64(uint256 value) internal pure returns (uint64) {\\n        require(value < 2**64, \\\"SafeCast: value doesn\\\\'t fit in 64 bits\\\");\\n        return uint64(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted uint32 from uint256, reverting on\\n     * overflow (when the input is greater than largest uint32).\\n     *\\n     * Counterpart to Solidity's `uint32` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 32 bits\\n     */\\n    function toUint32(uint256 value) internal pure returns (uint32) {\\n        require(value < 2**32, \\\"SafeCast: value doesn\\\\'t fit in 32 bits\\\");\\n        return uint32(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted uint16 from uint256, reverting on\\n     * overflow (when the input is greater than largest uint16).\\n     *\\n     * Counterpart to Solidity's `uint16` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 16 bits\\n     */\\n    function toUint16(uint256 value) internal pure returns (uint16) {\\n        require(value < 2**16, \\\"SafeCast: value doesn\\\\'t fit in 16 bits\\\");\\n        return uint16(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted uint8 from uint256, reverting on\\n     * overflow (when the input is greater than largest uint8).\\n     *\\n     * Counterpart to Solidity's `uint8` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 8 bits.\\n     */\\n    function toUint8(uint256 value) internal pure returns (uint8) {\\n        require(value < 2**8, \\\"SafeCast: value doesn\\\\'t fit in 8 bits\\\");\\n        return uint8(value);\\n    }\\n\\n    /**\\n     * @dev Converts a signed int256 into an unsigned uint256.\\n     *\\n     * Requirements:\\n     *\\n     * - input must be greater than or equal to 0.\\n     */\\n    function toUint256(int256 value) internal pure returns (uint256) {\\n        require(value >= 0, \\\"SafeCast: value must be positive\\\");\\n        return uint256(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted int128 from int256, reverting on\\n     * overflow (when the input is less than smallest int128 or\\n     * greater than largest int128).\\n     *\\n     * Counterpart to Solidity's `int128` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 128 bits\\n     *\\n     * _Available since v3.1._\\n     */\\n    function toInt128(int256 value) internal pure returns (int128) {\\n        require(value >= -2**127 && value < 2**127, \\\"SafeCast: value doesn\\\\'t fit in 128 bits\\\");\\n        return int128(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted int64 from int256, reverting on\\n     * overflow (when the input is less than smallest int64 or\\n     * greater than largest int64).\\n     *\\n     * Counterpart to Solidity's `int64` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 64 bits\\n     *\\n     * _Available since v3.1._\\n     */\\n    function toInt64(int256 value) internal pure returns (int64) {\\n        require(value >= -2**63 && value < 2**63, \\\"SafeCast: value doesn\\\\'t fit in 64 bits\\\");\\n        return int64(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted int32 from int256, reverting on\\n     * overflow (when the input is less than smallest int32 or\\n     * greater than largest int32).\\n     *\\n     * Counterpart to Solidity's `int32` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 32 bits\\n     *\\n     * _Available since v3.1._\\n     */\\n    function toInt32(int256 value) internal pure returns (int32) {\\n        require(value >= -2**31 && value < 2**31, \\\"SafeCast: value doesn\\\\'t fit in 32 bits\\\");\\n        return int32(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted int16 from int256, reverting on\\n     * overflow (when the input is less than smallest int16 or\\n     * greater than largest int16).\\n     *\\n     * Counterpart to Solidity's `int16` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 16 bits\\n     *\\n     * _Available since v3.1._\\n     */\\n    function toInt16(int256 value) internal pure returns (int16) {\\n        require(value >= -2**15 && value < 2**15, \\\"SafeCast: value doesn\\\\'t fit in 16 bits\\\");\\n        return int16(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted int8 from int256, reverting on\\n     * overflow (when the input is less than smallest int8 or\\n     * greater than largest int8).\\n     *\\n     * Counterpart to Solidity's `int8` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 8 bits.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function toInt8(int256 value) internal pure returns (int8) {\\n        require(value >= -2**7 && value < 2**7, \\\"SafeCast: value doesn\\\\'t fit in 8 bits\\\");\\n        return int8(value);\\n    }\\n\\n    /**\\n     * @dev Converts an unsigned uint256 into a signed int256.\\n     *\\n     * Requirements:\\n     *\\n     * - input must be less than or equal to maxInt256.\\n     */\\n    function toInt256(uint256 value) internal pure returns (int256) {\\n        require(value < 2**255, \\\"SafeCast: value doesn't fit in an int256\\\");\\n        return int256(value);\\n    }\\n}\\n\"\r\n    },\r\n    \"@uniswap/v2-periphery/contracts/interfaces/IUniswapV2Router01.sol\": {\r\n      \"content\": \"pragma solidity >=0.6.2;\\n\\ninterface IUniswapV2Router01 {\\n    function factory() external pure returns (address);\\n    function WETH() external pure returns (address);\\n\\n    function addLiquidity(\\n        address tokenA,\\n        address tokenB,\\n        uint amountADesired,\\n        uint amountBDesired,\\n        uint amountAMin,\\n        uint amountBMin,\\n        address to,\\n        uint deadline\\n    ) external returns (uint amountA, uint amountB, uint liquidity);\\n    function addLiquidityETH(\\n        address token,\\n        uint amountTokenDesired,\\n        uint amountTokenMin,\\n        uint amountETHMin,\\n        address to,\\n        uint deadline\\n    ) external payable returns (uint amountToken, uint amountETH, uint liquidity);\\n    function removeLiquidity(\\n        address tokenA,\\n        address tokenB,\\n        uint liquidity,\\n        uint amountAMin,\\n        uint amountBMin,\\n        address to,\\n        uint deadline\\n    ) external returns (uint amountA, uint amountB);\\n    function removeLiquidityETH(\\n        address token,\\n        uint liquidity,\\n        uint amountTokenMin,\\n        uint amountETHMin,\\n        address to,\\n        uint deadline\\n    ) external returns (uint amountToken, uint amountETH);\\n    function removeLiquidityWithPermit(\\n        address tokenA,\\n        address tokenB,\\n        uint liquidity,\\n        uint amountAMin,\\n        uint amountBMin,\\n        address to,\\n        uint deadline,\\n        bool approveMax, uint8 v, bytes32 r, bytes32 s\\n    ) external returns (uint amountA, uint amountB);\\n    function removeLiquidityETHWithPermit(\\n        address token,\\n        uint liquidity,\\n        uint amountTokenMin,\\n        uint amountETHMin,\\n        address to,\\n        uint deadline,\\n        bool approveMax, uint8 v, bytes32 r, bytes32 s\\n    ) external returns (uint amountToken, uint amountETH);\\n    function swapExactTokensForTokens(\\n        uint amountIn,\\n        uint amountOutMin,\\n        address[] calldata path,\\n        address to,\\n        uint deadline\\n    ) external returns (uint[] memory amounts);\\n    function swapTokensForExactTokens(\\n        uint amountOut,\\n        uint amountInMax,\\n        address[] calldata path,\\n        address to,\\n        uint deadline\\n    ) external returns (uint[] memory amounts);\\n    function swapExactETHForTokens(uint amountOutMin, address[] calldata path, address to, uint deadline)\\n        external\\n        payable\\n        returns (uint[] memory amounts);\\n    function swapTokensForExactETH(uint amountOut, uint amountInMax, address[] calldata path, address to, uint deadline)\\n        external\\n        returns (uint[] memory amounts);\\n    function swapExactTokensForETH(uint amountIn, uint amountOutMin, address[] calldata path, address to, uint deadline)\\n        external\\n        returns (uint[] memory amounts);\\n    function swapETHForExactTokens(uint amountOut, address[] calldata path, address to, uint deadline)\\n        external\\n        payable\\n        returns (uint[] memory amounts);\\n\\n    function quote(uint amountA, uint reserveA, uint reserveB) external pure returns (uint amountB);\\n    function getAmountOut(uint amountIn, uint reserveIn, uint reserveOut) external pure returns (uint amountOut);\\n    function getAmountIn(uint amountOut, uint reserveIn, uint reserveOut) external pure returns (uint amountIn);\\n    function getAmountsOut(uint amountIn, address[] calldata path) external view returns (uint[] memory amounts);\\n    function getAmountsIn(uint amountOut, address[] calldata path) external view returns (uint[] memory amounts);\\n}\\n\"\r\n    },\r\n    \"@uniswap/v2-periphery/contracts/interfaces/IUniswapV2Router02.sol\": {\r\n      \"content\": \"pragma solidity >=0.6.2;\\n\\nimport './IUniswapV2Router01.sol';\\n\\ninterface IUniswapV2Router02 is IUniswapV2Router01 {\\n    function removeLiquidityETHSupportingFeeOnTransferTokens(\\n        address token,\\n        uint liquidity,\\n        uint amountTokenMin,\\n        uint amountETHMin,\\n        address to,\\n        uint deadline\\n    ) external returns (uint amountETH);\\n    function removeLiquidityETHWithPermitSupportingFeeOnTransferTokens(\\n        address token,\\n        uint liquidity,\\n        uint amountTokenMin,\\n        uint amountETHMin,\\n        address to,\\n        uint deadline,\\n        bool approveMax, uint8 v, bytes32 r, bytes32 s\\n    ) external returns (uint amountETH);\\n\\n    function swapExactTokensForTokensSupportingFeeOnTransferTokens(\\n        uint amountIn,\\n        uint amountOutMin,\\n        address[] calldata path,\\n        address to,\\n        uint deadline\\n    ) external;\\n    function swapExactETHForTokensSupportingFeeOnTransferTokens(\\n        uint amountOutMin,\\n        address[] calldata path,\\n        address to,\\n        uint deadline\\n    ) external payable;\\n    function swapExactTokensForETHSupportingFeeOnTransferTokens(\\n        uint amountIn,\\n        uint amountOutMin,\\n        address[] calldata path,\\n        address to,\\n        uint deadline\\n    ) external;\\n}\\n\"\r\n    },\r\n    \"contracts/dependencies/openzeppelin/contracts/utils/structs/EnumerableSet.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Library for managing\\n * https://en.wikipedia.org/wiki/Set_(abstract_data_type)[sets] of primitive\\n * types.\\n *\\n * Sets have the following properties:\\n *\\n * - Elements are added, removed, and checked for existence in constant time\\n * (O(1)).\\n * - Elements are enumerated in O(n). No guarantees are made on the ordering.\\n *\\n * ```\\n * contract Example {\\n *     // Add the library methods\\n *     using EnumerableSet for EnumerableSet.AddressSet;\\n *\\n *     // Declare a set state variable\\n *     EnumerableSet.AddressSet private mySet;\\n * }\\n * ```\\n *\\n * As of v3.3.0, sets of type `bytes32` (`Bytes32Set`), `address` (`AddressSet`)\\n * and `uint256` (`UintSet`) are supported.\\n */\\nlibrary EnumerableSet {\\n    // To implement this library for multiple types with as little code\\n    // repetition as possible, we write it in terms of a generic Set type with\\n    // bytes32 values.\\n    // The Set implementation uses private functions, and user-facing\\n    // implementations (such as AddressSet) are just wrappers around the\\n    // underlying Set.\\n    // This means that we can only create new EnumerableSets for types that fit\\n    // in bytes32.\\n\\n    struct Set {\\n        // Storage of set values\\n        bytes32[] _values;\\n        // Position of the value in the `values` array, plus 1 because index 0\\n        // means a value is not in the set.\\n        mapping(bytes32 => uint256) _indexes;\\n    }\\n\\n    /**\\n     * @dev Add a value to a set. O(1).\\n     *\\n     * Returns true if the value was added to the set, that is if it was not\\n     * already present.\\n     */\\n    function _add(Set storage set, bytes32 value) private returns (bool) {\\n        if (!_contains(set, value)) {\\n            set._values.push(value);\\n            // The value is stored at length-1, but we add 1 to all indexes\\n            // and use 0 as a sentinel value\\n            set._indexes[value] = set._values.length;\\n            return true;\\n        } else {\\n            return false;\\n        }\\n    }\\n\\n    /**\\n     * @dev Removes a value from a set. O(1).\\n     *\\n     * Returns true if the value was removed from the set, that is if it was\\n     * present.\\n     */\\n    function _remove(Set storage set, bytes32 value) private returns (bool) {\\n        // We read and store the value's index to prevent multiple reads from the same storage slot\\n        uint256 valueIndex = set._indexes[value];\\n\\n        if (valueIndex != 0) {\\n            // Equivalent to contains(set, value)\\n            // To delete an element from the _values array in O(1), we swap the element to delete with the last one in\\n            // the array, and then remove the last element (sometimes called as 'swap and pop').\\n            // This modifies the order of the array, as noted in {at}.\\n\\n            uint256 toDeleteIndex = valueIndex - 1;\\n            uint256 lastIndex = set._values.length - 1;\\n\\n            if (lastIndex != toDeleteIndex) {\\n                bytes32 lastvalue = set._values[lastIndex];\\n\\n                // Move the last value to the index where the value to delete is\\n                set._values[toDeleteIndex] = lastvalue;\\n                // Update the index for the moved value\\n                set._indexes[lastvalue] = valueIndex; // Replace lastvalue's index to valueIndex\\n            }\\n\\n            // Delete the slot where the moved value was stored\\n            set._values.pop();\\n\\n            // Delete the index for the deleted slot\\n            delete set._indexes[value];\\n\\n            return true;\\n        } else {\\n            return false;\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns true if the value is in the set. O(1).\\n     */\\n    function _contains(Set storage set, bytes32 value) private view returns (bool) {\\n        return set._indexes[value] != 0;\\n    }\\n\\n    /**\\n     * @dev Returns the number of values on the set. O(1).\\n     */\\n    function _length(Set storage set) private view returns (uint256) {\\n        return set._values.length;\\n    }\\n\\n    /**\\n     * @dev Returns the value stored at position `index` in the set. O(1).\\n     *\\n     * Note that there are no guarantees on the ordering of values inside the\\n     * array, and it may change when more values are added or removed.\\n     *\\n     * Requirements:\\n     *\\n     * - `index` must be strictly less than {length}.\\n     */\\n    function _at(Set storage set, uint256 index) private view returns (bytes32) {\\n        return set._values[index];\\n    }\\n\\n    /**\\n     * @dev Return the entire set in an array\\n     *\\n     * WARNING: This operation will copy the entire storage to memory, which can be quite expensive. This is designed\\n     * to mostly be used by view accessors that are queried without any gas fees. Developers should keep in mind that\\n     * this function has an unbounded cost, and using it as part of a state-changing function may render the function\\n     * uncallable if the set grows to a point where copying to memory consumes too much gas to fit in a block.\\n     */\\n    function _values(Set storage set) private view returns (bytes32[] memory) {\\n        return set._values;\\n    }\\n\\n    // Bytes32Set\\n\\n    struct Bytes32Set {\\n        Set _inner;\\n    }\\n\\n    /**\\n     * @dev Add a value to a set. O(1).\\n     *\\n     * Returns true if the value was added to the set, that is if it was not\\n     * already present.\\n     */\\n    function add(Bytes32Set storage set, bytes32 value) internal returns (bool) {\\n        return _add(set._inner, value);\\n    }\\n\\n    /**\\n     * @dev Removes a value from a set. O(1).\\n     *\\n     * Returns true if the value was removed from the set, that is if it was\\n     * present.\\n     */\\n    function remove(Bytes32Set storage set, bytes32 value) internal returns (bool) {\\n        return _remove(set._inner, value);\\n    }\\n\\n    /**\\n     * @dev Returns true if the value is in the set. O(1).\\n     */\\n    function contains(Bytes32Set storage set, bytes32 value) internal view returns (bool) {\\n        return _contains(set._inner, value);\\n    }\\n\\n    /**\\n     * @dev Returns the number of values in the set. O(1).\\n     */\\n    function length(Bytes32Set storage set) internal view returns (uint256) {\\n        return _length(set._inner);\\n    }\\n\\n    /**\\n     * @dev Returns the value stored at position `index` in the set. O(1).\\n     *\\n     * Note that there are no guarantees on the ordering of values inside the\\n     * array, and it may change when more values are added or removed.\\n     *\\n     * Requirements:\\n     *\\n     * - `index` must be strictly less than {length}.\\n     */\\n    function at(Bytes32Set storage set, uint256 index) internal view returns (bytes32) {\\n        return _at(set._inner, index);\\n    }\\n\\n    /**\\n     * @dev Return the entire set in an array\\n     *\\n     * WARNING: This operation will copy the entire storage to memory, which can be quite expensive. This is designed\\n     * to mostly be used by view accessors that are queried without any gas fees. Developers should keep in mind that\\n     * this function has an unbounded cost, and using it as part of a state-changing function may render the function\\n     * uncallable if the set grows to a point where copying to memory consumes too much gas to fit in a block.\\n     */\\n    function values(Bytes32Set storage set) internal view returns (bytes32[] memory) {\\n        return _values(set._inner);\\n    }\\n\\n    // AddressSet\\n\\n    struct AddressSet {\\n        Set _inner;\\n    }\\n\\n    /**\\n     * @dev Add a value to a set. O(1).\\n     *\\n     * Returns true if the value was added to the set, that is if it was not\\n     * already present.\\n     */\\n    function add(AddressSet storage set, address value) internal returns (bool) {\\n        return _add(set._inner, bytes32(uint256(uint160(value))));\\n    }\\n\\n    /**\\n     * @dev Removes a value from a set. O(1).\\n     *\\n     * Returns true if the value was removed from the set, that is if it was\\n     * present.\\n     */\\n    function remove(AddressSet storage set, address value) internal returns (bool) {\\n        return _remove(set._inner, bytes32(uint256(uint160(value))));\\n    }\\n\\n    /**\\n     * @dev Returns true if the value is in the set. O(1).\\n     */\\n    function contains(AddressSet storage set, address value) internal view returns (bool) {\\n        return _contains(set._inner, bytes32(uint256(uint160(value))));\\n    }\\n\\n    /**\\n     * @dev Returns the number of values in the set. O(1).\\n     */\\n    function length(AddressSet storage set) internal view returns (uint256) {\\n        return _length(set._inner);\\n    }\\n\\n    /**\\n     * @dev Returns the value stored at position `index` in the set. O(1).\\n     *\\n     * Note that there are no guarantees on the ordering of values inside the\\n     * array, and it may change when more values are added or removed.\\n     *\\n     * Requirements:\\n     *\\n     * - `index` must be strictly less than {length}.\\n     */\\n    function at(AddressSet storage set, uint256 index) internal view returns (address) {\\n        return address(uint160(uint256(_at(set._inner, index))));\\n    }\\n\\n    /**\\n     * @dev Return the entire set in an array\\n     *\\n     * WARNING: This operation will copy the entire storage to memory, which can be quite expensive. This is designed\\n     * to mostly be used by view accessors that are queried without any gas fees. Developers should keep in mind that\\n     * this function has an unbounded cost, and using it as part of a state-changing function may render the function\\n     * uncallable if the set grows to a point where copying to memory consumes too much gas to fit in a block.\\n     */\\n    function values(AddressSet storage set) internal view returns (address[] memory) {\\n        bytes32[] memory store = _values(set._inner);\\n        address[] memory result;\\n\\n        assembly {\\n            result := store\\n        }\\n\\n        return result;\\n    }\\n\\n    // UintSet\\n\\n    struct UintSet {\\n        Set _inner;\\n    }\\n\\n    /**\\n     * @dev Add a value to a set. O(1).\\n     *\\n     * Returns true if the value was added to the set, that is if it was not\\n     * already present.\\n     */\\n    function add(UintSet storage set, uint256 value) internal returns (bool) {\\n        return _add(set._inner, bytes32(value));\\n    }\\n\\n    /**\\n     * @dev Removes a value from a set. O(1).\\n     *\\n     * Returns true if the value was removed from the set, that is if it was\\n     * present.\\n     */\\n    function remove(UintSet storage set, uint256 value) internal returns (bool) {\\n        return _remove(set._inner, bytes32(value));\\n    }\\n\\n    /**\\n     * @dev Returns true if the value is in the set. O(1).\\n     */\\n    function contains(UintSet storage set, uint256 value) internal view returns (bool) {\\n        return _contains(set._inner, bytes32(value));\\n    }\\n\\n    /**\\n     * @dev Returns the number of values on the set. O(1).\\n     */\\n    function length(UintSet storage set) internal view returns (uint256) {\\n        return _length(set._inner);\\n    }\\n\\n    /**\\n     * @dev Returns the value stored at position `index` in the set. O(1).\\n     *\\n     * Note that there are no guarantees on the ordering of values inside the\\n     * array, and it may change when more values are added or removed.\\n     *\\n     * Requirements:\\n     *\\n     * - `index` must be strictly less than {length}.\\n     */\\n    function at(UintSet storage set, uint256 index) internal view returns (uint256) {\\n        return uint256(_at(set._inner, index));\\n    }\\n\\n    /**\\n     * @dev Return the entire set in an array\\n     *\\n     * WARNING: This operation will copy the entire storage to memory, which can be quite expensive. This is designed\\n     * to mostly be used by view accessors that are queried without any gas fees. Developers should keep in mind that\\n     * this function has an unbounded cost, and using it as part of a state-changing function may render the function\\n     * uncallable if the set grows to a point where copying to memory consumes too much gas to fit in a block.\\n     */\\n    function values(UintSet storage set) internal view returns (uint256[] memory) {\\n        bytes32[] memory store = _values(set._inner);\\n        uint256[] memory result;\\n\\n        assembly {\\n            result := store\\n        }\\n\\n        return result;\\n    }\\n}\\n\"\r\n    },\r\n    \"contracts/interfaces/bloq/ISwapManager.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity 0.8.3;\\n\\n/* solhint-disable func-name-mixedcase */\\n\\nimport \\\"@uniswap/v2-periphery/contracts/interfaces/IUniswapV2Router02.sol\\\";\\n\\ninterface ISwapManager {\\n    event OracleCreated(address indexed _sender, address indexed _newOracle, uint256 _period);\\n\\n    function N_DEX() external view returns (uint256);\\n\\n    function ROUTERS(uint256 i) external view returns (IUniswapV2Router02);\\n\\n    function bestOutputFixedInput(\\n        address _from,\\n        address _to,\\n        uint256 _amountIn\\n    )\\n        external\\n        view\\n        returns (\\n            address[] memory path,\\n            uint256 amountOut,\\n            uint256 rIdx\\n        );\\n\\n    function bestPathFixedInput(\\n        address _from,\\n        address _to,\\n        uint256 _amountIn,\\n        uint256 _i\\n    ) external view returns (address[] memory path, uint256 amountOut);\\n\\n    function bestInputFixedOutput(\\n        address _from,\\n        address _to,\\n        uint256 _amountOut\\n    )\\n        external\\n        view\\n        returns (\\n            address[] memory path,\\n            uint256 amountIn,\\n            uint256 rIdx\\n        );\\n\\n    function bestPathFixedOutput(\\n        address _from,\\n        address _to,\\n        uint256 _amountOut,\\n        uint256 _i\\n    ) external view returns (address[] memory path, uint256 amountIn);\\n\\n    function safeGetAmountsOut(\\n        uint256 _amountIn,\\n        address[] memory _path,\\n        uint256 _i\\n    ) external view returns (uint256[] memory result);\\n\\n    function unsafeGetAmountsOut(\\n        uint256 _amountIn,\\n        address[] memory _path,\\n        uint256 _i\\n    ) external view returns (uint256[] memory result);\\n\\n    function safeGetAmountsIn(\\n        uint256 _amountOut,\\n        address[] memory _path,\\n        uint256 _i\\n    ) external view returns (uint256[] memory result);\\n\\n    function unsafeGetAmountsIn(\\n        uint256 _amountOut,\\n        address[] memory _path,\\n        uint256 _i\\n    ) external view returns (uint256[] memory result);\\n\\n    function comparePathsFixedInput(\\n        address[] memory pathA,\\n        address[] memory pathB,\\n        uint256 _amountIn,\\n        uint256 _i\\n    ) external view returns (address[] memory path, uint256 amountOut);\\n\\n    function comparePathsFixedOutput(\\n        address[] memory pathA,\\n        address[] memory pathB,\\n        uint256 _amountOut,\\n        uint256 _i\\n    ) external view returns (address[] memory path, uint256 amountIn);\\n\\n    function ours(address a) external view returns (bool);\\n\\n    function oracleCount() external view returns (uint256);\\n\\n    function oracleAt(uint256 idx) external view returns (address);\\n\\n    function getOracle(\\n        address _tokenA,\\n        address _tokenB,\\n        uint256 _period,\\n        uint256 _i\\n    ) external view returns (address);\\n\\n    function createOrUpdateOracle(\\n        address _tokenA,\\n        address _tokenB,\\n        uint256 _period,\\n        uint256 _i\\n    ) external returns (address oracleAddr);\\n\\n    function consultForFree(\\n        address _from,\\n        address _to,\\n        uint256 _amountIn,\\n        uint256 _period,\\n        uint256 _i\\n    ) external view returns (uint256 amountOut, uint256 lastUpdatedAt);\\n\\n    /// get the data we want and pay the gas to update\\n    function consult(\\n        address _from,\\n        address _to,\\n        uint256 _amountIn,\\n        uint256 _period,\\n        uint256 _i\\n    )\\n        external\\n        returns (\\n            uint256 amountOut,\\n            uint256 lastUpdatedAt,\\n            bool updated\\n        );\\n\\n    function updateOracles() external returns (uint256 updated, uint256 expected);\\n\\n    function updateOracles(address[] memory _oracleAddrs) external returns (uint256 updated, uint256 expected);\\n}\\n\"\r\n    },\r\n    \"contracts/interfaces/convex/IConvex.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity 0.8.3;\\n\\ninterface IConvex {\\n    function poolInfo(uint256)\\n        external\\n        view\\n        returns (\\n            address,\\n            address,\\n            address,\\n            address,\\n            address,\\n            bool\\n        );\\n\\n    // deposit lp tokens and stake\\n    function deposit(\\n        uint256 _pid,\\n        uint256 _amount,\\n        bool _stake\\n    ) external returns (bool);\\n\\n    // deposit all lp tokens and stake\\n    function depositAll(uint256 _pid, bool _stake) external returns (bool);\\n\\n    // withdraw lp tokens\\n    function withdraw(uint256 _pid, uint256 _amount) external returns (bool);\\n\\n    // withdraw all lp tokens\\n    function withdrawAll(uint256 _pid) external returns (bool);\\n\\n    // claim crv + extra rewards\\n    function earmarkRewards(uint256 _pid) external returns (bool);\\n\\n    // claim  rewards on stash (msg.sender == stash)\\n    function claimRewards(uint256 _pid, address _gauge) external returns (bool);\\n\\n    // delegate address votes on dao (needs to be voteDelegate)\\n    function vote(\\n        uint256 _voteId,\\n        address _votingAddress,\\n        bool _support\\n    ) external returns (bool);\\n\\n    function voteGaugeWeight(address[] calldata _gauge, uint256[] calldata _weight) external returns (bool);\\n}\\n\\ninterface Rewards {\\n    function pid() external view returns (uint256);\\n\\n    function balanceOf(address account) external view returns (uint256);\\n\\n    function earned(address account) external view returns (uint256);\\n\\n    function extraRewardsLength() external view returns (uint256);\\n\\n    function extraRewards(uint256) external view returns (address);\\n\\n    function rewardPerToken() external view returns (uint256);\\n\\n    function rewardPerTokenStored() external view returns (uint256);\\n\\n    function rewardRate() external view returns (uint256);\\n\\n    function rewardToken() external view returns (address);\\n\\n    function rewards(address) external view returns (uint256);\\n\\n    function userRewardPerTokenPaid(address) external view returns (uint256);\\n\\n    function stakingToken() external view returns (address);\\n\\n    function stake(uint256) external returns (bool);\\n\\n    function stakeAll() external returns (bool);\\n\\n    function stakeFor(address, uint256) external returns (bool);\\n\\n    function withdraw(uint256 amount, bool claim) external returns (bool);\\n\\n    function withdrawAll(bool claim) external returns (bool);\\n\\n    function withdrawAndUnwrap(uint256 amount, bool claim) external returns (bool);\\n\\n    function withdrawAllAndUnwrap(bool claim) external;\\n\\n    function getReward() external returns (bool);\\n\\n    function getReward(address _account, bool _claimExtras) external returns (bool);\\n\\n    function donate(uint256 _amount) external returns (bool);\\n}\\n\"\r\n    },\r\n    \"contracts/interfaces/convex/IConvexToken.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity 0.8.3;\\n\\ninterface IConvexToken {\\n    function maxSupply() external view returns (uint256);\\n\\n    function totalSupply() external view returns (uint256);\\n\\n    function reductionPerCliff() external view returns (uint256);\\n}\\n\"\r\n    },\r\n    \"contracts/interfaces/curve/IDepositZap.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n/* solhint-disable */\\npragma solidity 0.8.3;\\n\\ninterface IDepositZap4x {\\n    function calc_token_amount(\\n        address _pool,\\n        uint256[4] memory _amounts,\\n        bool is_deposit\\n    ) external view returns (uint256);\\n\\n    function add_liquidity(\\n        address _pool,\\n        uint256[4] memory _amounts,\\n        uint256 _min_mint_amount\\n    ) external;\\n\\n    function remove_liquidity(\\n        address _pool,\\n        uint256 _amount,\\n        uint256[4] memory _min_amounts\\n    ) external;\\n\\n    function remove_liquidity_one_coin(\\n        address _pool,\\n        uint256 _token_amount,\\n        int128 i,\\n        uint256 _min_amount\\n    ) external;\\n\\n    function calc_withdraw_one_coin(\\n        address _pool,\\n        uint256 _token_amount,\\n        int128 i\\n    ) external view returns (uint256);\\n}\\n\"\r\n    },\r\n    \"contracts/interfaces/curve/ILiquidityGauge.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n/* solhint-disable */\\npragma solidity 0.8.3;\\n\\nimport \\\"@openzeppelin/contracts/token/ERC20/IERC20.sol\\\";\\n\\n// Not a complete interface, but should have what we need\\ninterface ILiquidityGaugeV2 is IERC20 {\\n    function deposit(uint256 _value) external;\\n\\n    function deposit(uint256 _value, address addr) external;\\n\\n    function withdraw(uint256 _value) external;\\n\\n    function claim_rewards(address addr) external;\\n\\n    function claimable_tokens(address addr) external returns (uint256);\\n\\n    function claimable_reward(address, address) external returns (uint256);\\n\\n    function integrate_fraction(address addr) external view returns (uint256);\\n\\n    function user_checkpoint(address addr) external returns (bool);\\n\\n    function reward_integral(address) external view returns (uint256);\\n\\n    function reward_integral_for(address, address) external view returns (uint256);\\n\\n    function lp_token() external view returns (address);\\n\\n    function reward_count() external view returns (uint256);\\n\\n    function reward_tokens(uint256 _i) external view returns (address);\\n}\\n\\ninterface ILiquidityGaugeV3 is ILiquidityGaugeV2 {\\n    function claimable_reward(address addr, address token) external view override returns (uint256);\\n}\\n\\n/* solhint-enable */\\n\"\r\n    },\r\n    \"contracts/interfaces/curve/IMetapoolFactory.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\n/* solhint-disable func-name-mixedcase*/\\npragma solidity 0.8.3;\\n\\ninterface IMetapoolFactory {\\n    function get_underlying_coins(address _pool) external view returns (address[8] memory _coins);\\n\\n    function get_underlying_decimals(address _pool) external view returns (uint256[8] memory _decimals);\\n}\\n\"\r\n    },\r\n    \"contracts/interfaces/curve/IStableSwap.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n/* solhint-disable */\\npragma solidity 0.8.3;\\n\\n// Not a complete interface, but should have what we need\\ninterface IStableSwap {\\n    function coins(uint256 i) external view returns (address);\\n\\n    function fee() external view returns (uint256); // fee * 1e10\\n\\n    function lp_token() external view returns (address);\\n\\n    function A() external view returns (uint256);\\n\\n    function A_precise() external view returns (uint256);\\n\\n    function balances(uint256 i) external view returns (uint256);\\n\\n    function get_virtual_price() external view returns (uint256);\\n\\n    function get_dy(\\n        int128 i,\\n        int128 j,\\n        uint256 dx\\n    ) external view returns (uint256);\\n\\n    function get_dy_underlying(\\n        int128 i,\\n        int128 j,\\n        uint256 dx\\n    ) external view returns (uint256);\\n\\n    function exchange(\\n        int128 i,\\n        int128 j,\\n        uint256 dx,\\n        uint256 min_dy\\n    ) external returns (uint256);\\n\\n    function calc_withdraw_one_coin(uint256 _token_amount, int128 i) external view returns (uint256);\\n\\n    function remove_liquidity_one_coin(\\n        uint256 _token_amount,\\n        int128 i,\\n        uint256 _min_amount\\n    ) external;\\n}\\n\\ninterface IStableSwapV2 {\\n    function coins(int128 i) external view returns (address);\\n}\\n\\ninterface IStableSwapUnderlying is IStableSwap {\\n    function underlying_coins(uint256 i) external view returns (address);\\n\\n    function exchange_underlying(\\n        int128 i,\\n        int128 j,\\n        uint256 dx,\\n        uint256 min_dy\\n    ) external;\\n\\n    function remove_liquidity_one_coin(\\n        uint256 _token_amount,\\n        int128 i,\\n        uint256 _min_amount,\\n        bool _use_underlying\\n    ) external;\\n}\\n\\ninterface IStableSwap2x is IStableSwap {\\n    function calc_token_amount(uint256[2] memory _amounts, bool is_deposit) external view returns (uint256);\\n\\n    function add_liquidity(uint256[2] memory _amounts, uint256 _min_mint_amount) external;\\n\\n    function remove_liquidity(uint256 _amount, uint256[2] memory _min_amounts) external;\\n\\n    function remove_liquidity_imbalance(uint256[2] memory _amounts, uint256 _max_burn_amount)\\n        external\\n        returns (uint256);\\n}\\n\\ninterface IStableSwap3x is IStableSwap {\\n    function calc_token_amount(uint256[3] memory _amounts, bool is_deposit) external view returns (uint256);\\n\\n    function add_liquidity(uint256[3] memory _amounts, uint256 _min_mint_amount) external;\\n\\n    function remove_liquidity(uint256 _amount, uint256[3] memory _min_amounts) external;\\n\\n    function remove_liquidity_imbalance(uint256[3] memory _amounts, uint256 _max_burn_amount)\\n        external\\n        returns (uint256);\\n}\\n\\ninterface IStableSwap4x is IStableSwap {\\n    function calc_token_amount(uint256[4] memory _amounts, bool is_deposit) external view returns (uint256);\\n\\n    function add_liquidity(uint256[4] memory _amounts, uint256 _min_mint_amount) external;\\n\\n    function remove_liquidity(uint256 _amount, uint256[4] memory _min_amounts) external;\\n\\n    function remove_liquidity_imbalance(uint256[4] memory _amounts, uint256 _max_burn_amount)\\n        external\\n        returns (uint256);\\n}\\n\\ninterface IStableSwap2xUnderlying is IStableSwap2x, IStableSwapUnderlying {\\n    function add_liquidity(\\n        uint256[2] calldata amounts,\\n        uint256 min_mint_amount,\\n        bool use_underlying\\n    ) external;\\n\\n    function remove_liquidity_imbalance(\\n        uint256[2] calldata amounts,\\n        uint256 max_burn_amount,\\n        bool use_underlying\\n    ) external;\\n\\n    function remove_liquidity(\\n        uint256 amount,\\n        uint256[2] calldata min_amounts,\\n        bool use_underlying\\n    ) external;\\n}\\n\\ninterface IStableSwap3xUnderlying is IStableSwap3x, IStableSwapUnderlying {\\n    function add_liquidity(\\n        uint256[3] calldata amounts,\\n        uint256 min_mint_amount,\\n        bool use_underlying\\n    ) external;\\n\\n    function remove_liquidity_imbalance(\\n        uint256[3] calldata amounts,\\n        uint256 max_burn_amount,\\n        bool use_underlying\\n    ) external;\\n\\n    function remove_liquidity(\\n        uint256 amount,\\n        uint256[3] calldata min_amounts,\\n        bool use_underlying\\n    ) external;\\n}\\n\\ninterface IStableSwap4xUnderlying is IStableSwap4x, IStableSwapUnderlying {\\n    function add_liquidity(\\n        uint256[4] calldata amounts,\\n        uint256 min_mint_amount,\\n        bool use_underlying\\n    ) external;\\n\\n    function remove_liquidity_imbalance(\\n        uint256[4] calldata amounts,\\n        uint256 max_burn_amount,\\n        bool use_underlying\\n    ) external;\\n\\n    function remove_liquidity(\\n        uint256 amount,\\n        uint256[4] calldata min_amounts,\\n        bool use_underlying\\n    ) external;\\n}\\n\\n/* solhint-enable */\\n\"\r\n    },\r\n    \"contracts/interfaces/curve/ITokenMinter.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n/* solhint-disable */\\npragma solidity 0.8.3;\\n\\n// Not a complete interface, but should have what we need\\ninterface ITokenMinter {\\n    function minted(address arg0, address arg1) external view returns (uint256);\\n\\n    function mint(address gauge_addr) external;\\n}\\n/* solhint-enable */\\n\"\r\n    },\r\n    \"contracts/interfaces/vesper/IStrategy.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity 0.8.3;\\n\\ninterface IStrategy {\\n    function rebalance() external;\\n\\n    function sweepERC20(address _fromToken) external;\\n\\n    function withdraw(uint256 _amount) external;\\n\\n    function feeCollector() external view returns (address);\\n\\n    function isReservedToken(address _token) external view returns (bool);\\n\\n    function keepers() external view returns (address[] memory);\\n\\n    function migrate(address _newStrategy) external;\\n\\n    function token() external view returns (address);\\n\\n    function totalValue() external view returns (uint256);\\n\\n    function totalValueCurrent() external returns (uint256);\\n\\n    function pool() external view returns (address);\\n}\\n\"\r\n    },\r\n    \"contracts/interfaces/vesper/IVesperPool.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity 0.8.3;\\nimport \\\"@openzeppelin/contracts/token/ERC20/IERC20.sol\\\";\\n\\ninterface IVesperPool is IERC20 {\\n    function deposit() external payable;\\n\\n    function deposit(uint256 _share) external;\\n\\n    function multiTransfer(address[] memory _recipients, uint256[] memory _amounts) external returns (bool);\\n\\n    function excessDebt(address _strategy) external view returns (uint256);\\n\\n    function permit(\\n        address,\\n        address,\\n        uint256,\\n        uint256,\\n        uint8,\\n        bytes32,\\n        bytes32\\n    ) external;\\n\\n    function poolRewards() external returns (address);\\n\\n    function reportEarning(\\n        uint256 _profit,\\n        uint256 _loss,\\n        uint256 _payback\\n    ) external;\\n\\n    function reportLoss(uint256 _loss) external;\\n\\n    function resetApproval() external;\\n\\n    function sweepERC20(address _fromToken) external;\\n\\n    function withdraw(uint256 _amount) external;\\n\\n    function withdrawETH(uint256 _amount) external;\\n\\n    function whitelistedWithdraw(uint256 _amount) external;\\n\\n    function governor() external view returns (address);\\n\\n    function keepers() external view returns (address[] memory);\\n\\n    function isKeeper(address _address) external view returns (bool);\\n\\n    function maintainers() external view returns (address[] memory);\\n\\n    function isMaintainer(address _address) external view returns (bool);\\n\\n    function feeCollector() external view returns (address);\\n\\n    function pricePerShare() external view returns (uint256);\\n\\n    function strategy(address _strategy)\\n        external\\n        view\\n        returns (\\n            bool _active,\\n            uint256 _interestFee,\\n            uint256 _debtRate,\\n            uint256 _lastRebalance,\\n            uint256 _totalDebt,\\n            uint256 _totalLoss,\\n            uint256 _totalProfit,\\n            uint256 _debtRatio\\n        );\\n\\n    function stopEverything() external view returns (bool);\\n\\n    function token() external view returns (IERC20);\\n\\n    function tokensHere() external view returns (uint256);\\n\\n    function totalDebtOf(address _strategy) external view returns (uint256);\\n\\n    function totalValue() external view returns (uint256);\\n\\n    function withdrawFee() external view returns (uint256);\\n\\n    // Function to get pricePerShare from V2 pools\\n    function getPricePerShare() external view returns (uint256);\\n}\\n\"\r\n    },\r\n    \"contracts/strategies/Strategy.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity 0.8.3;\\n\\nimport \\\"@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol\\\";\\nimport \\\"@openzeppelin/contracts/utils/Context.sol\\\";\\nimport \\\"../dependencies/openzeppelin/contracts/utils/structs/EnumerableSet.sol\\\";\\nimport \\\"../interfaces/bloq/ISwapManager.sol\\\";\\nimport \\\"../interfaces/vesper/IStrategy.sol\\\";\\nimport \\\"../interfaces/vesper/IVesperPool.sol\\\";\\n\\nabstract contract Strategy is IStrategy, Context {\\n    using SafeERC20 for IERC20;\\n    using EnumerableSet for EnumerableSet.AddressSet;\\n\\n    address internal constant ETH = 0xEeeeeEeeeEeEeeEeEeEeeEEEeeeeEeeeeeeeEEeE;\\n    uint256 internal constant MAX_UINT_VALUE = type(uint256).max;\\n\\n    // solhint-disable-next-line  var-name-mixedcase\\n    address internal WETH = 0xC02aaA39b223FE8D0A0e5C4F27eAD9083C756Cc2;\\n    IERC20 public immutable collateralToken;\\n    address public receiptToken;\\n    address public immutable override pool;\\n    address public override feeCollector;\\n    ISwapManager public swapManager;\\n\\n    uint256 public oraclePeriod = 3600; // 1h\\n    uint256 public oracleRouterIdx = 0; // Uniswap V2\\n    uint256 public swapSlippage = 10000; // 100% Don't use oracles by default\\n\\n    EnumerableSet.AddressSet private _keepers;\\n\\n    event UpdatedFeeCollector(address indexed previousFeeCollector, address indexed newFeeCollector);\\n    event UpdatedSwapManager(address indexed previousSwapManager, address indexed newSwapManager);\\n    event UpdatedSwapSlippage(uint256 oldSwapSlippage, uint256 newSwapSlippage);\\n    event UpdatedOracleConfig(uint256 oldPeriod, uint256 newPeriod, uint256 oldRouterIdx, uint256 newRouterIdx);\\n\\n    constructor(\\n        address _pool,\\n        address _swapManager,\\n        address _receiptToken\\n    ) {\\n        require(_pool != address(0), \\\"pool-address-is-zero\\\");\\n        require(_swapManager != address(0), \\\"sm-address-is-zero\\\");\\n        swapManager = ISwapManager(_swapManager);\\n        pool = _pool;\\n        collateralToken = IVesperPool(_pool).token();\\n        receiptToken = _receiptToken;\\n        require(_keepers.add(_msgSender()), \\\"add-keeper-failed\\\");\\n    }\\n\\n    modifier onlyGovernor {\\n        require(_msgSender() == IVesperPool(pool).governor(), \\\"caller-is-not-the-governor\\\");\\n        _;\\n    }\\n\\n    modifier onlyKeeper() {\\n        require(_keepers.contains(_msgSender()), \\\"caller-is-not-a-keeper\\\");\\n        _;\\n    }\\n\\n    modifier onlyPool() {\\n        require(_msgSender() == pool, \\\"caller-is-not-vesper-pool\\\");\\n        _;\\n    }\\n\\n    /**\\n     * @notice Add given address in keepers list.\\n     * @param _keeperAddress keeper address to add.\\n     */\\n    function addKeeper(address _keeperAddress) external onlyGovernor {\\n        require(_keepers.add(_keeperAddress), \\\"add-keeper-failed\\\");\\n    }\\n\\n    /// @notice Return list of keepers\\n    function keepers() external view override returns (address[] memory) {\\n        return _keepers.values();\\n    }\\n\\n    /**\\n     * @notice Migrate all asset and vault ownership,if any, to new strategy\\n     * @dev _beforeMigration hook can be implemented in child strategy to do extra steps.\\n     * @param _newStrategy Address of new strategy\\n     */\\n    function migrate(address _newStrategy) external virtual override onlyPool {\\n        require(_newStrategy != address(0), \\\"new-strategy-address-is-zero\\\");\\n        require(IStrategy(_newStrategy).pool() == pool, \\\"not-valid-new-strategy\\\");\\n        _beforeMigration(_newStrategy);\\n        IERC20(receiptToken).safeTransfer(_newStrategy, IERC20(receiptToken).balanceOf(address(this)));\\n        collateralToken.safeTransfer(_newStrategy, collateralToken.balanceOf(address(this)));\\n    }\\n\\n    /**\\n     * @notice Remove given address from keepers list.\\n     * @param _keeperAddress keeper address to remove.\\n     */\\n    function removeKeeper(address _keeperAddress) external onlyGovernor {\\n        require(_keepers.remove(_keeperAddress), \\\"remove-keeper-failed\\\");\\n    }\\n\\n    /**\\n     * @notice Update fee collector\\n     * @param _feeCollector fee collector address\\n     */\\n    function updateFeeCollector(address _feeCollector) external onlyGovernor {\\n        require(_feeCollector != address(0), \\\"fee-collector-address-is-zero\\\");\\n        require(_feeCollector != feeCollector, \\\"fee-collector-is-same\\\");\\n        emit UpdatedFeeCollector(feeCollector, _feeCollector);\\n        feeCollector = _feeCollector;\\n    }\\n\\n    /**\\n     * @notice Update swap manager address\\n     * @param _swapManager swap manager address\\n     */\\n    function updateSwapManager(address _swapManager) external onlyGovernor {\\n        require(_swapManager != address(0), \\\"sm-address-is-zero\\\");\\n        require(_swapManager != address(swapManager), \\\"sm-is-same\\\");\\n        emit UpdatedSwapManager(address(swapManager), _swapManager);\\n        swapManager = ISwapManager(_swapManager);\\n    }\\n\\n    function updateSwapSlippage(uint256 _newSwapSlippage) external onlyGovernor {\\n        require(_newSwapSlippage <= 10000, \\\"invalid-slippage-value\\\");\\n        emit UpdatedSwapSlippage(swapSlippage, _newSwapSlippage);\\n        swapSlippage = _newSwapSlippage;\\n    }\\n\\n    function updateOracleConfig(uint256 _newPeriod, uint256 _newRouterIdx) external onlyGovernor {\\n        require(_newRouterIdx < swapManager.N_DEX(), \\\"invalid-router-index\\\");\\n        if (_newPeriod == 0) _newPeriod = oraclePeriod;\\n        require(_newPeriod > 59, \\\"invalid-oracle-period\\\");\\n        emit UpdatedOracleConfig(oraclePeriod, _newPeriod, oracleRouterIdx, _newRouterIdx);\\n        oraclePeriod = _newPeriod;\\n        oracleRouterIdx = _newRouterIdx;\\n    }\\n\\n    /// @dev Approve all required tokens\\n    function approveToken() external onlyKeeper {\\n        _approveToken(0);\\n        _approveToken(MAX_UINT_VALUE);\\n    }\\n\\n    function setupOracles() external onlyKeeper {\\n        _setupOracles();\\n    }\\n\\n    /**\\n     * @dev Withdraw collateral token from lending pool.\\n     * @param _amount Amount of collateral token\\n     */\\n    function withdraw(uint256 _amount) external override onlyPool {\\n        _withdraw(_amount);\\n    }\\n\\n    /**\\n     * @dev Rebalance profit, loss and investment of this strategy\\n     */\\n    function rebalance() external virtual override onlyKeeper {\\n        (uint256 _profit, uint256 _loss, uint256 _payback) = _generateReport();\\n        IVesperPool(pool).reportEarning(_profit, _loss, _payback);\\n        _reinvest();\\n    }\\n\\n    /**\\n     * @dev sweep given token to feeCollector of strategy\\n     * @param _fromToken token address to sweep\\n     */\\n    function sweepERC20(address _fromToken) external override onlyKeeper {\\n        require(feeCollector != address(0), \\\"fee-collector-not-set\\\");\\n        require(_fromToken != address(collateralToken), \\\"not-allowed-to-sweep-collateral\\\");\\n        require(!isReservedToken(_fromToken), \\\"not-allowed-to-sweep\\\");\\n        if (_fromToken == ETH) {\\n            Address.sendValue(payable(feeCollector), address(this).balance);\\n        } else {\\n            uint256 _amount = IERC20(_fromToken).balanceOf(address(this));\\n            IERC20(_fromToken).safeTransfer(feeCollector, _amount);\\n        }\\n    }\\n\\n    /// @notice Returns address of token correspond to collateral token\\n    function token() external view override returns (address) {\\n        return receiptToken;\\n    }\\n\\n    /**\\n     * @notice Calculate total value of asset under management\\n     * @dev Report total value in collateral token\\n     */\\n    function totalValue() public view virtual override returns (uint256 _value);\\n\\n    /**\\n     * @notice Calculate total value of asset under management (in real-time)\\n     * @dev Report total value in collateral token\\n     */\\n    function totalValueCurrent() external virtual override returns (uint256) {\\n        return totalValue();\\n    }\\n\\n    /// @notice Check whether given token is reserved or not. Reserved tokens are not allowed to sweep.\\n    function isReservedToken(address _token) public view virtual override returns (bool);\\n\\n    /**\\n     * @notice some strategy may want to prepare before doing migration.\\n        Example In Maker old strategy want to give vault ownership to new strategy\\n     * @param _newStrategy .\\n     */\\n    function _beforeMigration(address _newStrategy) internal virtual;\\n\\n    /**\\n     *  @notice Generate report for current profit and loss. Also liquidate asset to payback\\n     * excess debt, if any.\\n     * @return _profit Calculate any realized profit and convert it to collateral, if not already.\\n     * @return _loss Calculate any loss that strategy has made on investment. Convert into collateral token.\\n     * @return _payback If strategy has any excess debt, we have to liquidate asset to payback excess debt.\\n     */\\n    function _generateReport()\\n        internal\\n        virtual\\n        returns (\\n            uint256 _profit,\\n            uint256 _loss,\\n            uint256 _payback\\n        )\\n    {\\n        uint256 _excessDebt = IVesperPool(pool).excessDebt(address(this));\\n        uint256 _totalDebt = IVesperPool(pool).totalDebtOf(address(this));\\n        _profit = _realizeProfit(_totalDebt);\\n        _loss = _realizeLoss(_totalDebt);\\n        _payback = _liquidate(_excessDebt);\\n    }\\n\\n    function _calcAmtOutAfterSlippage(uint256 _amount, uint256 _slippage) internal pure returns (uint256) {\\n        return (_amount * (10000 - _slippage)) / (10000);\\n    }\\n\\n    function _simpleOraclePath(address _from, address _to) internal view returns (address[] memory path) {\\n        if (_from == WETH || _to == WETH) {\\n            path = new address[](2);\\n            path[0] = _from;\\n            path[1] = _to;\\n        } else {\\n            path = new address[](3);\\n            path[0] = _from;\\n            path[1] = WETH;\\n            path[2] = _to;\\n        }\\n    }\\n\\n    function _consultOracle(\\n        address _from,\\n        address _to,\\n        uint256 _amt\\n    ) internal returns (uint256, bool) {\\n        for (uint256 i = 0; i < swapManager.N_DEX(); i++) {\\n            (bool _success, bytes memory _returnData) =\\n                address(swapManager).call(\\n                    abi.encodePacked(swapManager.consult.selector, abi.encode(_from, _to, _amt, oraclePeriod, i))\\n                );\\n            if (_success) {\\n                (uint256 rate, uint256 lastUpdate, ) = abi.decode(_returnData, (uint256, uint256, bool));\\n                if ((lastUpdate > (block.timestamp - oraclePeriod)) && (rate != 0)) return (rate, true);\\n                return (0, false);\\n            }\\n        }\\n        return (0, false);\\n    }\\n\\n    function _getOracleRate(address[] memory path, uint256 _amountIn) internal returns (uint256 amountOut) {\\n        require(path.length > 1, \\\"invalid-oracle-path\\\");\\n        amountOut = _amountIn;\\n        bool isValid;\\n        for (uint256 i = 0; i < path.length - 1; i++) {\\n            (amountOut, isValid) = _consultOracle(path[i], path[i + 1], amountOut);\\n            require(isValid, \\\"invalid-oracle-rate\\\");\\n        }\\n    }\\n\\n    /**\\n     * @notice Safe swap via Uniswap / Sushiswap (better rate of the two)\\n     * @dev There are many scenarios when token swap via Uniswap can fail, so this\\n     * method will wrap Uniswap call in a 'try catch' to make it fail safe.\\n     * however, this method will throw minAmountOut is not met\\n     * @param _from address of from token\\n     * @param _to address of to token\\n     * @param _amountIn Amount to be swapped\\n     * @param _minAmountOut minimum amount out\\n     */\\n    function _safeSwap(\\n        address _from,\\n        address _to,\\n        uint256 _amountIn,\\n        uint256 _minAmountOut\\n    ) internal {\\n        (address[] memory path, uint256 amountOut, uint256 rIdx) =\\n            swapManager.bestOutputFixedInput(_from, _to, _amountIn);\\n        if (_minAmountOut == 0) _minAmountOut = 1;\\n        if (amountOut != 0) {\\n            swapManager.ROUTERS(rIdx).swapExactTokensForTokens(\\n                _amountIn,\\n                _minAmountOut,\\n                path,\\n                address(this),\\n                block.timestamp\\n            );\\n        }\\n    }\\n\\n    // These methods can be implemented by the inheriting strategy.\\n    /* solhint-disable no-empty-blocks */\\n    function _claimRewardsAndConvertTo(address _toToken) internal virtual {}\\n\\n    /**\\n     * @notice Set up any oracles that are needed for this strategy.\\n     */\\n    function _setupOracles() internal virtual {}\\n\\n    /* solhint-enable */\\n\\n    // These methods must be implemented by the inheriting strategy\\n    function _withdraw(uint256 _amount) internal virtual;\\n\\n    function _approveToken(uint256 _amount) internal virtual;\\n\\n    /**\\n     * @notice Withdraw collateral to payback excess debt in pool.\\n     * @param _excessDebt Excess debt of strategy in collateral token\\n     * @return _payback amount in collateral token. Usually it is equal to excess debt.\\n     */\\n    function _liquidate(uint256 _excessDebt) internal virtual returns (uint256 _payback);\\n\\n    /**\\n     * @notice Calculate earning and withdraw/convert it into collateral token.\\n     * @param _totalDebt Total collateral debt of this strategy\\n     * @return _profit Profit in collateral token\\n     */\\n    function _realizeProfit(uint256 _totalDebt) internal virtual returns (uint256 _profit);\\n\\n    /**\\n     * @notice Calculate loss\\n     * @param _totalDebt Total collateral debt of this strategy\\n     * @return _loss Realized loss in collateral token\\n     */\\n    function _realizeLoss(uint256 _totalDebt) internal virtual returns (uint256 _loss);\\n\\n    /**\\n     * @notice Reinvest collateral.\\n     * @dev Once we file report back in pool, we might have some collateral in hand\\n     * which we want to reinvest aka deposit in lender/provider.\\n     */\\n    function _reinvest() internal virtual;\\n}\\n\"\r\n    },\r\n    \"contracts/strategies/convex/4Pool/Convex4MetaPoolStrategy.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity 0.8.3;\\n\\nimport \\\"../../curve/4Pool/Crv4MetaPoolStrategy.sol\\\";\\nimport \\\"../ConvexStrategyBase.sol\\\";\\n\\n/// @title This strategy will deposit collateral token in Curve 4MetaPool and stake lp token to convex.\\nabstract contract Convex4MetaPoolStrategy is Crv4MetaPoolStrategy, ConvexStrategyBase {\\n    using SafeERC20 for IERC20;\\n\\n    constructor(\\n        address _pool,\\n        address _swapManager,\\n        address _metapool,\\n        address _gauge,\\n        uint256 _collateralIdx,\\n        uint256 _convexPoolId,\\n        string memory _name\\n    )\\n        Crv4MetaPoolStrategy(_pool, _swapManager, _metapool, _gauge, _collateralIdx, _name)\\n        ConvexStrategyBase(_metapool, _convexPoolId)\\n    {\\n        oracleRouterIdx = 0;\\n    }\\n\\n    /// @dev convex pool can add new rewards. This method refresh list.\\n    function setRewardTokens(\\n        address[] memory /*_rewardTokens*/\\n    ) external override onlyKeeper {\\n        rewardTokens = _getRewardTokens();\\n        _approveToken(0);\\n        _approveToken(MAX_UINT_VALUE);\\n        _setupOracles();\\n    }\\n\\n    function updateClaimRewards(bool _isClaimRewards) external onlyGovernor {\\n        isClaimRewards = _isClaimRewards;\\n    }\\n\\n    function _approveToken(uint256 _amount) internal virtual override {\\n        IERC20(crvLp).safeApprove(BOOSTER, _amount);\\n        super._approveToken(_amount);\\n    }\\n\\n    function _stakeAllLp() internal override {\\n        uint256 balance = IERC20(crvLp).balanceOf(address(this));\\n        if (balance != 0) {\\n            require(IConvex(BOOSTER).deposit(convexPoolId, balance, true), \\\"booster-deposit-failed\\\");\\n        }\\n    }\\n\\n    function _unstakeAllLp() internal override {\\n        Rewards(cvxCrvRewards).withdrawAllAndUnwrap(isClaimRewards);\\n    }\\n\\n    function _unstakeLp(uint256 _amount) internal override {\\n        if (_amount != 0) {\\n            require(Rewards(cvxCrvRewards).withdrawAndUnwrap(_amount, false), \\\"withdraw-and-unwrap-failed\\\");\\n        }\\n    }\\n\\n    function _claimRewards() internal override {\\n        require(Rewards(cvxCrvRewards).getReward(address(this), true), \\\"reward-claim-failed\\\");\\n    }\\n\\n    function totalStaked() public view override returns (uint256 total) {\\n        total = Rewards(cvxCrvRewards).balanceOf(address(this));\\n    }\\n\\n    function totalLp() public view override returns (uint256 total) {\\n        total = IERC20(crvLp).balanceOf(address(this)) + Rewards(cvxCrvRewards).balanceOf(address(this));\\n    }\\n\\n    /// @dev Claimable rewards estimated into pool's collateral value\\n    function claimableRewardsInCollateral() public view virtual override returns (uint256 rewardAsCollateral) {\\n        ClaimableRewardInfo[] memory _claimableRewardsInfo = _claimableRewards();\\n        for (uint256 i = 0; i < _claimableRewardsInfo.length; i++) {\\n            if (_claimableRewardsInfo[i].amount != 0) {\\n                (, uint256 _reward, ) =\\n                    swapManager.bestOutputFixedInput(\\n                        _claimableRewardsInfo[i].token,\\n                        address(collateralToken),\\n                        _claimableRewardsInfo[i].amount\\n                    );\\n                rewardAsCollateral += _reward;\\n            }\\n        }\\n    }\\n}\\n\"\r\n    },\r\n    \"contracts/strategies/convex/4Pool/Convex4MetaPoolStrategyFRAXPool.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity 0.8.3;\\n\\nimport \\\"./Convex4MetaPoolStrategy.sol\\\";\\n\\n//solhint-disable no-empty-blocks\\ncontract Convex4MetaPoolStrategyFRAXPool is Convex4MetaPoolStrategy {\\n    // FRAX-3CRV Metapool\\n    // Composed of [ FRAX , [ DAI, USDC, USDT ]]\\n    address internal constant METAPOOL = 0xd632f22692FaC7611d2AA1C0D552930D43CAEd3B;\\n    // Gauge for FRAX-3CRV Metapool\\n    address internal constant GAUGE = 0x72E158d38dbd50A483501c24f792bDAAA3e7D55C;\\n    // Convex Pool ID for FRAX-3CRV\\n    uint256 internal constant CONVEX_POOL_ID = 32;\\n\\n    constructor(\\n        address _pool,\\n        address _swapManager,\\n        uint256 _collateralIdx,\\n        string memory _name\\n    ) Convex4MetaPoolStrategy(_pool, _swapManager, METAPOOL, GAUGE, _collateralIdx, CONVEX_POOL_ID, _name) {\\n        oracleRouterIdx = 1;\\n    }\\n}\\n\"\r\n    },\r\n    \"contracts/strategies/convex/ConvexStrategyBase.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity 0.8.3;\\nimport \\\"@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol\\\";\\nimport \\\"../../interfaces/convex/IConvex.sol\\\";\\nimport \\\"../../interfaces/convex/IConvexToken.sol\\\";\\n\\n// Convex Strategies common variables and helper functions\\nabstract contract ConvexStrategyBase {\\n    using SafeERC20 for IERC20;\\n\\n    address public constant CVX = 0x4e3FBD56CD56c3e72c1403e103b45Db9da5B9D2B;\\n    address private constant CRV = 0xD533a949740bb3306d119CC777fa900bA034cd52;\\n\\n    address public constant BOOSTER = 0xF403C135812408BFbE8713b5A23a04b3D48AAE31;\\n    address public immutable cvxCrvRewards;\\n    uint256 public immutable convexPoolId;\\n    bool public isClaimRewards;\\n    uint256 internal constant SUSHISWAP_ROUTER_INDEX = 1;\\n\\n    struct ClaimableRewardInfo {\\n        address token;\\n        uint256 amount;\\n    }\\n\\n    constructor(address _crvLp, uint256 _convexPoolId) {\\n        (address _lp, , , address _reward, , ) = IConvex(BOOSTER).poolInfo(_convexPoolId);\\n        require(_lp == address(_crvLp), \\\"incorrect-lp-token\\\");\\n        cvxCrvRewards = _reward;\\n        convexPoolId = _convexPoolId;\\n    }\\n\\n    function _getRewardTokens() internal view returns (address[] memory) {\\n        uint256 extraRewardCount;\\n        for (uint256 i = 0; i < Rewards(cvxCrvRewards).extraRewardsLength(); i++) {\\n            Rewards rewardContract = Rewards(Rewards(cvxCrvRewards).extraRewards(i));\\n            // Some pool has CVX as extra rewards but other do not. CVX still reward token\\n            if (rewardContract.rewardToken() != CRV && rewardContract.rewardToken() != CVX) {\\n                extraRewardCount++;\\n            }\\n        }\\n        address[] memory _rewardTokens = new address[](extraRewardCount + 2);\\n        _rewardTokens[0] = CRV;\\n        _rewardTokens[1] = CVX;\\n        uint256 index = 2;\\n        for (uint256 i = 0; i < Rewards(cvxCrvRewards).extraRewardsLength(); i++) {\\n            Rewards rewardContract = Rewards(Rewards(cvxCrvRewards).extraRewards(i));\\n            // CRV and CVX already added in array\\n            if (rewardContract.rewardToken() != CRV && rewardContract.rewardToken() != CVX) {\\n                _rewardTokens[index] = rewardContract.rewardToken();\\n                index++;\\n            }\\n        }\\n        return _rewardTokens;\\n    }\\n\\n    /// @dev Returns a list of (token, amount) for all rewards claimable in a Convex Pool\\n    function _claimableRewards() internal view returns (ClaimableRewardInfo[] memory) {\\n        uint256 _extraRewardCount = Rewards(cvxCrvRewards).extraRewardsLength();\\n        ClaimableRewardInfo[] memory _claimableRewardsInfo = new ClaimableRewardInfo[](_extraRewardCount + 2);\\n        uint256 _baseReward = Rewards(cvxCrvRewards).earned(address(this));\\n\\n        // CVX rewards are minted proportionally to baseReward (CRV)\\n        uint256 _cvxReward = _calculateCVXRewards(_baseReward);\\n        _claimableRewardsInfo[0] = ClaimableRewardInfo(CRV, _baseReward);\\n        _claimableRewardsInfo[1] = ClaimableRewardInfo(CVX, _cvxReward);\\n\\n        // Don't care if there are additional CRV, or CVX in extraRewards\\n        // total amount will be summed together in claimableRewardsInCollateral()\\n        for (uint256 i = 0; i < _extraRewardCount; i++) {\\n            Rewards _rewardContract = Rewards(Rewards(cvxCrvRewards).extraRewards(i));\\n            _claimableRewardsInfo[2 + i] = ClaimableRewardInfo(\\n                _rewardContract.rewardToken(),\\n                _rewardContract.earned(address(this))\\n            );\\n        }\\n        return _claimableRewardsInfo;\\n    }\\n\\n    // TODO: review this again.  There may be substitute\\n    function _calculateCVXRewards(uint256 _claimableCrvRewards) internal view returns (uint256 _total) {\\n        // CVX Rewards are minted based on CRV rewards claimed upon withdraw\\n        // This will calculate the CVX amount based on CRV rewards accrued\\n        // without having to claim CRV rewards first\\n        // ref 1: https://github.com/convex-eth/platform/blob/main/contracts/contracts/Cvx.sol#L61-L76\\n        // ref 2: https://github.com/convex-eth/platform/blob/main/contracts/contracts/Booster.sol#L458-L466\\n\\n        uint256 _reductionPerCliff = IConvexToken(CVX).reductionPerCliff();\\n        uint256 _totalSupply = IConvexToken(CVX).totalSupply();\\n        uint256 _maxSupply = IConvexToken(CVX).maxSupply();\\n        uint256 _cliff = _totalSupply / _reductionPerCliff;\\n        uint256 _totalCliffs = 1000;\\n\\n        if (_cliff < _totalCliffs) {\\n            //for reduction% take inverse of current cliff\\n            uint256 _reduction = _totalCliffs - _cliff;\\n            //reduce\\n            _total = (_claimableCrvRewards * _reduction) / _totalCliffs;\\n\\n            //supply cap check\\n            uint256 _amtTillMax = _maxSupply - _totalSupply;\\n            if (_total > _amtTillMax) {\\n                _total = _amtTillMax;\\n            }\\n        }\\n    }\\n}\\n\"\r\n    },\r\n    \"contracts/strategies/curve/4Pool/Crv4MetaPoolStrategy.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity 0.8.3;\\n\\nimport \\\"@openzeppelin/contracts/token/ERC20/IERC20.sol\\\";\\nimport \\\"@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol\\\";\\nimport \\\"../../../interfaces/vesper/IVesperPool.sol\\\";\\nimport \\\"../../Strategy.sol\\\";\\nimport \\\"../CrvPoolStrategyBase.sol\\\";\\n\\n/// @title This strategy will deposit collateral token in Curve a 4Pool Metapool and earn interest.\\nabstract contract Crv4MetaPoolStrategy is CrvPoolStrategyBase {\\n    using SafeERC20 for IERC20;\\n\\n    // No. of pooled tokens in the metapool\\n    uint256 private constant N = 4;\\n    // Curve Metapool Factory\\n    address private constant FACTORY = 0x0959158b6040D32d04c301A72CBFD6b39E21c9AE;\\n    // Curve DepositZap Contract\\n    address internal constant DEPOSIT_ZAP = 0xA79828DF1850E8a3A3064576f380D90aECDD3359;\\n\\n    constructor(\\n        address _pool,\\n        address _swapManager,\\n        address _metapool,\\n        address _gauge,\\n        uint256 _collateralIdx,\\n        string memory _name\\n    ) CrvPoolStrategyBase(_pool, _metapool, _metapool, _gauge, _swapManager, _collateralIdx, N, _name) {\\n        require(ILiquidityGaugeV2(_gauge).lp_token() == _metapool, \\\"invalid-gauge\\\");\\n    }\\n\\n    function _init(\\n        address _crvPool,\\n        uint256 /* _n */\\n    ) internal virtual override {\\n        coins = IMetapoolFactory(FACTORY).get_underlying_coins(_crvPool);\\n        coinDecimals = IMetapoolFactory(FACTORY).get_underlying_decimals(_crvPool);\\n    }\\n\\n    function _approveToken(uint256 _amount) internal virtual override {\\n        super._approveToken(_amount);\\n        collateralToken.safeApprove(DEPOSIT_ZAP, _amount);\\n        IERC20(crvLp).safeApprove(DEPOSIT_ZAP, _amount);\\n    }\\n\\n    function _depositToCurve(uint256 _amt) internal virtual override returns (bool) {\\n        if (_amt != 0) {\\n            uint256[4] memory _depositAmounts;\\n            _depositAmounts[collIdx] = _amt;\\n            uint256 expectedOut =\\n                _calcAmtOutAfterSlippage(\\n                    IDepositZap4x(DEPOSIT_ZAP).calc_token_amount(crvLp, _depositAmounts, true),\\n                    crvSlippage\\n                );\\n            uint256 _minLpAmount =\\n                ((_amt * _getSafeUsdRate()) / crvPool.get_virtual_price()) * 10**(18 - coinDecimals[collIdx]);\\n\\n            if (expectedOut > _minLpAmount) _minLpAmount = expectedOut;\\n\\n            // solhint-disable-next-line no-empty-blocks\\n            try IDepositZap4x(DEPOSIT_ZAP).add_liquidity(crvLp, _depositAmounts, _minLpAmount) {} catch Error(\\n                string memory _reason\\n            ) {\\n                emit DepositFailed(_reason);\\n                return false;\\n            }\\n        }\\n        return true;\\n    }\\n\\n    function _withdrawAsFromCrvPool(\\n        uint256 _lpAmount,\\n        uint256 _minAmt,\\n        uint256 _i\\n    ) internal virtual override {\\n        IDepositZap4x(DEPOSIT_ZAP).remove_liquidity_one_coin(crvLp, _lpAmount, SafeCast.toInt128(int256(_i)), _minAmt);\\n    }\\n\\n    function getLpValueAs(uint256 _lpAmount, uint256 _i) public view virtual override returns (uint256) {\\n        return\\n            (_lpAmount != 0)\\n                ? IDepositZap4x(DEPOSIT_ZAP).calc_withdraw_one_coin(crvLp, _lpAmount, SafeCast.toInt128(int256(_i)))\\n                : 0;\\n    }\\n\\n    function _claimRewards() internal virtual override {\\n        ITokenMinter(CRV_MINTER).mint(crvGauge);\\n        ILiquidityGaugeV2(crvGauge).claim_rewards(address(this));\\n    }\\n}\\n\"\r\n    },\r\n    \"contracts/strategies/curve/CrvBase.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity 0.8.3;\\n\\nimport \\\"@openzeppelin/contracts/token/ERC20/IERC20.sol\\\";\\nimport \\\"@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol\\\";\\nimport \\\"@openzeppelin/contracts/utils/math/SafeCast.sol\\\";\\nimport \\\"../../interfaces/curve/IStableSwap.sol\\\";\\nimport \\\"../../interfaces/curve/ILiquidityGauge.sol\\\";\\nimport \\\"../../interfaces/curve/ITokenMinter.sol\\\";\\nimport \\\"../../interfaces/curve/IMetapoolFactory.sol\\\";\\nimport \\\"../../interfaces/curve/IDepositZap.sol\\\";\\n\\nabstract contract CrvBase {\\n    using SafeERC20 for IERC20;\\n\\n    address public constant CRV_MINTER = 0xd061D61a4d941c39E5453435B6345Dc261C2fcE0;\\n\\n    // solhint-disable-next-line  var-name-mixedcase\\n    address public CRV = 0xD533a949740bb3306d119CC777fa900bA034cd52;\\n    IStableSwapUnderlying public immutable crvPool;\\n    address public immutable crvLp;\\n    address public immutable crvGauge;\\n\\n    constructor(\\n        address _pool,\\n        address _lp,\\n        address _gauge\\n    ) {\\n        require(_pool != address(0x0), \\\"CRVMgr: invalid curve pool\\\");\\n        require(_lp != address(0x0), \\\"CRVMgr: invalid lp token\\\");\\n        require(_gauge != address(0x0), \\\"CRVMgr: invalid gauge\\\");\\n\\n        crvPool = IStableSwapUnderlying(_pool);\\n        crvLp = _lp;\\n        crvGauge = _gauge;\\n    }\\n\\n    function _minimumLpPrice(uint256 _safeRate) internal view returns (uint256) {\\n        return ((crvPool.get_virtual_price() * _safeRate) / 1e18);\\n    }\\n\\n    function _withdrawAsFromCrvPool(\\n        uint256 _lpAmount,\\n        uint256 _minAmt,\\n        uint256 i\\n    ) internal virtual {\\n        crvPool.remove_liquidity_one_coin(_lpAmount, SafeCast.toInt128(int256(i)), _minAmt);\\n    }\\n\\n    function _withdrawAllAs(uint256 i) internal virtual {\\n        uint256 lpAmt = IERC20(crvLp).balanceOf(address(this));\\n        if (lpAmt != 0) {\\n            crvPool.remove_liquidity_one_coin(lpAmt, SafeCast.toInt128(int256(i)), 0);\\n        }\\n    }\\n\\n    function calcWithdrawLpAs(uint256 _amtNeeded, uint256 i)\\n        public\\n        view\\n        returns (uint256 lpToWithdraw, uint256 unstakeAmt)\\n    {\\n        uint256 lp = getLp();\\n        uint256 tlp = totalLp();\\n        lpToWithdraw = (_amtNeeded * tlp) / getLpValueAs(tlp, i);\\n        lpToWithdraw = (lpToWithdraw > tlp) ? tlp : lpToWithdraw;\\n        if (lpToWithdraw > lp) {\\n            unstakeAmt = lpToWithdraw - lp;\\n        }\\n    }\\n\\n    function getLpValueAs(uint256 _lpAmount, uint256 i) public view virtual returns (uint256) {\\n        return (_lpAmount != 0) ? crvPool.calc_withdraw_one_coin(_lpAmount, SafeCast.toInt128(int256(i))) : 0;\\n    }\\n\\n    // While this is inaccurate in terms of slippage, this gives us the\\n    // best estimate (least manipulatable value) to calculate share price\\n    function getLpValue(uint256 _lpAmount) public view virtual returns (uint256) {\\n        return (_lpAmount != 0) ? (crvPool.get_virtual_price() * _lpAmount) / 1e18 : 0;\\n    }\\n\\n    function setCheckpoint() external {\\n        _setCheckpoint();\\n    }\\n\\n    // requires that gauge has approval for lp token\\n    function _stakeAllLp() internal virtual {\\n        uint256 balance = IERC20(crvLp).balanceOf(address(this));\\n        if (balance != 0) {\\n            ILiquidityGaugeV2(crvGauge).deposit(balance);\\n        }\\n    }\\n\\n    function _unstakeAllLp() internal virtual {\\n        _unstakeLp(IERC20(crvGauge).balanceOf(address(this)));\\n    }\\n\\n    function _unstakeLp(uint256 _amount) internal virtual {\\n        if (_amount != 0) {\\n            ILiquidityGaugeV2(crvGauge).withdraw(_amount);\\n        }\\n    }\\n\\n    function _claimRewards() internal virtual {\\n        ITokenMinter(CRV_MINTER).mint(crvGauge);\\n    }\\n\\n    function _setCheckpoint() internal virtual {\\n        ILiquidityGaugeV2(crvGauge).user_checkpoint(address(this));\\n    }\\n\\n    function totalStaked() public view virtual returns (uint256 total) {\\n        total = IERC20(crvGauge).balanceOf(address(this));\\n    }\\n\\n    function totalLp() public view virtual returns (uint256 total) {\\n        total = getLp() + IERC20(crvGauge).balanceOf(address(this));\\n    }\\n\\n    // Gets LP value not staked in gauge\\n    function getLp() public view virtual returns (uint256 total) {\\n        total = IERC20(crvLp).balanceOf(address(this));\\n    }\\n}\\n\"\r\n    },\r\n    \"contracts/strategies/curve/CrvPoolStrategyBase.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity 0.8.3;\\n\\nimport \\\"@openzeppelin/contracts/token/ERC20/IERC20.sol\\\";\\nimport \\\"@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol\\\";\\nimport \\\"@openzeppelin/contracts/token/ERC20/extensions/IERC20Metadata.sol\\\";\\nimport \\\"../../interfaces/vesper/IVesperPool.sol\\\";\\nimport \\\"../Strategy.sol\\\";\\nimport \\\"./CrvBase.sol\\\";\\n\\n/// @title This strategy will deposit collateral token in a Curve Pool and earn interest.\\nabstract contract CrvPoolStrategyBase is CrvBase, Strategy {\\n    using SafeERC20 for IERC20;\\n\\n    // solhint-disable-next-line var-name-mixedcase\\n    string public NAME;\\n    string public constant VERSION = \\\"4.0.0\\\";\\n\\n    mapping(address => bool) internal reservedToken;\\n\\n    uint256 public immutable collIdx;\\n    uint256 public usdRate;\\n    uint256 public usdRateTimestamp;\\n\\n    address[] public coins;\\n    uint256[] public coinDecimals;\\n    address[] public rewardTokens;\\n    bool public depositError;\\n\\n    uint256 public crvSlippage = 10; // 10000 is 100%; 10 is 0.1%\\n    uint256 public decimalConversionFactor; // It will be used in converting value to/from 18 decimals\\n\\n    // No. of pooled tokens in the Pool\\n    uint256 internal immutable n;\\n    event UpdatedCrvSlippage(uint256 oldCrvSlippage, uint256 newCrvSlippage);\\n\\n    event DepositFailed(string reason);\\n\\n    constructor(\\n        address _pool,\\n        address _crvPool,\\n        address _crvLp,\\n        address _crvGauge,\\n        address _swapManager,\\n        uint256 _collateralIdx,\\n        uint256 _n,\\n        string memory _name\\n    )\\n        CrvBase(_crvPool, _crvLp, _crvGauge) // 3Pool Manager\\n        Strategy(_pool, _swapManager, _crvLp)\\n    {\\n        require(_collateralIdx < _n, \\\"invalid-collateral\\\");\\n\\n        n = _n;\\n        reservedToken[_crvLp] = true;\\n        reservedToken[CRV] = true;\\n        collIdx = _collateralIdx;\\n        _init(_crvPool, _n);\\n        require(coins[_collateralIdx] == address(IVesperPool(_pool).token()), \\\"collateral-mismatch\\\");\\n        // Assuming token supports 18 or less decimals. _init will initialize coins array\\n        uint256 _decimals = IERC20Metadata(coins[_collateralIdx]).decimals();\\n        decimalConversionFactor = 10**(18 - _decimals);\\n        NAME = _name;\\n        rewardTokens.push(CRV);\\n    }\\n\\n    /// @dev Rewards token in gauge can be updated any time. Governor can set reward tokens\\n    /// Different version of gauge has different method to read reward tokens better governor set it\\n    function setRewardTokens(address[] memory _rewardTokens) external virtual onlyGovernor {\\n        rewardTokens = _rewardTokens;\\n        for (uint256 i = 0; i < _rewardTokens.length; i++) {\\n            require(\\n                _rewardTokens[i] != receiptToken &&\\n                    _rewardTokens[i] != address(collateralToken) &&\\n                    _rewardTokens[i] != pool &&\\n                    _rewardTokens[i] != crvLp,\\n                \\\"Invalid reward token\\\"\\n            );\\n            reservedToken[_rewardTokens[i]] = true;\\n        }\\n        _approveToken(0);\\n        _approveToken(MAX_UINT_VALUE);\\n        _setupOracles();\\n    }\\n\\n    function updateCrvSlippage(uint256 _newCrvSlippage) external onlyGovernor {\\n        require(_newCrvSlippage < 10000, \\\"invalid-slippage-value\\\");\\n        emit UpdatedCrvSlippage(crvSlippage, _newCrvSlippage);\\n        crvSlippage - _newCrvSlippage;\\n    }\\n\\n    /// @dev Claimable rewards estimated into pool's collateral value\\n    function claimableRewardsInCollateral() public view virtual returns (uint256 rewardAsCollateral) {\\n        //Total Mintable - Previously minted\\n        uint256 claimable =\\n            ILiquidityGaugeV2(crvGauge).integrate_fraction(address(this)) -\\n                ITokenMinter(CRV_MINTER).minted(address(this), crvGauge);\\n        if (claimable != 0) {\\n            (, rewardAsCollateral, ) = swapManager.bestOutputFixedInput(CRV, address(collateralToken), claimable);\\n        }\\n    }\\n\\n    /// @dev Convert from 18 decimals to token defined decimals.\\n    function convertFrom18(uint256 _amount) public view returns (uint256) {\\n        return _amount / decimalConversionFactor;\\n    }\\n\\n    /// @dev Check whether given token is reserved or not. Reserved tokens are not allowed to sweep.\\n    function isReservedToken(address _token) public view override returns (bool) {\\n        return reservedToken[_token];\\n    }\\n\\n    /**\\n     * @notice Calculate total value of asset under management\\n     * @dev Report total value in collateral token\\n     */\\n    function totalValue() public view virtual override returns (uint256 _value) {\\n        _value =\\n            collateralToken.balanceOf(address(this)) +\\n            convertFrom18(_calcAmtOutAfterSlippage(getLpValue(totalLp()), crvSlippage)) +\\n            claimableRewardsInCollateral();\\n    }\\n\\n    function _setupOracles() internal virtual override {\\n        _safeCreateOrUpdateOracle(CRV, WETH);\\n        for (uint256 i = 0; i < n; i++) {\\n            _safeCreateOrUpdateOracle(coins[i], WETH);\\n        }\\n        for (uint256 i = 0; i < rewardTokens.length; i++) {\\n            _safeCreateOrUpdateOracle(rewardTokens[i], WETH);\\n        }\\n    }\\n\\n    /**\\n     * @dev Creates Oracle pair preventing revert if it doesn't exist in a DEX\\n     */\\n    function _safeCreateOrUpdateOracle(address _tokenA, address _tokenB) internal {\\n        for (uint256 i = 0; i < swapManager.N_DEX(); i++) {\\n            // solhint-disable no-empty-blocks\\n            try swapManager.createOrUpdateOracle(_tokenA, _tokenB, oraclePeriod, i) {\\n                break;\\n            } catch Error(\\n                string memory /* reason */\\n            ) {}\\n            // solhint-enable no-empty-blocks\\n        }\\n    }\\n\\n    // given the rates of 3 stablecoins compared with a common denominator\\n    // return the lowest divided by the highest\\n    function _getSafeUsdRate() internal returns (uint256) {\\n        // use a stored rate if we've looked it up recently\\n        if (usdRateTimestamp > block.timestamp - oraclePeriod && usdRate != 0) return usdRate;\\n        // otherwise, calculate a rate and store it.\\n        uint256 lowest;\\n        uint256 highest;\\n        for (uint256 i = 0; i < n; i++) {\\n            // get the rate for $1\\n            (uint256 rate, bool isValid) = _consultOracle(coins[i], WETH, 10**coinDecimals[i]);\\n            if (isValid) {\\n                if (lowest == 0 || rate < lowest) {\\n                    lowest = rate;\\n                }\\n                if (highest < rate) {\\n                    highest = rate;\\n                }\\n            }\\n        }\\n        // We only need to check one of them because if a single valid rate is returned,\\n        // highest == lowest and highest > 0 && lowest > 0\\n        require(lowest != 0, \\\"no-oracle-rates\\\");\\n        usdRateTimestamp = block.timestamp;\\n        usdRate = (lowest * 1e18) / highest;\\n        return usdRate;\\n    }\\n\\n    function _approveToken(uint256 _amount) internal virtual override {\\n        collateralToken.safeApprove(pool, _amount);\\n        collateralToken.safeApprove(address(crvPool), _amount);\\n        for (uint256 j = 0; j < swapManager.N_DEX(); j++) {\\n            for (uint256 i = 0; i < rewardTokens.length; i++) {\\n                IERC20(rewardTokens[i]).safeApprove(address(swapManager.ROUTERS(j)), _amount);\\n            }\\n            collateralToken.safeApprove(address(swapManager.ROUTERS(j)), _amount);\\n        }\\n        IERC20(crvLp).safeApprove(crvGauge, _amount);\\n    }\\n\\n    function _init(address _crvPool, uint256 _n) internal virtual {\\n        for (uint256 i = 0; i < _n; i++) {\\n            coins.push(IStableSwapUnderlying(_crvPool).coins(i));\\n            coinDecimals.push(IERC20Metadata(coins[i]).decimals());\\n        }\\n    }\\n\\n    function _reinvest() internal override {\\n        depositError = false;\\n        uint256 amt = collateralToken.balanceOf(address(this));\\n        depositError = !_depositToCurve(amt);\\n        _stakeAllLp();\\n    }\\n\\n    function _depositToCurve(uint256 amt) internal virtual returns (bool) {\\n        if (amt != 0) {\\n            uint256[3] memory depositAmounts;\\n            depositAmounts[collIdx] = amt;\\n            uint256 expectedOut =\\n                _calcAmtOutAfterSlippage(\\n                    IStableSwap3xUnderlying(address(crvPool)).calc_token_amount(depositAmounts, true),\\n                    crvSlippage\\n                );\\n            uint256 minLpAmount =\\n                ((amt * _getSafeUsdRate()) / crvPool.get_virtual_price()) * 10**(18 - coinDecimals[collIdx]);\\n            if (expectedOut > minLpAmount) minLpAmount = expectedOut;\\n            // solhint-disable-next-line no-empty-blocks\\n            try IStableSwap3xUnderlying(address(crvPool)).add_liquidity(depositAmounts, minLpAmount) {} catch Error(\\n                string memory reason\\n            ) {\\n                emit DepositFailed(reason);\\n                return false;\\n            }\\n        }\\n        return true;\\n    }\\n\\n    function _withdraw(uint256 _amount) internal override {\\n        // This adds some gas but will save loss on exchange fees\\n        uint256 balanceHere = collateralToken.balanceOf(address(this));\\n        if (_amount > balanceHere) {\\n            _unstakeAndWithdrawAsCollateral(_amount - balanceHere);\\n        }\\n        collateralToken.safeTransfer(pool, _amount);\\n    }\\n\\n    function _unstakeAndWithdrawAsCollateral(uint256 _amount) internal returns (uint256 toWithdraw) {\\n        if (_amount == 0) return 0;\\n        uint256 i = collIdx;\\n        (uint256 lpToWithdraw, uint256 unstakeAmt) = calcWithdrawLpAs(_amount, i);\\n        _unstakeLp(unstakeAmt);\\n        uint256 minAmtOut =\\n            convertFrom18(\\n                (lpToWithdraw * _calcAmtOutAfterSlippage(_minimumLpPrice(_getSafeUsdRate()), crvSlippage)) / 1e18\\n            );\\n        _withdrawAsFromCrvPool(lpToWithdraw, minAmtOut, i);\\n        toWithdraw = collateralToken.balanceOf(address(this));\\n        if (toWithdraw > _amount) toWithdraw = _amount;\\n    }\\n\\n    /**\\n     * @notice some strategy may want to prepare before doing migration. \\n        Example In Maker old strategy want to give vault ownership to new strategy\\n     */\\n    function _beforeMigration(\\n        address /*_newStrategy*/\\n    ) internal override {\\n        _unstakeAllLp();\\n    }\\n\\n    /**\\n     * @notice Curve pool may have more than one reward token. Child contract should override _claimRewards\\n     */\\n    function _claimRewardsAndConvertTo(address _toToken) internal virtual override {\\n        _claimRewards();\\n        for (uint256 i = 0; i < rewardTokens.length; i++) {\\n            uint256 _amt = IERC20(rewardTokens[i]).balanceOf(address(this));\\n            if (_amt != 0) {\\n                uint256 _minAmtOut;\\n                if (swapSlippage < 10000) {\\n                    (uint256 _minWethOut, bool _isValid) = _consultOracle(rewardTokens[i], WETH, _amt);\\n                    (uint256 _minTokenOut, bool _isValidTwo) = _consultOracle(WETH, _toToken, _minWethOut);\\n                    require(_isValid, \\\"stale-reward-oracle\\\");\\n                    require(_isValidTwo, \\\"stale-collateral-oracle\\\");\\n                    _minAmtOut = _calcAmtOutAfterSlippage(_minTokenOut, swapSlippage);\\n                }\\n                _safeSwap(rewardTokens[i], _toToken, _amt, _minAmtOut);\\n            }\\n        }\\n    }\\n\\n    /**\\n     * @notice Withdraw collateral to payback excess debt in pool.\\n     * @param _excessDebt Excess debt of strategy in collateral token\\n     * @param _extra additional amount to unstake and withdraw, in collateral token\\n     * @return _payback amount in collateral token. Usually it is equal to excess debt.\\n     */\\n    function _liquidate(uint256 _excessDebt, uint256 _extra) internal returns (uint256 _payback) {\\n        _payback = _unstakeAndWithdrawAsCollateral(_excessDebt + _extra);\\n        // we dont want to return a value greater than we need to\\n        if (_payback > _excessDebt) _payback = _excessDebt;\\n    }\\n\\n    function _realizeLoss(uint256 _totalDebt) internal view override returns (uint256 _loss) {\\n        uint256 _collateralBalance = convertFrom18(_calcAmtOutAfterSlippage(getLpValue(totalLp()), crvSlippage));\\n        if (_collateralBalance < _totalDebt) {\\n            _loss = _totalDebt - _collateralBalance;\\n        }\\n    }\\n\\n    function _realizeGross(uint256 _totalDebt)\\n        internal\\n        virtual\\n        returns (\\n            uint256 _profit,\\n            uint256 _loss,\\n            uint256 _toUnstake\\n        )\\n    {\\n        uint256 baseline = collateralToken.balanceOf(address(this));\\n        _claimRewardsAndConvertTo(address(collateralToken));\\n        uint256 newBalance = collateralToken.balanceOf(address(this));\\n        _profit = newBalance - baseline;\\n\\n        uint256 _collateralBalance =\\n            baseline + convertFrom18(_calcAmtOutAfterSlippage(getLpValue(totalLp()), crvSlippage));\\n        if (_collateralBalance > _totalDebt) {\\n            _profit += _collateralBalance - _totalDebt;\\n        } else {\\n            _loss = _totalDebt - _collateralBalance;\\n        }\\n\\n        if (_profit > _loss) {\\n            _profit = _profit - _loss;\\n            _loss = 0;\\n            if (_profit > newBalance) _toUnstake = _profit - newBalance;\\n        } else {\\n            _loss = _loss - _profit;\\n            _profit = 0;\\n        }\\n    }\\n\\n    function _generateReport()\\n        internal\\n        virtual\\n        override\\n        returns (\\n            uint256 _profit,\\n            uint256 _loss,\\n            uint256 _payback\\n        )\\n    {\\n        uint256 _excessDebt = IVesperPool(pool).excessDebt(address(this));\\n        uint256 _totalDebt = IVesperPool(pool).totalDebtOf(address(this));\\n        uint256 _toUnstake;\\n        (_profit, _loss, _toUnstake) = _realizeGross(_totalDebt);\\n        // only make call to unstake and withdraw once\\n        _payback = _liquidate(_excessDebt, _toUnstake);\\n    }\\n\\n    function rebalance() external virtual override onlyKeeper {\\n        (uint256 _profit, uint256 _loss, uint256 _payback) = _generateReport();\\n        IVesperPool(pool).reportEarning(_profit, _loss, _payback);\\n        _reinvest();\\n        if (!depositError) {\\n            uint256 _depositLoss = _realizeLoss(IVesperPool(pool).totalDebtOf(address(this)));\\n            IVesperPool(pool).reportLoss(_depositLoss);\\n        }\\n    }\\n\\n    // Unused\\n    /* solhint-disable no-empty-blocks */\\n\\n    function _liquidate(uint256 _excessDebt) internal override returns (uint256 _payback) {}\\n\\n    function _realizeProfit(uint256 _totalDebt) internal override returns (uint256 _profit) {}\\n}\\n\"\r\n    }\r\n  }\r\n}}","ABI":"[{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_pool\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_swapManager\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_collateralIdx\",\"type\":\"uint256\"},{\"internalType\":\"string\",\"name\":\"_name\",\"type\":\"string\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"string\",\"name\":\"reason\",\"type\":\"string\"}],\"name\":\"DepositFailed\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"oldCrvSlippage\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"newCrvSlippage\",\"type\":\"uint256\"}],\"name\":\"UpdatedCrvSlippage\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousFeeCollector\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newFeeCollector\",\"type\":\"address\"}],\"name\":\"UpdatedFeeCollector\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"oldPeriod\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"newPeriod\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"oldRouterIdx\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"newRouterIdx\",\"type\":\"uint256\"}],\"name\":\"UpdatedOracleConfig\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousSwapManager\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newSwapManager\",\"type\":\"address\"}],\"name\":\"UpdatedSwapManager\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"oldSwapSlippage\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"newSwapSlippage\",\"type\":\"uint256\"}],\"name\":\"UpdatedSwapSlippage\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"BOOSTER\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"CRV\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"CRV_MINTER\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"CVX\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"NAME\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"VERSION\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_keeperAddress\",\"type\":\"address\"}],\"name\":\"addKeeper\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"approveToken\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_amtNeeded\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"i\",\"type\":\"uint256\"}],\"name\":\"calcWithdrawLpAs\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"lpToWithdraw\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"unstakeAmt\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"claimableRewardsInCollateral\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"rewardAsCollateral\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"coinDecimals\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"coins\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"collIdx\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"collateralToken\",\"outputs\":[{\"internalType\":\"contract IERC20\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"convertFrom18\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"convexPoolId\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"crvGauge\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"crvLp\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"crvPool\",\"outputs\":[{\"internalType\":\"contract IStableSwapUnderlying\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"crvSlippage\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"cvxCrvRewards\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"decimalConversionFactor\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"depositError\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"feeCollector\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getLp\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"total\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_lpAmount\",\"type\":\"uint256\"}],\"name\":\"getLpValue\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_lpAmount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_i\",\"type\":\"uint256\"}],\"name\":\"getLpValueAs\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"isClaimRewards\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_token\",\"type\":\"address\"}],\"name\":\"isReservedToken\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"keepers\",\"outputs\":[{\"internalType\":\"address[]\",\"name\":\"\",\"type\":\"address[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_newStrategy\",\"type\":\"address\"}],\"name\":\"migrate\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"oraclePeriod\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"oracleRouterIdx\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"pool\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"rebalance\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"receiptToken\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_keeperAddress\",\"type\":\"address\"}],\"name\":\"removeKeeper\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"rewardTokens\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"setCheckpoint\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address[]\",\"name\":\"\",\"type\":\"address[]\"}],\"name\":\"setRewardTokens\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"setupOracles\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"swapManager\",\"outputs\":[{\"internalType\":\"contract ISwapManager\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"swapSlippage\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_fromToken\",\"type\":\"address\"}],\"name\":\"sweepERC20\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"token\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalLp\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"total\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalStaked\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"total\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalValue\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"_value\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalValueCurrent\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bool\",\"name\":\"_isClaimRewards\",\"type\":\"bool\"}],\"name\":\"updateClaimRewards\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_newCrvSlippage\",\"type\":\"uint256\"}],\"name\":\"updateCrvSlippage\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_feeCollector\",\"type\":\"address\"}],\"name\":\"updateFeeCollector\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_newPeriod\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_newRouterIdx\",\"type\":\"uint256\"}],\"name\":\"updateOracleConfig\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_swapManager\",\"type\":\"address\"}],\"name\":\"updateSwapManager\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_newSwapSlippage\",\"type\":\"uint256\"}],\"name\":\"updateSwapSlippage\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"usdRate\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"usdRateTimestamp\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"withdraw\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}]","ContractName":"Convex4MetaPoolStrategyFRAXPool","CompilerVersion":"v0.8.3+commit.8d00100c","OptimizationUsed":"1","Runs":"100","ConstructorArguments":"000000000000000000000000c14900dfb1aa54e7674e1ecf9ce02b3b35157ba5000000000000000000000000e382d9f2394a359b01006faa8a1864b8a60d271000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000080000000000000000000000000000000000000000000000000000000000000001f436f6e766578344d657461506f6f6c537472617465677946524158506f6f6c00","EVMVersion":"Default","Library":"","LicenseType":"MIT","Proxy":"0","Implementation":"","SwarmSource":""}]}