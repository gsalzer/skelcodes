{"status":"1","message":"OK","result":[{"SourceCode":"pragma solidity =0.8.4;\r\n\r\ninterface IPOWNFTPartial{\r\n    function mine(uint nonce) external payable;\r\n    function transferFrom(address _from, address _to, uint256 _tokenId) external;\r\n}\r\n\r\ncontract Learning01 {\r\n    \r\n    IPOWNFTPartial mainContract = IPOWNFTPartial(0x9Abb7BdDc43FA67c76a62d8C016513827f59bE1b);\r\n    address private owner;\r\n\r\n    constructor() {\r\n        owner = msg.sender;\r\n    }\r\n\r\n    function guarded_mine(\r\n        uint token_id,\r\n        uint generation,\r\n        uint cost,\r\n        uint minAtomicNumber,\r\n        uint nonce,\r\n        bytes32 pre_hash\r\n    ) external payable {\r\n        bytes32 hash = keccak256(abi.encodePacked(pre_hash, block.timestamp));\r\n        uint atomicNumber = calculateAtomicNumber(token_id, hash, generation);\r\n        if(atomicNumber>minAtomicNumber) { \r\n            mainContract.mine{value: cost}(nonce);\r\n            mainContract.transferFrom(address(this), msg.sender, token_id);\r\n        }\r\n    }\r\n    \r\n    function withdraw(address payable to) external {\r\n        require(msg.sender == owner);\r\n        to.transfer(address(this).balance);\r\n    }\r\n\r\n    /// @notice Round up to calculate \"ceil\".\r\n    /// @dev Because the metadata uses Javascript's Math.ceil\r\n    /// @param a Number to round\r\n    /// @param m Round up to the nearest 'm'\r\n    /// @return Rounded up 'a'\r\n    function ceil(uint a, uint m) internal pure returns (uint ) {\r\n        return ((a + m - 1) / m) * m;\r\n    }\r\n\r\n    /// @notice Calculate atomic number for a given tokenId and token hash\r\n    /// @dev The reason it needs both is that atomic number is partially based on tokenId.\r\n    /// @param _tokenId The tokenId of the Atom\r\n    /// @param _hash Hash of Atom\r\n    /// @return Atomic number of the given Atom\r\n    function calculateAtomicNumber(uint _tokenId, bytes32 _hash, uint generation) private pure returns(uint){\r\n        if(_tokenId == 1) return 0;\r\n\r\n        bytes32 divisor = 0x0000000001000000000000000000000000000000000000000000000000000000;\r\n        uint salt = uint(_hash)/uint(divisor);\r\n\r\n        uint max;\r\n        if(generation >= 13){\r\n            max = 118;\r\n        }else if(generation >= 11){\r\n            max = 86;\r\n        }else if(generation >= 9){\r\n            max = 54;\r\n        }else if(generation >= 7){\r\n            max = 36;\r\n        }else if(generation >= 5){\r\n            max = 18;\r\n        }else if(generation >= 3){\r\n            max = 10;\r\n        }else if(generation >= 1){\r\n            max = 2;\r\n        }\r\n\r\n        uint gg;\r\n        if(generation >= 8){\r\n            gg = 2;\r\n        }else{\r\n            gg = 1;\r\n        }\r\n\r\n\r\n        uint decimal = 10000000000000000;\r\n        uint divisor2 = uint(0xFFFFFFFFFF);\r\n\r\n\r\n        uint unrounded = max * decimal * (salt ** gg) / (divisor2 ** gg);\r\n        uint rounded = ceil(\r\n            unrounded,\r\n            decimal\r\n        );\r\n        return rounded/decimal;\r\n    }\r\n    \r\n}","ABI":"[{\"inputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"token_id\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"generation\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"cost\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"minAtomicNumber\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"nonce\",\"type\":\"uint256\"},{\"internalType\":\"bytes32\",\"name\":\"pre_hash\",\"type\":\"bytes32\"}],\"name\":\"guarded_mine\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address payable\",\"name\":\"to\",\"type\":\"address\"}],\"name\":\"withdraw\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}]","ContractName":"Learning01","CompilerVersion":"v0.8.4+commit.c7e474f2","OptimizationUsed":"0","Runs":"200","ConstructorArguments":"","EVMVersion":"Default","Library":"","LicenseType":"None","Proxy":"0","Implementation":"","SwarmSource":"ipfs://64b53678b38c335073bd492c5132ba9c591d7812db28493c8566a274c4be5633"}]}