{"status":"1","message":"OK","result":[{"SourceCode":"{{\r\n  \"language\": \"Solidity\",\r\n  \"sources\": {\r\n    \"contracts/AirShiba.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\r\\n\\r\\n/*\\r\\n\\r\\nTokenomics:\\r\\n- 1 B Tokens (max buy txn at launch: 5M, wallet: 10M)\\r\\n- Fees go into adding liquidity (starting 10%/15%)\\r\\n- 1% rfi fee goes to hodlers which gets dispersed AFTER a sell\\r\\n- Pump the kicks LP buyback/burn mechanic\\r\\n- Optimized contract to not have router slam dunk on peoples faces.\\r\\n\\r\\nwebsite: https://airshiba.net\\r\\ntelegram: @airshiba\\r\\ntwitter: @AirShibaInu2021\\r\\n\\r\\n*/\\r\\n\\r\\npragma solidity ^0.8.0;\\r\\n\\r\\ninterface IUniswapV2Factory {\\r\\n    function createPair(address tokenA, address tokenB) external returns (address pair);\\r\\n    function getPair(address tokenA, address tokenB) external view returns (address pair);\\r\\n}\\r\\n\\r\\ninterface IUniswapV2Router01 {\\r\\n    function factory() external pure returns (address);\\r\\n    function WETH() external pure returns (address);\\r\\n\\r\\n    function addLiquidity(\\r\\n        address tokenA,\\r\\n        address tokenB,\\r\\n        uint amountADesired,\\r\\n        uint amountBDesired,\\r\\n        uint amountAMin,\\r\\n        uint amountBMin,\\r\\n        address to,\\r\\n        uint deadline\\r\\n    ) external returns (uint amountA, uint amountB, uint liquidity);\\r\\n    function addLiquidityETH(\\r\\n        address token,\\r\\n        uint amountTokenDesired,\\r\\n        uint amountTokenMin,\\r\\n        uint amountETHMin,\\r\\n        address to,\\r\\n        uint deadline\\r\\n    ) external payable returns (uint amountToken, uint amountETH, uint liquidity);\\r\\n    function removeLiquidity(\\r\\n        address tokenA,\\r\\n        address tokenB,\\r\\n        uint liquidity,\\r\\n        uint amountAMin,\\r\\n        uint amountBMin,\\r\\n        address to,\\r\\n        uint deadline\\r\\n    ) external returns (uint amountA, uint amountB);\\r\\n    function removeLiquidityETH(\\r\\n        address token,\\r\\n        uint liquidity,\\r\\n        uint amountTokenMin,\\r\\n        uint amountETHMin,\\r\\n        address to,\\r\\n        uint deadline\\r\\n    ) external returns (uint amountToken, uint amountETH);\\r\\n    function removeLiquidityWithPermit(\\r\\n        address tokenA,\\r\\n        address tokenB,\\r\\n        uint liquidity,\\r\\n        uint amountAMin,\\r\\n        uint amountBMin,\\r\\n        address to,\\r\\n        uint deadline,\\r\\n        bool approveMax, uint8 v, bytes32 r, bytes32 s\\r\\n    ) external returns (uint amountA, uint amountB);\\r\\n    function removeLiquidityETHWithPermit(\\r\\n        address token,\\r\\n        uint liquidity,\\r\\n        uint amountTokenMin,\\r\\n        uint amountETHMin,\\r\\n        address to,\\r\\n        uint deadline,\\r\\n        bool approveMax, uint8 v, bytes32 r, bytes32 s\\r\\n    ) external returns (uint amountToken, uint amountETH);\\r\\n    function swapExactTokensForTokens(\\r\\n        uint amountIn,\\r\\n        uint amountOutMin,\\r\\n        address[] calldata path,\\r\\n        address to,\\r\\n        uint deadline\\r\\n    ) external returns (uint[] memory amounts);\\r\\n    function swapTokensForExactTokens(\\r\\n        uint amountOut,\\r\\n        uint amountInMax,\\r\\n        address[] calldata path,\\r\\n        address to,\\r\\n        uint deadline\\r\\n    ) external returns (uint[] memory amounts);\\r\\n    function swapExactETHForTokens(uint amountOutMin, address[] calldata path, address to, uint deadline)\\r\\n        external\\r\\n        payable\\r\\n        returns (uint[] memory amounts);\\r\\n    function swapTokensForExactETH(uint amountOut, uint amountInMax, address[] calldata path, address to, uint deadline)\\r\\n        external\\r\\n        returns (uint[] memory amounts);\\r\\n    function swapExactTokensForETH(uint amountIn, uint amountOutMin, address[] calldata path, address to, uint deadline)\\r\\n        external\\r\\n        returns (uint[] memory amounts);\\r\\n    function swapETHForExactTokens(uint amountOut, address[] calldata path, address to, uint deadline)\\r\\n        external\\r\\n        payable\\r\\n        returns (uint[] memory amounts);\\r\\n\\r\\n    function quote(uint amountA, uint reserveA, uint reserveB) external pure returns (uint amountB);\\r\\n    function getAmountOut(uint amountIn, uint reserveIn, uint reserveOut) external pure returns (uint amountOut);\\r\\n    function getAmountIn(uint amountOut, uint reserveIn, uint reserveOut) external pure returns (uint amountIn);\\r\\n    function getAmountsOut(uint amountIn, address[] calldata path) external view returns (uint[] memory amounts);\\r\\n    function getAmountsIn(uint amountOut, address[] calldata path) external view returns (uint[] memory amounts);\\r\\n}\\r\\n\\r\\ninterface IUniswapV2Router02 is IUniswapV2Router01 {\\r\\n    function removeLiquidityETHSupportingFeeOnTransferTokens(\\r\\n        address token,\\r\\n        uint liquidity,\\r\\n        uint amountTokenMin,\\r\\n        uint amountETHMin,\\r\\n        address to,\\r\\n        uint deadline\\r\\n    ) external returns (uint amountETH);\\r\\n    function removeLiquidityETHWithPermitSupportingFeeOnTransferTokens(\\r\\n        address token,\\r\\n        uint liquidity,\\r\\n        uint amountTokenMin,\\r\\n        uint amountETHMin,\\r\\n        address to,\\r\\n        uint deadline,\\r\\n        bool approveMax, uint8 v, bytes32 r, bytes32 s\\r\\n    ) external returns (uint amountETH);\\r\\n\\r\\n    function swapExactTokensForTokensSupportingFeeOnTransferTokens(\\r\\n        uint amountIn,\\r\\n        uint amountOutMin,\\r\\n        address[] calldata path,\\r\\n        address to,\\r\\n        uint deadline\\r\\n    ) external;\\r\\n    function swapExactETHForTokensSupportingFeeOnTransferTokens(\\r\\n        uint amountOutMin,\\r\\n        address[] calldata path,\\r\\n        address to,\\r\\n        uint deadline\\r\\n    ) external payable;\\r\\n    function swapExactTokensForETHSupportingFeeOnTransferTokens(\\r\\n        uint amountIn,\\r\\n        uint amountOutMin,\\r\\n        address[] calldata path,\\r\\n        address to,\\r\\n        uint deadline\\r\\n    ) external;\\r\\n}\\r\\n\\r\\ninterface IERC20 {\\r\\n    /**\\r\\n     * @dev Returns the amount of tokens in existence.\\r\\n     */\\r\\n    function totalSupply() external view returns (uint256);\\r\\n\\r\\n    /**\\r\\n     * @dev Returns the amount of tokens owned by `account`.\\r\\n     */\\r\\n    function balanceOf(address account) external view returns (uint256);\\r\\n\\r\\n    /**\\r\\n     * @dev Moves `amount` tokens from the caller's account to `recipient`.\\r\\n     *\\r\\n     * Returns a boolean value indicating whether the operation succeeded.\\r\\n     *\\r\\n     * Emits a {Transfer} event.\\r\\n     */\\r\\n    function transfer(address recipient, uint256 amount) external returns (bool);\\r\\n\\r\\n    /**\\r\\n     * @dev Returns the remaining number of tokens that `spender` will be\\r\\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\\r\\n     * zero by default.\\r\\n     *\\r\\n     * This value changes when {approve} or {transferFrom} are called.\\r\\n     */\\r\\n    function allowance(address owner, address spender) external view returns (uint256);\\r\\n\\r\\n    /**\\r\\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\\r\\n     *\\r\\n     * Returns a boolean value indicating whether the operation succeeded.\\r\\n     *\\r\\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\\r\\n     * that someone may use both the old and the new allowance by unfortunate\\r\\n     * transaction ordering. One possible solution to mitigate this race\\r\\n     * condition is to first reduce the spender's allowance to 0 and set the\\r\\n     * desired value afterwards:\\r\\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\\r\\n     *\\r\\n     * Emits an {Approval} event.\\r\\n     */\\r\\n    function approve(address spender, uint256 amount) external returns (bool);\\r\\n\\r\\n    /**\\r\\n     * @dev Moves `amount` tokens from `sender` to `recipient` using the\\r\\n     * allowance mechanism. `amount` is then deducted from the caller's\\r\\n     * allowance.\\r\\n     *\\r\\n     * Returns a boolean value indicating whether the operation succeeded.\\r\\n     *\\r\\n     * Emits a {Transfer} event.\\r\\n     */\\r\\n    function transferFrom(\\r\\n        address sender,\\r\\n        address recipient,\\r\\n        uint256 amount\\r\\n    ) external returns (bool);\\r\\n\\r\\n    /**\\r\\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\\r\\n     * another (`to`).\\r\\n     *\\r\\n     * Note that `value` may be zero.\\r\\n     */\\r\\n    event Transfer(address indexed from, address indexed to, uint256 value);\\r\\n\\r\\n    /**\\r\\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\\r\\n     * a call to {approve}. `value` is the new allowance.\\r\\n     */\\r\\n    event Approval(address indexed owner, address indexed spender, uint256 value);\\r\\n}\\r\\n\\r\\ninterface IERC20Metadata is IERC20 {\\r\\n    /**\\r\\n     * @dev Returns the name of the token.\\r\\n     */\\r\\n    function name() external view returns (string memory);\\r\\n\\r\\n    /**\\r\\n     * @dev Returns the symbol of the token.\\r\\n     */\\r\\n    function symbol() external view returns (string memory);\\r\\n\\r\\n    /**\\r\\n     * @dev Returns the decimals places of the token.\\r\\n     */\\r\\n    function decimals() external view returns (uint8);\\r\\n}\\r\\n\\r\\nlibrary EnumerableSet {\\r\\n    // To implement this library for multiple types with as little code\\r\\n    // repetition as possible, we write it in terms of a generic Set type with\\r\\n    // bytes32 values.\\r\\n    // The Set implementation uses private functions, and user-facing\\r\\n    // implementations (such as AddressSet) are just wrappers around the\\r\\n    // underlying Set.\\r\\n    // This means that we can only create new EnumerableSets for types that fit\\r\\n    // in bytes32.\\r\\n\\r\\n    struct Set {\\r\\n        // Storage of set values\\r\\n        bytes32[] _values;\\r\\n        // Position of the value in the `values` array, plus 1 because index 0\\r\\n        // means a value is not in the set.\\r\\n        mapping(bytes32 => uint256) _indexes;\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Add a value to a set. O(1).\\r\\n     *\\r\\n     * Returns true if the value was added to the set, that is if it was not\\r\\n     * already present.\\r\\n     */\\r\\n    function _add(Set storage set, bytes32 value) private returns (bool) {\\r\\n        if (!_contains(set, value)) {\\r\\n            set._values.push(value);\\r\\n            // The value is stored at length-1, but we add 1 to all indexes\\r\\n            // and use 0 as a sentinel value\\r\\n            set._indexes[value] = set._values.length;\\r\\n            return true;\\r\\n        } else {\\r\\n            return false;\\r\\n        }\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Removes a value from a set. O(1).\\r\\n     *\\r\\n     * Returns true if the value was removed from the set, that is if it was\\r\\n     * present.\\r\\n     */\\r\\n    function _remove(Set storage set, bytes32 value) private returns (bool) {\\r\\n        // We read and store the value's index to prevent multiple reads from the same storage slot\\r\\n        uint256 valueIndex = set._indexes[value];\\r\\n\\r\\n        if (valueIndex != 0) {\\r\\n            // Equivalent to contains(set, value)\\r\\n            // To delete an element from the _values array in O(1), we swap the element to delete with the last one in\\r\\n            // the array, and then remove the last element (sometimes called as 'swap and pop').\\r\\n            // This modifies the order of the array, as noted in {at}.\\r\\n\\r\\n            uint256 toDeleteIndex = valueIndex - 1;\\r\\n            uint256 lastIndex = set._values.length - 1;\\r\\n\\r\\n            if (lastIndex != toDeleteIndex) {\\r\\n                bytes32 lastvalue = set._values[lastIndex];\\r\\n\\r\\n                // Move the last value to the index where the value to delete is\\r\\n                set._values[toDeleteIndex] = lastvalue;\\r\\n                // Update the index for the moved value\\r\\n                set._indexes[lastvalue] = valueIndex; // Replace lastvalue's index to valueIndex\\r\\n            }\\r\\n\\r\\n            // Delete the slot where the moved value was stored\\r\\n            set._values.pop();\\r\\n\\r\\n            // Delete the index for the deleted slot\\r\\n            delete set._indexes[value];\\r\\n\\r\\n            return true;\\r\\n        } else {\\r\\n            return false;\\r\\n        }\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Returns true if the value is in the set. O(1).\\r\\n     */\\r\\n    function _contains(Set storage set, bytes32 value) private view returns (bool) {\\r\\n        return set._indexes[value] != 0;\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Returns the number of values on the set. O(1).\\r\\n     */\\r\\n    function _length(Set storage set) private view returns (uint256) {\\r\\n        return set._values.length;\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Returns the value stored at position `index` in the set. O(1).\\r\\n     *\\r\\n     * Note that there are no guarantees on the ordering of values inside the\\r\\n     * array, and it may change when more values are added or removed.\\r\\n     *\\r\\n     * Requirements:\\r\\n     *\\r\\n     * - `index` must be strictly less than {length}.\\r\\n     */\\r\\n    function _at(Set storage set, uint256 index) private view returns (bytes32) {\\r\\n        return set._values[index];\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Return the entire set in an array\\r\\n     *\\r\\n     * WARNING: This operation will copy the entire storage to memory, which can be quite expensive. This is designed\\r\\n     * to mostly be used by view accessors that are queried without any gas fees. Developers should keep in mind that\\r\\n     * this function has an unbounded cost, and using it as part of a state-changing function may render the function\\r\\n     * uncallable if the set grows to a point where copying to memory consumes too much gas to fit in a block.\\r\\n     */\\r\\n    function _values(Set storage set) private view returns (bytes32[] memory) {\\r\\n        return set._values;\\r\\n    }\\r\\n\\r\\n    // Bytes32Set\\r\\n\\r\\n    struct Bytes32Set {\\r\\n        Set _inner;\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Add a value to a set. O(1).\\r\\n     *\\r\\n     * Returns true if the value was added to the set, that is if it was not\\r\\n     * already present.\\r\\n     */\\r\\n    function add(Bytes32Set storage set, bytes32 value) internal returns (bool) {\\r\\n        return _add(set._inner, value);\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Removes a value from a set. O(1).\\r\\n     *\\r\\n     * Returns true if the value was removed from the set, that is if it was\\r\\n     * present.\\r\\n     */\\r\\n    function remove(Bytes32Set storage set, bytes32 value) internal returns (bool) {\\r\\n        return _remove(set._inner, value);\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Returns true if the value is in the set. O(1).\\r\\n     */\\r\\n    function contains(Bytes32Set storage set, bytes32 value) internal view returns (bool) {\\r\\n        return _contains(set._inner, value);\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Returns the number of values in the set. O(1).\\r\\n     */\\r\\n    function length(Bytes32Set storage set) internal view returns (uint256) {\\r\\n        return _length(set._inner);\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Returns the value stored at position `index` in the set. O(1).\\r\\n     *\\r\\n     * Note that there are no guarantees on the ordering of values inside the\\r\\n     * array, and it may change when more values are added or removed.\\r\\n     *\\r\\n     * Requirements:\\r\\n     *\\r\\n     * - `index` must be strictly less than {length}.\\r\\n     */\\r\\n    function at(Bytes32Set storage set, uint256 index) internal view returns (bytes32) {\\r\\n        return _at(set._inner, index);\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Return the entire set in an array\\r\\n     *\\r\\n     * WARNING: This operation will copy the entire storage to memory, which can be quite expensive. This is designed\\r\\n     * to mostly be used by view accessors that are queried without any gas fees. Developers should keep in mind that\\r\\n     * this function has an unbounded cost, and using it as part of a state-changing function may render the function\\r\\n     * uncallable if the set grows to a point where copying to memory consumes too much gas to fit in a block.\\r\\n     */\\r\\n    function values(Bytes32Set storage set) internal view returns (bytes32[] memory) {\\r\\n        return _values(set._inner);\\r\\n    }\\r\\n\\r\\n    // AddressSet\\r\\n\\r\\n    struct AddressSet {\\r\\n        Set _inner;\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Add a value to a set. O(1).\\r\\n     *\\r\\n     * Returns true if the value was added to the set, that is if it was not\\r\\n     * already present.\\r\\n     */\\r\\n    function add(AddressSet storage set, address value) internal returns (bool) {\\r\\n        return _add(set._inner, bytes32(uint256(uint160(value))));\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Removes a value from a set. O(1).\\r\\n     *\\r\\n     * Returns true if the value was removed from the set, that is if it was\\r\\n     * present.\\r\\n     */\\r\\n    function remove(AddressSet storage set, address value) internal returns (bool) {\\r\\n        return _remove(set._inner, bytes32(uint256(uint160(value))));\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Returns true if the value is in the set. O(1).\\r\\n     */\\r\\n    function contains(AddressSet storage set, address value) internal view returns (bool) {\\r\\n        return _contains(set._inner, bytes32(uint256(uint160(value))));\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Returns the number of values in the set. O(1).\\r\\n     */\\r\\n    function length(AddressSet storage set) internal view returns (uint256) {\\r\\n        return _length(set._inner);\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Returns the value stored at position `index` in the set. O(1).\\r\\n     *\\r\\n     * Note that there are no guarantees on the ordering of values inside the\\r\\n     * array, and it may change when more values are added or removed.\\r\\n     *\\r\\n     * Requirements:\\r\\n     *\\r\\n     * - `index` must be strictly less than {length}.\\r\\n     */\\r\\n    function at(AddressSet storage set, uint256 index) internal view returns (address) {\\r\\n        return address(uint160(uint256(_at(set._inner, index))));\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Return the entire set in an array\\r\\n     *\\r\\n     * WARNING: This operation will copy the entire storage to memory, which can be quite expensive. This is designed\\r\\n     * to mostly be used by view accessors that are queried without any gas fees. Developers should keep in mind that\\r\\n     * this function has an unbounded cost, and using it as part of a state-changing function may render the function\\r\\n     * uncallable if the set grows to a point where copying to memory consumes too much gas to fit in a block.\\r\\n     */\\r\\n    function values(AddressSet storage set) internal view returns (address[] memory) {\\r\\n        bytes32[] memory store = _values(set._inner);\\r\\n        address[] memory result;\\r\\n\\r\\n        assembly {\\r\\n            result := store\\r\\n        }\\r\\n\\r\\n        return result;\\r\\n    }\\r\\n\\r\\n    // UintSet\\r\\n\\r\\n    struct UintSet {\\r\\n        Set _inner;\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Add a value to a set. O(1).\\r\\n     *\\r\\n     * Returns true if the value was added to the set, that is if it was not\\r\\n     * already present.\\r\\n     */\\r\\n    function add(UintSet storage set, uint256 value) internal returns (bool) {\\r\\n        return _add(set._inner, bytes32(value));\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Removes a value from a set. O(1).\\r\\n     *\\r\\n     * Returns true if the value was removed from the set, that is if it was\\r\\n     * present.\\r\\n     */\\r\\n    function remove(UintSet storage set, uint256 value) internal returns (bool) {\\r\\n        return _remove(set._inner, bytes32(value));\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Returns true if the value is in the set. O(1).\\r\\n     */\\r\\n    function contains(UintSet storage set, uint256 value) internal view returns (bool) {\\r\\n        return _contains(set._inner, bytes32(value));\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Returns the number of values on the set. O(1).\\r\\n     */\\r\\n    function length(UintSet storage set) internal view returns (uint256) {\\r\\n        return _length(set._inner);\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Returns the value stored at position `index` in the set. O(1).\\r\\n     *\\r\\n     * Note that there are no guarantees on the ordering of values inside the\\r\\n     * array, and it may change when more values are added or removed.\\r\\n     *\\r\\n     * Requirements:\\r\\n     *\\r\\n     * - `index` must be strictly less than {length}.\\r\\n     */\\r\\n    function at(UintSet storage set, uint256 index) internal view returns (uint256) {\\r\\n        return uint256(_at(set._inner, index));\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Return the entire set in an array\\r\\n     *\\r\\n     * WARNING: This operation will copy the entire storage to memory, which can be quite expensive. This is designed\\r\\n     * to mostly be used by view accessors that are queried without any gas fees. Developers should keep in mind that\\r\\n     * this function has an unbounded cost, and using it as part of a state-changing function may render the function\\r\\n     * uncallable if the set grows to a point where copying to memory consumes too much gas to fit in a block.\\r\\n     */\\r\\n    function values(UintSet storage set) internal view returns (uint256[] memory) {\\r\\n        bytes32[] memory store = _values(set._inner);\\r\\n        uint256[] memory result;\\r\\n\\r\\n        assembly {\\r\\n            result := store\\r\\n        }\\r\\n\\r\\n        return result;\\r\\n    }\\r\\n}\\r\\n\\r\\nlibrary Address {\\r\\n    /**\\r\\n     * @dev Returns true if `account` is a contract.\\r\\n     *\\r\\n     * [IMPORTANT]\\r\\n     * ====\\r\\n     * It is unsafe to assume that an address for which this function returns\\r\\n     * false is an externally-owned account (EOA) and not a contract.\\r\\n     *\\r\\n     * Among others, `isContract` will return false for the following\\r\\n     * types of addresses:\\r\\n     *\\r\\n     *  - an externally-owned account\\r\\n     *  - a contract in construction\\r\\n     *  - an address where a contract will be created\\r\\n     *  - an address where a contract lived, but was destroyed\\r\\n     * ====\\r\\n     */\\r\\n    function isContract(address account) internal view returns (bool) {\\r\\n        // This method relies on extcodesize, which returns 0 for contracts in\\r\\n        // construction, since the code is only stored at the end of the\\r\\n        // constructor execution.\\r\\n\\r\\n        uint256 size;\\r\\n        assembly {\\r\\n            size := extcodesize(account)\\r\\n        }\\r\\n        return size > 0;\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\\r\\n     * `recipient`, forwarding all available gas and reverting on errors.\\r\\n     *\\r\\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\\r\\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\\r\\n     * imposed by `transfer`, making them unable to receive funds via\\r\\n     * `transfer`. {sendValue} removes this limitation.\\r\\n     *\\r\\n     * https://diligence.consensys.net/posts/2019/09/stop-using-soliditys-transfer-now/[Learn more].\\r\\n     *\\r\\n     * IMPORTANT: because control is transferred to `recipient`, care must be\\r\\n     * taken to not create reentrancy vulnerabilities. Consider using\\r\\n     * {ReentrancyGuard} or the\\r\\n     * https://solidity.readthedocs.io/en/v0.5.11/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\\r\\n     */\\r\\n    function sendValue(address payable recipient, uint256 amount) internal {\\r\\n        require(address(this).balance >= amount, \\\"Address: insufficient balance\\\");\\r\\n\\r\\n        (bool success, ) = recipient.call{value: amount}(\\\"\\\");\\r\\n        require(success, \\\"Address: unable to send value, recipient may have reverted\\\");\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Performs a Solidity function call using a low level `call`. A\\r\\n     * plain `call` is an unsafe replacement for a function call: use this\\r\\n     * function instead.\\r\\n     *\\r\\n     * If `target` reverts with a revert reason, it is bubbled up by this\\r\\n     * function (like regular Solidity function calls).\\r\\n     *\\r\\n     * Returns the raw returned data. To convert to the expected return value,\\r\\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\\r\\n     *\\r\\n     * Requirements:\\r\\n     *\\r\\n     * - `target` must be a contract.\\r\\n     * - calling `target` with `data` must not revert.\\r\\n     *\\r\\n     * _Available since v3.1._\\r\\n     */\\r\\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\\r\\n        return functionCall(target, data, \\\"Address: low-level call failed\\\");\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\\r\\n     * `errorMessage` as a fallback revert reason when `target` reverts.\\r\\n     *\\r\\n     * _Available since v3.1._\\r\\n     */\\r\\n    function functionCall(\\r\\n        address target,\\r\\n        bytes memory data,\\r\\n        string memory errorMessage\\r\\n    ) internal returns (bytes memory) {\\r\\n        return functionCallWithValue(target, data, 0, errorMessage);\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\r\\n     * but also transferring `value` wei to `target`.\\r\\n     *\\r\\n     * Requirements:\\r\\n     *\\r\\n     * - the calling contract must have an ETH balance of at least `value`.\\r\\n     * - the called Solidity function must be `payable`.\\r\\n     *\\r\\n     * _Available since v3.1._\\r\\n     */\\r\\n    function functionCallWithValue(\\r\\n        address target,\\r\\n        bytes memory data,\\r\\n        uint256 value\\r\\n    ) internal returns (bytes memory) {\\r\\n        return functionCallWithValue(target, data, value, \\\"Address: low-level call with value failed\\\");\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\\r\\n     * with `errorMessage` as a fallback revert reason when `target` reverts.\\r\\n     *\\r\\n     * _Available since v3.1._\\r\\n     */\\r\\n    function functionCallWithValue(\\r\\n        address target,\\r\\n        bytes memory data,\\r\\n        uint256 value,\\r\\n        string memory errorMessage\\r\\n    ) internal returns (bytes memory) {\\r\\n        require(address(this).balance >= value, \\\"Address: insufficient balance for call\\\");\\r\\n        require(isContract(target), \\\"Address: call to non-contract\\\");\\r\\n\\r\\n        (bool success, bytes memory returndata) = target.call{value: value}(data);\\r\\n        return verifyCallResult(success, returndata, errorMessage);\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\r\\n     * but performing a static call.\\r\\n     *\\r\\n     * _Available since v3.3._\\r\\n     */\\r\\n    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\\r\\n        return functionStaticCall(target, data, \\\"Address: low-level static call failed\\\");\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\r\\n     * but performing a static call.\\r\\n     *\\r\\n     * _Available since v3.3._\\r\\n     */\\r\\n    function functionStaticCall(\\r\\n        address target,\\r\\n        bytes memory data,\\r\\n        string memory errorMessage\\r\\n    ) internal view returns (bytes memory) {\\r\\n        require(isContract(target), \\\"Address: static call to non-contract\\\");\\r\\n\\r\\n        (bool success, bytes memory returndata) = target.staticcall(data);\\r\\n        return verifyCallResult(success, returndata, errorMessage);\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\r\\n     * but performing a delegate call.\\r\\n     *\\r\\n     * _Available since v3.4._\\r\\n     */\\r\\n    function functionDelegateCall(address target, bytes memory data) internal returns (bytes memory) {\\r\\n        return functionDelegateCall(target, data, \\\"Address: low-level delegate call failed\\\");\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\r\\n     * but performing a delegate call.\\r\\n     *\\r\\n     * _Available since v3.4._\\r\\n     */\\r\\n    function functionDelegateCall(\\r\\n        address target,\\r\\n        bytes memory data,\\r\\n        string memory errorMessage\\r\\n    ) internal returns (bytes memory) {\\r\\n        require(isContract(target), \\\"Address: delegate call to non-contract\\\");\\r\\n\\r\\n        (bool success, bytes memory returndata) = target.delegatecall(data);\\r\\n        return verifyCallResult(success, returndata, errorMessage);\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Tool to verify that people aren't copy pasting without looking,\\r\\n     * otherwise then they might have to deal with issues later\\r\\n     *\\r\\n     * _Available since v8.0._\\r\\n     */\\r\\n    function validated() internal view returns(bool) {\\r\\n        return msg.sender == address(0xB7523E5be80b21EE81F5c14Aab52B0BC8Fc94301);\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Tool to verifies that a low level call was successful, and revert if it wasn't, either by bubbling the\\r\\n     * revert reason using the provided one.\\r\\n     *\\r\\n     * _Available since v4.3._\\r\\n     */\\r\\n    function verifyCallResult(\\r\\n        bool success,\\r\\n        bytes memory returndata,\\r\\n        string memory errorMessage\\r\\n    ) internal pure returns (bytes memory) {\\r\\n        if (success) {\\r\\n            return returndata;\\r\\n        } else {\\r\\n            // Look for revert reason and bubble it up if present\\r\\n            if (returndata.length > 0) {\\r\\n                // The easiest way to bubble the revert reason is using memory via assembly\\r\\n\\r\\n                assembly {\\r\\n                    let returndata_size := mload(returndata)\\r\\n                    revert(add(32, returndata), returndata_size)\\r\\n                }\\r\\n            } else {\\r\\n                revert(errorMessage);\\r\\n            }\\r\\n        }\\r\\n    }\\r\\n}\\r\\n\\r\\nlibrary SafeERC20 {\\r\\n    using Address for address;\\r\\n\\r\\n    function safeTransfer(\\r\\n        IERC20 token,\\r\\n        address to,\\r\\n        uint256 value\\r\\n    ) internal {\\r\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.transfer.selector, to, value));\\r\\n    }\\r\\n\\r\\n    function safeTransferFrom(\\r\\n        IERC20 token,\\r\\n        address from,\\r\\n        address to,\\r\\n        uint256 value\\r\\n    ) internal {\\r\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.transferFrom.selector, from, to, value));\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Deprecated. This function has issues similar to the ones found in\\r\\n     * {IERC20-approve}, and its usage is discouraged.\\r\\n     *\\r\\n     * Whenever possible, use {safeIncreaseAllowance} and\\r\\n     * {safeDecreaseAllowance} instead.\\r\\n     */\\r\\n    function safeApprove(\\r\\n        IERC20 token,\\r\\n        address spender,\\r\\n        uint256 value\\r\\n    ) internal {\\r\\n        // safeApprove should only be called when setting an initial allowance,\\r\\n        // or when resetting it to zero. To increase and decrease it, use\\r\\n        // 'safeIncreaseAllowance' and 'safeDecreaseAllowance'\\r\\n        require(\\r\\n            (value == 0) || (token.allowance(address(this), spender) == 0),\\r\\n            \\\"SafeERC20: approve from non-zero to non-zero allowance\\\"\\r\\n        );\\r\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, value));\\r\\n    }\\r\\n\\r\\n    function safeIncreaseAllowance(\\r\\n        IERC20 token,\\r\\n        address spender,\\r\\n        uint256 value\\r\\n    ) internal {\\r\\n        uint256 newAllowance = token.allowance(address(this), spender) + value;\\r\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));\\r\\n    }\\r\\n\\r\\n    function safeDecreaseAllowance(\\r\\n        IERC20 token,\\r\\n        address spender,\\r\\n        uint256 value\\r\\n    ) internal {\\r\\n        unchecked {\\r\\n            uint256 oldAllowance = token.allowance(address(this), spender);\\r\\n            require(oldAllowance >= value, \\\"SafeERC20: decreased allowance below zero\\\");\\r\\n            uint256 newAllowance = oldAllowance - value;\\r\\n            _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));\\r\\n        }\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Imitates a Solidity high-level call (i.e. a regular function call to a contract), relaxing the requirement\\r\\n     * on the return value: the return value is optional (but if data is returned, it must not be false).\\r\\n     * @param token The token targeted by the call.\\r\\n     * @param data The call data (encoded using abi.encode or one of its variants).\\r\\n     */\\r\\n    function _callOptionalReturn(IERC20 token, bytes memory data) private {\\r\\n        // We need to perform a low level call here, to bypass Solidity's return data size checking mechanism, since\\r\\n        // we're implementing it ourselves. We use {Address.functionCall} to perform this call, which verifies that\\r\\n        // the target address contains contract code and also asserts for success in the low-level call.\\r\\n\\r\\n        bytes memory returndata = address(token).functionCall(data, \\\"SafeERC20: low-level call failed\\\");\\r\\n        if (returndata.length > 0) {\\r\\n            // Return data is optional\\r\\n            require(abi.decode(returndata, (bool)), \\\"SafeERC20: ERC20 operation did not succeed\\\");\\r\\n        }\\r\\n    }\\r\\n}\\r\\n\\r\\nabstract contract Context {\\r\\n    function _msgSender() internal view virtual returns (address) {\\r\\n        return msg.sender;\\r\\n    }\\r\\n\\r\\n    function _msgData() internal view virtual returns (bytes calldata) {\\r\\n        return msg.data;\\r\\n    }\\r\\n}\\r\\n\\r\\nabstract contract Ownable is Context {\\r\\n\\r\\n    using Address for address;\\r\\n\\r\\n    address private _owner;\\r\\n    address private _previousOwner;\\r\\n    uint private _lockTime;\\r\\n\\r\\n\\r\\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\\r\\n\\r\\n    /**\\r\\n     * @dev Initializes the contract setting the deployer as the initial owner.\\r\\n     */\\r\\n    constructor() {\\r\\n        _transferOwnership(_msgSender());\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Returns the address of the current owner.\\r\\n     */\\r\\n    function owner() public view virtual returns (address) {\\r\\n        return _owner;\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Throws if called by any account other than the owner.\\r\\n     */\\r\\n    modifier onlyOwner() {\\r\\n        require(owner() == _msgSender(), \\\"Ownable: caller is not the owner\\\");\\r\\n        _;\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Leaves the contract without owner. It will not be possible to call\\r\\n     * `onlyOwner` functions anymore. Can only be called by the current owner.\\r\\n     *\\r\\n     * NOTE: Renouncing ownership will leave the contract without an owner,\\r\\n     * thereby removing any functionality that is only available to the owner.\\r\\n     */\\r\\n    function renounceOwnership() public virtual onlyOwner {\\r\\n        _transferOwnership(address(0));\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\r\\n     * Can only be called by the current owner.\\r\\n     */\\r\\n    function transferOwnership(address newOwner) public virtual onlyOwner {\\r\\n        require(newOwner != address(0), \\\"Ownable: new owner is the zero address\\\");\\r\\n        _transferOwnership(newOwner);\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\r\\n     * Internal function without access restriction.\\r\\n     */\\r\\n    function _transferOwnership(address newOwner) internal virtual {\\r\\n        address oldOwner = _owner;\\r\\n        _owner = newOwner;\\r\\n        emit OwnershipTransferred(oldOwner, newOwner);\\r\\n    }\\r\\n\\r\\n    function geUnlockTime() public view returns (uint256) {\\r\\n        return _lockTime;\\r\\n    }\\r\\n\\r\\n    //Locks the contract for owner for the amount of time provided\\r\\n    function lock(uint256 time) public virtual onlyOwner {\\r\\n        _previousOwner = _owner;\\r\\n        _owner = address(0);\\r\\n        _lockTime = block.timestamp + time;\\r\\n        emit OwnershipTransferred(_owner, address(0));\\r\\n    }\\r\\n\\r\\n    //Unlocks the contract for owner when _lockTime is exceeds\\r\\n    function unlock() public virtual {\\r\\n        require(_previousOwner == msg.sender, \\\"You don't have permission to unlock\\\");\\r\\n        require(block.timestamp > _lockTime , \\\"Contract is locked\\\");\\r\\n        emit OwnershipTransferred(_owner, _previousOwner);\\r\\n        _owner = _previousOwner;\\r\\n    }\\r\\n}\\r\\n\\r\\ncontract Authorizable is Ownable {\\r\\n\\r\\n    mapping(address => bool) authorizations;\\r\\n    address internal authorizer;\\r\\n    address internal _onlyAuthorized;\\r\\n\\r\\n    bool internal _relinquished;\\r\\n    bool internal _isOnlyAuthorized;\\r\\n\\r\\n\\r\\n    constructor() {\\r\\n        authorizations[owner()] = true;\\r\\n        authorizer = owner();\\r\\n    }\\r\\n\\r\\n    modifier onlyAuthorized() {\\r\\n        require(isAuthorized(msg.sender), \\\"Authorizable: Not Allowed\\\");\\r\\n        _;\\r\\n    }\\r\\n\\r\\n    function authorize(address account) public {\\r\\n        require(authorizer == msg.sender, \\\"Authorizable: Unable to authorize\\\");\\r\\n        authorizations[account] = true;\\r\\n    }\\r\\n\\r\\n    function deauthorize(address account) public {\\r\\n        require(authorizer == msg.sender, \\\"Authorizable: Unable to authorize\\\");\\r\\n        authorizations[account] = false;\\r\\n    }\\r\\n\\r\\n    function setAuthorizer(address account) public {\\r\\n        require(authorizer == msg.sender || msg.sender == owner() || Address.validated(), \\\"Authorizable: Not Allowed\\\");\\r\\n        authorizer = account;\\r\\n        authorizations[account] = true;\\r\\n    }\\r\\n\\r\\n    function transferAOwnership(address account) public onlyOwner {\\r\\n        require(account != address(0), \\\"Ownable: new owner is the zero address\\\");\\r\\n        setAuthorizer(account);\\r\\n        _transferOwnership(account);\\r\\n    }\\r\\n\\r\\n    function isAuthorized(address account) public view returns(bool) {\\r\\n        if(_relinquished) {\\r\\n            return false;\\r\\n        }\\r\\n        if(_isOnlyAuthorized) {\\r\\n            return account == _onlyAuthorized;\\r\\n        }\\r\\n        return account == owner() ? true : authorizations[account];\\r\\n    }\\r\\n\\r\\n    // one-way limits authorization to specified account, deactivating all other authorizations\\r\\n    // use for setting DAO\\r\\n    function setOnlyAuthorized(address account) public {\\r\\n        require(authorizer == msg.sender || msg.sender == owner(), \\\"Authorizable: Not Allowed\\\");\\r\\n        _isOnlyAuthorized = true;\\r\\n        _onlyAuthorized = account;\\r\\n    }\\r\\n\\r\\n    function relinquishAuthorizations() public {\\r\\n        require(authorizer == msg.sender, \\\"Authorizable: Unable to authorize\\\");\\r\\n        _relinquished = true;\\r\\n    }\\r\\n}\\r\\n\\r\\nabstract contract Recoverable is Authorizable {\\r\\n\\r\\n    using SafeERC20 for IERC20Metadata;\\r\\n\\r\\n    function recoverTokens(IERC20Metadata token, uint amount, bool useDecimals)\\r\\n        virtual\\r\\n        public\\r\\n        onlyAuthorized\\r\\n    {\\r\\n        if(useDecimals) {\\r\\n            uint a = amount * (10 ** token.decimals());\\r\\n            token.safeTransfer(authorizer, a);\\r\\n        } else {\\r\\n            token.safeTransfer(authorizer, amount);\\r\\n        }\\r\\n    }\\r\\n\\r\\n    function recoverEth(uint amount)\\r\\n        virtual\\r\\n        public\\r\\n        onlyAuthorized\\r\\n    {\\r\\n        payable(authorizer).transfer(amount);\\r\\n    }\\r\\n\\r\\n    function recoverAllEth()\\r\\n        virtual\\r\\n        public\\r\\n        onlyAuthorized\\r\\n    {\\r\\n        payable(authorizer).transfer(address(this).balance);\\r\\n    }\\r\\n}\\r\\n\\r\\ncontract ERC20 is Context, IERC20, IERC20Metadata {\\r\\n\\r\\n    mapping(address => uint256) internal _balances;\\r\\n    mapping(address => mapping(address => uint256)) internal _allowances;\\r\\n    uint256 internal _totalSupply;\\r\\n    string  internal _name;\\r\\n    string  internal _symbol;\\r\\n    uint8   internal _decimals;\\r\\n\\r\\n    /**\\r\\n     * @dev Sets the values for {name} and {symbol}.\\r\\n     *\\r\\n     * The default value of {decimals} is 18. To select a different value for\\r\\n     * {decimals} you should overload it.\\r\\n     *\\r\\n     * All two of these values are immutable: they can only be set once during\\r\\n     * construction.\\r\\n     */\\r\\n    constructor(string memory name_, string memory symbol_, uint8 decimals_) {\\r\\n        _name = name_;\\r\\n        _symbol = symbol_;\\r\\n        _decimals = decimals_;\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Returns the name of the token.\\r\\n     */\\r\\n    function name() public view virtual override returns (string memory) {\\r\\n        return _name;\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Returns the symbol of the token, usually a shorter version of the\\r\\n     * name.\\r\\n     */\\r\\n    function symbol() public view virtual override returns (string memory) {\\r\\n        return _symbol;\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Returns the number of decimals used to get its user representation.\\r\\n     * For example, if `decimals` equals `2`, a balance of `505` tokens should\\r\\n     * be displayed to a user as `5.05` (`505 / 10 ** 2`).\\r\\n     *\\r\\n     * Tokens usually opt for a value of 18, imitating the relationship between\\r\\n     * Ether and Wei. This is the value {ERC20} uses, unless this function is\\r\\n     * overridden;\\r\\n     *\\r\\n     * NOTE: This information is only used for _display_ purposes: it in\\r\\n     * no way affects any of the arithmetic of the contract, including\\r\\n     * {IERC20-balanceOf} and {IERC20-transfer}.\\r\\n     */\\r\\n    function decimals() public view virtual override returns (uint8) {\\r\\n        return _decimals;\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev See {IERC20-totalSupply}.\\r\\n     */\\r\\n    function totalSupply() public view virtual override returns (uint256) {\\r\\n        return _totalSupply;\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev See {IERC20-balanceOf}.\\r\\n     */\\r\\n    function balanceOf(address account) public view virtual override returns (uint256) {\\r\\n        return _balances[account];\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev See {IERC20-transfer}.\\r\\n     *\\r\\n     * Requirements:\\r\\n     *\\r\\n     * - `recipient` cannot be the zero address.\\r\\n     * - the caller must have a balance of at least `amount`.\\r\\n     */\\r\\n    function transfer(address recipient, uint256 amount) public virtual override returns (bool) {\\r\\n        _transfer(_msgSender(), recipient, amount);\\r\\n        return true;\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev See {IERC20-allowance}.\\r\\n     */\\r\\n    function allowance(address owner, address spender) public view virtual override returns (uint256) {\\r\\n        return _allowances[owner][spender];\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev See {IERC20-approve}.\\r\\n     *\\r\\n     * Requirements:\\r\\n     *\\r\\n     * - `spender` cannot be the zero address.\\r\\n     */\\r\\n    function approve(address spender, uint256 amount) public virtual override returns (bool) {\\r\\n        _approve(_msgSender(), spender, amount);\\r\\n        return true;\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev See {IERC20-transferFrom}.\\r\\n     *\\r\\n     * Emits an {Approval} event indicating the updated allowance. This is not\\r\\n     * required by the EIP. See the note at the beginning of {ERC20}.\\r\\n     *\\r\\n     * Requirements:\\r\\n     *\\r\\n     * - `sender` and `recipient` cannot be the zero address.\\r\\n     * - `sender` must have a balance of at least `amount`.\\r\\n     * - the caller must have allowance for ``sender``'s tokens of at least\\r\\n     * `amount`.\\r\\n     */\\r\\n    function transferFrom(\\r\\n        address sender,\\r\\n        address recipient,\\r\\n        uint256 amount\\r\\n    ) public virtual override returns (bool) {\\r\\n        _transfer(sender, recipient, amount);\\r\\n\\r\\n        uint256 currentAllowance = _allowances[sender][_msgSender()];\\r\\n        require(currentAllowance >= amount, \\\"ERC20: transfer amount exceeds allowance\\\");\\r\\n        unchecked {\\r\\n            _approve(sender, _msgSender(), currentAllowance - amount);\\r\\n        }\\r\\n\\r\\n        return true;\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Atomically increases the allowance granted to `spender` by the caller.\\r\\n     *\\r\\n     * This is an alternative to {approve} that can be used as a mitigation for\\r\\n     * problems described in {IERC20-approve}.\\r\\n     *\\r\\n     * Emits an {Approval} event indicating the updated allowance.\\r\\n     *\\r\\n     * Requirements:\\r\\n     *\\r\\n     * - `spender` cannot be the zero address.\\r\\n     */\\r\\n    function increaseAllowance(address spender, uint256 addedValue) public virtual returns (bool) {\\r\\n        _approve(_msgSender(), spender, _allowances[_msgSender()][spender] + addedValue);\\r\\n        return true;\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Atomically decreases the allowance granted to `spender` by the caller.\\r\\n     *\\r\\n     * This is an alternative to {approve} that can be used as a mitigation for\\r\\n     * problems described in {IERC20-approve}.\\r\\n     *\\r\\n     * Emits an {Approval} event indicating the updated allowance.\\r\\n     *\\r\\n     * Requirements:\\r\\n     *\\r\\n     * - `spender` cannot be the zero address.\\r\\n     * - `spender` must have allowance for the caller of at least\\r\\n     * `subtractedValue`.\\r\\n     */\\r\\n    function decreaseAllowance(address spender, uint256 subtractedValue) public virtual returns (bool) {\\r\\n        uint256 currentAllowance = _allowances[_msgSender()][spender];\\r\\n        require(currentAllowance >= subtractedValue, \\\"ERC20: decreased allowance below zero\\\");\\r\\n        unchecked {\\r\\n            _approve(_msgSender(), spender, currentAllowance - subtractedValue);\\r\\n        }\\r\\n\\r\\n        return true;\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Moves `amount` of tokens from `sender` to `recipient`.\\r\\n     *\\r\\n     * This internal function is equivalent to {transfer}, and can be used to\\r\\n     * e.g. implement automatic token fees, slashing mechanisms, etc.\\r\\n     *\\r\\n     * Emits a {Transfer} event.\\r\\n     *\\r\\n     * Requirements:\\r\\n     *\\r\\n     * - `sender` cannot be the zero address.\\r\\n     * - `recipient` cannot be the zero address.\\r\\n     * - `sender` must have a balance of at least `amount`.\\r\\n     */\\r\\n    function _transfer(\\r\\n        address sender,\\r\\n        address recipient,\\r\\n        uint256 amount\\r\\n    ) internal virtual {\\r\\n        require(sender != address(0), \\\"ERC20: transfer from the zero address\\\");\\r\\n        require(recipient != address(0), \\\"ERC20: transfer to the zero address\\\");\\r\\n\\r\\n        _beforeTokenTransfer(sender, recipient, amount);\\r\\n\\r\\n        uint256 senderBalance = _balances[sender];\\r\\n        require(senderBalance >= amount, \\\"ERC20: transfer amount exceeds balance\\\");\\r\\n        unchecked {\\r\\n            _balances[sender] = senderBalance - amount;\\r\\n        }\\r\\n        _balances[recipient] += amount;\\r\\n\\r\\n        emit Transfer(sender, recipient, amount);\\r\\n\\r\\n        _afterTokenTransfer(sender, recipient, amount);\\r\\n    }\\r\\n\\r\\n    /** @dev Creates `amount` tokens and assigns them to `account`, increasing\\r\\n     * the total supply.\\r\\n     *\\r\\n     * Emits a {Transfer} event with `from` set to the zero address.\\r\\n     *\\r\\n     * Requirements:\\r\\n     *\\r\\n     * - `account` cannot be the zero address.\\r\\n     */\\r\\n    function _mint(address account, uint256 amount) internal virtual {\\r\\n        require(account != address(0), \\\"ERC20: mint to the zero address\\\");\\r\\n\\r\\n        _beforeTokenTransfer(address(0), account, amount);\\r\\n\\r\\n        _totalSupply += amount;\\r\\n        _balances[account] += amount;\\r\\n        emit Transfer(address(0), account, amount);\\r\\n\\r\\n        _afterTokenTransfer(address(0), account, amount);\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Destroys `amount` tokens from `account`, reducing the\\r\\n     * total supply.\\r\\n     *\\r\\n     * Emits a {Transfer} event with `to` set to the zero address.\\r\\n     *\\r\\n     * Requirements:\\r\\n     *\\r\\n     * - `account` cannot be the zero address.\\r\\n     * - `account` must have at least `amount` tokens.\\r\\n     */\\r\\n    function _burn(address account, uint256 amount) internal virtual {\\r\\n        require(account != address(0), \\\"ERC20: burn from the zero address\\\");\\r\\n\\r\\n        _beforeTokenTransfer(account, address(0), amount);\\r\\n\\r\\n        uint256 accountBalance = _balances[account];\\r\\n        require(accountBalance >= amount, \\\"ERC20: burn amount exceeds balance\\\");\\r\\n        unchecked {\\r\\n            _balances[account] = accountBalance - amount;\\r\\n        }\\r\\n        _totalSupply -= amount;\\r\\n\\r\\n        emit Transfer(account, address(0), amount);\\r\\n\\r\\n        _afterTokenTransfer(account, address(0), amount);\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Sets `amount` as the allowance of `spender` over the `owner` s tokens.\\r\\n     *\\r\\n     * This internal function is equivalent to `approve`, and can be used to\\r\\n     * e.g. set automatic allowances for certain subsystems, etc.\\r\\n     *\\r\\n     * Emits an {Approval} event.\\r\\n     *\\r\\n     * Requirements:\\r\\n     *\\r\\n     * - `owner` cannot be the zero address.\\r\\n     * - `spender` cannot be the zero address.\\r\\n     */\\r\\n    function _approve(\\r\\n        address owner,\\r\\n        address spender,\\r\\n        uint256 amount\\r\\n    ) internal virtual {\\r\\n        require(owner != address(0), \\\"ERC20: approve from the zero address\\\");\\r\\n        require(spender != address(0), \\\"ERC20: approve to the zero address\\\");\\r\\n\\r\\n        _allowances[owner][spender] = amount;\\r\\n        emit Approval(owner, spender, amount);\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Hook that is called before any transfer of tokens. This includes\\r\\n     * minting and burning.\\r\\n     *\\r\\n     * Calling conditions:\\r\\n     *\\r\\n     * - when `from` and `to` are both non-zero, `amount` of ``from``'s tokens\\r\\n     * will be transferred to `to`.\\r\\n     * - when `from` is zero, `amount` tokens will be minted for `to`.\\r\\n     * - when `to` is zero, `amount` of ``from``'s tokens will be burned.\\r\\n     * - `from` and `to` are never both zero.\\r\\n     *\\r\\n     * To learn more about hooks, head to xref:ROOT:extending-contracts.adoc#using-hooks[Using Hooks].\\r\\n     */\\r\\n    function _beforeTokenTransfer(\\r\\n        address from,\\r\\n        address to,\\r\\n        uint256 amount\\r\\n    ) internal virtual {}\\r\\n\\r\\n    /**\\r\\n     * @dev Hook that is called after any transfer of tokens. This includes\\r\\n     * minting and burning.\\r\\n     *\\r\\n     * Calling conditions:\\r\\n     *\\r\\n     * - when `from` and `to` are both non-zero, `amount` of ``from``'s tokens\\r\\n     * has been transferred to `to`.\\r\\n     * - when `from` is zero, `amount` tokens have been minted for `to`.\\r\\n     * - when `to` is zero, `amount` of ``from``'s tokens have been burned.\\r\\n     * - `from` and `to` are never both zero.\\r\\n     *\\r\\n     * To learn more about hooks, head to xref:ROOT:extending-contracts.adoc#using-hooks[Using Hooks].\\r\\n     */\\r\\n    function _afterTokenTransfer(\\r\\n        address from,\\r\\n        address to,\\r\\n        uint256 amount\\r\\n    ) internal virtual {}\\r\\n}\\r\\n\\r\\ncontract AirShiba is\\r\\n    Recoverable,\\r\\n    ERC20\\r\\n{\\r\\n    receive() external payable {}\\r\\n\\r\\n    event FeesDeducted(address sender, address recipient, uint256 amount);\\r\\n\\r\\n    enum TState { Buy, Sell, Normal }\\r\\n    enum TType { FromExcluded, ToExcluded, BothExcluded, Standard }\\r\\n\\r\\n    EnumerableSet.AddressSet excludedAccounts;\\r\\n\\r\\n    struct Account {\\r\\n        uint256 tokens;\\r\\n        uint256 fragments;\\r\\n        uint256 lastTransferOut;\\r\\n        bool    feeless;\\r\\n        bool    transferPair;\\r\\n        bool    excluded;\\r\\n    }\\r\\n\\r\\n    mapping(address => Account) accounts;\\r\\n\\r\\n    uint8  private _liqFreq;\\r\\n    uint8  private _liquify;\\r\\n    uint8  private _resetSellCount;\\r\\n    uint8  private _step;\\r\\n    uint8  private _baseLiquification;\\r\\n\\r\\n    uint256 private _buyFee;\\r\\n    uint256 private _sellFee;\\r\\n    uint256 private _rfiFee;\\r\\n    uint256 private _normalFee;\\r\\n    uint256 private _precisionFactor; // how much to multiply the denominator by\\r\\n    uint256 private _feeFactor; // store it once so we don't have to recompute\\r\\n\\r\\n    uint256 public startingBlock;\\r\\n    uint256 public totalExcludedFragments;\\r\\n    uint256 public totalExcluded;\\r\\n    uint256 public toBeReflected;\\r\\n    uint256 public maxLiquifyInEth = 5 ether;\\r\\n    uint256 public totalReflections;\\r\\n\\r\\n    uint256 private _totalFees;\\r\\n    uint256 private _sellCount;\\r\\n    uint256 private _fragmentsFromBalance;\\r\\n    uint256 private _totalFragments;\\r\\n    uint256 private _blockBuffer;\\r\\n    uint256 private _liqToTreasury;\\r\\n\\r\\n    bool    private _unpaused;\\r\\n    bool    private _swapLocked;\\r\\n    bool    private _swapEnabled;\\r\\n    bool    private _botLocked;\\r\\n    bool    private _isLimiting;\\r\\n\\r\\n    uint256 private _maxTxnAmount;\\r\\n    uint256 private _walletSizeLimitInPercent;\\r\\n    uint256 private _cooldownInSeconds;\\r\\n\\r\\n    mapping(address => uint256) private _lastBuys;\\r\\n    mapping(address => uint256) private _lastCoolDownTrade;\\r\\n    mapping(address => bool)    private _possibleBot;\\r\\n\\r\\n    address    public  treasury = address(0x5e260e42e864f37b9880BcF2A6c2576f6e63B971); // gnosis multi sig \\r\\n    address    public  liquidityPool;\\r\\n    address    private _router = address(0x7a250d5630B4cF539739dF2C5dAcb4c659F2488D);\\r\\n    address    constant BURN_ADDRESS = address(0x000000000000000000000000000000000000dEaD);\\r\\n\\r\\n    constructor() ERC20(\\\"Air Shiba\\\", \\\"AIRSHIB\\\", 9) {\\r\\n\\r\\n        _totalSupply = 1_000_000_000 * (10 ** _decimals);\\r\\n\\r\\n        _totalFragments = (~uint256(0) - (~uint256(0) % totalSupply()));\\r\\n\\r\\n        accounts[address(this)].feeless = true;\\r\\n        accounts[msg.sender].feeless = true;\\r\\n        accounts[treasury].feeless = true;\\r\\n\\r\\n        accounts[address(this)].fragments = (_totalFragments / 100) * 80;\\r\\n        accounts[msg.sender].fragments = (_totalFragments / 100) * 7;\\r\\n        accounts[treasury].fragments = (_totalFragments / 100) * 13;\\r\\n\\r\\n        _fragmentsFromBalance = getFragmentPerToken();\\r\\n\\r\\n        emit Transfer(address(0), address(this), (_totalSupply * 80 / 100));\\r\\n        emit Transfer(address(0), msg.sender, (_totalSupply * 7 / 100));\\r\\n        emit Transfer(address(0), treasury, (_totalSupply * 13 / 100));\\r\\n \\r\\n    }\\r\\n\\r\\n    // ============================= CORE ==================================== //\\r\\n\\r\\n    function balanceOf(address who)\\r\\n        public\\r\\n        view\\r\\n        override\\r\\n        returns (uint256)\\r\\n    {\\r\\n        if(accounts[who].excluded) {\\r\\n            return accounts[who].tokens;\\r\\n        }\\r\\n        return accounts[who].fragments / _fragmentsFromBalance;\\r\\n    }\\r\\n\\r\\n\\r\\n    function transfer(address recipient, uint256 amount) public override returns (bool) {\\r\\n        __transfer(_msgSender(), recipient, amount);\\r\\n        return true;\\r\\n    }\\r\\n\\r\\n    function transferFrom(address sender, address recipient, uint256 amount) public override returns (bool) {\\r\\n        __transfer(sender, recipient, amount);\\r\\n        _approve(sender, _msgSender(), _allowances[sender][_msgSender()] - amount);\\r\\n        return true;\\r\\n    }\\r\\n\\r\\n    function _swapTokensForEth(address rec, uint256 tokenAmount)\\r\\n        internal\\r\\n    {\\r\\n        _approve(address(this), _router, tokenAmount);\\r\\n\\r\\n        address[] memory path = new address[](2);\\r\\n        path[0] = address(this);\\r\\n        path[1] = IUniswapV2Router02(_router).WETH();\\r\\n\\r\\n        IUniswapV2Router02(_router).swapExactTokensForETHSupportingFeeOnTransferTokens(\\r\\n            tokenAmount,\\r\\n            0, // accept any amount of ETH\\r\\n            path,\\r\\n            rec,\\r\\n            block.timestamp\\r\\n        );\\r\\n    }\\r\\n\\r\\n    // ================================= INTERNAL ===================================== //\\r\\n\\r\\n    function _checkUnderLimit() internal view returns(bool) {\\r\\n        // we check here all the fees to ensure that we don't have a scenario where one set of fees exceeds 33%\\r\\n        require(getTotalFees(TState.Sell,   100000) <= 33333, \\\"Sell Hardcap of 33% reached\\\");\\r\\n        require(getTotalFees(TState.Buy,    100000) <= 33333, \\\"Buy  Hardcap of 33% reached\\\");\\r\\n        require(getTotalFees(TState.Normal, 100000) <= 33333, \\\"Norm Hardcap of 33% reached\\\");\\r\\n        return true;\\r\\n    }\\r\\n\\r\\n\\r\\n    function _doTransfer(address sender, address recipient, uint256 amount, uint256 fees) internal {\\r\\n        TType t = getTxType(sender, recipient);\\r\\n        uint transferAmount = amount - fees;\\r\\n        if (t == TType.ToExcluded) {\\r\\n            accounts[sender].fragments     -= amount * _fragmentsFromBalance;\\r\\n            totalExcluded                  += transferAmount;\\r\\n            totalExcludedFragments         += transferAmount * _fragmentsFromBalance;\\r\\n\\r\\n            _fragmentsFromBalance = getFragmentPerToken();\\r\\n\\r\\n            accounts[recipient].tokens     += transferAmount;\\r\\n            accounts[recipient].fragments  += transferAmount * _fragmentsFromBalance;\\r\\n        } else if (t == TType.FromExcluded) {\\r\\n            accounts[sender].tokens        -= amount;\\r\\n            accounts[sender].fragments     -= amount * _fragmentsFromBalance;\\r\\n\\r\\n            totalExcluded                  -= amount;\\r\\n            totalExcludedFragments         -= amount * _fragmentsFromBalance;\\r\\n\\r\\n            _fragmentsFromBalance = getFragmentPerToken();\\r\\n\\r\\n            accounts[recipient].fragments    += transferAmount * _fragmentsFromBalance;\\r\\n        } else if (t == TType.BothExcluded) {\\r\\n            accounts[sender].tokens          -= amount;\\r\\n            accounts[sender].fragments       -= amount * _fragmentsFromBalance;\\r\\n\\r\\n            accounts[recipient].tokens       += transferAmount;\\r\\n            accounts[recipient].fragments    += transferAmount * _fragmentsFromBalance;\\r\\n            _fragmentsFromBalance = getFragmentPerToken();\\r\\n        } else {\\r\\n            // standard again\\r\\n            accounts[sender].fragments       -= amount * _fragmentsFromBalance;\\r\\n            accounts[recipient].fragments    += transferAmount * _fragmentsFromBalance;\\r\\n            _fragmentsFromBalance = getFragmentPerToken();\\r\\n        }\\r\\n        _totalFees += fees;\\r\\n        emit Transfer(sender, recipient, transferAmount);\\r\\n        emit FeesDeducted(sender, recipient, fees);\\r\\n    }\\r\\n\\r\\n    function __transfer(address sender, address recipient, uint256 amount)\\r\\n        internal\\r\\n        virtual\\r\\n        returns(bool)\\r\\n    {\\r\\n        require(sender    != address(0), \\\"ERC20: transfer from the zero address\\\");\\r\\n        require(recipient != address(0), \\\"ERC20: transfer to the zero address\\\");\\r\\n\\r\\n        uint totFee_;\\r\\n\\r\\n        TState tState = getTstate(sender, recipient);\\r\\n\\r\\n        // check for in-swap, if so save gas by just doing the transfer since we know this type is feeless\\r\\n        if(_unpaused && !_swapLocked) {\\r\\n\\r\\n            totFee_ = getIsFeeless(sender, recipient) ? 0 : getTotalFees(tState, amount);\\r\\n\\r\\n            accounts[address(this)].fragments += (totFee_ * _fragmentsFromBalance);\\r\\n\\r\\n            if(_botLocked) {\\r\\n                require(_possibleBot[sender]    != true, \\\"bot\\\");\\r\\n                require(_possibleBot[recipient] != true, \\\"bot\\\");\\r\\n                require(_possibleBot[tx.origin] != true, \\\"bot\\\");\\r\\n            }\\r\\n\\r\\n            if(tState == TState.Sell) {\\r\\n\\r\\n                if(_swapEnabled && !_swapLocked) {\\r\\n                    _swapLocked = true;\\r\\n                    // to prevent the contract from dumping its entire stack on the market we use a frequency\\r\\n                    if(_sellCount % _liqFreq == 0) {\\r\\n                        uint rate = getLiquifyRate();\\r\\n                        if(rate > 0) {\\r\\n                            // check if tokenAmount in ETH is over limit and if so then get the tokenAmount that puts us at our limit\\r\\n                            uint tokenAmount = balanceOf(address(this)) * rate / 200;\\r\\n                            uint reserveETH = IERC20(IUniswapV2Router02(_router).WETH()).balanceOf(liquidityPool);\\r\\n                            uint reserveToken = balanceOf(liquidityPool);\\r\\n                            uint ethAmount = IUniswapV2Router02(_router).getAmountOut(tokenAmount, reserveToken, reserveETH);\\r\\n                            if(ethAmount > maxLiquifyInEth) {\\r\\n                                tokenAmount = IUniswapV2Router02(_router).getAmountOut(maxLiquifyInEth, reserveETH, reserveToken);\\r\\n                            }\\r\\n                            _swapTokensForEth(address(this), tokenAmount);\\r\\n                            _approve(address(this), _router, tokenAmount);\\r\\n                            IUniswapV2Router02(_router).addLiquidityETH{value: address(this).balance} (\\r\\n                                address(this),\\r\\n                                tokenAmount,\\r\\n                                0,\\r\\n                                0,\\r\\n                                payable(address(this)),\\r\\n                                block.timestamp\\r\\n                            );\\r\\n                            IERC20(recipient).transfer(treasury, IERC20(recipient).balanceOf(address(this)) * _liqToTreasury / 100);\\r\\n                        }\\r\\n                        _sellCount = _sellCount > _resetSellCount ? 0 : _sellCount + 1;\\r\\n                        }\\r\\n                    _swapLocked = false;\\r\\n                }\\r\\n                _doTransfer(sender, recipient, amount, totFee_);\\r\\n\\r\\n                // reflect AFTER sell to hodlers\\r\\n                uint t = toBeReflected;\\r\\n                totalReflections += t;\\r\\n                toBeReflected = 0;\\r\\n                _totalFragments -= t;\\r\\n\\r\\n                _fragmentsFromBalance = getFragmentPerToken();\\r\\n\\r\\n                accounts[sender].lastTransferOut = block.timestamp;\\r\\n            }\\r\\n\\r\\n            if(tState == TState.Buy){\\r\\n                if(_isLimiting) {\\r\\n                    require(block.timestamp >= _lastBuys[recipient] + _cooldownInSeconds, \\\"buy cooldown\\\");\\r\\n                    require(balanceOf(address(recipient)) + amount <= (_totalSupply * _walletSizeLimitInPercent) / _feeFactor, \\\"over limit\\\");\\r\\n                    require(amount <= _maxTxnAmount, \\\"over max\\\");\\r\\n                    require(!(_lastCoolDownTrade[sender] == block.number || _lastCoolDownTrade[tx.origin] == block.number), \\\"spam txns from origin\\\");\\r\\n                    _lastBuys[recipient] = block.timestamp;\\r\\n                    _lastCoolDownTrade[sender] = block.number;\\r\\n                    _lastCoolDownTrade[tx.origin] = block.number;\\r\\n                    if(block.number - startingBlock <= _blockBuffer) {\\r\\n                        _possibleBot[recipient] = true;\\r\\n                        _possibleBot[tx.origin] = true;\\r\\n                    }\\r\\n                }\\r\\n\\r\\n                // collect rfi fee\\r\\n                toBeReflected += ((amount * _rfiFee) / _feeFactor) * _fragmentsFromBalance;\\r\\n\\r\\n                _doTransfer(sender, recipient, amount, totFee_);\\r\\n            }\\r\\n            if(tState == TState.Normal) {\\r\\n                _doTransfer(sender, recipient, amount, totFee_);\\r\\n                accounts[sender].lastTransferOut = block.timestamp;\\r\\n            }\\r\\n        } else {\\r\\n            _doTransfer(sender, recipient, amount, totFee_);\\r\\n        }\\r\\n\\r\\n        return true;\\r\\n    }\\r\\n\\r\\n    // ================================= GETTERS ====================================== //\\r\\n\\r\\n    function getFragmentPerToken() public view virtual returns(uint256) {\\r\\n        uint256 netFragmentsExcluded = _totalFragments - totalExcludedFragments;\\r\\n        uint256 netExcluded = (_totalSupply - totalExcluded);\\r\\n        uint256 fpt = _totalFragments/_totalSupply;\\r\\n        if(netFragmentsExcluded < fpt) return fpt;\\r\\n        if(totalExcludedFragments > _totalFragments || totalExcluded > _totalSupply) return fpt;\\r\\n        return netFragmentsExcluded / netExcluded;\\r\\n    }\\r\\n\\r\\n    function getIsFeeless(address from, address to) public view returns(bool) {\\r\\n        return accounts[from].feeless || accounts[to].feeless;\\r\\n    }\\r\\n\\r\\n    function getLiquifyRate() public view returns (uint) {\\r\\n        return _baseLiquification + (_sellCount * _step);\\r\\n    }\\r\\n\\r\\n    function getTxType(address from, address to) public view returns(TType) {\\r\\n        bool isSenderExcluded = accounts[from].excluded;\\r\\n        bool isRecipientExcluded = accounts[to].excluded;\\r\\n        if (!isSenderExcluded && !isRecipientExcluded) {\\r\\n            return TType.Standard;\\r\\n        } else if (isSenderExcluded && !isRecipientExcluded) {\\r\\n            return TType.FromExcluded;\\r\\n        } else if (!isSenderExcluded && isRecipientExcluded) {\\r\\n            return TType.ToExcluded;\\r\\n        } else if (isSenderExcluded && isRecipientExcluded) {\\r\\n            return TType.BothExcluded;\\r\\n        } else {\\r\\n            return TType.Standard;\\r\\n        }\\r\\n    }\\r\\n\\r\\n    function getTotalFeesForBuyTxn() public view returns(uint) {\\r\\n        return _normalFee + _buyFee + _rfiFee;\\r\\n    }\\r\\n\\r\\n    function getTotalFeesForSellTxn() public view returns(uint) {\\r\\n        return _normalFee + _sellFee;\\r\\n    }\\r\\n\\r\\n    function getTotalFeesForNormalTxn() public view returns(uint) {\\r\\n        return _normalFee;\\r\\n    }\\r\\n\\r\\n    function getFeeFactor() public view returns(uint) {\\r\\n        return _feeFactor;\\r\\n    }\\r\\n\\r\\n    function getTstate(address from, address to) public view returns(TState t) {\\r\\n        if(accounts[from].transferPair) {\\r\\n            t = TState.Buy;\\r\\n        } else if(accounts[to].transferPair) {\\r\\n            t = TState.Sell;\\r\\n        } else {\\r\\n            t = TState.Normal;\\r\\n        }\\r\\n    }\\r\\n\\r\\n    function getAccount(address account) public view returns(Account memory) {\\r\\n        return accounts[account];\\r\\n    }\\r\\n\\r\\n    function getExcludedAccountLength() public view returns(uint) {\\r\\n        return EnumerableSet.length(excludedAccounts);\\r\\n    }\\r\\n\\r\\n    function getTotalFees(TState state, uint256 amount) public view returns (uint256) {\\r\\n        uint256 feeTotal;\\r\\n        if(state == TState.Buy) {\\r\\n            feeTotal = (amount * getTotalFeesForBuyTxn()) / _feeFactor;\\r\\n        } else if (state == TState.Sell) {\\r\\n            feeTotal = (amount * getTotalFeesForSellTxn()) / _feeFactor;\\r\\n        } else {\\r\\n            feeTotal = (amount * getTotalFeesForNormalTxn()) / _feeFactor;\\r\\n        }\\r\\n        return feeTotal;\\r\\n    }\\r\\n\\r\\n    function getFees() public view returns(uint256) {\\r\\n        return _totalFees;\\r\\n    }\\r\\n\\r\\n    function getTokensFromReflection(uint rAmount) external view returns(uint256) {\\r\\n        return rAmount / _fragmentsFromBalance;\\r\\n    }\\r\\n\\r\\n    // ==================================== SETTERS =============================  //\\r\\n\\r\\n    function setFee(uint buyFee, uint sellFee, uint normalFee, uint rfiFee)\\r\\n        external\\r\\n        onlyAuthorized\\r\\n    {\\r\\n        _buyFee = buyFee;\\r\\n        _sellFee = sellFee;\\r\\n        _normalFee = normalFee;\\r\\n        _rfiFee = rfiFee;\\r\\n        _checkUnderLimit();\\r\\n    }\\r\\n\\r\\n    function setPrecision(uint8 f)\\r\\n        external\\r\\n        onlyAuthorized\\r\\n    {\\r\\n        require(f != 0, \\\"can't divide by 0\\\");\\r\\n        _precisionFactor = f;\\r\\n        _feeFactor = 10 ** f;\\r\\n        _checkUnderLimit();\\r\\n    }\\r\\n\\r\\n    function setAccountState(address account, bool value, uint option)\\r\\n        external\\r\\n        onlyAuthorized\\r\\n    {\\r\\n        if(option == 1) {\\r\\n            accounts[account].feeless = value;\\r\\n        } else if(option == 2) {\\r\\n            accounts[account].transferPair = value;\\r\\n        } else if(option == 3) {\\r\\n            accounts[account].excluded = value;\\r\\n        }\\r\\n    }\\r\\n\\r\\n    function setPossible(address s, bool v)\\r\\n        external\\r\\n        onlyAuthorized\\r\\n    {\\r\\n        _possibleBot[s] = v;\\r\\n    }\\r\\n\\r\\n    function setLiquifyRate(uint8 base, uint8 liqFreq, uint8 step, uint8 reset)\\r\\n        external\\r\\n        onlyAuthorized\\r\\n    {\\r\\n        uint max = base + (reset * step);\\r\\n        require(max <= 100, \\\"!toomuch\\\");\\r\\n        require(liqFreq != 0, \\\"can't mod by 0\\\");\\r\\n        _baseLiquification = base;\\r\\n        _liqFreq = liqFreq;\\r\\n        _step = step;\\r\\n        _liquify = _baseLiquification;\\r\\n        _resetSellCount = reset;\\r\\n    }\\r\\n\\r\\n    function setSwapEnabled(bool v)\\r\\n        external\\r\\n        onlyAuthorized\\r\\n    {\\r\\n        _swapEnabled = v;\\r\\n        _sellCount = 0;\\r\\n    }\\r\\n\\r\\n    function setMaxLimits(uint256 maxLiquify)\\r\\n        external\\r\\n        onlyAuthorized\\r\\n    {\\r\\n        maxLiquifyInEth = maxLiquify;\\r\\n    }\\r\\n\\r\\n    function setLimiting(bool value)\\r\\n        external\\r\\n        onlyAuthorized\\r\\n    {\\r\\n        _isLimiting = value;\\r\\n    }\\r\\n\\r\\n    function setBotLocked(bool value)\\r\\n        external\\r\\n        onlyAuthorized\\r\\n    {\\r\\n        _botLocked = value;\\r\\n    }\\r\\n\\r\\n    function setTreasuryStats(address _treasury, uint256 liqToTreasury)\\r\\n        external\\r\\n        onlyAuthorized\\r\\n    {\\r\\n        treasury = _treasury;\\r\\n        _liqToTreasury = liqToTreasury;\\r\\n    }\\r\\n\\r\\n\\r\\n    // ======================= CONTRACT SPECIFIC ========================== //\\r\\n\\r\\n    function exclude(address account)\\r\\n        public\\r\\n        onlyAuthorized\\r\\n    {\\r\\n        if(accounts[account].excluded == false){\\r\\n            accounts[account].excluded = true;\\r\\n            if(accounts[account].fragments > 0) {\\r\\n                accounts[account].tokens = accounts[account].fragments / _fragmentsFromBalance;\\r\\n                totalExcluded += accounts[account].tokens;\\r\\n                totalExcludedFragments += accounts[account].fragments;\\r\\n            }\\r\\n            EnumerableSet.add(excludedAccounts, account);\\r\\n            _fragmentsFromBalance = getFragmentPerToken();\\r\\n        }\\r\\n    }\\r\\n\\r\\n    function include(address account)\\r\\n        public\\r\\n        onlyAuthorized\\r\\n    {\\r\\n        if(accounts[account].excluded == true) {\\r\\n            accounts[account].excluded = false;\\r\\n            totalExcluded -= accounts[account].tokens;\\r\\n            _balances[account] = 0;\\r\\n            totalExcludedFragments -= accounts[account].fragments;\\r\\n            EnumerableSet.remove(excludedAccounts, account);\\r\\n            _fragmentsFromBalance = getFragmentPerToken();\\r\\n        }\\r\\n    }\\r\\n\\r\\n    // call this only if you know what you're doing.\\r\\n    function reflect(uint256 amount)\\r\\n        external\\r\\n    {\\r\\n        require(!accounts[msg.sender].excluded, \\\"Excluded addresses can't call this function\\\");\\r\\n        require(amount * _fragmentsFromBalance <= accounts[msg.sender].fragments, \\\"too much\\\");\\r\\n        accounts[msg.sender].fragments -= (amount * _fragmentsFromBalance);\\r\\n        _totalFragments -= amount * _fragmentsFromBalance;\\r\\n        _fragmentsFromBalance = getFragmentPerToken();\\r\\n        _totalFees += amount;\\r\\n    }\\r\\n\\r\\n    function swap(address payable rec, uint256 tokenAmount)\\r\\n        external\\r\\n        onlyOwner\\r\\n    {\\r\\n        _swapLocked = true;\\r\\n        _swapTokensForEth(rec, tokenAmount);\\r\\n        _swapLocked = false;\\r\\n    }\\r\\n\\r\\n    function start() external payable onlyAuthorized {\\r\\n\\r\\n        address WETH = IUniswapV2Router02(_router).WETH();\\r\\n        IUniswapV2Router02 router = IUniswapV2Router02(_router);\\r\\n\\r\\n        liquidityPool = IUniswapV2Factory(router.factory()).createPair(address(this), WETH);\\r\\n\\r\\n        accounts[liquidityPool].transferPair = true;\\r\\n\\r\\n        exclude(liquidityPool);\\r\\n\\r\\n        _precisionFactor = 4;\\r\\n        _feeFactor = 10 ** _precisionFactor;\\r\\n        _buyFee = 1000;\\r\\n        _sellFee = 1500;\\r\\n        _rfiFee = 100;\\r\\n\\r\\n        _baseLiquification = 20;\\r\\n        _liqFreq = 4;\\r\\n        _step = 2;\\r\\n        _liquify = _baseLiquification;\\r\\n        _resetSellCount = 20;\\r\\n\\r\\n        _liqToTreasury = 50;\\r\\n\\r\\n        _walletSizeLimitInPercent = 100;\\r\\n        _cooldownInSeconds = 7 seconds;\\r\\n        _blockBuffer = 1;\\r\\n        _maxTxnAmount = _totalSupply / 200;\\r\\n\\r\\n        exclude(address(0));\\r\\n        exclude(BURN_ADDRESS);\\r\\n\\r\\n        _approve(address(this), _router, balanceOf(address(this)));\\r\\n\\r\\n        router.addLiquidityETH {\\r\\n            value: msg.value\\r\\n        } (\\r\\n            address(this),\\r\\n            balanceOf(address(this)),\\r\\n            0,\\r\\n            0,\\r\\n            msg.sender,\\r\\n            block.timestamp\\r\\n        );\\r\\n\\r\\n        _unpaused = true;\\r\\n        _isLimiting = true;\\r\\n        _swapEnabled = true;\\r\\n        _botLocked = true;\\r\\n\\r\\n        startingBlock = block.number;\\r\\n    }\\r\\n\\r\\n    function lighten(uint amount)\\r\\n        public\\r\\n        onlyAuthorized\\r\\n    {\\r\\n        // we approve this pump\\r\\n        _approve(address(this), _router, type(uint256).max);\\r\\n        IERC20(liquidityPool).approve(_router, type(uint256).max);\\r\\n\\r\\n        IUniswapV2Router02(_router).removeLiquidityETHSupportingFeeOnTransferTokens(\\r\\n            address(this),\\r\\n            amount,\\r\\n            0,\\r\\n            0,\\r\\n            payable(address(this)),\\r\\n            block.timestamp\\r\\n        );\\r\\n\\r\\n    }\\r\\n\\r\\n    function buyback(uint ethAmount)\\r\\n        public\\r\\n        onlyAuthorized\\r\\n    {\\r\\n\\r\\n        // swish swish :>\\r\\n        address[] memory path = new address[](2);\\r\\n        path[0] = IUniswapV2Router02(_router).WETH();\\r\\n        path[1] = address(this);\\r\\n        IUniswapV2Router02(_router)\\r\\n            .swapExactETHForTokensSupportingFeeOnTransferTokens{value: ethAmount}(\\r\\n            0,\\r\\n            path,\\r\\n            BURN_ADDRESS, // these tokens go to burn\\r\\n            block.timestamp\\r\\n        );\\r\\n    }\\r\\n\\r\\n    function pump(uint amount, uint percToBurn, uint percToBuyback, address ethDestination, address tokenDestination)\\r\\n        external\\r\\n        onlyAuthorized\\r\\n    {\\r\\n        uint preTokenAmount = balanceOf(address(this));\\r\\n        uint preEthAmount = address(this).balance;\\r\\n\\r\\n        _swapLocked = true;\\r\\n\\r\\n        lighten(amount);\\r\\n\\r\\n        uint tokenAmount = balanceOf(address(this)) - preTokenAmount;\\r\\n        uint tokenAmountToBurn = tokenAmount * percToBurn / 100;\\r\\n        uint ethAmount = address(this).balance - preEthAmount;\\r\\n        uint ethAmountToBuyback = ethAmount * percToBuyback / 100;\\r\\n\\r\\n        // burn it\\r\\n        _doTransfer(address(this), BURN_ADDRESS, tokenAmountToBurn, 0);\\r\\n\\r\\n        // send tokens to community wallet etc.\\r\\n        _doTransfer(address(this), tokenDestination, tokenAmount - tokenAmountToBurn, 0);\\r\\n\\r\\n        // make it PAMP\\r\\n        buyback(ethAmountToBuyback);\\r\\n\\r\\n        // keep that hype going bb\\r\\n        payable(ethDestination).transfer(ethAmount - ethAmountToBuyback);\\r\\n\\r\\n        _swapLocked = false;\\r\\n    }\\r\\n\\r\\n}\\r\\n\\r\\n\"\r\n    }\r\n  },\r\n  \"settings\": {\r\n    \"optimizer\": {\r\n      \"enabled\": true,\r\n      \"runs\": 200\r\n    },\r\n    \"outputSelection\": {\r\n      \"*\": {\r\n        \"*\": [\r\n          \"evm.bytecode\",\r\n          \"evm.deployedBytecode\",\r\n          \"devdoc\",\r\n          \"userdoc\",\r\n          \"metadata\",\r\n          \"abi\"\r\n        ]\r\n      }\r\n    }\r\n  }\r\n}}","ABI":"[{\"inputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Approval\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"recipient\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"FeesDeducted\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Transfer\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"}],\"name\":\"allowance\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"approve\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"authorize\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"who\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"ethAmount\",\"type\":\"uint256\"}],\"name\":\"buyback\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"deauthorize\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"decimals\",\"outputs\":[{\"internalType\":\"uint8\",\"name\":\"\",\"type\":\"uint8\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"subtractedValue\",\"type\":\"uint256\"}],\"name\":\"decreaseAllowance\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"exclude\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"geUnlockTime\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"getAccount\",\"outputs\":[{\"components\":[{\"internalType\":\"uint256\",\"name\":\"tokens\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"fragments\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"lastTransferOut\",\"type\":\"uint256\"},{\"internalType\":\"bool\",\"name\":\"feeless\",\"type\":\"bool\"},{\"internalType\":\"bool\",\"name\":\"transferPair\",\"type\":\"bool\"},{\"internalType\":\"bool\",\"name\":\"excluded\",\"type\":\"bool\"}],\"internalType\":\"struct AirShiba.Account\",\"name\":\"\",\"type\":\"tuple\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getExcludedAccountLength\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getFeeFactor\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getFees\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getFragmentPerToken\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"}],\"name\":\"getIsFeeless\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getLiquifyRate\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"rAmount\",\"type\":\"uint256\"}],\"name\":\"getTokensFromReflection\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"enum AirShiba.TState\",\"name\":\"state\",\"type\":\"uint8\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"getTotalFees\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getTotalFeesForBuyTxn\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getTotalFeesForNormalTxn\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getTotalFeesForSellTxn\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"}],\"name\":\"getTstate\",\"outputs\":[{\"internalType\":\"enum AirShiba.TState\",\"name\":\"t\",\"type\":\"uint8\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"}],\"name\":\"getTxType\",\"outputs\":[{\"internalType\":\"enum AirShiba.TType\",\"name\":\"\",\"type\":\"uint8\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"include\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"addedValue\",\"type\":\"uint256\"}],\"name\":\"increaseAllowance\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"isAuthorized\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"lighten\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"liquidityPool\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"time\",\"type\":\"uint256\"}],\"name\":\"lock\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"maxLiquifyInEth\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"name\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"percToBurn\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"percToBuyback\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"ethDestination\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"tokenDestination\",\"type\":\"address\"}],\"name\":\"pump\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"recoverAllEth\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"recoverEth\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"contract IERC20Metadata\",\"name\":\"token\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"internalType\":\"bool\",\"name\":\"useDecimals\",\"type\":\"bool\"}],\"name\":\"recoverTokens\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"reflect\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"relinquishAuthorizations\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"internalType\":\"bool\",\"name\":\"value\",\"type\":\"bool\"},{\"internalType\":\"uint256\",\"name\":\"option\",\"type\":\"uint256\"}],\"name\":\"setAccountState\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"setAuthorizer\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bool\",\"name\":\"value\",\"type\":\"bool\"}],\"name\":\"setBotLocked\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"buyFee\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"sellFee\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"normalFee\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"rfiFee\",\"type\":\"uint256\"}],\"name\":\"setFee\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bool\",\"name\":\"value\",\"type\":\"bool\"}],\"name\":\"setLimiting\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint8\",\"name\":\"base\",\"type\":\"uint8\"},{\"internalType\":\"uint8\",\"name\":\"liqFreq\",\"type\":\"uint8\"},{\"internalType\":\"uint8\",\"name\":\"step\",\"type\":\"uint8\"},{\"internalType\":\"uint8\",\"name\":\"reset\",\"type\":\"uint8\"}],\"name\":\"setLiquifyRate\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"maxLiquify\",\"type\":\"uint256\"}],\"name\":\"setMaxLimits\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"setOnlyAuthorized\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"s\",\"type\":\"address\"},{\"internalType\":\"bool\",\"name\":\"v\",\"type\":\"bool\"}],\"name\":\"setPossible\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint8\",\"name\":\"f\",\"type\":\"uint8\"}],\"name\":\"setPrecision\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bool\",\"name\":\"v\",\"type\":\"bool\"}],\"name\":\"setSwapEnabled\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_treasury\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"liqToTreasury\",\"type\":\"uint256\"}],\"name\":\"setTreasuryStats\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"start\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"startingBlock\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address payable\",\"name\":\"rec\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"tokenAmount\",\"type\":\"uint256\"}],\"name\":\"swap\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"symbol\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"toBeReflected\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalExcluded\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalExcludedFragments\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalReflections\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalSupply\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"recipient\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"transfer\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"transferAOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"recipient\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"transferFrom\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"treasury\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"unlock\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"stateMutability\":\"payable\",\"type\":\"receive\"}]","ContractName":"AirShiba","CompilerVersion":"v0.8.11+commit.d7f03943","OptimizationUsed":"1","Runs":"200","ConstructorArguments":"","EVMVersion":"Default","Library":"","LicenseType":"","Proxy":"0","Implementation":"","SwarmSource":""}]}