{"status":"1","message":"OK","result":[{"SourceCode":"{\"ERC20.sol\":{\"content\":\"// SPDX-License-Identifier: AGPL-3.0-only\\npragma solidity 0.8.7;\\n\\n/// @notice Modern and gas efficient ERC20 + EIP-2612 implementation.\\n/// @author Modified from Uniswap (https://github.com/Uniswap/uniswap-v2-core/blob/master/contracts/UniswapV2ERC20.sol)\\n/// Taken from Solmate: https://github.com/Rari-Capital/solmate\\n\\ncontract ERC20 {\\n    /*///////////////////////////////////////////////////////////////\\n                                  EVENTS\\n    //////////////////////////////////////////////////////////////*/\\n\\n    event Transfer(address indexed from, address indexed to, uint256 value);\\n    event Approval(address indexed owner, address indexed spender, uint256 value);\\n\\n    /*///////////////////////////////////////////////////////////////\\n                             METADATA STORAGE\\n    //////////////////////////////////////////////////////////////*/\\n\\n    string public constant name     = \\\"ZUG\\\";\\n    string public constant symbol   = \\\"ZUG\\\";\\n    uint8  public constant decimals = 18;\\n\\n    /*///////////////////////////////////////////////////////////////\\n                             ERC20 STORAGE\\n    //////////////////////////////////////////////////////////////*/\\n\\n    uint256 public totalSupply;\\n\\n    mapping(address =\\u003e uint256) public balanceOf;\\n\\n    mapping(address =\\u003e mapping(address =\\u003e uint256)) public allowance;\\n\\n    mapping(address =\\u003e bool) public isMinter;\\n\\n    address public ruler;\\n\\n    /*///////////////////////////////////////////////////////////////\\n                              ERC20 LOGIC\\n    //////////////////////////////////////////////////////////////*/\\n\\n    constructor() { ruler = msg.sender;}\\n\\n    function approve(address spender, uint256 value) external returns (bool) {\\n        allowance[msg.sender][spender] = value;\\n\\n        emit Approval(msg.sender, spender, value);\\n\\n        return true;\\n    }\\n\\n    function transfer(address to, uint256 value) external returns (bool) {\\n        balanceOf[msg.sender] -= value;\\n\\n        // This is safe because the sum of all user\\n        // balances can\\u0027t exceed type(uint256).max!\\n        unchecked {\\n            balanceOf[to] += value;\\n        }\\n\\n        emit Transfer(msg.sender, to, value);\\n\\n        return true;\\n    }\\n\\n    function transferFrom(\\n        address from,\\n        address to,\\n        uint256 value\\n    ) external returns (bool) {\\n        if (allowance[from][msg.sender] != type(uint256).max) {\\n            allowance[from][msg.sender] -= value;\\n        }\\n\\n        balanceOf[from] -= value;\\n\\n        // This is safe because the sum of all user\\n        // balances can\\u0027t exceed type(uint256).max!\\n        unchecked {\\n            balanceOf[to] += value;\\n        }\\n\\n        emit Transfer(from, to, value);\\n\\n        return true;\\n    }\\n\\n    /*///////////////////////////////////////////////////////////////\\n                             ORC PRIVILEGE\\n    //////////////////////////////////////////////////////////////*/\\n\\n    function mint(address to, uint256 value) external {\\n        require(isMinter[msg.sender], \\\"FORBIDDEN TO MINT\\\");\\n        _mint(to, value);\\n    }\\n\\n    function burn(address from, uint256 value) external {\\n        require(isMinter[msg.sender], \\\"FORBIDDEN TO BURN\\\");\\n        _burn(from, value);\\n    }\\n\\n    /*///////////////////////////////////////////////////////////////\\n                         Ruler Function\\n    //////////////////////////////////////////////////////////////*/\\n\\n    function setMinter(address minter, bool status) external {\\n        require(msg.sender == ruler, \\\"NOT ALLOWED TO RULE\\\");\\n\\n        isMinter[minter] = status;\\n    }\\n\\n    function setRuler(address ruler_) external {\\n        require(msg.sender == ruler ||ruler == address(0), \\\"NOT ALLOWED TO RULE\\\");\\n\\n        ruler = ruler_;\\n    }\\n\\n\\n    /*///////////////////////////////////////////////////////////////\\n                          INTERNAL UTILS\\n    //////////////////////////////////////////////////////////////*/\\n\\n    function _mint(address to, uint256 value) internal {\\n        totalSupply += value;\\n\\n        // This is safe because the sum of all user\\n        // balances can\\u0027t exceed type(uint256).max!\\n        unchecked {\\n            balanceOf[to] += value;\\n        }\\n\\n        emit Transfer(address(0), to, value);\\n    }\\n\\n    function _burn(address from, uint256 value) internal {\\n        balanceOf[from] -= value;\\n\\n        // This is safe because a user won\\u0027t ever\\n        // have a balance larger than totalSupply!\\n        unchecked {\\n            totalSupply -= value;\\n        }\\n\\n        emit Transfer(from, address(0), value);\\n    }\\n}\\n\"},\"ERC721.sol\":{\"content\":\"// SPDX-License-Identifier: AGPL-3.0-only\\npragma solidity 0.8.7;\\n\\n\\n/// @notice Modern and gas efficient ERC-721 + ERC-20/EIP-2612-like implementation,\\n/// including the MetaData, and partially, Enumerable extensions.\\ncontract ERC721 {\\n    /*///////////////////////////////////////////////////////////////\\n                                  EVENTS\\n    //////////////////////////////////////////////////////////////*/\\n    \\n    event Transfer(address indexed from, address indexed to, uint256 indexed tokenId);\\n    \\n    event Approval(address indexed owner, address indexed spender, uint256 indexed tokenId);\\n    \\n    event ApprovalForAll(address indexed owner, address indexed operator, bool approved);\\n    \\n    /*///////////////////////////////////////////////////////////////\\n                             METADATA STORAGE\\n    //////////////////////////////////////////////////////////////*/\\n    \\n    address        implementation_;\\n    address public admin; //Lame requirement from opensea\\n    \\n    /*///////////////////////////////////////////////////////////////\\n                             ERC-721 STORAGE\\n    //////////////////////////////////////////////////////////////*/\\n\\n    uint256 public totalSupply;\\n    uint256 public oldSupply;\\n    uint256 public minted;\\n    \\n    mapping(address =\\u003e uint256) public balanceOf;\\n    \\n    mapping(uint256 =\\u003e address) public ownerOf;\\n        \\n    mapping(uint256 =\\u003e address) public getApproved;\\n \\n    mapping(address =\\u003e mapping(address =\\u003e bool)) public isApprovedForAll;\\n\\n    /*///////////////////////////////////////////////////////////////\\n                             VIEW FUNCTION\\n    //////////////////////////////////////////////////////////////*/\\n\\n    function owner() external view returns (address) {\\n        return admin;\\n    }\\n    \\n    /*///////////////////////////////////////////////////////////////\\n                              ERC-20-LIKE LOGIC\\n    //////////////////////////////////////////////////////////////*/\\n    \\n    function transfer(address to, uint256 tokenId) external {\\n        require(msg.sender == ownerOf[tokenId], \\\"NOT_OWNER\\\");\\n        \\n        _transfer(msg.sender, to, tokenId);\\n        \\n    }\\n    \\n    /*///////////////////////////////////////////////////////////////\\n                              ERC-721 LOGIC\\n    //////////////////////////////////////////////////////////////*/\\n    \\n    function supportsInterface(bytes4 interfaceId) external pure returns (bool supported) {\\n        supported = interfaceId == 0x80ac58cd || interfaceId == 0x5b5e139f;\\n    }\\n    \\n    function approve(address spender, uint256 tokenId) external {\\n        address owner_ = ownerOf[tokenId];\\n        \\n        require(msg.sender == owner_ || isApprovedForAll[owner_][msg.sender], \\\"NOT_APPROVED\\\");\\n        \\n        getApproved[tokenId] = spender;\\n        \\n        emit Approval(owner_, spender, tokenId); \\n    }\\n    \\n    function setApprovalForAll(address operator, bool approved) external {\\n        isApprovedForAll[msg.sender][operator] = approved;\\n        \\n        emit ApprovalForAll(msg.sender, operator, approved);\\n    }\\n\\n    function transferFrom(address, address to, uint256 tokenId) public {\\n        address owner_ = ownerOf[tokenId];\\n        \\n        require(\\n            msg.sender == owner_ \\n            || msg.sender == getApproved[tokenId]\\n            || isApprovedForAll[owner_][msg.sender], \\n            \\\"NOT_APPROVED\\\"\\n        );\\n        \\n        _transfer(owner_, to, tokenId);\\n        \\n    }\\n    \\n    function safeTransferFrom(address, address to, uint256 tokenId) external {\\n        safeTransferFrom(address(0), to, tokenId, \\\"\\\");\\n    }\\n    \\n    function safeTransferFrom(address, address to, uint256 tokenId, bytes memory data) public {\\n        transferFrom(address(0), to, tokenId); \\n        \\n        if (to.code.length != 0) {\\n            // selector = `onERC721Received(address,address,uint,bytes)`\\n            (, bytes memory returned) = to.staticcall(abi.encodeWithSelector(0x150b7a02,\\n                msg.sender, address(0), tokenId, data));\\n                \\n            bytes4 selector = abi.decode(returned, (bytes4));\\n            \\n            require(selector == 0x150b7a02, \\\"NOT_ERC721_RECEIVER\\\");\\n        }\\n    }\\n    \\n    \\n    /*///////////////////////////////////////////////////////////////\\n                          INTERNAL UTILS\\n    //////////////////////////////////////////////////////////////*/\\n\\n    function _transfer(address from, address to, uint256 tokenId) internal {\\n        require(ownerOf[tokenId] == from);\\n\\n        balanceOf[from]--; \\n        balanceOf[to]++;\\n        \\n        delete getApproved[tokenId];\\n        \\n        ownerOf[tokenId] = to;\\n        emit Transfer(msg.sender, to, tokenId); \\n\\n    }\\n\\n    function _mint(address to, uint256 tokenId) internal { \\n        require(ownerOf[tokenId] == address(0), \\\"ALREADY_MINTED\\\");\\n\\n        uint maxSupply = oldSupply + minted++;\\n        require(totalSupply++ \\u003c= maxSupply, \\\"MAX SUPPLY REACHED\\\");\\n                \\n        // This is safe because the sum of all user\\n        // balances can\\u0027t exceed type(uint256).max!\\n        unchecked {\\n            balanceOf[to]++;\\n        }\\n        \\n        ownerOf[tokenId] = to;\\n                \\n        emit Transfer(address(0), to, tokenId); \\n    }\\n    \\n    function _burn(uint256 tokenId) internal { \\n        address owner_ = ownerOf[tokenId];\\n        \\n        require(ownerOf[tokenId] != address(0), \\\"NOT_MINTED\\\");\\n        \\n        totalSupply--;\\n        balanceOf[owner_]--;\\n        \\n        delete ownerOf[tokenId];\\n                \\n        emit Transfer(owner_, address(0), tokenId); \\n    }\\n}\\n\"},\"EtherOrcs.sol\":{\"content\":\"// SPDX-License-Identifier: Unlicense\\npragma solidity 0.8.7;\\n\\nimport \\\"./ERC20.sol\\\";\\nimport \\\"./ERC721.sol\\\"; \\n\\n//    ___ _   _               ___            \\n//  | __| |_| |_  ___ _ _   / _ \\\\ _ _ __ ___\\n//  | _||  _| \\u0027 \\\\/ -_) \\u0027_| | (_) | \\u0027_/ _(_-\\u003c\\n//  |___|\\\\__|_||_\\\\___|_|    \\\\___/|_| \\\\__/__/\\n//\\n\\ninterface MetadataHandlerLike {\\n    function getTokenURI(uint16 id, uint8 body, uint8 helm, uint8 mainhand, uint8 offhand, uint16 level, uint16 zugModifier) external view returns (string memory);\\n}\\n\\n\\ncontract EtherOrcs is ERC721 {\\n\\n    /*///////////////////////////////////////////////////////////////\\n                    Global STATE\\n    //////////////////////////////////////////////////////////////*/\\n\\n    uint256 public constant  cooldown = 10 minutes;\\n    uint256 public constant  startingTime = 1633951800 + 4.5 hours;\\n\\n    address public migrator;\\n\\n    bytes32 internal entropySauce;\\n\\n    ERC20 public zug;\\n\\n    mapping (address =\\u003e bool)     public auth;\\n    mapping (uint256 =\\u003e Orc)      public orcs;\\n    mapping (uint256 =\\u003e Action)   public activities;\\n    mapping (Places  =\\u003e LootPool) public lootPools;\\n\\n    MetadataHandlerLike metadaHandler;\\n\\n    function setAddresses(address mig, address meta) external onlyOwner {\\n        migrator      = mig;\\n        metadaHandler = MetadataHandlerLike(meta);\\n    }\\n\\n    function setAuth(address add, bool isAuth) external onlyOwner {\\n        auth[add] = isAuth;\\n    }\\n\\n\\n    function transferOwnership(address newOwner) external  onlyOwner{\\n        admin = newOwner;\\n    }\\n\\n    function tokenURI(uint256 id) external view returns(string memory) {\\n        Orc memory orc = orcs[id];\\n        return metadaHandler.getTokenURI(uint16(id), orc.body, orc.helm, orc.mainhand, orc.offhand, orc.level, orc.zugModifier);\\n    }\\n\\n    event ActionMade(address owner, uint256 id, uint256 timestamp, uint8 activity);\\n\\n\\n    /*///////////////////////////////////////////////////////////////\\n                DATA STRUCTURES \\n    //////////////////////////////////////////////////////////////*/\\n\\n    struct LootPool { \\n        uint8  minLevel; uint8  minLootTier; uint16  cost;   uint16 total;\\n        uint16 tier_1;   uint16 tier_2;      uint16 tier_3; uint16 tier_4;\\n    }\\n\\n    struct Orc { uint8 body; uint8 helm; uint8 mainhand; uint8 offhand; uint16 level; uint16 zugModifier; uint32 lvlProgress; }\\n\\n    enum   Actions { UNSTAKED, FARMING, TRAINING }\\n    struct Action  { address owner; uint88 timestamp; Actions action; }\\n\\n    // These are all the places you can go search for loot\\n    enum Places { \\n        TOWN, DUNGEON, CRYPT, CASTLE, DRAGONS_LAIR, THE_ETHER, \\n        TAINTED_KINGDOM, OOZING_DEN, ANCIENT_CHAMBER, ORC_GODS \\n    }   \\n\\n    /*///////////////////////////////////////////////////////////////\\n                    CONSTRUCTOR\\n    //////////////////////////////////////////////////////////////*/\\n    function initialize() public onlyOwner {\\n\\n        // Here\\u0027s whats available in each place\\n        LootPool memory town           = LootPool({ minLevel: 1,  minLootTier:  1, cost:   0, total: 1000, tier_1: 800,  tier_2: 150,  tier_3: 50,  tier_4:   0 });\\n        LootPool memory dungeon        = LootPool({ minLevel: 3,  minLootTier:  2, cost:   0, total: 1000, tier_1: 800,  tier_2: 150,  tier_3: 50,  tier_4:   0 });\\n        LootPool memory crypt          = LootPool({ minLevel: 6,  minLootTier:  3, cost:   0, total: 2619, tier_1: 1459, tier_2: 1025, tier_3: 135, tier_4:   0 });\\n        LootPool memory castle         = LootPool({ minLevel: 15, minLootTier:  4, cost:   0, total: 6000, tier_1: 3300, tier_2: 2400, tier_3: 300, tier_4:   0 });\\n        LootPool memory dragonsLair    = LootPool({ minLevel: 25, minLootTier:  5, cost:   0, total: 6000, tier_1: 3300, tier_2: 2400, tier_3: 300, tier_4:   0 });\\n        LootPool memory theEther       = LootPool({ minLevel: 36, minLootTier:  6, cost:   0, total: 3000, tier_1: 1200, tier_2: 1500, tier_3: 300, tier_4:   0 });\\n        LootPool memory taintedKingdom = LootPool({ minLevel: 15, minLootTier:  4, cost:  50, total:  600, tier_1:  150, tier_2:  150, tier_3: 150, tier_4: 150 });\\n        LootPool memory oozingDen      = LootPool({ minLevel: 25, minLootTier:  5, cost:  50, total:  600, tier_1:  150, tier_2:  150, tier_3: 150, tier_4: 150 });\\n        LootPool memory ancientChamber = LootPool({ minLevel: 45, minLootTier:  9, cost: 125, total:  225, tier_1:  225, tier_2:    0, tier_3:   0, tier_4:   0 });\\n        LootPool memory orcGods        = LootPool({ minLevel: 52, minLootTier: 10, cost: 300, total:   12, tier_1:    0, tier_2:    0, tier_3:   0, tier_4:   0 });\\n\\n        lootPools[Places.TOWN]            = town;\\n        lootPools[Places.DUNGEON]         = dungeon;\\n        lootPools[Places.CRYPT]           = crypt;\\n        lootPools[Places.CASTLE]          = castle;\\n        lootPools[Places.DRAGONS_LAIR]    = dragonsLair;\\n        lootPools[Places.THE_ETHER]       = theEther;\\n        lootPools[Places.TAINTED_KINGDOM] = taintedKingdom;\\n        lootPools[Places.OOZING_DEN]      = oozingDen;\\n        lootPools[Places.ANCIENT_CHAMBER] = ancientChamber;\\n        lootPools[Places.ORC_GODS]        = orcGods;\\n\\n        auth[msg.sender] = true;\\n        zug = ERC20(0xfEE5F54e1070e7eD31Be341e0A5b1E847f6a84Ab);\\n        oldSupply = ERC721(0x7d9d3659dcfbea08a87777c52020BC672deece13).totalSupply();\\n    }\\n\\n    /*///////////////////////////////////////////////////////////////\\n                    MODIFIERS \\n    //////////////////////////////////////////////////////////////*/\\n\\n    modifier noCheaters() {\\n        uint256 size = 0;\\n        address acc = msg.sender;\\n        assembly { size := extcodesize(acc)}\\n\\n        require(auth[msg.sender] || (msg.sender == tx.origin \\u0026\\u0026 size == 0), \\\"you\\u0027re trying to cheat!\\\");\\n        _;\\n\\n        // We\\u0027ll use the last caller hash to add entropy to next caller\\n        entropySauce = keccak256(abi.encodePacked(acc, block.coinbase));\\n    }\\n\\n    modifier ownerOfOrc(uint256 id) { \\n        require(ownerOf[id] == msg.sender || activities[id].owner == msg.sender, \\\"not your orc\\\");\\n        _;\\n    }\\n\\n    modifier onlyOwner() {\\n        require(msg.sender == admin);\\n        _;\\n    }\\n\\n\\n    /*///////////////////////////////////////////////////////////////\\n                    PUBLIC FUNCTIONS\\n    //////////////////////////////////////////////////////////////*/\\n\\n    function mint() public noCheaters returns (uint256 id) {\\n        uint256 cost = _getMintingPrice();\\n        uint256 rand = _rand();\\n        require(address(zug) != address(0));\\n\\n        if (cost \\u003e 0) zug.burn(msg.sender, cost);\\n\\n        return _mintOrc(rand);\\n    }\\n\\n    // Craft an identical orc from v1!\\n    function craft(address owner_, uint256 id, uint8 body, uint8 helm, uint8 mainhand, uint8 offhand, uint16 level, uint32 lvlProgres) public {\\n        require(msg.sender == migrator);\\n\\n        _mint(owner_, id);\\n\\n        uint16 zugModifier = _tier(helm) + _tier(mainhand) + _tier(offhand);\\n        orcs[uint256(id)] = Orc({body: body, helm: helm, mainhand: mainhand, offhand: offhand, level: level, lvlProgress: lvlProgres, zugModifier:zugModifier});\\n    }\\n\\n    function migrationAction(uint256 id, address owner_, Actions action_) public {\\n        require(msg.sender == migrator);\\n\\n        _doAction(id, owner_, action_);\\n\\n        //Add a time bonus\\n        activities[id].timestamp = uint88(block.timestamp - 120 minutes);\\n    }\\n\\n    function doAction(uint256 id, Actions action_) public ownerOfOrc(id) noCheaters {\\n       _doAction(id, msg.sender, action_);\\n    }\\n\\n    function _doAction(uint256 id, address orcOwner, Actions action_) internal {\\n        Action memory action = activities[id];\\n        require(action.action != action_, \\\"already doing that\\\");\\n\\n        // Picking the largest value between block.timestamp, action.timestamp and startingTime\\n        uint88 timestamp = uint88(block.timestamp \\u003e action.timestamp ? block.timestamp : action.timestamp);\\n\\n        if (action.action == Actions.UNSTAKED)  _transfer(orcOwner, address(this), id);\\n     \\n        else {\\n            if (block.timestamp \\u003e action.timestamp) _claim(id);\\n            timestamp = timestamp \\u003e action.timestamp ? timestamp : action.timestamp;\\n        }\\n\\n        address owner_ = action_ == Actions.UNSTAKED ? address(0) : orcOwner;\\n        if (action_ == Actions.UNSTAKED) _transfer(address(this), orcOwner, id);\\n\\n        activities[id] = Action({owner: owner_, action: action_,timestamp: timestamp});\\n        emit ActionMade(orcOwner, id, block.timestamp, uint8(action_));\\n    }\\n\\n    function doActionWithManyOrcs(uint256[] calldata ids, Actions action_) external {\\n        for (uint256 index = 0; index \\u003c ids.length; index++) {\\n            _doAction(ids[index], msg.sender, action_);\\n        }\\n    }\\n\\n    function claim(uint256[] calldata ids) external {\\n        for (uint256 index = 0; index \\u003c ids.length; index++) {\\n            _claim(ids[index]);\\n        }\\n    }\\n\\n    function _claim(uint256 id) internal noCheaters {\\n        Orc    memory orc    = orcs[id];\\n        Action memory action = activities[id];\\n\\n        if(block.timestamp \\u003c= action.timestamp) return;\\n\\n        uint256 timeDiff = uint256(block.timestamp - action.timestamp);\\n\\n        if (action.action == Actions.FARMING) zug.mint(action.owner, claimableZug(timeDiff, orc.zugModifier));\\n       \\n        if (action.action == Actions.TRAINING) {\\n            uint256 progress = timeDiff * 3000 / 1 days;\\n            orcs[id].lvlProgress = uint16(progress % 1000);\\n            orcs[id].level      += uint16(progress / 1000);\\n        }\\n\\n        activities[id].timestamp = uint88(block.timestamp);\\n    }\\n\\n    function pillage(uint256 id, Places place, bool tryHelm, bool tryMainhand, bool tryOffhand) public ownerOfOrc(id) noCheaters {\\n        require(block.timestamp \\u003e= uint256(activities[id].timestamp), \\\"on cooldown\\\");\\n        require(place != Places.ORC_GODS,  \\\"You can\\u0027t pillage the Orc God\\\");\\n\\n        if(activities[id].timestamp \\u003c block.timestamp) _claim(id); // Need to claim to not have equipment reatroactively multiplying\\n\\n        uint256 rand_ = _rand();\\n  \\n        LootPool memory pool = lootPools[place];\\n        require(orcs[id].level \\u003e= uint16(pool.minLevel), \\\"below minimum level\\\");\\n\\n        if (pool.cost \\u003e 0) {\\n            require(block.timestamp - startingTime \\u003e 14 days);\\n            zug.burn(msg.sender, uint256(pool.cost) * 1 ether);\\n        } \\n\\n        uint8 item;\\n        if (tryHelm) {\\n            ( pool, item ) = _getItemFromPool(pool, _randomize(rand_,\\\"HELM\\\", id));\\n            if (item != 0 ) orcs[id].helm = item;\\n        }\\n        if (tryMainhand) {\\n            ( pool, item ) = _getItemFromPool(pool, _randomize(rand_,\\\"MAINHAND\\\", id));\\n            if (item != 0 ) orcs[id].mainhand = item;\\n        }\\n        if (tryOffhand) {\\n            ( pool, item ) = _getItemFromPool(pool, _randomize(rand_,\\\"OFFHAND\\\", id));\\n            if (item != 0 ) orcs[id].offhand = item;\\n        }\\n\\n        if (uint(place) \\u003e 1) lootPools[place] = pool;\\n\\n        // Update zug modifier\\n        Orc memory orc = orcs[id];\\n        uint16 zugModifier_ = _tier(orc.helm) + _tier(orc.mainhand) + _tier(orc.offhand);\\n\\n        orcs[id].zugModifier = zugModifier_;\\n\\n        activities[id].timestamp = uint88(block.timestamp + cooldown);\\n    } \\n\\n    function update(uint256 id) public ownerOfOrc(id) noCheaters {\\n        require(_tier(orcs[id].mainhand) \\u003c 10);\\n        require(block.timestamp - startingTime \\u003e= 14 days);\\n        \\n        LootPool memory pool = lootPools[Places.ORC_GODS];\\n        require(orcs[id].level \\u003e= pool.minLevel);\\n\\n        zug.burn(msg.sender, uint256(pool.cost) * 1 ether);\\n\\n        _claim(id); // Need to claim to not have equipment reatroactively multiplying\\n\\n        uint8 item = uint8(lootPools[Places.ORC_GODS].total--);\\n        orcs[id].zugModifier = 30;\\n        orcs[id].body = orcs[id].helm = orcs[id].mainhand = orcs[id].offhand = item + 40;\\n    }\\n\\n    /*///////////////////////////////////////////////////////////////\\n                    VIEWERS\\n    //////////////////////////////////////////////////////////////*/\\n\\n    function claimable(uint256 id) external view returns (uint256 amount) {\\n        uint256 timeDiff = block.timestamp \\u003e activities[id].timestamp ? uint256(block.timestamp - activities[id].timestamp) : 0;\\n        amount = activities[id].action == Actions.FARMING ? claimableZug(timeDiff, orcs[id].zugModifier) : timeDiff * 3000 / 1 days;\\n    }\\n\\n    function name() external pure returns (string memory) {\\n        return \\\"Ether Orcs Genesis\\\";\\n    }\\n\\n    function symbol() external pure returns (string memory) {\\n        return \\\"Orcs\\\";\\n    }\\n\\n\\n    /*///////////////////////////////////////////////////////////////\\n                    MINT FUNCTION\\n    //////////////////////////////////////////////////////////////*/\\n\\n    function _mintOrc(uint256 rand) internal returns (uint16 id) {\\n        (uint8 body,uint8 helm,uint8 mainhand,uint8 offhand) = (0,0,0,0);\\n\\n        {\\n            // Helpers to get Percentages\\n            uint256 sevenOnePct   = type(uint16).max / 100 * 71;\\n            uint256 eightyPct     = type(uint16).max / 100 * 80;\\n            uint256 nineFivePct   = type(uint16).max / 100 * 95;\\n            uint256 nineNinePct   = type(uint16).max / 100 * 99;\\n    \\n            id = uint16(totalSupply + 1);\\n    \\n            // Getting Random traits\\n            uint16 randBody = uint16(_randomize(rand, \\\"BODY\\\", id));\\n                   body     = uint8(randBody \\u003e nineNinePct ? randBody % 3 + 25 : \\n                              randBody \\u003e sevenOnePct  ? randBody % 12 + 13 : randBody % 13 + 1 );\\n    \\n            uint16 randHelm = uint16(_randomize(rand, \\\"HELM\\\", id));\\n                   helm     = uint8(randHelm \\u003c eightyPct ? 0 : randHelm % 4 + 5);\\n    \\n            uint16 randOffhand = uint16(_randomize(rand, \\\"OFFHAND\\\", id));\\n                   offhand     = uint8(randOffhand \\u003c eightyPct ? 0 : randOffhand % 4 + 5);\\n    \\n            uint16 randMainhand = uint16(_randomize(rand, \\\"MAINHAND\\\", id));\\n                   mainhand     = uint8(randMainhand \\u003c nineFivePct ? randMainhand % 4 + 1: randMainhand % 4 + 5);\\n        }\\n\\n        _mint(msg.sender, id);\\n\\n        uint16 zugModifier = _tier(helm) + _tier(mainhand) + _tier(offhand);\\n        orcs[uint256(id)] = Orc({body: body, helm: helm, mainhand: mainhand, offhand: offhand, level: 0, lvlProgress: 0, zugModifier:zugModifier});\\n    }\\n\\n    /*///////////////////////////////////////////////////////////////\\n                    INTERNAL  HELPERS\\n    //////////////////////////////////////////////////////////////*/\\n\\n    /// @dev take an available item from a pool\\n    function _getItemFromPool(LootPool memory pool, uint256 rand) internal pure returns (LootPool memory, uint8 item) {\\n        uint draw = rand % pool.total--; \\n\\n        if (draw \\u003e pool.tier_1 + pool.tier_2 + pool.tier_3 \\u0026\\u0026 pool.tier_4-- \\u003e 0) {\\n            item = uint8((draw % 4 + 1) + (pool.minLootTier + 3) * 4);     \\n            return (pool, item);\\n        }\\n\\n        if (draw \\u003e pool.tier_1 + pool.tier_2 \\u0026\\u0026 pool.tier_3-- \\u003e 0) {\\n            item = uint8((draw % 4 + 1) + (pool.minLootTier + 2) * 4);\\n            return (pool, item);\\n        }\\n\\n        if (draw \\u003e pool.tier_1 \\u0026\\u0026 pool.tier_2-- \\u003e 0) {\\n            item = uint8((draw % 4 + 1) + (pool.minLootTier + 1) * 4);\\n            return (pool, item);\\n        }\\n\\n        if (pool.tier_1-- \\u003e 0) {\\n            item = uint8((draw % 4 + 1) + pool.minLootTier * 4);\\n            return (pool, item);\\n        }\\n    }\\n\\n    function claimableZug(uint256 timeDiff, uint16 zugModifier) internal pure returns (uint256 zugAmount) {\\n        zugAmount = timeDiff * (4 + zugModifier) * 1 ether / 1 days;\\n    }\\n\\n    /// @dev Convert an id to its tier\\n    function _tier(uint16 id) internal pure returns (uint16) {\\n        if (id == 0) return 0;\\n        return ((id - 1) / 4 );\\n    }\\n\\n    /// @dev Create a bit more of randomness\\n    function _randomize(uint256 rand, string memory val, uint256 spicy) internal pure returns (uint256) {\\n        return uint256(keccak256(abi.encode(rand, val, spicy)));\\n    }\\n\\n    function _rand() internal view returns (uint256) {\\n        return uint256(keccak256(abi.encodePacked(msg.sender, block.timestamp, block.basefee, block.timestamp, entropySauce)));\\n    }\\n\\n    function _getMintingPrice() internal view returns (uint256) {\\n        uint256 supply = minted + oldSupply;\\n        if (supply \\u003c 1550) return   0;\\n        if (supply \\u003c 2050) return   4 ether;\\n        if (supply \\u003c 2550) return   8 ether;\\n        if (supply \\u003c 3050) return  12 ether;\\n        if (supply \\u003c 3550) return  24 ether;\\n        if (supply \\u003c 4050) return  40 ether;\\n        if (supply \\u003c 4550) return  60 ether;\\n        if (supply \\u003c 5050) return 130 ether;\\n    }\\n}\\n\\n\"},\"EtherOrcsGenesis.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity 0.8.7;\\n\\nimport \\\"./ERC20.sol\\\";\\nimport \\\"./ERC721.sol\\\"; \\n\\ninterface MetadataHandlerLike {\\n    function getTokenURI(uint16 id, uint8 body, uint8 helm, uint8 mainhand, uint8 offhand, uint16 level, uint16 zugModifier) external view returns (string memory);\\n}\\n\\ncontract EtherOrcs is ERC721 {\\n\\n    /*///////////////////////////////////////////////////////////////\\n                    Global STATE\\n    //////////////////////////////////////////////////////////////*/\\n\\n    uint256 public constant  cooldown = 10 minutes;\\n    uint256 public constant  startingTime = 1633951800 + 4.5 hours;\\n\\n    address public migrator;\\n\\n    bytes32 internal entropySauce;\\n\\n    ERC20 public zug = ERC20(0xfEE5F54e1070e7eD31Be341e0A5b1E847f6a84Ab);\\n\\n    mapping (address =\\u003e bool)     public auth;\\n    mapping (uint256 =\\u003e Orc)      public orcs;\\n    mapping (uint256 =\\u003e Action)   public activities;\\n    mapping (Places  =\\u003e LootPool) public lootPools;\\n\\n    MetadataHandlerLike metadaHandler;\\n\\n    function setAddresses(address mig, address meta) external onlyOwner {\\n        migrator      = mig;\\n        metadaHandler = MetadataHandlerLike(meta);\\n    }\\n\\n    function setAuth(address add, bool isAuth) external onlyOwner {\\n        auth[add] = isAuth;\\n    }\\n\\n\\n    function transferOwnership(address newOwner) external  onlyOwner{\\n        admin = newOwner;\\n    }\\n\\n    function tokenURI(uint256 id) external view returns(string memory) {\\n        Orc memory orc = orcs[id];\\n        return metadaHandler.getTokenURI(uint16(id), orc.body, orc.helm, orc.mainhand, orc.offhand, orc.level, orc.zugModifier);\\n    }\\n\\n    event ActionMade(address owner, uint256 id, uint256 timestamp, uint8 activity);\\n\\n\\n    /*///////////////////////////////////////////////////////////////\\n                DATA STRUCTURES \\n    //////////////////////////////////////////////////////////////*/\\n\\n    struct LootPool { \\n        uint8  minLevel; uint8  minLootTier; uint16  cost;   uint16 total;\\n        uint16 tier_1;   uint16 tier_2;      uint16 tier_3; uint16 tier_4;\\n    }\\n\\n    struct Orc { uint8 body; uint8 helm; uint8 mainhand; uint8 offhand; uint16 level; uint16 zugModifier; uint32 lvlProgress; }\\n\\n    enum   Actions { UNSTAKED, FARMING, TRAINING }\\n    struct Action  { address owner; uint88 timestamp; Actions action; }\\n\\n    // These are all the places you can go search for loot\\n    enum Places { \\n        TOWN, DUNGEON, CRYPT, CASTLE, DRAGONS_LAIR, THE_ETHER, \\n        TAINTED_KINGDOM, OOZING_DEN, ANCIENT_CHAMBER, ORC_GODS \\n    }   \\n\\n    /*///////////////////////////////////////////////////////////////\\n                    CONSTRUCTOR\\n    //////////////////////////////////////////////////////////////*/\\n    function initialize() public onlyOwner {\\n\\n        // Here\\u0027s whats available in each place\\n        LootPool memory town           = LootPool({ minLevel: 1,  minLootTier:  1, cost:   0, total: 1000, tier_1: 800,  tier_2: 150,  tier_3: 50,  tier_4:   0 });\\n        LootPool memory dungeon        = LootPool({ minLevel: 3,  minLootTier:  2, cost:   0, total: 1000, tier_1: 800,  tier_2: 150,  tier_3: 50,  tier_4:   0 });\\n        LootPool memory crypt          = LootPool({ minLevel: 6,  minLootTier:  3, cost:   0, total: 2619, tier_1: 1459, tier_2: 1025, tier_3: 135, tier_4:   0 });\\n        LootPool memory castle         = LootPool({ minLevel: 15, minLootTier:  4, cost:   0, total: 6000, tier_1: 3300, tier_2: 2400, tier_3: 300, tier_4:   0 });\\n        LootPool memory dragonsLair    = LootPool({ minLevel: 25, minLootTier:  5, cost:   0, total: 6000, tier_1: 3300, tier_2: 2400, tier_3: 300, tier_4:   0 });\\n        LootPool memory theEther       = LootPool({ minLevel: 36, minLootTier:  6, cost:   0, total: 3000, tier_1: 1200, tier_2: 1500, tier_3: 300, tier_4:   0 });\\n        LootPool memory taintedKingdom = LootPool({ minLevel: 15, minLootTier:  4, cost:  50, total:  600, tier_1:  150, tier_2:  150, tier_3: 150, tier_4: 150 });\\n        LootPool memory oozingDen      = LootPool({ minLevel: 25, minLootTier:  5, cost:  50, total:  600, tier_1:  150, tier_2:  150, tier_3: 150, tier_4: 150 });\\n        LootPool memory ancientChamber = LootPool({ minLevel: 45, minLootTier:  9, cost: 125, total:  225, tier_1:  225, tier_2:    0, tier_3:   0, tier_4:   0 });\\n        LootPool memory orcGods        = LootPool({ minLevel: 52, minLootTier: 10, cost: 300, total:   12, tier_1:    0, tier_2:    0, tier_3:   0, tier_4:   0 });\\n\\n        lootPools[Places.TOWN]            = town;\\n        lootPools[Places.DUNGEON]         = dungeon;\\n        lootPools[Places.CRYPT]           = crypt;\\n        lootPools[Places.CASTLE]          = castle;\\n        lootPools[Places.DRAGONS_LAIR]    = dragonsLair;\\n        lootPools[Places.THE_ETHER]       = theEther;\\n        lootPools[Places.TAINTED_KINGDOM] = taintedKingdom;\\n        lootPools[Places.OOZING_DEN]      = oozingDen;\\n        lootPools[Places.ANCIENT_CHAMBER] = ancientChamber;\\n        lootPools[Places.ORC_GODS]        = orcGods;\\n\\n        admin = msg.sender;\\n        auth[msg.sender] = true;\\n\\n        oldSupply = ERC721(0x7d9d3659dcfbea08a87777c52020BC672deece13).totalSupply();\\n    }\\n\\n    /*///////////////////////////////////////////////////////////////\\n                    MODIFIERS \\n    //////////////////////////////////////////////////////////////*/\\n\\n    modifier noCheaters() {\\n        uint256 size = 0;\\n        address acc = msg.sender;\\n        assembly { size := extcodesize(acc)}\\n\\n        require(auth[msg.sender] || (msg.sender == tx.origin \\u0026\\u0026 size == 0), \\\"you\\u0027re trying to cheat!\\\");\\n        _;\\n\\n        // We\\u0027ll use the last caller hash to add entropy to next caller\\n        entropySauce = keccak256(abi.encodePacked(acc, block.coinbase));\\n    }\\n\\n    modifier ownerOfOrc(uint256 id) { \\n        require(ownerOf[id] == msg.sender || activities[id].owner == msg.sender, \\\"not your orc\\\");\\n        _;\\n    }\\n\\n    modifier onlyOwner() {\\n        require(msg.sender == admin);\\n        _;\\n    }\\n\\n\\n    /*///////////////////////////////////////////////////////////////\\n                    PUBLIC FUNCTIONS\\n    //////////////////////////////////////////////////////////////*/\\n\\n    function mint() public noCheaters returns (uint256 id) {\\n        uint256 cost = _getMintingPrice();\\n        uint256 rand = _rand();\\n\\n        if (cost \\u003e 0) zug.burn(msg.sender, cost);\\n\\n        return _mintOrc(rand);\\n    }\\n\\n    // Craft an identical orc from v1!\\n    function craft(address owner_, uint256 id, uint8 body, uint8 helm, uint8 mainhand, uint8 offhand, uint16 level, uint32 lvlProgres) public {\\n        require(msg.sender == migrator);\\n\\n        _mint(owner_, id);\\n\\n        uint16 zugModifier = _tier(helm) + _tier(mainhand) + _tier(offhand);\\n        orcs[uint256(id)] = Orc({body: body, helm: helm, mainhand: mainhand, offhand: offhand, level: level, lvlProgress: lvlProgres, zugModifier:zugModifier});\\n    }\\n\\n    function migrationAction(uint256 id, address owner_, Actions action_) public {\\n        require(msg.sender == migrator);\\n\\n        _doAction(id, owner_, action_);\\n\\n        //Add a time bonus\\n        activities[id].timestamp = uint88(block.timestamp - 120 minutes);\\n    }\\n\\n    function doAction(uint256 id, Actions action_) public ownerOfOrc(id) noCheaters {\\n       _doAction(id, msg.sender, action_);\\n    }\\n\\n    function _doAction(uint256 id, address orcOwner, Actions action_) internal {\\n        Action memory action = activities[id];\\n        require(action.action != action_, \\\"already doing that\\\");\\n\\n        // Picking the largest value between block.timestamp, action.timestamp and startingTime\\n        uint88 timestamp = uint88(block.timestamp \\u003e action.timestamp ? block.timestamp : action.timestamp);\\n\\n        if (action.action == Actions.UNSTAKED)  _transfer(orcOwner, address(this), id);\\n     \\n        else {\\n            if (block.timestamp \\u003e action.timestamp) _claim(id);\\n            timestamp = timestamp \\u003e action.timestamp ? timestamp : action.timestamp;\\n        }\\n\\n        address owner_ = action_ == Actions.UNSTAKED ? address(0) : orcOwner;\\n        if (action_ == Actions.UNSTAKED) _transfer(address(this), orcOwner, id);\\n\\n        activities[id] = Action({owner: owner_, action: action_,timestamp: timestamp});\\n        emit ActionMade(orcOwner, id, block.timestamp, uint8(action_));\\n    }\\n\\n    function doActionWithManyOrcs(uint256[] calldata ids, Actions action_) external {\\n        for (uint256 index = 0; index \\u003c ids.length; index++) {\\n            _doAction(ids[index], msg.sender, action_);\\n        }\\n    }\\n\\n    function claim(uint256[] calldata ids) external {\\n        for (uint256 index = 0; index \\u003c ids.length; index++) {\\n            _claim(ids[index]);\\n        }\\n    }\\n\\n    function _claim(uint256 id) internal noCheaters {\\n        Orc    memory orc    = orcs[id];\\n        Action memory action = activities[id];\\n\\n        if(block.timestamp \\u003c= action.timestamp) return;\\n\\n        uint256 timeDiff = uint256(block.timestamp - action.timestamp);\\n\\n        if (action.action == Actions.FARMING) zug.mint(action.owner, claimableZug(timeDiff, orc.zugModifier));\\n       \\n        if (action.action == Actions.TRAINING) {\\n            uint256 progress = timeDiff * 3000 / 1 days;\\n            orcs[id].lvlProgress = uint16(progress % 1000);\\n            orcs[id].level      += uint16(progress / 1000);\\n        }\\n\\n        activities[id].timestamp = uint88(block.timestamp);\\n    }\\n\\n    function pillage(uint256 id, Places place, bool tryHelm, bool tryMainhand, bool tryOffhand) public ownerOfOrc(id) noCheaters {\\n        require(block.timestamp \\u003e= uint256(activities[id].timestamp), \\\"on cooldown\\\");\\n        require(place != Places.ORC_GODS,  \\\"You can\\u0027t pillage the Orc God\\\");\\n\\n        if(activities[id].timestamp \\u003c block.timestamp) _claim(id); // Need to claim to not have equipment reatroactively multiplying\\n\\n        uint256 rand_ = _rand();\\n  \\n        LootPool memory pool = lootPools[place];\\n        require(orcs[id].level \\u003e= uint16(pool.minLevel), \\\"below minimum level\\\");\\n\\n        if (pool.cost \\u003e 0) {\\n            require(block.timestamp - startingTime \\u003e 14 days);\\n            zug.burn(msg.sender, uint256(pool.cost) * 1 ether);\\n        } \\n\\n        uint8 item;\\n        if (tryHelm) {\\n            ( pool, item ) = _getItemFromPool(pool, _randomize(rand_,\\\"HELM\\\", id));\\n            if (item != 0 ) orcs[id].helm = item;\\n        }\\n        if (tryMainhand) {\\n            ( pool, item ) = _getItemFromPool(pool, _randomize(rand_,\\\"MAINHAND\\\", id));\\n            if (item != 0 ) orcs[id].mainhand = item;\\n        }\\n        if (tryOffhand) {\\n            ( pool, item ) = _getItemFromPool(pool, _randomize(rand_,\\\"OFFHAND\\\", id));\\n            if (item != 0 ) orcs[id].offhand = item;\\n        }\\n\\n        if (uint(place) \\u003e 1) lootPools[place] = pool;\\n\\n        // Update zug modifier\\n        Orc memory orc = orcs[id];\\n        uint16 zugModifier_ = _tier(orc.helm) + _tier(orc.mainhand) + _tier(orc.offhand);\\n\\n        orcs[id].zugModifier = zugModifier_;\\n\\n        activities[id].timestamp = uint88(block.timestamp + cooldown);\\n    } \\n\\n    function update(uint256 id) public ownerOfOrc(id) noCheaters {\\n        require(_tier(orcs[id].mainhand) \\u003c 10);\\n        require(block.timestamp - startingTime \\u003e= 14 days);\\n        \\n        LootPool memory pool = lootPools[Places.ORC_GODS];\\n        require(orcs[id].level \\u003e= pool.minLevel);\\n\\n        zug.burn(msg.sender, uint256(pool.cost) * 1 ether);\\n\\n        _claim(id); // Need to claim to not have equipment reatroactively multiplying\\n\\n        uint8 item = uint8(lootPools[Places.ORC_GODS].total--);\\n        orcs[id].zugModifier = 30;\\n        orcs[id].body = orcs[id].helm = orcs[id].mainhand = orcs[id].offhand = item + 40;\\n    }\\n\\n    /*///////////////////////////////////////////////////////////////\\n                    VIEWERS\\n    //////////////////////////////////////////////////////////////*/\\n\\n    function claimable(uint256 id) external view returns (uint256 amount) {\\n        uint256 timeDiff = block.timestamp \\u003e activities[id].timestamp ? uint256(block.timestamp - activities[id].timestamp) : 0;\\n        amount = activities[id].action == Actions.FARMING ? claimableZug(timeDiff, orcs[id].zugModifier) : timeDiff * 3000 / 1 days;\\n    }\\n\\n    function name() external pure returns (string memory) {\\n        return \\\"Ether Orcs Genesis\\\";\\n    }\\n\\n    function symbol() external pure returns (string memory) {\\n        return \\\"Orcs\\\";\\n    }\\n\\n\\n    /*///////////////////////////////////////////////////////////////\\n                    MINT FUNCTION\\n    //////////////////////////////////////////////////////////////*/\\n\\n    function _mintOrc(uint256 rand) internal returns (uint16 id) {\\n        (uint8 body,uint8 helm,uint8 mainhand,uint8 offhand) = (0,0,0,0);\\n\\n        {\\n            // Helpers to get Percentages\\n            uint256 sevenOnePct   = type(uint16).max / 100 * 71;\\n            uint256 eightyPct     = type(uint16).max / 100 * 80;\\n            uint256 nineFivePct   = type(uint16).max / 100 * 95;\\n            uint256 nineNinePct   = type(uint16).max / 100 * 99;\\n    \\n            id = uint16(totalSupply + 1);\\n    \\n            // Getting Random traits\\n            uint16 randBody = uint16(_randomize(rand, \\\"BODY\\\", id));\\n                   body     = uint8(randBody \\u003e nineNinePct ? randBody % 3 + 25 : \\n                              randBody \\u003e sevenOnePct  ? randBody % 12 + 13 : randBody % 13 + 1 );\\n    \\n            uint16 randHelm = uint16(_randomize(rand, \\\"HELM\\\", id));\\n                   helm     = uint8(randHelm \\u003c eightyPct ? 0 : randHelm % 4 + 5);\\n    \\n            uint16 randOffhand = uint16(_randomize(rand, \\\"OFFHAND\\\", id));\\n                   offhand     = uint8(randOffhand \\u003c eightyPct ? 0 : randOffhand % 4 + 5);\\n    \\n            uint16 randMainhand = uint16(_randomize(rand, \\\"MAINHAND\\\", id));\\n                   mainhand     = uint8(randMainhand \\u003c nineFivePct ? randMainhand % 4 + 1: randMainhand % 4 + 5);\\n        }\\n\\n        _mint(msg.sender, id);\\n\\n        uint16 zugModifier = _tier(helm) + _tier(mainhand) + _tier(offhand);\\n        orcs[uint256(id)] = Orc({body: body, helm: helm, mainhand: mainhand, offhand: offhand, level: 0, lvlProgress: 0, zugModifier:zugModifier});\\n    }\\n\\n    /*///////////////////////////////////////////////////////////////\\n                    INTERNAL  HELPERS\\n    //////////////////////////////////////////////////////////////*/\\n\\n    /// @dev take an available item from a pool\\n    function _getItemFromPool(LootPool memory pool, uint256 rand) internal pure returns (LootPool memory, uint8 item) {\\n        uint draw = rand % pool.total--; \\n\\n        if (draw \\u003e pool.tier_1 + pool.tier_2 + pool.tier_3 \\u0026\\u0026 pool.tier_4-- \\u003e 0) {\\n            item = uint8((draw % 4 + 1) + (pool.minLootTier + 3) * 4);     \\n            return (pool, item);\\n        }\\n\\n        if (draw \\u003e pool.tier_1 + pool.tier_2 \\u0026\\u0026 pool.tier_3-- \\u003e 0) {\\n            item = uint8((draw % 4 + 1) + (pool.minLootTier + 2) * 4);\\n            return (pool, item);\\n        }\\n\\n        if (draw \\u003e pool.tier_1 \\u0026\\u0026 pool.tier_2-- \\u003e 0) {\\n            item = uint8((draw % 4 + 1) + (pool.minLootTier + 1) * 4);\\n            return (pool, item);\\n        }\\n\\n        if (pool.tier_1-- \\u003e 0) {\\n            item = uint8((draw % 4 + 1) + pool.minLootTier * 4);\\n            return (pool, item);\\n        }\\n    }\\n\\n    function claimableZug(uint256 timeDiff, uint16 zugModifier) internal pure returns (uint256 zugAmount) {\\n        zugAmount = timeDiff * (4 + zugModifier) * 1 ether / 1 days;\\n    }\\n\\n    /// @dev Convert an id to its tier\\n    function _tier(uint16 id) internal pure returns (uint16) {\\n        if (id == 0) return 0;\\n        return ((id - 1) / 4 );\\n    }\\n\\n    /// @dev Create a bit more of randomness\\n    function _randomize(uint256 rand, string memory val, uint256 spicy) internal pure returns (uint256) {\\n        return uint256(keccak256(abi.encode(rand, val, spicy)));\\n    }\\n\\n    function _rand() internal view returns (uint256) {\\n        return uint256(keccak256(abi.encodePacked(msg.sender, block.timestamp, block.basefee, block.timestamp, entropySauce)));\\n    }\\n\\n    function _getMintingPrice() internal view returns (uint256) {\\n        uint256 supply = minted + oldSupply;\\n        if (supply \\u003c 1550) return   0;\\n        if (supply \\u003c 2050) return   4 ether;\\n        if (supply \\u003c 2550) return   8 ether;\\n        if (supply \\u003c 3050) return  12 ether;\\n        if (supply \\u003c 3550) return  24 ether;\\n        if (supply \\u003c 4050) return  40 ether;\\n        if (supply \\u003c 4550) return  60 ether;\\n        if (supply \\u003c 5050) return 130 ether;\\n    }\\n}\\n\\n/**\\n * @dev This abstract contract provides a fallback function that delegates all calls to another contract using the EVM\\n * instruction `delegatecall`. We refer to the second contract as the _implementation_ behind the proxy, and it has to\\n * be specified by overriding the virtual {_implementation} function.\\n *\\n * Additionally, delegation to the implementation can be triggered manually through the {_fallback} function, or to a\\n * different contract through the {_delegate} function.\\n *\\n * The success and return data of the delegated call will be returned back to the caller of the proxy.\\n */\\ncontract EtherOrcsGenesis {\\n\\n    address implementation_;\\n    address public admin;\\n\\n    constructor(address impl) {\\n        implementation_ = impl;\\n        admin = msg.sender;\\n    }\\n\\n    function setImplementation(address newImpl) public {\\n        require(msg.sender == admin);\\n        implementation_ = newImpl;\\n    }\\n    \\n    function implementation() public view returns (address impl) {\\n        impl = implementation_;\\n    }\\n\\n    /**\\n     * @dev Delegates the current call to `implementation`.\\n     *\\n     * This function does not return to its internall call site, it will return directly to the external caller.\\n     */\\n    function _delegate(address implementation) internal virtual {\\n        assembly {\\n            // Copy msg.data. We take full control of memory in this inline assembly\\n            // block because it will not return to Solidity code. We overwrite the\\n            // Solidity scratch pad at memory position 0.\\n            calldatacopy(0, 0, calldatasize())\\n\\n            // Call the implementation.\\n            // out and outsize are 0 because we don\\u0027t know the size yet.\\n            let result := delegatecall(gas(), implementation, 0, calldatasize(), 0, 0)\\n\\n            // Copy the returned data.\\n            returndatacopy(0, 0, returndatasize())\\n\\n            switch result\\n            // delegatecall returns 0 on error.\\n            case 0 {\\n                revert(0, returndatasize())\\n            }\\n            default {\\n                return(0, returndatasize())\\n            }\\n        }\\n    }\\n\\n    /**\\n     * @dev This is a virtual function that should be overriden so it returns the address to which the fallback function\\n     * and {_fallback} should delegate.\\n     */\\n    function _implementation() internal view returns (address) {\\n        return implementation_;\\n    }\\n\\n\\n    /**\\n     * @dev Fallback function that delegates calls to the address returned by `_implementation()`. Will run if no other\\n     * function in the contract matches the call data.\\n     */\\n    fallback() external payable virtual {\\n        _delegate(_implementation());\\n    }\\n\\n}\\n\"},\"OrcsMigrator.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity 0.8.7;\\n\\n\\nimport { EtherOrcs } from \\\"./EtherOrcs.sol\\\";\\nimport { ERC20 } from \\\"./ERC20.sol\\\";\\n\\ncontract Migrator {\\n\\n    address implementation_;\\n    address public admin;\\n    EtherOrcs public  oldOrcs;\\n    EtherOrcs public  newOrcs;\\n    ERC20     public  zug;\\n\\n    address  public burningAddress;\\n    uint256  public startingTime;\\n\\n    mapping(uint256 =\\u003e bool) public migrated;\\n\\n    function initialize(address oldOrcs_,address newOrcs_, address zug_, address burningAddress_) public {\\n        require(msg.sender == admin);\\n        oldOrcs        = EtherOrcs(oldOrcs_);\\n        newOrcs        = EtherOrcs(newOrcs_);\\n        zug            = ERC20(zug_);\\n        burningAddress = burningAddress_;\\n\\n        startingTime = block.timestamp;\\n    }\\n    \\n    function implementation() public view returns (address impl) {\\n        impl = implementation_;\\n    }\\n\\n    function migrateMany(uint256[] calldata ids) external {\\n        for (uint256 index = 0; index \\u003c ids.length; index++) {\\n            justMigrate(ids[index]);\\n        }\\n    }\\n\\n    function migrateManyAndFarm(uint256[] calldata ids) external {\\n        for (uint256 index = 0; index \\u003c ids.length; index++) {\\n            migrateAndFarm(ids[index]);\\n        }\\n    }\\n\\n    function migrateManyAndTrain(uint256[] calldata ids) external {\\n        for (uint256 index = 0; index \\u003c ids.length; index++) {\\n            migrateAndTrain(ids[index]);\\n        }\\n    }\\n\\n    function migrateAndFarm(uint256 tokenId) public {\\n        _migrate(tokenId);\\n        //give retroactive time\\n        newOrcs.migrationAction(tokenId, msg.sender, EtherOrcs.Actions.FARMING);\\n    }\\n\\n    function migrateAndTrain(uint256 tokenId) public {\\n        _migrate(tokenId);\\n        //give retroactive time\\n        newOrcs.migrationAction(tokenId, msg.sender, EtherOrcs.Actions.TRAINING);\\n    }\\n\\n    function justMigrate(uint256 tokenId) public {\\n        _migrate(tokenId);\\n    }\\n\\n    function _migrate(uint256 tokenId) internal {\\n        require(!migrated[tokenId], \\\"already migrated\\\");\\n\\n        //Check what the orc is doing\\n        (address owner, uint88 timestamp, EtherOrcs.Actions action_) = oldOrcs.activities(tokenId);\\n        require(msg.sender == oldOrcs.ownerOf(tokenId) || (action_ == EtherOrcs.Actions.FARMING \\u0026\\u0026 owner == msg.sender), \\\"not allowed\\\");\\n\\n\\n        (uint8 body, uint8 helm, uint8 mainhand, uint8 offhand, uint16 level ,uint16 zugModifier , uint32 lvlProgress) = oldOrcs.orcs(tokenId);\\n        \\n\\n        uint zugAmount;\\n        if (action_ == EtherOrcs.Actions.FARMING) {\\n            // We cant\\u0027t transfer here, but it\\u0027s safe there\\n            zugAmount = claimableZug(block.timestamp - timestamp, zugModifier);\\n        } else {\\n            // Transfer From to here\\n            oldOrcs.transferFrom(msg.sender, address(burningAddress), tokenId);\\n        }\\n        \\n        (helm, mainhand, offhand) = getEquipment(helm,mainhand,offhand);\\n        // Mint an excatly the the same orcs\\n        newOrcs.craft(msg.sender, tokenId,body,helm,mainhand,offhand,level,lvlProgress);\\n\\n        migrated[tokenId] = true;\\n\\n        if (block.timestamp - 25 hours \\u003c startingTime) zug.mint(owner,1 ether + zugAmount);\\n    } \\n    \\n    function getEquipment(uint8 helm_, uint8 mainhand_, uint8 offhand_) internal returns (uint8 helm, uint8 mainhand, uint8 offhand) {\\n        uint maxTier = 6;\\n        helm     = _tier(helm)     \\u003e maxTier ? helm - 4     : helm;\\n        mainhand = _tier(mainhand) \\u003e maxTier ? mainhand - 4 : mainhand;\\n        offhand  = _tier(offhand)  \\u003e maxTier ? offhand - 4  : offhand;\\n    }\\n\\n    function claimableZug(uint256 timeDiff, uint16 zugModifier) internal pure returns (uint256 zugAmount) {\\n        zugAmount = timeDiff * (4 + zugModifier) * 1 ether / 1 days;\\n    }\\n\\n    function _tier(uint16 id) internal pure returns (uint16) {\\n        if (id == 0) return 0;\\n        return ((id - 1) / 4 );\\n    }\\n    \\n\\n}\\n/**\\n * @dev This abstract contract provides a fallback function that delegates all calls to another contract using the EVM\\n * instruction `delegatecall`. We refer to the second contract as the _implementation_ behind the proxy, and it has to\\n * be specified by overriding the virtual {_implementation} function.\\n *\\n * Additionally, delegation to the implementation can be triggered manually through the {_fallback} function, or to a\\n * different contract through the {_delegate} function.\\n *\\n * The success and return data of the delegated call will be returned back to the caller of the proxy.\\n */\\ncontract OrcsMigrator {\\n\\n    uint256 constant sal = 22;\\n    address implementation_;\\n    address public admin;\\n\\n    constructor(address impl) {\\n        implementation_ = impl;\\n        admin = msg.sender;\\n    }\\n\\n    function setImplementation(address newImpl) public {\\n        require(msg.sender == admin);\\n        if (sal == 22) {\\n            implementation_ = newImpl;\\n        }\\n        implementation_ = newImpl;\\n    }\\n    \\n    function implementation() public view returns (address impl) {\\n        impl = implementation_;\\n    }\\n\\n    /**\\n     * @dev Delegates the current call to `implementation`.\\n     *\\n     * This function does not return to its internall call site, it will return directly to the external caller.\\n     */\\n    function _delegate(address implementation) internal virtual {\\n        assembly {\\n            // Copy msg.data. We take full control of memory in this inline assembly\\n            // block because it will not return to Solidity code. We overwrite the\\n            // Solidity scratch pad at memory position 0.\\n            calldatacopy(0, 0, calldatasize())\\n\\n            // Call the implementation.\\n            // out and outsize are 0 because we don\\u0027t know the size yet.\\n            let result := delegatecall(gas(), implementation, 0, calldatasize(), 0, 0)\\n\\n            // Copy the returned data.\\n            returndatacopy(0, 0, returndatasize())\\n\\n            switch result\\n            // delegatecall returns 0 on error.\\n            case 0 {\\n                revert(0, returndatasize())\\n            }\\n            default {\\n                return(0, returndatasize())\\n            }\\n        }\\n    }\\n\\n    /**\\n     * @dev This is a virtual function that should be overriden so it returns the address to which the fallback function\\n     * and {_fallback} should delegate.\\n     */\\n    function _implementation() internal view returns (address) {\\n        return implementation_;\\n    }\\n\\n\\n    /**\\n     * @dev Fallback function that delegates calls to the address returned by `_implementation()`. Will run if no other\\n     * function in the contract matches the call data.\\n     */\\n    fallback() external payable virtual {\\n        _delegate(_implementation());\\n    }\\n\\n}\\n\"}}","ABI":"[{\"inputs\":[{\"internalType\":\"address\",\"name\":\"impl\",\"type\":\"address\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"stateMutability\":\"payable\",\"type\":\"fallback\"},{\"inputs\":[],\"name\":\"admin\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"implementation\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"impl\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newImpl\",\"type\":\"address\"}],\"name\":\"setImplementation\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}]","ContractName":"OrcsMigrator","CompilerVersion":"v0.8.7+commit.e28d00a7","OptimizationUsed":"0","Runs":"200","ConstructorArguments":"000000000000000000000000e8a4b659d21886c11377c1f0cbc66306eed4d8ab","EVMVersion":"Default","Library":"","LicenseType":"MIT","Proxy":"1","Implementation":"0x55fbba04b41968fbc195270a8d41d0f5bb2f2c6f","SwarmSource":"ipfs://f1628940f67c64d18d9ed1abad58c29fd803661d18c4535e501b471191405d38"}]}