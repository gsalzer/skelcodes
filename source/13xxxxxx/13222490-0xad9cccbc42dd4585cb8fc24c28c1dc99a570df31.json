{"status":"1","message":"OK","result":[{"SourceCode":"pragma solidity ^0.8.0;\r\n\r\n\r\n/*\r\n * @dev Provides information about the current execution context, including the\r\n * sender of the transaction and its data. While these are generally available\r\n * via msg.sender and msg.data, they should not be accessed in such a direct\r\n * manner, since when dealing with meta-transactions the account sending and\r\n * paying for execution may not be the actual sender (as far as an application\r\n * is concerned).\r\n *\r\n * This contract is only required for intermediate, library-like contracts.\r\n */\r\nabstract contract Context {\r\n    function _msgSender() internal view virtual returns (address) {\r\n        return msg.sender;\r\n    }\r\n\r\n    function _msgData() internal view virtual returns (bytes calldata) {\r\n        return msg.data;\r\n    }\r\n}\r\n\r\n\r\n/**\r\n * @dev Contract module which provides a basic access control mechanism, where\r\n * there is an account (an owner) that can be granted exclusive access to\r\n * specific functions.\r\n *\r\n * By default, the owner account will be the one that deploys the contract. This\r\n * can later be changed with {transferOwnership}.\r\n *\r\n * This module is used through inheritance. It will make available the modifier\r\n * `onlyOwner`, which can be applied to your functions to restrict their use to\r\n * the owner.\r\n */\r\nabstract contract Ownable is Context {\r\n    address private _owner;\r\n\r\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\r\n\r\n    /**\r\n     * @dev Initializes the contract setting the deployer as the initial owner.\r\n     */\r\n    constructor() {\r\n        _setOwner(_msgSender());\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the address of the current owner.\r\n     */\r\n    function owner() public view virtual returns (address) {\r\n        return _owner;\r\n    }\r\n\r\n    /**\r\n     * @dev Throws if called by any account other than the owner.\r\n     */\r\n    modifier onlyOwner() {\r\n        require(owner() == _msgSender(), \"Ownable: caller is not the owner\");\r\n        _;\r\n    }\r\n\r\n    /**\r\n     * @dev Leaves the contract without owner. It will not be possible to call\r\n     * `onlyOwner` functions anymore. Can only be called by the current owner.\r\n     *\r\n     * NOTE: Renouncing ownership will leave the contract without an owner,\r\n     * thereby removing any functionality that is only available to the owner.\r\n     */\r\n    function renounceOwnership() public virtual onlyOwner {\r\n        _setOwner(address(0));\r\n    }\r\n\r\n    /**\r\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\r\n     * Can only be called by the current owner.\r\n     */\r\n    function transferOwnership(address newOwner) public virtual onlyOwner {\r\n        require(newOwner != address(0), \"Ownable: new owner is the zero address\");\r\n        _setOwner(newOwner);\r\n    }\r\n\r\n    function _setOwner(address newOwner) private {\r\n        address oldOwner = _owner;\r\n        _owner = newOwner;\r\n        emit OwnershipTransferred(oldOwner, newOwner);\r\n    }\r\n}\r\n\r\n\r\nlibrary BytesUtil {\r\n\r\n    function compare(bytes memory a, bytes memory b) public pure returns (int){\r\n        if (a.length <= b.length) {\r\n            uint _formerLen = b.length - a.length;\r\n            for (uint i = 0; i < b.length; i++) {\r\n                if (i < _formerLen) {\r\n                    if (bytes1(b[i]) & 0xFF != 0) {\r\n                        return - 1;\r\n                    }\r\n                } else {\r\n                    if (bytes1(b[i]) > bytes1(a[i - _formerLen])) {\r\n                        return - 1;\r\n                    } else if (bytes1(b[i]) < bytes1(a[i - _formerLen])) {\r\n                        return 1;\r\n                    }\r\n                }\r\n            }\r\n            return 0;\r\n        } else {\r\n            uint _formerLen = a.length - b.length;\r\n            for (uint i = 0; i < a.length; i++) {\r\n                if (i < _formerLen) {\r\n                    if (bytes1(a[i]) & 0xFF != 0) {\r\n                        return 1;\r\n                    }\r\n                } else {\r\n                    if (bytes1(a[i]) > bytes1(b[i - _formerLen])) {\r\n                        return 1;\r\n                    } else if (bytes1(a[i]) < bytes1(b[i - _formerLen])) {\r\n                        return - 1;\r\n                    }\r\n                }\r\n            }\r\n        }\r\n        return 0;\r\n    }\r\n\r\n    function equal(bytes memory a, bytes memory b) public pure returns (bool){\r\n        return compare(a, b) == 0;\r\n    }\r\n\r\n    function equal(bytes8 a, bytes8 b) public pure returns (bool){\r\n        return compare(a, b) == 0;\r\n    }\r\n\r\n    function compare(bytes8 a, bytes8 b) public pure returns (int){\r\n\r\n        for (uint i = 0; i < b.length; i++) {\r\n\r\n            if (bytes1(b[i]) > bytes1(a[i])) {\r\n                return - 1;\r\n            } else if (bytes1(b[i]) < bytes1(a[i])) {\r\n                return 1;\r\n            }\r\n\r\n        }\r\n        return 0;\r\n    }\r\n}\r\n\r\n\r\nlibrary LibString{\r\n\r\n    using BytesUtil for bytes;\r\n    using BytesUtil for bytes8;\r\n\r\n    function charBytes8ToBytes(uint64 _bytes8) public pure returns(bytes memory){\r\n        return charBytes8ToBytes(bytes8(_bytes8));\r\n\r\n    }\r\n\r\n    function charBytes8ToBytes(bytes8 _bytes8) public pure returns(bytes memory){\r\n        uint8 len = uint8(_bytes8[7]);\r\n\r\n        bytes memory data = new bytes(len);\r\n        for(uint i=0;i<len; i++){\r\n            data[i] = _bytes8[i];\r\n        }\r\n        return data;\r\n\r\n    }\r\n\r\n\r\n    function lenOfChars(string memory src) internal pure returns(uint){\r\n        uint i=0;\r\n        uint length = 0;\r\n        bytes memory string_rep = bytes(src);\r\n        //UTF-8 skip word\r\n        while (i<string_rep.length)\r\n        {\r\n            i += utf8CharBytesLength(string_rep, i);\r\n            length++;\r\n        }\r\n        return length;\r\n    }\r\n\r\n    function lenOfBytes(string memory src) internal pure returns(uint){\r\n        bytes memory srcb = bytes(src);\r\n        return srcb.length;\r\n    }\r\n\r\n\r\n    function startWith(string memory src, string memory prefix) internal pure returns(bool){\r\n        bytes memory src_rep = bytes(src);\r\n        bytes memory prefix_rep = bytes(prefix);\r\n\r\n        if(src_rep.length < prefix_rep.length){\r\n            return false;\r\n        }\r\n\r\n        uint needleLen = prefix_rep.length;\r\n        for(uint i=0;i<needleLen;i++){\r\n            if(src_rep[i] != prefix_rep[i]) return false;\r\n        }\r\n\r\n        return true;\r\n    }\r\n\r\n    function endWith(string memory src, string memory tail) internal pure returns(bool){\r\n        bytes memory src_rep = bytes(src);\r\n        bytes memory tail_rep = bytes(tail);\r\n\r\n        if(src_rep.length < tail_rep.length){\r\n            return false;\r\n        }\r\n        uint srcLen = src_rep.length;\r\n        uint needleLen = tail_rep.length;\r\n        for(uint i=0;i<needleLen;i++){\r\n            if(src_rep[srcLen-needleLen+i] != tail_rep[i]) return false;\r\n        }\r\n\r\n        return true;\r\n    }\r\n\r\n\r\n    function equal(string memory self, string memory other) internal pure returns(bool){\r\n        bytes memory self_rep = bytes(self);\r\n        bytes memory other_rep = bytes(other);\r\n\r\n        if(self_rep.length != other_rep.length){\r\n            return false;\r\n        }\r\n        uint selfLen = self_rep.length;\r\n        for(uint i=0;i<selfLen;i++){\r\n            if(self_rep[i] != other_rep[i]) return false;\r\n        }\r\n        return true;\r\n    }\r\n\r\n    function equalNocase(string memory self, string memory other) internal pure returns(bool){\r\n        return compareNocase(self, other) == 0;\r\n    }\r\n\r\n    function empty(string memory src) internal pure returns(bool){\r\n        bytes memory src_rep = bytes(src);\r\n        if(src_rep.length == 0) return true;\r\n\r\n        for(uint i=0;i<src_rep.length;i++){\r\n            bytes1 b = src_rep[i];\r\n            if(b != 0x20 && b != bytes1(0x09) && b!=bytes1(0x0A) && b!=bytes1(0x0D)) return false;\r\n        }\r\n\r\n        return true;\r\n    }\r\n\r\n    function concat(string memory self, string memory str) internal pure returns (string memory  _ret)  {\r\n        _ret = new string(bytes(self).length + bytes(str).length);\r\n\r\n        uint selfptr;\r\n        uint strptr;\r\n        uint retptr;\r\n        assembly {\r\n            selfptr := add(self, 0x20)\r\n            strptr := add(str, 0x20)\r\n            retptr := add(_ret, 0x20)\r\n        }\r\n\r\n        memcpy(retptr, selfptr, bytes(self).length);\r\n        memcpy(retptr+bytes(self).length, strptr, bytes(str).length);\r\n    }\r\n\r\n    //start is char index, not byte index\r\n    function substrByCharIndex(string memory self, uint start, uint len) internal pure returns (string memory) {\r\n        if(len == 0) return \"\";\r\n        //start - bytePos\r\n        //len - byteLen\r\n        uint bytePos = 0;\r\n        uint byteLen = 0;\r\n        uint i=0;\r\n        uint chars=0;\r\n        bytes memory self_rep = bytes(self);\r\n        bool startMet = false;\r\n        //UTF-8 skip word\r\n        while (i<self_rep.length)\r\n        {\r\n            if(chars == start){\r\n                bytePos = i;\r\n                startMet = true;\r\n            }\r\n            if(chars == (start + len)){\r\n                byteLen = i - bytePos;\r\n            }\r\n            i += utf8CharBytesLength(self_rep, i);\r\n            chars++;\r\n        }\r\n        if(chars == (start + len)){\r\n            byteLen = i - bytePos;\r\n        }\r\n        require(startMet, \"start index out of range\");\r\n        require(byteLen != 0, \"len out of range\");\r\n\r\n        string memory ret = new string(byteLen);\r\n\r\n        uint selfptr;\r\n        uint retptr;\r\n        assembly {\r\n            selfptr := add(self, 0x20)\r\n            retptr := add(ret, 0x20)\r\n        }\r\n\r\n        memcpy(retptr, selfptr+bytePos, byteLen);\r\n        return ret;\r\n    }\r\n\r\n    function compare(string memory self, string memory other) internal pure returns(int8){\r\n        bytes memory selfb = bytes(self);\r\n        bytes memory otherb = bytes(other);\r\n        //byte by byte\r\n        for(uint i=0;i<selfb.length && i<otherb.length;i++){\r\n            bytes1 b1 = selfb[i];\r\n            bytes1 b2 = otherb[i];\r\n            if(b1 > b2) return 1;\r\n            if(b1 < b2) return -1;\r\n        }\r\n        //and length\r\n        if(selfb.length > otherb.length) return 1;\r\n        if(selfb.length < otherb.length) return -1;\r\n        return 0;\r\n    }\r\n\r\n    function compareNocase(string memory self, string memory other) internal pure returns(int8){\r\n        bytes memory selfb = bytes(self);\r\n        bytes memory otherb = bytes(other);\r\n        for(uint i=0;i<selfb.length && i<otherb.length;i++){\r\n            bytes1 b1 = selfb[i];\r\n            bytes1 b2 = otherb[i];\r\n            bytes1 ch1 = b1 | 0x20;\r\n            bytes1 ch2 = b2 | 0x20;\r\n            if(ch1 >= 'a' && ch1 <= 'z' && ch2 >= 'a' && ch2 <= 'z'){\r\n                if(ch1 > ch2) return 1;\r\n                if(ch1 < ch2) return -1;\r\n            }\r\n            else{\r\n                if(b1 > b2) return 1;\r\n                if(b1 < b2) return -1;\r\n            }\r\n        }\r\n\r\n        if(selfb.length > otherb.length) return 1;\r\n        if(selfb.length < otherb.length) return -1;\r\n        return 0;\r\n    }\r\n\r\n    function toUppercase(string memory src) internal pure returns(string memory){\r\n        bytes memory srcb = bytes(src);\r\n        for(uint i=0;i<srcb.length;i++){\r\n            bytes1 b = srcb[i];\r\n            if(b >= 'a' && b <= 'z'){\r\n                b &= bytes1(0xDF);// -32\r\n                srcb[i] = b ;\r\n            }\r\n        }\r\n        return src;\r\n    }\r\n\r\n    function toLowercase(string memory src) internal pure returns(string memory){\r\n        bytes memory srcb = bytes(src);\r\n        for(uint i=0;i<srcb.length;i++){\r\n            bytes1 b = srcb[i];\r\n            if(b >= 'A' && b <= 'Z'){\r\n                b |= 0x20;\r\n                srcb[i] = b;\r\n            }\r\n        }\r\n        return src;\r\n    }\r\n\r\n    /**\r\n     * Index Of\r\n     *\r\n     * Locates and returns the position of a character within a string\r\n     *\r\n     * @param src When being used for a data type this is the extended object\r\n     *              otherwise this is the string acting as the haystack to be\r\n     *              searched\r\n     * @param value The needle to search for, at present this is currently\r\n     *               limited to one character\r\n     * @return int The position of the needle starting from 0 and returning -1\r\n     *             in the case of no matches found\r\n     */\r\n    function indexOf(string memory src, string memory value)\r\n    internal\r\n    pure\r\n    returns (int) {\r\n        return indexOf(src, value, 0);\r\n    }\r\n\r\n    /**\r\n     * Index Of\r\n     *\r\n     * Locates and returns the position of a character within a string starting\r\n     * from a defined offset\r\n     *\r\n     * @param src When being used for a data type this is the extended object\r\n     *              otherwise this is the string acting as the haystack to be\r\n     *              searched\r\n     * @param value The needle to search for, at present this is currently\r\n     *               limited to one character\r\n     * @param offset The starting point to start searching from which can start\r\n     *                from 0, but must not exceed the length of the string\r\n     * @return int The position of the needle starting from 0 and returning -1\r\n     *             in the case of no matches found\r\n     */\r\n    function indexOf(string  memory src, string memory value, uint offset)\r\n    internal\r\n    pure\r\n    returns (int) {\r\n        bytes memory srcBytes = bytes(src);\r\n        bytes memory valueBytes = bytes(value);\r\n\r\n        assert(valueBytes.length == 1);\r\n\r\n        for (uint i = offset; i < srcBytes.length; i++) {\r\n            if (srcBytes[i] == valueBytes[0]) {\r\n                return int(i);\r\n            }\r\n        }\r\n\r\n        return -1;\r\n    }\r\n\r\n    function split(string memory src, string memory separator)\r\n    internal\r\n    pure\r\n    returns (string[] memory splitArr) {\r\n        bytes memory srcBytes = bytes(src);\r\n\r\n        uint offset = 0;\r\n        uint splitsCount = 1;\r\n        int limit = -1;\r\n        while (offset < srcBytes.length - 1) {\r\n            limit = indexOf(src, separator, offset);\r\n            if (limit == -1)\r\n                break;\r\n            else {\r\n                splitsCount++;\r\n                offset = uint(limit) + 1;\r\n            }\r\n        }\r\n\r\n        splitArr = new string[](splitsCount);\r\n\r\n        offset = 0;\r\n        splitsCount = 0;\r\n        while (offset < srcBytes.length - 1) {\r\n\r\n            limit = indexOf(src, separator, offset);\r\n            if (limit == - 1) {\r\n                limit = int(srcBytes.length);\r\n            }\r\n\r\n            string memory tmp = new string(uint(limit) - offset);\r\n            bytes memory tmpBytes = bytes(tmp);\r\n\r\n            uint j = 0;\r\n            for (uint i = offset; i < uint(limit); i++) {\r\n                tmpBytes[j++] = srcBytes[i];\r\n            }\r\n            offset = uint(limit) + 1;\r\n            splitArr[splitsCount++] = string(tmpBytes);\r\n        }\r\n        return splitArr;\r\n    }\r\n\r\n    //------------HELPER FUNCTIONS----------------\r\n\r\n    function utf8CharBytesLength(bytes memory stringRep, uint ptr) internal pure returns(uint8){\r\n\r\n        if ((stringRep[ptr]>>7)==bytes1(0))\r\n            return 1;\r\n        if ((stringRep[ptr]>>5)==bytes1(0x06))\r\n            return 2;\r\n        if ((stringRep[ptr]>>4)==bytes1(0x0e))\r\n            return 3;\r\n        if ((stringRep[ptr]>>3)==bytes1(0x1e))\r\n            return 4;\r\n        return 1;\r\n    }\r\n\r\n    function memcpy(uint dest, uint src, uint len) pure private {\r\n        // Copy word-length chunks while possible\r\n        for(; len >= 32; len -= 32) {\r\n            assembly {\r\n                mstore(dest, mload(src))\r\n            }\r\n            dest += 32;\r\n            src += 32;\r\n        }\r\n\r\n        // Copy remaining bytes\r\n        uint mask = 256 ** (32 - len) - 1;\r\n        assembly {\r\n            let srcpart := and(mload(src), not(mask))\r\n            let destpart := and(mload(dest), mask)\r\n            mstore(dest, or(destpart, srcpart))\r\n        }\r\n    }\r\n\r\n}\r\n\r\n\r\ncontract KeyNouns is Ownable{\r\n\r\n    using LibString for string;\r\n\r\n    string[] private RESERVEDWORDS;\r\n    string[] private RESERVEDKEYS;\r\n    string[] private ILLEGALKEYS;\r\n\r\n    uint public nounsLen;\r\n\r\n    mapping(string => bool) private KEYWORDSTATE;\r\n    mapping(string => bool) private KEYSTATE;\r\n    mapping(string => bool) private ILLEGALSTATE;\r\n\r\n    constructor() Ownable() {\r\n        nounsLen = 32;\r\n        ILLEGALSTATE[\" \"] = true;\r\n        ILLEGALKEYS.push(\" \");\r\n    }\r\n\r\n    function addKeyWord(string memory word) external onlyOwner{\r\n        string memory _lower = word.toLowercase();\r\n        require(!KEYWORDSTATE[_lower], \"keyword duplicated\");\r\n        RESERVEDWORDS.push(_lower);\r\n        KEYWORDSTATE[_lower] = true;\r\n    }\r\n\r\n    function addIllegalKey(string memory illegal) external onlyOwner{\r\n        string memory _lower = illegal.toLowercase();\r\n        require(illegal.lenOfChars() == 1, \"illegal key too long\");\r\n        require(!ILLEGALSTATE[_lower], \"illegal key duplicated\");\r\n        ILLEGALKEYS.push(_lower);\r\n        ILLEGALSTATE[_lower] = true;\r\n    }\r\n\r\n    function addKey(string memory key) external onlyOwner{\r\n        string memory _lower = key.toLowercase();\r\n        require(!KEYSTATE[_lower], \"key character duplicated\");\r\n        RESERVEDKEYS.push(_lower);\r\n        KEYSTATE[_lower] = true;\r\n    }\r\n\r\n    function setNounLen(uint len) external onlyOwner{\r\n        require(len > 0, \"nouns length too short\");\r\n        nounsLen = len;\r\n    }\r\n    function keyWordIn(string memory word) public view returns (bool){\r\n        string memory _lower = word.toLowercase();\r\n        return KEYWORDSTATE[_lower];\r\n    }\r\n\r\n    function keyIn(string memory key) public view returns (bool){\r\n        string memory _lower = key.toLowercase();\r\n        return KEYSTATE[_lower];\r\n    }\r\n\r\n    function IllegalkeyIn(string memory key) public view returns (bool){\r\n        string memory _lower = key.toLowercase();\r\n        return ILLEGALSTATE[_lower];\r\n    }\r\n\r\n    function getWords() public view returns ( string[] memory){\r\n        return RESERVEDWORDS;\r\n    }\r\n\r\n    function getKeys() public view returns ( string[] memory){\r\n        return RESERVEDKEYS;\r\n    }\r\n\r\n    function contain(string memory key) public view returns (bool){\r\n        for(uint i = 0; i < RESERVEDKEYS.length; i++){\r\n            if(key.compareNocase(RESERVEDKEYS[i]) == 0){\r\n                return true;\r\n            }\r\n        }\r\n        return false;\r\n    }\r\n\r\n    function isLegal(string memory onekey) external view returns (bool){\r\n        string memory _lower = onekey.toLowercase();\r\n        for(uint i = 0; i< ILLEGALKEYS.length; i++){\r\n            if(_lower.indexOf(ILLEGALKEYS[i]) >= 0){\r\n                return false;\r\n            }\r\n        }\r\n        return true;\r\n    }\r\n}","ABI":"[{\"inputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"string\",\"name\":\"key\",\"type\":\"string\"}],\"name\":\"IllegalkeyIn\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"string\",\"name\":\"illegal\",\"type\":\"string\"}],\"name\":\"addIllegalKey\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"string\",\"name\":\"key\",\"type\":\"string\"}],\"name\":\"addKey\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"string\",\"name\":\"word\",\"type\":\"string\"}],\"name\":\"addKeyWord\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"string\",\"name\":\"key\",\"type\":\"string\"}],\"name\":\"contain\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getKeys\",\"outputs\":[{\"internalType\":\"string[]\",\"name\":\"\",\"type\":\"string[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getWords\",\"outputs\":[{\"internalType\":\"string[]\",\"name\":\"\",\"type\":\"string[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"string\",\"name\":\"onekey\",\"type\":\"string\"}],\"name\":\"isLegal\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"string\",\"name\":\"key\",\"type\":\"string\"}],\"name\":\"keyIn\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"string\",\"name\":\"word\",\"type\":\"string\"}],\"name\":\"keyWordIn\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"nounsLen\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"len\",\"type\":\"uint256\"}],\"name\":\"setNounLen\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}]","ContractName":"KeyNouns","CompilerVersion":"v0.8.7+commit.e28d00a7","OptimizationUsed":"1","Runs":"200","ConstructorArguments":"","EVMVersion":"Default","Library":"","LicenseType":"MIT","Proxy":"0","Implementation":"","SwarmSource":"ipfs://718eb67df3ca7be8cab2e76c9c3ea5ed246e694bacad32b5c5e3eefd479a230d"}]}