{"status":"1","message":"OK","result":[{"SourceCode":"{{\r\n  \"language\": \"Solidity\",\r\n  \"sources\": {\r\n    \"contracts/VanillaV1Safelist01.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: GPL-3.0-or-later\\npragma solidity ^0.8.4;\\nimport \\\"./interfaces/IVanillaV1Safelist01.sol\\\";\\n\\n/// @title The contract that keeps a safelist of rewardable ERC-20 tokens and next approved Vanilla version\\ncontract VanillaV1Safelist01 is IVanillaV1Safelist01 {\\n\\n    address private immutable owner;\\n    /// @inheritdoc IVanillaV1Safelist01\\n    mapping(address => bool) public override isSafelisted;\\n\\n    /// @inheritdoc IVanillaV1Safelist01\\n    address public override nextVersion;\\n\\n    constructor(address safeListOwner) {\\n        owner = safeListOwner;\\n    }\\n\\n    modifier onlyOwner() {\\n        if (msg.sender != owner) {\\n            revert UnauthorizedAccess();\\n        }\\n        _;\\n    }\\n\\n    /// @notice Adds and removes tokens to/from the safelist. Only for the owner.\\n    /// @dev Adds first and removes second, so adding and removing a token will not result in safelisted token\\n    /// @param added Array of added ERC-20 addresses\\n    /// @param removed Array of removed ERC-20 addresses\\n    function modify(address[] calldata added, address[] calldata removed) external onlyOwner {\\n        uint numAdded = added.length;\\n        if (numAdded > 0) {\\n            for (uint i = 0; i < numAdded; i++) {\\n                isSafelisted[added[i]] = true;\\n            }\\n            emit TokensAdded(added);\\n        }\\n\\n        uint numRemoved = removed.length;\\n        if (numRemoved > 0) {\\n            for (uint i = 0; i < numRemoved; i++) {\\n                delete isSafelisted[removed[i]];\\n            }\\n            emit TokensRemoved(removed);\\n        }\\n    }\\n\\n    /// @notice Approves the next version implementation. Only for the owner.\\n    /// @param implementation Address of the IVanillaV1MigrationTarget02 implementation\\n    function approveNextVersion(address implementation) external onlyOwner {\\n        nextVersion = implementation;\\n    }\\n\\n}\\n\"\r\n    },\r\n    \"contracts/interfaces/IVanillaV1Safelist01.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: GPL-3.0-or-later\\npragma solidity ^0.8.4;\\n\\ninterface IVanillaV1Safelist01 {\\n    /// @notice Queries if given `token` address is safelisted.\\n    /// @param token The ERC-20 address\\n    /// @return true iff safelisted\\n    function isSafelisted(address token) external view returns (bool);\\n\\n    /// @notice Queries the safelisted address of the next Vanilla version.\\n    /// @return The address of the next Vanilla version which implements IVanillaV1MigrationTarget02\\n    function nextVersion() external view returns (address);\\n\\n    /// @notice Emitted when tokens are added to the safelist\\n    /// @param tokens The ERC-20 addresses that are added to the safelist\\n    event TokensAdded (address[] tokens);\\n\\n    /// @notice Emitted when tokens are removed from the safelist\\n    /// @param tokens The ERC-20 addresses that are added to the safelist\\n    event TokensRemoved (address[] tokens);\\n\\n    /// @notice Thrown when non-owner attempting to modify safelist state\\n    error UnauthorizedAccess ();\\n}\\n\"\r\n    }\r\n  },\r\n  \"settings\": {\r\n    \"optimizer\": {\r\n      \"enabled\": true,\r\n      \"runs\": 200\r\n    },\r\n    \"outputSelection\": {\r\n      \"*\": {\r\n        \"*\": [\r\n          \"evm.bytecode\",\r\n          \"evm.deployedBytecode\",\r\n          \"abi\"\r\n        ]\r\n      }\r\n    },\r\n    \"metadata\": {\r\n      \"useLiteralContent\": true\r\n    },\r\n    \"libraries\": {}\r\n  }\r\n}}","ABI":"[{\"inputs\":[{\"internalType\":\"address\",\"name\":\"safeListOwner\",\"type\":\"address\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"inputs\":[],\"name\":\"UnauthorizedAccess\",\"type\":\"error\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address[]\",\"name\":\"tokens\",\"type\":\"address[]\"}],\"name\":\"TokensAdded\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address[]\",\"name\":\"tokens\",\"type\":\"address[]\"}],\"name\":\"TokensRemoved\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"implementation\",\"type\":\"address\"}],\"name\":\"approveNextVersion\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"isSafelisted\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address[]\",\"name\":\"added\",\"type\":\"address[]\"},{\"internalType\":\"address[]\",\"name\":\"removed\",\"type\":\"address[]\"}],\"name\":\"modify\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"nextVersion\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"}]","ContractName":"VanillaV1Safelist01","CompilerVersion":"v0.8.4+commit.c7e474f2","OptimizationUsed":"1","Runs":"200","ConstructorArguments":"000000000000000000000000a135f339b5acd1f4ecb1c6eed69a31482f878545","EVMVersion":"Default","Library":"","LicenseType":"","Proxy":"0","Implementation":"","SwarmSource":""}]}