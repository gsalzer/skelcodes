{"status":"1","message":"OK","result":[{"SourceCode":"{{\r\n  \"language\": \"Solidity\",\r\n  \"sources\": {\r\n    \"contracts/StartFiTokenDistribution.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: AGPL-3.0-or-later\\n\\npragma solidity 0.8.7;\\n\\nimport \\\"@openzeppelin/contracts/security/Pausable.sol\\\";\\nimport \\\"@openzeppelin/contracts/access/Ownable.sol\\\";\\nimport \\\"@openzeppelin/contracts/security/ReentrancyGuard.sol\\\";\\n\\nimport \\\"./interface/IERC20.sol\\\";\\n\\n/**\\n * @author Eman Herawy, StartFi Team\\n *@title StartFiTokenDistribution\\n * \\n */\\ncontract StartFiTokenDistribution is  Ownable ,Pausable,ReentrancyGuard {\\n  \\n  /******************************************* decalrations go here ********************************************************* */\\n\\t\\n\\t\\taddress[8] public  tokenOwners =[0xAA4e7Ab6dccc1b673036B6FF78fe8af3402801c6,\\n\\t\\t\\t 0x438A078871C6e24663381CDcC7E85C42a0BD5a92,\\n\\t\\t\\t 0x0140d69F99531C10Da3094b5E5Ca758FA0F31579,\\n\\t\\t\\t 0x5deBAB9052E18f9E54eCECdD93Ee713d0ED64CBd,\\n\\t\\t\\t 0x907CB9388f6C78D1179b82A2F6Cc2aB4Ef1534E7,\\n\\t\\t\\t 0xcDC0b435861d452a0165dD939a8a31932055B08B,\\n\\t\\t\\t 0x492eC1E39724Dfc7F4d2b42083BCeb339eBaf18f,\\n\\t\\t\\t 0x801b877ECD8ef397F8560CbFAABd1C910BC8230E]; /* Tracks distributions mapping (iterable) */ \\n\\tuint256 public TGEDate = 0; /* Date From where the distribution starts (TGE) */  \\n\\t\\n\\tmapping(address => DistributionStep[]) private _distributions; /* Distribution object */\\n\\t\\n\\taddress public erc20;\\n\\n\\tstruct DistributionStep {\\n\\t\\tuint256 amountAllocated;\\n \\t\\tuint256 unlockTime;\\n\\t\\tbool sent;\\n\\t}\\n\\n// events \\n\\n\\n\\n\\n /******************************************* constructor goes here ********************************************************* */\\n\\n \\tconstructor(address _erc20, uint256 _time,address _owner){\\n\\t\\t\\trequire(_erc20!=address(0)&& _owner!=address(0),\\\"Zero addresses are not allowed\\\");\\n\\n\\t\\terc20=_erc20;\\n\\t\\tTGEDate =\\t_time<block.timestamp?block.timestamp:_time;\\n\\t\\ttransferOwnership(_owner);\\n\\t\\t\\tuint256  month = 30 days;\\n\\tuint256  year = 365 days;\\n\\n\\t\\t\\taddress seedAccount =tokenOwners[0];\\n\\t\\t\\taddress privateSaleAccount =tokenOwners[1];\\n\\t\\t\\taddress treasuryFundAccount =tokenOwners[2];\\n\\t\\t\\taddress liquidityAccount =tokenOwners[3];\\n\\t\\t\\taddress communityPartnerAccount =tokenOwners[4];\\n\\t\\t\\taddress rewardAccount =tokenOwners[5];\\n\\t\\t\\taddress teamAccount =tokenOwners[6];\\n\\t\\t\\taddress advisorAccount =tokenOwners[7];\\n\\n/* Seed */\\n\\n_setInitialDistribution(seedAccount, 1500000, 0 /* No Lock */);\\n_setInitialDistribution(seedAccount, 850000, 3 * month); /* After 3 Month */\\n_setInitialDistribution(seedAccount, 850000, 4 * month); /* After 4 Months */\\n_setInitialDistribution(seedAccount, 850000, 5 * month); /* After 5 Months */\\n_setInitialDistribution(seedAccount, 850000, 6 * month); /* After 6 Months */\\n_setInitialDistribution(seedAccount, 850000, 7 * month); /* After 7 Months */\\n_setInitialDistribution(seedAccount, 850000, 8 * month); /* After 8 Months */\\n_setInitialDistribution(seedAccount, 850000, 9 * month); /* After 9 Months */\\n_setInitialDistribution(seedAccount, 850000, 10 * month); /* After 10 Months */\\n_setInitialDistribution(seedAccount, 850000, 11 * month); /* After 11 Months */\\n_setInitialDistribution(seedAccount, 850000, 12 * month); /* After 12 Months */\\n\\n/* Private Sale */\\n_setInitialDistribution(privateSaleAccount, 2000000, 0 /* No Lock */);\\n_setInitialDistribution(privateSaleAccount, 800000, 3 * month); /* After 3 Month */\\n_setInitialDistribution(privateSaleAccount, 800000, 4 * month); /* After 4 Months */\\n_setInitialDistribution(privateSaleAccount, 800000, 5 * month); /* After 5 Months */\\n_setInitialDistribution(privateSaleAccount, 800000, 6 * month); /* After 6 Months */\\n_setInitialDistribution(privateSaleAccount, 800000, 7 * month); /* After 7 Months */\\n_setInitialDistribution(privateSaleAccount, 800000, 8 * month); /* After 8 Months */\\n_setInitialDistribution(privateSaleAccount, 800000, 9 * month); /* After 9 Months */\\n_setInitialDistribution(privateSaleAccount, 800000, 10 * month); /* After 10 Months */\\n_setInitialDistribution(privateSaleAccount, 800000, 11 * month); /* After 11 Months */\\n_setInitialDistribution(privateSaleAccount, 800000, 12 * month); /* After 12 Months */\\n\\n/* Treasury Reserve Fund */\\n_setInitialDistribution(treasuryFundAccount, 2500000, 2 * year); /* After Two Years */\\n_setInitialDistribution(treasuryFundAccount, 2500000, 2 * year+(3 * month)); /* After 3 Month */\\n_setInitialDistribution(treasuryFundAccount, 2500000, 2 * year+(6 * month)); /* After 6 Month */\\n_setInitialDistribution(treasuryFundAccount, 2500000, 2 * year+(9 * month)); /* After 9 Month */\\n\\n/* Liquidity Fund */\\n_setInitialDistribution(liquidityAccount, 1000000, 0 /* No Lock */);\\n_setInitialDistribution(liquidityAccount, 2000000, 1 * month); /* After 1 Month */\\n_setInitialDistribution(liquidityAccount, 2000000, 2 * month); /* After 2 Months */\\n_setInitialDistribution(liquidityAccount, 2000000, 3 * month); /* After 3 Months */\\n\\n/* Community and Partnerships */\\n_setInitialDistribution(communityPartnerAccount, 1000000, 1 * month); /* After 1 Month */\\n_setInitialDistribution(communityPartnerAccount, 1000000, 2 * month); /* After 2 Months */\\n_setInitialDistribution(communityPartnerAccount, 1000000, 3 * month); /* After 3 Months */\\n_setInitialDistribution(communityPartnerAccount, 1000000, 4 * month); /* After 4 Months */\\n_setInitialDistribution(communityPartnerAccount, 1000000, 5 * month); /* After 5 Months */\\n_setInitialDistribution(communityPartnerAccount, 1000000, 6 * month); /* After 6 Months */\\n_setInitialDistribution(communityPartnerAccount, 1000000, 7 * month); /* After 7 Months */\\n_setInitialDistribution(communityPartnerAccount, 1000000, 8 * month); /* After 8 Months */\\n_setInitialDistribution(communityPartnerAccount, 1000000, 9 * month); /* After 9 Months */\\n_setInitialDistribution(communityPartnerAccount, 1000000, 10 * month); /* After 10 Months */\\n_setInitialDistribution(communityPartnerAccount, 1000000, 11 * month); /* After 11 Months */\\n_setInitialDistribution(communityPartnerAccount, 1000000, 12 * month); /* After 12 Months */\\n_setInitialDistribution(communityPartnerAccount, 1000000, 13 * month); /* After 13 Month */\\n_setInitialDistribution(communityPartnerAccount, 1000000, 14 * month); /* After 14 Months */\\n_setInitialDistribution(communityPartnerAccount, 1000000, 15 * month); /* After 15 Months */\\n_setInitialDistribution(communityPartnerAccount, 1000000, 16 * month); /* After 16 Months */\\n_setInitialDistribution(communityPartnerAccount, 1000000, 17 * month); /* After 17 Months */\\n_setInitialDistribution(communityPartnerAccount, 1000000, 18 * month); /* After 18 Months */\\n_setInitialDistribution(communityPartnerAccount, 1000000, 19 * month); /* After 19 Months */\\n_setInitialDistribution(communityPartnerAccount, 1000000, 20 * month); /* After 20 Months */\\n\\n/* Rewards & Loyalty */\\n_setInitialDistribution(rewardAccount, 1000000, 0 ); /* No Lock */\\n_setInitialDistribution(rewardAccount, 1000000, 7 * month); /* After 7 Months */\\n_setInitialDistribution(rewardAccount, 1000000, 8 * month); /* After 8 Months */\\n_setInitialDistribution(rewardAccount, 1000000, 9 * month); /* After 9 Months */\\n_setInitialDistribution(rewardAccount, 1000000, 10 * month); /* After 10 Months */\\n_setInitialDistribution(rewardAccount, 1000000, 11 * month); /* After 11 Months */\\n_setInitialDistribution(rewardAccount, 1000000, 12 * month); /* After 12 Months */\\n_setInitialDistribution(rewardAccount, 1000000, 13 * month); /* After 13 Months */\\n_setInitialDistribution(rewardAccount, 1000000, 14 * month); /* After 14 Months */\\n_setInitialDistribution(rewardAccount, 1000000, 15 * month); /* After 15 Months */\\n_setInitialDistribution(rewardAccount, 1000000, 16 * month); /* After 16 Months */\\n_setInitialDistribution(rewardAccount, 1000000, 17 * month); /* After 17 Month */\\n_setInitialDistribution(rewardAccount, 1000000, 18 * month); /* After 18 Months */\\n_setInitialDistribution(rewardAccount, 1000000, 19 * month); /* After 19 Months */\\n_setInitialDistribution(rewardAccount, 1000000, 20 * month); /* After 20 Months */\\n_setInitialDistribution(rewardAccount, 1000000, 21 * month); /* After 21 Months */\\n_setInitialDistribution(rewardAccount, 1000000, 22 * month); /* After 22 Months */\\n_setInitialDistribution(rewardAccount, 1000000, 23 * month); /* After 23 Months */\\n_setInitialDistribution(rewardAccount, 1000000, 24 * month); /* After 24 Months */\\n_setInitialDistribution(rewardAccount, 1000000, 25 * month); /* After 25 Months */\\n_setInitialDistribution(rewardAccount, 1000000, 26 * month); /* After 26 Months */\\n_setInitialDistribution(rewardAccount, 1000000, 27 * month); /* After 27 Months */\\n_setInitialDistribution(rewardAccount, 1000000, 28 * month); /* After 28 Months */\\n_setInitialDistribution(rewardAccount, 1000000, 29 * month); /* After 29 Months */\\n_setInitialDistribution(rewardAccount, 1000000, 30 * month); /* After 30 Months */\\n\\n/* Team */\\n_setInitialDistribution(teamAccount, 2000000, 6 * month); /* After 6 Months */\\n_setInitialDistribution(teamAccount, 2000000, 9 * month); /* After 9 Months */\\n_setInitialDistribution(teamAccount, 2000000, 12 * month); /* After 12 Months */\\n_setInitialDistribution(teamAccount, 2000000, 15 * month); /* After 15 Months */\\n_setInitialDistribution(teamAccount, 2000000, 18 * month); /* After 18 Months */\\n\\n/* Advisors */\\n_setInitialDistribution(advisorAccount, 1000000, 3 * month); /* After 3 Months */\\n_setInitialDistribution(advisorAccount, 1000000, 6 * month); /* After 6 Months */\\n_setInitialDistribution(advisorAccount, 1000000, 9 * month); /* After 9 Months */\\n_setInitialDistribution(advisorAccount, 1000000, 12 * month); /* After 12 Months */\\n_setInitialDistribution(advisorAccount, 1000000, 15 * month); /* After 15 Months */\\n_setInitialDistribution(advisorAccount, 1000000, 18 * month); /* After 18 Months */\\n_setInitialDistribution(advisorAccount, 1000000, 21 * month); /* After 21 Months */\\n\\t\\n\\n\\t}\\n\\n  /******************************************* modifiers go here ********************************************************* */\\n  \\n  \\n  /******************************************* rescue function ********************************************************* */\\n\\n\\tfunction safeGuardAllTokens(address _address) external onlyOwner whenPaused  { /* In case of needed urgency for the sake of contract bug */\\n\\t\\trequire(IERC20(erc20).transfer(_address, IERC20(erc20).balanceOf(address(this))));\\n\\t}\\n\\n\\n  /******************************************* read state functions go here ********************************************************* */\\n\\nfunction getBeneficiaryPoolLength(address beneficary) view public returns (uint256 arrayLneght) {\\n\\treturn _distributions[beneficary].length;\\n}\\nfunction getBeneficiaryPoolInfo(address beneficary, uint256 index) view external returns (\\tuint256 amountAllocated,\\n\\t    uint256 unlockTime,\\n\\t\\tbool sent) {\\n\\t\\t\\tamountAllocated= _distributions[beneficary][index]. amountAllocated;\\n\\t\\t\\tunlockTime= _distributions[beneficary][index]. unlockTime;\\n\\t\\t\\tsent= _distributions[beneficary][index].sent;\\n}\\n  /******************************************* state functions go here ********************************************************* */\\n\\n\\n\\n    /**\\n     * @dev Pauses contract.\\n     *\\n     * \\n     *\\n     * Requirements:\\n     *\\n     * - the caller must be the owner.\\n     */\\n    function pause() external virtual onlyOwner whenNotPaused {\\n        _pause();\\n    }\\n\\n    /**\\n     * @dev Unpauses contract.\\n     *\\n     * \\n     *\\n     * Requirements:\\n     *\\n     * - the caller must be the owner.\\n     */\\n    function unpause() external virtual onlyOwner whenPaused {\\n        _unpause();\\n    }\\n\\t/**\\n\\t*   Should allow any address to trigger it, but since the calls are atomic it should do only once per day\\n\\t */\\n\\n\\tfunction triggerTokenSend() external whenNotPaused nonReentrant {\\n\\t\\n\\t\\t/* TGE has not started */\\n\\t\\trequire(block.timestamp > TGEDate, \\\"TGE still has not started\\\");\\n\\t\\n\\t\\t/* Go thru all tokenOwners */\\n\\t\\tfor(uint i = 0; i < tokenOwners.length; i++) {\\n\\t\\t\\t/* Get Address Distribution */\\n\\t\\t\\tDistributionStep[] memory d = _distributions[tokenOwners[i]];\\n\\t\\t\\t/* Go thru all distributions array */\\n\\t\\t\\tfor(uint j = 0; j < d.length; j++){\\n\\t\\t\\t\\tif(!d[j].sent && d[j].unlockTime< block.timestamp) \\n              {\\n\\t\\t\\t\\t\\t_distributions[tokenOwners[i]][j].sent = true;\\n\\t\\t\\t\\t\\trequire(IERC20(erc20).transfer(tokenOwners[i],_distributions[tokenOwners[i]][j]. amountAllocated));\\n\\t\\t\\t\\t}\\n\\t\\t\\t}\\n\\t\\t}   \\n\\t}\\n\\n\\tfunction _setInitialDistribution(address _address, uint256 _tokenAmount, uint256 _unlockDays) private  {\\n\\t\\n\\t\\t/* Create DistributionStep Object */\\n\\t\\tDistributionStep memory distributionStep = DistributionStep(_tokenAmount , block.timestamp+ _unlockDays, false);\\n\\t\\t/* Attach */\\n\\t\\t_distributions[_address].push(distributionStep);\\n\\n\\t}\\n}\"\r\n    },\r\n    \"@openzeppelin/contracts/security/Pausable.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity 0.8.7;\\n\\nimport \\\"../utils/Context.sol\\\";\\n\\n/**\\n * @dev Contract module which allows children to implement an emergency stop\\n * mechanism that can be triggered by an authorized account.\\n *\\n * This module is used through inheritance. It will make available the\\n * modifiers `whenNotPaused` and `whenPaused`, which can be applied to\\n * the functions of your contract. Note that they will not be pausable by\\n * simply including this module, only once the modifiers are put in place.\\n */\\nabstract contract Pausable is Context {\\n    /**\\n     * @dev Emitted when the pause is triggered by `account`.\\n     */\\n    event Paused(address account);\\n\\n    /**\\n     * @dev Emitted when the pause is lifted by `account`.\\n     */\\n    event Unpaused(address account);\\n\\n    bool private _paused;\\n\\n    /**\\n     * @dev Initializes the contract in unpaused state.\\n     */\\n    constructor () {\\n        _paused = false;\\n    }\\n\\n    /**\\n     * @dev Returns true if the contract is paused, and false otherwise.\\n     */\\n    function paused() public view virtual returns (bool) {\\n        return _paused;\\n    }\\n\\n    /**\\n     * @dev Modifier to make a function callable only when the contract is not paused.\\n     *\\n     * Requirements:\\n     *\\n     * - The contract must not be paused.\\n     */\\n    modifier whenNotPaused() {\\n        require(!paused(), \\\"Pausable: paused\\\");\\n        _;\\n    }\\n\\n    /**\\n     * @dev Modifier to make a function callable only when the contract is paused.\\n     *\\n     * Requirements:\\n     *\\n     * - The contract must be paused.\\n     */\\n    modifier whenPaused() {\\n        require(paused(), \\\"Pausable: not paused\\\");\\n        _;\\n    }\\n\\n    /**\\n     * @dev Triggers stopped state.\\n     *\\n     * Requirements:\\n     *\\n     * - The contract must not be paused.\\n     */\\n    function _pause() internal virtual whenNotPaused {\\n        _paused = true;\\n        emit Paused(_msgSender());\\n    }\\n\\n    /**\\n     * @dev Returns to normal state.\\n     *\\n     * Requirements:\\n     *\\n     * - The contract must be paused.\\n     */\\n    function _unpause() internal virtual whenPaused {\\n        _paused = false;\\n        emit Unpaused(_msgSender());\\n    }\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/access/Ownable.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity 0.8.7;\\n\\nimport \\\"../utils/Context.sol\\\";\\n/**\\n * @dev Contract module which provides a basic access control mechanism, where\\n * there is an account (an owner) that can be granted exclusive access to\\n * specific functions.\\n *\\n * By default, the owner account will be the one that deploys the contract. This\\n * can later be changed with {transferOwnership}.\\n *\\n * This module is used through inheritance. It will make available the modifier\\n * `onlyOwner`, which can be applied to your functions to restrict their use to\\n * the owner.\\n */\\nabstract contract Ownable is Context {\\n    address private _owner;\\n\\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\\n\\n    /**\\n     * @dev Initializes the contract setting the deployer as the initial owner.\\n     */\\n    constructor () {\\n        address msgSender = _msgSender();\\n        _owner = msgSender;\\n        emit OwnershipTransferred(address(0), msgSender);\\n    }\\n\\n    /**\\n     * @dev Returns the address of the current owner.\\n     */\\n    function owner() public view virtual returns (address) {\\n        return _owner;\\n    }\\n\\n    /**\\n     * @dev Throws if called by any account other than the owner.\\n     */\\n    modifier onlyOwner() {\\n        require(owner() == _msgSender(), \\\"Ownable: caller is not the owner\\\");\\n        _;\\n    }\\n\\n    /**\\n     * @dev Leaves the contract without owner. It will not be possible to call\\n     * `onlyOwner` functions anymore. Can only be called by the current owner.\\n     *\\n     * NOTE: Renouncing ownership will leave the contract without an owner,\\n     * thereby removing any functionality that is only available to the owner.\\n     */\\n    function renounceOwnership() public virtual onlyOwner {\\n        emit OwnershipTransferred(_owner, address(0));\\n        _owner = address(0);\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Can only be called by the current owner.\\n     */\\n    function transferOwnership(address newOwner) public virtual onlyOwner {\\n        require(newOwner != address(0), \\\"Ownable: new owner is the zero address\\\");\\n        emit OwnershipTransferred(_owner, newOwner);\\n        _owner = newOwner;\\n    }\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/security/ReentrancyGuard.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity 0.8.7;\\n\\n/**\\n * @dev Contract module that helps prevent reentrant calls to a function.\\n *\\n * Inheriting from `ReentrancyGuard` will make the {nonReentrant} modifier\\n * available, which can be applied to functions to make sure there are no nested\\n * (reentrant) calls to them.\\n *\\n * Note that because there is a single `nonReentrant` guard, functions marked as\\n * `nonReentrant` may not call one another. This can be worked around by making\\n * those functions `private`, and then adding `external` `nonReentrant` entry\\n * points to them.\\n *\\n * TIP: If you would like to learn more about reentrancy and alternative ways\\n * to protect against it, check out our blog post\\n * https://blog.openzeppelin.com/reentrancy-after-istanbul/[Reentrancy After Istanbul].\\n */\\nabstract contract ReentrancyGuard {\\n    // Booleans are more expensive than uint256 or any type that takes up a full\\n    // word because each write operation emits an extra SLOAD to first read the\\n    // slot's contents, replace the bits taken up by the boolean, and then write\\n    // back. This is the compiler's defense against contract upgrades and\\n    // pointer aliasing, and it cannot be disabled.\\n\\n    // The values being non-zero value makes deployment a bit more expensive,\\n    // but in exchange the refund on every call to nonReentrant will be lower in\\n    // amount. Since refunds are capped to a percentage of the total\\n    // transaction's gas, it is best to keep them low in cases like this one, to\\n    // increase the likelihood of the full refund coming into effect.\\n    uint256 private constant _NOT_ENTERED = 1;\\n    uint256 private constant _ENTERED = 2;\\n\\n    uint256 private _status;\\n\\n    constructor () {\\n        _status = _NOT_ENTERED;\\n    }\\n\\n    /**\\n     * @dev Prevents a contract from calling itself, directly or indirectly.\\n     * Calling a `nonReentrant` function from another `nonReentrant`\\n     * function is not supported. It is possible to prevent this from happening\\n     * by making the `nonReentrant` function external, and make it call a\\n     * `private` function that does the actual work.\\n     */\\n    modifier nonReentrant() {\\n        // On the first call to nonReentrant, _notEntered will be true\\n        require(_status != _ENTERED, \\\"ReentrancyGuard: reentrant call\\\");\\n\\n        // Any calls to nonReentrant after this point will fail\\n        _status = _ENTERED;\\n\\n        _;\\n\\n        // By storing the original value once again, a refund is triggered (see\\n        // https://eips.ethereum.org/EIPS/eip-2200)\\n        _status = _NOT_ENTERED;\\n    }\\n}\\n\"\r\n    },\r\n    \"contracts/interface/IERC20.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: GPL-3.0-or-later\\n\\npragma solidity 0.8.7;\\n\\n/**\\n * @dev Interface of the ERC20 standard as defined in the EIP.\\n */\\ninterface IERC20 {\\n    function totalSupply() external view returns (uint256);\\n    function decimals() external view returns (uint8);\\n    function balanceOf(address account) external view returns (uint256);\\n    function transfer(address recipient, uint256 amount) external returns (bool);\\n    function allowance(address owner, address spender) external view returns (uint256);\\n    function approve(address spender, uint256 amount) external returns (bool);\\n    function transferFrom(address sender, address recipient, uint256 amount) external returns (bool);\\n    function permit(address target, address spender, uint256 value, uint256 deadline, uint8 v, bytes32 r, bytes32 s) external;\\n    function transferWithPermit(address target, address to, uint256 value, uint256 deadline, uint8 v, bytes32 r, bytes32 s) external returns (bool);\\n    event Transfer(address indexed from, address indexed to, uint256 value);\\n    event Approval(address indexed owner, address indexed spender, uint256 value);\\n}\"\r\n    },\r\n    \"@openzeppelin/contracts/utils/Context.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity 0.8.7;\\n\\n/*\\n * @dev Provides information about the current execution context, including the\\n * sender of the transaction and its data. While these are generally available\\n * via msg.sender and msg.data, they should not be accessed in such a direct\\n * manner, since when dealing with meta-transactions the account sending and\\n * paying for execution may not be the actual sender (as far as an application\\n * is concerned).\\n *\\n * This contract is only required for intermediate, library-like contracts.\\n */\\nabstract contract Context {\\n    function _msgSender() internal view virtual returns (address) {\\n        return msg.sender;\\n    }\\n\\n    function _msgData() internal view virtual returns (bytes calldata) {\\n        this; // silence state mutability warning without generating bytecode - see https://github.com/ethereum/solidity/issues/2691\\n        return msg.data;\\n    }\\n}\\n\"\r\n    }\r\n  },\r\n  \"settings\": {\r\n    \"optimizer\": {\r\n      \"enabled\": true,\r\n      \"runs\": 200\r\n    },\r\n    \"outputSelection\": {\r\n      \"*\": {\r\n        \"*\": [\r\n          \"evm.bytecode\",\r\n          \"evm.deployedBytecode\",\r\n          \"abi\"\r\n        ]\r\n      }\r\n    },\r\n    \"metadata\": {\r\n      \"useLiteralContent\": true\r\n    },\r\n    \"libraries\": {}\r\n  }\r\n}}","ABI":"[{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_erc20\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_time\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"_owner\",\"type\":\"address\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"Paused\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"Unpaused\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"TGEDate\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"erc20\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"beneficary\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"index\",\"type\":\"uint256\"}],\"name\":\"getBeneficiaryPoolInfo\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"amountAllocated\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"unlockTime\",\"type\":\"uint256\"},{\"internalType\":\"bool\",\"name\":\"sent\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"beneficary\",\"type\":\"address\"}],\"name\":\"getBeneficiaryPoolLength\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"arrayLneght\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"pause\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"paused\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_address\",\"type\":\"address\"}],\"name\":\"safeGuardAllTokens\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"tokenOwners\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"triggerTokenSend\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"unpause\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}]","ContractName":"StartFiTokenDistribution","CompilerVersion":"v0.8.7+commit.e28d00a7","OptimizationUsed":"1","Runs":"200","ConstructorArguments":"000000000000000000000000fd9cd8c0d18cd7e06958f3055e0ec3adbdba0b17000000000000000000000000000000000000000000000000000000006119aa80000000000000000000000000392e861c447929cc01e309b41f0ca43bbfc33d7d","EVMVersion":"Default","Library":"","LicenseType":"","Proxy":"0","Implementation":"","SwarmSource":""}]}