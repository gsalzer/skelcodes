{"status":"1","message":"OK","result":[{"SourceCode":"{{\r\n  \"language\": \"Solidity\",\r\n  \"sources\": {\r\n    \"contracts/common/AccessControl.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: BUSL-1.1\\npragma solidity 0.6.11;\\n\\nimport {\\n    AccessControl as OZAccessControl\\n} from \\\"@openzeppelin/contracts/access/AccessControl.sol\\\";\\n\\n/**\\n * @notice Extends OpenZeppelin AccessControl contract with modifiers\\n * @dev This contract and AccessControlUpgradeSafe are essentially duplicates.\\n */\\ncontract AccessControl is OZAccessControl {\\n    /** @notice access control roles **/\\n    bytes32 public constant CONTRACT_ROLE = keccak256(\\\"CONTRACT_ROLE\\\");\\n    bytes32 public constant LP_ROLE = keccak256(\\\"LP_ROLE\\\");\\n    bytes32 public constant ADMIN_ROLE = keccak256(\\\"ADMIN_ROLE\\\");\\n    bytes32 public constant EMERGENCY_ROLE = keccak256(\\\"EMERGENCY_ROLE\\\");\\n\\n    modifier onlyLpRole() {\\n        require(hasRole(LP_ROLE, _msgSender()), \\\"NOT_LP_ROLE\\\");\\n        _;\\n    }\\n\\n    modifier onlyContractRole() {\\n        require(hasRole(CONTRACT_ROLE, _msgSender()), \\\"NOT_CONTRACT_ROLE\\\");\\n        _;\\n    }\\n\\n    modifier onlyAdminRole() {\\n        require(hasRole(ADMIN_ROLE, _msgSender()), \\\"NOT_ADMIN_ROLE\\\");\\n        _;\\n    }\\n\\n    modifier onlyEmergencyRole() {\\n        require(hasRole(EMERGENCY_ROLE, _msgSender()), \\\"NOT_EMERGENCY_ROLE\\\");\\n        _;\\n    }\\n\\n    modifier onlyLpOrContractRole() {\\n        require(\\n            hasRole(LP_ROLE, _msgSender()) ||\\n                hasRole(CONTRACT_ROLE, _msgSender()),\\n            \\\"NOT_LP_OR_CONTRACT_ROLE\\\"\\n        );\\n        _;\\n    }\\n\\n    modifier onlyAdminOrContractRole() {\\n        require(\\n            hasRole(ADMIN_ROLE, _msgSender()) ||\\n                hasRole(CONTRACT_ROLE, _msgSender()),\\n            \\\"NOT_ADMIN_OR_CONTRACT_ROLE\\\"\\n        );\\n        _;\\n    }\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/access/AccessControl.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity >=0.6.0 <0.8.0;\\n\\nimport \\\"../utils/EnumerableSet.sol\\\";\\nimport \\\"../utils/Address.sol\\\";\\nimport \\\"../utils/Context.sol\\\";\\n\\n/**\\n * @dev Contract module that allows children to implement role-based access\\n * control mechanisms.\\n *\\n * Roles are referred to by their `bytes32` identifier. These should be exposed\\n * in the external API and be unique. The best way to achieve this is by\\n * using `public constant` hash digests:\\n *\\n * ```\\n * bytes32 public constant MY_ROLE = keccak256(\\\"MY_ROLE\\\");\\n * ```\\n *\\n * Roles can be used to represent a set of permissions. To restrict access to a\\n * function call, use {hasRole}:\\n *\\n * ```\\n * function foo() public {\\n *     require(hasRole(MY_ROLE, msg.sender));\\n *     ...\\n * }\\n * ```\\n *\\n * Roles can be granted and revoked dynamically via the {grantRole} and\\n * {revokeRole} functions. Each role has an associated admin role, and only\\n * accounts that have a role's admin role can call {grantRole} and {revokeRole}.\\n *\\n * By default, the admin role for all roles is `DEFAULT_ADMIN_ROLE`, which means\\n * that only accounts with this role will be able to grant or revoke other\\n * roles. More complex role relationships can be created by using\\n * {_setRoleAdmin}.\\n *\\n * WARNING: The `DEFAULT_ADMIN_ROLE` is also its own admin: it has permission to\\n * grant and revoke this role. Extra precautions should be taken to secure\\n * accounts that have been granted it.\\n */\\nabstract contract AccessControl is Context {\\n    using EnumerableSet for EnumerableSet.AddressSet;\\n    using Address for address;\\n\\n    struct RoleData {\\n        EnumerableSet.AddressSet members;\\n        bytes32 adminRole;\\n    }\\n\\n    mapping (bytes32 => RoleData) private _roles;\\n\\n    bytes32 public constant DEFAULT_ADMIN_ROLE = 0x00;\\n\\n    /**\\n     * @dev Emitted when `newAdminRole` is set as ``role``'s admin role, replacing `previousAdminRole`\\n     *\\n     * `DEFAULT_ADMIN_ROLE` is the starting admin for all roles, despite\\n     * {RoleAdminChanged} not being emitted signaling this.\\n     *\\n     * _Available since v3.1._\\n     */\\n    event RoleAdminChanged(bytes32 indexed role, bytes32 indexed previousAdminRole, bytes32 indexed newAdminRole);\\n\\n    /**\\n     * @dev Emitted when `account` is granted `role`.\\n     *\\n     * `sender` is the account that originated the contract call, an admin role\\n     * bearer except when using {_setupRole}.\\n     */\\n    event RoleGranted(bytes32 indexed role, address indexed account, address indexed sender);\\n\\n    /**\\n     * @dev Emitted when `account` is revoked `role`.\\n     *\\n     * `sender` is the account that originated the contract call:\\n     *   - if using `revokeRole`, it is the admin role bearer\\n     *   - if using `renounceRole`, it is the role bearer (i.e. `account`)\\n     */\\n    event RoleRevoked(bytes32 indexed role, address indexed account, address indexed sender);\\n\\n    /**\\n     * @dev Returns `true` if `account` has been granted `role`.\\n     */\\n    function hasRole(bytes32 role, address account) public view returns (bool) {\\n        return _roles[role].members.contains(account);\\n    }\\n\\n    /**\\n     * @dev Returns the number of accounts that have `role`. Can be used\\n     * together with {getRoleMember} to enumerate all bearers of a role.\\n     */\\n    function getRoleMemberCount(bytes32 role) public view returns (uint256) {\\n        return _roles[role].members.length();\\n    }\\n\\n    /**\\n     * @dev Returns one of the accounts that have `role`. `index` must be a\\n     * value between 0 and {getRoleMemberCount}, non-inclusive.\\n     *\\n     * Role bearers are not sorted in any particular way, and their ordering may\\n     * change at any point.\\n     *\\n     * WARNING: When using {getRoleMember} and {getRoleMemberCount}, make sure\\n     * you perform all queries on the same block. See the following\\n     * https://forum.openzeppelin.com/t/iterating-over-elements-on-enumerableset-in-openzeppelin-contracts/2296[forum post]\\n     * for more information.\\n     */\\n    function getRoleMember(bytes32 role, uint256 index) public view returns (address) {\\n        return _roles[role].members.at(index);\\n    }\\n\\n    /**\\n     * @dev Returns the admin role that controls `role`. See {grantRole} and\\n     * {revokeRole}.\\n     *\\n     * To change a role's admin, use {_setRoleAdmin}.\\n     */\\n    function getRoleAdmin(bytes32 role) public view returns (bytes32) {\\n        return _roles[role].adminRole;\\n    }\\n\\n    /**\\n     * @dev Grants `role` to `account`.\\n     *\\n     * If `account` had not been already granted `role`, emits a {RoleGranted}\\n     * event.\\n     *\\n     * Requirements:\\n     *\\n     * - the caller must have ``role``'s admin role.\\n     */\\n    function grantRole(bytes32 role, address account) public virtual {\\n        require(hasRole(_roles[role].adminRole, _msgSender()), \\\"AccessControl: sender must be an admin to grant\\\");\\n\\n        _grantRole(role, account);\\n    }\\n\\n    /**\\n     * @dev Revokes `role` from `account`.\\n     *\\n     * If `account` had been granted `role`, emits a {RoleRevoked} event.\\n     *\\n     * Requirements:\\n     *\\n     * - the caller must have ``role``'s admin role.\\n     */\\n    function revokeRole(bytes32 role, address account) public virtual {\\n        require(hasRole(_roles[role].adminRole, _msgSender()), \\\"AccessControl: sender must be an admin to revoke\\\");\\n\\n        _revokeRole(role, account);\\n    }\\n\\n    /**\\n     * @dev Revokes `role` from the calling account.\\n     *\\n     * Roles are often managed via {grantRole} and {revokeRole}: this function's\\n     * purpose is to provide a mechanism for accounts to lose their privileges\\n     * if they are compromised (such as when a trusted device is misplaced).\\n     *\\n     * If the calling account had been granted `role`, emits a {RoleRevoked}\\n     * event.\\n     *\\n     * Requirements:\\n     *\\n     * - the caller must be `account`.\\n     */\\n    function renounceRole(bytes32 role, address account) public virtual {\\n        require(account == _msgSender(), \\\"AccessControl: can only renounce roles for self\\\");\\n\\n        _revokeRole(role, account);\\n    }\\n\\n    /**\\n     * @dev Grants `role` to `account`.\\n     *\\n     * If `account` had not been already granted `role`, emits a {RoleGranted}\\n     * event. Note that unlike {grantRole}, this function doesn't perform any\\n     * checks on the calling account.\\n     *\\n     * [WARNING]\\n     * ====\\n     * This function should only be called from the constructor when setting\\n     * up the initial roles for the system.\\n     *\\n     * Using this function in any other way is effectively circumventing the admin\\n     * system imposed by {AccessControl}.\\n     * ====\\n     */\\n    function _setupRole(bytes32 role, address account) internal virtual {\\n        _grantRole(role, account);\\n    }\\n\\n    /**\\n     * @dev Sets `adminRole` as ``role``'s admin role.\\n     *\\n     * Emits a {RoleAdminChanged} event.\\n     */\\n    function _setRoleAdmin(bytes32 role, bytes32 adminRole) internal virtual {\\n        emit RoleAdminChanged(role, _roles[role].adminRole, adminRole);\\n        _roles[role].adminRole = adminRole;\\n    }\\n\\n    function _grantRole(bytes32 role, address account) private {\\n        if (_roles[role].members.add(account)) {\\n            emit RoleGranted(role, account, _msgSender());\\n        }\\n    }\\n\\n    function _revokeRole(bytes32 role, address account) private {\\n        if (_roles[role].members.remove(account)) {\\n            emit RoleRevoked(role, account, _msgSender());\\n        }\\n    }\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/utils/EnumerableSet.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity >=0.6.0 <0.8.0;\\n\\n/**\\n * @dev Library for managing\\n * https://en.wikipedia.org/wiki/Set_(abstract_data_type)[sets] of primitive\\n * types.\\n *\\n * Sets have the following properties:\\n *\\n * - Elements are added, removed, and checked for existence in constant time\\n * (O(1)).\\n * - Elements are enumerated in O(n). No guarantees are made on the ordering.\\n *\\n * ```\\n * contract Example {\\n *     // Add the library methods\\n *     using EnumerableSet for EnumerableSet.AddressSet;\\n *\\n *     // Declare a set state variable\\n *     EnumerableSet.AddressSet private mySet;\\n * }\\n * ```\\n *\\n * As of v3.3.0, sets of type `bytes32` (`Bytes32Set`), `address` (`AddressSet`)\\n * and `uint256` (`UintSet`) are supported.\\n */\\nlibrary EnumerableSet {\\n    // To implement this library for multiple types with as little code\\n    // repetition as possible, we write it in terms of a generic Set type with\\n    // bytes32 values.\\n    // The Set implementation uses private functions, and user-facing\\n    // implementations (such as AddressSet) are just wrappers around the\\n    // underlying Set.\\n    // This means that we can only create new EnumerableSets for types that fit\\n    // in bytes32.\\n\\n    struct Set {\\n        // Storage of set values\\n        bytes32[] _values;\\n\\n        // Position of the value in the `values` array, plus 1 because index 0\\n        // means a value is not in the set.\\n        mapping (bytes32 => uint256) _indexes;\\n    }\\n\\n    /**\\n     * @dev Add a value to a set. O(1).\\n     *\\n     * Returns true if the value was added to the set, that is if it was not\\n     * already present.\\n     */\\n    function _add(Set storage set, bytes32 value) private returns (bool) {\\n        if (!_contains(set, value)) {\\n            set._values.push(value);\\n            // The value is stored at length-1, but we add 1 to all indexes\\n            // and use 0 as a sentinel value\\n            set._indexes[value] = set._values.length;\\n            return true;\\n        } else {\\n            return false;\\n        }\\n    }\\n\\n    /**\\n     * @dev Removes a value from a set. O(1).\\n     *\\n     * Returns true if the value was removed from the set, that is if it was\\n     * present.\\n     */\\n    function _remove(Set storage set, bytes32 value) private returns (bool) {\\n        // We read and store the value's index to prevent multiple reads from the same storage slot\\n        uint256 valueIndex = set._indexes[value];\\n\\n        if (valueIndex != 0) { // Equivalent to contains(set, value)\\n            // To delete an element from the _values array in O(1), we swap the element to delete with the last one in\\n            // the array, and then remove the last element (sometimes called as 'swap and pop').\\n            // This modifies the order of the array, as noted in {at}.\\n\\n            uint256 toDeleteIndex = valueIndex - 1;\\n            uint256 lastIndex = set._values.length - 1;\\n\\n            // When the value to delete is the last one, the swap operation is unnecessary. However, since this occurs\\n            // so rarely, we still do the swap anyway to avoid the gas cost of adding an 'if' statement.\\n\\n            bytes32 lastvalue = set._values[lastIndex];\\n\\n            // Move the last value to the index where the value to delete is\\n            set._values[toDeleteIndex] = lastvalue;\\n            // Update the index for the moved value\\n            set._indexes[lastvalue] = toDeleteIndex + 1; // All indexes are 1-based\\n\\n            // Delete the slot where the moved value was stored\\n            set._values.pop();\\n\\n            // Delete the index for the deleted slot\\n            delete set._indexes[value];\\n\\n            return true;\\n        } else {\\n            return false;\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns true if the value is in the set. O(1).\\n     */\\n    function _contains(Set storage set, bytes32 value) private view returns (bool) {\\n        return set._indexes[value] != 0;\\n    }\\n\\n    /**\\n     * @dev Returns the number of values on the set. O(1).\\n     */\\n    function _length(Set storage set) private view returns (uint256) {\\n        return set._values.length;\\n    }\\n\\n   /**\\n    * @dev Returns the value stored at position `index` in the set. O(1).\\n    *\\n    * Note that there are no guarantees on the ordering of values inside the\\n    * array, and it may change when more values are added or removed.\\n    *\\n    * Requirements:\\n    *\\n    * - `index` must be strictly less than {length}.\\n    */\\n    function _at(Set storage set, uint256 index) private view returns (bytes32) {\\n        require(set._values.length > index, \\\"EnumerableSet: index out of bounds\\\");\\n        return set._values[index];\\n    }\\n\\n    // Bytes32Set\\n\\n    struct Bytes32Set {\\n        Set _inner;\\n    }\\n\\n    /**\\n     * @dev Add a value to a set. O(1).\\n     *\\n     * Returns true if the value was added to the set, that is if it was not\\n     * already present.\\n     */\\n    function add(Bytes32Set storage set, bytes32 value) internal returns (bool) {\\n        return _add(set._inner, value);\\n    }\\n\\n    /**\\n     * @dev Removes a value from a set. O(1).\\n     *\\n     * Returns true if the value was removed from the set, that is if it was\\n     * present.\\n     */\\n    function remove(Bytes32Set storage set, bytes32 value) internal returns (bool) {\\n        return _remove(set._inner, value);\\n    }\\n\\n    /**\\n     * @dev Returns true if the value is in the set. O(1).\\n     */\\n    function contains(Bytes32Set storage set, bytes32 value) internal view returns (bool) {\\n        return _contains(set._inner, value);\\n    }\\n\\n    /**\\n     * @dev Returns the number of values in the set. O(1).\\n     */\\n    function length(Bytes32Set storage set) internal view returns (uint256) {\\n        return _length(set._inner);\\n    }\\n\\n   /**\\n    * @dev Returns the value stored at position `index` in the set. O(1).\\n    *\\n    * Note that there are no guarantees on the ordering of values inside the\\n    * array, and it may change when more values are added or removed.\\n    *\\n    * Requirements:\\n    *\\n    * - `index` must be strictly less than {length}.\\n    */\\n    function at(Bytes32Set storage set, uint256 index) internal view returns (bytes32) {\\n        return _at(set._inner, index);\\n    }\\n\\n    // AddressSet\\n\\n    struct AddressSet {\\n        Set _inner;\\n    }\\n\\n    /**\\n     * @dev Add a value to a set. O(1).\\n     *\\n     * Returns true if the value was added to the set, that is if it was not\\n     * already present.\\n     */\\n    function add(AddressSet storage set, address value) internal returns (bool) {\\n        return _add(set._inner, bytes32(uint256(uint160(value))));\\n    }\\n\\n    /**\\n     * @dev Removes a value from a set. O(1).\\n     *\\n     * Returns true if the value was removed from the set, that is if it was\\n     * present.\\n     */\\n    function remove(AddressSet storage set, address value) internal returns (bool) {\\n        return _remove(set._inner, bytes32(uint256(uint160(value))));\\n    }\\n\\n    /**\\n     * @dev Returns true if the value is in the set. O(1).\\n     */\\n    function contains(AddressSet storage set, address value) internal view returns (bool) {\\n        return _contains(set._inner, bytes32(uint256(uint160(value))));\\n    }\\n\\n    /**\\n     * @dev Returns the number of values in the set. O(1).\\n     */\\n    function length(AddressSet storage set) internal view returns (uint256) {\\n        return _length(set._inner);\\n    }\\n\\n   /**\\n    * @dev Returns the value stored at position `index` in the set. O(1).\\n    *\\n    * Note that there are no guarantees on the ordering of values inside the\\n    * array, and it may change when more values are added or removed.\\n    *\\n    * Requirements:\\n    *\\n    * - `index` must be strictly less than {length}.\\n    */\\n    function at(AddressSet storage set, uint256 index) internal view returns (address) {\\n        return address(uint160(uint256(_at(set._inner, index))));\\n    }\\n\\n\\n    // UintSet\\n\\n    struct UintSet {\\n        Set _inner;\\n    }\\n\\n    /**\\n     * @dev Add a value to a set. O(1).\\n     *\\n     * Returns true if the value was added to the set, that is if it was not\\n     * already present.\\n     */\\n    function add(UintSet storage set, uint256 value) internal returns (bool) {\\n        return _add(set._inner, bytes32(value));\\n    }\\n\\n    /**\\n     * @dev Removes a value from a set. O(1).\\n     *\\n     * Returns true if the value was removed from the set, that is if it was\\n     * present.\\n     */\\n    function remove(UintSet storage set, uint256 value) internal returns (bool) {\\n        return _remove(set._inner, bytes32(value));\\n    }\\n\\n    /**\\n     * @dev Returns true if the value is in the set. O(1).\\n     */\\n    function contains(UintSet storage set, uint256 value) internal view returns (bool) {\\n        return _contains(set._inner, bytes32(value));\\n    }\\n\\n    /**\\n     * @dev Returns the number of values on the set. O(1).\\n     */\\n    function length(UintSet storage set) internal view returns (uint256) {\\n        return _length(set._inner);\\n    }\\n\\n   /**\\n    * @dev Returns the value stored at position `index` in the set. O(1).\\n    *\\n    * Note that there are no guarantees on the ordering of values inside the\\n    * array, and it may change when more values are added or removed.\\n    *\\n    * Requirements:\\n    *\\n    * - `index` must be strictly less than {length}.\\n    */\\n    function at(UintSet storage set, uint256 index) internal view returns (uint256) {\\n        return uint256(_at(set._inner, index));\\n    }\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/utils/Address.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity >=0.6.2 <0.8.0;\\n\\n/**\\n * @dev Collection of functions related to the address type\\n */\\nlibrary Address {\\n    /**\\n     * @dev Returns true if `account` is a contract.\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * It is unsafe to assume that an address for which this function returns\\n     * false is an externally-owned account (EOA) and not a contract.\\n     *\\n     * Among others, `isContract` will return false for the following\\n     * types of addresses:\\n     *\\n     *  - an externally-owned account\\n     *  - a contract in construction\\n     *  - an address where a contract will be created\\n     *  - an address where a contract lived, but was destroyed\\n     * ====\\n     */\\n    function isContract(address account) internal view returns (bool) {\\n        // This method relies on extcodesize, which returns 0 for contracts in\\n        // construction, since the code is only stored at the end of the\\n        // constructor execution.\\n\\n        uint256 size;\\n        // solhint-disable-next-line no-inline-assembly\\n        assembly { size := extcodesize(account) }\\n        return size > 0;\\n    }\\n\\n    /**\\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\\n     * `recipient`, forwarding all available gas and reverting on errors.\\n     *\\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\\n     * imposed by `transfer`, making them unable to receive funds via\\n     * `transfer`. {sendValue} removes this limitation.\\n     *\\n     * https://diligence.consensys.net/posts/2019/09/stop-using-soliditys-transfer-now/[Learn more].\\n     *\\n     * IMPORTANT: because control is transferred to `recipient`, care must be\\n     * taken to not create reentrancy vulnerabilities. Consider using\\n     * {ReentrancyGuard} or the\\n     * https://solidity.readthedocs.io/en/v0.5.11/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\\n     */\\n    function sendValue(address payable recipient, uint256 amount) internal {\\n        require(address(this).balance >= amount, \\\"Address: insufficient balance\\\");\\n\\n        // solhint-disable-next-line avoid-low-level-calls, avoid-call-value\\n        (bool success, ) = recipient.call{ value: amount }(\\\"\\\");\\n        require(success, \\\"Address: unable to send value, recipient may have reverted\\\");\\n    }\\n\\n    /**\\n     * @dev Performs a Solidity function call using a low level `call`. A\\n     * plain`call` is an unsafe replacement for a function call: use this\\n     * function instead.\\n     *\\n     * If `target` reverts with a revert reason, it is bubbled up by this\\n     * function (like regular Solidity function calls).\\n     *\\n     * Returns the raw returned data. To convert to the expected return value,\\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\\n     *\\n     * Requirements:\\n     *\\n     * - `target` must be a contract.\\n     * - calling `target` with `data` must not revert.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\\n      return functionCall(target, data, \\\"Address: low-level call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\\n     * `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(address target, bytes memory data, string memory errorMessage) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, 0, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but also transferring `value` wei to `target`.\\n     *\\n     * Requirements:\\n     *\\n     * - the calling contract must have an ETH balance of at least `value`.\\n     * - the called Solidity function must be `payable`.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(address target, bytes memory data, uint256 value) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, value, \\\"Address: low-level call with value failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\\n     * with `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(address target, bytes memory data, uint256 value, string memory errorMessage) internal returns (bytes memory) {\\n        require(address(this).balance >= value, \\\"Address: insufficient balance for call\\\");\\n        require(isContract(target), \\\"Address: call to non-contract\\\");\\n\\n        // solhint-disable-next-line avoid-low-level-calls\\n        (bool success, bytes memory returndata) = target.call{ value: value }(data);\\n        return _verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\\n        return functionStaticCall(target, data, \\\"Address: low-level static call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(address target, bytes memory data, string memory errorMessage) internal view returns (bytes memory) {\\n        require(isContract(target), \\\"Address: static call to non-contract\\\");\\n\\n        // solhint-disable-next-line avoid-low-level-calls\\n        (bool success, bytes memory returndata) = target.staticcall(data);\\n        return _verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionDelegateCall(target, data, \\\"Address: low-level delegate call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(address target, bytes memory data, string memory errorMessage) internal returns (bytes memory) {\\n        require(isContract(target), \\\"Address: delegate call to non-contract\\\");\\n\\n        // solhint-disable-next-line avoid-low-level-calls\\n        (bool success, bytes memory returndata) = target.delegatecall(data);\\n        return _verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    function _verifyCallResult(bool success, bytes memory returndata, string memory errorMessage) private pure returns(bytes memory) {\\n        if (success) {\\n            return returndata;\\n        } else {\\n            // Look for revert reason and bubble it up if present\\n            if (returndata.length > 0) {\\n                // The easiest way to bubble the revert reason is using memory via assembly\\n\\n                // solhint-disable-next-line no-inline-assembly\\n                assembly {\\n                    let returndata_size := mload(returndata)\\n                    revert(add(32, returndata), returndata_size)\\n                }\\n            } else {\\n                revert(errorMessage);\\n            }\\n        }\\n    }\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/utils/Context.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity >=0.6.0 <0.8.0;\\n\\n/*\\n * @dev Provides information about the current execution context, including the\\n * sender of the transaction and its data. While these are generally available\\n * via msg.sender and msg.data, they should not be accessed in such a direct\\n * manner, since when dealing with GSN meta-transactions the account sending and\\n * paying for execution may not be the actual sender (as far as an application\\n * is concerned).\\n *\\n * This contract is only required for intermediate, library-like contracts.\\n */\\nabstract contract Context {\\n    function _msgSender() internal view virtual returns (address payable) {\\n        return msg.sender;\\n    }\\n\\n    function _msgData() internal view virtual returns (bytes memory) {\\n        this; // silence state mutability warning without generating bytecode - see https://github.com/ethereum/solidity/issues/2691\\n        return msg.data;\\n    }\\n}\\n\"\r\n    },\r\n    \"contracts/common/Imports.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: BUSDL-1.1\\npragma solidity 0.6.11;\\n\\nimport {IERC20} from \\\"@openzeppelin/contracts/token/ERC20/IERC20.sol\\\";\\nimport {SafeERC20} from \\\"@openzeppelin/contracts/token/ERC20/SafeERC20.sol\\\";\\nimport {IDetailedERC20} from \\\"./IDetailedERC20.sol\\\";\\nimport {Ownable} from \\\"@openzeppelin/contracts/access/Ownable.sol\\\";\\nimport {\\n    ReentrancyGuard\\n} from \\\"@openzeppelin/contracts/utils/ReentrancyGuard.sol\\\";\\n\\nimport {AccessControl} from \\\"./AccessControl.sol\\\";\\nimport {INameIdentifier} from \\\"./INameIdentifier.sol\\\";\\nimport {IAssetAllocation} from \\\"./IAssetAllocation.sol\\\";\\nimport {IEmergencyExit} from \\\"./IEmergencyExit.sol\\\";\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/token/ERC20/IERC20.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity >=0.6.0 <0.8.0;\\n\\n/**\\n * @dev Interface of the ERC20 standard as defined in the EIP.\\n */\\ninterface IERC20 {\\n    /**\\n     * @dev Returns the amount of tokens in existence.\\n     */\\n    function totalSupply() external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the amount of tokens owned by `account`.\\n     */\\n    function balanceOf(address account) external view returns (uint256);\\n\\n    /**\\n     * @dev Moves `amount` tokens from the caller's account to `recipient`.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transfer(address recipient, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Returns the remaining number of tokens that `spender` will be\\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\\n     * zero by default.\\n     *\\n     * This value changes when {approve} or {transferFrom} are called.\\n     */\\n    function allowance(address owner, address spender) external view returns (uint256);\\n\\n    /**\\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\\n     * that someone may use both the old and the new allowance by unfortunate\\n     * transaction ordering. One possible solution to mitigate this race\\n     * condition is to first reduce the spender's allowance to 0 and set the\\n     * desired value afterwards:\\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address spender, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Moves `amount` tokens from `sender` to `recipient` using the\\n     * allowance mechanism. `amount` is then deducted from the caller's\\n     * allowance.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(address sender, address recipient, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\\n     * another (`to`).\\n     *\\n     * Note that `value` may be zero.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 value);\\n\\n    /**\\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\\n     * a call to {approve}. `value` is the new allowance.\\n     */\\n    event Approval(address indexed owner, address indexed spender, uint256 value);\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/token/ERC20/SafeERC20.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity >=0.6.0 <0.8.0;\\n\\nimport \\\"./IERC20.sol\\\";\\nimport \\\"../../math/SafeMath.sol\\\";\\nimport \\\"../../utils/Address.sol\\\";\\n\\n/**\\n * @title SafeERC20\\n * @dev Wrappers around ERC20 operations that throw on failure (when the token\\n * contract returns false). Tokens that return no value (and instead revert or\\n * throw on failure) are also supported, non-reverting calls are assumed to be\\n * successful.\\n * To use this library you can add a `using SafeERC20 for IERC20;` statement to your contract,\\n * which allows you to call the safe operations as `token.safeTransfer(...)`, etc.\\n */\\nlibrary SafeERC20 {\\n    using SafeMath for uint256;\\n    using Address for address;\\n\\n    function safeTransfer(IERC20 token, address to, uint256 value) internal {\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.transfer.selector, to, value));\\n    }\\n\\n    function safeTransferFrom(IERC20 token, address from, address to, uint256 value) internal {\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.transferFrom.selector, from, to, value));\\n    }\\n\\n    /**\\n     * @dev Deprecated. This function has issues similar to the ones found in\\n     * {IERC20-approve}, and its usage is discouraged.\\n     *\\n     * Whenever possible, use {safeIncreaseAllowance} and\\n     * {safeDecreaseAllowance} instead.\\n     */\\n    function safeApprove(IERC20 token, address spender, uint256 value) internal {\\n        // safeApprove should only be called when setting an initial allowance,\\n        // or when resetting it to zero. To increase and decrease it, use\\n        // 'safeIncreaseAllowance' and 'safeDecreaseAllowance'\\n        // solhint-disable-next-line max-line-length\\n        require((value == 0) || (token.allowance(address(this), spender) == 0),\\n            \\\"SafeERC20: approve from non-zero to non-zero allowance\\\"\\n        );\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, value));\\n    }\\n\\n    function safeIncreaseAllowance(IERC20 token, address spender, uint256 value) internal {\\n        uint256 newAllowance = token.allowance(address(this), spender).add(value);\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));\\n    }\\n\\n    function safeDecreaseAllowance(IERC20 token, address spender, uint256 value) internal {\\n        uint256 newAllowance = token.allowance(address(this), spender).sub(value, \\\"SafeERC20: decreased allowance below zero\\\");\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));\\n    }\\n\\n    /**\\n     * @dev Imitates a Solidity high-level call (i.e. a regular function call to a contract), relaxing the requirement\\n     * on the return value: the return value is optional (but if data is returned, it must not be false).\\n     * @param token The token targeted by the call.\\n     * @param data The call data (encoded using abi.encode or one of its variants).\\n     */\\n    function _callOptionalReturn(IERC20 token, bytes memory data) private {\\n        // We need to perform a low level call here, to bypass Solidity's return data size checking mechanism, since\\n        // we're implementing it ourselves. We use {Address.functionCall} to perform this call, which verifies that\\n        // the target address contains contract code and also asserts for success in the low-level call.\\n\\n        bytes memory returndata = address(token).functionCall(data, \\\"SafeERC20: low-level call failed\\\");\\n        if (returndata.length > 0) { // Return data is optional\\n            // solhint-disable-next-line max-line-length\\n            require(abi.decode(returndata, (bool)), \\\"SafeERC20: ERC20 operation did not succeed\\\");\\n        }\\n    }\\n}\\n\"\r\n    },\r\n    \"contracts/common/IDetailedERC20.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: BUSDL-1.1\\npragma solidity 0.6.11;\\n\\nimport {IERC20} from \\\"@openzeppelin/contracts/token/ERC20/IERC20.sol\\\";\\n\\ninterface IDetailedERC20 is IERC20 {\\n    function name() external view returns (string memory);\\n\\n    function symbol() external view returns (string memory);\\n\\n    function decimals() external view returns (uint8);\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/access/Ownable.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity >=0.6.0 <0.8.0;\\n\\nimport \\\"../utils/Context.sol\\\";\\n/**\\n * @dev Contract module which provides a basic access control mechanism, where\\n * there is an account (an owner) that can be granted exclusive access to\\n * specific functions.\\n *\\n * By default, the owner account will be the one that deploys the contract. This\\n * can later be changed with {transferOwnership}.\\n *\\n * This module is used through inheritance. It will make available the modifier\\n * `onlyOwner`, which can be applied to your functions to restrict their use to\\n * the owner.\\n */\\nabstract contract Ownable is Context {\\n    address private _owner;\\n\\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\\n\\n    /**\\n     * @dev Initializes the contract setting the deployer as the initial owner.\\n     */\\n    constructor () internal {\\n        address msgSender = _msgSender();\\n        _owner = msgSender;\\n        emit OwnershipTransferred(address(0), msgSender);\\n    }\\n\\n    /**\\n     * @dev Returns the address of the current owner.\\n     */\\n    function owner() public view virtual returns (address) {\\n        return _owner;\\n    }\\n\\n    /**\\n     * @dev Throws if called by any account other than the owner.\\n     */\\n    modifier onlyOwner() {\\n        require(owner() == _msgSender(), \\\"Ownable: caller is not the owner\\\");\\n        _;\\n    }\\n\\n    /**\\n     * @dev Leaves the contract without owner. It will not be possible to call\\n     * `onlyOwner` functions anymore. Can only be called by the current owner.\\n     *\\n     * NOTE: Renouncing ownership will leave the contract without an owner,\\n     * thereby removing any functionality that is only available to the owner.\\n     */\\n    function renounceOwnership() public virtual onlyOwner {\\n        emit OwnershipTransferred(_owner, address(0));\\n        _owner = address(0);\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Can only be called by the current owner.\\n     */\\n    function transferOwnership(address newOwner) public virtual onlyOwner {\\n        require(newOwner != address(0), \\\"Ownable: new owner is the zero address\\\");\\n        emit OwnershipTransferred(_owner, newOwner);\\n        _owner = newOwner;\\n    }\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/utils/ReentrancyGuard.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity >=0.6.0 <0.8.0;\\n\\n/**\\n * @dev Contract module that helps prevent reentrant calls to a function.\\n *\\n * Inheriting from `ReentrancyGuard` will make the {nonReentrant} modifier\\n * available, which can be applied to functions to make sure there are no nested\\n * (reentrant) calls to them.\\n *\\n * Note that because there is a single `nonReentrant` guard, functions marked as\\n * `nonReentrant` may not call one another. This can be worked around by making\\n * those functions `private`, and then adding `external` `nonReentrant` entry\\n * points to them.\\n *\\n * TIP: If you would like to learn more about reentrancy and alternative ways\\n * to protect against it, check out our blog post\\n * https://blog.openzeppelin.com/reentrancy-after-istanbul/[Reentrancy After Istanbul].\\n */\\nabstract contract ReentrancyGuard {\\n    // Booleans are more expensive than uint256 or any type that takes up a full\\n    // word because each write operation emits an extra SLOAD to first read the\\n    // slot's contents, replace the bits taken up by the boolean, and then write\\n    // back. This is the compiler's defense against contract upgrades and\\n    // pointer aliasing, and it cannot be disabled.\\n\\n    // The values being non-zero value makes deployment a bit more expensive,\\n    // but in exchange the refund on every call to nonReentrant will be lower in\\n    // amount. Since refunds are capped to a percentage of the total\\n    // transaction's gas, it is best to keep them low in cases like this one, to\\n    // increase the likelihood of the full refund coming into effect.\\n    uint256 private constant _NOT_ENTERED = 1;\\n    uint256 private constant _ENTERED = 2;\\n\\n    uint256 private _status;\\n\\n    constructor () internal {\\n        _status = _NOT_ENTERED;\\n    }\\n\\n    /**\\n     * @dev Prevents a contract from calling itself, directly or indirectly.\\n     * Calling a `nonReentrant` function from another `nonReentrant`\\n     * function is not supported. It is possible to prevent this from happening\\n     * by making the `nonReentrant` function external, and make it call a\\n     * `private` function that does the actual work.\\n     */\\n    modifier nonReentrant() {\\n        // On the first call to nonReentrant, _notEntered will be true\\n        require(_status != _ENTERED, \\\"ReentrancyGuard: reentrant call\\\");\\n\\n        // Any calls to nonReentrant after this point will fail\\n        _status = _ENTERED;\\n\\n        _;\\n\\n        // By storing the original value once again, a refund is triggered (see\\n        // https://eips.ethereum.org/EIPS/eip-2200)\\n        _status = _NOT_ENTERED;\\n    }\\n}\\n\"\r\n    },\r\n    \"contracts/common/INameIdentifier.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: BUSDL-1.1\\npragma solidity 0.6.11;\\n\\n/**\\n * @notice Used by the `NamedAddressSet` library to store sets of contracts\\n */\\ninterface INameIdentifier {\\n    /// @notice Should be implemented as a constant value\\n    // solhint-disable-next-line func-name-mixedcase\\n    function NAME() external view returns (string memory);\\n}\\n\"\r\n    },\r\n    \"contracts/common/IAssetAllocation.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: BUSDL-1.1\\npragma solidity 0.6.11;\\npragma experimental ABIEncoderV2;\\n\\nimport {INameIdentifier} from \\\"./INameIdentifier.sol\\\";\\n\\n/**\\n * @notice For use with the `TvlManager` to track the value locked in a protocol\\n */\\ninterface IAssetAllocation is INameIdentifier {\\n    struct TokenData {\\n        address token;\\n        string symbol;\\n        uint8 decimals;\\n    }\\n\\n    /**\\n     * @notice Get data for the underlying tokens stored in the protocol\\n     * @return The array of `TokenData`\\n     */\\n    function tokens() external view returns (TokenData[] memory);\\n\\n    /**\\n     * @notice Get the number of different tokens stored in the protocol\\n     * @return The number of tokens\\n     */\\n    function numberOfTokens() external view returns (uint256);\\n\\n    /**\\n     * @notice Get an account's balance for a token stored in the protocol\\n     * @dev The token index should be ordered the same as the `tokens()` array\\n     * @param account The account to get the balance for\\n     * @param tokenIndex The index of the token to get the balance for\\n     * @return The account's balance\\n     */\\n    function balanceOf(address account, uint8 tokenIndex)\\n        external\\n        view\\n        returns (uint256);\\n\\n    /**\\n     * @notice Get the symbol of a token stored in the protocol\\n     * @dev The token index should be ordered the same as the `tokens()` array\\n     * @param tokenIndex The index of the token\\n     * @return The symbol of the token\\n     */\\n    function symbolOf(uint8 tokenIndex) external view returns (string memory);\\n\\n    /**\\n     * @notice Get the decimals of a token stored in the protocol\\n     * @dev The token index should be ordered the same as the `tokens()` array\\n     * @param tokenIndex The index of the token\\n     * @return The decimals of the token\\n     */\\n    function decimalsOf(uint8 tokenIndex) external view returns (uint8);\\n}\\n\"\r\n    },\r\n    \"contracts/common/IEmergencyExit.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: BUSDL-1.1\\npragma solidity 0.6.11;\\n\\nimport {IERC20} from \\\"./Imports.sol\\\";\\n\\n/**\\n * @notice Used for contracts that need an emergency escape hatch\\n * @notice Should only be used in an emergency to keep funds safu\\n */\\ninterface IEmergencyExit {\\n    /**\\n     * @param emergencySafe The address the tokens were escaped to\\n     * @param token The token escaped\\n     * @param balance The amount of tokens escaped\\n     */\\n    event EmergencyExit(address emergencySafe, IERC20 token, uint256 balance);\\n\\n    /**\\n     * @notice Transfer all tokens to the emergency Safe\\n     * @dev Should only be callable by the emergency Safe\\n     * @dev Should only transfer tokens to the emergency Safe\\n     * @param token The token to transfer\\n     */\\n    function emergencyExit(address token) external;\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/math/SafeMath.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity >=0.6.0 <0.8.0;\\n\\n/**\\n * @dev Wrappers over Solidity's arithmetic operations with added overflow\\n * checks.\\n *\\n * Arithmetic operations in Solidity wrap on overflow. This can easily result\\n * in bugs, because programmers usually assume that an overflow raises an\\n * error, which is the standard behavior in high level programming languages.\\n * `SafeMath` restores this intuition by reverting the transaction when an\\n * operation overflows.\\n *\\n * Using this library instead of the unchecked operations eliminates an entire\\n * class of bugs, so it's recommended to use it always.\\n */\\nlibrary SafeMath {\\n    /**\\n     * @dev Returns the addition of two unsigned integers, with an overflow flag.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function tryAdd(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        uint256 c = a + b;\\n        if (c < a) return (false, 0);\\n        return (true, c);\\n    }\\n\\n    /**\\n     * @dev Returns the substraction of two unsigned integers, with an overflow flag.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function trySub(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        if (b > a) return (false, 0);\\n        return (true, a - b);\\n    }\\n\\n    /**\\n     * @dev Returns the multiplication of two unsigned integers, with an overflow flag.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function tryMul(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        // Gas optimization: this is cheaper than requiring 'a' not being zero, but the\\n        // benefit is lost if 'b' is also tested.\\n        // See: https://github.com/OpenZeppelin/openzeppelin-contracts/pull/522\\n        if (a == 0) return (true, 0);\\n        uint256 c = a * b;\\n        if (c / a != b) return (false, 0);\\n        return (true, c);\\n    }\\n\\n    /**\\n     * @dev Returns the division of two unsigned integers, with a division by zero flag.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function tryDiv(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        if (b == 0) return (false, 0);\\n        return (true, a / b);\\n    }\\n\\n    /**\\n     * @dev Returns the remainder of dividing two unsigned integers, with a division by zero flag.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function tryMod(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        if (b == 0) return (false, 0);\\n        return (true, a % b);\\n    }\\n\\n    /**\\n     * @dev Returns the addition of two unsigned integers, reverting on\\n     * overflow.\\n     *\\n     * Counterpart to Solidity's `+` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Addition cannot overflow.\\n     */\\n    function add(uint256 a, uint256 b) internal pure returns (uint256) {\\n        uint256 c = a + b;\\n        require(c >= a, \\\"SafeMath: addition overflow\\\");\\n        return c;\\n    }\\n\\n    /**\\n     * @dev Returns the subtraction of two unsigned integers, reverting on\\n     * overflow (when the result is negative).\\n     *\\n     * Counterpart to Solidity's `-` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Subtraction cannot overflow.\\n     */\\n    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\\n        require(b <= a, \\\"SafeMath: subtraction overflow\\\");\\n        return a - b;\\n    }\\n\\n    /**\\n     * @dev Returns the multiplication of two unsigned integers, reverting on\\n     * overflow.\\n     *\\n     * Counterpart to Solidity's `*` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Multiplication cannot overflow.\\n     */\\n    function mul(uint256 a, uint256 b) internal pure returns (uint256) {\\n        if (a == 0) return 0;\\n        uint256 c = a * b;\\n        require(c / a == b, \\\"SafeMath: multiplication overflow\\\");\\n        return c;\\n    }\\n\\n    /**\\n     * @dev Returns the integer division of two unsigned integers, reverting on\\n     * division by zero. The result is rounded towards zero.\\n     *\\n     * Counterpart to Solidity's `/` operator. Note: this function uses a\\n     * `revert` opcode (which leaves remaining gas untouched) while Solidity\\n     * uses an invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Requirements:\\n     *\\n     * - The divisor cannot be zero.\\n     */\\n    function div(uint256 a, uint256 b) internal pure returns (uint256) {\\n        require(b > 0, \\\"SafeMath: division by zero\\\");\\n        return a / b;\\n    }\\n\\n    /**\\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\\n     * reverting when dividing by zero.\\n     *\\n     * Counterpart to Solidity's `%` operator. This function uses a `revert`\\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\\n     * invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Requirements:\\n     *\\n     * - The divisor cannot be zero.\\n     */\\n    function mod(uint256 a, uint256 b) internal pure returns (uint256) {\\n        require(b > 0, \\\"SafeMath: modulo by zero\\\");\\n        return a % b;\\n    }\\n\\n    /**\\n     * @dev Returns the subtraction of two unsigned integers, reverting with custom message on\\n     * overflow (when the result is negative).\\n     *\\n     * CAUTION: This function is deprecated because it requires allocating memory for the error\\n     * message unnecessarily. For custom revert reasons use {trySub}.\\n     *\\n     * Counterpart to Solidity's `-` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Subtraction cannot overflow.\\n     */\\n    function sub(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\\n        require(b <= a, errorMessage);\\n        return a - b;\\n    }\\n\\n    /**\\n     * @dev Returns the integer division of two unsigned integers, reverting with custom message on\\n     * division by zero. The result is rounded towards zero.\\n     *\\n     * CAUTION: This function is deprecated because it requires allocating memory for the error\\n     * message unnecessarily. For custom revert reasons use {tryDiv}.\\n     *\\n     * Counterpart to Solidity's `/` operator. Note: this function uses a\\n     * `revert` opcode (which leaves remaining gas untouched) while Solidity\\n     * uses an invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Requirements:\\n     *\\n     * - The divisor cannot be zero.\\n     */\\n    function div(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\\n        require(b > 0, errorMessage);\\n        return a / b;\\n    }\\n\\n    /**\\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\\n     * reverting with custom message when dividing by zero.\\n     *\\n     * CAUTION: This function is deprecated because it requires allocating memory for the error\\n     * message unnecessarily. For custom revert reasons use {tryMod}.\\n     *\\n     * Counterpart to Solidity's `%` operator. This function uses a `revert`\\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\\n     * invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Requirements:\\n     *\\n     * - The divisor cannot be zero.\\n     */\\n    function mod(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\\n        require(b > 0, errorMessage);\\n        return a % b;\\n    }\\n}\\n\"\r\n    },\r\n    \"contracts/tvl/TestTvlManager.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: BUSDL-1.1\\npragma solidity 0.6.11;\\npragma experimental ABIEncoderV2;\\n\\nimport {IAssetAllocation} from \\\"contracts/common/Imports.sol\\\";\\nimport {TvlManager} from \\\"./TvlManager.sol\\\";\\n\\ncontract TestTvlManager is TvlManager {\\n    constructor(address addressRegistry_) public TvlManager(addressRegistry_) {} // solhint-disable-line no-empty-blocks\\n\\n    function testEncodeAssetAllocationId(\\n        address assetAllocation,\\n        uint8 tokenIndex\\n    ) external pure returns (bytes32) {\\n        return _encodeAssetAllocationId(assetAllocation, tokenIndex);\\n    }\\n\\n    function testDecodeAssetAllocationId(bytes32 id)\\n        external\\n        pure\\n        returns (address, uint8)\\n    {\\n        return _decodeAssetAllocationId(id);\\n    }\\n\\n    function testGetAssetAllocationIdCount(\\n        IAssetAllocation[] memory allocations\\n    ) external view returns (uint256) {\\n        return _getAssetAllocationIdCount(allocations);\\n    }\\n\\n    function testGetAssetAllocationIds(IAssetAllocation[] memory allocations)\\n        external\\n        view\\n        returns (bytes32[] memory)\\n    {\\n        return _getAssetAllocationsIds(allocations);\\n    }\\n\\n    function testGetAssetAllocations()\\n        external\\n        view\\n        returns (IAssetAllocation[] memory)\\n    {\\n        return _getAssetAllocations();\\n    }\\n}\\n\"\r\n    },\r\n    \"contracts/tvl/TvlManager.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: BUSDL-1.1\\npragma solidity 0.6.11;\\npragma experimental ABIEncoderV2;\\n\\nimport {\\n    IAssetAllocation,\\n    ReentrancyGuard,\\n    AccessControl\\n} from \\\"contracts/common/Imports.sol\\\";\\nimport {NamedAddressSet} from \\\"contracts/libraries/Imports.sol\\\";\\nimport {IAddressRegistryV2} from \\\"contracts/registry/Imports.sol\\\";\\nimport {ILockingOracle} from \\\"contracts/oracle/Imports.sol\\\";\\n\\nimport {IChainlinkRegistry} from \\\"./IChainlinkRegistry.sol\\\";\\nimport {IAssetAllocationRegistry} from \\\"./IAssetAllocationRegistry.sol\\\";\\nimport {Erc20AllocationConstants} from \\\"./Erc20Allocation.sol\\\";\\n\\n/**\\n * @notice Assets can be deployed in a variety of ways within the DeFi\\n * ecosystem: accounts, pools, vaults, gauges, etc. This contract tracks\\n * deployed capital with asset allocations that allow position balances to\\n * be priced and aggregated by Chainlink into the deployed TVL.\\n * @notice When other contracts perform operations that can change how the TVL\\n * must be calculated, such as swaping, staking, or claiming rewards, they\\n * check the `TvlManager` to ensure the appropriate asset allocations are\\n * registered.\\n * @dev It is imperative that the registered asset allocations are up-to-date.\\n * Any assets in the system that have been deployed but are not registered\\n * could lead to significant misreporting of the TVL.\\n */\\ncontract TvlManager is\\n    AccessControl,\\n    ReentrancyGuard,\\n    IChainlinkRegistry,\\n    IAssetAllocationRegistry,\\n    Erc20AllocationConstants\\n{\\n    using NamedAddressSet for NamedAddressSet.AssetAllocationSet;\\n\\n    IAddressRegistryV2 public addressRegistry;\\n\\n    NamedAddressSet.AssetAllocationSet private _assetAllocations;\\n\\n    /** @notice Log when the address registry is changed */\\n    event AddressRegistryChanged(address);\\n\\n    /** @notice Log when the ERC20 asset allocation is changed */\\n    event Erc20AllocationChanged(address);\\n\\n    constructor(address addressRegistry_) public {\\n        _setAddressRegistry(addressRegistry_);\\n        _setupRole(DEFAULT_ADMIN_ROLE, addressRegistry.emergencySafeAddress());\\n        _setupRole(EMERGENCY_ROLE, addressRegistry.emergencySafeAddress());\\n        _setupRole(ADMIN_ROLE, addressRegistry.adminSafeAddress());\\n    }\\n\\n    /**\\n     * @notice Set the new address registry\\n     * @param addressRegistry_ The new address registry\\n     */\\n    function emergencySetAddressRegistry(address addressRegistry_)\\n        external\\n        nonReentrant\\n        onlyEmergencyRole\\n    {\\n        _setAddressRegistry(addressRegistry_);\\n    }\\n\\n    function registerAssetAllocation(IAssetAllocation assetAllocation)\\n        external\\n        override\\n        nonReentrant\\n        onlyAdminRole\\n    {\\n        _assetAllocations.add(assetAllocation);\\n\\n        _lockOracleAdapter();\\n\\n        emit AssetAllocationRegistered(assetAllocation);\\n    }\\n\\n    function removeAssetAllocation(string memory name)\\n        external\\n        override\\n        nonReentrant\\n        onlyAdminRole\\n    {\\n        require(\\n            keccak256(abi.encodePacked(name)) !=\\n                keccak256(abi.encodePacked(Erc20AllocationConstants.NAME)),\\n            \\\"CANNOT_REMOVE_ALLOCATION\\\"\\n        );\\n\\n        _assetAllocations.remove(name);\\n\\n        _lockOracleAdapter();\\n\\n        emit AssetAllocationRemoved(name);\\n    }\\n\\n    function getAssetAllocation(string calldata name)\\n        external\\n        view\\n        override\\n        returns (IAssetAllocation)\\n    {\\n        return _assetAllocations.get(name);\\n    }\\n\\n    /**\\n     * @dev The list contains no duplicate identifiers\\n     * @dev IDs are not constant, updates to an asset allocation change the ID\\n     */\\n    function getAssetAllocationIds()\\n        external\\n        view\\n        override\\n        returns (bytes32[] memory)\\n    {\\n        IAssetAllocation[] memory allocations = _getAssetAllocations();\\n        return _getAssetAllocationsIds(allocations);\\n    }\\n\\n    function isAssetAllocationRegistered(string[] calldata allocationNames)\\n        external\\n        view\\n        override\\n        returns (bool)\\n    {\\n        uint256 length = allocationNames.length;\\n        for (uint256 i = 0; i < length; i++) {\\n            IAssetAllocation allocation =\\n                _assetAllocations.get(allocationNames[i]);\\n            if (address(allocation) == address(0)) {\\n                return false;\\n            }\\n        }\\n\\n        return true;\\n    }\\n\\n    function balanceOf(bytes32 allocationId)\\n        external\\n        view\\n        override\\n        returns (uint256)\\n    {\\n        (IAssetAllocation assetAllocation, uint8 tokenIndex) =\\n            _getAssetAllocation(allocationId);\\n        return\\n            assetAllocation.balanceOf(\\n                addressRegistry.lpAccountAddress(),\\n                tokenIndex\\n            );\\n    }\\n\\n    function symbolOf(bytes32 allocationId)\\n        external\\n        view\\n        override\\n        returns (string memory)\\n    {\\n        (IAssetAllocation assetAllocation, uint8 tokenIndex) =\\n            _getAssetAllocation(allocationId);\\n        return assetAllocation.symbolOf(tokenIndex);\\n    }\\n\\n    function decimalsOf(bytes32 allocationId)\\n        external\\n        view\\n        override\\n        returns (uint256)\\n    {\\n        (IAssetAllocation assetAllocation, uint8 tokenIndex) =\\n            _getAssetAllocation(allocationId);\\n        return assetAllocation.decimalsOf(tokenIndex);\\n    }\\n\\n    function _setAddressRegistry(address addressRegistry_) internal {\\n        require(addressRegistry_.isContract(), \\\"INVALID_ADDRESS\\\");\\n        addressRegistry = IAddressRegistryV2(addressRegistry_);\\n        emit AddressRegistryChanged(addressRegistry_);\\n    }\\n\\n    /**\\n     * @notice Lock the `OracleAdapter` for the default period of time\\n     * @dev Locking protects against front-running while Chainlink updates\\n     */\\n    function _lockOracleAdapter() internal {\\n        ILockingOracle oracleAdapter =\\n            ILockingOracle(addressRegistry.oracleAdapterAddress());\\n        oracleAdapter.lock();\\n    }\\n\\n    /**\\n     * @notice Get all IDs from an array of asset allocations\\n     * @notice Each ID is a unique asset allocation and token index pair\\n     * @dev Should contain no duplicate IDs\\n     * @return list of all IDs\\n     */\\n    function _getAssetAllocationsIds(IAssetAllocation[] memory allocations)\\n        internal\\n        view\\n        returns (bytes32[] memory)\\n    {\\n        uint256 idsLength = _getAssetAllocationIdCount(allocations);\\n        bytes32[] memory assetAllocationIds = new bytes32[](idsLength);\\n\\n        uint256 k = 0;\\n        for (uint256 i = 0; i < allocations.length; i++) {\\n            uint256 tokensLength = allocations[i].numberOfTokens();\\n\\n            require(tokensLength < type(uint8).max, \\\"TOO_MANY_TOKENS\\\");\\n\\n            for (uint256 j = 0; j < tokensLength; j++) {\\n                assetAllocationIds[k] = _encodeAssetAllocationId(\\n                    address(allocations[i]),\\n                    uint8(j)\\n                );\\n                k++;\\n            }\\n        }\\n\\n        return assetAllocationIds;\\n    }\\n\\n    /**\\n     * @notice Get an asset allocation and token index pair from an ID\\n     * @notice The token index references a token in the asset allocation\\n     * @param id The ID\\n     * @return The asset allocation and token index pair\\n     */\\n    function _getAssetAllocation(bytes32 id)\\n        internal\\n        view\\n        returns (IAssetAllocation, uint8)\\n    {\\n        (address assetAllocationAddress, uint8 tokenIndex) =\\n            _decodeAssetAllocationId(id);\\n\\n        IAssetAllocation assetAllocation =\\n            IAssetAllocation(assetAllocationAddress);\\n\\n        require(\\n            _assetAllocations.contains(assetAllocation),\\n            \\\"INVALID_ASSET_ALLOCATION\\\"\\n        );\\n        require(\\n            assetAllocation.numberOfTokens() > tokenIndex,\\n            \\\"INVALID_TOKEN_INDEX\\\"\\n        );\\n\\n        return (assetAllocation, tokenIndex);\\n    }\\n\\n    /**\\n     * @notice Get the total number of IDs for an array of allocations\\n     * @notice Used by `_getAssetAllocationsIds`\\n     * @notice Needed to initialize an ID array with the correct length\\n     * @param allocations The array of asset allocations\\n     * @return The number of IDs\\n     */\\n    function _getAssetAllocationIdCount(IAssetAllocation[] memory allocations)\\n        internal\\n        view\\n        returns (uint256)\\n    {\\n        uint256 idsLength = 0;\\n        for (uint256 i = 0; i < allocations.length; i++) {\\n            idsLength += allocations[i].numberOfTokens();\\n        }\\n\\n        return idsLength;\\n    }\\n\\n    /**\\n     * @notice Get an array of registered asset allocations\\n     * @dev Needed to convert from the set data structure to an array\\n     * @return The array of asset allocations\\n     */\\n    function _getAssetAllocations()\\n        internal\\n        view\\n        returns (IAssetAllocation[] memory)\\n    {\\n        uint256 numAllocations = _assetAllocations.length();\\n        IAssetAllocation[] memory allocations =\\n            new IAssetAllocation[](numAllocations);\\n\\n        for (uint256 i = 0; i < numAllocations; i++) {\\n            allocations[i] = _assetAllocations.at(i);\\n        }\\n\\n        return allocations;\\n    }\\n\\n    /**\\n     * @notice Create an ID from an asset allocation and token index pair\\n     * @param assetAllocation The asset allocation\\n     * @param tokenIndex The token index\\n     * @return The ID\\n     */\\n    function _encodeAssetAllocationId(address assetAllocation, uint8 tokenIndex)\\n        internal\\n        pure\\n        returns (bytes32)\\n    {\\n        bytes memory idPacked = abi.encodePacked(assetAllocation, tokenIndex);\\n\\n        bytes32 id;\\n\\n        assembly {\\n            id := mload(add(idPacked, 32))\\n        }\\n\\n        return id;\\n    }\\n\\n    /**\\n     * @notice Get the asset allocation and token index for a given ID\\n     * @param id The ID\\n     * @return The asset allocation address\\n     * @return The token index\\n     */\\n    function _decodeAssetAllocationId(bytes32 id)\\n        internal\\n        pure\\n        returns (address, uint8)\\n    {\\n        uint256 id_ = uint256(id);\\n\\n        address assetAllocation = address(bytes20(uint160(id_ >> 96)));\\n        uint8 tokenIndex = uint8(id_ >> 88);\\n\\n        return (assetAllocation, tokenIndex);\\n    }\\n}\\n\"\r\n    },\r\n    \"contracts/libraries/Imports.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: BUSDL-1.1\\npragma solidity 0.6.11;\\n\\nimport {Address} from \\\"@openzeppelin/contracts/utils/Address.sol\\\";\\nimport {SafeMath} from \\\"@openzeppelin/contracts/math/SafeMath.sol\\\";\\nimport {SignedSafeMath} from \\\"@openzeppelin/contracts/math/SignedSafeMath.sol\\\";\\nimport {SafeERC20} from \\\"@openzeppelin/contracts/token/ERC20/SafeERC20.sol\\\";\\nimport {EnumerableSet} from \\\"@openzeppelin/contracts/utils/EnumerableSet.sol\\\";\\n\\nimport {NamedAddressSet} from \\\"./NamedAddressSet.sol\\\";\\n\"\r\n    },\r\n    \"contracts/registry/Imports.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: BUSDL-1.1\\npragma solidity 0.6.11;\\n\\nimport {IAddressRegistryV2} from \\\"./IAddressRegistryV2.sol\\\";\\n\"\r\n    },\r\n    \"contracts/oracle/Imports.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: BUSDL-1.1\\npragma solidity 0.6.11;\\n\\nimport {AggregatorV3Interface, FluxAggregator} from \\\"./FluxAggregator.sol\\\";\\nimport {IOracleAdapter} from \\\"./IOracleAdapter.sol\\\";\\nimport {IOverrideOracle} from \\\"./IOverrideOracle.sol\\\";\\nimport {ILockingOracle} from \\\"./ILockingOracle.sol\\\";\\n\"\r\n    },\r\n    \"contracts/tvl/IChainlinkRegistry.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: BUSDL-1.1\\npragma solidity 0.6.11;\\n\\n/**\\n * @notice Interface used by Chainlink to aggregate allocations and compute TVL\\n */\\ninterface IChainlinkRegistry {\\n    /**\\n     * @notice Get all IDs from registered asset allocations\\n     * @notice Each ID is a unique asset allocation and token index pair\\n     * @dev Should contain no duplicate IDs\\n     * @return list of all IDs\\n     */\\n    function getAssetAllocationIds() external view returns (bytes32[] memory);\\n\\n    /**\\n     * @notice Get the LP Account's balance for an asset allocation ID\\n     * @param allocationId The ID to fetch the balance for\\n     * @return The balance for the LP Account\\n     */\\n    function balanceOf(bytes32 allocationId) external view returns (uint256);\\n\\n    /**\\n     * @notice Get the symbol for an allocation ID's underlying token\\n     * @param allocationId The ID to fetch the symbol for\\n     * @return The underlying token symbol\\n     */\\n    function symbolOf(bytes32 allocationId)\\n        external\\n        view\\n        returns (string memory);\\n\\n    /**\\n     * @notice Get the decimals for an allocation ID's underlying token\\n     * @param allocationId The ID to fetch the decimals for\\n     * @return The underlying token decimals\\n     */\\n    function decimalsOf(bytes32 allocationId) external view returns (uint256);\\n}\\n\"\r\n    },\r\n    \"contracts/tvl/IAssetAllocationRegistry.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: BUSDL-1.1\\npragma solidity 0.6.11;\\npragma experimental ABIEncoderV2;\\n\\nimport {IAssetAllocation} from \\\"contracts/common/Imports.sol\\\";\\n\\n/**\\n * @notice For managing a collection of `IAssetAllocation` contracts\\n */\\ninterface IAssetAllocationRegistry {\\n    /** @notice Log when an asset allocation is registered */\\n    event AssetAllocationRegistered(IAssetAllocation assetAllocation);\\n\\n    /** @notice Log when an asset allocation is removed */\\n    event AssetAllocationRemoved(string name);\\n\\n    /**\\n     * @notice Add a new asset allocation to the registry\\n     * @dev Should not allow duplicate asset allocations\\n     * @param assetAllocation The new asset allocation\\n     */\\n    function registerAssetAllocation(IAssetAllocation assetAllocation) external;\\n\\n    /**\\n     * @notice Remove an asset allocation from the registry\\n     * @param name The name of the asset allocation (see `INameIdentifier`)\\n     */\\n    function removeAssetAllocation(string memory name) external;\\n\\n    /**\\n     * @notice Check if multiple asset allocations are ALL registered\\n     * @param allocationNames An array of asset allocation names\\n     * @return `true` if every allocation is registered, otherwise `false`\\n     */\\n    function isAssetAllocationRegistered(string[] calldata allocationNames)\\n        external\\n        view\\n        returns (bool);\\n\\n    /**\\n     * @notice Get the registered asset allocation with a given name\\n     * @param name The asset allocation name\\n     * @return The asset allocation\\n     */\\n    function getAssetAllocation(string calldata name)\\n        external\\n        view\\n        returns (IAssetAllocation);\\n}\\n\"\r\n    },\r\n    \"contracts/tvl/Erc20Allocation.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: BUSDL-1.1\\npragma solidity 0.6.11;\\npragma experimental ABIEncoderV2;\\n\\nimport {\\n    IERC20,\\n    IDetailedERC20,\\n    AccessControl,\\n    INameIdentifier,\\n    ReentrancyGuard\\n} from \\\"contracts/common/Imports.sol\\\";\\nimport {Address, EnumerableSet} from \\\"contracts/libraries/Imports.sol\\\";\\nimport {IAddressRegistryV2} from \\\"contracts/registry/Imports.sol\\\";\\n\\nimport {IErc20Allocation} from \\\"./IErc20Allocation.sol\\\";\\nimport {AssetAllocationBase} from \\\"./AssetAllocationBase.sol\\\";\\n\\nabstract contract Erc20AllocationConstants is INameIdentifier {\\n    string public constant override NAME = \\\"erc20Allocation\\\";\\n}\\n\\ncontract Erc20Allocation is\\n    IErc20Allocation,\\n    AssetAllocationBase,\\n    Erc20AllocationConstants,\\n    AccessControl,\\n    ReentrancyGuard\\n{\\n    using Address for address;\\n    using EnumerableSet for EnumerableSet.AddressSet;\\n\\n    EnumerableSet.AddressSet private _tokenAddresses;\\n    mapping(address => TokenData) private _tokenToData;\\n\\n    constructor(address addressRegistry_) public {\\n        require(addressRegistry_.isContract(), \\\"INVALID_ADDRESS_REGISTRY\\\");\\n        IAddressRegistryV2 addressRegistry =\\n            IAddressRegistryV2(addressRegistry_);\\n        _setupRole(DEFAULT_ADMIN_ROLE, addressRegistry.emergencySafeAddress());\\n        _setupRole(CONTRACT_ROLE, addressRegistry.mAptAddress());\\n        _setupRole(ADMIN_ROLE, addressRegistry.adminSafeAddress());\\n    }\\n\\n    function registerErc20Token(IDetailedERC20 token)\\n        external\\n        override\\n        nonReentrant\\n        onlyAdminOrContractRole\\n    {\\n        string memory symbol = token.symbol();\\n        uint8 decimals = token.decimals();\\n        _registerErc20Token(token, symbol, decimals);\\n    }\\n\\n    function registerErc20Token(IDetailedERC20 token, string calldata symbol)\\n        external\\n        override\\n        nonReentrant\\n        onlyAdminRole\\n    {\\n        uint8 decimals = token.decimals();\\n        _registerErc20Token(token, symbol, decimals);\\n    }\\n\\n    function registerErc20Token(\\n        IERC20 token,\\n        string calldata symbol,\\n        uint8 decimals\\n    ) external override nonReentrant onlyAdminRole {\\n        _registerErc20Token(token, symbol, decimals);\\n    }\\n\\n    function removeErc20Token(IERC20 token)\\n        external\\n        override\\n        nonReentrant\\n        onlyAdminRole\\n    {\\n        _tokenAddresses.remove(address(token));\\n        delete _tokenToData[address(token)];\\n\\n        emit Erc20TokenRemoved(token);\\n    }\\n\\n    function isErc20TokenRegistered(IERC20 token)\\n        external\\n        view\\n        override\\n        returns (bool)\\n    {\\n        return _tokenAddresses.contains(address(token));\\n    }\\n\\n    function isErc20TokenRegistered(IERC20[] calldata tokens)\\n        external\\n        view\\n        override\\n        returns (bool)\\n    {\\n        uint256 length = tokens.length;\\n        for (uint256 i = 0; i < length; i++) {\\n            if (!_tokenAddresses.contains(address(tokens[i]))) {\\n                return false;\\n            }\\n        }\\n\\n        return true;\\n    }\\n\\n    function balanceOf(address account, uint8 tokenIndex)\\n        external\\n        view\\n        override\\n        returns (uint256)\\n    {\\n        address token = addressOf(tokenIndex);\\n        return IERC20(token).balanceOf(account);\\n    }\\n\\n    function tokens() public view override returns (TokenData[] memory) {\\n        TokenData[] memory _tokens = new TokenData[](_tokenAddresses.length());\\n        for (uint256 i = 0; i < _tokens.length; i++) {\\n            address tokenAddress = _tokenAddresses.at(i);\\n            _tokens[i] = _tokenToData[tokenAddress];\\n        }\\n        return _tokens;\\n    }\\n\\n    function _registerErc20Token(\\n        IERC20 token,\\n        string memory symbol,\\n        uint8 decimals\\n    ) internal {\\n        require(address(token).isContract(), \\\"INVALID_ADDRESS\\\");\\n        require(bytes(symbol).length != 0, \\\"INVALID_SYMBOL\\\");\\n        _tokenAddresses.add(address(token));\\n        _tokenToData[address(token)] = TokenData(\\n            address(token),\\n            symbol,\\n            decimals\\n        );\\n\\n        emit Erc20TokenRegistered(token, symbol, decimals);\\n    }\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/math/SignedSafeMath.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity >=0.6.0 <0.8.0;\\n\\n/**\\n * @title SignedSafeMath\\n * @dev Signed math operations with safety checks that revert on error.\\n */\\nlibrary SignedSafeMath {\\n    int256 constant private _INT256_MIN = -2**255;\\n\\n    /**\\n     * @dev Returns the multiplication of two signed integers, reverting on\\n     * overflow.\\n     *\\n     * Counterpart to Solidity's `*` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Multiplication cannot overflow.\\n     */\\n    function mul(int256 a, int256 b) internal pure returns (int256) {\\n        // Gas optimization: this is cheaper than requiring 'a' not being zero, but the\\n        // benefit is lost if 'b' is also tested.\\n        // See: https://github.com/OpenZeppelin/openzeppelin-contracts/pull/522\\n        if (a == 0) {\\n            return 0;\\n        }\\n\\n        require(!(a == -1 && b == _INT256_MIN), \\\"SignedSafeMath: multiplication overflow\\\");\\n\\n        int256 c = a * b;\\n        require(c / a == b, \\\"SignedSafeMath: multiplication overflow\\\");\\n\\n        return c;\\n    }\\n\\n    /**\\n     * @dev Returns the integer division of two signed integers. Reverts on\\n     * division by zero. The result is rounded towards zero.\\n     *\\n     * Counterpart to Solidity's `/` operator. Note: this function uses a\\n     * `revert` opcode (which leaves remaining gas untouched) while Solidity\\n     * uses an invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Requirements:\\n     *\\n     * - The divisor cannot be zero.\\n     */\\n    function div(int256 a, int256 b) internal pure returns (int256) {\\n        require(b != 0, \\\"SignedSafeMath: division by zero\\\");\\n        require(!(b == -1 && a == _INT256_MIN), \\\"SignedSafeMath: division overflow\\\");\\n\\n        int256 c = a / b;\\n\\n        return c;\\n    }\\n\\n    /**\\n     * @dev Returns the subtraction of two signed integers, reverting on\\n     * overflow.\\n     *\\n     * Counterpart to Solidity's `-` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Subtraction cannot overflow.\\n     */\\n    function sub(int256 a, int256 b) internal pure returns (int256) {\\n        int256 c = a - b;\\n        require((b >= 0 && c <= a) || (b < 0 && c > a), \\\"SignedSafeMath: subtraction overflow\\\");\\n\\n        return c;\\n    }\\n\\n    /**\\n     * @dev Returns the addition of two signed integers, reverting on\\n     * overflow.\\n     *\\n     * Counterpart to Solidity's `+` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Addition cannot overflow.\\n     */\\n    function add(int256 a, int256 b) internal pure returns (int256) {\\n        int256 c = a + b;\\n        require((b >= 0 && c >= a) || (b < 0 && c < a), \\\"SignedSafeMath: addition overflow\\\");\\n\\n        return c;\\n    }\\n}\\n\"\r\n    },\r\n    \"contracts/libraries/NamedAddressSet.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: BUSDL-1.1\\npragma solidity 0.6.11;\\n\\nimport {Address} from \\\"@openzeppelin/contracts/utils/Address.sol\\\";\\nimport {EnumerableSet} from \\\"@openzeppelin/contracts/utils/EnumerableSet.sol\\\";\\n\\nimport {IAssetAllocation, INameIdentifier} from \\\"contracts/common/Imports.sol\\\";\\nimport {IZap, ISwap} from \\\"contracts/lpaccount/Imports.sol\\\";\\n\\n/**\\n * @notice Stores a set of addresses that can be looked up by name\\n * @notice Addresses can be added or removed dynamically\\n * @notice Useful for keeping track of unique deployed contracts\\n * @dev Each address must be a contract with a `NAME` constant for lookup\\n */\\nlibrary NamedAddressSet {\\n    using EnumerableSet for EnumerableSet.AddressSet;\\n\\n    struct Set {\\n        EnumerableSet.AddressSet _namedAddresses;\\n        mapping(string => INameIdentifier) _nameLookup;\\n    }\\n\\n    struct AssetAllocationSet {\\n        Set _inner;\\n    }\\n\\n    struct ZapSet {\\n        Set _inner;\\n    }\\n\\n    struct SwapSet {\\n        Set _inner;\\n    }\\n\\n    function _add(Set storage set, INameIdentifier namedAddress) private {\\n        require(Address.isContract(address(namedAddress)), \\\"INVALID_ADDRESS\\\");\\n        require(\\n            !set._namedAddresses.contains(address(namedAddress)),\\n            \\\"DUPLICATE_ADDRESS\\\"\\n        );\\n\\n        string memory name = namedAddress.NAME();\\n        require(bytes(name).length != 0, \\\"INVALID_NAME\\\");\\n        require(address(set._nameLookup[name]) == address(0), \\\"DUPLICATE_NAME\\\");\\n\\n        set._namedAddresses.add(address(namedAddress));\\n        set._nameLookup[name] = namedAddress;\\n    }\\n\\n    function _remove(Set storage set, string memory name) private {\\n        address namedAddress = address(set._nameLookup[name]);\\n        require(namedAddress != address(0), \\\"INVALID_NAME\\\");\\n\\n        set._namedAddresses.remove(namedAddress);\\n        delete set._nameLookup[name];\\n    }\\n\\n    function _contains(Set storage set, INameIdentifier namedAddress)\\n        private\\n        view\\n        returns (bool)\\n    {\\n        return set._namedAddresses.contains(address(namedAddress));\\n    }\\n\\n    function _length(Set storage set) private view returns (uint256) {\\n        return set._namedAddresses.length();\\n    }\\n\\n    function _at(Set storage set, uint256 index)\\n        private\\n        view\\n        returns (INameIdentifier)\\n    {\\n        return INameIdentifier(set._namedAddresses.at(index));\\n    }\\n\\n    function _get(Set storage set, string memory name)\\n        private\\n        view\\n        returns (INameIdentifier)\\n    {\\n        return set._nameLookup[name];\\n    }\\n\\n    function _names(Set storage set) private view returns (string[] memory) {\\n        uint256 length_ = set._namedAddresses.length();\\n        string[] memory names_ = new string[](length_);\\n\\n        for (uint256 i = 0; i < length_; i++) {\\n            INameIdentifier namedAddress =\\n                INameIdentifier(set._namedAddresses.at(i));\\n            names_[i] = namedAddress.NAME();\\n        }\\n\\n        return names_;\\n    }\\n\\n    function add(\\n        AssetAllocationSet storage set,\\n        IAssetAllocation assetAllocation\\n    ) internal {\\n        _add(set._inner, assetAllocation);\\n    }\\n\\n    function remove(AssetAllocationSet storage set, string memory name)\\n        internal\\n    {\\n        _remove(set._inner, name);\\n    }\\n\\n    function contains(\\n        AssetAllocationSet storage set,\\n        IAssetAllocation assetAllocation\\n    ) internal view returns (bool) {\\n        return _contains(set._inner, assetAllocation);\\n    }\\n\\n    function length(AssetAllocationSet storage set)\\n        internal\\n        view\\n        returns (uint256)\\n    {\\n        return _length(set._inner);\\n    }\\n\\n    function at(AssetAllocationSet storage set, uint256 index)\\n        internal\\n        view\\n        returns (IAssetAllocation)\\n    {\\n        return IAssetAllocation(address(_at(set._inner, index)));\\n    }\\n\\n    function get(AssetAllocationSet storage set, string memory name)\\n        internal\\n        view\\n        returns (IAssetAllocation)\\n    {\\n        return IAssetAllocation(address(_get(set._inner, name)));\\n    }\\n\\n    function names(AssetAllocationSet storage set)\\n        internal\\n        view\\n        returns (string[] memory)\\n    {\\n        return _names(set._inner);\\n    }\\n\\n    function add(ZapSet storage set, IZap zap) internal {\\n        _add(set._inner, zap);\\n    }\\n\\n    function remove(ZapSet storage set, string memory name) internal {\\n        _remove(set._inner, name);\\n    }\\n\\n    function contains(ZapSet storage set, IZap zap)\\n        internal\\n        view\\n        returns (bool)\\n    {\\n        return _contains(set._inner, zap);\\n    }\\n\\n    function length(ZapSet storage set) internal view returns (uint256) {\\n        return _length(set._inner);\\n    }\\n\\n    function at(ZapSet storage set, uint256 index)\\n        internal\\n        view\\n        returns (IZap)\\n    {\\n        return IZap(address(_at(set._inner, index)));\\n    }\\n\\n    function get(ZapSet storage set, string memory name)\\n        internal\\n        view\\n        returns (IZap)\\n    {\\n        return IZap(address(_get(set._inner, name)));\\n    }\\n\\n    function names(ZapSet storage set) internal view returns (string[] memory) {\\n        return _names(set._inner);\\n    }\\n\\n    function add(SwapSet storage set, ISwap swap) internal {\\n        _add(set._inner, swap);\\n    }\\n\\n    function remove(SwapSet storage set, string memory name) internal {\\n        _remove(set._inner, name);\\n    }\\n\\n    function contains(SwapSet storage set, ISwap swap)\\n        internal\\n        view\\n        returns (bool)\\n    {\\n        return _contains(set._inner, swap);\\n    }\\n\\n    function length(SwapSet storage set) internal view returns (uint256) {\\n        return _length(set._inner);\\n    }\\n\\n    function at(SwapSet storage set, uint256 index)\\n        internal\\n        view\\n        returns (ISwap)\\n    {\\n        return ISwap(address(_at(set._inner, index)));\\n    }\\n\\n    function get(SwapSet storage set, string memory name)\\n        internal\\n        view\\n        returns (ISwap)\\n    {\\n        return ISwap(address(_get(set._inner, name)));\\n    }\\n\\n    function names(SwapSet storage set)\\n        internal\\n        view\\n        returns (string[] memory)\\n    {\\n        return _names(set._inner);\\n    }\\n}\\n\"\r\n    },\r\n    \"contracts/lpaccount/Imports.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: BUSDL-1.1\\npragma solidity 0.6.11;\\n\\nimport {IZap} from \\\"./IZap.sol\\\";\\nimport {ISwap} from \\\"./ISwap.sol\\\";\\nimport {ILpAccount} from \\\"./ILpAccount.sol\\\";\\nimport {IZapRegistry} from \\\"./IZapRegistry.sol\\\";\\nimport {ISwapRegistry} from \\\"./ISwapRegistry.sol\\\";\\n\"\r\n    },\r\n    \"contracts/lpaccount/IZap.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: BUSDL-1.1\\npragma solidity 0.6.11;\\npragma experimental ABIEncoderV2;\\n\\nimport {\\n    IAssetAllocation,\\n    INameIdentifier,\\n    IERC20\\n} from \\\"contracts/common/Imports.sol\\\";\\n\\n/**\\n * @notice Used to define how an LP Account farms an external protocol\\n */\\ninterface IZap is INameIdentifier {\\n    /**\\n     * @notice Deploy liquidity to a protocol (i.e. enter a farm)\\n     * @dev Implementation should add liquidity and stake LP tokens\\n     * @param amounts Amount of each token to deploy\\n     */\\n    function deployLiquidity(uint256[] calldata amounts) external;\\n\\n    /**\\n     * @notice Unwind liquidity from a protocol (i.e exit a farm)\\n     * @dev Implementation should unstake LP tokens and remove liquidity\\n     * @dev If there is only one token to unwind, `index` should be 0\\n     * @param amount Amount of liquidity to unwind\\n     * @param index Which token should be unwound\\n     */\\n    function unwindLiquidity(uint256 amount, uint8 index) external;\\n\\n    /**\\n     * @notice Claim accrued rewards from the protocol (i.e. harvest yield)\\n     */\\n    function claim() external;\\n\\n    /**\\n     * @notice Order of tokens for deploy `amounts` and unwind `index`\\n     * @dev Implementation should use human readable symbols\\n     * @dev Order should be the same for deploy and unwind\\n     * @return The array of symbols in order\\n     */\\n    function sortedSymbols() external view returns (string[] memory);\\n\\n    /**\\n     * @notice Asset allocations to include in TVL\\n     * @dev Requires all allocations that track value deployed to the protocol\\n     * @return An array of the asset allocation names\\n     */\\n    function assetAllocations() external view returns (string[] memory);\\n\\n    /**\\n     * @notice ERC20 asset allocations to include in TVL\\n     * @dev Should return addresses for all tokens that get deployed or unwound\\n     * @return The array of ERC20 token addresses\\n     */\\n    function erc20Allocations() external view returns (IERC20[] memory);\\n}\\n\"\r\n    },\r\n    \"contracts/lpaccount/ISwap.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: BUSDL-1.1\\npragma solidity 0.6.11;\\npragma experimental ABIEncoderV2;\\n\\nimport {\\n    IAssetAllocation,\\n    INameIdentifier,\\n    IERC20\\n} from \\\"contracts/common/Imports.sol\\\";\\n\\n/**\\n * @notice Used to define a token swap that can be performed by an LP Account\\n */\\ninterface ISwap is INameIdentifier {\\n    /**\\n     * @dev Implementation should perform a token swap\\n     * @param amount The amount of the input token to swap\\n     * @param minAmount The minimum amount of the output token to accept\\n     */\\n    function swap(uint256 amount, uint256 minAmount) external;\\n\\n    /**\\n     * @notice ERC20 asset allocations to include in TVL\\n     * @dev Should return addresses for all tokens going in and out of the swap\\n     * @return The array of ERC20 token addresses\\n     */\\n    function erc20Allocations() external view returns (IERC20[] memory);\\n}\\n\"\r\n    },\r\n    \"contracts/lpaccount/ILpAccount.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: BUSDL-1.1\\npragma solidity 0.6.11;\\n\\n/**\\n * @notice For contracts that provide liquidity to external protocols\\n */\\ninterface ILpAccount {\\n    /**\\n     * @notice Deploy liquidity with a registered `IZap`\\n     * @dev The order of token amounts should match `IZap.sortedSymbols`\\n     * @param name The name of the `IZap`\\n     * @param amounts The token amounts to deploy\\n     */\\n    function deployStrategy(string calldata name, uint256[] calldata amounts)\\n        external;\\n\\n    /**\\n     * @notice Unwind liquidity with a registered `IZap`\\n     * @dev The index should match the order of `IZap.sortedSymbols`\\n     * @param name The name of the `IZap`\\n     * @param amount The amount of the token to unwind\\n     * @param index The index of the token to unwind\\n     */\\n    function unwindStrategy(\\n        string calldata name,\\n        uint256 amount,\\n        uint8 index\\n    ) external;\\n\\n    /**\\n     * @notice Return liquidity to a pool\\n     * @notice Typically used to refill a liquidity pool's reserve\\n     * @dev This should only be callable by the `MetaPoolToken`\\n     * @param pool The `IReservePool` to transfer to\\n     * @param amount The amount of the pool's underlyer token to transer\\n     */\\n    function transferToPool(address pool, uint256 amount) external;\\n\\n    /**\\n     * @notice Swap tokens with a registered `ISwap`\\n     * @notice Used to compound reward tokens\\n     * @notice Used to rebalance underlyer tokens\\n     * @param name The name of the `IZap`\\n     * @param amount The amount of tokens to swap\\n     * @param minAmount The minimum amount of tokens to receive from the swap\\n     */\\n    function swap(\\n        string calldata name,\\n        uint256 amount,\\n        uint256 minAmount\\n    ) external;\\n\\n    /**\\n     * @notice Claim reward tokens with a registered `IZap`\\n     * @param name The name of the `IZap`\\n     */\\n    function claim(string calldata name) external;\\n}\\n\"\r\n    },\r\n    \"contracts/lpaccount/IZapRegistry.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: BUSDL-1.1\\npragma solidity 0.6.11;\\npragma experimental ABIEncoderV2;\\n\\nimport {IZap} from \\\"./IZap.sol\\\";\\n\\n/**\\n * @notice For managing a collection of `IZap` contracts\\n */\\ninterface IZapRegistry {\\n    /** @notice Log when a new `IZap` is registered */\\n    event ZapRegistered(IZap zap);\\n\\n    /** @notice Log when an `IZap` is removed */\\n    event ZapRemoved(string name);\\n\\n    /**\\n     * @notice Add a new `IZap` to the registry\\n     * @dev Should not allow duplicate swaps\\n     * @param zap The new `IZap`\\n     */\\n    function registerZap(IZap zap) external;\\n\\n    /**\\n     * @notice Remove an `IZap` from the registry\\n     * @param name The name of the `IZap` (see `INameIdentifier`)\\n     */\\n    function removeZap(string calldata name) external;\\n\\n    /**\\n     * @notice Get the names of all registered `IZap`\\n     * @return An array of `IZap` names\\n     */\\n    function zapNames() external view returns (string[] memory);\\n}\\n\"\r\n    },\r\n    \"contracts/lpaccount/ISwapRegistry.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: BUSDL-1.1\\npragma solidity 0.6.11;\\npragma experimental ABIEncoderV2;\\n\\nimport {ISwap} from \\\"./ISwap.sol\\\";\\n\\n/**\\n * @notice For managing a collection of `ISwap` contracts\\n */\\ninterface ISwapRegistry {\\n    /** @notice Log when a new `ISwap` is registered */\\n    event SwapRegistered(ISwap swap);\\n\\n    /** @notice Log when an `ISwap` is removed */\\n    event SwapRemoved(string name);\\n\\n    /**\\n     * @notice Add a new `ISwap` to the registry\\n     * @dev Should not allow duplicate swaps\\n     * @param swap The new `ISwap`\\n     */\\n    function registerSwap(ISwap swap) external;\\n\\n    /**\\n     * @notice Remove an `ISwap` from the registry\\n     * @param name The name of the `ISwap` (see `INameIdentifier`)\\n     */\\n    function removeSwap(string calldata name) external;\\n\\n    /**\\n     * @notice Get the names of all registered `ISwap`\\n     * @return An array of `ISwap` names\\n     */\\n    function swapNames() external view returns (string[] memory);\\n}\\n\"\r\n    },\r\n    \"contracts/registry/IAddressRegistryV2.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: BUSDL-1.1\\npragma solidity 0.6.11;\\n\\n/**\\n * @notice The address registry has two important purposes, one which\\n * is fairly concrete and another abstract.\\n *\\n * 1. The registry enables components of the APY.Finance system\\n * and external systems to retrieve core addresses reliably\\n * even when the functionality may move to a different\\n * address.\\n *\\n * 2. The registry also makes explicit which contracts serve\\n * as primary entrypoints for interacting with different\\n * components.  Not every contract is registered here, only\\n * the ones properly deserving of an identifier.  This helps\\n * define explicit boundaries between groups of contracts,\\n * each of which is logically cohesive.\\n */\\ninterface IAddressRegistryV2 {\\n    /**\\n     * @notice Log when a new address is registered\\n     * @param id The ID of the new address\\n     * @param _address The new address\\n     */\\n    event AddressRegistered(bytes32 id, address _address);\\n\\n    /**\\n     * @notice Log when an address is removed from the registry\\n     * @param id The ID of the address\\n     * @param _address The address\\n     */\\n    event AddressDeleted(bytes32 id, address _address);\\n\\n    /**\\n     * @notice Register address with identifier\\n     * @dev Using an existing ID will replace the old address with new\\n     * @dev Currently there is no way to remove an ID, as attempting to\\n     * register the zero address will revert.\\n     */\\n    function registerAddress(bytes32 id, address address_) external;\\n\\n    /**\\n     * @notice Registers multiple address at once\\n     * @dev Convenient method to register multiple addresses at once.\\n     * @param ids Ids to register addresses under\\n     * @param addresses Addresses to register\\n     */\\n    function registerMultipleAddresses(\\n        bytes32[] calldata ids,\\n        address[] calldata addresses\\n    ) external;\\n\\n    /**\\n     * @notice Removes a registered id and it's associated address\\n     * @dev Delete the address corresponding to the identifier Time-complexity is O(n) where n is the length of `_idList`.\\n     * @param id ID to remove along with it's associated address\\n     */\\n    function deleteAddress(bytes32 id) external;\\n\\n    /**\\n     * @notice Returns the list of all registered identifiers.\\n     * @return List of identifiers\\n     */\\n    function getIds() external view returns (bytes32[] memory);\\n\\n    /**\\n     * @notice Returns the list of all registered identifiers\\n     * @param id Component identifier\\n     * @return The current address represented by an identifier\\n     */\\n    function getAddress(bytes32 id) external view returns (address);\\n\\n    /**\\n     * @notice Returns the TVL Manager Address\\n     * @dev Not just a helper function, this makes explicit a key ID for the system\\n     * @return TVL Manager Address\\n     */\\n    function tvlManagerAddress() external view returns (address);\\n\\n    /**\\n     * @notice Returns the Chainlink Registry Address\\n     * @dev Not just a helper function, this makes explicit a key ID for the system\\n     * @return Chainlink Registry Address\\n     */\\n    function chainlinkRegistryAddress() external view returns (address);\\n\\n    /**\\n     * @notice Returns the DAI Pool Address\\n     * @dev Not just a helper function, this makes explicit a key ID for the system\\n     * @return DAI Pool Address\\n     */\\n    function daiPoolAddress() external view returns (address);\\n\\n    /**\\n     * @notice Returns the USDC Pool Address\\n     * @dev Not just a helper function, this makes explicit a key ID for the system\\n     * @return USDC Pool Address\\n     */\\n    function usdcPoolAddress() external view returns (address);\\n\\n    /**\\n     * @notice Returns the USDT Pool Address\\n     * @dev Not just a helper function, this makes explicit a key ID for the system\\n     * @return USDT Pool Address\\n     */\\n    function usdtPoolAddress() external view returns (address);\\n\\n    /**\\n     * @notice Returns the MAPT Pool Address\\n     * @dev Not just a helper function, this makes explicit a key ID for the system\\n     * @return MAPT Pool Address\\n     */\\n    function mAptAddress() external view returns (address);\\n\\n    /**\\n     * @notice Returns the LP Account Address\\n     * @dev Not just a helper function, this makes explicit a key ID for the system\\n     * @return LP Account Address\\n     */\\n    function lpAccountAddress() external view returns (address);\\n\\n    /**\\n     * @notice Returns the LP Safe Address\\n     * @dev Not just a helper function, this makes explicit a key ID for the system\\n     * @return LP Safe Address\\n     */\\n    function lpSafeAddress() external view returns (address);\\n\\n    /**\\n     * @notice Returns the Admin Safe Address\\n     * @dev Not just a helper function, this makes explicit a key ID for the system\\n     * @return Admin Safe Address\\n     */\\n    function adminSafeAddress() external view returns (address);\\n\\n    /**\\n     * @notice Returns the Emergency Safe Address\\n     * @dev Not just a helper function, this makes explicit a key ID for the system\\n     * @return Emergency Safe Address\\n     */\\n    function emergencySafeAddress() external view returns (address);\\n\\n    /**\\n     * @notice Returns the Oracle Adapter Address\\n     * @dev Not just a helper function, this makes explicit a key ID for the system\\n     * @return Oracle Adapter Address\\n     */\\n    function oracleAdapterAddress() external view returns (address);\\n}\\n\"\r\n    },\r\n    \"contracts/oracle/FluxAggregator.sol\": {\r\n      \"content\": \"/**\\nSPDX-License-Identifier: UNLICENSED\\n----------------------------------\\n---- APY.Finance comments --------\\n----------------------------------\\n\\nDue to pragma being fixed at 0.6.6, we had to copy over this contract\\nand fix the imports.\\n\\noriginal path: @chainlink/contracts/src/v0.6/FluxAggregator.sol\\nnpm package version: 0.0.9\\n */\\npragma solidity 0.6.11;\\n\\nimport \\\"@chainlink/contracts/src/v0.6/Median.sol\\\";\\nimport \\\"@chainlink/contracts/src/v0.6/Owned.sol\\\";\\nimport \\\"@chainlink/contracts/src/v0.6/SafeMath128.sol\\\";\\nimport \\\"@chainlink/contracts/src/v0.6/SafeMath32.sol\\\";\\nimport \\\"@chainlink/contracts/src/v0.6/SafeMath64.sol\\\";\\nimport \\\"@chainlink/contracts/src/v0.6/interfaces/AggregatorV2V3Interface.sol\\\";\\nimport \\\"@chainlink/contracts/src/v0.6/interfaces/AggregatorValidatorInterface.sol\\\";\\nimport \\\"@chainlink/contracts/src/v0.6/interfaces/LinkTokenInterface.sol\\\";\\nimport \\\"@chainlink/contracts/src/v0.6/vendor/SafeMath.sol\\\";\\n\\n/* solhint-disable */\\n/**\\n * @title The Prepaid Aggregator contract\\n * @notice Handles aggregating data pushed in from off-chain, and unlocks\\n * payment for oracles as they report. Oracles' submissions are gathered in\\n * rounds, with each round aggregating the submissions for each oracle into a\\n * single answer. The latest aggregated answer is exposed as well as historical\\n * answers and their updated at timestamp.\\n */\\ncontract FluxAggregator is AggregatorV2V3Interface, Owned {\\n    using SafeMath for uint256;\\n    using SafeMath128 for uint128;\\n    using SafeMath64 for uint64;\\n    using SafeMath32 for uint32;\\n\\n    struct Round {\\n        int256 answer;\\n        uint64 startedAt;\\n        uint64 updatedAt;\\n        uint32 answeredInRound;\\n    }\\n\\n    struct RoundDetails {\\n        int256[] submissions;\\n        uint32 maxSubmissions;\\n        uint32 minSubmissions;\\n        uint32 timeout;\\n        uint128 paymentAmount;\\n    }\\n\\n    struct OracleStatus {\\n        uint128 withdrawable;\\n        uint32 startingRound;\\n        uint32 endingRound;\\n        uint32 lastReportedRound;\\n        uint32 lastStartedRound;\\n        int256 latestSubmission;\\n        uint16 index;\\n        address admin;\\n        address pendingAdmin;\\n    }\\n\\n    struct Requester {\\n        bool authorized;\\n        uint32 delay;\\n        uint32 lastStartedRound;\\n    }\\n\\n    struct Funds {\\n        uint128 available;\\n        uint128 allocated;\\n    }\\n\\n    LinkTokenInterface public linkToken;\\n    AggregatorValidatorInterface public validator;\\n\\n    // Round related params\\n    uint128 public paymentAmount;\\n    uint32 public maxSubmissionCount;\\n    uint32 public minSubmissionCount;\\n    uint32 public restartDelay;\\n    uint32 public timeout;\\n    uint8 public override decimals;\\n    string public override description;\\n\\n    int256 public immutable minSubmissionValue;\\n    int256 public immutable maxSubmissionValue;\\n\\n    uint256 public constant override version = 3;\\n\\n    /**\\n     * @notice To ensure owner isn't withdrawing required funds as oracles are\\n     * submitting updates, we enforce that the contract maintains a minimum\\n     * reserve of RESERVE_ROUNDS * oracleCount() LINK earmarked for payment to\\n     * oracles. (Of course, this doesn't prevent the contract from running out of\\n     * funds without the owner's intervention.)\\n     */\\n    uint256 private constant RESERVE_ROUNDS = 2;\\n    uint256 private constant MAX_ORACLE_COUNT = 77;\\n    uint32 private constant ROUND_MAX = 2**32 - 1;\\n    uint256 private constant VALIDATOR_GAS_LIMIT = 100000;\\n    // An error specific to the Aggregator V3 Interface, to prevent possible\\n    // confusion around accidentally reading unset values as reported values.\\n    string private constant V3_NO_DATA_ERROR = \\\"No data present\\\";\\n\\n    uint32 private reportingRoundId;\\n    uint32 internal latestRoundId;\\n    mapping(address => OracleStatus) private oracles;\\n    mapping(uint32 => Round) internal rounds;\\n    mapping(uint32 => RoundDetails) internal details;\\n    mapping(address => Requester) internal requesters;\\n    address[] private oracleAddresses;\\n    Funds private recordedFunds;\\n\\n    event AvailableFundsUpdated(uint256 indexed amount);\\n    event RoundDetailsUpdated(\\n        uint128 indexed paymentAmount,\\n        uint32 indexed minSubmissionCount,\\n        uint32 indexed maxSubmissionCount,\\n        uint32 restartDelay,\\n        uint32 timeout // measured in seconds\\n    );\\n    event OraclePermissionsUpdated(\\n        address indexed oracle,\\n        bool indexed whitelisted\\n    );\\n    event OracleAdminUpdated(address indexed oracle, address indexed newAdmin);\\n    event OracleAdminUpdateRequested(\\n        address indexed oracle,\\n        address admin,\\n        address newAdmin\\n    );\\n    event SubmissionReceived(\\n        int256 indexed submission,\\n        uint32 indexed round,\\n        address indexed oracle\\n    );\\n    event RequesterPermissionsSet(\\n        address indexed requester,\\n        bool authorized,\\n        uint32 delay\\n    );\\n    event ValidatorUpdated(address indexed previous, address indexed current);\\n\\n    /**\\n     * @notice set up the aggregator with initial configuration\\n     * @param _link The address of the LINK token\\n     * @param _paymentAmount The amount paid of LINK paid to each oracle per submission, in wei (units of 10⁻¹⁸ LINK)\\n     * @param _timeout is the number of seconds after the previous round that are\\n     * allowed to lapse before allowing an oracle to skip an unfinished round\\n     * @param _validator is an optional contract address for validating\\n     * external validation of answers\\n     * @param _minSubmissionValue is an immutable check for a lower bound of what\\n     * submission values are accepted from an oracle\\n     * @param _maxSubmissionValue is an immutable check for an upper bound of what\\n     * submission values are accepted from an oracle\\n     * @param _decimals represents the number of decimals to offset the answer by\\n     * @param _description a short description of what is being reported\\n     */\\n    constructor(\\n        address _link,\\n        uint128 _paymentAmount,\\n        uint32 _timeout,\\n        address _validator,\\n        int256 _minSubmissionValue,\\n        int256 _maxSubmissionValue,\\n        uint8 _decimals,\\n        string memory _description\\n    ) public {\\n        linkToken = LinkTokenInterface(_link);\\n        updateFutureRounds(_paymentAmount, 0, 0, 0, _timeout);\\n        setValidator(_validator);\\n        minSubmissionValue = _minSubmissionValue;\\n        maxSubmissionValue = _maxSubmissionValue;\\n        decimals = _decimals;\\n        description = _description;\\n        rounds[0].updatedAt = uint64(block.timestamp.sub(uint256(_timeout)));\\n    }\\n\\n    /**\\n     * @notice called by oracles when they have witnessed a need to update\\n     * @param _roundId is the ID of the round this submission pertains to\\n     * @param _submission is the updated data that the oracle is submitting\\n     */\\n    function submit(uint256 _roundId, int256 _submission) external {\\n        bytes memory error = validateOracleRound(msg.sender, uint32(_roundId));\\n        require(\\n            _submission >= minSubmissionValue,\\n            \\\"value below minSubmissionValue\\\"\\n        );\\n        require(\\n            _submission <= maxSubmissionValue,\\n            \\\"value above maxSubmissionValue\\\"\\n        );\\n        require(error.length == 0, string(error));\\n\\n        oracleInitializeNewRound(uint32(_roundId));\\n        recordSubmission(_submission, uint32(_roundId));\\n        (bool updated, int256 newAnswer) = updateRoundAnswer(uint32(_roundId));\\n        payOracle(uint32(_roundId));\\n        deleteRoundDetails(uint32(_roundId));\\n        if (updated) {\\n            validateAnswer(uint32(_roundId), newAnswer);\\n        }\\n    }\\n\\n    /**\\n     * @notice called by the owner to remove and add new oracles as well as\\n     * update the round related parameters that pertain to total oracle count\\n     * @param _removed is the list of addresses for the new Oracles being removed\\n     * @param _added is the list of addresses for the new Oracles being added\\n     * @param _addedAdmins is the admin addresses for the new respective _added\\n     * list. Only this address is allowed to access the respective oracle's funds\\n     * @param _minSubmissions is the new minimum submission count for each round\\n     * @param _maxSubmissions is the new maximum submission count for each round\\n     * @param _restartDelay is the number of rounds an Oracle has to wait before\\n     * they can initiate a round\\n     */\\n    function changeOracles(\\n        address[] calldata _removed,\\n        address[] calldata _added,\\n        address[] calldata _addedAdmins,\\n        uint32 _minSubmissions,\\n        uint32 _maxSubmissions,\\n        uint32 _restartDelay\\n    ) external onlyOwner() {\\n        for (uint256 i = 0; i < _removed.length; i++) {\\n            removeOracle(_removed[i]);\\n        }\\n\\n        require(\\n            _added.length == _addedAdmins.length,\\n            \\\"need same oracle and admin count\\\"\\n        );\\n        require(\\n            uint256(oracleCount()).add(_added.length) <= MAX_ORACLE_COUNT,\\n            \\\"max oracles allowed\\\"\\n        );\\n\\n        for (uint256 i = 0; i < _added.length; i++) {\\n            addOracle(_added[i], _addedAdmins[i]);\\n        }\\n\\n        updateFutureRounds(\\n            paymentAmount,\\n            _minSubmissions,\\n            _maxSubmissions,\\n            _restartDelay,\\n            timeout\\n        );\\n    }\\n\\n    /**\\n     * @notice update the round and payment related parameters for subsequent\\n     * rounds\\n     * @param _paymentAmount is the payment amount for subsequent rounds\\n     * @param _minSubmissions is the new minimum submission count for each round\\n     * @param _maxSubmissions is the new maximum submission count for each round\\n     * @param _restartDelay is the number of rounds an Oracle has to wait before\\n     * they can initiate a round\\n     */\\n    function updateFutureRounds(\\n        uint128 _paymentAmount,\\n        uint32 _minSubmissions,\\n        uint32 _maxSubmissions,\\n        uint32 _restartDelay,\\n        uint32 _timeout\\n    ) public onlyOwner() {\\n        uint32 oracleNum = oracleCount(); // Save on storage reads\\n        require(\\n            _maxSubmissions >= _minSubmissions,\\n            \\\"max must equal/exceed min\\\"\\n        );\\n        require(oracleNum >= _maxSubmissions, \\\"max cannot exceed total\\\");\\n        require(\\n            oracleNum == 0 || oracleNum > _restartDelay,\\n            \\\"delay cannot exceed total\\\"\\n        );\\n        require(\\n            recordedFunds.available >= requiredReserve(_paymentAmount),\\n            \\\"insufficient funds for payment\\\"\\n        );\\n        if (oracleCount() > 0) {\\n            require(_minSubmissions > 0, \\\"min must be greater than 0\\\");\\n        }\\n\\n        paymentAmount = _paymentAmount;\\n        minSubmissionCount = _minSubmissions;\\n        maxSubmissionCount = _maxSubmissions;\\n        restartDelay = _restartDelay;\\n        timeout = _timeout;\\n\\n        emit RoundDetailsUpdated(\\n            paymentAmount,\\n            _minSubmissions,\\n            _maxSubmissions,\\n            _restartDelay,\\n            _timeout\\n        );\\n    }\\n\\n    /**\\n     * @notice the amount of payment yet to be withdrawn by oracles\\n     */\\n    function allocatedFunds() external view returns (uint128) {\\n        return recordedFunds.allocated;\\n    }\\n\\n    /**\\n     * @notice the amount of future funding available to oracles\\n     */\\n    function availableFunds() external view returns (uint128) {\\n        return recordedFunds.available;\\n    }\\n\\n    /**\\n     * @notice recalculate the amount of LINK available for payouts\\n     */\\n    function updateAvailableFunds() public {\\n        Funds memory funds = recordedFunds;\\n\\n        uint256 nowAvailable =\\n            linkToken.balanceOf(address(this)).sub(funds.allocated);\\n\\n        if (funds.available != nowAvailable) {\\n            recordedFunds.available = uint128(nowAvailable);\\n            emit AvailableFundsUpdated(nowAvailable);\\n        }\\n    }\\n\\n    /**\\n     * @notice returns the number of oracles\\n     */\\n    function oracleCount() public view returns (uint8) {\\n        return uint8(oracleAddresses.length);\\n    }\\n\\n    /**\\n     * @notice returns an array of addresses containing the oracles on contract\\n     */\\n    function getOracles() external view returns (address[] memory) {\\n        return oracleAddresses;\\n    }\\n\\n    /**\\n     * @notice get the most recently reported answer\\n     *\\n     * @dev #[deprecated] Use latestRoundData instead. This does not error if no\\n     * answer has been reached, it will simply return 0. Either wait to point to\\n     * an already answered Aggregator or use the recommended latestRoundData\\n     * instead which includes better verification information.\\n     */\\n    function latestAnswer() public view virtual override returns (int256) {\\n        return rounds[latestRoundId].answer;\\n    }\\n\\n    /**\\n     * @notice get the most recent updated at timestamp\\n     *\\n     * @dev #[deprecated] Use latestRoundData instead. This does not error if no\\n     * answer has been reached, it will simply return 0. Either wait to point to\\n     * an already answered Aggregator or use the recommended latestRoundData\\n     * instead which includes better verification information.\\n     */\\n    function latestTimestamp() public view virtual override returns (uint256) {\\n        return rounds[latestRoundId].updatedAt;\\n    }\\n\\n    /**\\n     * @notice get the ID of the last updated round\\n     *\\n     * @dev #[deprecated] Use latestRoundData instead. This does not error if no\\n     * answer has been reached, it will simply return 0. Either wait to point to\\n     * an already answered Aggregator or use the recommended latestRoundData\\n     * instead which includes better verification information.\\n     */\\n    function latestRound() public view virtual override returns (uint256) {\\n        return latestRoundId;\\n    }\\n\\n    /**\\n     * @notice get past rounds answers\\n     * @param _roundId the round number to retrieve the answer for\\n     *\\n     * @dev #[deprecated] Use getRoundData instead. This does not error if no\\n     * answer has been reached, it will simply return 0. Either wait to point to\\n     * an already answered Aggregator or use the recommended getRoundData\\n     * instead which includes better verification information.\\n     */\\n    function getAnswer(uint256 _roundId)\\n        public\\n        view\\n        virtual\\n        override\\n        returns (int256)\\n    {\\n        if (validRoundId(_roundId)) {\\n            return rounds[uint32(_roundId)].answer;\\n        }\\n        return 0;\\n    }\\n\\n    /**\\n     * @notice get timestamp when an answer was last updated\\n     * @param _roundId the round number to retrieve the updated timestamp for\\n     *\\n     * @dev #[deprecated] Use getRoundData instead. This does not error if no\\n     * answer has been reached, it will simply return 0. Either wait to point to\\n     * an already answered Aggregator or use the recommended getRoundData\\n     * instead which includes better verification information.\\n     */\\n    function getTimestamp(uint256 _roundId)\\n        public\\n        view\\n        virtual\\n        override\\n        returns (uint256)\\n    {\\n        if (validRoundId(_roundId)) {\\n            return rounds[uint32(_roundId)].updatedAt;\\n        }\\n        return 0;\\n    }\\n\\n    /**\\n     * @notice get data about a round. Consumers are encouraged to check\\n     * that they're receiving fresh data by inspecting the updatedAt and\\n     * answeredInRound return values.\\n     * @param _roundId the round ID to retrieve the round data for\\n     * @return roundId is the round ID for which data was retrieved\\n     * @return answer is the answer for the given round\\n     * @return startedAt is the timestamp when the round was started. This is 0\\n     * if the round hasn't been started yet.\\n     * @return updatedAt is the timestamp when the round last was updated (i.e.\\n     * answer was last computed)\\n     * @return answeredInRound is the round ID of the round in which the answer\\n     * was computed. answeredInRound may be smaller than roundId when the round\\n     * timed out. answeredInRound is equal to roundId when the round didn't time out\\n     * and was completed regularly.\\n     * @dev Note that for in-progress rounds (i.e. rounds that haven't yet received\\n     * maxSubmissions) answer and updatedAt may change between queries.\\n     */\\n    function getRoundData(uint80 _roundId)\\n        public\\n        view\\n        virtual\\n        override\\n        returns (\\n            uint80 roundId,\\n            int256 answer,\\n            uint256 startedAt,\\n            uint256 updatedAt,\\n            uint80 answeredInRound\\n        )\\n    {\\n        Round memory r = rounds[uint32(_roundId)];\\n\\n        require(\\n            r.answeredInRound > 0 && validRoundId(_roundId),\\n            V3_NO_DATA_ERROR\\n        );\\n\\n        return (\\n            _roundId,\\n            r.answer,\\n            r.startedAt,\\n            r.updatedAt,\\n            r.answeredInRound\\n        );\\n    }\\n\\n    /**\\n     * @notice get data about the latest round. Consumers are encouraged to check\\n     * that they're receiving fresh data by inspecting the updatedAt and\\n     * answeredInRound return values. Consumers are encouraged to\\n     * use this more fully featured method over the \\\"legacy\\\" latestRound/\\n     * latestAnswer/latestTimestamp functions. Consumers are encouraged to check\\n     * that they're receiving fresh data by inspecting the updatedAt and\\n     * answeredInRound return values.\\n     * @return roundId is the round ID for which data was retrieved\\n     * @return answer is the answer for the given round\\n     * @return startedAt is the timestamp when the round was started. This is 0\\n     * if the round hasn't been started yet.\\n     * @return updatedAt is the timestamp when the round last was updated (i.e.\\n     * answer was last computed)\\n     * @return answeredInRound is the round ID of the round in which the answer\\n     * was computed. answeredInRound may be smaller than roundId when the round\\n     * timed out. answeredInRound is equal to roundId when the round didn't time\\n     * out and was completed regularly.\\n     * @dev Note that for in-progress rounds (i.e. rounds that haven't yet\\n     * received maxSubmissions) answer and updatedAt may change between queries.\\n     */\\n    function latestRoundData()\\n        public\\n        view\\n        virtual\\n        override\\n        returns (\\n            uint80 roundId,\\n            int256 answer,\\n            uint256 startedAt,\\n            uint256 updatedAt,\\n            uint80 answeredInRound\\n        )\\n    {\\n        return getRoundData(latestRoundId);\\n    }\\n\\n    /**\\n     * @notice query the available amount of LINK for an oracle to withdraw\\n     */\\n    function withdrawablePayment(address _oracle)\\n        external\\n        view\\n        returns (uint256)\\n    {\\n        return oracles[_oracle].withdrawable;\\n    }\\n\\n    /**\\n     * @notice transfers the oracle's LINK to another address. Can only be called\\n     * by the oracle's admin.\\n     * @param _oracle is the oracle whose LINK is transferred\\n     * @param _recipient is the address to send the LINK to\\n     * @param _amount is the amount of LINK to send\\n     */\\n    function withdrawPayment(\\n        address _oracle,\\n        address _recipient,\\n        uint256 _amount\\n    ) external {\\n        require(oracles[_oracle].admin == msg.sender, \\\"only callable by admin\\\");\\n\\n        // Safe to downcast _amount because the total amount of LINK is less than 2^128.\\n        uint128 amount = uint128(_amount);\\n        uint128 available = oracles[_oracle].withdrawable;\\n        require(available >= amount, \\\"insufficient withdrawable funds\\\");\\n\\n        oracles[_oracle].withdrawable = available.sub(amount);\\n        recordedFunds.allocated = recordedFunds.allocated.sub(amount);\\n\\n        assert(linkToken.transfer(_recipient, uint256(amount)));\\n    }\\n\\n    /**\\n     * @notice transfers the owner's LINK to another address\\n     * @param _recipient is the address to send the LINK to\\n     * @param _amount is the amount of LINK to send\\n     */\\n    function withdrawFunds(address _recipient, uint256 _amount)\\n        external\\n        onlyOwner()\\n    {\\n        uint256 available = uint256(recordedFunds.available);\\n        require(\\n            available.sub(requiredReserve(paymentAmount)) >= _amount,\\n            \\\"insufficient reserve funds\\\"\\n        );\\n        require(\\n            linkToken.transfer(_recipient, _amount),\\n            \\\"token transfer failed\\\"\\n        );\\n        updateAvailableFunds();\\n    }\\n\\n    /**\\n     * @notice get the admin address of an oracle\\n     * @param _oracle is the address of the oracle whose admin is being queried\\n     */\\n    function getAdmin(address _oracle) external view returns (address) {\\n        return oracles[_oracle].admin;\\n    }\\n\\n    /**\\n     * @notice transfer the admin address for an oracle\\n     * @param _oracle is the address of the oracle whose admin is being transferred\\n     * @param _newAdmin is the new admin address\\n     */\\n    function transferAdmin(address _oracle, address _newAdmin) external {\\n        require(oracles[_oracle].admin == msg.sender, \\\"only callable by admin\\\");\\n        oracles[_oracle].pendingAdmin = _newAdmin;\\n\\n        emit OracleAdminUpdateRequested(_oracle, msg.sender, _newAdmin);\\n    }\\n\\n    /**\\n     * @notice accept the admin address transfer for an oracle\\n     * @param _oracle is the address of the oracle whose admin is being transferred\\n     */\\n    function acceptAdmin(address _oracle) external {\\n        require(\\n            oracles[_oracle].pendingAdmin == msg.sender,\\n            \\\"only callable by pending admin\\\"\\n        );\\n        oracles[_oracle].pendingAdmin = address(0);\\n        oracles[_oracle].admin = msg.sender;\\n\\n        emit OracleAdminUpdated(_oracle, msg.sender);\\n    }\\n\\n    /**\\n     * @notice allows non-oracles to request a new round\\n     */\\n    function requestNewRound() external returns (uint80) {\\n        require(requesters[msg.sender].authorized, \\\"not authorized requester\\\");\\n\\n        uint32 current = reportingRoundId;\\n        require(\\n            rounds[current].updatedAt > 0 || timedOut(current),\\n            \\\"prev round must be supersedable\\\"\\n        );\\n\\n        uint32 newRoundId = current.add(1);\\n        requesterInitializeNewRound(newRoundId);\\n        return newRoundId;\\n    }\\n\\n    /**\\n     * @notice allows the owner to specify new non-oracles to start new rounds\\n     * @param _requester is the address to set permissions for\\n     * @param _authorized is a boolean specifying whether they can start new rounds or not\\n     * @param _delay is the number of rounds the requester must wait before starting another round\\n     */\\n    function setRequesterPermissions(\\n        address _requester,\\n        bool _authorized,\\n        uint32 _delay\\n    ) external onlyOwner() {\\n        if (requesters[_requester].authorized == _authorized) return;\\n\\n        if (_authorized) {\\n            requesters[_requester].authorized = _authorized;\\n            requesters[_requester].delay = _delay;\\n        } else {\\n            delete requesters[_requester];\\n        }\\n\\n        emit RequesterPermissionsSet(_requester, _authorized, _delay);\\n    }\\n\\n    /**\\n     * @notice called through LINK's transferAndCall to update available funds\\n     * in the same transaction as the funds were transferred to the aggregator\\n     * @param _data is mostly ignored. It is checked for length, to be sure\\n     * nothing strange is passed in.\\n     */\\n    function onTokenTransfer(\\n        address,\\n        uint256,\\n        bytes calldata _data\\n    ) external {\\n        require(_data.length == 0, \\\"transfer doesn't accept calldata\\\");\\n        updateAvailableFunds();\\n    }\\n\\n    /**\\n     * @notice a method to provide all current info oracles need. Intended only\\n     * only to be callable by oracles. Not for use by contracts to read state.\\n     * @param _oracle the address to look up information for.\\n     */\\n    function oracleRoundState(address _oracle, uint32 _queriedRoundId)\\n        external\\n        view\\n        returns (\\n            bool _eligibleToSubmit,\\n            uint32 _roundId,\\n            int256 _latestSubmission,\\n            uint64 _startedAt,\\n            uint64 _timeout,\\n            uint128 _availableFunds,\\n            uint8 _oracleCount,\\n            uint128 _paymentAmount\\n        )\\n    {\\n        require(msg.sender == tx.origin, \\\"off-chain reading only\\\");\\n\\n        if (_queriedRoundId > 0) {\\n            Round storage round = rounds[_queriedRoundId];\\n            RoundDetails storage details = details[_queriedRoundId];\\n            return (\\n                eligibleForSpecificRound(_oracle, _queriedRoundId),\\n                _queriedRoundId,\\n                oracles[_oracle].latestSubmission,\\n                round.startedAt,\\n                details.timeout,\\n                recordedFunds.available,\\n                oracleCount(),\\n                (round.startedAt > 0 ? details.paymentAmount : paymentAmount)\\n            );\\n        } else {\\n            return oracleRoundStateSuggestRound(_oracle);\\n        }\\n    }\\n\\n    /**\\n     * @notice method to update the address which does external data validation.\\n     * @param _newValidator designates the address of the new validation contract.\\n     */\\n    function setValidator(address _newValidator) public onlyOwner() {\\n        address previous = address(validator);\\n\\n        if (previous != _newValidator) {\\n            validator = AggregatorValidatorInterface(_newValidator);\\n\\n            emit ValidatorUpdated(previous, _newValidator);\\n        }\\n    }\\n\\n    /**\\n     * Private\\n     */\\n\\n    function initializeNewRound(uint32 _roundId) private {\\n        updateTimedOutRoundInfo(_roundId.sub(1));\\n\\n        reportingRoundId = _roundId;\\n        RoundDetails memory nextDetails =\\n            RoundDetails(\\n                new int256[](0),\\n                maxSubmissionCount,\\n                minSubmissionCount,\\n                timeout,\\n                paymentAmount\\n            );\\n        details[_roundId] = nextDetails;\\n        rounds[_roundId].startedAt = uint64(block.timestamp);\\n\\n        emit NewRound(_roundId, msg.sender, rounds[_roundId].startedAt);\\n    }\\n\\n    function oracleInitializeNewRound(uint32 _roundId) private {\\n        if (!newRound(_roundId)) return;\\n        uint256 lastStarted = oracles[msg.sender].lastStartedRound; // cache storage reads\\n        if (_roundId <= lastStarted + restartDelay && lastStarted != 0) return;\\n\\n        initializeNewRound(_roundId);\\n\\n        oracles[msg.sender].lastStartedRound = _roundId;\\n    }\\n\\n    function requesterInitializeNewRound(uint32 _roundId) private {\\n        if (!newRound(_roundId)) return;\\n        uint256 lastStarted = requesters[msg.sender].lastStartedRound; // cache storage reads\\n        require(\\n            _roundId > lastStarted + requesters[msg.sender].delay ||\\n                lastStarted == 0,\\n            \\\"must delay requests\\\"\\n        );\\n\\n        initializeNewRound(_roundId);\\n\\n        requesters[msg.sender].lastStartedRound = _roundId;\\n    }\\n\\n    function updateTimedOutRoundInfo(uint32 _roundId) private {\\n        if (!timedOut(_roundId)) return;\\n\\n        uint32 prevId = _roundId.sub(1);\\n        rounds[_roundId].answer = rounds[prevId].answer;\\n        rounds[_roundId].answeredInRound = rounds[prevId].answeredInRound;\\n        rounds[_roundId].updatedAt = uint64(block.timestamp);\\n\\n        delete details[_roundId];\\n    }\\n\\n    function eligibleForSpecificRound(address _oracle, uint32 _queriedRoundId)\\n        private\\n        view\\n        returns (bool _eligible)\\n    {\\n        if (rounds[_queriedRoundId].startedAt > 0) {\\n            return\\n                acceptingSubmissions(_queriedRoundId) &&\\n                validateOracleRound(_oracle, _queriedRoundId).length == 0;\\n        } else {\\n            return\\n                delayed(_oracle, _queriedRoundId) &&\\n                validateOracleRound(_oracle, _queriedRoundId).length == 0;\\n        }\\n    }\\n\\n    function oracleRoundStateSuggestRound(address _oracle)\\n        private\\n        view\\n        returns (\\n            bool _eligibleToSubmit,\\n            uint32 _roundId,\\n            int256 _latestSubmission,\\n            uint64 _startedAt,\\n            uint64 _timeout,\\n            uint128 _availableFunds,\\n            uint8 _oracleCount,\\n            uint128 _paymentAmount\\n        )\\n    {\\n        Round storage round = rounds[0];\\n        OracleStatus storage oracle = oracles[_oracle];\\n\\n        bool shouldSupersede =\\n            oracle.lastReportedRound == reportingRoundId ||\\n                !acceptingSubmissions(reportingRoundId);\\n        // Instead of nudging oracles to submit to the next round, the inclusion of\\n        // the shouldSupersede bool in the if condition pushes them towards\\n        // submitting in a currently open round.\\n        if (supersedable(reportingRoundId) && shouldSupersede) {\\n            _roundId = reportingRoundId.add(1);\\n            round = rounds[_roundId];\\n\\n            _paymentAmount = paymentAmount;\\n            _eligibleToSubmit = delayed(_oracle, _roundId);\\n        } else {\\n            _roundId = reportingRoundId;\\n            round = rounds[_roundId];\\n\\n            _paymentAmount = details[_roundId].paymentAmount;\\n            _eligibleToSubmit = acceptingSubmissions(_roundId);\\n        }\\n\\n        if (validateOracleRound(_oracle, _roundId).length != 0) {\\n            _eligibleToSubmit = false;\\n        }\\n\\n        return (\\n            _eligibleToSubmit,\\n            _roundId,\\n            oracle.latestSubmission,\\n            round.startedAt,\\n            details[_roundId].timeout,\\n            recordedFunds.available,\\n            oracleCount(),\\n            _paymentAmount\\n        );\\n    }\\n\\n    function updateRoundAnswer(uint32 _roundId)\\n        internal\\n        returns (bool, int256)\\n    {\\n        if (\\n            details[_roundId].submissions.length <\\n            details[_roundId].minSubmissions\\n        ) {\\n            return (false, 0);\\n        }\\n\\n        int256 newAnswer =\\n            Median.calculateInplace(details[_roundId].submissions);\\n        rounds[_roundId].answer = newAnswer;\\n        rounds[_roundId].updatedAt = uint64(block.timestamp);\\n        rounds[_roundId].answeredInRound = _roundId;\\n        latestRoundId = _roundId;\\n\\n        emit AnswerUpdated(newAnswer, _roundId, now);\\n\\n        return (true, newAnswer);\\n    }\\n\\n    function validateAnswer(uint32 _roundId, int256 _newAnswer) private {\\n        AggregatorValidatorInterface av = validator; // cache storage reads\\n        if (address(av) == address(0)) return;\\n\\n        uint32 prevRound = _roundId.sub(1);\\n        uint32 prevAnswerRoundId = rounds[prevRound].answeredInRound;\\n        int256 prevRoundAnswer = rounds[prevRound].answer;\\n        // We do not want the validator to ever prevent reporting, so we limit its\\n        // gas usage and catch any errors that may arise.\\n        try\\n            av.validate{gas: VALIDATOR_GAS_LIMIT}(\\n                prevAnswerRoundId,\\n                prevRoundAnswer,\\n                _roundId,\\n                _newAnswer\\n            )\\n        {} catch {}\\n    }\\n\\n    function payOracle(uint32 _roundId) private {\\n        uint128 payment = details[_roundId].paymentAmount;\\n        Funds memory funds = recordedFunds;\\n        funds.available = funds.available.sub(payment);\\n        funds.allocated = funds.allocated.add(payment);\\n        recordedFunds = funds;\\n        oracles[msg.sender].withdrawable = oracles[msg.sender].withdrawable.add(\\n            payment\\n        );\\n\\n        emit AvailableFundsUpdated(funds.available);\\n    }\\n\\n    function recordSubmission(int256 _submission, uint32 _roundId) private {\\n        require(\\n            acceptingSubmissions(_roundId),\\n            \\\"round not accepting submissions\\\"\\n        );\\n\\n        details[_roundId].submissions.push(_submission);\\n        oracles[msg.sender].lastReportedRound = _roundId;\\n        oracles[msg.sender].latestSubmission = _submission;\\n\\n        emit SubmissionReceived(_submission, _roundId, msg.sender);\\n    }\\n\\n    function deleteRoundDetails(uint32 _roundId) private {\\n        if (\\n            details[_roundId].submissions.length <\\n            details[_roundId].maxSubmissions\\n        ) return;\\n\\n        delete details[_roundId];\\n    }\\n\\n    function timedOut(uint32 _roundId) private view returns (bool) {\\n        uint64 startedAt = rounds[_roundId].startedAt;\\n        uint32 roundTimeout = details[_roundId].timeout;\\n        return\\n            startedAt > 0 &&\\n            roundTimeout > 0 &&\\n            startedAt.add(roundTimeout) < block.timestamp;\\n    }\\n\\n    function getStartingRound(address _oracle) private view returns (uint32) {\\n        uint32 currentRound = reportingRoundId;\\n        if (currentRound != 0 && currentRound == oracles[_oracle].endingRound) {\\n            return currentRound;\\n        }\\n        return currentRound.add(1);\\n    }\\n\\n    function previousAndCurrentUnanswered(uint32 _roundId, uint32 _rrId)\\n        private\\n        view\\n        returns (bool)\\n    {\\n        return _roundId.add(1) == _rrId && rounds[_rrId].updatedAt == 0;\\n    }\\n\\n    function requiredReserve(uint256 payment) private view returns (uint256) {\\n        return payment.mul(oracleCount()).mul(RESERVE_ROUNDS);\\n    }\\n\\n    function addOracle(address _oracle, address _admin) private {\\n        require(!oracleEnabled(_oracle), \\\"oracle already enabled\\\");\\n\\n        require(_admin != address(0), \\\"cannot set admin to 0\\\");\\n        require(\\n            oracles[_oracle].admin == address(0) ||\\n                oracles[_oracle].admin == _admin,\\n            \\\"owner cannot overwrite admin\\\"\\n        );\\n\\n        oracles[_oracle].startingRound = getStartingRound(_oracle);\\n        oracles[_oracle].endingRound = ROUND_MAX;\\n        oracles[_oracle].index = uint16(oracleAddresses.length);\\n        oracleAddresses.push(_oracle);\\n        oracles[_oracle].admin = _admin;\\n\\n        emit OraclePermissionsUpdated(_oracle, true);\\n        emit OracleAdminUpdated(_oracle, _admin);\\n    }\\n\\n    function removeOracle(address _oracle) private {\\n        require(oracleEnabled(_oracle), \\\"oracle not enabled\\\");\\n\\n        oracles[_oracle].endingRound = reportingRoundId.add(1);\\n        address tail = oracleAddresses[uint256(oracleCount()).sub(1)];\\n        uint16 index = oracles[_oracle].index;\\n        oracles[tail].index = index;\\n        delete oracles[_oracle].index;\\n        oracleAddresses[index] = tail;\\n        oracleAddresses.pop();\\n\\n        emit OraclePermissionsUpdated(_oracle, false);\\n    }\\n\\n    function validateOracleRound(address _oracle, uint32 _roundId)\\n        private\\n        view\\n        returns (bytes memory)\\n    {\\n        // cache storage reads\\n        uint32 startingRound = oracles[_oracle].startingRound;\\n        uint32 rrId = reportingRoundId;\\n\\n        if (startingRound == 0) return \\\"not enabled oracle\\\";\\n        if (startingRound > _roundId) return \\\"not yet enabled oracle\\\";\\n        if (oracles[_oracle].endingRound < _roundId)\\n            return \\\"no longer allowed oracle\\\";\\n        if (oracles[_oracle].lastReportedRound >= _roundId)\\n            return \\\"cannot report on previous rounds\\\";\\n        if (\\n            _roundId != rrId &&\\n            _roundId != rrId.add(1) &&\\n            !previousAndCurrentUnanswered(_roundId, rrId)\\n        ) return \\\"invalid round to report\\\";\\n        if (_roundId != 1 && !supersedable(_roundId.sub(1)))\\n            return \\\"previous round not supersedable\\\";\\n    }\\n\\n    function supersedable(uint32 _roundId) private view returns (bool) {\\n        return rounds[_roundId].updatedAt > 0 || timedOut(_roundId);\\n    }\\n\\n    function oracleEnabled(address _oracle) private view returns (bool) {\\n        return oracles[_oracle].endingRound == ROUND_MAX;\\n    }\\n\\n    function acceptingSubmissions(uint32 _roundId) private view returns (bool) {\\n        return details[_roundId].maxSubmissions != 0;\\n    }\\n\\n    function delayed(address _oracle, uint32 _roundId)\\n        private\\n        view\\n        returns (bool)\\n    {\\n        uint256 lastStarted = oracles[_oracle].lastStartedRound;\\n        return _roundId > lastStarted + restartDelay || lastStarted == 0;\\n    }\\n\\n    function newRound(uint32 _roundId) private view returns (bool) {\\n        return _roundId == reportingRoundId.add(1);\\n    }\\n\\n    function validRoundId(uint256 _roundId) private view returns (bool) {\\n        return _roundId <= ROUND_MAX;\\n    }\\n}\\n\"\r\n    },\r\n    \"contracts/oracle/IOracleAdapter.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: BUSDL-1.1\\npragma solidity 0.6.11;\\n\\n/**\\n * @notice Interface for securely interacting with Chainlink aggregators\\n */\\ninterface IOracleAdapter {\\n    struct Value {\\n        uint256 value;\\n        uint256 periodEnd;\\n    }\\n\\n    /// @notice Event fired when asset's pricing source (aggregator) is updated\\n    event AssetSourceUpdated(address indexed asset, address indexed source);\\n\\n    /// @notice Event fired when the TVL aggregator address is updated\\n    event TvlSourceUpdated(address indexed source);\\n\\n    /**\\n     * @notice Set the TVL source (aggregator)\\n     * @param source The new TVL source (aggregator)\\n     */\\n    function emergencySetTvlSource(address source) external;\\n\\n    /**\\n     * @notice Set an asset's price source (aggregator)\\n     * @param asset The asset to change the source of\\n     * @param source The new source (aggregator)\\n     */\\n    function emergencySetAssetSource(address asset, address source) external;\\n\\n    /**\\n     * @notice Set multiple assets' pricing sources\\n     * @param assets An array of assets (tokens)\\n     * @param sources An array of price sources (aggregators)\\n     */\\n    function emergencySetAssetSources(\\n        address[] memory assets,\\n        address[] memory sources\\n    ) external;\\n\\n    /**\\n     * @notice Retrieve the asset's price from its pricing source\\n     * @param asset The asset address\\n     * @return The price of the asset\\n     */\\n    function getAssetPrice(address asset) external view returns (uint256);\\n\\n    /**\\n     * @notice Retrieve the deployed TVL from the TVL aggregator\\n     * @return The TVL\\n     */\\n    function getTvl() external view returns (uint256);\\n}\\n\"\r\n    },\r\n    \"contracts/oracle/IOverrideOracle.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: BUSDL-1.1\\npragma solidity 0.6.11;\\n\\nimport {IOracleAdapter} from \\\"./IOracleAdapter.sol\\\";\\n\\ninterface IOverrideOracle is IOracleAdapter {\\n    /**\\n     * @notice Event fired when asset value is set manually\\n     * @param asset The asset that is being overridden\\n     * @param value The new value used for the override\\n     * @param period The number of blocks the override will be active for\\n     * @param periodEnd The block on which the override ends\\n     */\\n    event AssetValueSet(\\n        address asset,\\n        uint256 value,\\n        uint256 period,\\n        uint256 periodEnd\\n    );\\n\\n    /**\\n     * @notice Event fired when manually submitted asset value is\\n     * invalidated, allowing usual Chainlink pricing.\\n     */\\n    event AssetValueUnset(address asset);\\n\\n    /**\\n     * @notice Event fired when deployed TVL is set manually\\n     * @param value The new value used for the override\\n     * @param period The number of blocks the override will be active for\\n     * @param periodEnd The block on which the override ends\\n     */\\n    event TvlSet(uint256 value, uint256 period, uint256 periodEnd);\\n\\n    /**\\n     * @notice Event fired when manually submitted TVL is\\n     * invalidated, allowing usual Chainlink pricing.\\n     */\\n    event TvlUnset();\\n\\n    /**\\n     * @notice Manually override the asset pricing source with a value\\n     * @param asset The asset that is being overriden\\n     * @param value asset value to return instead of from Chainlink\\n     * @param period length of time, in number of blocks, to use manual override\\n     */\\n    function emergencySetAssetValue(\\n        address asset,\\n        uint256 value,\\n        uint256 period\\n    ) external;\\n\\n    /**\\n     * @notice Revoke manually set value, allowing usual Chainlink pricing\\n     * @param asset address of asset to price\\n     */\\n    function emergencyUnsetAssetValue(address asset) external;\\n\\n    /**\\n     * @notice Manually override the TVL source with a value\\n     * @param value TVL to return instead of from Chainlink\\n     * @param period length of time, in number of blocks, to use manual override\\n     */\\n    function emergencySetTvl(uint256 value, uint256 period) external;\\n\\n    /// @notice Revoke manually set value, allowing usual Chainlink pricing\\n    function emergencyUnsetTvl() external;\\n\\n    /// @notice Check if TVL has active manual override\\n    function hasTvlOverride() external view returns (bool);\\n\\n    /**\\n     * @notice Check if asset has active manual override\\n     * @param asset address of the asset\\n     * @return `true` if manual override is active\\n     */\\n    function hasAssetOverride(address asset) external view returns (bool);\\n}\\n\"\r\n    },\r\n    \"contracts/oracle/ILockingOracle.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: BUSDL-1.1\\npragma solidity 0.6.11;\\n\\nimport {IOracleAdapter} from \\\"./IOracleAdapter.sol\\\";\\n\\n/**\\n * @notice For an `IOracleAdapter` that can be locked and unlocked\\n */\\ninterface ILockingOracle is IOracleAdapter {\\n    /// @notice Event fired when using the default lock\\n    event DefaultLocked(address locker, uint256 defaultPeriod, uint256 lockEnd);\\n\\n    /// @notice Event fired when using a specified lock period\\n    event Locked(address locker, uint256 activePeriod, uint256 lockEnd);\\n\\n    /// @notice Event fired when changing the default locking period\\n    event DefaultLockPeriodChanged(uint256 newPeriod);\\n\\n    /// @notice Event fired when unlocking the adapter\\n    event Unlocked();\\n\\n    /// @notice Event fired when updating the threshold for stale data\\n    event ChainlinkStalePeriodUpdated(uint256 period);\\n\\n    /// @notice Block price/value retrieval for the default locking duration\\n    function lock() external;\\n\\n    /**\\n     * @notice Block price/value retrieval for the specified duration.\\n     * @param period number of blocks to block retrieving values\\n     */\\n    function lockFor(uint256 period) external;\\n\\n    /**\\n     * @notice Unblock price/value retrieval.  Should only be callable\\n     * by the Emergency Safe.\\n     */\\n    function emergencyUnlock() external;\\n\\n    /**\\n     * @notice Set the length of time before values can be retrieved.\\n     * @param newPeriod number of blocks before values can be retrieved\\n     */\\n    function setDefaultLockPeriod(uint256 newPeriod) external;\\n\\n    /**\\n     * @notice Set the length of time before an agg value is considered stale.\\n     * @param chainlinkStalePeriod_ the length of time in seconds\\n     */\\n    function setChainlinkStalePeriod(uint256 chainlinkStalePeriod_) external;\\n\\n    /**\\n     * @notice Get the length of time, in number of blocks, before values\\n     * can be retrieved.\\n     */\\n    function defaultLockPeriod() external returns (uint256 period);\\n\\n    /// @notice Check if the adapter is blocked from retrieving values.\\n    function isLocked() external view returns (bool);\\n}\\n\"\r\n    },\r\n    \"@chainlink/contracts/src/v0.6/Median.sol\": {\r\n      \"content\": \"pragma solidity ^0.6.0;\\n\\nimport \\\"./vendor/SafeMath.sol\\\";\\nimport \\\"./SignedSafeMath.sol\\\";\\n\\nlibrary Median {\\n  using SignedSafeMath for int256;\\n\\n  int256 constant INT_MAX = 2**255-1;\\n\\n  /**\\n   * @notice Returns the sorted middle, or the average of the two middle indexed items if the\\n   * array has an even number of elements.\\n   * @dev The list passed as an argument isn't modified.\\n   * @dev This algorithm has expected runtime O(n), but for adversarially chosen inputs\\n   * the runtime is O(n^2).\\n   * @param list The list of elements to compare\\n   */\\n  function calculate(int256[] memory list)\\n    internal\\n    pure\\n    returns (int256)\\n  {\\n    return calculateInplace(copy(list));\\n  }\\n\\n  /**\\n   * @notice See documentation for function calculate.\\n   * @dev The list passed as an argument may be permuted.\\n   */\\n  function calculateInplace(int256[] memory list)\\n    internal\\n    pure\\n    returns (int256)\\n  {\\n    require(0 < list.length, \\\"list must not be empty\\\");\\n    uint256 len = list.length;\\n    uint256 middleIndex = len / 2;\\n    if (len % 2 == 0) {\\n      int256 median1;\\n      int256 median2;\\n      (median1, median2) = quickselectTwo(list, 0, len - 1, middleIndex - 1, middleIndex);\\n      return SignedSafeMath.avg(median1, median2);\\n    } else {\\n      return quickselect(list, 0, len - 1, middleIndex);\\n    }\\n  }\\n\\n  /**\\n   * @notice Maximum length of list that shortSelectTwo can handle\\n   */\\n  uint256 constant SHORTSELECTTWO_MAX_LENGTH = 7;\\n\\n  /**\\n   * @notice Select the k1-th and k2-th element from list of length at most 7\\n   * @dev Uses an optimal sorting network\\n   */\\n  function shortSelectTwo(\\n    int256[] memory list,\\n    uint256 lo,\\n    uint256 hi,\\n    uint256 k1,\\n    uint256 k2\\n  )\\n    private\\n    pure\\n    returns (int256 k1th, int256 k2th)\\n  {\\n    // Uses an optimal sorting network (https://en.wikipedia.org/wiki/Sorting_network)\\n    // for lists of length 7. Network layout is taken from\\n    // http://jgamble.ripco.net/cgi-bin/nw.cgi?inputs=7&algorithm=hibbard&output=svg\\n\\n    uint256 len = hi + 1 - lo;\\n    int256 x0 = list[lo + 0];\\n    int256 x1 = 1 < len ? list[lo + 1] : INT_MAX;\\n    int256 x2 = 2 < len ? list[lo + 2] : INT_MAX;\\n    int256 x3 = 3 < len ? list[lo + 3] : INT_MAX;\\n    int256 x4 = 4 < len ? list[lo + 4] : INT_MAX;\\n    int256 x5 = 5 < len ? list[lo + 5] : INT_MAX;\\n    int256 x6 = 6 < len ? list[lo + 6] : INT_MAX;\\n\\n    if (x0 > x1) {(x0, x1) = (x1, x0);}\\n    if (x2 > x3) {(x2, x3) = (x3, x2);}\\n    if (x4 > x5) {(x4, x5) = (x5, x4);}\\n    if (x0 > x2) {(x0, x2) = (x2, x0);}\\n    if (x1 > x3) {(x1, x3) = (x3, x1);}\\n    if (x4 > x6) {(x4, x6) = (x6, x4);}\\n    if (x1 > x2) {(x1, x2) = (x2, x1);}\\n    if (x5 > x6) {(x5, x6) = (x6, x5);}\\n    if (x0 > x4) {(x0, x4) = (x4, x0);}\\n    if (x1 > x5) {(x1, x5) = (x5, x1);}\\n    if (x2 > x6) {(x2, x6) = (x6, x2);}\\n    if (x1 > x4) {(x1, x4) = (x4, x1);}\\n    if (x3 > x6) {(x3, x6) = (x6, x3);}\\n    if (x2 > x4) {(x2, x4) = (x4, x2);}\\n    if (x3 > x5) {(x3, x5) = (x5, x3);}\\n    if (x3 > x4) {(x3, x4) = (x4, x3);}\\n\\n    uint256 index1 = k1 - lo;\\n    if (index1 == 0) {k1th = x0;}\\n    else if (index1 == 1) {k1th = x1;}\\n    else if (index1 == 2) {k1th = x2;}\\n    else if (index1 == 3) {k1th = x3;}\\n    else if (index1 == 4) {k1th = x4;}\\n    else if (index1 == 5) {k1th = x5;}\\n    else if (index1 == 6) {k1th = x6;}\\n    else {revert(\\\"k1 out of bounds\\\");}\\n\\n    uint256 index2 = k2 - lo;\\n    if (k1 == k2) {return (k1th, k1th);}\\n    else if (index2 == 0) {return (k1th, x0);}\\n    else if (index2 == 1) {return (k1th, x1);}\\n    else if (index2 == 2) {return (k1th, x2);}\\n    else if (index2 == 3) {return (k1th, x3);}\\n    else if (index2 == 4) {return (k1th, x4);}\\n    else if (index2 == 5) {return (k1th, x5);}\\n    else if (index2 == 6) {return (k1th, x6);}\\n    else {revert(\\\"k2 out of bounds\\\");}\\n  }\\n\\n  /**\\n   * @notice Selects the k-th ranked element from list, looking only at indices between lo and hi\\n   * (inclusive). Modifies list in-place.\\n   */\\n  function quickselect(int256[] memory list, uint256 lo, uint256 hi, uint256 k)\\n    private\\n    pure\\n    returns (int256 kth)\\n  {\\n    require(lo <= k);\\n    require(k <= hi);\\n    while (lo < hi) {\\n      if (hi - lo < SHORTSELECTTWO_MAX_LENGTH) {\\n        int256 ignore;\\n        (kth, ignore) = shortSelectTwo(list, lo, hi, k, k);\\n        return kth;\\n      }\\n      uint256 pivotIndex = partition(list, lo, hi);\\n      if (k <= pivotIndex) {\\n        // since pivotIndex < (original hi passed to partition),\\n        // termination is guaranteed in this case\\n        hi = pivotIndex;\\n      } else {\\n        // since (original lo passed to partition) <= pivotIndex,\\n        // termination is guaranteed in this case\\n        lo = pivotIndex + 1;\\n      }\\n    }\\n    return list[lo];\\n  }\\n\\n  /**\\n   * @notice Selects the k1-th and k2-th ranked elements from list, looking only at indices between\\n   * lo and hi (inclusive). Modifies list in-place.\\n   */\\n  function quickselectTwo(\\n    int256[] memory list,\\n    uint256 lo,\\n    uint256 hi,\\n    uint256 k1,\\n    uint256 k2\\n  )\\n    internal // for testing\\n    pure\\n    returns (int256 k1th, int256 k2th)\\n  {\\n    require(k1 < k2);\\n    require(lo <= k1 && k1 <= hi);\\n    require(lo <= k2 && k2 <= hi);\\n\\n    while (true) {\\n      if (hi - lo < SHORTSELECTTWO_MAX_LENGTH) {\\n        return shortSelectTwo(list, lo, hi, k1, k2);\\n      }\\n      uint256 pivotIdx = partition(list, lo, hi);\\n      if (k2 <= pivotIdx) {\\n        hi = pivotIdx;\\n      } else if (pivotIdx < k1) {\\n        lo = pivotIdx + 1;\\n      } else {\\n        assert(k1 <= pivotIdx && pivotIdx < k2);\\n        k1th = quickselect(list, lo, pivotIdx, k1);\\n        k2th = quickselect(list, pivotIdx + 1, hi, k2);\\n        return (k1th, k2th);\\n      }\\n    }\\n  }\\n\\n  /**\\n   * @notice Partitions list in-place using Hoare's partitioning scheme.\\n   * Only elements of list between indices lo and hi (inclusive) will be modified.\\n   * Returns an index i, such that:\\n   * - lo <= i < hi\\n   * - forall j in [lo, i]. list[j] <= list[i]\\n   * - forall j in [i, hi]. list[i] <= list[j]\\n   */\\n  function partition(int256[] memory list, uint256 lo, uint256 hi)\\n    private\\n    pure\\n    returns (uint256)\\n  {\\n    // We don't care about overflow of the addition, because it would require a list\\n    // larger than any feasible computer's memory.\\n    int256 pivot = list[(lo + hi) / 2];\\n    lo -= 1; // this can underflow. that's intentional.\\n    hi += 1;\\n    while (true) {\\n      do {\\n        lo += 1;\\n      } while (list[lo] < pivot);\\n      do {\\n        hi -= 1;\\n      } while (list[hi] > pivot);\\n      if (lo < hi) {\\n        (list[lo], list[hi]) = (list[hi], list[lo]);\\n      } else {\\n        // Let orig_lo and orig_hi be the original values of lo and hi passed to partition.\\n        // Then, hi < orig_hi, because hi decreases *strictly* monotonically\\n        // in each loop iteration and\\n        // - either list[orig_hi] > pivot, in which case the first loop iteration\\n        //   will achieve hi < orig_hi;\\n        // - or list[orig_hi] <= pivot, in which case at least two loop iterations are\\n        //   needed:\\n        //   - lo will have to stop at least once in the interval\\n        //     [orig_lo, (orig_lo + orig_hi)/2]\\n        //   - (orig_lo + orig_hi)/2 < orig_hi\\n        return hi;\\n      }\\n    }\\n  }\\n\\n  /**\\n   * @notice Makes an in-memory copy of the array passed in\\n   * @param list Reference to the array to be copied\\n   */\\n  function copy(int256[] memory list)\\n    private\\n    pure\\n    returns(int256[] memory)\\n  {\\n    int256[] memory list2 = new int256[](list.length);\\n    for (uint256 i = 0; i < list.length; i++) {\\n      list2[i] = list[i];\\n    }\\n    return list2;\\n  }\\n}\\n\"\r\n    },\r\n    \"@chainlink/contracts/src/v0.6/Owned.sol\": {\r\n      \"content\": \"pragma solidity ^0.6.0;\\n\\n/**\\n * @title The Owned contract\\n * @notice A contract with helpers for basic contract ownership.\\n */\\ncontract Owned {\\n\\n  address payable public owner;\\n  address private pendingOwner;\\n\\n  event OwnershipTransferRequested(\\n    address indexed from,\\n    address indexed to\\n  );\\n  event OwnershipTransferred(\\n    address indexed from,\\n    address indexed to\\n  );\\n\\n  constructor() public {\\n    owner = msg.sender;\\n  }\\n\\n  /**\\n   * @dev Allows an owner to begin transferring ownership to a new address,\\n   * pending.\\n   */\\n  function transferOwnership(address _to)\\n    external\\n    onlyOwner()\\n  {\\n    pendingOwner = _to;\\n\\n    emit OwnershipTransferRequested(owner, _to);\\n  }\\n\\n  /**\\n   * @dev Allows an ownership transfer to be completed by the recipient.\\n   */\\n  function acceptOwnership()\\n    external\\n  {\\n    require(msg.sender == pendingOwner, \\\"Must be proposed owner\\\");\\n\\n    address oldOwner = owner;\\n    owner = msg.sender;\\n    pendingOwner = address(0);\\n\\n    emit OwnershipTransferred(oldOwner, msg.sender);\\n  }\\n\\n  /**\\n   * @dev Reverts if called by anyone other than the contract owner.\\n   */\\n  modifier onlyOwner() {\\n    require(msg.sender == owner, \\\"Only callable by owner\\\");\\n    _;\\n  }\\n\\n}\\n\"\r\n    },\r\n    \"@chainlink/contracts/src/v0.6/SafeMath128.sol\": {\r\n      \"content\": \"pragma solidity ^0.6.0;\\n\\n/**\\n * @dev Wrappers over Solidity's arithmetic operations with added overflow\\n * checks.\\n *\\n * Arithmetic operations in Solidity wrap on overflow. This can easily result\\n * in bugs, because programmers usually assume that an overflow raises an\\n * error, which is the standard behavior in high level programming languages.\\n * `SafeMath` restores this intuition by reverting the transaction when an\\n * operation overflows.\\n *\\n * Using this library instead of the unchecked operations eliminates an entire\\n * class of bugs, so it's recommended to use it always.\\n *\\n * This library is a version of Open Zeppelin's SafeMath, modified to support\\n * unsigned 128 bit integers.\\n */\\nlibrary SafeMath128 {\\n  /**\\n    * @dev Returns the addition of two unsigned integers, reverting on\\n    * overflow.\\n    *\\n    * Counterpart to Solidity's `+` operator.\\n    *\\n    * Requirements:\\n    * - Addition cannot overflow.\\n    */\\n  function add(uint128 a, uint128 b) internal pure returns (uint128) {\\n    uint128 c = a + b;\\n    require(c >= a, \\\"SafeMath: addition overflow\\\");\\n\\n    return c;\\n  }\\n\\n  /**\\n    * @dev Returns the subtraction of two unsigned integers, reverting on\\n    * overflow (when the result is negative).\\n    *\\n    * Counterpart to Solidity's `-` operator.\\n    *\\n    * Requirements:\\n    * - Subtraction cannot overflow.\\n    */\\n  function sub(uint128 a, uint128 b) internal pure returns (uint128) {\\n    require(b <= a, \\\"SafeMath: subtraction overflow\\\");\\n    uint128 c = a - b;\\n\\n    return c;\\n  }\\n\\n  /**\\n    * @dev Returns the multiplication of two unsigned integers, reverting on\\n    * overflow.\\n    *\\n    * Counterpart to Solidity's `*` operator.\\n    *\\n    * Requirements:\\n    * - Multiplication cannot overflow.\\n    */\\n  function mul(uint128 a, uint128 b) internal pure returns (uint128) {\\n    // Gas optimization: this is cheaper than requiring 'a' not being zero, but the\\n    // benefit is lost if 'b' is also tested.\\n    // See: https://github.com/OpenZeppelin/openzeppelin-solidity/pull/522\\n    if (a == 0) {\\n      return 0;\\n    }\\n\\n    uint128 c = a * b;\\n    require(c / a == b, \\\"SafeMath: multiplication overflow\\\");\\n\\n    return c;\\n  }\\n\\n  /**\\n    * @dev Returns the integer division of two unsigned integers. Reverts on\\n    * division by zero. The result is rounded towards zero.\\n    *\\n    * Counterpart to Solidity's `/` operator. Note: this function uses a\\n    * `revert` opcode (which leaves remaining gas untouched) while Solidity\\n    * uses an invalid opcode to revert (consuming all remaining gas).\\n    *\\n    * Requirements:\\n    * - The divisor cannot be zero.\\n    */\\n  function div(uint128 a, uint128 b) internal pure returns (uint128) {\\n    // Solidity only automatically asserts when dividing by 0\\n    require(b > 0, \\\"SafeMath: division by zero\\\");\\n    uint128 c = a / b;\\n    // assert(a == b * c + a % b); // There is no case in which this doesn't hold\\n\\n    return c;\\n  }\\n\\n  /**\\n    * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\\n    * Reverts when dividing by zero.\\n    *\\n    * Counterpart to Solidity's `%` operator. This function uses a `revert`\\n    * opcode (which leaves remaining gas untouched) while Solidity uses an\\n    * invalid opcode to revert (consuming all remaining gas).\\n    *\\n    * Requirements:\\n    * - The divisor cannot be zero.\\n    */\\n  function mod(uint128 a, uint128 b) internal pure returns (uint128) {\\n    require(b != 0, \\\"SafeMath: modulo by zero\\\");\\n    return a % b;\\n  }\\n}\\n\"\r\n    },\r\n    \"@chainlink/contracts/src/v0.6/SafeMath32.sol\": {\r\n      \"content\": \"pragma solidity ^0.6.0;\\n\\n/**\\n * @dev Wrappers over Solidity's arithmetic operations with added overflow\\n * checks.\\n *\\n * Arithmetic operations in Solidity wrap on overflow. This can easily result\\n * in bugs, because programmers usually assume that an overflow raises an\\n * error, which is the standard behavior in high level programming languages.\\n * `SafeMath` restores this intuition by reverting the transaction when an\\n * operation overflows.\\n *\\n * Using this library instead of the unchecked operations eliminates an entire\\n * class of bugs, so it's recommended to use it always.\\n *\\n * This library is a version of Open Zeppelin's SafeMath, modified to support\\n * unsigned 32 bit integers.\\n */\\nlibrary SafeMath32 {\\n  /**\\n    * @dev Returns the addition of two unsigned integers, reverting on\\n    * overflow.\\n    *\\n    * Counterpart to Solidity's `+` operator.\\n    *\\n    * Requirements:\\n    * - Addition cannot overflow.\\n    */\\n  function add(uint32 a, uint32 b) internal pure returns (uint32) {\\n    uint32 c = a + b;\\n    require(c >= a, \\\"SafeMath: addition overflow\\\");\\n\\n    return c;\\n  }\\n\\n  /**\\n    * @dev Returns the subtraction of two unsigned integers, reverting on\\n    * overflow (when the result is negative).\\n    *\\n    * Counterpart to Solidity's `-` operator.\\n    *\\n    * Requirements:\\n    * - Subtraction cannot overflow.\\n    */\\n  function sub(uint32 a, uint32 b) internal pure returns (uint32) {\\n    require(b <= a, \\\"SafeMath: subtraction overflow\\\");\\n    uint32 c = a - b;\\n\\n    return c;\\n  }\\n\\n  /**\\n    * @dev Returns the multiplication of two unsigned integers, reverting on\\n    * overflow.\\n    *\\n    * Counterpart to Solidity's `*` operator.\\n    *\\n    * Requirements:\\n    * - Multiplication cannot overflow.\\n    */\\n  function mul(uint32 a, uint32 b) internal pure returns (uint32) {\\n    // Gas optimization: this is cheaper than requiring 'a' not being zero, but the\\n    // benefit is lost if 'b' is also tested.\\n    // See: https://github.com/OpenZeppelin/openzeppelin-solidity/pull/522\\n    if (a == 0) {\\n      return 0;\\n    }\\n\\n    uint32 c = a * b;\\n    require(c / a == b, \\\"SafeMath: multiplication overflow\\\");\\n\\n    return c;\\n  }\\n\\n  /**\\n    * @dev Returns the integer division of two unsigned integers. Reverts on\\n    * division by zero. The result is rounded towards zero.\\n    *\\n    * Counterpart to Solidity's `/` operator. Note: this function uses a\\n    * `revert` opcode (which leaves remaining gas untouched) while Solidity\\n    * uses an invalid opcode to revert (consuming all remaining gas).\\n    *\\n    * Requirements:\\n    * - The divisor cannot be zero.\\n    */\\n  function div(uint32 a, uint32 b) internal pure returns (uint32) {\\n    // Solidity only automatically asserts when dividing by 0\\n    require(b > 0, \\\"SafeMath: division by zero\\\");\\n    uint32 c = a / b;\\n    // assert(a == b * c + a % b); // There is no case in which this doesn't hold\\n\\n    return c;\\n  }\\n\\n  /**\\n    * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\\n    * Reverts when dividing by zero.\\n    *\\n    * Counterpart to Solidity's `%` operator. This function uses a `revert`\\n    * opcode (which leaves remaining gas untouched) while Solidity uses an\\n    * invalid opcode to revert (consuming all remaining gas).\\n    *\\n    * Requirements:\\n    * - The divisor cannot be zero.\\n    */\\n  function mod(uint32 a, uint32 b) internal pure returns (uint32) {\\n    require(b != 0, \\\"SafeMath: modulo by zero\\\");\\n    return a % b;\\n  }\\n}\\n\"\r\n    },\r\n    \"@chainlink/contracts/src/v0.6/SafeMath64.sol\": {\r\n      \"content\": \"pragma solidity ^0.6.0;\\n\\n/**\\n * @dev Wrappers over Solidity's arithmetic operations with added overflow\\n * checks.\\n *\\n * Arithmetic operations in Solidity wrap on overflow. This can easily result\\n * in bugs, because programmers usually assume that an overflow raises an\\n * error, which is the standard behavior in high level programming languages.\\n * `SafeMath` restores this intuition by reverting the transaction when an\\n * operation overflows.\\n *\\n * Using this library instead of the unchecked operations eliminates an entire\\n * class of bugs, so it's recommended to use it always.\\n *\\n * This library is a version of Open Zeppelin's SafeMath, modified to support\\n * unsigned 64 bit integers.\\n */\\nlibrary SafeMath64 {\\n  /**\\n    * @dev Returns the addition of two unsigned integers, reverting on\\n    * overflow.\\n    *\\n    * Counterpart to Solidity's `+` operator.\\n    *\\n    * Requirements:\\n    * - Addition cannot overflow.\\n    */\\n  function add(uint64 a, uint64 b) internal pure returns (uint64) {\\n    uint64 c = a + b;\\n    require(c >= a, \\\"SafeMath: addition overflow\\\");\\n\\n    return c;\\n  }\\n\\n  /**\\n    * @dev Returns the subtraction of two unsigned integers, reverting on\\n    * overflow (when the result is negative).\\n    *\\n    * Counterpart to Solidity's `-` operator.\\n    *\\n    * Requirements:\\n    * - Subtraction cannot overflow.\\n    */\\n  function sub(uint64 a, uint64 b) internal pure returns (uint64) {\\n    require(b <= a, \\\"SafeMath: subtraction overflow\\\");\\n    uint64 c = a - b;\\n\\n    return c;\\n  }\\n\\n  /**\\n    * @dev Returns the multiplication of two unsigned integers, reverting on\\n    * overflow.\\n    *\\n    * Counterpart to Solidity's `*` operator.\\n    *\\n    * Requirements:\\n    * - Multiplication cannot overflow.\\n    */\\n  function mul(uint64 a, uint64 b) internal pure returns (uint64) {\\n    // Gas optimization: this is cheaper than requiring 'a' not being zero, but the\\n    // benefit is lost if 'b' is also tested.\\n    // See: https://github.com/OpenZeppelin/openzeppelin-solidity/pull/522\\n    if (a == 0) {\\n      return 0;\\n    }\\n\\n    uint64 c = a * b;\\n    require(c / a == b, \\\"SafeMath: multiplication overflow\\\");\\n\\n    return c;\\n  }\\n\\n  /**\\n    * @dev Returns the integer division of two unsigned integers. Reverts on\\n    * division by zero. The result is rounded towards zero.\\n    *\\n    * Counterpart to Solidity's `/` operator. Note: this function uses a\\n    * `revert` opcode (which leaves remaining gas untouched) while Solidity\\n    * uses an invalid opcode to revert (consuming all remaining gas).\\n    *\\n    * Requirements:\\n    * - The divisor cannot be zero.\\n    */\\n  function div(uint64 a, uint64 b) internal pure returns (uint64) {\\n    // Solidity only automatically asserts when dividing by 0\\n    require(b > 0, \\\"SafeMath: division by zero\\\");\\n    uint64 c = a / b;\\n    // assert(a == b * c + a % b); // There is no case in which this doesn't hold\\n\\n    return c;\\n  }\\n\\n  /**\\n    * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\\n    * Reverts when dividing by zero.\\n    *\\n    * Counterpart to Solidity's `%` operator. This function uses a `revert`\\n    * opcode (which leaves remaining gas untouched) while Solidity uses an\\n    * invalid opcode to revert (consuming all remaining gas).\\n    *\\n    * Requirements:\\n    * - The divisor cannot be zero.\\n    */\\n  function mod(uint64 a, uint64 b) internal pure returns (uint64) {\\n    require(b != 0, \\\"SafeMath: modulo by zero\\\");\\n    return a % b;\\n  }\\n}\\n\"\r\n    },\r\n    \"@chainlink/contracts/src/v0.6/interfaces/AggregatorV2V3Interface.sol\": {\r\n      \"content\": \"pragma solidity >=0.6.0;\\n\\nimport \\\"./AggregatorInterface.sol\\\";\\nimport \\\"./AggregatorV3Interface.sol\\\";\\n\\ninterface AggregatorV2V3Interface is AggregatorInterface, AggregatorV3Interface\\n{\\n}\\n\"\r\n    },\r\n    \"@chainlink/contracts/src/v0.6/interfaces/AggregatorValidatorInterface.sol\": {\r\n      \"content\": \"pragma solidity ^0.6.0;\\n\\ninterface AggregatorValidatorInterface {\\n  function validate(\\n    uint256 previousRoundId,\\n    int256 previousAnswer,\\n    uint256 currentRoundId,\\n    int256 currentAnswer\\n  ) external returns (bool);\\n}\\n\"\r\n    },\r\n    \"@chainlink/contracts/src/v0.6/interfaces/LinkTokenInterface.sol\": {\r\n      \"content\": \"pragma solidity ^0.6.0;\\n\\ninterface LinkTokenInterface {\\n  function allowance(address owner, address spender) external view returns (uint256 remaining);\\n  function approve(address spender, uint256 value) external returns (bool success);\\n  function balanceOf(address owner) external view returns (uint256 balance);\\n  function decimals() external view returns (uint8 decimalPlaces);\\n  function decreaseApproval(address spender, uint256 addedValue) external returns (bool success);\\n  function increaseApproval(address spender, uint256 subtractedValue) external;\\n  function name() external view returns (string memory tokenName);\\n  function symbol() external view returns (string memory tokenSymbol);\\n  function totalSupply() external view returns (uint256 totalTokensIssued);\\n  function transfer(address to, uint256 value) external returns (bool success);\\n  function transferAndCall(address to, uint256 value, bytes calldata data) external returns (bool success);\\n  function transferFrom(address from, address to, uint256 value) external returns (bool success);\\n}\\n\"\r\n    },\r\n    \"@chainlink/contracts/src/v0.6/vendor/SafeMath.sol\": {\r\n      \"content\": \"pragma solidity ^0.6.0;\\n\\n/**\\n * @dev Wrappers over Solidity's arithmetic operations with added overflow\\n * checks.\\n *\\n * Arithmetic operations in Solidity wrap on overflow. This can easily result\\n * in bugs, because programmers usually assume that an overflow raises an\\n * error, which is the standard behavior in high level programming languages.\\n * `SafeMath` restores this intuition by reverting the transaction when an\\n * operation overflows.\\n *\\n * Using this library instead of the unchecked operations eliminates an entire\\n * class of bugs, so it's recommended to use it always.\\n */\\nlibrary SafeMath {\\n  /**\\n    * @dev Returns the addition of two unsigned integers, reverting on\\n    * overflow.\\n    *\\n    * Counterpart to Solidity's `+` operator.\\n    *\\n    * Requirements:\\n    * - Addition cannot overflow.\\n    */\\n  function add(uint256 a, uint256 b) internal pure returns (uint256) {\\n    uint256 c = a + b;\\n    require(c >= a, \\\"SafeMath: addition overflow\\\");\\n\\n    return c;\\n  }\\n\\n  /**\\n    * @dev Returns the subtraction of two unsigned integers, reverting on\\n    * overflow (when the result is negative).\\n    *\\n    * Counterpart to Solidity's `-` operator.\\n    *\\n    * Requirements:\\n    * - Subtraction cannot overflow.\\n    */\\n  function sub(uint256 a, uint256 b) internal pure returns (uint256) {\\n    require(b <= a, \\\"SafeMath: subtraction overflow\\\");\\n    uint256 c = a - b;\\n\\n    return c;\\n  }\\n\\n  /**\\n    * @dev Returns the multiplication of two unsigned integers, reverting on\\n    * overflow.\\n    *\\n    * Counterpart to Solidity's `*` operator.\\n    *\\n    * Requirements:\\n    * - Multiplication cannot overflow.\\n    */\\n  function mul(uint256 a, uint256 b) internal pure returns (uint256) {\\n    // Gas optimization: this is cheaper than requiring 'a' not being zero, but the\\n    // benefit is lost if 'b' is also tested.\\n    // See: https://github.com/OpenZeppelin/openzeppelin-solidity/pull/522\\n    if (a == 0) {\\n      return 0;\\n    }\\n\\n    uint256 c = a * b;\\n    require(c / a == b, \\\"SafeMath: multiplication overflow\\\");\\n\\n    return c;\\n  }\\n\\n  /**\\n    * @dev Returns the integer division of two unsigned integers. Reverts on\\n    * division by zero. The result is rounded towards zero.\\n    *\\n    * Counterpart to Solidity's `/` operator. Note: this function uses a\\n    * `revert` opcode (which leaves remaining gas untouched) while Solidity\\n    * uses an invalid opcode to revert (consuming all remaining gas).\\n    *\\n    * Requirements:\\n    * - The divisor cannot be zero.\\n    */\\n  function div(uint256 a, uint256 b) internal pure returns (uint256) {\\n    // Solidity only automatically asserts when dividing by 0\\n    require(b > 0, \\\"SafeMath: division by zero\\\");\\n    uint256 c = a / b;\\n    // assert(a == b * c + a % b); // There is no case in which this doesn't hold\\n\\n    return c;\\n  }\\n\\n  /**\\n    * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\\n    * Reverts when dividing by zero.\\n    *\\n    * Counterpart to Solidity's `%` operator. This function uses a `revert`\\n    * opcode (which leaves remaining gas untouched) while Solidity uses an\\n    * invalid opcode to revert (consuming all remaining gas).\\n    *\\n    * Requirements:\\n    * - The divisor cannot be zero.\\n    */\\n  function mod(uint256 a, uint256 b) internal pure returns (uint256) {\\n    require(b != 0, \\\"SafeMath: modulo by zero\\\");\\n    return a % b;\\n  }\\n}\\n\"\r\n    },\r\n    \"@chainlink/contracts/src/v0.6/SignedSafeMath.sol\": {\r\n      \"content\": \"pragma solidity ^0.6.0;\\n\\nlibrary SignedSafeMath {\\n  int256 constant private _INT256_MIN = -2**255;\\n\\n  /**\\n   * @dev Multiplies two signed integers, reverts on overflow.\\n   */\\n  function mul(int256 a, int256 b) internal pure returns (int256) {\\n    // Gas optimization: this is cheaper than requiring 'a' not being zero, but the\\n    // benefit is lost if 'b' is also tested.\\n    // See: https://github.com/OpenZeppelin/openzeppelin-contracts/pull/522\\n    if (a == 0) {\\n      return 0;\\n    }\\n\\n    require(!(a == -1 && b == _INT256_MIN), \\\"SignedSafeMath: multiplication overflow\\\");\\n\\n    int256 c = a * b;\\n    require(c / a == b, \\\"SignedSafeMath: multiplication overflow\\\");\\n\\n    return c;\\n  }\\n\\n  /**\\n   * @dev Integer division of two signed integers truncating the quotient, reverts on division by zero.\\n   */\\n  function div(int256 a, int256 b) internal pure returns (int256) {\\n    require(b != 0, \\\"SignedSafeMath: division by zero\\\");\\n    require(!(b == -1 && a == _INT256_MIN), \\\"SignedSafeMath: division overflow\\\");\\n\\n    int256 c = a / b;\\n\\n    return c;\\n  }\\n\\n  /**\\n   * @dev Subtracts two signed integers, reverts on overflow.\\n   */\\n  function sub(int256 a, int256 b) internal pure returns (int256) {\\n    int256 c = a - b;\\n    require((b >= 0 && c <= a) || (b < 0 && c > a), \\\"SignedSafeMath: subtraction overflow\\\");\\n\\n    return c;\\n  }\\n\\n  /**\\n   * @dev Adds two signed integers, reverts on overflow.\\n   */\\n  function add(int256 a, int256 b) internal pure returns (int256) {\\n    int256 c = a + b;\\n    require((b >= 0 && c >= a) || (b < 0 && c < a), \\\"SignedSafeMath: addition overflow\\\");\\n\\n    return c;\\n  }\\n\\n  /**\\n   * @notice Computes average of two signed integers, ensuring that the computation\\n   * doesn't overflow.\\n   * @dev If the result is not an integer, it is rounded towards zero. For example,\\n   * avg(-3, -4) = -3\\n   */\\n  function avg(int256 _a, int256 _b)\\n    internal\\n    pure\\n    returns (int256)\\n  {\\n    if ((_a < 0 && _b > 0) || (_a > 0 && _b < 0)) {\\n      return add(_a, _b) / 2;\\n    }\\n    int256 remainder = (_a % 2 + _b % 2) / 2;\\n    return add(add(_a / 2, _b / 2), remainder);\\n  }\\n}\\n\"\r\n    },\r\n    \"@chainlink/contracts/src/v0.6/interfaces/AggregatorInterface.sol\": {\r\n      \"content\": \"pragma solidity >=0.6.0;\\n\\ninterface AggregatorInterface {\\n  function latestAnswer() external view returns (int256);\\n  function latestTimestamp() external view returns (uint256);\\n  function latestRound() external view returns (uint256);\\n  function getAnswer(uint256 roundId) external view returns (int256);\\n  function getTimestamp(uint256 roundId) external view returns (uint256);\\n\\n  event AnswerUpdated(int256 indexed current, uint256 indexed roundId, uint256 updatedAt);\\n  event NewRound(uint256 indexed roundId, address indexed startedBy, uint256 startedAt);\\n}\\n\"\r\n    },\r\n    \"@chainlink/contracts/src/v0.6/interfaces/AggregatorV3Interface.sol\": {\r\n      \"content\": \"pragma solidity >=0.6.0;\\n\\ninterface AggregatorV3Interface {\\n\\n  function decimals() external view returns (uint8);\\n  function description() external view returns (string memory);\\n  function version() external view returns (uint256);\\n\\n  // getRoundData and latestRoundData should both raise \\\"No data present\\\"\\n  // if they do not have data to report, instead of returning unset values\\n  // which could be misinterpreted as actual reported values.\\n  function getRoundData(uint80 _roundId)\\n    external\\n    view\\n    returns (\\n      uint80 roundId,\\n      int256 answer,\\n      uint256 startedAt,\\n      uint256 updatedAt,\\n      uint80 answeredInRound\\n    );\\n  function latestRoundData()\\n    external\\n    view\\n    returns (\\n      uint80 roundId,\\n      int256 answer,\\n      uint256 startedAt,\\n      uint256 updatedAt,\\n      uint80 answeredInRound\\n    );\\n\\n}\\n\"\r\n    },\r\n    \"contracts/tvl/IErc20Allocation.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: BUSDL-1.1\\npragma solidity 0.6.11;\\n\\nimport {IERC20, IDetailedERC20} from \\\"contracts/common/Imports.sol\\\";\\n\\n/**\\n * @notice An asset allocation for tokens not stored in a protocol\\n * @dev `IZap`s and `ISwap`s register these separate from other allocations\\n * @dev Unlike other asset allocations, new tokens can be added or removed\\n * @dev Registration can override `symbol` and `decimals` manually because\\n * they are optional in the ERC20 standard.\\n */\\ninterface IErc20Allocation {\\n    /** @notice Log when an ERC20 allocation is registered */\\n    event Erc20TokenRegistered(IERC20 token, string symbol, uint8 decimals);\\n\\n    /** @notice Log when an ERC20 allocation is removed */\\n    event Erc20TokenRemoved(IERC20 token);\\n\\n    /**\\n     * @notice Add a new ERC20 token to the asset allocation\\n     * @dev Should not allow duplicate tokens\\n     * @param token The new token\\n     */\\n    function registerErc20Token(IDetailedERC20 token) external;\\n\\n    /**\\n     * @notice Add a new ERC20 token to the asset allocation\\n     * @dev Should not allow duplicate tokens\\n     * @param token The new token\\n     * @param symbol Override the token symbol\\n     */\\n    function registerErc20Token(IDetailedERC20 token, string calldata symbol)\\n        external;\\n\\n    /**\\n     * @notice Add a new ERC20 token to the asset allocation\\n     * @dev Should not allow duplicate tokens\\n     * @param token The new token\\n     * @param symbol Override the token symbol\\n     * @param decimals Override the token decimals\\n     */\\n    function registerErc20Token(\\n        IERC20 token,\\n        string calldata symbol,\\n        uint8 decimals\\n    ) external;\\n\\n    /**\\n     * @notice Remove an ERC20 token from the asset allocation\\n     * @param token The token to remove\\n     */\\n    function removeErc20Token(IERC20 token) external;\\n\\n    /**\\n     * @notice Check if an ERC20 token is registered\\n     * @param token The token to check\\n     * @return `true` if the token is registered, `false` otherwise\\n     */\\n    function isErc20TokenRegistered(IERC20 token) external view returns (bool);\\n\\n    /**\\n     * @notice Check if multiple ERC20 tokens are ALL registered\\n     * @param tokens An array of tokens to check\\n     * @return `true` if every token is registered, `false` otherwise\\n     */\\n    function isErc20TokenRegistered(IERC20[] calldata tokens)\\n        external\\n        view\\n        returns (bool);\\n}\\n\"\r\n    },\r\n    \"contracts/tvl/AssetAllocationBase.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: BUSDL-1.1\\npragma solidity 0.6.11;\\npragma experimental ABIEncoderV2;\\n\\nimport {IAssetAllocation} from \\\"contracts/common/Imports.sol\\\";\\n\\nabstract contract AssetAllocationBase is IAssetAllocation {\\n    function numberOfTokens() external view override returns (uint256) {\\n        return tokens().length;\\n    }\\n\\n    function symbolOf(uint8 tokenIndex)\\n        public\\n        view\\n        override\\n        returns (string memory)\\n    {\\n        return tokens()[tokenIndex].symbol;\\n    }\\n\\n    function decimalsOf(uint8 tokenIndex) public view override returns (uint8) {\\n        return tokens()[tokenIndex].decimals;\\n    }\\n\\n    function addressOf(uint8 tokenIndex) public view returns (address) {\\n        return tokens()[tokenIndex].token;\\n    }\\n\\n    function tokens() public view virtual override returns (TokenData[] memory);\\n}\\n\"\r\n    },\r\n    \"contracts/deploy/factories.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: BUSDL-1.1\\npragma solidity 0.6.11;\\npragma experimental ABIEncoderV2;\\n\\nimport {Ownable} from \\\"contracts/common/Imports.sol\\\";\\nimport {Address} from \\\"contracts/libraries/Imports.sol\\\";\\nimport {MetaPoolToken} from \\\"contracts/mapt/MetaPoolToken.sol\\\";\\nimport {PoolToken} from \\\"contracts/pool/PoolToken.sol\\\";\\nimport {PoolTokenProxy} from \\\"contracts/pool/PoolTokenProxy.sol\\\";\\nimport {PoolTokenV2} from \\\"contracts/pool/PoolTokenV2.sol\\\";\\nimport {IAddressRegistryV2} from \\\"contracts/registry/Imports.sol\\\";\\nimport {AddressRegistryV2} from \\\"contracts/registry/AddressRegistryV2.sol\\\";\\nimport {Erc20Allocation} from \\\"contracts/tvl/Erc20Allocation.sol\\\";\\nimport {TvlManager} from \\\"contracts/tvl/TvlManager.sol\\\";\\nimport {OracleAdapter} from \\\"contracts/oracle/OracleAdapter.sol\\\";\\nimport {LpAccount} from \\\"contracts/lpaccount/LpAccount.sol\\\";\\nimport {\\n    ProxyAdmin,\\n    TransparentUpgradeableProxy\\n} from \\\"contracts/proxy/Imports.sol\\\";\\n\\nimport {DeploymentConstants} from \\\"./constants.sol\\\";\\n\\nabstract contract UpgradeableContractFactory {\\n    function create(\\n        address proxyFactory,\\n        address proxyAdmin,\\n        bytes memory initData\\n    ) public returns (address) {\\n        address logic = _deployLogic(initData);\\n        address proxy =\\n            ProxyFactory(proxyFactory).create(logic, proxyAdmin, initData);\\n        return address(proxy);\\n    }\\n\\n    /**\\n     * `initData` is passed to allow initialization of the logic\\n     * contract's storage.  This is to block possible attack vectors.\\n     * Future added functionality may allow those controlling the\\n     * contract to selfdestruct it.\\n     */\\n    function _deployLogic(bytes memory initData)\\n        internal\\n        virtual\\n        returns (address);\\n}\\n\\ncontract MetaPoolTokenFactory is UpgradeableContractFactory {\\n    using Address for address;\\n\\n    function _deployLogic(bytes memory initData)\\n        internal\\n        virtual\\n        override\\n        returns (address)\\n    {\\n        MetaPoolToken logic = new MetaPoolToken();\\n        address _logic = address(logic);\\n        _logic.functionCall(initData);\\n        return _logic;\\n    }\\n}\\n\\ncontract LpAccountFactory is UpgradeableContractFactory {\\n    using Address for address;\\n\\n    function _deployLogic(bytes memory initData)\\n        internal\\n        virtual\\n        override\\n        returns (address)\\n    {\\n        LpAccount logic = new LpAccount();\\n        address _logic = address(logic);\\n        _logic.functionCall(initData);\\n        return _logic;\\n    }\\n}\\n\\ncontract ProxyFactory {\\n    function create(\\n        address logic,\\n        address proxyAdmin,\\n        bytes memory initData\\n    ) public returns (address) {\\n        TransparentUpgradeableProxy proxy =\\n            new TransparentUpgradeableProxy(logic, proxyAdmin, initData);\\n        return address(proxy);\\n    }\\n}\\n\\ncontract PoolTokenV1Factory is UpgradeableContractFactory {\\n    using Address for address;\\n\\n    address private _logic;\\n\\n    function _deployLogic(bytes memory initData)\\n        internal\\n        virtual\\n        override\\n        returns (address)\\n    {\\n        if (_logic != address(0)) {\\n            return _logic;\\n        }\\n        PoolToken logic = new PoolToken();\\n        _logic = address(logic);\\n        _logic.functionCall(initData);\\n        return _logic;\\n    }\\n}\\n\\ncontract PoolTokenV2Factory {\\n    function create() external returns (address) {\\n        PoolTokenV2 logicV2 = new PoolTokenV2();\\n        return address(logicV2);\\n    }\\n}\\n\\ncontract AddressRegistryV2Factory {\\n    function create() external returns (address) {\\n        AddressRegistryV2 logicV2 = new AddressRegistryV2();\\n        return address(logicV2);\\n    }\\n}\\n\\ncontract OracleAdapterFactory {\\n    function create(\\n        address addressRegistry,\\n        address tvlSource,\\n        address[] memory assets,\\n        address[] memory sources,\\n        uint256 aggStalePeriod,\\n        uint256 defaultLockPeriod\\n    ) public virtual returns (address) {\\n        OracleAdapter oracleAdapter =\\n            new OracleAdapter(\\n                addressRegistry,\\n                tvlSource,\\n                assets,\\n                sources,\\n                aggStalePeriod,\\n                defaultLockPeriod\\n            );\\n        return address(oracleAdapter);\\n    }\\n}\\n\\ncontract Erc20AllocationFactory {\\n    function create(address addressRegistry) external returns (address) {\\n        Erc20Allocation erc20Allocation = new Erc20Allocation(addressRegistry);\\n        return address(erc20Allocation);\\n    }\\n}\\n\\ncontract TvlManagerFactory {\\n    function create(address addressRegistry) external returns (address) {\\n        TvlManager tvlManager = new TvlManager(addressRegistry);\\n        return address(tvlManager);\\n    }\\n}\\n\\ncontract ProxyAdminFactory {\\n    function create() external returns (address) {\\n        ProxyAdmin proxyAdmin = new ProxyAdmin();\\n        proxyAdmin.transferOwnership(msg.sender);\\n        return address(proxyAdmin);\\n    }\\n}\\n\"\r\n    },\r\n    \"contracts/mapt/MetaPoolToken.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: BUSL-1.1\\npragma solidity 0.6.11;\\npragma experimental ABIEncoderV2;\\n\\nimport {IDetailedERC20} from \\\"contracts/common/Imports.sol\\\";\\nimport {SafeERC20} from \\\"contracts/libraries/Imports.sol\\\";\\nimport {\\n    Initializable,\\n    ERC20UpgradeSafe,\\n    ReentrancyGuardUpgradeSafe,\\n    PausableUpgradeSafe,\\n    AccessControlUpgradeSafe,\\n    Address as AddressUpgradeSafe,\\n    SafeMath as SafeMathUpgradeSafe,\\n    SignedSafeMath as SignedSafeMathUpgradeSafe\\n} from \\\"contracts/proxy/Imports.sol\\\";\\nimport {ILpAccount} from \\\"contracts/lpaccount/Imports.sol\\\";\\nimport {IAddressRegistryV2} from \\\"contracts/registry/Imports.sol\\\";\\nimport {ILockingOracle} from \\\"contracts/oracle/Imports.sol\\\";\\nimport {IReservePool} from \\\"contracts/pool/Imports.sol\\\";\\nimport {\\n    IErc20Allocation,\\n    IAssetAllocationRegistry,\\n    Erc20AllocationConstants\\n} from \\\"contracts/tvl/Imports.sol\\\";\\n\\nimport {ILpAccountFunder} from \\\"./ILpAccountFunder.sol\\\";\\n\\n/**\\n * @notice This contract has hybrid functionality:\\n *\\n * - It acts as a token that tracks the capital that has been pulled\\n * (\\\"deployed\\\") from APY Finance pools (PoolToken contracts)\\n *\\n * - It is permissioned to transfer funds between the pools and the\\n * LP Account contract.\\n *\\n * @dev When MetaPoolToken pulls capital from the pools to the LP Account, it\\n * will mint mAPT for each pool. Conversely, when MetaPoolToken withdraws funds\\n * from the LP Account to the pools, it will burn mAPT for each pool.\\n *\\n * The ratio of each pool's mAPT balance to the total mAPT supply determines\\n * the amount of the TVL dedicated to the pool.\\n *\\n *\\n * DEPLOY CAPITAL TO YIELD FARMING STRATEGIES\\n * Mints appropriate mAPT amount to track share of deployed TVL owned by a pool.\\n *\\n * +-------------+  MetaPoolToken.fundLpAccount  +-----------+\\n * |             |------------------------------>|           |\\n * | PoolTokenV2 |     MetaPoolToken.mint        | LpAccount |\\n * |             |<------------------------------|           |\\n * +-------------+                               +-----------+\\n *\\n *\\n * WITHDRAW CAPITAL FROM YIELD FARMING STRATEGIES\\n * Uses mAPT to calculate the amount of capital returned to the PoolToken.\\n *\\n * +-------------+  MetaPoolToken.withdrawFromLpAccount  +-----------+\\n * |             |<--------------------------------------|           |\\n * | PoolTokenV2 |          MetaPoolToken.burn           | LpAccount |\\n * |             |-------------------------------------->|           |\\n * +-------------+                                       +-----------+\\n */\\ncontract MetaPoolToken is\\n    Initializable,\\n    AccessControlUpgradeSafe,\\n    ReentrancyGuardUpgradeSafe,\\n    PausableUpgradeSafe,\\n    ERC20UpgradeSafe,\\n    ILpAccountFunder,\\n    Erc20AllocationConstants\\n{\\n    using AddressUpgradeSafe for address;\\n    using SafeMathUpgradeSafe for uint256;\\n    using SignedSafeMathUpgradeSafe for int256;\\n    using SafeERC20 for IDetailedERC20;\\n\\n    uint256 public constant DEFAULT_MAPT_TO_UNDERLYER_FACTOR = 1000;\\n\\n    /* ------------------------------- */\\n    /* impl-specific storage variables */\\n    /* ------------------------------- */\\n    /** @notice used to protect mint and burn function */\\n    IAddressRegistryV2 public addressRegistry;\\n\\n    /* ------------------------------- */\\n\\n    event Mint(address acccount, uint256 amount);\\n    event Burn(address acccount, uint256 amount);\\n    event AddressRegistryChanged(address);\\n\\n    /**\\n     * @dev Since the proxy delegate calls to this \\\"logic\\\" contract, any\\n     * storage set by the logic contract's constructor during deploy is\\n     * disregarded and this function is needed to initialize the proxy\\n     * contract's storage according to this contract's layout.\\n     *\\n     * Since storage is not set yet, there is no simple way to protect\\n     * calling this function with owner modifiers.  Thus the OpenZeppelin\\n     * `initializer` modifier protects this function from being called\\n     * repeatedly.  It should be called during the deployment so that\\n     * it cannot be called by someone else later.\\n     */\\n    function initialize(address addressRegistry_) external initializer {\\n        // initialize ancestor storage\\n        __Context_init_unchained();\\n        __AccessControl_init_unchained();\\n        __ReentrancyGuard_init_unchained();\\n        __Pausable_init_unchained();\\n        __ERC20_init_unchained(\\\"APY MetaPool Token\\\", \\\"mAPT\\\");\\n\\n        // initialize impl-specific storage\\n        _setAddressRegistry(addressRegistry_);\\n        _setupRole(DEFAULT_ADMIN_ROLE, addressRegistry.emergencySafeAddress());\\n        _setupRole(LP_ROLE, addressRegistry.lpSafeAddress());\\n        _setupRole(EMERGENCY_ROLE, addressRegistry.emergencySafeAddress());\\n    }\\n\\n    /**\\n     * @dev Dummy function to show how one would implement an init function\\n     * for future upgrades.  Note the `initializer` modifier can only be used\\n     * once in the entire contract, so we can't use it here.  Instead, we\\n     * protect the upgrade init with the `onlyProxyAdmin` modifier, which\\n     * checks `msg.sender` against the proxy admin slot defined in EIP-1967.\\n     * This will only allow the proxy admin to call this function during upgrades.\\n     */\\n    // solhint-disable-next-line no-empty-blocks\\n    function initializeUpgrade() external virtual nonReentrant onlyProxyAdmin {}\\n\\n    /**\\n     * @notice Sets the address registry\\n     * @param addressRegistry_ the address of the registry\\n     */\\n    function emergencySetAddressRegistry(address addressRegistry_)\\n        external\\n        nonReentrant\\n        onlyEmergencyRole\\n    {\\n        _setAddressRegistry(addressRegistry_);\\n    }\\n\\n    function fundLpAccount(bytes32[] calldata poolIds)\\n        external\\n        override\\n        nonReentrant\\n        onlyLpRole\\n    {\\n        (IReservePool[] memory pools, int256[] memory amounts) =\\n            getRebalanceAmounts(poolIds);\\n\\n        uint256[] memory fundAmounts = _getFundAmounts(amounts);\\n\\n        _fundLpAccount(pools, fundAmounts);\\n\\n        emit FundLpAccount(poolIds, fundAmounts);\\n    }\\n\\n    function withdrawFromLpAccount(bytes32[] calldata poolIds)\\n        external\\n        override\\n        nonReentrant\\n        onlyLpRole\\n    {\\n        (IReservePool[] memory pools, int256[] memory amounts) =\\n            getRebalanceAmounts(poolIds);\\n\\n        uint256[] memory withdrawAmounts = _getWithdrawAmounts(amounts);\\n\\n        _withdrawFromLpAccount(pools, withdrawAmounts);\\n        emit WithdrawFromLpAccount(poolIds, withdrawAmounts);\\n    }\\n\\n    /**\\n     * @notice Get the USD-denominated value (in wei) of the pool's share\\n     * of the deployed capital, as tracked by the mAPT token.\\n     * @return The value deployed to the LP Account\\n     */\\n    function getDeployedValue(address pool) external view returns (uint256) {\\n        uint256 balance = balanceOf(pool);\\n        uint256 totalSupply = totalSupply();\\n        if (totalSupply == 0 || balance == 0) return 0;\\n\\n        return _getTvl().mul(balance).div(totalSupply);\\n    }\\n\\n    /**\\n     * @notice Returns the (signed) top-up amount for each pool ID given.\\n     * A positive (negative) sign means the reserve level is in deficit\\n     * (excess) of required percentage.\\n     * @param poolIds array of pool identifiers\\n     * @return The array of pools\\n     * @return An array of rebalance amounts\\n     */\\n    function getRebalanceAmounts(bytes32[] memory poolIds)\\n        public\\n        view\\n        returns (IReservePool[] memory, int256[] memory)\\n    {\\n        IReservePool[] memory pools = new IReservePool[](poolIds.length);\\n        int256[] memory rebalanceAmounts = new int256[](poolIds.length);\\n\\n        for (uint256 i = 0; i < poolIds.length; i++) {\\n            IReservePool pool =\\n                IReservePool(addressRegistry.getAddress(poolIds[i]));\\n            int256 rebalanceAmount = pool.getReserveTopUpValue();\\n\\n            pools[i] = pool;\\n            rebalanceAmounts[i] = rebalanceAmount;\\n        }\\n\\n        return (pools, rebalanceAmounts);\\n    }\\n\\n    function _setAddressRegistry(address addressRegistry_) internal {\\n        require(addressRegistry_.isContract(), \\\"INVALID_ADDRESS\\\");\\n        addressRegistry = IAddressRegistryV2(addressRegistry_);\\n        emit AddressRegistryChanged(addressRegistry_);\\n    }\\n\\n    function _fundLpAccount(\\n        IReservePool[] memory pools,\\n        uint256[] memory amounts\\n    ) internal {\\n        address lpAccountAddress = addressRegistry.lpAccountAddress();\\n        require(lpAccountAddress != address(0), \\\"INVALID_LP_ACCOUNT\\\"); // defensive check -- should never happen\\n\\n        _multipleMintAndTransfer(pools, amounts);\\n        _registerPoolUnderlyers(pools);\\n    }\\n\\n    function _multipleMintAndTransfer(\\n        IReservePool[] memory pools,\\n        uint256[] memory amounts\\n    ) internal {\\n        uint256[] memory deltas = _calculateDeltas(pools, amounts);\\n\\n        // MUST do the actual minting after calculating *all* mint amounts,\\n        // otherwise due to Chainlink not updating during a transaction,\\n        // the totalSupply will change while TVL doesn't.\\n        //\\n        // Using the pre-mint TVL and totalSupply gives the same answer\\n        // as using post-mint values.\\n        for (uint256 i = 0; i < pools.length; i++) {\\n            IReservePool pool = pools[i];\\n            uint256 mintAmount = deltas[i];\\n            uint256 transferAmount = amounts[i];\\n            _mintAndTransfer(pool, mintAmount, transferAmount);\\n        }\\n\\n        ILockingOracle oracleAdapter = _getOracleAdapter();\\n        oracleAdapter.lock();\\n    }\\n\\n    function _mintAndTransfer(\\n        IReservePool pool,\\n        uint256 mintAmount,\\n        uint256 transferAmount\\n    ) internal {\\n        if (mintAmount == 0) {\\n            return;\\n        }\\n        _mint(address(pool), mintAmount);\\n        pool.transferToLpAccount(transferAmount);\\n        emit Mint(address(pool), mintAmount);\\n    }\\n\\n    function _withdrawFromLpAccount(\\n        IReservePool[] memory pools,\\n        uint256[] memory amounts\\n    ) internal {\\n        address lpAccountAddress = addressRegistry.lpAccountAddress();\\n        require(lpAccountAddress != address(0), \\\"INVALID_LP_ACCOUNT\\\"); // defensive check -- should never happen\\n\\n        _multipleBurnAndTransfer(pools, amounts);\\n        _registerPoolUnderlyers(pools);\\n    }\\n\\n    function _multipleBurnAndTransfer(\\n        IReservePool[] memory pools,\\n        uint256[] memory amounts\\n    ) internal {\\n        address lpAccount = addressRegistry.lpAccountAddress();\\n        require(lpAccount != address(0), \\\"INVALID_LP_ACCOUNT\\\"); // defensive check -- should never happen\\n\\n        uint256[] memory deltas = _calculateDeltas(pools, amounts);\\n\\n        // MUST do the actual burning after calculating *all* burn amounts,\\n        // otherwise due to Chainlink not updating during a transaction,\\n        // the totalSupply will change while TVL doesn't.\\n        //\\n        // Using the pre-burn TVL and totalSupply gives the same answer\\n        // as using post-burn values.\\n        for (uint256 i = 0; i < pools.length; i++) {\\n            IReservePool pool = pools[i];\\n            uint256 burnAmount = deltas[i];\\n            uint256 transferAmount = amounts[i];\\n            _burnAndTransfer(pool, lpAccount, burnAmount, transferAmount);\\n        }\\n\\n        ILockingOracle oracleAdapter = _getOracleAdapter();\\n        oracleAdapter.lock();\\n    }\\n\\n    function _burnAndTransfer(\\n        IReservePool pool,\\n        address lpAccount,\\n        uint256 burnAmount,\\n        uint256 transferAmount\\n    ) internal {\\n        if (burnAmount == 0) {\\n            return;\\n        }\\n        _burn(address(pool), burnAmount);\\n        ILpAccount(lpAccount).transferToPool(address(pool), transferAmount);\\n        emit Burn(address(pool), burnAmount);\\n    }\\n\\n    /**\\n     * @notice Register an asset allocation for the account with each pool underlyer\\n     * @param pools list of pool amounts whose pool underlyers will be registered\\n     */\\n    function _registerPoolUnderlyers(IReservePool[] memory pools) internal {\\n        IAssetAllocationRegistry tvlManager =\\n            IAssetAllocationRegistry(addressRegistry.getAddress(\\\"tvlManager\\\"));\\n        IErc20Allocation erc20Allocation =\\n            IErc20Allocation(\\n                address(\\n                    tvlManager.getAssetAllocation(Erc20AllocationConstants.NAME)\\n                )\\n            );\\n\\n        for (uint256 i = 0; i < pools.length; i++) {\\n            IDetailedERC20 underlyer =\\n                IDetailedERC20(address(pools[i].underlyer()));\\n\\n            if (!erc20Allocation.isErc20TokenRegistered(underlyer)) {\\n                erc20Allocation.registerErc20Token(underlyer);\\n            }\\n        }\\n    }\\n\\n    /**\\n     * @notice Get the USD value of all assets in the system, not just those\\n     * being managed by the AccountManager but also the pool underlyers.\\n     *\\n     * Note this is NOT the same as the total value represented by the\\n     * total mAPT supply, i.e. the \\\"deployed capital\\\".\\n     *\\n     * @dev Chainlink nodes read from the TVLManager, pull the\\n     * prices from market feeds, and submits the calculated total value\\n     * to an aggregator contract.\\n     *\\n     * USD prices have 8 decimals.\\n     *\\n     * @return \\\"Total Value Locked\\\", the USD value of all APY Finance assets.\\n     */\\n    function _getTvl() internal view returns (uint256) {\\n        ILockingOracle oracleAdapter = _getOracleAdapter();\\n        return oracleAdapter.getTvl();\\n    }\\n\\n    function _getOracleAdapter() internal view returns (ILockingOracle) {\\n        address oracleAdapterAddress = addressRegistry.oracleAdapterAddress();\\n        return ILockingOracle(oracleAdapterAddress);\\n    }\\n\\n    function _calculateDeltas(\\n        IReservePool[] memory pools,\\n        uint256[] memory amounts\\n    ) internal view returns (uint256[] memory) {\\n        require(pools.length == amounts.length, \\\"LENGTHS_MUST_MATCH\\\");\\n        uint256[] memory deltas = new uint256[](pools.length);\\n\\n        for (uint256 i = 0; i < pools.length; i++) {\\n            IReservePool pool = pools[i];\\n            uint256 amount = amounts[i];\\n\\n            IDetailedERC20 underlyer = pool.underlyer();\\n            uint256 tokenPrice = pool.getUnderlyerPrice();\\n            uint8 decimals = underlyer.decimals();\\n\\n            deltas[i] = _calculateDelta(amount, tokenPrice, decimals);\\n        }\\n\\n        return deltas;\\n    }\\n\\n    /**\\n     * @notice Calculate mAPT amount for given pool's underlyer amount.\\n     * @param amount Pool underlyer amount to be converted\\n     * @param tokenPrice Pool underlyer's USD price (in wei) per underlyer token\\n     * @param decimals Pool underlyer's number of decimals\\n     * @dev Price parameter is in units of wei per token (\\\"big\\\" unit), since\\n     * attempting to express wei per token bit (\\\"small\\\" unit) will be\\n     * fractional, requiring fixed-point representation.  This means we need\\n     * to also pass in the underlyer's number of decimals to do the appropriate\\n     * multiplication in the calculation.\\n     * @dev amount of APT minted should be in same ratio to APT supply\\n     * as deposit value is to pool's total value, i.e.:\\n     *\\n     * mint amount / total supply\\n     * = deposit value / pool total value\\n     *\\n     * For denominators, pre or post-deposit amounts can be used.\\n     * The important thing is they are consistent, i.e. both pre-deposit\\n     * or both post-deposit.\\n     */\\n    function _calculateDelta(\\n        uint256 amount,\\n        uint256 tokenPrice,\\n        uint8 decimals\\n    ) internal view returns (uint256) {\\n        uint256 value = amount.mul(tokenPrice).div(10**uint256(decimals));\\n        uint256 totalValue = _getTvl();\\n        uint256 totalSupply = totalSupply();\\n\\n        if (totalValue == 0 || totalSupply == 0) {\\n            return value.mul(DEFAULT_MAPT_TO_UNDERLYER_FACTOR);\\n        }\\n\\n        return value.mul(totalSupply).div(totalValue);\\n    }\\n\\n    function _getFundAmounts(int256[] memory amounts)\\n        internal\\n        pure\\n        returns (uint256[] memory)\\n    {\\n        uint256[] memory fundAmounts = new uint256[](amounts.length);\\n\\n        for (uint256 i = 0; i < amounts.length; i++) {\\n            int256 amount = amounts[i];\\n\\n            fundAmounts[i] = amount < 0 ? uint256(-amount) : 0;\\n        }\\n\\n        return fundAmounts;\\n    }\\n\\n    function _getWithdrawAmounts(int256[] memory amounts)\\n        internal\\n        pure\\n        returns (uint256[] memory)\\n    {\\n        uint256[] memory withdrawAmounts = new uint256[](amounts.length);\\n\\n        for (uint256 i = 0; i < amounts.length; i++) {\\n            int256 amount = amounts[i];\\n\\n            withdrawAmounts[i] = amount > 0 ? uint256(amount) : 0;\\n        }\\n\\n        return withdrawAmounts;\\n    }\\n}\\n\"\r\n    },\r\n    \"contracts/pool/PoolToken.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: BUSDL-1.1\\npragma solidity 0.6.11;\\npragma experimental ABIEncoderV2;\\n\\nimport {\\n    OwnableUpgradeSafe\\n} from \\\"@openzeppelin/contracts-ethereum-package/contracts/access/Ownable.sol\\\";\\nimport {\\n    ReentrancyGuardUpgradeSafe\\n} from \\\"@openzeppelin/contracts-ethereum-package/contracts/utils/ReentrancyGuard.sol\\\";\\nimport {\\n    PausableUpgradeSafe\\n} from \\\"@openzeppelin/contracts-ethereum-package/contracts/utils/Pausable.sol\\\";\\nimport {\\n    Initializable\\n} from \\\"@openzeppelin/contracts-ethereum-package/contracts/Initializable.sol\\\";\\nimport {SafeERC20} from \\\"@openzeppelin/contracts/token/ERC20/SafeERC20.sol\\\";\\nimport {\\n    ERC20UpgradeSafe\\n} from \\\"@openzeppelin/contracts-ethereum-package/contracts/token/ERC20/ERC20.sol\\\";\\nimport {\\n    SafeMath\\n} from \\\"@openzeppelin/contracts-ethereum-package/contracts/math/SafeMath.sol\\\";\\nimport {\\n    AggregatorV3Interface\\n} from \\\"@chainlink/contracts/src/v0.6/interfaces/AggregatorV3Interface.sol\\\";\\nimport {ILiquidityPool} from \\\"./ILiquidityPool.sol\\\";\\nimport {IDetailedERC20} from \\\"contracts/common/Imports.sol\\\";\\n\\n/**\\n * @notice Old version of the `PoolToken`\\n * @notice Should not be used in deployment\\n */\\ncontract PoolToken is\\n    ILiquidityPool,\\n    Initializable,\\n    OwnableUpgradeSafe,\\n    ReentrancyGuardUpgradeSafe,\\n    PausableUpgradeSafe,\\n    ERC20UpgradeSafe\\n{\\n    using SafeMath for uint256;\\n    using SafeERC20 for IDetailedERC20;\\n\\n    uint256 public constant DEFAULT_APT_TO_UNDERLYER_FACTOR = 1000;\\n\\n    /* ------------------------------- */\\n    /* impl-specific storage variables */\\n    /* ------------------------------- */\\n    address public proxyAdmin;\\n    bool public addLiquidityLock;\\n    bool public redeemLock;\\n    IDetailedERC20 public underlyer;\\n    AggregatorV3Interface public priceAgg;\\n\\n    /* ------------------------------- */\\n\\n    modifier onlyAdmin() {\\n        require(msg.sender == proxyAdmin, \\\"ADMIN_ONLY\\\");\\n        _;\\n    }\\n\\n    receive() external payable {\\n        revert(\\\"DONT_SEND_ETHER\\\");\\n    }\\n\\n    function initialize(\\n        address adminAddress,\\n        IDetailedERC20 _underlyer,\\n        AggregatorV3Interface _priceAgg\\n    ) external initializer {\\n        require(adminAddress != address(0), \\\"INVALID_ADMIN\\\");\\n        require(address(_underlyer) != address(0), \\\"INVALID_TOKEN\\\");\\n        require(address(_priceAgg) != address(0), \\\"INVALID_AGG\\\");\\n\\n        // initialize ancestor storage\\n        __Context_init_unchained();\\n        __Ownable_init_unchained();\\n        __ReentrancyGuard_init_unchained();\\n        __Pausable_init_unchained();\\n        __ERC20_init_unchained(\\\"APY Pool Token\\\", \\\"APT\\\");\\n\\n        // initialize impl-specific storage\\n        setAdminAddress(adminAddress);\\n        addLiquidityLock = false;\\n        redeemLock = false;\\n        underlyer = _underlyer;\\n        setPriceAggregator(_priceAgg);\\n    }\\n\\n    // solhint-disable-next-line no-empty-blocks\\n    function initializeUpgrade() external virtual onlyAdmin {}\\n\\n    function lock() external onlyOwner {\\n        _pause();\\n    }\\n\\n    function unlock() external onlyOwner {\\n        _unpause();\\n    }\\n\\n    /**\\n     * @notice Mint corresponding amount of APT tokens for sent token amount.\\n     * @dev If no APT tokens have been minted yet, fallback to a fixed ratio.\\n     */\\n    function addLiquidity(uint256 tokenAmt)\\n        external\\n        virtual\\n        override\\n        nonReentrant\\n        whenNotPaused\\n    {\\n        require(!addLiquidityLock, \\\"LOCKED\\\");\\n        require(tokenAmt > 0, \\\"AMOUNT_INSUFFICIENT\\\");\\n        require(\\n            underlyer.allowance(msg.sender, address(this)) >= tokenAmt,\\n            \\\"ALLOWANCE_INSUFFICIENT\\\"\\n        );\\n\\n        // calculateMintAmount() is not used because deposit value\\n        // is needed for the event\\n        uint256 depositEthValue = getEthValueFromTokenAmount(tokenAmt);\\n        uint256 poolTotalEthValue = getPoolTotalEthValue();\\n        uint256 mintAmount =\\n            _calculateMintAmount(depositEthValue, poolTotalEthValue);\\n\\n        _mint(msg.sender, mintAmount);\\n        underlyer.safeTransferFrom(msg.sender, address(this), tokenAmt);\\n\\n        emit DepositedAPT(\\n            msg.sender,\\n            underlyer,\\n            tokenAmt,\\n            mintAmount,\\n            depositEthValue,\\n            getPoolTotalEthValue()\\n        );\\n    }\\n\\n    /** @notice Disable deposits. */\\n    function lockAddLiquidity() external onlyOwner {\\n        addLiquidityLock = true;\\n        emit AddLiquidityLocked();\\n    }\\n\\n    /** @notice Enable deposits. */\\n    function unlockAddLiquidity() external onlyOwner {\\n        addLiquidityLock = false;\\n        emit AddLiquidityUnlocked();\\n    }\\n\\n    /**\\n     * @notice Redeems APT amount for its underlying token amount.\\n     * @param aptAmount The amount of APT tokens to redeem\\n     */\\n    function redeem(uint256 aptAmount)\\n        external\\n        virtual\\n        override\\n        nonReentrant\\n        whenNotPaused\\n    {\\n        require(!redeemLock, \\\"LOCKED\\\");\\n        require(aptAmount > 0, \\\"AMOUNT_INSUFFICIENT\\\");\\n        require(aptAmount <= balanceOf(msg.sender), \\\"BALANCE_INSUFFICIENT\\\");\\n\\n        uint256 redeemTokenAmt = getUnderlyerAmount(aptAmount);\\n\\n        _burn(msg.sender, aptAmount);\\n        underlyer.safeTransfer(msg.sender, redeemTokenAmt);\\n\\n        emit RedeemedAPT(\\n            msg.sender,\\n            underlyer,\\n            redeemTokenAmt,\\n            aptAmount,\\n            getEthValueFromTokenAmount(redeemTokenAmt),\\n            getPoolTotalEthValue()\\n        );\\n    }\\n\\n    /** @notice Disable APT redeeming. */\\n    function lockRedeem() external onlyOwner {\\n        redeemLock = true;\\n        emit RedeemLocked();\\n    }\\n\\n    /** @notice Enable APT redeeming. */\\n    function unlockRedeem() external onlyOwner {\\n        redeemLock = false;\\n        emit RedeemUnlocked();\\n    }\\n\\n    function setAdminAddress(address adminAddress) public onlyOwner {\\n        require(adminAddress != address(0), \\\"INVALID_ADMIN\\\");\\n        proxyAdmin = adminAddress;\\n        emit AdminChanged(adminAddress);\\n    }\\n\\n    function setPriceAggregator(AggregatorV3Interface _priceAgg)\\n        public\\n        onlyOwner\\n    {\\n        require(address(_priceAgg) != address(0), \\\"INVALID_AGG\\\");\\n        priceAgg = _priceAgg;\\n        emit PriceAggregatorChanged(address(_priceAgg));\\n    }\\n\\n    /**\\n     * @notice Calculate APT amount to be minted from deposit amount.\\n     * @param tokenAmt The deposit amount of stablecoin\\n     * @return The mint amount\\n     */\\n    function calculateMintAmount(uint256 tokenAmt)\\n        public\\n        view\\n        returns (uint256)\\n    {\\n        uint256 depositEthValue = getEthValueFromTokenAmount(tokenAmt);\\n        uint256 poolTotalEthValue = getPoolTotalEthValue();\\n        return _calculateMintAmount(depositEthValue, poolTotalEthValue);\\n    }\\n\\n    /**\\n     * @notice Get the underlying amount represented by APT amount.\\n     * @param aptAmount The amount of APT tokens\\n     * @return uint256 The underlying value of the APT tokens\\n     */\\n    function getUnderlyerAmount(uint256 aptAmount)\\n        public\\n        view\\n        returns (uint256)\\n    {\\n        return getTokenAmountFromEthValue(getAPTEthValue(aptAmount));\\n    }\\n\\n    function getPoolTotalEthValue() public view virtual returns (uint256) {\\n        return getEthValueFromTokenAmount(underlyer.balanceOf(address(this)));\\n    }\\n\\n    function getAPTEthValue(uint256 amount) public view returns (uint256) {\\n        require(totalSupply() > 0, \\\"INSUFFICIENT_TOTAL_SUPPLY\\\");\\n        return (amount.mul(getPoolTotalEthValue())).div(totalSupply());\\n    }\\n\\n    function getEthValueFromTokenAmount(uint256 amount)\\n        public\\n        view\\n        returns (uint256)\\n    {\\n        if (amount == 0) {\\n            return 0;\\n        }\\n        uint256 decimals = underlyer.decimals();\\n        return ((getTokenEthPrice()).mul(amount)).div(10**decimals);\\n    }\\n\\n    function getTokenAmountFromEthValue(uint256 ethValue)\\n        public\\n        view\\n        returns (uint256)\\n    {\\n        uint256 tokenEthPrice = getTokenEthPrice();\\n        uint256 decimals = underlyer.decimals();\\n        return ((10**decimals).mul(ethValue)).div(tokenEthPrice);\\n    }\\n\\n    function getTokenEthPrice() public view returns (uint256) {\\n        (, int256 price, , , ) = priceAgg.latestRoundData();\\n        require(price > 0, \\\"UNABLE_TO_RETRIEVE_ETH_PRICE\\\");\\n        return uint256(price);\\n    }\\n\\n    /**\\n     * @dev amount of APT minted should be in same ratio to APT supply\\n     * as token amount sent is to contract's token balance, i.e.:\\n     *\\n     * mint amount / total supply (before deposit)\\n     * = token amount sent / contract token balance (before deposit)\\n     */\\n    function _calculateMintAmount(\\n        uint256 depositEthAmount,\\n        uint256 totalEthAmount\\n    ) internal view returns (uint256) {\\n        uint256 totalSupply = totalSupply();\\n\\n        if (totalEthAmount == 0 || totalSupply == 0) {\\n            return depositEthAmount.mul(DEFAULT_APT_TO_UNDERLYER_FACTOR);\\n        }\\n\\n        return (depositEthAmount.mul(totalSupply)).div(totalEthAmount);\\n    }\\n}\\n\"\r\n    },\r\n    \"contracts/pool/PoolTokenProxy.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: BUSDL-1.1\\npragma solidity 0.6.11;\\npragma experimental ABIEncoderV2;\\n\\nimport {TransparentUpgradeableProxy} from \\\"contracts/proxy/Imports.sol\\\";\\n\\ncontract PoolTokenProxy is TransparentUpgradeableProxy {\\n    constructor(\\n        address _logic,\\n        address _proxyAdmin,\\n        address _underlyer,\\n        address _priceAgg\\n    )\\n        public\\n        TransparentUpgradeableProxy(\\n            _logic,\\n            _proxyAdmin,\\n            abi.encodeWithSignature(\\n                \\\"initialize(address,address,address)\\\",\\n                _proxyAdmin,\\n                _underlyer,\\n                _priceAgg\\n            )\\n        )\\n    {} // solhint-disable no-empty-blocks\\n}\\n\"\r\n    },\r\n    \"contracts/pool/PoolTokenV2.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: BUSDL-1.1\\npragma solidity 0.6.11;\\npragma experimental ABIEncoderV2;\\n\\nimport {IDetailedERC20, IEmergencyExit} from \\\"contracts/common/Imports.sol\\\";\\nimport {SafeERC20} from \\\"contracts/libraries/Imports.sol\\\";\\nimport {\\n    Initializable,\\n    ERC20UpgradeSafe,\\n    ReentrancyGuardUpgradeSafe,\\n    PausableUpgradeSafe,\\n    AccessControlUpgradeSafe,\\n    Address as AddressUpgradeSafe,\\n    SafeMath as SafeMathUpgradeSafe,\\n    SignedSafeMath as SignedSafeMathUpgradeSafe\\n} from \\\"contracts/proxy/Imports.sol\\\";\\nimport {IAddressRegistryV2} from \\\"contracts/registry/Imports.sol\\\";\\nimport {\\n    AggregatorV3Interface,\\n    IOracleAdapter\\n} from \\\"contracts/oracle/Imports.sol\\\";\\nimport {MetaPoolToken} from \\\"contracts/mapt/MetaPoolToken.sol\\\";\\n\\nimport {\\n    IReservePool,\\n    IWithdrawFeePool,\\n    ILockingPool,\\n    IPoolToken,\\n    ILiquidityPoolV2\\n} from \\\"./Imports.sol\\\";\\n\\n/**\\n * @notice Collect user deposits so they can be lent to the LP Account\\n * @notice Depositors share pool liquidity\\n * @notice Reserves are maintained to process withdrawals\\n * @notice Reserve tokens cannot be lent to the LP Account\\n * @notice If a user withdraws too early after their deposit, there's a fee\\n * @notice Tokens borrowed from the pool are tracked with the `MetaPoolToken`\\n */\\ncontract PoolTokenV2 is\\n    ILiquidityPoolV2,\\n    IPoolToken,\\n    IReservePool,\\n    IWithdrawFeePool,\\n    ILockingPool,\\n    Initializable,\\n    AccessControlUpgradeSafe,\\n    ReentrancyGuardUpgradeSafe,\\n    PausableUpgradeSafe,\\n    ERC20UpgradeSafe,\\n    IEmergencyExit\\n{\\n    using AddressUpgradeSafe for address;\\n    using SafeMathUpgradeSafe for uint256;\\n    using SignedSafeMathUpgradeSafe for int256;\\n    using SafeERC20 for IDetailedERC20;\\n\\n    uint256 public constant DEFAULT_APT_TO_UNDERLYER_FACTOR = 1000;\\n    uint256 internal constant _MAX_INT256 = 2**255 - 1;\\n\\n    /* ------------------------------- */\\n    /* impl-specific storage variables */\\n    /* ------------------------------- */\\n\\n    // V1\\n    /** @dev used to protect init functions for upgrades */\\n    address private _proxyAdmin; // <-- deprecated in v2; visibility changed to avoid name clash\\n    /** @notice true if depositing is locked */\\n    bool public addLiquidityLock;\\n    /** @notice true if withdrawing is locked */\\n    bool public redeemLock;\\n    /** @notice underlying stablecoin */\\n    IDetailedERC20 public override underlyer;\\n    /** @notice USD price feed for the stablecoin */\\n    // AggregatorV3Interface public priceAgg; <-- removed in V2\\n\\n    // V2\\n    /**\\n     * @notice registry to fetch core platform addresses from\\n     * @dev this slot replaces the last V1 slot for the price agg\\n     */\\n    IAddressRegistryV2 public addressRegistry;\\n    /** @notice seconds since last deposit during which withdrawal fee is charged */\\n    uint256 public override feePeriod;\\n    /** @notice percentage charged for withdrawal fee */\\n    uint256 public override feePercentage;\\n    /** @notice time of last deposit */\\n    mapping(address => uint256) public lastDepositTime;\\n    /** @notice percentage of pool total value available for immediate withdrawal */\\n    uint256 public override reservePercentage;\\n\\n    /* ------------------------------- */\\n\\n    /** @notice Log when the address registry is changed */\\n    event AddressRegistryChanged(address);\\n\\n    /**\\n     * @dev Since the proxy delegate calls to this \\\"logic\\\" contract, any\\n     * storage set by the logic contract's constructor during deploy is\\n     * disregarded and this function is needed to initialize the proxy\\n     * contract's storage according to this contract's layout.\\n     *\\n     * Since storage is not set yet, there is no simple way to protect\\n     * calling this function with owner modifiers.  Thus the OpenZeppelin\\n     * `initializer` modifier protects this function from being called\\n     * repeatedly.  It should be called during the deployment so that\\n     * it cannot be called by someone else later.\\n     *\\n     * NOTE: this function is copied from the V1 contract and has already\\n     * been called during V1 deployment.  It is included here for clarity.\\n     */\\n    function initialize(\\n        address adminAddress,\\n        IDetailedERC20 underlyer_,\\n        AggregatorV3Interface priceAgg\\n    ) external initializer {\\n        require(adminAddress != address(0), \\\"INVALID_ADMIN\\\");\\n        require(address(underlyer_) != address(0), \\\"INVALID_TOKEN\\\");\\n        require(address(priceAgg) != address(0), \\\"INVALID_AGG\\\");\\n\\n        // initialize ancestor storage\\n        __Context_init_unchained();\\n        // __Ownable_init_unchained();  <-- Comment-out for compiler; replaced by AccessControl\\n        __ReentrancyGuard_init_unchained();\\n        __Pausable_init_unchained();\\n        __ERC20_init_unchained(\\\"APY Pool Token\\\", \\\"APT\\\");\\n\\n        // initialize impl-specific storage\\n        // _setAdminAddress(adminAddress);  <-- deprecated in V2.\\n        addLiquidityLock = false;\\n        redeemLock = false;\\n        underlyer = underlyer_;\\n        // setPriceAggregator(priceAgg);  <-- deprecated in V2.\\n    }\\n\\n    /**\\n     * @dev Note the `initializer` modifier can only be used once in the\\n     * entire contract, so we can't use it here.  Instead, we protect\\n     * the upgrade init with the `onlyProxyAdmin` modifier, which checks\\n     * `msg.sender` against the proxy admin slot defined in EIP-1967.\\n     * This will only allow the proxy admin to call this function during upgrades.\\n     */\\n    // solhint-disable-next-line no-empty-blocks\\n    function initializeUpgrade(address addressRegistry_)\\n        external\\n        nonReentrant\\n        onlyProxyAdmin\\n    {\\n        _setAddressRegistry(addressRegistry_);\\n\\n        // Sadly, the AccessControl init is protected by `initializer` so can't\\n        // be called ever again (see above natspec).  Fortunately, the init body\\n        // is empty, so we don't actually need to call it.\\n        // __AccessControl_init_unchained();\\n        _setupRole(DEFAULT_ADMIN_ROLE, addressRegistry.emergencySafeAddress());\\n        _setupRole(ADMIN_ROLE, addressRegistry.adminSafeAddress());\\n        _setupRole(EMERGENCY_ROLE, addressRegistry.emergencySafeAddress());\\n        _setupRole(CONTRACT_ROLE, addressRegistry.mAptAddress());\\n\\n        feePeriod = 1 days;\\n        feePercentage = 5;\\n        reservePercentage = 5;\\n    }\\n\\n    function emergencyLock() external override onlyEmergencyRole {\\n        _pause();\\n    }\\n\\n    function emergencyUnlock() external override onlyEmergencyRole {\\n        _unpause();\\n    }\\n\\n    /**\\n     * @dev If no APT tokens have been minted yet, fallback to a fixed ratio.\\n     */\\n    function addLiquidity(uint256 depositAmount)\\n        external\\n        override\\n        nonReentrant\\n        whenNotPaused\\n    {\\n        require(!addLiquidityLock, \\\"LOCKED\\\");\\n        require(depositAmount > 0, \\\"AMOUNT_INSUFFICIENT\\\");\\n        require(\\n            underlyer.allowance(msg.sender, address(this)) >= depositAmount,\\n            \\\"ALLOWANCE_INSUFFICIENT\\\"\\n        );\\n        // solhint-disable-next-line not-rely-on-time\\n        lastDepositTime[msg.sender] = block.timestamp;\\n\\n        // calculateMintAmount() is not used because deposit value\\n        // is needed for the event\\n        uint256 depositValue = getValueFromUnderlyerAmount(depositAmount);\\n        uint256 poolTotalValue = getPoolTotalValue();\\n        uint256 mintAmount = _calculateMintAmount(depositValue, poolTotalValue);\\n\\n        _mint(msg.sender, mintAmount);\\n        underlyer.safeTransferFrom(msg.sender, address(this), depositAmount);\\n\\n        emit DepositedAPT(\\n            msg.sender,\\n            underlyer,\\n            depositAmount,\\n            mintAmount,\\n            depositValue,\\n            getPoolTotalValue()\\n        );\\n    }\\n\\n    function emergencyLockAddLiquidity()\\n        external\\n        override\\n        nonReentrant\\n        onlyEmergencyRole\\n    {\\n        addLiquidityLock = true;\\n        emit AddLiquidityLocked();\\n    }\\n\\n    function emergencyUnlockAddLiquidity()\\n        external\\n        override\\n        nonReentrant\\n        onlyEmergencyRole\\n    {\\n        addLiquidityLock = false;\\n        emit AddLiquidityUnlocked();\\n    }\\n\\n    /**\\n     * @dev May revert if there is not enough in the pool.\\n     */\\n    function redeem(uint256 aptAmount)\\n        external\\n        override\\n        nonReentrant\\n        whenNotPaused\\n    {\\n        require(!redeemLock, \\\"LOCKED\\\");\\n        require(aptAmount > 0, \\\"AMOUNT_INSUFFICIENT\\\");\\n        require(aptAmount <= balanceOf(msg.sender), \\\"BALANCE_INSUFFICIENT\\\");\\n\\n        uint256 redeemUnderlyerAmt = getUnderlyerAmountWithFee(aptAmount);\\n        require(\\n            redeemUnderlyerAmt <= underlyer.balanceOf(address(this)),\\n            \\\"RESERVE_INSUFFICIENT\\\"\\n        );\\n\\n        _burn(msg.sender, aptAmount);\\n        underlyer.safeTransfer(msg.sender, redeemUnderlyerAmt);\\n\\n        emit RedeemedAPT(\\n            msg.sender,\\n            underlyer,\\n            redeemUnderlyerAmt,\\n            aptAmount,\\n            getValueFromUnderlyerAmount(redeemUnderlyerAmt),\\n            getPoolTotalValue()\\n        );\\n    }\\n\\n    function emergencyLockRedeem()\\n        external\\n        override\\n        nonReentrant\\n        onlyEmergencyRole\\n    {\\n        redeemLock = true;\\n        emit RedeemLocked();\\n    }\\n\\n    function emergencyUnlockRedeem()\\n        external\\n        override\\n        nonReentrant\\n        onlyEmergencyRole\\n    {\\n        redeemLock = false;\\n        emit RedeemUnlocked();\\n    }\\n\\n    /**\\n     * @dev permissioned with CONTRACT_ROLE\\n     */\\n    function transferToLpAccount(uint256 amount)\\n        external\\n        override\\n        nonReentrant\\n        whenNotPaused\\n        onlyContractRole\\n    {\\n        underlyer.safeTransfer(addressRegistry.lpAccountAddress(), amount);\\n    }\\n\\n    /**\\n     * @notice Set the new address registry\\n     * @param addressRegistry_ The new address registry\\n     */\\n    function emergencySetAddressRegistry(address addressRegistry_)\\n        external\\n        nonReentrant\\n        onlyEmergencyRole\\n    {\\n        _setAddressRegistry(addressRegistry_);\\n    }\\n\\n    function setFeePeriod(uint256 feePeriod_)\\n        external\\n        override\\n        nonReentrant\\n        onlyAdminRole\\n    {\\n        feePeriod = feePeriod_;\\n        emit FeePeriodChanged(feePeriod_);\\n    }\\n\\n    function setFeePercentage(uint256 feePercentage_)\\n        external\\n        override\\n        nonReentrant\\n        onlyAdminRole\\n    {\\n        feePercentage = feePercentage_;\\n        emit FeePercentageChanged(feePercentage_);\\n    }\\n\\n    function setReservePercentage(uint256 reservePercentage_)\\n        external\\n        override\\n        nonReentrant\\n        onlyAdminRole\\n    {\\n        reservePercentage = reservePercentage_;\\n        emit ReservePercentageChanged(reservePercentage_);\\n    }\\n\\n    function emergencyExit(address token) external override onlyEmergencyRole {\\n        address emergencySafe = addressRegistry.emergencySafeAddress();\\n        IDetailedERC20 token_ = IDetailedERC20(token);\\n        uint256 balance = token_.balanceOf(address(this));\\n        token_.safeTransfer(emergencySafe, balance);\\n\\n        emit EmergencyExit(emergencySafe, token_, balance);\\n    }\\n\\n    function calculateMintAmount(uint256 depositAmount)\\n        external\\n        view\\n        override\\n        returns (uint256)\\n    {\\n        uint256 depositValue = getValueFromUnderlyerAmount(depositAmount);\\n        uint256 poolTotalValue = getPoolTotalValue();\\n        return _calculateMintAmount(depositValue, poolTotalValue);\\n    }\\n\\n    /**\\n     * @dev To check if fee will be applied, use `isEarlyRedeem`.\\n     */\\n    function getUnderlyerAmountWithFee(uint256 aptAmount)\\n        public\\n        view\\n        override\\n        returns (uint256)\\n    {\\n        uint256 redeemUnderlyerAmt = getUnderlyerAmount(aptAmount);\\n        if (isEarlyRedeem()) {\\n            uint256 fee = redeemUnderlyerAmt.mul(feePercentage).div(100);\\n            redeemUnderlyerAmt = redeemUnderlyerAmt.sub(fee);\\n        }\\n        return redeemUnderlyerAmt;\\n    }\\n\\n    function getUnderlyerAmount(uint256 aptAmount)\\n        public\\n        view\\n        override\\n        returns (uint256)\\n    {\\n        if (aptAmount == 0) {\\n            return 0;\\n        }\\n        require(totalSupply() > 0, \\\"INSUFFICIENT_TOTAL_SUPPLY\\\");\\n        // the below is mathematically equivalent to:\\n        //\\n        // getUnderlyerAmountFromValue(getAPTValue(aptAmount));\\n        //\\n        // but composing the two functions leads to early loss\\n        // of precision from division, so it's better to do it\\n        // this way:\\n        uint256 underlyerPrice = getUnderlyerPrice();\\n        uint256 decimals = underlyer.decimals();\\n        return\\n            aptAmount\\n                .mul(getPoolTotalValue())\\n                .mul(10**decimals)\\n                .div(totalSupply())\\n                .div(underlyerPrice);\\n    }\\n\\n    /**\\n     * @dev `lastDepositTime` is stored each time user makes a deposit, so\\n     * the waiting period is restarted on each deposit.\\n     */\\n    function isEarlyRedeem() public view override returns (bool) {\\n        // solhint-disable-next-line not-rely-on-time\\n        return block.timestamp.sub(lastDepositTime[msg.sender]) < feePeriod;\\n    }\\n\\n    /**\\n     * @dev Total value also includes that have been borrowed from the pool\\n     * @dev Typically it is the LP Account that borrows from the pool\\n     */\\n    function getPoolTotalValue() public view override returns (uint256) {\\n        uint256 underlyerValue = _getPoolUnderlyerValue();\\n        uint256 mAptValue = _getDeployedValue();\\n        return underlyerValue.add(mAptValue);\\n    }\\n\\n    function getAPTValue(uint256 aptAmount)\\n        external\\n        view\\n        override\\n        returns (uint256)\\n    {\\n        require(totalSupply() > 0, \\\"INSUFFICIENT_TOTAL_SUPPLY\\\");\\n        return aptAmount.mul(getPoolTotalValue()).div(totalSupply());\\n    }\\n\\n    function getValueFromUnderlyerAmount(uint256 underlyerAmount)\\n        public\\n        view\\n        override\\n        returns (uint256)\\n    {\\n        if (underlyerAmount == 0) {\\n            return 0;\\n        }\\n        uint256 decimals = underlyer.decimals();\\n        return getUnderlyerPrice().mul(underlyerAmount).div(10**decimals);\\n    }\\n\\n    function getUnderlyerPrice() public view override returns (uint256) {\\n        IOracleAdapter oracleAdapter =\\n            IOracleAdapter(addressRegistry.oracleAdapterAddress());\\n        return oracleAdapter.getAssetPrice(address(underlyer));\\n    }\\n\\n    function getReserveTopUpValue() external view override returns (int256) {\\n        int256 topUpValue = _getReserveTopUpValue();\\n        if (topUpValue == 0) {\\n            return 0;\\n        }\\n\\n        // Should never revert because the OracleAdapter converts from int256\\n        uint256 price = getUnderlyerPrice();\\n        require(price <= uint256(type(int256).max), \\\"INVALID_PRICE\\\");\\n\\n        int256 topUpAmount =\\n            topUpValue.mul(int256(10**uint256(underlyer.decimals()))).div(\\n                int256(getUnderlyerPrice())\\n            );\\n\\n        return topUpAmount;\\n    }\\n\\n    function _setAddressRegistry(address addressRegistry_) internal {\\n        require(addressRegistry_.isContract(), \\\"INVALID_ADDRESS\\\");\\n        addressRegistry = IAddressRegistryV2(addressRegistry_);\\n        emit AddressRegistryChanged(addressRegistry_);\\n    }\\n\\n    /**\\n     * @dev This hook is in-place to block inter-user APT transfers, as it\\n     * is one avenue that can be used by arbitrageurs to drain the\\n     * reserves.\\n     */\\n    function _beforeTokenTransfer(\\n        address from,\\n        address to,\\n        uint256 amount\\n    ) internal override {\\n        super._beforeTokenTransfer(from, to, amount);\\n        // allow minting and burning\\n        if (from == address(0) || to == address(0)) return;\\n        // block transfer between users\\n        revert(\\\"INVALID_TRANSFER\\\");\\n    }\\n\\n    /**\\n     * @dev This \\\"top-up\\\" value should satisfy:\\n     *\\n     * top-up USD value + pool underlyer USD value\\n     * = (reserve %) * pool deployed value (after unwinding)\\n     *\\n     * @dev Taking the percentage of the pool's current deployed value\\n     * is not sufficient, because the requirement is to have the\\n     * resulting values after unwinding capital satisfy the\\n     * above equation.\\n     *\\n     * More precisely:\\n     *\\n     * R_pre = pool underlyer USD value before pushing unwound\\n     *         capital to the pool\\n     * R_post = pool underlyer USD value after pushing\\n     * DV_pre = pool's deployed USD value before unwinding\\n     * DV_post = pool's deployed USD value after unwinding\\n     * rPerc = the reserve percentage as a whole number\\n     *                     out of 100\\n     *\\n     * We want:\\n     *\\n     *     R_post = (rPerc / 100) * DV_post          (equation 1)\\n     *\\n     *     where R_post = R_pre + top-up value\\n     *           DV_post = DV_pre - top-up value\\n     *\\n     * Making the latter substitutions in equation 1, gives:\\n     *\\n     * top-up value = (rPerc * DV_pre - 100 * R_pre) / (100 + rPerc)\\n     */\\n    function _getReserveTopUpValue() internal view returns (int256) {\\n        uint256 unnormalizedTargetValue =\\n            _getDeployedValue().mul(reservePercentage);\\n        uint256 unnormalizedUnderlyerValue = _getPoolUnderlyerValue().mul(100);\\n\\n        require(unnormalizedTargetValue <= _MAX_INT256, \\\"SIGNED_INT_OVERFLOW\\\");\\n        require(\\n            unnormalizedUnderlyerValue <= _MAX_INT256,\\n            \\\"SIGNED_INT_OVERFLOW\\\"\\n        );\\n        int256 topUpValue =\\n            int256(unnormalizedTargetValue)\\n                .sub(int256(unnormalizedUnderlyerValue))\\n                .div(int256(reservePercentage).add(100));\\n        return topUpValue;\\n    }\\n\\n    /**\\n     * @dev amount of APT minted should be in same ratio to APT supply\\n     * as deposit value is to pool's total value, i.e.:\\n     *\\n     * mint amount / total supply\\n     * = deposit value / pool total value\\n     *\\n     * For denominators, pre or post-deposit amounts can be used.\\n     * The important thing is they are consistent, i.e. both pre-deposit\\n     * or both post-deposit.\\n     */\\n    function _calculateMintAmount(uint256 depositValue, uint256 poolTotalValue)\\n        internal\\n        view\\n        returns (uint256)\\n    {\\n        uint256 totalSupply = totalSupply();\\n\\n        if (poolTotalValue == 0 || totalSupply == 0) {\\n            return depositValue.mul(DEFAULT_APT_TO_UNDERLYER_FACTOR);\\n        }\\n\\n        return (depositValue.mul(totalSupply)).div(poolTotalValue);\\n    }\\n\\n    /**\\n     * @notice Get the USD value of tokens in the pool\\n     * @return The USD value\\n     */\\n    function _getPoolUnderlyerValue() internal view returns (uint256) {\\n        return getValueFromUnderlyerAmount(underlyer.balanceOf(address(this)));\\n    }\\n\\n    /**\\n     * @notice Get the USD value of tokens owed to the pool\\n     * @dev Tokens from the pool are typically borrowed by the LP Account\\n     * @dev Tokens borrowed from the pool are tracked with mAPT\\n     * @return The USD value\\n     */\\n    function _getDeployedValue() internal view returns (uint256) {\\n        MetaPoolToken mApt = MetaPoolToken(addressRegistry.mAptAddress());\\n        return mApt.getDeployedValue(address(this));\\n    }\\n}\\n\"\r\n    },\r\n    \"contracts/registry/AddressRegistryV2.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: BUSL-1.1\\npragma solidity 0.6.11;\\npragma experimental ABIEncoderV2;\\n\\nimport {Initializable, OwnableUpgradeSafe} from \\\"contracts/proxy/Imports.sol\\\";\\nimport {IAddressRegistryV2} from \\\"./IAddressRegistryV2.sol\\\";\\n\\ncontract AddressRegistryV2 is\\n    Initializable,\\n    OwnableUpgradeSafe,\\n    IAddressRegistryV2\\n{\\n    /* ------------------------------- */\\n    /* impl-specific storage variables */\\n    /* ------------------------------- */\\n    /** @dev the same address as the proxy admin; used\\n     *  to protect init functions for upgrades */\\n    address private _proxyAdmin; // <-- deprecated in V2.\\n    bytes32[] internal _idList;\\n    mapping(bytes32 => address) internal _idToAddress;\\n\\n    /* ------------------------------- */\\n\\n    /**\\n     * @dev Since the proxy delegate calls to this \\\"logic\\\" contract, any\\n     * storage set by the logic contract's constructor during deploy is\\n     * disregarded and this function is needed to initialize the proxy\\n     * contract's storage according to this contract's layout.\\n     *\\n     * Since storage is not set yet, there is no simple way to protect\\n     * calling this function with owner modifiers.  Thus the OpenZeppelin\\n     * `initializer` modifier protects this function from being called\\n     * repeatedly.  It should be called during the deployment so that\\n     * it cannot be called by someone else later.\\n     *\\n     * NOTE: this function is copied from the V1 contract and has already\\n     * been called during V1 deployment.  It is included here for clarity.\\n     */\\n    function initialize(address adminAddress) external initializer {\\n        require(adminAddress != address(0), \\\"INVALID_ADMIN\\\");\\n\\n        // initialize ancestor storage\\n        __Context_init_unchained();\\n        __Ownable_init_unchained();\\n\\n        // initialize impl-specific storage\\n        // _setAdminAddress(adminAddress);  <-- deprecated in V2.\\n    }\\n\\n    /**\\n     * @dev Dummy function to show how one would implement an init function\\n     * for future upgrades.  Note the `initializer` modifier can only be used\\n     * once in the entire contract, so we can't use it here.  Instead, we\\n     * protect the upgrade init with the `onlyProxyAdmin` modifier, which\\n     * checks `msg.sender` against the proxy admin slot defined in EIP-1967.\\n     * This will only allow the proxy admin to call this function during upgrades.\\n     */\\n    // solhint-disable-next-line no-empty-blocks\\n    function initializeUpgrade() external virtual onlyProxyAdmin {}\\n\\n    function registerMultipleAddresses(\\n        bytes32[] calldata ids,\\n        address[] calldata addresses\\n    ) external override onlyOwner {\\n        require(ids.length == addresses.length, \\\"Inputs have differing length\\\");\\n        for (uint256 i = 0; i < ids.length; i++) {\\n            bytes32 id = ids[i];\\n            address address_ = addresses[i];\\n            registerAddress(id, address_);\\n        }\\n    }\\n\\n    function deleteAddress(bytes32 id) external override onlyOwner {\\n        for (uint256 i = 0; i < _idList.length; i++) {\\n            if (_idList[i] == id) {\\n                // copy last element to slot i and shorten array\\n                _idList[i] = _idList[_idList.length - 1];\\n                _idList.pop();\\n                address address_ = _idToAddress[id];\\n                delete _idToAddress[id];\\n                emit AddressDeleted(id, address_);\\n                break;\\n            }\\n        }\\n    }\\n\\n    function getIds() external view override returns (bytes32[] memory) {\\n        return _idList;\\n    }\\n\\n    function chainlinkRegistryAddress()\\n        external\\n        view\\n        override\\n        returns (address)\\n    {\\n        return tvlManagerAddress();\\n    }\\n\\n    function daiPoolAddress() external view override returns (address) {\\n        return getAddress(\\\"daiPool\\\");\\n    }\\n\\n    function usdcPoolAddress() external view override returns (address) {\\n        return getAddress(\\\"usdcPool\\\");\\n    }\\n\\n    function usdtPoolAddress() external view override returns (address) {\\n        return getAddress(\\\"usdtPool\\\");\\n    }\\n\\n    function mAptAddress() external view override returns (address) {\\n        return getAddress(\\\"mApt\\\");\\n    }\\n\\n    function lpAccountAddress() external view override returns (address) {\\n        return getAddress(\\\"lpAccount\\\");\\n    }\\n\\n    function lpSafeAddress() external view override returns (address) {\\n        return getAddress(\\\"lpSafe\\\");\\n    }\\n\\n    function adminSafeAddress() external view override returns (address) {\\n        return getAddress(\\\"adminSafe\\\");\\n    }\\n\\n    function emergencySafeAddress() external view override returns (address) {\\n        return getAddress(\\\"emergencySafe\\\");\\n    }\\n\\n    function oracleAdapterAddress() external view override returns (address) {\\n        return getAddress(\\\"oracleAdapter\\\");\\n    }\\n\\n    function registerAddress(bytes32 id, address address_)\\n        public\\n        override\\n        onlyOwner\\n    {\\n        require(address_ != address(0), \\\"Invalid address\\\");\\n        if (_idToAddress[id] == address(0)) {\\n            // id wasn't registered before, so add it to the list\\n            _idList.push(id);\\n        }\\n        _idToAddress[id] = address_;\\n        emit AddressRegistered(id, address_);\\n    }\\n\\n    function tvlManagerAddress() public view override returns (address) {\\n        return getAddress(\\\"tvlManager\\\");\\n    }\\n\\n    function getAddress(bytes32 id) public view override returns (address) {\\n        address address_ = _idToAddress[id];\\n        require(address_ != address(0), \\\"Missing address\\\");\\n        return address_;\\n    }\\n}\\n\"\r\n    },\r\n    \"contracts/oracle/OracleAdapter.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: BUSDL-1.1\\npragma solidity 0.6.11;\\n\\nimport {Address, SafeMath} from \\\"contracts/libraries/Imports.sol\\\";\\n\\nimport {\\n    IERC20,\\n    AccessControl,\\n    ReentrancyGuard\\n} from \\\"contracts/common/Imports.sol\\\";\\n\\nimport {IAddressRegistryV2} from \\\"contracts/registry/Imports.sol\\\";\\n\\nimport {\\n    AggregatorV3Interface,\\n    IOracleAdapter,\\n    IOverrideOracle,\\n    ILockingOracle\\n} from \\\"./Imports.sol\\\";\\n\\n/**\\n * @title Oracle Adapter\\n * @author APY.Finance\\n * @notice Acts as a gateway to oracle values and implements oracle safeguards.\\n *\\n * Oracle Safeguard Flows:\\n *\\n *      - Unlocked → No Manual Submitted Value → Use Chainlink Value (default)\\n *      - Unlocked → No Manual Submitted Value → Chainlink Value == 0 → mAPT totalSupply == 0 → Use 0\\n *      - Unlocked → No Manual Submitted Value → Chainlink Value == 0 → mAPT totalSupply > 0 → Reverts\\n *      - Unlocked → No Manual Submitted Value → No Chainlink Source → Reverts\\n *      - Unlocked → No Manual Submitted Value → Chainlink Value Call Reverts → Reverts\\n *      - Unlocked → No Manual Submitted Value → Chainlink Value > 24 hours → Reverts\\n *      - Unlocked → Use Manual Submitted Value (emergency)\\n *      - Locked → Reverts (nominal)\\n *\\n * @dev It is important to note that zero values are allowed for manual\\n * submission but may result in a revert when pulling from Chainlink.\\n *\\n * This is because there are uncommon situations where the zero TVL is valid,\\n * such as when all funds are unwound and moved back to the liquidity\\n * pools, but total mAPT supply would be zero in those cases.  Outside those\\n * situations, a zero TVL with nonzero supply likely indicates a Chainlink\\n * failure, hence we revert out of an abundance of caution.\\n *\\n * In the rare situation where Chainlink *should* be returning zero TVL\\n * with nonzero mAPT supply, we can set the zero TVL manually via the\\n * Emergency Safe.  Such a situation is not expected to persist long.\\n */\\ncontract OracleAdapter is\\n    AccessControl,\\n    ReentrancyGuard,\\n    IOracleAdapter,\\n    IOverrideOracle,\\n    ILockingOracle\\n{\\n    using SafeMath for uint256;\\n    using Address for address;\\n\\n    IAddressRegistryV2 public addressRegistry;\\n\\n    uint256 public override defaultLockPeriod;\\n\\n    /// @notice Contract is locked until this block number is passed.\\n    uint256 public lockEnd;\\n\\n    /// @notice Chainlink heartbeat duration in seconds\\n    uint256 public chainlinkStalePeriod;\\n\\n    AggregatorV3Interface public tvlSource;\\n    mapping(address => AggregatorV3Interface) public assetSources;\\n\\n    /// @notice Submitted values that override Chainlink values until stale.\\n    mapping(address => Value) public submittedAssetValues;\\n    Value public submittedTvlValue;\\n\\n    event AddressRegistryChanged(address);\\n\\n    modifier unlocked() {\\n        require(!isLocked(), \\\"ORACLE_LOCKED\\\");\\n        _;\\n    }\\n\\n    /**\\n     * @param addressRegistry_ The address registry\\n     * @param tvlSource_ The source for the TVL value\\n     * @param assets The assets priced by sources\\n     * @param sources The source for each asset\\n     * @param chainlinkStalePeriod_ The number of seconds until a source value is stale\\n     * @param defaultLockPeriod_ The default number of blocks a lock should last\\n     */\\n    constructor(\\n        address addressRegistry_,\\n        address tvlSource_,\\n        address[] memory assets,\\n        address[] memory sources,\\n        uint256 chainlinkStalePeriod_,\\n        uint256 defaultLockPeriod_\\n    ) public {\\n        _setAddressRegistry(addressRegistry_);\\n        _setTvlSource(tvlSource_);\\n        _setAssetSources(assets, sources);\\n        _setChainlinkStalePeriod(chainlinkStalePeriod_);\\n        _setDefaultLockPeriod(defaultLockPeriod_);\\n\\n        _setupRole(DEFAULT_ADMIN_ROLE, addressRegistry.emergencySafeAddress());\\n        _setupRole(CONTRACT_ROLE, addressRegistry.mAptAddress());\\n        _setupRole(CONTRACT_ROLE, addressRegistry.tvlManagerAddress());\\n        _setupRole(CONTRACT_ROLE, addressRegistry.lpAccountAddress());\\n        _setupRole(ADMIN_ROLE, addressRegistry.adminSafeAddress());\\n        _setupRole(EMERGENCY_ROLE, addressRegistry.emergencySafeAddress());\\n    }\\n\\n    function setDefaultLockPeriod(uint256 newPeriod)\\n        external\\n        override\\n        nonReentrant\\n        onlyAdminRole\\n    {\\n        _setDefaultLockPeriod(newPeriod);\\n        emit DefaultLockPeriodChanged(newPeriod);\\n    }\\n\\n    function lock() external override nonReentrant onlyContractRole {\\n        _lockFor(defaultLockPeriod);\\n        emit DefaultLocked(msg.sender, defaultLockPeriod, lockEnd);\\n    }\\n\\n    function emergencyUnlock()\\n        external\\n        override\\n        nonReentrant\\n        onlyEmergencyRole\\n    {\\n        _lockFor(0);\\n        emit Unlocked();\\n    }\\n\\n    /**\\n     * @dev Can only increase the remaining locking duration.\\n     * @dev If no lock exists, this allows setting of any defined locking period\\n     */\\n    function lockFor(uint256 activePeriod)\\n        external\\n        override\\n        nonReentrant\\n        onlyContractRole\\n    {\\n        uint256 oldLockEnd = lockEnd;\\n        _lockFor(activePeriod);\\n        require(lockEnd > oldLockEnd, \\\"CANNOT_SHORTEN_LOCK\\\");\\n        emit Locked(msg.sender, activePeriod, lockEnd);\\n    }\\n\\n    /**\\n     * @notice Sets the address registry\\n     * @param addressRegistry_ the address of the registry\\n     */\\n    function emergencySetAddressRegistry(address addressRegistry_)\\n        external\\n        nonReentrant\\n        onlyEmergencyRole\\n    {\\n        _setAddressRegistry(addressRegistry_);\\n    }\\n\\n    //------------------------------------------------------------\\n    // MANUAL SUBMISSION SETTERS\\n    //------------------------------------------------------------\\n\\n    function emergencySetAssetValue(\\n        address asset,\\n        uint256 value,\\n        uint256 period\\n    ) external override nonReentrant onlyEmergencyRole {\\n        // We do allow 0 values for submitted values\\n        uint256 periodEnd = block.number.add(period);\\n        submittedAssetValues[asset] = Value(value, periodEnd);\\n        emit AssetValueSet(asset, value, period, periodEnd);\\n    }\\n\\n    function emergencyUnsetAssetValue(address asset)\\n        external\\n        override\\n        nonReentrant\\n        onlyEmergencyRole\\n    {\\n        require(\\n            submittedAssetValues[asset].periodEnd != 0,\\n            \\\"NO_ASSET_VALUE_SET\\\"\\n        );\\n        submittedAssetValues[asset].periodEnd = block.number;\\n        emit AssetValueUnset(asset);\\n    }\\n\\n    function emergencySetTvl(uint256 value, uint256 period)\\n        external\\n        override\\n        nonReentrant\\n        onlyEmergencyRole\\n    {\\n        // We do allow 0 values for submitted values\\n        uint256 periodEnd = block.number.add(period);\\n        submittedTvlValue = Value(value, periodEnd);\\n        emit TvlSet(value, period, periodEnd);\\n    }\\n\\n    function emergencyUnsetTvl()\\n        external\\n        override\\n        nonReentrant\\n        onlyEmergencyRole\\n    {\\n        require(submittedTvlValue.periodEnd != 0, \\\"NO_TVL_SET\\\");\\n        submittedTvlValue.periodEnd = block.number;\\n        emit TvlUnset();\\n    }\\n\\n    //------------------------------------------------------------\\n    // CHAINLINK SETTERS\\n    //------------------------------------------------------------\\n\\n    function emergencySetTvlSource(address source)\\n        external\\n        override\\n        nonReentrant\\n        onlyEmergencyRole\\n    {\\n        _setTvlSource(source);\\n    }\\n\\n    function emergencySetAssetSources(\\n        address[] memory assets,\\n        address[] memory sources\\n    ) external override nonReentrant onlyEmergencyRole {\\n        _setAssetSources(assets, sources);\\n    }\\n\\n    function emergencySetAssetSource(address asset, address source)\\n        external\\n        override\\n        nonReentrant\\n        onlyEmergencyRole\\n    {\\n        _setAssetSource(asset, source);\\n    }\\n\\n    function setChainlinkStalePeriod(uint256 chainlinkStalePeriod_)\\n        external\\n        override\\n        nonReentrant\\n        onlyAdminRole\\n    {\\n        _setChainlinkStalePeriod(chainlinkStalePeriod_);\\n    }\\n\\n    //------------------------------------------------------------\\n    // ORACLE VALUE GETTERS\\n    //------------------------------------------------------------\\n\\n    /**\\n     * @dev Zero values are considered valid if there is no mAPT minted,\\n     * and therefore no PoolTokenV2 liquidity in the LP Safe.\\n     */\\n    function getTvl() external view override unlocked returns (uint256) {\\n        if (hasTvlOverride()) {\\n            return submittedTvlValue.value;\\n        }\\n\\n        uint256 price = _getPriceFromSource(tvlSource);\\n\\n        require(\\n            price > 0 ||\\n                IERC20(addressRegistry.mAptAddress()).totalSupply() == 0,\\n            \\\"INVALID_ZERO_TVL\\\"\\n        );\\n\\n        return price;\\n    }\\n\\n    function hasTvlOverride() public view override returns (bool) {\\n        return block.number < submittedTvlValue.periodEnd;\\n    }\\n\\n    function getAssetPrice(address asset)\\n        external\\n        view\\n        override\\n        unlocked\\n        returns (uint256)\\n    {\\n        if (hasAssetOverride(asset)) {\\n            return submittedAssetValues[asset].value;\\n        }\\n\\n        AggregatorV3Interface source = assetSources[asset];\\n        uint256 price = _getPriceFromSource(source);\\n\\n        //we do not allow 0 values for chainlink\\n        require(price > 0, \\\"MISSING_ASSET_VALUE\\\");\\n\\n        return price;\\n    }\\n\\n    function hasAssetOverride(address asset)\\n        public\\n        view\\n        override\\n        returns (bool)\\n    {\\n        return block.number < submittedAssetValues[asset].periodEnd;\\n    }\\n\\n    function isLocked() public view override returns (bool) {\\n        return block.number < lockEnd;\\n    }\\n\\n    function _setDefaultLockPeriod(uint256 newPeriod) internal {\\n        defaultLockPeriod = newPeriod;\\n    }\\n\\n    function _lockFor(uint256 activePeriod) internal {\\n        lockEnd = block.number.add(activePeriod);\\n    }\\n\\n    function _setAddressRegistry(address addressRegistry_) internal {\\n        require(Address.isContract(addressRegistry_), \\\"INVALID_ADDRESS\\\");\\n        addressRegistry = IAddressRegistryV2(addressRegistry_);\\n        emit AddressRegistryChanged(addressRegistry_);\\n    }\\n\\n    function _setChainlinkStalePeriod(uint256 chainlinkStalePeriod_) internal {\\n        require(chainlinkStalePeriod_ > 0, \\\"INVALID_STALE_PERIOD\\\");\\n        chainlinkStalePeriod = chainlinkStalePeriod_;\\n        emit ChainlinkStalePeriodUpdated(chainlinkStalePeriod_);\\n    }\\n\\n    function _setTvlSource(address source) internal {\\n        require(source.isContract(), \\\"INVALID_SOURCE\\\");\\n        tvlSource = AggregatorV3Interface(source);\\n        emit TvlSourceUpdated(source);\\n    }\\n\\n    function _setAssetSources(address[] memory assets, address[] memory sources)\\n        internal\\n    {\\n        require(assets.length == sources.length, \\\"INCONSISTENT_PARAMS_LENGTH\\\");\\n        for (uint256 i = 0; i < assets.length; i++) {\\n            _setAssetSource(assets[i], sources[i]);\\n        }\\n    }\\n\\n    function _setAssetSource(address asset, address source) internal {\\n        require(source.isContract(), \\\"INVALID_SOURCE\\\");\\n        assetSources[asset] = AggregatorV3Interface(source);\\n        emit AssetSourceUpdated(asset, source);\\n    }\\n\\n    /**\\n     * @notice Get the price from a source (aggregator)\\n     * @param source The Chainlink aggregator\\n     * @return the price from the source\\n     */\\n    function _getPriceFromSource(AggregatorV3Interface source)\\n        internal\\n        view\\n        returns (uint256)\\n    {\\n        require(address(source).isContract(), \\\"INVALID_SOURCE\\\");\\n        (, int256 price, , uint256 updatedAt, ) = source.latestRoundData();\\n\\n        // must be negative for cast to uint\\n        require(price >= 0, \\\"NEGATIVE_VALUE\\\");\\n\\n        // solhint-disable not-rely-on-time\\n        require(\\n            block.timestamp.sub(updatedAt) <= chainlinkStalePeriod,\\n            \\\"CHAINLINK_STALE_DATA\\\"\\n        );\\n        // solhint-enable not-rely-on-time\\n\\n        return uint256(price);\\n    }\\n}\\n\"\r\n    },\r\n    \"contracts/lpaccount/LpAccount.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: BUSDL-1.1\\npragma solidity 0.6.11;\\npragma experimental ABIEncoderV2;\\n\\nimport {\\n    IAssetAllocation,\\n    IERC20,\\n    IEmergencyExit\\n} from \\\"contracts/common/Imports.sol\\\";\\nimport {\\n    Address,\\n    NamedAddressSet,\\n    SafeERC20\\n} from \\\"contracts/libraries/Imports.sol\\\";\\nimport {\\n    Initializable,\\n    ReentrancyGuardUpgradeSafe,\\n    AccessControlUpgradeSafe\\n} from \\\"contracts/proxy/Imports.sol\\\";\\nimport {ILiquidityPoolV2} from \\\"contracts/pool/Imports.sol\\\";\\nimport {IAddressRegistryV2} from \\\"contracts/registry/Imports.sol\\\";\\nimport {\\n    IAssetAllocationRegistry,\\n    IErc20Allocation,\\n    Erc20AllocationConstants\\n} from \\\"contracts/tvl/Imports.sol\\\";\\n\\nimport {\\n    IZap,\\n    ISwap,\\n    ILpAccount,\\n    IZapRegistry,\\n    ISwapRegistry\\n} from \\\"./Imports.sol\\\";\\n\\nimport {ILockingOracle} from \\\"contracts/oracle/Imports.sol\\\";\\n\\ncontract LpAccount is\\n    Initializable,\\n    AccessControlUpgradeSafe,\\n    ReentrancyGuardUpgradeSafe,\\n    ILpAccount,\\n    IZapRegistry,\\n    ISwapRegistry,\\n    Erc20AllocationConstants,\\n    IEmergencyExit\\n{\\n    using Address for address;\\n    using SafeERC20 for IERC20;\\n    using NamedAddressSet for NamedAddressSet.ZapSet;\\n    using NamedAddressSet for NamedAddressSet.SwapSet;\\n\\n    uint256 private constant _DEFAULT_LOCK_PERIOD = 135;\\n\\n    IAddressRegistryV2 public addressRegistry;\\n    uint256 public lockPeriod;\\n\\n    NamedAddressSet.ZapSet private _zaps;\\n    NamedAddressSet.SwapSet private _swaps;\\n\\n    /** @notice Log when the address registry is changed */\\n    event AddressRegistryChanged(address);\\n\\n    /** @notice Log when the lock period is changed */\\n    event LockPeriodChanged(uint256);\\n\\n    /**\\n     * @dev Since the proxy delegate calls to this \\\"logic\\\" contract, any\\n     * storage set by the logic contract's constructor during deploy is\\n     * disregarded and this function is needed to initialize the proxy\\n     * contract's storage according to this contract's layout.\\n     *\\n     * Since storage is not set yet, there is no simple way to protect\\n     * calling this function with owner modifiers.  Thus the OpenZeppelin\\n     * `initializer` modifier protects this function from being called\\n     * repeatedly.  It should be called during the deployment so that\\n     * it cannot be called by someone else later.\\n     */\\n    function initialize(address addressRegistry_) external initializer {\\n        // initialize ancestor storage\\n        __Context_init_unchained();\\n        __AccessControl_init_unchained();\\n        __ReentrancyGuard_init_unchained();\\n\\n        // initialize impl-specific storage\\n        _setAddressRegistry(addressRegistry_);\\n        _setupRole(DEFAULT_ADMIN_ROLE, addressRegistry.emergencySafeAddress());\\n        _setupRole(EMERGENCY_ROLE, addressRegistry.emergencySafeAddress());\\n        _setupRole(ADMIN_ROLE, addressRegistry.adminSafeAddress());\\n        _setupRole(LP_ROLE, addressRegistry.lpSafeAddress());\\n        _setupRole(CONTRACT_ROLE, addressRegistry.mAptAddress());\\n\\n        lockPeriod = _DEFAULT_LOCK_PERIOD;\\n    }\\n\\n    /**\\n     * @dev Dummy function to show how one would implement an init function\\n     * for future upgrades.  Note the `initializer` modifier can only be used\\n     * once in the entire contract, so we can't use it here.  Instead, we\\n     * protect the upgrade init with the `onlyProxyAdmin` modifier, which\\n     * checks `msg.sender` against the proxy admin slot defined in EIP-1967.\\n     * This will only allow the proxy admin to call this function during upgrades.\\n     */\\n    // solhint-disable-next-line no-empty-blocks\\n    function initializeUpgrade() external virtual nonReentrant onlyProxyAdmin {}\\n\\n    /**\\n     * @notice Sets the address registry\\n     * @param addressRegistry_ the address of the registry\\n     */\\n    function emergencySetAddressRegistry(address addressRegistry_)\\n        external\\n        nonReentrant\\n        onlyEmergencyRole\\n    {\\n        _setAddressRegistry(addressRegistry_);\\n    }\\n\\n    /**\\n     * @notice Set the lock period\\n     * @param lockPeriod_ The new lock period\\n     */\\n    function setLockPeriod(uint256 lockPeriod_)\\n        external\\n        nonReentrant\\n        onlyAdminRole\\n    {\\n        lockPeriod = lockPeriod_;\\n        emit LockPeriodChanged(lockPeriod_);\\n    }\\n\\n    function deployStrategy(string calldata name, uint256[] calldata amounts)\\n        external\\n        override\\n        nonReentrant\\n        onlyLpRole\\n    {\\n        IZap zap = _zaps.get(name);\\n        require(address(zap) != address(0), \\\"INVALID_NAME\\\");\\n\\n        bool isAssetAllocationRegistered =\\n            _checkAllocationRegistrations(zap.assetAllocations());\\n        require(isAssetAllocationRegistered, \\\"MISSING_ASSET_ALLOCATIONS\\\");\\n\\n        bool isErc20TokenRegistered =\\n            _checkErc20Registrations(zap.erc20Allocations());\\n        require(isErc20TokenRegistered, \\\"MISSING_ERC20_ALLOCATIONS\\\");\\n\\n        address(zap).functionDelegateCall(\\n            abi.encodeWithSelector(IZap.deployLiquidity.selector, amounts)\\n        );\\n        _lockOracleAdapter(lockPeriod);\\n    }\\n\\n    function unwindStrategy(\\n        string calldata name,\\n        uint256 amount,\\n        uint8 index\\n    ) external override nonReentrant onlyLpRole {\\n        address zap = address(_zaps.get(name));\\n        require(zap != address(0), \\\"INVALID_NAME\\\");\\n\\n        zap.functionDelegateCall(\\n            abi.encodeWithSelector(IZap.unwindLiquidity.selector, amount, index)\\n        );\\n        _lockOracleAdapter(lockPeriod);\\n    }\\n\\n    function registerZap(IZap zap)\\n        external\\n        override\\n        nonReentrant\\n        onlyAdminRole\\n    {\\n        _zaps.add(zap);\\n\\n        emit ZapRegistered(zap);\\n    }\\n\\n    function removeZap(string calldata name)\\n        external\\n        override\\n        nonReentrant\\n        onlyAdminRole\\n    {\\n        _zaps.remove(name);\\n\\n        emit ZapRemoved(name);\\n    }\\n\\n    function transferToPool(address pool, uint256 amount)\\n        external\\n        override\\n        nonReentrant\\n        onlyContractRole\\n    {\\n        IERC20 underlyer = ILiquidityPoolV2(pool).underlyer();\\n        underlyer.safeTransfer(pool, amount);\\n    }\\n\\n    function swap(\\n        string calldata name,\\n        uint256 amount,\\n        uint256 minAmount\\n    ) external override nonReentrant onlyLpRole {\\n        ISwap swap_ = _swaps.get(name);\\n        require(address(swap_) != address(0), \\\"INVALID_NAME\\\");\\n\\n        bool isErc20TokenRegistered =\\n            _checkErc20Registrations(swap_.erc20Allocations());\\n\\n        require(isErc20TokenRegistered, \\\"MISSING_ERC20_ALLOCATIONS\\\");\\n\\n        address(swap_).functionDelegateCall(\\n            abi.encodeWithSelector(ISwap.swap.selector, amount, minAmount)\\n        );\\n        _lockOracleAdapter(lockPeriod);\\n    }\\n\\n    function registerSwap(ISwap swap_)\\n        external\\n        override\\n        nonReentrant\\n        onlyAdminRole\\n    {\\n        _swaps.add(swap_);\\n\\n        emit SwapRegistered(swap_);\\n    }\\n\\n    function removeSwap(string calldata name)\\n        external\\n        override\\n        nonReentrant\\n        onlyAdminRole\\n    {\\n        _swaps.remove(name);\\n\\n        emit SwapRemoved(name);\\n    }\\n\\n    function claim(string calldata name)\\n        external\\n        override\\n        nonReentrant\\n        onlyLpRole\\n    {\\n        IZap zap = _zaps.get(name);\\n        require(address(zap) != address(0), \\\"INVALID_NAME\\\");\\n\\n        bool isErc20TokenRegistered =\\n            _checkErc20Registrations(zap.erc20Allocations());\\n        require(isErc20TokenRegistered, \\\"MISSING_ERC20_ALLOCATIONS\\\");\\n\\n        address(zap).functionDelegateCall(\\n            abi.encodeWithSelector(IZap.claim.selector)\\n        );\\n        _lockOracleAdapter(lockPeriod);\\n    }\\n\\n    function emergencyExit(address token) external override onlyEmergencyRole {\\n        address emergencySafe = addressRegistry.emergencySafeAddress();\\n        IERC20 token_ = IERC20(token);\\n        uint256 balance = token_.balanceOf(address(this));\\n        token_.safeTransfer(emergencySafe, balance);\\n\\n        emit EmergencyExit(emergencySafe, token_, balance);\\n    }\\n\\n    function zapNames() external view override returns (string[] memory) {\\n        return _zaps.names();\\n    }\\n\\n    function swapNames() external view override returns (string[] memory) {\\n        return _swaps.names();\\n    }\\n\\n    /**\\n     * @notice Lock oracle adapter for the configured period\\n     * @param lockPeriod_ The number of blocks to lock for\\n     */\\n    function _lockOracleAdapter(uint256 lockPeriod_) internal {\\n        ILockingOracle oracleAdapter =\\n            ILockingOracle(addressRegistry.oracleAdapterAddress());\\n        oracleAdapter.lockFor(lockPeriod_);\\n    }\\n\\n    function _setAddressRegistry(address addressRegistry_) internal {\\n        require(Address.isContract(addressRegistry_), \\\"INVALID_ADDRESS\\\");\\n        addressRegistry = IAddressRegistryV2(addressRegistry_);\\n        emit AddressRegistryChanged(addressRegistry_);\\n    }\\n\\n    /**\\n     * @notice Check if multiple asset allocations are ALL registered\\n     * @param allocationNames An array of asset allocation names to check\\n     * @return `true` if every asset allocation is registered, otherwise `false`\\n     */\\n    function _checkAllocationRegistrations(string[] memory allocationNames)\\n        internal\\n        view\\n        returns (bool)\\n    {\\n        IAssetAllocationRegistry tvlManager =\\n            IAssetAllocationRegistry(addressRegistry.getAddress(\\\"tvlManager\\\"));\\n\\n        return tvlManager.isAssetAllocationRegistered(allocationNames);\\n    }\\n\\n    /**\\n     * @notice Check if multiple ERC20 asset allocations are ALL registered\\n     * @param tokens An array of ERC20 tokens to check\\n     * @return `true` if every ERC20 is registered, otherwise `false`\\n     */\\n    function _checkErc20Registrations(IERC20[] memory tokens)\\n        internal\\n        view\\n        returns (bool)\\n    {\\n        IAssetAllocationRegistry tvlManager =\\n            IAssetAllocationRegistry(addressRegistry.getAddress(\\\"tvlManager\\\"));\\n        IErc20Allocation erc20Allocation =\\n            IErc20Allocation(\\n                address(\\n                    tvlManager.getAssetAllocation(Erc20AllocationConstants.NAME)\\n                )\\n            );\\n\\n        return erc20Allocation.isErc20TokenRegistered(tokens);\\n    }\\n}\\n\"\r\n    },\r\n    \"contracts/proxy/Imports.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: BUSDL-1.1\\npragma solidity 0.6.11;\\n\\nimport {Initializable} from \\\"./Initializable.sol\\\";\\nimport {\\n    OwnableUpgradeSafe\\n} from \\\"@openzeppelin/contracts-ethereum-package/contracts/access/Ownable.sol\\\";\\nimport {\\n    ERC20UpgradeSafe\\n} from \\\"@openzeppelin/contracts-ethereum-package/contracts/token/ERC20/ERC20.sol\\\";\\nimport {\\n    ReentrancyGuardUpgradeSafe\\n} from \\\"@openzeppelin/contracts-ethereum-package/contracts/utils/ReentrancyGuard.sol\\\";\\nimport {\\n    PausableUpgradeSafe\\n} from \\\"@openzeppelin/contracts-ethereum-package/contracts/utils/Pausable.sol\\\";\\nimport {AccessControlUpgradeSafe} from \\\"./AccessControlUpgradeSafe.sol\\\";\\n\\nimport {ProxyAdmin} from \\\"@openzeppelin/contracts/proxy/ProxyAdmin.sol\\\";\\nimport {\\n    TransparentUpgradeableProxy\\n} from \\\"@openzeppelin/contracts/proxy/TransparentUpgradeableProxy.sol\\\";\\n\\n/* Aliases don't persist so we can't rename them here, but you should\\n * rename them at point of import with the \\\"UpgradeSafe\\\" prefix, e.g.\\n * import {Address as AddressUpgradeSafe} etc.\\n */\\nimport {\\n    Address\\n} from \\\"@openzeppelin/contracts-ethereum-package/contracts/utils/Address.sol\\\";\\nimport {\\n    SafeMath\\n} from \\\"@openzeppelin/contracts-ethereum-package/contracts/math/SafeMath.sol\\\";\\nimport {\\n    SignedSafeMath\\n} from \\\"@openzeppelin/contracts-ethereum-package/contracts/math/SignedSafeMath.sol\\\";\\n\"\r\n    },\r\n    \"contracts/deploy/constants.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: BUSDL-1.1\\npragma solidity 0.6.11;\\n\\nabstract contract DeploymentConstants {\\n    address public constant ADDRESS_REGISTRY_PROXY_ADMIN = \\n        0xFbF6c940c1811C3ebc135A9c4e39E042d02435d1;\\n    address public constant ADDRESS_REGISTRY_PROXY = 0x7EC81B7035e91f8435BdEb2787DCBd51116Ad303;\\n\\n    address public constant DAI_ADDRESS =\\n        0x6B175474E89094C44Da98b954EedeAC495271d0F;\\n    address public constant USDC_ADDRESS =\\n        0xA0b86991c6218b36c1d19D4a2e9Eb0cE3606eB48;\\n    address public constant USDT_ADDRESS =\\n        0xdAC17F958D2ee523a2206206994597C13D831ec7;\\n\\n    address public constant POOL_PROXY_ADMIN =\\n        0x7965283631253DfCb71Db63a60C656DEDF76234f;\\n    address public constant DAI_POOL_PROXY =\\n        0x75CE0E501e2E6776FcAAa514f394a88a772A8970;\\n    address public constant USDC_POOL_PROXY =\\n        0xe18b0365D5D09F394f84eE56ed29DD2d8D6Fba5f;\\n    address public constant USDT_POOL_PROXY =\\n        0xeA9c5a2717D5Ab75afaAC340151e73a7e37d99A7;\\n\\n    address public constant TVL_AGG_ADDRESS =\\n        0xDb299D394817D8e7bBe297E84AFfF7106CF92F5f;\\n    address public constant DAI_USD_AGG_ADDRESS =\\n        0xAed0c38402a5d19df6E4c03F4E2DceD6e29c1ee9;\\n    address public constant USDC_USD_AGG_ADDRESS =\\n        0x8fFfFfd4AfB6115b954Bd326cbe7B4BA576818f6;\\n    address public constant USDT_USD_AGG_ADDRESS =\\n        0x3E7d1eAB13ad0104d2750B8863b489D65364e32D;\\n}\\n\"\r\n    },\r\n    \"contracts/pool/Imports.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: BUSDL-1.1\\npragma solidity 0.6.11;\\n\\nimport {IReservePool} from \\\"./IReservePool.sol\\\";\\nimport {IWithdrawFeePool} from \\\"./IWithdrawFeePool.sol\\\";\\nimport {ILockingPool} from \\\"./ILockingPool.sol\\\";\\nimport {IPoolToken} from \\\"./IPoolToken.sol\\\";\\nimport {ILiquidityPoolV2} from \\\"./ILiquidityPoolV2.sol\\\";\\n\"\r\n    },\r\n    \"contracts/tvl/Imports.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: BUSDL-1.1\\npragma solidity 0.6.11;\\n\\nimport {IErc20Allocation} from \\\"./IErc20Allocation.sol\\\";\\nimport {IChainlinkRegistry} from \\\"./IChainlinkRegistry.sol\\\";\\nimport {IAssetAllocationRegistry} from \\\"./IAssetAllocationRegistry.sol\\\";\\nimport {AssetAllocationBase} from \\\"./AssetAllocationBase.sol\\\";\\nimport {ImmutableAssetAllocation} from \\\"./ImmutableAssetAllocation.sol\\\";\\nimport {Erc20AllocationConstants} from \\\"./Erc20Allocation.sol\\\";\\n\"\r\n    },\r\n    \"contracts/mapt/ILpAccountFunder.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: BUSDL-1.1\\npragma solidity 0.6.11;\\npragma experimental ABIEncoderV2;\\n\\nimport {IReservePool} from \\\"contracts/pool/Imports.sol\\\";\\n\\n/**\\n * @notice Facilitate lending liquidity to the LP Account from pools\\n */\\ninterface ILpAccountFunder {\\n    /**\\n     * @notice Log when liquidity is lent to the LP Account\\n     * @param poolIds An array of address registry IDs for pools that lent\\n     * @param amounts An array of the amount each pool lent\\n     */\\n    event FundLpAccount(bytes32[] poolIds, uint256[] amounts);\\n\\n    /**\\n     * @notice Log when liquidity is repaid to the pools\\n     * @param poolIds An array of address registry IDs for pools were repaid\\n     * @param amounts An array of the amount each pool was repaid\\n     */\\n    event WithdrawFromLpAccount(bytes32[] poolIds, uint256[] amounts);\\n\\n    /**\\n     * @notice Lend liquidity to the LP Account from pools\\n     * @dev Should calculate excess liquidity that can be lent\\n     * @param pools An array of address registry IDs for pools that lent\\n     */\\n    function fundLpAccount(bytes32[] calldata pools) external;\\n\\n    /**\\n     * @notice Repay liquidity borrowed by the LP Account\\n     * @dev Should repay enough to fill up the pools' reserves\\n     * @param pools An array of address registry IDs for pools that were repaid\\n     */\\n    function withdrawFromLpAccount(bytes32[] calldata pools) external;\\n}\\n\"\r\n    },\r\n    \"contracts/proxy/Initializable.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: BUSDL-1.1\\npragma solidity 0.6.11;\\n\\nimport {\\n    Initializable as OZInitializable\\n} from \\\"@openzeppelin/contracts-ethereum-package/contracts/Initializable.sol\\\";\\n\\ncontract Initializable is OZInitializable {\\n    /**\\n     * @dev Throws if called by any account other than the proxy admin.\\n     */\\n    modifier onlyProxyAdmin() {\\n        require(msg.sender == proxyAdmin(), \\\"PROXY_ADMIN_ONLY\\\");\\n        _;\\n    }\\n\\n    /**\\n     * @dev Returns the proxy admin address using the slot specified in EIP-1967:\\n     *\\n     * 0xb53127684a568b3173ae13b9f8a6016e243e63b6e8ee1178d6a717850b5d6103\\n     *  = bytes32(uint256(keccak256('eip1967.proxy.admin')) - 1)\\n     */\\n    function proxyAdmin() public view returns (address adm) {\\n        bytes32 slot =\\n            0xb53127684a568b3173ae13b9f8a6016e243e63b6e8ee1178d6a717850b5d6103;\\n        // solhint-disable-next-line no-inline-assembly\\n        assembly {\\n            adm := sload(slot)\\n        }\\n    }\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts-ethereum-package/contracts/access/Ownable.sol\": {\r\n      \"content\": \"pragma solidity ^0.6.0;\\n\\nimport \\\"../GSN/Context.sol\\\";\\nimport \\\"../Initializable.sol\\\";\\n/**\\n * @dev Contract module which provides a basic access control mechanism, where\\n * there is an account (an owner) that can be granted exclusive access to\\n * specific functions.\\n *\\n * By default, the owner account will be the one that deploys the contract. This\\n * can later be changed with {transferOwnership}.\\n *\\n * This module is used through inheritance. It will make available the modifier\\n * `onlyOwner`, which can be applied to your functions to restrict their use to\\n * the owner.\\n */\\ncontract OwnableUpgradeSafe is Initializable, ContextUpgradeSafe {\\n    address private _owner;\\n\\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\\n\\n    /**\\n     * @dev Initializes the contract setting the deployer as the initial owner.\\n     */\\n\\n    function __Ownable_init() internal initializer {\\n        __Context_init_unchained();\\n        __Ownable_init_unchained();\\n    }\\n\\n    function __Ownable_init_unchained() internal initializer {\\n\\n\\n        address msgSender = _msgSender();\\n        _owner = msgSender;\\n        emit OwnershipTransferred(address(0), msgSender);\\n\\n    }\\n\\n\\n    /**\\n     * @dev Returns the address of the current owner.\\n     */\\n    function owner() public view returns (address) {\\n        return _owner;\\n    }\\n\\n    /**\\n     * @dev Throws if called by any account other than the owner.\\n     */\\n    modifier onlyOwner() {\\n        require(_owner == _msgSender(), \\\"Ownable: caller is not the owner\\\");\\n        _;\\n    }\\n\\n    /**\\n     * @dev Leaves the contract without owner. It will not be possible to call\\n     * `onlyOwner` functions anymore. Can only be called by the current owner.\\n     *\\n     * NOTE: Renouncing ownership will leave the contract without an owner,\\n     * thereby removing any functionality that is only available to the owner.\\n     */\\n    function renounceOwnership() public virtual onlyOwner {\\n        emit OwnershipTransferred(_owner, address(0));\\n        _owner = address(0);\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Can only be called by the current owner.\\n     */\\n    function transferOwnership(address newOwner) public virtual onlyOwner {\\n        require(newOwner != address(0), \\\"Ownable: new owner is the zero address\\\");\\n        emit OwnershipTransferred(_owner, newOwner);\\n        _owner = newOwner;\\n    }\\n\\n    uint256[49] private __gap;\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts-ethereum-package/contracts/token/ERC20/ERC20.sol\": {\r\n      \"content\": \"pragma solidity ^0.6.0;\\n\\nimport \\\"../../GSN/Context.sol\\\";\\nimport \\\"./IERC20.sol\\\";\\nimport \\\"../../math/SafeMath.sol\\\";\\nimport \\\"../../utils/Address.sol\\\";\\nimport \\\"../../Initializable.sol\\\";\\n\\n/**\\n * @dev Implementation of the {IERC20} interface.\\n *\\n * This implementation is agnostic to the way tokens are created. This means\\n * that a supply mechanism has to be added in a derived contract using {_mint}.\\n * For a generic mechanism see {ERC20MinterPauser}.\\n *\\n * TIP: For a detailed writeup see our guide\\n * https://forum.zeppelin.solutions/t/how-to-implement-erc20-supply-mechanisms/226[How\\n * to implement supply mechanisms].\\n *\\n * We have followed general OpenZeppelin guidelines: functions revert instead\\n * of returning `false` on failure. This behavior is nonetheless conventional\\n * and does not conflict with the expectations of ERC20 applications.\\n *\\n * Additionally, an {Approval} event is emitted on calls to {transferFrom}.\\n * This allows applications to reconstruct the allowance for all accounts just\\n * by listening to said events. Other implementations of the EIP may not emit\\n * these events, as it isn't required by the specification.\\n *\\n * Finally, the non-standard {decreaseAllowance} and {increaseAllowance}\\n * functions have been added to mitigate the well-known issues around setting\\n * allowances. See {IERC20-approve}.\\n */\\ncontract ERC20UpgradeSafe is Initializable, ContextUpgradeSafe, IERC20 {\\n    using SafeMath for uint256;\\n    using Address for address;\\n\\n    mapping (address => uint256) private _balances;\\n\\n    mapping (address => mapping (address => uint256)) private _allowances;\\n\\n    uint256 private _totalSupply;\\n\\n    string private _name;\\n    string private _symbol;\\n    uint8 private _decimals;\\n\\n    /**\\n     * @dev Sets the values for {name} and {symbol}, initializes {decimals} with\\n     * a default value of 18.\\n     *\\n     * To select a different value for {decimals}, use {_setupDecimals}.\\n     *\\n     * All three of these values are immutable: they can only be set once during\\n     * construction.\\n     */\\n\\n    function __ERC20_init(string memory name, string memory symbol) internal initializer {\\n        __Context_init_unchained();\\n        __ERC20_init_unchained(name, symbol);\\n    }\\n\\n    function __ERC20_init_unchained(string memory name, string memory symbol) internal initializer {\\n\\n\\n        _name = name;\\n        _symbol = symbol;\\n        _decimals = 18;\\n\\n    }\\n\\n\\n    /**\\n     * @dev Returns the name of the token.\\n     */\\n    function name() public view returns (string memory) {\\n        return _name;\\n    }\\n\\n    /**\\n     * @dev Returns the symbol of the token, usually a shorter version of the\\n     * name.\\n     */\\n    function symbol() public view returns (string memory) {\\n        return _symbol;\\n    }\\n\\n    /**\\n     * @dev Returns the number of decimals used to get its user representation.\\n     * For example, if `decimals` equals `2`, a balance of `505` tokens should\\n     * be displayed to a user as `5,05` (`505 / 10 ** 2`).\\n     *\\n     * Tokens usually opt for a value of 18, imitating the relationship between\\n     * Ether and Wei. This is the value {ERC20} uses, unless {_setupDecimals} is\\n     * called.\\n     *\\n     * NOTE: This information is only used for _display_ purposes: it in\\n     * no way affects any of the arithmetic of the contract, including\\n     * {IERC20-balanceOf} and {IERC20-transfer}.\\n     */\\n    function decimals() public view returns (uint8) {\\n        return _decimals;\\n    }\\n\\n    /**\\n     * @dev See {IERC20-totalSupply}.\\n     */\\n    function totalSupply() public view override returns (uint256) {\\n        return _totalSupply;\\n    }\\n\\n    /**\\n     * @dev See {IERC20-balanceOf}.\\n     */\\n    function balanceOf(address account) public view override returns (uint256) {\\n        return _balances[account];\\n    }\\n\\n    /**\\n     * @dev See {IERC20-transfer}.\\n     *\\n     * Requirements:\\n     *\\n     * - `recipient` cannot be the zero address.\\n     * - the caller must have a balance of at least `amount`.\\n     */\\n    function transfer(address recipient, uint256 amount) public virtual override returns (bool) {\\n        _transfer(_msgSender(), recipient, amount);\\n        return true;\\n    }\\n\\n    /**\\n     * @dev See {IERC20-allowance}.\\n     */\\n    function allowance(address owner, address spender) public view virtual override returns (uint256) {\\n        return _allowances[owner][spender];\\n    }\\n\\n    /**\\n     * @dev See {IERC20-approve}.\\n     *\\n     * Requirements:\\n     *\\n     * - `spender` cannot be the zero address.\\n     */\\n    function approve(address spender, uint256 amount) public virtual override returns (bool) {\\n        _approve(_msgSender(), spender, amount);\\n        return true;\\n    }\\n\\n    /**\\n     * @dev See {IERC20-transferFrom}.\\n     *\\n     * Emits an {Approval} event indicating the updated allowance. This is not\\n     * required by the EIP. See the note at the beginning of {ERC20};\\n     *\\n     * Requirements:\\n     * - `sender` and `recipient` cannot be the zero address.\\n     * - `sender` must have a balance of at least `amount`.\\n     * - the caller must have allowance for ``sender``'s tokens of at least\\n     * `amount`.\\n     */\\n    function transferFrom(address sender, address recipient, uint256 amount) public virtual override returns (bool) {\\n        _transfer(sender, recipient, amount);\\n        _approve(sender, _msgSender(), _allowances[sender][_msgSender()].sub(amount, \\\"ERC20: transfer amount exceeds allowance\\\"));\\n        return true;\\n    }\\n\\n    /**\\n     * @dev Atomically increases the allowance granted to `spender` by the caller.\\n     *\\n     * This is an alternative to {approve} that can be used as a mitigation for\\n     * problems described in {IERC20-approve}.\\n     *\\n     * Emits an {Approval} event indicating the updated allowance.\\n     *\\n     * Requirements:\\n     *\\n     * - `spender` cannot be the zero address.\\n     */\\n    function increaseAllowance(address spender, uint256 addedValue) public virtual returns (bool) {\\n        _approve(_msgSender(), spender, _allowances[_msgSender()][spender].add(addedValue));\\n        return true;\\n    }\\n\\n    /**\\n     * @dev Atomically decreases the allowance granted to `spender` by the caller.\\n     *\\n     * This is an alternative to {approve} that can be used as a mitigation for\\n     * problems described in {IERC20-approve}.\\n     *\\n     * Emits an {Approval} event indicating the updated allowance.\\n     *\\n     * Requirements:\\n     *\\n     * - `spender` cannot be the zero address.\\n     * - `spender` must have allowance for the caller of at least\\n     * `subtractedValue`.\\n     */\\n    function decreaseAllowance(address spender, uint256 subtractedValue) public virtual returns (bool) {\\n        _approve(_msgSender(), spender, _allowances[_msgSender()][spender].sub(subtractedValue, \\\"ERC20: decreased allowance below zero\\\"));\\n        return true;\\n    }\\n\\n    /**\\n     * @dev Moves tokens `amount` from `sender` to `recipient`.\\n     *\\n     * This is internal function is equivalent to {transfer}, and can be used to\\n     * e.g. implement automatic token fees, slashing mechanisms, etc.\\n     *\\n     * Emits a {Transfer} event.\\n     *\\n     * Requirements:\\n     *\\n     * - `sender` cannot be the zero address.\\n     * - `recipient` cannot be the zero address.\\n     * - `sender` must have a balance of at least `amount`.\\n     */\\n    function _transfer(address sender, address recipient, uint256 amount) internal virtual {\\n        require(sender != address(0), \\\"ERC20: transfer from the zero address\\\");\\n        require(recipient != address(0), \\\"ERC20: transfer to the zero address\\\");\\n\\n        _beforeTokenTransfer(sender, recipient, amount);\\n\\n        _balances[sender] = _balances[sender].sub(amount, \\\"ERC20: transfer amount exceeds balance\\\");\\n        _balances[recipient] = _balances[recipient].add(amount);\\n        emit Transfer(sender, recipient, amount);\\n    }\\n\\n    /** @dev Creates `amount` tokens and assigns them to `account`, increasing\\n     * the total supply.\\n     *\\n     * Emits a {Transfer} event with `from` set to the zero address.\\n     *\\n     * Requirements\\n     *\\n     * - `to` cannot be the zero address.\\n     */\\n    function _mint(address account, uint256 amount) internal virtual {\\n        require(account != address(0), \\\"ERC20: mint to the zero address\\\");\\n\\n        _beforeTokenTransfer(address(0), account, amount);\\n\\n        _totalSupply = _totalSupply.add(amount);\\n        _balances[account] = _balances[account].add(amount);\\n        emit Transfer(address(0), account, amount);\\n    }\\n\\n    /**\\n     * @dev Destroys `amount` tokens from `account`, reducing the\\n     * total supply.\\n     *\\n     * Emits a {Transfer} event with `to` set to the zero address.\\n     *\\n     * Requirements\\n     *\\n     * - `account` cannot be the zero address.\\n     * - `account` must have at least `amount` tokens.\\n     */\\n    function _burn(address account, uint256 amount) internal virtual {\\n        require(account != address(0), \\\"ERC20: burn from the zero address\\\");\\n\\n        _beforeTokenTransfer(account, address(0), amount);\\n\\n        _balances[account] = _balances[account].sub(amount, \\\"ERC20: burn amount exceeds balance\\\");\\n        _totalSupply = _totalSupply.sub(amount);\\n        emit Transfer(account, address(0), amount);\\n    }\\n\\n    /**\\n     * @dev Sets `amount` as the allowance of `spender` over the `owner`s tokens.\\n     *\\n     * This is internal function is equivalent to `approve`, and can be used to\\n     * e.g. set automatic allowances for certain subsystems, etc.\\n     *\\n     * Emits an {Approval} event.\\n     *\\n     * Requirements:\\n     *\\n     * - `owner` cannot be the zero address.\\n     * - `spender` cannot be the zero address.\\n     */\\n    function _approve(address owner, address spender, uint256 amount) internal virtual {\\n        require(owner != address(0), \\\"ERC20: approve from the zero address\\\");\\n        require(spender != address(0), \\\"ERC20: approve to the zero address\\\");\\n\\n        _allowances[owner][spender] = amount;\\n        emit Approval(owner, spender, amount);\\n    }\\n\\n    /**\\n     * @dev Sets {decimals} to a value other than the default one of 18.\\n     *\\n     * WARNING: This function should only be called from the constructor. Most\\n     * applications that interact with token contracts will not expect\\n     * {decimals} to ever change, and may work incorrectly if it does.\\n     */\\n    function _setupDecimals(uint8 decimals_) internal {\\n        _decimals = decimals_;\\n    }\\n\\n    /**\\n     * @dev Hook that is called before any transfer of tokens. This includes\\n     * minting and burning.\\n     *\\n     * Calling conditions:\\n     *\\n     * - when `from` and `to` are both non-zero, `amount` of ``from``'s tokens\\n     * will be to transferred to `to`.\\n     * - when `from` is zero, `amount` tokens will be minted for `to`.\\n     * - when `to` is zero, `amount` of ``from``'s tokens will be burned.\\n     * - `from` and `to` are never both zero.\\n     *\\n     * To learn more about hooks, head to xref:ROOT:extending-contracts.adoc#using-hooks[Using Hooks].\\n     */\\n    function _beforeTokenTransfer(address from, address to, uint256 amount) internal virtual { }\\n\\n    uint256[44] private __gap;\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts-ethereum-package/contracts/utils/ReentrancyGuard.sol\": {\r\n      \"content\": \"pragma solidity ^0.6.0;\\nimport \\\"../Initializable.sol\\\";\\n\\n/**\\n * @dev Contract module that helps prevent reentrant calls to a function.\\n *\\n * Inheriting from `ReentrancyGuard` will make the {nonReentrant} modifier\\n * available, which can be applied to functions to make sure there are no nested\\n * (reentrant) calls to them.\\n *\\n * Note that because there is a single `nonReentrant` guard, functions marked as\\n * `nonReentrant` may not call one another. This can be worked around by making\\n * those functions `private`, and then adding `external` `nonReentrant` entry\\n * points to them.\\n *\\n * TIP: If you would like to learn more about reentrancy and alternative ways\\n * to protect against it, check out our blog post\\n * https://blog.openzeppelin.com/reentrancy-after-istanbul/[Reentrancy After Istanbul].\\n */\\ncontract ReentrancyGuardUpgradeSafe is Initializable {\\n    bool private _notEntered;\\n\\n\\n    function __ReentrancyGuard_init() internal initializer {\\n        __ReentrancyGuard_init_unchained();\\n    }\\n\\n    function __ReentrancyGuard_init_unchained() internal initializer {\\n\\n\\n        // Storing an initial non-zero value makes deployment a bit more\\n        // expensive, but in exchange the refund on every call to nonReentrant\\n        // will be lower in amount. Since refunds are capped to a percetange of\\n        // the total transaction's gas, it is best to keep them low in cases\\n        // like this one, to increase the likelihood of the full refund coming\\n        // into effect.\\n        _notEntered = true;\\n\\n    }\\n\\n\\n    /**\\n     * @dev Prevents a contract from calling itself, directly or indirectly.\\n     * Calling a `nonReentrant` function from another `nonReentrant`\\n     * function is not supported. It is possible to prevent this from happening\\n     * by making the `nonReentrant` function external, and make it call a\\n     * `private` function that does the actual work.\\n     */\\n    modifier nonReentrant() {\\n        // On the first call to nonReentrant, _notEntered will be true\\n        require(_notEntered, \\\"ReentrancyGuard: reentrant call\\\");\\n\\n        // Any calls to nonReentrant after this point will fail\\n        _notEntered = false;\\n\\n        _;\\n\\n        // By storing the original value once again, a refund is triggered (see\\n        // https://eips.ethereum.org/EIPS/eip-2200)\\n        _notEntered = true;\\n    }\\n\\n    uint256[49] private __gap;\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts-ethereum-package/contracts/utils/Pausable.sol\": {\r\n      \"content\": \"pragma solidity ^0.6.0;\\n\\nimport \\\"../GSN/Context.sol\\\";\\nimport \\\"../Initializable.sol\\\";\\n\\n/**\\n * @dev Contract module which allows children to implement an emergency stop\\n * mechanism that can be triggered by an authorized account.\\n *\\n * This module is used through inheritance. It will make available the\\n * modifiers `whenNotPaused` and `whenPaused`, which can be applied to\\n * the functions of your contract. Note that they will not be pausable by\\n * simply including this module, only once the modifiers are put in place.\\n */\\ncontract PausableUpgradeSafe is Initializable, ContextUpgradeSafe {\\n    /**\\n     * @dev Emitted when the pause is triggered by `account`.\\n     */\\n    event Paused(address account);\\n\\n    /**\\n     * @dev Emitted when the pause is lifted by `account`.\\n     */\\n    event Unpaused(address account);\\n\\n    bool private _paused;\\n\\n    /**\\n     * @dev Initializes the contract in unpaused state.\\n     */\\n\\n    function __Pausable_init() internal initializer {\\n        __Context_init_unchained();\\n        __Pausable_init_unchained();\\n    }\\n\\n    function __Pausable_init_unchained() internal initializer {\\n\\n\\n        _paused = false;\\n\\n    }\\n\\n\\n    /**\\n     * @dev Returns true if the contract is paused, and false otherwise.\\n     */\\n    function paused() public view returns (bool) {\\n        return _paused;\\n    }\\n\\n    /**\\n     * @dev Modifier to make a function callable only when the contract is not paused.\\n     */\\n    modifier whenNotPaused() {\\n        require(!_paused, \\\"Pausable: paused\\\");\\n        _;\\n    }\\n\\n    /**\\n     * @dev Modifier to make a function callable only when the contract is paused.\\n     */\\n    modifier whenPaused() {\\n        require(_paused, \\\"Pausable: not paused\\\");\\n        _;\\n    }\\n\\n    /**\\n     * @dev Triggers stopped state.\\n     */\\n    function _pause() internal virtual whenNotPaused {\\n        _paused = true;\\n        emit Paused(_msgSender());\\n    }\\n\\n    /**\\n     * @dev Returns to normal state.\\n     */\\n    function _unpause() internal virtual whenPaused {\\n        _paused = false;\\n        emit Unpaused(_msgSender());\\n    }\\n\\n    uint256[49] private __gap;\\n}\\n\"\r\n    },\r\n    \"contracts/proxy/AccessControlUpgradeSafe.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: BUSL-1.1\\npragma solidity 0.6.11;\\n\\nimport {\\n    AccessControlUpgradeSafe as OZAccessControl\\n} from \\\"@openzeppelin/contracts-ethereum-package/contracts/access/AccessControl.sol\\\";\\n\\n/**\\n * @notice Extends OpenZeppelin upgradeable AccessControl contract with modifiers\\n * @dev This contract and AccessControl are essentially duplicates.\\n */\\ncontract AccessControlUpgradeSafe is OZAccessControl {\\n    /** @notice access control roles **/\\n    bytes32 public constant CONTRACT_ROLE = keccak256(\\\"CONTRACT_ROLE\\\");\\n    bytes32 public constant LP_ROLE = keccak256(\\\"LP_ROLE\\\");\\n    bytes32 public constant ADMIN_ROLE = keccak256(\\\"ADMIN_ROLE\\\");\\n    bytes32 public constant EMERGENCY_ROLE = keccak256(\\\"EMERGENCY_ROLE\\\");\\n\\n    modifier onlyLpRole() {\\n        require(hasRole(LP_ROLE, _msgSender()), \\\"NOT_LP_ROLE\\\");\\n        _;\\n    }\\n\\n    modifier onlyContractRole() {\\n        require(hasRole(CONTRACT_ROLE, _msgSender()), \\\"NOT_CONTRACT_ROLE\\\");\\n        _;\\n    }\\n\\n    modifier onlyAdminRole() {\\n        require(hasRole(ADMIN_ROLE, _msgSender()), \\\"NOT_ADMIN_ROLE\\\");\\n        _;\\n    }\\n\\n    modifier onlyEmergencyRole() {\\n        require(hasRole(EMERGENCY_ROLE, _msgSender()), \\\"NOT_EMERGENCY_ROLE\\\");\\n        _;\\n    }\\n\\n    modifier onlyLpOrContractRole() {\\n        require(\\n            hasRole(LP_ROLE, _msgSender()) ||\\n                hasRole(CONTRACT_ROLE, _msgSender()),\\n            \\\"NOT_LP_OR_CONTRACT_ROLE\\\"\\n        );\\n        _;\\n    }\\n\\n    modifier onlyAdminOrContractRole() {\\n        require(\\n            hasRole(ADMIN_ROLE, _msgSender()) ||\\n                hasRole(CONTRACT_ROLE, _msgSender()),\\n            \\\"NOT_ADMIN_OR_CONTRACT_ROLE\\\"\\n        );\\n        _;\\n    }\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/proxy/ProxyAdmin.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity >=0.6.0 <0.8.0;\\n\\nimport \\\"../access/Ownable.sol\\\";\\nimport \\\"./TransparentUpgradeableProxy.sol\\\";\\n\\n/**\\n * @dev This is an auxiliary contract meant to be assigned as the admin of a {TransparentUpgradeableProxy}. For an\\n * explanation of why you would want to use this see the documentation for {TransparentUpgradeableProxy}.\\n */\\ncontract ProxyAdmin is Ownable {\\n\\n    /**\\n     * @dev Returns the current implementation of `proxy`.\\n     *\\n     * Requirements:\\n     *\\n     * - This contract must be the admin of `proxy`.\\n     */\\n    function getProxyImplementation(TransparentUpgradeableProxy proxy) public view virtual returns (address) {\\n        // We need to manually run the static call since the getter cannot be flagged as view\\n        // bytes4(keccak256(\\\"implementation()\\\")) == 0x5c60da1b\\n        (bool success, bytes memory returndata) = address(proxy).staticcall(hex\\\"5c60da1b\\\");\\n        require(success);\\n        return abi.decode(returndata, (address));\\n    }\\n\\n    /**\\n     * @dev Returns the current admin of `proxy`.\\n     *\\n     * Requirements:\\n     *\\n     * - This contract must be the admin of `proxy`.\\n     */\\n    function getProxyAdmin(TransparentUpgradeableProxy proxy) public view virtual returns (address) {\\n        // We need to manually run the static call since the getter cannot be flagged as view\\n        // bytes4(keccak256(\\\"admin()\\\")) == 0xf851a440\\n        (bool success, bytes memory returndata) = address(proxy).staticcall(hex\\\"f851a440\\\");\\n        require(success);\\n        return abi.decode(returndata, (address));\\n    }\\n\\n    /**\\n     * @dev Changes the admin of `proxy` to `newAdmin`.\\n     *\\n     * Requirements:\\n     *\\n     * - This contract must be the current admin of `proxy`.\\n     */\\n    function changeProxyAdmin(TransparentUpgradeableProxy proxy, address newAdmin) public virtual onlyOwner {\\n        proxy.changeAdmin(newAdmin);\\n    }\\n\\n    /**\\n     * @dev Upgrades `proxy` to `implementation`. See {TransparentUpgradeableProxy-upgradeTo}.\\n     *\\n     * Requirements:\\n     *\\n     * - This contract must be the admin of `proxy`.\\n     */\\n    function upgrade(TransparentUpgradeableProxy proxy, address implementation) public virtual onlyOwner {\\n        proxy.upgradeTo(implementation);\\n    }\\n\\n    /**\\n     * @dev Upgrades `proxy` to `implementation` and calls a function on the new implementation. See\\n     * {TransparentUpgradeableProxy-upgradeToAndCall}.\\n     *\\n     * Requirements:\\n     *\\n     * - This contract must be the admin of `proxy`.\\n     */\\n    function upgradeAndCall(TransparentUpgradeableProxy proxy, address implementation, bytes memory data) public payable virtual onlyOwner {\\n        proxy.upgradeToAndCall{value: msg.value}(implementation, data);\\n    }\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/proxy/TransparentUpgradeableProxy.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity >=0.6.0 <0.8.0;\\n\\nimport \\\"./UpgradeableProxy.sol\\\";\\n\\n/**\\n * @dev This contract implements a proxy that is upgradeable by an admin.\\n *\\n * To avoid https://medium.com/nomic-labs-blog/malicious-backdoors-in-ethereum-proxies-62629adf3357[proxy selector\\n * clashing], which can potentially be used in an attack, this contract uses the\\n * https://blog.openzeppelin.com/the-transparent-proxy-pattern/[transparent proxy pattern]. This pattern implies two\\n * things that go hand in hand:\\n *\\n * 1. If any account other than the admin calls the proxy, the call will be forwarded to the implementation, even if\\n * that call matches one of the admin functions exposed by the proxy itself.\\n * 2. If the admin calls the proxy, it can access the admin functions, but its calls will never be forwarded to the\\n * implementation. If the admin tries to call a function on the implementation it will fail with an error that says\\n * \\\"admin cannot fallback to proxy target\\\".\\n *\\n * These properties mean that the admin account can only be used for admin actions like upgrading the proxy or changing\\n * the admin, so it's best if it's a dedicated account that is not used for anything else. This will avoid headaches due\\n * to sudden errors when trying to call a function from the proxy implementation.\\n *\\n * Our recommendation is for the dedicated account to be an instance of the {ProxyAdmin} contract. If set up this way,\\n * you should think of the `ProxyAdmin` instance as the real administrative interface of your proxy.\\n */\\ncontract TransparentUpgradeableProxy is UpgradeableProxy {\\n    /**\\n     * @dev Initializes an upgradeable proxy managed by `_admin`, backed by the implementation at `_logic`, and\\n     * optionally initialized with `_data` as explained in {UpgradeableProxy-constructor}.\\n     */\\n    constructor(address _logic, address admin_, bytes memory _data) public payable UpgradeableProxy(_logic, _data) {\\n        assert(_ADMIN_SLOT == bytes32(uint256(keccak256(\\\"eip1967.proxy.admin\\\")) - 1));\\n        _setAdmin(admin_);\\n    }\\n\\n    /**\\n     * @dev Emitted when the admin account has changed.\\n     */\\n    event AdminChanged(address previousAdmin, address newAdmin);\\n\\n    /**\\n     * @dev Storage slot with the admin of the contract.\\n     * This is the keccak-256 hash of \\\"eip1967.proxy.admin\\\" subtracted by 1, and is\\n     * validated in the constructor.\\n     */\\n    bytes32 private constant _ADMIN_SLOT = 0xb53127684a568b3173ae13b9f8a6016e243e63b6e8ee1178d6a717850b5d6103;\\n\\n    /**\\n     * @dev Modifier used internally that will delegate the call to the implementation unless the sender is the admin.\\n     */\\n    modifier ifAdmin() {\\n        if (msg.sender == _admin()) {\\n            _;\\n        } else {\\n            _fallback();\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the current admin.\\n     *\\n     * NOTE: Only the admin can call this function. See {ProxyAdmin-getProxyAdmin}.\\n     *\\n     * TIP: To get this value clients can read directly from the storage slot shown below (specified by EIP1967) using the\\n     * https://eth.wiki/json-rpc/API#eth_getstorageat[`eth_getStorageAt`] RPC call.\\n     * `0xb53127684a568b3173ae13b9f8a6016e243e63b6e8ee1178d6a717850b5d6103`\\n     */\\n    function admin() external ifAdmin returns (address admin_) {\\n        admin_ = _admin();\\n    }\\n\\n    /**\\n     * @dev Returns the current implementation.\\n     *\\n     * NOTE: Only the admin can call this function. See {ProxyAdmin-getProxyImplementation}.\\n     *\\n     * TIP: To get this value clients can read directly from the storage slot shown below (specified by EIP1967) using the\\n     * https://eth.wiki/json-rpc/API#eth_getstorageat[`eth_getStorageAt`] RPC call.\\n     * `0x360894a13ba1a3210667c828492db98dca3e2076cc3735a920a3ca505d382bbc`\\n     */\\n    function implementation() external ifAdmin returns (address implementation_) {\\n        implementation_ = _implementation();\\n    }\\n\\n    /**\\n     * @dev Changes the admin of the proxy.\\n     *\\n     * Emits an {AdminChanged} event.\\n     *\\n     * NOTE: Only the admin can call this function. See {ProxyAdmin-changeProxyAdmin}.\\n     */\\n    function changeAdmin(address newAdmin) external virtual ifAdmin {\\n        require(newAdmin != address(0), \\\"TransparentUpgradeableProxy: new admin is the zero address\\\");\\n        emit AdminChanged(_admin(), newAdmin);\\n        _setAdmin(newAdmin);\\n    }\\n\\n    /**\\n     * @dev Upgrade the implementation of the proxy.\\n     *\\n     * NOTE: Only the admin can call this function. See {ProxyAdmin-upgrade}.\\n     */\\n    function upgradeTo(address newImplementation) external virtual ifAdmin {\\n        _upgradeTo(newImplementation);\\n    }\\n\\n    /**\\n     * @dev Upgrade the implementation of the proxy, and then call a function from the new implementation as specified\\n     * by `data`, which should be an encoded function call. This is useful to initialize new storage variables in the\\n     * proxied contract.\\n     *\\n     * NOTE: Only the admin can call this function. See {ProxyAdmin-upgradeAndCall}.\\n     */\\n    function upgradeToAndCall(address newImplementation, bytes calldata data) external payable virtual ifAdmin {\\n        _upgradeTo(newImplementation);\\n        Address.functionDelegateCall(newImplementation, data);\\n    }\\n\\n    /**\\n     * @dev Returns the current admin.\\n     */\\n    function _admin() internal view virtual returns (address adm) {\\n        bytes32 slot = _ADMIN_SLOT;\\n        // solhint-disable-next-line no-inline-assembly\\n        assembly {\\n            adm := sload(slot)\\n        }\\n    }\\n\\n    /**\\n     * @dev Stores a new address in the EIP1967 admin slot.\\n     */\\n    function _setAdmin(address newAdmin) private {\\n        bytes32 slot = _ADMIN_SLOT;\\n\\n        // solhint-disable-next-line no-inline-assembly\\n        assembly {\\n            sstore(slot, newAdmin)\\n        }\\n    }\\n\\n    /**\\n     * @dev Makes sure the admin cannot access the fallback function. See {Proxy-_beforeFallback}.\\n     */\\n    function _beforeFallback() internal virtual override {\\n        require(msg.sender != _admin(), \\\"TransparentUpgradeableProxy: admin cannot fallback to proxy target\\\");\\n        super._beforeFallback();\\n    }\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts-ethereum-package/contracts/utils/Address.sol\": {\r\n      \"content\": \"pragma solidity ^0.6.2;\\n\\n/**\\n * @dev Collection of functions related to the address type\\n */\\nlibrary Address {\\n    /**\\n     * @dev Returns true if `account` is a contract.\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * It is unsafe to assume that an address for which this function returns\\n     * false is an externally-owned account (EOA) and not a contract.\\n     *\\n     * Among others, `isContract` will return false for the following\\n     * types of addresses:\\n     *\\n     *  - an externally-owned account\\n     *  - a contract in construction\\n     *  - an address where a contract will be created\\n     *  - an address where a contract lived, but was destroyed\\n     * ====\\n     */\\n    function isContract(address account) internal view returns (bool) {\\n        // According to EIP-1052, 0x0 is the value returned for not-yet created accounts\\n        // and 0xc5d2460186f7233c927e7db2dcc703c0e500b653ca82273b7bfad8045d85a470 is returned\\n        // for accounts without code, i.e. `keccak256('')`\\n        bytes32 codehash;\\n        bytes32 accountHash = 0xc5d2460186f7233c927e7db2dcc703c0e500b653ca82273b7bfad8045d85a470;\\n        // solhint-disable-next-line no-inline-assembly\\n        assembly { codehash := extcodehash(account) }\\n        return (codehash != accountHash && codehash != 0x0);\\n    }\\n\\n    /**\\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\\n     * `recipient`, forwarding all available gas and reverting on errors.\\n     *\\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\\n     * imposed by `transfer`, making them unable to receive funds via\\n     * `transfer`. {sendValue} removes this limitation.\\n     *\\n     * https://diligence.consensys.net/posts/2019/09/stop-using-soliditys-transfer-now/[Learn more].\\n     *\\n     * IMPORTANT: because control is transferred to `recipient`, care must be\\n     * taken to not create reentrancy vulnerabilities. Consider using\\n     * {ReentrancyGuard} or the\\n     * https://solidity.readthedocs.io/en/v0.5.11/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\\n     */\\n    function sendValue(address payable recipient, uint256 amount) internal {\\n        require(address(this).balance >= amount, \\\"Address: insufficient balance\\\");\\n\\n        // solhint-disable-next-line avoid-low-level-calls, avoid-call-value\\n        (bool success, ) = recipient.call{ value: amount }(\\\"\\\");\\n        require(success, \\\"Address: unable to send value, recipient may have reverted\\\");\\n    }\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts-ethereum-package/contracts/math/SafeMath.sol\": {\r\n      \"content\": \"pragma solidity ^0.6.0;\\n\\n/**\\n * @dev Wrappers over Solidity's arithmetic operations with added overflow\\n * checks.\\n *\\n * Arithmetic operations in Solidity wrap on overflow. This can easily result\\n * in bugs, because programmers usually assume that an overflow raises an\\n * error, which is the standard behavior in high level programming languages.\\n * `SafeMath` restores this intuition by reverting the transaction when an\\n * operation overflows.\\n *\\n * Using this library instead of the unchecked operations eliminates an entire\\n * class of bugs, so it's recommended to use it always.\\n */\\nlibrary SafeMath {\\n    /**\\n     * @dev Returns the addition of two unsigned integers, reverting on\\n     * overflow.\\n     *\\n     * Counterpart to Solidity's `+` operator.\\n     *\\n     * Requirements:\\n     * - Addition cannot overflow.\\n     */\\n    function add(uint256 a, uint256 b) internal pure returns (uint256) {\\n        uint256 c = a + b;\\n        require(c >= a, \\\"SafeMath: addition overflow\\\");\\n\\n        return c;\\n    }\\n\\n    /**\\n     * @dev Returns the subtraction of two unsigned integers, reverting on\\n     * overflow (when the result is negative).\\n     *\\n     * Counterpart to Solidity's `-` operator.\\n     *\\n     * Requirements:\\n     * - Subtraction cannot overflow.\\n     */\\n    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return sub(a, b, \\\"SafeMath: subtraction overflow\\\");\\n    }\\n\\n    /**\\n     * @dev Returns the subtraction of two unsigned integers, reverting with custom message on\\n     * overflow (when the result is negative).\\n     *\\n     * Counterpart to Solidity's `-` operator.\\n     *\\n     * Requirements:\\n     * - Subtraction cannot overflow.\\n     */\\n    function sub(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\\n        require(b <= a, errorMessage);\\n        uint256 c = a - b;\\n\\n        return c;\\n    }\\n\\n    /**\\n     * @dev Returns the multiplication of two unsigned integers, reverting on\\n     * overflow.\\n     *\\n     * Counterpart to Solidity's `*` operator.\\n     *\\n     * Requirements:\\n     * - Multiplication cannot overflow.\\n     */\\n    function mul(uint256 a, uint256 b) internal pure returns (uint256) {\\n        // Gas optimization: this is cheaper than requiring 'a' not being zero, but the\\n        // benefit is lost if 'b' is also tested.\\n        // See: https://github.com/OpenZeppelin/openzeppelin-contracts/pull/522\\n        if (a == 0) {\\n            return 0;\\n        }\\n\\n        uint256 c = a * b;\\n        require(c / a == b, \\\"SafeMath: multiplication overflow\\\");\\n\\n        return c;\\n    }\\n\\n    /**\\n     * @dev Returns the integer division of two unsigned integers. Reverts on\\n     * division by zero. The result is rounded towards zero.\\n     *\\n     * Counterpart to Solidity's `/` operator. Note: this function uses a\\n     * `revert` opcode (which leaves remaining gas untouched) while Solidity\\n     * uses an invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Requirements:\\n     * - The divisor cannot be zero.\\n     */\\n    function div(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return div(a, b, \\\"SafeMath: division by zero\\\");\\n    }\\n\\n    /**\\n     * @dev Returns the integer division of two unsigned integers. Reverts with custom message on\\n     * division by zero. The result is rounded towards zero.\\n     *\\n     * Counterpart to Solidity's `/` operator. Note: this function uses a\\n     * `revert` opcode (which leaves remaining gas untouched) while Solidity\\n     * uses an invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Requirements:\\n     * - The divisor cannot be zero.\\n     */\\n    function div(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\\n        // Solidity only automatically asserts when dividing by 0\\n        require(b > 0, errorMessage);\\n        uint256 c = a / b;\\n        // assert(a == b * c + a % b); // There is no case in which this doesn't hold\\n\\n        return c;\\n    }\\n\\n    /**\\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\\n     * Reverts when dividing by zero.\\n     *\\n     * Counterpart to Solidity's `%` operator. This function uses a `revert`\\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\\n     * invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Requirements:\\n     * - The divisor cannot be zero.\\n     */\\n    function mod(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return mod(a, b, \\\"SafeMath: modulo by zero\\\");\\n    }\\n\\n    /**\\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\\n     * Reverts with custom message when dividing by zero.\\n     *\\n     * Counterpart to Solidity's `%` operator. This function uses a `revert`\\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\\n     * invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Requirements:\\n     * - The divisor cannot be zero.\\n     */\\n    function mod(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\\n        require(b != 0, errorMessage);\\n        return a % b;\\n    }\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts-ethereum-package/contracts/math/SignedSafeMath.sol\": {\r\n      \"content\": \"pragma solidity ^0.6.0;\\n\\n/**\\n * @title SignedSafeMath\\n * @dev Signed math operations with safety checks that revert on error.\\n */\\nlibrary SignedSafeMath {\\n    int256 constant private _INT256_MIN = -2**255;\\n\\n    /**\\n     * @dev Multiplies two signed integers, reverts on overflow.\\n     */\\n    function mul(int256 a, int256 b) internal pure returns (int256) {\\n        // Gas optimization: this is cheaper than requiring 'a' not being zero, but the\\n        // benefit is lost if 'b' is also tested.\\n        // See: https://github.com/OpenZeppelin/openzeppelin-contracts/pull/522\\n        if (a == 0) {\\n            return 0;\\n        }\\n\\n        require(!(a == -1 && b == _INT256_MIN), \\\"SignedSafeMath: multiplication overflow\\\");\\n\\n        int256 c = a * b;\\n        require(c / a == b, \\\"SignedSafeMath: multiplication overflow\\\");\\n\\n        return c;\\n    }\\n\\n    /**\\n     * @dev Integer division of two signed integers truncating the quotient, reverts on division by zero.\\n     */\\n    function div(int256 a, int256 b) internal pure returns (int256) {\\n        require(b != 0, \\\"SignedSafeMath: division by zero\\\");\\n        require(!(b == -1 && a == _INT256_MIN), \\\"SignedSafeMath: division overflow\\\");\\n\\n        int256 c = a / b;\\n\\n        return c;\\n    }\\n\\n    /**\\n     * @dev Subtracts two signed integers, reverts on overflow.\\n     */\\n    function sub(int256 a, int256 b) internal pure returns (int256) {\\n        int256 c = a - b;\\n        require((b >= 0 && c <= a) || (b < 0 && c > a), \\\"SignedSafeMath: subtraction overflow\\\");\\n\\n        return c;\\n    }\\n\\n    /**\\n     * @dev Adds two signed integers, reverts on overflow.\\n     */\\n    function add(int256 a, int256 b) internal pure returns (int256) {\\n        int256 c = a + b;\\n        require((b >= 0 && c >= a) || (b < 0 && c < a), \\\"SignedSafeMath: addition overflow\\\");\\n\\n        return c;\\n    }\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts-ethereum-package/contracts/Initializable.sol\": {\r\n      \"content\": \"pragma solidity >=0.4.24 <0.7.0;\\n\\n\\n/**\\n * @title Initializable\\n *\\n * @dev Helper contract to support initializer functions. To use it, replace\\n * the constructor with a function that has the `initializer` modifier.\\n * WARNING: Unlike constructors, initializer functions must be manually\\n * invoked. This applies both to deploying an Initializable contract, as well\\n * as extending an Initializable contract via inheritance.\\n * WARNING: When used with inheritance, manual care must be taken to not invoke\\n * a parent initializer twice, or ensure that all initializers are idempotent,\\n * because this is not dealt with automatically as with constructors.\\n */\\ncontract Initializable {\\n\\n  /**\\n   * @dev Indicates that the contract has been initialized.\\n   */\\n  bool private initialized;\\n\\n  /**\\n   * @dev Indicates that the contract is in the process of being initialized.\\n   */\\n  bool private initializing;\\n\\n  /**\\n   * @dev Modifier to use in the initializer function of a contract.\\n   */\\n  modifier initializer() {\\n    require(initializing || isConstructor() || !initialized, \\\"Contract instance has already been initialized\\\");\\n\\n    bool isTopLevelCall = !initializing;\\n    if (isTopLevelCall) {\\n      initializing = true;\\n      initialized = true;\\n    }\\n\\n    _;\\n\\n    if (isTopLevelCall) {\\n      initializing = false;\\n    }\\n  }\\n\\n  /// @dev Returns true if and only if the function is running in the constructor\\n  function isConstructor() private view returns (bool) {\\n    // extcodesize checks the size of the code stored in an address, and\\n    // address returns the current address. Since the code is still not\\n    // deployed when running a constructor, any checks on its code size will\\n    // yield zero, making it an effective way to detect if a contract is\\n    // under construction or not.\\n    address self = address(this);\\n    uint256 cs;\\n    assembly { cs := extcodesize(self) }\\n    return cs == 0;\\n  }\\n\\n  // Reserved storage space to allow for layout changes in the future.\\n  uint256[50] private ______gap;\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts-ethereum-package/contracts/GSN/Context.sol\": {\r\n      \"content\": \"pragma solidity ^0.6.0;\\nimport \\\"../Initializable.sol\\\";\\n\\n/*\\n * @dev Provides information about the current execution context, including the\\n * sender of the transaction and its data. While these are generally available\\n * via msg.sender and msg.data, they should not be accessed in such a direct\\n * manner, since when dealing with GSN meta-transactions the account sending and\\n * paying for execution may not be the actual sender (as far as an application\\n * is concerned).\\n *\\n * This contract is only required for intermediate, library-like contracts.\\n */\\ncontract ContextUpgradeSafe is Initializable {\\n    // Empty internal constructor, to prevent people from mistakenly deploying\\n    // an instance of this contract, which should be used via inheritance.\\n\\n    function __Context_init() internal initializer {\\n        __Context_init_unchained();\\n    }\\n\\n    function __Context_init_unchained() internal initializer {\\n\\n\\n    }\\n\\n\\n    function _msgSender() internal view virtual returns (address payable) {\\n        return msg.sender;\\n    }\\n\\n    function _msgData() internal view virtual returns (bytes memory) {\\n        this; // silence state mutability warning without generating bytecode - see https://github.com/ethereum/solidity/issues/2691\\n        return msg.data;\\n    }\\n\\n    uint256[50] private __gap;\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts-ethereum-package/contracts/token/ERC20/IERC20.sol\": {\r\n      \"content\": \"pragma solidity ^0.6.0;\\n\\n/**\\n * @dev Interface of the ERC20 standard as defined in the EIP.\\n */\\ninterface IERC20 {\\n    /**\\n     * @dev Returns the amount of tokens in existence.\\n     */\\n    function totalSupply() external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the amount of tokens owned by `account`.\\n     */\\n    function balanceOf(address account) external view returns (uint256);\\n\\n    /**\\n     * @dev Moves `amount` tokens from the caller's account to `recipient`.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transfer(address recipient, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Returns the remaining number of tokens that `spender` will be\\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\\n     * zero by default.\\n     *\\n     * This value changes when {approve} or {transferFrom} are called.\\n     */\\n    function allowance(address owner, address spender) external view returns (uint256);\\n\\n    /**\\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\\n     * that someone may use both the old and the new allowance by unfortunate\\n     * transaction ordering. One possible solution to mitigate this race\\n     * condition is to first reduce the spender's allowance to 0 and set the\\n     * desired value afterwards:\\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address spender, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Moves `amount` tokens from `sender` to `recipient` using the\\n     * allowance mechanism. `amount` is then deducted from the caller's\\n     * allowance.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(address sender, address recipient, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\\n     * another (`to`).\\n     *\\n     * Note that `value` may be zero.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 value);\\n\\n    /**\\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\\n     * a call to {approve}. `value` is the new allowance.\\n     */\\n    event Approval(address indexed owner, address indexed spender, uint256 value);\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts-ethereum-package/contracts/access/AccessControl.sol\": {\r\n      \"content\": \"pragma solidity ^0.6.0;\\n\\nimport \\\"../utils/EnumerableSet.sol\\\";\\nimport \\\"../utils/Address.sol\\\";\\nimport \\\"../GSN/Context.sol\\\";\\nimport \\\"../Initializable.sol\\\";\\n\\n/**\\n * @dev Contract module that allows children to implement role-based access\\n * control mechanisms.\\n *\\n * Roles are referred to by their `bytes32` identifier. These should be exposed\\n * in the external API and be unique. The best way to achieve this is by\\n * using `public constant` hash digests:\\n *\\n * ```\\n * bytes32 public constant MY_ROLE = keccak256(\\\"MY_ROLE\\\");\\n * ```\\n *\\n * Roles can be used to represent a set of permissions. To restrict access to a\\n * function call, use {hasRole}:\\n *\\n * ```\\n * function foo() public {\\n *     require(hasRole(MY_ROLE, _msgSender()));\\n *     ...\\n * }\\n * ```\\n *\\n * Roles can be granted and revoked dynamically via the {grantRole} and\\n * {revokeRole} functions. Each role has an associated admin role, and only\\n * accounts that have a role's admin role can call {grantRole} and {revokeRole}.\\n *\\n * By default, the admin role for all roles is `DEFAULT_ADMIN_ROLE`, which means\\n * that only accounts with this role will be able to grant or revoke other\\n * roles. More complex role relationships can be created by using\\n * {_setRoleAdmin}.\\n */\\nabstract contract AccessControlUpgradeSafe is Initializable, ContextUpgradeSafe {\\n    function __AccessControl_init() internal initializer {\\n        __Context_init_unchained();\\n        __AccessControl_init_unchained();\\n    }\\n\\n    function __AccessControl_init_unchained() internal initializer {\\n\\n\\n    }\\n\\n    using EnumerableSet for EnumerableSet.AddressSet;\\n    using Address for address;\\n\\n    struct RoleData {\\n        EnumerableSet.AddressSet members;\\n        bytes32 adminRole;\\n    }\\n\\n    mapping (bytes32 => RoleData) private _roles;\\n\\n    bytes32 public constant DEFAULT_ADMIN_ROLE = 0x00;\\n\\n    /**\\n     * @dev Emitted when `account` is granted `role`.\\n     *\\n     * `sender` is the account that originated the contract call, an admin role\\n     * bearer except when using {_setupRole}.\\n     */\\n    event RoleGranted(bytes32 indexed role, address indexed account, address indexed sender);\\n\\n    /**\\n     * @dev Emitted when `account` is revoked `role`.\\n     *\\n     * `sender` is the account that originated the contract call:\\n     *   - if using `revokeRole`, it is the admin role bearer\\n     *   - if using `renounceRole`, it is the role bearer (i.e. `account`)\\n     */\\n    event RoleRevoked(bytes32 indexed role, address indexed account, address indexed sender);\\n\\n    /**\\n     * @dev Returns `true` if `account` has been granted `role`.\\n     */\\n    function hasRole(bytes32 role, address account) public view returns (bool) {\\n        return _roles[role].members.contains(account);\\n    }\\n\\n    /**\\n     * @dev Returns the number of accounts that have `role`. Can be used\\n     * together with {getRoleMember} to enumerate all bearers of a role.\\n     */\\n    function getRoleMemberCount(bytes32 role) public view returns (uint256) {\\n        return _roles[role].members.length();\\n    }\\n\\n    /**\\n     * @dev Returns one of the accounts that have `role`. `index` must be a\\n     * value between 0 and {getRoleMemberCount}, non-inclusive.\\n     *\\n     * Role bearers are not sorted in any particular way, and their ordering may\\n     * change at any point.\\n     *\\n     * WARNING: When using {getRoleMember} and {getRoleMemberCount}, make sure\\n     * you perform all queries on the same block. See the following\\n     * https://forum.openzeppelin.com/t/iterating-over-elements-on-enumerableset-in-openzeppelin-contracts/2296[forum post]\\n     * for more information.\\n     */\\n    function getRoleMember(bytes32 role, uint256 index) public view returns (address) {\\n        return _roles[role].members.at(index);\\n    }\\n\\n    /**\\n     * @dev Returns the admin role that controls `role`. See {grantRole} and\\n     * {revokeRole}.\\n     *\\n     * To change a role's admin, use {_setRoleAdmin}.\\n     */\\n    function getRoleAdmin(bytes32 role) public view returns (bytes32) {\\n        return _roles[role].adminRole;\\n    }\\n\\n    /**\\n     * @dev Grants `role` to `account`.\\n     *\\n     * If `account` had not been already granted `role`, emits a {RoleGranted}\\n     * event.\\n     *\\n     * Requirements:\\n     *\\n     * - the caller must have ``role``'s admin role.\\n     */\\n    function grantRole(bytes32 role, address account) public virtual {\\n        require(hasRole(_roles[role].adminRole, _msgSender()), \\\"AccessControl: sender must be an admin to grant\\\");\\n\\n        _grantRole(role, account);\\n    }\\n\\n    /**\\n     * @dev Revokes `role` from `account`.\\n     *\\n     * If `account` had been granted `role`, emits a {RoleRevoked} event.\\n     *\\n     * Requirements:\\n     *\\n     * - the caller must have ``role``'s admin role.\\n     */\\n    function revokeRole(bytes32 role, address account) public virtual {\\n        require(hasRole(_roles[role].adminRole, _msgSender()), \\\"AccessControl: sender must be an admin to revoke\\\");\\n\\n        _revokeRole(role, account);\\n    }\\n\\n    /**\\n     * @dev Revokes `role` from the calling account.\\n     *\\n     * Roles are often managed via {grantRole} and {revokeRole}: this function's\\n     * purpose is to provide a mechanism for accounts to lose their privileges\\n     * if they are compromised (such as when a trusted device is misplaced).\\n     *\\n     * If the calling account had been granted `role`, emits a {RoleRevoked}\\n     * event.\\n     *\\n     * Requirements:\\n     *\\n     * - the caller must be `account`.\\n     */\\n    function renounceRole(bytes32 role, address account) public virtual {\\n        require(account == _msgSender(), \\\"AccessControl: can only renounce roles for self\\\");\\n\\n        _revokeRole(role, account);\\n    }\\n\\n    /**\\n     * @dev Grants `role` to `account`.\\n     *\\n     * If `account` had not been already granted `role`, emits a {RoleGranted}\\n     * event. Note that unlike {grantRole}, this function doesn't perform any\\n     * checks on the calling account.\\n     *\\n     * [WARNING]\\n     * ====\\n     * This function should only be called from the constructor when setting\\n     * up the initial roles for the system.\\n     *\\n     * Using this function in any other way is effectively circumventing the admin\\n     * system imposed by {AccessControl}.\\n     * ====\\n     */\\n    function _setupRole(bytes32 role, address account) internal virtual {\\n        _grantRole(role, account);\\n    }\\n\\n    /**\\n     * @dev Sets `adminRole` as ``role``'s admin role.\\n     */\\n    function _setRoleAdmin(bytes32 role, bytes32 adminRole) internal virtual {\\n        _roles[role].adminRole = adminRole;\\n    }\\n\\n    function _grantRole(bytes32 role, address account) private {\\n        if (_roles[role].members.add(account)) {\\n            emit RoleGranted(role, account, _msgSender());\\n        }\\n    }\\n\\n    function _revokeRole(bytes32 role, address account) private {\\n        if (_roles[role].members.remove(account)) {\\n            emit RoleRevoked(role, account, _msgSender());\\n        }\\n    }\\n\\n    uint256[49] private __gap;\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts-ethereum-package/contracts/utils/EnumerableSet.sol\": {\r\n      \"content\": \"pragma solidity ^0.6.0;\\n\\n/**\\n * @dev Library for managing\\n * https://en.wikipedia.org/wiki/Set_(abstract_data_type)[sets] of primitive\\n * types.\\n *\\n * Sets have the following properties:\\n *\\n * - Elements are added, removed, and checked for existence in constant time\\n * (O(1)).\\n * - Elements are enumerated in O(n). No guarantees are made on the ordering.\\n *\\n * ```\\n * contract Example {\\n *     // Add the library methods\\n *     using EnumerableSet for EnumerableSet.AddressSet;\\n *\\n *     // Declare a set state variable\\n *     EnumerableSet.AddressSet private mySet;\\n * }\\n * ```\\n *\\n * As of v3.0.0, only sets of type `address` (`AddressSet`) and `uint256`\\n * (`UintSet`) are supported.\\n */\\nlibrary EnumerableSet {\\n    // To implement this library for multiple types with as little code\\n    // repetition as possible, we write it in terms of a generic Set type with\\n    // bytes32 values.\\n    // The Set implementation uses private functions, and user-facing\\n    // implementations (such as AddressSet) are just wrappers around the\\n    // underlying Set.\\n    // This means that we can only create new EnumerableSets for types that fit\\n    // in bytes32.\\n\\n    struct Set {\\n        // Storage of set values\\n        bytes32[] _values;\\n\\n        // Position of the value in the `values` array, plus 1 because index 0\\n        // means a value is not in the set.\\n        mapping (bytes32 => uint256) _indexes;\\n    }\\n\\n    /**\\n     * @dev Add a value to a set. O(1).\\n     *\\n     * Returns true if the value was added to the set, that is if it was not\\n     * already present.\\n     */\\n    function _add(Set storage set, bytes32 value) private returns (bool) {\\n        if (!_contains(set, value)) {\\n            set._values.push(value);\\n            // The value is stored at length-1, but we add 1 to all indexes\\n            // and use 0 as a sentinel value\\n            set._indexes[value] = set._values.length;\\n            return true;\\n        } else {\\n            return false;\\n        }\\n    }\\n\\n    /**\\n     * @dev Removes a value from a set. O(1).\\n     *\\n     * Returns true if the value was removed from the set, that is if it was\\n     * present.\\n     */\\n    function _remove(Set storage set, bytes32 value) private returns (bool) {\\n        // We read and store the value's index to prevent multiple reads from the same storage slot\\n        uint256 valueIndex = set._indexes[value];\\n\\n        if (valueIndex != 0) { // Equivalent to contains(set, value)\\n            // To delete an element from the _values array in O(1), we swap the element to delete with the last one in\\n            // the array, and then remove the last element (sometimes called as 'swap and pop').\\n            // This modifies the order of the array, as noted in {at}.\\n\\n            uint256 toDeleteIndex = valueIndex - 1;\\n            uint256 lastIndex = set._values.length - 1;\\n\\n            // When the value to delete is the last one, the swap operation is unnecessary. However, since this occurs\\n            // so rarely, we still do the swap anyway to avoid the gas cost of adding an 'if' statement.\\n\\n            bytes32 lastvalue = set._values[lastIndex];\\n\\n            // Move the last value to the index where the value to delete is\\n            set._values[toDeleteIndex] = lastvalue;\\n            // Update the index for the moved value\\n            set._indexes[lastvalue] = toDeleteIndex + 1; // All indexes are 1-based\\n\\n            // Delete the slot where the moved value was stored\\n            set._values.pop();\\n\\n            // Delete the index for the deleted slot\\n            delete set._indexes[value];\\n\\n            return true;\\n        } else {\\n            return false;\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns true if the value is in the set. O(1).\\n     */\\n    function _contains(Set storage set, bytes32 value) private view returns (bool) {\\n        return set._indexes[value] != 0;\\n    }\\n\\n    /**\\n     * @dev Returns the number of values on the set. O(1).\\n     */\\n    function _length(Set storage set) private view returns (uint256) {\\n        return set._values.length;\\n    }\\n\\n   /**\\n    * @dev Returns the value stored at position `index` in the set. O(1).\\n    *\\n    * Note that there are no guarantees on the ordering of values inside the\\n    * array, and it may change when more values are added or removed.\\n    *\\n    * Requirements:\\n    *\\n    * - `index` must be strictly less than {length}.\\n    */\\n    function _at(Set storage set, uint256 index) private view returns (bytes32) {\\n        require(set._values.length > index, \\\"EnumerableSet: index out of bounds\\\");\\n        return set._values[index];\\n    }\\n\\n    // AddressSet\\n\\n    struct AddressSet {\\n        Set _inner;\\n    }\\n\\n    /**\\n     * @dev Add a value to a set. O(1).\\n     *\\n     * Returns true if the value was added to the set, that is if it was not\\n     * already present.\\n     */\\n    function add(AddressSet storage set, address value) internal returns (bool) {\\n        return _add(set._inner, bytes32(uint256(value)));\\n    }\\n\\n    /**\\n     * @dev Removes a value from a set. O(1).\\n     *\\n     * Returns true if the value was removed from the set, that is if it was\\n     * present.\\n     */\\n    function remove(AddressSet storage set, address value) internal returns (bool) {\\n        return _remove(set._inner, bytes32(uint256(value)));\\n    }\\n\\n    /**\\n     * @dev Returns true if the value is in the set. O(1).\\n     */\\n    function contains(AddressSet storage set, address value) internal view returns (bool) {\\n        return _contains(set._inner, bytes32(uint256(value)));\\n    }\\n\\n    /**\\n     * @dev Returns the number of values in the set. O(1).\\n     */\\n    function length(AddressSet storage set) internal view returns (uint256) {\\n        return _length(set._inner);\\n    }\\n\\n   /**\\n    * @dev Returns the value stored at position `index` in the set. O(1).\\n    *\\n    * Note that there are no guarantees on the ordering of values inside the\\n    * array, and it may change when more values are added or removed.\\n    *\\n    * Requirements:\\n    *\\n    * - `index` must be strictly less than {length}.\\n    */\\n    function at(AddressSet storage set, uint256 index) internal view returns (address) {\\n        return address(uint256(_at(set._inner, index)));\\n    }\\n\\n\\n    // UintSet\\n\\n    struct UintSet {\\n        Set _inner;\\n    }\\n\\n    /**\\n     * @dev Add a value to a set. O(1).\\n     *\\n     * Returns true if the value was added to the set, that is if it was not\\n     * already present.\\n     */\\n    function add(UintSet storage set, uint256 value) internal returns (bool) {\\n        return _add(set._inner, bytes32(value));\\n    }\\n\\n    /**\\n     * @dev Removes a value from a set. O(1).\\n     *\\n     * Returns true if the value was removed from the set, that is if it was\\n     * present.\\n     */\\n    function remove(UintSet storage set, uint256 value) internal returns (bool) {\\n        return _remove(set._inner, bytes32(value));\\n    }\\n\\n    /**\\n     * @dev Returns true if the value is in the set. O(1).\\n     */\\n    function contains(UintSet storage set, uint256 value) internal view returns (bool) {\\n        return _contains(set._inner, bytes32(value));\\n    }\\n\\n    /**\\n     * @dev Returns the number of values on the set. O(1).\\n     */\\n    function length(UintSet storage set) internal view returns (uint256) {\\n        return _length(set._inner);\\n    }\\n\\n   /**\\n    * @dev Returns the value stored at position `index` in the set. O(1).\\n    *\\n    * Note that there are no guarantees on the ordering of values inside the\\n    * array, and it may change when more values are added or removed.\\n    *\\n    * Requirements:\\n    *\\n    * - `index` must be strictly less than {length}.\\n    */\\n    function at(UintSet storage set, uint256 index) internal view returns (uint256) {\\n        return uint256(_at(set._inner, index));\\n    }\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/proxy/UpgradeableProxy.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity >=0.6.0 <0.8.0;\\n\\nimport \\\"./Proxy.sol\\\";\\nimport \\\"../utils/Address.sol\\\";\\n\\n/**\\n * @dev This contract implements an upgradeable proxy. It is upgradeable because calls are delegated to an\\n * implementation address that can be changed. This address is stored in storage in the location specified by\\n * https://eips.ethereum.org/EIPS/eip-1967[EIP1967], so that it doesn't conflict with the storage layout of the\\n * implementation behind the proxy.\\n *\\n * Upgradeability is only provided internally through {_upgradeTo}. For an externally upgradeable proxy see\\n * {TransparentUpgradeableProxy}.\\n */\\ncontract UpgradeableProxy is Proxy {\\n    /**\\n     * @dev Initializes the upgradeable proxy with an initial implementation specified by `_logic`.\\n     *\\n     * If `_data` is nonempty, it's used as data in a delegate call to `_logic`. This will typically be an encoded\\n     * function call, and allows initializating the storage of the proxy like a Solidity constructor.\\n     */\\n    constructor(address _logic, bytes memory _data) public payable {\\n        assert(_IMPLEMENTATION_SLOT == bytes32(uint256(keccak256(\\\"eip1967.proxy.implementation\\\")) - 1));\\n        _setImplementation(_logic);\\n        if(_data.length > 0) {\\n            Address.functionDelegateCall(_logic, _data);\\n        }\\n    }\\n\\n    /**\\n     * @dev Emitted when the implementation is upgraded.\\n     */\\n    event Upgraded(address indexed implementation);\\n\\n    /**\\n     * @dev Storage slot with the address of the current implementation.\\n     * This is the keccak-256 hash of \\\"eip1967.proxy.implementation\\\" subtracted by 1, and is\\n     * validated in the constructor.\\n     */\\n    bytes32 private constant _IMPLEMENTATION_SLOT = 0x360894a13ba1a3210667c828492db98dca3e2076cc3735a920a3ca505d382bbc;\\n\\n    /**\\n     * @dev Returns the current implementation address.\\n     */\\n    function _implementation() internal view virtual override returns (address impl) {\\n        bytes32 slot = _IMPLEMENTATION_SLOT;\\n        // solhint-disable-next-line no-inline-assembly\\n        assembly {\\n            impl := sload(slot)\\n        }\\n    }\\n\\n    /**\\n     * @dev Upgrades the proxy to a new implementation.\\n     *\\n     * Emits an {Upgraded} event.\\n     */\\n    function _upgradeTo(address newImplementation) internal virtual {\\n        _setImplementation(newImplementation);\\n        emit Upgraded(newImplementation);\\n    }\\n\\n    /**\\n     * @dev Stores a new address in the EIP1967 implementation slot.\\n     */\\n    function _setImplementation(address newImplementation) private {\\n        require(Address.isContract(newImplementation), \\\"UpgradeableProxy: new implementation is not a contract\\\");\\n\\n        bytes32 slot = _IMPLEMENTATION_SLOT;\\n\\n        // solhint-disable-next-line no-inline-assembly\\n        assembly {\\n            sstore(slot, newImplementation)\\n        }\\n    }\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/proxy/Proxy.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity >=0.6.0 <0.8.0;\\n\\n/**\\n * @dev This abstract contract provides a fallback function that delegates all calls to another contract using the EVM\\n * instruction `delegatecall`. We refer to the second contract as the _implementation_ behind the proxy, and it has to\\n * be specified by overriding the virtual {_implementation} function.\\n *\\n * Additionally, delegation to the implementation can be triggered manually through the {_fallback} function, or to a\\n * different contract through the {_delegate} function.\\n *\\n * The success and return data of the delegated call will be returned back to the caller of the proxy.\\n */\\nabstract contract Proxy {\\n    /**\\n     * @dev Delegates the current call to `implementation`.\\n     *\\n     * This function does not return to its internall call site, it will return directly to the external caller.\\n     */\\n    function _delegate(address implementation) internal virtual {\\n        // solhint-disable-next-line no-inline-assembly\\n        assembly {\\n            // Copy msg.data. We take full control of memory in this inline assembly\\n            // block because it will not return to Solidity code. We overwrite the\\n            // Solidity scratch pad at memory position 0.\\n            calldatacopy(0, 0, calldatasize())\\n\\n            // Call the implementation.\\n            // out and outsize are 0 because we don't know the size yet.\\n            let result := delegatecall(gas(), implementation, 0, calldatasize(), 0, 0)\\n\\n            // Copy the returned data.\\n            returndatacopy(0, 0, returndatasize())\\n\\n            switch result\\n            // delegatecall returns 0 on error.\\n            case 0 { revert(0, returndatasize()) }\\n            default { return(0, returndatasize()) }\\n        }\\n    }\\n\\n    /**\\n     * @dev This is a virtual function that should be overriden so it returns the address to which the fallback function\\n     * and {_fallback} should delegate.\\n     */\\n    function _implementation() internal view virtual returns (address);\\n\\n    /**\\n     * @dev Delegates the current call to the address returned by `_implementation()`.\\n     *\\n     * This function does not return to its internall call site, it will return directly to the external caller.\\n     */\\n    function _fallback() internal virtual {\\n        _beforeFallback();\\n        _delegate(_implementation());\\n    }\\n\\n    /**\\n     * @dev Fallback function that delegates calls to the address returned by `_implementation()`. Will run if no other\\n     * function in the contract matches the call data.\\n     */\\n    fallback () external payable virtual {\\n        _fallback();\\n    }\\n\\n    /**\\n     * @dev Fallback function that delegates calls to the address returned by `_implementation()`. Will run if call data\\n     * is empty.\\n     */\\n    receive () external payable virtual {\\n        _fallback();\\n    }\\n\\n    /**\\n     * @dev Hook that is called before falling back to the implementation. Can happen as part of a manual `_fallback`\\n     * call, or as part of the Solidity `fallback` or `receive` functions.\\n     *\\n     * If overriden should call `super._beforeFallback()`.\\n     */\\n    function _beforeFallback() internal virtual {\\n    }\\n}\\n\"\r\n    },\r\n    \"contracts/pool/IReservePool.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: BUSDL-1.1\\npragma solidity 0.6.11;\\n\\nimport {ILiquidityPoolV2} from \\\"./ILiquidityPoolV2.sol\\\";\\n\\n/**\\n * @notice For pools that keep a separate reserve of tokens\\n */\\ninterface IReservePool is ILiquidityPoolV2 {\\n    /**\\n     * @notice Log when the percent held in reserve is changed\\n     * @param reservePercentage The new percent held in reserve\\n     */\\n    event ReservePercentageChanged(uint256 reservePercentage);\\n\\n    /**\\n     * @notice Set a new percent of tokens to hold in reserve\\n     * @param reservePercentage_ The new percent\\n     */\\n    function setReservePercentage(uint256 reservePercentage_) external;\\n\\n    /**\\n     * @notice Transfer an amount of tokens to the LP Account\\n     * @dev This should only be callable by the `MetaPoolToken`\\n     * @param amount The amount of tokens\\n     */\\n    function transferToLpAccount(uint256 amount) external;\\n\\n    /**\\n     * @notice Get the amount of tokens missing from the reserve\\n     * @dev A negative amount indicates extra tokens not needed for the reserve\\n     * @return The amount of missing tokens\\n     */\\n    function getReserveTopUpValue() external view returns (int256);\\n\\n    /**\\n     * @notice Get the current percentage of tokens held in reserve\\n     * @return The percent\\n     */\\n    function reservePercentage() external view returns (uint256);\\n}\\n\"\r\n    },\r\n    \"contracts/pool/IWithdrawFeePool.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: BUSDL-1.1\\npragma solidity 0.6.11;\\n\\n/**\\n * @notice For pools that can charge an early withdrawal fee\\n */\\ninterface IWithdrawFeePool {\\n    /**\\n     * @notice Log when the fee period changes\\n     * @param feePeriod The new fee period\\n     */\\n    event FeePeriodChanged(uint256 feePeriod);\\n\\n    /**\\n     * @notice Log when the fee percentage changes\\n     * @param feePercentage The new percentage\\n     */\\n    event FeePercentageChanged(uint256 feePercentage);\\n\\n    /**\\n     * @notice Set the new fee period\\n     * @param feePeriod_ The new fee period\\n     */\\n    function setFeePeriod(uint256 feePeriod_) external;\\n\\n    /**\\n     * @notice Set the new fee percentage\\n     * @param feePercentage_ The new percentage\\n     */\\n    function setFeePercentage(uint256 feePercentage_) external;\\n\\n    /**\\n     * @notice Get the period of time that a withdrawal will be considered early\\n     * @notice An early withdrawal gets charged a fee\\n     * @notice The period starts from the time of the last deposit for an account\\n     * @return The time in seconds\\n     */\\n    function feePeriod() external view returns (uint256);\\n\\n    /**\\n     * @notice Get the percentage of a withdrawal that is charged as a fee\\n     * @return The percentage\\n     */\\n    function feePercentage() external view returns (uint256);\\n\\n    /**\\n     * @notice Check if caller will be charged early withdrawal fee\\n     * @return `true` when fee will apply, `false` when it won't\\n     */\\n    function isEarlyRedeem() external view returns (bool);\\n}\\n\"\r\n    },\r\n    \"contracts/pool/ILockingPool.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: BUSDL-1.1\\npragma solidity 0.6.11;\\n\\n/**\\n * @notice For pools that can be locked and unlocked in emergencies\\n */\\ninterface ILockingPool {\\n    /** @notice Log when deposits are locked */\\n    event AddLiquidityLocked();\\n\\n    /** @notice Log when deposits are unlocked */\\n    event AddLiquidityUnlocked();\\n\\n    /** @notice Log when withdrawals are locked */\\n    event RedeemLocked();\\n\\n    /** @notice Log when withdrawals are unlocked */\\n    event RedeemUnlocked();\\n\\n    /** @notice Lock deposits and withdrawals */\\n    function emergencyLock() external;\\n\\n    /** @notice Unlock deposits and withdrawals */\\n    function emergencyUnlock() external;\\n\\n    /** @notice Lock deposits */\\n    function emergencyLockAddLiquidity() external;\\n\\n    /** @notice Unlock deposits */\\n    function emergencyUnlockAddLiquidity() external;\\n\\n    /** @notice Lock withdrawals */\\n    function emergencyLockRedeem() external;\\n\\n    /** @notice Unlock withdrawals */\\n    function emergencyUnlockRedeem() external;\\n}\\n\"\r\n    },\r\n    \"contracts/pool/IPoolToken.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: BUSDL-1.1\\npragma solidity 0.6.11;\\n\\nimport {IDetailedERC20} from \\\"contracts/common/Imports.sol\\\";\\n\\n/**\\n * @notice For pools that locked value between accounts\\n * @dev Shares are accounted for using the `APT` token\\n */\\ninterface IPoolToken {\\n    /**\\n     * @notice Log a token deposit\\n     * @param sender Address of the depositor account\\n     * @param token Token deposited\\n     * @param tokenAmount The amount of tokens deposited\\n     * @param aptMintAmount Number of shares received\\n     * @param tokenEthValue Total value of the deposit\\n     * @param totalEthValueLocked Total value of the pool\\n     */\\n    event DepositedAPT(\\n        address indexed sender,\\n        IDetailedERC20 token,\\n        uint256 tokenAmount,\\n        uint256 aptMintAmount,\\n        uint256 tokenEthValue,\\n        uint256 totalEthValueLocked\\n    );\\n\\n    /**\\n     * @notice Log a token withdrawal\\n     * @param sender Address of the withdrawal account\\n     * @param token Token withdrawn\\n     * @param redeemedTokenAmount The amount of tokens withdrawn\\n     * @param aptRedeemAmount Number of shares redeemed\\n     * @param tokenEthValue Total value of the withdrawal\\n     * @param totalEthValueLocked Total value of the pool\\n     */\\n    event RedeemedAPT(\\n        address indexed sender,\\n        IDetailedERC20 token,\\n        uint256 redeemedTokenAmount,\\n        uint256 aptRedeemAmount,\\n        uint256 tokenEthValue,\\n        uint256 totalEthValueLocked\\n    );\\n\\n    /**\\n     * @notice Add liquidity for a share of the pool\\n     * @param amount Amount to deposit of the underlying stablecoin\\n     */\\n    function addLiquidity(uint256 amount) external;\\n\\n    /**\\n     * @notice Redeem shares of the pool to withdraw liquidity\\n     * @param tokenAmount The amount of shares to redeem\\n     */\\n    function redeem(uint256 tokenAmount) external;\\n\\n    /**\\n     * @notice Determine the share received for a deposit\\n     * @param depositAmount The size of the deposit\\n     * @return The number of shares\\n     */\\n    function calculateMintAmount(uint256 depositAmount)\\n        external\\n        view\\n        returns (uint256);\\n\\n    /**\\n     * @notice How many tokens can be withdrawn with an amount of shares\\n     * @notice Accounts for early withdrawal fee\\n     * @param aptAmount The amount of shares\\n     * @return The amount of tokens\\n     */\\n    function getUnderlyerAmountWithFee(uint256 aptAmount)\\n        external\\n        view\\n        returns (uint256);\\n\\n    /**\\n     * @notice How many tokens can be withdrawn with an amount of shares\\n     * @param aptAmount The amount of shares\\n     * @return The amount of tokens\\n     */\\n    function getUnderlyerAmount(uint256 aptAmount)\\n        external\\n        view\\n        returns (uint256);\\n\\n    /**\\n     * @notice Get the total USD value of an amount of shares\\n     * @param aptAmount The amount of shares\\n     * @return The total USD value of the shares\\n     */\\n    function getAPTValue(uint256 aptAmount) external view returns (uint256);\\n}\\n\"\r\n    },\r\n    \"contracts/pool/ILiquidityPoolV2.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: BUSDL-1.1\\npragma solidity 0.6.11;\\n\\nimport {IDetailedERC20} from \\\"contracts/common/Imports.sol\\\";\\n\\n/**\\n * @notice For contracts that hold tokens and track the value locked\\n */\\ninterface ILiquidityPoolV2 {\\n    /**\\n     * @notice The token held by the pool\\n     * @return The token address\\n     */\\n    function underlyer() external view returns (IDetailedERC20);\\n\\n    /**\\n     * @notice Get the total USD value locked in the pool\\n     * @return The total USD value\\n     */\\n    function getPoolTotalValue() external view returns (uint256);\\n\\n    /**\\n     * @notice Get the total USD value of an amount of tokens\\n     * @param underlyerAmount The amount of tokens\\n     * @return The total USD value\\n     */\\n    function getValueFromUnderlyerAmount(uint256 underlyerAmount)\\n        external\\n        view\\n        returns (uint256);\\n\\n    /**\\n     * @notice Get the USD price of the token held by the pool\\n     * @return The price\\n     */\\n    function getUnderlyerPrice() external view returns (uint256);\\n}\\n\"\r\n    },\r\n    \"contracts/tvl/ImmutableAssetAllocation.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: BUSDL-1.1\\npragma solidity 0.6.11;\\npragma experimental ABIEncoderV2;\\n\\nimport {Address} from \\\"contracts/libraries/Imports.sol\\\";\\nimport {AssetAllocationBase} from \\\"./AssetAllocationBase.sol\\\";\\n\\n/**\\n * @notice Asset allocation with underlying tokens that cannot be added/removed\\n */\\nabstract contract ImmutableAssetAllocation is AssetAllocationBase {\\n    using Address for address;\\n\\n    constructor() public {\\n        _validateTokens(_getTokenData());\\n    }\\n\\n    function tokens() public view override returns (TokenData[] memory) {\\n        TokenData[] memory tokens_ = _getTokenData();\\n        return tokens_;\\n    }\\n\\n    /**\\n     * @notice Get the immutable array of underlying `TokenData`\\n     * @dev Should be implemented in child contracts with a hardcoded array\\n     * @return The array of `TokenData`\\n     */\\n    function _getTokenData() internal pure virtual returns (TokenData[] memory);\\n\\n    /**\\n     * @notice Verifies that a `TokenData` array works with the `TvlManager`\\n     * @dev Reverts when there is invalid `TokenData`\\n     * @param tokens_ The array of `TokenData`\\n     */\\n    function _validateTokens(TokenData[] memory tokens_) internal view virtual {\\n        // length restriction due to encoding logic for allocation IDs\\n        require(tokens_.length < type(uint8).max, \\\"TOO_MANY_TOKENS\\\");\\n        for (uint256 i = 0; i < tokens_.length; i++) {\\n            address token = tokens_[i].token;\\n            _validateTokenAddress(token);\\n            string memory symbol = tokens_[i].symbol;\\n            require(bytes(symbol).length != 0, \\\"INVALID_SYMBOL\\\");\\n        }\\n        // TODO: check for duplicate tokens\\n    }\\n\\n    /**\\n     * @notice Verify that a token is a contract\\n     * @param token The token to verify\\n     */\\n    function _validateTokenAddress(address token) internal view virtual {\\n        require(token.isContract(), \\\"INVALID_ADDRESS\\\");\\n    }\\n}\\n\"\r\n    },\r\n    \"contracts/pool/ILiquidityPool.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: BUSDL-1.1\\npragma solidity 0.6.11;\\n\\nimport {IERC20} from \\\"contracts/common/Imports.sol\\\";\\n\\ninterface ILiquidityPool {\\n    event DepositedAPT(\\n        address indexed sender,\\n        IERC20 token,\\n        uint256 tokenAmount,\\n        uint256 aptMintAmount,\\n        uint256 tokenEthValue,\\n        uint256 totalEthValueLocked\\n    );\\n    event RedeemedAPT(\\n        address indexed sender,\\n        IERC20 token,\\n        uint256 redeemedTokenAmount,\\n        uint256 aptRedeemAmount,\\n        uint256 tokenEthValue,\\n        uint256 totalEthValueLocked\\n    );\\n    event AddLiquidityLocked();\\n    event AddLiquidityUnlocked();\\n    event RedeemLocked();\\n    event RedeemUnlocked();\\n    event AdminChanged(address);\\n    event PriceAggregatorChanged(address agg);\\n\\n    function addLiquidity(uint256 amount) external;\\n\\n    function redeem(uint256 tokenAmount) external;\\n}\\n\"\r\n    },\r\n    \"contracts/deploy/testFactories.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: BUSDL-1.1\\npragma solidity 0.6.11;\\npragma experimental ABIEncoderV2;\\n\\nimport {Address} from \\\"contracts/libraries/Imports.sol\\\";\\nimport {TestMetaPoolToken} from \\\"contracts/mapt/TestMetaPoolToken.sol\\\";\\nimport {MetaPoolToken} from \\\"contracts/mapt/MetaPoolToken.sol\\\";\\n\\nimport {MetaPoolTokenFactory, OracleAdapterFactory} from \\\"./factories.sol\\\";\\n\\ncontract TestMetaPoolTokenFactory is MetaPoolTokenFactory {\\n    using Address for address;\\n\\n    function _deployLogic(bytes memory initData)\\n        internal\\n        override\\n        returns (address)\\n    {\\n        TestMetaPoolToken logic = new TestMetaPoolToken();\\n        address _logic = address(logic);\\n        _logic.functionCall(initData);\\n        return _logic;\\n    }\\n}\\n\\ncontract TestOracleAdapterFactory is OracleAdapterFactory {\\n    address public oracleAdapter;\\n\\n    function preCreate(\\n        address addressRegistry,\\n        address tvlSource,\\n        address[] memory assets,\\n        address[] memory sources,\\n        uint256 aggStalePeriod,\\n        uint256 defaultLockPeriod\\n    ) external returns (address) {\\n        oracleAdapter = super.create(\\n            addressRegistry,\\n            tvlSource,\\n            assets,\\n            sources,\\n            aggStalePeriod,\\n            defaultLockPeriod\\n        );\\n    }\\n\\n    function create(\\n        address,\\n        address,\\n        address[] memory,\\n        address[] memory,\\n        uint256,\\n        uint256\\n    ) public override returns (address) {\\n        require(oracleAdapter != address(0), \\\"USE_PRECREATE_FIRST\\\");\\n        return oracleAdapter;\\n    }\\n}\\n\"\r\n    },\r\n    \"contracts/mapt/TestMetaPoolToken.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: BUSDL-1.1\\npragma solidity 0.6.11;\\n\\nimport {IReservePool} from \\\"contracts/pool/Imports.sol\\\";\\n\\nimport {MetaPoolToken} from \\\"./MetaPoolToken.sol\\\";\\n\\n/**\\n * @dev Proxy contract to test internal variables and functions\\n * Should not be used other than in test files!\\n */\\ncontract TestMetaPoolToken is MetaPoolToken {\\n    /// @dev useful for changing supply during calc tests\\n    function testMint(address account, uint256 amount) public {\\n        _mint(account, amount);\\n    }\\n\\n    /// @dev useful for changing supply during calc tests\\n    function testBurn(address account, uint256 amount) public {\\n        _burn(account, amount);\\n    }\\n\\n    function testFundLpAccount(\\n        IReservePool[] memory pools,\\n        uint256[] memory amounts\\n    ) public {\\n        _fundLpAccount(pools, amounts);\\n    }\\n\\n    function testWithdrawFromLpAccount(\\n        IReservePool[] memory pools,\\n        uint256[] memory amounts\\n    ) public {\\n        _withdrawFromLpAccount(pools, amounts);\\n    }\\n\\n    function testMultipleMintAndTransfer(\\n        IReservePool[] memory pools,\\n        uint256[] memory amounts\\n    ) public {\\n        _multipleMintAndTransfer(pools, amounts);\\n    }\\n\\n    function testMintAndTransfer(\\n        IReservePool pool,\\n        uint256 mintAmount,\\n        uint256 transferAmount\\n    ) public {\\n        _mintAndTransfer(pool, mintAmount, transferAmount);\\n    }\\n\\n    function testMultipleBurnAndTransfer(\\n        IReservePool[] memory pools,\\n        uint256[] memory amounts\\n    ) public {\\n        _multipleBurnAndTransfer(pools, amounts);\\n    }\\n\\n    function testBurnAndTransfer(\\n        IReservePool pool,\\n        address lpSafe,\\n        uint256 burnAmount,\\n        uint256 transferAmount\\n    ) public {\\n        _burnAndTransfer(pool, lpSafe, burnAmount, transferAmount);\\n    }\\n\\n    function testRegisterPoolUnderlyers(IReservePool[] memory pools) public {\\n        _registerPoolUnderlyers(pools);\\n    }\\n\\n    function testGetTvl() public view returns (uint256) {\\n        return _getTvl();\\n    }\\n\\n    function testCalculateDeltas(\\n        IReservePool[] memory pools,\\n        uint256[] memory amounts\\n    ) public view returns (uint256[] memory) {\\n        return _calculateDeltas(pools, amounts);\\n    }\\n\\n    function testCalculateDelta(\\n        uint256 amount,\\n        uint256 tokenPrice,\\n        uint8 decimals\\n    ) public view returns (uint256) {\\n        return _calculateDelta(amount, tokenPrice, decimals);\\n    }\\n\\n    function testGetFundAmounts(int256[] memory amounts)\\n        public\\n        pure\\n        returns (uint256[] memory)\\n    {\\n        return _getFundAmounts(amounts);\\n    }\\n\\n    function testGetWithdrawAmounts(int256[] memory amounts)\\n        public\\n        pure\\n        returns (uint256[] memory)\\n    {\\n        return _getWithdrawAmounts(amounts);\\n    }\\n}\\n\"\r\n    },\r\n    \"contracts/lpaccount/TestLpAccount.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: BUSDL-1.1\\npragma solidity 0.6.11;\\npragma experimental ABIEncoderV2;\\n\\nimport {LpAccount} from \\\"./LpAccount.sol\\\";\\nimport {TestLpAccountStorage} from \\\"./TestLpAccountStorage.sol\\\";\\n\\ncontract TestLpAccount is TestLpAccountStorage, LpAccount {\\n    function _deployCalls() external view returns (uint256[][] memory) {\\n        return _deploysArray;\\n    }\\n\\n    function _unwindCalls() external view returns (uint256[] memory) {\\n        return _unwindsArray;\\n    }\\n\\n    function _swapCalls() external view returns (uint256[] memory) {\\n        return _swapsArray;\\n    }\\n}\\n\"\r\n    },\r\n    \"contracts/lpaccount/TestLpAccountStorage.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: BUSDL-1.1\\npragma solidity 0.6.11;\\n\\nimport {IAssetAllocation, IERC20} from \\\"contracts/common/Imports.sol\\\";\\n\\nabstract contract TestLpAccountStorage {\\n    string internal _name;\\n\\n    uint256[][] internal _deploysArray;\\n    uint256[] internal _unwindsArray;\\n    uint256[] internal _swapsArray;\\n\\n    uint256 public _claimsCounter;\\n\\n    string[] internal _assetAllocations;\\n    IERC20[] internal _tokens;\\n}\\n\"\r\n    },\r\n    \"contracts/lpaccount/TestZap.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: BUSDL-1.1\\npragma solidity 0.6.11;\\npragma experimental ABIEncoderV2;\\n\\nimport {\\n    IAssetAllocation,\\n    IERC20,\\n    INameIdentifier\\n} from \\\"contracts/common/Imports.sol\\\";\\nimport {IZap} from \\\"./IZap.sol\\\";\\nimport {TestLpAccountStorage} from \\\"./TestLpAccountStorage.sol\\\";\\n\\ncontract TestZap is IZap, TestLpAccountStorage {\\n    string[] internal _sortedSymbols;\\n\\n    constructor(string memory name) public {\\n        _name = name;\\n    }\\n\\n    function deployLiquidity(uint256[] calldata amounts) external override {\\n        _deploysArray.push(amounts);\\n    }\\n\\n    // TODO: push index in addition to amount\\n    function unwindLiquidity(uint256 amount, uint8) external override {\\n        _unwindsArray.push(amount);\\n    }\\n\\n    function claim() external override {\\n        _claimsCounter += 1;\\n    }\\n\\n    // solhint-disable-next-line func-name-mixedcase\\n    function NAME() external view override returns (string memory) {\\n        return _name;\\n    }\\n\\n    // Order of token amounts\\n    function sortedSymbols() external view override returns (string[] memory) {\\n        return _sortedSymbols;\\n    }\\n\\n    function assetAllocations()\\n        external\\n        view\\n        override\\n        returns (string[] memory)\\n    {\\n        return _assetAllocations;\\n    }\\n\\n    function erc20Allocations()\\n        external\\n        view\\n        override\\n        returns (IERC20[] memory)\\n    {\\n        return _tokens;\\n    }\\n\\n    function _setAssetAllocations(string[] memory allocationNames) public {\\n        _assetAllocations = allocationNames;\\n    }\\n\\n    function _setErc20Allocations(IERC20[] memory tokens) public {\\n        _tokens = tokens;\\n    }\\n}\\n\"\r\n    },\r\n    \"contracts/protocols/uniswap/swaps/SwapBase.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: BUSDL-1.1\\npragma solidity 0.6.11;\\npragma experimental ABIEncoderV2;\\n\\nimport {SafeERC20} from \\\"contracts/libraries/Imports.sol\\\";\\nimport {IERC20, IAssetAllocation} from \\\"contracts/common/Imports.sol\\\";\\nimport {ISwapRouter} from \\\"./ISwapRouter.sol\\\";\\nimport {ISwap} from \\\"contracts/lpaccount/Imports.sol\\\";\\n\\nabstract contract SwapBase is ISwap {\\n    using SafeERC20 for IERC20;\\n\\n    ISwapRouter private constant _ROUTER =\\n        ISwapRouter(0xE592427A0AEce92De3Edee1F18E0157C05861564);\\n\\n    IERC20 internal immutable _IN_TOKEN;\\n    IERC20 internal immutable _OUT_TOKEN;\\n\\n    event Swap(ISwapRouter.ExactInputParams params, uint256 amountOut);\\n\\n    constructor(IERC20 inToken, IERC20 outToken) public {\\n        _IN_TOKEN = inToken;\\n        _OUT_TOKEN = outToken;\\n    }\\n\\n    // TODO: create function for calculating min amount\\n    function swap(uint256 amount, uint256 minAmount) external override {\\n        _IN_TOKEN.safeApprove(address(_ROUTER), 0);\\n        _IN_TOKEN.safeApprove(address(_ROUTER), amount);\\n\\n        bytes memory path = _getPath();\\n\\n        // solhint-disable not-rely-on-time\\n        ISwapRouter.ExactInputParams memory params =\\n            ISwapRouter.ExactInputParams({\\n                path: path,\\n                recipient: address(this),\\n                deadline: block.timestamp,\\n                amountIn: amount,\\n                amountOutMinimum: minAmount\\n            });\\n        // solhint-enable not-rely-on-time\\n        uint256 amountOut = _ROUTER.exactInput(params);\\n\\n        emit Swap(params, amountOut);\\n    }\\n\\n    function erc20Allocations()\\n        external\\n        view\\n        override\\n        returns (IERC20[] memory)\\n    {\\n        IERC20[] memory allocations = new IERC20[](2);\\n        allocations[0] = _IN_TOKEN;\\n        allocations[1] = _OUT_TOKEN;\\n        return allocations;\\n    }\\n\\n    function _getPath() internal view virtual returns (bytes memory);\\n}\\n\"\r\n    },\r\n    \"contracts/protocols/uniswap/swaps/ISwapRouter.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: GPL-2.0-or-later\\npragma solidity 0.6.11;\\npragma experimental ABIEncoderV2;\\n\\ninterface ISwapRouter {\\n    struct ExactInputSingleParams {\\n        address tokenIn;\\n        address tokenOut;\\n        uint24 fee;\\n        address recipient;\\n        uint256 deadline;\\n        uint256 amountIn;\\n        uint256 amountOutMinimum;\\n        uint160 sqrtPriceLimitX96;\\n    }\\n\\n    struct ExactInputParams {\\n        bytes path;\\n        address recipient;\\n        uint256 deadline;\\n        uint256 amountIn;\\n        uint256 amountOutMinimum;\\n    }\\n\\n    function exactInputSingle(ExactInputSingleParams calldata params)\\n        external\\n        payable\\n        returns (uint256 amountOut);\\n\\n    function exactInput(ExactInputParams calldata params)\\n        external\\n        payable\\n        returns (uint256 amountOut);\\n}\\n\"\r\n    },\r\n    \"contracts/protocols/uniswap/swaps/CrvToStablecoinSwapBase.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: BUSDL-1.1\\npragma solidity 0.6.11;\\npragma experimental ABIEncoderV2;\\n\\nimport {IERC20} from \\\"contracts/common/Imports.sol\\\";\\nimport {ISwapRouter} from \\\"./ISwapRouter.sol\\\";\\nimport {SwapBase} from \\\"./SwapBase.sol\\\";\\n\\nabstract contract CrvToStablecoinSwapBase is SwapBase {\\n    IERC20 private constant _CRV =\\n        IERC20(0xD533a949740bb3306d119CC777fa900bA034cd52);\\n    IERC20 private constant _WETH =\\n        IERC20(0xC02aaA39b223FE8D0A0e5C4F27eAD9083C756Cc2);\\n\\n    uint24 private _CRV_WETH_FEE = 10000;\\n    uint24 private _WETH_STABLECOIN_FEE = 500;\\n\\n    constructor(IERC20 stablecoin) public SwapBase(_CRV, stablecoin) {} // solhint-disable-line no-empty-blocks\\n\\n    function _getPath() internal view virtual override returns (bytes memory) {\\n        bytes memory path =\\n            abi.encodePacked(\\n                address(_IN_TOKEN),\\n                _CRV_WETH_FEE,\\n                address(_WETH),\\n                _WETH_STABLECOIN_FEE,\\n                address(_OUT_TOKEN)\\n            );\\n\\n        return path;\\n    }\\n}\\n\"\r\n    },\r\n    \"contracts/protocols/uniswap/swaps/CrvToUsdtSwap.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: BUSDL-1.1\\npragma solidity 0.6.11;\\npragma experimental ABIEncoderV2;\\n\\nimport {IERC20} from \\\"contracts/common/Imports.sol\\\";\\nimport {CrvToStablecoinSwapBase} from \\\"./CrvToStablecoinSwapBase.sol\\\";\\n\\ncontract CrvToUsdtSwap is CrvToStablecoinSwapBase {\\n    string public constant override NAME = \\\"crv-to-usdt\\\";\\n\\n    IERC20 private constant _USDT =\\n        IERC20(0xdAC17F958D2ee523a2206206994597C13D831ec7);\\n\\n    // solhint-disable-next-line no-empty-blocks\\n    constructor() public CrvToStablecoinSwapBase(_USDT) {}\\n}\\n\"\r\n    },\r\n    \"contracts/protocols/uniswap/swaps/CrvToUsdcSwap.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: BUSDL-1.1\\npragma solidity 0.6.11;\\npragma experimental ABIEncoderV2;\\n\\nimport {IERC20} from \\\"contracts/common/Imports.sol\\\";\\nimport {CrvToStablecoinSwapBase} from \\\"./CrvToStablecoinSwapBase.sol\\\";\\n\\ncontract CrvToUsdcSwap is CrvToStablecoinSwapBase {\\n    string public constant override NAME = \\\"crv-to-usdc\\\";\\n\\n    IERC20 private constant _USDC =\\n        IERC20(0xA0b86991c6218b36c1d19D4a2e9Eb0cE3606eB48);\\n\\n    // solhint-disable-next-line no-empty-blocks\\n    constructor() public CrvToStablecoinSwapBase(_USDC) {}\\n}\\n\"\r\n    },\r\n    \"contracts/protocols/uniswap/swaps/AaveToStablecoinSwapBase.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: BUSDL-1.1\\npragma solidity 0.6.11;\\npragma experimental ABIEncoderV2;\\n\\nimport {IERC20} from \\\"contracts/common/Imports.sol\\\";\\nimport {ISwapRouter} from \\\"./ISwapRouter.sol\\\";\\nimport {SwapBase} from \\\"./SwapBase.sol\\\";\\n\\nabstract contract AaveToStablecoinSwapBase is SwapBase {\\n    IERC20 private constant _AAVE =\\n        IERC20(0x7Fc66500c84A76Ad7e9c93437bFc5Ac33E2DDaE9);\\n\\n    IERC20 private constant _WETH =\\n        IERC20(0xC02aaA39b223FE8D0A0e5C4F27eAD9083C756Cc2);\\n\\n    uint24 private _AAVE_WETH_FEE = 3000;\\n    uint24 private _WETH_STABLECOIN_FEE = 500;\\n\\n    constructor(IERC20 stablecoin) public SwapBase(_AAVE, stablecoin) {} // solhint-disable-line no-empty-blocks\\n\\n    function _getPath() internal view virtual override returns (bytes memory) {\\n        bytes memory path =\\n            abi.encodePacked(\\n                address(_IN_TOKEN),\\n                _AAVE_WETH_FEE,\\n                address(_WETH),\\n                _WETH_STABLECOIN_FEE,\\n                address(_OUT_TOKEN)\\n            );\\n\\n        return path;\\n    }\\n}\\n\"\r\n    },\r\n    \"contracts/protocols/uniswap/swaps/AaveToUsdtSwap.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: BUSDL-1.1\\npragma solidity 0.6.11;\\npragma experimental ABIEncoderV2;\\n\\nimport {IERC20} from \\\"contracts/common/Imports.sol\\\";\\nimport {AaveToStablecoinSwapBase} from \\\"./AaveToStablecoinSwapBase.sol\\\";\\n\\ncontract AaveToUsdtSwap is AaveToStablecoinSwapBase {\\n    string public constant override NAME = \\\"aave-to-usdt\\\";\\n\\n    IERC20 private constant _USDT =\\n        IERC20(0xdAC17F958D2ee523a2206206994597C13D831ec7);\\n\\n    // solhint-disable-next-line no-empty-blocks\\n    constructor() public AaveToStablecoinSwapBase(_USDT) {}\\n}\\n\"\r\n    },\r\n    \"contracts/protocols/uniswap/swaps/AaveToUsdcSwap.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: BUSDL-1.1\\npragma solidity 0.6.11;\\npragma experimental ABIEncoderV2;\\n\\nimport {IERC20} from \\\"contracts/common/Imports.sol\\\";\\nimport {AaveToStablecoinSwapBase} from \\\"./AaveToStablecoinSwapBase.sol\\\";\\n\\ncontract AaveToUsdcSwap is AaveToStablecoinSwapBase {\\n    string public constant override NAME = \\\"aave-to-usdc\\\";\\n\\n    IERC20 private constant _USDC =\\n        IERC20(0xA0b86991c6218b36c1d19D4a2e9Eb0cE3606eB48);\\n\\n    // solhint-disable-next-line no-empty-blocks\\n    constructor() public AaveToStablecoinSwapBase(_USDC) {}\\n}\\n\"\r\n    },\r\n    \"contracts/protocols/uniswap/swaps/AaveToDaiSwap.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: BUSDL-1.1\\npragma solidity 0.6.11;\\npragma experimental ABIEncoderV2;\\n\\nimport {IERC20} from \\\"contracts/common/Imports.sol\\\";\\nimport {AaveToStablecoinSwapBase} from \\\"./AaveToStablecoinSwapBase.sol\\\";\\n\\ncontract AaveToDaiSwap is AaveToStablecoinSwapBase {\\n    string public constant override NAME = \\\"aave-to-dai\\\";\\n\\n    IERC20 private constant _DAI =\\n        IERC20(0x6B175474E89094C44Da98b954EedeAC495271d0F);\\n\\n    // solhint-disable-next-line no-empty-blocks\\n    constructor() public AaveToStablecoinSwapBase(_DAI) {}\\n}\\n\"\r\n    },\r\n    \"contracts/protocols/uniswap/swaps/CrvToDaiSwap.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: BUSDL-1.1\\npragma solidity 0.6.11;\\npragma experimental ABIEncoderV2;\\n\\nimport {IERC20} from \\\"contracts/common/Imports.sol\\\";\\nimport {CrvToStablecoinSwapBase} from \\\"./CrvToStablecoinSwapBase.sol\\\";\\n\\ncontract CrvToDaiSwap is CrvToStablecoinSwapBase {\\n    string public constant override NAME = \\\"crv-to-dai\\\";\\n\\n    IERC20 private constant _DAI =\\n        IERC20(0x6B175474E89094C44Da98b954EedeAC495271d0F);\\n\\n    // solhint-disable-next-line no-empty-blocks\\n    constructor() public CrvToStablecoinSwapBase(_DAI) {}\\n}\\n\"\r\n    },\r\n    \"contracts/protocols/uniswap/Uniswap.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: BUSDL-1.1\\npragma solidity 0.6.11;\\n\\nimport {IERC20} from \\\"contracts/common/Imports.sol\\\";\\nimport {SafeMath} from \\\"contracts/libraries/Imports.sol\\\";\\n\\n/**\\n * @notice Uniswap contract for adding/removing liquidity from pools\\n */\\ninterface IUniswapV2Router {\\n    function addLiquidity(\\n        address tokenA,\\n        address tokenB,\\n        uint256 amountADesired,\\n        uint256 amountBDesired,\\n        uint256 amountAMin,\\n        uint256 amountBMin,\\n        address to,\\n        uint256 deadline\\n    )\\n        external\\n        returns (\\n            uint256 amountA,\\n            uint256 amountB,\\n            uint256 liquidity\\n        );\\n\\n    function addLiquidityETH(\\n        address token,\\n        uint256 amountTokenDesired,\\n        uint256 amountTokenMin,\\n        uint256 amountETHMin,\\n        address to,\\n        uint256 deadline\\n    )\\n        external\\n        payable\\n        returns (\\n            uint256 amountToken,\\n            uint256 amountETH,\\n            uint256 liquidity\\n        );\\n\\n    function removeLiquidity(\\n        address tokenA,\\n        address tokenB,\\n        uint256 liquidity,\\n        uint256 amountAMin,\\n        uint256 amountBMin,\\n        address to,\\n        uint256 deadline\\n    ) external returns (uint256 amountA, uint256 amountB);\\n\\n    function removeLiquidityETH(\\n        address token,\\n        uint256 liquidity,\\n        uint256 amountTokenMin,\\n        uint256 amountETHMin,\\n        address to,\\n        uint256 deadline\\n    ) external returns (uint256 amountToken, uint256 amountETH);\\n}\\n\\ninterface IUniswapV2Pair is IERC20 {\\n    function token0() external view returns (address);\\n\\n    function token1() external view returns (address);\\n}\\n\\n/**\\n * @title Periphery Contract for the Uniswap V2 Router\\n * @author APY.Finance\\n * @notice This contract enables the APY.Finance system to retrieve the balance\\n * of an underlyer of a Uniswap LP token. The balance is used as part\\n * of the Chainlink computation of the deployed TVL.  The primary\\n * `getUnderlyerBalance` function is invoked indirectly when a\\n * Chainlink node calls `balanceOf` on the APYAssetAllocationRegistry.\\n */\\ncontract UniswapPeriphery {\\n    using SafeMath for uint256;\\n\\n    /**\\n     * @notice Returns the balance of an underlying token represented by\\n     * an account's LP token balance.\\n     * @param lpToken the LP token representing the share of the pool\\n     * @param tokenIndex the index indicating which underlyer\\n     * @return balance\\n     */\\n    function getUnderlyerBalance(\\n        address account,\\n        IUniswapV2Pair lpToken,\\n        uint256 tokenIndex\\n    ) external view returns (uint256 balance) {\\n        require(address(lpToken) != address(0), \\\"INVALID_LP_TOKEN\\\");\\n\\n        uint256 poolBalance = getPoolBalance(lpToken, tokenIndex);\\n        (uint256 lpTokenBalance, uint256 lpTokenSupply) =\\n            getLpTokenShare(account, lpToken);\\n\\n        balance = lpTokenBalance.mul(poolBalance).div(lpTokenSupply);\\n    }\\n\\n    function getPoolBalance(IUniswapV2Pair lpToken, uint256 tokenIndex)\\n        public\\n        view\\n        returns (uint256 poolBalance)\\n    {\\n        require(address(lpToken) != address(0), \\\"INVALID_LP_TOKEN\\\");\\n        IERC20 token;\\n        if (tokenIndex == 0) {\\n            token = IERC20(lpToken.token0());\\n        } else if (tokenIndex == 1) {\\n            token = IERC20(lpToken.token1());\\n        } else {\\n            revert(\\\"INVALID_TOKEN_INDEX\\\");\\n        }\\n        poolBalance = token.balanceOf(address(lpToken));\\n    }\\n\\n    function getLpTokenShare(address account, IERC20 lpToken)\\n        public\\n        view\\n        returns (uint256 balance, uint256 totalSupply)\\n    {\\n        require(address(lpToken) != address(0), \\\"INVALID_LP_TOKEN\\\");\\n\\n        totalSupply = lpToken.totalSupply();\\n        balance = lpToken.balanceOf(account);\\n    }\\n}\\n\"\r\n    },\r\n    \"contracts/protocols/curve/susdv2/Zap.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: BUSDL-1.1\\npragma solidity 0.6.11;\\npragma experimental ABIEncoderV2;\\n\\nimport {IERC20} from \\\"@openzeppelin/contracts/token/ERC20/IERC20.sol\\\";\\nimport {IAssetAllocation} from \\\"contracts/common/Imports.sol\\\";\\nimport {SafeERC20, SafeMath} from \\\"contracts/libraries/Imports.sol\\\";\\nimport {\\n    IOldStableSwap4 as IStableSwap,\\n    ILiquidityGauge\\n} from \\\"contracts/protocols/curve/common/interfaces/Imports.sol\\\";\\nimport {CurveSusdV2Constants} from \\\"./Constants.sol\\\";\\nimport {CurveGaugeZapBase} from \\\"contracts/protocols/curve/common/Imports.sol\\\";\\n\\ncontract SusdV2Zap is CurveGaugeZapBase, CurveSusdV2Constants {\\n    using SafeMath for uint256;\\n    using SafeERC20 for IERC20;\\n\\n    constructor()\\n        public\\n        CurveGaugeZapBase(\\n            STABLE_SWAP_ADDRESS,\\n            LP_TOKEN_ADDRESS,\\n            LIQUIDITY_GAUGE_ADDRESS,\\n            10000,\\n            100,\\n            4\\n        ) // solhint-disable-next-line no-empty-blocks\\n    {}\\n\\n    function assetAllocations() public view override returns (string[] memory) {\\n        string[] memory allocationNames = new string[](1);\\n        allocationNames[0] = NAME;\\n        return allocationNames;\\n    }\\n\\n    function erc20Allocations() public view override returns (IERC20[] memory) {\\n        IERC20[] memory allocations = _createErc20AllocationArray(2);\\n        allocations[4] = IERC20(SNX_ADDRESS);\\n        allocations[5] = IERC20(SUSD_ADDRESS);\\n        return allocations;\\n    }\\n\\n    function _getVirtualPrice() internal view override returns (uint256) {\\n        return IStableSwap(SWAP_ADDRESS).get_virtual_price();\\n    }\\n\\n    function _getCoinAtIndex(uint256 i)\\n        internal\\n        view\\n        override\\n        returns (address)\\n    {\\n        return IStableSwap(SWAP_ADDRESS).coins(int128(i));\\n    }\\n\\n    function _addLiquidity(uint256[] calldata amounts, uint256 minAmount)\\n        internal\\n        override\\n    {\\n        IStableSwap(SWAP_ADDRESS).add_liquidity(\\n            [amounts[0], amounts[1], amounts[2], amounts[3]],\\n            minAmount\\n        );\\n    }\\n\\n    function _removeLiquidity(\\n        uint256 lpBalance,\\n        uint8 index,\\n        uint256 minAmount\\n    ) internal override {\\n        require(index < 4, \\\"INVALID_INDEX\\\");\\n\\n        uint256[] memory balances = new uint256[](4);\\n        for (uint256 i = 0; i < balances.length; i++) {\\n            if (i == index) continue;\\n            IERC20 inToken = IERC20(_getCoinAtIndex(i));\\n            balances[i] = inToken.balanceOf(address(this));\\n        }\\n\\n        IStableSwap swap = IStableSwap(SWAP_ADDRESS);\\n        swap.remove_liquidity(\\n            lpBalance,\\n            [uint256(0), uint256(0), uint256(0), uint256(0)]\\n        );\\n\\n        for (uint256 i = 0; i < balances.length; i++) {\\n            if (i == index) continue;\\n            IERC20 inToken = IERC20(_getCoinAtIndex(i));\\n            uint256 balanceDelta =\\n                inToken.balanceOf(address(this)).sub(balances[i]);\\n            inToken.safeApprove(address(swap), 0);\\n            inToken.safeApprove(address(swap), balanceDelta);\\n            swap.exchange(int128(i), index, balanceDelta, 0);\\n        }\\n\\n        uint256 underlyerBalance =\\n            IERC20(_getCoinAtIndex(index)).balanceOf(address(this));\\n        require(underlyerBalance >= minAmount, \\\"UNDER_MIN_AMOUNT\\\");\\n    }\\n\\n    /**\\n     * @dev claim protocol-specific rewards;\\n     *      CRV rewards are always claimed through the minter, in\\n     *      the `CurveGaugeZapBase` implementation.\\n     */\\n    function _claimRewards() internal override {\\n        ILiquidityGauge liquidityGauge = ILiquidityGauge(GAUGE_ADDRESS);\\n        liquidityGauge.claim_rewards();\\n    }\\n}\\n\"\r\n    },\r\n    \"contracts/protocols/curve/common/interfaces/Imports.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: BUSDL-1.1\\npragma solidity 0.6.11;\\n\\nimport {CTokenInterface} from \\\"./CTokenInterface.sol\\\";\\nimport {ITokenMinter} from \\\"./ITokenMinter.sol\\\";\\nimport {IStableSwap, IStableSwap3} from \\\"./IStableSwap.sol\\\";\\nimport {IStableSwap2} from \\\"./IStableSwap2.sol\\\";\\nimport {IStableSwap4} from \\\"./IStableSwap4.sol\\\";\\nimport {IOldStableSwap2} from \\\"./IOldStableSwap2.sol\\\";\\nimport {IOldStableSwap4} from \\\"./IOldStableSwap4.sol\\\";\\nimport {ILiquidityGauge} from \\\"./ILiquidityGauge.sol\\\";\\nimport {IStakingRewards} from \\\"./IStakingRewards.sol\\\";\\nimport {IDepositZap} from \\\"./IDepositZap.sol\\\";\\n\"\r\n    },\r\n    \"contracts/protocols/curve/susdv2/Constants.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: BUSDL-1.1\\npragma solidity 0.6.11;\\n\\nimport {INameIdentifier} from \\\"contracts/common/Imports.sol\\\";\\nimport {\\n    Curve3PoolUnderlyerConstants\\n} from \\\"contracts/protocols/curve/3pool/Constants.sol\\\";\\n\\nabstract contract CurveSusdV2Constants is\\n    Curve3PoolUnderlyerConstants,\\n    INameIdentifier\\n{\\n    string public constant override NAME = \\\"curve-susdv2\\\";\\n\\n    address public constant STABLE_SWAP_ADDRESS =\\n        0xA5407eAE9Ba41422680e2e00537571bcC53efBfD;\\n    address public constant LP_TOKEN_ADDRESS =\\n        0xC25a3A3b969415c80451098fa907EC722572917F;\\n    address public constant LIQUIDITY_GAUGE_ADDRESS =\\n        0xA90996896660DEcC6E997655E065b23788857849;\\n\\n    address public constant SUSD_ADDRESS =\\n        0x57Ab1ec28D129707052df4dF418D58a2D46d5f51;\\n    address public constant SNX_ADDRESS =\\n        0xC011a73ee8576Fb46F5E1c5751cA3B9Fe0af2a6F;\\n}\\n\"\r\n    },\r\n    \"contracts/protocols/curve/common/Imports.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: BUSDL-1.1\\npragma solidity 0.6.11;\\n\\nimport {\\n    CurveAllocationBase,\\n    CurveAllocationBase3\\n} from \\\"./CurveAllocationBase.sol\\\";\\nimport {CurveAllocationBase2} from \\\"./CurveAllocationBase2.sol\\\";\\nimport {CurveAllocationBase4} from \\\"./CurveAllocationBase4.sol\\\";\\nimport {CurveGaugeZapBase} from \\\"./CurveGaugeZapBase.sol\\\";\\nimport {CurveZapBase} from \\\"./CurveZapBase.sol\\\";\\nimport {OldCurveAllocationBase2} from \\\"./OldCurveAllocationBase2.sol\\\";\\nimport {OldCurveAllocationBase4} from \\\"./OldCurveAllocationBase4.sol\\\";\\nimport {TestCurveZap} from \\\"./TestCurveZap.sol\\\";\\n\"\r\n    },\r\n    \"contracts/protocols/curve/common/interfaces/CTokenInterface.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: BSD 3-Clause\\n/*\\n * https://github.com/compound-finance/compound-protocol/blob/master/contracts/CTokenInterfaces.sol\\n */\\npragma solidity 0.6.11;\\n\\ninterface CTokenInterface {\\n    function symbol() external returns (string memory);\\n\\n    function decimals() external returns (uint8);\\n\\n    function totalSupply() external returns (uint256);\\n\\n    function isCToken() external returns (bool);\\n\\n    function transfer(address dst, uint256 amount) external returns (bool);\\n\\n    function transferFrom(\\n        address src,\\n        address dst,\\n        uint256 amount\\n    ) external returns (bool);\\n\\n    function approve(address spender, uint256 amount) external returns (bool);\\n\\n    function totalBorrowsCurrent() external returns (uint256);\\n\\n    function borrowBalanceCurrent(address account) external returns (uint256);\\n\\n    function accrueInterest() external returns (uint256);\\n\\n    function exchangeRateCurrent() external returns (uint256);\\n\\n    function exchangeRateStored() external view returns (uint256);\\n\\n    function getCash() external view returns (uint256);\\n\\n    function borrowBalanceStored(address account)\\n        external\\n        view\\n        returns (uint256);\\n\\n    function allowance(address owner, address spender)\\n        external\\n        view\\n        returns (uint256);\\n\\n    function balanceOf(address owner) external view returns (uint256);\\n\\n    function borrowRatePerBlock() external view returns (uint256);\\n\\n    function supplyRatePerBlock() external view returns (uint256);\\n\\n    function getAccountSnapshot(address account)\\n        external\\n        view\\n        returns (\\n            uint256,\\n            uint256,\\n            uint256,\\n            uint256\\n        );\\n}\\n\"\r\n    },\r\n    \"contracts/protocols/curve/common/interfaces/ITokenMinter.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\npragma solidity 0.6.11;\\n\\n/**\\n * @notice the Curve token minter\\n * @author Curve Finance\\n * @dev translated from vyper\\n * license MIT\\n * version 0.2.4\\n */\\n\\n// solhint-disable func-name-mixedcase, func-param-name-mixedcase\\ninterface ITokenMinter {\\n    /**\\n     * @notice Mint everything which belongs to `msg.sender` and send to them\\n     * @param gauge_addr `LiquidityGauge` address to get mintable amount from\\n     */\\n    function mint(address gauge_addr) external;\\n\\n    /**\\n     * @notice Mint everything which belongs to `msg.sender` across multiple gauges\\n     * @param gauge_addrs List of `LiquidityGauge` addresses\\n     */\\n    function mint_many(address[8] calldata gauge_addrs) external;\\n\\n    /**\\n     * @notice Mint tokens for `_for`\\n     * @dev Only possible when `msg.sender` has been approved via `toggle_approve_mint`\\n     * @param gauge_addr `LiquidityGauge` address to get mintable amount from\\n     * @param _for Address to mint to\\n     */\\n    function mint_for(address gauge_addr, address _for) external;\\n\\n    /**\\n     * @notice allow `minting_user` to mint for `msg.sender`\\n     * @param minting_user Address to toggle permission for\\n     */\\n    function toggle_approve_mint(address minting_user) external;\\n}\\n// solhint-enable\\n\"\r\n    },\r\n    \"contracts/protocols/curve/common/interfaces/IStableSwap.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: BUSDL-1.1\\npragma solidity 0.6.11;\\n\\nimport {SafeMath} from \\\"@openzeppelin/contracts/math/SafeMath.sol\\\";\\nimport {IERC20} from \\\"@openzeppelin/contracts/token/ERC20/IERC20.sol\\\";\\n\\n/**\\n * @notice the stablecoin pool contract\\n */\\ninterface IStableSwap {\\n    function balances(uint256 coin) external view returns (uint256);\\n\\n    function coins(uint256 coin) external view returns (address);\\n\\n    // solhint-disable-next-line\\n    function underlying_coins(uint256 coin) external view returns (address);\\n\\n    /**\\n     * @dev the number of coins is hard-coded in curve contracts\\n     */\\n    // solhint-disable-next-line\\n    function add_liquidity(uint256[3] memory amounts, uint256 min_mint_amount)\\n        external;\\n\\n    // solhint-disable-next-line\\n    function add_liquidity(\\n        uint256[3] memory amounts,\\n        uint256 minMinAmount,\\n        bool useUnderlyer\\n    ) external;\\n\\n    /**\\n     * @dev the number of coins is hard-coded in curve contracts\\n     */\\n    // solhint-disable-next-line\\n    function remove_liquidity(uint256 _amount, uint256[3] memory min_amounts)\\n        external;\\n\\n    // solhint-disable-next-line\\n    function remove_liquidity_one_coin(\\n        uint256 tokenAmount,\\n        int128 tokenIndex,\\n        uint256 minAmount\\n    ) external;\\n\\n    // solhint-disable-next-line\\n    function remove_liquidity_one_coin(\\n        uint256 tokenAmount,\\n        int128 tokenIndex,\\n        uint256 minAmount,\\n        bool useUnderlyer\\n    ) external;\\n\\n    // solhint-disable-next-line\\n    function get_virtual_price() external view returns (uint256);\\n\\n    /**\\n     * @dev For newest curve pools like aave; older pools refer to a private `token` variable.\\n     */\\n    // function lp_token() external view returns (address); // solhint-disable-line func-name-mixedcase\\n}\\n\\n// solhint-disable-next-line no-empty-blocks\\ninterface IStableSwap3 is IStableSwap {\\n\\n}\\n\"\r\n    },\r\n    \"contracts/protocols/curve/common/interfaces/IStableSwap2.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: BUSDL-1.1\\npragma solidity 0.6.11;\\n\\nimport {SafeMath} from \\\"@openzeppelin/contracts/math/SafeMath.sol\\\";\\nimport {IERC20} from \\\"@openzeppelin/contracts/token/ERC20/IERC20.sol\\\";\\n\\n/**\\n * @notice the stablecoin pool contract\\n */\\ninterface IStableSwap2 {\\n    function balances(uint256 coin) external view returns (uint256);\\n\\n    function coins(uint256 coin) external view returns (address);\\n\\n    /**\\n     * @dev the number of coins is hard-coded in curve contracts\\n     */\\n    // solhint-disable-next-line\\n    function add_liquidity(uint256[2] memory amounts, uint256 min_mint_amount)\\n        external;\\n\\n    /**\\n     * @dev the number of coins is hard-coded in curve contracts\\n     */\\n    // solhint-disable-next-line\\n    function remove_liquidity(uint256 _amount, uint256[2] memory min_amounts)\\n        external;\\n\\n    // solhint-disable-next-line\\n    function remove_liquidity_one_coin(\\n        uint256 tokenAmount,\\n        int128 tokenIndex,\\n        uint256 minAmount\\n    ) external;\\n\\n    // solhint-disable-next-line\\n    function get_virtual_price() external view returns (uint256);\\n\\n    /**\\n     * @dev For newest curve pools like aave; older pools refer to a private `token` variable.\\n     */\\n    // function lp_token() external view returns (address); // solhint-disable-line func-name-mixedcase\\n}\\n\"\r\n    },\r\n    \"contracts/protocols/curve/common/interfaces/IStableSwap4.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: BUSDL-1.1\\npragma solidity 0.6.11;\\n\\nimport {SafeMath} from \\\"@openzeppelin/contracts/math/SafeMath.sol\\\";\\nimport {IERC20} from \\\"@openzeppelin/contracts/token/ERC20/IERC20.sol\\\";\\n\\n/**\\n * @notice the stablecoin pool contract\\n */\\ninterface IStableSwap4 {\\n    function balances(uint256 coin) external view returns (uint256);\\n\\n    function coins(uint256 coin) external view returns (address);\\n\\n    /**\\n     * @dev the number of coins is hard-coded in curve contracts\\n     */\\n    // solhint-disable-next-line\\n    function add_liquidity(uint256[4] memory amounts, uint256 min_mint_amount)\\n        external;\\n\\n    /**\\n     * @dev the number of coins is hard-coded in curve contracts\\n     */\\n    // solhint-disable-next-line\\n    function remove_liquidity(uint256 _amount, uint256[4] memory min_amounts)\\n        external;\\n\\n    // solhint-disable-next-line\\n    function remove_liquidity_one_coin(\\n        uint256 tokenAmount,\\n        int128 tokenIndex,\\n        uint256 minAmount\\n    ) external;\\n\\n    // solhint-disable-next-line\\n    function get_virtual_price() external view returns (uint256);\\n\\n    /**\\n     * @dev For newest curve pools like aave; older pools refer to a private `token` variable.\\n     */\\n    // function lp_token() external view returns (address); // solhint-disable-line func-name-mixedcase\\n}\\n\"\r\n    },\r\n    \"contracts/protocols/curve/common/interfaces/IOldStableSwap2.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: BUSDL-1.1\\npragma solidity 0.6.11;\\n\\nimport {SafeMath} from \\\"@openzeppelin/contracts/math/SafeMath.sol\\\";\\nimport {IERC20} from \\\"@openzeppelin/contracts/token/ERC20/IERC20.sol\\\";\\n\\n/**\\n * @notice the stablecoin pool contract\\n */\\ninterface IOldStableSwap2 {\\n    function balances(int128 coin) external view returns (uint256);\\n\\n    function coins(int128 coin) external view returns (address);\\n\\n    /**\\n     * @dev the number of coins is hard-coded in curve contracts\\n     */\\n    // solhint-disable-next-line\\n    function add_liquidity(uint256[2] memory amounts, uint256 min_mint_amount)\\n        external;\\n\\n    /**\\n     * @dev the number of coins is hard-coded in curve contracts\\n     */\\n    // solhint-disable-next-line\\n    function remove_liquidity(uint256 _amount, uint256[2] memory min_amounts)\\n        external;\\n\\n    /// @dev need this due to lack of `remove_liquidity_one_coin`\\n    function exchange(\\n        int128 i,\\n        int128 j,\\n        uint256 dx,\\n        uint256 min_dy // solhint-disable-line func-param-name-mixedcase\\n    ) external;\\n\\n    // solhint-disable-next-line\\n    function get_virtual_price() external view returns (uint256);\\n\\n    /**\\n     * @dev For newest curve pools like aave; older pools refer to a private `token` variable.\\n     */\\n    // function lp_token() external view returns (address); // solhint-disable-line func-name-mixedcase\\n}\\n\"\r\n    },\r\n    \"contracts/protocols/curve/common/interfaces/IOldStableSwap4.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: BUSDL-1.1\\npragma solidity 0.6.11;\\n\\nimport {SafeMath} from \\\"@openzeppelin/contracts/math/SafeMath.sol\\\";\\nimport {IERC20} from \\\"@openzeppelin/contracts/token/ERC20/IERC20.sol\\\";\\n\\n/**\\n * @notice the stablecoin pool contract\\n */\\ninterface IOldStableSwap4 {\\n    function balances(int128 coin) external view returns (uint256);\\n\\n    function coins(int128 coin) external view returns (address);\\n\\n    /**\\n     * @dev the number of coins is hard-coded in curve contracts\\n     */\\n    // solhint-disable-next-line\\n    function add_liquidity(uint256[4] memory amounts, uint256 min_mint_amount)\\n        external;\\n\\n    /**\\n     * @dev the number of coins is hard-coded in curve contracts\\n     */\\n    // solhint-disable-next-line\\n    function remove_liquidity(uint256 _amount, uint256[4] memory min_amounts)\\n        external;\\n\\n    /// @dev need this due to lack of `remove_liquidity_one_coin`\\n    function exchange(\\n        int128 i,\\n        int128 j,\\n        uint256 dx,\\n        uint256 min_dy // solhint-disable-line func-param-name-mixedcase\\n    ) external;\\n\\n    // solhint-disable-next-line\\n    function get_virtual_price() external view returns (uint256);\\n}\\n\"\r\n    },\r\n    \"contracts/protocols/curve/common/interfaces/ILiquidityGauge.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: BUSDL-1.1\\npragma solidity 0.6.11;\\n\\nimport {SafeMath} from \\\"@openzeppelin/contracts/math/SafeMath.sol\\\";\\nimport {IERC20} from \\\"@openzeppelin/contracts/token/ERC20/IERC20.sol\\\";\\n\\n/**\\n * @notice the liquidity gauge, i.e. staking contract, for the stablecoin pool\\n */\\ninterface ILiquidityGauge {\\n    function deposit(uint256 _value) external;\\n\\n    function deposit(uint256 _value, address _addr) external;\\n\\n    function withdraw(uint256 _value) external;\\n\\n    /**\\n     * @notice Claim available reward tokens for msg.sender\\n     */\\n    // solhint-disable-next-line func-name-mixedcase\\n    function claim_rewards() external;\\n\\n    /**\\n     * @notice Get the number of claimable reward tokens for a user\\n     * @dev This function should be manually changed to \\\"view\\\" in the ABI\\n     *      Calling it via a transaction will claim available reward tokens\\n     * @param _addr Account to get reward amount for\\n     * @param _token Token to get reward amount for\\n     * @return uint256 Claimable reward token amount\\n     */\\n    // solhint-disable-next-line func-name-mixedcase\\n    function claimable_reward(address _addr, address _token)\\n        external\\n        returns (uint256);\\n\\n    function balanceOf(address account) external view returns (uint256);\\n}\\n\"\r\n    },\r\n    \"contracts/protocols/curve/common/interfaces/IStakingRewards.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\npragma solidity 0.6.11;\\n\\n/*\\n * Synthetix: StakingRewards.sol\\n *\\n * Docs: https://docs.synthetix.io/\\n *\\n *\\n * MIT License\\n * ===========\\n *\\n * Copyright (c) 2020 Synthetix\\n *\\n */\\n\\ninterface IStakingRewards {\\n    // Mutative\\n    function stake(uint256 amount) external;\\n\\n    function withdraw(uint256 amount) external;\\n\\n    function getReward() external;\\n\\n    function exit() external;\\n\\n    // Views\\n    function lastTimeRewardApplicable() external view returns (uint256);\\n\\n    function rewardPerToken() external view returns (uint256);\\n\\n    function earned(address account) external view returns (uint256);\\n\\n    function getRewardForDuration() external view returns (uint256);\\n\\n    function totalSupply() external view returns (uint256);\\n\\n    function balanceOf(address account) external view returns (uint256);\\n}\\n\"\r\n    },\r\n    \"contracts/protocols/curve/common/interfaces/IDepositZap.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: BUSDL-2.1\\npragma solidity 0.6.11;\\n\\nimport {SafeMath} from \\\"@openzeppelin/contracts/math/SafeMath.sol\\\";\\nimport {IERC20} from \\\"@openzeppelin/contracts/token/ERC20/IERC20.sol\\\";\\n\\n/**\\n * @notice the stablecoin pool contract\\n */\\ninterface IDepositZap {\\n    // this method only exists on the DepositCompound Contract\\n    // solhint-disable-next-line\\n    function underlying_coins(int128 coin) external view returns (address);\\n\\n    /**\\n     * @dev the number of coins is hard-coded in curve contracts\\n     */\\n    // solhint-disable-next-line\\n    function add_liquidity(uint256[2] memory amounts, uint256 min_mint_amount)\\n        external;\\n\\n    /**\\n     * @dev the number of coins is hard-coded in curve contracts\\n     */\\n    // solhint-disable-next-line\\n    function remove_liquidity_one_coin(\\n        uint256 _amount,\\n        int128 i,\\n        uint256 minAmount\\n    ) external;\\n\\n    function curve() external view returns (address);\\n}\\n\"\r\n    },\r\n    \"contracts/protocols/curve/3pool/Constants.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: BUSDL-1.1\\npragma solidity 0.6.11;\\n\\nimport {INameIdentifier} from \\\"contracts/common/Imports.sol\\\";\\n\\nabstract contract Curve3PoolUnderlyerConstants {\\n    // underlyer addresses\\n    address public constant DAI_ADDRESS =\\n        0x6B175474E89094C44Da98b954EedeAC495271d0F;\\n    address public constant USDC_ADDRESS =\\n        0xA0b86991c6218b36c1d19D4a2e9Eb0cE3606eB48;\\n    address public constant USDT_ADDRESS =\\n        0xdAC17F958D2ee523a2206206994597C13D831ec7;\\n}\\n\\nabstract contract Curve3PoolConstants is\\n    Curve3PoolUnderlyerConstants,\\n    INameIdentifier\\n{\\n    string public constant override NAME = \\\"curve-3pool\\\";\\n\\n    address public constant STABLE_SWAP_ADDRESS =\\n        0xbEbc44782C7dB0a1A60Cb6fe97d0b483032FF1C7;\\n    address public constant LP_TOKEN_ADDRESS =\\n        0x6c3F90f043a72FA612cbac8115EE7e52BDe6E490;\\n    address public constant LIQUIDITY_GAUGE_ADDRESS =\\n        0xbFcF63294aD7105dEa65aA58F8AE5BE2D9d0952A;\\n}\\n\"\r\n    },\r\n    \"contracts/protocols/curve/common/CurveAllocationBase.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: BUSDL-1.1\\npragma solidity 0.6.11;\\npragma experimental ABIEncoderV2;\\n\\nimport {SafeMath} from \\\"contracts/libraries/Imports.sol\\\";\\nimport {IERC20} from \\\"contracts/common/Imports.sol\\\";\\nimport {ImmutableAssetAllocation} from \\\"contracts/tvl/Imports.sol\\\";\\n\\nimport {\\n    IStableSwap,\\n    ILiquidityGauge\\n} from \\\"contracts/protocols/curve/common/interfaces/Imports.sol\\\";\\n\\n/**\\n * @title Periphery Contract for the Curve 3pool\\n * @author APY.Finance\\n * @notice This contract enables the APY.Finance system to retrieve the balance\\n * of an underlyer of a Curve LP token. The balance is used as part\\n * of the Chainlink computation of the deployed TVL.  The primary\\n * `getUnderlyerBalance` function is invoked indirectly when a\\n * Chainlink node calls `balanceOf` on the APYAssetAllocationRegistry.\\n */\\ncontract CurveAllocationBase {\\n    using SafeMath for uint256;\\n\\n    /**\\n     * @notice Returns the balance of an underlying token represented by\\n     * an account's LP token balance.\\n     * @param stableSwap the liquidity pool comprised of multiple underlyers\\n     * @param gauge the staking contract for the LP tokens\\n     * @param lpToken the LP token representing the share of the pool\\n     * @param coin the index indicating which underlyer\\n     * @return balance\\n     */\\n    function getUnderlyerBalance(\\n        address account,\\n        IStableSwap stableSwap,\\n        ILiquidityGauge gauge,\\n        IERC20 lpToken,\\n        uint256 coin\\n    ) public view returns (uint256 balance) {\\n        require(address(stableSwap) != address(0), \\\"INVALID_STABLESWAP\\\");\\n        require(address(gauge) != address(0), \\\"INVALID_GAUGE\\\");\\n        require(address(lpToken) != address(0), \\\"INVALID_LP_TOKEN\\\");\\n\\n        uint256 poolBalance = getPoolBalance(stableSwap, coin);\\n        (uint256 lpTokenBalance, uint256 lpTokenSupply) =\\n            getLpTokenShare(account, stableSwap, gauge, lpToken);\\n\\n        balance = lpTokenBalance.mul(poolBalance).div(lpTokenSupply);\\n    }\\n\\n    function getPoolBalance(IStableSwap stableSwap, uint256 coin)\\n        public\\n        view\\n        returns (uint256)\\n    {\\n        require(address(stableSwap) != address(0), \\\"INVALID_STABLESWAP\\\");\\n        return stableSwap.balances(coin);\\n    }\\n\\n    function getLpTokenShare(\\n        address account,\\n        IStableSwap stableSwap,\\n        ILiquidityGauge gauge,\\n        IERC20 lpToken\\n    ) public view returns (uint256 balance, uint256 totalSupply) {\\n        require(address(stableSwap) != address(0), \\\"INVALID_STABLESWAP\\\");\\n        require(address(gauge) != address(0), \\\"INVALID_GAUGE\\\");\\n        require(address(lpToken) != address(0), \\\"INVALID_LP_TOKEN\\\");\\n\\n        totalSupply = lpToken.totalSupply();\\n        balance = lpToken.balanceOf(account);\\n        balance = balance.add(gauge.balanceOf(account));\\n    }\\n}\\n\\n// solhint-disable-next-line no-empty-blocks\\ncontract CurveAllocationBase3 is CurveAllocationBase {\\n\\n}\\n\"\r\n    },\r\n    \"contracts/protocols/curve/common/CurveAllocationBase2.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: BUSDL-1.1\\npragma solidity 0.6.11;\\npragma experimental ABIEncoderV2;\\n\\nimport {SafeMath} from \\\"contracts/libraries/Imports.sol\\\";\\nimport {IERC20} from \\\"contracts/common/Imports.sol\\\";\\nimport {ImmutableAssetAllocation} from \\\"contracts/tvl/Imports.sol\\\";\\n\\nimport {\\n    IStableSwap2,\\n    ILiquidityGauge\\n} from \\\"contracts/protocols/curve/common/interfaces/Imports.sol\\\";\\n\\n/**\\n * @title Periphery Contract for the Curve 3pool\\n * @author APY.Finance\\n * @notice This contract enables the APY.Finance system to retrieve the balance\\n * of an underlyer of a Curve LP token. The balance is used as part\\n * of the Chainlink computation of the deployed TVL.  The primary\\n * `getUnderlyerBalance` function is invoked indirectly when a\\n * Chainlink node calls `balanceOf` on the APYAssetAllocationRegistry.\\n */\\ncontract CurveAllocationBase2 {\\n    using SafeMath for uint256;\\n\\n    /**\\n     * @notice Returns the balance of an underlying token represented by\\n     * an account's LP token balance.\\n     * @param stableSwap the liquidity pool comprised of multiple underlyers\\n     * @param gauge the staking contract for the LP tokens\\n     * @param lpToken the LP token representing the share of the pool\\n     * @param coin the index indicating which underlyer\\n     * @return balance\\n     */\\n    function getUnderlyerBalance(\\n        address account,\\n        IStableSwap2 stableSwap,\\n        ILiquidityGauge gauge,\\n        IERC20 lpToken,\\n        uint256 coin\\n    ) public view returns (uint256 balance) {\\n        require(address(stableSwap) != address(0), \\\"INVALID_STABLESWAP\\\");\\n        require(address(gauge) != address(0), \\\"INVALID_GAUGE\\\");\\n        require(address(lpToken) != address(0), \\\"INVALID_LP_TOKEN\\\");\\n\\n        uint256 poolBalance = getPoolBalance(stableSwap, coin);\\n        (uint256 lpTokenBalance, uint256 lpTokenSupply) =\\n            getLpTokenShare(account, stableSwap, gauge, lpToken);\\n\\n        balance = lpTokenBalance.mul(poolBalance).div(lpTokenSupply);\\n    }\\n\\n    function getPoolBalance(IStableSwap2 stableSwap, uint256 coin)\\n        public\\n        view\\n        returns (uint256)\\n    {\\n        require(address(stableSwap) != address(0), \\\"INVALID_STABLESWAP\\\");\\n        return stableSwap.balances(coin);\\n    }\\n\\n    function getLpTokenShare(\\n        address account,\\n        IStableSwap2 stableSwap,\\n        ILiquidityGauge gauge,\\n        IERC20 lpToken\\n    ) public view returns (uint256 balance, uint256 totalSupply) {\\n        require(address(stableSwap) != address(0), \\\"INVALID_STABLESWAP\\\");\\n        require(address(gauge) != address(0), \\\"INVALID_GAUGE\\\");\\n        require(address(lpToken) != address(0), \\\"INVALID_LP_TOKEN\\\");\\n\\n        totalSupply = lpToken.totalSupply();\\n        balance = lpToken.balanceOf(account);\\n        balance = balance.add(gauge.balanceOf(account));\\n    }\\n}\\n\"\r\n    },\r\n    \"contracts/protocols/curve/common/CurveAllocationBase4.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: BUSDL-1.1\\npragma solidity 0.6.11;\\npragma experimental ABIEncoderV2;\\n\\nimport {SafeMath} from \\\"contracts/libraries/Imports.sol\\\";\\nimport {IERC20} from \\\"contracts/common/Imports.sol\\\";\\nimport {ImmutableAssetAllocation} from \\\"contracts/tvl/Imports.sol\\\";\\n\\nimport {\\n    IStableSwap4,\\n    ILiquidityGauge\\n} from \\\"contracts/protocols/curve/common/interfaces/Imports.sol\\\";\\n\\n/**\\n * @title Periphery Contract for the Curve 3pool\\n * @author APY.Finance\\n * @notice This contract enables the APY.Finance system to retrieve the balance\\n * of an underlyer of a Curve LP token. The balance is used as part\\n * of the Chainlink computation of the deployed TVL.  The primary\\n * `getUnderlyerBalance` function is invoked indirectly when a\\n * Chainlink node calls `balanceOf` on the APYAssetAllocationRegistry.\\n */\\ncontract CurveAllocationBase4 {\\n    using SafeMath for uint256;\\n\\n    /**\\n     * @notice Returns the balance of an underlying token represented by\\n     * an account's LP token balance.\\n     * @param stableSwap the liquidity pool comprised of multiple underlyers\\n     * @param gauge the staking contract for the LP tokens\\n     * @param lpToken the LP token representing the share of the pool\\n     * @param coin the index indicating which underlyer\\n     * @return balance\\n     */\\n    function getUnderlyerBalance(\\n        address account,\\n        IStableSwap4 stableSwap,\\n        ILiquidityGauge gauge,\\n        IERC20 lpToken,\\n        uint256 coin\\n    ) public view returns (uint256 balance) {\\n        require(address(stableSwap) != address(0), \\\"INVALID_STABLESWAP\\\");\\n        require(address(gauge) != address(0), \\\"INVALID_GAUGE\\\");\\n        require(address(lpToken) != address(0), \\\"INVALID_LP_TOKEN\\\");\\n\\n        uint256 poolBalance = getPoolBalance(stableSwap, coin);\\n        (uint256 lpTokenBalance, uint256 lpTokenSupply) =\\n            getLpTokenShare(account, stableSwap, gauge, lpToken);\\n\\n        balance = lpTokenBalance.mul(poolBalance).div(lpTokenSupply);\\n    }\\n\\n    function getPoolBalance(IStableSwap4 stableSwap, uint256 coin)\\n        public\\n        view\\n        returns (uint256)\\n    {\\n        require(address(stableSwap) != address(0), \\\"INVALID_STABLESWAP\\\");\\n        return stableSwap.balances(coin);\\n    }\\n\\n    function getLpTokenShare(\\n        address account,\\n        IStableSwap4 stableSwap,\\n        ILiquidityGauge gauge,\\n        IERC20 lpToken\\n    ) public view returns (uint256 balance, uint256 totalSupply) {\\n        require(address(stableSwap) != address(0), \\\"INVALID_STABLESWAP\\\");\\n        require(address(gauge) != address(0), \\\"INVALID_GAUGE\\\");\\n        require(address(lpToken) != address(0), \\\"INVALID_LP_TOKEN\\\");\\n\\n        totalSupply = lpToken.totalSupply();\\n        balance = lpToken.balanceOf(account);\\n        balance = balance.add(gauge.balanceOf(account));\\n    }\\n}\\n\"\r\n    },\r\n    \"contracts/protocols/curve/common/CurveGaugeZapBase.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: BUSDL-1.1\\npragma solidity 0.6.11;\\npragma experimental ABIEncoderV2;\\n\\nimport {IZap} from \\\"contracts/lpaccount/Imports.sol\\\";\\nimport {\\n    IAssetAllocation,\\n    IERC20,\\n    IDetailedERC20\\n} from \\\"contracts/common/Imports.sol\\\";\\nimport {SafeERC20} from \\\"contracts/libraries/Imports.sol\\\";\\nimport {\\n    ILiquidityGauge,\\n    ITokenMinter\\n} from \\\"contracts/protocols/curve/common/interfaces/Imports.sol\\\";\\nimport {CurveZapBase} from \\\"contracts/protocols/curve/common/CurveZapBase.sol\\\";\\n\\nabstract contract CurveGaugeZapBase is IZap, CurveZapBase {\\n    using SafeERC20 for IERC20;\\n\\n    address internal constant MINTER_ADDRESS =\\n        0xd061D61a4d941c39E5453435B6345Dc261C2fcE0;\\n\\n    address internal immutable LP_ADDRESS;\\n    address internal immutable GAUGE_ADDRESS;\\n\\n    constructor(\\n        address swapAddress,\\n        address lpAddress,\\n        address gaugeAddress,\\n        uint256 denominator,\\n        uint256 slippage,\\n        uint256 nCoins\\n    )\\n        public\\n        CurveZapBase(swapAddress, denominator, slippage, nCoins)\\n    // solhint-disable-next-line no-empty-blocks\\n    {\\n        LP_ADDRESS = lpAddress;\\n        GAUGE_ADDRESS = gaugeAddress;\\n    }\\n\\n    function _depositToGauge() internal override {\\n        ILiquidityGauge liquidityGauge = ILiquidityGauge(GAUGE_ADDRESS);\\n        uint256 lpBalance = IERC20(LP_ADDRESS).balanceOf(address(this));\\n        IERC20(LP_ADDRESS).safeApprove(GAUGE_ADDRESS, 0);\\n        IERC20(LP_ADDRESS).safeApprove(GAUGE_ADDRESS, lpBalance);\\n        liquidityGauge.deposit(lpBalance);\\n    }\\n\\n    function _withdrawFromGauge(uint256 amount)\\n        internal\\n        override\\n        returns (uint256)\\n    {\\n        ILiquidityGauge liquidityGauge = ILiquidityGauge(GAUGE_ADDRESS);\\n        liquidityGauge.withdraw(amount);\\n        //lpBalance\\n        return IERC20(LP_ADDRESS).balanceOf(address(this));\\n    }\\n\\n    function _claim() internal override {\\n        // claim CRV\\n        ITokenMinter(MINTER_ADDRESS).mint(GAUGE_ADDRESS);\\n\\n        // claim protocol-specific rewards\\n        _claimRewards();\\n    }\\n\\n    // solhint-disable-next-line no-empty-blocks\\n    function _claimRewards() internal virtual {}\\n}\\n\"\r\n    },\r\n    \"contracts/protocols/curve/common/CurveZapBase.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: BUSDL-1.1\\npragma solidity 0.6.11;\\npragma experimental ABIEncoderV2;\\n\\nimport {SafeMath, SafeERC20} from \\\"contracts/libraries/Imports.sol\\\";\\nimport {IZap} from \\\"contracts/lpaccount/Imports.sol\\\";\\nimport {\\n    IAssetAllocation,\\n    IDetailedERC20,\\n    IERC20\\n} from \\\"contracts/common/Imports.sol\\\";\\nimport {\\n    Curve3PoolUnderlyerConstants\\n} from \\\"contracts/protocols/curve/3pool/Constants.sol\\\";\\n\\nabstract contract CurveZapBase is Curve3PoolUnderlyerConstants, IZap {\\n    using SafeMath for uint256;\\n    using SafeERC20 for IERC20;\\n\\n    address internal constant CRV_ADDRESS =\\n        0xD533a949740bb3306d119CC777fa900bA034cd52;\\n\\n    address internal immutable SWAP_ADDRESS;\\n    uint256 internal immutable DENOMINATOR;\\n    uint256 internal immutable SLIPPAGE;\\n    uint256 internal immutable N_COINS;\\n\\n    constructor(\\n        address swapAddress,\\n        uint256 denominator,\\n        uint256 slippage,\\n        uint256 nCoins\\n    ) public {\\n        SWAP_ADDRESS = swapAddress;\\n        DENOMINATOR = denominator;\\n        SLIPPAGE = slippage;\\n        N_COINS = nCoins;\\n    }\\n\\n    /// @param amounts array of underlyer amounts\\n    function deployLiquidity(uint256[] calldata amounts) external override {\\n        require(amounts.length == N_COINS, \\\"INVALID_AMOUNTS\\\");\\n\\n        uint256 totalNormalizedDeposit = 0;\\n        for (uint256 i = 0; i < amounts.length; i++) {\\n            if (amounts[i] == 0) continue;\\n\\n            uint256 deposit = amounts[i];\\n            address underlyerAddress = _getCoinAtIndex(i);\\n            uint8 decimals = IDetailedERC20(underlyerAddress).decimals();\\n\\n            uint256 normalizedDeposit =\\n                deposit.mul(10**uint256(18)).div(10**uint256(decimals));\\n            totalNormalizedDeposit = totalNormalizedDeposit.add(\\n                normalizedDeposit\\n            );\\n\\n            IERC20(underlyerAddress).safeApprove(SWAP_ADDRESS, 0);\\n            IERC20(underlyerAddress).safeApprove(SWAP_ADDRESS, amounts[i]);\\n        }\\n\\n        uint256 minAmount =\\n            _calcMinAmount(totalNormalizedDeposit, _getVirtualPrice());\\n        _addLiquidity(amounts, minAmount);\\n        _depositToGauge();\\n    }\\n\\n    /**\\n     * @param amount LP token amount\\n     * @param index underlyer index\\n     */\\n    function unwindLiquidity(uint256 amount, uint8 index) external override {\\n        require(index < N_COINS, \\\"INVALID_INDEX\\\");\\n        uint256 lpBalance = _withdrawFromGauge(amount);\\n        address underlyerAddress = _getCoinAtIndex(index);\\n        uint8 decimals = IDetailedERC20(underlyerAddress).decimals();\\n        uint256 minAmount =\\n            _calcMinAmountUnderlyer(lpBalance, _getVirtualPrice(), decimals);\\n        _removeLiquidity(lpBalance, index, minAmount);\\n    }\\n\\n    function claim() external override {\\n        _claim();\\n    }\\n\\n    function sortedSymbols() public view override returns (string[] memory) {\\n        // N_COINS is not available as a public function\\n        // so we have to hardcode the number here\\n        string[] memory symbols = new string[](N_COINS);\\n        for (uint256 i = 0; i < symbols.length; i++) {\\n            address underlyerAddress = _getCoinAtIndex(i);\\n            symbols[i] = IDetailedERC20(underlyerAddress).symbol();\\n        }\\n        return symbols;\\n    }\\n\\n    function _getVirtualPrice() internal view virtual returns (uint256);\\n\\n    function _getCoinAtIndex(uint256 i) internal view virtual returns (address);\\n\\n    function _addLiquidity(uint256[] calldata amounts_, uint256 minAmount)\\n        internal\\n        virtual;\\n\\n    function _removeLiquidity(\\n        uint256 lpBalance,\\n        uint8 index,\\n        uint256 minAmount\\n    ) internal virtual;\\n\\n    function _depositToGauge() internal virtual;\\n\\n    function _withdrawFromGauge(uint256 amount)\\n        internal\\n        virtual\\n        returns (uint256);\\n\\n    function _claim() internal virtual;\\n\\n    /**\\n     * @dev normalizedDepositAmount the amount in same units as virtual price (18 decimals)\\n     * @dev virtualPrice the \\\"price\\\", in 18 decimals, per big token unit of the LP token\\n     * @return required minimum amount of LP token (in token wei)\\n     */\\n    function _calcMinAmount(\\n        uint256 normalizedDepositAmount,\\n        uint256 virtualPrice\\n    ) internal view returns (uint256) {\\n        uint256 idealLpTokenAmount =\\n            normalizedDepositAmount.mul(1e18).div(virtualPrice);\\n        // allow some slippage/MEV\\n        return\\n            idealLpTokenAmount.mul(DENOMINATOR.sub(SLIPPAGE)).div(DENOMINATOR);\\n    }\\n\\n    /**\\n     * @param lpTokenAmount the amount in the same units as Curve LP token (18 decimals)\\n     * @param virtualPrice the \\\"price\\\", in 18 decimals, per big token unit of the LP token\\n     * @param decimals the number of decimals for underlyer token\\n     * @return required minimum amount of underlyer (in token wei)\\n     */\\n    function _calcMinAmountUnderlyer(\\n        uint256 lpTokenAmount,\\n        uint256 virtualPrice,\\n        uint8 decimals\\n    ) internal view returns (uint256) {\\n        // TODO: grab LP Token decimals explicitly?\\n        uint256 normalizedUnderlyerAmount =\\n            lpTokenAmount.mul(virtualPrice).div(1e18);\\n        uint256 underlyerAmount =\\n            normalizedUnderlyerAmount.mul(10**uint256(decimals)).div(\\n                10**uint256(18)\\n            );\\n\\n        // allow some slippage/MEV\\n        return underlyerAmount.mul(DENOMINATOR.sub(SLIPPAGE)).div(DENOMINATOR);\\n    }\\n\\n    function _createErc20AllocationArray(uint256 extraAllocations)\\n        internal\\n        pure\\n        returns (IERC20[] memory)\\n    {\\n        IERC20[] memory allocations = new IERC20[](extraAllocations.add(4));\\n        allocations[0] = IERC20(CRV_ADDRESS);\\n        allocations[1] = IERC20(DAI_ADDRESS);\\n        allocations[2] = IERC20(USDC_ADDRESS);\\n        allocations[3] = IERC20(USDT_ADDRESS);\\n        return allocations;\\n    }\\n}\\n\"\r\n    },\r\n    \"contracts/protocols/curve/common/OldCurveAllocationBase2.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: BUSDL-1.1\\npragma solidity 0.6.11;\\npragma experimental ABIEncoderV2;\\n\\nimport {SafeMath} from \\\"contracts/libraries/Imports.sol\\\";\\nimport {IERC20} from \\\"contracts/common/Imports.sol\\\";\\nimport {ImmutableAssetAllocation} from \\\"contracts/tvl/Imports.sol\\\";\\n\\nimport {\\n    IOldStableSwap2,\\n    ILiquidityGauge\\n} from \\\"contracts/protocols/curve/common/interfaces/Imports.sol\\\";\\n\\n/**\\n * @title Periphery Contract for the Curve 3pool\\n * @author APY.Finance\\n * @notice This contract enables the APY.Finance system to retrieve the balance\\n * of an underlyer of a Curve LP token. The balance is used as part\\n * of the Chainlink computation of the deployed TVL.  The primary\\n * `getUnderlyerBalance` function is invoked indirectly when a\\n * Chainlink node calls `balanceOf` on the APYAssetAllocationRegistry.\\n */\\ncontract OldCurveAllocationBase2 {\\n    using SafeMath for uint256;\\n\\n    /**\\n     * @notice Returns the balance of an underlying token represented by\\n     * an account's LP token balance.\\n     * @param stableSwap the liquidity pool comprised of multiple underlyers\\n     * @param gauge the staking contract for the LP tokens\\n     * @param lpToken the LP token representing the share of the pool\\n     * @param coin the index indicating which underlyer\\n     * @return balance\\n     */\\n    function getUnderlyerBalance(\\n        address account,\\n        IOldStableSwap2 stableSwap,\\n        ILiquidityGauge gauge,\\n        IERC20 lpToken,\\n        int128 coin\\n    ) public view returns (uint256 balance) {\\n        require(address(stableSwap) != address(0), \\\"INVALID_STABLESWAP\\\");\\n        require(address(gauge) != address(0), \\\"INVALID_GAUGE\\\");\\n        require(address(lpToken) != address(0), \\\"INVALID_LP_TOKEN\\\");\\n\\n        uint256 poolBalance = getPoolBalance(stableSwap, coin);\\n        (uint256 lpTokenBalance, uint256 lpTokenSupply) =\\n            getLpTokenShare(account, stableSwap, gauge, lpToken);\\n\\n        balance = lpTokenBalance.mul(poolBalance).div(lpTokenSupply);\\n    }\\n\\n    function getPoolBalance(IOldStableSwap2 stableSwap, int128 coin)\\n        public\\n        view\\n        returns (uint256)\\n    {\\n        require(address(stableSwap) != address(0), \\\"INVALID_STABLESWAP\\\");\\n        return stableSwap.balances(coin);\\n    }\\n\\n    function getLpTokenShare(\\n        address account,\\n        IOldStableSwap2 stableSwap,\\n        ILiquidityGauge gauge,\\n        IERC20 lpToken\\n    ) public view returns (uint256 balance, uint256 totalSupply) {\\n        require(address(stableSwap) != address(0), \\\"INVALID_STABLESWAP\\\");\\n        require(address(gauge) != address(0), \\\"INVALID_GAUGE\\\");\\n        require(address(lpToken) != address(0), \\\"INVALID_LP_TOKEN\\\");\\n\\n        totalSupply = lpToken.totalSupply();\\n        balance = lpToken.balanceOf(account);\\n        balance = balance.add(gauge.balanceOf(account));\\n    }\\n}\\n\"\r\n    },\r\n    \"contracts/protocols/curve/common/OldCurveAllocationBase4.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: BUSDL-1.1\\npragma solidity 0.6.11;\\npragma experimental ABIEncoderV2;\\n\\nimport {SafeMath} from \\\"contracts/libraries/Imports.sol\\\";\\nimport {IERC20} from \\\"contracts/common/Imports.sol\\\";\\nimport {ImmutableAssetAllocation} from \\\"contracts/tvl/Imports.sol\\\";\\n\\nimport {\\n    IOldStableSwap4,\\n    ILiquidityGauge\\n} from \\\"contracts/protocols/curve/common/interfaces/Imports.sol\\\";\\n\\n/**\\n * @title Periphery Contract for the Curve 3pool\\n * @author APY.Finance\\n * @notice This contract enables the APY.Finance system to retrieve the balance\\n * of an underlyer of a Curve LP token. The balance is used as part\\n * of the Chainlink computation of the deployed TVL.  The primary\\n * `getUnderlyerBalance` function is invoked indirectly when a\\n * Chainlink node calls `balanceOf` on the APYAssetAllocationRegistry.\\n */\\ncontract OldCurveAllocationBase4 {\\n    using SafeMath for uint256;\\n\\n    /**\\n     * @notice Returns the balance of an underlying token represented by\\n     * an account's LP token balance.\\n     * @param stableSwap the liquidity pool comprised of multiple underlyers\\n     * @param gauge the staking contract for the LP tokens\\n     * @param lpToken the LP token representing the share of the pool\\n     * @param coin the index indicating which underlyer\\n     * @return balance\\n     */\\n    function getUnderlyerBalance(\\n        address account,\\n        IOldStableSwap4 stableSwap,\\n        ILiquidityGauge gauge,\\n        IERC20 lpToken,\\n        int128 coin\\n    ) public view returns (uint256 balance) {\\n        require(address(stableSwap) != address(0), \\\"INVALID_STABLESWAP\\\");\\n        require(address(gauge) != address(0), \\\"INVALID_GAUGE\\\");\\n        require(address(lpToken) != address(0), \\\"INVALID_LP_TOKEN\\\");\\n\\n        uint256 poolBalance = getPoolBalance(stableSwap, coin);\\n        (uint256 lpTokenBalance, uint256 lpTokenSupply) =\\n            getLpTokenShare(account, stableSwap, gauge, lpToken);\\n\\n        balance = lpTokenBalance.mul(poolBalance).div(lpTokenSupply);\\n    }\\n\\n    function getPoolBalance(IOldStableSwap4 stableSwap, int128 coin)\\n        public\\n        view\\n        returns (uint256)\\n    {\\n        require(address(stableSwap) != address(0), \\\"INVALID_STABLESWAP\\\");\\n        return stableSwap.balances(coin);\\n    }\\n\\n    function getLpTokenShare(\\n        address account,\\n        IOldStableSwap4 stableSwap,\\n        ILiquidityGauge gauge,\\n        IERC20 lpToken\\n    ) public view returns (uint256 balance, uint256 totalSupply) {\\n        require(address(stableSwap) != address(0), \\\"INVALID_STABLESWAP\\\");\\n        require(address(gauge) != address(0), \\\"INVALID_GAUGE\\\");\\n        require(address(lpToken) != address(0), \\\"INVALID_LP_TOKEN\\\");\\n\\n        totalSupply = lpToken.totalSupply();\\n        balance = lpToken.balanceOf(account);\\n        balance = balance.add(gauge.balanceOf(account));\\n    }\\n}\\n\"\r\n    },\r\n    \"contracts/protocols/curve/common/TestCurveZap.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: BUSDL-1.1\\npragma solidity 0.6.11;\\npragma experimental ABIEncoderV2;\\n\\nimport {IERC20} from \\\"@openzeppelin/contracts/token/ERC20/IERC20.sol\\\";\\nimport {IAssetAllocation} from \\\"contracts/common/Imports.sol\\\";\\nimport {\\n    CurveGaugeZapBase\\n} from \\\"contracts/protocols/curve/common/CurveGaugeZapBase.sol\\\";\\n\\ncontract TestCurveZap is CurveGaugeZapBase {\\n    string public constant override NAME = \\\"TestCurveZap\\\";\\n\\n    address[] private _underlyers;\\n\\n    constructor(\\n        address swapAddress,\\n        address lpTokenAddress,\\n        address liquidityGaugeAddress,\\n        uint256 denominator,\\n        uint256 slippage,\\n        uint256 numOfCoins\\n    )\\n        public\\n        CurveGaugeZapBase(\\n            swapAddress,\\n            lpTokenAddress,\\n            liquidityGaugeAddress,\\n            denominator,\\n            slippage,\\n            numOfCoins\\n        ) // solhint-disable-next-line no-empty-blocks\\n    {}\\n\\n    function setUnderlyers(address[] calldata underlyers) external {\\n        _underlyers = underlyers;\\n    }\\n\\n    function getSwapAddress() external view returns (address) {\\n        return SWAP_ADDRESS;\\n    }\\n\\n    function getLpTokenAddress() external view returns (address) {\\n        return address(LP_ADDRESS);\\n    }\\n\\n    function getGaugeAddress() external view returns (address) {\\n        return GAUGE_ADDRESS;\\n    }\\n\\n    function getDenominator() external view returns (uint256) {\\n        return DENOMINATOR;\\n    }\\n\\n    function getSlippage() external view returns (uint256) {\\n        return SLIPPAGE;\\n    }\\n\\n    function getNumberOfCoins() external view returns (uint256) {\\n        return N_COINS;\\n    }\\n\\n    function calcMinAmount(uint256 totalAmount, uint256 virtualPrice)\\n        external\\n        view\\n        returns (uint256)\\n    {\\n        return _calcMinAmount(totalAmount, virtualPrice);\\n    }\\n\\n    function calcMinAmountUnderlyer(\\n        uint256 totalAmount,\\n        uint256 virtualPrice,\\n        uint8 decimals\\n    ) external view returns (uint256) {\\n        return _calcMinAmountUnderlyer(totalAmount, virtualPrice, decimals);\\n    }\\n\\n    function assetAllocations() public view override returns (string[] memory) {\\n        string[] memory allocationNames = new string[](1);\\n        return allocationNames;\\n    }\\n\\n    function erc20Allocations() public view override returns (IERC20[] memory) {\\n        IERC20[] memory allocations = new IERC20[](0);\\n        return allocations;\\n    }\\n\\n    function _getVirtualPrice() internal view override returns (uint256) {\\n        return 1;\\n    }\\n\\n    function _getCoinAtIndex(uint256 i)\\n        internal\\n        view\\n        override\\n        returns (address)\\n    {\\n        return _underlyers[i];\\n    }\\n\\n    function _addLiquidity(uint256[] calldata amounts, uint256 minAmount)\\n        internal\\n        override\\n    // solhint-disable-next-line no-empty-blocks\\n    {\\n\\n    }\\n\\n    function _removeLiquidity(\\n        uint256 lpBalance,\\n        uint8 index,\\n        uint256 minAmount // solhint-disable-next-line no-empty-blocks\\n    ) internal override {}\\n}\\n\"\r\n    },\r\n    \"contracts/protocols/curve/susdv2/Allocation.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: BUSDL-1.1\\npragma solidity 0.6.11;\\npragma experimental ABIEncoderV2;\\n\\nimport {IERC20} from \\\"contracts/common/Imports.sol\\\";\\nimport {SafeMath} from \\\"contracts/libraries/Imports.sol\\\";\\nimport {ImmutableAssetAllocation} from \\\"contracts/tvl/Imports.sol\\\";\\n\\nimport {\\n    IOldStableSwap4,\\n    ILiquidityGauge\\n} from \\\"contracts/protocols/curve/common/interfaces/Imports.sol\\\";\\n\\nimport {\\n    OldCurveAllocationBase4\\n} from \\\"contracts/protocols/curve/common/Imports.sol\\\";\\n\\nimport {CurveSusdV2Constants} from \\\"./Constants.sol\\\";\\n\\ncontract CurveSusdV2Allocation is\\n    OldCurveAllocationBase4,\\n    ImmutableAssetAllocation,\\n    CurveSusdV2Constants\\n{\\n    function balanceOf(address account, uint8 tokenIndex)\\n        public\\n        view\\n        override\\n        returns (uint256)\\n    {\\n        return\\n            super.getUnderlyerBalance(\\n                account,\\n                IOldStableSwap4(STABLE_SWAP_ADDRESS),\\n                ILiquidityGauge(LIQUIDITY_GAUGE_ADDRESS),\\n                IERC20(LP_TOKEN_ADDRESS),\\n                tokenIndex\\n            );\\n    }\\n\\n    function _getTokenData()\\n        internal\\n        pure\\n        override\\n        returns (TokenData[] memory)\\n    {\\n        TokenData[] memory tokens = new TokenData[](4);\\n        tokens[0] = TokenData(DAI_ADDRESS, \\\"DAI\\\", 18);\\n        tokens[1] = TokenData(USDC_ADDRESS, \\\"USDC\\\", 6);\\n        tokens[2] = TokenData(USDT_ADDRESS, \\\"USDT\\\", 6);\\n        tokens[3] = TokenData(SUSD_ADDRESS, \\\"sUSD\\\", 18);\\n        return tokens;\\n    }\\n}\\n\"\r\n    },\r\n    \"contracts/protocols/curve/saave/Constants.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: BUSDL-1.1\\npragma solidity 0.6.11;\\n\\nimport {INameIdentifier} from \\\"contracts/common/Imports.sol\\\";\\nimport {\\n    Curve3PoolUnderlyerConstants\\n} from \\\"contracts/protocols/curve/3pool/Constants.sol\\\";\\n\\nabstract contract CurveSaaveConstants is\\n    Curve3PoolUnderlyerConstants,\\n    INameIdentifier\\n{\\n    string public constant override NAME = \\\"curve-saave\\\";\\n\\n    address public constant STABLE_SWAP_ADDRESS =\\n        0xEB16Ae0052ed37f479f7fe63849198Df1765a733;\\n    address public constant LP_TOKEN_ADDRESS =\\n        0x02d341CcB60fAaf662bC0554d13778015d1b285C;\\n    address public constant LIQUIDITY_GAUGE_ADDRESS =\\n        0x462253b8F74B72304c145DB0e4Eebd326B22ca39;\\n\\n    address public constant STKAAVE_ADDRESS =\\n        0x4da27a545c0c5B758a6BA100e3a049001de870f5;\\n    address public constant ADAI_ADDRESS =\\n        0x028171bCA77440897B824Ca71D1c56caC55b68A3;\\n    address public constant ASUSD_ADDRESS =\\n        0x6C5024Cd4F8A59110119C56f8933403A539555EB;\\n}\\n\"\r\n    },\r\n    \"contracts/protocols/curve/saave/Zap.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: BUSDL-1.1\\npragma solidity 0.6.11;\\npragma experimental ABIEncoderV2;\\n\\nimport {IERC20} from \\\"@openzeppelin/contracts/token/ERC20/IERC20.sol\\\";\\nimport {IAssetAllocation} from \\\"contracts/common/Imports.sol\\\";\\nimport {\\n    IStableSwap2 as IStableSwap,\\n    ILiquidityGauge\\n} from \\\"contracts/protocols/curve/common/interfaces/Imports.sol\\\";\\nimport {CurveSaaveConstants} from \\\"./Constants.sol\\\";\\nimport {CurveGaugeZapBase} from \\\"contracts/protocols/curve/common/Imports.sol\\\";\\n\\ncontract SAavePoolZap is CurveGaugeZapBase, CurveSaaveConstants {\\n    string internal constant AAVE_ALLOCATION = \\\"aave\\\";\\n\\n    constructor()\\n        public\\n        CurveGaugeZapBase(\\n            STABLE_SWAP_ADDRESS,\\n            LP_TOKEN_ADDRESS,\\n            LIQUIDITY_GAUGE_ADDRESS,\\n            10000,\\n            100,\\n            2\\n        ) // solhint-disable-next-line no-empty-blocks\\n    {}\\n\\n    function assetAllocations() public view override returns (string[] memory) {\\n        string[] memory allocationNames = new string[](2);\\n        allocationNames[0] = NAME;\\n        allocationNames[1] = AAVE_ALLOCATION;\\n        return allocationNames;\\n    }\\n\\n    function erc20Allocations() public view override returns (IERC20[] memory) {\\n        IERC20[] memory allocations = _createErc20AllocationArray(0);\\n        return allocations;\\n    }\\n\\n    function _getVirtualPrice() internal view override returns (uint256) {\\n        return IStableSwap(SWAP_ADDRESS).get_virtual_price();\\n    }\\n\\n    function _getCoinAtIndex(uint256 i)\\n        internal\\n        view\\n        override\\n        returns (address)\\n    {\\n        return IStableSwap(SWAP_ADDRESS).coins(i);\\n    }\\n\\n    function _addLiquidity(uint256[] calldata amounts, uint256 minAmount)\\n        internal\\n        override\\n    {\\n        IStableSwap(SWAP_ADDRESS).add_liquidity(\\n            [amounts[0], amounts[1]],\\n            minAmount\\n        );\\n    }\\n\\n    function _removeLiquidity(\\n        uint256 lpBalance,\\n        uint8 index,\\n        uint256 minAmount\\n    ) internal override {\\n        require(index < 2, \\\"INVALID_INDEX\\\");\\n        IStableSwap(SWAP_ADDRESS).remove_liquidity_one_coin(\\n            lpBalance,\\n            index,\\n            minAmount\\n        );\\n    }\\n\\n    /**\\n     * @dev claim protocol-specific rewards; stkAAVE in this case.\\n     *      CRV rewards are always claimed through the minter, in\\n     *      the `CurveGaugeZapBase` implementation.\\n     */\\n    function _claimRewards() internal override {\\n        ILiquidityGauge liquidityGauge = ILiquidityGauge(GAUGE_ADDRESS);\\n        liquidityGauge.claim_rewards();\\n    }\\n}\\n\"\r\n    },\r\n    \"contracts/protocols/curve/ust/Constants.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: BUSDL-1.1\\npragma solidity 0.6.11;\\n\\nimport {IERC20, INameIdentifier} from \\\"contracts/common/Imports.sol\\\";\\nimport {\\n    ILiquidityGauge\\n} from \\\"contracts/protocols/curve/common/interfaces/Imports.sol\\\";\\nimport {IMetaPool} from \\\"contracts/protocols/curve/metapool/Imports.sol\\\";\\nimport {IOldDepositor} from \\\"contracts/protocols/curve/metapool/Imports.sol\\\";\\n\\nabstract contract CurveUstConstants is INameIdentifier {\\n    string public constant override NAME = \\\"curve-ust\\\";\\n\\n    // sometimes a metapool is its own LP token; otherwise,\\n    // you can obtain from `token` attribute\\n    IERC20 public constant LP_TOKEN =\\n        IERC20(0x94e131324b6054c0D789b190b2dAC504e4361b53);\\n\\n    // metapool primary underlyer\\n    IERC20 public constant PRIMARY_UNDERLYER =\\n        IERC20(0xa47c8bf37f92aBed4A126BDA807A7b7498661acD);\\n\\n    ILiquidityGauge public constant LIQUIDITY_GAUGE =\\n        ILiquidityGauge(0x3B7020743Bc2A4ca9EaF9D0722d42E20d6935855);\\n\\n    IMetaPool public constant META_POOL =\\n        IMetaPool(0x890f4e345B1dAED0367A877a1612f86A1f86985f);\\n\\n    IOldDepositor public constant DEPOSITOR =\\n        IOldDepositor(0xB0a0716841F2Fc03fbA72A891B8Bb13584F52F2d);\\n}\\n\"\r\n    },\r\n    \"contracts/protocols/curve/metapool/Imports.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: BUSDL-1.1\\npragma solidity 0.6.11;\\n\\nimport {IMetaPool} from \\\"./IMetaPool.sol\\\";\\nimport {IOldDepositor} from \\\"./IOldDepositor.sol\\\";\\nimport {IDepositor} from \\\"./IDepositor.sol\\\";\\nimport {DepositorConstants} from \\\"./Constants.sol\\\";\\nimport {MetaPoolAllocationBase} from \\\"./MetaPoolAllocationBase.sol\\\";\\nimport {MetaPoolOldDepositorZap} from \\\"./MetaPoolOldDepositorZap.sol\\\";\\nimport {MetaPoolDepositorZap} from \\\"./MetaPoolDepositorZap.sol\\\";\\n\"\r\n    },\r\n    \"contracts/protocols/curve/metapool/IMetaPool.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: BUSDL-1.1\\npragma solidity 0.6.11;\\n\\nimport \\\"@openzeppelin/contracts/math/SafeMath.sol\\\";\\nimport \\\"@openzeppelin/contracts/token/ERC20/IERC20.sol\\\";\\n\\n/**\\n * @notice the Curve metapool contract\\n * @dev A metapool is sometimes its own LP token\\n */\\ninterface IMetaPool is IERC20 {\\n    /// @dev 1st coin is the protocol token, 2nd is the Curve base pool\\n    function balances(uint256 coin) external view returns (uint256);\\n\\n    /// @dev 1st coin is the protocol token, 2nd is the Curve base pool\\n    function coins(uint256 coin) external view returns (address);\\n\\n    /// @dev the number of coins is hard-coded in curve contracts\\n    // solhint-disable-next-line\\n    function add_liquidity(uint256[2] memory amounts, uint256 min_mint_amount)\\n        external;\\n\\n    /// @dev the number of coins is hard-coded in curve contracts\\n    // solhint-disable-next-line\\n    function remove_liquidity(uint256 _amount, uint256[3] memory min_amounts)\\n        external;\\n\\n    // solhint-disable-next-line\\n    function remove_liquidity_one_coin(\\n        uint256 tokenAmount,\\n        int128 tokenIndex,\\n        uint256 minAmount\\n    ) external;\\n\\n    // solhint-disable-next-line\\n    function get_virtual_price() external view returns (uint256);\\n}\\n\"\r\n    },\r\n    \"contracts/protocols/curve/metapool/IOldDepositor.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: BUSDL-1.1\\npragma solidity 0.6.11;\\n\\ninterface IOldDepositor {\\n    // solhint-disable\\n    function add_liquidity(uint256[4] calldata amounts, uint256 min_mint_amount)\\n        external\\n        returns (uint256);\\n\\n    function remove_liquidity_one_coin(\\n        uint256 _token_amount,\\n        int128 i,\\n        uint256 _min_amount\\n    ) external returns (uint256);\\n\\n    function coins(uint256 i) external view returns (address);\\n\\n    function base_coins(uint256 i) external view returns (address);\\n    // solhint-enable\\n}\\n\"\r\n    },\r\n    \"contracts/protocols/curve/metapool/IDepositor.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: BUSDL-1.1\\npragma solidity 0.6.11;\\n\\ninterface IDepositor {\\n    // solhint-disable\\n    function add_liquidity(\\n        address _pool,\\n        uint256[4] calldata _deposit_amounts,\\n        uint256 _min_mint_amount\\n    ) external returns (uint256);\\n\\n    // solhint-enable\\n\\n    // solhint-disable\\n    function remove_liquidity_one_coin(\\n        address _pool,\\n        uint256 _burn_amount,\\n        int128 i,\\n        uint256 _min_amounts\\n    ) external returns (uint256);\\n    // solhint-enable\\n}\\n\"\r\n    },\r\n    \"contracts/protocols/curve/metapool/Constants.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: BUSDL-1.1\\npragma solidity 0.6.11;\\n\\nimport {\\n    IStableSwap\\n} from \\\"contracts/protocols/curve/common/interfaces/Imports.sol\\\";\\nimport {IDepositor} from \\\"./IDepositor.sol\\\";\\n\\nabstract contract DepositorConstants {\\n    IStableSwap public constant BASE_POOL =\\n        IStableSwap(0xbEbc44782C7dB0a1A60Cb6fe97d0b483032FF1C7);\\n\\n    // A depositor \\\"zap\\\" contract for metapools\\n    IDepositor public constant DEPOSITOR =\\n        IDepositor(0xA79828DF1850E8a3A3064576f380D90aECDD3359);\\n}\\n\"\r\n    },\r\n    \"contracts/protocols/curve/metapool/MetaPoolAllocationBase.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: UNLICENSED\\npragma solidity 0.6.11;\\n\\nimport {SafeMath} from \\\"contracts/libraries/Imports.sol\\\";\\nimport {IERC20} from \\\"contracts/common/Imports.sol\\\";\\n\\nimport {\\n    ILiquidityGauge\\n} from \\\"contracts/protocols/curve/common/interfaces/Imports.sol\\\";\\n\\nimport {IMetaPool} from \\\"./IMetaPool.sol\\\";\\n\\nimport {\\n    Curve3PoolAllocation\\n} from \\\"contracts/protocols/curve/3pool/Allocation.sol\\\";\\n\\nimport {ImmutableAssetAllocation} from \\\"contracts/tvl/Imports.sol\\\";\\nimport {\\n    Curve3PoolUnderlyerConstants\\n} from \\\"contracts/protocols/curve/3pool/Constants.sol\\\";\\n\\n/**\\n * @title Periphery Contract for a Curve metapool\\n * @author APY.Finance\\n * @notice This contract enables the APY.Finance system to retrieve the balance\\n *         of an underlyer of a Curve LP token. The balance is used as part\\n *         of the Chainlink computation of the deployed TVL.  The primary\\n *         `getUnderlyerBalance` function is invoked indirectly when a\\n *         Chainlink node calls `balanceOf` on the APYAssetAllocationRegistry.\\n */\\nabstract contract MetaPoolAllocationBase is\\n    ImmutableAssetAllocation,\\n    Curve3PoolUnderlyerConstants\\n{\\n    using SafeMath for uint256;\\n\\n    /// @dev all existing Curve metapools are paired with 3Pool\\n    Curve3PoolAllocation public immutable curve3PoolAllocation;\\n\\n    constructor(address curve3PoolAllocation_) public {\\n        curve3PoolAllocation = Curve3PoolAllocation(curve3PoolAllocation_);\\n    }\\n\\n    /**\\n     * @notice Returns the balance of an underlying token represented by\\n     *         an account's LP token balance.\\n     * @param metaPool the liquidity pool comprised of multiple underlyers\\n     * @param gauge the staking contract for the LP tokens\\n     * @param coin the index indicating which underlyer\\n     * @return balance\\n     */\\n    function getUnderlyerBalance(\\n        address account,\\n        IMetaPool metaPool,\\n        ILiquidityGauge gauge,\\n        IERC20 lpToken,\\n        uint256 coin\\n    ) public view returns (uint256 balance) {\\n        require(address(metaPool) != address(0), \\\"INVALID_POOL\\\");\\n        require(address(gauge) != address(0), \\\"INVALID_GAUGE\\\");\\n        require(address(lpToken) != address(0), \\\"INVALID_LP_TOKEN\\\");\\n\\n        uint256 poolBalance = getPoolBalance(metaPool, coin);\\n        (uint256 lpTokenBalance, uint256 lpTokenSupply) =\\n            getLpTokenShare(account, metaPool, gauge, lpToken);\\n\\n        balance = lpTokenBalance.mul(poolBalance).div(lpTokenSupply);\\n    }\\n\\n    function getPoolBalance(IMetaPool metaPool, uint256 coin)\\n        public\\n        view\\n        returns (uint256)\\n    {\\n        require(address(metaPool) != address(0), \\\"INVALID_POOL\\\");\\n        require(coin < 256, \\\"INVALID_COIN\\\");\\n        if (coin == 0) {\\n            return metaPool.balances(0);\\n        }\\n        coin -= 1;\\n        uint256 balance =\\n            curve3PoolAllocation.balanceOf(address(metaPool), uint8(coin));\\n        // renormalize using the pool's tracked 3Crv balance\\n        IERC20 baseLpToken = IERC20(metaPool.coins(1));\\n        uint256 adjustedBalance =\\n            balance.mul(metaPool.balances(1)).div(\\n                baseLpToken.balanceOf(address(metaPool))\\n            );\\n        return adjustedBalance;\\n    }\\n\\n    function getLpTokenShare(\\n        address account,\\n        IMetaPool metaPool,\\n        ILiquidityGauge gauge,\\n        IERC20 lpToken\\n    ) public view returns (uint256 balance, uint256 totalSupply) {\\n        require(address(metaPool) != address(0), \\\"INVALID_POOL\\\");\\n        require(address(gauge) != address(0), \\\"INVALID_GAUGE\\\");\\n        require(address(lpToken) != address(0), \\\"INVALID_LP_TOKEN\\\");\\n\\n        totalSupply = lpToken.totalSupply();\\n        balance = lpToken.balanceOf(account);\\n        balance = balance.add(gauge.balanceOf(account));\\n    }\\n\\n    function _getBasePoolTokenData(\\n        address primaryUnderlyer,\\n        string memory symbol,\\n        uint8 decimals\\n    ) internal pure returns (TokenData[] memory) {\\n        TokenData[] memory tokens = new TokenData[](4);\\n        tokens[0] = TokenData(primaryUnderlyer, symbol, decimals);\\n        tokens[1] = TokenData(DAI_ADDRESS, \\\"DAI\\\", 18);\\n        tokens[2] = TokenData(USDC_ADDRESS, \\\"USDC\\\", 6);\\n        tokens[3] = TokenData(USDT_ADDRESS, \\\"USDT\\\", 6);\\n        return tokens;\\n    }\\n}\\n\"\r\n    },\r\n    \"contracts/protocols/curve/metapool/MetaPoolOldDepositorZap.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: BUSDL-1.1\\npragma solidity 0.6.11;\\npragma experimental ABIEncoderV2;\\n\\nimport {IERC20} from \\\"@openzeppelin/contracts/token/ERC20/IERC20.sol\\\";\\nimport {IAssetAllocation} from \\\"contracts/common/Imports.sol\\\";\\nimport {IMetaPool} from \\\"./IMetaPool.sol\\\";\\nimport {IOldDepositor} from \\\"./IOldDepositor.sol\\\";\\nimport {CurveGaugeZapBase} from \\\"contracts/protocols/curve/common/Imports.sol\\\";\\n\\nabstract contract MetaPoolOldDepositorZap is CurveGaugeZapBase {\\n    IOldDepositor internal immutable _DEPOSITOR;\\n    IMetaPool internal immutable _META_POOL;\\n\\n    constructor(\\n        IOldDepositor depositor,\\n        IMetaPool metapool,\\n        address lpAddress,\\n        address gaugeAddress,\\n        uint256 denominator,\\n        uint256 slippage\\n    )\\n        public\\n        CurveGaugeZapBase(\\n            address(depositor),\\n            lpAddress,\\n            gaugeAddress,\\n            denominator,\\n            slippage,\\n            4\\n        )\\n    {\\n        _DEPOSITOR = depositor;\\n        _META_POOL = metapool;\\n    }\\n\\n    function _addLiquidity(uint256[] calldata amounts, uint256 minAmount)\\n        internal\\n        override\\n    {\\n        _DEPOSITOR.add_liquidity(\\n            [amounts[0], amounts[1], amounts[2], amounts[3]],\\n            minAmount\\n        );\\n    }\\n\\n    function _removeLiquidity(\\n        uint256 lpBalance,\\n        uint8 index,\\n        uint256 minAmount\\n    ) internal override {\\n        IERC20(LP_ADDRESS).safeApprove(address(_DEPOSITOR), 0);\\n        IERC20(LP_ADDRESS).safeApprove(address(_DEPOSITOR), lpBalance);\\n        _DEPOSITOR.remove_liquidity_one_coin(lpBalance, index, minAmount);\\n    }\\n\\n    function _getVirtualPrice() internal view override returns (uint256) {\\n        return _META_POOL.get_virtual_price();\\n    }\\n\\n    function _getCoinAtIndex(uint256 i)\\n        internal\\n        view\\n        override\\n        returns (address)\\n    {\\n        if (i == 0) {\\n            return _DEPOSITOR.coins(0);\\n        } else {\\n            return _DEPOSITOR.base_coins(i.sub(1));\\n        }\\n    }\\n}\\n\"\r\n    },\r\n    \"contracts/protocols/curve/metapool/MetaPoolDepositorZap.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: BUSDL-1.1\\npragma solidity 0.6.11;\\npragma experimental ABIEncoderV2;\\n\\nimport {IERC20} from \\\"@openzeppelin/contracts/token/ERC20/IERC20.sol\\\";\\nimport {IAssetAllocation} from \\\"contracts/common/Imports.sol\\\";\\nimport {IMetaPool} from \\\"./IMetaPool.sol\\\";\\nimport {DepositorConstants} from \\\"./Constants.sol\\\";\\nimport {CurveGaugeZapBase} from \\\"contracts/protocols/curve/common/Imports.sol\\\";\\n\\nabstract contract MetaPoolDepositorZap is\\n    CurveGaugeZapBase,\\n    DepositorConstants\\n{\\n    IMetaPool internal immutable _META_POOL;\\n\\n    constructor(\\n        IMetaPool metapool,\\n        address lpAddress,\\n        address gaugeAddress,\\n        uint256 denominator,\\n        uint256 slippage\\n    )\\n        public\\n        CurveGaugeZapBase(\\n            address(DEPOSITOR),\\n            lpAddress,\\n            gaugeAddress,\\n            denominator,\\n            slippage,\\n            4\\n        )\\n    {\\n        _META_POOL = metapool;\\n    }\\n\\n    function _addLiquidity(uint256[] calldata amounts, uint256 minAmount)\\n        internal\\n        override\\n    {\\n        DEPOSITOR.add_liquidity(\\n            address(_META_POOL),\\n            [amounts[0], amounts[1], amounts[2], amounts[3]],\\n            minAmount\\n        );\\n    }\\n\\n    function _removeLiquidity(\\n        uint256 lpBalance,\\n        uint8 index,\\n        uint256 minAmount\\n    ) internal override {\\n        IERC20(LP_ADDRESS).safeApprove(address(DEPOSITOR), 0);\\n        IERC20(LP_ADDRESS).safeApprove(address(DEPOSITOR), lpBalance);\\n        DEPOSITOR.remove_liquidity_one_coin(\\n            address(_META_POOL),\\n            lpBalance,\\n            index,\\n            minAmount\\n        );\\n    }\\n\\n    function _getVirtualPrice() internal view override returns (uint256) {\\n        return _META_POOL.get_virtual_price();\\n    }\\n\\n    function _getCoinAtIndex(uint256 i)\\n        internal\\n        view\\n        override\\n        returns (address)\\n    {\\n        if (i == 0) {\\n            return _META_POOL.coins(0);\\n        } else {\\n            return BASE_POOL.coins(i.sub(1));\\n        }\\n    }\\n}\\n\"\r\n    },\r\n    \"contracts/protocols/curve/3pool/Allocation.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: BUSDL-1.1\\npragma solidity 0.6.11;\\npragma experimental ABIEncoderV2;\\n\\nimport {IERC20} from \\\"contracts/common/Imports.sol\\\";\\nimport {SafeMath} from \\\"contracts/libraries/Imports.sol\\\";\\nimport {ImmutableAssetAllocation} from \\\"contracts/tvl/Imports.sol\\\";\\n\\nimport {\\n    IStableSwap,\\n    ILiquidityGauge\\n} from \\\"contracts/protocols/curve/common/interfaces/Imports.sol\\\";\\n\\nimport {\\n    CurveAllocationBase\\n} from \\\"contracts/protocols/curve/common/Imports.sol\\\";\\n\\nimport {Curve3PoolConstants} from \\\"./Constants.sol\\\";\\n\\ncontract Curve3PoolAllocation is\\n    CurveAllocationBase,\\n    ImmutableAssetAllocation,\\n    Curve3PoolConstants\\n{\\n    function balanceOf(address account, uint8 tokenIndex)\\n        public\\n        view\\n        override\\n        returns (uint256)\\n    {\\n        return\\n            super.getUnderlyerBalance(\\n                account,\\n                IStableSwap(STABLE_SWAP_ADDRESS),\\n                ILiquidityGauge(LIQUIDITY_GAUGE_ADDRESS),\\n                IERC20(LP_TOKEN_ADDRESS),\\n                uint256(tokenIndex)\\n            );\\n    }\\n\\n    function _getTokenData()\\n        internal\\n        pure\\n        override\\n        returns (TokenData[] memory)\\n    {\\n        TokenData[] memory tokens = new TokenData[](3);\\n        tokens[0] = TokenData(DAI_ADDRESS, \\\"DAI\\\", 18);\\n        tokens[1] = TokenData(USDC_ADDRESS, \\\"USDC\\\", 6);\\n        tokens[2] = TokenData(USDT_ADDRESS, \\\"USDT\\\", 6);\\n        return tokens;\\n    }\\n}\\n\"\r\n    },\r\n    \"contracts/protocols/curve/ust/Zap.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: BUSDL-1.1\\npragma solidity 0.6.11;\\npragma experimental ABIEncoderV2;\\n\\nimport {IERC20} from \\\"@openzeppelin/contracts/token/ERC20/IERC20.sol\\\";\\nimport {IAssetAllocation} from \\\"contracts/common/Imports.sol\\\";\\nimport {CurveUstConstants} from \\\"./Constants.sol\\\";\\nimport {\\n    MetaPoolOldDepositorZap\\n} from \\\"contracts/protocols/curve/metapool/Imports.sol\\\";\\n\\ncontract UstPoolZap is MetaPoolOldDepositorZap, CurveUstConstants {\\n    constructor()\\n        public\\n        MetaPoolOldDepositorZap(\\n            DEPOSITOR,\\n            META_POOL,\\n            address(LP_TOKEN),\\n            address(LIQUIDITY_GAUGE),\\n            10000,\\n            100\\n        ) // solhint-disable-next-line no-empty-blocks\\n    {}\\n\\n    function assetAllocations() public view override returns (string[] memory) {\\n        string[] memory allocationNames = new string[](1);\\n        allocationNames[0] = NAME;\\n        return allocationNames;\\n    }\\n\\n    function erc20Allocations() public view override returns (IERC20[] memory) {\\n        IERC20[] memory allocations = _createErc20AllocationArray(1);\\n        allocations[4] = PRIMARY_UNDERLYER;\\n        return allocations;\\n    }\\n}\\n\"\r\n    },\r\n    \"contracts/protocols/curve/ust/Allocation.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: BUSDL-1.1\\npragma solidity 0.6.11;\\npragma experimental ABIEncoderV2;\\n\\nimport {\\n    MetaPoolAllocationBase\\n} from \\\"contracts/protocols/curve/metapool/Imports.sol\\\";\\n\\nimport {CurveUstConstants} from \\\"./Constants.sol\\\";\\n\\ncontract CurveUstAllocation is MetaPoolAllocationBase, CurveUstConstants {\\n    constructor(address curve3PoolAllocation_)\\n        public\\n        MetaPoolAllocationBase(curve3PoolAllocation_)\\n    {} // solhint-disable-line no-empty-blocks\\n\\n    function balanceOf(address account, uint8 tokenIndex)\\n        public\\n        view\\n        override\\n        returns (uint256)\\n    {\\n        return\\n            super.getUnderlyerBalance(\\n                account,\\n                META_POOL,\\n                LIQUIDITY_GAUGE,\\n                LP_TOKEN,\\n                uint256(tokenIndex)\\n            );\\n    }\\n\\n    function _getTokenData()\\n        internal\\n        pure\\n        override\\n        returns (TokenData[] memory)\\n    {\\n        return _getBasePoolTokenData(address(PRIMARY_UNDERLYER), \\\"UST\\\", 18);\\n    }\\n}\\n\"\r\n    },\r\n    \"contracts/protocols/curve/usdp/Zap.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: BUSDL-1.1\\npragma solidity 0.6.11;\\npragma experimental ABIEncoderV2;\\n\\nimport {IERC20} from \\\"@openzeppelin/contracts/token/ERC20/IERC20.sol\\\";\\nimport {IAssetAllocation} from \\\"contracts/common/Imports.sol\\\";\\nimport {CurveUsdpConstants} from \\\"./Constants.sol\\\";\\nimport {\\n    MetaPoolOldDepositorZap\\n} from \\\"contracts/protocols/curve/metapool/Imports.sol\\\";\\n\\ncontract UsdpPoolZap is MetaPoolOldDepositorZap, CurveUsdpConstants {\\n    constructor()\\n        public\\n        MetaPoolOldDepositorZap(\\n            DEPOSITOR,\\n            META_POOL,\\n            address(LP_TOKEN),\\n            address(LIQUIDITY_GAUGE),\\n            10000,\\n            100\\n        ) // solhint-disable-next-line no-empty-blocks\\n    {}\\n\\n    function assetAllocations() public view override returns (string[] memory) {\\n        string[] memory allocationNames = new string[](1);\\n        allocationNames[0] = NAME;\\n        return allocationNames;\\n    }\\n\\n    function erc20Allocations() public view override returns (IERC20[] memory) {\\n        IERC20[] memory allocations = _createErc20AllocationArray(1);\\n        allocations[4] = PRIMARY_UNDERLYER;\\n        return allocations;\\n    }\\n}\\n\"\r\n    },\r\n    \"contracts/protocols/curve/usdp/Constants.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: BUSDL-1.1\\npragma solidity 0.6.11;\\n\\nimport {IERC20, INameIdentifier} from \\\"contracts/common/Imports.sol\\\";\\nimport {\\n    ILiquidityGauge\\n} from \\\"contracts/protocols/curve/common/interfaces/Imports.sol\\\";\\nimport {IMetaPool} from \\\"contracts/protocols/curve/metapool/Imports.sol\\\";\\nimport {IOldDepositor} from \\\"contracts/protocols/curve/metapool/Imports.sol\\\";\\n\\nabstract contract CurveUsdpConstants is INameIdentifier {\\n    string public constant override NAME = \\\"curve-usdp\\\";\\n\\n    // sometimes a metapool is its own LP token; otherwise,\\n    // you can obtain from `token` attribute\\n    IERC20 public constant LP_TOKEN =\\n        IERC20(0x7Eb40E450b9655f4B3cC4259BCC731c63ff55ae6);\\n\\n    // metapool primary underlyer\\n    IERC20 public constant PRIMARY_UNDERLYER =\\n        IERC20(0x1456688345527bE1f37E9e627DA0837D6f08C925);\\n\\n    ILiquidityGauge public constant LIQUIDITY_GAUGE =\\n        ILiquidityGauge(0x055be5DDB7A925BfEF3417FC157f53CA77cA7222);\\n\\n    IMetaPool public constant META_POOL =\\n        IMetaPool(0x42d7025938bEc20B69cBae5A77421082407f053A);\\n\\n    IOldDepositor public constant DEPOSITOR =\\n        IOldDepositor(0x3c8cAee4E09296800f8D29A68Fa3837e2dae4940);\\n}\\n\"\r\n    },\r\n    \"contracts/protocols/curve/usdp/Allocation.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: BUSDL-1.1\\npragma solidity 0.6.11;\\npragma experimental ABIEncoderV2;\\n\\nimport {\\n    MetaPoolAllocationBase\\n} from \\\"contracts/protocols/curve/metapool/Imports.sol\\\";\\n\\nimport {CurveUsdpConstants} from \\\"./Constants.sol\\\";\\n\\ncontract CurveUsdpAllocation is MetaPoolAllocationBase, CurveUsdpConstants {\\n    constructor(address curve3PoolAllocation_)\\n        public\\n        MetaPoolAllocationBase(curve3PoolAllocation_)\\n    {} // solhint-disable-line no-empty-blocks\\n\\n    function balanceOf(address account, uint8 tokenIndex)\\n        public\\n        view\\n        override\\n        returns (uint256)\\n    {\\n        return\\n            super.getUnderlyerBalance(\\n                account,\\n                META_POOL,\\n                LIQUIDITY_GAUGE,\\n                LP_TOKEN,\\n                uint256(tokenIndex)\\n            );\\n    }\\n\\n    function _getTokenData()\\n        internal\\n        pure\\n        override\\n        returns (TokenData[] memory)\\n    {\\n        return _getBasePoolTokenData(address(PRIMARY_UNDERLYER), \\\"USDP\\\", 18);\\n    }\\n}\\n\"\r\n    },\r\n    \"contracts/rewards/RewardDistributor.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: BUSDL-1.1\\npragma solidity 0.6.11;\\npragma experimental ABIEncoderV2;\\n\\nimport {IERC20} from \\\"@openzeppelin/contracts/token/ERC20/IERC20.sol\\\";\\nimport {SafeERC20} from \\\"@openzeppelin/contracts/token/ERC20/SafeERC20.sol\\\";\\nimport {ECDSA} from \\\"@openzeppelin/contracts/cryptography/ECDSA.sol\\\";\\nimport {Ownable} from \\\"@openzeppelin/contracts/access/Ownable.sol\\\";\\n\\ncontract RewardDistributor is Ownable {\\n    using ECDSA for bytes32;\\n    using SafeERC20 for IERC20;\\n\\n    struct EIP712Domain {\\n        string name;\\n        string version;\\n        uint256 chainId;\\n        address verifyingContract;\\n    }\\n\\n    struct Recipient {\\n        uint256 nonce;\\n        address wallet;\\n        uint256 amount;\\n    }\\n\\n    bytes32 private constant EIP712_DOMAIN_TYPEHASH =\\n        keccak256(\\n            \\\"EIP712Domain(string name,string version,uint256 chainId,address verifyingContract)\\\"\\n        );\\n\\n    bytes32 private constant RECIPIENT_TYPEHASH =\\n        keccak256(\\\"Recipient(uint256 nonce,address wallet,uint256 amount)\\\");\\n\\n    bytes32 private immutable DOMAIN_SEPARATOR;\\n\\n    IERC20 public immutable apyToken;\\n    mapping(address => uint256) public accountNonces;\\n    address public signer;\\n\\n    event SignerSet(address newSigner);\\n    event Claimed(uint256 nonce, address recipient, uint256 amount);\\n\\n    constructor(IERC20 token, address signerAddress) public {\\n        require(address(token) != address(0), \\\"Invalid APY Address\\\");\\n        require(signerAddress != address(0), \\\"Invalid Signer Address\\\");\\n        apyToken = token;\\n        signer = signerAddress;\\n\\n        DOMAIN_SEPARATOR = _hashDomain(\\n            EIP712Domain({\\n                name: \\\"APY Distribution\\\",\\n                version: \\\"1\\\",\\n                chainId: _getChainID(),\\n                verifyingContract: address(this)\\n            })\\n        );\\n    }\\n\\n    function setSigner(address newSigner) external onlyOwner {\\n        signer = newSigner;\\n    }\\n\\n    function claim(\\n        Recipient calldata recipient,\\n        uint8 v,\\n        bytes32 r,\\n        bytes32 s // bytes calldata signature\\n    ) external {\\n        address signatureSigner = ecrecover(_hash(recipient), v, r, s);\\n        require(signatureSigner == signer, \\\"Invalid Signature\\\");\\n\\n        require(\\n            recipient.nonce == accountNonces[recipient.wallet],\\n            \\\"Nonce Mismatch\\\"\\n        );\\n        require(\\n            apyToken.balanceOf(address(this)) >= recipient.amount,\\n            \\\"Insufficient Funds\\\"\\n        );\\n\\n        accountNonces[recipient.wallet] += 1;\\n        apyToken.safeTransfer(recipient.wallet, recipient.amount);\\n\\n        emit Claimed(recipient.nonce, recipient.wallet, recipient.amount);\\n    }\\n\\n    function _hash(Recipient memory recipient) private view returns (bytes32) {\\n        return\\n            keccak256(\\n                abi.encodePacked(\\n                    \\\"\\\\x19\\\\x01\\\",\\n                    DOMAIN_SEPARATOR,\\n                    _hashRecipient(recipient)\\n                )\\n            );\\n    }\\n\\n    function _getChainID() private pure returns (uint256) {\\n        uint256 id;\\n        // no-inline-assembly\\n        assembly {\\n            id := chainid()\\n        }\\n        return id;\\n    }\\n\\n    function _hashDomain(EIP712Domain memory eip712Domain)\\n        private\\n        pure\\n        returns (bytes32)\\n    {\\n        return\\n            keccak256(\\n                abi.encode(\\n                    EIP712_DOMAIN_TYPEHASH,\\n                    keccak256(bytes(eip712Domain.name)),\\n                    keccak256(bytes(eip712Domain.version)),\\n                    eip712Domain.chainId,\\n                    eip712Domain.verifyingContract\\n                )\\n            );\\n    }\\n\\n    function _hashRecipient(Recipient memory recipient)\\n        private\\n        pure\\n        returns (bytes32)\\n    {\\n        return\\n            keccak256(\\n                abi.encode(\\n                    RECIPIENT_TYPEHASH,\\n                    recipient.nonce,\\n                    recipient.wallet,\\n                    recipient.amount\\n                )\\n            );\\n    }\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/cryptography/ECDSA.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity >=0.6.0 <0.8.0;\\n\\n/**\\n * @dev Elliptic Curve Digital Signature Algorithm (ECDSA) operations.\\n *\\n * These functions can be used to verify that a message was signed by the holder\\n * of the private keys of a given address.\\n */\\nlibrary ECDSA {\\n    /**\\n     * @dev Returns the address that signed a hashed message (`hash`) with\\n     * `signature`. This address can then be used for verification purposes.\\n     *\\n     * The `ecrecover` EVM opcode allows for malleable (non-unique) signatures:\\n     * this function rejects them by requiring the `s` value to be in the lower\\n     * half order, and the `v` value to be either 27 or 28.\\n     *\\n     * IMPORTANT: `hash` _must_ be the result of a hash operation for the\\n     * verification to be secure: it is possible to craft signatures that\\n     * recover to arbitrary addresses for non-hashed data. A safe way to ensure\\n     * this is by receiving a hash of the original message (which may otherwise\\n     * be too long), and then calling {toEthSignedMessageHash} on it.\\n     */\\n    function recover(bytes32 hash, bytes memory signature) internal pure returns (address) {\\n        // Check the signature length\\n        if (signature.length != 65) {\\n            revert(\\\"ECDSA: invalid signature length\\\");\\n        }\\n\\n        // Divide the signature in r, s and v variables\\n        bytes32 r;\\n        bytes32 s;\\n        uint8 v;\\n\\n        // ecrecover takes the signature parameters, and the only way to get them\\n        // currently is to use assembly.\\n        // solhint-disable-next-line no-inline-assembly\\n        assembly {\\n            r := mload(add(signature, 0x20))\\n            s := mload(add(signature, 0x40))\\n            v := byte(0, mload(add(signature, 0x60)))\\n        }\\n\\n        return recover(hash, v, r, s);\\n    }\\n\\n    /**\\n     * @dev Overload of {ECDSA-recover-bytes32-bytes-} that receives the `v`,\\n     * `r` and `s` signature fields separately.\\n     */\\n    function recover(bytes32 hash, uint8 v, bytes32 r, bytes32 s) internal pure returns (address) {\\n        // EIP-2 still allows signature malleability for ecrecover(). Remove this possibility and make the signature\\n        // unique. Appendix F in the Ethereum Yellow paper (https://ethereum.github.io/yellowpaper/paper.pdf), defines\\n        // the valid range for s in (281): 0 < s < secp256k1n ÷ 2 + 1, and for v in (282): v ∈ {27, 28}. Most\\n        // signatures from current libraries generate a unique signature with an s-value in the lower half order.\\n        //\\n        // If your library generates malleable signatures, such as s-values in the upper range, calculate a new s-value\\n        // with 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFEBAAEDCE6AF48A03BBFD25E8CD0364141 - s1 and flip v from 27 to 28 or\\n        // vice versa. If your library also generates signatures with 0/1 for v instead 27/28, add 27 to v to accept\\n        // these malleable signatures as well.\\n        require(uint256(s) <= 0x7FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF5D576E7357A4501DDFE92F46681B20A0, \\\"ECDSA: invalid signature 's' value\\\");\\n        require(v == 27 || v == 28, \\\"ECDSA: invalid signature 'v' value\\\");\\n\\n        // If the signature is valid (and not malleable), return the signer address\\n        address signer = ecrecover(hash, v, r, s);\\n        require(signer != address(0), \\\"ECDSA: invalid signature\\\");\\n\\n        return signer;\\n    }\\n\\n    /**\\n     * @dev Returns an Ethereum Signed Message, created from a `hash`. This\\n     * replicates the behavior of the\\n     * https://github.com/ethereum/wiki/wiki/JSON-RPC#eth_sign[`eth_sign`]\\n     * JSON-RPC method.\\n     *\\n     * See {recover}.\\n     */\\n    function toEthSignedMessageHash(bytes32 hash) internal pure returns (bytes32) {\\n        // 32 is the length in bytes of hash,\\n        // enforced by the type signature above\\n        return keccak256(abi.encodePacked(\\\"\\\\x19Ethereum Signed Message:\\\\n32\\\", hash));\\n    }\\n}\\n\"\r\n    },\r\n    \"contracts/rewards/GovernanceTokenProxy.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: BUSDL-1.1\\npragma solidity 0.6.11;\\npragma experimental ABIEncoderV2;\\n\\nimport {\\n    TransparentUpgradeableProxy\\n} from \\\"@openzeppelin/contracts/proxy/TransparentUpgradeableProxy.sol\\\";\\n\\ncontract GovernanceTokenProxy is TransparentUpgradeableProxy {\\n    constructor(\\n        address _logic,\\n        address _proxyAdmin,\\n        uint256 _totalSupply\\n    )\\n        public\\n        TransparentUpgradeableProxy(\\n            _logic,\\n            _proxyAdmin,\\n            abi.encodeWithSignature(\\n                \\\"initialize(address,uint256)\\\",\\n                _proxyAdmin,\\n                _totalSupply\\n            )\\n        )\\n    {} // solhint-disable no-empty-blocks\\n}\\n\"\r\n    },\r\n    \"contracts/libraries/TestNamedAddressSet.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: BUSDL-1.1\\npragma solidity 0.6.11;\\npragma experimental ABIEncoderV2;\\n\\nimport {IAssetAllocation} from \\\"contracts/common/Imports.sol\\\";\\nimport {IZap} from \\\"contracts/lpaccount/Imports.sol\\\";\\n\\nimport {NamedAddressSet} from \\\"./NamedAddressSet.sol\\\";\\n\\ncontract TestNamedAssetAllocationSet {\\n    using NamedAddressSet for NamedAddressSet.AssetAllocationSet;\\n\\n    NamedAddressSet.AssetAllocationSet private _set;\\n\\n    function add(IAssetAllocation allocation) external {\\n        _set.add(allocation);\\n    }\\n\\n    function remove(string memory name) external {\\n        _set.remove(name);\\n    }\\n\\n    function contains(IAssetAllocation allocation)\\n        external\\n        view\\n        returns (bool)\\n    {\\n        return _set.contains(allocation);\\n    }\\n\\n    function length() external view returns (uint256) {\\n        return _set.length();\\n    }\\n\\n    function at(uint256 index) external view returns (IAssetAllocation) {\\n        return _set.at(index);\\n    }\\n\\n    function get(string memory name) external view returns (IAssetAllocation) {\\n        return _set.get(name);\\n    }\\n\\n    function names() external view returns (string[] memory) {\\n        return _set.names();\\n    }\\n}\\n\\ncontract TestNamedZapSet {\\n    using NamedAddressSet for NamedAddressSet.ZapSet;\\n\\n    NamedAddressSet.ZapSet private _set;\\n\\n    function add(IZap zap) external {\\n        _set.add(zap);\\n    }\\n\\n    function remove(string memory name) external {\\n        _set.remove(name);\\n    }\\n\\n    function contains(IZap zap) external view returns (bool) {\\n        return _set.contains(zap);\\n    }\\n\\n    function length() external view returns (uint256) {\\n        return _set.length();\\n    }\\n\\n    function at(uint256 index) external view returns (IZap) {\\n        return _set.at(index);\\n    }\\n\\n    function get(string memory name) external view returns (IZap) {\\n        return _set.get(name);\\n    }\\n\\n    function names() external view returns (string[] memory) {\\n        return _set.names();\\n    }\\n}\\n\"\r\n    },\r\n    \"contracts/pool/TestPoolTokenV2.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: BUSDL-1.1\\npragma solidity 0.6.11;\\n\\nimport {PoolTokenV2} from \\\"./PoolTokenV2.sol\\\";\\n\\n/**\\n * @dev Proxy contract to test internal variables and functions\\n * Should not be used other than in test files!\\n */\\ncontract TestPoolTokenV2 is PoolTokenV2 {\\n    function testMint(address account, uint256 amount) public {\\n        _mint(account, amount);\\n    }\\n\\n    function testBurn(address account, uint256 amount) public {\\n        _burn(account, amount);\\n    }\\n\\n    function testTransfer(\\n        address from,\\n        address to,\\n        uint256 amount\\n    ) public {\\n        testBurn(from, amount);\\n        testMint(to, amount);\\n    }\\n\\n    function testGetDeployedValue() public view returns (uint256) {\\n        return _getDeployedValue();\\n    }\\n\\n    function testGetPoolUnderlyerValue() public view returns (uint256) {\\n        return _getPoolUnderlyerValue();\\n    }\\n}\\n\"\r\n    },\r\n    \"contracts/deploy/AlphaDeployment.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: BUSDL-1.1\\npragma solidity 0.6.11;\\npragma experimental ABIEncoderV2;\\n\\nimport {IDetailedERC20, Ownable} from \\\"contracts/common/Imports.sol\\\";\\nimport {MetaPoolToken} from \\\"contracts/mapt/MetaPoolToken.sol\\\";\\nimport {AggregatorV3Interface} from \\\"contracts/oracle/Imports.sol\\\";\\nimport {PoolTokenV2} from \\\"contracts/pool/PoolTokenV2.sol\\\";\\nimport {LpAccount} from \\\"contracts/lpaccount/LpAccount.sol\\\";\\nimport {IAddressRegistryV2} from \\\"contracts/registry/Imports.sol\\\";\\nimport {AddressRegistryV2} from \\\"contracts/registry/AddressRegistryV2.sol\\\";\\nimport {\\n    ProxyAdmin,\\n    TransparentUpgradeableProxy\\n} from \\\"contracts/proxy/Imports.sol\\\";\\nimport {IAssetAllocationRegistry} from \\\"contracts/tvl/Imports.sol\\\";\\n\\nimport {DeploymentConstants} from \\\"./constants.sol\\\";\\nimport {\\n    AddressRegistryV2Factory,\\n    Erc20AllocationFactory,\\n    LpAccountFactory,\\n    MetaPoolTokenFactory,\\n    OracleAdapterFactory,\\n    ProxyAdminFactory,\\n    PoolTokenV1Factory,\\n    PoolTokenV2Factory,\\n    TvlManagerFactory\\n} from \\\"./factories.sol\\\";\\nimport {IGnosisModuleManager, Enum} from \\\"./IGnosisModuleManager.sol\\\";\\n\\n/** @dev\\n# Alpha Deployment\\n\\n## Deployment order of contracts\\n\\nThe address registry needs multiple addresses registered\\nto setup the roles for access control in the contract\\nconstructors:\\n\\nMetaPoolToken\\n\\n- emergencySafe (emergency role, default admin role)\\n- lpSafe (LP role)\\n\\nPoolTokenV2\\n\\n- emergencySafe (emergency role, default admin role)\\n- adminSafe (admin role)\\n- mApt (contract role)\\n\\nTvlManager\\n\\n- emergencySafe (emergency role, default admin role)\\n- lpSafe (LP role)\\n\\nLpAccount\\n\\n- emergencySafe (emergency role, default admin role)\\n- adminSafe (admin role)\\n- lpSafe (LP role)\\n\\nOracleAdapter\\n\\n- emergencySafe (emergency role, default admin role)\\n- adminSafe (admin role)\\n- tvlManager (contract role)\\n- mApt (contract role)\\n- lpAccount (contract role)\\n\\nNote the order of dependencies: a contract requires contracts\\nabove it in the list to be deployed first. Thus we need\\nto deploy in the order given, starting with the Safes.\\n\\n*/\\n\\n/* solhint-disable max-states-count, func-name-mixedcase */\\ncontract AlphaDeployment is Ownable, DeploymentConstants {\\n    // TODO: figure out a versioning scheme\\n    string public constant VERSION = \\\"1.0.0\\\";\\n\\n    address private constant FAKE_AGG_ADDRESS =\\n        0xCAfEcAfeCAfECaFeCaFecaFecaFECafECafeCaFe;\\n\\n    IAddressRegistryV2 public addressRegistry;\\n\\n    address public immutable proxyAdminFactory;\\n    address public immutable proxyFactory;\\n    address public immutable addressRegistryV2Factory;\\n    address public immutable mAptFactory;\\n    address public immutable poolTokenV1Factory;\\n    address public immutable poolTokenV2Factory;\\n    address public immutable tvlManagerFactory;\\n    address public immutable erc20AllocationFactory;\\n    address public immutable oracleAdapterFactory;\\n    address public immutable lpAccountFactory;\\n\\n    uint256 public step;\\n\\n    address public immutable emergencySafe;\\n    address public immutable adminSafe;\\n    address public immutable lpSafe;\\n\\n    // step 0\\n    address public addressRegistryV2;\\n\\n    // step 1\\n    address public mApt;\\n\\n    // step 2\\n    address public poolTokenV2;\\n\\n    // step 3\\n    address public daiDemoPool;\\n    address public usdcDemoPool;\\n    address public usdtDemoPool;\\n\\n    // step 4\\n    address public tvlManager;\\n    address public erc20Allocation;\\n\\n    // step 5\\n    address public oracleAdapter;\\n\\n    // step 6\\n    address public lpAccount;\\n\\n    modifier updateStep(uint256 step_) {\\n        require(step == step_, \\\"INVALID_STEP\\\");\\n        _;\\n        step += 1;\\n    }\\n\\n    /**\\n     * @dev Uses `getAddress` in case `AddressRegistry` has not been upgraded\\n     */\\n    modifier checkSafeRegistrations() {\\n        require(\\n            addressRegistry.getAddress(\\\"emergencySafe\\\") == emergencySafe,\\n            \\\"INVALID_EMERGENCY_SAFE\\\"\\n        );\\n\\n        require(\\n            addressRegistry.getAddress(\\\"adminSafe\\\") == adminSafe,\\n            \\\"INVALID_ADMIN_SAFE\\\"\\n        );\\n\\n        require(\\n            addressRegistry.getAddress(\\\"lpSafe\\\") == lpSafe,\\n            \\\"INVALID_LP_SAFE\\\"\\n        );\\n\\n        _;\\n    }\\n\\n    constructor(\\n        address proxyAdminFactory_,\\n        address proxyFactory_,\\n        address addressRegistryV2Factory_,\\n        address mAptFactory_,\\n        address poolTokenV1Factory_,\\n        address poolTokenV2Factory_,\\n        address tvlManagerFactory_,\\n        address erc20AllocationFactory_,\\n        address oracleAdapterFactory_,\\n        address lpAccountFactory_\\n    ) public {\\n        addressRegistry = IAddressRegistryV2(ADDRESS_REGISTRY_PROXY);\\n\\n        // Simplest to check now that Safes are deployed in order to\\n        // avoid repeated preconditions checks later.\\n        emergencySafe = addressRegistry.getAddress(\\\"emergencySafe\\\");\\n        adminSafe = addressRegistry.getAddress(\\\"adminSafe\\\");\\n        lpSafe = addressRegistry.getAddress(\\\"lpSafe\\\");\\n\\n        proxyAdminFactory = proxyAdminFactory_;\\n        proxyFactory = proxyFactory_;\\n        addressRegistryV2Factory = addressRegistryV2Factory_;\\n        mAptFactory = mAptFactory_;\\n        poolTokenV1Factory = poolTokenV1Factory_;\\n        poolTokenV2Factory = poolTokenV2Factory_;\\n        tvlManagerFactory = tvlManagerFactory_;\\n        erc20AllocationFactory = erc20AllocationFactory_;\\n        oracleAdapterFactory = oracleAdapterFactory_;\\n        lpAccountFactory = lpAccountFactory_;\\n    }\\n\\n    /**\\n     * @dev\\n     *   Check a contract address from a previous step's deployment\\n     *   is registered with expected ID.\\n     *\\n     * @param registeredIds identifiers for the Address Registry\\n     * @param deployedAddresses addresses from previous steps' deploys\\n     */\\n    function checkRegisteredDependencies(\\n        bytes32[] memory registeredIds,\\n        address[] memory deployedAddresses\\n    ) public view virtual {\\n        require(\\n            registeredIds.length == deployedAddresses.length,\\n            \\\"LENGTH_MISMATCH\\\"\\n        );\\n\\n        for (uint256 i = 0; i < registeredIds.length; i++) {\\n            require(\\n                addressRegistry.getAddress(registeredIds[i]) ==\\n                    deployedAddresses[i],\\n                \\\"MISSING_DEPLOYED_ADDRESS\\\"\\n            );\\n        }\\n    }\\n\\n    /**\\n     * @dev\\n     *   Check the deployment contract has ownership of necessary\\n     *   contracts to perform actions, e.g. register an address or upgrade\\n     *   a proxy.\\n     *\\n     * @param ownedContracts addresses that should be owned by this contract\\n     */\\n    function checkOwnerships(address[] memory ownedContracts)\\n        public\\n        view\\n        virtual\\n    {\\n        for (uint256 i = 0; i < ownedContracts.length; i++) {\\n            require(\\n                Ownable(ownedContracts[i]).owner() == adminSafe,\\n                \\\"MISSING_OWNERSHIP\\\"\\n            );\\n        }\\n    }\\n\\n    function deploy_0_AddressRegistryV2_upgrade()\\n        external\\n        onlyOwner\\n        updateStep(0)\\n        checkSafeRegistrations\\n    {\\n        address[] memory ownerships = new address[](2);\\n        ownerships[0] = ADDRESS_REGISTRY_PROXY;\\n        ownerships[1] = ADDRESS_REGISTRY_PROXY_ADMIN;\\n        checkOwnerships(ownerships);\\n\\n        addressRegistryV2 = AddressRegistryV2Factory(addressRegistryV2Factory)\\n            .create();\\n        bytes memory data =\\n            abi.encodeWithSelector(\\n                ProxyAdmin.upgrade.selector,\\n                ADDRESS_REGISTRY_PROXY,\\n                addressRegistryV2\\n            );\\n\\n        require(\\n            IGnosisModuleManager(adminSafe).execTransactionFromModule(\\n                ADDRESS_REGISTRY_PROXY_ADMIN,\\n                0, // value\\n                data,\\n                Enum.Operation.Call\\n            ),\\n            \\\"SAFE_TX_FAILED\\\"\\n        );\\n\\n        // TODO: delete \\\"poolManager\\\" ID\\n\\n        // Initialize logic storage to block possible attack vector:\\n        // attacker may control and selfdestruct the logic contract\\n        // if more powerful functionality is added later\\n        AddressRegistryV2(addressRegistryV2).initialize(\\n            ADDRESS_REGISTRY_PROXY_ADMIN\\n        );\\n    }\\n\\n    /// @dev Deploy the mAPT proxy and its proxy admin.\\n    ///      Does not register any roles for contracts.\\n    function deploy_1_MetaPoolToken()\\n        external\\n        onlyOwner\\n        updateStep(1)\\n        checkSafeRegistrations\\n    {\\n        address[] memory ownerships = new address[](1);\\n        ownerships[0] = ADDRESS_REGISTRY_PROXY;\\n        checkOwnerships(ownerships);\\n\\n        address proxyAdmin = ProxyAdminFactory(proxyAdminFactory).create();\\n\\n        bytes memory initData =\\n            abi.encodeWithSelector(\\n                MetaPoolToken.initialize.selector,\\n                addressRegistry\\n            );\\n\\n        mApt = MetaPoolTokenFactory(mAptFactory).create(\\n            proxyFactory,\\n            proxyAdmin,\\n            initData\\n        );\\n\\n        _registerAddress(\\\"mApt\\\", mApt);\\n\\n        ProxyAdmin(proxyAdmin).transferOwnership(adminSafe);\\n    }\\n\\n    function deploy_2_PoolTokenV2_logic() external onlyOwner updateStep(2) {\\n        poolTokenV2 = PoolTokenV2Factory(poolTokenV2Factory).create();\\n\\n        // Initialize logic storage to block possible attack vector:\\n        // attacker may control and selfdestruct the logic contract\\n        // if more powerful functionality is added later\\n        PoolTokenV2(poolTokenV2).initialize(\\n            POOL_PROXY_ADMIN,\\n            IDetailedERC20(DAI_ADDRESS),\\n            AggregatorV3Interface(0xCAfEcAfeCAfECaFeCaFecaFecaFECafECafeCaFe)\\n        );\\n    }\\n\\n    /// @dev complete proxy deploy for the demo pools\\n    ///      Registers mAPT for a contract role.\\n    function deploy_3_DemoPools()\\n        external\\n        onlyOwner\\n        updateStep(3)\\n        checkSafeRegistrations\\n    {\\n        bytes32[] memory registeredIds = new bytes32[](1);\\n        address[] memory deployedAddresses = new address[](1);\\n        (registeredIds[0], deployedAddresses[0]) = (\\\"mApt\\\", mApt);\\n        checkRegisteredDependencies(registeredIds, deployedAddresses);\\n\\n        address[] memory ownerships = new address[](1);\\n        ownerships[0] = ADDRESS_REGISTRY_PROXY;\\n        checkOwnerships(ownerships);\\n\\n        address proxyAdmin = ProxyAdminFactory(proxyAdminFactory).create();\\n\\n        bytes memory initDataV2 =\\n            abi.encodeWithSelector(\\n                PoolTokenV2.initializeUpgrade.selector,\\n                address(addressRegistry)\\n            );\\n\\n        daiDemoPool = _deployDemoPool(\\n            DAI_ADDRESS,\\n            \\\"daiDemoPool\\\",\\n            proxyAdmin,\\n            initDataV2\\n        );\\n\\n        usdcDemoPool = _deployDemoPool(\\n            USDC_ADDRESS,\\n            \\\"usdcDemoPool\\\",\\n            proxyAdmin,\\n            initDataV2\\n        );\\n\\n        usdtDemoPool = _deployDemoPool(\\n            USDT_ADDRESS,\\n            \\\"usdtDemoPool\\\",\\n            proxyAdmin,\\n            initDataV2\\n        );\\n\\n        ProxyAdmin(proxyAdmin).transferOwnership(adminSafe);\\n    }\\n\\n    /// @dev Deploy ERC20 allocation and TVL Manager.\\n    ///      Does not register any roles for contracts.\\n    function deploy_4_TvlManager()\\n        external\\n        onlyOwner\\n        updateStep(4)\\n        checkSafeRegistrations\\n    {\\n        address[] memory ownerships = new address[](1);\\n        ownerships[0] = ADDRESS_REGISTRY_PROXY;\\n        checkOwnerships(ownerships);\\n\\n        tvlManager = TvlManagerFactory(tvlManagerFactory).create(\\n            address(addressRegistry)\\n        );\\n        _registerAddress(\\\"tvlManager\\\", tvlManager);\\n\\n        erc20Allocation = Erc20AllocationFactory(erc20AllocationFactory).create(\\n            address(addressRegistry)\\n        );\\n\\n        bytes memory data =\\n            abi.encodeWithSelector(\\n                IAssetAllocationRegistry.registerAssetAllocation.selector,\\n                erc20Allocation\\n            );\\n        require(\\n            IGnosisModuleManager(adminSafe).execTransactionFromModule(\\n                tvlManager,\\n                0,\\n                data,\\n                Enum.Operation.Call\\n            ),\\n            \\\"SAFE_TX_FAILED\\\"\\n        );\\n    }\\n\\n    /// @dev register mAPT for a contract role\\n    function deploy_5_LpAccount()\\n        external\\n        onlyOwner\\n        updateStep(5)\\n        checkSafeRegistrations\\n    {\\n        bytes32[] memory registeredIds = new bytes32[](1);\\n        address[] memory deployedAddresses = new address[](1);\\n        (registeredIds[0], deployedAddresses[0]) = (\\\"mApt\\\", mApt);\\n        checkRegisteredDependencies(registeredIds, deployedAddresses);\\n\\n        address[] memory ownerships = new address[](1);\\n        ownerships[0] = ADDRESS_REGISTRY_PROXY;\\n        checkOwnerships(ownerships);\\n\\n        address proxyAdmin = ProxyAdminFactory(proxyAdminFactory).create();\\n\\n        bytes memory initData =\\n            abi.encodeWithSelector(\\n                LpAccount.initialize.selector,\\n                address(addressRegistry)\\n            );\\n\\n        lpAccount = LpAccountFactory(lpAccountFactory).create(\\n            proxyFactory,\\n            proxyAdmin,\\n            initData\\n        );\\n\\n        _registerAddress(\\\"lpAccount\\\", lpAccount);\\n\\n        ProxyAdmin(proxyAdmin).transferOwnership(adminSafe);\\n    }\\n\\n    /// @dev registers mAPT, TvlManager, LpAccount for contract roles\\n    function deploy_6_OracleAdapter()\\n        external\\n        onlyOwner\\n        updateStep(6)\\n        checkSafeRegistrations\\n    {\\n        bytes32[] memory registeredIds = new bytes32[](3);\\n        address[] memory deployedAddresses = new address[](3);\\n        (registeredIds[0], deployedAddresses[0]) = (\\\"mApt\\\", mApt);\\n        (registeredIds[1], deployedAddresses[1]) = (\\\"tvlManager\\\", tvlManager);\\n        (registeredIds[2], deployedAddresses[2]) = (\\\"lpAccount\\\", lpAccount);\\n        checkRegisteredDependencies(registeredIds, deployedAddresses);\\n\\n        address[] memory ownerships = new address[](1);\\n        ownerships[0] = ADDRESS_REGISTRY_PROXY;\\n        checkOwnerships(ownerships);\\n\\n        address[] memory assets = new address[](3);\\n        assets[0] = DAI_ADDRESS;\\n        assets[1] = USDC_ADDRESS;\\n        assets[2] = USDT_ADDRESS;\\n\\n        address[] memory sources = new address[](3);\\n        sources[0] = DAI_USD_AGG_ADDRESS;\\n        sources[1] = USDC_USD_AGG_ADDRESS;\\n        sources[2] = USDT_USD_AGG_ADDRESS;\\n\\n        uint256 aggStalePeriod = 86400;\\n        uint256 defaultLockPeriod = 270;\\n\\n        oracleAdapter = OracleAdapterFactory(oracleAdapterFactory).create(\\n            address(addressRegistry),\\n            TVL_AGG_ADDRESS,\\n            assets,\\n            sources,\\n            aggStalePeriod,\\n            defaultLockPeriod\\n        );\\n\\n        _registerAddress(\\\"oracleAdapter\\\", oracleAdapter);\\n    }\\n\\n    /// @notice upgrade from v1 to v2\\n    /// @dev register mAPT for a contract role\\n    function deploy_7_PoolTokenV2_upgrade()\\n        external\\n        onlyOwner\\n        updateStep(7)\\n        checkSafeRegistrations\\n    {\\n        bytes32[] memory registeredIds = new bytes32[](1);\\n        address[] memory deployedAddresses = new address[](1);\\n        (registeredIds[0], deployedAddresses[0]) = (\\\"mApt\\\", mApt);\\n        checkRegisteredDependencies(registeredIds, deployedAddresses);\\n\\n        address[] memory ownerships = new address[](1);\\n        ownerships[0] = POOL_PROXY_ADMIN;\\n        checkOwnerships(ownerships);\\n\\n        bytes memory initData =\\n            abi.encodeWithSelector(\\n                PoolTokenV2.initializeUpgrade.selector,\\n                addressRegistry\\n            );\\n\\n        _upgradePool(DAI_POOL_PROXY, POOL_PROXY_ADMIN, initData);\\n        _upgradePool(USDC_POOL_PROXY, POOL_PROXY_ADMIN, initData);\\n        _upgradePool(USDT_POOL_PROXY, POOL_PROXY_ADMIN, initData);\\n    }\\n\\n    function _registerAddress(bytes32 id, address address_) internal {\\n        bytes memory data =\\n            abi.encodeWithSelector(\\n                AddressRegistryV2.registerAddress.selector,\\n                id,\\n                address_\\n            );\\n\\n        require(\\n            IGnosisModuleManager(adminSafe).execTransactionFromModule(\\n                address(addressRegistry),\\n                0,\\n                data,\\n                Enum.Operation.Call\\n            ),\\n            \\\"SAFE_TX_FAILED\\\"\\n        );\\n    }\\n\\n    function _deployDemoPool(\\n        address token,\\n        bytes32 id,\\n        address proxyAdmin,\\n        bytes memory initData\\n    ) internal returns (address) {\\n        bytes memory data =\\n            abi.encodeWithSelector(\\n                PoolTokenV2.initialize.selector,\\n                proxyAdmin,\\n                token,\\n                FAKE_AGG_ADDRESS\\n            );\\n\\n        address proxy =\\n            PoolTokenV1Factory(poolTokenV1Factory).create(\\n                proxyFactory,\\n                proxyAdmin,\\n                data\\n            );\\n\\n        ProxyAdmin(proxyAdmin).upgradeAndCall(\\n            TransparentUpgradeableProxy(payable(proxy)),\\n            poolTokenV2,\\n            initData\\n        );\\n\\n        _registerAddress(id, proxy);\\n\\n        return proxy;\\n    }\\n\\n    function _upgradePool(\\n        address proxy,\\n        address proxyAdmin,\\n        bytes memory initData\\n    ) internal {\\n        bytes memory data =\\n            abi.encodeWithSelector(\\n                ProxyAdmin.upgradeAndCall.selector,\\n                TransparentUpgradeableProxy(payable(proxy)),\\n                poolTokenV2,\\n                initData\\n            );\\n\\n        require(\\n            IGnosisModuleManager(adminSafe).execTransactionFromModule(\\n                proxyAdmin,\\n                0,\\n                data,\\n                Enum.Operation.Call\\n            ),\\n            \\\"SAFE_TX_FAILED\\\"\\n        );\\n    }\\n}\\n/* solhint-enable func-name-mixedcase */\\n\"\r\n    },\r\n    \"contracts/deploy/IGnosisModuleManager.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: LGPL-3.0-only\\npragma solidity 0.6.11;\\n\\n/// @title Module Manager - A contract that manages modules that can execute transactions via this contract\\n/// @author Stefan George - <stefan@gnosis.pm>\\n/// @author Richard Meissner - <richard@gnosis.pm>\\ninterface IGnosisModuleManager {\\n    /// @dev Allows to add a module to the whitelist.\\n    ///      This can only be done via a Safe transaction.\\n    /// @notice Enables the module `module` for the Safe.\\n    /// @param module Module to be whitelisted.\\n    function enableModule(address module) external;\\n\\n    /// @dev Allows to remove a module from the whitelist.\\n    ///      This can only be done via a Safe transaction.\\n    /// @notice Disables the module `module` for the Safe.\\n    /// @param prevModule Module that pointed to the module to be removed in the linked list\\n    /// @param module Module to be removed.\\n    function disableModule(address prevModule, address module) external;\\n\\n    /// @dev Allows a Module to execute a Safe transaction without any further confirmations.\\n    /// @param to Destination address of module transaction.\\n    /// @param value Ether value of module transaction.\\n    /// @param data Data payload of module transaction.\\n    /// @param operation Operation type of module transaction.\\n    function execTransactionFromModule(\\n        address to,\\n        uint256 value,\\n        bytes memory data,\\n        Enum.Operation operation\\n    ) external returns (bool success);\\n\\n    /// @dev Allows a Module to execute a Safe transaction without any further confirmations and return data\\n    /// @param to Destination address of module transaction.\\n    /// @param value Ether value of module transaction.\\n    /// @param data Data payload of module transaction.\\n    /// @param operation Operation type of module transaction.\\n    function execTransactionFromModuleReturnData(\\n        address to,\\n        uint256 value,\\n        bytes memory data,\\n        Enum.Operation operation\\n    ) external returns (bool success, bytes memory returnData);\\n\\n    /// @dev Returns array of first 10 modules.\\n    /// @return Array of modules.\\n    function getModules() external view returns (address[] memory);\\n}\\n\\n/// @title Enum - Collection of enums\\n/// @author Richard Meissner - <richard@gnosis.pm>\\ncontract Enum {\\n    enum Operation {Call, DelegateCall}\\n}\\n\"\r\n    },\r\n    \"contracts/deploy/TestAlphaDeployment.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: BUSDL-1.1\\npragma solidity 0.6.11;\\npragma experimental ABIEncoderV2;\\n\\nimport {AlphaDeployment} from \\\"./AlphaDeployment.sol\\\";\\n\\ncontract TestAlphaDeployment is AlphaDeployment {\\n    constructor(\\n        address proxyAdminFactory_,\\n        address proxyFactory_,\\n        address addressRegistryV2Factory,\\n        address mAptFactory_,\\n        address poolTokenV1Factory_,\\n        address poolTokenV2Factory_,\\n        address tvlManagerFactory_,\\n        address erc20AllocationFactory_,\\n        address oracleAdapterFactory_,\\n        address lpAccountFactory_\\n    )\\n        public\\n        AlphaDeployment(\\n            proxyAdminFactory_,\\n            proxyFactory_,\\n            addressRegistryV2Factory,\\n            mAptFactory_,\\n            poolTokenV1Factory_,\\n            poolTokenV2Factory_,\\n            tvlManagerFactory_,\\n            erc20AllocationFactory_,\\n            oracleAdapterFactory_,\\n            lpAccountFactory_\\n        )\\n    {} // solhint-disable no-empty-blocks\\n\\n    function testSetStep(uint256 step_) public {\\n        step = step_;\\n    }\\n\\n    function testSetMapt(address mApt_) public {\\n        mApt = mApt_;\\n    }\\n\\n    function testSetPoolTokenV2(address poolTokenV2_) public {\\n        poolTokenV2 = poolTokenV2_;\\n    }\\n\\n    function testSetTvlManager(address tvlManager_) public {\\n        tvlManager = tvlManager_;\\n    }\\n\\n    function testSetLpAccount(address lpAccount_) public {\\n        lpAccount = lpAccount_;\\n    }\\n}\\n\"\r\n    },\r\n    \"contracts/protocols/curve/saave/Allocation.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: BUSDL-1.1\\npragma solidity 0.6.11;\\npragma experimental ABIEncoderV2;\\n\\nimport {IERC20} from \\\"contracts/common/Imports.sol\\\";\\nimport {SafeMath} from \\\"contracts/libraries/Imports.sol\\\";\\nimport {ImmutableAssetAllocation} from \\\"contracts/tvl/Imports.sol\\\";\\n\\nimport {\\n    IStableSwap2,\\n    ILiquidityGauge\\n} from \\\"contracts/protocols/curve/common/interfaces/Imports.sol\\\";\\n\\nimport {\\n    CurveAllocationBase2\\n} from \\\"contracts/protocols/curve/common/Imports.sol\\\";\\n\\nimport {CurveSaaveConstants} from \\\"./Constants.sol\\\";\\n\\ncontract CurveSaaveAllocation is\\n    CurveAllocationBase2,\\n    ImmutableAssetAllocation,\\n    CurveSaaveConstants\\n{\\n    function balanceOf(address account, uint8 tokenIndex)\\n        public\\n        view\\n        override\\n        returns (uint256)\\n    {\\n        // No unwrapping of aTokens are needed, as `balanceOf`\\n        // automagically reflects the accrued interest and\\n        // aTokens convert 1:1 to the underlyer.\\n        return\\n            super.getUnderlyerBalance(\\n                account,\\n                IStableSwap2(STABLE_SWAP_ADDRESS),\\n                ILiquidityGauge(LIQUIDITY_GAUGE_ADDRESS),\\n                IERC20(LP_TOKEN_ADDRESS),\\n                uint256(tokenIndex)\\n            );\\n    }\\n\\n    function _getTokenData()\\n        internal\\n        pure\\n        override\\n        returns (TokenData[] memory)\\n    {\\n        TokenData[] memory tokens = new TokenData[](2);\\n        tokens[0] = TokenData(DAI_ADDRESS, \\\"DAI\\\", 18);\\n        tokens[1] = TokenData(USDC_ADDRESS, \\\"sUSD\\\", 18);\\n        return tokens;\\n    }\\n}\\n\"\r\n    },\r\n    \"contracts/protocols/curve/ironbank/Allocation.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: BUSDL-1.1\\npragma solidity 0.6.11;\\npragma experimental ABIEncoderV2;\\n\\nimport {IERC20} from \\\"contracts/common/Imports.sol\\\";\\nimport {SafeMath} from \\\"contracts/libraries/Imports.sol\\\";\\nimport {ImmutableAssetAllocation} from \\\"contracts/tvl/Imports.sol\\\";\\n\\nimport {\\n    CTokenInterface,\\n    IStableSwap,\\n    ILiquidityGauge\\n} from \\\"contracts/protocols/curve/common/interfaces/Imports.sol\\\";\\n\\nimport {\\n    CurveAllocationBase\\n} from \\\"contracts/protocols/curve/common/Imports.sol\\\";\\n\\nimport {CurveIronBankConstants} from \\\"./Constants.sol\\\";\\n\\ncontract CurveIronBankAllocation is\\n    CurveAllocationBase,\\n    ImmutableAssetAllocation,\\n    CurveIronBankConstants\\n{\\n    function balanceOf(address account, uint8 tokenIndex)\\n        public\\n        view\\n        override\\n        returns (uint256)\\n    {\\n        uint256 cyBalance =\\n            super.getUnderlyerBalance(\\n                account,\\n                IStableSwap(STABLE_SWAP_ADDRESS),\\n                ILiquidityGauge(LIQUIDITY_GAUGE_ADDRESS),\\n                IERC20(LP_TOKEN_ADDRESS),\\n                uint256(tokenIndex)\\n            );\\n        return unwrapBalance(cyBalance, tokenIndex);\\n    }\\n\\n    function unwrapBalance(uint256 balance, uint8 tokenIndex)\\n        public\\n        view\\n        returns (uint256)\\n    {\\n        IStableSwap pool = IStableSwap(STABLE_SWAP_ADDRESS);\\n        CTokenInterface cyToken = CTokenInterface(pool.coins(tokenIndex));\\n        return balance.mul(cyToken.exchangeRateStored());\\n    }\\n\\n    function _getTokenData()\\n        internal\\n        pure\\n        override\\n        returns (TokenData[] memory)\\n    {\\n        TokenData[] memory tokens = new TokenData[](3);\\n        tokens[0] = TokenData(DAI_ADDRESS, \\\"DAI\\\", 18);\\n        tokens[1] = TokenData(USDC_ADDRESS, \\\"USDC\\\", 6);\\n        tokens[2] = TokenData(USDT_ADDRESS, \\\"USDT\\\", 6);\\n        return tokens;\\n    }\\n}\\n\"\r\n    },\r\n    \"contracts/protocols/curve/ironbank/Constants.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: BUSDL-1.1\\npragma solidity 0.6.11;\\n\\nimport {INameIdentifier} from \\\"contracts/common/Imports.sol\\\";\\nimport {\\n    Curve3PoolUnderlyerConstants\\n} from \\\"contracts/protocols/curve/3pool/Constants.sol\\\";\\n\\nabstract contract CurveIronBankConstants is\\n    Curve3PoolUnderlyerConstants,\\n    INameIdentifier\\n{\\n    string public constant override NAME = \\\"curve-ironbank\\\";\\n\\n    address public constant STABLE_SWAP_ADDRESS =\\n        0x2dded6Da1BF5DBdF597C45fcFaa3194e53EcfeAF;\\n    address public constant LP_TOKEN_ADDRESS =\\n        0x5282a4eF67D9C33135340fB3289cc1711c13638C;\\n    address public constant LIQUIDITY_GAUGE_ADDRESS =\\n        0xF5194c3325202F456c95c1Cf0cA36f8475C1949F;\\n\\n    address public constant CYDAI_ADDRESS =\\n        0x8e595470Ed749b85C6F7669de83EAe304C2ec68F;\\n    address public constant CYUSDC_ADDRESS =\\n        0x76Eb2FE28b36B3ee97F3Adae0C69606eeDB2A37c;\\n    address public constant CYUSDT_ADDRESS =\\n        0x48759F220ED983dB51fA7A8C0D2AAb8f3ce4166a;\\n}\\n\"\r\n    },\r\n    \"contracts/protocols/curve/ironbank/Zap.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: BUSDL-1.1\\npragma solidity 0.6.11;\\npragma experimental ABIEncoderV2;\\n\\nimport {IERC20} from \\\"@openzeppelin/contracts/token/ERC20/IERC20.sol\\\";\\nimport {IAssetAllocation} from \\\"contracts/common/Imports.sol\\\";\\nimport {\\n    IStableSwap,\\n    ILiquidityGauge\\n} from \\\"contracts/protocols/curve/common/interfaces/Imports.sol\\\";\\nimport {CurveIronBankConstants} from \\\"./Constants.sol\\\";\\nimport {CurveGaugeZapBase} from \\\"contracts/protocols/curve/common/Imports.sol\\\";\\n\\ncontract IronBankPoolZap is CurveGaugeZapBase, CurveIronBankConstants {\\n    constructor()\\n        public\\n        CurveGaugeZapBase(\\n            STABLE_SWAP_ADDRESS,\\n            LP_TOKEN_ADDRESS,\\n            LIQUIDITY_GAUGE_ADDRESS,\\n            10000,\\n            100,\\n            3\\n        ) // solhint-disable-next-line no-empty-blocks\\n    {}\\n\\n    function assetAllocations() public view override returns (string[] memory) {\\n        string[] memory allocationNames = new string[](1);\\n        allocationNames[0] = NAME;\\n        return allocationNames;\\n    }\\n\\n    function erc20Allocations() public view override returns (IERC20[] memory) {\\n        IERC20[] memory allocations = _createErc20AllocationArray(0);\\n        return allocations;\\n    }\\n\\n    function _getVirtualPrice() internal view override returns (uint256) {\\n        return IStableSwap(SWAP_ADDRESS).get_virtual_price();\\n    }\\n\\n    function _getCoinAtIndex(uint256 i)\\n        internal\\n        view\\n        override\\n        returns (address)\\n    {\\n        return IStableSwap(SWAP_ADDRESS).underlying_coins(i);\\n    }\\n\\n    function _addLiquidity(uint256[] calldata amounts, uint256 minAmount)\\n        internal\\n        override\\n    {\\n        IStableSwap(SWAP_ADDRESS).add_liquidity(\\n            [amounts[0], amounts[1], amounts[2]],\\n            minAmount,\\n            true\\n        );\\n    }\\n\\n    function _removeLiquidity(\\n        uint256 lpBalance,\\n        uint8 index,\\n        uint256 minAmount\\n    ) internal override {\\n        require(index < N_COINS, \\\"INVALID_INDEX\\\");\\n        IStableSwap(SWAP_ADDRESS).remove_liquidity_one_coin(\\n            lpBalance,\\n            index,\\n            minAmount,\\n            true\\n        );\\n    }\\n}\\n\"\r\n    },\r\n    \"contracts/protocols/curve/compound/Allocation.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: BUSDL-1.1\\npragma solidity 0.6.11;\\npragma experimental ABIEncoderV2;\\n\\nimport {IERC20} from \\\"contracts/common/Imports.sol\\\";\\nimport {SafeMath} from \\\"contracts/libraries/Imports.sol\\\";\\nimport {ImmutableAssetAllocation} from \\\"contracts/tvl/Imports.sol\\\";\\n\\nimport {\\n    CTokenInterface,\\n    IOldStableSwap2,\\n    ILiquidityGauge\\n} from \\\"contracts/protocols/curve/common/interfaces/Imports.sol\\\";\\n\\nimport {\\n    OldCurveAllocationBase2\\n} from \\\"contracts/protocols/curve/common/Imports.sol\\\";\\n\\nimport {CurveCompoundConstants} from \\\"./Constants.sol\\\";\\n\\ncontract CurveCompoundAllocation is\\n    OldCurveAllocationBase2,\\n    ImmutableAssetAllocation,\\n    CurveCompoundConstants\\n{\\n    function balanceOf(address account, uint8 tokenIndex)\\n        public\\n        view\\n        override\\n        returns (uint256)\\n    {\\n        uint256 cyBalance =\\n            super.getUnderlyerBalance(\\n                account,\\n                IOldStableSwap2(STABLE_SWAP_ADDRESS),\\n                ILiquidityGauge(LIQUIDITY_GAUGE_ADDRESS),\\n                IERC20(LP_TOKEN_ADDRESS),\\n                tokenIndex\\n            );\\n        return unwrapBalance(cyBalance, tokenIndex);\\n    }\\n\\n    function unwrapBalance(uint256 balance, uint8 tokenIndex)\\n        public\\n        view\\n        returns (uint256)\\n    {\\n        IOldStableSwap2 pool = IOldStableSwap2(STABLE_SWAP_ADDRESS);\\n        CTokenInterface cyToken = CTokenInterface(pool.coins(tokenIndex));\\n        return balance.mul(cyToken.exchangeRateStored());\\n    }\\n\\n    function _getTokenData()\\n        internal\\n        pure\\n        override\\n        returns (TokenData[] memory)\\n    {\\n        TokenData[] memory tokens = new TokenData[](2);\\n        tokens[0] = TokenData(DAI_ADDRESS, \\\"DAI\\\", 18);\\n        tokens[1] = TokenData(USDC_ADDRESS, \\\"USDC\\\", 6);\\n        return tokens;\\n    }\\n}\\n\"\r\n    },\r\n    \"contracts/protocols/curve/compound/Constants.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: BUSDL-1.1\\npragma solidity 0.6.11;\\n\\nimport {INameIdentifier} from \\\"contracts/common/Imports.sol\\\";\\nimport {\\n    Curve3PoolUnderlyerConstants\\n} from \\\"contracts/protocols/curve/3pool/Constants.sol\\\";\\n\\nabstract contract CurveCompoundConstants is\\n    Curve3PoolUnderlyerConstants,\\n    INameIdentifier\\n{\\n    string public constant override NAME = \\\"curve-compound\\\";\\n\\n    address public constant STABLE_SWAP_ADDRESS =\\n        0xA2B47E3D5c44877cca798226B7B8118F9BFb7A56;\\n    address public constant DEPOSIT_ZAP_ADDRESS =\\n        0xeB21209ae4C2c9FF2a86ACA31E123764A3B6Bc06;\\n    address public constant LP_TOKEN_ADDRESS =\\n        0x845838DF265Dcd2c412A1Dc9e959c7d08537f8a2;\\n    address public constant LIQUIDITY_GAUGE_ADDRESS =\\n        0x7ca5b0a2910B33e9759DC7dDB0413949071D7575;\\n\\n    address public constant CDAI_ADDRESS =\\n        0x5d3a536E4D6DbD6114cc1Ead35777bAB948E3643;\\n    address public constant CUSDC_ADDRESS =\\n        0x39AA39c021dfbaE8faC545936693aC917d5E7563;\\n}\\n\"\r\n    },\r\n    \"contracts/protocols/curve/compound/Zap.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: BUSDL-1.1\\npragma solidity 0.6.11;\\npragma experimental ABIEncoderV2;\\n\\nimport {IERC20} from \\\"@openzeppelin/contracts/token/ERC20/IERC20.sol\\\";\\nimport {IAssetAllocation} from \\\"contracts/common/Imports.sol\\\";\\nimport {SafeERC20, SafeMath} from \\\"contracts/libraries/Imports.sol\\\";\\nimport {\\n    IOldStableSwap2 as IStableSwap,\\n    IDepositZap,\\n    ILiquidityGauge\\n} from \\\"contracts/protocols/curve/common/interfaces/Imports.sol\\\";\\nimport {CurveCompoundConstants} from \\\"./Constants.sol\\\";\\nimport {CurveGaugeZapBase} from \\\"contracts/protocols/curve/common/Imports.sol\\\";\\n\\ncontract CompoundPoolZap is CurveGaugeZapBase, CurveCompoundConstants {\\n    using SafeMath for uint256;\\n    using SafeERC20 for IERC20;\\n\\n    constructor()\\n        public\\n        CurveGaugeZapBase(\\n            DEPOSIT_ZAP_ADDRESS,\\n            LP_TOKEN_ADDRESS,\\n            LIQUIDITY_GAUGE_ADDRESS,\\n            10000,\\n            100,\\n            2\\n        ) // solhint-disable-next-line no-empty-blocks\\n    {}\\n\\n    function assetAllocations() public view override returns (string[] memory) {\\n        string[] memory allocationNames = new string[](1);\\n        allocationNames[0] = NAME;\\n        return allocationNames;\\n    }\\n\\n    function erc20Allocations() public view override returns (IERC20[] memory) {\\n        IERC20[] memory allocations = _createErc20AllocationArray(0);\\n        return allocations;\\n    }\\n\\n    function _getVirtualPrice() internal view override returns (uint256) {\\n        address stableSwap = IDepositZap(SWAP_ADDRESS).curve();\\n        return IStableSwap(stableSwap).get_virtual_price();\\n    }\\n\\n    function _getCoinAtIndex(uint256 i)\\n        internal\\n        view\\n        override\\n        returns (address)\\n    {\\n        return IDepositZap(SWAP_ADDRESS).underlying_coins(int128(i));\\n    }\\n\\n    function _addLiquidity(uint256[] calldata amounts, uint256 minAmount)\\n        internal\\n        override\\n    {\\n        IDepositZap(SWAP_ADDRESS).add_liquidity(\\n            [amounts[0], amounts[1]],\\n            minAmount\\n        );\\n    }\\n\\n    function _removeLiquidity(\\n        uint256 lpBalance,\\n        uint8 index,\\n        uint256 minAmount\\n    ) internal override {\\n        IERC20(LP_TOKEN_ADDRESS).safeApprove(SWAP_ADDRESS, 0);\\n        IERC20(LP_TOKEN_ADDRESS).safeApprove(SWAP_ADDRESS, lpBalance);\\n        IDepositZap(SWAP_ADDRESS).remove_liquidity_one_coin(\\n            lpBalance,\\n            index,\\n            minAmount\\n        );\\n    }\\n}\\n\"\r\n    },\r\n    \"contracts/protocols/curve/aave/Allocation.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: BUSDL-1.1\\npragma solidity 0.6.11;\\npragma experimental ABIEncoderV2;\\n\\nimport {IERC20} from \\\"contracts/common/Imports.sol\\\";\\nimport {SafeMath} from \\\"contracts/libraries/Imports.sol\\\";\\nimport {ImmutableAssetAllocation} from \\\"contracts/tvl/Imports.sol\\\";\\n\\nimport {\\n    IStableSwap3,\\n    ILiquidityGauge\\n} from \\\"contracts/protocols/curve/common/interfaces/Imports.sol\\\";\\n\\nimport {\\n    CurveAllocationBase3\\n} from \\\"contracts/protocols/curve/common/Imports.sol\\\";\\n\\nimport {CurveAaveConstants} from \\\"./Constants.sol\\\";\\n\\ncontract CurveAaveAllocation is\\n    CurveAllocationBase3,\\n    ImmutableAssetAllocation,\\n    CurveAaveConstants\\n{\\n    function balanceOf(address account, uint8 tokenIndex)\\n        public\\n        view\\n        override\\n        returns (uint256)\\n    {\\n        // No unwrapping of aTokens are needed, as `balanceOf`\\n        // automagically reflects the accrued interest and\\n        // aTokens convert 1:1 to the underlyer.\\n        return\\n            super.getUnderlyerBalance(\\n                account,\\n                IStableSwap3(STABLE_SWAP_ADDRESS),\\n                ILiquidityGauge(LIQUIDITY_GAUGE_ADDRESS),\\n                IERC20(LP_TOKEN_ADDRESS),\\n                uint256(tokenIndex)\\n            );\\n    }\\n\\n    function _getTokenData()\\n        internal\\n        pure\\n        override\\n        returns (TokenData[] memory)\\n    {\\n        TokenData[] memory tokens = new TokenData[](3);\\n        tokens[0] = TokenData(DAI_ADDRESS, \\\"DAI\\\", 18);\\n        tokens[1] = TokenData(USDC_ADDRESS, \\\"USDC\\\", 6);\\n        tokens[2] = TokenData(USDT_ADDRESS, \\\"USDT\\\", 6);\\n        return tokens;\\n    }\\n}\\n\"\r\n    },\r\n    \"contracts/protocols/curve/aave/Constants.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: BUSDL-1.1\\npragma solidity 0.6.11;\\n\\nimport {INameIdentifier} from \\\"contracts/common/Imports.sol\\\";\\nimport {\\n    Curve3PoolUnderlyerConstants\\n} from \\\"contracts/protocols/curve/3pool/Constants.sol\\\";\\n\\nabstract contract CurveAaveConstants is\\n    Curve3PoolUnderlyerConstants,\\n    INameIdentifier\\n{\\n    string public constant override NAME = \\\"curve-aave\\\";\\n\\n    address public constant STABLE_SWAP_ADDRESS =\\n        0xDeBF20617708857ebe4F679508E7b7863a8A8EeE;\\n    address public constant LP_TOKEN_ADDRESS =\\n        0xFd2a8fA60Abd58Efe3EeE34dd494cD491dC14900;\\n    address public constant LIQUIDITY_GAUGE_ADDRESS =\\n        0xd662908ADA2Ea1916B3318327A97eB18aD588b5d;\\n\\n    address public constant STKAAVE_ADDRESS =\\n        0x4da27a545c0c5B758a6BA100e3a049001de870f5;\\n    address public constant ADAI_ADDRESS =\\n        0x028171bCA77440897B824Ca71D1c56caC55b68A3;\\n    address public constant AUSDC_ADDRESS =\\n        0xBcca60bB61934080951369a648Fb03DF4F96263C;\\n    address public constant AUSDT_ADDRESS =\\n        0x3Ed3B47Dd13EC9a98b44e6204A523E766B225811;\\n}\\n\"\r\n    },\r\n    \"contracts/protocols/curve/aave/Zap.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: BUSDL-1.1\\npragma solidity 0.6.11;\\npragma experimental ABIEncoderV2;\\n\\nimport {IERC20} from \\\"@openzeppelin/contracts/token/ERC20/IERC20.sol\\\";\\nimport {IAssetAllocation} from \\\"contracts/common/Imports.sol\\\";\\nimport {\\n    IStableSwap,\\n    ILiquidityGauge\\n} from \\\"contracts/protocols/curve/common/interfaces/Imports.sol\\\";\\nimport {CurveAaveConstants} from \\\"./Constants.sol\\\";\\nimport {CurveGaugeZapBase} from \\\"contracts/protocols/curve/common/Imports.sol\\\";\\n\\ncontract AavePoolZap is CurveGaugeZapBase, CurveAaveConstants {\\n    string internal constant AAVE_ALLOCATION = \\\"aave\\\";\\n\\n    constructor()\\n        public\\n        CurveGaugeZapBase(\\n            STABLE_SWAP_ADDRESS,\\n            LP_TOKEN_ADDRESS,\\n            LIQUIDITY_GAUGE_ADDRESS,\\n            10000,\\n            100,\\n            3\\n        ) // solhint-disable-next-line no-empty-blocks\\n    {}\\n\\n    function assetAllocations() public view override returns (string[] memory) {\\n        string[] memory allocationNames = new string[](2);\\n        allocationNames[0] = NAME;\\n        allocationNames[1] = AAVE_ALLOCATION;\\n        return allocationNames;\\n    }\\n\\n    function erc20Allocations() public view override returns (IERC20[] memory) {\\n        IERC20[] memory allocations = _createErc20AllocationArray(0);\\n        return allocations;\\n    }\\n\\n    function _getVirtualPrice() internal view override returns (uint256) {\\n        return IStableSwap(SWAP_ADDRESS).get_virtual_price();\\n    }\\n\\n    function _getCoinAtIndex(uint256 i)\\n        internal\\n        view\\n        override\\n        returns (address)\\n    {\\n        return IStableSwap(SWAP_ADDRESS).underlying_coins(i);\\n    }\\n\\n    function _addLiquidity(uint256[] calldata amounts, uint256 minAmount)\\n        internal\\n        override\\n    {\\n        IStableSwap(SWAP_ADDRESS).add_liquidity(\\n            [amounts[0], amounts[1], amounts[2]],\\n            minAmount,\\n            true\\n        );\\n    }\\n\\n    function _removeLiquidity(\\n        uint256 lpBalance,\\n        uint8 index,\\n        uint256 minAmount\\n    ) internal override {\\n        require(index < 3, \\\"INVALID_INDEX\\\");\\n        IStableSwap(SWAP_ADDRESS).remove_liquidity_one_coin(\\n            lpBalance,\\n            index,\\n            minAmount,\\n            true\\n        );\\n    }\\n\\n    /**\\n     * @dev claim protocol-specific rewards; stkAAVE in this case.\\n     *      CRV rewards are always claimed through the minter, in\\n     *      the `CurveBasePoolGauge` implementation.\\n     */\\n    function _claimRewards() internal override {\\n        ILiquidityGauge liquidityGauge = ILiquidityGauge(GAUGE_ADDRESS);\\n        liquidityGauge.claim_rewards();\\n    }\\n}\\n\"\r\n    },\r\n    \"contracts/protocols/aave/Allocation.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: BUSDL-1.1\\npragma solidity 0.6.11;\\npragma experimental ABIEncoderV2;\\n\\nimport {INameIdentifier, IERC20} from \\\"contracts/common/Imports.sol\\\";\\nimport {SafeMath} from \\\"contracts/libraries/Imports.sol\\\";\\nimport {ImmutableAssetAllocation} from \\\"contracts/tvl/Imports.sol\\\";\\nimport {ApyUnderlyerConstants} from \\\"contracts/protocols/apy.sol\\\";\\n\\nimport {ILendingPool, DataTypes} from \\\"./common/interfaces/ILendingPool.sol\\\";\\nimport {AaveConstants} from \\\"./Constants.sol\\\";\\nimport {AaveAllocationBase} from \\\"./common/AaveAllocationBase.sol\\\";\\n\\ncontract AaveStableCoinAllocation is\\n    AaveAllocationBase,\\n    ImmutableAssetAllocation,\\n    AaveConstants,\\n    ApyUnderlyerConstants\\n{\\n    function balanceOf(address account, uint8 tokenIndex)\\n        external\\n        view\\n        override\\n        returns (uint256)\\n    {\\n        address underlyer = addressOf(tokenIndex);\\n        return\\n            super.getUnderlyerBalance(\\n                account,\\n                ILendingPool(LENDING_POOL_ADDRESS),\\n                underlyer\\n            );\\n    }\\n\\n    function _getTokenData()\\n        internal\\n        pure\\n        override\\n        returns (TokenData[] memory)\\n    {\\n        TokenData[] memory tokens = new TokenData[](4);\\n        tokens[0] = TokenData(DAI_ADDRESS, DAI_SYMBOL, DAI_DECIMALS);\\n        tokens[1] = TokenData(USDC_ADDRESS, USDC_SYMBOL, USDC_DECIMALS);\\n        tokens[2] = TokenData(USDT_ADDRESS, USDT_SYMBOL, USDT_DECIMALS);\\n        tokens[3] = TokenData(SUSD_ADDRESS, SUSD_SYMBOL, SUSD_DECIMALS);\\n        return tokens;\\n    }\\n}\\n\"\r\n    },\r\n    \"contracts/protocols/apy.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: BUSDL-1.1\\npragma solidity 0.6.11;\\n\\nabstract contract ApyUnderlyerConstants {\\n    address public constant DAI_ADDRESS =\\n        0x6B175474E89094C44Da98b954EedeAC495271d0F;\\n    string public constant DAI_SYMBOL = \\\"DAI\\\";\\n    uint8 public constant DAI_DECIMALS = 18;\\n\\n    address public constant USDC_ADDRESS =\\n        0xA0b86991c6218b36c1d19D4a2e9Eb0cE3606eB48;\\n    string public constant USDC_SYMBOL = \\\"USDC\\\";\\n    uint8 public constant USDC_DECIMALS = 6;\\n\\n    address public constant USDT_ADDRESS =\\n        0xdAC17F958D2ee523a2206206994597C13D831ec7;\\n    string public constant USDT_SYMBOL = \\\"USDT\\\";\\n    uint8 public constant USDT_DECIMALS = 6;\\n}\\n\"\r\n    },\r\n    \"contracts/protocols/aave/common/interfaces/ILendingPool.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: agpl-3.0\\npragma solidity 0.6.11;\\npragma experimental ABIEncoderV2;\\n\\nimport {DataTypes} from \\\"../DataTypes.sol\\\";\\n\\n/**\\n * @notice the lending pool contract\\n */\\ninterface ILendingPool {\\n    /**\\n     * @notice Deposits a certain amount of an asset into the protocol, minting\\n     * the same amount of corresponding aTokens, and transferring them\\n     * to the onBehalfOf address.\\n     * E.g. User deposits 100 USDC and gets in return 100 aUSDC\\n     * @dev When depositing, the LendingPool contract must have at least an\\n     * allowance() of amount for the asset being deposited.\\n     * During testing, you can use the referral code: 0.\\n     * @param asset The address of the underlying asset to deposit\\n     * @param amount The amount to be deposited\\n     * @param onBehalfOf The address that will receive the aTokens, same as msg.sender if the user\\n     * wants to receive them on his own wallet, or a different address if the beneficiary of aTokens\\n     * is a different wallet\\n     * @param referralCode Code used to register the integrator originating the operation, for potential rewards.\\n     * 0 if the action is executed directly by the user, without any middle-man\\n     */\\n    function deposit(\\n        address asset,\\n        uint256 amount,\\n        address onBehalfOf,\\n        uint16 referralCode\\n    ) external;\\n\\n    /**\\n     * @notice Withdraws an `amount` of underlying asset from the reserve, burning\\n     * the equivalent aTokens owned.\\n     * E.g. User has 100 aUSDC, calls withdraw() and receives 100 USDC,\\n     * burning the 100 aUSDC\\n     * @dev Ensure you set the relevant ERC20 allowance of the aToken,\\n     * before calling this function, so the LendingPool\\n     * contract can burn the associated aTokens.\\n     * @param asset The address of the underlying asset to withdraw\\n     * @param amount The underlying amount to be withdrawn\\n     * - Send the value type(uint256).max in order to withdraw the whole aToken balance\\n     * @param to Address that will receive the underlying, same as msg.sender if the user\\n     * wants to receive it on his own wallet, or a different address if the beneficiary is a\\n     * different wallet\\n     * @return The final amount withdrawn\\n     */\\n    function withdraw(\\n        address asset,\\n        uint256 amount,\\n        address to\\n    ) external returns (uint256);\\n\\n    /**\\n     * @dev Returns the state and configuration of the reserve\\n     * @param asset The address of the underlying asset of the reserve\\n     * @return The state of the reserve\\n     **/\\n    function getReserveData(address asset)\\n        external\\n        view\\n        returns (DataTypes.ReserveData memory);\\n}\\n\"\r\n    },\r\n    \"contracts/protocols/aave/Constants.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: BUSDL-1.1\\npragma solidity 0.6.11;\\n\\nimport {INameIdentifier} from \\\"contracts/common/Imports.sol\\\";\\n\\nabstract contract AaveConstants is INameIdentifier {\\n    string public constant override NAME = \\\"aave\\\";\\n\\n    address public constant LENDING_POOL_ADDRESS =\\n        0x7d2768dE32b0b80b7a3454c06BdAc94A69DDc7A9;\\n\\n    address public constant AAVE_ADDRESS =\\n        0x7Fc66500c84A76Ad7e9c93437bFc5Ac33E2DDaE9;\\n    address public constant STAKED_AAVE_ADDRESS =\\n        0x4da27a545c0c5B758a6BA100e3a049001de870f5;\\n\\n    address public constant STAKED_INCENTIVES_CONTROLLER_ADDRESS =\\n        0xd784927Ff2f95ba542BfC824c8a8a98F3495f6b5;\\n\\n    address public constant SUSD_ADDRESS =\\n        0x57Ab1ec28D129707052df4dF418D58a2D46d5f51;\\n    string public constant SUSD_SYMBOL = \\\"sUSD\\\";\\n    uint8 public constant SUSD_DECIMALS = 18;\\n}\\n\"\r\n    },\r\n    \"contracts/protocols/aave/common/AaveAllocationBase.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: BUSDL-1.1\\npragma solidity 0.6.11;\\npragma experimental ABIEncoderV2;\\n\\nimport {IERC20} from \\\"contracts/common/Imports.sol\\\";\\nimport {SafeMath} from \\\"contracts/libraries/Imports.sol\\\";\\n\\nimport {\\n    ILendingPool,\\n    DataTypes\\n} from \\\"contracts/protocols/aave/common/interfaces/ILendingPool.sol\\\";\\nimport {ApyUnderlyerConstants} from \\\"contracts/protocols/apy.sol\\\";\\n\\n/**\\n * @title Periphery Contract for the Aave lending pool\\n * @author APY.Finance\\n * @notice This contract enables the APY.Finance system to retrieve the balance\\n * of an underlyer of an Aave lending token. The balance is used as part\\n * of the Chainlink computation of the deployed TVL.  The primary\\n * `getUnderlyerBalance` function is invoked indirectly when a\\n * Chainlink node calls `balanceOf` on the APYAssetAllocationRegistry.\\n */\\ncontract AaveAllocationBase {\\n    using SafeMath for uint256;\\n\\n    /**\\n     * @notice Returns the balance of an underlying token represented by\\n     * an account's aToken balance\\n     * @dev aTokens represent the underlyer amount at par (1-1), growing with interest.\\n     * @param underlyer address of the underlying asset of the aToken\\n     * @param pool Aave lending pool\\n     * @return balance\\n     */\\n    function getUnderlyerBalance(\\n        address account,\\n        ILendingPool pool,\\n        address underlyer\\n    ) public view returns (uint256) {\\n        require(account != address(0), \\\"INVALID_ACCOUNT\\\");\\n        require(address(pool) != address(0), \\\"INVALID_POOL\\\");\\n        require(underlyer != address(0), \\\"INVALID_UNDERLYER\\\");\\n\\n        DataTypes.ReserveData memory reserve = pool.getReserveData(underlyer);\\n        address aToken = reserve.aTokenAddress;\\n        // No unwrapping of aTokens are needed, as `balanceOf`\\n        // automagically reflects the accrued interest and\\n        // aTokens convert 1:1 to the underlyer.\\n        return IERC20(aToken).balanceOf(account);\\n    }\\n}\\n\"\r\n    },\r\n    \"contracts/protocols/aave/common/DataTypes.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: agpl-3.0\\npragma solidity 0.6.11;\\n\\nlibrary DataTypes {\\n    // refer to the whitepaper, section 1.1 basic concepts for a formal description of these properties.\\n    struct ReserveData {\\n        //stores the reserve configuration\\n        ReserveConfigurationMap configuration;\\n        //the liquidity index. Expressed in ray\\n        uint128 liquidityIndex;\\n        //variable borrow index. Expressed in ray\\n        uint128 variableBorrowIndex;\\n        //the current supply rate. Expressed in ray\\n        uint128 currentLiquidityRate;\\n        //the current variable borrow rate. Expressed in ray\\n        uint128 currentVariableBorrowRate;\\n        //the current stable borrow rate. Expressed in ray\\n        uint128 currentStableBorrowRate;\\n        uint40 lastUpdateTimestamp;\\n        //tokens addresses\\n        address aTokenAddress;\\n        address stableDebtTokenAddress;\\n        address variableDebtTokenAddress;\\n        //address of the interest rate strategy\\n        address interestRateStrategyAddress;\\n        //the id of the reserve. Represents the position in the list of the active reserves\\n        uint8 id;\\n    }\\n\\n    struct ReserveConfigurationMap {\\n        //bit 0-15: LTV\\n        //bit 16-31: Liq. threshold\\n        //bit 32-47: Liq. bonus\\n        //bit 48-55: Decimals\\n        //bit 56: Reserve is active\\n        //bit 57: reserve is frozen\\n        //bit 58: borrowing is enabled\\n        //bit 59: stable rate borrowing enabled\\n        //bit 60-63: reserved\\n        //bit 64-79: reserve factor\\n        uint256 data;\\n    }\\n\\n    struct UserConfigurationMap {\\n        uint256 data;\\n    }\\n\\n    enum InterestRateMode {NONE, STABLE, VARIABLE}\\n}\\n\"\r\n    },\r\n    \"contracts/protocols/aave/usdt.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: BUSDL-1.1\\npragma solidity 0.6.11;\\npragma experimental ABIEncoderV2;\\n\\nimport {ApyUnderlyerConstants} from \\\"contracts/protocols/apy.sol\\\";\\n\\nimport {AaveBasePool} from \\\"./common/AaveBasePool.sol\\\";\\nimport {ApyUnderlyerConstants} from \\\"contracts/protocols/apy.sol\\\";\\n\\ncontract AaveUsdtZap is AaveBasePool, ApyUnderlyerConstants {\\n    constructor() public AaveBasePool(USDT_ADDRESS, LENDING_POOL_ADDRESS) {} // solhint-disable-line no-empty-blocks\\n}\\n\"\r\n    },\r\n    \"contracts/protocols/aave/common/AaveBasePool.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: BUSDL-1.1\\npragma solidity 0.6.11;\\npragma experimental ABIEncoderV2;\\n\\nimport {SafeMath} from \\\"contracts/libraries/Imports.sol\\\";\\nimport {IZap} from \\\"contracts/lpaccount/Imports.sol\\\";\\nimport {\\n    IAssetAllocation,\\n    IDetailedERC20,\\n    IERC20\\n} from \\\"contracts/common/Imports.sol\\\";\\nimport {SafeERC20} from \\\"contracts/libraries/Imports.sol\\\";\\nimport {ApyUnderlyerConstants} from \\\"contracts/protocols/apy.sol\\\";\\n\\nimport {ILendingPool, DataTypes} from \\\"./interfaces/ILendingPool.sol\\\";\\nimport {\\n    IAaveIncentivesController\\n} from \\\"./interfaces/IAaveIncentivesController.sol\\\";\\nimport {AaveConstants} from \\\"contracts/protocols/aave/Constants.sol\\\";\\n\\nabstract contract AaveBasePool is IZap, AaveConstants {\\n    using SafeMath for uint256;\\n    using SafeERC20 for IERC20;\\n\\n    address internal immutable UNDERLYER_ADDRESS;\\n    address internal immutable POOL_ADDRESS;\\n\\n    // TODO: think about including the AToken address to conserve gas\\n    // TODO: consider using IDetailedERC20 as the type instead of address for underlyer\\n\\n    constructor(address underlyerAddress, address lendingAddress) public {\\n        UNDERLYER_ADDRESS = underlyerAddress;\\n        POOL_ADDRESS = lendingAddress;\\n    }\\n\\n    /// @param amounts array of underlyer amounts\\n    function deployLiquidity(uint256[] calldata amounts) external override {\\n        require(amounts.length == 1, \\\"INVALID_AMOUNTS\\\");\\n        IERC20(UNDERLYER_ADDRESS).safeApprove(POOL_ADDRESS, 0);\\n        IERC20(UNDERLYER_ADDRESS).safeApprove(POOL_ADDRESS, amounts[0]);\\n        _deposit(amounts[0]);\\n    }\\n\\n    /// @param amount LP token amount\\n    function unwindLiquidity(uint256 amount, uint8 index) external override {\\n        require(index == 0, \\\"INVALID_INDEX\\\");\\n        _withdraw(amount);\\n    }\\n\\n    function claim() external virtual override {\\n        IAaveIncentivesController controller =\\n            IAaveIncentivesController(STAKED_INCENTIVES_CONTROLLER_ADDRESS);\\n        address[] memory assets = new address[](1);\\n        assets[0] = _getATokenAddress(UNDERLYER_ADDRESS);\\n        uint256 amount = controller.getRewardsBalance(assets, address(this));\\n        controller.claimRewards(assets, amount, address(this));\\n    }\\n\\n    function sortedSymbols() public view override returns (string[] memory) {\\n        // so we have to hardcode the number here\\n        string[] memory symbols = new string[](1);\\n        symbols[0] = IDetailedERC20(UNDERLYER_ADDRESS).symbol();\\n        return symbols;\\n    }\\n\\n    function assetAllocations()\\n        public\\n        view\\n        virtual\\n        override\\n        returns (string[] memory)\\n    {\\n        string[] memory allocationNames = new string[](1);\\n        allocationNames[0] = NAME;\\n        return allocationNames;\\n    }\\n\\n    function erc20Allocations()\\n        public\\n        view\\n        virtual\\n        override\\n        returns (IERC20[] memory)\\n    {\\n        IERC20[] memory allocations = new IERC20[](1);\\n        allocations[0] = IERC20(UNDERLYER_ADDRESS);\\n        return allocations;\\n    }\\n\\n    function _deposit(uint256 amount) internal virtual {\\n        ILendingPool(POOL_ADDRESS).deposit(\\n            UNDERLYER_ADDRESS,\\n            amount,\\n            address(this),\\n            0\\n        );\\n    }\\n\\n    function _withdraw(uint256 lpBalance) internal virtual {\\n        ILendingPool(POOL_ADDRESS).withdraw(\\n            UNDERLYER_ADDRESS,\\n            lpBalance,\\n            address(this)\\n        );\\n    }\\n\\n    function _getATokenAddress(address underlyerAddress)\\n        internal\\n        view\\n        returns (address)\\n    {\\n        DataTypes.ReserveData memory reserveData =\\n            ILendingPool(POOL_ADDRESS).getReserveData(underlyerAddress);\\n        return reserveData.aTokenAddress;\\n    }\\n}\\n\"\r\n    },\r\n    \"contracts/protocols/aave/common/interfaces/IAaveIncentivesController.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: agpl-3.0\\npragma solidity 0.6.11;\\n\\npragma experimental ABIEncoderV2;\\n\\ninterface IAaveIncentivesController {\\n    /**\\n     * @dev Claims reward for an user, on all the assets of the lending pool, accumulating the pending rewards\\n     * @param assets addresses of the asset that accrue rewards, i.e. aTokens or debtTokens.\\n     * @param amount Amount of rewards to claim\\n     * @param to Address that will be receiving the rewards\\n     * @return Rewards claimed\\n     **/\\n    function claimRewards(\\n        address[] calldata assets,\\n        uint256 amount,\\n        address to\\n    ) external returns (uint256);\\n\\n    /**\\n     * @dev Claims reward for an user on behalf, on all the assets of the lending pool, accumulating the pending rewards. The caller must\\n     * be whitelisted via \\\"allowClaimOnBehalf\\\" function by the RewardsAdmin role manager\\n     * @param assets addresses of the asset that accrue rewards, i.e. aTokens or debtTokens.\\n     * @param amount Amount of rewards to claim\\n     * @param user Address to check and claim rewards\\n     * @param to Address that will be receiving the rewards\\n     * @return Rewards claimed\\n     **/\\n    function claimRewardsOnBehalf(\\n        address[] calldata assets,\\n        uint256 amount,\\n        address user,\\n        address to\\n    ) external returns (uint256);\\n\\n    /**\\n     * @dev Returns the total of rewards of an user, already accrued + not yet accrued\\n     * @param assets addresses of the asset that accrue rewards, i.e. aTokens or debtTokens.\\n     * @param user The address of the user\\n     * @return The rewards\\n     **/\\n    function getRewardsBalance(address[] calldata assets, address user)\\n        external\\n        view\\n        returns (uint256);\\n\\n    /**\\n     * @dev returns the unclaimed rewards of the user\\n     * @param user the address of the user\\n     * @return the unclaimed user rewards\\n     */\\n    function getUserUnclaimedRewards(address user)\\n        external\\n        view\\n        returns (uint256);\\n}\\n\"\r\n    },\r\n    \"contracts/protocols/aave/usdc.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: BUSDL-1.1\\npragma solidity 0.6.11;\\npragma experimental ABIEncoderV2;\\n\\nimport {ApyUnderlyerConstants} from \\\"contracts/protocols/apy.sol\\\";\\n\\nimport {AaveBasePool} from \\\"./common/AaveBasePool.sol\\\";\\nimport {ApyUnderlyerConstants} from \\\"contracts/protocols/apy.sol\\\";\\n\\ncontract AaveUsdcZap is AaveBasePool, ApyUnderlyerConstants {\\n    constructor() public AaveBasePool(USDC_ADDRESS, LENDING_POOL_ADDRESS) {} // solhint-disable-line no-empty-blocks\\n}\\n\"\r\n    },\r\n    \"contracts/protocols/aave/stkAave.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: BUSDL-1.1\\npragma solidity 0.6.11;\\npragma experimental ABIEncoderV2;\\n\\nimport {IAssetAllocation, IERC20} from \\\"contracts/common/Imports.sol\\\";\\nimport {ApyUnderlyerConstants} from \\\"contracts/protocols/apy.sol\\\";\\n\\nimport {IStakedAave} from \\\"./common/interfaces/IStakedAave.sol\\\";\\nimport {AaveBasePool} from \\\"./common/AaveBasePool.sol\\\";\\n\\ncontract StakedAaveZap is AaveBasePool {\\n    event WithdrawSucceeded(uint256 amount);\\n    event CooldownFromWithdrawFail(uint256 timestamp);\\n\\n    constructor()\\n        public\\n        AaveBasePool(\\n            AAVE_ADDRESS, // underlyer\\n            STAKED_AAVE_ADDRESS // \\\"pool\\\"\\n        )\\n    {} // solhint-disable-line no-empty-blocks\\n\\n    // solhint-disable-next-line no-empty-blocks\\n    function claim() external virtual override {\\n        IStakedAave stkAave = IStakedAave(POOL_ADDRESS);\\n        uint256 amount = stkAave.getTotalRewardsBalance(address(this));\\n        stkAave.claimRewards(address(this), amount);\\n    }\\n\\n    function assetAllocations() public view override returns (string[] memory) {\\n        return new string[](0);\\n    }\\n\\n    /// @dev track only unstaked AAVE\\n    function erc20Allocations() public view override returns (IERC20[] memory) {\\n        IERC20[] memory allocations = new IERC20[](1);\\n        allocations[0] = IERC20(UNDERLYER_ADDRESS);\\n        return allocations;\\n    }\\n\\n    function _deposit(uint256 amount) internal override {\\n        IStakedAave(POOL_ADDRESS).stake(address(this), amount);\\n    }\\n\\n    function _withdraw(uint256 amount) internal override {\\n        IStakedAave stkAave = IStakedAave(POOL_ADDRESS);\\n        try stkAave.redeem(address(this), amount) {\\n            emit WithdrawSucceeded(amount);\\n        } catch Error(string memory reason) {\\n            if (\\n                keccak256(bytes(reason)) ==\\n                keccak256(bytes(\\\"UNSTAKE_WINDOW_FINISHED\\\"))\\n            ) {\\n                // Either there's never been a cooldown or it expired\\n                // and the unstake window also finished.\\n                stkAave.cooldown();\\n                emit CooldownFromWithdrawFail(block.timestamp); // solhint-disable-line not-rely-on-time\\n            } else if (\\n                keccak256(bytes(reason)) ==\\n                keccak256(bytes(\\\"INSUFFICIENT_COOLDOWN\\\"))\\n            ) {\\n                // Still within the cooldown period; this is expected to\\n                // happen often, so we single this case out for better\\n                // understanding and possible future refactoring.\\n                revert(reason);\\n            } else {\\n                revert(reason);\\n            }\\n        } catch (bytes memory) {\\n            revert(\\\"STKAAVE_UNKNOWN_REASON\\\");\\n        }\\n    }\\n}\\n\"\r\n    },\r\n    \"contracts/protocols/aave/common/interfaces/IStakedAave.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: agpl-3.0\\npragma solidity 0.6.11;\\n\\nimport {IDetailedERC20} from \\\"contracts/common/Imports.sol\\\";\\n\\ninterface IStakedAave is IDetailedERC20 {\\n    /**\\n     * Stakes `amount` of AAVE tokens, sending the stkAAVE to `to`\\n     * Note: the msg.sender must already have a balance of AAVE token.\\n     */\\n    function stake(address to, uint256 amount) external;\\n\\n    /**\\n     * @dev Redeems staked tokens, and stop earning rewards\\n     * @param to Address to redeem to\\n     * @param amount Amount to redeem\\n     */\\n    function redeem(address to, uint256 amount) external;\\n\\n    /**\\n     * @dev Activates the cooldown period to unstake\\n     * - It can't be called if the user is not staking\\n     */\\n    function cooldown() external;\\n\\n    /**\\n     * @dev Claims an `amount` of `REWARD_TOKEN` to the address `to`\\n     * @param to Address to stake for\\n     * @param amount Amount to stake\\n     */\\n    function claimRewards(address to, uint256 amount) external;\\n\\n    /**\\n     * Returns the current minimum cool down time needed to\\n     * elapse before a staker is able to unstake their tokens.\\n     * As of October 2020, the current COOLDOWN_SECONDS value is\\n     * 864000 seconds (i.e. 10 days). This value should always\\n     * be checked directly from the contracts.\\n     */\\n    //solhint-disable-next-line func-name-mixedcase\\n    function COOLDOWN_SECONDS() external view returns (uint256);\\n\\n    /**\\n     * Returns the maximum window of time in seconds that a staker can\\n     * redeem() their stake once a cooldown() period has been completed.\\n     * As of October 2020, the current UNSTAKE_WINDOW value is\\n     * 172800 seconds (i.e. 2 days). This value should always be checked\\n     * directly from the contracts.\\n     */\\n    //solhint-disable-next-line func-name-mixedcase\\n    function UNSTAKE_WINDOW() external view returns (uint256);\\n\\n    /**\\n     * @notice Returns the total rewards that are pending to be claimed by a staker.\\n     * @param staker the staker's address\\n     */\\n    function getTotalRewardsBalance(address staker)\\n        external\\n        view\\n        returns (uint256);\\n\\n    function stakersCooldowns(address staker) external view returns (uint256);\\n}\\n\"\r\n    },\r\n    \"contracts/protocols/aave/dai.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: BUSDL-1.1\\npragma solidity 0.6.11;\\npragma experimental ABIEncoderV2;\\n\\nimport {ApyUnderlyerConstants} from \\\"contracts/protocols/apy.sol\\\";\\n\\nimport {AaveBasePool} from \\\"./common/AaveBasePool.sol\\\";\\nimport {ApyUnderlyerConstants} from \\\"contracts/protocols/apy.sol\\\";\\n\\ncontract AaveDaiZap is AaveBasePool, ApyUnderlyerConstants {\\n    constructor() public AaveBasePool(DAI_ADDRESS, LENDING_POOL_ADDRESS) {} // solhint-disable-line no-empty-blocks\\n}\\n\"\r\n    },\r\n    \"contracts/protocols/aave/common/TestAaveZap.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: BUSDL-1.1\\npragma solidity 0.6.11;\\npragma experimental ABIEncoderV2;\\n\\nimport {IERC20} from \\\"@openzeppelin/contracts/token/ERC20/IERC20.sol\\\";\\nimport {IAssetAllocation} from \\\"contracts/common/Imports.sol\\\";\\n\\nimport {AaveBasePool} from \\\"./AaveBasePool.sol\\\";\\n\\ncontract TestAaveZap is AaveBasePool {\\n    constructor(address underlyerAddress, address lendingAddress)\\n        public\\n        AaveBasePool(underlyerAddress, lendingAddress)\\n    // solhint-disable-next-line no-empty-blocks\\n    {\\n\\n    }\\n\\n    function getUnderlyerAddress() external view returns (address) {\\n        return UNDERLYER_ADDRESS;\\n    }\\n\\n    function getLendingAddress() external view returns (address) {\\n        return POOL_ADDRESS;\\n    }\\n\\n    function assetAllocations() public view override returns (string[] memory) {\\n        return new string[](0);\\n    }\\n\\n    function erc20Allocations() public view override returns (IERC20[] memory) {\\n        IERC20[] memory allocations = new IERC20[](0);\\n        return allocations;\\n    }\\n\\n    // solhint-disable-next-line no-empty-blocks\\n    function _deposit(uint256 amount) internal virtual override {}\\n\\n    // solhint-disable-next-line no-empty-blocks\\n    function _withdraw(uint256 lpBalance) internal virtual override {}\\n}\\n\"\r\n    },\r\n    \"contracts/tvl/TestImmutableAssetAllocation.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: BUSDL-1.1\\npragma solidity 0.6.11;\\npragma experimental ABIEncoderV2;\\n\\nimport {ImmutableAssetAllocation} from \\\"./ImmutableAssetAllocation.sol\\\";\\n\\ncontract TestImmutableAssetAllocation is ImmutableAssetAllocation {\\n    string public constant override NAME = \\\"testAllocation\\\";\\n\\n    function testGetTokenData() external pure returns (TokenData[] memory) {\\n        return _getTokenData();\\n    }\\n\\n    function balanceOf(address, uint8)\\n        external\\n        view\\n        override\\n        returns (uint256)\\n    {\\n        return 42;\\n    }\\n\\n    function _getTokenData()\\n        internal\\n        pure\\n        override\\n        returns (TokenData[] memory)\\n    {\\n        TokenData[] memory tokens_ = new TokenData[](2);\\n        tokens_[0] = TokenData(\\n            0xCAfEcAfeCAfECaFeCaFecaFecaFECafECafeCaFe,\\n            \\\"CAFE\\\",\\n            6\\n        );\\n        tokens_[1] = TokenData(\\n            0xBEeFbeefbEefbeEFbeEfbEEfBEeFbeEfBeEfBeef,\\n            \\\"BEEF\\\",\\n            8\\n        );\\n        return tokens_;\\n    }\\n\\n    function _validateTokenAddress(address) internal view override {\\n        return;\\n    }\\n}\\n\"\r\n    },\r\n    \"contracts/rewards/GovernanceToken.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: BUSDL-1.1\\npragma solidity 0.6.11;\\npragma experimental ABIEncoderV2;\\n\\nimport {\\n    OwnableUpgradeSafe\\n} from \\\"@openzeppelin/contracts-ethereum-package/contracts/access/Ownable.sol\\\";\\nimport {\\n    Initializable\\n} from \\\"@openzeppelin/contracts-ethereum-package/contracts/Initializable.sol\\\";\\nimport {\\n    ERC20UpgradeSafe\\n} from \\\"@openzeppelin/contracts-ethereum-package/contracts/token/ERC20/ERC20.sol\\\";\\n\\ncontract GovernanceToken is\\n    Initializable,\\n    OwnableUpgradeSafe,\\n    ERC20UpgradeSafe\\n{\\n    /* ------------------------------- */\\n    /* impl-specific storage variables */\\n    /* ------------------------------- */\\n    address public proxyAdmin;\\n\\n    /* ------------------------------- */\\n\\n    event AdminChanged(address);\\n\\n    modifier onlyAdmin() {\\n        require(msg.sender == proxyAdmin, \\\"ADMIN_ONLY\\\");\\n        _;\\n    }\\n\\n    receive() external payable {\\n        revert(\\\"DONT_SEND_ETHER\\\");\\n    }\\n\\n    function initialize(address adminAddress, uint256 totalSupply)\\n        external\\n        initializer\\n    {\\n        require(adminAddress != address(0), \\\"INVALID_ADMIN\\\");\\n\\n        // initialize ancestor storage\\n        __Context_init_unchained();\\n        __Ownable_init_unchained();\\n        __ERC20_init_unchained(\\\"APY Governance Token\\\", \\\"APY\\\");\\n\\n        // initialize impl-specific storage\\n        setAdminAddress(adminAddress);\\n\\n        _mint(msg.sender, totalSupply);\\n    }\\n\\n    // solhint-disable-next-line no-empty-blocks\\n    function initializeUpgrade() external virtual onlyAdmin {}\\n\\n    function setAdminAddress(address adminAddress) public onlyOwner {\\n        require(adminAddress != address(0), \\\"INVALID_ADMIN\\\");\\n        proxyAdmin = adminAddress;\\n        emit AdminChanged(adminAddress);\\n    }\\n}\\n\"\r\n    },\r\n    \"contracts/rewards/TestGovernanceTokenUpgraded.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: BUSDL-1.1\\npragma solidity 0.6.11;\\npragma experimental ABIEncoderV2;\\n\\nimport {GovernanceToken} from \\\"./GovernanceToken.sol\\\";\\n\\ncontract GovernanceTokenUpgraded is GovernanceToken {\\n    bool public newlyAddedVariable;\\n\\n    function initializeUpgrade() public override onlyAdmin {\\n        newlyAddedVariable = true;\\n    }\\n}\\n\"\r\n    },\r\n    \"contracts/registry/IAddressRegistry.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: BUSDL-1.1\\npragma solidity 0.6.11;\\n\\ninterface IAddressRegistry {\\n    function getIds() external view returns (bytes32[] memory);\\n\\n    function getAddress(bytes32 id) external view returns (address);\\n}\\n\"\r\n    },\r\n    \"contracts/protocols/curve/usdn/Zap.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: BUSDL-1.1\\npragma solidity 0.6.11;\\npragma experimental ABIEncoderV2;\\n\\nimport {IERC20} from \\\"@openzeppelin/contracts/token/ERC20/IERC20.sol\\\";\\nimport {IAssetAllocation} from \\\"contracts/common/Imports.sol\\\";\\nimport {CurveUsdnConstants} from \\\"./Constants.sol\\\";\\nimport {\\n    MetaPoolOldDepositorZap\\n} from \\\"contracts/protocols/curve/metapool/Imports.sol\\\";\\n\\ncontract UsdnPoolZap is MetaPoolOldDepositorZap, CurveUsdnConstants {\\n    constructor()\\n        public\\n        MetaPoolOldDepositorZap(\\n            DEPOSITOR,\\n            META_POOL,\\n            address(LP_TOKEN),\\n            address(LIQUIDITY_GAUGE),\\n            10000,\\n            100\\n        ) // solhint-disable-next-line no-empty-blocks\\n    {}\\n\\n    function assetAllocations() public view override returns (string[] memory) {\\n        string[] memory allocationNames = new string[](1);\\n        allocationNames[0] = NAME;\\n        return allocationNames;\\n    }\\n\\n    function erc20Allocations() public view override returns (IERC20[] memory) {\\n        IERC20[] memory allocations = _createErc20AllocationArray(1);\\n        allocations[4] = PRIMARY_UNDERLYER;\\n        return allocations;\\n    }\\n}\\n\"\r\n    },\r\n    \"contracts/protocols/curve/usdn/Constants.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: BUSDL-1.1\\npragma solidity 0.6.11;\\n\\nimport {IERC20, INameIdentifier} from \\\"contracts/common/Imports.sol\\\";\\nimport {\\n    ILiquidityGauge\\n} from \\\"contracts/protocols/curve/common/interfaces/Imports.sol\\\";\\nimport {IMetaPool} from \\\"contracts/protocols/curve/metapool/Imports.sol\\\";\\nimport {IOldDepositor} from \\\"contracts/protocols/curve/metapool/Imports.sol\\\";\\n\\nabstract contract CurveUsdnConstants is INameIdentifier {\\n    string public constant override NAME = \\\"curve-usdn\\\";\\n\\n    // sometimes a metapool is its own LP token; otherwise,\\n    // you can obtain from `token` attribute\\n    IERC20 public constant LP_TOKEN =\\n        IERC20(0x4f3E8F405CF5aFC05D68142F3783bDfE13811522);\\n\\n    // metapool primary underlyer\\n    IERC20 public constant PRIMARY_UNDERLYER =\\n        IERC20(0x674C6Ad92Fd080e4004b2312b45f796a192D27a0);\\n\\n    ILiquidityGauge public constant LIQUIDITY_GAUGE =\\n        ILiquidityGauge(0xF98450B5602fa59CC66e1379DFfB6FDDc724CfC4);\\n\\n    IMetaPool public constant META_POOL =\\n        IMetaPool(0x0f9cb53Ebe405d49A0bbdBD291A65Ff571bC83e1);\\n\\n    IOldDepositor public constant DEPOSITOR =\\n        IOldDepositor(0x094d12e5b541784701FD8d65F11fc0598FBC6332);\\n}\\n\"\r\n    },\r\n    \"contracts/protocols/curve/usdn/Allocation.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: BUSDL-1.1\\npragma solidity 0.6.11;\\npragma experimental ABIEncoderV2;\\n\\nimport {\\n    MetaPoolAllocationBase\\n} from \\\"contracts/protocols/curve/metapool/Imports.sol\\\";\\n\\nimport {CurveUsdnConstants} from \\\"./Constants.sol\\\";\\n\\ncontract CurveUsdnAllocation is MetaPoolAllocationBase, CurveUsdnConstants {\\n    constructor(address curve3PoolAllocation_)\\n        public\\n        MetaPoolAllocationBase(curve3PoolAllocation_)\\n    {} // solhint-disable-line no-empty-blocks\\n\\n    function balanceOf(address account, uint8 tokenIndex)\\n        public\\n        view\\n        override\\n        returns (uint256)\\n    {\\n        return\\n            super.getUnderlyerBalance(\\n                account,\\n                META_POOL,\\n                LIQUIDITY_GAUGE,\\n                LP_TOKEN,\\n                uint256(tokenIndex)\\n            );\\n    }\\n\\n    function _getTokenData()\\n        internal\\n        pure\\n        override\\n        returns (TokenData[] memory)\\n    {\\n        return _getBasePoolTokenData(address(PRIMARY_UNDERLYER), \\\"USDN\\\", 18);\\n    }\\n}\\n\"\r\n    },\r\n    \"contracts/protocols/curve/musd/Zap.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: BUSDL-1.1\\npragma solidity 0.6.11;\\npragma experimental ABIEncoderV2;\\n\\nimport {IERC20} from \\\"@openzeppelin/contracts/token/ERC20/IERC20.sol\\\";\\nimport {IAssetAllocation} from \\\"contracts/common/Imports.sol\\\";\\nimport {CurveMusdConstants} from \\\"./Constants.sol\\\";\\nimport {\\n    MetaPoolOldDepositorZap\\n} from \\\"contracts/protocols/curve/metapool/Imports.sol\\\";\\n\\ncontract MusdPoolZap is MetaPoolOldDepositorZap, CurveMusdConstants {\\n    constructor()\\n        public\\n        MetaPoolOldDepositorZap(\\n            DEPOSITOR,\\n            META_POOL,\\n            address(LP_TOKEN),\\n            address(LIQUIDITY_GAUGE),\\n            10000,\\n            100\\n        ) // solhint-disable-next-line no-empty-blocks\\n    {}\\n\\n    function assetAllocations() public view override returns (string[] memory) {\\n        string[] memory allocationNames = new string[](1);\\n        allocationNames[0] = NAME;\\n        return allocationNames;\\n    }\\n\\n    function erc20Allocations() public view override returns (IERC20[] memory) {\\n        IERC20[] memory allocations = _createErc20AllocationArray(1);\\n        allocations[4] = PRIMARY_UNDERLYER;\\n        return allocations;\\n    }\\n}\\n\"\r\n    },\r\n    \"contracts/protocols/curve/musd/Constants.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: BUSDL-1.1\\npragma solidity 0.6.11;\\n\\nimport {IERC20, INameIdentifier} from \\\"contracts/common/Imports.sol\\\";\\nimport {\\n    ILiquidityGauge\\n} from \\\"contracts/protocols/curve/common/interfaces/Imports.sol\\\";\\nimport {IMetaPool} from \\\"contracts/protocols/curve/metapool/Imports.sol\\\";\\nimport {IOldDepositor} from \\\"contracts/protocols/curve/metapool/Imports.sol\\\";\\n\\nabstract contract CurveMusdConstants is INameIdentifier {\\n    string public constant override NAME = \\\"curve-musd\\\";\\n\\n    // sometimes a metapool is its own LP token; otherwise,\\n    // you can obtain from `token` attribute\\n    IERC20 public constant LP_TOKEN =\\n        IERC20(0x1AEf73d49Dedc4b1778d0706583995958Dc862e6);\\n\\n    // metapool primary underlyer\\n    IERC20 public constant PRIMARY_UNDERLYER =\\n        IERC20(0xe2f2a5C287993345a840Db3B0845fbC70f5935a5);\\n\\n    ILiquidityGauge public constant LIQUIDITY_GAUGE =\\n        ILiquidityGauge(0x5f626c30EC1215f4EdCc9982265E8b1F411D1352);\\n\\n    IMetaPool public constant META_POOL =\\n        IMetaPool(0x8474DdbE98F5aA3179B3B3F5942D724aFcdec9f6);\\n\\n    IOldDepositor public constant DEPOSITOR =\\n        IOldDepositor(0x803A2B40c5a9BB2B86DD630B274Fa2A9202874C2);\\n}\\n\"\r\n    },\r\n    \"contracts/protocols/curve/musd/Allocation.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: BUSDL-1.1\\npragma solidity 0.6.11;\\npragma experimental ABIEncoderV2;\\n\\nimport {\\n    MetaPoolAllocationBase\\n} from \\\"contracts/protocols/curve/metapool/Imports.sol\\\";\\n\\nimport {CurveMusdConstants} from \\\"./Constants.sol\\\";\\n\\ncontract CurveMusdAllocation is MetaPoolAllocationBase, CurveMusdConstants {\\n    constructor(address curve3PoolAllocation_)\\n        public\\n        MetaPoolAllocationBase(curve3PoolAllocation_)\\n    {} // solhint-disable-line no-empty-blocks\\n\\n    function balanceOf(address account, uint8 tokenIndex)\\n        public\\n        view\\n        override\\n        returns (uint256)\\n    {\\n        return\\n            super.getUnderlyerBalance(\\n                account,\\n                META_POOL,\\n                LIQUIDITY_GAUGE,\\n                LP_TOKEN,\\n                uint256(tokenIndex)\\n            );\\n    }\\n\\n    function _getTokenData()\\n        internal\\n        pure\\n        override\\n        returns (TokenData[] memory)\\n    {\\n        return _getBasePoolTokenData(address(PRIMARY_UNDERLYER), \\\"mUSD\\\", 18);\\n    }\\n}\\n\"\r\n    },\r\n    \"contracts/protocols/curve/lusd/Zap.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: BUSDL-1.1\\npragma solidity 0.6.11;\\npragma experimental ABIEncoderV2;\\n\\nimport {IERC20} from \\\"@openzeppelin/contracts/token/ERC20/IERC20.sol\\\";\\nimport {IAssetAllocation} from \\\"contracts/common/Imports.sol\\\";\\nimport {CurveLusdConstants} from \\\"./Constants.sol\\\";\\nimport {\\n    MetaPoolDepositorZap\\n} from \\\"contracts/protocols/curve/metapool/Imports.sol\\\";\\n\\ncontract LusdPoolZap is MetaPoolDepositorZap, CurveLusdConstants {\\n    constructor()\\n        public\\n        MetaPoolDepositorZap(\\n            META_POOL,\\n            address(LP_TOKEN),\\n            address(LIQUIDITY_GAUGE),\\n            10000,\\n            100\\n        ) // solhint-disable-next-line no-empty-blocks\\n    {}\\n\\n    function assetAllocations() public view override returns (string[] memory) {\\n        string[] memory allocationNames = new string[](1);\\n        allocationNames[0] = NAME;\\n        return allocationNames;\\n    }\\n\\n    function erc20Allocations() public view override returns (IERC20[] memory) {\\n        IERC20[] memory allocations = _createErc20AllocationArray(1);\\n        allocations[4] = PRIMARY_UNDERLYER;\\n        return allocations;\\n    }\\n}\\n\"\r\n    },\r\n    \"contracts/protocols/curve/lusd/Constants.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: BUSDL-1.1\\npragma solidity 0.6.11;\\n\\nimport {IERC20, INameIdentifier} from \\\"contracts/common/Imports.sol\\\";\\nimport {\\n    ILiquidityGauge\\n} from \\\"contracts/protocols/curve/common/interfaces/Imports.sol\\\";\\nimport {IMetaPool} from \\\"contracts/protocols/curve/metapool/Imports.sol\\\";\\n\\nabstract contract CurveLusdConstants is INameIdentifier {\\n    string public constant override NAME = \\\"curve-lusd\\\";\\n\\n    // sometimes a metapool is its own LP token; otherwise,\\n    // you can obtain from `token` attribute\\n    IERC20 public constant LP_TOKEN =\\n        IERC20(0xEd279fDD11cA84bEef15AF5D39BB4d4bEE23F0cA);\\n\\n    // metapool primary underlyer\\n    IERC20 public constant PRIMARY_UNDERLYER =\\n        IERC20(0x5f98805A4E8be255a32880FDeC7F6728C6568bA0);\\n\\n    ILiquidityGauge public constant LIQUIDITY_GAUGE =\\n        ILiquidityGauge(0x9B8519A9a00100720CCdC8a120fBeD319cA47a14);\\n\\n    IMetaPool public constant META_POOL =\\n        IMetaPool(0xEd279fDD11cA84bEef15AF5D39BB4d4bEE23F0cA);\\n}\\n\"\r\n    },\r\n    \"contracts/protocols/curve/lusd/Allocation.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: BUSDL-1.1\\npragma solidity 0.6.11;\\npragma experimental ABIEncoderV2;\\n\\nimport {\\n    MetaPoolAllocationBase\\n} from \\\"contracts/protocols/curve/metapool/Imports.sol\\\";\\n\\nimport {CurveLusdConstants} from \\\"./Constants.sol\\\";\\n\\ncontract CurveLusdAllocation is MetaPoolAllocationBase, CurveLusdConstants {\\n    constructor(address curve3PoolAllocation_)\\n        public\\n        MetaPoolAllocationBase(curve3PoolAllocation_)\\n    {} // solhint-disable-line no-empty-blocks\\n\\n    function balanceOf(address account, uint8 tokenIndex)\\n        public\\n        view\\n        override\\n        returns (uint256)\\n    {\\n        return\\n            super.getUnderlyerBalance(\\n                account,\\n                META_POOL,\\n                LIQUIDITY_GAUGE,\\n                LP_TOKEN,\\n                uint256(tokenIndex)\\n            );\\n    }\\n\\n    function _getTokenData()\\n        internal\\n        pure\\n        override\\n        returns (TokenData[] memory)\\n    {\\n        return _getBasePoolTokenData(address(PRIMARY_UNDERLYER), \\\"LUSD\\\", 18);\\n    }\\n}\\n\"\r\n    },\r\n    \"contracts/protocols/curve/frax/Zap.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: BUSDL-1.1\\npragma solidity 0.6.11;\\npragma experimental ABIEncoderV2;\\n\\nimport {IERC20} from \\\"@openzeppelin/contracts/token/ERC20/IERC20.sol\\\";\\nimport {IAssetAllocation} from \\\"contracts/common/Imports.sol\\\";\\nimport {CurveFraxConstants} from \\\"./Constants.sol\\\";\\nimport {\\n    MetaPoolDepositorZap\\n} from \\\"contracts/protocols/curve/metapool/Imports.sol\\\";\\n\\ncontract FraxPoolZap is MetaPoolDepositorZap, CurveFraxConstants {\\n    constructor()\\n        public\\n        MetaPoolDepositorZap(\\n            META_POOL,\\n            address(LP_TOKEN),\\n            address(LIQUIDITY_GAUGE),\\n            10000,\\n            100\\n        ) // solhint-disable-next-line no-empty-blocks\\n    {}\\n\\n    function assetAllocations() public view override returns (string[] memory) {\\n        string[] memory allocationNames = new string[](1);\\n        allocationNames[0] = NAME;\\n        return allocationNames;\\n    }\\n\\n    function erc20Allocations() public view override returns (IERC20[] memory) {\\n        IERC20[] memory allocations = _createErc20AllocationArray(2);\\n        allocations[4] = FXS;\\n        allocations[5] = PRIMARY_UNDERLYER;\\n        return allocations;\\n    }\\n\\n    /**\\n     * @dev claim protocol-specific rewards;\\n     *      CRV rewards are always claimed through the minter, in\\n     *      the `CurveGaugeZapBase` implementation.\\n     */\\n    function _claimRewards() internal override {\\n        LIQUIDITY_GAUGE.claim_rewards();\\n    }\\n}\\n\"\r\n    },\r\n    \"contracts/protocols/curve/frax/Constants.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: BUSDL-1.1\\npragma solidity 0.6.11;\\n\\nimport {IERC20, INameIdentifier} from \\\"contracts/common/Imports.sol\\\";\\nimport {\\n    ILiquidityGauge\\n} from \\\"contracts/protocols/curve/common/interfaces/Imports.sol\\\";\\nimport {IMetaPool} from \\\"contracts/protocols/curve/metapool/Imports.sol\\\";\\n\\nabstract contract CurveFraxConstants is INameIdentifier {\\n    string public constant override NAME = \\\"curve-frax\\\";\\n\\n    // sometimes a metapool is its own LP token; otherwise,\\n    // you can obtain from `token` attribute\\n    IERC20 public constant LP_TOKEN =\\n        IERC20(0xd632f22692FaC7611d2AA1C0D552930D43CAEd3B);\\n\\n    // metapool primary underlyer\\n    IERC20 public constant PRIMARY_UNDERLYER =\\n        IERC20(0x853d955aCEf822Db058eb8505911ED77F175b99e);\\n\\n    IERC20 public constant FXS =\\n        IERC20(0x3432B6A60D23Ca0dFCa7761B7ab56459D9C964D0);\\n\\n    ILiquidityGauge public constant LIQUIDITY_GAUGE =\\n        ILiquidityGauge(0x72E158d38dbd50A483501c24f792bDAAA3e7D55C);\\n\\n    IMetaPool public constant META_POOL =\\n        IMetaPool(0xd632f22692FaC7611d2AA1C0D552930D43CAEd3B);\\n}\\n\"\r\n    },\r\n    \"contracts/protocols/curve/frax/Allocation.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: BUSDL-1.1\\npragma solidity 0.6.11;\\npragma experimental ABIEncoderV2;\\n\\nimport {\\n    MetaPoolAllocationBase\\n} from \\\"contracts/protocols/curve/metapool/Imports.sol\\\";\\n\\nimport {CurveFraxConstants} from \\\"./Constants.sol\\\";\\n\\ncontract CurveFraxAllocation is MetaPoolAllocationBase, CurveFraxConstants {\\n    constructor(address curve3PoolAllocation_)\\n        public\\n        MetaPoolAllocationBase(curve3PoolAllocation_)\\n    {} // solhint-disable-line no-empty-blocks\\n\\n    function balanceOf(address account, uint8 tokenIndex)\\n        public\\n        view\\n        override\\n        returns (uint256)\\n    {\\n        return\\n            super.getUnderlyerBalance(\\n                account,\\n                META_POOL,\\n                LIQUIDITY_GAUGE,\\n                LP_TOKEN,\\n                uint256(tokenIndex)\\n            );\\n    }\\n\\n    function _getTokenData()\\n        internal\\n        pure\\n        override\\n        returns (TokenData[] memory)\\n    {\\n        return _getBasePoolTokenData(address(PRIMARY_UNDERLYER), \\\"FRAX\\\", 18);\\n    }\\n}\\n\"\r\n    },\r\n    \"contracts/protocols/curve/busdv2/Zap.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: BUSDL-1.1\\npragma solidity 0.6.11;\\npragma experimental ABIEncoderV2;\\n\\nimport {IERC20} from \\\"@openzeppelin/contracts/token/ERC20/IERC20.sol\\\";\\nimport {IAssetAllocation} from \\\"contracts/common/Imports.sol\\\";\\nimport {CurveBusdV2Constants} from \\\"./Constants.sol\\\";\\nimport {\\n    MetaPoolDepositorZap\\n} from \\\"contracts/protocols/curve/metapool/Imports.sol\\\";\\n\\ncontract BusdV2PoolZap is MetaPoolDepositorZap, CurveBusdV2Constants {\\n    constructor()\\n        public\\n        MetaPoolDepositorZap(\\n            META_POOL,\\n            address(LP_TOKEN),\\n            address(LIQUIDITY_GAUGE),\\n            10000,\\n            100\\n        ) // solhint-disable-next-line no-empty-blocks\\n    {}\\n\\n    function assetAllocations() public view override returns (string[] memory) {\\n        string[] memory allocationNames = new string[](1);\\n        allocationNames[0] = NAME;\\n        return allocationNames;\\n    }\\n\\n    function erc20Allocations() public view override returns (IERC20[] memory) {\\n        IERC20[] memory allocations = _createErc20AllocationArray(1);\\n        allocations[4] = PRIMARY_UNDERLYER;\\n        return allocations;\\n    }\\n}\\n\"\r\n    },\r\n    \"contracts/protocols/curve/busdv2/Constants.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: BUSDL-1.1\\npragma solidity 0.6.11;\\n\\nimport {IERC20, INameIdentifier} from \\\"contracts/common/Imports.sol\\\";\\nimport {\\n    ILiquidityGauge\\n} from \\\"contracts/protocols/curve/common/interfaces/Imports.sol\\\";\\nimport {IMetaPool} from \\\"contracts/protocols/curve/metapool/Imports.sol\\\";\\n\\nabstract contract CurveBusdV2Constants is INameIdentifier {\\n    string public constant override NAME = \\\"curve-busdv2\\\";\\n\\n    // sometimes a metapool is its own LP token; otherwise,\\n    // you can obtain from `token` attribute\\n    IERC20 public constant LP_TOKEN =\\n        IERC20(0x4807862AA8b2bF68830e4C8dc86D0e9A998e085a);\\n\\n    ILiquidityGauge public constant LIQUIDITY_GAUGE =\\n        ILiquidityGauge(0xd4B22fEdcA85E684919955061fDf353b9d38389b);\\n\\n    // metapool primary underlyer\\n    IERC20 public constant PRIMARY_UNDERLYER =\\n        IERC20(0x4Fabb145d64652a948d72533023f6E7A623C7C53);\\n\\n    IMetaPool public constant META_POOL =\\n        IMetaPool(0x4807862AA8b2bF68830e4C8dc86D0e9A998e085a);\\n}\\n\"\r\n    },\r\n    \"contracts/protocols/curve/busdv2/Allocation.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: BUSDL-1.1\\npragma solidity 0.6.11;\\npragma experimental ABIEncoderV2;\\n\\nimport {\\n    MetaPoolAllocationBase\\n} from \\\"contracts/protocols/curve/metapool/Imports.sol\\\";\\n\\nimport {CurveBusdV2Constants} from \\\"./Constants.sol\\\";\\n\\ncontract CurveBusdV2Allocation is MetaPoolAllocationBase, CurveBusdV2Constants {\\n    constructor(address curve3PoolAllocation_)\\n        public\\n        MetaPoolAllocationBase(curve3PoolAllocation_)\\n    {} // solhint-disable-line no-empty-blocks\\n\\n    function balanceOf(address account, uint8 tokenIndex)\\n        public\\n        view\\n        override\\n        returns (uint256)\\n    {\\n        return\\n            super.getUnderlyerBalance(\\n                account,\\n                META_POOL,\\n                LIQUIDITY_GAUGE,\\n                LP_TOKEN,\\n                uint256(tokenIndex)\\n            );\\n    }\\n\\n    function _getTokenData()\\n        internal\\n        pure\\n        override\\n        returns (TokenData[] memory)\\n    {\\n        return _getBasePoolTokenData(address(PRIMARY_UNDERLYER), \\\"BUSD\\\", 18);\\n    }\\n}\\n\"\r\n    },\r\n    \"contracts/protocols/curve/alusd/Zap.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: BUSDL-1.1\\npragma solidity 0.6.11;\\npragma experimental ABIEncoderV2;\\n\\nimport {IERC20} from \\\"@openzeppelin/contracts/token/ERC20/IERC20.sol\\\";\\nimport {IAssetAllocation} from \\\"contracts/common/Imports.sol\\\";\\nimport {CurveAlUsdConstants} from \\\"./Constants.sol\\\";\\nimport {\\n    MetaPoolDepositorZap\\n} from \\\"contracts/protocols/curve/metapool/Imports.sol\\\";\\n\\ncontract AlUsdPoolZap is MetaPoolDepositorZap, CurveAlUsdConstants {\\n    constructor()\\n        public\\n        MetaPoolDepositorZap(\\n            META_POOL,\\n            address(LP_TOKEN),\\n            address(LIQUIDITY_GAUGE),\\n            10000,\\n            100\\n        ) // solhint-disable-next-line no-empty-blocks\\n    {}\\n\\n    function assetAllocations() public view override returns (string[] memory) {\\n        string[] memory allocationNames = new string[](1);\\n        allocationNames[0] = NAME;\\n        return allocationNames;\\n    }\\n\\n    function erc20Allocations() public view override returns (IERC20[] memory) {\\n        IERC20[] memory allocations = _createErc20AllocationArray(2);\\n        allocations[4] = ALCX;\\n        allocations[5] = PRIMARY_UNDERLYER; // alUSD\\n        return allocations;\\n    }\\n\\n    /**\\n     * @dev claim protocol-specific rewards;\\n     *      CRV rewards are always claimed through the minter, in\\n     *      the `CurveGaugeZapBase` implementation.\\n     */\\n    function _claimRewards() internal override {\\n        LIQUIDITY_GAUGE.claim_rewards();\\n    }\\n}\\n\"\r\n    },\r\n    \"contracts/protocols/curve/alusd/Constants.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: BUSDL-1.1\\npragma solidity 0.6.11;\\n\\nimport {IERC20, INameIdentifier} from \\\"contracts/common/Imports.sol\\\";\\nimport {\\n    ILiquidityGauge\\n} from \\\"contracts/protocols/curve/common/interfaces/Imports.sol\\\";\\nimport {IMetaPool} from \\\"contracts/protocols/curve/metapool/Imports.sol\\\";\\n\\nabstract contract CurveAlUsdConstants is INameIdentifier {\\n    string public constant override NAME = \\\"curve-alusd\\\";\\n\\n    // sometimes a metapool is its own LP token; otherwise,\\n    // you can obtain from `token` attribute\\n    IERC20 public constant LP_TOKEN =\\n        IERC20(0x43b4FdFD4Ff969587185cDB6f0BD875c5Fc83f8c);\\n\\n    // metapool primary underlyer\\n    IERC20 public constant PRIMARY_UNDERLYER =\\n        IERC20(0xBC6DA0FE9aD5f3b0d58160288917AA56653660E9);\\n\\n    IERC20 public constant ALCX =\\n        IERC20(0xdBdb4d16EdA451D0503b854CF79D55697F90c8DF);\\n\\n    ILiquidityGauge public constant LIQUIDITY_GAUGE =\\n        ILiquidityGauge(0x9582C4ADACB3BCE56Fea3e590F05c3ca2fb9C477);\\n\\n    // The metapool StableSwap contract\\n    IMetaPool public constant META_POOL =\\n        IMetaPool(0x43b4FdFD4Ff969587185cDB6f0BD875c5Fc83f8c);\\n}\\n\"\r\n    },\r\n    \"contracts/protocols/curve/alusd/Allocation.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: BUSDL-1.1\\npragma solidity 0.6.11;\\npragma experimental ABIEncoderV2;\\n\\nimport {\\n    MetaPoolAllocationBase\\n} from \\\"contracts/protocols/curve/metapool/Imports.sol\\\";\\n\\nimport {CurveAlUsdConstants} from \\\"./Constants.sol\\\";\\n\\ncontract CurveAlUsdAllocation is MetaPoolAllocationBase, CurveAlUsdConstants {\\n    constructor(address curve3PoolAllocation_)\\n        public\\n        MetaPoolAllocationBase(curve3PoolAllocation_)\\n    {} // solhint-disable-line no-empty-blocks\\n\\n    function balanceOf(address account, uint8 tokenIndex)\\n        public\\n        view\\n        override\\n        returns (uint256)\\n    {\\n        return\\n            super.getUnderlyerBalance(\\n                account,\\n                META_POOL,\\n                LIQUIDITY_GAUGE,\\n                LP_TOKEN,\\n                uint256(tokenIndex)\\n            );\\n    }\\n\\n    function _getTokenData()\\n        internal\\n        pure\\n        override\\n        returns (TokenData[] memory)\\n    {\\n        return _getBasePoolTokenData(address(PRIMARY_UNDERLYER), \\\"alUSD\\\", 18);\\n    }\\n}\\n\"\r\n    },\r\n    \"contracts/protocols/curve/3pool/Zap.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: BUSDL-1.1\\npragma solidity 0.6.11;\\npragma experimental ABIEncoderV2;\\n\\nimport {IERC20} from \\\"@openzeppelin/contracts/token/ERC20/IERC20.sol\\\";\\nimport {IAssetAllocation} from \\\"contracts/common/Imports.sol\\\";\\nimport {\\n    IStableSwap,\\n    ILiquidityGauge\\n} from \\\"contracts/protocols/curve/common/interfaces/Imports.sol\\\";\\nimport {Curve3PoolConstants} from \\\"./Constants.sol\\\";\\nimport {CurveGaugeZapBase} from \\\"contracts/protocols/curve/common/Imports.sol\\\";\\n\\ncontract Curve3PoolZap is CurveGaugeZapBase, Curve3PoolConstants {\\n    constructor()\\n        public\\n        CurveGaugeZapBase(\\n            STABLE_SWAP_ADDRESS,\\n            LP_TOKEN_ADDRESS,\\n            LIQUIDITY_GAUGE_ADDRESS,\\n            10000,\\n            100,\\n            3\\n        ) // solhint-disable-next-line no-empty-blocks\\n    {}\\n\\n    function assetAllocations() public view override returns (string[] memory) {\\n        string[] memory allocationNames = new string[](1);\\n        allocationNames[0] = NAME;\\n        return allocationNames;\\n    }\\n\\n    function erc20Allocations() public view override returns (IERC20[] memory) {\\n        return _createErc20AllocationArray(0);\\n    }\\n\\n    function _getVirtualPrice() internal view override returns (uint256) {\\n        return IStableSwap(SWAP_ADDRESS).get_virtual_price();\\n    }\\n\\n    function _getCoinAtIndex(uint256 i)\\n        internal\\n        view\\n        override\\n        returns (address)\\n    {\\n        return IStableSwap(SWAP_ADDRESS).coins(i);\\n    }\\n\\n    function _addLiquidity(uint256[] calldata amounts, uint256 minAmount)\\n        internal\\n        override\\n    {\\n        IStableSwap(SWAP_ADDRESS).add_liquidity(\\n            [amounts[0], amounts[1], amounts[2]],\\n            minAmount\\n        );\\n    }\\n\\n    function _removeLiquidity(\\n        uint256 lpBalance,\\n        uint8 index,\\n        uint256 minAmount\\n    ) internal override {\\n        require(index < 3, \\\"INVALID_INDEX\\\");\\n        IStableSwap(SWAP_ADDRESS).remove_liquidity_one_coin(\\n            lpBalance,\\n            index,\\n            minAmount\\n        );\\n    }\\n}\\n\"\r\n    },\r\n    \"contracts/lpaccount/TestSwap.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: BUSDL-1.1\\npragma solidity 0.6.11;\\npragma experimental ABIEncoderV2;\\n\\nimport {\\n    IAssetAllocation,\\n    IERC20,\\n    INameIdentifier\\n} from \\\"contracts/common/Imports.sol\\\";\\nimport {ISwap} from \\\"./ISwap.sol\\\";\\nimport {TestLpAccountStorage} from \\\"./TestLpAccountStorage.sol\\\";\\n\\ncontract TestSwap is ISwap, TestLpAccountStorage {\\n    constructor(string memory name) public {\\n        _name = name;\\n    }\\n\\n    function swap(uint256 amount, uint256) external override {\\n        _swapsArray.push(amount);\\n    }\\n\\n    // solhint-disable-next-line func-name-mixedcase\\n    function NAME() external view override returns (string memory) {\\n        return _name;\\n    }\\n\\n    function erc20Allocations()\\n        external\\n        view\\n        override\\n        returns (IERC20[] memory)\\n    {\\n        return _tokens;\\n    }\\n\\n    function _setErc20Allocations(IERC20[] memory tokens) public {\\n        _tokens = tokens;\\n    }\\n}\\n\"\r\n    }\r\n  },\r\n  \"settings\": {\r\n    \"optimizer\": {\r\n      \"enabled\": true,\r\n      \"runs\": 200\r\n    },\r\n    \"outputSelection\": {\r\n      \"*\": {\r\n        \"*\": [\r\n          \"evm.bytecode\",\r\n          \"evm.deployedBytecode\",\r\n          \"abi\"\r\n        ]\r\n      }\r\n    }\r\n  }\r\n}}","ABI":"[{\"inputs\":[],\"name\":\"DAI_ADDRESS\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"LIQUIDITY_GAUGE_ADDRESS\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"LP_TOKEN_ADDRESS\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"NAME\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"SNX_ADDRESS\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"STABLE_SWAP_ADDRESS\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"SUSD_ADDRESS\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"USDC_ADDRESS\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"USDT_ADDRESS\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint8\",\"name\":\"tokenIndex\",\"type\":\"uint8\"}],\"name\":\"addressOf\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"internalType\":\"uint8\",\"name\":\"tokenIndex\",\"type\":\"uint8\"}],\"name\":\"balanceOf\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint8\",\"name\":\"tokenIndex\",\"type\":\"uint8\"}],\"name\":\"decimalsOf\",\"outputs\":[{\"internalType\":\"uint8\",\"name\":\"\",\"type\":\"uint8\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"internalType\":\"contract IOldStableSwap4\",\"name\":\"stableSwap\",\"type\":\"address\"},{\"internalType\":\"contract ILiquidityGauge\",\"name\":\"gauge\",\"type\":\"address\"},{\"internalType\":\"contract IERC20\",\"name\":\"lpToken\",\"type\":\"address\"}],\"name\":\"getLpTokenShare\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"balance\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"totalSupply\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"contract IOldStableSwap4\",\"name\":\"stableSwap\",\"type\":\"address\"},{\"internalType\":\"int128\",\"name\":\"coin\",\"type\":\"int128\"}],\"name\":\"getPoolBalance\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"internalType\":\"contract IOldStableSwap4\",\"name\":\"stableSwap\",\"type\":\"address\"},{\"internalType\":\"contract ILiquidityGauge\",\"name\":\"gauge\",\"type\":\"address\"},{\"internalType\":\"contract IERC20\",\"name\":\"lpToken\",\"type\":\"address\"},{\"internalType\":\"int128\",\"name\":\"coin\",\"type\":\"int128\"}],\"name\":\"getUnderlyerBalance\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"balance\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"numberOfTokens\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint8\",\"name\":\"tokenIndex\",\"type\":\"uint8\"}],\"name\":\"symbolOf\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"tokens\",\"outputs\":[{\"components\":[{\"internalType\":\"address\",\"name\":\"token\",\"type\":\"address\"},{\"internalType\":\"string\",\"name\":\"symbol\",\"type\":\"string\"},{\"internalType\":\"uint8\",\"name\":\"decimals\",\"type\":\"uint8\"}],\"internalType\":\"struct IAssetAllocation.TokenData[]\",\"name\":\"\",\"type\":\"tuple[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"}]","ContractName":"CurveSusdV2Allocation","CompilerVersion":"v0.6.11+commit.5ef660b1","OptimizationUsed":"1","Runs":"200","ConstructorArguments":"","EVMVersion":"Default","Library":"","LicenseType":"None","Proxy":"0","Implementation":"","SwarmSource":"ipfs://8d08e9a4d8d1ff294ce58826fec34d7cbc23a057292145828b66169b61b2b775"}]}