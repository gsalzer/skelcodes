// SPDX-License-Identifier: MIT
pragma solidity ^0.8.0;

import "./Owner.sol";
contract MachinieLevel is Ownable {

    uint8 [888] private level =  [
                    2, 2, 5, 5, 5, 5, 5, 5, 5, 5, 2, 1, 3, 2, 1, 2, 2, 1, 1, 2, 2, 2, 1, 3, 2, 2,
                    3, 2, 2, 1, 3, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 1, 1, 1, 2, 1, 2, 2, 2, 1, 2, 1,
                    1, 1, 1, 2, 1, 1, 2, 3, 1, 3, 1, 3, 1, 2, 2, 3, 1, 2, 2, 1, 1, 2, 2, 1, 1, 1,
                    2, 1, 3, 2, 2, 1, 2, 1, 2, 1, 2, 1, 1, 2, 1, 2, 1, 2, 1, 1, 1, 3, 2, 3, 2, 2,
                    1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 2, 1, 1, 1, 1, 2, 1, 1, 1, 1, 2, 3, 2, 2, 2, 2,
                    2, 1, 2, 2, 1, 1, 1, 2, 2, 1, 1, 4, 1, 2, 3, 1, 2, 3, 1, 3, 1, 2, 3, 2, 1, 2,
                    2, 2, 1, 2, 2, 1, 2, 3, 2, 2, 2, 1, 2, 1, 1, 1, 1, 1, 1, 1, 2, 2, 1, 3, 3, 3,
                    2, 2, 2, 1, 2, 1, 1, 1, 2, 1, 2, 1, 1, 1, 1, 2, 2, 2, 1, 1, 1, 2, 2, 2, 1, 1,
                    2, 1, 1, 2, 1, 2, 1, 1, 1, 1, 2, 1, 2, 2, 2, 1, 1, 2, 1, 1, 2, 1, 2, 2, 1, 1,
                    3, 3, 2, 2, 2, 4, 1, 1, 3, 3, 2, 1, 1, 1, 1, 1, 1, 2, 2, 1, 1, 2, 1, 2, 2, 2,
                    1, 4, 1, 1, 1, 2, 3, 1, 1, 2, 1, 1, 1, 2, 2, 2, 1, 2, 2, 3, 2, 1, 1, 1, 2, 3,
                    1, 1, 2, 2, 1, 1, 2, 1, 1, 1, 2, 2, 2, 1, 2, 1, 2, 2, 1, 1, 1, 1, 1, 1, 1, 1,
                    2, 2, 2, 1, 1, 4, 1, 2, 1, 2, 1, 1, 4, 1, 1, 1, 2, 1, 2, 1, 1, 1, 1, 2, 1, 1,
                    1, 3, 1, 3, 2, 1, 1, 1, 2, 3, 1, 1, 2, 1, 3, 1, 2, 2, 4, 1, 1, 2, 1, 1, 1, 1,
                    1, 1, 2, 3, 1, 1, 1, 2, 2, 2, 2, 2, 3, 1, 2, 1, 4, 2, 1, 1, 1, 1, 2, 2, 2, 2,
                    3, 3, 1, 2, 1, 1, 1, 1, 2, 1, 2, 2, 1, 1, 1, 1, 1, 1, 2, 2, 1, 1, 1, 2, 1, 1,
                    2, 1, 4, 2, 2, 2, 1, 1, 3, 2, 2, 1, 2, 2, 1, 3, 1, 3, 1, 2, 2, 1, 1, 1, 1, 3,
                    1, 2, 4, 1, 1, 2, 1, 2, 1, 2, 1, 1, 1, 1, 2, 3, 2, 2, 1, 2, 1, 1, 1, 3, 1, 3,
                    2, 2, 1, 2, 3, 1, 2, 2, 2, 1, 2, 1, 1, 2, 1, 2, 2, 4, 1, 1, 2, 1, 2, 1, 1, 1,
                    1, 1, 3, 2, 1, 1, 1, 1, 2, 2, 2, 1, 1, 1, 1, 1, 2, 2, 1, 1, 2, 1, 1, 3, 2, 1,
                    1, 3, 2, 2, 1, 1, 1, 3, 2, 1, 1, 1, 1, 1, 1, 1, 2, 1, 1, 1, 2, 2, 1, 1, 1, 2,
                    2, 1, 2, 1, 1, 1, 3, 2, 2, 2, 2, 3, 2, 1, 1, 1, 1, 1, 1, 2, 1, 2, 1, 3, 1, 2,
                    3, 2, 3, 1, 1, 1, 1, 2, 1, 2, 3, 2, 1, 1, 2, 2, 1, 1, 2, 1, 1, 2, 4, 2, 1, 2,
                    3, 2, 1, 1, 2, 1, 1, 2, 3, 1, 1, 2, 2, 2, 2, 2, 1, 1, 2, 2, 2, 3, 4, 3, 2, 2,
                    3, 1, 2, 2, 2, 2, 1, 2, 3, 2, 2, 1, 2, 2, 2, 1, 3, 1, 1, 1, 1, 1, 2, 1, 1, 3,
                    3, 2, 1, 2, 3, 2, 1, 3, 1, 3, 2, 2, 3, 1, 1, 2, 2, 1, 2, 3, 1, 3, 2, 2, 3, 1,
                    1, 2, 1, 1, 2, 1, 1, 1, 2, 1, 1, 1, 2, 2, 1, 1, 2, 1, 1, 2, 2, 2, 2, 1, 1, 1,
                    2, 2, 2, 2, 2, 2, 2, 1, 3, 1, 1, 2, 1, 1, 2, 2, 1, 1, 2, 1, 2, 2, 1, 1, 1, 1,
                    1, 3, 2, 2, 3, 1, 1, 1, 2, 1, 1, 1, 3, 1, 4, 1, 1, 3, 2, 1, 1, 2, 3, 1, 1, 2,
                    1, 1, 2, 2, 3, 1, 1, 1, 1, 1, 1, 1, 1, 2, 1, 1, 1, 1, 1, 1, 1, 2, 3, 1, 1, 1,
                    2, 1, 2, 4, 2, 1, 1, 1, 2, 1, 2, 4, 1, 3, 1, 4, 1, 1, 1, 1, 2, 2, 1, 2, 2, 1,
                    1, 2, 2, 2, 1, 1, 1, 1, 3, 2, 3, 1, 1, 2, 2, 1, 1, 2, 2, 1, 2, 2, 1, 2, 2, 1,
                    1, 3, 1, 1, 1, 3, 1, 2, 1, 2, 2, 1, 1, 4, 1, 1, 2, 2, 1, 1, 2, 3, 2, 3, 1, 2,
                    1, 1, 2, 1, 2, 1, 3, 2, 1, 1, 2, 2, 2, 1, 1, 1, 1, 3, 1, 1, 3, 2, 1, 4, 2, 1,
                    2, 1, 3, 1];

    constructor(){

    }
    function getLevel (uint256 tokenId_) external view returns(uint256) {
        return level[tokenId_];
    }  

    function updateLevel(uint256 [] memory tokenId_, uint8 level_) external onlyAdmin{
        for(uint _i =0; _i<tokenId_.length; _i++)
        {
            level[tokenId_[_i]] = level_;
        }
    } 
    

    
}
