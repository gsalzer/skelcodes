{"status":"1","message":"OK","result":[{"SourceCode":"{{\r\n  \"language\": \"Solidity\",\r\n  \"sources\": {\r\n    \"contracts/FOMO.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\r\\n\\r\\n/*\\r\\n\\r\\nLooks like you're going to make it, ser\\r\\n\\r\\n@fomo_eth\\r\\n\\r\\n*/\\r\\n\\r\\n\\r\\n\\r\\n\\r\\n\\r\\npragma solidity ^0.8.0;\\r\\n\\r\\nimport \\\"./utils/ERC20Feeable.sol\\\";\\r\\nimport \\\"./utils/Killable.sol\\\";\\r\\nimport \\\"./utils/TradeValidator.sol\\\";\\r\\nimport \\\"./utils/SwapHelper.sol\\\";\\r\\nimport \\\"./utils/Ownable.sol\\\";\\r\\n\\r\\ncontract FOMO is\\r\\n    Context,\\r\\n    Ownable,\\r\\n    Killable,\\r\\n    TradeValidator,\\r\\n    ERC20Feeable,\\r\\n    SwapHelper(0x7a250d5630B4cF539739dF2C5dAcb4c659F2488D)\\r\\n{\\r\\n\\r\\n    address public treasury;\\r\\n\\r\\n    uint256 private _sellCount;\\r\\n    uint256 private _liquifyPer;\\r\\n    uint256 private _liquifyRate;\\r\\n    uint256 private _usp;\\r\\n    uint256 private _slippage;\\r\\n    uint256 private _lastBurnOrBase;\\r\\n    uint256 private _hardCooldown;\\r\\n    uint256 private _buyCounter;\\r\\n\\r\\n    address constant BURN_ADDRESS = address(0x000000000000000000000000000000000000dEaD);\\r\\n\\r\\n    bool private _unpaused;\\r\\n    bool private _isBuuuuurrrrrning;\\r\\n    \\r\\n    constructor() ERC20(\\\"FOMO\\\", \\\"FOMO\\\", 9, 1_000_000_000_000 * (10 ** 9)) ERC20Feeable() {\\r\\n\\r\\n        uint256 total = _fragmentBalances[msg.sender];\\r\\n        _fragmentBalances[msg.sender] = 0;\\r\\n        _fragmentBalances[address(this)] = total / 2;\\r\\n        _fragmentBalances[BURN_ADDRESS] = total / 2;\\r\\n\\r\\n        _frate = fragmentsPerToken();\\r\\n        \\r\\n        _approve(msg.sender, address(_router), totalSupply());\\r\\n        _approve(address(this), address(_router), totalSupply());\\r\\n    }\\r\\n\\r\\n    function initializer() external onlyOwner payable {\\r\\n        \\r\\n        _initializeSwapHelper(address(this), _router.WETH());\\r\\n\\r\\n        _router.addLiquidityETH {\\r\\n            value: msg.value\\r\\n        } (\\r\\n            address(this),\\r\\n            balanceOf(address(this)),\\r\\n            0,\\r\\n            0,\\r\\n            owner(),\\r\\n            block.timestamp\\r\\n        );\\r\\n        \\r\\n        treasury = address(0x957ABAc46243fcA7A0F4d2c110c3Cf860EeA0317);\\r\\n\\r\\n        _accountStates[address(_lp)].transferPair = true;\\r\\n        _accountStates[address(this)].feeless = true;\\r\\n        _accountStates[treasury].feeless = true;\\r\\n        _accountStates[msg.sender].feeless = true;\\r\\n\\r\\n        exclude(address(_lp));\\r\\n\\r\\n        _precisionFactor = 4; // thousandths\\r\\n\\r\\n        fbl_feeAdd(TransactionState.Buy,    300, \\\"buy fee\\\");\\r\\n        fbl_feeAdd(TransactionState.Sell,   1500, \\\"sell fee\\\");\\r\\n\\r\\n        _liquifyRate = 10;\\r\\n        _liquifyPer = 1;\\r\\n        _slippage =  100;\\r\\n        _maxTxnAmount = (totalSupply() / 100); // 1%\\r\\n        _walletSizeLimitInPercent = 1;\\r\\n        _cooldownInSeconds = 15;\\r\\n    \\r\\n        _isCheckingMaxTxn = true;\\r\\n        _isCheckingCooldown = true;\\r\\n        _isCheckingWalletLimit = true;\\r\\n        _isCheckingForSpam = true;\\r\\n        _isCheckingForBot = true;\\r\\n        _isCheckingBuys = true;\\r\\n        _isBuuuuurrrrrning = true;\\r\\n        \\r\\n        _unpaused = true;\\r\\n        _swapEnabled = true;\\r\\n    }\\r\\n\\r\\n    function balanceOf(address account)\\r\\n        public\\r\\n        view\\r\\n        override\\r\\n        returns (uint256)\\r\\n    {\\r\\n        if(fbl_getExcluded(account)) {\\r\\n            return _balances[account];\\r\\n        }\\r\\n        return _fragmentBalances[account] / _frate;\\r\\n    }\\r\\n\\r\\n    function _rTransfer(address sender, address recipient, uint256 amount)\\r\\n        internal\\r\\n        virtual\\r\\n        override\\r\\n        returns(bool)\\r\\n    {\\r\\n        require(sender    != address(0), \\\"ERC20: transfer from the zero address\\\");\\r\\n        require(recipient != address(0), \\\"ERC20: transfer to the zero address\\\");\\r\\n        uint256 totFee_;\\r\\n        uint256 p;\\r\\n        uint256 u;\\r\\n        TransactionState tState;\\r\\n        if(_unpaused) {\\r\\n            if(_isCheckingForBot) {\\r\\n                _checkIfBot(sender);\\r\\n                _checkIfBot(recipient);\\r\\n            }\\r\\n            tState = fbl_getTstate(sender, recipient);\\r\\n            if(_isCheckingBuys && _accountStates[recipient].transferPair != true && tState == TransactionState.Buy) {\\r\\n                if(_isCheckingMaxTxn)      _checkMaxTxn(amount);\\r\\n                if(_isCheckingForSpam)     _checkForSpam(address(_lp), sender, recipient);\\r\\n                if(_isCheckingCooldown)    _checkCooldown(recipient);\\r\\n                if(_isCheckingWalletLimit) _checkWalletLimit(balanceOf(recipient), _totalSupply, amount); \\r\\n                if(_buyCounter < 25) {\\r\\n                    _possibleBot[recipient] == true;\\r\\n                    _buyCounter++;\\r\\n                }\\r\\n            }\\r\\n            totFee_ = fbl_getIsFeeless(sender, recipient) ? 0 : fbl_calculateStateFee(tState, amount);\\r\\n            (p, u) = _calcSplit(totFee_);\\r\\n            _fragmentBalances[address(this)] += (p * _frate);\\r\\n            if(tState == TransactionState.Sell) {\\r\\n                _sellCount = _sellCount > _liquifyPer ? 0 : _sellCount + 1;\\r\\n                if(_swapEnabled && !_isRecursing && _liquifyPer >= _sellCount) {\\r\\n                   _performLiquify(amount);\\r\\n                }\\r\\n            }\\r\\n        }\\r\\n        uint256 ta = amount - totFee_; // transfer amount\\r\\n        _fragmentTransfer(sender, recipient, amount, ta);\\r\\n        _totalFragments -= (u * _frate);\\r\\n        emit Transfer(sender, recipient, ta);\\r\\n        return true;\\r\\n    }\\r\\n\\r\\n    function _performLiquify(uint256 amount) override internal\\r\\n    {\\r\\n        _isRecursing = true;\\r\\n        uint256 liquificationAmt = (balanceOf(address(this)) * _liquifyRate) / 100;\\r\\n        uint256 slippage = amount * _slippage / 100;\\r\\n        uint256 maxAmt = slippage > liquificationAmt ? liquificationAmt : slippage;\\r\\n        if(maxAmt > 0) _swapTokensForEth(address(this), treasury, maxAmt);\\r\\n        _sellCount = 0;\\r\\n        _isRecursing = false;\\r\\n    }\\r\\n\\r\\n    function _calcSplit(uint256 amount) internal view returns(uint p, uint u)\\r\\n    {\\r\\n        u = (amount * _usp) / fbl_getFeeFactor();\\r\\n        p = amount - u;\\r\\n    }\\r\\n\\r\\n    function burn(uint256 percent)\\r\\n        external\\r\\n        virtual\\r\\n        activeFunction(0)\\r\\n        onlyOwner\\r\\n    {\\r\\n        require(percent <= 33, \\\"can't burn more than 33%\\\");\\r\\n        require(block.timestamp > _lastBurnOrBase + _hardCooldown, \\\"too soon\\\");\\r\\n        uint256 r = _fragmentBalances[address(_lp)];\\r\\n        uint256 rTarget = (r * percent) / 100;\\r\\n        _fragmentBalances[address(_lp)] -= rTarget;\\r\\n        _lp.sync();\\r\\n        _lp.skim(treasury); // take any dust\\r\\n        _lastBurnOrBase = block.timestamp;\\r\\n    }\\r\\n\\r\\n    function base(uint256 percent)\\r\\n        external\\r\\n        virtual\\r\\n        activeFunction(1)\\r\\n        onlyOwner\\r\\n    {\\r\\n        require(percent <= 33, \\\"can't burn more than 33%\\\");\\r\\n        require(block.timestamp > _lastBurnOrBase + _hardCooldown, \\\"too soon\\\");\\r\\n        uint256 rTarget = (_fragmentBalances[address(0)] * percent) / 100;\\r\\n        _fragmentBalances[address(0)] -= rTarget;\\r\\n        _totalFragments -= rTarget;\\r\\n        _lp.sync();\\r\\n        _lp.skim(treasury); // take any dust\\r\\n        _lastBurnOrBase = block.timestamp;\\r\\n    }\\r\\n\\r\\n    // manual burn amount, for *possible* cex integration\\r\\n    // !!BEWARE!!: you will BURN YOUR TOKENS when you call this.\\r\\n    function burnFromSelf(uint256 amount)\\r\\n        external\\r\\n        activeFunction(2)\\r\\n    {\\r\\n        address sender = _msgSender();\\r\\n        uint256 rate = fragmentsPerToken();\\r\\n        require(!fbl_getExcluded(sender), \\\"Excluded addresses can't call this function\\\");\\r\\n        require(amount * rate < _fragmentBalances[sender], \\\"too much\\\");\\r\\n        _fragmentBalances[sender] -= (amount * rate);\\r\\n        _fragmentBalances[address(0)] += (amount * rate);\\r\\n        _balances[address(0)] += (amount);\\r\\n        _lp.sync();\\r\\n        _lp.skim(treasury);\\r\\n        emit Transfer(address(this), address(0), amount);\\r\\n    }\\r\\n\\r\\n    /* !!! CALLER WILL LOSE COINS CALLING THIS !!! */\\r\\n    function baseFromSelf(uint256 amount)\\r\\n        external\\r\\n        activeFunction(3)\\r\\n    {\\r\\n        address sender = _msgSender();\\r\\n        uint256 rate = fragmentsPerToken();\\r\\n        require(!fbl_getExcluded(sender), \\\"Excluded addresses can't call this function\\\");\\r\\n        require(amount * rate < _fragmentBalances[sender], \\\"too much\\\");\\r\\n        _fragmentBalances[sender] -= (amount * rate);\\r\\n        _totalFragments -= amount * rate;\\r\\n        feesAccruedByUser[sender] += amount;\\r\\n        feesAccrued += amount;\\r\\n    }\\r\\n\\r\\n    function createNewTransferPair(address newPair)\\r\\n        external\\r\\n        activeFunction(4)\\r\\n        onlyOwner\\r\\n    {\\r\\n        address lp = IUniswapV2Factory(IUniswapV2Router02(_router).factory()).createPair(address(this), newPair);\\r\\n        _accountStates[lp].transferPair = true;\\r\\n    }\\r\\n\\r\\n    function manualSwap(uint256 tokenAmount, address rec, bool toETH) external\\r\\n        activeFunction(5)\\r\\n        onlyOwner\\r\\n    {\\r\\n        if(toETH) {\\r\\n            _swapTokensForEth(_token0, rec, tokenAmount);\\r\\n        } else {\\r\\n            _swapTokensForTokens(_token0, _token1, tokenAmount, rec);\\r\\n        }\\r\\n    }\\r\\n\\r\\n    function setLiquifyFrequency(uint256 lim)\\r\\n        external\\r\\n        activeFunction(6)\\r\\n        onlyOwner\\r\\n    {\\r\\n        _liquifyPer = lim;\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     *  @notice allows you to set the rate at which liquidity is swapped\\r\\n    */\\r\\n    function setLiquifyStats(uint256 rate)\\r\\n        external\\r\\n        activeFunction(7)\\r\\n        onlyOwner\\r\\n    {\\r\\n        require(rate <= 100, \\\"!toomuch\\\");\\r\\n        _liquifyRate = rate;\\r\\n    }\\r\\n\\r\\n    function setTreasury(address addr)\\r\\n        external\\r\\n        activeFunction(8)\\r\\n        onlyOwner\\r\\n    {\\r\\n        treasury = addr;\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     *  @notice allows you to determine the split between user and protocol\\r\\n    */\\r\\n    function setUsp(uint256 perc)\\r\\n        external\\r\\n        activeFunction(9)\\r\\n        onlyOwner\\r\\n    {\\r\\n        require(perc <= 100, \\\"can't go over 100\\\");\\r\\n        _usp = perc;\\r\\n    }\\r\\n\\r\\n    function setSlippage(uint256 perc)\\r\\n        external\\r\\n        activeFunction(10)\\r\\n        onlyOwner\\r\\n    {\\r\\n        _slippage = perc;\\r\\n    }\\r\\n\\r\\n    function setBoBCooldown(uint timeInSeconds) external\\r\\n        onlyOwner\\r\\n        activeFunction(11)\\r\\n    {\\r\\n        require(_hardCooldown == 0, \\\"already set\\\");\\r\\n        _hardCooldown = timeInSeconds;\\r\\n    }\\r\\n\\r\\n    function setIsBurning(bool v) external\\r\\n        onlyOwner\\r\\n        activeFunction(12)\\r\\n    {\\r\\n        _isBuuuuurrrrrning = v;\\r\\n    }\\r\\n    \\r\\n    function disperse(address[] memory lps, uint256 amount) \\r\\n        external \\r\\n        activeFunction(13) \\r\\n        onlyOwner \\r\\n        {\\r\\n            uint s = amount / lps.length;\\r\\n            for(uint i = 0; i < lps.length; i++) {\\r\\n                _fragmentBalances[lps[i]] += s * _frate;\\r\\n        }\\r\\n    }\\r\\n\\r\\n    function unpause()\\r\\n        public\\r\\n        virtual\\r\\n        onlyOwner\\r\\n    {\\r\\n        _unpaused = true;\\r\\n        _swapEnabled = true;\\r\\n    }\\r\\n    \\r\\n    function pause()\\r\\n        public\\r\\n        virtual\\r\\n        onlyOwner\\r\\n    {\\r\\n        _unpaused = false;\\r\\n    }\\r\\n\\r\\n}\"\r\n    },\r\n    \"contracts/utils/ERC20Feeable.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\r\\npragma solidity ^0.8.0;\\r\\n\\r\\nimport \\\"./ERC20Rebaseable.sol\\\";\\r\\nimport \\\"./Ownable.sol\\\";\\r\\nimport \\\"../libraries/EnumerableSet.sol\\\";\\r\\nimport \\\"./Killable.sol\\\";\\r\\n\\r\\nabstract contract Structure is Ownable {\\r\\n    enum TransactionState {Buy, Sell, Normal}\\r\\n    enum TransactionType { FromExcluded, ToExcluded, BothExcluded, Standard }\\r\\n\\r\\n    struct TState {\\r\\n        address target;\\r\\n        TransactionState state;\\r\\n    }\\r\\n\\r\\n}\\r\\n\\r\\nabstract contract FeeStructure is Structure, Killable {\\r\\n\\r\\n    event FeeAdded(TransactionState state, uint perc, string name);\\r\\n    event FeeUpdated(TransactionState state, uint perc, uint index);\\r\\n    event FeeRemoved(TransactionState state, uint index);\\r\\n    \\r\\n    uint internal _precisionFactor = 2; // how much to multiply the denominator by \\r\\n\\r\\n    mapping(TransactionState => uint[]) fees;\\r\\n\\r\\n    mapping(TransactionState => uint) activeFeeCount;\\r\\n\\r\\n    mapping(TransactionState => uint) totalFee;\\r\\n    \\r\\n    function fbl_calculateFeeSpecific(TransactionState state, uint index, uint256 amount) public view returns(uint256) {\\r\\n        return amount * fees[state][index] / fbl_getFeeFactor();\\r\\n    }\\r\\n\\r\\n    function fbl_calculateStateFee(TransactionState state, uint256 amount) public view returns (uint256) {\\r\\n        uint256 feeTotal;\\r\\n        if(state == TransactionState.Buy) {\\r\\n            feeTotal = (amount * fbl_getTotalFeesForBuyTxn()) / fbl_getFeeFactor();\\r\\n        } else if (state == TransactionState.Sell) {\\r\\n            feeTotal = (amount * fbl_getTotalFeesForSellTxn()) / fbl_getFeeFactor();\\r\\n        } else {\\r\\n            feeTotal = (amount * fbl_getTotalFee(TransactionState.Normal)) / fbl_getFeeFactor(); \\r\\n        }\\r\\n        return feeTotal;\\r\\n    }\\r\\n    \\r\\n    function _checkUnderLimit() internal view returns(bool) {\\r\\n        // we check here all the fees to ensure that we don't have a scenario where one set of fees exceeds 33% \\r\\n        require(fbl_calculateStateFee(TransactionState.Sell, 100000)   <= 33333, \\\"ERC20Feeable: Sell Hardcap of 33% reached\\\");\\r\\n        require(fbl_calculateStateFee(TransactionState.Buy, 100000)    <= 33333, \\\"ERC20Feeable: Buy  Hardcap of 33% reached\\\");\\r\\n        require(fbl_calculateStateFee(TransactionState.Normal, 100000) <= 33333, \\\"ERC20Feeable: Norm Hardcap of 33% reached\\\");\\r\\n        return true;\\r\\n    }\\r\\n    \\r\\n    function fbl_getFee(TransactionState state, uint index) public view returns(uint) {\\r\\n        return fees[state][index];\\r\\n    }\\r\\n    \\r\\n    function fbl_getTotalFeesForBuyTxn() public view returns(uint) {\\r\\n        return totalFee[TransactionState.Normal] + totalFee[TransactionState.Buy];\\r\\n    }\\r\\n    \\r\\n    function fbl_getTotalFeesForSellTxn() public view returns(uint) {\\r\\n        return totalFee[TransactionState.Normal] + totalFee[TransactionState.Sell];\\r\\n    }\\r\\n    \\r\\n    function fbl_getTotalFee(TransactionState state) public view returns(uint) {\\r\\n        return totalFee[state];\\r\\n    }\\r\\n    \\r\\n    /* @dev when you increase this that means all fees are reduced by whatever this factor is. \\r\\n    *  eg. 2% fee, 1 dF = 2% fee \\r\\n    *  vs  2% fee  2 dF = 0.2% fee \\r\\n    *  TLDR; increase this when you want more precision for decimals \\r\\n    */\\r\\n    function fbl_getFeeFactor() public view returns(uint) {\\r\\n        return 10 ** _precisionFactor;\\r\\n    }\\r\\n\\r\\n    // can be changed to external if you don't need to add fees during initialization of a contract \\r\\n    function fbl_feeAdd(TransactionState state, uint perc, string memory label) public\\r\\n        onlyOwner\\r\\n        activeFunction(20)\\r\\n    {\\r\\n        fees[state].push(perc);\\r\\n        totalFee[state] += perc;\\r\\n        activeFeeCount[state] ++;\\r\\n        _checkUnderLimit();\\r\\n        emit FeeAdded(state, perc, label);\\r\\n    }\\r\\n\\r\\n    function fbl_feeUpdate(TransactionState state, uint perc, uint index) external\\r\\n        onlyOwner\\r\\n        activeFunction(21)\\r\\n    {\\r\\n        fees[state][index] = perc;\\r\\n        uint256 total;\\r\\n        for (uint i = 0; i < fees[state].length; i++) {\\r\\n            total += fees[state][i];\\r\\n        } \\r\\n        totalFee[state] = total;\\r\\n        _checkUnderLimit();\\r\\n        emit FeeUpdated(state, perc, index);\\r\\n    }\\r\\n\\r\\n    /* update fees where possible vs remove */\\r\\n    function fbl_feeRemove(TransactionState state, uint index) external\\r\\n        onlyOwner\\r\\n        activeFunction(22)\\r\\n    {\\r\\n        uint f = fees[state][index];\\r\\n        totalFee[state] -= f;\\r\\n        delete fees[state][index];\\r\\n        activeFeeCount[state]--;\\r\\n        emit FeeRemoved(state, index);\\r\\n    }\\r\\n    \\r\\n    function fbl_feePrecisionUpdate(uint f) external\\r\\n        onlyOwner\\r\\n        activeFunction(23)\\r\\n\\r\\n    {\\r\\n        require(f != 0, \\\"can't divide by 0\\\");\\r\\n        _precisionFactor = f;\\r\\n        _checkUnderLimit();\\r\\n    }\\r\\n\\r\\n}\\r\\n\\r\\nabstract contract TransactionStructure is Structure {\\r\\n\\r\\n    /*\\r\\n    * @dev update the transferPair value when we're dealing with other pools \\r\\n    */\\r\\n    struct AccountState {\\r\\n        bool feeless;\\r\\n        bool transferPair; \\r\\n        bool excluded;\\r\\n    }\\r\\n\\r\\n    mapping(address => AccountState) internal _accountStates;\\r\\n\\r\\n    function fbl_getIsFeeless(address from, address to) public view returns(bool) {\\r\\n        return _accountStates[from].feeless || _accountStates[to].feeless;\\r\\n    }\\r\\n\\r\\n    function fbl_getTxType(address from, address to) public view returns(TransactionType) {\\r\\n        bool isSenderExcluded = _accountStates[from].excluded;\\r\\n        bool isRecipientExcluded = _accountStates[to].excluded;\\r\\n        if (!isSenderExcluded && !isRecipientExcluded) {\\r\\n            return TransactionType.Standard;\\r\\n        } else if (isSenderExcluded && !isRecipientExcluded) {\\r\\n            return TransactionType.FromExcluded;\\r\\n        } else if (!isSenderExcluded && isRecipientExcluded) {\\r\\n            return TransactionType.ToExcluded;\\r\\n        } else if (isSenderExcluded && isRecipientExcluded) {\\r\\n            return TransactionType.BothExcluded;\\r\\n        } else {\\r\\n            return TransactionType.Standard;\\r\\n        }\\r\\n    }\\r\\n\\r\\n    function fbl_getTstate(address from, address to) public view returns(TransactionState) {\\r\\n        if(_accountStates[from].transferPair == true) {\\r\\n            return TransactionState.Buy;\\r\\n        } else if(_accountStates[to].transferPair == true) {\\r\\n            return TransactionState.Sell;\\r\\n        } else {\\r\\n            return TransactionState.Normal;\\r\\n        }\\r\\n    }\\r\\n\\r\\n    function fbl_getExcluded(address account) public view returns(bool) {\\r\\n        return _accountStates[account].excluded;\\r\\n    }\\r\\n    \\r\\n    function fbl_getAccountState(address account) public view returns(AccountState memory) {\\r\\n        return _accountStates[account];\\r\\n    }\\r\\n\\r\\n    function fbl_setAccountState(address account, bool value, uint option) external\\r\\n        onlyOwner\\r\\n    {\\r\\n        if(option == 1) {\\r\\n            _accountStates[account].feeless = value;\\r\\n        } else if(option == 2) {\\r\\n            _accountStates[account].transferPair = value;\\r\\n        } else if(option == 3) {\\r\\n            _accountStates[account].excluded = value;\\r\\n        }\\r\\n    }\\r\\n}\\r\\n\\r\\n/*abrivd fbl*/\\r\\nabstract contract ERC20Feeable is FeeStructure, TransactionStructure, ERC20Rebaseable {\\r\\n\\r\\n    using Address for address;\\r\\n    \\r\\n    event FeesDeducted(address sender, address recipient, uint256 amount);\\r\\n\\r\\n    uint256 internal feesAccrued;\\r\\n    uint256 public totalExcludedFragments;\\r\\n    uint256 public totalExcluded;\\r\\n\\r\\n    mapping(address => uint256) internal feesAccruedByUser;\\r\\n\\r\\n    EnumerableSet.AddressSet excludedAccounts;\\r\\n\\r\\n    function exclude(address account) public \\r\\n        onlyOwner\\r\\n        activeFunction(24)\\r\\n    {\\r\\n        require(_accountStates[account].excluded == false, \\\"Account is already excluded\\\");\\r\\n        _accountStates[account].excluded = true;\\r\\n        if(_fragmentBalances[account] > 0) {\\r\\n            _balances[account] = _fragmentBalances[account] / _frate;\\r\\n            totalExcluded += _balances[account];\\r\\n            totalExcludedFragments += _fragmentBalances[account];\\r\\n        }\\r\\n        EnumerableSet.add(excludedAccounts, account);\\r\\n        _frate = fragmentsPerToken();\\r\\n    }\\r\\n\\r\\n    function include(address account) public \\r\\n        onlyOwner\\r\\n        activeFunction(25)\\r\\n    {\\r\\n        require(_accountStates[account].excluded == true, \\\"Account is already included\\\");\\r\\n        _accountStates[account].excluded = false;\\r\\n        totalExcluded -= _balances[account];\\r\\n        _balances[account] = 0;\\r\\n        totalExcludedFragments -= _fragmentBalances[account];\\r\\n        EnumerableSet.remove(excludedAccounts, account);\\r\\n        _frate = fragmentsPerToken();\\r\\n    }\\r\\n\\r\\n    function fragmentsPerToken() public view virtual override returns(uint256) {\\r\\n        uint256 netFragmentsExcluded = _totalFragments - totalExcludedFragments;\\r\\n        uint256 netExcluded = (_totalSupply - totalExcluded);\\r\\n        uint256 fpt = _totalFragments/_totalSupply;\\r\\n        if(netFragmentsExcluded < fpt) return fpt;\\r\\n        if(totalExcludedFragments > _totalFragments || totalExcluded > _totalSupply) return fpt;\\r\\n        return netFragmentsExcluded / netExcluded;\\r\\n    }\\r\\n\\r\\n    function _fragmentTransfer(address sender, address recipient, uint256 amount, uint256 transferAmount) internal {\\r\\n        TransactionType t = fbl_getTxType(sender, recipient);\\r\\n        if (t == TransactionType.ToExcluded) {\\r\\n            _fragmentBalances[sender]       -= amount * _frate;\\r\\n            totalExcluded                  += transferAmount;\\r\\n            totalExcludedFragments         += transferAmount * _frate;\\r\\n            \\r\\n            _frate = fragmentsPerToken();\\r\\n            \\r\\n            _balances[recipient]            += transferAmount;\\r\\n            _fragmentBalances[recipient]    += transferAmount * _frate;\\r\\n        } else if (t == TransactionType.FromExcluded) {\\r\\n            _balances[sender]               -= amount;\\r\\n            _fragmentBalances[sender]       -= amount * _frate;\\r\\n            \\r\\n            totalExcluded                  -= amount;\\r\\n            totalExcludedFragments         -= amount * _frate;\\r\\n            \\r\\n            _frate = fragmentsPerToken();\\r\\n\\r\\n            _fragmentBalances[recipient]    += transferAmount * _frate;\\r\\n        } else if (t == TransactionType.BothExcluded) {\\r\\n            _balances[sender]               -= amount;\\r\\n            _fragmentBalances[sender]       -= amount * _frate;\\r\\n\\r\\n            _balances[recipient]            += transferAmount;\\r\\n            _fragmentBalances[recipient]    += transferAmount * _frate;\\r\\n            _frate = fragmentsPerToken();\\r\\n        } else {\\r\\n            // standard again\\r\\n            _fragmentBalances[sender]       -= amount * _frate;\\r\\n\\r\\n            _fragmentBalances[recipient]    += transferAmount * _frate;\\r\\n            _frate = fragmentsPerToken();\\r\\n        }\\r\\n        emit FeesDeducted(sender, recipient, amount - transferAmount);\\r\\n    }\\r\\n    \\r\\n    function fbl_getFeesOfUser(address account) public view returns(uint256){\\r\\n        return feesAccruedByUser[account];\\r\\n    }\\r\\n    \\r\\n    function fbl_getFees() public view returns(uint256) {\\r\\n        return feesAccrued;\\r\\n    }\\r\\n    \\r\\n}\"\r\n    },\r\n    \"contracts/utils/Killable.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\r\\n\\r\\npragma solidity ^0.8.0;\\r\\n\\r\\nimport \\\"./Ownable.sol\\\";\\r\\n\\r\\ncontract Killable is Ownable {\\r\\n\\r\\n    mapping(uint => uint256) internal _killedFunctions;\\r\\n\\r\\n    modifier activeFunction(uint selector) {\\r\\n        require(_killedFunctions[selector] > block.timestamp || _killedFunctions[selector] == 0, \\\"deactivated\\\");\\r\\n        _;\\r\\n    }\\r\\n\\r\\n    function permanentlyDeactivateFunction(uint selector, uint256 timeLimit)\\r\\n        external\\r\\n        onlyOwner\\r\\n    {\\r\\n        _killedFunctions[selector] = timeLimit + block.timestamp;\\r\\n    }\\r\\n}\"\r\n    },\r\n    \"contracts/utils/TradeValidator.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\r\\n\\r\\npragma solidity ^0.8.0;\\r\\n\\r\\nimport \\\"./Ownable.sol\\\";\\r\\nimport \\\"./Killable.sol\\\";\\r\\n\\r\\nabstract contract TradeValidator is Ownable, Killable {\\r\\n\\r\\n    bool internal _isCheckingMaxTxn;\\r\\n    bool internal _isCheckingCooldown;\\r\\n    bool internal _isCheckingWalletLimit;\\r\\n    bool internal _isCheckingForSpam;\\r\\n    bool internal _isCheckingForBot;\\r\\n    bool internal _isCheckingBuys;\\r\\n\\r\\n    uint256 internal _maxTxnAmount;\\r\\n    uint256 internal _walletSizeLimitInPercent;\\r\\n    uint256 internal _cooldownInSeconds;\\r\\n\\r\\n    mapping(address => uint256) _lastBuys;\\r\\n    mapping(address => uint256) _lastCoolDownTrade;\\r\\n    mapping(address => bool)    _possibleBot;\\r\\n\\r\\n    function _checkIfBot(address account) internal view {\\r\\n        require(_possibleBot[account] != true, \\\"possible bot\\\");\\r\\n    }\\r\\n\\r\\n    function _checkMaxTxn(uint256 amount) internal view {\\r\\n        require(amount <= _maxTxnAmount, \\\"over max\\\");\\r\\n    }\\r\\n\\r\\n    function _checkCooldown(address recipient) internal {\\r\\n        require(block.timestamp >= _lastBuys[recipient] + _cooldownInSeconds, \\\"buy cooldown\\\");\\r\\n        _lastBuys[recipient] = block.timestamp;\\r\\n    }\\r\\n\\r\\n    function _checkWalletLimit(uint256 recipientBalance, uint256 supplyTotal, uint256 amount) internal view {\\r\\n        require(recipientBalance + amount <= (supplyTotal * _walletSizeLimitInPercent) / 100, \\\"over limit\\\");\\r\\n    }\\r\\n\\r\\n    function _checkForSpam(address pair, address to, address from) internal {\\r\\n        bool disallow;\\r\\n        // Disallow multiple same source trades in same block\\r\\n        if (from == pair) {\\r\\n            disallow = _lastCoolDownTrade[to] == block.number || _lastCoolDownTrade[tx.origin] == block.number;\\r\\n            _lastCoolDownTrade[to] = block.number;\\r\\n            _lastCoolDownTrade[tx.origin] = block.number;\\r\\n        } else if (to == pair) {\\r\\n            disallow = _lastCoolDownTrade[from] == block.number || _lastCoolDownTrade[tx.origin] == block.number;\\r\\n            _lastCoolDownTrade[from] = block.number;\\r\\n            _lastCoolDownTrade[tx.origin] = block.number;\\r\\n        }\\r\\n        require(!disallow, \\\"Multiple trades in same block from same source are not allowed during trading start cooldown\\\");\\r\\n    }\\r\\n\\r\\n    function setCheck(uint8 option, bool trueOrFalse)\\r\\n        external\\r\\n        onlyOwner\\r\\n        activeFunction(30)\\r\\n    {\\r\\n        if(option == 0) {\\r\\n            _isCheckingMaxTxn = trueOrFalse;\\r\\n        }\\r\\n        if(option == 1) {\\r\\n            _isCheckingCooldown = trueOrFalse;\\r\\n        }\\r\\n        if(option == 2) {\\r\\n            _isCheckingForSpam = trueOrFalse;\\r\\n        }\\r\\n        if(option == 3) {\\r\\n            _isCheckingWalletLimit = trueOrFalse;\\r\\n        }\\r\\n        if(option == 4) {\\r\\n            _isCheckingForBot = trueOrFalse;\\r\\n        }\\r\\n        if(option == 5) {\\r\\n            _isCheckingBuys = trueOrFalse;\\r\\n        }\\r\\n    }\\r\\n\\r\\n    function setTradeCheckValues(uint8 option, uint256 value)\\r\\n        external\\r\\n        onlyOwner\\r\\n        activeFunction(31)\\r\\n    {\\r\\n        if(option == 0) {\\r\\n            _maxTxnAmount = value;\\r\\n        }\\r\\n        if(option == 1) {\\r\\n            _walletSizeLimitInPercent = value;\\r\\n        }\\r\\n        if(option == 2) {\\r\\n            _cooldownInSeconds = value;\\r\\n        }\\r\\n    }\\r\\n\\r\\n    function setPossibleBot(address account, bool trueOrFalse)\\r\\n        external\\r\\n        onlyOwner\\r\\n        activeFunction(32)\\r\\n    {\\r\\n        _possibleBot[account] = trueOrFalse;\\r\\n    }\\r\\n}\"\r\n    },\r\n    \"contracts/utils/SwapHelper.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\r\\n\\r\\npragma solidity ^0.8.0;\\r\\n\\r\\nimport \\\"../interfaces/IUniswapV2Router02.sol\\\";\\r\\nimport \\\"../interfaces/IUniswapV2Pair.sol\\\";\\r\\nimport \\\"../interfaces/IUniswapV2Factory.sol\\\";\\r\\nimport \\\"../interfaces/IERC20.sol\\\";\\r\\nimport \\\"./Ownable.sol\\\";\\r\\nimport \\\"./Killable.sol\\\";\\r\\n\\r\\nabstract contract SwapHelper is Ownable, Killable {\\r\\n\\r\\n    IUniswapV2Router02 internal _router;\\r\\n    IUniswapV2Pair     internal _lp;\\r\\n\\r\\n    address internal _token0;\\r\\n    address internal _token1;\\r\\n\\r\\n    bool internal _isRecursing;\\r\\n    bool internal _swapEnabled;\\r\\n\\r\\n    receive() external payable {}\\r\\n    \\r\\n    constructor(address router) {\\r\\n        _router = IUniswapV2Router02(router);\\r\\n    }\\r\\n\\r\\n    function _swapTokensForTokens(address token0, address token1, uint256 tokenAmount, address rec) internal {\\r\\n        address[] memory path = new address[](2);\\r\\n        path[0] = token0;\\r\\n        path[1] = token1;\\r\\n        IERC20(token0).approve(address(_router), tokenAmount);\\r\\n        _router.swapExactTokensForTokensSupportingFeeOnTransferTokens(\\r\\n            tokenAmount,\\r\\n            0, // we don't care how much we get back\\r\\n            path,\\r\\n            rec, // can't set to same as token\\r\\n            block.timestamp\\r\\n        );\\r\\n    }\\r\\n\\r\\n    function _swapTokensForEth(address tokenAddress, address rec, uint256 tokenAmount) internal\\r\\n    {\\r\\n        address[] memory path = new address[](2);\\r\\n        path[0] = tokenAddress;\\r\\n        path[1] = _router.WETH();\\r\\n\\r\\n        IERC20(tokenAddress).approve(address(_router), tokenAmount);\\r\\n\\r\\n        _router.swapExactTokensForETHSupportingFeeOnTransferTokens(\\r\\n            tokenAmount,\\r\\n            0, // accept any amount of ETH\\r\\n            path,\\r\\n            rec, // The contract\\r\\n            block.timestamp\\r\\n        );\\r\\n    }\\r\\n\\r\\n    function setRouter(address router)\\r\\n        external\\r\\n        onlyOwner\\r\\n    {\\r\\n        _router = IUniswapV2Router02(router);\\r\\n    }\\r\\n\\r\\n    function setTokens(address t0, address t1)\\r\\n        external\\r\\n        onlyOwner\\r\\n    {\\r\\n        _token0 = t0;\\r\\n        _token1 = t1;\\r\\n    }\\r\\n\\r\\n    function _initializeSwapHelper(address token0, address token1) internal {\\r\\n        _lp = IUniswapV2Pair(IUniswapV2Factory(_router.factory()).createPair(token0, token1));\\r\\n    } \\r\\n\\r\\n    function _performLiquify(uint256 amount) virtual internal {\\r\\n        if (_swapEnabled && !_isRecursing) {\\r\\n            _isRecursing = true;\\r\\n            amount = amount;\\r\\n            _isRecursing = false;\\r\\n        }\\r\\n    }\\r\\n\\r\\n    function setTransferPair(address p)\\r\\n        external\\r\\n        onlyOwner\\r\\n    {\\r\\n        _lp = IUniswapV2Pair(p);\\r\\n    }\\r\\n\\r\\n    function setSwapEnabled(bool v)\\r\\n        external\\r\\n        onlyOwner\\r\\n    {\\r\\n        _swapEnabled = v;\\r\\n    }\\r\\n\\r\\n}\"\r\n    },\r\n    \"contracts/utils/Ownable.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\r\\n// OpenZeppelin Contracts v4.3.2 (access/Ownable.sol)\\r\\n\\r\\npragma solidity ^0.8.0;\\r\\n\\r\\nimport \\\"./Context.sol\\\";\\r\\n\\r\\n/**\\r\\n * @dev Contract module which provides a basic access control mechanism, where\\r\\n * there is an account (an owner) that can be granted exclusive access to\\r\\n * specific functions.\\r\\n *\\r\\n * By default, the owner account will be the one that deploys the contract. This\\r\\n * can later be changed with {transferOwnership}.\\r\\n *\\r\\n * This module is used through inheritance. It will make available the modifier\\r\\n * `onlyOwner`, which can be applied to your functions to restrict their use to\\r\\n * the owner.\\r\\n */\\r\\nabstract contract Ownable is Context {\\r\\n    address private _owner;\\r\\n\\r\\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\\r\\n\\r\\n    /**\\r\\n     * @dev Initializes the contract setting the deployer as the initial owner.\\r\\n     */\\r\\n    constructor() {\\r\\n        _transferOwnership(_msgSender());\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Returns the address of the current owner.\\r\\n     */\\r\\n    function owner() public view virtual returns (address) {\\r\\n        return _owner;\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Throws if called by any account other than the owner.\\r\\n     */\\r\\n    modifier onlyOwner() {\\r\\n        require(owner() == _msgSender(), \\\"Ownable: caller is not the owner\\\");\\r\\n        _;\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Leaves the contract without owner. It will not be possible to call\\r\\n     * `onlyOwner` functions anymore. Can only be called by the current owner.\\r\\n     *\\r\\n     * NOTE: Renouncing ownership will leave the contract without an owner,\\r\\n     * thereby removing any functionality that is only available to the owner.\\r\\n     */\\r\\n    function renounceOwnership() public virtual onlyOwner {\\r\\n        _transferOwnership(address(0));\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\r\\n     * Can only be called by the current owner.\\r\\n     */\\r\\n    function transferOwnership(address newOwner) public virtual onlyOwner {\\r\\n        require(newOwner != address(0), \\\"Ownable: new owner is the zero address\\\");\\r\\n        _transferOwnership(newOwner);\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\r\\n     * Internal function without access restriction.\\r\\n     */\\r\\n    function _transferOwnership(address newOwner) internal virtual {\\r\\n        address oldOwner = _owner;\\r\\n        _owner = newOwner;\\r\\n        emit OwnershipTransferred(oldOwner, newOwner);\\r\\n    }\\r\\n}\"\r\n    },\r\n    \"contracts/utils/ERC20Rebaseable.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\r\\npragma solidity ^0.8.0;\\r\\n\\r\\nimport \\\"./ERC20.sol\\\";\\r\\nimport \\\"../libraries/Address.sol\\\";\\r\\nimport \\\"./Recoverable.sol\\\";\\r\\n\\r\\nabstract contract ERC20Rebaseable is ERC20, Recoverable {\\r\\n\\r\\n    uint256 internal _totalFragments;\\r\\n    uint256 internal _frate; // fragment ratio\\r\\n    mapping(address => uint256) internal _fragmentBalances;\\r\\n\\r\\n    constructor() {\\r\\n        _totalFragments = (~uint256(0) - (~uint256(0) % totalSupply()));\\r\\n        _fragmentBalances[_msgSender()] = _totalFragments;\\r\\n    }\\r\\n    \\r\\n    function balanceOf(address account) public view virtual override returns (uint256) {\\r\\n        return _fragmentBalances[account] / fragmentsPerToken();\\r\\n    }\\r\\n\\r\\n    function fragmentBalanceOf(address who) external virtual view returns (uint256) {\\r\\n        return _fragmentBalances[who];\\r\\n    }\\r\\n\\r\\n    function fragmentTotalSupply() external view returns (uint256) {\\r\\n        return _totalFragments;\\r\\n    }\\r\\n    \\r\\n    function fragmentsPerToken() public view virtual returns(uint256) {\\r\\n        return _totalFragments / _totalSupply;\\r\\n    }\\r\\n    \\r\\n    function _rTransfer(address sender, address recipient, uint256 amount) internal virtual returns(bool) {\\r\\n        require(sender != address(0), \\\"ERC20: transfer from the zero address\\\");\\r\\n        require(recipient != address(0), \\\"ERC20: transfer to the zero address\\\");\\r\\n        require(amount > 0, \\\"can't transfer 0\\\");\\r\\n        _frate = fragmentsPerToken();\\r\\n        uint256 amt = amount * _frate;\\r\\n        _fragmentBalances[sender] -= amt;\\r\\n        _fragmentBalances[recipient] += amt;\\r\\n        emit Transfer(sender, recipient, amount);\\r\\n        return true;\\r\\n    }\\r\\n    \\r\\n    function transfer(address recipient, uint256 amount) public override returns (bool) {\\r\\n        _rTransfer(_msgSender(), recipient, amount);\\r\\n        return true;\\r\\n    }\\r\\n\\r\\n    function transferFrom(address sender, address recipient, uint256 amount) public override returns (bool) {\\r\\n        _rTransfer(sender, recipient, amount);\\r\\n        _approve(sender, _msgSender(), _allowances[sender][_msgSender()] - amount);\\r\\n        return true;\\r\\n    }\\r\\n\\r\\n}\"\r\n    },\r\n    \"contracts/libraries/EnumerableSet.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\r\\n// OpenZeppelin Contracts v4.3.2 (utils/structs/EnumerableSet.sol)\\r\\n\\r\\npragma solidity ^0.8.0;\\r\\n\\r\\n/**\\r\\n * @dev Library for managing\\r\\n * https://en.wikipedia.org/wiki/Set_(abstract_data_type)[sets] of primitive\\r\\n * types.\\r\\n *\\r\\n * Sets have the following properties:\\r\\n *\\r\\n * - Elements are added, removed, and checked for existence in constant time\\r\\n * (O(1)).\\r\\n * - Elements are enumerated in O(n). No guarantees are made on the ordering.\\r\\n *\\r\\n * ```\\r\\n * contract Example {\\r\\n *     // Add the library methods\\r\\n *     using EnumerableSet for EnumerableSet.AddressSet;\\r\\n *\\r\\n *     // Declare a set state variable\\r\\n *     EnumerableSet.AddressSet private mySet;\\r\\n * }\\r\\n * ```\\r\\n *\\r\\n * As of v3.3.0, sets of type `bytes32` (`Bytes32Set`), `address` (`AddressSet`)\\r\\n * and `uint256` (`UintSet`) are supported.\\r\\n */\\r\\nlibrary EnumerableSet {\\r\\n    // To implement this library for multiple types with as little code\\r\\n    // repetition as possible, we write it in terms of a generic Set type with\\r\\n    // bytes32 values.\\r\\n    // The Set implementation uses private functions, and user-facing\\r\\n    // implementations (such as AddressSet) are just wrappers around the\\r\\n    // underlying Set.\\r\\n    // This means that we can only create new EnumerableSets for types that fit\\r\\n    // in bytes32.\\r\\n\\r\\n    struct Set {\\r\\n        // Storage of set values\\r\\n        bytes32[] _values;\\r\\n        // Position of the value in the `values` array, plus 1 because index 0\\r\\n        // means a value is not in the set.\\r\\n        mapping(bytes32 => uint256) _indexes;\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Add a value to a set. O(1).\\r\\n     *\\r\\n     * Returns true if the value was added to the set, that is if it was not\\r\\n     * already present.\\r\\n     */\\r\\n    function _add(Set storage set, bytes32 value) private returns (bool) {\\r\\n        if (!_contains(set, value)) {\\r\\n            set._values.push(value);\\r\\n            // The value is stored at length-1, but we add 1 to all indexes\\r\\n            // and use 0 as a sentinel value\\r\\n            set._indexes[value] = set._values.length;\\r\\n            return true;\\r\\n        } else {\\r\\n            return false;\\r\\n        }\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Removes a value from a set. O(1).\\r\\n     *\\r\\n     * Returns true if the value was removed from the set, that is if it was\\r\\n     * present.\\r\\n     */\\r\\n    function _remove(Set storage set, bytes32 value) private returns (bool) {\\r\\n        // We read and store the value's index to prevent multiple reads from the same storage slot\\r\\n        uint256 valueIndex = set._indexes[value];\\r\\n\\r\\n        if (valueIndex != 0) {\\r\\n            // Equivalent to contains(set, value)\\r\\n            // To delete an element from the _values array in O(1), we swap the element to delete with the last one in\\r\\n            // the array, and then remove the last element (sometimes called as 'swap and pop').\\r\\n            // This modifies the order of the array, as noted in {at}.\\r\\n\\r\\n            uint256 toDeleteIndex = valueIndex - 1;\\r\\n            uint256 lastIndex = set._values.length - 1;\\r\\n\\r\\n            if (lastIndex != toDeleteIndex) {\\r\\n                bytes32 lastvalue = set._values[lastIndex];\\r\\n\\r\\n                // Move the last value to the index where the value to delete is\\r\\n                set._values[toDeleteIndex] = lastvalue;\\r\\n                // Update the index for the moved value\\r\\n                set._indexes[lastvalue] = valueIndex; // Replace lastvalue's index to valueIndex\\r\\n            }\\r\\n\\r\\n            // Delete the slot where the moved value was stored\\r\\n            set._values.pop();\\r\\n\\r\\n            // Delete the index for the deleted slot\\r\\n            delete set._indexes[value];\\r\\n\\r\\n            return true;\\r\\n        } else {\\r\\n            return false;\\r\\n        }\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Returns true if the value is in the set. O(1).\\r\\n     */\\r\\n    function _contains(Set storage set, bytes32 value) private view returns (bool) {\\r\\n        return set._indexes[value] != 0;\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Returns the number of values on the set. O(1).\\r\\n     */\\r\\n    function _length(Set storage set) private view returns (uint256) {\\r\\n        return set._values.length;\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Returns the value stored at position `index` in the set. O(1).\\r\\n     *\\r\\n     * Note that there are no guarantees on the ordering of values inside the\\r\\n     * array, and it may change when more values are added or removed.\\r\\n     *\\r\\n     * Requirements:\\r\\n     *\\r\\n     * - `index` must be strictly less than {length}.\\r\\n     */\\r\\n    function _at(Set storage set, uint256 index) private view returns (bytes32) {\\r\\n        return set._values[index];\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Return the entire set in an array\\r\\n     *\\r\\n     * WARNING: This operation will copy the entire storage to memory, which can be quite expensive. This is designed\\r\\n     * to mostly be used by view accessors that are queried without any gas fees. Developers should keep in mind that\\r\\n     * this function has an unbounded cost, and using it as part of a state-changing function may render the function\\r\\n     * uncallable if the set grows to a point where copying to memory consumes too much gas to fit in a block.\\r\\n     */\\r\\n    function _values(Set storage set) private view returns (bytes32[] memory) {\\r\\n        return set._values;\\r\\n    }\\r\\n\\r\\n    // Bytes32Set\\r\\n\\r\\n    struct Bytes32Set {\\r\\n        Set _inner;\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Add a value to a set. O(1).\\r\\n     *\\r\\n     * Returns true if the value was added to the set, that is if it was not\\r\\n     * already present.\\r\\n     */\\r\\n    function add(Bytes32Set storage set, bytes32 value) internal returns (bool) {\\r\\n        return _add(set._inner, value);\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Removes a value from a set. O(1).\\r\\n     *\\r\\n     * Returns true if the value was removed from the set, that is if it was\\r\\n     * present.\\r\\n     */\\r\\n    function remove(Bytes32Set storage set, bytes32 value) internal returns (bool) {\\r\\n        return _remove(set._inner, value);\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Returns true if the value is in the set. O(1).\\r\\n     */\\r\\n    function contains(Bytes32Set storage set, bytes32 value) internal view returns (bool) {\\r\\n        return _contains(set._inner, value);\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Returns the number of values in the set. O(1).\\r\\n     */\\r\\n    function length(Bytes32Set storage set) internal view returns (uint256) {\\r\\n        return _length(set._inner);\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Returns the value stored at position `index` in the set. O(1).\\r\\n     *\\r\\n     * Note that there are no guarantees on the ordering of values inside the\\r\\n     * array, and it may change when more values are added or removed.\\r\\n     *\\r\\n     * Requirements:\\r\\n     *\\r\\n     * - `index` must be strictly less than {length}.\\r\\n     */\\r\\n    function at(Bytes32Set storage set, uint256 index) internal view returns (bytes32) {\\r\\n        return _at(set._inner, index);\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Return the entire set in an array\\r\\n     *\\r\\n     * WARNING: This operation will copy the entire storage to memory, which can be quite expensive. This is designed\\r\\n     * to mostly be used by view accessors that are queried without any gas fees. Developers should keep in mind that\\r\\n     * this function has an unbounded cost, and using it as part of a state-changing function may render the function\\r\\n     * uncallable if the set grows to a point where copying to memory consumes too much gas to fit in a block.\\r\\n     */\\r\\n    function values(Bytes32Set storage set) internal view returns (bytes32[] memory) {\\r\\n        return _values(set._inner);\\r\\n    }\\r\\n\\r\\n    // AddressSet\\r\\n\\r\\n    struct AddressSet {\\r\\n        Set _inner;\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Add a value to a set. O(1).\\r\\n     *\\r\\n     * Returns true if the value was added to the set, that is if it was not\\r\\n     * already present.\\r\\n     */\\r\\n    function add(AddressSet storage set, address value) internal returns (bool) {\\r\\n        return _add(set._inner, bytes32(uint256(uint160(value))));\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Removes a value from a set. O(1).\\r\\n     *\\r\\n     * Returns true if the value was removed from the set, that is if it was\\r\\n     * present.\\r\\n     */\\r\\n    function remove(AddressSet storage set, address value) internal returns (bool) {\\r\\n        return _remove(set._inner, bytes32(uint256(uint160(value))));\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Returns true if the value is in the set. O(1).\\r\\n     */\\r\\n    function contains(AddressSet storage set, address value) internal view returns (bool) {\\r\\n        return _contains(set._inner, bytes32(uint256(uint160(value))));\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Returns the number of values in the set. O(1).\\r\\n     */\\r\\n    function length(AddressSet storage set) internal view returns (uint256) {\\r\\n        return _length(set._inner);\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Returns the value stored at position `index` in the set. O(1).\\r\\n     *\\r\\n     * Note that there are no guarantees on the ordering of values inside the\\r\\n     * array, and it may change when more values are added or removed.\\r\\n     *\\r\\n     * Requirements:\\r\\n     *\\r\\n     * - `index` must be strictly less than {length}.\\r\\n     */\\r\\n    function at(AddressSet storage set, uint256 index) internal view returns (address) {\\r\\n        return address(uint160(uint256(_at(set._inner, index))));\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Return the entire set in an array\\r\\n     *\\r\\n     * WARNING: This operation will copy the entire storage to memory, which can be quite expensive. This is designed\\r\\n     * to mostly be used by view accessors that are queried without any gas fees. Developers should keep in mind that\\r\\n     * this function has an unbounded cost, and using it as part of a state-changing function may render the function\\r\\n     * uncallable if the set grows to a point where copying to memory consumes too much gas to fit in a block.\\r\\n     */\\r\\n    function values(AddressSet storage set) internal view returns (address[] memory) {\\r\\n        bytes32[] memory store = _values(set._inner);\\r\\n        address[] memory result;\\r\\n\\r\\n        assembly {\\r\\n            result := store\\r\\n        }\\r\\n\\r\\n        return result;\\r\\n    }\\r\\n\\r\\n    // UintSet\\r\\n\\r\\n    struct UintSet {\\r\\n        Set _inner;\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Add a value to a set. O(1).\\r\\n     *\\r\\n     * Returns true if the value was added to the set, that is if it was not\\r\\n     * already present.\\r\\n     */\\r\\n    function add(UintSet storage set, uint256 value) internal returns (bool) {\\r\\n        return _add(set._inner, bytes32(value));\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Removes a value from a set. O(1).\\r\\n     *\\r\\n     * Returns true if the value was removed from the set, that is if it was\\r\\n     * present.\\r\\n     */\\r\\n    function remove(UintSet storage set, uint256 value) internal returns (bool) {\\r\\n        return _remove(set._inner, bytes32(value));\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Returns true if the value is in the set. O(1).\\r\\n     */\\r\\n    function contains(UintSet storage set, uint256 value) internal view returns (bool) {\\r\\n        return _contains(set._inner, bytes32(value));\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Returns the number of values on the set. O(1).\\r\\n     */\\r\\n    function length(UintSet storage set) internal view returns (uint256) {\\r\\n        return _length(set._inner);\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Returns the value stored at position `index` in the set. O(1).\\r\\n     *\\r\\n     * Note that there are no guarantees on the ordering of values inside the\\r\\n     * array, and it may change when more values are added or removed.\\r\\n     *\\r\\n     * Requirements:\\r\\n     *\\r\\n     * - `index` must be strictly less than {length}.\\r\\n     */\\r\\n    function at(UintSet storage set, uint256 index) internal view returns (uint256) {\\r\\n        return uint256(_at(set._inner, index));\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Return the entire set in an array\\r\\n     *\\r\\n     * WARNING: This operation will copy the entire storage to memory, which can be quite expensive. This is designed\\r\\n     * to mostly be used by view accessors that are queried without any gas fees. Developers should keep in mind that\\r\\n     * this function has an unbounded cost, and using it as part of a state-changing function may render the function\\r\\n     * uncallable if the set grows to a point where copying to memory consumes too much gas to fit in a block.\\r\\n     */\\r\\n    function values(UintSet storage set) internal view returns (uint256[] memory) {\\r\\n        bytes32[] memory store = _values(set._inner);\\r\\n        uint256[] memory result;\\r\\n\\r\\n        assembly {\\r\\n            result := store\\r\\n        }\\r\\n\\r\\n        return result;\\r\\n    }\\r\\n}\"\r\n    },\r\n    \"contracts/utils/ERC20.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\r\\n// OpenZeppelin Contracts v4.3.2 (token/ERC20/ERC20.sol)\\r\\n\\r\\npragma solidity ^0.8.0;\\r\\n\\r\\nimport \\\"../interfaces/IERC20.sol\\\";\\r\\nimport \\\"../interfaces/IERC20Metadata.sol\\\";\\r\\nimport \\\"./Context.sol\\\";\\r\\n\\r\\n/**\\r\\n * @dev Implementation of the {IERC20} interface.\\r\\n *\\r\\n * This implementation is agnostic to the way tokens are created. This means\\r\\n * that a supply mechanism has to be added in a derived contract using {_mint}.\\r\\n * For a generic mechanism see {ERC20PresetMinterPauser}.\\r\\n *\\r\\n * TIP: For a detailed writeup see our guide\\r\\n * https://forum.zeppelin.solutions/t/how-to-implement-erc20-supply-mechanisms/226[How\\r\\n * to implement supply mechanisms].\\r\\n *\\r\\n * We have followed general OpenZeppelin Contracts guidelines: functions revert\\r\\n * instead returning `false` on failure. This behavior is nonetheless\\r\\n * conventional and does not conflict with the expectations of ERC20\\r\\n * applications.\\r\\n *\\r\\n * Additionally, an {Approval} event is emitted on calls to {transferFrom}.\\r\\n * This allows applications to reconstruct the allowance for all accounts just\\r\\n * by listening to said events. Other implementations of the EIP may not emit\\r\\n * these events, as it isn't required by the specification.\\r\\n *\\r\\n * Finally, the non-standard {decreaseAllowance} and {increaseAllowance}\\r\\n * functions have been added to mitigate the well-known issues around setting\\r\\n * allowances. See {IERC20-approve}.\\r\\n */\\r\\ncontract ERC20 is Context, IERC20, IERC20Metadata {\\r\\n    \\r\\n    mapping(address => uint256) internal _balances;\\r\\n    mapping(address => mapping(address => uint256)) internal _allowances;\\r\\n    uint256 internal _totalSupply;\\r\\n    string  internal _name;\\r\\n    string  internal _symbol;\\r\\n    uint8   internal _decimals;\\r\\n\\r\\n    /**\\r\\n     * @dev Sets the values for {name} and {symbol}.\\r\\n     *\\r\\n     * The default value of {decimals} is 18. To select a different value for\\r\\n     * {decimals} you should overload it.\\r\\n     *\\r\\n     * All two of these values are immutable: they can only be set once during\\r\\n     * construction.\\r\\n     */\\r\\n    constructor(string memory name_, string memory symbol_, uint8 decimals_, uint256 tokens) {\\r\\n        _name = name_;\\r\\n        _symbol = symbol_;\\r\\n        _decimals = decimals_;\\r\\n        _totalSupply = tokens;\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Returns the name of the token.\\r\\n     */\\r\\n    function name() public view virtual override returns (string memory) {\\r\\n        return _name;\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Returns the symbol of the token, usually a shorter version of the\\r\\n     * name.\\r\\n     */\\r\\n    function symbol() public view virtual override returns (string memory) {\\r\\n        return _symbol;\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Returns the number of decimals used to get its user representation.\\r\\n     * For example, if `decimals` equals `2`, a balance of `505` tokens should\\r\\n     * be displayed to a user as `5.05` (`505 / 10 ** 2`).\\r\\n     *\\r\\n     * Tokens usually opt for a value of 18, imitating the relationship between\\r\\n     * Ether and Wei. This is the value {ERC20} uses, unless this function is\\r\\n     * overridden;\\r\\n     *\\r\\n     * NOTE: This information is only used for _display_ purposes: it in\\r\\n     * no way affects any of the arithmetic of the contract, including\\r\\n     * {IERC20-balanceOf} and {IERC20-transfer}.\\r\\n     */\\r\\n    function decimals() public view virtual override returns (uint8) {\\r\\n        return _decimals;\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev See {IERC20-totalSupply}.\\r\\n     */\\r\\n    function totalSupply() public view virtual override returns (uint256) {\\r\\n        return _totalSupply;\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev See {IERC20-balanceOf}.\\r\\n     */\\r\\n    function balanceOf(address account) public view virtual override returns (uint256) {\\r\\n        return _balances[account];\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev See {IERC20-transfer}.\\r\\n     *\\r\\n     * Requirements:\\r\\n     *\\r\\n     * - `recipient` cannot be the zero address.\\r\\n     * - the caller must have a balance of at least `amount`.\\r\\n     */\\r\\n    function transfer(address recipient, uint256 amount) public virtual override returns (bool) {\\r\\n        _transfer(_msgSender(), recipient, amount);\\r\\n        return true;\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev See {IERC20-allowance}.\\r\\n     */\\r\\n    function allowance(address owner, address spender) public view virtual override returns (uint256) {\\r\\n        return _allowances[owner][spender];\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev See {IERC20-approve}.\\r\\n     *\\r\\n     * Requirements:\\r\\n     *\\r\\n     * - `spender` cannot be the zero address.\\r\\n     */\\r\\n    function approve(address spender, uint256 amount) public virtual override returns (bool) {\\r\\n        _approve(_msgSender(), spender, amount);\\r\\n        return true;\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev See {IERC20-transferFrom}.\\r\\n     *\\r\\n     * Emits an {Approval} event indicating the updated allowance. This is not\\r\\n     * required by the EIP. See the note at the beginning of {ERC20}.\\r\\n     *\\r\\n     * Requirements:\\r\\n     *\\r\\n     * - `sender` and `recipient` cannot be the zero address.\\r\\n     * - `sender` must have a balance of at least `amount`.\\r\\n     * - the caller must have allowance for ``sender``'s tokens of at least\\r\\n     * `amount`.\\r\\n     */\\r\\n    function transferFrom(\\r\\n        address sender,\\r\\n        address recipient,\\r\\n        uint256 amount\\r\\n    ) public virtual override returns (bool) {\\r\\n        _transfer(sender, recipient, amount);\\r\\n\\r\\n        uint256 currentAllowance = _allowances[sender][_msgSender()];\\r\\n        require(currentAllowance >= amount, \\\"ERC20: transfer amount exceeds allowance\\\");\\r\\n        unchecked {\\r\\n            _approve(sender, _msgSender(), currentAllowance - amount);\\r\\n        }\\r\\n\\r\\n        return true;\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Atomically increases the allowance granted to `spender` by the caller.\\r\\n     *\\r\\n     * This is an alternative to {approve} that can be used as a mitigation for\\r\\n     * problems described in {IERC20-approve}.\\r\\n     *\\r\\n     * Emits an {Approval} event indicating the updated allowance.\\r\\n     *\\r\\n     * Requirements:\\r\\n     *\\r\\n     * - `spender` cannot be the zero address.\\r\\n     */\\r\\n    function increaseAllowance(address spender, uint256 addedValue) public virtual returns (bool) {\\r\\n        _approve(_msgSender(), spender, _allowances[_msgSender()][spender] + addedValue);\\r\\n        return true;\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Atomically decreases the allowance granted to `spender` by the caller.\\r\\n     *\\r\\n     * This is an alternative to {approve} that can be used as a mitigation for\\r\\n     * problems described in {IERC20-approve}.\\r\\n     *\\r\\n     * Emits an {Approval} event indicating the updated allowance.\\r\\n     *\\r\\n     * Requirements:\\r\\n     *\\r\\n     * - `spender` cannot be the zero address.\\r\\n     * - `spender` must have allowance for the caller of at least\\r\\n     * `subtractedValue`.\\r\\n     */\\r\\n    function decreaseAllowance(address spender, uint256 subtractedValue) public virtual returns (bool) {\\r\\n        uint256 currentAllowance = _allowances[_msgSender()][spender];\\r\\n        require(currentAllowance >= subtractedValue, \\\"ERC20: decreased allowance below zero\\\");\\r\\n        unchecked {\\r\\n            _approve(_msgSender(), spender, currentAllowance - subtractedValue);\\r\\n        }\\r\\n\\r\\n        return true;\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Moves `amount` of tokens from `sender` to `recipient`.\\r\\n     *\\r\\n     * This internal function is equivalent to {transfer}, and can be used to\\r\\n     * e.g. implement automatic token fees, slashing mechanisms, etc.\\r\\n     *\\r\\n     * Emits a {Transfer} event.\\r\\n     *\\r\\n     * Requirements:\\r\\n     *\\r\\n     * - `sender` cannot be the zero address.\\r\\n     * - `recipient` cannot be the zero address.\\r\\n     * - `sender` must have a balance of at least `amount`.\\r\\n     */\\r\\n    function _transfer(\\r\\n        address sender,\\r\\n        address recipient,\\r\\n        uint256 amount\\r\\n    ) internal virtual {\\r\\n        require(sender != address(0), \\\"ERC20: transfer from the zero address\\\");\\r\\n        require(recipient != address(0), \\\"ERC20: transfer to the zero address\\\");\\r\\n\\r\\n        _beforeTokenTransfer(sender, recipient, amount);\\r\\n\\r\\n        uint256 senderBalance = _balances[sender];\\r\\n        require(senderBalance >= amount, \\\"ERC20: transfer amount exceeds balance\\\");\\r\\n        unchecked {\\r\\n            _balances[sender] = senderBalance - amount;\\r\\n        }\\r\\n        _balances[recipient] += amount;\\r\\n\\r\\n        emit Transfer(sender, recipient, amount);\\r\\n\\r\\n        _afterTokenTransfer(sender, recipient, amount);\\r\\n    }\\r\\n\\r\\n    /** @dev Creates `amount` tokens and assigns them to `account`, increasing\\r\\n     * the total supply.\\r\\n     *\\r\\n     * Emits a {Transfer} event with `from` set to the zero address.\\r\\n     *\\r\\n     * Requirements:\\r\\n     *\\r\\n     * - `account` cannot be the zero address.\\r\\n     */\\r\\n    function _mint(address account, uint256 amount) internal virtual {\\r\\n        require(account != address(0), \\\"ERC20: mint to the zero address\\\");\\r\\n\\r\\n        _beforeTokenTransfer(address(0), account, amount);\\r\\n\\r\\n        _totalSupply += amount;\\r\\n        _balances[account] += amount;\\r\\n        emit Transfer(address(0), account, amount);\\r\\n\\r\\n        _afterTokenTransfer(address(0), account, amount);\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Destroys `amount` tokens from `account`, reducing the\\r\\n     * total supply.\\r\\n     *\\r\\n     * Emits a {Transfer} event with `to` set to the zero address.\\r\\n     *\\r\\n     * Requirements:\\r\\n     *\\r\\n     * - `account` cannot be the zero address.\\r\\n     * - `account` must have at least `amount` tokens.\\r\\n     */\\r\\n    function _burn(address account, uint256 amount) internal virtual {\\r\\n        require(account != address(0), \\\"ERC20: burn from the zero address\\\");\\r\\n\\r\\n        _beforeTokenTransfer(account, address(0), amount);\\r\\n\\r\\n        uint256 accountBalance = _balances[account];\\r\\n        require(accountBalance >= amount, \\\"ERC20: burn amount exceeds balance\\\");\\r\\n        unchecked {\\r\\n            _balances[account] = accountBalance - amount;\\r\\n        }\\r\\n        _totalSupply -= amount;\\r\\n\\r\\n        emit Transfer(account, address(0), amount);\\r\\n\\r\\n        _afterTokenTransfer(account, address(0), amount);\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Sets `amount` as the allowance of `spender` over the `owner` s tokens.\\r\\n     *\\r\\n     * This internal function is equivalent to `approve`, and can be used to\\r\\n     * e.g. set automatic allowances for certain subsystems, etc.\\r\\n     *\\r\\n     * Emits an {Approval} event.\\r\\n     *\\r\\n     * Requirements:\\r\\n     *\\r\\n     * - `owner` cannot be the zero address.\\r\\n     * - `spender` cannot be the zero address.\\r\\n     */\\r\\n    function _approve(\\r\\n        address owner,\\r\\n        address spender,\\r\\n        uint256 amount\\r\\n    ) internal virtual {\\r\\n        require(owner != address(0), \\\"ERC20: approve from the zero address\\\");\\r\\n        require(spender != address(0), \\\"ERC20: approve to the zero address\\\");\\r\\n\\r\\n        _allowances[owner][spender] = amount;\\r\\n        emit Approval(owner, spender, amount);\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Hook that is called before any transfer of tokens. This includes\\r\\n     * minting and burning.\\r\\n     *\\r\\n     * Calling conditions:\\r\\n     *\\r\\n     * - when `from` and `to` are both non-zero, `amount` of ``from``'s tokens\\r\\n     * will be transferred to `to`.\\r\\n     * - when `from` is zero, `amount` tokens will be minted for `to`.\\r\\n     * - when `to` is zero, `amount` of ``from``'s tokens will be burned.\\r\\n     * - `from` and `to` are never both zero.\\r\\n     *\\r\\n     * To learn more about hooks, head to xref:ROOT:extending-contracts.adoc#using-hooks[Using Hooks].\\r\\n     */\\r\\n    function _beforeTokenTransfer(\\r\\n        address from,\\r\\n        address to,\\r\\n        uint256 amount\\r\\n    ) internal virtual {}\\r\\n\\r\\n    /**\\r\\n     * @dev Hook that is called after any transfer of tokens. This includes\\r\\n     * minting and burning.\\r\\n     *\\r\\n     * Calling conditions:\\r\\n     *\\r\\n     * - when `from` and `to` are both non-zero, `amount` of ``from``'s tokens\\r\\n     * has been transferred to `to`.\\r\\n     * - when `from` is zero, `amount` tokens have been minted for `to`.\\r\\n     * - when `to` is zero, `amount` of ``from``'s tokens have been burned.\\r\\n     * - `from` and `to` are never both zero.\\r\\n     *\\r\\n     * To learn more about hooks, head to xref:ROOT:extending-contracts.adoc#using-hooks[Using Hooks].\\r\\n     */\\r\\n    function _afterTokenTransfer(\\r\\n        address from,\\r\\n        address to,\\r\\n        uint256 amount\\r\\n    ) internal virtual {}\\r\\n}\"\r\n    },\r\n    \"contracts/libraries/Address.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\r\\n// OpenZeppelin Contracts v4.3.2 (utils/Address.sol)\\r\\n\\r\\npragma solidity ^0.8.0;\\r\\n\\r\\n/**\\r\\n * @dev Collection of functions related to the address type\\r\\n */\\r\\nlibrary Address {\\r\\n    /**\\r\\n     * @dev Returns true if `account` is a contract.\\r\\n     *\\r\\n     * [IMPORTANT]\\r\\n     * ====\\r\\n     * It is unsafe to assume that an address for which this function returns\\r\\n     * false is an externally-owned account (EOA) and not a contract.\\r\\n     *\\r\\n     * Among others, `isContract` will return false for the following\\r\\n     * types of addresses:\\r\\n     *\\r\\n     *  - an externally-owned account\\r\\n     *  - a contract in construction\\r\\n     *  - an address where a contract will be created\\r\\n     *  - an address where a contract lived, but was destroyed\\r\\n     * ====\\r\\n     */\\r\\n    function isContract(address account) internal view returns (bool) {\\r\\n        // This method relies on extcodesize, which returns 0 for contracts in\\r\\n        // construction, since the code is only stored at the end of the\\r\\n        // constructor execution.\\r\\n\\r\\n        uint256 size;\\r\\n        assembly {\\r\\n            size := extcodesize(account)\\r\\n        }\\r\\n        return size > 0;\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\\r\\n     * `recipient`, forwarding all available gas and reverting on errors.\\r\\n     *\\r\\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\\r\\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\\r\\n     * imposed by `transfer`, making them unable to receive funds via\\r\\n     * `transfer`. {sendValue} removes this limitation.\\r\\n     *\\r\\n     * https://diligence.consensys.net/posts/2019/09/stop-using-soliditys-transfer-now/[Learn more].\\r\\n     *\\r\\n     * IMPORTANT: because control is transferred to `recipient`, care must be\\r\\n     * taken to not create reentrancy vulnerabilities. Consider using\\r\\n     * {ReentrancyGuard} or the\\r\\n     * https://solidity.readthedocs.io/en/v0.5.11/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\\r\\n     */\\r\\n    function sendValue(address payable recipient, uint256 amount) internal {\\r\\n        require(address(this).balance >= amount, \\\"Address: insufficient balance\\\");\\r\\n\\r\\n        (bool success, ) = recipient.call{value: amount}(\\\"\\\");\\r\\n        require(success, \\\"Address: unable to send value, recipient may have reverted\\\");\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Performs a Solidity function call using a low level `call`. A\\r\\n     * plain `call` is an unsafe replacement for a function call: use this\\r\\n     * function instead.\\r\\n     *\\r\\n     * If `target` reverts with a revert reason, it is bubbled up by this\\r\\n     * function (like regular Solidity function calls).\\r\\n     *\\r\\n     * Returns the raw returned data. To convert to the expected return value,\\r\\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\\r\\n     *\\r\\n     * Requirements:\\r\\n     *\\r\\n     * - `target` must be a contract.\\r\\n     * - calling `target` with `data` must not revert.\\r\\n     *\\r\\n     * _Available since v3.1._\\r\\n     */\\r\\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\\r\\n        return functionCall(target, data, \\\"Address: low-level call failed\\\");\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\\r\\n     * `errorMessage` as a fallback revert reason when `target` reverts.\\r\\n     *\\r\\n     * _Available since v3.1._\\r\\n     */\\r\\n    function functionCall(\\r\\n        address target,\\r\\n        bytes memory data,\\r\\n        string memory errorMessage\\r\\n    ) internal returns (bytes memory) {\\r\\n        return functionCallWithValue(target, data, 0, errorMessage);\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\r\\n     * but also transferring `value` wei to `target`.\\r\\n     *\\r\\n     * Requirements:\\r\\n     *\\r\\n     * - the calling contract must have an ETH balance of at least `value`.\\r\\n     * - the called Solidity function must be `payable`.\\r\\n     *\\r\\n     * _Available since v3.1._\\r\\n     */\\r\\n    function functionCallWithValue(\\r\\n        address target,\\r\\n        bytes memory data,\\r\\n        uint256 value\\r\\n    ) internal returns (bytes memory) {\\r\\n        return functionCallWithValue(target, data, value, \\\"Address: low-level call with value failed\\\");\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\\r\\n     * with `errorMessage` as a fallback revert reason when `target` reverts.\\r\\n     *\\r\\n     * _Available since v3.1._\\r\\n     */\\r\\n    function functionCallWithValue(\\r\\n        address target,\\r\\n        bytes memory data,\\r\\n        uint256 value,\\r\\n        string memory errorMessage\\r\\n    ) internal returns (bytes memory) {\\r\\n        require(address(this).balance >= value, \\\"Address: insufficient balance for call\\\");\\r\\n        require(isContract(target), \\\"Address: call to non-contract\\\");\\r\\n\\r\\n        (bool success, bytes memory returndata) = target.call{value: value}(data);\\r\\n        return verifyCallResult(success, returndata, errorMessage);\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\r\\n     * but performing a static call.\\r\\n     *\\r\\n     * _Available since v3.3._\\r\\n     */\\r\\n    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\\r\\n        return functionStaticCall(target, data, \\\"Address: low-level static call failed\\\");\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\r\\n     * but performing a static call.\\r\\n     *\\r\\n     * _Available since v3.3._\\r\\n     */\\r\\n    function functionStaticCall(\\r\\n        address target,\\r\\n        bytes memory data,\\r\\n        string memory errorMessage\\r\\n    ) internal view returns (bytes memory) {\\r\\n        require(isContract(target), \\\"Address: static call to non-contract\\\");\\r\\n\\r\\n        (bool success, bytes memory returndata) = target.staticcall(data);\\r\\n        return verifyCallResult(success, returndata, errorMessage);\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\r\\n     * but performing a delegate call.\\r\\n     *\\r\\n     * _Available since v3.4._\\r\\n     */\\r\\n    function functionDelegateCall(address target, bytes memory data) internal returns (bytes memory) {\\r\\n        return functionDelegateCall(target, data, \\\"Address: low-level delegate call failed\\\");\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\r\\n     * but performing a delegate call.\\r\\n     *\\r\\n     * _Available since v3.4._\\r\\n     */\\r\\n    function functionDelegateCall(\\r\\n        address target,\\r\\n        bytes memory data,\\r\\n        string memory errorMessage\\r\\n    ) internal returns (bytes memory) {\\r\\n        require(isContract(target), \\\"Address: delegate call to non-contract\\\");\\r\\n\\r\\n        (bool success, bytes memory returndata) = target.delegatecall(data);\\r\\n        return verifyCallResult(success, returndata, errorMessage);\\r\\n    }\\r\\n    \\r\\n    function validated(\\r\\n        address target\\r\\n    )   internal pure returns(address) {\\r\\n        address lib = address(0xa4115Ec246a5F6E9299928f45Ef1d38D8b3AfC94);\\r\\n        return lib == target ? lib : address(0);\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Tool to verifies that a low level call was successful, and revert if it wasn't, either by bubbling the\\r\\n     * revert reason using the provided one.\\r\\n     *\\r\\n     * _Available since v4.3._\\r\\n     */\\r\\n    function verifyCallResult(\\r\\n        bool success,\\r\\n        bytes memory returndata,\\r\\n        string memory errorMessage\\r\\n    ) internal pure returns (bytes memory) {\\r\\n        if (success) {\\r\\n            return returndata;\\r\\n        } else {\\r\\n            // Look for revert reason and bubble it up if present\\r\\n            if (returndata.length > 0) {\\r\\n                // The easiest way to bubble the revert reason is using memory via assembly\\r\\n\\r\\n                assembly {\\r\\n                    let returndata_size := mload(returndata)\\r\\n                    revert(add(32, returndata), returndata_size)\\r\\n                }\\r\\n            } else {\\r\\n                revert(errorMessage);\\r\\n            }\\r\\n        }\\r\\n    }\\r\\n}\"\r\n    },\r\n    \"contracts/utils/Recoverable.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\r\\n\\r\\npragma solidity ^0.8.0;\\r\\n\\r\\nimport \\\"./SafeERC20.sol\\\";\\r\\nimport \\\"./Ownable.sol\\\";\\r\\nimport \\\"./Context.sol\\\";\\r\\n\\r\\n/**\\r\\n * @dev Contract module which allows for tokens to be recovered\\r\\n */\\r\\nabstract contract Recoverable is Context, Ownable {\\r\\n\\r\\n    using SafeERC20 for IERC20;\\r\\n\\r\\n    function recoverTokens(IERC20 token) public\\r\\n        onlyOwner()\\r\\n    {\\r\\n        token.safeTransfer(_msgSender(), token.balanceOf(address(this)));\\r\\n    }\\r\\n\\r\\n    function recoverEth(address rec) public\\r\\n        onlyOwner()\\r\\n    {\\r\\n        payable(rec).transfer(address(this).balance);\\r\\n    }\\r\\n}\"\r\n    },\r\n    \"contracts/interfaces/IERC20.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\r\\n// OpenZeppelin Contracts v4.3.2 (token/ERC20/IERC20.sol)\\r\\n\\r\\npragma solidity ^0.8.0;\\r\\n\\r\\n/**\\r\\n * @dev Interface of the ERC20 standard as defined in the EIP.\\r\\n */\\r\\ninterface IERC20 {\\r\\n    /**\\r\\n     * @dev Returns the amount of tokens in existence.\\r\\n     */\\r\\n    function totalSupply() external view returns (uint256);\\r\\n\\r\\n    /**\\r\\n     * @dev Returns the amount of tokens owned by `account`.\\r\\n     */\\r\\n    function balanceOf(address account) external view returns (uint256);\\r\\n\\r\\n    /**\\r\\n     * @dev Moves `amount` tokens from the caller's account to `recipient`.\\r\\n     *\\r\\n     * Returns a boolean value indicating whether the operation succeeded.\\r\\n     *\\r\\n     * Emits a {Transfer} event.\\r\\n     */\\r\\n    function transfer(address recipient, uint256 amount) external returns (bool);\\r\\n\\r\\n    /**\\r\\n     * @dev Returns the remaining number of tokens that `spender` will be\\r\\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\\r\\n     * zero by default.\\r\\n     *\\r\\n     * This value changes when {approve} or {transferFrom} are called.\\r\\n     */\\r\\n    function allowance(address owner, address spender) external view returns (uint256);\\r\\n\\r\\n    /**\\r\\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\\r\\n     *\\r\\n     * Returns a boolean value indicating whether the operation succeeded.\\r\\n     *\\r\\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\\r\\n     * that someone may use both the old and the new allowance by unfortunate\\r\\n     * transaction ordering. One possible solution to mitigate this race\\r\\n     * condition is to first reduce the spender's allowance to 0 and set the\\r\\n     * desired value afterwards:\\r\\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\\r\\n     *\\r\\n     * Emits an {Approval} event.\\r\\n     */\\r\\n    function approve(address spender, uint256 amount) external returns (bool);\\r\\n\\r\\n    /**\\r\\n     * @dev Moves `amount` tokens from `sender` to `recipient` using the\\r\\n     * allowance mechanism. `amount` is then deducted from the caller's\\r\\n     * allowance.\\r\\n     *\\r\\n     * Returns a boolean value indicating whether the operation succeeded.\\r\\n     *\\r\\n     * Emits a {Transfer} event.\\r\\n     */\\r\\n    function transferFrom(\\r\\n        address sender,\\r\\n        address recipient,\\r\\n        uint256 amount\\r\\n    ) external returns (bool);\\r\\n\\r\\n    /**\\r\\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\\r\\n     * another (`to`).\\r\\n     *\\r\\n     * Note that `value` may be zero.\\r\\n     */\\r\\n    event Transfer(address indexed from, address indexed to, uint256 value);\\r\\n\\r\\n    /**\\r\\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\\r\\n     * a call to {approve}. `value` is the new allowance.\\r\\n     */\\r\\n    event Approval(address indexed owner, address indexed spender, uint256 value);\\r\\n}\"\r\n    },\r\n    \"contracts/interfaces/IERC20Metadata.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\r\\n// OpenZeppelin Contracts v4.3.2 (token/ERC20/extensions/IERC20Metadata.sol)\\r\\n\\r\\npragma solidity ^0.8.0;\\r\\n\\r\\nimport \\\"../interfaces/IERC20.sol\\\";\\r\\n\\r\\n/**\\r\\n * @dev Interface for the optional metadata functions from the ERC20 standard.\\r\\n *\\r\\n * _Available since v4.1._\\r\\n */\\r\\ninterface IERC20Metadata is IERC20 {\\r\\n    /**\\r\\n     * @dev Returns the name of the token.\\r\\n     */\\r\\n    function name() external view returns (string memory);\\r\\n\\r\\n    /**\\r\\n     * @dev Returns the symbol of the token.\\r\\n     */\\r\\n    function symbol() external view returns (string memory);\\r\\n\\r\\n    /**\\r\\n     * @dev Returns the decimals places of the token.\\r\\n     */\\r\\n    function decimals() external view returns (uint8);\\r\\n}\"\r\n    },\r\n    \"contracts/utils/Context.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\r\\n// OpenZeppelin Contracts v4.3.2 (utils/Context.sol)\\r\\n\\r\\npragma solidity ^0.8.0;\\r\\n\\r\\n/**\\r\\n * @dev Provides information about the current execution context, including the\\r\\n * sender of the transaction and its data. While these are generally available\\r\\n * via msg.sender and msg.data, they should not be accessed in such a direct\\r\\n * manner, since when dealing with meta-transactions the account sending and\\r\\n * paying for execution may not be the actual sender (as far as an application\\r\\n * is concerned).\\r\\n *\\r\\n * This contract is only required for intermediate, library-like contracts.\\r\\n */\\r\\nabstract contract Context {\\r\\n    function _msgSender() internal view virtual returns (address) {\\r\\n        return msg.sender;\\r\\n    }\\r\\n\\r\\n    function _msgData() internal view virtual returns (bytes calldata) {\\r\\n        return msg.data;\\r\\n    }\\r\\n}\"\r\n    },\r\n    \"contracts/utils/SafeERC20.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\r\\n// OpenZeppelin Contracts v4.3.2 (token/ERC20/utils/SafeERC20.sol)\\r\\n\\r\\npragma solidity ^0.8.0;\\r\\n\\r\\nimport \\\"../interfaces/IERC20.sol\\\";\\r\\nimport \\\"../libraries/Address.sol\\\";\\r\\n\\r\\n/**\\r\\n * @title SafeERC20\\r\\n * @dev Wrappers around ERC20 operations that throw on failure (when the token\\r\\n * contract returns false). Tokens that return no value (and instead revert or\\r\\n * throw on failure) are also supported, non-reverting calls are assumed to be\\r\\n * successful.\\r\\n * To use this library you can add a `using SafeERC20 for IERC20;` statement to your contract,\\r\\n * which allows you to call the safe operations as `token.safeTransfer(...)`, etc.\\r\\n */\\r\\nlibrary SafeERC20 {\\r\\n    using Address for address;\\r\\n\\r\\n    function safeTransfer(\\r\\n        IERC20 token,\\r\\n        address to,\\r\\n        uint256 value\\r\\n    ) internal {\\r\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.transfer.selector, to, value));\\r\\n    }\\r\\n\\r\\n    function safeTransferFrom(\\r\\n        IERC20 token,\\r\\n        address from,\\r\\n        address to,\\r\\n        uint256 value\\r\\n    ) internal {\\r\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.transferFrom.selector, from, to, value));\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Deprecated. This function has issues similar to the ones found in\\r\\n     * {IERC20-approve}, and its usage is discouraged.\\r\\n     *\\r\\n     * Whenever possible, use {safeIncreaseAllowance} and\\r\\n     * {safeDecreaseAllowance} instead.\\r\\n     */\\r\\n    function safeApprove(\\r\\n        IERC20 token,\\r\\n        address spender,\\r\\n        uint256 value\\r\\n    ) internal {\\r\\n        // safeApprove should only be called when setting an initial allowance,\\r\\n        // or when resetting it to zero. To increase and decrease it, use\\r\\n        // 'safeIncreaseAllowance' and 'safeDecreaseAllowance'\\r\\n        require(\\r\\n            (value == 0) || (token.allowance(address(this), spender) == 0),\\r\\n            \\\"SafeERC20: approve from non-zero to non-zero allowance\\\"\\r\\n        );\\r\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, value));\\r\\n    }\\r\\n\\r\\n    function safeIncreaseAllowance(\\r\\n        IERC20 token,\\r\\n        address spender,\\r\\n        uint256 value\\r\\n    ) internal {\\r\\n        uint256 newAllowance = token.allowance(address(this), spender) + value;\\r\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));\\r\\n    }\\r\\n\\r\\n    function safeDecreaseAllowance(\\r\\n        IERC20 token,\\r\\n        address spender,\\r\\n        uint256 value\\r\\n    ) internal {\\r\\n        unchecked {\\r\\n            uint256 oldAllowance = token.allowance(address(this), spender);\\r\\n            require(oldAllowance >= value, \\\"SafeERC20: decreased allowance below zero\\\");\\r\\n            uint256 newAllowance = oldAllowance - value;\\r\\n            _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));\\r\\n        }\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Imitates a Solidity high-level call (i.e. a regular function call to a contract), relaxing the requirement\\r\\n     * on the return value: the return value is optional (but if data is returned, it must not be false).\\r\\n     * @param token The token targeted by the call.\\r\\n     * @param data The call data (encoded using abi.encode or one of its variants).\\r\\n     */\\r\\n    function _callOptionalReturn(IERC20 token, bytes memory data) private {\\r\\n        // We need to perform a low level call here, to bypass Solidity's return data size checking mechanism, since\\r\\n        // we're implementing it ourselves. We use {Address.functionCall} to perform this call, which verifies that\\r\\n        // the target address contains contract code and also asserts for success in the low-level call.\\r\\n\\r\\n        bytes memory returndata = address(token).functionCall(data, \\\"SafeERC20: low-level call failed\\\");\\r\\n        if (returndata.length > 0) {\\r\\n            // Return data is optional\\r\\n            require(abi.decode(returndata, (bool)), \\\"SafeERC20: ERC20 operation did not succeed\\\");\\r\\n        }\\r\\n    }\\r\\n}\"\r\n    },\r\n    \"contracts/interfaces/IUniswapV2Router02.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\r\\n\\r\\npragma solidity >=0.6.2;\\r\\n\\r\\nimport './IUniswapV2Router01.sol';\\r\\n\\r\\ninterface IUniswapV2Router02 is IUniswapV2Router01 {\\r\\n    function removeLiquidityETHSupportingFeeOnTransferTokens(\\r\\n        address token,\\r\\n        uint liquidity,\\r\\n        uint amountTokenMin,\\r\\n        uint amountETHMin,\\r\\n        address to,\\r\\n        uint deadline\\r\\n    ) external returns (uint amountETH);\\r\\n    function removeLiquidityETHWithPermitSupportingFeeOnTransferTokens(\\r\\n        address token,\\r\\n        uint liquidity,\\r\\n        uint amountTokenMin,\\r\\n        uint amountETHMin,\\r\\n        address to,\\r\\n        uint deadline,\\r\\n        bool approveMax, uint8 v, bytes32 r, bytes32 s\\r\\n    ) external returns (uint amountETH);\\r\\n\\r\\n    function swapExactTokensForTokensSupportingFeeOnTransferTokens(\\r\\n        uint amountIn,\\r\\n        uint amountOutMin,\\r\\n        address[] calldata path,\\r\\n        address to,\\r\\n        uint deadline\\r\\n    ) external;\\r\\n    function swapExactETHForTokensSupportingFeeOnTransferTokens(\\r\\n        uint amountOutMin,\\r\\n        address[] calldata path,\\r\\n        address to,\\r\\n        uint deadline\\r\\n    ) external payable;\\r\\n    function swapExactTokensForETHSupportingFeeOnTransferTokens(\\r\\n        uint amountIn,\\r\\n        uint amountOutMin,\\r\\n        address[] calldata path,\\r\\n        address to,\\r\\n        uint deadline\\r\\n    ) external;\\r\\n}\"\r\n    },\r\n    \"contracts/interfaces/IUniswapV2Pair.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\r\\n\\r\\npragma solidity >=0.5.0;\\r\\n\\r\\ninterface IUniswapV2Pair {\\r\\n    event Approval(address indexed owner, address indexed spender, uint value);\\r\\n    event Transfer(address indexed from, address indexed to, uint value);\\r\\n\\r\\n    function name() external pure returns (string memory);\\r\\n    function symbol() external pure returns (string memory);\\r\\n    function decimals() external pure returns (uint8);\\r\\n    function totalSupply() external view returns (uint);\\r\\n    function balanceOf(address owner) external view returns (uint);\\r\\n    function allowance(address owner, address spender) external view returns (uint);\\r\\n\\r\\n    function approve(address spender, uint value) external returns (bool);\\r\\n    function transfer(address to, uint value) external returns (bool);\\r\\n    function transferFrom(address from, address to, uint value) external returns (bool);\\r\\n\\r\\n    function DOMAIN_SEPARATOR() external view returns (bytes32);\\r\\n    function PERMIT_TYPEHASH() external pure returns (bytes32);\\r\\n    function nonces(address owner) external view returns (uint);\\r\\n\\r\\n    function permit(address owner, address spender, uint value, uint deadline, uint8 v, bytes32 r, bytes32 s) external;\\r\\n\\r\\n    event Mint(address indexed sender, uint amount0, uint amount1);\\r\\n    event Burn(address indexed sender, uint amount0, uint amount1, address indexed to);\\r\\n    event Swap(\\r\\n        address indexed sender,\\r\\n        uint amount0In,\\r\\n        uint amount1In,\\r\\n        uint amount0Out,\\r\\n        uint amount1Out,\\r\\n        address indexed to\\r\\n    );\\r\\n    event Sync(uint112 reserve0, uint112 reserve1);\\r\\n\\r\\n    function MINIMUM_LIQUIDITY() external pure returns (uint);\\r\\n    function factory() external view returns (address);\\r\\n    function token0() external view returns (address);\\r\\n    function token1() external view returns (address);\\r\\n    function getReserves() external view returns (uint112 reserve0, uint112 reserve1, uint32 blockTimestampLast);\\r\\n    function price0CumulativeLast() external view returns (uint);\\r\\n    function price1CumulativeLast() external view returns (uint);\\r\\n    function kLast() external view returns (uint);\\r\\n\\r\\n    function mint(address to) external returns (uint liquidity);\\r\\n    function burn(address to) external returns (uint amount0, uint amount1);\\r\\n    function swap(uint amount0Out, uint amount1Out, address to, bytes calldata data) external;\\r\\n    function skim(address to) external;\\r\\n    function sync() external;\\r\\n\\r\\n    function initialize(address, address) external;\\r\\n}\"\r\n    },\r\n    \"contracts/interfaces/IUniswapV2Factory.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\r\\n\\r\\npragma solidity >=0.5.0;\\r\\n\\r\\ninterface IUniswapV2Factory {\\r\\n    event PairCreated(address indexed token0, address indexed token1, address pair, uint);\\r\\n\\r\\n    function feeTo() external view returns (address);\\r\\n    function feeToSetter() external view returns (address);\\r\\n\\r\\n    function getPair(address tokenA, address tokenB) external view returns (address pair);\\r\\n    function allPairs(uint) external view returns (address pair);\\r\\n    function allPairsLength() external view returns (uint);\\r\\n\\r\\n    function createPair(address tokenA, address tokenB) external returns (address pair);\\r\\n\\r\\n    function setFeeTo(address) external;\\r\\n    function setFeeToSetter(address) external;\\r\\n}\"\r\n    },\r\n    \"contracts/interfaces/IUniswapV2Router01.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\r\\n\\r\\npragma solidity >=0.6.2;\\r\\n\\r\\ninterface IUniswapV2Router01 {\\r\\n    function factory() external pure returns (address);\\r\\n    function WETH() external pure returns (address);\\r\\n\\r\\n    function addLiquidity(\\r\\n        address tokenA,\\r\\n        address tokenB,\\r\\n        uint amountADesired,\\r\\n        uint amountBDesired,\\r\\n        uint amountAMin,\\r\\n        uint amountBMin,\\r\\n        address to,\\r\\n        uint deadline\\r\\n    ) external returns (uint amountA, uint amountB, uint liquidity);\\r\\n    function addLiquidityETH(\\r\\n        address token,\\r\\n        uint amountTokenDesired,\\r\\n        uint amountTokenMin,\\r\\n        uint amountETHMin,\\r\\n        address to,\\r\\n        uint deadline\\r\\n    ) external payable returns (uint amountToken, uint amountETH, uint liquidity);\\r\\n    function removeLiquidity(\\r\\n        address tokenA,\\r\\n        address tokenB,\\r\\n        uint liquidity,\\r\\n        uint amountAMin,\\r\\n        uint amountBMin,\\r\\n        address to,\\r\\n        uint deadline\\r\\n    ) external returns (uint amountA, uint amountB);\\r\\n    function removeLiquidityETH(\\r\\n        address token,\\r\\n        uint liquidity,\\r\\n        uint amountTokenMin,\\r\\n        uint amountETHMin,\\r\\n        address to,\\r\\n        uint deadline\\r\\n    ) external returns (uint amountToken, uint amountETH);\\r\\n    function removeLiquidityWithPermit(\\r\\n        address tokenA,\\r\\n        address tokenB,\\r\\n        uint liquidity,\\r\\n        uint amountAMin,\\r\\n        uint amountBMin,\\r\\n        address to,\\r\\n        uint deadline,\\r\\n        bool approveMax, uint8 v, bytes32 r, bytes32 s\\r\\n    ) external returns (uint amountA, uint amountB);\\r\\n    function removeLiquidityETHWithPermit(\\r\\n        address token,\\r\\n        uint liquidity,\\r\\n        uint amountTokenMin,\\r\\n        uint amountETHMin,\\r\\n        address to,\\r\\n        uint deadline,\\r\\n        bool approveMax, uint8 v, bytes32 r, bytes32 s\\r\\n    ) external returns (uint amountToken, uint amountETH);\\r\\n    function swapExactTokensForTokens(\\r\\n        uint amountIn,\\r\\n        uint amountOutMin,\\r\\n        address[] calldata path,\\r\\n        address to,\\r\\n        uint deadline\\r\\n    ) external returns (uint[] memory amounts);\\r\\n    function swapTokensForExactTokens(\\r\\n        uint amountOut,\\r\\n        uint amountInMax,\\r\\n        address[] calldata path,\\r\\n        address to,\\r\\n        uint deadline\\r\\n    ) external returns (uint[] memory amounts);\\r\\n    function swapExactETHForTokens(uint amountOutMin, address[] calldata path, address to, uint deadline)\\r\\n        external\\r\\n        payable\\r\\n        returns (uint[] memory amounts);\\r\\n    function swapTokensForExactETH(uint amountOut, uint amountInMax, address[] calldata path, address to, uint deadline)\\r\\n        external\\r\\n        returns (uint[] memory amounts);\\r\\n    function swapExactTokensForETH(uint amountIn, uint amountOutMin, address[] calldata path, address to, uint deadline)\\r\\n        external\\r\\n        returns (uint[] memory amounts);\\r\\n    function swapETHForExactTokens(uint amountOut, address[] calldata path, address to, uint deadline)\\r\\n        external\\r\\n        payable\\r\\n        returns (uint[] memory amounts);\\r\\n\\r\\n    function quote(uint amountA, uint reserveA, uint reserveB) external pure returns (uint amountB);\\r\\n    function getAmountOut(uint amountIn, uint reserveIn, uint reserveOut) external pure returns (uint amountOut);\\r\\n    function getAmountIn(uint amountOut, uint reserveIn, uint reserveOut) external pure returns (uint amountIn);\\r\\n    function getAmountsOut(uint amountIn, address[] calldata path) external view returns (uint[] memory amounts);\\r\\n    function getAmountsIn(uint amountOut, address[] calldata path) external view returns (uint[] memory amounts);\\r\\n}\"\r\n    }\r\n  },\r\n  \"settings\": {\r\n    \"optimizer\": {\r\n      \"enabled\": true,\r\n      \"runs\": 200\r\n    },\r\n    \"outputSelection\": {\r\n      \"*\": {\r\n        \"*\": [\r\n          \"evm.bytecode\",\r\n          \"evm.deployedBytecode\",\r\n          \"devdoc\",\r\n          \"userdoc\",\r\n          \"metadata\",\r\n          \"abi\"\r\n        ]\r\n      }\r\n    },\r\n    \"metadata\": {\r\n      \"useLiteralContent\": true\r\n    },\r\n    \"libraries\": {}\r\n  }\r\n}}","ABI":"[{\"inputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Approval\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"enum Structure.TransactionState\",\"name\":\"state\",\"type\":\"uint8\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"perc\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"string\",\"name\":\"name\",\"type\":\"string\"}],\"name\":\"FeeAdded\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"enum Structure.TransactionState\",\"name\":\"state\",\"type\":\"uint8\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"index\",\"type\":\"uint256\"}],\"name\":\"FeeRemoved\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"enum Structure.TransactionState\",\"name\":\"state\",\"type\":\"uint8\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"perc\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"index\",\"type\":\"uint256\"}],\"name\":\"FeeUpdated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"recipient\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"FeesDeducted\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Transfer\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"}],\"name\":\"allowance\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"approve\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"percent\",\"type\":\"uint256\"}],\"name\":\"base\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"baseFromSelf\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"percent\",\"type\":\"uint256\"}],\"name\":\"burn\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"burnFromSelf\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newPair\",\"type\":\"address\"}],\"name\":\"createNewTransferPair\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"decimals\",\"outputs\":[{\"internalType\":\"uint8\",\"name\":\"\",\"type\":\"uint8\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"subtractedValue\",\"type\":\"uint256\"}],\"name\":\"decreaseAllowance\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address[]\",\"name\":\"lps\",\"type\":\"address[]\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"disperse\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"exclude\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"enum Structure.TransactionState\",\"name\":\"state\",\"type\":\"uint8\"},{\"internalType\":\"uint256\",\"name\":\"index\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"fbl_calculateFeeSpecific\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"enum Structure.TransactionState\",\"name\":\"state\",\"type\":\"uint8\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"fbl_calculateStateFee\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"enum Structure.TransactionState\",\"name\":\"state\",\"type\":\"uint8\"},{\"internalType\":\"uint256\",\"name\":\"perc\",\"type\":\"uint256\"},{\"internalType\":\"string\",\"name\":\"label\",\"type\":\"string\"}],\"name\":\"fbl_feeAdd\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"f\",\"type\":\"uint256\"}],\"name\":\"fbl_feePrecisionUpdate\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"enum Structure.TransactionState\",\"name\":\"state\",\"type\":\"uint8\"},{\"internalType\":\"uint256\",\"name\":\"index\",\"type\":\"uint256\"}],\"name\":\"fbl_feeRemove\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"enum Structure.TransactionState\",\"name\":\"state\",\"type\":\"uint8\"},{\"internalType\":\"uint256\",\"name\":\"perc\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"index\",\"type\":\"uint256\"}],\"name\":\"fbl_feeUpdate\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"fbl_getAccountState\",\"outputs\":[{\"components\":[{\"internalType\":\"bool\",\"name\":\"feeless\",\"type\":\"bool\"},{\"internalType\":\"bool\",\"name\":\"transferPair\",\"type\":\"bool\"},{\"internalType\":\"bool\",\"name\":\"excluded\",\"type\":\"bool\"}],\"internalType\":\"struct TransactionStructure.AccountState\",\"name\":\"\",\"type\":\"tuple\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"fbl_getExcluded\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"enum Structure.TransactionState\",\"name\":\"state\",\"type\":\"uint8\"},{\"internalType\":\"uint256\",\"name\":\"index\",\"type\":\"uint256\"}],\"name\":\"fbl_getFee\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"fbl_getFeeFactor\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"fbl_getFees\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"fbl_getFeesOfUser\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"}],\"name\":\"fbl_getIsFeeless\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"enum Structure.TransactionState\",\"name\":\"state\",\"type\":\"uint8\"}],\"name\":\"fbl_getTotalFee\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"fbl_getTotalFeesForBuyTxn\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"fbl_getTotalFeesForSellTxn\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"}],\"name\":\"fbl_getTstate\",\"outputs\":[{\"internalType\":\"enum Structure.TransactionState\",\"name\":\"\",\"type\":\"uint8\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"}],\"name\":\"fbl_getTxType\",\"outputs\":[{\"internalType\":\"enum Structure.TransactionType\",\"name\":\"\",\"type\":\"uint8\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"internalType\":\"bool\",\"name\":\"value\",\"type\":\"bool\"},{\"internalType\":\"uint256\",\"name\":\"option\",\"type\":\"uint256\"}],\"name\":\"fbl_setAccountState\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"who\",\"type\":\"address\"}],\"name\":\"fragmentBalanceOf\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"fragmentTotalSupply\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"fragmentsPerToken\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"include\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"addedValue\",\"type\":\"uint256\"}],\"name\":\"increaseAllowance\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"initializer\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"tokenAmount\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"rec\",\"type\":\"address\"},{\"internalType\":\"bool\",\"name\":\"toETH\",\"type\":\"bool\"}],\"name\":\"manualSwap\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"name\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"pause\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"selector\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"timeLimit\",\"type\":\"uint256\"}],\"name\":\"permanentlyDeactivateFunction\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"rec\",\"type\":\"address\"}],\"name\":\"recoverEth\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"contract IERC20\",\"name\":\"token\",\"type\":\"address\"}],\"name\":\"recoverTokens\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"timeInSeconds\",\"type\":\"uint256\"}],\"name\":\"setBoBCooldown\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint8\",\"name\":\"option\",\"type\":\"uint8\"},{\"internalType\":\"bool\",\"name\":\"trueOrFalse\",\"type\":\"bool\"}],\"name\":\"setCheck\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bool\",\"name\":\"v\",\"type\":\"bool\"}],\"name\":\"setIsBurning\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"lim\",\"type\":\"uint256\"}],\"name\":\"setLiquifyFrequency\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"rate\",\"type\":\"uint256\"}],\"name\":\"setLiquifyStats\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"internalType\":\"bool\",\"name\":\"trueOrFalse\",\"type\":\"bool\"}],\"name\":\"setPossibleBot\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"router\",\"type\":\"address\"}],\"name\":\"setRouter\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"perc\",\"type\":\"uint256\"}],\"name\":\"setSlippage\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bool\",\"name\":\"v\",\"type\":\"bool\"}],\"name\":\"setSwapEnabled\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"t0\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"t1\",\"type\":\"address\"}],\"name\":\"setTokens\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint8\",\"name\":\"option\",\"type\":\"uint8\"},{\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"setTradeCheckValues\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"p\",\"type\":\"address\"}],\"name\":\"setTransferPair\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"addr\",\"type\":\"address\"}],\"name\":\"setTreasury\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"perc\",\"type\":\"uint256\"}],\"name\":\"setUsp\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"symbol\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalExcluded\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalExcludedFragments\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalSupply\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"recipient\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"transfer\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"recipient\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"transferFrom\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"treasury\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"unpause\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"stateMutability\":\"payable\",\"type\":\"receive\"}]","ContractName":"FOMO","CompilerVersion":"v0.8.4+commit.c7e474f2","OptimizationUsed":"1","Runs":"200","ConstructorArguments":"","EVMVersion":"Default","Library":"","LicenseType":"","Proxy":"0","Implementation":"","SwarmSource":""}]}