{"status":"1","message":"OK","result":[{"SourceCode":"// SPDX-License-Identifier: NONE\n\npragma solidity 0.8.9;\n\n\n\n// Part: IERC20\n\ninterface IERC20 {\n    function totalSupply() external view returns (uint256);\n    function balanceOf(address account) external view returns (uint256);\n    function transfer(address recipient, uint256 amount) external returns (bool);\n    function allowance(address owner, address spender) external view returns (uint256);\n    function approve(address spender, uint256 amount) external returns (bool);\n    function transferFrom(address sender, address recipient, uint256 amount) external returns (bool);\n\n    event Transfer(address indexed from, address indexed to, uint256 value);\n\n    event Approval(address indexed owner, address indexed spender, uint256 value);\n}\n\n// File: RedEnvelop.sol\n\ncontract RedEnvelop {\n//    bytes4 private constant SELECTOR = bytes4(keccak256(bytes('burnFrom(address,uint256)')));\n\n    uint256 private constant ExpireDay = 1 days;\n//    uint256 private constant ExpireDay = 1 minutes;\n    uint256 private constant CloseoutDay = ExpireDay * 30;\n    uint256 private constant BonusMamb = 8 ether;\n    uint256 private constant LuckyDrawMamb = 24 ether;\n\n    uint256 public counter;\n\n    address payable public owner;\n\n    address public mambaCoinAddr;\n\n    struct RedEnvelopInfo {\n        // original info\n        uint16 count;\n        uint16 remainCount;\n        bool isPublic;\n        address creator;\n        address tokenAddr;\n        uint256 createTime;\n        uint256 money;\n        uint256 remainMoney;\n        mapping (address => bool) candidates;\n        mapping (address => uint256) recipientInfos;\n        mapping (address => uint256) luckydrawInfos;\n    }\n\n    mapping (uint256 => RedEnvelopInfo) public redEnvelopInfos;\n    constructor() public {\n        counter = 0;\n        owner = payable(msg.sender);\n    }\n\n    function initShareholder(address initTokenAddr) external {\n        require(mambaCoinAddr == address(0), \"Already Initialized\");\n        mambaCoinAddr = initTokenAddr;\n    }\n\n    event Create(uint256 envelopId, uint exprTime, uint closeoutTime);\n    event Open(uint256 envelopId, uint256 money, uint256 remainMoney, uint16 remainCount);\n    event LuckyDraw(uint256 envelopId, uint256 money, uint256 remainMoney, uint16 remainCount);\n    event DrawBack(uint256 envelopId, uint256 money);\n    event CloseOut(uint256 envelopId, uint256 money);\n\n    function create(address tokenAddr, uint256 money, uint16 count, address[] memory candidates) external payable returns (uint256) {\n        // check input\n        require(count > 0, \"Invalid count\");\n        require(money >= count, \"Invalid money\");\n\n        // save the red envelop infomation\n        uint256 envelopId = counter;\n        RedEnvelopInfo storage p = redEnvelopInfos[envelopId];\n        p.count = count;\n        p.remainCount = count;\n        p.creator = msg.sender;\n        p.tokenAddr = tokenAddr;\n        p.createTime = block.timestamp;\n        p.money = money;\n        p.remainMoney = money;\n\n        if (candidates.length > 0) {\n            p.isPublic = false;\n            for (uint i=0; i<candidates.length; i++) {\n                p.candidates[candidates[i]] = true;\n            }\n        } else {\n            p.isPublic = true;\n        }\n\n        // envelopId + 1\n        counter = counter + 1;\n\n        // if transfer ERC20\n        if (tokenAddr != address(0)) {\n            // convert address to IERC20\n            IERC20 token = IERC20(tokenAddr);\n            // check IERC20 token allowance\n            require(token.allowance(msg.sender, address(this)) >= money, \"Token allowance fail\");\n            // transfer money to contract\n            require(token.transferFrom(msg.sender, address(this), money), \"Token transfer fail\");\n        } else {\n        // if transfer an ether specify tokenAddr zero address\n            require(money <= msg.value, \"Insufficient ETH\");\n        }\n\n        emit Create(envelopId, p.createTime+ExpireDay, p.createTime+CloseoutDay);\n        return envelopId;\n    }\n\n    function _random(uint256 remainMoney, uint remainCount) private view returns (uint256) {\n       return uint256(keccak256(abi.encode(block.timestamp + block.difficulty + block.number))) % (remainMoney / remainCount * 2) + 1;\n    }\n\n    function _cal_random_amount(uint256 remainMoney, uint remainCount) private view returns (uint256) {\n        // calculate the amount to sender\n        uint256 amount = 0;\n        if (remainCount == 1) {\n            // if only one red envelop left, withdraw all\n            amount = remainMoney;\n        } else if (remainCount == remainMoney) {\n            // if remainCount == remainMoney, everyone share 1 since it can't be divided\n            amount = 1;\n        } else if (remainCount < remainMoney) {\n            // generate random luck money\n            amount = _random(remainMoney, remainCount);\n        }\n        return amount;\n    }\n\n    function _send(address tokenAddr, address payable to, uint256 amount) private {\n        // transfer lucky money to recipient\n        if (tokenAddr == address(0)) {\n            // ether red envelop\n            require(to.send(amount), \"Transfer ETH failed\");\n        } else {\n            // ERC20 red envelop\n            require(IERC20(tokenAddr).transfer(to, amount), \"Transfer Token failed\");\n        }\n    }\n\n    function open(uint256 redEnvelopId) external returns (uint256) {\n        require(redEnvelopInfos[redEnvelopId].creator != address(0), \"Invalid ID\");\n        require(block.timestamp < redEnvelopInfos[redEnvelopId].createTime + ExpireDay, \"Expired\");\n        require(redEnvelopInfos[redEnvelopId].remainCount > 0, \"No share left\");\n        require(redEnvelopInfos[redEnvelopId].recipientInfos[msg.sender] == 0, \"Already opened\");\n\n        if (!redEnvelopInfos[redEnvelopId].isPublic) {\n            require(redEnvelopInfos[redEnvelopId].candidates[msg.sender], \"Invalid candidate\");\n        }\n\n        // calculate the amount to sender\n        uint256 amount = _cal_random_amount(redEnvelopInfos[redEnvelopId].remainMoney, redEnvelopInfos[redEnvelopId].remainCount);\n\n        // update status\n        redEnvelopInfos[redEnvelopId].remainMoney = redEnvelopInfos[redEnvelopId].remainMoney - amount;\n        redEnvelopInfos[redEnvelopId].remainCount = redEnvelopInfos[redEnvelopId].remainCount - 1;\n        redEnvelopInfos[redEnvelopId].recipientInfos[msg.sender] = amount;\n\n        // transfer lucky money to recipient\n        _send(redEnvelopInfos[redEnvelopId].tokenAddr, payable(msg.sender), amount);\n\n        // transfer Mamb to recipient and creator\n        if (IERC20(mambaCoinAddr).balanceOf(address(this)) >= BonusMamb + BonusMamb) {\n            require(IERC20(mambaCoinAddr).transfer(msg.sender, BonusMamb), \"Transfer MAMB failed\");\n            require(IERC20(mambaCoinAddr).transfer(redEnvelopInfos[redEnvelopId].creator, BonusMamb), \"Transfer MAMB failed\");\n        }\n\n        emit Open(redEnvelopId, amount, redEnvelopInfos[redEnvelopId].remainMoney, redEnvelopInfos[redEnvelopId].remainCount);\n        return amount;\n    }\n\n    function luckydraw(uint256 redEnvelopId) external returns (uint256) {\n        require(redEnvelopInfos[redEnvelopId].creator != address(0), \"Invalid ID\");\n        require(block.timestamp > redEnvelopInfos[redEnvelopId].createTime + ExpireDay, \"Not expired\");\n        require(redEnvelopInfos[redEnvelopId].remainCount > 0, \"No share left\");\n        require(redEnvelopInfos[redEnvelopId].luckydrawInfos[msg.sender] == 0, \"Already luckydrew\");\n\n        // check Mamb allowance\n        require(IERC20(mambaCoinAddr).allowance(msg.sender, address(this)) >= LuckyDrawMamb, \"Require 24 MAMB\");\n\n        // calculate the amount to sender\n        uint256 amount = _cal_random_amount(redEnvelopInfos[redEnvelopId].remainMoney, redEnvelopInfos[redEnvelopId].remainCount);\n\n        // update status\n        redEnvelopInfos[redEnvelopId].remainMoney = redEnvelopInfos[redEnvelopId].remainMoney - amount;\n        redEnvelopInfos[redEnvelopId].remainCount = redEnvelopInfos[redEnvelopId].remainCount - 1;\n        redEnvelopInfos[redEnvelopId].luckydrawInfos[msg.sender] = amount;\n\n        // transfer lucky money to user\n        _send(redEnvelopInfos[redEnvelopId].tokenAddr, payable(msg.sender), amount);\n\n        // consume 24 MambaCoin\n        require(IERC20(mambaCoinAddr).transferFrom(msg.sender, address(this), LuckyDrawMamb), \"Insufficient MAMB\");\n//         burn 24 Mamb\n//        (bool success, bytes memory data) = mambaCoinAddr.call(abi.encodeWithSelector(SELECTOR, msg.sender, LuckyDrawMamb));\n//        require(success && (data.length == 0 || abi.decode(data, (bool))), 'Mamba Coin: BURN_FAILED');\n\n        emit LuckyDraw(redEnvelopId, amount, redEnvelopInfos[redEnvelopId].remainMoney, redEnvelopInfos[redEnvelopId].remainCount);\n\n        return amount;\n    }\n\n    function drawback(uint256 redEnvelopId) external returns (uint256) {\n        require(redEnvelopInfos[redEnvelopId].creator != address(0), \"Invalid ID\");\n        require(block.timestamp > redEnvelopInfos[redEnvelopId].createTime + ExpireDay, \"Not expired\");\n        require(msg.sender == redEnvelopInfos[redEnvelopId].creator, \"Not creator\");\n        require(redEnvelopInfos[redEnvelopId].remainMoney > 0, \"No money left\");\n\n        uint256 amount = redEnvelopInfos[redEnvelopId].remainMoney;\n        // update status\n        redEnvelopInfos[redEnvelopId].remainMoney = 0;\n        redEnvelopInfos[redEnvelopId].remainCount = 0;\n\n        // drawback remain money to creator\n        _send(redEnvelopInfos[redEnvelopId].tokenAddr, payable(msg.sender), amount);\n\n        emit DrawBack(redEnvelopId, amount);\n        return amount;\n    }\n\n    function closeout(uint256 redEnvelopId) external returns (uint256) {\n        require(redEnvelopInfos[redEnvelopId].creator != address(0), \"Invalid ID\");\n        require(block.timestamp > redEnvelopInfos[redEnvelopId].createTime + CloseoutDay, \"Not closed\");\n        require(msg.sender == owner, \"Not contract owner\");\n        require(redEnvelopInfos[redEnvelopId].remainMoney > 0, \"No money left\");\n\n        uint256 amount = redEnvelopInfos[redEnvelopId].remainMoney;\n        // update status\n        redEnvelopInfos[redEnvelopId].remainMoney = 0;\n        redEnvelopInfos[redEnvelopId].remainCount = 0;\n\n        // give remain money to author\n        _send(redEnvelopInfos[redEnvelopId].tokenAddr, owner, amount);\n\n        emit CloseOut(redEnvelopId, amount);\n        return amount;\n    }\n\n    function get_info(uint256 redEnvelopId) external view returns (address, address, uint256, uint256, uint16, uint16, bool, uint, uint) {\n        RedEnvelopInfo storage redEnvelopInfo = redEnvelopInfos[redEnvelopId];\n        return (\n        redEnvelopInfo.creator,\n        redEnvelopInfo.tokenAddr,\n        redEnvelopInfo.money,\n        redEnvelopInfo.remainMoney,\n        redEnvelopInfo.count,\n        redEnvelopInfo.remainCount,\n        redEnvelopInfo.isPublic,\n        redEnvelopInfo.createTime + ExpireDay,\n        redEnvelopInfo.createTime + CloseoutDay)\n        ;\n    }\n\n    function record(uint256 redEnvelopId, address candidate) external view returns (bool, uint256, uint256) {\n        return (\n        redEnvelopInfos[redEnvelopId].candidates[candidate],\n        redEnvelopInfos[redEnvelopId].recipientInfos[candidate],\n        redEnvelopInfos[redEnvelopId].luckydrawInfos[candidate]\n        );\n    }\n}\n","ABI":"[{\"inputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"envelopId\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"money\",\"type\":\"uint256\"}],\"name\":\"CloseOut\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"envelopId\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"exprTime\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"closeoutTime\",\"type\":\"uint256\"}],\"name\":\"Create\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"envelopId\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"money\",\"type\":\"uint256\"}],\"name\":\"DrawBack\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"envelopId\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"money\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"remainMoney\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint16\",\"name\":\"remainCount\",\"type\":\"uint16\"}],\"name\":\"LuckyDraw\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"envelopId\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"money\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"remainMoney\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint16\",\"name\":\"remainCount\",\"type\":\"uint16\"}],\"name\":\"Open\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"redEnvelopId\",\"type\":\"uint256\"}],\"name\":\"closeout\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"counter\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"tokenAddr\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"money\",\"type\":\"uint256\"},{\"internalType\":\"uint16\",\"name\":\"count\",\"type\":\"uint16\"},{\"internalType\":\"address[]\",\"name\":\"candidates\",\"type\":\"address[]\"}],\"name\":\"create\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"redEnvelopId\",\"type\":\"uint256\"}],\"name\":\"drawback\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"redEnvelopId\",\"type\":\"uint256\"}],\"name\":\"get_info\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"},{\"internalType\":\"uint16\",\"name\":\"\",\"type\":\"uint16\"},{\"internalType\":\"uint16\",\"name\":\"\",\"type\":\"uint16\"},{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"initTokenAddr\",\"type\":\"address\"}],\"name\":\"initShareholder\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"redEnvelopId\",\"type\":\"uint256\"}],\"name\":\"luckydraw\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"mambaCoinAddr\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"redEnvelopId\",\"type\":\"uint256\"}],\"name\":\"open\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address payable\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"redEnvelopId\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"candidate\",\"type\":\"address\"}],\"name\":\"record\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"redEnvelopInfos\",\"outputs\":[{\"internalType\":\"uint16\",\"name\":\"count\",\"type\":\"uint16\"},{\"internalType\":\"uint16\",\"name\":\"remainCount\",\"type\":\"uint16\"},{\"internalType\":\"bool\",\"name\":\"isPublic\",\"type\":\"bool\"},{\"internalType\":\"address\",\"name\":\"creator\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"tokenAddr\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"createTime\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"money\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"remainMoney\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"}]","ContractName":"RedEnvelop","CompilerVersion":"v0.8.9+commit.e5eed63a","OptimizationUsed":"1","Runs":"200","ConstructorArguments":"","EVMVersion":"Default","Library":"","LicenseType":"None","Proxy":"0","Implementation":"","SwarmSource":""}]}