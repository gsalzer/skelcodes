{"status":"1","message":"OK","result":[{"SourceCode":"{{\r\n  \"language\": \"Solidity\",\r\n  \"sources\": {\r\n    \"RetroCatsMetadata.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n/** \\n██████╗ ███████╗████████╗██████╗  ██████╗      ██████╗ █████╗ ████████╗███████╗    \\n██╔══██╗██╔════╝╚══██╔══╝██╔══██╗██╔═══██╗    ██╔════╝██╔══██╗╚══██╔══╝██╔════╝    \\n██████╔╝█████╗     ██║   ██████╔╝██║   ██║    ██║     ███████║   ██║   ███████╗    \\n██╔══██╗██╔══╝     ██║   ██╔══██╗██║   ██║    ██║     ██╔══██║   ██║   ╚════██║    \\n██║  ██║███████╗   ██║   ██║  ██║╚██████╔╝    ╚██████╗██║  ██║   ██║   ███████║    \\n╚═╝  ╚═╝╚══════╝   ╚═╝   ╚═╝  ╚═╝ ╚═════╝      ╚═════╝╚═╝  ╚═╝   ╚═╝   ╚══════╝    \\n                                                                                   \\n███╗   ███╗███████╗████████╗ █████╗ ██████╗  █████╗ ████████╗ █████╗               \\n████╗ ████║██╔════╝╚══██╔══╝██╔══██╗██╔══██╗██╔══██╗╚══██╔══╝██╔══██╗              \\n██╔████╔██║█████╗     ██║   ███████║██║  ██║███████║   ██║   ███████║              \\n██║╚██╔╝██║██╔══╝     ██║   ██╔══██║██║  ██║██╔══██║   ██║   ██╔══██║              \\n██║ ╚═╝ ██║███████╗   ██║   ██║  ██║██████╔╝██║  ██║   ██║   ██║  ██║              \\n╚═╝     ╚═╝╚══════╝   ╚═╝   ╚═╝  ╚═╝╚═════╝ ╚═╝  ╚═╝   ╚═╝   ╚═╝  ╚═╝              \\n                                                                          \\n<<https://github.com/retro-cats/retro-cats-contracts>>\\n\\n*/\\npragma solidity 0.8.7;\\n\\n/*\\n * @title Our contract for describing what a cat looks like.\\n * @dev This contract has almost 0 functionality, except for rngToCat\\n * which is used to \\\"say\\\" what the random number (the DNA)\\n * of a cat would result in for a cat\\n */\\ncontract RetroCatsMetadata {\\n    uint256 internal s_maxChanceValue = 10000;\\n    struct RetroCat {\\n        Background background;\\n        Frame frame;\\n        Breed breed;\\n        Eyes eyes;\\n        Hair hair;\\n        Bling bling;\\n        Head head;\\n        Item item;\\n        Ring ring;\\n        Earring earring;\\n        Vice vice;\\n    }\\n\\n    struct TraitMetadata {\\n        uint256[34] backgrounds;\\n        uint256[12] frames;\\n        uint256[16] breeds;\\n        uint256[10] eyes;\\n        uint256[21] hairs;\\n        uint256[22] blings;\\n        uint256[21] heads;\\n        uint256[22] items;\\n        uint256[22] rings;\\n        uint256[22] earrings;\\n        uint256[22] vices;\\n    }\\n\\n    enum Background {\\n        Black,\\n        Blue,\\n        Green,\\n        Grey,\\n        Orange,\\n        Pink,\\n        Purple,\\n        Red,\\n        Yellow,\\n        LightBlue,\\n        LightGreen,\\n        LightPink,\\n        LightYellow,\\n        D1B,\\n        D1O,\\n        D1P,\\n        D1Y,\\n        D2B,\\n        D2O,\\n        D2P,\\n        D2Y,\\n        D3B,\\n        D3O,\\n        D3P,\\n        D3Y,\\n        D4B,\\n        D4O,\\n        D4P,\\n        D4Y,\\n        D5B,\\n        D5O,\\n        D5P,\\n        D5Y\\n    }\\n    enum Frame {\\n        Black,\\n        Brass,\\n        Browne,\\n        Glit,\\n        Gold,\\n        Leather,\\n        Pine,\\n        Silver,\\n        White,\\n        Wood,\\n        None\\n    }\\n    enum Breed {\\n        Bengal,\\n        Calico,\\n        Chimera,\\n        HighColor,\\n        Mitted,\\n        Solid,\\n        Tabby,\\n        Tortie,\\n        Tuxedo,\\n        Van,\\n        Cloud,\\n        Lightning,\\n        Mister,\\n        Spotty,\\n        Tiger\\n    }\\n    enum Eyes {\\n        BlueOpen,\\n        BlueWink,\\n        Closed,\\n        GreenOpen,\\n        GreenWink,\\n        OrangeOpen,\\n        OrangeWink,\\n        YellowOpen,\\n        YellowWink\\n    }\\n    enum Hair {\\n        Braid,\\n        Dreads,\\n        Fro,\\n        LongFlipped,\\n        LongStraight,\\n        Mullet,\\n        Muttonchops,\\n        Pageboy,\\n        ShortFlipped,\\n        None,\\n        BrownShag,\\n        GingerBangs,\\n        GingerShag,\\n        LongRocker,\\n        Pigtails,\\n        PunkSpikes,\\n        StackedPerm,\\n        TinyBraids,\\n        TVMom,\\n        Wedge\\n    }\\n    enum Bling {\\n        BlueNeckscarf,\\n        CopperBracelet,\\n        DiscoChest,\\n        HandlebarMustache,\\n        LongMustache,\\n        LoveBeads,\\n        MoonNecklaces,\\n        PeaceNecklace,\\n        PearlNecklace,\\n        PukaShellNecklace,\\n        CollarCuffs,\\n        FeatherBoa,\\n        CameoChoker,\\n        Woodenbeads,\\n        GoldFringe,\\n        TurquoiseNecklace,\\n        OrangeBoa,\\n        CoralNecklace,\\n        SilverFringe,\\n        SilverMoon,\\n        SunnyBeads\\n    }\\n    enum Head {\\n        AviatorGlasses,\\n        Daisy,\\n        Eyepatch,\\n        Headband,\\n        Headscarf,\\n        HeartGlasses,\\n        NewsboyCap,\\n        RoundGlasses,\\n        SquareGlasses,\\n        TopHat,\\n        BraidedHeadband,\\n        DaisyHeadband,\\n        DiscoHat,\\n        GoldTBand,\\n        GrandmaGlasses,\\n        GrandpaGlasses,\\n        GreenGlasses,\\n        RainbowScarf,\\n        RedBeret,\\n        TinselWig\\n    }\\n    enum Item {\\n        Atari,\\n        Disco,\\n        Ether,\\n        FlooyDisc,\\n        Houseplants,\\n        LandscapePainting,\\n        LavaLamp,\\n        PalmSurboard,\\n        Record,\\n        RedGuitar,\\n        TennisRacket,\\n        NerfFootball,\\n        Skateboard,\\n        Personalcomputer,\\n        Afghan,\\n        Fondue,\\n        LawnDarts,\\n        Rollerskates,\\n        Phone,\\n        Bicycle,\\n        Chair\\n    }\\n    enum Ring {\\n        Emerald,\\n        MoodBlue,\\n        MoodGreen,\\n        MoodPurple,\\n        MoodRed,\\n        Onyx,\\n        Ruby,\\n        Sapphire,\\n        Tortoiseshell,\\n        Turquoise,\\n        ChainRings,\\n        StackRings,\\n        NoseRing,\\n        MensGoldRing,\\n        MoonRing,\\n        EtherRing,\\n        OrbRing,\\n        GiantDiamond,\\n        TattooCat,\\n        TattooFish,\\n        TattooBird\\n    }\\n    enum Earring {\\n        Coral,\\n        DiamondStuds,\\n        GoldBobs,\\n        GoldChandelier,\\n        GoldHoops,\\n        OrangeWhite,\\n        RubyStuds,\\n        SilverHoops,\\n        Tortoiseshell,\\n        Turquoise,\\n        None,\\n        BlueWhite,\\n        GreenWhite,\\n        SilverChandelier,\\n        SapphireStuds,\\n        EmeraldStuds,\\n        PearlBobs,\\n        GoldChains,\\n        SilverChains,\\n        PinkMod,\\n        GoldJellyfish\\n    }\\n    enum Vice {\\n        Beer,\\n        Bong,\\n        Cigarette,\\n        Eggplant,\\n        JelloSalad,\\n        Joint,\\n        Mushrooms,\\n        PetRock,\\n        PurpleBagOfCoke,\\n        Whiskey,\\n        CheeseBall,\\n        ProtestSigns,\\n        TequilaSunrise,\\n        Grasshopper,\\n        PinaColada,\\n        QueensofDestructionCar,\\n        SPF4,\\n        SWPlush,\\n        SlideProjector,\\n        Tupperware,\\n        TigerMagazine\\n    }\\n\\n    uint256 public constant maxChanceValue = 10000;\\n    string public constant purr = \\\"Meow!\\\";\\n\\n    /**\\n     * @dev Percentages for each trait\\n     * @dev each row will always end with 10000\\n     * When picking a trait based on RNG, we will get a value between 0 - 99999\\n     * We choose the trait based on the sum of the integers up to the index\\n     * For example, if my random number is 251, and my array is [250, 200, 10000]\\n     *      This means my trait is at the 1st index. 251 is higher than 250, but lower than\\n     *      250 + 200\\n     */\\n    function traits() public pure returns (TraitMetadata memory allTraits) {\\n        allTraits = TraitMetadata(\\n            // backgrounds\\n            [500, 1100, 600, 1000, 900, 1400, 700, 2000, 800, 400, 270, 30, 100, 1, 6, 11, 16, 2, 7, 12, 17, 3, 8, 13, 18, 4, 9, 14, 19, 5, 10, 15, 10, maxChanceValue],\\n            // frames\\n            [250, 150, 300, 200, 40, 10, 80, 70, 400, 100, 8400, maxChanceValue],\\n            // breeds\\n            [90, 600, 75, 400, 900, 2700, 2100, 155, 2600, 280, 35, 1, 5, 50, 9, maxChanceValue],\\n            // eyes\\n            [1200, 10, 2000, 1400, 90, 1800, 1000, 1600, 900, maxChanceValue],\\n            // hairs\\n            [600, 4, 1000, 1200, 1200, 1, 500, 300, 700, 1600, 400, 450, 5, 7, 80, 3, 650, 350, 750, 200, maxChanceValue],\\n            // blings\\n            [1100, 200, 800, 500, 200, 700, 1400, 400, 800, 600, 1200, 40, 2, 350, 250, 450, 5, 50, 300, 650, 3, maxChanceValue],\\n            // heads\\n            [1200, 1100, 1, 1300, 600, 300, 1000, 400, 350, 900, 250, 60, 4, 300, 550, 500, 30, 950, 200, 5, maxChanceValue],\\n            // items\\n            [90, 800, 1, 1400, 1200, 900, 700, 550, 1300, 1000, 6, 400, 600, 200, 50, 60, 150, 250, 40, 300, 3, maxChanceValue],\\n            // rings\\n            [400, 1000, 900, 600, 850, 1300, 1200, 800, 500, 700, 250, 200, 150, 200, 500, 60, 350, 30, 1, 6, 3, maxChanceValue],\\n            // earings\\n            [400, 1, 200, 90, 1200, 500, 200, 1000, 300, 600, 3000, 250, 450, 105, 7, 5, 375, 725, 575, 4, 13, maxChanceValue],\\n            // vices\\n            [1000, 420, 1100, 1300, 50, 1200, 1450, 7, 30, 500, 400, 550, 200, 650, 460, 1, 20, 54, 2, 600, 6, maxChanceValue]\\n        );\\n    }\\n\\n    function rngToCat(uint256 randomNumber) external pure returns (RetroCat memory retroCat) {\\n        TraitMetadata memory allTraits = traits();\\n\\n        // retroCat = RetroCat(Background(traitIndexes[0]),Frame(1),Breed(1),Eyes(1),Hair(1),Bling(1),Head(1),Item(1),Ring(1),Earring(1),Vice(1));\\n        retroCat = RetroCat({\\n            background: Background(getTraitIndex(allTraits.backgrounds, getModdedRNG(randomNumber, 0))),\\n            frame: Frame(getTraitIndex(allTraits.frames, getModdedRNG(randomNumber, 1))),\\n            breed: Breed(getTraitIndex(allTraits.breeds, getModdedRNG(randomNumber, 2))),\\n            eyes: Eyes(getTraitIndex(allTraits.eyes, getModdedRNG(randomNumber, 3))),\\n            hair: Hair(getTraitIndex(allTraits.hairs, getModdedRNG(randomNumber, 4))),\\n            bling: Bling(getTraitIndex(allTraits.blings, getModdedRNG(randomNumber, 5))),\\n            head: Head(getTraitIndex(allTraits.heads, getModdedRNG(randomNumber, 6))),\\n            item: Item(getTraitIndex(allTraits.items, getModdedRNG(randomNumber, 7))),\\n            ring: Ring(getTraitIndex(allTraits.rings, getModdedRNG(randomNumber, 8))),\\n            earring: Earring(getTraitIndex(allTraits.earrings, getModdedRNG(randomNumber, 9))),\\n            vice: Vice(getTraitIndex(allTraits.vices, getModdedRNG(randomNumber, 10)))\\n        });\\n    }\\n\\n    function getModdedRNG(uint256 randomNumber, uint256 seed) public pure returns (uint256 modded_rng) {\\n        uint256 newRng = uint256(keccak256(abi.encode(randomNumber, seed)));\\n        modded_rng = newRng % maxChanceValue;\\n    }\\n\\n    function getTraitIndex(uint256[10] memory traitArray, uint256 moddedRNG) private pure returns (uint256) {\\n        uint256 cumulativeSum = 0;\\n        for (uint256 i = 0; i < traitArray.length; i++) {\\n            if (moddedRNG >= cumulativeSum && moddedRNG < cumulativeSum + traitArray[i]) {\\n                return i;\\n            }\\n            cumulativeSum = cumulativeSum + traitArray[i];\\n        }\\n        revert(\\\"Value outside maxChanceValue\\\");\\n    }\\n\\n    function getTraitIndex(uint256[12] memory traitArray, uint256 moddedRNG) private pure returns (uint256) {\\n        uint256 cumulativeSum = 0;\\n        for (uint256 i = 0; i < traitArray.length; i++) {\\n            if (moddedRNG >= cumulativeSum && moddedRNG < cumulativeSum + traitArray[i]) {\\n                return i;\\n            }\\n            cumulativeSum = cumulativeSum + traitArray[i];\\n        }\\n        revert(\\\"Value outside maxChanceValue\\\");\\n    }\\n\\n    function getTraitIndex(uint256[16] memory traitArray, uint256 moddedRNG) private pure returns (uint256) {\\n        uint256 cumulativeSum = 0;\\n        for (uint256 i = 0; i < traitArray.length; i++) {\\n            if (moddedRNG >= cumulativeSum && moddedRNG < cumulativeSum + traitArray[i]) {\\n                return i;\\n            }\\n            cumulativeSum = cumulativeSum + traitArray[i];\\n        }\\n        revert(\\\"Value outside maxChanceValue\\\");\\n    }\\n\\n    function getTraitIndex(uint256[21] memory traitArray, uint256 moddedRNG) private pure returns (uint256) {\\n        uint256 cumulativeSum = 0;\\n        for (uint256 i = 0; i < traitArray.length; i++) {\\n            if (moddedRNG >= cumulativeSum && moddedRNG < cumulativeSum + traitArray[i]) {\\n                return i;\\n            }\\n            cumulativeSum = cumulativeSum + traitArray[i];\\n        }\\n        revert(\\\"Value outside maxChanceValue\\\");\\n    }\\n\\n    function getTraitIndex(uint256[22] memory traitArray, uint256 moddedRNG) private pure returns (uint256) {\\n        uint256 cumulativeSum = 0;\\n        for (uint256 i = 0; i < traitArray.length; i++) {\\n            if (moddedRNG >= cumulativeSum && moddedRNG < cumulativeSum + traitArray[i]) {\\n                return i;\\n            }\\n            cumulativeSum = cumulativeSum + traitArray[i];\\n        }\\n        revert(\\\"Value outside maxChanceValue\\\");\\n    }\\n\\n    function getTraitIndex(uint256[34] memory traitArray, uint256 moddedRNG) private pure returns (uint256) {\\n        uint256 cumulativeSum = 0;\\n        for (uint256 i = 0; i < traitArray.length; i++) {\\n            if (moddedRNG >= cumulativeSum && moddedRNG < cumulativeSum + traitArray[i]) {\\n                return i;\\n            }\\n            cumulativeSum = cumulativeSum + traitArray[i];\\n        }\\n        revert(\\\"Value outside maxChanceValue\\\");\\n    }\\n}\\n\"\r\n    }\r\n  },\r\n  \"settings\": {\r\n    \"evmVersion\": \"istanbul\",\r\n    \"optimizer\": {\r\n      \"enabled\": true,\r\n      \"runs\": 200\r\n    },\r\n    \"outputSelection\": {\r\n      \"*\": {\r\n        \"*\": [\r\n          \"evm.bytecode\",\r\n          \"evm.deployedBytecode\",\r\n          \"devdoc\",\r\n          \"userdoc\",\r\n          \"metadata\",\r\n          \"abi\"\r\n        ]\r\n      }\r\n    }\r\n  }\r\n}}","ABI":"[{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"randomNumber\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"seed\",\"type\":\"uint256\"}],\"name\":\"getModdedRNG\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"modded_rng\",\"type\":\"uint256\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"maxChanceValue\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"purr\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"randomNumber\",\"type\":\"uint256\"}],\"name\":\"rngToCat\",\"outputs\":[{\"components\":[{\"internalType\":\"enum RetroCatsMetadata.Background\",\"name\":\"background\",\"type\":\"uint8\"},{\"internalType\":\"enum RetroCatsMetadata.Frame\",\"name\":\"frame\",\"type\":\"uint8\"},{\"internalType\":\"enum RetroCatsMetadata.Breed\",\"name\":\"breed\",\"type\":\"uint8\"},{\"internalType\":\"enum RetroCatsMetadata.Eyes\",\"name\":\"eyes\",\"type\":\"uint8\"},{\"internalType\":\"enum RetroCatsMetadata.Hair\",\"name\":\"hair\",\"type\":\"uint8\"},{\"internalType\":\"enum RetroCatsMetadata.Bling\",\"name\":\"bling\",\"type\":\"uint8\"},{\"internalType\":\"enum RetroCatsMetadata.Head\",\"name\":\"head\",\"type\":\"uint8\"},{\"internalType\":\"enum RetroCatsMetadata.Item\",\"name\":\"item\",\"type\":\"uint8\"},{\"internalType\":\"enum RetroCatsMetadata.Ring\",\"name\":\"ring\",\"type\":\"uint8\"},{\"internalType\":\"enum RetroCatsMetadata.Earring\",\"name\":\"earring\",\"type\":\"uint8\"},{\"internalType\":\"enum RetroCatsMetadata.Vice\",\"name\":\"vice\",\"type\":\"uint8\"}],\"internalType\":\"struct RetroCatsMetadata.RetroCat\",\"name\":\"retroCat\",\"type\":\"tuple\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"traits\",\"outputs\":[{\"components\":[{\"internalType\":\"uint256[34]\",\"name\":\"backgrounds\",\"type\":\"uint256[34]\"},{\"internalType\":\"uint256[12]\",\"name\":\"frames\",\"type\":\"uint256[12]\"},{\"internalType\":\"uint256[16]\",\"name\":\"breeds\",\"type\":\"uint256[16]\"},{\"internalType\":\"uint256[10]\",\"name\":\"eyes\",\"type\":\"uint256[10]\"},{\"internalType\":\"uint256[21]\",\"name\":\"hairs\",\"type\":\"uint256[21]\"},{\"internalType\":\"uint256[22]\",\"name\":\"blings\",\"type\":\"uint256[22]\"},{\"internalType\":\"uint256[21]\",\"name\":\"heads\",\"type\":\"uint256[21]\"},{\"internalType\":\"uint256[22]\",\"name\":\"items\",\"type\":\"uint256[22]\"},{\"internalType\":\"uint256[22]\",\"name\":\"rings\",\"type\":\"uint256[22]\"},{\"internalType\":\"uint256[22]\",\"name\":\"earrings\",\"type\":\"uint256[22]\"},{\"internalType\":\"uint256[22]\",\"name\":\"vices\",\"type\":\"uint256[22]\"}],\"internalType\":\"struct RetroCatsMetadata.TraitMetadata\",\"name\":\"allTraits\",\"type\":\"tuple\"}],\"stateMutability\":\"pure\",\"type\":\"function\"}]","ContractName":"RetroCatsMetadata","CompilerVersion":"v0.8.7+commit.e28d00a7","OptimizationUsed":"1","Runs":"200","ConstructorArguments":"","EVMVersion":"Default","Library":"","LicenseType":"MIT","Proxy":"0","Implementation":"","SwarmSource":""}]}