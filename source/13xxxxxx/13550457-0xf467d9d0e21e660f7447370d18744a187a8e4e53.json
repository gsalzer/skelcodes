{"status":"1","message":"OK","result":[{"SourceCode":"// SPDX-License-Identifier: MIT\r\n\r\npragma solidity ^0.8.0;\r\n\r\ncontract RH {\r\n  int256 private _one = 1000000000000000000;\r\n\r\n  function calc(uint256[] memory separators, int256[] memory params) public view returns (int256[4] memory) {\r\n    int256 totalInvoicedMaterial = params[separators[0]];\r\n    int256 producedSteel = params[separators[2]];\r\n    int256 stopLimit = params[separators[4]];\r\n    int256 contractedValueRatio = params[separators[6]];\r\n    int256 coefficient = params[separators[8]];\r\n\r\n    uint256 historyStart = 0;\r\n    uint256 historyEnd = 0;\r\n\r\n    int256 status = 0;\r\n    int256 averageProducedSteel = 0;\r\n\r\n    int256 lastStopLimit = 0;\r\n\r\n    int256 creditDebit = 0;\r\n\r\n    if (separators.length > 10) {\r\n      historyStart = separators[10];\r\n      historyEnd = separators[separators.length - 1];\r\n\r\n      lastStopLimit = params[historyEnd - 2];\r\n\r\n      if (stopLimit != lastStopLimit && params.length == 28) {\r\n        contractedValueRatio = _calculeBaseAdjustment(\r\n          params,\r\n          historyStart,\r\n          historyEnd,\r\n          contractedValueRatio,\r\n          stopLimit\r\n        );\r\n\r\n      }\r\n    }\r\n\r\n    int256 specificValueRatio = _calculeSpecificValueRatio(\r\n      totalInvoicedMaterial,\r\n      producedSteel\r\n    );\r\n\r\n    averageProducedSteel = _calculeAverage(\r\n      params,\r\n      historyStart,\r\n      historyEnd,\r\n      0\r\n    );\r\n\r\n    status = _defineStatus(\r\n      coefficient,\r\n      averageProducedSteel,\r\n      producedSteel\r\n    );\r\n\r\n    int256 specificPaymentRatio = _calculeSpecificPaymentRatio(\r\n      contractedValueRatio,\r\n      specificValueRatio,\r\n      status\r\n    );\r\n\r\n    int256 specificPayment = _calculeSpecificPayment(\r\n      specificPaymentRatio,\r\n      producedSteel\r\n    );\r\n\r\n    creditDebit = _calculeteCreditDebit(\r\n      int256(specificPaymentRatio),\r\n      int256(specificValueRatio),\r\n      int256(producedSteel)\r\n    );\r\n\r\n    return [\r\n      int256((specificPayment/_one)),\r\n      (status != 0 ? status *  _one : int(0)),\r\n      int256(specificPaymentRatio),\r\n      creditDebit/int(_one)\r\n    ];\r\n  }\r\n\r\n  function _calculeSpecificValueRatio(\r\n    int256 totalInvoicedMaterial,\r\n    int256 producedSteel\r\n  ) private view returns (int256) {\r\n    return ((totalInvoicedMaterial * _one) / (producedSteel));\r\n  }\r\n\r\n  function _calculeAverage(\r\n    int256[] memory params,\r\n    uint256 start,\r\n    uint256 end,\r\n    uint256 index\r\n  ) private view returns (int256) {\r\n\r\n    int256 total = 0;\r\n    int256 counter = 0;\r\n    int256 status = 0;\r\n\r\n    for (uint256 i = start; i <= end; i += 4) {\r\n      status = params[i + 2];\r\n\r\n      if (status == _one) {\r\n        total += params[i + index];\r\n        counter +=1;\r\n      }\r\n    }\r\n\r\n    if (counter > 0) {\r\n      return total / counter;\r\n    }\r\n\r\n    return 0;\r\n  }\r\n\r\n  function _calculeBaseAdjustment (\r\n    int256[] memory params,\r\n    uint256 historyStart,\r\n    uint256 historyEnd,\r\n    int256 contractedValueRatio,\r\n    int256 stopLimit\r\n  ) private view returns (int256) {\r\n    int256 averageSpecificValueRatio = _calculeAverage(\r\n      params,\r\n      historyStart,\r\n      historyEnd,\r\n      3\r\n    );\r\n\r\n    int256 average = (averageSpecificValueRatio + contractedValueRatio) / 2;\r\n\r\n    if (average < stopLimit) {\r\n      return average;\r\n    }\r\n\r\n    return average;\r\n  }\r\n\r\n  function _defineStatus(\r\n    int256 coefficient,\r\n    int256 averageProducedSteel,\r\n    int256 producedSteel\r\n  ) private view returns (int256) {\r\n    if ((producedSteel * _one) < (averageProducedSteel * (coefficient / 100))) {\r\n      return 0;\r\n    }\r\n\r\n    return 1;\r\n  }\r\n\r\n  function _calculeSpecificPaymentRatio(\r\n    int256 contractedValueRatio,\r\n    int256 specificValueRatio,\r\n    int256 status\r\n  ) private pure returns (int256) {\r\n    if (status == 1) {\r\n      return ((contractedValueRatio) + (specificValueRatio)) / 2;\r\n    }\r\n\r\n    return specificValueRatio;\r\n  }\r\n\r\n  function _calculeSpecificPayment(int256 specificPaymentRatio, int256 producedSteel) private pure returns (int256) {\r\n    return specificPaymentRatio * producedSteel;\r\n  }\r\n\r\n  function _calculeteCreditDebit(\r\n        int256 specificPaymentRatio,\r\n        int256 specificValueRatio,\r\n        int256 producedSteel\r\n    ) private pure returns (int256) {\r\n        int256 creditDebit = (specificPaymentRatio - specificValueRatio) * producedSteel ;\r\n        return creditDebit;\r\n    }\r\n  \r\n}","ABI":"[{\"inputs\":[{\"internalType\":\"uint256[]\",\"name\":\"separators\",\"type\":\"uint256[]\"},{\"internalType\":\"int256[]\",\"name\":\"params\",\"type\":\"int256[]\"}],\"name\":\"calc\",\"outputs\":[{\"internalType\":\"int256[4]\",\"name\":\"\",\"type\":\"int256[4]\"}],\"stateMutability\":\"view\",\"type\":\"function\"}]","ContractName":"RH","CompilerVersion":"v0.8.7+commit.e28d00a7","OptimizationUsed":"0","Runs":"200","ConstructorArguments":"","EVMVersion":"Default","Library":"","LicenseType":"MIT","Proxy":"0","Implementation":"","SwarmSource":"ipfs://3b7ae50158f9f2b1c45f95eec87ae9d125ab4f4f941bbd99381d00a71154c254"}]}