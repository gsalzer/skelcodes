{"status":"1","message":"OK","result":[{"SourceCode":"{{\r\n  \"language\": \"Solidity\",\r\n  \"sources\": {\r\n    \"/contracts/PlacesProvider.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\n/// @title Places provider\\n/// @author Places DAO\\n\\n/*************************************\\n * ████░░░░░░░░░░░░░░░░░░░░░░░░░████ *\\n * ██░░░░░░░██████░░██████░░░░░░░░██ *\\n * ░░░░░░░██████████████████░░░░░░░░ *\\n * ░░░░░████████      ████████░░░░░░ *\\n * ░░░░░██████  ██████  ██████░░░░░░ *\\n * ░░░░░██████  ██████  ██████░░░░░░ *\\n * ░░░░░░░████  ██████  ████░░░░░░░░ *\\n * ░░░░░░░░░████      ████░░░░░░░░░░ *\\n * ░░░░░░░░░░░██████████░░░░░░░░░░░░ *\\n * ░░░░░░░░░░░░░██████░░░░░░░░░░░░░░ *\\n * ██░░░░░░░░░░░░░██░░░░░░░░░░░░░░██ *\\n * ████░░░░░░░░░░░░░░░░░░░░░░░░░████ *\\n *************************************/\\n\\npragma solidity ^0.8.6;\\n\\nimport {IPlaces} from \\\"./interfaces/IPlaces.sol\\\";\\nimport {IPlacesProvider} from \\\"./interfaces/IPlacesProvider.sol\\\";\\nimport {IPlacesDrop} from \\\"./interfaces/IPlacesDrop.sol\\\";\\nimport {Ownable} from \\\"@openzeppelin/contracts/access/Ownable.sol\\\";\\n\\ncontract PlacesProvider is IPlacesProvider, Ownable {\\n    IPlacesDrop[] private drops;\\n\\n    constructor(IPlacesDrop[] memory _drops) {\\n        drops = _drops;\\n    }\\n\\n    /**\\n     * @notice Query the neighborhood treasury for the given token.\\n     */\\n    function getTreasury(uint256 tokenId)\\n        external\\n        view\\n        returns (address payable)\\n    {\\n        require(drops.length > 0, \\\"Provider not setup\\\");\\n        uint256 dropIndex = 0;\\n        while (dropIndex < drops.length) {\\n            if (tokenId <= drops[dropIndex].getEndingIndex()) {\\n                break;\\n            } else {\\n                dropIndex++;\\n            }\\n        }\\n\\n        require(\\n            tokenId <= drops[dropIndex].getEndingIndex(),\\n            \\\"Token exceeds places.\\\"\\n        );\\n\\n        return drops[dropIndex].getTreasury();\\n    }\\n\\n    /**\\n     * @notice Query the Place data for a given token.\\n     */\\n    function getPlace(uint256 tokenId)\\n        external\\n        view\\n        returns (IPlaces.Place memory)\\n    {\\n        require(drops.length > 0, \\\"Provider not setup\\\");\\n        uint256 dropIndex = 0;\\n        while (dropIndex < drops.length) {\\n            if (tokenId <= drops[dropIndex].getEndingIndex()) {\\n                break;\\n            } else {\\n                dropIndex++;\\n            }\\n        }\\n\\n        require(\\n            tokenId <= drops[dropIndex].getEndingIndex(),\\n            \\\"Token exceeds places\\\"\\n        );\\n\\n        return drops[dropIndex].getPlace(tokenId);\\n    }\\n\\n    /**\\n     * @notice Query the Place data for a total count.\\n     */\\n    function getPlaceSupply() external view returns (uint256 supplyCount) {\\n        require(drops.length > 0, \\\"Provider not setup\\\");\\n        return drops[drops.length - 1].getEndingIndex() + 1;\\n    }\\n}\\n\"\r\n    },\r\n    \"/contracts/interfaces/IPlacesProvider.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\n/// @title Interface for Places provider\\n/// @author Places DAO\\n\\n/*************************************\\n * ████░░░░░░░░░░░░░░░░░░░░░░░░░████ *\\n * ██░░░░░░░██████░░██████░░░░░░░░██ *\\n * ░░░░░░░██████████████████░░░░░░░░ *\\n * ░░░░░████████      ████████░░░░░░ *\\n * ░░░░░██████  ██████  ██████░░░░░░ *\\n * ░░░░░██████  ██████  ██████░░░░░░ *\\n * ░░░░░░░████  ██████  ████░░░░░░░░ *\\n * ░░░░░░░░░████      ████░░░░░░░░░░ *\\n * ░░░░░░░░░░░██████████░░░░░░░░░░░░ *\\n * ░░░░░░░░░░░░░██████░░░░░░░░░░░░░░ *\\n * ██░░░░░░░░░░░░░██░░░░░░░░░░░░░░██ *\\n * ████░░░░░░░░░░░░░░░░░░░░░░░░░████ *\\n *************************************/\\n\\npragma solidity ^0.8.6;\\n\\nimport {IPlaces} from \\\"./IPlaces.sol\\\";\\n\\ninterface IPlacesProvider {\\n    function getTreasury(uint256 tokenId)\\n        external\\n        view\\n        returns (address payable);\\n\\n    function getPlace(uint256 tokenId)\\n        external\\n        view\\n        returns (IPlaces.Place memory);\\n\\n    function getPlaceSupply() external view returns (uint256 supplyCount);\\n}\\n\"\r\n    },\r\n    \"/contracts/interfaces/IPlacesDrop.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\n/// @title Interface for Places drop\\n/// @author Places DAO\\n\\n/*************************************\\n * ▒ ▓ ░ ▒ ▓ ░ ▒ ▓ ░ ▒ ▓ ░ ▒ ▓ ░ ▒ ▓ *\\n * ▓ ▒                           ▓ ▒ *\\n * ▒          ████  ████           ▓ *\\n * ▓        ██  ████  ████         ▒ *\\n * ▒      ███    ███████████       ▓ *\\n * ▓      ████  ████████ ███       ▒ *\\n * ▒        ██████████ ███         ▓ *\\n * ▓          ██████ ███           ▒ *\\n * ▒            ███ ██             ▓ *\\n * ▓              ██               ▒ *\\n * ▒ ▓                           ▒ ▓ *\\n * ▓ ▒ ░ ▓ ▒ ░ ▓ ▒ ░ ▓ ▒ ░ ▓ ▒ ░ ▓ ▒ *\\n *************************************/\\n\\npragma solidity ^0.8.6;\\n\\nimport {IPlaces} from \\\"./IPlaces.sol\\\";\\n\\ninterface IPlacesDrop {\\n    function getTreasury() external view returns (address payable);\\n\\n    function getPlaceCount() external view returns (uint256);\\n\\n    function getEndingIndex() external view returns (uint256);\\n\\n    function getPlace(uint256 tokenId)\\n        external\\n        view\\n        returns (IPlaces.Place memory);\\n}\\n\"\r\n    },\r\n    \"/contracts/interfaces/IPlaces.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\n/// @title Interface for Places\\n/// @author Places DAO\\n\\n/*************************************\\n * ████░░░░░░░░░░░░░░░░░░░░░░░░░████ *\\n * ██░░░░░░░██████░░██████░░░░░░░░██ *\\n * ░░░░░░░██████████████████░░░░░░░░ *\\n * ░░░░░████████      ████████░░░░░░ *\\n * ░░░░░██████  ██████  ██████░░░░░░ *\\n * ░░░░░██████  ██████  ██████░░░░░░ *\\n * ░░░░░░░████  ██████  ████░░░░░░░░ *\\n * ░░░░░░░░░████      ████░░░░░░░░░░ *\\n * ░░░░░░░░░░░██████████░░░░░░░░░░░░ *\\n * ░░░░░░░░░░░░░██████░░░░░░░░░░░░░░ *\\n * ██░░░░░░░░░░░░░██░░░░░░░░░░░░░░██ *\\n * ████░░░░░░░░░░░░░░░░░░░░░░░░░████ *\\n *************************************/\\n\\npragma solidity ^0.8.6;\\n\\ninterface IPlaces {\\n    /**\\n     * @notice Location – Represents a geographic coordinate with altitude.\\n     *\\n     * Latitude and longitude values are in degrees under the WGS 84 reference\\n     * frame. Altitude values are in meters. Two location types are provided\\n     * int256 and string. The integer representation enables on chain computation\\n     * where as the string representation provides future computational compatability.\\n     *\\n     * Converting a location from a to integer uses GEO_RESOLUTION_INT denominator.\\n     * 37.73957402260721 encodes to 3773957402260721\\n     * -122.41902666230027 encodes to -12241902666230027\\n     *\\n     * hasAltitude – a boolean that indicates the validity of the altitude values\\n     * latitudeInt – integer representing the latitude in degrees encoded with\\n     * GEO_RESOLUTION_INT\\n     * longitudeInt – integer representing the longitude in degrees encoded with\\n     * GEO_RESOLUTION_INT\\n     * altitudeInt – integer representing the altitude in meters encoded with\\n     * GEO_RESOLUTION_INT\\n     * latitude – string representing the latitude coordinate in degrees under\\n     * the WGS 84 reference frame\\n     * longitude – string representing the longitude coordinate in degrees under\\n     * the WGS 84 reference frame\\n     * altitude – string representing the altitude measurement in meters\\n     */\\n    struct Location {\\n        int256 latitudeInt;\\n        int256 longitudeInt;\\n        int256 altitudeInt;\\n        bool hasAltitude;\\n        string latitude;\\n        string longitude;\\n        string altitude;\\n    }\\n\\n    /**\\n     * @notice Place – Represents place information for a geographic location.\\n     *\\n     * name – string representing the place name\\n     * streetAddress – string indicating a precise address\\n     * sublocality – string representing the subdivision and first-order civil\\n     * entity below locality (neighborhood or common name)\\n     * locality – string representing the incorporated city or town political\\n     * entity\\n     * subadministrativeArea – string representing the subdivision of the\\n     * second-order civil entity (county name)\\n     * administrativeArea – string representing the second-order civil entity\\n     * below country (state or region name)\\n     * country – string representing the national political entity\\n     * postalCode – string representing the code used to address postal mail\\n     * within the country\\n     * countryCode – string representing the ISO 3166-1 country code,\\n     * https://en.wikipedia.org/wiki/ISO_3166-1\\n     * location – geographic location of the place, see Location type\\n     * attributes – string array of attributes describing the place\\n     */\\n    struct Place {\\n        string name;\\n        string streetAddress;\\n        string sublocality;\\n        string locality;\\n        string subadministrativeArea;\\n        string administrativeArea;\\n        string country;\\n        string postalCode;\\n        string countryCode;\\n        Location location;\\n        string[3] attributes;\\n    }\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/utils/Context.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Provides information about the current execution context, including the\\n * sender of the transaction and its data. While these are generally available\\n * via msg.sender and msg.data, they should not be accessed in such a direct\\n * manner, since when dealing with meta-transactions the account sending and\\n * paying for execution may not be the actual sender (as far as an application\\n * is concerned).\\n *\\n * This contract is only required for intermediate, library-like contracts.\\n */\\nabstract contract Context {\\n    function _msgSender() internal view virtual returns (address) {\\n        return msg.sender;\\n    }\\n\\n    function _msgData() internal view virtual returns (bytes calldata) {\\n        return msg.data;\\n    }\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/access/Ownable.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../utils/Context.sol\\\";\\n\\n/**\\n * @dev Contract module which provides a basic access control mechanism, where\\n * there is an account (an owner) that can be granted exclusive access to\\n * specific functions.\\n *\\n * By default, the owner account will be the one that deploys the contract. This\\n * can later be changed with {transferOwnership}.\\n *\\n * This module is used through inheritance. It will make available the modifier\\n * `onlyOwner`, which can be applied to your functions to restrict their use to\\n * the owner.\\n */\\nabstract contract Ownable is Context {\\n    address private _owner;\\n\\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\\n\\n    /**\\n     * @dev Initializes the contract setting the deployer as the initial owner.\\n     */\\n    constructor() {\\n        _setOwner(_msgSender());\\n    }\\n\\n    /**\\n     * @dev Returns the address of the current owner.\\n     */\\n    function owner() public view virtual returns (address) {\\n        return _owner;\\n    }\\n\\n    /**\\n     * @dev Throws if called by any account other than the owner.\\n     */\\n    modifier onlyOwner() {\\n        require(owner() == _msgSender(), \\\"Ownable: caller is not the owner\\\");\\n        _;\\n    }\\n\\n    /**\\n     * @dev Leaves the contract without owner. It will not be possible to call\\n     * `onlyOwner` functions anymore. Can only be called by the current owner.\\n     *\\n     * NOTE: Renouncing ownership will leave the contract without an owner,\\n     * thereby removing any functionality that is only available to the owner.\\n     */\\n    function renounceOwnership() public virtual onlyOwner {\\n        _setOwner(address(0));\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Can only be called by the current owner.\\n     */\\n    function transferOwnership(address newOwner) public virtual onlyOwner {\\n        require(newOwner != address(0), \\\"Ownable: new owner is the zero address\\\");\\n        _setOwner(newOwner);\\n    }\\n\\n    function _setOwner(address newOwner) private {\\n        address oldOwner = _owner;\\n        _owner = newOwner;\\n        emit OwnershipTransferred(oldOwner, newOwner);\\n    }\\n}\\n\"\r\n    }\r\n  },\r\n  \"settings\": {\r\n    \"remappings\": [],\r\n    \"optimizer\": {\r\n      \"enabled\": true,\r\n      \"runs\": 1000\r\n    },\r\n    \"evmVersion\": \"london\",\r\n    \"libraries\": {},\r\n    \"outputSelection\": {\r\n      \"*\": {\r\n        \"*\": [\r\n          \"evm.bytecode\",\r\n          \"evm.deployedBytecode\",\r\n          \"devdoc\",\r\n          \"userdoc\",\r\n          \"metadata\",\r\n          \"abi\"\r\n        ]\r\n      }\r\n    }\r\n  }\r\n}}","ABI":"[{\"inputs\":[{\"internalType\":\"contract IPlacesDrop[]\",\"name\":\"_drops\",\"type\":\"address[]\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"getPlace\",\"outputs\":[{\"components\":[{\"internalType\":\"string\",\"name\":\"name\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"streetAddress\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"sublocality\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"locality\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"subadministrativeArea\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"administrativeArea\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"country\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"postalCode\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"countryCode\",\"type\":\"string\"},{\"components\":[{\"internalType\":\"int256\",\"name\":\"latitudeInt\",\"type\":\"int256\"},{\"internalType\":\"int256\",\"name\":\"longitudeInt\",\"type\":\"int256\"},{\"internalType\":\"int256\",\"name\":\"altitudeInt\",\"type\":\"int256\"},{\"internalType\":\"bool\",\"name\":\"hasAltitude\",\"type\":\"bool\"},{\"internalType\":\"string\",\"name\":\"latitude\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"longitude\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"altitude\",\"type\":\"string\"}],\"internalType\":\"struct IPlaces.Location\",\"name\":\"location\",\"type\":\"tuple\"},{\"internalType\":\"string[3]\",\"name\":\"attributes\",\"type\":\"string[3]\"}],\"internalType\":\"struct IPlaces.Place\",\"name\":\"\",\"type\":\"tuple\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getPlaceSupply\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"supplyCount\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"getTreasury\",\"outputs\":[{\"internalType\":\"address payable\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}]","ContractName":"PlacesProvider","CompilerVersion":"v0.8.9+commit.e5eed63a","OptimizationUsed":"1","Runs":"1000","ConstructorArguments":"0000000000000000000000000000000000000000000000000000000000000020000000000000000000000000000000000000000000000000000000000000000a000000000000000000000000ea7978fa76c161f55e17107f7d84f4e0194c52c4000000000000000000000000f9cfc02ff72948903ef7c2261eefd076405d66db00000000000000000000000073e75d05cc89f75460ff19195aaf20e9e8c07d240000000000000000000000001b662810d7a07e8e78ed972a2987ccb1c0f33bff0000000000000000000000005fff178cda44df19c977ce422306a5ecb3e465b9000000000000000000000000abbcc9af71c45a8ec8258de0108231d320e56d980000000000000000000000009c21a65b27a8d4229be8afbe899b9f63b44af0420000000000000000000000001682b9162420d9e5fc3488f56757ba0de7ce37f600000000000000000000000021933573fbbd19ea0b05775dc72de09e3f944623000000000000000000000000fd01ac309d403dbb1734b96c80a8ce6f9b065590","EVMVersion":"Default","Library":"","LicenseType":"","Proxy":"0","Implementation":"","SwarmSource":""}]}