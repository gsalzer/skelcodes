{"status":"1","message":"OK","result":[{"SourceCode":"{{\r\n  \"language\": \"Solidity\",\r\n  \"sources\": {\r\n    \"contracts/facets/RouterFacet.sol\": {\r\n      \"content\": \"//SPDX-License-Identifier: Unlicense\\npragma solidity 0.7.6;\\npragma experimental ABIEncoderV2;\\n\\nimport \\\"@openzeppelin/contracts/token/ERC20/SafeERC20.sol\\\";\\nimport \\\"@openzeppelin/contracts/utils/Counters.sol\\\";\\nimport \\\"../WrappedToken.sol\\\";\\nimport \\\"../interfaces/IERC2612Permit.sol\\\";\\nimport \\\"../interfaces/IRouter.sol\\\";\\nimport \\\"../libraries/LibFeeCalculator.sol\\\";\\nimport \\\"../libraries/LibFeeExternal.sol\\\";\\nimport \\\"../libraries/LibRouter.sol\\\";\\nimport \\\"../libraries/LibGovernance.sol\\\";\\n\\ncontract RouterFacet is IRouter {\\n    using Counters for Counters.Counter;\\n    using SafeERC20 for IERC20;\\n\\n    /**\\n     *  @notice Constructs the Router contract instance and deploys the wrapped ALBT token if not on the Ethereum network\\n     *  @param _chainId The chainId of the chain where this contract is deployed on\\n     *  @param _albtToken The address of the original ALBT token in the Ethereum chain\\n     */\\n    function initRouter(\\n        uint8 _chainId,\\n        address _albtToken\\n    )\\n        external override\\n    {\\n        LibRouter.Storage storage rs = LibRouter.routerStorage();\\n        require(!rs.initialized, \\\"Router: already initialized\\\");\\n        rs.initialized = true;\\n        rs.chainId = _chainId;\\n\\n        // If we're deployed on a network other than Ethereum, deploy a wrapped version of the ALBT token\\n        // otherwise use the native ALBT token for fees\\n        if(_chainId != 1) {\\n            bytes memory nativeAlbt = abi.encodePacked(_albtToken);\\n            WrappedToken wrappedAlbt = new WrappedToken(\\\"Wrapped AllianceBlock Token\\\", \\\"WALBT\\\", 18);\\n            rs.albtToken = address(wrappedAlbt);\\n            rs.nativeToWrappedToken[1][nativeAlbt] = rs.albtToken;\\n            rs.wrappedToNativeToken[rs.albtToken].chainId = 1;\\n            rs.wrappedToNativeToken[rs.albtToken].token = nativeAlbt;\\n            emit WrappedTokenDeployed(1, nativeAlbt, rs.albtToken);\\n        } else {\\n            rs.albtToken = _albtToken;\\n        }\\n    }\\n\\n    /// @notice Accepts number of signatures in the range (n/2; n] where n is the number of members\\n    modifier onlyValidSignatures(uint256 _n) {\\n        uint256 members = LibGovernance.membersCount();\\n        require(_n <= members, \\\"Governance: Invalid number of signatures\\\");\\n        require(_n > members / 2, \\\"Governance: Invalid number of signatures\\\");\\n        _;\\n    }\\n\\n    /**\\n     *  @param _chainId The chainId of the chain where `nativeToken` was originally created\\n     *  @param _nativeToken The address of the token\\n     *  @return The address of the wrapped counterpart of `nativeToken` in the current chain\\n     */\\n    function nativeToWrappedToken(uint8 _chainId, bytes memory _nativeToken) external view override returns (address) {\\n        LibRouter.Storage storage rs = LibRouter.routerStorage();\\n        return rs.nativeToWrappedToken[_chainId][_nativeToken];\\n    }\\n\\n    /**\\n     *  @param _wrappedToken The address of the wrapped token\\n     *  @return The chainId and address of the original token\\n     */\\n    function wrappedToNativeToken(address _wrappedToken) external view override returns (LibRouter.NativeTokenWithChainId memory) {\\n        LibRouter.Storage storage rs = LibRouter.routerStorage();\\n        return rs.wrappedToNativeToken[_wrappedToken];\\n    }\\n\\n    /**\\n     *  @param _chainId The chainId of the source chain\\n     *  @param _ethHash The ethereum signed message hash\\n     *  @return Whether this hash has already been used for a mint/unlock transaction\\n     */\\n    function hashesUsed(uint8 _chainId, bytes32 _ethHash) external view override returns (bool) {\\n        LibRouter.Storage storage rs = LibRouter.routerStorage();\\n        return rs.hashesUsed[_chainId][_ethHash];\\n    }\\n\\n    /// @return The address of the ALBT token in the current chain\\n    function albtToken() external view override returns (address) {\\n        LibRouter.Storage storage rs = LibRouter.routerStorage();\\n        return rs.albtToken;\\n    }\\n\\n    /**\\n     *  @notice Transfers `amount` native tokens to the router contract.\\n                The router must be authorised to transfer both the native token and the ALBT tokens for the fees.\\n     *  @param _targetChain The target chain for the bridging operation\\n     *  @param _nativeToken The token to be bridged\\n     *  @param _amount The amount of tokens to bridge\\n     *  @param _receiver The address of the receiver in the target chain\\n     */\\n    function lock(uint8 _targetChain, address _nativeToken, uint256 _amount, bytes memory _receiver) public override {\\n        LibRouter.Storage storage rs = LibRouter.routerStorage();\\n        LibFeeCalculator.Storage storage fcs = LibFeeCalculator.feeCalculatorStorage();\\n        LibFeeCalculator.distributeRewards();\\n        IERC20(rs.albtToken).safeTransferFrom(msg.sender, address(this), fcs.serviceFee);\\n        uint256 _chargedExternalFee = LibFeeExternal.chargeExternalFee();\\n        IERC20(_nativeToken).safeTransferFrom(msg.sender, address(this), _amount);\\n        emit Lock(_targetChain, _nativeToken, _receiver, _amount, fcs.serviceFee);\\n        emit Fees(fcs.serviceFee, _chargedExternalFee);\\n    }\\n\\n    /**\\n     *  @notice Locks the provided amount of nativeToken using an EIP-2612 permit and initiates a bridging transaction\\n     *  @param _targetChain The chain to bridge the tokens to\\n     *  @param _nativeToken The native token to bridge\\n     *  @param _amount The amount of nativeToken to lock and bridge\\n     *  @param _deadline The deadline for the provided permit\\n     *  @param _v The recovery id of the permit's ECDSA signature\\n     *  @param _r The first output of the permit's ECDSA signature\\n     *  @param _s The second output of the permit's ECDSA signature\\n     */\\n    function lockWithPermit(\\n        uint8 _targetChain,\\n        address _nativeToken,\\n        uint256 _amount,\\n        bytes memory _receiver,\\n        uint256 _deadline,\\n        uint8 _v,\\n        bytes32 _r,\\n        bytes32 _s\\n    ) external override {\\n        IERC2612Permit(_nativeToken).permit(msg.sender, address(this), _amount, _deadline, _v, _r, _s);\\n        lock(_targetChain, _nativeToken, _amount, _receiver);\\n    }\\n\\n    /**\\n     *  @notice Transfers `amount` native tokens to the `receiver` address.\\n                Must be authorised by a majority of `signatures` from the `members` set.\\n     *  @param _sourceChain The chainId of the chain that we're bridging from\\n     *  @param _transactionId The transaction ID + log index in the source chain\\n     *  @param _nativeToken The address of the native token\\n     *  @param _amount The amount to transfer\\n     *  @param _receiver The address reveiving the tokens\\n     *  @param _signatures The array of signatures from the members, authorising the operation\\n     */\\n    function unlock(\\n        uint8 _sourceChain,\\n        bytes memory _transactionId,\\n        address _nativeToken,\\n        uint256 _amount,\\n        address _receiver,\\n        bytes[] calldata _signatures\\n    )\\n        external override\\n        onlyValidSignatures(_signatures.length)\\n    {\\n        LibRouter.Storage storage rs = LibRouter.routerStorage();\\n        bytes32 ethHash =\\n            computeUnlockMessage(_sourceChain, rs.chainId, _transactionId, abi.encodePacked(_nativeToken), _receiver, _amount);\\n\\n        require(!rs.hashesUsed[_sourceChain][ethHash], \\\"Router: transaction already submitted\\\");\\n\\n        validateAndStoreTx(_sourceChain, ethHash, _signatures);\\n\\n        IERC20(_nativeToken).safeTransfer(_receiver, _amount);\\n\\n        emit Unlock(_nativeToken, _amount, _receiver);\\n    }\\n\\n    /**\\n     *  @notice Calls burn on the given wrapped token contract with `amount` wrapped tokens from `msg.sender`.\\n                The router must be authorised to transfer the ABLT tokens for the fees.\\n     *  @param _wrappedToken The wrapped token to burn\\n     *  @param _amount The amount of wrapped tokens to be bridged\\n     *  @param _receiver The address of the user in the original chain for this wrapped token\\n     */\\n    function burn(address _wrappedToken, uint256 _amount, bytes memory _receiver) public override {\\n        LibRouter.Storage storage rs = LibRouter.routerStorage();\\n        LibFeeCalculator.Storage storage fcs = LibFeeCalculator.feeCalculatorStorage();\\n        LibFeeCalculator.distributeRewards();\\n        IERC20(rs.albtToken).safeTransferFrom(msg.sender, address(this), fcs.serviceFee);\\n        uint256 _chargedExternalFee = LibFeeExternal.chargeExternalFee();\\n        WrappedToken(_wrappedToken).burnFrom(msg.sender, _amount);\\n        emit Burn(_wrappedToken, _amount, _receiver);\\n        emit Fees(fcs.serviceFee, _chargedExternalFee);\\n    }\\n\\n    /**\\n     *  @notice Burns `amount` of `wrappedToken` using an EIP-2612 permit and initializes a bridging transaction to the original chain\\n     *  @param _wrappedToken The address of the wrapped token to burn\\n     *  @param _amount The amount of `wrappedToken` to burn\\n     *  @param _receiver The receiving address in the original chain for this wrapped token\\n     *  @param _deadline The deadline of the provided permit\\n     *  @param _v The recovery id of the permit's ECDSA signature\\n     *  @param _r The first output of the permit's ECDSA signature\\n     *  @param _s The second output of the permit's ECDSA signature\\n     */\\n    function burnWithPermit(\\n        address _wrappedToken,\\n        uint256 _amount,\\n        bytes memory _receiver,\\n        uint256 _deadline,\\n        uint8 _v,\\n        bytes32 _r,\\n        bytes32 _s\\n    ) external override {\\n        WrappedToken(_wrappedToken).permit(msg.sender, address(this), _amount, _deadline, _v, _r, _s);\\n        burn(_wrappedToken, _amount, _receiver);\\n    }\\n\\n    /**\\n     *  @notice Calls burn on the given wrapped token contract with `amount` wrapped tokens from `msg.sender`.\\n                The router must be authorised to transfer the ABLT tokens for the fees.\\n     *  @param _targetChain The target chain for the bridging operation\\n     *  @param _wrappedToken The wrapped token to burn\\n     *  @param _amount The amount of wrapped tokens to be bridged\\n     *  @param _receiver The address of the user in the original chain for this wrapped token\\n     */\\n    function burnAndTransfer(uint8 _targetChain, address _wrappedToken, uint256 _amount, bytes memory _receiver) public override {\\n        LibRouter.Storage storage rs = LibRouter.routerStorage();\\n        LibFeeCalculator.Storage storage fcs = LibFeeCalculator.feeCalculatorStorage();\\n        LibFeeCalculator.distributeRewards();\\n        IERC20(rs.albtToken).safeTransferFrom(msg.sender, address(this), fcs.serviceFee);\\n        uint256 _chargedExternalFee = LibFeeExternal.chargeExternalFee();\\n        WrappedToken(_wrappedToken).burnFrom(msg.sender, _amount);\\n        emit BurnAndTransfer(_targetChain, _wrappedToken, _amount, _receiver);\\n        emit Fees(fcs.serviceFee, _chargedExternalFee);\\n    }\\n\\n    /**\\n     *  @notice Burns `amount` of `wrappedToken` using an EIP-2612 permit and initializes a bridging transaction to the original chain\\n     *  @param _targetChain The target chain for the bridging operation\\n     *  @param _wrappedToken The address of the wrapped token to burn\\n     *  @param _amount The amount of `wrappedToken` to burn\\n     *  @param _receiver The receiving address in the original chain for this wrapped token\\n     *  @param _deadline The deadline of the provided permit\\n     *  @param _v The recovery id of the permit's ECDSA signature\\n     *  @param _r The first output of the permit's ECDSA signature\\n     *  @param _s The second output of the permit's ECDSA signature\\n     */\\n    function burnAndTransferWithPermit(\\n        uint8 _targetChain,\\n        address _wrappedToken,\\n        uint256 _amount,\\n        bytes memory _receiver,\\n        uint256 _deadline,\\n        uint8 _v,\\n        bytes32 _r,\\n        bytes32 _s\\n    ) external override {\\n        WrappedToken(_wrappedToken).permit(msg.sender, address(this), _amount, _deadline, _v, _r, _s);\\n        burnAndTransfer(_targetChain, _wrappedToken, _amount, _receiver);\\n    }\\n\\n    /**\\n     *  @notice Mints `amount` wrapped tokens to the `receiver` address.\\n                Must be authorised by a majority of `signatures` from the `members` set.\\n     *  @param _nativeChain ID of the token's native chain\\n     *  @param _nativeToken The address of the token in the native chain\\n     *  @param _transactionId The source transaction ID + log index\\n     *  @param _amount The desired minting amount\\n     *  @param _receiver The address receiving the tokens\\n     *  @param _signatures The array of signatures from the members, authorising the operation\\n     */\\n    function mint(\\n        uint8 _nativeChain,\\n        bytes memory _nativeToken,\\n        bytes memory _transactionId,\\n        uint256 _amount,\\n        address _receiver,\\n        bytes[] calldata _signatures,\\n        WrappedTokenParams memory _tokenParams\\n    )\\n        external override\\n        onlyValidSignatures(_signatures.length)\\n    {\\n        LibRouter.Storage storage rs = LibRouter.routerStorage();\\n        bytes32 ethHash =\\n            computeMintMessage(_nativeChain, rs.chainId, _transactionId, _nativeToken, _receiver, _amount, _tokenParams);\\n\\n        require(!rs.hashesUsed[_nativeChain][ethHash], \\\"Router: transaction already submitted\\\");\\n\\n        validateAndStoreTx(_nativeChain, ethHash, _signatures);\\n\\n        if(rs.nativeToWrappedToken[_nativeChain][_nativeToken] == address(0)) {\\n            deployWrappedToken(_nativeChain, _nativeToken, _tokenParams);\\n        }\\n\\n        WrappedToken(rs.nativeToWrappedToken[_nativeChain][_nativeToken]).mint(_receiver, _amount);\\n\\n        emit Mint(rs.nativeToWrappedToken[_nativeChain][_nativeToken], _amount, _receiver);\\n    }\\n\\n    /**\\n     *  @notice Deploys a wrapped version of `nativeToken` to the current chain\\n     *  @param _sourceChain The chain where `nativeToken` is originally deployed to\\n     *  @param _nativeToken The address of the token\\n     *  @param _tokenParams The name/symbol/decimals to use for the wrapped version of `nativeToken`\\n     */\\n    function deployWrappedToken(\\n        uint8 _sourceChain,\\n        bytes memory _nativeToken,\\n        WrappedTokenParams memory _tokenParams\\n    )\\n        internal\\n    {\\n        require(bytes(_tokenParams.name).length > 0, \\\"Router: empty wrapped token name\\\");\\n        require(bytes(_tokenParams.symbol).length > 0, \\\"Router: empty wrapped token symbol\\\");\\n        require(_tokenParams.decimals > 0, \\\"Router: invalid wrapped token decimals\\\");\\n\\n        LibRouter.Storage storage rs = LibRouter.routerStorage();\\n        WrappedToken t = new WrappedToken(_tokenParams.name, _tokenParams.symbol, _tokenParams.decimals);\\n        rs.nativeToWrappedToken[_sourceChain][_nativeToken] = address(t);\\n        rs.wrappedToNativeToken[address(t)].chainId = _sourceChain;\\n        rs.wrappedToNativeToken[address(t)].token = _nativeToken;\\n\\n        emit WrappedTokenDeployed(_sourceChain, _nativeToken, address(t));\\n    }\\n\\n    /**\\n     *  @notice Computes the bytes32 ethereum signed message hash of the unlock signatures\\n     *  @param _sourceChain The chain where the bridge transaction was initiated from\\n     *  @param _targetChain The target chain of the bridge transaction.\\n                           Should always be the current chainId.\\n     *  @param _transactionId The transaction ID of the bridge transaction\\n     *  @param _nativeToken The token that is being bridged\\n     *  @param _receiver The receiving address in the current chain\\n     *  @param _amount The amount of `nativeToken` that is being bridged\\n     */\\n    function computeUnlockMessage(\\n        uint8 _sourceChain,\\n        uint8 _targetChain,\\n        bytes memory _transactionId,\\n        bytes memory _nativeToken,\\n        address _receiver,\\n        uint256 _amount\\n    ) internal pure returns (bytes32) {\\n        bytes32 hashedData =\\n            keccak256(\\n                abi.encode(_sourceChain, _targetChain, _transactionId, _receiver, _amount, _nativeToken)\\n            );\\n        return ECDSA.toEthSignedMessageHash(hashedData);\\n    }\\n\\n    /**\\n     *  @notice Computes the bytes32 ethereum signed message hash of the mint signatures\\n     *  @param _nativeChain The native chain of the token being minted\\n     *  @param _targetChain The target chain of the bridge transaction.\\n                           Should always be the current chainId.\\n     *  @param _transactionId The transaction ID of the bridge transaction\\n     *  @param _nativeToken The token that is being bridged\\n     *  @param _receiver The receiving address in the current chain\\n     *  @param _amount The amount of `nativeToken` that is being bridged\\n     *  @param _tokenParams Wrapped token name/symbol/decimals\\n     */\\n    function computeMintMessage(\\n        uint8 _nativeChain,\\n        uint8 _targetChain,\\n        bytes memory _transactionId,\\n        bytes memory _nativeToken,\\n        address _receiver,\\n        uint256 _amount,\\n        WrappedTokenParams memory _tokenParams\\n    ) internal pure returns (bytes32) {\\n        bytes32 hashedData =\\n            keccak256(\\n                abi.encode(\\n                    _nativeChain,\\n                    _targetChain,\\n                    _transactionId,\\n                    _receiver,\\n                    _amount,\\n                    _nativeToken,\\n                    _tokenParams.name,\\n                    _tokenParams.symbol,\\n                    _tokenParams.decimals\\n                )\\n            );\\n        return ECDSA.toEthSignedMessageHash(hashedData);\\n    }\\n\\n    /**\\n     *  @notice Validates the signatures and the data and saves the transaction\\n     *  @param _chainId The source chain for this transaction\\n     *  @param _ethHash The hashed data\\n     *  @param _signatures The array of signatures from the members, authorising the operation\\n     */\\n    function validateAndStoreTx(\\n        uint8 _chainId,\\n        bytes32 _ethHash,\\n        bytes[] calldata _signatures\\n    ) internal {\\n        LibRouter.Storage storage rs = LibRouter.routerStorage();\\n        LibGovernance.validateSignatures(_ethHash, _signatures);\\n        rs.hashesUsed[_chainId][_ethHash] = true;\\n    }\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/token/ERC20/SafeERC20.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.7.0;\\n\\nimport \\\"./IERC20.sol\\\";\\nimport \\\"../../math/SafeMath.sol\\\";\\nimport \\\"../../utils/Address.sol\\\";\\n\\n/**\\n * @title SafeERC20\\n * @dev Wrappers around ERC20 operations that throw on failure (when the token\\n * contract returns false). Tokens that return no value (and instead revert or\\n * throw on failure) are also supported, non-reverting calls are assumed to be\\n * successful.\\n * To use this library you can add a `using SafeERC20 for IERC20;` statement to your contract,\\n * which allows you to call the safe operations as `token.safeTransfer(...)`, etc.\\n */\\nlibrary SafeERC20 {\\n    using SafeMath for uint256;\\n    using Address for address;\\n\\n    function safeTransfer(IERC20 token, address to, uint256 value) internal {\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.transfer.selector, to, value));\\n    }\\n\\n    function safeTransferFrom(IERC20 token, address from, address to, uint256 value) internal {\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.transferFrom.selector, from, to, value));\\n    }\\n\\n    /**\\n     * @dev Deprecated. This function has issues similar to the ones found in\\n     * {IERC20-approve}, and its usage is discouraged.\\n     *\\n     * Whenever possible, use {safeIncreaseAllowance} and\\n     * {safeDecreaseAllowance} instead.\\n     */\\n    function safeApprove(IERC20 token, address spender, uint256 value) internal {\\n        // safeApprove should only be called when setting an initial allowance,\\n        // or when resetting it to zero. To increase and decrease it, use\\n        // 'safeIncreaseAllowance' and 'safeDecreaseAllowance'\\n        // solhint-disable-next-line max-line-length\\n        require((value == 0) || (token.allowance(address(this), spender) == 0),\\n            \\\"SafeERC20: approve from non-zero to non-zero allowance\\\"\\n        );\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, value));\\n    }\\n\\n    function safeIncreaseAllowance(IERC20 token, address spender, uint256 value) internal {\\n        uint256 newAllowance = token.allowance(address(this), spender).add(value);\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));\\n    }\\n\\n    function safeDecreaseAllowance(IERC20 token, address spender, uint256 value) internal {\\n        uint256 newAllowance = token.allowance(address(this), spender).sub(value, \\\"SafeERC20: decreased allowance below zero\\\");\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));\\n    }\\n\\n    /**\\n     * @dev Imitates a Solidity high-level call (i.e. a regular function call to a contract), relaxing the requirement\\n     * on the return value: the return value is optional (but if data is returned, it must not be false).\\n     * @param token The token targeted by the call.\\n     * @param data The call data (encoded using abi.encode or one of its variants).\\n     */\\n    function _callOptionalReturn(IERC20 token, bytes memory data) private {\\n        // We need to perform a low level call here, to bypass Solidity's return data size checking mechanism, since\\n        // we're implementing it ourselves. We use {Address.functionCall} to perform this call, which verifies that\\n        // the target address contains contract code and also asserts for success in the low-level call.\\n\\n        bytes memory returndata = address(token).functionCall(data, \\\"SafeERC20: low-level call failed\\\");\\n        if (returndata.length > 0) { // Return data is optional\\n            // solhint-disable-next-line max-line-length\\n            require(abi.decode(returndata, (bool)), \\\"SafeERC20: ERC20 operation did not succeed\\\");\\n        }\\n    }\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/utils/Counters.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.7.0;\\n\\nimport \\\"../math/SafeMath.sol\\\";\\n\\n/**\\n * @title Counters\\n * @author Matt Condon (@shrugs)\\n * @dev Provides counters that can only be incremented or decremented by one. This can be used e.g. to track the number\\n * of elements in a mapping, issuing ERC721 ids, or counting request ids.\\n *\\n * Include with `using Counters for Counters.Counter;`\\n * Since it is not possible to overflow a 256 bit integer with increments of one, `increment` can skip the {SafeMath}\\n * overflow check, thereby saving gas. This does assume however correct usage, in that the underlying `_value` is never\\n * directly accessed.\\n */\\nlibrary Counters {\\n    using SafeMath for uint256;\\n\\n    struct Counter {\\n        // This variable should never be directly accessed by users of the library: interactions must be restricted to\\n        // the library's function. As of Solidity v0.5.2, this cannot be enforced, though there is a proposal to add\\n        // this feature: see https://github.com/ethereum/solidity/issues/4637\\n        uint256 _value; // default: 0\\n    }\\n\\n    function current(Counter storage counter) internal view returns (uint256) {\\n        return counter._value;\\n    }\\n\\n    function increment(Counter storage counter) internal {\\n        // The {SafeMath} overflow check can be skipped here, see the comment at the top\\n        counter._value += 1;\\n    }\\n\\n    function decrement(Counter storage counter) internal {\\n        counter._value = counter._value.sub(1);\\n    }\\n}\\n\"\r\n    },\r\n    \"contracts/WrappedToken.sol\": {\r\n      \"content\": \"//SPDX-License-Identifier: Unlicense\\npragma solidity 0.7.6;\\n\\nimport \\\"@openzeppelin/contracts/access/Ownable.sol\\\";\\nimport \\\"@openzeppelin/contracts/utils/Pausable.sol\\\";\\nimport \\\"./ERC20Permit.sol\\\";\\n\\ncontract WrappedToken is ERC20Permit, Pausable, Ownable {\\n    using SafeMath for uint256;\\n    /**\\n     *  @notice Construct a new WrappedToken contract\\n     *  @param _tokenName The EIP-20 token name\\n     *  @param _tokenSymbol The EIP-20 token symbol\\n     */\\n    constructor(\\n        string memory _tokenName,\\n        string memory _tokenSymbol,\\n        uint8 decimals\\n    ) ERC20(_tokenName, _tokenSymbol) {\\n        super._setupDecimals(decimals);\\n    }\\n\\n    /**\\n     * @notice Mints `_amount` of tokens to the `_account` address\\n     * @param _account The address to which the tokens will be minted\\n     * @param _amount The _amount to be minted\\n     */\\n    function mint(address _account, uint256 _amount) public onlyOwner {\\n        super._mint(_account, _amount);\\n    }\\n\\n    /**\\n     * @notice Burns `_amount` of tokens from the `_account` address\\n     * @param _account The address from which the tokens will be burned\\n     * @param _amount The _amount to be burned\\n     */\\n    function burnFrom(address _account, uint256 _amount)\\n        public\\n        onlyOwner\\n    {\\n        uint256 decreasedAllowance =\\n            allowance(_account, _msgSender()).sub(\\n                _amount,\\n                \\\"ERC20: burn amount exceeds allowance\\\"\\n            );\\n\\n        _approve(_account, _msgSender(), decreasedAllowance);\\n        _burn(_account, _amount);\\n    }\\n\\n    /// @notice Pauses the contract\\n    function pause() public onlyOwner {\\n        super._pause();\\n    }\\n\\n    /// @notice Unpauses the contract\\n    function unpause() public onlyOwner {\\n        super._unpause();\\n    }\\n\\n    function _beforeTokenTransfer(address from, address to, uint256 _amount) internal virtual override {\\n        super._beforeTokenTransfer(from, to, _amount);\\n\\n        require(!paused(), \\\"WrappedToken: token transfer while paused\\\");\\n    }\\n}\\n\"\r\n    },\r\n    \"contracts/interfaces/IERC2612Permit.sol\": {\r\n      \"content\": \"//SPDX-License-Identifier: Unlicense\\npragma solidity 0.7.6;\\n\\n/**\\n * @dev Interface of the ERC2612 standard as defined in the EIP.\\n *\\n * Adds the {permit} method, which can be used to change one's\\n * {IERC20-allowance} without having to send a transaction, by signing a\\n * message. This allows users to spend tokens without having to hold Ether.\\n *\\n * See https://eips.ethereum.org/EIPS/eip-2612.\\n */\\ninterface IERC2612Permit {\\n    /**\\n     * @dev Sets `_amount` as the allowance of `_spender` over `_owner`'s tokens,\\n     * given `_owner`'s signed approval.\\n     *\\n     * IMPORTANT: The same issues {IERC20-approve} has related to transaction\\n     * ordering also apply here.\\n     *\\n     * Emits an {Approval} event.\\n     *\\n     * Requirements:\\n     *\\n     * - `_owner` cannot be the zero address.\\n     * - `_spender` cannot be the zero address.\\n     * - `_deadline` must be a timestamp in the future.\\n     * - `_v`, `_r` and `_s` must be a valid `secp256k1` signature from `_owner`\\n     * over the EIP712-formatted function arguments.\\n     * - the signature must use ``_owner``'s current nonce (see {nonces}).\\n     *\\n     * For more information on the signature format, see the\\n     * https://eips.ethereum.org/EIPS/eip-2612#specification[relevant EIP\\n     * section].\\n     */\\n    function permit(\\n        address _owner,\\n        address _spender,\\n        uint256 _amount,\\n        uint256 _deadline,\\n        uint8 _v,\\n        bytes32 _r,\\n        bytes32 _s\\n    ) external;\\n\\n    /**\\n     * @dev Returns the current ERC2612 nonce for `_owner`. This value must be\\n     * included whenever a signature is generated for {permit}.\\n     *\\n     * Every successful call to {permit} increases ``_owner``'s nonce by one. This\\n     * prevents a signature from being used multiple times.\\n     */\\n    function nonces(address _owner) external view returns (uint256);\\n}\\n\"\r\n    },\r\n    \"contracts/interfaces/IRouter.sol\": {\r\n      \"content\": \"//SPDX-License-Identifier: Unlicense\\npragma solidity 0.7.6;\\npragma experimental ABIEncoderV2;\\n\\nimport \\\"../libraries/LibRouter.sol\\\";\\n\\nstruct WrappedTokenParams {\\n    string name;\\n    string symbol;\\n    uint8 decimals;\\n}\\n\\ninterface IRouter {\\n    /// @notice An event emitted once a Lock transaction is executed\\n    event Lock(uint8 targetChain, address token, bytes receiver, uint256 amount, uint256 serviceFee);\\n    /// @notice An event emitted once a Burn transaction is executed\\n    event Burn(address token, uint256 amount, bytes receiver);\\n    /// @notice An event emitted once a BurnAndTransfer transaction is executed\\n    event BurnAndTransfer(uint8 targetChain, address token, uint256 amount, bytes receiver);\\n    /// @notice An event emitted once an Unlock transaction is executed\\n    event Unlock(address token, uint256 amount, address receiver);\\n    /// @notice An even emitted once a Mint transaction is executed\\n    event Mint(address token, uint256 amount, address receiver);\\n    /// @notice An event emitted once a new wrapped token is deployed by the contract\\n    event WrappedTokenDeployed(uint8 sourceChain, bytes nativeToken, address wrappedToken);\\n    /// @notice An event emitted when collecting fees\\n    event Fees(uint256 serviceFee, uint256 externalFee);\\n\\n    function initRouter(uint8 _chainId, address _albtToken) external;\\n    function nativeToWrappedToken(uint8 _chainId, bytes memory _nativeToken) external view returns (address);\\n    function wrappedToNativeToken(address _wrappedToken) external view returns (LibRouter.NativeTokenWithChainId memory);\\n    function hashesUsed(uint8 _chainId, bytes32 _ethHash) external view returns (bool);\\n    function albtToken() external view returns (address);\\n    function lock(uint8 _targetChain, address _nativeToken, uint256 _amount, bytes memory _receiver) external;\\n\\n    function lockWithPermit(\\n        uint8 _targetChain,\\n        address _nativeToken,\\n        uint256 _amount,\\n        bytes memory _receiver,\\n        uint256 _deadline,\\n        uint8 _v,\\n        bytes32 _r,\\n        bytes32 _s\\n    ) external;\\n\\n    function unlock(\\n        uint8 _sourceChain,\\n        bytes memory _transactionId,\\n        address _nativeToken,\\n        uint256 _amount,\\n        address _receiver,\\n        bytes[] calldata _signatures\\n    ) external;\\n\\n    function burn(address _wrappedToken, uint256 _amount, bytes memory _receiver) external;\\n\\n    function burnWithPermit(\\n        address _wrappedToken,\\n        uint256 _amount,\\n        bytes memory _receiver,\\n        uint256 _deadline,\\n        uint8 _v,\\n        bytes32 _r,\\n        bytes32 _s\\n    ) external;\\n\\n    function burnAndTransfer(uint8 _targetChain, address _wrappedToken, uint256 _amount, bytes memory _receiver) external;\\n\\n    function burnAndTransferWithPermit(\\n        uint8 _targetChain,\\n        address _wrappedToken,\\n        uint256 _amount,\\n        bytes memory _receiver,\\n        uint256 _deadline,\\n        uint8 _v,\\n        bytes32 _r,\\n        bytes32 _s\\n    ) external;\\n\\n    function mint(\\n        uint8 _nativeChain,\\n        bytes memory _nativeToken,\\n        bytes memory _transactionId,\\n        uint256 _amount,\\n        address _receiver,\\n        bytes[] calldata _signatures,\\n        WrappedTokenParams memory _tokenParams\\n    ) external;\\n}\\n\"\r\n    },\r\n    \"contracts/libraries/LibFeeCalculator.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: Unlicense\\npragma solidity 0.7.6;\\n\\nimport \\\"@openzeppelin/contracts/math/SafeMath.sol\\\";\\nimport \\\"./LibGovernance.sol\\\";\\n\\nlibrary LibFeeCalculator {\\n    using SafeMath for uint256;\\n    bytes32 constant STORAGE_POSITION = keccak256(\\\"fee.calculator.storage\\\");\\n\\n    struct Storage {\\n        bool initialized;\\n\\n        // The current service fee\\n        uint256 serviceFee;\\n\\n        // Total fees accrued since contract deployment\\n        uint256 feesAccrued;\\n\\n        // Total fees accrued up to the last point a member claimed rewards\\n        uint256 previousAccrued;\\n\\n        // Accumulates rewards on a per-member basis\\n        uint256 accumulator;\\n\\n        // Total rewards claimed per member\\n        mapping(address => uint256) claimedRewardsPerAccount; \\n    }\\n\\n    function feeCalculatorStorage() internal pure returns (Storage storage ds) {\\n        bytes32 position = STORAGE_POSITION;\\n        assembly {\\n            ds.slot := position\\n        }\\n    }\\n\\n    /**\\n     * @notice addNewMember Sets the initial claimed rewards for new members\\n     * @param _account The address of the new member\\n     */\\n    function addNewMember(address _account) internal {\\n        LibFeeCalculator.Storage storage fcs = feeCalculatorStorage();\\n        uint256 amount = fcs.feesAccrued.sub(fcs.previousAccrued).div(LibGovernance.membersCount());\\n\\n        fcs.previousAccrued = fcs.feesAccrued;\\n        fcs.accumulator = fcs.accumulator.add(amount);\\n        fcs.claimedRewardsPerAccount[_account] = fcs.accumulator;\\n    }\\n\\n    /**\\n     * @notice claimReward Make calculations based on fee distribution and returns the claimable amount\\n     * @param _claimer The address of the claimer\\n     */\\n    function claimReward(address _claimer)\\n        internal\\n        returns (uint256)\\n    {\\n        LibFeeCalculator.Storage storage fcs = feeCalculatorStorage();\\n        uint256 amount = fcs.feesAccrued.sub(fcs.previousAccrued).div(LibGovernance.membersCount());\\n\\n        fcs.previousAccrued = fcs.feesAccrued;\\n        fcs.accumulator = fcs.accumulator.add(amount);\\n\\n        uint256 claimableAmount = fcs.accumulator.sub(fcs.claimedRewardsPerAccount[_claimer]);\\n\\n        fcs.claimedRewardsPerAccount[_claimer] = fcs.accumulator;\\n\\n        return claimableAmount;\\n    }\\n\\n    /**\\n     * @notice Distributes rewards among members\\n     */\\n    function distributeRewards() internal {\\n        LibFeeCalculator.Storage storage fcs = feeCalculatorStorage();\\n        fcs.feesAccrued = fcs.feesAccrued.add(fcs.serviceFee);\\n    }\\n}\"\r\n    },\r\n    \"contracts/libraries/LibFeeExternal.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: Unlicense\\npragma solidity 0.7.6;\\n\\nimport \\\"@openzeppelin/contracts/math/SafeMath.sol\\\";\\nimport \\\"@openzeppelin/contracts/token/ERC20/SafeERC20.sol\\\";\\nimport \\\"./LibGovernance.sol\\\";\\nimport \\\"./LibRouter.sol\\\";\\n\\nlibrary LibFeeExternal {\\n    using SafeMath for uint256;\\n    using SafeERC20 for IERC20;\\n\\n    bytes32 constant STORAGE_POSITION = keccak256(\\\"fee.external.storage\\\");\\n\\n    struct Storage {\\n        bool initialized;\\n\\n        // The current external fee\\n        uint256 externalFee;\\n\\n        // Where to send the external fees\\n        address externalFeeAddress;\\n    }\\n\\n    function chargeExternalFee() internal returns (uint256) {\\n        LibFeeExternal.Storage storage fes = LibFeeExternal.feeExternalStorage();\\n        LibRouter.Storage storage rs = LibRouter.routerStorage();\\n        if (fes.externalFee != 0) {\\n            require(fes.externalFeeAddress != address(0), \\\"External fee set, but no receiver address\\\");\\n            IERC20(rs.albtToken).safeTransferFrom(msg.sender, fes.externalFeeAddress, fes.externalFee);\\n        }\\n\\n        return fes.externalFee;\\n    }\\n\\n    function feeExternalStorage() internal pure returns (Storage storage ds) {\\n        bytes32 position = STORAGE_POSITION;\\n        assembly {\\n            ds.slot := position\\n        }\\n    }\\n\\n}\\n\"\r\n    },\r\n    \"contracts/libraries/LibRouter.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: Unlicense\\npragma solidity 0.7.6;\\n\\nlibrary LibRouter {\\n    bytes32 constant STORAGE_POSITION = keccak256(\\\"router.storage\\\");\\n\\n    /// @notice Struct containing information about a token's address and its native chain\\n    struct NativeTokenWithChainId {\\n        uint8 chainId;\\n        bytes token;\\n    }\\n\\n    struct Storage {\\n        bool initialized;\\n\\n        // Maps chainID => (nativeToken => wrappedToken)\\n        mapping(uint8 => mapping(bytes => address)) nativeToWrappedToken;\\n\\n        // Maps wrapped tokens in the current chain to their native chain + token address\\n        mapping(address => NativeTokenWithChainId) wrappedToNativeToken;\\n\\n        // Storage metadata for transfers. Maps sourceChain => (transactionId => metadata)\\n        mapping(uint8 => mapping(bytes32 => bool)) hashesUsed;\\n\\n        // Address of the ALBT token in the current chain\\n        address albtToken;\\n\\n        // The chainId of the current chain\\n        uint8 chainId;\\n    }\\n\\n    function routerStorage() internal pure returns (Storage storage ds) {\\n        bytes32 position = STORAGE_POSITION;\\n        assembly {\\n            ds.slot := position\\n        }\\n    }\\n}\"\r\n    },\r\n    \"contracts/libraries/LibGovernance.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: Unlicense\\npragma solidity 0.7.6;\\npragma experimental ABIEncoderV2;\\n\\nimport \\\"@openzeppelin/contracts/utils/EnumerableSet.sol\\\";\\nimport \\\"@openzeppelin/contracts/utils/Counters.sol\\\";\\nimport \\\"@openzeppelin/contracts/cryptography/ECDSA.sol\\\";\\n\\nlibrary LibGovernance {\\n    using EnumerableSet for EnumerableSet.AddressSet;\\n    using Counters for Counters.Counter;\\n    bytes32 constant STORAGE_POSITION = keccak256(\\\"governance.storage\\\");\\n\\n    struct Storage {\\n        bool initialized;\\n        // nonce used for making administrative changes\\n        Counters.Counter administrativeNonce;\\n        // the set of active validators\\n        EnumerableSet.AddressSet membersSet;\\n    }\\n\\n    function governanceStorage() internal pure returns (Storage storage gs) {\\n        bytes32 position = STORAGE_POSITION;\\n        assembly {\\n            gs.slot := position\\n        }\\n    }\\n\\n\\n    /// @notice Adds/removes a validator from the member set\\n    function updateMember(address _account, bool _status) internal {\\n        Storage storage gs = governanceStorage();\\n        if (_status) {\\n            require(\\n                gs.membersSet.add(_account),\\n                \\\"Governance: Account already added\\\"\\n            );\\n        } else if (!_status) {\\n            require(\\n                gs.membersSet.length() > 1,\\n                \\\"Governance: Would become memberless\\\"\\n            );\\n            require(\\n                gs.membersSet.remove(_account),\\n                \\\"Governance: Account is not a member\\\"\\n            );\\n        }\\n        gs.administrativeNonce.increment();\\n    }\\n\\n    /// @notice Computes the bytes32 ethereum signed message hash of the member update message\\n    function computeMemberUpdateMessage(address _account, bool _status) internal view returns (bytes32) {\\n        Storage storage gs = governanceStorage();\\n        bytes32 hashedData =\\n            keccak256(\\n                abi.encode(_account, _status, gs.administrativeNonce.current())\\n            );\\n        return ECDSA.toEthSignedMessageHash(hashedData);\\n    }\\n\\n    /// @notice Returns true/false depending on whether a given address is member or not\\n    function isMember(address _member) internal view returns (bool) {\\n        Storage storage gs = governanceStorage();\\n        return gs.membersSet.contains(_member);\\n    }\\n\\n    /// @notice Returns the count of the members\\n    function membersCount() internal view returns (uint256) {\\n        Storage storage gs = governanceStorage();\\n        return gs.membersSet.length();\\n    }\\n\\n    /// @notice Returns the address of a member at a given index\\n    function memberAt(uint256 _index) internal view returns (address) {\\n        Storage storage gs = governanceStorage();\\n        return gs.membersSet.at(_index);\\n    }\\n\\n    /// @notice Validates the provided signatures aginst the member set\\n    function validateSignatures(bytes32 _ethHash, bytes[] calldata _signatures) internal view {\\n        address[] memory signers = new address[](_signatures.length);\\n        for (uint256 i = 0; i < _signatures.length; i++) {\\n            address signer = ECDSA.recover(_ethHash, _signatures[i]);\\n            require(isMember(signer), \\\"Governance: invalid signer\\\");\\n            for (uint256 j = 0; j < i; j++) {\\n                require(signer != signers[j], \\\"Governance: duplicate signatures\\\");\\n            }\\n            signers[i] = signer;\\n        }\\n    }\\n}\"\r\n    },\r\n    \"@openzeppelin/contracts/token/ERC20/IERC20.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.7.0;\\n\\n/**\\n * @dev Interface of the ERC20 standard as defined in the EIP.\\n */\\ninterface IERC20 {\\n    /**\\n     * @dev Returns the amount of tokens in existence.\\n     */\\n    function totalSupply() external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the amount of tokens owned by `account`.\\n     */\\n    function balanceOf(address account) external view returns (uint256);\\n\\n    /**\\n     * @dev Moves `amount` tokens from the caller's account to `recipient`.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transfer(address recipient, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Returns the remaining number of tokens that `spender` will be\\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\\n     * zero by default.\\n     *\\n     * This value changes when {approve} or {transferFrom} are called.\\n     */\\n    function allowance(address owner, address spender) external view returns (uint256);\\n\\n    /**\\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\\n     * that someone may use both the old and the new allowance by unfortunate\\n     * transaction ordering. One possible solution to mitigate this race\\n     * condition is to first reduce the spender's allowance to 0 and set the\\n     * desired value afterwards:\\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address spender, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Moves `amount` tokens from `sender` to `recipient` using the\\n     * allowance mechanism. `amount` is then deducted from the caller's\\n     * allowance.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(address sender, address recipient, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\\n     * another (`to`).\\n     *\\n     * Note that `value` may be zero.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 value);\\n\\n    /**\\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\\n     * a call to {approve}. `value` is the new allowance.\\n     */\\n    event Approval(address indexed owner, address indexed spender, uint256 value);\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/math/SafeMath.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.7.0;\\n\\n/**\\n * @dev Wrappers over Solidity's arithmetic operations with added overflow\\n * checks.\\n *\\n * Arithmetic operations in Solidity wrap on overflow. This can easily result\\n * in bugs, because programmers usually assume that an overflow raises an\\n * error, which is the standard behavior in high level programming languages.\\n * `SafeMath` restores this intuition by reverting the transaction when an\\n * operation overflows.\\n *\\n * Using this library instead of the unchecked operations eliminates an entire\\n * class of bugs, so it's recommended to use it always.\\n */\\nlibrary SafeMath {\\n    /**\\n     * @dev Returns the addition of two unsigned integers, with an overflow flag.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function tryAdd(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        uint256 c = a + b;\\n        if (c < a) return (false, 0);\\n        return (true, c);\\n    }\\n\\n    /**\\n     * @dev Returns the substraction of two unsigned integers, with an overflow flag.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function trySub(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        if (b > a) return (false, 0);\\n        return (true, a - b);\\n    }\\n\\n    /**\\n     * @dev Returns the multiplication of two unsigned integers, with an overflow flag.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function tryMul(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        // Gas optimization: this is cheaper than requiring 'a' not being zero, but the\\n        // benefit is lost if 'b' is also tested.\\n        // See: https://github.com/OpenZeppelin/openzeppelin-contracts/pull/522\\n        if (a == 0) return (true, 0);\\n        uint256 c = a * b;\\n        if (c / a != b) return (false, 0);\\n        return (true, c);\\n    }\\n\\n    /**\\n     * @dev Returns the division of two unsigned integers, with a division by zero flag.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function tryDiv(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        if (b == 0) return (false, 0);\\n        return (true, a / b);\\n    }\\n\\n    /**\\n     * @dev Returns the remainder of dividing two unsigned integers, with a division by zero flag.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function tryMod(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        if (b == 0) return (false, 0);\\n        return (true, a % b);\\n    }\\n\\n    /**\\n     * @dev Returns the addition of two unsigned integers, reverting on\\n     * overflow.\\n     *\\n     * Counterpart to Solidity's `+` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Addition cannot overflow.\\n     */\\n    function add(uint256 a, uint256 b) internal pure returns (uint256) {\\n        uint256 c = a + b;\\n        require(c >= a, \\\"SafeMath: addition overflow\\\");\\n        return c;\\n    }\\n\\n    /**\\n     * @dev Returns the subtraction of two unsigned integers, reverting on\\n     * overflow (when the result is negative).\\n     *\\n     * Counterpart to Solidity's `-` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Subtraction cannot overflow.\\n     */\\n    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\\n        require(b <= a, \\\"SafeMath: subtraction overflow\\\");\\n        return a - b;\\n    }\\n\\n    /**\\n     * @dev Returns the multiplication of two unsigned integers, reverting on\\n     * overflow.\\n     *\\n     * Counterpart to Solidity's `*` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Multiplication cannot overflow.\\n     */\\n    function mul(uint256 a, uint256 b) internal pure returns (uint256) {\\n        if (a == 0) return 0;\\n        uint256 c = a * b;\\n        require(c / a == b, \\\"SafeMath: multiplication overflow\\\");\\n        return c;\\n    }\\n\\n    /**\\n     * @dev Returns the integer division of two unsigned integers, reverting on\\n     * division by zero. The result is rounded towards zero.\\n     *\\n     * Counterpart to Solidity's `/` operator. Note: this function uses a\\n     * `revert` opcode (which leaves remaining gas untouched) while Solidity\\n     * uses an invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Requirements:\\n     *\\n     * - The divisor cannot be zero.\\n     */\\n    function div(uint256 a, uint256 b) internal pure returns (uint256) {\\n        require(b > 0, \\\"SafeMath: division by zero\\\");\\n        return a / b;\\n    }\\n\\n    /**\\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\\n     * reverting when dividing by zero.\\n     *\\n     * Counterpart to Solidity's `%` operator. This function uses a `revert`\\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\\n     * invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Requirements:\\n     *\\n     * - The divisor cannot be zero.\\n     */\\n    function mod(uint256 a, uint256 b) internal pure returns (uint256) {\\n        require(b > 0, \\\"SafeMath: modulo by zero\\\");\\n        return a % b;\\n    }\\n\\n    /**\\n     * @dev Returns the subtraction of two unsigned integers, reverting with custom message on\\n     * overflow (when the result is negative).\\n     *\\n     * CAUTION: This function is deprecated because it requires allocating memory for the error\\n     * message unnecessarily. For custom revert reasons use {trySub}.\\n     *\\n     * Counterpart to Solidity's `-` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Subtraction cannot overflow.\\n     */\\n    function sub(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\\n        require(b <= a, errorMessage);\\n        return a - b;\\n    }\\n\\n    /**\\n     * @dev Returns the integer division of two unsigned integers, reverting with custom message on\\n     * division by zero. The result is rounded towards zero.\\n     *\\n     * CAUTION: This function is deprecated because it requires allocating memory for the error\\n     * message unnecessarily. For custom revert reasons use {tryDiv}.\\n     *\\n     * Counterpart to Solidity's `/` operator. Note: this function uses a\\n     * `revert` opcode (which leaves remaining gas untouched) while Solidity\\n     * uses an invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Requirements:\\n     *\\n     * - The divisor cannot be zero.\\n     */\\n    function div(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\\n        require(b > 0, errorMessage);\\n        return a / b;\\n    }\\n\\n    /**\\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\\n     * reverting with custom message when dividing by zero.\\n     *\\n     * CAUTION: This function is deprecated because it requires allocating memory for the error\\n     * message unnecessarily. For custom revert reasons use {tryMod}.\\n     *\\n     * Counterpart to Solidity's `%` operator. This function uses a `revert`\\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\\n     * invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Requirements:\\n     *\\n     * - The divisor cannot be zero.\\n     */\\n    function mod(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\\n        require(b > 0, errorMessage);\\n        return a % b;\\n    }\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/utils/Address.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.7.0;\\n\\n/**\\n * @dev Collection of functions related to the address type\\n */\\nlibrary Address {\\n    /**\\n     * @dev Returns true if `account` is a contract.\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * It is unsafe to assume that an address for which this function returns\\n     * false is an externally-owned account (EOA) and not a contract.\\n     *\\n     * Among others, `isContract` will return false for the following\\n     * types of addresses:\\n     *\\n     *  - an externally-owned account\\n     *  - a contract in construction\\n     *  - an address where a contract will be created\\n     *  - an address where a contract lived, but was destroyed\\n     * ====\\n     */\\n    function isContract(address account) internal view returns (bool) {\\n        // This method relies on extcodesize, which returns 0 for contracts in\\n        // construction, since the code is only stored at the end of the\\n        // constructor execution.\\n\\n        uint256 size;\\n        // solhint-disable-next-line no-inline-assembly\\n        assembly { size := extcodesize(account) }\\n        return size > 0;\\n    }\\n\\n    /**\\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\\n     * `recipient`, forwarding all available gas and reverting on errors.\\n     *\\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\\n     * imposed by `transfer`, making them unable to receive funds via\\n     * `transfer`. {sendValue} removes this limitation.\\n     *\\n     * https://diligence.consensys.net/posts/2019/09/stop-using-soliditys-transfer-now/[Learn more].\\n     *\\n     * IMPORTANT: because control is transferred to `recipient`, care must be\\n     * taken to not create reentrancy vulnerabilities. Consider using\\n     * {ReentrancyGuard} or the\\n     * https://solidity.readthedocs.io/en/v0.5.11/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\\n     */\\n    function sendValue(address payable recipient, uint256 amount) internal {\\n        require(address(this).balance >= amount, \\\"Address: insufficient balance\\\");\\n\\n        // solhint-disable-next-line avoid-low-level-calls, avoid-call-value\\n        (bool success, ) = recipient.call{ value: amount }(\\\"\\\");\\n        require(success, \\\"Address: unable to send value, recipient may have reverted\\\");\\n    }\\n\\n    /**\\n     * @dev Performs a Solidity function call using a low level `call`. A\\n     * plain`call` is an unsafe replacement for a function call: use this\\n     * function instead.\\n     *\\n     * If `target` reverts with a revert reason, it is bubbled up by this\\n     * function (like regular Solidity function calls).\\n     *\\n     * Returns the raw returned data. To convert to the expected return value,\\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\\n     *\\n     * Requirements:\\n     *\\n     * - `target` must be a contract.\\n     * - calling `target` with `data` must not revert.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\\n      return functionCall(target, data, \\\"Address: low-level call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\\n     * `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(address target, bytes memory data, string memory errorMessage) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, 0, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but also transferring `value` wei to `target`.\\n     *\\n     * Requirements:\\n     *\\n     * - the calling contract must have an ETH balance of at least `value`.\\n     * - the called Solidity function must be `payable`.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(address target, bytes memory data, uint256 value) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, value, \\\"Address: low-level call with value failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\\n     * with `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(address target, bytes memory data, uint256 value, string memory errorMessage) internal returns (bytes memory) {\\n        require(address(this).balance >= value, \\\"Address: insufficient balance for call\\\");\\n        require(isContract(target), \\\"Address: call to non-contract\\\");\\n\\n        // solhint-disable-next-line avoid-low-level-calls\\n        (bool success, bytes memory returndata) = target.call{ value: value }(data);\\n        return _verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\\n        return functionStaticCall(target, data, \\\"Address: low-level static call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(address target, bytes memory data, string memory errorMessage) internal view returns (bytes memory) {\\n        require(isContract(target), \\\"Address: static call to non-contract\\\");\\n\\n        // solhint-disable-next-line avoid-low-level-calls\\n        (bool success, bytes memory returndata) = target.staticcall(data);\\n        return _verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionDelegateCall(target, data, \\\"Address: low-level delegate call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(address target, bytes memory data, string memory errorMessage) internal returns (bytes memory) {\\n        require(isContract(target), \\\"Address: delegate call to non-contract\\\");\\n\\n        // solhint-disable-next-line avoid-low-level-calls\\n        (bool success, bytes memory returndata) = target.delegatecall(data);\\n        return _verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    function _verifyCallResult(bool success, bytes memory returndata, string memory errorMessage) private pure returns(bytes memory) {\\n        if (success) {\\n            return returndata;\\n        } else {\\n            // Look for revert reason and bubble it up if present\\n            if (returndata.length > 0) {\\n                // The easiest way to bubble the revert reason is using memory via assembly\\n\\n                // solhint-disable-next-line no-inline-assembly\\n                assembly {\\n                    let returndata_size := mload(returndata)\\n                    revert(add(32, returndata), returndata_size)\\n                }\\n            } else {\\n                revert(errorMessage);\\n            }\\n        }\\n    }\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/access/Ownable.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.7.0;\\n\\nimport \\\"../utils/Context.sol\\\";\\n/**\\n * @dev Contract module which provides a basic access control mechanism, where\\n * there is an account (an owner) that can be granted exclusive access to\\n * specific functions.\\n *\\n * By default, the owner account will be the one that deploys the contract. This\\n * can later be changed with {transferOwnership}.\\n *\\n * This module is used through inheritance. It will make available the modifier\\n * `onlyOwner`, which can be applied to your functions to restrict their use to\\n * the owner.\\n */\\nabstract contract Ownable is Context {\\n    address private _owner;\\n\\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\\n\\n    /**\\n     * @dev Initializes the contract setting the deployer as the initial owner.\\n     */\\n    constructor () {\\n        address msgSender = _msgSender();\\n        _owner = msgSender;\\n        emit OwnershipTransferred(address(0), msgSender);\\n    }\\n\\n    /**\\n     * @dev Returns the address of the current owner.\\n     */\\n    function owner() public view virtual returns (address) {\\n        return _owner;\\n    }\\n\\n    /**\\n     * @dev Throws if called by any account other than the owner.\\n     */\\n    modifier onlyOwner() {\\n        require(owner() == _msgSender(), \\\"Ownable: caller is not the owner\\\");\\n        _;\\n    }\\n\\n    /**\\n     * @dev Leaves the contract without owner. It will not be possible to call\\n     * `onlyOwner` functions anymore. Can only be called by the current owner.\\n     *\\n     * NOTE: Renouncing ownership will leave the contract without an owner,\\n     * thereby removing any functionality that is only available to the owner.\\n     */\\n    function renounceOwnership() public virtual onlyOwner {\\n        emit OwnershipTransferred(_owner, address(0));\\n        _owner = address(0);\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Can only be called by the current owner.\\n     */\\n    function transferOwnership(address newOwner) public virtual onlyOwner {\\n        require(newOwner != address(0), \\\"Ownable: new owner is the zero address\\\");\\n        emit OwnershipTransferred(_owner, newOwner);\\n        _owner = newOwner;\\n    }\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/utils/Pausable.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.7.0;\\n\\nimport \\\"./Context.sol\\\";\\n\\n/**\\n * @dev Contract module which allows children to implement an emergency stop\\n * mechanism that can be triggered by an authorized account.\\n *\\n * This module is used through inheritance. It will make available the\\n * modifiers `whenNotPaused` and `whenPaused`, which can be applied to\\n * the functions of your contract. Note that they will not be pausable by\\n * simply including this module, only once the modifiers are put in place.\\n */\\nabstract contract Pausable is Context {\\n    /**\\n     * @dev Emitted when the pause is triggered by `account`.\\n     */\\n    event Paused(address account);\\n\\n    /**\\n     * @dev Emitted when the pause is lifted by `account`.\\n     */\\n    event Unpaused(address account);\\n\\n    bool private _paused;\\n\\n    /**\\n     * @dev Initializes the contract in unpaused state.\\n     */\\n    constructor () {\\n        _paused = false;\\n    }\\n\\n    /**\\n     * @dev Returns true if the contract is paused, and false otherwise.\\n     */\\n    function paused() public view virtual returns (bool) {\\n        return _paused;\\n    }\\n\\n    /**\\n     * @dev Modifier to make a function callable only when the contract is not paused.\\n     *\\n     * Requirements:\\n     *\\n     * - The contract must not be paused.\\n     */\\n    modifier whenNotPaused() {\\n        require(!paused(), \\\"Pausable: paused\\\");\\n        _;\\n    }\\n\\n    /**\\n     * @dev Modifier to make a function callable only when the contract is paused.\\n     *\\n     * Requirements:\\n     *\\n     * - The contract must be paused.\\n     */\\n    modifier whenPaused() {\\n        require(paused(), \\\"Pausable: not paused\\\");\\n        _;\\n    }\\n\\n    /**\\n     * @dev Triggers stopped state.\\n     *\\n     * Requirements:\\n     *\\n     * - The contract must not be paused.\\n     */\\n    function _pause() internal virtual whenNotPaused {\\n        _paused = true;\\n        emit Paused(_msgSender());\\n    }\\n\\n    /**\\n     * @dev Returns to normal state.\\n     *\\n     * Requirements:\\n     *\\n     * - The contract must be paused.\\n     */\\n    function _unpause() internal virtual whenPaused {\\n        _paused = false;\\n        emit Unpaused(_msgSender());\\n    }\\n}\\n\"\r\n    },\r\n    \"contracts/ERC20Permit.sol\": {\r\n      \"content\": \"//SPDX-License-Identifier: Unlicense\\npragma solidity 0.7.6;\\n\\nimport \\\"@openzeppelin/contracts/token/ERC20/ERC20.sol\\\";\\nimport \\\"@openzeppelin/contracts/utils/Counters.sol\\\";\\n\\nimport {IERC2612Permit} from \\\"./interfaces/IERC2612Permit.sol\\\";\\n\\n/**\\n * @dev Extension of {ERC20} that allows token holders to use their tokens\\n * without sending any transactions by setting {IERC20-allowance} with a\\n * signature using the {permit} method, and then spend them via\\n * {IERC20-transferFrom}.\\n *\\n * The {permit} signature mechanism conforms to the {IERC2612Permit} interface.\\n */\\nabstract contract ERC20Permit is ERC20, IERC2612Permit {\\n    using Counters for Counters.Counter;\\n\\n    mapping(address => Counters.Counter) private _nonces;\\n\\n    // Mapping of ChainID to domain separators. This is a very gas efficient way\\n    // to not recalculate the domain separator on every call, while still\\n    // automatically detecting ChainID changes.\\n    mapping(uint256 => bytes32) public domainSeparators;\\n\\n    constructor() {\\n        _updateDomainSeparator();\\n    }\\n\\n    /**\\n     * @dev See {IERC2612Permit-permit}.\\n     *\\n     * If https://eips.ethereum.org/EIPS/eip-1344[ChainID] ever changes, the\\n     * EIP712 Domain Separator is automatically recalculated.\\n     */\\n    function permit(\\n        address _owner,\\n        address _spender,\\n        uint256 _amount,\\n        uint256 _deadline,\\n        uint8 _v,\\n        bytes32 _r,\\n        bytes32 _s\\n    ) public virtual override {\\n        require(block.timestamp <= _deadline, \\\"ERC20Permit: expired _deadline\\\");\\n\\n        // Assembly for more efficiently computing:\\n        // bytes32 hashStruct = keccak256(\\n        //     abi.encode(\\n        //         _PERMIT_TYPEHASH,\\n        //         _owner,\\n        //         _spender,\\n        //         _amount,\\n        //         nonces[_owner].current(),\\n        //         _deadline\\n        //     )\\n        // );\\n\\n        bytes32 hashStruct;\\n        Counters.Counter storage nonceCounter = _nonces[_owner];\\n        uint256 nonce = nonceCounter.current();\\n\\n        assembly {\\n            // Load free memory pointer\\n            let memPtr := mload(64)\\n\\n            // keccak256(\\\"Permit(address owner,address spender,uint256 value,uint256 nonce,uint256 deadline)\\\")\\n            mstore(memPtr, 0x6e71edae12b1b97f4d1f60370fef10105fa2faae0126114a169c64845d6126c9)\\n            mstore(add(memPtr, 32), _owner)\\n            mstore(add(memPtr, 64), _spender)\\n            mstore(add(memPtr, 96), _amount)\\n            mstore(add(memPtr, 128), nonce)\\n            mstore(add(memPtr, 160), _deadline)\\n\\n            hashStruct := keccak256(memPtr, 192)\\n        }\\n\\n        bytes32 eip712DomainHash = _domainSeparator();\\n\\n        // Assembly for more efficient computing:\\n        // bytes32 hash = keccak256(\\n        //     abi.encodePacked(uint16(0x1901), eip712DomainHash, hashStruct)\\n        // );\\n\\n        bytes32 hash;\\n\\n        assembly {\\n            // Load free memory pointer\\n            let memPtr := mload(64)\\n\\n            mstore(memPtr, 0x1901000000000000000000000000000000000000000000000000000000000000)  // EIP191 header\\n            mstore(add(memPtr, 2), eip712DomainHash)                                            // EIP712 domain hash\\n            mstore(add(memPtr, 34), hashStruct)                                                 // Hash of struct\\n\\n            hash := keccak256(memPtr, 66)\\n        }\\n\\n        address signer = _recover(hash, _v, _r, _s);\\n\\n        require(signer == _owner, \\\"ERC20Permit: invalid signature\\\");\\n\\n        nonceCounter.increment();\\n        _approve(_owner, _spender, _amount);\\n    }\\n\\n    /**\\n     * @dev See {IERC2612Permit-nonces}.\\n     */\\n    function nonces(address _owner) public override view returns (uint256) {\\n        return _nonces[_owner].current();\\n    }\\n\\n    function _updateDomainSeparator() private returns (bytes32) {\\n        uint256 chainID = _chainID();\\n\\n        // no need for assembly, running very rarely\\n        bytes32 newDomainSeparator = keccak256(\\n            abi.encode(\\n                keccak256(\\n                    \\\"EIP712Domain(string name,string version,uint256 chainId,address verifyingContract)\\\"\\n                ),\\n                keccak256(bytes(name())), // ERC-20 Name\\n                keccak256(bytes(\\\"1\\\")),    // Version\\n                chainID,\\n                address(this)\\n            )\\n        );\\n\\n        domainSeparators[chainID] = newDomainSeparator;\\n\\n        return newDomainSeparator;\\n    }\\n\\n    // Returns the domain separator, updating it if chainID changes\\n    function _domainSeparator() private returns (bytes32) {\\n        bytes32 domainSeparator = domainSeparators[_chainID()];\\n\\n        if (domainSeparator != 0x00) {\\n            return domainSeparator;\\n        }\\n\\n        return _updateDomainSeparator();\\n    }\\n\\n    function _chainID() private pure returns (uint256) {\\n        uint256 chainID;\\n        assembly {\\n            chainID := chainid()\\n        }\\n\\n        return chainID;\\n    }\\n\\n    function _recover(\\n        bytes32 _hash,\\n        uint8 _v,\\n        bytes32 _r,\\n        bytes32 _s\\n    ) internal pure returns (address) {\\n        // EIP-2 still allows signature malleability for ecrecover(). Remove this possibility and make the signature\\n        // unique. Appendix F in the Ethereum Yellow paper (https://ethereum.github.io/yellowpaper/paper.pdf), defines\\n        // the valid range for s in (281): 0 < s < secp256k1n ÷ 2 + 1, and for v in (282): v ∈ {27, 28}. Most\\n        // signatures from current libraries generate a unique signature with an s-value in the lower half order.\\n        //\\n        // If your library generates malleable signatures, such as s-values in the upper range, calculate a new s-value\\n        // with 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFEBAAEDCE6AF48A03BBFD25E8CD0364141 - s1 and flip v from 27 to 28 or\\n        // vice versa. If your library also generates signatures with 0/1 for v instead 27/28, add 27 to v to accept\\n        // these malleable signatures as well.\\n        if (\\n            uint256(_s) >\\n            0x7FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF5D576E7357A4501DDFE92F46681B20A0\\n        ) {\\n            revert(\\\"ECDSA: invalid signature '_s' value\\\");\\n        }\\n\\n        if (_v != 27 && _v != 28) {\\n            revert(\\\"ECDSA: invalid signature '_v' value\\\");\\n        }\\n\\n        // If the signature is valid (and not malleable), return the signer address\\n        address signer = ecrecover(_hash, _v, _r, _s);\\n        require(signer != address(0), \\\"ECDSA: invalid signature\\\");\\n\\n        return signer;\\n    }\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/utils/Context.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity >=0.6.0 <0.8.0;\\n\\n/*\\n * @dev Provides information about the current execution context, including the\\n * sender of the transaction and its data. While these are generally available\\n * via msg.sender and msg.data, they should not be accessed in such a direct\\n * manner, since when dealing with GSN meta-transactions the account sending and\\n * paying for execution may not be the actual sender (as far as an application\\n * is concerned).\\n *\\n * This contract is only required for intermediate, library-like contracts.\\n */\\nabstract contract Context {\\n    function _msgSender() internal view virtual returns (address payable) {\\n        return msg.sender;\\n    }\\n\\n    function _msgData() internal view virtual returns (bytes memory) {\\n        this; // silence state mutability warning without generating bytecode - see https://github.com/ethereum/solidity/issues/2691\\n        return msg.data;\\n    }\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/token/ERC20/ERC20.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.7.0;\\n\\nimport \\\"../../utils/Context.sol\\\";\\nimport \\\"./IERC20.sol\\\";\\nimport \\\"../../math/SafeMath.sol\\\";\\n\\n/**\\n * @dev Implementation of the {IERC20} interface.\\n *\\n * This implementation is agnostic to the way tokens are created. This means\\n * that a supply mechanism has to be added in a derived contract using {_mint}.\\n * For a generic mechanism see {ERC20PresetMinterPauser}.\\n *\\n * TIP: For a detailed writeup see our guide\\n * https://forum.zeppelin.solutions/t/how-to-implement-erc20-supply-mechanisms/226[How\\n * to implement supply mechanisms].\\n *\\n * We have followed general OpenZeppelin guidelines: functions revert instead\\n * of returning `false` on failure. This behavior is nonetheless conventional\\n * and does not conflict with the expectations of ERC20 applications.\\n *\\n * Additionally, an {Approval} event is emitted on calls to {transferFrom}.\\n * This allows applications to reconstruct the allowance for all accounts just\\n * by listening to said events. Other implementations of the EIP may not emit\\n * these events, as it isn't required by the specification.\\n *\\n * Finally, the non-standard {decreaseAllowance} and {increaseAllowance}\\n * functions have been added to mitigate the well-known issues around setting\\n * allowances. See {IERC20-approve}.\\n */\\ncontract ERC20 is Context, IERC20 {\\n    using SafeMath for uint256;\\n\\n    mapping (address => uint256) private _balances;\\n\\n    mapping (address => mapping (address => uint256)) private _allowances;\\n\\n    uint256 private _totalSupply;\\n\\n    string private _name;\\n    string private _symbol;\\n    uint8 private _decimals;\\n\\n    /**\\n     * @dev Sets the values for {name} and {symbol}, initializes {decimals} with\\n     * a default value of 18.\\n     *\\n     * To select a different value for {decimals}, use {_setupDecimals}.\\n     *\\n     * All three of these values are immutable: they can only be set once during\\n     * construction.\\n     */\\n    constructor (string memory name_, string memory symbol_) {\\n        _name = name_;\\n        _symbol = symbol_;\\n        _decimals = 18;\\n    }\\n\\n    /**\\n     * @dev Returns the name of the token.\\n     */\\n    function name() public view virtual returns (string memory) {\\n        return _name;\\n    }\\n\\n    /**\\n     * @dev Returns the symbol of the token, usually a shorter version of the\\n     * name.\\n     */\\n    function symbol() public view virtual returns (string memory) {\\n        return _symbol;\\n    }\\n\\n    /**\\n     * @dev Returns the number of decimals used to get its user representation.\\n     * For example, if `decimals` equals `2`, a balance of `505` tokens should\\n     * be displayed to a user as `5,05` (`505 / 10 ** 2`).\\n     *\\n     * Tokens usually opt for a value of 18, imitating the relationship between\\n     * Ether and Wei. This is the value {ERC20} uses, unless {_setupDecimals} is\\n     * called.\\n     *\\n     * NOTE: This information is only used for _display_ purposes: it in\\n     * no way affects any of the arithmetic of the contract, including\\n     * {IERC20-balanceOf} and {IERC20-transfer}.\\n     */\\n    function decimals() public view virtual returns (uint8) {\\n        return _decimals;\\n    }\\n\\n    /**\\n     * @dev See {IERC20-totalSupply}.\\n     */\\n    function totalSupply() public view virtual override returns (uint256) {\\n        return _totalSupply;\\n    }\\n\\n    /**\\n     * @dev See {IERC20-balanceOf}.\\n     */\\n    function balanceOf(address account) public view virtual override returns (uint256) {\\n        return _balances[account];\\n    }\\n\\n    /**\\n     * @dev See {IERC20-transfer}.\\n     *\\n     * Requirements:\\n     *\\n     * - `recipient` cannot be the zero address.\\n     * - the caller must have a balance of at least `amount`.\\n     */\\n    function transfer(address recipient, uint256 amount) public virtual override returns (bool) {\\n        _transfer(_msgSender(), recipient, amount);\\n        return true;\\n    }\\n\\n    /**\\n     * @dev See {IERC20-allowance}.\\n     */\\n    function allowance(address owner, address spender) public view virtual override returns (uint256) {\\n        return _allowances[owner][spender];\\n    }\\n\\n    /**\\n     * @dev See {IERC20-approve}.\\n     *\\n     * Requirements:\\n     *\\n     * - `spender` cannot be the zero address.\\n     */\\n    function approve(address spender, uint256 amount) public virtual override returns (bool) {\\n        _approve(_msgSender(), spender, amount);\\n        return true;\\n    }\\n\\n    /**\\n     * @dev See {IERC20-transferFrom}.\\n     *\\n     * Emits an {Approval} event indicating the updated allowance. This is not\\n     * required by the EIP. See the note at the beginning of {ERC20}.\\n     *\\n     * Requirements:\\n     *\\n     * - `sender` and `recipient` cannot be the zero address.\\n     * - `sender` must have a balance of at least `amount`.\\n     * - the caller must have allowance for ``sender``'s tokens of at least\\n     * `amount`.\\n     */\\n    function transferFrom(address sender, address recipient, uint256 amount) public virtual override returns (bool) {\\n        _transfer(sender, recipient, amount);\\n        _approve(sender, _msgSender(), _allowances[sender][_msgSender()].sub(amount, \\\"ERC20: transfer amount exceeds allowance\\\"));\\n        return true;\\n    }\\n\\n    /**\\n     * @dev Atomically increases the allowance granted to `spender` by the caller.\\n     *\\n     * This is an alternative to {approve} that can be used as a mitigation for\\n     * problems described in {IERC20-approve}.\\n     *\\n     * Emits an {Approval} event indicating the updated allowance.\\n     *\\n     * Requirements:\\n     *\\n     * - `spender` cannot be the zero address.\\n     */\\n    function increaseAllowance(address spender, uint256 addedValue) public virtual returns (bool) {\\n        _approve(_msgSender(), spender, _allowances[_msgSender()][spender].add(addedValue));\\n        return true;\\n    }\\n\\n    /**\\n     * @dev Atomically decreases the allowance granted to `spender` by the caller.\\n     *\\n     * This is an alternative to {approve} that can be used as a mitigation for\\n     * problems described in {IERC20-approve}.\\n     *\\n     * Emits an {Approval} event indicating the updated allowance.\\n     *\\n     * Requirements:\\n     *\\n     * - `spender` cannot be the zero address.\\n     * - `spender` must have allowance for the caller of at least\\n     * `subtractedValue`.\\n     */\\n    function decreaseAllowance(address spender, uint256 subtractedValue) public virtual returns (bool) {\\n        _approve(_msgSender(), spender, _allowances[_msgSender()][spender].sub(subtractedValue, \\\"ERC20: decreased allowance below zero\\\"));\\n        return true;\\n    }\\n\\n    /**\\n     * @dev Moves tokens `amount` from `sender` to `recipient`.\\n     *\\n     * This is internal function is equivalent to {transfer}, and can be used to\\n     * e.g. implement automatic token fees, slashing mechanisms, etc.\\n     *\\n     * Emits a {Transfer} event.\\n     *\\n     * Requirements:\\n     *\\n     * - `sender` cannot be the zero address.\\n     * - `recipient` cannot be the zero address.\\n     * - `sender` must have a balance of at least `amount`.\\n     */\\n    function _transfer(address sender, address recipient, uint256 amount) internal virtual {\\n        require(sender != address(0), \\\"ERC20: transfer from the zero address\\\");\\n        require(recipient != address(0), \\\"ERC20: transfer to the zero address\\\");\\n\\n        _beforeTokenTransfer(sender, recipient, amount);\\n\\n        _balances[sender] = _balances[sender].sub(amount, \\\"ERC20: transfer amount exceeds balance\\\");\\n        _balances[recipient] = _balances[recipient].add(amount);\\n        emit Transfer(sender, recipient, amount);\\n    }\\n\\n    /** @dev Creates `amount` tokens and assigns them to `account`, increasing\\n     * the total supply.\\n     *\\n     * Emits a {Transfer} event with `from` set to the zero address.\\n     *\\n     * Requirements:\\n     *\\n     * - `to` cannot be the zero address.\\n     */\\n    function _mint(address account, uint256 amount) internal virtual {\\n        require(account != address(0), \\\"ERC20: mint to the zero address\\\");\\n\\n        _beforeTokenTransfer(address(0), account, amount);\\n\\n        _totalSupply = _totalSupply.add(amount);\\n        _balances[account] = _balances[account].add(amount);\\n        emit Transfer(address(0), account, amount);\\n    }\\n\\n    /**\\n     * @dev Destroys `amount` tokens from `account`, reducing the\\n     * total supply.\\n     *\\n     * Emits a {Transfer} event with `to` set to the zero address.\\n     *\\n     * Requirements:\\n     *\\n     * - `account` cannot be the zero address.\\n     * - `account` must have at least `amount` tokens.\\n     */\\n    function _burn(address account, uint256 amount) internal virtual {\\n        require(account != address(0), \\\"ERC20: burn from the zero address\\\");\\n\\n        _beforeTokenTransfer(account, address(0), amount);\\n\\n        _balances[account] = _balances[account].sub(amount, \\\"ERC20: burn amount exceeds balance\\\");\\n        _totalSupply = _totalSupply.sub(amount);\\n        emit Transfer(account, address(0), amount);\\n    }\\n\\n    /**\\n     * @dev Sets `amount` as the allowance of `spender` over the `owner` s tokens.\\n     *\\n     * This internal function is equivalent to `approve`, and can be used to\\n     * e.g. set automatic allowances for certain subsystems, etc.\\n     *\\n     * Emits an {Approval} event.\\n     *\\n     * Requirements:\\n     *\\n     * - `owner` cannot be the zero address.\\n     * - `spender` cannot be the zero address.\\n     */\\n    function _approve(address owner, address spender, uint256 amount) internal virtual {\\n        require(owner != address(0), \\\"ERC20: approve from the zero address\\\");\\n        require(spender != address(0), \\\"ERC20: approve to the zero address\\\");\\n\\n        _allowances[owner][spender] = amount;\\n        emit Approval(owner, spender, amount);\\n    }\\n\\n    /**\\n     * @dev Sets {decimals} to a value other than the default one of 18.\\n     *\\n     * WARNING: This function should only be called from the constructor. Most\\n     * applications that interact with token contracts will not expect\\n     * {decimals} to ever change, and may work incorrectly if it does.\\n     */\\n    function _setupDecimals(uint8 decimals_) internal virtual {\\n        _decimals = decimals_;\\n    }\\n\\n    /**\\n     * @dev Hook that is called before any transfer of tokens. This includes\\n     * minting and burning.\\n     *\\n     * Calling conditions:\\n     *\\n     * - when `from` and `to` are both non-zero, `amount` of ``from``'s tokens\\n     * will be to transferred to `to`.\\n     * - when `from` is zero, `amount` tokens will be minted for `to`.\\n     * - when `to` is zero, `amount` of ``from``'s tokens will be burned.\\n     * - `from` and `to` are never both zero.\\n     *\\n     * To learn more about hooks, head to xref:ROOT:extending-contracts.adoc#using-hooks[Using Hooks].\\n     */\\n    function _beforeTokenTransfer(address from, address to, uint256 amount) internal virtual { }\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/utils/EnumerableSet.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.7.0;\\n\\n/**\\n * @dev Library for managing\\n * https://en.wikipedia.org/wiki/Set_(abstract_data_type)[sets] of primitive\\n * types.\\n *\\n * Sets have the following properties:\\n *\\n * - Elements are added, removed, and checked for existence in constant time\\n * (O(1)).\\n * - Elements are enumerated in O(n). No guarantees are made on the ordering.\\n *\\n * ```\\n * contract Example {\\n *     // Add the library methods\\n *     using EnumerableSet for EnumerableSet.AddressSet;\\n *\\n *     // Declare a set state variable\\n *     EnumerableSet.AddressSet private mySet;\\n * }\\n * ```\\n *\\n * As of v3.3.0, sets of type `bytes32` (`Bytes32Set`), `address` (`AddressSet`)\\n * and `uint256` (`UintSet`) are supported.\\n */\\nlibrary EnumerableSet {\\n    // To implement this library for multiple types with as little code\\n    // repetition as possible, we write it in terms of a generic Set type with\\n    // bytes32 values.\\n    // The Set implementation uses private functions, and user-facing\\n    // implementations (such as AddressSet) are just wrappers around the\\n    // underlying Set.\\n    // This means that we can only create new EnumerableSets for types that fit\\n    // in bytes32.\\n\\n    struct Set {\\n        // Storage of set values\\n        bytes32[] _values;\\n\\n        // Position of the value in the `values` array, plus 1 because index 0\\n        // means a value is not in the set.\\n        mapping (bytes32 => uint256) _indexes;\\n    }\\n\\n    /**\\n     * @dev Add a value to a set. O(1).\\n     *\\n     * Returns true if the value was added to the set, that is if it was not\\n     * already present.\\n     */\\n    function _add(Set storage set, bytes32 value) private returns (bool) {\\n        if (!_contains(set, value)) {\\n            set._values.push(value);\\n            // The value is stored at length-1, but we add 1 to all indexes\\n            // and use 0 as a sentinel value\\n            set._indexes[value] = set._values.length;\\n            return true;\\n        } else {\\n            return false;\\n        }\\n    }\\n\\n    /**\\n     * @dev Removes a value from a set. O(1).\\n     *\\n     * Returns true if the value was removed from the set, that is if it was\\n     * present.\\n     */\\n    function _remove(Set storage set, bytes32 value) private returns (bool) {\\n        // We read and store the value's index to prevent multiple reads from the same storage slot\\n        uint256 valueIndex = set._indexes[value];\\n\\n        if (valueIndex != 0) { // Equivalent to contains(set, value)\\n            // To delete an element from the _values array in O(1), we swap the element to delete with the last one in\\n            // the array, and then remove the last element (sometimes called as 'swap and pop').\\n            // This modifies the order of the array, as noted in {at}.\\n\\n            uint256 toDeleteIndex = valueIndex - 1;\\n            uint256 lastIndex = set._values.length - 1;\\n\\n            // When the value to delete is the last one, the swap operation is unnecessary. However, since this occurs\\n            // so rarely, we still do the swap anyway to avoid the gas cost of adding an 'if' statement.\\n\\n            bytes32 lastvalue = set._values[lastIndex];\\n\\n            // Move the last value to the index where the value to delete is\\n            set._values[toDeleteIndex] = lastvalue;\\n            // Update the index for the moved value\\n            set._indexes[lastvalue] = toDeleteIndex + 1; // All indexes are 1-based\\n\\n            // Delete the slot where the moved value was stored\\n            set._values.pop();\\n\\n            // Delete the index for the deleted slot\\n            delete set._indexes[value];\\n\\n            return true;\\n        } else {\\n            return false;\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns true if the value is in the set. O(1).\\n     */\\n    function _contains(Set storage set, bytes32 value) private view returns (bool) {\\n        return set._indexes[value] != 0;\\n    }\\n\\n    /**\\n     * @dev Returns the number of values on the set. O(1).\\n     */\\n    function _length(Set storage set) private view returns (uint256) {\\n        return set._values.length;\\n    }\\n\\n   /**\\n    * @dev Returns the value stored at position `index` in the set. O(1).\\n    *\\n    * Note that there are no guarantees on the ordering of values inside the\\n    * array, and it may change when more values are added or removed.\\n    *\\n    * Requirements:\\n    *\\n    * - `index` must be strictly less than {length}.\\n    */\\n    function _at(Set storage set, uint256 index) private view returns (bytes32) {\\n        require(set._values.length > index, \\\"EnumerableSet: index out of bounds\\\");\\n        return set._values[index];\\n    }\\n\\n    // Bytes32Set\\n\\n    struct Bytes32Set {\\n        Set _inner;\\n    }\\n\\n    /**\\n     * @dev Add a value to a set. O(1).\\n     *\\n     * Returns true if the value was added to the set, that is if it was not\\n     * already present.\\n     */\\n    function add(Bytes32Set storage set, bytes32 value) internal returns (bool) {\\n        return _add(set._inner, value);\\n    }\\n\\n    /**\\n     * @dev Removes a value from a set. O(1).\\n     *\\n     * Returns true if the value was removed from the set, that is if it was\\n     * present.\\n     */\\n    function remove(Bytes32Set storage set, bytes32 value) internal returns (bool) {\\n        return _remove(set._inner, value);\\n    }\\n\\n    /**\\n     * @dev Returns true if the value is in the set. O(1).\\n     */\\n    function contains(Bytes32Set storage set, bytes32 value) internal view returns (bool) {\\n        return _contains(set._inner, value);\\n    }\\n\\n    /**\\n     * @dev Returns the number of values in the set. O(1).\\n     */\\n    function length(Bytes32Set storage set) internal view returns (uint256) {\\n        return _length(set._inner);\\n    }\\n\\n   /**\\n    * @dev Returns the value stored at position `index` in the set. O(1).\\n    *\\n    * Note that there are no guarantees on the ordering of values inside the\\n    * array, and it may change when more values are added or removed.\\n    *\\n    * Requirements:\\n    *\\n    * - `index` must be strictly less than {length}.\\n    */\\n    function at(Bytes32Set storage set, uint256 index) internal view returns (bytes32) {\\n        return _at(set._inner, index);\\n    }\\n\\n    // AddressSet\\n\\n    struct AddressSet {\\n        Set _inner;\\n    }\\n\\n    /**\\n     * @dev Add a value to a set. O(1).\\n     *\\n     * Returns true if the value was added to the set, that is if it was not\\n     * already present.\\n     */\\n    function add(AddressSet storage set, address value) internal returns (bool) {\\n        return _add(set._inner, bytes32(uint256(uint160(value))));\\n    }\\n\\n    /**\\n     * @dev Removes a value from a set. O(1).\\n     *\\n     * Returns true if the value was removed from the set, that is if it was\\n     * present.\\n     */\\n    function remove(AddressSet storage set, address value) internal returns (bool) {\\n        return _remove(set._inner, bytes32(uint256(uint160(value))));\\n    }\\n\\n    /**\\n     * @dev Returns true if the value is in the set. O(1).\\n     */\\n    function contains(AddressSet storage set, address value) internal view returns (bool) {\\n        return _contains(set._inner, bytes32(uint256(uint160(value))));\\n    }\\n\\n    /**\\n     * @dev Returns the number of values in the set. O(1).\\n     */\\n    function length(AddressSet storage set) internal view returns (uint256) {\\n        return _length(set._inner);\\n    }\\n\\n   /**\\n    * @dev Returns the value stored at position `index` in the set. O(1).\\n    *\\n    * Note that there are no guarantees on the ordering of values inside the\\n    * array, and it may change when more values are added or removed.\\n    *\\n    * Requirements:\\n    *\\n    * - `index` must be strictly less than {length}.\\n    */\\n    function at(AddressSet storage set, uint256 index) internal view returns (address) {\\n        return address(uint160(uint256(_at(set._inner, index))));\\n    }\\n\\n\\n    // UintSet\\n\\n    struct UintSet {\\n        Set _inner;\\n    }\\n\\n    /**\\n     * @dev Add a value to a set. O(1).\\n     *\\n     * Returns true if the value was added to the set, that is if it was not\\n     * already present.\\n     */\\n    function add(UintSet storage set, uint256 value) internal returns (bool) {\\n        return _add(set._inner, bytes32(value));\\n    }\\n\\n    /**\\n     * @dev Removes a value from a set. O(1).\\n     *\\n     * Returns true if the value was removed from the set, that is if it was\\n     * present.\\n     */\\n    function remove(UintSet storage set, uint256 value) internal returns (bool) {\\n        return _remove(set._inner, bytes32(value));\\n    }\\n\\n    /**\\n     * @dev Returns true if the value is in the set. O(1).\\n     */\\n    function contains(UintSet storage set, uint256 value) internal view returns (bool) {\\n        return _contains(set._inner, bytes32(value));\\n    }\\n\\n    /**\\n     * @dev Returns the number of values on the set. O(1).\\n     */\\n    function length(UintSet storage set) internal view returns (uint256) {\\n        return _length(set._inner);\\n    }\\n\\n   /**\\n    * @dev Returns the value stored at position `index` in the set. O(1).\\n    *\\n    * Note that there are no guarantees on the ordering of values inside the\\n    * array, and it may change when more values are added or removed.\\n    *\\n    * Requirements:\\n    *\\n    * - `index` must be strictly less than {length}.\\n    */\\n    function at(UintSet storage set, uint256 index) internal view returns (uint256) {\\n        return uint256(_at(set._inner, index));\\n    }\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/cryptography/ECDSA.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.7.0;\\n\\n/**\\n * @dev Elliptic Curve Digital Signature Algorithm (ECDSA) operations.\\n *\\n * These functions can be used to verify that a message was signed by the holder\\n * of the private keys of a given address.\\n */\\nlibrary ECDSA {\\n    /**\\n     * @dev Returns the address that signed a hashed message (`hash`) with\\n     * `signature`. This address can then be used for verification purposes.\\n     *\\n     * The `ecrecover` EVM opcode allows for malleable (non-unique) signatures:\\n     * this function rejects them by requiring the `s` value to be in the lower\\n     * half order, and the `v` value to be either 27 or 28.\\n     *\\n     * IMPORTANT: `hash` _must_ be the result of a hash operation for the\\n     * verification to be secure: it is possible to craft signatures that\\n     * recover to arbitrary addresses for non-hashed data. A safe way to ensure\\n     * this is by receiving a hash of the original message (which may otherwise\\n     * be too long), and then calling {toEthSignedMessageHash} on it.\\n     */\\n    function recover(bytes32 hash, bytes memory signature) internal pure returns (address) {\\n        // Check the signature length\\n        if (signature.length != 65) {\\n            revert(\\\"ECDSA: invalid signature length\\\");\\n        }\\n\\n        // Divide the signature in r, s and v variables\\n        bytes32 r;\\n        bytes32 s;\\n        uint8 v;\\n\\n        // ecrecover takes the signature parameters, and the only way to get them\\n        // currently is to use assembly.\\n        // solhint-disable-next-line no-inline-assembly\\n        assembly {\\n            r := mload(add(signature, 0x20))\\n            s := mload(add(signature, 0x40))\\n            v := byte(0, mload(add(signature, 0x60)))\\n        }\\n\\n        return recover(hash, v, r, s);\\n    }\\n\\n    /**\\n     * @dev Overload of {ECDSA-recover-bytes32-bytes-} that receives the `v`,\\n     * `r` and `s` signature fields separately.\\n     */\\n    function recover(bytes32 hash, uint8 v, bytes32 r, bytes32 s) internal pure returns (address) {\\n        // EIP-2 still allows signature malleability for ecrecover(). Remove this possibility and make the signature\\n        // unique. Appendix F in the Ethereum Yellow paper (https://ethereum.github.io/yellowpaper/paper.pdf), defines\\n        // the valid range for s in (281): 0 < s < secp256k1n ÷ 2 + 1, and for v in (282): v ∈ {27, 28}. Most\\n        // signatures from current libraries generate a unique signature with an s-value in the lower half order.\\n        //\\n        // If your library generates malleable signatures, such as s-values in the upper range, calculate a new s-value\\n        // with 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFEBAAEDCE6AF48A03BBFD25E8CD0364141 - s1 and flip v from 27 to 28 or\\n        // vice versa. If your library also generates signatures with 0/1 for v instead 27/28, add 27 to v to accept\\n        // these malleable signatures as well.\\n        require(uint256(s) <= 0x7FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF5D576E7357A4501DDFE92F46681B20A0, \\\"ECDSA: invalid signature 's' value\\\");\\n        require(v == 27 || v == 28, \\\"ECDSA: invalid signature 'v' value\\\");\\n\\n        // If the signature is valid (and not malleable), return the signer address\\n        address signer = ecrecover(hash, v, r, s);\\n        require(signer != address(0), \\\"ECDSA: invalid signature\\\");\\n\\n        return signer;\\n    }\\n\\n    /**\\n     * @dev Returns an Ethereum Signed Message, created from a `hash`. This\\n     * replicates the behavior of the\\n     * https://github.com/ethereum/wiki/wiki/JSON-RPC#eth_sign[`eth_sign`]\\n     * JSON-RPC method.\\n     *\\n     * See {recover}.\\n     */\\n    function toEthSignedMessageHash(bytes32 hash) internal pure returns (bytes32) {\\n        // 32 is the length in bytes of hash,\\n        // enforced by the type signature above\\n        return keccak256(abi.encodePacked(\\\"\\\\x19Ethereum Signed Message:\\\\n32\\\", hash));\\n    }\\n}\\n\"\r\n    }\r\n  },\r\n  \"settings\": {\r\n    \"optimizer\": {\r\n      \"enabled\": true,\r\n      \"runs\": 200\r\n    },\r\n    \"outputSelection\": {\r\n      \"*\": {\r\n        \"*\": [\r\n          \"evm.bytecode\",\r\n          \"evm.deployedBytecode\",\r\n          \"abi\"\r\n        ]\r\n      }\r\n    },\r\n    \"libraries\": {}\r\n  }\r\n}}","ABI":"[{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"token\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"bytes\",\"name\":\"receiver\",\"type\":\"bytes\"}],\"name\":\"Burn\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint8\",\"name\":\"targetChain\",\"type\":\"uint8\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"token\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"bytes\",\"name\":\"receiver\",\"type\":\"bytes\"}],\"name\":\"BurnAndTransfer\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"serviceFee\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"externalFee\",\"type\":\"uint256\"}],\"name\":\"Fees\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint8\",\"name\":\"targetChain\",\"type\":\"uint8\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"token\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"bytes\",\"name\":\"receiver\",\"type\":\"bytes\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"serviceFee\",\"type\":\"uint256\"}],\"name\":\"Lock\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"token\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"receiver\",\"type\":\"address\"}],\"name\":\"Mint\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"token\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"receiver\",\"type\":\"address\"}],\"name\":\"Unlock\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint8\",\"name\":\"sourceChain\",\"type\":\"uint8\"},{\"indexed\":false,\"internalType\":\"bytes\",\"name\":\"nativeToken\",\"type\":\"bytes\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"wrappedToken\",\"type\":\"address\"}],\"name\":\"WrappedTokenDeployed\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"albtToken\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_wrappedToken\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"},{\"internalType\":\"bytes\",\"name\":\"_receiver\",\"type\":\"bytes\"}],\"name\":\"burn\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint8\",\"name\":\"_targetChain\",\"type\":\"uint8\"},{\"internalType\":\"address\",\"name\":\"_wrappedToken\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"},{\"internalType\":\"bytes\",\"name\":\"_receiver\",\"type\":\"bytes\"}],\"name\":\"burnAndTransfer\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint8\",\"name\":\"_targetChain\",\"type\":\"uint8\"},{\"internalType\":\"address\",\"name\":\"_wrappedToken\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"},{\"internalType\":\"bytes\",\"name\":\"_receiver\",\"type\":\"bytes\"},{\"internalType\":\"uint256\",\"name\":\"_deadline\",\"type\":\"uint256\"},{\"internalType\":\"uint8\",\"name\":\"_v\",\"type\":\"uint8\"},{\"internalType\":\"bytes32\",\"name\":\"_r\",\"type\":\"bytes32\"},{\"internalType\":\"bytes32\",\"name\":\"_s\",\"type\":\"bytes32\"}],\"name\":\"burnAndTransferWithPermit\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_wrappedToken\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"},{\"internalType\":\"bytes\",\"name\":\"_receiver\",\"type\":\"bytes\"},{\"internalType\":\"uint256\",\"name\":\"_deadline\",\"type\":\"uint256\"},{\"internalType\":\"uint8\",\"name\":\"_v\",\"type\":\"uint8\"},{\"internalType\":\"bytes32\",\"name\":\"_r\",\"type\":\"bytes32\"},{\"internalType\":\"bytes32\",\"name\":\"_s\",\"type\":\"bytes32\"}],\"name\":\"burnWithPermit\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint8\",\"name\":\"_chainId\",\"type\":\"uint8\"},{\"internalType\":\"bytes32\",\"name\":\"_ethHash\",\"type\":\"bytes32\"}],\"name\":\"hashesUsed\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint8\",\"name\":\"_chainId\",\"type\":\"uint8\"},{\"internalType\":\"address\",\"name\":\"_albtToken\",\"type\":\"address\"}],\"name\":\"initRouter\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint8\",\"name\":\"_targetChain\",\"type\":\"uint8\"},{\"internalType\":\"address\",\"name\":\"_nativeToken\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"},{\"internalType\":\"bytes\",\"name\":\"_receiver\",\"type\":\"bytes\"}],\"name\":\"lock\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint8\",\"name\":\"_targetChain\",\"type\":\"uint8\"},{\"internalType\":\"address\",\"name\":\"_nativeToken\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"},{\"internalType\":\"bytes\",\"name\":\"_receiver\",\"type\":\"bytes\"},{\"internalType\":\"uint256\",\"name\":\"_deadline\",\"type\":\"uint256\"},{\"internalType\":\"uint8\",\"name\":\"_v\",\"type\":\"uint8\"},{\"internalType\":\"bytes32\",\"name\":\"_r\",\"type\":\"bytes32\"},{\"internalType\":\"bytes32\",\"name\":\"_s\",\"type\":\"bytes32\"}],\"name\":\"lockWithPermit\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint8\",\"name\":\"_nativeChain\",\"type\":\"uint8\"},{\"internalType\":\"bytes\",\"name\":\"_nativeToken\",\"type\":\"bytes\"},{\"internalType\":\"bytes\",\"name\":\"_transactionId\",\"type\":\"bytes\"},{\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"_receiver\",\"type\":\"address\"},{\"internalType\":\"bytes[]\",\"name\":\"_signatures\",\"type\":\"bytes[]\"},{\"components\":[{\"internalType\":\"string\",\"name\":\"name\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"symbol\",\"type\":\"string\"},{\"internalType\":\"uint8\",\"name\":\"decimals\",\"type\":\"uint8\"}],\"internalType\":\"struct WrappedTokenParams\",\"name\":\"_tokenParams\",\"type\":\"tuple\"}],\"name\":\"mint\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint8\",\"name\":\"_chainId\",\"type\":\"uint8\"},{\"internalType\":\"bytes\",\"name\":\"_nativeToken\",\"type\":\"bytes\"}],\"name\":\"nativeToWrappedToken\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint8\",\"name\":\"_sourceChain\",\"type\":\"uint8\"},{\"internalType\":\"bytes\",\"name\":\"_transactionId\",\"type\":\"bytes\"},{\"internalType\":\"address\",\"name\":\"_nativeToken\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"_receiver\",\"type\":\"address\"},{\"internalType\":\"bytes[]\",\"name\":\"_signatures\",\"type\":\"bytes[]\"}],\"name\":\"unlock\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_wrappedToken\",\"type\":\"address\"}],\"name\":\"wrappedToNativeToken\",\"outputs\":[{\"components\":[{\"internalType\":\"uint8\",\"name\":\"chainId\",\"type\":\"uint8\"},{\"internalType\":\"bytes\",\"name\":\"token\",\"type\":\"bytes\"}],\"internalType\":\"struct LibRouter.NativeTokenWithChainId\",\"name\":\"\",\"type\":\"tuple\"}],\"stateMutability\":\"view\",\"type\":\"function\"}]","ContractName":"RouterFacet","CompilerVersion":"v0.7.6+commit.7338295f","OptimizationUsed":"1","Runs":"200","ConstructorArguments":"","EVMVersion":"Default","Library":"","LicenseType":"","Proxy":"0","Implementation":"","SwarmSource":""}]}