{"status":"1","message":"OK","result":[{"SourceCode":"// Sources flattened with hardhat v2.5.0 https://hardhat.org\r\n\r\n// File @openzeppelin/contracts/token/ERC20/IERC20.sol@v4.2.0\r\n\r\n// SPDX-License-Identifier: MIT\r\n\r\npragma solidity ^0.8.0;\r\n\r\n/**\r\n * @dev Interface of the ERC20 standard as defined in the EIP.\r\n */\r\ninterface IERC20 {\r\n    /**\r\n     * @dev Returns the amount of tokens in existence.\r\n     */\r\n    function totalSupply() external view returns (uint256);\r\n\r\n    /**\r\n     * @dev Returns the amount of tokens owned by `account`.\r\n     */\r\n    function balanceOf(address account) external view returns (uint256);\r\n\r\n    /**\r\n     * @dev Moves `amount` tokens from the caller's account to `recipient`.\r\n     *\r\n     * Returns a boolean value indicating whether the operation succeeded.\r\n     *\r\n     * Emits a {Transfer} event.\r\n     */\r\n    function transfer(address recipient, uint256 amount) external returns (bool);\r\n\r\n    /**\r\n     * @dev Returns the remaining number of tokens that `spender` will be\r\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\r\n     * zero by default.\r\n     *\r\n     * This value changes when {approve} or {transferFrom} are called.\r\n     */\r\n    function allowance(address owner, address spender) external view returns (uint256);\r\n\r\n    /**\r\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\r\n     *\r\n     * Returns a boolean value indicating whether the operation succeeded.\r\n     *\r\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\r\n     * that someone may use both the old and the new allowance by unfortunate\r\n     * transaction ordering. One possible solution to mitigate this race\r\n     * condition is to first reduce the spender's allowance to 0 and set the\r\n     * desired value afterwards:\r\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\r\n     *\r\n     * Emits an {Approval} event.\r\n     */\r\n    function approve(address spender, uint256 amount) external returns (bool);\r\n\r\n    /**\r\n     * @dev Moves `amount` tokens from `sender` to `recipient` using the\r\n     * allowance mechanism. `amount` is then deducted from the caller's\r\n     * allowance.\r\n     *\r\n     * Returns a boolean value indicating whether the operation succeeded.\r\n     *\r\n     * Emits a {Transfer} event.\r\n     */\r\n    function transferFrom(\r\n        address sender,\r\n        address recipient,\r\n        uint256 amount\r\n    ) external returns (bool);\r\n\r\n    /**\r\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\r\n     * another (`to`).\r\n     *\r\n     * Note that `value` may be zero.\r\n     */\r\n    event Transfer(address indexed from, address indexed to, uint256 value);\r\n\r\n    /**\r\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\r\n     * a call to {approve}. `value` is the new allowance.\r\n     */\r\n    event Approval(address indexed owner, address indexed spender, uint256 value);\r\n}\r\n\r\n\r\n// File contracts/libs/TransferHelper.sol\r\n\r\n// GPL-3.0-or-later\r\n\r\npragma solidity ^0.8.6;\r\n\r\n// helper methods for interacting with ERC20 tokens and sending ETH that do not consistently return true/false\r\nlibrary TransferHelper {\r\n    function safeApprove(address token, address to, uint value) internal {\r\n        // bytes4(keccak256(bytes('approve(address,uint)')));\r\n        (bool success, bytes memory data) = token.call(abi.encodeWithSelector(0x095ea7b3, to, value));\r\n        require(success && (data.length == 0 || abi.decode(data, (bool))), 'TransferHelper: APPROVE_FAILED');\r\n    }\r\n\r\n    function safeTransfer(address token, address to, uint value) internal {\r\n        // bytes4(keccak256(bytes('transfer(address,uint)')));\r\n        (bool success, bytes memory data) = token.call(abi.encodeWithSelector(0xa9059cbb, to, value));\r\n        require(success && (data.length == 0 || abi.decode(data, (bool))), 'TransferHelper: TRANSFER_FAILED');\r\n    }\r\n\r\n    function safeTransferFrom(address token, address from, address to, uint value) internal {\r\n        // bytes4(keccak256(bytes('transferFrom(address,address,uint)')));\r\n        (bool success, bytes memory data) = token.call(abi.encodeWithSelector(0x23b872dd, from, to, value));\r\n        require(success && (data.length == 0 || abi.decode(data, (bool))), 'TransferHelper: TRANSFER_FROM_FAILED');\r\n    }\r\n\r\n    function safeTransferETH(address to, uint value) internal {\r\n        (bool success,) = to.call{value:value}(new bytes(0));\r\n        require(success, 'TransferHelper: ETH_TRANSFER_FAILED');\r\n    }\r\n}\r\n\r\n\r\n// File contracts/libs/ABDKMath64x64.sol\r\n\r\n// BSD-4-Clause\r\n/*\r\n * ABDK Math 64.64 Smart Contract Library.  Copyright Â© 2019 by ABDK Consulting.\r\n * Author: Mikhail Vladimirov <mikhail.vladimirov@gmail.com>\r\n */\r\npragma solidity ^0.8.0;\r\n\r\n/**\r\n * Smart contract library of mathematical functions operating with signed\r\n * 64.64-bit fixed point numbers.  Signed 64.64-bit fixed point number is\r\n * basically a simple fraction whose numerator is signed 128-bit integer and\r\n * denominator is 2^64.  As long as denominator is always the same, there is no\r\n * need to store it, thus in Solidity signed 64.64-bit fixed point numbers are\r\n * represented by int128 type holding only the numerator.\r\n */\r\nlibrary ABDKMath64x64 {\r\n  /*\r\n   * Minimum value signed 64.64-bit fixed point number may have. \r\n   */\r\n  int128 private constant MIN_64x64 = -0x80000000000000000000000000000000;\r\n\r\n  /*\r\n   * Maximum value signed 64.64-bit fixed point number may have. \r\n   */\r\n  int128 private constant MAX_64x64 = 0x7FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF;\r\n\r\n  /**\r\n   * Convert signed 256-bit integer number into signed 64.64-bit fixed point\r\n   * number.  Revert on overflow.\r\n   *\r\n   * @param x signed 256-bit integer number\r\n   * @return signed 64.64-bit fixed point number\r\n   */\r\n  function fromInt (int256 x) internal pure returns (int128) {\r\n    unchecked {\r\n      require (x >= -0x8000000000000000 && x <= 0x7FFFFFFFFFFFFFFF);\r\n      return int128 (x << 64);\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Convert signed 64.64 fixed point number into signed 64-bit integer number\r\n   * rounding down.\r\n   *\r\n   * @param x signed 64.64-bit fixed point number\r\n   * @return signed 64-bit integer number\r\n   */\r\n  function toInt (int128 x) internal pure returns (int64) {\r\n    unchecked {\r\n      return int64 (x >> 64);\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Convert unsigned 256-bit integer number into signed 64.64-bit fixed point\r\n   * number.  Revert on overflow.\r\n   *\r\n   * @param x unsigned 256-bit integer number\r\n   * @return signed 64.64-bit fixed point number\r\n   */\r\n  function fromUInt (uint256 x) internal pure returns (int128) {\r\n    unchecked {\r\n      require (x <= 0x7FFFFFFFFFFFFFFF);\r\n      return int128 (int256 (x << 64));\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Convert signed 64.64 fixed point number into unsigned 64-bit integer\r\n   * number rounding down.  Revert on underflow.\r\n   *\r\n   * @param x signed 64.64-bit fixed point number\r\n   * @return unsigned 64-bit integer number\r\n   */\r\n  function toUInt (int128 x) internal pure returns (uint64) {\r\n    unchecked {\r\n      require (x >= 0);\r\n      return uint64 (uint128 (x >> 64));\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Convert signed 128.128 fixed point number into signed 64.64-bit fixed point\r\n   * number rounding down.  Revert on overflow.\r\n   *\r\n   * @param x signed 128.128-bin fixed point number\r\n   * @return signed 64.64-bit fixed point number\r\n   */\r\n  function from128x128 (int256 x) internal pure returns (int128) {\r\n    unchecked {\r\n      int256 result = x >> 64;\r\n      require (result >= MIN_64x64 && result <= MAX_64x64);\r\n      return int128 (result);\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Convert signed 64.64 fixed point number into signed 128.128 fixed point\r\n   * number.\r\n   *\r\n   * @param x signed 64.64-bit fixed point number\r\n   * @return signed 128.128 fixed point number\r\n   */\r\n  function to128x128 (int128 x) internal pure returns (int256) {\r\n    unchecked {\r\n      return int256 (x) << 64;\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Calculate x + y.  Revert on overflow.\r\n   *\r\n   * @param x signed 64.64-bit fixed point number\r\n   * @param y signed 64.64-bit fixed point number\r\n   * @return signed 64.64-bit fixed point number\r\n   */\r\n  function add (int128 x, int128 y) internal pure returns (int128) {\r\n    unchecked {\r\n      int256 result = int256(x) + y;\r\n      require (result >= MIN_64x64 && result <= MAX_64x64);\r\n      return int128 (result);\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Calculate x - y.  Revert on overflow.\r\n   *\r\n   * @param x signed 64.64-bit fixed point number\r\n   * @param y signed 64.64-bit fixed point number\r\n   * @return signed 64.64-bit fixed point number\r\n   */\r\n  function sub (int128 x, int128 y) internal pure returns (int128) {\r\n    unchecked {\r\n      int256 result = int256(x) - y;\r\n      require (result >= MIN_64x64 && result <= MAX_64x64);\r\n      return int128 (result);\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Calculate x * y rounding down.  Revert on overflow.\r\n   *\r\n   * @param x signed 64.64-bit fixed point number\r\n   * @param y signed 64.64-bit fixed point number\r\n   * @return signed 64.64-bit fixed point number\r\n   */\r\n  function mul (int128 x, int128 y) internal pure returns (int128) {\r\n    unchecked {\r\n      int256 result = int256(x) * y >> 64;\r\n      require (result >= MIN_64x64 && result <= MAX_64x64);\r\n      return int128 (result);\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Calculate x * y rounding towards zero, where x is signed 64.64 fixed point\r\n   * number and y is signed 256-bit integer number.  Revert on overflow.\r\n   *\r\n   * @param x signed 64.64 fixed point number\r\n   * @param y signed 256-bit integer number\r\n   * @return signed 256-bit integer number\r\n   */\r\n  function muli (int128 x, int256 y) internal pure returns (int256) {\r\n    unchecked {\r\n      if (x == MIN_64x64) {\r\n        require (y >= -0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF &&\r\n          y <= 0x1000000000000000000000000000000000000000000000000);\r\n        return -y << 63;\r\n      } else {\r\n        bool negativeResult = false;\r\n        if (x < 0) {\r\n          x = -x;\r\n          negativeResult = true;\r\n        }\r\n        if (y < 0) {\r\n          y = -y; // We rely on overflow behavior here\r\n          negativeResult = !negativeResult;\r\n        }\r\n        uint256 absoluteResult = mulu (x, uint256 (y));\r\n        if (negativeResult) {\r\n          require (absoluteResult <=\r\n            0x8000000000000000000000000000000000000000000000000000000000000000);\r\n          return -int256 (absoluteResult); // We rely on overflow behavior here\r\n        } else {\r\n          require (absoluteResult <=\r\n            0x7FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF);\r\n          return int256 (absoluteResult);\r\n        }\r\n      }\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Calculate x * y rounding down, where x is signed 64.64 fixed point number\r\n   * and y is unsigned 256-bit integer number.  Revert on overflow.\r\n   *\r\n   * @param x signed 64.64 fixed point number\r\n   * @param y unsigned 256-bit integer number\r\n   * @return unsigned 256-bit integer number\r\n   */\r\n  function mulu (int128 x, uint256 y) internal pure returns (uint256) {\r\n    unchecked {\r\n      if (y == 0) return 0;\r\n\r\n      require (x >= 0);\r\n\r\n      uint256 lo = (uint256 (int256 (x)) * (y & 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF)) >> 64;\r\n      uint256 hi = uint256 (int256 (x)) * (y >> 128);\r\n\r\n      require (hi <= 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF);\r\n      hi <<= 64;\r\n\r\n      require (hi <=\r\n        0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF - lo);\r\n      return hi + lo;\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Calculate x / y rounding towards zero.  Revert on overflow or when y is\r\n   * zero.\r\n   *\r\n   * @param x signed 64.64-bit fixed point number\r\n   * @param y signed 64.64-bit fixed point number\r\n   * @return signed 64.64-bit fixed point number\r\n   */\r\n  function div (int128 x, int128 y) internal pure returns (int128) {\r\n    unchecked {\r\n      require (y != 0);\r\n      int256 result = (int256 (x) << 64) / y;\r\n      require (result >= MIN_64x64 && result <= MAX_64x64);\r\n      return int128 (result);\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Calculate x / y rounding towards zero, where x and y are signed 256-bit\r\n   * integer numbers.  Revert on overflow or when y is zero.\r\n   *\r\n   * @param x signed 256-bit integer number\r\n   * @param y signed 256-bit integer number\r\n   * @return signed 64.64-bit fixed point number\r\n   */\r\n  function divi (int256 x, int256 y) internal pure returns (int128) {\r\n    unchecked {\r\n      require (y != 0);\r\n\r\n      bool negativeResult = false;\r\n      if (x < 0) {\r\n        x = -x; // We rely on overflow behavior here\r\n        negativeResult = true;\r\n      }\r\n      if (y < 0) {\r\n        y = -y; // We rely on overflow behavior here\r\n        negativeResult = !negativeResult;\r\n      }\r\n      uint128 absoluteResult = divuu (uint256 (x), uint256 (y));\r\n      if (negativeResult) {\r\n        require (absoluteResult <= 0x80000000000000000000000000000000);\r\n        return -int128 (absoluteResult); // We rely on overflow behavior here\r\n      } else {\r\n        require (absoluteResult <= 0x7FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF);\r\n        return int128 (absoluteResult); // We rely on overflow behavior here\r\n      }\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Calculate x / y rounding towards zero, where x and y are unsigned 256-bit\r\n   * integer numbers.  Revert on overflow or when y is zero.\r\n   *\r\n   * @param x unsigned 256-bit integer number\r\n   * @param y unsigned 256-bit integer number\r\n   * @return signed 64.64-bit fixed point number\r\n   */\r\n  function divu (uint256 x, uint256 y) internal pure returns (int128) {\r\n    unchecked {\r\n      require (y != 0);\r\n      uint128 result = divuu (x, y);\r\n      require (result <= uint128 (MAX_64x64));\r\n      return int128 (result);\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Calculate -x.  Revert on overflow.\r\n   *\r\n   * @param x signed 64.64-bit fixed point number\r\n   * @return signed 64.64-bit fixed point number\r\n   */\r\n  function neg (int128 x) internal pure returns (int128) {\r\n    unchecked {\r\n      require (x != MIN_64x64);\r\n      return -x;\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Calculate |x|.  Revert on overflow.\r\n   *\r\n   * @param x signed 64.64-bit fixed point number\r\n   * @return signed 64.64-bit fixed point number\r\n   */\r\n  function abs (int128 x) internal pure returns (int128) {\r\n    unchecked {\r\n      require (x != MIN_64x64);\r\n      return x < 0 ? -x : x;\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Calculate 1 / x rounding towards zero.  Revert on overflow or when x is\r\n   * zero.\r\n   *\r\n   * @param x signed 64.64-bit fixed point number\r\n   * @return signed 64.64-bit fixed point number\r\n   */\r\n  function inv (int128 x) internal pure returns (int128) {\r\n    unchecked {\r\n      require (x != 0);\r\n      int256 result = int256 (0x100000000000000000000000000000000) / x;\r\n      require (result >= MIN_64x64 && result <= MAX_64x64);\r\n      return int128 (result);\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Calculate arithmetics average of x and y, i.e. (x + y) / 2 rounding down.\r\n   *\r\n   * @param x signed 64.64-bit fixed point number\r\n   * @param y signed 64.64-bit fixed point number\r\n   * @return signed 64.64-bit fixed point number\r\n   */\r\n  function avg (int128 x, int128 y) internal pure returns (int128) {\r\n    unchecked {\r\n      return int128 ((int256 (x) + int256 (y)) >> 1);\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Calculate geometric average of x and y, i.e. sqrt (x * y) rounding down.\r\n   * Revert on overflow or in case x * y is negative.\r\n   *\r\n   * @param x signed 64.64-bit fixed point number\r\n   * @param y signed 64.64-bit fixed point number\r\n   * @return signed 64.64-bit fixed point number\r\n   */\r\n  function gavg (int128 x, int128 y) internal pure returns (int128) {\r\n    unchecked {\r\n      int256 m = int256 (x) * int256 (y);\r\n      require (m >= 0);\r\n      require (m <\r\n          0x4000000000000000000000000000000000000000000000000000000000000000);\r\n      return int128 (sqrtu (uint256 (m)));\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Calculate x^y assuming 0^0 is 1, where x is signed 64.64 fixed point number\r\n   * and y is unsigned 256-bit integer number.  Revert on overflow.\r\n   *\r\n   * @param x signed 64.64-bit fixed point number\r\n   * @param y uint256 value\r\n   * @return signed 64.64-bit fixed point number\r\n   */\r\n  function pow (int128 x, uint256 y) internal pure returns (int128) {\r\n    unchecked {\r\n      bool negative = x < 0 && y & 1 == 1;\r\n\r\n      uint256 absX = uint128 (x < 0 ? -x : x);\r\n      uint256 absResult;\r\n      absResult = 0x100000000000000000000000000000000;\r\n\r\n      if (absX <= 0x10000000000000000) {\r\n        absX <<= 63;\r\n        while (y != 0) {\r\n          if (y & 0x1 != 0) {\r\n            absResult = absResult * absX >> 127;\r\n          }\r\n          absX = absX * absX >> 127;\r\n\r\n          if (y & 0x2 != 0) {\r\n            absResult = absResult * absX >> 127;\r\n          }\r\n          absX = absX * absX >> 127;\r\n\r\n          if (y & 0x4 != 0) {\r\n            absResult = absResult * absX >> 127;\r\n          }\r\n          absX = absX * absX >> 127;\r\n\r\n          if (y & 0x8 != 0) {\r\n            absResult = absResult * absX >> 127;\r\n          }\r\n          absX = absX * absX >> 127;\r\n\r\n          y >>= 4;\r\n        }\r\n\r\n        absResult >>= 64;\r\n      } else {\r\n        uint256 absXShift = 63;\r\n        if (absX < 0x1000000000000000000000000) { absX <<= 32; absXShift -= 32; }\r\n        if (absX < 0x10000000000000000000000000000) { absX <<= 16; absXShift -= 16; }\r\n        if (absX < 0x1000000000000000000000000000000) { absX <<= 8; absXShift -= 8; }\r\n        if (absX < 0x10000000000000000000000000000000) { absX <<= 4; absXShift -= 4; }\r\n        if (absX < 0x40000000000000000000000000000000) { absX <<= 2; absXShift -= 2; }\r\n        if (absX < 0x80000000000000000000000000000000) { absX <<= 1; absXShift -= 1; }\r\n\r\n        uint256 resultShift = 0;\r\n        while (y != 0) {\r\n          require (absXShift < 64);\r\n\r\n          if (y & 0x1 != 0) {\r\n            absResult = absResult * absX >> 127;\r\n            resultShift += absXShift;\r\n            if (absResult > 0x100000000000000000000000000000000) {\r\n              absResult >>= 1;\r\n              resultShift += 1;\r\n            }\r\n          }\r\n          absX = absX * absX >> 127;\r\n          absXShift <<= 1;\r\n          if (absX >= 0x100000000000000000000000000000000) {\r\n              absX >>= 1;\r\n              absXShift += 1;\r\n          }\r\n\r\n          y >>= 1;\r\n        }\r\n\r\n        require (resultShift < 64);\r\n        absResult >>= 64 - resultShift;\r\n      }\r\n      int256 result = negative ? -int256 (absResult) : int256 (absResult);\r\n      require (result >= MIN_64x64 && result <= MAX_64x64);\r\n      return int128 (result);\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Calculate sqrt (x) rounding down.  Revert if x < 0.\r\n   *\r\n   * @param x signed 64.64-bit fixed point number\r\n   * @return signed 64.64-bit fixed point number\r\n   */\r\n  function sqrt (int128 x) internal pure returns (int128) {\r\n    unchecked {\r\n      require (x >= 0);\r\n      return int128 (sqrtu (uint256 (int256 (x)) << 64));\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Calculate binary logarithm of x.  Revert if x <= 0.\r\n   *\r\n   * @param x signed 64.64-bit fixed point number\r\n   * @return signed 64.64-bit fixed point number\r\n   */\r\n  function log_2 (int128 x) internal pure returns (int128) {\r\n    unchecked {\r\n      require (x > 0);\r\n\r\n      int256 msb = 0;\r\n      int256 xc = x;\r\n      if (xc >= 0x10000000000000000) { xc >>= 64; msb += 64; }\r\n      if (xc >= 0x100000000) { xc >>= 32; msb += 32; }\r\n      if (xc >= 0x10000) { xc >>= 16; msb += 16; }\r\n      if (xc >= 0x100) { xc >>= 8; msb += 8; }\r\n      if (xc >= 0x10) { xc >>= 4; msb += 4; }\r\n      if (xc >= 0x4) { xc >>= 2; msb += 2; }\r\n      if (xc >= 0x2) msb += 1;  // No need to shift xc anymore\r\n\r\n      int256 result = msb - 64 << 64;\r\n      uint256 ux = uint256 (int256 (x)) << uint256 (127 - msb);\r\n      for (int256 bit = 0x8000000000000000; bit > 0; bit >>= 1) {\r\n        ux *= ux;\r\n        uint256 b = ux >> 255;\r\n        ux >>= 127 + b;\r\n        result += bit * int256 (b);\r\n      }\r\n\r\n      return int128 (result);\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Calculate natural logarithm of x.  Revert if x <= 0.\r\n   *\r\n   * @param x signed 64.64-bit fixed point number\r\n   * @return signed 64.64-bit fixed point number\r\n   */\r\n  function ln (int128 x) internal pure returns (int128) {\r\n    unchecked {\r\n      require (x > 0);\r\n\r\n      return int128 (int256 (\r\n          uint256 (int256 (log_2 (x))) * 0xB17217F7D1CF79ABC9E3B39803F2F6AF >> 128));\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Calculate binary exponent of x.  Revert on overflow.\r\n   *\r\n   * @param x signed 64.64-bit fixed point number\r\n   * @return signed 64.64-bit fixed point number\r\n   */\r\n  function exp_2 (int128 x) internal pure returns (int128) {\r\n    unchecked {\r\n      require (x < 0x400000000000000000); // Overflow\r\n\r\n      if (x < -0x400000000000000000) return 0; // Underflow\r\n\r\n      uint256 result = 0x80000000000000000000000000000000;\r\n\r\n      if (x & 0x8000000000000000 > 0)\r\n        result = result * 0x16A09E667F3BCC908B2FB1366EA957D3E >> 128;\r\n      if (x & 0x4000000000000000 > 0)\r\n        result = result * 0x1306FE0A31B7152DE8D5A46305C85EDEC >> 128;\r\n      if (x & 0x2000000000000000 > 0)\r\n        result = result * 0x1172B83C7D517ADCDF7C8C50EB14A791F >> 128;\r\n      if (x & 0x1000000000000000 > 0)\r\n        result = result * 0x10B5586CF9890F6298B92B71842A98363 >> 128;\r\n      if (x & 0x800000000000000 > 0)\r\n        result = result * 0x1059B0D31585743AE7C548EB68CA417FD >> 128;\r\n      if (x & 0x400000000000000 > 0)\r\n        result = result * 0x102C9A3E778060EE6F7CACA4F7A29BDE8 >> 128;\r\n      if (x & 0x200000000000000 > 0)\r\n        result = result * 0x10163DA9FB33356D84A66AE336DCDFA3F >> 128;\r\n      if (x & 0x100000000000000 > 0)\r\n        result = result * 0x100B1AFA5ABCBED6129AB13EC11DC9543 >> 128;\r\n      if (x & 0x80000000000000 > 0)\r\n        result = result * 0x10058C86DA1C09EA1FF19D294CF2F679B >> 128;\r\n      if (x & 0x40000000000000 > 0)\r\n        result = result * 0x1002C605E2E8CEC506D21BFC89A23A00F >> 128;\r\n      if (x & 0x20000000000000 > 0)\r\n        result = result * 0x100162F3904051FA128BCA9C55C31E5DF >> 128;\r\n      if (x & 0x10000000000000 > 0)\r\n        result = result * 0x1000B175EFFDC76BA38E31671CA939725 >> 128;\r\n      if (x & 0x8000000000000 > 0)\r\n        result = result * 0x100058BA01FB9F96D6CACD4B180917C3D >> 128;\r\n      if (x & 0x4000000000000 > 0)\r\n        result = result * 0x10002C5CC37DA9491D0985C348C68E7B3 >> 128;\r\n      if (x & 0x2000000000000 > 0)\r\n        result = result * 0x1000162E525EE054754457D5995292026 >> 128;\r\n      if (x & 0x1000000000000 > 0)\r\n        result = result * 0x10000B17255775C040618BF4A4ADE83FC >> 128;\r\n      if (x & 0x800000000000 > 0)\r\n        result = result * 0x1000058B91B5BC9AE2EED81E9B7D4CFAB >> 128;\r\n      if (x & 0x400000000000 > 0)\r\n        result = result * 0x100002C5C89D5EC6CA4D7C8ACC017B7C9 >> 128;\r\n      if (x & 0x200000000000 > 0)\r\n        result = result * 0x10000162E43F4F831060E02D839A9D16D >> 128;\r\n      if (x & 0x100000000000 > 0)\r\n        result = result * 0x100000B1721BCFC99D9F890EA06911763 >> 128;\r\n      if (x & 0x80000000000 > 0)\r\n        result = result * 0x10000058B90CF1E6D97F9CA14DBCC1628 >> 128;\r\n      if (x & 0x40000000000 > 0)\r\n        result = result * 0x1000002C5C863B73F016468F6BAC5CA2B >> 128;\r\n      if (x & 0x20000000000 > 0)\r\n        result = result * 0x100000162E430E5A18F6119E3C02282A5 >> 128;\r\n      if (x & 0x10000000000 > 0)\r\n        result = result * 0x1000000B1721835514B86E6D96EFD1BFE >> 128;\r\n      if (x & 0x8000000000 > 0)\r\n        result = result * 0x100000058B90C0B48C6BE5DF846C5B2EF >> 128;\r\n      if (x & 0x4000000000 > 0)\r\n        result = result * 0x10000002C5C8601CC6B9E94213C72737A >> 128;\r\n      if (x & 0x2000000000 > 0)\r\n        result = result * 0x1000000162E42FFF037DF38AA2B219F06 >> 128;\r\n      if (x & 0x1000000000 > 0)\r\n        result = result * 0x10000000B17217FBA9C739AA5819F44F9 >> 128;\r\n      if (x & 0x800000000 > 0)\r\n        result = result * 0x1000000058B90BFCDEE5ACD3C1CEDC823 >> 128;\r\n      if (x & 0x400000000 > 0)\r\n        result = result * 0x100000002C5C85FE31F35A6A30DA1BE50 >> 128;\r\n      if (x & 0x200000000 > 0)\r\n        result = result * 0x10000000162E42FF0999CE3541B9FFFCF >> 128;\r\n      if (x & 0x100000000 > 0)\r\n        result = result * 0x100000000B17217F80F4EF5AADDA45554 >> 128;\r\n      if (x & 0x80000000 > 0)\r\n        result = result * 0x10000000058B90BFBF8479BD5A81B51AD >> 128;\r\n      if (x & 0x40000000 > 0)\r\n        result = result * 0x1000000002C5C85FDF84BD62AE30A74CC >> 128;\r\n      if (x & 0x20000000 > 0)\r\n        result = result * 0x100000000162E42FEFB2FED257559BDAA >> 128;\r\n      if (x & 0x10000000 > 0)\r\n        result = result * 0x1000000000B17217F7D5A7716BBA4A9AE >> 128;\r\n      if (x & 0x8000000 > 0)\r\n        result = result * 0x100000000058B90BFBE9DDBAC5E109CCE >> 128;\r\n      if (x & 0x4000000 > 0)\r\n        result = result * 0x10000000002C5C85FDF4B15DE6F17EB0D >> 128;\r\n      if (x & 0x2000000 > 0)\r\n        result = result * 0x1000000000162E42FEFA494F1478FDE05 >> 128;\r\n      if (x & 0x1000000 > 0)\r\n        result = result * 0x10000000000B17217F7D20CF927C8E94C >> 128;\r\n      if (x & 0x800000 > 0)\r\n        result = result * 0x1000000000058B90BFBE8F71CB4E4B33D >> 128;\r\n      if (x & 0x400000 > 0)\r\n        result = result * 0x100000000002C5C85FDF477B662B26945 >> 128;\r\n      if (x & 0x200000 > 0)\r\n        result = result * 0x10000000000162E42FEFA3AE53369388C >> 128;\r\n      if (x & 0x100000 > 0)\r\n        result = result * 0x100000000000B17217F7D1D351A389D40 >> 128;\r\n      if (x & 0x80000 > 0)\r\n        result = result * 0x10000000000058B90BFBE8E8B2D3D4EDE >> 128;\r\n      if (x & 0x40000 > 0)\r\n        result = result * 0x1000000000002C5C85FDF4741BEA6E77E >> 128;\r\n      if (x & 0x20000 > 0)\r\n        result = result * 0x100000000000162E42FEFA39FE95583C2 >> 128;\r\n      if (x & 0x10000 > 0)\r\n        result = result * 0x1000000000000B17217F7D1CFB72B45E1 >> 128;\r\n      if (x & 0x8000 > 0)\r\n        result = result * 0x100000000000058B90BFBE8E7CC35C3F0 >> 128;\r\n      if (x & 0x4000 > 0)\r\n        result = result * 0x10000000000002C5C85FDF473E242EA38 >> 128;\r\n      if (x & 0x2000 > 0)\r\n        result = result * 0x1000000000000162E42FEFA39F02B772C >> 128;\r\n      if (x & 0x1000 > 0)\r\n        result = result * 0x10000000000000B17217F7D1CF7D83C1A >> 128;\r\n      if (x & 0x800 > 0)\r\n        result = result * 0x1000000000000058B90BFBE8E7BDCBE2E >> 128;\r\n      if (x & 0x400 > 0)\r\n        result = result * 0x100000000000002C5C85FDF473DEA871F >> 128;\r\n      if (x & 0x200 > 0)\r\n        result = result * 0x10000000000000162E42FEFA39EF44D91 >> 128;\r\n      if (x & 0x100 > 0)\r\n        result = result * 0x100000000000000B17217F7D1CF79E949 >> 128;\r\n      if (x & 0x80 > 0)\r\n        result = result * 0x10000000000000058B90BFBE8E7BCE544 >> 128;\r\n      if (x & 0x40 > 0)\r\n        result = result * 0x1000000000000002C5C85FDF473DE6ECA >> 128;\r\n      if (x & 0x20 > 0)\r\n        result = result * 0x100000000000000162E42FEFA39EF366F >> 128;\r\n      if (x & 0x10 > 0)\r\n        result = result * 0x1000000000000000B17217F7D1CF79AFA >> 128;\r\n      if (x & 0x8 > 0)\r\n        result = result * 0x100000000000000058B90BFBE8E7BCD6D >> 128;\r\n      if (x & 0x4 > 0)\r\n        result = result * 0x10000000000000002C5C85FDF473DE6B2 >> 128;\r\n      if (x & 0x2 > 0)\r\n        result = result * 0x1000000000000000162E42FEFA39EF358 >> 128;\r\n      if (x & 0x1 > 0)\r\n        result = result * 0x10000000000000000B17217F7D1CF79AB >> 128;\r\n\r\n      result >>= uint256 (int256 (63 - (x >> 64)));\r\n      require (result <= uint256 (int256 (MAX_64x64)));\r\n\r\n      return int128 (int256 (result));\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Calculate natural exponent of x.  Revert on overflow.\r\n   *\r\n   * @param x signed 64.64-bit fixed point number\r\n   * @return signed 64.64-bit fixed point number\r\n   */\r\n  function exp (int128 x) internal pure returns (int128) {\r\n    unchecked {\r\n      require (x < 0x400000000000000000); // Overflow\r\n\r\n      if (x < -0x400000000000000000) return 0; // Underflow\r\n\r\n      return exp_2 (\r\n          int128 (int256 (x) * 0x171547652B82FE1777D0FFDA0D23A7D12 >> 128));\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Calculate x / y rounding towards zero, where x and y are unsigned 256-bit\r\n   * integer numbers.  Revert on overflow or when y is zero.\r\n   *\r\n   * @param x unsigned 256-bit integer number\r\n   * @param y unsigned 256-bit integer number\r\n   * @return unsigned 64.64-bit fixed point number\r\n   */\r\n  function divuu (uint256 x, uint256 y) private pure returns (uint128) {\r\n    unchecked {\r\n      require (y != 0);\r\n\r\n      uint256 result;\r\n\r\n      if (x <= 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF)\r\n        result = (x << 64) / y;\r\n      else {\r\n        uint256 msb = 192;\r\n        uint256 xc = x >> 192;\r\n        if (xc >= 0x100000000) { xc >>= 32; msb += 32; }\r\n        if (xc >= 0x10000) { xc >>= 16; msb += 16; }\r\n        if (xc >= 0x100) { xc >>= 8; msb += 8; }\r\n        if (xc >= 0x10) { xc >>= 4; msb += 4; }\r\n        if (xc >= 0x4) { xc >>= 2; msb += 2; }\r\n        if (xc >= 0x2) msb += 1;  // No need to shift xc anymore\r\n\r\n        result = (x << 255 - msb) / ((y - 1 >> msb - 191) + 1);\r\n        require (result <= 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF);\r\n\r\n        uint256 hi = result * (y >> 128);\r\n        uint256 lo = result * (y & 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF);\r\n\r\n        uint256 xh = x >> 192;\r\n        uint256 xl = x << 64;\r\n\r\n        if (xl < lo) xh -= 1;\r\n        xl -= lo; // We rely on overflow behavior here\r\n        lo = hi << 128;\r\n        if (xl < lo) xh -= 1;\r\n        xl -= lo; // We rely on overflow behavior here\r\n\r\n        assert (xh == hi >> 128);\r\n\r\n        result += xl / y;\r\n      }\r\n\r\n      require (result <= 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF);\r\n      return uint128 (result);\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Calculate sqrt (x) rounding down, where x is unsigned 256-bit integer\r\n   * number.\r\n   *\r\n   * @param x unsigned 256-bit integer number\r\n   * @return unsigned 128-bit integer number\r\n   */\r\n  function sqrtu (uint256 x) private pure returns (uint128) {\r\n    unchecked {\r\n      if (x == 0) return 0;\r\n      else {\r\n        uint256 xx = x;\r\n        uint256 r = 1;\r\n        if (xx >= 0x100000000000000000000000000000000) { xx >>= 128; r <<= 64; }\r\n        if (xx >= 0x10000000000000000) { xx >>= 64; r <<= 32; }\r\n        if (xx >= 0x100000000) { xx >>= 32; r <<= 16; }\r\n        if (xx >= 0x10000) { xx >>= 16; r <<= 8; }\r\n        if (xx >= 0x100) { xx >>= 8; r <<= 4; }\r\n        if (xx >= 0x10) { xx >>= 4; r <<= 2; }\r\n        if (xx >= 0x8) { r <<= 1; }\r\n        r = (r + x / r) >> 1;\r\n        r = (r + x / r) >> 1;\r\n        r = (r + x / r) >> 1;\r\n        r = (r + x / r) >> 1;\r\n        r = (r + x / r) >> 1;\r\n        r = (r + x / r) >> 1;\r\n        r = (r + x / r) >> 1; // Seven iterations should be enough\r\n        uint256 r1 = x / r;\r\n        return uint128 (r < r1 ? r : r1);\r\n      }\r\n    }\r\n  }\r\n}\r\n\r\n\r\n// File contracts/interfaces/IHedgeFutures.sol\r\n\r\n// GPL-3.0-or-later\r\n\r\npragma solidity ^0.8.6;\r\n\r\n/// @dev å®ä¹æ°¸ç»­åçº¦äº¤ææ¥å£\r\ninterface IHedgeFutures {\r\n    \r\n    struct FutureView {\r\n        uint index;\r\n        address tokenAddress;\r\n        uint lever;\r\n        bool orientation;\r\n        \r\n        uint balance;\r\n        // åºåä»·æ ¼\r\n        uint basePrice;\r\n        // åºååºåå·\r\n        uint baseBlock;\r\n    }\r\n\r\n    /// @dev æ°æ°¸ç»­åçº¦äºä»¶\r\n    /// @param tokenAddress æ°¸ç»­åçº¦çæ çå°äº§ä»£å¸å°åï¼0è¡¨ç¤ºeth\r\n    /// @param lever æ æåæ°\r\n    /// @param orientation çæ¶¨/çè·ä¸¤ä¸ªæ¹åãtrueï¼çæ¶¨ï¼falseï¼çè·\r\n    /// @param index æ°¸ç»­åçº¦ç¼å·\r\n    event New(\r\n        address tokenAddress, \r\n        uint lever,\r\n        bool orientation,\r\n        uint index\r\n    );\r\n\r\n    /// @dev ä¹°å¥æ°¸ç»­åçº¦äºä»¶\r\n    /// @param index æ°¸ç»­åçº¦ç¼å·\r\n    /// @param dcuAmount æ¯ä»çdcuæ°é\r\n    event Buy(\r\n        uint index,\r\n        uint dcuAmount,\r\n        address owner\r\n    );\r\n\r\n    /// @dev ååºæ°¸ç»­åçº¦äºä»¶\r\n    /// @param index æ°¸ç»­åçº¦ç¼å·\r\n    /// @param amount ååºæ°é\r\n    /// @param owner ææè\r\n    /// @param value è·å¾çdcuæ°é\r\n    event Sell(\r\n        uint index,\r\n        uint amount,\r\n        address owner,\r\n        uint value\r\n    );\r\n\r\n    /// @dev æ¸ç®äºä»¶\r\n    /// @param index æ°¸ç»­åçº¦ç¼å·\r\n    /// @param addr æ¸ç®ç®æ è´¦å·æ°ç»\r\n    /// @param sender æ¸ç®åèµ·è´¦å·\r\n    /// @param reward æ¸ç®è·å¾çdcuæ°é\r\n    event Settle(\r\n        uint index,\r\n        address addr,\r\n        address sender,\r\n        uint reward\r\n    );\r\n    \r\n    /// @dev è¿åæå®ææå½åçä»·å¼\r\n    /// @param index ç®æ ææç´¢å¼å·\r\n    /// @param oraclePrice é¢è¨æºä»·æ ¼\r\n    /// @param addr ç®æ å°å\r\n    function balanceOf(uint index, uint oraclePrice, address addr) external view returns (uint);\r\n\r\n    /// @dev æ¥æ¾ç®æ è´¦æ·çåçº¦\r\n    /// @param start ä»ç»å®çåçº¦å°åå¯¹åºçç´¢å¼ååæ¥è¯¢ï¼ä¸åå«startå¯¹åºçè®°å½ï¼\r\n    /// @param count æå¤è¿åçè®°å½æ¡æ°\r\n    /// @param maxFindCount æå¤æ¥æ¾maxFindCountè®°å½\r\n    /// @param owner ç®æ è´¦æ·å°å\r\n    /// @return futureArray åçº¦ä¿¡æ¯åè¡¨\r\n    function find(\r\n        uint start, \r\n        uint count, \r\n        uint maxFindCount, \r\n        address owner\r\n    ) external view returns (FutureView[] memory futureArray);\r\n\r\n    /// @dev ååºåå²æ°¸ç»­åçº¦å°å\r\n    /// @param offset Skip previous (offset) records\r\n    /// @param count Return (count) records\r\n    /// @param order Order. 0 reverse order, non-0 positive order\r\n    /// @return futureArray List of price sheets\r\n    function list(uint offset, uint count, uint order) external view returns (FutureView[] memory futureArray);\r\n\r\n    /// @dev åå»ºæ°¸ç»­åçº¦\r\n    /// @param tokenAddress æ°¸ç»­åçº¦çæ çå°äº§ä»£å¸å°åï¼0è¡¨ç¤ºeth\r\n    /// @param lever æ æåæ°\r\n    /// @param orientation çæ¶¨/çè·ä¸¤ä¸ªæ¹åãtrueï¼çæ¶¨ï¼falseï¼çè·\r\n    function create(\r\n        address tokenAddress, \r\n        uint lever,\r\n        bool orientation\r\n    ) external;\r\n\r\n    /// @dev è·åå·²ç»å¼éçæ°¸ç»­åçº¦æ°é\r\n    /// @return å·²ç»å¼éçæ°¸ç»­åçº¦æ°é\r\n    function getFutureCount() external view returns (uint);\r\n\r\n    /// @dev è·åæ°¸ç»­åçº¦ä¿¡æ¯\r\n    /// @param tokenAddress æ°¸ç»­åçº¦çæ çå°äº§ä»£å¸å°åï¼0è¡¨ç¤ºeth\r\n    /// @param lever æ æåæ°\r\n    /// @param orientation çæ¶¨/çè·ä¸¤ä¸ªæ¹åãtrueï¼çæ¶¨ï¼falseï¼çè·\r\n    /// @return æ°¸ç»­åçº¦å°å\r\n    function getFutureInfo(\r\n        address tokenAddress, \r\n        uint lever,\r\n        bool orientation\r\n    ) external view returns (FutureView memory);\r\n\r\n    /// @dev ä¹°å¥æ°¸ç»­åçº¦\r\n    /// @param tokenAddress æ°¸ç»­åçº¦çæ çå°äº§ä»£å¸å°åï¼0è¡¨ç¤ºeth\r\n    /// @param lever æ æåæ°\r\n    /// @param orientation çæ¶¨/çè·ä¸¤ä¸ªæ¹åãtrueï¼çæ¶¨ï¼falseï¼çè·\r\n    /// @param dcuAmount æ¯ä»çdcuæ°é\r\n    function buy(\r\n        address tokenAddress,\r\n        uint lever,\r\n        bool orientation,\r\n        uint dcuAmount\r\n    ) external payable;\r\n\r\n    /// @dev ä¹°å¥æ°¸ç»­åçº¦\r\n    /// @param index æ°¸ç»­åçº¦ç¼å·\r\n    /// @param dcuAmount æ¯ä»çdcuæ°é\r\n    function buyDirect(uint index, uint dcuAmount) external payable;\r\n\r\n    /// @dev ååºæ°¸ç»­åçº¦\r\n    /// @param index æ°¸ç»­åçº¦ç¼å·\r\n    /// @param amount ååºæ°é\r\n    function sell(uint index, uint amount) external payable;\r\n\r\n    /// @dev æ¸ç®\r\n    /// @param index æ°¸ç»­åçº¦ç¼å·\r\n    /// @param addresses æ¸ç®ç®æ è´¦å·æ°ç»\r\n    function settle(uint index, address[] calldata addresses) external payable;\r\n\r\n    /// @dev K value is calculated by revised volatility\r\n    /// @param sigmaSQ The square of the volatility (18 decimal places).\r\n    /// @param p0 Last price (number of tokens equivalent to 1 ETH)\r\n    /// @param bn0 Block number of the last price\r\n    /// @param p Latest price (number of tokens equivalent to 1 ETH)\r\n    /// @param bn The block number when (ETH, TOKEN) price takes into effective\r\n    function calcRevisedK(uint sigmaSQ, uint p0, uint bn0, uint p, uint bn) external view returns (uint k);\r\n}\r\n\r\n\r\n// File contracts/interfaces/INestPriceFacade.sol\r\n\r\n// GPL-3.0-or-later\r\n\r\npragma solidity ^0.8.6;\r\n\r\n/// @dev This interface defines the methods for price call entry\r\ninterface INestPriceFacade {\r\n    \r\n    /// @dev Find the price at block number\r\n    /// @param tokenAddress Destination token address\r\n    /// @param height Destination block number\r\n    /// @param paybackAddress As the charging fee may change, it is suggested that the caller pay more fees, \r\n    /// and the excess fees will be returned through this address\r\n    /// @return blockNumber The block number of price\r\n    /// @return price The token price. (1eth equivalent to (price) token)\r\n    function findPrice(\r\n        address tokenAddress, \r\n        uint height, \r\n        address paybackAddress\r\n    ) external payable returns (uint blockNumber, uint price);\r\n\r\n    /// @dev Get the latest trigger price\r\n    /// @param tokenAddress Destination token address\r\n    /// @param paybackAddress As the charging fee may change, it is suggested that the caller pay more fees, \r\n    /// and the excess fees will be returned through this address\r\n    /// @return blockNumber The block number of price\r\n    /// @return price The token price. (1eth equivalent to (price) token)\r\n    function triggeredPrice(\r\n        address tokenAddress, \r\n        address paybackAddress\r\n    ) external payable returns (uint blockNumber, uint price);\r\n\r\n    // /// @dev Price call entry configuration structure\r\n    // struct Config {\r\n\r\n    //     // Single query feeï¼0.0001 ether, DIMI_ETHER). 100\r\n    //     uint16 singleFee;\r\n\r\n    //     // Double query feeï¼0.0001 ether, DIMI_ETHER). 100\r\n    //     uint16 doubleFee;\r\n\r\n    //     // The normal state flag of the call address. 0\r\n    //     uint8 normalFlag;\r\n    // }\r\n\r\n    // /// @dev Modify configuration\r\n    // /// @param config Configuration object\r\n    // function setConfig(Config calldata config) external;\r\n\r\n    // /// @dev Get configuration\r\n    // /// @return Configuration object\r\n    // function getConfig() external view returns (Config memory);\r\n\r\n    // /// @dev Set the address flag. Only the address flag equals to config.normalFlag can the price be called\r\n    // /// @param addr Destination address\r\n    // /// @param flag Address flag\r\n    // function setAddressFlag(address addr, uint flag) external;\r\n\r\n    // /// @dev Get the flag. Only the address flag equals to config.normalFlag can the price be called\r\n    // /// @param addr Destination address\r\n    // /// @return Address flag\r\n    // function getAddressFlag(address addr) external view returns(uint);\r\n\r\n    // /// @dev Set INestQuery implementation contract address for token\r\n    // /// @param tokenAddress Destination token address\r\n    // /// @param nestQueryAddress INestQuery implementation contract address, 0 means delete\r\n    // function setNestQuery(address tokenAddress, address nestQueryAddress) external;\r\n\r\n    // /// @dev Get INestQuery implementation contract address for token\r\n    // /// @param tokenAddress Destination token address\r\n    // /// @return INestQuery implementation contract address, 0 means use default\r\n    // function getNestQuery(address tokenAddress) external view returns (address);\r\n\r\n    // /// @dev Get cached fee in fee channel\r\n    // /// @param tokenAddress Destination token address\r\n    // /// @return Cached fee in fee channel\r\n    // function getTokenFee(address tokenAddress) external view returns (uint);\r\n\r\n    // /// @dev Settle fee for charge fee channel\r\n    // /// @param tokenAddress tokenAddress of charge fee channel\r\n    // function settle(address tokenAddress) external;\r\n    \r\n    // /// @dev Get the latest trigger price\r\n    // /// @param tokenAddress Destination token address\r\n    // /// @param paybackAddress As the charging fee may change, it is suggested that the caller pay more fees, \r\n    // /// and the excess fees will be returned through this address\r\n    // /// @return blockNumber The block number of price\r\n    // /// @return price The token price. (1eth equivalent to (price) token)\r\n    // function triggeredPrice(\r\n    //     address tokenAddress, \r\n    //     address paybackAddress\r\n    // ) external payable returns (uint blockNumber, uint price);\r\n\r\n    /// @dev Get the full information of latest trigger price\r\n    /// @param tokenAddress Destination token address\r\n    /// @param paybackAddress As the charging fee may change, it is suggested that the caller pay more fees, \r\n    /// and the excess fees will be returned through this address\r\n    /// @return blockNumber The block number of price\r\n    /// @return price The token price. (1eth equivalent to (price) token)\r\n    /// @return avgPrice Average price\r\n    /// @return sigmaSQ The square of the volatility (18 decimal places). The current implementation \r\n    /// assumes that the volatility cannot exceed 1. Correspondingly, when the return value is equal to \r\n    /// 999999999999996447, it means that the volatility has exceeded the range that can be expressed\r\n    function triggeredPriceInfo(\r\n        address tokenAddress, \r\n        address paybackAddress\r\n    ) external payable returns (uint blockNumber, uint price, uint avgPrice, uint sigmaSQ);\r\n\r\n    // /// @dev Find the price at block number\r\n    // /// @param tokenAddress Destination token address\r\n    // /// @param height Destination block number\r\n    // /// @param paybackAddress As the charging fee may change, it is suggested that the caller pay more fees, \r\n    // /// and the excess fees will be returned through this address\r\n    // /// @return blockNumber The block number of price\r\n    // /// @return price The token price. (1eth equivalent to (price) token)\r\n    // function findPrice(\r\n    //     address tokenAddress, \r\n    //     uint height, \r\n    //     address paybackAddress\r\n    // ) external payable returns (uint blockNumber, uint price);\r\n\r\n    // /// @dev Get the latest effective price\r\n    // /// @param tokenAddress Destination token address\r\n    // /// @param paybackAddress As the charging fee may change, it is suggested that the caller pay more fees, \r\n    // /// and the excess fees will be returned through this address\r\n    // /// @return blockNumber The block number of price\r\n    // /// @return price The token price. (1eth equivalent to (price) token)\r\n    // function latestPrice(\r\n    //     address tokenAddress, \r\n    //     address paybackAddress\r\n    // ) external payable returns (uint blockNumber, uint price);\r\n\r\n    // /// @dev Get the last (num) effective price\r\n    // /// @param tokenAddress Destination token address\r\n    // /// @param count The number of prices that want to return\r\n    // /// @param paybackAddress As the charging fee may change, it is suggested that the caller pay more fees, \r\n    // /// and the excess fees will be returned through this address\r\n    // /// @return An array which length is num * 2, each two element expresses one price like blockNumberï½price\r\n    // function lastPriceList(\r\n    //     address tokenAddress, \r\n    //     uint count, \r\n    //     address paybackAddress\r\n    // ) external payable returns (uint[] memory);\r\n\r\n    // /// @dev Returns the results of latestPrice() and triggeredPriceInfo()\r\n    // /// @param tokenAddress Destination token address\r\n    // /// @param paybackAddress As the charging fee may change, it is suggested that the caller pay more fees, \r\n    // /// and the excess fees will be returned through this address\r\n    // /// @return latestPriceBlockNumber The block number of latest price\r\n    // /// @return latestPriceValue The token latest price. (1eth equivalent to (price) token)\r\n    // /// @return triggeredPriceBlockNumber The block number of triggered price\r\n    // /// @return triggeredPriceValue The token triggered price. (1eth equivalent to (price) token)\r\n    // /// @return triggeredAvgPrice Average price\r\n    // /// @return triggeredSigmaSQ The square of the volatility (18 decimal places). The current implementation \r\n    // /// assumes that the volatility cannot exceed 1. Correspondingly, when the return value is equal to \r\n    // /// 999999999999996447, it means that the volatility has exceeded the range that can be expressed\r\n    // function latestPriceAndTriggeredPriceInfo(address tokenAddress, address paybackAddress) \r\n    // external \r\n    // payable \r\n    // returns (\r\n    //     uint latestPriceBlockNumber, \r\n    //     uint latestPriceValue,\r\n    //     uint triggeredPriceBlockNumber,\r\n    //     uint triggeredPriceValue,\r\n    //     uint triggeredAvgPrice,\r\n    //     uint triggeredSigmaSQ\r\n    // );\r\n\r\n    /// @dev Returns lastPriceList and triggered price info\r\n    /// @param tokenAddress Destination token address\r\n    /// @param count The number of prices that want to return\r\n    /// @param paybackAddress As the charging fee may change, it is suggested that the caller pay more fees, \r\n    /// and the excess fees will be returned through this address\r\n    /// @return prices An array which length is num * 2, each two element expresses one price like blockNumberï½price\r\n    /// @return triggeredPriceBlockNumber The block number of triggered price\r\n    /// @return triggeredPriceValue The token triggered price. (1eth equivalent to (price) token)\r\n    /// @return triggeredAvgPrice Average price\r\n    /// @return triggeredSigmaSQ The square of the volatility (18 decimal places). The current implementation \r\n    /// assumes that the volatility cannot exceed 1. Correspondingly, when the return value is equal to \r\n    /// 999999999999996447, it means that the volatility has exceeded the range that can be expressed\r\n    function lastPriceListAndTriggeredPriceInfo(\r\n        address tokenAddress, \r\n        uint count, \r\n        address paybackAddress\r\n    ) external payable \r\n    returns (\r\n        uint[] memory prices,\r\n        uint triggeredPriceBlockNumber,\r\n        uint triggeredPriceValue,\r\n        uint triggeredAvgPrice,\r\n        uint triggeredSigmaSQ\r\n    );\r\n\r\n    // /// @dev Get the latest trigger price. (token and ntoken)\r\n    // /// @param tokenAddress Destination token address\r\n    // /// @param paybackAddress As the charging fee may change, it is suggested that the caller pay more fees, \r\n    // /// and the excess fees will be returned through this address\r\n    // /// @return blockNumber The block number of price\r\n    // /// @return price The token price. (1eth equivalent to (price) token)\r\n    // /// @return ntokenBlockNumber The block number of ntoken price\r\n    // /// @return ntokenPrice The ntoken price. (1eth equivalent to (price) ntoken)\r\n    // function triggeredPrice2(\r\n    //     address tokenAddress, \r\n    //     address paybackAddress\r\n    // ) external payable returns (\r\n    //     uint blockNumber, \r\n    //     uint price, \r\n    //     uint ntokenBlockNumber, \r\n    //     uint ntokenPrice\r\n    // );\r\n\r\n    // /// @dev Get the full information of latest trigger price. (token and ntoken)\r\n    // /// @param tokenAddress Destination token address\r\n    // /// @param paybackAddress As the charging fee may change, it is suggested that the caller pay more fees, \r\n    // /// and the excess fees will be returned through this address\r\n    // /// @return blockNumber The block number of price\r\n    // /// @return price The token price. (1eth equivalent to (price) token)\r\n    // /// @return avgPrice Average price\r\n    // /// @return sigmaSQ The square of the volatility (18 decimal places). The current implementation assumes that \r\n    // /// the volatility cannot exceed 1. Correspondingly, when the return value is equal to 999999999999996447, \r\n    // /// it means that the volatility has exceeded the range that can be expressed\r\n    // /// @return ntokenBlockNumber The block number of ntoken price\r\n    // /// @return ntokenPrice The ntoken price. (1eth equivalent to (price) ntoken)\r\n    // /// @return ntokenAvgPrice Average price of ntoken\r\n    // /// @return ntokenSigmaSQ The square of the volatility (18 decimal places). The current implementation \r\n    // /// assumes that the volatility cannot exceed 1. Correspondingly, when the return value is equal to \r\n    // /// 999999999999996447, it means that the volatility has exceeded the range that can be expressed\r\n    // function triggeredPriceInfo2(\r\n    //     address tokenAddress, \r\n    //     address paybackAddress\r\n    // ) external payable returns (\r\n    //     uint blockNumber, \r\n    //     uint price, \r\n    //     uint avgPrice, \r\n    //     uint sigmaSQ, \r\n    //     uint ntokenBlockNumber, \r\n    //     uint ntokenPrice, \r\n    //     uint ntokenAvgPrice, \r\n    //     uint ntokenSigmaSQ\r\n    // );\r\n\r\n    // /// @dev Get the latest effective price. (token and ntoken)\r\n    // /// @param tokenAddress Destination token address\r\n    // /// @param paybackAddress As the charging fee may change, it is suggested that the caller pay more fees, \r\n    // /// and the excess fees will be returned through this address\r\n    // /// @return blockNumber The block number of price\r\n    // /// @return price The token price. (1eth equivalent to (price) token)\r\n    // /// @return ntokenBlockNumber The block number of ntoken price\r\n    // /// @return ntokenPrice The ntoken price. (1eth equivalent to (price) ntoken)\r\n    // function latestPrice2(\r\n    //     address tokenAddress, \r\n    //     address paybackAddress\r\n    // ) external payable returns (\r\n    //     uint blockNumber, \r\n    //     uint price, \r\n    //     uint ntokenBlockNumber, \r\n    //     uint ntokenPrice\r\n    // );\r\n}\r\n\r\n\r\n// File contracts/interfaces/IHedgeMapping.sol\r\n\r\n// GPL-3.0-or-later\r\n\r\npragma solidity ^0.8.6;\r\n\r\n/// @dev The interface defines methods for Hedge builtin contract address mapping\r\ninterface IHedgeMapping {\r\n\r\n    /// @dev Set the built-in contract address of the system\r\n    /// @param dcuToken Address of dcu token contract\r\n    /// @param hedgeDAO IHedgeDAO implementation contract address\r\n    /// @param hedgeOptions IHedgeOptions implementation contract address\r\n    /// @param hedgeFutures IHedgeFutures implementation contract address\r\n    /// @param hedgeVaultForStaking IHedgeVaultForStaking implementation contract address\r\n    /// @param nestPriceFacade INestPriceFacade implementation contract address\r\n    function setBuiltinAddress(\r\n        address dcuToken,\r\n        address hedgeDAO,\r\n        address hedgeOptions,\r\n        address hedgeFutures,\r\n        address hedgeVaultForStaking,\r\n        address nestPriceFacade\r\n    ) external;\r\n\r\n    /// @dev Get the built-in contract address of the system\r\n    /// @return dcuToken Address of dcu token contract\r\n    /// @return hedgeDAO IHedgeDAO implementation contract address\r\n    /// @return hedgeOptions IHedgeOptions implementation contract address\r\n    /// @return hedgeFutures IHedgeFutures implementation contract address\r\n    /// @return hedgeVaultForStaking IHedgeVaultForStaking implementation contract address\r\n    /// @return nestPriceFacade INestPriceFacade implementation contract address\r\n    function getBuiltinAddress() external view returns (\r\n        address dcuToken,\r\n        address hedgeDAO,\r\n        address hedgeOptions,\r\n        address hedgeFutures,\r\n        address hedgeVaultForStaking,\r\n        address nestPriceFacade\r\n    );\r\n\r\n    /// @dev Get address of dcu token contract\r\n    /// @return Address of dcu token contract\r\n    function getDCUTokenAddress() external view returns (address);\r\n\r\n    /// @dev Get IHedgeDAO implementation contract address\r\n    /// @return IHedgeDAO implementation contract address\r\n    function getHedgeDAOAddress() external view returns (address);\r\n\r\n    /// @dev Get IHedgeOptions implementation contract address\r\n    /// @return IHedgeOptions implementation contract address\r\n    function getHedgeOptionsAddress() external view returns (address);\r\n\r\n    /// @dev Get IHedgeFutures implementation contract address\r\n    /// @return IHedgeFutures implementation contract address\r\n    function getHedgeFuturesAddress() external view returns (address);\r\n\r\n    /// @dev Get IHedgeVaultForStaking implementation contract address\r\n    /// @return IHedgeVaultForStaking implementation contract address\r\n    function getHedgeVaultForStakingAddress() external view returns (address);\r\n\r\n    /// @dev Get INestPriceFacade implementation contract address\r\n    /// @return INestPriceFacade implementation contract address\r\n    function getNestPriceFacade() external view returns (address);\r\n\r\n    /// @dev Registered address. The address registered here is the address accepted by Hedge system\r\n    /// @param key The key\r\n    /// @param addr Destination address. 0 means to delete the registration information\r\n    function registerAddress(string calldata key, address addr) external;\r\n\r\n    /// @dev Get registered address\r\n    /// @param key The key\r\n    /// @return Destination address. 0 means empty\r\n    function checkAddress(string calldata key) external view returns (address);\r\n}\r\n\r\n\r\n// File contracts/interfaces/IHedgeGovernance.sol\r\n\r\n// GPL-3.0-or-later\r\n\r\npragma solidity ^0.8.6;\r\n/// @dev This interface defines the governance methods\r\ninterface IHedgeGovernance is IHedgeMapping {\r\n\r\n    /// @dev Set governance authority\r\n    /// @param addr Destination address\r\n    /// @param flag Weight. 0 means to delete the governance permission of the target address. Weight is not \r\n    ///        implemented in the current system, only the difference between authorized and unauthorized. \r\n    ///        Here, a uint96 is used to represent the weight, which is only reserved for expansion\r\n    function setGovernance(address addr, uint flag) external;\r\n\r\n    /// @dev Get governance rights\r\n    /// @param addr Destination address\r\n    /// @return Weight. 0 means to delete the governance permission of the target address. Weight is not \r\n    ///        implemented in the current system, only the difference between authorized and unauthorized. \r\n    ///        Here, a uint96 is used to represent the weight, which is only reserved for expansion\r\n    function getGovernance(address addr) external view returns (uint);\r\n\r\n    /// @dev Check whether the target address has governance rights for the given target\r\n    /// @param addr Destination address\r\n    /// @param flag Permission weight. The permission of the target address must be greater than this weight \r\n    /// to pass the check\r\n    /// @return True indicates permission\r\n    function checkGovernance(address addr, uint flag) external view returns (bool);\r\n}\r\n\r\n\r\n// File contracts/interfaces/IHedgeDAO.sol\r\n\r\n// GPL-3.0-or-later\r\n\r\npragma solidity ^0.8.6;\r\n\r\n/// @dev This interface defines the DAO methods\r\ninterface IHedgeDAO {\r\n\r\n    /// @dev Application Flag Changed event\r\n    /// @param addr DAO application contract address\r\n    /// @param flag Authorization flag, 1 means authorization, 0 means cancel authorization\r\n    event ApplicationChanged(address addr, uint flag);\r\n    \r\n    /// @dev Set DAO application\r\n    /// @param addr DAO application contract address\r\n    /// @param flag Authorization flag, 1 means authorization, 0 means cancel authorization\r\n    function setApplication(address addr, uint flag) external;\r\n\r\n    /// @dev Check DAO application flag\r\n    /// @param addr DAO application contract address\r\n    /// @return Authorization flag, 1 means authorization, 0 means cancel authorization\r\n    function checkApplication(address addr) external view returns (uint);\r\n\r\n    /// @dev Add reward\r\n    /// @param pool Destination pool\r\n    function addETHReward(address pool) external payable;\r\n\r\n    /// @dev The function returns eth rewards of specified pool\r\n    /// @param pool Destination pool\r\n    function totalETHRewards(address pool) external view returns (uint);\r\n\r\n    /// @dev Settlement\r\n    /// @param pool Destination pool. Indicates which pool to pay with\r\n    /// @param tokenAddress Token address of receiving funds (0 means ETH)\r\n    /// @param to Address to receive\r\n    /// @param value Amount to receive\r\n    function settle(address pool, address tokenAddress, address to, uint value) external payable;\r\n}\r\n\r\n\r\n// File contracts/HedgeBase.sol\r\n\r\n// GPL-3.0-or-later\r\n\r\npragma solidity ^0.8.6;\r\n/// @dev Base contract of Hedge\r\ncontract HedgeBase {\r\n\r\n    /// @dev IHedgeGovernance implementation contract address\r\n    address public _governance;\r\n\r\n    /// @dev To support open-zeppelin/upgrades\r\n    /// @param governance IHedgeGovernance implementation contract address\r\n    function initialize(address governance) public virtual {\r\n        require(_governance == address(0), \"Hedge:!initialize\");\r\n        _governance = governance;\r\n    }\r\n\r\n    /// @dev Rewritten in the implementation contract, for load other contract addresses. Call \r\n    ///      super.update(newGovernance) when overriding, and override method without onlyGovernance\r\n    /// @param newGovernance IHedgeGovernance implementation contract address\r\n    function update(address newGovernance) public virtual {\r\n\r\n        address governance = _governance;\r\n        require(governance == msg.sender || IHedgeGovernance(governance).checkGovernance(msg.sender, 0), \"Hedge:!gov\");\r\n        _governance = newGovernance;\r\n    }\r\n\r\n    /// @dev Migrate funds from current contract to HedgeDAO\r\n    /// @param tokenAddress Destination token address.(0 means eth)\r\n    /// @param value Migrate amount\r\n    function migrate(address tokenAddress, uint value) external onlyGovernance {\r\n\r\n        address to = IHedgeGovernance(_governance).getHedgeDAOAddress();\r\n        if (tokenAddress == address(0)) {\r\n            IHedgeDAO(to).addETHReward { value: value } (address(0));\r\n        } else {\r\n            TransferHelper.safeTransfer(tokenAddress, to, value);\r\n        }\r\n    }\r\n\r\n    //---------modifier------------\r\n\r\n    modifier onlyGovernance() {\r\n        require(IHedgeGovernance(_governance).checkGovernance(msg.sender, 0), \"Hedge:!gov\");\r\n        _;\r\n    }\r\n\r\n    modifier noContract() {\r\n        require(msg.sender == tx.origin, \"Hedge:!contract\");\r\n        _;\r\n    }\r\n}\r\n\r\n\r\n// File contracts/HedgeFrequentlyUsed.sol\r\n\r\n// GPL-3.0-or-later\r\n\r\npragma solidity ^0.8.6;\r\n/// @dev Base contract of Hedge\r\ncontract HedgeFrequentlyUsed is HedgeBase {\r\n\r\n    // Address of DCU contract\r\n    address constant DCU_TOKEN_ADDRESS = 0xf56c6eCE0C0d6Fbb9A53282C0DF71dBFaFA933eF;\r\n\r\n    // Address of NestPriceFacade contract\r\n    address constant NEST_PRICE_FACADE_ADDRESS = 0xB5D2890c061c321A5B6A4a4254bb1522425BAF0A;\r\n    \r\n    // USDTä»£å¸å°å\r\n    address constant USDT_TOKEN_ADDRESS = 0xdAC17F958D2ee523a2206206994597C13D831ec7;\r\n\r\n    // USDTä»£å¸çåºæ°\r\n    uint constant USDT_BASE = 1000000;\r\n}\r\n\r\n\r\n// File @openzeppelin/contracts/token/ERC20/extensions/IERC20Metadata.sol@v4.2.0\r\n\r\n// MIT\r\n\r\npragma solidity ^0.8.0;\r\n\r\n/**\r\n * @dev Interface for the optional metadata functions from the ERC20 standard.\r\n *\r\n * _Available since v4.1._\r\n */\r\ninterface IERC20Metadata is IERC20 {\r\n    /**\r\n     * @dev Returns the name of the token.\r\n     */\r\n    function name() external view returns (string memory);\r\n\r\n    /**\r\n     * @dev Returns the symbol of the token.\r\n     */\r\n    function symbol() external view returns (string memory);\r\n\r\n    /**\r\n     * @dev Returns the decimals places of the token.\r\n     */\r\n    function decimals() external view returns (uint8);\r\n}\r\n\r\n\r\n// File @openzeppelin/contracts/utils/Context.sol@v4.2.0\r\n\r\n// MIT\r\n\r\npragma solidity ^0.8.0;\r\n\r\n/*\r\n * @dev Provides information about the current execution context, including the\r\n * sender of the transaction and its data. While these are generally available\r\n * via msg.sender and msg.data, they should not be accessed in such a direct\r\n * manner, since when dealing with meta-transactions the account sending and\r\n * paying for execution may not be the actual sender (as far as an application\r\n * is concerned).\r\n *\r\n * This contract is only required for intermediate, library-like contracts.\r\n */\r\nabstract contract Context {\r\n    function _msgSender() internal view virtual returns (address) {\r\n        return msg.sender;\r\n    }\r\n\r\n    function _msgData() internal view virtual returns (bytes calldata) {\r\n        return msg.data;\r\n    }\r\n}\r\n\r\n\r\n// File @openzeppelin/contracts/token/ERC20/ERC20.sol@v4.2.0\r\n\r\n// MIT\r\n\r\npragma solidity ^0.8.0;\r\n\r\n\r\n\r\n/**\r\n * @dev Implementation of the {IERC20} interface.\r\n *\r\n * This implementation is agnostic to the way tokens are created. This means\r\n * that a supply mechanism has to be added in a derived contract using {_mint}.\r\n * For a generic mechanism see {ERC20PresetMinterPauser}.\r\n *\r\n * TIP: For a detailed writeup see our guide\r\n * https://forum.zeppelin.solutions/t/how-to-implement-erc20-supply-mechanisms/226[How\r\n * to implement supply mechanisms].\r\n *\r\n * We have followed general OpenZeppelin guidelines: functions revert instead\r\n * of returning `false` on failure. This behavior is nonetheless conventional\r\n * and does not conflict with the expectations of ERC20 applications.\r\n *\r\n * Additionally, an {Approval} event is emitted on calls to {transferFrom}.\r\n * This allows applications to reconstruct the allowance for all accounts just\r\n * by listening to said events. Other implementations of the EIP may not emit\r\n * these events, as it isn't required by the specification.\r\n *\r\n * Finally, the non-standard {decreaseAllowance} and {increaseAllowance}\r\n * functions have been added to mitigate the well-known issues around setting\r\n * allowances. See {IERC20-approve}.\r\n */\r\ncontract ERC20 is Context, IERC20, IERC20Metadata {\r\n    mapping(address => uint256) private _balances;\r\n\r\n    mapping(address => mapping(address => uint256)) private _allowances;\r\n\r\n    uint256 private _totalSupply;\r\n\r\n    string private _name;\r\n    string private _symbol;\r\n\r\n    /**\r\n     * @dev Sets the values for {name} and {symbol}.\r\n     *\r\n     * The default value of {decimals} is 18. To select a different value for\r\n     * {decimals} you should overload it.\r\n     *\r\n     * All two of these values are immutable: they can only be set once during\r\n     * construction.\r\n     */\r\n    constructor(string memory name_, string memory symbol_) {\r\n        _name = name_;\r\n        _symbol = symbol_;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the name of the token.\r\n     */\r\n    function name() public view virtual override returns (string memory) {\r\n        return _name;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the symbol of the token, usually a shorter version of the\r\n     * name.\r\n     */\r\n    function symbol() public view virtual override returns (string memory) {\r\n        return _symbol;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the number of decimals used to get its user representation.\r\n     * For example, if `decimals` equals `2`, a balance of `505` tokens should\r\n     * be displayed to a user as `5,05` (`505 / 10 ** 2`).\r\n     *\r\n     * Tokens usually opt for a value of 18, imitating the relationship between\r\n     * Ether and Wei. This is the value {ERC20} uses, unless this function is\r\n     * overridden;\r\n     *\r\n     * NOTE: This information is only used for _display_ purposes: it in\r\n     * no way affects any of the arithmetic of the contract, including\r\n     * {IERC20-balanceOf} and {IERC20-transfer}.\r\n     */\r\n    function decimals() public view virtual override returns (uint8) {\r\n        return 18;\r\n    }\r\n\r\n    /**\r\n     * @dev See {IERC20-totalSupply}.\r\n     */\r\n    function totalSupply() public view virtual override returns (uint256) {\r\n        return _totalSupply;\r\n    }\r\n\r\n    /**\r\n     * @dev See {IERC20-balanceOf}.\r\n     */\r\n    function balanceOf(address account) public view virtual override returns (uint256) {\r\n        return _balances[account];\r\n    }\r\n\r\n    /**\r\n     * @dev See {IERC20-transfer}.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - `recipient` cannot be the zero address.\r\n     * - the caller must have a balance of at least `amount`.\r\n     */\r\n    function transfer(address recipient, uint256 amount) public virtual override returns (bool) {\r\n        _transfer(_msgSender(), recipient, amount);\r\n        return true;\r\n    }\r\n\r\n    /**\r\n     * @dev See {IERC20-allowance}.\r\n     */\r\n    function allowance(address owner, address spender) public view virtual override returns (uint256) {\r\n        return _allowances[owner][spender];\r\n    }\r\n\r\n    /**\r\n     * @dev See {IERC20-approve}.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - `spender` cannot be the zero address.\r\n     */\r\n    function approve(address spender, uint256 amount) public virtual override returns (bool) {\r\n        _approve(_msgSender(), spender, amount);\r\n        return true;\r\n    }\r\n\r\n    /**\r\n     * @dev See {IERC20-transferFrom}.\r\n     *\r\n     * Emits an {Approval} event indicating the updated allowance. This is not\r\n     * required by the EIP. See the note at the beginning of {ERC20}.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - `sender` and `recipient` cannot be the zero address.\r\n     * - `sender` must have a balance of at least `amount`.\r\n     * - the caller must have allowance for ``sender``'s tokens of at least\r\n     * `amount`.\r\n     */\r\n    function transferFrom(\r\n        address sender,\r\n        address recipient,\r\n        uint256 amount\r\n    ) public virtual override returns (bool) {\r\n        _transfer(sender, recipient, amount);\r\n\r\n        uint256 currentAllowance = _allowances[sender][_msgSender()];\r\n        require(currentAllowance >= amount, \"ERC20: transfer amount exceeds allowance\");\r\n        unchecked {\r\n            _approve(sender, _msgSender(), currentAllowance - amount);\r\n        }\r\n\r\n        return true;\r\n    }\r\n\r\n    /**\r\n     * @dev Atomically increases the allowance granted to `spender` by the caller.\r\n     *\r\n     * This is an alternative to {approve} that can be used as a mitigation for\r\n     * problems described in {IERC20-approve}.\r\n     *\r\n     * Emits an {Approval} event indicating the updated allowance.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - `spender` cannot be the zero address.\r\n     */\r\n    function increaseAllowance(address spender, uint256 addedValue) public virtual returns (bool) {\r\n        _approve(_msgSender(), spender, _allowances[_msgSender()][spender] + addedValue);\r\n        return true;\r\n    }\r\n\r\n    /**\r\n     * @dev Atomically decreases the allowance granted to `spender` by the caller.\r\n     *\r\n     * This is an alternative to {approve} that can be used as a mitigation for\r\n     * problems described in {IERC20-approve}.\r\n     *\r\n     * Emits an {Approval} event indicating the updated allowance.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - `spender` cannot be the zero address.\r\n     * - `spender` must have allowance for the caller of at least\r\n     * `subtractedValue`.\r\n     */\r\n    function decreaseAllowance(address spender, uint256 subtractedValue) public virtual returns (bool) {\r\n        uint256 currentAllowance = _allowances[_msgSender()][spender];\r\n        require(currentAllowance >= subtractedValue, \"ERC20: decreased allowance below zero\");\r\n        unchecked {\r\n            _approve(_msgSender(), spender, currentAllowance - subtractedValue);\r\n        }\r\n\r\n        return true;\r\n    }\r\n\r\n    /**\r\n     * @dev Moves `amount` of tokens from `sender` to `recipient`.\r\n     *\r\n     * This internal function is equivalent to {transfer}, and can be used to\r\n     * e.g. implement automatic token fees, slashing mechanisms, etc.\r\n     *\r\n     * Emits a {Transfer} event.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - `sender` cannot be the zero address.\r\n     * - `recipient` cannot be the zero address.\r\n     * - `sender` must have a balance of at least `amount`.\r\n     */\r\n    function _transfer(\r\n        address sender,\r\n        address recipient,\r\n        uint256 amount\r\n    ) internal virtual {\r\n        require(sender != address(0), \"ERC20: transfer from the zero address\");\r\n        require(recipient != address(0), \"ERC20: transfer to the zero address\");\r\n\r\n        _beforeTokenTransfer(sender, recipient, amount);\r\n\r\n        uint256 senderBalance = _balances[sender];\r\n        require(senderBalance >= amount, \"ERC20: transfer amount exceeds balance\");\r\n        unchecked {\r\n            _balances[sender] = senderBalance - amount;\r\n        }\r\n        _balances[recipient] += amount;\r\n\r\n        emit Transfer(sender, recipient, amount);\r\n\r\n        _afterTokenTransfer(sender, recipient, amount);\r\n    }\r\n\r\n    /** @dev Creates `amount` tokens and assigns them to `account`, increasing\r\n     * the total supply.\r\n     *\r\n     * Emits a {Transfer} event with `from` set to the zero address.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - `account` cannot be the zero address.\r\n     */\r\n    function _mint(address account, uint256 amount) internal virtual {\r\n        require(account != address(0), \"ERC20: mint to the zero address\");\r\n\r\n        _beforeTokenTransfer(address(0), account, amount);\r\n\r\n        _totalSupply += amount;\r\n        _balances[account] += amount;\r\n        emit Transfer(address(0), account, amount);\r\n\r\n        _afterTokenTransfer(address(0), account, amount);\r\n    }\r\n\r\n    /**\r\n     * @dev Destroys `amount` tokens from `account`, reducing the\r\n     * total supply.\r\n     *\r\n     * Emits a {Transfer} event with `to` set to the zero address.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - `account` cannot be the zero address.\r\n     * - `account` must have at least `amount` tokens.\r\n     */\r\n    function _burn(address account, uint256 amount) internal virtual {\r\n        require(account != address(0), \"ERC20: burn from the zero address\");\r\n\r\n        _beforeTokenTransfer(account, address(0), amount);\r\n\r\n        uint256 accountBalance = _balances[account];\r\n        require(accountBalance >= amount, \"ERC20: burn amount exceeds balance\");\r\n        unchecked {\r\n            _balances[account] = accountBalance - amount;\r\n        }\r\n        _totalSupply -= amount;\r\n\r\n        emit Transfer(account, address(0), amount);\r\n\r\n        _afterTokenTransfer(account, address(0), amount);\r\n    }\r\n\r\n    /**\r\n     * @dev Sets `amount` as the allowance of `spender` over the `owner` s tokens.\r\n     *\r\n     * This internal function is equivalent to `approve`, and can be used to\r\n     * e.g. set automatic allowances for certain subsystems, etc.\r\n     *\r\n     * Emits an {Approval} event.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - `owner` cannot be the zero address.\r\n     * - `spender` cannot be the zero address.\r\n     */\r\n    function _approve(\r\n        address owner,\r\n        address spender,\r\n        uint256 amount\r\n    ) internal virtual {\r\n        require(owner != address(0), \"ERC20: approve from the zero address\");\r\n        require(spender != address(0), \"ERC20: approve to the zero address\");\r\n\r\n        _allowances[owner][spender] = amount;\r\n        emit Approval(owner, spender, amount);\r\n    }\r\n\r\n    /**\r\n     * @dev Hook that is called before any transfer of tokens. This includes\r\n     * minting and burning.\r\n     *\r\n     * Calling conditions:\r\n     *\r\n     * - when `from` and `to` are both non-zero, `amount` of ``from``'s tokens\r\n     * will be transferred to `to`.\r\n     * - when `from` is zero, `amount` tokens will be minted for `to`.\r\n     * - when `to` is zero, `amount` of ``from``'s tokens will be burned.\r\n     * - `from` and `to` are never both zero.\r\n     *\r\n     * To learn more about hooks, head to xref:ROOT:extending-contracts.adoc#using-hooks[Using Hooks].\r\n     */\r\n    function _beforeTokenTransfer(\r\n        address from,\r\n        address to,\r\n        uint256 amount\r\n    ) internal virtual {}\r\n\r\n    /**\r\n     * @dev Hook that is called after any transfer of tokens. This includes\r\n     * minting and burning.\r\n     *\r\n     * Calling conditions:\r\n     *\r\n     * - when `from` and `to` are both non-zero, `amount` of ``from``'s tokens\r\n     * has been transferred to `to`.\r\n     * - when `from` is zero, `amount` tokens have been minted for `to`.\r\n     * - when `to` is zero, `amount` of ``from``'s tokens have been burned.\r\n     * - `from` and `to` are never both zero.\r\n     *\r\n     * To learn more about hooks, head to xref:ROOT:extending-contracts.adoc#using-hooks[Using Hooks].\r\n     */\r\n    function _afterTokenTransfer(\r\n        address from,\r\n        address to,\r\n        uint256 amount\r\n    ) internal virtual {}\r\n}\r\n\r\n\r\n// File contracts/DCU.sol\r\n\r\n// GPL-3.0-or-later\r\n\r\npragma solidity ^0.8.6;\r\n/// @dev DCUä»£å¸\r\ncontract DCU is HedgeBase, ERC20(\"Decentralized Currency Unit\", \"DCU\") {\r\n\r\n    // ä¿å­æç¿æéå°å\r\n    mapping(address=>uint) _minters;\r\n\r\n    constructor() {\r\n    }\r\n\r\n    modifier onlyMinter {\r\n        require(_minters[msg.sender] == 1, \"DCU:not minter\");\r\n        _;\r\n    }\r\n\r\n    /// @dev è®¾ç½®æç¿æé\r\n    /// @param account ç®æ è´¦å·\r\n    /// @param flag æç¿æéæ è®°ï¼åªæ1è¡¨ç¤ºå¯ä»¥æç¿\r\n    function setMinter(address account, uint flag) external onlyGovernance {\r\n        _minters[account] = flag;\r\n    }\r\n\r\n    /// @dev æ£æ¥æç¿æé\r\n    /// @param account ç®æ è´¦å·\r\n    /// @return flag æç¿æéæ è®°ï¼åªæ1è¡¨ç¤ºå¯ä»¥æç¿\r\n    function checkMinter(address account) external view returns (uint) {\r\n        return _minters[account];\r\n    }\r\n\r\n    /// @dev é¸å¸\r\n    /// @param to æ¥åå°å\r\n    /// @param value é¸å¸æ°é\r\n    function mint(address to, uint value) external onlyMinter {\r\n        _mint(to, value);\r\n    }\r\n\r\n    /// @dev éæ¯\r\n    /// @param from ç®æ å°å\r\n    /// @param value éæ¯æ°é\r\n    function burn(address from, uint value) external onlyMinter {\r\n        _burn(from, value);\r\n    }\r\n}\r\n\r\n\r\n// File contracts/HedgeFutures.sol\r\n\r\n// GPL-3.0-or-later\r\n\r\npragma solidity ^0.8.6;\r\n/// @dev æ°¸ç»­åçº¦äº¤æ\r\ncontract HedgeFutures is HedgeFrequentlyUsed, IHedgeFutures {\r\n\r\n    /// @dev ç¨æ·è´¦æ¬\r\n    struct Account {\r\n        // è´¦æ¬-ä½é¢\r\n        uint128 balance;\r\n        // åºåä»·æ ¼\r\n        uint64 basePrice;\r\n        // åºååºåå·\r\n        uint32 baseBlock;\r\n    }\r\n\r\n    /// @dev æ°¸ç»­åçº¦ä¿¡æ¯\r\n    struct FutureInfo {\r\n        // ç®æ ä»£å¸å°å\r\n        address tokenAddress; \r\n        // æ æåæ°\r\n        uint32 lever;\r\n        // çæ¶¨:true | çè·:false\r\n        bool orientation;\r\n        \r\n        // è´¦å·ä¿¡æ¯\r\n        mapping(address=>Account) accounts;\r\n    }\r\n\r\n    // æ¼ç§»ç³»æ°ï¼64ä½äºè¿å¶å°æ°ãå¹´å80%\r\n    uint constant MIU = 467938556917;\r\n    \r\n    // æå°ä½é¢æ°éï¼ä½é¢å°äºæ­¤å¼ä¼è¢«æ¸ç®\r\n    uint constant MIN_VALUE = 10 ether;\r\n\r\n    // ä¹°å¥æ°¸ç»­åçº¦åå¶ä»äº¤æä¹é´æå°çé´éåºåæ°\r\n    uint constant MIN_PERIOD = 100;\r\n\r\n    // åºåæ¶é´\r\n    uint constant BLOCK_TIME = 14;\r\n\r\n    // æ°¸ç»­åçº¦æ å°\r\n    mapping(uint=>uint) _futureMapping;\r\n\r\n    // ç¼å­ä»£å¸çåºæ°å¼\r\n    mapping(address=>uint) _bases;\r\n\r\n    // æ°¸ç»­åçº¦æ°ç»\r\n    FutureInfo[] _futures;\r\n\r\n    constructor() {\r\n    }\r\n\r\n    /// @dev To support open-zeppelin/upgrades\r\n    /// @param governance IHedgeGovernance implementation contract address\r\n    function initialize(address governance) public override {\r\n        super.initialize(governance);\r\n        _futures.push();\r\n    }\r\n\r\n    /// @dev è¿åæå®ææå½åçä»·å¼\r\n    /// @param index ç®æ ææç´¢å¼å·\r\n    /// @param oraclePrice é¢è¨æºä»·æ ¼\r\n    /// @param addr ç®æ å°å\r\n    function balanceOf(uint index, uint oraclePrice, address addr) external view override returns (uint) {\r\n        FutureInfo storage fi = _futures[index];\r\n        Account memory account = fi.accounts[addr];\r\n        return _balanceOf(\r\n            uint(account.balance), \r\n            _decodeFloat(account.basePrice), \r\n            uint(account.baseBlock),\r\n            oraclePrice, \r\n            fi.orientation, \r\n            uint(fi.lever)\r\n        );\r\n    }\r\n\r\n    /// @dev æ¥æ¾ç®æ è´¦æ·çåçº¦\r\n    /// @param start ä»ç»å®çåçº¦å°åå¯¹åºçç´¢å¼ååæ¥è¯¢ï¼ä¸åå«startå¯¹åºçè®°å½ï¼\r\n    /// @param count æå¤è¿åçè®°å½æ¡æ°\r\n    /// @param maxFindCount æå¤æ¥æ¾maxFindCountè®°å½\r\n    /// @param owner ç®æ è´¦æ·å°å\r\n    /// @return futureArray åçº¦ä¿¡æ¯åè¡¨\r\n    function find(\r\n        uint start, \r\n        uint count, \r\n        uint maxFindCount, \r\n        address owner\r\n    ) external view override returns (FutureView[] memory futureArray) {\r\n        \r\n        futureArray = new FutureView[](count);\r\n        \r\n        // è®¡ç®æ¥æ¾åºé´iåend\r\n        FutureInfo[] storage futures = _futures;\r\n        uint i = futures.length;\r\n        uint end = 0;\r\n        if (start > 0) {\r\n            i = start;\r\n        }\r\n        if (i > maxFindCount) {\r\n            end = i - maxFindCount;\r\n        }\r\n        \r\n        // å¾ªç¯æ¥æ¾ï¼å°ç¬¦åæ¡ä»¶çè®°å½åå¥ç¼å²åº\r\n        for (uint index = 0; index < count && i > end;) {\r\n            FutureInfo storage fi = futures[--i];\r\n            if (uint(fi.accounts[owner].balance) > 0) {\r\n                futureArray[index++] = _toFutureView(fi, i, owner);\r\n            }\r\n        }\r\n    }\r\n\r\n    /// @dev ååºåå²æ°¸ç»­åçº¦å°å\r\n    /// @param offset Skip previous (offset) records\r\n    /// @param count Return (count) records\r\n    /// @param order Order. 0 reverse order, non-0 positive order\r\n    /// @return futureArray List of price sheets\r\n    function list(\r\n        uint offset, \r\n        uint count, \r\n        uint order\r\n    ) external view override returns (FutureView[] memory futureArray) {\r\n\r\n        // å è½½ä»£å¸æ°ç»\r\n        FutureInfo[] storage futures = _futures;\r\n        // åå»ºç»ææ°ç»\r\n        futureArray = new FutureView[](count);\r\n        uint length = futures.length;\r\n        uint i = 0;\r\n\r\n        // ååº\r\n        if (order == 0) {\r\n            uint index = length - offset;\r\n            uint end = index > count ? index - count : 0;\r\n            while (index > end) {\r\n                FutureInfo storage fi = futures[--index];\r\n                futureArray[i++] = _toFutureView(fi, index, msg.sender);\r\n            }\r\n        } \r\n        // æ­£åº\r\n        else {\r\n            uint index = offset;\r\n            uint end = index + count;\r\n            if (end > length) {\r\n                end = length;\r\n            }\r\n            while (index < end) {\r\n                futureArray[i++] = _toFutureView(futures[index], index, msg.sender);\r\n                ++index;\r\n            }\r\n        }\r\n    }\r\n\r\n    /// @dev åå»ºæ°¸ç»­åçº¦\r\n    /// @param tokenAddress æ°¸ç»­åçº¦çæ çå°äº§ä»£å¸å°åï¼0è¡¨ç¤ºeth\r\n    /// @param lever æ æåæ°\r\n    /// @param orientation çæ¶¨/çè·ä¸¤ä¸ªæ¹åãtrueï¼çæ¶¨ï¼falseï¼çè·\r\n    function create(\r\n        address tokenAddress, \r\n        uint lever,\r\n        bool orientation\r\n    ) external override onlyGovernance {\r\n\r\n        // æ£æ¥æ°¸ç»­åçº¦æ¯å¦å·²ç»å­å¨\r\n        uint key = _getKey(tokenAddress, lever, orientation);\r\n        uint index = _futureMapping[key];\r\n        require(index == 0, \"HF:exists\");\r\n\r\n        // åå»ºæ°¸ç»­åçº¦\r\n        index = _futures.length;\r\n        FutureInfo storage fi = _futures.push();\r\n        fi.tokenAddress = tokenAddress;\r\n        fi.lever = uint32(lever);\r\n        fi.orientation = orientation;\r\n        _futureMapping[key] = index;\r\n\r\n        // åå»ºæ°¸ç»­åçº¦äºä»¶\r\n        emit New(tokenAddress, lever, orientation, index);\r\n    }\r\n\r\n    /// @dev è·åå·²ç»å¼éçæ°¸ç»­åçº¦æ°é\r\n    /// @return å·²ç»å¼éçæ°¸ç»­åçº¦æ°é\r\n    function getFutureCount() external view override returns (uint) {\r\n        return _futures.length;\r\n    }\r\n\r\n    /// @dev è·åæ°¸ç»­åçº¦ä¿¡æ¯\r\n    /// @param tokenAddress æ°¸ç»­åçº¦çæ çå°äº§ä»£å¸å°åï¼0è¡¨ç¤ºeth\r\n    /// @param lever æ æåæ°\r\n    /// @param orientation çæ¶¨/çè·ä¸¤ä¸ªæ¹åãtrueï¼çæ¶¨ï¼falseï¼çè·\r\n    /// @return æ°¸ç»­åçº¦å°å\r\n    function getFutureInfo(\r\n        address tokenAddress, \r\n        uint lever,\r\n        bool orientation\r\n    ) external view override returns (FutureView memory) {\r\n        uint index = _futureMapping[_getKey(tokenAddress, lever, orientation)];\r\n        return _toFutureView(_futures[index], index, msg.sender);\r\n    }\r\n\r\n    /// @dev ä¹°å¥æ°¸ç»­åçº¦\r\n    /// @param tokenAddress æ°¸ç»­åçº¦çæ çå°äº§ä»£å¸å°åï¼0è¡¨ç¤ºeth\r\n    /// @param lever æ æåæ°\r\n    /// @param orientation çæ¶¨/çè·ä¸¤ä¸ªæ¹åãtrueï¼çæ¶¨ï¼falseï¼çè·\r\n    /// @param dcuAmount æ¯ä»çdcuæ°é\r\n    function buy(\r\n        address tokenAddress,\r\n        uint lever,\r\n        bool orientation,\r\n        uint dcuAmount\r\n    ) external payable override {\r\n        uint index = _futureMapping[_getKey(tokenAddress, lever, orientation)];\r\n        require(index != 0, \"HF:not exist\");\r\n        _buy(_futures[index], index, dcuAmount, tokenAddress, orientation);\r\n    }\r\n\r\n    /// @dev ä¹°å¥æ°¸ç»­åçº¦\r\n    /// @param index æ°¸ç»­åçº¦ç¼å·\r\n    /// @param dcuAmount æ¯ä»çdcuæ°é\r\n    function buyDirect(uint index, uint dcuAmount) public payable override {\r\n        require(index != 0, \"HF:not exist\");\r\n        FutureInfo storage fi = _futures[index];\r\n        _buy(fi, index, dcuAmount, fi.tokenAddress, fi.orientation);\r\n    }\r\n\r\n    /// @dev ååºæ°¸ç»­åçº¦\r\n    /// @param index æ°¸ç»­åçº¦ç¼å·\r\n    /// @param amount ååºæ°é\r\n    function sell(uint index, uint amount) external payable override {\r\n\r\n        // 1. éæ¯ç¨æ·çæ°¸ç»­åçº¦\r\n        require(index != 0, \"HF:not exist\");\r\n        FutureInfo storage fi = _futures[index];\r\n        bool orientation = fi.orientation;\r\n\r\n        // çæ¶¨çæ¶åï¼åå§ä»·æ ¼ä¹ä»¥(1+k)ï¼ååºä»·æ ¼é¤ä»¥(1+k)\r\n        // çè·çæ¶åï¼åå§ä»·æ ¼é¤ä»¥(1+k)ï¼ååºä»·æ ¼ä¹ä»¥(1+k)\r\n        // åå¹¶çæ¶åï¼s0ç¨è®°å½çä»·æ ¼ï¼s1ç¨kä¿®æ­£ç\r\n        uint oraclePrice = _queryPrice(fi.tokenAddress, !orientation, msg.sender);\r\n\r\n        // æ´æ°ç®æ è´¦å·ä¿¡æ¯\r\n        Account memory account = fi.accounts[msg.sender];\r\n\r\n        account.balance -= _toUInt128(amount);\r\n        fi.accounts[msg.sender] = account;\r\n\r\n        // 2. ç»ç¨æ·åådcu\r\n        uint value = _balanceOf(\r\n            amount, \r\n            _decodeFloat(account.basePrice), \r\n            uint(account.baseBlock),\r\n            oraclePrice, \r\n            orientation, \r\n            uint(fi.lever)\r\n        );\r\n        DCU(DCU_TOKEN_ADDRESS).mint(msg.sender, value);\r\n\r\n        // ååºäºä»¶\r\n        emit Sell(index, amount, msg.sender, value);\r\n    }\r\n\r\n    /// @dev æ¸ç®\r\n    /// @param index æ°¸ç»­åçº¦ç¼å·\r\n    /// @param addresses æ¸ç®ç®æ è´¦å·æ°ç»\r\n    function settle(uint index, address[] calldata addresses) external payable override {\r\n\r\n        // 1. éæ¯ç¨æ·çæ°¸ç»­åçº¦\r\n        require(index != 0, \"HF:not exist\");\r\n        FutureInfo storage fi = _futures[index];\r\n        uint lever = uint(fi.lever);\r\n\r\n        if (lever > 1) {\r\n\r\n            bool orientation = fi.orientation;\r\n            // çæ¶¨çæ¶åï¼åå§ä»·æ ¼ä¹ä»¥(1+k)ï¼ååºä»·æ ¼é¤ä»¥(1+k)\r\n            // çè·çæ¶åï¼åå§ä»·æ ¼é¤ä»¥(1+k)ï¼ååºä»·æ ¼ä¹ä»¥(1+k)\r\n            // åå¹¶çæ¶åï¼s0ç¨è®°å½çä»·æ ¼ï¼s1ç¨kä¿®æ­£ç\r\n            uint oraclePrice = _queryPrice(fi.tokenAddress, !orientation, msg.sender);\r\n\r\n            uint reward = 0;\r\n            mapping(address=>Account) storage accounts = fi.accounts;\r\n            for (uint i = addresses.length; i > 0;) {\r\n                address acc = addresses[--i];\r\n\r\n                // æ´æ°ç®æ è´¦å·ä¿¡æ¯\r\n                Account memory account = accounts[acc];\r\n                uint balance = _balanceOf(\r\n                    uint(account.balance), \r\n                    _decodeFloat(account.basePrice), \r\n                    uint(account.baseBlock),\r\n                    oraclePrice, \r\n                    orientation, \r\n                    lever\r\n                );\r\n\r\n                // æ æåæ°å¤§äº1ï¼å¹¶ä¸ä½é¢å°äºæå°é¢åº¦æ¶ï¼å¯ä»¥æ¸ç®\r\n                // æ¹æå½è´¦æ·åå¼ä½äºMax(ä¿è¯é * 2%*g, 10) æ¶ï¼æ¸ç®\r\n                uint minValue = uint(account.balance) * lever / 50;\r\n                if (balance < (minValue < MIN_VALUE ? MIN_VALUE : minValue)) {\r\n                    \r\n                    accounts[acc] = Account(uint128(0), uint64(0), uint32(0));\r\n\r\n                    //emit Transfer(acc, address(0), balance);\r\n\r\n                    reward += balance;\r\n\r\n                    emit Settle(index, acc, msg.sender, balance);\r\n                }\r\n            }\r\n\r\n            // 2. ç»ç¨æ·åådcu\r\n            if (reward > 0) {\r\n                DCU(DCU_TOKEN_ADDRESS).mint(msg.sender, reward);\r\n            }\r\n        } else {\r\n            if (msg.value > 0) {\r\n                payable(msg.sender).transfer(msg.value);\r\n            }\r\n        }\r\n    }\r\n\r\n    // æ ¹æ®æ æä¿¡æ¯è®¡ç®ç´¢å¼key\r\n    function _getKey(\r\n        address tokenAddress, \r\n        uint lever,\r\n        bool orientation\r\n    ) private pure returns (uint) {\r\n        //return keccak256(abi.encodePacked(tokenAddress, lever, orientation));\r\n        require(lever < 0x100000000, \"HF:lever to large\");\r\n        return (uint(uint160(tokenAddress)) << 96) | (lever << 8) | (orientation ? 1 : 0);\r\n    }\r\n\r\n    // ä¹°å¥æ°¸ç»­åçº¦\r\n    function _buy(FutureInfo storage fi, uint index, uint dcuAmount, address tokenAddress, bool orientation) private {\r\n\r\n        require(dcuAmount >= 100 ether, \"HF:at least 100 dcu\");\r\n\r\n        // 1. éæ¯ç¨æ·çdcu\r\n        DCU(DCU_TOKEN_ADDRESS).burn(msg.sender, dcuAmount);\r\n\r\n        // 2. ç»ç¨æ·ååæ°¸ç»­åçº¦\r\n        // çæ¶¨çæ¶åï¼åå§ä»·æ ¼ä¹ä»¥(1+k)ï¼ååºä»·æ ¼é¤ä»¥(1+k)\r\n        // çè·çæ¶åï¼åå§ä»·æ ¼é¤ä»¥(1+k)ï¼ååºä»·æ ¼ä¹ä»¥(1+k)\r\n        // åå¹¶çæ¶åï¼s0ç¨è®°å½çä»·æ ¼ï¼s1ç¨kä¿®æ­£ç\r\n        uint oraclePrice = _queryPrice(tokenAddress, orientation, msg.sender);\r\n\r\n        Account memory account = fi.accounts[msg.sender];\r\n        uint basePrice = _decodeFloat(account.basePrice);\r\n        uint balance = uint(account.balance);\r\n        uint newPrice = oraclePrice;\r\n        if (uint(account.baseBlock) > 0) {\r\n            newPrice = (balance + dcuAmount) * oraclePrice * basePrice / (\r\n                basePrice * dcuAmount + (oraclePrice * balance << 64) / _expMiuT(uint(account.baseBlock))\r\n            );\r\n        }\r\n        \r\n        // æ´æ°æ¥æ¶è´¦å·ä¿¡æ¯\r\n        account.balance = _toUInt128(balance + dcuAmount);\r\n        account.basePrice = _encodeFloat(newPrice);\r\n        account.baseBlock = uint32(block.number);\r\n        \r\n        fi.accounts[msg.sender] = account;\r\n\r\n        // ä¹°å¥äºä»¶\r\n        emit Buy(index, dcuAmount, msg.sender);\r\n    }\r\n\r\n    // æ¥è¯¢é¢è¨æºä»·æ ¼\r\n    function _queryPrice(address tokenAddress, bool enlarge, address payback) private returns (uint oraclePrice) {\r\n        require(tokenAddress == address(0), \"HF:only support eth/usdt\");\r\n\r\n        // è·åusdtç¸å¯¹äºethçä»·æ ¼\r\n        (\r\n            uint[] memory prices,\r\n            ,//uint triggeredPriceBlockNumber,\r\n            ,//uint triggeredPriceValue,\r\n            ,//uint triggeredAvgPrice,\r\n            uint triggeredSigmaSQ\r\n        ) = INestPriceFacade(NEST_PRICE_FACADE_ADDRESS).lastPriceListAndTriggeredPriceInfo {\r\n            value: msg.value\r\n        } (USDT_TOKEN_ADDRESS, 2, payback);\r\n        \r\n        // å°tokenä»·æ ¼è½¬åä¸ºä»¥usdtä¸ºåä½è®¡ç®çä»·æ ¼\r\n        oraclePrice = prices[1];\r\n        uint k = calcRevisedK(triggeredSigmaSQ, prices[3], prices[2], oraclePrice, prices[0]);\r\n\r\n        // çæ¶¨çæ¶åï¼åå§ä»·æ ¼ä¹ä»¥(1+k)ï¼ååºä»·æ ¼é¤ä»¥(1+k)\r\n        // çè·çæ¶åï¼åå§ä»·æ ¼é¤ä»¥(1+k)ï¼ååºä»·æ ¼ä¹ä»¥(1+k)\r\n        // åå¹¶çæ¶åï¼s0ç¨è®°å½çä»·æ ¼ï¼s1ç¨kä¿®æ­£ç\r\n        if (enlarge) {\r\n            oraclePrice = oraclePrice * (1 ether + k) / 1 ether;\r\n        } else {\r\n            oraclePrice = oraclePrice * 1 ether / (1 ether + k);\r\n        }\r\n    }\r\n\r\n    /// @dev K value is calculated by revised volatility\r\n    /// @param sigmaSQ The square of the volatility (18 decimal places).\r\n    /// @param p0 Last price (number of tokens equivalent to 1 ETH)\r\n    /// @param bn0 Block number of the last price\r\n    /// @param p Latest price (number of tokens equivalent to 1 ETH)\r\n    /// @param bn The block number when (ETH, TOKEN) price takes into effective\r\n    function calcRevisedK(uint sigmaSQ, uint p0, uint bn0, uint p, uint bn) public view override returns (uint k) {\r\n        k = _calcK(_calcRevisedSigmaSQ(sigmaSQ, p0, bn0, p, bn), bn);\r\n    }\r\n\r\n    // Calculate the corrected volatility\r\n    function _calcRevisedSigmaSQ(\r\n        uint sigmaSQ,\r\n        uint p0, \r\n        uint bn0, \r\n        uint p, \r\n        uint bn\r\n    ) private pure returns (uint revisedSigmaSQ) {\r\n        // sq2 = sq1 * 0.9 + rq2 * dt * 0.1\r\n        // sq1 = (sq2 - rq2 * dt * 0.1) / 0.9\r\n        // 1. \r\n        // rq2 <= 4 * dt * sq1\r\n        // sqt = sq2\r\n        // 2. rq2 > 4 * dt * sq1 && rq2 <= 9 * dt * sq1\r\n        // sqt = (sq1 + rq2 * dt) / 2\r\n        // 3. rq2 > 9 * dt * sq1\r\n        // sqt = sq1 * 0.2 + rq2 * dt * 0.8\r\n\r\n        uint rq2 = p * 1 ether / p0;\r\n        if (rq2 > 1 ether) {\r\n            rq2 -= 1 ether;\r\n        } else {\r\n            rq2 = 1 ether - rq2;\r\n        }\r\n        rq2 = rq2 * rq2 / 1 ether;\r\n\r\n        uint dt = (bn - bn0) * BLOCK_TIME;\r\n        uint sq1 = 0;\r\n        uint rq2dt = rq2 / dt;\r\n        if (sigmaSQ * 10 > rq2dt) {\r\n            sq1 = (sigmaSQ * 10 - rq2dt) / 9;\r\n        }\r\n\r\n        uint dds = dt * dt * dt * sq1;\r\n        if (rq2 <= (dds << 2)) {\r\n            revisedSigmaSQ = sigmaSQ;\r\n        } else if (rq2 <= 9 * dds) {\r\n            revisedSigmaSQ = (sq1 + rq2dt) >> 1;\r\n        } else {\r\n            revisedSigmaSQ = (sq1 + (rq2dt << 2)) / 5;\r\n        }\r\n    }\r\n\r\n    /// @dev Calc K value\r\n    /// @param sigmaSQ The square of the volatility (18 decimal places).\r\n    /// @param bn The block number when (ETH, TOKEN) price takes into effective\r\n    /// @return k The K value\r\n    function _calcK(uint sigmaSQ, uint bn) private view returns (uint k) {\r\n        k = 0.002 ether + (_sqrt((block.number - bn) * BLOCK_TIME * sigmaSQ * 1 ether) >> 1);\r\n    }\r\n\r\n    function _sqrt(uint256 x) private pure returns (uint256) {\r\n        unchecked {\r\n            if (x == 0) return 0;\r\n            else {\r\n                uint256 xx = x;\r\n                uint256 r = 1;\r\n                if (xx >= 0x100000000000000000000000000000000) { xx >>= 128; r <<= 64; }\r\n                if (xx >= 0x10000000000000000) { xx >>= 64; r <<= 32; }\r\n                if (xx >= 0x100000000) { xx >>= 32; r <<= 16; }\r\n                if (xx >= 0x10000) { xx >>= 16; r <<= 8; }\r\n                if (xx >= 0x100) { xx >>= 8; r <<= 4; }\r\n                if (xx >= 0x10) { xx >>= 4; r <<= 2; }\r\n                if (xx >= 0x8) { r <<= 1; }\r\n                r = (r + x / r) >> 1;\r\n                r = (r + x / r) >> 1;\r\n                r = (r + x / r) >> 1;\r\n                r = (r + x / r) >> 1;\r\n                r = (r + x / r) >> 1;\r\n                r = (r + x / r) >> 1;\r\n                r = (r + x / r) >> 1; // Seven iterations should be enough\r\n                uint256 r1 = x / r;\r\n                return (r < r1 ? r : r1);\r\n            }\r\n        }\r\n    }\r\n\r\n    /// @dev Encode the uint value as a floating-point representation in the form of fraction * 16 ^ exponent\r\n    /// @param value Destination uint value\r\n    /// @return float format\r\n    function _encodeFloat(uint value) private pure returns (uint64) {\r\n\r\n        uint exponent = 0; \r\n        while (value > 0x3FFFFFFFFFFFFFF) {\r\n            value >>= 4;\r\n            ++exponent;\r\n        }\r\n        return uint64((value << 6) | exponent);\r\n    }\r\n\r\n    /// @dev Decode the floating-point representation of fraction * 16 ^ exponent to uint\r\n    /// @param floatValue fraction value\r\n    /// @return decode format\r\n    function _decodeFloat(uint64 floatValue) private pure returns (uint) {\r\n        return (uint(floatValue) >> 6) << ((uint(floatValue) & 0x3F) << 2);\r\n    }\r\n\r\n    // å°uintè½¬åä¸ºuint128ï¼ææªæ­æ£æ¥\r\n    function _toUInt128(uint value) private pure returns (uint128) {\r\n        require(value < 0x100000000000000000000000000000000);\r\n        return uint128(value);\r\n    }\r\n\r\n    // å°uintè½¬åä¸ºint128\r\n    function _toInt128(uint v) private pure returns (int128) {\r\n        require(v < 0x80000000000000000000000000000000, \"FEO:can't convert to int128\");\r\n        return int128(int(v));\r\n    }\r\n\r\n    // å°int128è½¬åä¸ºuint\r\n    function _toUInt(int128 v) private pure returns (uint) {\r\n        require(v >= 0, \"FEO:can't convert to uint\");\r\n        return uint(int(v));\r\n    }\r\n    \r\n    // æ ¹æ®æ°ä»·æ ¼è®¡ç®è´¦æ·ä½é¢\r\n    function _balanceOf(\r\n        uint balance,\r\n        uint basePrice,\r\n        uint baseBlock,\r\n        uint oraclePrice, \r\n        bool ORIENTATION, \r\n        uint LEVER\r\n    ) private view returns (uint) {\r\n\r\n        if (balance > 0) {\r\n            //uint price = _decodeFloat(account.price);\r\n\r\n            uint left;\r\n            uint right;\r\n            // çæ¶¨\r\n            if (ORIENTATION) {\r\n                left = balance + (balance * oraclePrice * LEVER << 64) / basePrice / _expMiuT(baseBlock);\r\n                right = balance * LEVER;\r\n            } \r\n            // çè·\r\n            else {\r\n                left = balance * (1 + LEVER);\r\n                right = (balance * oraclePrice * LEVER << 64) / basePrice / _expMiuT(baseBlock);\r\n            }\r\n\r\n            if (left > right) {\r\n                balance = left - right;\r\n            } else {\r\n                balance = 0;\r\n            }\r\n        }\r\n\r\n        return balance;\r\n    }\r\n\r\n    // è®¡ç® e^Î¼T\r\n    function _expMiuT(uint baseBlock) private view returns (uint) {\r\n        return _toUInt(ABDKMath64x64.exp(_toInt128(MIU * (block.number - baseBlock) * BLOCK_TIME)));\r\n    }\r\n\r\n    // è½¬æ¢æ°¸ç»­åçº¦ä¿¡æ¯\r\n    function _toFutureView(FutureInfo storage fi, uint index, address owner) private view returns (FutureView memory) {\r\n        Account memory account = fi.accounts[owner];\r\n        return FutureView(\r\n            index,\r\n            fi.tokenAddress,\r\n            uint(fi.lever),\r\n            fi.orientation,\r\n            uint(account.balance),\r\n            _decodeFloat(account.basePrice),\r\n            uint(account.baseBlock)\r\n        );\r\n    }\r\n}","ABI":"[{\"inputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"index\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"dcuAmount\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"}],\"name\":\"Buy\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"tokenAddress\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"lever\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"bool\",\"name\":\"orientation\",\"type\":\"bool\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"index\",\"type\":\"uint256\"}],\"name\":\"New\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"index\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Sell\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"index\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"addr\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"reward\",\"type\":\"uint256\"}],\"name\":\"Settle\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"_governance\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"index\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"oraclePrice\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"addr\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"tokenAddress\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"lever\",\"type\":\"uint256\"},{\"internalType\":\"bool\",\"name\":\"orientation\",\"type\":\"bool\"},{\"internalType\":\"uint256\",\"name\":\"dcuAmount\",\"type\":\"uint256\"}],\"name\":\"buy\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"index\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"dcuAmount\",\"type\":\"uint256\"}],\"name\":\"buyDirect\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"sigmaSQ\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"p0\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"bn0\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"p\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"bn\",\"type\":\"uint256\"}],\"name\":\"calcRevisedK\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"k\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"tokenAddress\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"lever\",\"type\":\"uint256\"},{\"internalType\":\"bool\",\"name\":\"orientation\",\"type\":\"bool\"}],\"name\":\"create\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"start\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"count\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"maxFindCount\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"}],\"name\":\"find\",\"outputs\":[{\"components\":[{\"internalType\":\"uint256\",\"name\":\"index\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"tokenAddress\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"lever\",\"type\":\"uint256\"},{\"internalType\":\"bool\",\"name\":\"orientation\",\"type\":\"bool\"},{\"internalType\":\"uint256\",\"name\":\"balance\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"basePrice\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"baseBlock\",\"type\":\"uint256\"}],\"internalType\":\"struct IHedgeFutures.FutureView[]\",\"name\":\"futureArray\",\"type\":\"tuple[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getFutureCount\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"tokenAddress\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"lever\",\"type\":\"uint256\"},{\"internalType\":\"bool\",\"name\":\"orientation\",\"type\":\"bool\"}],\"name\":\"getFutureInfo\",\"outputs\":[{\"components\":[{\"internalType\":\"uint256\",\"name\":\"index\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"tokenAddress\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"lever\",\"type\":\"uint256\"},{\"internalType\":\"bool\",\"name\":\"orientation\",\"type\":\"bool\"},{\"internalType\":\"uint256\",\"name\":\"balance\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"basePrice\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"baseBlock\",\"type\":\"uint256\"}],\"internalType\":\"struct IHedgeFutures.FutureView\",\"name\":\"\",\"type\":\"tuple\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"governance\",\"type\":\"address\"}],\"name\":\"initialize\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"offset\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"count\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"order\",\"type\":\"uint256\"}],\"name\":\"list\",\"outputs\":[{\"components\":[{\"internalType\":\"uint256\",\"name\":\"index\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"tokenAddress\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"lever\",\"type\":\"uint256\"},{\"internalType\":\"bool\",\"name\":\"orientation\",\"type\":\"bool\"},{\"internalType\":\"uint256\",\"name\":\"balance\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"basePrice\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"baseBlock\",\"type\":\"uint256\"}],\"internalType\":\"struct IHedgeFutures.FutureView[]\",\"name\":\"futureArray\",\"type\":\"tuple[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"tokenAddress\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"migrate\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"index\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"sell\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"index\",\"type\":\"uint256\"},{\"internalType\":\"address[]\",\"name\":\"addresses\",\"type\":\"address[]\"}],\"name\":\"settle\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newGovernance\",\"type\":\"address\"}],\"name\":\"update\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}]","ContractName":"HedgeFutures","CompilerVersion":"v0.8.9+commit.e5eed63a","OptimizationUsed":"1","Runs":"888888","ConstructorArguments":"","EVMVersion":"Default","Library":"","LicenseType":"GNU GPLv3","Proxy":"0","Implementation":"","SwarmSource":"ipfs://b15e8fb7e764d6a3a992e5f8ddf612e0aa90edd1eb5b53931d7dab194e47c4b2"}]}