{"status":"1","message":"OK","result":[{"SourceCode":"{{\r\n  \"language\": \"Solidity\",\r\n  \"sources\": {\r\n    \"contracts/mining/PremiaMining.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: BUSL-1.1\\r\\n// For further clarification please see https://license.premia.legal\\r\\n\\r\\npragma solidity ^0.8.0;\\r\\n\\r\\nimport {OwnableInternal, OwnableStorage} from \\\"@solidstate/contracts/access/OwnableInternal.sol\\\";\\r\\nimport {IERC20} from \\\"@solidstate/contracts/token/ERC20/IERC20.sol\\\";\\r\\nimport {SafeERC20} from \\\"@solidstate/contracts/utils/SafeERC20.sol\\\";\\r\\n\\r\\nimport {PremiaMiningStorage} from \\\"./PremiaMiningStorage.sol\\\";\\r\\nimport {IPremiaMining} from \\\"./IPremiaMining.sol\\\";\\r\\nimport {IPoolIO} from \\\"../pool/IPoolIO.sol\\\";\\r\\nimport {IPoolView} from \\\"../pool/IPoolView.sol\\\";\\r\\n\\r\\n/**\\r\\n * @title Premia liquidity mining contract, derived from Sushiswap's MasterChef.sol ( https://github.com/sushiswap/sushiswap )\\r\\n */\\r\\ncontract PremiaMining is IPremiaMining, OwnableInternal {\\r\\n    using PremiaMiningStorage for PremiaMiningStorage.Layout;\\r\\n    using SafeERC20 for IERC20;\\r\\n\\r\\n    address internal immutable DIAMOND;\\r\\n    address internal immutable PREMIA;\\r\\n\\r\\n    uint256 private constant ONE_YEAR = 365 days;\\r\\n\\r\\n    event Claim(\\r\\n        address indexed user,\\r\\n        address indexed pool,\\r\\n        bool indexed isCallPool,\\r\\n        uint256 rewardAmount\\r\\n    );\\r\\n    event UpdatePoolAlloc(address indexed pool, uint256 allocPoints);\\r\\n\\r\\n    constructor(address _diamond, address _premia) {\\r\\n        DIAMOND = _diamond;\\r\\n        PREMIA = _premia;\\r\\n    }\\r\\n\\r\\n    modifier onlyPool(address _pool) {\\r\\n        require(msg.sender == _pool, \\\"Not pool\\\");\\r\\n        _;\\r\\n    }\\r\\n\\r\\n    modifier onlyDiamondOrOwner() {\\r\\n        require(\\r\\n            msg.sender == DIAMOND ||\\r\\n                msg.sender == OwnableStorage.layout().owner,\\r\\n            \\\"Not diamond or owner\\\"\\r\\n        );\\r\\n        _;\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @notice Add premia rewards to distribute. Can only be called by the owner\\r\\n     * @param _amount Amount of premia to add\\r\\n     */\\r\\n    function addPremiaRewards(uint256 _amount) external override onlyOwner {\\r\\n        PremiaMiningStorage.Layout storage l = PremiaMiningStorage.layout();\\r\\n        IERC20(PREMIA).safeTransferFrom(msg.sender, address(this), _amount);\\r\\n        l.premiaAvailable += _amount;\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @notice Get amount of premia reward available to distribute\\r\\n     * @return Amount of premia reward available to distribute\\r\\n     */\\r\\n    function premiaRewardsAvailable() external view override returns (uint256) {\\r\\n        return PremiaMiningStorage.layout().premiaAvailable;\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @notice Get the total allocation points\\r\\n     * @return Total allocation points\\r\\n     */\\r\\n    function getTotalAllocationPoints()\\r\\n        external\\r\\n        view\\r\\n        override\\r\\n        returns (uint256)\\r\\n    {\\r\\n        return PremiaMiningStorage.layout().totalAllocPoint;\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @notice Get pool info\\r\\n     * @param pool address of the pool\\r\\n     * @param isCallPool whether we want infos of the CALL pool or the PUT pool\\r\\n     * @return Pool info\\r\\n     */\\r\\n    function getPoolInfo(address pool, bool isCallPool)\\r\\n        external\\r\\n        view\\r\\n        override\\r\\n        returns (PremiaMiningStorage.PoolInfo memory)\\r\\n    {\\r\\n        return PremiaMiningStorage.layout().poolInfo[pool][isCallPool];\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @notice Get the amount of premia emitted per year\\r\\n     * @return Premia emitted per year\\r\\n     */\\r\\n    function getPremiaPerYear() external view override returns (uint256) {\\r\\n        return PremiaMiningStorage.layout().premiaPerYear;\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @notice Set new alloc points for an option pool. Can only be called by the owner.\\r\\n     * @param _premiaPerYear Amount of PREMIA per year to allocate as reward across all pools\\r\\n     */\\r\\n    function setPremiaPerYear(uint256 _premiaPerYear) external onlyOwner {\\r\\n        PremiaMiningStorage.layout().premiaPerYear = _premiaPerYear;\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @notice Add a new option pool to the liquidity mining. Can only be called by the owner or premia diamond\\r\\n     * @param _pool Address of option pool contract\\r\\n     * @param _allocPoints Weight of this pool in the reward calculation\\r\\n     */\\r\\n    function addPool(address _pool, uint256 _allocPoints)\\r\\n        external\\r\\n        override\\r\\n        onlyDiamondOrOwner\\r\\n    {\\r\\n        PremiaMiningStorage.Layout storage l = PremiaMiningStorage.layout();\\r\\n        require(\\r\\n            l.poolInfo[_pool][true].lastRewardTimestamp == 0 &&\\r\\n                l.poolInfo[_pool][false].lastRewardTimestamp == 0,\\r\\n            \\\"Pool exists\\\"\\r\\n        );\\r\\n\\r\\n        l.totalAllocPoint += (_allocPoints * 2);\\r\\n\\r\\n        l.poolInfo[_pool][true] = PremiaMiningStorage.PoolInfo({\\r\\n            allocPoint: _allocPoints,\\r\\n            lastRewardTimestamp: block.timestamp,\\r\\n            accPremiaPerShare: 0\\r\\n        });\\r\\n\\r\\n        l.poolInfo[_pool][false] = PremiaMiningStorage.PoolInfo({\\r\\n            allocPoint: _allocPoints,\\r\\n            lastRewardTimestamp: block.timestamp,\\r\\n            accPremiaPerShare: 0\\r\\n        });\\r\\n\\r\\n        emit UpdatePoolAlloc(_pool, _allocPoints);\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @notice Set new alloc points for an option pool. Can only be called by the owner or premia diamond\\r\\n     * @param _pools List of addresses of option pool contract\\r\\n     * @param _allocPoints List of weight of each pool in reward calculations\\r\\n     */\\r\\n    function setPoolAllocPoints(\\r\\n        address[] memory _pools,\\r\\n        uint256[] memory _allocPoints\\r\\n    ) public override onlyDiamondOrOwner {\\r\\n        PremiaMiningStorage.Layout storage l = PremiaMiningStorage.layout();\\r\\n\\r\\n        for (uint256 i; i < _pools.length; i++) {\\r\\n            address pool = _pools[i];\\r\\n            uint256 allocPoints = _allocPoints[i];\\r\\n\\r\\n            require(\\r\\n                l.poolInfo[pool][true].lastRewardTimestamp > 0 &&\\r\\n                    l.poolInfo[pool][false].lastRewardTimestamp > 0,\\r\\n                \\\"Pool does not exists\\\"\\r\\n            );\\r\\n\\r\\n            l.totalAllocPoint =\\r\\n                l.totalAllocPoint -\\r\\n                l.poolInfo[pool][true].allocPoint -\\r\\n                l.poolInfo[pool][false].allocPoint +\\r\\n                (allocPoints * 2);\\r\\n\\r\\n            l.poolInfo[pool][true].allocPoint = allocPoints;\\r\\n            l.poolInfo[pool][false].allocPoint = allocPoints;\\r\\n\\r\\n            emit UpdatePoolAlloc(pool, allocPoints);\\r\\n        }\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @notice Get pending premia reward for a user on a pool\\r\\n     * @param _pool Address of option pool contract\\r\\n     * @param _isCallPool True if for call option pool, False if for put option pool\\r\\n     */\\r\\n    function pendingPremia(\\r\\n        address _pool,\\r\\n        bool _isCallPool,\\r\\n        address _user\\r\\n    ) external view override returns (uint256) {\\r\\n        uint256 TVL;\\r\\n        uint256 userTVL;\\r\\n\\r\\n        {\\r\\n            (uint256 underlyingTVL, uint256 baseTVL) = IPoolView(_pool)\\r\\n                .getTotalTVL();\\r\\n            TVL = _isCallPool ? underlyingTVL : baseTVL;\\r\\n        }\\r\\n\\r\\n        {\\r\\n            (uint256 userUnderlyingTVL, uint256 userBaseTVL) = IPoolView(_pool)\\r\\n                .getUserTVL(_user);\\r\\n            userTVL = _isCallPool ? userUnderlyingTVL : userBaseTVL;\\r\\n        }\\r\\n\\r\\n        PremiaMiningStorage.Layout storage l = PremiaMiningStorage.layout();\\r\\n        PremiaMiningStorage.PoolInfo storage pool = l.poolInfo[_pool][\\r\\n            _isCallPool\\r\\n        ];\\r\\n\\r\\n        PremiaMiningStorage.UserInfo storage user = l.userInfo[_pool][\\r\\n            _isCallPool\\r\\n        ][_user];\\r\\n        uint256 accPremiaPerShare = pool.accPremiaPerShare;\\r\\n\\r\\n        if (block.timestamp > pool.lastRewardTimestamp && TVL != 0) {\\r\\n            uint256 premiaReward = (((block.timestamp -\\r\\n                pool.lastRewardTimestamp) * l.premiaPerYear) *\\r\\n                pool.allocPoint) /\\r\\n                l.totalAllocPoint /\\r\\n                ONE_YEAR;\\r\\n\\r\\n            // If we are running out of rewards to distribute, distribute whats left\\r\\n            if (premiaReward > l.premiaAvailable) {\\r\\n                premiaReward = l.premiaAvailable;\\r\\n            }\\r\\n\\r\\n            accPremiaPerShare += (premiaReward * 1e12) / TVL;\\r\\n        }\\r\\n        return\\r\\n            ((userTVL * accPremiaPerShare) / 1e12) -\\r\\n            user.rewardDebt +\\r\\n            user.reward;\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @notice Update reward variables of the given pool to be up-to-date. Only callable by the option pool\\r\\n     * @param _pool Address of option pool contract\\r\\n     * @param _isCallPool True if for call option pool, False if for put option pool\\r\\n     * @param _totalTVL Total amount of tokens deposited in the option pool\\r\\n     */\\r\\n    function updatePool(\\r\\n        address _pool,\\r\\n        bool _isCallPool,\\r\\n        uint256 _totalTVL\\r\\n    ) external override onlyPool(_pool) {\\r\\n        _updatePool(_pool, _isCallPool, _totalTVL);\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @notice Update reward variables of the given pool to be up-to-date. Only callable by the option pool\\r\\n     * @param _pool Address of option pool contract\\r\\n     * @param _isCallPool True if for call option pool, False if for put option pool\\r\\n     * @param _totalTVL Total amount of tokens deposited in the option pool\\r\\n     */\\r\\n    function _updatePool(\\r\\n        address _pool,\\r\\n        bool _isCallPool,\\r\\n        uint256 _totalTVL\\r\\n    ) internal {\\r\\n        PremiaMiningStorage.Layout storage l = PremiaMiningStorage.layout();\\r\\n\\r\\n        PremiaMiningStorage.PoolInfo storage pool = l.poolInfo[_pool][\\r\\n            _isCallPool\\r\\n        ];\\r\\n\\r\\n        if (block.timestamp <= pool.lastRewardTimestamp) {\\r\\n            return;\\r\\n        }\\r\\n\\r\\n        if (_totalTVL == 0) {\\r\\n            pool.lastRewardTimestamp = block.timestamp;\\r\\n            return;\\r\\n        }\\r\\n\\r\\n        uint256 premiaReward = (((block.timestamp - pool.lastRewardTimestamp) *\\r\\n            l.premiaPerYear) * pool.allocPoint) /\\r\\n            l.totalAllocPoint /\\r\\n            ONE_YEAR;\\r\\n\\r\\n        // If we are running out of rewards to distribute, distribute whats left\\r\\n        if (premiaReward > l.premiaAvailable) {\\r\\n            premiaReward = l.premiaAvailable;\\r\\n        }\\r\\n\\r\\n        l.premiaAvailable -= premiaReward;\\r\\n        pool.accPremiaPerShare += (premiaReward * 1e12) / _totalTVL;\\r\\n        pool.lastRewardTimestamp = block.timestamp;\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @notice Allocate pending rewards to a user. Only callable by the option pool\\r\\n     * @param _user User for whom allocate the rewards\\r\\n     * @param _pool Address of option pool contract\\r\\n     * @param _isCallPool True if for call option pool, False if for put option pool\\r\\n     * @param _userTVLOld Total amount of tokens deposited in the option pool by user before the allocation update\\r\\n     * @param _userTVLNew Total amount of tokens deposited in the option pool by user after the allocation update\\r\\n     * @param _totalTVL Total amount of tokens deposited in the option pool\\r\\n     */\\r\\n    function allocatePending(\\r\\n        address _user,\\r\\n        address _pool,\\r\\n        bool _isCallPool,\\r\\n        uint256 _userTVLOld,\\r\\n        uint256 _userTVLNew,\\r\\n        uint256 _totalTVL\\r\\n    ) external override onlyPool(_pool) {\\r\\n        _allocatePending(\\r\\n            _user,\\r\\n            _pool,\\r\\n            _isCallPool,\\r\\n            _userTVLOld,\\r\\n            _userTVLNew,\\r\\n            _totalTVL\\r\\n        );\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @notice Allocate pending rewards to a user. Only callable by the option pool\\r\\n     * @param _user User for whom allocate the rewards\\r\\n     * @param _pool Address of option pool contract\\r\\n     * @param _isCallPool True if for call option pool, False if for put option pool\\r\\n     * @param _userTVLOld Total amount of tokens deposited in the option pool by user before the allocation update\\r\\n     * @param _userTVLNew Total amount of tokens deposited in the option pool by user after the allocation update\\r\\n     * @param _totalTVL Total amount of tokens deposited in the option pool\\r\\n     */\\r\\n    function _allocatePending(\\r\\n        address _user,\\r\\n        address _pool,\\r\\n        bool _isCallPool,\\r\\n        uint256 _userTVLOld,\\r\\n        uint256 _userTVLNew,\\r\\n        uint256 _totalTVL\\r\\n    ) internal {\\r\\n        PremiaMiningStorage.Layout storage l = PremiaMiningStorage.layout();\\r\\n        PremiaMiningStorage.PoolInfo storage pool = l.poolInfo[_pool][\\r\\n            _isCallPool\\r\\n        ];\\r\\n        PremiaMiningStorage.UserInfo storage user = l.userInfo[_pool][\\r\\n            _isCallPool\\r\\n        ][_user];\\r\\n\\r\\n        _updatePool(_pool, _isCallPool, _totalTVL);\\r\\n\\r\\n        user.reward +=\\r\\n            ((_userTVLOld * pool.accPremiaPerShare) / 1e12) -\\r\\n            user.rewardDebt;\\r\\n\\r\\n        user.rewardDebt = (_userTVLNew * pool.accPremiaPerShare) / 1e12;\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @notice Update user reward allocation + claim allocated PREMIA reward. Only callable by the option pool\\r\\n     * @param _user User claiming the rewards\\r\\n     * @param _pool Address of option pool contract\\r\\n     * @param _isCallPool True if for call option pool, False if for put option pool\\r\\n     * @param _userTVLOld Total amount of tokens deposited in the option pool by user before the allocation update\\r\\n     * @param _userTVLNew Total amount of tokens deposited in the option pool by user after the allocation update\\r\\n     * @param _totalTVL Total amount of tokens deposited in the option pool\\r\\n     */\\r\\n    function claim(\\r\\n        address _user,\\r\\n        address _pool,\\r\\n        bool _isCallPool,\\r\\n        uint256 _userTVLOld,\\r\\n        uint256 _userTVLNew,\\r\\n        uint256 _totalTVL\\r\\n    ) external override onlyPool(_pool) {\\r\\n        PremiaMiningStorage.Layout storage l = PremiaMiningStorage.layout();\\r\\n\\r\\n        _allocatePending(\\r\\n            _user,\\r\\n            _pool,\\r\\n            _isCallPool,\\r\\n            _userTVLOld,\\r\\n            _userTVLNew,\\r\\n            _totalTVL\\r\\n        );\\r\\n\\r\\n        uint256 reward = l.userInfo[_pool][_isCallPool][_user].reward;\\r\\n        l.userInfo[_pool][_isCallPool][_user].reward = 0;\\r\\n        _safePremiaTransfer(_user, reward);\\r\\n\\r\\n        emit Claim(_user, _pool, _isCallPool, reward);\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @notice Trigger reward distribution by multiple pools\\r\\n     * @param account address whose rewards to claim\\r\\n     * @param pools list of pools to call\\r\\n     * @param isCall list of bools indicating whether each pool is call pool\\r\\n     */\\r\\n    function multiClaim(\\r\\n        address account,\\r\\n        address[] calldata pools,\\r\\n        bool[] calldata isCall\\r\\n    ) external {\\r\\n        require(pools.length == isCall.length);\\r\\n\\r\\n        for (uint256 i; i < pools.length; i++) {\\r\\n            IPoolIO(pools[i]).claimRewards(account, isCall[i]);\\r\\n        }\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @notice Upgrade contract from using blocks to timestamps\\r\\n     * @param _pools Pools to upgrade\\r\\n     * @param _premiaPerYear Amount of premia distributed per year\\r\\n     */\\r\\n    function upgrade(address[] memory _pools, uint256 _premiaPerYear)\\r\\n        external\\r\\n        onlyDiamondOrOwner\\r\\n    {\\r\\n        PremiaMiningStorage.Layout storage l = PremiaMiningStorage.layout();\\r\\n\\r\\n        l.premiaPerYear = _premiaPerYear;\\r\\n\\r\\n        for (uint256 i; i < _pools.length; i++) {\\r\\n            for (uint256 isCallPool; isCallPool < 2; isCallPool++) {\\r\\n                PremiaMiningStorage.PoolInfo storage pool = l.poolInfo[\\r\\n                    _pools[i]\\r\\n                ][isCallPool == 1];\\r\\n\\r\\n                if (pool.lastRewardTimestamp > 0) {\\r\\n                    pool.lastRewardTimestamp = block.timestamp;\\r\\n                }\\r\\n            }\\r\\n        }\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @notice Safe premia transfer function, just in case if rounding error causes pool to not have enough PREMIA.\\r\\n     * @param _to Address where to transfer the Premia\\r\\n     * @param _amount Amount of tokens to transfer\\r\\n     */\\r\\n    function _safePremiaTransfer(address _to, uint256 _amount) internal {\\r\\n        IERC20 premia = IERC20(PREMIA);\\r\\n\\r\\n        uint256 premiaBal = premia.balanceOf(address(this));\\r\\n        if (_amount > premiaBal) {\\r\\n            premia.safeTransfer(_to, premiaBal);\\r\\n        } else {\\r\\n            premia.safeTransfer(_to, _amount);\\r\\n        }\\r\\n    }\\r\\n}\\r\\n\"\r\n    },\r\n    \"@solidstate/contracts/access/OwnableInternal.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\nimport { OwnableStorage } from './OwnableStorage.sol';\\n\\nabstract contract OwnableInternal {\\n    using OwnableStorage for OwnableStorage.Layout;\\n\\n    modifier onlyOwner() {\\n        require(\\n            msg.sender == OwnableStorage.layout().owner,\\n            'Ownable: sender must be owner'\\n        );\\n        _;\\n    }\\n}\\n\"\r\n    },\r\n    \"@solidstate/contracts/token/ERC20/IERC20.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\nimport { IERC20Internal } from './IERC20Internal.sol';\\n\\n/**\\n * @title ERC20 interface\\n * @dev see https://github.com/ethereum/EIPs/issues/20\\n */\\ninterface IERC20 is IERC20Internal {\\n    /**\\n     * @notice query the total minted token supply\\n     * @return token supply\\n     */\\n    function totalSupply() external view returns (uint256);\\n\\n    /**\\n     * @notice query the token balance of given account\\n     * @param account address to query\\n     * @return token balance\\n     */\\n    function balanceOf(address account) external view returns (uint256);\\n\\n    /**\\n     * @notice query the allowance granted from given holder to given spender\\n     * @param holder approver of allowance\\n     * @param spender recipient of allowance\\n     * @return token allowance\\n     */\\n    function allowance(address holder, address spender)\\n        external\\n        view\\n        returns (uint256);\\n\\n    /**\\n     * @notice grant approval to spender to spend tokens\\n     * @dev prefer ERC20Extended functions to avoid transaction-ordering vulnerability (see https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729)\\n     * @param spender recipient of allowance\\n     * @param amount quantity of tokens approved for spending\\n     * @return success status (always true; otherwise function should revert)\\n     */\\n    function approve(address spender, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @notice transfer tokens to given recipient\\n     * @param recipient beneficiary of token transfer\\n     * @param amount quantity of tokens to transfer\\n     * @return success status (always true; otherwise function should revert)\\n     */\\n    function transfer(address recipient, uint256 amount)\\n        external\\n        returns (bool);\\n\\n    /**\\n     * @notice transfer tokens to given recipient on behalf of given holder\\n     * @param holder holder of tokens prior to transfer\\n     * @param recipient beneficiary of token transfer\\n     * @param amount quantity of tokens to transfer\\n     * @return success status (always true; otherwise function should revert)\\n     */\\n    function transferFrom(\\n        address holder,\\n        address recipient,\\n        uint256 amount\\n    ) external returns (bool);\\n}\\n\"\r\n    },\r\n    \"@solidstate/contracts/utils/SafeERC20.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\nimport { IERC20 } from '../token/ERC20/IERC20.sol';\\nimport { AddressUtils } from './AddressUtils.sol';\\n\\n/**\\n * @title Safe ERC20 interaction library\\n * @dev derived from https://github.com/OpenZeppelin/openzeppelin-contracts/ (MIT license)\\n */\\nlibrary SafeERC20 {\\n    using AddressUtils for address;\\n\\n    function safeTransfer(\\n        IERC20 token,\\n        address to,\\n        uint256 value\\n    ) internal {\\n        _callOptionalReturn(\\n            token,\\n            abi.encodeWithSelector(token.transfer.selector, to, value)\\n        );\\n    }\\n\\n    function safeTransferFrom(\\n        IERC20 token,\\n        address from,\\n        address to,\\n        uint256 value\\n    ) internal {\\n        _callOptionalReturn(\\n            token,\\n            abi.encodeWithSelector(token.transferFrom.selector, from, to, value)\\n        );\\n    }\\n\\n    /**\\n     * @dev safeApprove (like approve) should only be called when setting an initial allowance or when resetting it to zero; otherwise prefer safeIncreaseAllowance and safeDecreaseAllowance\\n     */\\n    function safeApprove(\\n        IERC20 token,\\n        address spender,\\n        uint256 value\\n    ) internal {\\n        require(\\n            (value == 0) || (token.allowance(address(this), spender) == 0),\\n            'SafeERC20: approve from non-zero to non-zero allowance'\\n        );\\n\\n        _callOptionalReturn(\\n            token,\\n            abi.encodeWithSelector(token.approve.selector, spender, value)\\n        );\\n    }\\n\\n    function safeIncreaseAllowance(\\n        IERC20 token,\\n        address spender,\\n        uint256 value\\n    ) internal {\\n        uint256 newAllowance = token.allowance(address(this), spender) + value;\\n        _callOptionalReturn(\\n            token,\\n            abi.encodeWithSelector(\\n                token.approve.selector,\\n                spender,\\n                newAllowance\\n            )\\n        );\\n    }\\n\\n    function safeDecreaseAllowance(\\n        IERC20 token,\\n        address spender,\\n        uint256 value\\n    ) internal {\\n        unchecked {\\n            uint256 oldAllowance = token.allowance(address(this), spender);\\n            require(\\n                oldAllowance >= value,\\n                'SafeERC20: decreased allowance below zero'\\n            );\\n            uint256 newAllowance = oldAllowance - value;\\n            _callOptionalReturn(\\n                token,\\n                abi.encodeWithSelector(\\n                    token.approve.selector,\\n                    spender,\\n                    newAllowance\\n                )\\n            );\\n        }\\n    }\\n\\n    /**\\n     * @notice send transaction data and check validity of return value, if present\\n     * @param token ERC20 token interface\\n     * @param data transaction data\\n     */\\n    function _callOptionalReturn(IERC20 token, bytes memory data) private {\\n        bytes memory returndata = address(token).functionCall(\\n            data,\\n            'SafeERC20: low-level call failed'\\n        );\\n\\n        if (returndata.length > 0) {\\n            require(\\n                abi.decode(returndata, (bool)),\\n                'SafeERC20: ERC20 operation did not succeed'\\n            );\\n        }\\n    }\\n}\\n\"\r\n    },\r\n    \"contracts/mining/PremiaMiningStorage.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: BUSL-1.1\\r\\n// For further clarification please see https://license.premia.legal\\r\\n\\r\\npragma solidity ^0.8.0;\\r\\n\\r\\nlibrary PremiaMiningStorage {\\r\\n    bytes32 internal constant STORAGE_SLOT =\\r\\n        keccak256(\\\"premia.contracts.storage.PremiaMining\\\");\\r\\n\\r\\n    // Info of each pool.\\r\\n    struct PoolInfo {\\r\\n        uint256 allocPoint; // How many allocation points assigned to this pool. PREMIA to distribute per block.\\r\\n        uint256 lastRewardTimestamp; // Last timestamp that PREMIA distribution occurs\\r\\n        uint256 accPremiaPerShare; // Accumulated PREMIA per share, times 1e12. See below.\\r\\n    }\\r\\n\\r\\n    // Info of each user.\\r\\n    struct UserInfo {\\r\\n        uint256 reward; // Total allocated unclaimed reward\\r\\n        uint256 rewardDebt; // Reward debt. See explanation below.\\r\\n        //\\r\\n        // We do some fancy math here. Basically, any point in time, the amount of PREMIA\\r\\n        // entitled to a user but is pending to be distributed is:\\r\\n        //\\r\\n        //   pending reward = (user.amount * pool.accPremiaPerShare) - user.rewardDebt\\r\\n        //\\r\\n        // Whenever a user deposits or withdraws LP tokens to a pool. Here's what happens:\\r\\n        //   1. The pool's `accPremiaPerShare` (and `lastRewardBlock`) gets updated.\\r\\n        //   2. User receives the pending reward sent to his/her address.\\r\\n        //   3. User's `amount` gets updated.\\r\\n        //   4. User's `rewardDebt` gets updated.\\r\\n    }\\r\\n\\r\\n    struct Layout {\\r\\n        // Total PREMIA left to distribute\\r\\n        uint256 premiaAvailable;\\r\\n        // Amount of premia distributed per year\\r\\n        uint256 premiaPerYear;\\r\\n        // pool -> isCallPool -> PoolInfo\\r\\n        mapping(address => mapping(bool => PoolInfo)) poolInfo;\\r\\n        // pool -> isCallPool -> user -> UserInfo\\r\\n        mapping(address => mapping(bool => mapping(address => UserInfo))) userInfo;\\r\\n        // Total allocation points. Must be the sum of all allocation points in all pools.\\r\\n        uint256 totalAllocPoint;\\r\\n    }\\r\\n\\r\\n    function layout() internal pure returns (Layout storage l) {\\r\\n        bytes32 slot = STORAGE_SLOT;\\r\\n        assembly {\\r\\n            l.slot := slot\\r\\n        }\\r\\n    }\\r\\n}\\r\\n\"\r\n    },\r\n    \"contracts/mining/IPremiaMining.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: LGPL-3.0-or-later\\r\\n\\r\\npragma solidity ^0.8.0;\\r\\n\\r\\nimport {PremiaMiningStorage} from \\\"./PremiaMiningStorage.sol\\\";\\r\\n\\r\\ninterface IPremiaMining {\\r\\n    function addPremiaRewards(uint256 _amount) external;\\r\\n\\r\\n    function premiaRewardsAvailable() external view returns (uint256);\\r\\n\\r\\n    function getTotalAllocationPoints() external view returns (uint256);\\r\\n\\r\\n    function getPoolInfo(address pool, bool isCallPool)\\r\\n        external\\r\\n        view\\r\\n        returns (PremiaMiningStorage.PoolInfo memory);\\r\\n\\r\\n    function getPremiaPerYear() external view returns (uint256);\\r\\n\\r\\n    function addPool(address _pool, uint256 _allocPoints) external;\\r\\n\\r\\n    function setPoolAllocPoints(\\r\\n        address[] memory _pools,\\r\\n        uint256[] memory _allocPoints\\r\\n    ) external;\\r\\n\\r\\n    function pendingPremia(\\r\\n        address _pool,\\r\\n        bool _isCallPool,\\r\\n        address _user\\r\\n    ) external view returns (uint256);\\r\\n\\r\\n    function updatePool(\\r\\n        address _pool,\\r\\n        bool _isCallPool,\\r\\n        uint256 _totalTVL\\r\\n    ) external;\\r\\n\\r\\n    function allocatePending(\\r\\n        address _user,\\r\\n        address _pool,\\r\\n        bool _isCallPool,\\r\\n        uint256 _userTVLOld,\\r\\n        uint256 _userTVLNew,\\r\\n        uint256 _totalTVL\\r\\n    ) external;\\r\\n\\r\\n    function claim(\\r\\n        address _user,\\r\\n        address _pool,\\r\\n        bool _isCallPool,\\r\\n        uint256 _userTVLOld,\\r\\n        uint256 _userTVLNew,\\r\\n        uint256 _totalTVL\\r\\n    ) external;\\r\\n}\\r\\n\"\r\n    },\r\n    \"contracts/pool/IPoolIO.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: LGPL-3.0-or-later\\r\\n\\r\\npragma solidity ^0.8.0;\\r\\n\\r\\ninterface IPoolIO {\\r\\n    function setDivestmentTimestamp(uint64 timestamp, bool isCallPool) external;\\r\\n\\r\\n    function deposit(uint256 amount, bool isCallPool) external payable;\\r\\n\\r\\n    function swapAndDeposit(\\r\\n        uint256 amount,\\r\\n        bool isCallPool,\\r\\n        uint256 amountOut,\\r\\n        uint256 amountInMax,\\r\\n        address[] calldata path,\\r\\n        bool isSushi\\r\\n    ) external payable;\\r\\n\\r\\n    function withdraw(uint256 amount, bool isCallPool) external;\\r\\n\\r\\n    function reassign(uint256 tokenId, uint256 contractSize)\\r\\n        external\\r\\n        returns (\\r\\n            uint256 baseCost,\\r\\n            uint256 feeCost,\\r\\n            uint256 amountOut\\r\\n        );\\r\\n\\r\\n    function reassignBatch(\\r\\n        uint256[] calldata tokenIds,\\r\\n        uint256[] calldata contractSizes\\r\\n    )\\r\\n        external\\r\\n        returns (\\r\\n            uint256[] memory baseCosts,\\r\\n            uint256[] memory feeCosts,\\r\\n            uint256 amountOutCall,\\r\\n            uint256 amountOutPut\\r\\n        );\\r\\n\\r\\n    function withdrawAllAndReassignBatch(\\r\\n        bool isCallPool,\\r\\n        uint256[] calldata tokenIds,\\r\\n        uint256[] calldata contractSizes\\r\\n    )\\r\\n        external\\r\\n        returns (\\r\\n            uint256[] memory baseCosts,\\r\\n            uint256[] memory feeCosts,\\r\\n            uint256 amountOutCall,\\r\\n            uint256 amountOutPut\\r\\n        );\\r\\n\\r\\n    function withdrawFees()\\r\\n        external\\r\\n        returns (uint256 amountOutCall, uint256 amountOutPut);\\r\\n\\r\\n    function annihilate(uint256 tokenId, uint256 contractSize) external;\\r\\n\\r\\n    function claimRewards(bool isCallPool) external;\\r\\n\\r\\n    function claimRewards(address account, bool isCallPool) external;\\r\\n\\r\\n    function updateMiningPools() external;\\r\\n}\\r\\n\"\r\n    },\r\n    \"contracts/pool/IPoolView.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: LGPL-3.0-or-later\\r\\n\\r\\npragma solidity ^0.8.0;\\r\\n\\r\\nimport {IERC1155Metadata} from \\\"@solidstate/contracts/token/ERC1155/metadata/IERC1155Metadata.sol\\\";\\r\\n\\r\\nimport {PoolStorage} from \\\"./PoolStorage.sol\\\";\\r\\n\\r\\ninterface IPoolView is IERC1155Metadata {\\r\\n    function getFeeReceiverAddress() external view returns (address);\\r\\n\\r\\n    function getPoolSettings()\\r\\n        external\\r\\n        view\\r\\n        returns (PoolStorage.PoolSettings memory);\\r\\n\\r\\n    function getTokenIds() external view returns (uint256[] memory);\\r\\n\\r\\n    function getCLevel64x64(bool isCall) external view returns (int128);\\r\\n\\r\\n    function getSteepness64x64(bool isCall) external view returns (int128);\\r\\n\\r\\n    function getPrice(uint256 timestamp) external view returns (int128);\\r\\n\\r\\n    function getParametersForTokenId(uint256 tokenId)\\r\\n        external\\r\\n        pure\\r\\n        returns (\\r\\n            PoolStorage.TokenType,\\r\\n            uint64,\\r\\n            int128\\r\\n        );\\r\\n\\r\\n    function getMinimumAmounts()\\r\\n        external\\r\\n        view\\r\\n        returns (uint256 minCallTokenAmount, uint256 minPutTokenAmount);\\r\\n\\r\\n    function getCapAmounts()\\r\\n        external\\r\\n        view\\r\\n        returns (uint256 callTokenCapAmount, uint256 putTokenCapAmount);\\r\\n\\r\\n    function getUserTVL(address user)\\r\\n        external\\r\\n        view\\r\\n        returns (uint256 underlyingTVL, uint256 baseTVL);\\r\\n\\r\\n    function getTotalTVL()\\r\\n        external\\r\\n        view\\r\\n        returns (uint256 underlyingTVL, uint256 baseTVL);\\r\\n\\r\\n    function getPremiaMining() external view returns (address);\\r\\n\\r\\n    function getDivestmentTimestamps(address account)\\r\\n        external\\r\\n        view\\r\\n        returns (\\r\\n            uint256 callDivestmentTimestamp,\\r\\n            uint256 putDivestmentTimestamp\\r\\n        );\\r\\n}\\r\\n\"\r\n    },\r\n    \"@solidstate/contracts/access/OwnableStorage.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\nlibrary OwnableStorage {\\n    struct Layout {\\n        address owner;\\n    }\\n\\n    bytes32 internal constant STORAGE_SLOT =\\n        keccak256('solidstate.contracts.storage.Ownable');\\n\\n    function layout() internal pure returns (Layout storage l) {\\n        bytes32 slot = STORAGE_SLOT;\\n        assembly {\\n            l.slot := slot\\n        }\\n    }\\n\\n    function setOwner(Layout storage l, address owner) internal {\\n        l.owner = owner;\\n    }\\n}\\n\"\r\n    },\r\n    \"@solidstate/contracts/token/ERC20/IERC20Internal.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @title Partial ERC20 interface needed by internal functions\\n */\\ninterface IERC20Internal {\\n    event Transfer(address indexed from, address indexed to, uint256 value);\\n\\n    event Approval(\\n        address indexed owner,\\n        address indexed spender,\\n        uint256 value\\n    );\\n}\\n\"\r\n    },\r\n    \"@solidstate/contracts/utils/AddressUtils.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\nlibrary AddressUtils {\\n    function toString(address account) internal pure returns (string memory) {\\n        bytes32 value = bytes32(uint256(uint160(account)));\\n        bytes memory alphabet = '0123456789abcdef';\\n        bytes memory chars = new bytes(42);\\n\\n        chars[0] = '0';\\n        chars[1] = 'x';\\n\\n        for (uint256 i = 0; i < 20; i++) {\\n            chars[2 + i * 2] = alphabet[uint8(value[i + 12] >> 4)];\\n            chars[3 + i * 2] = alphabet[uint8(value[i + 12] & 0x0f)];\\n        }\\n\\n        return string(chars);\\n    }\\n\\n    function isContract(address account) internal view returns (bool) {\\n        uint256 size;\\n        assembly {\\n            size := extcodesize(account)\\n        }\\n        return size > 0;\\n    }\\n\\n    function sendValue(address payable account, uint256 amount) internal {\\n        (bool success, ) = account.call{ value: amount }('');\\n        require(success, 'AddressUtils: failed to send value');\\n    }\\n\\n    function functionCall(address target, bytes memory data)\\n        internal\\n        returns (bytes memory)\\n    {\\n        return\\n            functionCall(target, data, 'AddressUtils: failed low-level call');\\n    }\\n\\n    function functionCall(\\n        address target,\\n        bytes memory data,\\n        string memory error\\n    ) internal returns (bytes memory) {\\n        return _functionCallWithValue(target, data, 0, error);\\n    }\\n\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value\\n    ) internal returns (bytes memory) {\\n        return\\n            functionCallWithValue(\\n                target,\\n                data,\\n                value,\\n                'AddressUtils: failed low-level call with value'\\n            );\\n    }\\n\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value,\\n        string memory error\\n    ) internal returns (bytes memory) {\\n        require(\\n            address(this).balance >= value,\\n            'AddressUtils: insufficient balance for call'\\n        );\\n        return _functionCallWithValue(target, data, value, error);\\n    }\\n\\n    function _functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value,\\n        string memory error\\n    ) private returns (bytes memory) {\\n        require(\\n            isContract(target),\\n            'AddressUtils: function call to non-contract'\\n        );\\n\\n        (bool success, bytes memory returnData) = target.call{ value: value }(\\n            data\\n        );\\n\\n        if (success) {\\n            return returnData;\\n        } else if (returnData.length > 0) {\\n            assembly {\\n                let returnData_size := mload(returnData)\\n                revert(add(32, returnData), returnData_size)\\n            }\\n        } else {\\n            revert(error);\\n        }\\n    }\\n}\\n\"\r\n    },\r\n    \"@solidstate/contracts/token/ERC1155/metadata/IERC1155Metadata.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @title ERC1155Metadata interface\\n */\\ninterface IERC1155Metadata {\\n    /**\\n     * @notice get generated URI for given token\\n     * @return token URI\\n     */\\n    function uri(uint256 tokenId) external view returns (string memory);\\n}\\n\"\r\n    },\r\n    \"contracts/pool/PoolStorage.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: BUSL-1.1\\r\\n// For further clarification please see https://license.premia.legal\\r\\n\\r\\npragma solidity ^0.8.0;\\r\\n\\r\\nimport {AggregatorInterface} from \\\"@chainlink/contracts/src/v0.8/interfaces/AggregatorInterface.sol\\\";\\r\\nimport {AggregatorV3Interface} from \\\"@chainlink/contracts/src/v0.8/interfaces/AggregatorV3Interface.sol\\\";\\r\\nimport {EnumerableSet, ERC1155EnumerableStorage} from \\\"@solidstate/contracts/token/ERC1155/enumerable/ERC1155EnumerableStorage.sol\\\";\\r\\n\\r\\nimport {ABDKMath64x64} from \\\"abdk-libraries-solidity/ABDKMath64x64.sol\\\";\\r\\nimport {ABDKMath64x64Token} from \\\"../libraries/ABDKMath64x64Token.sol\\\";\\r\\nimport {OptionMath} from \\\"../libraries/OptionMath.sol\\\";\\r\\n\\r\\nlibrary PoolStorage {\\r\\n    using ABDKMath64x64 for int128;\\r\\n    using PoolStorage for PoolStorage.Layout;\\r\\n\\r\\n    enum TokenType {\\r\\n        UNDERLYING_FREE_LIQ,\\r\\n        BASE_FREE_LIQ,\\r\\n        UNDERLYING_RESERVED_LIQ,\\r\\n        BASE_RESERVED_LIQ,\\r\\n        LONG_CALL,\\r\\n        SHORT_CALL,\\r\\n        LONG_PUT,\\r\\n        SHORT_PUT\\r\\n    }\\r\\n\\r\\n    struct PoolSettings {\\r\\n        address underlying;\\r\\n        address base;\\r\\n        address underlyingOracle;\\r\\n        address baseOracle;\\r\\n    }\\r\\n\\r\\n    struct QuoteArgsInternal {\\r\\n        address feePayer; // address of the fee payer\\r\\n        uint64 maturity; // timestamp of option maturity\\r\\n        int128 strike64x64; // 64x64 fixed point representation of strike price\\r\\n        int128 spot64x64; // 64x64 fixed point representation of spot price\\r\\n        uint256 contractSize; // size of option contract\\r\\n        bool isCall; // true for call, false for put\\r\\n    }\\r\\n\\r\\n    struct QuoteResultInternal {\\r\\n        int128 baseCost64x64; // 64x64 fixed point representation of option cost denominated in underlying currency (without fee)\\r\\n        int128 feeCost64x64; // 64x64 fixed point representation of option fee cost denominated in underlying currency for call, or base currency for put\\r\\n        int128 cLevel64x64; // 64x64 fixed point representation of C-Level of Pool after purchase\\r\\n        int128 slippageCoefficient64x64; // 64x64 fixed point representation of slippage coefficient for given order size\\r\\n    }\\r\\n\\r\\n    struct BatchData {\\r\\n        uint256 eta;\\r\\n        uint256 totalPendingDeposits;\\r\\n    }\\r\\n\\r\\n    bytes32 internal constant STORAGE_SLOT =\\r\\n        keccak256(\\\"premia.contracts.storage.Pool\\\");\\r\\n\\r\\n    uint256 private constant C_DECAY_BUFFER = 12 hours;\\r\\n    uint256 private constant C_DECAY_INTERVAL = 4 hours;\\r\\n\\r\\n    struct Layout {\\r\\n        // ERC20 token addresses\\r\\n        address base;\\r\\n        address underlying;\\r\\n        // AggregatorV3Interface oracle addresses\\r\\n        address baseOracle;\\r\\n        address underlyingOracle;\\r\\n        // token metadata\\r\\n        uint8 underlyingDecimals;\\r\\n        uint8 baseDecimals;\\r\\n        // minimum amounts\\r\\n        uint256 baseMinimum;\\r\\n        uint256 underlyingMinimum;\\r\\n        // deposit caps\\r\\n        uint256 basePoolCap;\\r\\n        uint256 underlyingPoolCap;\\r\\n        // market state\\r\\n        int128 _deprecated_steepness64x64;\\r\\n        int128 cLevelBase64x64;\\r\\n        int128 cLevelUnderlying64x64;\\r\\n        uint256 cLevelBaseUpdatedAt;\\r\\n        uint256 cLevelUnderlyingUpdatedAt;\\r\\n        uint256 updatedAt;\\r\\n        // User -> isCall -> depositedAt\\r\\n        mapping(address => mapping(bool => uint256)) depositedAt;\\r\\n        mapping(address => mapping(bool => uint256)) divestmentTimestamps;\\r\\n        // doubly linked list of free liquidity intervals\\r\\n        // isCall -> User -> User\\r\\n        mapping(bool => mapping(address => address)) liquidityQueueAscending;\\r\\n        mapping(bool => mapping(address => address)) liquidityQueueDescending;\\r\\n        // minimum resolution price bucket => price\\r\\n        mapping(uint256 => int128) bucketPrices64x64;\\r\\n        // sequence id (minimum resolution price bucket / 256) => price update sequence\\r\\n        mapping(uint256 => uint256) priceUpdateSequences;\\r\\n        // isCall -> batch data\\r\\n        mapping(bool => BatchData) nextDeposits;\\r\\n        // user -> batch timestamp -> isCall -> pending amount\\r\\n        mapping(address => mapping(uint256 => mapping(bool => uint256))) pendingDeposits;\\r\\n        EnumerableSet.UintSet tokenIds;\\r\\n        // user -> isCallPool -> total value locked of user (Used for liquidity mining)\\r\\n        mapping(address => mapping(bool => uint256)) userTVL;\\r\\n        // isCallPool -> total value locked\\r\\n        mapping(bool => uint256) totalTVL;\\r\\n        // steepness values\\r\\n        int128 steepnessBase64x64;\\r\\n        int128 steepnessUnderlying64x64;\\r\\n    }\\r\\n\\r\\n    function layout() internal pure returns (Layout storage l) {\\r\\n        bytes32 slot = STORAGE_SLOT;\\r\\n        assembly {\\r\\n            l.slot := slot\\r\\n        }\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @notice calculate ERC1155 token id for given option parameters\\r\\n     * @param tokenType TokenType enum\\r\\n     * @param maturity timestamp of option maturity\\r\\n     * @param strike64x64 64x64 fixed point representation of strike price\\r\\n     * @return tokenId token id\\r\\n     */\\r\\n    function formatTokenId(\\r\\n        TokenType tokenType,\\r\\n        uint64 maturity,\\r\\n        int128 strike64x64\\r\\n    ) internal pure returns (uint256 tokenId) {\\r\\n        tokenId =\\r\\n            (uint256(tokenType) << 248) +\\r\\n            (uint256(maturity) << 128) +\\r\\n            uint256(int256(strike64x64));\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @notice derive option maturity and strike price from ERC1155 token id\\r\\n     * @param tokenId token id\\r\\n     * @return tokenType TokenType enum\\r\\n     * @return maturity timestamp of option maturity\\r\\n     * @return strike64x64 option strike price\\r\\n     */\\r\\n    function parseTokenId(uint256 tokenId)\\r\\n        internal\\r\\n        pure\\r\\n        returns (\\r\\n            TokenType tokenType,\\r\\n            uint64 maturity,\\r\\n            int128 strike64x64\\r\\n        )\\r\\n    {\\r\\n        assembly {\\r\\n            tokenType := shr(248, tokenId)\\r\\n            maturity := shr(128, tokenId)\\r\\n            strike64x64 := tokenId\\r\\n        }\\r\\n    }\\r\\n\\r\\n    function getTokenDecimals(Layout storage l, bool isCall)\\r\\n        internal\\r\\n        view\\r\\n        returns (uint8 decimals)\\r\\n    {\\r\\n        decimals = isCall ? l.underlyingDecimals : l.baseDecimals;\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @notice get the total supply of free liquidity tokens, minus pending deposits\\r\\n     * @param l storage layout struct\\r\\n     * @param isCall whether query is for call or put pool\\r\\n     * @return 64x64 fixed point representation of total free liquidity\\r\\n     */\\r\\n    function totalFreeLiquiditySupply64x64(Layout storage l, bool isCall)\\r\\n        internal\\r\\n        view\\r\\n        returns (int128)\\r\\n    {\\r\\n        uint256 tokenId = formatTokenId(\\r\\n            isCall ? TokenType.UNDERLYING_FREE_LIQ : TokenType.BASE_FREE_LIQ,\\r\\n            0,\\r\\n            0\\r\\n        );\\r\\n\\r\\n        return\\r\\n            ABDKMath64x64Token.fromDecimals(\\r\\n                ERC1155EnumerableStorage.layout().totalSupply[tokenId] -\\r\\n                    l.nextDeposits[isCall].totalPendingDeposits,\\r\\n                l.getTokenDecimals(isCall)\\r\\n            );\\r\\n    }\\r\\n\\r\\n    function getReinvestmentStatus(\\r\\n        Layout storage l,\\r\\n        address account,\\r\\n        bool isCallPool\\r\\n    ) internal view returns (bool) {\\r\\n        uint256 timestamp = l.divestmentTimestamps[account][isCallPool];\\r\\n        return timestamp == 0 || timestamp > block.timestamp;\\r\\n    }\\r\\n\\r\\n    function addUnderwriter(\\r\\n        Layout storage l,\\r\\n        address account,\\r\\n        bool isCallPool\\r\\n    ) internal {\\r\\n        require(account != address(0));\\r\\n\\r\\n        mapping(address => address) storage asc = l.liquidityQueueAscending[\\r\\n            isCallPool\\r\\n        ];\\r\\n        mapping(address => address) storage desc = l.liquidityQueueDescending[\\r\\n            isCallPool\\r\\n        ];\\r\\n\\r\\n        if (_isInQueue(account, asc, desc)) return;\\r\\n\\r\\n        address last = desc[address(0)];\\r\\n\\r\\n        asc[last] = account;\\r\\n        desc[account] = last;\\r\\n        desc[address(0)] = account;\\r\\n    }\\r\\n\\r\\n    function removeUnderwriter(\\r\\n        Layout storage l,\\r\\n        address account,\\r\\n        bool isCallPool\\r\\n    ) internal {\\r\\n        require(account != address(0));\\r\\n\\r\\n        mapping(address => address) storage asc = l.liquidityQueueAscending[\\r\\n            isCallPool\\r\\n        ];\\r\\n        mapping(address => address) storage desc = l.liquidityQueueDescending[\\r\\n            isCallPool\\r\\n        ];\\r\\n\\r\\n        if (!_isInQueue(account, asc, desc)) return;\\r\\n\\r\\n        address prev = desc[account];\\r\\n        address next = asc[account];\\r\\n        asc[prev] = next;\\r\\n        desc[next] = prev;\\r\\n        delete asc[account];\\r\\n        delete desc[account];\\r\\n    }\\r\\n\\r\\n    function isInQueue(\\r\\n        Layout storage l,\\r\\n        address account,\\r\\n        bool isCallPool\\r\\n    ) internal view returns (bool) {\\r\\n        mapping(address => address) storage asc = l.liquidityQueueAscending[\\r\\n            isCallPool\\r\\n        ];\\r\\n        mapping(address => address) storage desc = l.liquidityQueueDescending[\\r\\n            isCallPool\\r\\n        ];\\r\\n\\r\\n        return _isInQueue(account, asc, desc);\\r\\n    }\\r\\n\\r\\n    function _isInQueue(\\r\\n        address account,\\r\\n        mapping(address => address) storage asc,\\r\\n        mapping(address => address) storage desc\\r\\n    ) private view returns (bool) {\\r\\n        return asc[account] != address(0) || desc[address(0)] == account;\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @notice get current C-Level, without accounting for pending adjustments\\r\\n     * @param l storage layout struct\\r\\n     * @param isCall whether query is for call or put pool\\r\\n     * @return cLevel64x64 64x64 fixed point representation of C-Level\\r\\n     */\\r\\n    function getRawCLevel64x64(Layout storage l, bool isCall)\\r\\n        internal\\r\\n        view\\r\\n        returns (int128 cLevel64x64)\\r\\n    {\\r\\n        cLevel64x64 = isCall ? l.cLevelUnderlying64x64 : l.cLevelBase64x64;\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @notice get current C-Level, accounting for unrealized decay\\r\\n     * @param l storage layout struct\\r\\n     * @param isCall whether query is for call or put pool\\r\\n     * @return cLevel64x64 64x64 fixed point representation of C-Level\\r\\n     */\\r\\n    function getDecayAdjustedCLevel64x64(Layout storage l, bool isCall)\\r\\n        internal\\r\\n        view\\r\\n        returns (int128 cLevel64x64)\\r\\n    {\\r\\n        // get raw C-Level from storage\\r\\n        cLevel64x64 = l.getRawCLevel64x64(isCall);\\r\\n\\r\\n        // account for C-Level decay\\r\\n        cLevel64x64 = l.applyCLevelDecayAdjustment(cLevel64x64, isCall);\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @notice calculate updated C-Level, accounting for unrealized decay\\r\\n     * @param l storage layout struct\\r\\n     * @param oldCLevel64x64 64x64 fixed point representation pool C-Level before accounting for decay\\r\\n     * @param isCall whether query is for call or put pool\\r\\n     * @return cLevel64x64 64x64 fixed point representation of C-Level of Pool after accounting for decay\\r\\n     */\\r\\n    function applyCLevelDecayAdjustment(\\r\\n        Layout storage l,\\r\\n        int128 oldCLevel64x64,\\r\\n        bool isCall\\r\\n    ) internal view returns (int128 cLevel64x64) {\\r\\n        uint256 timeElapsed = block.timestamp -\\r\\n            (isCall ? l.cLevelUnderlyingUpdatedAt : l.cLevelBaseUpdatedAt);\\r\\n\\r\\n        // do not apply C decay if less than 24 hours have elapsed\\r\\n\\r\\n        if (timeElapsed > C_DECAY_BUFFER) {\\r\\n            timeElapsed -= C_DECAY_BUFFER;\\r\\n        } else {\\r\\n            return oldCLevel64x64;\\r\\n        }\\r\\n\\r\\n        int128 timeIntervalsElapsed64x64 = ABDKMath64x64.divu(\\r\\n            timeElapsed,\\r\\n            C_DECAY_INTERVAL\\r\\n        );\\r\\n\\r\\n        uint256 tokenId = formatTokenId(\\r\\n            isCall ? TokenType.UNDERLYING_FREE_LIQ : TokenType.BASE_FREE_LIQ,\\r\\n            0,\\r\\n            0\\r\\n        );\\r\\n\\r\\n        uint256 tvl = l.totalTVL[isCall];\\r\\n\\r\\n        int128 utilization = ABDKMath64x64.divu(\\r\\n            tvl -\\r\\n                (ERC1155EnumerableStorage.layout().totalSupply[tokenId] -\\r\\n                    l.nextDeposits[isCall].totalPendingDeposits),\\r\\n            tvl\\r\\n        );\\r\\n\\r\\n        return\\r\\n            OptionMath.calculateCLevelDecay(\\r\\n                OptionMath.CalculateCLevelDecayArgs(\\r\\n                    timeIntervalsElapsed64x64,\\r\\n                    oldCLevel64x64,\\r\\n                    utilization,\\r\\n                    0xb333333333333333, // 0.7\\r\\n                    0xe666666666666666, // 0.9\\r\\n                    0x10000000000000000, // 1.0\\r\\n                    0x10000000000000000, // 1.0\\r\\n                    0xe666666666666666, // 0.9\\r\\n                    0x56fc2a2c515da32ea // 2e\\r\\n                )\\r\\n            );\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @notice calculate updated C-Level, accounting for pending deposits\\r\\n     * @param l storage layout struct\\r\\n     * @param oldCLevel64x64 64x64 fixed point representation pool C-Level before accounting for liquidity change\\r\\n     * @param oldLiquidity64x64 64x64 fixed point representation of previous liquidity\\r\\n     * @param isCall whether to update C-Level for call or put pool\\r\\n     * @return cLevel64x64 64x64 fixed point representation of C-Level\\r\\n     * @return liquidity64x64 64x64 fixed point representation of new liquidity amount\\r\\n     */\\r\\n    function applyCLevelPendingDepositAdjustment(\\r\\n        Layout storage l,\\r\\n        int128 oldCLevel64x64,\\r\\n        int128 oldLiquidity64x64,\\r\\n        bool isCall\\r\\n    ) internal view returns (int128 cLevel64x64, int128 liquidity64x64) {\\r\\n        PoolStorage.BatchData storage batchData = l.nextDeposits[isCall];\\r\\n        int128 pendingDeposits64x64;\\r\\n\\r\\n        if (\\r\\n            batchData.totalPendingDeposits > 0 &&\\r\\n            batchData.eta != 0 &&\\r\\n            block.timestamp >= batchData.eta\\r\\n        ) {\\r\\n            pendingDeposits64x64 = ABDKMath64x64Token.fromDecimals(\\r\\n                batchData.totalPendingDeposits,\\r\\n                l.getTokenDecimals(isCall)\\r\\n            );\\r\\n\\r\\n            liquidity64x64 = oldLiquidity64x64.add(pendingDeposits64x64);\\r\\n\\r\\n            cLevel64x64 = l.applyCLevelLiquidityChangeAdjustment(\\r\\n                oldCLevel64x64,\\r\\n                oldLiquidity64x64,\\r\\n                liquidity64x64,\\r\\n                isCall\\r\\n            );\\r\\n        } else {\\r\\n            cLevel64x64 = oldCLevel64x64;\\r\\n            liquidity64x64 = oldLiquidity64x64;\\r\\n        }\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @notice calculate updated C-Level, accounting for change in liquidity\\r\\n     * @param l storage layout struct\\r\\n     * @param oldCLevel64x64 64x64 fixed point representation pool C-Level before accounting for liquidity change\\r\\n     * @param oldLiquidity64x64 64x64 fixed point representation of previous liquidity\\r\\n     * @param newLiquidity64x64 64x64 fixed point representation of current liquidity\\r\\n     * @param isCallPool whether to update C-Level for call or put pool\\r\\n     * @return cLevel64x64 64x64 fixed point representation of C-Level\\r\\n     */\\r\\n    function applyCLevelLiquidityChangeAdjustment(\\r\\n        Layout storage l,\\r\\n        int128 oldCLevel64x64,\\r\\n        int128 oldLiquidity64x64,\\r\\n        int128 newLiquidity64x64,\\r\\n        bool isCallPool\\r\\n    ) internal view returns (int128 cLevel64x64) {\\r\\n        int128 steepness64x64 = isCallPool\\r\\n            ? l.steepnessUnderlying64x64\\r\\n            : l.steepnessBase64x64;\\r\\n\\r\\n        // fallback to deprecated storage value if side-specific value is not set\\r\\n        if (steepness64x64 == 0) steepness64x64 = l._deprecated_steepness64x64;\\r\\n\\r\\n        cLevel64x64 = OptionMath.calculateCLevel(\\r\\n            oldCLevel64x64,\\r\\n            oldLiquidity64x64,\\r\\n            newLiquidity64x64,\\r\\n            steepness64x64\\r\\n        );\\r\\n\\r\\n        if (cLevel64x64 < 0xb333333333333333) {\\r\\n            cLevel64x64 = int128(0xb333333333333333); // 64x64 fixed point representation of 0.7\\r\\n        }\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @notice set C-Level to arbitrary pre-calculated value\\r\\n     * @param cLevel64x64 new C-Level of pool\\r\\n     * @param isCallPool whether to update C-Level for call or put pool\\r\\n     */\\r\\n    function setCLevel(\\r\\n        Layout storage l,\\r\\n        int128 cLevel64x64,\\r\\n        bool isCallPool\\r\\n    ) internal {\\r\\n        if (isCallPool) {\\r\\n            l.cLevelUnderlying64x64 = cLevel64x64;\\r\\n            l.cLevelUnderlyingUpdatedAt = block.timestamp;\\r\\n        } else {\\r\\n            l.cLevelBase64x64 = cLevel64x64;\\r\\n            l.cLevelBaseUpdatedAt = block.timestamp;\\r\\n        }\\r\\n    }\\r\\n\\r\\n    function setOracles(\\r\\n        Layout storage l,\\r\\n        address baseOracle,\\r\\n        address underlyingOracle\\r\\n    ) internal {\\r\\n        require(\\r\\n            AggregatorV3Interface(baseOracle).decimals() ==\\r\\n                AggregatorV3Interface(underlyingOracle).decimals(),\\r\\n            \\\"Pool: oracle decimals must match\\\"\\r\\n        );\\r\\n\\r\\n        l.baseOracle = baseOracle;\\r\\n        l.underlyingOracle = underlyingOracle;\\r\\n    }\\r\\n\\r\\n    function fetchPriceUpdate(Layout storage l)\\r\\n        internal\\r\\n        view\\r\\n        returns (int128 price64x64)\\r\\n    {\\r\\n        int256 priceUnderlying = AggregatorInterface(l.underlyingOracle)\\r\\n            .latestAnswer();\\r\\n        int256 priceBase = AggregatorInterface(l.baseOracle).latestAnswer();\\r\\n\\r\\n        return ABDKMath64x64.divi(priceUnderlying, priceBase);\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @notice set price update for hourly bucket corresponding to given timestamp\\r\\n     * @param l storage layout struct\\r\\n     * @param timestamp timestamp to update\\r\\n     * @param price64x64 64x64 fixed point representation of price\\r\\n     */\\r\\n    function setPriceUpdate(\\r\\n        Layout storage l,\\r\\n        uint256 timestamp,\\r\\n        int128 price64x64\\r\\n    ) internal {\\r\\n        uint256 bucket = timestamp / (1 hours);\\r\\n        l.bucketPrices64x64[bucket] = price64x64;\\r\\n        l.priceUpdateSequences[bucket >> 8] += 1 << (255 - (bucket & 255));\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @notice get price update for hourly bucket corresponding to given timestamp\\r\\n     * @param l storage layout struct\\r\\n     * @param timestamp timestamp to query\\r\\n     * @return 64x64 fixed point representation of price\\r\\n     */\\r\\n    function getPriceUpdate(Layout storage l, uint256 timestamp)\\r\\n        internal\\r\\n        view\\r\\n        returns (int128)\\r\\n    {\\r\\n        return l.bucketPrices64x64[timestamp / (1 hours)];\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @notice get first price update available following given timestamp\\r\\n     * @param l storage layout struct\\r\\n     * @param timestamp timestamp to query\\r\\n     * @return 64x64 fixed point representation of price\\r\\n     */\\r\\n    function getPriceUpdateAfter(Layout storage l, uint256 timestamp)\\r\\n        internal\\r\\n        view\\r\\n        returns (int128)\\r\\n    {\\r\\n        // price updates are grouped into hourly buckets\\r\\n        uint256 bucket = timestamp / (1 hours);\\r\\n        // divide by 256 to get the index of the relevant price update sequence\\r\\n        uint256 sequenceId = bucket >> 8;\\r\\n\\r\\n        // get position within sequence relevant to current price update\\r\\n\\r\\n        uint256 offset = bucket & 255;\\r\\n        // shift to skip buckets from earlier in sequence\\r\\n        uint256 sequence = (l.priceUpdateSequences[sequenceId] << offset) >>\\r\\n            offset;\\r\\n\\r\\n        // iterate through future sequences until a price update is found\\r\\n        // sequence corresponding to current timestamp used as upper bound\\r\\n\\r\\n        uint256 currentPriceUpdateSequenceId = block.timestamp / (256 hours);\\r\\n\\r\\n        while (sequence == 0 && sequenceId <= currentPriceUpdateSequenceId) {\\r\\n            sequence = l.priceUpdateSequences[++sequenceId];\\r\\n        }\\r\\n\\r\\n        // if no price update is found (sequence == 0) function will return 0\\r\\n        // this should never occur, as each relevant external function triggers a price update\\r\\n\\r\\n        // the most significant bit of the sequence corresponds to the offset of the relevant bucket\\r\\n\\r\\n        uint256 msb;\\r\\n\\r\\n        for (uint256 i = 128; i > 0; i >>= 1) {\\r\\n            if (sequence >> i > 0) {\\r\\n                msb += i;\\r\\n                sequence >>= i;\\r\\n            }\\r\\n        }\\r\\n\\r\\n        return l.bucketPrices64x64[((sequenceId + 1) << 8) - msb - 1];\\r\\n    }\\r\\n\\r\\n    function fromBaseToUnderlyingDecimals(Layout storage l, uint256 value)\\r\\n        internal\\r\\n        view\\r\\n        returns (uint256)\\r\\n    {\\r\\n        int128 valueFixed64x64 = ABDKMath64x64Token.fromDecimals(\\r\\n            value,\\r\\n            l.baseDecimals\\r\\n        );\\r\\n        return\\r\\n            ABDKMath64x64Token.toDecimals(\\r\\n                valueFixed64x64,\\r\\n                l.underlyingDecimals\\r\\n            );\\r\\n    }\\r\\n\\r\\n    function fromUnderlyingToBaseDecimals(Layout storage l, uint256 value)\\r\\n        internal\\r\\n        view\\r\\n        returns (uint256)\\r\\n    {\\r\\n        int128 valueFixed64x64 = ABDKMath64x64Token.fromDecimals(\\r\\n            value,\\r\\n            l.underlyingDecimals\\r\\n        );\\r\\n        return ABDKMath64x64Token.toDecimals(valueFixed64x64, l.baseDecimals);\\r\\n    }\\r\\n}\\r\\n\"\r\n    },\r\n    \"@chainlink/contracts/src/v0.8/interfaces/AggregatorInterface.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.0;\\n\\ninterface AggregatorInterface {\\n  function latestAnswer()\\n    external\\n    view\\n    returns (\\n      int256\\n    );\\n  \\n  function latestTimestamp()\\n    external\\n    view\\n    returns (\\n      uint256\\n    );\\n\\n  function latestRound()\\n    external\\n    view\\n    returns (\\n      uint256\\n    );\\n\\n  function getAnswer(\\n    uint256 roundId\\n  )\\n    external\\n    view\\n    returns (\\n      int256\\n    );\\n\\n  function getTimestamp(\\n    uint256 roundId\\n  )\\n    external\\n    view\\n    returns (\\n      uint256\\n    );\\n\\n  event AnswerUpdated(\\n    int256 indexed current,\\n    uint256 indexed roundId,\\n    uint256 updatedAt\\n  );\\n\\n  event NewRound(\\n    uint256 indexed roundId,\\n    address indexed startedBy,\\n    uint256 startedAt\\n  );\\n}\\n\"\r\n    },\r\n    \"@chainlink/contracts/src/v0.8/interfaces/AggregatorV3Interface.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.0;\\n\\ninterface AggregatorV3Interface {\\n\\n  function decimals()\\n    external\\n    view\\n    returns (\\n      uint8\\n    );\\n\\n  function description()\\n    external\\n    view\\n    returns (\\n      string memory\\n    );\\n\\n  function version()\\n    external\\n    view\\n    returns (\\n      uint256\\n    );\\n\\n  // getRoundData and latestRoundData should both raise \\\"No data present\\\"\\n  // if they do not have data to report, instead of returning unset values\\n  // which could be misinterpreted as actual reported values.\\n  function getRoundData(\\n    uint80 _roundId\\n  )\\n    external\\n    view\\n    returns (\\n      uint80 roundId,\\n      int256 answer,\\n      uint256 startedAt,\\n      uint256 updatedAt,\\n      uint80 answeredInRound\\n    );\\n\\n  function latestRoundData()\\n    external\\n    view\\n    returns (\\n      uint80 roundId,\\n      int256 answer,\\n      uint256 startedAt,\\n      uint256 updatedAt,\\n      uint80 answeredInRound\\n    );\\n\\n}\\n\"\r\n    },\r\n    \"@solidstate/contracts/token/ERC1155/enumerable/ERC1155EnumerableStorage.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\nimport { EnumerableSet } from '../../../utils/EnumerableSet.sol';\\n\\nlibrary ERC1155EnumerableStorage {\\n    struct Layout {\\n        mapping(uint256 => uint256) totalSupply;\\n        mapping(uint256 => EnumerableSet.AddressSet) accountsByToken;\\n        mapping(address => EnumerableSet.UintSet) tokensByAccount;\\n    }\\n\\n    bytes32 internal constant STORAGE_SLOT =\\n        keccak256('solidstate.contracts.storage.ERC1155Enumerable');\\n\\n    function layout() internal pure returns (Layout storage l) {\\n        bytes32 slot = STORAGE_SLOT;\\n        assembly {\\n            l.slot := slot\\n        }\\n    }\\n}\\n\"\r\n    },\r\n    \"abdk-libraries-solidity/ABDKMath64x64.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: BSD-4-Clause\\n/*\\n * ABDK Math 64.64 Smart Contract Library.  Copyright © 2019 by ABDK Consulting.\\n * Author: Mikhail Vladimirov <mikhail.vladimirov@gmail.com>\\n */\\npragma solidity ^0.8.0;\\n\\n/**\\n * Smart contract library of mathematical functions operating with signed\\n * 64.64-bit fixed point numbers.  Signed 64.64-bit fixed point number is\\n * basically a simple fraction whose numerator is signed 128-bit integer and\\n * denominator is 2^64.  As long as denominator is always the same, there is no\\n * need to store it, thus in Solidity signed 64.64-bit fixed point numbers are\\n * represented by int128 type holding only the numerator.\\n */\\nlibrary ABDKMath64x64 {\\n  /*\\n   * Minimum value signed 64.64-bit fixed point number may have. \\n   */\\n  int128 private constant MIN_64x64 = -0x80000000000000000000000000000000;\\n\\n  /*\\n   * Maximum value signed 64.64-bit fixed point number may have. \\n   */\\n  int128 private constant MAX_64x64 = 0x7FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF;\\n\\n  /**\\n   * Convert signed 256-bit integer number into signed 64.64-bit fixed point\\n   * number.  Revert on overflow.\\n   *\\n   * @param x signed 256-bit integer number\\n   * @return signed 64.64-bit fixed point number\\n   */\\n  function fromInt (int256 x) internal pure returns (int128) {\\n    unchecked {\\n      require (x >= -0x8000000000000000 && x <= 0x7FFFFFFFFFFFFFFF);\\n      return int128 (x << 64);\\n    }\\n  }\\n\\n  /**\\n   * Convert signed 64.64 fixed point number into signed 64-bit integer number\\n   * rounding down.\\n   *\\n   * @param x signed 64.64-bit fixed point number\\n   * @return signed 64-bit integer number\\n   */\\n  function toInt (int128 x) internal pure returns (int64) {\\n    unchecked {\\n      return int64 (x >> 64);\\n    }\\n  }\\n\\n  /**\\n   * Convert unsigned 256-bit integer number into signed 64.64-bit fixed point\\n   * number.  Revert on overflow.\\n   *\\n   * @param x unsigned 256-bit integer number\\n   * @return signed 64.64-bit fixed point number\\n   */\\n  function fromUInt (uint256 x) internal pure returns (int128) {\\n    unchecked {\\n      require (x <= 0x7FFFFFFFFFFFFFFF);\\n      return int128 (int256 (x << 64));\\n    }\\n  }\\n\\n  /**\\n   * Convert signed 64.64 fixed point number into unsigned 64-bit integer\\n   * number rounding down.  Revert on underflow.\\n   *\\n   * @param x signed 64.64-bit fixed point number\\n   * @return unsigned 64-bit integer number\\n   */\\n  function toUInt (int128 x) internal pure returns (uint64) {\\n    unchecked {\\n      require (x >= 0);\\n      return uint64 (uint128 (x >> 64));\\n    }\\n  }\\n\\n  /**\\n   * Convert signed 128.128 fixed point number into signed 64.64-bit fixed point\\n   * number rounding down.  Revert on overflow.\\n   *\\n   * @param x signed 128.128-bin fixed point number\\n   * @return signed 64.64-bit fixed point number\\n   */\\n  function from128x128 (int256 x) internal pure returns (int128) {\\n    unchecked {\\n      int256 result = x >> 64;\\n      require (result >= MIN_64x64 && result <= MAX_64x64);\\n      return int128 (result);\\n    }\\n  }\\n\\n  /**\\n   * Convert signed 64.64 fixed point number into signed 128.128 fixed point\\n   * number.\\n   *\\n   * @param x signed 64.64-bit fixed point number\\n   * @return signed 128.128 fixed point number\\n   */\\n  function to128x128 (int128 x) internal pure returns (int256) {\\n    unchecked {\\n      return int256 (x) << 64;\\n    }\\n  }\\n\\n  /**\\n   * Calculate x + y.  Revert on overflow.\\n   *\\n   * @param x signed 64.64-bit fixed point number\\n   * @param y signed 64.64-bit fixed point number\\n   * @return signed 64.64-bit fixed point number\\n   */\\n  function add (int128 x, int128 y) internal pure returns (int128) {\\n    unchecked {\\n      int256 result = int256(x) + y;\\n      require (result >= MIN_64x64 && result <= MAX_64x64);\\n      return int128 (result);\\n    }\\n  }\\n\\n  /**\\n   * Calculate x - y.  Revert on overflow.\\n   *\\n   * @param x signed 64.64-bit fixed point number\\n   * @param y signed 64.64-bit fixed point number\\n   * @return signed 64.64-bit fixed point number\\n   */\\n  function sub (int128 x, int128 y) internal pure returns (int128) {\\n    unchecked {\\n      int256 result = int256(x) - y;\\n      require (result >= MIN_64x64 && result <= MAX_64x64);\\n      return int128 (result);\\n    }\\n  }\\n\\n  /**\\n   * Calculate x * y rounding down.  Revert on overflow.\\n   *\\n   * @param x signed 64.64-bit fixed point number\\n   * @param y signed 64.64-bit fixed point number\\n   * @return signed 64.64-bit fixed point number\\n   */\\n  function mul (int128 x, int128 y) internal pure returns (int128) {\\n    unchecked {\\n      int256 result = int256(x) * y >> 64;\\n      require (result >= MIN_64x64 && result <= MAX_64x64);\\n      return int128 (result);\\n    }\\n  }\\n\\n  /**\\n   * Calculate x * y rounding towards zero, where x is signed 64.64 fixed point\\n   * number and y is signed 256-bit integer number.  Revert on overflow.\\n   *\\n   * @param x signed 64.64 fixed point number\\n   * @param y signed 256-bit integer number\\n   * @return signed 256-bit integer number\\n   */\\n  function muli (int128 x, int256 y) internal pure returns (int256) {\\n    unchecked {\\n      if (x == MIN_64x64) {\\n        require (y >= -0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF &&\\n          y <= 0x1000000000000000000000000000000000000000000000000);\\n        return -y << 63;\\n      } else {\\n        bool negativeResult = false;\\n        if (x < 0) {\\n          x = -x;\\n          negativeResult = true;\\n        }\\n        if (y < 0) {\\n          y = -y; // We rely on overflow behavior here\\n          negativeResult = !negativeResult;\\n        }\\n        uint256 absoluteResult = mulu (x, uint256 (y));\\n        if (negativeResult) {\\n          require (absoluteResult <=\\n            0x8000000000000000000000000000000000000000000000000000000000000000);\\n          return -int256 (absoluteResult); // We rely on overflow behavior here\\n        } else {\\n          require (absoluteResult <=\\n            0x7FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF);\\n          return int256 (absoluteResult);\\n        }\\n      }\\n    }\\n  }\\n\\n  /**\\n   * Calculate x * y rounding down, where x is signed 64.64 fixed point number\\n   * and y is unsigned 256-bit integer number.  Revert on overflow.\\n   *\\n   * @param x signed 64.64 fixed point number\\n   * @param y unsigned 256-bit integer number\\n   * @return unsigned 256-bit integer number\\n   */\\n  function mulu (int128 x, uint256 y) internal pure returns (uint256) {\\n    unchecked {\\n      if (y == 0) return 0;\\n\\n      require (x >= 0);\\n\\n      uint256 lo = (uint256 (int256 (x)) * (y & 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF)) >> 64;\\n      uint256 hi = uint256 (int256 (x)) * (y >> 128);\\n\\n      require (hi <= 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF);\\n      hi <<= 64;\\n\\n      require (hi <=\\n        0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF - lo);\\n      return hi + lo;\\n    }\\n  }\\n\\n  /**\\n   * Calculate x / y rounding towards zero.  Revert on overflow or when y is\\n   * zero.\\n   *\\n   * @param x signed 64.64-bit fixed point number\\n   * @param y signed 64.64-bit fixed point number\\n   * @return signed 64.64-bit fixed point number\\n   */\\n  function div (int128 x, int128 y) internal pure returns (int128) {\\n    unchecked {\\n      require (y != 0);\\n      int256 result = (int256 (x) << 64) / y;\\n      require (result >= MIN_64x64 && result <= MAX_64x64);\\n      return int128 (result);\\n    }\\n  }\\n\\n  /**\\n   * Calculate x / y rounding towards zero, where x and y are signed 256-bit\\n   * integer numbers.  Revert on overflow or when y is zero.\\n   *\\n   * @param x signed 256-bit integer number\\n   * @param y signed 256-bit integer number\\n   * @return signed 64.64-bit fixed point number\\n   */\\n  function divi (int256 x, int256 y) internal pure returns (int128) {\\n    unchecked {\\n      require (y != 0);\\n\\n      bool negativeResult = false;\\n      if (x < 0) {\\n        x = -x; // We rely on overflow behavior here\\n        negativeResult = true;\\n      }\\n      if (y < 0) {\\n        y = -y; // We rely on overflow behavior here\\n        negativeResult = !negativeResult;\\n      }\\n      uint128 absoluteResult = divuu (uint256 (x), uint256 (y));\\n      if (negativeResult) {\\n        require (absoluteResult <= 0x80000000000000000000000000000000);\\n        return -int128 (absoluteResult); // We rely on overflow behavior here\\n      } else {\\n        require (absoluteResult <= 0x7FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF);\\n        return int128 (absoluteResult); // We rely on overflow behavior here\\n      }\\n    }\\n  }\\n\\n  /**\\n   * Calculate x / y rounding towards zero, where x and y are unsigned 256-bit\\n   * integer numbers.  Revert on overflow or when y is zero.\\n   *\\n   * @param x unsigned 256-bit integer number\\n   * @param y unsigned 256-bit integer number\\n   * @return signed 64.64-bit fixed point number\\n   */\\n  function divu (uint256 x, uint256 y) internal pure returns (int128) {\\n    unchecked {\\n      require (y != 0);\\n      uint128 result = divuu (x, y);\\n      require (result <= uint128 (MAX_64x64));\\n      return int128 (result);\\n    }\\n  }\\n\\n  /**\\n   * Calculate -x.  Revert on overflow.\\n   *\\n   * @param x signed 64.64-bit fixed point number\\n   * @return signed 64.64-bit fixed point number\\n   */\\n  function neg (int128 x) internal pure returns (int128) {\\n    unchecked {\\n      require (x != MIN_64x64);\\n      return -x;\\n    }\\n  }\\n\\n  /**\\n   * Calculate |x|.  Revert on overflow.\\n   *\\n   * @param x signed 64.64-bit fixed point number\\n   * @return signed 64.64-bit fixed point number\\n   */\\n  function abs (int128 x) internal pure returns (int128) {\\n    unchecked {\\n      require (x != MIN_64x64);\\n      return x < 0 ? -x : x;\\n    }\\n  }\\n\\n  /**\\n   * Calculate 1 / x rounding towards zero.  Revert on overflow or when x is\\n   * zero.\\n   *\\n   * @param x signed 64.64-bit fixed point number\\n   * @return signed 64.64-bit fixed point number\\n   */\\n  function inv (int128 x) internal pure returns (int128) {\\n    unchecked {\\n      require (x != 0);\\n      int256 result = int256 (0x100000000000000000000000000000000) / x;\\n      require (result >= MIN_64x64 && result <= MAX_64x64);\\n      return int128 (result);\\n    }\\n  }\\n\\n  /**\\n   * Calculate arithmetics average of x and y, i.e. (x + y) / 2 rounding down.\\n   *\\n   * @param x signed 64.64-bit fixed point number\\n   * @param y signed 64.64-bit fixed point number\\n   * @return signed 64.64-bit fixed point number\\n   */\\n  function avg (int128 x, int128 y) internal pure returns (int128) {\\n    unchecked {\\n      return int128 ((int256 (x) + int256 (y)) >> 1);\\n    }\\n  }\\n\\n  /**\\n   * Calculate geometric average of x and y, i.e. sqrt (x * y) rounding down.\\n   * Revert on overflow or in case x * y is negative.\\n   *\\n   * @param x signed 64.64-bit fixed point number\\n   * @param y signed 64.64-bit fixed point number\\n   * @return signed 64.64-bit fixed point number\\n   */\\n  function gavg (int128 x, int128 y) internal pure returns (int128) {\\n    unchecked {\\n      int256 m = int256 (x) * int256 (y);\\n      require (m >= 0);\\n      require (m <\\n          0x4000000000000000000000000000000000000000000000000000000000000000);\\n      return int128 (sqrtu (uint256 (m)));\\n    }\\n  }\\n\\n  /**\\n   * Calculate x^y assuming 0^0 is 1, where x is signed 64.64 fixed point number\\n   * and y is unsigned 256-bit integer number.  Revert on overflow.\\n   *\\n   * @param x signed 64.64-bit fixed point number\\n   * @param y uint256 value\\n   * @return signed 64.64-bit fixed point number\\n   */\\n  function pow (int128 x, uint256 y) internal pure returns (int128) {\\n    unchecked {\\n      bool negative = x < 0 && y & 1 == 1;\\n\\n      uint256 absX = uint128 (x < 0 ? -x : x);\\n      uint256 absResult;\\n      absResult = 0x100000000000000000000000000000000;\\n\\n      if (absX <= 0x10000000000000000) {\\n        absX <<= 63;\\n        while (y != 0) {\\n          if (y & 0x1 != 0) {\\n            absResult = absResult * absX >> 127;\\n          }\\n          absX = absX * absX >> 127;\\n\\n          if (y & 0x2 != 0) {\\n            absResult = absResult * absX >> 127;\\n          }\\n          absX = absX * absX >> 127;\\n\\n          if (y & 0x4 != 0) {\\n            absResult = absResult * absX >> 127;\\n          }\\n          absX = absX * absX >> 127;\\n\\n          if (y & 0x8 != 0) {\\n            absResult = absResult * absX >> 127;\\n          }\\n          absX = absX * absX >> 127;\\n\\n          y >>= 4;\\n        }\\n\\n        absResult >>= 64;\\n      } else {\\n        uint256 absXShift = 63;\\n        if (absX < 0x1000000000000000000000000) { absX <<= 32; absXShift -= 32; }\\n        if (absX < 0x10000000000000000000000000000) { absX <<= 16; absXShift -= 16; }\\n        if (absX < 0x1000000000000000000000000000000) { absX <<= 8; absXShift -= 8; }\\n        if (absX < 0x10000000000000000000000000000000) { absX <<= 4; absXShift -= 4; }\\n        if (absX < 0x40000000000000000000000000000000) { absX <<= 2; absXShift -= 2; }\\n        if (absX < 0x80000000000000000000000000000000) { absX <<= 1; absXShift -= 1; }\\n\\n        uint256 resultShift = 0;\\n        while (y != 0) {\\n          require (absXShift < 64);\\n\\n          if (y & 0x1 != 0) {\\n            absResult = absResult * absX >> 127;\\n            resultShift += absXShift;\\n            if (absResult > 0x100000000000000000000000000000000) {\\n              absResult >>= 1;\\n              resultShift += 1;\\n            }\\n          }\\n          absX = absX * absX >> 127;\\n          absXShift <<= 1;\\n          if (absX >= 0x100000000000000000000000000000000) {\\n              absX >>= 1;\\n              absXShift += 1;\\n          }\\n\\n          y >>= 1;\\n        }\\n\\n        require (resultShift < 64);\\n        absResult >>= 64 - resultShift;\\n      }\\n      int256 result = negative ? -int256 (absResult) : int256 (absResult);\\n      require (result >= MIN_64x64 && result <= MAX_64x64);\\n      return int128 (result);\\n    }\\n  }\\n\\n  /**\\n   * Calculate sqrt (x) rounding down.  Revert if x < 0.\\n   *\\n   * @param x signed 64.64-bit fixed point number\\n   * @return signed 64.64-bit fixed point number\\n   */\\n  function sqrt (int128 x) internal pure returns (int128) {\\n    unchecked {\\n      require (x >= 0);\\n      return int128 (sqrtu (uint256 (int256 (x)) << 64));\\n    }\\n  }\\n\\n  /**\\n   * Calculate binary logarithm of x.  Revert if x <= 0.\\n   *\\n   * @param x signed 64.64-bit fixed point number\\n   * @return signed 64.64-bit fixed point number\\n   */\\n  function log_2 (int128 x) internal pure returns (int128) {\\n    unchecked {\\n      require (x > 0);\\n\\n      int256 msb = 0;\\n      int256 xc = x;\\n      if (xc >= 0x10000000000000000) { xc >>= 64; msb += 64; }\\n      if (xc >= 0x100000000) { xc >>= 32; msb += 32; }\\n      if (xc >= 0x10000) { xc >>= 16; msb += 16; }\\n      if (xc >= 0x100) { xc >>= 8; msb += 8; }\\n      if (xc >= 0x10) { xc >>= 4; msb += 4; }\\n      if (xc >= 0x4) { xc >>= 2; msb += 2; }\\n      if (xc >= 0x2) msb += 1;  // No need to shift xc anymore\\n\\n      int256 result = msb - 64 << 64;\\n      uint256 ux = uint256 (int256 (x)) << uint256 (127 - msb);\\n      for (int256 bit = 0x8000000000000000; bit > 0; bit >>= 1) {\\n        ux *= ux;\\n        uint256 b = ux >> 255;\\n        ux >>= 127 + b;\\n        result += bit * int256 (b);\\n      }\\n\\n      return int128 (result);\\n    }\\n  }\\n\\n  /**\\n   * Calculate natural logarithm of x.  Revert if x <= 0.\\n   *\\n   * @param x signed 64.64-bit fixed point number\\n   * @return signed 64.64-bit fixed point number\\n   */\\n  function ln (int128 x) internal pure returns (int128) {\\n    unchecked {\\n      require (x > 0);\\n\\n      return int128 (int256 (\\n          uint256 (int256 (log_2 (x))) * 0xB17217F7D1CF79ABC9E3B39803F2F6AF >> 128));\\n    }\\n  }\\n\\n  /**\\n   * Calculate binary exponent of x.  Revert on overflow.\\n   *\\n   * @param x signed 64.64-bit fixed point number\\n   * @return signed 64.64-bit fixed point number\\n   */\\n  function exp_2 (int128 x) internal pure returns (int128) {\\n    unchecked {\\n      require (x < 0x400000000000000000); // Overflow\\n\\n      if (x < -0x400000000000000000) return 0; // Underflow\\n\\n      uint256 result = 0x80000000000000000000000000000000;\\n\\n      if (x & 0x8000000000000000 > 0)\\n        result = result * 0x16A09E667F3BCC908B2FB1366EA957D3E >> 128;\\n      if (x & 0x4000000000000000 > 0)\\n        result = result * 0x1306FE0A31B7152DE8D5A46305C85EDEC >> 128;\\n      if (x & 0x2000000000000000 > 0)\\n        result = result * 0x1172B83C7D517ADCDF7C8C50EB14A791F >> 128;\\n      if (x & 0x1000000000000000 > 0)\\n        result = result * 0x10B5586CF9890F6298B92B71842A98363 >> 128;\\n      if (x & 0x800000000000000 > 0)\\n        result = result * 0x1059B0D31585743AE7C548EB68CA417FD >> 128;\\n      if (x & 0x400000000000000 > 0)\\n        result = result * 0x102C9A3E778060EE6F7CACA4F7A29BDE8 >> 128;\\n      if (x & 0x200000000000000 > 0)\\n        result = result * 0x10163DA9FB33356D84A66AE336DCDFA3F >> 128;\\n      if (x & 0x100000000000000 > 0)\\n        result = result * 0x100B1AFA5ABCBED6129AB13EC11DC9543 >> 128;\\n      if (x & 0x80000000000000 > 0)\\n        result = result * 0x10058C86DA1C09EA1FF19D294CF2F679B >> 128;\\n      if (x & 0x40000000000000 > 0)\\n        result = result * 0x1002C605E2E8CEC506D21BFC89A23A00F >> 128;\\n      if (x & 0x20000000000000 > 0)\\n        result = result * 0x100162F3904051FA128BCA9C55C31E5DF >> 128;\\n      if (x & 0x10000000000000 > 0)\\n        result = result * 0x1000B175EFFDC76BA38E31671CA939725 >> 128;\\n      if (x & 0x8000000000000 > 0)\\n        result = result * 0x100058BA01FB9F96D6CACD4B180917C3D >> 128;\\n      if (x & 0x4000000000000 > 0)\\n        result = result * 0x10002C5CC37DA9491D0985C348C68E7B3 >> 128;\\n      if (x & 0x2000000000000 > 0)\\n        result = result * 0x1000162E525EE054754457D5995292026 >> 128;\\n      if (x & 0x1000000000000 > 0)\\n        result = result * 0x10000B17255775C040618BF4A4ADE83FC >> 128;\\n      if (x & 0x800000000000 > 0)\\n        result = result * 0x1000058B91B5BC9AE2EED81E9B7D4CFAB >> 128;\\n      if (x & 0x400000000000 > 0)\\n        result = result * 0x100002C5C89D5EC6CA4D7C8ACC017B7C9 >> 128;\\n      if (x & 0x200000000000 > 0)\\n        result = result * 0x10000162E43F4F831060E02D839A9D16D >> 128;\\n      if (x & 0x100000000000 > 0)\\n        result = result * 0x100000B1721BCFC99D9F890EA06911763 >> 128;\\n      if (x & 0x80000000000 > 0)\\n        result = result * 0x10000058B90CF1E6D97F9CA14DBCC1628 >> 128;\\n      if (x & 0x40000000000 > 0)\\n        result = result * 0x1000002C5C863B73F016468F6BAC5CA2B >> 128;\\n      if (x & 0x20000000000 > 0)\\n        result = result * 0x100000162E430E5A18F6119E3C02282A5 >> 128;\\n      if (x & 0x10000000000 > 0)\\n        result = result * 0x1000000B1721835514B86E6D96EFD1BFE >> 128;\\n      if (x & 0x8000000000 > 0)\\n        result = result * 0x100000058B90C0B48C6BE5DF846C5B2EF >> 128;\\n      if (x & 0x4000000000 > 0)\\n        result = result * 0x10000002C5C8601CC6B9E94213C72737A >> 128;\\n      if (x & 0x2000000000 > 0)\\n        result = result * 0x1000000162E42FFF037DF38AA2B219F06 >> 128;\\n      if (x & 0x1000000000 > 0)\\n        result = result * 0x10000000B17217FBA9C739AA5819F44F9 >> 128;\\n      if (x & 0x800000000 > 0)\\n        result = result * 0x1000000058B90BFCDEE5ACD3C1CEDC823 >> 128;\\n      if (x & 0x400000000 > 0)\\n        result = result * 0x100000002C5C85FE31F35A6A30DA1BE50 >> 128;\\n      if (x & 0x200000000 > 0)\\n        result = result * 0x10000000162E42FF0999CE3541B9FFFCF >> 128;\\n      if (x & 0x100000000 > 0)\\n        result = result * 0x100000000B17217F80F4EF5AADDA45554 >> 128;\\n      if (x & 0x80000000 > 0)\\n        result = result * 0x10000000058B90BFBF8479BD5A81B51AD >> 128;\\n      if (x & 0x40000000 > 0)\\n        result = result * 0x1000000002C5C85FDF84BD62AE30A74CC >> 128;\\n      if (x & 0x20000000 > 0)\\n        result = result * 0x100000000162E42FEFB2FED257559BDAA >> 128;\\n      if (x & 0x10000000 > 0)\\n        result = result * 0x1000000000B17217F7D5A7716BBA4A9AE >> 128;\\n      if (x & 0x8000000 > 0)\\n        result = result * 0x100000000058B90BFBE9DDBAC5E109CCE >> 128;\\n      if (x & 0x4000000 > 0)\\n        result = result * 0x10000000002C5C85FDF4B15DE6F17EB0D >> 128;\\n      if (x & 0x2000000 > 0)\\n        result = result * 0x1000000000162E42FEFA494F1478FDE05 >> 128;\\n      if (x & 0x1000000 > 0)\\n        result = result * 0x10000000000B17217F7D20CF927C8E94C >> 128;\\n      if (x & 0x800000 > 0)\\n        result = result * 0x1000000000058B90BFBE8F71CB4E4B33D >> 128;\\n      if (x & 0x400000 > 0)\\n        result = result * 0x100000000002C5C85FDF477B662B26945 >> 128;\\n      if (x & 0x200000 > 0)\\n        result = result * 0x10000000000162E42FEFA3AE53369388C >> 128;\\n      if (x & 0x100000 > 0)\\n        result = result * 0x100000000000B17217F7D1D351A389D40 >> 128;\\n      if (x & 0x80000 > 0)\\n        result = result * 0x10000000000058B90BFBE8E8B2D3D4EDE >> 128;\\n      if (x & 0x40000 > 0)\\n        result = result * 0x1000000000002C5C85FDF4741BEA6E77E >> 128;\\n      if (x & 0x20000 > 0)\\n        result = result * 0x100000000000162E42FEFA39FE95583C2 >> 128;\\n      if (x & 0x10000 > 0)\\n        result = result * 0x1000000000000B17217F7D1CFB72B45E1 >> 128;\\n      if (x & 0x8000 > 0)\\n        result = result * 0x100000000000058B90BFBE8E7CC35C3F0 >> 128;\\n      if (x & 0x4000 > 0)\\n        result = result * 0x10000000000002C5C85FDF473E242EA38 >> 128;\\n      if (x & 0x2000 > 0)\\n        result = result * 0x1000000000000162E42FEFA39F02B772C >> 128;\\n      if (x & 0x1000 > 0)\\n        result = result * 0x10000000000000B17217F7D1CF7D83C1A >> 128;\\n      if (x & 0x800 > 0)\\n        result = result * 0x1000000000000058B90BFBE8E7BDCBE2E >> 128;\\n      if (x & 0x400 > 0)\\n        result = result * 0x100000000000002C5C85FDF473DEA871F >> 128;\\n      if (x & 0x200 > 0)\\n        result = result * 0x10000000000000162E42FEFA39EF44D91 >> 128;\\n      if (x & 0x100 > 0)\\n        result = result * 0x100000000000000B17217F7D1CF79E949 >> 128;\\n      if (x & 0x80 > 0)\\n        result = result * 0x10000000000000058B90BFBE8E7BCE544 >> 128;\\n      if (x & 0x40 > 0)\\n        result = result * 0x1000000000000002C5C85FDF473DE6ECA >> 128;\\n      if (x & 0x20 > 0)\\n        result = result * 0x100000000000000162E42FEFA39EF366F >> 128;\\n      if (x & 0x10 > 0)\\n        result = result * 0x1000000000000000B17217F7D1CF79AFA >> 128;\\n      if (x & 0x8 > 0)\\n        result = result * 0x100000000000000058B90BFBE8E7BCD6D >> 128;\\n      if (x & 0x4 > 0)\\n        result = result * 0x10000000000000002C5C85FDF473DE6B2 >> 128;\\n      if (x & 0x2 > 0)\\n        result = result * 0x1000000000000000162E42FEFA39EF358 >> 128;\\n      if (x & 0x1 > 0)\\n        result = result * 0x10000000000000000B17217F7D1CF79AB >> 128;\\n\\n      result >>= uint256 (int256 (63 - (x >> 64)));\\n      require (result <= uint256 (int256 (MAX_64x64)));\\n\\n      return int128 (int256 (result));\\n    }\\n  }\\n\\n  /**\\n   * Calculate natural exponent of x.  Revert on overflow.\\n   *\\n   * @param x signed 64.64-bit fixed point number\\n   * @return signed 64.64-bit fixed point number\\n   */\\n  function exp (int128 x) internal pure returns (int128) {\\n    unchecked {\\n      require (x < 0x400000000000000000); // Overflow\\n\\n      if (x < -0x400000000000000000) return 0; // Underflow\\n\\n      return exp_2 (\\n          int128 (int256 (x) * 0x171547652B82FE1777D0FFDA0D23A7D12 >> 128));\\n    }\\n  }\\n\\n  /**\\n   * Calculate x / y rounding towards zero, where x and y are unsigned 256-bit\\n   * integer numbers.  Revert on overflow or when y is zero.\\n   *\\n   * @param x unsigned 256-bit integer number\\n   * @param y unsigned 256-bit integer number\\n   * @return unsigned 64.64-bit fixed point number\\n   */\\n  function divuu (uint256 x, uint256 y) private pure returns (uint128) {\\n    unchecked {\\n      require (y != 0);\\n\\n      uint256 result;\\n\\n      if (x <= 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF)\\n        result = (x << 64) / y;\\n      else {\\n        uint256 msb = 192;\\n        uint256 xc = x >> 192;\\n        if (xc >= 0x100000000) { xc >>= 32; msb += 32; }\\n        if (xc >= 0x10000) { xc >>= 16; msb += 16; }\\n        if (xc >= 0x100) { xc >>= 8; msb += 8; }\\n        if (xc >= 0x10) { xc >>= 4; msb += 4; }\\n        if (xc >= 0x4) { xc >>= 2; msb += 2; }\\n        if (xc >= 0x2) msb += 1;  // No need to shift xc anymore\\n\\n        result = (x << 255 - msb) / ((y - 1 >> msb - 191) + 1);\\n        require (result <= 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF);\\n\\n        uint256 hi = result * (y >> 128);\\n        uint256 lo = result * (y & 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF);\\n\\n        uint256 xh = x >> 192;\\n        uint256 xl = x << 64;\\n\\n        if (xl < lo) xh -= 1;\\n        xl -= lo; // We rely on overflow behavior here\\n        lo = hi << 128;\\n        if (xl < lo) xh -= 1;\\n        xl -= lo; // We rely on overflow behavior here\\n\\n        assert (xh == hi >> 128);\\n\\n        result += xl / y;\\n      }\\n\\n      require (result <= 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF);\\n      return uint128 (result);\\n    }\\n  }\\n\\n  /**\\n   * Calculate sqrt (x) rounding down, where x is unsigned 256-bit integer\\n   * number.\\n   *\\n   * @param x unsigned 256-bit integer number\\n   * @return unsigned 128-bit integer number\\n   */\\n  function sqrtu (uint256 x) private pure returns (uint128) {\\n    unchecked {\\n      if (x == 0) return 0;\\n      else {\\n        uint256 xx = x;\\n        uint256 r = 1;\\n        if (xx >= 0x100000000000000000000000000000000) { xx >>= 128; r <<= 64; }\\n        if (xx >= 0x10000000000000000) { xx >>= 64; r <<= 32; }\\n        if (xx >= 0x100000000) { xx >>= 32; r <<= 16; }\\n        if (xx >= 0x10000) { xx >>= 16; r <<= 8; }\\n        if (xx >= 0x100) { xx >>= 8; r <<= 4; }\\n        if (xx >= 0x10) { xx >>= 4; r <<= 2; }\\n        if (xx >= 0x8) { r <<= 1; }\\n        r = (r + x / r) >> 1;\\n        r = (r + x / r) >> 1;\\n        r = (r + x / r) >> 1;\\n        r = (r + x / r) >> 1;\\n        r = (r + x / r) >> 1;\\n        r = (r + x / r) >> 1;\\n        r = (r + x / r) >> 1; // Seven iterations should be enough\\n        uint256 r1 = x / r;\\n        return uint128 (r < r1 ? r : r1);\\n      }\\n    }\\n  }\\n}\\n\"\r\n    },\r\n    \"contracts/libraries/ABDKMath64x64Token.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: BUSL-1.1\\r\\n// For further clarification please see https://license.premia.legal\\r\\n\\r\\npragma solidity ^0.8.0;\\r\\n\\r\\nimport {ABDKMath64x64} from \\\"abdk-libraries-solidity/ABDKMath64x64.sol\\\";\\r\\n\\r\\nlibrary ABDKMath64x64Token {\\r\\n    using ABDKMath64x64 for int128;\\r\\n\\r\\n    /**\\r\\n     * @notice convert 64x64 fixed point representation of token amount to decimal\\r\\n     * @param value64x64 64x64 fixed point representation of token amount\\r\\n     * @param decimals token display decimals\\r\\n     * @return value decimal representation of token amount\\r\\n     */\\r\\n    function toDecimals(int128 value64x64, uint8 decimals)\\r\\n        internal\\r\\n        pure\\r\\n        returns (uint256 value)\\r\\n    {\\r\\n        value = value64x64.mulu(10**decimals);\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @notice convert decimal representation of token amount to 64x64 fixed point\\r\\n     * @param value decimal representation of token amount\\r\\n     * @param decimals token display decimals\\r\\n     * @return value64x64 64x64 fixed point representation of token amount\\r\\n     */\\r\\n    function fromDecimals(uint256 value, uint8 decimals)\\r\\n        internal\\r\\n        pure\\r\\n        returns (int128 value64x64)\\r\\n    {\\r\\n        value64x64 = ABDKMath64x64.divu(value, 10**decimals);\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @notice convert 64x64 fixed point representation of token amount to wei (18 decimals)\\r\\n     * @param value64x64 64x64 fixed point representation of token amount\\r\\n     * @return value wei representation of token amount\\r\\n     */\\r\\n    function toWei(int128 value64x64) internal pure returns (uint256 value) {\\r\\n        value = toDecimals(value64x64, 18);\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @notice convert wei representation (18 decimals) of token amount to 64x64 fixed point\\r\\n     * @param value wei representation of token amount\\r\\n     * @return value64x64 64x64 fixed point representation of token amount\\r\\n     */\\r\\n    function fromWei(uint256 value) internal pure returns (int128 value64x64) {\\r\\n        value64x64 = fromDecimals(value, 18);\\r\\n    }\\r\\n}\\r\\n\"\r\n    },\r\n    \"contracts/libraries/OptionMath.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: BUSL-1.1\\r\\n// For further clarification please see https://license.premia.legal\\r\\n\\r\\npragma solidity ^0.8.0;\\r\\n\\r\\nimport {ABDKMath64x64} from \\\"abdk-libraries-solidity/ABDKMath64x64.sol\\\";\\r\\n\\r\\nlibrary OptionMath {\\r\\n    using ABDKMath64x64 for int128;\\r\\n\\r\\n    struct QuoteArgs {\\r\\n        int128 varianceAnnualized64x64; // 64x64 fixed point representation of annualized variance\\r\\n        int128 strike64x64; // 64x64 fixed point representation of strike price\\r\\n        int128 spot64x64; // 64x64 fixed point representation of spot price\\r\\n        int128 timeToMaturity64x64; // 64x64 fixed point representation of duration of option contract (in years)\\r\\n        int128 oldCLevel64x64; // 64x64 fixed point representation of C-Level of Pool before purchase\\r\\n        int128 oldPoolState; // 64x64 fixed point representation of current state of the pool\\r\\n        int128 newPoolState; // 64x64 fixed point representation of state of the pool after trade\\r\\n        int128 steepness64x64; // 64x64 fixed point representation of Pool state delta multiplier\\r\\n        int128 minAPY64x64; // 64x64 fixed point representation of minimum APY for capital locked up to underwrite options\\r\\n        bool isCall; // whether to price \\\"call\\\" or \\\"put\\\" option\\r\\n    }\\r\\n\\r\\n    struct CalculateCLevelDecayArgs {\\r\\n        int128 timeIntervalsElapsed64x64; // 64x64 fixed point representation of quantity of discrete arbitrary intervals elapsed since last update\\r\\n        int128 oldCLevel64x64; // 64x64 fixed point representation of C-Level prior to accounting for decay\\r\\n        int128 utilization64x64; // 64x64 fixed point representation of pool capital utilization rate\\r\\n        int128 utilizationLowerBound64x64;\\r\\n        int128 utilizationUpperBound64x64;\\r\\n        int128 cLevelLowerBound64x64;\\r\\n        int128 cLevelUpperBound64x64;\\r\\n        int128 cConvergenceULowerBound64x64;\\r\\n        int128 cConvergenceUUpperBound64x64;\\r\\n    }\\r\\n\\r\\n    // 64x64 fixed point integer constants\\r\\n    int128 internal constant ONE_64x64 = 0x10000000000000000;\\r\\n    int128 internal constant THREE_64x64 = 0x30000000000000000;\\r\\n\\r\\n    // 64x64 fixed point constants used in Choudhury’s approximation of the Black-Scholes CDF\\r\\n    int128 private constant CDF_CONST_0 = 0x09109f285df452394; // 2260 / 3989\\r\\n    int128 private constant CDF_CONST_1 = 0x19abac0ea1da65036; // 6400 / 3989\\r\\n    int128 private constant CDF_CONST_2 = 0x0d3c84b78b749bd6b; // 3300 / 3989\\r\\n\\r\\n    /**\\r\\n     * @notice recalculate C-Level based on change in liquidity\\r\\n     * @param initialCLevel64x64 64x64 fixed point representation of C-Level of Pool before update\\r\\n     * @param oldPoolState64x64 64x64 fixed point representation of liquidity in pool before update\\r\\n     * @param newPoolState64x64 64x64 fixed point representation of liquidity in pool after update\\r\\n     * @param steepness64x64 64x64 fixed point representation of steepness coefficient\\r\\n     * @return 64x64 fixed point representation of new C-Level\\r\\n     */\\r\\n    function calculateCLevel(\\r\\n        int128 initialCLevel64x64,\\r\\n        int128 oldPoolState64x64,\\r\\n        int128 newPoolState64x64,\\r\\n        int128 steepness64x64\\r\\n    ) external pure returns (int128) {\\r\\n        return\\r\\n            newPoolState64x64\\r\\n                .sub(oldPoolState64x64)\\r\\n                .div(\\r\\n                    oldPoolState64x64 > newPoolState64x64\\r\\n                        ? oldPoolState64x64\\r\\n                        : newPoolState64x64\\r\\n                )\\r\\n                .mul(steepness64x64)\\r\\n                .neg()\\r\\n                .exp()\\r\\n                .mul(initialCLevel64x64);\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @notice calculate the price of an option using the Premia Finance model\\r\\n     * @param args arguments of quotePrice\\r\\n     * @return premiaPrice64x64 64x64 fixed point representation of Premia option price\\r\\n     * @return cLevel64x64 64x64 fixed point representation of C-Level of Pool after purchase\\r\\n     */\\r\\n    function quotePrice(QuoteArgs memory args)\\r\\n        external\\r\\n        pure\\r\\n        returns (\\r\\n            int128 premiaPrice64x64,\\r\\n            int128 cLevel64x64,\\r\\n            int128 slippageCoefficient64x64\\r\\n        )\\r\\n    {\\r\\n        int128 deltaPoolState64x64 = args\\r\\n            .newPoolState\\r\\n            .sub(args.oldPoolState)\\r\\n            .div(args.oldPoolState)\\r\\n            .mul(args.steepness64x64);\\r\\n        int128 tradingDelta64x64 = deltaPoolState64x64.neg().exp();\\r\\n\\r\\n        int128 blackScholesPrice64x64 = _blackScholesPrice(\\r\\n            args.varianceAnnualized64x64,\\r\\n            args.strike64x64,\\r\\n            args.spot64x64,\\r\\n            args.timeToMaturity64x64,\\r\\n            args.isCall\\r\\n        );\\r\\n\\r\\n        cLevel64x64 = tradingDelta64x64.mul(args.oldCLevel64x64);\\r\\n        slippageCoefficient64x64 = ONE_64x64.sub(tradingDelta64x64).div(\\r\\n            deltaPoolState64x64\\r\\n        );\\r\\n\\r\\n        premiaPrice64x64 = blackScholesPrice64x64.mul(cLevel64x64).mul(\\r\\n            slippageCoefficient64x64\\r\\n        );\\r\\n\\r\\n        int128 intrinsicValue64x64;\\r\\n\\r\\n        if (args.isCall && args.strike64x64 < args.spot64x64) {\\r\\n            intrinsicValue64x64 = args.spot64x64.sub(args.strike64x64);\\r\\n        } else if (!args.isCall && args.strike64x64 > args.spot64x64) {\\r\\n            intrinsicValue64x64 = args.strike64x64.sub(args.spot64x64);\\r\\n        }\\r\\n\\r\\n        int128 collateralValue64x64 = args.isCall\\r\\n            ? args.spot64x64\\r\\n            : args.strike64x64;\\r\\n\\r\\n        int128 minPrice64x64 = intrinsicValue64x64.add(\\r\\n            collateralValue64x64.mul(args.minAPY64x64).mul(\\r\\n                args.timeToMaturity64x64\\r\\n            )\\r\\n        );\\r\\n\\r\\n        if (minPrice64x64 > premiaPrice64x64) {\\r\\n            premiaPrice64x64 = minPrice64x64;\\r\\n        }\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @notice calculate the decay of C-Level based on heat diffusion function\\r\\n     * @param args structured CalculateCLevelDecayArgs\\r\\n     * @return cLevelDecayed64x64 C-Level after accounting for decay\\r\\n     */\\r\\n    function calculateCLevelDecay(CalculateCLevelDecayArgs memory args)\\r\\n        external\\r\\n        pure\\r\\n        returns (int128 cLevelDecayed64x64)\\r\\n    {\\r\\n        int128 convFHighU64x64 = (args.utilization64x64 >=\\r\\n            args.utilizationUpperBound64x64 &&\\r\\n            args.oldCLevel64x64 <= args.cLevelLowerBound64x64)\\r\\n            ? ONE_64x64\\r\\n            : int128(0);\\r\\n\\r\\n        int128 convFLowU64x64 = (args.utilization64x64 <=\\r\\n            args.utilizationLowerBound64x64 &&\\r\\n            args.oldCLevel64x64 >= args.cLevelUpperBound64x64)\\r\\n            ? ONE_64x64\\r\\n            : int128(0);\\r\\n\\r\\n        cLevelDecayed64x64 = args\\r\\n            .oldCLevel64x64\\r\\n            .sub(args.cConvergenceULowerBound64x64.mul(convFLowU64x64))\\r\\n            .sub(args.cConvergenceUUpperBound64x64.mul(convFHighU64x64))\\r\\n            .mul(\\r\\n                convFLowU64x64\\r\\n                    .mul(ONE_64x64.sub(args.utilization64x64))\\r\\n                    .add(convFHighU64x64.mul(args.utilization64x64))\\r\\n                    .mul(args.timeIntervalsElapsed64x64)\\r\\n                    .neg()\\r\\n                    .exp()\\r\\n            )\\r\\n            .add(\\r\\n                args.cConvergenceULowerBound64x64.mul(convFLowU64x64).add(\\r\\n                    args.cConvergenceUUpperBound64x64.mul(convFHighU64x64)\\r\\n                )\\r\\n            );\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @notice calculate the exponential decay coefficient for a given interval\\r\\n     * @param oldTimestamp timestamp of previous update\\r\\n     * @param newTimestamp current timestamp\\r\\n     * @return 64x64 fixed point representation of exponential decay coefficient\\r\\n     */\\r\\n    function _decay(uint256 oldTimestamp, uint256 newTimestamp)\\r\\n        internal\\r\\n        pure\\r\\n        returns (int128)\\r\\n    {\\r\\n        return\\r\\n            ONE_64x64.sub(\\r\\n                (-ABDKMath64x64.divu(newTimestamp - oldTimestamp, 7 days)).exp()\\r\\n            );\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @notice calculate Choudhury’s approximation of the Black-Scholes CDF\\r\\n     * @param input64x64 64x64 fixed point representation of random variable\\r\\n     * @return 64x64 fixed point representation of the approximated CDF of x\\r\\n     */\\r\\n    function _N(int128 input64x64) internal pure returns (int128) {\\r\\n        // squaring via mul is cheaper than via pow\\r\\n        int128 inputSquared64x64 = input64x64.mul(input64x64);\\r\\n\\r\\n        int128 value64x64 = (-inputSquared64x64 >> 1).exp().div(\\r\\n            CDF_CONST_0.add(CDF_CONST_1.mul(input64x64.abs())).add(\\r\\n                CDF_CONST_2.mul(inputSquared64x64.add(THREE_64x64).sqrt())\\r\\n            )\\r\\n        );\\r\\n\\r\\n        return input64x64 > 0 ? ONE_64x64.sub(value64x64) : value64x64;\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @notice calculate the price of an option using the Black-Scholes model\\r\\n     * @param varianceAnnualized64x64 64x64 fixed point representation of annualized variance\\r\\n     * @param strike64x64 64x64 fixed point representation of strike price\\r\\n     * @param spot64x64 64x64 fixed point representation of spot price\\r\\n     * @param timeToMaturity64x64 64x64 fixed point representation of duration of option contract (in years)\\r\\n     * @param isCall whether to price \\\"call\\\" or \\\"put\\\" option\\r\\n     * @return 64x64 fixed point representation of Black-Scholes option price\\r\\n     */\\r\\n    function _blackScholesPrice(\\r\\n        int128 varianceAnnualized64x64,\\r\\n        int128 strike64x64,\\r\\n        int128 spot64x64,\\r\\n        int128 timeToMaturity64x64,\\r\\n        bool isCall\\r\\n    ) internal pure returns (int128) {\\r\\n        int128 cumulativeVariance64x64 = timeToMaturity64x64.mul(\\r\\n            varianceAnnualized64x64\\r\\n        );\\r\\n        int128 cumulativeVarianceSqrt64x64 = cumulativeVariance64x64.sqrt();\\r\\n\\r\\n        int128 d1_64x64 = spot64x64\\r\\n            .div(strike64x64)\\r\\n            .ln()\\r\\n            .add(cumulativeVariance64x64 >> 1)\\r\\n            .div(cumulativeVarianceSqrt64x64);\\r\\n        int128 d2_64x64 = d1_64x64.sub(cumulativeVarianceSqrt64x64);\\r\\n\\r\\n        if (isCall) {\\r\\n            return\\r\\n                spot64x64.mul(_N(d1_64x64)).sub(strike64x64.mul(_N(d2_64x64)));\\r\\n        } else {\\r\\n            return\\r\\n                -spot64x64.mul(_N(-d1_64x64)).sub(\\r\\n                    strike64x64.mul(_N(-d2_64x64))\\r\\n                );\\r\\n        }\\r\\n    }\\r\\n}\\r\\n\"\r\n    },\r\n    \"@solidstate/contracts/utils/EnumerableSet.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @title Set implementation with enumeration functions\\n * @dev derived from https://github.com/OpenZeppelin/openzeppelin-contracts (MIT license)\\n */\\nlibrary EnumerableSet {\\n    struct Set {\\n        bytes32[] _values;\\n        // 1-indexed to allow 0 to signify nonexistence\\n        mapping(bytes32 => uint256) _indexes;\\n    }\\n\\n    struct Bytes32Set {\\n        Set _inner;\\n    }\\n\\n    struct AddressSet {\\n        Set _inner;\\n    }\\n\\n    struct UintSet {\\n        Set _inner;\\n    }\\n\\n    function at(Bytes32Set storage set, uint256 index)\\n        internal\\n        view\\n        returns (bytes32)\\n    {\\n        return _at(set._inner, index);\\n    }\\n\\n    function at(AddressSet storage set, uint256 index)\\n        internal\\n        view\\n        returns (address)\\n    {\\n        return address(uint160(uint256(_at(set._inner, index))));\\n    }\\n\\n    function at(UintSet storage set, uint256 index)\\n        internal\\n        view\\n        returns (uint256)\\n    {\\n        return uint256(_at(set._inner, index));\\n    }\\n\\n    function contains(Bytes32Set storage set, bytes32 value)\\n        internal\\n        view\\n        returns (bool)\\n    {\\n        return _contains(set._inner, value);\\n    }\\n\\n    function contains(AddressSet storage set, address value)\\n        internal\\n        view\\n        returns (bool)\\n    {\\n        return _contains(set._inner, bytes32(uint256(uint160(value))));\\n    }\\n\\n    function contains(UintSet storage set, uint256 value)\\n        internal\\n        view\\n        returns (bool)\\n    {\\n        return _contains(set._inner, bytes32(value));\\n    }\\n\\n    function indexOf(Bytes32Set storage set, bytes32 value)\\n        internal\\n        view\\n        returns (uint256)\\n    {\\n        return _indexOf(set._inner, value);\\n    }\\n\\n    function indexOf(AddressSet storage set, address value)\\n        internal\\n        view\\n        returns (uint256)\\n    {\\n        return _indexOf(set._inner, bytes32(uint256(uint160(value))));\\n    }\\n\\n    function indexOf(UintSet storage set, uint256 value)\\n        internal\\n        view\\n        returns (uint256)\\n    {\\n        return _indexOf(set._inner, bytes32(value));\\n    }\\n\\n    function length(Bytes32Set storage set) internal view returns (uint256) {\\n        return _length(set._inner);\\n    }\\n\\n    function length(AddressSet storage set) internal view returns (uint256) {\\n        return _length(set._inner);\\n    }\\n\\n    function length(UintSet storage set) internal view returns (uint256) {\\n        return _length(set._inner);\\n    }\\n\\n    function add(Bytes32Set storage set, bytes32 value)\\n        internal\\n        returns (bool)\\n    {\\n        return _add(set._inner, value);\\n    }\\n\\n    function add(AddressSet storage set, address value)\\n        internal\\n        returns (bool)\\n    {\\n        return _add(set._inner, bytes32(uint256(uint160(value))));\\n    }\\n\\n    function add(UintSet storage set, uint256 value) internal returns (bool) {\\n        return _add(set._inner, bytes32(value));\\n    }\\n\\n    function remove(Bytes32Set storage set, bytes32 value)\\n        internal\\n        returns (bool)\\n    {\\n        return _remove(set._inner, value);\\n    }\\n\\n    function remove(AddressSet storage set, address value)\\n        internal\\n        returns (bool)\\n    {\\n        return _remove(set._inner, bytes32(uint256(uint160(value))));\\n    }\\n\\n    function remove(UintSet storage set, uint256 value)\\n        internal\\n        returns (bool)\\n    {\\n        return _remove(set._inner, bytes32(value));\\n    }\\n\\n    function _at(Set storage set, uint256 index)\\n        private\\n        view\\n        returns (bytes32)\\n    {\\n        require(\\n            set._values.length > index,\\n            'EnumerableSet: index out of bounds'\\n        );\\n        return set._values[index];\\n    }\\n\\n    function _contains(Set storage set, bytes32 value)\\n        private\\n        view\\n        returns (bool)\\n    {\\n        return set._indexes[value] != 0;\\n    }\\n\\n    function _indexOf(Set storage set, bytes32 value)\\n        private\\n        view\\n        returns (uint256)\\n    {\\n        unchecked {\\n            return set._indexes[value] - 1;\\n        }\\n    }\\n\\n    function _length(Set storage set) private view returns (uint256) {\\n        return set._values.length;\\n    }\\n\\n    function _add(Set storage set, bytes32 value) private returns (bool) {\\n        if (!_contains(set, value)) {\\n            set._values.push(value);\\n            set._indexes[value] = set._values.length;\\n            return true;\\n        } else {\\n            return false;\\n        }\\n    }\\n\\n    function _remove(Set storage set, bytes32 value) private returns (bool) {\\n        uint256 valueIndex = set._indexes[value];\\n\\n        if (valueIndex != 0) {\\n            uint256 index = valueIndex - 1;\\n            bytes32 last = set._values[set._values.length - 1];\\n\\n            // move last value to now-vacant index\\n\\n            set._values[index] = last;\\n            set._indexes[last] = index + 1;\\n\\n            // clear last index\\n\\n            set._values.pop();\\n            delete set._indexes[value];\\n\\n            return true;\\n        } else {\\n            return false;\\n        }\\n    }\\n}\\n\"\r\n    }\r\n  },\r\n  \"settings\": {\r\n    \"optimizer\": {\r\n      \"enabled\": true,\r\n      \"runs\": 200\r\n    },\r\n    \"outputSelection\": {\r\n      \"*\": {\r\n        \"*\": [\r\n          \"evm.bytecode\",\r\n          \"evm.deployedBytecode\",\r\n          \"devdoc\",\r\n          \"userdoc\",\r\n          \"metadata\",\r\n          \"abi\"\r\n        ]\r\n      }\r\n    },\r\n    \"libraries\": {}\r\n  }\r\n}}","ABI":"[{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_diamond\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_premia\",\"type\":\"address\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"pool\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"bool\",\"name\":\"isCallPool\",\"type\":\"bool\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"rewardAmount\",\"type\":\"uint256\"}],\"name\":\"Claim\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"pool\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"allocPoints\",\"type\":\"uint256\"}],\"name\":\"UpdatePoolAlloc\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_pool\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_allocPoints\",\"type\":\"uint256\"}],\"name\":\"addPool\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"addPremiaRewards\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_user\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_pool\",\"type\":\"address\"},{\"internalType\":\"bool\",\"name\":\"_isCallPool\",\"type\":\"bool\"},{\"internalType\":\"uint256\",\"name\":\"_userTVLOld\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_userTVLNew\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_totalTVL\",\"type\":\"uint256\"}],\"name\":\"allocatePending\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_user\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_pool\",\"type\":\"address\"},{\"internalType\":\"bool\",\"name\":\"_isCallPool\",\"type\":\"bool\"},{\"internalType\":\"uint256\",\"name\":\"_userTVLOld\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_userTVLNew\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_totalTVL\",\"type\":\"uint256\"}],\"name\":\"claim\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"pool\",\"type\":\"address\"},{\"internalType\":\"bool\",\"name\":\"isCallPool\",\"type\":\"bool\"}],\"name\":\"getPoolInfo\",\"outputs\":[{\"components\":[{\"internalType\":\"uint256\",\"name\":\"allocPoint\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"lastRewardTimestamp\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"accPremiaPerShare\",\"type\":\"uint256\"}],\"internalType\":\"struct PremiaMiningStorage.PoolInfo\",\"name\":\"\",\"type\":\"tuple\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getPremiaPerYear\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getTotalAllocationPoints\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"internalType\":\"address[]\",\"name\":\"pools\",\"type\":\"address[]\"},{\"internalType\":\"bool[]\",\"name\":\"isCall\",\"type\":\"bool[]\"}],\"name\":\"multiClaim\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_pool\",\"type\":\"address\"},{\"internalType\":\"bool\",\"name\":\"_isCallPool\",\"type\":\"bool\"},{\"internalType\":\"address\",\"name\":\"_user\",\"type\":\"address\"}],\"name\":\"pendingPremia\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"premiaRewardsAvailable\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address[]\",\"name\":\"_pools\",\"type\":\"address[]\"},{\"internalType\":\"uint256[]\",\"name\":\"_allocPoints\",\"type\":\"uint256[]\"}],\"name\":\"setPoolAllocPoints\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_premiaPerYear\",\"type\":\"uint256\"}],\"name\":\"setPremiaPerYear\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_pool\",\"type\":\"address\"},{\"internalType\":\"bool\",\"name\":\"_isCallPool\",\"type\":\"bool\"},{\"internalType\":\"uint256\",\"name\":\"_totalTVL\",\"type\":\"uint256\"}],\"name\":\"updatePool\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address[]\",\"name\":\"_pools\",\"type\":\"address[]\"},{\"internalType\":\"uint256\",\"name\":\"_premiaPerYear\",\"type\":\"uint256\"}],\"name\":\"upgrade\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}]","ContractName":"PremiaMining","CompilerVersion":"v0.8.9+commit.e5eed63a","OptimizationUsed":"1","Runs":"200","ConstructorArguments":"00000000000000000000000057559e8fe00d5784ce0b31943e20d4c52fa56837000000000000000000000000445f0879571d5c8e3f7a4b7ffa4f78764d40517f","EVMVersion":"Default","Library":"","LicenseType":"","Proxy":"0","Implementation":"","SwarmSource":""}]}