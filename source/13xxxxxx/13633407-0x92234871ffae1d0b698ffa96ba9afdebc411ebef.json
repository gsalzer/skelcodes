{"status":"1","message":"OK","result":[{"SourceCode":"pragma solidity ^0.8.10;\r\n\r\n// SPDX-License-Identifier: Unlicensed\r\n\r\nabstract contract Context {\r\n    function _msgSender() internal view virtual returns (address) {\r\n        return msg.sender;\r\n    }\r\n}\r\n\r\ninterface IERC20 {\r\n    function totalSupply() external view returns (uint256);\r\n    function balanceOf(address account) external view returns (uint256);\r\n    function transfer(address recipient, uint256 amount) external returns (bool);\r\n    function allowance(address owner, address spender) external view returns (uint256);\r\n    function approve(address spender, uint256 amount) external returns (bool);\r\n    function transferFrom(address sender, address recipient, uint256 amount) external returns (bool);\r\n    event Transfer(address indexed from, address indexed to, uint256 value);\r\n    event Approval(address indexed owner, address indexed spender, uint256 value);\r\n}\r\n\r\nlibrary SafeMath {\r\n    function add(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        uint256 c = a + b;\r\n        require(c >= a, \"SafeMath: addition overflow\");\r\n        return c;\r\n    }\r\n\r\n    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        return sub(a, b, \"SafeMath: subtraction overflow\");\r\n    }\r\n\r\n    function sub(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\r\n        require(b <= a, errorMessage);\r\n        uint256 c = a - b;\r\n        return c;\r\n    }\r\n\r\n    function mul(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        if(a == 0) {\r\n            return 0;\r\n        }\r\n        uint256 c = a * b;\r\n        require(c / a == b, \"SafeMath: multiplication overflow\");\r\n        return c;\r\n    }\r\n\r\n    function div(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        return div(a, b, \"SafeMath: division by zero\");\r\n    }\r\n\r\n    function div(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\r\n        require(b > 0, errorMessage);\r\n        uint256 c = a / b;\r\n        return c;\r\n    }\r\n\r\n    function mod(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        return mod(a, b, \"SafeMath: modulo by zero\");\r\n    }\r\n\r\n    function mod(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\r\n        require(b != 0, errorMessage);\r\n        return a % b;\r\n    }\r\n}\r\n\r\nabstract contract Ownable is Context {\r\n    address private _owner;\r\n\r\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\r\n\r\n    constructor() {\r\n        _transferOwnership(_msgSender());\r\n    }\r\n\r\n    function owner() public view virtual returns (address) {\r\n        return _owner;\r\n    }\r\n\r\n    modifier onlyOwner() {\r\n        require(owner() == _msgSender(), \"Ownable: caller is not the owner\");\r\n        _;\r\n    }\r\n\r\n    function renounceOwnership() public virtual onlyOwner {\r\n        _transferOwnership(address(0));\r\n    }\r\n\r\n    function transferOwnership(address newOwner) public virtual onlyOwner {\r\n        require(newOwner != address(0), \"Ownable: new owner is the zero address\");\r\n        _transferOwnership(newOwner);\r\n    }\r\n\r\n    function _transferOwnership(address newOwner) internal virtual {\r\n        address oldOwner = _owner;\r\n        _owner = newOwner;\r\n        emit OwnershipTransferred(oldOwner, newOwner);\r\n    }\r\n}\r\n\r\ncontract Staking is Ownable {\r\n    using SafeMath for uint256;\r\n\r\n    mapping (address => uint) private _userStakeDay;\r\n    mapping (address => uint256) private _userRewards;\r\n    mapping (address => uint256) private _userDailyReward;\r\n    mapping (address => uint256) private _usersAmountStaked;\r\n    mapping (address => uint256) private _usersStartTime;\r\n\r\n    address[] private _usersStaked;\r\n    bool private _stakingEnabled = true;\r\n\r\n    IERC20 private _PIXIEAddress = IERC20(0x856eE6A073386b2Dd440a8CFc9D961B64AA78fe0);\r\n    \r\n    uint256 private _totalStaked;\r\n\r\n    function totalBalanceWithoutStakes() public view returns (uint256) {\r\n        require (totalBalance() > 0, 'Balance is 0');\r\n        return _PIXIEAddress.balanceOf(address(this)).sub(_totalStaked);\r\n    }\r\n\r\n    function totalBalance() public view returns (uint256) {\r\n        return _PIXIEAddress.balanceOf(address(this));\r\n    }\r\n\r\n    function totalStaked() public view returns (uint256) {\r\n        return _totalStaked;\r\n    }\r\n\r\n    function getStakers() public view returns (address[] memory) {\r\n        return _usersStaked;\r\n    }\r\n\r\n    function getStakeDay(address staker) public view returns (uint256) {\r\n        return _userStakeDay[staker];\r\n    }\r\n\r\n    function getAmountsStaked(address staker) public view returns (uint256) {\r\n        return _usersAmountStaked[staker];\r\n    }\r\n\r\n    function getStakedTimes(address staker) public view returns (uint256) {\r\n        return _usersStartTime[staker];\r\n    }\r\n\r\n    function getTotalUserReward(address staker) public view returns (uint256) {\r\n        return _userRewards[staker];\r\n    }\r\n\r\n    function getDailyUserReward(address staker) public view returns (uint256) {\r\n        return _userDailyReward[staker];\r\n    }\r\n\r\n    function getEmission() public view returns(uint256) {\r\n        uint256 _totalPIXIE = totalBalanceWithoutStakes();\r\n        uint256 _totalEmissions = _totalPIXIE.div(2);\r\n        uint256 _totalSupply = 1e12 * 10**9;\r\n\r\n        if (_totalStaked > _totalSupply.div(100).mul(4) && _totalStaked < _totalSupply.div(100).mul(8)) {\r\n            _totalEmissions = _totalPIXIE.div(100).mul(60);\r\n        } else if (_totalStaked > _totalSupply.div(100).mul(8) && _totalStaked < _totalSupply.div(100).mul(12)) {\r\n            _totalEmissions = _totalPIXIE.div(100).mul(70);\r\n        } else if (_totalStaked > _totalSupply.div(100).mul(12) && _totalStaked < _totalSupply.div(100).mul(16)) {\r\n            _totalEmissions = _totalPIXIE.div(100).mul(80);\r\n        } else if (_totalStaked > _totalSupply.div(100).mul(16) && _totalStaked < _totalSupply.div(100).mul(20)) {\r\n            _totalEmissions = _totalPIXIE.div(100).mul(90);\r\n        } else if (_totalStaked > _totalSupply.div(100).mul(20)) {\r\n            _totalEmissions = _totalPIXIE;\r\n        }\r\n\r\n        return _totalEmissions.div(30);\r\n    }\r\n\r\n    function setDailyRewards() public {\r\n        uint256 _emission = getEmission();\r\n\r\n        for (uint i = 0; i < _usersStaked.length; i += 1) {\r\n            address _user = _usersStaked[i];\r\n\r\n            uint256 _userAmountStaked = _usersAmountStaked[_user];\r\n            uint _previousUserStakeDay = _userStakeDay[_user];\r\n\r\n            uint256 _userTimeStamp = _usersStartTime[_user];\r\n            uint256 _timestamp = block.timestamp;\r\n            uint _stakeDay;\r\n\r\n            if (_userTimeStamp == _timestamp) {\r\n                _stakeDay = 0;\r\n            } else {\r\n                uint256 _userStakeDayTimestamp = _timestamp.sub(_userTimeStamp);\r\n                _stakeDay = _userStakeDayTimestamp.div(1 days);\r\n\r\n            }\r\n\r\n            if (_userDailyReward[_user] <= 0) {\r\n                _userDailyReward[_user] = _emission.mul(_userAmountStaked).div(_totalStaked);\r\n            }\r\n            \r\n            if (_previousUserStakeDay != _stakeDay) {\r\n                _userRewards[_user] += _userDailyReward[_user];\r\n            }\r\n            \r\n            _userStakeDay[_user] = _stakeDay;\r\n            _userDailyReward[_user] = _emission.mul(_userAmountStaked).div(_totalStaked);\r\n        }\r\n    }\r\n\r\n    function stake(uint256 toStake) external {\r\n        require(_stakingEnabled, 'Staking has been disabled. Please contact staff to find out why.');\r\n        require(_PIXIEAddress.balanceOf(msg.sender) > toStake, \"Insufficient Funds in wallet\");\r\n        \r\n        bool _hasStaked = false;\r\n\r\n        for (uint i = 0; i < _usersStaked.length; i += 1) {\r\n            if (_usersStaked[i] == msg.sender) {\r\n                _hasStaked = true;\r\n            }\r\n        }\r\n\r\n        _usersAmountStaked[msg.sender] += toStake;\r\n        _usersStartTime[msg.sender] = block.timestamp;\r\n\r\n        if (!_hasStaked) _usersStaked.push(msg.sender);\r\n\r\n        _totalStaked += toStake;\r\n\r\n        // Calculate new daily rewards\r\n        setDailyRewards();\r\n\r\n        _PIXIEAddress.transferFrom(msg.sender, address(this), toStake);\r\n    }\r\n\r\n    function unStake() external {\r\n        require(_stakingEnabled, 'Staking has been disabled. Please contact staff to find out why and how to unstake your initial amount');\r\n        require(_userStakeDay[msg.sender] > 0, 'You must have staked your tokens for at least 24h');\r\n\r\n        uint256 _initial = _usersAmountStaked[msg.sender];\r\n        uint256 _reward = _userRewards[msg.sender];\r\n\r\n        // Remove from staking array\r\n        for (uint i = 0; i < _usersStaked.length; i += 1) {\r\n            if (_usersStaked[i] == msg.sender) {\r\n                delete _usersStaked[i];\r\n            }\r\n        }\r\n\r\n        // Reset all the vars\r\n        _userStakeDay[msg.sender] = 0;\r\n        _usersAmountStaked[msg.sender] = 0;\r\n        _userRewards[msg.sender] = 0;\r\n        _userDailyReward[msg.sender] = 0;\r\n        _usersStartTime[msg.sender] = 0;\r\n\r\n        _PIXIEAddress.transfer(msg.sender, _initial.add(_reward));\r\n        _totalStaked -= _initial;\r\n\r\n        // Calculate new daily rewards\r\n        if (_totalStaked > 0) setDailyRewards();\r\n    }\r\n\r\n    function unstakeInitial() external {\r\n        require(!_stakingEnabled, 'Staking is enabled, use the unStake function');\r\n\r\n        _PIXIEAddress.transfer(msg.sender, _usersAmountStaked[msg.sender]);\r\n    }\r\n\r\n    function withdrawAll() external onlyOwner() {\r\n        _PIXIEAddress.transfer(msg.sender, totalBalance());\r\n    }\r\n\r\n    function setStakingState(bool onoff) external onlyOwner() {\r\n        // In case of staking malfunctioning or amounts being totally off\r\n        _stakingEnabled = onoff;\r\n    }\r\n\r\n    receive() external payable {}\r\n}","ABI":"[{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"staker\",\"type\":\"address\"}],\"name\":\"getAmountsStaked\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"staker\",\"type\":\"address\"}],\"name\":\"getDailyUserReward\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getEmission\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"staker\",\"type\":\"address\"}],\"name\":\"getStakeDay\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"staker\",\"type\":\"address\"}],\"name\":\"getStakedTimes\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getStakers\",\"outputs\":[{\"internalType\":\"address[]\",\"name\":\"\",\"type\":\"address[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"staker\",\"type\":\"address\"}],\"name\":\"getTotalUserReward\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"setDailyRewards\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bool\",\"name\":\"onoff\",\"type\":\"bool\"}],\"name\":\"setStakingState\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"toStake\",\"type\":\"uint256\"}],\"name\":\"stake\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalBalance\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalBalanceWithoutStakes\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalStaked\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"unStake\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"unstakeInitial\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"withdrawAll\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"stateMutability\":\"payable\",\"type\":\"receive\"}]","ContractName":"Staking","CompilerVersion":"v0.8.10+commit.fc410830","OptimizationUsed":"0","Runs":"200","ConstructorArguments":"","EVMVersion":"Default","Library":"","LicenseType":"MIT","Proxy":"0","Implementation":"","SwarmSource":"ipfs://64d99bda6af07898b26ef388ad3eb655e0916e9c4c640419e29b34b40d65bf14"}]}