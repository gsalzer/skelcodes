{"status":"1","message":"OK","result":[{"SourceCode":"{{\r\n  \"language\": \"Solidity\",\r\n  \"sources\": {\r\n    \"contracts/Marketplace.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity 0.6.12;\\n\\nimport \\\"@openzeppelin/contracts/introspection/IERC165.sol\\\";\\nimport \\\"@openzeppelin/contracts/token/ERC1155/IERC1155.sol\\\";\\nimport \\\"@openzeppelin/contracts/token/ERC721/IERC721.sol\\\";\\nimport \\\"@openzeppelin/contracts/token/ERC20/IERC20.sol\\\";\\nimport \\\"@openzeppelin/contracts/token/ERC20/SafeERC20.sol\\\";\\nimport \\\"@openzeppelin/contracts/math/SafeMath.sol\\\";\\nimport \\\"@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol\\\";\\nimport \\\"@openzeppelin/contracts-upgradeable/utils/AddressUpgradeable.sol\\\";\\nimport \\\"@openzeppelin/contracts-upgradeable/utils/ReentrancyGuardUpgradeable.sol\\\";\\n\\ninterface IAddressRegistry {\\n    function xyz() external view returns (address);\\n\\n    function bundleMarketplace() external view returns (address);\\n\\n    function factory() external view returns (address);\\n\\n    function privateFactory() external view returns (address);\\n\\n    function artFactory() external view returns (address);\\n\\n    function privateArtFactory() external view returns (address);\\n\\n    function tokenRegistry() external view returns (address);\\n\\n    function priceFeed() external view returns (address);\\n}\\n\\ninterface IBundleMarketplace {\\n    function validateItemSold(\\n        address,\\n        uint256,\\n        uint256\\n    ) external;\\n}\\n\\ninterface INFTFactory {\\n    function exists(address) external view returns (bool);\\n}\\n\\ninterface ITokenRegistry {\\n    function enabled(address) external view returns (bool);\\n}\\n\\ninterface IPriceFeed {\\n    function wFTM() external view returns (address);\\n\\n    function getPrice(address) external view returns (int256, uint8);\\n}\\n\\ncontract Marketplace is OwnableUpgradeable, ReentrancyGuardUpgradeable {\\n    using SafeMath for uint256;\\n    using AddressUpgradeable for address payable;\\n    using SafeERC20 for IERC20;\\n\\n    /// @notice Events for the contract\\n    event ItemListed(\\n        address indexed owner,\\n        address indexed nft,\\n        uint256 tokenId,\\n        uint256 quantity,\\n        address payToken,\\n        uint256 pricePerItem,\\n        uint256 startingTime\\n    );\\n    event ItemSold(\\n        address indexed seller,\\n        address indexed buyer,\\n        address indexed nft,\\n        uint256 tokenId,\\n        uint256 quantity,\\n        address payToken,\\n        int256 unitPrice,\\n        uint256 pricePerItem\\n    );\\n    event ItemUpdated(\\n        address indexed owner,\\n        address indexed nft,\\n        uint256 tokenId,\\n        address payToken,\\n        uint256 newPrice\\n    );\\n    event ItemCanceled(\\n        address indexed owner,\\n        address indexed nft,\\n        uint256 tokenId\\n    );\\n    event OfferCreated(\\n        address indexed creator,\\n        address indexed nft,\\n        uint256 tokenId,\\n        uint256 quantity,\\n        address payToken,\\n        uint256 pricePerItem,\\n        uint256 deadline\\n    );\\n    event OfferCanceled(\\n        address indexed creator,\\n        address indexed nft,\\n        uint256 tokenId\\n    );\\n    event UpdatePlatformFee(uint16 platformFee);\\n    event UpdatePlatformFeeRecipient(address payable platformFeeRecipient);\\n\\n    /// @notice Structure for listed items\\n    struct Listing {\\n        uint256 quantity;\\n        address payToken;\\n        uint256 pricePerItem;\\n        uint256 startingTime;\\n    }\\n\\n    /// @notice Structure for offer\\n    struct Offer {\\n        IERC20 payToken;\\n        uint256 quantity;\\n        uint256 pricePerItem;\\n        uint256 deadline;\\n    }\\n\\n    struct CollectionRoyalty {\\n        uint16 royalty;\\n        address creator;\\n        address feeRecipient;\\n    }\\n\\n    bytes4 private constant INTERFACE_ID_ERC721 = 0x80ac58cd;\\n    bytes4 private constant INTERFACE_ID_ERC1155 = 0xd9b67a26;\\n\\n    /// @notice NftAddress -> Token ID -> Minter\\n    mapping(address => mapping(uint256 => address)) public minters;\\n\\n    /// @notice NftAddress -> Token ID -> Royalty\\n    mapping(address => mapping(uint256 => uint16)) public royalties;\\n\\n    /// @notice NftAddress -> Token ID -> Owner -> Listing item\\n    mapping(address => mapping(uint256 => mapping(address => Listing)))\\n        public listings;\\n\\n    /// @notice NftAddress -> Token ID -> Offerer -> Offer\\n    mapping(address => mapping(uint256 => mapping(address => Offer)))\\n        public offers;\\n\\n    /// @notice Platform fee\\n    uint16 public platformFee;\\n\\n    /// @notice Platform fee receipient\\n    address payable public feeReceipient;\\n\\n    /// @notice NftAddress -> Royalty\\n    mapping(address => CollectionRoyalty) public collectionRoyalties;\\n\\n    /// @notice Address registry\\n    IAddressRegistry public addressRegistry;\\n\\n    modifier onlyMarketplace() {\\n        require(\\n            address(addressRegistry.bundleMarketplace()) == _msgSender(),\\n            \\\"sender must be bundle marketplace\\\"\\n        );\\n        _;\\n    }\\n\\n    modifier isListed(\\n        address _nftAddress,\\n        uint256 _tokenId,\\n        address _owner\\n    ) {\\n        Listing memory listing = listings[_nftAddress][_tokenId][_owner];\\n        require(listing.quantity > 0, \\\"not listed item\\\");\\n        _;\\n    }\\n\\n    modifier notListed(\\n        address _nftAddress,\\n        uint256 _tokenId,\\n        address _owner\\n    ) {\\n        Listing memory listing = listings[_nftAddress][_tokenId][_owner];\\n        require(listing.quantity == 0, \\\"already listed\\\");\\n        _;\\n    }\\n\\n    modifier validListing(\\n        address _nftAddress,\\n        uint256 _tokenId,\\n        address _owner\\n    ) {\\n        Listing memory listedItem = listings[_nftAddress][_tokenId][_owner];\\n        if (IERC165(_nftAddress).supportsInterface(INTERFACE_ID_ERC721)) {\\n            IERC721 nft = IERC721(_nftAddress);\\n            require(nft.ownerOf(_tokenId) == _owner, \\\"not owning item\\\");\\n        } else if (\\n            IERC165(_nftAddress).supportsInterface(INTERFACE_ID_ERC1155)\\n        ) {\\n            IERC1155 nft = IERC1155(_nftAddress);\\n            require(\\n                nft.balanceOf(_owner, _tokenId) >= listedItem.quantity,\\n                \\\"not owning item\\\"\\n            );\\n        } else {\\n            revert(\\\"invalid nft address\\\");\\n        }\\n        require(_getNow() >= listedItem.startingTime, \\\"item not buyable\\\");\\n        _;\\n    }\\n\\n    modifier offerExists(\\n        address _nftAddress,\\n        uint256 _tokenId,\\n        address _creator\\n    ) {\\n        Offer memory offer = offers[_nftAddress][_tokenId][_creator];\\n        require(\\n            offer.quantity > 0 && offer.deadline > _getNow(),\\n            \\\"offer not exists or expired\\\"\\n        );\\n        _;\\n    }\\n\\n    modifier offerNotExists(\\n        address _nftAddress,\\n        uint256 _tokenId,\\n        address _creator\\n    ) {\\n        Offer memory offer = offers[_nftAddress][_tokenId][_creator];\\n        require(\\n            offer.quantity == 0 || offer.deadline <= _getNow(),\\n            \\\"offer already created\\\"\\n        );\\n        _;\\n    }\\n\\n    /// @notice Contract initializer\\n    function initialize(address payable _feeRecipient, uint16 _platformFee)\\n        public\\n        initializer\\n    {\\n        platformFee = _platformFee;\\n        feeReceipient = _feeRecipient;\\n\\n        __Ownable_init();\\n        __ReentrancyGuard_init();\\n    }\\n\\n    /// @notice Method for listing NFT\\n    /// @param _nftAddress Address of NFT contract\\n    /// @param _tokenId Token ID of NFT\\n    /// @param _quantity token amount to list (needed for ERC-1155 NFTs, set as 1 for ERC-721)\\n    /// @param _payToken Paying token\\n    /// @param _pricePerItem sale price for each iteam\\n    /// @param _startingTime scheduling for a future sale\\n    function listItem(\\n        address _nftAddress,\\n        uint256 _tokenId,\\n        uint256 _quantity,\\n        address _payToken,\\n        uint256 _pricePerItem,\\n        uint256 _startingTime\\n    ) external notListed(_nftAddress, _tokenId, _msgSender()) {\\n        if (IERC165(_nftAddress).supportsInterface(INTERFACE_ID_ERC721)) {\\n            IERC721 nft = IERC721(_nftAddress);\\n            require(nft.ownerOf(_tokenId) == _msgSender(), \\\"not owning item\\\");\\n            require(\\n                nft.isApprovedForAll(_msgSender(), address(this)),\\n                \\\"item not approved\\\"\\n            );\\n        } else if (\\n            IERC165(_nftAddress).supportsInterface(INTERFACE_ID_ERC1155)\\n        ) {\\n            IERC1155 nft = IERC1155(_nftAddress);\\n            require(\\n                nft.balanceOf(_msgSender(), _tokenId) >= _quantity,\\n                \\\"must hold enough nfts\\\"\\n            );\\n            require(\\n                nft.isApprovedForAll(_msgSender(), address(this)),\\n                \\\"item not approved\\\"\\n            );\\n        } else {\\n            revert(\\\"invalid nft address\\\");\\n        }\\n\\n        require(\\n            _payToken == address(0) ||\\n                (addressRegistry.tokenRegistry() != address(0) &&\\n                    ITokenRegistry(addressRegistry.tokenRegistry())\\n                        .enabled(_payToken)),\\n            \\\"invalid pay token\\\"\\n        );\\n\\n        listings[_nftAddress][_tokenId][_msgSender()] = Listing(\\n            _quantity,\\n            _payToken,\\n            _pricePerItem,\\n            _startingTime\\n        );\\n        emit ItemListed(\\n            _msgSender(),\\n            _nftAddress,\\n            _tokenId,\\n            _quantity,\\n            _payToken,\\n            _pricePerItem,\\n            _startingTime\\n        );\\n    }\\n\\n    /// @notice Method for canceling listed NFT\\n    function cancelListing(address _nftAddress, uint256 _tokenId)\\n        external\\n        nonReentrant\\n        isListed(_nftAddress, _tokenId, _msgSender())\\n    {\\n        _cancelListing(_nftAddress, _tokenId, _msgSender());\\n    }\\n\\n    /// @notice Method for updating listed NFT\\n    /// @param _nftAddress Address of NFT contract\\n    /// @param _tokenId Token ID of NFT\\n    /// @param _payToken payment token\\n    /// @param _newPrice New sale price for each iteam\\n    function updateListing(\\n        address _nftAddress,\\n        uint256 _tokenId,\\n        address _payToken,\\n        uint256 _newPrice\\n    ) external nonReentrant isListed(_nftAddress, _tokenId, _msgSender()) {\\n        Listing storage listedItem = listings[_nftAddress][_tokenId][\\n            _msgSender()\\n        ];\\n        if (IERC165(_nftAddress).supportsInterface(INTERFACE_ID_ERC721)) {\\n            IERC721 nft = IERC721(_nftAddress);\\n            require(nft.ownerOf(_tokenId) == _msgSender(), \\\"not owning item\\\");\\n        } else if (\\n            IERC165(_nftAddress).supportsInterface(INTERFACE_ID_ERC1155)\\n        ) {\\n            IERC1155 nft = IERC1155(_nftAddress);\\n            require(\\n                nft.balanceOf(_msgSender(), _tokenId) >= listedItem.quantity,\\n                \\\"not owning item\\\"\\n            );\\n        } else {\\n            revert(\\\"invalid nft address\\\");\\n        }\\n\\n        require(\\n            _payToken == address(0) ||\\n                (addressRegistry.tokenRegistry() != address(0) &&\\n                    ITokenRegistry(addressRegistry.tokenRegistry())\\n                        .enabled(_payToken)),\\n            \\\"invalid pay token\\\"\\n        );\\n\\n        listedItem.payToken = _payToken;\\n        listedItem.pricePerItem = _newPrice;\\n        emit ItemUpdated(\\n            _msgSender(),\\n            _nftAddress,\\n            _tokenId,\\n            _payToken,\\n            _newPrice\\n        );\\n    }\\n\\n    /// @notice Method for buying listed NFT\\n    /// @param _nftAddress NFT contract address\\n    /// @param _tokenId TokenId\\n    function buyItem(\\n        address _nftAddress,\\n        uint256 _tokenId,\\n        address payable _owner\\n    )\\n        external\\n        payable\\n        nonReentrant\\n        isListed(_nftAddress, _tokenId, _owner)\\n        validListing(_nftAddress, _tokenId, _owner)\\n    {\\n        Listing memory listedItem = listings[_nftAddress][_tokenId][_owner];\\n        require(listedItem.payToken == address(0), \\\"invalid pay token\\\");\\n        require(\\n            msg.value >= listedItem.pricePerItem.mul(listedItem.quantity),\\n            \\\"insufficient balance to buy\\\"\\n        );\\n\\n        _buyItem(_nftAddress, _tokenId, address(0), _owner);\\n    }\\n\\n    /// @notice Method for buying listed NFT\\n    /// @param _nftAddress NFT contract address\\n    /// @param _tokenId TokenId\\n    function buyItem(\\n        address _nftAddress,\\n        uint256 _tokenId,\\n        address _payToken,\\n        address _owner\\n    )\\n        external\\n        nonReentrant\\n        isListed(_nftAddress, _tokenId, _owner)\\n        validListing(_nftAddress, _tokenId, _owner)\\n    {\\n        Listing memory listedItem = listings[_nftAddress][_tokenId][_owner];\\n        require(listedItem.payToken == _payToken, \\\"invalid pay token\\\");\\n\\n        _buyItem(_nftAddress, _tokenId, _payToken, _owner);\\n    }\\n\\n    function _buyItem(\\n        address _nftAddress,\\n        uint256 _tokenId,\\n        address _payToken,\\n        address _owner\\n    ) private {\\n        Listing memory listedItem = listings[_nftAddress][_tokenId][_owner];\\n\\n        uint256 price = listedItem.pricePerItem.mul(listedItem.quantity);\\n        uint256 feeAmount = price.mul(platformFee).div(1e3);\\n        if (_payToken == address(0)) {\\n            (bool feeTransferSuccess, ) = feeReceipient.call{value: feeAmount}(\\n                \\\"\\\"\\n            );\\n            require(feeTransferSuccess, \\\"fee transfer failed\\\");\\n        } else {\\n            IERC20(_payToken).safeTransferFrom(\\n                _msgSender(),\\n                feeReceipient,\\n                feeAmount\\n            );\\n        }\\n\\n        address minter = minters[_nftAddress][_tokenId];\\n        uint16 royalty = royalties[_nftAddress][_tokenId];\\n        if (minter != address(0) && royalty != 0) {\\n            uint256 royaltyFee = price.sub(feeAmount).mul(royalty).div(10000);\\n            if (_payToken == address(0)) {\\n                (bool royaltyTransferSuccess, ) = payable(minter).call{\\n                    value: royaltyFee\\n                }(\\\"\\\");\\n                require(royaltyTransferSuccess, \\\"royalty fee transfer failed\\\");\\n            } else {\\n                IERC20(_payToken).safeTransferFrom(\\n                    _msgSender(),\\n                    minter,\\n                    royaltyFee\\n                );\\n            }\\n            feeAmount = feeAmount.add(royaltyFee);\\n        } else {\\n            minter = collectionRoyalties[_nftAddress].feeRecipient;\\n            royalty = collectionRoyalties[_nftAddress].royalty;\\n            if (minter != address(0) && royalty != 0) {\\n                uint256 royaltyFee = price.sub(feeAmount).mul(royalty).div(\\n                    10000\\n                );\\n                if (_payToken == address(0)) {\\n                    (bool royaltyTransferSuccess, ) = payable(minter).call{\\n                        value: royaltyFee\\n                    }(\\\"\\\");\\n                    require(\\n                        royaltyTransferSuccess,\\n                        \\\"royalty fee transfer failed\\\"\\n                    );\\n                } else {\\n                    IERC20(_payToken).safeTransferFrom(\\n                        _msgSender(),\\n                        minter,\\n                        royaltyFee\\n                    );\\n                }\\n                feeAmount = feeAmount.add(royaltyFee);\\n            }\\n        }\\n        if (_payToken == address(0)) {\\n            (bool ownerTransferSuccess, ) = _owner.call{\\n                value: price.sub(feeAmount)\\n            }(\\\"\\\");\\n            require(ownerTransferSuccess, \\\"owner transfer failed\\\");\\n        } else {\\n            IERC20(_payToken).safeTransferFrom(\\n                _msgSender(),\\n                _owner,\\n                price.sub(feeAmount)\\n            );\\n        }\\n\\n        // Transfer NFT to buyer\\n        if (IERC165(_nftAddress).supportsInterface(INTERFACE_ID_ERC721)) {\\n            IERC721(_nftAddress).safeTransferFrom(\\n                _owner,\\n                _msgSender(),\\n                _tokenId\\n            );\\n        } else {\\n            IERC1155(_nftAddress).safeTransferFrom(\\n                _owner,\\n                _msgSender(),\\n                _tokenId,\\n                listedItem.quantity,\\n                bytes(\\\"\\\")\\n            );\\n        }\\n        IBundleMarketplace(addressRegistry.bundleMarketplace())\\n            .validateItemSold(_nftAddress, _tokenId, listedItem.quantity);\\n\\n        emit ItemSold(\\n            _owner,\\n            _msgSender(),\\n            _nftAddress,\\n            _tokenId,\\n            listedItem.quantity,\\n            _payToken,\\n            getPrice(_payToken),\\n            price.div(listedItem.quantity)\\n        );\\n        delete (listings[_nftAddress][_tokenId][_owner]);\\n    }\\n\\n    /// @notice Method for offering item\\n    /// @param _nftAddress NFT contract address\\n    /// @param _tokenId TokenId\\n    /// @param _payToken Paying token\\n    /// @param _quantity Quantity of items\\n    /// @param _pricePerItem Price per item\\n    /// @param _deadline Offer expiration\\n    function createOffer(\\n        address _nftAddress,\\n        uint256 _tokenId,\\n        IERC20 _payToken,\\n        uint256 _quantity,\\n        uint256 _pricePerItem,\\n        uint256 _deadline\\n    ) external offerNotExists(_nftAddress, _tokenId, _msgSender()) {\\n        require(\\n            IERC165(_nftAddress).supportsInterface(INTERFACE_ID_ERC721) ||\\n                IERC165(_nftAddress).supportsInterface(INTERFACE_ID_ERC1155),\\n            \\\"invalid nft address\\\"\\n        );\\n        require(_deadline > _getNow(), \\\"invalid expiration\\\");\\n        require(\\n            address(_payToken) == address(0) ||\\n                (addressRegistry.tokenRegistry() != address(0) &&\\n                    ITokenRegistry(addressRegistry.tokenRegistry())\\n                        .enabled(address(_payToken))),\\n            \\\"invalid pay token\\\"\\n        );\\n\\n        offers[_nftAddress][_tokenId][_msgSender()] = Offer(\\n            _payToken,\\n            _quantity,\\n            _pricePerItem,\\n            _deadline\\n        );\\n\\n        emit OfferCreated(\\n            _msgSender(),\\n            _nftAddress,\\n            _tokenId,\\n            _quantity,\\n            address(_payToken),\\n            _pricePerItem,\\n            _deadline\\n        );\\n    }\\n\\n    /// @notice Method for canceling the offer\\n    /// @param _nftAddress NFT contract address\\n    /// @param _tokenId TokenId\\n    function cancelOffer(address _nftAddress, uint256 _tokenId)\\n        external\\n        offerExists(_nftAddress, _tokenId, _msgSender())\\n    {\\n        delete (offers[_nftAddress][_tokenId][_msgSender()]);\\n        emit OfferCanceled(_msgSender(), _nftAddress, _tokenId);\\n    }\\n\\n    /// @notice Method for accepting the offer\\n    /// @param _nftAddress NFT contract address\\n    /// @param _tokenId TokenId\\n    /// @param _creator Offer creator address\\n    function acceptOffer(\\n        address _nftAddress,\\n        uint256 _tokenId,\\n        address _creator\\n    ) external nonReentrant offerExists(_nftAddress, _tokenId, _creator) {\\n        Offer memory offer = offers[_nftAddress][_tokenId][_creator];\\n        if (IERC165(_nftAddress).supportsInterface(INTERFACE_ID_ERC721)) {\\n            IERC721 nft = IERC721(_nftAddress);\\n            require(nft.ownerOf(_tokenId) == _msgSender(), \\\"not owning item\\\");\\n        } else if (\\n            IERC165(_nftAddress).supportsInterface(INTERFACE_ID_ERC1155)\\n        ) {\\n            IERC1155 nft = IERC1155(_nftAddress);\\n            require(\\n                nft.balanceOf(_msgSender(), _tokenId) >= offer.quantity,\\n                \\\"not owning item\\\"\\n            );\\n        } else {\\n            revert(\\\"invalid nft address\\\");\\n        }\\n\\n        uint256 price = offer.pricePerItem.mul(offer.quantity);\\n        uint256 feeAmount = price.mul(platformFee).div(1e3);\\n        uint256 royaltyFee;\\n\\n        offer.payToken.safeTransferFrom(_creator, feeReceipient, feeAmount);\\n        address minter = minters[_nftAddress][_tokenId];\\n        uint16 royalty = royalties[_nftAddress][_tokenId];\\n        if (minter != address(0) && royalty != 0) {\\n            royaltyFee = price.sub(feeAmount).mul(royalty).div(10000);\\n            offer.payToken.safeTransferFrom(_creator, minter, royaltyFee);\\n            feeAmount = feeAmount.add(royaltyFee);\\n        } else {\\n            minter = collectionRoyalties[_nftAddress].feeRecipient;\\n            royalty = collectionRoyalties[_nftAddress].royalty;\\n            if (minter != address(0) && royalty != 0) {\\n                royaltyFee = price.sub(feeAmount).mul(royalty).div(10000);\\n                offer.payToken.safeTransferFrom(_creator, minter, royaltyFee);\\n                feeAmount = feeAmount.add(royaltyFee);\\n            }\\n        }\\n        offer.payToken.safeTransferFrom(\\n            _creator,\\n            _msgSender(),\\n            price.sub(feeAmount)\\n        );\\n\\n        // Transfer NFT to buyer\\n        if (IERC165(_nftAddress).supportsInterface(INTERFACE_ID_ERC721)) {\\n            IERC721(_nftAddress).safeTransferFrom(\\n                _msgSender(),\\n                _creator,\\n                _tokenId\\n            );\\n        } else {\\n            IERC1155(_nftAddress).safeTransferFrom(\\n                _msgSender(),\\n                _creator,\\n                _tokenId,\\n                offer.quantity,\\n                bytes(\\\"\\\")\\n            );\\n        }\\n        IBundleMarketplace(addressRegistry.bundleMarketplace())\\n            .validateItemSold(_nftAddress, _tokenId, offer.quantity);\\n        delete (listings[_nftAddress][_tokenId][_msgSender()]);\\n        delete (offers[_nftAddress][_tokenId][_creator]);\\n\\n        emit ItemSold(\\n            _msgSender(),\\n            _creator,\\n            _nftAddress,\\n            _tokenId,\\n            offer.quantity,\\n            address(offer.payToken),\\n            getPrice(address(offer.payToken)),\\n            offer.pricePerItem\\n        );\\n        emit OfferCanceled(_creator, _nftAddress, _tokenId);\\n    }\\n\\n    /// @notice Method for setting royalty\\n    /// @param _nftAddress NFT contract address\\n    /// @param _tokenId TokenId\\n    /// @param _royalty Royalty\\n    function registerRoyalty(\\n        address _nftAddress,\\n        uint256 _tokenId,\\n        uint16 _royalty\\n    ) external {\\n        require(_royalty <= 10000, \\\"invalid royalty\\\");\\n        require(_isNFT(_nftAddress), \\\"invalid nft address\\\");\\n        if (IERC165(_nftAddress).supportsInterface(INTERFACE_ID_ERC721)) {\\n            IERC721 nft = IERC721(_nftAddress);\\n            require(nft.ownerOf(_tokenId) == _msgSender(), \\\"not owning item\\\");\\n        } else if (\\n            IERC165(_nftAddress).supportsInterface(INTERFACE_ID_ERC1155)\\n        ) {\\n            IERC1155 nft = IERC1155(_nftAddress);\\n            require(\\n                nft.balanceOf(_msgSender(), _tokenId) > 0,\\n                \\\"not owning item\\\"\\n            );\\n        }\\n\\n        require(\\n            minters[_nftAddress][_tokenId] == address(0),\\n            \\\"royalty already set\\\"\\n        );\\n        minters[_nftAddress][_tokenId] = _msgSender();\\n        royalties[_nftAddress][_tokenId] = _royalty;\\n    }\\n\\n    /// @notice Method for setting royalty\\n    /// @param _nftAddress NFT contract address\\n    /// @param _royalty Royalty\\n    function registerCollectionRoyalty(\\n        address _nftAddress,\\n        address _creator,\\n        uint16 _royalty,\\n        address _feeRecipient\\n    ) external onlyOwner {\\n        require(_creator != address(0), \\\"invalid creator address\\\");\\n        require(_royalty <= 10000, \\\"invalid royalty\\\");\\n        require(\\n            _royalty == 0 || _feeRecipient != address(0),\\n            \\\"invalid fee recipient address\\\"\\n        );\\n        require(!_isNFT(_nftAddress), \\\"invalid nft address\\\");\\n        require(\\n            collectionRoyalties[_nftAddress].creator == address(0),\\n            \\\"royalty already set\\\"\\n        );\\n        collectionRoyalties[_nftAddress] = CollectionRoyalty(\\n            _royalty,\\n            _creator,\\n            _feeRecipient\\n        );\\n    }\\n\\n    function _isNFT(address _nftAddress) internal view returns (bool) {\\n        return\\n            addressRegistry.xyz() == _nftAddress ||\\n            INFTFactory(addressRegistry.factory()).exists(_nftAddress) ||\\n            INFTFactory(addressRegistry.privateFactory()).exists(\\n                _nftAddress\\n            ) ||\\n            INFTFactory(addressRegistry.artFactory()).exists(\\n                _nftAddress\\n            ) ||\\n            INFTFactory(addressRegistry.privateArtFactory()).exists(\\n                _nftAddress\\n            );\\n    }\\n\\n    /**\\n     @notice Method for getting price for pay token\\n     @param _payToken Paying token\\n     */\\n    function getPrice(address _payToken) public view returns (int256) {\\n        int256 unitPrice;\\n        uint8 decimals;\\n        if (_payToken == address(0)) {\\n            IPriceFeed priceFeed = IPriceFeed(\\n                addressRegistry.priceFeed()\\n            );\\n            (unitPrice, decimals) = priceFeed.getPrice(priceFeed.wFTM());\\n        } else {\\n            (unitPrice, decimals) = IPriceFeed(\\n                addressRegistry.priceFeed()\\n            ).getPrice(_payToken);\\n        }\\n        if (decimals < 18) {\\n            unitPrice = unitPrice * (int256(10)**(18 - decimals));\\n        } else {\\n            unitPrice = unitPrice / (int256(10)**(decimals - 18));\\n        }\\n\\n        return unitPrice;\\n    }\\n\\n    /**\\n     @notice Method for updating platform fee\\n     @dev Only admin\\n     @param _platformFee uint16 the platform fee to set\\n     */\\n    function updatePlatformFee(uint16 _platformFee) external onlyOwner {\\n        platformFee = _platformFee;\\n        emit UpdatePlatformFee(_platformFee);\\n    }\\n\\n    /**\\n     @notice Method for updating platform fee address\\n     @dev Only admin\\n     @param _platformFeeRecipient payable address the address to sends the funds to\\n     */\\n    function updatePlatformFeeRecipient(address payable _platformFeeRecipient)\\n        external\\n        onlyOwner\\n    {\\n        feeReceipient = _platformFeeRecipient;\\n        emit UpdatePlatformFeeRecipient(_platformFeeRecipient);\\n    }\\n\\n    /**\\n     @notice Update AddressRegistry contract\\n     @dev Only admin\\n     */\\n    function updateAddressRegistry(address _registry) external onlyOwner {\\n        addressRegistry = IAddressRegistry(_registry);\\n    }\\n\\n    /**\\n     * @notice Validate and cancel listing\\n     * @dev Only bundle marketplace can access\\n     */\\n    function validateItemSold(\\n        address _nftAddress,\\n        uint256 _tokenId,\\n        address _seller,\\n        address _buyer\\n    ) external onlyMarketplace {\\n        Listing memory item = listings[_nftAddress][_tokenId][_seller];\\n        if (item.quantity > 0) {\\n            _cancelListing(_nftAddress, _tokenId, _seller);\\n        }\\n        delete (offers[_nftAddress][_tokenId][_buyer]);\\n        emit OfferCanceled(_buyer, _nftAddress, _tokenId);\\n    }\\n\\n    ////////////////////////////\\n    /// Internal and Private ///\\n    ////////////////////////////\\n\\n    function _getNow() internal view virtual returns (uint256) {\\n        return block.timestamp;\\n    }\\n\\n    function _cancelListing(\\n        address _nftAddress,\\n        uint256 _tokenId,\\n        address _owner\\n    ) private {\\n        Listing memory listedItem = listings[_nftAddress][_tokenId][_owner];\\n        if (IERC165(_nftAddress).supportsInterface(INTERFACE_ID_ERC721)) {\\n            IERC721 nft = IERC721(_nftAddress);\\n            require(nft.ownerOf(_tokenId) == _owner, \\\"not owning item\\\");\\n        } else if (\\n            IERC165(_nftAddress).supportsInterface(INTERFACE_ID_ERC1155)\\n        ) {\\n            IERC1155 nft = IERC1155(_nftAddress);\\n            require(\\n                nft.balanceOf(_msgSender(), _tokenId) >= listedItem.quantity,\\n                \\\"not owning item\\\"\\n            );\\n        } else {\\n            revert(\\\"invalid nft address\\\");\\n        }\\n\\n        delete (listings[_nftAddress][_tokenId][_owner]);\\n        emit ItemCanceled(_owner, _nftAddress, _tokenId);\\n    }\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/introspection/IERC165.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity >=0.6.0 <0.8.0;\\n\\n/**\\n * @dev Interface of the ERC165 standard, as defined in the\\n * https://eips.ethereum.org/EIPS/eip-165[EIP].\\n *\\n * Implementers can declare support of contract interfaces, which can then be\\n * queried by others ({ERC165Checker}).\\n *\\n * For an implementation, see {ERC165}.\\n */\\ninterface IERC165 {\\n    /**\\n     * @dev Returns true if this contract implements the interface defined by\\n     * `interfaceId`. See the corresponding\\n     * https://eips.ethereum.org/EIPS/eip-165#how-interfaces-are-identified[EIP section]\\n     * to learn more about how these ids are created.\\n     *\\n     * This function call must use less than 30 000 gas.\\n     */\\n    function supportsInterface(bytes4 interfaceId) external view returns (bool);\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/token/ERC1155/IERC1155.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity >=0.6.2 <0.8.0;\\n\\nimport \\\"../../introspection/IERC165.sol\\\";\\n\\n/**\\n * @dev Required interface of an ERC1155 compliant contract, as defined in the\\n * https://eips.ethereum.org/EIPS/eip-1155[EIP].\\n *\\n * _Available since v3.1._\\n */\\ninterface IERC1155 is IERC165 {\\n    /**\\n     * @dev Emitted when `value` tokens of token type `id` are transferred from `from` to `to` by `operator`.\\n     */\\n    event TransferSingle(address indexed operator, address indexed from, address indexed to, uint256 id, uint256 value);\\n\\n    /**\\n     * @dev Equivalent to multiple {TransferSingle} events, where `operator`, `from` and `to` are the same for all\\n     * transfers.\\n     */\\n    event TransferBatch(address indexed operator, address indexed from, address indexed to, uint256[] ids, uint256[] values);\\n\\n    /**\\n     * @dev Emitted when `account` grants or revokes permission to `operator` to transfer their tokens, according to\\n     * `approved`.\\n     */\\n    event ApprovalForAll(address indexed account, address indexed operator, bool approved);\\n\\n    /**\\n     * @dev Emitted when the URI for token type `id` changes to `value`, if it is a non-programmatic URI.\\n     *\\n     * If an {URI} event was emitted for `id`, the standard\\n     * https://eips.ethereum.org/EIPS/eip-1155#metadata-extensions[guarantees] that `value` will equal the value\\n     * returned by {IERC1155MetadataURI-uri}.\\n     */\\n    event URI(string value, uint256 indexed id);\\n\\n    /**\\n     * @dev Returns the amount of tokens of token type `id` owned by `account`.\\n     *\\n     * Requirements:\\n     *\\n     * - `account` cannot be the zero address.\\n     */\\n    function balanceOf(address account, uint256 id) external view returns (uint256);\\n\\n    /**\\n     * @dev xref:ROOT:erc1155.adoc#batch-operations[Batched] version of {balanceOf}.\\n     *\\n     * Requirements:\\n     *\\n     * - `accounts` and `ids` must have the same length.\\n     */\\n    function balanceOfBatch(address[] calldata accounts, uint256[] calldata ids) external view returns (uint256[] memory);\\n\\n    /**\\n     * @dev Grants or revokes permission to `operator` to transfer the caller's tokens, according to `approved`,\\n     *\\n     * Emits an {ApprovalForAll} event.\\n     *\\n     * Requirements:\\n     *\\n     * - `operator` cannot be the caller.\\n     */\\n    function setApprovalForAll(address operator, bool approved) external;\\n\\n    /**\\n     * @dev Returns true if `operator` is approved to transfer ``account``'s tokens.\\n     *\\n     * See {setApprovalForAll}.\\n     */\\n    function isApprovedForAll(address account, address operator) external view returns (bool);\\n\\n    /**\\n     * @dev Transfers `amount` tokens of token type `id` from `from` to `to`.\\n     *\\n     * Emits a {TransferSingle} event.\\n     *\\n     * Requirements:\\n     *\\n     * - `to` cannot be the zero address.\\n     * - If the caller is not `from`, it must be have been approved to spend ``from``'s tokens via {setApprovalForAll}.\\n     * - `from` must have a balance of tokens of type `id` of at least `amount`.\\n     * - If `to` refers to a smart contract, it must implement {IERC1155Receiver-onERC1155Received} and return the\\n     * acceptance magic value.\\n     */\\n    function safeTransferFrom(address from, address to, uint256 id, uint256 amount, bytes calldata data) external;\\n\\n    /**\\n     * @dev xref:ROOT:erc1155.adoc#batch-operations[Batched] version of {safeTransferFrom}.\\n     *\\n     * Emits a {TransferBatch} event.\\n     *\\n     * Requirements:\\n     *\\n     * - `ids` and `amounts` must have the same length.\\n     * - If `to` refers to a smart contract, it must implement {IERC1155Receiver-onERC1155BatchReceived} and return the\\n     * acceptance magic value.\\n     */\\n    function safeBatchTransferFrom(address from, address to, uint256[] calldata ids, uint256[] calldata amounts, bytes calldata data) external;\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/token/ERC721/IERC721.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity >=0.6.2 <0.8.0;\\n\\nimport \\\"../../introspection/IERC165.sol\\\";\\n\\n/**\\n * @dev Required interface of an ERC721 compliant contract.\\n */\\ninterface IERC721 is IERC165 {\\n    /**\\n     * @dev Emitted when `tokenId` token is transferred from `from` to `to`.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 indexed tokenId);\\n\\n    /**\\n     * @dev Emitted when `owner` enables `approved` to manage the `tokenId` token.\\n     */\\n    event Approval(address indexed owner, address indexed approved, uint256 indexed tokenId);\\n\\n    /**\\n     * @dev Emitted when `owner` enables or disables (`approved`) `operator` to manage all of its assets.\\n     */\\n    event ApprovalForAll(address indexed owner, address indexed operator, bool approved);\\n\\n    /**\\n     * @dev Returns the number of tokens in ``owner``'s account.\\n     */\\n    function balanceOf(address owner) external view returns (uint256 balance);\\n\\n    /**\\n     * @dev Returns the owner of the `tokenId` token.\\n     *\\n     * Requirements:\\n     *\\n     * - `tokenId` must exist.\\n     */\\n    function ownerOf(uint256 tokenId) external view returns (address owner);\\n\\n    /**\\n     * @dev Safely transfers `tokenId` token from `from` to `to`, checking first that contract recipients\\n     * are aware of the ERC721 protocol to prevent tokens from being forever locked.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` cannot be the zero address.\\n     * - `to` cannot be the zero address.\\n     * - `tokenId` token must exist and be owned by `from`.\\n     * - If the caller is not `from`, it must be have been allowed to move this token by either {approve} or {setApprovalForAll}.\\n     * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function safeTransferFrom(address from, address to, uint256 tokenId) external;\\n\\n    /**\\n     * @dev Transfers `tokenId` token from `from` to `to`.\\n     *\\n     * WARNING: Usage of this method is discouraged, use {safeTransferFrom} whenever possible.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` cannot be the zero address.\\n     * - `to` cannot be the zero address.\\n     * - `tokenId` token must be owned by `from`.\\n     * - If the caller is not `from`, it must be approved to move this token by either {approve} or {setApprovalForAll}.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(address from, address to, uint256 tokenId) external;\\n\\n    /**\\n     * @dev Gives permission to `to` to transfer `tokenId` token to another account.\\n     * The approval is cleared when the token is transferred.\\n     *\\n     * Only a single account can be approved at a time, so approving the zero address clears previous approvals.\\n     *\\n     * Requirements:\\n     *\\n     * - The caller must own the token or be an approved operator.\\n     * - `tokenId` must exist.\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address to, uint256 tokenId) external;\\n\\n    /**\\n     * @dev Returns the account approved for `tokenId` token.\\n     *\\n     * Requirements:\\n     *\\n     * - `tokenId` must exist.\\n     */\\n    function getApproved(uint256 tokenId) external view returns (address operator);\\n\\n    /**\\n     * @dev Approve or remove `operator` as an operator for the caller.\\n     * Operators can call {transferFrom} or {safeTransferFrom} for any token owned by the caller.\\n     *\\n     * Requirements:\\n     *\\n     * - The `operator` cannot be the caller.\\n     *\\n     * Emits an {ApprovalForAll} event.\\n     */\\n    function setApprovalForAll(address operator, bool _approved) external;\\n\\n    /**\\n     * @dev Returns if the `operator` is allowed to manage all of the assets of `owner`.\\n     *\\n     * See {setApprovalForAll}\\n     */\\n    function isApprovedForAll(address owner, address operator) external view returns (bool);\\n\\n    /**\\n      * @dev Safely transfers `tokenId` token from `from` to `to`.\\n      *\\n      * Requirements:\\n      *\\n      * - `from` cannot be the zero address.\\n      * - `to` cannot be the zero address.\\n      * - `tokenId` token must exist and be owned by `from`.\\n      * - If the caller is not `from`, it must be approved to move this token by either {approve} or {setApprovalForAll}.\\n      * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer.\\n      *\\n      * Emits a {Transfer} event.\\n      */\\n    function safeTransferFrom(address from, address to, uint256 tokenId, bytes calldata data) external;\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/token/ERC20/IERC20.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity >=0.6.0 <0.8.0;\\n\\n/**\\n * @dev Interface of the ERC20 standard as defined in the EIP.\\n */\\ninterface IERC20 {\\n    /**\\n     * @dev Returns the amount of tokens in existence.\\n     */\\n    function totalSupply() external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the amount of tokens owned by `account`.\\n     */\\n    function balanceOf(address account) external view returns (uint256);\\n\\n    /**\\n     * @dev Moves `amount` tokens from the caller's account to `recipient`.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transfer(address recipient, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Returns the remaining number of tokens that `spender` will be\\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\\n     * zero by default.\\n     *\\n     * This value changes when {approve} or {transferFrom} are called.\\n     */\\n    function allowance(address owner, address spender) external view returns (uint256);\\n\\n    /**\\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\\n     * that someone may use both the old and the new allowance by unfortunate\\n     * transaction ordering. One possible solution to mitigate this race\\n     * condition is to first reduce the spender's allowance to 0 and set the\\n     * desired value afterwards:\\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address spender, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Moves `amount` tokens from `sender` to `recipient` using the\\n     * allowance mechanism. `amount` is then deducted from the caller's\\n     * allowance.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(address sender, address recipient, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\\n     * another (`to`).\\n     *\\n     * Note that `value` may be zero.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 value);\\n\\n    /**\\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\\n     * a call to {approve}. `value` is the new allowance.\\n     */\\n    event Approval(address indexed owner, address indexed spender, uint256 value);\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/token/ERC20/SafeERC20.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity >=0.6.0 <0.8.0;\\n\\nimport \\\"./IERC20.sol\\\";\\nimport \\\"../../math/SafeMath.sol\\\";\\nimport \\\"../../utils/Address.sol\\\";\\n\\n/**\\n * @title SafeERC20\\n * @dev Wrappers around ERC20 operations that throw on failure (when the token\\n * contract returns false). Tokens that return no value (and instead revert or\\n * throw on failure) are also supported, non-reverting calls are assumed to be\\n * successful.\\n * To use this library you can add a `using SafeERC20 for IERC20;` statement to your contract,\\n * which allows you to call the safe operations as `token.safeTransfer(...)`, etc.\\n */\\nlibrary SafeERC20 {\\n    using SafeMath for uint256;\\n    using Address for address;\\n\\n    function safeTransfer(IERC20 token, address to, uint256 value) internal {\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.transfer.selector, to, value));\\n    }\\n\\n    function safeTransferFrom(IERC20 token, address from, address to, uint256 value) internal {\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.transferFrom.selector, from, to, value));\\n    }\\n\\n    /**\\n     * @dev Deprecated. This function has issues similar to the ones found in\\n     * {IERC20-approve}, and its usage is discouraged.\\n     *\\n     * Whenever possible, use {safeIncreaseAllowance} and\\n     * {safeDecreaseAllowance} instead.\\n     */\\n    function safeApprove(IERC20 token, address spender, uint256 value) internal {\\n        // safeApprove should only be called when setting an initial allowance,\\n        // or when resetting it to zero. To increase and decrease it, use\\n        // 'safeIncreaseAllowance' and 'safeDecreaseAllowance'\\n        // solhint-disable-next-line max-line-length\\n        require((value == 0) || (token.allowance(address(this), spender) == 0),\\n            \\\"SafeERC20: approve from non-zero to non-zero allowance\\\"\\n        );\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, value));\\n    }\\n\\n    function safeIncreaseAllowance(IERC20 token, address spender, uint256 value) internal {\\n        uint256 newAllowance = token.allowance(address(this), spender).add(value);\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));\\n    }\\n\\n    function safeDecreaseAllowance(IERC20 token, address spender, uint256 value) internal {\\n        uint256 newAllowance = token.allowance(address(this), spender).sub(value, \\\"SafeERC20: decreased allowance below zero\\\");\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));\\n    }\\n\\n    /**\\n     * @dev Imitates a Solidity high-level call (i.e. a regular function call to a contract), relaxing the requirement\\n     * on the return value: the return value is optional (but if data is returned, it must not be false).\\n     * @param token The token targeted by the call.\\n     * @param data The call data (encoded using abi.encode or one of its variants).\\n     */\\n    function _callOptionalReturn(IERC20 token, bytes memory data) private {\\n        // We need to perform a low level call here, to bypass Solidity's return data size checking mechanism, since\\n        // we're implementing it ourselves. We use {Address.functionCall} to perform this call, which verifies that\\n        // the target address contains contract code and also asserts for success in the low-level call.\\n\\n        bytes memory returndata = address(token).functionCall(data, \\\"SafeERC20: low-level call failed\\\");\\n        if (returndata.length > 0) { // Return data is optional\\n            // solhint-disable-next-line max-line-length\\n            require(abi.decode(returndata, (bool)), \\\"SafeERC20: ERC20 operation did not succeed\\\");\\n        }\\n    }\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/math/SafeMath.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity >=0.6.0 <0.8.0;\\n\\n/**\\n * @dev Wrappers over Solidity's arithmetic operations with added overflow\\n * checks.\\n *\\n * Arithmetic operations in Solidity wrap on overflow. This can easily result\\n * in bugs, because programmers usually assume that an overflow raises an\\n * error, which is the standard behavior in high level programming languages.\\n * `SafeMath` restores this intuition by reverting the transaction when an\\n * operation overflows.\\n *\\n * Using this library instead of the unchecked operations eliminates an entire\\n * class of bugs, so it's recommended to use it always.\\n */\\nlibrary SafeMath {\\n    /**\\n     * @dev Returns the addition of two unsigned integers, with an overflow flag.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function tryAdd(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        uint256 c = a + b;\\n        if (c < a) return (false, 0);\\n        return (true, c);\\n    }\\n\\n    /**\\n     * @dev Returns the substraction of two unsigned integers, with an overflow flag.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function trySub(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        if (b > a) return (false, 0);\\n        return (true, a - b);\\n    }\\n\\n    /**\\n     * @dev Returns the multiplication of two unsigned integers, with an overflow flag.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function tryMul(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        // Gas optimization: this is cheaper than requiring 'a' not being zero, but the\\n        // benefit is lost if 'b' is also tested.\\n        // See: https://github.com/OpenZeppelin/openzeppelin-contracts/pull/522\\n        if (a == 0) return (true, 0);\\n        uint256 c = a * b;\\n        if (c / a != b) return (false, 0);\\n        return (true, c);\\n    }\\n\\n    /**\\n     * @dev Returns the division of two unsigned integers, with a division by zero flag.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function tryDiv(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        if (b == 0) return (false, 0);\\n        return (true, a / b);\\n    }\\n\\n    /**\\n     * @dev Returns the remainder of dividing two unsigned integers, with a division by zero flag.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function tryMod(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        if (b == 0) return (false, 0);\\n        return (true, a % b);\\n    }\\n\\n    /**\\n     * @dev Returns the addition of two unsigned integers, reverting on\\n     * overflow.\\n     *\\n     * Counterpart to Solidity's `+` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Addition cannot overflow.\\n     */\\n    function add(uint256 a, uint256 b) internal pure returns (uint256) {\\n        uint256 c = a + b;\\n        require(c >= a, \\\"SafeMath: addition overflow\\\");\\n        return c;\\n    }\\n\\n    /**\\n     * @dev Returns the subtraction of two unsigned integers, reverting on\\n     * overflow (when the result is negative).\\n     *\\n     * Counterpart to Solidity's `-` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Subtraction cannot overflow.\\n     */\\n    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\\n        require(b <= a, \\\"SafeMath: subtraction overflow\\\");\\n        return a - b;\\n    }\\n\\n    /**\\n     * @dev Returns the multiplication of two unsigned integers, reverting on\\n     * overflow.\\n     *\\n     * Counterpart to Solidity's `*` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Multiplication cannot overflow.\\n     */\\n    function mul(uint256 a, uint256 b) internal pure returns (uint256) {\\n        if (a == 0) return 0;\\n        uint256 c = a * b;\\n        require(c / a == b, \\\"SafeMath: multiplication overflow\\\");\\n        return c;\\n    }\\n\\n    /**\\n     * @dev Returns the integer division of two unsigned integers, reverting on\\n     * division by zero. The result is rounded towards zero.\\n     *\\n     * Counterpart to Solidity's `/` operator. Note: this function uses a\\n     * `revert` opcode (which leaves remaining gas untouched) while Solidity\\n     * uses an invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Requirements:\\n     *\\n     * - The divisor cannot be zero.\\n     */\\n    function div(uint256 a, uint256 b) internal pure returns (uint256) {\\n        require(b > 0, \\\"SafeMath: division by zero\\\");\\n        return a / b;\\n    }\\n\\n    /**\\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\\n     * reverting when dividing by zero.\\n     *\\n     * Counterpart to Solidity's `%` operator. This function uses a `revert`\\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\\n     * invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Requirements:\\n     *\\n     * - The divisor cannot be zero.\\n     */\\n    function mod(uint256 a, uint256 b) internal pure returns (uint256) {\\n        require(b > 0, \\\"SafeMath: modulo by zero\\\");\\n        return a % b;\\n    }\\n\\n    /**\\n     * @dev Returns the subtraction of two unsigned integers, reverting with custom message on\\n     * overflow (when the result is negative).\\n     *\\n     * CAUTION: This function is deprecated because it requires allocating memory for the error\\n     * message unnecessarily. For custom revert reasons use {trySub}.\\n     *\\n     * Counterpart to Solidity's `-` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Subtraction cannot overflow.\\n     */\\n    function sub(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\\n        require(b <= a, errorMessage);\\n        return a - b;\\n    }\\n\\n    /**\\n     * @dev Returns the integer division of two unsigned integers, reverting with custom message on\\n     * division by zero. The result is rounded towards zero.\\n     *\\n     * CAUTION: This function is deprecated because it requires allocating memory for the error\\n     * message unnecessarily. For custom revert reasons use {tryDiv}.\\n     *\\n     * Counterpart to Solidity's `/` operator. Note: this function uses a\\n     * `revert` opcode (which leaves remaining gas untouched) while Solidity\\n     * uses an invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Requirements:\\n     *\\n     * - The divisor cannot be zero.\\n     */\\n    function div(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\\n        require(b > 0, errorMessage);\\n        return a / b;\\n    }\\n\\n    /**\\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\\n     * reverting with custom message when dividing by zero.\\n     *\\n     * CAUTION: This function is deprecated because it requires allocating memory for the error\\n     * message unnecessarily. For custom revert reasons use {tryMod}.\\n     *\\n     * Counterpart to Solidity's `%` operator. This function uses a `revert`\\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\\n     * invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Requirements:\\n     *\\n     * - The divisor cannot be zero.\\n     */\\n    function mod(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\\n        require(b > 0, errorMessage);\\n        return a % b;\\n    }\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity >=0.6.0 <0.8.0;\\n\\nimport \\\"../utils/ContextUpgradeable.sol\\\";\\nimport \\\"../proxy/Initializable.sol\\\";\\n/**\\n * @dev Contract module which provides a basic access control mechanism, where\\n * there is an account (an owner) that can be granted exclusive access to\\n * specific functions.\\n *\\n * By default, the owner account will be the one that deploys the contract. This\\n * can later be changed with {transferOwnership}.\\n *\\n * This module is used through inheritance. It will make available the modifier\\n * `onlyOwner`, which can be applied to your functions to restrict their use to\\n * the owner.\\n */\\nabstract contract OwnableUpgradeable is Initializable, ContextUpgradeable {\\n    address private _owner;\\n\\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\\n\\n    /**\\n     * @dev Initializes the contract setting the deployer as the initial owner.\\n     */\\n    function __Ownable_init() internal initializer {\\n        __Context_init_unchained();\\n        __Ownable_init_unchained();\\n    }\\n\\n    function __Ownable_init_unchained() internal initializer {\\n        address msgSender = _msgSender();\\n        _owner = msgSender;\\n        emit OwnershipTransferred(address(0), msgSender);\\n    }\\n\\n    /**\\n     * @dev Returns the address of the current owner.\\n     */\\n    function owner() public view virtual returns (address) {\\n        return _owner;\\n    }\\n\\n    /**\\n     * @dev Throws if called by any account other than the owner.\\n     */\\n    modifier onlyOwner() {\\n        require(owner() == _msgSender(), \\\"Ownable: caller is not the owner\\\");\\n        _;\\n    }\\n\\n    /**\\n     * @dev Leaves the contract without owner. It will not be possible to call\\n     * `onlyOwner` functions anymore. Can only be called by the current owner.\\n     *\\n     * NOTE: Renouncing ownership will leave the contract without an owner,\\n     * thereby removing any functionality that is only available to the owner.\\n     */\\n    function renounceOwnership() public virtual onlyOwner {\\n        emit OwnershipTransferred(_owner, address(0));\\n        _owner = address(0);\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Can only be called by the current owner.\\n     */\\n    function transferOwnership(address newOwner) public virtual onlyOwner {\\n        require(newOwner != address(0), \\\"Ownable: new owner is the zero address\\\");\\n        emit OwnershipTransferred(_owner, newOwner);\\n        _owner = newOwner;\\n    }\\n    uint256[49] private __gap;\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts-upgradeable/utils/AddressUpgradeable.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity >=0.6.2 <0.8.0;\\n\\n/**\\n * @dev Collection of functions related to the address type\\n */\\nlibrary AddressUpgradeable {\\n    /**\\n     * @dev Returns true if `account` is a contract.\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * It is unsafe to assume that an address for which this function returns\\n     * false is an externally-owned account (EOA) and not a contract.\\n     *\\n     * Among others, `isContract` will return false for the following\\n     * types of addresses:\\n     *\\n     *  - an externally-owned account\\n     *  - a contract in construction\\n     *  - an address where a contract will be created\\n     *  - an address where a contract lived, but was destroyed\\n     * ====\\n     */\\n    function isContract(address account) internal view returns (bool) {\\n        // This method relies on extcodesize, which returns 0 for contracts in\\n        // construction, since the code is only stored at the end of the\\n        // constructor execution.\\n\\n        uint256 size;\\n        // solhint-disable-next-line no-inline-assembly\\n        assembly { size := extcodesize(account) }\\n        return size > 0;\\n    }\\n\\n    /**\\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\\n     * `recipient`, forwarding all available gas and reverting on errors.\\n     *\\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\\n     * imposed by `transfer`, making them unable to receive funds via\\n     * `transfer`. {sendValue} removes this limitation.\\n     *\\n     * https://diligence.consensys.net/posts/2019/09/stop-using-soliditys-transfer-now/[Learn more].\\n     *\\n     * IMPORTANT: because control is transferred to `recipient`, care must be\\n     * taken to not create reentrancy vulnerabilities. Consider using\\n     * {ReentrancyGuard} or the\\n     * https://solidity.readthedocs.io/en/v0.5.11/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\\n     */\\n    function sendValue(address payable recipient, uint256 amount) internal {\\n        require(address(this).balance >= amount, \\\"Address: insufficient balance\\\");\\n\\n        // solhint-disable-next-line avoid-low-level-calls, avoid-call-value\\n        (bool success, ) = recipient.call{ value: amount }(\\\"\\\");\\n        require(success, \\\"Address: unable to send value, recipient may have reverted\\\");\\n    }\\n\\n    /**\\n     * @dev Performs a Solidity function call using a low level `call`. A\\n     * plain`call` is an unsafe replacement for a function call: use this\\n     * function instead.\\n     *\\n     * If `target` reverts with a revert reason, it is bubbled up by this\\n     * function (like regular Solidity function calls).\\n     *\\n     * Returns the raw returned data. To convert to the expected return value,\\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\\n     *\\n     * Requirements:\\n     *\\n     * - `target` must be a contract.\\n     * - calling `target` with `data` must not revert.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\\n      return functionCall(target, data, \\\"Address: low-level call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\\n     * `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(address target, bytes memory data, string memory errorMessage) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, 0, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but also transferring `value` wei to `target`.\\n     *\\n     * Requirements:\\n     *\\n     * - the calling contract must have an ETH balance of at least `value`.\\n     * - the called Solidity function must be `payable`.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(address target, bytes memory data, uint256 value) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, value, \\\"Address: low-level call with value failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\\n     * with `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(address target, bytes memory data, uint256 value, string memory errorMessage) internal returns (bytes memory) {\\n        require(address(this).balance >= value, \\\"Address: insufficient balance for call\\\");\\n        require(isContract(target), \\\"Address: call to non-contract\\\");\\n\\n        // solhint-disable-next-line avoid-low-level-calls\\n        (bool success, bytes memory returndata) = target.call{ value: value }(data);\\n        return _verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\\n        return functionStaticCall(target, data, \\\"Address: low-level static call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(address target, bytes memory data, string memory errorMessage) internal view returns (bytes memory) {\\n        require(isContract(target), \\\"Address: static call to non-contract\\\");\\n\\n        // solhint-disable-next-line avoid-low-level-calls\\n        (bool success, bytes memory returndata) = target.staticcall(data);\\n        return _verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    function _verifyCallResult(bool success, bytes memory returndata, string memory errorMessage) private pure returns(bytes memory) {\\n        if (success) {\\n            return returndata;\\n        } else {\\n            // Look for revert reason and bubble it up if present\\n            if (returndata.length > 0) {\\n                // The easiest way to bubble the revert reason is using memory via assembly\\n\\n                // solhint-disable-next-line no-inline-assembly\\n                assembly {\\n                    let returndata_size := mload(returndata)\\n                    revert(add(32, returndata), returndata_size)\\n                }\\n            } else {\\n                revert(errorMessage);\\n            }\\n        }\\n    }\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts-upgradeable/utils/ReentrancyGuardUpgradeable.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity >=0.6.0 <0.8.0;\\nimport \\\"../proxy/Initializable.sol\\\";\\n\\n/**\\n * @dev Contract module that helps prevent reentrant calls to a function.\\n *\\n * Inheriting from `ReentrancyGuard` will make the {nonReentrant} modifier\\n * available, which can be applied to functions to make sure there are no nested\\n * (reentrant) calls to them.\\n *\\n * Note that because there is a single `nonReentrant` guard, functions marked as\\n * `nonReentrant` may not call one another. This can be worked around by making\\n * those functions `private`, and then adding `external` `nonReentrant` entry\\n * points to them.\\n *\\n * TIP: If you would like to learn more about reentrancy and alternative ways\\n * to protect against it, check out our blog post\\n * https://blog.openzeppelin.com/reentrancy-after-istanbul/[Reentrancy After Istanbul].\\n */\\nabstract contract ReentrancyGuardUpgradeable is Initializable {\\n    // Booleans are more expensive than uint256 or any type that takes up a full\\n    // word because each write operation emits an extra SLOAD to first read the\\n    // slot's contents, replace the bits taken up by the boolean, and then write\\n    // back. This is the compiler's defense against contract upgrades and\\n    // pointer aliasing, and it cannot be disabled.\\n\\n    // The values being non-zero value makes deployment a bit more expensive,\\n    // but in exchange the refund on every call to nonReentrant will be lower in\\n    // amount. Since refunds are capped to a percentage of the total\\n    // transaction's gas, it is best to keep them low in cases like this one, to\\n    // increase the likelihood of the full refund coming into effect.\\n    uint256 private constant _NOT_ENTERED = 1;\\n    uint256 private constant _ENTERED = 2;\\n\\n    uint256 private _status;\\n\\n    function __ReentrancyGuard_init() internal initializer {\\n        __ReentrancyGuard_init_unchained();\\n    }\\n\\n    function __ReentrancyGuard_init_unchained() internal initializer {\\n        _status = _NOT_ENTERED;\\n    }\\n\\n    /**\\n     * @dev Prevents a contract from calling itself, directly or indirectly.\\n     * Calling a `nonReentrant` function from another `nonReentrant`\\n     * function is not supported. It is possible to prevent this from happening\\n     * by making the `nonReentrant` function external, and make it call a\\n     * `private` function that does the actual work.\\n     */\\n    modifier nonReentrant() {\\n        // On the first call to nonReentrant, _notEntered will be true\\n        require(_status != _ENTERED, \\\"ReentrancyGuard: reentrant call\\\");\\n\\n        // Any calls to nonReentrant after this point will fail\\n        _status = _ENTERED;\\n\\n        _;\\n\\n        // By storing the original value once again, a refund is triggered (see\\n        // https://eips.ethereum.org/EIPS/eip-2200)\\n        _status = _NOT_ENTERED;\\n    }\\n    uint256[49] private __gap;\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/utils/Address.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity >=0.6.2 <0.8.0;\\n\\n/**\\n * @dev Collection of functions related to the address type\\n */\\nlibrary Address {\\n    /**\\n     * @dev Returns true if `account` is a contract.\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * It is unsafe to assume that an address for which this function returns\\n     * false is an externally-owned account (EOA) and not a contract.\\n     *\\n     * Among others, `isContract` will return false for the following\\n     * types of addresses:\\n     *\\n     *  - an externally-owned account\\n     *  - a contract in construction\\n     *  - an address where a contract will be created\\n     *  - an address where a contract lived, but was destroyed\\n     * ====\\n     */\\n    function isContract(address account) internal view returns (bool) {\\n        // This method relies on extcodesize, which returns 0 for contracts in\\n        // construction, since the code is only stored at the end of the\\n        // constructor execution.\\n\\n        uint256 size;\\n        // solhint-disable-next-line no-inline-assembly\\n        assembly { size := extcodesize(account) }\\n        return size > 0;\\n    }\\n\\n    /**\\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\\n     * `recipient`, forwarding all available gas and reverting on errors.\\n     *\\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\\n     * imposed by `transfer`, making them unable to receive funds via\\n     * `transfer`. {sendValue} removes this limitation.\\n     *\\n     * https://diligence.consensys.net/posts/2019/09/stop-using-soliditys-transfer-now/[Learn more].\\n     *\\n     * IMPORTANT: because control is transferred to `recipient`, care must be\\n     * taken to not create reentrancy vulnerabilities. Consider using\\n     * {ReentrancyGuard} or the\\n     * https://solidity.readthedocs.io/en/v0.5.11/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\\n     */\\n    function sendValue(address payable recipient, uint256 amount) internal {\\n        require(address(this).balance >= amount, \\\"Address: insufficient balance\\\");\\n\\n        // solhint-disable-next-line avoid-low-level-calls, avoid-call-value\\n        (bool success, ) = recipient.call{ value: amount }(\\\"\\\");\\n        require(success, \\\"Address: unable to send value, recipient may have reverted\\\");\\n    }\\n\\n    /**\\n     * @dev Performs a Solidity function call using a low level `call`. A\\n     * plain`call` is an unsafe replacement for a function call: use this\\n     * function instead.\\n     *\\n     * If `target` reverts with a revert reason, it is bubbled up by this\\n     * function (like regular Solidity function calls).\\n     *\\n     * Returns the raw returned data. To convert to the expected return value,\\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\\n     *\\n     * Requirements:\\n     *\\n     * - `target` must be a contract.\\n     * - calling `target` with `data` must not revert.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\\n      return functionCall(target, data, \\\"Address: low-level call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\\n     * `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(address target, bytes memory data, string memory errorMessage) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, 0, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but also transferring `value` wei to `target`.\\n     *\\n     * Requirements:\\n     *\\n     * - the calling contract must have an ETH balance of at least `value`.\\n     * - the called Solidity function must be `payable`.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(address target, bytes memory data, uint256 value) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, value, \\\"Address: low-level call with value failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\\n     * with `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(address target, bytes memory data, uint256 value, string memory errorMessage) internal returns (bytes memory) {\\n        require(address(this).balance >= value, \\\"Address: insufficient balance for call\\\");\\n        require(isContract(target), \\\"Address: call to non-contract\\\");\\n\\n        // solhint-disable-next-line avoid-low-level-calls\\n        (bool success, bytes memory returndata) = target.call{ value: value }(data);\\n        return _verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\\n        return functionStaticCall(target, data, \\\"Address: low-level static call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(address target, bytes memory data, string memory errorMessage) internal view returns (bytes memory) {\\n        require(isContract(target), \\\"Address: static call to non-contract\\\");\\n\\n        // solhint-disable-next-line avoid-low-level-calls\\n        (bool success, bytes memory returndata) = target.staticcall(data);\\n        return _verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionDelegateCall(target, data, \\\"Address: low-level delegate call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(address target, bytes memory data, string memory errorMessage) internal returns (bytes memory) {\\n        require(isContract(target), \\\"Address: delegate call to non-contract\\\");\\n\\n        // solhint-disable-next-line avoid-low-level-calls\\n        (bool success, bytes memory returndata) = target.delegatecall(data);\\n        return _verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    function _verifyCallResult(bool success, bytes memory returndata, string memory errorMessage) private pure returns(bytes memory) {\\n        if (success) {\\n            return returndata;\\n        } else {\\n            // Look for revert reason and bubble it up if present\\n            if (returndata.length > 0) {\\n                // The easiest way to bubble the revert reason is using memory via assembly\\n\\n                // solhint-disable-next-line no-inline-assembly\\n                assembly {\\n                    let returndata_size := mload(returndata)\\n                    revert(add(32, returndata), returndata_size)\\n                }\\n            } else {\\n                revert(errorMessage);\\n            }\\n        }\\n    }\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts-upgradeable/utils/ContextUpgradeable.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity >=0.6.0 <0.8.0;\\nimport \\\"../proxy/Initializable.sol\\\";\\n\\n/*\\n * @dev Provides information about the current execution context, including the\\n * sender of the transaction and its data. While these are generally available\\n * via msg.sender and msg.data, they should not be accessed in such a direct\\n * manner, since when dealing with GSN meta-transactions the account sending and\\n * paying for execution may not be the actual sender (as far as an application\\n * is concerned).\\n *\\n * This contract is only required for intermediate, library-like contracts.\\n */\\nabstract contract ContextUpgradeable is Initializable {\\n    function __Context_init() internal initializer {\\n        __Context_init_unchained();\\n    }\\n\\n    function __Context_init_unchained() internal initializer {\\n    }\\n    function _msgSender() internal view virtual returns (address payable) {\\n        return msg.sender;\\n    }\\n\\n    function _msgData() internal view virtual returns (bytes memory) {\\n        this; // silence state mutability warning without generating bytecode - see https://github.com/ethereum/solidity/issues/2691\\n        return msg.data;\\n    }\\n    uint256[50] private __gap;\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts-upgradeable/proxy/Initializable.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\n// solhint-disable-next-line compiler-version\\npragma solidity >=0.4.24 <0.8.0;\\n\\nimport \\\"../utils/AddressUpgradeable.sol\\\";\\n\\n/**\\n * @dev This is a base contract to aid in writing upgradeable contracts, or any kind of contract that will be deployed\\n * behind a proxy. Since a proxied contract can't have a constructor, it's common to move constructor logic to an\\n * external initializer function, usually called `initialize`. It then becomes necessary to protect this initializer\\n * function so it can only be called once. The {initializer} modifier provided by this contract will have this effect.\\n *\\n * TIP: To avoid leaving the proxy in an uninitialized state, the initializer function should be called as early as\\n * possible by providing the encoded function call as the `_data` argument to {UpgradeableProxy-constructor}.\\n *\\n * CAUTION: When used with inheritance, manual care must be taken to not invoke a parent initializer twice, or to ensure\\n * that all initializers are idempotent. This is not verified automatically as constructors are by Solidity.\\n */\\nabstract contract Initializable {\\n\\n    /**\\n     * @dev Indicates that the contract has been initialized.\\n     */\\n    bool private _initialized;\\n\\n    /**\\n     * @dev Indicates that the contract is in the process of being initialized.\\n     */\\n    bool private _initializing;\\n\\n    /**\\n     * @dev Modifier to protect an initializer function from being invoked twice.\\n     */\\n    modifier initializer() {\\n        require(_initializing || _isConstructor() || !_initialized, \\\"Initializable: contract is already initialized\\\");\\n\\n        bool isTopLevelCall = !_initializing;\\n        if (isTopLevelCall) {\\n            _initializing = true;\\n            _initialized = true;\\n        }\\n\\n        _;\\n\\n        if (isTopLevelCall) {\\n            _initializing = false;\\n        }\\n    }\\n\\n    /// @dev Returns true if and only if the function is running in the constructor\\n    function _isConstructor() private view returns (bool) {\\n        return !AddressUpgradeable.isContract(address(this));\\n    }\\n}\\n\"\r\n    }\r\n  },\r\n  \"settings\": {\r\n    \"optimizer\": {\r\n      \"enabled\": true,\r\n      \"runs\": 200\r\n    },\r\n    \"outputSelection\": {\r\n      \"*\": {\r\n        \"*\": [\r\n          \"evm.bytecode\",\r\n          \"evm.deployedBytecode\",\r\n          \"devdoc\",\r\n          \"userdoc\",\r\n          \"metadata\",\r\n          \"abi\"\r\n        ]\r\n      }\r\n    },\r\n    \"libraries\": {}\r\n  }\r\n}}","ABI":"[{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"nft\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"ItemCanceled\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"nft\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"quantity\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"payToken\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"pricePerItem\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"startingTime\",\"type\":\"uint256\"}],\"name\":\"ItemListed\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"seller\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"buyer\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"nft\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"quantity\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"payToken\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"int256\",\"name\":\"unitPrice\",\"type\":\"int256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"pricePerItem\",\"type\":\"uint256\"}],\"name\":\"ItemSold\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"nft\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"payToken\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"newPrice\",\"type\":\"uint256\"}],\"name\":\"ItemUpdated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"creator\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"nft\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"OfferCanceled\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"creator\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"nft\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"quantity\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"payToken\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"pricePerItem\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"deadline\",\"type\":\"uint256\"}],\"name\":\"OfferCreated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint16\",\"name\":\"platformFee\",\"type\":\"uint16\"}],\"name\":\"UpdatePlatformFee\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address payable\",\"name\":\"platformFeeRecipient\",\"type\":\"address\"}],\"name\":\"UpdatePlatformFeeRecipient\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_nftAddress\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_tokenId\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"_creator\",\"type\":\"address\"}],\"name\":\"acceptOffer\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"addressRegistry\",\"outputs\":[{\"internalType\":\"contract IAddressRegistry\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_nftAddress\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_tokenId\",\"type\":\"uint256\"},{\"internalType\":\"address payable\",\"name\":\"_owner\",\"type\":\"address\"}],\"name\":\"buyItem\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_nftAddress\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_tokenId\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"_payToken\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_owner\",\"type\":\"address\"}],\"name\":\"buyItem\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_nftAddress\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_tokenId\",\"type\":\"uint256\"}],\"name\":\"cancelListing\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_nftAddress\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_tokenId\",\"type\":\"uint256\"}],\"name\":\"cancelOffer\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"collectionRoyalties\",\"outputs\":[{\"internalType\":\"uint16\",\"name\":\"royalty\",\"type\":\"uint16\"},{\"internalType\":\"address\",\"name\":\"creator\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"feeRecipient\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_nftAddress\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_tokenId\",\"type\":\"uint256\"},{\"internalType\":\"contract IERC20\",\"name\":\"_payToken\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_quantity\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_pricePerItem\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_deadline\",\"type\":\"uint256\"}],\"name\":\"createOffer\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"feeReceipient\",\"outputs\":[{\"internalType\":\"address payable\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_payToken\",\"type\":\"address\"}],\"name\":\"getPrice\",\"outputs\":[{\"internalType\":\"int256\",\"name\":\"\",\"type\":\"int256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address payable\",\"name\":\"_feeRecipient\",\"type\":\"address\"},{\"internalType\":\"uint16\",\"name\":\"_platformFee\",\"type\":\"uint16\"}],\"name\":\"initialize\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_nftAddress\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_tokenId\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_quantity\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"_payToken\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_pricePerItem\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_startingTime\",\"type\":\"uint256\"}],\"name\":\"listItem\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"listings\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"quantity\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"payToken\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"pricePerItem\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"startingTime\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"minters\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"offers\",\"outputs\":[{\"internalType\":\"contract IERC20\",\"name\":\"payToken\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"quantity\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"pricePerItem\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"deadline\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"platformFee\",\"outputs\":[{\"internalType\":\"uint16\",\"name\":\"\",\"type\":\"uint16\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_nftAddress\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_creator\",\"type\":\"address\"},{\"internalType\":\"uint16\",\"name\":\"_royalty\",\"type\":\"uint16\"},{\"internalType\":\"address\",\"name\":\"_feeRecipient\",\"type\":\"address\"}],\"name\":\"registerCollectionRoyalty\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_nftAddress\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_tokenId\",\"type\":\"uint256\"},{\"internalType\":\"uint16\",\"name\":\"_royalty\",\"type\":\"uint16\"}],\"name\":\"registerRoyalty\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"royalties\",\"outputs\":[{\"internalType\":\"uint16\",\"name\":\"\",\"type\":\"uint16\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_registry\",\"type\":\"address\"}],\"name\":\"updateAddressRegistry\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_nftAddress\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_tokenId\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"_payToken\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_newPrice\",\"type\":\"uint256\"}],\"name\":\"updateListing\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint16\",\"name\":\"_platformFee\",\"type\":\"uint16\"}],\"name\":\"updatePlatformFee\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address payable\",\"name\":\"_platformFeeRecipient\",\"type\":\"address\"}],\"name\":\"updatePlatformFeeRecipient\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_nftAddress\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_tokenId\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"_seller\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_buyer\",\"type\":\"address\"}],\"name\":\"validateItemSold\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}]","ContractName":"Marketplace","CompilerVersion":"v0.6.12+commit.27d51765","OptimizationUsed":"1","Runs":"200","ConstructorArguments":"","EVMVersion":"Default","Library":"","LicenseType":"","Proxy":"0","Implementation":"","SwarmSource":""}]}