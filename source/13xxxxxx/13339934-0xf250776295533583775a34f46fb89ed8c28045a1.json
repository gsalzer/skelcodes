{"status":"1","message":"OK","result":[{"SourceCode":"{{\r\n  \"language\": \"Solidity\",\r\n  \"sources\": {\r\n    \"contracts/protocol/tokenization/VariableDebtToken.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: agpl-3.0\\npragma solidity ^0.8.4;\\n\\nimport '../../dependencies/openzeppelin/contracts/IERC20.sol';\\nimport '../../interfaces/IVariableDebtToken.sol';\\nimport '../../tools/math/WadRayMath.sol';\\nimport '../../tools/upgradeability/VersionedInitializable.sol';\\nimport './interfaces/PoolTokenConfig.sol';\\nimport './base/PoolTokenBase.sol';\\nimport './base/DebtTokenBase.sol';\\nimport '../../tools/tokens/ERC20DetailsBase.sol';\\n\\n/**\\n * @title VariableDebtToken\\n * @notice Implements a variable debt token to track the borrowing positions of users\\n * at variable rate mode\\n **/\\ncontract VariableDebtToken is DebtTokenBase, VersionedInitializable, IVariableDebtToken {\\n  using WadRayMath for uint256;\\n\\n  constructor() PoolTokenBase(address(0), address(0)) ERC20DetailsBase('', '', 0) {}\\n\\n  uint256 private constant DEBT_TOKEN_REVISION = 0x1;\\n\\n  function getRevision() internal pure virtual override returns (uint256) {\\n    return DEBT_TOKEN_REVISION;\\n  }\\n\\n  function initialize(\\n    PoolTokenConfig calldata config,\\n    string calldata name,\\n    string calldata symbol,\\n    bytes calldata params\\n  ) external override initializerRunAlways(DEBT_TOKEN_REVISION) {\\n    if (isRevisionInitialized(DEBT_TOKEN_REVISION)) {\\n      _initializeERC20(name, symbol, super.decimals());\\n    } else {\\n      _initializeERC20(name, symbol, config.underlyingDecimals);\\n      _initializePoolToken(config, params);\\n    }\\n\\n    emit Initialized(\\n      config.underlyingAsset,\\n      address(config.pool),\\n      address(0),\\n      super.name(),\\n      super.symbol(),\\n      super.decimals(),\\n      params\\n    );\\n  }\\n\\n  function getScaleIndex() public view override returns (uint256) {\\n    return _pool.getReserveNormalizedVariableDebt(_underlyingAsset);\\n  }\\n\\n  function balanceOf(address user) public view virtual override returns (uint256) {\\n    uint256 scaledBalance = internalBalanceOf(user);\\n    if (scaledBalance == 0) {\\n      return 0;\\n    }\\n    return scaledBalance.rayMul(getScaleIndex());\\n  }\\n\\n  function rewardedBalanceOf(address user) external view override returns (uint256) {\\n    return balanceOf(user);\\n  }\\n\\n  function mint(\\n    address user,\\n    address onBehalfOf,\\n    uint256 amount,\\n    uint256 index\\n  ) external override onlyLendingPool returns (bool firstBalance) {\\n    if (user != onBehalfOf) {\\n      _decreaseBorrowAllowance(onBehalfOf, user, amount);\\n    }\\n\\n    firstBalance = internalBalanceOf(onBehalfOf) == 0;\\n    uint256 amountScaled = amount.rayDiv(index);\\n    require(amountScaled != 0, Errors.CT_INVALID_MINT_AMOUNT);\\n\\n    _mintBalance(onBehalfOf, amountScaled, index);\\n\\n    emit Transfer(address(0), onBehalfOf, amount);\\n    emit Mint(user, onBehalfOf, amount, index);\\n\\n    return firstBalance;\\n  }\\n\\n  function burn(\\n    address user,\\n    uint256 amount,\\n    uint256 index\\n  ) external override onlyLendingPool {\\n    uint256 amountScaled = amount.rayDiv(index);\\n    require(amountScaled != 0, Errors.CT_INVALID_BURN_AMOUNT);\\n\\n    _burnBalance(user, amountScaled, 0, index);\\n\\n    emit Transfer(user, address(0), amount);\\n    emit Burn(user, amount, index);\\n  }\\n\\n  function scaledBalanceOf(address user) public view virtual override returns (uint256) {\\n    return internalBalanceOf(user);\\n  }\\n\\n  function totalSupply() public view virtual override returns (uint256) {\\n    return super.totalSupply().rayMul(getScaleIndex());\\n  }\\n\\n  function scaledTotalSupply() public view virtual override returns (uint256) {\\n    return super.totalSupply();\\n  }\\n\\n  function getScaledUserBalanceAndSupply(address user) external view override returns (uint256, uint256) {\\n    return (internalBalanceOf(user), super.totalSupply());\\n  }\\n}\\n\"\r\n    },\r\n    \"contracts/dependencies/openzeppelin/contracts/IERC20.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: agpl-3.0\\npragma solidity ^0.8.4;\\n\\n/**\\n * @dev Interface of the ERC20 standard as defined in the EIP excluding events to avoid linearization issues.\\n */\\ninterface IERC20 {\\n  /**\\n   * @dev Returns the amount of tokens in existence.\\n   */\\n  function totalSupply() external view returns (uint256);\\n\\n  /**\\n   * @dev Returns the amount of tokens owned by `account`.\\n   */\\n  function balanceOf(address account) external view returns (uint256);\\n\\n  /**\\n   * @dev Moves `amount` tokens from the caller's account to `recipient`.\\n   *\\n   * Returns a boolean value indicating whether the operation succeeded.\\n   */\\n  function transfer(address recipient, uint256 amount) external returns (bool);\\n\\n  /**\\n   * @dev Returns the remaining number of tokens that `spender` will be\\n   * allowed to spend on behalf of `owner` through {transferFrom}. This is\\n   * zero by default.\\n   *\\n   * This value changes when {approve} or {transferFrom} are called.\\n   */\\n  function allowance(address owner, address spender) external view returns (uint256);\\n\\n  /**\\n   * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\\n   *\\n   * Returns a boolean value indicating whether the operation succeeded.\\n   *\\n   * IMPORTANT: Beware that changing an allowance with this method brings the risk\\n   * that someone may use both the old and the new allowance by unfortunate\\n   * transaction ordering. One possible solution to mitigate this race\\n   * condition is to first reduce the spender's allowance to 0 and set the\\n   * desired value afterwards:\\n   * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\\n   */\\n  function approve(address spender, uint256 amount) external returns (bool);\\n\\n  /**\\n   * @dev Moves `amount` tokens from `sender` to `recipient` using the\\n   * allowance mechanism. `amount` is then deducted from the caller's\\n   * allowance.\\n   *\\n   * Returns a boolean value indicating whether the operation succeeded.\\n   */\\n  function transferFrom(\\n    address sender,\\n    address recipient,\\n    uint256 amount\\n  ) external returns (bool);\\n}\\n\"\r\n    },\r\n    \"contracts/interfaces/IVariableDebtToken.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: agpl-3.0\\npragma solidity ^0.8.4;\\n\\nimport './IScaledBalanceToken.sol';\\nimport '../dependencies/openzeppelin/contracts/IERC20.sol';\\nimport './IPoolToken.sol';\\n\\n/// @dev Defines the basic interface for a variable debt token.\\ninterface IVariableDebtToken is IPoolToken, IScaledBalanceToken {\\n  /**\\n   * @dev Emitted after the mint action\\n   * @param from The address performing the mint\\n   * @param onBehalfOf The address of the user on which behalf minting has been performed\\n   * @param value The amount to be minted\\n   * @param index The last index of the reserve\\n   **/\\n  event Mint(address indexed from, address indexed onBehalfOf, uint256 value, uint256 index);\\n\\n  /// @dev Mints debt token to the `onBehalfOf` address. Returns `true` when balance of the `onBehalfOf` was 0\\n  function mint(\\n    address user,\\n    address onBehalfOf,\\n    uint256 amount,\\n    uint256 index\\n  ) external returns (bool);\\n\\n  /**\\n   * @dev Emitted when variable debt is burnt\\n   * @param user The user which debt has been burned\\n   * @param amount The amount of debt being burned\\n   * @param index The index of the user\\n   **/\\n  event Burn(address indexed user, uint256 amount, uint256 index);\\n\\n  /// @dev Burns user variable debt\\n  function burn(\\n    address user,\\n    uint256 amount,\\n    uint256 index\\n  ) external;\\n}\\n\"\r\n    },\r\n    \"contracts/tools/math/WadRayMath.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: agpl-3.0\\npragma solidity ^0.8.4;\\n\\nimport '../Errors.sol';\\n\\n/// @dev Provides mul and div function for wads (decimal numbers with 18 digits precision) and rays (decimals with 27 digits)\\nlibrary WadRayMath {\\n  uint256 internal constant WAD = 1e18;\\n  uint256 internal constant halfWAD = WAD / 2;\\n\\n  uint256 internal constant RAY = 1e27;\\n  uint256 internal constant halfRAY = RAY / 2;\\n\\n  uint256 internal constant WAD_RAY_RATIO = 1e9;\\n\\n  /// @return One ray, 1e27\\n  function ray() internal pure returns (uint256) {\\n    return RAY;\\n  }\\n\\n  /// @return One wad, 1e18\\n  function wad() internal pure returns (uint256) {\\n    return WAD;\\n  }\\n\\n  /// @return Half ray, 1e27/2\\n  function halfRay() internal pure returns (uint256) {\\n    return halfRAY;\\n  }\\n\\n  /// @return Half ray, 1e18/2\\n  function halfWad() internal pure returns (uint256) {\\n    return halfWAD;\\n  }\\n\\n  /// @dev Multiplies two wad, rounding half up to the nearest wad\\n  function wadMul(uint256 a, uint256 b) internal pure returns (uint256) {\\n    if (a == 0 || b == 0) {\\n      return 0;\\n    }\\n    require(a <= (type(uint256).max - halfWAD) / b, Errors.MATH_MULTIPLICATION_OVERFLOW);\\n\\n    return (a * b + halfWAD) / WAD;\\n  }\\n\\n  /// @dev Divides two wad, rounding half up to the nearest wad\\n  function wadDiv(uint256 a, uint256 b) internal pure returns (uint256) {\\n    require(b != 0, Errors.MATH_DIVISION_BY_ZERO);\\n    uint256 halfB = b / 2;\\n\\n    require(a <= (type(uint256).max - halfB) / WAD, Errors.MATH_MULTIPLICATION_OVERFLOW);\\n\\n    return (a * WAD + halfB) / b;\\n  }\\n\\n  /// @dev Multiplies two ray, rounding half up to the nearest ray\\n  function rayMul(uint256 a, uint256 b) internal pure returns (uint256) {\\n    if (a == 0 || b == 0) {\\n      return 0;\\n    }\\n\\n    require(a <= (type(uint256).max - halfRAY) / b, Errors.MATH_MULTIPLICATION_OVERFLOW);\\n\\n    return (a * b + halfRAY) / RAY;\\n  }\\n\\n  /// @dev Divides two ray, rounding half up to the nearest ray\\n  function rayDiv(uint256 a, uint256 b) internal pure returns (uint256) {\\n    require(b != 0, Errors.MATH_DIVISION_BY_ZERO);\\n    uint256 halfB = b / 2;\\n\\n    require(a <= (type(uint256).max - halfB) / RAY, Errors.MATH_MULTIPLICATION_OVERFLOW);\\n\\n    return (a * RAY + halfB) / b;\\n  }\\n\\n  /// @dev Casts ray down to wad\\n  function rayToWad(uint256 a) internal pure returns (uint256) {\\n    uint256 halfRatio = WAD_RAY_RATIO / 2;\\n    uint256 result = halfRatio + a;\\n\\n    require(result >= halfRatio, Errors.MATH_ADDITION_OVERFLOW);\\n\\n    return result / WAD_RAY_RATIO;\\n  }\\n\\n  /// @dev Converts wad up to ray\\n  function wadToRay(uint256 a) internal pure returns (uint256) {\\n    uint256 result = a * WAD_RAY_RATIO;\\n\\n    require(result / WAD_RAY_RATIO == a, Errors.MATH_MULTIPLICATION_OVERFLOW);\\n\\n    return result;\\n  }\\n}\\n\"\r\n    },\r\n    \"contracts/tools/upgradeability/VersionedInitializable.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: agpl-3.0\\npragma solidity ^0.8.4;\\n\\n/**\\n * @title VersionedInitializable\\n *\\n * @dev Helper contract to implement versioned initializer functions. To use it, replace\\n * the constructor with a function that has the `initializer` or `initializerRunAlways` modifier.\\n * The revision number should be defined as a private constant, returned by getRevision() and used by initializer() modifier.\\n *\\n * ATTN: There is a built-in protection from implementation self-destruct exploits. This protection\\n * prevents initializers from being called on an implementation inself, but only on proxied contracts.\\n * To override this protection, call _unsafeResetVersionedInitializers() from a constructor.\\n *\\n * WARNING: Unlike constructors, initializer functions must be manually\\n * invoked. This applies both to deploying an initializable contract, as well\\n * as extending an initializable contract via inheritance.\\n *\\n * ATTN: When used with inheritance, parent initializers with `initializer` modifier are prevented by calling twice,\\n * but can only be called in child-to-parent sequence.\\n *\\n * WARNING: When used with inheritance, parent initializers with `initializerRunAlways` modifier\\n * are NOT protected from multiple calls by another initializer.\\n */\\nabstract contract VersionedInitializable {\\n  uint256 private constant BLOCK_REVISION = type(uint256).max;\\n  // This revision number is applied to implementations\\n  uint256 private constant IMPL_REVISION = BLOCK_REVISION - 1;\\n\\n  /// @dev Indicates that the contract has been initialized. The default value blocks initializers from being called on an implementation.\\n  uint256 private lastInitializedRevision = IMPL_REVISION;\\n\\n  /// @dev Indicates that the contract is in the process of being initialized.\\n  uint256 private lastInitializingRevision = 0;\\n\\n  /**\\n   * @dev There is a built-in protection from self-destruct of implementation exploits. This protection\\n   * prevents initializers from being called on an implementation inself, but only on proxied contracts.\\n   * Function _unsafeResetVersionedInitializers() can be called from a constructor to disable this protection.\\n   * It must be called before any initializers, otherwise it will fail.\\n   */\\n  function _unsafeResetVersionedInitializers() internal {\\n    require(isConstructor(), 'only for constructor');\\n\\n    if (lastInitializedRevision == IMPL_REVISION) {\\n      lastInitializedRevision = 0;\\n    } else {\\n      require(lastInitializedRevision == 0, 'can only be called before initializer(s)');\\n    }\\n  }\\n\\n  /// @dev Modifier to use in the initializer function of a contract.\\n  modifier initializer(uint256 localRevision) {\\n    (uint256 topRevision, bool initializing, bool skip) = _preInitializer(localRevision);\\n\\n    if (!skip) {\\n      lastInitializingRevision = localRevision;\\n      _;\\n      lastInitializedRevision = localRevision;\\n    }\\n\\n    if (!initializing) {\\n      lastInitializedRevision = topRevision;\\n      lastInitializingRevision = 0;\\n    }\\n  }\\n\\n  modifier initializerRunAlways(uint256 localRevision) {\\n    (uint256 topRevision, bool initializing, bool skip) = _preInitializer(localRevision);\\n\\n    if (!skip) {\\n      lastInitializingRevision = localRevision;\\n    }\\n    _;\\n    if (!skip) {\\n      lastInitializedRevision = localRevision;\\n    }\\n\\n    if (!initializing) {\\n      lastInitializedRevision = topRevision;\\n      lastInitializingRevision = 0;\\n    }\\n  }\\n\\n  function _preInitializer(uint256 localRevision)\\n    private\\n    returns (\\n      uint256 topRevision,\\n      bool initializing,\\n      bool skip\\n    )\\n  {\\n    topRevision = getRevision();\\n    require(topRevision < IMPL_REVISION, 'invalid contract revision');\\n\\n    require(localRevision > 0, 'incorrect initializer revision');\\n    require(localRevision <= topRevision, 'inconsistent contract revision');\\n\\n    if (lastInitializedRevision < IMPL_REVISION) {\\n      // normal initialization\\n      initializing = lastInitializingRevision > 0 && lastInitializedRevision < topRevision;\\n      require(initializing || isConstructor() || topRevision > lastInitializedRevision, 'already initialized');\\n    } else {\\n      // by default, initialization of implementation is only allowed inside a constructor\\n      require(lastInitializedRevision == IMPL_REVISION && isConstructor(), 'initializer blocked');\\n\\n      // enable normal use of initializers inside a constructor\\n      lastInitializedRevision = 0;\\n      // but make sure to block initializers afterwards\\n      topRevision = BLOCK_REVISION;\\n\\n      initializing = lastInitializingRevision > 0;\\n    }\\n\\n    if (initializing) {\\n      require(lastInitializingRevision > localRevision, 'incorrect order of initializers');\\n    }\\n\\n    if (localRevision <= lastInitializedRevision) {\\n      // prevent calling of parent's initializer when it was called before\\n      if (initializing) {\\n        // Can't set zero yet, as it is not a top-level call, otherwise `initializing` will become false.\\n        // Further calls will fail with the `incorrect order` assertion above.\\n        lastInitializingRevision = 1;\\n      }\\n      return (topRevision, initializing, true);\\n    }\\n    return (topRevision, initializing, false);\\n  }\\n\\n  function isRevisionInitialized(uint256 localRevision) internal view returns (bool) {\\n    return lastInitializedRevision >= localRevision;\\n  }\\n\\n  // solhint-disable-next-line func-name-mixedcase\\n  function REVISION() public pure returns (uint256) {\\n    return getRevision();\\n  }\\n\\n  /**\\n   * @dev returns the revision number (< type(uint256).max - 1) of the contract.\\n   * The number should be defined as a private constant.\\n   **/\\n  function getRevision() internal pure virtual returns (uint256);\\n\\n  /// @dev Returns true if and only if the function is running in the constructor\\n  function isConstructor() private view returns (bool) {\\n    uint256 cs;\\n    // solhint-disable-next-line no-inline-assembly\\n    assembly {\\n      cs := extcodesize(address())\\n    }\\n    return cs == 0;\\n  }\\n\\n  // Reserved storage space to allow for layout changes in the future.\\n  uint256[4] private ______gap;\\n}\\n\"\r\n    },\r\n    \"contracts/protocol/tokenization/interfaces/PoolTokenConfig.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: agpl-3.0\\npragma solidity ^0.8.4;\\n\\nstruct PoolTokenConfig {\\n  // Address of the associated lending pool\\n  address pool;\\n  // Address of the treasury\\n  address treasury;\\n  // Address of the underlying asset\\n  address underlyingAsset;\\n  // Decimals of the underlying asset\\n  uint8 underlyingDecimals;\\n}\\n\"\r\n    },\r\n    \"contracts/protocol/tokenization/base/PoolTokenBase.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: agpl-3.0\\npragma solidity ^0.8.4;\\n\\nimport '../../../tools/Errors.sol';\\nimport '../../../dependencies/openzeppelin/contracts/IERC20.sol';\\nimport '../../../tools/tokens/ERC20DetailsBase.sol';\\nimport '../../../interfaces/IPoolToken.sol';\\nimport '../../../interfaces/ILendingPoolForTokens.sol';\\nimport '../../../interfaces/IRewardedToken.sol';\\nimport '../../../access/AccessHelper.sol';\\nimport '../../../access/AccessFlags.sol';\\nimport '../../../access/MarketAccessBitmask.sol';\\nimport '../../../access/interfaces/IMarketAccessController.sol';\\nimport '../interfaces/IInitializablePoolToken.sol';\\nimport '../interfaces/PoolTokenConfig.sol';\\n\\nabstract contract PoolTokenBase is\\n  IERC20,\\n  IPoolToken,\\n  IInitializablePoolToken,\\n  IRewardedToken,\\n  ERC20DetailsBase,\\n  MarketAccessBitmaskMin\\n{\\n  using AccessHelper for IMarketAccessController;\\n\\n  event Transfer(address indexed from, address indexed to, uint256 value);\\n\\n  ILendingPoolForTokens internal _pool;\\n  address internal _underlyingAsset;\\n\\n  constructor(address pool_, address underlyingAsset_)\\n    MarketAccessBitmaskMin(\\n      pool_ != address(0) ? ILendingPoolForTokens(pool_).getAccessController() : IMarketAccessController(address(0))\\n    )\\n  {\\n    _pool = ILendingPoolForTokens(pool_);\\n    _underlyingAsset = underlyingAsset_;\\n  }\\n\\n  function _initializePoolToken(PoolTokenConfig memory config, bytes calldata params) internal virtual {\\n    params;\\n    _pool = ILendingPoolForTokens(config.pool);\\n    _underlyingAsset = config.underlyingAsset;\\n    _remoteAcl = ILendingPoolForTokens(config.pool).getAccessController();\\n  }\\n\\n  function _onlyLendingPool() private view {\\n    require(msg.sender == address(_pool), Errors.CALLER_NOT_LENDING_POOL);\\n  }\\n\\n  modifier onlyLendingPool() {\\n    _onlyLendingPool();\\n    _;\\n  }\\n\\n  function _onlyLendingPoolConfiguratorOrAdmin() private view {\\n    _remoteAcl.requireAnyOf(\\n      msg.sender,\\n      AccessFlags.POOL_ADMIN | AccessFlags.LENDING_POOL_CONFIGURATOR,\\n      Errors.CALLER_NOT_POOL_ADMIN\\n    );\\n  }\\n\\n  modifier onlyLendingPoolConfiguratorOrAdmin() {\\n    _onlyLendingPoolConfiguratorOrAdmin();\\n    _;\\n  }\\n\\n  function updatePool() external override onlyLendingPoolConfiguratorOrAdmin {\\n    address pool = _remoteAcl.getLendingPool();\\n    require(pool != address(0), Errors.LENDING_POOL_REQUIRED);\\n    _pool = ILendingPoolForTokens(pool);\\n  }\\n\\n  // solhint-disable-next-line func-name-mixedcase\\n  function UNDERLYING_ASSET_ADDRESS() public view override returns (address) {\\n    return _underlyingAsset;\\n  }\\n\\n  // solhint-disable-next-line func-name-mixedcase\\n  function POOL() public view override returns (address) {\\n    return address(_pool);\\n  }\\n\\n  function setIncentivesController(address hook) external override onlyRewardConfiguratorOrAdmin {\\n    internalSetIncentivesController(hook);\\n  }\\n\\n  function internalBalanceOf(address account) internal view virtual returns (uint256);\\n\\n  function internalBalanceAndFlagsOf(address account) internal view virtual returns (uint256, uint32);\\n\\n  function internalSetFlagsOf(address account, uint32 flags) internal virtual;\\n\\n  function internalSetIncentivesController(address hook) internal virtual;\\n\\n  function totalSupply() public view virtual override returns (uint256) {\\n    return internalTotalSupply();\\n  }\\n\\n  function internalTotalSupply() internal view virtual returns (uint256);\\n\\n  function _mintBalance(\\n    address account,\\n    uint256 amount,\\n    uint256 scale\\n  ) internal {\\n    require(account != address(0), 'ERC20: mint to the zero address');\\n    _beforeTokenTransfer(address(0), account, amount);\\n    internalUpdateTotalSupply(internalTotalSupply() + amount);\\n    internalIncrementBalance(account, amount, scale);\\n  }\\n\\n  function _burnBalance(\\n    address account,\\n    uint256 amount,\\n    uint256 minLimit,\\n    uint256 scale\\n  ) internal {\\n    require(account != address(0), 'ERC20: burn from the zero address');\\n    _beforeTokenTransfer(account, address(0), amount);\\n    internalUpdateTotalSupply(internalTotalSupply() - amount);\\n    internalDecrementBalance(account, amount, minLimit, scale);\\n  }\\n\\n  function _transferBalance(\\n    address sender,\\n    address recipient,\\n    uint256 amount,\\n    uint256 senderMinLimit,\\n    uint256 scale\\n  ) internal {\\n    require(sender != address(0), 'ERC20: transfer from the zero address');\\n    require(recipient != address(0), 'ERC20: transfer to the zero address');\\n\\n    _beforeTokenTransfer(sender, recipient, amount);\\n    if (sender != recipient) {\\n      // require(oldSenderBalance >= amount, 'ERC20: transfer amount exceeds balance');\\n      internalDecrementBalance(sender, amount, senderMinLimit, scale);\\n      internalIncrementBalance(recipient, amount, scale);\\n    }\\n  }\\n\\n  function _incrementBalanceWithTotal(\\n    address account,\\n    uint256 amount,\\n    uint256 scale,\\n    uint256 total\\n  ) internal {\\n    internalUpdateTotalSupply(total);\\n    internalIncrementBalance(account, amount, scale);\\n  }\\n\\n  function _decrementBalanceWithTotal(\\n    address account,\\n    uint256 amount,\\n    uint256 scale,\\n    uint256 total\\n  ) internal {\\n    internalUpdateTotalSupply(total);\\n    internalDecrementBalance(account, amount, 0, scale);\\n  }\\n\\n  function _beforeTokenTransfer(\\n    address from,\\n    address to,\\n    uint256 amount\\n  ) internal virtual {}\\n\\n  function internalIncrementBalance(\\n    address account,\\n    uint256 amount,\\n    uint256 scale\\n  ) internal virtual;\\n\\n  function internalDecrementBalance(\\n    address account,\\n    uint256 amount,\\n    uint256 senderMinLimit,\\n    uint256 scale\\n  ) internal virtual;\\n\\n  function internalUpdateTotalSupply(uint256 newTotal) internal virtual;\\n}\\n\"\r\n    },\r\n    \"contracts/protocol/tokenization/base/DebtTokenBase.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: agpl-3.0\\npragma solidity ^0.8.4;\\n\\nimport '../../../tools/Errors.sol';\\nimport '../../../interfaces/ICreditDelegationToken.sol';\\nimport '../../../tools/tokens/ERC20NoTransferBase.sol';\\nimport './RewardedTokenBase.sol';\\n\\n/// @dev Base contract for a non-transferrable debt tokens: StableDebtToken and VariableDebtToken\\nabstract contract DebtTokenBase is RewardedTokenBase, ERC20NoTransferBase, ICreditDelegationToken {\\n  mapping(address => mapping(address => uint256)) internal _borrowAllowances;\\n\\n  /**\\n   * @dev delegates borrowing power to a user on the specific debt token\\n   * @param delegatee the address receiving the delegated borrowing power\\n   * @param amount the maximum amount being delegated. Delegation will still\\n   * respect the liquidation constraints (even if delegated, a delegatee cannot\\n   * force a delegator HF to go below 1)\\n   **/\\n  function approveDelegation(address delegatee, uint256 amount) external override {\\n    _borrowAllowances[msg.sender][delegatee] = amount;\\n    emit BorrowAllowanceDelegated(msg.sender, delegatee, _underlyingAsset, amount);\\n  }\\n\\n  /**\\n   * @dev returns the borrow allowance of the user\\n   * @param fromUser The user to giving allowance\\n   * @param toUser The user to give allowance to\\n   * @return the current allowance of toUser\\n   **/\\n  function borrowAllowance(address fromUser, address toUser) external view override returns (uint256) {\\n    return _borrowAllowances[fromUser][toUser];\\n  }\\n\\n  function _decreaseBorrowAllowance(\\n    address delegator,\\n    address delegatee,\\n    uint256 amount\\n  ) internal {\\n    uint256 limit = _borrowAllowances[delegator][delegatee];\\n    require(limit >= amount, Errors.BORROW_ALLOWANCE_NOT_ENOUGH);\\n    unchecked {\\n      limit -= amount;\\n    }\\n    _borrowAllowances[delegator][delegatee] = limit;\\n    emit BorrowAllowanceDelegated(delegator, delegatee, _underlyingAsset, limit);\\n  }\\n}\\n\"\r\n    },\r\n    \"contracts/tools/tokens/ERC20DetailsBase.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: agpl-3.0\\npragma solidity ^0.8.4;\\n\\nimport './IERC20Details.sol';\\n\\nabstract contract ERC20DetailsBase is IERC20Details {\\n  string private _name;\\n  string private _symbol;\\n  uint8 private _decimals;\\n\\n  constructor(\\n    string memory name_,\\n    string memory symbol_,\\n    uint8 decimals_\\n  ) {\\n    _name = name_;\\n    _symbol = symbol_;\\n    _decimals = decimals_;\\n  }\\n\\n  function _initializeERC20(\\n    string memory name_,\\n    string memory symbol_,\\n    uint8 decimals_\\n  ) internal {\\n    _name = name_;\\n    _symbol = symbol_;\\n    _decimals = decimals_;\\n  }\\n\\n  function name() public view override returns (string memory) {\\n    return _name;\\n  }\\n\\n  function symbol() public view override returns (string memory) {\\n    return _symbol;\\n  }\\n\\n  function decimals() public view override returns (uint8) {\\n    return _decimals;\\n  }\\n}\\n\"\r\n    },\r\n    \"contracts/interfaces/IScaledBalanceToken.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: agpl-3.0\\npragma solidity ^0.8.4;\\n\\ninterface IScaledBalanceToken {\\n  /**\\n   * @dev Returns the scaled balance of the user. The scaled balance is the sum of all the\\n   * updated stored balance divided by the reserve's liquidity index at the moment of the update\\n   * @param user The user whose balance is calculated\\n   * @return The scaled balance of the user\\n   **/\\n  function scaledBalanceOf(address user) external view returns (uint256);\\n\\n  /**\\n   * @dev Returns the scaled balance of the user and the scaled total supply.\\n   * @param user The address of the user\\n   * @return The scaled balance of the user\\n   * @return The scaled balance and the scaled total supply\\n   **/\\n  function getScaledUserBalanceAndSupply(address user) external view returns (uint256, uint256);\\n\\n  /**\\n   * @dev Returns the scaled total supply of the variable debt token. Represents sum(debt/index)\\n   * @return The scaled total supply\\n   **/\\n  function scaledTotalSupply() external view returns (uint256);\\n\\n  function getScaleIndex() external view returns (uint256);\\n}\\n\"\r\n    },\r\n    \"contracts/interfaces/IPoolToken.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: agpl-3.0\\npragma solidity ^0.8.4;\\n\\nimport './IDerivedToken.sol';\\n\\n// solhint-disable func-name-mixedcase\\ninterface IPoolToken is IDerivedToken {\\n  function POOL() external view returns (address);\\n\\n  function updatePool() external;\\n}\\n\"\r\n    },\r\n    \"contracts/interfaces/IDerivedToken.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: agpl-3.0\\npragma solidity ^0.8.4;\\n\\n// solhint-disable func-name-mixedcase\\ninterface IDerivedToken {\\n  /**\\n   * @dev Returns the address of the underlying asset of this token (E.g. WETH for agWETH)\\n   **/\\n  function UNDERLYING_ASSET_ADDRESS() external view returns (address);\\n}\\n\"\r\n    },\r\n    \"contracts/tools/Errors.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: agpl-3.0\\npragma solidity ^0.8.4;\\n\\n/**\\n * @title Errors library\\n * @notice Defines the error messages emitted by the different contracts\\n * @dev Error messages prefix glossary:\\n *  - VL = ValidationLogic\\n *  - MATH = Math libraries\\n *  - CT = Common errors between tokens (DepositToken, VariableDebtToken and StableDebtToken)\\n *  - AT = DepositToken\\n *  - SDT = StableDebtToken\\n *  - VDT = VariableDebtToken\\n *  - LP = LendingPool\\n *  - LPAPR = AddressesProviderRegistry\\n *  - LPC = LendingPoolConfiguration\\n *  - RL = ReserveLogic\\n *  - LPCM = LendingPoolExtension\\n *  - ST = Stake\\n */\\nlibrary Errors {\\n  //contract specific errors\\n  string public constant VL_INVALID_AMOUNT = '1'; // Amount must be greater than 0\\n  string public constant VL_NO_ACTIVE_RESERVE = '2'; // Action requires an active reserve\\n  string public constant VL_RESERVE_FROZEN = '3'; // Action cannot be performed because the reserve is frozen\\n  string public constant VL_UNKNOWN_RESERVE = '4'; // Action requires an active reserve\\n  string public constant VL_NOT_ENOUGH_AVAILABLE_USER_BALANCE = '5'; // User cannot withdraw more than the available balance (above min limit)\\n  string public constant VL_TRANSFER_NOT_ALLOWED = '6'; // Transfer cannot be allowed.\\n  string public constant VL_BORROWING_NOT_ENABLED = '7'; // Borrowing is not enabled\\n  string public constant VL_INVALID_INTEREST_RATE_MODE_SELECTED = '8'; // Invalid interest rate mode selected\\n  string public constant VL_COLLATERAL_BALANCE_IS_0 = '9'; // The collateral balance is 0\\n  string public constant VL_HEALTH_FACTOR_LOWER_THAN_LIQUIDATION_THRESHOLD = '10'; // Health factor is lesser than the liquidation threshold\\n  string public constant VL_COLLATERAL_CANNOT_COVER_NEW_BORROW = '11'; // There is not enough collateral to cover a new borrow\\n  string public constant VL_STABLE_BORROWING_NOT_ENABLED = '12'; // stable borrowing not enabled\\n  string public constant VL_COLLATERAL_SAME_AS_BORROWING_CURRENCY = '13'; // collateral is (mostly) the same currency that is being borrowed\\n  string public constant VL_AMOUNT_BIGGER_THAN_MAX_LOAN_SIZE_STABLE = '14'; // The requested amount is exceeds max size of a stable loan\\n  string public constant VL_NO_DEBT_OF_SELECTED_TYPE = '15'; // to repay a debt, user needs to specify a correct debt type (variable or stable)\\n  string public constant VL_NO_EXPLICIT_AMOUNT_TO_REPAY_ON_BEHALF = '16'; // To repay on behalf of an user an explicit amount to repay is needed\\n  string public constant VL_NO_STABLE_RATE_LOAN_IN_RESERVE = '17'; // User does not have a stable rate loan in progress on this reserve\\n  string public constant VL_NO_VARIABLE_RATE_LOAN_IN_RESERVE = '18'; // User does not have a variable rate loan in progress on this reserve\\n  string public constant VL_UNDERLYING_BALANCE_NOT_GREATER_THAN_0 = '19'; // The collateral balance needs to be greater than 0\\n  string public constant VL_DEPOSIT_ALREADY_IN_USE = '20'; // User deposit is already being used as collateral\\n  string public constant VL_RESERVE_MUST_BE_COLLATERAL = '21'; // This reserve must be enabled as collateral\\n  string public constant LP_INTEREST_RATE_REBALANCE_CONDITIONS_NOT_MET = '22'; // Interest rate rebalance conditions were not met\\n  string public constant AT_OVERDRAFT_DISABLED = '23'; // User doesn't accept allocation of overdraft\\n  string public constant VL_INVALID_SUB_BALANCE_ARGS = '24';\\n  string public constant AT_INVALID_SLASH_DESTINATION = '25';\\n\\n  string public constant LP_CALLER_NOT_LENDING_POOL_CONFIGURATOR = '27'; // The caller of the function is not the lending pool configurator\\n\\n  string public constant LENDING_POOL_REQUIRED = '28'; // The caller of this function must be a lending pool\\n  string public constant CALLER_NOT_LENDING_POOL = '29'; // The caller of this function must be a lending pool\\n  string public constant AT_SUB_BALANCE_RESTIRCTED_FUNCTION = '30'; // The caller of this function must be a lending pool or a sub-balance operator\\n\\n  string public constant RL_RESERVE_ALREADY_INITIALIZED = '32'; // Reserve has already been initialized\\n  string public constant CALLER_NOT_POOL_ADMIN = '33'; // The caller must be the pool admin\\n  string public constant LPC_RESERVE_LIQUIDITY_NOT_0 = '34'; // The liquidity of the reserve needs to be 0\\n\\n  string public constant LPAPR_PROVIDER_NOT_REGISTERED = '41'; // Provider is not registered\\n  string public constant LPCM_HEALTH_FACTOR_NOT_BELOW_THRESHOLD = '42'; // Health factor is not below the threshold\\n  string public constant LPCM_COLLATERAL_CANNOT_BE_LIQUIDATED = '43'; // The collateral chosen cannot be liquidated\\n  string public constant LPCM_SPECIFIED_CURRENCY_NOT_BORROWED_BY_USER = '44'; // User did not borrow the specified currency\\n  string public constant LPCM_NOT_ENOUGH_LIQUIDITY_TO_LIQUIDATE = '45'; // There isn't enough liquidity available to liquidate\\n\\n  string public constant MATH_MULTIPLICATION_OVERFLOW = '48';\\n  string public constant MATH_ADDITION_OVERFLOW = '49';\\n  string public constant MATH_DIVISION_BY_ZERO = '50';\\n  string public constant RL_LIQUIDITY_INDEX_OVERFLOW = '51'; //  Liquidity index overflows uint128\\n  string public constant RL_VARIABLE_BORROW_INDEX_OVERFLOW = '52'; //  Variable borrow index overflows uint128\\n  string public constant RL_LIQUIDITY_RATE_OVERFLOW = '53'; //  Liquidity rate overflows uint128\\n  string public constant RL_VARIABLE_BORROW_RATE_OVERFLOW = '54'; //  Variable borrow rate overflows uint128\\n  string public constant RL_STABLE_BORROW_RATE_OVERFLOW = '55'; //  Stable borrow rate overflows uint128\\n  string public constant CT_INVALID_MINT_AMOUNT = '56'; //invalid amount to mint\\n  string public constant CALLER_NOT_STAKE_ADMIN = '57';\\n  string public constant CT_INVALID_BURN_AMOUNT = '58'; //invalid amount to burn\\n  string public constant BORROW_ALLOWANCE_NOT_ENOUGH = '59'; // User borrows on behalf, but allowance are too small\\n  string public constant CALLER_NOT_LIQUIDITY_CONTROLLER = '60';\\n  string public constant CALLER_NOT_REF_ADMIN = '61';\\n  string public constant VL_INSUFFICIENT_REWARD_AVAILABLE = '62';\\n  string public constant LP_CALLER_MUST_BE_DEPOSIT_TOKEN = '63';\\n  string public constant LP_IS_PAUSED = '64'; // Pool is paused\\n  string public constant LP_NO_MORE_RESERVES_ALLOWED = '65';\\n  string public constant LP_INVALID_FLASH_LOAN_EXECUTOR_RETURN = '66';\\n  string public constant RC_INVALID_LTV = '67';\\n  string public constant RC_INVALID_LIQ_THRESHOLD = '68';\\n  string public constant RC_INVALID_LIQ_BONUS = '69';\\n  string public constant RC_INVALID_DECIMALS = '70';\\n  string public constant RC_INVALID_RESERVE_FACTOR = '71';\\n  string public constant LPAPR_INVALID_ADDRESSES_PROVIDER_ID = '72';\\n  string public constant VL_INCONSISTENT_FLASHLOAN_PARAMS = '73';\\n  string public constant VL_TREASURY_REQUIRED = '74';\\n  string public constant LPC_INVALID_CONFIGURATION = '75'; // Invalid risk parameters for the reserve\\n  string public constant CALLER_NOT_EMERGENCY_ADMIN = '76'; // The caller must be the emergency admin\\n  string public constant UL_INVALID_INDEX = '77';\\n  string public constant VL_CONTRACT_REQUIRED = '78';\\n  string public constant SDT_STABLE_DEBT_OVERFLOW = '79';\\n  string public constant SDT_BURN_EXCEEDS_BALANCE = '80';\\n  string public constant CALLER_NOT_REWARD_CONFIG_ADMIN = '81'; // The caller of this function must be a reward admin\\n  string public constant LP_INVALID_PERCENTAGE = '82'; // Percentage can't be more than 100%\\n  string public constant LP_IS_NOT_TRUSTED_FLASHLOAN = '83';\\n  string public constant CALLER_NOT_SWEEP_ADMIN = '84';\\n  string public constant LP_TOO_MANY_NESTED_CALLS = '85';\\n  string public constant LP_RESTRICTED_FEATURE = '86';\\n  string public constant LP_TOO_MANY_FLASHLOAN_CALLS = '87';\\n  string public constant RW_BASELINE_EXCEEDED = '88';\\n  string public constant CALLER_NOT_REWARD_RATE_ADMIN = '89';\\n  string public constant CALLER_NOT_REWARD_CONTROLLER = '90';\\n  string public constant RW_REWARD_PAUSED = '91';\\n  string public constant CALLER_NOT_TEAM_MANAGER = '92';\\n  string public constant STK_REDEEM_PAUSED = '93';\\n  string public constant STK_INSUFFICIENT_COOLDOWN = '94';\\n  string public constant STK_UNSTAKE_WINDOW_FINISHED = '95';\\n  string public constant STK_INVALID_BALANCE_ON_COOLDOWN = '96';\\n  string public constant STK_EXCESSIVE_SLASH_PCT = '97';\\n  string public constant STK_WRONG_COOLDOWN_OR_UNSTAKE = '98';\\n  string public constant STK_PAUSED = '99';\\n\\n  string public constant TXT_OWNABLE_CALLER_NOT_OWNER = 'Ownable: caller is not the owner';\\n  string public constant TXT_CALLER_NOT_PROXY_OWNER = 'ProxyOwner: caller is not the owner';\\n  string public constant TXT_ACCESS_RESTRICTED = 'RESTRICTED';\\n}\\n\"\r\n    },\r\n    \"contracts/interfaces/ILendingPoolForTokens.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: agpl-3.0\\npragma solidity ^0.8.4;\\n\\nimport '../access/interfaces/IMarketAccessController.sol';\\nimport '../protocol/libraries/types/DataTypes.sol';\\n\\ninterface ILendingPoolForTokens {\\n  /**\\n   * @dev Validates and finalizes an depositToken transfer\\n   * - Only callable by the overlying depositToken of the `asset`\\n   * @param asset The address of the underlying asset of the depositToken\\n   * @param from The user from which the depositToken are transferred\\n   * @param to The user receiving the depositToken\\n   * @param lastBalanceFrom True when from's balance was non-zero and became zero\\n   * @param firstBalanceTo True when to's balance was zero and became non-zero\\n   */\\n  function finalizeTransfer(\\n    address asset,\\n    address from,\\n    address to,\\n    bool lastBalanceFrom,\\n    bool firstBalanceTo\\n  ) external;\\n\\n  function getAccessController() external view returns (IMarketAccessController);\\n\\n  function getReserveNormalizedIncome(address asset) external view returns (uint256);\\n\\n  function getReserveNormalizedVariableDebt(address asset) external view returns (uint256);\\n\\n  function getConfiguration(address asset) external view returns (DataTypes.ReserveConfigurationMap memory);\\n\\n  function getReserveData(address asset) external view returns (DataTypes.ReserveData memory);\\n\\n  function getReservesList() external view returns (address[] memory);\\n\\n  function setReservePaused(address asset, bool paused) external;\\n}\\n\"\r\n    },\r\n    \"contracts/interfaces/IRewardedToken.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: agpl-3.0\\npragma solidity ^0.8.4;\\n\\ninterface IRewardedToken {\\n  function setIncentivesController(address) external;\\n\\n  function getIncentivesController() external view returns (address);\\n\\n  function rewardedBalanceOf(address) external view returns (uint256);\\n}\\n\"\r\n    },\r\n    \"contracts/access/AccessHelper.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: agpl-3.0\\npragma solidity ^0.8.4;\\n\\nimport './interfaces/IRemoteAccessBitmask.sol';\\n\\n/// @dev Helper/wrapper around IRemoteAccessBitmask\\nlibrary AccessHelper {\\n  function getAcl(IRemoteAccessBitmask remote, address subject) internal view returns (uint256) {\\n    return remote.queryAccessControlMask(subject, ~uint256(0));\\n  }\\n\\n  function queryAcl(\\n    IRemoteAccessBitmask remote,\\n    address subject,\\n    uint256 filterMask\\n  ) internal view returns (uint256) {\\n    return remote.queryAccessControlMask(subject, filterMask);\\n  }\\n\\n  function hasAnyOf(\\n    IRemoteAccessBitmask remote,\\n    address subject,\\n    uint256 flags\\n  ) internal view returns (bool) {\\n    uint256 found = queryAcl(remote, subject, flags);\\n    return found & flags != 0;\\n  }\\n\\n  function hasAny(IRemoteAccessBitmask remote, address subject) internal view returns (bool) {\\n    return remote.queryAccessControlMask(subject, 0) != 0;\\n  }\\n\\n  function hasNone(IRemoteAccessBitmask remote, address subject) internal view returns (bool) {\\n    return remote.queryAccessControlMask(subject, 0) == 0;\\n  }\\n\\n  function requireAnyOf(\\n    IRemoteAccessBitmask remote,\\n    address subject,\\n    uint256 flags,\\n    string memory text\\n  ) internal view {\\n    require(hasAnyOf(remote, subject, flags), text);\\n  }\\n}\\n\"\r\n    },\r\n    \"contracts/access/AccessFlags.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: agpl-3.0\\npragma solidity ^0.8.4;\\n\\nlibrary AccessFlags {\\n  // roles that can be assigned to multiple addresses - use range [0..15]\\n  uint256 public constant EMERGENCY_ADMIN = 1 << 0;\\n  uint256 public constant POOL_ADMIN = 1 << 1;\\n  uint256 public constant TREASURY_ADMIN = 1 << 2;\\n  uint256 public constant REWARD_CONFIG_ADMIN = 1 << 3;\\n  uint256 public constant REWARD_RATE_ADMIN = 1 << 4;\\n  uint256 public constant STAKE_ADMIN = 1 << 5;\\n  uint256 public constant REFERRAL_ADMIN = 1 << 6;\\n  uint256 public constant LENDING_RATE_ADMIN = 1 << 7;\\n  uint256 public constant SWEEP_ADMIN = 1 << 8;\\n  uint256 public constant ORACLE_ADMIN = 1 << 9;\\n\\n  uint256 public constant ROLES = (uint256(1) << 16) - 1;\\n\\n  // singletons - use range [16..64] - can ONLY be assigned to a single address\\n  uint256 public constant SINGLETONS = ((uint256(1) << 64) - 1) & ~ROLES;\\n\\n  // proxied singletons\\n  uint256 public constant LENDING_POOL = 1 << 16;\\n  uint256 public constant LENDING_POOL_CONFIGURATOR = 1 << 17;\\n  uint256 public constant LIQUIDITY_CONTROLLER = 1 << 18;\\n  uint256 public constant TREASURY = 1 << 19;\\n  uint256 public constant REWARD_TOKEN = 1 << 20;\\n  uint256 public constant REWARD_STAKE_TOKEN = 1 << 21;\\n  uint256 public constant REWARD_CONTROLLER = 1 << 22;\\n  uint256 public constant REWARD_CONFIGURATOR = 1 << 23;\\n  uint256 public constant STAKE_CONFIGURATOR = 1 << 24;\\n  uint256 public constant REFERRAL_REGISTRY = 1 << 25;\\n\\n  uint256 public constant PROXIES = ((uint256(1) << 26) - 1) & ~ROLES;\\n\\n  // non-proxied singletons, numbered down from 31 (as JS has problems with bitmasks over 31 bits)\\n  uint256 public constant WETH_GATEWAY = 1 << 27;\\n  uint256 public constant DATA_HELPER = 1 << 28;\\n  uint256 public constant PRICE_ORACLE = 1 << 29;\\n  uint256 public constant LENDING_RATE_ORACLE = 1 << 30;\\n\\n  // any other roles - use range [64..]\\n  // these roles can be assigned to multiple addresses\\n\\n  uint256 public constant TRUSTED_FLASHLOAN = 1 << 66;\\n}\\n\"\r\n    },\r\n    \"contracts/access/MarketAccessBitmask.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: agpl-3.0\\npragma solidity ^0.8.4;\\n\\nimport '../tools/Errors.sol';\\nimport './interfaces/IMarketAccessController.sol';\\nimport './AccessHelper.sol';\\nimport './AccessFlags.sol';\\n\\n// solhint-disable func-name-mixedcase\\nabstract contract MarketAccessBitmaskMin {\\n  using AccessHelper for IMarketAccessController;\\n  IMarketAccessController internal _remoteAcl;\\n\\n  constructor(IMarketAccessController remoteAcl) {\\n    _remoteAcl = remoteAcl;\\n  }\\n\\n  function _getRemoteAcl(address addr) internal view returns (uint256) {\\n    return _remoteAcl.getAcl(addr);\\n  }\\n\\n  function hasRemoteAcl() internal view returns (bool) {\\n    return _remoteAcl != IMarketAccessController(address(0));\\n  }\\n\\n  function acl_hasAnyOf(address subject, uint256 flags) internal view returns (bool) {\\n    return _remoteAcl.hasAnyOf(subject, flags);\\n  }\\n\\n  modifier aclHas(uint256 flags) virtual {\\n    _remoteAcl.requireAnyOf(msg.sender, flags, Errors.TXT_ACCESS_RESTRICTED);\\n    _;\\n  }\\n\\n  modifier aclAnyOf(uint256 flags) {\\n    _remoteAcl.requireAnyOf(msg.sender, flags, Errors.TXT_ACCESS_RESTRICTED);\\n    _;\\n  }\\n\\n  modifier onlyPoolAdmin() {\\n    _remoteAcl.requireAnyOf(msg.sender, AccessFlags.POOL_ADMIN, Errors.CALLER_NOT_POOL_ADMIN);\\n    _;\\n  }\\n\\n  modifier onlyRewardAdmin() {\\n    _remoteAcl.requireAnyOf(msg.sender, AccessFlags.REWARD_CONFIG_ADMIN, Errors.CALLER_NOT_REWARD_CONFIG_ADMIN);\\n    _;\\n  }\\n\\n  modifier onlyRewardConfiguratorOrAdmin() {\\n    _remoteAcl.requireAnyOf(\\n      msg.sender,\\n      AccessFlags.REWARD_CONFIG_ADMIN | AccessFlags.REWARD_CONFIGURATOR,\\n      Errors.CALLER_NOT_REWARD_CONFIG_ADMIN\\n    );\\n    _;\\n  }\\n}\\n\\nabstract contract MarketAccessBitmask is MarketAccessBitmaskMin {\\n  using AccessHelper for IMarketAccessController;\\n\\n  constructor(IMarketAccessController remoteAcl) MarketAccessBitmaskMin(remoteAcl) {}\\n\\n  modifier onlyEmergencyAdmin() {\\n    _remoteAcl.requireAnyOf(msg.sender, AccessFlags.EMERGENCY_ADMIN, Errors.CALLER_NOT_EMERGENCY_ADMIN);\\n    _;\\n  }\\n\\n  function _onlySweepAdmin() internal view virtual {\\n    _remoteAcl.requireAnyOf(msg.sender, AccessFlags.SWEEP_ADMIN, Errors.CALLER_NOT_SWEEP_ADMIN);\\n  }\\n\\n  modifier onlySweepAdmin() {\\n    _onlySweepAdmin();\\n    _;\\n  }\\n}\\n\"\r\n    },\r\n    \"contracts/access/interfaces/IMarketAccessController.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: agpl-3.0\\npragma solidity ^0.8.4;\\n\\nimport './IAccessController.sol';\\n\\n/// @dev Main registry of addresses part of or connected to the protocol, including permissioned roles. Also acts a proxy factory.\\ninterface IMarketAccessController is IAccessController {\\n  function getMarketId() external view returns (string memory);\\n\\n  function getLendingPool() external view returns (address);\\n\\n  function getPriceOracle() external view returns (address);\\n\\n  function getLendingRateOracle() external view returns (address);\\n}\\n\"\r\n    },\r\n    \"contracts/protocol/tokenization/interfaces/IInitializablePoolToken.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: agpl-3.0\\npragma solidity ^0.8.4;\\n\\nimport './PoolTokenConfig.sol';\\n\\n/// @dev Interface for the initialize function on PoolToken or DebtToken\\ninterface IInitializablePoolToken {\\n  event Initialized(\\n    address indexed underlyingAsset,\\n    address indexed pool,\\n    address treasury,\\n    string tokenName,\\n    string tokenSymbol,\\n    uint8 tokenDecimals,\\n    bytes params\\n  );\\n\\n  /// @dev Initializes the depositToken\\n  function initialize(\\n    PoolTokenConfig calldata config,\\n    string calldata tokenName,\\n    string calldata tokenSymbol,\\n    bytes calldata params\\n  ) external;\\n}\\n\"\r\n    },\r\n    \"contracts/tools/tokens/IERC20Details.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: agpl-3.0\\npragma solidity ^0.8.4;\\n\\ninterface IERC20Details {\\n  function name() external view returns (string memory);\\n\\n  function symbol() external view returns (string memory);\\n\\n  function decimals() external view returns (uint8);\\n}\\n\"\r\n    },\r\n    \"contracts/protocol/libraries/types/DataTypes.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: agpl-3.0\\npragma solidity ^0.8.4;\\n\\nlibrary DataTypes {\\n  struct ReserveData {\\n    //stores the reserve configuration\\n    ReserveConfigurationMap configuration;\\n    //the liquidity index. Expressed in ray\\n    uint128 liquidityIndex;\\n    //variable borrow index. Expressed in ray\\n    uint128 variableBorrowIndex;\\n    //the current supply rate. Expressed in ray\\n    uint128 currentLiquidityRate;\\n    //the current variable borrow rate. Expressed in ray\\n    uint128 currentVariableBorrowRate;\\n    //the current stable borrow rate. Expressed in ray\\n    uint128 currentStableBorrowRate;\\n    uint40 lastUpdateTimestamp;\\n    //tokens addresses\\n    address depositTokenAddress;\\n    address stableDebtTokenAddress;\\n    address variableDebtTokenAddress;\\n    //address of the reserve strategy\\n    address strategy;\\n    //the id of the reserve. Represents the position in the list of the active reserves\\n    uint8 id;\\n  }\\n\\n  struct ReserveConfigurationMap {\\n    //bit 0-15: LTV\\n    //bit 16-31: Liq. threshold\\n    //bit 32-47: Liq. bonus\\n    //bit 48-55: Decimals\\n    //bit 56: Reserve is active\\n    //bit 57: reserve is frozen\\n    //bit 58: borrowing is enabled\\n    //bit 59: stable rate borrowing enabled\\n    //bit 60-63: reserved\\n    //bit 64-79: reserve factor\\n    //bit 80: strategy is external\\n    uint256 data;\\n  }\\n\\n  struct UserConfigurationMap {\\n    uint256 data;\\n  }\\n\\n  enum InterestRateMode {NONE, STABLE, VARIABLE}\\n\\n  struct InitReserveData {\\n    address asset;\\n    address depositTokenAddress;\\n    address stableDebtAddress;\\n    address variableDebtAddress;\\n    address strategy;\\n    bool externalStrategy;\\n  }\\n}\\n\"\r\n    },\r\n    \"contracts/access/interfaces/IAccessController.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: agpl-3.0\\npragma solidity ^0.8.4;\\n\\nimport './IRemoteAccessBitmask.sol';\\nimport '../../tools/upgradeability/IProxy.sol';\\n\\n/// @dev Main registry of permissions and addresses\\ninterface IAccessController is IRemoteAccessBitmask {\\n  function getAddress(uint256 id) external view returns (address);\\n\\n  function createProxy(\\n    address admin,\\n    address impl,\\n    bytes calldata params\\n  ) external returns (IProxy);\\n}\\n\"\r\n    },\r\n    \"contracts/access/interfaces/IRemoteAccessBitmask.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: agpl-3.0\\npragma solidity ^0.8.4;\\n\\ninterface IRemoteAccessBitmask {\\n  /**\\n   * @dev Returns access flags granted to the given address and limited by the filterMask. filterMask == 0 has a special meaning.\\n   * @param addr an to get access perfmissions for\\n   * @param filterMask limits a subset of flags to be checked.\\n   * NB! When filterMask == 0 then zero is returned no flags granted, or an unspecified non-zero value otherwise.\\n   * @return Access flags currently granted\\n   */\\n  function queryAccessControlMask(address addr, uint256 filterMask) external view returns (uint256);\\n}\\n\"\r\n    },\r\n    \"contracts/tools/upgradeability/IProxy.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: agpl-3.0\\npragma solidity ^0.8.4;\\n\\ninterface IProxy {\\n  function upgradeToAndCall(address newImplementation, bytes calldata data) external payable;\\n}\\n\"\r\n    },\r\n    \"contracts/interfaces/ICreditDelegationToken.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: agpl-3.0\\npragma solidity ^0.8.4;\\n\\ninterface ICreditDelegationToken {\\n  event BorrowAllowanceDelegated(\\n    address indexed fromUser,\\n    address indexed toUser,\\n    address asset,\\n    uint256 amount\\n  );\\n\\n  /**\\n   * @dev delegates borrowing power to a user on the specific debt token\\n   * @param delegatee the address receiving the delegated borrowing power\\n   * @param amount the maximum amount being delegated. Delegation will still\\n   * respect the liquidation constraints (even if delegated, a delegatee cannot\\n   * force a delegator HF to go below 1)\\n   **/\\n  function approveDelegation(address delegatee, uint256 amount) external;\\n\\n  /**\\n   * @dev returns the borrow allowance of the user\\n   * @param fromUser The user to giving allowance\\n   * @param toUser The user to give allowance to\\n   * @return the current allowance of toUser\\n   **/\\n  function borrowAllowance(address fromUser, address toUser) external view returns (uint256);\\n}\\n\"\r\n    },\r\n    \"contracts/tools/tokens/ERC20NoTransferBase.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: agpl-3.0\\npragma solidity ^0.8.4;\\n\\nimport '../../dependencies/openzeppelin/contracts/IERC20.sol';\\n\\nabstract contract ERC20NoTransferBase is IERC20 {\\n  function transfer(address, uint256) public pure override returns (bool) {\\n    notSupported();\\n    return false;\\n  }\\n\\n  function allowance(address, address) public pure override returns (uint256) {\\n    return 0;\\n  }\\n\\n  function approve(address, uint256) public pure override returns (bool) {\\n    notSupported();\\n    return false;\\n  }\\n\\n  function transferFrom(\\n    address,\\n    address,\\n    uint256\\n  ) public pure override returns (bool) {\\n    notSupported();\\n    return false;\\n  }\\n\\n  function notSupported() private pure {\\n    revert('NOT_SUPPORTED');\\n  }\\n}\\n\"\r\n    },\r\n    \"contracts/protocol/tokenization/base/RewardedTokenBase.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: agpl-3.0\\npragma solidity ^0.8.4;\\n\\nimport '../../../tools/Errors.sol';\\nimport '../../../reward/calcs/CalcLinearWeightedReward.sol';\\nimport '../../../reward/pools/ControlledRewardPool.sol';\\nimport '../../../reward/interfaces/IRewardController.sol';\\nimport '../../../reward/interfaces/IInitializableRewardPool.sol';\\nimport './PoolTokenBase.sol';\\n\\nabstract contract RewardedTokenBase is\\n  PoolTokenBase,\\n  CalcLinearWeightedReward,\\n  ControlledRewardPool,\\n  IInitializableRewardPool\\n{\\n  constructor() ControlledRewardPool(IRewardController(address(0)), 0, 0) {}\\n\\n  function internalTotalSupply() internal view override returns (uint256) {\\n    return super.internalGetTotalSupply();\\n  }\\n\\n  function internalBalanceOf(address account) internal view override returns (uint256) {\\n    return super.getRewardEntry(account).rewardBase;\\n  }\\n\\n  function internalBalanceAndFlagsOf(address account) internal view override returns (uint256, uint32) {\\n    RewardBalance memory balance = super.getRewardEntry(account);\\n    return (balance.rewardBase, balance.custom);\\n  }\\n\\n  function internalSetFlagsOf(address account, uint32 flags) internal override {\\n    super.internalSetRewardEntryCustom(account, flags);\\n  }\\n\\n  function internalSetIncentivesController(address) internal override {\\n    _mutable();\\n    _notSupported();\\n  }\\n\\n  function _notSupported() private pure {\\n    revert('UNSUPPORTED');\\n  }\\n\\n  function _mutable() private {}\\n\\n  function addRewardProvider(address, address) external view override onlyConfigAdmin {\\n    _notSupported();\\n  }\\n\\n  function removeRewardProvider(address provider) external override onlyConfigAdmin {}\\n\\n  function internalGetRate() internal view override returns (uint256) {\\n    return super.getLinearRate();\\n  }\\n\\n  function internalSetRate(uint256 rate) internal override {\\n    super.setLinearRate(rate);\\n  }\\n\\n  function getIncentivesController() public view override returns (address) {\\n    return address(this);\\n  }\\n\\n  function getCurrentTick() internal view override returns (uint32) {\\n    return uint32(block.timestamp);\\n  }\\n\\n  function internalGetReward(address holder)\\n    internal\\n    override\\n    returns (\\n      uint256,\\n      uint32,\\n      bool\\n    )\\n  {\\n    return doGetReward(holder);\\n  }\\n\\n  function internalCalcReward(address holder, uint32 at) internal view override returns (uint256, uint32) {\\n    return doCalcRewardAt(holder, at);\\n  }\\n\\n  function getAccessController() internal view override returns (IMarketAccessController) {\\n    return _remoteAcl;\\n  }\\n\\n  function internalAllocatedReward(\\n    address account,\\n    uint256 allocated,\\n    uint32 since,\\n    AllocationMode mode\\n  ) internal {\\n    if (allocated == 0) {\\n      if (mode == AllocationMode.Push || getRewardController() == address(0)) {\\n        return;\\n      }\\n    }\\n    super.internalAllocateReward(account, allocated, since, mode);\\n  }\\n\\n  function internalIncrementBalance(\\n    address account,\\n    uint256 amount,\\n    uint256\\n  ) internal override {\\n    (uint256 allocated, uint32 since, AllocationMode mode) = doIncrementRewardBalance(account, amount);\\n    internalAllocatedReward(account, allocated, since, mode);\\n  }\\n\\n  function internalDecrementBalance(\\n    address account,\\n    uint256 amount,\\n    uint256 minBalance,\\n    uint256\\n  ) internal override {\\n    // require(oldAccountBalance >= amount, 'ERC20: burn amount exceeds balance');\\n    (uint256 allocated, uint32 since, AllocationMode mode) = doDecrementRewardBalance(account, amount, minBalance);\\n    internalAllocatedReward(account, allocated, since, mode);\\n  }\\n\\n  function internalUpdateTotalSupply(uint256 newSupply) internal override {\\n    doUpdateTotalSupply(newSupply);\\n  }\\n\\n  function getPoolName() public view virtual override returns (string memory) {\\n    return super.symbol();\\n  }\\n\\n  function initializeRewardPool(InitRewardPoolData calldata config) external override onlyRewardConfiguratorOrAdmin {\\n    require(address(config.controller) != address(0));\\n    require(address(getRewardController()) == address(0));\\n    _initialize(IRewardController(config.controller), 0, config.baselinePercentage, config.poolName);\\n  }\\n\\n  function initializedRewardPoolWith() external view override returns (InitRewardPoolData memory) {\\n    return InitRewardPoolData(IRewardController(getRewardController()), getPoolName(), getBaselinePercentage());\\n  }\\n}\\n\"\r\n    },\r\n    \"contracts/reward/calcs/CalcLinearWeightedReward.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: agpl-3.0\\npragma solidity ^0.8.4;\\n\\nimport './CalcLinearRewardBalances.sol';\\n\\nabstract contract CalcLinearWeightedReward is CalcLinearRewardBalances {\\n  uint256 private _accumRate;\\n  uint256 private _totalSupply;\\n\\n  uint256 private constant _maxWeightBase = 1e36;\\n\\n  function internalGetTotalSupply() internal view returns (uint256) {\\n    return _totalSupply;\\n  }\\n\\n  function internalRateUpdated(\\n    uint256 lastRate,\\n    uint32 lastAt,\\n    uint32 at\\n  ) internal override {\\n    if (_totalSupply == 0) {\\n      return;\\n    }\\n\\n    // the rate is weighted now vs _maxWeightBase\\n    if (at != lastAt) {\\n      lastRate *= _maxWeightBase / _totalSupply;\\n      _accumRate += lastRate * (at - lastAt);\\n    }\\n  }\\n\\n  function doUpdateTotalSupply(uint256 newSupply) internal returns (bool) {\\n    if (newSupply == _totalSupply) {\\n      return false;\\n    }\\n    return internalSetTotalSupply(newSupply, getCurrentTick());\\n  }\\n\\n  function doIncrementTotalSupply(uint256 amount) internal {\\n    doUpdateTotalSupply(_totalSupply + amount);\\n  }\\n\\n  function doDecrementTotalSupply(uint256 amount) internal {\\n    doUpdateTotalSupply(_totalSupply - amount);\\n  }\\n\\n  function internalSetTotalSupply(uint256 totalSupply, uint32 at) internal returns (bool rateUpdated) {\\n    (uint256 lastRate, uint32 lastAt) = getRateAndUpdatedAt();\\n    internalMarkRateUpdate(at);\\n\\n    if (lastRate > 0) {\\n      internalRateUpdated(lastRate, lastAt, at);\\n      rateUpdated = lastAt != at;\\n    }\\n\\n    _totalSupply = totalSupply;\\n    return rateUpdated;\\n  }\\n\\n  function internalGetLastAccumRate() internal view returns (uint256) {\\n    return _accumRate;\\n  }\\n\\n  function internalCalcRateAndReward(\\n    RewardBalance memory entry,\\n    uint256 lastAccumRate,\\n    uint32 at\\n  )\\n    internal\\n    view\\n    virtual\\n    override\\n    returns (\\n      uint256 adjRate,\\n      uint256 allocated,\\n      uint32 /* since */\\n    )\\n  {\\n    adjRate = _accumRate;\\n\\n    if (_totalSupply > 0) {\\n      (uint256 rate, uint32 updatedAt) = getRateAndUpdatedAt();\\n\\n      rate *= _maxWeightBase / _totalSupply;\\n      adjRate += rate * (at - updatedAt);\\n    }\\n\\n    if (adjRate == lastAccumRate || entry.rewardBase == 0) {\\n      return (adjRate, 0, entry.claimedAt);\\n    }\\n\\n    allocated = (uint256(entry.rewardBase) * (adjRate - lastAccumRate)) / _maxWeightBase;\\n    return (adjRate, allocated, entry.claimedAt);\\n  }\\n}\\n\"\r\n    },\r\n    \"contracts/reward/pools/ControlledRewardPool.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: agpl-3.0\\npragma solidity ^0.8.4;\\n\\nimport '../../tools/math/PercentageMath.sol';\\nimport '../interfaces/IRewardController.sol';\\nimport '../interfaces/IManagedRewardPool.sol';\\nimport '../../access/AccessFlags.sol';\\nimport '../../access/AccessHelper.sol';\\nimport '../../tools/Errors.sol';\\n\\nabstract contract ControlledRewardPool is IManagedRewardPool {\\n  using PercentageMath for uint256;\\n\\n  IRewardController private _controller;\\n\\n  uint16 private _baselinePercentage;\\n  bool private _paused;\\n\\n  constructor(\\n    IRewardController controller,\\n    uint256 initialRate,\\n    uint16 baselinePercentage\\n  ) {\\n    _initialize(controller, initialRate, baselinePercentage, '');\\n  }\\n\\n  function _initialize(\\n    IRewardController controller,\\n    uint256 initialRate,\\n    uint16 baselinePercentage,\\n    string memory poolName\\n  ) internal virtual {\\n    poolName;\\n    _controller = controller;\\n\\n    if (baselinePercentage > 0) {\\n      _setBaselinePercentage(baselinePercentage);\\n    }\\n\\n    if (initialRate > 0) {\\n      _setRate(initialRate);\\n    }\\n  }\\n\\n  function getPoolName() public view virtual override returns (string memory) {\\n    return '';\\n  }\\n\\n  function updateBaseline(uint256 baseline)\\n    external\\n    virtual\\n    override\\n    onlyController\\n    returns (bool hasBaseline, uint256 appliedRate)\\n  {\\n    if (_baselinePercentage == 0) {\\n      return (false, internalGetRate());\\n    }\\n    appliedRate = baseline.percentMul(_baselinePercentage);\\n    _setRate(appliedRate);\\n    return (true, appliedRate);\\n  }\\n\\n  function setBaselinePercentage(uint16 factor) external override onlyController {\\n    _setBaselinePercentage(factor);\\n  }\\n\\n  function getBaselinePercentage() public view override returns (uint16) {\\n    return _baselinePercentage;\\n  }\\n\\n  function _mustHaveController() private view {\\n    require(address(_controller) != address(0), 'controller is required');\\n  }\\n\\n  function _setBaselinePercentage(uint16 factor) internal virtual {\\n    _mustHaveController();\\n    require(factor <= PercentageMath.ONE, 'illegal value');\\n    _baselinePercentage = factor;\\n    emit BaselinePercentageUpdated(factor);\\n  }\\n\\n  function _setRate(uint256 rate) internal {\\n    _mustHaveController();\\n    internalSetRate(rate);\\n    emit RateUpdated(rate);\\n  }\\n\\n  function getRate() external view override returns (uint256) {\\n    return internalGetRate();\\n  }\\n\\n  function internalGetRate() internal view virtual returns (uint256);\\n\\n  function internalSetRate(uint256 rate) internal virtual;\\n\\n  function setPaused(bool paused) public override onlyEmergencyAdmin {\\n    if (_paused != paused) {\\n      _paused = paused;\\n      internalPause(paused);\\n    }\\n    emit EmergencyPaused(msg.sender, paused);\\n  }\\n\\n  function isPaused() public view override returns (bool) {\\n    return _paused;\\n  }\\n\\n  function internalPause(bool paused) internal virtual {}\\n\\n  function getRewardController() public view override returns (address) {\\n    return address(_controller);\\n  }\\n\\n  function claimRewardFor(address holder)\\n    external\\n    override\\n    onlyController\\n    returns (\\n      uint256,\\n      uint32,\\n      bool\\n    )\\n  {\\n    return internalGetReward(holder);\\n  }\\n\\n  function claimRewardWithLimitFor(\\n    address holder,\\n    uint256 baseAmount,\\n    uint256 limit,\\n    uint16 minPct\\n  )\\n    external\\n    override\\n    onlyController\\n    returns (\\n      uint256 amount,\\n      uint32 since,\\n      bool keepPull,\\n      uint256 newLimit\\n    )\\n  {\\n    return internalGetRewardWithLimit(holder, baseAmount, limit, minPct);\\n  }\\n\\n  function calcRewardFor(address holder, uint32 at)\\n    external\\n    view\\n    virtual\\n    override\\n    returns (\\n      uint256 amount,\\n      uint256,\\n      uint32 since\\n    )\\n  {\\n    require(at >= uint32(block.timestamp));\\n    (amount, since) = internalCalcReward(holder, at);\\n    return (amount, 0, since);\\n  }\\n\\n  function internalAllocateReward(\\n    address holder,\\n    uint256 allocated,\\n    uint32 since,\\n    AllocationMode mode\\n  ) internal {\\n    _controller.allocatedByPool(holder, allocated, since, mode);\\n  }\\n\\n  function internalGetRewardWithLimit(\\n    address holder,\\n    uint256 baseAmount,\\n    uint256 limit,\\n    uint16 minBoostPct\\n  )\\n    internal\\n    virtual\\n    returns (\\n      uint256 amount,\\n      uint32 since,\\n      bool keepPull,\\n      uint256\\n    )\\n  {\\n    (amount, since, keepPull) = internalGetReward(holder);\\n    amount += baseAmount;\\n    if (minBoostPct > 0) {\\n      limit += PercentageMath.percentMul(amount, minBoostPct);\\n    }\\n    return (amount, since, keepPull, limit);\\n  }\\n\\n  function internalGetReward(address holder)\\n    internal\\n    virtual\\n    returns (\\n      uint256,\\n      uint32,\\n      bool\\n    );\\n\\n  function internalCalcReward(address holder, uint32 at) internal view virtual returns (uint256, uint32);\\n\\n  function attachedToRewardController() external override onlyController returns (uint256) {\\n    internalAttachedToRewardController();\\n    return internalGetPreAllocatedLimit();\\n  }\\n\\n  function detachedFromRewardController() external override onlyController returns (uint256) {\\n    return internalGetPreAllocatedLimit();\\n  }\\n\\n  function internalGetPreAllocatedLimit() internal virtual returns (uint256) {\\n    return 0;\\n  }\\n\\n  function internalAttachedToRewardController() internal virtual {}\\n\\n  function _isController(address addr) internal view virtual returns (bool) {\\n    return address(_controller) == addr;\\n  }\\n\\n  function getAccessController() internal view virtual returns (IMarketAccessController) {\\n    return _controller.getAccessController();\\n  }\\n\\n  function _onlyController() private view {\\n    require(_isController(msg.sender), Errors.CALLER_NOT_REWARD_CONTROLLER);\\n  }\\n\\n  modifier onlyController() {\\n    _onlyController();\\n    _;\\n  }\\n\\n  function _isConfigAdmin(address addr) internal view returns (bool) {\\n    return address(_controller) != address(0) && _controller.isConfigAdmin(addr);\\n  }\\n\\n  function _onlyConfigAdmin() private view {\\n    require(_isConfigAdmin(msg.sender), Errors.CALLER_NOT_REWARD_CONFIG_ADMIN);\\n  }\\n\\n  modifier onlyConfigAdmin() {\\n    _onlyConfigAdmin();\\n    _;\\n  }\\n\\n  function _isRateAdmin(address addr) internal view returns (bool) {\\n    return address(_controller) != address(0) && _controller.isRateAdmin(addr);\\n  }\\n\\n  function _onlyRateAdmin() private view {\\n    require(_isRateAdmin(msg.sender), Errors.CALLER_NOT_REWARD_RATE_ADMIN);\\n  }\\n\\n  modifier onlyRateAdmin() {\\n    _onlyRateAdmin();\\n    _;\\n  }\\n\\n  function _onlyEmergencyAdmin() private view {\\n    AccessHelper.requireAnyOf(\\n      getAccessController(),\\n      msg.sender,\\n      AccessFlags.EMERGENCY_ADMIN,\\n      Errors.CALLER_NOT_EMERGENCY_ADMIN\\n    );\\n  }\\n\\n  modifier onlyEmergencyAdmin() {\\n    _onlyEmergencyAdmin();\\n    _;\\n  }\\n\\n  function _notPaused() private view {\\n    require(!_paused, Errors.RW_REWARD_PAUSED);\\n  }\\n\\n  modifier notPaused() {\\n    _notPaused();\\n    _;\\n  }\\n\\n  modifier notPausedCustom(string memory err) {\\n    require(!_paused, err);\\n    _;\\n  }\\n}\\n\"\r\n    },\r\n    \"contracts/reward/interfaces/IRewardController.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: agpl-3.0\\npragma solidity ^0.8.4;\\n\\nimport '../../access/interfaces/IMarketAccessController.sol';\\n\\nenum AllocationMode {\\n  Push,\\n  SetPull,\\n  SetPullSpecial\\n}\\n\\ninterface IRewardController {\\n  function allocatedByPool(\\n    address holder,\\n    uint256 allocated,\\n    uint32 since,\\n    AllocationMode mode\\n  ) external;\\n\\n  function isRateAdmin(address) external view returns (bool);\\n\\n  function isConfigAdmin(address) external view returns (bool);\\n\\n  function getAccessController() external view returns (IMarketAccessController);\\n}\\n\"\r\n    },\r\n    \"contracts/reward/interfaces/IInitializableRewardPool.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: agpl-3.0\\npragma solidity ^0.8.4;\\n\\nimport './IRewardController.sol';\\n\\ninterface IInitializableRewardPool {\\n  struct InitRewardPoolData {\\n    IRewardController controller;\\n    string poolName;\\n    uint16 baselinePercentage;\\n  }\\n\\n  function initializeRewardPool(InitRewardPoolData calldata) external;\\n\\n  function initializedRewardPoolWith() external view returns (InitRewardPoolData memory);\\n}\\n\"\r\n    },\r\n    \"contracts/reward/calcs/CalcLinearRewardBalances.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: agpl-3.0\\npragma solidity ^0.8.4;\\n\\nimport '../interfaces/IRewardController.sol';\\n\\nabstract contract CalcLinearRewardBalances {\\n  struct RewardBalance {\\n    uint192 rewardBase;\\n    uint32 custom;\\n    uint32 claimedAt;\\n  }\\n  mapping(address => RewardBalance) private _balances;\\n  mapping(address => uint256) private _accumRates;\\n\\n  uint224 private _rate;\\n  uint32 private _rateUpdatedAt;\\n\\n  function setLinearRate(uint256 rate) internal {\\n    setLinearRateAt(rate, getCurrentTick());\\n  }\\n\\n  function setLinearRateAt(uint256 rate, uint32 at) internal {\\n    if (_rate == rate) {\\n      return;\\n    }\\n    require(rate <= type(uint224).max);\\n\\n    uint32 prevTick = _rateUpdatedAt;\\n    if (at != prevTick) {\\n      uint224 prevRate = _rate;\\n      internalMarkRateUpdate(at);\\n      _rate = uint224(rate);\\n      internalRateUpdated(prevRate, prevTick, at);\\n    }\\n  }\\n\\n  function doSyncRateAt(uint32 at) internal {\\n    uint32 prevTick = _rateUpdatedAt;\\n    if (at != prevTick) {\\n      internalMarkRateUpdate(at);\\n      internalRateUpdated(_rate, prevTick, at);\\n    }\\n  }\\n\\n  function getCurrentTick() internal view virtual returns (uint32);\\n\\n  function internalRateUpdated(\\n    uint256 lastRate,\\n    uint32 lastAt,\\n    uint32 at\\n  ) internal virtual;\\n\\n  function internalMarkRateUpdate(uint32 currentTick) internal {\\n    require(currentTick >= _rateUpdatedAt, 'retroactive update');\\n    _rateUpdatedAt = currentTick;\\n  }\\n\\n  function getLinearRate() internal view returns (uint256) {\\n    return _rate;\\n  }\\n\\n  function getRateAndUpdatedAt() internal view returns (uint256, uint32) {\\n    return (_rate, _rateUpdatedAt);\\n  }\\n\\n  function internalCalcRateAndReward(\\n    RewardBalance memory entry,\\n    uint256 lastAccumRate,\\n    uint32 currentTick\\n  )\\n    internal\\n    view\\n    virtual\\n    returns (\\n      uint256 rate,\\n      uint256 allocated,\\n      uint32 since\\n    );\\n\\n  function getRewardEntry(address holder) internal view returns (RewardBalance memory) {\\n    return _balances[holder];\\n  }\\n\\n  function internalSetRewardEntryCustom(address holder, uint32 custom) internal {\\n    _balances[holder].custom = custom;\\n  }\\n\\n  function doIncrementRewardBalance(address holder, uint256 amount)\\n    internal\\n    returns (\\n      uint256,\\n      uint32,\\n      AllocationMode\\n    )\\n  {\\n    RewardBalance memory entry = _balances[holder];\\n    amount += entry.rewardBase;\\n    require(amount <= type(uint192).max, 'balance is too high');\\n    return _doUpdateRewardBalance(holder, entry, uint192(amount));\\n  }\\n\\n  function doDecrementRewardBalance(\\n    address holder,\\n    uint256 amount,\\n    uint256 minBalance\\n  )\\n    internal\\n    returns (\\n      uint256,\\n      uint32,\\n      AllocationMode\\n    )\\n  {\\n    RewardBalance memory entry = _balances[holder];\\n    require(entry.rewardBase >= minBalance + amount, 'amount exceeds balance');\\n    unchecked {\\n      amount = entry.rewardBase - amount;\\n    }\\n    return _doUpdateRewardBalance(holder, entry, uint192(amount));\\n  }\\n\\n  function doUpdateRewardBalance(address holder, uint256 newBalance)\\n    internal\\n    returns (\\n      uint256 allocated,\\n      uint32 since,\\n      AllocationMode mode\\n    )\\n  {\\n    require(newBalance <= type(uint192).max, 'balance is too high');\\n    return _doUpdateRewardBalance(holder, _balances[holder], uint192(newBalance));\\n  }\\n\\n  function _doUpdateRewardBalance(\\n    address holder,\\n    RewardBalance memory entry,\\n    uint192 newBalance\\n  )\\n    private\\n    returns (\\n      uint256,\\n      uint32,\\n      AllocationMode mode\\n    )\\n  {\\n    if (entry.claimedAt == 0) {\\n      mode = AllocationMode.SetPull;\\n    } else {\\n      mode = AllocationMode.Push;\\n    }\\n\\n    uint32 currentTick = getCurrentTick();\\n    (uint256 adjRate, uint256 allocated, uint32 since) = internalCalcRateAndReward(\\n      entry,\\n      _accumRates[holder],\\n      currentTick\\n    );\\n\\n    _accumRates[holder] = adjRate;\\n    _balances[holder] = RewardBalance(newBalance, entry.custom, currentTick);\\n    return (allocated, since, mode);\\n  }\\n\\n  function doRemoveRewardBalance(address holder) internal returns (uint256 rewardBase) {\\n    rewardBase = _balances[holder].rewardBase;\\n    if (rewardBase == 0 && _balances[holder].claimedAt == 0) {\\n      return 0;\\n    }\\n    delete (_balances[holder]);\\n    return rewardBase;\\n  }\\n\\n  function doGetReward(address holder)\\n    internal\\n    returns (\\n      uint256,\\n      uint32,\\n      bool\\n    )\\n  {\\n    return doGetRewardAt(holder, getCurrentTick());\\n  }\\n\\n  function doGetRewardAt(address holder, uint32 currentTick)\\n    internal\\n    returns (\\n      uint256,\\n      uint32,\\n      bool\\n    )\\n  {\\n    RewardBalance memory balance = _balances[holder];\\n    if (balance.rewardBase == 0) {\\n      return (0, 0, false);\\n    }\\n\\n    (uint256 adjRate, uint256 allocated, uint32 since) = internalCalcRateAndReward(\\n      balance,\\n      _accumRates[holder],\\n      currentTick\\n    );\\n\\n    _accumRates[holder] = adjRate;\\n    _balances[holder].claimedAt = currentTick;\\n    return (allocated, since, true);\\n  }\\n\\n  function doCalcReward(address holder) internal view returns (uint256, uint32) {\\n    return doCalcRewardAt(holder, getCurrentTick());\\n  }\\n\\n  function doCalcRewardAt(address holder, uint32 currentTick) internal view returns (uint256, uint32) {\\n    if (_balances[holder].rewardBase == 0) {\\n      return (0, 0);\\n    }\\n\\n    (, uint256 allocated, uint32 since) = internalCalcRateAndReward(\\n      _balances[holder],\\n      _accumRates[holder],\\n      currentTick\\n    );\\n    return (allocated, since);\\n  }\\n}\\n\"\r\n    },\r\n    \"contracts/tools/math/PercentageMath.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: agpl-3.0\\npragma solidity ^0.8.4;\\n\\nimport '../Errors.sol';\\n\\n/// @dev Percentages are defined in basis points. The precision is indicated by ONE. Operations are rounded half up.\\nlibrary PercentageMath {\\n  uint16 public constant BP = 1; // basis point\\n  uint16 public constant PCT = 100 * BP; // basis points per percentage point\\n  uint16 public constant ONE = 100 * PCT; // basis points per 1 (100%)\\n  uint16 public constant HALF_ONE = ONE / 2;\\n  // deprecated\\n  uint256 public constant PERCENTAGE_FACTOR = ONE; //percentage plus two decimals\\n\\n  /**\\n   * @dev Executes a percentage multiplication\\n   * @param value The value of which the percentage needs to be calculated\\n   * @param factor Basis points of the value to be calculated\\n   * @return The percentage of value\\n   **/\\n  function percentMul(uint256 value, uint256 factor) internal pure returns (uint256) {\\n    if (value == 0 || factor == 0) {\\n      return 0;\\n    }\\n\\n    require(value <= (type(uint256).max - HALF_ONE) / factor, Errors.MATH_MULTIPLICATION_OVERFLOW);\\n\\n    return (value * factor + HALF_ONE) / ONE;\\n  }\\n\\n  /**\\n   * @dev Executes a percentage division\\n   * @param value The value of which the percentage needs to be calculated\\n   * @param factor Basis points of the value to be calculated\\n   * @return The value divided the percentage\\n   **/\\n  function percentDiv(uint256 value, uint256 factor) internal pure returns (uint256) {\\n    require(factor != 0, Errors.MATH_DIVISION_BY_ZERO);\\n    uint256 halfFactor = factor >> 1;\\n\\n    require(value <= (type(uint256).max - halfFactor) / ONE, Errors.MATH_MULTIPLICATION_OVERFLOW);\\n\\n    return (value * ONE + halfFactor) / factor;\\n  }\\n\\n  function percentOf(uint256 value, uint256 base) internal pure returns (uint256) {\\n    require(base != 0, Errors.MATH_DIVISION_BY_ZERO);\\n    if (value == 0) {\\n      return 0;\\n    }\\n\\n    require(value <= (type(uint256).max - HALF_ONE) / ONE, Errors.MATH_MULTIPLICATION_OVERFLOW);\\n\\n    return (value * ONE + (base >> 1)) / base;\\n  }\\n}\\n\"\r\n    },\r\n    \"contracts/reward/interfaces/IManagedRewardPool.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: agpl-3.0\\npragma solidity ^0.8.4;\\n\\nimport '../../interfaces/IEmergencyAccess.sol';\\n\\ninterface IManagedRewardPool is IEmergencyAccess {\\n  function updateBaseline(uint256) external returns (bool hasBaseline, uint256 appliedRate);\\n\\n  function setBaselinePercentage(uint16) external;\\n\\n  function getBaselinePercentage() external view returns (uint16);\\n\\n  function getRate() external view returns (uint256);\\n\\n  function getPoolName() external view returns (string memory);\\n\\n  function claimRewardFor(address holder)\\n    external\\n    returns (\\n      uint256 amount,\\n      uint32 since,\\n      bool keepPull\\n    );\\n\\n  function claimRewardWithLimitFor(\\n    address holder,\\n    uint256 baseAmount,\\n    uint256 limit,\\n    uint16 minPct\\n  )\\n    external\\n    returns (\\n      uint256 amount,\\n      uint32 since,\\n      bool keepPull,\\n      uint256 newLimit\\n    );\\n\\n  function calcRewardFor(address holder, uint32 at)\\n    external\\n    view\\n    returns (\\n      uint256 amount,\\n      uint256 extra,\\n      uint32 since\\n    );\\n\\n  function addRewardProvider(address provider, address token) external;\\n\\n  function removeRewardProvider(address provider) external;\\n\\n  function getRewardController() external view returns (address);\\n\\n  function attachedToRewardController() external returns (uint256 allocateReward);\\n\\n  function detachedFromRewardController() external returns (uint256 deallocateReward);\\n\\n  event RateUpdated(uint256 rate);\\n  event BaselinePercentageUpdated(uint16);\\n  event ProviderAdded(address provider, address token);\\n  event ProviderRemoved(address provider);\\n}\\n\"\r\n    },\r\n    \"contracts/interfaces/IEmergencyAccess.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: agpl-3.0\\npragma solidity ^0.8.4;\\n\\ninterface IEmergencyAccess {\\n  function setPaused(bool paused) external;\\n\\n  function isPaused() external view returns (bool);\\n\\n  event EmergencyPaused(address indexed by, bool paused);\\n}\\n\"\r\n    }\r\n  },\r\n  \"settings\": {\r\n    \"optimizer\": {\r\n      \"enabled\": true,\r\n      \"runs\": 200\r\n    },\r\n    \"evmVersion\": \"istanbul\",\r\n    \"outputSelection\": {\r\n      \"*\": {\r\n        \"*\": [\r\n          \"evm.bytecode\",\r\n          \"evm.deployedBytecode\",\r\n          \"abi\"\r\n        ]\r\n      }\r\n    },\r\n    \"libraries\": {}\r\n  }\r\n}}","ABI":"[{\"inputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint16\",\"name\":\"\",\"type\":\"uint16\"}],\"name\":\"BaselinePercentageUpdated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"fromUser\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"toUser\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"asset\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"BorrowAllowanceDelegated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"index\",\"type\":\"uint256\"}],\"name\":\"Burn\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"by\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"bool\",\"name\":\"paused\",\"type\":\"bool\"}],\"name\":\"EmergencyPaused\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"underlyingAsset\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"pool\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"treasury\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"string\",\"name\":\"tokenName\",\"type\":\"string\"},{\"indexed\":false,\"internalType\":\"string\",\"name\":\"tokenSymbol\",\"type\":\"string\"},{\"indexed\":false,\"internalType\":\"uint8\",\"name\":\"tokenDecimals\",\"type\":\"uint8\"},{\"indexed\":false,\"internalType\":\"bytes\",\"name\":\"params\",\"type\":\"bytes\"}],\"name\":\"Initialized\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"onBehalfOf\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"index\",\"type\":\"uint256\"}],\"name\":\"Mint\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"provider\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"token\",\"type\":\"address\"}],\"name\":\"ProviderAdded\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"provider\",\"type\":\"address\"}],\"name\":\"ProviderRemoved\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"rate\",\"type\":\"uint256\"}],\"name\":\"RateUpdated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Transfer\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"POOL\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"REVISION\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"UNDERLYING_ASSET_ADDRESS\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"addRewardProvider\",\"outputs\":[],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"allowance\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"approve\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"delegatee\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"approveDelegation\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"attachedToRewardController\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"fromUser\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"toUser\",\"type\":\"address\"}],\"name\":\"borrowAllowance\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"index\",\"type\":\"uint256\"}],\"name\":\"burn\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"holder\",\"type\":\"address\"},{\"internalType\":\"uint32\",\"name\":\"at\",\"type\":\"uint32\"}],\"name\":\"calcRewardFor\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"},{\"internalType\":\"uint32\",\"name\":\"since\",\"type\":\"uint32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"holder\",\"type\":\"address\"}],\"name\":\"claimRewardFor\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"},{\"internalType\":\"uint32\",\"name\":\"\",\"type\":\"uint32\"},{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"holder\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"baseAmount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"limit\",\"type\":\"uint256\"},{\"internalType\":\"uint16\",\"name\":\"minPct\",\"type\":\"uint16\"}],\"name\":\"claimRewardWithLimitFor\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"internalType\":\"uint32\",\"name\":\"since\",\"type\":\"uint32\"},{\"internalType\":\"bool\",\"name\":\"keepPull\",\"type\":\"bool\"},{\"internalType\":\"uint256\",\"name\":\"newLimit\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"decimals\",\"outputs\":[{\"internalType\":\"uint8\",\"name\":\"\",\"type\":\"uint8\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"detachedFromRewardController\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getBaselinePercentage\",\"outputs\":[{\"internalType\":\"uint16\",\"name\":\"\",\"type\":\"uint16\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getIncentivesController\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getPoolName\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getRate\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getRewardController\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getScaleIndex\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"}],\"name\":\"getScaledUserBalanceAndSupply\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"components\":[{\"internalType\":\"address\",\"name\":\"pool\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"treasury\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"underlyingAsset\",\"type\":\"address\"},{\"internalType\":\"uint8\",\"name\":\"underlyingDecimals\",\"type\":\"uint8\"}],\"internalType\":\"struct PoolTokenConfig\",\"name\":\"config\",\"type\":\"tuple\"},{\"internalType\":\"string\",\"name\":\"name\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"symbol\",\"type\":\"string\"},{\"internalType\":\"bytes\",\"name\":\"params\",\"type\":\"bytes\"}],\"name\":\"initialize\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"components\":[{\"internalType\":\"contract IRewardController\",\"name\":\"controller\",\"type\":\"address\"},{\"internalType\":\"string\",\"name\":\"poolName\",\"type\":\"string\"},{\"internalType\":\"uint16\",\"name\":\"baselinePercentage\",\"type\":\"uint16\"}],\"internalType\":\"struct IInitializableRewardPool.InitRewardPoolData\",\"name\":\"config\",\"type\":\"tuple\"}],\"name\":\"initializeRewardPool\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"initializedRewardPoolWith\",\"outputs\":[{\"components\":[{\"internalType\":\"contract IRewardController\",\"name\":\"controller\",\"type\":\"address\"},{\"internalType\":\"string\",\"name\":\"poolName\",\"type\":\"string\"},{\"internalType\":\"uint16\",\"name\":\"baselinePercentage\",\"type\":\"uint16\"}],\"internalType\":\"struct IInitializableRewardPool.InitRewardPoolData\",\"name\":\"\",\"type\":\"tuple\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"isPaused\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"onBehalfOf\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"index\",\"type\":\"uint256\"}],\"name\":\"mint\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"firstBalance\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"name\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"provider\",\"type\":\"address\"}],\"name\":\"removeRewardProvider\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"}],\"name\":\"rewardedBalanceOf\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"}],\"name\":\"scaledBalanceOf\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"scaledTotalSupply\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint16\",\"name\":\"factor\",\"type\":\"uint16\"}],\"name\":\"setBaselinePercentage\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"hook\",\"type\":\"address\"}],\"name\":\"setIncentivesController\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bool\",\"name\":\"paused\",\"type\":\"bool\"}],\"name\":\"setPaused\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"symbol\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalSupply\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"transfer\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"transferFrom\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"baseline\",\"type\":\"uint256\"}],\"name\":\"updateBaseline\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"hasBaseline\",\"type\":\"bool\"},{\"internalType\":\"uint256\",\"name\":\"appliedRate\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"updatePool\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}]","ContractName":"VariableDebtToken","CompilerVersion":"v0.8.4+commit.c7e474f2","OptimizationUsed":"1","Runs":"200","ConstructorArguments":"","EVMVersion":"Default","Library":"","LicenseType":"","Proxy":"0","Implementation":"","SwarmSource":""}]}