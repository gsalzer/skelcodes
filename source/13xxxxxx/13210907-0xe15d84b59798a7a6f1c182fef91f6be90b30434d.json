{"status":"1","message":"OK","result":[{"SourceCode":"// SPDX-License-Identifier: MIT\r\n\r\npragma solidity ^0.8.0;\r\n\r\n/**\r\n * @dev Provides information about the current execution context, including the\r\n * sender of the transaction and its data. While these are generally available\r\n * via msg.sender and msg.data, they should not be accessed in such a direct\r\n * manner, since when dealing with meta-transactions the account sending and\r\n * paying for execution may not be the actual sender (as far as an application\r\n * is concerned).\r\n *\r\n * This contract is only required for intermediate, library-like contracts.\r\n */\r\nabstract contract Context {\r\n    function _msgSender() internal view virtual returns (address) {\r\n        return msg.sender;\r\n    }\r\n\r\n    function _msgData() internal view virtual returns (bytes calldata) {\r\n        return msg.data;\r\n    }\r\n}\r\n\r\n\r\npragma solidity ^0.8.0;\r\n\r\n\r\n/**\r\n * @dev Contract module which provides a basic access control mechanism, where\r\n * there is an account (an owner) that can be granted exclusive access to\r\n * specific functions.\r\n *\r\n * By default, the owner account will be the one that deploys the contract. This\r\n * can later be changed with {transferOwnership}.\r\n *\r\n * This module is used through inheritance. It will make available the modifier\r\n * `onlyOwner`, which can be applied to your functions to restrict their use to\r\n * the owner.\r\n */\r\nabstract contract Ownable is Context {\r\n    address private _owner;\r\n\r\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\r\n\r\n    /**\r\n     * @dev Initializes the contract setting the deployer as the initial owner.\r\n     */\r\n    constructor() {\r\n        _setOwner(_msgSender());\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the address of the current owner.\r\n     */\r\n    function owner() public view virtual returns (address) {\r\n        return _owner;\r\n    }\r\n\r\n    /**\r\n     * @dev Throws if called by any account other than the owner.\r\n     */\r\n    modifier onlyOwner() {\r\n        require(owner() == _msgSender(), \"Ownable: caller is not the owner\");\r\n        _;\r\n    }\r\n\r\n    /**\r\n     * @dev Leaves the contract without owner. It will not be possible to call\r\n     * `onlyOwner` functions anymore. Can only be called by the current owner.\r\n     *\r\n     * NOTE: Renouncing ownership will leave the contract without an owner,\r\n     * thereby removing any functionality that is only available to the owner.\r\n     */\r\n    function renounceOwnership() public virtual onlyOwner {\r\n        _setOwner(address(0));\r\n    }\r\n\r\n    /**\r\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\r\n     * Can only be called by the current owner.\r\n     */\r\n    function transferOwnership(address newOwner) public virtual onlyOwner {\r\n        require(newOwner != address(0), \"Ownable: new owner is the zero address\");\r\n        _setOwner(newOwner);\r\n    }\r\n\r\n    function _setOwner(address newOwner) private {\r\n        address oldOwner = _owner;\r\n        _owner = newOwner;\r\n        emit OwnershipTransferred(oldOwner, newOwner);\r\n    }\r\n}\r\n\r\n\r\n\r\npragma solidity ^0.8.0;\r\n\r\ncontract EtheremuraMintForVT3 is Ownable{\r\n\t\r\n\tMAIN public constant MAIN_CONTRACT = MAIN(0x42074B47E57a0950F21443CCBab452Ab53890956);\r\n\tVT3 public constant VT3_CONTRACT = VT3(0xF17F7aE4100F2615722279520A91AeB6d76a3258);\r\n\tbool public paused = true;\r\n\tuint256 private _price;\r\n\r\n    constructor(uint256 newprice){\r\n        _price = newprice;\r\n    }\r\n    \r\n    function mintForVT3(address _to, uint _count) public {\r\n        \r\n        require(!paused, \"Contract in not active\");\r\n        require(VT3_CONTRACT.balanceOf(msg.sender) >= priceInVT3(_count), \"Contract in not active\");\r\n        require(VT3_CONTRACT.allowance(msg.sender, address(this)) >= priceInVT3(_count), \"No permission to use the required amount of VT3\");\r\n        require(address(this).balance >= MAIN_CONTRACT.price(_count), \"There is no required amount of ether on the contract\");\r\n        require(VT3_CONTRACT.transferFrom(msg.sender, address(this), priceInVT3(_count)), \"VT3 Transfer error\");\r\n        MAIN_CONTRACT.mintSamurai{value: MAIN_CONTRACT.price(_count)}(_to, _count);\r\n        \r\n    }\r\n    \r\n    function priceInVT3(uint _count) public view returns (uint256) {\r\n        return _count * _price;\r\n    }\r\n    \r\n    function pause(bool val) public onlyOwner {\r\n        paused = val;\r\n    }\r\n    \r\n    function setPrice(uint256 newprice) public onlyOwner{\r\n        _price = newprice;\r\n    }\r\n    \r\n    function withdrawAllETH() public onlyOwner {\r\n        require(payable(msg.sender).send(address(this).balance));\r\n    }\r\n     \r\n    function withdrawAllVT3() public onlyOwner {\r\n        require(VT3_CONTRACT.transfer(msg.sender, VT3_CONTRACT.balanceOf(address(this))));\r\n    }\r\n    \r\n    function sendEther() public payable {\r\n        require(msg.value > 0);\r\n    }\r\n    \r\n}\r\n\r\ninterface MAIN{\r\n    function mintSamurai(address _to, uint _count) external payable;\r\n    function price(uint _count) external view returns (uint256);\r\n}\r\n\r\ninterface VT3{\r\n    function balanceOf(address account) external view returns (uint256);\r\n    function transferFrom( address sender, address recipient, uint256 amount ) external returns (bool);\r\n    function allowance(address owner, address spender) external view returns (uint256);\r\n    function transfer(address recipient, uint256 amount) external returns (bool);\r\n}","ABI":"[{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"newprice\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"MAIN_CONTRACT\",\"outputs\":[{\"internalType\":\"contract MAIN\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"VT3_CONTRACT\",\"outputs\":[{\"internalType\":\"contract VT3\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_count\",\"type\":\"uint256\"}],\"name\":\"mintForVT3\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bool\",\"name\":\"val\",\"type\":\"bool\"}],\"name\":\"pause\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"paused\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_count\",\"type\":\"uint256\"}],\"name\":\"priceInVT3\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"sendEther\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"newprice\",\"type\":\"uint256\"}],\"name\":\"setPrice\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"withdrawAllETH\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"withdrawAllVT3\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}]","ContractName":"EtheremuraMintForVT3","CompilerVersion":"v0.8.7+commit.e28d00a7","OptimizationUsed":"0","Runs":"200","ConstructorArguments":"0000000000000000000000000000000000000000000000000000000000004e20","EVMVersion":"Default","Library":"","LicenseType":"MIT","Proxy":"0","Implementation":"","SwarmSource":"ipfs://d2b2e430b65fcbb67c9e8c64b0becc614f5b4b1cd6f92295f76e10b5bdc64cae"}]}