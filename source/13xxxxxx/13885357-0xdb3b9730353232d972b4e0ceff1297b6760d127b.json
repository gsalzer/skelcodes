{"status":"1","message":"OK","result":[{"SourceCode":"pragma solidity ^0.8.0;\r\n\r\n\r\n\r\n/*\r\n\r\n Club SOS\r\n\r\n DAO for community-based marketing\r\n \r\n Stake SOS in this contract in exchange for shares in the club.  This allows applications to easily donate their revenue in terms of SOS to all participants as a marketing strategy.\r\n \r\n Unstake your original SOS at any time and you will always recieve what you originally staked plus any donation proceeds.\r\n\r\n*/\r\n                                                                                 \r\n  \r\n \r\n \r\n\r\n\r\ninterface IERC20 {\r\n    /**\r\n     * @dev Returns the amount of tokens in existence.\r\n     */\r\n    function totalSupply() external view returns (uint256);\r\n\r\n    /**\r\n     * @dev Returns the amount of tokens owned by `account`.\r\n     */\r\n    function balanceOf(address account) external view returns (uint256);\r\n\r\n    /**\r\n     * @dev Moves `amount` tokens from the caller's account to `recipient`.\r\n     *\r\n     * Returns a boolean value indicating whether the operation succeeded.\r\n     *\r\n     * Emits a {Transfer} event.\r\n     */\r\n    function transfer(address recipient, uint256 amount) external returns (bool);\r\n\r\n    /**\r\n     * @dev Returns the remaining number of tokens that `spender` will be\r\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\r\n     * zero by default.\r\n     *\r\n     * This value changes when {approve} or {transferFrom} are called.\r\n     */\r\n    function allowance(address owner, address spender) external view returns (uint256);\r\n\r\n    /**\r\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\r\n     *\r\n     * Returns a boolean value indicating whether the operation succeeded.\r\n     *\r\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\r\n     * that someone may use both the old and the new allowance by unfortunate\r\n     * transaction ordering. One possible solution to mitigate this race\r\n     * condition is to first reduce the spender's allowance to 0 and set the\r\n     * desired value afterwards:\r\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\r\n     *\r\n     * Emits an {Approval} event.\r\n     */\r\n    function approve(address spender, uint256 amount) external returns (bool);\r\n\r\n    /**\r\n     * @dev Moves `amount` tokens from `sender` to `recipient` using the\r\n     * allowance mechanism. `amount` is then deducted from the caller's\r\n     * allowance.\r\n     *\r\n     * Returns a boolean value indicating whether the operation succeeded.\r\n     *\r\n     * Emits a {Transfer} event.\r\n     */\r\n    function transferFrom(address sender, address recipient, uint256 amount) external returns (bool);\r\n\r\n    /**\r\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\r\n     * another (`to`).\r\n     *\r\n     * Note that `value` may be zero.\r\n     */\r\n    event Transfer(address indexed from, address indexed to, uint256 value);\r\n\r\n    /**\r\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\r\n     * a call to {approve}. `value` is the new allowance.\r\n     */\r\n    event Approval(address indexed owner, address indexed spender, uint256 value);\r\n}\r\n\r\n   \r\n\r\ninterface MintableERC20  {\r\n     function mint(address account, uint256 amount) external ;\r\n     function burn(address account, uint256 amount) external ;\r\n}\r\n\r\n \r\n \r\n  \r\n  \r\n  \r\n/**\r\n * \r\n * \r\n *  Staking contract that supports community-extractable donations \r\n *\r\n */\r\ncontract ClubSOS\r\n{\r\n  \r\n  address public _stakeableCurrency; \r\n  address public _reservePoolToken; \r\n  uint256 immutable multiplierFactor = 1000000 ether;\r\n   \r\n    \r\n  constructor(  address stakeableCurrency, address reservePoolToken  ) \r\n  {     \r\n   _stakeableCurrency = stakeableCurrency;\r\n   _reservePoolToken = reservePoolToken;\r\n  } \r\n \r\n  \r\n  function stakeCurrency( address from,  uint256 currencyAmount ) public returns (bool){\r\n       \r\n      uint256 reserveTokensMinted = _reserveTokensMinted(  currencyAmount) ;\r\n     \r\n      require( IERC20(_stakeableCurrency).transferFrom(from, address(this), currencyAmount ), 'transfer failed'  );\r\n          \r\n      MintableERC20(_reservePoolToken).mint(from, reserveTokensMinted) ;\r\n      \r\n     return true; \r\n  }\r\n  \r\n   \r\n  function unstakeCurrency( uint256 reserveTokenAmount, address currencyToClaim) public returns (bool){\r\n             \r\n      uint256 vaultOutputAmount =  _vaultOutputAmount( reserveTokenAmount, currencyToClaim );\r\n            \r\n      MintableERC20(_reservePoolToken).burn(msg.sender,  reserveTokenAmount ); \r\n             \r\n      IERC20(currencyToClaim).transfer( msg.sender, vaultOutputAmount );\r\n       \r\n     return true; \r\n  }\r\n  \r\n\r\n    //amount of reserve_tokens to give to staker \r\n  function _reserveTokensMinted(  uint256 currencyAmount ) public view returns (uint){\r\n\r\n      uint256 totalReserveTokens = IERC20(_reservePoolToken).totalSupply();\r\n\r\n      uint256 internalVaultBalance =  IERC20(_stakeableCurrency).balanceOf(address(this));       \r\n     \r\n      if(totalReserveTokens == 0 || internalVaultBalance == 0 ){\r\n        return currencyAmount;\r\n      }\r\n            \r\n      uint256 incomingTokenRatio = (currencyAmount*multiplierFactor) / internalVaultBalance;\r\n              \r\n      return ( ( totalReserveTokens) * incomingTokenRatio) / multiplierFactor;\r\n  }\r\n  \r\n  \r\n    //amount of output tokens to give to redeemer\r\n  function _vaultOutputAmount( uint256 reserveTokenAmount, address currencyToClaim ) public view returns (uint){\r\n\r\n      uint256 internalVaultBalance = IERC20(currencyToClaim ).balanceOf(address(this));      \r\n\r\n      uint256 totalReserveTokens = IERC20(_reservePoolToken).totalSupply(); \r\n       \r\n      uint256 burnedTokenRatio = (reserveTokenAmount*multiplierFactor) / totalReserveTokens;      \r\n       \r\n      return (internalVaultBalance * burnedTokenRatio) / multiplierFactor;\r\n  }\r\n\r\n \r\n  \r\n   \r\n     // ------------------------------------------------------------------------\r\n\r\n    // Don't accept ETH\r\n\r\n    // ------------------------------------------------------------------------\r\n \r\n    fallback() external payable { revert(); }\r\n    receive() external payable { revert(); }\r\n   \r\n\r\n}","ABI":"[{\"inputs\":[{\"internalType\":\"address\",\"name\":\"stakeableCurrency\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"reservePoolToken\",\"type\":\"address\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"stateMutability\":\"payable\",\"type\":\"fallback\"},{\"inputs\":[],\"name\":\"_reservePoolToken\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"currencyAmount\",\"type\":\"uint256\"}],\"name\":\"_reserveTokensMinted\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"_stakeableCurrency\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"reserveTokenAmount\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"currencyToClaim\",\"type\":\"address\"}],\"name\":\"_vaultOutputAmount\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"currencyAmount\",\"type\":\"uint256\"}],\"name\":\"stakeCurrency\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"reserveTokenAmount\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"currencyToClaim\",\"type\":\"address\"}],\"name\":\"unstakeCurrency\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"stateMutability\":\"payable\",\"type\":\"receive\"}]","ContractName":"ClubSOS","CompilerVersion":"v0.8.0+commit.c7dfd78e","OptimizationUsed":"0","Runs":"200","ConstructorArguments":"0000000000000000000000003b484b82567a09e2588a13d54d032153f0c0aee0000000000000000000000000d628f9ff5bbf1cd61acc1b7b9d6dc7798a1c33f2","EVMVersion":"Default","Library":"","LicenseType":"None","Proxy":"0","Implementation":"","SwarmSource":"ipfs://7e1823961312526064701c4316b3365f4560b763f70d5b73e5ac04f2ae33f97b"}]}