{"status":"1","message":"OK","result":[{"SourceCode":"{{\r\n  \"language\": \"Solidity\",\r\n  \"sources\": {\r\n    \"/contracts/BridgeBank/BridgeBank.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: UNLICENSED\\r\\n\\r\\npragma solidity ^0.8.0;\\r\\n\\r\\nimport \\\"./EthBank.sol\\\";\\r\\nimport \\\"./BridgeBankPausable.sol\\\";\\r\\nimport \\\"./Ownable.sol\\\";\\r\\nimport \\\"./LockTimer.sol\\\";\\r\\nimport \\\"../../node_modules/@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol\\\";\\r\\nimport \\\"../../node_modules/@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol\\\";\\r\\n/**\\r\\n * @title BridgeBank\\r\\n * @dev Bank contract which coordinates asset-related functionality.\\r\\n *      EthBank manages the locking and unlocking of ETH/ERC20 token assets\\r\\n *      based on eth.\\r\\n **/\\r\\n\\r\\ncontract BridgeBank is Initializable, EthBank, BridgeBankPausable, Ownable, LockTimer{\\r\\n    using SafeERC20 for BridgeToken;\\r\\n    \\r\\n    address public operator;\\r\\n    \\r\\n    /*\\r\\n     * @dev: Constructor, sets operator\\r\\n     */\\r\\n    function initialize(\\r\\n        address _operatorAddress\\r\\n    ) public payable initializer {\\r\\n        operator = _operatorAddress;\\r\\n        owner = msg.sender;\\r\\n        lockBurnNonce = 0;\\r\\n        _paused = false;\\r\\n    }\\r\\n\\r\\n    /*\\r\\n     * @dev: Modifier to restrict access to operator\\r\\n     */\\r\\n    modifier onlyOperator() {\\r\\n        require(msg.sender == operator, \\\"Must be BridgeBank operator.\\\");\\r\\n        _;\\r\\n    }\\r\\n    /*\\r\\n     * @dev: Change to new Operator\\r\\n     *\\r\\n     */\\r\\n    function changeOperator(address _newOperator)\\r\\n        public\\r\\n        isOwner\\r\\n    {\\r\\n        operator = _newOperator;\\r\\n    }\\r\\n\\r\\n    /*\\r\\n     * @dev: Fallback function allows anyone to send funds to the bank directly\\r\\n     * \\r\\n     */\\r\\n    fallback () external payable { }\\r\\n\\r\\n    /**\\r\\n     * @dev Pauses all functions.\\r\\n     * Set timestamp for current pause\\r\\n     */\\r\\n    function pause() public isOwner {\\r\\n        _pause();\\r\\n\\r\\n        _setPausedAt();\\r\\n    }\\r\\n\\r\\n\\r\\n    /**\\r\\n     * @dev Unpauses all functions.\\r\\n     */\\r\\n    function unpause() public isOwner {\\r\\n        _unpause();\\r\\n    }\\r\\n    \\r\\n    /*\\r\\n     * @dev: Locks received ETH/ERC20 funds.\\r\\n     *\\r\\n     * @param _recipient: representation of destination address.\\r\\n     * @param _token: token address in origin chain (0x0 if ethereum)\\r\\n     * @param _amount: value of deposit\\r\\n     */\\r\\n    function lock(\\r\\n        address _recipient,\\r\\n        address _token,\\r\\n        uint256 _amount,\\r\\n        string memory _chainName\\r\\n    ) public payable availableNonce whenNotPaused {\\r\\n        string memory symbol;\\r\\n\\r\\n        // ETH deposit\\r\\n        if (msg.value > 0) {\\r\\n            require(\\r\\n                _token == address(0),\\r\\n                \\\"Ethereum deposits require the 'token' address to be the null address\\\"\\r\\n            );\\r\\n            require(\\r\\n                msg.value == _amount,\\r\\n                \\\"The transactions value must be equal the specified amount (in wei)\\\"\\r\\n            );\\r\\n            symbol = \\\"ETH\\\";\\r\\n\\r\\n            lockFunds(\\r\\n            payable(msg.sender),\\r\\n            _recipient,\\r\\n            _token,\\r\\n            symbol,\\r\\n            _amount,\\r\\n            _chainName\\r\\n            );\\r\\n\\r\\n        }// ERC20 deposit\\r\\n        else {\\r\\n            \\r\\n            uint beforeLock = BridgeToken(_token).balanceOf(address(this));\\r\\n\\r\\n            BridgeToken(_token).safeTransferFrom(\\r\\n                msg.sender,\\r\\n                address(this),\\r\\n                _amount\\r\\n            );\\r\\n\\r\\n            uint afterLock = BridgeToken(_token).balanceOf(address(this));\\r\\n\\r\\n            // Set symbol to the ERC20 token's symbol\\r\\n            symbol = BridgeToken(_token).symbol();\\r\\n\\r\\n            lockFunds(\\r\\n            payable(msg.sender),\\r\\n            _recipient,\\r\\n            _token,\\r\\n            symbol,\\r\\n            afterLock - beforeLock,\\r\\n            _chainName\\r\\n            );\\r\\n        }\\r\\n    }\\r\\n\\r\\n    /*\\r\\n     * @dev: Unlocks ETH and ERC20 tokens held on the contract.\\r\\n     *\\r\\n     * @param _recipient: recipient's is an evry address\\r\\n     * @param _token: token contract address\\r\\n     * @param _symbol: token symbol\\r\\n     * @param _amount: wei amount or ERC20 token count\\r\\n     */\\r\\n    function unlock(\\r\\n        address payable _recipient,\\r\\n        address tokenAddress,\\r\\n        string memory _symbol,\\r\\n        uint256 _amount,\\r\\n        bytes32 _interchainTX\\r\\n    ) public onlyOperator whenNotPaused {\\r\\n\\r\\n        require(\\r\\n            unlockCompleted[_interchainTX].isUnlocked == false,\\r\\n            \\\"Transactions has been processed before\\\"\\r\\n        );\\r\\n\\r\\n        // Check if it is ETH\\r\\n        if (tokenAddress == address(0)) {\\r\\n            address thisadd = address(this);\\r\\n            require(\\r\\n                thisadd.balance >= _amount,\\r\\n                \\\"Insufficient ethereum balance for delivery.\\\"\\r\\n            );\\r\\n        } else {\\r\\n            require(\\r\\n                BridgeToken(tokenAddress).balanceOf(address(this)) >= _amount,\\r\\n                \\\"Insufficient ERC20 token balance for delivery.\\\"\\r\\n            );\\r\\n        }\\r\\n        unlockFunds(_recipient, tokenAddress, _symbol, _amount, _interchainTX);\\r\\n    }\\r\\n\\r\\n    function emergencyWithdraw(\\r\\n        address tokenAddress,\\r\\n        uint256 _amount\\r\\n    ) public onlyOperator whenPaused isAbleToWithdraw{\\r\\n\\r\\n        // Check if it is ETH\\r\\n        if (tokenAddress == address(0)) {\\r\\n            address thisadd = address(this);\\r\\n            require(\\r\\n                thisadd.balance >= _amount,\\r\\n                \\\"Insufficient ethereum balance for delivery.\\\"\\r\\n            );\\r\\n            payable(msg.sender).transfer(_amount);\\r\\n        } else {\\r\\n            require(\\r\\n                BridgeToken(tokenAddress).balanceOf(address(this)) >= _amount,\\r\\n                \\\"Insufficient ERC20 token balance for delivery.\\\"\\r\\n            );\\r\\n            BridgeToken(tokenAddress).safeTransfer(owner, _amount);\\r\\n        }\\r\\n        \\r\\n    }\\r\\n\\r\\n    /*\\r\\n     * @dev: refund ETH and ERC20 tokens held on the contract.\\r\\n     *\\r\\n     * @param _recipient: recipient's is an evry address\\r\\n     * @param _token: token contract address\\r\\n     * @param _symbol: token symbol\\r\\n     * @param _amount: wei amount or ERC20 token count\\r\\n     */\\r\\n    function refund(\\r\\n        address payable _recipient,\\r\\n        address _tokenAddress,\\r\\n        string memory _symbol,\\r\\n        uint256 _amount,\\r\\n        uint256 _nonce\\r\\n    ) public onlyOperator whenNotPaused {\\r\\n        require(\\r\\n            refundCompleted[_nonce].isRefunded == false,\\r\\n            \\\"This refunds has been processed before\\\"\\r\\n        );\\r\\n        require(\\r\\n            refundCompleted[_nonce].tokenAddress == _tokenAddress,\\r\\n            \\\"This refunds has been processed before\\\"\\r\\n        );\\r\\n        require(\\r\\n            refundCompleted[_nonce].sender == _recipient,\\r\\n            \\\"This refunds has been processed before\\\"\\r\\n        );\\r\\n\\r\\n\\r\\n        // Check if it is ETH\\r\\n        if (_tokenAddress == address(0)) {\\r\\n            address thisadd = address(this);\\r\\n            require(\\r\\n                thisadd.balance >= _amount,\\r\\n                \\\"Insufficient ethereum balance for delivery.\\\"\\r\\n            );\\r\\n        } else {\\r\\n            require(\\r\\n                BridgeToken(_tokenAddress).balanceOf(address(this)) >= _amount,\\r\\n                \\\"Insufficient ERC20 token balance for delivery.\\\"\\r\\n            );\\r\\n        }\\r\\n        refunds(_recipient, _tokenAddress, _symbol, _amount, _nonce);\\r\\n    }\\r\\n\\r\\n\\r\\n\\r\\n\\r\\n    // This function check the mapping to see if the transaction  is unlockeds\\r\\n    function checkIsUnlocked(bytes32 _interchainTX) public view\\r\\n        returns (bool)\\r\\n    {\\r\\n        UnlockData memory _unlock = unlockCompleted[_interchainTX];\\r\\n        return _unlock.isUnlocked;\\r\\n\\r\\n    }\\r\\n\\r\\n    function checkIsRefunded(uint256 _id) public view\\r\\n        returns (bool)\\r\\n    {\\r\\n        RefundData memory _refund = refundCompleted[_id];\\r\\n        return _refund.isRefunded;\\r\\n    }\\r\\n\\r\\n    function setEmergencyWithdrawDelayTime(uint delayInSecs) public isOwner{\\r\\n        _setDelayTime(delayInSecs);\\r\\n    }\\r\\n\\r\\n    function getDelayTime() public view returns (uint256){\\r\\n        return _getDelayTime();\\r\\n    }\\r\\n    \\r\\n    function getPausedAt() public view returns (uint256){\\r\\n        return _getPausedAt();\\r\\n    }\\r\\n}\\r\\n\"\r\n    },\r\n    \"/node_modules/@openzeppelin/contracts/utils/Context.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Provides information about the current execution context, including the\\n * sender of the transaction and its data. While these are generally available\\n * via msg.sender and msg.data, they should not be accessed in such a direct\\n * manner, since when dealing with meta-transactions the account sending and\\n * paying for execution may not be the actual sender (as far as an application\\n * is concerned).\\n *\\n * This contract is only required for intermediate, library-like contracts.\\n */\\nabstract contract Context {\\n    function _msgSender() internal view virtual returns (address) {\\n        return msg.sender;\\n    }\\n\\n    function _msgData() internal view virtual returns (bytes calldata) {\\n        return msg.data;\\n    }\\n}\\n\"\r\n    },\r\n    \"/node_modules/@openzeppelin/contracts/utils/Address.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Collection of functions related to the address type\\n */\\nlibrary Address {\\n    /**\\n     * @dev Returns true if `account` is a contract.\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * It is unsafe to assume that an address for which this function returns\\n     * false is an externally-owned account (EOA) and not a contract.\\n     *\\n     * Among others, `isContract` will return false for the following\\n     * types of addresses:\\n     *\\n     *  - an externally-owned account\\n     *  - a contract in construction\\n     *  - an address where a contract will be created\\n     *  - an address where a contract lived, but was destroyed\\n     * ====\\n     */\\n    function isContract(address account) internal view returns (bool) {\\n        // This method relies on extcodesize, which returns 0 for contracts in\\n        // construction, since the code is only stored at the end of the\\n        // constructor execution.\\n\\n        uint256 size;\\n        assembly {\\n            size := extcodesize(account)\\n        }\\n        return size > 0;\\n    }\\n\\n    /**\\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\\n     * `recipient`, forwarding all available gas and reverting on errors.\\n     *\\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\\n     * imposed by `transfer`, making them unable to receive funds via\\n     * `transfer`. {sendValue} removes this limitation.\\n     *\\n     * https://diligence.consensys.net/posts/2019/09/stop-using-soliditys-transfer-now/[Learn more].\\n     *\\n     * IMPORTANT: because control is transferred to `recipient`, care must be\\n     * taken to not create reentrancy vulnerabilities. Consider using\\n     * {ReentrancyGuard} or the\\n     * https://solidity.readthedocs.io/en/v0.5.11/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\\n     */\\n    function sendValue(address payable recipient, uint256 amount) internal {\\n        require(address(this).balance >= amount, \\\"Address: insufficient balance\\\");\\n\\n        (bool success, ) = recipient.call{value: amount}(\\\"\\\");\\n        require(success, \\\"Address: unable to send value, recipient may have reverted\\\");\\n    }\\n\\n    /**\\n     * @dev Performs a Solidity function call using a low level `call`. A\\n     * plain `call` is an unsafe replacement for a function call: use this\\n     * function instead.\\n     *\\n     * If `target` reverts with a revert reason, it is bubbled up by this\\n     * function (like regular Solidity function calls).\\n     *\\n     * Returns the raw returned data. To convert to the expected return value,\\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\\n     *\\n     * Requirements:\\n     *\\n     * - `target` must be a contract.\\n     * - calling `target` with `data` must not revert.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionCall(target, data, \\\"Address: low-level call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\\n     * `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, 0, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but also transferring `value` wei to `target`.\\n     *\\n     * Requirements:\\n     *\\n     * - the calling contract must have an ETH balance of at least `value`.\\n     * - the called Solidity function must be `payable`.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, value, \\\"Address: low-level call with value failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\\n     * with `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        require(address(this).balance >= value, \\\"Address: insufficient balance for call\\\");\\n        require(isContract(target), \\\"Address: call to non-contract\\\");\\n\\n        (bool success, bytes memory returndata) = target.call{value: value}(data);\\n        return verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\\n        return functionStaticCall(target, data, \\\"Address: low-level static call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal view returns (bytes memory) {\\n        require(isContract(target), \\\"Address: static call to non-contract\\\");\\n\\n        (bool success, bytes memory returndata) = target.staticcall(data);\\n        return verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionDelegateCall(target, data, \\\"Address: low-level delegate call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        require(isContract(target), \\\"Address: delegate call to non-contract\\\");\\n\\n        (bool success, bytes memory returndata) = target.delegatecall(data);\\n        return verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Tool to verifies that a low level call was successful, and revert if it wasn't, either by bubbling the\\n     * revert reason using the provided one.\\n     *\\n     * _Available since v4.3._\\n     */\\n    function verifyCallResult(\\n        bool success,\\n        bytes memory returndata,\\n        string memory errorMessage\\n    ) internal pure returns (bytes memory) {\\n        if (success) {\\n            return returndata;\\n        } else {\\n            // Look for revert reason and bubble it up if present\\n            if (returndata.length > 0) {\\n                // The easiest way to bubble the revert reason is using memory via assembly\\n\\n                assembly {\\n                    let returndata_size := mload(returndata)\\n                    revert(add(32, returndata), returndata_size)\\n                }\\n            } else {\\n                revert(errorMessage);\\n            }\\n        }\\n    }\\n}\\n\"\r\n    },\r\n    \"/node_modules/@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../IERC20.sol\\\";\\nimport \\\"../../../utils/Address.sol\\\";\\n\\n/**\\n * @title SafeERC20\\n * @dev Wrappers around ERC20 operations that throw on failure (when the token\\n * contract returns false). Tokens that return no value (and instead revert or\\n * throw on failure) are also supported, non-reverting calls are assumed to be\\n * successful.\\n * To use this library you can add a `using SafeERC20 for IERC20;` statement to your contract,\\n * which allows you to call the safe operations as `token.safeTransfer(...)`, etc.\\n */\\nlibrary SafeERC20 {\\n    using Address for address;\\n\\n    function safeTransfer(\\n        IERC20 token,\\n        address to,\\n        uint256 value\\n    ) internal {\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.transfer.selector, to, value));\\n    }\\n\\n    function safeTransferFrom(\\n        IERC20 token,\\n        address from,\\n        address to,\\n        uint256 value\\n    ) internal {\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.transferFrom.selector, from, to, value));\\n    }\\n\\n    /**\\n     * @dev Deprecated. This function has issues similar to the ones found in\\n     * {IERC20-approve}, and its usage is discouraged.\\n     *\\n     * Whenever possible, use {safeIncreaseAllowance} and\\n     * {safeDecreaseAllowance} instead.\\n     */\\n    function safeApprove(\\n        IERC20 token,\\n        address spender,\\n        uint256 value\\n    ) internal {\\n        // safeApprove should only be called when setting an initial allowance,\\n        // or when resetting it to zero. To increase and decrease it, use\\n        // 'safeIncreaseAllowance' and 'safeDecreaseAllowance'\\n        require(\\n            (value == 0) || (token.allowance(address(this), spender) == 0),\\n            \\\"SafeERC20: approve from non-zero to non-zero allowance\\\"\\n        );\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, value));\\n    }\\n\\n    function safeIncreaseAllowance(\\n        IERC20 token,\\n        address spender,\\n        uint256 value\\n    ) internal {\\n        uint256 newAllowance = token.allowance(address(this), spender) + value;\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));\\n    }\\n\\n    function safeDecreaseAllowance(\\n        IERC20 token,\\n        address spender,\\n        uint256 value\\n    ) internal {\\n        unchecked {\\n            uint256 oldAllowance = token.allowance(address(this), spender);\\n            require(oldAllowance >= value, \\\"SafeERC20: decreased allowance below zero\\\");\\n            uint256 newAllowance = oldAllowance - value;\\n            _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));\\n        }\\n    }\\n\\n    /**\\n     * @dev Imitates a Solidity high-level call (i.e. a regular function call to a contract), relaxing the requirement\\n     * on the return value: the return value is optional (but if data is returned, it must not be false).\\n     * @param token The token targeted by the call.\\n     * @param data The call data (encoded using abi.encode or one of its variants).\\n     */\\n    function _callOptionalReturn(IERC20 token, bytes memory data) private {\\n        // We need to perform a low level call here, to bypass Solidity's return data size checking mechanism, since\\n        // we're implementing it ourselves. We use {Address.functionCall} to perform this call, which verifies that\\n        // the target address contains contract code and also asserts for success in the low-level call.\\n\\n        bytes memory returndata = address(token).functionCall(data, \\\"SafeERC20: low-level call failed\\\");\\n        if (returndata.length > 0) {\\n            // Return data is optional\\n            require(abi.decode(returndata, (bool)), \\\"SafeERC20: ERC20 operation did not succeed\\\");\\n        }\\n    }\\n}\\n\"\r\n    },\r\n    \"/node_modules/@openzeppelin/contracts/token/ERC20/extensions/IERC20Metadata.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../IERC20.sol\\\";\\n\\n/**\\n * @dev Interface for the optional metadata functions from the ERC20 standard.\\n *\\n * _Available since v4.1._\\n */\\ninterface IERC20Metadata is IERC20 {\\n    /**\\n     * @dev Returns the name of the token.\\n     */\\n    function name() external view returns (string memory);\\n\\n    /**\\n     * @dev Returns the symbol of the token.\\n     */\\n    function symbol() external view returns (string memory);\\n\\n    /**\\n     * @dev Returns the decimals places of the token.\\n     */\\n    function decimals() external view returns (uint8);\\n}\\n\"\r\n    },\r\n    \"/node_modules/@openzeppelin/contracts/token/ERC20/IERC20.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC20 standard as defined in the EIP.\\n */\\ninterface IERC20 {\\n    /**\\n     * @dev Returns the amount of tokens in existence.\\n     */\\n    function totalSupply() external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the amount of tokens owned by `account`.\\n     */\\n    function balanceOf(address account) external view returns (uint256);\\n\\n    /**\\n     * @dev Moves `amount` tokens from the caller's account to `recipient`.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transfer(address recipient, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Returns the remaining number of tokens that `spender` will be\\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\\n     * zero by default.\\n     *\\n     * This value changes when {approve} or {transferFrom} are called.\\n     */\\n    function allowance(address owner, address spender) external view returns (uint256);\\n\\n    /**\\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\\n     * that someone may use both the old and the new allowance by unfortunate\\n     * transaction ordering. One possible solution to mitigate this race\\n     * condition is to first reduce the spender's allowance to 0 and set the\\n     * desired value afterwards:\\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address spender, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Moves `amount` tokens from `sender` to `recipient` using the\\n     * allowance mechanism. `amount` is then deducted from the caller's\\n     * allowance.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(\\n        address sender,\\n        address recipient,\\n        uint256 amount\\n    ) external returns (bool);\\n\\n    /**\\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\\n     * another (`to`).\\n     *\\n     * Note that `value` may be zero.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 value);\\n\\n    /**\\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\\n     * a call to {approve}. `value` is the new allowance.\\n     */\\n    event Approval(address indexed owner, address indexed spender, uint256 value);\\n}\\n\"\r\n    },\r\n    \"/node_modules/@openzeppelin/contracts/token/ERC20/ERC20.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"./IERC20.sol\\\";\\nimport \\\"./extensions/IERC20Metadata.sol\\\";\\nimport \\\"../../utils/Context.sol\\\";\\n\\n/**\\n * @dev Implementation of the {IERC20} interface.\\n *\\n * This implementation is agnostic to the way tokens are created. This means\\n * that a supply mechanism has to be added in a derived contract using {_mint}.\\n * For a generic mechanism see {ERC20PresetMinterPauser}.\\n *\\n * TIP: For a detailed writeup see our guide\\n * https://forum.zeppelin.solutions/t/how-to-implement-erc20-supply-mechanisms/226[How\\n * to implement supply mechanisms].\\n *\\n * We have followed general OpenZeppelin Contracts guidelines: functions revert\\n * instead returning `false` on failure. This behavior is nonetheless\\n * conventional and does not conflict with the expectations of ERC20\\n * applications.\\n *\\n * Additionally, an {Approval} event is emitted on calls to {transferFrom}.\\n * This allows applications to reconstruct the allowance for all accounts just\\n * by listening to said events. Other implementations of the EIP may not emit\\n * these events, as it isn't required by the specification.\\n *\\n * Finally, the non-standard {decreaseAllowance} and {increaseAllowance}\\n * functions have been added to mitigate the well-known issues around setting\\n * allowances. See {IERC20-approve}.\\n */\\ncontract ERC20 is Context, IERC20, IERC20Metadata {\\n    mapping(address => uint256) private _balances;\\n\\n    mapping(address => mapping(address => uint256)) private _allowances;\\n\\n    uint256 private _totalSupply;\\n\\n    string private _name;\\n    string private _symbol;\\n\\n    /**\\n     * @dev Sets the values for {name} and {symbol}.\\n     *\\n     * The default value of {decimals} is 18. To select a different value for\\n     * {decimals} you should overload it.\\n     *\\n     * All two of these values are immutable: they can only be set once during\\n     * construction.\\n     */\\n    constructor(string memory name_, string memory symbol_) {\\n        _name = name_;\\n        _symbol = symbol_;\\n    }\\n\\n    /**\\n     * @dev Returns the name of the token.\\n     */\\n    function name() public view virtual override returns (string memory) {\\n        return _name;\\n    }\\n\\n    /**\\n     * @dev Returns the symbol of the token, usually a shorter version of the\\n     * name.\\n     */\\n    function symbol() public view virtual override returns (string memory) {\\n        return _symbol;\\n    }\\n\\n    /**\\n     * @dev Returns the number of decimals used to get its user representation.\\n     * For example, if `decimals` equals `2`, a balance of `505` tokens should\\n     * be displayed to a user as `5.05` (`505 / 10 ** 2`).\\n     *\\n     * Tokens usually opt for a value of 18, imitating the relationship between\\n     * Ether and Wei. This is the value {ERC20} uses, unless this function is\\n     * overridden;\\n     *\\n     * NOTE: This information is only used for _display_ purposes: it in\\n     * no way affects any of the arithmetic of the contract, including\\n     * {IERC20-balanceOf} and {IERC20-transfer}.\\n     */\\n    function decimals() public view virtual override returns (uint8) {\\n        return 18;\\n    }\\n\\n    /**\\n     * @dev See {IERC20-totalSupply}.\\n     */\\n    function totalSupply() public view virtual override returns (uint256) {\\n        return _totalSupply;\\n    }\\n\\n    /**\\n     * @dev See {IERC20-balanceOf}.\\n     */\\n    function balanceOf(address account) public view virtual override returns (uint256) {\\n        return _balances[account];\\n    }\\n\\n    /**\\n     * @dev See {IERC20-transfer}.\\n     *\\n     * Requirements:\\n     *\\n     * - `recipient` cannot be the zero address.\\n     * - the caller must have a balance of at least `amount`.\\n     */\\n    function transfer(address recipient, uint256 amount) public virtual override returns (bool) {\\n        _transfer(_msgSender(), recipient, amount);\\n        return true;\\n    }\\n\\n    /**\\n     * @dev See {IERC20-allowance}.\\n     */\\n    function allowance(address owner, address spender) public view virtual override returns (uint256) {\\n        return _allowances[owner][spender];\\n    }\\n\\n    /**\\n     * @dev See {IERC20-approve}.\\n     *\\n     * Requirements:\\n     *\\n     * - `spender` cannot be the zero address.\\n     */\\n    function approve(address spender, uint256 amount) public virtual override returns (bool) {\\n        _approve(_msgSender(), spender, amount);\\n        return true;\\n    }\\n\\n    /**\\n     * @dev See {IERC20-transferFrom}.\\n     *\\n     * Emits an {Approval} event indicating the updated allowance. This is not\\n     * required by the EIP. See the note at the beginning of {ERC20}.\\n     *\\n     * Requirements:\\n     *\\n     * - `sender` and `recipient` cannot be the zero address.\\n     * - `sender` must have a balance of at least `amount`.\\n     * - the caller must have allowance for ``sender``'s tokens of at least\\n     * `amount`.\\n     */\\n    function transferFrom(\\n        address sender,\\n        address recipient,\\n        uint256 amount\\n    ) public virtual override returns (bool) {\\n        _transfer(sender, recipient, amount);\\n\\n        uint256 currentAllowance = _allowances[sender][_msgSender()];\\n        require(currentAllowance >= amount, \\\"ERC20: transfer amount exceeds allowance\\\");\\n        unchecked {\\n            _approve(sender, _msgSender(), currentAllowance - amount);\\n        }\\n\\n        return true;\\n    }\\n\\n    /**\\n     * @dev Atomically increases the allowance granted to `spender` by the caller.\\n     *\\n     * This is an alternative to {approve} that can be used as a mitigation for\\n     * problems described in {IERC20-approve}.\\n     *\\n     * Emits an {Approval} event indicating the updated allowance.\\n     *\\n     * Requirements:\\n     *\\n     * - `spender` cannot be the zero address.\\n     */\\n    function increaseAllowance(address spender, uint256 addedValue) public virtual returns (bool) {\\n        _approve(_msgSender(), spender, _allowances[_msgSender()][spender] + addedValue);\\n        return true;\\n    }\\n\\n    /**\\n     * @dev Atomically decreases the allowance granted to `spender` by the caller.\\n     *\\n     * This is an alternative to {approve} that can be used as a mitigation for\\n     * problems described in {IERC20-approve}.\\n     *\\n     * Emits an {Approval} event indicating the updated allowance.\\n     *\\n     * Requirements:\\n     *\\n     * - `spender` cannot be the zero address.\\n     * - `spender` must have allowance for the caller of at least\\n     * `subtractedValue`.\\n     */\\n    function decreaseAllowance(address spender, uint256 subtractedValue) public virtual returns (bool) {\\n        uint256 currentAllowance = _allowances[_msgSender()][spender];\\n        require(currentAllowance >= subtractedValue, \\\"ERC20: decreased allowance below zero\\\");\\n        unchecked {\\n            _approve(_msgSender(), spender, currentAllowance - subtractedValue);\\n        }\\n\\n        return true;\\n    }\\n\\n    /**\\n     * @dev Moves `amount` of tokens from `sender` to `recipient`.\\n     *\\n     * This internal function is equivalent to {transfer}, and can be used to\\n     * e.g. implement automatic token fees, slashing mechanisms, etc.\\n     *\\n     * Emits a {Transfer} event.\\n     *\\n     * Requirements:\\n     *\\n     * - `sender` cannot be the zero address.\\n     * - `recipient` cannot be the zero address.\\n     * - `sender` must have a balance of at least `amount`.\\n     */\\n    function _transfer(\\n        address sender,\\n        address recipient,\\n        uint256 amount\\n    ) internal virtual {\\n        require(sender != address(0), \\\"ERC20: transfer from the zero address\\\");\\n        require(recipient != address(0), \\\"ERC20: transfer to the zero address\\\");\\n\\n        _beforeTokenTransfer(sender, recipient, amount);\\n\\n        uint256 senderBalance = _balances[sender];\\n        require(senderBalance >= amount, \\\"ERC20: transfer amount exceeds balance\\\");\\n        unchecked {\\n            _balances[sender] = senderBalance - amount;\\n        }\\n        _balances[recipient] += amount;\\n\\n        emit Transfer(sender, recipient, amount);\\n\\n        _afterTokenTransfer(sender, recipient, amount);\\n    }\\n\\n    /** @dev Creates `amount` tokens and assigns them to `account`, increasing\\n     * the total supply.\\n     *\\n     * Emits a {Transfer} event with `from` set to the zero address.\\n     *\\n     * Requirements:\\n     *\\n     * - `account` cannot be the zero address.\\n     */\\n    function _mint(address account, uint256 amount) internal virtual {\\n        require(account != address(0), \\\"ERC20: mint to the zero address\\\");\\n\\n        _beforeTokenTransfer(address(0), account, amount);\\n\\n        _totalSupply += amount;\\n        _balances[account] += amount;\\n        emit Transfer(address(0), account, amount);\\n\\n        _afterTokenTransfer(address(0), account, amount);\\n    }\\n\\n    /**\\n     * @dev Destroys `amount` tokens from `account`, reducing the\\n     * total supply.\\n     *\\n     * Emits a {Transfer} event with `to` set to the zero address.\\n     *\\n     * Requirements:\\n     *\\n     * - `account` cannot be the zero address.\\n     * - `account` must have at least `amount` tokens.\\n     */\\n    function _burn(address account, uint256 amount) internal virtual {\\n        require(account != address(0), \\\"ERC20: burn from the zero address\\\");\\n\\n        _beforeTokenTransfer(account, address(0), amount);\\n\\n        uint256 accountBalance = _balances[account];\\n        require(accountBalance >= amount, \\\"ERC20: burn amount exceeds balance\\\");\\n        unchecked {\\n            _balances[account] = accountBalance - amount;\\n        }\\n        _totalSupply -= amount;\\n\\n        emit Transfer(account, address(0), amount);\\n\\n        _afterTokenTransfer(account, address(0), amount);\\n    }\\n\\n    /**\\n     * @dev Sets `amount` as the allowance of `spender` over the `owner` s tokens.\\n     *\\n     * This internal function is equivalent to `approve`, and can be used to\\n     * e.g. set automatic allowances for certain subsystems, etc.\\n     *\\n     * Emits an {Approval} event.\\n     *\\n     * Requirements:\\n     *\\n     * - `owner` cannot be the zero address.\\n     * - `spender` cannot be the zero address.\\n     */\\n    function _approve(\\n        address owner,\\n        address spender,\\n        uint256 amount\\n    ) internal virtual {\\n        require(owner != address(0), \\\"ERC20: approve from the zero address\\\");\\n        require(spender != address(0), \\\"ERC20: approve to the zero address\\\");\\n\\n        _allowances[owner][spender] = amount;\\n        emit Approval(owner, spender, amount);\\n    }\\n\\n    /**\\n     * @dev Hook that is called before any transfer of tokens. This includes\\n     * minting and burning.\\n     *\\n     * Calling conditions:\\n     *\\n     * - when `from` and `to` are both non-zero, `amount` of ``from``'s tokens\\n     * will be transferred to `to`.\\n     * - when `from` is zero, `amount` tokens will be minted for `to`.\\n     * - when `to` is zero, `amount` of ``from``'s tokens will be burned.\\n     * - `from` and `to` are never both zero.\\n     *\\n     * To learn more about hooks, head to xref:ROOT:extending-contracts.adoc#using-hooks[Using Hooks].\\n     */\\n    function _beforeTokenTransfer(\\n        address from,\\n        address to,\\n        uint256 amount\\n    ) internal virtual {}\\n\\n    /**\\n     * @dev Hook that is called after any transfer of tokens. This includes\\n     * minting and burning.\\n     *\\n     * Calling conditions:\\n     *\\n     * - when `from` and `to` are both non-zero, `amount` of ``from``'s tokens\\n     * has been transferred to `to`.\\n     * - when `from` is zero, `amount` tokens have been minted for `to`.\\n     * - when `to` is zero, `amount` of ``from``'s tokens have been burned.\\n     * - `from` and `to` are never both zero.\\n     *\\n     * To learn more about hooks, head to xref:ROOT:extending-contracts.adoc#using-hooks[Using Hooks].\\n     */\\n    function _afterTokenTransfer(\\n        address from,\\n        address to,\\n        uint256 amount\\n    ) internal virtual {}\\n}\\n\"\r\n    },\r\n    \"/node_modules/@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev This is a base contract to aid in writing upgradeable contracts, or any kind of contract that will be deployed\\n * behind a proxy. Since a proxied contract can't have a constructor, it's common to move constructor logic to an\\n * external initializer function, usually called `initialize`. It then becomes necessary to protect this initializer\\n * function so it can only be called once. The {initializer} modifier provided by this contract will have this effect.\\n *\\n * TIP: To avoid leaving the proxy in an uninitialized state, the initializer function should be called as early as\\n * possible by providing the encoded function call as the `_data` argument to {ERC1967Proxy-constructor}.\\n *\\n * CAUTION: When used with inheritance, manual care must be taken to not invoke a parent initializer twice, or to ensure\\n * that all initializers are idempotent. This is not verified automatically as constructors are by Solidity.\\n */\\nabstract contract Initializable {\\n    /**\\n     * @dev Indicates that the contract has been initialized.\\n     */\\n    bool private _initialized;\\n\\n    /**\\n     * @dev Indicates that the contract is in the process of being initialized.\\n     */\\n    bool private _initializing;\\n\\n    /**\\n     * @dev Modifier to protect an initializer function from being invoked twice.\\n     */\\n    modifier initializer() {\\n        require(_initializing || !_initialized, \\\"Initializable: contract is already initialized\\\");\\n\\n        bool isTopLevelCall = !_initializing;\\n        if (isTopLevelCall) {\\n            _initializing = true;\\n            _initialized = true;\\n        }\\n\\n        _;\\n\\n        if (isTopLevelCall) {\\n            _initializing = false;\\n        }\\n    }\\n}\\n\"\r\n    },\r\n    \"/contracts/BridgeBank/Ownable.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: UNLICENSED\\n\\npragma solidity ^0.8.0;\\n\\ncontract Ownable {\\n\\n    address public owner;\\n\\n    event OwnershipTransferred(address previousOwner, address newOwner);\\n\\n    function getOnwer() public view returns (address) {\\n        return owner;\\n    }\\n\\n    modifier isOwner() {\\n        require(msg.sender == owner, \\\"Must be the owner of the contract.\\\");\\n        _;\\n    }\\n\\n    function transferOwnership(address newOwner) public isOwner {\\n        require(newOwner != address(0));\\n        emit OwnershipTransferred(owner, newOwner);\\n        owner = newOwner;\\n    }\\n}\"\r\n    },\r\n    \"/contracts/BridgeBank/LockTimer.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: UNLICENSED\\n/*\\n* Author: luc.vutien\\n* @dev: Lock timer for the upgradable proxy standard\\n* Add new modifier that check the lock\\n* Require admin to pause\\n* Note: Please follow the standard of upgradable proxy,\\n*       If you have to define any variable then do it as below, dont create new variables\\n*       That not follow unstructured EIP1967\\n*/\\npragma solidity ^0.8.0;\\nimport \\\"./Ownable.sol\\\";\\n\\ncontract LockTimer is Ownable{\\n\\n    // Create random position by keccak256 hashing\\n    bytes32 private constant pausedAtPosition = bytes32(uint256(keccak256('pausedAt')));\\n    bytes32 private constant delayTimePosition = bytes32(uint256(keccak256('delayTime')));\\n\\n    event SetDelayTime(uint256 delayTime);\\n\\n    modifier isAbleToWithdraw(){\\n        uint256 delayTime = _getDelayTime();\\n        uint256 pausedAt = _getPausedAt();\\n        // if delayTime has not been set yet then set to 1800 secs\\n        if (delayTime == 0) {\\n            delayTime = 1800;\\n        }\\n        require(block.timestamp - pausedAt >= delayTime, \\\"Must wait for certain amount of time\\\");\\n        _;\\n    }\\n    \\n    function _getPausedAt() internal view returns(uint256 time) {\\n        bytes32 position = pausedAtPosition;\\n\\n        assembly{\\n            time:=sload(position)\\n        }\\n    }    \\n\\n    function _setPausedAt() internal{\\n         bytes32 current = bytes32(block.timestamp);\\n         bytes32 position = pausedAtPosition;\\n         assembly {\\n            sstore(position, current)\\n        } \\n    }\\n\\n    function _getDelayTime() internal view returns(uint256 time) {\\n        bytes32 position = delayTimePosition;\\n\\n        assembly{\\n            time:=sload(position)\\n        }\\n    }\\n    \\n    function _setDelayTime(uint256 delayInSecs) internal{\\n        require(delayInSecs >= 600, \\\"Please set it more than 10 mins\\\");\\n        require(delayInSecs <= 3600 * 24 * 7 , \\\"Please set it less than 1 week\\\");\\n        bytes32 position = delayTimePosition;\\n        assembly {\\n            sstore(position, delayInSecs)\\n        }\\n        emit SetDelayTime(delayInSecs);\\n    }\\n\\n}\"\r\n    },\r\n    \"/contracts/BridgeBank/EthBank.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: UNLICENSED\\r\\n\\r\\npragma solidity ^0.8.0;\\r\\n\\r\\nimport \\\"./BridgeToken.sol\\\";\\r\\nimport \\\"../../node_modules/@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol\\\";\\r\\n\\r\\n/*\\r\\n *  @title: EvrnetBank\\r\\n *  @dev: Eth bank which locks ETH/ERC20/ERC721 token deposits, and unlocks\\r\\n *        ETH/ERC20/ERC721 tokens once the prophecy has been successfully processed.\\r\\n */\\r\\ncontract EthBank {\\r\\n    using SafeERC20 for BridgeToken;\\r\\n\\r\\n    uint256 public lockBurnNonce;\\r\\n    struct RefundData {\\r\\n        bool isRefunded;\\r\\n        uint256 nonce;\\r\\n        address sender;\\r\\n        address tokenAddress;\\r\\n        uint256 amount;\\r\\n    }\\r\\n    struct UnlockData {\\r\\n        bool isUnlocked;\\r\\n        address operator;\\r\\n        address recipient;\\r\\n        address tokenAddress;\\r\\n        uint256 amount;\\r\\n    }\\r\\n    // Mapping and check if the refunds transaction is completed\\r\\n    mapping(uint256 => RefundData) internal refundCompleted;\\r\\n    // Mapping and check if the unlock transaction is completed\\r\\n    mapping(bytes32 => UnlockData) internal unlockCompleted;\\r\\n\\r\\n    // For erc20\\r\\n    /*\\r\\n     * @dev: Event declarations\\r\\n     */\\r\\n    event LogLock(\\r\\n        address _from,\\r\\n        address _to,\\r\\n        address _token,\\r\\n        string _symbol,\\r\\n        uint256 _value,\\r\\n        uint256 _nonce,\\r\\n        string _chainName\\r\\n    );\\r\\n\\r\\n    event LogUnlock(\\r\\n        address _to,\\r\\n        address _token,\\r\\n        string _symbol,\\r\\n        uint256 _value,\\r\\n        bytes32 _interchainTX\\r\\n    );\\r\\n\\r\\n    event LogRefund(\\r\\n        address _to,\\r\\n        address _token,\\r\\n        string _symbol,\\r\\n        uint256 _value,\\r\\n        uint256 _nonce\\r\\n    );\\r\\n\\r\\n    /*\\r\\n     * @dev: Modifier declarations\\r\\n     */\\r\\n\\r\\n    modifier availableNonce() {\\r\\n        require(lockBurnNonce + 1 > lockBurnNonce, \\\"No available nonces.\\\");\\r\\n        _;\\r\\n    }\\r\\n    /*\\r\\n     * @dev: Gets the amount of locked/funded tokens by address.\\r\\n     *\\r\\n     * @param _symbol: The asset's symbol.\\r\\n     */\\r\\n    function getLockedFunds(address _token) public view returns (uint256) {\\r\\n\\r\\n        if (_token == address(0)) {\\r\\n            return address(this).balance;\\r\\n        }\\r\\n        return BridgeToken(_token).balanceOf(address(this));\\r\\n    }\\r\\n\\r\\n    /*\\r\\n     * @dev: Creates a new Evrynet deposit with a unique id.\\r\\n     *\\r\\n     * @param _sender: The sender's ethereum address.\\r\\n     * @param _recipient: The intended recipient's evrnet address.\\r\\n     * @param _token: The currency type, either erc20 or ethereum.\\r\\n     * @param _amount: The amount of erc20 tokens/ ethereum (in wei) to be itemized.\\r\\n     */\\r\\n    function lockFunds(\\r\\n        address payable _sender,\\r\\n        address _recipient,\\r\\n        address _token,\\r\\n        string memory _symbol,\\r\\n        uint256 _amount,\\r\\n        string memory _chainName\\r\\n    ) internal {\\r\\n        lockBurnNonce++;\\r\\n\\r\\n        refundCompleted[lockBurnNonce] = RefundData(\\r\\n            false,\\r\\n            lockBurnNonce,\\r\\n            _sender,\\r\\n            _token,\\r\\n            _amount\\r\\n        );\\r\\n\\r\\n        emit LogLock(\\r\\n            _sender,\\r\\n            _recipient,\\r\\n            _token,\\r\\n            _symbol,\\r\\n            _amount,\\r\\n            lockBurnNonce,\\r\\n            _chainName\\r\\n        );\\r\\n    }\\r\\n    /*\\r\\n     * @dev: Unlocks funds held on contract and sends them to the\\r\\n     *       intended recipient\\r\\n     *\\r\\n     * @param _recipient: recipient's Evrynet address\\r\\n     * @param _token: token contract address\\r\\n     * @param _symbol: token symbol\\r\\n     * @param _amount: wei amount or ERC20 token count\\r\\n     */\\r\\n    function unlockFunds(\\r\\n        address payable _recipient,\\r\\n        address _token,\\r\\n        string memory _symbol,\\r\\n        uint256 _amount,\\r\\n        bytes32 _interchainTX\\r\\n    ) internal {\\r\\n        // Transfer funds to intended recipient\\r\\n        if (_token == address(0)) {\\r\\n            _recipient.transfer(_amount);\\r\\n        } else {\\r\\n            BridgeToken(_token).safeTransfer(_recipient, _amount);\\r\\n        }\\r\\n        unlockCompleted[_interchainTX] = UnlockData(\\r\\n            true,\\r\\n            address(this),\\r\\n            _recipient,\\r\\n            _token,\\r\\n            _amount\\r\\n        );\\r\\n\\r\\n        emit LogUnlock(_recipient, _token, _symbol, _amount, _interchainTX);\\r\\n    }\\r\\n\\r\\n    /*\\r\\n     * @dev: Unlocks funds held on contract and sends them to the\\r\\n     *       intended recipient\\r\\n     *\\r\\n     * @param _recipient: recipient's Evrynet address\\r\\n     * @param _token: token contract address\\r\\n     * @param _symbol: token symbol\\r\\n     * @param _amount: wei amount or ERC20 token count\\r\\n     */\\r\\n    function refunds(\\r\\n        address payable _recipient,\\r\\n        address _tokenAddress,\\r\\n        string memory _symbol,\\r\\n        uint256 _amount,\\r\\n        uint256 _nonce\\r\\n    ) internal {\\r\\n        // Transfer funds to intended recipient\\r\\n        if (_tokenAddress == address(0)) {\\r\\n            _recipient.transfer(_amount);\\r\\n        } else {\\r\\n            BridgeToken(_tokenAddress).safeTransfer(_recipient, _amount);\\r\\n        }\\r\\n        refundCompleted[_nonce].isRefunded = true;\\r\\n        emit LogRefund(_recipient, _tokenAddress, _symbol, _amount, _nonce);\\r\\n\\r\\n    }   \\r\\n}\\r\\n\"\r\n    },\r\n    \"/contracts/BridgeBank/BridgeToken.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: UNLICENSED\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../../node_modules/@openzeppelin/contracts/token/ERC20/ERC20.sol\\\";\\n\\nabstract contract BridgeToken is ERC20 {\\n}\\n\"\r\n    },\r\n    \"/contracts/BridgeBank/BridgeBankPausable.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: UNLICENSED\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../../node_modules/@openzeppelin/contracts/utils/Context.sol\\\";\\n\\n/**\\n * @dev Contract module which allows children to implement an emergency stop\\n * mechanism that can be triggered by an authorized account.\\n *\\n * This module is used through inheritance. It will make available the\\n * modifiers `whenNotPaused` and `whenPaused`, which can be applied to\\n * the functions of your contract. Note that they will not be pausable by\\n * simply including this module, only once the modifiers are put in place.\\n */\\nabstract contract BridgeBankPausable is Context {\\n    /**\\n     * @dev Emitted when the pause is triggered by `account`.\\n     */\\n    event Paused(address account);\\n\\n    /**\\n     * @dev Emitted when the pause is lifted by `account`.\\n     */\\n    event Unpaused(address account);\\n\\n    bool internal _paused;\\n\\n    /**\\n     * @dev Returns true if the contract is paused, and false otherwise.\\n     */\\n    function paused() public view virtual returns (bool) {\\n        return _paused;\\n    }\\n\\n    /**\\n     * @dev Modifier to make a function callable only when the contract is not paused.\\n     *\\n     * Requirements:\\n     *\\n     * - The contract must not be paused.\\n     */\\n    modifier whenNotPaused() {\\n        require(!paused(), \\\"BridgeBank is paused\\\");\\n        _;\\n    }\\n\\n    /**\\n     * @dev Modifier to make a function callable only when the contract is paused.\\n     *\\n     * Requirements:\\n     *\\n     * - The contract must be paused.\\n     */\\n    modifier whenPaused() {\\n        require(paused(), \\\"BridgeBank is not paused\\\");\\n        _;\\n    }\\n\\n    /**\\n     * @dev Triggers stopped state.\\n     *\\n     * Requirements:\\n     *\\n     * - The contract must not be paused.\\n     */\\n    function _pause() internal virtual whenNotPaused {\\n        _paused = true;\\n        emit Paused(_msgSender());\\n    }\\n\\n    /**\\n     * @dev Returns to normal state.\\n     *\\n     * Requirements:\\n     *\\n     * - The contract must be paused.\\n     */\\n    function _unpause() internal virtual whenPaused {\\n        _paused = false;\\n        emit Unpaused(_msgSender());\\n    }\\n}\\n\"\r\n    }\r\n  },\r\n  \"settings\": {\r\n    \"remappings\": [],\r\n    \"optimizer\": {\r\n      \"enabled\": false,\r\n      \"runs\": 200\r\n    },\r\n    \"evmVersion\": \"istanbul\",\r\n    \"libraries\": {},\r\n    \"outputSelection\": {\r\n      \"*\": {\r\n        \"*\": [\r\n          \"evm.bytecode\",\r\n          \"evm.deployedBytecode\",\r\n          \"devdoc\",\r\n          \"userdoc\",\r\n          \"metadata\",\r\n          \"abi\"\r\n        ]\r\n      }\r\n    }\r\n  }\r\n}}","ABI":"[{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"_from\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"_to\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"_token\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"string\",\"name\":\"_symbol\",\"type\":\"string\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"_value\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"_nonce\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"string\",\"name\":\"_chainName\",\"type\":\"string\"}],\"name\":\"LogLock\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"_to\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"_token\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"string\",\"name\":\"_symbol\",\"type\":\"string\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"_value\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"_nonce\",\"type\":\"uint256\"}],\"name\":\"LogRefund\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"_to\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"_token\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"string\",\"name\":\"_symbol\",\"type\":\"string\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"_value\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"bytes32\",\"name\":\"_interchainTX\",\"type\":\"bytes32\"}],\"name\":\"LogUnlock\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"Paused\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"delayTime\",\"type\":\"uint256\"}],\"name\":\"SetDelayTime\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"Unpaused\",\"type\":\"event\"},{\"stateMutability\":\"payable\",\"type\":\"fallback\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_newOperator\",\"type\":\"address\"}],\"name\":\"changeOperator\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_id\",\"type\":\"uint256\"}],\"name\":\"checkIsRefunded\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"_interchainTX\",\"type\":\"bytes32\"}],\"name\":\"checkIsUnlocked\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"tokenAddress\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"emergencyWithdraw\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getDelayTime\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_token\",\"type\":\"address\"}],\"name\":\"getLockedFunds\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getOnwer\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getPausedAt\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_operatorAddress\",\"type\":\"address\"}],\"name\":\"initialize\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_recipient\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_token\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"},{\"internalType\":\"string\",\"name\":\"_chainName\",\"type\":\"string\"}],\"name\":\"lock\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"lockBurnNonce\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"operator\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"pause\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"paused\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address payable\",\"name\":\"_recipient\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_tokenAddress\",\"type\":\"address\"},{\"internalType\":\"string\",\"name\":\"_symbol\",\"type\":\"string\"},{\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_nonce\",\"type\":\"uint256\"}],\"name\":\"refund\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"delayInSecs\",\"type\":\"uint256\"}],\"name\":\"setEmergencyWithdrawDelayTime\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address payable\",\"name\":\"_recipient\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"tokenAddress\",\"type\":\"address\"},{\"internalType\":\"string\",\"name\":\"_symbol\",\"type\":\"string\"},{\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"},{\"internalType\":\"bytes32\",\"name\":\"_interchainTX\",\"type\":\"bytes32\"}],\"name\":\"unlock\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"unpause\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}]","ContractName":"BridgeBank","CompilerVersion":"v0.8.0+commit.c7dfd78e","OptimizationUsed":"0","Runs":"200","ConstructorArguments":"","EVMVersion":"Default","Library":"","LicenseType":"","Proxy":"0","Implementation":"","SwarmSource":""}]}