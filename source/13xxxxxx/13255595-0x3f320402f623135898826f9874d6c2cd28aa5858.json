{"status":"1","message":"OK","result":[{"SourceCode":"// SPDX-License-Identifier: MIT\r\npragma solidity ^0.8.7;\r\n\r\n/*      \r\n       /|  /|   \r\n   ___//__//__  \r\n  '--//--//---' \r\n ___//__//__    \r\n'--//--//---'   \r\n  |/  |/        \r\n\r\nHashGlyphs\r\n100% on-chain and immutable artistic interpretations of keccak256 hashes, visualized through random walks.\r\n\r\nWebsite: https://hashglyphs.com/\r\nCreated by sol_dev\r\n\r\n*/\r\n\r\ninterface Receiver {\r\n\tfunction onERC721Received(address _operator, address _from, uint256 _tokenId, bytes calldata _data) external returns (bytes4);\r\n}\r\n\r\n\r\ncontract HashGlyphs {\r\n\r\n\tuint256 constant public MAX_NAME_LENGTH = 32;\r\n\tuint256 constant public MAX_SUPPLY = 2048;\r\n\tuint256 constant public MINT_COST = 0.05 ether;\r\n\tuint256 constant private DEPTH = 85;\r\n\tuint256 constant private GRID_TO_LINE = 20;\r\n\tuint256 constant private PADDING = 1;\r\n\tbytes3 constant private DEFAULT_BG_COLOR = bytes3(0x000000);\r\n\tbytes4 constant private DEFAULT_LINE_COLOR = bytes4(0xffffffff);\r\n\r\n\tstruct User {\r\n\t\tuint256 balance;\r\n\t\tmapping(uint256 => uint256) list;\r\n\t\tmapping(address => bool) approved;\r\n\t\tmapping(uint256 => uint256) indexOf;\r\n\t}\r\n\r\n\tstruct Token {\r\n\t\taddress owner;\r\n\t\taddress approved;\r\n\t\tbytes32 seed;\r\n\t\tbytes3 bgColor;\r\n\t\tbytes4 lineColor;\r\n\t\tstring name;\r\n\t}\r\n\r\n\tstruct Info {\r\n\t\tuint256 totalSupply;\r\n\t\tmapping(uint256 => Token) list;\r\n\t\tmapping(address => User) users;\r\n\t\taddress owner;\r\n\t}\r\n\tInfo private info;\r\n\r\n\tmapping(bytes4 => bool) public supportsInterface;\r\n\r\n\tstring constant private TABLE = 'ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/';\r\n\r\n\tevent Transfer(address indexed from, address indexed to, uint256 indexed tokenId);\r\n\tevent Approval(address indexed owner, address indexed approved, uint256 indexed tokenId);\r\n\tevent ApprovalForAll(address indexed owner, address indexed operator, bool approved);\r\n\r\n\tevent Mint(address indexed owner, uint256 indexed tokenId, bytes32 seed);\r\n\tevent RecolorBackground(address indexed owner, uint256 indexed tokenId, bytes3 color);\r\n\tevent RecolorLine(address indexed owner, uint256 indexed tokenId, bytes4 color);\r\n\tevent Rename(address indexed owner, uint256 indexed tokenId, string name);\r\n\r\n\r\n\tmodifier _onlyOwner() {\r\n\t\trequire(msg.sender == owner());\r\n\t\t_;\r\n\t}\r\n\r\n\tmodifier _onlyTokenOwner(uint256 _tokenId) {\r\n\t\trequire(msg.sender == ownerOf(_tokenId));\r\n\t\t_;\r\n\t}\r\n\r\n\r\n\tconstructor() {\r\n\t\tinfo.owner = msg.sender;\r\n\t\tsupportsInterface[0x01ffc9a7] = true; // ERC-165\r\n\t\tsupportsInterface[0x80ac58cd] = true; // ERC-721\r\n\t\tsupportsInterface[0x5b5e139f] = true; // Metadata\r\n\t\tsupportsInterface[0x780e9d63] = true; // Enumerable\r\n\r\n\t\tfor (uint256 i = 0; i < 10; i++) {\r\n\t\t\t_mint(DEFAULT_BG_COLOR, DEFAULT_LINE_COLOR);\r\n\t\t}\r\n\t}\r\n\r\n\tfunction setOwner(address _owner) external _onlyOwner {\r\n\t\tinfo.owner = _owner;\r\n\t}\r\n\r\n\tfunction ownerWithdraw() external _onlyOwner {\r\n\t\tuint256 _balance = address(this).balance;\r\n\t\trequire(_balance > 0);\r\n\t\tpayable(msg.sender).transfer(_balance);\r\n\t}\r\n\r\n\t\r\n\treceive() external payable {\r\n\t\tmintMany(msg.value / MINT_COST);\r\n\t}\r\n\t\r\n\tfunction mint() external payable {\r\n\t\tmintMany(1);\r\n\t}\r\n\r\n\tfunction mintMany(uint256 _tokens) public payable {\r\n\t\tmintManyWithColors(_tokens, DEFAULT_BG_COLOR, DEFAULT_LINE_COLOR);\r\n\t}\r\n\r\n\tfunction mintWithColors(bytes3 _bgColor, bytes4 _lineColor) public payable {\r\n\t\tmintManyWithColors(1, _bgColor, _lineColor);\r\n\t}\r\n\r\n\tfunction mintManyWithColors(uint256 _tokens, bytes3 _bgColor, bytes4 _lineColor) public payable {\r\n\t\trequire(_tokens > 0);\r\n\t\tuint256 _cost = _tokens * MINT_COST;\r\n\t\trequire(msg.value >= _cost);\r\n\t\tfor (uint256 i = 0; i < _tokens; i++) {\r\n\t\t\t_mint(_bgColor, _lineColor);\r\n\t\t}\r\n\t\tif (msg.value > _cost) {\r\n\t\t\tpayable(msg.sender).transfer(msg.value - _cost);\r\n\t\t}\r\n\t}\r\n\t\r\n\tfunction setBackgroundColor(uint256 _tokenId, bytes3 _color) external _onlyTokenOwner(_tokenId) {\r\n\t\tinfo.list[_tokenId].bgColor = _color;\r\n\t\temit RecolorBackground(msg.sender, _tokenId, _color);\r\n\t}\r\n\t\r\n\tfunction setLineColor(uint256 _tokenId, bytes4 _color) external _onlyTokenOwner(_tokenId) {\r\n\t\tinfo.list[_tokenId].lineColor = _color;\r\n\t\temit RecolorLine(msg.sender, _tokenId, _color);\r\n\t}\r\n\t\r\n\tfunction rename(uint256 _tokenId, string calldata _newName) external _onlyTokenOwner(_tokenId) {\r\n\t\trequire(bytes(_newName).length <= MAX_NAME_LENGTH);\r\n\t\tinfo.list[_tokenId].name = _newName;\r\n\t\temit Rename(msg.sender, _tokenId, _newName);\r\n\t}\r\n\t\r\n\tfunction approve(address _approved, uint256 _tokenId) external _onlyTokenOwner(_tokenId) {\r\n\t\tinfo.list[_tokenId].approved = _approved;\r\n\t\temit Approval(msg.sender, _approved, _tokenId);\r\n\t}\r\n\r\n\tfunction setApprovalForAll(address _operator, bool _approved) external {\r\n\t\tinfo.users[msg.sender].approved[_operator] = _approved;\r\n\t\temit ApprovalForAll(msg.sender, _operator, _approved);\r\n\t}\r\n\r\n\tfunction transferFrom(address _from, address _to, uint256 _tokenId) external {\r\n\t\t_transfer(_from, _to, _tokenId);\r\n\t}\r\n\r\n\tfunction safeTransferFrom(address _from, address _to, uint256 _tokenId) external {\r\n\t\tsafeTransferFrom(_from, _to, _tokenId, \"\");\r\n\t}\r\n\r\n\tfunction safeTransferFrom(address _from, address _to, uint256 _tokenId, bytes memory _data) public {\r\n\t\t_transfer(_from, _to, _tokenId);\r\n\t\tuint32 _size;\r\n\t\tassembly {\r\n\t\t\t_size := extcodesize(_to)\r\n\t\t}\r\n\t\tif (_size > 0) {\r\n\t\t\trequire(Receiver(_to).onERC721Received(msg.sender, _from, _tokenId, _data) == 0x150b7a02);\r\n\t\t}\r\n\t}\r\n\r\n\r\n\tfunction name() external pure returns (string memory) {\r\n\t\treturn \"HashGlyphs\";\r\n\t}\r\n\r\n\tfunction symbol() external pure returns (string memory) {\r\n\t\treturn \"#\";\r\n\t}\r\n\r\n\tfunction tokenURI(uint256 _tokenId) external view returns (string memory) {\r\n\t\tstring memory _json = string(abi.encodePacked('{\"name\":\"Glyph #', _uint2str(_tokenId), '\",\"description\":\"100% on-chain and immutable artistic interpretations of keccak256 hashes, visualized through random walks.\",'));\r\n\t\t_json = string(abi.encodePacked(_json, '\"image\":\"data:image/svg+xml;base64,', _encode(bytes(getSVG(_tokenId))), '\",\"attributes\":['));\r\n\t\t( , uint256 _width, uint256 _height, , , uint256 _streak, uint256 _turns, uint256 _overlaps) = getTokenSettings(_tokenId);\r\n\t\t_json = string(abi.encodePacked(_json, '{\"trait_type\":\"Width\",\"value\":', _uint2str(_width), '},'));\r\n\t\t_json = string(abi.encodePacked(_json, '{\"trait_type\":\"Height\",\"value\":', _uint2str(_height), '},'));\r\n\t\t_json = string(abi.encodePacked(_json, '{\"trait_type\":\"Streak\",\"value\":', _uint2str(_streak), '},'));\r\n\t\t_json = string(abi.encodePacked(_json, '{\"trait_type\":\"Turns\",\"value\":', _uint2str(_turns), '},'));\r\n\t\t_json = string(abi.encodePacked(_json, '{\"trait_type\":\"Overlaps\",\"value\":', _uint2str(_overlaps), '}]}'));\r\n\t\treturn string(abi.encodePacked(\"data:application/json;base64,\", _encode(bytes(_json))));\r\n\t}\r\n\r\n\tfunction owner() public view returns (address) {\r\n\t\treturn info.owner;\r\n\t}\r\n\r\n\tfunction totalSupply() public view returns (uint256) {\r\n\t\treturn info.totalSupply;\r\n\t}\r\n\r\n\tfunction balanceOf(address _owner) public view returns (uint256) {\r\n\t\treturn info.users[_owner].balance;\r\n\t}\r\n\r\n\tfunction ownerOf(uint256 _tokenId) public view returns (address) {\r\n\t\trequire(_tokenId < totalSupply());\r\n\t\treturn info.list[_tokenId].owner;\r\n\t}\r\n\r\n\tfunction getApproved(uint256 _tokenId) public view returns (address) {\r\n\t\trequire(_tokenId < totalSupply());\r\n\t\treturn info.list[_tokenId].approved;\r\n\t}\r\n\r\n\tfunction isApprovedForAll(address _owner, address _operator) public view returns (bool) {\r\n\t\treturn info.users[_owner].approved[_operator];\r\n\t}\r\n\r\n\tfunction getSeed(uint256 _tokenId) public view returns (bytes32) {\r\n\t\trequire(_tokenId < totalSupply());\r\n\t\treturn info.list[_tokenId].seed;\r\n\t}\r\n\r\n\tfunction getBackgroundColor(uint256 _tokenId) public view returns (bytes3) {\r\n\t\trequire(_tokenId < totalSupply());\r\n\t\treturn info.list[_tokenId].bgColor;\r\n\t}\r\n\r\n\tfunction getLineColor(uint256 _tokenId) public view returns (bytes4) {\r\n\t\trequire(_tokenId < totalSupply());\r\n\t\treturn info.list[_tokenId].lineColor;\r\n\t}\r\n\r\n\tfunction getName(uint256 _tokenId) public view returns (string memory) {\r\n\t\trequire(_tokenId < totalSupply());\r\n\t\treturn info.list[_tokenId].name;\r\n\t}\r\n\r\n\tfunction tokenByIndex(uint256 _index) public view returns (uint256) {\r\n\t\trequire(_index < totalSupply());\r\n\t\treturn _index;\r\n\t}\r\n\r\n\tfunction tokenOfOwnerByIndex(address _owner, uint256 _index) public view returns (uint256) {\r\n\t\trequire(_index < balanceOf(_owner));\r\n\t\treturn info.users[_owner].list[_index];\r\n\t}\r\n\r\n\tfunction getSVG(uint256 _tokenId) public view returns (string memory) {\r\n\t\treturn getSVGRaw(getSeed(_tokenId), getBackgroundColor(_tokenId), getLineColor(_tokenId));\r\n\t}\r\n\r\n\tfunction getSVGRaw(bytes32 _seed, bytes3 _bgColor, bytes4 _lineColor) public pure returns (string memory svg) {\r\n\t\t(int256[2][DEPTH + 1] memory _path, uint256 _width, uint256 _height, int256 _minX, int256 _minY, , , ) = getSettings(_seed);\r\n\t\tsvg = string(abi.encodePacked(\"<svg xmlns='http://www.w3.org/2000/svg' version='1.1' preserveAspectRatio='xMidYMid meet' viewBox='0 0 \", _uint2str((_width + 2 * PADDING) * GRID_TO_LINE), \" \", _uint2str((_height + 2 * PADDING) * GRID_TO_LINE), \"'>\"));\r\n\t\tsvg = string(abi.encodePacked(svg, \"<rect width='100%' height='100%' fill='\", _col2str(_bgColor), \"' /><g fill='none' stroke='\", _cola2str(_lineColor), \"' stroke-width='1' stroke-linecap='round'>\"));\r\n\t\tstring memory _svgPath = \"\";\r\n\t\tfor (uint256 i = 1; i < _path.length; i++) {\r\n\t\t\t_svgPath = string(abi.encodePacked(_svgPath, \"<path d='M\", _uint2str((PADDING + uint256(_path[i - 1][0] - _minX)) * GRID_TO_LINE), \" \", _uint2str((PADDING + uint256(_path[i - 1][1] - _minY)) * GRID_TO_LINE), \"L\", _uint2str((PADDING + uint256(_path[i][0] - _minX)) * GRID_TO_LINE), \" \", _uint2str((PADDING + uint256(_path[i][1] - _minY)) * GRID_TO_LINE), \"' />\"));\r\n\t\t}\r\n\t\tsvg = string(abi.encodePacked(svg, _svgPath, \"</g></svg>\"));\r\n\t}\r\n\r\n\tfunction getTokenSettings(uint256 _tokenId) public view returns (int256[2][DEPTH + 1] memory path, uint256 width, uint256 height, int256 minX, int256 minY, uint256 streak, uint256 turns, uint256 overlaps) {\r\n\t\t(path, width, height, minX, minY, streak, turns, overlaps) = getSettings(getSeed(_tokenId));\r\n\t}\r\n\r\n\tfunction getSettings(bytes32 _seed) public pure returns (int256[2][DEPTH + 1] memory path, uint256 width, uint256 height, int256 minX, int256 minY, uint256 streak, uint256 turns, uint256 overlaps) {\r\n\t\tuint256 n = uint256(keccak256(abi.encodePacked(\"HashGlyph:\", _seed)));\r\n\t\tint256[2][2] memory _minMax;\r\n\t\tuint256[3] memory _streak;\r\n\t\t_streak[0] = 8;\r\n\t\tuint256 _lastDir = 8;\r\n\t\tturns = 0;\r\n\t\toverlaps = 0;\r\n\t\tfor (uint256 i = 1; i <= DEPTH; i++) {\r\n\t\t\tuint256 _dir = n % 8;\r\n\t\t\tn /= 8;\r\n\t\t\tpath[i][0] = path[i - 1][0] + (_dir > 0 && _dir < 4 ? int256(1) : _dir > 4 ? -1 : int256(0));\r\n\t\t\tpath[i][1] = path[i - 1][1] + (_dir < 2 || _dir == 7 ? -1 : _dir > 2 && _dir < 6 ? int256(1) : int256(0));\r\n\r\n\t\t\t_minMax[0][0] = _min(_minMax[0][0], path[i][0]);\r\n\t\t\t_minMax[0][1] = _max(_minMax[0][1], path[i][0]);\r\n\t\t\t_minMax[1][0] = _min(_minMax[1][0], path[i][1]);\r\n\t\t\t_minMax[1][1] = _max(_minMax[1][1], path[i][1]);\r\n\r\n\t\t\tif (_streak[0] != _dir) {\r\n\t\t\t\t_streak[0] = _dir;\r\n\t\t\t\t_streak[2] = _max(_streak[2], _streak[1]);\r\n\t\t\t\t_streak[1] = 1;\r\n\t\t\t} else {\r\n\t\t\t\t_streak[1]++;\r\n\t\t\t}\r\n\r\n\t\t\tif (_dir != _lastDir && _dir != (_lastDir + 4) % 8) {\r\n\t\t\t\tturns++;\r\n\t\t\t}\r\n\t\t\t_lastDir = _dir;\r\n\r\n\t\t\tfor (uint256 j = 1; j < i; j++) {\r\n\t\t\t\tif ((path[i][0] == path[j][0] && path[i - 1][0] == path[j - 1][0] && path[i][1] == path[j][1] && path[i - 1][1] == path[j - 1][1]) || (path[i][0] == path[j - 1][0] && path[i - 1][0] == path[j][0] && path[i][1] == path[j - 1][1] && path[i - 1][1] == path[j][1])) {\r\n\t\t\t\t\toverlaps++;\r\n\t\t\t\t\tbreak;\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t}\r\n\t\tminX = _minMax[0][0];\r\n\t\tminY = _minMax[1][0];\r\n\t\twidth = uint256(_minMax[0][1] - minX);\r\n\t\theight = uint256(_minMax[1][1] - minY);\r\n\t\tstreak = _max(_streak[2], _streak[1]);\r\n\t}\r\n\r\n\tfunction getGlyph(uint256 _tokenId) public view returns (address tokenOwner, address approved, bytes32 seed, bytes3 bgColor, bytes4 lineColor, string memory tokenName) {\r\n\t\treturn (ownerOf(_tokenId), getApproved(_tokenId), getSeed(_tokenId), getBackgroundColor(_tokenId), getLineColor(_tokenId), getName(_tokenId));\r\n\t}\r\n\r\n\tfunction getGlyphs(uint256[] memory _tokenIds) public view returns (address[] memory owners, address[] memory approveds, bytes32[] memory seeds, bytes3[] memory bgColors, bytes4[] memory lineColors, bytes32[] memory names) {\r\n\t\tuint256 _length = _tokenIds.length;\r\n\t\towners = new address[](_length);\r\n\t\tapproveds = new address[](_length);\r\n\t\tseeds = new bytes32[](_length);\r\n\t\tbgColors = new bytes3[](_length);\r\n\t\tlineColors = new bytes4[](_length);\r\n\t\tnames = new bytes32[](_length);\r\n\t\tfor (uint256 i = 0; i < _length; i++) {\r\n\t\t\tstring memory _name;\r\n\t\t\t(owners[i], approveds[i], seeds[i], bgColors[i], lineColors[i], _name) = getGlyph(_tokenIds[i]);\r\n\t\t\tnames[i] = _str2b32(_name);\r\n\t\t}\r\n\t}\r\n\r\n\tfunction getGlyphsTable(uint256 _limit, uint256 _page, bool _isAsc) public view returns (uint256[] memory tokenIds, address[] memory owners, address[] memory approveds, bytes32[] memory seeds, bytes3[] memory bgColors, bytes4[] memory lineColors, bytes32[] memory names, uint256 totalGlyphs, uint256 totalPages) {\r\n\t\trequire(_limit > 0);\r\n\t\ttotalGlyphs = totalSupply();\r\n\r\n\t\tif (totalGlyphs > 0) {\r\n\t\t\ttotalPages = (totalGlyphs / _limit) + (totalGlyphs % _limit == 0 ? 0 : 1);\r\n\t\t\trequire(_page < totalPages);\r\n\r\n\t\t\tuint256 _offset = _limit * _page;\r\n\t\t\tif (_page == totalPages - 1 && totalGlyphs % _limit != 0) {\r\n\t\t\t\t_limit = totalGlyphs % _limit;\r\n\t\t\t}\r\n\r\n\t\t\ttokenIds = new uint256[](_limit);\r\n\t\t\tfor (uint256 i = 0; i < _limit; i++) {\r\n\t\t\t\ttokenIds[i] = tokenByIndex(_isAsc ? _offset + i : totalGlyphs - _offset - i - 1);\r\n\t\t\t}\r\n\t\t} else {\r\n\t\t\ttotalPages = 0;\r\n\t\t\ttokenIds = new uint256[](0);\r\n\t\t}\r\n\t\t(owners, approveds, seeds, bgColors, lineColors, names) = getGlyphs(tokenIds);\r\n\t}\r\n\r\n\tfunction getOwnerGlyphsTable(address _owner, uint256 _limit, uint256 _page, bool _isAsc) public view returns (uint256[] memory tokenIds, address[] memory approveds, bytes32[] memory seeds, bytes3[] memory bgColors, bytes4[] memory lineColors, bytes32[] memory names, uint256 totalGlyphs, uint256 totalPages) {\r\n\t\trequire(_limit > 0);\r\n\t\ttotalGlyphs = balanceOf(_owner);\r\n\r\n\t\tif (totalGlyphs > 0) {\r\n\t\t\ttotalPages = (totalGlyphs / _limit) + (totalGlyphs % _limit == 0 ? 0 : 1);\r\n\t\t\trequire(_page < totalPages);\r\n\r\n\t\t\tuint256 _offset = _limit * _page;\r\n\t\t\tif (_page == totalPages - 1 && totalGlyphs % _limit != 0) {\r\n\t\t\t\t_limit = totalGlyphs % _limit;\r\n\t\t\t}\r\n\r\n\t\t\ttokenIds = new uint256[](_limit);\r\n\t\t\tfor (uint256 i = 0; i < _limit; i++) {\r\n\t\t\t\ttokenIds[i] = tokenOfOwnerByIndex(_owner, _isAsc ? _offset + i : totalGlyphs - _offset - i - 1);\r\n\t\t\t}\r\n\t\t} else {\r\n\t\t\ttotalPages = 0;\r\n\t\t\ttokenIds = new uint256[](0);\r\n\t\t}\r\n\t\t( , approveds, seeds, bgColors, lineColors, names) = getGlyphs(tokenIds);\r\n\t}\r\n\r\n\tfunction allInfoFor(address _owner) external view returns (uint256 supply, uint256 ownerBalance) {\r\n\t\treturn (totalSupply(), balanceOf(_owner));\r\n\t}\r\n\r\n\r\n\tfunction _mint(bytes3 _bgColor, bytes4 _lineColor) internal {\r\n\t\trequire(msg.sender == tx.origin);\r\n\t\trequire(totalSupply() < MAX_SUPPLY);\r\n\t\tuint256 _tokenId = info.totalSupply++;\r\n\t\tToken storage _newToken = info.list[_tokenId];\r\n\t\t_newToken.owner = msg.sender;\r\n\t\tbytes32 _seed = keccak256(abi.encodePacked(_tokenId, msg.sender, blockhash(block.number - 1), gasleft()));\r\n\t\t_newToken.seed = _seed;\r\n\t\t_newToken.bgColor = _bgColor;\r\n\t\t_newToken.lineColor = _lineColor;\r\n\t\tuint256 _index = info.users[msg.sender].balance++;\r\n\t\tinfo.users[msg.sender].indexOf[_tokenId] = _index + 1;\r\n\t\tinfo.users[msg.sender].list[_index] = _tokenId;\r\n\t\temit Transfer(address(0x0), msg.sender, _tokenId);\r\n\t\temit Mint(msg.sender, _tokenId, _seed);\r\n\t}\r\n\t\r\n\tfunction _transfer(address _from, address _to, uint256 _tokenId) internal {\r\n\t\taddress _owner = ownerOf(_tokenId);\r\n\t\taddress _approved = getApproved(_tokenId);\r\n\t\trequire(_from == _owner);\r\n\t\trequire(msg.sender == _owner || msg.sender == _approved || isApprovedForAll(_owner, msg.sender));\r\n\r\n\t\tinfo.list[_tokenId].owner = _to;\r\n\t\tif (_approved != address(0x0)) {\r\n\t\t\tinfo.list[_tokenId].approved = address(0x0);\r\n\t\t\temit Approval(address(0x0), address(0x0), _tokenId);\r\n\t\t}\r\n\r\n\t\tuint256 _index = info.users[_from].indexOf[_tokenId] - 1;\r\n\t\tuint256 _moved = info.users[_from].list[info.users[_from].balance - 1];\r\n\t\tinfo.users[_from].list[_index] = _moved;\r\n\t\tinfo.users[_from].indexOf[_moved] = _index + 1;\r\n\t\tinfo.users[_from].balance--;\r\n\t\tdelete info.users[_from].indexOf[_tokenId];\r\n\t\tuint256 _newIndex = info.users[_to].balance++;\r\n\t\tinfo.users[_to].indexOf[_tokenId] = _newIndex + 1;\r\n\t\tinfo.users[_to].list[_newIndex] = _tokenId;\r\n\t\temit Transfer(_from, _to, _tokenId);\r\n\t}\r\n\r\n\r\n\tfunction _str2b32(string memory _in) internal pure returns (bytes32 out) {\r\n\t\tif (bytes(_in).length == 0) {\r\n\t\t\treturn 0x0;\r\n\t\t}\r\n\t\tassembly {\r\n\t\t\tout := mload(add(_in, 32))\r\n\t\t}\r\n\t}\r\n\t\r\n\tfunction _uint2str(uint256 _value) internal pure returns (string memory) {\r\n\t\tuint256 _digits = 1;\r\n\t\tuint256 _n = _value;\r\n\t\twhile (_n > 9) {\r\n\t\t\t_n /= 10;\r\n\t\t\t_digits++;\r\n\t\t}\r\n\t\tbytes memory _out = new bytes(_digits);\r\n\t\tfor (uint256 i = 0; i < _out.length; i++) {\r\n\t\t\tuint256 _dec = (_value / (10**(_out.length - i - 1))) % 10;\r\n\t\t\t_out[i] = bytes1(uint8(_dec) + 48);\r\n\t\t}\r\n\t\treturn string(_out);\r\n\t}\r\n\r\n\tfunction _col2str(bytes3 _color) internal pure returns (string memory) {\r\n\t\tbytes memory _out = new bytes(7);\r\n\t\tfor (uint256 i = 0; i < _out.length; i++) {\r\n\t\t\tif (i == 0) {\r\n\t\t\t\t_out[i] = bytes1(uint8(35));\r\n\t\t\t} else {\r\n\t\t\t\tuint8 _hex = uint8(uint24(_color >> (4 * (_out.length - i - 1))) & 15);\r\n\t\t\t\t_out[i] = bytes1(_hex + (_hex > 9 ? 87 : 48));\r\n\t\t\t}\r\n\t\t}\r\n\t\treturn string(_out);\r\n\t}\r\n\r\n\tfunction _cola2str(bytes4 _color) internal pure returns (string memory) {\r\n\t\tbytes memory _out = new bytes(9);\r\n\t\tfor (uint256 i = 0; i < _out.length; i++) {\r\n\t\t\tif (i == 0) {\r\n\t\t\t\t_out[i] = bytes1(uint8(35));\r\n\t\t\t} else {\r\n\t\t\t\tuint8 _hex = uint8(uint32(_color >> (4 * (_out.length - i - 1))) & 15);\r\n\t\t\t\t_out[i] = bytes1(_hex + (_hex > 9 ? 87 : 48));\r\n\t\t\t}\r\n\t\t}\r\n\t\treturn string(_out);\r\n\t}\r\n\r\n\tfunction _sqrt(uint256 _n) internal pure returns (uint256 result) {\r\n\t\tuint256 _tmp = (_n + 1) / 2;\r\n\t\tresult = _n;\r\n\t\twhile (_tmp < result) {\r\n\t\t\tresult = _tmp;\r\n\t\t\t_tmp = (_n / _tmp + _tmp) / 2;\r\n\t\t}\r\n\t}\r\n\r\n\tfunction _encode(bytes memory _data) internal pure returns (string memory result) {\r\n\t\tif (_data.length == 0) return '';\r\n\t\tstring memory _table = TABLE;\r\n\t\tuint256 _encodedLen = 4 * ((_data.length + 2) / 3);\r\n\t\tresult = new string(_encodedLen + 32);\r\n\r\n\t\tassembly {\r\n\t\t\tmstore(result, _encodedLen)\r\n\t\t\tlet tablePtr := add(_table, 1)\r\n\t\t\tlet dataPtr := _data\r\n\t\t\tlet endPtr := add(dataPtr, mload(_data))\r\n\t\t\tlet resultPtr := add(result, 32)\r\n\r\n\t\t\tfor {} lt(dataPtr, endPtr) {}\r\n\t\t\t{\r\n\t\t\t\tdataPtr := add(dataPtr, 3)\r\n\t\t\t\tlet input := mload(dataPtr)\r\n\t\t\t\tmstore(resultPtr, shl(248, mload(add(tablePtr, and(shr(18, input), 0x3F)))))\r\n\t\t\t\tresultPtr := add(resultPtr, 1)\r\n\t\t\t\tmstore(resultPtr, shl(248, mload(add(tablePtr, and(shr(12, input), 0x3F)))))\r\n\t\t\t\tresultPtr := add(resultPtr, 1)\r\n\t\t\t\tmstore(resultPtr, shl(248, mload(add(tablePtr, and(shr( 6, input), 0x3F)))))\r\n\t\t\t\tresultPtr := add(resultPtr, 1)\r\n\t\t\t\tmstore(resultPtr, shl(248, mload(add(tablePtr, and(        input,  0x3F)))))\r\n\t\t\t\tresultPtr := add(resultPtr, 1)\r\n\t\t\t}\r\n\t\t\tswitch mod(mload(_data), 3)\r\n\t\t\tcase 1 { mstore(sub(resultPtr, 2), shl(240, 0x3d3d)) }\r\n\t\t\tcase 2 { mstore(sub(resultPtr, 1), shl(248, 0x3d)) }\r\n\t\t}\r\n\t\treturn result;\r\n\t}\r\n\r\n\tfunction _min(int256 a, int256 b) internal pure returns (int256) {\r\n\t\treturn a < b ? a : b;\r\n\t}\r\n\r\n\tfunction _max(int256 a, int256 b) internal pure returns (int256) {\r\n\t\treturn a > b ? a : b;\r\n\t}\r\n\r\n\tfunction _max(uint256 a, uint256 b) internal pure returns (uint256) {\r\n\t\treturn a > b ? a : b;\r\n\t}\r\n}","ABI":"[{\"inputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"approved\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"Approval\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"operator\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"bool\",\"name\":\"approved\",\"type\":\"bool\"}],\"name\":\"ApprovalForAll\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"bytes32\",\"name\":\"seed\",\"type\":\"bytes32\"}],\"name\":\"Mint\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"bytes3\",\"name\":\"color\",\"type\":\"bytes3\"}],\"name\":\"RecolorBackground\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"bytes4\",\"name\":\"color\",\"type\":\"bytes4\"}],\"name\":\"RecolorLine\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"string\",\"name\":\"name\",\"type\":\"string\"}],\"name\":\"Rename\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"Transfer\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"MAX_NAME_LENGTH\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"MAX_SUPPLY\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"MINT_COST\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_owner\",\"type\":\"address\"}],\"name\":\"allInfoFor\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"supply\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"ownerBalance\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_approved\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_tokenId\",\"type\":\"uint256\"}],\"name\":\"approve\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_owner\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_tokenId\",\"type\":\"uint256\"}],\"name\":\"getApproved\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_tokenId\",\"type\":\"uint256\"}],\"name\":\"getBackgroundColor\",\"outputs\":[{\"internalType\":\"bytes3\",\"name\":\"\",\"type\":\"bytes3\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_tokenId\",\"type\":\"uint256\"}],\"name\":\"getGlyph\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"tokenOwner\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"approved\",\"type\":\"address\"},{\"internalType\":\"bytes32\",\"name\":\"seed\",\"type\":\"bytes32\"},{\"internalType\":\"bytes3\",\"name\":\"bgColor\",\"type\":\"bytes3\"},{\"internalType\":\"bytes4\",\"name\":\"lineColor\",\"type\":\"bytes4\"},{\"internalType\":\"string\",\"name\":\"tokenName\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256[]\",\"name\":\"_tokenIds\",\"type\":\"uint256[]\"}],\"name\":\"getGlyphs\",\"outputs\":[{\"internalType\":\"address[]\",\"name\":\"owners\",\"type\":\"address[]\"},{\"internalType\":\"address[]\",\"name\":\"approveds\",\"type\":\"address[]\"},{\"internalType\":\"bytes32[]\",\"name\":\"seeds\",\"type\":\"bytes32[]\"},{\"internalType\":\"bytes3[]\",\"name\":\"bgColors\",\"type\":\"bytes3[]\"},{\"internalType\":\"bytes4[]\",\"name\":\"lineColors\",\"type\":\"bytes4[]\"},{\"internalType\":\"bytes32[]\",\"name\":\"names\",\"type\":\"bytes32[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_limit\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_page\",\"type\":\"uint256\"},{\"internalType\":\"bool\",\"name\":\"_isAsc\",\"type\":\"bool\"}],\"name\":\"getGlyphsTable\",\"outputs\":[{\"internalType\":\"uint256[]\",\"name\":\"tokenIds\",\"type\":\"uint256[]\"},{\"internalType\":\"address[]\",\"name\":\"owners\",\"type\":\"address[]\"},{\"internalType\":\"address[]\",\"name\":\"approveds\",\"type\":\"address[]\"},{\"internalType\":\"bytes32[]\",\"name\":\"seeds\",\"type\":\"bytes32[]\"},{\"internalType\":\"bytes3[]\",\"name\":\"bgColors\",\"type\":\"bytes3[]\"},{\"internalType\":\"bytes4[]\",\"name\":\"lineColors\",\"type\":\"bytes4[]\"},{\"internalType\":\"bytes32[]\",\"name\":\"names\",\"type\":\"bytes32[]\"},{\"internalType\":\"uint256\",\"name\":\"totalGlyphs\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"totalPages\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_tokenId\",\"type\":\"uint256\"}],\"name\":\"getLineColor\",\"outputs\":[{\"internalType\":\"bytes4\",\"name\":\"\",\"type\":\"bytes4\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_tokenId\",\"type\":\"uint256\"}],\"name\":\"getName\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_owner\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_limit\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_page\",\"type\":\"uint256\"},{\"internalType\":\"bool\",\"name\":\"_isAsc\",\"type\":\"bool\"}],\"name\":\"getOwnerGlyphsTable\",\"outputs\":[{\"internalType\":\"uint256[]\",\"name\":\"tokenIds\",\"type\":\"uint256[]\"},{\"internalType\":\"address[]\",\"name\":\"approveds\",\"type\":\"address[]\"},{\"internalType\":\"bytes32[]\",\"name\":\"seeds\",\"type\":\"bytes32[]\"},{\"internalType\":\"bytes3[]\",\"name\":\"bgColors\",\"type\":\"bytes3[]\"},{\"internalType\":\"bytes4[]\",\"name\":\"lineColors\",\"type\":\"bytes4[]\"},{\"internalType\":\"bytes32[]\",\"name\":\"names\",\"type\":\"bytes32[]\"},{\"internalType\":\"uint256\",\"name\":\"totalGlyphs\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"totalPages\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_tokenId\",\"type\":\"uint256\"}],\"name\":\"getSVG\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"_seed\",\"type\":\"bytes32\"},{\"internalType\":\"bytes3\",\"name\":\"_bgColor\",\"type\":\"bytes3\"},{\"internalType\":\"bytes4\",\"name\":\"_lineColor\",\"type\":\"bytes4\"}],\"name\":\"getSVGRaw\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"svg\",\"type\":\"string\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_tokenId\",\"type\":\"uint256\"}],\"name\":\"getSeed\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"_seed\",\"type\":\"bytes32\"}],\"name\":\"getSettings\",\"outputs\":[{\"internalType\":\"int256[2][86]\",\"name\":\"path\",\"type\":\"int256[2][86]\"},{\"internalType\":\"uint256\",\"name\":\"width\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"height\",\"type\":\"uint256\"},{\"internalType\":\"int256\",\"name\":\"minX\",\"type\":\"int256\"},{\"internalType\":\"int256\",\"name\":\"minY\",\"type\":\"int256\"},{\"internalType\":\"uint256\",\"name\":\"streak\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"turns\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"overlaps\",\"type\":\"uint256\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_tokenId\",\"type\":\"uint256\"}],\"name\":\"getTokenSettings\",\"outputs\":[{\"internalType\":\"int256[2][86]\",\"name\":\"path\",\"type\":\"int256[2][86]\"},{\"internalType\":\"uint256\",\"name\":\"width\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"height\",\"type\":\"uint256\"},{\"internalType\":\"int256\",\"name\":\"minX\",\"type\":\"int256\"},{\"internalType\":\"int256\",\"name\":\"minY\",\"type\":\"int256\"},{\"internalType\":\"uint256\",\"name\":\"streak\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"turns\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"overlaps\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_owner\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_operator\",\"type\":\"address\"}],\"name\":\"isApprovedForAll\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"mint\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_tokens\",\"type\":\"uint256\"}],\"name\":\"mintMany\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_tokens\",\"type\":\"uint256\"},{\"internalType\":\"bytes3\",\"name\":\"_bgColor\",\"type\":\"bytes3\"},{\"internalType\":\"bytes4\",\"name\":\"_lineColor\",\"type\":\"bytes4\"}],\"name\":\"mintManyWithColors\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes3\",\"name\":\"_bgColor\",\"type\":\"bytes3\"},{\"internalType\":\"bytes4\",\"name\":\"_lineColor\",\"type\":\"bytes4\"}],\"name\":\"mintWithColors\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"name\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_tokenId\",\"type\":\"uint256\"}],\"name\":\"ownerOf\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"ownerWithdraw\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_tokenId\",\"type\":\"uint256\"},{\"internalType\":\"string\",\"name\":\"_newName\",\"type\":\"string\"}],\"name\":\"rename\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_from\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_tokenId\",\"type\":\"uint256\"}],\"name\":\"safeTransferFrom\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_from\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_tokenId\",\"type\":\"uint256\"},{\"internalType\":\"bytes\",\"name\":\"_data\",\"type\":\"bytes\"}],\"name\":\"safeTransferFrom\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_operator\",\"type\":\"address\"},{\"internalType\":\"bool\",\"name\":\"_approved\",\"type\":\"bool\"}],\"name\":\"setApprovalForAll\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_tokenId\",\"type\":\"uint256\"},{\"internalType\":\"bytes3\",\"name\":\"_color\",\"type\":\"bytes3\"}],\"name\":\"setBackgroundColor\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_tokenId\",\"type\":\"uint256\"},{\"internalType\":\"bytes4\",\"name\":\"_color\",\"type\":\"bytes4\"}],\"name\":\"setLineColor\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_owner\",\"type\":\"address\"}],\"name\":\"setOwner\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes4\",\"name\":\"\",\"type\":\"bytes4\"}],\"name\":\"supportsInterface\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"symbol\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_index\",\"type\":\"uint256\"}],\"name\":\"tokenByIndex\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_owner\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_index\",\"type\":\"uint256\"}],\"name\":\"tokenOfOwnerByIndex\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_tokenId\",\"type\":\"uint256\"}],\"name\":\"tokenURI\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalSupply\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_from\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_tokenId\",\"type\":\"uint256\"}],\"name\":\"transferFrom\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"stateMutability\":\"payable\",\"type\":\"receive\"}]","ContractName":"HashGlyphs","CompilerVersion":"v0.8.7+commit.e28d00a7","OptimizationUsed":"1","Runs":"200","ConstructorArguments":"","EVMVersion":"Default","Library":"","LicenseType":"MIT","Proxy":"0","Implementation":"","SwarmSource":"ipfs://af442806f358859ff5ae845d89aa2e0841fbfb466bfad3f043ea766640f375fb"}]}