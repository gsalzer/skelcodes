{"status":"1","message":"OK","result":[{"SourceCode":"{{\r\n  \"language\": \"Solidity\",\r\n  \"sources\": {\r\n    \"/Users/mudaseriqbal/Documents/Developer/Luner/nafter.contracts/src/active/NafterMarketAuction.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\r\\n\\r\\npragma solidity 0.8.0;\\r\\n\\r\\nimport \\\"@openzeppelin/contracts/token/ERC1155/IERC1155.sol\\\";\\r\\nimport \\\"@openzeppelin/contracts/utils/math/SafeMath.sol\\\";\\r\\nimport \\\"@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol\\\";\\r\\nimport \\\"@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol\\\";\\r\\nimport \\\"@openzeppelin/contracts-upgradeable/access/AccessControlUpgradeable.sol\\\";\\r\\nimport \\\"./INafterMarketAuction.sol\\\";\\r\\nimport \\\"./INafterRoyaltyRegistry.sol\\\";\\r\\nimport \\\"./IMarketplaceSettings.sol\\\";\\r\\nimport \\\"./Payments.sol\\\";\\r\\nimport \\\"./INafter.sol\\\";\\r\\n\\r\\ncontract NafterMarketAuction is\\r\\n  Initializable,\\r\\n  OwnableUpgradeable,\\r\\n  AccessControlUpgradeable,\\r\\n  Payments,\\r\\n  INafterMarketAuction\\r\\n{\\r\\n  using SafeMath for uint256;\\r\\n  /////////////////////////////////////////////////////////////////////////\\r\\n  // Structs\\r\\n  /////////////////////////////////////////////////////////////////////////\\r\\n\\r\\n  // The active bid for a given token, contains the bidder, the marketplace fee at the time of the bid, and the amount of wei placed on the token\\r\\n  struct ActiveBid {\\r\\n    address payable bidder;\\r\\n    uint8 marketplaceFee;\\r\\n    uint256 amount;\\r\\n    uint8 paymentMode;\\r\\n  }\\r\\n\\r\\n  struct ActiveBidRange {\\r\\n    uint256 startTime;\\r\\n    uint256 endTime;\\r\\n  }\\r\\n\\r\\n  // The sale price for a given token containing the seller and the amount of wei to be sold for\\r\\n  struct SalePrice {\\r\\n    address payable seller;\\r\\n    uint256 amount;\\r\\n    uint8 paymentMode;\\r\\n  }\\r\\n\\r\\n  /////////////////////////////////////////////////////////////////////////\\r\\n  // State Variables\\r\\n  /////////////////////////////////////////////////////////////////////////\\r\\n\\r\\n  // Marketplace Settings Interface\\r\\n  IMarketplaceSettings public iMarketplaceSettings;\\r\\n\\r\\n  // Creator Royalty Interface\\r\\n  INafterRoyaltyRegistry public iERC1155CreatorRoyalty;\\r\\n\\r\\n  // Nafter contract\\r\\n  INafter public nafter;\\r\\n  //erc1155 contract\\r\\n  IERC1155 public erc1155;\\r\\n\\r\\n  // Mapping from ERC1155 contract to mapping of tokenId to sale price.\\r\\n  mapping(uint256 => mapping(address => SalePrice)) private salePrice;\\r\\n  // Mapping of ERC1155 contract to mapping of token ID to the current bid amount.\\r\\n  mapping(uint256 => mapping(address => ActiveBid)) private activeBid;\\r\\n  mapping(uint256 => mapping(address => ActiveBidRange)) private activeBidRange;\\r\\n\\r\\n  mapping(address => uint256) public bidBalance;\\r\\n  // A minimum increase in bid amount when out bidding someone.\\r\\n  uint8 public minimumBidIncreasePercentage; // 10 = 10%\\r\\n  uint8 public feeConfig;\\r\\n  mapping(address => uint256) public nafterBidBalance;\\r\\n  address public wallet;\\r\\n  /////////////////////////////////////////////////////////////////////////////\\r\\n  // Events\\r\\n  /////////////////////////////////////////////////////////////////////////////\\r\\n  event Sold(address indexed _buyer, address indexed _seller, uint256 _amount, uint256 _tokenId);\\r\\n\\r\\n  event Bid(address indexed _bidder, uint256 _amount, uint256 _tokenId);\\r\\n\\r\\n  event AcceptBid(\\r\\n    address indexed _bidder,\\r\\n    address indexed _seller,\\r\\n    uint256 _amount,\\r\\n    uint256 _tokenId,\\r\\n    uint8 _paymentMode\\r\\n  );\\r\\n\\r\\n  event CancelBid(address indexed _bidder, uint256 _amount, uint256 _tokenId);\\r\\n\\r\\n  /////////////////////////////////////////////////////////////////////////\\r\\n  // Constructor\\r\\n  /////////////////////////////////////////////////////////////////////////\\r\\n  /**\\r\\n   * @dev Initializes the contract setting the market settings and creator royalty interfaces.\\r\\n   * @param _iMarketSettings address to set as iMarketplaceSettings.\\r\\n   * @param _iERC1155CreatorRoyalty address to set as iERC1155CreatorRoyalty.\\r\\n   * @param _nafter address of the nafter contract\\r\\n   */\\r\\n  function __NafterMarketAuction_init(\\r\\n    address _iMarketSettings,\\r\\n    address _iERC1155CreatorRoyalty,\\r\\n    address _nafter,\\r\\n    address _nafterToken\\r\\n  ) public initializer {\\r\\n    __Ownable_init();\\r\\n    __PullPayment_init();\\r\\n    __AccessControl_init();\\r\\n    _setupRole(DEFAULT_ADMIN_ROLE, _msgSender());\\r\\n\\r\\n    // Set iMarketSettings\\r\\n    iMarketplaceSettings = IMarketplaceSettings(_iMarketSettings);\\r\\n\\r\\n    // Set iERC1155CreatorRoyalty\\r\\n    iERC1155CreatorRoyalty = INafterRoyaltyRegistry(_iERC1155CreatorRoyalty);\\r\\n\\r\\n    nafter = INafter(_nafter);\\r\\n    erc1155 = IERC1155(_nafter);\\r\\n    nafterToken = IERC20(_nafterToken);\\r\\n    minimumBidIncreasePercentage = 10;\\r\\n    feeConfig = 3;\\r\\n  }\\r\\n\\r\\n  receive() external payable {}\\r\\n\\r\\n  /**\\r\\n   * @dev set wallet address where funds will send\\r\\n   * @param _wallet address where funds will send\\r\\n   */\\r\\n  function setWallet(address _wallet) external onlyOwner {\\r\\n    wallet = _wallet;\\r\\n  }\\r\\n\\r\\n  /////////////////////////////////////////////////////////////////////////\\r\\n  // Get token sale price against token id\\r\\n  /////////////////////////////////////////////////////////////////////////\\r\\n  /**\\r\\n   * @dev get the token sale price against token id\\r\\n   * @param _tokenId uint256 ID of the token\\r\\n   * @param _owner address of the token owner\\r\\n   */\\r\\n  function getSalePrice(uint256 _tokenId, address _owner) external view returns (address payable, uint256) {\\r\\n    return (salePrice[_tokenId][_owner].seller, salePrice[_tokenId][_owner].amount);\\r\\n  }\\r\\n\\r\\n  /**\\r\\n   * @dev get the token sale price against token id\\r\\n   * @param _tokenId uint256 ID of the token\\r\\n   * @param _owner address of the token owner\\r\\n   */\\r\\n  function currentSalePrice(uint256 _tokenId, address _owner)\\r\\n    external\\r\\n    view\\r\\n    returns (\\r\\n      address payable,\\r\\n      uint256,\\r\\n      uint8\\r\\n    )\\r\\n  {\\r\\n    return (\\r\\n      salePrice[_tokenId][_owner].seller,\\r\\n      salePrice[_tokenId][_owner].amount,\\r\\n      salePrice[_tokenId][_owner].paymentMode\\r\\n    );\\r\\n  }\\r\\n\\r\\n  /////////////////////////////////////////////////////////////////////////\\r\\n  // get active bid against tokenId\\r\\n  /////////////////////////////////////////////////////////////////////////\\r\\n  /**\\r\\n   * @dev get active bid against token Id\\r\\n   * @param _tokenId uint256 ID of the token\\r\\n   * @param _owner address of the token owner\\r\\n   */\\r\\n  function getActiveBid(uint256 _tokenId, address _owner)\\r\\n    external\\r\\n    view\\r\\n    returns (\\r\\n      address payable,\\r\\n      uint8,\\r\\n      uint256\\r\\n    )\\r\\n  {\\r\\n    return (\\r\\n      activeBid[_tokenId][_owner].bidder,\\r\\n      activeBid[_tokenId][_owner].marketplaceFee,\\r\\n      activeBid[_tokenId][_owner].amount\\r\\n    );\\r\\n  }\\r\\n\\r\\n  /////////////////////////////////////////////////////////////////////////\\r\\n  // has active bid\\r\\n  /////////////////////////////////////////////////////////////////////////\\r\\n  /**\\r\\n   * @dev has active bid\\r\\n   * @param _tokenId uint256 ID of the token\\r\\n   * @param _owner address of the token owner\\r\\n   */\\r\\n  function hasTokenActiveBid(uint256 _tokenId, address _owner) external view override returns (bool) {\\r\\n    if (activeBid[_tokenId][_owner].bidder == _owner || activeBid[_tokenId][_owner].bidder == address(0)) return false;\\r\\n\\r\\n    return true;\\r\\n  }\\r\\n\\r\\n  /////////////////////////////////////////////////////////////////////////\\r\\n  // get active bid range against token id\\r\\n  /////////////////////////////////////////////////////////////////////////\\r\\n  /**\\r\\n   * @dev get active bid range against token id\\r\\n   * @param _tokenId uint256 ID of the token\\r\\n   */\\r\\n  function getActiveBidRange(uint256 _tokenId, address _owner) external view returns (uint256, uint256) {\\r\\n    return (activeBidRange[_tokenId][_owner].startTime, activeBidRange[_tokenId][_owner].endTime);\\r\\n  }\\r\\n\\r\\n  /////////////////////////////////////////////////////////////////////////\\r\\n  // withdrawMarketFunds\\r\\n  /////////////////////////////////////////////////////////////////////////\\r\\n  /**\\r\\n   * @dev Admin function to withdraw market funds\\r\\n   * Rules:\\r\\n   * - only owner\\r\\n   */\\r\\n  function withdrawMarketFunds() external onlyOwner {\\r\\n    payable(owner()).transfer(address(this).balance);\\r\\n  }\\r\\n\\r\\n  /////////////////////////////////////////////////////////////////////////\\r\\n  // seNafter\\r\\n  /////////////////////////////////////////////////////////////////////////\\r\\n  /**\\r\\n   * @dev Admin function to set the marketplace settings.\\r\\n   * Rules:\\r\\n   * - only owner\\r\\n   * - _address != address(0)\\r\\n   * @param _nafter address of the IMarketplaceSettings.\\r\\n   */\\r\\n  function setData(\\r\\n    address _nafter,\\r\\n    address _royalty,\\r\\n    address _token,\\r\\n    address _marketplaceSettings,\\r\\n    uint8 _percentage,\\r\\n    uint8 _feeConfig\\r\\n  ) public onlyOwner {\\r\\n    nafter = INafter(_nafter);\\r\\n    erc1155 = IERC1155(_nafter);\\r\\n    iERC1155CreatorRoyalty = INafterRoyaltyRegistry(_royalty);\\r\\n    nafterToken = IERC20(_token);\\r\\n    iMarketplaceSettings = IMarketplaceSettings(_marketplaceSettings);\\r\\n    minimumBidIncreasePercentage = _percentage;\\r\\n    feeConfig = _feeConfig;\\r\\n  }\\r\\n\\r\\n  /**\\r\\n   * @dev Checks that the token is owned by the sender\\r\\n   * @param _tokenId uint256 ID of the token\\r\\n   */\\r\\n  function senderMustBeTokenOwner(uint256 _tokenId) internal view {\\r\\n    require(\\r\\n      erc1155.balanceOf(msg.sender, _tokenId) > 0 ||\\r\\n        msg.sender == address(nafter) ||\\r\\n        hasRole(DEFAULT_ADMIN_ROLE, msg.sender),\\r\\n      \\\"owner\\\"\\r\\n    );\\r\\n  }\\r\\n\\r\\n  /////////////////////////////////////////////////////////////////////////\\r\\n  // setSalePrice\\r\\n  /////////////////////////////////////////////////////////////////////////\\r\\n  /**\\r\\n   * @dev Set the token for sale. The owner of the token must be the sender and have the marketplace approved.\\r\\n   * @param _tokenId uint256 ID of the token\\r\\n   * @param _amount uint256 wei value that the item is for sale\\r\\n   * @param _owner address of the token owner\\r\\n   * @param _paymentMode 0 for ETH/BNB, 1 for NAFT\\r\\n   */\\r\\n  function setSalePrice(\\r\\n    uint256 _tokenId,\\r\\n    uint256 _amount,\\r\\n    address _owner,\\r\\n    uint8 _paymentMode\\r\\n  ) external override {\\r\\n    // The sender must be the token owner\\r\\n    senderMustBeTokenOwner(_tokenId);\\r\\n\\r\\n    salePrice[_tokenId][_owner] = SalePrice(payable(_owner), _amount, _paymentMode);\\r\\n    nafter.setPrice(_amount, _tokenId, _owner);\\r\\n  }\\r\\n\\r\\n  /**\\r\\n   * @dev restore data from old contract, only call by owner\\r\\n   * @param _oldAddress address of old contract.\\r\\n   * @param _oldNafterAddress get the token ids from the old nafter contract.\\r\\n   * @param _startIndex start index of array\\r\\n   * @param _endIndex end index of array\\r\\n   */\\r\\n  function restore(\\r\\n    address _oldAddress,\\r\\n    address _oldNafterAddress,\\r\\n    uint256 _startIndex,\\r\\n    uint256 _endIndex\\r\\n  ) external onlyOwner {\\r\\n    NafterMarketAuction oldContract = NafterMarketAuction(payable(_oldAddress));\\r\\n    INafter oldNafterContract = INafter(_oldNafterAddress);\\r\\n\\r\\n    for (uint256 i = _startIndex; i < _endIndex; i++) {\\r\\n      uint256 tokenId = oldNafterContract.getTokenId(i);\\r\\n\\r\\n      address[] memory owners = oldNafterContract.getOwners(tokenId);\\r\\n      for (uint256 j = 0; j < owners.length; j++) {\\r\\n        address owner = owners[j];\\r\\n        (address payable sender, uint256 amount) = oldContract.getSalePrice(tokenId, owner);\\r\\n        salePrice[tokenId][owner] = SalePrice(sender, amount, 0);\\r\\n\\r\\n        (address payable bidder, uint8 marketplaceFee, uint256 bidAmount) = oldContract.getActiveBid(tokenId, owner);\\r\\n        activeBid[tokenId][owner] = ActiveBid(bidder, marketplaceFee, bidAmount, 0);\\r\\n        uint256 serviceFee = bidAmount.mul(marketplaceFee).div(100);\\r\\n        bidBalance[bidder] = bidBalance[bidder].add(bidAmount.add(serviceFee));\\r\\n\\r\\n        (uint256 startTime, uint256 endTime) = oldContract.getActiveBidRange(tokenId, owner);\\r\\n        activeBidRange[tokenId][owner] = ActiveBidRange(startTime, endTime);\\r\\n      }\\r\\n    }\\r\\n\\r\\n    minimumBidIncreasePercentage = oldContract.minimumBidIncreasePercentage();\\r\\n  }\\r\\n\\r\\n  /////////////////////////////////////////////////////////////////////////\\r\\n  // buy\\r\\n  /////////////////////////////////////////////////////////////////////////\\r\\n  /**\\r\\n   * @dev Purchases the token if it is for sale.\\r\\n   * @param _tokenId uint256 ID of the token.\\r\\n   * @param _owner address of the token owner\\r\\n   * @param _paymentMode 0 for ETH/BNB, 1 for NAFT\\r\\n   */\\r\\n  function buy(\\r\\n    uint256 _tokenId,\\r\\n    address _owner,\\r\\n    uint8 _paymentMode\\r\\n  ) public payable {\\r\\n    uint256 amount = tokenPriceFeeIncluded(_tokenId, _owner);\\r\\n    uint8 priceType = nafter.getPriceType(_tokenId, _owner);\\r\\n    require(priceType == 0, \\\"only fixed sale\\\");\\r\\n    require(nafter.getIsForSale(_tokenId, _owner) == true, \\\"not sale\\\");\\r\\n    SalePrice memory sp = salePrice[_tokenId][_owner];\\r\\n    require(sp.paymentMode == _paymentMode, \\\"wrong payment mode\\\");\\r\\n    // Check that enough ether was sent.\\r\\n    if (_paymentMode == 0) {\\r\\n      require(msg.value >= amount, \\\"no correct price\\\");\\r\\n    }\\r\\n\\r\\n    _transferNFT(_owner, msg.sender, _tokenId);\\r\\n\\r\\n    // if the buyer had an existing bid, return it\\r\\n    if (_addressHasBidOnToken(msg.sender, _tokenId, _owner)) {\\r\\n      _refundBid(_tokenId, _owner);\\r\\n    }\\r\\n\\r\\n    if (_paymentMode == 1) {\\r\\n      Payments.safeTransferFrom(msg.sender, address(this), sp.amount);\\r\\n    }\\r\\n    Payments.payout(\\r\\n      sp.amount,\\r\\n      !iMarketplaceSettings.hasTokenSold(_tokenId),\\r\\n      nafter.getServiceFee(_tokenId),\\r\\n      iERC1155CreatorRoyalty.getTokenRoyaltyPercentage(_tokenId),\\r\\n      iMarketplaceSettings.getERC1155ContractPrimarySaleFeePercentage(),\\r\\n      payable(_owner),\\r\\n      payable(wallet),\\r\\n      iERC1155CreatorRoyalty.tokenCreator(_tokenId),\\r\\n      _paymentMode,\\r\\n      feeConfig\\r\\n    );\\r\\n\\r\\n    // Set token as sold\\r\\n    iMarketplaceSettings.markERC1155Token(_tokenId, true);\\r\\n\\r\\n    //remove from sale after buy\\r\\n    if (erc1155.balanceOf(_owner, _tokenId) == 0) {\\r\\n      // Wipe the token price.\\r\\n      _resetTokenPrice(_tokenId, _owner);\\r\\n      nafter.removeFromSale(_tokenId, _owner);\\r\\n    }\\r\\n\\r\\n    emit Sold(msg.sender, _owner, sp.amount, _tokenId);\\r\\n  }\\r\\n\\r\\n  /////////////////////////////////////////////////////////////////////////\\r\\n  // tokenPrice\\r\\n  /////////////////////////////////////////////////////////////////////////\\r\\n  /**\\r\\n   * @dev Gets the sale price of the token\\r\\n   * @param _tokenId uint256 ID of the token\\r\\n   * @param _owner address of the token owner\\r\\n   * @return uint256 sale price of the token\\r\\n   */\\r\\n  function tokenPrice(uint256 _tokenId, address _owner) external view returns (uint256) {\\r\\n    return salePrice[_tokenId][_owner].amount;\\r\\n  }\\r\\n\\r\\n  /////////////////////////////////////////////////////////////////////////\\r\\n  // tokenPriceFeeIncluded\\r\\n  /////////////////////////////////////////////////////////////////////////\\r\\n  /**\\r\\n   * @dev Gets the sale price of the token including the marketplace fee.\\r\\n   * @param _tokenId uint256 ID of the token\\r\\n   * @param _owner address of the token owner\\r\\n   * @return uint256 sale price of the token including the fee.\\r\\n   */\\r\\n  function tokenPriceFeeIncluded(uint256 _tokenId, address _owner) public view returns (uint256) {\\r\\n    if (feeConfig == 2 || feeConfig == 3)\\r\\n      return\\r\\n        salePrice[_tokenId][_owner].amount.add(\\r\\n          salePrice[_tokenId][_owner].amount.mul(nafter.getServiceFee(_tokenId)).div(100)\\r\\n        );\\r\\n\\r\\n    return salePrice[_tokenId][_owner].amount;\\r\\n  }\\r\\n\\r\\n  /////////////////////////////////////////////////////////////////////////\\r\\n  // setInitialBidPriceWithRange\\r\\n  /////////////////////////////////////////////////////////////////////////\\r\\n  /**\\r\\n   * @dev set initial bid with range\\r\\n   * @param _bidAmount uint256 value in wei to bid.\\r\\n   * @param _startTime end time of bid\\r\\n   * @param _endTime end time of bid\\r\\n   * @param _owner address of the token owner\\r\\n   * @param _tokenId uint256 ID of the token\\r\\n   * @param _paymentMode 0 for ETH/BNB, 1 for NAFT\\r\\n   */\\r\\n  function setInitialBidPriceWithRange(\\r\\n    uint256 _bidAmount,\\r\\n    uint256 _startTime,\\r\\n    uint256 _endTime,\\r\\n    address _owner,\\r\\n    uint256 _tokenId,\\r\\n    uint8 _paymentMode\\r\\n  ) external override {\\r\\n    senderMustBeTokenOwner(_tokenId);\\r\\n\\r\\n    activeBid[_tokenId][_owner] = ActiveBid(payable(_owner), nafter.getServiceFee(_tokenId), _bidAmount, _paymentMode);\\r\\n    activeBidRange[_tokenId][_owner] = ActiveBidRange(_startTime, _endTime);\\r\\n  }\\r\\n\\r\\n  /////////////////////////////////////////////////////////////////////////\\r\\n  // bid\\r\\n  /////////////////////////////////////////////////////////////////////////\\r\\n  /**\\r\\n   * @dev Bids on the token, replacing the bid if the bid is higher than the current bid. You cannot bid on a token you already own.\\r\\n   * @param _newBidAmount uint256 value in wei to bid.\\r\\n   * @param _tokenId uint256 ID of the token\\r\\n   * @param _owner address of the token owner\\r\\n   * @param _paymentMode 0 for ETH/BNB, 1 for NAFT\\r\\n   */\\r\\n  function bid(\\r\\n    uint256 _newBidAmount,\\r\\n    uint256 _tokenId,\\r\\n    address _owner,\\r\\n    uint8 _paymentMode\\r\\n  ) external payable {\\r\\n    if (_paymentMode == 0) {\\r\\n      uint256 amount = feeConfig == 2 || feeConfig == 3\\r\\n        ? _newBidAmount.add(_newBidAmount.mul(nafter.getServiceFee(_tokenId)).div(100))\\r\\n        : _newBidAmount;\\r\\n      require(msg.value >= amount, \\\"no correct price\\\");\\r\\n    }\\r\\n    require(nafter.getIsForSale(_tokenId, _owner) == true, \\\"not for sale\\\");\\r\\n    //Check bid range\\r\\n    uint8 priceType = nafter.getPriceType(_tokenId, _owner);\\r\\n\\r\\n    require(priceType == 1 || priceType == 2, \\\"no fixed sale\\\");\\r\\n    if (priceType == 1)\\r\\n      require(\\r\\n        activeBidRange[_tokenId][_owner].startTime < block.timestamp &&\\r\\n          activeBidRange[_tokenId][_owner].endTime > block.timestamp,\\r\\n        \\\"cant place bid\\\"\\r\\n      );\\r\\n\\r\\n    uint256 currentBidAmount = activeBid[_tokenId][_owner].amount;\\r\\n    require(\\r\\n      _newBidAmount >= currentBidAmount.add(currentBidAmount.mul(minimumBidIncreasePercentage).div(100)),\\r\\n      \\\"high minimum percentage\\\"\\r\\n    );\\r\\n    require(activeBid[_tokenId][_owner].paymentMode == _paymentMode, \\\"wrong payment\\\");\\r\\n\\r\\n    // Refund previous bidder.\\r\\n    _refundBid(_tokenId, _owner);\\r\\n    //transfer naft tokens to contracts\\r\\n    if (_paymentMode == 1) {\\r\\n      Payments.safeTransferFrom(msg.sender, address(this), _newBidAmount);\\r\\n    }\\r\\n    // Set the new bid.\\r\\n    _setBid(_newBidAmount, payable(msg.sender), _tokenId, _owner, _paymentMode);\\r\\n    nafter.setBid(_newBidAmount, msg.sender, _tokenId, _owner);\\r\\n    emit Bid(msg.sender, _newBidAmount, _tokenId);\\r\\n  }\\r\\n\\r\\n  /**\\r\\n   * @dev Auto approve and transfer. Default send 1 per time\\r\\n   * @param _fr address from\\r\\n   * @param _to address receiver\\r\\n   * @param _id uint256 ID of the token\\r\\n   */\\r\\n  function _transferNFT(\\r\\n    address _fr,\\r\\n    address _to,\\r\\n    uint _id\\r\\n  ) private {\\r\\n    nafter.setApprovalForAllByNMA(_fr, address(this), true);\\r\\n    erc1155.safeTransferFrom(_fr, _to, _id, 1, \\\"\\\");\\r\\n  }\\r\\n\\r\\n  /////////////////////////////////////////////////////////////////////////\\r\\n  // acceptBid\\r\\n  /////////////////////////////////////////////////////////////////////////\\r\\n  /**\\r\\n   * @dev Accept the bid on the token.\\r\\n   * @param _tokenId uint256 ID of the token\\r\\n   * @param _owner address of the token owner\\r\\n   */\\r\\n  function acceptBid(uint256 _tokenId, address _owner) public {\\r\\n    // The sender must be the token owner\\r\\n    senderMustBeTokenOwner(_tokenId);\\r\\n\\r\\n    // Check that a bid exists.\\r\\n    require(activeBid[_tokenId][_owner].bidder != address(0), \\\"no bid\\\");\\r\\n\\r\\n    // Get current bid on token\\r\\n\\r\\n    ActiveBid memory currentBid = activeBid[_tokenId][_owner];\\r\\n\\r\\n    // Transfer token.\\r\\n    _transferNFT(_owner, currentBid.bidder, _tokenId);\\r\\n\\r\\n    Payments.payout(\\r\\n      currentBid.amount,\\r\\n      !iMarketplaceSettings.hasTokenSold(_tokenId),\\r\\n      nafter.getServiceFee(_tokenId),\\r\\n      iERC1155CreatorRoyalty.getTokenRoyaltyPercentage(_tokenId),\\r\\n      iMarketplaceSettings.getERC1155ContractPrimarySaleFeePercentage(),\\r\\n      payable(_owner),\\r\\n      payable(wallet),\\r\\n      iERC1155CreatorRoyalty.tokenCreator(_tokenId),\\r\\n      currentBid.paymentMode,\\r\\n      feeConfig\\r\\n    );\\r\\n\\r\\n    iMarketplaceSettings.markERC1155Token(_tokenId, true);\\r\\n    if (currentBid.paymentMode == 0) {\\r\\n      uint256 serviceFee = feeConfig == 2 || feeConfig == 3\\r\\n        ? currentBid.amount.mul(currentBid.marketplaceFee).div(100)\\r\\n        : 0;\\r\\n      bidBalance[currentBid.bidder] = bidBalance[currentBid.bidder].sub(currentBid.amount.add(serviceFee));\\r\\n    } else {\\r\\n      nafterBidBalance[currentBid.bidder] = nafterBidBalance[currentBid.bidder].sub(currentBid.amount);\\r\\n    }\\r\\n    uint8 paymentMode = currentBid.paymentMode;\\r\\n    if (erc1155.balanceOf(_owner, _tokenId) == 0) {\\r\\n      _resetTokenPrice(_tokenId, _owner);\\r\\n      _resetBid(_tokenId, _owner);\\r\\n\\r\\n      //remove from sale after accepting the bid\\r\\n      nafter.removeFromSale(_tokenId, _owner);\\r\\n    } else {\\r\\n      activeBid[_tokenId][_owner].bidder = payable(address(0));\\r\\n    }\\r\\n    // Wipe the token price and bid.\\r\\n    emit AcceptBid(currentBid.bidder, msg.sender, currentBid.amount, _tokenId, paymentMode);\\r\\n  }\\r\\n\\r\\n  /**\\r\\n   * @dev lazy mintng to bid\\r\\n   * @param _tokenAmount total token amount available\\r\\n   * @param _price price of the token, 0 is for not set the price.\\r\\n   * @param _priceType 0 is for fixed, 1 is for Auction Time bound, 2 is for Auction Infinite\\r\\n   * @param _royaltyPercentage royalty percentage of creator\\r\\n   * @param _startTime start time of bid, pass 0 of _priceType is not 1\\r\\n   * @param _endTime end time of bid, pass 0 of _priceType is not 1\\r\\n   * @param _tokenId uint256 token id\\r\\n   * @param _signature data signature to return account information\\r\\n   * @param _paymentMode 0 for ETH/BNB, 1 for NAFT\\r\\n   * @param _signature data signature to return account information\\r\\n   * @param _creator address of the creator of the token.\\r\\n   * @param _newBidAmount new Bid Amount including\\r\\n   */\\r\\n  function lazyMintingBid(\\r\\n    uint256 _tokenAmount,\\r\\n    uint256 _price,\\r\\n    uint8 _priceType,\\r\\n    uint8 _royaltyPercentage,\\r\\n    uint256 _startTime,\\r\\n    uint256 _endTime,\\r\\n    uint256 _tokenId,\\r\\n    uint8 _paymentMode,\\r\\n    bytes calldata _signature,\\r\\n    address _creator,\\r\\n    uint256 _newBidAmount\\r\\n  ) external payable {\\r\\n    require(_priceType == 1 || _priceType == 2, \\\"no fixed sale\\\");\\r\\n    if (_priceType == 1) require(_startTime < block.timestamp && _endTime > block.timestamp, \\\"cant place bid\\\");\\r\\n    require(_newBidAmount >= _price.add(_price.mul(minimumBidIncreasePercentage).div(100)), \\\"high minimum percentage\\\");\\r\\n    nafter.verify(\\r\\n      _creator,\\r\\n      _tokenAmount,\\r\\n      true,\\r\\n      _price,\\r\\n      _priceType, //price type is 0\\r\\n      _royaltyPercentage,\\r\\n      _startTime,\\r\\n      _endTime,\\r\\n      _tokenId,\\r\\n      _paymentMode,\\r\\n      _signature\\r\\n    );\\r\\n\\r\\n    nafter.addNewTokenAndSetThePriceWithIdAndMinter(\\r\\n      _tokenAmount,\\r\\n      true,\\r\\n      _price,\\r\\n      _priceType,\\r\\n      _royaltyPercentage,\\r\\n      _tokenId,\\r\\n      _creator,\\r\\n      _creator\\r\\n    );\\r\\n\\r\\n    // uint8 serviceFee = nafter.getServiceFee(_tokenId);\\r\\n    if (_paymentMode == 0) {\\r\\n      uint256 amount = feeConfig == 2 || feeConfig == 3\\r\\n        ? _newBidAmount.add(_newBidAmount.mul(nafter.getServiceFee(_tokenId)).div(100))\\r\\n        : _newBidAmount;\\r\\n      require(msg.value >= amount, \\\"wrong amount\\\");\\r\\n    }\\r\\n\\r\\n    _setBid(_newBidAmount, payable(msg.sender), _tokenId, _creator, _paymentMode);\\r\\n    activeBidRange[_tokenId][_creator] = ActiveBidRange(_startTime, _endTime);\\r\\n\\r\\n    nafter.setBid(_price, msg.sender, _tokenId, _creator);\\r\\n\\r\\n    if (_paymentMode == 1) {\\r\\n      Payments.safeTransferFrom(msg.sender, address(this), _newBidAmount);\\r\\n    }\\r\\n  }\\r\\n\\r\\n  /**\\r\\n   * @dev lazy mintng to buy\\r\\n   * @param _creator address of the creator of the token.\\r\\n   * @param _tokenAmount total token amount available\\r\\n   * @param _isForSale if is for sale\\r\\n   * @param _price price of the token, 0 is for not set the price.\\r\\n   * @param _royaltyPercentage royalty percentage of creator\\r\\n   * @param _tokenId uint256 token id\\r\\n   * @param _paymentMode 0 for ETH/BNB, 1 for NAFT\\r\\n   */\\r\\n  function lazyMintingBuy(\\r\\n    uint256 _tokenAmount,\\r\\n    bool _isForSale,\\r\\n    uint256 _price,\\r\\n    uint8 _royaltyPercentage,\\r\\n    uint256 _tokenId,\\r\\n    uint8 _paymentMode,\\r\\n    bytes calldata _signature,\\r\\n    address _creator\\r\\n  ) external payable {\\r\\n    nafter.verify(\\r\\n      _creator,\\r\\n      _tokenAmount,\\r\\n      _isForSale,\\r\\n      _price,\\r\\n      0, //price type is 0\\r\\n      _royaltyPercentage,\\r\\n      0,\\r\\n      0,\\r\\n      _tokenId,\\r\\n      _paymentMode,\\r\\n      _signature\\r\\n    );\\r\\n    // in case of by, mint token on buyer\\r\\n    //direct token transfer\\r\\n    nafter.addNewTokenAndSetThePriceWithIdAndMinter(\\r\\n      _tokenAmount,\\r\\n      _isForSale,\\r\\n      _price,\\r\\n      0,\\r\\n      _royaltyPercentage,\\r\\n      _tokenId,\\r\\n      _creator,\\r\\n      _creator\\r\\n    );\\r\\n    salePrice[_tokenId][_creator] = SalePrice(payable(_creator), _price, _paymentMode);\\r\\n    nafter.setPrice(_price, _tokenId, _creator);\\r\\n\\r\\n    if (_paymentMode == 0) {\\r\\n      uint256 amount = feeConfig == 2 || feeConfig == 3 ? tokenPriceFeeIncluded(_tokenId, _creator) : _price;\\r\\n      require(msg.value >= amount, \\\"no correct price\\\");\\r\\n    }\\r\\n\\r\\n    _transferNFT(_creator, msg.sender, _tokenId);\\r\\n\\r\\n    if (_paymentMode == 1) {\\r\\n      Payments.safeTransferFrom(msg.sender, address(this), _price);\\r\\n    }\\r\\n    Payments.payout(\\r\\n      _price,\\r\\n      !iMarketplaceSettings.hasTokenSold(_tokenId),\\r\\n      nafter.getServiceFee(_tokenId),\\r\\n      iERC1155CreatorRoyalty.getTokenRoyaltyPercentage(_tokenId),\\r\\n      iMarketplaceSettings.getERC1155ContractPrimarySaleFeePercentage(),\\r\\n      payable(_creator),\\r\\n      payable(wallet),\\r\\n      iERC1155CreatorRoyalty.tokenCreator(_tokenId),\\r\\n      _paymentMode,\\r\\n      feeConfig\\r\\n    );\\r\\n    //remove from sale after buy\\r\\n    if (erc1155.balanceOf(_creator, _tokenId) == 0) {\\r\\n      // Wipe the token price.\\r\\n      _resetTokenPrice(_tokenId, _creator);\\r\\n      nafter.removeFromSale(_tokenId, _creator);\\r\\n    }\\r\\n  }\\r\\n\\r\\n  /////////////////////////////////////////////////////////////////////////\\r\\n  // cancelBid\\r\\n  /////////////////////////////////////////////////////////////////////////\\r\\n  /**\\r\\n   * @dev Cancel the bid on the token.\\r\\n   * @param _tokenId uint256 ID of the token.\\r\\n   * @param _owner address of the token owner\\r\\n   */\\r\\n  function cancelBid(uint256 _tokenId, address _owner) external {\\r\\n    // Check that sender has a current bid.\\r\\n    require(_addressHasBidOnToken(msg.sender, _tokenId, _owner), \\\"cant cancel\\\");\\r\\n\\r\\n    _refundBid(_tokenId, _owner);\\r\\n\\r\\n    emit CancelBid(msg.sender, activeBid[_tokenId][_owner].amount, _tokenId);\\r\\n  }\\r\\n\\r\\n  /////////////////////////////////////////////////////////////////////////\\r\\n  // currentBidDetailsOfToken\\r\\n  /////////////////////////////////////////////////////////////////////////\\r\\n  /**\\r\\n   * @dev Function to get current bid and bidder of a token.\\r\\n   * @param _tokenId uin256 id of the token.\\r\\n   * @param _owner address of the token owner\\r\\n   */\\r\\n  function currentBidDetailsOfToken(uint256 _tokenId, address _owner)\\r\\n    public\\r\\n    view\\r\\n    returns (\\r\\n      uint256,\\r\\n      address,\\r\\n      uint8\\r\\n    )\\r\\n  {\\r\\n    return (\\r\\n      activeBid[_tokenId][_owner].amount,\\r\\n      activeBid[_tokenId][_owner].bidder,\\r\\n      activeBid[_tokenId][_owner].paymentMode\\r\\n    );\\r\\n  }\\r\\n\\r\\n  /////////////////////////////////////////////////////////////////////////\\r\\n  // _resetTokenPrice\\r\\n  /////////////////////////////////////////////////////////////////////////\\r\\n  /**\\r\\n   * @dev Internal function to set token price to 0 for a given contract.\\r\\n   * @param _tokenId uin256 id of the token.\\r\\n   * @param _owner address of the token owner\\r\\n   */\\r\\n  function _resetTokenPrice(uint256 _tokenId, address _owner) internal {\\r\\n    salePrice[_tokenId][_owner] = SalePrice(payable(address(0)), 0, 0);\\r\\n  }\\r\\n\\r\\n  /////////////////////////////////////////////////////////////////////////\\r\\n  // _addressHasBidOnToken\\r\\n  /////////////////////////////////////////////////////////////////////////\\r\\n  /**\\r\\n   * @dev Internal function see if the given address has an existing bid on a token.\\r\\n   * @param _bidder address that may have a current bid.\\r\\n   * @param _tokenId uin256 id of the token.\\r\\n   * @param _owner address of the token owner\\r\\n   */\\r\\n  function _addressHasBidOnToken(\\r\\n    address _bidder,\\r\\n    uint256 _tokenId,\\r\\n    address _owner\\r\\n  ) internal view returns (bool) {\\r\\n    return activeBid[_tokenId][_owner].bidder == _bidder;\\r\\n  }\\r\\n\\r\\n  /////////////////////////////////////////////////////////////////////////\\r\\n  // _refundBid\\r\\n  /////////////////////////////////////////////////////////////////////////\\r\\n  /**\\r\\n   * @dev Internal function to return an existing bid on a token to the\\r\\n   *      bidder and reset bid.\\r\\n   * @param _tokenId uin256 id of the token.\\r\\n   * @param _owner address of the token owner\\r\\n   */\\r\\n  function _refundBid(uint256 _tokenId, address _owner) internal {\\r\\n    ActiveBid memory currentBid = activeBid[_tokenId][_owner];\\r\\n    if (currentBid.bidder == address(0) || currentBid.bidder == _owner) {\\r\\n      return;\\r\\n    }\\r\\n    //current bidder should not be owner\\r\\n    if (currentBid.paymentMode == 0) {\\r\\n      if (bidBalance[currentBid.bidder] > 0) {\\r\\n        Payments.refund(currentBid.marketplaceFee, currentBid.bidder, currentBid.amount);\\r\\n        //subtract bid balance\\r\\n        uint256 serviceFee = feeConfig == 2 || feeConfig == 3\\r\\n          ? currentBid.amount.mul(currentBid.marketplaceFee).div(100)\\r\\n          : currentBid.amount;\\r\\n\\r\\n        bidBalance[currentBid.bidder] = bidBalance[currentBid.bidder].sub(currentBid.amount.add(serviceFee));\\r\\n      }\\r\\n    } else {\\r\\n      if (nafterBidBalance[currentBid.bidder] > 0) {\\r\\n        Payments.safeTransfer(currentBid.bidder, currentBid.amount);\\r\\n        nafterBidBalance[currentBid.bidder] = nafterBidBalance[currentBid.bidder].sub(currentBid.amount);\\r\\n      }\\r\\n    }\\r\\n    _resetBid(_tokenId, _owner);\\r\\n  }\\r\\n\\r\\n  /////////////////////////////////////////////////////////////////////////\\r\\n  // _resetBid\\r\\n  /////////////////////////////////////////////////////////////////////////\\r\\n  /**\\r\\n   * @dev Internal function to reset bid by setting bidder and bid to 0.\\r\\n   * @param _tokenId uin256 id of the token.\\r\\n   * @param _owner address of the token owner\\r\\n   */\\r\\n  function _resetBid(uint256 _tokenId, address _owner) internal {\\r\\n    activeBid[_tokenId][_owner] = ActiveBid(payable(address(0)), 0, 0, 0);\\r\\n  }\\r\\n\\r\\n  /////////////////////////////////////////////////////////////////////////\\r\\n  // _setBid\\r\\n  /////////////////////////////////////////////////////////////////////////\\r\\n  /**\\r\\n   * @dev Internal function to set a bid.\\r\\n   * @param _amount uint256 value in wei to bid. Does not include marketplace fee.\\r\\n   * @param _bidder address of the bidder.\\r\\n   * @param _tokenId uin256 id of the token.\\r\\n   * @param _owner address of the token owner\\r\\n   * @param _paymentMode 0 for ETH/BNB, 1 for NAFT\\r\\n   */\\r\\n  function _setBid(\\r\\n    uint256 _amount,\\r\\n    address payable _bidder,\\r\\n    uint256 _tokenId,\\r\\n    address _owner,\\r\\n    uint8 _paymentMode\\r\\n  ) internal {\\r\\n    // Check bidder not 0 address.\\r\\n    require(_bidder != address(0), \\\"no 0 address\\\");\\r\\n\\r\\n    // Set bid.\\r\\n    activeBid[_tokenId][_owner] = ActiveBid(_bidder, nafter.getServiceFee(_tokenId), _amount, _paymentMode);\\r\\n    //add bid balance\\r\\n    if (_paymentMode == 0) {\\r\\n      bidBalance[_bidder] = feeConfig == 2 || feeConfig == 3\\r\\n        ? bidBalance[_bidder].add(_amount.add(_amount.mul(nafter.getServiceFee(_tokenId)).div(100)))\\r\\n        : bidBalance[_bidder].add(_amount);\\r\\n    } else {\\r\\n      nafterBidBalance[_bidder] = nafterBidBalance[_bidder].add(_amount);\\r\\n    }\\r\\n  }\\r\\n}\\r\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/utils/math/SafeMath.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\n// CAUTION\\n// This version of SafeMath should only be used with Solidity 0.8 or later,\\n// because it relies on the compiler's built in overflow checks.\\n\\n/**\\n * @dev Wrappers over Solidity's arithmetic operations.\\n *\\n * NOTE: `SafeMath` is no longer needed starting with Solidity 0.8. The compiler\\n * now has built in overflow checking.\\n */\\nlibrary SafeMath {\\n    /**\\n     * @dev Returns the addition of two unsigned integers, with an overflow flag.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function tryAdd(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        unchecked {\\n            uint256 c = a + b;\\n            if (c < a) return (false, 0);\\n            return (true, c);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the substraction of two unsigned integers, with an overflow flag.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function trySub(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        unchecked {\\n            if (b > a) return (false, 0);\\n            return (true, a - b);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the multiplication of two unsigned integers, with an overflow flag.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function tryMul(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        unchecked {\\n            // Gas optimization: this is cheaper than requiring 'a' not being zero, but the\\n            // benefit is lost if 'b' is also tested.\\n            // See: https://github.com/OpenZeppelin/openzeppelin-contracts/pull/522\\n            if (a == 0) return (true, 0);\\n            uint256 c = a * b;\\n            if (c / a != b) return (false, 0);\\n            return (true, c);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the division of two unsigned integers, with a division by zero flag.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function tryDiv(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        unchecked {\\n            if (b == 0) return (false, 0);\\n            return (true, a / b);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the remainder of dividing two unsigned integers, with a division by zero flag.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function tryMod(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        unchecked {\\n            if (b == 0) return (false, 0);\\n            return (true, a % b);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the addition of two unsigned integers, reverting on\\n     * overflow.\\n     *\\n     * Counterpart to Solidity's `+` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Addition cannot overflow.\\n     */\\n    function add(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a + b;\\n    }\\n\\n    /**\\n     * @dev Returns the subtraction of two unsigned integers, reverting on\\n     * overflow (when the result is negative).\\n     *\\n     * Counterpart to Solidity's `-` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Subtraction cannot overflow.\\n     */\\n    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a - b;\\n    }\\n\\n    /**\\n     * @dev Returns the multiplication of two unsigned integers, reverting on\\n     * overflow.\\n     *\\n     * Counterpart to Solidity's `*` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Multiplication cannot overflow.\\n     */\\n    function mul(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a * b;\\n    }\\n\\n    /**\\n     * @dev Returns the integer division of two unsigned integers, reverting on\\n     * division by zero. The result is rounded towards zero.\\n     *\\n     * Counterpart to Solidity's `/` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - The divisor cannot be zero.\\n     */\\n    function div(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a / b;\\n    }\\n\\n    /**\\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\\n     * reverting when dividing by zero.\\n     *\\n     * Counterpart to Solidity's `%` operator. This function uses a `revert`\\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\\n     * invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Requirements:\\n     *\\n     * - The divisor cannot be zero.\\n     */\\n    function mod(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a % b;\\n    }\\n\\n    /**\\n     * @dev Returns the subtraction of two unsigned integers, reverting with custom message on\\n     * overflow (when the result is negative).\\n     *\\n     * CAUTION: This function is deprecated because it requires allocating memory for the error\\n     * message unnecessarily. For custom revert reasons use {trySub}.\\n     *\\n     * Counterpart to Solidity's `-` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Subtraction cannot overflow.\\n     */\\n    function sub(\\n        uint256 a,\\n        uint256 b,\\n        string memory errorMessage\\n    ) internal pure returns (uint256) {\\n        unchecked {\\n            require(b <= a, errorMessage);\\n            return a - b;\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the integer division of two unsigned integers, reverting with custom message on\\n     * division by zero. The result is rounded towards zero.\\n     *\\n     * Counterpart to Solidity's `/` operator. Note: this function uses a\\n     * `revert` opcode (which leaves remaining gas untouched) while Solidity\\n     * uses an invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Requirements:\\n     *\\n     * - The divisor cannot be zero.\\n     */\\n    function div(\\n        uint256 a,\\n        uint256 b,\\n        string memory errorMessage\\n    ) internal pure returns (uint256) {\\n        unchecked {\\n            require(b > 0, errorMessage);\\n            return a / b;\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\\n     * reverting with custom message when dividing by zero.\\n     *\\n     * CAUTION: This function is deprecated because it requires allocating memory for the error\\n     * message unnecessarily. For custom revert reasons use {tryMod}.\\n     *\\n     * Counterpart to Solidity's `%` operator. This function uses a `revert`\\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\\n     * invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Requirements:\\n     *\\n     * - The divisor cannot be zero.\\n     */\\n    function mod(\\n        uint256 a,\\n        uint256 b,\\n        string memory errorMessage\\n    ) internal pure returns (uint256) {\\n        unchecked {\\n            require(b > 0, errorMessage);\\n            return a % b;\\n        }\\n    }\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/utils/introspection/IERC165.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC165 standard, as defined in the\\n * https://eips.ethereum.org/EIPS/eip-165[EIP].\\n *\\n * Implementers can declare support of contract interfaces, which can then be\\n * queried by others ({ERC165Checker}).\\n *\\n * For an implementation, see {ERC165}.\\n */\\ninterface IERC165 {\\n    /**\\n     * @dev Returns true if this contract implements the interface defined by\\n     * `interfaceId`. See the corresponding\\n     * https://eips.ethereum.org/EIPS/eip-165#how-interfaces-are-identified[EIP section]\\n     * to learn more about how these ids are created.\\n     *\\n     * This function call must use less than 30 000 gas.\\n     */\\n    function supportsInterface(bytes4 interfaceId) external view returns (bool);\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/utils/Address.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Collection of functions related to the address type\\n */\\nlibrary Address {\\n    /**\\n     * @dev Returns true if `account` is a contract.\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * It is unsafe to assume that an address for which this function returns\\n     * false is an externally-owned account (EOA) and not a contract.\\n     *\\n     * Among others, `isContract` will return false for the following\\n     * types of addresses:\\n     *\\n     *  - an externally-owned account\\n     *  - a contract in construction\\n     *  - an address where a contract will be created\\n     *  - an address where a contract lived, but was destroyed\\n     * ====\\n     */\\n    function isContract(address account) internal view returns (bool) {\\n        // This method relies on extcodesize, which returns 0 for contracts in\\n        // construction, since the code is only stored at the end of the\\n        // constructor execution.\\n\\n        uint256 size;\\n        assembly {\\n            size := extcodesize(account)\\n        }\\n        return size > 0;\\n    }\\n\\n    /**\\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\\n     * `recipient`, forwarding all available gas and reverting on errors.\\n     *\\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\\n     * imposed by `transfer`, making them unable to receive funds via\\n     * `transfer`. {sendValue} removes this limitation.\\n     *\\n     * https://diligence.consensys.net/posts/2019/09/stop-using-soliditys-transfer-now/[Learn more].\\n     *\\n     * IMPORTANT: because control is transferred to `recipient`, care must be\\n     * taken to not create reentrancy vulnerabilities. Consider using\\n     * {ReentrancyGuard} or the\\n     * https://solidity.readthedocs.io/en/v0.5.11/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\\n     */\\n    function sendValue(address payable recipient, uint256 amount) internal {\\n        require(address(this).balance >= amount, \\\"Address: insufficient balance\\\");\\n\\n        (bool success, ) = recipient.call{value: amount}(\\\"\\\");\\n        require(success, \\\"Address: unable to send value, recipient may have reverted\\\");\\n    }\\n\\n    /**\\n     * @dev Performs a Solidity function call using a low level `call`. A\\n     * plain `call` is an unsafe replacement for a function call: use this\\n     * function instead.\\n     *\\n     * If `target` reverts with a revert reason, it is bubbled up by this\\n     * function (like regular Solidity function calls).\\n     *\\n     * Returns the raw returned data. To convert to the expected return value,\\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\\n     *\\n     * Requirements:\\n     *\\n     * - `target` must be a contract.\\n     * - calling `target` with `data` must not revert.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionCall(target, data, \\\"Address: low-level call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\\n     * `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, 0, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but also transferring `value` wei to `target`.\\n     *\\n     * Requirements:\\n     *\\n     * - the calling contract must have an ETH balance of at least `value`.\\n     * - the called Solidity function must be `payable`.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, value, \\\"Address: low-level call with value failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\\n     * with `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        require(address(this).balance >= value, \\\"Address: insufficient balance for call\\\");\\n        require(isContract(target), \\\"Address: call to non-contract\\\");\\n\\n        (bool success, bytes memory returndata) = target.call{value: value}(data);\\n        return verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\\n        return functionStaticCall(target, data, \\\"Address: low-level static call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal view returns (bytes memory) {\\n        require(isContract(target), \\\"Address: static call to non-contract\\\");\\n\\n        (bool success, bytes memory returndata) = target.staticcall(data);\\n        return verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionDelegateCall(target, data, \\\"Address: low-level delegate call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        require(isContract(target), \\\"Address: delegate call to non-contract\\\");\\n\\n        (bool success, bytes memory returndata) = target.delegatecall(data);\\n        return verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Tool to verifies that a low level call was successful, and revert if it wasn't, either by bubbling the\\n     * revert reason using the provided one.\\n     *\\n     * _Available since v4.3._\\n     */\\n    function verifyCallResult(\\n        bool success,\\n        bytes memory returndata,\\n        string memory errorMessage\\n    ) internal pure returns (bytes memory) {\\n        if (success) {\\n            return returndata;\\n        } else {\\n            // Look for revert reason and bubble it up if present\\n            if (returndata.length > 0) {\\n                // The easiest way to bubble the revert reason is using memory via assembly\\n\\n                assembly {\\n                    let returndata_size := mload(returndata)\\n                    revert(add(32, returndata), returndata_size)\\n                }\\n            } else {\\n                revert(errorMessage);\\n            }\\n        }\\n    }\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../IERC20.sol\\\";\\nimport \\\"../../../utils/Address.sol\\\";\\n\\n/**\\n * @title SafeERC20\\n * @dev Wrappers around ERC20 operations that throw on failure (when the token\\n * contract returns false). Tokens that return no value (and instead revert or\\n * throw on failure) are also supported, non-reverting calls are assumed to be\\n * successful.\\n * To use this library you can add a `using SafeERC20 for IERC20;` statement to your contract,\\n * which allows you to call the safe operations as `token.safeTransfer(...)`, etc.\\n */\\nlibrary SafeERC20 {\\n    using Address for address;\\n\\n    function safeTransfer(\\n        IERC20 token,\\n        address to,\\n        uint256 value\\n    ) internal {\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.transfer.selector, to, value));\\n    }\\n\\n    function safeTransferFrom(\\n        IERC20 token,\\n        address from,\\n        address to,\\n        uint256 value\\n    ) internal {\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.transferFrom.selector, from, to, value));\\n    }\\n\\n    /**\\n     * @dev Deprecated. This function has issues similar to the ones found in\\n     * {IERC20-approve}, and its usage is discouraged.\\n     *\\n     * Whenever possible, use {safeIncreaseAllowance} and\\n     * {safeDecreaseAllowance} instead.\\n     */\\n    function safeApprove(\\n        IERC20 token,\\n        address spender,\\n        uint256 value\\n    ) internal {\\n        // safeApprove should only be called when setting an initial allowance,\\n        // or when resetting it to zero. To increase and decrease it, use\\n        // 'safeIncreaseAllowance' and 'safeDecreaseAllowance'\\n        require(\\n            (value == 0) || (token.allowance(address(this), spender) == 0),\\n            \\\"SafeERC20: approve from non-zero to non-zero allowance\\\"\\n        );\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, value));\\n    }\\n\\n    function safeIncreaseAllowance(\\n        IERC20 token,\\n        address spender,\\n        uint256 value\\n    ) internal {\\n        uint256 newAllowance = token.allowance(address(this), spender) + value;\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));\\n    }\\n\\n    function safeDecreaseAllowance(\\n        IERC20 token,\\n        address spender,\\n        uint256 value\\n    ) internal {\\n        unchecked {\\n            uint256 oldAllowance = token.allowance(address(this), spender);\\n            require(oldAllowance >= value, \\\"SafeERC20: decreased allowance below zero\\\");\\n            uint256 newAllowance = oldAllowance - value;\\n            _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));\\n        }\\n    }\\n\\n    /**\\n     * @dev Imitates a Solidity high-level call (i.e. a regular function call to a contract), relaxing the requirement\\n     * on the return value: the return value is optional (but if data is returned, it must not be false).\\n     * @param token The token targeted by the call.\\n     * @param data The call data (encoded using abi.encode or one of its variants).\\n     */\\n    function _callOptionalReturn(IERC20 token, bytes memory data) private {\\n        // We need to perform a low level call here, to bypass Solidity's return data size checking mechanism, since\\n        // we're implementing it ourselves. We use {Address.functionCall} to perform this call, which verifies that\\n        // the target address contains contract code and also asserts for success in the low-level call.\\n\\n        bytes memory returndata = address(token).functionCall(data, \\\"SafeERC20: low-level call failed\\\");\\n        if (returndata.length > 0) {\\n            // Return data is optional\\n            require(abi.decode(returndata, (bool)), \\\"SafeERC20: ERC20 operation did not succeed\\\");\\n        }\\n    }\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/token/ERC20/IERC20.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC20 standard as defined in the EIP.\\n */\\ninterface IERC20 {\\n    /**\\n     * @dev Returns the amount of tokens in existence.\\n     */\\n    function totalSupply() external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the amount of tokens owned by `account`.\\n     */\\n    function balanceOf(address account) external view returns (uint256);\\n\\n    /**\\n     * @dev Moves `amount` tokens from the caller's account to `recipient`.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transfer(address recipient, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Returns the remaining number of tokens that `spender` will be\\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\\n     * zero by default.\\n     *\\n     * This value changes when {approve} or {transferFrom} are called.\\n     */\\n    function allowance(address owner, address spender) external view returns (uint256);\\n\\n    /**\\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\\n     * that someone may use both the old and the new allowance by unfortunate\\n     * transaction ordering. One possible solution to mitigate this race\\n     * condition is to first reduce the spender's allowance to 0 and set the\\n     * desired value afterwards:\\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address spender, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Moves `amount` tokens from `sender` to `recipient` using the\\n     * allowance mechanism. `amount` is then deducted from the caller's\\n     * allowance.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(\\n        address sender,\\n        address recipient,\\n        uint256 amount\\n    ) external returns (bool);\\n\\n    /**\\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\\n     * another (`to`).\\n     *\\n     * Note that `value` may be zero.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 value);\\n\\n    /**\\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\\n     * a call to {approve}. `value` is the new allowance.\\n     */\\n    event Approval(address indexed owner, address indexed spender, uint256 value);\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/token/ERC1155/IERC1155.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../../utils/introspection/IERC165.sol\\\";\\n\\n/**\\n * @dev Required interface of an ERC1155 compliant contract, as defined in the\\n * https://eips.ethereum.org/EIPS/eip-1155[EIP].\\n *\\n * _Available since v3.1._\\n */\\ninterface IERC1155 is IERC165 {\\n    /**\\n     * @dev Emitted when `value` tokens of token type `id` are transferred from `from` to `to` by `operator`.\\n     */\\n    event TransferSingle(address indexed operator, address indexed from, address indexed to, uint256 id, uint256 value);\\n\\n    /**\\n     * @dev Equivalent to multiple {TransferSingle} events, where `operator`, `from` and `to` are the same for all\\n     * transfers.\\n     */\\n    event TransferBatch(\\n        address indexed operator,\\n        address indexed from,\\n        address indexed to,\\n        uint256[] ids,\\n        uint256[] values\\n    );\\n\\n    /**\\n     * @dev Emitted when `account` grants or revokes permission to `operator` to transfer their tokens, according to\\n     * `approved`.\\n     */\\n    event ApprovalForAll(address indexed account, address indexed operator, bool approved);\\n\\n    /**\\n     * @dev Emitted when the URI for token type `id` changes to `value`, if it is a non-programmatic URI.\\n     *\\n     * If an {URI} event was emitted for `id`, the standard\\n     * https://eips.ethereum.org/EIPS/eip-1155#metadata-extensions[guarantees] that `value` will equal the value\\n     * returned by {IERC1155MetadataURI-uri}.\\n     */\\n    event URI(string value, uint256 indexed id);\\n\\n    /**\\n     * @dev Returns the amount of tokens of token type `id` owned by `account`.\\n     *\\n     * Requirements:\\n     *\\n     * - `account` cannot be the zero address.\\n     */\\n    function balanceOf(address account, uint256 id) external view returns (uint256);\\n\\n    /**\\n     * @dev xref:ROOT:erc1155.adoc#batch-operations[Batched] version of {balanceOf}.\\n     *\\n     * Requirements:\\n     *\\n     * - `accounts` and `ids` must have the same length.\\n     */\\n    function balanceOfBatch(address[] calldata accounts, uint256[] calldata ids)\\n        external\\n        view\\n        returns (uint256[] memory);\\n\\n    /**\\n     * @dev Grants or revokes permission to `operator` to transfer the caller's tokens, according to `approved`,\\n     *\\n     * Emits an {ApprovalForAll} event.\\n     *\\n     * Requirements:\\n     *\\n     * - `operator` cannot be the caller.\\n     */\\n    function setApprovalForAll(address operator, bool approved) external;\\n\\n    /**\\n     * @dev Returns true if `operator` is approved to transfer ``account``'s tokens.\\n     *\\n     * See {setApprovalForAll}.\\n     */\\n    function isApprovedForAll(address account, address operator) external view returns (bool);\\n\\n    /**\\n     * @dev Transfers `amount` tokens of token type `id` from `from` to `to`.\\n     *\\n     * Emits a {TransferSingle} event.\\n     *\\n     * Requirements:\\n     *\\n     * - `to` cannot be the zero address.\\n     * - If the caller is not `from`, it must be have been approved to spend ``from``'s tokens via {setApprovalForAll}.\\n     * - `from` must have a balance of tokens of type `id` of at least `amount`.\\n     * - If `to` refers to a smart contract, it must implement {IERC1155Receiver-onERC1155Received} and return the\\n     * acceptance magic value.\\n     */\\n    function safeTransferFrom(\\n        address from,\\n        address to,\\n        uint256 id,\\n        uint256 amount,\\n        bytes calldata data\\n    ) external;\\n\\n    /**\\n     * @dev xref:ROOT:erc1155.adoc#batch-operations[Batched] version of {safeTransferFrom}.\\n     *\\n     * Emits a {TransferBatch} event.\\n     *\\n     * Requirements:\\n     *\\n     * - `ids` and `amounts` must have the same length.\\n     * - If `to` refers to a smart contract, it must implement {IERC1155Receiver-onERC1155BatchReceived} and return the\\n     * acceptance magic value.\\n     */\\n    function safeBatchTransferFrom(\\n        address from,\\n        address to,\\n        uint256[] calldata ids,\\n        uint256[] calldata amounts,\\n        bytes calldata data\\n    ) external;\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts-upgradeable/utils/introspection/IERC165Upgradeable.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC165 standard, as defined in the\\n * https://eips.ethereum.org/EIPS/eip-165[EIP].\\n *\\n * Implementers can declare support of contract interfaces, which can then be\\n * queried by others ({ERC165Checker}).\\n *\\n * For an implementation, see {ERC165}.\\n */\\ninterface IERC165Upgradeable {\\n    /**\\n     * @dev Returns true if this contract implements the interface defined by\\n     * `interfaceId`. See the corresponding\\n     * https://eips.ethereum.org/EIPS/eip-165#how-interfaces-are-identified[EIP section]\\n     * to learn more about how these ids are created.\\n     *\\n     * This function call must use less than 30 000 gas.\\n     */\\n    function supportsInterface(bytes4 interfaceId) external view returns (bool);\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts-upgradeable/utils/introspection/ERC165Upgradeable.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"./IERC165Upgradeable.sol\\\";\\nimport \\\"../../proxy/utils/Initializable.sol\\\";\\n\\n/**\\n * @dev Implementation of the {IERC165} interface.\\n *\\n * Contracts that want to implement ERC165 should inherit from this contract and override {supportsInterface} to check\\n * for the additional interface id that will be supported. For example:\\n *\\n * ```solidity\\n * function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {\\n *     return interfaceId == type(MyInterface).interfaceId || super.supportsInterface(interfaceId);\\n * }\\n * ```\\n *\\n * Alternatively, {ERC165Storage} provides an easier to use but more expensive implementation.\\n */\\nabstract contract ERC165Upgradeable is Initializable, IERC165Upgradeable {\\n    function __ERC165_init() internal initializer {\\n        __ERC165_init_unchained();\\n    }\\n\\n    function __ERC165_init_unchained() internal initializer {\\n    }\\n    /**\\n     * @dev See {IERC165-supportsInterface}.\\n     */\\n    function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {\\n        return interfaceId == type(IERC165Upgradeable).interfaceId;\\n    }\\n    uint256[50] private __gap;\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts-upgradeable/utils/escrow/EscrowUpgradeable.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../../access/OwnableUpgradeable.sol\\\";\\nimport \\\"../AddressUpgradeable.sol\\\";\\nimport \\\"../../proxy/utils/Initializable.sol\\\";\\n\\n/**\\n * @title Escrow\\n * @dev Base escrow contract, holds funds designated for a payee until they\\n * withdraw them.\\n *\\n * Intended usage: This contract (and derived escrow contracts) should be a\\n * standalone contract, that only interacts with the contract that instantiated\\n * it. That way, it is guaranteed that all Ether will be handled according to\\n * the `Escrow` rules, and there is no need to check for payable functions or\\n * transfers in the inheritance tree. The contract that uses the escrow as its\\n * payment method should be its owner, and provide public methods redirecting\\n * to the escrow's deposit and withdraw.\\n */\\ncontract EscrowUpgradeable is Initializable, OwnableUpgradeable {\\n    function initialize() public virtual initializer {\\n        __Escrow_init();\\n    }\\n    function __Escrow_init() internal initializer {\\n        __Context_init_unchained();\\n        __Ownable_init_unchained();\\n        __Escrow_init_unchained();\\n    }\\n\\n    function __Escrow_init_unchained() internal initializer {\\n    }\\n    using AddressUpgradeable for address payable;\\n\\n    event Deposited(address indexed payee, uint256 weiAmount);\\n    event Withdrawn(address indexed payee, uint256 weiAmount);\\n\\n    mapping(address => uint256) private _deposits;\\n\\n    function depositsOf(address payee) public view returns (uint256) {\\n        return _deposits[payee];\\n    }\\n\\n    /**\\n     * @dev Stores the sent amount as credit to be withdrawn.\\n     * @param payee The destination address of the funds.\\n     */\\n    function deposit(address payee) public payable virtual onlyOwner {\\n        uint256 amount = msg.value;\\n        _deposits[payee] += amount;\\n        emit Deposited(payee, amount);\\n    }\\n\\n    /**\\n     * @dev Withdraw accumulated balance for a payee, forwarding all gas to the\\n     * recipient.\\n     *\\n     * WARNING: Forwarding all gas opens the door to reentrancy vulnerabilities.\\n     * Make sure you trust the recipient, or are either following the\\n     * checks-effects-interactions pattern or using {ReentrancyGuard}.\\n     *\\n     * @param payee The address whose funds will be withdrawn and transferred to.\\n     */\\n    function withdraw(address payable payee) public virtual onlyOwner {\\n        uint256 payment = _deposits[payee];\\n\\n        _deposits[payee] = 0;\\n\\n        payee.sendValue(payment);\\n\\n        emit Withdrawn(payee, payment);\\n    }\\n    uint256[49] private __gap;\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts-upgradeable/utils/StringsUpgradeable.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev String operations.\\n */\\nlibrary StringsUpgradeable {\\n    bytes16 private constant _HEX_SYMBOLS = \\\"0123456789abcdef\\\";\\n\\n    /**\\n     * @dev Converts a `uint256` to its ASCII `string` decimal representation.\\n     */\\n    function toString(uint256 value) internal pure returns (string memory) {\\n        // Inspired by OraclizeAPI's implementation - MIT licence\\n        // https://github.com/oraclize/ethereum-api/blob/b42146b063c7d6ee1358846c198246239e9360e8/oraclizeAPI_0.4.25.sol\\n\\n        if (value == 0) {\\n            return \\\"0\\\";\\n        }\\n        uint256 temp = value;\\n        uint256 digits;\\n        while (temp != 0) {\\n            digits++;\\n            temp /= 10;\\n        }\\n        bytes memory buffer = new bytes(digits);\\n        while (value != 0) {\\n            digits -= 1;\\n            buffer[digits] = bytes1(uint8(48 + uint256(value % 10)));\\n            value /= 10;\\n        }\\n        return string(buffer);\\n    }\\n\\n    /**\\n     * @dev Converts a `uint256` to its ASCII `string` hexadecimal representation.\\n     */\\n    function toHexString(uint256 value) internal pure returns (string memory) {\\n        if (value == 0) {\\n            return \\\"0x00\\\";\\n        }\\n        uint256 temp = value;\\n        uint256 length = 0;\\n        while (temp != 0) {\\n            length++;\\n            temp >>= 8;\\n        }\\n        return toHexString(value, length);\\n    }\\n\\n    /**\\n     * @dev Converts a `uint256` to its ASCII `string` hexadecimal representation with fixed length.\\n     */\\n    function toHexString(uint256 value, uint256 length) internal pure returns (string memory) {\\n        bytes memory buffer = new bytes(2 * length + 2);\\n        buffer[0] = \\\"0\\\";\\n        buffer[1] = \\\"x\\\";\\n        for (uint256 i = 2 * length + 1; i > 1; --i) {\\n            buffer[i] = _HEX_SYMBOLS[value & 0xf];\\n            value >>= 4;\\n        }\\n        require(value == 0, \\\"Strings: hex length insufficient\\\");\\n        return string(buffer);\\n    }\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts-upgradeable/utils/ContextUpgradeable.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\nimport \\\"../proxy/utils/Initializable.sol\\\";\\n\\n/**\\n * @dev Provides information about the current execution context, including the\\n * sender of the transaction and its data. While these are generally available\\n * via msg.sender and msg.data, they should not be accessed in such a direct\\n * manner, since when dealing with meta-transactions the account sending and\\n * paying for execution may not be the actual sender (as far as an application\\n * is concerned).\\n *\\n * This contract is only required for intermediate, library-like contracts.\\n */\\nabstract contract ContextUpgradeable is Initializable {\\n    function __Context_init() internal initializer {\\n        __Context_init_unchained();\\n    }\\n\\n    function __Context_init_unchained() internal initializer {\\n    }\\n    function _msgSender() internal view virtual returns (address) {\\n        return msg.sender;\\n    }\\n\\n    function _msgData() internal view virtual returns (bytes calldata) {\\n        return msg.data;\\n    }\\n    uint256[50] private __gap;\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts-upgradeable/utils/AddressUpgradeable.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Collection of functions related to the address type\\n */\\nlibrary AddressUpgradeable {\\n    /**\\n     * @dev Returns true if `account` is a contract.\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * It is unsafe to assume that an address for which this function returns\\n     * false is an externally-owned account (EOA) and not a contract.\\n     *\\n     * Among others, `isContract` will return false for the following\\n     * types of addresses:\\n     *\\n     *  - an externally-owned account\\n     *  - a contract in construction\\n     *  - an address where a contract will be created\\n     *  - an address where a contract lived, but was destroyed\\n     * ====\\n     */\\n    function isContract(address account) internal view returns (bool) {\\n        // This method relies on extcodesize, which returns 0 for contracts in\\n        // construction, since the code is only stored at the end of the\\n        // constructor execution.\\n\\n        uint256 size;\\n        assembly {\\n            size := extcodesize(account)\\n        }\\n        return size > 0;\\n    }\\n\\n    /**\\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\\n     * `recipient`, forwarding all available gas and reverting on errors.\\n     *\\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\\n     * imposed by `transfer`, making them unable to receive funds via\\n     * `transfer`. {sendValue} removes this limitation.\\n     *\\n     * https://diligence.consensys.net/posts/2019/09/stop-using-soliditys-transfer-now/[Learn more].\\n     *\\n     * IMPORTANT: because control is transferred to `recipient`, care must be\\n     * taken to not create reentrancy vulnerabilities. Consider using\\n     * {ReentrancyGuard} or the\\n     * https://solidity.readthedocs.io/en/v0.5.11/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\\n     */\\n    function sendValue(address payable recipient, uint256 amount) internal {\\n        require(address(this).balance >= amount, \\\"Address: insufficient balance\\\");\\n\\n        (bool success, ) = recipient.call{value: amount}(\\\"\\\");\\n        require(success, \\\"Address: unable to send value, recipient may have reverted\\\");\\n    }\\n\\n    /**\\n     * @dev Performs a Solidity function call using a low level `call`. A\\n     * plain `call` is an unsafe replacement for a function call: use this\\n     * function instead.\\n     *\\n     * If `target` reverts with a revert reason, it is bubbled up by this\\n     * function (like regular Solidity function calls).\\n     *\\n     * Returns the raw returned data. To convert to the expected return value,\\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\\n     *\\n     * Requirements:\\n     *\\n     * - `target` must be a contract.\\n     * - calling `target` with `data` must not revert.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionCall(target, data, \\\"Address: low-level call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\\n     * `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, 0, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but also transferring `value` wei to `target`.\\n     *\\n     * Requirements:\\n     *\\n     * - the calling contract must have an ETH balance of at least `value`.\\n     * - the called Solidity function must be `payable`.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, value, \\\"Address: low-level call with value failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\\n     * with `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        require(address(this).balance >= value, \\\"Address: insufficient balance for call\\\");\\n        require(isContract(target), \\\"Address: call to non-contract\\\");\\n\\n        (bool success, bytes memory returndata) = target.call{value: value}(data);\\n        return verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\\n        return functionStaticCall(target, data, \\\"Address: low-level static call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal view returns (bytes memory) {\\n        require(isContract(target), \\\"Address: static call to non-contract\\\");\\n\\n        (bool success, bytes memory returndata) = target.staticcall(data);\\n        return verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Tool to verifies that a low level call was successful, and revert if it wasn't, either by bubbling the\\n     * revert reason using the provided one.\\n     *\\n     * _Available since v4.3._\\n     */\\n    function verifyCallResult(\\n        bool success,\\n        bytes memory returndata,\\n        string memory errorMessage\\n    ) internal pure returns (bytes memory) {\\n        if (success) {\\n            return returndata;\\n        } else {\\n            // Look for revert reason and bubble it up if present\\n            if (returndata.length > 0) {\\n                // The easiest way to bubble the revert reason is using memory via assembly\\n\\n                assembly {\\n                    let returndata_size := mload(returndata)\\n                    revert(add(32, returndata), returndata_size)\\n                }\\n            } else {\\n                revert(errorMessage);\\n            }\\n        }\\n    }\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts-upgradeable/security/PullPaymentUpgradeable.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../utils/escrow/EscrowUpgradeable.sol\\\";\\nimport \\\"../proxy/utils/Initializable.sol\\\";\\n\\n/**\\n * @dev Simple implementation of a\\n * https://consensys.github.io/smart-contract-best-practices/recommendations/#favor-pull-over-push-for-external-calls[pull-payment]\\n * strategy, where the paying contract doesn't interact directly with the\\n * receiver account, which must withdraw its payments itself.\\n *\\n * Pull-payments are often considered the best practice when it comes to sending\\n * Ether, security-wise. It prevents recipients from blocking execution, and\\n * eliminates reentrancy concerns.\\n *\\n * TIP: If you would like to learn more about reentrancy and alternative ways\\n * to protect against it, check out our blog post\\n * https://blog.openzeppelin.com/reentrancy-after-istanbul/[Reentrancy After Istanbul].\\n *\\n * To use, derive from the `PullPayment` contract, and use {_asyncTransfer}\\n * instead of Solidity's `transfer` function. Payees can query their due\\n * payments with {payments}, and retrieve them with {withdrawPayments}.\\n */\\nabstract contract PullPaymentUpgradeable is Initializable {\\n    EscrowUpgradeable private _escrow;\\n\\n    function __PullPayment_init() internal initializer {\\n        __PullPayment_init_unchained();\\n    }\\n\\n    function __PullPayment_init_unchained() internal initializer {\\n        _escrow = new EscrowUpgradeable();\\n        _escrow.initialize();\\n    }\\n\\n    /**\\n     * @dev Withdraw accumulated payments, forwarding all gas to the recipient.\\n     *\\n     * Note that _any_ account can call this function, not just the `payee`.\\n     * This means that contracts unaware of the `PullPayment` protocol can still\\n     * receive funds this way, by having a separate account call\\n     * {withdrawPayments}.\\n     *\\n     * WARNING: Forwarding all gas opens the door to reentrancy vulnerabilities.\\n     * Make sure you trust the recipient, or are either following the\\n     * checks-effects-interactions pattern or using {ReentrancyGuard}.\\n     *\\n     * @param payee Whose payments will be withdrawn.\\n     */\\n    function withdrawPayments(address payable payee) public virtual {\\n        _escrow.withdraw(payee);\\n    }\\n\\n    /**\\n     * @dev Returns the payments owed to an address.\\n     * @param dest The creditor's address.\\n     */\\n    function payments(address dest) public view returns (uint256) {\\n        return _escrow.depositsOf(dest);\\n    }\\n\\n    /**\\n     * @dev Called by the payer to store the sent amount as credit to be pulled.\\n     * Funds sent in this way are stored in an intermediate {Escrow} contract, so\\n     * there is no danger of them being spent before withdrawal.\\n     *\\n     * @param dest The destination address of the funds.\\n     * @param amount The amount to transfer.\\n     */\\n    function _asyncTransfer(address dest, uint256 amount) internal virtual {\\n        _escrow.deposit{value: amount}(dest);\\n    }\\n    uint256[50] private __gap;\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev This is a base contract to aid in writing upgradeable contracts, or any kind of contract that will be deployed\\n * behind a proxy. Since a proxied contract can't have a constructor, it's common to move constructor logic to an\\n * external initializer function, usually called `initialize`. It then becomes necessary to protect this initializer\\n * function so it can only be called once. The {initializer} modifier provided by this contract will have this effect.\\n *\\n * TIP: To avoid leaving the proxy in an uninitialized state, the initializer function should be called as early as\\n * possible by providing the encoded function call as the `_data` argument to {ERC1967Proxy-constructor}.\\n *\\n * CAUTION: When used with inheritance, manual care must be taken to not invoke a parent initializer twice, or to ensure\\n * that all initializers are idempotent. This is not verified automatically as constructors are by Solidity.\\n */\\nabstract contract Initializable {\\n    /**\\n     * @dev Indicates that the contract has been initialized.\\n     */\\n    bool private _initialized;\\n\\n    /**\\n     * @dev Indicates that the contract is in the process of being initialized.\\n     */\\n    bool private _initializing;\\n\\n    /**\\n     * @dev Modifier to protect an initializer function from being invoked twice.\\n     */\\n    modifier initializer() {\\n        require(_initializing || !_initialized, \\\"Initializable: contract is already initialized\\\");\\n\\n        bool isTopLevelCall = !_initializing;\\n        if (isTopLevelCall) {\\n            _initializing = true;\\n            _initialized = true;\\n        }\\n\\n        _;\\n\\n        if (isTopLevelCall) {\\n            _initializing = false;\\n        }\\n    }\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../utils/ContextUpgradeable.sol\\\";\\nimport \\\"../proxy/utils/Initializable.sol\\\";\\n\\n/**\\n * @dev Contract module which provides a basic access control mechanism, where\\n * there is an account (an owner) that can be granted exclusive access to\\n * specific functions.\\n *\\n * By default, the owner account will be the one that deploys the contract. This\\n * can later be changed with {transferOwnership}.\\n *\\n * This module is used through inheritance. It will make available the modifier\\n * `onlyOwner`, which can be applied to your functions to restrict their use to\\n * the owner.\\n */\\nabstract contract OwnableUpgradeable is Initializable, ContextUpgradeable {\\n    address private _owner;\\n\\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\\n\\n    /**\\n     * @dev Initializes the contract setting the deployer as the initial owner.\\n     */\\n    function __Ownable_init() internal initializer {\\n        __Context_init_unchained();\\n        __Ownable_init_unchained();\\n    }\\n\\n    function __Ownable_init_unchained() internal initializer {\\n        _setOwner(_msgSender());\\n    }\\n\\n    /**\\n     * @dev Returns the address of the current owner.\\n     */\\n    function owner() public view virtual returns (address) {\\n        return _owner;\\n    }\\n\\n    /**\\n     * @dev Throws if called by any account other than the owner.\\n     */\\n    modifier onlyOwner() {\\n        require(owner() == _msgSender(), \\\"Ownable: caller is not the owner\\\");\\n        _;\\n    }\\n\\n    /**\\n     * @dev Leaves the contract without owner. It will not be possible to call\\n     * `onlyOwner` functions anymore. Can only be called by the current owner.\\n     *\\n     * NOTE: Renouncing ownership will leave the contract without an owner,\\n     * thereby removing any functionality that is only available to the owner.\\n     */\\n    function renounceOwnership() public virtual onlyOwner {\\n        _setOwner(address(0));\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Can only be called by the current owner.\\n     */\\n    function transferOwnership(address newOwner) public virtual onlyOwner {\\n        require(newOwner != address(0), \\\"Ownable: new owner is the zero address\\\");\\n        _setOwner(newOwner);\\n    }\\n\\n    function _setOwner(address newOwner) private {\\n        address oldOwner = _owner;\\n        _owner = newOwner;\\n        emit OwnershipTransferred(oldOwner, newOwner);\\n    }\\n    uint256[49] private __gap;\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts-upgradeable/access/IAccessControlUpgradeable.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev External interface of AccessControl declared to support ERC165 detection.\\n */\\ninterface IAccessControlUpgradeable {\\n    /**\\n     * @dev Emitted when `newAdminRole` is set as ``role``'s admin role, replacing `previousAdminRole`\\n     *\\n     * `DEFAULT_ADMIN_ROLE` is the starting admin for all roles, despite\\n     * {RoleAdminChanged} not being emitted signaling this.\\n     *\\n     * _Available since v3.1._\\n     */\\n    event RoleAdminChanged(bytes32 indexed role, bytes32 indexed previousAdminRole, bytes32 indexed newAdminRole);\\n\\n    /**\\n     * @dev Emitted when `account` is granted `role`.\\n     *\\n     * `sender` is the account that originated the contract call, an admin role\\n     * bearer except when using {AccessControl-_setupRole}.\\n     */\\n    event RoleGranted(bytes32 indexed role, address indexed account, address indexed sender);\\n\\n    /**\\n     * @dev Emitted when `account` is revoked `role`.\\n     *\\n     * `sender` is the account that originated the contract call:\\n     *   - if using `revokeRole`, it is the admin role bearer\\n     *   - if using `renounceRole`, it is the role bearer (i.e. `account`)\\n     */\\n    event RoleRevoked(bytes32 indexed role, address indexed account, address indexed sender);\\n\\n    /**\\n     * @dev Returns `true` if `account` has been granted `role`.\\n     */\\n    function hasRole(bytes32 role, address account) external view returns (bool);\\n\\n    /**\\n     * @dev Returns the admin role that controls `role`. See {grantRole} and\\n     * {revokeRole}.\\n     *\\n     * To change a role's admin, use {AccessControl-_setRoleAdmin}.\\n     */\\n    function getRoleAdmin(bytes32 role) external view returns (bytes32);\\n\\n    /**\\n     * @dev Grants `role` to `account`.\\n     *\\n     * If `account` had not been already granted `role`, emits a {RoleGranted}\\n     * event.\\n     *\\n     * Requirements:\\n     *\\n     * - the caller must have ``role``'s admin role.\\n     */\\n    function grantRole(bytes32 role, address account) external;\\n\\n    /**\\n     * @dev Revokes `role` from `account`.\\n     *\\n     * If `account` had been granted `role`, emits a {RoleRevoked} event.\\n     *\\n     * Requirements:\\n     *\\n     * - the caller must have ``role``'s admin role.\\n     */\\n    function revokeRole(bytes32 role, address account) external;\\n\\n    /**\\n     * @dev Revokes `role` from the calling account.\\n     *\\n     * Roles are often managed via {grantRole} and {revokeRole}: this function's\\n     * purpose is to provide a mechanism for accounts to lose their privileges\\n     * if they are compromised (such as when a trusted device is misplaced).\\n     *\\n     * If the calling account had been granted `role`, emits a {RoleRevoked}\\n     * event.\\n     *\\n     * Requirements:\\n     *\\n     * - the caller must be `account`.\\n     */\\n    function renounceRole(bytes32 role, address account) external;\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts-upgradeable/access/AccessControlUpgradeable.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"./IAccessControlUpgradeable.sol\\\";\\nimport \\\"../utils/ContextUpgradeable.sol\\\";\\nimport \\\"../utils/StringsUpgradeable.sol\\\";\\nimport \\\"../utils/introspection/ERC165Upgradeable.sol\\\";\\nimport \\\"../proxy/utils/Initializable.sol\\\";\\n\\n/**\\n * @dev Contract module that allows children to implement role-based access\\n * control mechanisms. This is a lightweight version that doesn't allow enumerating role\\n * members except through off-chain means by accessing the contract event logs. Some\\n * applications may benefit from on-chain enumerability, for those cases see\\n * {AccessControlEnumerable}.\\n *\\n * Roles are referred to by their `bytes32` identifier. These should be exposed\\n * in the external API and be unique. The best way to achieve this is by\\n * using `public constant` hash digests:\\n *\\n * ```\\n * bytes32 public constant MY_ROLE = keccak256(\\\"MY_ROLE\\\");\\n * ```\\n *\\n * Roles can be used to represent a set of permissions. To restrict access to a\\n * function call, use {hasRole}:\\n *\\n * ```\\n * function foo() public {\\n *     require(hasRole(MY_ROLE, msg.sender));\\n *     ...\\n * }\\n * ```\\n *\\n * Roles can be granted and revoked dynamically via the {grantRole} and\\n * {revokeRole} functions. Each role has an associated admin role, and only\\n * accounts that have a role's admin role can call {grantRole} and {revokeRole}.\\n *\\n * By default, the admin role for all roles is `DEFAULT_ADMIN_ROLE`, which means\\n * that only accounts with this role will be able to grant or revoke other\\n * roles. More complex role relationships can be created by using\\n * {_setRoleAdmin}.\\n *\\n * WARNING: The `DEFAULT_ADMIN_ROLE` is also its own admin: it has permission to\\n * grant and revoke this role. Extra precautions should be taken to secure\\n * accounts that have been granted it.\\n */\\nabstract contract AccessControlUpgradeable is Initializable, ContextUpgradeable, IAccessControlUpgradeable, ERC165Upgradeable {\\n    function __AccessControl_init() internal initializer {\\n        __Context_init_unchained();\\n        __ERC165_init_unchained();\\n        __AccessControl_init_unchained();\\n    }\\n\\n    function __AccessControl_init_unchained() internal initializer {\\n    }\\n    struct RoleData {\\n        mapping(address => bool) members;\\n        bytes32 adminRole;\\n    }\\n\\n    mapping(bytes32 => RoleData) private _roles;\\n\\n    bytes32 public constant DEFAULT_ADMIN_ROLE = 0x00;\\n\\n    /**\\n     * @dev Modifier that checks that an account has a specific role. Reverts\\n     * with a standardized message including the required role.\\n     *\\n     * The format of the revert reason is given by the following regular expression:\\n     *\\n     *  /^AccessControl: account (0x[0-9a-f]{40}) is missing role (0x[0-9a-f]{64})$/\\n     *\\n     * _Available since v4.1._\\n     */\\n    modifier onlyRole(bytes32 role) {\\n        _checkRole(role, _msgSender());\\n        _;\\n    }\\n\\n    /**\\n     * @dev See {IERC165-supportsInterface}.\\n     */\\n    function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {\\n        return interfaceId == type(IAccessControlUpgradeable).interfaceId || super.supportsInterface(interfaceId);\\n    }\\n\\n    /**\\n     * @dev Returns `true` if `account` has been granted `role`.\\n     */\\n    function hasRole(bytes32 role, address account) public view override returns (bool) {\\n        return _roles[role].members[account];\\n    }\\n\\n    /**\\n     * @dev Revert with a standard message if `account` is missing `role`.\\n     *\\n     * The format of the revert reason is given by the following regular expression:\\n     *\\n     *  /^AccessControl: account (0x[0-9a-f]{40}) is missing role (0x[0-9a-f]{64})$/\\n     */\\n    function _checkRole(bytes32 role, address account) internal view {\\n        if (!hasRole(role, account)) {\\n            revert(\\n                string(\\n                    abi.encodePacked(\\n                        \\\"AccessControl: account \\\",\\n                        StringsUpgradeable.toHexString(uint160(account), 20),\\n                        \\\" is missing role \\\",\\n                        StringsUpgradeable.toHexString(uint256(role), 32)\\n                    )\\n                )\\n            );\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the admin role that controls `role`. See {grantRole} and\\n     * {revokeRole}.\\n     *\\n     * To change a role's admin, use {_setRoleAdmin}.\\n     */\\n    function getRoleAdmin(bytes32 role) public view override returns (bytes32) {\\n        return _roles[role].adminRole;\\n    }\\n\\n    /**\\n     * @dev Grants `role` to `account`.\\n     *\\n     * If `account` had not been already granted `role`, emits a {RoleGranted}\\n     * event.\\n     *\\n     * Requirements:\\n     *\\n     * - the caller must have ``role``'s admin role.\\n     */\\n    function grantRole(bytes32 role, address account) public virtual override onlyRole(getRoleAdmin(role)) {\\n        _grantRole(role, account);\\n    }\\n\\n    /**\\n     * @dev Revokes `role` from `account`.\\n     *\\n     * If `account` had been granted `role`, emits a {RoleRevoked} event.\\n     *\\n     * Requirements:\\n     *\\n     * - the caller must have ``role``'s admin role.\\n     */\\n    function revokeRole(bytes32 role, address account) public virtual override onlyRole(getRoleAdmin(role)) {\\n        _revokeRole(role, account);\\n    }\\n\\n    /**\\n     * @dev Revokes `role` from the calling account.\\n     *\\n     * Roles are often managed via {grantRole} and {revokeRole}: this function's\\n     * purpose is to provide a mechanism for accounts to lose their privileges\\n     * if they are compromised (such as when a trusted device is misplaced).\\n     *\\n     * If the calling account had been granted `role`, emits a {RoleRevoked}\\n     * event.\\n     *\\n     * Requirements:\\n     *\\n     * - the caller must be `account`.\\n     */\\n    function renounceRole(bytes32 role, address account) public virtual override {\\n        require(account == _msgSender(), \\\"AccessControl: can only renounce roles for self\\\");\\n\\n        _revokeRole(role, account);\\n    }\\n\\n    /**\\n     * @dev Grants `role` to `account`.\\n     *\\n     * If `account` had not been already granted `role`, emits a {RoleGranted}\\n     * event. Note that unlike {grantRole}, this function doesn't perform any\\n     * checks on the calling account.\\n     *\\n     * [WARNING]\\n     * ====\\n     * This function should only be called from the constructor when setting\\n     * up the initial roles for the system.\\n     *\\n     * Using this function in any other way is effectively circumventing the admin\\n     * system imposed by {AccessControl}.\\n     * ====\\n     */\\n    function _setupRole(bytes32 role, address account) internal virtual {\\n        _grantRole(role, account);\\n    }\\n\\n    /**\\n     * @dev Sets `adminRole` as ``role``'s admin role.\\n     *\\n     * Emits a {RoleAdminChanged} event.\\n     */\\n    function _setRoleAdmin(bytes32 role, bytes32 adminRole) internal virtual {\\n        bytes32 previousAdminRole = getRoleAdmin(role);\\n        _roles[role].adminRole = adminRole;\\n        emit RoleAdminChanged(role, previousAdminRole, adminRole);\\n    }\\n\\n    function _grantRole(bytes32 role, address account) private {\\n        if (!hasRole(role, account)) {\\n            _roles[role].members[account] = true;\\n            emit RoleGranted(role, account, _msgSender());\\n        }\\n    }\\n\\n    function _revokeRole(bytes32 role, address account) private {\\n        if (hasRole(role, account)) {\\n            _roles[role].members[account] = false;\\n            emit RoleRevoked(role, account, _msgSender());\\n        }\\n    }\\n    uint256[49] private __gap;\\n}\\n\"\r\n    },\r\n    \"/Users/mudaseriqbal/Documents/Developer/Luner/nafter.contracts/src/active/SendValueProxy.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\r\\npragma solidity 0.8.0;\\r\\n\\r\\nimport \\\"./ISendValueProxy.sol\\\";\\r\\n\\r\\n/**\\r\\n * @dev Contract that attempts to send value to an address.\\r\\n */\\r\\ncontract SendValueProxy is ISendValueProxy {\\r\\n  /**\\r\\n   * @dev Send some wei to the address.\\r\\n   * @param _to address to send some value to.\\r\\n   */\\r\\n  function sendValue(address payable _to) external payable override {\\r\\n    // Note that `<address>.transfer` limits gas sent to receiver. It may\\r\\n    // not support complex contract operations in the future.\\r\\n    _to.transfer(msg.value);\\r\\n  }\\r\\n}\\r\\n\"\r\n    },\r\n    \"/Users/mudaseriqbal/Documents/Developer/Luner/nafter.contracts/src/active/SendValueOrEscrow.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\r\\n\\r\\npragma solidity 0.8.0;\\r\\n\\r\\nimport \\\"@openzeppelin/contracts-upgradeable/security/PullPaymentUpgradeable.sol\\\";\\r\\nimport \\\"./MaybeSendValue.sol\\\";\\r\\n\\r\\n/**\\r\\n * @dev Contract to make payments. If a direct transfer fails, it will store the payment in escrow until the address decides to pull the payment.\\r\\n */\\r\\ncontract SendValueOrEscrow is MaybeSendValue, PullPaymentUpgradeable {\\r\\n  /////////////////////////////////////////////////////////////////////////\\r\\n  // Events\\r\\n  /////////////////////////////////////////////////////////////////////////\\r\\n  event SendValue(address indexed _payee, uint256 amount);\\r\\n\\r\\n  /////////////////////////////////////////////////////////////////////////\\r\\n  // sendValueOrEscrow\\r\\n  /////////////////////////////////////////////////////////////////////////\\r\\n  /**\\r\\n   * @dev Send some value to an address.\\r\\n   * @param _to address to send some value to.\\r\\n   * @param _value uint256 amount to send.\\r\\n   */\\r\\n  function sendValueOrEscrow(address payable _to, uint256 _value) internal {\\r\\n    // attempt to make the transfer\\r\\n    bool successfulTransfer = MaybeSendValue.maybeSendValue(_to, _value);\\r\\n    // if it fails, transfer it into escrow for them to redeem at their will.\\r\\n    if (!successfulTransfer) {\\r\\n      _asyncTransfer(_to, _value);\\r\\n    }\\r\\n    emit SendValue(_to, _value);\\r\\n  }\\r\\n}\\r\\n\"\r\n    },\r\n    \"/Users/mudaseriqbal/Documents/Developer/Luner/nafter.contracts/src/active/Payments.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\r\\n\\r\\npragma solidity 0.8.0;\\r\\n\\r\\nimport \\\"@openzeppelin/contracts/utils/math/SafeMath.sol\\\";\\r\\nimport \\\"@openzeppelin/contracts/token/ERC20/IERC20.sol\\\";\\r\\nimport \\\"@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol\\\";\\r\\nimport \\\"./SendValueOrEscrow.sol\\\";\\r\\n\\r\\n/**\\r\\n * @title Payments contract for Nafter Marketplaces.\\r\\n */\\r\\ncontract Payments is SendValueOrEscrow {\\r\\n  using SafeMath for uint256;\\r\\n  using SafeMath for uint8;\\r\\n  using SafeERC20 for IERC20;\\r\\n\\r\\n  IERC20 public nafterToken;\\r\\n\\r\\n  /////////////////////////////////////////////////////////////////////////\\r\\n  // refund\\r\\n  /////////////////////////////////////////////////////////////////////////\\r\\n  /**\\r\\n   * @dev Internal function to refund an address. Typically for canceled bids or offers.\\r\\n   * Requirements:\\r\\n   *\\r\\n   *  - _payee cannot be the zero address\\r\\n   *\\r\\n   * @param _marketplacePercentage uint8 percentage of the fee for the marketplace.\\r\\n   * @param _amount uint256 value to be split.\\r\\n   * @param _payee address seller of the token.\\r\\n   */\\r\\n  function refund(\\r\\n    uint8 _marketplacePercentage,\\r\\n    address payable _payee,\\r\\n    uint256 _amount\\r\\n  ) internal {\\r\\n    // require(_payee != address(0), \\\"payee no zero\\\");\\r\\n\\r\\n    if (_amount > 0) {\\r\\n      SendValueOrEscrow.sendValueOrEscrow(_payee, _amount.add(calcPercentagePayment(_amount, _marketplacePercentage)));\\r\\n    }\\r\\n  }\\r\\n\\r\\n  /////////////////////////////////////////////////////////////////////////\\r\\n  // refundNafter\\r\\n  /////////////////////////////////////////////////////////////////////////\\r\\n  /**\\r\\n   * @dev Internal function to refund an address. Typically for canceled bids or offers.\\r\\n   * Requirements:\\r\\n   *\\r\\n   *  - _payee cannot be the zero address\\r\\n   *\\r\\n   * @param _amount uint256 value to be split.\\r\\n   * @param _payee address seller of the token.\\r\\n   */\\r\\n  function safeTransfer(address payable _payee, uint256 _amount) internal {\\r\\n    // require(_payee != address(0), \\\"payee no zero\\\");\\r\\n\\r\\n    if (_amount > 0) {\\r\\n      nafterToken.safeTransfer(_payee, _amount);\\r\\n    }\\r\\n  }\\r\\n\\r\\n  function safeTransferFrom(\\r\\n    address _from,\\r\\n    address _to,\\r\\n    uint256 _amount\\r\\n  ) internal {\\r\\n    nafterToken.safeTransferFrom(_from, _to, _amount);\\r\\n  }\\r\\n\\r\\n  /////////////////////////////////////////////////////////////////////////\\r\\n  // payout\\r\\n  /////////////////////////////////////////////////////////////////////////\\r\\n  /**\\r\\n   * @dev Internal function to pay the seller, creator, and maintainer.\\r\\n   * Requirements:\\r\\n   *\\r\\n   *  - _marketplacePercentage + _royaltyPercentage + _primarySalePercentage <= 100\\r\\n   *  - no payees can be the zero address\\r\\n   *\\r\\n   * @param _amount uint256 value to be split.\\r\\n   * @param _isPrimarySale bool of whether this is a primary sale.\\r\\n   * @param _marketplacePercentage uint8 percentage of the fee for the marketplace.\\r\\n   * @param _royaltyPercentage uint8 percentage of the fee for the royalty.\\r\\n   * @param _primarySalePercentage uint8 percentage primary sale fee for the marketplace.\\r\\n   * @param _payee address seller of the token.\\r\\n   * @param _marketplacePayee address seller of the token.\\r\\n   * @param _royaltyPayee creater address .\\r\\n   */\\r\\n  function payout(\\r\\n    uint256 _amount,\\r\\n    bool _isPrimarySale,\\r\\n    uint8 _marketplacePercentage,\\r\\n    uint8 _royaltyPercentage,\\r\\n    uint8 _primarySalePercentage,\\r\\n    address payable _payee,\\r\\n    address payable _marketplacePayee,\\r\\n    address payable _royaltyPayee,\\r\\n    // address payable _primarySalePayee,\\r\\n    uint8 _paymentMode,\\r\\n    uint8 _feeConfig\\r\\n  ) internal {\\r\\n    // Note:: Solidity is kind of terrible in that there is a limit to local\\r\\n    //        variables that can be put into the stack. The real pain is that\\r\\n    //        one can put structs, arrays, or mappings into memory but not basic\\r\\n    //        data types. Hence our payments array that stores these values.\\r\\n    uint256[5] memory payments;\\r\\n\\r\\n    // uint256 royaltyPayment\\r\\n    payments[1] = calcRoyaltyPayment(_isPrimarySale, _amount, _royaltyPercentage);\\r\\n\\r\\n    // uint256 primarySalePayment\\r\\n    payments[2] = calcPrimarySalePayment(_isPrimarySale, _amount, _primarySalePercentage);\\r\\n\\r\\n    // uint256 payeePayment\\r\\n    payments[3] = _amount.sub(payments[1]).sub(payments[2]);\\r\\n\\r\\n    if (_paymentMode == 0) {\\r\\n      if (_feeConfig == 1) {\\r\\n        payments[4] = calcPercentagePayment(_amount, _marketplacePercentage);\\r\\n      } else if (_feeConfig == 2) {\\r\\n        payments[0] = calcPercentagePayment(_amount, _marketplacePercentage);\\r\\n      } else if (_feeConfig == 3) {\\r\\n        payments[0] = calcPercentagePayment(_amount, _marketplacePercentage);\\r\\n        payments[4] = calcPercentagePayment(_amount, _marketplacePercentage);\\r\\n      }\\r\\n      // marketplacePayment\\r\\n      if (payments[0] > 0) {\\r\\n        SendValueOrEscrow.sendValueOrEscrow(_marketplacePayee, payments[0]);\\r\\n      }\\r\\n\\r\\n      // royaltyPayment\\r\\n      if (payments[1] > 0) {\\r\\n        SendValueOrEscrow.sendValueOrEscrow(_royaltyPayee, payments[1]);\\r\\n      }\\r\\n      // primarySalePayment\\r\\n      if (payments[2] > 0) {\\r\\n        SendValueOrEscrow.sendValueOrEscrow(_marketplacePayee, payments[2]);\\r\\n      }\\r\\n      if (payments[4] > 0) {\\r\\n        SendValueOrEscrow.sendValueOrEscrow(_marketplacePayee, payments[4]);\\r\\n        payments[3] = payments[3].sub(payments[4]);\\r\\n      }\\r\\n      // payeePayment\\r\\n      if (payments[3] > 0) {\\r\\n        SendValueOrEscrow.sendValueOrEscrow(_payee, payments[3]);\\r\\n      }\\r\\n    } else {\\r\\n      // if (payments[0] > 0) {\\r\\n      //   // SendValueOrEscrow.sendValueOrEscrow(_marketplacePayee, payments[0]);\\r\\n      //   nafterToken.safeTransfer(_marketplacePayee, payments[0]);\\r\\n      // }\\r\\n\\r\\n      // royaltyPayment\\r\\n      if (payments[1] > 0) {\\r\\n        // SendValueOrEscrow.sendValueOrEscrow(_royaltyPayee, payments[1]);\\r\\n        nafterToken.safeTransfer(_royaltyPayee, payments[1]);\\r\\n      }\\r\\n      // primarySalePayment\\r\\n      if (payments[2] > 0) {\\r\\n        // SendValueOrEscrow.sendValueOrEscrow(_primarySalePayee, payments[2]);\\r\\n        nafterToken.safeTransfer(_marketplacePayee, payments[2]);\\r\\n      }\\r\\n      // payeePayment\\r\\n      if (payments[3] > 0) {\\r\\n        // SendValueOrEscrow.sendValueOrEscrow(_payee, payments[3]);\\r\\n        nafterToken.safeTransfer(_payee, payments[3]);\\r\\n      }\\r\\n    }\\r\\n  }\\r\\n\\r\\n  /////////////////////////////////////////////////////////////////////////\\r\\n  // calcRoyaltyPayment\\r\\n  /////////////////////////////////////////////////////////////////////////\\r\\n  /**\\r\\n   * @dev Private function to calculate Royalty amount.\\r\\n   *      If primary sale: 0\\r\\n   *      If no royalty percentage: 0\\r\\n   *      otherwise: royalty in wei\\r\\n   * @param _isPrimarySale bool of whether this is a primary sale\\r\\n   * @param _amount uint256 value to be split\\r\\n   * @param _percentage uint8 royalty percentage\\r\\n   * @return uint256 wei value owed for royalty\\r\\n   */\\r\\n  function calcRoyaltyPayment(\\r\\n    bool _isPrimarySale,\\r\\n    uint256 _amount,\\r\\n    uint8 _percentage\\r\\n  ) private pure returns (uint256) {\\r\\n    if (_isPrimarySale) {\\r\\n      return 0;\\r\\n    }\\r\\n    return calcPercentagePayment(_amount, _percentage);\\r\\n  }\\r\\n\\r\\n  /////////////////////////////////////////////////////////////////////////\\r\\n  // calcPrimarySalePayment\\r\\n  /////////////////////////////////////////////////////////////////////////\\r\\n  /**\\r\\n   * @dev Private function to calculate PrimarySale amount.\\r\\n   *      If not primary sale: 0\\r\\n   *      otherwise: primary sale in wei\\r\\n   * @param _isPrimarySale bool of whether this is a primary sale\\r\\n   * @param _amount uint256 value to be split\\r\\n   * @param _percentage uint8 royalty percentage\\r\\n   * @return uint256 wei value owed for primary sale\\r\\n   */\\r\\n  function calcPrimarySalePayment(\\r\\n    bool _isPrimarySale,\\r\\n    uint256 _amount,\\r\\n    uint8 _percentage\\r\\n  ) private pure returns (uint256) {\\r\\n    if (_isPrimarySale) {\\r\\n      return calcPercentagePayment(_amount, _percentage);\\r\\n    }\\r\\n    return 0;\\r\\n  }\\r\\n\\r\\n  /////////////////////////////////////////////////////////////////////////\\r\\n  // calcPercentagePayment\\r\\n  /////////////////////////////////////////////////////////////////////////\\r\\n  /**\\r\\n   * @dev Internal function to calculate percentage value.\\r\\n   * @param _amount uint256 wei value\\r\\n   * @param _percentage uint8  percentage\\r\\n   * @return uint256 wei value based on percentage.\\r\\n   */\\r\\n  function calcPercentagePayment(uint256 _amount, uint8 _percentage) internal pure returns (uint256) {\\r\\n    return _amount.mul(_percentage).div(100);\\r\\n  }\\r\\n}\\r\\n\"\r\n    },\r\n    \"/Users/mudaseriqbal/Documents/Developer/Luner/nafter.contracts/src/active/MaybeSendValue.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\r\\npragma solidity 0.8.0;\\r\\n\\r\\nimport \\\"./SendValueProxy.sol\\\";\\r\\n\\r\\n/**\\r\\n * @dev Contract with a ISendValueProxy that will catch reverts when attempting to transfer funds.\\r\\n */\\r\\n\\r\\ncontract MaybeSendValue {\\r\\n  // SendValueProxy proxy;\\r\\n\\r\\n  // constructor() {\\r\\n  //     proxy = new SendValueProxy();\\r\\n  // }\\r\\n\\r\\n  /**\\r\\n   * @dev Maybe send some wei to the address via a proxy. Returns true on success and false if transfer fails.\\r\\n   * @param _to address to send some value to.\\r\\n   * @param _value uint256 amount to send.\\r\\n   */\\r\\n  function maybeSendValue(address payable _to, uint256 _value) internal returns (bool) {\\r\\n    _to.transfer(_value);\\r\\n\\r\\n    return true;\\r\\n  }\\r\\n}\\r\\n\"\r\n    },\r\n    \"/Users/mudaseriqbal/Documents/Developer/Luner/nafter.contracts/src/active/ISendValueProxy.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\r\\npragma solidity 0.8.0;\\r\\n\\r\\ninterface ISendValueProxy {\\r\\n  function sendValue(address payable _to) external payable;\\r\\n}\\r\\n\"\r\n    },\r\n    \"/Users/mudaseriqbal/Documents/Developer/Luner/nafter.contracts/src/active/INafterRoyaltyRegistry.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\r\\n\\r\\npragma solidity 0.8.0;\\r\\n\\r\\nimport \\\"./IERC1155TokenCreator.sol\\\";\\r\\n\\r\\n/**\\r\\n * @title IERC1155CreatorRoyalty Token level royalty interface.\\r\\n */\\r\\ninterface INafterRoyaltyRegistry is IERC1155TokenCreator {\\r\\n  /**\\r\\n   * @dev Get the royalty fee percentage for a specific ERC1155 contract.\\r\\n   * @param _tokenId uint256 token ID.\\r\\n   * @return uint8 wei royalty fee.\\r\\n   */\\r\\n  function getTokenRoyaltyPercentage(uint256 _tokenId) external view returns (uint8);\\r\\n\\r\\n  /**\\r\\n   * @dev Utililty function to calculate the royalty fee for a token.\\r\\n   * @param _tokenId uint256 token ID.\\r\\n   * @param _amount uint256 wei amount.\\r\\n   * @return uint256 wei fee.\\r\\n   */\\r\\n  function calculateRoyaltyFee(uint256 _tokenId, uint256 _amount) external view returns (uint256);\\r\\n\\r\\n  /**\\r\\n     * @dev Sets the royalty percentage set for an Nafter token\\r\\n     * Requirements:\\r\\n\\r\\n     * - `_percentage` must be <= 100.\\r\\n     * - only the owner of this contract or the creator can call this method.\\r\\n     * @param _tokenId uint256 token ID.\\r\\n     * @param _percentage uint8 wei royalty fee.\\r\\n     */\\r\\n  function setPercentageForTokenRoyalty(uint256 _tokenId, uint8 _percentage) external returns (uint8);\\r\\n}\\r\\n\"\r\n    },\r\n    \"/Users/mudaseriqbal/Documents/Developer/Luner/nafter.contracts/src/active/INafterMarketAuction.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\r\\n\\r\\npragma solidity 0.8.0;\\r\\n\\r\\ninterface INafterMarketAuction {\\r\\n  /**\\r\\n   * @dev Set the token for sale. The owner of the token must be the sender and have the marketplace approved.\\r\\n   * @param _tokenId uint256 ID of the token\\r\\n   * @param _amount uint256 wei value that the item is for sale\\r\\n   * @param _owner address of the token owner\\r\\n   * @param _paymentMode 0 for ETH/BNB, 1 for NAFT\\r\\n   */\\r\\n  function setSalePrice(\\r\\n    uint256 _tokenId,\\r\\n    uint256 _amount,\\r\\n    address _owner,\\r\\n    uint8 _paymentMode\\r\\n  ) external;\\r\\n\\r\\n  /**\\r\\n   * @dev set\\r\\n   * @param _bidAmount uint256 value in wei to bid.\\r\\n   * @param _startTime end time of bid\\r\\n   * @param _endTime end time of bid\\r\\n   * @param _owner address of the token owner\\r\\n   * @param _tokenId uint256 ID of the token\\r\\n   * @param _paymentMode 0 for ETH/BNB, 1 for NAFT\\r\\n   */\\r\\n  function setInitialBidPriceWithRange(\\r\\n    uint256 _bidAmount,\\r\\n    uint256 _startTime,\\r\\n    uint256 _endTime,\\r\\n    address _owner,\\r\\n    uint256 _tokenId,\\r\\n    uint8 _paymentMode\\r\\n  ) external;\\r\\n\\r\\n  /**\\r\\n   * @dev has active bid\\r\\n   * @param _tokenId uint256 ID of the token\\r\\n   * @param _owner address of the token owner\\r\\n   */\\r\\n  function hasTokenActiveBid(uint256 _tokenId, address _owner) external view returns (bool);\\r\\n}\\r\\n\"\r\n    },\r\n    \"/Users/mudaseriqbal/Documents/Developer/Luner/nafter.contracts/src/active/INafter.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\r\\n\\r\\npragma solidity 0.8.0;\\r\\n\\r\\n/**\\r\\n * @dev Interface for interacting with the Nafter contract that holds Nafter beta tokens.\\r\\n */\\r\\ninterface INafter {\\r\\n  /**\\r\\n   * @dev Gets the creator of the token\\r\\n   * @param _tokenId uint256 ID of the token\\r\\n   * @return address of the creator\\r\\n   */\\r\\n  function creatorOfToken(uint256 _tokenId) external view returns (address payable);\\r\\n\\r\\n  /**\\r\\n   * @dev Gets the Service Fee\\r\\n   * @param _tokenId uint256 ID of the token\\r\\n   * @return address of the creator\\r\\n   */\\r\\n  function getServiceFee(uint256 _tokenId) external view returns (uint8);\\r\\n\\r\\n  /**\\r\\n   * @dev Gets the price type\\r\\n   * @param _tokenId uint256 ID of the token\\r\\n   * @param _owner address of the token owner\\r\\n   * @return get the price type\\r\\n   */\\r\\n  function getPriceType(uint256 _tokenId, address _owner) external view returns (uint8);\\r\\n\\r\\n  /**\\r\\n   * @dev update price only from auction.\\r\\n   * @param _price price of the token\\r\\n   * @param _tokenId uint256 id of the token.\\r\\n   * @param _owner address of the token owner\\r\\n   */\\r\\n  function setPrice(\\r\\n    uint256 _price,\\r\\n    uint256 _tokenId,\\r\\n    address _owner\\r\\n  ) external;\\r\\n\\r\\n  /**\\r\\n   * @dev update bids only from auction.\\r\\n   * @param _bid bid Amount\\r\\n   * @param _bidder bidder address\\r\\n   * @param _tokenId uint256 id of the token.\\r\\n   * @param _owner address of the token owner\\r\\n   */\\r\\n  function setBid(\\r\\n    uint256 _bid,\\r\\n    address _bidder,\\r\\n    uint256 _tokenId,\\r\\n    address _owner\\r\\n  ) external;\\r\\n\\r\\n  /**\\r\\n   * @dev remove token from sale\\r\\n   * @param _tokenId uint256 id of the token.\\r\\n   * @param _owner owner of the token\\r\\n   */\\r\\n  function removeFromSale(uint256 _tokenId, address _owner) external;\\r\\n\\r\\n  /**\\r\\n   * @dev get tokenIds length\\r\\n   */\\r\\n  function getTokenIdsLength() external view returns (uint256);\\r\\n\\r\\n  /**\\r\\n   * @dev get token Id\\r\\n   * @param _index uint256 index\\r\\n   */\\r\\n  function getTokenId(uint256 _index) external view returns (uint256);\\r\\n\\r\\n  /**\\r\\n   * @dev Gets the owners\\r\\n   * @param _tokenId uint256 ID of the token\\r\\n   */\\r\\n  function getOwners(uint256 _tokenId) external view returns (address[] memory owners);\\r\\n\\r\\n  /**\\r\\n   * @dev Gets the is for sale\\r\\n   * @param _tokenId uint256 ID of the token\\r\\n   * @param _owner address of the token owner\\r\\n   */\\r\\n  function getIsForSale(uint256 _tokenId, address _owner) external view returns (bool);\\r\\n\\r\\n  // function getTokenInfo(uint256 _tokenId)\\r\\n  //       external\\r\\n  //       view\\r\\n  //       returns (\\r\\n  //           address,\\r\\n  //           uint256,\\r\\n  //           address[] memory,\\r\\n  //           uint8,\\r\\n  //           uint256\\r\\n  // );\\r\\n  /**\\r\\n   * @dev add token and set the price.\\r\\n   * @param _price price of the item.\\r\\n   * @param _tokenAmount total token amount available\\r\\n   * @param _isForSale if is for sale\\r\\n   * @param _priceType 0 is for fixed, 1 is for Auction Time bound, 2 is for Auction Infinite\\r\\n   * @param _royaltyPercentage royalty percentage of creator\\r\\n   * @param _tokenId uint256 ID of the token.\\r\\n   * @param _creator address of the creator\\r\\n   * @param _minter address of minter\\r\\n   */\\r\\n  function addNewTokenAndSetThePriceWithIdAndMinter(\\r\\n    uint256 _tokenAmount,\\r\\n    bool _isForSale,\\r\\n    uint256 _price,\\r\\n    uint8 _priceType,\\r\\n    uint8 _royaltyPercentage,\\r\\n    uint256 _tokenId,\\r\\n    address _creator,\\r\\n    address _minter\\r\\n  ) external;\\r\\n\\r\\n  /**\\r\\n   * @dev redeem to add a new token.\\r\\n   * @param _creator address of the creator of the token.\\r\\n   * @param _tokenAmount total token amount available\\r\\n   * @param _isForSale if is for sale\\r\\n   * @param _price price of the token, 0 is for not set the price.\\r\\n   * @param _priceType 0 is for fixed, 1 is for Auction Time bound, 2 is for Auction Infinite\\r\\n   * @param _royaltyPercentage royalty percentage of creator\\r\\n   * @param _startTime start time of bid, pass 0 of _priceType is not 1\\r\\n   * @param _endTime end time of bid, pass 0 of _priceType is not 1\\r\\n   * @param _tokenId uint256 token id\\r\\n   * @param _paymentMode 0 for ETH/BNB, 1 for NAFT\\r\\n   */\\r\\n  function verify(\\r\\n    address _creator,\\r\\n    uint256 _tokenAmount,\\r\\n    bool _isForSale,\\r\\n    uint256 _price,\\r\\n    uint8 _priceType,\\r\\n    uint8 _royaltyPercentage,\\r\\n    uint256 _startTime,\\r\\n    uint256 _endTime,\\r\\n    uint256 _tokenId,\\r\\n    uint8 _paymentMode,\\r\\n    bytes calldata _signature\\r\\n  ) external view;\\r\\n\\r\\n  /**\\r\\n   * @dev set approval for all by MAU.\\r\\n   * @param _creator address of the creator of the token.\\r\\n   * @param _operator address of operator\\r\\n   * @param _approved approve status\\r\\n   */\\r\\n  function setApprovalForAllByNMA(\\r\\n    address _creator,\\r\\n    address _operator,\\r\\n    bool _approved\\r\\n  ) external;\\r\\n}\\r\\n\"\r\n    },\r\n    \"/Users/mudaseriqbal/Documents/Developer/Luner/nafter.contracts/src/active/IMarketplaceSettings.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\r\\n\\r\\npragma solidity 0.8.0;\\r\\n\\r\\n/**\\r\\n * @title IMarketplaceSettings Settings governing a marketplace.\\r\\n */\\r\\ninterface IMarketplaceSettings {\\r\\n  /////////////////////////////////////////////////////////////////////////\\r\\n  // Marketplace Min and Max Values\\r\\n  /////////////////////////////////////////////////////////////////////////\\r\\n  /**\\r\\n   * @dev Get the max value to be used with the marketplace.\\r\\n   * @return uint256 wei value.\\r\\n   */\\r\\n  function getMarketplaceMaxValue() external view returns (uint256);\\r\\n\\r\\n  /**\\r\\n   * @dev Get the max value to be used with the marketplace.\\r\\n   * @return uint256 wei value.\\r\\n   */\\r\\n  function getMarketplaceMinValue() external view returns (uint256);\\r\\n\\r\\n  /////////////////////////////////////////////////////////////////////////\\r\\n  // Marketplace Fee\\r\\n  /////////////////////////////////////////////////////////////////////////\\r\\n  /**\\r\\n   * @dev Get the marketplace fee percentage.\\r\\n   * @return uint8 wei fee.\\r\\n   */\\r\\n  function getMarketplaceFeePercentage() external view returns (uint8);\\r\\n\\r\\n  /**\\r\\n   * @dev Utility function for calculating the marketplace fee for given amount of wei.\\r\\n   * @param _amount uint256 wei amount.\\r\\n   * @return uint256 wei fee.\\r\\n   */\\r\\n  function calculateMarketplaceFee(uint256 _amount) external view returns (uint256);\\r\\n\\r\\n  /////////////////////////////////////////////////////////////////////////\\r\\n  // Primary Sale Fee\\r\\n  /////////////////////////////////////////////////////////////////////////\\r\\n  /**\\r\\n   * @dev Get the primary sale fee percentage for a specific ERC1155 contract.\\r\\n   * @return uint8 wei primary sale fee.\\r\\n   */\\r\\n  function getERC1155ContractPrimarySaleFeePercentage() external view returns (uint8);\\r\\n\\r\\n  /**\\r\\n   * @dev Utility function for calculating the primary sale fee for given amount of wei\\r\\n   * @param _amount uint256 wei amount.\\r\\n   * @return uint256 wei fee.\\r\\n   */\\r\\n  function calculatePrimarySaleFee(uint256 _amount) external view returns (uint256);\\r\\n\\r\\n  /**\\r\\n   * @dev Check whether the ERC1155 token has sold at least once.\\r\\n   * @param _tokenId uint256 token ID.\\r\\n   * @return bool of whether the token has sold.\\r\\n   */\\r\\n  function hasTokenSold(uint256 _tokenId) external view returns (bool);\\r\\n\\r\\n  /**\\r\\n     * @dev Mark a token as sold.\\r\\n\\r\\n     * Requirements:\\r\\n     *\\r\\n     * - `_contractAddress` cannot be the zero address.\\r\\n\\r\\n     * @param _tokenId uint256 token ID.\\r\\n     * @param _hasSold bool of whether the token should be marked sold or not.\\r\\n     */\\r\\n  function markERC1155Token(uint256 _tokenId, bool _hasSold) external;\\r\\n}\\r\\n\"\r\n    },\r\n    \"/Users/mudaseriqbal/Documents/Developer/Luner/nafter.contracts/src/active/IERC1155TokenCreator.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\r\\n\\r\\npragma solidity 0.8.0;\\r\\n\\r\\n/**\\r\\n * @title IERC1155 Non-Fungible Token Creator basic interface\\r\\n */\\r\\ninterface IERC1155TokenCreator {\\r\\n  /**\\r\\n   * @dev Gets the creator of the token\\r\\n   * @param _tokenId uint256 ID of the token\\r\\n   * @return address of the creator\\r\\n   */\\r\\n  function tokenCreator(uint256 _tokenId) external view returns (address payable);\\r\\n}\\r\\n\"\r\n    }\r\n  },\r\n  \"settings\": {\r\n    \"remappings\": [],\r\n    \"optimizer\": {\r\n      \"enabled\": true,\r\n      \"runs\": 200\r\n    },\r\n    \"evmVersion\": \"istanbul\",\r\n    \"libraries\": {},\r\n    \"outputSelection\": {\r\n      \"*\": {\r\n        \"*\": [\r\n          \"evm.bytecode\",\r\n          \"evm.deployedBytecode\",\r\n          \"abi\"\r\n        ]\r\n      }\r\n    }\r\n  }\r\n}}","ABI":"[{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"_bidder\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"_seller\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"_tokenId\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint8\",\"name\":\"_paymentMode\",\"type\":\"uint8\"}],\"name\":\"AcceptBid\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"_bidder\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"_tokenId\",\"type\":\"uint256\"}],\"name\":\"Bid\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"_bidder\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"_tokenId\",\"type\":\"uint256\"}],\"name\":\"CancelBid\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"previousAdminRole\",\"type\":\"bytes32\"},{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"newAdminRole\",\"type\":\"bytes32\"}],\"name\":\"RoleAdminChanged\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"}],\"name\":\"RoleGranted\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"}],\"name\":\"RoleRevoked\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"_payee\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"SendValue\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"_buyer\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"_seller\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"_tokenId\",\"type\":\"uint256\"}],\"name\":\"Sold\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"DEFAULT_ADMIN_ROLE\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_iMarketSettings\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_iERC1155CreatorRoyalty\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_nafter\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_nafterToken\",\"type\":\"address\"}],\"name\":\"__NafterMarketAuction_init\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_tokenId\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"_owner\",\"type\":\"address\"}],\"name\":\"acceptBid\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_newBidAmount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_tokenId\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"_owner\",\"type\":\"address\"},{\"internalType\":\"uint8\",\"name\":\"_paymentMode\",\"type\":\"uint8\"}],\"name\":\"bid\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"bidBalance\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_tokenId\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"_owner\",\"type\":\"address\"},{\"internalType\":\"uint8\",\"name\":\"_paymentMode\",\"type\":\"uint8\"}],\"name\":\"buy\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_tokenId\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"_owner\",\"type\":\"address\"}],\"name\":\"cancelBid\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_tokenId\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"_owner\",\"type\":\"address\"}],\"name\":\"currentBidDetailsOfToken\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"},{\"internalType\":\"uint8\",\"name\":\"\",\"type\":\"uint8\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_tokenId\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"_owner\",\"type\":\"address\"}],\"name\":\"currentSalePrice\",\"outputs\":[{\"internalType\":\"address payable\",\"name\":\"\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"},{\"internalType\":\"uint8\",\"name\":\"\",\"type\":\"uint8\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"erc1155\",\"outputs\":[{\"internalType\":\"contract IERC1155\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"feeConfig\",\"outputs\":[{\"internalType\":\"uint8\",\"name\":\"\",\"type\":\"uint8\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_tokenId\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"_owner\",\"type\":\"address\"}],\"name\":\"getActiveBid\",\"outputs\":[{\"internalType\":\"address payable\",\"name\":\"\",\"type\":\"address\"},{\"internalType\":\"uint8\",\"name\":\"\",\"type\":\"uint8\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_tokenId\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"_owner\",\"type\":\"address\"}],\"name\":\"getActiveBidRange\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"}],\"name\":\"getRoleAdmin\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_tokenId\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"_owner\",\"type\":\"address\"}],\"name\":\"getSalePrice\",\"outputs\":[{\"internalType\":\"address payable\",\"name\":\"\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"grantRole\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"hasRole\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_tokenId\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"_owner\",\"type\":\"address\"}],\"name\":\"hasTokenActiveBid\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"iERC1155CreatorRoyalty\",\"outputs\":[{\"internalType\":\"contract INafterRoyaltyRegistry\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"iMarketplaceSettings\",\"outputs\":[{\"internalType\":\"contract IMarketplaceSettings\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_tokenAmount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_price\",\"type\":\"uint256\"},{\"internalType\":\"uint8\",\"name\":\"_priceType\",\"type\":\"uint8\"},{\"internalType\":\"uint8\",\"name\":\"_royaltyPercentage\",\"type\":\"uint8\"},{\"internalType\":\"uint256\",\"name\":\"_startTime\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_endTime\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_tokenId\",\"type\":\"uint256\"},{\"internalType\":\"uint8\",\"name\":\"_paymentMode\",\"type\":\"uint8\"},{\"internalType\":\"bytes\",\"name\":\"_signature\",\"type\":\"bytes\"},{\"internalType\":\"address\",\"name\":\"_creator\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_newBidAmount\",\"type\":\"uint256\"}],\"name\":\"lazyMintingBid\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_tokenAmount\",\"type\":\"uint256\"},{\"internalType\":\"bool\",\"name\":\"_isForSale\",\"type\":\"bool\"},{\"internalType\":\"uint256\",\"name\":\"_price\",\"type\":\"uint256\"},{\"internalType\":\"uint8\",\"name\":\"_royaltyPercentage\",\"type\":\"uint8\"},{\"internalType\":\"uint256\",\"name\":\"_tokenId\",\"type\":\"uint256\"},{\"internalType\":\"uint8\",\"name\":\"_paymentMode\",\"type\":\"uint8\"},{\"internalType\":\"bytes\",\"name\":\"_signature\",\"type\":\"bytes\"},{\"internalType\":\"address\",\"name\":\"_creator\",\"type\":\"address\"}],\"name\":\"lazyMintingBuy\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"minimumBidIncreasePercentage\",\"outputs\":[{\"internalType\":\"uint8\",\"name\":\"\",\"type\":\"uint8\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"nafter\",\"outputs\":[{\"internalType\":\"contract INafter\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"nafterBidBalance\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"nafterToken\",\"outputs\":[{\"internalType\":\"contract IERC20\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"dest\",\"type\":\"address\"}],\"name\":\"payments\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"renounceRole\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_oldAddress\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_oldNafterAddress\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_startIndex\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_endIndex\",\"type\":\"uint256\"}],\"name\":\"restore\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"revokeRole\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_nafter\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_royalty\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_token\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_marketplaceSettings\",\"type\":\"address\"},{\"internalType\":\"uint8\",\"name\":\"_percentage\",\"type\":\"uint8\"},{\"internalType\":\"uint8\",\"name\":\"_feeConfig\",\"type\":\"uint8\"}],\"name\":\"setData\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_bidAmount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_startTime\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_endTime\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"_owner\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_tokenId\",\"type\":\"uint256\"},{\"internalType\":\"uint8\",\"name\":\"_paymentMode\",\"type\":\"uint8\"}],\"name\":\"setInitialBidPriceWithRange\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_tokenId\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"_owner\",\"type\":\"address\"},{\"internalType\":\"uint8\",\"name\":\"_paymentMode\",\"type\":\"uint8\"}],\"name\":\"setSalePrice\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_wallet\",\"type\":\"address\"}],\"name\":\"setWallet\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes4\",\"name\":\"interfaceId\",\"type\":\"bytes4\"}],\"name\":\"supportsInterface\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_tokenId\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"_owner\",\"type\":\"address\"}],\"name\":\"tokenPrice\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_tokenId\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"_owner\",\"type\":\"address\"}],\"name\":\"tokenPriceFeeIncluded\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"wallet\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"withdrawMarketFunds\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address payable\",\"name\":\"payee\",\"type\":\"address\"}],\"name\":\"withdrawPayments\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"stateMutability\":\"payable\",\"type\":\"receive\"}]","ContractName":"NafterMarketAuction","CompilerVersion":"v0.8.0+commit.c7dfd78e","OptimizationUsed":"1","Runs":"200","ConstructorArguments":"","EVMVersion":"Default","Library":"","LicenseType":"","Proxy":"0","Implementation":"","SwarmSource":""}]}