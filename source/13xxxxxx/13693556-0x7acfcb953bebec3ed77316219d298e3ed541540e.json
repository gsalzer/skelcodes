{"status":"1","message":"OK","result":[{"SourceCode":"{{\r\n  \"language\": \"Solidity\",\r\n  \"sources\": {\r\n    \"contracts/FoxGame_v1_0.sol\": {\r\n      \"content\": \"/*\\n███████╗ ██████╗ ██╗  ██╗     ██████╗  █████╗ ███╗   ███╗███████╗\\n██╔════╝██╔═══██╗╚██╗██╔╝    ██╔════╝ ██╔══██╗████╗ ████║██╔════╝\\n█████╗  ██║   ██║ ╚███╔╝     ██║  ███╗███████║██╔████╔██║█████╗  \\n██╔══╝  ██║   ██║ ██╔██╗     ██║   ██║██╔══██║██║╚██╔╝██║██╔══╝  \\n██║     ╚██████╔╝██╔╝ ██╗    ╚██████╔╝██║  ██║██║ ╚═╝ ██║███████╗\\n╚═╝      ╚═════╝ ╚═╝  ╚═╝     ╚═════╝ ╚═╝  ╚═╝╚═╝     ╚═╝╚══════╝\\n*/\\n\\n// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.10;\\n\\nimport \\\"@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol\\\";\\nimport \\\"@openzeppelin/contracts-upgradeable/security/PausableUpgradeable.sol\\\";\\nimport \\\"@openzeppelin/contracts-upgradeable/security/ReentrancyGuardUpgradeable.sol\\\";\\nimport \\\"@openzeppelin/contracts-upgradeable/token/ERC721/IERC721ReceiverUpgradeable.sol\\\";\\nimport \\\"@openzeppelin/contracts-upgradeable/utils/cryptography/ECDSAUpgradeable.sol\\\";\\n\\nimport \\\"./IFoxGame.sol\\\";\\nimport \\\"./IFoxGameCarrot.sol\\\";\\nimport \\\"./IFoxGameNFT.sol\\\";\\n\\ncontract FoxGame_v1_0 is IFoxGame, OwnableUpgradeable, IERC721ReceiverUpgradeable,\\n                    PausableUpgradeable, ReentrancyGuardUpgradeable {\\n  using ECDSAUpgradeable for bytes32; // signature verification helpers\\n\\n  /****\\n   * Thanks for checking out our contracts.\\n   * If you're interested in working with us, you can find us on\\n   * discord (https://discord.gg/foxgame). We also have a bug bounty\\n   * program and are available at @officialfoxgame or bugs@fox.game.\\n   ***/\\n\\n  // Maximum advantage score for both foxes and hunters\\n  uint8 public constant MAX_ADVANTAGE = 8;\\n\\n  // Foxes take a 20% tax on all rabbiot $CARROT claimed\\n  uint8 public constant RABBIT_CLAIM_TAX_PERCENTAGE = 20;\\n\\n  // Hunters have a 5% chance of stealing a fox as it unstakes\\n  uint8 private hunterStealFoxProbabilityMod;\\n\\n  // Cut between hunters and foxes\\n  uint8 private hunterTaxCutPercentage;\\n\\n  // Flag to allow smart contacts if ever needed\\n  bool private eosOnlyEnabled;\\n\\n  // Total hunter marksman scores staked\\n  uint16 public totalMarksmanPointsStaked;\\n\\n  // Total fox cunning scores staked\\n  uint16 public totalCunningPointsStaked;\\n\\n  // Number of Rabbit staked\\n  uint32 public totalRabbitsStaked;\\n\\n  // Number of Foxes staked\\n  uint32 public totalFoxesStaked;\\n\\n  // Number of Hunters staked\\n  uint32 public totalHuntersStaked;\\n\\n  // The last time $CARROT was claimed\\n  uint48 public lastClaimTimestamp;\\n\\n  // Rabbits must have 2 days worth of $CARROT to unstake or else it's too cold\\n  uint48 public constant RABBIT_MINIMUM_TO_EXIT = 2 days;\\n\\n  // There will only ever be (roughly) 2.5 billion $CARROT earned through staking\\n  uint128 public constant MAXIMUM_GLOBAL_CARROT = 2500000000 ether;\\n\\n  // amount of $CARROT earned so far\\n  uint128 public totalCarrotEarned;\\n\\n  // Collected rewards before any foxes staked\\n  uint128 public unaccountedFoxRewards;\\n\\n  // Collected rewards before any foxes staked\\n  uint128 public unaccountedHunterRewards;\\n\\n  // Amount of $CARROT due for each cunning point staked\\n  uint128 public carrotPerCunningPoint;\\n\\n  // Amount of $CARROT due for each marksman point staked\\n  uint128 public carrotPerMarksmanPoint; \\n\\n  // Rabbit earn 10000 $CARROT per day\\n  uint128 public constant RABBIT_EARNING_RATE = 115740740740740740; // 10000 ether / 1 days;\\n\\n  // Hunters earn 20000 $CARROT per day\\n  uint128 public constant HUNTER_EARNING_RATE = 231481481481481470; // 20000 ether / 1 days;\\n\\n  // Staking maps for both time-based and ad-hoc-earning-based\\n  struct TimeStake { uint16 tokenId; uint48 time; address owner; }\\n  struct EarningStake { uint16 tokenId; uint128 earningRate; address owner; }\\n\\n  // Events\\n  event TokenStaked(string kind, uint16 tokenId, address owner);\\n  event TokenUnstaked(string kind, uint16 tokenId, address owner, uint128 earnings);\\n  event FoxStolen(uint16 foxTokenId, address thief, address victim);\\n\\n  // Signature to prove membership and randomness\\n  address private signVerifier;\\n\\n  // External contract reference\\n  IFoxGameNFT private foxNFT;\\n  IFoxGameCarrot private foxCarrot;\\n\\n  // Staked rabbits\\n  mapping(uint16 => TimeStake) public rabbitStakeByToken;\\n\\n  // Staked foxes\\n  mapping(uint8 => EarningStake[]) public foxStakeByCunning; // foxes grouped by cunning\\n  mapping(uint16 => uint16) public foxHierarchy; // fox location within cunning group\\n\\n  // Staked hunters\\n  mapping(uint16 => TimeStake) public hunterStakeByToken;\\n  mapping(uint8 => EarningStake[]) public hunterStakeByMarksman; // hunter grouped by markman\\n  mapping(uint16 => uint16) public hunterHierarchy; // hunter location within marksman group\\n\\n  // FoxGame membership date\\n  mapping(address => uint48) public membershipDate;\\n\\n  /**\\n   * Init contract upgradability (only called once).\\n   */\\n  function initialize() public initializer {\\n    __Ownable_init();\\n    __ReentrancyGuard_init();\\n    __Pausable_init();\\n\\n    eosOnlyEnabled = true;\\n    hunterStealFoxProbabilityMod = 20; // 100/5=20\\n    hunterTaxCutPercentage = 30; // whole number %\\n\\n    // Pause staking on init\\n    _pause();\\n  }\\n\\n  /**\\n   * FoxGames welcomes you to the club!\\n   */\\n  function joinFoxGames() external _eosOnly {\\n    require(membershipDate[msg.sender] == 0, \\\"already joined\\\");\\n    membershipDate[msg.sender] = uint48(block.timestamp);\\n  }\\n\\n  /**\\n   * Hash together proof of membership and randomness.\\n   */\\n  function getSigningHash(address recipient, bool membership, uint48 expiration, uint256 seed) public pure returns (bytes32) {\\n    return keccak256(abi.encodePacked(recipient, membership, expiration, seed));\\n  }\\n\\n  /**\\n   * Validate mebership and randomness.\\n   */\\n  function isValidSignature(address recipient, bool membership, uint48 expiration, uint256 seed, bytes memory sig) public view returns (bool) {\\n    bytes32 message = getSigningHash(recipient, membership, expiration, seed).toEthSignedMessageHash();\\n    return ECDSAUpgradeable.recover(message, sig) == signVerifier;\\n  }\\n\\n  /**\\n   * Adds Rabbits, Foxes and Hunters to their respective safe homes.\\n   * @param account the address of the staker\\n   * @param tokenIds the IDs of the Rabbit and Foxes to stake\\n   */\\n  function stakeTokens(address account, uint16[] calldata tokenIds) external whenNotPaused nonReentrant _updateEarnings {\\n    require(account == msg.sender || msg.sender == address(foxNFT), \\\"only owned tokens can be staked\\\");\\n    for (uint16 i = 0; i < tokenIds.length; i++) {\\n\\n      // Transfer into safe house\\n      if (msg.sender != address(foxNFT)) { // dont do this step if its a mint + stake\\n        require(foxNFT.ownerOf(tokenIds[i]) == msg.sender, \\\"only token owners can stake\\\");\\n        foxNFT.transferFrom(msg.sender, address(this), tokenIds[i]);\\n      } else if (tokenIds[i] == 0) {\\n        // there can be gaps during mint, as tokens can be stolen\\n        continue;\\n      }\\n\\n      // Add to respective safe homes\\n      IFoxGameNFT.Kind kind = _getKind(tokenIds[i]);\\n      if (kind == IFoxGameNFT.Kind.RABBIT) {\\n        _addRabbitToKeep(account, tokenIds[i]);\\n      } else if (kind == IFoxGameNFT.Kind.FOX) {\\n        _addFoxToDen(account, tokenIds[i]);\\n      } else { // HUNTER\\n        _addHunterToCabin(account, tokenIds[i]);\\n      }\\n    }\\n  }\\n\\n  /**\\n   * Adds Rabbit to the Keep.\\n   * @param account the address of the staker\\n   * @param tokenId the ID of the Rabbit to add to the Barn\\n   */\\n  function _addRabbitToKeep(address account, uint16 tokenId) internal {\\n    rabbitStakeByToken[tokenId] = TimeStake({\\n      owner: account,\\n      tokenId: tokenId,\\n      time: uint48(block.timestamp)\\n    });\\n    totalRabbitsStaked += 1;\\n    emit TokenStaked(\\\"RABBIT\\\", tokenId, account);\\n  }\\n\\n  /**\\n   * Add Fox to the Den.\\n   * @param account the address of the staker\\n   * @param tokenId the ID of the Fox\\n   */\\n  function _addFoxToDen(address account, uint16 tokenId) internal {\\n    uint8 cunning = _getAdvantagePoints(tokenId);\\n    totalCunningPointsStaked += cunning;\\n    // Store fox by rating\\n    foxHierarchy[tokenId] = uint16(foxStakeByCunning[cunning].length);\\n    // Add fox to their cunning group\\n    foxStakeByCunning[cunning].push(EarningStake({\\n      owner: account,\\n      tokenId: tokenId,\\n      earningRate: carrotPerCunningPoint\\n    }));\\n    totalFoxesStaked += 1;\\n    emit TokenStaked(\\\"FOX\\\", tokenId, account);\\n  }\\n\\n  /**\\n   * Adds Hunter to the Cabin.\\n   * @param account the address of the staker\\n   * @param tokenId the ID of the Hunter\\n   */\\n  function _addHunterToCabin(address account, uint16 tokenId) internal {\\n    uint8 marksman = _getAdvantagePoints(tokenId);\\n    totalMarksmanPointsStaked += marksman;\\n    // Store hunter by rating\\n    hunterHierarchy[tokenId] = uint16(hunterStakeByMarksman[marksman].length);\\n    // Add hunter to their marksman group\\n    hunterStakeByMarksman[marksman].push(EarningStake({\\n      owner: account,\\n      tokenId: tokenId,\\n      earningRate: carrotPerMarksmanPoint\\n    }));\\n    hunterStakeByToken[tokenId] = TimeStake({\\n      owner: account,\\n      tokenId: tokenId,\\n      time: uint48(block.timestamp)\\n    });\\n    totalHuntersStaked += 1;\\n    emit TokenStaked(\\\"HUNTER\\\", tokenId, account);\\n  }\\n\\n  /**\\n   * Realize $CARROT earnings and optionally unstake tokens.\\n   * @param tokenIds the IDs of the tokens to claim earnings from\\n   * @param unstake whether or not to unstake ALL of the tokens listed in tokenIds\\n   * @param membership wheather user is membership or not\\n   * @param seed account seed\\n   * @param sig signature\\n   */\\n  function claimRewardsAndUnstake(uint16[] calldata tokenIds, bool unstake, bool membership, uint48 expiration, uint256 seed, bytes memory sig) external whenNotPaused nonReentrant _eosOnly _updateEarnings {\\n    require(isValidSignature(msg.sender, membership, expiration, seed, sig), \\\"invalid signature\\\");\\n\\n    uint128 reward;\\n    IFoxGameNFT.Kind kind;\\n    uint48 time = uint48(block.timestamp);\\n    for (uint8 i = 0; i < tokenIds.length; i++) {\\n      kind = _getKind(tokenIds[i]);\\n      if (kind == IFoxGameNFT.Kind.RABBIT) {\\n        reward += _claimRabbitsFromKeep(tokenIds[i], unstake, time, seed);\\n      } else if (kind == IFoxGameNFT.Kind.FOX) {\\n        reward += _claimFoxFromDen(tokenIds[i], unstake, seed);\\n      } else { // HUNTER\\n        reward += _claimHunterFromCabin(tokenIds[i], unstake, time);\\n      }\\n    }\\n    if (reward != 0) {\\n      foxCarrot.mint(msg.sender, reward);\\n    }\\n  }\\n\\n  /**\\n   * realize $CARROT earnings for a single Rabbit and optionally unstake it\\n   * if not unstaking, pay a 20% tax to the staked foxes\\n   * if unstaking, there is a 50% chance all $CARROT is stolen\\n   * @param tokenId the ID of the Rabbit to claim earnings from\\n   * @param unstake whether or not to unstake the Rabbit\\n   * @param time currnet block time\\n   * @param seed account seed\\n   * @return reward - the amount of $CARROT earned\\n   */\\n  function _claimRabbitsFromKeep(uint16 tokenId, bool unstake, uint48 time, uint256 seed) internal returns (uint128 reward) {\\n    TimeStake memory stake = rabbitStakeByToken[tokenId];\\n    require(stake.owner == msg.sender, \\\"only token owners can unstake\\\");\\n    require(!(unstake && block.timestamp - stake.time < RABBIT_MINIMUM_TO_EXIT), \\\"rabbits need 2 days of carrot\\\");\\n\\n    // Calcuate time-based rewards\\n    if (totalCarrotEarned < MAXIMUM_GLOBAL_CARROT) {\\n      reward = (time - stake.time) * RABBIT_EARNING_RATE;\\n    } else if (stake.time <= lastClaimTimestamp) {\\n      // stop earning additional $CARROT if it's all been earned\\n      reward = (lastClaimTimestamp - stake.time) * RABBIT_EARNING_RATE;\\n    }\\n\\n    // Update reward based on game rules\\n    if (unstake) {\\n      // 50% chance of all $CARROT stolen\\n      if (((seed >> 245) % 2) == 0) {\\n        _payTaxToPredators(reward, true);\\n        reward = 0;\\n      }\\n      delete rabbitStakeByToken[tokenId];\\n      totalRabbitsStaked -= 1;\\n      // send back Rabbit\\n      foxNFT.safeTransferFrom(address(this), msg.sender, tokenId, \\\"\\\");\\n    } else {\\n      // Pay foxes their tax\\n      _payTaxToPredators(reward * RABBIT_CLAIM_TAX_PERCENTAGE / 100, false);\\n      reward = reward * (100 - RABBIT_CLAIM_TAX_PERCENTAGE) / 100;\\n      // Update last earned time\\n      rabbitStakeByToken[tokenId] = TimeStake({\\n        owner: msg.sender,\\n        tokenId: tokenId,\\n        time: time\\n      });\\n    }\\n\\n    emit TokenUnstaked(\\\"RABBIT\\\", tokenId, stake.owner, reward);\\n  }\\n\\n  /**\\n   * realize $CARROT earnings for a single Fox and optionally unstake it\\n   * foxes earn $CARROT proportional to their Alpha rank\\n   * @param tokenId the ID of the Fox to claim earnings from\\n   * @param unstake whether or not to unstake the Fox\\n   * @param seed account seed\\n   * @return reward - the amount of $CARROT earned\\n   */\\n  function _claimFoxFromDen(uint16 tokenId, bool unstake, uint256 seed) internal returns (uint128 reward) {\\n    require(foxNFT.ownerOf(tokenId) == address(this), \\\"must be staked to claim rewards\\\");\\n    uint8 cunning = _getAdvantagePoints(tokenId);\\n    EarningStake memory stake = foxStakeByCunning[cunning][foxHierarchy[tokenId]];\\n    require(stake.owner == msg.sender, \\\"only token owners can unstake\\\");\\n\\n    // Calculate advantage-based rewards\\n    reward = (cunning) * (carrotPerCunningPoint - stake.earningRate);\\n    if (unstake) {\\n      totalCunningPointsStaked -= cunning; // Remove Alpha from total staked\\n      EarningStake memory lastStake = foxStakeByCunning[cunning][foxStakeByCunning[cunning].length - 1];\\n      foxStakeByCunning[cunning][foxHierarchy[tokenId]] = lastStake; // Shuffle last Fox to current position\\n      foxHierarchy[lastStake.tokenId] = foxHierarchy[tokenId];\\n      foxStakeByCunning[cunning].pop(); // Remove duplicate\\n      delete foxHierarchy[tokenId]; // Delete old mapping\\n\\n      // Determine if Fox should be stolen by hunter\\n      address recipient = msg.sender;\\n      if (((seed >> 245) % hunterStealFoxProbabilityMod) == 0) {\\n        recipient = _randomHunterOwner(seed);\\n        if (recipient == address(0x0)) {\\n          recipient = msg.sender;\\n        } else if (recipient != msg.sender) {\\n          emit FoxStolen(tokenId, recipient, msg.sender);\\n        }\\n      }\\n      foxNFT.safeTransferFrom(address(this), recipient, tokenId, \\\"\\\");\\n    } else {\\n      // Update earning rate\\n      foxStakeByCunning[cunning][foxHierarchy[tokenId]] = EarningStake({\\n        owner: msg.sender,\\n        tokenId: tokenId,\\n        earningRate: carrotPerCunningPoint\\n      });\\n    }\\n\\n    emit TokenUnstaked(\\\"FOX\\\", tokenId, stake.owner, reward);\\n  }\\n\\n  /**\\n   * realize $CARROT earnings for a single Fox and optionally unstake it\\n   * foxes earn $CARROT proportional to their Alpha rank\\n   * @param tokenId the ID of the Fox to claim earnings from\\n   * @param unstake whether or not to unstake the Fox\\n   * @param time currnet block time\\n   * @return reward - the amount of $CARROT earned\\n   */\\n  function _claimHunterFromCabin(uint16 tokenId, bool unstake, uint48 time) internal returns (uint128 reward) {\\n    require(foxNFT.ownerOf(tokenId) == address(this), \\\"must be staked to claim rewards\\\");\\n    uint8 marksman = _getAdvantagePoints(tokenId);\\n    EarningStake memory earningStake = hunterStakeByMarksman[marksman][hunterHierarchy[tokenId]];\\n    require(earningStake.owner == msg.sender, \\\"only token owners can unstake\\\");\\n\\n    // Calculate advantage-based rewards\\n    reward = (marksman) * (carrotPerMarksmanPoint - earningStake.earningRate);\\n    if (unstake) {\\n      totalMarksmanPointsStaked -= marksman; // Remove Alpha from total staked\\n      EarningStake memory lastStake = hunterStakeByMarksman[marksman][hunterStakeByMarksman[marksman].length - 1];\\n      hunterStakeByMarksman[marksman][hunterHierarchy[tokenId]] = lastStake; // Shuffle last Fox to current position\\n      hunterHierarchy[lastStake.tokenId] = hunterHierarchy[tokenId];\\n      hunterStakeByMarksman[marksman].pop(); // Remove duplicate\\n      delete hunterHierarchy[tokenId]; // Delete old mapping\\n    } else {\\n      // Update earning rate\\n      hunterStakeByMarksman[marksman][hunterHierarchy[tokenId]] = EarningStake({\\n        owner: msg.sender,\\n        tokenId: tokenId,\\n        earningRate: carrotPerMarksmanPoint\\n      });\\n    }\\n\\n    // Calcuate time-based rewards\\n    TimeStake memory timeStake = hunterStakeByToken[tokenId];\\n    require(timeStake.owner == msg.sender, \\\"only token owners can unstake\\\");\\n    if (totalCarrotEarned < MAXIMUM_GLOBAL_CARROT) {\\n      reward += (time - timeStake.time) * HUNTER_EARNING_RATE;\\n    } else if (timeStake.time <= lastClaimTimestamp) {\\n      // stop earning additional $CARROT if it's all been earned\\n      reward += (lastClaimTimestamp - timeStake.time) * HUNTER_EARNING_RATE;\\n    }\\n    if (unstake) {\\n      delete hunterStakeByToken[tokenId];\\n      totalHuntersStaked -= 1;\\n      // Unstake to owner\\n      foxNFT.safeTransferFrom(address(this), msg.sender, tokenId, \\\"\\\");\\n    } else {\\n      // Update last earned time\\n      hunterStakeByToken[tokenId] = TimeStake({\\n        owner: msg.sender,\\n        tokenId: tokenId,\\n        time: time\\n      });\\n    }\\n\\n    emit TokenUnstaked(\\\"HUNTER\\\", tokenId, earningStake.owner, reward);\\n  }\\n\\n  /** \\n   * Add $CARROT claimable pots for hunters and foxes\\n   * @param amount $CARROT to add to the pot\\n   * @param includeHunters true if hunters take a cut of the spoils\\n   */\\n  function _payTaxToPredators(uint128 amount, bool includeHunters) internal {\\n    uint128 amountDueFoxes = amount;\\n\\n    // Hunters take their cut first\\n    if (includeHunters) {\\n      uint128 amountDueHunters = amount * hunterTaxCutPercentage / 100;\\n      amountDueFoxes -= amountDueHunters;\\n\\n      // Update hunter pools\\n      if (totalMarksmanPointsStaked == 0) {\\n        unaccountedHunterRewards += amountDueHunters;\\n      } else {\\n        carrotPerMarksmanPoint += (amountDueHunters + unaccountedHunterRewards) / totalMarksmanPointsStaked;\\n        unaccountedHunterRewards = 0;\\n      }\\n    }\\n\\n    // Update fox pools\\n    if (totalCunningPointsStaked == 0) {\\n      unaccountedFoxRewards += amountDueFoxes;\\n    } else {\\n      // makes sure to include any unaccounted $CARROT \\n      carrotPerCunningPoint += (amountDueFoxes + unaccountedFoxRewards) / totalCunningPointsStaked;\\n      unaccountedFoxRewards = 0;\\n    }\\n  }\\n\\n  /**\\n   * Tracks $CARROT earnings to ensure it stops once 2.4 billion is eclipsed\\n   */\\n  modifier _updateEarnings() {\\n    if (totalCarrotEarned < MAXIMUM_GLOBAL_CARROT) {\\n      uint48 time = uint48(block.timestamp);\\n      uint48 elapsed = time - lastClaimTimestamp;\\n      totalCarrotEarned +=\\n        (elapsed * totalRabbitsStaked * RABBIT_EARNING_RATE) +\\n        (elapsed * totalHuntersStaked * HUNTER_EARNING_RATE);\\n      lastClaimTimestamp = time;\\n    }\\n    _;\\n  }\\n\\n  /**\\n   * Get token kind (rabbit, fox, hunter)\\n   * @param tokenId the ID of the token to check\\n   * @return kind\\n   */\\n  function _getKind(uint16 tokenId) internal view returns (IFoxGameNFT.Kind) {\\n    return foxNFT.getTraits(tokenId).kind;\\n  }\\n\\n  /**\\n   * gets the alpha score for a Fox\\n   * @param tokenId the ID of the Fox to get the alpha score for\\n   * @return the alpha score of the Fox (5-8)\\n   */\\n  function _getAdvantagePoints(uint16 tokenId) internal view returns (uint8) {\\n    return MAX_ADVANTAGE - foxNFT.getTraits(tokenId).advantage; // alpha index is 0-3\\n  }\\n\\n  /**\\n   * chooses a random Fox thief when a newly minted token is stolen\\n   * @param seed a random value to choose a Fox from\\n   * @return the owner of the randomly selected Fox thief\\n   */\\n  function randomFoxOwner(uint256 seed) external view returns (address) {\\n    if (totalCunningPointsStaked == 0) {\\n      return address(0x0); // use 0x0 to return to msg.sender\\n    }\\n    // choose a value from 0 to total alpha staked\\n    uint256 bucket = (seed & 0xFFFFFFFF) % totalCunningPointsStaked;\\n    uint256 cumulative;\\n    seed >>= 32;\\n    // loop through each cunning bucket of Foxes\\n    for (uint8 i = MAX_ADVANTAGE - 3; i <= MAX_ADVANTAGE; i++) {\\n      cumulative += foxStakeByCunning[i].length * i;\\n      // if the value is not inside of that bucket, keep going\\n      if (bucket >= cumulative) continue;\\n      // get the address of a random Fox with that alpha score\\n      return foxStakeByCunning[i][seed % foxStakeByCunning[i].length].owner;\\n    }\\n    return address(0x0);\\n  }\\n\\n  /**\\n   * Chooses a random Hunter to steal a fox.\\n   * @param seed a random value to choose a Hunter from\\n   * @return the owner of the randomly selected Hunter thief\\n   */\\n  function _randomHunterOwner(uint256 seed) internal view returns (address) {\\n    if (totalMarksmanPointsStaked == 0) {\\n      return address(0x0); // use 0x0 to return to msg.sender\\n    }\\n    // choose a value from 0 to total alpha staked\\n    uint256 bucket = (seed & 0xFFFFFFFF) % totalMarksmanPointsStaked;\\n    uint256 cumulative;\\n    seed >>= 32;\\n    // loop through each cunning bucket of Foxes\\n    for (uint8 i = MAX_ADVANTAGE - 3; i <= MAX_ADVANTAGE; i++) {\\n      cumulative += hunterStakeByMarksman[i].length * i;\\n      // if the value is not inside of that bucket, keep going\\n      if (bucket >= cumulative) continue;\\n      // get the address of a random Fox with that alpha score\\n      return hunterStakeByMarksman[i][seed % hunterStakeByMarksman[i].length].owner;\\n    }\\n    return address(0x0);\\n  }\\n\\n  /**\\n   * Toggle staking / unstaking.\\n   */\\n  function togglePaused() external onlyOwner {\\n    if (paused()) {\\n      _unpause();\\n    } else {\\n      _pause();\\n    }\\n  }\\n\\n  /**\\n   * Sets a new signature verifier.\\n   */\\n  function setSignVerifier(address verifier) external onlyOwner {\\n    signVerifier = verifier;\\n  }\\n\\n  /**\\n   * Update the NFT contract address.\\n   */\\n  function setNFTContract(address _address) external onlyOwner {\\n    foxNFT = IFoxGameNFT(_address);\\n  }\\n\\n  /**\\n   * Update the utility token contract address.\\n   */\\n  function setCarrotContract(address _address) external onlyOwner {\\n    foxCarrot = IFoxGameCarrot(_address);\\n  }\\n\\n  /**\\n   * Update the balance between Hunter and Fox tax distribution. \\n   */\\n  function setHunterTaxCutPercentage(uint8 percentCut) external onlyOwner {\\n    hunterTaxCutPercentage = percentCut;\\n  }\\n\\n  /**\\n   * Update the liklihood foxes will get stolen by hunters.\\n   */\\n  function setHunterStealFoxPropabilityMod(uint8 mod) external onlyOwner {\\n    hunterStealFoxProbabilityMod = mod;\\n  }\\n\\n  /**\\n   * Interface support to allow player staking.\\n   */\\n  function onERC721Received(address, address from, uint256, bytes calldata) external pure override returns (bytes4) {    \\n    require(from == address(0x0), \\\"only allow directly from mint\\\");\\n    return IERC721ReceiverUpgradeable.onERC721Received.selector;\\n  }\\n\\n  /**\\n   * Modifier to reject smart contracts.\\n   */\\n  modifier _eosOnly() {\\n    require(!eosOnlyEnabled || tx.origin == msg.sender, \\\"eos only\\\");\\n    _;\\n  }\\n}\"\r\n    },\r\n    \"@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../utils/ContextUpgradeable.sol\\\";\\nimport \\\"../proxy/utils/Initializable.sol\\\";\\n\\n/**\\n * @dev Contract module which provides a basic access control mechanism, where\\n * there is an account (an owner) that can be granted exclusive access to\\n * specific functions.\\n *\\n * By default, the owner account will be the one that deploys the contract. This\\n * can later be changed with {transferOwnership}.\\n *\\n * This module is used through inheritance. It will make available the modifier\\n * `onlyOwner`, which can be applied to your functions to restrict their use to\\n * the owner.\\n */\\nabstract contract OwnableUpgradeable is Initializable, ContextUpgradeable {\\n    address private _owner;\\n\\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\\n\\n    /**\\n     * @dev Initializes the contract setting the deployer as the initial owner.\\n     */\\n    function __Ownable_init() internal initializer {\\n        __Context_init_unchained();\\n        __Ownable_init_unchained();\\n    }\\n\\n    function __Ownable_init_unchained() internal initializer {\\n        _setOwner(_msgSender());\\n    }\\n\\n    /**\\n     * @dev Returns the address of the current owner.\\n     */\\n    function owner() public view virtual returns (address) {\\n        return _owner;\\n    }\\n\\n    /**\\n     * @dev Throws if called by any account other than the owner.\\n     */\\n    modifier onlyOwner() {\\n        require(owner() == _msgSender(), \\\"Ownable: caller is not the owner\\\");\\n        _;\\n    }\\n\\n    /**\\n     * @dev Leaves the contract without owner. It will not be possible to call\\n     * `onlyOwner` functions anymore. Can only be called by the current owner.\\n     *\\n     * NOTE: Renouncing ownership will leave the contract without an owner,\\n     * thereby removing any functionality that is only available to the owner.\\n     */\\n    function renounceOwnership() public virtual onlyOwner {\\n        _setOwner(address(0));\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Can only be called by the current owner.\\n     */\\n    function transferOwnership(address newOwner) public virtual onlyOwner {\\n        require(newOwner != address(0), \\\"Ownable: new owner is the zero address\\\");\\n        _setOwner(newOwner);\\n    }\\n\\n    function _setOwner(address newOwner) private {\\n        address oldOwner = _owner;\\n        _owner = newOwner;\\n        emit OwnershipTransferred(oldOwner, newOwner);\\n    }\\n    uint256[49] private __gap;\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts-upgradeable/security/PausableUpgradeable.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../utils/ContextUpgradeable.sol\\\";\\nimport \\\"../proxy/utils/Initializable.sol\\\";\\n\\n/**\\n * @dev Contract module which allows children to implement an emergency stop\\n * mechanism that can be triggered by an authorized account.\\n *\\n * This module is used through inheritance. It will make available the\\n * modifiers `whenNotPaused` and `whenPaused`, which can be applied to\\n * the functions of your contract. Note that they will not be pausable by\\n * simply including this module, only once the modifiers are put in place.\\n */\\nabstract contract PausableUpgradeable is Initializable, ContextUpgradeable {\\n    /**\\n     * @dev Emitted when the pause is triggered by `account`.\\n     */\\n    event Paused(address account);\\n\\n    /**\\n     * @dev Emitted when the pause is lifted by `account`.\\n     */\\n    event Unpaused(address account);\\n\\n    bool private _paused;\\n\\n    /**\\n     * @dev Initializes the contract in unpaused state.\\n     */\\n    function __Pausable_init() internal initializer {\\n        __Context_init_unchained();\\n        __Pausable_init_unchained();\\n    }\\n\\n    function __Pausable_init_unchained() internal initializer {\\n        _paused = false;\\n    }\\n\\n    /**\\n     * @dev Returns true if the contract is paused, and false otherwise.\\n     */\\n    function paused() public view virtual returns (bool) {\\n        return _paused;\\n    }\\n\\n    /**\\n     * @dev Modifier to make a function callable only when the contract is not paused.\\n     *\\n     * Requirements:\\n     *\\n     * - The contract must not be paused.\\n     */\\n    modifier whenNotPaused() {\\n        require(!paused(), \\\"Pausable: paused\\\");\\n        _;\\n    }\\n\\n    /**\\n     * @dev Modifier to make a function callable only when the contract is paused.\\n     *\\n     * Requirements:\\n     *\\n     * - The contract must be paused.\\n     */\\n    modifier whenPaused() {\\n        require(paused(), \\\"Pausable: not paused\\\");\\n        _;\\n    }\\n\\n    /**\\n     * @dev Triggers stopped state.\\n     *\\n     * Requirements:\\n     *\\n     * - The contract must not be paused.\\n     */\\n    function _pause() internal virtual whenNotPaused {\\n        _paused = true;\\n        emit Paused(_msgSender());\\n    }\\n\\n    /**\\n     * @dev Returns to normal state.\\n     *\\n     * Requirements:\\n     *\\n     * - The contract must be paused.\\n     */\\n    function _unpause() internal virtual whenPaused {\\n        _paused = false;\\n        emit Unpaused(_msgSender());\\n    }\\n    uint256[49] private __gap;\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts-upgradeable/security/ReentrancyGuardUpgradeable.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\nimport \\\"../proxy/utils/Initializable.sol\\\";\\n\\n/**\\n * @dev Contract module that helps prevent reentrant calls to a function.\\n *\\n * Inheriting from `ReentrancyGuard` will make the {nonReentrant} modifier\\n * available, which can be applied to functions to make sure there are no nested\\n * (reentrant) calls to them.\\n *\\n * Note that because there is a single `nonReentrant` guard, functions marked as\\n * `nonReentrant` may not call one another. This can be worked around by making\\n * those functions `private`, and then adding `external` `nonReentrant` entry\\n * points to them.\\n *\\n * TIP: If you would like to learn more about reentrancy and alternative ways\\n * to protect against it, check out our blog post\\n * https://blog.openzeppelin.com/reentrancy-after-istanbul/[Reentrancy After Istanbul].\\n */\\nabstract contract ReentrancyGuardUpgradeable is Initializable {\\n    // Booleans are more expensive than uint256 or any type that takes up a full\\n    // word because each write operation emits an extra SLOAD to first read the\\n    // slot's contents, replace the bits taken up by the boolean, and then write\\n    // back. This is the compiler's defense against contract upgrades and\\n    // pointer aliasing, and it cannot be disabled.\\n\\n    // The values being non-zero value makes deployment a bit more expensive,\\n    // but in exchange the refund on every call to nonReentrant will be lower in\\n    // amount. Since refunds are capped to a percentage of the total\\n    // transaction's gas, it is best to keep them low in cases like this one, to\\n    // increase the likelihood of the full refund coming into effect.\\n    uint256 private constant _NOT_ENTERED = 1;\\n    uint256 private constant _ENTERED = 2;\\n\\n    uint256 private _status;\\n\\n    function __ReentrancyGuard_init() internal initializer {\\n        __ReentrancyGuard_init_unchained();\\n    }\\n\\n    function __ReentrancyGuard_init_unchained() internal initializer {\\n        _status = _NOT_ENTERED;\\n    }\\n\\n    /**\\n     * @dev Prevents a contract from calling itself, directly or indirectly.\\n     * Calling a `nonReentrant` function from another `nonReentrant`\\n     * function is not supported. It is possible to prevent this from happening\\n     * by making the `nonReentrant` function external, and make it call a\\n     * `private` function that does the actual work.\\n     */\\n    modifier nonReentrant() {\\n        // On the first call to nonReentrant, _notEntered will be true\\n        require(_status != _ENTERED, \\\"ReentrancyGuard: reentrant call\\\");\\n\\n        // Any calls to nonReentrant after this point will fail\\n        _status = _ENTERED;\\n\\n        _;\\n\\n        // By storing the original value once again, a refund is triggered (see\\n        // https://eips.ethereum.org/EIPS/eip-2200)\\n        _status = _NOT_ENTERED;\\n    }\\n    uint256[49] private __gap;\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts-upgradeable/token/ERC721/IERC721ReceiverUpgradeable.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @title ERC721 token receiver interface\\n * @dev Interface for any contract that wants to support safeTransfers\\n * from ERC721 asset contracts.\\n */\\ninterface IERC721ReceiverUpgradeable {\\n    /**\\n     * @dev Whenever an {IERC721} `tokenId` token is transferred to this contract via {IERC721-safeTransferFrom}\\n     * by `operator` from `from`, this function is called.\\n     *\\n     * It must return its Solidity selector to confirm the token transfer.\\n     * If any other value is returned or the interface is not implemented by the recipient, the transfer will be reverted.\\n     *\\n     * The selector can be obtained in Solidity with `IERC721.onERC721Received.selector`.\\n     */\\n    function onERC721Received(\\n        address operator,\\n        address from,\\n        uint256 tokenId,\\n        bytes calldata data\\n    ) external returns (bytes4);\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts-upgradeable/utils/cryptography/ECDSAUpgradeable.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Elliptic Curve Digital Signature Algorithm (ECDSA) operations.\\n *\\n * These functions can be used to verify that a message was signed by the holder\\n * of the private keys of a given address.\\n */\\nlibrary ECDSAUpgradeable {\\n    enum RecoverError {\\n        NoError,\\n        InvalidSignature,\\n        InvalidSignatureLength,\\n        InvalidSignatureS,\\n        InvalidSignatureV\\n    }\\n\\n    function _throwError(RecoverError error) private pure {\\n        if (error == RecoverError.NoError) {\\n            return; // no error: do nothing\\n        } else if (error == RecoverError.InvalidSignature) {\\n            revert(\\\"ECDSA: invalid signature\\\");\\n        } else if (error == RecoverError.InvalidSignatureLength) {\\n            revert(\\\"ECDSA: invalid signature length\\\");\\n        } else if (error == RecoverError.InvalidSignatureS) {\\n            revert(\\\"ECDSA: invalid signature 's' value\\\");\\n        } else if (error == RecoverError.InvalidSignatureV) {\\n            revert(\\\"ECDSA: invalid signature 'v' value\\\");\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the address that signed a hashed message (`hash`) with\\n     * `signature` or error string. This address can then be used for verification purposes.\\n     *\\n     * The `ecrecover` EVM opcode allows for malleable (non-unique) signatures:\\n     * this function rejects them by requiring the `s` value to be in the lower\\n     * half order, and the `v` value to be either 27 or 28.\\n     *\\n     * IMPORTANT: `hash` _must_ be the result of a hash operation for the\\n     * verification to be secure: it is possible to craft signatures that\\n     * recover to arbitrary addresses for non-hashed data. A safe way to ensure\\n     * this is by receiving a hash of the original message (which may otherwise\\n     * be too long), and then calling {toEthSignedMessageHash} on it.\\n     *\\n     * Documentation for signature generation:\\n     * - with https://web3js.readthedocs.io/en/v1.3.4/web3-eth-accounts.html#sign[Web3.js]\\n     * - with https://docs.ethers.io/v5/api/signer/#Signer-signMessage[ethers]\\n     *\\n     * _Available since v4.3._\\n     */\\n    function tryRecover(bytes32 hash, bytes memory signature) internal pure returns (address, RecoverError) {\\n        // Check the signature length\\n        // - case 65: r,s,v signature (standard)\\n        // - case 64: r,vs signature (cf https://eips.ethereum.org/EIPS/eip-2098) _Available since v4.1._\\n        if (signature.length == 65) {\\n            bytes32 r;\\n            bytes32 s;\\n            uint8 v;\\n            // ecrecover takes the signature parameters, and the only way to get them\\n            // currently is to use assembly.\\n            assembly {\\n                r := mload(add(signature, 0x20))\\n                s := mload(add(signature, 0x40))\\n                v := byte(0, mload(add(signature, 0x60)))\\n            }\\n            return tryRecover(hash, v, r, s);\\n        } else if (signature.length == 64) {\\n            bytes32 r;\\n            bytes32 vs;\\n            // ecrecover takes the signature parameters, and the only way to get them\\n            // currently is to use assembly.\\n            assembly {\\n                r := mload(add(signature, 0x20))\\n                vs := mload(add(signature, 0x40))\\n            }\\n            return tryRecover(hash, r, vs);\\n        } else {\\n            return (address(0), RecoverError.InvalidSignatureLength);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the address that signed a hashed message (`hash`) with\\n     * `signature`. This address can then be used for verification purposes.\\n     *\\n     * The `ecrecover` EVM opcode allows for malleable (non-unique) signatures:\\n     * this function rejects them by requiring the `s` value to be in the lower\\n     * half order, and the `v` value to be either 27 or 28.\\n     *\\n     * IMPORTANT: `hash` _must_ be the result of a hash operation for the\\n     * verification to be secure: it is possible to craft signatures that\\n     * recover to arbitrary addresses for non-hashed data. A safe way to ensure\\n     * this is by receiving a hash of the original message (which may otherwise\\n     * be too long), and then calling {toEthSignedMessageHash} on it.\\n     */\\n    function recover(bytes32 hash, bytes memory signature) internal pure returns (address) {\\n        (address recovered, RecoverError error) = tryRecover(hash, signature);\\n        _throwError(error);\\n        return recovered;\\n    }\\n\\n    /**\\n     * @dev Overload of {ECDSA-tryRecover} that receives the `r` and `vs` short-signature fields separately.\\n     *\\n     * See https://eips.ethereum.org/EIPS/eip-2098[EIP-2098 short signatures]\\n     *\\n     * _Available since v4.3._\\n     */\\n    function tryRecover(\\n        bytes32 hash,\\n        bytes32 r,\\n        bytes32 vs\\n    ) internal pure returns (address, RecoverError) {\\n        bytes32 s;\\n        uint8 v;\\n        assembly {\\n            s := and(vs, 0x7fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff)\\n            v := add(shr(255, vs), 27)\\n        }\\n        return tryRecover(hash, v, r, s);\\n    }\\n\\n    /**\\n     * @dev Overload of {ECDSA-recover} that receives the `r and `vs` short-signature fields separately.\\n     *\\n     * _Available since v4.2._\\n     */\\n    function recover(\\n        bytes32 hash,\\n        bytes32 r,\\n        bytes32 vs\\n    ) internal pure returns (address) {\\n        (address recovered, RecoverError error) = tryRecover(hash, r, vs);\\n        _throwError(error);\\n        return recovered;\\n    }\\n\\n    /**\\n     * @dev Overload of {ECDSA-tryRecover} that receives the `v`,\\n     * `r` and `s` signature fields separately.\\n     *\\n     * _Available since v4.3._\\n     */\\n    function tryRecover(\\n        bytes32 hash,\\n        uint8 v,\\n        bytes32 r,\\n        bytes32 s\\n    ) internal pure returns (address, RecoverError) {\\n        // EIP-2 still allows signature malleability for ecrecover(). Remove this possibility and make the signature\\n        // unique. Appendix F in the Ethereum Yellow paper (https://ethereum.github.io/yellowpaper/paper.pdf), defines\\n        // the valid range for s in (301): 0 < s < secp256k1n ÷ 2 + 1, and for v in (302): v ∈ {27, 28}. Most\\n        // signatures from current libraries generate a unique signature with an s-value in the lower half order.\\n        //\\n        // If your library generates malleable signatures, such as s-values in the upper range, calculate a new s-value\\n        // with 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFEBAAEDCE6AF48A03BBFD25E8CD0364141 - s1 and flip v from 27 to 28 or\\n        // vice versa. If your library also generates signatures with 0/1 for v instead 27/28, add 27 to v to accept\\n        // these malleable signatures as well.\\n        if (uint256(s) > 0x7FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF5D576E7357A4501DDFE92F46681B20A0) {\\n            return (address(0), RecoverError.InvalidSignatureS);\\n        }\\n        if (v != 27 && v != 28) {\\n            return (address(0), RecoverError.InvalidSignatureV);\\n        }\\n\\n        // If the signature is valid (and not malleable), return the signer address\\n        address signer = ecrecover(hash, v, r, s);\\n        if (signer == address(0)) {\\n            return (address(0), RecoverError.InvalidSignature);\\n        }\\n\\n        return (signer, RecoverError.NoError);\\n    }\\n\\n    /**\\n     * @dev Overload of {ECDSA-recover} that receives the `v`,\\n     * `r` and `s` signature fields separately.\\n     */\\n    function recover(\\n        bytes32 hash,\\n        uint8 v,\\n        bytes32 r,\\n        bytes32 s\\n    ) internal pure returns (address) {\\n        (address recovered, RecoverError error) = tryRecover(hash, v, r, s);\\n        _throwError(error);\\n        return recovered;\\n    }\\n\\n    /**\\n     * @dev Returns an Ethereum Signed Message, created from a `hash`. This\\n     * produces hash corresponding to the one signed with the\\n     * https://eth.wiki/json-rpc/API#eth_sign[`eth_sign`]\\n     * JSON-RPC method as part of EIP-191.\\n     *\\n     * See {recover}.\\n     */\\n    function toEthSignedMessageHash(bytes32 hash) internal pure returns (bytes32) {\\n        // 32 is the length in bytes of hash,\\n        // enforced by the type signature above\\n        return keccak256(abi.encodePacked(\\\"\\\\x19Ethereum Signed Message:\\\\n32\\\", hash));\\n    }\\n\\n    /**\\n     * @dev Returns an Ethereum Signed Typed Data, created from a\\n     * `domainSeparator` and a `structHash`. This produces hash corresponding\\n     * to the one signed with the\\n     * https://eips.ethereum.org/EIPS/eip-712[`eth_signTypedData`]\\n     * JSON-RPC method as part of EIP-712.\\n     *\\n     * See {recover}.\\n     */\\n    function toTypedDataHash(bytes32 domainSeparator, bytes32 structHash) internal pure returns (bytes32) {\\n        return keccak256(abi.encodePacked(\\\"\\\\x19\\\\x01\\\", domainSeparator, structHash));\\n    }\\n}\\n\"\r\n    },\r\n    \"contracts/IFoxGame.sol\": {\r\n      \"content\": \"/*\\n███████╗ ██████╗ ██╗  ██╗     ██████╗  █████╗ ███╗   ███╗███████╗\\n██╔════╝██╔═══██╗╚██╗██╔╝    ██╔════╝ ██╔══██╗████╗ ████║██╔════╝\\n█████╗  ██║   ██║ ╚███╔╝     ██║  ███╗███████║██╔████╔██║█████╗  \\n██╔══╝  ██║   ██║ ██╔██╗     ██║   ██║██╔══██║██║╚██╔╝██║██╔══╝  \\n██║     ╚██████╔╝██╔╝ ██╗    ╚██████╔╝██║  ██║██║ ╚═╝ ██║███████╗\\n╚═╝      ╚═════╝ ╚═╝  ╚═╝     ╚═════╝ ╚═╝  ╚═╝╚═╝     ╚═╝╚══════╝\\n*/\\n\\n// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.10;\\n\\ninterface IFoxGame {\\n  function stakeTokens(address, uint16[] calldata) external;\\n  function randomFoxOwner(uint256) external view returns (address);\\n  function isValidSignature(address, bool, uint48, uint256, bytes memory) external view returns (bool);\\n}\\n\"\r\n    },\r\n    \"contracts/IFoxGameCarrot.sol\": {\r\n      \"content\": \"/*\\n███████╗ ██████╗ ██╗  ██╗     ██████╗  █████╗ ███╗   ███╗███████╗\\n██╔════╝██╔═══██╗╚██╗██╔╝    ██╔════╝ ██╔══██╗████╗ ████║██╔════╝\\n█████╗  ██║   ██║ ╚███╔╝     ██║  ███╗███████║██╔████╔██║█████╗  \\n██╔══╝  ██║   ██║ ██╔██╗     ██║   ██║██╔══██║██║╚██╔╝██║██╔══╝  \\n██║     ╚██████╔╝██╔╝ ██╗    ╚██████╔╝██║  ██║██║ ╚═╝ ██║███████╗\\n╚═╝      ╚═════╝ ╚═╝  ╚═╝     ╚═════╝ ╚═╝  ╚═╝╚═╝     ╚═╝╚══════╝\\n*/\\n\\n// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.10;\\n\\ninterface IFoxGameCarrot {\\n  function mint(address to, uint256 amount) external;\\n  function burn(address from, uint256 amount) external;\\n}\\n\"\r\n    },\r\n    \"contracts/IFoxGameNFT.sol\": {\r\n      \"content\": \"/*\\n███████╗ ██████╗ ██╗  ██╗     ██████╗  █████╗ ███╗   ███╗███████╗\\n██╔════╝██╔═══██╗╚██╗██╔╝    ██╔════╝ ██╔══██╗████╗ ████║██╔════╝\\n█████╗  ██║   ██║ ╚███╔╝     ██║  ███╗███████║██╔████╔██║█████╗  \\n██╔══╝  ██║   ██║ ██╔██╗     ██║   ██║██╔══██║██║╚██╔╝██║██╔══╝  \\n██║     ╚██████╔╝██╔╝ ██╗    ╚██████╔╝██║  ██║██║ ╚═╝ ██║███████╗\\n╚═╝      ╚═════╝ ╚═╝  ╚═╝     ╚═════╝ ╚═╝  ╚═╝╚═╝     ╚═╝╚══════╝\\n*/\\n\\n// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.10;\\n\\ninterface IFoxGameNFT {\\n  enum Kind { RABBIT, FOX, HUNTER }\\n  struct Traits { Kind kind; uint8 advantage; uint8[7] traits; }\\n  function getMaxGEN0Players() external pure returns (uint16);\\n  function getTraits(uint16) external view returns (Traits memory);\\n  function ownerOf(uint256) external view returns (address owner);\\n  function transferFrom(address, address, uint256) external;\\n  function safeTransferFrom(address, address, uint256, bytes memory) external;\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts-upgradeable/utils/ContextUpgradeable.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\nimport \\\"../proxy/utils/Initializable.sol\\\";\\n\\n/**\\n * @dev Provides information about the current execution context, including the\\n * sender of the transaction and its data. While these are generally available\\n * via msg.sender and msg.data, they should not be accessed in such a direct\\n * manner, since when dealing with meta-transactions the account sending and\\n * paying for execution may not be the actual sender (as far as an application\\n * is concerned).\\n *\\n * This contract is only required for intermediate, library-like contracts.\\n */\\nabstract contract ContextUpgradeable is Initializable {\\n    function __Context_init() internal initializer {\\n        __Context_init_unchained();\\n    }\\n\\n    function __Context_init_unchained() internal initializer {\\n    }\\n    function _msgSender() internal view virtual returns (address) {\\n        return msg.sender;\\n    }\\n\\n    function _msgData() internal view virtual returns (bytes calldata) {\\n        return msg.data;\\n    }\\n    uint256[50] private __gap;\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev This is a base contract to aid in writing upgradeable contracts, or any kind of contract that will be deployed\\n * behind a proxy. Since a proxied contract can't have a constructor, it's common to move constructor logic to an\\n * external initializer function, usually called `initialize`. It then becomes necessary to protect this initializer\\n * function so it can only be called once. The {initializer} modifier provided by this contract will have this effect.\\n *\\n * TIP: To avoid leaving the proxy in an uninitialized state, the initializer function should be called as early as\\n * possible by providing the encoded function call as the `_data` argument to {ERC1967Proxy-constructor}.\\n *\\n * CAUTION: When used with inheritance, manual care must be taken to not invoke a parent initializer twice, or to ensure\\n * that all initializers are idempotent. This is not verified automatically as constructors are by Solidity.\\n */\\nabstract contract Initializable {\\n    /**\\n     * @dev Indicates that the contract has been initialized.\\n     */\\n    bool private _initialized;\\n\\n    /**\\n     * @dev Indicates that the contract is in the process of being initialized.\\n     */\\n    bool private _initializing;\\n\\n    /**\\n     * @dev Modifier to protect an initializer function from being invoked twice.\\n     */\\n    modifier initializer() {\\n        require(_initializing || !_initialized, \\\"Initializable: contract is already initialized\\\");\\n\\n        bool isTopLevelCall = !_initializing;\\n        if (isTopLevelCall) {\\n            _initializing = true;\\n            _initialized = true;\\n        }\\n\\n        _;\\n\\n        if (isTopLevelCall) {\\n            _initializing = false;\\n        }\\n    }\\n}\\n\"\r\n    }\r\n  },\r\n  \"settings\": {\r\n    \"optimizer\": {\r\n      \"enabled\": true,\r\n      \"runs\": 200\r\n    },\r\n    \"outputSelection\": {\r\n      \"*\": {\r\n        \"*\": [\r\n          \"evm.bytecode\",\r\n          \"evm.deployedBytecode\",\r\n          \"devdoc\",\r\n          \"userdoc\",\r\n          \"metadata\",\r\n          \"abi\"\r\n        ]\r\n      }\r\n    },\r\n    \"libraries\": {}\r\n  }\r\n}}","ABI":"[{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint16\",\"name\":\"foxTokenId\",\"type\":\"uint16\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"thief\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"victim\",\"type\":\"address\"}],\"name\":\"FoxStolen\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"Paused\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"string\",\"name\":\"kind\",\"type\":\"string\"},{\"indexed\":false,\"internalType\":\"uint16\",\"name\":\"tokenId\",\"type\":\"uint16\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"}],\"name\":\"TokenStaked\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"string\",\"name\":\"kind\",\"type\":\"string\"},{\"indexed\":false,\"internalType\":\"uint16\",\"name\":\"tokenId\",\"type\":\"uint16\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint128\",\"name\":\"earnings\",\"type\":\"uint128\"}],\"name\":\"TokenUnstaked\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"Unpaused\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"HUNTER_EARNING_RATE\",\"outputs\":[{\"internalType\":\"uint128\",\"name\":\"\",\"type\":\"uint128\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"MAXIMUM_GLOBAL_CARROT\",\"outputs\":[{\"internalType\":\"uint128\",\"name\":\"\",\"type\":\"uint128\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"MAX_ADVANTAGE\",\"outputs\":[{\"internalType\":\"uint8\",\"name\":\"\",\"type\":\"uint8\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"RABBIT_CLAIM_TAX_PERCENTAGE\",\"outputs\":[{\"internalType\":\"uint8\",\"name\":\"\",\"type\":\"uint8\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"RABBIT_EARNING_RATE\",\"outputs\":[{\"internalType\":\"uint128\",\"name\":\"\",\"type\":\"uint128\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"RABBIT_MINIMUM_TO_EXIT\",\"outputs\":[{\"internalType\":\"uint48\",\"name\":\"\",\"type\":\"uint48\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"carrotPerCunningPoint\",\"outputs\":[{\"internalType\":\"uint128\",\"name\":\"\",\"type\":\"uint128\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"carrotPerMarksmanPoint\",\"outputs\":[{\"internalType\":\"uint128\",\"name\":\"\",\"type\":\"uint128\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint16[]\",\"name\":\"tokenIds\",\"type\":\"uint16[]\"},{\"internalType\":\"bool\",\"name\":\"unstake\",\"type\":\"bool\"},{\"internalType\":\"bool\",\"name\":\"membership\",\"type\":\"bool\"},{\"internalType\":\"uint48\",\"name\":\"expiration\",\"type\":\"uint48\"},{\"internalType\":\"uint256\",\"name\":\"seed\",\"type\":\"uint256\"},{\"internalType\":\"bytes\",\"name\":\"sig\",\"type\":\"bytes\"}],\"name\":\"claimRewardsAndUnstake\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint16\",\"name\":\"\",\"type\":\"uint16\"}],\"name\":\"foxHierarchy\",\"outputs\":[{\"internalType\":\"uint16\",\"name\":\"\",\"type\":\"uint16\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint8\",\"name\":\"\",\"type\":\"uint8\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"foxStakeByCunning\",\"outputs\":[{\"internalType\":\"uint16\",\"name\":\"tokenId\",\"type\":\"uint16\"},{\"internalType\":\"uint128\",\"name\":\"earningRate\",\"type\":\"uint128\"},{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"recipient\",\"type\":\"address\"},{\"internalType\":\"bool\",\"name\":\"membership\",\"type\":\"bool\"},{\"internalType\":\"uint48\",\"name\":\"expiration\",\"type\":\"uint48\"},{\"internalType\":\"uint256\",\"name\":\"seed\",\"type\":\"uint256\"}],\"name\":\"getSigningHash\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint16\",\"name\":\"\",\"type\":\"uint16\"}],\"name\":\"hunterHierarchy\",\"outputs\":[{\"internalType\":\"uint16\",\"name\":\"\",\"type\":\"uint16\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint8\",\"name\":\"\",\"type\":\"uint8\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"hunterStakeByMarksman\",\"outputs\":[{\"internalType\":\"uint16\",\"name\":\"tokenId\",\"type\":\"uint16\"},{\"internalType\":\"uint128\",\"name\":\"earningRate\",\"type\":\"uint128\"},{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint16\",\"name\":\"\",\"type\":\"uint16\"}],\"name\":\"hunterStakeByToken\",\"outputs\":[{\"internalType\":\"uint16\",\"name\":\"tokenId\",\"type\":\"uint16\"},{\"internalType\":\"uint48\",\"name\":\"time\",\"type\":\"uint48\"},{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"initialize\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"recipient\",\"type\":\"address\"},{\"internalType\":\"bool\",\"name\":\"membership\",\"type\":\"bool\"},{\"internalType\":\"uint48\",\"name\":\"expiration\",\"type\":\"uint48\"},{\"internalType\":\"uint256\",\"name\":\"seed\",\"type\":\"uint256\"},{\"internalType\":\"bytes\",\"name\":\"sig\",\"type\":\"bytes\"}],\"name\":\"isValidSignature\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"joinFoxGames\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"lastClaimTimestamp\",\"outputs\":[{\"internalType\":\"uint48\",\"name\":\"\",\"type\":\"uint48\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"membershipDate\",\"outputs\":[{\"internalType\":\"uint48\",\"name\":\"\",\"type\":\"uint48\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"},{\"internalType\":\"bytes\",\"name\":\"\",\"type\":\"bytes\"}],\"name\":\"onERC721Received\",\"outputs\":[{\"internalType\":\"bytes4\",\"name\":\"\",\"type\":\"bytes4\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"paused\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint16\",\"name\":\"\",\"type\":\"uint16\"}],\"name\":\"rabbitStakeByToken\",\"outputs\":[{\"internalType\":\"uint16\",\"name\":\"tokenId\",\"type\":\"uint16\"},{\"internalType\":\"uint48\",\"name\":\"time\",\"type\":\"uint48\"},{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"seed\",\"type\":\"uint256\"}],\"name\":\"randomFoxOwner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_address\",\"type\":\"address\"}],\"name\":\"setCarrotContract\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint8\",\"name\":\"mod\",\"type\":\"uint8\"}],\"name\":\"setHunterStealFoxPropabilityMod\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint8\",\"name\":\"percentCut\",\"type\":\"uint8\"}],\"name\":\"setHunterTaxCutPercentage\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_address\",\"type\":\"address\"}],\"name\":\"setNFTContract\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"verifier\",\"type\":\"address\"}],\"name\":\"setSignVerifier\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"internalType\":\"uint16[]\",\"name\":\"tokenIds\",\"type\":\"uint16[]\"}],\"name\":\"stakeTokens\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"togglePaused\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalCarrotEarned\",\"outputs\":[{\"internalType\":\"uint128\",\"name\":\"\",\"type\":\"uint128\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalCunningPointsStaked\",\"outputs\":[{\"internalType\":\"uint16\",\"name\":\"\",\"type\":\"uint16\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalFoxesStaked\",\"outputs\":[{\"internalType\":\"uint32\",\"name\":\"\",\"type\":\"uint32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalHuntersStaked\",\"outputs\":[{\"internalType\":\"uint32\",\"name\":\"\",\"type\":\"uint32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalMarksmanPointsStaked\",\"outputs\":[{\"internalType\":\"uint16\",\"name\":\"\",\"type\":\"uint16\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalRabbitsStaked\",\"outputs\":[{\"internalType\":\"uint32\",\"name\":\"\",\"type\":\"uint32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"unaccountedFoxRewards\",\"outputs\":[{\"internalType\":\"uint128\",\"name\":\"\",\"type\":\"uint128\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"unaccountedHunterRewards\",\"outputs\":[{\"internalType\":\"uint128\",\"name\":\"\",\"type\":\"uint128\"}],\"stateMutability\":\"view\",\"type\":\"function\"}]","ContractName":"FoxGame_v1_0","CompilerVersion":"v0.8.10+commit.fc410830","OptimizationUsed":"1","Runs":"200","ConstructorArguments":"","EVMVersion":"Default","Library":"","LicenseType":"","Proxy":"0","Implementation":"","SwarmSource":""}]}