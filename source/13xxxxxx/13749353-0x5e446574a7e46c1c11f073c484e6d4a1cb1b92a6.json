{"status":"1","message":"OK","result":[{"SourceCode":"{{\r\n  \"language\": \"Solidity\",\r\n  \"sources\": {\r\n    \"/contracts/cryptofoxes/CryptoFoxesStakingV2.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\r\\npragma solidity ^0.8.0;\\r\\n\\r\\nimport \\\"@openzeppelin/contracts/access/Ownable.sol\\\";\\r\\nimport \\\"@openzeppelin/contracts/token/ERC721/IERC721.sol\\\";\\r\\nimport \\\"./interfaces/ICryptoFoxesOriginsV2.sol\\\";\\r\\nimport \\\"./interfaces/ICryptoFoxesStakingV2.sol\\\";\\r\\nimport \\\"./interfaces/ICryptoFoxesCalculationV2.sol\\\";\\r\\nimport \\\"@openzeppelin/contracts/utils/cryptography/ECDSA.sol\\\";\\r\\nimport \\\"./CryptoFoxesUtility.sol\\\";\\r\\n\\r\\n// @author: miinded.com\\r\\n\\r\\n/////////////////////////////////////////////////////////////////////////////////////\\r\\n//                                                                                 //\\r\\n//                                                                                 //\\r\\n//                    ((((((((.                (((((                               //\\r\\n//                    @@@@@@@@.                @@@@@                               //\\r\\n//                    @@@&&&%%@@@              @@@&&@@@                            //\\r\\n//                    @@@%%%@@#((@@@        @@@&&&&&%%%@@@                         //\\r\\n//                    @@@(((%%,..(((@@&     @@@&&&%%///@@@                         //\\r\\n//                 %@@(((@@@..   ...@@&     @@@%%%/////(((@@%                      //\\r\\n//                 %@@///@@&        ///@@@@@%%%%%%((//////@@%                      //\\r\\n//                 (%%///@@&        @@@/////(((@@@%%%%%///@@%                      //\\r\\n//                 (%%///@@&     %%%(((///////////((@@@(((%%#                      //\\r\\n//                 (%%///...  #%%/////////////////////////%%#                      //\\r\\n//                 %@@///@@@@@#((/////////////////////////@@%                      //\\r\\n//                 %@@///%%%%%(((////////((((((/////((((((%%#//                    //\\r\\n//                 %@@///(((/////////////((((((/////((((((((#@@                    //\\r\\n//               @@#((//////////////////////////////////////(%%                    //\\r\\n//               @@#((//////////////&&&&&&&&&&&////////&&&&&&%%                    //\\r\\n//               @@(/////////////&&&     (((   ////////(((  ,&&                    //\\r\\n//            @@@((///////////(((&&&     ###   ///(((((###  ,&&%%%                 //\\r\\n//            @@@/////......     (((///////////((#&&&&&&&&..,((%%%                 //\\r\\n//            @@@((.                ..,//,.....     &&&     .//@@@                 //\\r\\n//               @@#((...                      &&&&&...&&&     @@@                 //\\r\\n//    @@@@@      @@#((                                       ..@@@                 //\\r\\n// @@@..(%%        %@@%%%%%%.....                         ..*%%                    //\\r\\n// (((../((***     /((///////////*************************/////                    //\\r\\n//      ...%%%              @@&%%%%%%%%%%%%%%%%%%%%%@@@@@@%%#                      //\\r\\n//         ...%%%        &&%##(((.................**@@@                            //\\r\\n//            ...@@,     %%%/////...              ..(((@@@                         //\\r\\n// ...        ///((&@@@@@////////%%%             .%%(((@@@              Miinded    //\\r\\n// ...     ////////(((@@@/////(((%%%             .%%((((((%%#                      //\\r\\n/////////////////////////////////////////////////////////////////////////////////////\\r\\n\\r\\ncontract CryptoFoxesStakingV2 is Ownable, CryptoFoxesUtility, ICryptoFoxesStakingV2 {\\r\\n\\r\\n    uint32 constant HASH_SIGN_STAKING_V2 = 9248467;\\r\\n    uint8 constant MIN_SLOT = 9;\\r\\n    uint8 constant MAX_SLOT = 20;\\r\\n    uint16 constant NULL = 65535;\\r\\n\\r\\n    mapping(uint16 => Staking) public staked;\\r\\n    mapping(uint16 => Origin) public origins;\\r\\n    mapping(uint256 => bool) private signatures;\\r\\n    mapping(address => uint16[]) public walletOwner;\\r\\n    mapping(uint16 => uint16) private walletOwnerTokenIndex;\\r\\n\\r\\n    address private signAddress;\\r\\n\\r\\n    IERC721 public cryptoFoxes;\\r\\n    ICryptoFoxesOriginsV2 public cryptoFoxesOrigin;\\r\\n    ICryptoFoxesCalculationV2 public calculationContract;\\r\\n\\r\\n    constructor( address _cryptoFoxesOrigin, address _cryptoFoxesContract, address _signAddress) {\\r\\n        cryptoFoxesOrigin = ICryptoFoxesOriginsV2(_cryptoFoxesOrigin);\\r\\n        cryptoFoxes = IERC721(_cryptoFoxesContract);\\r\\n        signAddress = _signAddress;\\r\\n    }\\r\\n\\r\\n    event EventStack(uint16 _tokenId, uint16 _tokenIdOrigin, address _owner);\\r\\n    event EventUnstack(uint16 _tokenId, address _owner);\\r\\n    event EventClaim(uint16 _tokenId, address _owner);\\r\\n    event EventMove(uint16 _tokenId, uint16 _tokenIdOriginTo, address _owner);\\r\\n\\r\\n    //////////////////////////////////////////////////\\r\\n    //      STAKING                                 //\\r\\n    //////////////////////////////////////////////////\\r\\n\\r\\n    function stack(uint16[] memory _tokenIds, uint16 _tokenIdOrigin) public {\\r\\n        require(!disablePublicFunctions, \\\"Function disabled\\\");\\r\\n        _stack(_msgSender(), _tokenIds, _tokenIdOrigin);\\r\\n    }\\r\\n    function stackByContract(address _wallet, uint16[] memory _tokenIds, uint16 _tokenIdOrigin) public isFoxContract{\\r\\n        _stack(_wallet, _tokenIds, _tokenIdOrigin);\\r\\n    }\\r\\n    function _stack(address _wallet, uint16[] memory _tokenIds, uint16 _tokenIdOrigin) private {\\r\\n\\r\\n        require(cryptoFoxesOrigin.ownerOf(_tokenIdOrigin) != address(0), \\\"CryptoFoxesStakingV2:stack origin not minted\\\");\\r\\n        require(_tokenIdOrigin >= 1 && _tokenIdOrigin <= 1000, \\\"CryptoFoxesStakingV2:stack token out of range\\\");\\r\\n\\r\\n        if(origins[_tokenIdOrigin].maxSlots == 0){\\r\\n            origins[_tokenIdOrigin].maxSlots = MIN_SLOT;\\r\\n        }\\r\\n\\r\\n        require(origins[_tokenIdOrigin].stacked.length + _tokenIds.length <= origins[_tokenIdOrigin].maxSlots, \\\"CryptoFoxesStakingV2:stack no slots\\\");\\r\\n\\r\\n        for(uint16 i = 0; i < _tokenIds.length; i++){\\r\\n\\r\\n            require(cryptoFoxes.ownerOf(_tokenIds[i]) == _wallet, \\\"CryptoFoxesStakingV2:stack Not owner\\\");\\r\\n\\r\\n            staked[_tokenIds[i]].tokenId = _tokenIds[i];\\r\\n            staked[_tokenIds[i]].owner = _wallet;\\r\\n            staked[_tokenIds[i]].timestampV2 = uint64(block.timestamp);\\r\\n\\r\\n            _stackAction(_tokenIds[i],_tokenIdOrigin);\\r\\n\\r\\n            cryptoFoxes.transferFrom(_wallet, address(this), _tokenIds[i]);\\r\\n\\r\\n            walletOwnerTokenIndex[_tokenIds[i]] = uint16(walletOwner[_wallet].length);\\r\\n            walletOwner[_wallet].push(_tokenIds[i]);\\r\\n\\r\\n            emit EventStack(_tokenIds[i], _tokenIdOrigin, _wallet);\\r\\n        }\\r\\n    }\\r\\n\\r\\n    function _stackAction(uint16 _tokenId, uint16 _tokenIdOrigin) private{\\r\\n        staked[_tokenId].origin = _tokenIdOrigin;\\r\\n        staked[_tokenId].slotIndex = uint8(origins[_tokenIdOrigin].stacked.length);\\r\\n        origins[_tokenIdOrigin].stacked.push(_tokenId);\\r\\n    }\\r\\n\\r\\n    function unstack(uint16[] memory _tokenIds, uint256 _bonusSteak, uint256 _signatureId, bytes memory _signature) public {\\r\\n        require(!disablePublicFunctions, \\\"Function disabled\\\");\\r\\n        _unstack(_msgSender(), _tokenIds, _bonusSteak, _signatureId, _signature);\\r\\n    }\\r\\n    function unstackByContract(address _wallet, uint16[] memory _tokenIds, uint256 _bonusSteak, uint256 _signatureId, bytes memory _signature) public isFoxContract{\\r\\n        _unstack(_wallet, _tokenIds, _bonusSteak, _signatureId, _signature);\\r\\n    }\\r\\n    function _unstack(address _wallet, uint16[] memory _tokenIds, uint256 _bonusSteak, uint256 _signatureId, bytes memory _signature) private {\\r\\n\\r\\n        _claimRewardsV2(_wallet, _tokenIds, _bonusSteak, _signatureId, _signature);\\r\\n\\r\\n        for(uint16 i = 0; i < _tokenIds.length; i++){\\r\\n\\r\\n            require(isStaked(_tokenIds[i]) && staked[_tokenIds[i]].owner == _wallet, \\\"CryptoFoxesStakingV2:unstack Not owner\\\");\\r\\n\\r\\n            uint16 tokenIdOrigin = getOriginByV2(_tokenIds[i]);\\r\\n            _unstackAction(_tokenIds[i], tokenIdOrigin);\\r\\n\\r\\n            staked[_tokenIds[i]].tokenId = NULL;\\r\\n\\r\\n            cryptoFoxes.transferFrom(address(this), _wallet, _tokenIds[i]);\\r\\n\\r\\n            uint16 index = walletOwnerTokenIndex[_tokenIds[i]];\\r\\n            uint16 last = uint16(walletOwner[_wallet].length - 1);\\r\\n\\r\\n            if(index != last){\\r\\n                walletOwner[_wallet][index] = walletOwner[_wallet][last];\\r\\n                walletOwnerTokenIndex[ walletOwner[_wallet][last] ] = index;\\r\\n            }\\r\\n            walletOwner[_wallet].pop();\\r\\n\\r\\n            emit EventUnstack(_tokenIds[i], _wallet);\\r\\n        }\\r\\n    }\\r\\n\\r\\n    function _unstackAction(uint16 _tokenId, uint16 _tokenIdOrigin) private{\\r\\n        uint8 slotIndex = staked[_tokenId].slotIndex;\\r\\n        uint8 lastSlot = uint8(origins[_tokenIdOrigin].stacked.length - 1);\\r\\n\\r\\n        if(slotIndex != lastSlot){\\r\\n            origins[_tokenIdOrigin].stacked[slotIndex] = origins[_tokenIdOrigin].stacked[lastSlot];\\r\\n            staked[ origins[_tokenIdOrigin].stacked[lastSlot] ].slotIndex = slotIndex;\\r\\n        }\\r\\n\\r\\n        origins[_tokenIdOrigin].stacked.pop();\\r\\n    }\\r\\n\\r\\n    function claimSignature(address _wallet, uint256 _bonusSteak, uint256 _signatureId, bytes memory _signature) public pure returns(address){\\r\\n        return ECDSA.recover(keccak256(abi.encodePacked(\\\"\\\\x19Ethereum Signed Message:\\\\n32\\\", keccak256(abi.encode(_wallet, _bonusSteak, _signatureId, HASH_SIGN_STAKING_V2)))), _signature);\\r\\n    }\\r\\n\\r\\n    function moveStack(uint16 _tokenId, uint16 _tokenIdOriginTo) public {\\r\\n        require(!disablePublicFunctions, \\\"Function disabled\\\");\\r\\n        _moveStack(_msgSender(), _tokenId, _tokenIdOriginTo);\\r\\n    }\\r\\n    function moveStackByContract(address _wallet, uint16 _tokenId, uint16 _tokenIdOriginTo) public isFoxContract {\\r\\n        _moveStack(_wallet, _tokenId, _tokenIdOriginTo);\\r\\n    }\\r\\n    function _moveStack(address _wallet, uint16 _tokenId, uint16 _tokenIdOriginTo) private {\\r\\n\\r\\n        require(isStaked(_tokenId), \\\"CryptoFoxesStakingV2:moveStack Not owner\\\");\\r\\n        uint16 tokenIdOrigin = getOriginByV2(_tokenId);\\r\\n        require(tokenIdOrigin != _tokenIdOriginTo, \\\"CryptoFoxesStakingV2:moveStack not moving tokenId\\\");\\r\\n        require(cryptoFoxesOrigin.ownerOf(tokenIdOrigin) == _wallet, \\\"CryptoFoxesStakingV2:moveStack origin not owner\\\");\\r\\n        require(cryptoFoxesOrigin.ownerOf(_tokenIdOriginTo) != address(0), \\\"CryptoFoxesStakingV2:moveStack originTo not minted\\\");\\r\\n        require(_tokenIdOriginTo >= 1 && _tokenIdOriginTo <= 1000, \\\"CryptoFoxesStakingV2:moveStack tokenTo out of range\\\");\\r\\n\\r\\n        if(origins[_tokenIdOriginTo].maxSlots == 0){\\r\\n            origins[_tokenIdOriginTo].maxSlots = MIN_SLOT;\\r\\n        }\\r\\n\\r\\n        require(origins[_tokenIdOriginTo].stacked.length < origins[_tokenIdOriginTo].maxSlots, \\\"CryptoFoxesStakingV2:moveStack no slots\\\");\\r\\n\\r\\n        _unstackAction(_tokenId, tokenIdOrigin);\\r\\n        _stackAction(_tokenId,_tokenIdOriginTo);\\r\\n\\r\\n        calculationContract.claimMoveRewardsOrigin(address(this), _tokenId, _wallet);\\r\\n\\r\\n        staked[_tokenId].timestampV2 = uint64(block.timestamp);\\r\\n\\r\\n        emit EventMove(_tokenId, _tokenIdOriginTo, _wallet);\\r\\n    }\\r\\n\\r\\n    //////////////////////////////////////////////////\\r\\n    //      SLOTS                                   //\\r\\n    //////////////////////////////////////////////////\\r\\n\\r\\n    function unlockSlot(uint16 _tokenIdOrigin, uint8 _count) public override isFoxContractOrOwner {\\r\\n        if(origins[_tokenIdOrigin].maxSlots == 0){\\r\\n            origins[_tokenIdOrigin].maxSlots = MIN_SLOT;\\r\\n        }\\r\\n        require(origins[_tokenIdOrigin].maxSlots + _count <= MAX_SLOT, \\\"CryptoFoxesStakingV2:unlockSlot Max slot limit\\\");\\r\\n        origins[_tokenIdOrigin].maxSlots += _count;\\r\\n    }\\r\\n\\r\\n    //////////////////////////////////////////////////\\r\\n    //      REWARDS                                 //\\r\\n    //////////////////////////////////////////////////\\r\\n\\r\\n    function calculateRewardsV2(uint16[] memory _tokenIds, uint256 _currentTimestamp) public view returns (uint256) {\\r\\n        return calculationContract.calculationRewardsV2(address(this), _tokenIds, _currentTimestamp);\\r\\n    }\\r\\n\\r\\n    function claimRewardsV2(uint16[] memory _tokenIds, uint256 _bonusSteak, uint256 _signatureId, bytes memory _signature) public {\\r\\n        require(!disablePublicFunctions, \\\"Function disabled\\\");\\r\\n        _claimRewardsV2(_msgSender(), _tokenIds, _bonusSteak, _signatureId, _signature);\\r\\n    }\\r\\n    function claimRewardsV2ByContract(address _wallet, uint16[] memory _tokenIds, uint256 _bonusSteak, uint256 _signatureId, bytes memory _signature) public isFoxContract {\\r\\n        _claimRewardsV2(_wallet, _tokenIds, _bonusSteak, _signatureId, _signature);\\r\\n    }\\r\\n    function _claimRewardsV2(address _wallet, uint16[] memory _tokenIds, uint256 _bonusSteak, uint256 _signatureId, bytes memory _signature) private {\\r\\n\\r\\n        require(_tokenIds.length > 0 && !isPaused(), \\\"Tokens empty\\\");\\r\\n\\r\\n        if(_bonusSteak > 0){\\r\\n            require(signatures[_signatureId] == false, \\\"CryptoFoxesStakingV2:claimRewardsV2 signature used\\\");\\r\\n            signatures[_signatureId] = true;\\r\\n            require(claimSignature(_wallet, _bonusSteak, _signatureId, _signature) == signAddress, \\\"CryptoFoxesStakingV2:claimRewardsV2 signature fail\\\"); // 6k\\r\\n            _addRewards(_wallet, _bonusSteak);\\r\\n        }\\r\\n\\r\\n        for(uint16 i = 0; i < _tokenIds.length; i++){\\r\\n            require(isStaked(_tokenIds[i]) && staked[_tokenIds[i]].owner == _wallet, \\\"Bad owner\\\");\\r\\n\\r\\n            for (uint16 j = 0; j < i; j++) {\\r\\n                require(_tokenIds[j] != _tokenIds[i], \\\"Duplicate id\\\");\\r\\n            }\\r\\n        }\\r\\n\\r\\n        calculationContract.claimRewardsV2(address(this), _tokenIds, _wallet);\\r\\n\\r\\n        for(uint16 i = 0; i < _tokenIds.length; i++){\\r\\n            staked[_tokenIds[i]].timestampV2 = uint64(block.timestamp);\\r\\n\\r\\n            emit EventClaim(_tokenIds[i], _wallet);\\r\\n        }\\r\\n\\r\\n    }\\r\\n\\r\\n    //////////////////////////////////////////////////\\r\\n    //      GETTERS                                 //\\r\\n    //////////////////////////////////////////////////\\r\\n\\r\\n    function getFoxesV2(uint16 _tokenId) public view override returns(Staking memory){\\r\\n        return staked[_tokenId];\\r\\n    }\\r\\n    function getOriginByV2(uint16 _tokenId) public view override returns(uint16){\\r\\n        return staked[_tokenId].origin;\\r\\n    }\\r\\n    function getStakingTokenV2(uint16 _tokenId) public override view returns(uint256){\\r\\n        return uint256(staked[_tokenId].timestampV2);\\r\\n    }\\r\\n    function totalSupply() public view returns(uint16){\\r\\n        uint16 totalStaked = 0;\\r\\n        for(uint16 i = 1; i <= 1000; i++){\\r\\n            totalStaked += uint16(origins[i].stacked.length);\\r\\n        }\\r\\n        return totalStaked;\\r\\n    }\\r\\n    function getOriginMaxSlot(uint16 _tokenIdOrigin) public view override returns(uint8){\\r\\n        return origins[_tokenIdOrigin].maxSlots;\\r\\n    }\\r\\n    function getV2ByOrigin(uint16 _tokenIdOrigin) public override view returns(Staking[] memory){\\r\\n        Staking[] memory tokenIds = new Staking[](origins[_tokenIdOrigin].stacked.length);\\r\\n        for(uint16 i = 0; i < origins[_tokenIdOrigin].stacked.length; i++){\\r\\n            tokenIds[i] = staked[ origins[_tokenIdOrigin].stacked[i] ];\\r\\n        }\\r\\n        return tokenIds;\\r\\n    }\\r\\n    function walletOfOwner(address _wallet) public view returns(Staking[] memory){\\r\\n        Staking[] memory tokenIds = new Staking[](walletOwner[_wallet].length);\\r\\n        for(uint16 i = 0; i < walletOwner[_wallet].length; i++){\\r\\n            tokenIds[i] = staked[ walletOwner[_wallet][i] ];\\r\\n        }\\r\\n        return tokenIds;\\r\\n    }\\r\\n\\r\\n    //////////////////////////////////////////////////\\r\\n    //      SETTERS                                 //\\r\\n    //////////////////////////////////////////////////\\r\\n\\r\\n    function setCryptoFoxes(address _contract) public onlyOwner{\\r\\n        if(address(cryptoFoxes) != address(0)) {\\r\\n            setAllowedContract(address(cryptoFoxes), false);\\r\\n        }\\r\\n        cryptoFoxes = IERC721(_contract);\\r\\n        setAllowedContract(_contract, true);\\r\\n\\r\\n    }\\r\\n    function setCryptoFoxesOrigin(address _contract) public onlyOwner{\\r\\n        if(address(cryptoFoxesOrigin) != address(0)) {\\r\\n            setAllowedContract(address(cryptoFoxesOrigin), false);\\r\\n        }\\r\\n        cryptoFoxesOrigin = ICryptoFoxesOriginsV2(_contract);\\r\\n        setAllowedContract(_contract, true);\\r\\n\\r\\n    }\\r\\n    function setCalculationContract(address _contract) public isFoxContractOrOwner {\\r\\n        if(address(calculationContract) != address(0)) {\\r\\n            setAllowedContract(address(calculationContract), false);\\r\\n        }\\r\\n\\r\\n        calculationContract = ICryptoFoxesCalculationV2(_contract);\\r\\n        setAllowedContract(_contract, true);\\r\\n    }\\r\\n    function setSignAddress(address _signAddress) external onlyOwner{\\r\\n        signAddress = _signAddress;\\r\\n    }\\r\\n    function updateTimestampV2(uint16 _tokenId, uint64 _timestamp) public isFoxContract{\\r\\n        staked[_tokenId].timestampV2 = _timestamp;\\r\\n    }\\r\\n\\r\\n    //////////////////////////////////////////////////\\r\\n    //      TESTERS                                 //\\r\\n    //////////////////////////////////////////////////\\r\\n\\r\\n    function isStaked(uint16 _tokenId) public view returns(bool){\\r\\n        return staked[_tokenId].tokenId != NULL && staked[_tokenId].timestampV2 != 0;\\r\\n    }\\r\\n\\r\\n    //////////////////////////////////////////////////\\r\\n    //      OTHER                                   //\\r\\n    //////////////////////////////////////////////////\\r\\n\\r\\n    function _currentTime(uint256 _currentTimestamp) public override(ICryptoFoxesStakingV2, CryptoFoxesUtility) view returns (uint256) {\\r\\n        return super._currentTime(_currentTimestamp);\\r\\n    }\\r\\n}\"\r\n    },\r\n    \"/contracts/cryptofoxes/interfaces/ICryptoFoxesSteak.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\r\\npragma solidity ^0.8.0;\\r\\n\\r\\n// @author: miinded.com\\r\\n\\r\\ninterface ICryptoFoxesSteak {\\r\\n    function addRewards(address _to, uint256 _amount) external;\\r\\n    function withdrawRewards(address _to) external;\\r\\n    function isPaused() external view returns(bool);\\r\\n    function dateEndRewards() external view returns(uint256);\\r\\n}\"\r\n    },\r\n    \"/contracts/cryptofoxes/interfaces/ICryptoFoxesStakingV2.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\r\\npragma solidity ^0.8.0;\\r\\n\\r\\n// @author: miinded.com\\r\\nimport \\\"./ICryptoFoxesStakingStruct.sol\\\";\\r\\n\\r\\ninterface ICryptoFoxesStakingV2 is ICryptoFoxesStakingStruct  {\\r\\n    function getFoxesV2(uint16 _tokenId) external view returns(Staking memory);\\r\\n    function getOriginMaxSlot(uint16 _tokenIdOrigin) external view returns(uint8);\\r\\n    function getStakingTokenV2(uint16 _tokenId) external view returns(uint256);\\r\\n    function getV2ByOrigin(uint16 _tokenIdOrigin) external view returns(Staking[] memory);\\r\\n    function getOriginByV2(uint16 _tokenId) external view returns(uint16);\\r\\n    function unlockSlot(uint16 _tokenId, uint8 _count) external;\\r\\n    function _currentTime(uint256 _currentTimestamp) external view returns(uint256);\\r\\n}\"\r\n    },\r\n    \"/contracts/cryptofoxes/interfaces/ICryptoFoxesStakingStruct.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\r\\npragma solidity ^0.8.0;\\r\\n\\r\\n// @author: miinded.com\\r\\n\\r\\ninterface ICryptoFoxesStakingStruct {\\r\\n\\r\\n    struct Staking {\\r\\n        uint8 slotIndex;\\r\\n        uint16 tokenId;\\r\\n        uint16 origin;\\r\\n        uint64 timestampV2;\\r\\n        address owner;\\r\\n    }\\r\\n\\r\\n    struct Origin{\\r\\n        uint8 maxSlots;\\r\\n        uint16[] stacked;\\r\\n    }\\r\\n\\r\\n}\"\r\n    },\r\n    \"/contracts/cryptofoxes/interfaces/ICryptoFoxesOriginsV2.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\r\\npragma solidity ^0.8.0;\\r\\n\\r\\n// @author: miinded.com\\r\\nimport \\\"./ICryptoFoxesOrigins.sol\\\";\\r\\nimport \\\"@openzeppelin/contracts/token/ERC721/IERC721.sol\\\";\\r\\n\\r\\ninterface ICryptoFoxesOriginsV2 is ICryptoFoxesOrigins, IERC721  {\\r\\n    function walletOfOwner(address _owner) external view returns(uint256[] memory);\\r\\n}\"\r\n    },\r\n    \"/contracts/cryptofoxes/interfaces/ICryptoFoxesOrigins.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\r\\npragma solidity ^0.8.0;\\r\\n\\r\\n// @author: miinded.com\\r\\n\\r\\ninterface ICryptoFoxesOrigins {\\r\\n    function getStackingToken(uint256 tokenId) external view returns(uint256);\\r\\n    function _currentTime(uint256 _currentTimestamp) external view returns(uint256);\\r\\n}\"\r\n    },\r\n    \"/contracts/cryptofoxes/interfaces/ICryptoFoxesCalculationV2.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\r\\npragma solidity ^0.8.0;\\r\\n\\r\\n// @author: miinded.com\\r\\n\\r\\ninterface ICryptoFoxesCalculationV2 {\\r\\n    function calculationRewardsV2(address _contract, uint16[] calldata _tokenIds, uint256 _currentTimestamp) external view returns(uint256);\\r\\n    function claimRewardsV2(address _contract, uint16[] calldata _tokenIds, address _owner) external;\\r\\n    function claimMoveRewardsOrigin(address _contract, uint16 _tokenId, address _ownerOrigin) external;\\r\\n}\"\r\n    },\r\n    \"/contracts/cryptofoxes/CryptoFoxesUtility.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\r\\npragma solidity ^0.8.0;\\r\\n\\r\\nimport \\\"@openzeppelin/contracts/utils/math/SafeMath.sol\\\";\\r\\nimport \\\"@openzeppelin/contracts/access/Ownable.sol\\\";\\r\\nimport \\\"./interfaces/ICryptoFoxesSteak.sol\\\";\\r\\nimport \\\"./CryptoFoxesAllowed.sol\\\";\\r\\n\\r\\n// @author: miinded.com\\r\\n\\r\\nabstract contract CryptoFoxesUtility is Ownable,CryptoFoxesAllowed, ICryptoFoxesSteak {\\r\\n    using SafeMath for uint256;\\r\\n\\r\\n    uint256 public endRewards = 0;\\r\\n    ICryptoFoxesSteak public cryptofoxesSteak;\\r\\n    bool public disablePublicFunctions = false;\\r\\n\\r\\n    function setCryptoFoxesSteak(address _contract) public onlyOwner {\\r\\n        cryptofoxesSteak = ICryptoFoxesSteak(_contract);\\r\\n        setAllowedContract(_contract, true);\\r\\n        synchroEndRewards();\\r\\n    }\\r\\n    function _addRewards(address _to, uint256 _amount) internal {\\r\\n        cryptofoxesSteak.addRewards(_to, _amount);\\r\\n    }\\r\\n    function addRewards(address _to, uint256 _amount) public override isFoxContract  {\\r\\n        _addRewards(_to, _amount);\\r\\n    }\\r\\n    function withdrawRewards(address _to) public override isFoxContract {\\r\\n        cryptofoxesSteak.withdrawRewards(_to);\\r\\n    }\\r\\n    function _withdrawRewards(address _to) internal {\\r\\n        cryptofoxesSteak.withdrawRewards(_to);\\r\\n    }\\r\\n    function isPaused() public view override returns(bool){\\r\\n        return cryptofoxesSteak.isPaused();\\r\\n    }\\r\\n    function synchroEndRewards() public {\\r\\n        endRewards = cryptofoxesSteak.dateEndRewards();\\r\\n    }\\r\\n    function dateEndRewards() public view override returns(uint256){\\r\\n        require(endRewards > 0, \\\"End Rewards error\\\");\\r\\n        return endRewards;\\r\\n    }\\r\\n    function _currentTime(uint256 _currentTimestamp) public view virtual returns (uint256) {\\r\\n        return min(_currentTimestamp, dateEndRewards());\\r\\n    }\\r\\n    function min(uint256 a, uint256 b) public pure returns (uint256){\\r\\n        return a > b ? b : a;\\r\\n    }\\r\\n    function max(uint256 a, uint256 b) public pure returns (uint256){\\r\\n        return a > b ? a : b;\\r\\n    }\\r\\n    function setDisablePublicFunctions(bool _toggle) public isFoxContractOrOwner{\\r\\n        disablePublicFunctions = _toggle;\\r\\n    }\\r\\n}\"\r\n    },\r\n    \"/contracts/cryptofoxes/CryptoFoxesAllowed.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\r\\npragma solidity ^0.8.0;\\r\\n\\r\\nimport \\\"@openzeppelin/contracts/utils/math/SafeMath.sol\\\";\\r\\nimport \\\"@openzeppelin/contracts/access/Ownable.sol\\\";\\r\\nimport \\\"./interfaces/ICryptoFoxesSteak.sol\\\";\\r\\n\\r\\n// @author: miinded.com\\r\\n\\r\\nabstract contract CryptoFoxesAllowed is Ownable {\\r\\n\\r\\n    mapping (address => bool) public allowedContracts;\\r\\n\\r\\n    modifier isFoxContract() {\\r\\n        require(allowedContracts[_msgSender()] == true, \\\"Not allowed\\\");\\r\\n        _;\\r\\n    }\\r\\n    \\r\\n    modifier isFoxContractOrOwner() {\\r\\n        require(allowedContracts[_msgSender()] == true || _msgSender() == owner(), \\\"Not allowed\\\");\\r\\n        _;\\r\\n    }\\r\\n\\r\\n    function setAllowedContract(address _contract, bool _allowed) public onlyOwner {\\r\\n        allowedContracts[_contract] = _allowed;\\r\\n    }\\r\\n\\r\\n}\"\r\n    },\r\n    \"@openzeppelin/contracts/utils/math/SafeMath.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.0 (utils/math/SafeMath.sol)\\n\\npragma solidity ^0.8.0;\\n\\n// CAUTION\\n// This version of SafeMath should only be used with Solidity 0.8 or later,\\n// because it relies on the compiler's built in overflow checks.\\n\\n/**\\n * @dev Wrappers over Solidity's arithmetic operations.\\n *\\n * NOTE: `SafeMath` is generally not needed starting with Solidity 0.8, since the compiler\\n * now has built in overflow checking.\\n */\\nlibrary SafeMath {\\n    /**\\n     * @dev Returns the addition of two unsigned integers, with an overflow flag.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function tryAdd(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        unchecked {\\n            uint256 c = a + b;\\n            if (c < a) return (false, 0);\\n            return (true, c);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the substraction of two unsigned integers, with an overflow flag.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function trySub(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        unchecked {\\n            if (b > a) return (false, 0);\\n            return (true, a - b);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the multiplication of two unsigned integers, with an overflow flag.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function tryMul(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        unchecked {\\n            // Gas optimization: this is cheaper than requiring 'a' not being zero, but the\\n            // benefit is lost if 'b' is also tested.\\n            // See: https://github.com/OpenZeppelin/openzeppelin-contracts/pull/522\\n            if (a == 0) return (true, 0);\\n            uint256 c = a * b;\\n            if (c / a != b) return (false, 0);\\n            return (true, c);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the division of two unsigned integers, with a division by zero flag.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function tryDiv(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        unchecked {\\n            if (b == 0) return (false, 0);\\n            return (true, a / b);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the remainder of dividing two unsigned integers, with a division by zero flag.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function tryMod(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        unchecked {\\n            if (b == 0) return (false, 0);\\n            return (true, a % b);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the addition of two unsigned integers, reverting on\\n     * overflow.\\n     *\\n     * Counterpart to Solidity's `+` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Addition cannot overflow.\\n     */\\n    function add(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a + b;\\n    }\\n\\n    /**\\n     * @dev Returns the subtraction of two unsigned integers, reverting on\\n     * overflow (when the result is negative).\\n     *\\n     * Counterpart to Solidity's `-` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Subtraction cannot overflow.\\n     */\\n    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a - b;\\n    }\\n\\n    /**\\n     * @dev Returns the multiplication of two unsigned integers, reverting on\\n     * overflow.\\n     *\\n     * Counterpart to Solidity's `*` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Multiplication cannot overflow.\\n     */\\n    function mul(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a * b;\\n    }\\n\\n    /**\\n     * @dev Returns the integer division of two unsigned integers, reverting on\\n     * division by zero. The result is rounded towards zero.\\n     *\\n     * Counterpart to Solidity's `/` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - The divisor cannot be zero.\\n     */\\n    function div(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a / b;\\n    }\\n\\n    /**\\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\\n     * reverting when dividing by zero.\\n     *\\n     * Counterpart to Solidity's `%` operator. This function uses a `revert`\\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\\n     * invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Requirements:\\n     *\\n     * - The divisor cannot be zero.\\n     */\\n    function mod(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a % b;\\n    }\\n\\n    /**\\n     * @dev Returns the subtraction of two unsigned integers, reverting with custom message on\\n     * overflow (when the result is negative).\\n     *\\n     * CAUTION: This function is deprecated because it requires allocating memory for the error\\n     * message unnecessarily. For custom revert reasons use {trySub}.\\n     *\\n     * Counterpart to Solidity's `-` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Subtraction cannot overflow.\\n     */\\n    function sub(\\n        uint256 a,\\n        uint256 b,\\n        string memory errorMessage\\n    ) internal pure returns (uint256) {\\n        unchecked {\\n            require(b <= a, errorMessage);\\n            return a - b;\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the integer division of two unsigned integers, reverting with custom message on\\n     * division by zero. The result is rounded towards zero.\\n     *\\n     * Counterpart to Solidity's `/` operator. Note: this function uses a\\n     * `revert` opcode (which leaves remaining gas untouched) while Solidity\\n     * uses an invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Requirements:\\n     *\\n     * - The divisor cannot be zero.\\n     */\\n    function div(\\n        uint256 a,\\n        uint256 b,\\n        string memory errorMessage\\n    ) internal pure returns (uint256) {\\n        unchecked {\\n            require(b > 0, errorMessage);\\n            return a / b;\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\\n     * reverting with custom message when dividing by zero.\\n     *\\n     * CAUTION: This function is deprecated because it requires allocating memory for the error\\n     * message unnecessarily. For custom revert reasons use {tryMod}.\\n     *\\n     * Counterpart to Solidity's `%` operator. This function uses a `revert`\\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\\n     * invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Requirements:\\n     *\\n     * - The divisor cannot be zero.\\n     */\\n    function mod(\\n        uint256 a,\\n        uint256 b,\\n        string memory errorMessage\\n    ) internal pure returns (uint256) {\\n        unchecked {\\n            require(b > 0, errorMessage);\\n            return a % b;\\n        }\\n    }\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/utils/introspection/IERC165.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.0 (utils/introspection/IERC165.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC165 standard, as defined in the\\n * https://eips.ethereum.org/EIPS/eip-165[EIP].\\n *\\n * Implementers can declare support of contract interfaces, which can then be\\n * queried by others ({ERC165Checker}).\\n *\\n * For an implementation, see {ERC165}.\\n */\\ninterface IERC165 {\\n    /**\\n     * @dev Returns true if this contract implements the interface defined by\\n     * `interfaceId`. See the corresponding\\n     * https://eips.ethereum.org/EIPS/eip-165#how-interfaces-are-identified[EIP section]\\n     * to learn more about how these ids are created.\\n     *\\n     * This function call must use less than 30 000 gas.\\n     */\\n    function supportsInterface(bytes4 interfaceId) external view returns (bool);\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/utils/cryptography/ECDSA.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.0 (utils/cryptography/ECDSA.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../Strings.sol\\\";\\n\\n/**\\n * @dev Elliptic Curve Digital Signature Algorithm (ECDSA) operations.\\n *\\n * These functions can be used to verify that a message was signed by the holder\\n * of the private keys of a given address.\\n */\\nlibrary ECDSA {\\n    enum RecoverError {\\n        NoError,\\n        InvalidSignature,\\n        InvalidSignatureLength,\\n        InvalidSignatureS,\\n        InvalidSignatureV\\n    }\\n\\n    function _throwError(RecoverError error) private pure {\\n        if (error == RecoverError.NoError) {\\n            return; // no error: do nothing\\n        } else if (error == RecoverError.InvalidSignature) {\\n            revert(\\\"ECDSA: invalid signature\\\");\\n        } else if (error == RecoverError.InvalidSignatureLength) {\\n            revert(\\\"ECDSA: invalid signature length\\\");\\n        } else if (error == RecoverError.InvalidSignatureS) {\\n            revert(\\\"ECDSA: invalid signature 's' value\\\");\\n        } else if (error == RecoverError.InvalidSignatureV) {\\n            revert(\\\"ECDSA: invalid signature 'v' value\\\");\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the address that signed a hashed message (`hash`) with\\n     * `signature` or error string. This address can then be used for verification purposes.\\n     *\\n     * The `ecrecover` EVM opcode allows for malleable (non-unique) signatures:\\n     * this function rejects them by requiring the `s` value to be in the lower\\n     * half order, and the `v` value to be either 27 or 28.\\n     *\\n     * IMPORTANT: `hash` _must_ be the result of a hash operation for the\\n     * verification to be secure: it is possible to craft signatures that\\n     * recover to arbitrary addresses for non-hashed data. A safe way to ensure\\n     * this is by receiving a hash of the original message (which may otherwise\\n     * be too long), and then calling {toEthSignedMessageHash} on it.\\n     *\\n     * Documentation for signature generation:\\n     * - with https://web3js.readthedocs.io/en/v1.3.4/web3-eth-accounts.html#sign[Web3.js]\\n     * - with https://docs.ethers.io/v5/api/signer/#Signer-signMessage[ethers]\\n     *\\n     * _Available since v4.3._\\n     */\\n    function tryRecover(bytes32 hash, bytes memory signature) internal pure returns (address, RecoverError) {\\n        // Check the signature length\\n        // - case 65: r,s,v signature (standard)\\n        // - case 64: r,vs signature (cf https://eips.ethereum.org/EIPS/eip-2098) _Available since v4.1._\\n        if (signature.length == 65) {\\n            bytes32 r;\\n            bytes32 s;\\n            uint8 v;\\n            // ecrecover takes the signature parameters, and the only way to get them\\n            // currently is to use assembly.\\n            assembly {\\n                r := mload(add(signature, 0x20))\\n                s := mload(add(signature, 0x40))\\n                v := byte(0, mload(add(signature, 0x60)))\\n            }\\n            return tryRecover(hash, v, r, s);\\n        } else if (signature.length == 64) {\\n            bytes32 r;\\n            bytes32 vs;\\n            // ecrecover takes the signature parameters, and the only way to get them\\n            // currently is to use assembly.\\n            assembly {\\n                r := mload(add(signature, 0x20))\\n                vs := mload(add(signature, 0x40))\\n            }\\n            return tryRecover(hash, r, vs);\\n        } else {\\n            return (address(0), RecoverError.InvalidSignatureLength);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the address that signed a hashed message (`hash`) with\\n     * `signature`. This address can then be used for verification purposes.\\n     *\\n     * The `ecrecover` EVM opcode allows for malleable (non-unique) signatures:\\n     * this function rejects them by requiring the `s` value to be in the lower\\n     * half order, and the `v` value to be either 27 or 28.\\n     *\\n     * IMPORTANT: `hash` _must_ be the result of a hash operation for the\\n     * verification to be secure: it is possible to craft signatures that\\n     * recover to arbitrary addresses for non-hashed data. A safe way to ensure\\n     * this is by receiving a hash of the original message (which may otherwise\\n     * be too long), and then calling {toEthSignedMessageHash} on it.\\n     */\\n    function recover(bytes32 hash, bytes memory signature) internal pure returns (address) {\\n        (address recovered, RecoverError error) = tryRecover(hash, signature);\\n        _throwError(error);\\n        return recovered;\\n    }\\n\\n    /**\\n     * @dev Overload of {ECDSA-tryRecover} that receives the `r` and `vs` short-signature fields separately.\\n     *\\n     * See https://eips.ethereum.org/EIPS/eip-2098[EIP-2098 short signatures]\\n     *\\n     * _Available since v4.3._\\n     */\\n    function tryRecover(\\n        bytes32 hash,\\n        bytes32 r,\\n        bytes32 vs\\n    ) internal pure returns (address, RecoverError) {\\n        bytes32 s;\\n        uint8 v;\\n        assembly {\\n            s := and(vs, 0x7fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff)\\n            v := add(shr(255, vs), 27)\\n        }\\n        return tryRecover(hash, v, r, s);\\n    }\\n\\n    /**\\n     * @dev Overload of {ECDSA-recover} that receives the `r and `vs` short-signature fields separately.\\n     *\\n     * _Available since v4.2._\\n     */\\n    function recover(\\n        bytes32 hash,\\n        bytes32 r,\\n        bytes32 vs\\n    ) internal pure returns (address) {\\n        (address recovered, RecoverError error) = tryRecover(hash, r, vs);\\n        _throwError(error);\\n        return recovered;\\n    }\\n\\n    /**\\n     * @dev Overload of {ECDSA-tryRecover} that receives the `v`,\\n     * `r` and `s` signature fields separately.\\n     *\\n     * _Available since v4.3._\\n     */\\n    function tryRecover(\\n        bytes32 hash,\\n        uint8 v,\\n        bytes32 r,\\n        bytes32 s\\n    ) internal pure returns (address, RecoverError) {\\n        // EIP-2 still allows signature malleability for ecrecover(). Remove this possibility and make the signature\\n        // unique. Appendix F in the Ethereum Yellow paper (https://ethereum.github.io/yellowpaper/paper.pdf), defines\\n        // the valid range for s in (301): 0 < s < secp256k1n ÷ 2 + 1, and for v in (302): v ∈ {27, 28}. Most\\n        // signatures from current libraries generate a unique signature with an s-value in the lower half order.\\n        //\\n        // If your library generates malleable signatures, such as s-values in the upper range, calculate a new s-value\\n        // with 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFEBAAEDCE6AF48A03BBFD25E8CD0364141 - s1 and flip v from 27 to 28 or\\n        // vice versa. If your library also generates signatures with 0/1 for v instead 27/28, add 27 to v to accept\\n        // these malleable signatures as well.\\n        if (uint256(s) > 0x7FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF5D576E7357A4501DDFE92F46681B20A0) {\\n            return (address(0), RecoverError.InvalidSignatureS);\\n        }\\n        if (v != 27 && v != 28) {\\n            return (address(0), RecoverError.InvalidSignatureV);\\n        }\\n\\n        // If the signature is valid (and not malleable), return the signer address\\n        address signer = ecrecover(hash, v, r, s);\\n        if (signer == address(0)) {\\n            return (address(0), RecoverError.InvalidSignature);\\n        }\\n\\n        return (signer, RecoverError.NoError);\\n    }\\n\\n    /**\\n     * @dev Overload of {ECDSA-recover} that receives the `v`,\\n     * `r` and `s` signature fields separately.\\n     */\\n    function recover(\\n        bytes32 hash,\\n        uint8 v,\\n        bytes32 r,\\n        bytes32 s\\n    ) internal pure returns (address) {\\n        (address recovered, RecoverError error) = tryRecover(hash, v, r, s);\\n        _throwError(error);\\n        return recovered;\\n    }\\n\\n    /**\\n     * @dev Returns an Ethereum Signed Message, created from a `hash`. This\\n     * produces hash corresponding to the one signed with the\\n     * https://eth.wiki/json-rpc/API#eth_sign[`eth_sign`]\\n     * JSON-RPC method as part of EIP-191.\\n     *\\n     * See {recover}.\\n     */\\n    function toEthSignedMessageHash(bytes32 hash) internal pure returns (bytes32) {\\n        // 32 is the length in bytes of hash,\\n        // enforced by the type signature above\\n        return keccak256(abi.encodePacked(\\\"\\\\x19Ethereum Signed Message:\\\\n32\\\", hash));\\n    }\\n\\n    /**\\n     * @dev Returns an Ethereum Signed Message, created from `s`. This\\n     * produces hash corresponding to the one signed with the\\n     * https://eth.wiki/json-rpc/API#eth_sign[`eth_sign`]\\n     * JSON-RPC method as part of EIP-191.\\n     *\\n     * See {recover}.\\n     */\\n    function toEthSignedMessageHash(bytes memory s) internal pure returns (bytes32) {\\n        return keccak256(abi.encodePacked(\\\"\\\\x19Ethereum Signed Message:\\\\n\\\", Strings.toString(s.length), s));\\n    }\\n\\n    /**\\n     * @dev Returns an Ethereum Signed Typed Data, created from a\\n     * `domainSeparator` and a `structHash`. This produces hash corresponding\\n     * to the one signed with the\\n     * https://eips.ethereum.org/EIPS/eip-712[`eth_signTypedData`]\\n     * JSON-RPC method as part of EIP-712.\\n     *\\n     * See {recover}.\\n     */\\n    function toTypedDataHash(bytes32 domainSeparator, bytes32 structHash) internal pure returns (bytes32) {\\n        return keccak256(abi.encodePacked(\\\"\\\\x19\\\\x01\\\", domainSeparator, structHash));\\n    }\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/utils/Strings.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.0 (utils/Strings.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev String operations.\\n */\\nlibrary Strings {\\n    bytes16 private constant _HEX_SYMBOLS = \\\"0123456789abcdef\\\";\\n\\n    /**\\n     * @dev Converts a `uint256` to its ASCII `string` decimal representation.\\n     */\\n    function toString(uint256 value) internal pure returns (string memory) {\\n        // Inspired by OraclizeAPI's implementation - MIT licence\\n        // https://github.com/oraclize/ethereum-api/blob/b42146b063c7d6ee1358846c198246239e9360e8/oraclizeAPI_0.4.25.sol\\n\\n        if (value == 0) {\\n            return \\\"0\\\";\\n        }\\n        uint256 temp = value;\\n        uint256 digits;\\n        while (temp != 0) {\\n            digits++;\\n            temp /= 10;\\n        }\\n        bytes memory buffer = new bytes(digits);\\n        while (value != 0) {\\n            digits -= 1;\\n            buffer[digits] = bytes1(uint8(48 + uint256(value % 10)));\\n            value /= 10;\\n        }\\n        return string(buffer);\\n    }\\n\\n    /**\\n     * @dev Converts a `uint256` to its ASCII `string` hexadecimal representation.\\n     */\\n    function toHexString(uint256 value) internal pure returns (string memory) {\\n        if (value == 0) {\\n            return \\\"0x00\\\";\\n        }\\n        uint256 temp = value;\\n        uint256 length = 0;\\n        while (temp != 0) {\\n            length++;\\n            temp >>= 8;\\n        }\\n        return toHexString(value, length);\\n    }\\n\\n    /**\\n     * @dev Converts a `uint256` to its ASCII `string` hexadecimal representation with fixed length.\\n     */\\n    function toHexString(uint256 value, uint256 length) internal pure returns (string memory) {\\n        bytes memory buffer = new bytes(2 * length + 2);\\n        buffer[0] = \\\"0\\\";\\n        buffer[1] = \\\"x\\\";\\n        for (uint256 i = 2 * length + 1; i > 1; --i) {\\n            buffer[i] = _HEX_SYMBOLS[value & 0xf];\\n            value >>= 4;\\n        }\\n        require(value == 0, \\\"Strings: hex length insufficient\\\");\\n        return string(buffer);\\n    }\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/utils/Context.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.0 (utils/Context.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Provides information about the current execution context, including the\\n * sender of the transaction and its data. While these are generally available\\n * via msg.sender and msg.data, they should not be accessed in such a direct\\n * manner, since when dealing with meta-transactions the account sending and\\n * paying for execution may not be the actual sender (as far as an application\\n * is concerned).\\n *\\n * This contract is only required for intermediate, library-like contracts.\\n */\\nabstract contract Context {\\n    function _msgSender() internal view virtual returns (address) {\\n        return msg.sender;\\n    }\\n\\n    function _msgData() internal view virtual returns (bytes calldata) {\\n        return msg.data;\\n    }\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/token/ERC721/IERC721.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.0 (token/ERC721/IERC721.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../../utils/introspection/IERC165.sol\\\";\\n\\n/**\\n * @dev Required interface of an ERC721 compliant contract.\\n */\\ninterface IERC721 is IERC165 {\\n    /**\\n     * @dev Emitted when `tokenId` token is transferred from `from` to `to`.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 indexed tokenId);\\n\\n    /**\\n     * @dev Emitted when `owner` enables `approved` to manage the `tokenId` token.\\n     */\\n    event Approval(address indexed owner, address indexed approved, uint256 indexed tokenId);\\n\\n    /**\\n     * @dev Emitted when `owner` enables or disables (`approved`) `operator` to manage all of its assets.\\n     */\\n    event ApprovalForAll(address indexed owner, address indexed operator, bool approved);\\n\\n    /**\\n     * @dev Returns the number of tokens in ``owner``'s account.\\n     */\\n    function balanceOf(address owner) external view returns (uint256 balance);\\n\\n    /**\\n     * @dev Returns the owner of the `tokenId` token.\\n     *\\n     * Requirements:\\n     *\\n     * - `tokenId` must exist.\\n     */\\n    function ownerOf(uint256 tokenId) external view returns (address owner);\\n\\n    /**\\n     * @dev Safely transfers `tokenId` token from `from` to `to`, checking first that contract recipients\\n     * are aware of the ERC721 protocol to prevent tokens from being forever locked.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` cannot be the zero address.\\n     * - `to` cannot be the zero address.\\n     * - `tokenId` token must exist and be owned by `from`.\\n     * - If the caller is not `from`, it must be have been allowed to move this token by either {approve} or {setApprovalForAll}.\\n     * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function safeTransferFrom(\\n        address from,\\n        address to,\\n        uint256 tokenId\\n    ) external;\\n\\n    /**\\n     * @dev Transfers `tokenId` token from `from` to `to`.\\n     *\\n     * WARNING: Usage of this method is discouraged, use {safeTransferFrom} whenever possible.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` cannot be the zero address.\\n     * - `to` cannot be the zero address.\\n     * - `tokenId` token must be owned by `from`.\\n     * - If the caller is not `from`, it must be approved to move this token by either {approve} or {setApprovalForAll}.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(\\n        address from,\\n        address to,\\n        uint256 tokenId\\n    ) external;\\n\\n    /**\\n     * @dev Gives permission to `to` to transfer `tokenId` token to another account.\\n     * The approval is cleared when the token is transferred.\\n     *\\n     * Only a single account can be approved at a time, so approving the zero address clears previous approvals.\\n     *\\n     * Requirements:\\n     *\\n     * - The caller must own the token or be an approved operator.\\n     * - `tokenId` must exist.\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address to, uint256 tokenId) external;\\n\\n    /**\\n     * @dev Returns the account approved for `tokenId` token.\\n     *\\n     * Requirements:\\n     *\\n     * - `tokenId` must exist.\\n     */\\n    function getApproved(uint256 tokenId) external view returns (address operator);\\n\\n    /**\\n     * @dev Approve or remove `operator` as an operator for the caller.\\n     * Operators can call {transferFrom} or {safeTransferFrom} for any token owned by the caller.\\n     *\\n     * Requirements:\\n     *\\n     * - The `operator` cannot be the caller.\\n     *\\n     * Emits an {ApprovalForAll} event.\\n     */\\n    function setApprovalForAll(address operator, bool _approved) external;\\n\\n    /**\\n     * @dev Returns if the `operator` is allowed to manage all of the assets of `owner`.\\n     *\\n     * See {setApprovalForAll}\\n     */\\n    function isApprovedForAll(address owner, address operator) external view returns (bool);\\n\\n    /**\\n     * @dev Safely transfers `tokenId` token from `from` to `to`.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` cannot be the zero address.\\n     * - `to` cannot be the zero address.\\n     * - `tokenId` token must exist and be owned by `from`.\\n     * - If the caller is not `from`, it must be approved to move this token by either {approve} or {setApprovalForAll}.\\n     * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function safeTransferFrom(\\n        address from,\\n        address to,\\n        uint256 tokenId,\\n        bytes calldata data\\n    ) external;\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/access/Ownable.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.0 (access/Ownable.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../utils/Context.sol\\\";\\n\\n/**\\n * @dev Contract module which provides a basic access control mechanism, where\\n * there is an account (an owner) that can be granted exclusive access to\\n * specific functions.\\n *\\n * By default, the owner account will be the one that deploys the contract. This\\n * can later be changed with {transferOwnership}.\\n *\\n * This module is used through inheritance. It will make available the modifier\\n * `onlyOwner`, which can be applied to your functions to restrict their use to\\n * the owner.\\n */\\nabstract contract Ownable is Context {\\n    address private _owner;\\n\\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\\n\\n    /**\\n     * @dev Initializes the contract setting the deployer as the initial owner.\\n     */\\n    constructor() {\\n        _transferOwnership(_msgSender());\\n    }\\n\\n    /**\\n     * @dev Returns the address of the current owner.\\n     */\\n    function owner() public view virtual returns (address) {\\n        return _owner;\\n    }\\n\\n    /**\\n     * @dev Throws if called by any account other than the owner.\\n     */\\n    modifier onlyOwner() {\\n        require(owner() == _msgSender(), \\\"Ownable: caller is not the owner\\\");\\n        _;\\n    }\\n\\n    /**\\n     * @dev Leaves the contract without owner. It will not be possible to call\\n     * `onlyOwner` functions anymore. Can only be called by the current owner.\\n     *\\n     * NOTE: Renouncing ownership will leave the contract without an owner,\\n     * thereby removing any functionality that is only available to the owner.\\n     */\\n    function renounceOwnership() public virtual onlyOwner {\\n        _transferOwnership(address(0));\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Can only be called by the current owner.\\n     */\\n    function transferOwnership(address newOwner) public virtual onlyOwner {\\n        require(newOwner != address(0), \\\"Ownable: new owner is the zero address\\\");\\n        _transferOwnership(newOwner);\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Internal function without access restriction.\\n     */\\n    function _transferOwnership(address newOwner) internal virtual {\\n        address oldOwner = _owner;\\n        _owner = newOwner;\\n        emit OwnershipTransferred(oldOwner, newOwner);\\n    }\\n}\\n\"\r\n    }\r\n  },\r\n  \"settings\": {\r\n    \"remappings\": [],\r\n    \"optimizer\": {\r\n      \"enabled\": true,\r\n      \"runs\": 1500\r\n    },\r\n    \"evmVersion\": \"london\",\r\n    \"libraries\": {},\r\n    \"outputSelection\": {\r\n      \"*\": {\r\n        \"*\": [\r\n          \"evm.bytecode\",\r\n          \"evm.deployedBytecode\",\r\n          \"devdoc\",\r\n          \"userdoc\",\r\n          \"metadata\",\r\n          \"abi\"\r\n        ]\r\n      }\r\n    }\r\n  }\r\n}}","ABI":"[{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_cryptoFoxesOrigin\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_cryptoFoxesContract\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_signAddress\",\"type\":\"address\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint16\",\"name\":\"_tokenId\",\"type\":\"uint16\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"_owner\",\"type\":\"address\"}],\"name\":\"EventClaim\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint16\",\"name\":\"_tokenId\",\"type\":\"uint16\"},{\"indexed\":false,\"internalType\":\"uint16\",\"name\":\"_tokenIdOriginTo\",\"type\":\"uint16\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"_owner\",\"type\":\"address\"}],\"name\":\"EventMove\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint16\",\"name\":\"_tokenId\",\"type\":\"uint16\"},{\"indexed\":false,\"internalType\":\"uint16\",\"name\":\"_tokenIdOrigin\",\"type\":\"uint16\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"_owner\",\"type\":\"address\"}],\"name\":\"EventStack\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint16\",\"name\":\"_tokenId\",\"type\":\"uint16\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"_owner\",\"type\":\"address\"}],\"name\":\"EventUnstack\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_currentTimestamp\",\"type\":\"uint256\"}],\"name\":\"_currentTime\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"addRewards\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"allowedContracts\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint16[]\",\"name\":\"_tokenIds\",\"type\":\"uint16[]\"},{\"internalType\":\"uint256\",\"name\":\"_currentTimestamp\",\"type\":\"uint256\"}],\"name\":\"calculateRewardsV2\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"calculationContract\",\"outputs\":[{\"internalType\":\"contract ICryptoFoxesCalculationV2\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint16[]\",\"name\":\"_tokenIds\",\"type\":\"uint16[]\"},{\"internalType\":\"uint256\",\"name\":\"_bonusSteak\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_signatureId\",\"type\":\"uint256\"},{\"internalType\":\"bytes\",\"name\":\"_signature\",\"type\":\"bytes\"}],\"name\":\"claimRewardsV2\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_wallet\",\"type\":\"address\"},{\"internalType\":\"uint16[]\",\"name\":\"_tokenIds\",\"type\":\"uint16[]\"},{\"internalType\":\"uint256\",\"name\":\"_bonusSteak\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_signatureId\",\"type\":\"uint256\"},{\"internalType\":\"bytes\",\"name\":\"_signature\",\"type\":\"bytes\"}],\"name\":\"claimRewardsV2ByContract\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_wallet\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_bonusSteak\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_signatureId\",\"type\":\"uint256\"},{\"internalType\":\"bytes\",\"name\":\"_signature\",\"type\":\"bytes\"}],\"name\":\"claimSignature\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"cryptoFoxes\",\"outputs\":[{\"internalType\":\"contract IERC721\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"cryptoFoxesOrigin\",\"outputs\":[{\"internalType\":\"contract ICryptoFoxesOriginsV2\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"cryptofoxesSteak\",\"outputs\":[{\"internalType\":\"contract ICryptoFoxesSteak\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"dateEndRewards\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"disablePublicFunctions\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"endRewards\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint16\",\"name\":\"_tokenId\",\"type\":\"uint16\"}],\"name\":\"getFoxesV2\",\"outputs\":[{\"components\":[{\"internalType\":\"uint8\",\"name\":\"slotIndex\",\"type\":\"uint8\"},{\"internalType\":\"uint16\",\"name\":\"tokenId\",\"type\":\"uint16\"},{\"internalType\":\"uint16\",\"name\":\"origin\",\"type\":\"uint16\"},{\"internalType\":\"uint64\",\"name\":\"timestampV2\",\"type\":\"uint64\"},{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"}],\"internalType\":\"struct ICryptoFoxesStakingStruct.Staking\",\"name\":\"\",\"type\":\"tuple\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint16\",\"name\":\"_tokenId\",\"type\":\"uint16\"}],\"name\":\"getOriginByV2\",\"outputs\":[{\"internalType\":\"uint16\",\"name\":\"\",\"type\":\"uint16\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint16\",\"name\":\"_tokenIdOrigin\",\"type\":\"uint16\"}],\"name\":\"getOriginMaxSlot\",\"outputs\":[{\"internalType\":\"uint8\",\"name\":\"\",\"type\":\"uint8\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint16\",\"name\":\"_tokenId\",\"type\":\"uint16\"}],\"name\":\"getStakingTokenV2\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint16\",\"name\":\"_tokenIdOrigin\",\"type\":\"uint16\"}],\"name\":\"getV2ByOrigin\",\"outputs\":[{\"components\":[{\"internalType\":\"uint8\",\"name\":\"slotIndex\",\"type\":\"uint8\"},{\"internalType\":\"uint16\",\"name\":\"tokenId\",\"type\":\"uint16\"},{\"internalType\":\"uint16\",\"name\":\"origin\",\"type\":\"uint16\"},{\"internalType\":\"uint64\",\"name\":\"timestampV2\",\"type\":\"uint64\"},{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"}],\"internalType\":\"struct ICryptoFoxesStakingStruct.Staking[]\",\"name\":\"\",\"type\":\"tuple[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"isPaused\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint16\",\"name\":\"_tokenId\",\"type\":\"uint16\"}],\"name\":\"isStaked\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"a\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"b\",\"type\":\"uint256\"}],\"name\":\"max\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"a\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"b\",\"type\":\"uint256\"}],\"name\":\"min\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint16\",\"name\":\"_tokenId\",\"type\":\"uint16\"},{\"internalType\":\"uint16\",\"name\":\"_tokenIdOriginTo\",\"type\":\"uint16\"}],\"name\":\"moveStack\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_wallet\",\"type\":\"address\"},{\"internalType\":\"uint16\",\"name\":\"_tokenId\",\"type\":\"uint16\"},{\"internalType\":\"uint16\",\"name\":\"_tokenIdOriginTo\",\"type\":\"uint16\"}],\"name\":\"moveStackByContract\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint16\",\"name\":\"\",\"type\":\"uint16\"}],\"name\":\"origins\",\"outputs\":[{\"internalType\":\"uint8\",\"name\":\"maxSlots\",\"type\":\"uint8\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_contract\",\"type\":\"address\"},{\"internalType\":\"bool\",\"name\":\"_allowed\",\"type\":\"bool\"}],\"name\":\"setAllowedContract\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_contract\",\"type\":\"address\"}],\"name\":\"setCalculationContract\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_contract\",\"type\":\"address\"}],\"name\":\"setCryptoFoxes\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_contract\",\"type\":\"address\"}],\"name\":\"setCryptoFoxesOrigin\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_contract\",\"type\":\"address\"}],\"name\":\"setCryptoFoxesSteak\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bool\",\"name\":\"_toggle\",\"type\":\"bool\"}],\"name\":\"setDisablePublicFunctions\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_signAddress\",\"type\":\"address\"}],\"name\":\"setSignAddress\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint16[]\",\"name\":\"_tokenIds\",\"type\":\"uint16[]\"},{\"internalType\":\"uint16\",\"name\":\"_tokenIdOrigin\",\"type\":\"uint16\"}],\"name\":\"stack\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_wallet\",\"type\":\"address\"},{\"internalType\":\"uint16[]\",\"name\":\"_tokenIds\",\"type\":\"uint16[]\"},{\"internalType\":\"uint16\",\"name\":\"_tokenIdOrigin\",\"type\":\"uint16\"}],\"name\":\"stackByContract\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint16\",\"name\":\"\",\"type\":\"uint16\"}],\"name\":\"staked\",\"outputs\":[{\"internalType\":\"uint8\",\"name\":\"slotIndex\",\"type\":\"uint8\"},{\"internalType\":\"uint16\",\"name\":\"tokenId\",\"type\":\"uint16\"},{\"internalType\":\"uint16\",\"name\":\"origin\",\"type\":\"uint16\"},{\"internalType\":\"uint64\",\"name\":\"timestampV2\",\"type\":\"uint64\"},{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"synchroEndRewards\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalSupply\",\"outputs\":[{\"internalType\":\"uint16\",\"name\":\"\",\"type\":\"uint16\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint16\",\"name\":\"_tokenIdOrigin\",\"type\":\"uint16\"},{\"internalType\":\"uint8\",\"name\":\"_count\",\"type\":\"uint8\"}],\"name\":\"unlockSlot\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint16[]\",\"name\":\"_tokenIds\",\"type\":\"uint16[]\"},{\"internalType\":\"uint256\",\"name\":\"_bonusSteak\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_signatureId\",\"type\":\"uint256\"},{\"internalType\":\"bytes\",\"name\":\"_signature\",\"type\":\"bytes\"}],\"name\":\"unstack\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_wallet\",\"type\":\"address\"},{\"internalType\":\"uint16[]\",\"name\":\"_tokenIds\",\"type\":\"uint16[]\"},{\"internalType\":\"uint256\",\"name\":\"_bonusSteak\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_signatureId\",\"type\":\"uint256\"},{\"internalType\":\"bytes\",\"name\":\"_signature\",\"type\":\"bytes\"}],\"name\":\"unstackByContract\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint16\",\"name\":\"_tokenId\",\"type\":\"uint16\"},{\"internalType\":\"uint64\",\"name\":\"_timestamp\",\"type\":\"uint64\"}],\"name\":\"updateTimestampV2\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_wallet\",\"type\":\"address\"}],\"name\":\"walletOfOwner\",\"outputs\":[{\"components\":[{\"internalType\":\"uint8\",\"name\":\"slotIndex\",\"type\":\"uint8\"},{\"internalType\":\"uint16\",\"name\":\"tokenId\",\"type\":\"uint16\"},{\"internalType\":\"uint16\",\"name\":\"origin\",\"type\":\"uint16\"},{\"internalType\":\"uint64\",\"name\":\"timestampV2\",\"type\":\"uint64\"},{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"}],\"internalType\":\"struct ICryptoFoxesStakingStruct.Staking[]\",\"name\":\"\",\"type\":\"tuple[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"walletOwner\",\"outputs\":[{\"internalType\":\"uint16\",\"name\":\"\",\"type\":\"uint16\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_to\",\"type\":\"address\"}],\"name\":\"withdrawRewards\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}]","ContractName":"CryptoFoxesStakingV2","CompilerVersion":"v0.8.10+commit.fc410830","OptimizationUsed":"1","Runs":"1500","ConstructorArguments":"0000000000000000000000000d685869cf9ce4a6bda2380ca76f504dd18eab8c000000000000000000000000a9fdb3f96fae7c12d70393659867c6115683ada0000000000000000000000000a66a77dbe5e01027741ec21918b4b6dcd143d627","EVMVersion":"Default","Library":"","LicenseType":"","Proxy":"0","Implementation":"","SwarmSource":""}]}