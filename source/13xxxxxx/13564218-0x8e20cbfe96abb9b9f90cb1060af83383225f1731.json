{"status":"1","message":"OK","result":[{"SourceCode":"/**\r\n *Submitted for verification at BscScan.com on 2021-11-01\r\n*/\r\n\r\n// File: contracts/interfaces/IWZYX.sol\r\n\r\npragma solidity ^0.6.12;\r\n\r\ninterface IWZYX {\r\n    function mint(address _to, uint256 _amount) external;\r\n    function burnFrom(address account, uint256 amount) external;\r\n}\r\n\r\n// File: contracts/lib/ChainId.sol\r\n\r\npragma solidity 0.6.12;\r\n\r\nlibrary ChainId {\r\n    int256 public constant zyxChainId = 55;\r\n\r\n\r\n    function getChainId() internal pure returns (int256 chainId) {\r\n        assembly {\r\n            chainId := chainid()\r\n        }\r\n    }\r\n}\r\n\r\n// File: contracts/lib/SafeMath.sol\r\n\r\npragma solidity 0.6.12;\r\n\r\n// a library for performing overflow-safe math, courtesy of DappHub (https://github.com/dapphub/ds-math)\r\n\r\nlibrary SafeMath {\r\n    function add(uint x, uint y) internal pure returns (uint z) {\r\n        require((z = x + y) >= x, 'ds-math-add-overflow');\r\n    }\r\n\r\n    function sub(uint x, uint y) internal pure returns (uint z) {\r\n        require((z = x - y) <= x, 'ds-math-sub-underflow');\r\n    }\r\n\r\n    function mul(uint x, uint y) internal pure returns (uint z) {\r\n        require(y == 0 || (z = x * y) / y == x, 'ds-math-mul-overflow');\r\n    }\r\n}\r\n\r\n// File: contracts/interfaces/IERC20.sol\r\n\r\npragma solidity 0.6.12;\r\n\r\n/**\r\n * @dev Interface of the ERC20 standard as defined in the EIP.\r\n */\r\ninterface IERC20 {\r\n    /**\r\n     * @dev Returns the amount of tokens in existence.\r\n     */\r\n    function totalSupply() external view returns (uint256);\r\n\r\n    /**\r\n     * @dev Returns the amount of tokens owned by `account`.\r\n     */\r\n    function balanceOf(address account) external view returns (uint256);\r\n\r\n    /**\r\n     * @dev Moves `amount` tokens from the caller's account to `recipient`.\r\n     *\r\n     * Returns a boolean value indicating whether the operation succeeded.\r\n     *\r\n     * Emits a {Transfer} event.\r\n     */\r\n    function transfer(address recipient, uint256 amount) external;\r\n\r\n    /**\r\n     * @dev Returns the remaining number of tokens that `spender` will be\r\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\r\n     * zero by default.\r\n     *\r\n     * This value changes when {approve} or {transferFrom} are called.\r\n     */\r\n    function allowance(address owner, address spender) external view returns (uint256);\r\n\r\n    /**\r\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\r\n     *\r\n     * Returns a boolean value indicating whether the operation succeeded.\r\n     *\r\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\r\n     * that someone may use both the old and the new allowance by unfortunate\r\n     * transaction ordering. One possible solution to mitigate this race\r\n     * condition is to first reduce the spender's allowance to 0 and set the\r\n     * desired value afterwards:\r\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\r\n     *\r\n     * Emits an {Approval} event.\r\n     */\r\n    function approve(address spender, uint256 amount) external;\r\n\r\n    /**\r\n     * @dev Moves `amount` tokens from `sender` to `recipient` using the\r\n     * allowance mechanism. `amount` is then deducted from the caller's\r\n     * allowance.\r\n     *\r\n     * Returns a boolean value indicating whether the operation succeeded.\r\n     *\r\n     * Emits a {Transfer} event.\r\n     */\r\n    function transferFrom(\r\n        address sender,\r\n        address recipient,\r\n        uint256 amount\r\n    ) external;\r\n\r\n    /**\r\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\r\n     * another (`to`).\r\n     *\r\n     * Note that `value` may be zero.\r\n     */\r\n    event Transfer(address indexed from, address indexed to, uint256 value);\r\n\r\n    /**\r\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\r\n     * a call to {approve}. `value` is the new allowance.\r\n     */\r\n    event Approval(address indexed owner, address indexed spender, uint256 value);\r\n}\r\n\r\n// File: contracts/lib/Context.sol\r\n\r\npragma solidity 0.6.12;\r\n\r\n/**\r\n * @dev Provides information about the current execution context, including the\r\n * sender of the transaction and its data. While these are generally available\r\n * via msg.sender and msg.data, they should not be accessed in such a direct\r\n * manner, since when dealing with meta-transactions the account sending and\r\n * paying for execution may not be the actual sender (as far as an application\r\n * is concerned).\r\n *\r\n * This contract is only required for intermediate, library-like contracts.\r\n */\r\nabstract contract Context {\r\n    function _msgSender() internal view virtual returns (address) {\r\n        return msg.sender;\r\n    }\r\n\r\n    function _msgData() internal view virtual returns (bytes calldata) {\r\n        return msg.data;\r\n    }\r\n}\r\n\r\n// File: contracts/lib/Ownable.sol\r\n\r\npragma solidity 0.6.12;\r\n\r\n\r\n\r\n/**\r\n * @dev Contract module which provides a basic access control mechanism, where\r\n * there is an account (an owner) that can be granted exclusive access to\r\n * specific functions.\r\n *\r\n * By default, the owner account will be the one that deploys the contract. This\r\n * can later be changed with {transferOwnership}.\r\n *\r\n * This module is used through inheritance. It will make available the modifier\r\n * `onlyOwner`, which can be applied to your functions to restrict their use to\r\n * the owner.\r\n */\r\nabstract contract Ownable is Context {\r\n    address private _owner;\r\n\r\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\r\n\r\n    /**\r\n     * @dev Initializes the contract setting the deployer as the initial owner.\r\n     */\r\n    constructor() public {\r\n        _setOwner(_msgSender());\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the address of the current owner.\r\n     */\r\n    function owner() public view virtual returns (address) {\r\n        return _owner;\r\n    }\r\n\r\n    /**\r\n     * @dev Throws if called by any account other than the owner.\r\n     */\r\n    modifier onlyOwner() {\r\n        require(owner() == _msgSender(), \"Ownable: caller is not the owner\");\r\n        _;\r\n    }\r\n\r\n    /**\r\n     * @dev Leaves the contract without owner. It will not be possible to call\r\n     * `onlyOwner` functions anymore. Can only be called by the current owner.\r\n     *\r\n     * NOTE: Renouncing ownership will leave the contract without an owner,\r\n     * thereby removing any functionality that is only available to the owner.\r\n     */\r\n    function renounceOwnership() public virtual onlyOwner {\r\n        _setOwner(address(0));\r\n    }\r\n\r\n    /**\r\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\r\n     * Can only be called by the current owner.\r\n     */\r\n    function transferOwnership(address newOwner) public virtual onlyOwner {\r\n        require(newOwner != address(0), \"Ownable: new owner is the zero address\");\r\n        _setOwner(newOwner);\r\n    }\r\n\r\n    function _setOwner(address newOwner) private {\r\n        address oldOwner = _owner;\r\n        _owner = newOwner;\r\n        emit OwnershipTransferred(oldOwner, newOwner);\r\n    }\r\n}\r\n\r\n// File: contracts/lib/Pausable.sol\r\n\r\npragma solidity ^0.6.12;\r\n\r\n\r\n\r\nabstract contract Pausable is Ownable {\r\n    bool public pause;\r\n\r\n    modifier isPause() {\r\n        require(!pause, \"Pausable: paused\");\r\n        _;\r\n    }\r\n\r\n    function togglePause() public virtual onlyOwner {\r\n        pause = !pause;\r\n    }\r\n}\r\n\r\n// File: contracts/WzyxBridge.sol\r\n\r\npragma solidity ^0.6.12;\r\npragma experimental ABIEncoderV2;\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\ncontract WZyxBridge is Pausable {\r\n    using SafeMath for *;\r\n\r\n    struct User {\r\n        uint256 amount;\r\n        uint256 fee;\r\n        uint256 totalRedeem;\r\n    }\r\n\r\n    struct Swap {\r\n        address token;\r\n        address user;\r\n        uint256 amount;\r\n        uint256 fee;\r\n        bytes32 hash;\r\n    }\r\n\r\n    int256 public chainId;\r\n\r\n    address public oracle;\r\n    address public wzyx;\r\n    address public feeTo;\r\n    address public migrator;\r\n\r\n    mapping(address => bool) public listOfSupportedTokens;\r\n    mapping(address => uint256) public minLimitForSwap;\r\n    mapping(address => uint256) public tokensBalances;\r\n    mapping(bytes32 => bool) public checkedHashes;\r\n    mapping(address => mapping(address => User)) public users;\r\n\r\n\r\n    constructor(address _oracle, address _wzyx, address _feeTo) public {\r\n        chainId = ChainId.getChainId();\r\n        oracle = _oracle;\r\n        wzyx = _wzyx;\r\n        feeTo = _feeTo;\r\n    }\r\n\r\n\r\n    /**** Modifiers ****/\r\n    modifier onlyOracle() {\r\n        require(msg.sender == oracle, \"ZyxBridge: Not oracle\");\r\n        _;\r\n    }\r\n\r\n    modifier supportedToken(address token) {\r\n        require(listOfSupportedTokens[token], \"ZyxBridge: Not supported token\");\r\n        _;\r\n    }\r\n\r\n    modifier newHash(bytes32 hash) {\r\n        require(!checkedHashes[hash], \"ZyxBridge: Duplicated hash\");\r\n        _;\r\n    }\r\n\r\n    event NewSwap(\r\n        address token,\r\n        address user,\r\n        address oracle,\r\n        uint256 amount,\r\n        uint256 fee,\r\n        int256 chainIdFrom,\r\n        int256 chainIdTo,\r\n        bytes32 hash\r\n    );\r\n\r\n    event Redeem(\r\n        address token,\r\n        address user,\r\n        uint256 amount,\r\n        uint256 fee\r\n    );\r\n\r\n    event NewDeposit(\r\n        address token,\r\n        address user,\r\n        uint256 amount,\r\n        int256 chainIdFrom,\r\n        int256 chainIdTo\r\n    );\r\n\r\n    function newTransfer(Swap calldata swapInfo) public onlyOracle\r\n        supportedToken(swapInfo.token)\r\n        isPause\r\n        newHash(swapInfo.hash)\r\n    {\r\n        User storage user = users[swapInfo.token][swapInfo.user];\r\n        user.amount = user.amount.add(swapInfo.amount);\r\n        user.fee = user.fee.add(swapInfo.fee);\r\n\r\n        if (wzyx != swapInfo.token) {\r\n            tokensBalances[swapInfo.token] = tokensBalances[swapInfo.token].sub(swapInfo.amount).sub(swapInfo.fee);\r\n        }\r\n\r\n        checkedHashes[swapInfo.hash] = true;\r\n\r\n        emit NewSwap(\r\n            swapInfo.token,\r\n            swapInfo.user,\r\n            msg.sender,\r\n            swapInfo.amount,\r\n            swapInfo.fee,\r\n            ChainId.zyxChainId,\r\n            chainId,\r\n            swapInfo.hash\r\n        );\r\n    }\r\n\r\n    function redeemToken(address token) public supportedToken(token) {\r\n        User storage user = users[token][msg.sender];\r\n        require(user.amount > 0, \"ZyxBridge: nothing to withdraw\");\r\n        if (token == wzyx) {\r\n            IWZYX(wzyx).mint(msg.sender, user.amount);\r\n            IWZYX(wzyx).mint(feeTo, user.fee);\r\n        } else {\r\n            IERC20(token).transfer(msg.sender, user.amount);\r\n            IERC20(token).transfer(feeTo, user.fee);\r\n        }\r\n        user.totalRedeem = user.totalRedeem.add(user.amount);\r\n        uint256 amount = user.amount;\r\n        uint256 fee = user.fee;\r\n        user.amount = 0;\r\n        user.fee = 0;\r\n        emit Redeem(token, msg.sender, amount, fee);\r\n    }\r\n\r\n    function depositToken(address token, uint256 amount) public supportedToken(token) isPause {\r\n        require(amount >= minLimitForSwap[token], \"ZyxBridge: amount is too small\");\r\n        if (token == wzyx) {\r\n            IWZYX(wzyx).burnFrom(msg.sender, amount);\r\n        } else {\r\n            IERC20(token).transferFrom(msg.sender, address(this), amount);\r\n            tokensBalances[token] = tokensBalances[token].add(amount);\r\n        }\r\n        emit NewDeposit(token, msg.sender, amount, chainId, ChainId.zyxChainId);\r\n    }\r\n\r\n\r\n    /**** Admin functions  ****/\r\n    function addCoin(address _token, uint256 _minSwap) public onlyOwner {\r\n        listOfSupportedTokens[_token] = true;\r\n        minLimitForSwap[_token] = _minSwap;\r\n    }\r\n\r\n    function removeCoin(address _token) public onlyOwner {\r\n        delete listOfSupportedTokens[_token];\r\n        delete minLimitForSwap[_token];\r\n    }\r\n\r\n    function setOracle(address _oracle) public onlyOwner {\r\n        oracle = _oracle;\r\n    }\r\n\r\n    function setMigrator(address _migrator) public onlyOwner {\r\n        migrator = _migrator;\r\n    }\r\n\r\n    function setWzyx(address _wzyx) public onlyOwner {\r\n        wzyx = _wzyx;\r\n    }\r\n\r\n    function setFeeTo(address _feeTo) public onlyOwner {\r\n        feeTo = _feeTo;\r\n    }\r\n\r\n    function migrate(address _token) public onlyOwner {\r\n        uint256 currentBalance = IERC20(_token).balanceOf(address(this));\r\n        IERC20(_token).transfer(migrator,currentBalance);\r\n        delete listOfSupportedTokens[_token];\r\n        delete minLimitForSwap[_token];\r\n        delete tokensBalances[_token];\r\n    }\r\n}","ABI":"[{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_oracle\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_wzyx\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_feeTo\",\"type\":\"address\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"token\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"int256\",\"name\":\"chainIdFrom\",\"type\":\"int256\"},{\"indexed\":false,\"internalType\":\"int256\",\"name\":\"chainIdTo\",\"type\":\"int256\"}],\"name\":\"NewDeposit\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"token\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"oracle\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"fee\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"int256\",\"name\":\"chainIdFrom\",\"type\":\"int256\"},{\"indexed\":false,\"internalType\":\"int256\",\"name\":\"chainIdTo\",\"type\":\"int256\"},{\"indexed\":false,\"internalType\":\"bytes32\",\"name\":\"hash\",\"type\":\"bytes32\"}],\"name\":\"NewSwap\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"token\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"fee\",\"type\":\"uint256\"}],\"name\":\"Redeem\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_token\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_minSwap\",\"type\":\"uint256\"}],\"name\":\"addCoin\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"chainId\",\"outputs\":[{\"internalType\":\"int256\",\"name\":\"\",\"type\":\"int256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"name\":\"checkedHashes\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"token\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"depositToken\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"feeTo\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"listOfSupportedTokens\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_token\",\"type\":\"address\"}],\"name\":\"migrate\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"migrator\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"minLimitForSwap\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"components\":[{\"internalType\":\"address\",\"name\":\"token\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"fee\",\"type\":\"uint256\"},{\"internalType\":\"bytes32\",\"name\":\"hash\",\"type\":\"bytes32\"}],\"internalType\":\"struct WZyxBridge.Swap\",\"name\":\"swapInfo\",\"type\":\"tuple\"}],\"name\":\"newTransfer\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"oracle\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"pause\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"token\",\"type\":\"address\"}],\"name\":\"redeemToken\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_token\",\"type\":\"address\"}],\"name\":\"removeCoin\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_feeTo\",\"type\":\"address\"}],\"name\":\"setFeeTo\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_migrator\",\"type\":\"address\"}],\"name\":\"setMigrator\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_oracle\",\"type\":\"address\"}],\"name\":\"setOracle\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_wzyx\",\"type\":\"address\"}],\"name\":\"setWzyx\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"togglePause\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"tokensBalances\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"users\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"fee\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"totalRedeem\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"wzyx\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"}]","ContractName":"WZyxBridge","CompilerVersion":"v0.6.12+commit.27d51765","OptimizationUsed":"0","Runs":"200","ConstructorArguments":"0000000000000000000000001205d5e353a80831b5e97e54f8c1c0d4afb27037000000000000000000000000dc540d5d2b6ca8fe0cfe8e975c944e0b4a9dab87000000000000000000000000207671d940765baf292ad5e3ef0df6fdc7e5d7de","EVMVersion":"Default","Library":"","LicenseType":"None","Proxy":"0","Implementation":"","SwarmSource":"ipfs://f6be68a6443073ae01f181bec3aa9aff19ef6ab246e6718483ad94834dd1612d"}]}