{"status":"1","message":"OK","result":[{"SourceCode":"{\"ERC721.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\n// File: @openzeppelin/contracts/utils/Context.sol\\npragma solidity 0.8.0;\\n\\n/*\\n* @dev Provides information about the current execution context, including the\\n* sender of the transaction and its data. While these are generally available\\n* via msg.sender and msg.data, they should not be accessed in such a direct\\n* manner, since when dealing with GSN meta-transactions the account sending and\\n* paying for execution may not be the actual sender (as far as an application\\n* is concerned).\\n*\\n* This contract is only required for intermediate, library-like contracts.\\n*/\\nabstract contract Context {\\nfunction _msgSender() internal view virtual returns (address) {\\nreturn msg.sender;\\n}\\n\\nfunction _msgData() internal view virtual returns (bytes calldata) {\\nreturn msg.data;\\n}\\n}\\n// File: @openzeppelin/contracts/introspection/IERC165.sol\\n\\npragma solidity 0.8.0;\\n\\n/**\\n* @dev Interface of the ERC165 standard, as defined in the\\n* https://eips.ethereum.org/EIPS/eip-165[EIP].\\n*\\n* Implementers can declare support of contract interfaces, which can then be\\n* queried by others ({ERC165Checker}).\\n*\\n* For an implementation, see {ERC165}.\\n*/\\ninterface IERC165 {\\n/**\\n* @dev Returns true if this contract implements the interface defined by\\n* `interfaceId`. See the corresponding\\n* https://eips.ethereum.org/EIPS/eip-165#how-interfaces-are-identified[EIP section]\\n* to learn more about how these ids are created.\\n*\\n* This function call must use less than 30 000 gas.\\n*/\\nfunction supportsInterface(bytes4 interfaceId) external view returns (bool);\\n}\\n\\n// File: @openzeppelin/contracts/token/ERC721/IERC721.sol\\npragma solidity 0.8.0;\\n\\n/**\\n* @dev Required interface of an ERC721 compliant contract.\\n*/\\ninterface IERC721 is IERC165 {\\n/**\\n* @dev Emitted when `tokenId` token is transferred from `from` to `to`.\\n*/\\nevent Transfer(address indexed from, address indexed to, uint256 indexed tokenId);\\n\\n/**\\n* @dev Emitted when `owner` enables `approved` to manage the `tokenId` token.\\n*/\\nevent Approval(address indexed owner, address indexed approved, uint256 indexed tokenId);\\n\\n/**\\n* @dev Emitted when `owner` enables or disables (`approved`) `operator` to manage all of its assets.\\n*/\\nevent ApprovalForAll(address indexed owner, address indexed operator, bool approved);\\n\\n/**\\n* @dev Returns the number of tokens in ``owner``\\u0027s account.\\n*/\\nfunction balanceOf(address owner) external view returns (uint256 balance);\\n\\n/**\\n* @dev Returns the owner of the `tokenId` token.\\n*\\n* Requirements:\\n*\\n* - `tokenId` must exist.\\n*/\\nfunction ownerOf(uint256 tokenId) external view returns (address owner);\\n\\n/**\\n* @dev Safely transfers `tokenId` token from `from` to `to`, checking first that contract recipients\\n* are aware of the ERC721 protocol to prevent tokens from being forever locked.\\n*\\n* Requirements:\\n*\\n* - `from` cannot be the zero address.\\n* - `to` cannot be the zero address.\\n* - `tokenId` token must exist and be owned by `from`.\\n* - If the caller is not `from`, it must be have been allowed to move this token by either {approve} or {setApprovalForAll}.\\n* - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer.\\n*\\n* Emits a {Transfer} event.\\n*/\\nfunction safeTransferFrom(address from, address to, uint256 tokenId) external;\\n\\n/**\\n* @dev Transfers `tokenId` token from `from` to `to`.\\n*\\n* WARNING: Usage of this method is discouraged, use {safeTransferFrom} whenever possible.\\n*\\n* Requirements:\\n*\\n* - `from` cannot be the zero address.\\n* - `to` cannot be the zero address.\\n* - `tokenId` token must be owned by `from`.\\n* - If the caller is not `from`, it must be approved to move this token by either {approve} or {setApprovalForAll}.\\n*\\n* Emits a {Transfer} event.\\n*/\\nfunction transferFrom(address from, address to, uint256 tokenId) external;\\n\\n/**\\n* @dev Gives permission to `to` to transfer `tokenId` token to another account.\\n* The approval is cleared when the token is transferred.\\n*\\n* Only a single account can be approved at a time, so approving the zero address clears previous approvals.\\n*\\n* Requirements:\\n*\\n* - The caller must own the token or be an approved operator.\\n* - `tokenId` must exist.\\n*\\n* Emits an {Approval} event.\\n*/\\nfunction approve(address to, uint256 tokenId) external;\\n\\n/**\\n* @dev Returns the account approved for `tokenId` token.\\n*\\n* Requirements:\\n*\\n* - `tokenId` must exist.\\n*/\\nfunction getApproved(uint256 tokenId) external view returns (address operator);\\n\\n/**\\n* @dev Approve or remove `operator` as an operator for the caller.\\n* Operators can call {transferFrom} or {safeTransferFrom} for any token owned by the caller.\\n*\\n* Requirements:\\n*\\n* - The `operator` cannot be the caller.\\n*\\n* Emits an {ApprovalForAll} event.\\n*/\\nfunction setApprovalForAll(address operator, bool _approved) external;\\n\\n/**\\n* @dev Returns if the `operator` is allowed to manage all of the assets of `owner`.\\n*\\n* See {setApprovalForAll}\\n*/\\nfunction isApprovedForAll(address owner, address operator) external view returns (bool);\\n\\n/**\\n* @dev Safely transfers `tokenId` token from `from` to `to`.\\n*\\n* Requirements:\\n*\\n* - `from` cannot be the zero address.\\n* - `to` cannot be the zero address.\\n* - `tokenId` token must exist and be owned by `from`.\\n* - If the caller is not `from`, it must be approved to move this token by either {approve} or {setApprovalForAll}.\\n* - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer.\\n*\\n* Emits a {Transfer} event.\\n*/\\nfunction safeTransferFrom(address from, address to, uint256 tokenId, bytes calldata data) external;\\n}\\n\\n// File: @openzeppelin/contracts/token/ERC721/IERC721Metadata.sol\\npragma solidity 0.8.0;\\n\\n/**\\n* @title ERC-721 Non-Fungible Token Standard, optional metadata extension\\n* @dev See https://eips.ethereum.org/EIPS/eip-721\\n*/\\ninterface IERC721Metadata is IERC721 {\\n\\n/**\\n* @dev Returns the token collection name.\\n*/\\nfunction name() external view returns (string memory);\\n\\n/**\\n* @dev Returns the token collection symbol.\\n*/\\nfunction symbol() external view returns (string memory);\\n\\n/**\\n* @dev Returns the Uniform Resource Identifier (URI) for `tokenId` token.\\n*/\\nfunction tokenURI(uint256 tokenId) external view returns (string memory);\\n}\\n\\n// File: @openzeppelin/contracts/token/ERC721/IERC721Enumerable.sol\\n\\npragma solidity 0.8.0;\\n\\n/**\\n* @title ERC-721 Non-Fungible Token Standard, optional enumeration extension\\n* @dev See https://eips.ethereum.org/EIPS/eip-721\\n*/\\ninterface IERC721Enumerable is IERC721 {\\n\\n/**\\n* @dev Returns the total amount of tokens stored by the contract.\\n*/\\nfunction totalSupply() external view returns (uint256);\\n\\n/**\\n* @dev Returns a token ID owned by `owner` at a given `index` of its token list.\\n* Use along with {balanceOf} to enumerate all of ``owner``\\u0027s tokens.\\n*/\\nfunction tokenOfOwnerByIndex(address owner, uint256 index) external view returns (uint256 tokenId);\\n\\n/**\\n* @dev Returns a token ID at a given `index` of all the tokens stored by the contract.\\n* Use along with {totalSupply} to enumerate all tokens.\\n*/\\nfunction tokenByIndex(uint256 index) external view returns (uint256);\\n}\\n\\n// File: @openzeppelin/contracts/token/ERC721/IERC721Receiver.sol\\n\\npragma solidity 0.8.0;\\n\\n/**\\n* @title ERC721 token receiver interface\\n* @dev Interface for any contract that wants to support safeTransfers\\n* from ERC721 asset contracts.\\n*/\\ninterface IERC721Receiver {\\n/**\\n* @dev Whenever an {IERC721} `tokenId` token is transferred to this contract via {IERC721-safeTransferFrom}\\n* by `operator` from `from`, this function is called.\\n*\\n* It must return its Solidity selector to confirm the token transfer.\\n* If any other value is returned or the interface is not implemented by the recipient, the transfer will be reverted.\\n*\\n* The selector can be obtained in Solidity with `IERC721.onERC721Received.selector`.\\n*/\\nfunction onERC721Received(address operator, address from, uint256 tokenId, bytes calldata data) external returns (bytes4);\\n}\\n\\n// File: @openzeppelin/contracts/introspection/ERC165.sol\\npragma solidity 0.8.0;\\n\\n/**\\n* @dev Implementation of the {IERC165} interface.\\n*\\n* Contracts may inherit from this and call {_registerInterface} to declare\\n* their support of an interface.\\n*/\\nabstract contract ERC165 is IERC165 {\\n/*\\n* bytes4(keccak256(\\u0027supportsInterface(bytes4)\\u0027)) == 0x01ffc9a7\\n*/\\nbytes4 private constant _INTERFACE_ID_ERC165 = 0x01ffc9a7;\\n\\n/**\\n* @dev Mapping of interface ids to whether or not it\\u0027s supported.\\n*/\\nmapping(bytes4 =\\u003e bool) private _supportedInterfaces;\\n\\nconstructor () {\\n// Derived contracts need only register support for their own interfaces,\\n// we register support for ERC165 itself here\\n_registerInterface(_INTERFACE_ID_ERC165);\\n}\\n\\n/**\\n* @dev See {IERC165-supportsInterface}.\\n*\\n* Time complexity O(1), guaranteed to always use less than 30 000 gas.\\n*/\\nfunction supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {\\nreturn _supportedInterfaces[interfaceId];\\n}\\n\\n/**\\n* @dev Registers the contract as an implementer of the interface defined by\\n* `interfaceId`. Support of the actual ERC165 interface is automatic and\\n* registering its interface id is not required.\\n*\\n* See {IERC165-supportsInterface}.\\n*\\n* Requirements:\\n*\\n* - `interfaceId` cannot be the ERC165 invalid interface (`0xffffffff`).\\n*/\\nfunction _registerInterface(bytes4 interfaceId) internal virtual {\\nrequire(interfaceId != 0xffffffff, \\\"ERC165: invalid interface id\\\");\\n_supportedInterfaces[interfaceId] = true;\\n}\\n}\\n\\n// File: @openzeppelin/contracts/math/SafeMath.sol\\npragma solidity 0.8.0;\\n\\n/**\\n* @dev Wrappers over Solidity\\u0027s arithmetic operations with added overflow\\n* checks.\\n*\\n* Arithmetic operations in Solidity wrap on overflow. This can easily result\\n* in bugs, because programmers usually assume that an overflow raises an\\n* error, which is the standard behavior in high level programming languages.\\n* `SafeMath` restores this intuition by reverting the transaction when an\\n* operation overflows.\\n*\\n* Using this library instead of the unchecked operations eliminates an entire\\n* class of bugs, so it\\u0027s recommended to use it always.\\n*/\\nlibrary SafeMath {\\n/**\\n* @dev Returns the addition of two unsigned integers, with an overflow flag.\\n*\\n* _Available since v3.4._\\n*/\\nfunction tryAdd(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\nuint256 c = a + b;\\nif (c \\u003c a) return (false, 0);\\nreturn (true, c);\\n}\\n\\n/**\\n* @dev Returns the substraction of two unsigned integers, with an overflow flag.\\n*\\n* _Available since v3.4._\\n*/\\nfunction trySub(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\nif (b \\u003e a) return (false, 0);\\nreturn (true, a - b);\\n}\\n\\n/**\\n* @dev Returns the multiplication of two unsigned integers, with an overflow flag.\\n*\\n* _Available since v3.4._\\n*/\\nfunction tryMul(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n// Gas optimization: this is cheaper than requiring \\u0027a\\u0027 not being zero, but the\\n// benefit is lost if \\u0027b\\u0027 is also tested.\\n// See: https://github.com/OpenZeppelin/openzeppelin-contracts/pull/522\\nif (a == 0) return (true, 0);\\nuint256 c = a * b;\\nif (c / a != b) return (false, 0);\\nreturn (true, c);\\n}\\n\\n/**\\n* @dev Returns the division of two unsigned integers, with a division by zero flag.\\n*\\n* _Available since v3.4._\\n*/\\nfunction tryDiv(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\nif (b == 0) return (false, 0);\\nreturn (true, a / b);\\n}\\n\\n/**\\n* @dev Returns the remainder of dividing two unsigned integers, with a division by zero flag.\\n*\\n* _Available since v3.4._\\n*/\\nfunction tryMod(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\nif (b == 0) return (false, 0);\\nreturn (true, a % b);\\n}\\n\\n/**\\n* @dev Returns the addition of two unsigned integers, reverting on\\n* overflow.\\n*\\n* Counterpart to Solidity\\u0027s `+` operator.\\n*\\n* Requirements:\\n*\\n* - Addition cannot overflow.\\n*/\\nfunction add(uint256 a, uint256 b) internal pure returns (uint256) {\\nuint256 c = a + b;\\nrequire(c \\u003e= a, \\\"SafeMath: addition overflow\\\");\\nreturn c;\\n}\\n\\n/**\\n* @dev Returns the subtraction of two unsigned integers, reverting on\\n* overflow (when the result is negative).\\n*\\n* Counterpart to Solidity\\u0027s `-` operator.\\n*\\n* Requirements:\\n*\\n* - Subtraction cannot overflow.\\n*/\\nfunction sub(uint256 a, uint256 b) internal pure returns (uint256) {\\nrequire(b \\u003c= a, \\\"SafeMath: subtraction overflow\\\");\\nreturn a - b;\\n}\\n\\n/**\\n* @dev Returns the multiplication of two unsigned integers, reverting on\\n* overflow.\\n*\\n* Counterpart to Solidity\\u0027s `*` operator.\\n*\\n* Requirements:\\n*\\n* - Multiplication cannot overflow.\\n*/\\nfunction mul(uint256 a, uint256 b) internal pure returns (uint256) {\\nif (a == 0) return 0;\\nuint256 c = a * b;\\nrequire(c / a == b, \\\"SafeMath: multiplication overflow\\\");\\nreturn c;\\n}\\n\\n/**\\n* @dev Returns the integer division of two unsigned integers, reverting on\\n* division by zero. The result is rounded towards zero.\\n*\\n* Counterpart to Solidity\\u0027s `/` operator. Note: this function uses a\\n* `revert` opcode (which leaves remaining gas untouched) while Solidity\\n* uses an invalid opcode to revert (consuming all remaining gas).\\n*\\n* Requirements:\\n*\\n* - The divisor cannot be zero.\\n*/\\nfunction div(uint256 a, uint256 b) internal pure returns (uint256) {\\nrequire(b \\u003e 0, \\\"SafeMath: division by zero\\\");\\nreturn a / b;\\n}\\n\\n/**\\n* @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\\n* reverting when dividing by zero.\\n*\\n* Counterpart to Solidity\\u0027s `%` operator. This function uses a `revert`\\n* opcode (which leaves remaining gas untouched) while Solidity uses an\\n* invalid opcode to revert (consuming all remaining gas).\\n*\\n* Requirements:\\n*\\n* - The divisor cannot be zero.\\n*/\\nfunction mod(uint256 a, uint256 b) internal pure returns (uint256) {\\nrequire(b \\u003e 0, \\\"SafeMath: modulo by zero\\\");\\nreturn a % b;\\n}\\n\\n/**\\n* @dev Returns the subtraction of two unsigned integers, reverting with custom message on\\n* overflow (when the result is negative).\\n*\\n* CAUTION: This function is deprecated because it requires allocating memory for the error\\n* message unnecessarily. For custom revert reasons use {trySub}.\\n*\\n* Counterpart to Solidity\\u0027s `-` operator.\\n*\\n* Requirements:\\n*\\n* - Subtraction cannot overflow.\\n*/\\nfunction sub(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\\nrequire(b \\u003c= a, errorMessage);\\nreturn a - b;\\n}\\n\\n/**\\n* @dev Returns the integer division of two unsigned integers, reverting with custom message on\\n* division by zero. The result is rounded towards zero.\\n*\\n* CAUTION: This function is deprecated because it requires allocating memory for the error\\n* message unnecessarily. For custom revert reasons use {tryDiv}.\\n*\\n* Counterpart to Solidity\\u0027s `/` operator. Note: this function uses a\\n* `revert` opcode (which leaves remaining gas untouched) while Solidity\\n* uses an invalid opcode to revert (consuming all remaining gas).\\n*\\n* Requirements:\\n*\\n* - The divisor cannot be zero.\\n*/\\nfunction div(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\\nrequire(b \\u003e 0, errorMessage);\\nreturn a / b;\\n}\\n\\n/**\\n* @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\\n* reverting with custom message when dividing by zero.\\n*\\n* CAUTION: This function is deprecated because it requires allocating memory for the error\\n* message unnecessarily. For custom revert reasons use {tryMod}.\\n*\\n* Counterpart to Solidity\\u0027s `%` operator. This function uses a `revert`\\n* opcode (which leaves remaining gas untouched) while Solidity uses an\\n* invalid opcode to revert (consuming all remaining gas).\\n*\\n* Requirements:\\n*\\n* - The divisor cannot be zero.\\n*/\\nfunction mod(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\\nrequire(b \\u003e 0, errorMessage);\\nreturn a % b;\\n}\\n}\\n\\n// File: @openzeppelin/contracts/utils/Address.sol\\npragma solidity 0.8.0;\\n\\n/**\\n* @dev Collection of functions related to the address type\\n*/\\nlibrary Address {\\n/**\\n* @dev Returns true if `account` is a contract.\\n*\\n* [IMPORTANT]\\n* ====\\n* It is unsafe to assume that an address for which this function returns\\n* false is an externally-owned account (EOA) and not a contract.\\n*\\n* Among others, `isContract` will return false for the following\\n* types of addresses:\\n*\\n* - an externally-owned account\\n* - a contract in construction\\n* - an address where a contract will be created\\n* - an address where a contract lived, but was destroyed\\n* ====\\n*/\\nfunction isContract(address account) internal view returns (bool) {\\n// This method relies on extcodesize, which returns 0 for contracts in\\n// construction, since the code is only stored at the end of the\\n// constructor execution.\\n\\nuint256 size;\\n// solhint-disable-next-line no-inline-assembly\\nassembly { size := extcodesize(account) }\\nreturn size \\u003e 0;\\n}\\n\\n/**\\n* @dev Replacement for Solidity\\u0027s `transfer`: sends `amount` wei to\\n* `recipient`, forwarding all available gas and reverting on errors.\\n*\\n* https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\\n* of certain opcodes, possibly making contracts go over the 2300 gas limit\\n* imposed by `transfer`, making them unable to receive funds via\\n* `transfer`. {sendValue} removes this limitation.\\n*\\n* https://diligence.consensys.net/posts/2019/09/stop-using-soliditys-transfer-now/[Learn more].\\n*\\n* IMPORTANT: because control is transferred to `recipient`, care must be\\n* taken to not create reentrancy vulnerabilities. Consider using\\n* {ReentrancyGuard} or the\\n* https://solidity.readthedocs.io/en/v0.5.11/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\\n*/\\nfunction sendValue(address payable recipient, uint256 amount) internal {\\nrequire(address(this).balance \\u003e= amount, \\\"Address: insufficient balance\\\");\\n\\n// solhint-disable-next-line avoid-low-level-calls, avoid-call-value\\n(bool success, ) = recipient.call{ value: amount }(\\\"\\\");\\nrequire(success, \\\"Address: unable to send value, recipient may have reverted\\\");\\n}\\n\\n/**\\n* @dev Performs a Solidity function call using a low level `call`. A\\n* plain`call` is an unsafe replacement for a function call: use this\\n* function instead.\\n*\\n* If `target` reverts with a revert reason, it is bubbled up by this\\n* function (like regular Solidity function calls).\\n*\\n* Returns the raw returned data. To convert to the expected return value,\\n* use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\\n*\\n* Requirements:\\n*\\n* - `target` must be a contract.\\n* - calling `target` with `data` must not revert.\\n*\\n* _Available since v3.1._\\n*/\\nfunction functionCall(address target, bytes memory data) internal returns (bytes memory) {\\nreturn functionCall(target, data, \\\"Address: low-level call failed\\\");\\n}\\n\\n/**\\n* @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\\n* `errorMessage` as a fallback revert reason when `target` reverts.\\n*\\n* _Available since v3.1._\\n*/\\nfunction functionCall(address target, bytes memory data, string memory errorMessage) internal returns (bytes memory) {\\nreturn functionCallWithValue(target, data, 0, errorMessage);\\n}\\n\\n/**\\n* @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n* but also transferring `value` wei to `target`.\\n*\\n* Requirements:\\n*\\n* - the calling contract must have an ETH balance of at least `value`.\\n* - the called Solidity function must be `payable`.\\n*\\n* _Available since v3.1._\\n*/\\nfunction functionCallWithValue(address target, bytes memory data, uint256 value) internal returns (bytes memory) {\\nreturn functionCallWithValue(target, data, value, \\\"Address: low-level call with value failed\\\");\\n}\\n\\n/**\\n* @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\\n* with `errorMessage` as a fallback revert reason when `target` reverts.\\n*\\n* _Available since v3.1._\\n*/\\nfunction functionCallWithValue(address target, bytes memory data, uint256 value, string memory errorMessage) internal returns (bytes memory) {\\nrequire(address(this).balance \\u003e= value, \\\"Address: insufficient balance for call\\\");\\nrequire(isContract(target), \\\"Address: call to non-contract\\\");\\n\\n// solhint-disable-next-line avoid-low-level-calls\\n(bool success, bytes memory returndata) = target.call{ value: value }(data);\\nreturn _verifyCallResult(success, returndata, errorMessage);\\n}\\n\\n/**\\n* @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n* but performing a static call.\\n*\\n* _Available since v3.3._\\n*/\\nfunction functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\\nreturn functionStaticCall(target, data, \\\"Address: low-level static call failed\\\");\\n}\\n\\n/**\\n* @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n* but performing a static call.\\n*\\n* _Available since v3.3._\\n*/\\nfunction functionStaticCall(address target, bytes memory data, string memory errorMessage) internal view returns (bytes memory) {\\nrequire(isContract(target), \\\"Address: static call to non-contract\\\");\\n\\n// solhint-disable-next-line avoid-low-level-calls\\n(bool success, bytes memory returndata) = target.staticcall(data);\\nreturn _verifyCallResult(success, returndata, errorMessage);\\n}\\n\\n/**\\n* @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n* but performing a delegate call.\\n*\\n* _Available since v3.4._\\n*/\\nfunction functionDelegateCall(address target, bytes memory data) internal returns (bytes memory) {\\nreturn functionDelegateCall(target, data, \\\"Address: low-level delegate call failed\\\");\\n}\\n\\n/**\\n* @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n* but performing a delegate call.\\n*\\n* _Available since v3.4._\\n*/\\nfunction functionDelegateCall(address target, bytes memory data, string memory errorMessage) internal returns (bytes memory) {\\nrequire(isContract(target), \\\"Address: delegate call to non-contract\\\");\\n\\n// solhint-disable-next-line avoid-low-level-calls\\n(bool success, bytes memory returndata) = target.delegatecall(data);\\nreturn _verifyCallResult(success, returndata, errorMessage);\\n}\\n\\nfunction _verifyCallResult(bool success, bytes memory returndata, string memory errorMessage) private pure returns(bytes memory) {\\nif (success) {\\nreturn returndata;\\n} else {\\n// Look for revert reason and bubble it up if present\\nif (returndata.length \\u003e 0) {\\n// The easiest way to bubble the revert reason is using memory via assembly\\n\\n// solhint-disable-next-line no-inline-assembly\\nassembly {\\nlet returndata_size := mload(returndata)\\nrevert(add(32, returndata), returndata_size)\\n}\\n} else {\\nrevert(errorMessage);\\n}\\n}\\n}\\n}\\n\\n// File: @openzeppelin/contracts/utils/EnumerableSet.sol\\npragma solidity 0.8.0;\\n\\n/**\\n* @dev Library for managing\\n* https://en.wikipedia.org/wiki/Set_(abstract_data_type)[sets] of primitive\\n* types.\\n*\\n* Sets have the following properties:\\n*\\n* - Elements are added, removed, and checked for existence in constant time\\n* (O(1)).\\n* - Elements are enumerated in O(n). No guarantees are made on the ordering.\\n*\\n* ```\\n* contract Example {\\n* // Add the library methods\\n* using EnumerableSet for EnumerableSet.AddressSet;\\n*\\n* // Declare a set state variable\\n* EnumerableSet.AddressSet private mySet;\\n* }\\n* ```\\n*\\n* As of v3.3.0, sets of type `bytes32` (`Bytes32Set`), `address` (`AddressSet`)\\n* and `uint256` (`UintSet`) are supported.\\n*/\\nlibrary EnumerableSet {\\n// To implement this library for multiple types with as little code\\n// repetition as possible, we write it in terms of a generic Set type with\\n// bytes32 values.\\n// The Set implementation uses private functions, and user-facing\\n// implementations (such as AddressSet) are just wrappers around the\\n// underlying Set.\\n// This means that we can only create new EnumerableSets for types that fit\\n// in bytes32.\\n\\nstruct Set {\\n// Storage of set values\\nbytes32[] _values;\\n\\n// Position of the value in the `values` array, plus 1 because index 0\\n// means a value is not in the set.\\nmapping (bytes32 =\\u003e uint256) _indexes;\\n}\\n\\n/**\\n* @dev Add a value to a set. O(1).\\n*\\n* Returns true if the value was added to the set, that is if it was not\\n* already present.\\n*/\\nfunction _add(Set storage set, bytes32 value) private returns (bool) {\\nif (!_contains(set, value)) {\\nset._values.push(value);\\n// The value is stored at length-1, but we add 1 to all indexes\\n// and use 0 as a sentinel value\\nset._indexes[value] = set._values.length;\\nreturn true;\\n} else {\\nreturn false;\\n}\\n}\\n\\n/**\\n* @dev Removes a value from a set. O(1).\\n*\\n* Returns true if the value was removed from the set, that is if it was\\n* present.\\n*/\\nfunction _remove(Set storage set, bytes32 value) private returns (bool) {\\n// We read and store the value\\u0027s index to prevent multiple reads from the same storage slot\\nuint256 valueIndex = set._indexes[value];\\n\\nif (valueIndex != 0) { // Equivalent to contains(set, value)\\n// To delete an element from the _values array in O(1), we swap the element to delete with the last one in\\n// the array, and then remove the last element (sometimes called as \\u0027swap and pop\\u0027).\\n// This modifies the order of the array, as noted in {at}.\\n\\nuint256 toDeleteIndex = valueIndex - 1;\\nuint256 lastIndex = set._values.length - 1;\\n\\n// When the value to delete is the last one, the swap operation is unnecessary. However, since this occurs\\n// so rarely, we still do the swap anyway to avoid the gas cost of adding an \\u0027if\\u0027 statement.\\n\\nbytes32 lastvalue = set._values[lastIndex];\\n\\n// Move the last value to the index where the value to delete is\\nset._values[toDeleteIndex] = lastvalue;\\n// Update the index for the moved value\\nset._indexes[lastvalue] = toDeleteIndex + 1; // All indexes are 1-based\\n\\n// Delete the slot where the moved value was stored\\nset._values.pop();\\n\\n// Delete the index for the deleted slot\\ndelete set._indexes[value];\\n\\nreturn true;\\n} else {\\nreturn false;\\n}\\n}\\n\\n/**\\n* @dev Returns true if the value is in the set. O(1).\\n*/\\nfunction _contains(Set storage set, bytes32 value) private view returns (bool) {\\nreturn set._indexes[value] != 0;\\n}\\n\\n/**\\n* @dev Returns the number of values on the set. O(1).\\n*/\\nfunction _length(Set storage set) private view returns (uint256) {\\nreturn set._values.length;\\n}\\n\\n/**\\n* @dev Returns the value stored at position `index` in the set. O(1).\\n*\\n* Note that there are no guarantees on the ordering of values inside the\\n* array, and it may change when more values are added or removed.\\n*\\n* Requirements:\\n*\\n* - `index` must be strictly less than {length}.\\n*/\\nfunction _at(Set storage set, uint256 index) private view returns (bytes32) {\\nrequire(set._values.length \\u003e index, \\\"EnumerableSet: index out of bounds\\\");\\nreturn set._values[index];\\n}\\n\\n// Bytes32Set\\n\\nstruct Bytes32Set {\\nSet _inner;\\n}\\n\\n/**\\n* @dev Add a value to a set. O(1).\\n*\\n* Returns true if the value was added to the set, that is if it was not\\n* already present.\\n*/\\nfunction add(Bytes32Set storage set, bytes32 value) internal returns (bool) {\\nreturn _add(set._inner, value);\\n}\\n\\n/**\\n* @dev Removes a value from a set. O(1).\\n*\\n* Returns true if the value was removed from the set, that is if it was\\n* present.\\n*/\\nfunction remove(Bytes32Set storage set, bytes32 value) internal returns (bool) {\\nreturn _remove(set._inner, value);\\n}\\n\\n/**\\n* @dev Returns true if the value is in the set. O(1).\\n*/\\nfunction contains(Bytes32Set storage set, bytes32 value) internal view returns (bool) {\\nreturn _contains(set._inner, value);\\n}\\n\\n/**\\n* @dev Returns the number of values in the set. O(1).\\n*/\\nfunction length(Bytes32Set storage set) internal view returns (uint256) {\\nreturn _length(set._inner);\\n}\\n\\n/**\\n* @dev Returns the value stored at position `index` in the set. O(1).\\n*\\n* Note that there are no guarantees on the ordering of values inside the\\n* array, and it may change when more values are added or removed.\\n*\\n* Requirements:\\n*\\n* - `index` must be strictly less than {length}.\\n*/\\nfunction at(Bytes32Set storage set, uint256 index) internal view returns (bytes32) {\\nreturn _at(set._inner, index);\\n}\\n\\n// AddressSet\\n\\nstruct AddressSet {\\nSet _inner;\\n}\\n\\n/**\\n* @dev Add a value to a set. O(1).\\n*\\n* Returns true if the value was added to the set, that is if it was not\\n* already present.\\n*/\\nfunction add(AddressSet storage set, address value) internal returns (bool) {\\nreturn _add(set._inner, bytes32(uint256(uint160(value))));\\n}\\n\\n/**\\n* @dev Removes a value from a set. O(1).\\n*\\n* Returns true if the value was removed from the set, that is if it was\\n* present.\\n*/\\nfunction remove(AddressSet storage set, address value) internal returns (bool) {\\nreturn _remove(set._inner, bytes32(uint256(uint160(value))));\\n}\\n\\n/**\\n* @dev Returns true if the value is in the set. O(1).\\n*/\\nfunction contains(AddressSet storage set, address value) internal view returns (bool) {\\nreturn _contains(set._inner, bytes32(uint256(uint160(value))));\\n}\\n\\n/**\\n* @dev Returns the number of values in the set. O(1).\\n*/\\nfunction length(AddressSet storage set) internal view returns (uint256) {\\nreturn _length(set._inner);\\n}\\n\\n/**\\n* @dev Returns the value stored at position `index` in the set. O(1).\\n*\\n* Note that there are no guarantees on the ordering of values inside the\\n* array, and it may change when more values are added or removed.\\n*\\n* Requirements:\\n*\\n* - `index` must be strictly less than {length}.\\n*/\\nfunction at(AddressSet storage set, uint256 index) internal view returns (address) {\\nreturn address(uint160(uint256(_at(set._inner, index))));\\n}\\n\\n// UintSet\\n\\nstruct UintSet {\\nSet _inner;\\n}\\n\\n/**\\n* @dev Add a value to a set. O(1).\\n*\\n* Returns true if the value was added to the set, that is if it was not\\n* already present.\\n*/\\nfunction add(UintSet storage set, uint256 value) internal returns (bool) {\\nreturn _add(set._inner, bytes32(value));\\n}\\n\\n/**\\n* @dev Removes a value from a set. O(1).\\n*\\n* Returns true if the value was removed from the set, that is if it was\\n* present.\\n*/\\nfunction remove(UintSet storage set, uint256 value) internal returns (bool) {\\nreturn _remove(set._inner, bytes32(value));\\n}\\n\\n/**\\n* @dev Returns true if the value is in the set. O(1).\\n*/\\nfunction contains(UintSet storage set, uint256 value) internal view returns (bool) {\\nreturn _contains(set._inner, bytes32(value));\\n}\\n\\n/**\\n* @dev Returns the number of values on the set. O(1).\\n*/\\nfunction length(UintSet storage set) internal view returns (uint256) {\\nreturn _length(set._inner);\\n}\\n\\n/**\\n* @dev Returns the value stored at position `index` in the set. O(1).\\n*\\n* Note that there are no guarantees on the ordering of values inside the\\n* array, and it may change when more values are added or removed.\\n*\\n* Requirements:\\n*\\n* - `index` must be strictly less than {length}.\\n*/\\nfunction at(UintSet storage set, uint256 index) internal view returns (uint256) {\\nreturn uint256(_at(set._inner, index));\\n}\\n}\\n\\n// File: @openzeppelin/contracts/utils/EnumerableMap.sol\\npragma solidity 0.8.0;\\n\\n/**\\n* @dev Library for managing an enumerable variant of Solidity\\u0027s\\n* https://solidity.readthedocs.io/en/latest/types.html#mapping-types[`mapping`]\\n* type.\\n*\\n* Maps have the following properties:\\n*\\n* - Entries are added, removed, and checked for existence in constant time\\n* (O(1)).\\n* - Entries are enumerated in O(n). No guarantees are made on the ordering.\\n*\\n* ```\\n* contract Example {\\n* // Add the library methods\\n* using EnumerableMap for EnumerableMap.UintToAddressMap;\\n*\\n* // Declare a set state variable\\n* EnumerableMap.UintToAddressMap private myMap;\\n* }\\n* ```\\n*\\n* As of v3.0.0, only maps of type `uint256 -\\u003e address` (`UintToAddressMap`) are\\n* supported.\\n*/\\nlibrary EnumerableMap {\\n// To implement this library for multiple types with as little code\\n// repetition as possible, we write it in terms of a generic Map type with\\n// bytes32 keys and values.\\n// The Map implementation uses private functions, and user-facing\\n// implementations (such as Uint256ToAddressMap) are just wrappers around\\n// the underlying Map.\\n// This means that we can only create new EnumerableMaps for types that fit\\n// in bytes32.\\n\\nstruct MapEntry {\\nbytes32 _key;\\nbytes32 _value;\\n}\\n\\nstruct Map {\\n// Storage of map keys and values\\nMapEntry[] _entries;\\n\\n// Position of the entry defined by a key in the `entries` array, plus 1\\n// because index 0 means a key is not in the map.\\nmapping (bytes32 =\\u003e uint256) _indexes;\\n}\\n\\n/**\\n* @dev Adds a key-value pair to a map, or updates the value for an existing\\n* key. O(1).\\n*\\n* Returns true if the key was added to the map, that is if it was not\\n* already present.\\n*/\\nfunction _set(Map storage map, bytes32 key, bytes32 value) private returns (bool) {\\n// We read and store the key\\u0027s index to prevent multiple reads from the same storage slot\\nuint256 keyIndex = map._indexes[key];\\n\\nif (keyIndex == 0) { // Equivalent to !contains(map, key)\\nmap._entries.push(MapEntry({ _key: key, _value: value }));\\n// The entry is stored at length-1, but we add 1 to all indexes\\n// and use 0 as a sentinel value\\nmap._indexes[key] = map._entries.length;\\nreturn true;\\n} else {\\nmap._entries[keyIndex - 1]._value = value;\\nreturn false;\\n}\\n}\\n\\n/**\\n* @dev Removes a key-value pair from a map. O(1).\\n*\\n* Returns true if the key was removed from the map, that is if it was present.\\n*/\\nfunction _remove(Map storage map, bytes32 key) private returns (bool) {\\n// We read and store the key\\u0027s index to prevent multiple reads from the same storage slot\\nuint256 keyIndex = map._indexes[key];\\n\\nif (keyIndex != 0) { // Equivalent to contains(map, key)\\n// To delete a key-value pair from the _entries array in O(1), we swap the entry to delete with the last one\\n// in the array, and then remove the last entry (sometimes called as \\u0027swap and pop\\u0027).\\n// This modifies the order of the array, as noted in {at}.\\n\\nuint256 toDeleteIndex = keyIndex - 1;\\nuint256 lastIndex = map._entries.length - 1;\\n\\n// When the entry to delete is the last one, the swap operation is unnecessary. However, since this occurs\\n// so rarely, we still do the swap anyway to avoid the gas cost of adding an \\u0027if\\u0027 statement.\\n\\nMapEntry storage lastEntry = map._entries[lastIndex];\\n\\n// Move the last entry to the index where the entry to delete is\\nmap._entries[toDeleteIndex] = lastEntry;\\n// Update the index for the moved entry\\nmap._indexes[lastEntry._key] = toDeleteIndex + 1; // All indexes are 1-based\\n\\n// Delete the slot where the moved entry was stored\\nmap._entries.pop();\\n\\n// Delete the index for the deleted slot\\ndelete map._indexes[key];\\n\\nreturn true;\\n} else {\\nreturn false;\\n}\\n}\\n\\n/**\\n* @dev Returns true if the key is in the map. O(1).\\n*/\\nfunction _contains(Map storage map, bytes32 key) private view returns (bool) {\\nreturn map._indexes[key] != 0;\\n}\\n\\n/**\\n* @dev Returns the number of key-value pairs in the map. O(1).\\n*/\\nfunction _length(Map storage map) private view returns (uint256) {\\nreturn map._entries.length;\\n}\\n\\n/**\\n* @dev Returns the key-value pair stored at position `index` in the map. O(1).\\n*\\n* Note that there are no guarantees on the ordering of entries inside the\\n* array, and it may change when more entries are added or removed.\\n*\\n* Requirements:\\n*\\n* - `index` must be strictly less than {length}.\\n*/\\nfunction _at(Map storage map, uint256 index) private view returns (bytes32, bytes32) {\\nrequire(map._entries.length \\u003e index, \\\"EnumerableMap: index out of bounds\\\");\\n\\nMapEntry storage entry = map._entries[index];\\nreturn (entry._key, entry._value);\\n}\\n\\n/**\\n* @dev Tries to returns the value associated with `key`. O(1).\\n* Does not revert if `key` is not in the map.\\n*/\\nfunction _tryGet(Map storage map, bytes32 key) private view returns (bool, bytes32) {\\nuint256 keyIndex = map._indexes[key];\\nif (keyIndex == 0) return (false, 0); // Equivalent to contains(map, key)\\nreturn (true, map._entries[keyIndex - 1]._value); // All indexes are 1-based\\n}\\n\\n/**\\n* @dev Returns the value associated with `key`. O(1).\\n*\\n* Requirements:\\n*\\n* - `key` must be in the map.\\n*/\\nfunction _get(Map storage map, bytes32 key) private view returns (bytes32) {\\nuint256 keyIndex = map._indexes[key];\\nrequire(keyIndex != 0, \\\"EnumerableMap: nonexistent key\\\"); // Equivalent to contains(map, key)\\nreturn map._entries[keyIndex - 1]._value; // All indexes are 1-based\\n}\\n\\n/**\\n* @dev Same as {_get}, with a custom error message when `key` is not in the map.\\n*\\n* CAUTION: This function is deprecated because it requires allocating memory for the error\\n* message unnecessarily. For custom revert reasons use {_tryGet}.\\n*/\\nfunction _get(Map storage map, bytes32 key, string memory errorMessage) private view returns (bytes32) {\\nuint256 keyIndex = map._indexes[key];\\nrequire(keyIndex != 0, errorMessage); // Equivalent to contains(map, key)\\nreturn map._entries[keyIndex - 1]._value; // All indexes are 1-based\\n}\\n\\n// UintToAddressMap\\n\\nstruct UintToAddressMap {\\nMap _inner;\\n}\\n\\n/**\\n* @dev Adds a key-value pair to a map, or updates the value for an existing\\n* key. O(1).\\n*\\n* Returns true if the key was added to the map, that is if it was not\\n* already present.\\n*/\\nfunction set(UintToAddressMap storage map, uint256 key, address value) internal returns (bool) {\\nreturn _set(map._inner, bytes32(key), bytes32(uint256(uint160(value))));\\n}\\n\\n/**\\n* @dev Removes a value from a set. O(1).\\n*\\n* Returns true if the key was removed from the map, that is if it was present.\\n*/\\nfunction remove(UintToAddressMap storage map, uint256 key) internal returns (bool) {\\nreturn _remove(map._inner, bytes32(key));\\n}\\n\\n/**\\n* @dev Returns true if the key is in the map. O(1).\\n*/\\nfunction contains(UintToAddressMap storage map, uint256 key) internal view returns (bool) {\\nreturn _contains(map._inner, bytes32(key));\\n}\\n\\n/**\\n* @dev Returns the number of elements in the map. O(1).\\n*/\\nfunction length(UintToAddressMap storage map) internal view returns (uint256) {\\nreturn _length(map._inner);\\n}\\n\\n/**\\n* @dev Returns the element stored at position `index` in the set. O(1).\\n* Note that there are no guarantees on the ordering of values inside the\\n* array, and it may change when more values are added or removed.\\n*\\n* Requirements:\\n*\\n* - `index` must be strictly less than {length}.\\n*/\\nfunction at(UintToAddressMap storage map, uint256 index) internal view returns (uint256, address) {\\n(bytes32 key, bytes32 value) = _at(map._inner, index);\\nreturn (uint256(key), address(uint160(uint256(value))));\\n}\\n\\n/**\\n* @dev Tries to returns the value associated with `key`. O(1).\\n* Does not revert if `key` is not in the map.\\n*\\n* _Available since v3.4._\\n*/\\nfunction tryGet(UintToAddressMap storage map, uint256 key) internal view returns (bool, address) {\\n(bool success, bytes32 value) = _tryGet(map._inner, bytes32(key));\\nreturn (success, address(uint160(uint256(value))));\\n}\\n\\n/**\\n* @dev Returns the value associated with `key`. O(1).\\n*\\n* Requirements:\\n*\\n* - `key` must be in the map.\\n*/\\nfunction get(UintToAddressMap storage map, uint256 key) internal view returns (address) {\\nreturn address(uint160(uint256(_get(map._inner, bytes32(key)))));\\n}\\n\\n/**\\n* @dev Same as {get}, with a custom error message when `key` is not in the map.\\n*\\n* CAUTION: This function is deprecated because it requires allocating memory for the error\\n* message unnecessarily. For custom revert reasons use {tryGet}.\\n*/\\nfunction get(UintToAddressMap storage map, uint256 key, string memory errorMessage) internal view returns (address) {\\nreturn address(uint160(uint256(_get(map._inner, bytes32(key), errorMessage))));\\n}\\n}\\n\\n// File: @openzeppelin/contracts/utils/Strings.sol\\npragma solidity 0.8.0;\\n\\n/**\\n* @dev String operations.\\n*/\\nlibrary Strings {\\n/**\\n* @dev Converts a `uint256` to its ASCII `string` representation.\\n*/\\nfunction toString(uint256 value) internal pure returns (string memory) {\\n// Inspired by OraclizeAPI\\u0027s implementation - MIT licence\\n// https://github.com/oraclize/ethereum-api/blob/b42146b063c7d6ee1358846c198246239e9360e8/oraclizeAPI_0.4.25.sol\\n\\nif (value == 0) {\\nreturn \\\"0\\\";\\n}\\nuint256 temp = value;\\nuint256 digits;\\nwhile (temp != 0) {\\ndigits++;\\ntemp /= 10;\\n}\\nbytes memory buffer = new bytes(digits);\\nuint256 index = digits - 1;\\ntemp = value;\\nwhile (temp != 0) {\\nbuffer[index--] = bytes1(uint8(48 + temp % 10));\\ntemp /= 10;\\n}\\nreturn string(buffer);\\n}\\n}\\n\\n// File: @openzeppelin/contracts/token/ERC721/ERC721.sol\\npragma solidity 0.8.0;\\n\\n/**\\n* @title ERC721 Non-Fungible Token Standard basic implementation\\n* @dev see https://eips.ethereum.org/EIPS/eip-721\\n*/\\ncontract ERC721 is Context, ERC165, IERC721, IERC721Metadata, IERC721Enumerable {\\nusing SafeMath for uint256;\\nusing Address for address;\\nusing EnumerableSet for EnumerableSet.UintSet;\\nusing EnumerableMap for EnumerableMap.UintToAddressMap;\\nusing Strings for uint256;\\n\\n// Equals to `bytes4(keccak256(\\\"onERC721Received(address,address,uint256,bytes)\\\"))`\\n// which can be also obtained as `IERC721Receiver(0).onERC721Received.selector`\\nbytes4 private constant _ERC721_RECEIVED = 0x150b7a02;\\n\\n// Mapping from holder address to their (enumerable) set of owned tokens\\nmapping (address =\\u003e EnumerableSet.UintSet) private _holderTokens;\\n\\n// Enumerable mapping from token ids to their owners\\nEnumerableMap.UintToAddressMap private _tokenOwners;\\n\\n// Mapping from token ID to approved address\\nmapping (uint256 =\\u003e address) private _tokenApprovals;\\n\\n// Mapping from owner to operator approvals\\nmapping (address =\\u003e mapping (address =\\u003e bool)) private _operatorApprovals;\\n\\n// Token name\\nstring private _name;\\n\\n// Token symbol\\nstring private _symbol;\\n\\n// Optional mapping for token URIs\\nmapping (uint256 =\\u003e string) private _tokenURIs;\\n\\n// Base URI\\nstring private _baseURI;\\n\\n/*\\n* bytes4(keccak256(\\u0027balanceOf(address)\\u0027)) == 0x70a08231\\n* bytes4(keccak256(\\u0027ownerOf(uint256)\\u0027)) == 0x6352211e\\n* bytes4(keccak256(\\u0027approve(address,uint256)\\u0027)) == 0x095ea7b3\\n* bytes4(keccak256(\\u0027getApproved(uint256)\\u0027)) == 0x081812fc\\n* bytes4(keccak256(\\u0027setApprovalForAll(address,bool)\\u0027)) == 0xa22cb465\\n* bytes4(keccak256(\\u0027isApprovedForAll(address,address)\\u0027)) == 0xe985e9c5\\n* bytes4(keccak256(\\u0027transferFrom(address,address,uint256)\\u0027)) == 0x23b872dd\\n* bytes4(keccak256(\\u0027safeTransferFrom(address,address,uint256)\\u0027)) == 0x42842e0e\\n* bytes4(keccak256(\\u0027safeTransferFrom(address,address,uint256,bytes)\\u0027)) == 0xb88d4fde\\n*\\n* =\\u003e 0x70a08231 ^ 0x6352211e ^ 0x095ea7b3 ^ 0x081812fc ^\\n* 0xa22cb465 ^ 0xe985e9c5 ^ 0x23b872dd ^ 0x42842e0e ^ 0xb88d4fde == 0x80ac58cd\\n*/\\nbytes4 private constant _INTERFACE_ID_ERC721 = 0x80ac58cd;\\n\\n/*\\n* bytes4(keccak256(\\u0027name()\\u0027)) == 0x06fdde03\\n* bytes4(keccak256(\\u0027symbol()\\u0027)) == 0x95d89b41\\n* bytes4(keccak256(\\u0027tokenURI(uint256)\\u0027)) == 0xc87b56dd\\n*\\n* =\\u003e 0x06fdde03 ^ 0x95d89b41 ^ 0xc87b56dd == 0x5b5e139f\\n*/\\nbytes4 private constant _INTERFACE_ID_ERC721_METADATA = 0x5b5e139f;\\n\\n/*\\n* bytes4(keccak256(\\u0027totalSupply()\\u0027)) == 0x18160ddd\\n* bytes4(keccak256(\\u0027tokenOfOwnerByIndex(address,uint256)\\u0027)) == 0x2f745c59\\n* bytes4(keccak256(\\u0027tokenByIndex(uint256)\\u0027)) == 0x4f6ccce7\\n*\\n* =\\u003e 0x18160ddd ^ 0x2f745c59 ^ 0x4f6ccce7 == 0x780e9d63\\n*/\\nbytes4 private constant _INTERFACE_ID_ERC721_ENUMERABLE = 0x780e9d63;\\n\\n/**\\n* @dev Initializes the contract by setting a `name` and a `symbol` to the token collection.\\n*/\\nconstructor (string memory name_, string memory symbol_) {\\n_name = name_;\\n_symbol = symbol_;\\n\\n// register the supported interfaces to conform to ERC721 via ERC165\\n_registerInterface(_INTERFACE_ID_ERC721);\\n_registerInterface(_INTERFACE_ID_ERC721_METADATA);\\n_registerInterface(_INTERFACE_ID_ERC721_ENUMERABLE);\\n}\\n\\n/**\\n* @dev See {IERC721-balanceOf}.\\n*/\\nfunction balanceOf(address owner) public view virtual override returns (uint256) {\\nrequire(owner != address(0), \\\"ERC721: balance query for the zero address\\\");\\nreturn _holderTokens[owner].length();\\n}\\n\\n/**\\n* @dev See {IERC721-ownerOf}.\\n*/\\nfunction ownerOf(uint256 tokenId) public view virtual override returns (address) {\\nreturn _tokenOwners.get(tokenId, \\\"ERC721: owner query for nonexistent token\\\");\\n}\\n\\n/**\\n* @dev See {IERC721Metadata-name}.\\n*/\\nfunction name() public view virtual override returns (string memory) {\\nreturn _name;\\n}\\n\\n/**\\n* @dev See {IERC721Metadata-symbol}.\\n*/\\nfunction symbol() public view virtual override returns (string memory) {\\nreturn _symbol;\\n}\\n\\n/**\\n* @dev See {IERC721Metadata-tokenURI}.\\n*/\\nfunction tokenURI(uint256 tokenId) public view virtual override returns (string memory) {\\nrequire(_exists(tokenId), \\\"ERC721Metadata: URI query for nonexistent token\\\");\\n\\nstring memory _tokenURI = _tokenURIs[tokenId];\\nstring memory base = baseURI();\\n\\n// If there is no base URI, return the token URI.\\nif (bytes(base).length == 0) {\\nreturn _tokenURI;\\n}\\n// If both are set, concatenate the baseURI and tokenURI (via abi.encodePacked).\\nif (bytes(_tokenURI).length \\u003e 0) {\\nreturn string(abi.encodePacked(base, _tokenURI));\\n}\\n// If there is a baseURI but no tokenURI, concatenate the tokenID to the baseURI.\\nreturn string(abi.encodePacked(base, tokenId.toString()));\\n}\\n\\n/**\\n* @dev Returns the base URI set via {_setBaseURI}. This will be\\n* automatically added as a prefix in {tokenURI} to each token\\u0027s URI, or\\n* to the token ID if no specific URI is set for that token ID.\\n*/\\nfunction baseURI() public view virtual returns (string memory) {\\nreturn _baseURI;\\n}\\n\\n/**\\n* @dev See {IERC721Enumerable-tokenOfOwnerByIndex}.\\n*/\\nfunction tokenOfOwnerByIndex(address owner, uint256 index) public view virtual override returns (uint256) {\\nreturn _holderTokens[owner].at(index);\\n}\\n\\n/**\\n* @dev See {IERC721Enumerable-totalSupply}.\\n*/\\nfunction totalSupply() public view virtual override returns (uint256) {\\n// _tokenOwners are indexed by tokenIds, so .length() returns the number of tokenIds\\nreturn _tokenOwners.length();\\n}\\n\\n/**\\n* @dev See {IERC721Enumerable-tokenByIndex}.\\n*/\\nfunction tokenByIndex(uint256 index) public view virtual override returns (uint256) {\\n(uint256 tokenId, ) = _tokenOwners.at(index);\\nreturn tokenId;\\n}\\n\\n/**\\n* @dev See {IERC721-approve}.\\n*/\\nfunction approve(address to, uint256 tokenId) public virtual override {\\naddress owner = ERC721.ownerOf(tokenId);\\nrequire(to != owner, \\\"ERC721: approval to current owner\\\");\\n\\nrequire(_msgSender() == owner || ERC721.isApprovedForAll(owner, _msgSender()),\\n\\\"ERC721: approve caller is not owner nor approved for all\\\"\\n);\\n\\n_approve(to, tokenId);\\n}\\n\\n/**\\n* @dev See {IERC721-getApproved}.\\n*/\\nfunction getApproved(uint256 tokenId) public view virtual override returns (address) {\\nrequire(_exists(tokenId), \\\"ERC721: approved query for nonexistent token\\\");\\n\\nreturn _tokenApprovals[tokenId];\\n}\\n\\n/**\\n* @dev See {IERC721-setApprovalForAll}.\\n*/\\nfunction setApprovalForAll(address operator, bool approved) public virtual override {\\nrequire(operator != _msgSender(), \\\"ERC721: approve to caller\\\");\\n\\n_operatorApprovals[_msgSender()][operator] = approved;\\nemit ApprovalForAll(_msgSender(), operator, approved);\\n}\\n\\n/**\\n* @dev See {IERC721-isApprovedForAll}.\\n*/\\nfunction isApprovedForAll(address owner, address operator) public view virtual override returns (bool) {\\nreturn _operatorApprovals[owner][operator];\\n}\\n\\n/**\\n* @dev See {IERC721-transferFrom}.\\n*/\\nfunction transferFrom(address from, address to, uint256 tokenId) public virtual override {\\n//solhint-disable-next-line max-line-length\\nrequire(_isApprovedOrOwner(_msgSender(), tokenId), \\\"ERC721: transfer caller is not owner nor approved\\\");\\n\\n_transfer(from, to, tokenId);\\n}\\n\\n/**\\n* @dev See {IERC721-safeTransferFrom}.\\n*/\\nfunction safeTransferFrom(address from, address to, uint256 tokenId) public virtual override {\\nsafeTransferFrom(from, to, tokenId, \\\"\\\");\\n}\\n\\n/**\\n* @dev See {IERC721-safeTransferFrom}.\\n*/\\nfunction safeTransferFrom(address from, address to, uint256 tokenId, bytes memory _data) public virtual override {\\nrequire(_isApprovedOrOwner(_msgSender(), tokenId), \\\"ERC721: transfer caller is not owner nor approved\\\");\\n_safeTransfer(from, to, tokenId, _data);\\n}\\n\\n/**\\n* @dev Safely transfers `tokenId` token from `from` to `to`, checking first that contract recipients\\n* are aware of the ERC721 protocol to prevent tokens from being forever locked.\\n*\\n* `_data` is additional data, it has no specified format and it is sent in call to `to`.\\n*\\n* This internal function is equivalent to {safeTransferFrom}, and can be used to e.g.\\n* implement alternative mechanisms to perform token transfer, such as signature-based.\\n*\\n* Requirements:\\n*\\n* - `from` cannot be the zero address.\\n* - `to` cannot be the zero address.\\n* - `tokenId` token must exist and be owned by `from`.\\n* - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer.\\n*\\n* Emits a {Transfer} event.\\n*/\\nfunction _safeTransfer(address from, address to, uint256 tokenId, bytes memory _data) internal virtual {\\n_transfer(from, to, tokenId);\\nrequire(_checkOnERC721Received(from, to, tokenId, _data), \\\"ERC721: transfer to non ERC721Receiver implementer\\\");\\n}\\n\\n/**\\n* @dev Returns whether `tokenId` exists.\\n*\\n* Tokens can be managed by their owner or approved accounts via {approve} or {setApprovalForAll}.\\n*\\n* Tokens start existing when they are minted (`_mint`),\\n* and stop existing when they are burned (`_burn`).\\n*/\\nfunction _exists(uint256 tokenId) internal view virtual returns (bool) {\\nreturn _tokenOwners.contains(tokenId);\\n}\\n\\n/**\\n* @dev Returns whether `spender` is allowed to manage `tokenId`.\\n*\\n* Requirements:\\n*\\n* - `tokenId` must exist.\\n*/\\nfunction _isApprovedOrOwner(address spender, uint256 tokenId) internal view virtual returns (bool) {\\nrequire(_exists(tokenId), \\\"ERC721: operator query for nonexistent token\\\");\\naddress owner = ERC721.ownerOf(tokenId);\\nreturn (spender == owner || getApproved(tokenId) == spender || ERC721.isApprovedForAll(owner, spender));\\n}\\n\\n/**\\n* @dev Safely mints `tokenId` and transfers it to `to`.\\n*\\n* Requirements:\\nd*\\n* - `tokenId` must not exist.\\n* - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer.\\n*\\n* Emits a {Transfer} event.\\n*/\\nfunction _safeMint(address to, uint256 tokenId) internal virtual {\\n_safeMint(to, tokenId, \\\"\\\");\\n}\\n\\n/**\\n* @dev Same as {xref-ERC721-_safeMint-address-uint256-}[`_safeMint`], with an additional `data` parameter which is\\n* forwarded in {IERC721Receiver-onERC721Received} to contract recipients.\\n*/\\nfunction _safeMint(address to, uint256 tokenId, bytes memory _data) internal virtual {\\n_mint(to, tokenId);\\nrequire(_checkOnERC721Received(address(0), to, tokenId, _data), \\\"ERC721: transfer to non ERC721Receiver implementer\\\");\\n}\\n\\n/**\\n* @dev Mints `tokenId` and transfers it to `to`.\\n*\\n* WARNING: Usage of this method is discouraged, use {_safeMint} whenever possible\\n*\\n* Requirements:\\n*\\n* - `tokenId` must not exist.\\n* - `to` cannot be the zero address.\\n*\\n* Emits a {Transfer} event.\\n*/\\nfunction _mint(address to, uint256 tokenId) internal virtual {\\nrequire(to != address(0), \\\"ERC721: mint to the zero address\\\");\\nrequire(!_exists(tokenId), \\\"ERC721: token already minted\\\");\\n\\n_beforeTokenTransfer(address(0), to, tokenId);\\n\\n_holderTokens[to].add(tokenId);\\n\\n_tokenOwners.set(tokenId, to);\\n\\nemit Transfer(address(0), to, tokenId);\\n}\\n\\n/**\\n* @dev Destroys `tokenId`.\\n* The approval is cleared when the token is burned.\\n*\\n* Requirements:\\n*\\n* - `tokenId` must exist.\\n*\\n* Emits a {Transfer} event.\\n*/\\nfunction _burn(uint256 tokenId) internal virtual {\\naddress owner = ERC721.ownerOf(tokenId); // internal owner\\n\\n_beforeTokenTransfer(owner, address(0), tokenId);\\n\\n// Clear approvals\\n_approve(address(0), tokenId);\\n\\n// Clear metadata (if any)\\nif (bytes(_tokenURIs[tokenId]).length != 0) {\\ndelete _tokenURIs[tokenId];\\n}\\n\\n_holderTokens[owner].remove(tokenId);\\n\\n_tokenOwners.remove(tokenId);\\n\\nemit Transfer(owner, address(0), tokenId);\\n}\\n\\n/**\\n* @dev Transfers `tokenId` from `from` to `to`.\\n* As opposed to {transferFrom}, this imposes no restrictions on msg.sender.\\n*\\n* Requirements:\\n*\\n* - `to` cannot be the zero address.\\n* - `tokenId` token must be owned by `from`.\\n*\\n* Emits a {Transfer} event.\\n*/\\nfunction _transfer(address from, address to, uint256 tokenId) internal virtual {\\nrequire(ERC721.ownerOf(tokenId) == from, \\\"ERC721: transfer of token that is not own\\\"); // internal owner\\nrequire(to != address(0), \\\"ERC721: transfer to the zero address\\\");\\n\\n_beforeTokenTransfer(from, to, tokenId);\\n\\n// Clear approvals from the previous owner\\n_approve(address(0), tokenId);\\n\\n_holderTokens[from].remove(tokenId);\\n_holderTokens[to].add(tokenId);\\n\\n_tokenOwners.set(tokenId, to);\\n\\nemit Transfer(from, to, tokenId);\\n}\\n\\n/**\\n* @dev Sets `_tokenURI` as the tokenURI of `tokenId`.\\n*\\n* Requirements:\\n*\\n* - `tokenId` must exist.\\n*/\\nfunction _setTokenURI(uint256 tokenId, string memory _tokenURI) internal virtual {\\nrequire(_exists(tokenId), \\\"ERC721Metadata: URI set of nonexistent token\\\");\\n_tokenURIs[tokenId] = _tokenURI;\\n}\\n\\n/**\\n* @dev Internal function to set the base URI for all token IDs. It is\\n* automatically added as a prefix to the value returned in {tokenURI},\\n* or to the token ID if {tokenURI} is empty.\\n*/\\nfunction _setBaseURI(string memory baseURI_) internal virtual {\\n_baseURI = baseURI_;\\n}\\n\\n/**\\n* @dev Internal function to invoke {IERC721Receiver-onERC721Received} on a target address.\\n* The call is not executed if the target address is not a contract.\\n*\\n* @param from address representing the previous owner of the given token ID\\n* @param to target address that will receive the tokens\\n* @param tokenId uint256 ID of the token to be transferred\\n* @param _data bytes optional data to send along with the call\\n* @return bool whether the call correctly returned the expected magic value\\n*/\\nfunction _checkOnERC721Received(address from, address to, uint256 tokenId, bytes memory _data)\\nprivate returns (bool)\\n{\\nif (!to.isContract()) {\\nreturn true;\\n}\\nbytes memory returndata = to.functionCall(abi.encodeWithSelector(\\nIERC721Receiver(to).onERC721Received.selector,\\n_msgSender(),\\nfrom,\\ntokenId,\\n_data\\n), \\\"ERC721: transfer to non ERC721Receiver implementer\\\");\\nbytes4 retval = abi.decode(returndata, (bytes4));\\nreturn (retval == _ERC721_RECEIVED);\\n}\\n\\n/**\\n* @dev Approve `to` to operate on `tokenId`\\n*\\n* Emits an {Approval} event.\\n*/\\nfunction _approve(address to, uint256 tokenId) internal virtual {\\n_tokenApprovals[tokenId] = to;\\nemit Approval(ERC721.ownerOf(tokenId), to, tokenId); // internal owner\\n}\\n\\n/**\\n* @dev Hook that is called before any token transfer. This includes minting\\n* and burning.\\n*\\n* Calling conditions:\\n*\\n* - When `from` and `to` are both non-zero, ``from``\\u0027s `tokenId` will be\\n* transferred to `to`.\\n* - When `from` is zero, `tokenId` will be minted for `to`.\\n* - When `to` is zero, ``from``\\u0027s `tokenId` will be burned.\\n* - `from` cannot be the zero address.\\n* - `to` cannot be the zero address.\\n*\\n* To learn more about hooks, head to xref:ROOT:extending-contracts.adoc#using-hooks[Using Hooks].\\n*/\\nfunction _beforeTokenTransfer(address from, address to, uint256 tokenId) internal virtual { }\\n}\\n\\n\\npragma solidity ^0.8.0;\\n/**\\n* @dev Contract module which provides a basic access control mechanism, where\\n* there is an account (an owner) that can be granted exclusive access to\\n* specific functions.\\n*\\n* By default, the owner account will be the one that deploys the contract. This\\n* can later be changed with {transferOwnership}.\\n*\\n* This module is used through inheritance. It will make available the modifier\\n* `onlyOwner`, which can be applied to your functions to restrict their use to\\n* the owner.\\n*/\\nabstract contract Ownable is Context {\\naddress private _owner;\\n\\nevent OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\\n\\n/**\\n* @dev Initializes the contract setting the deployer as the initial owner.\\n*/\\nconstructor() {\\n_transferOwnership(_msgSender());\\n}\\n\\n/**\\n* @dev Returns the address of the current owner.\\n*/\\nfunction owner() public view virtual returns (address) {\\nreturn _owner;\\n}\\n\\n/**\\n* @dev Throws if called by any account other than the owner.\\n*/\\nmodifier onlyOwner() {\\nrequire(owner() == _msgSender(), \\\"Ownable: caller is not the owner\\\");\\n_;\\n}\\n\\n/**\\n* @dev Leaves the contract without owner. It will not be possible to call\\n* `onlyOwner` functions anymore. Can only be called by the current owner.\\n*\\n* NOTE: Renouncing ownership will leave the contract without an owner,\\n* thereby removing any functionality that is only available to the owner.\\n*/\\nfunction renounceOwnership() public virtual onlyOwner {\\n_transferOwnership(address(0));\\n}\\n\\n/**\\n* @dev Transfers ownership of the contract to a new account (`newOwner`).\\n* Can only be called by the current owner.\\n*/\\nfunction transferOwnership(address newOwner) public virtual onlyOwner {\\nrequire(newOwner != address(0), \\\"Ownable: new owner is the zero address\\\");\\n_transferOwnership(newOwner);\\n}\\n\\n/**\\n* @dev Transfers ownership of the contract to a new account (`newOwner`).\\n* Internal function without access restriction.\\n*/\\nfunction _transferOwnership(address newOwner) internal virtual {\\naddress oldOwner = _owner;\\n_owner = newOwner;\\nemit OwnershipTransferred(oldOwner, newOwner);\\n}\\n}\\n\\n\\n\"},\"watchface.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity 0.8.0;\\npragma abicoder v2;\\n\\n// import ERC721 iterface\\nimport \\\"./ERC721.sol\\\";\\n\\n// Watchface smart contract inherits ERC721 interface\\ncontract WatchWises is ERC721, Ownable {\\n\\n  // this contract\\u0027s token collection name\\n  string public collectionName;\\n  // this contract\\u0027s token symbol\\n  string public collectionNameSymbol;\\n  // total number of watchwise minted\\n  uint256 public watchWiseCounter;\\n   // total number of watchwise commision account\\n  address  watchwiseAccount = 0x6FBE5F05DA8575d55c969d6D18922629A20cCeca;\\n  uint256 public ownerCommission;\\n  uint256 public nftAmount;\\n  // define WatchWise struct\\n   struct WatchWise {\\n    uint256 tokenId;\\n    string tokenName;\\n    string tokenURL;\\n    address payable _owner;\\n    address payable currentOwner;\\n    address payable previousOwner;\\n    uint256 price;\\n    uint256 numberOfTransfers;\\n  }\\n\\n  // map watchwise\\u0027s token id to WatchWise\\n  mapping(uint256 =\\u003e WatchWise) public allWatchWise;\\n  // check if token name exists\\n  mapping(string =\\u003e bool) public tokenNameExists;\\n  // check if color exists\\n  //mapping(string =\\u003e bool) public colorExists;\\n  // check if token URI exists\\n  mapping(string =\\u003e bool) public tokenURIExists;\\n\\n  // initialize contract while deployment with contract\\u0027s collection name and token\\n  constructor() ERC721(\\\"Watchwise\\\", \\\"WAT\\\") {\\n    collectionName = name();\\n    collectionNameSymbol = symbol();\\n  }\\n\\n  // mint a new watchwise\\n  function mintMyNFT(string memory _name,  string memory _tokenURL, uint256 noOfTokens,  uint256 _price, uint256 _tokenId) onlyOwner external  {\\n    // check if thic fucntion caller is not an zero address account\\n    require(msg.sender != address(0), \\\"Only owner able to mint the token \\\");\\n    //watchwiseAccount = address(0);\\n    // check if the token URI already exists or not\\n    require(!tokenURIExists[_tokenURL]);\\n    // check if the token name already exists or not\\n    require(!tokenNameExists[_name]);\\n    //increment counter\\n    for (uint i=0; i\\u003cnoOfTokens; i++) {\\n    watchWiseCounter ++;\\n    _tokenId ++;\\n    // check if a token exists with the above token id =\\u003e incremented counter\\n    require(!_exists(_tokenId));\\n   // mint the token\\n    _mint(msg.sender, _tokenId);\\n     // set token URI (bind token id with the passed in token URI)\\n    _setTokenURI(_tokenId, _tokenURL);\\n    // make passed token URI as exists\\n    tokenURIExists[_tokenURL] = true;\\n    // make token name passed as exists\\n    tokenNameExists[_name] = true;\\n    //creat a new watchwise (struct) and pass in new values\\n    WatchWise memory newWatchWise = WatchWise(\\n    _tokenId,\\n    _name,\\n    _tokenURL,\\n    payable(msg.sender),\\n    payable(msg.sender),\\n    payable (address(0)),\\n    _price,\\n    noOfTokens);\\n    // add the token id and it\\u0027s watchwise to all cwatchwise mapping\\n    allWatchWise[_tokenId] = newWatchWise;\\n    }\\n  }\\n\\n  // get owner of the token\\n  function getTokenOwner(uint256 _tokenId) public view returns(address) {\\n    address _tokenOwner = ownerOf(_tokenId);\\n    return _tokenOwner;\\n  }\\n\\n function changeTokenPrice(uint256 _tokenId, uint256 _newPrice) public {\\n    // require caller of the function is not an empty address\\n    require(msg.sender != address(0));\\n    // require that token should exist\\n    require(_exists(_tokenId));\\n    // get the token\\u0027s owner\\n    address tokenOwner = ownerOf(_tokenId);\\n    // check that token\\u0027s owner should be equal to the caller of the function\\n    require(tokenOwner == msg.sender);\\n    // get that token from all crypto boys mapping and create a memory of it defined as (struct =\\u003e CryptoBoy)\\n    WatchWise memory watchwise = allWatchWise[_tokenId];\\n    // update token\\u0027s price with new price\\n    watchwise.price = _newPrice;\\n    // set and update that token in the mapping\\n    allWatchWise[_tokenId] = watchwise;\\n  }\\n\\n  // get metadata of the token\\n  function getTokenMetaData(uint _tokenId) onlyOwner public view returns(string memory) {\\n    string memory tokenMetaData = tokenURI(_tokenId);\\n    return tokenMetaData;\\n  }\\n\\n  // get total number of tokens minted so far\\n  function getNumberOfTokensMinted()  onlyOwner public view returns(uint256) {\\n    uint256 totalNumberOfTokensMinted = totalSupply();\\n    return totalNumberOfTokensMinted;\\n  }\\n\\n  // get total number of tokens owned by an address\\n  function getTotalNumberOfTokensOwnedByAnAddress(address _owner) onlyOwner public view returns(uint256) {\\n    uint256 totalNumberOfTokensOwned = balanceOf(_owner);\\n    return totalNumberOfTokensOwned;\\n  }\\n\\n  // check if the token already exists\\n  function getTokenExists(uint256 _tokenId) onlyOwner public view returns(bool) {\\n    bool tokenExists = _exists(_tokenId);\\n    return tokenExists;\\n  }\\n\\n // check the token currnet Price\\n  function getTokenPrice(uint256 _tokenId) onlyOwner public view returns(uint256) {\\n    WatchWise memory watchwise = allWatchWise[_tokenId];\\n    return watchwise.price;\\n  }\\n  function buyToken(uint256 _tokenId) public payable {\\n    // check if the function caller is not an zero account address\\n    require(msg.sender != address(0));\\n    // check if the token id of the token being bought exists or not\\n    require(_exists(_tokenId));\\n    // get the token\\u0027s owner\\n    address tokenOwner = ownerOf(_tokenId);\\n    // token\\u0027s owner should not be an zero address account\\n    require(tokenOwner != address(0));\\n    // the one who wants to buy the token should not be the token\\u0027s owner\\n    require(tokenOwner != msg.sender);\\n    // get that token from all watchwise mapping and create a memory of it defined as (struct =\\u003e WatchWise)\\n    WatchWise memory watchwise = allWatchWise[_tokenId];\\n    // price sent in to buy should be equal to or more than the token\\u0027s price\\n    require(msg.value \\u003e= 0.01 ether);\\n    // transfer the token from owner to the caller of the function (buyer)\\n    _transfer(tokenOwner, msg.sender, _tokenId);\\n    // get owner of the token\\n    address payable sendTo = watchwise.currentOwner;\\n    // send token\\u0027s worth of ethers to the owner\\n    sendTo.transfer(msg.value);\\n    // update the token\\u0027s previous owner\\n    watchwise.previousOwner = watchwise.currentOwner;\\n    // update the token\\u0027s current owner\\n    watchwise.currentOwner = payable(msg.sender);\\n    // update the how many times this token was transfered\\n    watchwise.numberOfTransfers += 1;\\n    // set and update that token in the mapping\\n    allWatchWise[_tokenId] = watchwise;\\n  }\\n  // by a token by passing in the token\\u0027s id\\n  function airdropToken(uint256 _tokenId, address _to) onlyOwner public payable {\\n    // check if the token id of the token being bought exists or not\\n    require(_exists(_tokenId));\\n    // get the token\\u0027s owner\\n    address tokenOwner = ownerOf(_tokenId);\\n    // get that token from all watchwise mapping and create a memory of it defined as (struct =\\u003e WatchWise)\\n    WatchWise memory watchwise = allWatchWise[_tokenId];\\n    // transfer the token from owner to the caller of the function (buyer)\\n    _transfer(tokenOwner, _to, _tokenId);\\n    // update the token\\u0027s previous owner\\n    watchwise.previousOwner = watchwise.currentOwner;\\n    // update the token\\u0027s current owner\\n    watchwise.currentOwner = payable(_to);\\n    // update the how many times this token was transfered\\n    watchwise.numberOfTransfers += 1;\\n    // set and update that token in the mapping\\n    allWatchWise[_tokenId] = watchwise;\\n  }\\n  function buyTokenMarketPlace(uint256 _tokenId) public payable {\\n    // check if the function caller is not an zero account address\\n    require(msg.sender != address(0));\\n    // check if the token id of the token being bought exists or not\\n    require(_exists(_tokenId));\\n    // get the token\\u0027s owner\\n    address tokenOwner = ownerOf(_tokenId);\\n    // token\\u0027s owner should not be an zero address account\\n    require(tokenOwner != address(0));\\n    // the one who wants to buy the token should not be the token\\u0027s owner\\n    require(tokenOwner != msg.sender);\\n    // get that token from all watchwise mapping and create a memory of it defined as (struct =\\u003e WatchWise)\\n    WatchWise memory watchwise = allWatchWise[_tokenId];\\n    // price sent in to buy should be equal to or more than the token\\u0027s price\\n    require(msg.value \\u003e= 0.01 ether);\\n    // transfer the token from owner to the caller of the function (buyer)\\n    _transfer(tokenOwner, msg.sender, _tokenId);\\n    // get owner of the token\\n    address payable sendTo = watchwise.currentOwner;\\n    // send token\\u0027s worth of ethers to the owner\\n    nftAmount = msg.value;\\n    ownerCommission= nftAmount - (nftAmount * 95 / 100);\\n    sendTo.transfer(nftAmount * 95 / 100);\\n    payable(address(watchwiseAccount)).transfer(ownerCommission);\\n    // update the token\\u0027s previous owner\\n    watchwise.previousOwner = watchwise.currentOwner;\\n    // update the token\\u0027s current owner\\n    watchwise.currentOwner = payable(msg.sender);\\n    // update the how many times this token was transfered\\n    watchwise.price = msg.value;\\n    watchwise.numberOfTransfers += 1;\\n    // set and update that token in the mapping\\n    allWatchWise[_tokenId] = watchwise;\\n  }\\n}\"}}","ABI":"[{\"inputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"approved\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"Approval\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"operator\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"bool\",\"name\":\"approved\",\"type\":\"bool\"}],\"name\":\"ApprovalForAll\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"Transfer\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_tokenId\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"_to\",\"type\":\"address\"}],\"name\":\"airdropToken\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"allWatchWise\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"},{\"internalType\":\"string\",\"name\":\"tokenName\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"tokenURL\",\"type\":\"string\"},{\"internalType\":\"address payable\",\"name\":\"_owner\",\"type\":\"address\"},{\"internalType\":\"address payable\",\"name\":\"currentOwner\",\"type\":\"address\"},{\"internalType\":\"address payable\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"price\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"numberOfTransfers\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"approve\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"baseURI\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_tokenId\",\"type\":\"uint256\"}],\"name\":\"buyToken\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_tokenId\",\"type\":\"uint256\"}],\"name\":\"buyTokenMarketPlace\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_tokenId\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_newPrice\",\"type\":\"uint256\"}],\"name\":\"changeTokenPrice\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"collectionName\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"collectionNameSymbol\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"getApproved\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getNumberOfTokensMinted\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_tokenId\",\"type\":\"uint256\"}],\"name\":\"getTokenExists\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_tokenId\",\"type\":\"uint256\"}],\"name\":\"getTokenMetaData\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_tokenId\",\"type\":\"uint256\"}],\"name\":\"getTokenOwner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_tokenId\",\"type\":\"uint256\"}],\"name\":\"getTokenPrice\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_owner\",\"type\":\"address\"}],\"name\":\"getTotalNumberOfTokensOwnedByAnAddress\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"operator\",\"type\":\"address\"}],\"name\":\"isApprovedForAll\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"string\",\"name\":\"_name\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"_tokenURL\",\"type\":\"string\"},{\"internalType\":\"uint256\",\"name\":\"noOfTokens\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_price\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_tokenId\",\"type\":\"uint256\"}],\"name\":\"mintMyNFT\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"name\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"nftAmount\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"ownerCommission\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"ownerOf\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"safeTransferFrom\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"},{\"internalType\":\"bytes\",\"name\":\"_data\",\"type\":\"bytes\"}],\"name\":\"safeTransferFrom\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"operator\",\"type\":\"address\"},{\"internalType\":\"bool\",\"name\":\"approved\",\"type\":\"bool\"}],\"name\":\"setApprovalForAll\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes4\",\"name\":\"interfaceId\",\"type\":\"bytes4\"}],\"name\":\"supportsInterface\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"symbol\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"index\",\"type\":\"uint256\"}],\"name\":\"tokenByIndex\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"name\":\"tokenNameExists\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"index\",\"type\":\"uint256\"}],\"name\":\"tokenOfOwnerByIndex\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"tokenURI\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"name\":\"tokenURIExists\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalSupply\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"transferFrom\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"watchWiseCounter\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"}]","ContractName":"WatchWises","CompilerVersion":"v0.8.0+commit.c7dfd78e","OptimizationUsed":"1","Runs":"200","ConstructorArguments":"","EVMVersion":"Default","Library":"","LicenseType":"None","Proxy":"0","Implementation":"","SwarmSource":"ipfs://3dfe8a7e529f00b274d62e0ac2e26b7900f9f31e8798a04c25809afb74d9ac90"}]}