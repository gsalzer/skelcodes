{"status":"1","message":"OK","result":[{"SourceCode":"{{\r\n  \"language\": \"Solidity\",\r\n  \"sources\": {\r\n    \"contracts/MochiEngine.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: AGPL-3.0\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"./vault/MochiVaultFactory.sol\\\";\\nimport \\\"./assets/usdm.sol\\\";\\nimport \\\"./interfaces/IMochiEngine.sol\\\";\\n\\ncontract MochiEngine is IMochiEngine {\\n    // immutable values\\n    IMochiVaultFactory public immutable override vaultFactory;\\n    // mutable values\\n    IMochi public override mochi;\\n    IVMochi public override vMochi;\\n    address public override governance;\\n    address public override treasury;\\n    address public override operationWallet;\\n    IUSDM public override usdm;\\n    IMinter public override minter;\\n    ICSSRRouter public override cssr;\\n    IMochiProfile public override mochiProfile;\\n    IDiscountProfile public override discountProfile;\\n    ILiquidator public override liquidator;\\n    IFeePool public override feePool;\\n    IReferralFeePool public override referralFeePool;\\n    IMochiNFT public override nft;\\n\\n    constructor(address _governance) {\\n        governance = _governance;\\n        vaultFactory = IMochiVaultFactory(new MochiVaultFactory(address(this)));\\n        operationWallet = msg.sender;\\n    }\\n\\n    modifier onlyGov() {\\n        require(msg.sender == governance, \\\"!gov\\\");\\n        _;\\n    }\\n\\n    function changeMochi(address _mochi) external onlyGov {\\n        mochi = IMochi(_mochi);\\n    }\\n\\n    function changeVMochi(address _vmochi) external onlyGov {\\n        vMochi = IVMochi(_vmochi);\\n    }\\n\\n    function changeUSDM(address _usdm) external onlyGov {\\n        usdm = IUSDM(_usdm);\\n    }\\n\\n    function changeMinter(address _minter) external onlyGov {\\n        minter = IMinter(_minter);\\n    }\\n\\n    function changeGovernance(address _governance) external onlyGov {\\n        governance = _governance;\\n    }\\n\\n    function changeTreasury(address _treasury) external onlyGov {\\n        treasury = _treasury;\\n    }\\n\\n    function changeOperationWallet(address _operation) external onlyGov {\\n        operationWallet = _operation;\\n    }\\n\\n    function changeCSSR(address _cssr) external onlyGov {\\n        cssr = ICSSRRouter(_cssr);\\n    }\\n\\n    function changeProfile(address _profile) external onlyGov {\\n        mochiProfile = IMochiProfile(_profile);\\n    }\\n\\n    function changeDiscountProfile(address _profile) external onlyGov {\\n        discountProfile = IDiscountProfile(_profile);\\n    }\\n\\n    function changeLiquidator(address _liquidator) external onlyGov {\\n        liquidator = ILiquidator(_liquidator);\\n    }\\n\\n    function changeFeePool(address _feePool) external onlyGov {\\n        feePool = IFeePool(_feePool);\\n    }\\n\\n    function changeReferralFeePool(address _referralFeePool) external onlyGov {\\n        referralFeePool = IReferralFeePool(_referralFeePool);\\n    }\\n\\n    function changeNFT(address _nft) external onlyGov {\\n        nft = IMochiNFT(_nft);\\n    }\\n}\\n\"\r\n    },\r\n    \"contracts/vault/MochiVaultFactory.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: AGPL-3.0\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"@mochifi/library/contracts/Beacon.sol\\\";\\nimport \\\"@mochifi/library/contracts/BeaconProxyDeployer.sol\\\";\\nimport \\\"../interfaces/IMochiEngine.sol\\\";\\nimport \\\"../interfaces/IMochiVaultFactory.sol\\\";\\n\\ncontract MochiVaultFactory is IMochiVaultFactory {\\n    IMochiEngine public immutable engine;\\n    Beacon public immutable beacon;\\n    address public template;\\n\\n    constructor(address _engine) {\\n        beacon = new Beacon(address(0));\\n        engine = IMochiEngine(_engine);\\n    }\\n\\n    function updateTemplate(address _newTemplate) external override {\\n        require(msg.sender == engine.governance(), \\\"!gov\\\");\\n        address(beacon).call(abi.encode(_newTemplate));\\n        template = _newTemplate;\\n    }\\n\\n    function deployVault(address _asset)\\n        external\\n        override\\n        returns (IMochiVault)\\n    {\\n        bytes memory initCode = abi.encodeWithSelector(\\n            bytes4(keccak256(\\\"initialize(address)\\\")),\\n            _asset\\n        );\\n        return\\n            IMochiVault(BeaconProxyDeployer.deploy(address(beacon), initCode));\\n    }\\n\\n    function getVault(address _asset)\\n        external\\n        view\\n        override\\n        returns (IMochiVault)\\n    {\\n        bytes memory initCode = abi.encodeWithSelector(\\n            bytes4(keccak256(\\\"initialize(address)\\\")),\\n            _asset\\n        );\\n        return\\n            IMochiVault(\\n                BeaconProxyDeployer.calculateAddress(\\n                    address(this),\\n                    address(beacon),\\n                    initCode\\n                )\\n            );\\n    }\\n}\\n\"\r\n    },\r\n    \"contracts/assets/usdm.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: AGPL-3.0\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"@openzeppelin/contracts/token/ERC20/ERC20.sol\\\";\\nimport \\\"../interfaces/IMochiEngine.sol\\\";\\nimport \\\"../interfaces/IERC3156FlashLender.sol\\\";\\n\\ncontract USDM is ERC20, IUSDM {\\n    IMochiEngine public immutable engine;\\n\\n    uint256 private constant SCALE = 1e18;\\n\\n    bytes32 public constant CALLBACK_SUCCESS =\\n        keccak256(\\\"ERC3156FlashBorrower.onFlashLoan\\\");\\n\\n    constructor(address _engine) ERC20(\\\"USDM\\\", \\\"USDM\\\") {\\n        engine = IMochiEngine(_engine);\\n    }\\n\\n    modifier onlyMinter() {\\n        require(msg.sender == address(engine.minter()), \\\"!minter\\\");\\n        _;\\n    }\\n\\n    function mint(address _recipient, uint256 _amount)\\n        external\\n        override\\n        onlyMinter\\n    {\\n        _mint(_recipient, _amount);\\n    }\\n\\n    function burn(uint256 _amount) external override {\\n        _burn(msg.sender, _amount);\\n    }\\n\\n    function maxFlashLoan(address _token)\\n        external\\n        view\\n        override\\n        returns (uint256)\\n    {\\n        require(_token == address(this), \\\"!this\\\");\\n        return type(uint256).max - totalSupply();\\n    }\\n\\n    function flashFee(address _token, uint256 _amount)\\n        public\\n        view\\n        override\\n        returns (uint256)\\n    {\\n        //should return 0.1337% * _amount;\\n        require(_token == address(this), \\\"!supported\\\");\\n        return (_amount * ((1337 * SCALE) / 1000000)) / SCALE;\\n    }\\n\\n    function flashLoan(\\n        IERC3156FlashBorrower _receiver,\\n        address _token,\\n        uint256 _amount,\\n        bytes calldata _data\\n    ) external override returns (bool) {\\n        require(_token == address(this), \\\"!supported\\\");\\n        uint256 fee = flashFee(_token, _amount);\\n        _mint(address(_receiver), _amount);\\n        require(\\n            _receiver.onFlashLoan(msg.sender, _token, _amount, fee, _data) ==\\n                CALLBACK_SUCCESS,\\n            \\\"!callback\\\"\\n        );\\n        _burn(address(_receiver), _amount);\\n        _transfer(address(_receiver), engine.treasury(), fee);\\n        return true;\\n    }\\n}\\n\"\r\n    },\r\n    \"contracts/interfaces/IMochiEngine.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: AGPL-3.0\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"@mochifi/vmochi/contracts/interfaces/IVMochi.sol\\\";\\nimport \\\"@mochifi/cssr/contracts/interfaces/ICSSRRouter.sol\\\";\\nimport \\\"./IMochiProfile.sol\\\";\\nimport \\\"./IDiscountProfile.sol\\\";\\nimport \\\"./IMochiVault.sol\\\";\\nimport \\\"./IFeePool.sol\\\";\\nimport \\\"./IReferralFeePool.sol\\\";\\nimport \\\"./ILiquidator.sol\\\";\\nimport \\\"./IUSDM.sol\\\";\\nimport \\\"./IMochi.sol\\\";\\nimport \\\"./IMinter.sol\\\";\\nimport \\\"./IMochiNFT.sol\\\";\\nimport \\\"./IMochiVaultFactory.sol\\\";\\n\\ninterface IMochiEngine {\\n    function mochi() external view returns (IMochi);\\n\\n    function vMochi() external view returns (IVMochi);\\n\\n    function usdm() external view returns (IUSDM);\\n\\n    function cssr() external view returns (ICSSRRouter);\\n\\n    function governance() external view returns (address);\\n\\n    function treasury() external view returns (address);\\n\\n    function operationWallet() external view returns (address);\\n\\n    function mochiProfile() external view returns (IMochiProfile);\\n\\n    function discountProfile() external view returns (IDiscountProfile);\\n\\n    function feePool() external view returns (IFeePool);\\n\\n    function referralFeePool() external view returns (IReferralFeePool);\\n\\n    function liquidator() external view returns (ILiquidator);\\n\\n    function minter() external view returns (IMinter);\\n\\n    function nft() external view returns (IMochiNFT);\\n\\n    function vaultFactory() external view returns (IMochiVaultFactory);\\n}\\n\"\r\n    },\r\n    \"@mochifi/library/contracts/Beacon.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: AGPL-3.0\\n\\npragma solidity ^0.8.0;\\n\\ncontract Beacon {\\n    address internal _implementation;\\n    address internal immutable _CONTROLLER;\\n    \\n    constructor(address impl) {\\n        _implementation = impl;\\n        _CONTROLLER = msg.sender;\\n    }\\n    \\n    fallback() external {\\n        if (msg.sender != _CONTROLLER) {\\n            // solhint-disable-next-line no-inline-assembly\\n          assembly {\\n            mstore(0, sload(0))\\n            return(0, 32)\\n          }\\n        } else {\\n            // solhint-disable-next-line no-inline-assembly\\n          assembly { sstore(0, calldataload(0)) }\\n        }\\n    }\\n}\\n\"\r\n    },\r\n    \"@mochifi/library/contracts/BeaconProxyDeployer.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: AGPL-3.0\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"./Create2BeaconMaker.sol\\\";\\nlibrary BeaconProxyDeployer {\\n    function deploy(address beacon, bytes memory initializationCalldata)\\n        internal\\n        returns (address result)\\n    {\\n        bytes memory createCode =\\n            abi.encodePacked(\\n                type(Create2BeaconMaker).creationCode,\\n                abi.encode(address(beacon), initializationCalldata)\\n            );\\n        bytes32 salt = bytes32(0);\\n\\n        // solhint-disable-next-line no-inline-assembly\\n        assembly {\\n            let encoded_data := add(0x20, createCode) // load initialization code.\\n            let encoded_size := mload(createCode) // load the init code's length.\\n            result := create2(\\n                // call `CREATE2` w/ 4 arguments.\\n                0, // forward any supplied endowment.\\n                encoded_data, // pass in initialization code.\\n                encoded_size, // pass in init code's length.\\n                salt // pass in the salt value.\\n            )\\n\\n            // pass along failure message from failed contract deployment and revert.\\n            if iszero(result) {\\n                returndatacopy(0, 0, returndatasize())\\n                revert(0, returndatasize())\\n            }\\n        }\\n    }\\n\\n    function calculateAddress(\\n        address deployer,\\n        address beacon,\\n        bytes memory initializationCalldata\\n    ) internal view returns (address addr) {\\n        bytes memory createCode =\\n            abi.encodePacked(\\n                type(Create2BeaconMaker).creationCode,\\n                abi.encode(address(beacon), initializationCalldata)\\n            );\\n\\n        bytes32 salt = bytes32(0);\\n        // get the keccak256 hash of the init code for address derivation.\\n        bytes32 initCodeHash = keccak256(createCode);\\n        addr = address( // derive the target deployment address.\\n            uint160( // downcast to match the address type.\\n                uint256( // cast to uint to truncate upper digits.\\n                    keccak256( // compute CREATE2 hash using 4 inputs.\\n                        abi.encodePacked( // pack all inputs to the hash together.\\n                            bytes1(0xff), // pass in the control character.\\n                            deployer, // pass in the address of this contract.\\n                            salt, // pass in the salt from above.\\n                            initCodeHash // pass in hash of contract creation code.\\n                        )\\n                    )\\n                )\\n            )\\n        );\\n    }\\n}\\n\"\r\n    },\r\n    \"contracts/interfaces/IMochiVaultFactory.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: AGPL-3.0\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"./IMochiVault.sol\\\";\\n\\ninterface IMochiVaultFactory {\\n    function updateTemplate(address _template) external;\\n\\n    function deployVault(address _asset) external returns (IMochiVault);\\n\\n    function getVault(address _asset) external view returns (IMochiVault);\\n}\\n\"\r\n    },\r\n    \"@mochifi/library/contracts/Create2BeaconMaker.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: AGPL-3.0\\n\\npragma solidity ^0.8.0;\\n\\ncontract Create2BeaconMaker {\\n    constructor(address beacon, bytes memory initializationCalldata)\\n        payable\\n    {\\n        (, bytes memory returnData) = beacon.staticcall(\\\"\\\");\\n        address template = abi.decode(returnData, (address));\\n        // solhint-disable-next-line avoid-low-level-calls\\n        (bool success, ) = template.delegatecall(initializationCalldata);\\n        if (!success) {\\n            // pass along failure message from delegatecall and revert.\\n            // solhint-disable-next-line no-inline-assembly\\n            assembly {\\n                returndatacopy(0, 0, returndatasize())\\n                revert(0, returndatasize())\\n            }\\n        }\\n\\n        // place eip-1167 runtime code in memory.\\n        bytes memory runtimeCode =\\n            abi.encodePacked(\\n                bytes6(0x3d3d3d3d3d73),\\n                beacon,\\n                bytes32(0x5afa3d82803e368260203750808036602082515af43d82803e903d91603a57fd),\\n                bytes2(0x5bf3)\\n            );\\n\\n        // return Beacon Minimal Proxy code to write it to spawned contract runtime.\\n        // solhint-disable-next-line no-inline-assembly\\n        assembly {\\n            return(add(0x20, runtimeCode), 60) // Beacon Minimal Proxy runtime code, length\\n        }\\n    }\\n}\\n\"\r\n    },\r\n    \"@mochifi/vmochi/contracts/interfaces/IVMochi.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: AGPL-3.0\\n\\npragma solidity ^0.8.0;\\n\\ninterface IVMochi {\\n    function locked(address _user) external view returns(int128, uint256);\\n    function depositFor(address _user, uint256 _amount) external;\\n    function balanceOf(address _user) external view returns(uint256);\\n}\\n\"\r\n    },\r\n    \"@mochifi/cssr/contracts/interfaces/ICSSRRouter.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"@mochifi/library/contracts/Float.sol\\\";\\n\\ninterface ICSSRRouter {\\n    function update(address _asset, bytes memory _data)\\n        external\\n        returns (float memory);\\n\\n    function getPrice(address _asset) external view returns (float memory);\\n\\n    function getLiquidity(address _asset) external view returns (uint256);\\n}\\n\"\r\n    },\r\n    \"contracts/interfaces/IMochiProfile.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: AGPL-3.0\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"@mochifi/library/contracts/Float.sol\\\";\\n\\nenum AssetClass {\\n    Invalid,\\n    Stable,\\n    Alpha,\\n    Gamma,\\n    Delta,\\n    Zeta,\\n    Sigma,\\n    Revoked\\n}\\n\\ninterface IMochiProfile {\\n    function assetClass(address _asset) external view returns (AssetClass);\\n\\n    function liquidityRequirement() external view returns (uint256);\\n\\n    function minimumDebt() external view returns (uint256);\\n\\n    function changeAssetClass(\\n        address[] calldata _asset,\\n        AssetClass[] calldata _class\\n    ) external;\\n\\n    function changeLiquidityRequirement(uint256 _requirement) external;\\n\\n    function changeMinimumDebt(uint256 _debt) external;\\n\\n    function calculateFeeIndex(\\n        address _asset,\\n        uint256 _currentIndex,\\n        uint256 _lastAccrued\\n    ) external view returns (uint256);\\n\\n    function creditCap(address _asset) external view returns (uint256);\\n\\n    function delay() external view returns (uint256);\\n\\n    function liquidationFactor(address _asset)\\n        external\\n        view\\n        returns (float memory);\\n\\n    function maxCollateralFactor(address _asset)\\n        external\\n        view\\n        returns (float memory);\\n\\n    function stabilityFee(address _asset) external view returns (float memory);\\n\\n    function liquidationFee(address _asset)\\n        external\\n        view\\n        returns (float memory);\\n\\n    function keeperFee(address _asset) external view returns (float memory);\\n\\n    function utilizationRatio(address _asset)\\n        external\\n        view\\n        returns (float memory);\\n}\\n\"\r\n    },\r\n    \"contracts/interfaces/IDiscountProfile.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: AGPL-3.0\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"@mochifi/library/contracts/Float.sol\\\";\\n\\ninterface IDiscountProfile {\\n    function discount(address _user) external view returns (float memory);\\n}\\n\"\r\n    },\r\n    \"contracts/interfaces/IMochiVault.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: AGPL-3.0\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"@openzeppelin/contracts/token/ERC20/IERC20.sol\\\";\\nstruct Detail {\\n    Status status;\\n    uint256 collateral;\\n    uint256 debt;\\n    uint256 debtIndex;\\n    address referrer;\\n}\\n\\nenum Status {\\n    Invalid, // not minted\\n    Idle, // debt = 0, collateral = 0\\n    Collaterized, // debt = 0, collateral > 0\\n    Active, // debt > 0, collateral > 0\\n    Liquidated\\n}\\n\\ninterface IMochiVault {\\n    function liveDebtIndex() external view returns (uint256);\\n\\n    function details(uint256 _nftId)\\n        external\\n        view\\n        returns (\\n            Status,\\n            uint256 collateral,\\n            uint256 debt,\\n            uint256 debtIndexe,\\n            address refferer\\n        );\\n\\n    function status(uint256 _nftId) external view returns (Status);\\n\\n    function asset() external view returns (IERC20);\\n\\n    function deposits() external view returns (uint256);\\n\\n    function debts() external view returns (uint256);\\n\\n    function claimable() external view returns (int256);\\n\\n    function currentDebt(uint256 _nftId) external view returns (uint256);\\n\\n    function initialize(address _asset) external;\\n\\n    function deposit(uint256 _nftId, uint256 _amount) external;\\n\\n    function withdraw(\\n        uint256 _nftId,\\n        uint256 _amount,\\n        bytes memory _data\\n    ) external;\\n\\n    function borrow(\\n        uint256 _nftId,\\n        uint256 _amount,\\n        bytes memory _data\\n    ) external;\\n\\n    function repay(uint256 _nftId, uint256 _amount) external;\\n\\n    function liquidate(\\n        uint256 _nftId,\\n        uint256 _collateral,\\n        uint256 _usdm\\n    ) external;\\n}\\n\"\r\n    },\r\n    \"contracts/interfaces/IFeePool.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: AGPL-3.0\\n\\npragma solidity ^0.8.0;\\n\\ninterface IFeePool {\\n    function updateReserve() external;\\n}\\n\"\r\n    },\r\n    \"contracts/interfaces/IReferralFeePool.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: AGPL-3.0\\n\\npragma solidity ^0.8.0;\\n\\ninterface IReferralFeePool {\\n    function addReward(address _recipient) external;\\n}\\n\"\r\n    },\r\n    \"contracts/interfaces/ILiquidator.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: AGPL-3.0\\n\\npragma solidity ^0.8.0;\\n\\ninterface ILiquidator {\\n    event Triggered(uint256 _auctionId, uint256 _price);\\n    event Settled(uint256 _auctionId, uint256 _price);\\n\\n    function triggerLiquidation(address _asset, uint256 _nftId) external;\\n}\\n\"\r\n    },\r\n    \"contracts/interfaces/IUSDM.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: AGPL-3.0\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"@openzeppelin/contracts/token/ERC20/IERC20.sol\\\";\\nimport \\\"./IERC3156FlashLender.sol\\\";\\n\\ninterface IUSDM is IERC20, IERC3156FlashLender {\\n    function mint(address _recipient, uint256 _amount) external;\\n\\n    function burn(uint256 _amount) external;\\n}\\n\"\r\n    },\r\n    \"contracts/interfaces/IMochi.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: AGPL-3.0\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"@openzeppelin/contracts/token/ERC20/IERC20.sol\\\";\\n\\ninterface IMochi is IERC20 {}\\n\"\r\n    },\r\n    \"contracts/interfaces/IMinter.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: AGPL-3.0\\n\\npragma solidity ^0.8.0;\\n\\ninterface IMinter {\\n    function mint(address _to, uint256 _amount) external;\\n\\n    function hasPermission(address _user) external view returns (bool);\\n}\\n\"\r\n    },\r\n    \"contracts/interfaces/IMochiNFT.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: AGPL-3.0\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"@openzeppelin/contracts/token/ERC721/extensions/IERC721Enumerable.sol\\\";\\n\\ninterface IMochiNFT is IERC721Enumerable {\\n    struct MochiInfo {\\n        address asset;\\n    }\\n\\n    function asset(uint256 _id) external view returns (address);\\n\\n    function mint(address _asset, address _owner) external returns (uint256);\\n}\\n\"\r\n    },\r\n    \"@mochifi/library/contracts/Float.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: AGPL-3.0\\n\\npragma solidity ^0.8.0;\\n\\nstruct float {\\n    uint256 numerator;\\n    uint256 denominator;\\n}\\n\\nlibrary Float {\\n    function multiply(uint256 a, float memory f) internal pure returns(uint256) {\\n        require(f.denominator != 0, \\\"div 0\\\");\\n        return a * f.numerator / f.denominator;\\n    }\\n\\n    function inverse(float memory f) internal pure returns(float memory) {\\n        require(f.numerator != 0 && f.denominator != 0, \\\"div 0\\\");\\n        return float({\\n            numerator: f.denominator,\\n            denominator: f.numerator\\n        });\\n    }\\n\\n    function divide(uint256 a, float memory f) internal pure returns(uint256) {\\n        require(f.denominator != 0, \\\"div 0\\\");\\n        return a * f.denominator / f.numerator;\\n    }\\n\\n    function add(float memory a, float memory b) internal pure returns(float memory res) {\\n        require(a.denominator != 0 && b.denominator != 0, \\\"div 0\\\");\\n        res = float({\\n            numerator : a.numerator*b.denominator + a.denominator*b.numerator,\\n            denominator : a.denominator*b.denominator\\n        });\\n        if(res.numerator > 2**128 && res.denominator > 2**128){\\n            res.numerator = res.numerator / 2**64;\\n            res.denominator = res.denominator / 2**64;\\n        }\\n    }\\n    \\n    function sub(float memory a, float memory b) internal pure returns(float memory res) {\\n        require(a.denominator != 0 && b.denominator != 0, \\\"div 0\\\");\\n        res = float({\\n            numerator : a.numerator*b.denominator - b.numerator*a.denominator,\\n            denominator : a.denominator*b.denominator\\n        });\\n        if(res.numerator > 2**128 && res.denominator > 2**128){\\n            res.numerator = res.numerator / 2**64;\\n            res.denominator = res.denominator / 2**64;\\n        }\\n    }\\n\\n    function mul(float memory a, float memory b) internal pure returns(float memory res) {\\n        require(a.denominator != 0 && b.denominator != 0, \\\"div 0\\\");\\n        res = float({\\n            numerator : a.numerator * b.numerator,\\n            denominator : a.denominator * b.denominator\\n        });\\n        if(res.numerator > 2**128 && res.denominator > 2**128){\\n            res.numerator = res.numerator / 2**64;\\n            res.denominator = res.denominator / 2**64;\\n        }\\n    }\\n\\n    function gt(float memory a, float memory b) internal pure returns(bool) {\\n        require(a.denominator != 0 && b.denominator != 0, \\\"div 0\\\");\\n        return a.numerator * b.denominator > a.denominator * b.numerator;\\n    }\\n\\n    function lt(float memory a, float memory b) internal pure returns(bool) {\\n        require(a.denominator != 0 && b.denominator != 0, \\\"div 0\\\");\\n        return a.numerator * b.denominator < a.denominator * b.numerator;\\n    }\\n\\n    function gte(float memory a, float memory b) internal pure returns(bool) {\\n        require(a.denominator != 0 && b.denominator != 0, \\\"div 0\\\");\\n        return a.numerator * b.denominator >= a.denominator * b.numerator;\\n    }\\n\\n    function lte(float memory a, float memory b) internal pure returns(bool) {\\n        require(a.denominator != 0 && b.denominator != 0, \\\"div 0\\\");\\n        return a.numerator * b.denominator <= a.denominator * b.numerator;\\n    }\\n\\n    function equals(float memory a, float memory b) internal pure returns(bool) {\\n        require(a.denominator != 0 && b.denominator != 0, \\\"div 0\\\");\\n        return a.numerator * b.denominator == b.numerator * a.denominator;\\n    }\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/token/ERC20/IERC20.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC20 standard as defined in the EIP.\\n */\\ninterface IERC20 {\\n    /**\\n     * @dev Returns the amount of tokens in existence.\\n     */\\n    function totalSupply() external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the amount of tokens owned by `account`.\\n     */\\n    function balanceOf(address account) external view returns (uint256);\\n\\n    /**\\n     * @dev Moves `amount` tokens from the caller's account to `recipient`.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transfer(address recipient, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Returns the remaining number of tokens that `spender` will be\\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\\n     * zero by default.\\n     *\\n     * This value changes when {approve} or {transferFrom} are called.\\n     */\\n    function allowance(address owner, address spender) external view returns (uint256);\\n\\n    /**\\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\\n     * that someone may use both the old and the new allowance by unfortunate\\n     * transaction ordering. One possible solution to mitigate this race\\n     * condition is to first reduce the spender's allowance to 0 and set the\\n     * desired value afterwards:\\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address spender, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Moves `amount` tokens from `sender` to `recipient` using the\\n     * allowance mechanism. `amount` is then deducted from the caller's\\n     * allowance.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(\\n        address sender,\\n        address recipient,\\n        uint256 amount\\n    ) external returns (bool);\\n\\n    /**\\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\\n     * another (`to`).\\n     *\\n     * Note that `value` may be zero.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 value);\\n\\n    /**\\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\\n     * a call to {approve}. `value` is the new allowance.\\n     */\\n    event Approval(address indexed owner, address indexed spender, uint256 value);\\n}\\n\"\r\n    },\r\n    \"contracts/interfaces/IERC3156FlashLender.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: AGPL-3.0\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"./IERC3156FlashBorrower.sol\\\";\\n\\ninterface IERC3156FlashLender {\\n    /**\\n     * @dev The amount of currency available to be lent.\\n     * @param token The loan currency.\\n     * @return The amount of `token` that can be borrowed.\\n     */\\n    function maxFlashLoan(address token) external view returns (uint256);\\n\\n    /**\\n     * @dev The fee to be charged for a given loan.\\n     * @param token The loan currency.\\n     * @param amount The amount of tokens lent.\\n     * @return The amount of `token` to be charged for the loan, on top of the returned principal.\\n     */\\n    function flashFee(address token, uint256 amount)\\n        external\\n        view\\n        returns (uint256);\\n\\n    /**\\n     * @dev Initiate a flash loan.\\n     * @param receiver The receiver of the tokens in the loan, and the receiver of the callback.\\n     * @param token The loan currency.\\n     * @param amount The amount of tokens lent.\\n     * @param data Arbitrary data structure, intended to contain user-defined parameters.\\n     */\\n    function flashLoan(\\n        IERC3156FlashBorrower receiver,\\n        address token,\\n        uint256 amount,\\n        bytes calldata data\\n    ) external returns (bool);\\n}\\n\"\r\n    },\r\n    \"contracts/interfaces/IERC3156FlashBorrower.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: AGPL-3.0\\n\\npragma solidity ^0.8.0;\\n\\ninterface IERC3156FlashBorrower {\\n    /**\\n     * @dev Receive a flash loan.\\n     * @param initiator The initiator of the loan.\\n     * @param token The loan currency.\\n     * @param amount The amount of tokens lent.\\n     * @param fee The additional amount of tokens to repay.\\n     * @param data Arbitrary data structure, intended to contain user-defined parameters.\\n     * @return The keccak256 hash of \\\"ERC3156FlashBorrower.onFlashLoan\\\"\\n     */\\n    function onFlashLoan(\\n        address initiator,\\n        address token,\\n        uint256 amount,\\n        uint256 fee,\\n        bytes calldata data\\n    ) external returns (bytes32);\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/token/ERC721/extensions/IERC721Enumerable.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../IERC721.sol\\\";\\n\\n/**\\n * @title ERC-721 Non-Fungible Token Standard, optional enumeration extension\\n * @dev See https://eips.ethereum.org/EIPS/eip-721\\n */\\ninterface IERC721Enumerable is IERC721 {\\n    /**\\n     * @dev Returns the total amount of tokens stored by the contract.\\n     */\\n    function totalSupply() external view returns (uint256);\\n\\n    /**\\n     * @dev Returns a token ID owned by `owner` at a given `index` of its token list.\\n     * Use along with {balanceOf} to enumerate all of ``owner``'s tokens.\\n     */\\n    function tokenOfOwnerByIndex(address owner, uint256 index) external view returns (uint256 tokenId);\\n\\n    /**\\n     * @dev Returns a token ID at a given `index` of all the tokens stored by the contract.\\n     * Use along with {totalSupply} to enumerate all tokens.\\n     */\\n    function tokenByIndex(uint256 index) external view returns (uint256);\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/token/ERC721/IERC721.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../../utils/introspection/IERC165.sol\\\";\\n\\n/**\\n * @dev Required interface of an ERC721 compliant contract.\\n */\\ninterface IERC721 is IERC165 {\\n    /**\\n     * @dev Emitted when `tokenId` token is transferred from `from` to `to`.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 indexed tokenId);\\n\\n    /**\\n     * @dev Emitted when `owner` enables `approved` to manage the `tokenId` token.\\n     */\\n    event Approval(address indexed owner, address indexed approved, uint256 indexed tokenId);\\n\\n    /**\\n     * @dev Emitted when `owner` enables or disables (`approved`) `operator` to manage all of its assets.\\n     */\\n    event ApprovalForAll(address indexed owner, address indexed operator, bool approved);\\n\\n    /**\\n     * @dev Returns the number of tokens in ``owner``'s account.\\n     */\\n    function balanceOf(address owner) external view returns (uint256 balance);\\n\\n    /**\\n     * @dev Returns the owner of the `tokenId` token.\\n     *\\n     * Requirements:\\n     *\\n     * - `tokenId` must exist.\\n     */\\n    function ownerOf(uint256 tokenId) external view returns (address owner);\\n\\n    /**\\n     * @dev Safely transfers `tokenId` token from `from` to `to`, checking first that contract recipients\\n     * are aware of the ERC721 protocol to prevent tokens from being forever locked.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` cannot be the zero address.\\n     * - `to` cannot be the zero address.\\n     * - `tokenId` token must exist and be owned by `from`.\\n     * - If the caller is not `from`, it must be have been allowed to move this token by either {approve} or {setApprovalForAll}.\\n     * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function safeTransferFrom(\\n        address from,\\n        address to,\\n        uint256 tokenId\\n    ) external;\\n\\n    /**\\n     * @dev Transfers `tokenId` token from `from` to `to`.\\n     *\\n     * WARNING: Usage of this method is discouraged, use {safeTransferFrom} whenever possible.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` cannot be the zero address.\\n     * - `to` cannot be the zero address.\\n     * - `tokenId` token must be owned by `from`.\\n     * - If the caller is not `from`, it must be approved to move this token by either {approve} or {setApprovalForAll}.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(\\n        address from,\\n        address to,\\n        uint256 tokenId\\n    ) external;\\n\\n    /**\\n     * @dev Gives permission to `to` to transfer `tokenId` token to another account.\\n     * The approval is cleared when the token is transferred.\\n     *\\n     * Only a single account can be approved at a time, so approving the zero address clears previous approvals.\\n     *\\n     * Requirements:\\n     *\\n     * - The caller must own the token or be an approved operator.\\n     * - `tokenId` must exist.\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address to, uint256 tokenId) external;\\n\\n    /**\\n     * @dev Returns the account approved for `tokenId` token.\\n     *\\n     * Requirements:\\n     *\\n     * - `tokenId` must exist.\\n     */\\n    function getApproved(uint256 tokenId) external view returns (address operator);\\n\\n    /**\\n     * @dev Approve or remove `operator` as an operator for the caller.\\n     * Operators can call {transferFrom} or {safeTransferFrom} for any token owned by the caller.\\n     *\\n     * Requirements:\\n     *\\n     * - The `operator` cannot be the caller.\\n     *\\n     * Emits an {ApprovalForAll} event.\\n     */\\n    function setApprovalForAll(address operator, bool _approved) external;\\n\\n    /**\\n     * @dev Returns if the `operator` is allowed to manage all of the assets of `owner`.\\n     *\\n     * See {setApprovalForAll}\\n     */\\n    function isApprovedForAll(address owner, address operator) external view returns (bool);\\n\\n    /**\\n     * @dev Safely transfers `tokenId` token from `from` to `to`.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` cannot be the zero address.\\n     * - `to` cannot be the zero address.\\n     * - `tokenId` token must exist and be owned by `from`.\\n     * - If the caller is not `from`, it must be approved to move this token by either {approve} or {setApprovalForAll}.\\n     * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function safeTransferFrom(\\n        address from,\\n        address to,\\n        uint256 tokenId,\\n        bytes calldata data\\n    ) external;\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/utils/introspection/IERC165.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC165 standard, as defined in the\\n * https://eips.ethereum.org/EIPS/eip-165[EIP].\\n *\\n * Implementers can declare support of contract interfaces, which can then be\\n * queried by others ({ERC165Checker}).\\n *\\n * For an implementation, see {ERC165}.\\n */\\ninterface IERC165 {\\n    /**\\n     * @dev Returns true if this contract implements the interface defined by\\n     * `interfaceId`. See the corresponding\\n     * https://eips.ethereum.org/EIPS/eip-165#how-interfaces-are-identified[EIP section]\\n     * to learn more about how these ids are created.\\n     *\\n     * This function call must use less than 30 000 gas.\\n     */\\n    function supportsInterface(bytes4 interfaceId) external view returns (bool);\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/token/ERC20/ERC20.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"./IERC20.sol\\\";\\nimport \\\"./extensions/IERC20Metadata.sol\\\";\\nimport \\\"../../utils/Context.sol\\\";\\n\\n/**\\n * @dev Implementation of the {IERC20} interface.\\n *\\n * This implementation is agnostic to the way tokens are created. This means\\n * that a supply mechanism has to be added in a derived contract using {_mint}.\\n * For a generic mechanism see {ERC20PresetMinterPauser}.\\n *\\n * TIP: For a detailed writeup see our guide\\n * https://forum.zeppelin.solutions/t/how-to-implement-erc20-supply-mechanisms/226[How\\n * to implement supply mechanisms].\\n *\\n * We have followed general OpenZeppelin Contracts guidelines: functions revert\\n * instead returning `false` on failure. This behavior is nonetheless\\n * conventional and does not conflict with the expectations of ERC20\\n * applications.\\n *\\n * Additionally, an {Approval} event is emitted on calls to {transferFrom}.\\n * This allows applications to reconstruct the allowance for all accounts just\\n * by listening to said events. Other implementations of the EIP may not emit\\n * these events, as it isn't required by the specification.\\n *\\n * Finally, the non-standard {decreaseAllowance} and {increaseAllowance}\\n * functions have been added to mitigate the well-known issues around setting\\n * allowances. See {IERC20-approve}.\\n */\\ncontract ERC20 is Context, IERC20, IERC20Metadata {\\n    mapping(address => uint256) private _balances;\\n\\n    mapping(address => mapping(address => uint256)) private _allowances;\\n\\n    uint256 private _totalSupply;\\n\\n    string private _name;\\n    string private _symbol;\\n\\n    /**\\n     * @dev Sets the values for {name} and {symbol}.\\n     *\\n     * The default value of {decimals} is 18. To select a different value for\\n     * {decimals} you should overload it.\\n     *\\n     * All two of these values are immutable: they can only be set once during\\n     * construction.\\n     */\\n    constructor(string memory name_, string memory symbol_) {\\n        _name = name_;\\n        _symbol = symbol_;\\n    }\\n\\n    /**\\n     * @dev Returns the name of the token.\\n     */\\n    function name() public view virtual override returns (string memory) {\\n        return _name;\\n    }\\n\\n    /**\\n     * @dev Returns the symbol of the token, usually a shorter version of the\\n     * name.\\n     */\\n    function symbol() public view virtual override returns (string memory) {\\n        return _symbol;\\n    }\\n\\n    /**\\n     * @dev Returns the number of decimals used to get its user representation.\\n     * For example, if `decimals` equals `2`, a balance of `505` tokens should\\n     * be displayed to a user as `5.05` (`505 / 10 ** 2`).\\n     *\\n     * Tokens usually opt for a value of 18, imitating the relationship between\\n     * Ether and Wei. This is the value {ERC20} uses, unless this function is\\n     * overridden;\\n     *\\n     * NOTE: This information is only used for _display_ purposes: it in\\n     * no way affects any of the arithmetic of the contract, including\\n     * {IERC20-balanceOf} and {IERC20-transfer}.\\n     */\\n    function decimals() public view virtual override returns (uint8) {\\n        return 18;\\n    }\\n\\n    /**\\n     * @dev See {IERC20-totalSupply}.\\n     */\\n    function totalSupply() public view virtual override returns (uint256) {\\n        return _totalSupply;\\n    }\\n\\n    /**\\n     * @dev See {IERC20-balanceOf}.\\n     */\\n    function balanceOf(address account) public view virtual override returns (uint256) {\\n        return _balances[account];\\n    }\\n\\n    /**\\n     * @dev See {IERC20-transfer}.\\n     *\\n     * Requirements:\\n     *\\n     * - `recipient` cannot be the zero address.\\n     * - the caller must have a balance of at least `amount`.\\n     */\\n    function transfer(address recipient, uint256 amount) public virtual override returns (bool) {\\n        _transfer(_msgSender(), recipient, amount);\\n        return true;\\n    }\\n\\n    /**\\n     * @dev See {IERC20-allowance}.\\n     */\\n    function allowance(address owner, address spender) public view virtual override returns (uint256) {\\n        return _allowances[owner][spender];\\n    }\\n\\n    /**\\n     * @dev See {IERC20-approve}.\\n     *\\n     * Requirements:\\n     *\\n     * - `spender` cannot be the zero address.\\n     */\\n    function approve(address spender, uint256 amount) public virtual override returns (bool) {\\n        _approve(_msgSender(), spender, amount);\\n        return true;\\n    }\\n\\n    /**\\n     * @dev See {IERC20-transferFrom}.\\n     *\\n     * Emits an {Approval} event indicating the updated allowance. This is not\\n     * required by the EIP. See the note at the beginning of {ERC20}.\\n     *\\n     * Requirements:\\n     *\\n     * - `sender` and `recipient` cannot be the zero address.\\n     * - `sender` must have a balance of at least `amount`.\\n     * - the caller must have allowance for ``sender``'s tokens of at least\\n     * `amount`.\\n     */\\n    function transferFrom(\\n        address sender,\\n        address recipient,\\n        uint256 amount\\n    ) public virtual override returns (bool) {\\n        _transfer(sender, recipient, amount);\\n\\n        uint256 currentAllowance = _allowances[sender][_msgSender()];\\n        require(currentAllowance >= amount, \\\"ERC20: transfer amount exceeds allowance\\\");\\n        unchecked {\\n            _approve(sender, _msgSender(), currentAllowance - amount);\\n        }\\n\\n        return true;\\n    }\\n\\n    /**\\n     * @dev Atomically increases the allowance granted to `spender` by the caller.\\n     *\\n     * This is an alternative to {approve} that can be used as a mitigation for\\n     * problems described in {IERC20-approve}.\\n     *\\n     * Emits an {Approval} event indicating the updated allowance.\\n     *\\n     * Requirements:\\n     *\\n     * - `spender` cannot be the zero address.\\n     */\\n    function increaseAllowance(address spender, uint256 addedValue) public virtual returns (bool) {\\n        _approve(_msgSender(), spender, _allowances[_msgSender()][spender] + addedValue);\\n        return true;\\n    }\\n\\n    /**\\n     * @dev Atomically decreases the allowance granted to `spender` by the caller.\\n     *\\n     * This is an alternative to {approve} that can be used as a mitigation for\\n     * problems described in {IERC20-approve}.\\n     *\\n     * Emits an {Approval} event indicating the updated allowance.\\n     *\\n     * Requirements:\\n     *\\n     * - `spender` cannot be the zero address.\\n     * - `spender` must have allowance for the caller of at least\\n     * `subtractedValue`.\\n     */\\n    function decreaseAllowance(address spender, uint256 subtractedValue) public virtual returns (bool) {\\n        uint256 currentAllowance = _allowances[_msgSender()][spender];\\n        require(currentAllowance >= subtractedValue, \\\"ERC20: decreased allowance below zero\\\");\\n        unchecked {\\n            _approve(_msgSender(), spender, currentAllowance - subtractedValue);\\n        }\\n\\n        return true;\\n    }\\n\\n    /**\\n     * @dev Moves `amount` of tokens from `sender` to `recipient`.\\n     *\\n     * This internal function is equivalent to {transfer}, and can be used to\\n     * e.g. implement automatic token fees, slashing mechanisms, etc.\\n     *\\n     * Emits a {Transfer} event.\\n     *\\n     * Requirements:\\n     *\\n     * - `sender` cannot be the zero address.\\n     * - `recipient` cannot be the zero address.\\n     * - `sender` must have a balance of at least `amount`.\\n     */\\n    function _transfer(\\n        address sender,\\n        address recipient,\\n        uint256 amount\\n    ) internal virtual {\\n        require(sender != address(0), \\\"ERC20: transfer from the zero address\\\");\\n        require(recipient != address(0), \\\"ERC20: transfer to the zero address\\\");\\n\\n        _beforeTokenTransfer(sender, recipient, amount);\\n\\n        uint256 senderBalance = _balances[sender];\\n        require(senderBalance >= amount, \\\"ERC20: transfer amount exceeds balance\\\");\\n        unchecked {\\n            _balances[sender] = senderBalance - amount;\\n        }\\n        _balances[recipient] += amount;\\n\\n        emit Transfer(sender, recipient, amount);\\n\\n        _afterTokenTransfer(sender, recipient, amount);\\n    }\\n\\n    /** @dev Creates `amount` tokens and assigns them to `account`, increasing\\n     * the total supply.\\n     *\\n     * Emits a {Transfer} event with `from` set to the zero address.\\n     *\\n     * Requirements:\\n     *\\n     * - `account` cannot be the zero address.\\n     */\\n    function _mint(address account, uint256 amount) internal virtual {\\n        require(account != address(0), \\\"ERC20: mint to the zero address\\\");\\n\\n        _beforeTokenTransfer(address(0), account, amount);\\n\\n        _totalSupply += amount;\\n        _balances[account] += amount;\\n        emit Transfer(address(0), account, amount);\\n\\n        _afterTokenTransfer(address(0), account, amount);\\n    }\\n\\n    /**\\n     * @dev Destroys `amount` tokens from `account`, reducing the\\n     * total supply.\\n     *\\n     * Emits a {Transfer} event with `to` set to the zero address.\\n     *\\n     * Requirements:\\n     *\\n     * - `account` cannot be the zero address.\\n     * - `account` must have at least `amount` tokens.\\n     */\\n    function _burn(address account, uint256 amount) internal virtual {\\n        require(account != address(0), \\\"ERC20: burn from the zero address\\\");\\n\\n        _beforeTokenTransfer(account, address(0), amount);\\n\\n        uint256 accountBalance = _balances[account];\\n        require(accountBalance >= amount, \\\"ERC20: burn amount exceeds balance\\\");\\n        unchecked {\\n            _balances[account] = accountBalance - amount;\\n        }\\n        _totalSupply -= amount;\\n\\n        emit Transfer(account, address(0), amount);\\n\\n        _afterTokenTransfer(account, address(0), amount);\\n    }\\n\\n    /**\\n     * @dev Sets `amount` as the allowance of `spender` over the `owner` s tokens.\\n     *\\n     * This internal function is equivalent to `approve`, and can be used to\\n     * e.g. set automatic allowances for certain subsystems, etc.\\n     *\\n     * Emits an {Approval} event.\\n     *\\n     * Requirements:\\n     *\\n     * - `owner` cannot be the zero address.\\n     * - `spender` cannot be the zero address.\\n     */\\n    function _approve(\\n        address owner,\\n        address spender,\\n        uint256 amount\\n    ) internal virtual {\\n        require(owner != address(0), \\\"ERC20: approve from the zero address\\\");\\n        require(spender != address(0), \\\"ERC20: approve to the zero address\\\");\\n\\n        _allowances[owner][spender] = amount;\\n        emit Approval(owner, spender, amount);\\n    }\\n\\n    /**\\n     * @dev Hook that is called before any transfer of tokens. This includes\\n     * minting and burning.\\n     *\\n     * Calling conditions:\\n     *\\n     * - when `from` and `to` are both non-zero, `amount` of ``from``'s tokens\\n     * will be transferred to `to`.\\n     * - when `from` is zero, `amount` tokens will be minted for `to`.\\n     * - when `to` is zero, `amount` of ``from``'s tokens will be burned.\\n     * - `from` and `to` are never both zero.\\n     *\\n     * To learn more about hooks, head to xref:ROOT:extending-contracts.adoc#using-hooks[Using Hooks].\\n     */\\n    function _beforeTokenTransfer(\\n        address from,\\n        address to,\\n        uint256 amount\\n    ) internal virtual {}\\n\\n    /**\\n     * @dev Hook that is called after any transfer of tokens. This includes\\n     * minting and burning.\\n     *\\n     * Calling conditions:\\n     *\\n     * - when `from` and `to` are both non-zero, `amount` of ``from``'s tokens\\n     * has been transferred to `to`.\\n     * - when `from` is zero, `amount` tokens have been minted for `to`.\\n     * - when `to` is zero, `amount` of ``from``'s tokens have been burned.\\n     * - `from` and `to` are never both zero.\\n     *\\n     * To learn more about hooks, head to xref:ROOT:extending-contracts.adoc#using-hooks[Using Hooks].\\n     */\\n    function _afterTokenTransfer(\\n        address from,\\n        address to,\\n        uint256 amount\\n    ) internal virtual {}\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/token/ERC20/extensions/IERC20Metadata.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../IERC20.sol\\\";\\n\\n/**\\n * @dev Interface for the optional metadata functions from the ERC20 standard.\\n *\\n * _Available since v4.1._\\n */\\ninterface IERC20Metadata is IERC20 {\\n    /**\\n     * @dev Returns the name of the token.\\n     */\\n    function name() external view returns (string memory);\\n\\n    /**\\n     * @dev Returns the symbol of the token.\\n     */\\n    function symbol() external view returns (string memory);\\n\\n    /**\\n     * @dev Returns the decimals places of the token.\\n     */\\n    function decimals() external view returns (uint8);\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/utils/Context.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Provides information about the current execution context, including the\\n * sender of the transaction and its data. While these are generally available\\n * via msg.sender and msg.data, they should not be accessed in such a direct\\n * manner, since when dealing with meta-transactions the account sending and\\n * paying for execution may not be the actual sender (as far as an application\\n * is concerned).\\n *\\n * This contract is only required for intermediate, library-like contracts.\\n */\\nabstract contract Context {\\n    function _msgSender() internal view virtual returns (address) {\\n        return msg.sender;\\n    }\\n\\n    function _msgData() internal view virtual returns (bytes calldata) {\\n        return msg.data;\\n    }\\n}\\n\"\r\n    }\r\n  },\r\n  \"settings\": {\r\n    \"optimizer\": {\r\n      \"enabled\": true,\r\n      \"runs\": 200\r\n    },\r\n    \"metadata\": {\r\n      \"bytecodeHash\": \"none\"\r\n    },\r\n    \"outputSelection\": {\r\n      \"*\": {\r\n        \"*\": [\r\n          \"evm.bytecode\",\r\n          \"evm.deployedBytecode\",\r\n          \"abi\"\r\n        ]\r\n      }\r\n    },\r\n    \"libraries\": {}\r\n  }\r\n}}","ABI":"[{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_governance\",\"type\":\"address\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_cssr\",\"type\":\"address\"}],\"name\":\"changeCSSR\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_profile\",\"type\":\"address\"}],\"name\":\"changeDiscountProfile\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_feePool\",\"type\":\"address\"}],\"name\":\"changeFeePool\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_governance\",\"type\":\"address\"}],\"name\":\"changeGovernance\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_liquidator\",\"type\":\"address\"}],\"name\":\"changeLiquidator\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_minter\",\"type\":\"address\"}],\"name\":\"changeMinter\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_mochi\",\"type\":\"address\"}],\"name\":\"changeMochi\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_nft\",\"type\":\"address\"}],\"name\":\"changeNFT\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_operation\",\"type\":\"address\"}],\"name\":\"changeOperationWallet\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_profile\",\"type\":\"address\"}],\"name\":\"changeProfile\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_referralFeePool\",\"type\":\"address\"}],\"name\":\"changeReferralFeePool\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_treasury\",\"type\":\"address\"}],\"name\":\"changeTreasury\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_usdm\",\"type\":\"address\"}],\"name\":\"changeUSDM\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_vmochi\",\"type\":\"address\"}],\"name\":\"changeVMochi\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"cssr\",\"outputs\":[{\"internalType\":\"contract ICSSRRouter\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"discountProfile\",\"outputs\":[{\"internalType\":\"contract IDiscountProfile\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"feePool\",\"outputs\":[{\"internalType\":\"contract IFeePool\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"governance\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"liquidator\",\"outputs\":[{\"internalType\":\"contract ILiquidator\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"minter\",\"outputs\":[{\"internalType\":\"contract IMinter\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"mochi\",\"outputs\":[{\"internalType\":\"contract IMochi\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"mochiProfile\",\"outputs\":[{\"internalType\":\"contract IMochiProfile\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"nft\",\"outputs\":[{\"internalType\":\"contract IMochiNFT\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"operationWallet\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"referralFeePool\",\"outputs\":[{\"internalType\":\"contract IReferralFeePool\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"treasury\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"usdm\",\"outputs\":[{\"internalType\":\"contract IUSDM\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"vMochi\",\"outputs\":[{\"internalType\":\"contract IVMochi\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"vaultFactory\",\"outputs\":[{\"internalType\":\"contract IMochiVaultFactory\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"}]","ContractName":"MochiEngine","CompilerVersion":"v0.8.7+commit.e28d00a7","OptimizationUsed":"1","Runs":"200","ConstructorArguments":"000000000000000000000000067fa954b94134a67a8a4772aa24cfea3d20c033","EVMVersion":"Default","Library":"","LicenseType":"","Proxy":"0","Implementation":"","SwarmSource":""}]}