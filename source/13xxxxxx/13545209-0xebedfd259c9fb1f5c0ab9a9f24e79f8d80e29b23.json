{"status":"1","message":"OK","result":[{"SourceCode":"{{\r\n  \"language\": \"Solidity\",\r\n  \"settings\": {\r\n    \"evmVersion\": \"berlin\",\r\n    \"libraries\": {},\r\n    \"metadata\": {\r\n      \"bytecodeHash\": \"ipfs\",\r\n      \"useLiteralContent\": true\r\n    },\r\n    \"optimizer\": {\r\n      \"enabled\": true,\r\n      \"runs\": 200\r\n    },\r\n    \"remappings\": [],\r\n    \"outputSelection\": {\r\n      \"*\": {\r\n        \"*\": [\r\n          \"evm.bytecode\",\r\n          \"evm.deployedBytecode\",\r\n          \"devdoc\",\r\n          \"userdoc\",\r\n          \"metadata\",\r\n          \"abi\"\r\n        ]\r\n      }\r\n    }\r\n  },\r\n  \"sources\": {\r\n    \"@openzeppelin/contracts/token/ERC20/IERC20.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC20 standard as defined in the EIP.\\n */\\ninterface IERC20 {\\n    /**\\n     * @dev Returns the amount of tokens in existence.\\n     */\\n    function totalSupply() external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the amount of tokens owned by `account`.\\n     */\\n    function balanceOf(address account) external view returns (uint256);\\n\\n    /**\\n     * @dev Moves `amount` tokens from the caller's account to `recipient`.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transfer(address recipient, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Returns the remaining number of tokens that `spender` will be\\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\\n     * zero by default.\\n     *\\n     * This value changes when {approve} or {transferFrom} are called.\\n     */\\n    function allowance(address owner, address spender) external view returns (uint256);\\n\\n    /**\\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\\n     * that someone may use both the old and the new allowance by unfortunate\\n     * transaction ordering. One possible solution to mitigate this race\\n     * condition is to first reduce the spender's allowance to 0 and set the\\n     * desired value afterwards:\\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address spender, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Moves `amount` tokens from `sender` to `recipient` using the\\n     * allowance mechanism. `amount` is then deducted from the caller's\\n     * allowance.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(\\n        address sender,\\n        address recipient,\\n        uint256 amount\\n    ) external returns (bool);\\n\\n    /**\\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\\n     * another (`to`).\\n     *\\n     * Note that `value` may be zero.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 value);\\n\\n    /**\\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\\n     * a call to {approve}. `value` is the new allowance.\\n     */\\n    event Approval(address indexed owner, address indexed spender, uint256 value);\\n}\\n\"\r\n    },\r\n    \"contracts/VesperVotingPower.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\n//SPDX-License-Identifier: MIT\\npragma solidity 0.8.5;\\n\\nimport \\\"./interfaces/ICToken.sol\\\";\\nimport \\\"./interfaces/IUniswapV2Pair.sol\\\";\\nimport \\\"./interfaces/IVesperPool.sol\\\";\\n\\n/**\\n * @title Calculate voting power for VSP holders\\n */\\ncontract VesperVotingPower {\\n    address public constant VSP = 0x1b40183EFB4Dd766f11bDa7A7c3AD8982e998421;\\n    address public constant vVSP = 0xbA4cFE5741b357FA371b506e5db0774aBFeCf8Fc;\\n    address public constant fVVSP_23 = 0x63475Ab76E578Ec27ae2494d29E1df288817d931; // RariFuse#23\\n    address public constant fVSP_23 = 0x0879DbeE0614cc3516c464522e9B2e10eB2D415A; // RariFuse#23\\n    address public constant fVVSP_110 = 0xCbB25B8E3c899C9CAFd9b60C40490aa51282d476; // RariFuse#110\\n    address public constant uniswapV2 = 0x6D7B6DaD6abeD1DFA5eBa37a6667bA9DCFD49077; // VSP-ETH pair\\n    address public constant sushiswap = 0x132eEb05d5CB6829Bd34F552cDe0b6b708eF5014; // VSP-ETH pair\\n\\n    uint256 public constant MINIMUM_VOTING_POWER = 1e18;\\n\\n    modifier onlyIfAddressIsValid(address wallet) {\\n        require(wallet != address(0), \\\"holder-address-is-zero\\\");\\n        _;\\n    }\\n\\n    /// @notice Convert vVSP to VSP amount\\n    function _toVSP(uint256 _vvspAmount) internal view returns (uint256) {\\n        return (IVesperPool(vVSP).getPricePerShare() * _vvspAmount) / 1e18;\\n    }\\n\\n    /// @notice Get VSP amount deposited in the vVSP pool\\n    function _inVSPPool(address _holder) internal view returns (uint256) {\\n        return _toVSP(IVesperPool(vVSP).balanceOf(_holder));\\n    }\\n\\n    /// @notice Get underlying amount from cToken-Like (e.g. fToken, crToken, etc)\\n    function _depositedInCTokenLike(address _cTokenLike, address _holder) internal view returns (uint256) {\\n        ICToken cTokenLike = ICToken(_cTokenLike);\\n        uint256 _balance = ((cTokenLike.balanceOf(_holder) * cTokenLike.exchangeRateStored()) / 1e18);\\n        uint256 _borrowed = cTokenLike.borrowBalanceStored(_holder);\\n        if (_balance > _borrowed) {\\n            return _balance - _borrowed;\\n        } else {\\n            return 0;\\n        }\\n    }\\n\\n    /// @notice Get the VSP amount converted from the RariFuse's fVSP and fVVSP pools\\n    function _inFusePools(address _holder) internal view returns (uint256) {\\n        uint256 _vspBalance = _depositedInCTokenLike(fVSP_23, _holder);\\n        uint256 _vvspBalance = _depositedInCTokenLike(fVVSP_23, _holder) + _depositedInCTokenLike(fVVSP_110, _holder);\\n        return _vspBalance + _toVSP(_vvspBalance);\\n    }\\n\\n    /// @notice Get the amout of VSP tokens deposited in UniswapV2-Like pair pool\\n    function _inUniswapV2Like(address _pairAddress, address _holder) internal view returns (uint256) {\\n        IUniswapV2Pair _pair = IUniswapV2Pair(_pairAddress);\\n        require(_pair.token0() == VSP, \\\"token0-is-not-vsp\\\");\\n        uint256 staked = _pair.balanceOf(_holder);\\n        if (staked == 0) {\\n            return 0;\\n        }\\n        uint256 lpTotalSupply = _pair.totalSupply();\\n        (uint112 _reserve0, , ) = _pair.getReserves();\\n\\n        return (_reserve0 * staked) / lpTotalSupply;\\n    }\\n\\n    /// @notice Get the voting power for an account\\n    function balanceOf(address _holder) public view virtual onlyIfAddressIsValid(_holder) returns (uint256) {\\n        uint256 votingPower = IERC20(VSP).balanceOf(_holder) + // VSP\\n            _inVSPPool(_holder) + // vVSP\\n            _inFusePools(_holder) + // fTokens (fVSP and fVVSP)\\n            _inUniswapV2Like(uniswapV2, _holder) + // UniswapV2 VSP/ETH\\n            _inUniswapV2Like(sushiswap, _holder); // Sushiswap VSP/ETH\\n\\n        return votingPower >= MINIMUM_VOTING_POWER ? votingPower : 0;\\n    }\\n}\\n\"\r\n    },\r\n    \"contracts/interfaces/ICToken.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity 0.8.5;\\n\\nimport \\\"@openzeppelin/contracts/token/ERC20/IERC20.sol\\\";\\n\\ninterface ICToken is IERC20 {\\n    function borrowBalanceStored(address account) external view returns (uint256);\\n\\n    function exchangeRateStored() external view returns (uint256);\\n\\n    function underlying() external view returns (address);\\n\\n    function getCash() external view returns (uint256);\\n\\n    function totalBorrows() external view returns (uint256);\\n\\n    function totalReserves() external view returns (uint256);\\n}\\n\"\r\n    },\r\n    \"contracts/interfaces/IUniswapV2Pair.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity >=0.5.0;\\n\\ninterface IUniswapV2Pair {\\n    event Approval(address indexed owner, address indexed spender, uint256 value);\\n    event Transfer(address indexed from, address indexed to, uint256 value);\\n\\n    function name() external pure returns (string memory);\\n\\n    function symbol() external pure returns (string memory);\\n\\n    function decimals() external pure returns (uint8);\\n\\n    function totalSupply() external view returns (uint256);\\n\\n    function balanceOf(address owner) external view returns (uint256);\\n\\n    function allowance(address owner, address spender) external view returns (uint256);\\n\\n    function approve(address spender, uint256 value) external returns (bool);\\n\\n    function transfer(address to, uint256 value) external returns (bool);\\n\\n    function transferFrom(\\n        address from,\\n        address to,\\n        uint256 value\\n    ) external returns (bool);\\n\\n    function DOMAIN_SEPARATOR() external view returns (bytes32);\\n\\n    function PERMIT_TYPEHASH() external pure returns (bytes32);\\n\\n    function nonces(address owner) external view returns (uint256);\\n\\n    function permit(\\n        address owner,\\n        address spender,\\n        uint256 value,\\n        uint256 deadline,\\n        uint8 v,\\n        bytes32 r,\\n        bytes32 s\\n    ) external;\\n\\n    event Mint(address indexed sender, uint256 amount0, uint256 amount1);\\n    event Burn(address indexed sender, uint256 amount0, uint256 amount1, address indexed to);\\n    event Swap(\\n        address indexed sender,\\n        uint256 amount0In,\\n        uint256 amount1In,\\n        uint256 amount0Out,\\n        uint256 amount1Out,\\n        address indexed to\\n    );\\n    event Sync(uint112 reserve0, uint112 reserve1);\\n\\n    function MINIMUM_LIQUIDITY() external pure returns (uint256);\\n\\n    function factory() external view returns (address);\\n\\n    function token0() external view returns (address);\\n\\n    function token1() external view returns (address);\\n\\n    function getReserves()\\n        external\\n        view\\n        returns (\\n            uint112 reserve0,\\n            uint112 reserve1,\\n            uint32 blockTimestampLast\\n        );\\n\\n    function price0CumulativeLast() external view returns (uint256);\\n\\n    function price1CumulativeLast() external view returns (uint256);\\n\\n    function kLast() external view returns (uint256);\\n\\n    function mint(address to) external returns (uint256 liquidity);\\n\\n    function burn(address to) external returns (uint256 amount0, uint256 amount1);\\n\\n    function swap(\\n        uint256 amount0Out,\\n        uint256 amount1Out,\\n        address to,\\n        bytes calldata data\\n    ) external;\\n\\n    function skim(address to) external;\\n\\n    function sync() external;\\n\\n    function initialize(address, address) external;\\n}\\n\"\r\n    },\r\n    \"contracts/interfaces/IVesperPool.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity 0.8.5;\\n\\nimport \\\"@openzeppelin/contracts/token/ERC20/IERC20.sol\\\";\\n\\ninterface IVesperPool is IERC20 {\\n    function getPricePerShare() external view returns (uint256);\\n}\\n\"\r\n    }\r\n  }\r\n}}","ABI":"[{\"inputs\":[],\"name\":\"MINIMUM_VOTING_POWER\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"VSP\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_holder\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"fVSP_23\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"fVVSP_110\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"fVVSP_23\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"sushiswap\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"uniswapV2\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"vVSP\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"}]","ContractName":"VesperVotingPower","CompilerVersion":"v0.8.5+commit.a4f2e591","OptimizationUsed":"1","Runs":"200","ConstructorArguments":"","EVMVersion":"Default","Library":"","LicenseType":"MIT","Proxy":"0","Implementation":"","SwarmSource":""}]}