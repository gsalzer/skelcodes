{"status":"1","message":"OK","result":[{"SourceCode":"{{\r\n  \"language\": \"Solidity\",\r\n  \"sources\": {\r\n    \"/C/Users/Luke/Projects/wolfgame-contract/contracts/Context.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\r\\n\\r\\npragma solidity ^0.8.0;\\r\\n\\r\\n/**\\r\\n * @dev Provides information about the current execution context, including the\\r\\n * sender of the transaction and its data. While these are generally available\\r\\n * via msg.sender and msg.data, they should not be accessed in such a direct\\r\\n * manner, since when dealing with meta-transactions the account sending and\\r\\n * paying for execution may not be the actual sender (as far as an application\\r\\n * is concerned).\\r\\n *\\r\\n * This contract is only required for intermediate, library-like contracts.\\r\\n */\\r\\nabstract contract Context {\\r\\n    function _msgSender() internal view virtual returns (address) {\\r\\n        return msg.sender;\\r\\n    }\\r\\n\\r\\n    function _msgData() internal view virtual returns (bytes calldata) {\\r\\n        return msg.data;\\r\\n    }\\r\\n}\\r\\n\"\r\n    },\r\n    \"/C/Users/Luke/Projects/wolfgame-contract/contracts/ITraits.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT LICENSE\\r\\n\\r\\npragma solidity ^0.8.0;\\r\\n\\r\\ninterface ITraits {\\r\\n  struct TokenTraits {\\r\\n    bool isVillager;\\r\\n    uint8 alphaIndex;\\r\\n  }\\r\\n\\r\\n  function getTokenTraits(uint256 tokenId) external view returns (TokenTraits memory);\\r\\n  function generateTokenTraits(uint256 tokenId, uint256 seed) external;\\r\\n}\\r\\n\"\r\n    },\r\n    \"/C/Users/Luke/Projects/wolfgame-contract/contracts/Ownable.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\r\\n\\r\\npragma solidity ^0.8.0;\\r\\n\\r\\nimport \\\"./Context.sol\\\";\\r\\n\\r\\n/**\\r\\n * @dev Contract module which provides a basic access control mechanism, where\\r\\n * there is an account (an owner) that can be granted exclusive access to\\r\\n * specific functions.\\r\\n *\\r\\n * By default, the owner account will be the one that deploys the contract. This\\r\\n * can later be changed with {transferOwnership}.\\r\\n *\\r\\n * This module is used through inheritance. It will make available the modifier\\r\\n * `onlyOwner`, which can be applied to your functions to restrict their use to\\r\\n * the owner.\\r\\n */\\r\\nabstract contract Ownable is Context {\\r\\n    address private _owner;\\r\\n\\r\\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\\r\\n\\r\\n    /**\\r\\n     * @dev Initializes the contract setting the deployer as the initial owner.\\r\\n     */\\r\\n    constructor() {\\r\\n        _setOwner(_msgSender());\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Returns the address of the current owner.\\r\\n     */\\r\\n    function owner() public view virtual returns (address) {\\r\\n        return _owner;\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Throws if called by any account other than the owner.\\r\\n     */\\r\\n    modifier onlyOwner() {\\r\\n        require(owner() == _msgSender(), \\\"Ownable: caller is not the owner\\\");\\r\\n        _;\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Leaves the contract without owner. It will not be possible to call\\r\\n     * `onlyOwner` functions anymore. Can only be called by the current owner.\\r\\n     *\\r\\n     * NOTE: Renouncing ownership will leave the contract without an owner,\\r\\n     * thereby removing any functionality that is only available to the owner.\\r\\n     */\\r\\n    function renounceOwnership() public virtual onlyOwner {\\r\\n        _setOwner(address(0));\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\r\\n     * Can only be called by the current owner.\\r\\n     */\\r\\n    function transferOwnership(address newOwner) public virtual onlyOwner {\\r\\n        require(newOwner != address(0), \\\"Ownable: new owner is the zero address\\\");\\r\\n        _setOwner(newOwner);\\r\\n    }\\r\\n\\r\\n    function _setOwner(address newOwner) private {\\r\\n        address oldOwner = _owner;\\r\\n        _owner = newOwner;\\r\\n        emit OwnershipTransferred(oldOwner, newOwner);\\r\\n    }\\r\\n}\\r\\n\"\r\n    },\r\n    \"/C/Users/Luke/Projects/wolfgame-contract/contracts/Traits.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT LICENSE\\r\\n\\r\\npragma solidity ^0.8.0;\\r\\n\\r\\nimport \\\"./Ownable.sol\\\";\\r\\nimport \\\"./ITraits.sol\\\";\\r\\n\\r\\ncontract Traits is ITraits, Ownable {\\r\\n\\r\\n  // a mapping from an address to whether or not it can interact\\r\\n  mapping(address => bool) private controllers;\\r\\n\\r\\n  // mapping of generated tokens\\r\\n  mapping(uint256 => bool) private tokensGenerated;\\r\\n  // mapping of known token traits\\r\\n  mapping(uint256 => TokenTraits) private tokenTraits;\\r\\n  // mapping of alpha index rarities\\r\\n  uint8[] private alphaIndexRarities;\\r\\n  // mapping of alpha index aliases\\r\\n  uint8[] private alphaIndexAliases;\\r\\n\\r\\n  /**\\r\\n   * create the contract and initialize the alpha index roll tables\\r\\n   */\\r\\n  constructor() {\\r\\n    alphaIndexRarities = [8, 160, 73, 255];\\r\\n    alphaIndexAliases = [2, 3, 3, 3];\\r\\n  }\\r\\n\\r\\n  /**\\r\\n   * get the traits for a given token\\r\\n   * @param tokenId the token ID\\r\\n   * @return a struct of traits for the given token ID\\r\\n   */\\r\\n  function getTokenTraits(uint256 tokenId) external view override returns (TokenTraits memory) {\\r\\n    require(controllers[_msgSender()], \\\"TRAITS: Only controllers can get traits\\\");\\r\\n    require(tokensGenerated[tokenId], \\\"TRAITS: Token doesn't exist or hasn't been revealed\\\");\\r\\n\\r\\n    return tokenTraits[tokenId];\\r\\n  }\\r\\n\\r\\n  /**\\r\\n   * generate the traits for a token and store it in this contract\\r\\n   * @param tokenId the token ID\\r\\n   * @param seed the generated seed from DOS\\r\\n   */\\r\\n  function generateTokenTraits(uint256 tokenId, uint256 seed) external override {\\r\\n    require(controllers[_msgSender()], \\\"TRAITS: Only controllers can generate traits\\\");\\r\\n\\r\\n    bool isVillager = (seed & 0xFFFF) % 10 != 0;\\r\\n    uint8 alphaRoll = uint8(((seed >> 16) & 0xFFFF)) % uint8(alphaIndexRarities.length);\\r\\n    uint8 alphaIndex;\\r\\n\\r\\n    if (seed >> 24 < alphaIndexRarities[alphaRoll]) {\\r\\n      alphaIndex = alphaRoll;\\r\\n    } else {\\r\\n      alphaIndex = alphaIndexAliases[alphaRoll];\\r\\n    }\\r\\n\\r\\n    tokensGenerated[tokenId] = true;\\r\\n\\r\\n    tokenTraits[tokenId] = TokenTraits({\\r\\n      isVillager: isVillager,\\r\\n      alphaIndex: alphaIndex\\r\\n    });\\r\\n  }\\r\\n\\r\\n  /**\\r\\n   * enables an address to interact\\r\\n   * @param controller the address to enable\\r\\n   */\\r\\n  function addController(address controller) external onlyOwner {\\r\\n    controllers[controller] = true;\\r\\n  }\\r\\n\\r\\n  /**\\r\\n   * disables an address from interacting\\r\\n   * @param controller the address to disbale\\r\\n   */\\r\\n  function removeController(address controller) external onlyOwner {\\r\\n    controllers[controller] = false;\\r\\n  }\\r\\n\\r\\n}\\r\\n\"\r\n    }\r\n  },\r\n  \"settings\": {\r\n    \"remappings\": [],\r\n    \"optimizer\": {\r\n      \"enabled\": true,\r\n      \"runs\": 200\r\n    },\r\n    \"evmVersion\": \"london\",\r\n    \"libraries\": {},\r\n    \"outputSelection\": {\r\n      \"*\": {\r\n        \"*\": [\r\n          \"evm.bytecode\",\r\n          \"evm.deployedBytecode\",\r\n          \"devdoc\",\r\n          \"userdoc\",\r\n          \"metadata\",\r\n          \"abi\"\r\n        ]\r\n      }\r\n    }\r\n  }\r\n}}","ABI":"[{\"inputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"controller\",\"type\":\"address\"}],\"name\":\"addController\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"seed\",\"type\":\"uint256\"}],\"name\":\"generateTokenTraits\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"getTokenTraits\",\"outputs\":[{\"components\":[{\"internalType\":\"bool\",\"name\":\"isVillager\",\"type\":\"bool\"},{\"internalType\":\"uint8\",\"name\":\"alphaIndex\",\"type\":\"uint8\"}],\"internalType\":\"struct ITraits.TokenTraits\",\"name\":\"\",\"type\":\"tuple\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"controller\",\"type\":\"address\"}],\"name\":\"removeController\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}]","ContractName":"Traits","CompilerVersion":"v0.8.7+commit.e28d00a7","OptimizationUsed":"1","Runs":"200","ConstructorArguments":"","EVMVersion":"Default","Library":"","LicenseType":"","Proxy":"0","Implementation":"","SwarmSource":""}]}