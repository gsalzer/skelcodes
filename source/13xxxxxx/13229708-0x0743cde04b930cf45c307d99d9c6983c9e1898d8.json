{"status":"1","message":"OK","result":[{"SourceCode":"// Sources flattened with hardhat v2.5.0 https://hardhat.org\r\n\r\n// File @openzeppelin/contracts/utils/introspection/IERC165.sol@v4.1.0\r\n\r\n// SPDX-License-Identifier: MIT\r\n\r\npragma solidity ^0.8.0;\r\n\r\n/**\r\n * @dev Interface of the ERC165 standard, as defined in the\r\n * https://eips.ethereum.org/EIPS/eip-165[EIP].\r\n *\r\n * Implementers can declare support of contract interfaces, which can then be\r\n * queried by others ({ERC165Checker}).\r\n *\r\n * For an implementation, see {ERC165}.\r\n */\r\ninterface IERC165 {\r\n    /**\r\n     * @dev Returns true if this contract implements the interface defined by\r\n     * `interfaceId`. See the corresponding\r\n     * https://eips.ethereum.org/EIPS/eip-165#how-interfaces-are-identified[EIP section]\r\n     * to learn more about how these ids are created.\r\n     *\r\n     * This function call must use less than 30 000 gas.\r\n     */\r\n    function supportsInterface(bytes4 interfaceId) external view returns (bool);\r\n}\r\n\r\n\r\n// File @openzeppelin/contracts/token/ERC721/IERC721.sol@v4.1.0\r\n\r\n\r\n\r\n\r\n\r\n/**\r\n * @dev Required interface of an ERC721 compliant contract.\r\n */\r\ninterface IERC721 is IERC165 {\r\n    /**\r\n     * @dev Emitted when `tokenId` token is transferred from `from` to `to`.\r\n     */\r\n    event Transfer(address indexed from, address indexed to, uint256 indexed tokenId);\r\n\r\n    /**\r\n     * @dev Emitted when `owner` enables `approved` to manage the `tokenId` token.\r\n     */\r\n    event Approval(address indexed owner, address indexed approved, uint256 indexed tokenId);\r\n\r\n    /**\r\n     * @dev Emitted when `owner` enables or disables (`approved`) `operator` to manage all of its assets.\r\n     */\r\n    event ApprovalForAll(address indexed owner, address indexed operator, bool approved);\r\n\r\n    /**\r\n     * @dev Returns the number of tokens in ``owner``'s account.\r\n     */\r\n    function balanceOf(address owner) external view returns (uint256 balance);\r\n\r\n    /**\r\n     * @dev Returns the owner of the `tokenId` token.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - `tokenId` must exist.\r\n     */\r\n    function ownerOf(uint256 tokenId) external view returns (address owner);\r\n\r\n    /**\r\n     * @dev Safely transfers `tokenId` token from `from` to `to`, checking first that contract recipients\r\n     * are aware of the ERC721 protocol to prevent tokens from being forever locked.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - `from` cannot be the zero address.\r\n     * - `to` cannot be the zero address.\r\n     * - `tokenId` token must exist and be owned by `from`.\r\n     * - If the caller is not `from`, it must be have been allowed to move this token by either {approve} or {setApprovalForAll}.\r\n     * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer.\r\n     *\r\n     * Emits a {Transfer} event.\r\n     */\r\n    function safeTransferFrom(address from, address to, uint256 tokenId) external;\r\n\r\n    /**\r\n     * @dev Transfers `tokenId` token from `from` to `to`.\r\n     *\r\n     * WARNING: Usage of this method is discouraged, use {safeTransferFrom} whenever possible.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - `from` cannot be the zero address.\r\n     * - `to` cannot be the zero address.\r\n     * - `tokenId` token must be owned by `from`.\r\n     * - If the caller is not `from`, it must be approved to move this token by either {approve} or {setApprovalForAll}.\r\n     *\r\n     * Emits a {Transfer} event.\r\n     */\r\n    function transferFrom(address from, address to, uint256 tokenId) external;\r\n\r\n    /**\r\n     * @dev Gives permission to `to` to transfer `tokenId` token to another account.\r\n     * The approval is cleared when the token is transferred.\r\n     *\r\n     * Only a single account can be approved at a time, so approving the zero address clears previous approvals.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - The caller must own the token or be an approved operator.\r\n     * - `tokenId` must exist.\r\n     *\r\n     * Emits an {Approval} event.\r\n     */\r\n    function approve(address to, uint256 tokenId) external;\r\n\r\n    /**\r\n     * @dev Returns the account approved for `tokenId` token.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - `tokenId` must exist.\r\n     */\r\n    function getApproved(uint256 tokenId) external view returns (address operator);\r\n\r\n    /**\r\n     * @dev Approve or remove `operator` as an operator for the caller.\r\n     * Operators can call {transferFrom} or {safeTransferFrom} for any token owned by the caller.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - The `operator` cannot be the caller.\r\n     *\r\n     * Emits an {ApprovalForAll} event.\r\n     */\r\n    function setApprovalForAll(address operator, bool _approved) external;\r\n\r\n    /**\r\n     * @dev Returns if the `operator` is allowed to manage all of the assets of `owner`.\r\n     *\r\n     * See {setApprovalForAll}\r\n     */\r\n    function isApprovedForAll(address owner, address operator) external view returns (bool);\r\n\r\n    /**\r\n      * @dev Safely transfers `tokenId` token from `from` to `to`.\r\n      *\r\n      * Requirements:\r\n      *\r\n      * - `from` cannot be the zero address.\r\n      * - `to` cannot be the zero address.\r\n      * - `tokenId` token must exist and be owned by `from`.\r\n      * - If the caller is not `from`, it must be approved to move this token by either {approve} or {setApprovalForAll}.\r\n      * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer.\r\n      *\r\n      * Emits a {Transfer} event.\r\n      */\r\n    function safeTransferFrom(address from, address to, uint256 tokenId, bytes calldata data) external;\r\n}\r\n\r\n\r\n// File @openzeppelin/contracts/proxy/utils/Initializable.sol@v4.1.0\r\n\r\n\r\n\r\n// solhint-disable-next-line compiler-version\r\n\r\n\r\n/**\r\n * @dev This is a base contract to aid in writing upgradeable contracts, or any kind of contract that will be deployed\r\n * behind a proxy. Since a proxied contract can't have a constructor, it's common to move constructor logic to an\r\n * external initializer function, usually called `initialize`. It then becomes necessary to protect this initializer\r\n * function so it can only be called once. The {initializer} modifier provided by this contract will have this effect.\r\n *\r\n * TIP: To avoid leaving the proxy in an uninitialized state, the initializer function should be called as early as\r\n * possible by providing the encoded function call as the `_data` argument to {ERC1967Proxy-constructor}.\r\n *\r\n * CAUTION: When used with inheritance, manual care must be taken to not invoke a parent initializer twice, or to ensure\r\n * that all initializers are idempotent. This is not verified automatically as constructors are by Solidity.\r\n */\r\nabstract contract Initializable {\r\n\r\n    /**\r\n     * @dev Indicates that the contract has been initialized.\r\n     */\r\n    bool private _initialized;\r\n\r\n    /**\r\n     * @dev Indicates that the contract is in the process of being initialized.\r\n     */\r\n    bool private _initializing;\r\n\r\n    /**\r\n     * @dev Modifier to protect an initializer function from being invoked twice.\r\n     */\r\n    modifier initializer() {\r\n        require(_initializing || !_initialized, \"Initializable: contract is already initialized\");\r\n\r\n        bool isTopLevelCall = !_initializing;\r\n        if (isTopLevelCall) {\r\n            _initializing = true;\r\n            _initialized = true;\r\n        }\r\n\r\n        _;\r\n\r\n        if (isTopLevelCall) {\r\n            _initializing = false;\r\n        }\r\n    }\r\n}\r\n\r\n\r\n// File @openzeppelin/contracts/utils/cryptography/ECDSA.sol@v4.1.0\r\n\r\n\r\n\r\n\r\n\r\n/**\r\n * @dev Elliptic Curve Digital Signature Algorithm (ECDSA) operations.\r\n *\r\n * These functions can be used to verify that a message was signed by the holder\r\n * of the private keys of a given address.\r\n */\r\nlibrary ECDSA {\r\n    /**\r\n     * @dev Returns the address that signed a hashed message (`hash`) with\r\n     * `signature`. This address can then be used for verification purposes.\r\n     *\r\n     * The `ecrecover` EVM opcode allows for malleable (non-unique) signatures:\r\n     * this function rejects them by requiring the `s` value to be in the lower\r\n     * half order, and the `v` value to be either 27 or 28.\r\n     *\r\n     * IMPORTANT: `hash` _must_ be the result of a hash operation for the\r\n     * verification to be secure: it is possible to craft signatures that\r\n     * recover to arbitrary addresses for non-hashed data. A safe way to ensure\r\n     * this is by receiving a hash of the original message (which may otherwise\r\n     * be too long), and then calling {toEthSignedMessageHash} on it.\r\n     */\r\n    function recover(bytes32 hash, bytes memory signature) internal pure returns (address) {\r\n        // Divide the signature in r, s and v variables\r\n        bytes32 r;\r\n        bytes32 s;\r\n        uint8 v;\r\n\r\n        // Check the signature length\r\n        // - case 65: r,s,v signature (standard)\r\n        // - case 64: r,vs signature (cf https://eips.ethereum.org/EIPS/eip-2098) _Available since v4.1._\r\n        if (signature.length == 65) {\r\n            // ecrecover takes the signature parameters, and the only way to get them\r\n            // currently is to use assembly.\r\n            // solhint-disable-next-line no-inline-assembly\r\n            assembly {\r\n                r := mload(add(signature, 0x20))\r\n                s := mload(add(signature, 0x40))\r\n                v := byte(0, mload(add(signature, 0x60)))\r\n            }\r\n        } else if (signature.length == 64) {\r\n            // ecrecover takes the signature parameters, and the only way to get them\r\n            // currently is to use assembly.\r\n            // solhint-disable-next-line no-inline-assembly\r\n            assembly {\r\n                let vs := mload(add(signature, 0x40))\r\n                r := mload(add(signature, 0x20))\r\n                s := and(vs, 0x7fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff)\r\n                v := add(shr(255, vs), 27)\r\n            }\r\n        } else {\r\n            revert(\"ECDSA: invalid signature length\");\r\n        }\r\n\r\n        return recover(hash, v, r, s);\r\n    }\r\n\r\n    /**\r\n     * @dev Overload of {ECDSA-recover} that receives the `v`,\r\n     * `r` and `s` signature fields separately.\r\n     */\r\n    function recover(bytes32 hash, uint8 v, bytes32 r, bytes32 s) internal pure returns (address) {\r\n        // EIP-2 still allows signature malleability for ecrecover(). Remove this possibility and make the signature\r\n        // unique. Appendix F in the Ethereum Yellow paper (https://ethereum.github.io/yellowpaper/paper.pdf), defines\r\n        // the valid range for s in (281): 0 < s < secp256k1n ÷ 2 + 1, and for v in (282): v ∈ {27, 28}. Most\r\n        // signatures from current libraries generate a unique signature with an s-value in the lower half order.\r\n        //\r\n        // If your library generates malleable signatures, such as s-values in the upper range, calculate a new s-value\r\n        // with 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFEBAAEDCE6AF48A03BBFD25E8CD0364141 - s1 and flip v from 27 to 28 or\r\n        // vice versa. If your library also generates signatures with 0/1 for v instead 27/28, add 27 to v to accept\r\n        // these malleable signatures as well.\r\n        require(uint256(s) <= 0x7FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF5D576E7357A4501DDFE92F46681B20A0, \"ECDSA: invalid signature 's' value\");\r\n        require(v == 27 || v == 28, \"ECDSA: invalid signature 'v' value\");\r\n\r\n        // If the signature is valid (and not malleable), return the signer address\r\n        address signer = ecrecover(hash, v, r, s);\r\n        require(signer != address(0), \"ECDSA: invalid signature\");\r\n\r\n        return signer;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns an Ethereum Signed Message, created from a `hash`. This\r\n     * produces hash corresponding to the one signed with the\r\n     * https://eth.wiki/json-rpc/API#eth_sign[`eth_sign`]\r\n     * JSON-RPC method as part of EIP-191.\r\n     *\r\n     * See {recover}.\r\n     */\r\n    function toEthSignedMessageHash(bytes32 hash) internal pure returns (bytes32) {\r\n        // 32 is the length in bytes of hash,\r\n        // enforced by the type signature above\r\n        return keccak256(abi.encodePacked(\"\\x19Ethereum Signed Message:\\n32\", hash));\r\n    }\r\n\r\n    /**\r\n     * @dev Returns an Ethereum Signed Typed Data, created from a\r\n     * `domainSeparator` and a `structHash`. This produces hash corresponding\r\n     * to the one signed with the\r\n     * https://eips.ethereum.org/EIPS/eip-712[`eth_signTypedData`]\r\n     * JSON-RPC method as part of EIP-712.\r\n     *\r\n     * See {recover}.\r\n     */\r\n    function toTypedDataHash(bytes32 domainSeparator, bytes32 structHash) internal pure returns (bytes32) {\r\n        return keccak256(abi.encodePacked(\"\\x19\\x01\", domainSeparator, structHash));\r\n    }\r\n}\r\n\r\n\r\n// File contracts/redpacket_erc721.sol\r\n\r\n\r\n\r\n/**\r\n * @author          Mengjie Chen\r\n * @contact         mengjie_chen@mask.io\r\n * @author_time     07/16/2021\r\n * @maintainer      Mengjie Chen\r\n * @maintain_time   07/30/2021\r\n**/\r\n\r\npragma solidity >= 0.8.0;\r\n\r\n\r\n\r\ncontract HappyRedPacket_ERC721 is Initializable {\r\n\r\n    struct RedPacket {\r\n        address creator;\r\n        uint16 remaining_tokens;\r\n        address token_addr;\r\n        uint32 end_time;\r\n        mapping(address => uint256) claimed_list; \r\n        uint256[] erc721_list;\r\n        address public_key;\r\n        uint256 bit_status; //0 - available 1 - not available\r\n    }\r\n\r\n    event CreationSuccess (\r\n        uint256 total_tokens,\r\n        bytes32 indexed id,\r\n        string name,\r\n        string message,\r\n        address indexed creator,\r\n        uint256 creation_time,\r\n        address token_address,\r\n        uint256 packet_number,\r\n        uint256 duration,\r\n        uint256[] token_ids\r\n    );\r\n\r\n    event ClaimSuccess(\r\n        bytes32 indexed id,\r\n        address indexed claimer,\r\n        uint256 claimed_token_id,\r\n        address token_address\r\n    );\r\n\r\n    uint32 nonce;\r\n    mapping(bytes32 => RedPacket) redpacket_by_id;\r\n    bytes32 private seed;\r\n\r\n    function initialize() public initializer {\r\n        seed = keccak256(abi.encodePacked(\"Former NBA Commissioner David St\", block.timestamp, msg.sender));\r\n    }\r\n\r\n    // Remember to call check_ownership() before create_red_packet()\r\n    function check_ownership(uint256[] memory erc721_token_id_list, address token_addr) \r\n        external \r\n        view \r\n        returns(bool is_your_token)\r\n    {\r\n        is_your_token = true;\r\n        for (uint256 i= 0; i < erc721_token_id_list.length; i ++){\r\n            address owner = IERC721(token_addr).ownerOf(erc721_token_id_list[i]);\r\n            if (owner != msg.sender){\r\n                is_your_token = false;\r\n                break;\r\n            }\r\n        }\r\n        return is_your_token;\r\n    }\r\n\r\n\r\n    function create_red_packet (\r\n        address _public_key,\r\n        uint64 _duration,\r\n        bytes32 _seed,\r\n        string memory _message,\r\n        string memory _name,\r\n        address _token_addr,\r\n        uint256[] memory _erc721_token_ids\r\n    )\r\n        external\r\n    {\r\n        nonce ++;\r\n        require(_erc721_token_ids.length > 0, \"At least 1 recipient\");\r\n        require(_erc721_token_ids.length <= 256, \"At most 256 recipient\");\r\n        require(IERC721(_token_addr).isApprovedForAll(msg.sender, address(this)), \"No approved yet\");\r\n\r\n        bytes32 packet_id = keccak256(abi.encodePacked(msg.sender, block.timestamp, nonce, seed, _seed));\r\n        {\r\n            RedPacket storage rp = redpacket_by_id[packet_id];\r\n            rp.creator = msg.sender;\r\n            rp.remaining_tokens = uint16(_erc721_token_ids.length);\r\n            rp.token_addr = _token_addr;\r\n            rp.end_time = uint32(block.timestamp + _duration);\r\n            rp.erc721_list = _erc721_token_ids;\r\n            rp.public_key = _public_key;\r\n        }\r\n        {\r\n            uint256 number = _erc721_token_ids.length;\r\n            uint256 duration = _duration;\r\n            emit CreationSuccess (\r\n                _erc721_token_ids.length, \r\n                packet_id, \r\n                _name,\r\n                _message, \r\n                msg.sender, \r\n                block.timestamp, \r\n                _token_addr, \r\n                number, \r\n                duration, \r\n                _erc721_token_ids\r\n            );\r\n        }\r\n    }\r\n\r\n    function claim(bytes32 pkt_id, bytes memory signedMsg, address payable recipient)\r\n        external \r\n        returns (uint256 claimed)\r\n    {\r\n        RedPacket storage rp = redpacket_by_id[pkt_id];\r\n        uint256[] storage erc721_token_id_list = rp.erc721_list;\r\n        require(rp.end_time > block.timestamp, \"Expired\"); \r\n        require(_verify(signedMsg, rp.public_key), \"verification failed\");\r\n        uint16 remaining_tokens = rp.remaining_tokens;\r\n        require(remaining_tokens > 0, \"No available token remain\");\r\n\r\n        uint256 claimed_index;\r\n        uint256 claimed_token_id;\r\n        uint256 new_bit_status;\r\n        uint16 new_remaining_tokens;\r\n        (\r\n            claimed_index, \r\n            claimed_token_id,\r\n            new_bit_status, \r\n            new_remaining_tokens\r\n        ) = _get_token_index(\r\n            erc721_token_id_list, \r\n            remaining_tokens, \r\n            rp.token_addr, \r\n            rp.creator,\r\n            rp.bit_status\r\n        );\r\n\r\n        rp.bit_status  = new_bit_status | (1 << claimed_index);\r\n        rp.remaining_tokens = new_remaining_tokens - 1;\r\n\r\n        // Penalize greedy attackers by placing duplication check at the very last\r\n        require(rp.claimed_list[msg.sender] == 0, \"Already claimed\");\r\n        rp.claimed_list[msg.sender] = claimed_token_id;\r\n        address token_addr = rp.token_addr;\r\n        IERC721(token_addr).safeTransferFrom(rp.creator, recipient, claimed_token_id);\r\n\r\n        emit ClaimSuccess(pkt_id, address(recipient), claimed_token_id, token_addr);\r\n        return claimed_token_id;\r\n    }\r\n\r\n    function check_availability(bytes32 pkt_id) \r\n        external\r\n        view\r\n        returns (\r\n            address token_address,\r\n            uint16 balance, \r\n            uint256 total_pkts,\r\n            bool expired, \r\n            uint256 claimed_id,\r\n            uint256 bit_status\r\n        )\r\n    {\r\n        RedPacket storage rp = redpacket_by_id[pkt_id];\r\n        return (\r\n            rp.token_addr,\r\n            rp.remaining_tokens,\r\n            rp.erc721_list.length,\r\n            block.timestamp > rp.end_time,\r\n            rp.claimed_list[msg.sender],\r\n            rp.bit_status\r\n        );\r\n    }\r\n\r\n    function check_claimed_id(bytes32 id) \r\n        external \r\n        view \r\n        returns(uint256 claimed_token_id)\r\n    {\r\n        RedPacket storage rp = redpacket_by_id[id];\r\n        claimed_token_id = rp.claimed_list[msg.sender];\r\n        return(claimed_token_id);\r\n    }\r\n\r\n    function check_erc721_remain_ids(bytes32 id)\r\n        external \r\n        view returns(uint256 bit_status, uint256[] memory erc721_token_ids)\r\n    {\r\n        RedPacket storage rp = redpacket_by_id[id];\r\n        erc721_token_ids = rp.erc721_list;\r\n        // use bit_status to get remained token id in erc_721_token_ids\r\n        return(rp.bit_status, erc721_token_ids);\r\n    }\r\n\r\n//------------------------------------------------------------------\r\n    // as a workaround for \"CompilerError: Stack too deep, try removing local variables\"\r\n    function _verify(bytes memory signedMsg, address public_key) private view returns (bool verified) {\r\n        bytes memory prefix = \"\\x19Ethereum Signed Message:\\n20\";\r\n        bytes32 prefixedHash = keccak256(abi.encodePacked(prefix, msg.sender));\r\n        address calculated_public_key = ECDSA.recover(prefixedHash, signedMsg);\r\n        return (calculated_public_key == public_key);\r\n    }\r\n\r\n    function _get_token_index(\r\n        uint256[] storage erc721_token_id_list,\r\n        uint16 remaining_tokens,\r\n        address token_addr,\r\n        address creator,\r\n        uint256 bit_status\r\n    )\r\n        private\r\n        view\r\n        returns(\r\n            uint256 index,\r\n            uint256 claimed_token_id,\r\n            uint256 new_bit_status,\r\n            uint16 new_remaining_tokens\r\n        )\r\n    {\r\n        uint256 claimed_index = random(seed, nonce) % (remaining_tokens);\r\n        uint16 real_index = _get_exact_index(bit_status, claimed_index);\r\n        claimed_token_id = erc721_token_id_list[real_index];\r\n        if(IERC721(token_addr).ownerOf(claimed_token_id) != creator){\r\n            for (uint16 i = 0; i < erc721_token_id_list.length; i++) {\r\n                if ((bit_status & (1 << i)) != 0) {\r\n                    continue;\r\n                }\r\n                if (IERC721(token_addr).ownerOf(erc721_token_id_list[i]) != creator) {\r\n                    // update bit map\r\n                    bit_status = bit_status | (1 << i);\r\n                    remaining_tokens--;\r\n                    require(remaining_tokens > 0, \"No available token remain\");\r\n                    continue;\r\n                }else{\r\n                    claimed_token_id = erc721_token_id_list[i];\r\n                    real_index = i;\r\n                    break;\r\n                }\r\n            }\r\n        }\r\n        return(real_index, claimed_token_id, bit_status, remaining_tokens);\r\n    }\r\n\r\n    function _get_exact_index(uint256 bit_status, uint256 claimed_index) \r\n        private \r\n        pure \r\n        returns (uint16 real_index)\r\n    {\r\n        uint16 real_count = 0;\r\n        uint16 count = uint16(claimed_index + 1);\r\n        while (count > 0){\r\n            if ((bit_status & 1) == 0){\r\n                count --;\r\n            }\r\n            real_count ++;\r\n            bit_status = bit_status >> 1;  \r\n        }\r\n        \r\n        return real_count - 1;\r\n    }\r\n\r\n    // A boring wrapper\r\n    function random(bytes32 _seed, uint32 nonce_rand) internal view returns (uint256 rand) {\r\n        return uint256(keccak256(abi.encodePacked(nonce_rand, msg.sender, _seed, block.timestamp))) + 1 ;\r\n    }\r\n}","ABI":"[{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"id\",\"type\":\"bytes32\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"claimer\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"claimed_token_id\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"token_address\",\"type\":\"address\"}],\"name\":\"ClaimSuccess\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"total_tokens\",\"type\":\"uint256\"},{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"id\",\"type\":\"bytes32\"},{\"indexed\":false,\"internalType\":\"string\",\"name\":\"name\",\"type\":\"string\"},{\"indexed\":false,\"internalType\":\"string\",\"name\":\"message\",\"type\":\"string\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"creator\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"creation_time\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"token_address\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"packet_number\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"duration\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256[]\",\"name\":\"token_ids\",\"type\":\"uint256[]\"}],\"name\":\"CreationSuccess\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"pkt_id\",\"type\":\"bytes32\"}],\"name\":\"check_availability\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"token_address\",\"type\":\"address\"},{\"internalType\":\"uint16\",\"name\":\"balance\",\"type\":\"uint16\"},{\"internalType\":\"uint256\",\"name\":\"total_pkts\",\"type\":\"uint256\"},{\"internalType\":\"bool\",\"name\":\"expired\",\"type\":\"bool\"},{\"internalType\":\"uint256\",\"name\":\"claimed_id\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"bit_status\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"id\",\"type\":\"bytes32\"}],\"name\":\"check_claimed_id\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"claimed_token_id\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"id\",\"type\":\"bytes32\"}],\"name\":\"check_erc721_remain_ids\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"bit_status\",\"type\":\"uint256\"},{\"internalType\":\"uint256[]\",\"name\":\"erc721_token_ids\",\"type\":\"uint256[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256[]\",\"name\":\"erc721_token_id_list\",\"type\":\"uint256[]\"},{\"internalType\":\"address\",\"name\":\"token_addr\",\"type\":\"address\"}],\"name\":\"check_ownership\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"is_your_token\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"pkt_id\",\"type\":\"bytes32\"},{\"internalType\":\"bytes\",\"name\":\"signedMsg\",\"type\":\"bytes\"},{\"internalType\":\"address payable\",\"name\":\"recipient\",\"type\":\"address\"}],\"name\":\"claim\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"claimed\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_public_key\",\"type\":\"address\"},{\"internalType\":\"uint64\",\"name\":\"_duration\",\"type\":\"uint64\"},{\"internalType\":\"bytes32\",\"name\":\"_seed\",\"type\":\"bytes32\"},{\"internalType\":\"string\",\"name\":\"_message\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"_name\",\"type\":\"string\"},{\"internalType\":\"address\",\"name\":\"_token_addr\",\"type\":\"address\"},{\"internalType\":\"uint256[]\",\"name\":\"_erc721_token_ids\",\"type\":\"uint256[]\"}],\"name\":\"create_red_packet\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"initialize\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}]","ContractName":"HappyRedPacket_ERC721","CompilerVersion":"v0.8.0+commit.c7dfd78e","OptimizationUsed":"1","Runs":"200","ConstructorArguments":"","EVMVersion":"Default","Library":"","LicenseType":"MIT","Proxy":"0","Implementation":"","SwarmSource":"ipfs://926af1f5614f5e15166888060e08b6e0a967a43f796fe012cbe5cd6f51e494df"}]}