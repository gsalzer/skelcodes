{"status":"1","message":"OK","result":[{"SourceCode":"{{\r\n  \"language\": \"Solidity\",\r\n  \"sources\": {\r\n    \"contracts/Wallets/WalletTokensalePublic.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\npragma solidity ^0.6.12;\\n\\nimport \\\"openzeppelin-solidity/contracts/access/AccessControl.sol\\\";\\nimport \\\"openzeppelin-solidity/contracts/math/SafeMath.sol\\\";\\nimport \\\"openzeppelin-solidity/contracts/utils/ReentrancyGuard.sol\\\";\\nimport \\\"openzeppelin-solidity/contracts/token/ERC20/SafeERC20.sol\\\";\\nimport \\\"openzeppelin-solidity/contracts/token/ERC20/ERC20.sol\\\";\\nimport \\\"openzeppelin-solidity/contracts/cryptography/ECDSA.sol\\\";\\nimport {vcUSDPool} from \\\"contracts/Pool/vcUSDPool.sol\\\";\\n\\ncontract WalletTokensalePublic is AccessControl, ReentrancyGuard {\\n    using SafeMath for uint256;\\n    using SafeERC20 for ERC20;\\n\\n    bytes32 public constant ADMIN_ROLE = keccak256(\\\"ADMIN_ROLE\\\");\\n    bytes32 public constant SERVICE_ROLE = keccak256(\\\"SERVICE_ROLE\\\");\\n\\n    uint256 public constant AMOUNT_USD = 500000000;\\n\\n    uint256 public totalAmount;\\n    uint256 public totalSold;\\n\\n    uint256 public maxAmountToBuy;\\n\\n    /// @dev address of main token\\n    address public govTokenAddress;\\n    address public USDTAddress;\\n    uint256 public factor = 10**12;\\n    uint256 public USDTReceived;\\n    uint256 public USDTClaimed;\\n\\n    /// @dev for example: 100000 = 0.01 USD\\n    uint256 public rate;\\n    uint256 public ratesPrecision = 10**7;\\n\\n    address public vcUSDPoolAddress;\\n\\n    uint256 currentLockNumber = 0;\\n    /// @dev true = swap unlocked, false = swap locked\\n    bool public swapUnlocked = true;\\n\\n    /// @dev true = claim unlocked, false = locked\\n    bool public claimUnlocked = false;\\n    /// @dev struct of lock tokens\\n    struct Lock {\\n        uint256 unlockDate;\\n        uint256 percent;\\n    }\\n    /// @dev array of locks tokens\\n    Lock[] public locks;\\n\\n    struct UserInfo {\\n        uint256 amount;\\n        uint256 claimed;\\n    }\\n\\n    mapping(address => UserInfo) public users;\\n\\n    mapping(bytes32 => bool) hashes;\\n    uint256 public swapsCount;\\n\\n    event TokenExchanged(\\n        address indexed spender,\\n        uint256 usdAmount,\\n        uint256 daovcAmount,\\n        uint256 time,\\n        string userId\\n    );\\n    event TokenExchangedFiat(\\n        address indexed spender,\\n        uint256 amount,\\n        uint256 daovcAmount,\\n        uint256 time\\n    );\\n    event TokensClaimed(\\n        address indexed claimer,\\n        uint256 amountClaimed,\\n        uint256 time\\n    );\\n\\n    event RoundStateChanged(bool state, uint256 time);\\n\\n    modifier roundUnlocked() {\\n        require(swapUnlocked, \\\"Round is locked!\\\");\\n        _;\\n    }\\n\\n    modifier claimUnlockedModifier() {\\n        require(claimUnlocked, \\\"Round is locked!\\\");\\n        _;\\n    }\\n\\n    /**\\n     * @dev Constructor of Wallet\\n     * @param _govTokenAddress address of main token\\n     * @param _USDTAddress address of USDT token\\n     * @param _rate rate value\\n     * @param _totalAmount total amount of tokens\\n     * @param _maxAmountToBuy max amount ot buy in usdt\\n     * @param _vcUSDPoolAddress vc usd pool address\\n     * @param _usdtReceived initial value of received usdt\\n     * @param _usdtClaimed initial value of claimed usdt\\n     */\\n    constructor(\\n        address _govTokenAddress,\\n        address _USDTAddress,\\n        uint256 _rate,\\n        uint256 _totalAmount,\\n        uint256 _maxAmountToBuy,\\n        address _vcUSDPoolAddress,\\n        uint256 _usdtReceived,\\n        uint256 _usdtClaimed\\n    ) public {\\n        _setupRole(DEFAULT_ADMIN_ROLE, msg.sender);\\n        _setupRole(ADMIN_ROLE, msg.sender);\\n\\n        govTokenAddress = _govTokenAddress;\\n        USDTAddress = _USDTAddress;\\n        rate = _rate;\\n        totalAmount = _totalAmount;\\n        maxAmountToBuy = _maxAmountToBuy;\\n        vcUSDPoolAddress = _vcUSDPoolAddress;\\n        USDTClaimed = _usdtClaimed;\\n        USDTReceived = _usdtReceived;\\n    }\\n\\n    /**\\n     * @dev set round state\\n     * @param _state state of round\\n     */\\n    function setRoundState(bool _state) external {\\n        require(hasRole(ADMIN_ROLE, msg.sender), \\\"Caller is not an admin\\\");\\n        swapUnlocked = _state;\\n        emit RoundStateChanged(_state, block.timestamp);\\n    }\\n\\n    /**\\n     * @dev add the token to Lock pull\\n     * @param _unlockDate date of token unlock\\n     * @param _percent percent of unlocked token\\n     */\\n    function addLock(uint256[] memory _unlockDate, uint256[] memory _percent)\\n        external\\n    {\\n        require(hasRole(ADMIN_ROLE, msg.sender), \\\"Caller is not an admin\\\");\\n        require(\\n            _unlockDate.length == _percent.length,\\n            \\\"unlockDate array and percent arrays must have same values\\\"\\n        );\\n\\n        for (uint256 i = 0; i < _unlockDate.length; i++) {\\n            locks.push(\\n                Lock({percent: _percent[i], unlockDate: _unlockDate[i]})\\n            );\\n        }\\n    }\\n\\n    /**\\n     * @dev swap usdt to daoVC gov token\\n     * @param hashedMessage hash of transaction data\\n     * @param _sequence transaction number\\n     * @param _v v of hash signature\\n     * @param _r r of hash signature\\n     * @param _s s of hash signature\\n     */\\n    function swap(\\n        bytes32 hashedMessage,\\n        string memory _userId,\\n        uint256 _sequence,\\n        uint8 _v,\\n        bytes32 _r,\\n        bytes32 _s\\n    ) external roundUnlocked {\\n        address service = ECDSA.recover(hashedMessage, _v, _r, _s);\\n        require(hasRole(SERVICE_ROLE, service), \\\"Signed not by a service\\\");\\n\\n        bytes32 message = ECDSA.toEthSignedMessageHash(\\n            keccak256(abi.encodePacked(_userId, _sequence))\\n        );\\n\\n        require(hashedMessage == message, \\\"Incorrect hashed message\\\");\\n        require(\\n            !hashes[message],\\n            \\\"Sequence amount already claimed or dublicated\\\"\\n        );\\n        hashes[message] = true;\\n        swapsCount++;\\n\\n        UserInfo storage user = users[msg.sender];\\n\\n        uint256 amountInGov = AMOUNT_USD.mul(factor).mul(ratesPrecision).div(\\n            rate\\n        );\\n        require(\\n            user.amount.add(amountInGov) <= maxAmountToBuy,\\n            \\\"You cannot swap more tokens\\\"\\n        );\\n\\n        require(\\n            totalSold.add(amountInGov) <= totalAmount,\\n            \\\"All tokens was sold\\\"\\n        );\\n\\n        ERC20(USDTAddress).safeTransferFrom(\\n            msg.sender,\\n            address(this),\\n            AMOUNT_USD\\n        );\\n\\n        USDTReceived = USDTReceived.add(AMOUNT_USD);\\n        user.amount = user.amount.add(amountInGov);\\n        totalSold = totalSold.add(amountInGov);\\n\\n        emit TokenExchanged(\\n            msg.sender,\\n            AMOUNT_USD,\\n            amountInGov,\\n            block.timestamp,\\n            _userId\\n        );\\n    }\\n\\n    /**\\n     * @dev swap fiat to daoVC gov token\\n     * @param _user  user's address\\n     */\\n    function swapBackend(address _user) external roundUnlocked {\\n        require(\\n            hasRole(SERVICE_ROLE, msg.sender),\\n            \\\"Caller does not have the service role\\\"\\n        );\\n        UserInfo storage user = users[_user];\\n\\n        uint256 amountInGov = AMOUNT_USD.mul(factor).mul(ratesPrecision).div(\\n            rate\\n        );\\n        require(\\n            user.amount.add(amountInGov) <= maxAmountToBuy,\\n            \\\"You cannot swap more tokens\\\"\\n        );\\n\\n        require(\\n            totalSold.add(amountInGov) <= totalAmount,\\n            \\\"All tokens was sold\\\"\\n        );\\n\\n        swapsCount++;\\n        USDTReceived = USDTReceived.add(AMOUNT_USD);\\n        user.amount = user.amount.add(amountInGov);\\n        totalSold = totalSold.add(amountInGov);\\n        emit TokenExchangedFiat(_user, AMOUNT_USD, amountInGov, block.timestamp);\\n    }\\n\\n    /**\\n     * @dev user claim's his availeble tokens\\n     */\\n    function claim() external nonReentrant claimUnlockedModifier {\\n        UserInfo storage user = users[msg.sender];\\n        require(user.amount > 0, \\\"Nothing to claim\\\");\\n        uint256 newLock = currentLockNumber;\\n        if (newLock <= locks.length - 2) {\\n            while (block.timestamp >= locks[newLock + 1].unlockDate) {\\n                newLock = newLock + 1;\\n                if (newLock == locks.length - 1) {\\n                    break;\\n                }\\n            }\\n            currentLockNumber = newLock;\\n        }\\n\\n        uint256 availableAmount = calcAvailableAmount(msg.sender);\\n\\n        require(availableAmount > 0, \\\"There are not available tokens to claim\\\");\\n        user.claimed = user.claimed.add(availableAmount);\\n        ERC20(govTokenAddress).safeTransfer(msg.sender, availableAmount);\\n        emit TokensClaimed(msg.sender, availableAmount, block.timestamp);\\n    }\\n\\n    /**\\n     * @dev send USDT to vc usd pool\\n     */\\n    function sendUsdtToPool(uint256 _amount) external {\\n        require(\\n            hasRole(SERVICE_ROLE, msg.sender),\\n            \\\"Caller does not have the service role\\\"\\n        );\\n\\n        ERC20(USDTAddress).safeTransfer(vcUSDPoolAddress, _amount);\\n        USDTClaimed = USDTClaimed.add(_amount);\\n\\n        vcUSDPool(vcUSDPoolAddress).sellVcUsdBackend(_amount);\\n    }\\n\\n    /**\\n     * @dev Caluclate available amount of tokens for user\\n     *  @param _user - address of user\\n     */\\n    function calcAvailableAmount(address _user)\\n        private\\n        view\\n        returns (uint256 availableToken)\\n    {\\n        UserInfo storage user = users[_user];\\n\\n        availableToken = (\\n            user.amount.mul(locks[currentLockNumber].percent).div(100)\\n        );\\n\\n        if (availableToken >= user.claimed) {\\n            availableToken = availableToken.sub(user.claimed);\\n        } else {\\n            availableToken = 0;\\n        }\\n\\n        return availableToken;\\n    }\\n\\n    /**\\n     * @dev get user info\\n     * @param _user address of user\\n     */\\n    function getUserInfo(address _user)\\n        external\\n        view\\n        returns (\\n            uint256 amount_,\\n            uint256 available_,\\n            uint256 claimed_,\\n            uint256 currentLockTime_\\n        )\\n    {\\n        UserInfo storage user = users[_user];\\n\\n        uint256 newLock = currentLockNumber;\\n        if (newLock <= locks.length - 2) {\\n            while (block.timestamp >= locks[newLock + 1].unlockDate) {\\n                newLock = newLock + 1;\\n                if (newLock == locks.length - 1) {\\n                    break;\\n                }\\n            }\\n        }\\n        amount_ = user.amount;\\n        claimed_ = user.claimed;\\n        available_ = (user.amount.mul(locks[newLock].percent).div(100));\\n\\n        if (available_ >= user.claimed) {\\n            available_ = available_.sub(user.claimed);\\n        } else {\\n            available_ = 0;\\n        }\\n\\n        if (newLock == locks.length - 1) {\\n            currentLockTime_ = locks[newLock].unlockDate;\\n        } else {\\n            currentLockTime_ = locks[newLock + 1].unlockDate;\\n        }\\n\\n        return (amount_, available_, claimed_, currentLockTime_);\\n    }\\n\\n    /**\\n     * @dev get state of round\\n     */\\n    function getRoundState() external view returns (bool) {\\n        return swapUnlocked;\\n    }\\n\\n    /**\\n     * @dev remove tokens from pool\\n     * @param _recepient address of recipient\\n     * @param _amount amount of tokens\\n     * @param tokenAddress address of token\\n     */\\n    function removeToken(\\n        address _recepient,\\n        uint256 _amount,\\n        address tokenAddress\\n    ) external {\\n        require(hasRole(ADMIN_ROLE, msg.sender), \\\"Caller is not an admin\\\");\\n\\n        ERC20(tokenAddress).safeTransfer(_recepient, _amount);\\n    }\\n\\n    /**\\n     * @dev update lock data\\n     * @param _index index of lock data\\n     * @param _percent percent value\\n     * @param _unlockDate date of unlock\\n     */\\n    function updateLock(\\n        uint256 _index,\\n        uint256 _percent,\\n        uint256 _unlockDate\\n    ) external {\\n        require(hasRole(ADMIN_ROLE, msg.sender), \\\"Caller is not an admin\\\");\\n        locks[_index].percent = _percent;\\n        locks[_index].unlockDate = _unlockDate;\\n    }\\n\\n    /**\\n     * @dev update user info\\n     * @param _user address of user\\n     * @param _amount amount of tokens\\n     * @param _claimed amount of claimed tokens\\n     */\\n    function updateUserInfo(\\n        address _user,\\n        uint256 _amount,\\n        uint256 _claimed\\n    ) external {\\n        require(hasRole(ADMIN_ROLE, msg.sender), \\\"Caller is not an admin\\\");\\n        UserInfo storage user = users[_user];\\n        user.amount = _amount;\\n        user.claimed = _claimed;\\n    }\\n\\n    /**\\n     * @dev set address of token\\n     * @param _govTokenAddress address of gov token\\n     */\\n    function updateTokenAddress(address _govTokenAddress) external {\\n        require(hasRole(ADMIN_ROLE, msg.sender), \\\"Caller is not an admin\\\");\\n        govTokenAddress = _govTokenAddress;\\n    }\\n\\n    /** @dev claim usdt from this contract\\n     *  @param _usdtReceiver address, who gets USDT tokens\\n     */\\n    function claimUSDT(address _usdtReceiver) external {\\n        require(hasRole(ADMIN_ROLE, msg.sender), \\\"Caller is not an admin\\\");\\n        require(USDTReceived > 0, \\\"Not enough USDT to claim\\\");\\n        ERC20(USDTAddress).safeTransfer(\\n            _usdtReceiver,\\n            USDTReceived.sub(USDTClaimed)\\n        );\\n        USDTClaimed = USDTClaimed.add(USDTReceived.sub(USDTClaimed));\\n    }\\n\\n    /**\\n     * @dev\\n     */\\n    function getInfoAboutUsdt()\\n        external\\n        view\\n        returns (uint256 USDTReceived_, uint256 USDTClaimed_)\\n    {\\n        USDTReceived_ = USDTReceived;\\n        USDTClaimed_ = USDTClaimed;\\n        return (USDTReceived_, USDTClaimed_);\\n    }\\n\\n    /**\\n     * @dev returns current rate for contract\\n     */\\n    function getRate() external view returns (uint256) {\\n        return rate;\\n    }\\n\\n    /**\\n     * @dev update rates\\n     * @param _rate rate, for example: 400000 = 0.04$\\n     */\\n    function updateRate(uint256 _rate) public {\\n        require(hasRole(ADMIN_ROLE, msg.sender), \\\"Caller is not an admin\\\");\\n        rate = _rate;\\n    }\\n\\n    /**\\n     * @dev update vc usd pool address\\n     * @param _vcUSDPoolAddress address of vc usd pool\\n     */\\n    function updateVcUsdPoolAddress(address _vcUSDPoolAddress) external {\\n        require(hasRole(ADMIN_ROLE, msg.sender), \\\"Caller is not an admin\\\");\\n        vcUSDPoolAddress = _vcUSDPoolAddress;\\n    }\\n\\n    /**\\n     * @dev update maximum amount to buy\\n     * @param _maxAmountToBuy maximum amount value\\n     */\\n    function updateMaximum(uint256 _maxAmountToBuy) external {\\n        require(hasRole(ADMIN_ROLE, msg.sender), \\\"Caller is not an admin\\\");\\n        maxAmountToBuy = _maxAmountToBuy;\\n    }\\n\\n    /**\\n     * @dev update current lock number\\n     * @param _newCurrentLock new lock number\\n     */\\n    function updateCurrentLockNumber(uint256 _newCurrentLock) external {\\n        require(hasRole(ADMIN_ROLE, msg.sender), \\\"Caller is not an admin\\\");\\n        currentLockNumber = _newCurrentLock;\\n    }\\n\\n    /**\\n     * @dev add users with info\\n     * @param _users users addresses array\\n     * @param _amounts amounts array\\n     * @param _claimed claimed amount array\\n     */\\n    function migrateUsers(\\n        address[] memory _users,\\n        uint256[] memory _amounts,\\n        uint256[] memory _claimed\\n    ) external {\\n        require(hasRole(ADMIN_ROLE, msg.sender), \\\"Caller is not an admin\\\");\\n        require(\\n            _users.length == _amounts.length,\\n            \\\"Array users and amounts must be the same length\\\"\\n        );\\n        require(\\n            _users.length == _claimed.length,\\n            \\\"Array users and claimed must be the same length\\\"\\n        );\\n\\n        for (uint256 i = 0; i < _users.length; i++) {\\n            UserInfo storage user = users[_users[i]];\\n            user.amount = _amounts[i];\\n            user.claimed = _claimed[i];\\n        }\\n    }\\n\\n    /**\\n     * @dev set state of claim\\n     * @param _state state of claim\\n     */\\n    function setClaimState(bool _state) external {\\n        require(hasRole(ADMIN_ROLE, msg.sender), \\\"Caller is not an admin\\\");\\n        claimUnlocked = _state;\\n    }\\n\\n    /**\\n     * @dev set total amount of reward tokens\\n     * @param _totalAmount total amount value\\n     */\\n    function updateTotalAmount(uint256 _totalAmount) external {\\n        require(hasRole(ADMIN_ROLE, msg.sender), \\\"Caller is not an admin\\\");\\n        totalAmount = _totalAmount;\\n    }\\n\\n    /**\\n     * @dev set total sold\\n     * @param _totalSold total sold amount\\n     */\\n    function updateTotalSold(uint256 _totalSold) external {\\n        require(hasRole(ADMIN_ROLE, msg.sender), \\\"Caller is not an admin\\\");\\n        totalSold = _totalSold;\\n    }\\n\\n    /**\\n     * @dev set factor\\n     * @param _factor factor value\\n     */\\n    function updateFactor(uint256 _factor) external {\\n        require(hasRole(ADMIN_ROLE, msg.sender), \\\"Caller is not an admin\\\");\\n        factor = _factor;\\n    }\\n\\n    /**\\n     * @dev set value of received USDT\\n     * @param _usdtReceived received USDT amount\\n     */\\n    function updateUSDTReceived(uint256 _usdtReceived) external {\\n        require(hasRole(ADMIN_ROLE, msg.sender), \\\"Caller is not an admin\\\");\\n        USDTReceived = _usdtReceived;\\n    }\\n\\n    /**\\n     * @dev set value of claimed USDT\\n     * @param _usdtClaimed claimed USDT amount\\n     */\\n    function updateUSDTClaimed(uint256 _usdtClaimed) external {\\n        require(hasRole(ADMIN_ROLE, msg.sender), \\\"Caller is not an admin\\\");\\n        USDTClaimed = _usdtClaimed;\\n    }\\n}\\n\"\r\n    },\r\n    \"openzeppelin-solidity/contracts/access/AccessControl.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity >=0.6.0 <0.8.0;\\n\\nimport \\\"../utils/EnumerableSet.sol\\\";\\nimport \\\"../utils/Address.sol\\\";\\nimport \\\"../utils/Context.sol\\\";\\n\\n/**\\n * @dev Contract module that allows children to implement role-based access\\n * control mechanisms.\\n *\\n * Roles are referred to by their `bytes32` identifier. These should be exposed\\n * in the external API and be unique. The best way to achieve this is by\\n * using `public constant` hash digests:\\n *\\n * ```\\n * bytes32 public constant MY_ROLE = keccak256(\\\"MY_ROLE\\\");\\n * ```\\n *\\n * Roles can be used to represent a set of permissions. To restrict access to a\\n * function call, use {hasRole}:\\n *\\n * ```\\n * function foo() public {\\n *     require(hasRole(MY_ROLE, msg.sender));\\n *     ...\\n * }\\n * ```\\n *\\n * Roles can be granted and revoked dynamically via the {grantRole} and\\n * {revokeRole} functions. Each role has an associated admin role, and only\\n * accounts that have a role's admin role can call {grantRole} and {revokeRole}.\\n *\\n * By default, the admin role for all roles is `DEFAULT_ADMIN_ROLE`, which means\\n * that only accounts with this role will be able to grant or revoke other\\n * roles. More complex role relationships can be created by using\\n * {_setRoleAdmin}.\\n *\\n * WARNING: The `DEFAULT_ADMIN_ROLE` is also its own admin: it has permission to\\n * grant and revoke this role. Extra precautions should be taken to secure\\n * accounts that have been granted it.\\n */\\nabstract contract AccessControl is Context {\\n    using EnumerableSet for EnumerableSet.AddressSet;\\n    using Address for address;\\n\\n    struct RoleData {\\n        EnumerableSet.AddressSet members;\\n        bytes32 adminRole;\\n    }\\n\\n    mapping (bytes32 => RoleData) private _roles;\\n\\n    bytes32 public constant DEFAULT_ADMIN_ROLE = 0x00;\\n\\n    /**\\n     * @dev Emitted when `newAdminRole` is set as ``role``'s admin role, replacing `previousAdminRole`\\n     *\\n     * `DEFAULT_ADMIN_ROLE` is the starting admin for all roles, despite\\n     * {RoleAdminChanged} not being emitted signaling this.\\n     *\\n     * _Available since v3.1._\\n     */\\n    event RoleAdminChanged(bytes32 indexed role, bytes32 indexed previousAdminRole, bytes32 indexed newAdminRole);\\n\\n    /**\\n     * @dev Emitted when `account` is granted `role`.\\n     *\\n     * `sender` is the account that originated the contract call, an admin role\\n     * bearer except when using {_setupRole}.\\n     */\\n    event RoleGranted(bytes32 indexed role, address indexed account, address indexed sender);\\n\\n    /**\\n     * @dev Emitted when `account` is revoked `role`.\\n     *\\n     * `sender` is the account that originated the contract call:\\n     *   - if using `revokeRole`, it is the admin role bearer\\n     *   - if using `renounceRole`, it is the role bearer (i.e. `account`)\\n     */\\n    event RoleRevoked(bytes32 indexed role, address indexed account, address indexed sender);\\n\\n    /**\\n     * @dev Returns `true` if `account` has been granted `role`.\\n     */\\n    function hasRole(bytes32 role, address account) public view returns (bool) {\\n        return _roles[role].members.contains(account);\\n    }\\n\\n    /**\\n     * @dev Returns the number of accounts that have `role`. Can be used\\n     * together with {getRoleMember} to enumerate all bearers of a role.\\n     */\\n    function getRoleMemberCount(bytes32 role) public view returns (uint256) {\\n        return _roles[role].members.length();\\n    }\\n\\n    /**\\n     * @dev Returns one of the accounts that have `role`. `index` must be a\\n     * value between 0 and {getRoleMemberCount}, non-inclusive.\\n     *\\n     * Role bearers are not sorted in any particular way, and their ordering may\\n     * change at any point.\\n     *\\n     * WARNING: When using {getRoleMember} and {getRoleMemberCount}, make sure\\n     * you perform all queries on the same block. See the following\\n     * https://forum.openzeppelin.com/t/iterating-over-elements-on-enumerableset-in-openzeppelin-contracts/2296[forum post]\\n     * for more information.\\n     */\\n    function getRoleMember(bytes32 role, uint256 index) public view returns (address) {\\n        return _roles[role].members.at(index);\\n    }\\n\\n    /**\\n     * @dev Returns the admin role that controls `role`. See {grantRole} and\\n     * {revokeRole}.\\n     *\\n     * To change a role's admin, use {_setRoleAdmin}.\\n     */\\n    function getRoleAdmin(bytes32 role) public view returns (bytes32) {\\n        return _roles[role].adminRole;\\n    }\\n\\n    /**\\n     * @dev Grants `role` to `account`.\\n     *\\n     * If `account` had not been already granted `role`, emits a {RoleGranted}\\n     * event.\\n     *\\n     * Requirements:\\n     *\\n     * - the caller must have ``role``'s admin role.\\n     */\\n    function grantRole(bytes32 role, address account) public virtual {\\n        require(hasRole(_roles[role].adminRole, _msgSender()), \\\"AccessControl: sender must be an admin to grant\\\");\\n\\n        _grantRole(role, account);\\n    }\\n\\n    /**\\n     * @dev Revokes `role` from `account`.\\n     *\\n     * If `account` had been granted `role`, emits a {RoleRevoked} event.\\n     *\\n     * Requirements:\\n     *\\n     * - the caller must have ``role``'s admin role.\\n     */\\n    function revokeRole(bytes32 role, address account) public virtual {\\n        require(hasRole(_roles[role].adminRole, _msgSender()), \\\"AccessControl: sender must be an admin to revoke\\\");\\n\\n        _revokeRole(role, account);\\n    }\\n\\n    /**\\n     * @dev Revokes `role` from the calling account.\\n     *\\n     * Roles are often managed via {grantRole} and {revokeRole}: this function's\\n     * purpose is to provide a mechanism for accounts to lose their privileges\\n     * if they are compromised (such as when a trusted device is misplaced).\\n     *\\n     * If the calling account had been granted `role`, emits a {RoleRevoked}\\n     * event.\\n     *\\n     * Requirements:\\n     *\\n     * - the caller must be `account`.\\n     */\\n    function renounceRole(bytes32 role, address account) public virtual {\\n        require(account == _msgSender(), \\\"AccessControl: can only renounce roles for self\\\");\\n\\n        _revokeRole(role, account);\\n    }\\n\\n    /**\\n     * @dev Grants `role` to `account`.\\n     *\\n     * If `account` had not been already granted `role`, emits a {RoleGranted}\\n     * event. Note that unlike {grantRole}, this function doesn't perform any\\n     * checks on the calling account.\\n     *\\n     * [WARNING]\\n     * ====\\n     * This function should only be called from the constructor when setting\\n     * up the initial roles for the system.\\n     *\\n     * Using this function in any other way is effectively circumventing the admin\\n     * system imposed by {AccessControl}.\\n     * ====\\n     */\\n    function _setupRole(bytes32 role, address account) internal virtual {\\n        _grantRole(role, account);\\n    }\\n\\n    /**\\n     * @dev Sets `adminRole` as ``role``'s admin role.\\n     *\\n     * Emits a {RoleAdminChanged} event.\\n     */\\n    function _setRoleAdmin(bytes32 role, bytes32 adminRole) internal virtual {\\n        emit RoleAdminChanged(role, _roles[role].adminRole, adminRole);\\n        _roles[role].adminRole = adminRole;\\n    }\\n\\n    function _grantRole(bytes32 role, address account) private {\\n        if (_roles[role].members.add(account)) {\\n            emit RoleGranted(role, account, _msgSender());\\n        }\\n    }\\n\\n    function _revokeRole(bytes32 role, address account) private {\\n        if (_roles[role].members.remove(account)) {\\n            emit RoleRevoked(role, account, _msgSender());\\n        }\\n    }\\n}\\n\"\r\n    },\r\n    \"openzeppelin-solidity/contracts/math/SafeMath.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity >=0.6.0 <0.8.0;\\n\\n/**\\n * @dev Wrappers over Solidity's arithmetic operations with added overflow\\n * checks.\\n *\\n * Arithmetic operations in Solidity wrap on overflow. This can easily result\\n * in bugs, because programmers usually assume that an overflow raises an\\n * error, which is the standard behavior in high level programming languages.\\n * `SafeMath` restores this intuition by reverting the transaction when an\\n * operation overflows.\\n *\\n * Using this library instead of the unchecked operations eliminates an entire\\n * class of bugs, so it's recommended to use it always.\\n */\\nlibrary SafeMath {\\n    /**\\n     * @dev Returns the addition of two unsigned integers, with an overflow flag.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function tryAdd(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        uint256 c = a + b;\\n        if (c < a) return (false, 0);\\n        return (true, c);\\n    }\\n\\n    /**\\n     * @dev Returns the substraction of two unsigned integers, with an overflow flag.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function trySub(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        if (b > a) return (false, 0);\\n        return (true, a - b);\\n    }\\n\\n    /**\\n     * @dev Returns the multiplication of two unsigned integers, with an overflow flag.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function tryMul(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        // Gas optimization: this is cheaper than requiring 'a' not being zero, but the\\n        // benefit is lost if 'b' is also tested.\\n        // See: https://github.com/OpenZeppelin/openzeppelin-contracts/pull/522\\n        if (a == 0) return (true, 0);\\n        uint256 c = a * b;\\n        if (c / a != b) return (false, 0);\\n        return (true, c);\\n    }\\n\\n    /**\\n     * @dev Returns the division of two unsigned integers, with a division by zero flag.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function tryDiv(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        if (b == 0) return (false, 0);\\n        return (true, a / b);\\n    }\\n\\n    /**\\n     * @dev Returns the remainder of dividing two unsigned integers, with a division by zero flag.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function tryMod(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        if (b == 0) return (false, 0);\\n        return (true, a % b);\\n    }\\n\\n    /**\\n     * @dev Returns the addition of two unsigned integers, reverting on\\n     * overflow.\\n     *\\n     * Counterpart to Solidity's `+` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Addition cannot overflow.\\n     */\\n    function add(uint256 a, uint256 b) internal pure returns (uint256) {\\n        uint256 c = a + b;\\n        require(c >= a, \\\"SafeMath: addition overflow\\\");\\n        return c;\\n    }\\n\\n    /**\\n     * @dev Returns the subtraction of two unsigned integers, reverting on\\n     * overflow (when the result is negative).\\n     *\\n     * Counterpart to Solidity's `-` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Subtraction cannot overflow.\\n     */\\n    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\\n        require(b <= a, \\\"SafeMath: subtraction overflow\\\");\\n        return a - b;\\n    }\\n\\n    /**\\n     * @dev Returns the multiplication of two unsigned integers, reverting on\\n     * overflow.\\n     *\\n     * Counterpart to Solidity's `*` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Multiplication cannot overflow.\\n     */\\n    function mul(uint256 a, uint256 b) internal pure returns (uint256) {\\n        if (a == 0) return 0;\\n        uint256 c = a * b;\\n        require(c / a == b, \\\"SafeMath: multiplication overflow\\\");\\n        return c;\\n    }\\n\\n    /**\\n     * @dev Returns the integer division of two unsigned integers, reverting on\\n     * division by zero. The result is rounded towards zero.\\n     *\\n     * Counterpart to Solidity's `/` operator. Note: this function uses a\\n     * `revert` opcode (which leaves remaining gas untouched) while Solidity\\n     * uses an invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Requirements:\\n     *\\n     * - The divisor cannot be zero.\\n     */\\n    function div(uint256 a, uint256 b) internal pure returns (uint256) {\\n        require(b > 0, \\\"SafeMath: division by zero\\\");\\n        return a / b;\\n    }\\n\\n    /**\\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\\n     * reverting when dividing by zero.\\n     *\\n     * Counterpart to Solidity's `%` operator. This function uses a `revert`\\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\\n     * invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Requirements:\\n     *\\n     * - The divisor cannot be zero.\\n     */\\n    function mod(uint256 a, uint256 b) internal pure returns (uint256) {\\n        require(b > 0, \\\"SafeMath: modulo by zero\\\");\\n        return a % b;\\n    }\\n\\n    /**\\n     * @dev Returns the subtraction of two unsigned integers, reverting with custom message on\\n     * overflow (when the result is negative).\\n     *\\n     * CAUTION: This function is deprecated because it requires allocating memory for the error\\n     * message unnecessarily. For custom revert reasons use {trySub}.\\n     *\\n     * Counterpart to Solidity's `-` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Subtraction cannot overflow.\\n     */\\n    function sub(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\\n        require(b <= a, errorMessage);\\n        return a - b;\\n    }\\n\\n    /**\\n     * @dev Returns the integer division of two unsigned integers, reverting with custom message on\\n     * division by zero. The result is rounded towards zero.\\n     *\\n     * CAUTION: This function is deprecated because it requires allocating memory for the error\\n     * message unnecessarily. For custom revert reasons use {tryDiv}.\\n     *\\n     * Counterpart to Solidity's `/` operator. Note: this function uses a\\n     * `revert` opcode (which leaves remaining gas untouched) while Solidity\\n     * uses an invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Requirements:\\n     *\\n     * - The divisor cannot be zero.\\n     */\\n    function div(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\\n        require(b > 0, errorMessage);\\n        return a / b;\\n    }\\n\\n    /**\\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\\n     * reverting with custom message when dividing by zero.\\n     *\\n     * CAUTION: This function is deprecated because it requires allocating memory for the error\\n     * message unnecessarily. For custom revert reasons use {tryMod}.\\n     *\\n     * Counterpart to Solidity's `%` operator. This function uses a `revert`\\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\\n     * invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Requirements:\\n     *\\n     * - The divisor cannot be zero.\\n     */\\n    function mod(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\\n        require(b > 0, errorMessage);\\n        return a % b;\\n    }\\n}\\n\"\r\n    },\r\n    \"openzeppelin-solidity/contracts/utils/ReentrancyGuard.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity >=0.6.0 <0.8.0;\\n\\n/**\\n * @dev Contract module that helps prevent reentrant calls to a function.\\n *\\n * Inheriting from `ReentrancyGuard` will make the {nonReentrant} modifier\\n * available, which can be applied to functions to make sure there are no nested\\n * (reentrant) calls to them.\\n *\\n * Note that because there is a single `nonReentrant` guard, functions marked as\\n * `nonReentrant` may not call one another. This can be worked around by making\\n * those functions `private`, and then adding `external` `nonReentrant` entry\\n * points to them.\\n *\\n * TIP: If you would like to learn more about reentrancy and alternative ways\\n * to protect against it, check out our blog post\\n * https://blog.openzeppelin.com/reentrancy-after-istanbul/[Reentrancy After Istanbul].\\n */\\nabstract contract ReentrancyGuard {\\n    // Booleans are more expensive than uint256 or any type that takes up a full\\n    // word because each write operation emits an extra SLOAD to first read the\\n    // slot's contents, replace the bits taken up by the boolean, and then write\\n    // back. This is the compiler's defense against contract upgrades and\\n    // pointer aliasing, and it cannot be disabled.\\n\\n    // The values being non-zero value makes deployment a bit more expensive,\\n    // but in exchange the refund on every call to nonReentrant will be lower in\\n    // amount. Since refunds are capped to a percentage of the total\\n    // transaction's gas, it is best to keep them low in cases like this one, to\\n    // increase the likelihood of the full refund coming into effect.\\n    uint256 private constant _NOT_ENTERED = 1;\\n    uint256 private constant _ENTERED = 2;\\n\\n    uint256 private _status;\\n\\n    constructor () internal {\\n        _status = _NOT_ENTERED;\\n    }\\n\\n    /**\\n     * @dev Prevents a contract from calling itself, directly or indirectly.\\n     * Calling a `nonReentrant` function from another `nonReentrant`\\n     * function is not supported. It is possible to prevent this from happening\\n     * by making the `nonReentrant` function external, and make it call a\\n     * `private` function that does the actual work.\\n     */\\n    modifier nonReentrant() {\\n        // On the first call to nonReentrant, _notEntered will be true\\n        require(_status != _ENTERED, \\\"ReentrancyGuard: reentrant call\\\");\\n\\n        // Any calls to nonReentrant after this point will fail\\n        _status = _ENTERED;\\n\\n        _;\\n\\n        // By storing the original value once again, a refund is triggered (see\\n        // https://eips.ethereum.org/EIPS/eip-2200)\\n        _status = _NOT_ENTERED;\\n    }\\n}\\n\"\r\n    },\r\n    \"openzeppelin-solidity/contracts/token/ERC20/SafeERC20.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity >=0.6.0 <0.8.0;\\n\\nimport \\\"./IERC20.sol\\\";\\nimport \\\"../../math/SafeMath.sol\\\";\\nimport \\\"../../utils/Address.sol\\\";\\n\\n/**\\n * @title SafeERC20\\n * @dev Wrappers around ERC20 operations that throw on failure (when the token\\n * contract returns false). Tokens that return no value (and instead revert or\\n * throw on failure) are also supported, non-reverting calls are assumed to be\\n * successful.\\n * To use this library you can add a `using SafeERC20 for IERC20;` statement to your contract,\\n * which allows you to call the safe operations as `token.safeTransfer(...)`, etc.\\n */\\nlibrary SafeERC20 {\\n    using SafeMath for uint256;\\n    using Address for address;\\n\\n    function safeTransfer(IERC20 token, address to, uint256 value) internal {\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.transfer.selector, to, value));\\n    }\\n\\n    function safeTransferFrom(IERC20 token, address from, address to, uint256 value) internal {\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.transferFrom.selector, from, to, value));\\n    }\\n\\n    /**\\n     * @dev Deprecated. This function has issues similar to the ones found in\\n     * {IERC20-approve}, and its usage is discouraged.\\n     *\\n     * Whenever possible, use {safeIncreaseAllowance} and\\n     * {safeDecreaseAllowance} instead.\\n     */\\n    function safeApprove(IERC20 token, address spender, uint256 value) internal {\\n        // safeApprove should only be called when setting an initial allowance,\\n        // or when resetting it to zero. To increase and decrease it, use\\n        // 'safeIncreaseAllowance' and 'safeDecreaseAllowance'\\n        // solhint-disable-next-line max-line-length\\n        require((value == 0) || (token.allowance(address(this), spender) == 0),\\n            \\\"SafeERC20: approve from non-zero to non-zero allowance\\\"\\n        );\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, value));\\n    }\\n\\n    function safeIncreaseAllowance(IERC20 token, address spender, uint256 value) internal {\\n        uint256 newAllowance = token.allowance(address(this), spender).add(value);\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));\\n    }\\n\\n    function safeDecreaseAllowance(IERC20 token, address spender, uint256 value) internal {\\n        uint256 newAllowance = token.allowance(address(this), spender).sub(value, \\\"SafeERC20: decreased allowance below zero\\\");\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));\\n    }\\n\\n    /**\\n     * @dev Imitates a Solidity high-level call (i.e. a regular function call to a contract), relaxing the requirement\\n     * on the return value: the return value is optional (but if data is returned, it must not be false).\\n     * @param token The token targeted by the call.\\n     * @param data The call data (encoded using abi.encode or one of its variants).\\n     */\\n    function _callOptionalReturn(IERC20 token, bytes memory data) private {\\n        // We need to perform a low level call here, to bypass Solidity's return data size checking mechanism, since\\n        // we're implementing it ourselves. We use {Address.functionCall} to perform this call, which verifies that\\n        // the target address contains contract code and also asserts for success in the low-level call.\\n\\n        bytes memory returndata = address(token).functionCall(data, \\\"SafeERC20: low-level call failed\\\");\\n        if (returndata.length > 0) { // Return data is optional\\n            // solhint-disable-next-line max-line-length\\n            require(abi.decode(returndata, (bool)), \\\"SafeERC20: ERC20 operation did not succeed\\\");\\n        }\\n    }\\n}\\n\"\r\n    },\r\n    \"openzeppelin-solidity/contracts/token/ERC20/ERC20.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity >=0.6.0 <0.8.0;\\n\\nimport \\\"../../utils/Context.sol\\\";\\nimport \\\"./IERC20.sol\\\";\\nimport \\\"../../math/SafeMath.sol\\\";\\n\\n/**\\n * @dev Implementation of the {IERC20} interface.\\n *\\n * This implementation is agnostic to the way tokens are created. This means\\n * that a supply mechanism has to be added in a derived contract using {_mint}.\\n * For a generic mechanism see {ERC20PresetMinterPauser}.\\n *\\n * TIP: For a detailed writeup see our guide\\n * https://forum.zeppelin.solutions/t/how-to-implement-erc20-supply-mechanisms/226[How\\n * to implement supply mechanisms].\\n *\\n * We have followed general OpenZeppelin guidelines: functions revert instead\\n * of returning `false` on failure. This behavior is nonetheless conventional\\n * and does not conflict with the expectations of ERC20 applications.\\n *\\n * Additionally, an {Approval} event is emitted on calls to {transferFrom}.\\n * This allows applications to reconstruct the allowance for all accounts just\\n * by listening to said events. Other implementations of the EIP may not emit\\n * these events, as it isn't required by the specification.\\n *\\n * Finally, the non-standard {decreaseAllowance} and {increaseAllowance}\\n * functions have been added to mitigate the well-known issues around setting\\n * allowances. See {IERC20-approve}.\\n */\\ncontract ERC20 is Context, IERC20 {\\n    using SafeMath for uint256;\\n\\n    mapping (address => uint256) private _balances;\\n\\n    mapping (address => mapping (address => uint256)) private _allowances;\\n\\n    uint256 private _totalSupply;\\n\\n    string private _name;\\n    string private _symbol;\\n    uint8 private _decimals;\\n\\n    /**\\n     * @dev Sets the values for {name} and {symbol}, initializes {decimals} with\\n     * a default value of 18.\\n     *\\n     * To select a different value for {decimals}, use {_setupDecimals}.\\n     *\\n     * All three of these values are immutable: they can only be set once during\\n     * construction.\\n     */\\n    constructor (string memory name_, string memory symbol_) public {\\n        _name = name_;\\n        _symbol = symbol_;\\n        _decimals = 18;\\n    }\\n\\n    /**\\n     * @dev Returns the name of the token.\\n     */\\n    function name() public view virtual returns (string memory) {\\n        return _name;\\n    }\\n\\n    /**\\n     * @dev Returns the symbol of the token, usually a shorter version of the\\n     * name.\\n     */\\n    function symbol() public view virtual returns (string memory) {\\n        return _symbol;\\n    }\\n\\n    /**\\n     * @dev Returns the number of decimals used to get its user representation.\\n     * For example, if `decimals` equals `2`, a balance of `505` tokens should\\n     * be displayed to a user as `5,05` (`505 / 10 ** 2`).\\n     *\\n     * Tokens usually opt for a value of 18, imitating the relationship between\\n     * Ether and Wei. This is the value {ERC20} uses, unless {_setupDecimals} is\\n     * called.\\n     *\\n     * NOTE: This information is only used for _display_ purposes: it in\\n     * no way affects any of the arithmetic of the contract, including\\n     * {IERC20-balanceOf} and {IERC20-transfer}.\\n     */\\n    function decimals() public view virtual returns (uint8) {\\n        return _decimals;\\n    }\\n\\n    /**\\n     * @dev See {IERC20-totalSupply}.\\n     */\\n    function totalSupply() public view virtual override returns (uint256) {\\n        return _totalSupply;\\n    }\\n\\n    /**\\n     * @dev See {IERC20-balanceOf}.\\n     */\\n    function balanceOf(address account) public view virtual override returns (uint256) {\\n        return _balances[account];\\n    }\\n\\n    /**\\n     * @dev See {IERC20-transfer}.\\n     *\\n     * Requirements:\\n     *\\n     * - `recipient` cannot be the zero address.\\n     * - the caller must have a balance of at least `amount`.\\n     */\\n    function transfer(address recipient, uint256 amount) public virtual override returns (bool) {\\n        _transfer(_msgSender(), recipient, amount);\\n        return true;\\n    }\\n\\n    /**\\n     * @dev See {IERC20-allowance}.\\n     */\\n    function allowance(address owner, address spender) public view virtual override returns (uint256) {\\n        return _allowances[owner][spender];\\n    }\\n\\n    /**\\n     * @dev See {IERC20-approve}.\\n     *\\n     * Requirements:\\n     *\\n     * - `spender` cannot be the zero address.\\n     */\\n    function approve(address spender, uint256 amount) public virtual override returns (bool) {\\n        _approve(_msgSender(), spender, amount);\\n        return true;\\n    }\\n\\n    /**\\n     * @dev See {IERC20-transferFrom}.\\n     *\\n     * Emits an {Approval} event indicating the updated allowance. This is not\\n     * required by the EIP. See the note at the beginning of {ERC20}.\\n     *\\n     * Requirements:\\n     *\\n     * - `sender` and `recipient` cannot be the zero address.\\n     * - `sender` must have a balance of at least `amount`.\\n     * - the caller must have allowance for ``sender``'s tokens of at least\\n     * `amount`.\\n     */\\n    function transferFrom(address sender, address recipient, uint256 amount) public virtual override returns (bool) {\\n        _transfer(sender, recipient, amount);\\n        _approve(sender, _msgSender(), _allowances[sender][_msgSender()].sub(amount, \\\"ERC20: transfer amount exceeds allowance\\\"));\\n        return true;\\n    }\\n\\n    /**\\n     * @dev Atomically increases the allowance granted to `spender` by the caller.\\n     *\\n     * This is an alternative to {approve} that can be used as a mitigation for\\n     * problems described in {IERC20-approve}.\\n     *\\n     * Emits an {Approval} event indicating the updated allowance.\\n     *\\n     * Requirements:\\n     *\\n     * - `spender` cannot be the zero address.\\n     */\\n    function increaseAllowance(address spender, uint256 addedValue) public virtual returns (bool) {\\n        _approve(_msgSender(), spender, _allowances[_msgSender()][spender].add(addedValue));\\n        return true;\\n    }\\n\\n    /**\\n     * @dev Atomically decreases the allowance granted to `spender` by the caller.\\n     *\\n     * This is an alternative to {approve} that can be used as a mitigation for\\n     * problems described in {IERC20-approve}.\\n     *\\n     * Emits an {Approval} event indicating the updated allowance.\\n     *\\n     * Requirements:\\n     *\\n     * - `spender` cannot be the zero address.\\n     * - `spender` must have allowance for the caller of at least\\n     * `subtractedValue`.\\n     */\\n    function decreaseAllowance(address spender, uint256 subtractedValue) public virtual returns (bool) {\\n        _approve(_msgSender(), spender, _allowances[_msgSender()][spender].sub(subtractedValue, \\\"ERC20: decreased allowance below zero\\\"));\\n        return true;\\n    }\\n\\n    /**\\n     * @dev Moves tokens `amount` from `sender` to `recipient`.\\n     *\\n     * This is internal function is equivalent to {transfer}, and can be used to\\n     * e.g. implement automatic token fees, slashing mechanisms, etc.\\n     *\\n     * Emits a {Transfer} event.\\n     *\\n     * Requirements:\\n     *\\n     * - `sender` cannot be the zero address.\\n     * - `recipient` cannot be the zero address.\\n     * - `sender` must have a balance of at least `amount`.\\n     */\\n    function _transfer(address sender, address recipient, uint256 amount) internal virtual {\\n        require(sender != address(0), \\\"ERC20: transfer from the zero address\\\");\\n        require(recipient != address(0), \\\"ERC20: transfer to the zero address\\\");\\n\\n        _beforeTokenTransfer(sender, recipient, amount);\\n\\n        _balances[sender] = _balances[sender].sub(amount, \\\"ERC20: transfer amount exceeds balance\\\");\\n        _balances[recipient] = _balances[recipient].add(amount);\\n        emit Transfer(sender, recipient, amount);\\n    }\\n\\n    /** @dev Creates `amount` tokens and assigns them to `account`, increasing\\n     * the total supply.\\n     *\\n     * Emits a {Transfer} event with `from` set to the zero address.\\n     *\\n     * Requirements:\\n     *\\n     * - `to` cannot be the zero address.\\n     */\\n    function _mint(address account, uint256 amount) internal virtual {\\n        require(account != address(0), \\\"ERC20: mint to the zero address\\\");\\n\\n        _beforeTokenTransfer(address(0), account, amount);\\n\\n        _totalSupply = _totalSupply.add(amount);\\n        _balances[account] = _balances[account].add(amount);\\n        emit Transfer(address(0), account, amount);\\n    }\\n\\n    /**\\n     * @dev Destroys `amount` tokens from `account`, reducing the\\n     * total supply.\\n     *\\n     * Emits a {Transfer} event with `to` set to the zero address.\\n     *\\n     * Requirements:\\n     *\\n     * - `account` cannot be the zero address.\\n     * - `account` must have at least `amount` tokens.\\n     */\\n    function _burn(address account, uint256 amount) internal virtual {\\n        require(account != address(0), \\\"ERC20: burn from the zero address\\\");\\n\\n        _beforeTokenTransfer(account, address(0), amount);\\n\\n        _balances[account] = _balances[account].sub(amount, \\\"ERC20: burn amount exceeds balance\\\");\\n        _totalSupply = _totalSupply.sub(amount);\\n        emit Transfer(account, address(0), amount);\\n    }\\n\\n    /**\\n     * @dev Sets `amount` as the allowance of `spender` over the `owner` s tokens.\\n     *\\n     * This internal function is equivalent to `approve`, and can be used to\\n     * e.g. set automatic allowances for certain subsystems, etc.\\n     *\\n     * Emits an {Approval} event.\\n     *\\n     * Requirements:\\n     *\\n     * - `owner` cannot be the zero address.\\n     * - `spender` cannot be the zero address.\\n     */\\n    function _approve(address owner, address spender, uint256 amount) internal virtual {\\n        require(owner != address(0), \\\"ERC20: approve from the zero address\\\");\\n        require(spender != address(0), \\\"ERC20: approve to the zero address\\\");\\n\\n        _allowances[owner][spender] = amount;\\n        emit Approval(owner, spender, amount);\\n    }\\n\\n    /**\\n     * @dev Sets {decimals} to a value other than the default one of 18.\\n     *\\n     * WARNING: This function should only be called from the constructor. Most\\n     * applications that interact with token contracts will not expect\\n     * {decimals} to ever change, and may work incorrectly if it does.\\n     */\\n    function _setupDecimals(uint8 decimals_) internal virtual {\\n        _decimals = decimals_;\\n    }\\n\\n    /**\\n     * @dev Hook that is called before any transfer of tokens. This includes\\n     * minting and burning.\\n     *\\n     * Calling conditions:\\n     *\\n     * - when `from` and `to` are both non-zero, `amount` of ``from``'s tokens\\n     * will be to transferred to `to`.\\n     * - when `from` is zero, `amount` tokens will be minted for `to`.\\n     * - when `to` is zero, `amount` of ``from``'s tokens will be burned.\\n     * - `from` and `to` are never both zero.\\n     *\\n     * To learn more about hooks, head to xref:ROOT:extending-contracts.adoc#using-hooks[Using Hooks].\\n     */\\n    function _beforeTokenTransfer(address from, address to, uint256 amount) internal virtual { }\\n}\\n\"\r\n    },\r\n    \"openzeppelin-solidity/contracts/cryptography/ECDSA.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity >=0.6.0 <0.8.0;\\n\\n/**\\n * @dev Elliptic Curve Digital Signature Algorithm (ECDSA) operations.\\n *\\n * These functions can be used to verify that a message was signed by the holder\\n * of the private keys of a given address.\\n */\\nlibrary ECDSA {\\n    /**\\n     * @dev Returns the address that signed a hashed message (`hash`) with\\n     * `signature`. This address can then be used for verification purposes.\\n     *\\n     * The `ecrecover` EVM opcode allows for malleable (non-unique) signatures:\\n     * this function rejects them by requiring the `s` value to be in the lower\\n     * half order, and the `v` value to be either 27 or 28.\\n     *\\n     * IMPORTANT: `hash` _must_ be the result of a hash operation for the\\n     * verification to be secure: it is possible to craft signatures that\\n     * recover to arbitrary addresses for non-hashed data. A safe way to ensure\\n     * this is by receiving a hash of the original message (which may otherwise\\n     * be too long), and then calling {toEthSignedMessageHash} on it.\\n     */\\n    function recover(bytes32 hash, bytes memory signature) internal pure returns (address) {\\n        // Check the signature length\\n        if (signature.length != 65) {\\n            revert(\\\"ECDSA: invalid signature length\\\");\\n        }\\n\\n        // Divide the signature in r, s and v variables\\n        bytes32 r;\\n        bytes32 s;\\n        uint8 v;\\n\\n        // ecrecover takes the signature parameters, and the only way to get them\\n        // currently is to use assembly.\\n        // solhint-disable-next-line no-inline-assembly\\n        assembly {\\n            r := mload(add(signature, 0x20))\\n            s := mload(add(signature, 0x40))\\n            v := byte(0, mload(add(signature, 0x60)))\\n        }\\n\\n        return recover(hash, v, r, s);\\n    }\\n\\n    /**\\n     * @dev Overload of {ECDSA-recover-bytes32-bytes-} that receives the `v`,\\n     * `r` and `s` signature fields separately.\\n     */\\n    function recover(bytes32 hash, uint8 v, bytes32 r, bytes32 s) internal pure returns (address) {\\n        // EIP-2 still allows signature malleability for ecrecover(). Remove this possibility and make the signature\\n        // unique. Appendix F in the Ethereum Yellow paper (https://ethereum.github.io/yellowpaper/paper.pdf), defines\\n        // the valid range for s in (281): 0 < s < secp256k1n ÷ 2 + 1, and for v in (282): v ∈ {27, 28}. Most\\n        // signatures from current libraries generate a unique signature with an s-value in the lower half order.\\n        //\\n        // If your library generates malleable signatures, such as s-values in the upper range, calculate a new s-value\\n        // with 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFEBAAEDCE6AF48A03BBFD25E8CD0364141 - s1 and flip v from 27 to 28 or\\n        // vice versa. If your library also generates signatures with 0/1 for v instead 27/28, add 27 to v to accept\\n        // these malleable signatures as well.\\n        require(uint256(s) <= 0x7FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF5D576E7357A4501DDFE92F46681B20A0, \\\"ECDSA: invalid signature 's' value\\\");\\n        require(v == 27 || v == 28, \\\"ECDSA: invalid signature 'v' value\\\");\\n\\n        // If the signature is valid (and not malleable), return the signer address\\n        address signer = ecrecover(hash, v, r, s);\\n        require(signer != address(0), \\\"ECDSA: invalid signature\\\");\\n\\n        return signer;\\n    }\\n\\n    /**\\n     * @dev Returns an Ethereum Signed Message, created from a `hash`. This\\n     * replicates the behavior of the\\n     * https://github.com/ethereum/wiki/wiki/JSON-RPC#eth_sign[`eth_sign`]\\n     * JSON-RPC method.\\n     *\\n     * See {recover}.\\n     */\\n    function toEthSignedMessageHash(bytes32 hash) internal pure returns (bytes32) {\\n        // 32 is the length in bytes of hash,\\n        // enforced by the type signature above\\n        return keccak256(abi.encodePacked(\\\"\\\\x19Ethereum Signed Message:\\\\n32\\\", hash));\\n    }\\n}\\n\"\r\n    },\r\n    \"contracts/Pool/vcUSDPool.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\r\\npragma solidity ^0.6.12;\\r\\n\\r\\nimport \\\"openzeppelin-solidity/contracts/access/AccessControl.sol\\\";\\r\\nimport \\\"openzeppelin-solidity/contracts/math/SafeMath.sol\\\";\\r\\nimport \\\"openzeppelin-solidity/contracts/utils/ReentrancyGuard.sol\\\";\\r\\nimport \\\"openzeppelin-solidity/contracts/token/ERC20/SafeERC20.sol\\\";\\r\\nimport \\\"openzeppelin-solidity/contracts/token/ERC20/ERC20.sol\\\";\\r\\nimport \\\"contracts/tokens/vcUSD.sol\\\";\\r\\nimport {WalletTokensalePrivate} from \\\"contracts/Wallets/WalletTokensalePrivate.sol\\\";\\r\\n\\r\\n\\r\\n\\r\\ncontract vcUSDPool is AccessControl, ReentrancyGuard {\\r\\n    using SafeMath for uint256;\\r\\n    using SafeERC20 for ERC20;\\r\\n    bytes32 public constant ADMIN_ROLE = keccak256(\\\"ADMIN_ROLE\\\");\\r\\n    bytes32 public constant SERVICE_ROLE = keccak256(\\\"SERVICE_ROLE\\\");\\r\\n\\r\\n    bool public saleUnlocked = true;\\r\\n    bool public claimUnlocked = true;\\r\\n    mapping(bytes32 => bool) hashes;\\r\\n\\r\\n    address public vcUSDAddress;\\r\\n    address public USDTAddress;\\r\\n    address public service_backend;\\r\\n    address public privateAddress;\\r\\n\\r\\n    event vcUSDBuy(address indexed user, uint256 amount, uint256 time);\\r\\n    event vcUSDSell(address indexed user, uint256 amount, uint256 time);\\r\\n    event RefferalsClaimed(address indexed user, uint256 amount, uint256 time);\\r\\n\\r\\n    constructor(\\r\\n        address _USDTAddress,\\r\\n        address _vcUSDAddress,\\r\\n        address _service_backend\\r\\n    ) public {\\r\\n        _setupRole(DEFAULT_ADMIN_ROLE, msg.sender);\\r\\n        _setupRole(ADMIN_ROLE, msg.sender);\\r\\n\\r\\n        _setRoleAdmin(ADMIN_ROLE, DEFAULT_ADMIN_ROLE);\\r\\n        _setRoleAdmin(SERVICE_ROLE, ADMIN_ROLE);\\r\\n\\r\\n        vcUSDAddress = _vcUSDAddress;\\r\\n        USDTAddress = _USDTAddress;\\r\\n        service_backend = _service_backend;\\r\\n        _setupRole(SERVICE_ROLE, service_backend);\\r\\n    }\\r\\n\\r\\n    modifier refferalClaimUnlocked() {\\r\\n        require(claimUnlocked, \\\"Claim is locked\\\");\\r\\n        _;\\r\\n    }\\r\\n\\r\\n    modifier salesUnlocked() {\\r\\n        require(saleUnlocked, \\\"Sales is locked!\\\");\\r\\n        _;\\r\\n    }\\r\\n\\r\\n    function airdrop(address[] calldata _addresses, uint256[] calldata _amounts)\\r\\n        external\\r\\n    {\\r\\n        require(hasRole(SERVICE_ROLE, msg.sender), \\\"Caller is not an service\\\");\\r\\n        require(\\r\\n            _addresses.length == _amounts.length,\\r\\n            \\\"Arrays must have the same length\\\"\\r\\n        );\\r\\n\\r\\n        for (uint256 i = 0; i < _addresses.length; i++) {\\r\\n            vcUSDToken(vcUSDAddress).mint(_addresses[i], _amounts[i]);\\r\\n        }\\r\\n    }\\r\\n\\r\\n    function buyVcUSDBackend(uint256 _amount, address _recepient) external {\\r\\n        require(hasRole(SERVICE_ROLE, msg.sender), \\\"Caller is not an service\\\");\\r\\n        require(_amount > 0, \\\"Amount must be above zero!\\\");\\r\\n\\r\\n        vcUSDToken(vcUSDAddress).burn(service_backend, _amount);\\r\\n\\r\\n        ERC20(USDTAddress).safeTransfer(_recepient, _amount);\\r\\n\\r\\n        emit vcUSDBuy(_recepient, _amount, block.timestamp);\\r\\n    }\\r\\n\\r\\n    function sellVcUsdBackend(uint256 _amount) external {\\r\\n        require(hasRole(SERVICE_ROLE, msg.sender), \\\"Caller is not an service\\\");\\r\\n        require(_amount > 0, \\\"Amount must be above zero!\\\");\\r\\n\\r\\n        vcUSDToken(vcUSDAddress).mint(service_backend, _amount);\\r\\n\\r\\n        emit vcUSDSell(service_backend, _amount, block.timestamp);\\r\\n    }\\r\\n\\r\\n    function buyVcUSD(uint256 _amount) external salesUnlocked nonReentrant {\\r\\n        require(_amount > 0, \\\"Amount must be above zero!\\\");\\r\\n\\r\\n        vcUSDToken(vcUSDAddress).burn(msg.sender, _amount);\\r\\n\\r\\n        ERC20(USDTAddress).safeTransfer(msg.sender, _amount);\\r\\n\\r\\n        emit vcUSDBuy(msg.sender, _amount, block.timestamp);\\r\\n    }\\r\\n\\r\\n    function sellVcUsd(uint256 _amount) external salesUnlocked nonReentrant {\\r\\n        require(_amount > 0, \\\"Amount must be above zero!\\\");\\r\\n\\r\\n        ERC20(USDTAddress).safeTransferFrom(msg.sender, address(this), _amount);\\r\\n\\r\\n        vcUSDToken(vcUSDAddress).mint(msg.sender, _amount);\\r\\n\\r\\n        emit vcUSDSell(msg.sender, _amount, block.timestamp);\\r\\n    }\\r\\n\\r\\n    function updateServiceAddress(address _service_backend) external {\\r\\n        require(hasRole(ADMIN_ROLE, msg.sender), \\\"Caller is not an admin\\\");\\r\\n\\r\\n        service_backend = _service_backend;\\r\\n    }\\r\\n\\r\\n    function updateSalesState(bool _state) external {\\r\\n        require(hasRole(ADMIN_ROLE, msg.sender), \\\"Caller is not an admin\\\");\\r\\n        saleUnlocked = _state;\\r\\n    }\\r\\n\\r\\n    function updateVcUSDAddress(address _vcUSDAddress) external {\\r\\n        require(hasRole(ADMIN_ROLE, msg.sender), \\\"Caller is not an admin\\\");\\r\\n        vcUSDAddress = _vcUSDAddress;\\r\\n    }\\r\\n\\r\\n    function claim(\\r\\n        bytes32 hashedMessage,\\r\\n        uint256 _amount,\\r\\n        uint256 _sequence,\\r\\n        uint8 _v,\\r\\n        bytes32 _r,\\r\\n        bytes32 _s,\\r\\n        address _from\\r\\n    ) external nonReentrant  refferalClaimUnlocked  {\\r\\n        address service = recover(hashedMessage, _v, _r, _s);\\r\\n        require(hasRole(SERVICE_ROLE, service), \\\"Signed not by a service\\\");\\r\\n        \\r\\n        \\r\\n        //TO-DO _form to msg.sender\\r\\n        bytes32 message = keccak256(\\r\\n            abi.encodePacked(msg.sender, _amount, _sequence)\\r\\n        );\\r\\n\\r\\n        message = keccak256(\\r\\n            abi.encodePacked(\\\"\\\\x19Ethereum Signed Message:\\\\n32\\\", message)\\r\\n        );\\r\\n\\r\\n        // return (message, service);\\r\\n        \\r\\n        require(hashedMessage == message, \\\"Incorrect hashed message\\\");\\r\\n\\r\\n        require(\\r\\n            !hashes[message],\\r\\n            \\\"Sequence amount already claimed or dublicated.\\\"\\r\\n        );\\r\\n\\r\\n        hashes[message] = true;\\r\\n\\r\\n        WalletTokensalePrivate(_from).removeToken(\\r\\n            msg.sender,\\r\\n            _amount,\\r\\n            USDTAddress\\r\\n        );\\r\\n\\r\\n        emit RefferalsClaimed(msg.sender, _amount, block.timestamp);\\r\\n\\r\\n        \\r\\n    }\\r\\n    \\r\\n\\r\\n    function removeToken(\\r\\n        address _recepient,\\r\\n        uint256 _amount,\\r\\n        address tokenAddress\\r\\n    ) external {\\r\\n        require(hasRole(ADMIN_ROLE, msg.sender), \\\"Caller is not an admin\\\");\\r\\n        \\r\\n        ERC20(tokenAddress).safeTransfer(_recepient, _amount);\\r\\n    }\\r\\n\\r\\n    function updateClaimState(bool _state) external {\\r\\n        require(hasRole(ADMIN_ROLE, msg.sender), \\\"Caller is not an admin\\\");\\r\\n        claimUnlocked = _state;\\r\\n    }\\r\\n\\r\\n\\r\\n    function recover(\\r\\n        bytes32 hashedMsg,\\r\\n        uint8 v,\\r\\n        bytes32 r,\\r\\n        bytes32 s\\r\\n    ) internal pure returns (address) {\\r\\n        require(\\r\\n            uint256(s) <=\\r\\n                0x7FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF5D576E7357A4501DDFE92F46681B20A0,\\r\\n            \\\"ECDSA: invalid signature 's' value\\\"\\r\\n        );\\r\\n        require(v == 27 || v == 28, \\\"ECDSA: invalid signature 'v' value\\\");\\r\\n        address signer = ecrecover(hashedMsg, v, r, s);\\r\\n        require(signer != address(0), \\\"ECDSA: invalid signature\\\");\\r\\n        return signer;\\r\\n    }\\r\\n}\\r\\n\"\r\n    },\r\n    \"openzeppelin-solidity/contracts/utils/EnumerableSet.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity >=0.6.0 <0.8.0;\\n\\n/**\\n * @dev Library for managing\\n * https://en.wikipedia.org/wiki/Set_(abstract_data_type)[sets] of primitive\\n * types.\\n *\\n * Sets have the following properties:\\n *\\n * - Elements are added, removed, and checked for existence in constant time\\n * (O(1)).\\n * - Elements are enumerated in O(n). No guarantees are made on the ordering.\\n *\\n * ```\\n * contract Example {\\n *     // Add the library methods\\n *     using EnumerableSet for EnumerableSet.AddressSet;\\n *\\n *     // Declare a set state variable\\n *     EnumerableSet.AddressSet private mySet;\\n * }\\n * ```\\n *\\n * As of v3.3.0, sets of type `bytes32` (`Bytes32Set`), `address` (`AddressSet`)\\n * and `uint256` (`UintSet`) are supported.\\n */\\nlibrary EnumerableSet {\\n    // To implement this library for multiple types with as little code\\n    // repetition as possible, we write it in terms of a generic Set type with\\n    // bytes32 values.\\n    // The Set implementation uses private functions, and user-facing\\n    // implementations (such as AddressSet) are just wrappers around the\\n    // underlying Set.\\n    // This means that we can only create new EnumerableSets for types that fit\\n    // in bytes32.\\n\\n    struct Set {\\n        // Storage of set values\\n        bytes32[] _values;\\n\\n        // Position of the value in the `values` array, plus 1 because index 0\\n        // means a value is not in the set.\\n        mapping (bytes32 => uint256) _indexes;\\n    }\\n\\n    /**\\n     * @dev Add a value to a set. O(1).\\n     *\\n     * Returns true if the value was added to the set, that is if it was not\\n     * already present.\\n     */\\n    function _add(Set storage set, bytes32 value) private returns (bool) {\\n        if (!_contains(set, value)) {\\n            set._values.push(value);\\n            // The value is stored at length-1, but we add 1 to all indexes\\n            // and use 0 as a sentinel value\\n            set._indexes[value] = set._values.length;\\n            return true;\\n        } else {\\n            return false;\\n        }\\n    }\\n\\n    /**\\n     * @dev Removes a value from a set. O(1).\\n     *\\n     * Returns true if the value was removed from the set, that is if it was\\n     * present.\\n     */\\n    function _remove(Set storage set, bytes32 value) private returns (bool) {\\n        // We read and store the value's index to prevent multiple reads from the same storage slot\\n        uint256 valueIndex = set._indexes[value];\\n\\n        if (valueIndex != 0) { // Equivalent to contains(set, value)\\n            // To delete an element from the _values array in O(1), we swap the element to delete with the last one in\\n            // the array, and then remove the last element (sometimes called as 'swap and pop').\\n            // This modifies the order of the array, as noted in {at}.\\n\\n            uint256 toDeleteIndex = valueIndex - 1;\\n            uint256 lastIndex = set._values.length - 1;\\n\\n            // When the value to delete is the last one, the swap operation is unnecessary. However, since this occurs\\n            // so rarely, we still do the swap anyway to avoid the gas cost of adding an 'if' statement.\\n\\n            bytes32 lastvalue = set._values[lastIndex];\\n\\n            // Move the last value to the index where the value to delete is\\n            set._values[toDeleteIndex] = lastvalue;\\n            // Update the index for the moved value\\n            set._indexes[lastvalue] = toDeleteIndex + 1; // All indexes are 1-based\\n\\n            // Delete the slot where the moved value was stored\\n            set._values.pop();\\n\\n            // Delete the index for the deleted slot\\n            delete set._indexes[value];\\n\\n            return true;\\n        } else {\\n            return false;\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns true if the value is in the set. O(1).\\n     */\\n    function _contains(Set storage set, bytes32 value) private view returns (bool) {\\n        return set._indexes[value] != 0;\\n    }\\n\\n    /**\\n     * @dev Returns the number of values on the set. O(1).\\n     */\\n    function _length(Set storage set) private view returns (uint256) {\\n        return set._values.length;\\n    }\\n\\n   /**\\n    * @dev Returns the value stored at position `index` in the set. O(1).\\n    *\\n    * Note that there are no guarantees on the ordering of values inside the\\n    * array, and it may change when more values are added or removed.\\n    *\\n    * Requirements:\\n    *\\n    * - `index` must be strictly less than {length}.\\n    */\\n    function _at(Set storage set, uint256 index) private view returns (bytes32) {\\n        require(set._values.length > index, \\\"EnumerableSet: index out of bounds\\\");\\n        return set._values[index];\\n    }\\n\\n    // Bytes32Set\\n\\n    struct Bytes32Set {\\n        Set _inner;\\n    }\\n\\n    /**\\n     * @dev Add a value to a set. O(1).\\n     *\\n     * Returns true if the value was added to the set, that is if it was not\\n     * already present.\\n     */\\n    function add(Bytes32Set storage set, bytes32 value) internal returns (bool) {\\n        return _add(set._inner, value);\\n    }\\n\\n    /**\\n     * @dev Removes a value from a set. O(1).\\n     *\\n     * Returns true if the value was removed from the set, that is if it was\\n     * present.\\n     */\\n    function remove(Bytes32Set storage set, bytes32 value) internal returns (bool) {\\n        return _remove(set._inner, value);\\n    }\\n\\n    /**\\n     * @dev Returns true if the value is in the set. O(1).\\n     */\\n    function contains(Bytes32Set storage set, bytes32 value) internal view returns (bool) {\\n        return _contains(set._inner, value);\\n    }\\n\\n    /**\\n     * @dev Returns the number of values in the set. O(1).\\n     */\\n    function length(Bytes32Set storage set) internal view returns (uint256) {\\n        return _length(set._inner);\\n    }\\n\\n   /**\\n    * @dev Returns the value stored at position `index` in the set. O(1).\\n    *\\n    * Note that there are no guarantees on the ordering of values inside the\\n    * array, and it may change when more values are added or removed.\\n    *\\n    * Requirements:\\n    *\\n    * - `index` must be strictly less than {length}.\\n    */\\n    function at(Bytes32Set storage set, uint256 index) internal view returns (bytes32) {\\n        return _at(set._inner, index);\\n    }\\n\\n    // AddressSet\\n\\n    struct AddressSet {\\n        Set _inner;\\n    }\\n\\n    /**\\n     * @dev Add a value to a set. O(1).\\n     *\\n     * Returns true if the value was added to the set, that is if it was not\\n     * already present.\\n     */\\n    function add(AddressSet storage set, address value) internal returns (bool) {\\n        return _add(set._inner, bytes32(uint256(uint160(value))));\\n    }\\n\\n    /**\\n     * @dev Removes a value from a set. O(1).\\n     *\\n     * Returns true if the value was removed from the set, that is if it was\\n     * present.\\n     */\\n    function remove(AddressSet storage set, address value) internal returns (bool) {\\n        return _remove(set._inner, bytes32(uint256(uint160(value))));\\n    }\\n\\n    /**\\n     * @dev Returns true if the value is in the set. O(1).\\n     */\\n    function contains(AddressSet storage set, address value) internal view returns (bool) {\\n        return _contains(set._inner, bytes32(uint256(uint160(value))));\\n    }\\n\\n    /**\\n     * @dev Returns the number of values in the set. O(1).\\n     */\\n    function length(AddressSet storage set) internal view returns (uint256) {\\n        return _length(set._inner);\\n    }\\n\\n   /**\\n    * @dev Returns the value stored at position `index` in the set. O(1).\\n    *\\n    * Note that there are no guarantees on the ordering of values inside the\\n    * array, and it may change when more values are added or removed.\\n    *\\n    * Requirements:\\n    *\\n    * - `index` must be strictly less than {length}.\\n    */\\n    function at(AddressSet storage set, uint256 index) internal view returns (address) {\\n        return address(uint160(uint256(_at(set._inner, index))));\\n    }\\n\\n\\n    // UintSet\\n\\n    struct UintSet {\\n        Set _inner;\\n    }\\n\\n    /**\\n     * @dev Add a value to a set. O(1).\\n     *\\n     * Returns true if the value was added to the set, that is if it was not\\n     * already present.\\n     */\\n    function add(UintSet storage set, uint256 value) internal returns (bool) {\\n        return _add(set._inner, bytes32(value));\\n    }\\n\\n    /**\\n     * @dev Removes a value from a set. O(1).\\n     *\\n     * Returns true if the value was removed from the set, that is if it was\\n     * present.\\n     */\\n    function remove(UintSet storage set, uint256 value) internal returns (bool) {\\n        return _remove(set._inner, bytes32(value));\\n    }\\n\\n    /**\\n     * @dev Returns true if the value is in the set. O(1).\\n     */\\n    function contains(UintSet storage set, uint256 value) internal view returns (bool) {\\n        return _contains(set._inner, bytes32(value));\\n    }\\n\\n    /**\\n     * @dev Returns the number of values on the set. O(1).\\n     */\\n    function length(UintSet storage set) internal view returns (uint256) {\\n        return _length(set._inner);\\n    }\\n\\n   /**\\n    * @dev Returns the value stored at position `index` in the set. O(1).\\n    *\\n    * Note that there are no guarantees on the ordering of values inside the\\n    * array, and it may change when more values are added or removed.\\n    *\\n    * Requirements:\\n    *\\n    * - `index` must be strictly less than {length}.\\n    */\\n    function at(UintSet storage set, uint256 index) internal view returns (uint256) {\\n        return uint256(_at(set._inner, index));\\n    }\\n}\\n\"\r\n    },\r\n    \"openzeppelin-solidity/contracts/utils/Address.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity >=0.6.2 <0.8.0;\\n\\n/**\\n * @dev Collection of functions related to the address type\\n */\\nlibrary Address {\\n    /**\\n     * @dev Returns true if `account` is a contract.\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * It is unsafe to assume that an address for which this function returns\\n     * false is an externally-owned account (EOA) and not a contract.\\n     *\\n     * Among others, `isContract` will return false for the following\\n     * types of addresses:\\n     *\\n     *  - an externally-owned account\\n     *  - a contract in construction\\n     *  - an address where a contract will be created\\n     *  - an address where a contract lived, but was destroyed\\n     * ====\\n     */\\n    function isContract(address account) internal view returns (bool) {\\n        // This method relies on extcodesize, which returns 0 for contracts in\\n        // construction, since the code is only stored at the end of the\\n        // constructor execution.\\n\\n        uint256 size;\\n        // solhint-disable-next-line no-inline-assembly\\n        assembly { size := extcodesize(account) }\\n        return size > 0;\\n    }\\n\\n    /**\\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\\n     * `recipient`, forwarding all available gas and reverting on errors.\\n     *\\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\\n     * imposed by `transfer`, making them unable to receive funds via\\n     * `transfer`. {sendValue} removes this limitation.\\n     *\\n     * https://diligence.consensys.net/posts/2019/09/stop-using-soliditys-transfer-now/[Learn more].\\n     *\\n     * IMPORTANT: because control is transferred to `recipient`, care must be\\n     * taken to not create reentrancy vulnerabilities. Consider using\\n     * {ReentrancyGuard} or the\\n     * https://solidity.readthedocs.io/en/v0.5.11/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\\n     */\\n    function sendValue(address payable recipient, uint256 amount) internal {\\n        require(address(this).balance >= amount, \\\"Address: insufficient balance\\\");\\n\\n        // solhint-disable-next-line avoid-low-level-calls, avoid-call-value\\n        (bool success, ) = recipient.call{ value: amount }(\\\"\\\");\\n        require(success, \\\"Address: unable to send value, recipient may have reverted\\\");\\n    }\\n\\n    /**\\n     * @dev Performs a Solidity function call using a low level `call`. A\\n     * plain`call` is an unsafe replacement for a function call: use this\\n     * function instead.\\n     *\\n     * If `target` reverts with a revert reason, it is bubbled up by this\\n     * function (like regular Solidity function calls).\\n     *\\n     * Returns the raw returned data. To convert to the expected return value,\\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\\n     *\\n     * Requirements:\\n     *\\n     * - `target` must be a contract.\\n     * - calling `target` with `data` must not revert.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\\n      return functionCall(target, data, \\\"Address: low-level call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\\n     * `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(address target, bytes memory data, string memory errorMessage) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, 0, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but also transferring `value` wei to `target`.\\n     *\\n     * Requirements:\\n     *\\n     * - the calling contract must have an ETH balance of at least `value`.\\n     * - the called Solidity function must be `payable`.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(address target, bytes memory data, uint256 value) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, value, \\\"Address: low-level call with value failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\\n     * with `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(address target, bytes memory data, uint256 value, string memory errorMessage) internal returns (bytes memory) {\\n        require(address(this).balance >= value, \\\"Address: insufficient balance for call\\\");\\n        require(isContract(target), \\\"Address: call to non-contract\\\");\\n\\n        // solhint-disable-next-line avoid-low-level-calls\\n        (bool success, bytes memory returndata) = target.call{ value: value }(data);\\n        return _verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\\n        return functionStaticCall(target, data, \\\"Address: low-level static call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(address target, bytes memory data, string memory errorMessage) internal view returns (bytes memory) {\\n        require(isContract(target), \\\"Address: static call to non-contract\\\");\\n\\n        // solhint-disable-next-line avoid-low-level-calls\\n        (bool success, bytes memory returndata) = target.staticcall(data);\\n        return _verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionDelegateCall(target, data, \\\"Address: low-level delegate call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(address target, bytes memory data, string memory errorMessage) internal returns (bytes memory) {\\n        require(isContract(target), \\\"Address: delegate call to non-contract\\\");\\n\\n        // solhint-disable-next-line avoid-low-level-calls\\n        (bool success, bytes memory returndata) = target.delegatecall(data);\\n        return _verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    function _verifyCallResult(bool success, bytes memory returndata, string memory errorMessage) private pure returns(bytes memory) {\\n        if (success) {\\n            return returndata;\\n        } else {\\n            // Look for revert reason and bubble it up if present\\n            if (returndata.length > 0) {\\n                // The easiest way to bubble the revert reason is using memory via assembly\\n\\n                // solhint-disable-next-line no-inline-assembly\\n                assembly {\\n                    let returndata_size := mload(returndata)\\n                    revert(add(32, returndata), returndata_size)\\n                }\\n            } else {\\n                revert(errorMessage);\\n            }\\n        }\\n    }\\n}\\n\"\r\n    },\r\n    \"openzeppelin-solidity/contracts/utils/Context.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity >=0.6.0 <0.8.0;\\n\\n/*\\n * @dev Provides information about the current execution context, including the\\n * sender of the transaction and its data. While these are generally available\\n * via msg.sender and msg.data, they should not be accessed in such a direct\\n * manner, since when dealing with GSN meta-transactions the account sending and\\n * paying for execution may not be the actual sender (as far as an application\\n * is concerned).\\n *\\n * This contract is only required for intermediate, library-like contracts.\\n */\\nabstract contract Context {\\n    function _msgSender() internal view virtual returns (address payable) {\\n        return msg.sender;\\n    }\\n\\n    function _msgData() internal view virtual returns (bytes memory) {\\n        this; // silence state mutability warning without generating bytecode - see https://github.com/ethereum/solidity/issues/2691\\n        return msg.data;\\n    }\\n}\\n\"\r\n    },\r\n    \"openzeppelin-solidity/contracts/token/ERC20/IERC20.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity >=0.6.0 <0.8.0;\\n\\n/**\\n * @dev Interface of the ERC20 standard as defined in the EIP.\\n */\\ninterface IERC20 {\\n    /**\\n     * @dev Returns the amount of tokens in existence.\\n     */\\n    function totalSupply() external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the amount of tokens owned by `account`.\\n     */\\n    function balanceOf(address account) external view returns (uint256);\\n\\n    /**\\n     * @dev Moves `amount` tokens from the caller's account to `recipient`.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transfer(address recipient, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Returns the remaining number of tokens that `spender` will be\\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\\n     * zero by default.\\n     *\\n     * This value changes when {approve} or {transferFrom} are called.\\n     */\\n    function allowance(address owner, address spender) external view returns (uint256);\\n\\n    /**\\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\\n     * that someone may use both the old and the new allowance by unfortunate\\n     * transaction ordering. One possible solution to mitigate this race\\n     * condition is to first reduce the spender's allowance to 0 and set the\\n     * desired value afterwards:\\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address spender, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Moves `amount` tokens from `sender` to `recipient` using the\\n     * allowance mechanism. `amount` is then deducted from the caller's\\n     * allowance.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(address sender, address recipient, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\\n     * another (`to`).\\n     *\\n     * Note that `value` may be zero.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 value);\\n\\n    /**\\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\\n     * a call to {approve}. `value` is the new allowance.\\n     */\\n    event Approval(address indexed owner, address indexed spender, uint256 value);\\n}\\n\"\r\n    },\r\n    \"contracts/tokens/vcUSD.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\r\\npragma solidity ^0.6.12;\\r\\n\\r\\nimport \\\"openzeppelin-solidity/contracts/token/ERC20/ERC20.sol\\\";\\r\\nimport \\\"openzeppelin-solidity/contracts/access/AccessControl.sol\\\";\\r\\n\\r\\ncontract vcUSDToken is ERC20, AccessControl {\\r\\n    bytes32 public constant ADMIN_ROLE = keccak256(\\\"ADMIN_ROLE\\\");\\r\\n    bytes32 public constant BURNER_ROLE = keccak256(\\\"BURNER_ROLE\\\");\\r\\n    bytes32 public constant MINTER_ROLE = keccak256(\\\"MINTER_ROLE\\\");\\r\\n\\r\\n    constructor(\\r\\n        string memory _name,\\r\\n        string memory _symbol,\\r\\n        uint8 _decimals\\r\\n    ) public ERC20(_name, _symbol) {\\r\\n        // Grant the contract deployer the default admin role: it will be able\\r\\n        // to grant and revoke any roles\\r\\n        _setupRole(DEFAULT_ADMIN_ROLE, msg.sender);\\r\\n        _setupRole(ADMIN_ROLE, msg.sender);\\r\\n        // Sets `DEFAULT_ADMIN_ROLE` as ``ADMIN_ROLE``'s admin role.\\r\\n        _setRoleAdmin(ADMIN_ROLE, DEFAULT_ADMIN_ROLE);\\r\\n        _setupDecimals(_decimals);\\r\\n    }\\r\\n\\r\\n    function mint(address to, uint256 amount) external {\\r\\n        require(hasRole(MINTER_ROLE, msg.sender), \\\"Caller is not an minter\\\");\\r\\n        _mint(to, amount);\\r\\n    }\\r\\n\\r\\n    function burn(address from, uint256 amount) external {\\r\\n        require(hasRole(BURNER_ROLE, msg.sender), \\\"Caller is not an burner\\\");\\r\\n        _burn(from, amount);\\r\\n    }\\r\\n\\r\\n    function _beforeTokenTransfer(\\r\\n        address _from,\\r\\n        address _to,\\r\\n        uint256 _amount\\r\\n    ) internal virtual override(ERC20) {\\r\\n        ERC20._beforeTokenTransfer(_from, _to, _amount);\\r\\n    }\\r\\n}\\r\\n\"\r\n    },\r\n    \"contracts/Wallets/WalletTokensalePrivate.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\r\\npragma solidity ^0.6.12;\\r\\n\\r\\nimport \\\"openzeppelin-solidity/contracts/access/AccessControl.sol\\\";\\r\\nimport \\\"openzeppelin-solidity/contracts/math/SafeMath.sol\\\";\\r\\nimport \\\"openzeppelin-solidity/contracts/utils/ReentrancyGuard.sol\\\";\\r\\nimport \\\"openzeppelin-solidity/contracts/token/ERC20/SafeERC20.sol\\\";\\r\\nimport \\\"openzeppelin-solidity/contracts/token/ERC20/ERC20.sol\\\";\\r\\n\\r\\nimport {vcUSDPool} from \\\"contracts/Pool/vcUSDPool.sol\\\";\\r\\n\\r\\ncontract WalletTokensalePrivate is AccessControl, ReentrancyGuard {\\r\\n    using SafeMath for uint256;\\r\\n    using SafeERC20 for ERC20;\\r\\n\\r\\n    uint256 public totalAmount;\\r\\n    uint256 public totalSold;\\r\\n\\r\\n    uint256 public minAmountToBuy;\\r\\n    uint256 public maxAmountToBuy;\\r\\n\\r\\n    bytes32 public constant ADMIN_ROLE = keccak256(\\\"ADMIN_ROLE\\\");\\r\\n    bytes32 public constant SERVICE_ROLE = keccak256(\\\"SERVICE_ROLE\\\");\\r\\n    // address of main token\\r\\n    address public govTokenAddress;\\r\\n    address public USDTAddress;\\r\\n    uint256 public factor = 10**12;\\r\\n    uint256 public USDTReceived;\\r\\n    uint256 public USDTClaimed;\\r\\n\\r\\n    // for example: 100000 = 0.01 USD\\r\\n    uint256 public rate;\\r\\n    uint256 public ratesPrecision = 10**7;\\r\\n\\r\\n    address public vcUSDPoolAddress;\\r\\n\\r\\n    uint256 currentLockNumber = 0;\\r\\n    // true = swap unlocked, false = swap locked\\r\\n    bool public swapUnlocked = true;\\r\\n\\r\\n    //true = claim unlocked, false = locked\\r\\n    bool public claimUnlocked = false;\\r\\n    // struct of lock tokens\\r\\n    struct Lock {\\r\\n        uint256 unlockDate;\\r\\n        uint256 percent;\\r\\n    }\\r\\n    // array of locks tokens\\r\\n    Lock[] public locks;\\r\\n\\r\\n    struct UserInfo {\\r\\n        uint256 amount;\\r\\n        uint256 claimed;\\r\\n    }\\r\\n\\r\\n    mapping(address => UserInfo) public users;\\r\\n    event TokenExchangedFromUsdt(\\r\\n        address indexed spender,\\r\\n        uint256 usdtAmount,\\r\\n        uint256 daovcAmount,\\r\\n        string userId,\\r\\n        uint256 time\\r\\n    );\\r\\n    event TokensClaimed(\\r\\n        address indexed claimer,\\r\\n        uint256 amountClaimed,\\r\\n        uint256 time\\r\\n    );\\r\\n    event TokenExchangedFromFiat(\\r\\n        address indexed spender,\\r\\n        uint256 amount,\\r\\n        uint256 daovcAmount,\\r\\n        uint256 time\\r\\n    );\\r\\n    event RoundStateChanged(bool state, uint256 time);\\r\\n\\r\\n    modifier roundUnlocked() {\\r\\n        require(swapUnlocked, \\\"Round is locked!\\\");\\r\\n        _;\\r\\n    }\\r\\n\\r\\n    modifier claimUnlockedModifier() {\\r\\n        require(claimUnlocked, \\\"Round is locked!\\\");\\r\\n        _;\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Constructor of Wallet.\\r\\n     *\\r\\n     */\\r\\n    constructor(\\r\\n        address _govTokenAddress,\\r\\n        address _USDTAddress,\\r\\n        uint256 _rate,\\r\\n        uint256 _totalAmount,\\r\\n        uint256 _minAmountToBuy,\\r\\n        uint256 _maxAmountToBuy,\\r\\n        address _vcUSDPoolAddress,\\r\\n        uint256 _usdtReceived,\\r\\n        uint256 _usdtClaimed\\r\\n    ) public {\\r\\n        _setupRole(DEFAULT_ADMIN_ROLE, msg.sender);\\r\\n        _setupRole(ADMIN_ROLE, msg.sender);\\r\\n        _setRoleAdmin(ADMIN_ROLE, DEFAULT_ADMIN_ROLE);\\r\\n\\r\\n        govTokenAddress = _govTokenAddress;\\r\\n        USDTAddress = _USDTAddress;\\r\\n        rate = _rate;\\r\\n        totalAmount = _totalAmount;\\r\\n        minAmountToBuy = _minAmountToBuy;\\r\\n        maxAmountToBuy = _maxAmountToBuy;\\r\\n        vcUSDPoolAddress = _vcUSDPoolAddress;\\r\\n        USDTClaimed = _usdtClaimed;\\r\\n        USDTReceived = _usdtReceived;\\r\\n    }\\r\\n\\r\\n    function setRoundState(bool _state) external {\\r\\n        require(hasRole(ADMIN_ROLE, msg.sender), \\\"Caller is not an admin\\\");\\r\\n        swapUnlocked = _state;\\r\\n        emit RoundStateChanged(_state, block.timestamp);\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev add the token to Lock pull\\r\\n     *\\r\\n     * Parameters:\\r\\n     *\\r\\n     * - `_unlockDate` - date of token unlock\\r\\n     * - `_amount` - token amount\\r\\n     */\\r\\n    function addLock(uint256[] memory _unlockDate, uint256[] memory _percent)\\r\\n        external\\r\\n    {\\r\\n        require(hasRole(ADMIN_ROLE, msg.sender), \\\"Caller is not an admin\\\");\\r\\n        require(\\r\\n            _unlockDate.length == 10,\\r\\n            \\\"unlockDate array must have 10 values!\\\"\\r\\n        );\\r\\n        require(_percent.length == 10, \\\"percent array must have 10 values!\\\");\\r\\n\\r\\n        for (uint256 i = 0; i < _unlockDate.length; i++) {\\r\\n            locks.push(\\r\\n                Lock({percent: _percent[i], unlockDate: _unlockDate[i]})\\r\\n            );\\r\\n        }\\r\\n    }\\r\\n\\r\\n    /** @notice swap usdt to daoVC gov token\\r\\n     *\\r\\n     * Parameters:\\r\\n     *\\r\\n     *  @param _amountInUsdt - amount in usdt\\r\\n     */\\r\\n    function swap(uint256 _amountInUsdt, string memory _userId)\\r\\n        external\\r\\n        roundUnlocked\\r\\n    {\\r\\n        UserInfo storage user = users[msg.sender];\\r\\n\\r\\n        uint256 amountInGov = _amountInUsdt.mul(factor).mul(ratesPrecision).div(\\r\\n            rate\\r\\n        );\\r\\n        require(\\r\\n            _amountInUsdt >= minAmountToBuy &&\\r\\n                user.amount.add(amountInGov) <= maxAmountToBuy,\\r\\n            \\\"Amount must must be within the permitted range!\\\"\\r\\n        );\\r\\n\\r\\n        require(\\r\\n            totalSold.add(amountInGov) <= totalAmount,\\r\\n            \\\"All tokens was sold!\\\"\\r\\n        );\\r\\n\\r\\n        ERC20(USDTAddress).safeTransferFrom(\\r\\n            msg.sender,\\r\\n            address(this),\\r\\n            _amountInUsdt\\r\\n        );\\r\\n\\r\\n        USDTReceived = USDTReceived.add(_amountInUsdt);\\r\\n        user.amount = user.amount.add(amountInGov);\\r\\n        totalSold = totalSold.add(amountInGov);\\r\\n\\r\\n        emit TokenExchangedFromUsdt(\\r\\n            msg.sender,\\r\\n            _amountInUsdt,\\r\\n            amountInGov,\\r\\n            _userId,\\r\\n            block.timestamp\\r\\n        );\\r\\n    }\\r\\n\\r\\n    /** @notice swap fiat to daoVC gov token\\r\\n     *\\r\\n     * Parameters:\\r\\n     *\\r\\n     *  @param _user - user's address\\r\\n     *  @param _amountInUsdt - amount in usd\\r\\n     */\\r\\n    function swapBackend(address _user, uint256 _amountInUsdt)\\r\\n        external\\r\\n        roundUnlocked\\r\\n    {\\r\\n        require(\\r\\n            hasRole(SERVICE_ROLE, msg.sender),\\r\\n            \\\"Caller does not have the service role.\\\"\\r\\n        );\\r\\n        UserInfo storage user = users[_user];\\r\\n\\r\\n        uint256 amountInGov = _amountInUsdt.mul(factor).mul(ratesPrecision).div(\\r\\n            rate\\r\\n        );\\r\\n        require(\\r\\n            _amountInUsdt >= minAmountToBuy &&\\r\\n                user.amount.add(amountInGov) <= maxAmountToBuy,\\r\\n            \\\"Amount must must be within the permitted range!\\\"\\r\\n        );\\r\\n\\r\\n        require(\\r\\n            totalSold.add(amountInGov) <= totalAmount,\\r\\n            \\\"All tokens was sold!\\\"\\r\\n        );\\r\\n\\r\\n        USDTReceived = USDTReceived.add(_amountInUsdt);\\r\\n        user.amount = user.amount.add(amountInGov);\\r\\n        totalSold = totalSold.add(amountInGov);\\r\\n        emit TokenExchangedFromFiat(\\r\\n            _user,\\r\\n            _amountInUsdt,\\r\\n            amountInGov,\\r\\n            block.timestamp\\r\\n        );\\r\\n    }\\r\\n\\r\\n    /** @notice user claim's his availeble tokens\\r\\n     *\\r\\n     */\\r\\n    function claim() external nonReentrant claimUnlockedModifier {\\r\\n        UserInfo storage user = users[msg.sender];\\r\\n        require(user.amount > 0, \\\"Nothing to claim\\\");\\r\\n        uint256 newLock = currentLockNumber;\\r\\n        if (newLock <= locks.length - 2) {\\r\\n            while (block.timestamp >= locks[newLock + 1].unlockDate) {\\r\\n                newLock = newLock + 1;\\r\\n                if (newLock == 9) {\\r\\n                    break;\\r\\n                }\\r\\n            }\\r\\n            currentLockNumber = newLock;\\r\\n        }\\r\\n\\r\\n        uint256 availableAmount = calcAvailableAmount(msg.sender);\\r\\n\\r\\n        require(availableAmount > 0, \\\"There are not available tokens to claim\\\");\\r\\n        user.claimed = user.claimed.add(availableAmount);\\r\\n        ERC20(govTokenAddress).safeTransfer(msg.sender, availableAmount);\\r\\n        emit TokensClaimed(msg.sender, availableAmount, block.timestamp);\\r\\n    }\\r\\n\\r\\n    function sendUsdtToPool(uint256 _amount) external {\\r\\n        require(\\r\\n            hasRole(SERVICE_ROLE, msg.sender),\\r\\n            \\\"Caller does not have the service role.\\\"\\r\\n        );\\r\\n\\r\\n        ERC20(USDTAddress).safeTransfer(vcUSDPoolAddress, _amount);\\r\\n        USDTClaimed = USDTClaimed.add(_amount);\\r\\n\\r\\n        vcUSDPool(vcUSDPoolAddress).sellVcUsdBackend(_amount);\\r\\n    }\\r\\n\\r\\n    /** @notice caluclate availeble amount of tokens for user\\r\\n     *\\r\\n     * Parameters:\\r\\n     *\\r\\n     *  @param _user - address of user\\r\\n     */\\r\\n    function calcAvailableAmount(address _user)\\r\\n        private\\r\\n        view\\r\\n        returns (uint256 availableToken)\\r\\n    {\\r\\n        UserInfo storage user = users[_user];\\r\\n\\r\\n        availableToken = (\\r\\n            user.amount.mul(locks[currentLockNumber].percent).div(100)\\r\\n        );\\r\\n\\r\\n        if (availableToken >= user.claimed) {\\r\\n            availableToken = availableToken.sub(user.claimed);\\r\\n        } else {\\r\\n            availableToken = 0;\\r\\n        }\\r\\n\\r\\n        return availableToken;\\r\\n    }\\r\\n\\r\\n    function getUserInfo(address _user)\\r\\n        external\\r\\n        view\\r\\n        returns (\\r\\n            uint256 amount_,\\r\\n            uint256 available_,\\r\\n            uint256 claimed_,\\r\\n            uint256 currentLockTime_\\r\\n        )\\r\\n    {\\r\\n        UserInfo storage user = users[_user];\\r\\n\\r\\n        uint256 newLock = currentLockNumber;\\r\\n        if (newLock <= locks.length - 2) {\\r\\n            while (block.timestamp >= locks[newLock + 1].unlockDate) {\\r\\n                newLock = newLock + 1;\\r\\n                if (newLock == 9) {\\r\\n                    break;\\r\\n                }\\r\\n            }\\r\\n        }\\r\\n        amount_ = user.amount;\\r\\n        claimed_ = user.claimed;\\r\\n        available_ = (user.amount.mul(locks[newLock].percent).div(100));\\r\\n\\r\\n        if (available_ >= user.claimed) {\\r\\n            available_ = available_.sub(user.claimed);\\r\\n        } else {\\r\\n            available_ = 0;\\r\\n        }\\r\\n\\r\\n        if (newLock == locks.length - 1) {\\r\\n            currentLockTime_ = locks[newLock].unlockDate;\\r\\n        } else {\\r\\n            currentLockTime_ = locks[newLock + 1].unlockDate;\\r\\n        }\\r\\n\\r\\n        return (amount_, available_, claimed_, currentLockTime_);\\r\\n    }\\r\\n\\r\\n    function getRoundState() external view returns (bool) {\\r\\n        return swapUnlocked;\\r\\n    }\\r\\n\\r\\n    function removeToken(\\r\\n        address _recepient,\\r\\n        uint256 _amount,\\r\\n        address tokenAddress\\r\\n    ) external {\\r\\n        require(hasRole(ADMIN_ROLE, msg.sender), \\\"Caller is not an admin\\\");\\r\\n        require(\\r\\n            _amount <= ERC20(tokenAddress).balanceOf(address(this)),\\r\\n            \\\"Amount must be <= balanceOf(this contract).\\\"\\r\\n        );\\r\\n        ERC20(tokenAddress).safeTransfer(_recepient, _amount);\\r\\n    }\\r\\n\\r\\n    function updateLock(\\r\\n        uint256 _index,\\r\\n        uint256 _percent,\\r\\n        uint256 _unlockDate\\r\\n    ) external {\\r\\n        require(hasRole(ADMIN_ROLE, msg.sender), \\\"Caller is not an admin\\\");\\r\\n        locks[_index].percent = _percent;\\r\\n        locks[_index].unlockDate = _unlockDate;\\r\\n    }\\r\\n\\r\\n    function updateUserInfo(\\r\\n        address _user,\\r\\n        uint256 _amount,\\r\\n        uint256 _claimed\\r\\n    ) external {\\r\\n        require(hasRole(ADMIN_ROLE, msg.sender), \\\"Caller is not an admin\\\");\\r\\n        UserInfo storage user = users[_user];\\r\\n        user.amount = _amount;\\r\\n        user.claimed = _claimed;\\r\\n    }\\r\\n\\r\\n    function updateTokenAddress(address _govTokenAddress) external {\\r\\n        require(hasRole(ADMIN_ROLE, msg.sender), \\\"Caller is not an admin\\\");\\r\\n        govTokenAddress = _govTokenAddress;\\r\\n    }\\r\\n\\r\\n    /** @dev claim usdt from this contract\\r\\n     *\\r\\n     * Parameters:\\r\\n     *\\r\\n     *  - `usdtReceiver` - address, who gets USDT tokens\\r\\n     */\\r\\n    function claimUSDT(address _usdtReceiver) external {\\r\\n        require(hasRole(ADMIN_ROLE, msg.sender), \\\"Caller is not an admin\\\");\\r\\n        require(USDTReceived > 0, \\\"Not enough USDT to claim\\\");\\r\\n        ERC20(USDTAddress).safeTransfer(\\r\\n            _usdtReceiver,\\r\\n            USDTReceived.sub(USDTClaimed)\\r\\n        );\\r\\n        USDTClaimed = USDTClaimed.add(USDTReceived.sub(USDTClaimed));\\r\\n    }\\r\\n\\r\\n    function getInfoAboutUsdt()\\r\\n        external\\r\\n        view\\r\\n        returns (uint256 USDTReceived_, uint256 USDTClaimed_)\\r\\n    {\\r\\n        USDTReceived_ = USDTReceived;\\r\\n        USDTClaimed_ = USDTClaimed;\\r\\n        return (USDTReceived_, USDTClaimed_);\\r\\n    }\\r\\n\\r\\n    /** @dev returns current rate for contract\\r\\n     *\\r\\n     */\\r\\n    function getRate() external view returns (uint256) {\\r\\n        return rate;\\r\\n    }\\r\\n\\r\\n    /** @dev update rates\\r\\n     *\\r\\n     * Parameters:\\r\\n     *\\r\\n     *  - `_rate` - rate, for example: 400000 = 0.04$\\r\\n     */\\r\\n    function updateRate(uint256 _rate) public {\\r\\n        require(hasRole(ADMIN_ROLE, msg.sender), \\\"Caller is not an admin\\\");\\r\\n        rate = _rate;\\r\\n    }\\r\\n\\r\\n    function updateVcUsdPoolAddress(address _vcUSDPoolAddress) external {\\r\\n        require(hasRole(ADMIN_ROLE, msg.sender), \\\"Caller is not an admin\\\");\\r\\n        vcUSDPoolAddress = _vcUSDPoolAddress;\\r\\n    }\\r\\n\\r\\n    // amount in usdt\\r\\n    function updateMinimum(uint256 _minAmountToBuy) external {\\r\\n        require(hasRole(ADMIN_ROLE, msg.sender), \\\"Caller is not an admin\\\");\\r\\n        minAmountToBuy = _minAmountToBuy;\\r\\n    }\\r\\n\\r\\n    //amount in gov token\\r\\n    function updateMaximum(uint256 _maxAmountToBuy) external {\\r\\n        require(hasRole(ADMIN_ROLE, msg.sender), \\\"Caller is not an admin\\\");\\r\\n        maxAmountToBuy = _maxAmountToBuy;\\r\\n    }\\r\\n\\r\\n    function updateCurrentLockNumber(uint256 _newCurrentLock) external {\\r\\n        require(hasRole(ADMIN_ROLE, msg.sender), \\\"Caller is not an admin\\\");\\r\\n        currentLockNumber = _newCurrentLock;\\r\\n    }\\r\\n\\r\\n    function migrateUsers(\\r\\n        address[] memory _users,\\r\\n        uint256[] memory _amounts,\\r\\n        uint256[] memory _claimed\\r\\n    ) external {\\r\\n        require(hasRole(ADMIN_ROLE, msg.sender), \\\"Caller is not an admin\\\");\\r\\n        require(\\r\\n            _users.length == _amounts.length,\\r\\n            \\\"Array users and amounts must be the same length!\\\"\\r\\n        );\\r\\n        require(\\r\\n            _users.length == _claimed.length,\\r\\n            \\\"Array users and claimed must be the same length!\\\"\\r\\n        );\\r\\n\\r\\n        for (uint256 i = 0; i < _users.length; i++) {\\r\\n            UserInfo storage user = users[_users[i]];\\r\\n            user.amount = _amounts[i];\\r\\n            user.claimed = _claimed[i];\\r\\n        }\\r\\n    }\\r\\n\\r\\n    function setClaimState(bool _state) external {\\r\\n        require(hasRole(ADMIN_ROLE, msg.sender), \\\"Caller is not an admin\\\");\\r\\n        claimUnlocked = _state;\\r\\n    }\\r\\n\\r\\n    function updateTotalAmount(uint256 _totalAmount) external {\\r\\n        require(hasRole(ADMIN_ROLE, msg.sender), \\\"Caller is not an admin\\\");\\r\\n        totalAmount = _totalAmount;\\r\\n    }\\r\\n\\r\\n    function updateTotalSold(uint256 _totalSold) external {\\r\\n        require(hasRole(ADMIN_ROLE, msg.sender), \\\"Caller is not an admin\\\");\\r\\n        totalSold = _totalSold;\\r\\n    }\\r\\n\\r\\n    function updateFactor(uint256 _factor) external {\\r\\n        require(hasRole(ADMIN_ROLE, msg.sender), \\\"Caller is not an admin\\\");\\r\\n        factor = _factor;\\r\\n    }\\r\\n\\r\\n    function updateUSDTReceived(uint256 _usdtReceived) external {\\r\\n        require(hasRole(ADMIN_ROLE, msg.sender), \\\"Caller is not an admin\\\");\\r\\n        USDTReceived = _usdtReceived;\\r\\n    }\\r\\n\\r\\n    function updateUSDTClaimed(uint256 _usdtClaimed) external {\\r\\n        require(hasRole(ADMIN_ROLE, msg.sender), \\\"Caller is not an admin\\\");\\r\\n        USDTClaimed = _usdtClaimed;\\r\\n    }\\r\\n}\\r\\n\"\r\n    }\r\n  },\r\n  \"settings\": {\r\n    \"optimizer\": {\r\n      \"enabled\": true,\r\n      \"runs\": 200\r\n    },\r\n    \"outputSelection\": {\r\n      \"*\": {\r\n        \"*\": [\r\n          \"evm.bytecode\",\r\n          \"evm.deployedBytecode\",\r\n          \"devdoc\",\r\n          \"userdoc\",\r\n          \"metadata\",\r\n          \"abi\"\r\n        ]\r\n      }\r\n    },\r\n    \"libraries\": {}\r\n  }\r\n}}","ABI":"[{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_govTokenAddress\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_USDTAddress\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_rate\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_totalAmount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_maxAmountToBuy\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"_vcUSDPoolAddress\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_usdtReceived\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_usdtClaimed\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"previousAdminRole\",\"type\":\"bytes32\"},{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"newAdminRole\",\"type\":\"bytes32\"}],\"name\":\"RoleAdminChanged\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"}],\"name\":\"RoleGranted\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"}],\"name\":\"RoleRevoked\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"bool\",\"name\":\"state\",\"type\":\"bool\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"time\",\"type\":\"uint256\"}],\"name\":\"RoundStateChanged\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"usdAmount\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"daovcAmount\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"time\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"string\",\"name\":\"userId\",\"type\":\"string\"}],\"name\":\"TokenExchanged\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"daovcAmount\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"time\",\"type\":\"uint256\"}],\"name\":\"TokenExchangedFiat\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"claimer\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amountClaimed\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"time\",\"type\":\"uint256\"}],\"name\":\"TokensClaimed\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"ADMIN_ROLE\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"AMOUNT_USD\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"DEFAULT_ADMIN_ROLE\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"SERVICE_ROLE\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"USDTAddress\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"USDTClaimed\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"USDTReceived\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256[]\",\"name\":\"_unlockDate\",\"type\":\"uint256[]\"},{\"internalType\":\"uint256[]\",\"name\":\"_percent\",\"type\":\"uint256[]\"}],\"name\":\"addLock\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"claim\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_usdtReceiver\",\"type\":\"address\"}],\"name\":\"claimUSDT\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"claimUnlocked\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"factor\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getInfoAboutUsdt\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"USDTReceived_\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"USDTClaimed_\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getRate\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"}],\"name\":\"getRoleAdmin\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"internalType\":\"uint256\",\"name\":\"index\",\"type\":\"uint256\"}],\"name\":\"getRoleMember\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"}],\"name\":\"getRoleMemberCount\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getRoundState\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_user\",\"type\":\"address\"}],\"name\":\"getUserInfo\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"amount_\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"available_\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"claimed_\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"currentLockTime_\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"govTokenAddress\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"grantRole\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"hasRole\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"locks\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"unlockDate\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"percent\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"maxAmountToBuy\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address[]\",\"name\":\"_users\",\"type\":\"address[]\"},{\"internalType\":\"uint256[]\",\"name\":\"_amounts\",\"type\":\"uint256[]\"},{\"internalType\":\"uint256[]\",\"name\":\"_claimed\",\"type\":\"uint256[]\"}],\"name\":\"migrateUsers\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"rate\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"ratesPrecision\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_recepient\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"tokenAddress\",\"type\":\"address\"}],\"name\":\"removeToken\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"renounceRole\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"revokeRole\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"sendUsdtToPool\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bool\",\"name\":\"_state\",\"type\":\"bool\"}],\"name\":\"setClaimState\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bool\",\"name\":\"_state\",\"type\":\"bool\"}],\"name\":\"setRoundState\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"hashedMessage\",\"type\":\"bytes32\"},{\"internalType\":\"string\",\"name\":\"_userId\",\"type\":\"string\"},{\"internalType\":\"uint256\",\"name\":\"_sequence\",\"type\":\"uint256\"},{\"internalType\":\"uint8\",\"name\":\"_v\",\"type\":\"uint8\"},{\"internalType\":\"bytes32\",\"name\":\"_r\",\"type\":\"bytes32\"},{\"internalType\":\"bytes32\",\"name\":\"_s\",\"type\":\"bytes32\"}],\"name\":\"swap\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_user\",\"type\":\"address\"}],\"name\":\"swapBackend\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"swapUnlocked\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"swapsCount\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalAmount\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalSold\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_newCurrentLock\",\"type\":\"uint256\"}],\"name\":\"updateCurrentLockNumber\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_factor\",\"type\":\"uint256\"}],\"name\":\"updateFactor\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_index\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_percent\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_unlockDate\",\"type\":\"uint256\"}],\"name\":\"updateLock\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_maxAmountToBuy\",\"type\":\"uint256\"}],\"name\":\"updateMaximum\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_rate\",\"type\":\"uint256\"}],\"name\":\"updateRate\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_govTokenAddress\",\"type\":\"address\"}],\"name\":\"updateTokenAddress\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_totalAmount\",\"type\":\"uint256\"}],\"name\":\"updateTotalAmount\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_totalSold\",\"type\":\"uint256\"}],\"name\":\"updateTotalSold\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_usdtClaimed\",\"type\":\"uint256\"}],\"name\":\"updateUSDTClaimed\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_usdtReceived\",\"type\":\"uint256\"}],\"name\":\"updateUSDTReceived\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_user\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_claimed\",\"type\":\"uint256\"}],\"name\":\"updateUserInfo\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_vcUSDPoolAddress\",\"type\":\"address\"}],\"name\":\"updateVcUsdPoolAddress\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"users\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"claimed\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"vcUSDPoolAddress\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"}]","ContractName":"WalletTokensalePublic","CompilerVersion":"v0.6.12+commit.27d51765","OptimizationUsed":"1","Runs":"200","ConstructorArguments":"000000000000000000000000284b59cf2539544559c6efa11e2795e06d535345000000000000000000000000dac17f958d2ee523a2206206994597c13d831ec700000000000000000000000000000000000000000000000000000000000d6d800000000000000000000000000000000000000000000120c2db0e1ad42a50000000000000000000000000000000000000000000000000013405971f7949880000000000000000000000000000fea4d6e08d4048f0c93ccf0738b1a018a78be8dc00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000","EVMVersion":"Default","Library":"","LicenseType":"","Proxy":"0","Implementation":"","SwarmSource":""}]}