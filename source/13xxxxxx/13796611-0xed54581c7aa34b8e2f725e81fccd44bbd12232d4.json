{"status":"1","message":"OK","result":[{"SourceCode":"{{\r\n  \"language\": \"Solidity\",\r\n  \"sources\": {\r\n    \"contracts/PepePenguin.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\r\\n\\r\\npragma solidity ^0.8.0;\\r\\n\\r\\nimport \\\"./LPBasic.sol\\\";\\r\\n\\r\\ncontract PepePenguin is LPBasic {\\r\\n\\r\\n\\t\\tconstructor(string memory name, string memory symbol, uint256 supply) LPBasic(name, symbol, supply) { }\\r\\n\\r\\n}\\r\\n\\r\\n/* Welcome To PepePenguin!\\r\\n *\\r\\n * -------------------------------------------------------------------------------------------------------------------\\r\\n *\\r\\n * PepePenguin ($PP)\\r\\n * PepePenguin.io\\r\\n * twitter.com/PPepe_Penguin\\r\\n * t.me/PepePenguinTG\\r\\n *\\r\\n * -------------------------------------------------------------------------------------------------------------------\\r\\n *\\r\\n * PepePenguin ($PP) is a fully decentralized fair launch meme token that has been optimized for price appreciation.\\r\\n * PP collects a liquidity pool (LP) fee on each transaction that scales based on the LP size. Instead of immediately\\r\\n * depositing the LP fee back into the LP, PP optimizes the rate of deposit to increase or decrease the token's\\r\\n * volatility (speed at which the price moves) depending on the token's current value. In simple terms, PP increases\\r\\n * the speed of price appreciation in price zones of optimal price appreciation and decreases the speed of price\\r\\n * deprecation in prices zone prone to consolidation. This is achieved by the contract holding the LP fee as a token\\r\\n * reserve and slowly depositing the LP pair fee into the LP in appreciating price zones and rapidly depositing during\\r\\n * price deprecation zones. In this way PP LP dynamics help drive the market price to a steady increase followed with\\r\\n * consolidation, boosting the next increase and damping any price reductions. Further, PP has re-engineered the fair\\r\\n * launch model to allow for an optimal token wallet distribution. PP limits the maximum purchase to 1,000,000 tokens\\r\\n * per wallet and the contract will collect any amount over the maximum adding to the token LP reserves. In addition,\\r\\n * the LP of the contract has been locked forever.\\r\\n *\\r\\n * -------------------------------------------------------------------------------------------------------------------\\r\\n *\\r\\n * Tokenomics breakdown\\r\\n *\\r\\n * Max Token Supply: 100,000,000\\r\\n *\\r\\n * IF LP < 5 ETH:\\r\\n * \\tLP TAX : 15%\\r\\n * \\tMax LP push is 250k token\\r\\n * \\tMax Wallet is 1M tokens - amount over max wallet is taxed 100% and sent to LP\\r\\n * \\tStandard transfers are not limited\\r\\n * \\t50% of pool size is max purchase size\\r\\n * \\t1.5% Dev Fee on every Transaction\\r\\n *\\r\\n * IF 5ETH < LP < 20ETH:\\r\\n * \\tLP TAX : 5%\\r\\n * \\tIF contract holds more tokens than LP, push greater of: 500,000 tokens or 5% pool balance\\r\\n * \\tELSE push lesser of: 250,000 tokens or 1% pool balance\\r\\n * \\tMax Wallet is 1M tokens - amount over max wallet is taxed 100% and sent to LP\\r\\n * \\tStandard transfers are not limited\\r\\n * \\t50% of pool size is max purchase size\\r\\n * \\t1.5% Dev Fee on every Transaction\\r\\n *\\r\\n * IF 20ETH < LP < 100ETH\\r\\n * \\tLP TAX : 2.5%\\r\\n * \\tMax LP push size of 1% pool balance\\r\\n * \\tMax Wallet is permanently disabled\\r\\n *  Max purchase size is permanently disabled\\r\\n * \\tStandard transfers are not limited\\r\\n * \\t1.5% Dev Fee on every Transaction\\r\\n *\\r\\n * IF 100ETH < LP\\r\\n *\\tNO LP TAX\\r\\n * \\tLP tax still held by contract push to LP size of 1% pool balance\\r\\n * \\tStandard transfers are not limited\\r\\n * \\t1.5% Dev Fee on every Transaction\\r\\n *\\r\\n */\"\r\n    },\r\n    \"contracts/LPBasic.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\r\\n\\r\\npragma solidity ^0.8.0;\\r\\n\\r\\nimport \\\"@openzeppelin/contracts/utils/Address.sol\\\";\\r\\nimport \\\"@openzeppelin/contracts/access/Ownable.sol\\\";\\r\\n\\r\\nimport \\\"@uniswap/v2-periphery/contracts/interfaces/IUniswapV2Router02.sol\\\";\\r\\nimport \\\"@uniswap/v2-core/contracts/interfaces/IUniswapV2Pair.sol\\\";\\r\\nimport \\\"@uniswap/v2-core/contracts/interfaces/IUniswapV2Factory.sol\\\";\\r\\n\\r\\nimport './ERC20.sol';\\r\\n\\r\\ncontract LPBasic is Ownable, ERC20 {\\r\\n\\t\\tusing Address for address;\\r\\n\\r\\n\\t\\taddress payable internal _devWallet;\\r\\n\\t\\tfunction setDevWallet(address payable devwallet) public onlyOwner { _devWallet = devwallet; }\\r\\n\\r\\n\\t\\t/* --- rate configuration --- */\\r\\n\\r\\n\\t\\tuint256 internal constant _rateDivisor =  1000000;  // rate at this value = 100%\\r\\n\\r\\n\\t\\tuint256 internal _lpRateA  =      150000;\\r\\n\\t\\tuint256 internal _lpRateB  =       50000;\\r\\n\\t\\tuint256 internal _lpRateC  =       25000;\\r\\n\\r\\n\\t\\tuint256 internal _lpTierA  = 5 * (10 ** 18);\\r\\n\\t\\tuint256 internal _lpTierB  = 20 * (10 ** 18);\\r\\n\\t\\tuint256 internal _lpTierC  = 100 * (10 ** 18);\\r\\n\\r\\n\\t\\tuint256 internal _lpPendingBalance;\\r\\n\\t\\tfunction pendingBalanceLP() public view returns(uint256) { return _lpPendingBalance; }\\r\\n\\t\\t\\r\\n\\t\\tuint256 internal _lpPendingThrottle = 250000 * (10 ** 18); // while LP ETH < 20ETH - MAX PUSH TO LP\\r\\n\\t\\t\\r\\n\\t\\t\\r\\n\\t\\tuint256 internal _txMaximum = 500000; // maximum tx size in % of current pool\\r\\n\\r\\n\\t\\tuint256 internal _walletMax = 1000000 * (10 ** 18); // while LP ETH < 20ETH - WALLET LIMIT\\r\\n\\t\\tuint256 internal _walletMaxTier = 20 * (10 ** 18);\\r\\n\\r\\n\\t\\tuint256 internal _devRate  =       15000;\\r\\n\\r\\n\\t\\tuint256 internal _devPendingBalance;\\r\\n\\t\\tfunction pendingBalanceDev() public view returns(uint256) { return _devPendingBalance; }\\r\\n\\r\\n\\t\\tbool _feePendingAlternate;\\r\\n\\t\\tuint256 internal _feePendingThreshold = 1 * (10 ** 16); // 0.01 ETH\\r\\n\\t\\t\\r\\n\\t\\t\\r\\n\\r\\n\\t\\t/* --- current state - once top tier is exited permanently inactive --- */\\r\\n\\r\\n\\t\\tbool internal _lpRateActive = true;\\r\\n\\t\\tbool internal _lpLimitActive = true;\\r\\n\\r\\n\\t\\tbool internal _tradingEnabled = false;\\r\\n\\t\\tfunction setTradingEnabled() public onlyOwner { _tradingEnabled = true; }\\r\\n\\t\\t\\r\\n\\r\\n\\r\\n\\t\\t/* --- uniswap v2 - router and pair configurable - no fees will be charged until pair is set --- */\\r\\n\\r\\n\\t\\taddress _uniswapFactoryAddress = 0x5C69bEe701ef814a2B6a3EDD4B1652CB9cc5aA6f;\\r\\n\\t\\taddress _uniswapRouterAddress = 0x7a250d5630B4cF539739dF2C5dAcb4c659F2488D;\\r\\n\\t\\tfunction setRouterAddress(address routeraddress) public onlyOwner { _uniswapRouterAddress = routeraddress; }\\r\\n\\t\\taddress internal _uniswapPairAddress;\\r\\n\\t\\tfunction setPairAddress(address pairaddress) public onlyOwner { _uniswapPairAddress = pairaddress; }\\r\\n\\t\\tfunction getPairAddress() public view returns(address) { return _uniswapPairAddress; }\\r\\n\\r\\n\\t\\taddress internal _tokenAddressWETH;\\r\\n\\t\\t\\r\\n\\t\\t\\r\\n\\t\\tbool _locked;\\r\\n    modifier locked() {\\r\\n        require(!_locked,\\\"LPBasic: Blocked reentrant call.\\\");\\r\\n        _locked = true;\\r\\n        _;\\r\\n        _locked = false;\\r\\n    }\\r\\n\\r\\n\\r\\n\\t\\tconstructor(string memory name, string memory symbol, uint256 supply) ERC20(name, symbol) {\\r\\n\\t\\t\\t\\t_mint(address(this),supply);\\r\\n\\t\\t\\t\\t_tokenAddressWETH = IUniswapV2Router02(_uniswapRouterAddress).WETH();\\r\\n\\t\\t}\\r\\n\\r\\n\\r\\n\\t\\t/* --- transfer functions --- */\\r\\n\\r\\n\\t\\tfunction transfer(address recipient, uint256 amount) public virtual override returns (bool) {\\r\\n\\t\\t\\t\\t_transfer(_msgSender(), recipient, amount);\\r\\n\\t\\t\\t\\treturn true;\\r\\n\\t\\t}\\r\\n\\r\\n\\t\\tfunction transferFrom(address sender, address recipient, uint256 amount) public virtual override returns (bool) {\\r\\n\\t\\t\\t\\t_transfer(sender, recipient, amount);\\r\\n\\t\\t\\t\\tuint256 currentAllowance = _allowances[sender][_msgSender()];\\r\\n\\t\\t\\t\\trequire(currentAllowance >= amount, \\\"ERC20: transfer amount exceeds allowance\\\");\\r\\n\\t\\t\\t\\tunchecked {\\r\\n\\t\\t\\t\\t\\t\\t_approve(sender, _msgSender(), currentAllowance - amount);\\r\\n\\t\\t\\t\\t}\\r\\n\\t\\t\\t\\treturn true;\\r\\n\\t\\t}\\r\\n\\r\\n\\t\\tfunction _transfer( address sender, address recipient, uint256 amount ) internal virtual override {\\r\\n\\r\\n\\t\\t\\t\\trequire(sender != address(0), \\\"ERC20: transfer from the zero address\\\");\\r\\n\\t\\t\\t\\trequire(recipient != address(0), \\\"ERC20: transfer to the zero address\\\");\\r\\n\\t\\t\\t\\trequire(_balances[sender] >= amount, \\\"ERC20: transfer amount exceeds balance\\\");\\r\\n\\r\\n\\t\\t\\t\\t(bool isTaxed, bool isSell, uint256 lpToken, uint256 lpEth) = _isTaxed(sender,recipient);\\r\\n\\t\\t\\t\\tif(isTaxed) require(amount < _transferMaximum(lpToken,lpEth),\\\"LPBasic: amount exceeds maximum allowed\\\");\\r\\n\\r\\n\\t\\t\\t\\tif(isTaxed) {\\r\\n\\t\\t\\t\\t\\t\\trequire(_tradingEnabled, \\\"LPBasic: trading has not been enabled\\\");\\r\\n\\t\\t\\t\\t\\t\\t_transferTaxed(sender,recipient,amount,lpToken,lpEth,isSell);\\r\\n\\t\\t\\t\\t}\\r\\n\\t\\t\\t\\telse _transferUntaxed(sender,recipient,amount);\\r\\n\\r\\n\\t\\t}\\r\\n\\t\\t\\r\\n\\t\\tfunction _transferMaximum(uint256 lpToken, uint256 lpEth) internal view returns(uint256 transferMax) {\\r\\n\\t\\t\\t\\tif(!_lpLimitActive) return _totalSupply;\\r\\n\\t\\t\\t\\telse transferMax = _txMaximum * lpToken / _rateDivisor;\\r\\n\\t\\t}\\r\\n\\r\\n\\t\\tfunction _isTaxed(address sender, address recipient) internal returns(bool isTaxed,bool isSell,uint256 tokenReserves,uint256 ethReserves) {\\r\\n\\r\\n\\t\\t\\t\\tif(sender==address(this) || recipient==address(this)) return (false,false,0,0);\\r\\n\\r\\n\\t\\t\\t\\tif((sender == _uniswapPairAddress && recipient == _uniswapRouterAddress)\\r\\n\\t\\t\\t\\t\\t\\t|| (recipient == _uniswapPairAddress && sender == _uniswapRouterAddress))\\r\\n\\t\\t\\t\\t\\t\\treturn (false,false,0,0);\\r\\n\\r\\n\\t\\t\\t\\tif(_uniswapPairAddress==address(0)) return (false,false,0,0);\\r\\n\\r\\n\\t\\t\\t\\tbool isBuy = sender==_uniswapRouterAddress || sender==_uniswapPairAddress;\\r\\n\\t\\t\\t\\tisSell = recipient==_uniswapRouterAddress || recipient==_uniswapPairAddress;\\r\\n\\r\\n\\t\\t\\t\\tisTaxed = isBuy || isSell;\\r\\n\\r\\n\\t\\t\\t\\tif(isTaxed) {\\r\\n\\t\\t\\t\\t\\t\\t(tokenReserves,ethReserves) = _getReserves();\\r\\n\\r\\n\\t\\t\\t\\t\\t\\tif(_lpLimitActive && ethReserves > _walletMaxTier) _lpLimitActive = false;\\r\\n\\r\\n\\t\\t\\t\\t\\t\\t// one way switch disabled - lp fee can turn back on when eth balance returns to tier c\\r\\n\\t\\t\\t\\t\\t\\t//if(_lpRateActive && ethReserves > _lpTierC) _lpRateActive = false;\\r\\n\\t\\t\\t\\t}\\r\\n\\t\\t}\\r\\n\\t\\t\\r\\n\\t\\tfunction _getReserves() internal returns(uint256 tokenReserves,uint256 ethReserves) {\\r\\n\\t\\t\\t\\t(uint256 reserve0,uint256 reserve1,) = IUniswapV2Pair(_uniswapPairAddress).getReserves();\\r\\n\\t\\t\\t\\tif(IUniswapV2Pair(_uniswapPairAddress).token0()==address(this)) {\\r\\n\\t\\t\\t\\t\\t\\ttokenReserves = reserve0;\\r\\n\\t\\t\\t\\t\\t\\tethReserves = reserve1;\\r\\n\\t\\t\\t\\t} else {\\r\\n\\t\\t\\t\\t\\t\\tethReserves = reserve0;\\r\\n\\t\\t\\t\\t\\t\\ttokenReserves = reserve1;\\r\\n\\t\\t\\t\\t}\\r\\n\\t\\t}\\r\\n\\r\\n\\t\\tfunction _transferUntaxed( address sender, address recipient, uint256 amount ) internal {\\r\\n\\t\\t\\t\\t_beforeTokenTransfer(sender, recipient, amount);\\r\\n\\t\\t\\t\\t_balances[sender] -= amount;\\r\\n\\t\\t\\t\\t_balances[recipient] += amount;\\r\\n\\t\\t\\t\\temit Transfer(sender, recipient, amount);\\r\\n\\t\\t\\t\\t_afterTokenTransfer(sender, recipient, amount);\\r\\n\\t\\t}\\r\\n\\r\\n\\t\\tfunction _lpTaxRate(uint256 ethBalance) internal view returns(uint256 _taxRate) {\\r\\n\\t\\t\\t\\tif(_lpRateActive) {\\r\\n\\t\\t\\t\\t\\t\\tif(ethBalance < _lpTierA) { _taxRate = _lpRateA; }\\r\\n\\t\\t\\t\\t\\t\\telse if(ethBalance < _lpTierB) { _taxRate = _lpRateB; }\\r\\n\\t\\t\\t\\t\\t\\telse if(ethBalance < _lpTierC) { _taxRate = _lpRateC; }\\r\\n\\t\\t\\t\\t\\t\\telse { _taxRate = 0; }\\r\\n\\t\\t\\t\\t}\\r\\n\\t\\t}\\r\\n\\r\\n\\t\\tfunction _transferTaxed( address sender, address recipient, uint256 amount, uint256 lpTokenBalance, uint256 lpEthBalance, bool isSell ) internal {\\r\\n\\t\\t\\t\\t\\r\\n\\t\\t\\t\\tif(isSell) {\\r\\n\\t\\t\\t\\t\\t\\tbool pendingDevReady = (_devPendingBalance * lpEthBalance / lpTokenBalance) > _feePendingThreshold;\\r\\n\\t\\t\\t\\t\\t\\tbool pendingLpReady = (_lpPendingBalance * lpEthBalance / lpTokenBalance) > _feePendingThreshold;\\r\\n\\t\\t\\t\\t\\t\\tbool pendingReady = pendingDevReady || pendingLpReady;\\r\\n\\t\\t\\t\\t\\t\\tif(!_locked && isSell && pendingReady) {\\r\\n\\t\\t\\t\\t\\t\\t\\t\\tif(!pendingLpReady || (_feePendingAlternate && pendingDevReady)) {\\r\\n\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t_convertTaxDev();\\r\\n\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t_feePendingAlternate = false;\\r\\n\\t\\t\\t\\t\\t\\t\\t\\t}\\r\\n\\t\\t\\t\\t\\t\\t\\t\\telse {\\r\\n\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t_processTaxLP(lpTokenBalance,lpEthBalance);\\r\\n\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t_feePendingAlternate = true;\\r\\n\\t\\t\\t\\t\\t\\t\\t\\t}\\r\\n\\t\\t\\t\\t\\t\\t}\\r\\n\\t\\t\\t\\t}\\r\\n\\r\\n\\t\\t\\t\\tuint256 taxRate = _lpTaxRate(lpEthBalance);\\r\\n\\t\\t\\t\\t\\r\\n\\t\\t\\t\\tuint256 taxAmount = (taxRate>0 ? amount * taxRate / _rateDivisor : 0);\\r\\n\\t\\t\\t\\tuint256 devAmount = amount * _devRate / _rateDivisor;\\r\\n\\r\\n\\t\\t\\t\\t_balances[sender] -= amount;\\r\\n\\r\\n\\t\\t\\t\\tuint256 recAmount = amount - (taxAmount + devAmount);\\r\\n\\r\\n\\t\\t\\t\\tif(!isSell && _lpLimitActive && (_balances[recipient] + recAmount) > _walletMax) {\\r\\n\\t\\t\\t\\t\\t\\tuint256 overMax = (_balances[recipient] > _walletMax ? recAmount : _balances[recipient] + recAmount - _walletMax);\\r\\n\\t\\t\\t\\t\\t\\trecAmount -= overMax;\\r\\n\\t\\t\\t\\t\\t\\ttaxAmount += overMax;\\r\\n\\t\\t\\t\\t}\\r\\n\\r\\n\\t\\t\\t\\tif(recAmount>0) {\\r\\n\\t\\t\\t\\t\\t\\t_balances[recipient] += recAmount;\\r\\n\\t\\t\\t\\t\\t\\temit Transfer(sender, recipient, recAmount);\\r\\n\\t\\t\\t\\t}\\r\\n\\t\\t\\t\\tif(taxAmount>0) {\\r\\n\\t\\t\\t\\t\\t\\t_balances[address(this)] += taxAmount;\\r\\n\\t\\t\\t\\t\\t\\t_lpPendingBalance += taxAmount;\\r\\n\\t\\t\\t\\t\\t\\temit Transfer(sender, address(this), taxAmount);\\r\\n\\t\\t\\t\\t}\\r\\n\\t\\t\\t\\tif(devAmount>0) {\\r\\n\\t\\t\\t\\t\\t\\t_balances[address(this)] += devAmount;\\r\\n\\t\\t\\t\\t\\t\\t_devPendingBalance += devAmount;\\r\\n\\t\\t\\t\\t\\t\\temit Transfer(sender, address(this), devAmount);\\r\\n\\t\\t\\t\\t}\\r\\n\\t\\t}\\r\\n\\r\\n\\t\\tfunction _convertTaxDev() internal locked {\\r\\n\\t\\t\\t\\t(uint256 tokenDelta,) = _swapTokensForEth(_devPendingBalance, _devWallet);\\r\\n\\t\\t\\t\\t_devPendingBalance -= tokenDelta;\\r\\n\\t\\t}\\r\\n\\r\\n\\t\\tfunction _processTaxLP(uint256 poolTokenBalance, uint256 poolEthBalance) internal locked {\\r\\n\\t\\t\\t\\t\\r\\n\\t\\t\\t\\tuint256 ethBalance = address(this).balance;\\r\\n\\t\\t\\t\\tuint256 ethBalanceValue = (ethBalance * poolTokenBalance) / poolEthBalance;\\r\\n\\t\\t\\t\\tuint256 ethDelta;\\r\\n\\t\\t\\t\\tuint256 tokenDelta;\\r\\n\\t\\t\\t\\t\\r\\n\\t\\t\\t\\tuint256 lpPendingThreshold = pendingThreshold(poolTokenBalance,poolEthBalance);\\r\\n\\t\\t\\t\\t\\r\\n\\t\\t\\t\\tuint256 pendingAmount = ( (_lpPendingBalance>lpPendingThreshold) ? lpPendingThreshold : _lpPendingBalance );\\r\\n\\t\\t\\t\\tif(ethBalanceValue<pendingAmount) {\\r\\n\\t\\t\\t\\t\\t\\tuint256 ethConvert = ((pendingAmount + ethBalanceValue) / 2) - ethBalanceValue;\\r\\n\\t\\t\\t\\t\\t\\t(tokenDelta,ethDelta) = _swapTokensForEth(ethConvert,address(this));\\r\\n\\t\\t\\t\\t}\\r\\n\\t\\t\\t\\t(uint256 tokenDeposit,) = _addLiquidity(pendingAmount-tokenDelta,ethDelta+ethBalance);\\r\\n\\t\\t\\t\\t_lpPendingBalance -= (tokenDelta + tokenDeposit);\\r\\n\\t\\t}\\r\\n\\t\\t\\r\\n\\t\\tfunction pendingThreshold(uint256 poolTokenBalance,uint256 poolEthBalance) internal returns(uint256 threshold) {\\r\\n\\t\\t\\t\\tif( poolTokenBalance < _balances[address(this)] && poolEthBalance < (20 * (10 ** 18)) && poolEthBalance > (5 * (10 ** 18)) )\\r\\n\\t\\t\\t\\t\\t\\tthreshold = ( ( (_lpPendingThrottle * 2) > ( (poolTokenBalance * 5) / 100 )) ? _lpPendingThrottle * 2 : ( (poolTokenBalance * 5) / 100 ) );\\r\\n\\t\\t\\t\\telse if(poolEthBalance < (5 * (10 ** 18)) ) threshold = _lpPendingThrottle;\\r\\n\\t\\t\\t\\telse if(poolEthBalance > (20 * (10 ** 18)) ) threshold = poolTokenBalance / 100;\\r\\n\\t\\t\\t\\telse threshold = ( ( _lpPendingThrottle < ( poolTokenBalance / 100 )) ? _lpPendingThrottle : ( poolTokenBalance / 100 ) );\\r\\n\\t\\t}\\r\\n\\r\\n\\r\\n\\r\\n\\t\\tfunction _swapTokensForEth(uint256 tokenAmount, address destination) internal returns(uint256 tokenDelta, uint256 ethDelta) {\\r\\n\\r\\n\\t\\t\\t\\t(uint256 tokenReserve, uint256 ethReserve) = _getReserves();\\r\\n\\r\\n\\t\\t\\t\\t_approve(address(this), _uniswapRouterAddress, tokenAmount);\\r\\n\\r\\n\\t\\t\\t\\taddress[] memory path = new address[](2);\\r\\n\\t\\t\\t\\tpath[0] = address(this);\\r\\n\\t\\t\\t\\tpath[1] = _tokenAddressWETH;\\r\\n\\r\\n\\r\\n\\t\\t\\t\\tIUniswapV2Router02(_uniswapRouterAddress).swapExactTokensForETHSupportingFeeOnTransferTokens(\\r\\n\\t\\t\\t\\t\\t\\ttokenAmount,\\r\\n\\t\\t\\t\\t\\t\\t0,\\r\\n\\t\\t\\t\\t\\t\\tpath,\\r\\n\\t\\t\\t\\t\\t\\tdestination,\\r\\n\\t\\t\\t\\t\\t\\tblock.timestamp + 100\\r\\n\\t\\t\\t\\t);\\r\\n\\t\\t\\t\\t(uint256 tokenReserveAfter, uint256 ethReserveAfter) = _getReserves();\\r\\n\\r\\n\\t\\t\\t\\ttokenDelta = uint256(tokenReserveAfter-tokenReserve);\\r\\n\\t\\t\\t\\tethDelta = uint256(ethReserve-ethReserveAfter);\\r\\n\\t\\t}\\r\\n\\r\\n\\t\\tfunction _addLiquidity(uint256 tokenAmount, uint256 ethAmount) internal returns(uint256 tokenDeposit,uint256 ethDeposit) {\\r\\n\\t\\t\\t\\t_approve(address(this), _uniswapRouterAddress, tokenAmount);\\r\\n\\t\\t\\t\\t(tokenDeposit, ethDeposit,) = IUniswapV2Router02(_uniswapRouterAddress).addLiquidityETH{value:ethAmount}(\\r\\n\\t\\t\\t\\t\\t\\taddress(this),\\r\\n\\t\\t\\t\\t\\t\\ttokenAmount,\\r\\n\\t\\t\\t\\t\\t\\t0,\\r\\n\\t\\t\\t\\t\\t\\t0,\\r\\n\\t\\t\\t\\t\\t\\taddress(this),\\r\\n\\t\\t\\t\\t\\t\\tblock.timestamp + 100\\r\\n\\t\\t\\t\\t);\\r\\n\\t\\t}\\r\\n\\r\\n\\t\\tfunction initializeLiquidityPool() public payable onlyOwner {\\r\\n\\t\\t\\t\\trequire(_uniswapPairAddress==address(0),\\\"Pair address already set\\\");\\r\\n\\t\\t\\t\\tIUniswapV2Factory _factory = IUniswapV2Factory(_uniswapFactoryAddress);\\r\\n\\t\\t\\t\\t_factory.createPair(address(this),_tokenAddressWETH);\\r\\n\\t\\t\\t\\t_uniswapPairAddress = _factory.getPair(address(this),_tokenAddressWETH);\\r\\n\\t\\t\\t\\t_addLiquidity(_balances[address(this)], msg.value);\\r\\n\\t\\t}\\r\\n\\r\\n\\r\\n\\r\\n\\r\\n\\t\\treceive() external payable {}\\r\\n\\r\\n\\r\\n\\r\\n\\r\\n\\r\\n}\"\r\n    },\r\n    \"@openzeppelin/contracts/utils/Address.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Collection of functions related to the address type\\n */\\nlibrary Address {\\n    /**\\n     * @dev Returns true if `account` is a contract.\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * It is unsafe to assume that an address for which this function returns\\n     * false is an externally-owned account (EOA) and not a contract.\\n     *\\n     * Among others, `isContract` will return false for the following\\n     * types of addresses:\\n     *\\n     *  - an externally-owned account\\n     *  - a contract in construction\\n     *  - an address where a contract will be created\\n     *  - an address where a contract lived, but was destroyed\\n     * ====\\n     */\\n    function isContract(address account) internal view returns (bool) {\\n        // This method relies on extcodesize, which returns 0 for contracts in\\n        // construction, since the code is only stored at the end of the\\n        // constructor execution.\\n\\n        uint256 size;\\n        assembly {\\n            size := extcodesize(account)\\n        }\\n        return size > 0;\\n    }\\n\\n    /**\\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\\n     * `recipient`, forwarding all available gas and reverting on errors.\\n     *\\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\\n     * imposed by `transfer`, making them unable to receive funds via\\n     * `transfer`. {sendValue} removes this limitation.\\n     *\\n     * https://diligence.consensys.net/posts/2019/09/stop-using-soliditys-transfer-now/[Learn more].\\n     *\\n     * IMPORTANT: because control is transferred to `recipient`, care must be\\n     * taken to not create reentrancy vulnerabilities. Consider using\\n     * {ReentrancyGuard} or the\\n     * https://solidity.readthedocs.io/en/v0.5.11/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\\n     */\\n    function sendValue(address payable recipient, uint256 amount) internal {\\n        require(address(this).balance >= amount, \\\"Address: insufficient balance\\\");\\n\\n        (bool success, ) = recipient.call{value: amount}(\\\"\\\");\\n        require(success, \\\"Address: unable to send value, recipient may have reverted\\\");\\n    }\\n\\n    /**\\n     * @dev Performs a Solidity function call using a low level `call`. A\\n     * plain `call` is an unsafe replacement for a function call: use this\\n     * function instead.\\n     *\\n     * If `target` reverts with a revert reason, it is bubbled up by this\\n     * function (like regular Solidity function calls).\\n     *\\n     * Returns the raw returned data. To convert to the expected return value,\\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\\n     *\\n     * Requirements:\\n     *\\n     * - `target` must be a contract.\\n     * - calling `target` with `data` must not revert.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionCall(target, data, \\\"Address: low-level call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\\n     * `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, 0, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but also transferring `value` wei to `target`.\\n     *\\n     * Requirements:\\n     *\\n     * - the calling contract must have an ETH balance of at least `value`.\\n     * - the called Solidity function must be `payable`.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, value, \\\"Address: low-level call with value failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\\n     * with `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        require(address(this).balance >= value, \\\"Address: insufficient balance for call\\\");\\n        require(isContract(target), \\\"Address: call to non-contract\\\");\\n\\n        (bool success, bytes memory returndata) = target.call{value: value}(data);\\n        return verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\\n        return functionStaticCall(target, data, \\\"Address: low-level static call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal view returns (bytes memory) {\\n        require(isContract(target), \\\"Address: static call to non-contract\\\");\\n\\n        (bool success, bytes memory returndata) = target.staticcall(data);\\n        return verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionDelegateCall(target, data, \\\"Address: low-level delegate call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        require(isContract(target), \\\"Address: delegate call to non-contract\\\");\\n\\n        (bool success, bytes memory returndata) = target.delegatecall(data);\\n        return verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Tool to verifies that a low level call was successful, and revert if it wasn't, either by bubbling the\\n     * revert reason using the provided one.\\n     *\\n     * _Available since v4.3._\\n     */\\n    function verifyCallResult(\\n        bool success,\\n        bytes memory returndata,\\n        string memory errorMessage\\n    ) internal pure returns (bytes memory) {\\n        if (success) {\\n            return returndata;\\n        } else {\\n            // Look for revert reason and bubble it up if present\\n            if (returndata.length > 0) {\\n                // The easiest way to bubble the revert reason is using memory via assembly\\n\\n                assembly {\\n                    let returndata_size := mload(returndata)\\n                    revert(add(32, returndata), returndata_size)\\n                }\\n            } else {\\n                revert(errorMessage);\\n            }\\n        }\\n    }\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/access/Ownable.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../utils/Context.sol\\\";\\n\\n/**\\n * @dev Contract module which provides a basic access control mechanism, where\\n * there is an account (an owner) that can be granted exclusive access to\\n * specific functions.\\n *\\n * By default, the owner account will be the one that deploys the contract. This\\n * can later be changed with {transferOwnership}.\\n *\\n * This module is used through inheritance. It will make available the modifier\\n * `onlyOwner`, which can be applied to your functions to restrict their use to\\n * the owner.\\n */\\nabstract contract Ownable is Context {\\n    address private _owner;\\n\\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\\n\\n    /**\\n     * @dev Initializes the contract setting the deployer as the initial owner.\\n     */\\n    constructor() {\\n        _setOwner(_msgSender());\\n    }\\n\\n    /**\\n     * @dev Returns the address of the current owner.\\n     */\\n    function owner() public view virtual returns (address) {\\n        return _owner;\\n    }\\n\\n    /**\\n     * @dev Throws if called by any account other than the owner.\\n     */\\n    modifier onlyOwner() {\\n        require(owner() == _msgSender(), \\\"Ownable: caller is not the owner\\\");\\n        _;\\n    }\\n\\n    /**\\n     * @dev Leaves the contract without owner. It will not be possible to call\\n     * `onlyOwner` functions anymore. Can only be called by the current owner.\\n     *\\n     * NOTE: Renouncing ownership will leave the contract without an owner,\\n     * thereby removing any functionality that is only available to the owner.\\n     */\\n    function renounceOwnership() public virtual onlyOwner {\\n        _setOwner(address(0));\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Can only be called by the current owner.\\n     */\\n    function transferOwnership(address newOwner) public virtual onlyOwner {\\n        require(newOwner != address(0), \\\"Ownable: new owner is the zero address\\\");\\n        _setOwner(newOwner);\\n    }\\n\\n    function _setOwner(address newOwner) private {\\n        address oldOwner = _owner;\\n        _owner = newOwner;\\n        emit OwnershipTransferred(oldOwner, newOwner);\\n    }\\n}\\n\"\r\n    },\r\n    \"@uniswap/v2-periphery/contracts/interfaces/IUniswapV2Router02.sol\": {\r\n      \"content\": \"pragma solidity >=0.6.2;\\n\\nimport './IUniswapV2Router01.sol';\\n\\ninterface IUniswapV2Router02 is IUniswapV2Router01 {\\n    function removeLiquidityETHSupportingFeeOnTransferTokens(\\n        address token,\\n        uint liquidity,\\n        uint amountTokenMin,\\n        uint amountETHMin,\\n        address to,\\n        uint deadline\\n    ) external returns (uint amountETH);\\n    function removeLiquidityETHWithPermitSupportingFeeOnTransferTokens(\\n        address token,\\n        uint liquidity,\\n        uint amountTokenMin,\\n        uint amountETHMin,\\n        address to,\\n        uint deadline,\\n        bool approveMax, uint8 v, bytes32 r, bytes32 s\\n    ) external returns (uint amountETH);\\n\\n    function swapExactTokensForTokensSupportingFeeOnTransferTokens(\\n        uint amountIn,\\n        uint amountOutMin,\\n        address[] calldata path,\\n        address to,\\n        uint deadline\\n    ) external;\\n    function swapExactETHForTokensSupportingFeeOnTransferTokens(\\n        uint amountOutMin,\\n        address[] calldata path,\\n        address to,\\n        uint deadline\\n    ) external payable;\\n    function swapExactTokensForETHSupportingFeeOnTransferTokens(\\n        uint amountIn,\\n        uint amountOutMin,\\n        address[] calldata path,\\n        address to,\\n        uint deadline\\n    ) external;\\n}\\n\"\r\n    },\r\n    \"@uniswap/v2-core/contracts/interfaces/IUniswapV2Pair.sol\": {\r\n      \"content\": \"pragma solidity >=0.5.0;\\n\\ninterface IUniswapV2Pair {\\n    event Approval(address indexed owner, address indexed spender, uint value);\\n    event Transfer(address indexed from, address indexed to, uint value);\\n\\n    function name() external pure returns (string memory);\\n    function symbol() external pure returns (string memory);\\n    function decimals() external pure returns (uint8);\\n    function totalSupply() external view returns (uint);\\n    function balanceOf(address owner) external view returns (uint);\\n    function allowance(address owner, address spender) external view returns (uint);\\n\\n    function approve(address spender, uint value) external returns (bool);\\n    function transfer(address to, uint value) external returns (bool);\\n    function transferFrom(address from, address to, uint value) external returns (bool);\\n\\n    function DOMAIN_SEPARATOR() external view returns (bytes32);\\n    function PERMIT_TYPEHASH() external pure returns (bytes32);\\n    function nonces(address owner) external view returns (uint);\\n\\n    function permit(address owner, address spender, uint value, uint deadline, uint8 v, bytes32 r, bytes32 s) external;\\n\\n    event Mint(address indexed sender, uint amount0, uint amount1);\\n    event Burn(address indexed sender, uint amount0, uint amount1, address indexed to);\\n    event Swap(\\n        address indexed sender,\\n        uint amount0In,\\n        uint amount1In,\\n        uint amount0Out,\\n        uint amount1Out,\\n        address indexed to\\n    );\\n    event Sync(uint112 reserve0, uint112 reserve1);\\n\\n    function MINIMUM_LIQUIDITY() external pure returns (uint);\\n    function factory() external view returns (address);\\n    function token0() external view returns (address);\\n    function token1() external view returns (address);\\n    function getReserves() external view returns (uint112 reserve0, uint112 reserve1, uint32 blockTimestampLast);\\n    function price0CumulativeLast() external view returns (uint);\\n    function price1CumulativeLast() external view returns (uint);\\n    function kLast() external view returns (uint);\\n\\n    function mint(address to) external returns (uint liquidity);\\n    function burn(address to) external returns (uint amount0, uint amount1);\\n    function swap(uint amount0Out, uint amount1Out, address to, bytes calldata data) external;\\n    function skim(address to) external;\\n    function sync() external;\\n\\n    function initialize(address, address) external;\\n}\\n\"\r\n    },\r\n    \"@uniswap/v2-core/contracts/interfaces/IUniswapV2Factory.sol\": {\r\n      \"content\": \"pragma solidity >=0.5.0;\\n\\ninterface IUniswapV2Factory {\\n    event PairCreated(address indexed token0, address indexed token1, address pair, uint);\\n\\n    function feeTo() external view returns (address);\\n    function feeToSetter() external view returns (address);\\n\\n    function getPair(address tokenA, address tokenB) external view returns (address pair);\\n    function allPairs(uint) external view returns (address pair);\\n    function allPairsLength() external view returns (uint);\\n\\n    function createPair(address tokenA, address tokenB) external returns (address pair);\\n\\n    function setFeeTo(address) external;\\n    function setFeeToSetter(address) external;\\n}\\n\"\r\n    },\r\n    \"contracts/ERC20.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\r\\n\\r\\npragma solidity ^0.8.0;\\r\\n\\r\\nimport \\\"@openzeppelin/contracts/token/ERC20/IERC20.sol\\\";\\r\\nimport \\\"@openzeppelin/contracts/token/ERC20/extensions/IERC20Metadata.sol\\\";\\r\\nimport \\\"@openzeppelin/contracts/utils/Context.sol\\\";\\r\\n\\r\\n/*\\r\\n * @dev Implementation of the {IERC20} interface.\\r\\n * based on @openzeppelin/contracts/token/ERC20/ERC20.sol\\r\\n */\\r\\n\\r\\ncontract ERC20 is Context, IERC20, IERC20Metadata {\\r\\n\\r\\n    mapping(address => uint256) internal _balances;\\r\\n    mapping(address => mapping(address => uint256)) internal _allowances;\\r\\n\\r\\n    uint256 internal _totalSupply;\\r\\n\\r\\n    string private _name;\\r\\n    string private _symbol;\\r\\n\\r\\n    constructor(string memory name_, string memory symbol_) {\\r\\n        _name = name_;\\r\\n        _symbol = symbol_;\\r\\n    }\\r\\n\\r\\n    function name() public view virtual override returns (string memory) {\\r\\n        return _name;\\r\\n    }\\r\\n    \\r\\n    function symbol() public view virtual override returns (string memory) {\\r\\n        return _symbol;\\r\\n    }\\r\\n    \\r\\n    function decimals() public view virtual override returns (uint8) {\\r\\n        return 18;\\r\\n    }\\r\\n\\r\\n    function totalSupply() public view virtual override returns (uint256) {\\r\\n        return _totalSupply;\\r\\n    }\\r\\n\\r\\n    function balanceOf(address account) public view virtual override returns (uint256) {\\r\\n        return _balances[account];\\r\\n    }\\r\\n\\r\\n    function transfer(address recipient, uint256 amount) public virtual override returns (bool) {\\r\\n        _transfer(_msgSender(), recipient, amount);\\r\\n        return true;\\r\\n    }\\r\\n\\r\\n    function allowance(address owner, address spender) public view virtual override returns (uint256) {\\r\\n        return _allowances[owner][spender];\\r\\n    }\\r\\n\\r\\n    function approve(address spender, uint256 amount) public virtual override returns (bool) {\\r\\n        _approve(_msgSender(), spender, amount);\\r\\n        return true;\\r\\n    }\\r\\n\\r\\n    function transferFrom(\\r\\n        address sender,\\r\\n        address recipient,\\r\\n        uint256 amount\\r\\n    ) public virtual override returns (bool) {\\r\\n        _transfer(sender, recipient, amount);\\r\\n\\r\\n        uint256 currentAllowance = _allowances[sender][_msgSender()];\\r\\n        require(currentAllowance >= amount, \\\"ERC20: transfer amount exceeds allowance\\\");\\r\\n        unchecked {\\r\\n            _approve(sender, _msgSender(), currentAllowance - amount);\\r\\n        }\\r\\n\\r\\n        return true;\\r\\n    }\\r\\n\\r\\n    function increaseAllowance(address spender, uint256 addedValue) public virtual returns (bool) {\\r\\n        _approve(_msgSender(), spender, _allowances[_msgSender()][spender] + addedValue);\\r\\n        return true;\\r\\n    }\\r\\n\\r\\n    function decreaseAllowance(address spender, uint256 subtractedValue) public virtual returns (bool) {\\r\\n        uint256 currentAllowance = _allowances[_msgSender()][spender];\\r\\n        require(currentAllowance >= subtractedValue, \\\"ERC20: decreased allowance below zero\\\");\\r\\n        unchecked {\\r\\n            _approve(_msgSender(), spender, currentAllowance - subtractedValue);\\r\\n        }\\r\\n\\r\\n        return true;\\r\\n    }\\r\\n\\r\\n    function _transfer(\\r\\n        address sender,\\r\\n        address recipient,\\r\\n        uint256 amount\\r\\n    ) internal virtual {\\r\\n        require(sender != address(0), \\\"ERC20: transfer from the zero address\\\");\\r\\n        require(recipient != address(0), \\\"ERC20: transfer to the zero address\\\");\\r\\n\\r\\n        _beforeTokenTransfer(sender, recipient, amount);\\r\\n\\r\\n        uint256 senderBalance = _balances[sender];\\r\\n        require(senderBalance >= amount, \\\"ERC20: transfer amount exceeds balance\\\");\\r\\n        unchecked {\\r\\n            _balances[sender] = senderBalance - amount;\\r\\n        }\\r\\n        _balances[recipient] += amount;\\r\\n\\r\\n        emit Transfer(sender, recipient, amount);\\r\\n\\r\\n        _afterTokenTransfer(sender, recipient, amount);\\r\\n    }\\r\\n\\r\\n    function _mint(address account, uint256 amount) internal virtual {\\r\\n        require(account != address(0), \\\"ERC20: mint to the zero address\\\");\\r\\n\\r\\n        _beforeTokenTransfer(address(0), account, amount);\\r\\n\\r\\n        _totalSupply += amount;\\r\\n        _balances[account] += amount;\\r\\n        emit Transfer(address(0), account, amount);\\r\\n\\r\\n        _afterTokenTransfer(address(0), account, amount);\\r\\n    }\\r\\n\\r\\n    function _burn(address account, uint256 amount) internal virtual {\\r\\n        require(account != address(0), \\\"ERC20: burn from the zero address\\\");\\r\\n\\r\\n        _beforeTokenTransfer(account, address(0), amount);\\r\\n\\r\\n        uint256 accountBalance = _balances[account];\\r\\n        require(accountBalance >= amount, \\\"ERC20: burn amount exceeds balance\\\");\\r\\n        unchecked {\\r\\n            _balances[account] = accountBalance - amount;\\r\\n        }\\r\\n        _totalSupply -= amount;\\r\\n\\r\\n        emit Transfer(account, address(0), amount);\\r\\n\\r\\n        _afterTokenTransfer(account, address(0), amount);\\r\\n    }\\r\\n\\r\\n    function _approve(\\r\\n        address owner,\\r\\n        address spender,\\r\\n        uint256 amount\\r\\n    ) internal virtual {\\r\\n        require(owner != address(0), \\\"ERC20: approve from the zero address\\\");\\r\\n        require(spender != address(0), \\\"ERC20: approve to the zero address\\\");\\r\\n\\r\\n        _allowances[owner][spender] = amount;\\r\\n        emit Approval(owner, spender, amount);\\r\\n    }\\r\\n\\r\\n    function _beforeTokenTransfer(\\r\\n        address from,\\r\\n        address to,\\r\\n        uint256 amount\\r\\n    ) internal virtual {}\\r\\n\\r\\n    function _afterTokenTransfer(\\r\\n        address from,\\r\\n        address to,\\r\\n        uint256 amount\\r\\n    ) internal virtual {}\\r\\n}\\r\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/utils/Context.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Provides information about the current execution context, including the\\n * sender of the transaction and its data. While these are generally available\\n * via msg.sender and msg.data, they should not be accessed in such a direct\\n * manner, since when dealing with meta-transactions the account sending and\\n * paying for execution may not be the actual sender (as far as an application\\n * is concerned).\\n *\\n * This contract is only required for intermediate, library-like contracts.\\n */\\nabstract contract Context {\\n    function _msgSender() internal view virtual returns (address) {\\n        return msg.sender;\\n    }\\n\\n    function _msgData() internal view virtual returns (bytes calldata) {\\n        return msg.data;\\n    }\\n}\\n\"\r\n    },\r\n    \"@uniswap/v2-periphery/contracts/interfaces/IUniswapV2Router01.sol\": {\r\n      \"content\": \"pragma solidity >=0.6.2;\\n\\ninterface IUniswapV2Router01 {\\n    function factory() external pure returns (address);\\n    function WETH() external pure returns (address);\\n\\n    function addLiquidity(\\n        address tokenA,\\n        address tokenB,\\n        uint amountADesired,\\n        uint amountBDesired,\\n        uint amountAMin,\\n        uint amountBMin,\\n        address to,\\n        uint deadline\\n    ) external returns (uint amountA, uint amountB, uint liquidity);\\n    function addLiquidityETH(\\n        address token,\\n        uint amountTokenDesired,\\n        uint amountTokenMin,\\n        uint amountETHMin,\\n        address to,\\n        uint deadline\\n    ) external payable returns (uint amountToken, uint amountETH, uint liquidity);\\n    function removeLiquidity(\\n        address tokenA,\\n        address tokenB,\\n        uint liquidity,\\n        uint amountAMin,\\n        uint amountBMin,\\n        address to,\\n        uint deadline\\n    ) external returns (uint amountA, uint amountB);\\n    function removeLiquidityETH(\\n        address token,\\n        uint liquidity,\\n        uint amountTokenMin,\\n        uint amountETHMin,\\n        address to,\\n        uint deadline\\n    ) external returns (uint amountToken, uint amountETH);\\n    function removeLiquidityWithPermit(\\n        address tokenA,\\n        address tokenB,\\n        uint liquidity,\\n        uint amountAMin,\\n        uint amountBMin,\\n        address to,\\n        uint deadline,\\n        bool approveMax, uint8 v, bytes32 r, bytes32 s\\n    ) external returns (uint amountA, uint amountB);\\n    function removeLiquidityETHWithPermit(\\n        address token,\\n        uint liquidity,\\n        uint amountTokenMin,\\n        uint amountETHMin,\\n        address to,\\n        uint deadline,\\n        bool approveMax, uint8 v, bytes32 r, bytes32 s\\n    ) external returns (uint amountToken, uint amountETH);\\n    function swapExactTokensForTokens(\\n        uint amountIn,\\n        uint amountOutMin,\\n        address[] calldata path,\\n        address to,\\n        uint deadline\\n    ) external returns (uint[] memory amounts);\\n    function swapTokensForExactTokens(\\n        uint amountOut,\\n        uint amountInMax,\\n        address[] calldata path,\\n        address to,\\n        uint deadline\\n    ) external returns (uint[] memory amounts);\\n    function swapExactETHForTokens(uint amountOutMin, address[] calldata path, address to, uint deadline)\\n        external\\n        payable\\n        returns (uint[] memory amounts);\\n    function swapTokensForExactETH(uint amountOut, uint amountInMax, address[] calldata path, address to, uint deadline)\\n        external\\n        returns (uint[] memory amounts);\\n    function swapExactTokensForETH(uint amountIn, uint amountOutMin, address[] calldata path, address to, uint deadline)\\n        external\\n        returns (uint[] memory amounts);\\n    function swapETHForExactTokens(uint amountOut, address[] calldata path, address to, uint deadline)\\n        external\\n        payable\\n        returns (uint[] memory amounts);\\n\\n    function quote(uint amountA, uint reserveA, uint reserveB) external pure returns (uint amountB);\\n    function getAmountOut(uint amountIn, uint reserveIn, uint reserveOut) external pure returns (uint amountOut);\\n    function getAmountIn(uint amountOut, uint reserveIn, uint reserveOut) external pure returns (uint amountIn);\\n    function getAmountsOut(uint amountIn, address[] calldata path) external view returns (uint[] memory amounts);\\n    function getAmountsIn(uint amountOut, address[] calldata path) external view returns (uint[] memory amounts);\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/token/ERC20/IERC20.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC20 standard as defined in the EIP.\\n */\\ninterface IERC20 {\\n    /**\\n     * @dev Returns the amount of tokens in existence.\\n     */\\n    function totalSupply() external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the amount of tokens owned by `account`.\\n     */\\n    function balanceOf(address account) external view returns (uint256);\\n\\n    /**\\n     * @dev Moves `amount` tokens from the caller's account to `recipient`.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transfer(address recipient, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Returns the remaining number of tokens that `spender` will be\\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\\n     * zero by default.\\n     *\\n     * This value changes when {approve} or {transferFrom} are called.\\n     */\\n    function allowance(address owner, address spender) external view returns (uint256);\\n\\n    /**\\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\\n     * that someone may use both the old and the new allowance by unfortunate\\n     * transaction ordering. One possible solution to mitigate this race\\n     * condition is to first reduce the spender's allowance to 0 and set the\\n     * desired value afterwards:\\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address spender, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Moves `amount` tokens from `sender` to `recipient` using the\\n     * allowance mechanism. `amount` is then deducted from the caller's\\n     * allowance.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(\\n        address sender,\\n        address recipient,\\n        uint256 amount\\n    ) external returns (bool);\\n\\n    /**\\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\\n     * another (`to`).\\n     *\\n     * Note that `value` may be zero.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 value);\\n\\n    /**\\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\\n     * a call to {approve}. `value` is the new allowance.\\n     */\\n    event Approval(address indexed owner, address indexed spender, uint256 value);\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/token/ERC20/extensions/IERC20Metadata.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../IERC20.sol\\\";\\n\\n/**\\n * @dev Interface for the optional metadata functions from the ERC20 standard.\\n *\\n * _Available since v4.1._\\n */\\ninterface IERC20Metadata is IERC20 {\\n    /**\\n     * @dev Returns the name of the token.\\n     */\\n    function name() external view returns (string memory);\\n\\n    /**\\n     * @dev Returns the symbol of the token.\\n     */\\n    function symbol() external view returns (string memory);\\n\\n    /**\\n     * @dev Returns the decimals places of the token.\\n     */\\n    function decimals() external view returns (uint8);\\n}\\n\"\r\n    }\r\n  },\r\n  \"settings\": {\r\n    \"optimizer\": {\r\n      \"enabled\": true,\r\n      \"runs\": 200\r\n    },\r\n    \"outputSelection\": {\r\n      \"*\": {\r\n        \"*\": [\r\n          \"evm.bytecode\",\r\n          \"evm.deployedBytecode\",\r\n          \"devdoc\",\r\n          \"userdoc\",\r\n          \"metadata\",\r\n          \"abi\"\r\n        ]\r\n      }\r\n    },\r\n    \"libraries\": {}\r\n  }\r\n}}","ABI":"[{\"inputs\":[{\"internalType\":\"string\",\"name\":\"name\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"symbol\",\"type\":\"string\"},{\"internalType\":\"uint256\",\"name\":\"supply\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Approval\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Transfer\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"}],\"name\":\"allowance\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"approve\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"decimals\",\"outputs\":[{\"internalType\":\"uint8\",\"name\":\"\",\"type\":\"uint8\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"subtractedValue\",\"type\":\"uint256\"}],\"name\":\"decreaseAllowance\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getPairAddress\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"addedValue\",\"type\":\"uint256\"}],\"name\":\"increaseAllowance\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"initializeLiquidityPool\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"name\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"pendingBalanceDev\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"pendingBalanceLP\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address payable\",\"name\":\"devwallet\",\"type\":\"address\"}],\"name\":\"setDevWallet\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"pairaddress\",\"type\":\"address\"}],\"name\":\"setPairAddress\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"routeraddress\",\"type\":\"address\"}],\"name\":\"setRouterAddress\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"setTradingEnabled\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"symbol\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalSupply\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"recipient\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"transfer\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"recipient\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"transferFrom\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"stateMutability\":\"payable\",\"type\":\"receive\"}]","ContractName":"PepePenguin","CompilerVersion":"v0.8.4+commit.c7e474f2","OptimizationUsed":"1","Runs":"200","ConstructorArguments":"000000000000000000000000000000000000000000000000000000000000006000000000000000000000000000000000000000000000000000000000000000a000000000000000000000000000000000000000000052b7d2dcc80cd2e4000000000000000000000000000000000000000000000000000000000000000000000b5065706550656e6775696e00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000025050000000000000000000000000000000000000000000000000000000000000","EVMVersion":"Default","Library":"","LicenseType":"","Proxy":"0","Implementation":"","SwarmSource":""}]}