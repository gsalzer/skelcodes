{"status":"1","message":"OK","result":[{"SourceCode":"{{\r\n  \"language\": \"Solidity\",\r\n  \"sources\": {\r\n    \"contracts/customOracle/XYZFeedInstance.sol\": {\r\n      \"content\": \"pragma solidity ^0.5.16;\\n\\nimport \\\"../interfaces/IOracleInstance.sol\\\";\\nimport \\\"./IMerkleDistributor.sol\\\";\\nimport \\\"synthetix-2.43.1/contracts/Owned.sol\\\";\\n\\ncontract XYZFeedInstance is IOracleInstance, Owned {\\n    IMerkleDistributor public iMerkleDistributor;\\n    string public targetName;\\n    string public targetOutcome;\\n    string public eventName;\\n\\n    uint256 public targetCount;\\n\\n    bool public outcome;\\n    bool public resolvable = true;\\n\\n    bool private forcedOutcome;\\n\\n    constructor(\\n        address _owner,\\n        address _iMerkleDistributor,\\n        uint256 _targetCount,\\n        string memory _targetName,\\n        string memory _targetOutcome,\\n        string memory _eventName\\n    ) public Owned(_owner) {\\n        iMerkleDistributor = IMerkleDistributor(_iMerkleDistributor);\\n        targetCount = _targetCount;\\n        targetName = _targetName;\\n        targetOutcome = _targetOutcome;\\n        eventName = _eventName;\\n    }\\n\\n    function getOutcome() external view returns (bool) {\\n        if (forcedOutcome) {\\n            return outcome;\\n        } else {\\n            return iMerkleDistributor.claimed() >= targetCount;\\n        }\\n    }\\n\\n    function setOutcome(bool _outcome) public onlyOwner {\\n        outcome = _outcome;\\n        forcedOutcome = true;\\n    }\\n\\n    function clearOutcome() public onlyOwner {\\n        forcedOutcome = false;\\n    }\\n\\n    function setResolvable(bool _resolvable) public onlyOwner {\\n        resolvable = _resolvable;\\n    }\\n}\\n\"\r\n    },\r\n    \"contracts/interfaces/IOracleInstance.sol\": {\r\n      \"content\": \"pragma solidity >=0.4.24;\\n\\nimport \\\"../interfaces/IBinaryOptionMarket.sol\\\";\\n\\ninterface IOracleInstance {\\n    /* ========== VIEWS / VARIABLES ========== */\\n\\n    function getOutcome() external view returns (bool);\\n\\n    function resolvable() external view returns (bool);\\n\\n    function targetName() external view returns (string memory);\\n\\n    function targetOutcome() external view returns (string memory);\\n\\n    function eventName() external view returns (string memory);\\n\\n    /* ========== MUTATIVE FUNCTIONS ========== */\\n}\\n\"\r\n    },\r\n    \"contracts/customOracle/IMerkleDistributor.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\r\\npragma solidity ^0.5.16;\\r\\n\\r\\n// Allows anyone to claim a token if they exist in a merkle root.\\r\\ninterface IMerkleDistributor {\\r\\n    // Returns the address of the token distributed by this contract.\\r\\n    function totalClaims() external view returns (uint256);\\r\\n\\r\\n    function claimed() external view returns (uint256);\\r\\n}\\r\\n\"\r\n    },\r\n    \"synthetix-2.43.1/contracts/Owned.sol\": {\r\n      \"content\": \"pragma solidity ^0.5.16;\\n\\n// https://docs.synthetix.io/contracts/source/contracts/owned\\ncontract Owned {\\n    address public owner;\\n    address public nominatedOwner;\\n\\n    constructor(address _owner) public {\\n        require(_owner != address(0), \\\"Owner address cannot be 0\\\");\\n        owner = _owner;\\n        emit OwnerChanged(address(0), _owner);\\n    }\\n\\n    function nominateNewOwner(address _owner) external onlyOwner {\\n        nominatedOwner = _owner;\\n        emit OwnerNominated(_owner);\\n    }\\n\\n    function acceptOwnership() external {\\n        require(msg.sender == nominatedOwner, \\\"You must be nominated before you can accept ownership\\\");\\n        emit OwnerChanged(owner, nominatedOwner);\\n        owner = nominatedOwner;\\n        nominatedOwner = address(0);\\n    }\\n\\n    modifier onlyOwner {\\n        _onlyOwner();\\n        _;\\n    }\\n\\n    function _onlyOwner() private view {\\n        require(msg.sender == owner, \\\"Only the contract owner may perform this action\\\");\\n    }\\n\\n    event OwnerNominated(address newOwner);\\n    event OwnerChanged(address oldOwner, address newOwner);\\n}\\n\"\r\n    },\r\n    \"contracts/interfaces/IBinaryOptionMarket.sol\": {\r\n      \"content\": \"pragma solidity >=0.4.24;\\n\\nimport \\\"../interfaces/IBinaryOptionMarketManager.sol\\\";\\nimport \\\"../interfaces/IBinaryOption.sol\\\";\\n\\ninterface IBinaryOptionMarket {\\n    /* ========== TYPES ========== */\\n\\n    enum Phase {Trading, Maturity, Expiry}\\n    enum Side {Long, Short}\\n\\n    /* ========== VIEWS / VARIABLES ========== */\\n\\n    function options() external view returns (IBinaryOption long, IBinaryOption short);\\n\\n    function times()\\n        external\\n        view\\n        returns (\\n            uint maturity,\\n            uint destructino\\n        );\\n\\n    function oracleDetails()\\n        external\\n        view\\n        returns (\\n            bytes32 key,\\n            uint strikePrice,\\n            uint finalPrice\\n        );\\n\\n    function fees()\\n        external\\n        view\\n        returns (\\n            uint poolFee,\\n            uint creatorFee\\n        );\\n\\n    function deposited() external view returns (uint);\\n\\n    function accumulatedFees() external view returns (uint);\\n\\n    function creator() external view returns (address);\\n\\n    function resolved() external view returns (bool);\\n\\n    function phase() external view returns (Phase);\\n\\n    function oraclePriceAndTimestamp() external view returns (uint price, uint updatedAt);\\n\\n    function canResolve() external view returns (bool);\\n\\n    function result() external view returns (Side);\\n\\n    function balancesOf(address account) external view returns (uint long, uint short);\\n\\n    function totalSupplies() external view returns (uint long, uint short);\\n\\n    /* ========== MUTATIVE FUNCTIONS ========== */\\n\\n    function mint(uint value) external;\\n\\n    function exerciseOptions() external returns (uint);\\n}\\n\"\r\n    },\r\n    \"contracts/interfaces/IBinaryOptionMarketManager.sol\": {\r\n      \"content\": \"pragma solidity >=0.4.24;\\n\\nimport \\\"../interfaces/IBinaryOptionMarket.sol\\\";\\n\\ninterface IBinaryOptionMarketManager {\\n    /* ========== VIEWS / VARIABLES ========== */\\n\\n    function fees() external view returns (uint poolFee, uint creatorFee);\\n\\n    function durations()\\n        external\\n        view\\n        returns (\\n            uint maxOraclePriceAge,\\n            uint expiryDuration,\\n            uint maxTimeToMaturity\\n        );\\n\\n    function capitalRequirement() external view returns (uint);\\n\\n    function marketCreationEnabled() external view returns (bool);\\n\\n    function totalDeposited() external view returns (uint);\\n\\n    function numActiveMarkets() external view returns (uint);\\n\\n    function activeMarkets(uint index, uint pageSize) external view returns (address[] memory);\\n\\n    function numMaturedMarkets() external view returns (uint);\\n\\n    function maturedMarkets(uint index, uint pageSize) external view returns (address[] memory);\\n\\n    /* ========== MUTATIVE FUNCTIONS ========== */\\n\\n    function createMarket(\\n        bytes32 oracleKey,\\n        uint strikePrice,\\n        uint maturity,\\n        uint initialMint, // initial sUSD to mint options for,\\n        bool customMarket,\\n        address customOracle\\n    ) external returns (IBinaryOptionMarket);\\n\\n    function resolveMarket(address market) external;\\n\\n    function expireMarkets(address[] calldata market) external;\\n\\n    function transferSusdTo(\\n        address sender,\\n        address receiver,\\n        uint amount\\n    ) external;\\n}\\n\"\r\n    },\r\n    \"contracts/interfaces/IBinaryOption.sol\": {\r\n      \"content\": \"pragma solidity >=0.4.24;\\n\\nimport \\\"../interfaces/IBinaryOptionMarket.sol\\\";\\nimport \\\"synthetix-2.43.1/contracts/interfaces/IERC20.sol\\\";\\n\\ninterface IBinaryOption {\\n    /* ========== VIEWS / VARIABLES ========== */\\n\\n    function market() external view returns (IBinaryOptionMarket);\\n\\n    function balanceOf(address account) external view returns (uint);\\n\\n    function totalSupply() external view returns (uint);\\n\\n}\\n\"\r\n    },\r\n    \"synthetix-2.43.1/contracts/interfaces/IERC20.sol\": {\r\n      \"content\": \"pragma solidity >=0.4.24;\\n\\n// https://docs.synthetix.io/contracts/source/interfaces/ierc20\\ninterface IERC20 {\\n    // ERC20 Optional Views\\n    function name() external view returns (string memory);\\n\\n    function symbol() external view returns (string memory);\\n\\n    function decimals() external view returns (uint8);\\n\\n    // Views\\n    function totalSupply() external view returns (uint);\\n\\n    function balanceOf(address owner) external view returns (uint);\\n\\n    function allowance(address owner, address spender) external view returns (uint);\\n\\n    // Mutative functions\\n    function transfer(address to, uint value) external returns (bool);\\n\\n    function approve(address spender, uint value) external returns (bool);\\n\\n    function transferFrom(\\n        address from,\\n        address to,\\n        uint value\\n    ) external returns (bool);\\n\\n    // Events\\n    event Transfer(address indexed from, address indexed to, uint value);\\n\\n    event Approval(address indexed owner, address indexed spender, uint value);\\n}\\n\"\r\n    }\r\n  },\r\n  \"settings\": {\r\n    \"optimizer\": {\r\n      \"enabled\": true,\r\n      \"runs\": 200\r\n    },\r\n    \"outputSelection\": {\r\n      \"*\": {\r\n        \"*\": [\r\n          \"evm.bytecode\",\r\n          \"evm.deployedBytecode\",\r\n          \"abi\"\r\n        ]\r\n      }\r\n    },\r\n    \"libraries\": {}\r\n  }\r\n}}","ABI":"[{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_owner\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_iMerkleDistributor\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_targetCount\",\"type\":\"uint256\"},{\"internalType\":\"string\",\"name\":\"_targetName\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"_targetOutcome\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"_eventName\",\"type\":\"string\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"oldOwner\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnerChanged\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnerNominated\",\"type\":\"event\"},{\"constant\":false,\"inputs\":[],\"name\":\"acceptOwnership\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"clearOutcome\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"eventName\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"getOutcome\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"iMerkleDistributor\",\"outputs\":[{\"internalType\":\"contract IMerkleDistributor\",\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"address\",\"name\":\"_owner\",\"type\":\"address\"}],\"name\":\"nominateNewOwner\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"nominatedOwner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"outcome\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"resolvable\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"bool\",\"name\":\"_outcome\",\"type\":\"bool\"}],\"name\":\"setOutcome\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"bool\",\"name\":\"_resolvable\",\"type\":\"bool\"}],\"name\":\"setResolvable\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"targetCount\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"targetName\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"targetOutcome\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"}]","ContractName":"XYZFeedInstance","CompilerVersion":"v0.5.16+commit.9c3226ce","OptimizationUsed":"1","Runs":"200","ConstructorArguments":"0000000000000000000000004d03ef005e5f559fc9294a8e1cebba09284b1f820000000000000000000000002400bf0a2b50882505480a41be3c21e878cb9c45000000000000000000000000000000000000000000000000000000000000006400000000000000000000000000000000000000000000000000000000000000c000000000000000000000000000000000000000000000000000000000000001000000000000000000000000000000000000000000000000000000000000000140000000000000000000000000000000000000000000000000000000000000001258595a2061697264726f7020636c61696d73000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000033130300000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000001258595a2061697264726f7020636c61696d730000000000000000000000000000","EVMVersion":"Default","Library":"","LicenseType":"","Proxy":"0","Implementation":"","SwarmSource":""}]}