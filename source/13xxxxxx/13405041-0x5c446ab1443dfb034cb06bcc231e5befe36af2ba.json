{"status":"1","message":"OK","result":[{"SourceCode":"{{\r\n  \"language\": \"Solidity\",\r\n  \"sources\": {\r\n    \"contracts/registry/Registry.sol\": {\r\n      \"content\": \"//SPDX-License-Identifier: MIT\\npragma solidity 0.7.5;\\n\\nimport \\\"@openzeppelin/contracts/access/Ownable.sol\\\";\\nimport \\\"@openzeppelin/contracts/utils/ReentrancyGuard.sol\\\";\\n// Registry managed contracts\\nimport \\\"../auctions/IHub.sol\\\";\\nimport \\\"../royalties/IRoyalties.sol\\\";\\nimport \\\"../nft/INft.sol\\\";\\n\\ncontract Registry is Ownable, ReentrancyGuard {\\n    // -----------------------------------------------------------------------\\n    // STATE\\n    // -----------------------------------------------------------------------\\n\\n    // Storage of current hub instance\\n    IHub internal hubInstance_;\\n    // Storage of current royalties instance\\n    IRoyalties internal royaltiesInstance_;\\n    // Storage of NFT contract (cannot be changed)\\n    INft internal nftInstance_;\\n\\n    // -----------------------------------------------------------------------\\n    // CONSTRUCTOR\\n    // -----------------------------------------------------------------------\\n\\n    constructor(address _nft) Ownable() {\\n        require(INft(_nft).isActive(), \\\"REG: Address invalid NFT\\\");\\n        nftInstance_ = INft(_nft);\\n    }\\n\\n    // -----------------------------------------------------------------------\\n    // NON-MODIFYING FUNCTIONS (VIEW)\\n    // -----------------------------------------------------------------------\\n\\n    function getHub() external view returns (address) {\\n        return address(hubInstance_);\\n    }\\n\\n    function getRoyalties() external view returns (address) {\\n        return address(royaltiesInstance_);\\n    }\\n\\n    function getNft() external view returns (address) {\\n        return address(nftInstance_);\\n    }\\n\\n    function isActive() external view returns (bool) {\\n        return true;\\n    }\\n\\n    // -----------------------------------------------------------------------\\n    //  ONLY OWNER STATE MODIFYING FUNCTIONS\\n    // -----------------------------------------------------------------------\\n\\n    function updateHub(address _newHub) external onlyOwner nonReentrant {\\n        IHub newHub = IHub(_newHub);\\n        require(_newHub != address(0), \\\"REG: cannot set HUB to 0x\\\");\\n        require(\\n            address(hubInstance_) != _newHub,\\n            \\\"REG: Cannot set HUB to existing\\\"\\n        );\\n        require(\\n            newHub.isAuctionHubImplementation(),\\n            \\\"REG: HUB implementation error\\\"\\n        );\\n        require(IHub(_newHub).init(), \\\"REG: HUB could not be init\\\");\\n        hubInstance_ = IHub(_newHub);\\n    }\\n\\n    function updateRoyalties(address _newRoyalties)\\n        external\\n        onlyOwner\\n        nonReentrant\\n    {\\n        require(_newRoyalties != address(0), \\\"REG: cannot set ROY to 0x\\\");\\n        require(\\n            address(royaltiesInstance_) != _newRoyalties,\\n            \\\"REG: Cannot set ROY to existing\\\"\\n        );\\n        require(IRoyalties(_newRoyalties).init(), \\\"REG: ROY could not be init\\\");\\n        royaltiesInstance_ = IRoyalties(_newRoyalties);\\n    }\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/access/Ownable.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity >=0.6.0 <0.8.0;\\n\\nimport \\\"../utils/Context.sol\\\";\\n/**\\n * @dev Contract module which provides a basic access control mechanism, where\\n * there is an account (an owner) that can be granted exclusive access to\\n * specific functions.\\n *\\n * By default, the owner account will be the one that deploys the contract. This\\n * can later be changed with {transferOwnership}.\\n *\\n * This module is used through inheritance. It will make available the modifier\\n * `onlyOwner`, which can be applied to your functions to restrict their use to\\n * the owner.\\n */\\nabstract contract Ownable is Context {\\n    address private _owner;\\n\\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\\n\\n    /**\\n     * @dev Initializes the contract setting the deployer as the initial owner.\\n     */\\n    constructor () internal {\\n        address msgSender = _msgSender();\\n        _owner = msgSender;\\n        emit OwnershipTransferred(address(0), msgSender);\\n    }\\n\\n    /**\\n     * @dev Returns the address of the current owner.\\n     */\\n    function owner() public view virtual returns (address) {\\n        return _owner;\\n    }\\n\\n    /**\\n     * @dev Throws if called by any account other than the owner.\\n     */\\n    modifier onlyOwner() {\\n        require(owner() == _msgSender(), \\\"Ownable: caller is not the owner\\\");\\n        _;\\n    }\\n\\n    /**\\n     * @dev Leaves the contract without owner. It will not be possible to call\\n     * `onlyOwner` functions anymore. Can only be called by the current owner.\\n     *\\n     * NOTE: Renouncing ownership will leave the contract without an owner,\\n     * thereby removing any functionality that is only available to the owner.\\n     */\\n    function renounceOwnership() public virtual onlyOwner {\\n        emit OwnershipTransferred(_owner, address(0));\\n        _owner = address(0);\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Can only be called by the current owner.\\n     */\\n    function transferOwnership(address newOwner) public virtual onlyOwner {\\n        require(newOwner != address(0), \\\"Ownable: new owner is the zero address\\\");\\n        emit OwnershipTransferred(_owner, newOwner);\\n        _owner = newOwner;\\n    }\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/utils/ReentrancyGuard.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity >=0.6.0 <0.8.0;\\n\\n/**\\n * @dev Contract module that helps prevent reentrant calls to a function.\\n *\\n * Inheriting from `ReentrancyGuard` will make the {nonReentrant} modifier\\n * available, which can be applied to functions to make sure there are no nested\\n * (reentrant) calls to them.\\n *\\n * Note that because there is a single `nonReentrant` guard, functions marked as\\n * `nonReentrant` may not call one another. This can be worked around by making\\n * those functions `private`, and then adding `external` `nonReentrant` entry\\n * points to them.\\n *\\n * TIP: If you would like to learn more about reentrancy and alternative ways\\n * to protect against it, check out our blog post\\n * https://blog.openzeppelin.com/reentrancy-after-istanbul/[Reentrancy After Istanbul].\\n */\\nabstract contract ReentrancyGuard {\\n    // Booleans are more expensive than uint256 or any type that takes up a full\\n    // word because each write operation emits an extra SLOAD to first read the\\n    // slot's contents, replace the bits taken up by the boolean, and then write\\n    // back. This is the compiler's defense against contract upgrades and\\n    // pointer aliasing, and it cannot be disabled.\\n\\n    // The values being non-zero value makes deployment a bit more expensive,\\n    // but in exchange the refund on every call to nonReentrant will be lower in\\n    // amount. Since refunds are capped to a percentage of the total\\n    // transaction's gas, it is best to keep them low in cases like this one, to\\n    // increase the likelihood of the full refund coming into effect.\\n    uint256 private constant _NOT_ENTERED = 1;\\n    uint256 private constant _ENTERED = 2;\\n\\n    uint256 private _status;\\n\\n    constructor () internal {\\n        _status = _NOT_ENTERED;\\n    }\\n\\n    /**\\n     * @dev Prevents a contract from calling itself, directly or indirectly.\\n     * Calling a `nonReentrant` function from another `nonReentrant`\\n     * function is not supported. It is possible to prevent this from happening\\n     * by making the `nonReentrant` function external, and make it call a\\n     * `private` function that does the actual work.\\n     */\\n    modifier nonReentrant() {\\n        // On the first call to nonReentrant, _notEntered will be true\\n        require(_status != _ENTERED, \\\"ReentrancyGuard: reentrant call\\\");\\n\\n        // Any calls to nonReentrant after this point will fail\\n        _status = _ENTERED;\\n\\n        _;\\n\\n        // By storing the original value once again, a refund is triggered (see\\n        // https://eips.ethereum.org/EIPS/eip-2200)\\n        _status = _NOT_ENTERED;\\n    }\\n}\\n\"\r\n    },\r\n    \"contracts/auctions/IHub.sol\": {\r\n      \"content\": \"//SPDX-License-Identifier: MIT\\npragma solidity 0.7.5;\\n\\ninterface IHub {\\n    enum LotStatus {\\n        NO_LOT,\\n        LOT_REQUESTED,\\n        LOT_CREATED,\\n        AUCTION_ACTIVE,\\n        AUCTION_RESOLVED,\\n        AUCTION_RESOLVED_AND_CLAIMED,\\n        AUCTION_CANCELED\\n    }\\n\\n    // -----------------------------------------------------------------------\\n    // NON-MODIFYING FUNCTIONS (VIEW)\\n    // -----------------------------------------------------------------------\\n\\n    function getLotInformation(uint256 _lotID)\\n        external\\n        view\\n        returns (\\n            address owner,\\n            uint256 tokenID,\\n            uint256 auctionID,\\n            LotStatus status\\n        );\\n\\n    function getAuctionInformation(uint256 _auctionID)\\n        external\\n        view\\n        returns (\\n            bool active,\\n            string memory auctionName,\\n            address auctionContract,\\n            bool onlyPrimarySales\\n        );\\n\\n    function getAuctionID(address _auction) external view returns (uint256);\\n\\n    function isAuctionActive(uint256 _auctionID) external view returns (bool);\\n\\n    function getAuctionCount() external view returns (uint256);\\n\\n    function isAuctionHubImplementation() external view returns (bool);\\n\\n    function isFirstSale(uint256 _tokenID) external view returns (bool);\\n\\n    function getFirstSaleSplit()\\n        external\\n        view\\n        returns (uint256 creatorSplit, uint256 systemSplit);\\n\\n    function getSecondarySaleSplits()\\n        external\\n        view\\n        returns (\\n            uint256 creatorSplit,\\n            uint256 sellerSplit,\\n            uint256 systemSplit\\n        );\\n\\n    function getScalingFactor() external view returns (uint256);\\n\\n    // -----------------------------------------------------------------------\\n    // PUBLIC STATE MODIFYING FUNCTIONS\\n    // -----------------------------------------------------------------------\\n\\n    function requestAuctionLot(uint256 _auctionType, uint256 _tokenID)\\n        external\\n        returns (uint256 lotID);\\n\\n    // -----------------------------------------------------------------------\\n    // ONLY AUCTIONS STATE MODIFYING FUNCTIONS\\n    // -----------------------------------------------------------------------\\n\\n    function firstSaleCompleted(uint256 _tokenID) external;\\n\\n    function lotCreated(uint256 _auctionID, uint256 _lotID) external;\\n\\n    function lotAuctionStarted(uint256 _auctionID, uint256 _lotID) external;\\n\\n    function lotAuctionCompleted(uint256 _auctionID, uint256 _lotID) external;\\n\\n    function lotAuctionCompletedAndClaimed(uint256 _auctionID, uint256 _lotID)\\n        external;\\n\\n    function cancelLot(uint256 _auctionID, uint256 _lotID) external;\\n\\n    // -----------------------------------------------------------------------\\n    // ONLY REGISTRY STATE MODIFYING FUNCTIONS\\n    // -----------------------------------------------------------------------\\n\\n    function init() external returns (bool);\\n}\\n\"\r\n    },\r\n    \"contracts/royalties/IRoyalties.sol\": {\r\n      \"content\": \"//SPDX-License-Identifier: MIT\\npragma solidity 0.7.5;\\n\\ninterface IRoyalties {\\n    // -----------------------------------------------------------------------\\n    // NON-MODIFYING FUNCTIONS (VIEW)\\n    // -----------------------------------------------------------------------\\n\\n    function getBalance(address _user) external view returns (uint256);\\n\\n    function getCollateral() external view returns (address);\\n\\n    // -----------------------------------------------------------------------\\n    // PUBLIC STATE MODIFYING FUNCTIONS\\n    // -----------------------------------------------------------------------\\n\\n    function deposit(address _to, uint256 _amount) external payable;\\n\\n    function withdraw(uint256 _amount) external payable;\\n\\n    // -----------------------------------------------------------------------\\n    // ONLY REGISTRY STATE MODIFYING FUNCTIONS\\n    // -----------------------------------------------------------------------\\n\\n    function init() external returns (bool);\\n}\\n\"\r\n    },\r\n    \"contracts/nft/INft.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\npragma solidity >=0.6.0 <0.8.0;\\n\\ninterface INft {\\n\\n    // -----------------------------------------------------------------------\\n    // NON-MODIFYING FUNCTIONS (VIEW)\\n    // -----------------------------------------------------------------------\\n\\n    /**\\n     * @param   _tokenID The ID of the token\\n     * @return  address of the owner for this token  \\n     */\\n    function ownerOf(uint256 _tokenID) external view returns(address);\\n\\n    /**\\n     * @param   _tokenID The ID of the token\\n     * @return  address of the creator of the token\\n     */\\n    function creatorOf(uint256 _tokenID) external view returns(address);\\n\\n    /**\\n     * @param   _owner The address of the address to check\\n     * @return  uint256 The number of tokens the user owns\\n     */\\n    function balanceOf(address _owner) external view returns(uint256);\\n\\n    /**\\n     * @return  uint256 The total number of circulating tokens\\n     */\\n    function totalSupply() external view returns(uint256);\\n\\n    /**\\n     * @param   _owner Address of the owner\\n     * @param   _spender The address of the spender\\n     * @param   _tokenID ID of the token to check\\n     * @return  bool The approved status of the spender against the owner\\n     */\\n    function isApprovedSpenderOf(\\n        address _owner, \\n        address _spender, \\n        uint256 _tokenID\\n    )\\n        external\\n        view\\n        returns(bool);\\n\\n    /**\\n     * @param   _minter Address of the minter being checked\\n     * @return  isMinter If the minter has the minter role\\n     * @return  isActiveMinter If the minter is an active minter \\n     */\\n    function isMinter(\\n        address _minter\\n    ) \\n        external \\n        view \\n        returns(\\n            bool isMinter, \\n            bool isActiveMinter\\n        );\\n\\n    function isActive() external view returns(bool);\\n\\n    function isTokenBatch(uint256 _tokenID) external view returns(uint256);\\n\\n    function getBatchInfo(\\n        uint256 _batchID\\n    ) \\n        external \\n        view\\n        returns(\\n            uint256 baseTokenID,\\n            uint256[] memory tokenIDs,\\n            bool limitedStock,\\n            uint256 totalMinted\\n        );\\n\\n    // -----------------------------------------------------------------------\\n    // PUBLIC STATE MODIFYING FUNCTIONS\\n    // -----------------------------------------------------------------------\\n\\n    /**\\n     * @param   _spender The address of the spender\\n     * @param   _tokenID ID of the token to check\\n     * @param   _approvalSpender The status of the spenders approval on the \\n     *          owner\\n     * @notice  Will revert if msg.sender is the spender or if the msg.sender\\n     *          is not the owner of the token.\\n     */\\n    function approveSpender(\\n        address _spender,\\n        uint256 _tokenID,\\n        bool _approvalSpender\\n    )\\n        external;\\n\\n    // -----------------------------------------------------------------------\\n    //  ONLY AUCTIONS (hub or spokes) STATE MODIFYING FUNCTIONS\\n    // -----------------------------------------------------------------------\\n\\n    /**\\n     * @param   _to Address of receiver \\n     * @param   _tokenID Token to transfer\\n     * @notice  Only auctions (hub or spokes) will be able to transfer tokens.\\n     *          Will revert if to address is the 0x address. Will revert if the \\n     *          msg.sender is not the token owner. Will revert if msg.sender is\\n     *          to to address\\n     */\\n    function transfer(\\n        address _to,\\n        uint256 _tokenID\\n    )\\n        external;\\n\\n    /**\\n     * @param   _to Address to transfer to\\n     * @param   _tokenIDs Array of tokens being transferred\\n     * @notice  Only auctions (hub or spokes) will be able to transfer tokens.\\n     *          Will revert if to address is the 0x address. Will revert if the \\n     *          msg.sender is not the token owner. Will revert if msg.sender is\\n     *          to to address\\n     */\\n    function batchTransfer(\\n        address _to,\\n        uint256[] memory _tokenIDs\\n    )\\n        external;\\n\\n    /**\\n     * @param   _from Address being transferee from \\n     * @param   _to Address to transfer to\\n     * @param   _tokenID ID of token being transferred\\n     * @notice  Only auctions (hub or spokes) will be able to transfer tokens.\\n     *          Will revert if to address is the 0x address. Will revert if\\n     *          msg.sender is not approved spender of token on _from address.\\n     *          Will revert if the _from is not the token owner. Will revert if \\n     *          _from is _to address.\\n     */\\n    function transferFrom(\\n        address _from,\\n        address _to,\\n        uint256 _tokenID\\n    )\\n        external;\\n\\n    /**\\n     * @param   _from Address being transferee from \\n     * @param   _to Address to transfer to\\n     * @param   _tokenIDs Array of tokens being transferred\\n     * @notice  Only auctions (hub or spokes) will be able to transfer tokens.\\n     *          Will revert if to address is the 0x address. Will revert if\\n     *          msg.sender is not approved spender of token on _from address.\\n     *          Will revert if the _from is not the token owner. Will revert if \\n     *          _from is _to address.\\n     */\\n    function batchTransferFrom(\\n        address _from,\\n        address _to,\\n        uint256[] memory _tokenIDs\\n    )\\n        external;\\n\\n    // -----------------------------------------------------------------------\\n    // ONLY MINTER STATE MODIFYING FUNCTIONS\\n    // -----------------------------------------------------------------------\\n\\n    /**\\n     * @param   _tokenCreator Address of the creator. Address will receive the \\n     *          royalties from sales of the NFT\\n     * @param   _mintTo The address that should receive the token. Note that on\\n     *          the initial sale this address will not receive the sale \\n     *          collateral. Sale collateral will be distributed to creator and\\n     *          system fees\\n     * @notice  Only valid active minters will be able to mint new tokens\\n     */\\n    function mint(\\n        address _tokenCreator, \\n        address _mintTo,\\n        string calldata identifier,      \\n        string calldata location,\\n        bytes32 contentHash \\n    ) external returns(uint256);\\n\\n    /**\\n     * @param   _mintTo The address that should receive the token. Note that on\\n     *          the initial sale this address will not receive the sale \\n     *          collateral. Sale collateral will be distributed to creator and\\n     *          system fees\\n     * @param   _amount Amount of tokens to mint\\n     * @param   _baseTokenID ID of the token being duplicated\\n     * @param   _isLimitedStock Bool for if the batch has a pre-set limit\\n     */\\n    function batchDuplicateMint(\\n        address _mintTo,\\n        uint256 _amount,\\n        uint256 _baseTokenID,\\n        bool _isLimitedStock\\n    )\\n        external\\n        returns(uint256[] memory);\\n}\"\r\n    },\r\n    \"@openzeppelin/contracts/utils/Context.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity >=0.6.0 <0.8.0;\\n\\n/*\\n * @dev Provides information about the current execution context, including the\\n * sender of the transaction and its data. While these are generally available\\n * via msg.sender and msg.data, they should not be accessed in such a direct\\n * manner, since when dealing with GSN meta-transactions the account sending and\\n * paying for execution may not be the actual sender (as far as an application\\n * is concerned).\\n *\\n * This contract is only required for intermediate, library-like contracts.\\n */\\nabstract contract Context {\\n    function _msgSender() internal view virtual returns (address payable) {\\n        return msg.sender;\\n    }\\n\\n    function _msgData() internal view virtual returns (bytes memory) {\\n        this; // silence state mutability warning without generating bytecode - see https://github.com/ethereum/solidity/issues/2691\\n        return msg.data;\\n    }\\n}\\n\"\r\n    }\r\n  },\r\n  \"settings\": {\r\n    \"optimizer\": {\r\n      \"enabled\": false,\r\n      \"runs\": 200\r\n    },\r\n    \"outputSelection\": {\r\n      \"*\": {\r\n        \"*\": [\r\n          \"evm.bytecode\",\r\n          \"evm.deployedBytecode\",\r\n          \"devdoc\",\r\n          \"userdoc\",\r\n          \"metadata\",\r\n          \"abi\"\r\n        ]\r\n      }\r\n    },\r\n    \"libraries\": {}\r\n  }\r\n}}","ABI":"[{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_nft\",\"type\":\"address\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"getHub\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getNft\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getRoyalties\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"isActive\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_newHub\",\"type\":\"address\"}],\"name\":\"updateHub\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_newRoyalties\",\"type\":\"address\"}],\"name\":\"updateRoyalties\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}]","ContractName":"Registry","CompilerVersion":"v0.7.5+commit.eb77ed08","OptimizationUsed":"0","Runs":"200","ConstructorArguments":"0000000000000000000000009b19834973109dd330f34bc339beb0c94119f6d0","EVMVersion":"Default","Library":"","LicenseType":"","Proxy":"0","Implementation":"","SwarmSource":""}]}