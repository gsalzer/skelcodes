{"status":"1","message":"OK","result":[{"SourceCode":"{{\r\n  \"language\": \"Solidity\",\r\n  \"settings\": {\r\n    \"evmVersion\": \"istanbul\",\r\n    \"libraries\": {},\r\n    \"metadata\": {\r\n      \"bytecodeHash\": \"ipfs\",\r\n      \"useLiteralContent\": true\r\n    },\r\n    \"optimizer\": {\r\n      \"enabled\": false,\r\n      \"runs\": 200\r\n    },\r\n    \"remappings\": [],\r\n    \"outputSelection\": {\r\n      \"*\": {\r\n        \"*\": [\r\n          \"evm.bytecode\",\r\n          \"evm.deployedBytecode\",\r\n          \"devdoc\",\r\n          \"userdoc\",\r\n          \"metadata\",\r\n          \"abi\"\r\n        ]\r\n      }\r\n    }\r\n  },\r\n  \"sources\": {\r\n    \"contracts/centers/SpaceStation1.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.0;\\n\\nimport \\\"../utils/Center.sol\\\";\\n\\ncontract AtopiaSpaceStation1 is AtopiaCenter {\\n\\tfunction initialize(address space) public virtual override {\\n\\t\\tAtopiaCenter.init(space, \\\"Burrow Colony\\\", \\\"Atopia Center - Space Station\\\");\\n\\t\\temission = 500;\\n\\t\\tminAge = (5 * 365 days) / 10;\\n\\t\\tenjoyFee = 1000;\\n\\t\\timage = '<?xml version=\\\"1.0\\\" encoding=\\\"utf-8\\\"?><svg version=\\\"1.1\\\" xmlns=\\\"http://www.w3.org/2000/svg\\\" xmlns:xlink=\\\"http://www.w3.org/1999/xlink\\\" x=\\\"0px\\\" y=\\\"0px\\\" viewBox=\\\"0 0 1000 1000\\\" style=\\\"enable-background:new 0 0 1000 1000;\\\" xml:space=\\\"preserve\\\"><style type=\\\"text/css\\\">.s{stroke:#000000;stroke-width:10;stroke-miterlimit:10;}.d{stroke-linecap:round;stroke-linejoin:round}.e{fill:none}.c2{fill:#4BBD80}.c3{fill:#FFC08D}.c4{fill:#EBD15B}.c5{fill:#4F4F4F}.c6{fill:#303030}.c7{fill:url(#lg1)}</style><g class=\\\"s e d\\\"><polygon class=\\\"c3\\\" points=\\\"274.61,689.52 274.61,732.52 722.61,733.52 719.61,688.52\\\"/><polygon class=\\\"c4\\\" points=\\\"259.61,604.52 265.61,683.52 739.61,686.52 741.61,595.52\\\"/><g class=\\\"c5\\\"><polygon points=\\\"233.61,616.52 250.61,681.52 274.61,677.52 252.61,603.52\\\"/><polygon points=\\\"281.61,599.52 300.61,671.52 325.61,672.52 307.61,594.52\\\"/><polygon points=\\\"345.61,586.52 355.61,670.52 386.61,669.52 379.61,584.52\\\"/><polygon points=\\\"410.61,583.52 419.61,666.52 446.61,666.52 444.61,579.52\\\"/><polygon points=\\\"479.61,587.52 481.61,665.52 511.61,665.52 514.61,583.52\\\"/><polygon points=\\\"545.61,589.52 547.61,669.52 575.61,669.52 580.61,585.52\\\"/><polygon points=\\\"613.61,587.52 610.61,666.52 638.61,668.52 652.61,590.52\\\"/><polygon points=\\\"680.61,592.52 668.61,668.52 696.61,673.52 713.61,593.52\\\"/><path d=\\\"M742.61,602.52c-1,4-19,71-19,71l24,7l20-69L742.61,602.52z\\\"/><path class=\\\"c3\\\" d=\\\"M252.61,712.52c20-5,291-38,491-2l26-36c0,0-262-47-543,0L252.61,712.52z\\\"/><linearGradient id=\\\"lg1\\\" gradientUnits=\\\"userSpaceOnUse\\\" x1=\\\"225.3507\\\" y1=\\\"628.2901\\\" x2=\\\"835.4998\\\" y2=\\\"410.9372\\\"><stop offset=\\\"0.3273\\\" style=\\\"stop-color:#9B9BEB\\\"/><stop offset=\\\"0.5788\\\" style=\\\"stop-color:#BCBCFF\\\"/><stop offset=\\\"0.7243\\\" style=\\\"stop-color:#FFFFFF\\\"/><stop offset=\\\"0.9138\\\" style=\\\"stop-color:#9B9BEB\\\"/></linearGradient><path class=\\\"c7\\\" d=\\\"M780.61,637.52c0,0,4-282-270-292s-298,259-290,292C220.61,637.52,461.61,565.52,780.61,637.52z\\\"/><path d=\\\"M416.08,355.76c0,0,77.61,31.4,151.57-1.92C567.65,353.84,475.55,334.99,416.08,355.76z\\\"/></g><line x1=\\\"491.57\\\" y1=\\\"371.2\\\" x2=\\\"495.18\\\" y2=\\\"604.32\\\"/><path d=\\\"M534.61,366.52c0,0,120.79,66.83,120.39,247.42\\\"/><path d=\\\"M444.61,365.52c0,0-118,73-116,247\\\"/><g class=\\\"c6\\\"><path d=\\\"M468.66,281.08c-3.84,6.35-19.81,48.9,13.55,67.14c33.37,18.24,58.5-18.49,58.5-18.49L468.66,281.08z\\\"/><path d=\\\"M423.39,131.99c-3.92,8.6-24.9,70.06,54.08,161.23c44.64,51.53,170.55,75.06,214.31,45.87C698.34,334.7,423.39,131.99,423.39,131.99z\\\"/><ellipse transform=\\\"matrix(0.6006 -0.7996 0.7996 0.6006 36.1397 541.3266)\\\" style=\\\"fill:#FFD1AD\\\" cx=\\\"559.86\\\" cy=\\\"234.49\\\" rx=\\\"47.88\\\" ry=\\\"170.68\\\"/><path d=\\\"M464.11,205.16c11.1-3.84,154.4-35.5,154.4-35.5\\\"/><line x1=\\\"563.15\\\" y1=\\\"259.21\\\" x2=\\\"621.06\\\" y2=\\\"166.77\\\"/><path style=\\\"fill:#FFFFFF\\\" d=\\\"M459.32,205.59c0,0,120.19-7.33,155.46,117.49C614.78,323.08,537.9,289.68,459.32,205.59z\\\"/><line x1=\\\"617.7\\\" y1=\\\"176.19\\\" x2=\\\"575.07\\\" y2=\\\"301.08\\\"/><line x1=\\\"624.53\\\" y1=\\\"161.76\\\" x2=\\\"648.04\\\" y2=\\\"136.69\\\"/><circle cx=\\\"618.51\\\" cy=\\\"169.65\\\" r=\\\"17.15\\\"/><circle cx=\\\"647.67\\\" cy=\\\"136.91\\\" r=\\\"9.65\\\"/></g><path class=\\\"c3\\\" d=\\\"M51.72,731.45l896.56,4.61l-99.79,47.59l-402.73,86.59c-51.5,11.07-105.27,2.5-150.77-24.04l-85.27-49.74l-73,5L51.72,731.45z\\\"/><path class=\\\"c2\\\" d=\\\"M582.05,735l-130.33,74.81l-181-48l-92.34,7.16c-14.78,1.15-29.17-5.15-38.35-16.8l-15.79-20.03L582.05,733.64z\\\"/><polygon class=\\\"c2\\\" points=\\\"690.72,735 721.72,784.45 885.53,736\\\"/></g></svg>';\\n\\t}\\n}\\n\"\r\n    },\r\n    \"contracts/interfaces/IAtopia.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.0;\\n\\nimport \\\"./IBucks.sol\\\";\\n\\ninterface IAtopia {\\n\\tfunction owner() external view returns (address);\\n\\n\\tfunction bucks() external view returns (IBucks);\\n\\n\\tfunction getAge(uint256 tokenId) external view returns (uint256);\\n\\n\\tfunction ownerOf(uint256 tokenId) external view returns (address);\\n\\n\\tfunction update(uint256 tokenId) external;\\n\\n\\tfunction exitCenter(\\n\\t\\tuint256 tokenId,\\n\\t\\tuint256 grown,\\n\\t\\tuint256 enjoyFee\\n\\t) external returns (uint256);\\n\\n\\tfunction addReward(uint256 tokenId, uint256 reward) external;\\n\\n\\tfunction claimGrowth(\\n\\t\\tuint256 tokenId,\\n\\t\\tuint256 grown,\\n\\t\\tuint256 enjoyFee\\n\\t) external returns (uint256);\\n\\n\\tfunction claimBucks(address user, uint256 amount) external;\\n\\n\\tfunction buyAndUseItem(\\n\\t\\tuint256 tokenId,\\n\\t\\tuint256 itemInfo\\n\\t) external;\\n}\\n\"\r\n    },\r\n    \"contracts/interfaces/IBucks.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.0;\\n\\ninterface IBucks {\\n\\tfunction mint(address account, uint256 amount) external;\\n\\n\\tfunction burn(uint256 amount) external;\\n\\n\\tfunction burnFrom(address account, uint256 amount) external;\\n\\n\\tfunction transfer(address recipient, uint256 amount) external returns (bool);\\n\\n\\tfunction transferFrom(\\n\\t\\taddress sender,\\n\\t\\taddress recipient,\\n\\t\\tuint256 amount\\n\\t) external returns (bool);\\n\\n\\tfunction balanceOf(address account) external view returns (uint256);\\n}\\n\"\r\n    },\r\n    \"contracts/interfaces/ISpace.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.0;\\n\\nimport \\\"./IAtopia.sol\\\";\\n\\nstruct Task {\\n\\tuint256 id;\\n\\tuint256 info;\\n\\tuint256 rewards;\\n}\\n\\ninterface ISpace {\\n\\tfunction atopia() external view returns (IAtopia);\\n\\n\\tfunction ownerOf(uint256 tokenId) external view returns (address);\\n\\n\\tfunction lives(uint256 tokenId) external view returns (uint256);\\n\\n\\tfunction tasks(uint256 id) external view returns (Task memory);\\n\\n\\tfunction claimBucks(uint256 centerId, uint256 amount) external;\\n}\\n\"\r\n    },\r\n    \"contracts/libs/Base64.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.0;\\n\\nlibrary Base64 {\\n\\tstring private constant base64stdchars = \\\"ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/\\\";\\n\\n\\tfunction encode(bytes memory data) internal pure returns (string memory) {\\n\\t\\tif (data.length == 0) return \\\"\\\";\\n\\n\\t\\t// load the table into memory\\n\\t\\tstring memory table = base64stdchars;\\n\\n\\t\\t// multiply by 4/3 rounded up\\n\\t\\tuint256 encodedLen = 4 * ((data.length + 2) / 3);\\n\\n\\t\\t// add some extra buffer at the end required for the writing\\n\\t\\tstring memory result = new string(encodedLen + 32);\\n\\n\\t\\tassembly {\\n\\t\\t\\t// set the actual output length\\n\\t\\t\\tmstore(result, encodedLen)\\n\\n\\t\\t\\t// prepare the lookup table\\n\\t\\t\\tlet tablePtr := add(table, 1)\\n\\n\\t\\t\\t// input ptr\\n\\t\\t\\tlet dataPtr := data\\n\\t\\t\\tlet endPtr := add(dataPtr, mload(data))\\n\\n\\t\\t\\t// result ptr, jump over length\\n\\t\\t\\tlet resultPtr := add(result, 32)\\n\\n\\t\\t\\t// run over the input, 3 bytes at a time\\n\\t\\t\\tfor {\\n\\n\\t\\t\\t} lt(dataPtr, endPtr) {\\n\\n\\t\\t\\t} {\\n\\t\\t\\t\\tdataPtr := add(dataPtr, 3)\\n\\n\\t\\t\\t\\t// read 3 bytes\\n\\t\\t\\t\\tlet input := mload(dataPtr)\\n\\n\\t\\t\\t\\t// write 4 characters\\n\\t\\t\\t\\tmstore(resultPtr, shl(248, mload(add(tablePtr, and(shr(18, input), 0x3F)))))\\n\\t\\t\\t\\tresultPtr := add(resultPtr, 1)\\n\\t\\t\\t\\tmstore(resultPtr, shl(248, mload(add(tablePtr, and(shr(12, input), 0x3F)))))\\n\\t\\t\\t\\tresultPtr := add(resultPtr, 1)\\n\\t\\t\\t\\tmstore(resultPtr, shl(248, mload(add(tablePtr, and(shr(6, input), 0x3F)))))\\n\\t\\t\\t\\tresultPtr := add(resultPtr, 1)\\n\\t\\t\\t\\tmstore(resultPtr, shl(248, mload(add(tablePtr, and(input, 0x3F)))))\\n\\t\\t\\t\\tresultPtr := add(resultPtr, 1)\\n\\t\\t\\t}\\n\\n\\t\\t\\t// padding with '='\\n\\t\\t\\tswitch mod(mload(data), 3)\\n\\t\\t\\tcase 1 {\\n\\t\\t\\t\\tmstore(sub(resultPtr, 2), shl(240, 0x3d3d))\\n\\t\\t\\t}\\n\\t\\t\\tcase 2 {\\n\\t\\t\\t\\tmstore(sub(resultPtr, 1), shl(248, 0x3d))\\n\\t\\t\\t}\\n\\t\\t}\\n\\n\\t\\treturn result;\\n\\t}\\n\\n\\tfunction toString(uint256 value) internal pure returns (string memory) {\\n\\t\\tif (value == 0) {\\n\\t\\t\\treturn \\\"0\\\";\\n\\t\\t}\\n\\t\\tuint256 temp = value;\\n\\t\\tuint256 digits;\\n\\t\\twhile (temp != 0) {\\n\\t\\t\\tdigits++;\\n\\t\\t\\ttemp /= 10;\\n\\t\\t}\\n\\t\\tbytes memory buffer = new bytes(digits);\\n\\t\\twhile (value != 0) {\\n\\t\\t\\tdigits -= 1;\\n\\t\\t\\tbuffer[digits] = bytes1(uint8(48 + uint256(value % 10)));\\n\\t\\t\\tvalue /= 10;\\n\\t\\t}\\n\\t\\treturn string(buffer);\\n\\t}\\n}\\n\"\r\n    },\r\n    \"contracts/utils/Center.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.0;\\n\\nimport \\\"../interfaces/ISpace.sol\\\";\\nimport \\\"../libs/Base64.sol\\\";\\n\\nabstract contract AtopiaCenter {\\n\\taddress implementation_;\\n\\taddress public admin;\\n\\n\\tbool public initialized;\\n\\tusing Base64 for *;\\n\\n\\tstruct Package {\\n\\t\\tuint256 id;\\n\\t\\tstring name;\\n\\t\\tuint256 info;\\n\\t\\tuint256 rewards;\\n\\t}\\n\\n\\tuint16 public constant FEE_PERCENT = 500;\\n\\tuint16 public constant WORK_PERCENT = 1000;\\n\\n\\tuint256 public id;\\n\\tstring public name;\\n\\tstring public description;\\n\\tstring public image;\\n\\tuint256 public emission;\\n\\tuint256 public minAge;\\n\\tuint16 public enjoyFee;\\n\\n\\tuint256 public level;\\n\\tuint256 public progress;\\n\\n\\tISpace public space;\\n\\n\\tuint256 public workAvailable;\\n\\tPackage[] public packages;\\n\\tmapping(uint256 => uint256) public workRewards; // retire\\n\\n\\tuint256 public totalStaking;\\n\\tmapping(uint256 => uint256) public claims;\\n\\tuint256 public currentReflection;\\n\\tuint256 public lastUpdateAt;\\n\\n\\tuint256 public totalFeeAmount;\\n\\n\\tevent PackageAdded(Package newPackage);\\n\\tevent PackageUpdated(Package newPackage);\\n\\tevent LevelUpdated(uint256 level);\\n\\n\\tfunction initialize(address _space) public virtual;\\n\\n\\tfunction init(\\n\\t\\taddress _space,\\n\\t\\tstring memory _name,\\n\\t\\tstring memory _description\\n\\t) internal {\\n\\t\\trequire(!initialized);\\n\\t\\tinitialized = true;\\n\\t\\tspace = ISpace(_space);\\n\\t\\tname = _name;\\n\\t\\tdescription = _description;\\n\\t}\\n\\n\\tmodifier onlyOwner() {\\n\\t\\trequire(space.ownerOf(id) == msg.sender);\\n\\t\\t_;\\n\\t}\\n\\n\\tmodifier onlySpace() {\\n\\t\\trequire(address(space) == msg.sender);\\n\\t\\t_;\\n\\t}\\n\\n\\tfunction totalPackages() external view returns (uint256) {\\n\\t\\treturn packages.length;\\n\\t}\\n\\n\\tfunction newReflection() public view returns (uint256) {\\n\\t\\treturn currentReflection + (emission / totalStaking) * (block.timestamp - lastUpdateAt);\\n\\t}\\n\\n\\tfunction grown(uint256 tokenId) public view returns (uint256) {\\n\\t\\treturn newReflection() - claims[tokenId];\\n\\t}\\n\\n\\tfunction getProgress() public view returns (uint256) {\\n\\t\\tuint256 percent = progress / emission;\\n\\t\\treturn percent > 100 ? 100 : percent;\\n\\t}\\n\\n\\tfunction updateReflection() internal {\\n\\t\\tif (totalStaking > 0) {\\n\\t\\t\\tcurrentReflection += (emission / totalStaking) * (block.timestamp - lastUpdateAt);\\n\\t\\t}\\n\\t\\tlastUpdateAt = block.timestamp;\\n\\t}\\n\\n\\tfunction setId(uint256 _id) external onlySpace {\\n\\t\\trequire(address(space) == msg.sender);\\n\\t\\trequire(id == 0);\\n\\t\\tid = _id;\\n\\t}\\n\\n\\tfunction enter(uint256 tokenId) external onlySpace returns (uint256) {\\n\\t\\trequire(space.atopia().getAge(tokenId) >= minAge);\\n\\t\\tupdateReflection();\\n\\t\\ttotalStaking += 1;\\n\\t\\tclaims[tokenId] = currentReflection;\\n\\t\\treturn id << 192;\\n\\t}\\n\\n\\tfunction exit(uint256 tokenId) external onlySpace returns (uint256 _growing) {\\n\\t\\t_growing = grown(tokenId);\\n\\t\\ttotalStaking -= 1;\\n\\t\\tupdateReflection();\\n\\t}\\n\\n\\tfunction grow(uint256 tokenId) external onlySpace returns (uint256 _growing) {\\n\\t\\t_growing = grown(tokenId);\\n\\t\\tclaims[tokenId] = newReflection();\\n\\t}\\n\\n\\tfunction work(\\n\\t\\tuint256 tokenId,\\n\\t\\tuint16 packageId,\\n\\t\\tuint256 working\\n\\t) external onlySpace returns (uint256 life, uint256 reward) {\\n\\t\\tuint256 _workAvailable = workAvailable;\\n\\t\\tif (packageId > 0) {\\n\\t\\t\\tuint16 package = packageId - 1;\\n\\t\\t\\tuint256 info = packages[package].info;\\n\\t\\t\\trequire(package < packages.length);\\n\\t\\t\\trequire(space.atopia().getAge(tokenId) >= uint128(info));\\n\\t\\t\\t//require(packages[package].rewards <= workAvailable);\\n\\n\\t\\t\\tuint256 packageReward;\\n\\t\\t\\tif (working > 0) {\\n\\t\\t\\t\\tuint16 currentPackage = uint16(working >> 128);\\n\\t\\t\\t\\tuint256 end = uint128(working);\\n\\t\\t\\t\\t//require(block.timestamp >= end);\\n\\t\\t\\t\\tpackageReward = packages[currentPackage - 1].rewards;\\n\\t\\t\\t\\tif (block.timestamp >= end) {\\n\\t\\t\\t\\t\\treward = packageReward;\\n\\t\\t\\t\\t} else {\\n\\t\\t\\t\\t\\t_workAvailable += packageReward;\\n\\t\\t\\t\\t}\\n\\t\\t\\t}\\n\\n\\t\\t\\tpackageReward = packages[package].rewards;\\n\\t\\t\\trequire(packageReward <= _workAvailable);\\n\\t\\t\\tworkAvailable = _workAvailable - packageReward;\\n\\t\\t\\tlife = (id << 192) | (uint256(packageId) << 128) | (block.timestamp + (info >> 128));\\n\\t\\t} else {\\n\\t\\t\\t// finish or quit work\\n\\t\\t\\tuint16 currentPackage = uint16(working >> 128);\\n\\t\\t\\tuint256 end = uint128(working);\\n\\t\\t\\tuint256 packageReward = packages[currentPackage - 1].rewards;\\n\\t\\t\\trequire(currentPackage > 0 && end > 0);\\n\\t\\t\\tif (block.timestamp >= end) {\\n\\t\\t\\t\\treward = packageReward;\\n\\t\\t\\t} else {\\n\\t\\t\\t\\tworkAvailable = _workAvailable + packageReward;\\n\\t\\t\\t}\\n\\t\\t}\\n\\t}\\n\\n\\tfunction addPackage(string memory packageName, uint256 taskId) external onlyOwner {\\n\\t\\tTask memory task = space.tasks(taskId);\\n\\t\\tPackage memory newPackage = Package(packages.length + 1, packageName, task.info, task.rewards);\\n\\t\\tpackages.push(newPackage);\\n\\t\\temit PackageAdded(newPackage);\\n\\t}\\n\\n\\tfunction updatePackage(uint256 packageId, string memory packageName) external onlyOwner {\\n\\t\\trequire(packageId > 0 && packages.length <= packageId);\\n\\t\\tpackageId -= 1;\\n\\t\\tpackages[packageId].name = packageName;\\n\\t\\temit PackageUpdated(packages[packageId]);\\n\\t}\\n\\n\\tfunction upgrade() external onlyOwner {\\n\\t\\trequire(getProgress() == 100);\\n\\t\\tprogress -= emission * 100;\\n\\t\\temission = (emission * 110) / 100;\\n\\t\\tlevel += 1;\\n\\t\\tupdateReflection();\\n\\t\\temit LevelUpdated(level);\\n\\t}\\n\\n\\tfunction addFeeAmount(uint256 feeAmount) external onlySpace {\\n\\t\\ttotalFeeAmount += feeAmount;\\n\\t}\\n\\n\\tfunction withdraw() external onlyOwner {\\n\\t\\tuint256 fee = (totalFeeAmount * FEE_PERCENT) / 10000;\\n\\t\\tuint256 newWork = (totalFeeAmount * WORK_PERCENT) / 10000;\\n\\t\\tworkAvailable += newWork;\\n\\t\\ttotalFeeAmount = 0;\\n\\t\\t//space.atopia().bucks().burn(bucks - fee - newWork);\\n\\t\\t//space.atopia().bucks().transfer(msg.sender, fee);\\n\\t\\tspace.claimBucks(id, fee);\\n\\t}\\n\\n\\tfunction metadata() external view returns (string memory) {\\n\\t\\treturn\\n\\t\\t\\tstring(\\n\\t\\t\\t\\tabi.encodePacked(\\n\\t\\t\\t\\t\\t\\\"data:application/json;base64,\\\",\\n\\t\\t\\t\\t\\tBase64.encode(\\n\\t\\t\\t\\t\\t\\tabi.encodePacked(\\n\\t\\t\\t\\t\\t\\t\\t'{\\\"name\\\":\\\"',\\n\\t\\t\\t\\t\\t\\t\\tname,\\n\\t\\t\\t\\t\\t\\t\\t'\\\",\\\"description\\\":\\\"',\\n\\t\\t\\t\\t\\t\\t\\tdescription,\\n\\t\\t\\t\\t\\t\\t\\t'\\\",\\\"image\\\":\\\"data:image/svg+xml;base64,',\\n\\t\\t\\t\\t\\t\\t\\tBase64.encode(bytes(image)),\\n\\t\\t\\t\\t\\t\\t\\t'\\\",\\\"attributes\\\":[{\\\"display_type\\\":\\\"number\\\",\\\"trait_type\\\":\\\"Emission\\\",\\\"value\\\":\\\"',\\n\\t\\t\\t\\t\\t\\t\\temission.toString(),\\n\\t\\t\\t\\t\\t\\t\\t'\\\"},{\\\"display_type\\\":\\\"number\\\",\\\"trait_type\\\":\\\"Min Age\\\",\\\"value\\\":\\\"',\\n\\t\\t\\t\\t\\t\\t\\t((minAge * 10) / 365 days).toString(),\\n\\t\\t\\t\\t\\t\\t\\t'\\\"},{\\\"trait_type\\\":\\\"Level\\\",\\\"value\\\":\\\"',\\n\\t\\t\\t\\t\\t\\t\\tlevel.toString(),\\n\\t\\t\\t\\t\\t\\t\\t'\\\"},{\\\"display_type\\\":\\\"boost_percentage\\\",\\\"trait_type\\\":\\\"Progress\\\",\\\"value\\\":\\\"',\\n\\t\\t\\t\\t\\t\\t\\tgetProgress().toString(),\\n\\t\\t\\t\\t\\t\\t\\t'\\\"},{\\\"display_type\\\":\\\"boost_percentage\\\",\\\"trait_type\\\":\\\"Fee\\\",\\\"value\\\":\\\"',\\n\\t\\t\\t\\t\\t\\t\\t(enjoyFee / 100).toString(),\\n\\t\\t\\t\\t\\t\\t\\t'\\\"}]}'\\n\\t\\t\\t\\t\\t\\t)\\n\\t\\t\\t\\t\\t)\\n\\t\\t\\t\\t)\\n\\t\\t\\t);\\n\\t}\\n}\\n\"\r\n    }\r\n  }\r\n}}","ABI":"[{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"level\",\"type\":\"uint256\"}],\"name\":\"LevelUpdated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"components\":[{\"internalType\":\"uint256\",\"name\":\"id\",\"type\":\"uint256\"},{\"internalType\":\"string\",\"name\":\"name\",\"type\":\"string\"},{\"internalType\":\"uint256\",\"name\":\"info\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"rewards\",\"type\":\"uint256\"}],\"indexed\":false,\"internalType\":\"struct AtopiaCenter.Package\",\"name\":\"newPackage\",\"type\":\"tuple\"}],\"name\":\"PackageAdded\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"components\":[{\"internalType\":\"uint256\",\"name\":\"id\",\"type\":\"uint256\"},{\"internalType\":\"string\",\"name\":\"name\",\"type\":\"string\"},{\"internalType\":\"uint256\",\"name\":\"info\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"rewards\",\"type\":\"uint256\"}],\"indexed\":false,\"internalType\":\"struct AtopiaCenter.Package\",\"name\":\"newPackage\",\"type\":\"tuple\"}],\"name\":\"PackageUpdated\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"FEE_PERCENT\",\"outputs\":[{\"internalType\":\"uint16\",\"name\":\"\",\"type\":\"uint16\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"WORK_PERCENT\",\"outputs\":[{\"internalType\":\"uint16\",\"name\":\"\",\"type\":\"uint16\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"feeAmount\",\"type\":\"uint256\"}],\"name\":\"addFeeAmount\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"string\",\"name\":\"packageName\",\"type\":\"string\"},{\"internalType\":\"uint256\",\"name\":\"taskId\",\"type\":\"uint256\"}],\"name\":\"addPackage\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"admin\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"claims\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"currentReflection\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"description\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"emission\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"enjoyFee\",\"outputs\":[{\"internalType\":\"uint16\",\"name\":\"\",\"type\":\"uint16\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"enter\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"exit\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"_growing\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getProgress\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"grow\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"_growing\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"grown\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"id\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"image\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"space\",\"type\":\"address\"}],\"name\":\"initialize\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"initialized\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"lastUpdateAt\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"level\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"metadata\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"minAge\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"name\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"newReflection\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"packages\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"id\",\"type\":\"uint256\"},{\"internalType\":\"string\",\"name\":\"name\",\"type\":\"string\"},{\"internalType\":\"uint256\",\"name\":\"info\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"rewards\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"progress\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_id\",\"type\":\"uint256\"}],\"name\":\"setId\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"space\",\"outputs\":[{\"internalType\":\"contract ISpace\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalFeeAmount\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalPackages\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalStaking\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"packageId\",\"type\":\"uint256\"},{\"internalType\":\"string\",\"name\":\"packageName\",\"type\":\"string\"}],\"name\":\"updatePackage\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"upgrade\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"withdraw\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"},{\"internalType\":\"uint16\",\"name\":\"packageId\",\"type\":\"uint16\"},{\"internalType\":\"uint256\",\"name\":\"working\",\"type\":\"uint256\"}],\"name\":\"work\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"life\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"reward\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"workAvailable\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"workRewards\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"}]","ContractName":"AtopiaSpaceStation1","CompilerVersion":"v0.8.4+commit.c7e474f2","OptimizationUsed":"0","Runs":"200","ConstructorArguments":"","EVMVersion":"Default","Library":"","LicenseType":"MIT","Proxy":"0","Implementation":"","SwarmSource":""}]}