{"status":"1","message":"OK","result":[{"SourceCode":"{{\r\n  \"language\": \"Solidity\",\r\n  \"settings\": {\r\n    \"evmVersion\": \"istanbul\",\r\n    \"libraries\": {},\r\n    \"metadata\": {\r\n      \"bytecodeHash\": \"ipfs\",\r\n      \"useLiteralContent\": true\r\n    },\r\n    \"optimizer\": {\r\n      \"enabled\": true,\r\n      \"runs\": 200\r\n    },\r\n    \"remappings\": [],\r\n    \"outputSelection\": {\r\n      \"*\": {\r\n        \"*\": [\r\n          \"evm.bytecode\",\r\n          \"evm.deployedBytecode\",\r\n          \"abi\"\r\n        ]\r\n      }\r\n    }\r\n  },\r\n  \"sources\": {\r\n    \"@openzeppelin/contracts/access/Ownable.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../utils/Context.sol\\\";\\n/**\\n * @dev Contract module which provides a basic access control mechanism, where\\n * there is an account (an owner) that can be granted exclusive access to\\n * specific functions.\\n *\\n * By default, the owner account will be the one that deploys the contract. This\\n * can later be changed with {transferOwnership}.\\n *\\n * This module is used through inheritance. It will make available the modifier\\n * `onlyOwner`, which can be applied to your functions to restrict their use to\\n * the owner.\\n */\\nabstract contract Ownable is Context {\\n    address private _owner;\\n\\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\\n\\n    /**\\n     * @dev Initializes the contract setting the deployer as the initial owner.\\n     */\\n    constructor () {\\n        address msgSender = _msgSender();\\n        _owner = msgSender;\\n        emit OwnershipTransferred(address(0), msgSender);\\n    }\\n\\n    /**\\n     * @dev Returns the address of the current owner.\\n     */\\n    function owner() public view virtual returns (address) {\\n        return _owner;\\n    }\\n\\n    /**\\n     * @dev Throws if called by any account other than the owner.\\n     */\\n    modifier onlyOwner() {\\n        require(owner() == _msgSender(), \\\"Ownable: caller is not the owner\\\");\\n        _;\\n    }\\n\\n    /**\\n     * @dev Leaves the contract without owner. It will not be possible to call\\n     * `onlyOwner` functions anymore. Can only be called by the current owner.\\n     *\\n     * NOTE: Renouncing ownership will leave the contract without an owner,\\n     * thereby removing any functionality that is only available to the owner.\\n     */\\n    function renounceOwnership() public virtual onlyOwner {\\n        emit OwnershipTransferred(_owner, address(0));\\n        _owner = address(0);\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Can only be called by the current owner.\\n     */\\n    function transferOwnership(address newOwner) public virtual onlyOwner {\\n        require(newOwner != address(0), \\\"Ownable: new owner is the zero address\\\");\\n        emit OwnershipTransferred(_owner, newOwner);\\n        _owner = newOwner;\\n    }\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/utils/Context.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\n/*\\n * @dev Provides information about the current execution context, including the\\n * sender of the transaction and its data. While these are generally available\\n * via msg.sender and msg.data, they should not be accessed in such a direct\\n * manner, since when dealing with meta-transactions the account sending and\\n * paying for execution may not be the actual sender (as far as an application\\n * is concerned).\\n *\\n * This contract is only required for intermediate, library-like contracts.\\n */\\nabstract contract Context {\\n    function _msgSender() internal view virtual returns (address) {\\n        return msg.sender;\\n    }\\n\\n    function _msgData() internal view virtual returns (bytes calldata) {\\n        this; // silence state mutability warning without generating bytecode - see https://github.com/ethereum/solidity/issues/2691\\n        return msg.data;\\n    }\\n}\\n\"\r\n    },\r\n    \"contracts/models/fee/IFeeModel.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: GPL-3.0-or-later\\npragma solidity 0.8.4;\\n\\ninterface IFeeModel {\\n    function beneficiary() external view returns (address payable);\\n\\n    function getInterestFeeAmount(address pool, uint256 interestAmount)\\n        external\\n        view\\n        returns (uint256 feeAmount);\\n\\n    function getEarlyWithdrawFeeAmount(\\n        address pool,\\n        uint64 depositID,\\n        uint256 withdrawnDepositAmount\\n    ) external view returns (uint256 feeAmount);\\n}\\n\"\r\n    },\r\n    \"contracts/models/fee/PercentageFeeModel.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: GPL-3.0-or-later\\npragma solidity 0.8.4;\\n\\nimport {Ownable} from \\\"@openzeppelin/contracts/access/Ownable.sol\\\";\\nimport {IFeeModel} from \\\"./IFeeModel.sol\\\";\\n\\ncontract PercentageFeeModel is IFeeModel, Ownable {\\n    uint256 internal constant PRECISION = 10**18;\\n    uint256 internal constant MAX_INTEREST_FEE = 50 * 10**16; // 50%\\n    uint256 internal constant MAX_EARLY_WITHDRAW_FEE = 5 * 10**16; // 5%\\n\\n    struct FeeOverride {\\n        bool isOverridden;\\n        uint256 fee;\\n    }\\n\\n    address payable public override beneficiary;\\n    mapping(address => FeeOverride) public interestFeeOverrideForPool;\\n    mapping(address => FeeOverride) public earlyWithdrawFeeOverrideForPool;\\n    mapping(address => mapping(uint64 => FeeOverride))\\n        public earlyWithdrawFeeOverrideForDeposit;\\n\\n    uint256 public interestFee;\\n    uint256 public earlyWithdrawFee;\\n\\n    event SetBeneficiary(address newBeneficiary);\\n    event SetInterestFee(uint256 newValue);\\n    event SetEarlyWithdrawFee(uint256 newValue);\\n    event OverrideInterestFeeForPool(address indexed pool, uint256 newFee);\\n    event OverrideEarlyWithdrawFeeForPool(address indexed pool, uint256 newFee);\\n    event OverrideEarlyWithdrawFeeForDeposit(\\n        address indexed pool,\\n        uint64 indexed depositID,\\n        uint256 newFee\\n    );\\n\\n    constructor(\\n        address payable _beneficiary,\\n        uint256 _interestFee,\\n        uint256 _earlyWithdrawFee\\n    ) {\\n        require(\\n            _beneficiary != address(0) &&\\n                _interestFee <= MAX_INTEREST_FEE &&\\n                _earlyWithdrawFee <= MAX_EARLY_WITHDRAW_FEE,\\n            \\\"PercentageFeeModel: invalid input\\\"\\n        );\\n        beneficiary = _beneficiary;\\n        interestFee = _interestFee;\\n        earlyWithdrawFee = _earlyWithdrawFee;\\n    }\\n\\n    function getInterestFeeAmount(address pool, uint256 interestAmount)\\n        external\\n        view\\n        override\\n        returns (uint256 feeAmount)\\n    {\\n        uint256 feeRate;\\n        FeeOverride memory feeOverrideForPool =\\n            interestFeeOverrideForPool[pool];\\n        if (feeOverrideForPool.isOverridden) {\\n            // fee has been overridden for pool\\n            feeRate = feeOverrideForPool.fee;\\n        } else {\\n            // use default fee\\n            feeRate = interestFee;\\n        }\\n        return (interestAmount * feeRate) / PRECISION;\\n    }\\n\\n    function getEarlyWithdrawFeeAmount(\\n        address pool,\\n        uint64 depositID,\\n        uint256 withdrawnDepositAmount\\n    ) external view override returns (uint256 feeAmount) {\\n        uint256 feeRate;\\n        FeeOverride memory feeOverrideForDeposit =\\n            earlyWithdrawFeeOverrideForDeposit[pool][depositID];\\n        if (feeOverrideForDeposit.isOverridden) {\\n            // fee has been overridden for deposit\\n            feeRate = feeOverrideForDeposit.fee;\\n        } else {\\n            FeeOverride memory feeOverrideForPool =\\n                earlyWithdrawFeeOverrideForPool[pool];\\n            if (feeOverrideForPool.isOverridden) {\\n                // fee has been overridden for pool\\n                feeRate = feeOverrideForPool.fee;\\n            } else {\\n                // use default fee\\n                feeRate = earlyWithdrawFee;\\n            }\\n        }\\n        return (withdrawnDepositAmount * feeRate) / PRECISION;\\n    }\\n\\n    function setBeneficiary(address payable newValue) external onlyOwner {\\n        require(newValue != address(0), \\\"PercentageFeeModel: 0 address\\\");\\n        beneficiary = newValue;\\n        emit SetBeneficiary(newValue);\\n    }\\n\\n    function setInterestFee(uint256 newValue) external onlyOwner {\\n        require(newValue <= MAX_INTEREST_FEE, \\\"PercentageFeeModel: too big\\\");\\n        interestFee = newValue;\\n        emit SetInterestFee(newValue);\\n    }\\n\\n    function setEarlyWithdrawFee(uint256 newValue) external onlyOwner {\\n        require(\\n            newValue <= MAX_EARLY_WITHDRAW_FEE,\\n            \\\"PercentageFeeModel: too big\\\"\\n        );\\n        earlyWithdrawFee = newValue;\\n        emit SetEarlyWithdrawFee(newValue);\\n    }\\n\\n    function overrideInterestFeeForPool(address pool, uint256 newFee)\\n        external\\n        onlyOwner\\n    {\\n        require(newFee <= interestFee, \\\"PercentageFeeModel: too big\\\");\\n        interestFeeOverrideForPool[pool] = FeeOverride({\\n            isOverridden: true,\\n            fee: newFee\\n        });\\n        emit OverrideInterestFeeForPool(pool, newFee);\\n    }\\n\\n    function overrideEarlyWithdrawFeeForPool(address pool, uint256 newFee)\\n        external\\n        onlyOwner\\n    {\\n        require(newFee <= earlyWithdrawFee, \\\"PercentageFeeModel: too big\\\");\\n        earlyWithdrawFeeOverrideForPool[pool] = FeeOverride({\\n            isOverridden: true,\\n            fee: newFee\\n        });\\n        emit OverrideEarlyWithdrawFeeForPool(pool, newFee);\\n    }\\n\\n    function overrideEarlyWithdrawFeeForDeposit(\\n        address pool,\\n        uint64 depositID,\\n        uint256 newFee\\n    ) external onlyOwner {\\n        require(newFee <= earlyWithdrawFee, \\\"PercentageFeeModel: too big\\\");\\n        earlyWithdrawFeeOverrideForDeposit[pool][depositID] = FeeOverride({\\n            isOverridden: true,\\n            fee: newFee\\n        });\\n        emit OverrideEarlyWithdrawFeeForDeposit(pool, depositID, newFee);\\n    }\\n}\\n\"\r\n    }\r\n  }\r\n}}","ABI":"[{\"inputs\":[{\"internalType\":\"address payable\",\"name\":\"_beneficiary\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_interestFee\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_earlyWithdrawFee\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"pool\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"uint64\",\"name\":\"depositID\",\"type\":\"uint64\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"newFee\",\"type\":\"uint256\"}],\"name\":\"OverrideEarlyWithdrawFeeForDeposit\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"pool\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"newFee\",\"type\":\"uint256\"}],\"name\":\"OverrideEarlyWithdrawFeeForPool\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"pool\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"newFee\",\"type\":\"uint256\"}],\"name\":\"OverrideInterestFeeForPool\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"newBeneficiary\",\"type\":\"address\"}],\"name\":\"SetBeneficiary\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"newValue\",\"type\":\"uint256\"}],\"name\":\"SetEarlyWithdrawFee\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"newValue\",\"type\":\"uint256\"}],\"name\":\"SetInterestFee\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"beneficiary\",\"outputs\":[{\"internalType\":\"address payable\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"earlyWithdrawFee\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"},{\"internalType\":\"uint64\",\"name\":\"\",\"type\":\"uint64\"}],\"name\":\"earlyWithdrawFeeOverrideForDeposit\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"isOverridden\",\"type\":\"bool\"},{\"internalType\":\"uint256\",\"name\":\"fee\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"earlyWithdrawFeeOverrideForPool\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"isOverridden\",\"type\":\"bool\"},{\"internalType\":\"uint256\",\"name\":\"fee\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"pool\",\"type\":\"address\"},{\"internalType\":\"uint64\",\"name\":\"depositID\",\"type\":\"uint64\"},{\"internalType\":\"uint256\",\"name\":\"withdrawnDepositAmount\",\"type\":\"uint256\"}],\"name\":\"getEarlyWithdrawFeeAmount\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"feeAmount\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"pool\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"interestAmount\",\"type\":\"uint256\"}],\"name\":\"getInterestFeeAmount\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"feeAmount\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"interestFee\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"interestFeeOverrideForPool\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"isOverridden\",\"type\":\"bool\"},{\"internalType\":\"uint256\",\"name\":\"fee\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"pool\",\"type\":\"address\"},{\"internalType\":\"uint64\",\"name\":\"depositID\",\"type\":\"uint64\"},{\"internalType\":\"uint256\",\"name\":\"newFee\",\"type\":\"uint256\"}],\"name\":\"overrideEarlyWithdrawFeeForDeposit\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"pool\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"newFee\",\"type\":\"uint256\"}],\"name\":\"overrideEarlyWithdrawFeeForPool\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"pool\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"newFee\",\"type\":\"uint256\"}],\"name\":\"overrideInterestFeeForPool\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address payable\",\"name\":\"newValue\",\"type\":\"address\"}],\"name\":\"setBeneficiary\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"newValue\",\"type\":\"uint256\"}],\"name\":\"setEarlyWithdrawFee\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"newValue\",\"type\":\"uint256\"}],\"name\":\"setInterestFee\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}]","ContractName":"PercentageFeeModel","CompilerVersion":"v0.8.4+commit.c7e474f2","OptimizationUsed":"1","Runs":"200","ConstructorArguments":"0000000000000000000000008cc9adf88fe0b5c739bd936e9edaad30578f426500000000000000000000000000000000000000000000000002c68af0bb1400000000000000000000000000000000000000000000000000000011c37937e08000","EVMVersion":"Default","Library":"","LicenseType":"GNU GPLv3","Proxy":"0","Implementation":"","SwarmSource":""}]}