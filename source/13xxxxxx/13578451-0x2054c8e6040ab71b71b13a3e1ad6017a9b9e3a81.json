{"status":"1","message":"OK","result":[{"SourceCode":"{{\r\n  \"language\": \"Solidity\",\r\n  \"sources\": {\r\n    \"contracts/XAEA12Staking.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\r\\npragma solidity ^0.6.0;\\r\\npragma experimental ABIEncoderV2;\\r\\n\\r\\nimport \\\"./external/Address.sol\\\";\\r\\nimport \\\"./external/Ownable.sol\\\";\\r\\nimport \\\"./external/IERC20.sol\\\";\\r\\nimport \\\"./external/SafeMath.sol\\\";\\r\\nimport \\\"./external/SafeERC20.sol\\\";\\r\\nimport \\\"./external/Uniswap.sol\\\";\\r\\nimport \\\"./external/ReentrancyGuard.sol\\\";\\r\\nimport \\\"./XAEA12.sol\\\";\\r\\n\\r\\ncontract Reserve is Ownable {\\r\\n    function safeTransfer(IERC20 rewardToken, address _to, uint256 _amount) external onlyOwner {\\r\\n        uint256 tokenBal = rewardToken.balanceOf(address(this));\\r\\n        if (_amount > tokenBal) {\\r\\n            rewardToken.transfer(_to, tokenBal);\\r\\n        } else {\\r\\n            rewardToken.transfer(_to, _amount);\\r\\n        }\\r\\n    }\\r\\n}\\r\\n\\r\\ncontract XAEA12Staking is Ownable {\\r\\n    using SafeMath for uint256;\\r\\n    using SafeERC20 for IERC20;\\r\\n\\r\\n    struct WithdrawFeeInterval {\\r\\n        uint256 day;\\r\\n        uint256 fee;\\r\\n    }\\r\\n\\r\\n    struct UserInfo {\\r\\n        uint256 amount;\\r\\n        uint256 rewardDebt;\\r\\n        uint256 rewardLockedUp;\\r\\n        uint256 nextHarvestUntil;\\r\\n        uint256 depositTimestamp;\\r\\n    }\\r\\n\\r\\n    struct PoolInfo {\\r\\n        IERC20 stakedToken;\\r\\n        IERC20 rewardToken;\\r\\n        uint256 stakedAmount;\\r\\n        uint256 rewardSupply;\\r\\n        uint256 tokenPerBlock;\\r\\n        uint256 lastRewardBlock;\\r\\n        uint256 accTokenPerShare;\\r\\n        uint16 depositFeeBP;\\r\\n        uint256 minDeposit;\\r\\n        uint256 harvestInterval;\\r\\n        bool lockDeposit;\\r\\n    }\\r\\n\\r\\n    Reserve public rewardReserve;\\r\\n    uint256 public constant BONUS_MULTIPLIER = 1;\\r\\n    uint256 public constant MAXIMUM_HARVEST_INTERVAL = 14 days;\\r\\n\\r\\n    mapping(address => mapping(address => bool)) internal poolExists;\\r\\n    mapping(uint256 => uint256) public rewardDistributions;\\r\\n\\r\\n    PoolInfo[] public poolInfo;\\r\\n    mapping(uint256 => mapping(address => UserInfo)) public userInfo;\\r\\n    mapping(uint256 => WithdrawFeeInterval[]) public withdrawFee;\\r\\n    uint256 public startBlock;\\r\\n    bool public paused = true;\\r\\n    bool public initialized = false;\\r\\n\\r\\n    event Deposit(address indexed user, uint256 indexed pid, uint256 amount);\\r\\n    event Withdraw(address indexed user, uint256 indexed pid, uint256 amount);\\r\\n    event EmergencyWithdraw(address indexed user, uint256 indexed pid, uint256 amount);\\r\\n    event RewardLockedUp(address indexed user, uint256 indexed pid, uint256 amountLockedUp);\\r\\n    event PoolUpdated(uint256 tokenPerBlock, uint256 depositFee, uint256 minDeposit, uint256 harvestInterval);\\r\\n    event RewardTokenDeposited(address depositer, uint256 pid, uint256 amount);\\r\\n    event AdminEmergencyWithdraw(uint256 pid, uint256 currentRewardBalance, uint256 accTokenPerShare, uint256 tokenPerBlock, uint256 lastRewardBlock);\\r\\n    event PoolPausedUpdated(bool paused);\\r\\n    event DepositLocked(uint256 pid, bool depositLocked);\\r\\n\\r\\n    constructor(\\r\\n        address _owner,\\r\\n        IERC20 token\\r\\n    ) public {\\r\\n        require(_owner != address(0), \\\"XAEA12_STAKING: Invalid Owner address\\\");\\r\\n        require(address(token) != address(0), \\\"XAEA12_STAKING: Invalid token address\\\");\\r\\n\\r\\n        startBlock = 0;\\r\\n        rewardReserve = new Reserve();\\r\\n        transferOwnership(_owner);\\r\\n        WithdrawFeeInterval[] memory _withdrawFee = new WithdrawFeeInterval[](5);\\r\\n        _withdrawFee[0] = WithdrawFeeInterval(3 days, 25);\\r\\n        _withdrawFee[1] = WithdrawFeeInterval(10 days, 15);\\r\\n        _withdrawFee[2] = WithdrawFeeInterval(30 days, 5);\\r\\n        _withdrawFee[3] = WithdrawFeeInterval(90 days, 0);\\r\\n        add(200000e9, token, token, 0, 0, 0, _withdrawFee);\\r\\n    }\\r\\n\\r\\n    function initialize() external onlyOwner {\\r\\n        require(!initialized, \\\"XAEA12_STAKING: Staking already started!\\\");\\r\\n        initialized = true;\\r\\n        paused = false;\\r\\n        startBlock = block.number;\\r\\n        uint256 length = poolInfo.length;\\r\\n        for (uint256 pid = 0; pid < length; ++pid) {\\r\\n            poolInfo[pid].lastRewardBlock = startBlock;\\r\\n        }\\r\\n    }\\r\\n\\r\\n    function getWithdrawFeeIntervals(uint256 poolId) external view returns (WithdrawFeeInterval[] memory) {\\r\\n        return withdrawFee[poolId];\\r\\n    }\\r\\n\\r\\n    function poolLength() external view returns (uint256) {\\r\\n        return poolInfo.length;\\r\\n    }\\r\\n\\r\\n    function add(\\r\\n        uint256 _tokenPerBlock,\\r\\n        IERC20 _stakedToken,\\r\\n        IERC20 _rewardToken,\\r\\n        uint16 _depositFeeBP,\\r\\n        uint256 _minDeposit,\\r\\n        uint256 _harvestInterval,\\r\\n        WithdrawFeeInterval[] memory withdrawFeeIntervals\\r\\n    ) public onlyOwner {\\r\\n        require(address(_stakedToken) != address(0), \\\"XAEA12_STAKING: Invalid Staked token address\\\");\\r\\n        require(address(_rewardToken) != address(0), \\\"XAEA12_STAKING: Invalid Reward token address\\\");\\r\\n        require(poolInfo.length <= 1000, \\\"XAEA12_STAKING: Pool Length Full!\\\");\\r\\n        require(!poolExists[address(_stakedToken)][address(_rewardToken)], \\\"XAEA12_STAKING: Pool Already Exists!\\\");\\r\\n        require(_depositFeeBP <= 10000, \\\"XAEA12_STAKING: invalid deposit fee basis points\\\");\\r\\n        require(_harvestInterval <= MAXIMUM_HARVEST_INTERVAL, \\\"XAEA12_STAKING: invalid harvest interval\\\");\\r\\n\\r\\n        uint256 lastRewardBlock = block.number > startBlock ? block.number : startBlock;\\r\\n        poolInfo.push(\\r\\n            PoolInfo({\\r\\n                stakedToken: _stakedToken,\\r\\n                rewardToken: _rewardToken,\\r\\n                stakedAmount: 0,\\r\\n                rewardSupply: 0,\\r\\n                tokenPerBlock: _tokenPerBlock,\\r\\n                lastRewardBlock: lastRewardBlock,\\r\\n                accTokenPerShare: 0,\\r\\n                depositFeeBP: _depositFeeBP,\\r\\n                minDeposit: _minDeposit,\\r\\n                harvestInterval: _harvestInterval,\\r\\n                lockDeposit: false\\r\\n            })\\r\\n        );\\r\\n        uint256 length = withdrawFeeIntervals.length;\\r\\n        for (uint256 i = 0; i < length; i++) {\\r\\n            withdrawFee[poolInfo.length - 1].push(withdrawFeeIntervals[i]);\\r\\n        }\\r\\n        poolExists[address(_stakedToken)][address(_rewardToken)] = true;\\r\\n    }\\r\\n\\r\\n    function set(\\r\\n        uint256 _pid,\\r\\n        uint256 _tokenPerBlock,\\r\\n        uint16 _depositFeeBP,\\r\\n        uint256 _minDeposit,\\r\\n        uint256 _harvestInterval\\r\\n    ) external onlyOwner {\\r\\n        require(_depositFeeBP <= 10000, \\\"XAEA12_STAKING: invalid deposit fee basis points\\\");\\r\\n        require(_harvestInterval <= MAXIMUM_HARVEST_INTERVAL, \\\"XAEA12_STAKING: invalid harvest interval\\\");\\r\\n\\r\\n        poolInfo[_pid].tokenPerBlock = _tokenPerBlock;\\r\\n        poolInfo[_pid].depositFeeBP = _depositFeeBP;\\r\\n        poolInfo[_pid].minDeposit = _minDeposit;\\r\\n        poolInfo[_pid].harvestInterval = _harvestInterval;\\r\\n\\r\\n        emit PoolUpdated(_tokenPerBlock, _depositFeeBP, _minDeposit, _harvestInterval);\\r\\n    }\\r\\n\\r\\n    function getMultiplier(uint256 _from, uint256 _to) public pure returns (uint256) {\\r\\n        return _to.sub(_from).mul(BONUS_MULTIPLIER);\\r\\n    }\\r\\n\\r\\n    function pendingToken(uint256 _pid, address _user) external view returns (uint256) {\\r\\n        PoolInfo storage pool = poolInfo[_pid];\\r\\n        UserInfo storage user = userInfo[_pid][_user];\\r\\n        uint256 accTokenPerShare = pool.accTokenPerShare;\\r\\n        if (\\r\\n            block.number > pool.lastRewardBlock &&\\r\\n            pool.stakedAmount != 0 &&\\r\\n            pool.rewardToken.balanceOf(address(this)) > 0\\r\\n        ) {\\r\\n            uint256 multiplier = getMultiplier(pool.lastRewardBlock, block.number);\\r\\n            uint256 tokenReward = multiplier.mul(pool.tokenPerBlock);\\r\\n            accTokenPerShare = accTokenPerShare.add(tokenReward.mul(1e12).div(pool.stakedAmount));\\r\\n        }\\r\\n        return user.amount.mul(accTokenPerShare).div(1e12).sub(user.rewardDebt);\\r\\n    }\\r\\n\\r\\n    function canHarvest(uint256 _pid, address _user) public view returns (bool) {\\r\\n        UserInfo storage user = userInfo[_pid][_user];\\r\\n        return user.amount != 0 && block.timestamp >= user.nextHarvestUntil;\\r\\n    }\\r\\n\\r\\n    function updatePool(uint256 _pid) public {\\r\\n        PoolInfo storage pool = poolInfo[_pid];\\r\\n        if (block.number <= pool.lastRewardBlock) {\\r\\n            return;\\r\\n        }\\r\\n        uint256 tokenBalance = pool.stakedAmount;\\r\\n        if (tokenBalance == 0 || pool.tokenPerBlock == 0) {\\r\\n            pool.lastRewardBlock = block.number;\\r\\n            return;\\r\\n        }\\r\\n\\r\\n        uint256 multiplier = getMultiplier(pool.lastRewardBlock, block.number);\\r\\n        uint256 tokenReward = multiplier.mul(pool.tokenPerBlock);\\r\\n        uint256 rewardTokenSupply = pool.rewardSupply;\\r\\n        uint256 reward = tokenReward > rewardTokenSupply ? rewardTokenSupply : tokenReward;\\r\\n        if (reward > 0) {\\r\\n            pool.rewardSupply -= reward;\\r\\n            pool.accTokenPerShare = pool.accTokenPerShare.add(reward.mul(1e12).div(tokenBalance));\\r\\n        }\\r\\n        pool.lastRewardBlock = block.number;\\r\\n    }\\r\\n\\r\\n    function depositRewardToken(uint256 poolId, uint256 amount) external {\\r\\n        PoolInfo storage _poolInfo = poolInfo[poolId];\\r\\n        uint256 initialBalance = _poolInfo.rewardToken.balanceOf(address(rewardReserve));\\r\\n        _poolInfo.rewardToken.safeTransferFrom(msg.sender, address(rewardReserve), amount);\\r\\n        uint256 finalBalance = _poolInfo.rewardToken.balanceOf(address(rewardReserve));\\r\\n        _poolInfo.rewardSupply += finalBalance.sub(initialBalance);\\r\\n\\r\\n        emit RewardTokenDeposited(msg.sender, poolId, amount);\\r\\n    }\\r\\n\\r\\n    function deposit(uint256 _pid, uint256 _amount) external {\\r\\n        require(!paused, \\\"XAEA12_STAKING: Paused!\\\");\\r\\n        PoolInfo storage pool = poolInfo[_pid];\\r\\n        require(!pool.lockDeposit, \\\"XAEA12_STAKING: Deposit Locked!\\\");\\r\\n        UserInfo storage user = userInfo[_pid][msg.sender];\\r\\n        updatePool(_pid);\\r\\n        payOrLockupPendingToken(_pid);\\r\\n        if (_amount > 0) {\\r\\n            require(_amount >= poolInfo[_pid].minDeposit, \\\"XAEA12_STAKING: Not Enough Required Staking Tokens!\\\");\\r\\n            user.depositTimestamp = block.timestamp;\\r\\n            uint256 initialBalance = pool.stakedToken.balanceOf(address(this));\\r\\n            pool.stakedToken.safeTransferFrom(address(msg.sender), address(this), _amount);\\r\\n            uint256 finalBalance = pool.stakedToken.balanceOf(address(this));\\r\\n            uint256 delta = finalBalance.sub(initialBalance);\\r\\n            if (pool.depositFeeBP > 0) {\\r\\n                uint256 depositFee = _amount.mul(pool.depositFeeBP).div(10000);\\r\\n                pool.stakedToken.safeTransfer(owner(), depositFee);\\r\\n                user.amount = user.amount.add(delta).sub(depositFee);\\r\\n                pool.stakedAmount = pool.stakedAmount.add(delta).sub(depositFee);\\r\\n            } else {\\r\\n                user.amount = user.amount.add(delta);\\r\\n                pool.stakedAmount = pool.stakedAmount.add(delta);\\r\\n            }\\r\\n        }\\r\\n        user.rewardDebt = user.amount.mul(pool.accTokenPerShare).div(1e12);\\r\\n        emit Deposit(msg.sender, _pid, _amount);\\r\\n    }\\r\\n\\r\\n    function withdraw(uint256 _pid, uint256 _amount) external {\\r\\n        PoolInfo storage pool = poolInfo[_pid];\\r\\n        UserInfo storage user = userInfo[_pid][msg.sender];\\r\\n        require(user.amount >= _amount, \\\"XAEA12_STAKING: withdraw not good\\\");\\r\\n        updatePool(_pid);\\r\\n        payOrLockupPendingToken(_pid);\\r\\n        uint256 amountToTransfer = _amount;\\r\\n        if (_amount > 0) {\\r\\n            user.amount = user.amount.sub(_amount);\\r\\n            uint256 _withdrawFee = getWithdrawFee(_pid, user.depositTimestamp);\\r\\n            uint256 feeAmount = _amount.mul(_withdrawFee).div(1000);\\r\\n            amountToTransfer = _amount.sub(feeAmount);\\r\\n            pool.stakedAmount = pool.stakedAmount.sub(_amount);\\r\\n            pool.stakedToken.safeTransfer(owner(), feeAmount);\\r\\n            pool.stakedToken.safeTransfer(address(msg.sender), amountToTransfer);\\r\\n        }\\r\\n        user.rewardDebt = user.amount.mul(pool.accTokenPerShare).div(1e12);\\r\\n        emit Withdraw(msg.sender, _pid, amountToTransfer);\\r\\n    }\\r\\n\\r\\n    function payOrLockupPendingToken(uint256 _pid) internal {\\r\\n        PoolInfo storage pool = poolInfo[_pid];\\r\\n        UserInfo storage user = userInfo[_pid][msg.sender];\\r\\n\\r\\n        if (user.nextHarvestUntil == 0) {\\r\\n            user.nextHarvestUntil = block.timestamp.add(pool.harvestInterval);\\r\\n        }\\r\\n\\r\\n        uint256 pending = user.amount.mul(pool.accTokenPerShare).div(1e12).sub(user.rewardDebt);\\r\\n        if (canHarvest(_pid, msg.sender)) {\\r\\n            if (pending > 0 || user.rewardLockedUp > 0) {\\r\\n                uint256 totalRewards = pending.add(user.rewardLockedUp);\\r\\n\\r\\n                user.rewardLockedUp = 0;\\r\\n                user.nextHarvestUntil = block.timestamp.add(pool.harvestInterval);\\r\\n\\r\\n                rewardReserve.safeTransfer(pool.rewardToken, msg.sender, totalRewards);\\r\\n                rewardDistributions[_pid] = rewardDistributions[_pid].add(totalRewards);\\r\\n            }\\r\\n        } else if (pending > 0) {\\r\\n            user.rewardLockedUp = user.rewardLockedUp.add(pending);\\r\\n            emit RewardLockedUp(msg.sender, _pid, pending);\\r\\n        }\\r\\n    }\\r\\n\\r\\n    function getWithdrawFee(uint256 poolId, uint256 stakedTime) public view returns (uint256) {\\r\\n        uint256 depositTime = block.timestamp.sub(stakedTime);\\r\\n        WithdrawFeeInterval[] storage _withdrawFee = withdrawFee[poolId];\\r\\n        uint256 length = _withdrawFee.length;\\r\\n        for (uint256 i = 0; i < length; i++) {\\r\\n            if (depositTime <= _withdrawFee[i].day) return _withdrawFee[i].fee;\\r\\n        }\\r\\n        return 0;\\r\\n    }\\r\\n\\r\\n    function emergencyWithdraw(uint256 _pid) external {\\r\\n        PoolInfo storage pool = poolInfo[_pid];\\r\\n        UserInfo storage user = userInfo[_pid][msg.sender];\\r\\n        uint256 amount = user.amount;\\r\\n        require(amount != 0, \\\"XAEA12_STAKING: Not enought staked tokens!\\\");\\r\\n        pool.stakedToken.safeTransfer(address(msg.sender), amount);\\r\\n        emit EmergencyWithdraw(msg.sender, _pid, amount);\\r\\n        delete userInfo[_pid][msg.sender];\\r\\n    }\\r\\n\\r\\n    function emergencyAdminWithdraw(uint256 _pid) external onlyOwner {\\r\\n        PoolInfo storage pool = poolInfo[_pid];\\r\\n        uint256 balanceToWithdraw = pool.rewardToken.balanceOf(address(this));\\r\\n        require(balanceToWithdraw != 0, \\\"XAEA12_STAKING: Not enough balance to withdraw!\\\");\\r\\n        pool.rewardToken.transfer(owner(), balanceToWithdraw);\\r\\n        rewardReserve.safeTransfer(pool.rewardToken, owner(), pool.rewardToken.balanceOf(address(rewardReserve)));\\r\\n        emit AdminEmergencyWithdraw(_pid, pool.rewardToken.balanceOf(address(this)), pool.accTokenPerShare, pool.tokenPerBlock, pool.lastRewardBlock);\\r\\n        delete poolInfo[_pid];\\r\\n    }\\r\\n\\r\\n    function updatePaused(bool _value) external onlyOwner {\\r\\n        paused = _value;\\r\\n        emit PoolPausedUpdated(_value);\\r\\n    }\\r\\n\\r\\n    function setLockDeposit(uint256 pid, bool locked) external onlyOwner {\\r\\n        poolInfo[pid].lockDeposit = locked;\\r\\n        emit DepositLocked(pid, locked);\\r\\n    }\\r\\n}\"\r\n    },\r\n    \"contracts/external/Address.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\npragma solidity ^0.6.0;\\n\\n/**\\n * @dev Collection of functions related to the address type\\n */\\nlibrary Address {\\n    /**\\n     * @dev Returns true if `account` is a contract.\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * It is unsafe to assume that an address for which this function returns\\n     * false is an externally-owned account (EOA) and not a contract.\\n     *\\n     * Among others, `isContract` will return false for the following\\n     * types of addresses:\\n     *\\n     *  - an externally-owned account\\n     *  - a contract in construction\\n     *  - an address where a contract will be created\\n     *  - an address where a contract lived, but was destroyed\\n     * ====\\n     */\\n    function isContract(address account) internal view returns (bool) {\\n        // According to EIP-1052, 0x0 is the value returned for not-yet created accounts\\n        // and 0xc5d2460186f7233c927e7db2dcc703c0e500b653ca82273b7bfad8045d85a470 is returned\\n        // for accounts without code, i.e. `keccak256('')`\\n        bytes32 codehash;\\n\\n        bytes32 accountHash = 0xc5d2460186f7233c927e7db2dcc703c0e500b653ca82273b7bfad8045d85a470;\\n        // solhint-disable-next-line no-inline-assembly\\n        assembly {\\n            codehash := extcodehash(account)\\n        }\\n        return (codehash != accountHash && codehash != 0x0);\\n    }\\n\\n    /**\\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\\n     * `recipient`, forwarding all available gas and reverting on errors.\\n     *\\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\\n     * imposed by `transfer`, making them unable to receive funds via\\n     * `transfer`. {sendValue} removes this limitation.\\n     *\\n     * https://diligence.consensys.net/posts/2019/09/stop-using-soliditys-transfer-now/[Learn more].\\n     *\\n     * IMPORTANT: because control is transferred to `recipient`, care must be\\n     * taken to not create reentrancy vulnerabilities. Consider using\\n     * {ReentrancyGuard} or the\\n     * https://solidity.readthedocs.io/en/v0.5.11/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\\n     */\\n    function sendValue(address payable recipient, uint256 amount) internal {\\n        require(\\n            address(this).balance >= amount,\\n            \\\"Address: insufficient balance\\\"\\n        );\\n\\n        // solhint-disable-next-line avoid-low-level-calls, avoid-call-value\\n        (bool success, ) = recipient.call{value: amount}(\\\"\\\");\\n        require(\\n            success,\\n            \\\"Address: unable to send value, recipient may have reverted\\\"\\n        );\\n    }\\n\\n    /**\\n     * @dev Performs a Solidity function call using a low level `call`. A\\n     * plain`call` is an unsafe replacement for a function call: use this\\n     * function instead.\\n     *\\n     * If `target` reverts with a revert reason, it is bubbled up by this\\n     * function (like regular Solidity function calls).\\n     *\\n     * Returns the raw returned data. To convert to the expected return value,\\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\\n     *\\n     * Requirements:\\n     *\\n     * - `target` must be a contract.\\n     * - calling `target` with `data` must not revert.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(address target, bytes memory data)\\n        internal\\n        returns (bytes memory)\\n    {\\n        return functionCall(target, data, \\\"Address: low-level call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\\n     * `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        return _functionCallWithValue(target, data, 0, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but also transferring `value` wei to `target`.\\n     *\\n     * Requirements:\\n     *\\n     * - the calling contract must have an ETH balance of at least `value`.\\n     * - the called Solidity function must be `payable`.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value\\n    ) internal returns (bytes memory) {\\n        return\\n            functionCallWithValue(\\n                target,\\n                data,\\n                value,\\n                \\\"Address: low-level call with value failed\\\"\\n            );\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\\n     * with `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        require(\\n            address(this).balance >= value,\\n            \\\"Address: insufficient balance for call\\\"\\n        );\\n        return _functionCallWithValue(target, data, value, errorMessage);\\n    }\\n\\n    function _functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 weiValue,\\n        string memory errorMessage\\n    ) private returns (bytes memory) {\\n        require(isContract(target), \\\"Address: call to non-contract\\\");\\n\\n        // solhint-disable-next-line avoid-low-level-calls\\n        (bool success, bytes memory returndata) = target.call{value: weiValue}(\\n            data\\n        );\\n        if (success) {\\n            return returndata;\\n        } else {\\n            // Look for revert reason and bubble it up if present\\n            if (returndata.length > 0) {\\n                // The easiest way to bubble the revert reason is using memory via assembly\\n\\n                // solhint-disable-next-line no-inline-assembly\\n                assembly {\\n                    let returndata_size := mload(returndata)\\n                    revert(add(32, returndata), returndata_size)\\n                }\\n            } else {\\n                revert(errorMessage);\\n            }\\n        }\\n    }\\n}\\n\"\r\n    },\r\n    \"contracts/external/Ownable.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\npragma solidity ^0.6.0;\\nimport \\\"./Context.sol\\\";\\n\\n/**\\n * @dev Contract module which provides a basic access control mechanism, where\\n * there is an account (an owner) that can be granted exclusive access to\\n * specific functions.\\n *\\n * By default, the owner account will be the one that deploys the contract. This\\n * can later be changed with {transferOwnership}.\\n *\\n * This module is used through inheritance. It will make available the modifier\\n * `onlyOwner`, which can be applied to your functions to restrict their use to\\n * the owner.\\n */\\ncontract Ownable is Context {\\n    address private _owner;\\n\\n    event OwnershipTransferred(\\n        address indexed previousOwner,\\n        address indexed newOwner\\n    );\\n\\n    /**\\n     * @dev Initializes the contract setting the deployer as the initial owner.\\n     */\\n    constructor() internal {\\n        address msgSender = _msgSender();\\n        _owner = msgSender;\\n        emit OwnershipTransferred(address(0), msgSender);\\n    }\\n\\n    /**\\n     * @dev Returns the address of the current owner.\\n     */\\n    function owner() public view returns (address) {\\n        return _owner;\\n    }\\n\\n    /**\\n     * @dev Throws if called by any account other than the owner.\\n     */\\n    modifier onlyOwner() {\\n        require(_owner == _msgSender(), \\\"Ownable: caller is not the owner\\\");\\n        _;\\n    }\\n\\n    /**\\n     * @dev Leaves the contract without owner. It will not be possible to call\\n     * `onlyOwner` functions anymore. Can only be called by the current owner.\\n     *\\n     * NOTE: Renouncing ownership will leave the contract without an owner,\\n     * thereby removing any functionality that is only available to the owner.\\n     */\\n    function renounceOwnership() public virtual onlyOwner {\\n        emit OwnershipTransferred(_owner, address(0));\\n        _owner = address(0);\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Can only be called by the current owner.\\n     */\\n    function transferOwnership(address newOwner) public virtual onlyOwner {\\n        require(\\n            newOwner != address(0),\\n            \\\"Ownable: new owner is the zero address\\\"\\n        );\\n        emit OwnershipTransferred(_owner, newOwner);\\n        _owner = newOwner;\\n    }\\n}\\n\"\r\n    },\r\n    \"contracts/external/IERC20.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\npragma solidity ^0.6.0;\\n\\n/**\\n * @dev Interface of the ERC20 standard as defined in the EIP.\\n */\\ninterface IERC20 {\\n    /**\\n     * @dev Returns the amount of tokens in existence.\\n     */\\n    function totalSupply() external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the amount of tokens owned by `account`.\\n     */\\n    function balanceOf(address account) external view returns (uint256);\\n\\n    /**\\n     * @dev Moves `amount` tokens from the caller's account to `recipient`.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transfer(address recipient, uint256 amount)\\n        external\\n        returns (bool);\\n\\n    /**\\n     * @dev Returns the remaining number of tokens that `spender` will be\\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\\n     * zero by default.\\n     *\\n     * This value changes when {approve} or {transferFrom} are called.\\n     */\\n    function allowance(address owner, address spender)\\n        external\\n        view\\n        returns (uint256);\\n\\n    /**\\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\\n     * that someone may use both the old and the new allowance by unfortunate\\n     * transaction ordering. One possible solution to mitigate this race\\n     * condition is to first reduce the spender's allowance to 0 and set the\\n     * desired value afterwards:\\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address spender, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Moves `amount` tokens from `sender` to `recipient` using the\\n     * allowance mechanism. `amount` is then deducted from the caller's\\n     * allowance.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(\\n        address sender,\\n        address recipient,\\n        uint256 amount\\n    ) external returns (bool);\\n\\n    /**\\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\\n     * another (`to`).\\n     *\\n     * Note that `value` may be zero.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 value);\\n\\n    /**\\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\\n     * a call to {approve}. `value` is the new allowance.\\n     */\\n    event Approval(\\n        address indexed owner,\\n        address indexed spender,\\n        uint256 value\\n    );\\n}\\n\"\r\n    },\r\n    \"contracts/external/SafeMath.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\npragma solidity ^0.6.0;\\n\\n/**\\n * @dev Wrappers over Solidity's arithmetic operations with added overflow\\n * checks.\\n *\\n * Arithmetic operations in Solidity wrap on overflow. This can easily result\\n * in bugs, because programmers usually assume that an overflow raises an\\n * error, which is the standard behavior in high level programming languages.\\n * `SafeMath` restores this intuition by reverting the transaction when an\\n * operation overflows.\\n *\\n * Using this library instead of the unchecked operations eliminates an entire\\n * class of bugs, so it's recommended to use it always.\\n */\\nlibrary SafeMath {\\n    /**\\n     * @dev Returns the addition of two unsigned integers, reverting on\\n     * overflow.\\n     *\\n     * Counterpart to Solidity's `+` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Addition cannot overflow.\\n     */\\n    function add(uint256 a, uint256 b) internal pure returns (uint256) {\\n        uint256 c = a + b;\\n        require(c >= a, \\\"SafeMath: addition overflow\\\");\\n\\n        return c;\\n    }\\n\\n    /**\\n     * @dev Returns the subtraction of two unsigned integers, reverting on\\n     * overflow (when the result is negative).\\n     *\\n     * Counterpart to Solidity's `-` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Subtraction cannot overflow.\\n     */\\n    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return sub(a, b, \\\"SafeMath: subtraction overflow\\\");\\n    }\\n\\n    /**\\n     * @dev Returns the subtraction of two unsigned integers, reverting with custom message on\\n     * overflow (when the result is negative).\\n     *\\n     * Counterpart to Solidity's `-` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Subtraction cannot overflow.\\n     */\\n    function sub(\\n        uint256 a,\\n        uint256 b,\\n        string memory errorMessage\\n    ) internal pure returns (uint256) {\\n        require(b <= a, errorMessage);\\n        uint256 c = a - b;\\n\\n        return c;\\n    }\\n\\n    /**\\n     * @dev Returns the multiplication of two unsigned integers, reverting on\\n     * overflow.\\n     *\\n     * Counterpart to Solidity's `*` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Multiplication cannot overflow.\\n     */\\n    function mul(uint256 a, uint256 b) internal pure returns (uint256) {\\n        // Gas optimization: this is cheaper than requiring 'a' not being zero, but the\\n        // benefit is lost if 'b' is also tested.\\n        // See: https://github.com/OpenZeppelin/openzeppelin-contracts/pull/522\\n        if (a == 0) {\\n            return 0;\\n        }\\n\\n        uint256 c = a * b;\\n        require(c / a == b, \\\"SafeMath: multiplication overflow\\\");\\n\\n        return c;\\n    }\\n\\n    /**\\n     * @dev Returns the integer division of two unsigned integers. Reverts on\\n     * division by zero. The result is rounded towards zero.\\n     *\\n     * Counterpart to Solidity's `/` operator. Note: this function uses a\\n     * `revert` opcode (which leaves remaining gas untouched) while Solidity\\n     * uses an invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Requirements:\\n     *\\n     * - The divisor cannot be zero.\\n     */\\n    function div(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return div(a, b, \\\"SafeMath: division by zero\\\");\\n    }\\n\\n    /**\\n     * @dev Returns the integer division of two unsigned integers. Reverts with custom message on\\n     * division by zero. The result is rounded towards zero.\\n     *\\n     * Counterpart to Solidity's `/` operator. Note: this function uses a\\n     * `revert` opcode (which leaves remaining gas untouched) while Solidity\\n     * uses an invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Requirements:\\n     *\\n     * - The divisor cannot be zero.\\n     */\\n    function div(\\n        uint256 a,\\n        uint256 b,\\n        string memory errorMessage\\n    ) internal pure returns (uint256) {\\n        require(b > 0, errorMessage);\\n        uint256 c = a / b;\\n        // assert(a == b * c + a % b); // There is no case in which this doesn't hold\\n\\n        return c;\\n    }\\n\\n    /**\\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\\n     * Reverts when dividing by zero.\\n     *\\n     * Counterpart to Solidity's `%` operator. This function uses a `revert`\\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\\n     * invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Requirements:\\n     *\\n     * - The divisor cannot be zero.\\n     */\\n    function mod(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return mod(a, b, \\\"SafeMath: modulo by zero\\\");\\n    }\\n\\n    /**\\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\\n     * Reverts with custom message when dividing by zero.\\n     *\\n     * Counterpart to Solidity's `%` operator. This function uses a `revert`\\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\\n     * invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Requirements:\\n     *\\n     * - The divisor cannot be zero.\\n     */\\n    function mod(\\n        uint256 a,\\n        uint256 b,\\n        string memory errorMessage\\n    ) internal pure returns (uint256) {\\n        require(b != 0, errorMessage);\\n        return a % b;\\n    }\\n}\\n\"\r\n    },\r\n    \"contracts/external/SafeERC20.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.6.0;\\n\\nimport \\\"./IERC20.sol\\\";\\nimport \\\"./SafeMath.sol\\\";\\nimport \\\"./Address.sol\\\";\\n\\n/**\\n * @title SafeERC20\\n * @dev Wrappers around ERC20 operations that throw on failure (when the token\\n * contract returns false). Tokens that return no value (and instead revert or\\n * throw on failure) are also supported, non-reverting calls are assumed to be\\n * successful.\\n * To use this library you can add a `using SafeERC20 for IERC20;` statement to your contract,\\n * which allows you to call the safe operations as `token.safeTransfer(...)`, etc.\\n */\\nlibrary SafeERC20 {\\n    using SafeMath for uint256;\\n    using Address for address;\\n\\n    function safeTransfer(IERC20 token, address to, uint256 value) internal {\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.transfer.selector, to, value));\\n    }\\n\\n    function safeTransferFrom(IERC20 token, address from, address to, uint256 value) internal {\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.transferFrom.selector, from, to, value));\\n    }\\n\\n    /**\\n     * @dev Deprecated. This function has issues similar to the ones found in\\n     * {IERC20-approve}, and its usage is discouraged.\\n     *\\n     * Whenever possible, use {safeIncreaseAllowance} and\\n     * {safeDecreaseAllowance} instead.\\n     */\\n    function safeApprove(IERC20 token, address spender, uint256 value) internal {\\n        // safeApprove should only be called when setting an initial allowance,\\n        // or when resetting it to zero. To increase and decrease it, use\\n        // 'safeIncreaseAllowance' and 'safeDecreaseAllowance'\\n        // solhint-disable-next-line max-line-length\\n        require((value == 0) || (token.allowance(address(this), spender) == 0),\\n            \\\"SafeERC20: approve from non-zero to non-zero allowance\\\"\\n        );\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, value));\\n    }\\n\\n    function safeIncreaseAllowance(IERC20 token, address spender, uint256 value) internal {\\n        uint256 newAllowance = token.allowance(address(this), spender).add(value);\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));\\n    }\\n\\n    function safeDecreaseAllowance(IERC20 token, address spender, uint256 value) internal {\\n        uint256 newAllowance = token.allowance(address(this), spender).sub(value, \\\"SafeERC20: decreased allowance below zero\\\");\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));\\n    }\\n\\n    /**\\n     * @dev Imitates a Solidity high-level call (i.e. a regular function call to a contract), relaxing the requirement\\n     * on the return value: the return value is optional (but if data is returned, it must not be false).\\n     * @param token The token targeted by the call.\\n     * @param data The call data (encoded using abi.encode or one of its variants).\\n     */\\n    function _callOptionalReturn(IERC20 token, bytes memory data) private {\\n        // We need to perform a low level call here, to bypass Solidity's return data size checking mechanism, since\\n        // we're implementing it ourselves. We use {Address.functionCall} to perform this call, which verifies that\\n        // the target address contains contract code and also asserts for success in the low-level call.\\n\\n        bytes memory returndata = address(token).functionCall(data, \\\"SafeERC20: low-level call failed\\\");\\n        if (returndata.length > 0) { // Return data is optional\\n            // solhint-disable-next-line max-line-length\\n            require(abi.decode(returndata, (bool)), \\\"SafeERC20: ERC20 operation did not succeed\\\");\\n        }\\n    }\\n}\"\r\n    },\r\n    \"contracts/external/Uniswap.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\npragma solidity ^0.6.0;\\n\\ninterface IUniswapV2Factory {\\n    function createPair(address tokenA, address tokenB)\\n        external\\n        returns (address pair);\\n}\\n\\ninterface IUniswapV2Pair {\\n    function sync() external;\\n}\\n\\ninterface IUniswapV2Router01 {\\n    function factory() external pure returns (address);\\n\\n    function WETH() external pure returns (address);\\n\\n    function addLiquidity(\\n        address tokenA,\\n        address tokenB,\\n        uint256 amountADesired,\\n        uint256 amountBDesired,\\n        uint256 amountAMin,\\n        uint256 amountBMin,\\n        address to,\\n        uint256 deadline\\n    )\\n        external\\n        returns (\\n            uint256 amountA,\\n            uint256 amountB,\\n            uint256 liquidity\\n        );\\n\\n    function addLiquidityETH(\\n        address token,\\n        uint256 amountTokenDesired,\\n        uint256 amountTokenMin,\\n        uint256 amountETHMin,\\n        address to,\\n        uint256 deadline\\n    )\\n        external\\n        payable\\n        returns (\\n            uint256 amountToken,\\n            uint256 amountETH,\\n            uint256 liquidity\\n        );\\n}\\n\\ninterface IUniswapV2Router02 is IUniswapV2Router01 {\\n    function removeLiquidityETHSupportingFeeOnTransferTokens(\\n        address token,\\n        uint256 liquidity,\\n        uint256 amountTokenMin,\\n        uint256 amountETHMin,\\n        address to,\\n        uint256 deadline\\n    ) external returns (uint256 amountETH);\\n\\n    function swapExactTokensForETHSupportingFeeOnTransferTokens(\\n        uint256 amountIn,\\n        uint256 amountOutMin,\\n        address[] calldata path,\\n        address to,\\n        uint256 deadline\\n    ) external;\\n\\n    function swapExactTokensForTokensSupportingFeeOnTransferTokens(\\n        uint256 amountIn,\\n        uint256 amountOutMin,\\n        address[] calldata path,\\n        address to,\\n        uint256 deadline\\n    ) external;\\n\\n    function swapExactETHForTokensSupportingFeeOnTransferTokens(\\n        uint256 amountOutMin,\\n        address[] calldata path,\\n        address to,\\n        uint256 deadline\\n    ) external payable;\\n}\\n\"\r\n    },\r\n    \"contracts/external/ReentrancyGuard.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\npragma solidity ^0.6.0;\\n\\nabstract contract ReentrancyGuard {\\n    uint256 private constant _NOT_ENTERED = 1;\\n    uint256 private constant _ENTERED = 2;\\n\\n    uint256 private _status;\\n\\n    constructor() public {\\n        _status = _NOT_ENTERED;\\n    }\\n\\n    modifier nonReentrant() {\\n        require(_status != _ENTERED, \\\"ReentrancyGuard: reentrant call\\\");\\n        _status = _ENTERED;\\n        _;\\n        _status = _NOT_ENTERED;\\n    }\\n\\n    modifier isHuman() {\\n        require(tx.origin == msg.sender, \\\"sorry humans only\\\");\\n        _;\\n    }\\n}\\n\"\r\n    },\r\n    \"contracts/XAEA12.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\npragma solidity ^0.6.0;\\n\\nimport \\\"./external/Address.sol\\\";\\nimport \\\"./external/Ownable.sol\\\";\\nimport \\\"./external/IERC20.sol\\\";\\nimport \\\"./external/SafeMath.sol\\\";\\nimport \\\"./external/Uniswap.sol\\\";\\nimport \\\"./external/ReentrancyGuard.sol\\\";\\n\\nlibrary TransferHelper {\\n    function safeApprove(\\n        address token,\\n        address to,\\n        uint256 value\\n    ) internal {\\n        // bytes4(keccak256(bytes('approve(address,uint256)')));\\n        (bool success, bytes memory data) = token.call(\\n            abi.encodeWithSelector(0x095ea7b3, to, value)\\n        );\\n        require(\\n            success && (data.length == 0 || abi.decode(data, (bool))),\\n            \\\"TransferHelper::safeApprove: approve failed\\\"\\n        );\\n    }\\n\\n    function safeTransfer(\\n        address token,\\n        address to,\\n        uint256 value\\n    ) internal {\\n        // bytes4(keccak256(bytes('transfer(address,uint256)')));\\n        (bool success, bytes memory data) = token.call(\\n            abi.encodeWithSelector(0xa9059cbb, to, value)\\n        );\\n        require(\\n            success && (data.length == 0 || abi.decode(data, (bool))),\\n            \\\"TransferHelper::safeTransfer: transfer failed\\\"\\n        );\\n    }\\n\\n    function safeTransferFrom(\\n        address token,\\n        address from,\\n        address to,\\n        uint256 value\\n    ) internal {\\n        // bytes4(keccak256(bytes('transferFrom(address,address,uint256)')));\\n        (bool success, bytes memory data) = token.call(\\n            abi.encodeWithSelector(0x23b872dd, from, to, value)\\n        );\\n        require(\\n            success && (data.length == 0 || abi.decode(data, (bool))),\\n            \\\"TransferHelper::transferFrom: transferFrom failed\\\"\\n        );\\n    }\\n\\n    function safeTransferETH(address to, uint256 value) internal {\\n        (bool success, ) = to.call{value: value}(new bytes(0));\\n        require(\\n            success,\\n            \\\"TransferHelper::safeTransferETH: ETH transfer failed\\\"\\n        );\\n    }\\n}\\n\\ncontract XAEA12 is Context, IERC20, Ownable, ReentrancyGuard {\\n    using SafeMath for uint256;\\n    using Address for address;\\n    using TransferHelper for address;\\n\\n    string private _name = \\\"X AE A-12\\\";\\n    string private _symbol = \\\"XAEA12\\\";\\n    uint8 private _decimals = 9;\\n\\n    mapping(address => uint256) internal _reflectionBalance;\\n    mapping(address => uint256) internal _tokenBalance;\\n    mapping(address => mapping(address => uint256)) internal _allowances;\\n\\n    uint256 private constant MAX = ~uint256(0);\\n    uint256 internal _tokenTotal = 1000_000_000_000e9;\\n    uint256 internal _reflectionTotal = (MAX - (MAX % _tokenTotal));\\n\\n    mapping(address => bool) public isTaxless;\\n    mapping(address => bool) internal _isExcluded;\\n    address[] internal _excluded;\\n\\n    uint256 public _feeDecimal = 2;\\n    // index 0 = buy fee, index 1 = sell fee, index 2 = p2p fee\\n    uint256[] public _taxFee;\\n    uint256[] public _teamFee;\\n    uint256[] public _marketingFee;\\n\\n    uint256 internal _feeTotal;\\n    uint256 internal _marketingFeeCollected;\\n    uint256 internal _teamFeeCollected;\\n\\n    bool public isFeeActive = false; // should be true\\n    bool private inSwap;\\n    bool public swapEnabled = true;\\n    bool public isLaunchProtectionMode = true;\\n    mapping(address => bool) public launchProtectionWhitelist;\\n\\n    uint256 public maxTxAmount = _tokenTotal.mul(5).div(1000); // 0.5%\\n    \\n    uint256 public minTokensBeforeSwap = 5_000_000_000e9;\\n\\n    address public marketingWallet;\\n    address public teamWallet;\\n\\n    IUniswapV2Router02 public router;\\n    address public pair;\\n\\n    event SwapUpdated(bool enabled);\\n    event Swap(uint256 swaped, uint256 recieved);\\n\\n    modifier lockTheSwap() {\\n        inSwap = true;\\n        _;\\n        inSwap = false;\\n    }\\n\\n    constructor(\\n        address _router,\\n        address _owner,\\n        address _marketingWallet,\\n        address _teamWallet\\n    ) public {\\n        IUniswapV2Router02 _uniswapV2Router = IUniswapV2Router02(_router);\\n        pair = IUniswapV2Factory(_uniswapV2Router.factory()).createPair(\\n            address(this),\\n            _uniswapV2Router.WETH()\\n        );\\n        router = _uniswapV2Router;\\n        marketingWallet = _marketingWallet;\\n        teamWallet = _teamWallet;\\n\\n        isTaxless[_owner] = true;\\n        isTaxless[teamWallet] = true;\\n        isTaxless[marketingWallet] = true;\\n        isTaxless[address(this)] = true;\\n\\n        excludeAccount(address(pair));\\n        excludeAccount(address(this));\\n        excludeAccount(address(marketingWallet));\\n        excludeAccount(address(teamWallet));\\n        excludeAccount(address(address(0)));\\n        excludeAccount(\\n            address(address(0x000000000000000000000000000000000000dEaD))\\n        );\\n\\n        _reflectionBalance[_owner] = _reflectionTotal;\\n        emit Transfer(address(0), _owner, _tokenTotal);\\n\\n        _taxFee.push(200);\\n        _taxFee.push(200);\\n        _taxFee.push(200);\\n\\n        _teamFee.push(200);\\n        _teamFee.push(200);\\n        _teamFee.push(200);\\n\\n        _marketingFee.push(200);\\n        _marketingFee.push(200);\\n        _marketingFee.push(200);\\n\\n        transferOwnership(_owner);\\n    }\\n\\n    function name() public view returns (string memory) {\\n        return _name;\\n    }\\n\\n    function symbol() public view returns (string memory) {\\n        return _symbol;\\n    }\\n\\n    function decimals() public view returns (uint8) {\\n        return _decimals;\\n    }\\n\\n    function totalSupply() public view override returns (uint256) {\\n        return _tokenTotal;\\n    }\\n\\n    function balanceOf(address account) public view override returns (uint256) {\\n        if (_isExcluded[account]) return _tokenBalance[account];\\n        return tokenFromReflection(_reflectionBalance[account]);\\n    }\\n\\n    function transfer(address recipient, uint256 amount)\\n        public\\n        virtual\\n        override\\n        returns (bool)\\n    {\\n        _transfer(_msgSender(), recipient, amount);\\n        return true;\\n    }\\n\\n    function allowance(address owner, address spender)\\n        public\\n        view\\n        override\\n        returns (uint256)\\n    {\\n        return _allowances[owner][spender];\\n    }\\n\\n    function approve(address spender, uint256 amount)\\n        public\\n        override\\n        returns (bool)\\n    {\\n        _approve(_msgSender(), spender, amount);\\n        return true;\\n    }\\n\\n    function transferFrom(\\n        address sender,\\n        address recipient,\\n        uint256 amount\\n    ) public virtual override returns (bool) {\\n        _transfer(sender, recipient, amount);\\n\\n        _approve(\\n            sender,\\n            _msgSender(),\\n            _allowances[sender][_msgSender()].sub(\\n                amount,\\n                \\\"ERC20: transfer amount exceeds allowance\\\"\\n            )\\n        );\\n        return true;\\n    }\\n\\n    function increaseAllowance(address spender, uint256 addedValue)\\n        public\\n        virtual\\n        returns (bool)\\n    {\\n        _approve(\\n            _msgSender(),\\n            spender,\\n            _allowances[_msgSender()][spender].add(addedValue)\\n        );\\n        return true;\\n    }\\n\\n    function decreaseAllowance(address spender, uint256 subtractedValue)\\n        public\\n        virtual\\n        returns (bool)\\n    {\\n        _approve(\\n            _msgSender(),\\n            spender,\\n            _allowances[_msgSender()][spender].sub(\\n                subtractedValue,\\n                \\\"ERC20: decreased allowance below zero\\\"\\n            )\\n        );\\n        return true;\\n    }\\n\\n    function isExcluded(address account) public view returns (bool) {\\n        return _isExcluded[account];\\n    }\\n\\n    function reflectionFromToken(uint256 tokenAmount)\\n        public\\n        view\\n        returns (uint256)\\n    {\\n        require(tokenAmount <= _tokenTotal, \\\"Amount must be less than supply\\\");\\n        return tokenAmount.mul(_getReflectionRate());\\n    }\\n\\n    function tokenFromReflection(uint256 reflectionAmount)\\n        public\\n        view\\n        returns (uint256)\\n    {\\n        require(\\n            reflectionAmount <= _reflectionTotal,\\n            \\\"Amount must be less than total reflections\\\"\\n        );\\n        uint256 currentRate = _getReflectionRate();\\n        return reflectionAmount.div(currentRate);\\n    }\\n\\n    function excludeAccount(address account) public onlyOwner {\\n        require(\\n            account != address(router),\\n            \\\"ERC20: We can not exclude Uniswap router.\\\"\\n        );\\n        require(!_isExcluded[account], \\\"ERC20: Account is already excluded\\\");\\n        if (_reflectionBalance[account] > 0) {\\n            _tokenBalance[account] = tokenFromReflection(\\n                _reflectionBalance[account]\\n            );\\n        }\\n        _isExcluded[account] = true;\\n        _excluded.push(account);\\n    }\\n\\n    function includeAccount(address account) external onlyOwner {\\n        require(_isExcluded[account], \\\"ERC20: Account is already included\\\");\\n        for (uint256 i = 0; i < _excluded.length; i++) {\\n            if (_excluded[i] == account) {\\n                _excluded[i] = _excluded[_excluded.length - 1];\\n                _tokenBalance[account] = 0;\\n                _isExcluded[account] = false;\\n                _excluded.pop();\\n                break;\\n            }\\n        }\\n    }\\n\\n    function _approve(\\n        address owner,\\n        address spender,\\n        uint256 amount\\n    ) private {\\n        require(owner != address(0), \\\"ERC20: approve from the zero address\\\");\\n        require(spender != address(0), \\\"ERC20: approve to the zero address\\\");\\n\\n        _allowances[owner][spender] = amount;\\n        emit Approval(owner, spender, amount);\\n    }\\n\\n    function _transfer(\\n        address sender,\\n        address recipient,\\n        uint256 amount\\n    ) private {\\n        require(sender != address(0), \\\"ERC20: transfer from the zero address\\\");\\n        require(recipient != address(0), \\\"ERC20: transfer to the zero address\\\");\\n        require(amount > 0, \\\"Transfer amount must be greater than zero\\\");\\n\\n        require(\\n            isTaxless[sender] || isTaxless[recipient] || amount <= maxTxAmount,\\n            \\\"Max Transfer Limit Exceeds!\\\"\\n        );\\n\\n        if (isLaunchProtectionMode) {\\n            require(launchProtectionWhitelist[tx.origin] == true, \\\"Not whitelisted\\\");\\n        }\\n\\n        if (swapEnabled && !inSwap && sender != pair) {\\n            swap();\\n        }\\n\\n        uint256 transferAmount = amount;\\n        uint256 rate = _getReflectionRate();\\n\\n        if (\\n            isFeeActive &&\\n            !isTaxless[sender] &&\\n            !isTaxless[recipient] &&\\n            !inSwap\\n        ) {\\n            transferAmount = collectFee(\\n                sender,\\n                amount,\\n                rate,\\n                recipient == pair,\\n                sender != pair && recipient != pair\\n            );\\n        }\\n        //transfer reflection\\n        _reflectionBalance[sender] = _reflectionBalance[sender].sub(\\n            amount.mul(rate)\\n        );\\n        _reflectionBalance[recipient] = _reflectionBalance[recipient].add(\\n            transferAmount.mul(rate)\\n        );\\n\\n        //if any account belongs to the excludedAccount transfer token\\n        if (_isExcluded[sender]) {\\n            _tokenBalance[sender] = _tokenBalance[sender].sub(amount);\\n        }\\n        if (_isExcluded[recipient]) {\\n            _tokenBalance[recipient] = _tokenBalance[recipient].add(\\n                transferAmount\\n            );\\n        }\\n\\n        emit Transfer(sender, recipient, transferAmount);\\n    }\\n\\n    function calculateFee(uint256 feeIndex, uint256 amount)\\n        internal\\n        returns (uint256, uint256)\\n    {\\n        uint256 taxFee = amount.mul(_taxFee[feeIndex]).div(\\n            10**(_feeDecimal + 2)\\n        );\\n        uint256 marketingFee = amount.mul(_marketingFee[feeIndex]).div(\\n            10**(_feeDecimal + 2)\\n        );\\n        uint256 teamFee = amount.mul(_teamFee[feeIndex]).div(\\n            10**(_feeDecimal + 2)\\n        );\\n\\n        _marketingFeeCollected = _marketingFeeCollected.add(marketingFee);\\n        _teamFeeCollected = _teamFeeCollected.add(teamFee);\\n        return (taxFee, marketingFee.add(teamFee));\\n    }\\n\\n    function collectFee(\\n        address account,\\n        uint256 amount,\\n        uint256 rate,\\n        bool sell,\\n        bool p2p\\n    ) private returns (uint256) {\\n        uint256 transferAmount = amount;\\n\\n        (uint256 taxFee, uint256 otherFee) = calculateFee(\\n            p2p ? 2 : sell ? 1 : 0,\\n            amount\\n        );\\n        if (otherFee != 0) {\\n            transferAmount = transferAmount.sub(otherFee);\\n            _reflectionBalance[address(this)] = _reflectionBalance[\\n                address(this)\\n            ].add(otherFee.mul(rate));\\n            if (_isExcluded[address(this)]) {\\n                _tokenBalance[address(this)] = _tokenBalance[address(this)].add(\\n                    otherFee\\n                );\\n            }\\n            emit Transfer(account, address(this), otherFee);\\n        }\\n        if (taxFee != 0) {\\n            _reflectionTotal = _reflectionTotal.sub(taxFee.mul(rate));\\n        }\\n        _feeTotal = _feeTotal.add(taxFee).add(otherFee);\\n        return transferAmount;\\n    }\\n\\n    function swap() private lockTheSwap {\\n        uint256 totalFee = _teamFeeCollected.add(_marketingFeeCollected);\\n\\n        if (minTokensBeforeSwap > totalFee) return;\\n\\n        address[] memory sellPath = new address[](2);\\n        sellPath[0] = address(this);\\n        sellPath[1] = router.WETH();\\n\\n        uint256 balanceBefore = address(this).balance;\\n\\n        _approve(address(this), address(router), totalFee);\\n        router.swapExactTokensForETHSupportingFeeOnTransferTokens(\\n            totalFee,\\n            0,\\n            sellPath,\\n            address(this),\\n            block.timestamp\\n        );\\n\\n        uint256 amountFee = address(this).balance.sub(balanceBefore);\\n\\n        uint256 amountMarketing = amountFee.mul(_marketingFeeCollected).div(\\n            totalFee\\n        );\\n        if (amountMarketing > 0)\\n            payable(marketingWallet).transfer(amountMarketing);\\n\\n        uint256 amountTeam = address(this).balance;\\n        if (amountTeam > 0)\\n            payable(marketingWallet).transfer(address(this).balance);\\n\\n        _marketingFeeCollected = 0;\\n        _teamFeeCollected = 0;\\n\\n        emit Swap(totalFee, amountFee);\\n    }\\n\\n    function _getReflectionRate() private view returns (uint256) {\\n        uint256 reflectionSupply = _reflectionTotal;\\n        uint256 tokenSupply = _tokenTotal;\\n        for (uint256 i = 0; i < _excluded.length; i++) {\\n            if (\\n                _reflectionBalance[_excluded[i]] > reflectionSupply ||\\n                _tokenBalance[_excluded[i]] > tokenSupply\\n            ) return _reflectionTotal.div(_tokenTotal);\\n            reflectionSupply = reflectionSupply.sub(\\n                _reflectionBalance[_excluded[i]]\\n            );\\n            tokenSupply = tokenSupply.sub(_tokenBalance[_excluded[i]]);\\n        }\\n        if (reflectionSupply < _reflectionTotal.div(_tokenTotal))\\n            return _reflectionTotal.div(_tokenTotal);\\n        return reflectionSupply.div(tokenSupply);\\n    }\\n\\n    function setPairRouterRewardToken(address _pair, IUniswapV2Router02 _router)\\n        external\\n        onlyOwner\\n    {\\n        pair = _pair;\\n        router = _router;\\n    }\\n\\n    function setTaxless(address account, bool value) external onlyOwner {\\n        isTaxless[account] = value;\\n    }\\n\\n    function setLaunchWhitelist(address account, bool value) external onlyOwner {\\n        launchProtectionWhitelist[account] = value;\\n    }\\n\\n    function endLaunchProtection() external onlyOwner {\\n        isLaunchProtectionMode = false;\\n    }\\n\\n    function setSwapEnabled(bool enabled) external onlyOwner {\\n        swapEnabled = enabled;\\n        SwapUpdated(enabled);\\n    }\\n\\n    function setFeeActive(bool value) external onlyOwner {\\n        isFeeActive = value;\\n    }\\n\\n    function setTaxFee(\\n        uint256 buy,\\n        uint256 sell,\\n        uint256 p2p\\n    ) external onlyOwner {\\n        _taxFee[0] = buy;\\n        _taxFee[1] = sell;\\n        _taxFee[2] = p2p;\\n    }\\n\\n    function setTeamFee(\\n        uint256 buy,\\n        uint256 sell,\\n        uint256 p2p\\n    ) external onlyOwner {\\n        _teamFee[0] = buy;\\n        _teamFee[1] = sell;\\n        _teamFee[2] = p2p;\\n    }\\n\\n    function setMarketingFee(\\n        uint256 buy,\\n        uint256 sell,\\n        uint256 p2p\\n    ) external onlyOwner {\\n        _marketingFee[0] = buy;\\n        _marketingFee[1] = sell;\\n        _marketingFee[2] = p2p;\\n    }\\n\\n    function setMarketingWallet(address wallet) external onlyOwner {\\n        marketingWallet = wallet;\\n    }\\n\\n    function setTeamWallet(address wallet) external onlyOwner {\\n        teamWallet = wallet;\\n    }\\n\\n    function setMaxTxAmount(uint256 percentage) external onlyOwner {\\n        maxTxAmount = _tokenTotal.mul(percentage).div(10000);\\n    }\\n\\n    function setMinTokensBeforeSwap(uint256 amount) external onlyOwner {\\n        minTokensBeforeSwap = amount;\\n    }\\n\\n    receive() external payable {}\\n}\\n\"\r\n    },\r\n    \"contracts/external/Context.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\npragma solidity ^0.6.0;\\n\\n/*\\n * @dev Provides information about the current execution context, including the\\n * sender of the transaction and its data. While these are generally available\\n * via msg.sender and msg.data, they should not be accessed in such a direct\\n * manner, since when dealing with GSN meta-transactions the account sending and\\n * paying for execution may not be the actual sender (as far as an application\\n * is concerned).\\n *\\n * This contract is only required for intermediate, library-like contracts.\\n */\\nabstract contract Context {\\n    function _msgSender() internal view virtual returns (address payable) {\\n        return msg.sender;\\n    }\\n\\n    function _msgData() internal view virtual returns (bytes memory) {\\n        this; // silence state mutability warning without generating bytecode - see https://github.com/ethereum/solidity/issues/2691\\n        return msg.data;\\n    }\\n}\\n\"\r\n    }\r\n  },\r\n  \"settings\": {\r\n    \"optimizer\": {\r\n      \"enabled\": true,\r\n      \"runs\": 200\r\n    },\r\n    \"outputSelection\": {\r\n      \"*\": {\r\n        \"*\": [\r\n          \"evm.bytecode\",\r\n          \"evm.deployedBytecode\",\r\n          \"devdoc\",\r\n          \"userdoc\",\r\n          \"metadata\",\r\n          \"abi\"\r\n        ]\r\n      }\r\n    },\r\n    \"libraries\": {}\r\n  }\r\n}}","ABI":"[{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_owner\",\"type\":\"address\"},{\"internalType\":\"contract IERC20\",\"name\":\"token\",\"type\":\"address\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"pid\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"currentRewardBalance\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"accTokenPerShare\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"tokenPerBlock\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"lastRewardBlock\",\"type\":\"uint256\"}],\"name\":\"AdminEmergencyWithdraw\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"pid\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"Deposit\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"pid\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"bool\",\"name\":\"depositLocked\",\"type\":\"bool\"}],\"name\":\"DepositLocked\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"pid\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"EmergencyWithdraw\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"bool\",\"name\":\"paused\",\"type\":\"bool\"}],\"name\":\"PoolPausedUpdated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"tokenPerBlock\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"depositFee\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"minDeposit\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"harvestInterval\",\"type\":\"uint256\"}],\"name\":\"PoolUpdated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"pid\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amountLockedUp\",\"type\":\"uint256\"}],\"name\":\"RewardLockedUp\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"depositer\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"pid\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"RewardTokenDeposited\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"pid\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"Withdraw\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"BONUS_MULTIPLIER\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"MAXIMUM_HARVEST_INTERVAL\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_tokenPerBlock\",\"type\":\"uint256\"},{\"internalType\":\"contract IERC20\",\"name\":\"_stakedToken\",\"type\":\"address\"},{\"internalType\":\"contract IERC20\",\"name\":\"_rewardToken\",\"type\":\"address\"},{\"internalType\":\"uint16\",\"name\":\"_depositFeeBP\",\"type\":\"uint16\"},{\"internalType\":\"uint256\",\"name\":\"_minDeposit\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_harvestInterval\",\"type\":\"uint256\"},{\"components\":[{\"internalType\":\"uint256\",\"name\":\"day\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"fee\",\"type\":\"uint256\"}],\"internalType\":\"struct XAEA12Staking.WithdrawFeeInterval[]\",\"name\":\"withdrawFeeIntervals\",\"type\":\"tuple[]\"}],\"name\":\"add\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_pid\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"_user\",\"type\":\"address\"}],\"name\":\"canHarvest\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_pid\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"deposit\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"poolId\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"depositRewardToken\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_pid\",\"type\":\"uint256\"}],\"name\":\"emergencyAdminWithdraw\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_pid\",\"type\":\"uint256\"}],\"name\":\"emergencyWithdraw\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_from\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_to\",\"type\":\"uint256\"}],\"name\":\"getMultiplier\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"poolId\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"stakedTime\",\"type\":\"uint256\"}],\"name\":\"getWithdrawFee\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"poolId\",\"type\":\"uint256\"}],\"name\":\"getWithdrawFeeIntervals\",\"outputs\":[{\"components\":[{\"internalType\":\"uint256\",\"name\":\"day\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"fee\",\"type\":\"uint256\"}],\"internalType\":\"struct XAEA12Staking.WithdrawFeeInterval[]\",\"name\":\"\",\"type\":\"tuple[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"initialize\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"initialized\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"paused\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_pid\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"_user\",\"type\":\"address\"}],\"name\":\"pendingToken\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"poolInfo\",\"outputs\":[{\"internalType\":\"contract IERC20\",\"name\":\"stakedToken\",\"type\":\"address\"},{\"internalType\":\"contract IERC20\",\"name\":\"rewardToken\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"stakedAmount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"rewardSupply\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"tokenPerBlock\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"lastRewardBlock\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"accTokenPerShare\",\"type\":\"uint256\"},{\"internalType\":\"uint16\",\"name\":\"depositFeeBP\",\"type\":\"uint16\"},{\"internalType\":\"uint256\",\"name\":\"minDeposit\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"harvestInterval\",\"type\":\"uint256\"},{\"internalType\":\"bool\",\"name\":\"lockDeposit\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"poolLength\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"rewardDistributions\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"rewardReserve\",\"outputs\":[{\"internalType\":\"contract Reserve\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_pid\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_tokenPerBlock\",\"type\":\"uint256\"},{\"internalType\":\"uint16\",\"name\":\"_depositFeeBP\",\"type\":\"uint16\"},{\"internalType\":\"uint256\",\"name\":\"_minDeposit\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_harvestInterval\",\"type\":\"uint256\"}],\"name\":\"set\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"pid\",\"type\":\"uint256\"},{\"internalType\":\"bool\",\"name\":\"locked\",\"type\":\"bool\"}],\"name\":\"setLockDeposit\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"startBlock\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bool\",\"name\":\"_value\",\"type\":\"bool\"}],\"name\":\"updatePaused\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_pid\",\"type\":\"uint256\"}],\"name\":\"updatePool\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"userInfo\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"rewardDebt\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"rewardLockedUp\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"nextHarvestUntil\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"depositTimestamp\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_pid\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"withdraw\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"withdrawFee\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"day\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"fee\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"}]","ContractName":"XAEA12Staking","CompilerVersion":"v0.6.12+commit.27d51765","OptimizationUsed":"1","Runs":"200","ConstructorArguments":"000000000000000000000000a3aa54edab0f795ba3c4e960b08641dd95057f870000000000000000000000001902882a8f6c7fb1402f83c434ea8e064b35bab3","EVMVersion":"Default","Library":"","LicenseType":"","Proxy":"0","Implementation":"","SwarmSource":""}]}