{"status":"1","message":"OK","result":[{"SourceCode":"{\"AccessControl.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.0 (access/AccessControl.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"./IAccessControl.sol\\\";\\nimport \\\"./Context.sol\\\";\\nimport \\\"./Strings.sol\\\";\\nimport \\\"./ERC165.sol\\\";\\n\\n/**\\n * @dev Contract module that allows children to implement role-based access\\n * control mechanisms. This is a lightweight version that doesn\\u0027t allow enumerating role\\n * members except through off-chain means by accessing the contract event logs. Some\\n * applications may benefit from on-chain enumerability, for those cases see\\n * {AccessControlEnumerable}.\\n *\\n * Roles are referred to by their `bytes32` identifier. These should be exposed\\n * in the external API and be unique. The best way to achieve this is by\\n * using `public constant` hash digests:\\n *\\n * ```\\n * bytes32 public constant MY_ROLE = keccak256(\\\"MY_ROLE\\\");\\n * ```\\n *\\n * Roles can be used to represent a set of permissions. To restrict access to a\\n * function call, use {hasRole}:\\n *\\n * ```\\n * function foo() public {\\n *     require(hasRole(MY_ROLE, msg.sender));\\n *     ...\\n * }\\n * ```\\n *\\n * Roles can be granted and revoked dynamically via the {grantRole} and\\n * {revokeRole} functions. Each role has an associated admin role, and only\\n * accounts that have a role\\u0027s admin role can call {grantRole} and {revokeRole}.\\n *\\n * By default, the admin role for all roles is `DEFAULT_ADMIN_ROLE`, which means\\n * that only accounts with this role will be able to grant or revoke other\\n * roles. More complex role relationships can be created by using\\n * {_setRoleAdmin}.\\n *\\n * WARNING: The `DEFAULT_ADMIN_ROLE` is also its own admin: it has permission to\\n * grant and revoke this role. Extra precautions should be taken to secure\\n * accounts that have been granted it.\\n */\\nabstract contract AccessControl is Context, IAccessControl, ERC165 {\\n    struct RoleData {\\n        mapping(address =\\u003e bool) members;\\n        bytes32 adminRole;\\n    }\\n\\n    mapping(bytes32 =\\u003e RoleData) private _roles;\\n\\n    bytes32 public constant DEFAULT_ADMIN_ROLE = 0x00;\\n\\n    /**\\n     * @dev Modifier that checks that an account has a specific role. Reverts\\n     * with a standardized message including the required role.\\n     *\\n     * The format of the revert reason is given by the following regular expression:\\n     *\\n     *  /^AccessControl: account (0x[0-9a-f]{40}) is missing role (0x[0-9a-f]{64})$/\\n     *\\n     * _Available since v4.1._\\n     */\\n    modifier onlyRole(bytes32 role) {\\n        _checkRole(role, _msgSender());\\n        _;\\n    }\\n\\n    /**\\n     * @dev See {IERC165-supportsInterface}.\\n     */\\n    function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {\\n        return interfaceId == type(IAccessControl).interfaceId || super.supportsInterface(interfaceId);\\n    }\\n\\n    /**\\n     * @dev Returns `true` if `account` has been granted `role`.\\n     */\\n    function hasRole(bytes32 role, address account) public view override returns (bool) {\\n        return _roles[role].members[account];\\n    }\\n\\n    /**\\n     * @dev Revert with a standard message if `account` is missing `role`.\\n     *\\n     * The format of the revert reason is given by the following regular expression:\\n     *\\n     *  /^AccessControl: account (0x[0-9a-f]{40}) is missing role (0x[0-9a-f]{64})$/\\n     */\\n    function _checkRole(bytes32 role, address account) internal view {\\n        if (!hasRole(role, account)) {\\n            revert(\\n                string(\\n                    abi.encodePacked(\\n                        \\\"AccessControl: account \\\",\\n                        Strings.toHexString(uint160(account), 20),\\n                        \\\" is missing role \\\",\\n                        Strings.toHexString(uint256(role), 32)\\n                    )\\n                )\\n            );\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the admin role that controls `role`. See {grantRole} and\\n     * {revokeRole}.\\n     *\\n     * To change a role\\u0027s admin, use {_setRoleAdmin}.\\n     */\\n    function getRoleAdmin(bytes32 role) public view override returns (bytes32) {\\n        return _roles[role].adminRole;\\n    }\\n\\n    /**\\n     * @dev Grants `role` to `account`.\\n     *\\n     * If `account` had not been already granted `role`, emits a {RoleGranted}\\n     * event.\\n     *\\n     * Requirements:\\n     *\\n     * - the caller must have ``role``\\u0027s admin role.\\n     */\\n    function grantRole(bytes32 role, address account) public virtual override onlyRole(getRoleAdmin(role)) {\\n        _grantRole(role, account);\\n    }\\n\\n    /**\\n     * @dev Revokes `role` from `account`.\\n     *\\n     * If `account` had been granted `role`, emits a {RoleRevoked} event.\\n     *\\n     * Requirements:\\n     *\\n     * - the caller must have ``role``\\u0027s admin role.\\n     */\\n    function revokeRole(bytes32 role, address account) public virtual override onlyRole(getRoleAdmin(role)) {\\n        _revokeRole(role, account);\\n    }\\n\\n    /**\\n     * @dev Revokes `role` from the calling account.\\n     *\\n     * Roles are often managed via {grantRole} and {revokeRole}: this function\\u0027s\\n     * purpose is to provide a mechanism for accounts to lose their privileges\\n     * if they are compromised (such as when a trusted device is misplaced).\\n     *\\n     * If the calling account had been revoked `role`, emits a {RoleRevoked}\\n     * event.\\n     *\\n     * Requirements:\\n     *\\n     * - the caller must be `account`.\\n     */\\n    function renounceRole(bytes32 role, address account) public virtual override {\\n        require(account == _msgSender(), \\\"AccessControl: can only renounce roles for self\\\");\\n\\n        _revokeRole(role, account);\\n    }\\n\\n    /**\\n     * @dev Grants `role` to `account`.\\n     *\\n     * If `account` had not been already granted `role`, emits a {RoleGranted}\\n     * event. Note that unlike {grantRole}, this function doesn\\u0027t perform any\\n     * checks on the calling account.\\n     *\\n     * [WARNING]\\n     * ====\\n     * This function should only be called from the constructor when setting\\n     * up the initial roles for the system.\\n     *\\n     * Using this function in any other way is effectively circumventing the admin\\n     * system imposed by {AccessControl}.\\n     * ====\\n     *\\n     * NOTE: This function is deprecated in favor of {_grantRole}.\\n     */\\n    function _setupRole(bytes32 role, address account) internal virtual {\\n        _grantRole(role, account);\\n    }\\n\\n    /**\\n     * @dev Sets `adminRole` as ``role``\\u0027s admin role.\\n     *\\n     * Emits a {RoleAdminChanged} event.\\n     */\\n    function _setRoleAdmin(bytes32 role, bytes32 adminRole) internal virtual {\\n        bytes32 previousAdminRole = getRoleAdmin(role);\\n        _roles[role].adminRole = adminRole;\\n        emit RoleAdminChanged(role, previousAdminRole, adminRole);\\n    }\\n\\n    /**\\n     * @dev Grants `role` to `account`.\\n     *\\n     * Internal function without access restriction.\\n     */\\n    function _grantRole(bytes32 role, address account) internal virtual {\\n        if (!hasRole(role, account)) {\\n            _roles[role].members[account] = true;\\n            emit RoleGranted(role, account, _msgSender());\\n        }\\n    }\\n\\n    /**\\n     * @dev Revokes `role` from `account`.\\n     *\\n     * Internal function without access restriction.\\n     */\\n    function _revokeRole(bytes32 role, address account) internal virtual {\\n        if (hasRole(role, account)) {\\n            _roles[role].members[account] = false;\\n            emit RoleRevoked(role, account, _msgSender());\\n        }\\n    }\\n}\\n\"},\"Address.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.0 (utils/Address.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Collection of functions related to the address type\\n */\\nlibrary Address {\\n    /**\\n     * @dev Returns true if `account` is a contract.\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * It is unsafe to assume that an address for which this function returns\\n     * false is an externally-owned account (EOA) and not a contract.\\n     *\\n     * Among others, `isContract` will return false for the following\\n     * types of addresses:\\n     *\\n     *  - an externally-owned account\\n     *  - a contract in construction\\n     *  - an address where a contract will be created\\n     *  - an address where a contract lived, but was destroyed\\n     * ====\\n     */\\n    function isContract(address account) internal view returns (bool) {\\n        // This method relies on extcodesize, which returns 0 for contracts in\\n        // construction, since the code is only stored at the end of the\\n        // constructor execution.\\n\\n        uint256 size;\\n        assembly {\\n            size := extcodesize(account)\\n        }\\n        return size \\u003e 0;\\n    }\\n\\n    /**\\n     * @dev Replacement for Solidity\\u0027s `transfer`: sends `amount` wei to\\n     * `recipient`, forwarding all available gas and reverting on errors.\\n     *\\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\\n     * imposed by `transfer`, making them unable to receive funds via\\n     * `transfer`. {sendValue} removes this limitation.\\n     *\\n     * https://diligence.consensys.net/posts/2019/09/stop-using-soliditys-transfer-now/[Learn more].\\n     *\\n     * IMPORTANT: because control is transferred to `recipient`, care must be\\n     * taken to not create reentrancy vulnerabilities. Consider using\\n     * {ReentrancyGuard} or the\\n     * https://solidity.readthedocs.io/en/v0.5.11/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\\n     */\\n    function sendValue(address payable recipient, uint256 amount) internal {\\n        require(address(this).balance \\u003e= amount, \\\"Address: insufficient balance\\\");\\n\\n        (bool success, ) = recipient.call{value: amount}(\\\"\\\");\\n        require(success, \\\"Address: unable to send value, recipient may have reverted\\\");\\n    }\\n\\n    /**\\n     * @dev Performs a Solidity function call using a low level `call`. A\\n     * plain `call` is an unsafe replacement for a function call: use this\\n     * function instead.\\n     *\\n     * If `target` reverts with a revert reason, it is bubbled up by this\\n     * function (like regular Solidity function calls).\\n     *\\n     * Returns the raw returned data. To convert to the expected return value,\\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\\n     *\\n     * Requirements:\\n     *\\n     * - `target` must be a contract.\\n     * - calling `target` with `data` must not revert.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionCall(target, data, \\\"Address: low-level call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\\n     * `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, 0, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but also transferring `value` wei to `target`.\\n     *\\n     * Requirements:\\n     *\\n     * - the calling contract must have an ETH balance of at least `value`.\\n     * - the called Solidity function must be `payable`.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, value, \\\"Address: low-level call with value failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\\n     * with `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        require(address(this).balance \\u003e= value, \\\"Address: insufficient balance for call\\\");\\n        require(isContract(target), \\\"Address: call to non-contract\\\");\\n\\n        (bool success, bytes memory returndata) = target.call{value: value}(data);\\n        return verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\\n        return functionStaticCall(target, data, \\\"Address: low-level static call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal view returns (bytes memory) {\\n        require(isContract(target), \\\"Address: static call to non-contract\\\");\\n\\n        (bool success, bytes memory returndata) = target.staticcall(data);\\n        return verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionDelegateCall(target, data, \\\"Address: low-level delegate call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        require(isContract(target), \\\"Address: delegate call to non-contract\\\");\\n\\n        (bool success, bytes memory returndata) = target.delegatecall(data);\\n        return verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Tool to verifies that a low level call was successful, and revert if it wasn\\u0027t, either by bubbling the\\n     * revert reason using the provided one.\\n     *\\n     * _Available since v4.3._\\n     */\\n    function verifyCallResult(\\n        bool success,\\n        bytes memory returndata,\\n        string memory errorMessage\\n    ) internal pure returns (bytes memory) {\\n        if (success) {\\n            return returndata;\\n        } else {\\n            // Look for revert reason and bubble it up if present\\n            if (returndata.length \\u003e 0) {\\n                // The easiest way to bubble the revert reason is using memory via assembly\\n\\n                assembly {\\n                    let returndata_size := mload(returndata)\\n                    revert(add(32, returndata), returndata_size)\\n                }\\n            } else {\\n                revert(errorMessage);\\n            }\\n        }\\n    }\\n}\\n\"},\"BuybackTreasury.sol\":{\"content\":\"pragma solidity 0.8.10;\\r\\n\\r\\n// SPDX-License-Identifier: MIT\\r\\n\\r\\nimport \\\"./AccessControl.sol\\\";\\nimport \\\"./IERC20.sol\\\";\\nimport \\\"./IDEXRouter.sol\\\";\\n\\r\\ncontract BuybackTreasury is AccessControl {\\r\\n\\tuint256 constant MAX_UINT = 2 ^ 256 - 1;\\r\\n\\taddress constant DEAD_ADDRESS = address(57005);\\r\\n\\tIERC20 constant USDT = IERC20(0xdAC17F958D2ee523a2206206994597C13D831ec7);\\r\\n\\r\\n\\tIDEXRouter router;\\r\\n\\tIERC20 token;\\r\\n\\r\\n\\tuint256 public totalEthDeposited;\\r\\n\\tuint256 public totalEthBoughtBack;\\r\\n\\tuint256 public totalValueBoughtBack;\\r\\n\\r\\n\\tevent Deposit(uint256 amount);\\r\\n\\tevent Buyback(uint256 amount, uint256 value);\\r\\n\\r\\n\\tconstructor(address routerAddress, address tokenAddress, address ownerAddress) {\\r\\n\\t\\trouter = IDEXRouter(routerAddress);\\r\\n\\t\\ttoken = IERC20(tokenAddress);\\r\\n\\r\\n\\t\\t_grantRole(DEFAULT_ADMIN_ROLE, address(token));\\r\\n\\t\\t_grantRole(DEFAULT_ADMIN_ROLE, ownerAddress);\\r\\n\\t}\\r\\n\\r\\n\\tfunction _getValueOfEthAmount(uint256 amount) private view returns (uint256) {\\r\\n\\t\\taddress[] memory path = new address[](2);\\r\\n\\t\\tpath[0] = router.WETH();\\r\\n\\t\\tpath[1] = address(USDT);\\r\\n\\r\\n\\t\\treturn router.getAmountsOut(amount, path)[1];\\r\\n\\t}\\r\\n\\r\\n\\tfunction _approveRouter(uint256 amount) private {\\r\\n\\t\\trequire(token.approve(address(router), amount), \\\"Router approval failed\\\");\\r\\n\\t}\\r\\n\\r\\n\\tfunction _buy(uint256 amountIn) private returns (uint256) {\\r\\n\\t\\taddress[] memory path = new address[](2);\\r\\n\\t\\tpath[0] = router.WETH();\\r\\n\\t\\tpath[1] = address(token);\\r\\n\\r\\n\\t\\tuint256 previousBalance = token.balanceOf(address(this));\\r\\n\\r\\n\\t\\t_approveRouter(amountIn);\\r\\n\\t\\trouter.swapExactETHForTokensSupportingFeeOnTransferTokens{value : amountIn}(0, path, address(this), block.timestamp);\\r\\n\\r\\n\\t\\treturn token.balanceOf(address(this)) - previousBalance;\\r\\n\\t}\\r\\n\\r\\n\\tfunction _addLiquidity(uint256 amountIn) private {\\r\\n\\t\\tuint256 ethForLiquidity = amountIn / 2;\\r\\n\\t\\tuint256 tokensForLiquidity = _buy(amountIn - ethForLiquidity);\\r\\n\\r\\n\\t\\t_approveRouter(tokensForLiquidity);\\r\\n\\t\\trouter.addLiquidityETH{value : ethForLiquidity}(address(token), tokensForLiquidity, 0, 0, DEAD_ADDRESS, block.timestamp);\\r\\n\\t}\\r\\n\\r\\n\\tfunction buyback(uint256 amountIn) external onlyRole(DEFAULT_ADMIN_ROLE) {\\r\\n\\t\\trequire(amountIn \\u003e 0, \\\"Insufficient value sent\\\");\\r\\n\\t\\trequire(address(this).balance \\u003e= amountIn, \\\"Insufficient balance\\\");\\r\\n\\r\\n\\t\\tuint256 value = _getValueOfEthAmount(amountIn);\\r\\n\\r\\n\\t\\t_addLiquidity(amountIn);\\r\\n\\r\\n\\t\\ttotalEthBoughtBack += amountIn;\\r\\n\\t\\ttotalValueBoughtBack += value;\\r\\n\\r\\n\\t\\temit Buyback(amountIn, value);\\r\\n\\t}\\r\\n\\r\\n\\tfunction deposit() external payable onlyRole(DEFAULT_ADMIN_ROLE) {\\r\\n\\t\\ttotalEthDeposited += msg.value;\\r\\n\\t\\temit Deposit(msg.value);\\r\\n\\t}\\r\\n\\r\\n\\tfunction setToken(address value) external onlyRole(DEFAULT_ADMIN_ROLE) {\\r\\n\\t\\ttoken = IERC20(value);\\r\\n\\t\\t_grantRole(DEFAULT_ADMIN_ROLE, address(token));\\r\\n\\t}\\r\\n\\r\\n\\treceive() external payable {}\\r\\n}\"},\"Context.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.0 (utils/Context.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Provides information about the current execution context, including the\\n * sender of the transaction and its data. While these are generally available\\n * via msg.sender and msg.data, they should not be accessed in such a direct\\n * manner, since when dealing with meta-transactions the account sending and\\n * paying for execution may not be the actual sender (as far as an application\\n * is concerned).\\n *\\n * This contract is only required for intermediate, library-like contracts.\\n */\\nabstract contract Context {\\n    function _msgSender() internal view virtual returns (address) {\\n        return msg.sender;\\n    }\\n\\n    function _msgData() internal view virtual returns (bytes calldata) {\\n        return msg.data;\\n    }\\n}\\n\"},\"ERC165.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.0 (utils/introspection/ERC165.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"./IERC165.sol\\\";\\n\\n/**\\n * @dev Implementation of the {IERC165} interface.\\n *\\n * Contracts that want to implement ERC165 should inherit from this contract and override {supportsInterface} to check\\n * for the additional interface id that will be supported. For example:\\n *\\n * ```solidity\\n * function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {\\n *     return interfaceId == type(MyInterface).interfaceId || super.supportsInterface(interfaceId);\\n * }\\n * ```\\n *\\n * Alternatively, {ERC165Storage} provides an easier to use but more expensive implementation.\\n */\\nabstract contract ERC165 is IERC165 {\\n    /**\\n     * @dev See {IERC165-supportsInterface}.\\n     */\\n    function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {\\n        return interfaceId == type(IERC165).interfaceId;\\n    }\\n}\\n\"},\"HangryBirds.sol\":{\"content\":\"pragma solidity 0.8.10;\\r\\n\\r\\n// SPDX-License-Identifier: MIT\\r\\n\\r\\nimport \\\"./IERC20.sol\\\";\\nimport \\\"./Ownable.sol\\\";\\nimport \\\"./Address.sol\\\";\\nimport \\\"./Context.sol\\\";\\nimport \\\"./IDEXRouter.sol\\\";\\nimport \\\"./IDEXFactory.sol\\\";\\nimport \\\"./BuybackTreasury.sol\\\";\\nimport \\\"./IUnicryptLiquidityLocker.sol\\\";\\nimport \\\"./IAntiSnipe.sol\\\";\\n\\r\\ncontract HangryBirds is Context, IERC20, Ownable {\\r\\n\\tusing Address for address payable;\\r\\n\\r\\n\\tstring constant NAME = \\\"HangryBirds\\\";\\r\\n\\tstring constant SYMBOL = \\\"HANGRY\\\";\\r\\n\\tuint8 constant DECIMALS = 9;\\r\\n\\r\\n\\tuint256 constant MAX_UINT = 2 ** 256 - 1;\\r\\n\\taddress constant ROUTER_ADDRESS = 0x7a250d5630B4cF539739dF2C5dAcb4c659F2488D;\\r\\n\\taddress constant UNICRYPT_LIQUIDITY_LOCKER_ADDRESS = 0x663A5C229c09b049E36dCc11a9B0d4a8Eb9db214;\\r\\n\\taddress constant ZERO_ADDRESS = address(0);\\r\\n\\taddress constant DEAD_ADDRESS = address(57005);\\r\\n\\r\\n\\tmapping(address =\\u003e uint256) rOwned;\\r\\n\\tmapping(address =\\u003e uint256) tOwned;\\r\\n\\r\\n\\tmapping(address =\\u003e mapping(address =\\u003e uint256)) allowances;\\r\\n\\r\\n\\tmapping(address =\\u003e bool) public isExcludedFromFees;\\r\\n\\tmapping(address =\\u003e bool) public isExcludedFromRewards;\\r\\n\\tmapping(address =\\u003e bool) public isExcludedFromMaxWallet;\\r\\n\\taddress[] excluded;\\r\\n\\r\\n\\tuint256 tTotal = 10 ** 12 * 10 ** DECIMALS;\\r\\n\\tuint256 rTotal = (MAX_UINT - (MAX_UINT % tTotal));\\r\\n\\r\\n\\tuint256 public maxWalletAmount = tTotal / 100;\\r\\n\\tuint256 public maxTxAmountBuy = maxWalletAmount / 2;\\r\\n\\tuint256 public maxTxAmountSell = maxWalletAmount / 2;\\r\\n\\r\\n\\taddress payable marketingWalletAddress;\\r\\n\\r\\n\\tmapping(address =\\u003e bool) automatedMarketMakerPairs;\\r\\n\\r\\n\\tbool areFeesBeingProcessed = false;\\r\\n\\tbool public isFeeProcessingEnabled = true;\\r\\n\\tuint256 public feeProcessingThreshold = tTotal / 500;\\r\\n\\r\\n\\tIDEXRouter router;\\r\\n\\tBuybackTreasury public treasury;\\r\\n\\tIAntiSnipe antiSnipe;\\r\\n\\r\\n\\tmapping(address =\\u003e bool) snipers;\\r\\n\\r\\n\\tbool hasLaunched;\\r\\n\\tuint256 launchedAt;\\r\\n\\r\\n\\tFeeSet public buyFees = FeeSet({\\r\\n\\t\\treflectFee: 5,\\r\\n\\t\\tmarketingFee: 5,\\r\\n\\t\\ttreasuryFee: 2\\r\\n\\t});\\r\\n\\r\\n\\tFeeSet public sellFees = FeeSet({\\r\\n\\t\\treflectFee: 8,\\r\\n\\t\\tmarketingFee: 2,\\r\\n\\t\\ttreasuryFee: 5\\r\\n\\t});\\r\\n\\r\\n\\tstruct FeeSet {\\r\\n\\t\\tuint256 reflectFee;\\r\\n\\t\\tuint256 marketingFee;\\r\\n\\t\\tuint256 treasuryFee;\\r\\n\\t}\\r\\n\\r\\n\\tstruct ReflectValueSet {\\r\\n\\t\\tuint256 rAmount;\\r\\n\\t\\tuint256 rTransferAmount;\\r\\n\\t\\tuint256 rReflectFee;\\r\\n\\t\\tuint256 rOtherFee;\\r\\n\\t\\tuint256 tTransferAmount;\\r\\n\\t\\tuint256 tReflectFee;\\r\\n\\t\\tuint256 tOtherFee;\\r\\n\\t}\\r\\n\\r\\n\\tevent FeesProcessed(uint256 amount);\\r\\n\\tevent Launched();\\r\\n\\tevent SniperAdded(address sniper);\\r\\n\\tevent SniperPunished(address sniper);\\r\\n\\tevent SniperRemoved(address sniper);\\r\\n\\r\\n\\tconstructor() {\\r\\n\\t\\taddress self = address(this);\\r\\n\\r\\n\\t\\trOwned[owner()] = rTotal;\\r\\n\\r\\n\\t\\trouter = IDEXRouter(ROUTER_ADDRESS);\\r\\n\\t\\ttreasury = new BuybackTreasury(address(router), self, owner());\\r\\n\\r\\n\\t\\tmarketingWalletAddress = payable(msg.sender);\\r\\n\\r\\n\\t\\tisExcludedFromFees[owner()] = true;\\r\\n\\t\\tisExcludedFromFees[marketingWalletAddress] = true;\\r\\n\\t\\tisExcludedFromFees[address(treasury)] = true;\\r\\n\\t\\tisExcludedFromFees[self] = true;\\r\\n\\t\\tisExcludedFromFees[DEAD_ADDRESS] = true;\\r\\n\\r\\n\\t\\tisExcludedFromMaxWallet[owner()] = true;\\r\\n\\t\\tisExcludedFromMaxWallet[marketingWalletAddress] = true;\\r\\n\\t\\tisExcludedFromMaxWallet[address(treasury)] = true;\\r\\n\\t\\tisExcludedFromMaxWallet[self] = true;\\r\\n\\t\\tisExcludedFromMaxWallet[DEAD_ADDRESS] = true;\\r\\n\\r\\n\\t\\temit Transfer(ZERO_ADDRESS, owner(), tTotal);\\r\\n\\t}\\r\\n\\r\\n\\tfunction name() public pure returns (string memory) {\\r\\n\\t\\treturn NAME;\\r\\n\\t}\\r\\n\\r\\n\\tfunction symbol() public pure returns (string memory) {\\r\\n\\t\\treturn SYMBOL;\\r\\n\\t}\\r\\n\\r\\n\\tfunction decimals() public pure returns (uint8) {\\r\\n\\t\\treturn DECIMALS;\\r\\n\\t}\\r\\n\\r\\n\\tfunction totalSupply() public view override returns (uint256) {\\r\\n\\t\\treturn tTotal;\\r\\n\\t}\\r\\n\\r\\n\\tfunction balanceOf(address account) public view override returns (uint256) {\\r\\n\\t\\tif (isExcludedFromRewards[account]) return tOwned[account];\\r\\n\\t\\treturn tokenFromReflection(rOwned[account]);\\r\\n\\t}\\r\\n\\r\\n\\tfunction transfer(address recipient, uint256 amount) public override returns (bool) {\\r\\n\\t\\t_transfer(_msgSender(), recipient, amount);\\r\\n\\t\\treturn true;\\r\\n\\t}\\r\\n\\r\\n\\tfunction allowance(address owner, address spender) public view override returns (uint256) {\\r\\n\\t\\treturn allowances[owner][spender];\\r\\n\\t}\\r\\n\\r\\n\\tfunction approve(address spender, uint256 amount) public override returns (bool) {\\r\\n\\t\\t_approve(_msgSender(), spender, amount);\\r\\n\\t\\treturn true;\\r\\n\\t}\\r\\n\\r\\n\\tfunction transferFrom(address sender, address recipient, uint256 amount) public override returns (bool) {\\r\\n\\t\\t_transfer(sender, recipient, amount);\\r\\n\\r\\n\\t\\tuint256 currentAllowance = allowances[sender][_msgSender()];\\r\\n\\t\\trequire(currentAllowance \\u003e= amount, \\\"ERC20: transfer amount exceeds allowance\\\");\\r\\n\\r\\n\\t\\tunchecked {\\r\\n\\t\\t\\t_approve(sender, _msgSender(), currentAllowance - amount);\\r\\n\\t\\t}\\r\\n\\r\\n\\t\\treturn true;\\r\\n\\t}\\r\\n\\r\\n\\tfunction increaseAllowance(address spender, uint256 addedValue) public virtual returns (bool) {\\r\\n\\t\\t_approve(_msgSender(), spender, allowances[_msgSender()][spender] + addedValue);\\r\\n\\t\\treturn true;\\r\\n\\t}\\r\\n\\r\\n\\tfunction decreaseAllowance(address spender, uint256 subtractedValue) public virtual returns (bool) {\\r\\n\\t\\tuint256 currentAllowance = allowances[_msgSender()][spender];\\r\\n\\t\\trequire(currentAllowance \\u003e= subtractedValue, \\\"ERC20: decreased allowance below zero\\\");\\r\\n\\r\\n\\t\\tunchecked {\\r\\n\\t\\t\\t_approve(_msgSender(), spender, currentAllowance - subtractedValue);\\r\\n\\t\\t}\\r\\n\\r\\n\\t\\treturn true;\\r\\n\\t}\\r\\n\\r\\n\\tfunction tokenFromReflection(uint256 rAmount) public view returns (uint256) {\\r\\n\\t\\trequire(rAmount \\u003c= rTotal, \\\"Amount must be less than total reflections\\\");\\r\\n\\t\\tuint256 currentRate = _getRate();\\r\\n\\t\\treturn rAmount / currentRate;\\r\\n\\t}\\r\\n\\r\\n\\tfunction _getValues(uint256 tAmount, bool isBuying, bool takeFee) private view returns (ReflectValueSet memory set) {\\r\\n\\t\\tset = _getTValues(tAmount, isBuying, takeFee);\\r\\n\\t\\t(set.rAmount, set.rTransferAmount, set.rReflectFee, set.rOtherFee) = _getRValues(set, tAmount, takeFee, _getRate());\\r\\n\\t\\treturn set;\\r\\n\\t}\\r\\n\\r\\n\\tfunction _getTValues(uint256 tAmount, bool isBuying, bool takeFee) private view returns (ReflectValueSet memory set) {\\r\\n\\t\\tif (!takeFee) {\\r\\n\\t\\t\\tset.tTransferAmount = tAmount;\\r\\n\\t\\t\\treturn set;\\r\\n\\t\\t}\\r\\n\\r\\n\\t\\tFeeSet memory fees = isBuying ? buyFees : sellFees;\\r\\n\\r\\n\\t\\tset.tReflectFee = tAmount * fees.reflectFee / 100;\\r\\n\\t\\tset.tOtherFee = tAmount * (fees.marketingFee + fees.treasuryFee) / 100;\\r\\n\\t\\tset.tTransferAmount = tAmount - set.tReflectFee - set.tOtherFee;\\r\\n\\r\\n\\t\\treturn set;\\r\\n\\t}\\r\\n\\r\\n\\tfunction _getRValues(ReflectValueSet memory set, uint256 tAmount, bool takeFee, uint256 currentRate) private pure returns (uint256 rAmount, uint256 rTransferAmount, uint256 rReflectFee, uint256 rOtherFee) {\\r\\n\\t\\trAmount = tAmount * currentRate;\\r\\n\\r\\n\\t\\tif (!takeFee) {\\r\\n\\t\\t\\treturn (rAmount, rAmount, 0, 0);\\r\\n\\t\\t}\\r\\n\\r\\n\\t\\trReflectFee = set.tReflectFee * currentRate;\\r\\n\\t\\trOtherFee = set.tOtherFee * currentRate;\\r\\n\\t\\trTransferAmount = rAmount - rReflectFee - rOtherFee;\\r\\n\\t\\treturn (rAmount, rTransferAmount, rReflectFee, rOtherFee);\\r\\n\\t}\\r\\n\\r\\n\\tfunction _getRate() private view returns (uint256) {\\r\\n\\t\\t(uint256 rSupply, uint256 tSupply) = _getCurrentSupply();\\r\\n\\t\\treturn rSupply / tSupply;\\r\\n\\t}\\r\\n\\r\\n\\tfunction _getCurrentSupply() private view returns (uint256, uint256) {\\r\\n\\t\\tuint256 rSupply = rTotal;\\r\\n\\t\\tuint256 tSupply = tTotal;\\r\\n\\r\\n\\t\\tfor (uint256 i = 0; i \\u003c excluded.length; i++) {\\r\\n\\t\\t\\tif (rOwned[excluded[i]] \\u003e rSupply || tOwned[excluded[i]] \\u003e tSupply) return (rTotal, tTotal);\\r\\n\\t\\t\\trSupply -= rOwned[excluded[i]];\\r\\n\\t\\t\\ttSupply -= tOwned[excluded[i]];\\r\\n\\t\\t}\\r\\n\\r\\n\\t\\tif (rSupply \\u003c rTotal / tTotal) return (rTotal, tTotal);\\r\\n\\t\\treturn (rSupply, tSupply);\\r\\n\\t}\\r\\n\\r\\n\\tfunction _approve(address owner, address spender, uint256 amount) private {\\r\\n\\t\\trequire(owner != ZERO_ADDRESS, \\\"ERC20: approve from the zero address\\\");\\r\\n\\t\\trequire(spender != ZERO_ADDRESS, \\\"ERC20: approve to the zero address\\\");\\r\\n\\r\\n\\t\\tallowances[owner][spender] = amount;\\r\\n\\r\\n\\t\\temit Approval(owner, spender, amount);\\r\\n\\t}\\r\\n\\r\\n\\tfunction _transfer(address from, address to, uint256 amount) private {\\r\\n\\t\\trequire(from != ZERO_ADDRESS, \\\"ERC20: transfer from the zero address\\\");\\r\\n\\t\\trequire(to != ZERO_ADDRESS, \\\"ERC20: transfer to the zero address\\\");\\r\\n\\t\\trequire(amount \\u003e 0, \\\"Transfer amount must be greater than zero\\\");\\r\\n\\t\\trequire(amount \\u003c= balanceOf(from), \\\"You are trying to transfer more than your balance\\\");\\r\\n\\t\\trequire(!snipers[from], \\\"Sniper no sniping!\\\");\\r\\n\\r\\n\\t\\tbool isBuying = automatedMarketMakerPairs[from];\\r\\n\\t\\tbool shouldTakeFees = hasLaunched \\u0026\\u0026 !isExcludedFromFees[from] \\u0026\\u0026 !isExcludedFromFees[to];\\r\\n\\r\\n\\t\\tif (hasLaunched) {\\r\\n\\t\\t\\t// validate max wallet\\r\\n\\t\\t\\tif (!automatedMarketMakerPairs[to] \\u0026\\u0026 !isExcludedFromMaxWallet[to]) {\\r\\n\\t\\t\\t\\trequire((balanceOf(to) + amount) \\u003c= maxWalletAmount, \\\"Cannot transfer more than the max wallet amount\\\");\\r\\n\\t\\t\\t}\\r\\n\\r\\n\\t\\t\\t// validate max buy/sell\\r\\n\\t\\t\\tif (shouldTakeFees) {\\r\\n\\t\\t\\t\\trequire(amount \\u003c= (isBuying ? maxTxAmountBuy : maxTxAmountSell), \\\"Cannot transfer more than the max buy or sell\\\");\\r\\n\\t\\t\\t}\\r\\n\\r\\n\\t\\t\\t// anti-snipe mechanism\\r\\n\\t\\t\\tif (block.number \\u003c= (launchedAt + 1)) {\\r\\n\\t\\t\\t\\tantiSnipe.process(from, to);\\r\\n\\t\\t\\t}\\r\\n\\r\\n\\t\\t\\t// process fees\\r\\n\\t\\t\\tuint256 balance = balanceOf(address(this));\\r\\n\\t\\t\\tif (isFeeProcessingEnabled \\u0026\\u0026 !areFeesBeingProcessed \\u0026\\u0026 balance \\u003e= feeProcessingThreshold \\u0026\\u0026 !automatedMarketMakerPairs[from]) {\\r\\n\\t\\t\\t\\tareFeesBeingProcessed = true;\\r\\n\\t\\t\\t\\t_processFees(balance \\u003e maxTxAmountSell ? maxTxAmountSell : balance);\\r\\n\\t\\t\\t\\tareFeesBeingProcessed = false;\\r\\n\\t\\t\\t}\\r\\n\\t\\t}\\r\\n\\r\\n\\t\\t_tokenTransfer(from, to, amount, isBuying, shouldTakeFees);\\r\\n\\t}\\r\\n\\r\\n\\tfunction _takeReflectFees(uint256 rReflectFee) private {\\r\\n\\t\\trTotal -= rReflectFee;\\r\\n\\t}\\r\\n\\r\\n\\tfunction _takeOtherFees(uint256 rOtherFee, uint256 tOtherFee) private {\\r\\n\\t\\taddress self = address(this);\\r\\n\\r\\n\\t\\trOwned[self] += rOtherFee;\\r\\n\\r\\n\\t\\tif (isExcludedFromRewards[self]) {\\r\\n\\t\\t\\ttOwned[self] += tOtherFee;\\r\\n\\t\\t}\\r\\n\\t}\\r\\n\\r\\n\\tfunction _tokenTransfer(address sender, address recipient, uint256 tAmount, bool isBuying, bool shouldTakeFees) private {\\r\\n\\t\\tReflectValueSet memory set = _getValues(tAmount, isBuying, shouldTakeFees);\\r\\n\\r\\n\\t\\tif (isExcludedFromRewards[sender]) {\\r\\n\\t\\t\\ttOwned[sender] -= tAmount;\\r\\n\\t\\t}\\r\\n\\r\\n\\t\\tif (isExcludedFromRewards[recipient]) {\\r\\n\\t\\t\\ttOwned[recipient] += set.tTransferAmount;\\r\\n\\t\\t}\\r\\n\\r\\n\\t\\trOwned[sender] -= set.rAmount;\\r\\n\\t\\trOwned[recipient] += set.rTransferAmount;\\r\\n\\r\\n\\t\\tif (shouldTakeFees) {\\r\\n\\t\\t\\t_takeReflectFees(set.rReflectFee);\\r\\n\\t\\t\\t_takeOtherFees(set.rOtherFee, set.tOtherFee);\\r\\n\\r\\n\\t\\t\\temit Transfer(sender, address(this), set.tOtherFee);\\r\\n\\t\\t}\\r\\n\\r\\n\\t\\temit Transfer(sender, recipient, set.tTransferAmount);\\r\\n\\t}\\r\\n\\r\\n\\tfunction _processFees(uint256 amount) private {\\r\\n\\t\\tuint256 feeSum = buyFees.marketingFee + buyFees.treasuryFee;\\r\\n\\t\\tif (feeSum == 0) return;\\r\\n\\r\\n\\t\\t// swap fee tokens to ETH\\r\\n\\t\\t_swapExactTokensForETH(amount);\\r\\n\\r\\n\\t\\t// calculate correct amounts to send out\\r\\n\\t\\tuint256 amountEth = address(this).balance;\\r\\n\\t\\tuint256 amountForMarketing = amountEth * buyFees.marketingFee / feeSum;\\r\\n\\t\\tuint256 amountForTreasury = amountEth - amountForMarketing;\\r\\n\\r\\n\\t\\t// send out fees\\r\\n\\t\\tif (amountForMarketing \\u003e 0) {\\r\\n\\t\\t\\tmarketingWalletAddress.transfer(amountForMarketing);\\r\\n\\t\\t}\\r\\n\\r\\n\\t\\tif (amountForTreasury \\u003e 0) {\\r\\n\\t\\t\\ttreasury.deposit{value : amountForTreasury}();\\r\\n\\t\\t}\\r\\n\\r\\n\\t\\temit FeesProcessed(amount);\\r\\n\\t}\\r\\n\\r\\n\\tfunction _swapExactTokensForETH(uint256 amountIn) private {\\r\\n\\t\\taddress self = address(this);\\r\\n\\r\\n\\t\\taddress[] memory path = new address[](2);\\r\\n\\t\\tpath[0] = self;\\r\\n\\t\\tpath[1] = router.WETH();\\r\\n\\r\\n\\t\\t_approve(self, address(router), amountIn);\\r\\n\\t\\trouter.swapExactTokensForETHSupportingFeeOnTransferTokens(amountIn, 0, path, self, block.timestamp);\\r\\n\\t}\\r\\n\\r\\n\\tfunction _excludeFromRewards(address account) private {\\r\\n\\t\\trequire(!isExcludedFromRewards[account], \\\"Account is already excluded from rewards\\\");\\r\\n\\r\\n\\t\\tif (rOwned[account] \\u003e 0) {\\r\\n\\t\\t\\ttOwned[account] = tokenFromReflection(rOwned[account]);\\r\\n\\t\\t}\\r\\n\\r\\n\\t\\tisExcludedFromRewards[account] = true;\\r\\n\\t\\texcluded.push(account);\\r\\n\\t}\\r\\n\\r\\n\\tfunction _includeInRewards(address account) private {\\r\\n\\t\\trequire(isExcludedFromRewards[account], \\\"Account is not excluded from rewards\\\");\\r\\n\\r\\n\\t\\tfor (uint256 i = 0; i \\u003c excluded.length; i++) {\\r\\n\\t\\t\\tif (excluded[i] == account) {\\r\\n\\t\\t\\t\\texcluded[i] = excluded[excluded.length - 1];\\r\\n\\t\\t\\t\\ttOwned[account] = 0;\\r\\n\\t\\t\\t\\tisExcludedFromRewards[account] = false;\\r\\n\\t\\t\\t\\texcluded.pop();\\r\\n\\t\\t\\t\\tbreak;\\r\\n\\t\\t\\t}\\r\\n\\t\\t}\\r\\n\\t}\\r\\n\\r\\n\\tfunction launch(uint256 daysToLock) external payable onlyOwner {\\r\\n\\t\\taddress self = address(this);\\r\\n\\r\\n\\t\\trequire(!hasLaunched, \\\"Already launched\\\");\\r\\n\\t\\trequire(daysToLock \\u003e= 30, \\\"Must lock liquidity for a minimum of 30 days\\\");\\r\\n\\r\\n\\t\\tuint256 tokensForLiquidity = balanceOf(self);\\r\\n\\t\\trequire(tokensForLiquidity \\u003e= (tTotal / 4), \\\"Initial liquidity must be at least 25% of total token supply\\\");\\r\\n\\r\\n\\t\\tIUnicryptLiquidityLocker locker = IUnicryptLiquidityLocker(UNICRYPT_LIQUIDITY_LOCKER_ADDRESS);\\r\\n\\r\\n\\t\\t// calculate and validate ETH amounts for liquidity and locker\\r\\n\\t\\t(uint256 lockFee,,,,,,,,) = locker.gFees();\\r\\n\\t\\trequire(msg.value \\u003e lockFee, \\\"Insufficient ETH for liquidity lock fee\\\");\\r\\n\\r\\n\\t\\tuint256 ethForLiquidity = msg.value - lockFee;\\r\\n\\t\\trequire(ethForLiquidity \\u003e= 0.1 ether, \\\"Insufficient ETH for liquidity\\\");\\r\\n\\r\\n\\t\\t// create pair\\r\\n\\t\\taddress pairAddress = IDEXFactory(router.factory()).createPair(self, router.WETH());\\r\\n\\t\\tautomatedMarketMakerPairs[pairAddress] = true;\\r\\n\\t\\tisExcludedFromMaxWallet[pairAddress] = true;\\r\\n\\r\\n\\t\\tif (!isExcludedFromRewards[pairAddress]) {\\r\\n\\t\\t\\t_excludeFromRewards(pairAddress);\\r\\n\\t\\t}\\r\\n\\r\\n\\t\\t// add liquidity\\r\\n\\t\\t_approve(self, address(router), tokensForLiquidity);\\r\\n\\t\\trouter.addLiquidityETH{value : ethForLiquidity}(self, tokensForLiquidity, 0, 0, self, block.timestamp);\\r\\n\\r\\n\\t\\t// lock liquidity\\r\\n\\t\\tIERC20 lpToken = IERC20(pairAddress);\\r\\n\\r\\n\\t\\tuint256 balance = lpToken.balanceOf(self);\\r\\n\\t\\trequire(lpToken.approve(address(locker), balance), \\\"Liquidity token approval failed\\\");\\r\\n\\r\\n\\t\\tlocker.lockLPToken{value : lockFee}(address(lpToken), balance, block.timestamp + (daysToLock * (1 days)), payable(0), true, payable(owner()));\\r\\n\\r\\n\\t\\t// set up anti-snipe\\r\\n\\t\\tantiSnipe.launch(pairAddress);\\r\\n\\r\\n\\t\\t// set appropriate launch flags\\r\\n\\t\\thasLaunched = true;\\r\\n\\t\\tlaunchedAt = block.number;\\r\\n\\r\\n\\t\\temit Launched();\\r\\n\\t}\\r\\n\\r\\n\\tfunction recoverLaunchedTokens() external onlyOwner {\\r\\n\\t\\trequire(!hasLaunched, \\\"Already launched\\\");\\r\\n\\r\\n\\t\\t// this is used as an emergency mechanism in the case of an incorrect amount of liquidity tokens being accidentally sent.\\r\\n\\t\\t// it is only possible to call this method before launch, and its indended use is to recover tokens which would otherwise\\r\\n\\t\\t// result in a failed launch \\r\\n\\t\\t_transfer(address(this), owner(), balanceOf(address(this)));\\r\\n\\t}\\r\\n\\r\\n\\tfunction buyback(uint256 amount) external onlyOwner {\\r\\n\\t\\ttreasury.buyback(amount);\\r\\n\\t}\\r\\n\\r\\n\\tfunction addSniper(address account) external {\\r\\n\\t\\trequire(msg.sender == address(antiSnipe), \\\"Snipers can only be added by the anti-snipe contract\\\");\\r\\n\\r\\n\\t\\t// ensure that snipers can only be added on the launch block plus the block after\\r\\n\\t\\tif (block.timestamp \\u003c= (launchedAt + 1)) {\\r\\n\\t\\t\\tsnipers[account] = true;\\r\\n\\t\\t\\temit SniperAdded(account);\\r\\n\\t\\t}\\r\\n\\t}\\r\\n\\r\\n\\tfunction punishSniper(address account) external onlyOwner {\\r\\n\\t\\trequire(snipers[account], \\\"This account is not a sniper\\\");\\r\\n\\r\\n\\t\\tuint256 balance = balanceOf(account);\\r\\n\\t\\trequire(balance \\u003e 0, \\\"Insufficient token balance\\\");\\r\\n\\r\\n\\t\\t_transfer(account, address(this), balance);\\r\\n\\r\\n\\t\\temit SniperPunished(account);\\r\\n\\t}\\r\\n\\r\\n\\tfunction removeSniper(address account) external onlyOwner {\\r\\n\\t\\trequire(snipers[account], \\\"This account is not a sniper\\\");\\r\\n\\t\\tsnipers[account] = false;\\r\\n\\t\\temit SniperRemoved(account);\\r\\n\\t}\\r\\n\\r\\n\\tfunction setAntiSnipe(address value) external onlyOwner {\\r\\n\\t\\trequire(value != ZERO_ADDRESS, \\\"Antisnipe cannot be the zero address\\\");\\r\\n\\t\\trequire(value != address(antiSnipe), \\\"Antisnipe is already set to this value\\\");\\r\\n\\t\\tantiSnipe = IAntiSnipe(value);\\r\\n\\t}\\r\\n\\r\\n\\tfunction setFees(bool areBuyFees, uint256 reflectFee, uint256 marketingFee, uint256 treasuryFee) external onlyOwner {\\r\\n\\t\\trequire((reflectFee + marketingFee + treasuryFee) \\u003c= 25, \\\"Cannot set fees to above a combined total of 25%\\\");\\r\\n\\r\\n\\t\\tFeeSet memory fees = FeeSet({\\r\\n\\t\\t\\treflectFee: reflectFee,\\r\\n\\t\\t\\tmarketingFee: marketingFee,\\r\\n\\t\\t\\ttreasuryFee: treasuryFee\\r\\n\\t\\t});\\r\\n\\r\\n\\t\\tif (areBuyFees) {\\r\\n\\t\\t\\tbuyFees = fees;\\r\\n\\t\\t} else {\\r\\n\\t\\t\\tsellFees = fees;\\r\\n\\t\\t}\\r\\n\\t}\\r\\n\\r\\n\\tfunction setIsFeeProcessingEnabled(bool value) external onlyOwner {\\r\\n\\t\\tisFeeProcessingEnabled = value;\\r\\n\\t}\\r\\n\\r\\n\\tfunction setFeeProcessingThreshold(uint256 value) external onlyOwner {\\r\\n\\t\\tfeeProcessingThreshold = value;\\r\\n\\t}\\r\\n\\r\\n\\tfunction setMaxTransactionAmounts(uint256 maxBuy, uint256 maxSell) external onlyOwner {\\r\\n\\t\\trequire(maxBuy \\u003e= (tTotal / 400), \\\"Must set max buy to at least 0.25% of total supply\\\");\\r\\n\\t\\trequire(maxSell \\u003e= (tTotal / 400), \\\"Must set max sell to at least 0.25% of total supply\\\");\\r\\n\\r\\n\\t\\tmaxTxAmountBuy = maxBuy;\\r\\n\\t\\tmaxTxAmountSell = maxSell;\\r\\n\\t}\\r\\n\\r\\n\\tfunction setMarketingWalletAddress(address payable value) external onlyOwner {\\r\\n\\t\\trequire(marketingWalletAddress != value, \\\"Marketing wallet address is already set to this value\\\");\\r\\n\\t\\tmarketingWalletAddress = value;\\r\\n\\t}\\r\\n\\r\\n\\tfunction setMaxWalletAmount(uint256 value) external onlyOwner {\\r\\n\\t\\trequire(value \\u003e= (tTotal / 200), \\\"Must set max wallet to at least 0.5% of total supply\\\");\\r\\n\\t\\tmaxWalletAmount = value;\\r\\n\\t}\\r\\n\\r\\n\\tfunction setIsExcludedFromFees(address account, bool value) external onlyOwner {\\r\\n\\t\\trequire(isExcludedFromFees[account] != value, \\\"Account is already set to this value\\\");\\r\\n\\t\\tisExcludedFromFees[account] = value;\\r\\n\\t}\\r\\n\\r\\n\\tfunction setIsExcludedFromMaxWallet(address account, bool value) external onlyOwner {\\r\\n\\t\\trequire(isExcludedFromMaxWallet[account] != value, \\\"Account is already set to this value\\\");\\r\\n\\t\\tisExcludedFromMaxWallet[account] = value;\\r\\n\\t}\\r\\n\\r\\n\\tfunction excludeFromRewards(address account) external onlyOwner {\\r\\n\\t\\t_excludeFromRewards(account);\\r\\n\\t}\\r\\n\\r\\n\\tfunction includeInRewards(address account) external onlyOwner {\\r\\n\\t\\t_includeInRewards(account);\\r\\n\\t}\\r\\n\\r\\n\\treceive() external payable {}\\r\\n}\"},\"IAccessControl.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.0 (access/IAccessControl.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev External interface of AccessControl declared to support ERC165 detection.\\n */\\ninterface IAccessControl {\\n    /**\\n     * @dev Emitted when `newAdminRole` is set as ``role``\\u0027s admin role, replacing `previousAdminRole`\\n     *\\n     * `DEFAULT_ADMIN_ROLE` is the starting admin for all roles, despite\\n     * {RoleAdminChanged} not being emitted signaling this.\\n     *\\n     * _Available since v3.1._\\n     */\\n    event RoleAdminChanged(bytes32 indexed role, bytes32 indexed previousAdminRole, bytes32 indexed newAdminRole);\\n\\n    /**\\n     * @dev Emitted when `account` is granted `role`.\\n     *\\n     * `sender` is the account that originated the contract call, an admin role\\n     * bearer except when using {AccessControl-_setupRole}.\\n     */\\n    event RoleGranted(bytes32 indexed role, address indexed account, address indexed sender);\\n\\n    /**\\n     * @dev Emitted when `account` is revoked `role`.\\n     *\\n     * `sender` is the account that originated the contract call:\\n     *   - if using `revokeRole`, it is the admin role bearer\\n     *   - if using `renounceRole`, it is the role bearer (i.e. `account`)\\n     */\\n    event RoleRevoked(bytes32 indexed role, address indexed account, address indexed sender);\\n\\n    /**\\n     * @dev Returns `true` if `account` has been granted `role`.\\n     */\\n    function hasRole(bytes32 role, address account) external view returns (bool);\\n\\n    /**\\n     * @dev Returns the admin role that controls `role`. See {grantRole} and\\n     * {revokeRole}.\\n     *\\n     * To change a role\\u0027s admin, use {AccessControl-_setRoleAdmin}.\\n     */\\n    function getRoleAdmin(bytes32 role) external view returns (bytes32);\\n\\n    /**\\n     * @dev Grants `role` to `account`.\\n     *\\n     * If `account` had not been already granted `role`, emits a {RoleGranted}\\n     * event.\\n     *\\n     * Requirements:\\n     *\\n     * - the caller must have ``role``\\u0027s admin role.\\n     */\\n    function grantRole(bytes32 role, address account) external;\\n\\n    /**\\n     * @dev Revokes `role` from `account`.\\n     *\\n     * If `account` had been granted `role`, emits a {RoleRevoked} event.\\n     *\\n     * Requirements:\\n     *\\n     * - the caller must have ``role``\\u0027s admin role.\\n     */\\n    function revokeRole(bytes32 role, address account) external;\\n\\n    /**\\n     * @dev Revokes `role` from the calling account.\\n     *\\n     * Roles are often managed via {grantRole} and {revokeRole}: this function\\u0027s\\n     * purpose is to provide a mechanism for accounts to lose their privileges\\n     * if they are compromised (such as when a trusted device is misplaced).\\n     *\\n     * If the calling account had been granted `role`, emits a {RoleRevoked}\\n     * event.\\n     *\\n     * Requirements:\\n     *\\n     * - the caller must be `account`.\\n     */\\n    function renounceRole(bytes32 role, address account) external;\\n}\\n\"},\"IAntiSnipe.sol\":{\"content\":\"pragma solidity 0.8.10;\\r\\n\\r\\n// SPDX-License-Identifier: MIT\\r\\n\\r\\ninterface IAntiSnipe {\\r\\n\\tfunction process(address from, address to) external;\\r\\n\\r\\n\\tfunction launch(address pairAddress) external;\\r\\n}\"},\"IDEXFactory.sol\":{\"content\":\"pragma solidity 0.8.10;\\r\\n\\r\\n// SPDX-License-Identifier: MIT\\r\\n\\r\\ninterface IDEXFactory {\\r\\n\\tevent PairCreated(address indexed token0, address indexed token1, address pair, uint);\\r\\n\\r\\n\\tfunction feeTo() external view returns (address);\\r\\n\\r\\n\\tfunction feeToSetter() external view returns (address);\\r\\n\\r\\n\\tfunction getPair(address tokenA, address tokenB) external view returns (address pair);\\r\\n\\r\\n\\tfunction allPairs(uint) external view returns (address pair);\\r\\n\\r\\n\\tfunction allPairsLength() external view returns (uint);\\r\\n\\r\\n\\tfunction createPair(address tokenA, address tokenB) external returns (address pair);\\r\\n\\r\\n\\tfunction setFeeTo(address) external;\\r\\n\\r\\n\\tfunction setFeeToSetter(address) external;\\r\\n}\"},\"IDEXRouter.sol\":{\"content\":\"pragma solidity 0.8.10;\\r\\n\\r\\n// SPDX-License-Identifier: MIT\\r\\n\\r\\ninterface IDEXRouter {\\r\\n\\tfunction factory() external pure returns (address);\\r\\n\\r\\n\\tfunction WETH() external pure returns (address);\\r\\n\\r\\n\\tfunction addLiquidity(\\r\\n\\t\\taddress tokenA,\\r\\n\\t\\taddress tokenB,\\r\\n\\t\\tuint amountADesired,\\r\\n\\t\\tuint amountBDesired,\\r\\n\\t\\tuint amountAMin,\\r\\n\\t\\tuint amountBMin,\\r\\n\\t\\taddress to,\\r\\n\\t\\tuint deadline\\r\\n\\t) external returns (uint amountA, uint amountB, uint liquidity);\\r\\n\\r\\n\\tfunction addLiquidityETH(\\r\\n\\t\\taddress token,\\r\\n\\t\\tuint amountTokenDesired,\\r\\n\\t\\tuint amountTokenMin,\\r\\n\\t\\tuint amountETHMin,\\r\\n\\t\\taddress to,\\r\\n\\t\\tuint deadline\\r\\n\\t) external payable returns (uint amountToken, uint amountETH, uint liquidity);\\r\\n\\r\\n\\tfunction removeLiquidity(\\r\\n\\t\\taddress tokenA,\\r\\n\\t\\taddress tokenB,\\r\\n\\t\\tuint liquidity,\\r\\n\\t\\tuint amountAMin,\\r\\n\\t\\tuint amountBMin,\\r\\n\\t\\taddress to,\\r\\n\\t\\tuint deadline\\r\\n\\t) external returns (uint amountA, uint amountB);\\r\\n\\r\\n\\tfunction removeLiquidityETH(\\r\\n\\t\\taddress token,\\r\\n\\t\\tuint liquidity,\\r\\n\\t\\tuint amountTokenMin,\\r\\n\\t\\tuint amountETHMin,\\r\\n\\t\\taddress to,\\r\\n\\t\\tuint deadline\\r\\n\\t) external returns (uint amountToken, uint amountETH);\\r\\n\\r\\n\\tfunction removeLiquidityWithPermit(\\r\\n\\t\\taddress tokenA,\\r\\n\\t\\taddress tokenB,\\r\\n\\t\\tuint liquidity,\\r\\n\\t\\tuint amountAMin,\\r\\n\\t\\tuint amountBMin,\\r\\n\\t\\taddress to,\\r\\n\\t\\tuint deadline,\\r\\n\\t\\tbool approveMax, uint8 v, bytes32 r, bytes32 s\\r\\n\\t) external returns (uint amountA, uint amountB);\\r\\n\\r\\n\\tfunction removeLiquidityETHWithPermit(\\r\\n\\t\\taddress token,\\r\\n\\t\\tuint liquidity,\\r\\n\\t\\tuint amountTokenMin,\\r\\n\\t\\tuint amountETHMin,\\r\\n\\t\\taddress to,\\r\\n\\t\\tuint deadline,\\r\\n\\t\\tbool approveMax, uint8 v, bytes32 r, bytes32 s\\r\\n\\t) external returns (uint amountToken, uint amountETH);\\r\\n\\r\\n\\tfunction swapExactTokensForTokens(\\r\\n\\t\\tuint amountIn,\\r\\n\\t\\tuint amountOutMin,\\r\\n\\t\\taddress[] calldata path,\\r\\n\\t\\taddress to,\\r\\n\\t\\tuint deadline\\r\\n\\t) external returns (uint[] memory amounts);\\r\\n\\r\\n\\tfunction swapTokensForExactTokens(\\r\\n\\t\\tuint amountOut,\\r\\n\\t\\tuint amountInMax,\\r\\n\\t\\taddress[] calldata path,\\r\\n\\t\\taddress to,\\r\\n\\t\\tuint deadline\\r\\n\\t) external returns (uint[] memory amounts);\\r\\n\\r\\n\\tfunction swapExactETHForTokens(uint amountOutMin, address[] calldata path, address to, uint deadline)\\r\\n\\texternal\\r\\n\\tpayable\\r\\n\\treturns (uint[] memory amounts);\\r\\n\\r\\n\\tfunction swapTokensForExactETH(uint amountOut, uint amountInMax, address[] calldata path, address to, uint deadline)\\r\\n\\texternal\\r\\n\\treturns (uint[] memory amounts);\\r\\n\\r\\n\\tfunction swapExactTokensForETH(uint amountIn, uint amountOutMin, address[] calldata path, address to, uint deadline)\\r\\n\\texternal\\r\\n\\treturns (uint[] memory amounts);\\r\\n\\r\\n\\tfunction swapETHForExactTokens(uint amountOut, address[] calldata path, address to, uint deadline)\\r\\n\\texternal\\r\\n\\tpayable\\r\\n\\treturns (uint[] memory amounts);\\r\\n\\r\\n\\tfunction quote(uint amountA, uint reserveA, uint reserveB) external pure returns (uint amountB);\\r\\n\\r\\n\\tfunction getAmountOut(uint amountIn, uint reserveIn, uint reserveOut) external pure returns (uint amountOut);\\r\\n\\r\\n\\tfunction getAmountIn(uint amountOut, uint reserveIn, uint reserveOut) external pure returns (uint amountIn);\\r\\n\\r\\n\\tfunction getAmountsOut(uint amountIn, address[] calldata path) external view returns (uint[] memory amounts);\\r\\n\\r\\n\\tfunction getAmountsIn(uint amountOut, address[] calldata path) external view returns (uint[] memory amounts);\\r\\n\\r\\n\\tfunction removeLiquidityETHSupportingFeeOnTransferTokens(\\r\\n\\t\\taddress token,\\r\\n\\t\\tuint liquidity,\\r\\n\\t\\tuint amountTokenMin,\\r\\n\\t\\tuint amountETHMin,\\r\\n\\t\\taddress to,\\r\\n\\t\\tuint deadline\\r\\n\\t) external returns (uint amountETH);\\r\\n\\r\\n\\tfunction removeLiquidityETHWithPermitSupportingFeeOnTransferTokens(\\r\\n\\t\\taddress token,\\r\\n\\t\\tuint liquidity,\\r\\n\\t\\tuint amountTokenMin,\\r\\n\\t\\tuint amountETHMin,\\r\\n\\t\\taddress to,\\r\\n\\t\\tuint deadline,\\r\\n\\t\\tbool approveMax, uint8 v, bytes32 r, bytes32 s\\r\\n\\t) external returns (uint amountETH);\\r\\n\\r\\n\\tfunction swapExactTokensForTokensSupportingFeeOnTransferTokens(\\r\\n\\t\\tuint amountIn,\\r\\n\\t\\tuint amountOutMin,\\r\\n\\t\\taddress[] calldata path,\\r\\n\\t\\taddress to,\\r\\n\\t\\tuint deadline\\r\\n\\t) external;\\r\\n\\r\\n\\tfunction swapExactETHForTokensSupportingFeeOnTransferTokens(\\r\\n\\t\\tuint amountOutMin,\\r\\n\\t\\taddress[] calldata path,\\r\\n\\t\\taddress to,\\r\\n\\t\\tuint deadline\\r\\n\\t) external payable;\\r\\n\\r\\n\\tfunction swapExactTokensForETHSupportingFeeOnTransferTokens(\\r\\n\\t\\tuint amountIn,\\r\\n\\t\\tuint amountOutMin,\\r\\n\\t\\taddress[] calldata path,\\r\\n\\t\\taddress to,\\r\\n\\t\\tuint deadline\\r\\n\\t) external;\\r\\n}\"},\"IERC165.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.0 (utils/introspection/IERC165.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC165 standard, as defined in the\\n * https://eips.ethereum.org/EIPS/eip-165[EIP].\\n *\\n * Implementers can declare support of contract interfaces, which can then be\\n * queried by others ({ERC165Checker}).\\n *\\n * For an implementation, see {ERC165}.\\n */\\ninterface IERC165 {\\n    /**\\n     * @dev Returns true if this contract implements the interface defined by\\n     * `interfaceId`. See the corresponding\\n     * https://eips.ethereum.org/EIPS/eip-165#how-interfaces-are-identified[EIP section]\\n     * to learn more about how these ids are created.\\n     *\\n     * This function call must use less than 30 000 gas.\\n     */\\n    function supportsInterface(bytes4 interfaceId) external view returns (bool);\\n}\\n\"},\"IERC20.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.0 (token/ERC20/IERC20.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC20 standard as defined in the EIP.\\n */\\ninterface IERC20 {\\n    /**\\n     * @dev Returns the amount of tokens in existence.\\n     */\\n    function totalSupply() external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the amount of tokens owned by `account`.\\n     */\\n    function balanceOf(address account) external view returns (uint256);\\n\\n    /**\\n     * @dev Moves `amount` tokens from the caller\\u0027s account to `recipient`.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transfer(address recipient, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Returns the remaining number of tokens that `spender` will be\\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\\n     * zero by default.\\n     *\\n     * This value changes when {approve} or {transferFrom} are called.\\n     */\\n    function allowance(address owner, address spender) external view returns (uint256);\\n\\n    /**\\n     * @dev Sets `amount` as the allowance of `spender` over the caller\\u0027s tokens.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\\n     * that someone may use both the old and the new allowance by unfortunate\\n     * transaction ordering. One possible solution to mitigate this race\\n     * condition is to first reduce the spender\\u0027s allowance to 0 and set the\\n     * desired value afterwards:\\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address spender, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Moves `amount` tokens from `sender` to `recipient` using the\\n     * allowance mechanism. `amount` is then deducted from the caller\\u0027s\\n     * allowance.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(\\n        address sender,\\n        address recipient,\\n        uint256 amount\\n    ) external returns (bool);\\n\\n    /**\\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\\n     * another (`to`).\\n     *\\n     * Note that `value` may be zero.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 value);\\n\\n    /**\\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\\n     * a call to {approve}. `value` is the new allowance.\\n     */\\n    event Approval(address indexed owner, address indexed spender, uint256 value);\\n}\\n\"},\"IUnicryptLiquidityLocker.sol\":{\"content\":\"pragma solidity 0.8.10;\\r\\n\\r\\n// SPDX-License-Identifier: MIT\\r\\n\\r\\ninterface IUnicryptLiquidityLocker {\\r\\n\\tfunction gFees() external view returns (\\r\\n\\t\\tuint256 ethFee,\\r\\n\\t\\taddress secondaryFeeToken,\\r\\n\\t\\tuint256 secondaryTokenFee,\\r\\n\\t\\tuint256 secondaryTokenDiscount,\\r\\n\\t\\tuint256 liquidityFee,\\r\\n\\t\\tuint256 referralPercent,\\r\\n\\t\\taddress referralToken,\\r\\n\\t\\tuint256 referralHold,\\r\\n\\t\\tuint256 referralDiscount\\r\\n\\t);\\r\\n\\r\\n\\tfunction lockLPToken(\\r\\n\\t\\taddress _lpToken,\\r\\n\\t\\tuint256 _amount,\\r\\n\\t\\tuint256 _unlock_date,\\r\\n\\t\\taddress payable _referral,\\r\\n\\t\\tbool _fee_in_eth,\\r\\n\\t\\taddress payable _withdrawer\\r\\n\\t) external payable;\\r\\n}\"},\"Ownable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.0 (access/Ownable.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"./Context.sol\\\";\\n\\n/**\\n * @dev Contract module which provides a basic access control mechanism, where\\n * there is an account (an owner) that can be granted exclusive access to\\n * specific functions.\\n *\\n * By default, the owner account will be the one that deploys the contract. This\\n * can later be changed with {transferOwnership}.\\n *\\n * This module is used through inheritance. It will make available the modifier\\n * `onlyOwner`, which can be applied to your functions to restrict their use to\\n * the owner.\\n */\\nabstract contract Ownable is Context {\\n    address private _owner;\\n\\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\\n\\n    /**\\n     * @dev Initializes the contract setting the deployer as the initial owner.\\n     */\\n    constructor() {\\n        _transferOwnership(_msgSender());\\n    }\\n\\n    /**\\n     * @dev Returns the address of the current owner.\\n     */\\n    function owner() public view virtual returns (address) {\\n        return _owner;\\n    }\\n\\n    /**\\n     * @dev Throws if called by any account other than the owner.\\n     */\\n    modifier onlyOwner() {\\n        require(owner() == _msgSender(), \\\"Ownable: caller is not the owner\\\");\\n        _;\\n    }\\n\\n    /**\\n     * @dev Leaves the contract without owner. It will not be possible to call\\n     * `onlyOwner` functions anymore. Can only be called by the current owner.\\n     *\\n     * NOTE: Renouncing ownership will leave the contract without an owner,\\n     * thereby removing any functionality that is only available to the owner.\\n     */\\n    function renounceOwnership() public virtual onlyOwner {\\n        _transferOwnership(address(0));\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Can only be called by the current owner.\\n     */\\n    function transferOwnership(address newOwner) public virtual onlyOwner {\\n        require(newOwner != address(0), \\\"Ownable: new owner is the zero address\\\");\\n        _transferOwnership(newOwner);\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Internal function without access restriction.\\n     */\\n    function _transferOwnership(address newOwner) internal virtual {\\n        address oldOwner = _owner;\\n        _owner = newOwner;\\n        emit OwnershipTransferred(oldOwner, newOwner);\\n    }\\n}\\n\"},\"Strings.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.0 (utils/Strings.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev String operations.\\n */\\nlibrary Strings {\\n    bytes16 private constant _HEX_SYMBOLS = \\\"0123456789abcdef\\\";\\n\\n    /**\\n     * @dev Converts a `uint256` to its ASCII `string` decimal representation.\\n     */\\n    function toString(uint256 value) internal pure returns (string memory) {\\n        // Inspired by OraclizeAPI\\u0027s implementation - MIT licence\\n        // https://github.com/oraclize/ethereum-api/blob/b42146b063c7d6ee1358846c198246239e9360e8/oraclizeAPI_0.4.25.sol\\n\\n        if (value == 0) {\\n            return \\\"0\\\";\\n        }\\n        uint256 temp = value;\\n        uint256 digits;\\n        while (temp != 0) {\\n            digits++;\\n            temp /= 10;\\n        }\\n        bytes memory buffer = new bytes(digits);\\n        while (value != 0) {\\n            digits -= 1;\\n            buffer[digits] = bytes1(uint8(48 + uint256(value % 10)));\\n            value /= 10;\\n        }\\n        return string(buffer);\\n    }\\n\\n    /**\\n     * @dev Converts a `uint256` to its ASCII `string` hexadecimal representation.\\n     */\\n    function toHexString(uint256 value) internal pure returns (string memory) {\\n        if (value == 0) {\\n            return \\\"0x00\\\";\\n        }\\n        uint256 temp = value;\\n        uint256 length = 0;\\n        while (temp != 0) {\\n            length++;\\n            temp \\u003e\\u003e= 8;\\n        }\\n        return toHexString(value, length);\\n    }\\n\\n    /**\\n     * @dev Converts a `uint256` to its ASCII `string` hexadecimal representation with fixed length.\\n     */\\n    function toHexString(uint256 value, uint256 length) internal pure returns (string memory) {\\n        bytes memory buffer = new bytes(2 * length + 2);\\n        buffer[0] = \\\"0\\\";\\n        buffer[1] = \\\"x\\\";\\n        for (uint256 i = 2 * length + 1; i \\u003e 1; --i) {\\n            buffer[i] = _HEX_SYMBOLS[value \\u0026 0xf];\\n            value \\u003e\\u003e= 4;\\n        }\\n        require(value == 0, \\\"Strings: hex length insufficient\\\");\\n        return string(buffer);\\n    }\\n}\\n\"}}","ABI":"[{\"inputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Approval\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"FeesProcessed\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[],\"name\":\"Launched\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"sniper\",\"type\":\"address\"}],\"name\":\"SniperAdded\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"sniper\",\"type\":\"address\"}],\"name\":\"SniperPunished\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"sniper\",\"type\":\"address\"}],\"name\":\"SniperRemoved\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Transfer\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"addSniper\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"}],\"name\":\"allowance\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"approve\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"buyFees\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"reflectFee\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"marketingFee\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"treasuryFee\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"buyback\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"decimals\",\"outputs\":[{\"internalType\":\"uint8\",\"name\":\"\",\"type\":\"uint8\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"subtractedValue\",\"type\":\"uint256\"}],\"name\":\"decreaseAllowance\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"excludeFromRewards\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"feeProcessingThreshold\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"includeInRewards\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"addedValue\",\"type\":\"uint256\"}],\"name\":\"increaseAllowance\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"isExcludedFromFees\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"isExcludedFromMaxWallet\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"isExcludedFromRewards\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"isFeeProcessingEnabled\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"daysToLock\",\"type\":\"uint256\"}],\"name\":\"launch\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"maxTxAmountBuy\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"maxTxAmountSell\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"maxWalletAmount\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"name\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"punishSniper\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"recoverLaunchedTokens\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"removeSniper\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"sellFees\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"reflectFee\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"marketingFee\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"treasuryFee\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"value\",\"type\":\"address\"}],\"name\":\"setAntiSnipe\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"setFeeProcessingThreshold\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bool\",\"name\":\"areBuyFees\",\"type\":\"bool\"},{\"internalType\":\"uint256\",\"name\":\"reflectFee\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"marketingFee\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"treasuryFee\",\"type\":\"uint256\"}],\"name\":\"setFees\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"internalType\":\"bool\",\"name\":\"value\",\"type\":\"bool\"}],\"name\":\"setIsExcludedFromFees\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"internalType\":\"bool\",\"name\":\"value\",\"type\":\"bool\"}],\"name\":\"setIsExcludedFromMaxWallet\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bool\",\"name\":\"value\",\"type\":\"bool\"}],\"name\":\"setIsFeeProcessingEnabled\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address payable\",\"name\":\"value\",\"type\":\"address\"}],\"name\":\"setMarketingWalletAddress\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"maxBuy\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"maxSell\",\"type\":\"uint256\"}],\"name\":\"setMaxTransactionAmounts\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"setMaxWalletAmount\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"symbol\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"rAmount\",\"type\":\"uint256\"}],\"name\":\"tokenFromReflection\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalSupply\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"recipient\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"transfer\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"recipient\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"transferFrom\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"treasury\",\"outputs\":[{\"internalType\":\"contract BuybackTreasury\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"stateMutability\":\"payable\",\"type\":\"receive\"}]","ContractName":"HangryBirds","CompilerVersion":"v0.8.10+commit.fc410830","OptimizationUsed":"1","Runs":"200","ConstructorArguments":"","EVMVersion":"Default","Library":"","LicenseType":"None","Proxy":"0","Implementation":"","SwarmSource":"ipfs://2b41243493cdec11484c2098149d3d141f911ac8e50ac0d139682ad8c69bffd5"}]}