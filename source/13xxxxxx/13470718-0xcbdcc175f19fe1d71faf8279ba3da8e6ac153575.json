{"status":"1","message":"OK","result":[{"SourceCode":"{{\r\n  \"language\": \"Solidity\",\r\n  \"sources\": {\r\n    \"contracts/Registry.sol\": {\r\n      \"content\": \"/// @author Hapi Finance Team\\n/// SPDX-License-Identifier: GPL-3.0\\n\\npragma solidity ^0.8.3;\\n\\nimport \\\"@openzeppelin/contracts/access/Ownable.sol\\\";\\n\\n/** @title Will */\\ncontract Registry is Ownable {\\n    // If the Registry has been set up yet\\n    bool _initialized;\\n\\n    // Proxy contract address to verify calls\\n    address public proxy;\\n\\n    // Contracts containing implementation logic\\n    address[] public implementations;\\n\\n    // What implementation version each user is running on\\n    mapping(address => uint256) versions;\\n\\n    /// Constructor\\n    constructor() Ownable() {\\n        // Start with address 0 as v0 - as that is the base for the mapping\\n        implementations.push(address(0));\\n        proxy = address(0);\\n        _initialized = false;\\n    }\\n\\n    /// View functions\\n\\n    /** @notice Gets the implementation for the given sender\\n     * @dev If version for sender is 0, send latest implementation.\\n     * @param sender the sender of the call to the proxy\\n     * @return address of the implementation version for the sender\\n     */\\n    function getImplementation(address sender)\\n        public\\n        view\\n        onlyProxy\\n        initialized\\n        returns (address)\\n    {\\n        uint256 version = versions[sender];\\n        if (version == 0) {\\n            version = implementations.length - 1;\\n        }\\n        return implementations[version];\\n    }\\n\\n    /** @notice Gets the latest implementation contract\\n     * @return address of the latest implementation contract\\n     */\\n    function getLatestImplementation()\\n        public\\n        view\\n        initialized\\n        returns (address)\\n    {\\n        return implementations[implementations.length - 1];\\n    }\\n\\n    /** @notice Gets implementation for user, for admin/notification usage. limited to owner\\n     * @dev If version for sender is 0, send latest implementation.\\n     * @param user the user whose implementation to look up\\n     * @return address of the implementation version for the user\\n     */\\n    function getImplementationForUser(address user)\\n        public\\n        view\\n        onlyOwner\\n        initialized\\n        returns (address)\\n    {\\n        uint256 version = versions[user];\\n        if (version == 0) {\\n            version = implementations.length - 1;\\n        }\\n        return implementations[version];\\n    }\\n\\n    /// Update functions\\n\\n    /** @notice initializes registry once and only once\\n     * @param newProxy The address of the new proxy contract\\n     * @param implementation The address of the initial implementation\\n     */\\n    function initialize(address newProxy, address implementation)\\n        public\\n        onlyOwner\\n    {\\n        require(\\n            _initialized == false,\\n            \\\"Initialize may only be called once to ensure the proxy can never be switched.\\\"\\n        );\\n        proxy = newProxy;\\n        implementations.push(implementation);\\n        _initialized = true;\\n    }\\n\\n    /** @notice Updates the implementation\\n     * @param newImplementation The address of the new implementation contract\\n     */\\n    function register(address newImplementation) public onlyOwner initialized {\\n        implementations.push(newImplementation);\\n    }\\n\\n    /** @notice Upgrades the sender's contract to the latest implementation\\n     * @param sender the sender of the call to the proxy\\n     */\\n    function upgrade(address sender) public onlyProxy initialized {\\n        versions[sender] = implementations.length - 1;\\n    }\\n\\n    /** @notice Upgrades the sender's contract to the latest implementation\\n     * @param sender the sender of the call to the proxy\\n     * @param version the version of the implementation to upgrade to\\n     */\\n    function upgradeToVersion(address sender, uint256 version)\\n        public\\n        onlyProxy\\n        initialized\\n    {\\n        versions[sender] = version;\\n    }\\n\\n    /// Modifiers\\n\\n    /** @notice Restricts method to be called only by the proxy\\n     */\\n    modifier onlyProxy() {\\n        require(\\n            msg.sender == proxy,\\n            \\\"This method is restricted to the proxy. Ensure initialize has been called, and you are calling from the proxy.\\\"\\n        );\\n        _;\\n    }\\n\\n    /** @notice Restricts method to be called only once initialized\\n     */\\n    modifier initialized() {\\n        require(\\n            _initialized == true,\\n            \\\"Please initialize this contract first by calling 'initialize()'\\\"\\n        );\\n        _;\\n    }\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/access/Ownable.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../utils/Context.sol\\\";\\n\\n/**\\n * @dev Contract module which provides a basic access control mechanism, where\\n * there is an account (an owner) that can be granted exclusive access to\\n * specific functions.\\n *\\n * By default, the owner account will be the one that deploys the contract. This\\n * can later be changed with {transferOwnership}.\\n *\\n * This module is used through inheritance. It will make available the modifier\\n * `onlyOwner`, which can be applied to your functions to restrict their use to\\n * the owner.\\n */\\nabstract contract Ownable is Context {\\n    address private _owner;\\n\\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\\n\\n    /**\\n     * @dev Initializes the contract setting the deployer as the initial owner.\\n     */\\n    constructor() {\\n        _setOwner(_msgSender());\\n    }\\n\\n    /**\\n     * @dev Returns the address of the current owner.\\n     */\\n    function owner() public view virtual returns (address) {\\n        return _owner;\\n    }\\n\\n    /**\\n     * @dev Throws if called by any account other than the owner.\\n     */\\n    modifier onlyOwner() {\\n        require(owner() == _msgSender(), \\\"Ownable: caller is not the owner\\\");\\n        _;\\n    }\\n\\n    /**\\n     * @dev Leaves the contract without owner. It will not be possible to call\\n     * `onlyOwner` functions anymore. Can only be called by the current owner.\\n     *\\n     * NOTE: Renouncing ownership will leave the contract without an owner,\\n     * thereby removing any functionality that is only available to the owner.\\n     */\\n    function renounceOwnership() public virtual onlyOwner {\\n        _setOwner(address(0));\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Can only be called by the current owner.\\n     */\\n    function transferOwnership(address newOwner) public virtual onlyOwner {\\n        require(newOwner != address(0), \\\"Ownable: new owner is the zero address\\\");\\n        _setOwner(newOwner);\\n    }\\n\\n    function _setOwner(address newOwner) private {\\n        address oldOwner = _owner;\\n        _owner = newOwner;\\n        emit OwnershipTransferred(oldOwner, newOwner);\\n    }\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/utils/Context.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Provides information about the current execution context, including the\\n * sender of the transaction and its data. While these are generally available\\n * via msg.sender and msg.data, they should not be accessed in such a direct\\n * manner, since when dealing with meta-transactions the account sending and\\n * paying for execution may not be the actual sender (as far as an application\\n * is concerned).\\n *\\n * This contract is only required for intermediate, library-like contracts.\\n */\\nabstract contract Context {\\n    function _msgSender() internal view virtual returns (address) {\\n        return msg.sender;\\n    }\\n\\n    function _msgData() internal view virtual returns (bytes calldata) {\\n        return msg.data;\\n    }\\n}\\n\"\r\n    }\r\n  },\r\n  \"settings\": {\r\n    \"optimizer\": {\r\n      \"enabled\": false,\r\n      \"runs\": 200\r\n    },\r\n    \"outputSelection\": {\r\n      \"*\": {\r\n        \"*\": [\r\n          \"evm.bytecode\",\r\n          \"evm.deployedBytecode\",\r\n          \"devdoc\",\r\n          \"userdoc\",\r\n          \"metadata\",\r\n          \"abi\"\r\n        ]\r\n      }\r\n    },\r\n    \"libraries\": {}\r\n  }\r\n}}","ABI":"[{\"inputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"}],\"name\":\"getImplementation\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"}],\"name\":\"getImplementationForUser\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getLatestImplementation\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"implementations\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newProxy\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"implementation\",\"type\":\"address\"}],\"name\":\"initialize\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"proxy\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newImplementation\",\"type\":\"address\"}],\"name\":\"register\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"}],\"name\":\"upgrade\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"version\",\"type\":\"uint256\"}],\"name\":\"upgradeToVersion\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}]","ContractName":"Registry","CompilerVersion":"v0.8.4+commit.c7e474f2","OptimizationUsed":"0","Runs":"200","ConstructorArguments":"","EVMVersion":"Default","Library":"","LicenseType":"","Proxy":"0","Implementation":"","SwarmSource":""}]}