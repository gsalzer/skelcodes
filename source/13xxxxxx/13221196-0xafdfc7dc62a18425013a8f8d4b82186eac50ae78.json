{"status":"1","message":"OK","result":[{"SourceCode":"// SPDX-License-Identifier: MIT\r\n\r\npragma solidity ^0.7.0;\r\n\r\nlibrary SafeMath\r\n{\r\n    function mul(uint256 a, uint256 b) internal pure returns (uint256)\r\n    {\r\n        uint256 c = a * b;\r\n        assert(a == 0 || c / a == b);\r\n\r\n        return c;\r\n    }\r\n\r\n    function div(uint256 a, uint256 b) internal pure returns (uint256)\r\n    {\r\n        uint256 c = a / b;\r\n\r\n        return c;\r\n    }\r\n\r\n    function sub(uint256 a, uint256 b) internal pure returns (uint256)\r\n    {\r\n        assert(b <= a);\r\n\r\n        return a - b;\r\n    }\r\n\r\n    function add(uint256 a, uint256 b) internal pure returns (uint256)\r\n    {\r\n        uint256 c = a + b;\r\n        assert(c >= a);\r\n\r\n        return c;\r\n    }\r\n}\r\n\r\ninterface ERC20\r\n{\r\n    function balanceOf(address _who) view external returns (uint256);\r\n    function transfer(address _to, uint256 _value) external returns (bool);\r\n    function transferFrom(address _from, address _to, uint256 _value) external returns (bool);\r\n    function allowance(address _owner, address _spender) view external returns (uint256);\r\n}\r\n\r\ncontract TokenDrop\r\n{\r\n    using SafeMath for uint256;\r\n\r\n    string constant internal ERROR_VALUE_NOT_VALID             = 'Reason: Value must be greater than 0.';\r\n    string constant internal ERROR_BALANCE_NOT_ENOUGH          = 'Reason: Balance is not enough.';\r\n    string constant internal ERROR_TOKEN_ADDRESS_NOT_VALID     = 'Reason: Token address is not valid.';\r\n    string constant internal ERROR_NOT_VALID_RECEIVER_LIST     = 'Reason: Receiver list is not valid.';\r\n\r\n    address public owner;\r\n    uint256 deposit;\r\n\r\n    event Drop(address tokenAddress, address[] toList, uint256[] amountList);\r\n\r\n    constructor() payable\r\n    {\r\n        owner = msg.sender;\r\n    }\r\n\r\n    receive() external payable {}\r\n\r\n    fallback() external {}\r\n\r\n    function drop(address _tokenAddress, address[] calldata _toList, uint256[] calldata _amountList) external\r\n    {\r\n        require(_tokenAddress != address(0), ERROR_TOKEN_ADDRESS_NOT_VALID);\r\n        require(_toList.length == _amountList.length, ERROR_NOT_VALID_RECEIVER_LIST);\r\n\r\n        uint256 sumOfAmounts = 0;\r\n        for(uint256 i=0; i<_amountList.length; i++)\r\n        {\r\n            require(_amountList[i] != 0, ERROR_VALUE_NOT_VALID);\r\n\r\n            sumOfAmounts = sumOfAmounts.add(_amountList[i]);\r\n        }\r\n\r\n        ERC20 token = ERC20(_tokenAddress);\r\n        require(token.balanceOf(msg.sender) >= sumOfAmounts, ERROR_BALANCE_NOT_ENOUGH); // 발란스가 충분한지 체크\r\n\r\n        for(uint256 i=0; i<_toList.length; i++)\r\n        {\r\n            token.transferFrom(msg.sender, _toList[i], _amountList[i]);\r\n        }\r\n\r\n        emit Drop(_tokenAddress, _toList, _amountList);\r\n    }\r\n}","ABI":"[{\"inputs\":[],\"stateMutability\":\"payable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"tokenAddress\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"address[]\",\"name\":\"toList\",\"type\":\"address[]\"},{\"indexed\":false,\"internalType\":\"uint256[]\",\"name\":\"amountList\",\"type\":\"uint256[]\"}],\"name\":\"Drop\",\"type\":\"event\"},{\"stateMutability\":\"nonpayable\",\"type\":\"fallback\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_tokenAddress\",\"type\":\"address\"},{\"internalType\":\"address[]\",\"name\":\"_toList\",\"type\":\"address[]\"},{\"internalType\":\"uint256[]\",\"name\":\"_amountList\",\"type\":\"uint256[]\"}],\"name\":\"drop\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"stateMutability\":\"payable\",\"type\":\"receive\"}]","ContractName":"TokenDrop","CompilerVersion":"v0.7.0+commit.9e61f92b","OptimizationUsed":"1","Runs":"200","ConstructorArguments":"","EVMVersion":"Default","Library":"","LicenseType":"None","Proxy":"0","Implementation":"","SwarmSource":"ipfs://90d7f8b89a6bd4575a046138408647715bf1b2cb10a2d4a54f7472f81592c3d8"}]}