{"status":"1","message":"OK","result":[{"SourceCode":"{{\r\n  \"language\": \"Solidity\",\r\n  \"sources\": {\r\n    \"contracts/Kibble/Kibble.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\npragma solidity 0.8.4;\\n\\nimport { SafeMath } from '@openzeppelin/contracts/utils/math/SafeMath.sol';\\n\\nimport { ERC20 } from './open-zeppelin/ERC20.sol';\\nimport { IFTPAntiBot } from './interfaces/IFTPAntiBot.sol';\\n\\nimport { KibbleAccessControl } from './KibbleAccessControl.sol';\\nimport { KibbleBase } from './KibbleBase.sol';\\n\\nimport { IUniswapV2Router02 } from './interfaces/IUniswapV2Router.sol';\\nimport { IUniswapV2Factory } from './interfaces/IUniswapV2Factory.sol';\\n\\n//\\n//                                               `````\\n//                                       `.-/+oosssssssoo+/:.`\\n//                                   `:+syyso++/////////++osyyso:.\\n//                                .+yhs+/:::::::::::::::::::://oshy+.\\n//                             `/yhs/:::::://///////////////:::::/+ohy/`\\n//                           `+hy+:::://///++osso++++++++oo++////:::/+yh+.\\n//                          /dh+:::/++/+osyhhhhhs+/////+yhhhyyo++++/::/+yh+`\\n//                        .yms::/oo+++syhhhhhhhhs+////+yhhhhhhhhys++++/:/ohy-\\n//                       :dd+::oyo++++hhhhhhhhhhs+///+yhhhhhhhhhhho+++o+//+yh/\\n//                      /mh/:/ys+++//+hhhhhhhhhhs++++yhhhhhhhhhhhs+/++oso///sd+\\n//                     /mh::+ys++////+hhhhhhhhhhs+++yhhhhhhhhhhhs+////+oss+//sd+\\n//                    -dd/:+ys++/////+hhhhhhhhhhy++yhhhhhhhhhhhs+//////+osy+//yd:\\n//                    ym+:/yy+o//////+hhhhhhhhhhyoyhhhhhhhhhhhs+////////+sys+/+hh`\\n//                   :my::oh/o///////+hhhhhhhhhhyyhhhhhhhhhhho+//////////osho//sd+\\n//                   ym+:/ys++///////+hhhhhhhhhhhhhhhhhhhhhho+////////////syy+/+hh\\n//                  `dm::+d+o////////+hhhhhhhhhhhhhhhhhhhhho+/////////////ssh+//hd.\\n//                  .md::oh/o////////+hhhhhhhhhhhhhhhhhhhho+//////////////oyho//ym-\\n//                  .mh::oh/o////////+hhhhhhhhhhhhhhhhhhhho+//////ydho////oyho//ym:\\n//                  .dd::od/o////////+hhhhhhhhhhhhhhhhhhhhho+////+mmms////osh+//ym.\\n//                   hm/:/hoo////////+hhhhhhhhhhhhhhhhhhhhhhs+////+o+/////ssy+/+hh`\\n//                   /ms::sh/o///////+hhhhhhhhhhhhhhhhhhhhhhhs+//////////+sho//sdo\\n//                   `hm/:/yo++//////+hhhhhhhhhhyshhhhhhhhhhhhs+/////////ssy+/+hd.\\n//                    :mh::+h+++/////+hhhhhhhhhhy+ohhhhhhhhhhhhs+///////osy+//sd+\\n//                     oms::oho++////+hhhhhhhhhhy++oyhhhhhhhhhhhy+////+osy+//ohs\\n//                     `oms::+yo++///+hhhhhhhhhhs+++oyhhhhhhhhhhhy+//+oss+//ohs`\\n//                       omy/:/ss+++/+hhhhhhhhhhs+//+oyhhhhhhhhhhhy++oo+///oho`\\n//                        :dd+::+ss++oyhhhhhhhhhs+////+yhhhhhhhhhyo+o+///+sh/\\n//                         .sdy/::+oo++osyhhhhhhs+/////+yhhhhyyo+++/:://oys.\\n//                           -ydy/::::///++osyyys//////++sso++///::://+yy:\\n//                             -ods/::::::::///////////////::::::://oys-\\n//                               `/syo//:::::-------------::::///oys/`\\n//                                  `:+sss+/:::::::::::::///+osso:`\\n//                                      `.:+oooosoooooooooo+:-`\\n//                                            `````.`````\\n//\\n/// @notice Kibble the main utility token of the Sanshu eco-system.\\ncontract Kibble is KibbleBase {\\n  using SafeMath for uint256;\\n  /// erc20 meta\\n  string internal constant NAME = 'Kibble Token';\\n  string internal constant SYMBOL = 'KIBBLE';\\n  uint8 internal constant DECIMALS = 18;\\n  uint256 internal constant MIN_TOTAL_SUPPLY = 250 * 10**6 * 10**18;\\n\\n  bytes public constant EIP712_REVISION = bytes('1');\\n  bytes32 internal constant EIP712_DOMAIN =\\n    keccak256(\\n      'EIP712Domain(string name,string version,uint256 chainId,address verifyingContract)'\\n    );\\n  bytes32 public constant PERMIT_TYPEHASH =\\n    keccak256(\\n      'Permit(address owner,address spender,uint256 value,uint256 nonce,uint256 deadline)'\\n    );\\n\\n  bytes32 public DOMAIN_SEPARATOR =\\n  keccak256(\\n    abi.encode(\\n      EIP712_DOMAIN,\\n      keccak256(bytes(NAME)),\\n      keccak256(EIP712_REVISION),\\n      block.chainid,\\n      address(this)\\n    )\\n  );\\n\\n  /// max supply\\n  uint256 public maxSupply = 0;\\n\\n  /// anti-bot state\\n  IFTPAntiBot private antiBot;\\n  bool public antiBotEnabled = false;\\n\\n  /// uniswap state\\n  IUniswapV2Router02 public uniswapV2Router;\\n  address public uniswapV2Pair;\\n\\n  /// track pair addresses so that transfers can be subject to\\n  /// fees for swaps\\n  mapping(address => bool) public tokenPairs;\\n\\n  /// track sell contracts\\n  mapping(address => bool) public sellContracts;\\n\\n  /// fee state\\n  bool public feeEnabled = false;\\n  uint256 public feeResetCooldown = 1 days;\\n  address public redistributionPolicyAddress;\\n  mapping(address => bool) public excluded;\\n  mapping(address => uint256) private _firstSell;\\n  mapping(address => uint256) private _sellCount;\\n  uint256 private _taxFee = 5;\\n  uint256 private _feeMultiplier = 5;\\n\\n  /// governance state\\n  mapping(address => uint256) public _nonces;\\n  mapping(address => uint256) internal _votingCheckpointsCounts;\\n  mapping(address => address) internal _votingDelegates;\\n  mapping(address => mapping(uint256 => Checkpoint)) public votingCheckpoints;\\n  mapping(address => mapping(uint256 => Checkpoint))\\n    internal _propositionPowerCheckpoints;\\n  mapping(address => uint256) internal _propositionPowerCheckpointsCounts;\\n  mapping(address => address) internal _propositionPowerDelegates;\\n\\n  // events\\n  event LogTokenPair(address pair, bool included);\\n  event LogSellContracts(address targetAddress, bool included);\\n  event LogExcluded(address targetAddress, bool included);\\n\\n  /// @notice main constructor for token\\n  /// @param _antiBotAddress address for anti-bot protection https://antibot.fairtokenproject.com/\\n  /// @param _uniswapRouterAddress address for uniswap router\\n  constructor(address _antiBotAddress, address _uniswapRouterAddress)\\n    ERC20(NAME, SYMBOL)\\n  {\\n    /// set up antiBot\\n    IFTPAntiBot _antiBot = IFTPAntiBot(_antiBotAddress);\\n    antiBot = _antiBot;\\n\\n    /// initiate new pair for KIBBLE/WETH\\n    IUniswapV2Router02 _uniswapV2Router = IUniswapV2Router02(\\n      _uniswapRouterAddress\\n    );\\n    address _uniswapV2Pair = IUniswapV2Factory(_uniswapV2Router.factory())\\n    .createPair(address(this), _uniswapV2Router.WETH());\\n\\n    uniswapV2Router = _uniswapV2Router;\\n    uniswapV2Pair = _uniswapV2Pair;\\n\\n    _setTrackedPair(_uniswapV2Pair, true);\\n    _setSellContracts(_uniswapRouterAddress, true);\\n  }\\n\\n  /// @notice sets max supply\\n  /// @param _amount The amount that is max supply\\n  function setMaxSupply(uint256 _amount) external virtual onlyOwner {\\n    require(_amount > _totalSupply, \\\"Kibble: current supply is greater than inputed amount\\\");\\n    require(maxSupply == 0, \\\"Kibble: cannot set max supply again\\\");\\n    maxSupply = _amount;\\n  }\\n\\n  /// @notice mints an amount to an account only can be ran by minter\\n  /// @param _recipient The address to mint to\\n  /// @param _amount The amount to mint\\n  function mint(address _recipient, uint256 _amount)\\n    external\\n    virtual\\n    onlyMinter\\n  {\\n    require(\\n      maxSupply == 0 || maxSupply > _totalSupply,\\n      'Kibble: Max supply reached'\\n    );\\n    uint256 safeAmount = maxSupply == 0 || _amount + _totalSupply <= maxSupply\\n      ? _amount\\n      : maxSupply - _totalSupply;\\n\\n    _mint(_recipient, safeAmount);\\n  }\\n\\n  /// @notice burns an amount to an account only can be ran by burner\\n  /// @param _sender The address to burn from\\n  /// @param _amount The amount to burn\\n  function burn(address _sender, uint256 _amount) external virtual onlyBurner {\\n    _burn(_sender, _amount);\\n  }\\n\\n  /// @notice implements the permit function\\n  /// @param _owner the owner of the funds\\n  /// @param _spender the _spender\\n  /// @param _value the amount\\n  /// @param _deadline the deadline timestamp, type(uint256).max for no deadline\\n  /// @param _v signature param\\n  /// @param _r signature param\\n  /// @param _s signature param\\n  function permit(\\n    address _owner,\\n    address _spender,\\n    uint256 _value,\\n    uint256 _deadline,\\n    uint8 _v,\\n    bytes32 _r,\\n    bytes32 _s\\n  ) external {\\n    require(_owner != address(0), 'Kibble: owner invalid');\\n    require(block.timestamp <= _deadline, 'Kibble: invalid deadline');\\n    uint256 currentValidNonce = _nonces[_owner];\\n    bytes32 digest = keccak256(\\n      abi.encodePacked(\\n        '\\\\x19\\\\x01',\\n        DOMAIN_SEPARATOR,\\n        keccak256(\\n          abi.encode(\\n            PERMIT_TYPEHASH,\\n            _owner,\\n            _spender,\\n            _value,\\n            currentValidNonce,\\n            _deadline\\n          )\\n        )\\n      )\\n    );\\n\\n    require(\\n      _owner == ecrecover(digest, _v, _r, _s),\\n      'Kibble: invalid signature'\\n    );\\n    _nonces[_owner] = currentValidNonce.add(1);\\n    _approve(_owner, _spender, _value);\\n  }\\n\\n  /// @notice Delegates power from signatory to `delegatee`\\n  /// @param _delegatee The address to delegate votes to\\n  /// @param _power the power of delegation\\n  /// @param _nonce The contract state required to match the signature\\n  /// @param _expiry The time at which to expire the signature\\n  /// @param _v The recovery byte of the signature\\n  /// @param _r Half of the ECDSA signature pair\\n  /// @param _s Half of the ECDSA signature pair\\n  function delegateByPowerBySig(\\n    address _delegatee,\\n    DelegationPower _power,\\n    uint256 _nonce,\\n    uint256 _expiry,\\n    uint8 _v,\\n    bytes32 _r,\\n    bytes32 _s\\n  ) external {\\n    bytes32 structHash = keccak256(\\n      abi.encode(\\n        DELEGATE_BY_POWER_TYPEHASH,\\n        _delegatee,\\n        uint256(_power),\\n        _nonce,\\n        _expiry\\n      )\\n    );\\n    bytes32 digest = keccak256(\\n      abi.encodePacked('\\\\x19\\\\x01', DOMAIN_SEPARATOR, structHash)\\n    );\\n    address signatory = ecrecover(digest, _v, _r, _s);\\n    require(\\n      signatory != address(0),\\n      'Kibble: delegateByPowerBySig: invalid signature'\\n    );\\n    require(\\n      _nonce == _nonces[signatory]++,\\n      'Kibble: delegateByPowerBySig: invalid nonce'\\n    );\\n    require(\\n      block.timestamp <= _expiry,\\n      'Kibble: delegateByPowerBySig: invalid expiration'\\n    );\\n    _delegateByPower(signatory, _delegatee, _power);\\n  }\\n\\n  /// @notice Delegates power from signatory to `_delegatee`\\n  /// @param _delegatee The address to delegate votes to\\n  /// @param _nonce The contract state required to match the signature\\n  /// @param _expiry The time at which to expire the signature\\n  /// @param _v The recovery byte of the signature\\n  /// @param _r Half of the ECDSA signature pair\\n  /// @param _s Half of the ECDSA signature pair\\n  function delegateBySig(\\n    address _delegatee,\\n    uint256 _nonce,\\n    uint256 _expiry,\\n    uint8 _v,\\n    bytes32 _r,\\n    bytes32 _s\\n  ) external {\\n    bytes32 structHash = keccak256(\\n      abi.encode(DELEGATE_TYPEHASH, _delegatee, _nonce, _expiry)\\n    );\\n    bytes32 digest = keccak256(\\n      abi.encodePacked('\\\\x19\\\\x01', DOMAIN_SEPARATOR, structHash)\\n    );\\n    address signatory = ecrecover(digest, _v, _r, _s);\\n    require(\\n      signatory != address(0),\\n      'Kibble: delegateByPowerBySig: invalid signature'\\n    );\\n    require(\\n      _nonce == _nonces[signatory]++,\\n      'Kibble: delegateByPowerBySig: invalid nonce'\\n    );\\n    require(\\n      block.timestamp <= _expiry,\\n      'Kibble: delegateByPowerBySig: invalid expiration'\\n    );\\n\\n    _delegateByPower(signatory, _delegatee, DelegationPower.Voting);\\n    _delegateByPower(signatory, _delegatee, DelegationPower.Proposition);\\n  }\\n\\n  /// @notice transfers tokens to recipient\\n  /// @param _recipient who the tokens are going to\\n  /// @param _amount amount of tokens\\n  function transfer(address _recipient, uint256 _amount)\\n    public\\n    virtual\\n    override\\n    returns (bool success_)\\n  {\\n    require(_recipient != address(0), 'Kibble: transfer to the zero address');\\n\\n    address sender = _msgSender();\\n\\n    if (_amount == 0) {\\n      super._transfer(sender, _recipient, 0);\\n      return false;\\n    }\\n\\n    if (antiBotEnabled) {\\n      if (tokenPairs[_recipient]) {\\n        require(\\n          !antiBot.scanAddress(sender, _recipient, tx.origin),\\n          'Kibble: no bots allowed'\\n        );\\n      }\\n    }\\n\\n    uint256 amountMinusFees = _removeFees(sender, _recipient, _amount);\\n\\n    _transfer(sender, _recipient, amountMinusFees);\\n\\n    _resetFee();\\n\\n    success_ = true;\\n  }\\n\\n  /// @notice transfers tokens from sender to recipient\\n  /// @param _sender who the tokens are from\\n  /// @param _recipient who the tokens are going to\\n  /// @param _amount amount of tokens\\n  function transferFrom(\\n    address _sender,\\n    address _recipient,\\n    uint256 _amount\\n  ) public virtual override returns (bool success_) {\\n    require(_sender != address(0), 'Kibble: transfer from the zero address');\\n    require(_recipient != address(0), 'Kibble: transfer to the zero address');\\n\\n    if (_amount == 0) {\\n      _transfer(_sender, _recipient, 0);\\n      return false;\\n    }\\n\\n    if (antiBotEnabled) {\\n      if (tokenPairs[_sender]) {\\n        require(\\n          !antiBot.scanAddress(_recipient, _sender, tx.origin),\\n          'Kibble: no bots allowed'\\n        );\\n      }\\n      if (tokenPairs[_recipient]) {\\n        require(\\n          !antiBot.scanAddress(_sender, _recipient, tx.origin),\\n          'Kibble: no bots allowed'\\n        );\\n      }\\n    }\\n\\n    uint256 amountMinusFees = _removeFees(_sender, _recipient, _amount);\\n\\n    _transfer(_sender, _recipient, amountMinusFees);\\n\\n    _resetFee();\\n\\n    success_ = true;\\n  }\\n\\n  /// @notice sets new redistribution address\\n  /// @param _address address for redistribution policy\\n  function setRedistributionPolicyAddress(address _address) external onlyOwner {\\n    require(_address != address(0), 'Kibble: address cannot be zero address');\\n    require(_isContract(_address), 'Kibble: address has to be a contract');\\n\\n    if (redistributionPolicyAddress != address(0)) {\\n      delete excluded[redistributionPolicyAddress];\\n    }\\n\\n    redistributionPolicyAddress = _address;\\n    _setExcluded(_address, true);\\n  }\\n\\n  /// @notice enable fees to be sent to redistribution policy\\n  function enableFees() external onlyOwner {\\n    require(\\n      redistributionPolicyAddress != address(0),\\n      'Kibble: redistribution policy not set'\\n    );\\n    require(!feeEnabled, 'Kibble: fee already enabled');\\n    feeEnabled = true;\\n  }\\n\\n  /// @notice disable fees to be sent to redistribution policy\\n  function disableFees() external onlyOwner {\\n    require(feeEnabled, 'Kibble: fee already disabled');\\n    feeEnabled = false;\\n  }\\n\\n  /// @notice set a new tax fee\\n  /// @param _fee the new fee\\n  function setTaxFee(uint256 _fee) external onlyOwner {\\n    _taxFee = _fee;\\n  }\\n\\n  /// @notice set a new fee multiplier\\n  /// @param _multiplier the new multiplier\\n  function setFeeMultiplier(uint256 _multiplier) external onlyOwner {\\n    _feeMultiplier = _multiplier;\\n  }\\n\\n  /// @notice set cool down for fee reset\\n  /// @param _cooldown cool down in days\\n  function setFeeResetCooldown(uint256 _cooldown) external onlyOwner {\\n    feeResetCooldown = _cooldown;\\n  }\\n\\n  /// @notice set a pair to be included/excluded into antibot\\n  /// @param _pair the pair address\\n  /// @param _included if the pair is included or not\\n  function setTrackedPair(address _pair, bool _included) external onlyOwner {\\n    require(_pair != uniswapV2Pair, 'Kibble: og weth pair cannot be updated');\\n    require(_isContract(_pair), 'Kibble: address has to be a contract');\\n\\n    _setTrackedPair(_pair, _included);\\n  }\\n\\n  /// @notice set contract address to include in fees\\n  /// @param _targetAddress the address\\n  /// @param _included if the pair is included or not\\n  function setSellContracts(address _targetAddress, bool _included)\\n    external\\n    onlyOwner\\n  {\\n    require(\\n      _isContract(_targetAddress),\\n      'Kibble: address has to be a contract'\\n    );\\n    _setSellContracts(_targetAddress, _included);\\n  }\\n\\n  /// @notice set contract address to excluded from fees\\n  /// @param _targetAddress the address\\n  /// @param _included if the pair is included or not\\n  function setExcluded(address _targetAddress, bool _included)\\n    external\\n    onlyOwner\\n  {\\n    _setExcluded(_targetAddress, _included);\\n  }\\n\\n  /// @notice calculate fees for given user and send to redis\\n  /// @param _sender the amount of tokens being transferred\\n  /// @param _recipient the amount of tokens being transferred\\n  /// @param _amount the amount of tokens being transferred\\n  function _removeFees(\\n    address _sender,\\n    address _recipient,\\n    uint256 _amount\\n  ) internal returns (uint256 amount_) {\\n    if (!_includedInFee(_sender, _recipient)) return _amount;\\n\\n    _calcFee(_sender);\\n    uint256 fee = _amount.mul(_taxFee).div(100);\\n\\n    _balances[redistributionPolicyAddress] = _balances[\\n      redistributionPolicyAddress\\n    ]\\n    .add(fee);\\n\\n    amount_ = _amount.sub(fee);\\n\\n    emit Transfer(_sender, redistributionPolicyAddress, fee);\\n  }\\n\\n  /// @notice choose fee percentage and update reset time and tx counts\\n  /// @param _sender the amount of tokens being transferred\\n  function _calcFee(address _sender) internal {\\n    if (_firstSell[_sender] + feeResetCooldown < block.timestamp) {\\n      _sellCount[_sender] = 0;\\n    }\\n\\n    if (_sellCount[_sender] == 0) {\\n      _firstSell[_sender] = block.timestamp;\\n    }\\n\\n    if (_sellCount[_sender] < 4) {\\n      _sellCount[_sender]++;\\n    }\\n\\n    _taxFee = _sellCount[_sender].mul(_feeMultiplier);\\n  }\\n\\n  /// @notice Writes a checkpoint before any operation involving transfer of value: _transfer, _mint and _burn\\n  /// - On _transfer, it writes checkpoints for both \\\"from\\\" and \\\"to\\\"\\n  /// - On _mint, only for _recipient\\n  /// - On _burn, only for _sender\\n  /// @param _sender the from address\\n  /// @param _recipient the to address\\n  /// @param _amount the amount to transfer\\n  function _beforeTokenTransfer(\\n    address _sender,\\n    address _recipient,\\n    uint256 _amount\\n  ) internal override {\\n    address votingFromDelegatee = _getDelegatee(_sender, _votingDelegates);\\n    address votingToDelegatee = _getDelegatee(_recipient, _votingDelegates);\\n    uint256 fee = 0;\\n\\n    if (_includedInFee(_sender, _recipient)) {\\n      fee = _amount.mul(_taxFee).div(100);\\n    }\\n\\n    _moveDelegatesByPower(\\n      votingFromDelegatee,\\n      votingToDelegatee,\\n      _amount.add(fee),\\n      DelegationPower.Voting\\n    );\\n\\n    address propPowerFromDelegatee = _getDelegatee(\\n      _sender,\\n      _propositionPowerDelegates\\n    );\\n    address propPowerToDelegatee = _getDelegatee(\\n      _recipient,\\n      _propositionPowerDelegates\\n    );\\n\\n    _moveDelegatesByPower(\\n      propPowerFromDelegatee,\\n      propPowerToDelegatee,\\n      _amount.add(fee),\\n      DelegationPower.Proposition\\n    );\\n  }\\n\\n  /// @notice get delegation data by power\\n  /// @param _power the power querying by from\\n  function _getDelegationDataByPower(DelegationPower _power)\\n    internal\\n    view\\n    override\\n    returns (\\n      mapping(address => mapping(uint256 => Checkpoint)) storage checkpoints_,\\n      mapping(address => uint256) storage checkpointsCount_,\\n      mapping(address => address) storage delegates_\\n    )\\n  {\\n    if (_power == DelegationPower.Voting) {\\n      checkpoints_ = votingCheckpoints;\\n      checkpointsCount_ = _votingCheckpointsCounts;\\n      delegates_ = _votingDelegates;\\n    } else {\\n      checkpoints_ = _propositionPowerCheckpoints;\\n      checkpointsCount_ = _propositionPowerCheckpointsCounts;\\n      delegates_ = _propositionPowerDelegates;\\n    }\\n  }\\n\\n  /// @notice set a pair to be included/excluded into fees\\n  /// @param _pair the pair address\\n  /// @param _included if the pair is included or not\\n  function _setTrackedPair(address _pair, bool _included) internal {\\n    require(\\n      tokenPairs[_pair] != _included,\\n      'Kibble: pair is already tracked with included state'\\n    );\\n\\n    tokenPairs[_pair] = _included;\\n    emit LogTokenPair(_pair, _included);\\n  }\\n\\n  /// @notice set an address for selling contracts\\n  /// @param _targetAddress the address\\n  /// @param _included if the pair is included or not\\n  function _setSellContracts(address _targetAddress, bool _included) internal {\\n    require(\\n      sellContracts[_targetAddress] != _included,\\n      'Kibble: This address is already tracked with included state'\\n    );\\n\\n    sellContracts[_targetAddress] = _included;\\n    emit LogSellContracts(_targetAddress, _included);\\n  }\\n\\n  /// @notice set an address to be excluded from fees\\n  /// @param _targetAddress the address\\n  /// @param _included if the pair is included or not\\n  function _setExcluded(address _targetAddress, bool _included) internal {\\n    require(\\n      excluded[_targetAddress] != _included,\\n      'Kibble: This address is already tracked with included state'\\n    );\\n\\n    excluded[_targetAddress] = _included;\\n    emit LogExcluded(_targetAddress, _included);\\n  }\\n\\n  /// @notice reset the fee\\n  function _resetFee() private {\\n    _taxFee = 5;\\n  }\\n\\n  /// @notice check to included from fees\\n  /// @param _sender the amount of tokens being transferred\\n  /// @param _recipient the amount of tokens being transferred\\n  function _includedInFee(address _sender, address _recipient)\\n    private\\n    view\\n    returns (bool included_)\\n  {\\n    included_ =\\n      feeEnabled &&\\n      (sellContracts[_recipient] || tokenPairs[_recipient]) &&\\n      !excluded[_sender];\\n  }\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/utils/math/SafeMath.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\n// CAUTION\\n// This version of SafeMath should only be used with Solidity 0.8 or later,\\n// because it relies on the compiler's built in overflow checks.\\n\\n/**\\n * @dev Wrappers over Solidity's arithmetic operations.\\n *\\n * NOTE: `SafeMath` is no longer needed starting with Solidity 0.8. The compiler\\n * now has built in overflow checking.\\n */\\nlibrary SafeMath {\\n    /**\\n     * @dev Returns the addition of two unsigned integers, with an overflow flag.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function tryAdd(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        unchecked {\\n            uint256 c = a + b;\\n            if (c < a) return (false, 0);\\n            return (true, c);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the substraction of two unsigned integers, with an overflow flag.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function trySub(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        unchecked {\\n            if (b > a) return (false, 0);\\n            return (true, a - b);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the multiplication of two unsigned integers, with an overflow flag.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function tryMul(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        unchecked {\\n            // Gas optimization: this is cheaper than requiring 'a' not being zero, but the\\n            // benefit is lost if 'b' is also tested.\\n            // See: https://github.com/OpenZeppelin/openzeppelin-contracts/pull/522\\n            if (a == 0) return (true, 0);\\n            uint256 c = a * b;\\n            if (c / a != b) return (false, 0);\\n            return (true, c);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the division of two unsigned integers, with a division by zero flag.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function tryDiv(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        unchecked {\\n            if (b == 0) return (false, 0);\\n            return (true, a / b);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the remainder of dividing two unsigned integers, with a division by zero flag.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function tryMod(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        unchecked {\\n            if (b == 0) return (false, 0);\\n            return (true, a % b);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the addition of two unsigned integers, reverting on\\n     * overflow.\\n     *\\n     * Counterpart to Solidity's `+` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Addition cannot overflow.\\n     */\\n    function add(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a + b;\\n    }\\n\\n    /**\\n     * @dev Returns the subtraction of two unsigned integers, reverting on\\n     * overflow (when the result is negative).\\n     *\\n     * Counterpart to Solidity's `-` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Subtraction cannot overflow.\\n     */\\n    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a - b;\\n    }\\n\\n    /**\\n     * @dev Returns the multiplication of two unsigned integers, reverting on\\n     * overflow.\\n     *\\n     * Counterpart to Solidity's `*` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Multiplication cannot overflow.\\n     */\\n    function mul(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a * b;\\n    }\\n\\n    /**\\n     * @dev Returns the integer division of two unsigned integers, reverting on\\n     * division by zero. The result is rounded towards zero.\\n     *\\n     * Counterpart to Solidity's `/` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - The divisor cannot be zero.\\n     */\\n    function div(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a / b;\\n    }\\n\\n    /**\\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\\n     * reverting when dividing by zero.\\n     *\\n     * Counterpart to Solidity's `%` operator. This function uses a `revert`\\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\\n     * invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Requirements:\\n     *\\n     * - The divisor cannot be zero.\\n     */\\n    function mod(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a % b;\\n    }\\n\\n    /**\\n     * @dev Returns the subtraction of two unsigned integers, reverting with custom message on\\n     * overflow (when the result is negative).\\n     *\\n     * CAUTION: This function is deprecated because it requires allocating memory for the error\\n     * message unnecessarily. For custom revert reasons use {trySub}.\\n     *\\n     * Counterpart to Solidity's `-` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Subtraction cannot overflow.\\n     */\\n    function sub(\\n        uint256 a,\\n        uint256 b,\\n        string memory errorMessage\\n    ) internal pure returns (uint256) {\\n        unchecked {\\n            require(b <= a, errorMessage);\\n            return a - b;\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the integer division of two unsigned integers, reverting with custom message on\\n     * division by zero. The result is rounded towards zero.\\n     *\\n     * Counterpart to Solidity's `/` operator. Note: this function uses a\\n     * `revert` opcode (which leaves remaining gas untouched) while Solidity\\n     * uses an invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Requirements:\\n     *\\n     * - The divisor cannot be zero.\\n     */\\n    function div(\\n        uint256 a,\\n        uint256 b,\\n        string memory errorMessage\\n    ) internal pure returns (uint256) {\\n        unchecked {\\n            require(b > 0, errorMessage);\\n            return a / b;\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\\n     * reverting with custom message when dividing by zero.\\n     *\\n     * CAUTION: This function is deprecated because it requires allocating memory for the error\\n     * message unnecessarily. For custom revert reasons use {tryMod}.\\n     *\\n     * Counterpart to Solidity's `%` operator. This function uses a `revert`\\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\\n     * invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Requirements:\\n     *\\n     * - The divisor cannot be zero.\\n     */\\n    function mod(\\n        uint256 a,\\n        uint256 b,\\n        string memory errorMessage\\n    ) internal pure returns (uint256) {\\n        unchecked {\\n            require(b > 0, errorMessage);\\n            return a % b;\\n        }\\n    }\\n}\\n\"\r\n    },\r\n    \"contracts/Kibble/open-zeppelin/ERC20.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\nimport '@openzeppelin/contracts/token/ERC20/IERC20.sol';\\nimport '@openzeppelin/contracts/token/ERC20/extensions/IERC20Metadata.sol';\\nimport '@openzeppelin/contracts/utils/Context.sol';\\n\\n/**\\n * @dev Implementation of the {IERC20} interface.\\n *\\n * This implementation is agnostic to the way tokens are created. This means\\n * that a supply mechanism has to be added in a derived contract using {_mint}.\\n * For a generic mechanism see {ERC20PresetMinterPauser}.\\n *\\n * TIP: For a detailed writeup see our guide\\n * https://forum.zeppelin.solutions/t/how-to-implement-erc20-supply-mechanisms/226[How\\n * to implement supply mechanisms].\\n *\\n * We have followed general OpenZeppelin guidelines: functions revert instead\\n * of returning `false` on failure. This behavior is nonetheless conventional\\n * and does not conflict with the expectations of ERC20 applications.\\n *\\n * Additionally, an {Approval} event is emitted on calls to {transferFrom}.\\n * This allows applications to reconstruct the allowance for all accounts just\\n * by listening to said events. Other implementations of the EIP may not emit\\n * these events, as it isn't required by the specification.\\n *\\n * Finally, the non-standard {decreaseAllowance} and {increaseAllowance}\\n * functions have been added to mitigate the well-known issues around setting\\n * allowances. See {IERC20-approve}.\\n */\\ncontract ERC20 is Context, IERC20, IERC20Metadata {\\n  mapping(address => uint256) internal _balances;\\n\\n  mapping(address => mapping(address => uint256)) internal _allowances;\\n\\n  uint256 internal _totalSupply;\\n\\n  string internal _name;\\n  string internal _symbol;\\n\\n  /**\\n   * @dev Sets the values for {name} and {symbol}.\\n   *\\n   * The default value of {decimals} is 18. To select a different value for\\n   * {decimals} you should overload it.\\n   *\\n   * All two of these values are immutable: they can only be set once during\\n   * construction.\\n   */\\n  constructor(string memory name_, string memory symbol_) {\\n    _name = name_;\\n    _symbol = symbol_;\\n  }\\n\\n  /**\\n   * @dev Returns the name of the token.\\n   */\\n  function name() public view virtual override returns (string memory) {\\n    return _name;\\n  }\\n\\n  /**\\n   * @dev Returns the symbol of the token, usually a shorter version of the\\n   * name.\\n   */\\n  function symbol() public view virtual override returns (string memory) {\\n    return _symbol;\\n  }\\n\\n  /**\\n   * @dev Returns the number of decimals used to get its user representation.\\n   * For example, if `decimals` equals `2`, a balance of `505` tokens should\\n   * be displayed to a user as `5,05` (`505 / 10 ** 2`).\\n   *\\n   * Tokens usually opt for a value of 18, imitating the relationship between\\n   * Ether and Wei. This is the value {ERC20} uses, unless this function is\\n   * overridden;\\n   *\\n   * NOTE: This information is only used for _display_ purposes: it in\\n   * no way affects any of the arithmetic of the contract, including\\n   * {IERC20-balanceOf} and {IERC20-transfer}.\\n   */\\n  function decimals() public view virtual override returns (uint8) {\\n    return 18;\\n  }\\n\\n  /**\\n   * @dev See {IERC20-totalSupply}.\\n   */\\n  function totalSupply() public view virtual override returns (uint256) {\\n    return _totalSupply;\\n  }\\n\\n  /**\\n   * @dev See {IERC20-balanceOf}.\\n   */\\n  function balanceOf(address account)\\n    public\\n    view\\n    virtual\\n    override\\n    returns (uint256)\\n  {\\n    return _balances[account];\\n  }\\n\\n  /**\\n   * @dev See {IERC20-transfer}.\\n   *\\n   * Requirements:\\n   *\\n   * - `recipient` cannot be the zero address.\\n   * - the caller must have a balance of at least `amount`.\\n   */\\n  function transfer(address recipient, uint256 amount)\\n    public\\n    virtual\\n    override\\n    returns (bool)\\n  {\\n    _transfer(_msgSender(), recipient, amount);\\n    return true;\\n  }\\n\\n  /**\\n   * @dev See {IERC20-allowance}.\\n   */\\n  function allowance(address owner, address spender)\\n    public\\n    view\\n    virtual\\n    override\\n    returns (uint256)\\n  {\\n    return _allowances[owner][spender];\\n  }\\n\\n  /**\\n   * @dev See {IERC20-approve}.\\n   *\\n   * Requirements:\\n   *\\n   * - `spender` cannot be the zero address.\\n   */\\n  function approve(address spender, uint256 amount)\\n    public\\n    virtual\\n    override\\n    returns (bool)\\n  {\\n    _approve(_msgSender(), spender, amount);\\n    return true;\\n  }\\n\\n  /**\\n   * @dev See {IERC20-transferFrom}.\\n   *\\n   * Emits an {Approval} event indicating the updated allowance. This is not\\n   * required by the EIP. See the note at the beginning of {ERC20}.\\n   *\\n   * Requirements:\\n   *\\n   * - `sender` and `recipient` cannot be the zero address.\\n   * - `sender` must have a balance of at least `amount`.\\n   * - the caller must have allowance for ``sender``'s tokens of at least\\n   * `amount`.\\n   */\\n  function transferFrom(\\n    address sender,\\n    address recipient,\\n    uint256 amount\\n  ) public virtual override returns (bool) {\\n    _transfer(sender, recipient, amount);\\n\\n    uint256 currentAllowance = _allowances[sender][_msgSender()];\\n    require(\\n      currentAllowance >= amount,\\n      'ERC20: transfer amount exceeds allowance'\\n    );\\n    unchecked {\\n      _approve(sender, _msgSender(), currentAllowance - amount);\\n    }\\n\\n    return true;\\n  }\\n\\n  /**\\n   * @dev Atomically increases the allowance granted to `spender` by the caller.\\n   *\\n   * This is an alternative to {approve} that can be used as a mitigation for\\n   * problems described in {IERC20-approve}.\\n   *\\n   * Emits an {Approval} event indicating the updated allowance.\\n   *\\n   * Requirements:\\n   *\\n   * - `spender` cannot be the zero address.\\n   */\\n  function increaseAllowance(address spender, uint256 addedValue)\\n    public\\n    virtual\\n    returns (bool)\\n  {\\n    _approve(\\n      _msgSender(),\\n      spender,\\n      _allowances[_msgSender()][spender] + addedValue\\n    );\\n    return true;\\n  }\\n\\n  /**\\n   * @dev Atomically decreases the allowance granted to `spender` by the caller.\\n   *\\n   * This is an alternative to {approve} that can be used as a mitigation for\\n   * problems described in {IERC20-approve}.\\n   *\\n   * Emits an {Approval} event indicating the updated allowance.\\n   *\\n   * Requirements:\\n   *\\n   * - `spender` cannot be the zero address.\\n   * - `spender` must have allowance for the caller of at least\\n   * `subtractedValue`.\\n   */\\n  function decreaseAllowance(address spender, uint256 subtractedValue)\\n    public\\n    virtual\\n    returns (bool)\\n  {\\n    uint256 currentAllowance = _allowances[_msgSender()][spender];\\n    require(\\n      currentAllowance >= subtractedValue,\\n      'ERC20: decreased allowance below zero'\\n    );\\n    unchecked {\\n      _approve(_msgSender(), spender, currentAllowance - subtractedValue);\\n    }\\n\\n    return true;\\n  }\\n\\n  /**\\n   * @dev Moves `amount` of tokens from `sender` to `recipient`.\\n   *\\n   * This internal function is equivalent to {transfer}, and can be used to\\n   * e.g. implement automatic token fees, slashing mechanisms, etc.\\n   *\\n   * Emits a {Transfer} event.\\n   *\\n   * Requirements:\\n   *\\n   * - `sender` cannot be the zero address.\\n   * - `recipient` cannot be the zero address.\\n   * - `sender` must have a balance of at least `amount`.\\n   */\\n  function _transfer(\\n    address sender,\\n    address recipient,\\n    uint256 amount\\n  ) internal virtual {\\n    require(sender != address(0), 'ERC20: transfer from the zero address');\\n    require(recipient != address(0), 'ERC20: transfer to the zero address');\\n\\n    _beforeTokenTransfer(sender, recipient, amount);\\n\\n    uint256 senderBalance = _balances[sender];\\n    require(senderBalance >= amount, 'ERC20: transfer amount exceeds balance');\\n    unchecked {\\n      _balances[sender] = senderBalance - amount;\\n    }\\n    _balances[recipient] += amount;\\n\\n    emit Transfer(sender, recipient, amount);\\n\\n    _afterTokenTransfer(sender, recipient, amount);\\n  }\\n\\n  /** @dev Creates `amount` tokens and assigns them to `account`, increasing\\n   * the total supply.\\n   *\\n   * Emits a {Transfer} event with `from` set to the zero address.\\n   *\\n   * Requirements:\\n   *\\n   * - `account` cannot be the zero address.\\n   */\\n  function _mint(address account, uint256 amount) internal virtual {\\n    require(account != address(0), 'ERC20: mint to the zero address');\\n\\n    _beforeTokenTransfer(address(0), account, amount);\\n\\n    _totalSupply += amount;\\n    _balances[account] += amount;\\n    emit Transfer(address(0), account, amount);\\n\\n    _afterTokenTransfer(address(0), account, amount);\\n  }\\n\\n  /**\\n   * @dev Destroys `amount` tokens from `account`, reducing the\\n   * total supply.\\n   *\\n   * Emits a {Transfer} event with `to` set to the zero address.\\n   *\\n   * Requirements:\\n   *\\n   * - `account` cannot be the zero address.\\n   * - `account` must have at least `amount` tokens.\\n   */\\n  function _burn(address account, uint256 amount) internal virtual {\\n    require(account != address(0), 'ERC20: burn from the zero address');\\n\\n    _beforeTokenTransfer(account, address(0), amount);\\n\\n    uint256 accountBalance = _balances[account];\\n    require(accountBalance >= amount, 'ERC20: burn amount exceeds balance');\\n    unchecked {\\n      _balances[account] = accountBalance - amount;\\n    }\\n    _totalSupply -= amount;\\n\\n    emit Transfer(account, address(0), amount);\\n\\n    _afterTokenTransfer(account, address(0), amount);\\n  }\\n\\n  /**\\n   * @dev Sets `amount` as the allowance of `spender` over the `owner` s tokens.\\n   *\\n   * This internal function is equivalent to `approve`, and can be used to\\n   * e.g. set automatic allowances for certain subsystems, etc.\\n   *\\n   * Emits an {Approval} event.\\n   *\\n   * Requirements:\\n   *\\n   * - `owner` cannot be the zero address.\\n   * - `spender` cannot be the zero address.\\n   */\\n  function _approve(\\n    address owner,\\n    address spender,\\n    uint256 amount\\n  ) internal virtual {\\n    require(owner != address(0), 'ERC20: approve from the zero address');\\n    require(spender != address(0), 'ERC20: approve to the zero address');\\n\\n    _allowances[owner][spender] = amount;\\n    emit Approval(owner, spender, amount);\\n  }\\n\\n  /**\\n   * @dev Hook that is called before any transfer of tokens. This includes\\n   * minting and burning.\\n   *\\n   * Calling conditions:\\n   *\\n   * - when `from` and `to` are both non-zero, `amount` of ``from``'s tokens\\n   * will be transferred to `to`.\\n   * - when `from` is zero, `amount` tokens will be minted for `to`.\\n   * - when `to` is zero, `amount` of ``from``'s tokens will be burned.\\n   * - `from` and `to` are never both zero.\\n   *\\n   * To learn more about hooks, head to xref:ROOT:extending-contracts.adoc#using-hooks[Using Hooks].\\n   */\\n  function _beforeTokenTransfer(\\n    address from,\\n    address to,\\n    uint256 amount\\n  ) internal virtual {}\\n\\n  /**\\n   * @dev Hook that is called after any transfer of tokens. This includes\\n   * minting and burning.\\n   *\\n   * Calling conditions:\\n   *\\n   * - when `from` and `to` are both non-zero, `amount` of ``from``'s tokens\\n   * has been transferred to `to`.\\n   * - when `from` is zero, `amount` tokens have been minted for `to`.\\n   * - when `to` is zero, `amount` of ``from``'s tokens have been burned.\\n   * - `from` and `to` are never both zero.\\n   *\\n   * To learn more about hooks, head to xref:ROOT:extending-contracts.adoc#using-hooks[Using Hooks].\\n   */\\n  function _afterTokenTransfer(\\n    address from,\\n    address to,\\n    uint256 amount\\n  ) internal virtual {}\\n}\\n\"\r\n    },\r\n    \"contracts/Kibble/interfaces/IFTPAntiBot.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\npragma solidity 0.8.4;\\n\\ninterface IFTPAntiBot {\\n  function scanAddress(\\n    address _address,\\n    address _safeAddress,\\n    address _origin\\n  ) external returns (bool);\\n\\n  function registerBlock(address _recipient, address _sender) external;\\n}\\n\"\r\n    },\r\n    \"contracts/Kibble/KibbleAccessControl.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\npragma solidity 0.8.4;\\n\\nimport { AccessControl } from '@openzeppelin/contracts/access/AccessControl.sol';\\nimport { Ownable } from '@openzeppelin/contracts/access/Ownable.sol';\\n\\nabstract contract KibbleAccessControl is AccessControl, Ownable {\\n  /// @notice role based events\\n  event BurnerAdded(address burner);\\n  event MinterAdded(address minter);\\n\\n  /// @notice set minter role, ie staking contracts\\n  bytes32 public constant BURNER_ROLE = keccak256('BURNER_ROLE');\\n\\n  /// @notice set minter role, ie staking contracts\\n  bytes32 public constant MINTER_ROLE = keccak256('MINTER_ROLE');\\n\\n  /// @notice onlyBurner modifier\\n  modifier onlyBurner() {\\n    require(\\n      hasRole(BURNER_ROLE, msg.sender),\\n      'KibbleAccessControl: Only burner'\\n    );\\n    _;\\n  }\\n\\n  /// @notice setup a burner role can only be set by dev\\n  /// @param _burner burner address\\n  function setupBurner(address _burner) external onlyOwner {\\n    require(\\n      _isContract(_burner),\\n      'KibbleAccessControl: Burner can only be a contract'\\n    );\\n    _setupRole(BURNER_ROLE, _burner);\\n\\n    emit BurnerAdded(_burner);\\n  }\\n\\n  /// @notice onlyMinter modifier\\n  modifier onlyMinter() {\\n    require(\\n      hasRole(MINTER_ROLE, msg.sender),\\n      'KibbleAccessControl: Only minter'\\n    );\\n    _;\\n  }\\n\\n  /// @notice setup minter role can only be set by dev\\n  /// @param _minter minter address\\n  function setupMinter(address _minter) external onlyOwner {\\n    require(\\n      _isContract(_minter),\\n      'KibbleAccessControl: Minter can only be a contract'\\n    );\\n    _setupRole(MINTER_ROLE, _minter);\\n\\n    emit MinterAdded(_minter);\\n  }\\n\\n  /// @notice Check if an address is a contract\\n  function _isContract(address _addr) internal view returns (bool isContract_) {\\n    uint256 size;\\n    assembly {\\n      size := extcodesize(_addr)\\n    }\\n    isContract_ = size > 0;\\n  }\\n}\\n\"\r\n    },\r\n    \"contracts/Kibble/KibbleBase.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\npragma solidity 0.8.4;\\n\\nimport { SafeMath } from '@openzeppelin/contracts/utils/math/SafeMath.sol';\\n\\nimport { KibbleAccessControl } from './KibbleAccessControl.sol';\\nimport { ERC20 } from './open-zeppelin/ERC20.sol';\\n\\nabstract contract KibbleBase is ERC20, KibbleAccessControl {\\n  using SafeMath for uint256;\\n  bytes32 public constant DELEGATE_BY_POWER_TYPEHASH =\\n    keccak256(\\n      'DelegateByPower(address delegatee,uint256 type,uint256 nonce,uint256 expiry)'\\n    );\\n\\n  bytes32 public constant DELEGATE_TYPEHASH =\\n    keccak256('Delegate(address delegatee,uint256 nonce,uint256 expiry)');\\n\\n  /// @notice A checkpoint for marking number of votes from a given block\\n  struct Checkpoint {\\n    uint128 blockNumber;\\n    uint256 votes;\\n  }\\n\\n  /// @notice Enum of powers delegate can have\\n  enum DelegationPower {\\n    Proposition,\\n    Voting\\n  }\\n\\n  /// @notice emitted when a user delegates to another\\n  /// @param _delegator the delegator\\n  /// @param _delegatee the delegatee\\n  /// @param _power power querying\\n  event DelegateChanged(\\n    address indexed _delegator,\\n    address indexed _delegatee,\\n    DelegationPower _power\\n  );\\n\\n  /// @notice emitted when an action changes the delegated power of a user\\n  /// @param _user the user which delegated power has changed\\n  /// @param _amount the amount of delegated power for the user\\n  /// @param _power power querying\\n  event DelegatedPowerChanged(\\n    address indexed _user,\\n    uint256 _amount,\\n    DelegationPower _power\\n  );\\n\\n  /// @notice grant single delegation power to delegatee\\n  /// @param _delegatee giving power to\\n  /// @param _power the power being given\\n  function delegateByPower(address _delegatee, DelegationPower _power)\\n    external\\n  {\\n    _delegateByPower(msg.sender, _delegatee, _power);\\n  }\\n\\n  /// @notice grant delegation power to delegatee\\n  /// @param _delegatee giving power to\\n  function delegate(address _delegatee) external {\\n    _delegateByPower(msg.sender, _delegatee, DelegationPower.Proposition);\\n    _delegateByPower(msg.sender, _delegatee, DelegationPower.Voting);\\n  }\\n\\n  /// @notice returns the delegatee of an user by power\\n  /// @param _delegator the address of the delegator\\n  /// @param _power power querying\\n  function getDelegateeByPower(address _delegator, DelegationPower _power)\\n    external\\n    view\\n    returns (address)\\n  {\\n    (\\n      ,\\n      ,\\n      mapping(address => address) storage delegates\\n    ) = _getDelegationDataByPower(_power);\\n\\n    return _getDelegatee(_delegator, delegates);\\n  }\\n\\n  /// @notice gets the current delegated power of a user. The current power is the\\n  /// power delegated at the time of the last checkpoint\\n  /// @param _user the user\\n  /// @param _power power querying\\n  function getPowerCurrent(address _user, DelegationPower _power)\\n    external\\n    view\\n    returns (uint256 currentPower_)\\n  {\\n    (\\n      mapping(address => mapping(uint256 => Checkpoint)) storage checkpoints,\\n      mapping(address => uint256) storage checkpointsCounts,\\n\\n    ) = _getDelegationDataByPower(_power);\\n\\n    currentPower_ = _searchByBlockNumber(\\n      checkpoints,\\n      checkpointsCounts,\\n      _user,\\n      block.number\\n    );\\n  }\\n\\n  /// @notice queries the delegated power of a user at a certain block\\n  /// @param _user the user\\n  /// @param _blockNumber the block number querying by\\n  /// @param _power the power querying by\\n  function getPowerAtBlock(\\n    address _user,\\n    uint256 _blockNumber,\\n    DelegationPower _power\\n  ) external view returns (uint256 powerAtBlock_) {\\n    (\\n      mapping(address => mapping(uint256 => Checkpoint)) storage checkpoints,\\n      mapping(address => uint256) storage checkpointsCounts,\\n\\n    ) = _getDelegationDataByPower(_power);\\n\\n    powerAtBlock_ = _searchByBlockNumber(\\n      checkpoints,\\n      checkpointsCounts,\\n      _user,\\n      _blockNumber\\n    );\\n  }\\n\\n  /// @notice delegates the specific power to a delegate\\n  /// @param _delegator the user which delegated power has changed\\n  /// @param _delegatee the user which delegated power has changed\\n  /// @param _power the power being given\\n  function _delegateByPower(\\n    address _delegator,\\n    address _delegatee,\\n    DelegationPower _power\\n  ) internal {\\n    require(\\n      _delegatee != address(0),\\n      'KibbleBase: _delegateByPower: invalid delegate'\\n    );\\n\\n    (\\n      ,\\n      ,\\n      mapping(address => address) storage delegates\\n    ) = _getDelegationDataByPower(_power);\\n\\n    uint256 delegatorBalance = balanceOf(_delegator);\\n\\n    address previousDelegatee = _getDelegatee(_delegator, delegates);\\n\\n    delegates[_delegator] = _delegatee;\\n\\n    _moveDelegatesByPower(\\n      previousDelegatee,\\n      _delegatee,\\n      delegatorBalance,\\n      _power\\n    );\\n    emit DelegateChanged(_delegator, _delegatee, _power);\\n  }\\n\\n  /// @notice reassigns delegation to another user\\n  /// @param _from the user from which delegated power is moved\\n  /// @param _to the user that will receive the delegated power\\n  /// @param _amount the amount of delegated power to be moved\\n  /// @param _power the power being reassigned\\n  function _moveDelegatesByPower(\\n    address _from,\\n    address _to,\\n    uint256 _amount,\\n    DelegationPower _power\\n  ) internal {\\n    if (_from == _to) {\\n      return;\\n    }\\n\\n    (\\n      mapping(address => mapping(uint256 => Checkpoint)) storage checkpoints,\\n      mapping(address => uint256) storage checkpointsCounts,\\n\\n    ) = _getDelegationDataByPower(_power);\\n\\n    if (_from != address(0)) {\\n      uint256 previous = 0;\\n      uint256 fromCheckpointsCount = checkpointsCounts[_from];\\n\\n      if (fromCheckpointsCount != 0) {\\n        previous = checkpoints[_from][fromCheckpointsCount - 1].votes;\\n      } else {\\n        previous = balanceOf(_from);\\n      }\\n      uint256 newVal = previous.sub(_amount);\\n\\n      _writeCheckpoint(checkpoints, checkpointsCounts, _from, uint128(newVal));\\n\\n      emit DelegatedPowerChanged(_from, newVal, _power);\\n    }\\n    if (_to != address(0)) {\\n      uint256 previous = 0;\\n      uint256 toCheckpointsCount = checkpointsCounts[_to];\\n      if (toCheckpointsCount != 0) {\\n        previous = checkpoints[_to][toCheckpointsCount - 1].votes;\\n      } else {\\n        previous = balanceOf(_to);\\n      }\\n\\n      uint256 newVal = previous.add(_amount);\\n\\n      _writeCheckpoint(checkpoints, checkpointsCounts, _to, uint128(newVal));\\n\\n      emit DelegatedPowerChanged(_to, newVal, _power);\\n    }\\n  }\\n\\n  /// @notice searches a checkpoint by block number. Uses binary search.\\n  /// @param _checkpoints the checkpoints mapping\\n  /// @param _checkpointsCounts the number of checkpoints\\n  /// @param _user the user for which the checkpoint is being searched\\n  /// @param _blockNumber the block number being searched\\n  function _searchByBlockNumber(\\n    mapping(address => mapping(uint256 => Checkpoint)) storage _checkpoints,\\n    mapping(address => uint256) storage _checkpointsCounts,\\n    address _user,\\n    uint256 _blockNumber\\n  ) internal view returns (uint256 checkpoint_) {\\n    require(\\n      _blockNumber <= block.number,\\n      'KibbleBase: _searchByBlockNumber: invalid block number'\\n    );\\n\\n    uint256 checkpointsCount = _checkpointsCounts[_user];\\n\\n    if (checkpointsCount == 0) {\\n      return balanceOf(_user);\\n    }\\n\\n    // First check most recent balance\\n    if (_checkpoints[_user][checkpointsCount - 1].blockNumber <= _blockNumber) {\\n      return _checkpoints[_user][checkpointsCount - 1].votes;\\n    }\\n\\n    // Next check implicit zero balance\\n    if (_checkpoints[_user][0].blockNumber > _blockNumber) {\\n      return 0;\\n    }\\n\\n    uint256 lower = 0;\\n    uint256 upper = checkpointsCount - 1;\\n    while (upper > lower) {\\n      uint256 center = upper - (upper - lower) / 2; // ceil, avoiding overflow\\n      Checkpoint memory checkpoint = _checkpoints[_user][center];\\n      if (checkpoint.blockNumber == _blockNumber) {\\n        return checkpoint.votes;\\n      } else if (checkpoint.blockNumber < _blockNumber) {\\n        lower = center;\\n      } else {\\n        upper = center - 1;\\n      }\\n    }\\n\\n    checkpoint_ = _checkpoints[_user][lower].votes;\\n  }\\n\\n  /// @notice get delegation data by power\\n  /// @param _power the power querying by from\\n  function _getDelegationDataByPower(DelegationPower _power)\\n    internal\\n    view\\n    virtual\\n    returns (\\n      mapping(address => mapping(uint256 => Checkpoint)) storage, //checkpoint\\n      mapping(address => uint256) storage, //checkpoints count\\n      mapping(address => address) storage //delegatees list\\n    );\\n\\n  /// @notice Writes a checkpoint for an owner of tokens\\n  /// @param _checkpoints the checkpoints mapping\\n  /// @param _checkpointsCounts the number of checkpoints\\n  /// @param _owner The owner of the tokens\\n  /// @param _value The value after the operation\\n  function _writeCheckpoint(\\n    mapping(address => mapping(uint256 => Checkpoint)) storage _checkpoints,\\n    mapping(address => uint256) storage _checkpointsCounts,\\n    address _owner,\\n    uint128 _value\\n  ) internal {\\n    uint128 currentBlock = uint128(block.number);\\n\\n    uint256 ownerCheckpointsCount = _checkpointsCounts[_owner];\\n    mapping(uint256 => Checkpoint) storage checkpointsOwner = _checkpoints[\\n      _owner\\n    ];\\n\\n    // Doing multiple operations in the same block\\n    if (\\n      ownerCheckpointsCount != 0 &&\\n      checkpointsOwner[ownerCheckpointsCount - 1].blockNumber == currentBlock\\n    ) {\\n      checkpointsOwner[ownerCheckpointsCount - 1].votes = _value;\\n    } else {\\n      checkpointsOwner[ownerCheckpointsCount] = Checkpoint(\\n        currentBlock,\\n        _value\\n      );\\n      _checkpointsCounts[_owner] = ownerCheckpointsCount + 1;\\n    }\\n  }\\n\\n  /// @notice returns the user delegatee. If a user never performed any delegation,\\n  /// his delegated address will be 0x0. In that case we simply return the user itself\\n  /// @param _delegator the address of the user for which return the delegatee\\n  /// @param _delegates the array of delegates for a particular type of delegation\\n  function _getDelegatee(\\n    address _delegator,\\n    mapping(address => address) storage _delegates\\n  ) internal view returns (address delegtee_) {\\n    address previousDelegatee = _delegates[_delegator];\\n\\n    delegtee_ = previousDelegatee == address(0)\\n      ? _delegator\\n      : previousDelegatee;\\n  }\\n}\\n\"\r\n    },\r\n    \"contracts/Kibble/interfaces/IUniswapV2Router.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\npragma solidity 0.8.4;\\n\\ninterface IUniswapV2Router01 {\\n  function factory() external pure returns (address);\\n\\n  function WETH() external pure returns (address);\\n\\n  function addLiquidity(\\n    address tokenA,\\n    address tokenB,\\n    uint256 amountADesired,\\n    uint256 amountBDesired,\\n    uint256 amountAMin,\\n    uint256 amountBMin,\\n    address to,\\n    uint256 deadline\\n  )\\n    external\\n    returns (\\n      uint256 amountA,\\n      uint256 amountB,\\n      uint256 liquidity\\n    );\\n\\n  function addLiquidityETH(\\n    address token,\\n    uint256 amountTokenDesired,\\n    uint256 amountTokenMin,\\n    uint256 amountETHMin,\\n    address to,\\n    uint256 deadline\\n  )\\n    external\\n    payable\\n    returns (\\n      uint256 amountToken,\\n      uint256 amountETH,\\n      uint256 liquidity\\n    );\\n\\n  function removeLiquidity(\\n    address tokenA,\\n    address tokenB,\\n    uint256 liquidity,\\n    uint256 amountAMin,\\n    uint256 amountBMin,\\n    address to,\\n    uint256 deadline\\n  ) external returns (uint256 amountA, uint256 amountB);\\n\\n  function removeLiquidityETH(\\n    address token,\\n    uint256 liquidity,\\n    uint256 amountTokenMin,\\n    uint256 amountETHMin,\\n    address to,\\n    uint256 deadline\\n  ) external returns (uint256 amountToken, uint256 amountETH);\\n\\n  function removeLiquidityWithPermit(\\n    address tokenA,\\n    address tokenB,\\n    uint256 liquidity,\\n    uint256 amountAMin,\\n    uint256 amountBMin,\\n    address to,\\n    uint256 deadline,\\n    bool approveMax,\\n    uint8 v,\\n    bytes32 r,\\n    bytes32 s\\n  ) external returns (uint256 amountA, uint256 amountB);\\n\\n  function removeLiquidityETHWithPermit(\\n    address token,\\n    uint256 liquidity,\\n    uint256 amountTokenMin,\\n    uint256 amountETHMin,\\n    address to,\\n    uint256 deadline,\\n    bool approveMax,\\n    uint8 v,\\n    bytes32 r,\\n    bytes32 s\\n  ) external returns (uint256 amountToken, uint256 amountETH);\\n\\n  function swapExactTokensForTokens(\\n    uint256 amountIn,\\n    uint256 amountOutMin,\\n    address[] calldata path,\\n    address to,\\n    uint256 deadline\\n  ) external returns (uint256[] memory amounts);\\n\\n  function swapTokensForExactTokens(\\n    uint256 amountOut,\\n    uint256 amountInMax,\\n    address[] calldata path,\\n    address to,\\n    uint256 deadline\\n  ) external returns (uint256[] memory amounts);\\n\\n  function swapExactETHForTokens(\\n    uint256 amountOutMin,\\n    address[] calldata path,\\n    address to,\\n    uint256 deadline\\n  ) external payable returns (uint256[] memory amounts);\\n\\n  function swapTokensForExactETH(\\n    uint256 amountOut,\\n    uint256 amountInMax,\\n    address[] calldata path,\\n    address to,\\n    uint256 deadline\\n  ) external returns (uint256[] memory amounts);\\n\\n  function swapExactTokensForETH(\\n    uint256 amountIn,\\n    uint256 amountOutMin,\\n    address[] calldata path,\\n    address to,\\n    uint256 deadline\\n  ) external returns (uint256[] memory amounts);\\n\\n  function swapETHForExactTokens(\\n    uint256 amountOut,\\n    address[] calldata path,\\n    address to,\\n    uint256 deadline\\n  ) external payable returns (uint256[] memory amounts);\\n\\n  function quote(\\n    uint256 amountA,\\n    uint256 reserveA,\\n    uint256 reserveB\\n  ) external pure returns (uint256 amountB);\\n\\n  function getAmountOut(\\n    uint256 amountIn,\\n    uint256 reserveIn,\\n    uint256 reserveOut\\n  ) external pure returns (uint256 amountOut);\\n\\n  function getAmountIn(\\n    uint256 amountOut,\\n    uint256 reserveIn,\\n    uint256 reserveOut\\n  ) external pure returns (uint256 amountIn);\\n\\n  function getAmountsOut(uint256 amountIn, address[] calldata path)\\n    external\\n    view\\n    returns (uint256[] memory amounts);\\n\\n  function getAmountsIn(uint256 amountOut, address[] calldata path)\\n    external\\n    view\\n    returns (uint256[] memory amounts);\\n}\\n\\n// pragma solidity >=0.6.2;\\n\\ninterface IUniswapV2Router02 is IUniswapV2Router01 {\\n  function removeLiquidityETHSupportingFeeOnTransferTokens(\\n    address token,\\n    uint256 liquidity,\\n    uint256 amountTokenMin,\\n    uint256 amountETHMin,\\n    address to,\\n    uint256 deadline\\n  ) external returns (uint256 amountETH);\\n\\n  function removeLiquidityETHWithPermitSupportingFeeOnTransferTokens(\\n    address token,\\n    uint256 liquidity,\\n    uint256 amountTokenMin,\\n    uint256 amountETHMin,\\n    address to,\\n    uint256 deadline,\\n    bool approveMax,\\n    uint8 v,\\n    bytes32 r,\\n    bytes32 s\\n  ) external returns (uint256 amountETH);\\n\\n  function swapExactTokensForTokensSupportingFeeOnTransferTokens(\\n    uint256 amountIn,\\n    uint256 amountOutMin,\\n    address[] calldata path,\\n    address to,\\n    uint256 deadline\\n  ) external;\\n\\n  function swapExactETHForTokensSupportingFeeOnTransferTokens(\\n    uint256 amountOutMin,\\n    address[] calldata path,\\n    address to,\\n    uint256 deadline\\n  ) external payable;\\n\\n  function swapExactTokensForETHSupportingFeeOnTransferTokens(\\n    uint256 amountIn,\\n    uint256 amountOutMin,\\n    address[] calldata path,\\n    address to,\\n    uint256 deadline\\n  ) external;\\n}\\n\"\r\n    },\r\n    \"contracts/Kibble/interfaces/IUniswapV2Factory.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\npragma solidity 0.8.4;\\n\\ninterface IUniswapV2Factory {\\n  event PairCreated(\\n    address indexed token0,\\n    address indexed token1,\\n    address pair,\\n    uint256\\n  );\\n\\n  function feeTo() external view returns (address);\\n\\n  function feeToSetter() external view returns (address);\\n\\n  function getPair(address tokenA, address tokenB)\\n    external\\n    view\\n    returns (address pair);\\n\\n  function allPairs(uint256) external view returns (address pair);\\n\\n  function allPairsLength() external view returns (uint256);\\n\\n  function createPair(address tokenA, address tokenB)\\n    external\\n    returns (address pair);\\n\\n  function setFeeTo(address) external;\\n\\n  function setFeeToSetter(address) external;\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/token/ERC20/IERC20.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC20 standard as defined in the EIP.\\n */\\ninterface IERC20 {\\n    /**\\n     * @dev Returns the amount of tokens in existence.\\n     */\\n    function totalSupply() external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the amount of tokens owned by `account`.\\n     */\\n    function balanceOf(address account) external view returns (uint256);\\n\\n    /**\\n     * @dev Moves `amount` tokens from the caller's account to `recipient`.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transfer(address recipient, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Returns the remaining number of tokens that `spender` will be\\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\\n     * zero by default.\\n     *\\n     * This value changes when {approve} or {transferFrom} are called.\\n     */\\n    function allowance(address owner, address spender) external view returns (uint256);\\n\\n    /**\\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\\n     * that someone may use both the old and the new allowance by unfortunate\\n     * transaction ordering. One possible solution to mitigate this race\\n     * condition is to first reduce the spender's allowance to 0 and set the\\n     * desired value afterwards:\\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address spender, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Moves `amount` tokens from `sender` to `recipient` using the\\n     * allowance mechanism. `amount` is then deducted from the caller's\\n     * allowance.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(\\n        address sender,\\n        address recipient,\\n        uint256 amount\\n    ) external returns (bool);\\n\\n    /**\\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\\n     * another (`to`).\\n     *\\n     * Note that `value` may be zero.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 value);\\n\\n    /**\\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\\n     * a call to {approve}. `value` is the new allowance.\\n     */\\n    event Approval(address indexed owner, address indexed spender, uint256 value);\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/token/ERC20/extensions/IERC20Metadata.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../IERC20.sol\\\";\\n\\n/**\\n * @dev Interface for the optional metadata functions from the ERC20 standard.\\n *\\n * _Available since v4.1._\\n */\\ninterface IERC20Metadata is IERC20 {\\n    /**\\n     * @dev Returns the name of the token.\\n     */\\n    function name() external view returns (string memory);\\n\\n    /**\\n     * @dev Returns the symbol of the token.\\n     */\\n    function symbol() external view returns (string memory);\\n\\n    /**\\n     * @dev Returns the decimals places of the token.\\n     */\\n    function decimals() external view returns (uint8);\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/utils/Context.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\n/*\\n * @dev Provides information about the current execution context, including the\\n * sender of the transaction and its data. While these are generally available\\n * via msg.sender and msg.data, they should not be accessed in such a direct\\n * manner, since when dealing with meta-transactions the account sending and\\n * paying for execution may not be the actual sender (as far as an application\\n * is concerned).\\n *\\n * This contract is only required for intermediate, library-like contracts.\\n */\\nabstract contract Context {\\n    function _msgSender() internal view virtual returns (address) {\\n        return msg.sender;\\n    }\\n\\n    function _msgData() internal view virtual returns (bytes calldata) {\\n        return msg.data;\\n    }\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/access/AccessControl.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../utils/Context.sol\\\";\\nimport \\\"../utils/Strings.sol\\\";\\nimport \\\"../utils/introspection/ERC165.sol\\\";\\n\\n/**\\n * @dev External interface of AccessControl declared to support ERC165 detection.\\n */\\ninterface IAccessControl {\\n    function hasRole(bytes32 role, address account) external view returns (bool);\\n\\n    function getRoleAdmin(bytes32 role) external view returns (bytes32);\\n\\n    function grantRole(bytes32 role, address account) external;\\n\\n    function revokeRole(bytes32 role, address account) external;\\n\\n    function renounceRole(bytes32 role, address account) external;\\n}\\n\\n/**\\n * @dev Contract module that allows children to implement role-based access\\n * control mechanisms. This is a lightweight version that doesn't allow enumerating role\\n * members except through off-chain means by accessing the contract event logs. Some\\n * applications may benefit from on-chain enumerability, for those cases see\\n * {AccessControlEnumerable}.\\n *\\n * Roles are referred to by their `bytes32` identifier. These should be exposed\\n * in the external API and be unique. The best way to achieve this is by\\n * using `public constant` hash digests:\\n *\\n * ```\\n * bytes32 public constant MY_ROLE = keccak256(\\\"MY_ROLE\\\");\\n * ```\\n *\\n * Roles can be used to represent a set of permissions. To restrict access to a\\n * function call, use {hasRole}:\\n *\\n * ```\\n * function foo() public {\\n *     require(hasRole(MY_ROLE, msg.sender));\\n *     ...\\n * }\\n * ```\\n *\\n * Roles can be granted and revoked dynamically via the {grantRole} and\\n * {revokeRole} functions. Each role has an associated admin role, and only\\n * accounts that have a role's admin role can call {grantRole} and {revokeRole}.\\n *\\n * By default, the admin role for all roles is `DEFAULT_ADMIN_ROLE`, which means\\n * that only accounts with this role will be able to grant or revoke other\\n * roles. More complex role relationships can be created by using\\n * {_setRoleAdmin}.\\n *\\n * WARNING: The `DEFAULT_ADMIN_ROLE` is also its own admin: it has permission to\\n * grant and revoke this role. Extra precautions should be taken to secure\\n * accounts that have been granted it.\\n */\\nabstract contract AccessControl is Context, IAccessControl, ERC165 {\\n    struct RoleData {\\n        mapping(address => bool) members;\\n        bytes32 adminRole;\\n    }\\n\\n    mapping(bytes32 => RoleData) private _roles;\\n\\n    bytes32 public constant DEFAULT_ADMIN_ROLE = 0x00;\\n\\n    /**\\n     * @dev Emitted when `newAdminRole` is set as ``role``'s admin role, replacing `previousAdminRole`\\n     *\\n     * `DEFAULT_ADMIN_ROLE` is the starting admin for all roles, despite\\n     * {RoleAdminChanged} not being emitted signaling this.\\n     *\\n     * _Available since v3.1._\\n     */\\n    event RoleAdminChanged(bytes32 indexed role, bytes32 indexed previousAdminRole, bytes32 indexed newAdminRole);\\n\\n    /**\\n     * @dev Emitted when `account` is granted `role`.\\n     *\\n     * `sender` is the account that originated the contract call, an admin role\\n     * bearer except when using {_setupRole}.\\n     */\\n    event RoleGranted(bytes32 indexed role, address indexed account, address indexed sender);\\n\\n    /**\\n     * @dev Emitted when `account` is revoked `role`.\\n     *\\n     * `sender` is the account that originated the contract call:\\n     *   - if using `revokeRole`, it is the admin role bearer\\n     *   - if using `renounceRole`, it is the role bearer (i.e. `account`)\\n     */\\n    event RoleRevoked(bytes32 indexed role, address indexed account, address indexed sender);\\n\\n    /**\\n     * @dev Modifier that checks that an account has a specific role. Reverts\\n     * with a standardized message including the required role.\\n     *\\n     * The format of the revert reason is given by the following regular expression:\\n     *\\n     *  /^AccessControl: account (0x[0-9a-f]{20}) is missing role (0x[0-9a-f]{32})$/\\n     *\\n     * _Available since v4.1._\\n     */\\n    modifier onlyRole(bytes32 role) {\\n        _checkRole(role, _msgSender());\\n        _;\\n    }\\n\\n    /**\\n     * @dev See {IERC165-supportsInterface}.\\n     */\\n    function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {\\n        return interfaceId == type(IAccessControl).interfaceId || super.supportsInterface(interfaceId);\\n    }\\n\\n    /**\\n     * @dev Returns `true` if `account` has been granted `role`.\\n     */\\n    function hasRole(bytes32 role, address account) public view override returns (bool) {\\n        return _roles[role].members[account];\\n    }\\n\\n    /**\\n     * @dev Revert with a standard message if `account` is missing `role`.\\n     *\\n     * The format of the revert reason is given by the following regular expression:\\n     *\\n     *  /^AccessControl: account (0x[0-9a-f]{20}) is missing role (0x[0-9a-f]{32})$/\\n     */\\n    function _checkRole(bytes32 role, address account) internal view {\\n        if (!hasRole(role, account)) {\\n            revert(\\n                string(\\n                    abi.encodePacked(\\n                        \\\"AccessControl: account \\\",\\n                        Strings.toHexString(uint160(account), 20),\\n                        \\\" is missing role \\\",\\n                        Strings.toHexString(uint256(role), 32)\\n                    )\\n                )\\n            );\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the admin role that controls `role`. See {grantRole} and\\n     * {revokeRole}.\\n     *\\n     * To change a role's admin, use {_setRoleAdmin}.\\n     */\\n    function getRoleAdmin(bytes32 role) public view override returns (bytes32) {\\n        return _roles[role].adminRole;\\n    }\\n\\n    /**\\n     * @dev Grants `role` to `account`.\\n     *\\n     * If `account` had not been already granted `role`, emits a {RoleGranted}\\n     * event.\\n     *\\n     * Requirements:\\n     *\\n     * - the caller must have ``role``'s admin role.\\n     */\\n    function grantRole(bytes32 role, address account) public virtual override onlyRole(getRoleAdmin(role)) {\\n        _grantRole(role, account);\\n    }\\n\\n    /**\\n     * @dev Revokes `role` from `account`.\\n     *\\n     * If `account` had been granted `role`, emits a {RoleRevoked} event.\\n     *\\n     * Requirements:\\n     *\\n     * - the caller must have ``role``'s admin role.\\n     */\\n    function revokeRole(bytes32 role, address account) public virtual override onlyRole(getRoleAdmin(role)) {\\n        _revokeRole(role, account);\\n    }\\n\\n    /**\\n     * @dev Revokes `role` from the calling account.\\n     *\\n     * Roles are often managed via {grantRole} and {revokeRole}: this function's\\n     * purpose is to provide a mechanism for accounts to lose their privileges\\n     * if they are compromised (such as when a trusted device is misplaced).\\n     *\\n     * If the calling account had been granted `role`, emits a {RoleRevoked}\\n     * event.\\n     *\\n     * Requirements:\\n     *\\n     * - the caller must be `account`.\\n     */\\n    function renounceRole(bytes32 role, address account) public virtual override {\\n        require(account == _msgSender(), \\\"AccessControl: can only renounce roles for self\\\");\\n\\n        _revokeRole(role, account);\\n    }\\n\\n    /**\\n     * @dev Grants `role` to `account`.\\n     *\\n     * If `account` had not been already granted `role`, emits a {RoleGranted}\\n     * event. Note that unlike {grantRole}, this function doesn't perform any\\n     * checks on the calling account.\\n     *\\n     * [WARNING]\\n     * ====\\n     * This function should only be called from the constructor when setting\\n     * up the initial roles for the system.\\n     *\\n     * Using this function in any other way is effectively circumventing the admin\\n     * system imposed by {AccessControl}.\\n     * ====\\n     */\\n    function _setupRole(bytes32 role, address account) internal virtual {\\n        _grantRole(role, account);\\n    }\\n\\n    /**\\n     * @dev Sets `adminRole` as ``role``'s admin role.\\n     *\\n     * Emits a {RoleAdminChanged} event.\\n     */\\n    function _setRoleAdmin(bytes32 role, bytes32 adminRole) internal virtual {\\n        emit RoleAdminChanged(role, getRoleAdmin(role), adminRole);\\n        _roles[role].adminRole = adminRole;\\n    }\\n\\n    function _grantRole(bytes32 role, address account) private {\\n        if (!hasRole(role, account)) {\\n            _roles[role].members[account] = true;\\n            emit RoleGranted(role, account, _msgSender());\\n        }\\n    }\\n\\n    function _revokeRole(bytes32 role, address account) private {\\n        if (hasRole(role, account)) {\\n            _roles[role].members[account] = false;\\n            emit RoleRevoked(role, account, _msgSender());\\n        }\\n    }\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/access/Ownable.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../utils/Context.sol\\\";\\n\\n/**\\n * @dev Contract module which provides a basic access control mechanism, where\\n * there is an account (an owner) that can be granted exclusive access to\\n * specific functions.\\n *\\n * By default, the owner account will be the one that deploys the contract. This\\n * can later be changed with {transferOwnership}.\\n *\\n * This module is used through inheritance. It will make available the modifier\\n * `onlyOwner`, which can be applied to your functions to restrict their use to\\n * the owner.\\n */\\nabstract contract Ownable is Context {\\n    address private _owner;\\n\\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\\n\\n    /**\\n     * @dev Initializes the contract setting the deployer as the initial owner.\\n     */\\n    constructor() {\\n        _setOwner(_msgSender());\\n    }\\n\\n    /**\\n     * @dev Returns the address of the current owner.\\n     */\\n    function owner() public view virtual returns (address) {\\n        return _owner;\\n    }\\n\\n    /**\\n     * @dev Throws if called by any account other than the owner.\\n     */\\n    modifier onlyOwner() {\\n        require(owner() == _msgSender(), \\\"Ownable: caller is not the owner\\\");\\n        _;\\n    }\\n\\n    /**\\n     * @dev Leaves the contract without owner. It will not be possible to call\\n     * `onlyOwner` functions anymore. Can only be called by the current owner.\\n     *\\n     * NOTE: Renouncing ownership will leave the contract without an owner,\\n     * thereby removing any functionality that is only available to the owner.\\n     */\\n    function renounceOwnership() public virtual onlyOwner {\\n        _setOwner(address(0));\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Can only be called by the current owner.\\n     */\\n    function transferOwnership(address newOwner) public virtual onlyOwner {\\n        require(newOwner != address(0), \\\"Ownable: new owner is the zero address\\\");\\n        _setOwner(newOwner);\\n    }\\n\\n    function _setOwner(address newOwner) private {\\n        address oldOwner = _owner;\\n        _owner = newOwner;\\n        emit OwnershipTransferred(oldOwner, newOwner);\\n    }\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/utils/Strings.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev String operations.\\n */\\nlibrary Strings {\\n    bytes16 private constant _HEX_SYMBOLS = \\\"0123456789abcdef\\\";\\n\\n    /**\\n     * @dev Converts a `uint256` to its ASCII `string` decimal representation.\\n     */\\n    function toString(uint256 value) internal pure returns (string memory) {\\n        // Inspired by OraclizeAPI's implementation - MIT licence\\n        // https://github.com/oraclize/ethereum-api/blob/b42146b063c7d6ee1358846c198246239e9360e8/oraclizeAPI_0.4.25.sol\\n\\n        if (value == 0) {\\n            return \\\"0\\\";\\n        }\\n        uint256 temp = value;\\n        uint256 digits;\\n        while (temp != 0) {\\n            digits++;\\n            temp /= 10;\\n        }\\n        bytes memory buffer = new bytes(digits);\\n        while (value != 0) {\\n            digits -= 1;\\n            buffer[digits] = bytes1(uint8(48 + uint256(value % 10)));\\n            value /= 10;\\n        }\\n        return string(buffer);\\n    }\\n\\n    /**\\n     * @dev Converts a `uint256` to its ASCII `string` hexadecimal representation.\\n     */\\n    function toHexString(uint256 value) internal pure returns (string memory) {\\n        if (value == 0) {\\n            return \\\"0x00\\\";\\n        }\\n        uint256 temp = value;\\n        uint256 length = 0;\\n        while (temp != 0) {\\n            length++;\\n            temp >>= 8;\\n        }\\n        return toHexString(value, length);\\n    }\\n\\n    /**\\n     * @dev Converts a `uint256` to its ASCII `string` hexadecimal representation with fixed length.\\n     */\\n    function toHexString(uint256 value, uint256 length) internal pure returns (string memory) {\\n        bytes memory buffer = new bytes(2 * length + 2);\\n        buffer[0] = \\\"0\\\";\\n        buffer[1] = \\\"x\\\";\\n        for (uint256 i = 2 * length + 1; i > 1; --i) {\\n            buffer[i] = _HEX_SYMBOLS[value & 0xf];\\n            value >>= 4;\\n        }\\n        require(value == 0, \\\"Strings: hex length insufficient\\\");\\n        return string(buffer);\\n    }\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/utils/introspection/ERC165.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"./IERC165.sol\\\";\\n\\n/**\\n * @dev Implementation of the {IERC165} interface.\\n *\\n * Contracts that want to implement ERC165 should inherit from this contract and override {supportsInterface} to check\\n * for the additional interface id that will be supported. For example:\\n *\\n * ```solidity\\n * function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {\\n *     return interfaceId == type(MyInterface).interfaceId || super.supportsInterface(interfaceId);\\n * }\\n * ```\\n *\\n * Alternatively, {ERC165Storage} provides an easier to use but more expensive implementation.\\n */\\nabstract contract ERC165 is IERC165 {\\n    /**\\n     * @dev See {IERC165-supportsInterface}.\\n     */\\n    function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {\\n        return interfaceId == type(IERC165).interfaceId;\\n    }\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/utils/introspection/IERC165.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC165 standard, as defined in the\\n * https://eips.ethereum.org/EIPS/eip-165[EIP].\\n *\\n * Implementers can declare support of contract interfaces, which can then be\\n * queried by others ({ERC165Checker}).\\n *\\n * For an implementation, see {ERC165}.\\n */\\ninterface IERC165 {\\n    /**\\n     * @dev Returns true if this contract implements the interface defined by\\n     * `interfaceId`. See the corresponding\\n     * https://eips.ethereum.org/EIPS/eip-165#how-interfaces-are-identified[EIP section]\\n     * to learn more about how these ids are created.\\n     *\\n     * This function call must use less than 30 000 gas.\\n     */\\n    function supportsInterface(bytes4 interfaceId) external view returns (bool);\\n}\\n\"\r\n    }\r\n  },\r\n  \"settings\": {\r\n    \"optimizer\": {\r\n      \"enabled\": true,\r\n      \"runs\": 1\r\n    },\r\n    \"outputSelection\": {\r\n      \"*\": {\r\n        \"*\": [\r\n          \"evm.bytecode\",\r\n          \"evm.deployedBytecode\",\r\n          \"abi\"\r\n        ]\r\n      }\r\n    },\r\n    \"libraries\": {}\r\n  }\r\n}}","ABI":"[{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_antiBotAddress\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_uniswapRouterAddress\",\"type\":\"address\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Approval\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"burner\",\"type\":\"address\"}],\"name\":\"BurnerAdded\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"_delegator\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"_delegatee\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"enum KibbleBase.DelegationPower\",\"name\":\"_power\",\"type\":\"uint8\"}],\"name\":\"DelegateChanged\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"_user\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"enum KibbleBase.DelegationPower\",\"name\":\"_power\",\"type\":\"uint8\"}],\"name\":\"DelegatedPowerChanged\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"targetAddress\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"bool\",\"name\":\"included\",\"type\":\"bool\"}],\"name\":\"LogExcluded\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"targetAddress\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"bool\",\"name\":\"included\",\"type\":\"bool\"}],\"name\":\"LogSellContracts\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"pair\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"bool\",\"name\":\"included\",\"type\":\"bool\"}],\"name\":\"LogTokenPair\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"minter\",\"type\":\"address\"}],\"name\":\"MinterAdded\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"previousAdminRole\",\"type\":\"bytes32\"},{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"newAdminRole\",\"type\":\"bytes32\"}],\"name\":\"RoleAdminChanged\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"}],\"name\":\"RoleGranted\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"}],\"name\":\"RoleRevoked\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Transfer\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"BURNER_ROLE\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"DEFAULT_ADMIN_ROLE\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"DELEGATE_BY_POWER_TYPEHASH\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"DELEGATE_TYPEHASH\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"DOMAIN_SEPARATOR\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"EIP712_REVISION\",\"outputs\":[{\"internalType\":\"bytes\",\"name\":\"\",\"type\":\"bytes\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"MINTER_ROLE\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"PERMIT_TYPEHASH\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"_nonces\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"}],\"name\":\"allowance\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"antiBotEnabled\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"approve\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_sender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"burn\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"decimals\",\"outputs\":[{\"internalType\":\"uint8\",\"name\":\"\",\"type\":\"uint8\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"subtractedValue\",\"type\":\"uint256\"}],\"name\":\"decreaseAllowance\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_delegatee\",\"type\":\"address\"}],\"name\":\"delegate\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_delegatee\",\"type\":\"address\"},{\"internalType\":\"enum KibbleBase.DelegationPower\",\"name\":\"_power\",\"type\":\"uint8\"}],\"name\":\"delegateByPower\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_delegatee\",\"type\":\"address\"},{\"internalType\":\"enum KibbleBase.DelegationPower\",\"name\":\"_power\",\"type\":\"uint8\"},{\"internalType\":\"uint256\",\"name\":\"_nonce\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_expiry\",\"type\":\"uint256\"},{\"internalType\":\"uint8\",\"name\":\"_v\",\"type\":\"uint8\"},{\"internalType\":\"bytes32\",\"name\":\"_r\",\"type\":\"bytes32\"},{\"internalType\":\"bytes32\",\"name\":\"_s\",\"type\":\"bytes32\"}],\"name\":\"delegateByPowerBySig\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_delegatee\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_nonce\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_expiry\",\"type\":\"uint256\"},{\"internalType\":\"uint8\",\"name\":\"_v\",\"type\":\"uint8\"},{\"internalType\":\"bytes32\",\"name\":\"_r\",\"type\":\"bytes32\"},{\"internalType\":\"bytes32\",\"name\":\"_s\",\"type\":\"bytes32\"}],\"name\":\"delegateBySig\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"disableFees\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"enableFees\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"excluded\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"feeEnabled\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"feeResetCooldown\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_delegator\",\"type\":\"address\"},{\"internalType\":\"enum KibbleBase.DelegationPower\",\"name\":\"_power\",\"type\":\"uint8\"}],\"name\":\"getDelegateeByPower\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_user\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_blockNumber\",\"type\":\"uint256\"},{\"internalType\":\"enum KibbleBase.DelegationPower\",\"name\":\"_power\",\"type\":\"uint8\"}],\"name\":\"getPowerAtBlock\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"powerAtBlock_\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_user\",\"type\":\"address\"},{\"internalType\":\"enum KibbleBase.DelegationPower\",\"name\":\"_power\",\"type\":\"uint8\"}],\"name\":\"getPowerCurrent\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"currentPower_\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"}],\"name\":\"getRoleAdmin\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"grantRole\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"hasRole\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"addedValue\",\"type\":\"uint256\"}],\"name\":\"increaseAllowance\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"maxSupply\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_recipient\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"mint\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"name\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_owner\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_spender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_value\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_deadline\",\"type\":\"uint256\"},{\"internalType\":\"uint8\",\"name\":\"_v\",\"type\":\"uint8\"},{\"internalType\":\"bytes32\",\"name\":\"_r\",\"type\":\"bytes32\"},{\"internalType\":\"bytes32\",\"name\":\"_s\",\"type\":\"bytes32\"}],\"name\":\"permit\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"redistributionPolicyAddress\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"renounceRole\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"revokeRole\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"sellContracts\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_targetAddress\",\"type\":\"address\"},{\"internalType\":\"bool\",\"name\":\"_included\",\"type\":\"bool\"}],\"name\":\"setExcluded\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_multiplier\",\"type\":\"uint256\"}],\"name\":\"setFeeMultiplier\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_cooldown\",\"type\":\"uint256\"}],\"name\":\"setFeeResetCooldown\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"setMaxSupply\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_address\",\"type\":\"address\"}],\"name\":\"setRedistributionPolicyAddress\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_targetAddress\",\"type\":\"address\"},{\"internalType\":\"bool\",\"name\":\"_included\",\"type\":\"bool\"}],\"name\":\"setSellContracts\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_fee\",\"type\":\"uint256\"}],\"name\":\"setTaxFee\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_pair\",\"type\":\"address\"},{\"internalType\":\"bool\",\"name\":\"_included\",\"type\":\"bool\"}],\"name\":\"setTrackedPair\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_burner\",\"type\":\"address\"}],\"name\":\"setupBurner\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_minter\",\"type\":\"address\"}],\"name\":\"setupMinter\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes4\",\"name\":\"interfaceId\",\"type\":\"bytes4\"}],\"name\":\"supportsInterface\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"symbol\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"tokenPairs\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalSupply\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_recipient\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"transfer\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"success_\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_sender\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_recipient\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"transferFrom\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"success_\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"uniswapV2Pair\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"uniswapV2Router\",\"outputs\":[{\"internalType\":\"contract IUniswapV2Router02\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"votingCheckpoints\",\"outputs\":[{\"internalType\":\"uint128\",\"name\":\"blockNumber\",\"type\":\"uint128\"},{\"internalType\":\"uint256\",\"name\":\"votes\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"}]","ContractName":"Kibble","CompilerVersion":"v0.8.4+commit.c7e474f2","OptimizationUsed":"1","Runs":"1","ConstructorArguments":"000000000000000000000000590c2b20f7920a2d21ed32a21b616906b4209a430000000000000000000000007a250d5630b4cf539739df2c5dacb4c659f2488d","EVMVersion":"Default","Library":"","LicenseType":"","Proxy":"0","Implementation":"","SwarmSource":""}]}