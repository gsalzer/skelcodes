{"status":"1","message":"OK","result":[{"SourceCode":"// SPDX-License-Identifier: MIT\r\npragma solidity 0.8.6;\r\n\r\n/**\r\n * @dev This is a base contract to aid in writing upgradeable contracts, or any kind of contract that will be deployed\r\n * behind a proxy. Since a proxied contract can't have a constructor, it's common to move constructor logic to an\r\n * external initializer function, usually called `initialize`. It then becomes necessary to protect this initializer\r\n * function so it can only be called once. The {initializer} modifier provided by this contract will have this effect.\r\n *\r\n * TIP: To avoid leaving the proxy in an uninitialized state, the initializer function should be called as early as\r\n * possible by providing the encoded function call as the `_data` argument to {ERC1967Proxy-constructor}.\r\n *\r\n * CAUTION: When used with inheritance, manual care must be taken to not invoke a parent initializer twice, or to ensure\r\n * that all initializers are idempotent. This is not verified automatically as constructors are by Solidity.\r\n */\r\nabstract contract Initializable {\r\n    /**\r\n     * @dev Indicates that the contract has been initialized.\r\n     */\r\n    bool private _initialized;\r\n\r\n    /**\r\n     * @dev Indicates that the contract is in the process of being initialized.\r\n     */\r\n    bool private _initializing;\r\n\r\n    /**\r\n     * @dev Modifier to protect an initializer function from being invoked twice.\r\n     */\r\n    modifier initializer() {\r\n        require(_initializing || !_initialized, \"Initializable: contract is already initialized\");\r\n\r\n        bool isTopLevelCall = !_initializing;\r\n        if (isTopLevelCall) {\r\n            _initializing = true;\r\n            _initialized = true;\r\n        }\r\n\r\n        _;\r\n\r\n        if (isTopLevelCall) {\r\n            _initializing = false;\r\n        }\r\n    }\r\n}\r\n\r\n\r\n/*\r\n * @dev Provides information about the current execution context, including the\r\n * sender of the transaction and its data. While these are generally available\r\n * via msg.sender and msg.data, they should not be accessed in such a direct\r\n * manner, since when dealing with meta-transactions the account sending and\r\n * paying for execution may not be the actual sender (as far as an application\r\n * is concerned).\r\n *\r\n * This contract is only required for intermediate, library-like contracts.\r\n */\r\nabstract contract ContextUpgradeable is Initializable {\r\n    function __Context_init() internal initializer {\r\n        __Context_init_unchained();\r\n    }\r\n\r\n    function __Context_init_unchained() internal initializer {\r\n    }\r\n    function _msgSender() internal view virtual returns (address) {\r\n        return msg.sender;\r\n    }\r\n\r\n    function _msgData() internal view virtual returns (bytes calldata) {\r\n        return msg.data;\r\n    }\r\n    uint256[50] private __gap;\r\n}\r\n\r\n\r\n/**\r\n * @dev Interface of the ERC20 standard as defined in the EIP.\r\n */\r\ninterface IERC20 {\r\n    /**\r\n     * @dev Returns the amount of tokens in existence.\r\n     */\r\n    function totalSupply() external view returns (uint256);\r\n\r\n    /**\r\n     * @dev Returns the amount of tokens owned by `account`.\r\n     */\r\n    function balanceOf(address account) external view returns (uint256);\r\n\r\n    /**\r\n     * @dev Moves `amount` tokens from the caller's account to `recipient`.\r\n     *\r\n     * Returns a boolean value indicating whether the operation succeeded.\r\n     *\r\n     * Emits a {Transfer} event.\r\n     */\r\n    function transfer(address recipient, uint256 amount) external returns (bool);\r\n\r\n    /**\r\n     * @dev Returns the remaining number of tokens that `spender` will be\r\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\r\n     * zero by default.\r\n     *\r\n     * This value changes when {approve} or {transferFrom} are called.\r\n     */\r\n    function allowance(address owner, address spender) external view returns (uint256);\r\n\r\n    /**\r\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\r\n     *\r\n     * Returns a boolean value indicating whether the operation succeeded.\r\n     *\r\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\r\n     * that someone may use both the old and the new allowance by unfortunate\r\n     * transaction ordering. One possible solution to mitigate this race\r\n     * condition is to first reduce the spender's allowance to 0 and set the\r\n     * desired value afterwards:\r\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\r\n     *\r\n     * Emits an {Approval} event.\r\n     */\r\n    function approve(address spender, uint256 amount) external returns (bool);\r\n\r\n    /**\r\n     * @dev Moves `amount` tokens from `sender` to `recipient` using the\r\n     * allowance mechanism. `amount` is then deducted from the caller's\r\n     * allowance.\r\n     *\r\n     * Returns a boolean value indicating whether the operation succeeded.\r\n     *\r\n     * Emits a {Transfer} event.\r\n     */\r\n    function transferFrom(\r\n        address sender,\r\n        address recipient,\r\n        uint256 amount\r\n    ) external returns (bool);\r\n\r\n    /**\r\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\r\n     * another (`to`).\r\n     *\r\n     * Note that `value` may be zero.\r\n     */\r\n    event Transfer(address indexed from, address indexed to, uint256 value);\r\n\r\n    /**\r\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\r\n     * a call to {approve}. `value` is the new allowance.\r\n     */\r\n    event Approval(address indexed owner, address indexed spender, uint256 value);\r\n}\r\n\r\n/**\r\n * @dev Interface for the optional metadata functions from the ERC20 standard.\r\n *\r\n * _Available since v4.1._\r\n */\r\ninterface IERC20Metadata is IERC20 {\r\n    /**\r\n     * @dev Returns the name of the token.\r\n     */\r\n    function name() external view returns (string memory);\r\n\r\n    /**\r\n     * @dev Returns the symbol of the token.\r\n     */\r\n    function symbol() external view returns (string memory);\r\n\r\n    /**\r\n     * @dev Returns the decimals places of the token.\r\n     */\r\n    function decimals() external view returns (uint8);\r\n}\r\n\r\n/**\r\n * @dev Contract module which provides a basic access control mechanism, where\r\n * there is an account (an owner) that can be granted exclusive access to\r\n * specific functions.\r\n *\r\n * By default, the owner account will be the one that deploys the contract. This\r\n * can later be changed with {transferOwnership}.\r\n *\r\n * This module is used through inheritance. It will make available the modifier\r\n * `onlyOwner`, which can be applied to your functions to restrict their use to\r\n * the owner.\r\n */\r\nabstract contract OwnableUpgradeable is Initializable, ContextUpgradeable {\r\n    address private _owner;\r\n\r\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\r\n\r\n    /**\r\n     * @dev Initializes the contract setting the deployer as the initial owner.\r\n     */\r\n    function __Ownable_init() internal initializer {\r\n        __Context_init_unchained();\r\n        __Ownable_init_unchained();\r\n    }\r\n\r\n    function __Ownable_init_unchained() internal initializer {\r\n        _setOwner(_msgSender());\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the address of the current owner.\r\n     */\r\n    function owner() public view virtual returns (address) {\r\n        return _owner;\r\n    }\r\n\r\n    /**\r\n     * @dev Throws if called by any account other than the owner.\r\n     */\r\n    modifier onlyOwner() {\r\n        require(owner() == _msgSender(), \"Ownable: caller is not the owner\");\r\n        _;\r\n    }\r\n\r\n    /**\r\n     * @dev Leaves the contract without owner. It will not be possible to call\r\n     * `onlyOwner` functions anymore. Can only be called by the current owner.\r\n     *\r\n     * NOTE: Renouncing ownership will leave the contract without an owner,\r\n     * thereby removing any functionality that is only available to the owner.\r\n     */\r\n    function renounceOwnership() public virtual onlyOwner {\r\n        _setOwner(address(0));\r\n    }\r\n\r\n    /**\r\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\r\n     * Can only be called by the current owner.\r\n     */\r\n    function transferOwnership(address newOwner) public virtual onlyOwner {\r\n        require(newOwner != address(0), \"Ownable: new owner is the zero address\");\r\n        _setOwner(newOwner);\r\n    }\r\n\r\n    function _setOwner(address newOwner) private {\r\n        address oldOwner = _owner;\r\n        _owner = newOwner;\r\n        emit OwnershipTransferred(oldOwner, newOwner);\r\n    }\r\n    uint256[49] private __gap;\r\n}\r\n\r\ninterface IController {\r\n    function getClusterAmountFromEth(uint256 _ethAmount, address _cluster) external view returns (uint256);\r\n\r\n    function addClusterToRegister(address indexAddr) external;\r\n\r\n    function getDHVPriceInETH(address _cluster) external view returns (uint256);\r\n\r\n    function getUnderlyingsInfo(address _cluster, uint256 _ethAmount)\r\n        external\r\n        view\r\n        returns (\r\n            uint256[] memory,\r\n            uint256[] memory,\r\n            uint256,\r\n            uint256\r\n        );\r\n\r\n    function getUnderlyingsAmountsFromClusterAmount(uint256 _clusterAmount, address _clusterAddress) external view returns (uint256[] memory);\r\n\r\n    function getEthAmountFromUnderlyingsAmounts(uint256[] memory _underlyingsAmounts, address _cluster) external view returns (uint256);\r\n\r\n    function adapters(address _cluster) external view returns (address);\r\n\r\n    function dhvTokenInstance() external view returns (address);\r\n\r\n    function getDepositComission(address _cluster, uint256 _ethValue) external view returns (uint256);\r\n\r\n    function getRedeemComission(address _cluster, uint256 _ethValue) external view returns (uint256);\r\n\r\n    function getClusterPrice(address _cluster) external view returns (uint256);\r\n}\r\n\r\n\r\ninterface IClusterToken {\r\n    function assemble(uint256 clusterAmount, bool coverDhvWithEth) external payable returns (uint256);\r\n\r\n    function disassemble(uint256 indexAmount, bool coverDhvWithEth) external;\r\n\r\n    function withdrawToAccumulation(uint256 _clusterAmount) external;\r\n\r\n    function refundFromAccumulation(uint256 _clusterAmount) external;\r\n\r\n    function returnDebtFromAccumulation(uint256[] calldata _amounts, uint256 _clusterAmount) external;\r\n\r\n    function optimizeProportion(uint256[] memory updatedShares) external returns (uint256[] memory debt);\r\n\r\n    function getUnderlyingInCluster() external view returns (uint256[] calldata);\r\n\r\n    function getUnderlyings() external view returns (address[] calldata);\r\n\r\n    function getUnderlyingBalance(address _underlying) external view returns (uint256);\r\n\r\n    function getUnderlyingsAmountsFromClusterAmount(uint256 _clusterAmount) external view returns (uint256[] calldata);\r\n\r\n    function clusterTokenLock() external view returns (uint256);\r\n\r\n    function clusterLock(address _token) external view returns (uint256);\r\n\r\n    function controllerChange(address) external;\r\n\r\n    function assembleByAdapter(uint256 _clusterAmount) external;\r\n\r\n    function disassembleByAdapter(uint256 _clusterAmount) external;\r\n}\r\n\r\ninterface IDexAdapter {\r\n    function swapETHToUnderlying(address underlying, uint256 underlyingAmount) external payable;\r\n\r\n    function swapUnderlyingsToETH(uint256[] memory underlyingAmounts, address[] memory underlyings) external;\r\n\r\n    function swapTokenToToken(\r\n        uint256 _amountToSwap,\r\n        address _tokenToSwap,\r\n        address _tokenToReceive\r\n    ) external returns (uint256);\r\n\r\n    function getUnderlyingAmount(\r\n        uint256 _amount,\r\n        address _tokenToSwap,\r\n        address _tokenToReceive\r\n    ) external view returns (uint256);\r\n\r\n    function getPath(address _tokenToSwap, address _tokenToReceive) external view returns (address[] memory);\r\n\r\n    function getTokensPrices(address[] memory _tokens) external view returns (uint256[] memory);\r\n\r\n    function getEthPrice() external view returns (uint256);\r\n\r\n    function getDHVPriceInETH(address _dhvToken) external view returns (uint256);\r\n\r\n    function WETH() external view returns (address);\r\n\r\n    function getEthAmountWithSlippage(uint256 _amount, address _tokenToSwap) external view returns (uint256);\r\n}\r\n\r\n/// @title Controller\r\n/// @author Blaize.tech team\r\n/// @notice Contract for connections between contracts\r\ncontract Controller is OwnableUpgradeable, IController {\r\n    /// @notice Coefficient decimal for underlyings proportion\r\n    uint256 public constant SHARES_DECIMALS = 10**6;\r\n    /// @notice cluster Tokens decimals\r\n    uint256 public constant CLUSTER_TOKEN_DECIMALS = 10**18;\r\n\r\n    /// @notice Instance of the DHV token instance\r\n    address public override dhvTokenInstance;\r\n    /// @notice Address of the cluster Factory SC\r\n    address public clusterFactoryAddress;\r\n    /// @notice All registered clusters\r\n    address[] public clusterRegister;\r\n    /// @notice Stores addreses or dex-adapters for clusters.\r\n    mapping(address => address) public override adapters;\r\n\r\n    /// @notice Stores deposit comissions for clusters\r\n    mapping(address => uint256) public depositComission;\r\n\r\n    /// @notice Stores redeem comissions for clusters\r\n    mapping(address => uint256) public redeemComission;\r\n\r\n    /// @notice Restricts from calling function anyone but clusterFactory contract.\r\n    modifier onlyClusterFactory() {\r\n        require(_msgSender() == owner() || _msgSender() == clusterFactoryAddress);\r\n        _;\r\n    }\r\n\r\n    /// @notice Performs initial setup.\r\n    /// @param _dhvTokenAddress Address of the DVH token SC.\r\n    function initialize(address _dhvTokenAddress) external initializer {\r\n        require(_dhvTokenAddress != address(0), \"Zero address\");\r\n        dhvTokenInstance = _dhvTokenAddress;\r\n\r\n        __Ownable_init();\r\n    }\r\n\r\n    /**********\r\n     * ADMIN INTERFACE\r\n     **********/\r\n\r\n    /// @notice Sets comission (less than accuracy decimals) for the cluster assemble.\r\n    /// @param _cluster Cluster address.\r\n    /// @param _comission Comission percent.\r\n    function setDepositComission(address _cluster, uint256 _comission) external onlyOwner {\r\n        require(_comission < SHARES_DECIMALS, \"Incorrect number\");\r\n        depositComission[_cluster] = _comission;\r\n    }\r\n\r\n    /// @notice Sets comission (less than accuracy decimals) for the cluster disassemble.\r\n    /// @param _cluster Cluster address.\r\n    /// @param _comission Comission percent.\r\n    function setRedeemComission(address _cluster, uint256 _comission) external onlyOwner {\r\n        require(_comission < SHARES_DECIMALS, \"Incorrect number\");\r\n        redeemComission[_cluster] = _comission;\r\n    }\r\n\r\n    /// @notice Sets an address of cluster factory contract.\r\n    /// @param _clusterFactoryAddress Address of cluster factory.\r\n    function setClusterFactoryAddress(address _clusterFactoryAddress) external onlyOwner {\r\n        require(_clusterFactoryAddress != address(0), \"Zero address\");\r\n        clusterFactoryAddress = _clusterFactoryAddress;\r\n    }\r\n\r\n    /// @notice Sets up a swap router for cluster.\r\n    /// @param _cluster Address of an existing ClusterToken.\r\n    /// @param _adapter Address of swap router.\r\n    function setAdapterForCluster(address _cluster, address _adapter) external onlyOwner {\r\n        require(_cluster != address(0) && _adapter != address(0), \"Zero address\");\r\n        adapters[_cluster] = _adapter;\r\n    }\r\n\r\n    /// @notice Add new cluster address to the list of all cluster addresses in DeHive system.\r\n    /// @param clusterAddr Address of the new token cluster contract.\r\n    function addClusterToRegister(address clusterAddr) external override onlyClusterFactory {\r\n        require(clusterAddr != address(0), \"Zero address\");\r\n        for (uint256 i = 0; i < clusterRegister.length; i++) {\r\n            if (clusterRegister[i] == clusterAddr) {\r\n                revert(\"Cluster is registered\");\r\n            }\r\n        }\r\n        clusterRegister.push(clusterAddr);\r\n    }\r\n\r\n    /// @notice Changes the controller address for the chosen cluster\r\n    /// @notice Each cluster may have own controller. Though only controller can set new controller\r\n    /// @notice Cluster is added to the Controller registry. Since we change the controller, we unregister the cluster\r\n    /// Cluster registration in the new cluster will be performed separately\r\n    /// @param _cluster Cluster address\r\n    /// @param _controller New controller address\r\n    function controllerChange(address _cluster, address _controller) external onlyOwner {\r\n        for (uint256 i = 0; i < clusterRegister.length; i++) {\r\n            if (clusterRegister[i] == _cluster) {\r\n                clusterRegister[i] = clusterRegister[clusterRegister.length - 1];\r\n                clusterRegister.pop();\r\n                break;\r\n            }\r\n        }\r\n        // Change address within the cluster\r\n        IClusterToken(_cluster).controllerChange(_controller);\r\n    }\r\n\r\n    /**********\r\n     * VIEW INTERFACE\r\n     **********/\r\n\r\n    /// @notice Get list of indices currently registered.\r\n    /// @return clusterRegister array.\r\n    function getIndicesList() external view returns (address[] memory) {\r\n        return clusterRegister;\r\n    }\r\n\r\n    /// @notice Calculate amount of cluster user will receive from depositing certain amount of eth for specified cluster\r\n    /// @param _ethAmount Eth amount user sent to purchase cluster.\r\n    /// @param _cluster Cluster address.\r\n    /// @return Amount of cluster user can get according to current underlyings rates\r\n    function getClusterAmountFromEth(uint256 _ethAmount, address _cluster) external view override returns (uint256) {\r\n        address adapter = adapters[_cluster];\r\n\r\n        address[] memory _underlyings = IClusterToken(_cluster).getUnderlyings();\r\n        uint256[] memory _shares = IClusterToken(_cluster).getUnderlyingInCluster();\r\n\r\n        uint256[] memory prices = IDexAdapter(adapter).getTokensPrices(_underlyings);\r\n        (, uint256 proportionDenominator) = _getTokensProportions(_shares, prices);\r\n        return (_ethAmount * 10**18) / proportionDenominator;\r\n    }\r\n\r\n    /// @notice Calculates amounts of underlyings in some amount of cluster based on balances of cluster contract.\r\n    /// @dev Currently, returns all underlyings with 18 decimals.\r\n    /// @param _clusterAmount Amount of cluster to calculate underlyings from.\r\n    /// @param _clusterAddress Address of cluster token.\r\n    /// @return Array, which contains amounts of underlyings.\r\n    function getUnderlyingsAmountsFromClusterAmount(uint256 _clusterAmount, address _clusterAddress)\r\n        external\r\n        view\r\n        override\r\n        returns (uint256[] memory)\r\n    {\r\n        uint256 totalCluster = IERC20(_clusterAddress).totalSupply();\r\n        uint256 clusterShare = (_clusterAmount * CLUSTER_TOKEN_DECIMALS) / totalCluster;\r\n\r\n        address[] memory _underlyings = IClusterToken(_clusterAddress).getUnderlyings();\r\n        uint256[] memory underlyingsAmount = new uint256[](_underlyings.length);\r\n\r\n        for (uint256 i = 0; i < _underlyings.length; i++) {\r\n            uint256 amount = IClusterToken(_clusterAddress).getUnderlyingBalance(_underlyings[i]);\r\n            underlyingsAmount[i] = (amount * clusterShare) / CLUSTER_TOKEN_DECIMALS;\r\n        }\r\n\r\n        return underlyingsAmount;\r\n    }\r\n\r\n    /// @notice Calculates the amount of ETH, which we can get from underlying tokens amounts.\r\n    /// @param _underlyingsAmounts Array, which contains amount of each underlying.\r\n    /// @param _cluster Cluster address.\r\n    /// @return Amount of ETH, which can be got from underlyings amounts.\r\n    function getEthAmountFromUnderlyingsAmounts(uint256[] memory _underlyingsAmounts, address _cluster)\r\n        external\r\n        view\r\n        override\r\n        returns (uint256)\r\n    {\r\n        address[] memory _underlyings = IClusterToken(_cluster).getUnderlyings();\r\n        uint256 ethAmount = 0;\r\n        address weth = IDexAdapter(adapters[_cluster]).WETH();\r\n        for (uint256 i = 0; i < _underlyings.length; i++) {\r\n            ethAmount += IDexAdapter(adapters[_cluster]).getUnderlyingAmount(_underlyingsAmounts[i], _underlyings[i], weth);\r\n        }\r\n        return ethAmount;\r\n    }\r\n\r\n    /// @notice Calculates an amount of underlyings in some amount of eth.\r\n    /// @param _cluster Cluster to check info.\r\n    /// @param _clusterAmount Amount of cluster.\r\n    /// @return Array of underlyings amounts, array of portions of eth to spend on each underlying and the price of the cluster.\r\n    function getUnderlyingsInfo(address _cluster, uint256 _clusterAmount)\r\n        external\r\n        view\r\n        override\r\n        returns (\r\n            uint256[] memory,\r\n            uint256[] memory,\r\n            uint256,\r\n            uint256\r\n        )\r\n    {\r\n        address adapter = adapters[_cluster];\r\n        address[] memory _underlyings = IClusterToken(_cluster).getUnderlyings();\r\n        uint256[] memory _shares = IClusterToken(_cluster).getUnderlyingInCluster();\r\n\r\n        (, uint256 proportionDenominator) = _getTokensProportions(_shares, IDexAdapter(adapter).getTokensPrices(_underlyings));\r\n\r\n        uint256[] memory underlyingsAmounts = new uint256[](_underlyings.length);\r\n        uint256[] memory ethPortions = new uint256[](_underlyings.length);\r\n\r\n        uint256 ethAmount = 0;\r\n        for (uint256 i = 0; i < _underlyings.length; i++) {\r\n            underlyingsAmounts[i] = (_clusterAmount * _shares[i]) / SHARES_DECIMALS;\r\n            uint8 decimals = IERC20Metadata(_underlyings[i]).decimals();\r\n            if (decimals < 18) {\r\n                underlyingsAmounts[i] /= 10**(18 - decimals);\r\n            }\r\n\r\n            ethPortions[i] = IDexAdapter(adapter).getEthAmountWithSlippage(underlyingsAmounts[i], _underlyings[i]);\r\n            ethAmount += ethPortions[i];\r\n        }\r\n\r\n        return (underlyingsAmounts, ethPortions, proportionDenominator, ethAmount);\r\n    }\r\n\r\n    /// @notice Returns DHV price from the chosen DEX adapter\r\n    /// @param _cluster The cluster address to get the adapter from\r\n    /// @return DHV price in ETH\r\n    function getDHVPriceInETH(address _cluster) external view override returns (uint256) {\r\n        return IDexAdapter(adapters[_cluster]).getDHVPriceInETH(dhvTokenInstance);\r\n    }\r\n\r\n    /// @notice Returns price of the cluster based on the weighted sum of underlyings prices\r\n    /// ClusterPrice = underlying1_amount * underlying1_price + underlying2_amount * underlying2_price + ...\r\n    /// Underlyings are got from the cluster through the interface\r\n    /// @param _cluster The cluster address\r\n    /// @return The weighted price of the cluster\r\n    function getClusterPrice(address _cluster) external view override returns (uint256) {\r\n        address adapter = adapters[_cluster];\r\n        address[] memory _underlyings = IClusterToken(_cluster).getUnderlyings();\r\n        uint256[] memory _shares = IClusterToken(_cluster).getUnderlyingInCluster();\r\n\r\n        uint256[] memory prices = IDexAdapter(adapter).getTokensPrices(_underlyings);\r\n        (, uint256 proportionDenominator) = _getTokensProportions(_shares, prices);\r\n\r\n        return proportionDenominator;\r\n    }\r\n\r\n    /// @notice Calculates the proportions of underlyings.\r\n    /// @param _shares Array of underlyings' shares in cluster token.\r\n    /// @param _prices Array of underlyings' prices in $.\r\n    /// @return Underlyings proportions based on shares and prices and proportion denominator.\r\n    function _getTokensProportions(uint256[] memory _shares, uint256[] memory _prices) internal pure returns (uint256[] memory, uint256) {\r\n        uint256[] memory proportions = new uint256[](_shares.length);\r\n        uint256 proportionDenominator = 0;\r\n        for (uint256 i = 0; i < _shares.length; i++) {\r\n            proportions[i] = (_shares[i] * _prices[i]) / SHARES_DECIMALS;\r\n            proportionDenominator += proportions[i];\r\n        }\r\n        return (proportions, proportionDenominator);\r\n    }\r\n\r\n    /// @notice Returns the comission for the deposit for the chosen cluster.\r\n    /// @param _cluster Address of the cluster\r\n    /// @param _ethValue Eth equivalent to calculate fee from.\r\n    /// @return Equivalent of the fee in ETH.\r\n    function getDepositComission(address _cluster, uint256 _ethValue) external view override returns (uint256) {\r\n        return (_ethValue * depositComission[_cluster]) / SHARES_DECIMALS;\r\n    }\r\n\r\n    /// @notice Returns the comission for the cluster redemption.\r\n    /// @param _cluster Address of the cluster\r\n    /// @param _ethValue Eth equivalent to calculate fee from.\r\n    /// @return Equivalent of the fee in ETH.\r\n    function getRedeemComission(address _cluster, uint256 _ethValue) external view override returns (uint256) {\r\n        return (_ethValue * redeemComission[_cluster]) / SHARES_DECIMALS;\r\n    }\r\n}","ABI":"[{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"CLUSTER_TOKEN_DECIMALS\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"SHARES_DECIMALS\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"adapters\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"clusterAddr\",\"type\":\"address\"}],\"name\":\"addClusterToRegister\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"clusterFactoryAddress\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"clusterRegister\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_cluster\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_controller\",\"type\":\"address\"}],\"name\":\"controllerChange\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"depositComission\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"dhvTokenInstance\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_ethAmount\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"_cluster\",\"type\":\"address\"}],\"name\":\"getClusterAmountFromEth\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_cluster\",\"type\":\"address\"}],\"name\":\"getClusterPrice\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_cluster\",\"type\":\"address\"}],\"name\":\"getDHVPriceInETH\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_cluster\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_ethValue\",\"type\":\"uint256\"}],\"name\":\"getDepositComission\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256[]\",\"name\":\"_underlyingsAmounts\",\"type\":\"uint256[]\"},{\"internalType\":\"address\",\"name\":\"_cluster\",\"type\":\"address\"}],\"name\":\"getEthAmountFromUnderlyingsAmounts\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getIndicesList\",\"outputs\":[{\"internalType\":\"address[]\",\"name\":\"\",\"type\":\"address[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_cluster\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_ethValue\",\"type\":\"uint256\"}],\"name\":\"getRedeemComission\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_clusterAmount\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"_clusterAddress\",\"type\":\"address\"}],\"name\":\"getUnderlyingsAmountsFromClusterAmount\",\"outputs\":[{\"internalType\":\"uint256[]\",\"name\":\"\",\"type\":\"uint256[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_cluster\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_clusterAmount\",\"type\":\"uint256\"}],\"name\":\"getUnderlyingsInfo\",\"outputs\":[{\"internalType\":\"uint256[]\",\"name\":\"\",\"type\":\"uint256[]\"},{\"internalType\":\"uint256[]\",\"name\":\"\",\"type\":\"uint256[]\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_dhvTokenAddress\",\"type\":\"address\"}],\"name\":\"initialize\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"redeemComission\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_cluster\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_adapter\",\"type\":\"address\"}],\"name\":\"setAdapterForCluster\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_clusterFactoryAddress\",\"type\":\"address\"}],\"name\":\"setClusterFactoryAddress\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_cluster\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_comission\",\"type\":\"uint256\"}],\"name\":\"setDepositComission\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_cluster\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_comission\",\"type\":\"uint256\"}],\"name\":\"setRedeemComission\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}]","ContractName":"Controller","CompilerVersion":"v0.8.6+commit.11564f7e","OptimizationUsed":"1","Runs":"99999","ConstructorArguments":"","EVMVersion":"Default","Library":"","LicenseType":"MIT","Proxy":"0","Implementation":"","SwarmSource":"ipfs://d4e1d962716ac62dcebf874ffbacd74c8d4cebc71dc057f135080012d97fb067"}]}