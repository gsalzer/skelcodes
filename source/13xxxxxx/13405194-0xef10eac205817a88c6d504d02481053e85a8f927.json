{"status":"1","message":"OK","result":[{"SourceCode":"{{\r\n  \"language\": \"Solidity\",\r\n  \"sources\": {\r\n    \"./contracts/governance/GROHodler.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: AGPLv3\\npragma solidity 0.8.4;\\n\\nimport \\\"@openzeppelin/contracts/access/Ownable.sol\\\";\\n\\ninterface IHodler {\\n    function totalBonus() external view returns (uint256);\\n    function correctionAmount() external view returns (uint256);\\n}\\n\\ninterface IVester {\\n    function vestingBalance(address _account) external view returns (uint256);\\n    function totalGroove() external view returns (uint256);\\n    function vest(address account, uint256 amount) external;\\n}\\n\\n/// @notice GRP vesting bonus claims contract - Where all unvested GRO are returned if user exits vesting contract early\\ncontract GROHodler is Ownable {\\n    uint256 public constant DEFAULT_DECIMAL_FACTOR = 1E18;\\n    // The main vesting contract\\n    address public immutable vester;\\n    // Total amount of unvested GRO that has been tossed aside\\n    uint256 public totalBonus;\\n    // Estimation of total unvested GRO can become unreliable if there is a significant\\n    //  amount of users who have vesting periods that exceed their vesting end date.\\n    //  We use a manual correction variable to deal with this issue for now.\\n    uint256 public correctionAmount;\\n    // How long you have to wait between claims\\n    uint256 public claimDelay;\\n    // Contract that can help maintain the bonus contract by adjusting variables\\n    address public maintainer;\\n    \\n    // keep track of users last claim\\n    mapping(address => uint256) public userClaims;\\n    bool paused = true;\\n\\n    event LogBonusAdded(uint256 amount);\\n    event LogBonusClaimed(address user, uint256 amount);\\n    event LogNewClaimDelay(uint256 delay);\\n    event LogNewCorrectionVariable(uint256 correction);\\n    event LogNewMaintainer(address newMaintainer);\\n    event LogNewStatus(bool status);\\n\\n    constructor(address _vester, address oldHodler) {\\n        vester = _vester;\\n        // if we migrated to a new bonus contract, make sure to add the old bonus and correction\\n        if (oldHodler != address(0)) {\\n            totalBonus = IHodler(oldHodler).totalBonus();\\n            correctionAmount = IHodler(oldHodler).correctionAmount();\\n        }\\n    }\\n\\n    /// @notice every time a users exits a vesting position, the penalty gets added to this contract\\n    /// @param amount user penealty amount\\n    function add(uint256 amount) external {\\n        require(msg.sender == vester);\\n        totalBonus += amount;\\n        emit LogBonusAdded(amount);\\n    }\\n\\n    /// @notice Set a new maintainer\\n    /// @param newMaintainer address of new maintainer\\n    /// @dev Maintainer will mostly be used to be able to change the correctionValue\\n    ///  on short notice, as this can change on short notice depending on if users interact with\\n    ///  their position in the vesting contract\\n    function setMaintainer(address newMaintainer) external onlyOwner {\\n        maintainer = newMaintainer;\\n        emit LogNewMaintainer(newMaintainer);\\n    }\\n\\n    /// @notice Start or stop the bonus contract\\n    /// @param pause Contract Pause state\\n    function setStatus(bool pause) external {\\n        require(msg.sender == maintainer || msg.sender == owner(), 'setCorrectionVariable: !authorized');\\n        paused = pause;\\n        emit LogNewStatus(pause);\\n    }\\n\\n    /// @notice maintainer can correct total amount of vested GRO to adjust for drift of central curve vs user curves\\n    /// @param newCorrection a positive number to deduct from the unvested GRO to correct for central drift\\n    function setCorrectionVariable(uint256 newCorrection) external {\\n        require(msg.sender == maintainer || msg.sender == owner(), 'setCorrectionVariable: !authorized');\\n        require(newCorrection <= IVester(vester).totalGroove(), 'setCorrectionVariable: correctionAmount to large');\\n        correctionAmount = newCorrection;\\n        emit LogNewCorrectionVariable(newCorrection);\\n    }\\n\\n    /// @notice after every bonus claim, a user has to wait some time before they can claim again\\n    /// @param delay time delay until next claim is possible\\n    function setClaimDelay(uint256 delay) external onlyOwner {\\n        claimDelay = delay;\\n        emit LogNewClaimDelay(delay);\\n    }\\n\\n    /// @notice Get the pending bonus a user can claim\\n    function getPendingBonus() public view returns (uint256) {\\n        uint256 userGroove = IVester(vester).vestingBalance(msg.sender);\\n        // if the user doesnt have a vesting position, they cannot claim\\n        if (userGroove == 0) {\\n            return 0;\\n        }\\n        // if for some reason the user has a larger vesting position than the\\n        //  current vesting position - correctionAmount, then give them the whole bonus.\\n        // This should only happen if: theres only one vesting position, someone forgot to\\n        // update the correctionAmount;\\n        uint256 globalGroove = IVester(vester).totalGroove() - correctionAmount;\\n        if (userGroove >= globalGroove) {\\n            return totalBonus;\\n        }\\n        uint256 userAmount = userGroove * totalBonus / globalGroove;\\n        return userAmount; \\n    }\\n\\n    /// @notice User claims available bonus\\n    function claim() external returns (uint256) {\\n        // user cannot claim if they have claimed recently or the contract is paused\\n        if (userClaims[msg.sender] + claimDelay >= block.timestamp || paused) {\\n            return 0;\\n        }\\n        uint256 userAmount = getPendingBonus();\\n        if (userAmount > 0) {\\n            userClaims[msg.sender] = block.timestamp;\\n            totalBonus -= userAmount;\\n            IVester(vester).vest(msg.sender, userAmount);\\n            emit LogBonusClaimed(msg.sender, userAmount);\\n        }\\n        return userAmount;\\n    }\\n\\n    function canClaim() external view returns (bool) {\\n        if (userClaims[msg.sender] + claimDelay >= block.timestamp || paused) {\\n            return false;\\n        }\\n        return true;\\n    }\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/access/Ownable.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../utils/Context.sol\\\";\\n\\n/**\\n * @dev Contract module which provides a basic access control mechanism, where\\n * there is an account (an owner) that can be granted exclusive access to\\n * specific functions.\\n *\\n * By default, the owner account will be the one that deploys the contract. This\\n * can later be changed with {transferOwnership}.\\n *\\n * This module is used through inheritance. It will make available the modifier\\n * `onlyOwner`, which can be applied to your functions to restrict their use to\\n * the owner.\\n */\\nabstract contract Ownable is Context {\\n    address private _owner;\\n\\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\\n\\n    /**\\n     * @dev Initializes the contract setting the deployer as the initial owner.\\n     */\\n    constructor() {\\n        _setOwner(_msgSender());\\n    }\\n\\n    /**\\n     * @dev Returns the address of the current owner.\\n     */\\n    function owner() public view virtual returns (address) {\\n        return _owner;\\n    }\\n\\n    /**\\n     * @dev Throws if called by any account other than the owner.\\n     */\\n    modifier onlyOwner() {\\n        require(owner() == _msgSender(), \\\"Ownable: caller is not the owner\\\");\\n        _;\\n    }\\n\\n    /**\\n     * @dev Leaves the contract without owner. It will not be possible to call\\n     * `onlyOwner` functions anymore. Can only be called by the current owner.\\n     *\\n     * NOTE: Renouncing ownership will leave the contract without an owner,\\n     * thereby removing any functionality that is only available to the owner.\\n     */\\n    function renounceOwnership() public virtual onlyOwner {\\n        _setOwner(address(0));\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Can only be called by the current owner.\\n     */\\n    function transferOwnership(address newOwner) public virtual onlyOwner {\\n        require(newOwner != address(0), \\\"Ownable: new owner is the zero address\\\");\\n        _setOwner(newOwner);\\n    }\\n\\n    function _setOwner(address newOwner) private {\\n        address oldOwner = _owner;\\n        _owner = newOwner;\\n        emit OwnershipTransferred(oldOwner, newOwner);\\n    }\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/utils/Context.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Provides information about the current execution context, including the\\n * sender of the transaction and its data. While these are generally available\\n * via msg.sender and msg.data, they should not be accessed in such a direct\\n * manner, since when dealing with meta-transactions the account sending and\\n * paying for execution may not be the actual sender (as far as an application\\n * is concerned).\\n *\\n * This contract is only required for intermediate, library-like contracts.\\n */\\nabstract contract Context {\\n    function _msgSender() internal view virtual returns (address) {\\n        return msg.sender;\\n    }\\n\\n    function _msgData() internal view virtual returns (bytes calldata) {\\n        return msg.data;\\n    }\\n}\\n\"\r\n    }\r\n  },\r\n  \"settings\": {\r\n    \"metadata\": {\r\n      \"useLiteralContent\": true\r\n    },\r\n    \"optimizer\": {\r\n      \"enabled\": true,\r\n      \"runs\": 200\r\n    },\r\n    \"outputSelection\": {\r\n      \"*\": {\r\n        \"*\": [\r\n          \"evm.bytecode\",\r\n          \"evm.deployedBytecode\",\r\n          \"abi\"\r\n        ]\r\n      }\r\n    }\r\n  }\r\n}}","ABI":"[{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_vester\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"oldHodler\",\"type\":\"address\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"LogBonusAdded\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"LogBonusClaimed\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"delay\",\"type\":\"uint256\"}],\"name\":\"LogNewClaimDelay\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"correction\",\"type\":\"uint256\"}],\"name\":\"LogNewCorrectionVariable\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"newMaintainer\",\"type\":\"address\"}],\"name\":\"LogNewMaintainer\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"bool\",\"name\":\"status\",\"type\":\"bool\"}],\"name\":\"LogNewStatus\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"DEFAULT_DECIMAL_FACTOR\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"add\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"canClaim\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"claim\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"claimDelay\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"correctionAmount\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getPendingBonus\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"maintainer\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"delay\",\"type\":\"uint256\"}],\"name\":\"setClaimDelay\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"newCorrection\",\"type\":\"uint256\"}],\"name\":\"setCorrectionVariable\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newMaintainer\",\"type\":\"address\"}],\"name\":\"setMaintainer\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bool\",\"name\":\"pause\",\"type\":\"bool\"}],\"name\":\"setStatus\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalBonus\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"userClaims\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"vester\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"}]","ContractName":"GROHodler","CompilerVersion":"v0.8.4+commit.c7e474f2","OptimizationUsed":"1","Runs":"200","ConstructorArguments":"000000000000000000000000a28693bf01dc261887b238646bb9636cb3a3730b0000000000000000000000000000000000000000000000000000000000000000","EVMVersion":"Default","Library":"","LicenseType":"Unknown","Proxy":"0","Implementation":"","SwarmSource":"ipfs://a6b466ee3e9bd5b38696cc18254d248c66d7ad27435b3c827e9a3f2cd05decde"}]}