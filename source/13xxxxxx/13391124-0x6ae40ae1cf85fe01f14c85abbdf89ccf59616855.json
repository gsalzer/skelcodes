{"status":"1","message":"OK","result":[{"SourceCode":"// File: contracts/v6/interface/KeeperCompatibleInterface.sol\r\n\r\n// SPDX-License-Identifier: Unlicensed\r\npragma solidity =0.6.12;\r\n\r\ninterface KeeperCompatibleInterface {\r\n\r\n  /**\r\n   * @notice checks if the contract requires work to be done.\r\n   * @param checkData data passed to the contract when checking for upkeep.\r\n   * @return upkeepNeeded boolean to indicate whether the keeper should call\r\n   * performUpkeep or not.\r\n   * @return performData bytes that the keeper should call performUpkeep with,\r\n   * if upkeep is needed.\r\n   */\r\n  function checkUpkeep(\r\n    bytes calldata checkData\r\n  )\r\n    external\r\n    returns (\r\n      bool upkeepNeeded,\r\n      bytes memory performData\r\n    );\r\n\r\n  /**\r\n   * @notice Performs work on the contract. Executed by the keepers, via the registry.\r\n   * @param performData is the data which was passed back from the checkData\r\n   * simulation.\r\n   */\r\n  function performUpkeep(\r\n    bytes calldata performData\r\n  ) external;\r\n}\r\n\r\n// File: contracts/v6/interface/IOmsPolicy.sol\r\n\r\npragma solidity =0.6.12;\r\n\r\ninterface IOmsPolicy {\r\n    function setTargetPrice(uint256 _targetPrice) external;\r\n    function targetPrice() external view returns (uint256);\r\n}\r\n\r\n// File: contracts/v6/interface/EACAggregatorProxy.sol\r\n\r\npragma solidity =0.6.12;\r\n\r\ninterface EACAggregatorProxy {\r\n    function latestAnswer() external view returns (int256); \r\n    function decimals() external view returns (uint8);\r\n}\r\n\r\n// File: contracts/v6/library/SafeMath.sol\r\n\r\npragma solidity =0.6.12;\r\n\r\n/**\r\n * @dev Wrappers over Solidity's arithmetic operations with added overflow\r\n * checks.\r\n *\r\n * Arithmetic operations in Solidity wrap on overflow. This can easily result\r\n * in bugs, because programmers usually assume that an overflow raises an\r\n * error, which is the standard behavior in high level programming languages.\r\n * `SafeMath` restores this intuition by reverting the transaction when an\r\n * operation overflows.\r\n *\r\n * Using this library instead of the unchecked operations eliminates an entire\r\n * class of bugs, so it's recommended to use it always.\r\n */\r\n \r\nlibrary SafeMath {\r\n    /**\r\n     * @dev Returns the addition of two unsigned integers, reverting on\r\n     * overflow.\r\n     *\r\n     * Counterpart to Solidity's `+` operator.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - Addition cannot overflow.\r\n     */\r\n    function add(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        uint256 c = a + b;\r\n        require(c >= a, \"SafeMath: addition overflow\");\r\n\r\n        return c;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the subtraction of two unsigned integers, reverting on\r\n     * overflow (when the result is negative).\r\n     *\r\n     * Counterpart to Solidity's `-` operator.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - Subtraction cannot overflow.\r\n     */\r\n    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        return sub(a, b, \"SafeMath: subtraction overflow\");\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the subtraction of two unsigned integers, reverting with custom message on\r\n     * overflow (when the result is negative).\r\n     *\r\n     * Counterpart to Solidity's `-` operator.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - Subtraction cannot overflow.\r\n     */\r\n    function sub(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\r\n        require(b <= a, errorMessage);\r\n        uint256 c = a - b;\r\n\r\n        return c;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the multiplication of two unsigned integers, reverting on\r\n     * overflow.\r\n     *\r\n     * Counterpart to Solidity's `*` operator.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - Multiplication cannot overflow.\r\n     */\r\n    function mul(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        // Gas optimization: this is cheaper than requiring 'a' not being zero, but the\r\n        // benefit is lost if 'b' is also tested.\r\n        // See: https://github.com/OpenZeppelin/openzeppelin-contracts/pull/522\r\n        if (a == 0) {\r\n            return 0;\r\n        }\r\n\r\n        uint256 c = a * b;\r\n        require(c / a == b, \"SafeMath: multiplication overflow\");\r\n\r\n        return c;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the integer division of two unsigned integers. Reverts on\r\n     * division by zero. The result is rounded towards zero.\r\n     *\r\n     * Counterpart to Solidity's `/` operator. Note: this function uses a\r\n     * `revert` opcode (which leaves remaining gas untouched) while Solidity\r\n     * uses an invalid opcode to revert (consuming all remaining gas).\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - The divisor cannot be zero.\r\n     */\r\n    function div(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        return div(a, b, \"SafeMath: division by zero\");\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the integer division of two unsigned integers. Reverts with custom message on\r\n     * division by zero. The result is rounded towards zero.\r\n     *\r\n     * Counterpart to Solidity's `/` operator. Note: this function uses a\r\n     * `revert` opcode (which leaves remaining gas untouched) while Solidity\r\n     * uses an invalid opcode to revert (consuming all remaining gas).\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - The divisor cannot be zero.\r\n     */\r\n    function div(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\r\n        require(b > 0, errorMessage);\r\n        uint256 c = a / b;\r\n        // assert(a == b * c + a % b); // There is no case in which this doesn't hold\r\n\r\n        return c;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\r\n     * Reverts when dividing by zero.\r\n     *\r\n     * Counterpart to Solidity's `%` operator. This function uses a `revert`\r\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\r\n     * invalid opcode to revert (consuming all remaining gas).\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - The divisor cannot be zero.\r\n     */\r\n    function mod(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        return mod(a, b, \"SafeMath: modulo by zero\");\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\r\n     * Reverts with custom message when dividing by zero.\r\n     *\r\n     * Counterpart to Solidity's `%` operator. This function uses a `revert`\r\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\r\n     * invalid opcode to revert (consuming all remaining gas).\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - The divisor cannot be zero.\r\n     */\r\n    function mod(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\r\n        require(b != 0, errorMessage);\r\n        return a % b;\r\n    }\r\n}\r\n\r\n// File: contracts/v6/common/Context.sol\r\n\r\npragma solidity =0.6.12;\r\n\r\nabstract contract Context {\r\n    function _msgSender() internal view virtual returns (address payable) {\r\n        return msg.sender;\r\n    }\r\n\r\n    function _msgData() internal view virtual returns (bytes memory) {\r\n        this; // silence state mutability warning without generating bytecode - see https://github.com/ethereum/solidity/issues/2691\r\n        return msg.data;\r\n    }\r\n}\r\n\r\n// File: contracts/v6/common/Ownable.sol\r\n\r\npragma solidity =0.6.12;\r\n\r\n\r\n/**\r\n * @dev Contract module which provides a basic access control mechanism, where\r\n * there is an account (an owner) that can be granted exclusive access to\r\n * specific functions.\r\n *\r\n * By default, the owner account will be the one that deploys the contract. This\r\n * can later be changed with {transferOwnership}.\r\n *\r\n * This module is used through inheritance. It will make available the modifier\r\n * `onlyOwner`, which can be applied to your functions to restrict their use to\r\n * the owner.\r\n */\r\ncontract Ownable is Context {\r\n    address private _owner;\r\n    address private _previousOwner;\r\n    uint256 private _lockTime;\r\n\r\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\r\n\r\n    /**\r\n     * @dev Initializes the contract setting the deployer as the initial owner.\r\n     */\r\n    constructor () internal {\r\n        address msgSender = _msgSender();\r\n        _owner = msgSender;\r\n        emit OwnershipTransferred(address(0), msgSender);\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the address of the current owner.\r\n     */\r\n    function owner() public view returns (address) {\r\n        return _owner;\r\n    }\r\n\r\n    /**\r\n     * @dev Throws if called by any account other than the owner.\r\n     */\r\n    modifier onlyOwner() {\r\n        require(_owner == _msgSender(), \"Ownable: caller is not the owner\");\r\n        _;\r\n    }\r\n\r\n     /**\r\n     * @dev Leaves the contract without owner. It will not be possible to call\r\n     * `onlyOwner` functions anymore. Can only be called by the current owner.\r\n     *\r\n     * NOTE: Renouncing ownership will leave the contract without an owner,\r\n     * thereby removing any functionality that is only available to the owner.\r\n     */\r\n    function renounceOwnership() public virtual onlyOwner {\r\n        emit OwnershipTransferred(_owner, address(0));\r\n        _owner = address(0);\r\n    }\r\n\r\n    /**\r\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\r\n     * Can only be called by the current owner.\r\n     */\r\n    function transferOwnership(address newOwner) public virtual onlyOwner {\r\n        require(newOwner != address(0), \"Ownable: new owner is the zero address\");\r\n        emit OwnershipTransferred(_owner, newOwner);\r\n        _owner = newOwner;\r\n    }\r\n}\r\n\r\n// File: contracts/v6/OraclePrice.sol\r\n\r\npragma solidity =0.6.12;\r\npragma experimental ABIEncoderV2;\r\n\r\n\r\n\r\n\r\n\r\n\r\ncontract OraclePrice is Ownable, KeeperCompatibleInterface {\r\n    using SafeMath for uint256;\r\n\r\n    struct PriceLog {\r\n        int256 lastUpdatedPrice;\r\n    }\r\n\r\n    struct AverageLog {\r\n        int256 averageMovement;\r\n        int256 referenceRate;\r\n    }\r\n\r\n    struct OracleInfo {\r\n        address oracleAddress;\r\n        bool isActive;\r\n        bytes32 symbolHash;\r\n        int256 lastPrice; \r\n    }\r\n    \r\n    event LogTargetPriceUpdated(uint256 indexed performUpkeepCycle, uint256 timestampSec, int256 averageMovement, uint256 oldReferenceRate, uint256 newReferenceRate);\r\n    event LogReferenceRateDataUsed(uint256 indexed performUpkeepCycle, uint256 timestampSec, address oracleAddress, int256 oldPrice, int256 newPrice);\r\n\r\n    // Storing all the details of oracle address\r\n    OracleInfo[] public oracleInfo;\r\n\r\n    // OmsPolicy contract address\r\n    address public policyContract;\r\n\r\n    // More than this much time must pass between keepers operations.\r\n    uint public immutable interval;\r\n\r\n    // Block timestamp of last Keepers operations.\r\n    uint public lastTimeStamp;\r\n\r\n    // The number of keepers cycles since inception\r\n    uint public counter;\r\n\r\n    // PriceLog represents last price of each currency\r\n    mapping (address => PriceLog) public priceLog;\r\n\r\n    // AverageLog represents last average and ref rate of currency\r\n    AverageLog public averageLog;\r\n    \r\n    constructor(OracleInfo[] memory _oracles, address _policyContract, uint _updateInterval) public {\r\n        policyContract = _policyContract;\r\n        \r\n        for(uint256 i=0; i<_oracles.length; i++) {\r\n            OracleInfo memory oracle = _oracles[i];\r\n            oracleInfo.push(OracleInfo({\r\n                oracleAddress: oracle.oracleAddress,\r\n                isActive: oracle.isActive,\r\n                symbolHash: oracle.symbolHash,\r\n                lastPrice: 0\r\n            }));\r\n        }\r\n\r\n        interval = _updateInterval;\r\n        lastTimeStamp = 0;\r\n        counter = 0;\r\n    }\r\n\r\n    function getOracleInfoCount() public view returns (uint256) {\r\n        return oracleInfo.length;\r\n    }\r\n    \r\n    /**\r\n     * @param _oracleId index number of oracle address.\r\n     * Fetching updated price of perticular oracles from chainlink. \r\n     */\r\n    function getOraclePriceInUsd(uint256 _oracleId) public view returns (int256) {\r\n        OracleInfo storage oracle = oracleInfo[_oracleId];\r\n        int256 latestPrice = EACAggregatorProxy(oracle.oracleAddress).latestAnswer();\r\n        return latestPrice;\r\n    }\r\n\r\n    function checkUpkeep(bytes calldata checkData) external override returns (bool upkeepNeeded, bytes memory performData) {\r\n        upkeepNeeded = (block.timestamp - lastTimeStamp) > interval;\r\n    }\r\n\r\n    function performUpkeep(bytes calldata performData) external override {\r\n        bool upkeepNeeded = (block.timestamp - lastTimeStamp) > interval;\r\n        require(upkeepNeeded == true, \"Can Not call this method at this time\");\r\n\r\n        lastTimeStamp = block.timestamp;\r\n        counter = counter + 1;\r\n\r\n        updateTargetPrice();\r\n    }\r\n\r\n    // calculate average movement and ReferenceRate from all currency price \r\n    function calculateReferenceRate() internal returns(uint256) {\r\n        uint256 oracleInfoCount = oracleInfo.length;\r\n        \r\n        int256 sumPrice = 0;\r\n        int256 decimals = 1e18;\r\n        uint256 activeOracle = 0;\r\n        for(uint256 i=0; i<oracleInfoCount; i++) {\r\n            OracleInfo storage oracle = oracleInfo[i];\r\n            if(oracle.isActive == true) {\r\n                PriceLog storage pricelog = priceLog[oracle.oracleAddress];\r\n                sumPrice = addUnderFlow(sumPrice, divUnderFlow(mulUnderFlow(subUnderFlow(oracle.lastPrice, pricelog.lastUpdatedPrice), 100000), oracle.lastPrice));\r\n                if(pricelog.lastUpdatedPrice == 0) {\r\n                    sumPrice = 0;\r\n                }\r\n\r\n                emit LogReferenceRateDataUsed(counter, lastTimeStamp, oracle.oracleAddress, pricelog.lastUpdatedPrice, oracle.lastPrice);\r\n                \r\n                pricelog.lastUpdatedPrice = oracle.lastPrice;\r\n                activeOracle = activeOracle.add(1);\r\n            }\r\n        }\r\n\r\n        int256 avgMovement = divUnderFlow(sumPrice, int256(activeOracle));\r\n        if(averageLog.referenceRate == 0) {\r\n            averageLog.referenceRate = decimals;\r\n        }\r\n        int256 refRate = divUnderFlow(mulUnderFlow(averageLog.referenceRate, addUnderFlow(decimals, divUnderFlow(mulUnderFlow(decimals, avgMovement), 100000))), decimals);\r\n\r\n        averageLog.averageMovement = avgMovement;\r\n        averageLog.referenceRate = refRate;\r\n\r\n        return uint256(refRate);\r\n    }\r\n    \r\n    /**\r\n     * Fetching updated price from all oracles and calculating ref rate to update \r\n     * Target price.\r\n     */\r\n    function updateTargetPrice() internal {\r\n        uint256 length = oracleInfo.length;\r\n        for(uint256 i=0; i<length; i++) {\r\n            OracleInfo storage oracle = oracleInfo[i];\r\n            if(oracle.isActive == true) {\r\n                int256 latestPrice = EACAggregatorProxy(oracle.oracleAddress).latestAnswer();\r\n                uint8 decimals = EACAggregatorProxy(oracle.oracleAddress).decimals();\r\n                uint256 restDec = SafeMath.sub(18, uint256(decimals));\r\n                latestPrice = int256(SafeMath.mul(uint256(latestPrice), 10**restDec));\r\n                oracle.lastPrice = latestPrice;\r\n            }\r\n        }\r\n    \r\n        uint256 oldTargetPrice = IOmsPolicy(policyContract).targetPrice();\r\n        uint256 newTargetPrice = calculateReferenceRate();\r\n\r\n        IOmsPolicy(policyContract).setTargetPrice(newTargetPrice);\r\n        \r\n        emit LogTargetPriceUpdated(counter, lastTimeStamp, averageLog.averageMovement, oldTargetPrice, newTargetPrice);\r\n    }\r\n    \r\n    /**\r\n     * @param _pid index number of oracle address.\r\n     * @param _oracle updated oracle address.\r\n     * @param _isActive true if oracle is active otherwise inactive.\r\n     * @param _symbolHash symbolHash of crypto currency.\r\n     */\r\n    function updateOracle(uint256 _pid, address _oracle, bool _isActive, bytes32 _symbolHash) public onlyOwner {\r\n        OracleInfo storage oracle = oracleInfo[_pid];\r\n        require(oracle.oracleAddress != address(0), \"No Oracle Found\");\r\n        oracle.oracleAddress = _oracle;\r\n        oracle.isActive = _isActive;\r\n        oracle.symbolHash = _symbolHash;\r\n    }\r\n\r\n    /**\r\n     * @param _oracle new oracle address to add in structure.\r\n     * @param _isActive true if oracle is active otherwise inactive.\r\n     * @param _symbolHash symbolHash of crypto currency.\r\n     */\r\n    function addOracle(address _oracle, bool _isActive, bytes32 _symbolHash) public onlyOwner {\r\n        oracleInfo.push(OracleInfo({\r\n                oracleAddress: _oracle,\r\n                isActive: _isActive,\r\n                symbolHash: _symbolHash,\r\n                lastPrice: 0\r\n            }));\r\n    }\r\n    \r\n    /**\r\n     * @param _policy new policy address.\r\n     */\r\n    function updatePolicy(address _policy) public onlyOwner {\r\n        policyContract = _policy;\r\n    }\r\n\r\n    /**\r\n    * @dev Subtracts two int256 variables.\r\n    */\r\n    function subUnderFlow(int256 a, int256 b)\r\n            internal\r\n            pure\r\n            returns (int256)\r\n    {\r\n        int256 c = a - b;\r\n        return c;\r\n    }\r\n\r\n    /**\r\n     * @dev Adds two int256 variables and fails on overflow.\r\n     */\r\n    function addUnderFlow(int256 a, int256 b)\r\n        internal\r\n        pure\r\n        returns (int256)\r\n    {\r\n        int256 c = a + b;\r\n        return c;\r\n    }\r\n\r\n    /**\r\n    * @dev Division of two int256 variables and fails on overflow.\r\n     */\r\n    function divUnderFlow(int256 a, int256 b)\r\n        internal\r\n        pure\r\n        returns (int256)\r\n    {\r\n        require(b != 0, \"div overflow\");\r\n\r\n        // Solidity already throws when dividing by 0.\r\n        return a / b;\r\n    }\r\n\r\n    /**\r\n     * @dev Multiplies two int256 variables and fails on overflow.\r\n     */\r\n    function mulUnderFlow(int256 a, int256 b)\r\n        internal\r\n        pure\r\n        returns (int256)\r\n    {\r\n        int256 c = a * b;\r\n        return c;\r\n    }\r\n}","ABI":"[{\"inputs\":[{\"components\":[{\"internalType\":\"address\",\"name\":\"oracleAddress\",\"type\":\"address\"},{\"internalType\":\"bool\",\"name\":\"isActive\",\"type\":\"bool\"},{\"internalType\":\"bytes32\",\"name\":\"symbolHash\",\"type\":\"bytes32\"},{\"internalType\":\"int256\",\"name\":\"lastPrice\",\"type\":\"int256\"}],\"internalType\":\"struct OraclePrice.OracleInfo[]\",\"name\":\"_oracles\",\"type\":\"tuple[]\"},{\"internalType\":\"address\",\"name\":\"_policyContract\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_updateInterval\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"performUpkeepCycle\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"timestampSec\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"oracleAddress\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"int256\",\"name\":\"oldPrice\",\"type\":\"int256\"},{\"indexed\":false,\"internalType\":\"int256\",\"name\":\"newPrice\",\"type\":\"int256\"}],\"name\":\"LogReferenceRateDataUsed\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"performUpkeepCycle\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"timestampSec\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"int256\",\"name\":\"averageMovement\",\"type\":\"int256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"oldReferenceRate\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"newReferenceRate\",\"type\":\"uint256\"}],\"name\":\"LogTargetPriceUpdated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_oracle\",\"type\":\"address\"},{\"internalType\":\"bool\",\"name\":\"_isActive\",\"type\":\"bool\"},{\"internalType\":\"bytes32\",\"name\":\"_symbolHash\",\"type\":\"bytes32\"}],\"name\":\"addOracle\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"averageLog\",\"outputs\":[{\"internalType\":\"int256\",\"name\":\"averageMovement\",\"type\":\"int256\"},{\"internalType\":\"int256\",\"name\":\"referenceRate\",\"type\":\"int256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes\",\"name\":\"checkData\",\"type\":\"bytes\"}],\"name\":\"checkUpkeep\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"upkeepNeeded\",\"type\":\"bool\"},{\"internalType\":\"bytes\",\"name\":\"performData\",\"type\":\"bytes\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"counter\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getOracleInfoCount\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_oracleId\",\"type\":\"uint256\"}],\"name\":\"getOraclePriceInUsd\",\"outputs\":[{\"internalType\":\"int256\",\"name\":\"\",\"type\":\"int256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"interval\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"lastTimeStamp\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"oracleInfo\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"oracleAddress\",\"type\":\"address\"},{\"internalType\":\"bool\",\"name\":\"isActive\",\"type\":\"bool\"},{\"internalType\":\"bytes32\",\"name\":\"symbolHash\",\"type\":\"bytes32\"},{\"internalType\":\"int256\",\"name\":\"lastPrice\",\"type\":\"int256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes\",\"name\":\"performData\",\"type\":\"bytes\"}],\"name\":\"performUpkeep\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"policyContract\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"priceLog\",\"outputs\":[{\"internalType\":\"int256\",\"name\":\"lastUpdatedPrice\",\"type\":\"int256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_pid\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"_oracle\",\"type\":\"address\"},{\"internalType\":\"bool\",\"name\":\"_isActive\",\"type\":\"bool\"},{\"internalType\":\"bytes32\",\"name\":\"_symbolHash\",\"type\":\"bytes32\"}],\"name\":\"updateOracle\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_policy\",\"type\":\"address\"}],\"name\":\"updatePolicy\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}]","ContractName":"OraclePrice","CompilerVersion":"v0.6.12+commit.27d51765","OptimizationUsed":"0","Runs":"200","ConstructorArguments":"00000000000000000000000000000000000000000000000000000000000000600000000000000000000000001c21652129a8d002cdd1386a01ddb03589836ad50000000000000000000000000000000000000000000000000000000000093a8000000000000000000000000000000000000000000000000000000000000000040000000000000000000000005c0ab2d9b5a7ed9f470386e82bb36a3613cdd4b500000000000000000000000000000000000000000000000000000000000000010e955eeaecd495228d555f186414ca271e76ba2ba8560b53c8fe21056913f3f50000000000000000000000000000000000000000000000000000000000000000000000000000000000000000bce206cae7f0ec07b545edde332a47c2f75bbeb30000000000000000000000000000000000000000000000000000000000000001fe13aafd831cb225dfce3f6431b34b5b17426b6bff4fccabe4bbe0fe4adc04520000000000000000000000000000000000000000000000000000000000000000000000000000000000000000b49f677943bc038e9857d61e7d053caa2c1734c10000000000000000000000000000000000000000000000000000000000000001fff16d60be267153303bbfa66e593fb8d06e24ea5ef24b6acca5224c2ca6b9070000000000000000000000000000000000000000000000000000000000000000000000000000000000000000ef8a4af35cd47424672e3c590abd37fbb7a7759a0000000000000000000000000000000000000000000000000000000000000001fff16d60be267153303bbfa66e593fb8d06e24ea5ef24b6acca5224c2ca6b9070000000000000000000000000000000000000000000000000000000000000000","EVMVersion":"Default","Library":"","LicenseType":"None","Proxy":"0","Implementation":"","SwarmSource":"ipfs://c6fad2f0b7c2496fbcf2892b3a216a23a48958f984a64450426317c05bf9fb2f"}]}