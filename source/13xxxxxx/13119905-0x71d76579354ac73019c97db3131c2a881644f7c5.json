{"status":"1","message":"OK","result":[{"SourceCode":"// File: node_modules\\@openzeppelin\\contracts\\utils\\Context.sol\r\n\r\n// SPDX-License-Identifier: MIT\r\n\r\npragma solidity ^0.8.0;\r\n\r\n/*\r\n * @dev Provides information about the current execution context, including the\r\n * sender of the transaction and its data. While these are generally available\r\n * via msg.sender and msg.data, they should not be accessed in such a direct\r\n * manner, since when dealing with meta-transactions the account sending and\r\n * paying for execution may not be the actual sender (as far as an application\r\n * is concerned).\r\n *\r\n * This contract is only required for intermediate, library-like contracts.\r\n */\r\nabstract contract Context {\r\n    function _msgSender() internal view virtual returns (address) {\r\n        return msg.sender;\r\n    }\r\n\r\n    function _msgData() internal view virtual returns (bytes calldata) {\r\n        this; // silence state mutability warning without generating bytecode - see https://github.com/ethereum/solidity/issues/2691\r\n        return msg.data;\r\n    }\r\n}\r\n\r\n// File: @openzeppelin\\contracts\\access\\Ownable.sol\r\n\r\n\r\n\r\npragma solidity ^0.8.0;\r\n\r\n/**\r\n * @dev Contract module which provides a basic access control mechanism, where\r\n * there is an account (an owner) that can be granted exclusive access to\r\n * specific functions.\r\n *\r\n * By default, the owner account will be the one that deploys the contract. This\r\n * can later be changed with {transferOwnership}.\r\n *\r\n * This module is used through inheritance. It will make available the modifier\r\n * `onlyOwner`, which can be applied to your functions to restrict their use to\r\n * the owner.\r\n */\r\nabstract contract Ownable is Context {\r\n    address private _owner;\r\n\r\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\r\n\r\n    /**\r\n     * @dev Initializes the contract setting the deployer as the initial owner.\r\n     */\r\n    constructor () {\r\n        address msgSender = _msgSender();\r\n        _owner = msgSender;\r\n        emit OwnershipTransferred(address(0), msgSender);\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the address of the current owner.\r\n     */\r\n    function owner() public view virtual returns (address) {\r\n        return _owner;\r\n    }\r\n\r\n    /**\r\n     * @dev Throws if called by any account other than the owner.\r\n     */\r\n    modifier onlyOwner() {\r\n        require(owner() == _msgSender(), \"Ownable: caller is not the owner\");\r\n        _;\r\n    }\r\n\r\n    /**\r\n     * @dev Leaves the contract without owner. It will not be possible to call\r\n     * `onlyOwner` functions anymore. Can only be called by the current owner.\r\n     *\r\n     * NOTE: Renouncing ownership will leave the contract without an owner,\r\n     * thereby removing any functionality that is only available to the owner.\r\n     */\r\n    function renounceOwnership() public virtual onlyOwner {\r\n        emit OwnershipTransferred(_owner, address(0));\r\n        _owner = address(0);\r\n    }\r\n\r\n    /**\r\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\r\n     * Can only be called by the current owner.\r\n     */\r\n    function transferOwnership(address newOwner) public virtual onlyOwner {\r\n        require(newOwner != address(0), \"Ownable: new owner is the zero address\");\r\n        emit OwnershipTransferred(_owner, newOwner);\r\n        _owner = newOwner;\r\n    }\r\n}\r\n\r\n// File: @openzeppelin\\contracts\\token\\ERC20\\IERC20.sol\r\n\r\n\r\n\r\npragma solidity ^0.8.0;\r\n\r\n/**\r\n * @dev Interface of the ERC20 standard as defined in the EIP.\r\n */\r\ninterface IERC20 {\r\n    /**\r\n     * @dev Returns the amount of tokens in existence.\r\n     */\r\n    function totalSupply() external view returns (uint256);\r\n\r\n    /**\r\n     * @dev Returns the amount of tokens owned by `account`.\r\n     */\r\n    function balanceOf(address account) external view returns (uint256);\r\n\r\n    /**\r\n     * @dev Moves `amount` tokens from the caller's account to `recipient`.\r\n     *\r\n     * Returns a boolean value indicating whether the operation succeeded.\r\n     *\r\n     * Emits a {Transfer} event.\r\n     */\r\n    function transfer(address recipient, uint256 amount) external returns (bool);\r\n\r\n    /**\r\n     * @dev Returns the remaining number of tokens that `spender` will be\r\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\r\n     * zero by default.\r\n     *\r\n     * This value changes when {approve} or {transferFrom} are called.\r\n     */\r\n    function allowance(address owner, address spender) external view returns (uint256);\r\n\r\n    /**\r\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\r\n     *\r\n     * Returns a boolean value indicating whether the operation succeeded.\r\n     *\r\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\r\n     * that someone may use both the old and the new allowance by unfortunate\r\n     * transaction ordering. One possible solution to mitigate this race\r\n     * condition is to first reduce the spender's allowance to 0 and set the\r\n     * desired value afterwards:\r\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\r\n     *\r\n     * Emits an {Approval} event.\r\n     */\r\n    function approve(address spender, uint256 amount) external returns (bool);\r\n\r\n    /**\r\n     * @dev Moves `amount` tokens from `sender` to `recipient` using the\r\n     * allowance mechanism. `amount` is then deducted from the caller's\r\n     * allowance.\r\n     *\r\n     * Returns a boolean value indicating whether the operation succeeded.\r\n     *\r\n     * Emits a {Transfer} event.\r\n     */\r\n    function transferFrom(address sender, address recipient, uint256 amount) external returns (bool);\r\n\r\n    /**\r\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\r\n     * another (`to`).\r\n     *\r\n     * Note that `value` may be zero.\r\n     */\r\n    event Transfer(address indexed from, address indexed to, uint256 value);\r\n\r\n    /**\r\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\r\n     * a call to {approve}. `value` is the new allowance.\r\n     */\r\n    event Approval(address indexed owner, address indexed spender, uint256 value);\r\n}\r\n\r\n// File: contracts\\TokenLock.sol\r\n\r\n\r\npragma solidity ^0.8.0;\r\n\r\n\r\n\r\ncontract TokenLock is Ownable {\r\n\r\n    event BeneficiaryUpdated(address account);\r\n\r\n    event ReleaseInfoCreated(uint256 time, uint256 amount);\r\n    event ReleaseInfoUpdated(uint256 time, uint256 amount);\r\n    event Released(address account, uint256 amount, uint256 indexFrom, uint256 indexTo);\r\n\r\n    struct ReleaseInfo {\r\n        uint128 time;\r\n        uint128 amount;\r\n    }\r\n\r\n    IERC20 private _token;\r\n\r\n    address private _beneficiary;\r\n\r\n    uint256 private _releaseIndex;\r\n\r\n    uint256 private _totalReleases;\r\n\r\n    mapping(uint256 => ReleaseInfo) private _releases; \r\n\r\n    /**\r\n     * @dev Constructor\r\n     */\r\n    constructor(address token, address beneficiary)\r\n    {\r\n        _token = IERC20(token);\r\n\r\n        _beneficiary = beneficiary;\r\n    }\r\n\r\n    /**\r\n     * @dev Updates beneficiary address\r\n     */\r\n    function updateBeneficiary(address account)\r\n        external\r\n        onlyOwner\r\n    {\r\n        require(account != address(0), \"TokenLock: address is invalid\");\r\n\r\n        _beneficiary = account;\r\n\r\n        emit BeneficiaryUpdated(account);\r\n    }\r\n\r\n    /**\r\n     * @dev Returns smart contract information\r\n     */\r\n    function getContractInfo()\r\n        external\r\n        view\r\n        returns (address, address, uint256, uint256, uint256)\r\n    {\r\n        return (address(_token), _beneficiary, _totalReleases, _token.balanceOf(address(this)), _releaseIndex);\r\n    }\r\n\r\n    /**\r\n     * @dev Creates release information\r\n     */\r\n    function createReleaseInfo(uint128[] memory times, uint128[] memory amounts)\r\n        external\r\n        onlyOwner\r\n    {\r\n        uint256 length = times.length;\r\n\r\n        require(length == amounts.length, \"TokenLock: array length is invalid\");\r\n\r\n        uint256 index = _totalReleases;\r\n\r\n        uint128 lastTime = index == 0 ? 0 : _releases[index - 1].time;\r\n\r\n        for (uint256 i = 0; i < length; i++) {\r\n            uint128 time = times[i];\r\n            uint128 amount = amounts[i];\r\n\r\n            require(lastTime < time, \"TokenLock: time is invalid\");\r\n\r\n            _releases[index++] = ReleaseInfo(time, amount);\r\n\r\n            lastTime = time;\r\n\r\n            emit ReleaseInfoCreated(time, amount);\r\n        }\r\n\r\n        if (_totalReleases != index) {\r\n            _totalReleases = index;\r\n        }\r\n    }\r\n\r\n    // /**\r\n    //  * @dev Updates release information\r\n    //  */\r\n    // function updateReleaseInfo(uint128 index, uint128 time, uint128 amount)\r\n    //     external\r\n    //     onlyOwner\r\n    // {\r\n    //     require(index >= _releaseIndex, \"TokenLock: index is invalid\");\r\n\r\n    //     ReleaseInfo storage info = _releases[index];\r\n\r\n    //     require(info.time > 0, \"TokenLock: info does not exist\");\r\n\r\n    //     uint128 prevTime = index > 0 ? _releases[index - 1].time : 0;\r\n\r\n    //     uint128 nextTime = index == _totalReleases - 1 ? type(uint128).max : _releases[index + 1].time;\r\n\r\n    //     require(time > prevTime && time < nextTime, \"TokenLock: time is invalid\");\r\n\r\n    //     info.time = time;\r\n    //     info.amount = amount;\r\n\r\n    //     emit ReleaseInfoUpdated(time, amount);\r\n    // }\r\n\r\n    /**\r\n     * @dev Returns release information\r\n     */\r\n    function getReleaseInfo(uint256 indexFrom, uint256 indexTo)\r\n        external\r\n        view\r\n        returns (ReleaseInfo[] memory)\r\n    {\r\n        uint256 cnt = 0;\r\n        uint256 size = indexTo - indexFrom + 1;\r\n\r\n        ReleaseInfo[] memory tmps = new ReleaseInfo[](size);\r\n\r\n        for (uint256 i = indexFrom; i <= indexTo; i++) {\r\n            if (_releases[i].time == 0) {\r\n                break;\r\n            }\r\n\r\n            tmps[cnt++] = _releases[i];\r\n        }\r\n\r\n        ReleaseInfo[] memory releases = new ReleaseInfo[](cnt);\r\n\r\n        for (uint256 i = 0; i < cnt; i++) {\r\n            releases[i] = tmps[i];\r\n        }\r\n\r\n        return releases;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns release balance\r\n     */\r\n    function getReleaseBalance()\r\n        public\r\n        view\r\n        returns (uint256, uint256, uint256)\r\n    {\r\n        uint256 balance;\r\n        uint256 length = _totalReleases;\r\n        uint256 currentTime = block.timestamp;\r\n        uint256 indexFrom = _releaseIndex;\r\n        uint256 indexTo = indexFrom;\r\n\r\n        for (uint256 i = indexFrom; i < length; i++) {\r\n            ReleaseInfo memory info = _releases[i];\r\n\r\n            if (currentTime < info.time) {\r\n                break;\r\n            }\r\n\r\n            balance += info.amount;\r\n            indexTo++;\r\n        }\r\n\r\n        return (indexFrom, indexTo, balance);\r\n    }\r\n\r\n    /**\r\n     * @dev Releases token\r\n     */\r\n    function release()\r\n        external\r\n    {\r\n        (uint256 indexFrom, uint256 indexTo, uint256 balance) = getReleaseBalance();\r\n\r\n        require(indexTo > indexFrom, \"TokenLock: can not release\");\r\n\r\n        _releaseIndex = indexTo;\r\n\r\n        if (balance > 0) {\r\n            _token.transfer(_beneficiary, balance);\r\n        }\r\n\r\n        emit Released(_beneficiary, balance, indexFrom, indexTo);\r\n    }\r\n\r\n}","ABI":"[{\"inputs\":[{\"internalType\":\"address\",\"name\":\"token\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"beneficiary\",\"type\":\"address\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"BeneficiaryUpdated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"time\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"ReleaseInfoCreated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"time\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"ReleaseInfoUpdated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"indexFrom\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"indexTo\",\"type\":\"uint256\"}],\"name\":\"Released\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"uint128[]\",\"name\":\"times\",\"type\":\"uint128[]\"},{\"internalType\":\"uint128[]\",\"name\":\"amounts\",\"type\":\"uint128[]\"}],\"name\":\"createReleaseInfo\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getContractInfo\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getReleaseBalance\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"indexFrom\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"indexTo\",\"type\":\"uint256\"}],\"name\":\"getReleaseInfo\",\"outputs\":[{\"components\":[{\"internalType\":\"uint128\",\"name\":\"time\",\"type\":\"uint128\"},{\"internalType\":\"uint128\",\"name\":\"amount\",\"type\":\"uint128\"}],\"internalType\":\"struct TokenLock.ReleaseInfo[]\",\"name\":\"\",\"type\":\"tuple[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"release\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"updateBeneficiary\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}]","ContractName":"TokenLock","CompilerVersion":"v0.8.7+commit.e28d00a7","OptimizationUsed":"1","Runs":"200","ConstructorArguments":"000000000000000000000000692accdd8b86692427e0aa4752ae917df01cc56f0000000000000000000000008bac489fef5151cc4b919ecb4b2100a25bb87322","EVMVersion":"Default","Library":"","LicenseType":"None","Proxy":"0","Implementation":"","SwarmSource":"ipfs://fcb49020f1e0cb950115a5bbdb7a8af10302be5e8a69c00c2c3e230cab153095"}]}