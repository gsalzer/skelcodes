{"status":"1","message":"OK","result":[{"SourceCode":"{{\r\n  \"language\": \"Solidity\",\r\n  \"sources\": {\r\n    \"contracts/modules/Installer.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: GPL-2.0-or-later\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../BaseModule.sol\\\";\\n\\n\\ncontract Installer is BaseModule {\\n    constructor(bytes32 moduleGitCommit_) BaseModule(MODULEID__INSTALLER, moduleGitCommit_) {}\\n\\n    modifier adminOnly {\\n        address msgSender = unpackTrailingParamMsgSender();\\n        require(msgSender == upgradeAdmin, \\\"e/installer/unauthorized\\\");\\n        _;\\n    }\\n\\n    function getUpgradeAdmin() external view returns (address) {\\n        return upgradeAdmin;\\n    }\\n\\n    function setUpgradeAdmin(address newUpgradeAdmin) external adminOnly {\\n        require(newUpgradeAdmin != address(0), \\\"e/installer/bad-admin-addr\\\");\\n        upgradeAdmin = newUpgradeAdmin;\\n        emit InstallerSetUpgradeAdmin(newUpgradeAdmin);\\n    }\\n\\n    function setGovernorAdmin(address newGovernorAdmin) external adminOnly {\\n        require(newGovernorAdmin != address(0), \\\"e/installer/bad-gov-addr\\\");\\n        governorAdmin = newGovernorAdmin;\\n        emit InstallerSetGovernorAdmin(newGovernorAdmin);\\n    }\\n\\n    function installModules(address[] memory moduleAddrs) external adminOnly {\\n        for (uint i = 0; i < moduleAddrs.length; ++i) {\\n            address moduleAddr = moduleAddrs[i];\\n            uint newModuleId = BaseModule(moduleAddr).moduleId();\\n            bytes32 moduleGitCommit = BaseModule(moduleAddr).moduleGitCommit();\\n\\n            moduleLookup[newModuleId] = moduleAddr;\\n\\n            if (newModuleId <= MAX_EXTERNAL_SINGLE_PROXY_MODULEID) {\\n                address proxyAddr = _createProxy(newModuleId);\\n                trustedSenders[proxyAddr].moduleImpl = moduleAddr;\\n            }\\n\\n            emit InstallerInstallModule(newModuleId, moduleAddr, moduleGitCommit);\\n        }\\n    }\\n}\\n\"\r\n    },\r\n    \"contracts/BaseModule.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: GPL-2.0-or-later\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"./Base.sol\\\";\\n\\n\\nabstract contract BaseModule is Base {\\n    // Construction\\n\\n    // public accessors common to all modules\\n\\n    uint immutable public moduleId;\\n    bytes32 immutable public moduleGitCommit;\\n\\n    constructor(uint moduleId_, bytes32 moduleGitCommit_) {\\n        moduleId = moduleId_;\\n        moduleGitCommit = moduleGitCommit_;\\n    }\\n\\n\\n    // Accessing parameters\\n\\n    function unpackTrailingParamMsgSender() internal pure returns (address msgSender) {\\n        assembly {\\n            mstore(0, 0)\\n\\n            calldatacopy(12, sub(calldatasize(), 40), 20)\\n            msgSender := mload(0)\\n        }\\n    }\\n\\n    function unpackTrailingParams() internal pure returns (address msgSender, address proxyAddr) {\\n        assembly {\\n            mstore(0, 0)\\n\\n            calldatacopy(12, sub(calldatasize(), 40), 20)\\n            msgSender := mload(0)\\n\\n            calldatacopy(12, sub(calldatasize(), 20), 20)\\n            proxyAddr := mload(0)\\n        }\\n    }\\n\\n\\n    // Emit logs via proxies\\n\\n    function emitViaProxy_Transfer(address proxyAddr, address from, address to, uint value) internal FREEMEM {\\n        (bool success,) = proxyAddr.call(abi.encodePacked(\\n                               uint8(3),\\n                               keccak256(bytes('Transfer(address,address,uint256)')),\\n                               bytes32(uint(uint160(from))),\\n                               bytes32(uint(uint160(to))),\\n                               value\\n                          ));\\n        require(success, \\\"e/log-proxy-fail\\\");\\n    }\\n\\n    function emitViaProxy_Approval(address proxyAddr, address owner, address spender, uint value) internal FREEMEM {\\n        (bool success,) = proxyAddr.call(abi.encodePacked(\\n                               uint8(3),\\n                               keccak256(bytes('Approval(address,address,uint256)')),\\n                               bytes32(uint(uint160(owner))),\\n                               bytes32(uint(uint160(spender))),\\n                               value\\n                          ));\\n        require(success, \\\"e/log-proxy-fail\\\");\\n    }\\n}\\n\"\r\n    },\r\n    \"contracts/Base.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: GPL-2.0-or-later\\n\\npragma solidity ^0.8.0;\\n//import \\\"hardhat/console.sol\\\"; // DEV_MODE\\n\\nimport \\\"./Storage.sol\\\";\\nimport \\\"./Events.sol\\\";\\nimport \\\"./Proxy.sol\\\";\\n\\nabstract contract Base is Storage, Events {\\n    // Modules\\n\\n    function _createProxy(uint proxyModuleId) internal returns (address) {\\n        require(proxyModuleId != 0, \\\"e/create-proxy/invalid-module\\\");\\n        require(proxyModuleId <= MAX_EXTERNAL_MODULEID, \\\"e/create-proxy/internal-module\\\");\\n\\n        // If we've already created a proxy for a single-proxy module, just return it:\\n\\n        if (proxyLookup[proxyModuleId] != address(0)) return proxyLookup[proxyModuleId];\\n\\n        // Otherwise create a proxy:\\n\\n        address proxyAddr = address(new Proxy());\\n\\n        if (proxyModuleId <= MAX_EXTERNAL_SINGLE_PROXY_MODULEID) proxyLookup[proxyModuleId] = proxyAddr;\\n\\n        trustedSenders[proxyAddr] = TrustedSenderInfo({ moduleId: uint32(proxyModuleId), moduleImpl: address(0) });\\n\\n        emit ProxyCreated(proxyAddr, proxyModuleId);\\n\\n        return proxyAddr;\\n    }\\n\\n    function callInternalModule(uint moduleId, bytes memory input) internal returns (bytes memory) {\\n        (bool success, bytes memory result) = moduleLookup[moduleId].delegatecall(input);\\n        if (!success) revertBytes(result);\\n        return result;\\n    }\\n\\n\\n\\n    // Modifiers\\n\\n    modifier nonReentrant() {\\n        require(reentrancyLock == REENTRANCYLOCK__UNLOCKED, \\\"e/reentrancy\\\");\\n\\n        reentrancyLock = REENTRANCYLOCK__LOCKED;\\n        _;\\n        reentrancyLock = REENTRANCYLOCK__UNLOCKED;\\n    }\\n\\n    modifier reentrantOK() { // documentation only\\n        _;\\n    }\\n\\n    // WARNING: Must be very careful with this modifier. It resets the free memory pointer\\n    // to the value it was when the function started. This saves gas if more memory will\\n    // be allocated in the future. However, if the memory will be later referenced\\n    // (for example because the function has returned a pointer to it) then you cannot\\n    // use this modifier.\\n\\n    modifier FREEMEM() {\\n        uint origFreeMemPtr;\\n\\n        assembly {\\n            origFreeMemPtr := mload(0x40)\\n        }\\n\\n        _;\\n\\n        /*\\n        assembly { // DEV_MODE: overwrite the freed memory with garbage to detect bugs\\n            let garbage := 0xDEADBEEFDEADBEEFDEADBEEFDEADBEEFDEADBEEFDEADBEEFDEADBEEFDEADBEEF\\n            for { let i := origFreeMemPtr } lt(i, mload(0x40)) { i := add(i, 32) } { mstore(i, garbage) }\\n        }\\n        */\\n\\n        assembly {\\n            mstore(0x40, origFreeMemPtr)\\n        }\\n    }\\n\\n\\n\\n    // Error handling\\n\\n    function revertBytes(bytes memory errMsg) internal pure {\\n        if (errMsg.length > 0) {\\n            assembly {\\n                revert(add(32, errMsg), mload(errMsg))\\n            }\\n        }\\n\\n        revert(\\\"e/empty-error\\\");\\n    }\\n}\\n\"\r\n    },\r\n    \"contracts/Storage.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: GPL-2.0-or-later\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"./Constants.sol\\\";\\n\\nabstract contract Storage is Constants {\\n    // Dispatcher and upgrades\\n\\n    uint reentrancyLock;\\n\\n    address upgradeAdmin;\\n    address governorAdmin;\\n\\n    mapping(uint => address) moduleLookup; // moduleId => module implementation\\n    mapping(uint => address) proxyLookup; // moduleId => proxy address (only for single-proxy modules)\\n\\n    struct TrustedSenderInfo {\\n        uint32 moduleId; // 0 = un-trusted\\n        address moduleImpl; // only non-zero for external single-proxy modules\\n    }\\n\\n    mapping(address => TrustedSenderInfo) trustedSenders; // sender address => moduleId (0 = un-trusted)\\n\\n\\n\\n    // Account-level state\\n    // Sub-accounts are considered distinct accounts\\n\\n    struct AccountStorage {\\n        // Packed slot: 1 + 5 + 4 + 20 = 30\\n        uint8 deferLiquidityStatus;\\n        uint40 lastAverageLiquidityUpdate;\\n        uint32 numMarketsEntered;\\n        address firstMarketEntered;\\n\\n        uint averageLiquidity;\\n        address averageLiquidityDelegate;\\n    }\\n\\n    mapping(address => AccountStorage) accountLookup;\\n    mapping(address => address[MAX_POSSIBLE_ENTERED_MARKETS]) marketsEntered;\\n\\n\\n\\n    // Markets and assets\\n\\n    struct AssetConfig {\\n        // Packed slot: 20 + 1 + 4 + 4 + 3 = 32\\n        address eTokenAddress;\\n        bool borrowIsolated;\\n        uint32 collateralFactor;\\n        uint32 borrowFactor;\\n        uint24 twapWindow;\\n    }\\n\\n    struct UserAsset {\\n        uint112 balance;\\n        uint144 owed;\\n\\n        uint interestAccumulator;\\n    }\\n\\n    struct AssetStorage {\\n        // Packed slot: 5 + 1 + 4 + 12 + 4 + 2 + 4 = 32\\n        uint40 lastInterestAccumulatorUpdate;\\n        uint8 underlyingDecimals; // Not dynamic, but put here to live in same storage slot\\n        uint32 interestRateModel;\\n        int96 interestRate;\\n        uint32 reserveFee;\\n        uint16 pricingType;\\n        uint32 pricingParameters;\\n\\n        address underlying;\\n        uint96 reserveBalance;\\n\\n        address dTokenAddress;\\n\\n        uint112 totalBalances;\\n        uint144 totalBorrows;\\n\\n        uint interestAccumulator;\\n\\n        mapping(address => UserAsset) users;\\n\\n        mapping(address => mapping(address => uint)) eTokenAllowance;\\n        mapping(address => mapping(address => uint)) dTokenAllowance;\\n    }\\n\\n    mapping(address => AssetConfig) internal underlyingLookup; // underlying => AssetConfig\\n    mapping(address => AssetStorage) internal eTokenLookup; // EToken => AssetStorage\\n    mapping(address => address) internal dTokenLookup; // DToken => EToken\\n    mapping(address => address) internal pTokenLookup; // PToken => underlying\\n    mapping(address => address) internal reversePTokenLookup; // underlying => PToken\\n}\\n\"\r\n    },\r\n    \"contracts/Events.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: GPL-2.0-or-later\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"./Storage.sol\\\";\\n\\nabstract contract Events {\\n    event Genesis();\\n\\n\\n    event ProxyCreated(address indexed proxy, uint moduleId);\\n    event MarketActivated(address indexed underlying, address indexed eToken, address indexed dToken);\\n    event PTokenActivated(address indexed underlying, address indexed pToken);\\n\\n    event EnterMarket(address indexed underlying, address indexed account);\\n    event ExitMarket(address indexed underlying, address indexed account);\\n\\n    event Deposit(address indexed underlying, address indexed account, uint amount);\\n    event Withdraw(address indexed underlying, address indexed account, uint amount);\\n    event Borrow(address indexed underlying, address indexed account, uint amount);\\n    event Repay(address indexed underlying, address indexed account, uint amount);\\n\\n    event Liquidation(address indexed liquidator, address indexed violator, address indexed underlying, address collateral, uint repay, uint yield, uint healthScore, uint baseDiscount, uint discount);\\n\\n    event TrackAverageLiquidity(address indexed account);\\n    event UnTrackAverageLiquidity(address indexed account);\\n    event DelegateAverageLiquidity(address indexed account, address indexed delegate);\\n\\n    event PTokenWrap(address indexed underlying, address indexed account, uint amount);\\n    event PTokenUnWrap(address indexed underlying, address indexed account, uint amount);\\n\\n    event AssetStatus(address indexed underlying, uint totalBalances, uint totalBorrows, uint96 reserveBalance, uint poolSize, uint interestAccumulator, int96 interestRate, uint timestamp);\\n\\n\\n    event RequestDeposit(address indexed account, uint amount);\\n    event RequestWithdraw(address indexed account, uint amount);\\n    event RequestMint(address indexed account, uint amount);\\n    event RequestBurn(address indexed account, uint amount);\\n    event RequestTransferEToken(address indexed from, address indexed to, uint amount);\\n\\n    event RequestBorrow(address indexed account, uint amount);\\n    event RequestRepay(address indexed account, uint amount);\\n    event RequestTransferDToken(address indexed from, address indexed to, uint amount);\\n\\n    event RequestLiquidate(address indexed liquidator, address indexed violator, address indexed underlying, address collateral, uint repay, uint minYield);\\n\\n\\n    event InstallerSetUpgradeAdmin(address indexed newUpgradeAdmin);\\n    event InstallerSetGovernorAdmin(address indexed newGovernorAdmin);\\n    event InstallerInstallModule(uint indexed moduleId, address indexed moduleImpl, bytes32 moduleGitCommit);\\n\\n\\n    event GovSetAssetConfig(address indexed underlying, Storage.AssetConfig newConfig);\\n    event GovSetIRM(address indexed underlying, uint interestRateModel, bytes resetParams);\\n    event GovSetPricingConfig(address indexed underlying, uint16 newPricingType, uint32 newPricingParameter);\\n    event GovSetReserveFee(address indexed underlying, uint32 newReserveFee);\\n    event GovConvertReserves(address indexed underlying, address indexed recipient, uint amount);\\n\\n    event RequestSwap(address indexed accountIn, address indexed accountOut, address indexed underlyingIn, address underlyingOut, uint amount, uint swapType);\\n}\\n\"\r\n    },\r\n    \"contracts/Proxy.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: GPL-2.0-or-later\\n\\npragma solidity ^0.8.0;\\n\\ncontract Proxy {\\n    address immutable creator;\\n\\n    constructor() {\\n        creator = msg.sender;\\n    }\\n\\n    // External interface\\n\\n    fallback() external {\\n        address creator_ = creator;\\n\\n        if (msg.sender == creator_) {\\n            assembly {\\n                mstore(0, 0)\\n                calldatacopy(31, 0, calldatasize())\\n\\n                switch mload(0) // numTopics\\n                    case 0 { log0(32,  sub(calldatasize(), 1)) }\\n                    case 1 { log1(64,  sub(calldatasize(), 33),  mload(32)) }\\n                    case 2 { log2(96,  sub(calldatasize(), 65),  mload(32), mload(64)) }\\n                    case 3 { log3(128, sub(calldatasize(), 97),  mload(32), mload(64), mload(96)) }\\n                    case 4 { log4(160, sub(calldatasize(), 129), mload(32), mload(64), mload(96), mload(128)) }\\n                    default { revert(0, 0) }\\n\\n                return(0, 0)\\n            }\\n        } else {\\n            assembly {\\n                mstore(0, 0xe9c4a3ac00000000000000000000000000000000000000000000000000000000) // dispatch() selector\\n                calldatacopy(4, 0, calldatasize())\\n                mstore(add(4, calldatasize()), shl(96, caller()))\\n\\n                let result := call(gas(), creator_, 0, 0, add(24, calldatasize()), 0, 0)\\n                returndatacopy(0, 0, returndatasize())\\n\\n                switch result\\n                    case 0 { revert(0, returndatasize()) }\\n                    default { return(0, returndatasize()) }\\n            }\\n        }\\n    }\\n}\\n\"\r\n    },\r\n    \"contracts/Constants.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: GPL-2.0-or-later\\n\\npragma solidity ^0.8.0;\\n\\nabstract contract Constants {\\n    // Universal\\n\\n    uint internal constant SECONDS_PER_YEAR = 365.2425 * 86400; // Gregorian calendar\\n\\n\\n    // Protocol parameters\\n\\n    uint internal constant MAX_SANE_AMOUNT = type(uint112).max;\\n    uint internal constant MAX_SANE_SMALL_AMOUNT = type(uint96).max;\\n    uint internal constant MAX_SANE_DEBT_AMOUNT = type(uint144).max;\\n    uint internal constant INTERNAL_DEBT_PRECISION = 1e9;\\n    uint internal constant MAX_ENTERED_MARKETS = 10; // per sub-account\\n    uint internal constant MAX_POSSIBLE_ENTERED_MARKETS = 2**32; // limited by size of AccountStorage.numMarketsEntered\\n    uint internal constant CONFIG_FACTOR_SCALE = 4_000_000_000; // must fit into a uint32\\n    uint internal constant RESERVE_FEE_SCALE = 4_000_000_000; // must fit into a uint32\\n    uint32 internal constant DEFAULT_RESERVE_FEE = uint32(0.23 * 4_000_000_000);\\n    uint internal constant INITIAL_INTEREST_ACCUMULATOR = 1e27;\\n    uint internal constant AVERAGE_LIQUIDITY_PERIOD = 24 * 60 * 60;\\n    uint16 internal constant MIN_UNISWAP3_OBSERVATION_CARDINALITY = 10;\\n    uint24 internal constant DEFAULT_TWAP_WINDOW_SECONDS = 30 * 60;\\n    uint32 internal constant DEFAULT_BORROW_FACTOR = uint32(0.28 * 4_000_000_000);\\n\\n\\n    // Implementation internals\\n\\n    uint internal constant REENTRANCYLOCK__UNLOCKED = 1;\\n    uint internal constant REENTRANCYLOCK__LOCKED = 2;\\n\\n    uint8 internal constant DEFERLIQUIDITY__NONE = 0;\\n    uint8 internal constant DEFERLIQUIDITY__CLEAN = 1;\\n    uint8 internal constant DEFERLIQUIDITY__DIRTY = 2;\\n\\n\\n    // Pricing types\\n\\n    uint16 internal constant PRICINGTYPE__PEGGED = 1;\\n    uint16 internal constant PRICINGTYPE__UNISWAP3_TWAP = 2;\\n    uint16 internal constant PRICINGTYPE__FORWARDED = 3;\\n\\n\\n    // Modules\\n\\n    // Public single-proxy modules\\n    uint internal constant MODULEID__INSTALLER = 1;\\n    uint internal constant MODULEID__MARKETS = 2;\\n    uint internal constant MODULEID__LIQUIDATION = 3;\\n    uint internal constant MODULEID__GOVERNANCE = 4;\\n    uint internal constant MODULEID__EXEC = 5;\\n    uint internal constant MODULEID__SWAP = 6;\\n\\n    uint internal constant MAX_EXTERNAL_SINGLE_PROXY_MODULEID = 499_999;\\n\\n    // Public multi-proxy modules\\n    uint internal constant MODULEID__ETOKEN = 500_000;\\n    uint internal constant MODULEID__DTOKEN = 500_001;\\n\\n    uint internal constant MAX_EXTERNAL_MODULEID = 999_999;\\n\\n    // Internal modules\\n    uint internal constant MODULEID__RISK_MANAGER = 1_000_000;\\n\\n    // Interest rate models\\n    //   Default for new markets\\n    uint internal constant MODULEID__IRM_DEFAULT = 2_000_000;\\n    //   Testing-only\\n    uint internal constant MODULEID__IRM_ZERO = 2_000_001;\\n    uint internal constant MODULEID__IRM_FIXED = 2_000_002;\\n    uint internal constant MODULEID__IRM_LINEAR = 2_000_100;\\n    //   Classes\\n    uint internal constant MODULEID__IRM_CLASS__STABLE = 2_000_500;\\n    uint internal constant MODULEID__IRM_CLASS__MAJOR = 2_000_501;\\n    uint internal constant MODULEID__IRM_CLASS__MIDCAP = 2_000_502;\\n\\n    // Swap types\\n    uint internal constant SWAP_TYPE__UNI_EXACT_INPUT_SINGLE = 1;\\n    uint internal constant SWAP_TYPE__UNI_EXACT_INPUT = 2;\\n    uint internal constant SWAP_TYPE__UNI_EXACT_OUTPUT_SINGLE = 3;\\n    uint internal constant SWAP_TYPE__UNI_EXACT_OUTPUT = 4;\\n    uint internal constant SWAP_TYPE__1INCH = 5;\\n}\\n\"\r\n    }\r\n  },\r\n  \"settings\": {\r\n    \"optimizer\": {\r\n      \"enabled\": true,\r\n      \"runs\": 1000000\r\n    },\r\n    \"outputSelection\": {\r\n      \"*\": {\r\n        \"*\": [\r\n          \"evm.bytecode\",\r\n          \"evm.deployedBytecode\",\r\n          \"abi\"\r\n        ]\r\n      }\r\n    }\r\n  }\r\n}}","ABI":"[{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"moduleGitCommit_\",\"type\":\"bytes32\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"underlying\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"totalBalances\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"totalBorrows\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint96\",\"name\":\"reserveBalance\",\"type\":\"uint96\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"poolSize\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"interestAccumulator\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"int96\",\"name\":\"interestRate\",\"type\":\"int96\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"timestamp\",\"type\":\"uint256\"}],\"name\":\"AssetStatus\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"underlying\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"Borrow\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"delegate\",\"type\":\"address\"}],\"name\":\"DelegateAverageLiquidity\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"underlying\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"Deposit\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"underlying\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"EnterMarket\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"underlying\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"ExitMarket\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[],\"name\":\"Genesis\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"underlying\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"recipient\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"GovConvertReserves\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"underlying\",\"type\":\"address\"},{\"components\":[{\"internalType\":\"address\",\"name\":\"eTokenAddress\",\"type\":\"address\"},{\"internalType\":\"bool\",\"name\":\"borrowIsolated\",\"type\":\"bool\"},{\"internalType\":\"uint32\",\"name\":\"collateralFactor\",\"type\":\"uint32\"},{\"internalType\":\"uint32\",\"name\":\"borrowFactor\",\"type\":\"uint32\"},{\"internalType\":\"uint24\",\"name\":\"twapWindow\",\"type\":\"uint24\"}],\"indexed\":false,\"internalType\":\"struct Storage.AssetConfig\",\"name\":\"newConfig\",\"type\":\"tuple\"}],\"name\":\"GovSetAssetConfig\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"underlying\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"interestRateModel\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"bytes\",\"name\":\"resetParams\",\"type\":\"bytes\"}],\"name\":\"GovSetIRM\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"underlying\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint16\",\"name\":\"newPricingType\",\"type\":\"uint16\"},{\"indexed\":false,\"internalType\":\"uint32\",\"name\":\"newPricingParameter\",\"type\":\"uint32\"}],\"name\":\"GovSetPricingConfig\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"underlying\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint32\",\"name\":\"newReserveFee\",\"type\":\"uint32\"}],\"name\":\"GovSetReserveFee\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"moduleId\",\"type\":\"uint256\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"moduleImpl\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"bytes32\",\"name\":\"moduleGitCommit\",\"type\":\"bytes32\"}],\"name\":\"InstallerInstallModule\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newGovernorAdmin\",\"type\":\"address\"}],\"name\":\"InstallerSetGovernorAdmin\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newUpgradeAdmin\",\"type\":\"address\"}],\"name\":\"InstallerSetUpgradeAdmin\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"liquidator\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"violator\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"underlying\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"collateral\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"repay\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"yield\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"healthScore\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"baseDiscount\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"discount\",\"type\":\"uint256\"}],\"name\":\"Liquidation\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"underlying\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"eToken\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"dToken\",\"type\":\"address\"}],\"name\":\"MarketActivated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"underlying\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"pToken\",\"type\":\"address\"}],\"name\":\"PTokenActivated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"underlying\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"PTokenUnWrap\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"underlying\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"PTokenWrap\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"proxy\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"moduleId\",\"type\":\"uint256\"}],\"name\":\"ProxyCreated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"underlying\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"Repay\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"RequestBorrow\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"RequestBurn\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"RequestDeposit\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"liquidator\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"violator\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"underlying\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"collateral\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"repay\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"minYield\",\"type\":\"uint256\"}],\"name\":\"RequestLiquidate\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"RequestMint\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"RequestRepay\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"accountIn\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"accountOut\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"underlyingIn\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"underlyingOut\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"swapType\",\"type\":\"uint256\"}],\"name\":\"RequestSwap\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"RequestTransferDToken\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"RequestTransferEToken\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"RequestWithdraw\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"TrackAverageLiquidity\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"UnTrackAverageLiquidity\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"underlying\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"Withdraw\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"getUpgradeAdmin\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address[]\",\"name\":\"moduleAddrs\",\"type\":\"address[]\"}],\"name\":\"installModules\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"moduleGitCommit\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"moduleId\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newGovernorAdmin\",\"type\":\"address\"}],\"name\":\"setGovernorAdmin\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newUpgradeAdmin\",\"type\":\"address\"}],\"name\":\"setUpgradeAdmin\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}]","ContractName":"Installer","CompilerVersion":"v0.8.10+commit.fc410830","OptimizationUsed":"1","Runs":"1000000","ConstructorArguments":"000000000000000000000000c6fda952dcd00cd90ff42981c1976f9b3566520a","EVMVersion":"Default","Library":"","LicenseType":"GNU GPLv2","Proxy":"0","Implementation":"","SwarmSource":"ipfs://7d9ce2d47dc2a4623acf8da3bdad686dae63cf5a2c506b4c37e339d37fa48491"}]}