{"status":"1","message":"OK","result":[{"SourceCode":"// SPDX-License-Identifier: MIT OR Apache-2.0\r\n\r\npragma solidity ^0.8.0;\r\n\r\n/**\r\n * @dev Provides information about the current execution context, including the\r\n * sender of the transaction and its data. While these are generally available\r\n * via msg.sender and msg.data, they should not be accessed in such a direct\r\n * manner, since when dealing with meta-transactions the account sending and\r\n * paying for execution may not be the actual sender (as far as an application\r\n * is concerned).\r\n *\r\n * This contract is only required for intermediate, library-like contracts.\r\n */\r\nabstract contract Context {\r\n    function _msgSender() internal view virtual returns (address) {\r\n        return msg.sender;\r\n    }\r\n\r\n    function _msgData() internal view virtual returns (bytes calldata) {\r\n        return msg.data;\r\n    }\r\n}\r\n\r\n\r\n\r\n/**\r\n * @dev Contract module which provides a basic access control mechanism, where\r\n * there is an account (an owner) that can be granted exclusive access to\r\n * specific functions.\r\n *\r\n * By default, the owner account will be the one that deploys the contract. This\r\n * can later be changed with {transferOwnership}.\r\n *\r\n * This module is used through inheritance. It will make available the modifier\r\n * `onlyOwner`, which can be applied to your functions to restrict their use to\r\n * the owner.\r\n */\r\nabstract contract Ownable is Context {\r\n    address private _owner;\r\n\r\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\r\n\r\n    /**\r\n     * @dev Initializes the contract setting the deployer as the initial owner.\r\n     */\r\n    constructor() {\r\n        _setOwner(_msgSender());\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the address of the current owner.\r\n     */\r\n    function owner() public view virtual returns (address) {\r\n        return _owner;\r\n    }\r\n\r\n    /**\r\n     * @dev Throws if called by any account other than the owner.\r\n     */\r\n    modifier onlyOwner() {\r\n        require(owner() == _msgSender(), \"Ownable: caller is not the owner\");\r\n        _;\r\n    }\r\n\r\n    /**\r\n     * @dev Leaves the contract without owner. It will not be possible to call\r\n     * `onlyOwner` functions anymore. Can only be called by the current owner.\r\n     *\r\n     * NOTE: Renouncing ownership will leave the contract without an owner,\r\n     * thereby removing any functionality that is only available to the owner.\r\n     */\r\n    function renounceOwnership() public virtual onlyOwner {\r\n        _setOwner(address(0));\r\n    }\r\n\r\n    /**\r\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\r\n     * Can only be called by the current owner.\r\n     */\r\n    function transferOwnership(address newOwner) public virtual onlyOwner {\r\n        require(newOwner != address(0), \"Ownable: new owner is the zero address\");\r\n        _setOwner(newOwner);\r\n    }\r\n\r\n    function _setOwner(address newOwner) private {\r\n        address oldOwner = _owner;\r\n        _owner = newOwner;\r\n        emit OwnershipTransferred(oldOwner, newOwner);\r\n    }\r\n}\r\n\r\n\r\n/**\r\n * @title Roles\r\n * @author Francisco Giordano (@frangio)\r\n * @dev Library for managing addresses assigned to a Role.\r\n * See RBAC.sol for example usage.\r\n */\r\nlibrary Roles {\r\n  struct Role {\r\n    mapping (address => bool) bearer;\r\n  }\r\n\r\n  /**\r\n   * @dev give an address access to this role\r\n   */\r\n  function add(Role storage _role, address _addr)\r\n    internal\r\n  {\r\n    _role.bearer[_addr] = true;\r\n  }\r\n\r\n  /**\r\n   * @dev remove an address' access to this role\r\n   */\r\n  function remove(Role storage _role, address _addr)\r\n    internal\r\n  {\r\n    _role.bearer[_addr] = false;\r\n  }\r\n\r\n  /**\r\n   * @dev check if an address has this role\r\n   * // reverts\r\n   */\r\n  function check(Role storage _role, address _addr)\r\n    internal\r\n    view\r\n  {\r\n    require(has(_role, _addr));\r\n  }\r\n\r\n  /**\r\n   * @dev check if an address has this role\r\n   * @return bool\r\n   */\r\n  function has(Role storage _role, address _addr)\r\n    internal\r\n    view\r\n    returns (bool)\r\n  {\r\n    return _role.bearer[_addr];\r\n  }\r\n}\r\n\r\n\r\n/**\r\n * @title RBAC (Role-Based Access Control)\r\n * @author Matt Condon (@Shrugs)\r\n * @dev Stores and provides setters and getters for roles and addresses.\r\n * Supports unlimited numbers of roles and addresses.\r\n * See //contracts/mocks/RBACMock.sol for an example of usage.\r\n * This RBAC method uses strings to key roles. It may be beneficial\r\n * for you to write your own implementation of this interface using Enums or similar.\r\n */\r\ncontract RBAC {\r\n  using Roles for Roles.Role;\r\n\r\n  mapping (string => Roles.Role) private roles;\r\n\r\n  event RoleAdded(address indexed operator, string role);\r\n  event RoleRemoved(address indexed operator, string role);\r\n\r\n  /**\r\n   * @dev reverts if addr does not have role\r\n   * @param _operator address\r\n   * @param _role the name of the role\r\n   * // reverts\r\n   */\r\n  function checkRole(address _operator, string memory _role)\r\n    public\r\n    view\r\n  {\r\n    roles[_role].check(_operator);\r\n  }\r\n\r\n  /**\r\n   * @dev determine if addr has role\r\n   * @param _operator address\r\n   * @param _role the name of the role\r\n   * @return bool\r\n   */\r\n  function hasRole(address _operator, string memory _role)\r\n    public\r\n    view\r\n    returns (bool)\r\n  {\r\n    return roles[_role].has(_operator);\r\n  }\r\n\r\n  /**\r\n   * @dev add a role to an address\r\n   * @param _operator address\r\n   * @param _role the name of the role\r\n   */\r\n  function addRole(address _operator, string memory _role)\r\n    internal\r\n  {\r\n    roles[_role].add(_operator);\r\n    emit RoleAdded(_operator, _role);\r\n  }\r\n\r\n  /**\r\n   * @dev remove a role from an address\r\n   * @param _operator address\r\n   * @param _role the name of the role\r\n   */\r\n  function removeRole(address _operator, string memory _role)\r\n    internal\r\n  {\r\n    roles[_role].remove(_operator);\r\n    emit RoleRemoved(_operator, _role);\r\n  }\r\n\r\n  /**\r\n   * @dev modifier to scope access to a single role (uses msg.sender as addr)\r\n   * @param _role the name of the role\r\n   * // reverts\r\n   */\r\n  modifier onlyRole(string memory _role)\r\n  {\r\n    checkRole(msg.sender, _role);\r\n    _;\r\n  }\r\n\r\n  /**\r\n   * @dev modifier to scope access to a set of roles (uses msg.sender as addr)\r\n   * @param _roles the names of the roles to scope access to\r\n   * // reverts\r\n   *\r\n   * @TODO - when solidity supports dynamic arrays as arguments to modifiers, provide this\r\n   *  see: https://github.com/ethereum/solidity/issues/2467\r\n   */\r\n  // modifier onlyRoles(string[] _roles) {\r\n  //     bool hasAnyRole = false;\r\n  //     for (uint8 i = 0; i < _roles.length; i++) {\r\n  //         if (hasRole(msg.sender, _roles[i])) {\r\n  //             hasAnyRole = true;\r\n  //             break;\r\n  //         }\r\n  //     }\r\n\r\n  //     require(hasAnyRole);\r\n\r\n  //     _;\r\n  // }\r\n}\r\n\r\n\r\n\r\n\r\n/**\r\n * @title Whitelist\r\n * @dev The Whitelist contract has a whitelist of addresses, and provides basic authorization control functions.\r\n * This simplifies the implementation of \"user permissions\".\r\n */\r\ncontract Whitelist is Ownable, RBAC {\r\n  string public constant ROLE_WHITELISTED = \"whitelist\";\r\n\r\n\r\n  modifier onlyIfWhitelisted(address _operator) {\r\n    checkRole(_operator, ROLE_WHITELISTED);\r\n    _;\r\n  }\r\n\r\n\r\n  function addAddressToWhitelist(address _operator)\r\n    public\r\n    onlyOwner\r\n  {\r\n    addRole(_operator, ROLE_WHITELISTED);\r\n  }\r\n\r\n  /**\r\n   * @dev getter to determine if address is in whitelist\r\n   */\r\n  function whitelist(address _operator)\r\n    public\r\n    view\r\n    returns (bool)\r\n  {\r\n    return hasRole(_operator, ROLE_WHITELISTED);\r\n  }\r\n\r\n  function addAddressesToWhitelist(address[] memory _operators)\r\n    public\r\n    onlyOwner\r\n  {\r\n    for (uint256 i = 0; i < _operators.length; i++) {\r\n      addAddressToWhitelist(_operators[i]);\r\n    }\r\n  }\r\n\r\n  function removeAddressFromWhitelist(address _operator)\r\n    public\r\n    onlyOwner\r\n  {\r\n    removeRole(_operator, ROLE_WHITELISTED);\r\n  }\r\n\r\n  function removeAddressesFromWhitelist(address[] memory _operators)\r\n    public\r\n    onlyOwner\r\n  {\r\n    for (uint256 i = 0; i < _operators.length; i++) {\r\n      removeAddressFromWhitelist(_operators[i]);\r\n    }\r\n  }\r\n\r\n}\r\n\r\n\r\n/**\r\n * @dev Contract module which allows children to implement an emergency stop\r\n * mechanism that can be triggered by an authorized account.\r\n *\r\n * This module is used through inheritance. It will make available the\r\n * modifiers `whenNotPaused` and `whenPaused`, which can be applied to\r\n * the functions of your contract. Note that they will not be pausable by\r\n * simply including this module, only once the modifiers are put in place.\r\n */\r\nabstract contract Pausable is Context {\r\n    /**\r\n     * @dev Emitted when the pause is triggered by `account`.\r\n     */\r\n    event Paused(address account);\r\n\r\n    /**\r\n     * @dev Emitted when the pause is lifted by `account`.\r\n     */\r\n    event Unpaused(address account);\r\n\r\n    bool private _paused;\r\n\r\n    /**\r\n     * @dev Initializes the contract in unpaused state.\r\n     */\r\n    constructor() {\r\n        _paused = false;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns true if the contract is paused, and false otherwise.\r\n     */\r\n    function paused() public view virtual returns (bool) {\r\n        return _paused;\r\n    }\r\n\r\n    /**\r\n     * @dev Modifier to make a function callable only when the contract is not paused.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - The contract must not be paused.\r\n     */\r\n    modifier whenNotPaused() {\r\n        require(!paused(), \"Pausable: paused\");\r\n        _;\r\n    }\r\n\r\n    /**\r\n     * @dev Modifier to make a function callable only when the contract is paused.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - The contract must be paused.\r\n     */\r\n    modifier whenPaused() {\r\n        require(paused(), \"Pausable: not paused\");\r\n        _;\r\n    }\r\n\r\n    /**\r\n     * @dev Triggers stopped state.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - The contract must not be paused.\r\n     */\r\n    function _pause() internal virtual whenNotPaused {\r\n        _paused = true;\r\n        emit Paused(_msgSender());\r\n    }\r\n\r\n    /**\r\n     * @dev Returns to normal state.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - The contract must be paused.\r\n     */\r\n    function _unpause() internal virtual whenPaused {\r\n        _paused = false;\r\n        emit Unpaused(_msgSender());\r\n    }\r\n}\r\n\r\ninterface ICAAsset {\r\n\r\n  function ownerOf(uint256 _tokenId) external view returns (address _owner);\r\n  function exists(uint256 _tokenId) external view returns (bool _exists);\r\n  \r\n  function transferFrom(address _from, address _to, uint256 _tokenId) external;\r\n  function safeTransferFrom(address _from, address _to, uint256 _tokenId) external;\r\n  function safeTransferFrom(address _from , address _to, uint256 _tokenId, bytes memory _data) external;\r\n\r\n  function editionOfTokenId(uint256 _tokenId) external view returns (uint256 tokenId);\r\n\r\n  function artistCommission(uint256 _tokenId) external view returns (address _artistAccount, uint256 _artistCommission);\r\n\r\n  function editionOptionalCommission(uint256 _tokenId) external view returns (uint256 _rate, address _recipient);\r\n\r\n  function mint(address _to, uint256 _editionNumber) external returns (uint256);\r\n\r\n  function approve(address _to, uint256 _tokenId) external;\r\n\r\n\r\n\r\n  function createActiveEdition(\r\n    uint256 _editionNumber,\r\n    bytes32 _editionData,\r\n    uint256 _editionType,\r\n    uint256 _startDate,\r\n    uint256 _endDate,\r\n    address _artistAccount,\r\n    uint256 _artistCommission,\r\n    uint256 _priceInWei,\r\n    string memory _tokenUri,\r\n    uint256 _totalAvailable\r\n  ) external returns (bool);\r\n\r\n  function artistsEditions(address _artistsAccount) external returns (uint256[] memory _editionNumbers);\r\n\r\n  function totalAvailableEdition(uint256 _editionNumber) external returns (uint256);\r\n\r\n  function highestEditionNumber() external returns (uint256);\r\n\r\n  function updateOptionalCommission(uint256 _editionNumber, uint256 _rate, address _recipient) external;\r\n\r\n  function updateStartDate(uint256 _editionNumber, uint256 _startDate) external;\r\n\r\n  function updateEndDate(uint256 _editionNumber, uint256 _endDate) external;\r\n\r\n  function updateEditionType(uint256 _editionNumber, uint256 _editionType) external;\r\n}\r\n\r\n\r\n\r\ninterface ICA24Auction {\r\n  function createReserveAuction(\r\n    uint256 tokenId,\r\n    address seller,\r\n    uint256 reservePrice\r\n  ) external;\r\n}\r\n\r\n\r\ninterface ISelfServiceAccessControls {\r\n\r\n  function isEnabledForAccount(address account) external view returns (bool);\r\n\r\n}\r\n\r\n\r\ninterface ISelfServiceFrequencyControls {\r\n\r\n  /*\r\n   * Checks is the given artist can create another edition\r\n   * @param artist - the edition artist\r\n   * @param totalAvailable - the edition size\r\n   * @param priceInWei - the edition price in wei\r\n   */\r\n  function canCreateNewEdition(address artist) external view returns (bool);\r\n\r\n  /*\r\n   * Records that an edition has been created\r\n   * @param artist - the edition artist\r\n   * @param totalAvailable - the edition size\r\n   * @param priceInWei - the edition price in wei\r\n   */\r\n  function recordSuccessfulMint(address artist, uint256 totalAvailable, uint256 priceInWei) external returns (bool);\r\n}\r\n\r\n\r\n\r\n\r\n// One invocation per time-period\r\ncontract EditionCurationMinter is Whitelist, Pausable {\r\n\r\n  // Calling address\r\n  ICAAsset public caAsset;\r\n  ICA24Auction public auction;\r\n  ISelfServiceAccessControls public accessControls;\r\n  ISelfServiceFrequencyControls public frequencyControls;\r\n\r\n  // Config which enforces editions to not be over this size\r\n  uint256 public maxEditionSize = 100;\r\n\r\n  // Config the minimum price per edition\r\n  uint256 public minPricePerEdition = 0; // 0.01 ether;\r\n\r\n  /**\r\n   * @dev Construct a new instance of the contract\r\n   */\r\n  constructor(\r\n    ICAAsset _caAsset,\r\n    ICA24Auction _auction,\r\n    ISelfServiceAccessControls _accessControls,\r\n    ISelfServiceFrequencyControls _frequencyControls\r\n  ) {\r\n    super.addAddressToWhitelist(msg.sender);\r\n\r\n    caAsset = _caAsset;\r\n    auction = _auction;\r\n    accessControls = _accessControls;\r\n    frequencyControls = _frequencyControls;\r\n  }\r\n\r\n  /**\r\n   * @dev Called by artists, create new edition on the CA platform\r\n   */\r\n  function createEditionFor24Auction(\r\n    address _optionalSplitAddress,\r\n    uint256 _optionalSplitRate,\r\n    uint256 _totalAvailable,\r\n    uint256 _priceInWei,\r\n    uint256 _startDate,\r\n    uint256 _endDate,\r\n    uint256 _artistCommission,\r\n    uint256 _editionType,\r\n    string memory _tokenUri\r\n  )\r\n  public\r\n  whenNotPaused\r\n  returns (uint256 _editionNumber, uint _tokenId)\r\n  {\r\n    address artists = msg.sender;\r\n\r\n    require(frequencyControls.canCreateNewEdition(artists), \"Sender currently frozen out of creation\");\r\n    require((_artistCommission + _optionalSplitRate) <= 100, \"Total commission exceeds 100\");\r\n\r\n    _editionNumber = _createEdition(\r\n      artists,\r\n      [_totalAvailable, _priceInWei, _startDate, _endDate, _artistCommission, _editionType],\r\n      _tokenUri\r\n    );\r\n\r\n    if (_optionalSplitRate > 0 && _optionalSplitAddress != address(0)) {\r\n      caAsset.updateOptionalCommission(_editionNumber, _optionalSplitRate, _optionalSplitAddress);\r\n    }\r\n\r\n    frequencyControls.recordSuccessfulMint(artists, _totalAvailable, _priceInWei);\r\n\r\n\r\n    _tokenId = caAsset.mint(address(this), _editionNumber);\r\n\r\n    caAsset.approve(address(auction), _tokenId);\r\n\r\n    auction.createReserveAuction(_tokenId, artists, _priceInWei);\r\n\r\n  }\r\n\r\n  /**\r\n   * @dev Internal function for edition creation\r\n   */\r\n  function _createEdition(\r\n    address _artist,\r\n    uint256[6] memory _params,\r\n    string memory _tokenUri\r\n  )\r\n  internal\r\n  returns (uint256 _editionNumber) {\r\n\r\n    uint256 _totalAvailable = _params[0];\r\n    uint256 _priceInWei = _params[1];\r\n\r\n    address owner = owner();\r\n\r\n    // Enforce edition size\r\n    require(msg.sender == owner || (_totalAvailable > 0 && _totalAvailable <= maxEditionSize), \"Invalid edition size\");\r\n\r\n    // Enforce min price\r\n    require(msg.sender == owner || _priceInWei >= minPricePerEdition, \"Invalid price\");\r\n\r\n    // If we are the owner, skip this artists check\r\n    require(msg.sender == owner || accessControls.isEnabledForAccount(_artist), \"Not allowed to create edition\");\r\n\r\n    // Find the next edition number we can use\r\n    uint256 editionNumber = getNextAvailableEditionNumber();\r\n\r\n    require(\r\n      caAsset.createActiveEdition(\r\n        editionNumber,\r\n        0x0, // _editionData - no edition data\r\n        _params[5], //_editionType,\r\n        _params[2], // _startDate,\r\n        _params[3], //_endDate,\r\n        _artist,\r\n        _params[4], // _artistCommission - defaults to artistCommission if optional commission split missing\r\n        _priceInWei,\r\n        _tokenUri,\r\n        _totalAvailable\r\n      ),\r\n      \"Failed to create new edition\"\r\n    );\r\n\r\n\r\n    return editionNumber;\r\n  }\r\n\r\n  /**\r\n   * @dev Internal function for dynamically generating the next KODA edition number\r\n   */\r\n  function getNextAvailableEditionNumber() internal returns (uint256 editionNumber) {\r\n\r\n    // Get current highest edition and total in the edition\r\n    uint256 highestEditionNumber = caAsset.highestEditionNumber();\r\n    uint256 totalAvailableEdition = caAsset.totalAvailableEdition(highestEditionNumber);\r\n\r\n    // Add the current highest plus its total, plus 1 as tokens start at 1 not zero\r\n    uint256 nextAvailableEditionNumber = highestEditionNumber + totalAvailableEdition + 1;\r\n\r\n    // Round up to next 100, 1000 etc based on max allowed size\r\n    return ((nextAvailableEditionNumber + maxEditionSize - 1) / maxEditionSize) * maxEditionSize;\r\n  }\r\n\r\n  /**\r\n   * @dev Sets the KODA address\r\n   * @dev Only callable from owner\r\n   */\r\n  function setCAAsset(ICAAsset _caAsset) onlyIfWhitelisted(msg.sender) public {\r\n    caAsset = _caAsset;\r\n  }\r\n\r\n  /**\r\n   * @dev Sets the KODA auction\r\n   * @dev Only callable from owner\r\n   */\r\n  function setAuction(ICA24Auction _auction) onlyIfWhitelisted(msg.sender) public {\r\n    auction = _auction;\r\n  }\r\n\r\n  /**\r\n   * @dev Sets the max edition size\r\n   * @dev Only callable from owner\r\n   */\r\n  function setMaxEditionSize(uint256 _maxEditionSize) onlyIfWhitelisted(msg.sender) public {\r\n    maxEditionSize = _maxEditionSize;\r\n  }\r\n\r\n  /**\r\n   * @dev Sets minimum price per edition\r\n   * @dev Only callable from owner\r\n   */\r\n  function setMinPricePerEdition(uint256 _minPricePerEdition) onlyIfWhitelisted(msg.sender) public {\r\n    minPricePerEdition = _minPricePerEdition;\r\n  }\r\n\r\n  /**\r\n   * @dev Checks to see if the account is currently frozen out\r\n   */\r\n  function isFrozen(address account) public view returns (bool) {\r\n    return frequencyControls.canCreateNewEdition(account);\r\n  }\r\n\r\n  /**\r\n   * @dev Checks to see if the account can create editions\r\n   */\r\n  function isEnabledForAccount(address account) public view returns (bool) {\r\n    return accessControls.isEnabledForAccount(account);\r\n  }\r\n\r\n  /**\r\n   * @dev Checks to see if the account can create editions\r\n   */\r\n  function canCreateAnotherEdition(address account) public view returns (bool) {\r\n    if (!accessControls.isEnabledForAccount(account)) {\r\n      return false;\r\n    }\r\n    return frequencyControls.canCreateNewEdition(account);\r\n  }\r\n\r\n  /**\r\n   * @dev Allows for the ability to extract stuck ether\r\n   * @dev Only callable from owner\r\n   */\r\n  function withdrawStuckEther(address _withdrawalAccount) onlyIfWhitelisted(msg.sender) public {\r\n    require(_withdrawalAccount != address(0), \"Invalid address provided\");\r\n    payable(_withdrawalAccount).transfer(address(this).balance);\r\n  }\r\n}","ABI":"[{\"inputs\":[{\"internalType\":\"contract ICAAsset\",\"name\":\"_caAsset\",\"type\":\"address\"},{\"internalType\":\"contract ICA24Auction\",\"name\":\"_auction\",\"type\":\"address\"},{\"internalType\":\"contract ISelfServiceAccessControls\",\"name\":\"_accessControls\",\"type\":\"address\"},{\"internalType\":\"contract ISelfServiceFrequencyControls\",\"name\":\"_frequencyControls\",\"type\":\"address\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"Paused\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"operator\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"string\",\"name\":\"role\",\"type\":\"string\"}],\"name\":\"RoleAdded\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"operator\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"string\",\"name\":\"role\",\"type\":\"string\"}],\"name\":\"RoleRemoved\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"Unpaused\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"ROLE_WHITELISTED\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"accessControls\",\"outputs\":[{\"internalType\":\"contract ISelfServiceAccessControls\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_operator\",\"type\":\"address\"}],\"name\":\"addAddressToWhitelist\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address[]\",\"name\":\"_operators\",\"type\":\"address[]\"}],\"name\":\"addAddressesToWhitelist\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"auction\",\"outputs\":[{\"internalType\":\"contract ICA24Auction\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"caAsset\",\"outputs\":[{\"internalType\":\"contract ICAAsset\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"canCreateAnotherEdition\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_operator\",\"type\":\"address\"},{\"internalType\":\"string\",\"name\":\"_role\",\"type\":\"string\"}],\"name\":\"checkRole\",\"outputs\":[],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_optionalSplitAddress\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_optionalSplitRate\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_totalAvailable\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_priceInWei\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_startDate\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_endDate\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_artistCommission\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_editionType\",\"type\":\"uint256\"},{\"internalType\":\"string\",\"name\":\"_tokenUri\",\"type\":\"string\"}],\"name\":\"createEditionFor24Auction\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"_editionNumber\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_tokenId\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"frequencyControls\",\"outputs\":[{\"internalType\":\"contract ISelfServiceFrequencyControls\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_operator\",\"type\":\"address\"},{\"internalType\":\"string\",\"name\":\"_role\",\"type\":\"string\"}],\"name\":\"hasRole\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"isEnabledForAccount\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"isFrozen\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"maxEditionSize\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"minPricePerEdition\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"paused\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_operator\",\"type\":\"address\"}],\"name\":\"removeAddressFromWhitelist\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address[]\",\"name\":\"_operators\",\"type\":\"address[]\"}],\"name\":\"removeAddressesFromWhitelist\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"contract ICA24Auction\",\"name\":\"_auction\",\"type\":\"address\"}],\"name\":\"setAuction\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"contract ICAAsset\",\"name\":\"_caAsset\",\"type\":\"address\"}],\"name\":\"setCAAsset\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_maxEditionSize\",\"type\":\"uint256\"}],\"name\":\"setMaxEditionSize\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_minPricePerEdition\",\"type\":\"uint256\"}],\"name\":\"setMinPricePerEdition\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_operator\",\"type\":\"address\"}],\"name\":\"whitelist\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_withdrawalAccount\",\"type\":\"address\"}],\"name\":\"withdrawStuckEther\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}]","ContractName":"EditionCurationMinter","CompilerVersion":"v0.8.6+commit.11564f7e","OptimizationUsed":"0","Runs":"200","ConstructorArguments":"0000000000000000000000003ad503084f1bd8d15a7f5ebe7a038c064e1e3fa100000000000000000000000072d081953957723e540780a0c6ba31725469238e000000000000000000000000a171f57c90d8363744c7f9f550eeac7f5d974737000000000000000000000000840184fa270ca6848a2db66e76e7327c9d9d3850","EVMVersion":"Default","Library":"","LicenseType":"None","Proxy":"0","Implementation":"","SwarmSource":"ipfs://5ce3a3cfff8b6b150f9042b7d535e66858f51d384c574ca4bcdad30f5054150b"}]}