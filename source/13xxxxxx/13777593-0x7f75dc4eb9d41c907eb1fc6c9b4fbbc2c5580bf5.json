{"status":"1","message":"OK","result":[{"SourceCode":"/**\r\n *Submitted for verification at Etherscan.io on 2021-09-23\r\n*/\r\n\r\n// SPDX-License-Identifier: GPL-3.0-only\r\npragma solidity 0.7.6;\r\n\r\ninterface IFactory {\r\n    function create(bytes calldata args) external returns (address instance);\r\n\r\n    function create2(bytes calldata args, bytes32 salt) external returns (address instance);\r\n}\r\n\r\n\r\npragma solidity >=0.6.0 <0.8.0;\r\n\r\n/*\r\n * @dev Provides information about the current execution context, including the\r\n * sender of the transaction and its data. While these are generally available\r\n * via msg.sender and msg.data, they should not be accessed in such a direct\r\n * manner, since when dealing with GSN meta-transactions the account sending and\r\n * paying for execution may not be the actual sender (as far as an application\r\n * is concerned).\r\n *\r\n * This contract is only required for intermediate, library-like contracts.\r\n */\r\nabstract contract Context {\r\n    function _msgSender() internal view virtual returns (address payable) {\r\n        return msg.sender;\r\n    }\r\n\r\n    function _msgData() internal view virtual returns (bytes memory) {\r\n        this; // silence state mutability warning without generating bytecode - see https://github.com/ethereum/solidity/issues/2691\r\n        return msg.data;\r\n    }\r\n}\r\n\r\n\r\npragma solidity ^0.7.0;\r\n\r\n/**\r\n * @title ERC721 token receiver interface\r\n * @dev Interface for any contract that wants to support safeTransfers\r\n * from ERC721 asset contracts.\r\n */\r\ninterface IERC721Receiver {\r\n    /**\r\n     * @dev Whenever an {IERC721} `tokenId` token is transferred to this contract via {IERC721-safeTransferFrom}\r\n     * by `operator` from `from`, this function is called.\r\n     *\r\n     * It must return its Solidity selector to confirm the token transfer.\r\n     * If any other value is returned or the interface is not implemented by the recipient, the transfer will be reverted.\r\n     *\r\n     * The selector can be obtained in Solidity with `IERC721.onERC721Received.selector`.\r\n     */\r\n    function onERC721Received(address operator, address from, uint256 tokenId, bytes calldata data) external returns (bytes4);\r\n}\r\n\r\n\r\npragma solidity ^0.7.0;\r\n\r\n/**\r\n * @dev Wrappers over Solidity's arithmetic operations with added overflow\r\n * checks.\r\n *\r\n * Arithmetic operations in Solidity wrap on overflow. This can easily result\r\n * in bugs, because programmers usually assume that an overflow raises an\r\n * error, which is the standard behavior in high level programming languages.\r\n * `SafeMath` restores this intuition by reverting the transaction when an\r\n * operation overflows.\r\n *\r\n * Using this library instead of the unchecked operations eliminates an entire\r\n * class of bugs, so it's recommended to use it always.\r\n */\r\nlibrary SafeMath {\r\n    /**\r\n     * @dev Returns the addition of two unsigned integers, with an overflow flag.\r\n     *\r\n     * _Available since v3.4._\r\n     */\r\n    function tryAdd(uint256 a, uint256 b) internal pure returns (bool, uint256) {\r\n        uint256 c = a + b;\r\n        if (c < a) return (false, 0);\r\n        return (true, c);\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the substraction of two unsigned integers, with an overflow flag.\r\n     *\r\n     * _Available since v3.4._\r\n     */\r\n    function trySub(uint256 a, uint256 b) internal pure returns (bool, uint256) {\r\n        if (b > a) return (false, 0);\r\n        return (true, a - b);\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the multiplication of two unsigned integers, with an overflow flag.\r\n     *\r\n     * _Available since v3.4._\r\n     */\r\n    function tryMul(uint256 a, uint256 b) internal pure returns (bool, uint256) {\r\n        // Gas optimization: this is cheaper than requiring 'a' not being zero, but the\r\n        // benefit is lost if 'b' is also tested.\r\n        // See: https://github.com/OpenZeppelin/openzeppelin-contracts/pull/522\r\n        if (a == 0) return (true, 0);\r\n        uint256 c = a * b;\r\n        if (c / a != b) return (false, 0);\r\n        return (true, c);\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the division of two unsigned integers, with a division by zero flag.\r\n     *\r\n     * _Available since v3.4._\r\n     */\r\n    function tryDiv(uint256 a, uint256 b) internal pure returns (bool, uint256) {\r\n        if (b == 0) return (false, 0);\r\n        return (true, a / b);\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the remainder of dividing two unsigned integers, with a division by zero flag.\r\n     *\r\n     * _Available since v3.4._\r\n     */\r\n    function tryMod(uint256 a, uint256 b) internal pure returns (bool, uint256) {\r\n        if (b == 0) return (false, 0);\r\n        return (true, a % b);\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the addition of two unsigned integers, reverting on\r\n     * overflow.\r\n     *\r\n     * Counterpart to Solidity's `+` operator.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - Addition cannot overflow.\r\n     */\r\n    function add(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        uint256 c = a + b;\r\n        require(c >= a, \"SafeMath: addition overflow\");\r\n        return c;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the subtraction of two unsigned integers, reverting on\r\n     * overflow (when the result is negative).\r\n     *\r\n     * Counterpart to Solidity's `-` operator.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - Subtraction cannot overflow.\r\n     */\r\n    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        require(b <= a, \"SafeMath: subtraction overflow\");\r\n        return a - b;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the multiplication of two unsigned integers, reverting on\r\n     * overflow.\r\n     *\r\n     * Counterpart to Solidity's `*` operator.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - Multiplication cannot overflow.\r\n     */\r\n    function mul(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        if (a == 0) return 0;\r\n        uint256 c = a * b;\r\n        require(c / a == b, \"SafeMath: multiplication overflow\");\r\n        return c;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the integer division of two unsigned integers, reverting on\r\n     * division by zero. The result is rounded towards zero.\r\n     *\r\n     * Counterpart to Solidity's `/` operator. Note: this function uses a\r\n     * `revert` opcode (which leaves remaining gas untouched) while Solidity\r\n     * uses an invalid opcode to revert (consuming all remaining gas).\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - The divisor cannot be zero.\r\n     */\r\n    function div(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        require(b > 0, \"SafeMath: division by zero\");\r\n        return a / b;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\r\n     * reverting when dividing by zero.\r\n     *\r\n     * Counterpart to Solidity's `%` operator. This function uses a `revert`\r\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\r\n     * invalid opcode to revert (consuming all remaining gas).\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - The divisor cannot be zero.\r\n     */\r\n    function mod(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        require(b > 0, \"SafeMath: modulo by zero\");\r\n        return a % b;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the subtraction of two unsigned integers, reverting with custom message on\r\n     * overflow (when the result is negative).\r\n     *\r\n     * CAUTION: This function is deprecated because it requires allocating memory for the error\r\n     * message unnecessarily. For custom revert reasons use {trySub}.\r\n     *\r\n     * Counterpart to Solidity's `-` operator.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - Subtraction cannot overflow.\r\n     */\r\n    function sub(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\r\n        require(b <= a, errorMessage);\r\n        return a - b;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the integer division of two unsigned integers, reverting with custom message on\r\n     * division by zero. The result is rounded towards zero.\r\n     *\r\n     * CAUTION: This function is deprecated because it requires allocating memory for the error\r\n     * message unnecessarily. For custom revert reasons use {tryDiv}.\r\n     *\r\n     * Counterpart to Solidity's `/` operator. Note: this function uses a\r\n     * `revert` opcode (which leaves remaining gas untouched) while Solidity\r\n     * uses an invalid opcode to revert (consuming all remaining gas).\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - The divisor cannot be zero.\r\n     */\r\n    function div(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\r\n        require(b > 0, errorMessage);\r\n        return a / b;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\r\n     * reverting with custom message when dividing by zero.\r\n     *\r\n     * CAUTION: This function is deprecated because it requires allocating memory for the error\r\n     * message unnecessarily. For custom revert reasons use {tryMod}.\r\n     *\r\n     * Counterpart to Solidity's `%` operator. This function uses a `revert`\r\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\r\n     * invalid opcode to revert (consuming all remaining gas).\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - The divisor cannot be zero.\r\n     */\r\n    function mod(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\r\n        require(b > 0, errorMessage);\r\n        return a % b;\r\n    }\r\n}\r\n\r\n\r\npragma solidity ^0.7.0;\r\n\r\n/**\r\n * @dev Collection of functions related to the address type\r\n */\r\nlibrary Address {\r\n    /**\r\n     * @dev Returns true if `account` is a contract.\r\n     *\r\n     * [IMPORTANT]\r\n     * ====\r\n     * It is unsafe to assume that an address for which this function returns\r\n     * false is an externally-owned account (EOA) and not a contract.\r\n     *\r\n     * Among others, `isContract` will return false for the following\r\n     * types of addresses:\r\n     *\r\n     *  - an externally-owned account\r\n     *  - a contract in construction\r\n     *  - an address where a contract will be created\r\n     *  - an address where a contract lived, but was destroyed\r\n     * ====\r\n     */\r\n    function isContract(address account) internal view returns (bool) {\r\n        // This method relies on extcodesize, which returns 0 for contracts in\r\n        // construction, since the code is only stored at the end of the\r\n        // constructor execution.\r\n\r\n        uint256 size;\r\n        // solhint-disable-next-line no-inline-assembly\r\n        assembly { size := extcodesize(account) }\r\n        return size > 0;\r\n    }\r\n\r\n    /**\r\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\r\n     * `recipient`, forwarding all available gas and reverting on errors.\r\n     *\r\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\r\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\r\n     * imposed by `transfer`, making them unable to receive funds via\r\n     * `transfer`. {sendValue} removes this limitation.\r\n     *\r\n     * https://diligence.consensys.net/posts/2019/09/stop-using-soliditys-transfer-now/[Learn more].\r\n     *\r\n     * IMPORTANT: because control is transferred to `recipient`, care must be\r\n     * taken to not create reentrancy vulnerabilities. Consider using\r\n     * {ReentrancyGuard} or the\r\n     * https://solidity.readthedocs.io/en/v0.5.11/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\r\n     */\r\n    function sendValue(address payable recipient, uint256 amount) internal {\r\n        require(address(this).balance >= amount, \"Address: insufficient balance\");\r\n\r\n        // solhint-disable-next-line avoid-low-level-calls, avoid-call-value\r\n        (bool success, ) = recipient.call{ value: amount }(\"\");\r\n        require(success, \"Address: unable to send value, recipient may have reverted\");\r\n    }\r\n\r\n    /**\r\n     * @dev Performs a Solidity function call using a low level `call`. A\r\n     * plain`call` is an unsafe replacement for a function call: use this\r\n     * function instead.\r\n     *\r\n     * If `target` reverts with a revert reason, it is bubbled up by this\r\n     * function (like regular Solidity function calls).\r\n     *\r\n     * Returns the raw returned data. To convert to the expected return value,\r\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - `target` must be a contract.\r\n     * - calling `target` with `data` must not revert.\r\n     *\r\n     * _Available since v3.1._\r\n     */\r\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\r\n      return functionCall(target, data, \"Address: low-level call failed\");\r\n    }\r\n\r\n    /**\r\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\r\n     * `errorMessage` as a fallback revert reason when `target` reverts.\r\n     *\r\n     * _Available since v3.1._\r\n     */\r\n    function functionCall(address target, bytes memory data, string memory errorMessage) internal returns (bytes memory) {\r\n        return functionCallWithValue(target, data, 0, errorMessage);\r\n    }\r\n\r\n    /**\r\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\r\n     * but also transferring `value` wei to `target`.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - the calling contract must have an ETH balance of at least `value`.\r\n     * - the called Solidity function must be `payable`.\r\n     *\r\n     * _Available since v3.1._\r\n     */\r\n    function functionCallWithValue(address target, bytes memory data, uint256 value) internal returns (bytes memory) {\r\n        return functionCallWithValue(target, data, value, \"Address: low-level call with value failed\");\r\n    }\r\n\r\n    /**\r\n     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\r\n     * with `errorMessage` as a fallback revert reason when `target` reverts.\r\n     *\r\n     * _Available since v3.1._\r\n     */\r\n    function functionCallWithValue(address target, bytes memory data, uint256 value, string memory errorMessage) internal returns (bytes memory) {\r\n        require(address(this).balance >= value, \"Address: insufficient balance for call\");\r\n        require(isContract(target), \"Address: call to non-contract\");\r\n\r\n        // solhint-disable-next-line avoid-low-level-calls\r\n        (bool success, bytes memory returndata) = target.call{ value: value }(data);\r\n        return _verifyCallResult(success, returndata, errorMessage);\r\n    }\r\n\r\n    /**\r\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\r\n     * but performing a static call.\r\n     *\r\n     * _Available since v3.3._\r\n     */\r\n    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\r\n        return functionStaticCall(target, data, \"Address: low-level static call failed\");\r\n    }\r\n\r\n    /**\r\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\r\n     * but performing a static call.\r\n     *\r\n     * _Available since v3.3._\r\n     */\r\n    function functionStaticCall(address target, bytes memory data, string memory errorMessage) internal view returns (bytes memory) {\r\n        require(isContract(target), \"Address: static call to non-contract\");\r\n\r\n        // solhint-disable-next-line avoid-low-level-calls\r\n        (bool success, bytes memory returndata) = target.staticcall(data);\r\n        return _verifyCallResult(success, returndata, errorMessage);\r\n    }\r\n\r\n    /**\r\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\r\n     * but performing a delegate call.\r\n     *\r\n     * _Available since v3.4._\r\n     */\r\n    function functionDelegateCall(address target, bytes memory data) internal returns (bytes memory) {\r\n        return functionDelegateCall(target, data, \"Address: low-level delegate call failed\");\r\n    }\r\n\r\n    /**\r\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\r\n     * but performing a delegate call.\r\n     *\r\n     * _Available since v3.4._\r\n     */\r\n    function functionDelegateCall(address target, bytes memory data, string memory errorMessage) internal returns (bytes memory) {\r\n        require(isContract(target), \"Address: delegate call to non-contract\");\r\n\r\n        // solhint-disable-next-line avoid-low-level-calls\r\n        (bool success, bytes memory returndata) = target.delegatecall(data);\r\n        return _verifyCallResult(success, returndata, errorMessage);\r\n    }\r\n\r\n    function _verifyCallResult(bool success, bytes memory returndata, string memory errorMessage) private pure returns(bytes memory) {\r\n        if (success) {\r\n            return returndata;\r\n        } else {\r\n            // Look for revert reason and bubble it up if present\r\n            if (returndata.length > 0) {\r\n                // The easiest way to bubble the revert reason is using memory via assembly\r\n\r\n                // solhint-disable-next-line no-inline-assembly\r\n                assembly {\r\n                    let returndata_size := mload(returndata)\r\n                    revert(add(32, returndata), returndata_size)\r\n                }\r\n            } else {\r\n                revert(errorMessage);\r\n            }\r\n        }\r\n    }\r\n}\r\n\r\n\r\npragma solidity ^0.7.0;\r\n\r\n/**\r\n * @dev Library for managing\r\n * https://en.wikipedia.org/wiki/Set_(abstract_data_type)[sets] of primitive\r\n * types.\r\n *\r\n * Sets have the following properties:\r\n *\r\n * - Elements are added, removed, and checked for existence in constant time\r\n * (O(1)).\r\n * - Elements are enumerated in O(n). No guarantees are made on the ordering.\r\n *\r\n * ```\r\n * contract Example {\r\n *     // Add the library methods\r\n *     using EnumerableSet for EnumerableSet.AddressSet;\r\n *\r\n *     // Declare a set state variable\r\n *     EnumerableSet.AddressSet private mySet;\r\n * }\r\n * ```\r\n *\r\n * As of v3.3.0, sets of type `bytes32` (`Bytes32Set`), `address` (`AddressSet`)\r\n * and `uint256` (`UintSet`) are supported.\r\n */\r\nlibrary EnumerableSet {\r\n    // To implement this library for multiple types with as little code\r\n    // repetition as possible, we write it in terms of a generic Set type with\r\n    // bytes32 values.\r\n    // The Set implementation uses private functions, and user-facing\r\n    // implementations (such as AddressSet) are just wrappers around the\r\n    // underlying Set.\r\n    // This means that we can only create new EnumerableSets for types that fit\r\n    // in bytes32.\r\n\r\n    struct Set {\r\n        // Storage of set values\r\n        bytes32[] _values;\r\n\r\n        // Position of the value in the `values` array, plus 1 because index 0\r\n        // means a value is not in the set.\r\n        mapping (bytes32 => uint256) _indexes;\r\n    }\r\n\r\n    /**\r\n     * @dev Add a value to a set. O(1).\r\n     *\r\n     * Returns true if the value was added to the set, that is if it was not\r\n     * already present.\r\n     */\r\n    function _add(Set storage set, bytes32 value) private returns (bool) {\r\n        if (!_contains(set, value)) {\r\n            set._values.push(value);\r\n            // The value is stored at length-1, but we add 1 to all indexes\r\n            // and use 0 as a sentinel value\r\n            set._indexes[value] = set._values.length;\r\n            return true;\r\n        } else {\r\n            return false;\r\n        }\r\n    }\r\n\r\n    /**\r\n     * @dev Removes a value from a set. O(1).\r\n     *\r\n     * Returns true if the value was removed from the set, that is if it was\r\n     * present.\r\n     */\r\n    function _remove(Set storage set, bytes32 value) private returns (bool) {\r\n        // We read and store the value's index to prevent multiple reads from the same storage slot\r\n        uint256 valueIndex = set._indexes[value];\r\n\r\n        if (valueIndex != 0) { // Equivalent to contains(set, value)\r\n            // To delete an element from the _values array in O(1), we swap the element to delete with the last one in\r\n            // the array, and then remove the last element (sometimes called as 'swap and pop').\r\n            // This modifies the order of the array, as noted in {at}.\r\n\r\n            uint256 toDeleteIndex = valueIndex - 1;\r\n            uint256 lastIndex = set._values.length - 1;\r\n\r\n            // When the value to delete is the last one, the swap operation is unnecessary. However, since this occurs\r\n            // so rarely, we still do the swap anyway to avoid the gas cost of adding an 'if' statement.\r\n\r\n            bytes32 lastvalue = set._values[lastIndex];\r\n\r\n            // Move the last value to the index where the value to delete is\r\n            set._values[toDeleteIndex] = lastvalue;\r\n            // Update the index for the moved value\r\n            set._indexes[lastvalue] = toDeleteIndex + 1; // All indexes are 1-based\r\n\r\n            // Delete the slot where the moved value was stored\r\n            set._values.pop();\r\n\r\n            // Delete the index for the deleted slot\r\n            delete set._indexes[value];\r\n\r\n            return true;\r\n        } else {\r\n            return false;\r\n        }\r\n    }\r\n\r\n    /**\r\n     * @dev Returns true if the value is in the set. O(1).\r\n     */\r\n    function _contains(Set storage set, bytes32 value) private view returns (bool) {\r\n        return set._indexes[value] != 0;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the number of values on the set. O(1).\r\n     */\r\n    function _length(Set storage set) private view returns (uint256) {\r\n        return set._values.length;\r\n    }\r\n\r\n   /**\r\n    * @dev Returns the value stored at position `index` in the set. O(1).\r\n    *\r\n    * Note that there are no guarantees on the ordering of values inside the\r\n    * array, and it may change when more values are added or removed.\r\n    *\r\n    * Requirements:\r\n    *\r\n    * - `index` must be strictly less than {length}.\r\n    */\r\n    function _at(Set storage set, uint256 index) private view returns (bytes32) {\r\n        require(set._values.length > index, \"EnumerableSet: index out of bounds\");\r\n        return set._values[index];\r\n    }\r\n\r\n    // Bytes32Set\r\n\r\n    struct Bytes32Set {\r\n        Set _inner;\r\n    }\r\n\r\n    /**\r\n     * @dev Add a value to a set. O(1).\r\n     *\r\n     * Returns true if the value was added to the set, that is if it was not\r\n     * already present.\r\n     */\r\n    function add(Bytes32Set storage set, bytes32 value) internal returns (bool) {\r\n        return _add(set._inner, value);\r\n    }\r\n\r\n    /**\r\n     * @dev Removes a value from a set. O(1).\r\n     *\r\n     * Returns true if the value was removed from the set, that is if it was\r\n     * present.\r\n     */\r\n    function remove(Bytes32Set storage set, bytes32 value) internal returns (bool) {\r\n        return _remove(set._inner, value);\r\n    }\r\n\r\n    /**\r\n     * @dev Returns true if the value is in the set. O(1).\r\n     */\r\n    function contains(Bytes32Set storage set, bytes32 value) internal view returns (bool) {\r\n        return _contains(set._inner, value);\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the number of values in the set. O(1).\r\n     */\r\n    function length(Bytes32Set storage set) internal view returns (uint256) {\r\n        return _length(set._inner);\r\n    }\r\n\r\n   /**\r\n    * @dev Returns the value stored at position `index` in the set. O(1).\r\n    *\r\n    * Note that there are no guarantees on the ordering of values inside the\r\n    * array, and it may change when more values are added or removed.\r\n    *\r\n    * Requirements:\r\n    *\r\n    * - `index` must be strictly less than {length}.\r\n    */\r\n    function at(Bytes32Set storage set, uint256 index) internal view returns (bytes32) {\r\n        return _at(set._inner, index);\r\n    }\r\n\r\n    // AddressSet\r\n\r\n    struct AddressSet {\r\n        Set _inner;\r\n    }\r\n\r\n    /**\r\n     * @dev Add a value to a set. O(1).\r\n     *\r\n     * Returns true if the value was added to the set, that is if it was not\r\n     * already present.\r\n     */\r\n    function add(AddressSet storage set, address value) internal returns (bool) {\r\n        return _add(set._inner, bytes32(uint256(uint160(value))));\r\n    }\r\n\r\n    /**\r\n     * @dev Removes a value from a set. O(1).\r\n     *\r\n     * Returns true if the value was removed from the set, that is if it was\r\n     * present.\r\n     */\r\n    function remove(AddressSet storage set, address value) internal returns (bool) {\r\n        return _remove(set._inner, bytes32(uint256(uint160(value))));\r\n    }\r\n\r\n    /**\r\n     * @dev Returns true if the value is in the set. O(1).\r\n     */\r\n    function contains(AddressSet storage set, address value) internal view returns (bool) {\r\n        return _contains(set._inner, bytes32(uint256(uint160(value))));\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the number of values in the set. O(1).\r\n     */\r\n    function length(AddressSet storage set) internal view returns (uint256) {\r\n        return _length(set._inner);\r\n    }\r\n\r\n   /**\r\n    * @dev Returns the value stored at position `index` in the set. O(1).\r\n    *\r\n    * Note that there are no guarantees on the ordering of values inside the\r\n    * array, and it may change when more values are added or removed.\r\n    *\r\n    * Requirements:\r\n    *\r\n    * - `index` must be strictly less than {length}.\r\n    */\r\n    function at(AddressSet storage set, uint256 index) internal view returns (address) {\r\n        return address(uint160(uint256(_at(set._inner, index))));\r\n    }\r\n\r\n\r\n    // UintSet\r\n\r\n    struct UintSet {\r\n        Set _inner;\r\n    }\r\n\r\n    /**\r\n     * @dev Add a value to a set. O(1).\r\n     *\r\n     * Returns true if the value was added to the set, that is if it was not\r\n     * already present.\r\n     */\r\n    function add(UintSet storage set, uint256 value) internal returns (bool) {\r\n        return _add(set._inner, bytes32(value));\r\n    }\r\n\r\n    /**\r\n     * @dev Removes a value from a set. O(1).\r\n     *\r\n     * Returns true if the value was removed from the set, that is if it was\r\n     * present.\r\n     */\r\n    function remove(UintSet storage set, uint256 value) internal returns (bool) {\r\n        return _remove(set._inner, bytes32(value));\r\n    }\r\n\r\n    /**\r\n     * @dev Returns true if the value is in the set. O(1).\r\n     */\r\n    function contains(UintSet storage set, uint256 value) internal view returns (bool) {\r\n        return _contains(set._inner, bytes32(value));\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the number of values on the set. O(1).\r\n     */\r\n    function length(UintSet storage set) internal view returns (uint256) {\r\n        return _length(set._inner);\r\n    }\r\n\r\n   /**\r\n    * @dev Returns the value stored at position `index` in the set. O(1).\r\n    *\r\n    * Note that there are no guarantees on the ordering of values inside the\r\n    * array, and it may change when more values are added or removed.\r\n    *\r\n    * Requirements:\r\n    *\r\n    * - `index` must be strictly less than {length}.\r\n    */\r\n    function at(UintSet storage set, uint256 index) internal view returns (uint256) {\r\n        return uint256(_at(set._inner, index));\r\n    }\r\n}\r\n\r\n\r\npragma solidity ^0.7.0;\r\n\r\n/**\r\n * @dev Library for managing an enumerable variant of Solidity's\r\n * https://solidity.readthedocs.io/en/latest/types.html#mapping-types[`mapping`]\r\n * type.\r\n *\r\n * Maps have the following properties:\r\n *\r\n * - Entries are added, removed, and checked for existence in constant time\r\n * (O(1)).\r\n * - Entries are enumerated in O(n). No guarantees are made on the ordering.\r\n *\r\n * ```\r\n * contract Example {\r\n *     // Add the library methods\r\n *     using EnumerableMap for EnumerableMap.UintToAddressMap;\r\n *\r\n *     // Declare a set state variable\r\n *     EnumerableMap.UintToAddressMap private myMap;\r\n * }\r\n * ```\r\n *\r\n * As of v3.0.0, only maps of type `uint256 -> address` (`UintToAddressMap`) are\r\n * supported.\r\n */\r\nlibrary EnumerableMap {\r\n    // To implement this library for multiple types with as little code\r\n    // repetition as possible, we write it in terms of a generic Map type with\r\n    // bytes32 keys and values.\r\n    // The Map implementation uses private functions, and user-facing\r\n    // implementations (such as Uint256ToAddressMap) are just wrappers around\r\n    // the underlying Map.\r\n    // This means that we can only create new EnumerableMaps for types that fit\r\n    // in bytes32.\r\n\r\n    struct MapEntry {\r\n        bytes32 _key;\r\n        bytes32 _value;\r\n    }\r\n\r\n    struct Map {\r\n        // Storage of map keys and values\r\n        MapEntry[] _entries;\r\n\r\n        // Position of the entry defined by a key in the `entries` array, plus 1\r\n        // because index 0 means a key is not in the map.\r\n        mapping (bytes32 => uint256) _indexes;\r\n    }\r\n\r\n    /**\r\n     * @dev Adds a key-value pair to a map, or updates the value for an existing\r\n     * key. O(1).\r\n     *\r\n     * Returns true if the key was added to the map, that is if it was not\r\n     * already present.\r\n     */\r\n    function _set(Map storage map, bytes32 key, bytes32 value) private returns (bool) {\r\n        // We read and store the key's index to prevent multiple reads from the same storage slot\r\n        uint256 keyIndex = map._indexes[key];\r\n\r\n        if (keyIndex == 0) { // Equivalent to !contains(map, key)\r\n            map._entries.push(MapEntry({ _key: key, _value: value }));\r\n            // The entry is stored at length-1, but we add 1 to all indexes\r\n            // and use 0 as a sentinel value\r\n            map._indexes[key] = map._entries.length;\r\n            return true;\r\n        } else {\r\n            map._entries[keyIndex - 1]._value = value;\r\n            return false;\r\n        }\r\n    }\r\n\r\n    /**\r\n     * @dev Removes a key-value pair from a map. O(1).\r\n     *\r\n     * Returns true if the key was removed from the map, that is if it was present.\r\n     */\r\n    function _remove(Map storage map, bytes32 key) private returns (bool) {\r\n        // We read and store the key's index to prevent multiple reads from the same storage slot\r\n        uint256 keyIndex = map._indexes[key];\r\n\r\n        if (keyIndex != 0) { // Equivalent to contains(map, key)\r\n            // To delete a key-value pair from the _entries array in O(1), we swap the entry to delete with the last one\r\n            // in the array, and then remove the last entry (sometimes called as 'swap and pop').\r\n            // This modifies the order of the array, as noted in {at}.\r\n\r\n            uint256 toDeleteIndex = keyIndex - 1;\r\n            uint256 lastIndex = map._entries.length - 1;\r\n\r\n            // When the entry to delete is the last one, the swap operation is unnecessary. However, since this occurs\r\n            // so rarely, we still do the swap anyway to avoid the gas cost of adding an 'if' statement.\r\n\r\n            MapEntry storage lastEntry = map._entries[lastIndex];\r\n\r\n            // Move the last entry to the index where the entry to delete is\r\n            map._entries[toDeleteIndex] = lastEntry;\r\n            // Update the index for the moved entry\r\n            map._indexes[lastEntry._key] = toDeleteIndex + 1; // All indexes are 1-based\r\n\r\n            // Delete the slot where the moved entry was stored\r\n            map._entries.pop();\r\n\r\n            // Delete the index for the deleted slot\r\n            delete map._indexes[key];\r\n\r\n            return true;\r\n        } else {\r\n            return false;\r\n        }\r\n    }\r\n\r\n    /**\r\n     * @dev Returns true if the key is in the map. O(1).\r\n     */\r\n    function _contains(Map storage map, bytes32 key) private view returns (bool) {\r\n        return map._indexes[key] != 0;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the number of key-value pairs in the map. O(1).\r\n     */\r\n    function _length(Map storage map) private view returns (uint256) {\r\n        return map._entries.length;\r\n    }\r\n\r\n   /**\r\n    * @dev Returns the key-value pair stored at position `index` in the map. O(1).\r\n    *\r\n    * Note that there are no guarantees on the ordering of entries inside the\r\n    * array, and it may change when more entries are added or removed.\r\n    *\r\n    * Requirements:\r\n    *\r\n    * - `index` must be strictly less than {length}.\r\n    */\r\n    function _at(Map storage map, uint256 index) private view returns (bytes32, bytes32) {\r\n        require(map._entries.length > index, \"EnumerableMap: index out of bounds\");\r\n\r\n        MapEntry storage entry = map._entries[index];\r\n        return (entry._key, entry._value);\r\n    }\r\n\r\n    /**\r\n     * @dev Tries to returns the value associated with `key`.  O(1).\r\n     * Does not revert if `key` is not in the map.\r\n     */\r\n    function _tryGet(Map storage map, bytes32 key) private view returns (bool, bytes32) {\r\n        uint256 keyIndex = map._indexes[key];\r\n        if (keyIndex == 0) return (false, 0); // Equivalent to contains(map, key)\r\n        return (true, map._entries[keyIndex - 1]._value); // All indexes are 1-based\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the value associated with `key`.  O(1).\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - `key` must be in the map.\r\n     */\r\n    function _get(Map storage map, bytes32 key) private view returns (bytes32) {\r\n        uint256 keyIndex = map._indexes[key];\r\n        require(keyIndex != 0, \"EnumerableMap: nonexistent key\"); // Equivalent to contains(map, key)\r\n        return map._entries[keyIndex - 1]._value; // All indexes are 1-based\r\n    }\r\n\r\n    /**\r\n     * @dev Same as {_get}, with a custom error message when `key` is not in the map.\r\n     *\r\n     * CAUTION: This function is deprecated because it requires allocating memory for the error\r\n     * message unnecessarily. For custom revert reasons use {_tryGet}.\r\n     */\r\n    function _get(Map storage map, bytes32 key, string memory errorMessage) private view returns (bytes32) {\r\n        uint256 keyIndex = map._indexes[key];\r\n        require(keyIndex != 0, errorMessage); // Equivalent to contains(map, key)\r\n        return map._entries[keyIndex - 1]._value; // All indexes are 1-based\r\n    }\r\n\r\n    // UintToAddressMap\r\n\r\n    struct UintToAddressMap {\r\n        Map _inner;\r\n    }\r\n\r\n    /**\r\n     * @dev Adds a key-value pair to a map, or updates the value for an existing\r\n     * key. O(1).\r\n     *\r\n     * Returns true if the key was added to the map, that is if it was not\r\n     * already present.\r\n     */\r\n    function set(UintToAddressMap storage map, uint256 key, address value) internal returns (bool) {\r\n        return _set(map._inner, bytes32(key), bytes32(uint256(uint160(value))));\r\n    }\r\n\r\n    /**\r\n     * @dev Removes a value from a set. O(1).\r\n     *\r\n     * Returns true if the key was removed from the map, that is if it was present.\r\n     */\r\n    function remove(UintToAddressMap storage map, uint256 key) internal returns (bool) {\r\n        return _remove(map._inner, bytes32(key));\r\n    }\r\n\r\n    /**\r\n     * @dev Returns true if the key is in the map. O(1).\r\n     */\r\n    function contains(UintToAddressMap storage map, uint256 key) internal view returns (bool) {\r\n        return _contains(map._inner, bytes32(key));\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the number of elements in the map. O(1).\r\n     */\r\n    function length(UintToAddressMap storage map) internal view returns (uint256) {\r\n        return _length(map._inner);\r\n    }\r\n\r\n   /**\r\n    * @dev Returns the element stored at position `index` in the set. O(1).\r\n    * Note that there are no guarantees on the ordering of values inside the\r\n    * array, and it may change when more values are added or removed.\r\n    *\r\n    * Requirements:\r\n    *\r\n    * - `index` must be strictly less than {length}.\r\n    */\r\n    function at(UintToAddressMap storage map, uint256 index) internal view returns (uint256, address) {\r\n        (bytes32 key, bytes32 value) = _at(map._inner, index);\r\n        return (uint256(key), address(uint160(uint256(value))));\r\n    }\r\n\r\n    /**\r\n     * @dev Tries to returns the value associated with `key`.  O(1).\r\n     * Does not revert if `key` is not in the map.\r\n     *\r\n     * _Available since v3.4._\r\n     */\r\n    function tryGet(UintToAddressMap storage map, uint256 key) internal view returns (bool, address) {\r\n        (bool success, bytes32 value) = _tryGet(map._inner, bytes32(key));\r\n        return (success, address(uint160(uint256(value))));\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the value associated with `key`.  O(1).\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - `key` must be in the map.\r\n     */\r\n    function get(UintToAddressMap storage map, uint256 key) internal view returns (address) {\r\n        return address(uint160(uint256(_get(map._inner, bytes32(key)))));\r\n    }\r\n\r\n    /**\r\n     * @dev Same as {get}, with a custom error message when `key` is not in the map.\r\n     *\r\n     * CAUTION: This function is deprecated because it requires allocating memory for the error\r\n     * message unnecessarily. For custom revert reasons use {tryGet}.\r\n     */\r\n    function get(UintToAddressMap storage map, uint256 key, string memory errorMessage) internal view returns (address) {\r\n        return address(uint160(uint256(_get(map._inner, bytes32(key), errorMessage))));\r\n    }\r\n}\r\n\r\n\r\npragma solidity ^0.7.0;\r\n\r\n/**\r\n * @dev String operations.\r\n */\r\nlibrary Strings {\r\n    /**\r\n     * @dev Converts a `uint256` to its ASCII `string` representation.\r\n     */\r\n    function toString(uint256 value) internal pure returns (string memory) {\r\n        // Inspired by OraclizeAPI's implementation - MIT licence\r\n        // https://github.com/oraclize/ethereum-api/blob/b42146b063c7d6ee1358846c198246239e9360e8/oraclizeAPI_0.4.25.sol\r\n\r\n        if (value == 0) {\r\n            return \"0\";\r\n        }\r\n        uint256 temp = value;\r\n        uint256 digits;\r\n        while (temp != 0) {\r\n            digits++;\r\n            temp /= 10;\r\n        }\r\n        bytes memory buffer = new bytes(digits);\r\n        uint256 index = digits - 1;\r\n        temp = value;\r\n        while (temp != 0) {\r\n            buffer[index--] = bytes1(uint8(48 + temp % 10));\r\n            temp /= 10;\r\n        }\r\n        return string(buffer);\r\n    }\r\n}\r\n\r\n\r\npragma solidity ^0.7.0;\r\n\r\n/**\r\n * @dev Interface of the ERC165 standard, as defined in the\r\n * https://eips.ethereum.org/EIPS/eip-165[EIP].\r\n *\r\n * Implementers can declare support of contract interfaces, which can then be\r\n * queried by others ({ERC165Checker}).\r\n *\r\n * For an implementation, see {ERC165}.\r\n */\r\ninterface IERC165 {\r\n    /**\r\n     * @dev Returns true if this contract implements the interface defined by\r\n     * `interfaceId`. See the corresponding\r\n     * https://eips.ethereum.org/EIPS/eip-165#how-interfaces-are-identified[EIP section]\r\n     * to learn more about how these ids are created.\r\n     *\r\n     * This function call must use less than 30 000 gas.\r\n     */\r\n    function supportsInterface(bytes4 interfaceId) external view returns (bool);\r\n}\r\n\r\n\r\npragma solidity >=0.6.0 <0.8.0;\r\n\r\n/**\r\n * @dev https://eips.ethereum.org/EIPS/eip-1167[EIP 1167] is a standard for\r\n * deploying minimal proxy contracts, also known as \"clones\".\r\n *\r\n * > To simply and cheaply clone contract functionality in an immutable way, this standard specifies\r\n * > a minimal bytecode implementation that delegates all calls to a known, fixed address.\r\n *\r\n * The library includes functions to deploy a proxy using either `create` (traditional deployment) or `create2`\r\n * (salted deterministic deployment). It also includes functions to predict the addresses of clones deployed using the\r\n * deterministic method.\r\n *\r\n * _Available since v3.4._\r\n */\r\nlibrary Clones {\r\n    /**\r\n     * @dev Deploys and returns the address of a clone that mimics the behaviour of `master`.\r\n     *\r\n     * This function uses the create opcode, which should never revert.\r\n     */\r\n    function clone(address master) internal returns (address instance) {\r\n        // solhint-disable-next-line no-inline-assembly\r\n        assembly {\r\n            let ptr := mload(0x40)\r\n            mstore(ptr, 0x3d602d80600a3d3981f3363d3d373d3d3d363d73000000000000000000000000)\r\n            mstore(add(ptr, 0x14), shl(0x60, master))\r\n            mstore(add(ptr, 0x28), 0x5af43d82803e903d91602b57fd5bf30000000000000000000000000000000000)\r\n            instance := create(0, ptr, 0x37)\r\n        }\r\n        require(instance != address(0), \"ERC1167: create failed\");\r\n    }\r\n\r\n    /**\r\n     * @dev Deploys and returns the address of a clone that mimics the behaviour of `master`.\r\n     *\r\n     * This function uses the create2 opcode and a `salt` to deterministically deploy\r\n     * the clone. Using the same `master` and `salt` multiple time will revert, since\r\n     * the clones cannot be deployed twice at the same address.\r\n     */\r\n    function cloneDeterministic(address master, bytes32 salt) internal returns (address instance) {\r\n        // solhint-disable-next-line no-inline-assembly\r\n        assembly {\r\n            let ptr := mload(0x40)\r\n            mstore(ptr, 0x3d602d80600a3d3981f3363d3d373d3d3d363d73000000000000000000000000)\r\n            mstore(add(ptr, 0x14), shl(0x60, master))\r\n            mstore(add(ptr, 0x28), 0x5af43d82803e903d91602b57fd5bf30000000000000000000000000000000000)\r\n            instance := create2(0, ptr, 0x37, salt)\r\n        }\r\n        require(instance != address(0), \"ERC1167: create2 failed\");\r\n    }\r\n\r\n    /**\r\n     * @dev Computes the address of a clone deployed using {Clones-cloneDeterministic}.\r\n     */\r\n    function predictDeterministicAddress(address master, bytes32 salt, address deployer) internal pure returns (address predicted) {\r\n        // solhint-disable-next-line no-inline-assembly\r\n        assembly {\r\n            let ptr := mload(0x40)\r\n            mstore(ptr, 0x3d602d80600a3d3981f3363d3d373d3d3d363d73000000000000000000000000)\r\n            mstore(add(ptr, 0x14), shl(0x60, master))\r\n            mstore(add(ptr, 0x28), 0x5af43d82803e903d91602b57fd5bf3ff00000000000000000000000000000000)\r\n            mstore(add(ptr, 0x38), shl(0x60, deployer))\r\n            mstore(add(ptr, 0x4c), salt)\r\n            mstore(add(ptr, 0x6c), keccak256(ptr, 0x37))\r\n            predicted := keccak256(add(ptr, 0x37), 0x55)\r\n        }\r\n    }\r\n\r\n    /**\r\n     * @dev Computes the address of a clone deployed using {Clones-cloneDeterministic}.\r\n     */\r\n    function predictDeterministicAddress(address master, bytes32 salt) internal view returns (address predicted) {\r\n        return predictDeterministicAddress(master, salt, address(this));\r\n    }\r\n}\r\n\r\n\r\npragma solidity ^0.7.0;\r\n\r\n/**\r\n * @dev Interface of the ERC20 standard as defined in the EIP.\r\n */\r\ninterface IERC20 {\r\n    /**\r\n     * @dev Returns the amount of tokens in existence.\r\n     */\r\n    function totalSupply() external view returns (uint256);\r\n\r\n    /**\r\n     * @dev Returns the amount of tokens owned by `account`.\r\n     */\r\n    function balanceOf(address account) external view returns (uint256);\r\n\r\n    /**\r\n     * @dev Moves `amount` tokens from the caller's account to `recipient`.\r\n     *\r\n     * Returns a boolean value indicating whether the operation succeeded.\r\n     *\r\n     * Emits a {Transfer} event.\r\n     */\r\n    function transfer(address recipient, uint256 amount) external returns (bool);\r\n\r\n    /**\r\n     * @dev Returns the remaining number of tokens that `spender` will be\r\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\r\n     * zero by default.\r\n     *\r\n     * This value changes when {approve} or {transferFrom} are called.\r\n     */\r\n    function allowance(address owner, address spender) external view returns (uint256);\r\n\r\n    /**\r\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\r\n     *\r\n     * Returns a boolean value indicating whether the operation succeeded.\r\n     *\r\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\r\n     * that someone may use both the old and the new allowance by unfortunate\r\n     * transaction ordering. One possible solution to mitigate this race\r\n     * condition is to first reduce the spender's allowance to 0 and set the\r\n     * desired value afterwards:\r\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\r\n     *\r\n     * Emits an {Approval} event.\r\n     */\r\n    function approve(address spender, uint256 amount) external returns (bool);\r\n\r\n    /**\r\n     * @dev Moves `amount` tokens from `sender` to `recipient` using the\r\n     * allowance mechanism. `amount` is then deducted from the caller's\r\n     * allowance.\r\n     *\r\n     * Returns a boolean value indicating whether the operation succeeded.\r\n     *\r\n     * Emits a {Transfer} event.\r\n     */\r\n    function transferFrom(address sender, address recipient, uint256 amount) external returns (bool);\r\n\r\n    /**\r\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\r\n     * another (`to`).\r\n     *\r\n     * Note that `value` may be zero.\r\n     */\r\n    event Transfer(address indexed from, address indexed to, uint256 value);\r\n\r\n    /**\r\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\r\n     * a call to {approve}. `value` is the new allowance.\r\n     */\r\n    event Approval(address indexed owner, address indexed spender, uint256 value);\r\n}\r\n\r\n\r\npragma solidity >=0.6.0;\r\n\r\n// helper methods for interacting with ERC20 tokens and sending ETH that do not consistently return true/false\r\nlibrary TransferHelper {\r\n    function safeApprove(\r\n        address token,\r\n        address to,\r\n        uint256 value\r\n    ) internal {\r\n        // bytes4(keccak256(bytes('approve(address,uint256)')));\r\n        (bool success, bytes memory data) = token.call(abi.encodeWithSelector(0x095ea7b3, to, value));\r\n        require(\r\n            success && (data.length == 0 || abi.decode(data, (bool))),\r\n            'TransferHelper::safeApprove: approve failed'\r\n        );\r\n    }\r\n\r\n    function safeTransfer(\r\n        address token,\r\n        address to,\r\n        uint256 value\r\n    ) internal {\r\n        // bytes4(keccak256(bytes('transfer(address,uint256)')));\r\n        (bool success, bytes memory data) = token.call(abi.encodeWithSelector(0xa9059cbb, to, value));\r\n        require(\r\n            success && (data.length == 0 || abi.decode(data, (bool))),\r\n            'TransferHelper::safeTransfer: transfer failed'\r\n        );\r\n    }\r\n\r\n    function safeTransferFrom(\r\n        address token,\r\n        address from,\r\n        address to,\r\n        uint256 value\r\n    ) internal {\r\n        // bytes4(keccak256(bytes('transferFrom(address,address,uint256)')));\r\n        (bool success, bytes memory data) = token.call(abi.encodeWithSelector(0x23b872dd, from, to, value));\r\n        require(\r\n            success && (data.length == 0 || abi.decode(data, (bool))),\r\n            'TransferHelper::transferFrom: transferFrom failed'\r\n        );\r\n    }\r\n\r\n    function safeTransferETH(address to, uint256 value) internal {\r\n        (bool success, ) = to.call{value: value}(new bytes(0));\r\n        require(success, 'TransferHelper::safeTransferETH: ETH transfer failed');\r\n    }\r\n}\r\n\r\n\r\npragma solidity >=0.6.0 <0.8.0;\r\n\r\n/* solhint-disable max-line-length */\r\n\r\n/**\r\n * @dev https://eips.ethereum.org/EIPS/eip-712[EIP 712] is a standard for hashing and signing of typed structured data.\r\n *\r\n * The encoding specified in the EIP is very generic, and such a generic implementation in Solidity is not feasible,\r\n * thus this contract does not implement the encoding itself. Protocols need to implement the type-specific encoding\r\n * they need in their contracts using a combination of `abi.encode` and `keccak256`.\r\n *\r\n * This contract implements the EIP 712 domain separator ({_domainSeparatorV4}) that is used as part of the encoding\r\n * scheme, and the final step of the encoding to obtain the message digest that is then signed via ECDSA\r\n * ({_hashTypedDataV4}).\r\n *\r\n * The implementation of the domain separator was designed to be as efficient as possible while still properly updating\r\n * the chain id to protect against replay attacks on an eventual fork of the chain.\r\n *\r\n * NOTE: This contract implements the version of the encoding known as \"v4\", as implemented by the JSON RPC method\r\n * https://docs.metamask.io/guide/signing-data.html[`eth_signTypedDataV4` in MetaMask].\r\n *\r\n * _Available since v3.4._\r\n */\r\nabstract contract EIP712 {\r\n    /* solhint-disable var-name-mixedcase */\r\n    bytes32 private immutable _HASHED_NAME;\r\n    bytes32 private immutable _HASHED_VERSION;\r\n    bytes32 private constant _TYPE_HASH =\r\n        keccak256(\r\n            \"EIP712Domain(string name,string version,uint256 chainId,address verifyingContract)\"\r\n        );\r\n\r\n    /* solhint-enable var-name-mixedcase */\r\n\r\n    /**\r\n     * @dev Initializes the domain separator and parameter caches.\r\n     *\r\n     * The meaning of `name` and `version` is specified in\r\n     * https://eips.ethereum.org/EIPS/eip-712#definition-of-domainseparator[EIP 712]:\r\n     *\r\n     * - `name`: the user readable name of the signing domain, i.e. the name of the DApp or the protocol.\r\n     * - `version`: the current major version of the signing domain.\r\n     *\r\n     * NOTE: These parameters cannot be changed except through a xref:learn::upgrading-smart-contracts.adoc[smart\r\n     * contract upgrade].\r\n     */\r\n\r\n    constructor(string memory name, string memory version) {\r\n        _HASHED_NAME = keccak256(bytes(name));\r\n        _HASHED_VERSION = keccak256(bytes(version));\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the domain separator for the current chain.\r\n     */\r\n    function _domainSeparatorV4() internal view returns (bytes32) {\r\n        return _buildDomainSeparator(_TYPE_HASH, _EIP712NameHash(), _EIP712VersionHash());\r\n    }\r\n\r\n    function _buildDomainSeparator(\r\n        bytes32 typeHash,\r\n        bytes32 name,\r\n        bytes32 version\r\n    ) private view returns (bytes32) {\r\n        return keccak256(abi.encode(typeHash, name, version, _getChainId(), address(this)));\r\n    }\r\n\r\n    /**\r\n     * @dev Given an already https://eips.ethereum.org/EIPS/eip-712#definition-of-hashstruct[hashed struct], this\r\n     * function returns the hash of the fully encoded EIP712 message for this domain.\r\n     *\r\n     * This hash can be used together with {ECDSA-recover} to obtain the signer of a message. For example:\r\n     *\r\n     * ```solidity\r\n     * bytes32 digest = _hashTypedDataV4(keccak256(abi.encode(\r\n     *     keccak256(\"Mail(address to,string contents)\"),\r\n     *     mailTo,\r\n     *     keccak256(bytes(mailContents))\r\n     * )));\r\n     * address signer = ECDSA.recover(digest, signature);\r\n     * ```\r\n     */\r\n    function _hashTypedDataV4(bytes32 structHash) internal view virtual returns (bytes32) {\r\n        return keccak256(abi.encodePacked(\"\\x19\\x01\", _domainSeparatorV4(), structHash));\r\n    }\r\n\r\n    function _getChainId() private view returns (uint256 chainId) {\r\n        this; // silence state mutability warning without generating bytecode - see https://github.com/ethereum/solidity/issues/2691\r\n        // solhint-disable-next-line no-inline-assembly\r\n        assembly {\r\n            chainId := chainid()\r\n        }\r\n    }\r\n\r\n    /**\r\n     * @dev The hash of the name parameter for the EIP712 domain.\r\n     *\r\n     * NOTE: This function reads from storage by default, but can be redefined to return a constant value if gas costs\r\n     * are a concern.\r\n     */\r\n    function _EIP712NameHash() internal view virtual returns (bytes32) {\r\n        return _HASHED_NAME;\r\n    }\r\n\r\n    /**\r\n     * @dev The hash of the version parameter for the EIP712 domain.\r\n     *\r\n     * NOTE: This function reads from storage by default, but can be redefined to return a constant value if gas costs\r\n     * are a concern.\r\n     */\r\n    function _EIP712VersionHash() internal view virtual returns (bytes32) {\r\n        return _HASHED_VERSION;\r\n    }\r\n}\r\n\r\n\r\npragma solidity ^0.7.0;\r\n\r\n/**\r\n * @dev Elliptic Curve Digital Signature Algorithm (ECDSA) operations.\r\n *\r\n * These functions can be used to verify that a message was signed by the holder\r\n * of the private keys of a given address.\r\n */\r\nlibrary ECDSA {\r\n    /**\r\n     * @dev Returns the address that signed a hashed message (`hash`) with\r\n     * `signature`. This address can then be used for verification purposes.\r\n     *\r\n     * The `ecrecover` EVM opcode allows for malleable (non-unique) signatures:\r\n     * this function rejects them by requiring the `s` value to be in the lower\r\n     * half order, and the `v` value to be either 27 or 28.\r\n     *\r\n     * IMPORTANT: `hash` _must_ be the result of a hash operation for the\r\n     * verification to be secure: it is possible to craft signatures that\r\n     * recover to arbitrary addresses for non-hashed data. A safe way to ensure\r\n     * this is by receiving a hash of the original message (which may otherwise\r\n     * be too long), and then calling {toEthSignedMessageHash} on it.\r\n     */\r\n    function recover(bytes32 hash, bytes memory signature) internal pure returns (address) {\r\n        // Check the signature length\r\n        if (signature.length != 65) {\r\n            revert(\"ECDSA: invalid signature length\");\r\n        }\r\n\r\n        // Divide the signature in r, s and v variables\r\n        bytes32 r;\r\n        bytes32 s;\r\n        uint8 v;\r\n\r\n        // ecrecover takes the signature parameters, and the only way to get them\r\n        // currently is to use assembly.\r\n        // solhint-disable-next-line no-inline-assembly\r\n        assembly {\r\n            r := mload(add(signature, 0x20))\r\n            s := mload(add(signature, 0x40))\r\n            v := byte(0, mload(add(signature, 0x60)))\r\n        }\r\n\r\n        return recover(hash, v, r, s);\r\n    }\r\n\r\n    /**\r\n     * @dev Overload of {ECDSA-recover-bytes32-bytes-} that receives the `v`,\r\n     * `r` and `s` signature fields separately.\r\n     */\r\n    function recover(bytes32 hash, uint8 v, bytes32 r, bytes32 s) internal pure returns (address) {\r\n        // EIP-2 still allows signature malleability for ecrecover(). Remove this possibility and make the signature\r\n        // unique. Appendix F in the Ethereum Yellow paper (https://ethereum.github.io/yellowpaper/paper.pdf), defines\r\n        // the valid range for s in (281): 0 < s < secp256k1n ÷ 2 + 1, and for v in (282): v ∈ {27, 28}. Most\r\n        // signatures from current libraries generate a unique signature with an s-value in the lower half order.\r\n        //\r\n        // If your library generates malleable signatures, such as s-values in the upper range, calculate a new s-value\r\n        // with 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFEBAAEDCE6AF48A03BBFD25E8CD0364141 - s1 and flip v from 27 to 28 or\r\n        // vice versa. If your library also generates signatures with 0/1 for v instead 27/28, add 27 to v to accept\r\n        // these malleable signatures as well.\r\n        require(uint256(s) <= 0x7FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF5D576E7357A4501DDFE92F46681B20A0, \"ECDSA: invalid signature 's' value\");\r\n        require(v == 27 || v == 28, \"ECDSA: invalid signature 'v' value\");\r\n\r\n        // If the signature is valid (and not malleable), return the signer address\r\n        address signer = ecrecover(hash, v, r, s);\r\n        require(signer != address(0), \"ECDSA: invalid signature\");\r\n\r\n        return signer;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns an Ethereum Signed Message, created from a `hash`. This\r\n     * replicates the behavior of the\r\n     * https://github.com/ethereum/wiki/wiki/JSON-RPC#eth_sign[`eth_sign`]\r\n     * JSON-RPC method.\r\n     *\r\n     * See {recover}.\r\n     */\r\n    function toEthSignedMessageHash(bytes32 hash) internal pure returns (bytes32) {\r\n        // 32 is the length in bytes of hash,\r\n        // enforced by the type signature above\r\n        return keccak256(abi.encodePacked(\"\\x19Ethereum Signed Message:\\n32\", hash));\r\n    }\r\n}\r\n\r\n\r\npragma solidity ^0.7.0;\r\n\r\n/**\r\n * @dev Contract module which provides a basic access control mechanism, where\r\n * there is an account (an owner) that can be granted exclusive access to\r\n * specific functions.\r\n *\r\n * By default, the owner account will be the one that deploys the contract. This\r\n * can later be changed with {transferOwnership}.\r\n *\r\n * This module is used through inheritance. It will make available the modifier\r\n * `onlyOwner`, which can be applied to your functions to restrict their use to\r\n * the owner.\r\n */\r\nabstract contract Ownable is Context {\r\n    address private _owner;\r\n\r\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\r\n\r\n    /**\r\n     * @dev Initializes the contract setting the deployer as the initial owner.\r\n     */\r\n    constructor () {\r\n        address msgSender = _msgSender();\r\n        _owner = msgSender;\r\n        emit OwnershipTransferred(address(0), msgSender);\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the address of the current owner.\r\n     */\r\n    function owner() public view virtual returns (address) {\r\n        return _owner;\r\n    }\r\n\r\n    /**\r\n     * @dev Throws if called by any account other than the owner.\r\n     */\r\n    modifier onlyOwner() {\r\n        require(owner() == _msgSender(), \"Ownable: caller is not the owner\");\r\n        _;\r\n    }\r\n\r\n    /**\r\n     * @dev Leaves the contract without owner. It will not be possible to call\r\n     * `onlyOwner` functions anymore. Can only be called by the current owner.\r\n     *\r\n     * NOTE: Renouncing ownership will leave the contract without an owner,\r\n     * thereby removing any functionality that is only available to the owner.\r\n     */\r\n    function renounceOwnership() public virtual onlyOwner {\r\n        emit OwnershipTransferred(_owner, address(0));\r\n        _owner = address(0);\r\n    }\r\n\r\n    /**\r\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\r\n     * Can only be called by the current owner.\r\n     */\r\n    function transferOwnership(address newOwner) public virtual onlyOwner {\r\n        require(newOwner != address(0), \"Ownable: new owner is the zero address\");\r\n        emit OwnershipTransferred(_owner, newOwner);\r\n        _owner = newOwner;\r\n    }\r\n}\r\n\r\npragma solidity 0.7.6;\r\n\r\n\r\ninterface IPowerSwitch {\r\n    /* admin events */\r\n\r\n    event PowerOn();\r\n    event PowerOff();\r\n    event EmergencyShutdown();\r\n\r\n    /* data types */\r\n\r\n    enum State {Online, Offline, Shutdown}\r\n\r\n    /* admin functions */\r\n\r\n    function powerOn() external;\r\n\r\n    function powerOff() external;\r\n\r\n    function emergencyShutdown() external;\r\n\r\n    /* view functions */\r\n\r\n    function isOnline() external view returns (bool status);\r\n\r\n    function isOffline() external view returns (bool status);\r\n\r\n    function isShutdown() external view returns (bool status);\r\n\r\n    function getStatus() external view returns (State status);\r\n\r\n    function getPowerController() external view returns (address controller);\r\n}\r\n\r\n/// @title PowerSwitch\r\n/// @notice Standalone pausing and emergency stop functionality\r\ncontract PowerSwitch is IPowerSwitch, Ownable {\r\n    /* storage */\r\n\r\n    IPowerSwitch.State private _status;\r\n\r\n    /* initializer */\r\n\r\n    constructor(address owner) {\r\n        // sanity check owner\r\n        require(owner != address(0), \"PowerSwitch: invalid owner\");\r\n        // transfer ownership\r\n        Ownable.transferOwnership(owner);\r\n    }\r\n\r\n    /* admin functions */\r\n\r\n    /// @notice Turn Power On\r\n    /// access control: only admin\r\n    /// state machine: only when offline\r\n    /// state scope: only modify _status\r\n    /// token transfer: none\r\n    function powerOn() external override onlyOwner {\r\n        require(_status == IPowerSwitch.State.Offline, \"PowerSwitch: cannot power on\");\r\n        _status = IPowerSwitch.State.Online;\r\n        emit PowerOn();\r\n    }\r\n\r\n    /// @notice Turn Power Off\r\n    /// access control: only admin\r\n    /// state machine: only when online\r\n    /// state scope: only modify _status\r\n    /// token transfer: none\r\n    function powerOff() external override onlyOwner {\r\n        require(_status == IPowerSwitch.State.Online, \"PowerSwitch: cannot power off\");\r\n        _status = IPowerSwitch.State.Offline;\r\n        emit PowerOff();\r\n    }\r\n\r\n    /// @notice Shutdown Permanently\r\n    /// access control: only admin\r\n    /// state machine:\r\n    /// - when online or offline\r\n    /// - can only be called once\r\n    /// state scope: only modify _status\r\n    /// token transfer: none\r\n    function emergencyShutdown() external override onlyOwner {\r\n        require(_status != IPowerSwitch.State.Shutdown, \"PowerSwitch: cannot shutdown\");\r\n        _status = IPowerSwitch.State.Shutdown;\r\n        emit EmergencyShutdown();\r\n    }\r\n\r\n    /* getter functions */\r\n\r\n    function isOnline() external view override returns (bool status) {\r\n        return _status == State.Online;\r\n    }\r\n\r\n    function isOffline() external view override returns (bool status) {\r\n        return _status == State.Offline;\r\n    }\r\n\r\n    function isShutdown() external view override returns (bool status) {\r\n        return _status == State.Shutdown;\r\n    }\r\n\r\n    function getStatus() external view override returns (IPowerSwitch.State status) {\r\n        return _status;\r\n    }\r\n\r\n    function getPowerController() external view override returns (address controller) {\r\n        return Ownable.owner();\r\n    }\r\n}\r\n\r\n\r\npragma solidity 0.7.6;\r\n\r\n\r\ninterface IPowered {\r\n    function isOnline() external view returns (bool status);\r\n\r\n    function isOffline() external view returns (bool status);\r\n\r\n    function isShutdown() external view returns (bool status);\r\n\r\n    function getPowerSwitch() external view returns (address powerSwitch);\r\n\r\n    function getPowerController() external view returns (address controller);\r\n}\r\n\r\n/// @title Powered\r\n/// @notice Helper for calling external PowerSwitch\r\ncontract Powered is IPowered {\r\n    /* storage */\r\n\r\n    address private _powerSwitch;\r\n\r\n    /* modifiers */\r\n\r\n    modifier onlyOnline() {\r\n        _onlyOnline();\r\n        _;\r\n    }\r\n\r\n    modifier onlyOffline() {\r\n        _onlyOffline();\r\n        _;\r\n    }\r\n\r\n    modifier notShutdown() {\r\n        _notShutdown();\r\n        _;\r\n    }\r\n\r\n    modifier onlyShutdown() {\r\n        _onlyShutdown();\r\n        _;\r\n    }\r\n\r\n    /* initializer */\r\n\r\n    function _setPowerSwitch(address powerSwitch) internal {\r\n        _powerSwitch = powerSwitch;\r\n    }\r\n\r\n    /* getter functions */\r\n\r\n    function isOnline() public view override returns (bool status) {\r\n        return IPowerSwitch(_powerSwitch).isOnline();\r\n    }\r\n\r\n    function isOffline() public view override returns (bool status) {\r\n        return IPowerSwitch(_powerSwitch).isOffline();\r\n    }\r\n\r\n    function isShutdown() public view override returns (bool status) {\r\n        return IPowerSwitch(_powerSwitch).isShutdown();\r\n    }\r\n\r\n    function getPowerSwitch() public view override returns (address powerSwitch) {\r\n        return _powerSwitch;\r\n    }\r\n\r\n    function getPowerController() public view override returns (address controller) {\r\n        return IPowerSwitch(_powerSwitch).getPowerController();\r\n    }\r\n\r\n    /* convenience functions */\r\n\r\n    function _onlyOnline() private view {\r\n        require(isOnline(), \"Powered: is not online\");\r\n    }\r\n\r\n    function _onlyOffline() private view {\r\n        require(isOffline(), \"Powered: is not offline\");\r\n    }\r\n\r\n    function _notShutdown() private view {\r\n        require(!isShutdown(), \"Powered: is shutdown\");\r\n    }\r\n\r\n    function _onlyShutdown() private view {\r\n        require(isShutdown(), \"Powered: is not shutdown\");\r\n    }\r\n}\r\n\r\npragma solidity 0.7.6;\r\n\r\n\r\ninterface IRewardPool {\r\n    function sendERC20(\r\n        address token,\r\n        address to,\r\n        uint256 value\r\n    ) external;\r\n\r\n    function rescueERC20(address[] calldata tokens, address recipient) external;\r\n}\r\n\r\n/// @title Reward Pool\r\n/// @notice Vault for isolated storage of reward tokens\r\ncontract RewardPool is IRewardPool, Powered, Ownable {\r\n    /* initializer */\r\n\r\n    constructor(address powerSwitch) {\r\n        Powered._setPowerSwitch(powerSwitch);\r\n    }\r\n\r\n    /* user functions */\r\n\r\n    /// @notice Send an ERC20 token\r\n    /// access control: only owner\r\n    /// state machine:\r\n    ///   - can be called multiple times\r\n    ///   - only online\r\n    /// state scope: none\r\n    /// token transfer: transfer tokens from self to recipient\r\n    /// @param token address The token to send\r\n    /// @param to address The recipient to send to\r\n    /// @param value uint256 Amount of tokens to send\r\n    function sendERC20(\r\n        address token,\r\n        address to,\r\n        uint256 value\r\n    ) external override onlyOwner onlyOnline {\r\n        TransferHelper.safeTransfer(token, to, value);\r\n    }\r\n\r\n    /* emergency functions */\r\n\r\n    /// @notice Rescue multiple ERC20 tokens\r\n    /// access control: only power controller\r\n    /// state machine:\r\n    ///   - can be called multiple times\r\n    ///   - only shutdown\r\n    /// state scope: none\r\n    /// token transfer: transfer tokens from self to recipient\r\n    /// @param tokens address[] The tokens to rescue\r\n    /// @param recipient address The recipient to rescue to\r\n    function rescueERC20(address[] calldata tokens, address recipient)\r\n        external\r\n        override\r\n        onlyShutdown\r\n    {\r\n        // only callable by controller\r\n        require(\r\n            msg.sender == Powered.getPowerController(),\r\n            \"RewardPool: only controller can withdraw after shutdown\"\r\n        );\r\n\r\n        // assert recipient is defined\r\n        require(recipient != address(0), \"RewardPool: recipient not defined\");\r\n\r\n        // transfer tokens\r\n        for (uint256 index = 0; index < tokens.length; index++) {\r\n            // get token\r\n            address token = tokens[index];\r\n            // get balance\r\n            uint256 balance = IERC20(token).balanceOf(address(this));\r\n            // transfer token\r\n            TransferHelper.safeTransfer(token, recipient, balance);\r\n        }\r\n    }\r\n}\r\n\r\npragma solidity 0.7.6;\r\n\r\ninterface IERC1271 {\r\n    function isValidSignature(bytes32 _messageHash, bytes memory _signature)\r\n        external\r\n        view\r\n        returns (bytes4 magicValue);\r\n}\r\n\r\nlibrary SignatureChecker {\r\n    function isValidSignature(\r\n        address signer,\r\n        bytes32 hash,\r\n        bytes memory signature\r\n    ) internal view returns (bool) {\r\n        if (Address.isContract(signer)) {\r\n            bytes4 selector = IERC1271.isValidSignature.selector;\r\n            (bool success, bytes memory returndata) =\r\n                signer.staticcall(abi.encodeWithSelector(selector, hash, signature));\r\n            return success && abi.decode(returndata, (bytes4)) == selector;\r\n        } else {\r\n            return ECDSA.recover(hash, signature) == signer;\r\n        }\r\n    }\r\n}\r\n\r\n/// @title ERC1271\r\n/// @notice Module for ERC1271 compatibility\r\nabstract contract ERC1271 is IERC1271 {\r\n    // Valid magic value bytes4(keccak256(\"isValidSignature(bytes32,bytes)\")\r\n    bytes4 internal constant VALID_SIG = IERC1271.isValidSignature.selector;\r\n    // Invalid magic value\r\n    bytes4 internal constant INVALID_SIG = bytes4(0);\r\n\r\n    modifier onlyValidSignature(bytes32 permissionHash, bytes memory signature) {\r\n        require(\r\n            isValidSignature(permissionHash, signature) == VALID_SIG,\r\n            \"ERC1271: Invalid signature\"\r\n        );\r\n        _;\r\n    }\r\n\r\n    function _getOwner() internal view virtual returns (address owner);\r\n\r\n    function isValidSignature(bytes32 permissionHash, bytes memory signature)\r\n        public\r\n        view\r\n        override\r\n        returns (bytes4)\r\n    {\r\n        return\r\n            SignatureChecker.isValidSignature(_getOwner(), permissionHash, signature)\r\n                ? VALID_SIG\r\n                : INVALID_SIG;\r\n    }\r\n}\r\n\r\npragma solidity 0.7.6;\r\n\r\n\r\n/// @title OwnableERC721\r\n/// @notice Use ERC721 ownership for access control\r\ncontract OwnableERC721 {\r\n    address private _nftAddress;\r\n\r\n    modifier onlyOwner() {\r\n        require(owner() == msg.sender, \"OwnableERC721: caller is not the owner\");\r\n        _;\r\n    }\r\n\r\n    function _setNFT(address nftAddress) internal {\r\n        _nftAddress = nftAddress;\r\n    }\r\n\r\n    function nft() public view virtual returns (address nftAddress) {\r\n        return _nftAddress;\r\n    }\r\n\r\n    function owner() public view virtual returns (address ownerAddress) {\r\n        return IERC721(_nftAddress).ownerOf(uint256(address(this)));\r\n    }\r\n}\r\n\r\n\r\n// solhint-disable-next-line compiler-version\r\npragma solidity >=0.4.24 <0.8.0;\r\n\r\n\r\n/**\r\n * @dev This is a base contract to aid in writing upgradeable contracts, or any kind of contract that will be deployed\r\n * behind a proxy. Since a proxied contract can't have a constructor, it's common to move constructor logic to an\r\n * external initializer function, usually called `initialize`. It then becomes necessary to protect this initializer\r\n * function so it can only be called once. The {initializer} modifier provided by this contract will have this effect.\r\n *\r\n * TIP: To avoid leaving the proxy in an uninitialized state, the initializer function should be called as early as\r\n * possible by providing the encoded function call as the `_data` argument to {UpgradeableProxy-constructor}.\r\n *\r\n * CAUTION: When used with inheritance, manual care must be taken to not invoke a parent initializer twice, or to ensure\r\n * that all initializers are idempotent. This is not verified automatically as constructors are by Solidity.\r\n */\r\nabstract contract Initializable {\r\n\r\n    /**\r\n     * @dev Indicates that the contract has been initialized.\r\n     */\r\n    bool private _initialized;\r\n\r\n    /**\r\n     * @dev Indicates that the contract is in the process of being initialized.\r\n     */\r\n    bool private _initializing;\r\n\r\n    /**\r\n     * @dev Modifier to protect an initializer function from being invoked twice.\r\n     */\r\n    modifier initializer() {\r\n        require(_initializing || _isConstructor() || !_initialized, \"Initializable: contract is already initialized\");\r\n\r\n        bool isTopLevelCall = !_initializing;\r\n        if (isTopLevelCall) {\r\n            _initializing = true;\r\n            _initialized = true;\r\n        }\r\n\r\n        _;\r\n\r\n        if (isTopLevelCall) {\r\n            _initializing = false;\r\n        }\r\n    }\r\n\r\n    /// @dev Returns true if and only if the function is running in the constructor\r\n    function _isConstructor() private view returns (bool) {\r\n        return !Address.isContract(address(this));\r\n    }\r\n}\r\n\r\n\r\npragma solidity ^0.7.0;\r\n\r\n\r\n/**\r\n * @dev Implementation of the {IERC165} interface.\r\n *\r\n * Contracts may inherit from this and call {_registerInterface} to declare\r\n * their support of an interface.\r\n */\r\nabstract contract ERC165 is IERC165 {\r\n    /*\r\n     * bytes4(keccak256('supportsInterface(bytes4)')) == 0x01ffc9a7\r\n     */\r\n    bytes4 private constant _INTERFACE_ID_ERC165 = 0x01ffc9a7;\r\n\r\n    /**\r\n     * @dev Mapping of interface ids to whether or not it's supported.\r\n     */\r\n    mapping(bytes4 => bool) private _supportedInterfaces;\r\n\r\n    constructor () {\r\n        // Derived contracts need only register support for their own interfaces,\r\n        // we register support for ERC165 itself here\r\n        _registerInterface(_INTERFACE_ID_ERC165);\r\n    }\r\n\r\n    /**\r\n     * @dev See {IERC165-supportsInterface}.\r\n     *\r\n     * Time complexity O(1), guaranteed to always use less than 30 000 gas.\r\n     */\r\n    function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {\r\n        return _supportedInterfaces[interfaceId];\r\n    }\r\n\r\n    /**\r\n     * @dev Registers the contract as an implementer of the interface defined by\r\n     * `interfaceId`. Support of the actual ERC165 interface is automatic and\r\n     * registering its interface id is not required.\r\n     *\r\n     * See {IERC165-supportsInterface}.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - `interfaceId` cannot be the ERC165 invalid interface (`0xffffffff`).\r\n     */\r\n    function _registerInterface(bytes4 interfaceId) internal virtual {\r\n        require(interfaceId != 0xffffffff, \"ERC165: invalid interface id\");\r\n        _supportedInterfaces[interfaceId] = true;\r\n    }\r\n}\r\n\r\n\r\npragma solidity ^0.7.0;\r\n\r\n\r\n/**\r\n * @dev Required interface of an ERC721 compliant contract.\r\n */\r\ninterface IERC721 is IERC165 {\r\n    /**\r\n     * @dev Emitted when `tokenId` token is transferred from `from` to `to`.\r\n     */\r\n    event Transfer(address indexed from, address indexed to, uint256 indexed tokenId);\r\n\r\n    /**\r\n     * @dev Emitted when `owner` enables `approved` to manage the `tokenId` token.\r\n     */\r\n    event Approval(address indexed owner, address indexed approved, uint256 indexed tokenId);\r\n\r\n    /**\r\n     * @dev Emitted when `owner` enables or disables (`approved`) `operator` to manage all of its assets.\r\n     */\r\n    event ApprovalForAll(address indexed owner, address indexed operator, bool approved);\r\n\r\n    /**\r\n     * @dev Returns the number of tokens in ``owner``'s account.\r\n     */\r\n    function balanceOf(address owner) external view returns (uint256 balance);\r\n\r\n    /**\r\n     * @dev Returns the owner of the `tokenId` token.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - `tokenId` must exist.\r\n     */\r\n    function ownerOf(uint256 tokenId) external view returns (address owner);\r\n\r\n    /**\r\n     * @dev Safely transfers `tokenId` token from `from` to `to`, checking first that contract recipients\r\n     * are aware of the ERC721 protocol to prevent tokens from being forever locked.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - `from` cannot be the zero address.\r\n     * - `to` cannot be the zero address.\r\n     * - `tokenId` token must exist and be owned by `from`.\r\n     * - If the caller is not `from`, it must be have been allowed to move this token by either {approve} or {setApprovalForAll}.\r\n     * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer.\r\n     *\r\n     * Emits a {Transfer} event.\r\n     */\r\n    function safeTransferFrom(address from, address to, uint256 tokenId) external;\r\n\r\n    /**\r\n     * @dev Transfers `tokenId` token from `from` to `to`.\r\n     *\r\n     * WARNING: Usage of this method is discouraged, use {safeTransferFrom} whenever possible.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - `from` cannot be the zero address.\r\n     * - `to` cannot be the zero address.\r\n     * - `tokenId` token must be owned by `from`.\r\n     * - If the caller is not `from`, it must be approved to move this token by either {approve} or {setApprovalForAll}.\r\n     *\r\n     * Emits a {Transfer} event.\r\n     */\r\n    function transferFrom(address from, address to, uint256 tokenId) external;\r\n\r\n    /**\r\n     * @dev Gives permission to `to` to transfer `tokenId` token to another account.\r\n     * The approval is cleared when the token is transferred.\r\n     *\r\n     * Only a single account can be approved at a time, so approving the zero address clears previous approvals.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - The caller must own the token or be an approved operator.\r\n     * - `tokenId` must exist.\r\n     *\r\n     * Emits an {Approval} event.\r\n     */\r\n    function approve(address to, uint256 tokenId) external;\r\n\r\n    /**\r\n     * @dev Returns the account approved for `tokenId` token.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - `tokenId` must exist.\r\n     */\r\n    function getApproved(uint256 tokenId) external view returns (address operator);\r\n\r\n    /**\r\n     * @dev Approve or remove `operator` as an operator for the caller.\r\n     * Operators can call {transferFrom} or {safeTransferFrom} for any token owned by the caller.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - The `operator` cannot be the caller.\r\n     *\r\n     * Emits an {ApprovalForAll} event.\r\n     */\r\n    function setApprovalForAll(address operator, bool _approved) external;\r\n\r\n    /**\r\n     * @dev Returns if the `operator` is allowed to manage all of the assets of `owner`.\r\n     *\r\n     * See {setApprovalForAll}\r\n     */\r\n    function isApprovedForAll(address owner, address operator) external view returns (bool);\r\n\r\n    /**\r\n      * @dev Safely transfers `tokenId` token from `from` to `to`.\r\n      *\r\n      * Requirements:\r\n      *\r\n      * - `from` cannot be the zero address.\r\n      * - `to` cannot be the zero address.\r\n      * - `tokenId` token must exist and be owned by `from`.\r\n      * - If the caller is not `from`, it must be approved to move this token by either {approve} or {setApprovalForAll}.\r\n      * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer.\r\n      *\r\n      * Emits a {Transfer} event.\r\n      */\r\n    function safeTransferFrom(address from, address to, uint256 tokenId, bytes calldata data) external;\r\n}\r\n\r\n\r\npragma solidity ^0.7.0;\r\n\r\n\r\n/**\r\n * @title ERC-721 Non-Fungible Token Standard, optional metadata extension\r\n * @dev See https://eips.ethereum.org/EIPS/eip-721\r\n */\r\ninterface IERC721Metadata is IERC721 {\r\n\r\n    /**\r\n     * @dev Returns the token collection name.\r\n     */\r\n    function name() external view returns (string memory);\r\n\r\n    /**\r\n     * @dev Returns the token collection symbol.\r\n     */\r\n    function symbol() external view returns (string memory);\r\n\r\n    /**\r\n     * @dev Returns the Uniform Resource Identifier (URI) for `tokenId` token.\r\n     */\r\n    function tokenURI(uint256 tokenId) external view returns (string memory);\r\n}\r\n\r\n\r\npragma solidity ^0.7.0;\r\n\r\n\r\n/**\r\n * @title ERC-721 Non-Fungible Token Standard, optional enumeration extension\r\n * @dev See https://eips.ethereum.org/EIPS/eip-721\r\n */\r\ninterface IERC721Enumerable is IERC721 {\r\n\r\n    /**\r\n     * @dev Returns the total amount of tokens stored by the contract.\r\n     */\r\n    function totalSupply() external view returns (uint256);\r\n\r\n    /**\r\n     * @dev Returns a token ID owned by `owner` at a given `index` of its token list.\r\n     * Use along with {balanceOf} to enumerate all of ``owner``'s tokens.\r\n     */\r\n    function tokenOfOwnerByIndex(address owner, uint256 index) external view returns (uint256 tokenId);\r\n\r\n    /**\r\n     * @dev Returns a token ID at a given `index` of all the tokens stored by the contract.\r\n     * Use along with {totalSupply} to enumerate all tokens.\r\n     */\r\n    function tokenByIndex(uint256 index) external view returns (uint256);\r\n}\r\n\r\npragma solidity 0.7.6;\r\n\r\n\r\ninterface IInstanceRegistry {\r\n    /* events */\r\n\r\n    event InstanceAdded(address instance);\r\n    event InstanceRemoved(address instance);\r\n\r\n    /* view functions */\r\n\r\n    function isInstance(address instance) external view returns (bool validity);\r\n\r\n    function instanceCount() external view returns (uint256 count);\r\n\r\n    function instanceAt(uint256 index) external view returns (address instance);\r\n}\r\n\r\n/// @title InstanceRegistry\r\ncontract InstanceRegistry is IInstanceRegistry {\r\n    using EnumerableSet for EnumerableSet.AddressSet;\r\n\r\n    /* storage */\r\n\r\n    EnumerableSet.AddressSet private _instanceSet;\r\n\r\n    /* view functions */\r\n\r\n    function isInstance(address instance) external view override returns (bool validity) {\r\n        return _instanceSet.contains(instance);\r\n    }\r\n\r\n    function instanceCount() external view override returns (uint256 count) {\r\n        return _instanceSet.length();\r\n    }\r\n\r\n    function instanceAt(uint256 index) external view override returns (address instance) {\r\n        return _instanceSet.at(index);\r\n    }\r\n\r\n    /* admin functions */\r\n\r\n    function _register(address instance) internal {\r\n        require(_instanceSet.add(instance), \"InstanceRegistry: already registered\");\r\n        emit InstanceAdded(instance);\r\n    }\r\n}\r\n\r\npragma solidity 0.7.6;\r\n\r\n\r\nlibrary ProxyFactory {\r\n    /* functions */\r\n\r\n    function _create(address logic, bytes memory data) internal returns (address proxy) {\r\n        // deploy clone\r\n        proxy = Clones.clone(logic);\r\n\r\n        // attempt initialization\r\n        if (data.length > 0) {\r\n            (bool success, bytes memory err) = proxy.call(data);\r\n            require(success, string(err));\r\n        }\r\n\r\n        // explicit return\r\n        return proxy;\r\n    }\r\n\r\n    function _create2(\r\n        address logic,\r\n        bytes memory data,\r\n        bytes32 salt\r\n    ) internal returns (address proxy) {\r\n        // deploy clone\r\n        proxy = Clones.cloneDeterministic(logic, salt);\r\n\r\n        // attempt initialization\r\n        if (data.length > 0) {\r\n            (bool success, bytes memory err) = proxy.call(data);\r\n            require(success, string(err));\r\n        }\r\n\r\n        // explicit return\r\n        return proxy;\r\n    }\r\n}\r\n\r\n\r\npragma solidity ^0.7.0;\r\n\r\n/**\r\n * @title ERC721 Non-Fungible Token Standard basic implementation\r\n * @dev see https://eips.ethereum.org/EIPS/eip-721\r\n */\r\ncontract ERC721 is Context, ERC165, IERC721, IERC721Metadata, IERC721Enumerable {\r\n    using SafeMath for uint256;\r\n    using Address for address;\r\n    using EnumerableSet for EnumerableSet.UintSet;\r\n    using EnumerableMap for EnumerableMap.UintToAddressMap;\r\n    using Strings for uint256;\r\n\r\n    // Equals to `bytes4(keccak256(\"onERC721Received(address,address,uint256,bytes)\"))`\r\n    // which can be also obtained as `IERC721Receiver(0).onERC721Received.selector`\r\n    bytes4 private constant _ERC721_RECEIVED = 0x150b7a02;\r\n\r\n    // Mapping from holder address to their (enumerable) set of owned tokens\r\n    mapping (address => EnumerableSet.UintSet) private _holderTokens;\r\n\r\n    // Enumerable mapping from token ids to their owners\r\n    EnumerableMap.UintToAddressMap private _tokenOwners;\r\n\r\n    // Mapping from token ID to approved address\r\n    mapping (uint256 => address) private _tokenApprovals;\r\n\r\n    // Mapping from owner to operator approvals\r\n    mapping (address => mapping (address => bool)) private _operatorApprovals;\r\n\r\n    // Token name\r\n    string private _name;\r\n\r\n    // Token symbol\r\n    string private _symbol;\r\n\r\n    // Optional mapping for token URIs\r\n    mapping (uint256 => string) private _tokenURIs;\r\n\r\n    // Base URI\r\n    string private _baseURI;\r\n\r\n    /*\r\n     *     bytes4(keccak256('balanceOf(address)')) == 0x70a08231\r\n     *     bytes4(keccak256('ownerOf(uint256)')) == 0x6352211e\r\n     *     bytes4(keccak256('approve(address,uint256)')) == 0x095ea7b3\r\n     *     bytes4(keccak256('getApproved(uint256)')) == 0x081812fc\r\n     *     bytes4(keccak256('setApprovalForAll(address,bool)')) == 0xa22cb465\r\n     *     bytes4(keccak256('isApprovedForAll(address,address)')) == 0xe985e9c5\r\n     *     bytes4(keccak256('transferFrom(address,address,uint256)')) == 0x23b872dd\r\n     *     bytes4(keccak256('safeTransferFrom(address,address,uint256)')) == 0x42842e0e\r\n     *     bytes4(keccak256('safeTransferFrom(address,address,uint256,bytes)')) == 0xb88d4fde\r\n     *\r\n     *     => 0x70a08231 ^ 0x6352211e ^ 0x095ea7b3 ^ 0x081812fc ^\r\n     *        0xa22cb465 ^ 0xe985e9c5 ^ 0x23b872dd ^ 0x42842e0e ^ 0xb88d4fde == 0x80ac58cd\r\n     */\r\n    bytes4 private constant _INTERFACE_ID_ERC721 = 0x80ac58cd;\r\n\r\n    /*\r\n     *     bytes4(keccak256('name()')) == 0x06fdde03\r\n     *     bytes4(keccak256('symbol()')) == 0x95d89b41\r\n     *     bytes4(keccak256('tokenURI(uint256)')) == 0xc87b56dd\r\n     *\r\n     *     => 0x06fdde03 ^ 0x95d89b41 ^ 0xc87b56dd == 0x5b5e139f\r\n     */\r\n    bytes4 private constant _INTERFACE_ID_ERC721_METADATA = 0x5b5e139f;\r\n\r\n    /*\r\n     *     bytes4(keccak256('totalSupply()')) == 0x18160ddd\r\n     *     bytes4(keccak256('tokenOfOwnerByIndex(address,uint256)')) == 0x2f745c59\r\n     *     bytes4(keccak256('tokenByIndex(uint256)')) == 0x4f6ccce7\r\n     *\r\n     *     => 0x18160ddd ^ 0x2f745c59 ^ 0x4f6ccce7 == 0x780e9d63\r\n     */\r\n    bytes4 private constant _INTERFACE_ID_ERC721_ENUMERABLE = 0x780e9d63;\r\n\r\n    /**\r\n     * @dev Initializes the contract by setting a `name` and a `symbol` to the token collection.\r\n     */\r\n    constructor (string memory name_, string memory symbol_) {\r\n        _name = name_;\r\n        _symbol = symbol_;\r\n\r\n        // register the supported interfaces to conform to ERC721 via ERC165\r\n        _registerInterface(_INTERFACE_ID_ERC721);\r\n        _registerInterface(_INTERFACE_ID_ERC721_METADATA);\r\n        _registerInterface(_INTERFACE_ID_ERC721_ENUMERABLE);\r\n    }\r\n\r\n    /**\r\n     * @dev See {IERC721-balanceOf}.\r\n     */\r\n    function balanceOf(address owner) public view virtual override returns (uint256) {\r\n        require(owner != address(0), \"ERC721: balance query for the zero address\");\r\n        return _holderTokens[owner].length();\r\n    }\r\n\r\n    /**\r\n     * @dev See {IERC721-ownerOf}.\r\n     */\r\n    function ownerOf(uint256 tokenId) public view virtual override returns (address) {\r\n        return _tokenOwners.get(tokenId, \"ERC721: owner query for nonexistent token\");\r\n    }\r\n\r\n    /**\r\n     * @dev See {IERC721Metadata-name}.\r\n     */\r\n    function name() public view virtual override returns (string memory) {\r\n        return _name;\r\n    }\r\n\r\n    /**\r\n     * @dev See {IERC721Metadata-symbol}.\r\n     */\r\n    function symbol() public view virtual override returns (string memory) {\r\n        return _symbol;\r\n    }\r\n\r\n    /**\r\n     * @dev See {IERC721Metadata-tokenURI}.\r\n     */\r\n    function tokenURI(uint256 tokenId) public view virtual override returns (string memory) {\r\n        require(_exists(tokenId), \"ERC721Metadata: URI query for nonexistent token\");\r\n\r\n        string memory _tokenURI = _tokenURIs[tokenId];\r\n        string memory base = baseURI();\r\n\r\n        // If there is no base URI, return the token URI.\r\n        if (bytes(base).length == 0) {\r\n            return _tokenURI;\r\n        }\r\n        // If both are set, concatenate the baseURI and tokenURI (via abi.encodePacked).\r\n        if (bytes(_tokenURI).length > 0) {\r\n            return string(abi.encodePacked(base, _tokenURI));\r\n        }\r\n        // If there is a baseURI but no tokenURI, concatenate the tokenID to the baseURI.\r\n        return string(abi.encodePacked(base, tokenId.toString()));\r\n    }\r\n\r\n    /**\r\n    * @dev Returns the base URI set via {_setBaseURI}. This will be\r\n    * automatically added as a prefix in {tokenURI} to each token's URI, or\r\n    * to the token ID if no specific URI is set for that token ID.\r\n    */\r\n    function baseURI() public view virtual returns (string memory) {\r\n        return _baseURI;\r\n    }\r\n\r\n    /**\r\n     * @dev See {IERC721Enumerable-tokenOfOwnerByIndex}.\r\n     */\r\n    function tokenOfOwnerByIndex(address owner, uint256 index) public view virtual override returns (uint256) {\r\n        return _holderTokens[owner].at(index);\r\n    }\r\n\r\n    /**\r\n     * @dev See {IERC721Enumerable-totalSupply}.\r\n     */\r\n    function totalSupply() public view virtual override returns (uint256) {\r\n        // _tokenOwners are indexed by tokenIds, so .length() returns the number of tokenIds\r\n        return _tokenOwners.length();\r\n    }\r\n\r\n    /**\r\n     * @dev See {IERC721Enumerable-tokenByIndex}.\r\n     */\r\n    function tokenByIndex(uint256 index) public view virtual override returns (uint256) {\r\n        (uint256 tokenId, ) = _tokenOwners.at(index);\r\n        return tokenId;\r\n    }\r\n\r\n    /**\r\n     * @dev See {IERC721-approve}.\r\n     */\r\n    function approve(address to, uint256 tokenId) public virtual override {\r\n        address owner = ERC721.ownerOf(tokenId);\r\n        require(to != owner, \"ERC721: approval to current owner\");\r\n\r\n        require(_msgSender() == owner || ERC721.isApprovedForAll(owner, _msgSender()),\r\n            \"ERC721: approve caller is not owner nor approved for all\"\r\n        );\r\n\r\n        _approve(to, tokenId);\r\n    }\r\n\r\n    /**\r\n     * @dev See {IERC721-getApproved}.\r\n     */\r\n    function getApproved(uint256 tokenId) public view virtual override returns (address) {\r\n        require(_exists(tokenId), \"ERC721: approved query for nonexistent token\");\r\n\r\n        return _tokenApprovals[tokenId];\r\n    }\r\n\r\n    /**\r\n     * @dev See {IERC721-setApprovalForAll}.\r\n     */\r\n    function setApprovalForAll(address operator, bool approved) public virtual override {\r\n        require(operator != _msgSender(), \"ERC721: approve to caller\");\r\n\r\n        _operatorApprovals[_msgSender()][operator] = approved;\r\n        emit ApprovalForAll(_msgSender(), operator, approved);\r\n    }\r\n\r\n    /**\r\n     * @dev See {IERC721-isApprovedForAll}.\r\n     */\r\n    function isApprovedForAll(address owner, address operator) public view virtual override returns (bool) {\r\n        return _operatorApprovals[owner][operator];\r\n    }\r\n\r\n    /**\r\n     * @dev See {IERC721-transferFrom}.\r\n     */\r\n    function transferFrom(address from, address to, uint256 tokenId) public virtual override {\r\n        //solhint-disable-next-line max-line-length\r\n        require(_isApprovedOrOwner(_msgSender(), tokenId), \"ERC721: transfer caller is not owner nor approved\");\r\n\r\n        _transfer(from, to, tokenId);\r\n    }\r\n\r\n    /**\r\n     * @dev See {IERC721-safeTransferFrom}.\r\n     */\r\n    function safeTransferFrom(address from, address to, uint256 tokenId) public virtual override {\r\n        safeTransferFrom(from, to, tokenId, \"\");\r\n    }\r\n\r\n    /**\r\n     * @dev See {IERC721-safeTransferFrom}.\r\n     */\r\n    function safeTransferFrom(address from, address to, uint256 tokenId, bytes memory _data) public virtual override {\r\n        require(_isApprovedOrOwner(_msgSender(), tokenId), \"ERC721: transfer caller is not owner nor approved\");\r\n        _safeTransfer(from, to, tokenId, _data);\r\n    }\r\n\r\n    /**\r\n     * @dev Safely transfers `tokenId` token from `from` to `to`, checking first that contract recipients\r\n     * are aware of the ERC721 protocol to prevent tokens from being forever locked.\r\n     *\r\n     * `_data` is additional data, it has no specified format and it is sent in call to `to`.\r\n     *\r\n     * This internal function is equivalent to {safeTransferFrom}, and can be used to e.g.\r\n     * implement alternative mechanisms to perform token transfer, such as signature-based.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - `from` cannot be the zero address.\r\n     * - `to` cannot be the zero address.\r\n     * - `tokenId` token must exist and be owned by `from`.\r\n     * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer.\r\n     *\r\n     * Emits a {Transfer} event.\r\n     */\r\n    function _safeTransfer(address from, address to, uint256 tokenId, bytes memory _data) internal virtual {\r\n        _transfer(from, to, tokenId);\r\n        require(_checkOnERC721Received(from, to, tokenId, _data), \"ERC721: transfer to non ERC721Receiver implementer\");\r\n    }\r\n\r\n    /**\r\n     * @dev Returns whether `tokenId` exists.\r\n     *\r\n     * Tokens can be managed by their owner or approved accounts via {approve} or {setApprovalForAll}.\r\n     *\r\n     * Tokens start existing when they are minted (`_mint`),\r\n     * and stop existing when they are burned (`_burn`).\r\n     */\r\n    function _exists(uint256 tokenId) internal view virtual returns (bool) {\r\n        return _tokenOwners.contains(tokenId);\r\n    }\r\n\r\n    /**\r\n     * @dev Returns whether `spender` is allowed to manage `tokenId`.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - `tokenId` must exist.\r\n     */\r\n    function _isApprovedOrOwner(address spender, uint256 tokenId) internal view virtual returns (bool) {\r\n        require(_exists(tokenId), \"ERC721: operator query for nonexistent token\");\r\n        address owner = ERC721.ownerOf(tokenId);\r\n        return (spender == owner || getApproved(tokenId) == spender || ERC721.isApprovedForAll(owner, spender));\r\n    }\r\n\r\n    /**\r\n     * @dev Safely mints `tokenId` and transfers it to `to`.\r\n     *\r\n     * Requirements:\r\n     d*\r\n     * - `tokenId` must not exist.\r\n     * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer.\r\n     *\r\n     * Emits a {Transfer} event.\r\n     */\r\n    function _safeMint(address to, uint256 tokenId) internal virtual {\r\n        _safeMint(to, tokenId, \"\");\r\n    }\r\n\r\n    /**\r\n     * @dev Same as {xref-ERC721-_safeMint-address-uint256-}[`_safeMint`], with an additional `data` parameter which is\r\n     * forwarded in {IERC721Receiver-onERC721Received} to contract recipients.\r\n     */\r\n    function _safeMint(address to, uint256 tokenId, bytes memory _data) internal virtual {\r\n        _mint(to, tokenId);\r\n        require(_checkOnERC721Received(address(0), to, tokenId, _data), \"ERC721: transfer to non ERC721Receiver implementer\");\r\n    }\r\n\r\n    /**\r\n     * @dev Mints `tokenId` and transfers it to `to`.\r\n     *\r\n     * WARNING: Usage of this method is discouraged, use {_safeMint} whenever possible\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - `tokenId` must not exist.\r\n     * - `to` cannot be the zero address.\r\n     *\r\n     * Emits a {Transfer} event.\r\n     */\r\n    function _mint(address to, uint256 tokenId) internal virtual {\r\n        require(to != address(0), \"ERC721: mint to the zero address\");\r\n        require(!_exists(tokenId), \"ERC721: token already minted\");\r\n\r\n        _beforeTokenTransfer(address(0), to, tokenId);\r\n\r\n        _holderTokens[to].add(tokenId);\r\n\r\n        _tokenOwners.set(tokenId, to);\r\n\r\n        emit Transfer(address(0), to, tokenId);\r\n    }\r\n\r\n    /**\r\n     * @dev Destroys `tokenId`.\r\n     * The approval is cleared when the token is burned.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - `tokenId` must exist.\r\n     *\r\n     * Emits a {Transfer} event.\r\n     */\r\n    function _burn(uint256 tokenId) internal virtual {\r\n        address owner = ERC721.ownerOf(tokenId); // internal owner\r\n\r\n        _beforeTokenTransfer(owner, address(0), tokenId);\r\n\r\n        // Clear approvals\r\n        _approve(address(0), tokenId);\r\n\r\n        // Clear metadata (if any)\r\n        if (bytes(_tokenURIs[tokenId]).length != 0) {\r\n            delete _tokenURIs[tokenId];\r\n        }\r\n\r\n        _holderTokens[owner].remove(tokenId);\r\n\r\n        _tokenOwners.remove(tokenId);\r\n\r\n        emit Transfer(owner, address(0), tokenId);\r\n    }\r\n\r\n    /**\r\n     * @dev Transfers `tokenId` from `from` to `to`.\r\n     *  As opposed to {transferFrom}, this imposes no restrictions on msg.sender.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - `to` cannot be the zero address.\r\n     * - `tokenId` token must be owned by `from`.\r\n     *\r\n     * Emits a {Transfer} event.\r\n     */\r\n    function _transfer(address from, address to, uint256 tokenId) internal virtual {\r\n        require(ERC721.ownerOf(tokenId) == from, \"ERC721: transfer of token that is not own\"); // internal owner\r\n        require(to != address(0), \"ERC721: transfer to the zero address\");\r\n\r\n        _beforeTokenTransfer(from, to, tokenId);\r\n\r\n        // Clear approvals from the previous owner\r\n        _approve(address(0), tokenId);\r\n\r\n        _holderTokens[from].remove(tokenId);\r\n        _holderTokens[to].add(tokenId);\r\n\r\n        _tokenOwners.set(tokenId, to);\r\n\r\n        emit Transfer(from, to, tokenId);\r\n    }\r\n\r\n    /**\r\n     * @dev Sets `_tokenURI` as the tokenURI of `tokenId`.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - `tokenId` must exist.\r\n     */\r\n    function _setTokenURI(uint256 tokenId, string memory _tokenURI) internal virtual {\r\n        require(_exists(tokenId), \"ERC721Metadata: URI set of nonexistent token\");\r\n        _tokenURIs[tokenId] = _tokenURI;\r\n    }\r\n\r\n    /**\r\n     * @dev Internal function to set the base URI for all token IDs. It is\r\n     * automatically added as a prefix to the value returned in {tokenURI},\r\n     * or to the token ID if {tokenURI} is empty.\r\n     */\r\n    function _setBaseURI(string memory baseURI_) internal virtual {\r\n        _baseURI = baseURI_;\r\n    }\r\n\r\n    /**\r\n     * @dev Internal function to invoke {IERC721Receiver-onERC721Received} on a target address.\r\n     * The call is not executed if the target address is not a contract.\r\n     *\r\n     * @param from address representing the previous owner of the given token ID\r\n     * @param to target address that will receive the tokens\r\n     * @param tokenId uint256 ID of the token to be transferred\r\n     * @param _data bytes optional data to send along with the call\r\n     * @return bool whether the call correctly returned the expected magic value\r\n     */\r\n    function _checkOnERC721Received(address from, address to, uint256 tokenId, bytes memory _data)\r\n        private returns (bool)\r\n    {\r\n        if (!to.isContract()) {\r\n            return true;\r\n        }\r\n        bytes memory returndata = to.functionCall(abi.encodeWithSelector(\r\n            IERC721Receiver(to).onERC721Received.selector,\r\n            _msgSender(),\r\n            from,\r\n            tokenId,\r\n            _data\r\n        ), \"ERC721: transfer to non ERC721Receiver implementer\");\r\n        bytes4 retval = abi.decode(returndata, (bytes4));\r\n        return (retval == _ERC721_RECEIVED);\r\n    }\r\n\r\n    function _approve(address to, uint256 tokenId) private {\r\n        _tokenApprovals[tokenId] = to;\r\n        emit Approval(ERC721.ownerOf(tokenId), to, tokenId); // internal owner\r\n    }\r\n\r\n    /**\r\n     * @dev Hook that is called before any token transfer. This includes minting\r\n     * and burning.\r\n     *\r\n     * Calling conditions:\r\n     *\r\n     * - When `from` and `to` are both non-zero, ``from``'s `tokenId` will be\r\n     * transferred to `to`.\r\n     * - When `from` is zero, `tokenId` will be minted for `to`.\r\n     * - When `to` is zero, ``from``'s `tokenId` will be burned.\r\n     * - `from` cannot be the zero address.\r\n     * - `to` cannot be the zero address.\r\n     *\r\n     * To learn more about hooks, head to xref:ROOT:extending-contracts.adoc#using-hooks[Using Hooks].\r\n     */\r\n    function _beforeTokenTransfer(address from, address to, uint256 tokenId) internal virtual { }\r\n}\r\n\r\npragma solidity 0.7.6;\r\npragma abicoder v2;\r\n\r\ninterface IUniversalVault {\r\n    /* user events */\r\n\r\n    event Locked(address delegate, address token, uint256 amount);\r\n    event Unlocked(address delegate, address token, uint256 amount);\r\n    event RageQuit(address delegate, address token, bool notified, string reason);\r\n\r\n    /* data types */\r\n\r\n    struct LockData {\r\n        address delegate;\r\n        address token;\r\n        uint256 balance;\r\n    }\r\n\r\n    /* initialize function */\r\n\r\n    function initialize() external;\r\n\r\n    /* user functions */\r\n\r\n    function lock(\r\n        address token,\r\n        uint256 amount,\r\n        bytes calldata permission\r\n    ) external;\r\n\r\n    function unlock(\r\n        address token,\r\n        uint256 amount,\r\n        bytes calldata permission\r\n    ) external;\r\n\r\n    function rageQuit(address delegate, address token)\r\n        external\r\n        returns (bool notified, string memory error);\r\n\r\n    function transferERC20(\r\n        address token,\r\n        address to,\r\n        uint256 amount\r\n    ) external;\r\n\r\n    function transferETH(address to, uint256 amount) external payable;\r\n\r\n    /* pure functions */\r\n\r\n    function calculateLockID(address delegate, address token)\r\n        external\r\n        pure\r\n        returns (bytes32 lockID);\r\n\r\n    /* getter functions */\r\n\r\n    function getPermissionHash(\r\n        bytes32 eip712TypeHash,\r\n        address delegate,\r\n        address token,\r\n        uint256 amount,\r\n        uint256 nonce\r\n    ) external view returns (bytes32 permissionHash);\r\n\r\n    function getNonce() external view returns (uint256 nonce);\r\n\r\n    function owner() external view returns (address ownerAddress);\r\n\r\n    function getLockSetCount() external view returns (uint256 count);\r\n\r\n    function getLockAt(uint256 index) external view returns (LockData memory lockData);\r\n\r\n    function getBalanceDelegated(address token, address delegate)\r\n        external\r\n        view\r\n        returns (uint256 balance);\r\n\r\n    function getBalanceLocked(address token) external view returns (uint256 balance);\r\n\r\n    function checkBalances() external view returns (bool validity);\r\n}\r\n\r\n/// @title Visor\r\n/// @notice Vault for isolated storage of staking tokens\r\n/// @dev Warning: not compatible with rebasing tokens\r\ncontract Visor is\r\n    IUniversalVault,\r\n    EIP712(\"UniversalVault\", \"1.0.0\"),\r\n    ERC1271,\r\n    OwnableERC721,\r\n    Initializable\r\n{\r\n    using SafeMath for uint256;\r\n    using Address for address;\r\n    using Address for address payable;\r\n    using EnumerableSet for EnumerableSet.Bytes32Set;\r\n\r\n    /* constant */\r\n\r\n    // Hardcoding a gas limit for rageQuit() is required to prevent gas DOS attacks\r\n    // the gas requirement cannot be determined at runtime by querying the delegate\r\n    // as it could potentially be manipulated by a malicious delegate who could force\r\n    // the calls to revert.\r\n    // The gas limit could alternatively be set upon vault initialization or creation\r\n    // of a lock, but the gas consumption trade-offs are not favorable.\r\n    // Ultimately, to avoid a need for fixed gas limits, the EVM would need to provide\r\n    // an error code that allows for reliably catching out-of-gas errors on remote calls.\r\n    uint256 public constant RAGEQUIT_GAS = 500000;\r\n    bytes32 public constant LOCK_TYPEHASH =\r\n        keccak256(\"Lock(address delegate,address token,uint256 amount,uint256 nonce)\");\r\n    bytes32 public constant UNLOCK_TYPEHASH =\r\n        keccak256(\"Unlock(address delegate,address token,uint256 amount,uint256 nonce)\");\r\n    string public constant VERSION = \"VISOR-1.0.0\";\r\n\r\n    /* storage */\r\n\r\n    uint256 private _nonce;\r\n    mapping(bytes32 => LockData) private _locks;\r\n    EnumerableSet.Bytes32Set private _lockSet;\r\n\r\n    /* initialization function */\r\n\r\n    function initializeLock() external initializer {}\r\n\r\n    function initialize() external override initializer {\r\n        OwnableERC721._setNFT(msg.sender);\r\n    }\r\n\r\n    /* ether receive */\r\n\r\n    receive() external payable {}\r\n\r\n    /* internal overrides */\r\n\r\n    function _getOwner() internal view override(ERC1271) returns (address ownerAddress) {\r\n        return OwnableERC721.owner();\r\n    }\r\n\r\n    /* pure functions */\r\n\r\n    function calculateLockID(address delegate, address token)\r\n        public\r\n        pure\r\n        override\r\n        returns (bytes32 lockID)\r\n    {\r\n        return keccak256(abi.encodePacked(delegate, token));\r\n    }\r\n\r\n    /* getter functions */\r\n\r\n    function getPermissionHash(\r\n        bytes32 eip712TypeHash,\r\n        address delegate,\r\n        address token,\r\n        uint256 amount,\r\n        uint256 nonce\r\n    ) public view override returns (bytes32 permissionHash) {\r\n        return\r\n            EIP712._hashTypedDataV4(\r\n                keccak256(abi.encode(eip712TypeHash, delegate, token, amount, nonce))\r\n            );\r\n    }\r\n\r\n    function getNonce() external view override returns (uint256 nonce) {\r\n        return _nonce;\r\n    }\r\n\r\n    function owner()\r\n        public\r\n        view\r\n        override(IUniversalVault, OwnableERC721)\r\n        returns (address ownerAddress)\r\n    {\r\n        return OwnableERC721.owner();\r\n    }\r\n\r\n    function getLockSetCount() external view override returns (uint256 count) {\r\n        return _lockSet.length();\r\n    }\r\n\r\n    function getLockAt(uint256 index) external view override returns (LockData memory lockData) {\r\n        return _locks[_lockSet.at(index)];\r\n    }\r\n\r\n    function getBalanceDelegated(address token, address delegate)\r\n        external\r\n        view\r\n        override\r\n        returns (uint256 balance)\r\n    {\r\n        return _locks[calculateLockID(delegate, token)].balance;\r\n    }\r\n\r\n    function getBalanceLocked(address token) public view override returns (uint256 balance) {\r\n        uint256 count = _lockSet.length();\r\n        for (uint256 index; index < count; index++) {\r\n            LockData storage _lockData = _locks[_lockSet.at(index)];\r\n            if (_lockData.token == token && _lockData.balance > balance)\r\n                balance = _lockData.balance;\r\n        }\r\n        return balance;\r\n    }\r\n\r\n    function checkBalances() external view override returns (bool validity) {\r\n        // iterate over all token locks and validate sufficient balance\r\n        uint256 count = _lockSet.length();\r\n        for (uint256 index; index < count; index++) {\r\n            // fetch storage lock reference\r\n            LockData storage _lockData = _locks[_lockSet.at(index)];\r\n            // if insufficient balance and no∏t shutdown, return false\r\n            if (IERC20(_lockData.token).balanceOf(address(this)) < _lockData.balance) return false;\r\n        }\r\n        // if sufficient balance or shutdown, return true\r\n        return true;\r\n    }\r\n\r\n    /* user functions */\r\n\r\n    /// @notice Lock ERC20 tokens in the vault\r\n    /// access control: called by delegate with signed permission from owner\r\n    /// state machine: anytime\r\n    /// state scope:\r\n    /// - insert or update _locks\r\n    /// - increase _nonce\r\n    /// token transfer: none\r\n    /// @param token Address of token being locked\r\n    /// @param amount Amount of tokens being locked\r\n    /// @param permission Permission signature payload\r\n    function lock(\r\n        address token,\r\n        uint256 amount,\r\n        bytes calldata permission\r\n    )\r\n        external\r\n        override\r\n        onlyValidSignature(\r\n            getPermissionHash(LOCK_TYPEHASH, msg.sender, token, amount, _nonce),\r\n            permission\r\n        )\r\n    {\r\n        // get lock id\r\n        bytes32 lockID = calculateLockID(msg.sender, token);\r\n\r\n        // add lock to storage\r\n        if (_lockSet.contains(lockID)) {\r\n            // if lock already exists, increase amount\r\n            _locks[lockID].balance = _locks[lockID].balance.add(amount);\r\n        } else {\r\n            // if does not exist, create new lock\r\n            // add lock to set\r\n            assert(_lockSet.add(lockID));\r\n            // add lock data to storage\r\n            _locks[lockID] = LockData(msg.sender, token, amount);\r\n        }\r\n\r\n        // validate sufficient balance\r\n        require(\r\n            IERC20(token).balanceOf(address(this)) >= _locks[lockID].balance,\r\n            \"UniversalVault: insufficient balance\"\r\n        );\r\n\r\n        // increase nonce\r\n        _nonce += 1;\r\n\r\n        // emit event\r\n        emit Locked(msg.sender, token, amount);\r\n    }\r\n\r\n    /// @notice Unlock ERC20 tokens in the vault\r\n    /// access control: called by delegate with signed permission from owner\r\n    /// state machine: after valid lock from delegate\r\n    /// state scope:\r\n    /// - remove or update _locks\r\n    /// - increase _nonce\r\n    /// token transfer: none\r\n    /// @param token Address of token being unlocked\r\n    /// @param amount Amount of tokens being unlocked\r\n    /// @param permission Permission signature payload\r\n    function unlock(\r\n        address token,\r\n        uint256 amount,\r\n        bytes calldata permission\r\n    )\r\n        external\r\n        override\r\n        onlyValidSignature(\r\n            getPermissionHash(UNLOCK_TYPEHASH, msg.sender, token, amount, _nonce),\r\n            permission\r\n        )\r\n    {\r\n        // get lock id\r\n        bytes32 lockID = calculateLockID(msg.sender, token);\r\n\r\n        // validate existing lock\r\n        require(_lockSet.contains(lockID), \"UniversalVault: missing lock\");\r\n\r\n        // update lock data\r\n        if (_locks[lockID].balance > amount) {\r\n            // substract amount from lock balance\r\n            _locks[lockID].balance = _locks[lockID].balance.sub(amount);\r\n        } else {\r\n            // delete lock data\r\n            delete _locks[lockID];\r\n            assert(_lockSet.remove(lockID));\r\n        }\r\n\r\n        // increase nonce\r\n        _nonce += 1;\r\n\r\n        // emit event\r\n        emit Unlocked(msg.sender, token, amount);\r\n    }\r\n\r\n    /// @notice Forcibly cancel delegate lock\r\n    /// @dev This function will attempt to notify the delegate of the rage quit using\r\n    ///      a fixed amount of gas.\r\n    /// access control: only owner\r\n    /// state machine: after valid lock from delegate\r\n    /// state scope:\r\n    /// - remove item from _locks\r\n    /// token transfer: none\r\n    /// @param delegate Address of delegate\r\n    /// @param token Address of token being unlocked\r\n    function rageQuit(address delegate, address token)\r\n        external\r\n        override\r\n        onlyOwner\r\n        returns (bool notified, string memory error)\r\n    {\r\n        // get lock id\r\n        bytes32 lockID = calculateLockID(delegate, token);\r\n\r\n        // validate existing lock\r\n        require(_lockSet.contains(lockID), \"UniversalVault: missing lock\");\r\n\r\n        // attempt to notify delegate\r\n        if (delegate.isContract()) {\r\n            // check for sufficient gas\r\n            require(gasleft() >= RAGEQUIT_GAS, \"UniversalVault: insufficient gas\");\r\n\r\n            // attempt rageQuit notification\r\n            try IRageQuit(delegate).rageQuit{gas: RAGEQUIT_GAS}() {\r\n                notified = true;\r\n            } catch Error(string memory res) {\r\n                notified = false;\r\n                error = res;\r\n            } catch (bytes memory) {\r\n                notified = false;\r\n            }\r\n        }\r\n\r\n        // update lock storage\r\n        assert(_lockSet.remove(lockID));\r\n        delete _locks[lockID];\r\n\r\n        // emit event\r\n        emit RageQuit(delegate, token, notified, error);\r\n    }\r\n\r\n    /// @notice Transfer ERC20 tokens out of vault\r\n    /// access control: only owner\r\n    /// state machine: when balance >= max(lock) + amount\r\n    /// state scope: none\r\n    /// token transfer: transfer any token\r\n    /// @param token Address of token being transferred\r\n    /// @param to Address of the recipient\r\n    /// @param amount Amount of tokens to transfer\r\n    function transferERC20(\r\n        address token,\r\n        address to,\r\n        uint256 amount\r\n    ) external override onlyOwner {\r\n        // check for sufficient balance\r\n        require(\r\n            IERC20(token).balanceOf(address(this)) >= getBalanceLocked(token).add(amount),\r\n            \"UniversalVault: insufficient balance\"\r\n        );\r\n        // perform transfer\r\n        TransferHelper.safeTransfer(token, to, amount);\r\n    }\r\n\r\n    /// @notice Transfer ERC20 tokens out of vault\r\n    /// access control: only owner\r\n    /// state machine: when balance >= amount\r\n    /// state scope: none\r\n    /// token transfer: transfer any token\r\n    /// @param to Address of the recipient\r\n    /// @param amount Amount of ETH to transfer\r\n    function transferETH(address to, uint256 amount) external payable override onlyOwner {\r\n        // perform transfer\r\n        TransferHelper.safeTransferETH(to, amount);\r\n    }\r\n}\r\n\r\npragma solidity 0.7.6;\r\n\r\ninterface IRageQuit {\r\n    function rageQuit() external;\r\n}\r\n\r\ninterface IHypervisor is IRageQuit {\r\n    /* admin events */\r\n\r\n    event HypervisorCreated(address rewardPool, address powerSwitch);\r\n    event HypervisorFunded(uint256 amount, uint256 duration);\r\n    event BonusTokenRegistered(address token);\r\n    event VaultFactoryRegistered(address factory);\r\n    event VaultFactoryRemoved(address factory);\r\n\r\n    /* user events */\r\n\r\n    event Staked(address vault, uint256 amount);\r\n    event Unstaked(address vault, uint256 amount);\r\n    event RewardClaimed(address vault, address recipient, address token, uint256 amount);\r\n\r\n    /* data types */\r\n\r\n    struct HypervisorData {\r\n        address stakingToken;\r\n        address rewardToken;\r\n        address rewardPool;\r\n        RewardScaling rewardScaling;\r\n        uint256 rewardSharesOutstanding;\r\n        uint256 totalStake;\r\n        uint256 totalStakeUnits;\r\n        uint256 lastUpdate;\r\n        RewardSchedule[] rewardSchedules;\r\n    }\r\n\r\n    struct RewardSchedule {\r\n        uint256 duration;\r\n        uint256 start;\r\n        uint256 shares;\r\n    }\r\n\r\n    struct VaultData {\r\n        uint256 totalStake;\r\n        StakeData[] stakes;\r\n    }\r\n\r\n    struct StakeData {\r\n        uint256 amount;\r\n        uint256 timestamp;\r\n    }\r\n\r\n    struct RewardScaling {\r\n        uint256 floor;\r\n        uint256 ceiling;\r\n        uint256 time;\r\n    }\r\n\r\n    struct RewardOutput {\r\n        uint256 lastStakeAmount;\r\n        uint256 newStakesCount;\r\n        uint256 reward;\r\n        uint256 newTotalStakeUnits;\r\n    }\r\n\r\n    /* user functions */\r\n\r\n    function stake(\r\n        address vault,\r\n        uint256 amount,\r\n        bytes calldata permission\r\n    ) external;\r\n\r\n    function unstakeAndClaim(\r\n        address vault,\r\n        address recipient,\r\n        uint256 amount,\r\n        bytes calldata permission\r\n    ) external;\r\n\r\n    /* getter functions */\r\n\r\n    function getHypervisorData() external view returns (HypervisorData memory hypervisor);\r\n\r\n    function getBonusTokenSetLength() external view returns (uint256 length);\r\n\r\n    function getBonusTokenAtIndex(uint256 index) external view returns (address bonusToken);\r\n\r\n    function getVaultFactorySetLength() external view returns (uint256 length);\r\n\r\n    function getVaultFactoryAtIndex(uint256 index) external view returns (address factory);\r\n\r\n    function getVaultData(address vault) external view returns (VaultData memory vaultData);\r\n\r\n    function isValidAddress(address target) external view returns (bool validity);\r\n\r\n    function isValidVault(address target) external view returns (bool validity);\r\n\r\n    function getCurrentUnlockedRewards() external view returns (uint256 unlockedRewards);\r\n\r\n    function getFutureUnlockedRewards(uint256 timestamp)\r\n        external\r\n        view\r\n        returns (uint256 unlockedRewards);\r\n\r\n    function getCurrentVaultReward(address vault) external view returns (uint256 reward);\r\n\r\n    function getCurrentStakeReward(address vault, uint256 stakeAmount)\r\n        external\r\n        view\r\n        returns (uint256 reward);\r\n\r\n    function getFutureVaultReward(address vault, uint256 timestamp)\r\n        external\r\n        view\r\n        returns (uint256 reward);\r\n\r\n    function getFutureStakeReward(\r\n        address vault,\r\n        uint256 stakeAmount,\r\n        uint256 timestamp\r\n    ) external view returns (uint256 reward);\r\n\r\n    function getCurrentVaultStakeUnits(address vault) external view returns (uint256 stakeUnits);\r\n\r\n    function getFutureVaultStakeUnits(address vault, uint256 timestamp)\r\n        external\r\n        view\r\n        returns (uint256 stakeUnits);\r\n\r\n    function getCurrentTotalStakeUnits() external view returns (uint256 totalStakeUnits);\r\n\r\n    function getFutureTotalStakeUnits(uint256 timestamp)\r\n        external\r\n        view\r\n        returns (uint256 totalStakeUnits);\r\n\r\n    /* pure functions */\r\n\r\n    function calculateTotalStakeUnits(StakeData[] memory stakes, uint256 timestamp)\r\n        external\r\n        pure\r\n        returns (uint256 totalStakeUnits);\r\n\r\n    function calculateStakeUnits(\r\n        uint256 amount,\r\n        uint256 start,\r\n        uint256 end\r\n    ) external pure returns (uint256 stakeUnits);\r\n\r\n    function calculateUnlockedRewards(\r\n        RewardSchedule[] memory rewardSchedules,\r\n        uint256 rewardBalance,\r\n        uint256 sharesOutstanding,\r\n        uint256 timestamp\r\n    ) external pure returns (uint256 unlockedRewards);\r\n\r\n    function calculateRewardFromStakes(\r\n        StakeData[] memory stakes,\r\n        uint256 unstakeAmount,\r\n        uint256 unlockedRewards,\r\n        uint256 totalStakeUnits,\r\n        uint256 timestamp,\r\n        RewardScaling memory rewardScaling\r\n    ) external pure returns (RewardOutput memory out);\r\n\r\n    function calculateReward(\r\n        uint256 unlockedRewards,\r\n        uint256 stakeAmount,\r\n        uint256 stakeDuration,\r\n        uint256 totalStakeUnits,\r\n        RewardScaling memory rewardScaling\r\n    ) external pure returns (uint256 reward);\r\n}\r\n\r\n/// @title Hypervisor\r\n/// @notice Reward distribution contract with time multiplier\r\n/// Access Control\r\n/// - Power controller:\r\n///     Can power off / shutdown the Hypervisor\r\n///     Can withdraw rewards from reward pool once shutdown\r\n/// - Proxy owner:\r\n///     Can change arbitrary logic / state by upgrading the Hypervisor\r\n///     Is unable to operate on user funds due to UniversalVault\r\n///     Is unable to operate on reward pool funds when reward pool is offline / shutdown\r\n/// - Hypervisor admin:\r\n///     Can add funds to the Hypervisor, register bonus tokens, and whitelist new vault factories\r\n///     Is a subset of proxy owner permissions\r\n/// - User:\r\n///     Can deposit / withdraw / ragequit\r\n/// Hypervisor State Machine\r\n/// - Online:\r\n///     Hypervisor is operating normally, all functions are enabled\r\n/// - Offline:\r\n///     Hypervisor is temporarely disabled for maintenance\r\n///     User deposits and withdrawls are disabled, ragequit remains enabled\r\n///     Users can withdraw their stake through rageQuit() but forego their pending reward\r\n///     Should only be used when downtime required for an upgrade\r\n/// - Shutdown:\r\n///     Hypervisor is permanently disabled\r\n///     All functions are disabled with the exception of ragequit\r\n///     Users can withdraw their stake through rageQuit()\r\n///     Power controller can withdraw from the reward pool\r\n///     Should only be used if Proxy Owner role is compromized\r\ncontract Hypervisor is IHypervisor, Powered, Ownable {\r\n    using SafeMath for uint256;\r\n    using EnumerableSet for EnumerableSet.AddressSet;\r\n\r\n    /* constants */\r\n\r\n    // An upper bound on the number of active stakes per vault is required to prevent\r\n    // calls to rageQuit() from reverting.\r\n    // With 30 stakes in a vault, ragequit costs 432811 gas which is conservatively lower\r\n    // than the hardcoded limit of 500k gas on the vault.\r\n    // This limit is configurable and could be increased in a future deployment.\r\n    // Ultimately, to avoid a need for fixed upper bounds, the EVM would need to provide\r\n    // an error code that allows for reliably catching out-of-gas errors on remote calls.\r\n    uint256 public constant MAX_STAKES_PER_VAULT = 30;\r\n    uint256 public constant MAX_REWARD_TOKENS = 50;\r\n    uint256 public constant BASE_SHARES_PER_WEI = 1000000;\r\n\r\n    /* storage */\r\n\r\n    HypervisorData private _hypervisor;\r\n    mapping(address => VaultData) private _vaults;\r\n    EnumerableSet.AddressSet private _bonusTokenSet;\r\n    EnumerableSet.AddressSet private _vaultFactorySet;\r\n\r\n    /* initializer */\r\n\r\n    /// @notice Initizalize Hypervisor\r\n    /// access control: only proxy constructor\r\n    /// state machine: can only be called once\r\n    /// state scope: set initialization variables\r\n    /// token transfer: none\r\n    /// @param ownerAddress address The admin address\r\n    /// @param rewardPoolFactory address The factory to use for deploying the RewardPool\r\n    /// @param powerSwitchFactory address The factory to use for deploying the PowerSwitch\r\n    /// @param stakingToken address The address of the staking token for this Hypervisor\r\n    /// @param rewardToken address The address of the reward token for this Hypervisor\r\n    /// @param rewardScaling RewardScaling The config for reward scaling floor, ceiling, and time\r\n    constructor(\r\n        address ownerAddress,\r\n        address rewardPoolFactory,\r\n        address powerSwitchFactory,\r\n        address stakingToken,\r\n        address rewardToken,\r\n        RewardScaling memory rewardScaling\r\n    ) {\r\n        // the scaling floor must be smaller than ceiling\r\n        require(rewardScaling.floor <= rewardScaling.ceiling, \"Hypervisor: floor above ceiling\");\r\n\r\n        // setting rewardScalingTime to 0 would cause divide by zero error\r\n        // to disable reward scaling, use rewardScalingFloor == rewardScalingCeiling\r\n        require(rewardScaling.time != 0, \"Hypervisor: scaling time cannot be zero\");\r\n\r\n        // deploy power switch\r\n        address powerSwitch = IFactory(powerSwitchFactory).create(abi.encode(ownerAddress));\r\n\r\n        // deploy reward pool\r\n        address rewardPool = IFactory(rewardPoolFactory).create(abi.encode(powerSwitch));\r\n\r\n        // set internal configs\r\n        Ownable.transferOwnership(ownerAddress);\r\n        Powered._setPowerSwitch(powerSwitch);\r\n\r\n        // commit to storage\r\n        _hypervisor.stakingToken = stakingToken;\r\n        _hypervisor.rewardToken = rewardToken;\r\n        _hypervisor.rewardPool = rewardPool;\r\n        _hypervisor.rewardScaling = rewardScaling;\r\n\r\n        // emit event\r\n        emit HypervisorCreated(rewardPool, powerSwitch);\r\n    }\r\n\r\n    /* getter functions */\r\n\r\n    function getBonusTokenSetLength() external view override returns (uint256 length) {\r\n        return _bonusTokenSet.length();\r\n    }\r\n\r\n    function getBonusTokenAtIndex(uint256 index)\r\n        external\r\n        view\r\n        override\r\n        returns (address bonusToken)\r\n    {\r\n        return _bonusTokenSet.at(index);\r\n    }\r\n\r\n    function getVaultFactorySetLength() external view override returns (uint256 length) {\r\n        return _vaultFactorySet.length();\r\n    }\r\n\r\n    function getVaultFactoryAtIndex(uint256 index)\r\n        external\r\n        view\r\n        override\r\n        returns (address factory)\r\n    {\r\n        return _vaultFactorySet.at(index);\r\n    }\r\n\r\n    function isValidVault(address target) public view override returns (bool validity) {\r\n        // validate target is created from whitelisted vault factory\r\n        for (uint256 index = 0; index < _vaultFactorySet.length(); index++) {\r\n            if (IInstanceRegistry(_vaultFactorySet.at(index)).isInstance(target)) {\r\n                return true;\r\n            }\r\n        }\r\n        // explicit return\r\n        return false;\r\n    }\r\n\r\n    function isValidAddress(address target) public view override returns (bool validity) {\r\n        // sanity check target for potential input errors\r\n        return\r\n            target != address(this) &&\r\n            target != address(0) &&\r\n            target != _hypervisor.stakingToken &&\r\n            target != _hypervisor.rewardToken &&\r\n            target != _hypervisor.rewardPool &&\r\n            !_bonusTokenSet.contains(target);\r\n    }\r\n\r\n    /* Hypervisor getters */\r\n\r\n    function getHypervisorData() external view override returns (HypervisorData memory hypervisor) {\r\n        return _hypervisor;\r\n    }\r\n\r\n    function getCurrentUnlockedRewards() public view override returns (uint256 unlockedRewards) {\r\n        // calculate reward available based on state\r\n        return getFutureUnlockedRewards(block.timestamp);\r\n    }\r\n\r\n    function getFutureUnlockedRewards(uint256 timestamp)\r\n        public\r\n        view\r\n        override\r\n        returns (uint256 unlockedRewards)\r\n    {\r\n        // get reward amount remaining\r\n        uint256 remainingRewards = IERC20(_hypervisor.rewardToken).balanceOf(_hypervisor.rewardPool);\r\n        // calculate reward available based on state\r\n        unlockedRewards = calculateUnlockedRewards(\r\n            _hypervisor.rewardSchedules,\r\n            remainingRewards,\r\n            _hypervisor.rewardSharesOutstanding,\r\n            timestamp\r\n        );\r\n        // explicit return\r\n        return unlockedRewards;\r\n    }\r\n\r\n    function getCurrentTotalStakeUnits() public view override returns (uint256 totalStakeUnits) {\r\n        // calculate new stake units\r\n        return getFutureTotalStakeUnits(block.timestamp);\r\n    }\r\n\r\n    function getFutureTotalStakeUnits(uint256 timestamp)\r\n        public\r\n        view\r\n        override\r\n        returns (uint256 totalStakeUnits)\r\n    {\r\n        // return early if no change\r\n        if (timestamp == _hypervisor.lastUpdate) return _hypervisor.totalStakeUnits;\r\n        // calculate new stake units\r\n        uint256 newStakeUnits =\r\n            calculateStakeUnits(_hypervisor.totalStake, _hypervisor.lastUpdate, timestamp);\r\n        // add to cached total\r\n        totalStakeUnits = _hypervisor.totalStakeUnits.add(newStakeUnits);\r\n        // explicit return\r\n        return totalStakeUnits;\r\n    }\r\n\r\n    /* vault getters */\r\n\r\n    function getVaultData(address vault)\r\n        external\r\n        view\r\n        override\r\n        returns (VaultData memory vaultData)\r\n    {\r\n        return _vaults[vault];\r\n    }\r\n\r\n    function getCurrentVaultReward(address vault) external view override returns (uint256 reward) {\r\n        // calculate rewards\r\n        return\r\n            calculateRewardFromStakes(\r\n                _vaults[vault]\r\n                    .stakes,\r\n                _vaults[vault]\r\n                    .totalStake,\r\n                getCurrentUnlockedRewards(),\r\n                getCurrentTotalStakeUnits(),\r\n                block\r\n                    .timestamp,\r\n                _hypervisor\r\n                    .rewardScaling\r\n            )\r\n                .reward;\r\n    }\r\n\r\n    function getFutureVaultReward(address vault, uint256 timestamp)\r\n        external\r\n        view\r\n        override\r\n        returns (uint256 reward)\r\n    {\r\n        // calculate rewards\r\n        return\r\n            calculateRewardFromStakes(\r\n                _vaults[vault]\r\n                    .stakes,\r\n                _vaults[vault]\r\n                    .totalStake,\r\n                getFutureUnlockedRewards(timestamp),\r\n                getFutureTotalStakeUnits(timestamp),\r\n                timestamp,\r\n                _hypervisor\r\n                    .rewardScaling\r\n            )\r\n                .reward;\r\n    }\r\n\r\n    function getCurrentStakeReward(address vault, uint256 stakeAmount)\r\n        external\r\n        view\r\n        override\r\n        returns (uint256 reward)\r\n    {\r\n        // calculate rewards\r\n        return\r\n            calculateRewardFromStakes(\r\n                _vaults[vault]\r\n                    .stakes,\r\n                stakeAmount,\r\n                getCurrentUnlockedRewards(),\r\n                getCurrentTotalStakeUnits(),\r\n                block\r\n                    .timestamp,\r\n                _hypervisor\r\n                    .rewardScaling\r\n            )\r\n                .reward;\r\n    }\r\n\r\n    function getFutureStakeReward(\r\n        address vault,\r\n        uint256 stakeAmount,\r\n        uint256 timestamp\r\n    ) external view override returns (uint256 reward) {\r\n        // calculate rewards\r\n        return\r\n            calculateRewardFromStakes(\r\n                _vaults[vault]\r\n                    .stakes,\r\n                stakeAmount,\r\n                getFutureUnlockedRewards(timestamp),\r\n                getFutureTotalStakeUnits(timestamp),\r\n                timestamp,\r\n                _hypervisor\r\n                    .rewardScaling\r\n            )\r\n                .reward;\r\n    }\r\n\r\n    function getCurrentVaultStakeUnits(address vault)\r\n        public\r\n        view\r\n        override\r\n        returns (uint256 stakeUnits)\r\n    {\r\n        // calculate stake units\r\n        return getFutureVaultStakeUnits(vault, block.timestamp);\r\n    }\r\n\r\n    function getFutureVaultStakeUnits(address vault, uint256 timestamp)\r\n        public\r\n        view\r\n        override\r\n        returns (uint256 stakeUnits)\r\n    {\r\n        // calculate stake units\r\n        return calculateTotalStakeUnits(_vaults[vault].stakes, timestamp);\r\n    }\r\n\r\n    /* pure functions */\r\n\r\n    function calculateTotalStakeUnits(StakeData[] memory stakes, uint256 timestamp)\r\n        public\r\n        pure\r\n        override\r\n        returns (uint256 totalStakeUnits)\r\n    {\r\n        for (uint256 index; index < stakes.length; index++) {\r\n            // reference stake\r\n            StakeData memory stakeData = stakes[index];\r\n            // calculate stake units\r\n            uint256 stakeUnits =\r\n                calculateStakeUnits(stakeData.amount, stakeData.timestamp, timestamp);\r\n            // add to running total\r\n            totalStakeUnits = totalStakeUnits.add(stakeUnits);\r\n        }\r\n    }\r\n\r\n    function calculateStakeUnits(\r\n        uint256 amount,\r\n        uint256 start,\r\n        uint256 end\r\n    ) public pure override returns (uint256 stakeUnits) {\r\n        // calculate duration\r\n        uint256 duration = end.sub(start);\r\n        // calculate stake units\r\n        stakeUnits = duration.mul(amount);\r\n        // explicit return\r\n        return stakeUnits;\r\n    }\r\n\r\n    function calculateUnlockedRewards(\r\n        RewardSchedule[] memory rewardSchedules,\r\n        uint256 rewardBalance,\r\n        uint256 sharesOutstanding,\r\n        uint256 timestamp\r\n    ) public pure override returns (uint256 unlockedRewards) {\r\n        // return 0 if no registered schedules\r\n        if (rewardSchedules.length == 0) {\r\n            return 0;\r\n        }\r\n\r\n        // calculate reward shares locked across all reward schedules\r\n        uint256 sharesLocked;\r\n        for (uint256 index = 0; index < rewardSchedules.length; index++) {\r\n            // fetch reward schedule storage reference\r\n            RewardSchedule memory schedule = rewardSchedules[index];\r\n\r\n            // caculate amount of shares available on this schedule\r\n            // if (now - start) < duration\r\n            //   sharesLocked = shares - (shares * (now - start) / duration)\r\n            // else\r\n            //   sharesLocked = 0\r\n            uint256 currentSharesLocked = 0;\r\n            if (timestamp.sub(schedule.start) < schedule.duration) {\r\n                currentSharesLocked = schedule.shares.sub(\r\n                    schedule.shares.mul(timestamp.sub(schedule.start)).div(schedule.duration)\r\n                );\r\n            }\r\n\r\n            // add to running total\r\n            sharesLocked = sharesLocked.add(currentSharesLocked);\r\n        }\r\n\r\n        // convert shares to reward\r\n        // rewardLocked = sharesLocked * rewardBalance / sharesOutstanding\r\n        uint256 rewardLocked = sharesLocked.mul(rewardBalance).div(sharesOutstanding);\r\n\r\n        // calculate amount available\r\n        // unlockedRewards = rewardBalance - rewardLocked\r\n        unlockedRewards = rewardBalance.sub(rewardLocked);\r\n\r\n        // explicit return\r\n        return unlockedRewards;\r\n    }\r\n\r\n    function calculateRewardFromStakes(\r\n        StakeData[] memory stakes,\r\n        uint256 unstakeAmount,\r\n        uint256 unlockedRewards,\r\n        uint256 totalStakeUnits,\r\n        uint256 timestamp,\r\n        RewardScaling memory rewardScaling\r\n    ) public pure override returns (RewardOutput memory out) {\r\n        uint256 stakesToDrop = 0;\r\n        while (unstakeAmount > 0) {\r\n            // fetch vault stake storage reference\r\n            StakeData memory lastStake = stakes[stakes.length.sub(stakesToDrop).sub(1)];\r\n\r\n            // calculate stake duration\r\n            uint256 stakeDuration = timestamp.sub(lastStake.timestamp);\r\n\r\n            uint256 currentAmount;\r\n            if (lastStake.amount > unstakeAmount) {\r\n                // set current amount to remaining unstake amount\r\n                currentAmount = unstakeAmount;\r\n                // amount of last stake is reduced\r\n                out.lastStakeAmount = lastStake.amount.sub(unstakeAmount);\r\n            } else {\r\n                // set current amount to amount of last stake\r\n                currentAmount = lastStake.amount;\r\n                // add to stakes to drop\r\n                stakesToDrop += 1;\r\n            }\r\n\r\n            // update remaining unstakeAmount\r\n            unstakeAmount = unstakeAmount.sub(currentAmount);\r\n\r\n            // calculate reward amount\r\n            uint256 currentReward =\r\n                calculateReward(\r\n                    unlockedRewards,\r\n                    currentAmount,\r\n                    stakeDuration,\r\n                    totalStakeUnits,\r\n                    rewardScaling\r\n                );\r\n\r\n            // update cumulative reward\r\n            out.reward = out.reward.add(currentReward);\r\n\r\n            // update cached unlockedRewards\r\n            unlockedRewards = unlockedRewards.sub(currentReward);\r\n\r\n            // calculate time weighted stake\r\n            uint256 stakeUnits = currentAmount.mul(stakeDuration);\r\n\r\n            // update cached totalStakeUnits\r\n            totalStakeUnits = totalStakeUnits.sub(stakeUnits);\r\n        }\r\n\r\n        // explicit return\r\n        return\r\n            RewardOutput(\r\n                out.lastStakeAmount,\r\n                stakes.length.sub(stakesToDrop),\r\n                out.reward,\r\n                totalStakeUnits\r\n            );\r\n    }\r\n\r\n    function calculateReward(\r\n        uint256 unlockedRewards,\r\n        uint256 stakeAmount,\r\n        uint256 stakeDuration,\r\n        uint256 totalStakeUnits,\r\n        RewardScaling memory rewardScaling\r\n    ) public pure override returns (uint256 reward) {\r\n        // calculate time weighted stake\r\n        uint256 stakeUnits = stakeAmount.mul(stakeDuration);\r\n\r\n        // calculate base reward\r\n        // baseReward = unlockedRewards * stakeUnits / totalStakeUnits\r\n        uint256 baseReward = 0;\r\n        if (totalStakeUnits != 0) {\r\n            // scale reward according to proportional weight\r\n            baseReward = unlockedRewards.mul(stakeUnits).div(totalStakeUnits);\r\n        }\r\n\r\n        // calculate scaled reward\r\n        // if no scaling or scaling period completed\r\n        //   reward = baseReward\r\n        // else\r\n        //   minReward = baseReward * scalingFloor / scalingCeiling\r\n        //   bonusReward = baseReward\r\n        //                 * (scalingCeiling - scalingFloor) / scalingCeiling\r\n        //                 * duration / scalingTime\r\n        //   reward = minReward + bonusReward\r\n        if (stakeDuration >= rewardScaling.time || rewardScaling.floor == rewardScaling.ceiling) {\r\n            // no reward scaling applied\r\n            reward = baseReward;\r\n        } else {\r\n            // calculate minimum reward using scaling floor\r\n            uint256 minReward = baseReward.mul(rewardScaling.floor).div(rewardScaling.ceiling);\r\n\r\n            // calculate bonus reward with vested portion of scaling factor\r\n            uint256 bonusReward =\r\n                baseReward\r\n                    .mul(stakeDuration)\r\n                    .mul(rewardScaling.ceiling.sub(rewardScaling.floor))\r\n                    .div(rewardScaling.ceiling)\r\n                    .div(rewardScaling.time);\r\n\r\n            // add minimum reward and bonus reward\r\n            reward = minReward.add(bonusReward);\r\n        }\r\n\r\n        // explicit return\r\n        return reward;\r\n    }\r\n\r\n    /* admin functions */\r\n\r\n    /// @notice Add funds to the Hypervisor\r\n    /// access control: only admin\r\n    /// state machine:\r\n    ///   - can be called multiple times\r\n    ///   - only online\r\n    /// state scope:\r\n    ///   - increase _hypervisor.rewardSharesOutstanding\r\n    ///   - append to _hypervisor.rewardSchedules\r\n    /// token transfer: transfer staking tokens from msg.sender to reward pool\r\n    /// @param amount uint256 Amount of reward tokens to deposit\r\n    /// @param duration uint256 Duration over which to linearly unlock rewards\r\n    function fund(uint256 amount, uint256 duration) external onlyOwner onlyOnline {\r\n        // validate duration\r\n        require(duration != 0, \"Hypervisor: invalid duration\");\r\n\r\n        // create new reward shares\r\n        // if existing rewards on this Hypervisor\r\n        //   mint new shares proportional to % change in rewards remaining\r\n        //   newShares = remainingShares * newReward / remainingRewards\r\n        // else\r\n        //   mint new shares with BASE_SHARES_PER_WEI initial conversion rate\r\n        //   store as fixed point number with same  of decimals as reward token\r\n        uint256 newRewardShares;\r\n        if (_hypervisor.rewardSharesOutstanding > 0) {\r\n            uint256 remainingRewards = IERC20(_hypervisor.rewardToken).balanceOf(_hypervisor.rewardPool);\r\n            newRewardShares = _hypervisor.rewardSharesOutstanding.mul(amount).div(remainingRewards);\r\n        } else {\r\n            newRewardShares = amount.mul(BASE_SHARES_PER_WEI);\r\n        }\r\n\r\n        // add reward shares to total\r\n        _hypervisor.rewardSharesOutstanding = _hypervisor.rewardSharesOutstanding.add(newRewardShares);\r\n\r\n        // store new reward schedule\r\n        _hypervisor.rewardSchedules.push(RewardSchedule(duration, block.timestamp, newRewardShares));\r\n\r\n        // transfer reward tokens to reward pool\r\n        TransferHelper.safeTransferFrom(\r\n            _hypervisor.rewardToken,\r\n            msg.sender,\r\n            _hypervisor.rewardPool,\r\n            amount\r\n        );\r\n\r\n        // emit event\r\n        emit HypervisorFunded(amount, duration);\r\n    }\r\n\r\n    /// @notice Add vault factory to whitelist\r\n    /// @dev use this function to enable stakes to vaults coming from the specified\r\n    ///      factory contract\r\n    /// access control: only admin\r\n    /// state machine:\r\n    ///   - can be called multiple times\r\n    ///   - not shutdown\r\n    /// state scope:\r\n    ///   - append to _vaultFactorySet\r\n    /// token transfer: none\r\n    /// @param factory address The address of the vault factory\r\n    function registerVaultFactory(address factory) external onlyOwner notShutdown {\r\n        // add factory to set\r\n        require(_vaultFactorySet.add(factory), \"Hypervisor: vault factory already registered\");\r\n\r\n        // emit event\r\n        emit VaultFactoryRegistered(factory);\r\n    }\r\n\r\n    /// @notice Remove vault factory from whitelist\r\n    /// @dev use this function to disable new stakes to vaults coming from the specified\r\n    ///      factory contract.\r\n    ///      note: vaults with existing stakes from this factory are sill able to unstake\r\n    /// access control: only admin\r\n    /// state machine:\r\n    ///   - can be called multiple times\r\n    ///   - not shutdown\r\n    /// state scope:\r\n    ///   - remove from _vaultFactorySet\r\n    /// token transfer: none\r\n    /// @param factory address The address of the vault factory\r\n    function removeVaultFactory(address factory) external onlyOwner notShutdown {\r\n        // remove factory from set\r\n        require(_vaultFactorySet.remove(factory), \"Hypervisor: vault factory not registered\");\r\n\r\n        // emit event\r\n        emit VaultFactoryRemoved(factory);\r\n    }\r\n\r\n    /// @notice Register bonus token for distribution\r\n    /// @dev use this function to enable distribution of any ERC20 held by the RewardPool contract\r\n    /// access control: only admin\r\n    /// state machine:\r\n    ///   - can be called multiple times\r\n    ///   - only online\r\n    /// state scope:\r\n    ///   - append to _bonusTokenSet\r\n    /// token transfer: none\r\n    /// @param bonusToken address The address of the bonus token\r\n    function registerBonusToken(address bonusToken) external onlyOwner onlyOnline {\r\n        // verify valid bonus token\r\n        _validateAddress(bonusToken);\r\n\r\n        // verify bonus token count\r\n        require(_bonusTokenSet.length() < MAX_REWARD_TOKENS, \"Hypervisor: max bonus tokens reached \");\r\n\r\n        // add token to set\r\n        assert(_bonusTokenSet.add(bonusToken));\r\n\r\n        // emit event\r\n        emit BonusTokenRegistered(bonusToken);\r\n    }\r\n\r\n    /// @notice Rescue tokens from RewardPool\r\n    /// @dev use this function to rescue tokens from RewardPool contract\r\n    ///      without distributing to stakers or triggering emergency shutdown\r\n    /// access control: only admin\r\n    /// state machine:\r\n    ///   - can be called multiple times\r\n    ///   - only online\r\n    /// state scope: none\r\n    /// token transfer: transfer requested token from RewardPool to recipient\r\n    /// @param token address The address of the token to rescue\r\n    /// @param recipient address The address of the recipient\r\n    /// @param amount uint256 The amount of tokens to rescue\r\n    function rescueTokensFromRewardPool(\r\n        address token,\r\n        address recipient,\r\n        uint256 amount\r\n    ) external onlyOwner onlyOnline {\r\n        // verify recipient\r\n        _validateAddress(recipient);\r\n\r\n        // check not attempting to unstake reward token\r\n        require(token != _hypervisor.rewardToken, \"Hypervisor: invalid address\");\r\n\r\n        // check not attempting to wthdraw bonus token\r\n        require(!_bonusTokenSet.contains(token), \"Hypervisor: invalid address\");\r\n\r\n        // transfer tokens to recipient\r\n        IRewardPool(_hypervisor.rewardPool).sendERC20(token, recipient, amount);\r\n    }\r\n\r\n    /* user functions */\r\n\r\n    /// @notice Stake tokens\r\n    /// @dev anyone can stake to any vault if they have valid permission\r\n    /// access control: anyone\r\n    /// state machine:\r\n    ///   - can be called multiple times\r\n    ///   - only online\r\n    ///   - when vault exists on this Hypervisor\r\n    /// state scope:\r\n    ///   - append to _vaults[vault].stakes\r\n    ///   - increase _vaults[vault].totalStake\r\n    ///   - increase _hypervisor.totalStake\r\n    ///   - increase _hypervisor.totalStakeUnits\r\n    ///   - increase _hypervisor.lastUpdate\r\n    /// token transfer: transfer staking tokens from msg.sender to vault\r\n    /// @param vault address The address of the vault to stake from\r\n    /// @param amount uint256 The amount of staking tokens to stake\r\n    function stake(\r\n        address vault,\r\n        uint256 amount,\r\n        bytes calldata permission\r\n    ) external override onlyOnline {\r\n        // verify vault is valid\r\n        require(isValidVault(vault), \"Hypervisor: vault is not registered\");\r\n\r\n        // verify non-zero amount\r\n        require(amount != 0, \"Hypervisor: no amount staked\");\r\n\r\n        // fetch vault storage reference\r\n        VaultData storage vaultData = _vaults[vault];\r\n\r\n        // verify stakes boundary not reached\r\n        require(\r\n            vaultData.stakes.length < MAX_STAKES_PER_VAULT,\r\n            \"Hypervisor: MAX_STAKES_PER_VAULT reached\"\r\n        );\r\n\r\n        // update cached sum of stake units across all vaults\r\n        _updateTotalStakeUnits();\r\n\r\n        // store amount and timestamp\r\n        vaultData.stakes.push(StakeData(amount, block.timestamp));\r\n\r\n        // update cached total vault and Hypervisor amounts\r\n        vaultData.totalStake = vaultData.totalStake.add(amount);\r\n        _hypervisor.totalStake = _hypervisor.totalStake.add(amount);\r\n\r\n        // call lock on vault\r\n        IUniversalVault(vault).lock(_hypervisor.stakingToken, amount, permission);\r\n\r\n        // emit event\r\n        emit Staked(vault, amount);\r\n    }\r\n\r\n    /// @notice Unstake staking tokens and claim reward\r\n    /// @dev rewards can only be claimed when unstaking\r\n    /// access control: only owner of vault\r\n    /// state machine:\r\n    ///   - when vault exists on this Hypervisor\r\n    ///   - after stake from vault\r\n    ///   - can be called multiple times while sufficient stake remains\r\n    ///   - only online\r\n    /// state scope:\r\n    ///   - decrease _hypervisor.rewardSharesOutstanding\r\n    ///   - decrease _hypervisor.totalStake\r\n    ///   - increase _hypervisor.lastUpdate\r\n    ///   - modify _hypervisor.totalStakeUnits\r\n    ///   - modify _vaults[vault].stakes\r\n    ///   - decrease _vaults[vault].totalStake\r\n    /// token transfer:\r\n    ///   - transfer reward tokens from reward pool to recipient\r\n    ///   - transfer bonus tokens from reward pool to recipient\r\n    /// @param vault address The vault to unstake from\r\n    /// @param recipient address The recipient to send reward to\r\n    /// @param amount uint256 The amount of staking tokens to unstake\r\n    function unstakeAndClaim(\r\n        address vault,\r\n        address recipient,\r\n        uint256 amount,\r\n        bytes calldata permission\r\n    ) external override onlyOnline {\r\n        // fetch vault storage reference\r\n        VaultData storage vaultData = _vaults[vault];\r\n\r\n        // verify non-zero amount\r\n        require(amount != 0, \"Hypervisor: no amount unstaked\");\r\n\r\n        // validate recipient\r\n        _validateAddress(recipient);\r\n\r\n        // check for sufficient vault stake amount\r\n        require(vaultData.totalStake >= amount, \"Hypervisor: insufficient vault stake\");\r\n\r\n        // check for sufficient Hypervisor stake amount\r\n        // if this check fails, there is a bug in stake accounting\r\n        assert(_hypervisor.totalStake >= amount);\r\n\r\n        // update cached sum of stake units across all vaults\r\n        _updateTotalStakeUnits();\r\n\r\n        // get reward amount remaining\r\n        uint256 remainingRewards = IERC20(_hypervisor.rewardToken).balanceOf(_hypervisor.rewardPool);\r\n\r\n        // calculate vested portion of reward pool\r\n        uint256 unlockedRewards =\r\n            calculateUnlockedRewards(\r\n                _hypervisor.rewardSchedules,\r\n                remainingRewards,\r\n                _hypervisor.rewardSharesOutstanding,\r\n                block.timestamp\r\n            );\r\n\r\n        // calculate vault time weighted reward with scaling\r\n        RewardOutput memory out =\r\n            calculateRewardFromStakes(\r\n                vaultData.stakes,\r\n                amount,\r\n                unlockedRewards,\r\n                _hypervisor.totalStakeUnits,\r\n                block.timestamp,\r\n                _hypervisor.rewardScaling\r\n            );\r\n\r\n        // update stake data in storage\r\n        if (out.newStakesCount == 0) {\r\n            // all stakes have been unstaked\r\n            delete vaultData.stakes;\r\n        } else {\r\n            // some stakes have been completely or partially unstaked\r\n            // delete fully unstaked stakes\r\n            while (vaultData.stakes.length > out.newStakesCount) vaultData.stakes.pop();\r\n            // update partially unstaked stake\r\n            vaultData.stakes[out.newStakesCount.sub(1)].amount = out.lastStakeAmount;\r\n        }\r\n\r\n        // update cached stake totals\r\n        vaultData.totalStake = vaultData.totalStake.sub(amount);\r\n        _hypervisor.totalStake = _hypervisor.totalStake.sub(amount);\r\n        _hypervisor.totalStakeUnits = out.newTotalStakeUnits;\r\n\r\n        // unlock staking tokens from vault\r\n        IUniversalVault(vault).unlock(_hypervisor.stakingToken, amount, permission);\r\n\r\n        // emit event\r\n        emit Unstaked(vault, amount);\r\n\r\n        // only perform on non-zero reward\r\n        if (out.reward > 0) {\r\n            // calculate shares to burn\r\n            // sharesToBurn = sharesOutstanding * reward / remainingRewards\r\n            uint256 sharesToBurn =\r\n                _hypervisor.rewardSharesOutstanding.mul(out.reward).div(remainingRewards);\r\n\r\n            // burn claimed shares\r\n            _hypervisor.rewardSharesOutstanding = _hypervisor.rewardSharesOutstanding.sub(sharesToBurn);\r\n\r\n            // transfer bonus tokens from reward pool to recipient\r\n            if (_bonusTokenSet.length() > 0) {\r\n                for (uint256 index = 0; index < _bonusTokenSet.length(); index++) {\r\n                    // fetch bonus token address reference\r\n                    address bonusToken = _bonusTokenSet.at(index);\r\n\r\n                    // calculate bonus token amount\r\n                    // bonusAmount = bonusRemaining * reward / remainingRewards\r\n                    uint256 bonusAmount =\r\n                        IERC20(bonusToken).balanceOf(_hypervisor.rewardPool).mul(out.reward).div(\r\n                            remainingRewards\r\n                        );\r\n\r\n                    // transfer bonus token\r\n                    IRewardPool(_hypervisor.rewardPool).sendERC20(bonusToken, recipient, bonusAmount);\r\n\r\n                    // emit event\r\n                    emit RewardClaimed(vault, recipient, bonusToken, bonusAmount);\r\n                }\r\n            }\r\n\r\n            // transfer reward tokens from reward pool to recipient\r\n            IRewardPool(_hypervisor.rewardPool).sendERC20(_hypervisor.rewardToken, recipient, out.reward);\r\n\r\n            // emit event\r\n            emit RewardClaimed(vault, recipient, _hypervisor.rewardToken, out.reward);\r\n        }\r\n    }\r\n\r\n    /// @notice Exit Hypervisor without claiming reward\r\n    /// @dev This function should never revert when correctly called by the vault.\r\n    ///      A max number of stakes per vault is set with MAX_STAKES_PER_VAULT to\r\n    ///      place an upper bound on the for loop in calculateTotalStakeUnits().\r\n    /// access control: only callable by the vault directly\r\n    /// state machine:\r\n    ///   - when vault exists on this Hypervisor\r\n    ///   - when active stake from this vault\r\n    ///   - any power state\r\n    /// state scope:\r\n    ///   - decrease _hypervisor.totalStake\r\n    ///   - increase _hypervisor.lastUpdate\r\n    ///   - modify _hypervisor.totalStakeUnits\r\n    ///   - delete _vaults[vault]\r\n    /// token transfer: none\r\n    function rageQuit() external override {\r\n        // fetch vault storage reference\r\n        VaultData storage _vaultData = _vaults[msg.sender];\r\n\r\n        // revert if no active stakes\r\n        require(_vaultData.stakes.length != 0, \"Hypervisor: no stake\");\r\n\r\n        // update cached sum of stake units across all vaults\r\n        _updateTotalStakeUnits();\r\n\r\n        // emit event\r\n        emit Unstaked(msg.sender, _vaultData.totalStake);\r\n\r\n        // update cached totals\r\n        _hypervisor.totalStake = _hypervisor.totalStake.sub(_vaultData.totalStake);\r\n        _hypervisor.totalStakeUnits = _hypervisor.totalStakeUnits.sub(\r\n            calculateTotalStakeUnits(_vaultData.stakes, block.timestamp)\r\n        );\r\n\r\n        // delete stake data\r\n        delete _vaults[msg.sender];\r\n    }\r\n\r\n    /* convenience functions */\r\n\r\n    function _updateTotalStakeUnits() private {\r\n        // update cached totalStakeUnits\r\n        _hypervisor.totalStakeUnits = getCurrentTotalStakeUnits();\r\n        // update cached lastUpdate\r\n        _hypervisor.lastUpdate = block.timestamp;\r\n    }\r\n\r\n    function _validateAddress(address target) private view {\r\n        // sanity check target for potential input errors\r\n        require(isValidAddress(target), \"Hypervisor: invalid address\");\r\n    }\r\n\r\n    function _truncateStakesArray(StakeData[] memory array, uint256 newLength)\r\n        private\r\n        pure\r\n        returns (StakeData[] memory newArray)\r\n    {\r\n        newArray = new StakeData[](newLength);\r\n        for (uint256 index = 0; index < newLength; index++) {\r\n            newArray[index] = array[index];\r\n        }\r\n        return newArray;\r\n    }\r\n}\r\n\r\npragma solidity 0.7.6;\r\n\r\n/// @title LIQUIDITY\r\ncontract LiquidriumFactory is Ownable, IFactory, IInstanceRegistry, ERC721 {\r\n\r\n    bytes32[] public names;\r\n    mapping(bytes32=>address) public templates;\r\n    bytes32 public activeTemplate;\r\n\r\n    mapping(address=>address[]) public userIndex;\r\n    \r\n    event TemplateAdded(bytes32 indexed name, address indexed template);\r\n    event TemplateActive(bytes32 indexed name, address indexed template);\r\n\r\n    constructor() ERC721(\"LIQUIDITY\", \"LIQUIDITY\") {}\r\n\r\n    function addTemplate(bytes32 name, address template) public onlyOwner {\r\n        require(templates[name] == address(0), \"Template already exists\");\r\n        templates[name] = template;\r\n        if(names.length == 0) {\r\n          activeTemplate = name; \r\n          emit TemplateActive(name, template);\r\n        }\r\n        names.push(name);\r\n        emit TemplateAdded(name, template);\r\n    }\r\n\r\n    function setActive(bytes32 name) public onlyOwner {\r\n      require(templates[name] != address(0), \"Template does not exist\");\r\n      activeTemplate = name;\r\n      emit TemplateActive(name, templates[name]);\r\n    }\r\n\r\n    /* registry functions */\r\n\r\n    function isInstance(address instance) external view override returns (bool validity) {\r\n        return ERC721._exists(uint256(instance));\r\n    }\r\n\r\n    function instanceCount() external view override returns (uint256 count) {\r\n        return ERC721.totalSupply();\r\n    }\r\n\r\n    function instanceAt(uint256 index) external view override returns (address instance) {\r\n        return address(ERC721.tokenByIndex(index));\r\n    }\r\n\r\n    /* factory functions */\r\n\r\n    function createSelected(bytes32 name) public returns (address vault) {\r\n        // create clone and initialize\r\n        vault = ProxyFactory._create(\r\n            templates[name],\r\n            abi.encodeWithSelector(IUniversalVault.initialize.selector)\r\n        );\r\n\r\n        // mint nft to caller\r\n        ERC721._safeMint(msg.sender, uint256(vault));\r\n        userIndex[msg.sender].push(vault);\r\n\r\n        // emit event\r\n        emit InstanceAdded(vault);\r\n\r\n        // explicit return\r\n        return vault;\r\n    }\r\n\r\n    function createSelected2(bytes32 name, bytes32 salt) public returns (address vault) {\r\n        // create clone and initialize\r\n        vault = ProxyFactory._create2(\r\n            templates[name],\r\n            abi.encodeWithSelector(IUniversalVault.initialize.selector),\r\n            salt\r\n        );\r\n\r\n        // mint nft to caller\r\n        ERC721._safeMint(msg.sender, uint256(vault));\r\n        userIndex[msg.sender].push(vault);\r\n\r\n        // emit event\r\n        emit InstanceAdded(vault);\r\n\r\n        // explicit return\r\n        return vault;\r\n    }\r\n\r\n\r\n    function create(bytes calldata) external override returns (address vault) {\r\n        return create();\r\n    }\r\n\r\n    function create2(bytes calldata, bytes32 salt) external override returns (address vault) {\r\n        return create2(salt);\r\n    }\r\n\r\n    function create() public returns (address vault) {\r\n        // create clone and initialize\r\n        vault = ProxyFactory._create(\r\n            templates[activeTemplate],\r\n            abi.encodeWithSelector(IUniversalVault.initialize.selector)\r\n        );\r\n\r\n        // mint nft to caller\r\n        ERC721._safeMint(msg.sender, uint256(vault));\r\n        userIndex[msg.sender].push(vault);\r\n\r\n        // emit event\r\n        emit InstanceAdded(vault);\r\n\r\n        // explicit return\r\n        return vault;\r\n    }\r\n\r\n    function create2(bytes32 salt) public returns (address vault) {\r\n        // create clone and initialize\r\n        vault = ProxyFactory._create2(\r\n            templates[activeTemplate],\r\n            abi.encodeWithSelector(IUniversalVault.initialize.selector),\r\n            salt\r\n        );\r\n\r\n        // mint nft to caller\r\n        ERC721._safeMint(msg.sender, uint256(vault));\r\n        userIndex[msg.sender].push(vault);\r\n\r\n        // emit event\r\n        emit InstanceAdded(vault);\r\n\r\n        // explicit return\r\n        return vault;\r\n    }\r\n\r\n    /* getter functions */\r\n\r\n    function nameCount() public view returns(uint256) {\r\n        return names.length;\r\n    }\r\n\r\n    function vaultCount(address user) public view returns(uint256) {\r\n        return userIndex[user].length;\r\n    }\r\n\r\n    function getUserVault(address user, uint256 index) public view returns (address) {\r\n        return userIndex[user][index];\r\n    }\r\n\r\n    function getTemplate() external view returns (address) {\r\n        return templates[activeTemplate];\r\n    }\r\n\r\n}","ABI":"[{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"delegate\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"token\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"Locked\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"delegate\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"token\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"bool\",\"name\":\"notified\",\"type\":\"bool\"},{\"indexed\":false,\"internalType\":\"string\",\"name\":\"reason\",\"type\":\"string\"}],\"name\":\"RageQuit\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"delegate\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"token\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"Unlocked\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"LOCK_TYPEHASH\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"RAGEQUIT_GAS\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"UNLOCK_TYPEHASH\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"VERSION\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"delegate\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"token\",\"type\":\"address\"}],\"name\":\"calculateLockID\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"lockID\",\"type\":\"bytes32\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"checkBalances\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"validity\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"token\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"delegate\",\"type\":\"address\"}],\"name\":\"getBalanceDelegated\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"balance\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"token\",\"type\":\"address\"}],\"name\":\"getBalanceLocked\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"balance\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"index\",\"type\":\"uint256\"}],\"name\":\"getLockAt\",\"outputs\":[{\"components\":[{\"internalType\":\"address\",\"name\":\"delegate\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"token\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"balance\",\"type\":\"uint256\"}],\"internalType\":\"struct IUniversalVault.LockData\",\"name\":\"lockData\",\"type\":\"tuple\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getLockSetCount\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"count\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getNonce\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"nonce\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"eip712TypeHash\",\"type\":\"bytes32\"},{\"internalType\":\"address\",\"name\":\"delegate\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"token\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"nonce\",\"type\":\"uint256\"}],\"name\":\"getPermissionHash\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"permissionHash\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"initialize\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"initializeLock\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"permissionHash\",\"type\":\"bytes32\"},{\"internalType\":\"bytes\",\"name\":\"signature\",\"type\":\"bytes\"}],\"name\":\"isValidSignature\",\"outputs\":[{\"internalType\":\"bytes4\",\"name\":\"\",\"type\":\"bytes4\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"token\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"internalType\":\"bytes\",\"name\":\"permission\",\"type\":\"bytes\"}],\"name\":\"lock\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"nft\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"nftAddress\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"ownerAddress\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"delegate\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"token\",\"type\":\"address\"}],\"name\":\"rageQuit\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"notified\",\"type\":\"bool\"},{\"internalType\":\"string\",\"name\":\"error\",\"type\":\"string\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"token\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"transferERC20\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"transferETH\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"token\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"internalType\":\"bytes\",\"name\":\"permission\",\"type\":\"bytes\"}],\"name\":\"unlock\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"stateMutability\":\"payable\",\"type\":\"receive\"}]","ContractName":"Visor","CompilerVersion":"v0.7.6+commit.7338295f","OptimizationUsed":"1","Runs":"1","ConstructorArguments":"","EVMVersion":"Default","Library":"","LicenseType":"None","Proxy":"0","Implementation":"","SwarmSource":"ipfs://ae63c9b76f478d61a6cfcb833792835714437f0d57ced0b6b9bb953af593fc5d"}]}