{"status":"1","message":"OK","result":[{"SourceCode":"{{\r\n  \"language\": \"Solidity\",\r\n  \"sources\": {\r\n    \"contracts/loans/LoanRegistry.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity 0.8.4;\\n\\nimport \\\"../utils/Ownable.sol\\\";\\nimport \\\"../utils/ContractKeys.sol\\\";\\n\\n/**\\n * @title  LoanRegistry\\n * @author NFTfi\\n * @dev Registry for Loan Types supported by NFTfi.\\n * Each Loan type is associated with the address of a Loan contract that implements the loan type.\\n */\\ncontract LoanRegistry is Ownable {\\n    /* ******* */\\n    /* STORAGE */\\n    /* ******* */\\n\\n    /**\\n     * @dev For each loan type, records the address of the contract that implements the type\\n     */\\n    mapping(bytes32 => address) private typeContracts;\\n    /**\\n     * @dev reverse mapping of loanTypes - for each contract address, records the associated loan type\\n     */\\n    mapping(address => bytes32) private contractTypes;\\n\\n    /* ****** */\\n    /* EVENTS */\\n    /* ****** */\\n\\n    /**\\n     * @notice This event is fired whenever the admins register a loan type.\\n     *\\n     * @param loanType - Loan type represented by keccak256('loan type').\\n     * @param loanContract - Address of the loan type contract.\\n     */\\n    event TypeUpdated(bytes32 indexed loanType, address indexed loanContract);\\n\\n    /* *********** */\\n    /* CONSTRUCTOR */\\n    /* *********** */\\n\\n    /**\\n     * @notice Sets the admin of the contract.\\n     * Initializes `contractTypes` with a batch of loan types.\\n     *\\n     * @param _admin - Initial admin of this contract.\\n     * @param _loanTypes - Loan types represented by keccak256('loan type').\\n     * @param _loanContracts - The addresses of each wrapper contract that implements the loan type's behaviour.\\n     */\\n    constructor(\\n        address _admin,\\n        string[] memory _loanTypes,\\n        address[] memory _loanContracts\\n    ) Ownable(_admin) {\\n        _registerLoans(_loanTypes, _loanContracts);\\n    }\\n\\n    /* ********* */\\n    /* FUNCTIONS */\\n    /* ********* */\\n\\n    /**\\n     * @notice  Set or update the contract address that implements the given Loan Type.\\n     * Set address(0) for a loan type for un-register such type.\\n     *\\n     * @param _loanType - Loan type represented by 'loan type'.\\n     * @param _loanContract - The address of the wrapper contract that implements the loan type's behaviour.\\n     */\\n    function registerLoan(string memory _loanType, address _loanContract) external onlyOwner {\\n        _registerLoan(_loanType, _loanContract);\\n    }\\n\\n    /**\\n     * @notice  Batch set or update the contract addresses that implement the given batch Loan Type.\\n     * Set address(0) for a loan type for un-register such type.\\n     *\\n     * @param _loanTypes - Loan types represented by 'loan type'.\\n     * @param _loanContracts - The addresses of each wrapper contract that implements the loan type's behaviour.\\n     */\\n    function registerLoans(string[] memory _loanTypes, address[] memory _loanContracts) external onlyOwner {\\n        _registerLoans(_loanTypes, _loanContracts);\\n    }\\n\\n    /**\\n     * @notice This function can be called by anyone to get the contract address that implements the given loan type.\\n     *\\n     * @param  _loanType - The loan type, e.g. bytes32(\\\"DIRECT_LOAN_FIXED\\\"), or bytes32(\\\"DIRECT_LOAN_PRO_RATED\\\").\\n     */\\n    function getContractFromType(bytes32 _loanType) external view returns (address) {\\n        return typeContracts[_loanType];\\n    }\\n\\n    /**\\n     * @notice This function can be called by anyone to get the loan type of the given contract address.\\n     *\\n     * @param  _loanContract - The loan contract\\n     */\\n    function getTypeFromContract(address _loanContract) external view returns (bytes32) {\\n        return contractTypes[_loanContract];\\n    }\\n\\n    /**\\n     * @notice  Set or update the contract address that implements the given Loan Type.\\n     * Set address(0) for a loan type for un-register such type.\\n     *\\n     * @param _loanType - Loan type represented by 'loan type').\\n     * @param _loanContract - The address of the wrapper contract that implements the loan type's behaviour.\\n     */\\n    function _registerLoan(string memory _loanType, address _loanContract) internal {\\n        require(bytes(_loanType).length != 0, \\\"loanType is empty\\\");\\n        bytes32 loanTypeKey = ContractKeys.getIdFromStringKey(_loanType);\\n\\n        typeContracts[loanTypeKey] = _loanContract;\\n        contractTypes[_loanContract] = loanTypeKey;\\n\\n        emit TypeUpdated(loanTypeKey, _loanContract);\\n    }\\n\\n    /**\\n     * @notice  Batch set or update the contract addresses that implement the given batch Loan Type.\\n     * Set address(0) for a loan type for un-register such type.\\n     *\\n     * @param _loanTypes - Loan types represented by keccak256('loan type').\\n     * @param _loanContracts - The addresses of each wrapper contract that implements the loan type's behaviour.\\n     */\\n    function _registerLoans(string[] memory _loanTypes, address[] memory _loanContracts) internal {\\n        require(_loanTypes.length == _loanContracts.length, \\\"registerLoans function information arity mismatch\\\");\\n\\n        for (uint256 i = 0; i < _loanTypes.length; i++) {\\n            _registerLoan(_loanTypes[i], _loanContracts[i]);\\n        }\\n    }\\n}\\n\"\r\n    },\r\n    \"contracts/utils/Ownable.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity 0.8.4;\\n\\nimport \\\"@openzeppelin/contracts/utils/Context.sol\\\";\\n\\n/**\\n * @dev Contract module which provides a basic access control mechanism, where\\n * there is an account (an owner) that can be granted exclusive access to\\n * specific functions.\\n *\\n * By default, the owner account will be the one that deploys the contract. This\\n * can later be changed with {transferOwnership}.\\n *\\n * This module is used through inheritance. It will make available the modifier\\n * `onlyOwner`, which can be applied to your functions to restrict their use to\\n * the owner.\\n *\\n * Modified version from openzeppelin/contracts/access/Ownable.sol that allows to\\n * initialize the owner using a parameter in the constructor\\n */\\nabstract contract Ownable is Context {\\n    address private _owner;\\n\\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\\n\\n    /**\\n     * @dev Throws if called by any account other than the owner.\\n     */\\n    modifier onlyOwner() {\\n        require(owner() == _msgSender(), \\\"Ownable: caller is not the owner\\\");\\n        _;\\n    }\\n\\n    /**\\n     * @dev Initializes the contract setting the deployer as the initial owner.\\n     */\\n    constructor(address _initialOwner) {\\n        _setOwner(_initialOwner);\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Can only be called by the current owner.\\n     */\\n    function transferOwnership(address _newOwner) public virtual onlyOwner {\\n        require(_newOwner != address(0), \\\"Ownable: new owner is the zero address\\\");\\n        _setOwner(_newOwner);\\n    }\\n\\n    /**\\n     * @dev Returns the address of the current owner.\\n     */\\n    function owner() public view virtual returns (address) {\\n        return _owner;\\n    }\\n\\n    /**\\n     * @dev Sets the owner.\\n     */\\n    function _setOwner(address _newOwner) private {\\n        address oldOwner = _owner;\\n        _owner = _newOwner;\\n        emit OwnershipTransferred(oldOwner, _newOwner);\\n    }\\n}\\n\"\r\n    },\r\n    \"contracts/utils/ContractKeys.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity 0.8.4;\\n\\n/**\\n * @title ContractKeys\\n * @author NFTfi\\n * @dev Common library for contract keys\\n */\\nlibrary ContractKeys {\\n    bytes32 public constant PERMITTED_ERC20S = bytes32(\\\"PERMITTED_ERC20S\\\");\\n    bytes32 public constant PERMITTED_NFTS = bytes32(\\\"PERMITTED_NFTS\\\");\\n    bytes32 public constant PERMITTED_PARTNERS = bytes32(\\\"PERMITTED_PARTNERS\\\");\\n    bytes32 public constant NFT_TYPE_REGISTRY = bytes32(\\\"NFT_TYPE_REGISTRY\\\");\\n    bytes32 public constant LOAN_REGISTRY = bytes32(\\\"LOAN_REGISTRY\\\");\\n    bytes32 public constant PERMITTED_SNFT_RECEIVER = bytes32(\\\"PERMITTED_SNFT_RECEIVER\\\");\\n    bytes32 public constant PERMITTED_BUNDLE_ERC20S = bytes32(\\\"PERMITTED_BUNDLE_ERC20S\\\");\\n    bytes32 public constant PERMITTED_AIRDROPS = bytes32(\\\"PERMITTED_AIRDROPS\\\");\\n    bytes32 public constant AIRDROP_RECEIVER = bytes32(\\\"AIRDROP_RECEIVER\\\");\\n    bytes32 public constant AIRDROP_FACTORY = bytes32(\\\"AIRDROP_FACTORY\\\");\\n    bytes32 public constant AIRDROP_FLASH_LOAN = bytes32(\\\"AIRDROP_FLASH_LOAN\\\");\\n    bytes32 public constant NFTFI_BUNDLER = bytes32(\\\"NFTFI_BUNDLER\\\");\\n\\n    string public constant AIRDROP_WRAPPER_STRING = \\\"AirdropWrapper\\\";\\n\\n    /**\\n     * @notice Returns the bytes32 representation of a string\\n     * @param _key the string key\\n     * @return id bytes32 representation\\n     */\\n    function getIdFromStringKey(string memory _key) external pure returns (bytes32 id) {\\n        require(bytes(_key).length <= 32, \\\"invalid key\\\");\\n\\n        // solhint-disable-next-line no-inline-assembly\\n        assembly {\\n            id := mload(add(_key, 32))\\n        }\\n    }\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/utils/Context.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.0 (utils/Context.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Provides information about the current execution context, including the\\n * sender of the transaction and its data. While these are generally available\\n * via msg.sender and msg.data, they should not be accessed in such a direct\\n * manner, since when dealing with meta-transactions the account sending and\\n * paying for execution may not be the actual sender (as far as an application\\n * is concerned).\\n *\\n * This contract is only required for intermediate, library-like contracts.\\n */\\nabstract contract Context {\\n    function _msgSender() internal view virtual returns (address) {\\n        return msg.sender;\\n    }\\n\\n    function _msgData() internal view virtual returns (bytes calldata) {\\n        return msg.data;\\n    }\\n}\\n\"\r\n    }\r\n  },\r\n  \"settings\": {\r\n    \"metadata\": {\r\n      \"bytecodeHash\": \"none\",\r\n      \"useLiteralContent\": true\r\n    },\r\n    \"optimizer\": {\r\n      \"enabled\": true,\r\n      \"runs\": 100\r\n    },\r\n    \"outputSelection\": {\r\n      \"*\": {\r\n        \"*\": [\r\n          \"evm.bytecode\",\r\n          \"evm.deployedBytecode\",\r\n          \"devdoc\",\r\n          \"userdoc\",\r\n          \"metadata\",\r\n          \"abi\"\r\n        ]\r\n      }\r\n    },\r\n    \"libraries\": {\r\n      \"contracts/utils/ContractKeys.sol\": {\r\n        \"ContractKeys\": \"0x9cd0bbd444a7496b81d329a4af66024071271828\"\r\n      }\r\n    }\r\n  }\r\n}}","ABI":"[{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_admin\",\"type\":\"address\"},{\"internalType\":\"string[]\",\"name\":\"_loanTypes\",\"type\":\"string[]\"},{\"internalType\":\"address[]\",\"name\":\"_loanContracts\",\"type\":\"address[]\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"loanType\",\"type\":\"bytes32\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"loanContract\",\"type\":\"address\"}],\"name\":\"TypeUpdated\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"_loanType\",\"type\":\"bytes32\"}],\"name\":\"getContractFromType\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_loanContract\",\"type\":\"address\"}],\"name\":\"getTypeFromContract\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"string\",\"name\":\"_loanType\",\"type\":\"string\"},{\"internalType\":\"address\",\"name\":\"_loanContract\",\"type\":\"address\"}],\"name\":\"registerLoan\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"string[]\",\"name\":\"_loanTypes\",\"type\":\"string[]\"},{\"internalType\":\"address[]\",\"name\":\"_loanContracts\",\"type\":\"address[]\"}],\"name\":\"registerLoans\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}]","ContractName":"LoanRegistry","CompilerVersion":"v0.8.4+commit.c7e474f2","OptimizationUsed":"1","Runs":"100","ConstructorArguments":"000000000000000000000000dca17eedc1aa3dbb14361678566b2da5a1bb4c310000000000000000000000000000000000000000000000000000000000000060000000000000000000000000000000000000000000000000000000000000014000000000000000000000000000000000000000000000000000000000000000020000000000000000000000000000000000000000000000000000000000000040000000000000000000000000000000000000000000000000000000000000008000000000000000000000000000000000000000000000000000000000000000114449524543545f4c4f414e5f464958454400000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000154449524543545f4c4f414e5f50524f5f52415445440000000000000000000000000000000000000000000000000000000000000000000000000000000000000200000000000000000000000067f354abf33783b4bf09154aa92f7a96774fc00500000000000000000000000065ca732d5cb79fe16604ab39c6cc7fd26e4389f3","EVMVersion":"Default","Library":"","LicenseType":"","Proxy":"0","Implementation":"","SwarmSource":""}]}