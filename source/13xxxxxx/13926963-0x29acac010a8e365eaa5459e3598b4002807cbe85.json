{"status":"1","message":"OK","result":[{"SourceCode":"{{\r\n  \"language\": \"Solidity\",\r\n  \"sources\": {\r\n    \"WhitelistEligibility.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: GPL-3.0-only\\n\\npragma solidity 0.8.9;\\n\\nimport \\\"IEligibility.sol\\\";\\n\\ncontract WhitelistEligibility is IEligibility {\\n\\n    struct Gate {\\n        address whitelisted;\\n        uint maxWithdrawals;\\n        uint numWithdrawals;\\n    }\\n\\n    mapping (uint => Gate) public gates;\\n    uint public numGates = 0;\\n\\n    address public gateMaster;\\n    address public management;\\n    bool public paused;\\n\\n    modifier managementOnly() {\\n        require (msg.sender == management, 'Only management may call this');\\n        _;\\n    }\\n\\n    constructor (address _mgmt, address _gateMaster) {\\n        gateMaster = _gateMaster;\\n        management = _mgmt;\\n    }\\n\\n    // change the management key\\n    function setManagement(address newMgmt) external managementOnly {\\n        management = newMgmt;\\n    }\\n\\n    function setPaused(bool _paused) external managementOnly {\\n        paused = _paused;\\n    }\\n\\n    function addGate(address whitelisted, uint maxWithdrawals) external managementOnly returns (uint) {\\n        numGates += 1;\\n        Gate storage gate = gates[numGates];\\n        gate.whitelisted = whitelisted;\\n        gate.maxWithdrawals = maxWithdrawals;\\n        return numGates;\\n    }\\n\\n    function getGate(uint index) external view returns (address, uint, uint) {\\n        Gate memory gate = gates[index];\\n        return (gate.whitelisted, gate.maxWithdrawals, gate.numWithdrawals);\\n    }\\n\\n    function isEligible(uint index, address recipient, bytes32[] memory) public override view returns (bool eligible) {\\n        Gate storage gate = gates[index];\\n        return !paused && recipient == gate.whitelisted && gate.numWithdrawals < gate.maxWithdrawals;\\n    }\\n\\n    function passThruGate(uint index, address recipient, bytes32[] memory) external override {\\n        require(msg.sender == gateMaster, \\\"Only gatemaster may call this.\\\");\\n        // close re-entrance gate, prevent double withdrawals\\n        require(isEligible(index, recipient, new bytes32[](0)), \\\"Address is not eligible\\\");\\n\\n        Gate storage gate = gates[index];\\n        gate.numWithdrawals += 1;\\n    }\\n}\\n\"\r\n    },\r\n    \"IEligibility.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: GPL-3.0-only\\n\\npragma solidity 0.8.9;\\n\\ninterface IEligibility {\\n\\n//    function getGate(uint) external view returns (struct Gate)\\n//    function addGate(uint...) external\\n\\n    function isEligible(uint, address, bytes32[] memory) external view returns (bool eligible);\\n\\n    function passThruGate(uint, address, bytes32[] memory) external;\\n}\\n\"\r\n    }\r\n  },\r\n  \"settings\": {\r\n    \"evmVersion\": \"istanbul\",\r\n    \"optimizer\": {\r\n      \"enabled\": true,\r\n      \"runs\": 200\r\n    },\r\n    \"outputSelection\": {\r\n      \"*\": {\r\n        \"*\": [\r\n          \"evm.bytecode\",\r\n          \"evm.deployedBytecode\",\r\n          \"devdoc\",\r\n          \"userdoc\",\r\n          \"metadata\",\r\n          \"abi\"\r\n        ]\r\n      }\r\n    }\r\n  }\r\n}}","ABI":"[{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_mgmt\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_gateMaster\",\"type\":\"address\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"whitelisted\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"maxWithdrawals\",\"type\":\"uint256\"}],\"name\":\"addGate\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"gateMaster\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"gates\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"whitelisted\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"maxWithdrawals\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"numWithdrawals\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"index\",\"type\":\"uint256\"}],\"name\":\"getGate\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"index\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"recipient\",\"type\":\"address\"},{\"internalType\":\"bytes32[]\",\"name\":\"\",\"type\":\"bytes32[]\"}],\"name\":\"isEligible\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"eligible\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"management\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"numGates\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"index\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"recipient\",\"type\":\"address\"},{\"internalType\":\"bytes32[]\",\"name\":\"\",\"type\":\"bytes32[]\"}],\"name\":\"passThruGate\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"paused\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newMgmt\",\"type\":\"address\"}],\"name\":\"setManagement\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bool\",\"name\":\"_paused\",\"type\":\"bool\"}],\"name\":\"setPaused\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}]","ContractName":"WhitelistEligibility","CompilerVersion":"v0.8.9+commit.e5eed63a","OptimizationUsed":"1","Runs":"200","ConstructorArguments":"000000000000000000000000288fe43139741f91a8cbb6f4add83811c794851b000000000000000000000000a6fffd38a523d95b744ddc82a2a3c5e1cd77d8ee","EVMVersion":"Default","Library":"","LicenseType":"GNU GPLv3","Proxy":"0","Implementation":"","SwarmSource":""}]}