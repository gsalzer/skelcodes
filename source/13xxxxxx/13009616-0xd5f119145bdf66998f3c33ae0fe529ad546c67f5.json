{"status":"1","message":"OK","result":[{"SourceCode":"// Sources flattened with hardhat v2.2.1 https://hardhat.org\r\n\r\n// File contracts/access/Context.sol\r\n\r\n// SPDX-License-Identifier: MIT\r\n\r\npragma solidity 0.8.0;\r\n\r\n/*\r\n * @dev Provides information about the current execution context, including the\r\n * sender of the transaction and its data. While these are generally available\r\n * via msg.sender and msg.data, they should not be accessed in such a direct\r\n * manner, since when dealing with meta-transactions the account sending and\r\n * paying for execution may not be the actual sender (as far as an application\r\n * is concerned).\r\n *\r\n * This contract is only required for intermediate, library-like contracts.\r\n */\r\nabstract contract Context {\r\n    function _msgSender() internal view virtual returns (address) {\r\n        return msg.sender;\r\n    }\r\n\r\n    function _msgData() internal view virtual returns (bytes calldata) {\r\n        this; // silence state mutability warning without generating bytecode - see https://github.com/ethereum/solidity/issues/2691\r\n        return msg.data;\r\n    }\r\n}\r\n\r\n// File contracts/security/Pausable.sol\r\n\r\npragma solidity 0.8.0;\r\n\r\n/**\r\n * @dev Contract module which allows children to implement an emergency stop\r\n * mechanism that can be triggered by an authorized account.\r\n *\r\n * This module is used through inheritance. It will make available the\r\n * modifiers `whenNotPaused` and `whenPaused`, which can be applied to\r\n * the functions of your contract. Note that they will not be pausable by\r\n * simply including this module, only once the modifiers are put in place.\r\n */\r\nabstract contract Pausable is Context {\r\n    /**\r\n     * @dev Emitted when the pause is triggered by `account`.\r\n     */\r\n    event Paused(address account);\r\n\r\n    /**\r\n     * @dev Emitted when the pause is lifted by `account`.\r\n     */\r\n    event Unpaused(address account);\r\n\r\n    bool private _paused;\r\n\r\n    /**\r\n     * @dev Initializes the contract in unpaused state.\r\n     */\r\n    constructor() {\r\n        _paused = false;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns true if the contract is paused, and false otherwise.\r\n     */\r\n    function paused() public view virtual returns (bool) {\r\n        return _paused;\r\n    }\r\n\r\n    /**\r\n     * @dev Modifier to make a function callable only when the contract is not paused.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - The contract must not be paused.\r\n     */\r\n    modifier whenNotPaused() {\r\n        require(!paused(), \"Pausable: paused\");\r\n        _;\r\n    }\r\n\r\n    /**\r\n     * @dev Modifier to make a function callable only when the contract is paused.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - The contract must be paused.\r\n     */\r\n    modifier whenPaused() {\r\n        require(paused(), \"Pausable: not paused\");\r\n        _;\r\n    }\r\n\r\n    /**\r\n     * @dev Triggers stopped state.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - The contract must not be paused.\r\n     */\r\n    function _pause() internal virtual whenNotPaused {\r\n        _paused = true;\r\n        emit Paused(_msgSender());\r\n    }\r\n\r\n    /**\r\n     * @dev Returns to normal state.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - The contract must be paused.\r\n     */\r\n    function _unpause() internal virtual whenPaused {\r\n        _paused = false;\r\n        emit Unpaused(_msgSender());\r\n    }\r\n}\r\n\r\n// File contracts/access/Ownable.sol\r\n\r\npragma solidity 0.8.0;\r\n\r\nabstract contract Ownable is Pausable {\r\n    /// @notice store owner.\r\n    address public owner;\r\n\r\n    /// @notice store superAdmin using for reverting ownership.\r\n    address public superAdmin;\r\n\r\n    /// @notice OwnershipTransferred emit on each ownership transfered.\r\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\r\n\r\n    /**\r\n     * @dev Initializes the contract setting the deployer as the initial owner.\r\n     */\r\n    constructor(address ownerAddress) {\r\n        owner = ownerAddress;\r\n        superAdmin = ownerAddress;\r\n        emit OwnershipTransferred(address(0), owner);\r\n    }\r\n\r\n    /**\r\n     * @dev Throws if called by any account other than the owner.\r\n     */\r\n    modifier onlyOwner() {\r\n        require(owner == _msgSender(), \"Ownable: caller is not the owner\");\r\n        _;\r\n    }\r\n\r\n    /**\r\n     * @dev Throws if called by any account other than the owner.\r\n     */\r\n    modifier onlyAdmin() {\r\n        require(superAdmin == _msgSender(), \"Ownable: caller is not the admin\");\r\n        _;\r\n    }\r\n\r\n    /**\r\n     * @dev Leaves the contract without owner. It will not be possible to call\r\n     * `onlyOwner` functions anymore. Can only be called by the current owner.\r\n     *\r\n     * NOTE: Renouncing ownership will leave the contract without an owner,\r\n     * thereby removing any functionality that is only available to the owner.\r\n     */\r\n    function renounceOwnership() public onlyAdmin {\r\n        emit OwnershipTransferred(owner, superAdmin);\r\n        owner = superAdmin;\r\n    }\r\n\r\n    /**\r\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\r\n     * Can only be called by the current owner.\r\n     */\r\n    function transferOwnership(address newOwner) public virtual onlyOwner {\r\n        require(newOwner != address(0), \"Ownable: new owner is the zero address\");\r\n        emit OwnershipTransferred(owner, newOwner);\r\n        owner = newOwner;\r\n    }\r\n}\r\n\r\n// File contracts/UFARMBeneficiaryBook.sol\r\n\r\npragma solidity 0.8.0;\r\n\r\ncontract UFARMBeneficiaryBook is Ownable {\r\n    /// @notice mapping for stroring beneficiaries\r\n    mapping(address => Beneficiary[]) public beneficiaries;\r\n\r\n    /// @notice struct Beneficiaries for storing beneficiary details\r\n    struct Beneficiary {\r\n        address beneficiaryAddress;\r\n        address vestAddress;\r\n        uint256 claimTokens;\r\n    }\r\n\r\n    /// @notice An Activation event occurs on every beneficiary activation.\r\n\r\n    event Activated(address account, address vest, uint256 claimTokens, uint256 time);\r\n\r\n    /// @notice An Unactivation event occurs on every beneficiary UnActivation.\r\n    event UnActivated(address account, address vest, uint256 time);\r\n\r\n    constructor() Ownable(_msgSender()) {}\r\n\r\n    /**\r\n     * @notice get block timestamp.\r\n     * @return block timestamp.\r\n     */\r\n\r\n    function _getNow() internal view returns (uint256) {\r\n        return block.timestamp;\r\n    }\r\n\r\n    /**\r\n     * @notice Activate Single Beneficiary. called by only Owner. revert on zero address.\r\n     * @param account A Beneficiary Address.\r\n     * @param vest vest Address.\r\n     * @param tokens no of claimable tokens.\r\n     */\r\n\r\n    function singleActivation(\r\n        address account,\r\n        address vest,\r\n        uint256 tokens\r\n    ) external onlyOwner {\r\n        require(account != address(0), \"UFARMBeneficiaryBook: Activation failed\");\r\n        require(vest != address(0), \"UFARMBeneficiaryBook: Invalid Vesting Address\");\r\n        Beneficiary memory holder = Beneficiary(account, vest, tokens);\r\n        beneficiaries[account].push(holder);\r\n        emit Activated(account, vest, tokens, _getNow());\r\n    }\r\n\r\n    /**\r\n     * @notice Activate Multiple Beneficiary once. called by only Owner. revert on zero address.\r\n     * @param accounts Array of Beneficiary Address.\r\n     * @param vest Array of vest Address.\r\n     * @param tokens Array of claimTokens which consist no of claimable tokens.\r\n     */\r\n\r\n    function multiActivation(\r\n        address[] memory accounts,\r\n        address[] memory vest,\r\n        uint256[] memory tokens\r\n    ) external onlyOwner {\r\n        require(vest.length <= 5, \"UFARMBeneficiaryBook: limit exhausted\");\r\n        require(\r\n            accounts.length == vest.length ||\r\n                vest.length == tokens.length ||\r\n                tokens.length == accounts.length,\r\n            \"UFARMBeneficiaryBook: Invalid length.\"\r\n        );\r\n\r\n        for (uint8 u = 0; u < vest.length; u++) {\r\n            require(accounts[u] != address(0), \"UFARMBeneficiaryBook: Activation failed\");\r\n            require(vest[u] != address(0), \"UFARMBeneficiaryBook: Invalid Vesting Address\");\r\n\r\n            beneficiaries[accounts[u]].push(\r\n                Beneficiary({\r\n                    beneficiaryAddress: accounts[u],\r\n                    vestAddress: vest[u],\r\n                    claimTokens: tokens[u]\r\n                })\r\n            );\r\n\r\n            emit Activated(accounts[u], vest[u], tokens[u], _getNow());\r\n        }\r\n    }\r\n\r\n    /**\r\n     * @notice unActivate Beneficiary from Specific Vesting. called by only Owner. account should not be zero address.\r\n     * @param account A Beneficiary Address.\r\n     * @param index An insertId.\r\n     * @return it returns true on success.\r\n     */\r\n\r\n    function unActivate(address account, uint8 index) external onlyOwner returns (bool) {\r\n        require(account != address(0), \"UFARMBeneficiaryBook: UnActivation failed\");\r\n        delete beneficiaries[account][index];\r\n        emit UnActivated(account, beneficiaries[account][index].vestAddress, _getNow());\r\n        return true;\r\n    }\r\n\r\n    /**\r\n     * @notice unActivate Beneficiary from All Vesting. called by only Owner. account should not be zero address.\r\n     * @param account A Beneficiary Address.\r\n     * @return it returns true on success.\r\n     */\r\n\r\n    function unActivateForAll(address account) external onlyOwner returns (bool) {\r\n        require(account != address(0), \"UFARMBeneficiaryBook: UnActivation failed\");\r\n        delete beneficiaries[account];\r\n        return true;\r\n    }\r\n\r\n    /**\r\n     * @notice called by the each vesting contract for beneficiary Activation.\r\n     * @param account A Beneficiary Address.\r\n     * @param index An Insert id.\r\n     * @return this will returns beneficiary, vestAddress and his claimable tokens.\r\n     */\r\n\r\n    function isBeneficiary(address account, uint256 index)\r\n        public\r\n        view\r\n        returns (\r\n            bool,\r\n            address,\r\n            uint256\r\n        )\r\n    {\r\n        Beneficiary storage holders = beneficiaries[account][index];\r\n        return (holders.beneficiaryAddress == account, holders.vestAddress, holders.claimTokens);\r\n    }\r\n\r\n    /**\r\n     * @notice externally called by the frontend to determine his activation on specific vest path.\r\n     * @param account An address of beneficiary.\r\n     * @return length of beneficiaries Array.\r\n     */\r\n\r\n    function beneficiaryActivationCount(address account) public view returns (uint256) {\r\n        return beneficiaries[account].length;\r\n    }\r\n}","ABI":"[{\"inputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"vest\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"claimTokens\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"time\",\"type\":\"uint256\"}],\"name\":\"Activated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"Paused\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"vest\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"time\",\"type\":\"uint256\"}],\"name\":\"UnActivated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"Unpaused\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"beneficiaries\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"beneficiaryAddress\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"vestAddress\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"claimTokens\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"beneficiaryActivationCount\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"index\",\"type\":\"uint256\"}],\"name\":\"isBeneficiary\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"},{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address[]\",\"name\":\"accounts\",\"type\":\"address[]\"},{\"internalType\":\"address[]\",\"name\":\"vest\",\"type\":\"address[]\"},{\"internalType\":\"uint256[]\",\"name\":\"tokens\",\"type\":\"uint256[]\"}],\"name\":\"multiActivation\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"paused\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"vest\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"tokens\",\"type\":\"uint256\"}],\"name\":\"singleActivation\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"superAdmin\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"internalType\":\"uint8\",\"name\":\"index\",\"type\":\"uint8\"}],\"name\":\"unActivate\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"unActivateForAll\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}]","ContractName":"UFARMBeneficiaryBook","CompilerVersion":"v0.8.0+commit.c7dfd78e","OptimizationUsed":"1","Runs":"200","ConstructorArguments":"","EVMVersion":"Default","Library":"","LicenseType":"None","Proxy":"0","Implementation":"","SwarmSource":"ipfs://ba4f1b38327679f021460dfff8119eb0f2d2bee4d1ab721ef7c733272efd5866"}]}