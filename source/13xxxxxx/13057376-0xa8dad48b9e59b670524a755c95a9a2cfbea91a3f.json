{"status":"1","message":"OK","result":[{"SourceCode":"{{\r\n  \"language\": \"Solidity\",\r\n  \"sources\": {\r\n    \"contracts/liquidator/DutchAuctionLiquidator.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: AGPL-3.0\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"@openzeppelin/contracts/token/ERC721/IERC721.sol\\\";\\nimport \\\"@uniswap/v2-periphery/contracts/interfaces/IUniswapV2Router02.sol\\\";\\nimport \\\"@mochifi/library/contracts/Float.sol\\\";\\nimport \\\"@mochifi/library/contracts/BeaconProxyDeployer.sol\\\";\\nimport \\\"../interfaces/ILiquidator.sol\\\";\\nimport \\\"../interfaces/IMochiEngine.sol\\\";\\n\\ncontract DutchAuctionLiquidator is ILiquidator {\\n    using Float for uint256;\\n    IMochiEngine public immutable engine;\\n\\n    uint256 public constant DURATION = 2 days / 15;\\n\\n    struct Auction {\\n        uint256 nftId;\\n        address vault;\\n        uint256 startedAt;\\n        uint256 boughtAt;\\n        uint256 collateral;\\n        uint256 debt;\\n    }\\n\\n    mapping(uint256 => Auction) public auctions;\\n\\n    constructor(address _engine) {\\n        engine = IMochiEngine(_engine);\\n    }\\n\\n    function auctionId(address asset, uint256 nftId)\\n        public\\n        pure\\n        returns (uint256)\\n    {\\n        return uint256(keccak256(abi.encodePacked(asset, nftId)));\\n    }\\n\\n    function price(uint256 _auctionId) external view returns (uint256) {\\n        Auction memory auction = auctions[_auctionId];\\n        return auction.debt + currentLiquidationFee(_auctionId);\\n    }\\n\\n    function currentLiquidationFee(uint256 _auctionId)\\n        public\\n        view\\n        returns (uint256 liquidationFee)\\n    {\\n        Auction memory auction = auctions[_auctionId];\\n        liquidationFee = auction\\n            .debt\\n            .multiply(\\n                engine.mochiProfile().liquidationFee(\\n                    address(IMochiVault(auction.vault).asset())\\n                )\\n            )\\n            .multiply(\\n                float({\\n                    numerator: auction.startedAt + DURATION > block.number\\n                        ? auction.startedAt + DURATION - block.number\\n                        : 0,\\n                    denominator: DURATION\\n                })\\n            );\\n    }\\n\\n    function triggerLiquidation(address _asset, uint256 _nftId)\\n        external\\n        override\\n    {\\n        IMochiVault vault = engine.vaultFactory().getVault(_asset);\\n        Auction storage auction = auctions[auctionId(_asset, _nftId)];\\n        require(auction.startedAt == 0 || auction.boughtAt != 0, \\\"on going\\\");\\n        uint256 debt = vault.currentDebt(_nftId);\\n        (, uint256 collateral, , , ) = vault.details(_nftId);\\n\\n        vault.liquidate(_nftId, collateral, debt);\\n\\n        auction.nftId = _nftId;\\n        auction.vault = address(vault);\\n        auction.startedAt = block.number;\\n        auction.boughtAt = 0;\\n        auction.collateral = collateral;\\n        auction.debt = debt;\\n\\n        uint256 liquidationFee = debt.multiply(\\n            engine.mochiProfile().liquidationFee(address(_asset))\\n        );\\n        emit Triggered(auctionId(_asset, _nftId), debt + liquidationFee);\\n    }\\n\\n    function settleLiquidation(\\n        uint256 _auctionId,\\n        uint256 _collateral,\\n        uint256 _repaid\\n    ) internal {\\n        Auction storage auction = auctions[_auctionId];\\n        require(auction.boughtAt == 0, \\\"liquidated\\\");\\n        IMochiVault vault = IMochiVault(auction.vault);\\n        //repay the debt first\\n        engine.usdm().transferFrom(msg.sender, address(this), _repaid);\\n        engine.usdm().burn(_repaid);\\n        IERC20 asset = vault.asset();\\n        auction.boughtAt = block.number;\\n        asset.transfer(msg.sender, _collateral);\\n        //transfer liquidation fee to feePool\\n        uint256 liquidationFee = currentLiquidationFee(_auctionId);\\n        engine.usdm().transferFrom(\\n            msg.sender,\\n            address(engine.feePool()),\\n            liquidationFee\\n        );\\n\\n        emit Settled(_auctionId, _repaid + liquidationFee);\\n    }\\n\\n    function buy(uint256 _auctionId) external {\\n        Auction memory auction = auctions[_auctionId];\\n        require(auction.startedAt != 0 && auction.boughtAt == 0, \\\"!on going\\\");\\n        settleLiquidation(_auctionId, auction.collateral, auction.debt);\\n    }\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/token/ERC721/IERC721.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../../utils/introspection/IERC165.sol\\\";\\n\\n/**\\n * @dev Required interface of an ERC721 compliant contract.\\n */\\ninterface IERC721 is IERC165 {\\n    /**\\n     * @dev Emitted when `tokenId` token is transferred from `from` to `to`.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 indexed tokenId);\\n\\n    /**\\n     * @dev Emitted when `owner` enables `approved` to manage the `tokenId` token.\\n     */\\n    event Approval(address indexed owner, address indexed approved, uint256 indexed tokenId);\\n\\n    /**\\n     * @dev Emitted when `owner` enables or disables (`approved`) `operator` to manage all of its assets.\\n     */\\n    event ApprovalForAll(address indexed owner, address indexed operator, bool approved);\\n\\n    /**\\n     * @dev Returns the number of tokens in ``owner``'s account.\\n     */\\n    function balanceOf(address owner) external view returns (uint256 balance);\\n\\n    /**\\n     * @dev Returns the owner of the `tokenId` token.\\n     *\\n     * Requirements:\\n     *\\n     * - `tokenId` must exist.\\n     */\\n    function ownerOf(uint256 tokenId) external view returns (address owner);\\n\\n    /**\\n     * @dev Safely transfers `tokenId` token from `from` to `to`, checking first that contract recipients\\n     * are aware of the ERC721 protocol to prevent tokens from being forever locked.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` cannot be the zero address.\\n     * - `to` cannot be the zero address.\\n     * - `tokenId` token must exist and be owned by `from`.\\n     * - If the caller is not `from`, it must be have been allowed to move this token by either {approve} or {setApprovalForAll}.\\n     * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function safeTransferFrom(\\n        address from,\\n        address to,\\n        uint256 tokenId\\n    ) external;\\n\\n    /**\\n     * @dev Transfers `tokenId` token from `from` to `to`.\\n     *\\n     * WARNING: Usage of this method is discouraged, use {safeTransferFrom} whenever possible.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` cannot be the zero address.\\n     * - `to` cannot be the zero address.\\n     * - `tokenId` token must be owned by `from`.\\n     * - If the caller is not `from`, it must be approved to move this token by either {approve} or {setApprovalForAll}.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(\\n        address from,\\n        address to,\\n        uint256 tokenId\\n    ) external;\\n\\n    /**\\n     * @dev Gives permission to `to` to transfer `tokenId` token to another account.\\n     * The approval is cleared when the token is transferred.\\n     *\\n     * Only a single account can be approved at a time, so approving the zero address clears previous approvals.\\n     *\\n     * Requirements:\\n     *\\n     * - The caller must own the token or be an approved operator.\\n     * - `tokenId` must exist.\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address to, uint256 tokenId) external;\\n\\n    /**\\n     * @dev Returns the account approved for `tokenId` token.\\n     *\\n     * Requirements:\\n     *\\n     * - `tokenId` must exist.\\n     */\\n    function getApproved(uint256 tokenId) external view returns (address operator);\\n\\n    /**\\n     * @dev Approve or remove `operator` as an operator for the caller.\\n     * Operators can call {transferFrom} or {safeTransferFrom} for any token owned by the caller.\\n     *\\n     * Requirements:\\n     *\\n     * - The `operator` cannot be the caller.\\n     *\\n     * Emits an {ApprovalForAll} event.\\n     */\\n    function setApprovalForAll(address operator, bool _approved) external;\\n\\n    /**\\n     * @dev Returns if the `operator` is allowed to manage all of the assets of `owner`.\\n     *\\n     * See {setApprovalForAll}\\n     */\\n    function isApprovedForAll(address owner, address operator) external view returns (bool);\\n\\n    /**\\n     * @dev Safely transfers `tokenId` token from `from` to `to`.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` cannot be the zero address.\\n     * - `to` cannot be the zero address.\\n     * - `tokenId` token must exist and be owned by `from`.\\n     * - If the caller is not `from`, it must be approved to move this token by either {approve} or {setApprovalForAll}.\\n     * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function safeTransferFrom(\\n        address from,\\n        address to,\\n        uint256 tokenId,\\n        bytes calldata data\\n    ) external;\\n}\\n\"\r\n    },\r\n    \"@uniswap/v2-periphery/contracts/interfaces/IUniswapV2Router02.sol\": {\r\n      \"content\": \"pragma solidity >=0.6.2;\\n\\nimport './IUniswapV2Router01.sol';\\n\\ninterface IUniswapV2Router02 is IUniswapV2Router01 {\\n    function removeLiquidityETHSupportingFeeOnTransferTokens(\\n        address token,\\n        uint liquidity,\\n        uint amountTokenMin,\\n        uint amountETHMin,\\n        address to,\\n        uint deadline\\n    ) external returns (uint amountETH);\\n    function removeLiquidityETHWithPermitSupportingFeeOnTransferTokens(\\n        address token,\\n        uint liquidity,\\n        uint amountTokenMin,\\n        uint amountETHMin,\\n        address to,\\n        uint deadline,\\n        bool approveMax, uint8 v, bytes32 r, bytes32 s\\n    ) external returns (uint amountETH);\\n\\n    function swapExactTokensForTokensSupportingFeeOnTransferTokens(\\n        uint amountIn,\\n        uint amountOutMin,\\n        address[] calldata path,\\n        address to,\\n        uint deadline\\n    ) external;\\n    function swapExactETHForTokensSupportingFeeOnTransferTokens(\\n        uint amountOutMin,\\n        address[] calldata path,\\n        address to,\\n        uint deadline\\n    ) external payable;\\n    function swapExactTokensForETHSupportingFeeOnTransferTokens(\\n        uint amountIn,\\n        uint amountOutMin,\\n        address[] calldata path,\\n        address to,\\n        uint deadline\\n    ) external;\\n}\\n\"\r\n    },\r\n    \"@mochifi/library/contracts/Float.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: AGPL-3.0\\n\\npragma solidity ^0.8.0;\\n\\nstruct float {\\n    uint256 numerator;\\n    uint256 denominator;\\n}\\n\\nlibrary Float {\\n    function multiply(uint256 a, float memory f) internal pure returns(uint256) {\\n        require(f.denominator != 0, \\\"div 0\\\");\\n        return a * f.numerator / f.denominator;\\n    }\\n\\n    function inverse(float memory f) internal pure returns(float memory) {\\n        require(f.numerator != 0 && f.denominator != 0, \\\"div 0\\\");\\n        return float({\\n            numerator: f.denominator,\\n            denominator: f.numerator\\n        });\\n    }\\n\\n    function divide(uint256 a, float memory f) internal pure returns(uint256) {\\n        require(f.denominator != 0, \\\"div 0\\\");\\n        return a * f.denominator / f.numerator;\\n    }\\n\\n    function add(float memory a, float memory b) internal pure returns(float memory res) {\\n        require(a.denominator != 0 && b.denominator != 0, \\\"div 0\\\");\\n        res = float({\\n            numerator : a.numerator*b.denominator + a.denominator*b.numerator,\\n            denominator : a.denominator*b.denominator\\n        });\\n        if(res.numerator > 2**128 && res.denominator > 2**128){\\n            res.numerator = res.numerator / 2**64;\\n            res.denominator = res.denominator / 2**64;\\n        }\\n    }\\n    \\n    function sub(float memory a, float memory b) internal pure returns(float memory res) {\\n        require(a.denominator != 0 && b.denominator != 0, \\\"div 0\\\");\\n        res = float({\\n            numerator : a.numerator*b.denominator - b.numerator*a.denominator,\\n            denominator : a.denominator*b.denominator\\n        });\\n        if(res.numerator > 2**128 && res.denominator > 2**128){\\n            res.numerator = res.numerator / 2**64;\\n            res.denominator = res.denominator / 2**64;\\n        }\\n    }\\n\\n    function mul(float memory a, float memory b) internal pure returns(float memory res) {\\n        require(a.denominator != 0 && b.denominator != 0, \\\"div 0\\\");\\n        res = float({\\n            numerator : a.numerator * b.numerator,\\n            denominator : a.denominator * b.denominator\\n        });\\n        if(res.numerator > 2**128 && res.denominator > 2**128){\\n            res.numerator = res.numerator / 2**64;\\n            res.denominator = res.denominator / 2**64;\\n        }\\n    }\\n\\n    function gt(float memory a, float memory b) internal pure returns(bool) {\\n        require(a.denominator != 0 && b.denominator != 0, \\\"div 0\\\");\\n        return a.numerator * b.denominator > a.denominator * b.numerator;\\n    }\\n\\n    function lt(float memory a, float memory b) internal pure returns(bool) {\\n        require(a.denominator != 0 && b.denominator != 0, \\\"div 0\\\");\\n        return a.numerator * b.denominator < a.denominator * b.numerator;\\n    }\\n\\n    function gte(float memory a, float memory b) internal pure returns(bool) {\\n        require(a.denominator != 0 && b.denominator != 0, \\\"div 0\\\");\\n        return a.numerator * b.denominator >= a.denominator * b.numerator;\\n    }\\n\\n    function lte(float memory a, float memory b) internal pure returns(bool) {\\n        require(a.denominator != 0 && b.denominator != 0, \\\"div 0\\\");\\n        return a.numerator * b.denominator <= a.denominator * b.numerator;\\n    }\\n\\n    function equals(float memory a, float memory b) internal pure returns(bool) {\\n        require(a.denominator != 0 && b.denominator != 0, \\\"div 0\\\");\\n        return a.numerator * b.denominator == b.numerator * a.denominator;\\n    }\\n}\\n\"\r\n    },\r\n    \"@mochifi/library/contracts/BeaconProxyDeployer.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: AGPL-3.0\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"./Create2BeaconMaker.sol\\\";\\nlibrary BeaconProxyDeployer {\\n    function deploy(address beacon, bytes memory initializationCalldata)\\n        internal\\n        returns (address result)\\n    {\\n        bytes memory createCode =\\n            abi.encodePacked(\\n                type(Create2BeaconMaker).creationCode,\\n                abi.encode(address(beacon), initializationCalldata)\\n            );\\n        bytes32 salt = bytes32(0);\\n\\n        // solhint-disable-next-line no-inline-assembly\\n        assembly {\\n            let encoded_data := add(0x20, createCode) // load initialization code.\\n            let encoded_size := mload(createCode) // load the init code's length.\\n            result := create2(\\n                // call `CREATE2` w/ 4 arguments.\\n                0, // forward any supplied endowment.\\n                encoded_data, // pass in initialization code.\\n                encoded_size, // pass in init code's length.\\n                salt // pass in the salt value.\\n            )\\n\\n            // pass along failure message from failed contract deployment and revert.\\n            if iszero(result) {\\n                returndatacopy(0, 0, returndatasize())\\n                revert(0, returndatasize())\\n            }\\n        }\\n    }\\n\\n    function calculateAddress(\\n        address deployer,\\n        address beacon,\\n        bytes memory initializationCalldata\\n    ) internal view returns (address addr) {\\n        bytes memory createCode =\\n            abi.encodePacked(\\n                type(Create2BeaconMaker).creationCode,\\n                abi.encode(address(beacon), initializationCalldata)\\n            );\\n\\n        bytes32 salt = bytes32(0);\\n        // get the keccak256 hash of the init code for address derivation.\\n        bytes32 initCodeHash = keccak256(createCode);\\n        addr = address( // derive the target deployment address.\\n            uint160( // downcast to match the address type.\\n                uint256( // cast to uint to truncate upper digits.\\n                    keccak256( // compute CREATE2 hash using 4 inputs.\\n                        abi.encodePacked( // pack all inputs to the hash together.\\n                            bytes1(0xff), // pass in the control character.\\n                            deployer, // pass in the address of this contract.\\n                            salt, // pass in the salt from above.\\n                            initCodeHash // pass in hash of contract creation code.\\n                        )\\n                    )\\n                )\\n            )\\n        );\\n    }\\n}\\n\"\r\n    },\r\n    \"contracts/interfaces/ILiquidator.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: AGPL-3.0\\n\\npragma solidity ^0.8.0;\\n\\ninterface ILiquidator {\\n    event Triggered(uint256 _auctionId, uint256 _price);\\n    event Settled(uint256 _auctionId, uint256 _price);\\n\\n    function triggerLiquidation(address _asset, uint256 _nftId) external;\\n}\\n\"\r\n    },\r\n    \"contracts/interfaces/IMochiEngine.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: AGPL-3.0\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"@mochifi/vmochi/contracts/interfaces/IVMochi.sol\\\";\\nimport \\\"@mochifi/cssr/contracts/interfaces/ICSSRRouter.sol\\\";\\nimport \\\"./IMochiProfile.sol\\\";\\nimport \\\"./IDiscountProfile.sol\\\";\\nimport \\\"./IMochiVault.sol\\\";\\nimport \\\"./IFeePool.sol\\\";\\nimport \\\"./IReferralFeePool.sol\\\";\\nimport \\\"./ILiquidator.sol\\\";\\nimport \\\"./IUSDM.sol\\\";\\nimport \\\"./IMochi.sol\\\";\\nimport \\\"./IMinter.sol\\\";\\nimport \\\"./IMochiNFT.sol\\\";\\nimport \\\"./IMochiVaultFactory.sol\\\";\\n\\ninterface IMochiEngine {\\n    function mochi() external view returns (IMochi);\\n\\n    function vMochi() external view returns (IVMochi);\\n\\n    function usdm() external view returns (IUSDM);\\n\\n    function cssr() external view returns (ICSSRRouter);\\n\\n    function governance() external view returns (address);\\n\\n    function treasury() external view returns (address);\\n\\n    function operationWallet() external view returns (address);\\n\\n    function mochiProfile() external view returns (IMochiProfile);\\n\\n    function discountProfile() external view returns (IDiscountProfile);\\n\\n    function feePool() external view returns (IFeePool);\\n\\n    function referralFeePool() external view returns (IReferralFeePool);\\n\\n    function liquidator() external view returns (ILiquidator);\\n\\n    function minter() external view returns (IMinter);\\n\\n    function nft() external view returns (IMochiNFT);\\n\\n    function vaultFactory() external view returns (IMochiVaultFactory);\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/utils/introspection/IERC165.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC165 standard, as defined in the\\n * https://eips.ethereum.org/EIPS/eip-165[EIP].\\n *\\n * Implementers can declare support of contract interfaces, which can then be\\n * queried by others ({ERC165Checker}).\\n *\\n * For an implementation, see {ERC165}.\\n */\\ninterface IERC165 {\\n    /**\\n     * @dev Returns true if this contract implements the interface defined by\\n     * `interfaceId`. See the corresponding\\n     * https://eips.ethereum.org/EIPS/eip-165#how-interfaces-are-identified[EIP section]\\n     * to learn more about how these ids are created.\\n     *\\n     * This function call must use less than 30 000 gas.\\n     */\\n    function supportsInterface(bytes4 interfaceId) external view returns (bool);\\n}\\n\"\r\n    },\r\n    \"@uniswap/v2-periphery/contracts/interfaces/IUniswapV2Router01.sol\": {\r\n      \"content\": \"pragma solidity >=0.6.2;\\n\\ninterface IUniswapV2Router01 {\\n    function factory() external pure returns (address);\\n    function WETH() external pure returns (address);\\n\\n    function addLiquidity(\\n        address tokenA,\\n        address tokenB,\\n        uint amountADesired,\\n        uint amountBDesired,\\n        uint amountAMin,\\n        uint amountBMin,\\n        address to,\\n        uint deadline\\n    ) external returns (uint amountA, uint amountB, uint liquidity);\\n    function addLiquidityETH(\\n        address token,\\n        uint amountTokenDesired,\\n        uint amountTokenMin,\\n        uint amountETHMin,\\n        address to,\\n        uint deadline\\n    ) external payable returns (uint amountToken, uint amountETH, uint liquidity);\\n    function removeLiquidity(\\n        address tokenA,\\n        address tokenB,\\n        uint liquidity,\\n        uint amountAMin,\\n        uint amountBMin,\\n        address to,\\n        uint deadline\\n    ) external returns (uint amountA, uint amountB);\\n    function removeLiquidityETH(\\n        address token,\\n        uint liquidity,\\n        uint amountTokenMin,\\n        uint amountETHMin,\\n        address to,\\n        uint deadline\\n    ) external returns (uint amountToken, uint amountETH);\\n    function removeLiquidityWithPermit(\\n        address tokenA,\\n        address tokenB,\\n        uint liquidity,\\n        uint amountAMin,\\n        uint amountBMin,\\n        address to,\\n        uint deadline,\\n        bool approveMax, uint8 v, bytes32 r, bytes32 s\\n    ) external returns (uint amountA, uint amountB);\\n    function removeLiquidityETHWithPermit(\\n        address token,\\n        uint liquidity,\\n        uint amountTokenMin,\\n        uint amountETHMin,\\n        address to,\\n        uint deadline,\\n        bool approveMax, uint8 v, bytes32 r, bytes32 s\\n    ) external returns (uint amountToken, uint amountETH);\\n    function swapExactTokensForTokens(\\n        uint amountIn,\\n        uint amountOutMin,\\n        address[] calldata path,\\n        address to,\\n        uint deadline\\n    ) external returns (uint[] memory amounts);\\n    function swapTokensForExactTokens(\\n        uint amountOut,\\n        uint amountInMax,\\n        address[] calldata path,\\n        address to,\\n        uint deadline\\n    ) external returns (uint[] memory amounts);\\n    function swapExactETHForTokens(uint amountOutMin, address[] calldata path, address to, uint deadline)\\n        external\\n        payable\\n        returns (uint[] memory amounts);\\n    function swapTokensForExactETH(uint amountOut, uint amountInMax, address[] calldata path, address to, uint deadline)\\n        external\\n        returns (uint[] memory amounts);\\n    function swapExactTokensForETH(uint amountIn, uint amountOutMin, address[] calldata path, address to, uint deadline)\\n        external\\n        returns (uint[] memory amounts);\\n    function swapETHForExactTokens(uint amountOut, address[] calldata path, address to, uint deadline)\\n        external\\n        payable\\n        returns (uint[] memory amounts);\\n\\n    function quote(uint amountA, uint reserveA, uint reserveB) external pure returns (uint amountB);\\n    function getAmountOut(uint amountIn, uint reserveIn, uint reserveOut) external pure returns (uint amountOut);\\n    function getAmountIn(uint amountOut, uint reserveIn, uint reserveOut) external pure returns (uint amountIn);\\n    function getAmountsOut(uint amountIn, address[] calldata path) external view returns (uint[] memory amounts);\\n    function getAmountsIn(uint amountOut, address[] calldata path) external view returns (uint[] memory amounts);\\n}\\n\"\r\n    },\r\n    \"@mochifi/library/contracts/Create2BeaconMaker.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: AGPL-3.0\\n\\npragma solidity ^0.8.0;\\n\\ncontract Create2BeaconMaker {\\n    constructor(address beacon, bytes memory initializationCalldata)\\n        payable\\n    {\\n        (, bytes memory returnData) = beacon.staticcall(\\\"\\\");\\n        address template = abi.decode(returnData, (address));\\n        // solhint-disable-next-line avoid-low-level-calls\\n        (bool success, ) = template.delegatecall(initializationCalldata);\\n        if (!success) {\\n            // pass along failure message from delegatecall and revert.\\n            // solhint-disable-next-line no-inline-assembly\\n            assembly {\\n                returndatacopy(0, 0, returndatasize())\\n                revert(0, returndatasize())\\n            }\\n        }\\n\\n        // place eip-1167 runtime code in memory.\\n        bytes memory runtimeCode =\\n            abi.encodePacked(\\n                bytes6(0x3d3d3d3d3d73),\\n                beacon,\\n                bytes32(0x5afa3d82803e368260203750808036602082515af43d82803e903d91603a57fd),\\n                bytes2(0x5bf3)\\n            );\\n\\n        // return Beacon Minimal Proxy code to write it to spawned contract runtime.\\n        // solhint-disable-next-line no-inline-assembly\\n        assembly {\\n            return(add(0x20, runtimeCode), 60) // Beacon Minimal Proxy runtime code, length\\n        }\\n    }\\n}\\n\"\r\n    },\r\n    \"@mochifi/vmochi/contracts/interfaces/IVMochi.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: AGPL-3.0\\n\\npragma solidity ^0.8.0;\\n\\ninterface IVMochi {\\n    function locked(address _user) external view returns(int128, uint256);\\n    function depositFor(address _user, uint256 _amount) external;\\n    function balanceOf(address _user) external view returns(uint256);\\n}\\n\"\r\n    },\r\n    \"@mochifi/cssr/contracts/interfaces/ICSSRRouter.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"@mochifi/library/contracts/Float.sol\\\";\\n\\ninterface ICSSRRouter {\\n    function update(address _asset, bytes memory _data)\\n        external\\n        returns (float memory);\\n\\n    function getPrice(address _asset) external view returns (float memory);\\n\\n    function getLiquidity(address _asset) external view returns (uint256);\\n}\\n\"\r\n    },\r\n    \"contracts/interfaces/IMochiProfile.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: AGPL-3.0\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"@mochifi/library/contracts/Float.sol\\\";\\n\\nenum AssetClass {\\n    Invalid,\\n    Stable,\\n    Alpha,\\n    Gamma,\\n    Delta,\\n    Zeta,\\n    Sigma,\\n    Revoked\\n}\\n\\ninterface IMochiProfile {\\n    function assetClass(address _asset) external view returns (AssetClass);\\n\\n    function liquidityRequirement() external view returns (uint256);\\n\\n    function minimumDebt() external view returns (uint256);\\n\\n    function changeAssetClass(\\n        address[] calldata _asset,\\n        AssetClass[] calldata _class\\n    ) external;\\n\\n    function changeLiquidityRequirement(uint256 _requirement) external;\\n\\n    function changeMinimumDebt(uint256 _debt) external;\\n\\n    function calculateFeeIndex(\\n        address _asset,\\n        uint256 _currentIndex,\\n        uint256 _lastAccrued\\n    ) external view returns (uint256);\\n\\n    function creditCap(address _asset) external view returns (uint256);\\n\\n    function delay() external view returns (uint256);\\n\\n    function liquidationFactor(address _asset)\\n        external\\n        view\\n        returns (float memory);\\n\\n    function maxCollateralFactor(address _asset)\\n        external\\n        view\\n        returns (float memory);\\n\\n    function stabilityFee(address _asset) external view returns (float memory);\\n\\n    function liquidationFee(address _asset)\\n        external\\n        view\\n        returns (float memory);\\n\\n    function keeperFee(address _asset) external view returns (float memory);\\n\\n    function utilizationRatio(address _asset)\\n        external\\n        view\\n        returns (float memory);\\n}\\n\"\r\n    },\r\n    \"contracts/interfaces/IDiscountProfile.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: AGPL-3.0\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"@mochifi/library/contracts/Float.sol\\\";\\n\\ninterface IDiscountProfile {\\n    function discount(address _user) external view returns (float memory);\\n}\\n\"\r\n    },\r\n    \"contracts/interfaces/IMochiVault.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: AGPL-3.0\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"@openzeppelin/contracts/token/ERC20/IERC20.sol\\\";\\nstruct Detail {\\n    Status status;\\n    uint256 collateral;\\n    uint256 debt;\\n    uint256 debtIndex;\\n    address referrer;\\n}\\n\\nenum Status {\\n    Invalid, // not minted\\n    Idle, // debt = 0, collateral = 0\\n    Collaterized, // debt = 0, collateral > 0\\n    Active, // debt > 0, collateral > 0\\n    Liquidated\\n}\\n\\ninterface IMochiVault {\\n    function liveDebtIndex() external view returns (uint256);\\n\\n    function details(uint256 _nftId)\\n        external\\n        view\\n        returns (\\n            Status,\\n            uint256 collateral,\\n            uint256 debt,\\n            uint256 debtIndexe,\\n            address refferer\\n        );\\n\\n    function status(uint256 _nftId) external view returns (Status);\\n\\n    function asset() external view returns (IERC20);\\n\\n    function deposits() external view returns (uint256);\\n\\n    function debts() external view returns (uint256);\\n\\n    function claimable() external view returns (int256);\\n\\n    function currentDebt(uint256 _nftId) external view returns (uint256);\\n\\n    function initialize(address _asset) external;\\n\\n    function deposit(uint256 _nftId, uint256 _amount) external;\\n\\n    function withdraw(\\n        uint256 _nftId,\\n        uint256 _amount,\\n        bytes memory _data\\n    ) external;\\n\\n    function borrow(\\n        uint256 _nftId,\\n        uint256 _amount,\\n        bytes memory _data\\n    ) external;\\n\\n    function repay(uint256 _nftId, uint256 _amount) external;\\n\\n    function liquidate(\\n        uint256 _nftId,\\n        uint256 _collateral,\\n        uint256 _usdm\\n    ) external;\\n}\\n\"\r\n    },\r\n    \"contracts/interfaces/IFeePool.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: AGPL-3.0\\n\\npragma solidity ^0.8.0;\\n\\ninterface IFeePool {\\n    function updateReserve() external;\\n}\\n\"\r\n    },\r\n    \"contracts/interfaces/IReferralFeePool.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: AGPL-3.0\\n\\npragma solidity ^0.8.0;\\n\\ninterface IReferralFeePool {\\n    function addReward(address _recipient) external;\\n}\\n\"\r\n    },\r\n    \"contracts/interfaces/IUSDM.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: AGPL-3.0\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"@openzeppelin/contracts/token/ERC20/IERC20.sol\\\";\\nimport \\\"./IERC3156FlashLender.sol\\\";\\n\\ninterface IUSDM is IERC20, IERC3156FlashLender {\\n    function mint(address _recipient, uint256 _amount) external;\\n\\n    function burn(uint256 _amount) external;\\n}\\n\"\r\n    },\r\n    \"contracts/interfaces/IMochi.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: AGPL-3.0\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"@openzeppelin/contracts/token/ERC20/IERC20.sol\\\";\\n\\ninterface IMochi is IERC20 {}\\n\"\r\n    },\r\n    \"contracts/interfaces/IMinter.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: AGPL-3.0\\n\\npragma solidity ^0.8.0;\\n\\ninterface IMinter {\\n    function mint(address _to, uint256 _amount) external;\\n\\n    function hasPermission(address _user) external view returns (bool);\\n}\\n\"\r\n    },\r\n    \"contracts/interfaces/IMochiNFT.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: AGPL-3.0\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"@openzeppelin/contracts/token/ERC721/extensions/IERC721Enumerable.sol\\\";\\n\\ninterface IMochiNFT is IERC721Enumerable {\\n    struct MochiInfo {\\n        address asset;\\n    }\\n\\n    function asset(uint256 _id) external view returns (address);\\n\\n    function mint(address _asset, address _owner) external returns (uint256);\\n}\\n\"\r\n    },\r\n    \"contracts/interfaces/IMochiVaultFactory.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: AGPL-3.0\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"./IMochiVault.sol\\\";\\n\\ninterface IMochiVaultFactory {\\n    function updateTemplate(address _template) external;\\n\\n    function deployVault(address _asset) external returns (IMochiVault);\\n\\n    function getVault(address _asset) external view returns (IMochiVault);\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/token/ERC20/IERC20.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC20 standard as defined in the EIP.\\n */\\ninterface IERC20 {\\n    /**\\n     * @dev Returns the amount of tokens in existence.\\n     */\\n    function totalSupply() external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the amount of tokens owned by `account`.\\n     */\\n    function balanceOf(address account) external view returns (uint256);\\n\\n    /**\\n     * @dev Moves `amount` tokens from the caller's account to `recipient`.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transfer(address recipient, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Returns the remaining number of tokens that `spender` will be\\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\\n     * zero by default.\\n     *\\n     * This value changes when {approve} or {transferFrom} are called.\\n     */\\n    function allowance(address owner, address spender) external view returns (uint256);\\n\\n    /**\\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\\n     * that someone may use both the old and the new allowance by unfortunate\\n     * transaction ordering. One possible solution to mitigate this race\\n     * condition is to first reduce the spender's allowance to 0 and set the\\n     * desired value afterwards:\\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address spender, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Moves `amount` tokens from `sender` to `recipient` using the\\n     * allowance mechanism. `amount` is then deducted from the caller's\\n     * allowance.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(\\n        address sender,\\n        address recipient,\\n        uint256 amount\\n    ) external returns (bool);\\n\\n    /**\\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\\n     * another (`to`).\\n     *\\n     * Note that `value` may be zero.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 value);\\n\\n    /**\\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\\n     * a call to {approve}. `value` is the new allowance.\\n     */\\n    event Approval(address indexed owner, address indexed spender, uint256 value);\\n}\\n\"\r\n    },\r\n    \"contracts/interfaces/IERC3156FlashLender.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: AGPL-3.0\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"./IERC3156FlashBorrower.sol\\\";\\n\\ninterface IERC3156FlashLender {\\n    /**\\n     * @dev The amount of currency available to be lent.\\n     * @param token The loan currency.\\n     * @return The amount of `token` that can be borrowed.\\n     */\\n    function maxFlashLoan(address token) external view returns (uint256);\\n\\n    /**\\n     * @dev The fee to be charged for a given loan.\\n     * @param token The loan currency.\\n     * @param amount The amount of tokens lent.\\n     * @return The amount of `token` to be charged for the loan, on top of the returned principal.\\n     */\\n    function flashFee(address token, uint256 amount)\\n        external\\n        view\\n        returns (uint256);\\n\\n    /**\\n     * @dev Initiate a flash loan.\\n     * @param receiver The receiver of the tokens in the loan, and the receiver of the callback.\\n     * @param token The loan currency.\\n     * @param amount The amount of tokens lent.\\n     * @param data Arbitrary data structure, intended to contain user-defined parameters.\\n     */\\n    function flashLoan(\\n        IERC3156FlashBorrower receiver,\\n        address token,\\n        uint256 amount,\\n        bytes calldata data\\n    ) external returns (bool);\\n}\\n\"\r\n    },\r\n    \"contracts/interfaces/IERC3156FlashBorrower.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: AGPL-3.0\\n\\npragma solidity ^0.8.0;\\n\\ninterface IERC3156FlashBorrower {\\n    /**\\n     * @dev Receive a flash loan.\\n     * @param initiator The initiator of the loan.\\n     * @param token The loan currency.\\n     * @param amount The amount of tokens lent.\\n     * @param fee The additional amount of tokens to repay.\\n     * @param data Arbitrary data structure, intended to contain user-defined parameters.\\n     * @return The keccak256 hash of \\\"ERC3156FlashBorrower.onFlashLoan\\\"\\n     */\\n    function onFlashLoan(\\n        address initiator,\\n        address token,\\n        uint256 amount,\\n        uint256 fee,\\n        bytes calldata data\\n    ) external returns (bytes32);\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/token/ERC721/extensions/IERC721Enumerable.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../IERC721.sol\\\";\\n\\n/**\\n * @title ERC-721 Non-Fungible Token Standard, optional enumeration extension\\n * @dev See https://eips.ethereum.org/EIPS/eip-721\\n */\\ninterface IERC721Enumerable is IERC721 {\\n    /**\\n     * @dev Returns the total amount of tokens stored by the contract.\\n     */\\n    function totalSupply() external view returns (uint256);\\n\\n    /**\\n     * @dev Returns a token ID owned by `owner` at a given `index` of its token list.\\n     * Use along with {balanceOf} to enumerate all of ``owner``'s tokens.\\n     */\\n    function tokenOfOwnerByIndex(address owner, uint256 index) external view returns (uint256 tokenId);\\n\\n    /**\\n     * @dev Returns a token ID at a given `index` of all the tokens stored by the contract.\\n     * Use along with {totalSupply} to enumerate all tokens.\\n     */\\n    function tokenByIndex(uint256 index) external view returns (uint256);\\n}\\n\"\r\n    }\r\n  },\r\n  \"settings\": {\r\n    \"optimizer\": {\r\n      \"enabled\": true,\r\n      \"runs\": 200\r\n    },\r\n    \"metadata\": {\r\n      \"bytecodeHash\": \"none\"\r\n    },\r\n    \"outputSelection\": {\r\n      \"*\": {\r\n        \"*\": [\r\n          \"evm.bytecode\",\r\n          \"evm.deployedBytecode\",\r\n          \"abi\"\r\n        ]\r\n      }\r\n    },\r\n    \"libraries\": {}\r\n  }\r\n}}","ABI":"[{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_engine\",\"type\":\"address\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"_auctionId\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"_price\",\"type\":\"uint256\"}],\"name\":\"Settled\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"_auctionId\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"_price\",\"type\":\"uint256\"}],\"name\":\"Triggered\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"DURATION\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"asset\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"nftId\",\"type\":\"uint256\"}],\"name\":\"auctionId\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"auctions\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"nftId\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"vault\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"startedAt\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"boughtAt\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"collateral\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"debt\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_auctionId\",\"type\":\"uint256\"}],\"name\":\"buy\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_auctionId\",\"type\":\"uint256\"}],\"name\":\"currentLiquidationFee\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"liquidationFee\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"engine\",\"outputs\":[{\"internalType\":\"contract IMochiEngine\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_auctionId\",\"type\":\"uint256\"}],\"name\":\"price\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_asset\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_nftId\",\"type\":\"uint256\"}],\"name\":\"triggerLiquidation\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}]","ContractName":"DutchAuctionLiquidator","CompilerVersion":"v0.8.7+commit.e28d00a7","OptimizationUsed":"1","Runs":"200","ConstructorArguments":"000000000000000000000000860e47e6d6f4a6bcaaddfc7f17f772d2ab55be2f","EVMVersion":"Default","Library":"","LicenseType":"","Proxy":"0","Implementation":"","SwarmSource":""}]}