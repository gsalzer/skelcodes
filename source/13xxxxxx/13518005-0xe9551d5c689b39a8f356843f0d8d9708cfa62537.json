{"status":"1","message":"OK","result":[{"SourceCode":"{{\r\n  \"language\": \"Solidity\",\r\n  \"sources\": {\r\n    \"/contracts/TSCPool.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: UNLICENSED\\r\\npragma solidity ^0.8.0;\\r\\npragma experimental ABIEncoderV2;\\r\\n\\r\\nimport \\\"@openzeppelin/contracts/access/Ownable.sol\\\";\\r\\nimport \\\"./TSC.sol\\\";\\r\\n\\r\\ncontract TscPool is Ownable {\\r\\n    event Created(address indexed _creator, address _contracts);\\r\\n    event AddTokenOptions(address[] _tokenOptions);\\r\\n    event RemoveTokenOptions(address _token);\\r\\n\\r\\n    mapping(address => bool) public tokenOptions;\\r\\n\\r\\n    function setTokenOptions(address[] memory _tokenOptions) public onlyOwner {\\r\\n        for (uint256 i = 0; i < _tokenOptions.length; i++) {\\r\\n            tokenOptions[_tokenOptions[i]] = true;\\r\\n        }\\r\\n        emit AddTokenOptions(_tokenOptions);\\r\\n    }\\r\\n\\r\\n    function removeTokenOption(address _token) public {\\r\\n        require(tokenOptions[_token], \\\"TSCPool: This token is not on the list\\\");\\r\\n        tokenOptions[_token] = false;\\r\\n        emit RemoveTokenOptions(_token);\\r\\n    }\\r\\n\\r\\n    function checkTokenOption(address _token) public view returns (bool) {\\r\\n        return tokenOptions[_token];\\r\\n    }\\r\\n\\r\\n    function create() external returns (address) {\\r\\n        TSC contracts = new TSC(address(this));\\r\\n        contracts.transferOwnership(msg.sender);\\r\\n        emit Created(msg.sender, address(contracts));\\r\\n        return address(contracts);\\r\\n    }\\r\\n}\\r\\n\"\r\n    },\r\n    \"/contracts/interface/ITSCPool.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: UNLICENSED\\r\\npragma solidity ^0.8.0;\\r\\n\\r\\ninterface ITSCPool {\\r\\n    function checkTokenOption(address _token) external view returns (bool);\\r\\n\\r\\n    function getFee() external view returns (uint256);\\r\\n\\r\\n    function calculateFee(address _sender) external returns (uint256);\\r\\n}\\r\\n\"\r\n    },\r\n    \"/contracts/interface/IExecute.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: UNLICENSED\\r\\npragma solidity ^0.8.0;\\r\\n\\r\\ninterface IExecute {\\r\\n    function execute() external returns(bool success);\\r\\n\\r\\n    function revert() external returns(bool success);\\r\\n}\\r\\n\"\r\n    },\r\n    \"/contracts/TerminateContractTemplate.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: UNLICENSED\\r\\npragma solidity ^0.8.0;\\r\\n\\r\\nimport \\\"@openzeppelin/contracts/access/Ownable.sol\\\";\\r\\n\\r\\ncontract TerminateContractTemplate is Ownable {\\r\\n    uint256 public expiration;\\r\\n\\r\\n    constructor() {}\\r\\n\\r\\n    function setExpiration(uint256 _expiration) public virtual onlyOwner {\\r\\n        expiration = _expiration;\\r\\n    }\\r\\n\\r\\n    function terminate() public virtual onlyOwner isOver {\\r\\n        selfdestruct(payable(owner()));\\r\\n    }\\r\\n\\r\\n    modifier isLive() {\\r\\n        require(\\r\\n            expiration == 0 || block.timestamp <= expiration,\\r\\n            \\\"Terminated: Time over\\\"\\r\\n        );\\r\\n        _;\\r\\n    }\\r\\n\\r\\n    modifier isOver() {\\r\\n        require(\\r\\n            expiration != 0 && block.timestamp > expiration,\\r\\n            \\\"Terminated: Contract is live\\\"\\r\\n        );\\r\\n        _;\\r\\n    }\\r\\n}\\r\\n\"\r\n    },\r\n    \"/contracts/TSC.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: UNLICENSED\\r\\npragma solidity ^0.8.0;\\r\\npragma experimental ABIEncoderV2;\\r\\n\\r\\nimport \\\"@openzeppelin/contracts/access/Ownable.sol\\\";\\r\\nimport \\\"@openzeppelin/contracts/utils/Address.sol\\\";\\r\\nimport \\\"@openzeppelin/contracts/token/ERC20/ERC20.sol\\\";\\r\\nimport \\\"@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol\\\";\\r\\nimport \\\"@openzeppelin/contracts/utils/cryptography/ECDSA.sol\\\";\\r\\nimport \\\"./TerminateContractTemplate.sol\\\";\\r\\nimport \\\"./interface/IExecute.sol\\\";\\r\\nimport \\\"./interface/ITSCPool.sol\\\";\\r\\n\\r\\ncontract TSC is TerminateContractTemplate {\\r\\n    using SafeERC20 for IERC20;\\r\\n    using ECDSA for bytes32;\\r\\n\\r\\n    struct DepositERC20 {\\r\\n        address tokens;\\r\\n        uint256 value;\\r\\n        string description;\\r\\n        uint256 deposited;\\r\\n    }\\r\\n\\r\\n    struct TransferERC20 {\\r\\n        address receiver;\\r\\n        address tokens;\\r\\n        uint256 value;\\r\\n        string description;\\r\\n        bool transfered;\\r\\n    }\\r\\n\\r\\n    struct DepositETH {\\r\\n        uint256 value;\\r\\n        string description;\\r\\n        uint256 deposited;\\r\\n    }\\r\\n\\r\\n    struct TransferETH {\\r\\n        address payable receiver;\\r\\n        uint256 value;\\r\\n        string description;\\r\\n        bool transfered;\\r\\n    }\\r\\n\\r\\n    struct UploadSignature {\\r\\n        address signer;\\r\\n        bytes32 source; // sha256 of document\\r\\n        string description;\\r\\n        bytes signature;\\r\\n    }\\r\\n\\r\\n    struct ListDepositERC20 {\\r\\n        mapping(uint256 => DepositERC20) list;\\r\\n        uint256 size;\\r\\n    }\\r\\n\\r\\n    struct ListTransferERC20 {\\r\\n        mapping(uint256 => TransferERC20) list;\\r\\n        uint256 size;\\r\\n    }\\r\\n\\r\\n    struct ListDepositETH {\\r\\n        mapping(uint256 => DepositETH) list;\\r\\n        uint256 size;\\r\\n    }\\r\\n\\r\\n    struct ListTransferETH {\\r\\n        mapping(uint256 => TransferETH) list;\\r\\n        uint256 size;\\r\\n    }\\r\\n\\r\\n    struct ListUploadSignature {\\r\\n        mapping(uint256 => UploadSignature) list;\\r\\n        uint256 size;\\r\\n    }\\r\\n\\r\\n    struct DepositERC20Input {\\r\\n        address tokens;\\r\\n        uint256 value;\\r\\n        string description;\\r\\n    }\\r\\n\\r\\n    struct TransferERC20Input {\\r\\n        address receiver;\\r\\n        address tokens;\\r\\n        uint256 value;\\r\\n        string description;\\r\\n    }\\r\\n\\r\\n    struct DepositETHInput {\\r\\n        uint256 value;\\r\\n        string description;\\r\\n    }\\r\\n\\r\\n    struct TransferETHInput {\\r\\n        address payable receiver;\\r\\n        uint256 value;\\r\\n        string description;\\r\\n    }\\r\\n\\r\\n    struct UploadSignatureInput {\\r\\n        address signer;\\r\\n        bytes32 source; // sha256 of document\\r\\n        string description;\\r\\n    }\\r\\n\\r\\n    struct BasicInfoInput {\\r\\n        string title;\\r\\n        uint256 timeout;\\r\\n        uint256 deadline;\\r\\n        address tokens_address_start;\\r\\n        uint256 tokens_amount_start;\\r\\n        address payable partner;\\r\\n        string description;\\r\\n        address payable execute_contract;\\r\\n        address rewardToken;\\r\\n        uint256 rewardValue;\\r\\n    }\\r\\n\\r\\n    struct Reward {\\r\\n        address tokens;\\r\\n        uint256 value;\\r\\n    }\\r\\n\\r\\n    struct StartTimingRequired {\\r\\n        address tokens;\\r\\n        uint256 value;\\r\\n    }\\r\\n    string public title;\\r\\n\\r\\n    address payable public partner;\\r\\n\\r\\n    uint256 public timeout;\\r\\n\\r\\n    address payable public execute_contract;\\r\\n\\r\\n    StartTimingRequired public startTimmingRequired;\\r\\n    Reward public reward;\\r\\n\\r\\n    ListDepositERC20 private listDepositERC20;\\r\\n    ListTransferERC20 private listTransferERC20;\\r\\n    ListDepositETH private listDepositETH;\\r\\n    ListTransferETH private listTransferETH;\\r\\n    ListUploadSignature private listUploadSignature;\\r\\n\\r\\n    bool public ready;\\r\\n    bool public isStartTimming;\\r\\n\\r\\n    string public description;\\r\\n\\r\\n    uint256 passCount;\\r\\n\\r\\n    address public ownerPool;\\r\\n\\r\\n    constructor(address _ownerPool) {\\r\\n        ownerPool = _ownerPool;\\r\\n    }\\r\\n\\r\\n    event StartContract(uint256 timestamp);\\r\\n    event StartTiming(uint256 timestamp);\\r\\n    event SignatureUploaded(\\r\\n        uint256 indexed _index,\\r\\n        bytes32 _source,\\r\\n        address _signers,\\r\\n        bytes _signature,\\r\\n        uint256 _timestamp\\r\\n    );\\r\\n    event DepositEthCompleted(\\r\\n        uint256 indexed _index,\\r\\n        uint256 _value,\\r\\n        uint256 _timestamp\\r\\n    );\\r\\n    event DepositErc20Completed(\\r\\n        uint256 indexed _index,\\r\\n        address _tokens,\\r\\n        uint256 _value,\\r\\n        uint256 _timestamp\\r\\n    );\\r\\n    event TransferEthCompleted(\\r\\n        uint256 indexed _index,\\r\\n        address _receiver,\\r\\n        uint256 _value,\\r\\n        uint256 _timestamp\\r\\n    );\\r\\n    event TransferErc20Completed(\\r\\n        uint256 indexed _index,\\r\\n        address _receiver,\\r\\n        address _tokens,\\r\\n        uint256 _value,\\r\\n        uint256 _timestamp\\r\\n    );\\r\\n    event ContractClosed(uint256 _timestamp, bool completed);\\r\\n\\r\\n    modifier onlyPartner() {\\r\\n        require(msg.sender == partner, \\\"TSC: Only partner\\\");\\r\\n        _;\\r\\n    }\\r\\n\\r\\n    modifier onlyNotReady() {\\r\\n        require(!ready, \\\"TSC: Contract readied\\\");\\r\\n        _;\\r\\n    }\\r\\n\\r\\n    modifier onlyStartTimming() {\\r\\n        require(isStartTimming, \\\"TSC: Required start timming\\\");\\r\\n        _;\\r\\n    }\\r\\n\\r\\n    modifier onlyTokenOption(address _token) {\\r\\n        require(\\r\\n            ITSCPool(ownerPool).checkTokenOption(_token),\\r\\n            \\\"Token is not on the list options\\\"\\r\\n        );\\r\\n        _;\\r\\n    }\\r\\n\\r\\n    function setExecuteContract(address payable _address)\\r\\n        public\\r\\n        onlyOwner\\r\\n        onlyNotReady\\r\\n        isLive\\r\\n    {\\r\\n        execute_contract = _address;\\r\\n    }\\r\\n\\r\\n    function setExpiration(uint256 _expiration)\\r\\n        public\\r\\n        virtual\\r\\n        override\\r\\n        onlyOwner\\r\\n    {\\r\\n        revert();\\r\\n    }\\r\\n\\r\\n    function setupAndStart(\\r\\n        BasicInfoInput memory basicInfo,\\r\\n        DepositERC20Input[] memory _depositErc20s,\\r\\n        TransferERC20Input[] memory _transferErc20s,\\r\\n        DepositETHInput[] memory _depositEths,\\r\\n        TransferETHInput[] memory _transferEths,\\r\\n        UploadSignatureInput[] memory _uploadSignatures\\r\\n    ) external payable onlyOwner onlyNotReady isLive {\\r\\n        _setupBasic(\\r\\n            basicInfo.title,\\r\\n            basicInfo.timeout,\\r\\n            basicInfo.deadline,\\r\\n            basicInfo.tokens_address_start,\\r\\n            basicInfo.tokens_amount_start,\\r\\n            basicInfo.partner,\\r\\n            basicInfo.description,\\r\\n            basicInfo.execute_contract,\\r\\n            basicInfo.rewardToken,\\r\\n            basicInfo.rewardValue\\r\\n        );\\r\\n        _setUpDepositErc20Functions(_depositErc20s);\\r\\n        _setupTransferErc20Functions(_transferErc20s);\\r\\n        _setupDepositEthFunctions(_depositEths);\\r\\n        _setupTransferEthFunctions(_transferEths);\\r\\n        _setupUploadSignatureFunctions(_uploadSignatures);\\r\\n        start();\\r\\n    }\\r\\n\\r\\n    function _setupBasic(\\r\\n        string memory _title,\\r\\n        uint256 _timeout,\\r\\n        uint256 _deadline,\\r\\n        address _tokens_address_start,\\r\\n        uint256 _tokens_amount_start,\\r\\n        address payable _partner,\\r\\n        string memory _description,\\r\\n        address payable _execute_contract,\\r\\n        address _rewardToken,\\r\\n        uint256 _rewardValue\\r\\n    ) private onlyTokenOption(_tokens_address_start) returns (bool) {\\r\\n        require(_partner != address(0), \\\"Partner address can not be zero!\\\");\\r\\n        require(\\r\\n            _tokens_address_start != address(0),\\r\\n            \\\"Start token address can not be zero!\\\"\\r\\n        );\\r\\n        title = _title;\\r\\n        partner = _partner;\\r\\n        description = _description;\\r\\n        execute_contract = _execute_contract;\\r\\n\\r\\n        timeout = _timeout;\\r\\n        expiration = _deadline;\\r\\n        startTimmingRequired = StartTimingRequired({\\r\\n            tokens: _tokens_address_start,\\r\\n            value: _tokens_amount_start\\r\\n        });\\r\\n        reward = Reward({tokens: _rewardToken, value: _rewardValue});\\r\\n        return true;\\r\\n    }\\r\\n\\r\\n    function _setUpDepositErc20Functions(\\r\\n        DepositERC20Input[] memory _depositErc20s\\r\\n    ) private returns (bool) {\\r\\n        for (uint256 i = 0; i < _depositErc20s.length; i++) {\\r\\n            DepositERC20Input memory depositErc20Input = _depositErc20s[i];\\r\\n            require(\\r\\n                ITSCPool(ownerPool).checkTokenOption(depositErc20Input.tokens),\\r\\n                \\\"Token is not on the list options\\\"\\r\\n            );\\r\\n            require(\\r\\n                depositErc20Input.tokens != address(0x0),\\r\\n                \\\"TSC: ERC20 tokens address in Deposit ERC20 Function is required different 0x0\\\"\\r\\n            );\\r\\n            require(\\r\\n                depositErc20Input.value > 0,\\r\\n                \\\"TSC: value of ERC20 in Deposit ERC20 Function is required greater than 0\\\"\\r\\n            );\\r\\n            listDepositERC20.list[i] = DepositERC20(\\r\\n                depositErc20Input.tokens,\\r\\n                depositErc20Input.value,\\r\\n                depositErc20Input.description,\\r\\n                0\\r\\n            );\\r\\n        }\\r\\n        listDepositERC20.size = _depositErc20s.length;\\r\\n        return true;\\r\\n    }\\r\\n\\r\\n    function _setupTransferErc20Functions(\\r\\n        TransferERC20Input[] memory _transferErc20s\\r\\n    ) private returns (bool) {\\r\\n        for (uint256 i = 0; i < _transferErc20s.length; i++) {\\r\\n            TransferERC20Input memory transferErc20Input = _transferErc20s[i];\\r\\n            require(\\r\\n                ITSCPool(ownerPool).checkTokenOption(transferErc20Input.tokens),\\r\\n                \\\"Token is not on the list options\\\"\\r\\n            );\\r\\n            require(\\r\\n                transferErc20Input.receiver != address(0x0),\\r\\n                \\\"TSC: receiver in  in Transfer Erc20 Function is required different 0x0\\\"\\r\\n            );\\r\\n            require(\\r\\n                transferErc20Input.tokens != address(0x0),\\r\\n                \\\"TSC: ERC20 tokens address in Transfer ERC20 Function is required different 0x0\\\"\\r\\n            );\\r\\n            require(\\r\\n                transferErc20Input.value > 0,\\r\\n                \\\"TSC: value of ETH in Transfer Erc20 Function is required greater than 0\\\"\\r\\n            );\\r\\n            listTransferERC20.list[i] = TransferERC20(\\r\\n                transferErc20Input.receiver,\\r\\n                transferErc20Input.tokens,\\r\\n                transferErc20Input.value,\\r\\n                transferErc20Input.description,\\r\\n                false\\r\\n            );\\r\\n        }\\r\\n        listTransferERC20.size = _transferErc20s.length;\\r\\n        return true;\\r\\n    }\\r\\n\\r\\n    function _setupDepositEthFunctions(DepositETHInput[] memory _depositEths)\\r\\n        private\\r\\n        returns (bool)\\r\\n    {\\r\\n        for (uint256 i = 0; i < _depositEths.length; i++) {\\r\\n            DepositETHInput memory deposit = _depositEths[i];\\r\\n            require(\\r\\n                deposit.value > 0,\\r\\n                \\\"TSC: value of ETH in Deposit ETH Function is required greater than 0\\\"\\r\\n            );\\r\\n            listDepositETH.list[i] = DepositETH(\\r\\n                deposit.value,\\r\\n                deposit.description,\\r\\n                0\\r\\n            );\\r\\n        }\\r\\n        listDepositETH.size = _depositEths.length;\\r\\n        return true;\\r\\n    }\\r\\n\\r\\n    function _setupTransferEthFunctions(TransferETHInput[] memory _transferEths)\\r\\n        private\\r\\n        returns (bool)\\r\\n    {\\r\\n        for (uint256 i = 0; i < _transferEths.length; i++) {\\r\\n            TransferETHInput memory transferEthInput = _transferEths[i];\\r\\n            require(\\r\\n                transferEthInput.receiver != address(0x0),\\r\\n                \\\"TSC: receiver in  in Transfer ETH Function is required different 0x0\\\"\\r\\n            );\\r\\n            require(\\r\\n                transferEthInput.value > 0,\\r\\n                \\\"TSC: value of ETH in Transfer ETH Function is required greater than 0\\\"\\r\\n            );\\r\\n            listTransferETH.list[i] = TransferETH(\\r\\n                transferEthInput.receiver,\\r\\n                transferEthInput.value,\\r\\n                transferEthInput.description,\\r\\n                false\\r\\n            );\\r\\n        }\\r\\n        listTransferETH.size = _transferEths.length;\\r\\n        return true;\\r\\n    }\\r\\n\\r\\n    function _setupUploadSignatureFunctions(\\r\\n        UploadSignatureInput[] memory _uploadSignatures\\r\\n    ) private returns (bool) {\\r\\n        for (uint256 i = 0; i < _uploadSignatures.length; i++) {\\r\\n            UploadSignatureInput memory signature = _uploadSignatures[i];\\r\\n            require(\\r\\n                signature.signer != address(0x0),\\r\\n                \\\"TSC: signer in  in Upload Signature Function is required different 0x0\\\"\\r\\n            );\\r\\n            listUploadSignature.list[i] = UploadSignature(\\r\\n                signature.signer,\\r\\n                signature.source,\\r\\n                signature.description,\\r\\n                \\\"\\\"\\r\\n            );\\r\\n        }\\r\\n        listUploadSignature.size = _uploadSignatures.length;\\r\\n        return true;\\r\\n    }\\r\\n\\r\\n    function start() public payable onlyOwner onlyNotReady isLive {\\r\\n        require(\\r\\n            startTimmingRequired.tokens != address(0x0),\\r\\n            \\\"TSC: Please setup ERC20 address to start\\\"\\r\\n        );\\r\\n        require(timeout > 0, \\\"TSC: Please setup time out\\\");\\r\\n        if (reward.tokens != address(0x0)) {\\r\\n            IERC20(reward.tokens).safeTransferFrom(\\r\\n                msg.sender,\\r\\n                address(this),\\r\\n                reward.value\\r\\n            );\\r\\n        } else {\\r\\n            require(msg.value == reward.value, \\\"TSC: Please add ETH reward\\\");\\r\\n        }\\r\\n        ready = true;\\r\\n        emit StartContract(block.timestamp);\\r\\n    }\\r\\n\\r\\n    function startTimming() external onlyPartner isLive {\\r\\n        require(!isStartTimming, \\\"TSC: Timming started\\\");\\r\\n\\r\\n        IERC20(startTimmingRequired.tokens).safeTransferFrom(\\r\\n            msg.sender,\\r\\n            address(this),\\r\\n            startTimmingRequired.value\\r\\n        );\\r\\n\\r\\n        if (expiration > block.timestamp + timeout) {\\r\\n            expiration = block.timestamp + timeout;\\r\\n        }\\r\\n        isStartTimming = true;\\r\\n        emit StartTiming(block.timestamp);\\r\\n    }\\r\\n\\r\\n    function terminate() public override isOver onlyOwner {\\r\\n        uint256 totalFunction = listDepositETH.size +\\r\\n            listTransferETH.size +\\r\\n            listDepositERC20.size +\\r\\n            listTransferERC20.size +\\r\\n            listUploadSignature.size;\\r\\n\\r\\n        bool completed = totalFunction == passCount;\\r\\n        emit ContractClosed(block.timestamp, completed);\\r\\n        if (execute_contract != address(0)) {\\r\\n            if (reward.tokens != address(0x0) && reward.value > 0) {\\r\\n                IERC20(reward.tokens).safeTransfer(\\r\\n                    execute_contract,\\r\\n                    reward.value\\r\\n                );\\r\\n            }\\r\\n            if (\\r\\n                startTimmingRequired.tokens != address(0x0) &&\\r\\n                startTimmingRequired.value > 0\\r\\n            ) {\\r\\n                IERC20(startTimmingRequired.tokens).safeTransfer(\\r\\n                    execute_contract,\\r\\n                    startTimmingRequired.value\\r\\n                );\\r\\n            }\\r\\n            for (uint256 i = 0; i < listDepositERC20.size; i++) {\\r\\n                if (\\r\\n                    listDepositERC20.list[i].tokens != address(0x0) &&\\r\\n                    listDepositERC20.list[i].value > 0\\r\\n                ) {\\r\\n                    IERC20(listDepositERC20.list[i].tokens).safeTransfer(\\r\\n                        execute_contract,\\r\\n                        listDepositERC20.list[i].value\\r\\n                    );\\r\\n                }\\r\\n            }\\r\\n            Address.sendValue(execute_contract, address(this).balance);\\r\\n            if (completed) {\\r\\n                bool success = IExecute(execute_contract).execute();\\r\\n                require(success, \\\"TSC: Execution contract execute fail\\\");\\r\\n            } else {\\r\\n                bool success = IExecute(execute_contract).revert();\\r\\n                require(success, \\\"TSC: Execution contract execute fail\\\");\\r\\n            }\\r\\n        } else {\\r\\n            if (completed) {\\r\\n                _closeCompleted();\\r\\n            } else {\\r\\n                _closeNotCompleted();\\r\\n            }\\r\\n        }\\r\\n        if (completed) {\\r\\n            selfdestruct(payable(owner()));\\r\\n        } else {\\r\\n            selfdestruct(partner);\\r\\n        }\\r\\n    }\\r\\n\\r\\n    function _closeCompleted() private {\\r\\n        if (reward.tokens != address(0x0) && reward.value > 0) {\\r\\n            IERC20(reward.tokens).safeTransfer(partner, reward.value);\\r\\n        }\\r\\n        if (reward.tokens == address(0x0) && reward.value > 0) {\\r\\n            Address.sendValue(partner, reward.value);\\r\\n        }\\r\\n        if (\\r\\n            startTimmingRequired.tokens != address(0x0) &&\\r\\n            startTimmingRequired.value > 0\\r\\n        ) {\\r\\n            IERC20(startTimmingRequired.tokens).safeTransfer(\\r\\n                partner,\\r\\n                startTimmingRequired.value\\r\\n            );\\r\\n        }\\r\\n\\r\\n        for (uint256 i = 0; i < listDepositERC20.size; i++) {\\r\\n            if (\\r\\n                listDepositERC20.list[i].tokens != address(0x0) &&\\r\\n                listDepositERC20.list[i].value > 0\\r\\n            ) {\\r\\n                IERC20(listDepositERC20.list[i].tokens).safeTransfer(\\r\\n                    owner(),\\r\\n                    listDepositERC20.list[i].value\\r\\n                );\\r\\n            }\\r\\n        }\\r\\n    }\\r\\n\\r\\n    function _closeNotCompleted() private {\\r\\n        if (reward.tokens != address(0x0) && reward.value > 0) {\\r\\n            IERC20(reward.tokens).safeTransfer(owner(), reward.value);\\r\\n        }\\r\\n        if (reward.tokens == address(0x0) && reward.value > 0) {\\r\\n            Address.sendValue(payable(owner()), reward.value);\\r\\n        }\\r\\n        if (\\r\\n            startTimmingRequired.tokens != address(0x0) &&\\r\\n            startTimmingRequired.value > 0\\r\\n        ) {\\r\\n            IERC20(startTimmingRequired.tokens).safeTransfer(\\r\\n                owner(),\\r\\n                startTimmingRequired.value\\r\\n            );\\r\\n        }\\r\\n\\r\\n        for (uint256 i = 0; i < listDepositERC20.size; i++) {\\r\\n            if (\\r\\n                listDepositERC20.list[i].tokens != address(0x0) &&\\r\\n                listDepositERC20.list[i].value > 0\\r\\n            ) {\\r\\n                IERC20(listDepositERC20.list[i].tokens).safeTransfer(\\r\\n                    partner,\\r\\n                    listDepositERC20.list[i].value\\r\\n                );\\r\\n            }\\r\\n        }\\r\\n    }\\r\\n\\r\\n    function depositEth(uint256 _index)\\r\\n        external\\r\\n        payable\\r\\n        onlyPartner\\r\\n        isLive\\r\\n        onlyStartTimming\\r\\n    {\\r\\n        require(\\r\\n            listDepositETH.size > _index,\\r\\n            \\\"TSC: Invalid required functions\\\"\\r\\n        );\\r\\n        require(\\r\\n            listDepositETH.list[_index].deposited <\\r\\n                listDepositETH.list[_index].value,\\r\\n            \\\"TSC: Deposit over\\\"\\r\\n        );\\r\\n        require(msg.value == listDepositETH.list[_index].value);\\r\\n        listDepositETH.list[_index].deposited += msg.value;\\r\\n        passCount++;\\r\\n        emit DepositEthCompleted(\\r\\n            _index,\\r\\n            listDepositETH.list[_index].deposited,\\r\\n            block.timestamp\\r\\n        );\\r\\n    }\\r\\n\\r\\n    function transferEth(uint256 _index)\\r\\n        external\\r\\n        payable\\r\\n        onlyPartner\\r\\n        isLive\\r\\n        onlyStartTimming\\r\\n    {\\r\\n        require(\\r\\n            listTransferETH.size > _index,\\r\\n            \\\"TSC: Invalid required functions\\\"\\r\\n        );\\r\\n        require(\\r\\n            !listTransferETH.list[_index].transfered,\\r\\n            \\\"TSC: Function is passed\\\"\\r\\n        );\\r\\n        require(msg.value == listTransferETH.list[_index].value);\\r\\n        listTransferETH.list[_index].transfered = true;\\r\\n        passCount++;\\r\\n        Address.sendValue(\\r\\n            listTransferETH.list[_index].receiver,\\r\\n            listTransferETH.list[_index].value\\r\\n        );\\r\\n        emit TransferEthCompleted(\\r\\n            _index,\\r\\n            listTransferETH.list[_index].receiver,\\r\\n            listTransferETH.list[_index].value,\\r\\n            block.timestamp\\r\\n        );\\r\\n    }\\r\\n\\r\\n    function depositErc20(uint256 _index)\\r\\n        external\\r\\n        onlyPartner\\r\\n        isLive\\r\\n        onlyStartTimming\\r\\n    {\\r\\n        require(\\r\\n            listDepositERC20.size > _index,\\r\\n            \\\"TSC: Invalid required functions\\\"\\r\\n        );\\r\\n        require(\\r\\n            listDepositERC20.list[_index].deposited <\\r\\n                listDepositERC20.list[_index].value,\\r\\n            \\\"TSC: Function is passed\\\"\\r\\n        );\\r\\n        uint256 preBalance = IERC20(listDepositERC20.list[_index].tokens)\\r\\n            .balanceOf(address(this));\\r\\n\\r\\n        IERC20(listDepositERC20.list[_index].tokens).safeTransferFrom(\\r\\n            msg.sender,\\r\\n            address(this),\\r\\n            listDepositERC20.list[_index].value\\r\\n        );\\r\\n\\r\\n        listDepositERC20.list[_index].deposited =\\r\\n            IERC20(listDepositERC20.list[_index].tokens).balanceOf(\\r\\n                address(this)\\r\\n            ) -\\r\\n            preBalance;\\r\\n        if (\\r\\n            listDepositERC20.list[_index].deposited >=\\r\\n            listDepositERC20.list[_index].value\\r\\n        ) {\\r\\n            passCount++;\\r\\n            emit DepositErc20Completed(\\r\\n                _index,\\r\\n                listDepositERC20.list[_index].tokens,\\r\\n                listDepositERC20.list[_index].value,\\r\\n                block.timestamp\\r\\n            );\\r\\n        }\\r\\n    }\\r\\n\\r\\n    function transferErc20(uint256 _index)\\r\\n        external\\r\\n        onlyPartner\\r\\n        isLive\\r\\n        onlyStartTimming\\r\\n    {\\r\\n        require(\\r\\n            listTransferERC20.size > _index,\\r\\n            \\\"TSC: Invalid required functions\\\"\\r\\n        );\\r\\n        require(\\r\\n            !listTransferERC20.list[_index].transfered,\\r\\n            \\\"TSC: Function is passed\\\"\\r\\n        );\\r\\n        listTransferERC20.list[_index].transfered = true;\\r\\n        passCount++;\\r\\n        IERC20(listTransferERC20.list[_index].tokens).safeTransferFrom(\\r\\n            msg.sender,\\r\\n            listTransferERC20.list[_index].receiver,\\r\\n            listTransferERC20.list[_index].value\\r\\n        );\\r\\n        emit TransferErc20Completed(\\r\\n            _index,\\r\\n            listTransferERC20.list[_index].receiver,\\r\\n            listTransferERC20.list[_index].tokens,\\r\\n            listTransferERC20.list[_index].value,\\r\\n            block.timestamp\\r\\n        );\\r\\n    }\\r\\n\\r\\n    function uploadSignature(uint256 _index, bytes memory _signature)\\r\\n        external\\r\\n        onlyPartner\\r\\n        isLive\\r\\n        onlyStartTimming\\r\\n    {\\r\\n        require(\\r\\n            listUploadSignature.size > _index,\\r\\n            \\\"TSC: Invalid required functions\\\"\\r\\n        );\\r\\n        require(\\r\\n            verify(\\r\\n                listUploadSignature.list[_index].signer,\\r\\n                listUploadSignature.list[_index].source,\\r\\n                _signature\\r\\n            )\\r\\n        );\\r\\n        listUploadSignature.list[_index].signature = _signature;\\r\\n        passCount++;\\r\\n        emit SignatureUploaded(\\r\\n            _index,\\r\\n            listUploadSignature.list[_index].source,\\r\\n            listUploadSignature.list[_index].signer,\\r\\n            _signature,\\r\\n            block.timestamp\\r\\n        );\\r\\n    }\\r\\n\\r\\n    function verify(\\r\\n        address _signer,\\r\\n        bytes32 _messageHash,\\r\\n        bytes memory _signature\\r\\n    ) private pure returns (bool) {\\r\\n        return _messageHash.recover(_signature) == _signer;\\r\\n    }\\r\\n\\r\\n    function isPassDepositErc20(uint256 _index) external view returns (bool) {\\r\\n        require(\\r\\n            listDepositERC20.size > _index,\\r\\n            \\\"TSC: Invalid required functions\\\"\\r\\n        );\\r\\n        return\\r\\n            listDepositERC20.list[_index].value <=\\r\\n            listDepositERC20.list[_index].deposited;\\r\\n    }\\r\\n\\r\\n    function isPassDepositEth(uint256 _index) external view returns (bool) {\\r\\n        require(\\r\\n            listDepositETH.size > _index,\\r\\n            \\\"TSC: Invalid required functions\\\"\\r\\n        );\\r\\n        return\\r\\n            listDepositETH.list[_index].value <=\\r\\n            listDepositETH.list[_index].deposited;\\r\\n    }\\r\\n\\r\\n    function isPassTransferEth(uint256 _index) external view returns (bool) {\\r\\n        require(\\r\\n            listTransferETH.size > _index,\\r\\n            \\\"TSC: Invalid required functions\\\"\\r\\n        );\\r\\n        return listTransferETH.list[_index].transfered;\\r\\n    }\\r\\n\\r\\n    function isPassTransferErc20(uint256 _index) external view returns (bool) {\\r\\n        require(\\r\\n            listTransferERC20.size > _index,\\r\\n            \\\"TSC: Invalid required functions\\\"\\r\\n        );\\r\\n        return listTransferERC20.list[_index].transfered;\\r\\n    }\\r\\n\\r\\n    function isPassSignature(uint256 _index) external view returns (bool) {\\r\\n        require(\\r\\n            listUploadSignature.size > _index,\\r\\n            \\\"TSC: Invalid required functions\\\"\\r\\n        );\\r\\n        return listUploadSignature.list[_index].signature.length > 0;\\r\\n    }\\r\\n\\r\\n    function listDepositEthSize() external view returns (uint256) {\\r\\n        return listDepositETH.size;\\r\\n    }\\r\\n\\r\\n    function listDepositErc20Size() external view returns (uint256) {\\r\\n        return listDepositERC20.size;\\r\\n    }\\r\\n\\r\\n    function listTransferEthSize() external view returns (uint256) {\\r\\n        return listTransferETH.size;\\r\\n    }\\r\\n\\r\\n    function listTransferErc20Size() external view returns (uint256) {\\r\\n        return listTransferERC20.size;\\r\\n    }\\r\\n\\r\\n    function listUploadSignatureSize() external view returns (uint256) {\\r\\n        return listUploadSignature.size;\\r\\n    }\\r\\n\\r\\n    function depositEthFunction(uint256 _index)\\r\\n        external\\r\\n        view\\r\\n        returns (\\r\\n            uint256 _value,\\r\\n            string memory _description,\\r\\n            uint256 _deposited\\r\\n        )\\r\\n    {\\r\\n        require(\\r\\n            listDepositETH.size > _index,\\r\\n            \\\"TSC: Invalid required functions\\\"\\r\\n        );\\r\\n\\r\\n        _value = listDepositETH.list[_index].value;\\r\\n        _description = listDepositETH.list[_index].description;\\r\\n        _deposited = listDepositETH.list[_index].deposited;\\r\\n    }\\r\\n\\r\\n    function depositErc20Function(uint256 _index)\\r\\n        external\\r\\n        view\\r\\n        returns (\\r\\n            address _tokens,\\r\\n            uint256 _value,\\r\\n            string memory _symbol,\\r\\n            string memory _description,\\r\\n            uint256 _deposited\\r\\n        )\\r\\n    {\\r\\n        require(\\r\\n            listDepositERC20.size > _index,\\r\\n            \\\"TSC: Invalid required functions\\\"\\r\\n        );\\r\\n        _tokens = listDepositERC20.list[_index].tokens;\\r\\n        _value = listDepositERC20.list[_index].value;\\r\\n        _description = listDepositERC20.list[_index].description;\\r\\n        _deposited = listDepositERC20.list[_index].deposited;\\r\\n        if (_tokens != address(0x0)) {\\r\\n            _symbol = ERC20(_tokens).symbol();\\r\\n        }\\r\\n    }\\r\\n\\r\\n    function transferEthFunction(uint256 _index)\\r\\n        external\\r\\n        view\\r\\n        returns (\\r\\n            address _receiver,\\r\\n            uint256 _value,\\r\\n            string memory _description,\\r\\n            bool _transfered\\r\\n        )\\r\\n    {\\r\\n        require(\\r\\n            listTransferETH.size > _index,\\r\\n            \\\"TSC: Invalid required functions\\\"\\r\\n        );\\r\\n\\r\\n        _receiver = listTransferETH.list[_index].receiver;\\r\\n        _value = listTransferETH.list[_index].value;\\r\\n        _description = listTransferETH.list[_index].description;\\r\\n        _transfered = listTransferETH.list[_index].transfered;\\r\\n    }\\r\\n\\r\\n    function transferErc20Function(uint256 _index)\\r\\n        external\\r\\n        view\\r\\n        returns (\\r\\n            address _receiver,\\r\\n            address _token,\\r\\n            uint256 _value,\\r\\n            string memory _description,\\r\\n            bool _transfered\\r\\n        )\\r\\n    {\\r\\n        require(\\r\\n            listTransferERC20.size > _index,\\r\\n            \\\"TSC: Invalid required functions\\\"\\r\\n        );\\r\\n\\r\\n        _receiver = listTransferERC20.list[_index].receiver;\\r\\n        _token = listTransferERC20.list[_index].tokens;\\r\\n        _value = listTransferERC20.list[_index].value;\\r\\n        _description = listTransferERC20.list[_index].description;\\r\\n        _transfered = listTransferERC20.list[_index].transfered;\\r\\n    }\\r\\n\\r\\n    function uploadSignatureFunction(uint256 _index)\\r\\n        external\\r\\n        view\\r\\n        returns (\\r\\n            address _signer,\\r\\n            bytes32 _source,\\r\\n            string memory _description,\\r\\n            bytes memory _signature\\r\\n        )\\r\\n    {\\r\\n        require(\\r\\n            listUploadSignature.size > _index,\\r\\n            \\\"TSC: Invalid required functions\\\"\\r\\n        );\\r\\n\\r\\n        _signer = listUploadSignature.list[_index].signer;\\r\\n        _source = listUploadSignature.list[_index].source;\\r\\n        _description = listUploadSignature.list[_index].description;\\r\\n        _signature = listUploadSignature.list[_index].signature;\\r\\n    }\\r\\n}\\r\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/utils/cryptography/ECDSA.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Elliptic Curve Digital Signature Algorithm (ECDSA) operations.\\n *\\n * These functions can be used to verify that a message was signed by the holder\\n * of the private keys of a given address.\\n */\\nlibrary ECDSA {\\n    enum RecoverError {\\n        NoError,\\n        InvalidSignature,\\n        InvalidSignatureLength,\\n        InvalidSignatureS,\\n        InvalidSignatureV\\n    }\\n\\n    function _throwError(RecoverError error) private pure {\\n        if (error == RecoverError.NoError) {\\n            return; // no error: do nothing\\n        } else if (error == RecoverError.InvalidSignature) {\\n            revert(\\\"ECDSA: invalid signature\\\");\\n        } else if (error == RecoverError.InvalidSignatureLength) {\\n            revert(\\\"ECDSA: invalid signature length\\\");\\n        } else if (error == RecoverError.InvalidSignatureS) {\\n            revert(\\\"ECDSA: invalid signature 's' value\\\");\\n        } else if (error == RecoverError.InvalidSignatureV) {\\n            revert(\\\"ECDSA: invalid signature 'v' value\\\");\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the address that signed a hashed message (`hash`) with\\n     * `signature` or error string. This address can then be used for verification purposes.\\n     *\\n     * The `ecrecover` EVM opcode allows for malleable (non-unique) signatures:\\n     * this function rejects them by requiring the `s` value to be in the lower\\n     * half order, and the `v` value to be either 27 or 28.\\n     *\\n     * IMPORTANT: `hash` _must_ be the result of a hash operation for the\\n     * verification to be secure: it is possible to craft signatures that\\n     * recover to arbitrary addresses for non-hashed data. A safe way to ensure\\n     * this is by receiving a hash of the original message (which may otherwise\\n     * be too long), and then calling {toEthSignedMessageHash} on it.\\n     *\\n     * Documentation for signature generation:\\n     * - with https://web3js.readthedocs.io/en/v1.3.4/web3-eth-accounts.html#sign[Web3.js]\\n     * - with https://docs.ethers.io/v5/api/signer/#Signer-signMessage[ethers]\\n     *\\n     * _Available since v4.3._\\n     */\\n    function tryRecover(bytes32 hash, bytes memory signature) internal pure returns (address, RecoverError) {\\n        // Check the signature length\\n        // - case 65: r,s,v signature (standard)\\n        // - case 64: r,vs signature (cf https://eips.ethereum.org/EIPS/eip-2098) _Available since v4.1._\\n        if (signature.length == 65) {\\n            bytes32 r;\\n            bytes32 s;\\n            uint8 v;\\n            // ecrecover takes the signature parameters, and the only way to get them\\n            // currently is to use assembly.\\n            assembly {\\n                r := mload(add(signature, 0x20))\\n                s := mload(add(signature, 0x40))\\n                v := byte(0, mload(add(signature, 0x60)))\\n            }\\n            return tryRecover(hash, v, r, s);\\n        } else if (signature.length == 64) {\\n            bytes32 r;\\n            bytes32 vs;\\n            // ecrecover takes the signature parameters, and the only way to get them\\n            // currently is to use assembly.\\n            assembly {\\n                r := mload(add(signature, 0x20))\\n                vs := mload(add(signature, 0x40))\\n            }\\n            return tryRecover(hash, r, vs);\\n        } else {\\n            return (address(0), RecoverError.InvalidSignatureLength);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the address that signed a hashed message (`hash`) with\\n     * `signature`. This address can then be used for verification purposes.\\n     *\\n     * The `ecrecover` EVM opcode allows for malleable (non-unique) signatures:\\n     * this function rejects them by requiring the `s` value to be in the lower\\n     * half order, and the `v` value to be either 27 or 28.\\n     *\\n     * IMPORTANT: `hash` _must_ be the result of a hash operation for the\\n     * verification to be secure: it is possible to craft signatures that\\n     * recover to arbitrary addresses for non-hashed data. A safe way to ensure\\n     * this is by receiving a hash of the original message (which may otherwise\\n     * be too long), and then calling {toEthSignedMessageHash} on it.\\n     */\\n    function recover(bytes32 hash, bytes memory signature) internal pure returns (address) {\\n        (address recovered, RecoverError error) = tryRecover(hash, signature);\\n        _throwError(error);\\n        return recovered;\\n    }\\n\\n    /**\\n     * @dev Overload of {ECDSA-tryRecover} that receives the `r` and `vs` short-signature fields separately.\\n     *\\n     * See https://eips.ethereum.org/EIPS/eip-2098[EIP-2098 short signatures]\\n     *\\n     * _Available since v4.3._\\n     */\\n    function tryRecover(\\n        bytes32 hash,\\n        bytes32 r,\\n        bytes32 vs\\n    ) internal pure returns (address, RecoverError) {\\n        bytes32 s;\\n        uint8 v;\\n        assembly {\\n            s := and(vs, 0x7fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff)\\n            v := add(shr(255, vs), 27)\\n        }\\n        return tryRecover(hash, v, r, s);\\n    }\\n\\n    /**\\n     * @dev Overload of {ECDSA-recover} that receives the `r and `vs` short-signature fields separately.\\n     *\\n     * _Available since v4.2._\\n     */\\n    function recover(\\n        bytes32 hash,\\n        bytes32 r,\\n        bytes32 vs\\n    ) internal pure returns (address) {\\n        (address recovered, RecoverError error) = tryRecover(hash, r, vs);\\n        _throwError(error);\\n        return recovered;\\n    }\\n\\n    /**\\n     * @dev Overload of {ECDSA-tryRecover} that receives the `v`,\\n     * `r` and `s` signature fields separately.\\n     *\\n     * _Available since v4.3._\\n     */\\n    function tryRecover(\\n        bytes32 hash,\\n        uint8 v,\\n        bytes32 r,\\n        bytes32 s\\n    ) internal pure returns (address, RecoverError) {\\n        // EIP-2 still allows signature malleability for ecrecover(). Remove this possibility and make the signature\\n        // unique. Appendix F in the Ethereum Yellow paper (https://ethereum.github.io/yellowpaper/paper.pdf), defines\\n        // the valid range for s in (301): 0 < s < secp256k1n ÷ 2 + 1, and for v in (302): v ∈ {27, 28}. Most\\n        // signatures from current libraries generate a unique signature with an s-value in the lower half order.\\n        //\\n        // If your library generates malleable signatures, such as s-values in the upper range, calculate a new s-value\\n        // with 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFEBAAEDCE6AF48A03BBFD25E8CD0364141 - s1 and flip v from 27 to 28 or\\n        // vice versa. If your library also generates signatures with 0/1 for v instead 27/28, add 27 to v to accept\\n        // these malleable signatures as well.\\n        if (uint256(s) > 0x7FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF5D576E7357A4501DDFE92F46681B20A0) {\\n            return (address(0), RecoverError.InvalidSignatureS);\\n        }\\n        if (v != 27 && v != 28) {\\n            return (address(0), RecoverError.InvalidSignatureV);\\n        }\\n\\n        // If the signature is valid (and not malleable), return the signer address\\n        address signer = ecrecover(hash, v, r, s);\\n        if (signer == address(0)) {\\n            return (address(0), RecoverError.InvalidSignature);\\n        }\\n\\n        return (signer, RecoverError.NoError);\\n    }\\n\\n    /**\\n     * @dev Overload of {ECDSA-recover} that receives the `v`,\\n     * `r` and `s` signature fields separately.\\n     */\\n    function recover(\\n        bytes32 hash,\\n        uint8 v,\\n        bytes32 r,\\n        bytes32 s\\n    ) internal pure returns (address) {\\n        (address recovered, RecoverError error) = tryRecover(hash, v, r, s);\\n        _throwError(error);\\n        return recovered;\\n    }\\n\\n    /**\\n     * @dev Returns an Ethereum Signed Message, created from a `hash`. This\\n     * produces hash corresponding to the one signed with the\\n     * https://eth.wiki/json-rpc/API#eth_sign[`eth_sign`]\\n     * JSON-RPC method as part of EIP-191.\\n     *\\n     * See {recover}.\\n     */\\n    function toEthSignedMessageHash(bytes32 hash) internal pure returns (bytes32) {\\n        // 32 is the length in bytes of hash,\\n        // enforced by the type signature above\\n        return keccak256(abi.encodePacked(\\\"\\\\x19Ethereum Signed Message:\\\\n32\\\", hash));\\n    }\\n\\n    /**\\n     * @dev Returns an Ethereum Signed Typed Data, created from a\\n     * `domainSeparator` and a `structHash`. This produces hash corresponding\\n     * to the one signed with the\\n     * https://eips.ethereum.org/EIPS/eip-712[`eth_signTypedData`]\\n     * JSON-RPC method as part of EIP-712.\\n     *\\n     * See {recover}.\\n     */\\n    function toTypedDataHash(bytes32 domainSeparator, bytes32 structHash) internal pure returns (bytes32) {\\n        return keccak256(abi.encodePacked(\\\"\\\\x19\\\\x01\\\", domainSeparator, structHash));\\n    }\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/utils/Context.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Provides information about the current execution context, including the\\n * sender of the transaction and its data. While these are generally available\\n * via msg.sender and msg.data, they should not be accessed in such a direct\\n * manner, since when dealing with meta-transactions the account sending and\\n * paying for execution may not be the actual sender (as far as an application\\n * is concerned).\\n *\\n * This contract is only required for intermediate, library-like contracts.\\n */\\nabstract contract Context {\\n    function _msgSender() internal view virtual returns (address) {\\n        return msg.sender;\\n    }\\n\\n    function _msgData() internal view virtual returns (bytes calldata) {\\n        return msg.data;\\n    }\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/utils/Address.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Collection of functions related to the address type\\n */\\nlibrary Address {\\n    /**\\n     * @dev Returns true if `account` is a contract.\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * It is unsafe to assume that an address for which this function returns\\n     * false is an externally-owned account (EOA) and not a contract.\\n     *\\n     * Among others, `isContract` will return false for the following\\n     * types of addresses:\\n     *\\n     *  - an externally-owned account\\n     *  - a contract in construction\\n     *  - an address where a contract will be created\\n     *  - an address where a contract lived, but was destroyed\\n     * ====\\n     */\\n    function isContract(address account) internal view returns (bool) {\\n        // This method relies on extcodesize, which returns 0 for contracts in\\n        // construction, since the code is only stored at the end of the\\n        // constructor execution.\\n\\n        uint256 size;\\n        assembly {\\n            size := extcodesize(account)\\n        }\\n        return size > 0;\\n    }\\n\\n    /**\\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\\n     * `recipient`, forwarding all available gas and reverting on errors.\\n     *\\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\\n     * imposed by `transfer`, making them unable to receive funds via\\n     * `transfer`. {sendValue} removes this limitation.\\n     *\\n     * https://diligence.consensys.net/posts/2019/09/stop-using-soliditys-transfer-now/[Learn more].\\n     *\\n     * IMPORTANT: because control is transferred to `recipient`, care must be\\n     * taken to not create reentrancy vulnerabilities. Consider using\\n     * {ReentrancyGuard} or the\\n     * https://solidity.readthedocs.io/en/v0.5.11/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\\n     */\\n    function sendValue(address payable recipient, uint256 amount) internal {\\n        require(address(this).balance >= amount, \\\"Address: insufficient balance\\\");\\n\\n        (bool success, ) = recipient.call{value: amount}(\\\"\\\");\\n        require(success, \\\"Address: unable to send value, recipient may have reverted\\\");\\n    }\\n\\n    /**\\n     * @dev Performs a Solidity function call using a low level `call`. A\\n     * plain `call` is an unsafe replacement for a function call: use this\\n     * function instead.\\n     *\\n     * If `target` reverts with a revert reason, it is bubbled up by this\\n     * function (like regular Solidity function calls).\\n     *\\n     * Returns the raw returned data. To convert to the expected return value,\\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\\n     *\\n     * Requirements:\\n     *\\n     * - `target` must be a contract.\\n     * - calling `target` with `data` must not revert.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionCall(target, data, \\\"Address: low-level call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\\n     * `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, 0, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but also transferring `value` wei to `target`.\\n     *\\n     * Requirements:\\n     *\\n     * - the calling contract must have an ETH balance of at least `value`.\\n     * - the called Solidity function must be `payable`.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, value, \\\"Address: low-level call with value failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\\n     * with `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        require(address(this).balance >= value, \\\"Address: insufficient balance for call\\\");\\n        require(isContract(target), \\\"Address: call to non-contract\\\");\\n\\n        (bool success, bytes memory returndata) = target.call{value: value}(data);\\n        return verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\\n        return functionStaticCall(target, data, \\\"Address: low-level static call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal view returns (bytes memory) {\\n        require(isContract(target), \\\"Address: static call to non-contract\\\");\\n\\n        (bool success, bytes memory returndata) = target.staticcall(data);\\n        return verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionDelegateCall(target, data, \\\"Address: low-level delegate call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        require(isContract(target), \\\"Address: delegate call to non-contract\\\");\\n\\n        (bool success, bytes memory returndata) = target.delegatecall(data);\\n        return verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Tool to verifies that a low level call was successful, and revert if it wasn't, either by bubbling the\\n     * revert reason using the provided one.\\n     *\\n     * _Available since v4.3._\\n     */\\n    function verifyCallResult(\\n        bool success,\\n        bytes memory returndata,\\n        string memory errorMessage\\n    ) internal pure returns (bytes memory) {\\n        if (success) {\\n            return returndata;\\n        } else {\\n            // Look for revert reason and bubble it up if present\\n            if (returndata.length > 0) {\\n                // The easiest way to bubble the revert reason is using memory via assembly\\n\\n                assembly {\\n                    let returndata_size := mload(returndata)\\n                    revert(add(32, returndata), returndata_size)\\n                }\\n            } else {\\n                revert(errorMessage);\\n            }\\n        }\\n    }\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../IERC20.sol\\\";\\nimport \\\"../../../utils/Address.sol\\\";\\n\\n/**\\n * @title SafeERC20\\n * @dev Wrappers around ERC20 operations that throw on failure (when the token\\n * contract returns false). Tokens that return no value (and instead revert or\\n * throw on failure) are also supported, non-reverting calls are assumed to be\\n * successful.\\n * To use this library you can add a `using SafeERC20 for IERC20;` statement to your contract,\\n * which allows you to call the safe operations as `token.safeTransfer(...)`, etc.\\n */\\nlibrary SafeERC20 {\\n    using Address for address;\\n\\n    function safeTransfer(\\n        IERC20 token,\\n        address to,\\n        uint256 value\\n    ) internal {\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.transfer.selector, to, value));\\n    }\\n\\n    function safeTransferFrom(\\n        IERC20 token,\\n        address from,\\n        address to,\\n        uint256 value\\n    ) internal {\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.transferFrom.selector, from, to, value));\\n    }\\n\\n    /**\\n     * @dev Deprecated. This function has issues similar to the ones found in\\n     * {IERC20-approve}, and its usage is discouraged.\\n     *\\n     * Whenever possible, use {safeIncreaseAllowance} and\\n     * {safeDecreaseAllowance} instead.\\n     */\\n    function safeApprove(\\n        IERC20 token,\\n        address spender,\\n        uint256 value\\n    ) internal {\\n        // safeApprove should only be called when setting an initial allowance,\\n        // or when resetting it to zero. To increase and decrease it, use\\n        // 'safeIncreaseAllowance' and 'safeDecreaseAllowance'\\n        require(\\n            (value == 0) || (token.allowance(address(this), spender) == 0),\\n            \\\"SafeERC20: approve from non-zero to non-zero allowance\\\"\\n        );\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, value));\\n    }\\n\\n    function safeIncreaseAllowance(\\n        IERC20 token,\\n        address spender,\\n        uint256 value\\n    ) internal {\\n        uint256 newAllowance = token.allowance(address(this), spender) + value;\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));\\n    }\\n\\n    function safeDecreaseAllowance(\\n        IERC20 token,\\n        address spender,\\n        uint256 value\\n    ) internal {\\n        unchecked {\\n            uint256 oldAllowance = token.allowance(address(this), spender);\\n            require(oldAllowance >= value, \\\"SafeERC20: decreased allowance below zero\\\");\\n            uint256 newAllowance = oldAllowance - value;\\n            _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));\\n        }\\n    }\\n\\n    /**\\n     * @dev Imitates a Solidity high-level call (i.e. a regular function call to a contract), relaxing the requirement\\n     * on the return value: the return value is optional (but if data is returned, it must not be false).\\n     * @param token The token targeted by the call.\\n     * @param data The call data (encoded using abi.encode or one of its variants).\\n     */\\n    function _callOptionalReturn(IERC20 token, bytes memory data) private {\\n        // We need to perform a low level call here, to bypass Solidity's return data size checking mechanism, since\\n        // we're implementing it ourselves. We use {Address.functionCall} to perform this call, which verifies that\\n        // the target address contains contract code and also asserts for success in the low-level call.\\n\\n        bytes memory returndata = address(token).functionCall(data, \\\"SafeERC20: low-level call failed\\\");\\n        if (returndata.length > 0) {\\n            // Return data is optional\\n            require(abi.decode(returndata, (bool)), \\\"SafeERC20: ERC20 operation did not succeed\\\");\\n        }\\n    }\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/token/ERC20/extensions/IERC20Metadata.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../IERC20.sol\\\";\\n\\n/**\\n * @dev Interface for the optional metadata functions from the ERC20 standard.\\n *\\n * _Available since v4.1._\\n */\\ninterface IERC20Metadata is IERC20 {\\n    /**\\n     * @dev Returns the name of the token.\\n     */\\n    function name() external view returns (string memory);\\n\\n    /**\\n     * @dev Returns the symbol of the token.\\n     */\\n    function symbol() external view returns (string memory);\\n\\n    /**\\n     * @dev Returns the decimals places of the token.\\n     */\\n    function decimals() external view returns (uint8);\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/token/ERC20/IERC20.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC20 standard as defined in the EIP.\\n */\\ninterface IERC20 {\\n    /**\\n     * @dev Returns the amount of tokens in existence.\\n     */\\n    function totalSupply() external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the amount of tokens owned by `account`.\\n     */\\n    function balanceOf(address account) external view returns (uint256);\\n\\n    /**\\n     * @dev Moves `amount` tokens from the caller's account to `recipient`.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transfer(address recipient, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Returns the remaining number of tokens that `spender` will be\\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\\n     * zero by default.\\n     *\\n     * This value changes when {approve} or {transferFrom} are called.\\n     */\\n    function allowance(address owner, address spender) external view returns (uint256);\\n\\n    /**\\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\\n     * that someone may use both the old and the new allowance by unfortunate\\n     * transaction ordering. One possible solution to mitigate this race\\n     * condition is to first reduce the spender's allowance to 0 and set the\\n     * desired value afterwards:\\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address spender, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Moves `amount` tokens from `sender` to `recipient` using the\\n     * allowance mechanism. `amount` is then deducted from the caller's\\n     * allowance.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(\\n        address sender,\\n        address recipient,\\n        uint256 amount\\n    ) external returns (bool);\\n\\n    /**\\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\\n     * another (`to`).\\n     *\\n     * Note that `value` may be zero.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 value);\\n\\n    /**\\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\\n     * a call to {approve}. `value` is the new allowance.\\n     */\\n    event Approval(address indexed owner, address indexed spender, uint256 value);\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/token/ERC20/ERC20.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"./IERC20.sol\\\";\\nimport \\\"./extensions/IERC20Metadata.sol\\\";\\nimport \\\"../../utils/Context.sol\\\";\\n\\n/**\\n * @dev Implementation of the {IERC20} interface.\\n *\\n * This implementation is agnostic to the way tokens are created. This means\\n * that a supply mechanism has to be added in a derived contract using {_mint}.\\n * For a generic mechanism see {ERC20PresetMinterPauser}.\\n *\\n * TIP: For a detailed writeup see our guide\\n * https://forum.zeppelin.solutions/t/how-to-implement-erc20-supply-mechanisms/226[How\\n * to implement supply mechanisms].\\n *\\n * We have followed general OpenZeppelin Contracts guidelines: functions revert\\n * instead returning `false` on failure. This behavior is nonetheless\\n * conventional and does not conflict with the expectations of ERC20\\n * applications.\\n *\\n * Additionally, an {Approval} event is emitted on calls to {transferFrom}.\\n * This allows applications to reconstruct the allowance for all accounts just\\n * by listening to said events. Other implementations of the EIP may not emit\\n * these events, as it isn't required by the specification.\\n *\\n * Finally, the non-standard {decreaseAllowance} and {increaseAllowance}\\n * functions have been added to mitigate the well-known issues around setting\\n * allowances. See {IERC20-approve}.\\n */\\ncontract ERC20 is Context, IERC20, IERC20Metadata {\\n    mapping(address => uint256) private _balances;\\n\\n    mapping(address => mapping(address => uint256)) private _allowances;\\n\\n    uint256 private _totalSupply;\\n\\n    string private _name;\\n    string private _symbol;\\n\\n    /**\\n     * @dev Sets the values for {name} and {symbol}.\\n     *\\n     * The default value of {decimals} is 18. To select a different value for\\n     * {decimals} you should overload it.\\n     *\\n     * All two of these values are immutable: they can only be set once during\\n     * construction.\\n     */\\n    constructor(string memory name_, string memory symbol_) {\\n        _name = name_;\\n        _symbol = symbol_;\\n    }\\n\\n    /**\\n     * @dev Returns the name of the token.\\n     */\\n    function name() public view virtual override returns (string memory) {\\n        return _name;\\n    }\\n\\n    /**\\n     * @dev Returns the symbol of the token, usually a shorter version of the\\n     * name.\\n     */\\n    function symbol() public view virtual override returns (string memory) {\\n        return _symbol;\\n    }\\n\\n    /**\\n     * @dev Returns the number of decimals used to get its user representation.\\n     * For example, if `decimals` equals `2`, a balance of `505` tokens should\\n     * be displayed to a user as `5.05` (`505 / 10 ** 2`).\\n     *\\n     * Tokens usually opt for a value of 18, imitating the relationship between\\n     * Ether and Wei. This is the value {ERC20} uses, unless this function is\\n     * overridden;\\n     *\\n     * NOTE: This information is only used for _display_ purposes: it in\\n     * no way affects any of the arithmetic of the contract, including\\n     * {IERC20-balanceOf} and {IERC20-transfer}.\\n     */\\n    function decimals() public view virtual override returns (uint8) {\\n        return 18;\\n    }\\n\\n    /**\\n     * @dev See {IERC20-totalSupply}.\\n     */\\n    function totalSupply() public view virtual override returns (uint256) {\\n        return _totalSupply;\\n    }\\n\\n    /**\\n     * @dev See {IERC20-balanceOf}.\\n     */\\n    function balanceOf(address account) public view virtual override returns (uint256) {\\n        return _balances[account];\\n    }\\n\\n    /**\\n     * @dev See {IERC20-transfer}.\\n     *\\n     * Requirements:\\n     *\\n     * - `recipient` cannot be the zero address.\\n     * - the caller must have a balance of at least `amount`.\\n     */\\n    function transfer(address recipient, uint256 amount) public virtual override returns (bool) {\\n        _transfer(_msgSender(), recipient, amount);\\n        return true;\\n    }\\n\\n    /**\\n     * @dev See {IERC20-allowance}.\\n     */\\n    function allowance(address owner, address spender) public view virtual override returns (uint256) {\\n        return _allowances[owner][spender];\\n    }\\n\\n    /**\\n     * @dev See {IERC20-approve}.\\n     *\\n     * Requirements:\\n     *\\n     * - `spender` cannot be the zero address.\\n     */\\n    function approve(address spender, uint256 amount) public virtual override returns (bool) {\\n        _approve(_msgSender(), spender, amount);\\n        return true;\\n    }\\n\\n    /**\\n     * @dev See {IERC20-transferFrom}.\\n     *\\n     * Emits an {Approval} event indicating the updated allowance. This is not\\n     * required by the EIP. See the note at the beginning of {ERC20}.\\n     *\\n     * Requirements:\\n     *\\n     * - `sender` and `recipient` cannot be the zero address.\\n     * - `sender` must have a balance of at least `amount`.\\n     * - the caller must have allowance for ``sender``'s tokens of at least\\n     * `amount`.\\n     */\\n    function transferFrom(\\n        address sender,\\n        address recipient,\\n        uint256 amount\\n    ) public virtual override returns (bool) {\\n        _transfer(sender, recipient, amount);\\n\\n        uint256 currentAllowance = _allowances[sender][_msgSender()];\\n        require(currentAllowance >= amount, \\\"ERC20: transfer amount exceeds allowance\\\");\\n        unchecked {\\n            _approve(sender, _msgSender(), currentAllowance - amount);\\n        }\\n\\n        return true;\\n    }\\n\\n    /**\\n     * @dev Atomically increases the allowance granted to `spender` by the caller.\\n     *\\n     * This is an alternative to {approve} that can be used as a mitigation for\\n     * problems described in {IERC20-approve}.\\n     *\\n     * Emits an {Approval} event indicating the updated allowance.\\n     *\\n     * Requirements:\\n     *\\n     * - `spender` cannot be the zero address.\\n     */\\n    function increaseAllowance(address spender, uint256 addedValue) public virtual returns (bool) {\\n        _approve(_msgSender(), spender, _allowances[_msgSender()][spender] + addedValue);\\n        return true;\\n    }\\n\\n    /**\\n     * @dev Atomically decreases the allowance granted to `spender` by the caller.\\n     *\\n     * This is an alternative to {approve} that can be used as a mitigation for\\n     * problems described in {IERC20-approve}.\\n     *\\n     * Emits an {Approval} event indicating the updated allowance.\\n     *\\n     * Requirements:\\n     *\\n     * - `spender` cannot be the zero address.\\n     * - `spender` must have allowance for the caller of at least\\n     * `subtractedValue`.\\n     */\\n    function decreaseAllowance(address spender, uint256 subtractedValue) public virtual returns (bool) {\\n        uint256 currentAllowance = _allowances[_msgSender()][spender];\\n        require(currentAllowance >= subtractedValue, \\\"ERC20: decreased allowance below zero\\\");\\n        unchecked {\\n            _approve(_msgSender(), spender, currentAllowance - subtractedValue);\\n        }\\n\\n        return true;\\n    }\\n\\n    /**\\n     * @dev Moves `amount` of tokens from `sender` to `recipient`.\\n     *\\n     * This internal function is equivalent to {transfer}, and can be used to\\n     * e.g. implement automatic token fees, slashing mechanisms, etc.\\n     *\\n     * Emits a {Transfer} event.\\n     *\\n     * Requirements:\\n     *\\n     * - `sender` cannot be the zero address.\\n     * - `recipient` cannot be the zero address.\\n     * - `sender` must have a balance of at least `amount`.\\n     */\\n    function _transfer(\\n        address sender,\\n        address recipient,\\n        uint256 amount\\n    ) internal virtual {\\n        require(sender != address(0), \\\"ERC20: transfer from the zero address\\\");\\n        require(recipient != address(0), \\\"ERC20: transfer to the zero address\\\");\\n\\n        _beforeTokenTransfer(sender, recipient, amount);\\n\\n        uint256 senderBalance = _balances[sender];\\n        require(senderBalance >= amount, \\\"ERC20: transfer amount exceeds balance\\\");\\n        unchecked {\\n            _balances[sender] = senderBalance - amount;\\n        }\\n        _balances[recipient] += amount;\\n\\n        emit Transfer(sender, recipient, amount);\\n\\n        _afterTokenTransfer(sender, recipient, amount);\\n    }\\n\\n    /** @dev Creates `amount` tokens and assigns them to `account`, increasing\\n     * the total supply.\\n     *\\n     * Emits a {Transfer} event with `from` set to the zero address.\\n     *\\n     * Requirements:\\n     *\\n     * - `account` cannot be the zero address.\\n     */\\n    function _mint(address account, uint256 amount) internal virtual {\\n        require(account != address(0), \\\"ERC20: mint to the zero address\\\");\\n\\n        _beforeTokenTransfer(address(0), account, amount);\\n\\n        _totalSupply += amount;\\n        _balances[account] += amount;\\n        emit Transfer(address(0), account, amount);\\n\\n        _afterTokenTransfer(address(0), account, amount);\\n    }\\n\\n    /**\\n     * @dev Destroys `amount` tokens from `account`, reducing the\\n     * total supply.\\n     *\\n     * Emits a {Transfer} event with `to` set to the zero address.\\n     *\\n     * Requirements:\\n     *\\n     * - `account` cannot be the zero address.\\n     * - `account` must have at least `amount` tokens.\\n     */\\n    function _burn(address account, uint256 amount) internal virtual {\\n        require(account != address(0), \\\"ERC20: burn from the zero address\\\");\\n\\n        _beforeTokenTransfer(account, address(0), amount);\\n\\n        uint256 accountBalance = _balances[account];\\n        require(accountBalance >= amount, \\\"ERC20: burn amount exceeds balance\\\");\\n        unchecked {\\n            _balances[account] = accountBalance - amount;\\n        }\\n        _totalSupply -= amount;\\n\\n        emit Transfer(account, address(0), amount);\\n\\n        _afterTokenTransfer(account, address(0), amount);\\n    }\\n\\n    /**\\n     * @dev Sets `amount` as the allowance of `spender` over the `owner` s tokens.\\n     *\\n     * This internal function is equivalent to `approve`, and can be used to\\n     * e.g. set automatic allowances for certain subsystems, etc.\\n     *\\n     * Emits an {Approval} event.\\n     *\\n     * Requirements:\\n     *\\n     * - `owner` cannot be the zero address.\\n     * - `spender` cannot be the zero address.\\n     */\\n    function _approve(\\n        address owner,\\n        address spender,\\n        uint256 amount\\n    ) internal virtual {\\n        require(owner != address(0), \\\"ERC20: approve from the zero address\\\");\\n        require(spender != address(0), \\\"ERC20: approve to the zero address\\\");\\n\\n        _allowances[owner][spender] = amount;\\n        emit Approval(owner, spender, amount);\\n    }\\n\\n    /**\\n     * @dev Hook that is called before any transfer of tokens. This includes\\n     * minting and burning.\\n     *\\n     * Calling conditions:\\n     *\\n     * - when `from` and `to` are both non-zero, `amount` of ``from``'s tokens\\n     * will be transferred to `to`.\\n     * - when `from` is zero, `amount` tokens will be minted for `to`.\\n     * - when `to` is zero, `amount` of ``from``'s tokens will be burned.\\n     * - `from` and `to` are never both zero.\\n     *\\n     * To learn more about hooks, head to xref:ROOT:extending-contracts.adoc#using-hooks[Using Hooks].\\n     */\\n    function _beforeTokenTransfer(\\n        address from,\\n        address to,\\n        uint256 amount\\n    ) internal virtual {}\\n\\n    /**\\n     * @dev Hook that is called after any transfer of tokens. This includes\\n     * minting and burning.\\n     *\\n     * Calling conditions:\\n     *\\n     * - when `from` and `to` are both non-zero, `amount` of ``from``'s tokens\\n     * has been transferred to `to`.\\n     * - when `from` is zero, `amount` tokens have been minted for `to`.\\n     * - when `to` is zero, `amount` of ``from``'s tokens have been burned.\\n     * - `from` and `to` are never both zero.\\n     *\\n     * To learn more about hooks, head to xref:ROOT:extending-contracts.adoc#using-hooks[Using Hooks].\\n     */\\n    function _afterTokenTransfer(\\n        address from,\\n        address to,\\n        uint256 amount\\n    ) internal virtual {}\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/access/Ownable.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../utils/Context.sol\\\";\\n\\n/**\\n * @dev Contract module which provides a basic access control mechanism, where\\n * there is an account (an owner) that can be granted exclusive access to\\n * specific functions.\\n *\\n * By default, the owner account will be the one that deploys the contract. This\\n * can later be changed with {transferOwnership}.\\n *\\n * This module is used through inheritance. It will make available the modifier\\n * `onlyOwner`, which can be applied to your functions to restrict their use to\\n * the owner.\\n */\\nabstract contract Ownable is Context {\\n    address private _owner;\\n\\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\\n\\n    /**\\n     * @dev Initializes the contract setting the deployer as the initial owner.\\n     */\\n    constructor() {\\n        _setOwner(_msgSender());\\n    }\\n\\n    /**\\n     * @dev Returns the address of the current owner.\\n     */\\n    function owner() public view virtual returns (address) {\\n        return _owner;\\n    }\\n\\n    /**\\n     * @dev Throws if called by any account other than the owner.\\n     */\\n    modifier onlyOwner() {\\n        require(owner() == _msgSender(), \\\"Ownable: caller is not the owner\\\");\\n        _;\\n    }\\n\\n    /**\\n     * @dev Leaves the contract without owner. It will not be possible to call\\n     * `onlyOwner` functions anymore. Can only be called by the current owner.\\n     *\\n     * NOTE: Renouncing ownership will leave the contract without an owner,\\n     * thereby removing any functionality that is only available to the owner.\\n     */\\n    function renounceOwnership() public virtual onlyOwner {\\n        _setOwner(address(0));\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Can only be called by the current owner.\\n     */\\n    function transferOwnership(address newOwner) public virtual onlyOwner {\\n        require(newOwner != address(0), \\\"Ownable: new owner is the zero address\\\");\\n        _setOwner(newOwner);\\n    }\\n\\n    function _setOwner(address newOwner) private {\\n        address oldOwner = _owner;\\n        _owner = newOwner;\\n        emit OwnershipTransferred(oldOwner, newOwner);\\n    }\\n}\\n\"\r\n    }\r\n  },\r\n  \"settings\": {\r\n    \"remappings\": [],\r\n    \"optimizer\": {\r\n      \"enabled\": true,\r\n      \"runs\": 200\r\n    },\r\n    \"evmVersion\": \"istanbul\",\r\n    \"libraries\": {},\r\n    \"outputSelection\": {\r\n      \"*\": {\r\n        \"*\": [\r\n          \"evm.bytecode\",\r\n          \"evm.deployedBytecode\",\r\n          \"devdoc\",\r\n          \"userdoc\",\r\n          \"metadata\",\r\n          \"abi\"\r\n        ]\r\n      }\r\n    }\r\n  }\r\n}}","ABI":"[{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address[]\",\"name\":\"_tokenOptions\",\"type\":\"address[]\"}],\"name\":\"AddTokenOptions\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"_creator\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"_contracts\",\"type\":\"address\"}],\"name\":\"Created\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"_token\",\"type\":\"address\"}],\"name\":\"RemoveTokenOptions\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_token\",\"type\":\"address\"}],\"name\":\"checkTokenOption\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"create\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_token\",\"type\":\"address\"}],\"name\":\"removeTokenOption\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address[]\",\"name\":\"_tokenOptions\",\"type\":\"address[]\"}],\"name\":\"setTokenOptions\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"tokenOptions\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}]","ContractName":"TscPool","CompilerVersion":"v0.8.0+commit.c7dfd78e","OptimizationUsed":"1","Runs":"200","ConstructorArguments":"","EVMVersion":"Default","Library":"","LicenseType":"","Proxy":"0","Implementation":"","SwarmSource":""}]}