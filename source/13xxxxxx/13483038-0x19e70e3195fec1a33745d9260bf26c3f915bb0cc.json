{"status":"1","message":"OK","result":[{"SourceCode":"// SPDX-License-Identifier: AGPL-3.0\r\n\r\npragma solidity 0.6.12;\r\npragma experimental ABIEncoderV2;\r\n\r\n\r\n\r\n// Part: IAddressResolver\r\n\r\n// https://docs.synthetix.io/contracts/source/interfaces/iaddressresolver\r\ninterface IAddressResolver {\r\n    function getAddress(bytes32 name) external view returns (address);\r\n\r\n    function getSynth(bytes32 key) external view returns (address);\r\n\r\n    function requireAndGetAddress(bytes32 name, string calldata reason)\r\n        external\r\n        view\r\n        returns (address);\r\n}\r\n\r\n// Part: IReadProxy\r\n\r\ninterface IReadProxy {\r\n    function target() external view returns (address);\r\n\r\n    function balanceOf(address owner) external view returns (uint256);\r\n\r\n    function approve(address spender, uint256 value) external returns (bool);\r\n}\r\n\r\n// Part: ISynth\r\n\r\ninterface ISynth {\r\n    // Views\r\n    function currencyKey() external view returns (bytes32);\r\n\r\n    function transferableSynths(address account)\r\n        external\r\n        view\r\n        returns (uint256);\r\n\r\n    // Mutative functions\r\n    function transferAndSettle(address to, uint256 value)\r\n        external\r\n        returns (bool);\r\n\r\n    function transferFromAndSettle(\r\n        address from,\r\n        address to,\r\n        uint256 value\r\n    ) external returns (bool);\r\n\r\n    // Restricted: used internally to Synthetix\r\n    function burn(address account, uint256 amount) external;\r\n\r\n    function issue(address account, uint256 amount) external;\r\n}\r\n\r\n// Part: ISynthetix\r\n\r\n// https://docs.synthetix.io/contracts/source/interfaces/isynthetix\r\ninterface ISynthetix {\r\n    // Views\r\n    function anySynthOrSNXRateIsInvalid()\r\n        external\r\n        view\r\n        returns (bool anyRateInvalid);\r\n\r\n    function availableCurrencyKeys() external view returns (bytes32[] memory);\r\n\r\n    function availableSynthCount() external view returns (uint256);\r\n\r\n    function collateral(address account) external view returns (uint256);\r\n\r\n    function collateralisationRatio(address issuer)\r\n        external\r\n        view\r\n        returns (uint256);\r\n\r\n    function debtBalanceOf(address issuer, bytes32 currencyKey)\r\n        external\r\n        view\r\n        returns (uint256);\r\n\r\n    function isWaitingPeriod(bytes32 currencyKey) external view returns (bool);\r\n\r\n    function maxIssuableSynths(address issuer)\r\n        external\r\n        view\r\n        returns (uint256 maxIssuable);\r\n\r\n    function remainingIssuableSynths(address issuer)\r\n        external\r\n        view\r\n        returns (\r\n            uint256 maxIssuable,\r\n            uint256 alreadyIssued,\r\n            uint256 totalSystemDebt\r\n        );\r\n\r\n    function synthsByAddress(address synthAddress)\r\n        external\r\n        view\r\n        returns (bytes32);\r\n\r\n    function totalIssuedSynths(bytes32 currencyKey)\r\n        external\r\n        view\r\n        returns (uint256);\r\n\r\n    function totalIssuedSynthsExcludeEtherCollateral(bytes32 currencyKey)\r\n        external\r\n        view\r\n        returns (uint256);\r\n\r\n    function transferableSynthetix(address account)\r\n        external\r\n        view\r\n        returns (uint256 transferable);\r\n\r\n    // Mutative Functions\r\n    function burnSynths(uint256 amount) external;\r\n\r\n    function burnSynthsOnBehalf(address burnForAddress, uint256 amount)\r\n        external;\r\n\r\n    function burnSynthsToTarget() external;\r\n\r\n    function burnSynthsToTargetOnBehalf(address burnForAddress) external;\r\n\r\n    function exchange(\r\n        bytes32 sourceCurrencyKey,\r\n        uint256 sourceAmount,\r\n        bytes32 destinationCurrencyKey\r\n    ) external returns (uint256 amountReceived);\r\n\r\n    function exchangeOnBehalf(\r\n        address exchangeForAddress,\r\n        bytes32 sourceCurrencyKey,\r\n        uint256 sourceAmount,\r\n        bytes32 destinationCurrencyKey\r\n    ) external returns (uint256 amountReceived);\r\n\r\n    function exchangeWithTracking(\r\n        bytes32 sourceCurrencyKey,\r\n        uint256 sourceAmount,\r\n        bytes32 destinationCurrencyKey,\r\n        address originator,\r\n        bytes32 trackingCode\r\n    ) external returns (uint256 amountReceived);\r\n\r\n    function exchangeOnBehalfWithTracking(\r\n        address exchangeForAddress,\r\n        bytes32 sourceCurrencyKey,\r\n        uint256 sourceAmount,\r\n        bytes32 destinationCurrencyKey,\r\n        address originator,\r\n        bytes32 trackingCode\r\n    ) external returns (uint256 amountReceived);\r\n\r\n    function exchangeWithTrackingForInitiator(\r\n        bytes32 sourceCurrencyKey,\r\n        uint256 sourceAmount,\r\n        bytes32 destinationCurrencyKey,\r\n        address rewardAddress,\r\n        bytes32 trackingCode\r\n    ) external returns (uint256 amountReceived);\r\n\r\n    function issueMaxSynths() external;\r\n\r\n    function issueMaxSynthsOnBehalf(address issueForAddress) external;\r\n\r\n    function issueSynths(uint256 amount) external;\r\n\r\n    function issueSynthsOnBehalf(address issueForAddress, uint256 amount)\r\n        external;\r\n\r\n    function mint() external returns (bool);\r\n\r\n    function settle(bytes32 currencyKey)\r\n        external\r\n        returns (\r\n            uint256 reclaimed,\r\n            uint256 refunded,\r\n            uint256 numEntries\r\n        );\r\n\r\n    // Liquidations\r\n    function liquidateDelinquentAccount(address account, uint256 susdAmount)\r\n        external\r\n        returns (bool);\r\n\r\n    // Restricted Functions\r\n\r\n    function mintSecondary(address account, uint256 amount) external;\r\n\r\n    function mintSecondaryRewards(uint256 amount) external;\r\n\r\n    function burnSecondary(address account, uint256 amount) external;\r\n}\r\n\r\n// Part: ISystemStatus\r\n\r\ninterface ISystemStatus {\r\n    function getSynthExchangeSuspensions(bytes32[] calldata synths)\r\n        external\r\n        view\r\n        returns (bool[] memory exchangeSuspensions, uint256[] memory reasons);\r\n}\r\n\r\n// Part: IUniV3\r\n\r\ninterface IUniV3 {\r\n    struct ExactInputParams {\r\n        bytes path;\r\n        address recipient;\r\n        uint256 deadline;\r\n        uint256 amountIn;\r\n        uint256 amountOutMinimum;\r\n    }\r\n\r\n    function exactInput(ExactInputParams calldata params)\r\n        external\r\n        payable\r\n        returns (uint256 amountOut);\r\n}\r\n\r\n// Part: IWeth\r\n\r\ninterface IWeth {\r\n    function deposit() external payable;\r\n\r\n    function withdraw(uint256 wad) external;\r\n}\r\n\r\n// Part: OpenZeppelin/openzeppelin-contracts@3.1.0/Address\r\n\r\n/**\r\n * @dev Collection of functions related to the address type\r\n */\r\nlibrary Address {\r\n    /**\r\n     * @dev Returns true if `account` is a contract.\r\n     *\r\n     * [IMPORTANT]\r\n     * ====\r\n     * It is unsafe to assume that an address for which this function returns\r\n     * false is an externally-owned account (EOA) and not a contract.\r\n     *\r\n     * Among others, `isContract` will return false for the following\r\n     * types of addresses:\r\n     *\r\n     *  - an externally-owned account\r\n     *  - a contract in construction\r\n     *  - an address where a contract will be created\r\n     *  - an address where a contract lived, but was destroyed\r\n     * ====\r\n     */\r\n    function isContract(address account) internal view returns (bool) {\r\n        // According to EIP-1052, 0x0 is the value returned for not-yet created accounts\r\n        // and 0xc5d2460186f7233c927e7db2dcc703c0e500b653ca82273b7bfad8045d85a470 is returned\r\n        // for accounts without code, i.e. `keccak256('')`\r\n        bytes32 codehash;\r\n        bytes32 accountHash = 0xc5d2460186f7233c927e7db2dcc703c0e500b653ca82273b7bfad8045d85a470;\r\n        // solhint-disable-next-line no-inline-assembly\r\n        assembly { codehash := extcodehash(account) }\r\n        return (codehash != accountHash && codehash != 0x0);\r\n    }\r\n\r\n    /**\r\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\r\n     * `recipient`, forwarding all available gas and reverting on errors.\r\n     *\r\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\r\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\r\n     * imposed by `transfer`, making them unable to receive funds via\r\n     * `transfer`. {sendValue} removes this limitation.\r\n     *\r\n     * https://diligence.consensys.net/posts/2019/09/stop-using-soliditys-transfer-now/[Learn more].\r\n     *\r\n     * IMPORTANT: because control is transferred to `recipient`, care must be\r\n     * taken to not create reentrancy vulnerabilities. Consider using\r\n     * {ReentrancyGuard} or the\r\n     * https://solidity.readthedocs.io/en/v0.5.11/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\r\n     */\r\n    function sendValue(address payable recipient, uint256 amount) internal {\r\n        require(address(this).balance >= amount, \"Address: insufficient balance\");\r\n\r\n        // solhint-disable-next-line avoid-low-level-calls, avoid-call-value\r\n        (bool success, ) = recipient.call{ value: amount }(\"\");\r\n        require(success, \"Address: unable to send value, recipient may have reverted\");\r\n    }\r\n\r\n    /**\r\n     * @dev Performs a Solidity function call using a low level `call`. A\r\n     * plain`call` is an unsafe replacement for a function call: use this\r\n     * function instead.\r\n     *\r\n     * If `target` reverts with a revert reason, it is bubbled up by this\r\n     * function (like regular Solidity function calls).\r\n     *\r\n     * Returns the raw returned data. To convert to the expected return value,\r\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - `target` must be a contract.\r\n     * - calling `target` with `data` must not revert.\r\n     *\r\n     * _Available since v3.1._\r\n     */\r\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\r\n      return functionCall(target, data, \"Address: low-level call failed\");\r\n    }\r\n\r\n    /**\r\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\r\n     * `errorMessage` as a fallback revert reason when `target` reverts.\r\n     *\r\n     * _Available since v3.1._\r\n     */\r\n    function functionCall(address target, bytes memory data, string memory errorMessage) internal returns (bytes memory) {\r\n        return _functionCallWithValue(target, data, 0, errorMessage);\r\n    }\r\n\r\n    /**\r\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\r\n     * but also transferring `value` wei to `target`.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - the calling contract must have an ETH balance of at least `value`.\r\n     * - the called Solidity function must be `payable`.\r\n     *\r\n     * _Available since v3.1._\r\n     */\r\n    function functionCallWithValue(address target, bytes memory data, uint256 value) internal returns (bytes memory) {\r\n        return functionCallWithValue(target, data, value, \"Address: low-level call with value failed\");\r\n    }\r\n\r\n    /**\r\n     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\r\n     * with `errorMessage` as a fallback revert reason when `target` reverts.\r\n     *\r\n     * _Available since v3.1._\r\n     */\r\n    function functionCallWithValue(address target, bytes memory data, uint256 value, string memory errorMessage) internal returns (bytes memory) {\r\n        require(address(this).balance >= value, \"Address: insufficient balance for call\");\r\n        return _functionCallWithValue(target, data, value, errorMessage);\r\n    }\r\n\r\n    function _functionCallWithValue(address target, bytes memory data, uint256 weiValue, string memory errorMessage) private returns (bytes memory) {\r\n        require(isContract(target), \"Address: call to non-contract\");\r\n\r\n        // solhint-disable-next-line avoid-low-level-calls\r\n        (bool success, bytes memory returndata) = target.call{ value: weiValue }(data);\r\n        if (success) {\r\n            return returndata;\r\n        } else {\r\n            // Look for revert reason and bubble it up if present\r\n            if (returndata.length > 0) {\r\n                // The easiest way to bubble the revert reason is using memory via assembly\r\n\r\n                // solhint-disable-next-line no-inline-assembly\r\n                assembly {\r\n                    let returndata_size := mload(returndata)\r\n                    revert(add(32, returndata), returndata_size)\r\n                }\r\n            } else {\r\n                revert(errorMessage);\r\n            }\r\n        }\r\n    }\r\n}\r\n\r\n// Part: OpenZeppelin/openzeppelin-contracts@3.1.0/IERC20\r\n\r\n/**\r\n * @dev Interface of the ERC20 standard as defined in the EIP.\r\n */\r\ninterface IERC20 {\r\n    /**\r\n     * @dev Returns the amount of tokens in existence.\r\n     */\r\n    function totalSupply() external view returns (uint256);\r\n\r\n    /**\r\n     * @dev Returns the amount of tokens owned by `account`.\r\n     */\r\n    function balanceOf(address account) external view returns (uint256);\r\n\r\n    /**\r\n     * @dev Moves `amount` tokens from the caller's account to `recipient`.\r\n     *\r\n     * Returns a boolean value indicating whether the operation succeeded.\r\n     *\r\n     * Emits a {Transfer} event.\r\n     */\r\n    function transfer(address recipient, uint256 amount) external returns (bool);\r\n\r\n    /**\r\n     * @dev Returns the remaining number of tokens that `spender` will be\r\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\r\n     * zero by default.\r\n     *\r\n     * This value changes when {approve} or {transferFrom} are called.\r\n     */\r\n    function allowance(address owner, address spender) external view returns (uint256);\r\n\r\n    /**\r\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\r\n     *\r\n     * Returns a boolean value indicating whether the operation succeeded.\r\n     *\r\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\r\n     * that someone may use both the old and the new allowance by unfortunate\r\n     * transaction ordering. One possible solution to mitigate this race\r\n     * condition is to first reduce the spender's allowance to 0 and set the\r\n     * desired value afterwards:\r\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\r\n     *\r\n     * Emits an {Approval} event.\r\n     */\r\n    function approve(address spender, uint256 amount) external returns (bool);\r\n\r\n    /**\r\n     * @dev Moves `amount` tokens from `sender` to `recipient` using the\r\n     * allowance mechanism. `amount` is then deducted from the caller's\r\n     * allowance.\r\n     *\r\n     * Returns a boolean value indicating whether the operation succeeded.\r\n     *\r\n     * Emits a {Transfer} event.\r\n     */\r\n    function transferFrom(address sender, address recipient, uint256 amount) external returns (bool);\r\n\r\n    /**\r\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\r\n     * another (`to`).\r\n     *\r\n     * Note that `value` may be zero.\r\n     */\r\n    event Transfer(address indexed from, address indexed to, uint256 value);\r\n\r\n    /**\r\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\r\n     * a call to {approve}. `value` is the new allowance.\r\n     */\r\n    event Approval(address indexed owner, address indexed spender, uint256 value);\r\n}\r\n\r\n// Part: OpenZeppelin/openzeppelin-contracts@3.1.0/SafeMath\r\n\r\n/**\r\n * @dev Wrappers over Solidity's arithmetic operations with added overflow\r\n * checks.\r\n *\r\n * Arithmetic operations in Solidity wrap on overflow. This can easily result\r\n * in bugs, because programmers usually assume that an overflow raises an\r\n * error, which is the standard behavior in high level programming languages.\r\n * `SafeMath` restores this intuition by reverting the transaction when an\r\n * operation overflows.\r\n *\r\n * Using this library instead of the unchecked operations eliminates an entire\r\n * class of bugs, so it's recommended to use it always.\r\n */\r\nlibrary SafeMath {\r\n    /**\r\n     * @dev Returns the addition of two unsigned integers, reverting on\r\n     * overflow.\r\n     *\r\n     * Counterpart to Solidity's `+` operator.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - Addition cannot overflow.\r\n     */\r\n    function add(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        uint256 c = a + b;\r\n        require(c >= a, \"SafeMath: addition overflow\");\r\n\r\n        return c;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the subtraction of two unsigned integers, reverting on\r\n     * overflow (when the result is negative).\r\n     *\r\n     * Counterpart to Solidity's `-` operator.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - Subtraction cannot overflow.\r\n     */\r\n    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        return sub(a, b, \"SafeMath: subtraction overflow\");\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the subtraction of two unsigned integers, reverting with custom message on\r\n     * overflow (when the result is negative).\r\n     *\r\n     * Counterpart to Solidity's `-` operator.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - Subtraction cannot overflow.\r\n     */\r\n    function sub(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\r\n        require(b <= a, errorMessage);\r\n        uint256 c = a - b;\r\n\r\n        return c;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the multiplication of two unsigned integers, reverting on\r\n     * overflow.\r\n     *\r\n     * Counterpart to Solidity's `*` operator.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - Multiplication cannot overflow.\r\n     */\r\n    function mul(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        // Gas optimization: this is cheaper than requiring 'a' not being zero, but the\r\n        // benefit is lost if 'b' is also tested.\r\n        // See: https://github.com/OpenZeppelin/openzeppelin-contracts/pull/522\r\n        if (a == 0) {\r\n            return 0;\r\n        }\r\n\r\n        uint256 c = a * b;\r\n        require(c / a == b, \"SafeMath: multiplication overflow\");\r\n\r\n        return c;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the integer division of two unsigned integers. Reverts on\r\n     * division by zero. The result is rounded towards zero.\r\n     *\r\n     * Counterpart to Solidity's `/` operator. Note: this function uses a\r\n     * `revert` opcode (which leaves remaining gas untouched) while Solidity\r\n     * uses an invalid opcode to revert (consuming all remaining gas).\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - The divisor cannot be zero.\r\n     */\r\n    function div(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        return div(a, b, \"SafeMath: division by zero\");\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the integer division of two unsigned integers. Reverts with custom message on\r\n     * division by zero. The result is rounded towards zero.\r\n     *\r\n     * Counterpart to Solidity's `/` operator. Note: this function uses a\r\n     * `revert` opcode (which leaves remaining gas untouched) while Solidity\r\n     * uses an invalid opcode to revert (consuming all remaining gas).\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - The divisor cannot be zero.\r\n     */\r\n    function div(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\r\n        require(b > 0, errorMessage);\r\n        uint256 c = a / b;\r\n        // assert(a == b * c + a % b); // There is no case in which this doesn't hold\r\n\r\n        return c;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\r\n     * Reverts when dividing by zero.\r\n     *\r\n     * Counterpart to Solidity's `%` operator. This function uses a `revert`\r\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\r\n     * invalid opcode to revert (consuming all remaining gas).\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - The divisor cannot be zero.\r\n     */\r\n    function mod(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        return mod(a, b, \"SafeMath: modulo by zero\");\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\r\n     * Reverts with custom message when dividing by zero.\r\n     *\r\n     * Counterpart to Solidity's `%` operator. This function uses a `revert`\r\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\r\n     * invalid opcode to revert (consuming all remaining gas).\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - The divisor cannot be zero.\r\n     */\r\n    function mod(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\r\n        require(b != 0, errorMessage);\r\n        return a % b;\r\n    }\r\n}\r\n\r\n// Part: ICurveFi\r\n\r\ninterface ICurveFi is IERC20 {\r\n    function get_virtual_price() external view returns (uint256);\r\n\r\n    function coins(uint256) external view returns (address);\r\n\r\n    function add_liquidity(\r\n        // EURt\r\n        uint256[2] calldata amounts,\r\n        uint256 min_mint_amount\r\n    ) external payable;\r\n\r\n    function add_liquidity(\r\n        // Compound, sAave\r\n        uint256[2] calldata amounts,\r\n        uint256 min_mint_amount,\r\n        bool _use_underlying\r\n    ) external payable returns (uint256);\r\n\r\n    function add_liquidity(\r\n        // Iron Bank, Aave\r\n        uint256[3] calldata amounts,\r\n        uint256 min_mint_amount,\r\n        bool _use_underlying\r\n    ) external payable returns (uint256);\r\n\r\n    function add_liquidity(\r\n        // 3Crv Metapools\r\n        address pool,\r\n        uint256[4] calldata amounts,\r\n        uint256 min_mint_amount\r\n    ) external;\r\n\r\n    function add_liquidity(\r\n        // Y and yBUSD\r\n        uint256[4] calldata amounts,\r\n        uint256 min_mint_amount,\r\n        bool _use_underlying\r\n    ) external payable returns (uint256);\r\n\r\n    function add_liquidity(\r\n        // 3pool\r\n        uint256[3] calldata amounts,\r\n        uint256 min_mint_amount\r\n    ) external payable;\r\n\r\n    function add_liquidity(\r\n        // sUSD\r\n        uint256[4] calldata amounts,\r\n        uint256 min_mint_amount\r\n    ) external payable;\r\n\r\n    function remove_liquidity_imbalance(\r\n        uint256[2] calldata amounts,\r\n        uint256 max_burn_amount\r\n    ) external;\r\n\r\n    function remove_liquidity(uint256 _amount, uint256[2] calldata amounts)\r\n        external;\r\n\r\n    function remove_liquidity_one_coin(\r\n        uint256 _token_amount,\r\n        int128 i,\r\n        uint256 min_amount\r\n    ) external;\r\n\r\n    function exchange(\r\n        int128 from,\r\n        int128 to,\r\n        uint256 _from_amount,\r\n        uint256 _min_to_amount\r\n    ) external;\r\n\r\n    function balances(uint256) external view returns (uint256);\r\n\r\n    function get_dy(\r\n        int128 from,\r\n        int128 to,\r\n        uint256 _from_amount\r\n    ) external view returns (uint256);\r\n\r\n    // EURt\r\n    function calc_token_amount(uint256[2] calldata _amounts, bool _is_deposit)\r\n        external\r\n        view\r\n        returns (uint256);\r\n\r\n    // 3Crv Metapools\r\n    function calc_token_amount(\r\n        address _pool,\r\n        uint256[4] calldata _amounts,\r\n        bool _is_deposit\r\n    ) external view returns (uint256);\r\n\r\n    // sUSD, Y pool, etc\r\n    function calc_token_amount(uint256[4] calldata _amounts, bool _is_deposit)\r\n        external\r\n        view\r\n        returns (uint256);\r\n\r\n    // 3pool, Iron Bank, etc\r\n    function calc_token_amount(uint256[3] calldata _amounts, bool _is_deposit)\r\n        external\r\n        view\r\n        returns (uint256);\r\n\r\n    function calc_withdraw_one_coin(uint256 amount, int128 i)\r\n        external\r\n        view\r\n        returns (uint256);\r\n}\r\n\r\n// Part: IVault\r\n\r\ninterface IVault is IERC20 {\r\n    // NOTE: Vyper produces multiple signatures for a given function with \"default\" args\r\n    function deposit() external returns (uint256);\r\n\r\n    function deposit(uint256 amount) external returns (uint256);\r\n\r\n    function deposit(uint256 amount, address recipient)\r\n        external\r\n        returns (uint256);\r\n\r\n    function withdraw() external returns (uint256);\r\n\r\n    function token() external view returns (address);\r\n}\r\n\r\n// Part: IVirtualSynth\r\n\r\ninterface IVirtualSynth {\r\n    // Views\r\n    function balanceOfUnderlying(address account)\r\n        external\r\n        view\r\n        returns (uint256);\r\n\r\n    function rate() external view returns (uint256);\r\n\r\n    function readyToSettle() external view returns (bool);\r\n\r\n    function secsLeftInWaitingPeriod() external view returns (uint256);\r\n\r\n    function settled() external view returns (bool);\r\n\r\n    function synth() external view returns (ISynth);\r\n\r\n    // Mutative functions\r\n    function settle(address account) external;\r\n}\r\n\r\n// Part: OpenZeppelin/openzeppelin-contracts@3.1.0/SafeERC20\r\n\r\n/**\r\n * @title SafeERC20\r\n * @dev Wrappers around ERC20 operations that throw on failure (when the token\r\n * contract returns false). Tokens that return no value (and instead revert or\r\n * throw on failure) are also supported, non-reverting calls are assumed to be\r\n * successful.\r\n * To use this library you can add a `using SafeERC20 for IERC20;` statement to your contract,\r\n * which allows you to call the safe operations as `token.safeTransfer(...)`, etc.\r\n */\r\nlibrary SafeERC20 {\r\n    using SafeMath for uint256;\r\n    using Address for address;\r\n\r\n    function safeTransfer(IERC20 token, address to, uint256 value) internal {\r\n        _callOptionalReturn(token, abi.encodeWithSelector(token.transfer.selector, to, value));\r\n    }\r\n\r\n    function safeTransferFrom(IERC20 token, address from, address to, uint256 value) internal {\r\n        _callOptionalReturn(token, abi.encodeWithSelector(token.transferFrom.selector, from, to, value));\r\n    }\r\n\r\n    /**\r\n     * @dev Deprecated. This function has issues similar to the ones found in\r\n     * {IERC20-approve}, and its usage is discouraged.\r\n     *\r\n     * Whenever possible, use {safeIncreaseAllowance} and\r\n     * {safeDecreaseAllowance} instead.\r\n     */\r\n    function safeApprove(IERC20 token, address spender, uint256 value) internal {\r\n        // safeApprove should only be called when setting an initial allowance,\r\n        // or when resetting it to zero. To increase and decrease it, use\r\n        // 'safeIncreaseAllowance' and 'safeDecreaseAllowance'\r\n        // solhint-disable-next-line max-line-length\r\n        require((value == 0) || (token.allowance(address(this), spender) == 0),\r\n            \"SafeERC20: approve from non-zero to non-zero allowance\"\r\n        );\r\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, value));\r\n    }\r\n\r\n    function safeIncreaseAllowance(IERC20 token, address spender, uint256 value) internal {\r\n        uint256 newAllowance = token.allowance(address(this), spender).add(value);\r\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));\r\n    }\r\n\r\n    function safeDecreaseAllowance(IERC20 token, address spender, uint256 value) internal {\r\n        uint256 newAllowance = token.allowance(address(this), spender).sub(value, \"SafeERC20: decreased allowance below zero\");\r\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));\r\n    }\r\n\r\n    /**\r\n     * @dev Imitates a Solidity high-level call (i.e. a regular function call to a contract), relaxing the requirement\r\n     * on the return value: the return value is optional (but if data is returned, it must not be false).\r\n     * @param token The token targeted by the call.\r\n     * @param data The call data (encoded using abi.encode or one of its variants).\r\n     */\r\n    function _callOptionalReturn(IERC20 token, bytes memory data) private {\r\n        // We need to perform a low level call here, to bypass Solidity's return data size checking mechanism, since\r\n        // we're implementing it ourselves. We use {Address.functionCall} to perform this call, which verifies that\r\n        // the target address contains contract code and also asserts for success in the low-level call.\r\n\r\n        bytes memory returndata = address(token).functionCall(data, \"SafeERC20: low-level call failed\");\r\n        if (returndata.length > 0) { // Return data is optional\r\n            // solhint-disable-next-line max-line-length\r\n            require(abi.decode(returndata, (bool)), \"SafeERC20: ERC20 operation did not succeed\");\r\n        }\r\n    }\r\n}\r\n\r\n// Part: IExchanger\r\n\r\n// https://docs.synthetix.io/contracts/source/interfaces/iexchanger\r\ninterface IExchanger {\r\n    // Views\r\n    function calculateAmountAfterSettlement(\r\n        address from,\r\n        bytes32 currencyKey,\r\n        uint256 amount,\r\n        uint256 refunded\r\n    ) external view returns (uint256 amountAfterSettlement);\r\n\r\n    function isSynthRateInvalid(bytes32 currencyKey)\r\n        external\r\n        view\r\n        returns (bool);\r\n\r\n    function maxSecsLeftInWaitingPeriod(address account, bytes32 currencyKey)\r\n        external\r\n        view\r\n        returns (uint256);\r\n\r\n    function settlementOwing(address account, bytes32 currencyKey)\r\n        external\r\n        view\r\n        returns (\r\n            uint256 reclaimAmount,\r\n            uint256 rebateAmount,\r\n            uint256 numEntries\r\n        );\r\n\r\n    function hasWaitingPeriodOrSettlementOwing(\r\n        address account,\r\n        bytes32 currencyKey\r\n    ) external view returns (bool);\r\n\r\n    function feeRateForExchange(\r\n        bytes32 sourceCurrencyKey,\r\n        bytes32 destinationCurrencyKey\r\n    ) external view returns (uint256 exchangeFeeRate);\r\n\r\n    function getAmountsForExchange(\r\n        uint256 sourceAmount,\r\n        bytes32 sourceCurrencyKey,\r\n        bytes32 destinationCurrencyKey\r\n    )\r\n        external\r\n        view\r\n        returns (\r\n            uint256 amountReceived,\r\n            uint256 fee,\r\n            uint256 exchangeFeeRate\r\n        );\r\n\r\n    function priceDeviationThresholdFactor() external view returns (uint256);\r\n\r\n    function waitingPeriodSecs() external view returns (uint256);\r\n\r\n    // Mutative functions\r\n    function exchange(\r\n        address from,\r\n        bytes32 sourceCurrencyKey,\r\n        uint256 sourceAmount,\r\n        bytes32 destinationCurrencyKey,\r\n        address destinationAddress\r\n    ) external returns (uint256 amountReceived);\r\n\r\n    function exchangeOnBehalf(\r\n        address exchangeForAddress,\r\n        address from,\r\n        bytes32 sourceCurrencyKey,\r\n        uint256 sourceAmount,\r\n        bytes32 destinationCurrencyKey\r\n    ) external returns (uint256 amountReceived);\r\n\r\n    function exchangeWithTracking(\r\n        address from,\r\n        bytes32 sourceCurrencyKey,\r\n        uint256 sourceAmount,\r\n        bytes32 destinationCurrencyKey,\r\n        address destinationAddress,\r\n        address originator,\r\n        bytes32 trackingCode\r\n    ) external returns (uint256 amountReceived);\r\n\r\n    function exchangeOnBehalfWithTracking(\r\n        address exchangeForAddress,\r\n        address from,\r\n        bytes32 sourceCurrencyKey,\r\n        uint256 sourceAmount,\r\n        bytes32 destinationCurrencyKey,\r\n        address originator,\r\n        bytes32 trackingCode\r\n    ) external returns (uint256 amountReceived);\r\n\r\n    function exchangeWithVirtual(\r\n        address from,\r\n        bytes32 sourceCurrencyKey,\r\n        uint256 sourceAmount,\r\n        bytes32 destinationCurrencyKey,\r\n        address destinationAddress,\r\n        bytes32 trackingCode\r\n    ) external returns (uint256 amountReceived, IVirtualSynth vSynth);\r\n\r\n    function settle(address from, bytes32 currencyKey)\r\n        external\r\n        returns (\r\n            uint256 reclaimed,\r\n            uint256 refunded,\r\n            uint256 numEntries\r\n        );\r\n\r\n    function setLastExchangeRateForSynth(bytes32 currencyKey, uint256 rate)\r\n        external;\r\n\r\n    function resetLastExchangeRate(bytes32[] calldata currencyKeys) external;\r\n\r\n    function suspendSynthWithInvalidRate(bytes32 currencyKey) external;\r\n}\r\n\r\n// File: FixedForexZap.sol\r\n\r\ncontract FixedForexZap {\r\n    using SafeERC20 for IERC20;\r\n    using Address for address;\r\n    using SafeMath for uint256;\r\n\r\n    /* ========== STATE VARIABLES ========== */\r\n\r\n    IReadProxy internal constant readProxy =\r\n        IReadProxy(0x4E3b31eB0E5CB73641EE1E65E7dCEFe520bA3ef2);\r\n    ISystemStatus internal constant systemStatus =\r\n        ISystemStatus(0x1c86B3CDF2a60Ae3a574f7f71d44E2C50BDdB87E); // this is how we check if our market is closed\r\n\r\n    bytes32 internal constant TRACKING_CODE = \"YEARN\"; // this is our referral code for SNX volume incentives\r\n    bytes32 internal constant CONTRACT_SYNTHETIX = \"Synthetix\";\r\n    bytes32 internal constant CONTRACT_EXCHANGER = \"Exchanger\";\r\n\r\n    address internal constant uniswapv3 =\r\n        0xE592427A0AEce92De3Edee1F18E0157C05861564;\r\n\r\n    /* ========== CONSTRUCTOR ========== */\r\n\r\n    constructor() public {\r\n        // approve the uniV3 router to spend our zap tokens and our sETH (for zapping out)\r\n        IERC20 weth = IERC20(0xC02aaA39b223FE8D0A0e5C4F27eAD9083C756Cc2);\r\n        IERC20 wbtc = IERC20(0x2260FAC5E5542a773Aa44fBCfeDf7C193bc2C599);\r\n        IERC20 dai = IERC20(0x6B175474E89094C44Da98b954EedeAC495271d0F);\r\n        IERC20 usdc = IERC20(0xA0b86991c6218b36c1d19D4a2e9Eb0cE3606eB48);\r\n        IERC20 usdt = IERC20(0xdAC17F958D2ee523a2206206994597C13D831ec7);\r\n        IERC20 seth = IERC20(0x5e74C9036fb86BD7eCdcb084a0673EFc32eA31cb);\r\n\r\n        weth.approve(uniswapv3, type(uint256).max);\r\n        usdc.approve(uniswapv3, type(uint256).max);\r\n        dai.approve(uniswapv3, type(uint256).max);\r\n        usdt.safeApprove(uniswapv3, type(uint256).max);\r\n        wbtc.approve(uniswapv3, type(uint256).max);\r\n        seth.approve(uniswapv3, type(uint256).max);\r\n\r\n        // approve our curve LPs to spend our synths\r\n        IERC20 aud = IERC20(0xF48e200EAF9906362BB1442fca31e0835773b8B4);\r\n        IERC20 chf = IERC20(0x0F83287FF768D1c1e17a42F44d644D7F22e8ee1d);\r\n        IERC20 eur = IERC20(0xD71eCFF9342A5Ced620049e616c5035F1dB98620);\r\n        IERC20 gbp = IERC20(0x97fe22E7341a0Cd8Db6F6C021A24Dc8f4DAD855F);\r\n        IERC20 jpy = IERC20(0xF6b1C627e95BFc3c1b4c9B825a032Ff0fBf3e07d);\r\n        IERC20 krw = IERC20(0x269895a3dF4D73b077Fc823dD6dA1B95f72Aaf9B);\r\n\r\n        aud.approve(\r\n            address(0x3F1B0278A9ee595635B61817630cC19DE792f506),\r\n            type(uint256).max\r\n        );\r\n        chf.approve(\r\n            address(0x9c2C8910F113181783c249d8F6Aa41b51Cde0f0c),\r\n            type(uint256).max\r\n        );\r\n        eur.approve(\r\n            address(0x19b080FE1ffA0553469D20Ca36219F17Fcf03859),\r\n            type(uint256).max\r\n        );\r\n        gbp.approve(\r\n            address(0xD6Ac1CB9019137a896343Da59dDE6d097F710538),\r\n            type(uint256).max\r\n        );\r\n        jpy.approve(\r\n            address(0x8818a9bb44Fbf33502bE7c15c500d0C783B73067),\r\n            type(uint256).max\r\n        );\r\n        krw.approve(\r\n            address(0x8461A004b50d321CB22B7d034969cE6803911899),\r\n            type(uint256).max\r\n        );\r\n\r\n        // approve our vaults to spend our curve LPs\r\n        aud = IERC20(0x3F1B0278A9ee595635B61817630cC19DE792f506);\r\n        chf = IERC20(0x9c2C8910F113181783c249d8F6Aa41b51Cde0f0c);\r\n        eur = IERC20(0x19b080FE1ffA0553469D20Ca36219F17Fcf03859);\r\n        gbp = IERC20(0xD6Ac1CB9019137a896343Da59dDE6d097F710538);\r\n        jpy = IERC20(0x8818a9bb44Fbf33502bE7c15c500d0C783B73067);\r\n        krw = IERC20(0x8461A004b50d321CB22B7d034969cE6803911899);\r\n\r\n        aud.approve(\r\n            address(0x1b905331F7dE2748F4D6a0678e1521E20347643F),\r\n            type(uint256).max\r\n        );\r\n        chf.approve(\r\n            address(0x490bD0886F221A5F79713D3E84404355A9293C50),\r\n            type(uint256).max\r\n        );\r\n        eur.approve(\r\n            address(0x67e019bfbd5a67207755D04467D6A70c0B75bF60),\r\n            type(uint256).max\r\n        );\r\n        gbp.approve(\r\n            address(0x595a68a8c9D5C230001848B69b1947ee2A607164),\r\n            type(uint256).max\r\n        );\r\n        jpy.approve(\r\n            address(0x59518884EeBFb03e90a18ADBAAAB770d4666471e),\r\n            type(uint256).max\r\n        );\r\n        krw.approve(\r\n            address(0x528D50dC9a333f01544177a924893FA1F5b9F748),\r\n            type(uint256).max\r\n        );\r\n    }\r\n\r\n    /* ========== ZAP IN ========== */\r\n\r\n    // zap in for sETH\r\n    function zapIn(\r\n        address _inputToken,\r\n        uint256 _amount,\r\n        address _vaultToken\r\n    ) public payable {\r\n        require(_amount > 0 || msg.value > 0); // dev: invalid token or ETH amount\r\n\r\n        if (_inputToken == 0xEeeeeEeeeEeEeeEeEeEeeEEEeeeeEeeeeeeeEEeE) {\r\n            // if we start with ETH\r\n            //convert ETH to WETH\r\n            IWeth weth = IWeth(0xC02aaA39b223FE8D0A0e5C4F27eAD9083C756Cc2);\r\n            _amount = msg.value;\r\n            weth.deposit{value: _amount}();\r\n\r\n            // swap for sETH\r\n            IUniV3(uniswapv3).exactInput(\r\n                IUniV3.ExactInputParams(\r\n                    abi.encodePacked(\r\n                        address(0xC02aaA39b223FE8D0A0e5C4F27eAD9083C756Cc2), // weth\r\n                        uint24(500),\r\n                        address(0x5e74C9036fb86BD7eCdcb084a0673EFc32eA31cb) // sETH\r\n                    ),\r\n                    address(this),\r\n                    block.timestamp,\r\n                    _amount,\r\n                    uint256(1)\r\n                )\r\n            );\r\n        } else if (\r\n            // this is if we start with WETH\r\n            _inputToken == address(0xC02aaA39b223FE8D0A0e5C4F27eAD9083C756Cc2)\r\n        ) {\r\n            //transfer token\r\n            IERC20(_inputToken).safeTransferFrom(\r\n                msg.sender,\r\n                address(this),\r\n                _amount\r\n            );\r\n\r\n            // swap for sETH\r\n            IUniV3(uniswapv3).exactInput(\r\n                IUniV3.ExactInputParams(\r\n                    abi.encodePacked(\r\n                        address(_inputToken),\r\n                        uint24(500),\r\n                        address(0x5e74C9036fb86BD7eCdcb084a0673EFc32eA31cb) // sETH\r\n                    ),\r\n                    address(this),\r\n                    block.timestamp,\r\n                    _amount,\r\n                    uint256(1)\r\n                )\r\n            );\r\n        } else if (\r\n            // this is DAI, 0.3% is much better liquidity sadly\r\n            _inputToken == address(0x6B175474E89094C44Da98b954EedeAC495271d0F)\r\n        ) {\r\n            //transfer token\r\n            IERC20(_inputToken).safeTransferFrom(\r\n                msg.sender,\r\n                address(this),\r\n                _amount\r\n            );\r\n\r\n            // swap for sETH\r\n            IUniV3(uniswapv3).exactInput(\r\n                IUniV3.ExactInputParams(\r\n                    abi.encodePacked(\r\n                        address(_inputToken),\r\n                        uint24(3000),\r\n                        address(0xC02aaA39b223FE8D0A0e5C4F27eAD9083C756Cc2), // weth\r\n                        uint24(500),\r\n                        address(0x5e74C9036fb86BD7eCdcb084a0673EFc32eA31cb) // sETH\r\n                    ),\r\n                    address(this),\r\n                    block.timestamp,\r\n                    _amount,\r\n                    uint256(1)\r\n                )\r\n            );\r\n        } else {\r\n            //transfer token\r\n            IERC20(_inputToken).safeTransferFrom(\r\n                msg.sender,\r\n                address(this),\r\n                _amount\r\n            );\r\n\r\n            // this is if we start with any token but WETH or DAI\r\n            IUniV3(uniswapv3).exactInput(\r\n                IUniV3.ExactInputParams(\r\n                    abi.encodePacked(\r\n                        address(_inputToken),\r\n                        uint24(500),\r\n                        address(0xC02aaA39b223FE8D0A0e5C4F27eAD9083C756Cc2), // weth\r\n                        uint24(500),\r\n                        address(0x5e74C9036fb86BD7eCdcb084a0673EFc32eA31cb) // sETH\r\n                    ),\r\n                    address(this),\r\n                    block.timestamp,\r\n                    _amount,\r\n                    uint256(1)\r\n                )\r\n            );\r\n        }\r\n        // check our output balance of sETH\r\n        IERC20 seth = IERC20(0x5e74C9036fb86BD7eCdcb084a0673EFc32eA31cb);\r\n        uint256 _sEthBalance = seth.balanceOf(address(this));\r\n\r\n        // generate our synth currency key to check if enough time has elapsed\r\n        address _synth;\r\n        bytes32 _synthCurrencyKey;\r\n        if (_vaultToken == 0x1b905331F7dE2748F4D6a0678e1521E20347643F) {\r\n            // sAUD\r\n            _synth = 0xF48e200EAF9906362BB1442fca31e0835773b8B4;\r\n            _synthCurrencyKey = \"sAUD\";\r\n        } else if (_vaultToken == 0x490bD0886F221A5F79713D3E84404355A9293C50) {\r\n            // sCHF\r\n            _synth = 0x0F83287FF768D1c1e17a42F44d644D7F22e8ee1d;\r\n            _synthCurrencyKey = \"sCHF\";\r\n        } else if (_vaultToken == 0x67e019bfbd5a67207755D04467D6A70c0B75bF60) {\r\n            // sEUR\r\n            _synth = 0xD71eCFF9342A5Ced620049e616c5035F1dB98620;\r\n            _synthCurrencyKey = \"sEUR\";\r\n        } else if (_vaultToken == 0x595a68a8c9D5C230001848B69b1947ee2A607164) {\r\n            // sGBP\r\n            _synth = 0x97fe22E7341a0Cd8Db6F6C021A24Dc8f4DAD855F;\r\n            _synthCurrencyKey = \"sGBP\";\r\n        } else if (_vaultToken == 0x59518884EeBFb03e90a18ADBAAAB770d4666471e) {\r\n            // sJPY\r\n            _synth = 0xF6b1C627e95BFc3c1b4c9B825a032Ff0fBf3e07d;\r\n            _synthCurrencyKey = \"sJPY\";\r\n        } else if (_vaultToken == 0x528D50dC9a333f01544177a924893FA1F5b9F748) {\r\n            // sKRW\r\n            _synth = 0x269895a3dF4D73b077Fc823dD6dA1B95f72Aaf9B;\r\n            _synthCurrencyKey = \"sKRW\";\r\n        } else {\r\n            require(false); // dev: not a Fixed Forex vault token\r\n        }\r\n\r\n        // check if our forex markets are open\r\n        require(!isMarketClosed(_synth)); // dev: synthetix forex markets currently closed\r\n\r\n        // swap our sETH for our underlying synth\r\n        exchangeSEthToSynth(_sEthBalance, _synthCurrencyKey);\r\n    }\r\n\r\n    function exchangeSEthToSynth(uint256 _amount, bytes32 _synthCurrencyKey)\r\n        internal\r\n    {\r\n        // swap amount of sETH for Synth\r\n        require(_amount > 0); // dev: invalid token or ETH amount\r\n\r\n        bytes32 _sethCurrencyKey = \"sETH\";\r\n\r\n        _synthetix().exchangeWithTrackingForInitiator(\r\n            _sethCurrencyKey,\r\n            _amount,\r\n            _synthCurrencyKey,\r\n            address(0x16388463d60FFE0661Cf7F1f31a7D658aC790ff7),\r\n            TRACKING_CODE\r\n        );\r\n    }\r\n\r\n    function synthToVault(address _synth, uint256 _amount) external {\r\n        require(_amount > 0); // dev: invalid token or ETH amount\r\n        // make sure the user has the synth needed\r\n        address _user = msg.sender;\r\n        IERC20 synth = IERC20(_synth);\r\n        uint256 _synthBalance = synth.balanceOf(_user);\r\n        require(_synthBalance > 0); // dev: you don't hold any of the specified synth\r\n        synth.transferFrom(_user, address(this), _amount);\r\n\r\n        // generate our synth currency key first to check if enough time has elapsed\r\n        bytes32 _synthCurrencyKey;\r\n        if (_synth == 0xF48e200EAF9906362BB1442fca31e0835773b8B4) {\r\n            // sAUD\r\n            _synthCurrencyKey = \"sAUD\";\r\n        } else if (_synth == 0x0F83287FF768D1c1e17a42F44d644D7F22e8ee1d) {\r\n            // sCHF\r\n            _synthCurrencyKey = \"sCHF\";\r\n        } else if (_synth == 0xD71eCFF9342A5Ced620049e616c5035F1dB98620) {\r\n            // sEUR\r\n            _synthCurrencyKey = \"sEUR\";\r\n        } else if (_synth == 0x97fe22E7341a0Cd8Db6F6C021A24Dc8f4DAD855F) {\r\n            // sGBP\r\n            _synthCurrencyKey = \"sGBP\";\r\n        } else if (_synth == 0xF6b1C627e95BFc3c1b4c9B825a032Ff0fBf3e07d) {\r\n            // sJPY\r\n            _synthCurrencyKey = \"sJPY\";\r\n        } else if (_synth == 0x269895a3dF4D73b077Fc823dD6dA1B95f72Aaf9B) {\r\n            // sKRW\r\n            _synthCurrencyKey = \"sKRW\";\r\n        } else {\r\n            require(false); // dev: not a Fixed Forex synth\r\n        }\r\n\r\n        // deposit our sToken to Curve but only if our trade has finalized\r\n        require(checkWaitingPeriod(msg.sender, _synthCurrencyKey)); // dev: wait ~6mins for trade to finalize on synthetix\r\n\r\n        if (_synth == 0xF48e200EAF9906362BB1442fca31e0835773b8B4) {\r\n            // sAUD\r\n            ICurveFi curve =\r\n                ICurveFi(0x3F1B0278A9ee595635B61817630cC19DE792f506); // Curve LP/Pool\r\n            curve.add_liquidity([0, _amount], 0);\r\n            uint256 _poolBalance = curve.balanceOf(address(this));\r\n            IVault(0x1b905331F7dE2748F4D6a0678e1521E20347643F).deposit(\r\n                _poolBalance,\r\n                _user\r\n            );\r\n        } else if (_synth == 0x0F83287FF768D1c1e17a42F44d644D7F22e8ee1d) {\r\n            // sCHF\r\n            ICurveFi curve =\r\n                ICurveFi(0x9c2C8910F113181783c249d8F6Aa41b51Cde0f0c); // Curve LP/Pool\r\n            curve.add_liquidity([0, _amount], 0);\r\n            uint256 _poolBalance = curve.balanceOf(address(this));\r\n            IVault(0x490bD0886F221A5F79713D3E84404355A9293C50).deposit(\r\n                _poolBalance,\r\n                _user\r\n            );\r\n        } else if (_synth == 0xD71eCFF9342A5Ced620049e616c5035F1dB98620) {\r\n            // sEUR\r\n            ICurveFi curve =\r\n                ICurveFi(0x19b080FE1ffA0553469D20Ca36219F17Fcf03859); // Curve LP/Pool\r\n            curve.add_liquidity([0, _amount], 0);\r\n            uint256 _poolBalance = curve.balanceOf(address(this));\r\n            IVault(0x67e019bfbd5a67207755D04467D6A70c0B75bF60).deposit(\r\n                _poolBalance,\r\n                _user\r\n            );\r\n        } else if (_synth == 0x97fe22E7341a0Cd8Db6F6C021A24Dc8f4DAD855F) {\r\n            // sGBP\r\n            ICurveFi curve =\r\n                ICurveFi(0xD6Ac1CB9019137a896343Da59dDE6d097F710538); // Curve LP/Pool\r\n            curve.add_liquidity([0, _amount], 0);\r\n            uint256 _poolBalance = curve.balanceOf(address(this));\r\n            IVault(0x595a68a8c9D5C230001848B69b1947ee2A607164).deposit(\r\n                _poolBalance,\r\n                _user\r\n            );\r\n        } else if (_synth == 0xF6b1C627e95BFc3c1b4c9B825a032Ff0fBf3e07d) {\r\n            // sJPY\r\n            ICurveFi curve =\r\n                ICurveFi(0x8818a9bb44Fbf33502bE7c15c500d0C783B73067); // Curve LP/Pool\r\n            curve.add_liquidity([0, _amount], 0);\r\n            uint256 _poolBalance = curve.balanceOf(address(this));\r\n            IVault(0x59518884EeBFb03e90a18ADBAAAB770d4666471e).deposit(\r\n                _poolBalance,\r\n                _user\r\n            );\r\n        } else {\r\n            // sKRW\r\n            ICurveFi curve =\r\n                ICurveFi(0x8461A004b50d321CB22B7d034969cE6803911899); // Curve LP/Pool\r\n            curve.add_liquidity([0, _amount], 0);\r\n            uint256 _poolBalance = curve.balanceOf(address(this));\r\n            IVault(0x528D50dC9a333f01544177a924893FA1F5b9F748).deposit(\r\n                _poolBalance,\r\n                _user\r\n            );\r\n        }\r\n    }\r\n\r\n    /* ========== ZAP OUT ========== */\r\n\r\n    // zap our tokens for sETH\r\n    function zapOut(address _vaultToken, uint256 _amount) external {\r\n        require(_amount > 0); // dev: invalid token or ETH amount\r\n        address _user = msg.sender;\r\n\r\n        // withdraw from our vault\r\n        IVault _vault = IVault(_vaultToken);\r\n        _vault.transferFrom(_user, address(this), _amount);\r\n        _vault.withdraw();\r\n\r\n        // withdraw from our Curve pool\r\n        ICurveFi curve = ICurveFi(_vault.token()); // our curve pool is the underlying token for our vault\r\n        uint256 _poolBalance = curve.balanceOf(address(this));\r\n        curve.remove_liquidity_one_coin(_poolBalance, 1, 0);\r\n\r\n        // check our output balance of synth\r\n        address _synth = curve.coins(1); // our synth is the second token in each of the curve pools\r\n        IERC20 synth = IERC20(_synth);\r\n        uint256 _synthBalance = synth.balanceOf(address(this));\r\n\r\n        // generate our synth currency key to check if enough time has elapsed\r\n        bytes32 _synthCurrencyKey;\r\n        if (_vaultToken == 0x1b905331F7dE2748F4D6a0678e1521E20347643F) {\r\n            // sAUD\r\n            _synthCurrencyKey = \"sAUD\";\r\n        } else if (_vaultToken == 0x490bD0886F221A5F79713D3E84404355A9293C50) {\r\n            // sCHF\r\n            _synthCurrencyKey = \"sCHF\";\r\n        } else if (_vaultToken == 0x67e019bfbd5a67207755D04467D6A70c0B75bF60) {\r\n            // sEUR\r\n            _synthCurrencyKey = \"sEUR\";\r\n        } else if (_vaultToken == 0x595a68a8c9D5C230001848B69b1947ee2A607164) {\r\n            // sGBP\r\n            _synthCurrencyKey = \"sGBP\";\r\n        } else if (_vaultToken == 0x59518884EeBFb03e90a18ADBAAAB770d4666471e) {\r\n            // sJPY\r\n            _synthCurrencyKey = \"sJPY\";\r\n        } else if (_vaultToken == 0x528D50dC9a333f01544177a924893FA1F5b9F748) {\r\n            // sKRW\r\n            _synthCurrencyKey = \"sKRW\";\r\n        } else {\r\n            require(false); // dev: not a Fixed Forex vault token\r\n        }\r\n\r\n        // check if our forex markets are open\r\n        require(!isMarketClosed(_synth)); // dev: synthetix forex markets currently closed\r\n\r\n        // swap our sETH for our underlying synth\r\n        exchangeSynthToSEth(_synthBalance, _synthCurrencyKey);\r\n    }\r\n\r\n    function exchangeSynthToSEth(uint256 _amount, bytes32 _synthCurrencyKey)\r\n        internal\r\n    {\r\n        // swap amount of sETH for Synth\r\n        require(_amount > 0); // dev: can't swap zero\r\n\r\n        bytes32 _sethCurrencyKey = \"sETH\";\r\n\r\n        _synthetix().exchangeWithTrackingForInitiator(\r\n            _synthCurrencyKey,\r\n            _amount,\r\n            _sethCurrencyKey,\r\n            address(0x16388463d60FFE0661Cf7F1f31a7D658aC790ff7),\r\n            TRACKING_CODE\r\n        );\r\n    }\r\n\r\n    function sETHToWant(address _targetToken, uint256 _amount) external {\r\n        // make sure that our synth trade has finalized\r\n        bytes32 _sethCurrencyKey = \"sETH\";\r\n        require(checkWaitingPeriod(msg.sender, _sethCurrencyKey)); // dev: wait ~6mins for trade to finalize on synthetix\r\n        require(_amount > 0); // dev: invalid token or ETH amount\r\n\r\n        //transfer sETH to zap\r\n        address payable _user = msg.sender;\r\n        IERC20 seth = IERC20(0x5e74C9036fb86BD7eCdcb084a0673EFc32eA31cb);\r\n        uint256 _sethBalance = seth.balanceOf(_user);\r\n        require(_sethBalance > 0); // dev: you don't hold any sETH\r\n        seth.safeTransferFrom(_user, address(this), _amount);\r\n\r\n        // this is if we want to end up with WETH\r\n        if (\r\n            _targetToken == address(0xC02aaA39b223FE8D0A0e5C4F27eAD9083C756Cc2)\r\n        ) {\r\n            // swap for sETH\r\n            IUniV3(uniswapv3).exactInput(\r\n                IUniV3.ExactInputParams(\r\n                    abi.encodePacked(\r\n                        address(seth),\r\n                        uint24(500),\r\n                        address(_targetToken)\r\n                    ),\r\n                    address(_user),\r\n                    block.timestamp,\r\n                    _amount,\r\n                    uint256(1)\r\n                )\r\n            );\r\n        } else if (\r\n            _targetToken == address(0xEeeeeEeeeEeEeeEeEeEeeEEEeeeeEeeeeeeeEEeE)\r\n        ) {\r\n            // swap for WETH\r\n            IUniV3(uniswapv3).exactInput(\r\n                IUniV3.ExactInputParams(\r\n                    abi.encodePacked(\r\n                        address(seth),\r\n                        uint24(500),\r\n                        address(0xC02aaA39b223FE8D0A0e5C4F27eAD9083C756Cc2) // weth\r\n                    ),\r\n                    address(this),\r\n                    block.timestamp,\r\n                    _amount,\r\n                    uint256(1)\r\n                )\r\n            );\r\n\r\n            //convert WETH to ETH\r\n            address weth = 0xC02aaA39b223FE8D0A0e5C4F27eAD9083C756Cc2;\r\n            uint256 _output = IERC20(weth).balanceOf(address(this));\r\n            if (_output > 0) {\r\n                IWeth(weth).withdraw(_output);\r\n                _user.transfer(_output);\r\n            }\r\n        } else if (\r\n            // for DAI it's best to use 0.3% fee route\r\n            _targetToken == address(0x6B175474E89094C44Da98b954EedeAC495271d0F)\r\n        ) {\r\n            // swap for DAI\r\n            IUniV3(uniswapv3).exactInput(\r\n                IUniV3.ExactInputParams(\r\n                    abi.encodePacked(\r\n                        address(seth),\r\n                        uint24(500),\r\n                        address(0xC02aaA39b223FE8D0A0e5C4F27eAD9083C756Cc2),\r\n                        uint24(3000),\r\n                        address(_targetToken)\r\n                    ),\r\n                    address(_user),\r\n                    block.timestamp,\r\n                    _amount,\r\n                    uint256(1)\r\n                )\r\n            );\r\n        } else {\r\n            // this is if we want any token but WETH or DAI\r\n            IUniV3(uniswapv3).exactInput(\r\n                IUniV3.ExactInputParams(\r\n                    abi.encodePacked(\r\n                        address(seth),\r\n                        uint24(500),\r\n                        address(0xC02aaA39b223FE8D0A0e5C4F27eAD9083C756Cc2),\r\n                        uint24(500),\r\n                        address(_targetToken)\r\n                    ),\r\n                    address(_user),\r\n                    block.timestamp,\r\n                    _amount,\r\n                    uint256(1)\r\n                )\r\n            );\r\n        }\r\n    }\r\n\r\n    // include so our zap plays nicely with ether\r\n    receive() external payable {}\r\n\r\n    /* ========== HELPERS ========== */\r\n\r\n    function _synthetix() internal view returns (ISynthetix) {\r\n        return ISynthetix(resolver().getAddress(CONTRACT_SYNTHETIX));\r\n    }\r\n\r\n    function resolver() internal view returns (IAddressResolver) {\r\n        return IAddressResolver(readProxy.target());\r\n    }\r\n\r\n    function _exchanger() internal view returns (IExchanger) {\r\n        return IExchanger(resolver().getAddress(CONTRACT_EXCHANGER));\r\n    }\r\n\r\n    function checkWaitingPeriod(address _user, bytes32 _synthCurrencyKey)\r\n        internal\r\n        view\r\n        returns (bool freeToMove)\r\n    {\r\n        return\r\n            // check if it's been >5 mins since we traded our sETH for our synth\r\n            _exchanger().maxSecsLeftInWaitingPeriod(\r\n                address(_user),\r\n                _synthCurrencyKey\r\n            ) == 0;\r\n    }\r\n\r\n    function isMarketClosed(address _synth) public view returns (bool) {\r\n        // keep this public so we can always check if markets are open\r\n        bytes32 _synthCurrencyKey;\r\n        if (_synth == 0xF48e200EAF9906362BB1442fca31e0835773b8B4) {\r\n            // sAUD\r\n            _synthCurrencyKey = \"sAUD\";\r\n        } else if (_synth == 0x0F83287FF768D1c1e17a42F44d644D7F22e8ee1d) {\r\n            // sCHF\r\n            _synthCurrencyKey = \"sCHF\";\r\n        } else if (_synth == 0xD71eCFF9342A5Ced620049e616c5035F1dB98620) {\r\n            // sEUR\r\n            _synthCurrencyKey = \"sEUR\";\r\n        } else if (_synth == 0x97fe22E7341a0Cd8Db6F6C021A24Dc8f4DAD855F) {\r\n            // sGBP\r\n            _synthCurrencyKey = \"sGBP\";\r\n        } else if (_synth == 0xF6b1C627e95BFc3c1b4c9B825a032Ff0fBf3e07d) {\r\n            // sJPY\r\n            _synthCurrencyKey = \"sJPY\";\r\n        } else {\r\n            // sKRW\r\n            _synthCurrencyKey = \"sKRW\";\r\n        }\r\n\r\n        // set up our arrays to use\r\n        bool[] memory tradingSuspended;\r\n        bytes32[] memory synthArray;\r\n\r\n        // use our synth key\r\n        synthArray = new bytes32[](1);\r\n        synthArray[0] = _synthCurrencyKey;\r\n\r\n        // check if trading is open or not. true = market is closed\r\n        (tradingSuspended, ) = systemStatus.getSynthExchangeSuspensions(\r\n            synthArray\r\n        );\r\n        return tradingSuspended[0];\r\n    }\r\n}","ABI":"[{\"inputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_synth\",\"type\":\"address\"}],\"name\":\"isMarketClosed\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_targetToken\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"sETHToWant\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_synth\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"synthToVault\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_inputToken\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"_vaultToken\",\"type\":\"address\"}],\"name\":\"zapIn\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_vaultToken\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"zapOut\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"stateMutability\":\"payable\",\"type\":\"receive\"}]","ContractName":"FixedForexZap","CompilerVersion":"v0.6.12+commit.27d51765","OptimizationUsed":"1","Runs":"200","ConstructorArguments":"","EVMVersion":"Default","Library":"","LicenseType":"Unknown","Proxy":"0","Implementation":"","SwarmSource":"ipfs://87f878567b882a22de8ab2ae2de216912ac75d3c7a953177fc591e4fb5c1495c"}]}