{"status":"1","message":"OK","result":[{"SourceCode":"{{\r\n  \"language\": \"Solidity\",\r\n  \"sources\": {\r\n    \"contracts/flattened/Adapter02.sol\": {\r\n      \"content\": \"// File: openzeppelin-solidity/contracts/token/ERC20/IERC20.sol\\n\\n\\n\\npragma solidity >=0.6.0 <0.8.0;\\n\\n/**\\n * @dev Interface of the ERC20 standard as defined in the EIP.\\n */\\ninterface IERC20 {\\n    /**\\n     * @dev Returns the amount of tokens in existence.\\n     */\\n    function totalSupply() external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the amount of tokens owned by `account`.\\n     */\\n    function balanceOf(address account) external view returns (uint256);\\n\\n    /**\\n     * @dev Moves `amount` tokens from the caller's account to `recipient`.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transfer(address recipient, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Returns the remaining number of tokens that `spender` will be\\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\\n     * zero by default.\\n     *\\n     * This value changes when {approve} or {transferFrom} are called.\\n     */\\n    function allowance(address owner, address spender) external view returns (uint256);\\n\\n    /**\\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\\n     * that someone may use both the old and the new allowance by unfortunate\\n     * transaction ordering. One possible solution to mitigate this race\\n     * condition is to first reduce the spender's allowance to 0 and set the\\n     * desired value afterwards:\\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address spender, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Moves `amount` tokens from `sender` to `recipient` using the\\n     * allowance mechanism. `amount` is then deducted from the caller's\\n     * allowance.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(address sender, address recipient, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\\n     * another (`to`).\\n     *\\n     * Note that `value` may be zero.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 value);\\n\\n    /**\\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\\n     * a call to {approve}. `value` is the new allowance.\\n     */\\n    event Approval(address indexed owner, address indexed spender, uint256 value);\\n}\\n\\n// File: openzeppelin-solidity/contracts/math/SafeMath.sol\\n\\n\\n\\npragma solidity >=0.6.0 <0.8.0;\\n\\n/**\\n * @dev Wrappers over Solidity's arithmetic operations with added overflow\\n * checks.\\n *\\n * Arithmetic operations in Solidity wrap on overflow. This can easily result\\n * in bugs, because programmers usually assume that an overflow raises an\\n * error, which is the standard behavior in high level programming languages.\\n * `SafeMath` restores this intuition by reverting the transaction when an\\n * operation overflows.\\n *\\n * Using this library instead of the unchecked operations eliminates an entire\\n * class of bugs, so it's recommended to use it always.\\n */\\nlibrary SafeMath {\\n    /**\\n     * @dev Returns the addition of two unsigned integers, reverting on\\n     * overflow.\\n     *\\n     * Counterpart to Solidity's `+` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Addition cannot overflow.\\n     */\\n    function add(uint256 a, uint256 b) internal pure returns (uint256) {\\n        uint256 c = a + b;\\n        require(c >= a, \\\"SafeMath: addition overflow\\\");\\n\\n        return c;\\n    }\\n\\n    /**\\n     * @dev Returns the subtraction of two unsigned integers, reverting on\\n     * overflow (when the result is negative).\\n     *\\n     * Counterpart to Solidity's `-` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Subtraction cannot overflow.\\n     */\\n    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return sub(a, b, \\\"SafeMath: subtraction overflow\\\");\\n    }\\n\\n    /**\\n     * @dev Returns the subtraction of two unsigned integers, reverting with custom message on\\n     * overflow (when the result is negative).\\n     *\\n     * Counterpart to Solidity's `-` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Subtraction cannot overflow.\\n     */\\n    function sub(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\\n        require(b <= a, errorMessage);\\n        uint256 c = a - b;\\n\\n        return c;\\n    }\\n\\n    /**\\n     * @dev Returns the multiplication of two unsigned integers, reverting on\\n     * overflow.\\n     *\\n     * Counterpart to Solidity's `*` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Multiplication cannot overflow.\\n     */\\n    function mul(uint256 a, uint256 b) internal pure returns (uint256) {\\n        // Gas optimization: this is cheaper than requiring 'a' not being zero, but the\\n        // benefit is lost if 'b' is also tested.\\n        // See: https://github.com/OpenZeppelin/openzeppelin-contracts/pull/522\\n        if (a == 0) {\\n            return 0;\\n        }\\n\\n        uint256 c = a * b;\\n        require(c / a == b, \\\"SafeMath: multiplication overflow\\\");\\n\\n        return c;\\n    }\\n\\n    /**\\n     * @dev Returns the integer division of two unsigned integers. Reverts on\\n     * division by zero. The result is rounded towards zero.\\n     *\\n     * Counterpart to Solidity's `/` operator. Note: this function uses a\\n     * `revert` opcode (which leaves remaining gas untouched) while Solidity\\n     * uses an invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Requirements:\\n     *\\n     * - The divisor cannot be zero.\\n     */\\n    function div(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return div(a, b, \\\"SafeMath: division by zero\\\");\\n    }\\n\\n    /**\\n     * @dev Returns the integer division of two unsigned integers. Reverts with custom message on\\n     * division by zero. The result is rounded towards zero.\\n     *\\n     * Counterpart to Solidity's `/` operator. Note: this function uses a\\n     * `revert` opcode (which leaves remaining gas untouched) while Solidity\\n     * uses an invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Requirements:\\n     *\\n     * - The divisor cannot be zero.\\n     */\\n    function div(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\\n        require(b > 0, errorMessage);\\n        uint256 c = a / b;\\n        // assert(a == b * c + a % b); // There is no case in which this doesn't hold\\n\\n        return c;\\n    }\\n\\n    /**\\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\\n     * Reverts when dividing by zero.\\n     *\\n     * Counterpart to Solidity's `%` operator. This function uses a `revert`\\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\\n     * invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Requirements:\\n     *\\n     * - The divisor cannot be zero.\\n     */\\n    function mod(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return mod(a, b, \\\"SafeMath: modulo by zero\\\");\\n    }\\n\\n    /**\\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\\n     * Reverts with custom message when dividing by zero.\\n     *\\n     * Counterpart to Solidity's `%` operator. This function uses a `revert`\\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\\n     * invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Requirements:\\n     *\\n     * - The divisor cannot be zero.\\n     */\\n    function mod(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\\n        require(b != 0, errorMessage);\\n        return a % b;\\n    }\\n}\\n\\n// File: openzeppelin-solidity/contracts/utils/Address.sol\\n\\n\\n\\npragma solidity >=0.6.2 <0.8.0;\\n\\n/**\\n * @dev Collection of functions related to the address type\\n */\\nlibrary Address {\\n    /**\\n     * @dev Returns true if `account` is a contract.\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * It is unsafe to assume that an address for which this function returns\\n     * false is an externally-owned account (EOA) and not a contract.\\n     *\\n     * Among others, `isContract` will return false for the following\\n     * types of addresses:\\n     *\\n     *  - an externally-owned account\\n     *  - a contract in construction\\n     *  - an address where a contract will be created\\n     *  - an address where a contract lived, but was destroyed\\n     * ====\\n     */\\n    function isContract(address account) internal view returns (bool) {\\n        // This method relies on extcodesize, which returns 0 for contracts in\\n        // construction, since the code is only stored at the end of the\\n        // constructor execution.\\n\\n        uint256 size;\\n        // solhint-disable-next-line no-inline-assembly\\n        assembly { size := extcodesize(account) }\\n        return size > 0;\\n    }\\n\\n    /**\\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\\n     * `recipient`, forwarding all available gas and reverting on errors.\\n     *\\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\\n     * imposed by `transfer`, making them unable to receive funds via\\n     * `transfer`. {sendValue} removes this limitation.\\n     *\\n     * https://diligence.consensys.net/posts/2019/09/stop-using-soliditys-transfer-now/[Learn more].\\n     *\\n     * IMPORTANT: because control is transferred to `recipient`, care must be\\n     * taken to not create reentrancy vulnerabilities. Consider using\\n     * {ReentrancyGuard} or the\\n     * https://solidity.readthedocs.io/en/v0.5.11/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\\n     */\\n    function sendValue(address payable recipient, uint256 amount) internal {\\n        require(address(this).balance >= amount, \\\"Address: insufficient balance\\\");\\n\\n        // solhint-disable-next-line avoid-low-level-calls, avoid-call-value\\n        (bool success, ) = recipient.call{ value: amount }(\\\"\\\");\\n        require(success, \\\"Address: unable to send value, recipient may have reverted\\\");\\n    }\\n\\n    /**\\n     * @dev Performs a Solidity function call using a low level `call`. A\\n     * plain`call` is an unsafe replacement for a function call: use this\\n     * function instead.\\n     *\\n     * If `target` reverts with a revert reason, it is bubbled up by this\\n     * function (like regular Solidity function calls).\\n     *\\n     * Returns the raw returned data. To convert to the expected return value,\\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\\n     *\\n     * Requirements:\\n     *\\n     * - `target` must be a contract.\\n     * - calling `target` with `data` must not revert.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\\n      return functionCall(target, data, \\\"Address: low-level call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\\n     * `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(address target, bytes memory data, string memory errorMessage) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, 0, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but also transferring `value` wei to `target`.\\n     *\\n     * Requirements:\\n     *\\n     * - the calling contract must have an ETH balance of at least `value`.\\n     * - the called Solidity function must be `payable`.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(address target, bytes memory data, uint256 value) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, value, \\\"Address: low-level call with value failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\\n     * with `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(address target, bytes memory data, uint256 value, string memory errorMessage) internal returns (bytes memory) {\\n        require(address(this).balance >= value, \\\"Address: insufficient balance for call\\\");\\n        require(isContract(target), \\\"Address: call to non-contract\\\");\\n\\n        // solhint-disable-next-line avoid-low-level-calls\\n        (bool success, bytes memory returndata) = target.call{ value: value }(data);\\n        return _verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\\n        return functionStaticCall(target, data, \\\"Address: low-level static call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(address target, bytes memory data, string memory errorMessage) internal view returns (bytes memory) {\\n        require(isContract(target), \\\"Address: static call to non-contract\\\");\\n\\n        // solhint-disable-next-line avoid-low-level-calls\\n        (bool success, bytes memory returndata) = target.staticcall(data);\\n        return _verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    function _verifyCallResult(bool success, bytes memory returndata, string memory errorMessage) private pure returns(bytes memory) {\\n        if (success) {\\n            return returndata;\\n        } else {\\n            // Look for revert reason and bubble it up if present\\n            if (returndata.length > 0) {\\n                // The easiest way to bubble the revert reason is using memory via assembly\\n\\n                // solhint-disable-next-line no-inline-assembly\\n                assembly {\\n                    let returndata_size := mload(returndata)\\n                    revert(add(32, returndata), returndata_size)\\n                }\\n            } else {\\n                revert(errorMessage);\\n            }\\n        }\\n    }\\n}\\n\\n// File: openzeppelin-solidity/contracts/token/ERC20/SafeERC20.sol\\n\\n\\n\\npragma solidity >=0.6.0 <0.8.0;\\n\\n\\n\\n\\n/**\\n * @title SafeERC20\\n * @dev Wrappers around ERC20 operations that throw on failure (when the token\\n * contract returns false). Tokens that return no value (and instead revert or\\n * throw on failure) are also supported, non-reverting calls are assumed to be\\n * successful.\\n * To use this library you can add a `using SafeERC20 for IERC20;` statement to your contract,\\n * which allows you to call the safe operations as `token.safeTransfer(...)`, etc.\\n */\\nlibrary SafeERC20 {\\n    using SafeMath for uint256;\\n    using Address for address;\\n\\n    function safeTransfer(IERC20 token, address to, uint256 value) internal {\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.transfer.selector, to, value));\\n    }\\n\\n    function safeTransferFrom(IERC20 token, address from, address to, uint256 value) internal {\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.transferFrom.selector, from, to, value));\\n    }\\n\\n    /**\\n     * @dev Deprecated. This function has issues similar to the ones found in\\n     * {IERC20-approve}, and its usage is discouraged.\\n     *\\n     * Whenever possible, use {safeIncreaseAllowance} and\\n     * {safeDecreaseAllowance} instead.\\n     */\\n    function safeApprove(IERC20 token, address spender, uint256 value) internal {\\n        // safeApprove should only be called when setting an initial allowance,\\n        // or when resetting it to zero. To increase and decrease it, use\\n        // 'safeIncreaseAllowance' and 'safeDecreaseAllowance'\\n        // solhint-disable-next-line max-line-length\\n        require((value == 0) || (token.allowance(address(this), spender) == 0),\\n            \\\"SafeERC20: approve from non-zero to non-zero allowance\\\"\\n        );\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, value));\\n    }\\n\\n    function safeIncreaseAllowance(IERC20 token, address spender, uint256 value) internal {\\n        uint256 newAllowance = token.allowance(address(this), spender).add(value);\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));\\n    }\\n\\n    function safeDecreaseAllowance(IERC20 token, address spender, uint256 value) internal {\\n        uint256 newAllowance = token.allowance(address(this), spender).sub(value, \\\"SafeERC20: decreased allowance below zero\\\");\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));\\n    }\\n\\n    /**\\n     * @dev Imitates a Solidity high-level call (i.e. a regular function call to a contract), relaxing the requirement\\n     * on the return value: the return value is optional (but if data is returned, it must not be false).\\n     * @param token The token targeted by the call.\\n     * @param data The call data (encoded using abi.encode or one of its variants).\\n     */\\n    function _callOptionalReturn(IERC20 token, bytes memory data) private {\\n        // We need to perform a low level call here, to bypass Solidity's return data size checking mechanism, since\\n        // we're implementing it ourselves. We use {Address.functionCall} to perform this call, which verifies that\\n        // the target address contains contract code and also asserts for success in the low-level call.\\n\\n        bytes memory returndata = address(token).functionCall(data, \\\"SafeERC20: low-level call failed\\\");\\n        if (returndata.length > 0) { // Return data is optional\\n            // solhint-disable-next-line max-line-length\\n            require(abi.decode(returndata, (bool)), \\\"SafeERC20: ERC20 operation did not succeed\\\");\\n        }\\n    }\\n}\\n\\n// File: original_contracts/ITokenTransferProxy.sol\\n\\npragma solidity 0.7.5;\\n\\n\\ninterface ITokenTransferProxy {\\n\\n    function transferFrom(\\n        address token,\\n        address from,\\n        address to,\\n        uint256 amount\\n    )\\n        external;\\n}\\n\\n// File: original_contracts/lib/Utils.sol\\n\\npragma solidity 0.7.5;\\npragma experimental ABIEncoderV2;\\n\\n\\n\\n\\n\\ninterface IERC20Permit {\\n    function permit(address owner, address spender, uint256 amount, uint256 deadline, uint8 v, bytes32 r, bytes32 s) external;\\n}\\n\\nlibrary Utils {\\n    using SafeMath for uint256;\\n    using SafeERC20 for IERC20;\\n\\n    address constant ETH_ADDRESS = address(\\n        0xEeeeeEeeeEeEeeEeEeEeeEEEeeeeEeeeeeeeEEeE\\n    );\\n    \\n    uint256 constant MAX_UINT = type(uint256).max;\\n\\n    /**\\n   * @param fromToken Address of the source token\\n   * @param fromAmount Amount of source tokens to be swapped\\n   * @param toAmount Minimum destination token amount expected out of this swap\\n   * @param expectedAmount Expected amount of destination tokens without slippage\\n   * @param beneficiary Beneficiary address\\n   * 0 then 100% will be transferred to beneficiary. Pass 10000 for 100%\\n   * @param path Route to be taken for this swap to take place\\n\\n   */\\n    struct SellData {\\n        address fromToken;\\n        uint256 fromAmount;\\n        uint256 toAmount;\\n        uint256 expectedAmount;\\n        address payable beneficiary;\\n        Utils.Path[] path;\\n        address payable partner;\\n        uint256 feePercent;\\n        bytes permit;\\n        uint256 deadline;\\n        bytes16 uuid;\\n    }\\n\\n    struct MegaSwapSellData {\\n        address fromToken;\\n        uint256 fromAmount;\\n        uint256 toAmount;\\n        uint256 expectedAmount;\\n        address payable beneficiary;\\n        Utils.MegaSwapPath[] path;\\n        address payable partner;\\n        uint256 feePercent;\\n        bytes permit;\\n        uint256 deadline;\\n        bytes16 uuid;\\n    }\\n\\n    struct SimpleData {\\n        address fromToken;\\n        address toToken;\\n        uint256 fromAmount;\\n        uint256 toAmount;\\n        uint256 expectedAmount;\\n        address[] callees;\\n        bytes exchangeData;\\n        uint256[] startIndexes;\\n        uint256[] values;\\n        address payable beneficiary;\\n        address payable partner;\\n        uint256 feePercent;\\n        bytes permit;\\n        uint256 deadline;\\n        bytes16 uuid;\\n    }\\n\\n    struct Adapter {\\n        address payable adapter;\\n        uint256 percent;\\n        uint256 networkFee;\\n        Route[] route;\\n    }\\n\\n    struct Route {\\n        uint256 index;//Adapter at which index needs to be used\\n        address targetExchange;\\n        uint percent;\\n        bytes payload;\\n        uint256 networkFee;//Network fee is associated with 0xv3 trades\\n    }\\n\\n    struct MegaSwapPath {\\n        uint256 fromAmountPercent;\\n        Path[] path;\\n    }\\n\\n    struct Path {\\n        address to;\\n        uint256 totalNetworkFee;//Network fee is associated with 0xv3 trades\\n        Adapter[] adapters;\\n    }\\n\\n    function ethAddress() internal pure returns (address) {return ETH_ADDRESS;}\\n\\n    function maxUint() internal pure returns (uint256) {return MAX_UINT;}\\n\\n    function approve(\\n        address addressToApprove,\\n        address token,\\n        uint256 amount\\n    ) internal {\\n        if (token != ETH_ADDRESS) {\\n            IERC20 _token = IERC20(token);\\n\\n            uint allowance = _token.allowance(address(this), addressToApprove);\\n\\n            if (allowance < amount) {\\n                _token.safeApprove(addressToApprove, 0);\\n                _token.safeIncreaseAllowance(addressToApprove, MAX_UINT);\\n            }\\n        }\\n    }\\n\\n    function transferTokens(\\n        address token,\\n        address payable destination,\\n        uint256 amount\\n    )\\n    internal\\n    {\\n        if (amount > 0) {\\n            if (token == ETH_ADDRESS) {\\n                (bool result, ) = destination.call{value: amount, gas: 10000}(\\\"\\\");\\n                require(result, \\\"Failed to transfer Ether\\\");\\n            }\\n            else {\\n                IERC20(token).safeTransfer(destination, amount);\\n            }\\n        }\\n\\n    }\\n\\n    function tokenBalance(\\n        address token,\\n        address account\\n    )\\n    internal\\n    view\\n    returns (uint256)\\n    {\\n        if (token == ETH_ADDRESS) {\\n            return account.balance;\\n        } else {\\n            return IERC20(token).balanceOf(account);\\n        }\\n    }\\n\\n    function permit(\\n        address token,\\n        bytes memory permit\\n    )\\n        internal\\n    {\\n        if (permit.length == 32 * 7) {\\n            (bool success,) = token.call(abi.encodePacked(IERC20Permit.permit.selector, permit));\\n            require(success, \\\"Permit failed\\\");\\n        }\\n    }\\n\\n}\\n\\n// File: original_contracts/adapters/IAdapter.sol\\n\\npragma solidity 0.7.5;\\n\\n\\n\\ninterface IAdapter {\\n\\n    /**\\n    * @dev Certain adapters needs to be initialized.\\n    * This method will be called from Augustus\\n    */\\n    function initialize(bytes calldata data) external;\\n\\n    /**\\n   * @dev The function which performs the swap on an exchange.\\n   * @param fromToken Address of the source token\\n   * @param toToken Address of the destination token\\n   * @param fromAmount Amount of source tokens to be swapped\\n   * @param networkFee Network fee to be used in this router\\n   * @param route Route to be followed\\n   */\\n    function swap(\\n        IERC20 fromToken,\\n        IERC20 toToken,\\n        uint256 fromAmount,\\n        uint256 networkFee,\\n        Utils.Route[] calldata route\\n    )\\n        external\\n        payable;\\n}\\n\\n// File: original_contracts/lib/bancor/IBancor.sol\\n\\npragma solidity 0.7.5;\\n\\n\\n\\ninterface IBancor {\\n\\n    function quickConvert(\\n        address[] calldata _path,\\n        uint256 _amount,\\n        uint256 _minReturn\\n    )\\n    external\\n    payable\\n    returns (uint256);\\n\\n    function convert2(\\n        IERC20[] calldata _path,\\n        uint256 _amount,\\n        uint256 _minReturn,\\n        address _affiliateAccount,\\n        uint256 _affiliateFee\\n    )\\n    external\\n    payable\\n    returns (uint256);\\n\\n    function claimAndConvert2(\\n        IERC20[] calldata _path,\\n        uint256 _amount,\\n        uint256 _minReturn,\\n        address _affiliateAccount,\\n        uint256 _affiliateFee\\n    )\\n    external\\n    returns (uint256);\\n\\n    function claimAndConvertFor2(\\n        IERC20[] calldata _path,\\n        uint256 _amount,\\n        uint256 _minReturn,\\n        address _for,\\n        address _affiliateAccount,\\n        uint256 _affiliateFee\\n    )\\n    external\\n    returns (uint256);\\n\\n}\\n\\n// File: original_contracts/lib/bancor/IContractRegistry.sol\\n\\npragma solidity 0.7.5;\\n\\n\\ninterface IContractRegistry {\\n    function addressOf(bytes32 _contractName) external view returns (address);\\n\\n}\\n\\n// File: original_contracts/lib/bancor/Bancor.sol\\n\\npragma solidity 0.7.5;\\n\\n\\n\\n\\n\\n\\ncontract Bancor {\\n    using SafeMath for uint256;\\n\\n    struct BancorData {\\n        IERC20[] path;\\n    }\\n\\n    bytes32 public constant BANCOR_NETWORK = 0x42616e636f724e6574776f726b00000000000000000000000000000000000000;\\n\\n    address public immutable affiliateAccount;\\n    uint256 public immutable affiliateCode;\\n\\n    constructor(\\n        address _affiliateAccount,\\n        uint256 _affiliateCode\\n    )\\n        public\\n    {\\n        affiliateAccount = _affiliateAccount;\\n        affiliateCode = _affiliateCode;\\n    }\\n\\n    function swapOnBancor(\\n        IERC20 fromToken,\\n        IERC20 toToken,\\n        uint256 fromAmount,\\n        address registry,\\n        bytes calldata payload\\n    )\\n        internal\\n\\n    {\\n        BancorData memory data = abi.decode(payload, (BancorData));\\n\\n        address bancorNetwork = IContractRegistry(registry).addressOf(\\n          BANCOR_NETWORK\\n        );\\n\\n        _swapOnBancor(\\n            fromToken,\\n            toToken,\\n            fromAmount,\\n            1,\\n            data.path,\\n            bancorNetwork\\n        );\\n    }\\n\\n    function _swapOnBancor(\\n        IERC20 fromToken,\\n        IERC20 toToken,\\n        uint256 fromAmount,\\n        uint256 toAmount,\\n        IERC20[] memory path,\\n        address bancorNetwork\\n    )\\n      private\\n    {\\n\\n      Utils.approve(bancorNetwork, address(fromToken), fromAmount);\\n\\n      if (address(fromToken) == Utils.ethAddress()) {\\n          IBancor(bancorNetwork).convert2{value: fromAmount}(\\n              path,\\n              fromAmount,\\n              toAmount,\\n              affiliateAccount,\\n              affiliateCode\\n          );\\n      }\\n      else {\\n          IBancor(bancorNetwork).claimAndConvert2(\\n              path,\\n              fromAmount,\\n              toAmount,\\n              affiliateAccount,\\n              affiliateCode\\n          );\\n      }\\n\\n    }\\n}\\n\\n// File: original_contracts/lib/compound/ICompound.sol\\n\\npragma solidity 0.7.5;\\n\\n\\n\\nabstract contract ICToken is IERC20 {\\n    function redeem(uint redeemTokens) external virtual returns (uint);\\n\\n    function redeemUnderlying(uint redeemAmount) external virtual returns (uint);\\n}\\n\\n\\nabstract contract ICEther is ICToken {\\n    function mint() external virtual payable;\\n}\\n\\n\\nabstract contract ICERC20 is ICToken {\\n    function mint(uint mintAmount) external virtual returns (uint);\\n\\n    function underlying() external virtual view returns (address token);\\n}\\n\\n// File: original_contracts/lib/compound/Compound.sol\\n\\npragma solidity 0.7.5;\\n\\n\\n\\n\\ncontract Compound {\\n\\n    struct CompoundData {\\n        address cToken;\\n    }\\n\\n    address public immutable ceth;\\n\\n    constructor(address _ceth) public {\\n        ceth = _ceth;\\n    }\\n\\n    function swapOnCompound(\\n        IERC20 fromToken,\\n        IERC20 toToken,\\n        uint256 fromAmount,\\n        address exchange,\\n        bytes calldata payload\\n    )\\n        internal\\n\\n    {\\n\\n        _swapOnCompound(\\n            fromToken,\\n            toToken,\\n            fromAmount,\\n            exchange,\\n            payload\\n        );\\n    }\\n\\n    function buyOnCompound(\\n        IERC20 fromToken,\\n        IERC20 toToken,\\n        uint256 fromAmount,\\n        address exchange,\\n        bytes calldata payload\\n    )\\n        internal\\n\\n    {\\n\\n        _swapOnCompound(\\n            fromToken,\\n            toToken,\\n            fromAmount,\\n            exchange,\\n            payload\\n        );\\n    }\\n\\n    function _swapOnCompound(\\n        IERC20 fromToken,\\n        IERC20 toToken,\\n        uint256 fromAmount,\\n        address exchange,\\n        bytes memory payload) private {\\n\\n        CompoundData memory compoundData = abi.decode(payload, (CompoundData));\\n\\n        Utils.approve(\\n          address(compoundData.cToken),\\n          address(fromToken),\\n          fromAmount\\n        );\\n\\n        if (address(fromToken) == address(compoundData.cToken)) {\\n            if (address(toToken) == Utils.ethAddress()) {\\n                require(\\n                    address(fromToken) == ceth,\\n                    \\\"Invalid to token\\\"\\n                );\\n            }\\n            else {\\n                require(\\n                    ICERC20(compoundData.cToken).underlying() == address(toToken),\\n                    \\\"Invalid from token\\\"\\n                );\\n            }\\n\\n            ICToken(compoundData.cToken).redeem(fromAmount);\\n        }\\n        else if(address(toToken) == address(compoundData.cToken)) {\\n            if (address(fromToken) == Utils.ethAddress()) {\\n                require(\\n                    address(toToken) == ceth,\\n                    \\\"Invalid to token\\\"\\n                );\\n\\n                ICEther(compoundData.cToken).mint{value: fromAmount}();\\n            }\\n            else {\\n                require(\\n                    ICERC20(compoundData.cToken).underlying() == address(fromToken),\\n                    \\\"Invalid from token\\\"\\n                );\\n\\n                ICERC20(compoundData.cToken).mint(fromAmount);\\n            }\\n        }\\n        else {\\n            revert(\\\"Invalid token pair\\\");\\n        }\\n    }\\n}\\n\\n// File: original_contracts/lib/dodo/IDODO.sol\\n\\npragma solidity 0.7.5;\\n\\ninterface IDODO {\\n  function dodoSwapV1(\\n    address fromToken,\\n    address toToken,\\n    uint256 fromTokenAmount,\\n    uint256 minReturnAmount,\\n    address[] memory dodoPairs,\\n    uint256 directions,\\n    bool isIncentive,\\n    uint256 deadLine\\n    ) external payable returns (uint256 returnAmount);\\n}\\n\\n// File: original_contracts/lib/dodo/DODO.sol\\n\\npragma solidity 0.7.5;\\n\\n\\n\\n\\ncontract DODO {\\n\\n  struct DODOData {\\n    address[] dodoPairs;\\n    uint256 directions;\\n  }\\n\\n  address public immutable erc20ApproveProxy;\\n  uint256 public immutable dodoSwapLimitOverhead;\\n\\n  constructor(address _erc20ApproveProxy, uint256 _swapLimitOverhead) public {\\n    dodoSwapLimitOverhead = _swapLimitOverhead;\\n    erc20ApproveProxy = _erc20ApproveProxy;\\n  }\\n\\n  function swapOnDodo(\\n    IERC20 fromToken,\\n    IERC20 toToken,\\n    uint256 fromAmount,\\n    address exchange,\\n    bytes calldata payload\\n  )\\n    internal\\n  {\\n    DODOData memory dodoData = abi.decode(payload, (DODOData));\\n\\n    Utils.approve(erc20ApproveProxy, address(fromToken), fromAmount);\\n\\n    IDODO(exchange).dodoSwapV1{\\n      value: address(fromToken) == Utils.ethAddress() ? fromAmount : 0\\n    }(\\n      address(fromToken),\\n      address(toToken),\\n      fromAmount,\\n      1,\\n      dodoData.dodoPairs,\\n      dodoData.directions,\\n      false,\\n      block.timestamp + dodoSwapLimitOverhead\\n    );\\n  }\\n}\\n\\n// File: original_contracts/lib/kyber/IKyberNetwork.sol\\n\\npragma solidity 0.7.5;\\n\\ninterface IKyberNetwork {\\n    function maxGasPrice() external view returns(uint);\\n\\n    function tradeWithHintAndFee(\\n        address src,\\n        uint256 srcAmount,\\n        address dest,\\n        address payable destAddress,\\n        uint256 maxDestAmount,\\n        uint256 minConversionRate,\\n        address payable platformWallet,\\n        uint256 platformFeeBps,\\n        bytes calldata hint\\n    ) external payable returns (uint256 destAmount);\\n}\\n\\n// File: original_contracts/lib/kyber/Kyber.sol\\n\\npragma solidity 0.7.5;\\n\\n\\n\\n\\ncontract Kyber {\\n\\n    struct KyberData {\\n        uint256 minConversionRateForBuy;\\n        bytes hint;\\n    }\\n\\n    address payable public immutable _feeWallet;\\n    uint256 public immutable _platformFeeBps;\\n\\n    constructor(\\n        address payable feeWallet,\\n        uint256 platformFeeBps\\n    )\\n        public\\n    {\\n        _feeWallet = feeWallet;\\n        _platformFeeBps = platformFeeBps;\\n    }\\n\\n    function swapOnKyber(\\n        IERC20 fromToken,\\n        IERC20 toToken,\\n        uint256 fromAmount,\\n        address kyberAddress,\\n        bytes calldata payload\\n    )\\n        internal\\n\\n    {\\n        KyberData memory data = abi.decode(payload, (KyberData));\\n\\n        _swapOnKyber(\\n            address(fromToken),\\n            address(toToken),\\n            fromAmount,\\n            1,\\n            kyberAddress,\\n            data.hint,\\n            _feeWallet,\\n            _platformFeeBps\\n        );\\n    }\\n\\n    function buyOnKyber(\\n        IERC20 fromToken,\\n        IERC20 toToken,\\n        uint256 fromAmount,\\n        uint256 toAmount,\\n        address kyberAddress,\\n        bytes calldata payload\\n    )\\n        internal\\n\\n    {\\n        KyberData memory data = abi.decode(payload, (KyberData));\\n\\n        Utils.approve(address(kyberAddress), address(fromToken), fromAmount);\\n\\n        if (address(fromToken) == Utils.ethAddress()) {\\n            IKyberNetwork(kyberAddress).tradeWithHintAndFee{value: fromAmount}(\\n                address(fromToken),\\n                fromAmount,\\n                address(toToken),\\n                payable(address(this)),\\n                toAmount,\\n                data.minConversionRateForBuy,\\n                _feeWallet,\\n                _platformFeeBps,\\n                data.hint\\n            );\\n        }\\n        else {\\n            IKyberNetwork(kyberAddress).tradeWithHintAndFee(\\n                address(fromToken),\\n                fromAmount,\\n                address(toToken),\\n                payable(address(this)),\\n                toAmount,\\n                data.minConversionRateForBuy,\\n                _feeWallet,\\n                _platformFeeBps,\\n                data.hint\\n            );\\n        }\\n    }\\n\\n    function _swapOnKyber(\\n        address fromToken,\\n        address toToken,\\n        uint256 fromAmount,\\n        uint256 toAmount,\\n        address kyberAddress,\\n        bytes memory hint,\\n        address payable _feeWallet,\\n        uint256 _platformFeeBps\\n\\n    )\\n        private\\n        returns(uint256)\\n    {\\n        Utils.approve(kyberAddress, fromToken, fromAmount);\\n\\n        uint256 receivedAmount = 0;\\n\\n        if (fromToken == Utils.ethAddress()) {\\n            receivedAmount = IKyberNetwork(kyberAddress).tradeWithHintAndFee{value: fromAmount}(\\n                fromToken,\\n                fromAmount,\\n                toToken,\\n                payable(address(this)),\\n                Utils.maxUint(),\\n                toAmount,\\n                _feeWallet,\\n                _platformFeeBps,\\n                hint\\n            );\\n        }\\n        else {\\n            receivedAmount = IKyberNetwork(kyberAddress).tradeWithHintAndFee(\\n                fromToken,\\n                fromAmount,\\n                toToken,\\n                payable(address(this)),\\n                Utils.maxUint(),\\n                toAmount,\\n                _feeWallet,\\n                _platformFeeBps,\\n                hint\\n            );\\n        }\\n        return receivedAmount;\\n    }\\n}\\n\\n// File: original_contracts/lib/shell/IShell.sol\\n\\npragma solidity 0.7.5;\\n\\ninterface IShell {\\n  function originSwap(\\n    address _origin,\\n    address _target,\\n    uint _originAmount,\\n    uint _minTargetAmount,\\n    uint _deadline\\n  ) external returns (uint targetAmount_);\\n\\n  function targetSwap(\\n    address _origin,\\n    address _target,\\n    uint _maxOriginAmount,\\n    uint _targetAmount,\\n    uint _deadline\\n  ) external returns (uint originAmount_);\\n}\\n\\n// File: original_contracts/AugustusStorage.sol\\n\\npragma solidity 0.7.5;\\n\\n\\ncontract AugustusStorage {\\n\\n    struct FeeStructure {\\n        uint256 partnerShare;\\n        bool noPositiveSlippage;\\n        bool positiveSlippageToUser;\\n        uint16 feePercent;\\n        string partnerId;\\n        bytes data;\\n    }\\n\\n    ITokenTransferProxy internal tokenTransferProxy;\\n    address payable internal feeWallet;\\n    \\n    mapping(address => FeeStructure) internal registeredPartners;\\n\\n    mapping (bytes4 => address) internal selectorVsRouter;\\n    mapping (bytes32 => bool) internal adapterInitialized;\\n    mapping (bytes32 => bytes) internal adapterVsData;\\n\\n    mapping (bytes32 => bytes) internal routerData;\\n    mapping (bytes32 => bool) internal routerInitialized;\\n\\n\\n    bytes32 public constant WHITELISTED_ROLE = keccak256(\\\"WHITELISTED_ROLE\\\");\\n\\n    bytes32 public constant ROUTER_ROLE = keccak256(\\\"ROUTER_ROLE\\\");\\n\\n}\\n\\n// File: original_contracts/lib/shell/Shell.sol\\n\\npragma solidity 0.7.5;\\n\\n\\n\\n\\n\\n\\ncontract Shell {\\n    using SafeMath for uint256;\\n\\n    uint256 public immutable swapLimitOverhead;\\n    \\n    constructor(uint256 _swapLimitOverhead) public {\\n        swapLimitOverhead = _swapLimitOverhead;\\n    }\\n\\n    function swapOnShell(\\n        IERC20 fromToken,\\n        IERC20 toToken,\\n        uint256 fromAmount,\\n        address exchange\\n    )\\n        internal\\n\\n    {\\n        Utils.approve(address(exchange), address(fromToken), fromAmount);\\n\\n        IShell(exchange).originSwap(\\n            address(fromToken),\\n            address(toToken),\\n            fromAmount,\\n            1,\\n            block.timestamp + swapLimitOverhead\\n        );\\n    }\\n\\n    function buyOnShell(\\n        IERC20 fromToken,\\n        IERC20 toToken,\\n        uint256 fromAmount,\\n        uint256 toAmount,\\n        address exchange\\n    )\\n        internal\\n    {\\n        Utils.approve(address(exchange), address(fromToken), fromAmount);\\n\\n        IShell(exchange).targetSwap(\\n            address(fromToken),\\n            address(toToken),\\n            fromAmount,\\n            toAmount,\\n            block.timestamp + swapLimitOverhead\\n        );\\n    }\\n}\\n\\n// File: original_contracts/lib/weth/IWETH.sol\\n\\npragma solidity 0.7.5;\\n\\n\\n\\nabstract contract IWETH is IERC20 {\\n    function deposit() external virtual payable;\\n    function withdraw(uint256 amount) external virtual;\\n}\\n\\n// File: original_contracts/lib/WethProvider.sol\\n\\npragma solidity 0.7.5;\\n\\n\\ncontract WethProvider {\\n    address public immutable WETH;\\n\\n    constructor(address weth) public {\\n        WETH = weth;\\n    }\\n}\\n\\n// File: original_contracts/lib/weth/WethExchange.sol\\n\\npragma solidity 0.7.5;\\n\\n\\n\\n\\n\\n\\nabstract contract WethExchange is WethProvider {\\n\\n    function swapOnWETH(\\n        IERC20 fromToken,\\n        IERC20 toToken,\\n        uint256 fromAmount\\n    )\\n        internal\\n\\n    {\\n\\n        _swapOnWeth(\\n            fromToken,\\n            toToken,\\n            fromAmount\\n        );\\n    }\\n\\n    function buyOnWeth(\\n        IERC20 fromToken,\\n        IERC20 toToken,\\n        uint256 fromAmount\\n    )\\n        internal\\n\\n    {\\n\\n        _swapOnWeth(\\n            fromToken,\\n            toToken,\\n            fromAmount\\n        );\\n    }\\n\\n    function _swapOnWeth(\\n        IERC20 fromToken,\\n        IERC20 toToken,\\n        uint256 fromAmount\\n    )\\n        private\\n    {\\n        address weth = WETH;\\n\\n        if (address(fromToken) == weth){\\n            require(address(toToken) == Utils.ethAddress(), \\\"Destination token should be ETH\\\");\\n            IWETH(weth).withdraw(fromAmount);\\n        }\\n        else if (address(fromToken) == Utils.ethAddress()) {\\n            require(address(toToken) == weth, \\\"Destination token should be weth\\\");\\n            IWETH(weth).deposit{value: fromAmount}();\\n        }\\n        else {\\n            revert(\\\"Invalid fromToken\\\");\\n        }\\n\\n    }\\n\\n}\\n\\n// File: original_contracts/lib/dodov2/IDODOV2Proxy.sol\\n\\npragma solidity 0.7.5;\\n\\ninterface IDODOV2Proxy {\\n    function dodoSwapV2ETHToToken(\\n        address toToken,\\n        uint256 minReturnAmount,\\n        address[] memory dodoPairs,\\n        uint256 directions,\\n        bool isIncentive,\\n        uint256 deadLine\\n    ) external payable returns (uint256 returnAmount);\\n\\n    function dodoSwapV2TokenToETH(\\n        address fromToken,\\n        uint256 fromTokenAmount,\\n        uint256 minReturnAmount,\\n        address[] memory dodoPairs,\\n        uint256 directions,\\n        bool isIncentive,\\n        uint256 deadLine\\n    ) external returns (uint256 returnAmount);\\n\\n    function dodoSwapV2TokenToToken(\\n        address fromToken,\\n        address toToken,\\n        uint256 fromTokenAmount,\\n        uint256 minReturnAmount,\\n        address[] memory dodoPairs,\\n        uint256 directions,\\n        bool isIncentive,\\n        uint256 deadLine\\n    ) external returns (uint256 returnAmount);\\n}\\n\\n// File: original_contracts/lib/dodov2/DODOV2.sol\\n\\npragma solidity 0.7.5;\\n\\n\\n\\n\\ncontract DODOV2 {\\n\\n  uint256 public immutable dodoV2SwapLimitOverhead;\\n  address public immutable dodoErc20ApproveProxy;\\n\\n  struct DODOV2Data {\\n    address[] dodoPairs;\\n    uint256 directions;\\n  }\\n\\n  constructor(uint256 _dodoV2SwapLimitOverhead, address _dodoErc20ApproveProxy) public {\\n    dodoV2SwapLimitOverhead = _dodoV2SwapLimitOverhead;\\n    dodoErc20ApproveProxy = _dodoErc20ApproveProxy;\\n  }\\n\\n  function swapOnDodoV2(\\n    IERC20 fromToken,\\n    IERC20 toToken,\\n    uint256 fromAmount,\\n    address exchange,\\n    bytes calldata payload\\n  )\\n    internal\\n  {\\n    DODOV2Data memory dodoData = abi.decode(payload, (DODOV2Data));\\n\\n    if (address(fromToken) == Utils.ethAddress()) {\\n      IDODOV2Proxy(exchange).dodoSwapV2ETHToToken{value: fromAmount}(\\n        address(toToken),\\n        1,\\n        dodoData.dodoPairs,\\n        dodoData.directions,\\n        false,\\n        block.timestamp + dodoV2SwapLimitOverhead\\n      );\\n    } else if (address(toToken) == Utils.ethAddress()) {\\n      Utils.approve(dodoErc20ApproveProxy, address(fromToken), fromAmount);\\n\\n      IDODOV2Proxy(exchange).dodoSwapV2TokenToETH(\\n        address(fromToken),\\n        fromAmount,\\n        1,\\n        dodoData.dodoPairs,\\n        dodoData.directions,\\n        false,\\n        block.timestamp + dodoV2SwapLimitOverhead\\n      );\\n    } else {\\n      Utils.approve(dodoErc20ApproveProxy, address(fromToken), fromAmount);\\n\\n      IDODOV2Proxy(exchange).dodoSwapV2TokenToToken(\\n        address(fromToken),\\n        address(toToken),\\n        fromAmount,\\n        1,\\n        dodoData.dodoPairs,\\n        dodoData.directions,\\n        false,\\n        block.timestamp + dodoV2SwapLimitOverhead\\n      );\\n    }\\n  }\\n}\\n\\n// File: original_contracts/lib/onebit/ISwapRouterOneBit.sol\\n\\npragma solidity 0.7.5;\\n\\n\\ninterface ISwapRouterOneBit {\\n    function swapTokensWithTrust(\\n        IERC20 srcToken,\\n        IERC20 destToken,\\n        uint srcAmount,\\n        uint destAmountMin,\\n        address to\\n    ) external returns (uint destAmount);\\n}\\n\\n// File: original_contracts/lib/onebit/OneBit.sol\\n\\npragma solidity 0.7.5;\\n\\n\\n\\n\\n\\n\\nabstract contract OneBit is WethProvider {\\n\\n    function swapOnOneBit(\\n        IERC20 fromToken,\\n        IERC20 toToken,\\n        uint256 fromAmount,\\n        address exchange,\\n        bytes calldata payload\\n    )\\n        internal\\n    {\\n\\n        address _fromToken = address(fromToken) == Utils.ethAddress()\\n        ? WETH : address(fromToken);\\n        address _toToken = address(toToken) == Utils.ethAddress()\\n        ? WETH : address(toToken);\\n\\n        if (address(fromToken) == Utils.ethAddress()) {\\n            IWETH(WETH).deposit{value : fromAmount}();\\n        }\\n\\n        Utils.approve(address(exchange), _fromToken, fromAmount);\\n\\n        ISwapRouterOneBit(exchange).swapTokensWithTrust(\\n            IERC20(_fromToken),\\n            IERC20(_toToken),\\n            fromAmount,\\n            1,\\n            address(this)\\n        );\\n\\n        if (address(toToken) == Utils.ethAddress()) {\\n            IWETH(WETH).withdraw(\\n                IERC20(WETH).balanceOf(address(this))\\n            );\\n        }\\n\\n    }\\n}\\n\\n// File: original_contracts/lib/saddle/ISwap.sol\\n\\npragma solidity 0.7.5;\\n\\n\\ninterface ISwap {\\n\\n  function swap(\\n    uint8 tokenIndexFrom,\\n    uint8 tokenIndexTo,\\n    uint256 dx,\\n    uint256 minDy,\\n    uint256 deadline\\n  )\\n  external ;\\n\\n}\\n\\n// File: original_contracts/lib/saddle/SaddleAdapter.sol\\n\\npragma solidity 0.7.5;\\n\\n\\n\\n\\ncontract SaddleAdapter {\\n\\n  struct SaddleData {\\n    uint8 i;\\n    uint8 j;\\n    uint256 deadline;\\n  }\\n\\n  function swapOnSaddle(\\n    IERC20 fromToken,\\n    IERC20 toToken,\\n    uint256 fromAmount,\\n    address exchange,\\n    bytes calldata payload\\n  )\\n    internal\\n  {\\n\\n    SaddleData memory data = abi.decode(payload, (SaddleData));\\n\\n    Utils.approve(address(exchange), address(fromToken), fromAmount);\\n\\n    ISwap(exchange).swap(data.i, data.j, fromAmount, 1, data.deadline);\\n\\n  }\\n}\\n\\n// File: original_contracts/lib/balancerv2/IBalancerV2Vault.sol\\n\\npragma solidity 0.7.5;\\n\\n\\ninterface IBalancerV2Vault {\\n    enum SwapKind { GIVEN_IN, GIVEN_OUT }\\n\\n    struct BatchSwapStep {\\n        bytes32 poolId;\\n        uint256 assetInIndex;\\n        uint256 assetOutIndex;\\n        uint256 amount;\\n        bytes userData;\\n    }\\n\\n    struct FundManagement {\\n        address sender;\\n        bool fromInternalBalance;\\n        address payable recipient;\\n        bool toInternalBalance;\\n    }\\n\\n    function batchSwap(\\n        SwapKind kind,\\n        BatchSwapStep[] memory swaps,\\n        address[] memory assets,\\n        FundManagement memory funds,\\n        int256[] memory limits,\\n        uint256 deadline\\n    ) external payable returns (int256[] memory);\\n}\\n\\n// File: original_contracts/lib/balancerv2/BalancerV2.sol\\n\\npragma solidity 0.7.5;\\n\\n\\n\\n\\ncontract BalancerV2 {\\n    using SafeMath for uint256;\\n\\n    struct BalancerData {\\n        IBalancerV2Vault.BatchSwapStep[] swaps;\\n        address[] assets;\\n        IBalancerV2Vault.FundManagement funds;\\n        int256[] limits;\\n        uint256 deadline;\\n    }\\n\\n    function swapOnBalancerV2(\\n        IERC20 fromToken,\\n        IERC20 toToken,\\n        uint256 fromAmount,\\n        address vault,\\n        bytes calldata payload\\n    )\\n        internal\\n    {\\n        BalancerData memory data = abi.decode(payload, (BalancerData));\\n        \\n        uint256 totalAmount;\\n        for (uint i = 0; i < data.swaps.length; ++i) {\\n            totalAmount = totalAmount.add(data.swaps[i].amount);\\n        }\\n\\n        // This will only work for a direct swap on balancer\\n        if (totalAmount != fromAmount) {\\n            for (uint i = 0; i < data.swaps.length; ++i) {\\n                data.swaps[i].amount = data.swaps[i].amount.mul(fromAmount).div(totalAmount);\\n            }\\n        }\\n\\n        if (address(fromToken) == Utils.ethAddress()) {\\n            IBalancerV2Vault(vault).batchSwap{value: fromAmount}(\\n                IBalancerV2Vault.SwapKind.GIVEN_IN,\\n                data.swaps,\\n                data.assets,\\n                data.funds,\\n                data.limits,\\n                data.deadline\\n            );\\n        } else {\\n            Utils.approve(vault, address(fromToken), fromAmount);\\n            IBalancerV2Vault(vault).batchSwap(\\n                IBalancerV2Vault.SwapKind.GIVEN_IN,\\n                data.swaps,\\n                data.assets,\\n                data.funds,\\n                data.limits,\\n                data.deadline\\n            );\\n        }\\n    }\\n}\\n\\n// File: original_contracts/adapters/mainnet/Adapter02.sol\\n\\npragma solidity 0.7.5;\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n/**\\n* @dev This contract will route to:\\n* 0- Bancor\\n* 1- Compound\\n* 2- Dodo\\n* 3- Kyber\\n* 4- Shell\\n* 5- weth\\n* 6- DODOV2\\n* 7- OneBit\\n* 8- SaddelAdapter\\n* 9- BalancerV2\\n* The above are the indexes\\n*/\\ncontract Adapter02 is IAdapter, Bancor, Compound, DODO, Kyber, Shell, WethExchange, DODOV2, OneBit, SaddleAdapter, BalancerV2 {\\n    using SafeMath for uint256;\\n\\n    struct Data {\\n        address _bancorAffiliateAccount;\\n        uint256 _bancorAffiliateCode;\\n        address _ceth;\\n        address _dodoErc20ApproveProxy;\\n        uint256 _dodSwapLimitOverhead;\\n        address payable _kyberFeeWallet;\\n        uint256 _kyberPlatformFeeBps;\\n        uint256 _shellSwapLimitOverhead;\\n        address _weth;\\n    }\\n\\n    constructor(\\n        Data memory data\\n    )\\n        WethProvider(data._weth)\\n        Bancor(data._bancorAffiliateAccount, data._bancorAffiliateCode)\\n        Compound(data._ceth)\\n        DODO(data._dodoErc20ApproveProxy, data._dodSwapLimitOverhead)\\n        Kyber(data._kyberFeeWallet, data._kyberPlatformFeeBps)\\n        Shell(data._shellSwapLimitOverhead)\\n        DODOV2(data._dodSwapLimitOverhead, data._dodoErc20ApproveProxy)\\n        public\\n    {\\n    }\\n\\n    function initialize(bytes calldata data) override external {\\n        revert(\\\"METHOD NOT IMPLEMENTED\\\");\\n    }\\n\\n    function swap(\\n        IERC20 fromToken,\\n        IERC20 toToken,\\n        uint256 fromAmount,\\n        uint256 networkFee,\\n        Utils.Route[] calldata route\\n    )\\n        external\\n        override\\n        payable\\n    {\\n        for (uint256 i = 0; i < route.length; i++) {\\n            if (route[i].index == 0) {\\n                //swap on Bancor\\n                swapOnBancor(\\n                    fromToken,\\n                    toToken,\\n                    fromAmount.mul(route[i].percent).div(10000),\\n                    route[i].targetExchange,\\n                    route[i].payload\\n                );\\n            }\\n            else if (route[i].index == 1) {\\n                //swap on compound\\n                swapOnCompound(\\n                    fromToken,\\n                    toToken,\\n                    fromAmount.mul(route[i].percent).div(10000),\\n                    route[i].targetExchange,\\n                    route[i].payload\\n                );\\n            }\\n            else if (route[i].index == 2) {\\n                //swap on DODO\\n                swapOnDodo(\\n                    fromToken,\\n                    toToken,\\n                    fromAmount.mul(route[i].percent).div(10000),\\n                    route[i].targetExchange,\\n                    route[i].payload\\n                );\\n            }\\n            else if (route[i].index == 3) {\\n                //swap on kyber\\n                swapOnKyber(\\n                    fromToken,\\n                    toToken,\\n                    fromAmount.mul(route[i].percent).div(10000),\\n                    route[i].targetExchange,\\n                    route[i].payload\\n                );\\n            }\\n            else if (route[i].index == 4) {\\n                //swap on Shell\\n                swapOnShell(\\n                    fromToken,\\n                    toToken,\\n                    fromAmount.mul(route[i].percent).div(10000),\\n                    route[i].targetExchange\\n                );\\n            }\\n            else if (route[i].index == 5) {\\n                //swap on WETH\\n                swapOnWETH(\\n                    fromToken,\\n                    toToken,\\n                    fromAmount.mul(route[i].percent).div(10000)\\n                );\\n            }\\n            else if (route[i].index == 6) {\\n                //swap on DODOV2\\n                swapOnDodoV2(\\n                    fromToken,\\n                    toToken,\\n                    fromAmount.mul(route[i].percent).div(10000),\\n                    route[i].targetExchange,\\n                    route[i].payload\\n                );\\n            }\\n            else if (route[i].index == 7) {\\n                //swap on OneBit\\n                swapOnOneBit(\\n                    fromToken,\\n                    toToken,\\n                    fromAmount.mul(route[i].percent).div(10000),\\n                    route[i].targetExchange,\\n                    route[i].payload\\n                );\\n            }\\n            else if (route[i].index == 8) {\\n                //swap on Saddle\\n                swapOnSaddle(\\n                    fromToken,\\n                    toToken,\\n                    fromAmount.mul(route[i].percent).div(10000),\\n                    route[i].targetExchange,\\n                    route[i].payload\\n                );\\n            }\\n            else if (route[i].index == 9) {\\n                swapOnBalancerV2(\\n                    fromToken,\\n                    toToken,\\n                    fromAmount.mul(route[i].percent).div(10000),\\n                    route[i].targetExchange,\\n                    route[i].payload\\n                );\\n            }\\n            else {\\n                revert(\\\"Index not supported\\\");\\n            }\\n        }\\n    }\\n}\\n\"\r\n    }\r\n  },\r\n  \"settings\": {\r\n    \"optimizer\": {\r\n      \"enabled\": true,\r\n      \"runs\": 1000000\r\n    },\r\n    \"outputSelection\": {\r\n      \"*\": {\r\n        \"*\": [\r\n          \"evm.bytecode\",\r\n          \"evm.deployedBytecode\",\r\n          \"abi\"\r\n        ]\r\n      }\r\n    },\r\n    \"metadata\": {\r\n      \"useLiteralContent\": true\r\n    },\r\n    \"libraries\": {}\r\n  }\r\n}}","ABI":"[{\"inputs\":[{\"components\":[{\"internalType\":\"address\",\"name\":\"_bancorAffiliateAccount\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_bancorAffiliateCode\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"_ceth\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_dodoErc20ApproveProxy\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_dodSwapLimitOverhead\",\"type\":\"uint256\"},{\"internalType\":\"address payable\",\"name\":\"_kyberFeeWallet\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_kyberPlatformFeeBps\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_shellSwapLimitOverhead\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"_weth\",\"type\":\"address\"}],\"internalType\":\"struct Adapter02.Data\",\"name\":\"data\",\"type\":\"tuple\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"inputs\":[],\"name\":\"BANCOR_NETWORK\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"WETH\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"_feeWallet\",\"outputs\":[{\"internalType\":\"address payable\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"_platformFeeBps\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"affiliateAccount\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"affiliateCode\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"ceth\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"dodoErc20ApproveProxy\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"dodoSwapLimitOverhead\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"dodoV2SwapLimitOverhead\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"erc20ApproveProxy\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes\",\"name\":\"data\",\"type\":\"bytes\"}],\"name\":\"initialize\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"contract IERC20\",\"name\":\"fromToken\",\"type\":\"address\"},{\"internalType\":\"contract IERC20\",\"name\":\"toToken\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"fromAmount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"networkFee\",\"type\":\"uint256\"},{\"components\":[{\"internalType\":\"uint256\",\"name\":\"index\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"targetExchange\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"percent\",\"type\":\"uint256\"},{\"internalType\":\"bytes\",\"name\":\"payload\",\"type\":\"bytes\"},{\"internalType\":\"uint256\",\"name\":\"networkFee\",\"type\":\"uint256\"}],\"internalType\":\"struct Utils.Route[]\",\"name\":\"route\",\"type\":\"tuple[]\"}],\"name\":\"swap\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"swapLimitOverhead\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"}]","ContractName":"Adapter02","CompilerVersion":"v0.7.5+commit.eb77ed08","OptimizationUsed":"1","Runs":"1000000","ConstructorArguments":"0000000000000000000000003dfd23a6c5e8bbcfc9581d2e864a68feb6a076d300000000000000000000000000000000000000000000000000000000000000010000000000000000000000004ddc2d193948926d02f9b1fe9e1daa0718270ed5000000000000000000000000cb859ea579b28e02b87a1fde08d087ab9dbe514900000000000000000000000000000000000000000000000000000000000003840000000000000000000000007f0af2bdfccbfdb0704dcc155f4a9453d209728900000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000001000000000000000000000000c02aaa39b223fe8d0a0e5c4f27ead9083c756cc2","EVMVersion":"Default","Library":"","LicenseType":"","Proxy":"0","Implementation":"","SwarmSource":""}]}