{"status":"1","message":"OK","result":[{"SourceCode":"// File: PoolCleaner.sol\r\n\r\n// Be name Khoda\r\n\r\n// Bime Abolfazl\r\n\r\n\r\n\r\npragma solidity ^0.8.0;\r\n\r\n\r\n\r\n/*\r\n\r\n\r\n\r\nBefore calling any method:\r\n\r\n1. Transfer all LP tokens to the contract (UniDD, UniDE, UniDU, UniDUniDeusUsdc, UniDeaEth)\r\n\r\n2. Add Minter and Burner role of Dea and Deus tokens to the contract\r\n\r\n\r\n\r\n*/\r\n\r\n\r\n\r\n\r\n\r\ninterface IERC20 {\r\n\r\n\r\n\r\n\r\n\r\n    function totalSupply() external view returns (uint256);\r\n\r\n\r\n\r\n    function balanceOf(address account) external view returns (uint256);\r\n\r\n\r\n\r\n    function allowance(address owner, address spender) external view returns (uint256);\r\n\r\n\r\n\r\n\r\n\r\n    function transfer(address recipient, uint256 amount) external returns (bool);\r\n\r\n\r\n\r\n    function approve(address spender, uint256 amount) external returns (bool);\r\n\r\n\r\n\r\n    function transferFrom(address sender, address recipient, uint256 amount) external returns (bool);\r\n\r\n\r\n\r\n\tfunction mint(address to, uint256 amount) external;\r\n\r\n\t\r\n\r\n    function burn(address from, uint256 amount) external;\r\n\r\n\r\n\r\n    event Transfer(address indexed from, address indexed to, uint256 value);\r\n\r\n\r\n\r\n    event Approval(address indexed owner, address indexed spender, uint256 value);\r\n\r\n\r\n\r\n}\r\n\r\n\r\n\r\ninterface IUniswapV2Router {\r\n\r\n    function removeLiquidity(\r\n\r\n        address tokenA,\r\n\r\n        address tokenB,\r\n\r\n        uint liquidity,\r\n\r\n        uint amountAMin,\r\n\r\n        uint amountBMin,\r\n\r\n        address to,\r\n\r\n        uint deadline\r\n\r\n    ) external returns (uint amountA, uint amountB);\r\n\r\n    \r\n\r\n    function swapExactTokensForTokens(\r\n\r\n        uint amountIn,\r\n\r\n        uint amountOutMin,\r\n\r\n        address[] calldata path,\r\n\r\n        address to,\r\n\r\n        uint deadline\r\n\r\n    ) external returns (uint[] memory amounts);\r\n\r\n}\r\n\r\n\r\n\r\n\r\n\r\ncontract PoolCleaner {\r\n\r\n    \r\n\r\n    IUniswapV2Router public router;\r\n\r\n    IERC20 public uniDD;\r\n\r\n    IERC20 public uniDE;\r\n\r\n    IERC20 public uniDU;\r\n\r\n    IERC20 public uniDeaEth;\r\n\r\n    IERC20 public uniDeusUsdc;\r\n\r\n    IERC20 public dea;\r\n\r\n    IERC20 public deus;\r\n\r\n    IERC20 public eth;\r\n\r\n    IERC20 public usdc;\r\n\r\n    address public balancerPoolAddress;\r\n\r\n    address public account;\r\n\r\n    address public deployer;\r\n\r\n   \r\n\r\n    constructor(\r\n\r\n        IUniswapV2Router _router,\r\n\r\n        address _balancerPoolAddress,\r\n\r\n        IERC20 _uniDD,\r\n\r\n        IERC20 _uniDE,\r\n\r\n        IERC20 _uniDU,\r\n\r\n        IERC20 _uniDeaEth,\r\n\r\n        IERC20 _uniDeusUsdc\r\n\r\n        ) {\r\n\r\n        \r\n\r\n        router = _router;\r\n\r\n        balancerPoolAddress = _balancerPoolAddress;\r\n\r\n        uniDD = _uniDD;\r\n\r\n        uniDE = _uniDE;\r\n\r\n        uniDU = _uniDU;\r\n\r\n        uniDeaEth = _uniDeaEth;\r\n\r\n        uniDeusUsdc = _uniDeusUsdc;\r\n\r\n        \r\n\r\n        deployer  = msg.sender;\r\n\r\n        \r\n\r\n        uniDD.approve(address(router), type(uint).max);\r\n\r\n        uniDE.approve(address(router), type(uint).max);\r\n\r\n        uniDU.approve(address(router), type(uint).max);\r\n\r\n        uniDeaEth.approve(address(router), type(uint).max);\r\n\r\n        uniDeusUsdc.approve(address(router), type(uint).max);\r\n\r\n\r\n\r\n    }\r\n\r\n    \r\n\r\n    function init(\r\n\r\n        IERC20 _dea,\r\n\r\n        IERC20 _deus,\r\n\r\n        IERC20 _eth,\r\n\r\n        IERC20 _usdc,\r\n\r\n        address _account\r\n\r\n        \r\n\r\n        ) public {\r\n\r\n\r\n\r\n        require(msg.sender == deployer, \"Only deployer can call this method\");\r\n\r\n       \r\n\r\n        dea = _dea;\r\n\r\n        deus = _deus;\r\n\r\n        eth = _eth;\r\n\r\n        usdc = _usdc;\r\n\r\n        account = _account;\r\n\r\n    }\r\n\r\n    \r\n\r\n    \r\n\r\n    function removeLiquidity(uint deadline) private {\r\n\r\n        address contractAddress = address(this);\r\n\r\n        uint balance = uniDD.balanceOf(contractAddress);\r\n\r\n        if(balance != 0) {\r\n\r\n            router.removeLiquidity(address(dea), address(deus), balance, 0, 0, contractAddress, deadline);\r\n\r\n        }\r\n\r\n\r\n\r\n        balance = uniDE.balanceOf(contractAddress);\r\n\r\n        if(balance != 0) {\r\n\r\n            router.removeLiquidity(address(deus), address(eth), balance, 0, 0, contractAddress, deadline);\r\n\r\n        }\r\n\r\n\r\n\r\n        balance = uniDU.balanceOf(contractAddress);\r\n\r\n        if(balance != 0) {\r\n\r\n            router.removeLiquidity(address(dea), address(usdc), balance, 0, 0, contractAddress, deadline);\r\n\r\n        }\r\n\r\n        \r\n\r\n        balance = uniDeaEth.balanceOf(contractAddress);\r\n\r\n        if(balance != 0) {\r\n\r\n            router.removeLiquidity(address(dea), address(eth), balance, 0, 0, contractAddress, deadline);\r\n\r\n        }\r\n\r\n        \r\n\r\n        balance = uniDeusUsdc.balanceOf(contractAddress);\r\n\r\n        if(balance != 0) {\r\n\r\n            router.removeLiquidity(address(deus), address(usdc), balance, 0, 0, contractAddress, deadline);\r\n\r\n        }\r\n\r\n    }\r\n\r\n    \r\n\r\n    function mintTokens() private {\r\n\r\n        uint deaMintAmount = dea.balanceOf(address(uniDD)) + dea.balanceOf(address(uniDU)) + 2 * 10 ** 30;\r\n\r\n        uint deusMintAmount = deus.balanceOf(address(uniDD)) + deus.balanceOf(address(uniDE)) + 2 * 10 ** 30;\r\n\r\n         \r\n\r\n        dea.mint(address(this), deaMintAmount);\r\n\r\n        deus.mint(address(this), deusMintAmount);\r\n\r\n    }\r\n\r\n    \r\n\r\n    function swapTokens(uint deadline) private {\r\n\r\n        \r\n\r\n        dea.approve(address(router), 2 * 10 ** 30);\r\n\r\n        deus.approve(address(router), 2 * 10 ** 30);\r\n\r\n\r\n\r\n        \r\n\r\n        address[] memory path = new address[](2);\r\n\r\n        \r\n\r\n        // Dea - usdc\r\n\r\n        \r\n\r\n        path[0] = address(dea);\r\n\r\n        path[1] = address(usdc);\r\n\r\n        router.swapExactTokensForTokens(\r\n\r\n            10 ** 30,\r\n\r\n            0,\r\n\r\n            path,\r\n\r\n            address(this),\r\n\r\n            deadline\r\n\r\n        );\r\n\r\n        \r\n\r\n        // Deus - Eth\r\n\r\n\r\n\r\n        path[0] = address(deus);\r\n\r\n        path[1] = address(eth);\r\n\r\n        router.swapExactTokensForTokens(\r\n\r\n            10 ** 30,\r\n\r\n            0,\r\n\r\n            path,\r\n\r\n            address(this),\r\n\r\n            deadline\r\n\r\n        );\r\n\r\n        \r\n\r\n        // Dea - Eth\r\n\r\n        \r\n\r\n        path[0] = address(dea);\r\n\r\n        path[1] = address(eth);\r\n\r\n        router.swapExactTokensForTokens(\r\n\r\n            10 ** 30,\r\n\r\n            0,\r\n\r\n            path,\r\n\r\n            address(this),\r\n\r\n            deadline\r\n\r\n        );\r\n\r\n        \r\n\r\n        // Deus - Usdc\r\n\r\n\r\n\r\n        path[0] = address(deus);\r\n\r\n        path[1] = address(usdc);\r\n\r\n        router.swapExactTokensForTokens(\r\n\r\n            10 ** 30,\r\n\r\n            0,\r\n\r\n            path,\r\n\r\n            address(this),\r\n\r\n            deadline\r\n\r\n        );\r\n\r\n    }\r\n\r\n    \r\n\r\n    function burnTokens() private {\r\n\r\n        dea.burn(address(uniDD), dea.balanceOf(address(uniDD)));\r\n\r\n        deus.burn(address(uniDD), deus.balanceOf(address(uniDD)));\r\n\r\n\r\n\r\n        dea.burn(address(uniDU), dea.balanceOf(address(uniDU)));\r\n\r\n\r\n\r\n        deus.burn(address(uniDE), deus.balanceOf(address(uniDE)));\r\n\r\n        \r\n\r\n        dea.burn(address(uniDeaEth), dea.balanceOf(address(uniDeaEth)));\r\n\r\n\r\n\r\n        deus.burn(address(uniDeusUsdc), deus.balanceOf(address(uniDeusUsdc)));\r\n\r\n\r\n\r\n    }\r\n\r\n    \r\n\r\n    function clearBalancerPool() private {\r\n\r\n        uint balance = dea.balanceOf(balancerPoolAddress);\r\n\r\n        dea.burn(balancerPoolAddress, balance);\r\n\r\n        dea.mint(address(this), balance);\r\n\r\n    }\r\n\r\n    \r\n\r\n    function transferTokens() private {\r\n\r\n        dea.transfer(account, dea.balanceOf(address(this)));\r\n\r\n        deus.transfer(account, deus.balanceOf(address(this)));\r\n\r\n        usdc.transfer(account, usdc.balanceOf(address(this)));\r\n\r\n        eth.transfer(account, eth.balanceOf(address(this)));\r\n\r\n    }\r\n\r\n    \r\n\r\n    function cleanPools(uint deadline) public {\r\n\r\n        \r\n\r\n        require(msg.sender == deployer, \"Only deployer can call this method\");\r\n\r\n        \r\n\r\n        // Remove liquidity using pool tokens\r\n\r\n        \r\n\r\n        removeLiquidity(deadline);\r\n\r\n        \r\n\r\n        // Mint requiring dea & deus amount\r\n\r\n        \r\n\r\n        mintTokens(); // tested: needs roles\r\n\r\n        \r\n\r\n        // Swap tokens to extract remaining amounts\r\n\r\n        \r\n\r\n        swapTokens(deadline);\r\n\r\n        \r\n\r\n        // Burn remainings in pools\r\n\r\n        \r\n\r\n        burnTokens();\r\n\r\n        \r\n\r\n        // Clear balancer pool\r\n\r\n        \r\n\r\n        clearBalancerPool();\r\n\r\n        \r\n\r\n        // Transfre everything to account \r\n\r\n        \r\n\r\n        transferTokens();\r\n\r\n    }\r\n\r\n    \r\n\r\n    function withdrawERC20(address tokenAddress, address to, uint amount) public {\r\n\r\n\r\n\r\n        require(msg.sender == deployer, \"Only deployer can call this method\");\r\n\r\n        \r\n\r\n        IERC20(tokenAddress).transfer(to, amount);\r\n\r\n    }\r\n\r\n    \r\n\r\n    \r\n\r\n}\r\n\r\n\r\n\r\n//Dar panah khoda","ABI":"[{\"inputs\":[{\"internalType\":\"contract IUniswapV2Router\",\"name\":\"_router\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_balancerPoolAddress\",\"type\":\"address\"},{\"internalType\":\"contract IERC20\",\"name\":\"_uniDD\",\"type\":\"address\"},{\"internalType\":\"contract IERC20\",\"name\":\"_uniDE\",\"type\":\"address\"},{\"internalType\":\"contract IERC20\",\"name\":\"_uniDU\",\"type\":\"address\"},{\"internalType\":\"contract IERC20\",\"name\":\"_uniDeaEth\",\"type\":\"address\"},{\"internalType\":\"contract IERC20\",\"name\":\"_uniDeusUsdc\",\"type\":\"address\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"inputs\":[],\"name\":\"account\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"balancerPoolAddress\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"deadline\",\"type\":\"uint256\"}],\"name\":\"cleanPools\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"dea\",\"outputs\":[{\"internalType\":\"contract IERC20\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"deployer\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"deus\",\"outputs\":[{\"internalType\":\"contract IERC20\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"eth\",\"outputs\":[{\"internalType\":\"contract IERC20\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"contract IERC20\",\"name\":\"_dea\",\"type\":\"address\"},{\"internalType\":\"contract IERC20\",\"name\":\"_deus\",\"type\":\"address\"},{\"internalType\":\"contract IERC20\",\"name\":\"_eth\",\"type\":\"address\"},{\"internalType\":\"contract IERC20\",\"name\":\"_usdc\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_account\",\"type\":\"address\"}],\"name\":\"init\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"router\",\"outputs\":[{\"internalType\":\"contract IUniswapV2Router\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"uniDD\",\"outputs\":[{\"internalType\":\"contract IERC20\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"uniDE\",\"outputs\":[{\"internalType\":\"contract IERC20\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"uniDU\",\"outputs\":[{\"internalType\":\"contract IERC20\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"uniDeaEth\",\"outputs\":[{\"internalType\":\"contract IERC20\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"uniDeusUsdc\",\"outputs\":[{\"internalType\":\"contract IERC20\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"usdc\",\"outputs\":[{\"internalType\":\"contract IERC20\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"tokenAddress\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"withdrawERC20\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}]","ContractName":"PoolCleaner","CompilerVersion":"v0.8.7+commit.e28d00a7","OptimizationUsed":"0","Runs":"200","ConstructorArguments":"0000000000000000000000007a250d5630b4cf539739df2c5dacb4c659f2488d0000000000000000000000001dc2948b6db34e38291090b825518c1e8346938b00000000000000000000000092adab6d8dc13dbd9052b291cfc1d07888299d650000000000000000000000004d9824fbc04eff50ab1dac614eae4e20859d5c9100000000000000000000000083973dcaa04a6786ecc0628cc494a089c1aee947000000000000000000000000b049f430d34da8f077f2f281d9b1cc3b867620790000000000000000000000007d132aee8040e3e808a87b7eba6dde3bc7f55f1e","EVMVersion":"Default","Library":"","LicenseType":"MIT","Proxy":"0","Implementation":"","SwarmSource":"ipfs://ac53968676c29c6bf21f13278c5cb0758bf9116fca73619b3ad18f9eeb79a7a3"}]}