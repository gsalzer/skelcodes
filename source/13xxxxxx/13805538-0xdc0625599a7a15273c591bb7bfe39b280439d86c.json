{"status":"1","message":"OK","result":[{"SourceCode":"{{\r\n  \"language\": \"Solidity\",\r\n  \"sources\": {\r\n    \"contracts/MxtterAuctionManager.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.4;\\n\\nimport \\\"./IMxtterToken.sol\\\";\\nimport \\\"./zora/IAuctionHouse.sol\\\";\\nimport \\\"@openzeppelin/contracts/access/Ownable.sol\\\";\\nimport \\\"@openzeppelin/contracts/utils/Address.sol\\\";\\nimport \\\"@openzeppelin/contracts/token/ERC721/utils/ERC721Holder.sol\\\";\\n\\n/**\\n *  __    __     __  __     ______   ______   ______     ______\\n * /\\\\ \\\"-./  \\\\   /\\\\_\\\\_\\\\_\\\\   /\\\\__  _\\\\ /\\\\__  _\\\\ /\\\\  ___\\\\   /\\\\  == \\\\\\n * \\\\ \\\\ \\\\-./\\\\ \\\\  \\\\/_/\\\\_\\\\/_  \\\\/_/\\\\ \\\\/ \\\\/_/\\\\ \\\\/ \\\\ \\\\  __\\\\   \\\\ \\\\  __<\\n *  \\\\ \\\\_\\\\ \\\\ \\\\_\\\\   /\\\\_\\\\/\\\\_\\\\    \\\\ \\\\_\\\\    \\\\ \\\\_\\\\  \\\\ \\\\_____\\\\  \\\\ \\\\_\\\\ \\\\_\\\\\\n *   \\\\/_/  \\\\/_/   \\\\/_/\\\\/_/     \\\\/_/     \\\\/_/   \\\\/_____/   \\\\/_/ /_/\\n *\\n * @title Auction manager contract for Mxtter\\n * @dev This contract mints and auctions Mxtter Tokens\\n *\\n *\\n * MXTTER X BLOCK::BLOCK\\n *\\n * Smart contract work done by joshpeters.eth\\n */\\n\\ncontract MxtterAuctionManager is Ownable, ERC721Holder {\\n    using Address for address;\\n\\n    IMxtterToken public mxtterToken;\\n    IAuctionHouse public auctionHouse;\\n\\n    string public preGenerativeURI;\\n    uint256 public duration;\\n    uint256 public reservePrice;\\n    uint256 public curAuctionId;\\n\\n    event NewAuction(\\n        uint256 indexed tokenId,\\n        uint256 indexed auctionId,\\n        bytes32 tokenHash\\n    );\\n\\n    event NewToken(uint256 indexed tokenId, bytes32 tokenHash);\\n\\n    event TokenUriUpdated(uint256 indexed tokenId, string uri);\\n\\n    event Log(string msg, uint256 indexed auctionId);\\n\\n    constructor(\\n        address mxtterTokenAddress,\\n        address auctionHouseAddress,\\n        string memory _preGenerativeURI\\n    ) {\\n        mxtterToken = IMxtterToken(mxtterTokenAddress);\\n        auctionHouse = IAuctionHouse(auctionHouseAddress);\\n        preGenerativeURI = _preGenerativeURI;\\n\\n        duration = 79200; // 22 hours\\n        reservePrice = 10000000000000000; // 0.01 ETH\\n\\n        mxtterToken.setApprovalForAll(address(auctionHouse), true);\\n    }\\n\\n    // @dev 1) Ends the previous auction if it hasn't been ended already\\n    //      2) Mints a new Mxtter Token\\n    //      3) Create a new zora auction with the minted token\\n    //      4) Creates a min bid on the auction to kick off the timer\\n    //      5) Updates curent auction ID\\n    function newAuction() external onlyOwner {\\n        // Will revert if auction was already ended by someone else\\n        try auctionHouse.endAuction(curAuctionId) {\\n            emit Log(\\\"ended auction\\\", curAuctionId);\\n        } catch {\\n            emit Log(\\\"auction already ended\\\", curAuctionId);\\n        }\\n\\n        uint256 tokenId = mxtterToken.mintToken(\\n            address(this),\\n            preGenerativeURI\\n        );\\n        uint256 auctionId = auctionHouse.createAuction(\\n            tokenId,\\n            address(mxtterToken),\\n            duration,\\n            reservePrice,\\n            payable(0x0000000000000000000000000000000000000000),\\n            0,\\n            0x0000000000000000000000000000000000000000\\n        );\\n        auctionHouse.createBid{value: reservePrice}(auctionId, reservePrice);\\n        curAuctionId = auctionId;\\n\\n        emit NewAuction(tokenId, auctionId, mxtterToken.getTokenHash(tokenId));\\n    }\\n\\n    // @dev Mints a new Mxtter Token\\n    // @param to The address to mint token to\\n    function mintToken(address to) external onlyOwner {\\n        uint256 tokenId = mxtterToken.mintToken(to, preGenerativeURI);\\n        emit NewToken(tokenId, mxtterToken.getTokenHash(tokenId));\\n    }\\n\\n    // @dev Updates a Mxtter Token URI\\n    // @param tokenId The token ID to update\\n    // @param uri The URI to set\\n    function updateTokenURI(uint256 tokenId, string memory uri)\\n        external\\n        onlyOwner\\n    {\\n        mxtterToken.setTokenURI(tokenId, uri);\\n        emit TokenUriUpdated(tokenId, uri);\\n    }\\n\\n    // @dev Set a URI to use when token is created\\n    // @param _preGenerativeURI The new URI\\n    function setPreGenerativeURI(string memory _preGenerativeURI)\\n        external\\n        onlyOwner\\n    {\\n        preGenerativeURI = _preGenerativeURI;\\n    }\\n\\n    // @dev Set a new auction duration, in seconds\\n    // @param _duration The new duration in seconds\\n    function setDuration(uint256 _duration) external onlyOwner {\\n        duration = _duration;\\n    }\\n\\n    // @dev Set a new auction reserve price, in wei\\n    // @param _reservePrice The new reserve price in wei\\n    function setReservePrice(uint256 _reservePrice) external onlyOwner {\\n        reservePrice = _reservePrice;\\n    }\\n\\n    // @dev Set a new zora auction house contract\\n    // @param auctionHouseAddress The address of the contract\\n    function setAuctionHouse(address auctionHouseAddress) external onlyOwner {\\n        auctionHouse = IAuctionHouse(auctionHouseAddress);\\n        mxtterToken.setApprovalForAll(address(auctionHouse), true);\\n    }\\n\\n    // @dev Withdraw NFT as failsafe incase inital reserve bid wins\\n    // @param tokenId Mxtter Token ID\\n    function withdrawNFT(uint256 tokenId) external onlyOwner {\\n        mxtterToken.safeTransferFrom(address(this), msg.sender, tokenId);\\n    }\\n\\n    // @dev Withdraw ETH from contract\\n    function withdraw() external onlyOwner {\\n        uint256 balance = address(this).balance;\\n        payable(msg.sender).transfer(balance);\\n    }\\n\\n    receive() external payable {}\\n}\\n\"\r\n    },\r\n    \"contracts/IMxtterToken.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.4;\\n\\ninterface IMxtterToken {\\n    function mintToken(address to, string memory uri)\\n        external\\n        returns (uint256);\\n\\n    function setTokenURI(uint256 _tokenId, string memory _tokenURI) external;\\n\\n    function getTokenHash(uint256 tokenId) external view returns (bytes32);\\n\\n    function setApprovalForAll(address operator, bool _approved) external;\\n\\n    function safeTransferFrom(\\n        address from,\\n        address to,\\n        uint256 tokenId\\n    ) external;\\n}\\n\"\r\n    },\r\n    \"contracts/zora/IAuctionHouse.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: GPL-3.0\\n\\npragma solidity ^0.8.4;\\npragma experimental ABIEncoderV2;\\n\\n/**\\n * @title Interface for Auction Houses\\n */\\ninterface IAuctionHouse {\\n    struct Auction {\\n        // ID for the ERC721 token\\n        uint256 tokenId;\\n        // Address for the ERC721 contract\\n        address tokenContract;\\n        // Whether or not the auction curator has approved the auction to start\\n        bool approved;\\n        // The current highest bid amount\\n        uint256 amount;\\n        // The length of time to run the auction for, after the first bid was made\\n        uint256 duration;\\n        // The time of the first bid\\n        uint256 firstBidTime;\\n        // The minimum price of the first bid\\n        uint256 reservePrice;\\n        // The sale percentage to send to the curator\\n        uint8 curatorFeePercentage;\\n        // The address that should receive the funds once the NFT is sold.\\n        address tokenOwner;\\n        // The address of the current highest bid\\n        address payable bidder;\\n        // The address of the auction's curator.\\n        // The curator can reject or approve an auction\\n        address payable curator;\\n        // The address of the ERC-20 currency to run the auction with.\\n        // If set to 0x0, the auction will be run in ETH\\n        address auctionCurrency;\\n    }\\n\\n    event AuctionCreated(\\n        uint256 indexed auctionId,\\n        uint256 indexed tokenId,\\n        address indexed tokenContract,\\n        uint256 duration,\\n        uint256 reservePrice,\\n        address tokenOwner,\\n        address curator,\\n        uint8 curatorFeePercentage,\\n        address auctionCurrency\\n    );\\n\\n    event AuctionApprovalUpdated(\\n        uint256 indexed auctionId,\\n        uint256 indexed tokenId,\\n        address indexed tokenContract,\\n        bool approved\\n    );\\n\\n    event AuctionReservePriceUpdated(\\n        uint256 indexed auctionId,\\n        uint256 indexed tokenId,\\n        address indexed tokenContract,\\n        uint256 reservePrice\\n    );\\n\\n    event AuctionBid(\\n        uint256 indexed auctionId,\\n        uint256 indexed tokenId,\\n        address indexed tokenContract,\\n        address sender,\\n        uint256 value,\\n        bool firstBid,\\n        bool extended\\n    );\\n\\n    event AuctionDurationExtended(\\n        uint256 indexed auctionId,\\n        uint256 indexed tokenId,\\n        address indexed tokenContract,\\n        uint256 duration\\n    );\\n\\n    event AuctionEnded(\\n        uint256 indexed auctionId,\\n        uint256 indexed tokenId,\\n        address indexed tokenContract,\\n        address tokenOwner,\\n        address curator,\\n        address winner,\\n        uint256 amount,\\n        uint256 curatorFee,\\n        address auctionCurrency\\n    );\\n\\n    event AuctionCanceled(\\n        uint256 indexed auctionId,\\n        uint256 indexed tokenId,\\n        address indexed tokenContract,\\n        address tokenOwner\\n    );\\n\\n    function createAuction(\\n        uint256 tokenId,\\n        address tokenContract,\\n        uint256 duration,\\n        uint256 reservePrice,\\n        address payable curator,\\n        uint8 curatorFeePercentages,\\n        address auctionCurrency\\n    ) external returns (uint256);\\n\\n    function setAuctionApproval(uint256 auctionId, bool approved) external;\\n\\n    function setAuctionReservePrice(uint256 auctionId, uint256 reservePrice)\\n        external;\\n\\n    function createBid(uint256 auctionId, uint256 amount) external payable;\\n\\n    function endAuction(uint256 auctionId) external;\\n\\n    function cancelAuction(uint256 auctionId) external;\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/access/Ownable.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.0 (access/Ownable.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../utils/Context.sol\\\";\\n\\n/**\\n * @dev Contract module which provides a basic access control mechanism, where\\n * there is an account (an owner) that can be granted exclusive access to\\n * specific functions.\\n *\\n * By default, the owner account will be the one that deploys the contract. This\\n * can later be changed with {transferOwnership}.\\n *\\n * This module is used through inheritance. It will make available the modifier\\n * `onlyOwner`, which can be applied to your functions to restrict their use to\\n * the owner.\\n */\\nabstract contract Ownable is Context {\\n    address private _owner;\\n\\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\\n\\n    /**\\n     * @dev Initializes the contract setting the deployer as the initial owner.\\n     */\\n    constructor() {\\n        _transferOwnership(_msgSender());\\n    }\\n\\n    /**\\n     * @dev Returns the address of the current owner.\\n     */\\n    function owner() public view virtual returns (address) {\\n        return _owner;\\n    }\\n\\n    /**\\n     * @dev Throws if called by any account other than the owner.\\n     */\\n    modifier onlyOwner() {\\n        require(owner() == _msgSender(), \\\"Ownable: caller is not the owner\\\");\\n        _;\\n    }\\n\\n    /**\\n     * @dev Leaves the contract without owner. It will not be possible to call\\n     * `onlyOwner` functions anymore. Can only be called by the current owner.\\n     *\\n     * NOTE: Renouncing ownership will leave the contract without an owner,\\n     * thereby removing any functionality that is only available to the owner.\\n     */\\n    function renounceOwnership() public virtual onlyOwner {\\n        _transferOwnership(address(0));\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Can only be called by the current owner.\\n     */\\n    function transferOwnership(address newOwner) public virtual onlyOwner {\\n        require(newOwner != address(0), \\\"Ownable: new owner is the zero address\\\");\\n        _transferOwnership(newOwner);\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Internal function without access restriction.\\n     */\\n    function _transferOwnership(address newOwner) internal virtual {\\n        address oldOwner = _owner;\\n        _owner = newOwner;\\n        emit OwnershipTransferred(oldOwner, newOwner);\\n    }\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/utils/Address.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.0 (utils/Address.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Collection of functions related to the address type\\n */\\nlibrary Address {\\n    /**\\n     * @dev Returns true if `account` is a contract.\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * It is unsafe to assume that an address for which this function returns\\n     * false is an externally-owned account (EOA) and not a contract.\\n     *\\n     * Among others, `isContract` will return false for the following\\n     * types of addresses:\\n     *\\n     *  - an externally-owned account\\n     *  - a contract in construction\\n     *  - an address where a contract will be created\\n     *  - an address where a contract lived, but was destroyed\\n     * ====\\n     */\\n    function isContract(address account) internal view returns (bool) {\\n        // This method relies on extcodesize, which returns 0 for contracts in\\n        // construction, since the code is only stored at the end of the\\n        // constructor execution.\\n\\n        uint256 size;\\n        assembly {\\n            size := extcodesize(account)\\n        }\\n        return size > 0;\\n    }\\n\\n    /**\\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\\n     * `recipient`, forwarding all available gas and reverting on errors.\\n     *\\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\\n     * imposed by `transfer`, making them unable to receive funds via\\n     * `transfer`. {sendValue} removes this limitation.\\n     *\\n     * https://diligence.consensys.net/posts/2019/09/stop-using-soliditys-transfer-now/[Learn more].\\n     *\\n     * IMPORTANT: because control is transferred to `recipient`, care must be\\n     * taken to not create reentrancy vulnerabilities. Consider using\\n     * {ReentrancyGuard} or the\\n     * https://solidity.readthedocs.io/en/v0.5.11/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\\n     */\\n    function sendValue(address payable recipient, uint256 amount) internal {\\n        require(address(this).balance >= amount, \\\"Address: insufficient balance\\\");\\n\\n        (bool success, ) = recipient.call{value: amount}(\\\"\\\");\\n        require(success, \\\"Address: unable to send value, recipient may have reverted\\\");\\n    }\\n\\n    /**\\n     * @dev Performs a Solidity function call using a low level `call`. A\\n     * plain `call` is an unsafe replacement for a function call: use this\\n     * function instead.\\n     *\\n     * If `target` reverts with a revert reason, it is bubbled up by this\\n     * function (like regular Solidity function calls).\\n     *\\n     * Returns the raw returned data. To convert to the expected return value,\\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\\n     *\\n     * Requirements:\\n     *\\n     * - `target` must be a contract.\\n     * - calling `target` with `data` must not revert.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionCall(target, data, \\\"Address: low-level call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\\n     * `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, 0, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but also transferring `value` wei to `target`.\\n     *\\n     * Requirements:\\n     *\\n     * - the calling contract must have an ETH balance of at least `value`.\\n     * - the called Solidity function must be `payable`.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, value, \\\"Address: low-level call with value failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\\n     * with `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        require(address(this).balance >= value, \\\"Address: insufficient balance for call\\\");\\n        require(isContract(target), \\\"Address: call to non-contract\\\");\\n\\n        (bool success, bytes memory returndata) = target.call{value: value}(data);\\n        return verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\\n        return functionStaticCall(target, data, \\\"Address: low-level static call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal view returns (bytes memory) {\\n        require(isContract(target), \\\"Address: static call to non-contract\\\");\\n\\n        (bool success, bytes memory returndata) = target.staticcall(data);\\n        return verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionDelegateCall(target, data, \\\"Address: low-level delegate call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        require(isContract(target), \\\"Address: delegate call to non-contract\\\");\\n\\n        (bool success, bytes memory returndata) = target.delegatecall(data);\\n        return verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Tool to verifies that a low level call was successful, and revert if it wasn't, either by bubbling the\\n     * revert reason using the provided one.\\n     *\\n     * _Available since v4.3._\\n     */\\n    function verifyCallResult(\\n        bool success,\\n        bytes memory returndata,\\n        string memory errorMessage\\n    ) internal pure returns (bytes memory) {\\n        if (success) {\\n            return returndata;\\n        } else {\\n            // Look for revert reason and bubble it up if present\\n            if (returndata.length > 0) {\\n                // The easiest way to bubble the revert reason is using memory via assembly\\n\\n                assembly {\\n                    let returndata_size := mload(returndata)\\n                    revert(add(32, returndata), returndata_size)\\n                }\\n            } else {\\n                revert(errorMessage);\\n            }\\n        }\\n    }\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/token/ERC721/utils/ERC721Holder.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.0 (token/ERC721/utils/ERC721Holder.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../IERC721Receiver.sol\\\";\\n\\n/**\\n * @dev Implementation of the {IERC721Receiver} interface.\\n *\\n * Accepts all token transfers.\\n * Make sure the contract is able to use its token with {IERC721-safeTransferFrom}, {IERC721-approve} or {IERC721-setApprovalForAll}.\\n */\\ncontract ERC721Holder is IERC721Receiver {\\n    /**\\n     * @dev See {IERC721Receiver-onERC721Received}.\\n     *\\n     * Always returns `IERC721Receiver.onERC721Received.selector`.\\n     */\\n    function onERC721Received(\\n        address,\\n        address,\\n        uint256,\\n        bytes memory\\n    ) public virtual override returns (bytes4) {\\n        return this.onERC721Received.selector;\\n    }\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/utils/Context.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.0 (utils/Context.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Provides information about the current execution context, including the\\n * sender of the transaction and its data. While these are generally available\\n * via msg.sender and msg.data, they should not be accessed in such a direct\\n * manner, since when dealing with meta-transactions the account sending and\\n * paying for execution may not be the actual sender (as far as an application\\n * is concerned).\\n *\\n * This contract is only required for intermediate, library-like contracts.\\n */\\nabstract contract Context {\\n    function _msgSender() internal view virtual returns (address) {\\n        return msg.sender;\\n    }\\n\\n    function _msgData() internal view virtual returns (bytes calldata) {\\n        return msg.data;\\n    }\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/token/ERC721/IERC721Receiver.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.0 (token/ERC721/IERC721Receiver.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @title ERC721 token receiver interface\\n * @dev Interface for any contract that wants to support safeTransfers\\n * from ERC721 asset contracts.\\n */\\ninterface IERC721Receiver {\\n    /**\\n     * @dev Whenever an {IERC721} `tokenId` token is transferred to this contract via {IERC721-safeTransferFrom}\\n     * by `operator` from `from`, this function is called.\\n     *\\n     * It must return its Solidity selector to confirm the token transfer.\\n     * If any other value is returned or the interface is not implemented by the recipient, the transfer will be reverted.\\n     *\\n     * The selector can be obtained in Solidity with `IERC721.onERC721Received.selector`.\\n     */\\n    function onERC721Received(\\n        address operator,\\n        address from,\\n        uint256 tokenId,\\n        bytes calldata data\\n    ) external returns (bytes4);\\n}\\n\"\r\n    }\r\n  },\r\n  \"settings\": {\r\n    \"optimizer\": {\r\n      \"enabled\": false,\r\n      \"runs\": 200\r\n    },\r\n    \"outputSelection\": {\r\n      \"*\": {\r\n        \"*\": [\r\n          \"evm.bytecode\",\r\n          \"evm.deployedBytecode\",\r\n          \"devdoc\",\r\n          \"userdoc\",\r\n          \"metadata\",\r\n          \"abi\"\r\n        ]\r\n      }\r\n    },\r\n    \"libraries\": {}\r\n  }\r\n}}","ABI":"[{\"inputs\":[{\"internalType\":\"address\",\"name\":\"mxtterTokenAddress\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"auctionHouseAddress\",\"type\":\"address\"},{\"internalType\":\"string\",\"name\":\"_preGenerativeURI\",\"type\":\"string\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"string\",\"name\":\"msg\",\"type\":\"string\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"auctionId\",\"type\":\"uint256\"}],\"name\":\"Log\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"auctionId\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"bytes32\",\"name\":\"tokenHash\",\"type\":\"bytes32\"}],\"name\":\"NewAuction\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"bytes32\",\"name\":\"tokenHash\",\"type\":\"bytes32\"}],\"name\":\"NewToken\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"string\",\"name\":\"uri\",\"type\":\"string\"}],\"name\":\"TokenUriUpdated\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"auctionHouse\",\"outputs\":[{\"internalType\":\"contract IAuctionHouse\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"curAuctionId\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"duration\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"}],\"name\":\"mintToken\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"mxtterToken\",\"outputs\":[{\"internalType\":\"contract IMxtterToken\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"newAuction\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"},{\"internalType\":\"bytes\",\"name\":\"\",\"type\":\"bytes\"}],\"name\":\"onERC721Received\",\"outputs\":[{\"internalType\":\"bytes4\",\"name\":\"\",\"type\":\"bytes4\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"preGenerativeURI\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"reservePrice\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"auctionHouseAddress\",\"type\":\"address\"}],\"name\":\"setAuctionHouse\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_duration\",\"type\":\"uint256\"}],\"name\":\"setDuration\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"string\",\"name\":\"_preGenerativeURI\",\"type\":\"string\"}],\"name\":\"setPreGenerativeURI\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_reservePrice\",\"type\":\"uint256\"}],\"name\":\"setReservePrice\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"},{\"internalType\":\"string\",\"name\":\"uri\",\"type\":\"string\"}],\"name\":\"updateTokenURI\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"withdraw\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"withdrawNFT\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"stateMutability\":\"payable\",\"type\":\"receive\"}]","ContractName":"MxtterAuctionManager","CompilerVersion":"v0.8.4+commit.c7e474f2","OptimizationUsed":"0","Runs":"200","ConstructorArguments":"000000000000000000000000c141fbc08f629cfafce6bc63bc4acb59212f5da4000000000000000000000000e7dd1252f50b3d845590da0c5eadd985049a03ce00000000000000000000000000000000000000000000000000000000000000600000000000000000000000000000000000000000000000000000000000000035697066733a2f2f516d5262626635384e334a704c44473652733968646a356e365167587270635755706342795062744758526265550000000000000000000000","EVMVersion":"Default","Library":"","LicenseType":"","Proxy":"0","Implementation":"","SwarmSource":""}]}