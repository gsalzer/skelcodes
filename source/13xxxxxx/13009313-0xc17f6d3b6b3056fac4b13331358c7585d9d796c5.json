{"status":"1","message":"OK","result":[{"SourceCode":"pragma solidity ^0.8.4;\r\n\r\nabstract contract Context {\r\n    function _msgSender() internal view virtual returns (address payable) {\r\n        return payable(msg.sender);\r\n    }\r\n\r\n    function _msgData() internal view virtual returns (bytes memory) {\r\n        this; // silence state mutability warning without generating bytecode - see https://github.com/ethereum/solidity/issues/2691\r\n        return msg.data;\r\n    }\r\n}\r\n\r\ncontract Ownable is Context {\r\n    address private _owner;\r\n    address private _previousOwner;\r\n\r\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\r\n\r\n    constructor () {\r\n        address msgSender = _msgSender();\r\n        _owner = msgSender;\r\n        emit OwnershipTransferred(address(0), msgSender);\r\n    }\r\n\r\n    function owner() public view returns (address) {\r\n        return _owner;\r\n    }\r\n    \r\n    modifier onlyOwner() {\r\n        require(_owner == _msgSender(), \"Ownable: caller is not the owner\");\r\n        _;\r\n    }\r\n    \r\n    function renounceOwnership() public virtual onlyOwner {\r\n        emit OwnershipTransferred(_owner, address(0));\r\n        _owner = address(0);\r\n    }\r\n\r\n    function transferOwnership(address newOwner) public virtual onlyOwner {\r\n        require(newOwner != address(0), \"Ownable: new owner is the zero address\");\r\n        emit OwnershipTransferred(_owner, newOwner);\r\n        _owner = newOwner;\r\n    }\r\n}\r\n\r\ninterface IERC20 {\r\n    /**\r\n     * @dev Returns the amount of tokens in existence.\r\n     */\r\n    function totalSupply() external view returns (uint256);\r\n\r\n    /**\r\n     * @dev Returns the amount of tokens owned by `account`.\r\n     */\r\n    function balanceOf(address account) external view returns (uint256);\r\n\r\n    /**\r\n     * @dev Moves `amount` tokens from the caller's account to `recipient`.\r\n     *\r\n     * Returns a boolean value indicating whether the operation succeeded.\r\n     *\r\n     * Emits a {Transfer} event.\r\n     */\r\n    function transfer(address recipient, uint256 amount) external returns (bool);\r\n\r\n    /**\r\n     * @dev Returns the remaining number of tokens that `spender` will be\r\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\r\n     * zero by default.\r\n     *\r\n     * This value changes when {approve} or {transferFrom} are called.\r\n     */\r\n    function allowance(address owner, address spender) external view returns (uint256);\r\n\r\n    /**\r\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\r\n     *\r\n     * Returns a boolean value indicating whether the operation succeeded.\r\n     *\r\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\r\n     * that someone may use both the old and the new allowance by unfortunate\r\n     * transaction ordering. One possible solution to mitigate this race\r\n     * condition is to first reduce the spender's allowance to 0 and set the\r\n     * desired value afterwards:\r\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\r\n     *\r\n     * Emits an {Approval} event.\r\n     */\r\n    function approve(address spender, uint256 amount) external returns (bool);\r\n\r\n    /**\r\n     * @dev Moves `amount` tokens from `sender` to `recipient` using the\r\n     * allowance mechanism. `amount` is then deducted from the caller's\r\n     * allowance.\r\n     *\r\n     * Returns a boolean value indicating whether the operation succeeded.\r\n     *\r\n     * Emits a {Transfer} event.\r\n     */\r\n    function transferFrom(address sender, address recipient, uint256 amount) external returns (bool);\r\n\r\n    /**\r\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\r\n     * another (`to`).\r\n     *\r\n     * Note that `value` may be zero.\r\n     */\r\n    event Transfer(address indexed from, address indexed to, uint256 value);\r\n\r\n    /**\r\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\r\n     * a call to {approve}. `value` is the new allowance.\r\n     */\r\n    event Approval(address indexed owner, address indexed spender, uint256 value);\r\n}\r\n\r\n// SPDX-License-Identifier: GPL-3.0-or-later\r\n// helper methods for interacting with ERC20 tokens and sending ETH that do not consistently return true/false\r\nlibrary TransferHelper {\r\n    function safeApprove(address token, address to, uint value) internal {\r\n        // bytes4(keccak256(bytes('approve(address,uint256)')));\r\n        (bool success, bytes memory data) = token.call(abi.encodeWithSelector(0x095ea7b3, to, value));\r\n        require(success && (data.length == 0 || abi.decode(data, (bool))), 'TransferHelper: APPROVE_FAILED');\r\n    }\r\n\r\n    function safeTransfer(address token, address to, uint value) internal {\r\n        // bytes4(keccak256(bytes('transfer(address,uint256)')));\r\n        (bool success, bytes memory data) = token.call(abi.encodeWithSelector(0xa9059cbb, to, value));\r\n        require(success && (data.length == 0 || abi.decode(data, (bool))), 'TransferHelper: TRANSFER_FAILED');\r\n    }\r\n\r\n    function safeTransferFrom(address token, address from, address to, uint value) internal {\r\n        // bytes4(keccak256(bytes('transferFrom(address,address,uint256)')));\r\n        (bool success, bytes memory data) = token.call(abi.encodeWithSelector(0x23b872dd, from, to, value));\r\n        require(success && (data.length == 0 || abi.decode(data, (bool))), 'TransferHelper: TRANSFER_FROM_FAILED');\r\n    }\r\n\r\n    function safeTransferETH(address to, uint value) internal {\r\n        (bool success,) = to.call{value:value}(new bytes(0));\r\n        require(success, 'TransferHelper: ETH_TRANSFER_FAILED');\r\n    }\r\n}\r\n\r\ncontract Contribut is Ownable {\r\n    struct EventData {\r\n        string eventName;\r\n        address depositToken;\r\n        uint256 depositTotal;\r\n        uint256 hardCap;\r\n        uint256 maxContribut;\r\n        uint256 minContribut;\r\n        uint256 FCFSTimer;\r\n        address[] users;\r\n        address owner;\r\n        bool active;\r\n    }\r\n    mapping(uint256 => EventData) public eventList;\r\n    uint256 public eventNonce;\r\n    \r\n    struct ContributionData {\r\n        uint256 eventId;\r\n        string eventName;\r\n        uint256 depositAmount;\r\n    }\r\n    mapping(address => mapping(uint256 => uint256)) public userList;\r\n\r\n    struct UserData {\r\n        address user;\r\n        uint256 depositAmount;\r\n    }\r\n\r\n    event Published(uint256 eventId, string eventName, address depositToken, uint256 hardCap, uint256 maxContribut, uint256 minContribut, uint256 FCFSTimer, address owner, bool active);\r\n    event Close(uint256 eventId, address depositToken, uint256 depositTotal);\r\n    event Contribution(uint256 eventId, address user, uint256 depositAmount);\r\n    event Vested(uint256 eventId, address user, address tokenAddress, uint256 amount);\r\n\r\n    receive() external payable {}\r\n\r\n    function RecoverERC20(address _tokenAddress) public onlyOwner {\r\n        uint256 balance = IERC20(_tokenAddress).balanceOf(address(this));\r\n        TransferHelper.safeTransfer(_tokenAddress, owner(), balance);\r\n    }\r\n\r\n    function RecoverETH() public onlyOwner() {\r\n        address owner = owner();\r\n        payable(owner).transfer(address(this).balance);\r\n    }\r\n\r\n    function SetEvent(string calldata _eventName, address _depositToken, uint256 _hardCap, uint256 _maxContribut, uint256 _minContribut, uint256 _FCFSTimer) external onlyOwner {\r\n        require(_hardCap >= _maxContribut, \"Invalid hardCap\");\r\n        require(_maxContribut >= _minContribut, \"Invalid minContribut\");\r\n        require(_depositToken != address(0), \"Invalid depositToken\");\r\n        address[] memory users;\r\n        eventList[eventNonce] = EventData({\r\n            eventName : _eventName,\r\n            depositToken : _depositToken,\r\n            depositTotal : 0,\r\n            hardCap : _hardCap,\r\n            maxContribut : _maxContribut,\r\n            minContribut : _minContribut,\r\n            FCFSTimer : _FCFSTimer,\r\n            users : users,\r\n            owner : msg.sender,\r\n            active : true\r\n        });\r\n        emit Published(eventNonce, _eventName, _depositToken, _hardCap, _maxContribut, _minContribut, _FCFSTimer, msg.sender, true);\r\n        eventNonce++;\r\n    }\r\n\r\n    function CloseEvent(uint256 _eventId) external onlyOwner {\r\n        require(_eventId < eventNonce, \"Invalid EventId\");\r\n        require(eventList[_eventId].active, \"Event is not active\");\r\n        require(eventList[_eventId].hardCap == eventList[_eventId].depositTotal, \"Not reached hardCap\");\r\n        \r\n        TransferHelper.safeTransfer(eventList[_eventId].depositToken, msg.sender, eventList[_eventId].depositTotal);\r\n        eventList[_eventId].active = false;\r\n        emit Close(_eventId, eventList[_eventId].depositToken, eventList[_eventId].depositTotal);\r\n    }\r\n\r\n    function SetVested(uint256 _eventId, address _tokenAddress, uint256 _amount) external onlyOwner {\r\n        require(_eventId < eventNonce, \"Invalid EventId\");\r\n        require(eventList[_eventId].active == false, \"Event is active\");\r\n        \r\n        uint256 preBalance = IERC20(_tokenAddress).balanceOf(address(this));\r\n        TransferHelper.safeTransferFrom(_tokenAddress, msg.sender, address(this), _amount);\r\n        UserData[] memory data = GetEventData(_eventId);\r\n\r\n        uint256 balance = IERC20(_tokenAddress).balanceOf(address(this)) - preBalance;\r\n        for (uint256 i = 0; i < data.length; i++) {\r\n            uint256 vestedBalance = balance * 1e18 * data[i].depositAmount / eventList[_eventId].depositTotal / 1e18;\r\n            if (vestedBalance > 0) {\r\n                TransferHelper.safeTransfer(_tokenAddress, data[i].user, vestedBalance);\r\n                emit Vested(_eventId, data[i].user, _tokenAddress, vestedBalance);\r\n            }\r\n        }\r\n        balance = IERC20(_tokenAddress).balanceOf(address(this));\r\n        if (balance > preBalance) {\r\n            TransferHelper.safeTransfer(_tokenAddress, msg.sender, balance - preBalance);\r\n        }\r\n    }\r\n\r\n    function Deposit(uint256 _eventId, uint256 _depositAmount) external {\r\n        require(_eventId < eventNonce, \"Invalid EventId\");\r\n        require(eventList[_eventId].active, \"Event is not active\");\r\n        require(eventList[_eventId].hardCap > eventList[_eventId].depositTotal, \"It is beyond hardCap\");\r\n        require(eventList[_eventId].FCFSTimer < block.timestamp || eventList[_eventId].maxContribut >= userList[msg.sender][_eventId] + _depositAmount, \"Deposit is high\");\r\n        require(eventList[_eventId].minContribut <= _depositAmount, \"Deposit is low\");\r\n        require(eventList[_eventId].FCFSTimer < block.timestamp || userList[msg.sender][_eventId] == 0, \"Please wait for FCFS\");\r\n\r\n        if (eventList[_eventId].hardCap < eventList[_eventId].depositTotal + _depositAmount) {\r\n            _depositAmount = eventList[_eventId].hardCap - eventList[_eventId].depositTotal;\r\n        }\r\n        userList[msg.sender][_eventId] += _depositAmount;\r\n        eventList[_eventId].depositTotal += _depositAmount;\r\n        TransferHelper.safeTransferFrom(eventList[_eventId].depositToken, msg.sender, address(this), _depositAmount);\r\n\r\n        if (CheckEventListUsers(msg.sender, _eventId) == false) {\r\n            eventList[_eventId].users.push(msg.sender);\r\n        }\r\n        emit Contribution(_eventId, msg.sender, userList[msg.sender][_eventId]);\r\n    }\r\n\r\n    function Refund(uint256 _eventId, uint256 _refundAmount) external {\r\n        require(_eventId < eventNonce, \"Invalid EventId\");\r\n        require(eventList[_eventId].active, \"Event is not active\");\r\n        require(userList[msg.sender][_eventId] >= _refundAmount, \"Contributions are insufficient\");\r\n\r\n        userList[msg.sender][_eventId] -= _refundAmount;\r\n        eventList[_eventId].depositTotal -= _refundAmount;\r\n        TransferHelper.safeTransfer(eventList[_eventId].depositToken, msg.sender, _refundAmount);\r\n        emit Contribution(_eventId, msg.sender, userList[msg.sender][_eventId]);\r\n    }\r\n\r\n    function TransferContribut(uint256 _eventId, address _to, uint256 _transferContribut) external {\r\n        require(_eventId < eventNonce, \"Invalid EventId\");\r\n        require(eventList[_eventId].active == false, \"Event is active\");\r\n        require(userList[msg.sender][_eventId] >= _transferContribut, \"Contributions are insufficient\");\r\n\r\n        userList[msg.sender][_eventId] -= _transferContribut;\r\n        userList[_to][_eventId] += _transferContribut;\r\n        if (CheckEventListUsers(_to, _eventId) == false) {\r\n            eventList[_eventId].users.push(_to);\r\n        }\r\n        emit Contribution(_eventId, msg.sender, userList[msg.sender][_eventId]);\r\n        emit Contribution(_eventId, _to, userList[_to][_eventId]);\r\n    }\r\n\r\n    function CheckEventListUsers(address _user, uint256 _eventId) public view returns (bool _flag) {\r\n        for (uint256 i = 0; i < eventList[_eventId].users.length; i++) {\r\n            if (eventList[_eventId].users[i] == _user) {\r\n                return true;\r\n            }\r\n        }\r\n        return false;\r\n    }\r\n\r\n    function GetUserData(address _user, uint256 _eventId) public view returns (uint256 _depositAmount) {\r\n        return userList[_user][_eventId];\r\n    }\r\n\r\n    function GetUserAllData(address _user) public view returns (ContributionData[] memory _userAllData) {\r\n        uint256 activeCount = GetUserActiveEventCount(_user);\r\n        uint256 setCount = 0;\r\n        ContributionData[] memory userAllData = new ContributionData[](activeCount);\r\n        for (uint256 i = 0; i < eventNonce; i++) {\r\n            if (userList[_user][i] > 0) {\r\n                userAllData[setCount] = ContributionData({\r\n                    eventId : i,\r\n                    eventName : eventList[i].eventName,\r\n                    depositAmount : userList[_user][i]\r\n                });\r\n                setCount++;\r\n            }\r\n        }\r\n        return userAllData;\r\n    }\r\n\r\n    function GetUserActiveEventCount(address _user) public view returns (uint256) {\r\n        uint256 activeCount = 0;\r\n        for (uint256 i = 0; i < eventNonce; i++) {\r\n            if (userList[_user][i] > 0) {\r\n                activeCount++;\r\n            }\r\n        }\r\n        return activeCount;\r\n    }\r\n\r\n    function GetEventData(uint256 _eventId) public view returns (UserData[] memory _userData) {\r\n        address[] memory users = eventList[_eventId].users;\r\n        UserData[] memory data = new UserData[](users.length);\r\n        for (uint256 i = 0; i < users.length; i++) {\r\n            data[i].user = users[i];\r\n            data[i].depositAmount = GetUserData(users[i], _eventId);\r\n        }\r\n        return data;\r\n    }\r\n\r\n}","ABI":"[{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"eventId\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"depositToken\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"depositTotal\",\"type\":\"uint256\"}],\"name\":\"Close\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"eventId\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"depositAmount\",\"type\":\"uint256\"}],\"name\":\"Contribution\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"eventId\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"string\",\"name\":\"eventName\",\"type\":\"string\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"depositToken\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"hardCap\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"maxContribut\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"minContribut\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"FCFSTimer\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"bool\",\"name\":\"active\",\"type\":\"bool\"}],\"name\":\"Published\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"eventId\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"tokenAddress\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"Vested\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_user\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_eventId\",\"type\":\"uint256\"}],\"name\":\"CheckEventListUsers\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"_flag\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_eventId\",\"type\":\"uint256\"}],\"name\":\"CloseEvent\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_eventId\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_depositAmount\",\"type\":\"uint256\"}],\"name\":\"Deposit\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_eventId\",\"type\":\"uint256\"}],\"name\":\"GetEventData\",\"outputs\":[{\"components\":[{\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"depositAmount\",\"type\":\"uint256\"}],\"internalType\":\"struct Contribut.UserData[]\",\"name\":\"_userData\",\"type\":\"tuple[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_user\",\"type\":\"address\"}],\"name\":\"GetUserActiveEventCount\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_user\",\"type\":\"address\"}],\"name\":\"GetUserAllData\",\"outputs\":[{\"components\":[{\"internalType\":\"uint256\",\"name\":\"eventId\",\"type\":\"uint256\"},{\"internalType\":\"string\",\"name\":\"eventName\",\"type\":\"string\"},{\"internalType\":\"uint256\",\"name\":\"depositAmount\",\"type\":\"uint256\"}],\"internalType\":\"struct Contribut.ContributionData[]\",\"name\":\"_userAllData\",\"type\":\"tuple[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_user\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_eventId\",\"type\":\"uint256\"}],\"name\":\"GetUserData\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"_depositAmount\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_tokenAddress\",\"type\":\"address\"}],\"name\":\"RecoverERC20\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"RecoverETH\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_eventId\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_refundAmount\",\"type\":\"uint256\"}],\"name\":\"Refund\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"string\",\"name\":\"_eventName\",\"type\":\"string\"},{\"internalType\":\"address\",\"name\":\"_depositToken\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_hardCap\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_maxContribut\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_minContribut\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_FCFSTimer\",\"type\":\"uint256\"}],\"name\":\"SetEvent\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_eventId\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"_tokenAddress\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"SetVested\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_eventId\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"_to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_transferContribut\",\"type\":\"uint256\"}],\"name\":\"TransferContribut\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"eventList\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"eventName\",\"type\":\"string\"},{\"internalType\":\"address\",\"name\":\"depositToken\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"depositTotal\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"hardCap\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"maxContribut\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"minContribut\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"FCFSTimer\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"internalType\":\"bool\",\"name\":\"active\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"eventNonce\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"userList\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"stateMutability\":\"payable\",\"type\":\"receive\"}]","ContractName":"Contribut","CompilerVersion":"v0.8.4+commit.c7e474f2","OptimizationUsed":"1","Runs":"1000","ConstructorArguments":"","EVMVersion":"Default","Library":"","LicenseType":"MIT","Proxy":"0","Implementation":"","SwarmSource":"ipfs://5707833988af588eb1954907606915e51a5b9d015a91ec0ab63e10a0cc15bff7"}]}