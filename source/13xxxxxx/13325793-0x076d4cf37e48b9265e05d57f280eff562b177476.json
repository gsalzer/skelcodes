{"status":"1","message":"OK","result":[{"SourceCode":"{{\r\n  \"language\": \"Solidity\",\r\n  \"sources\": {\r\n    \"contracts/interests/InterestCalculatorV2.sol\": {\r\n      \"content\": \"//██████╗  █████╗ ██╗      █████╗ ██████╗ ██╗███╗   ██╗\\n//██╔══██╗██╔══██╗██║     ██╔══██╗██╔══██╗██║████╗  ██║\\n//██████╔╝███████║██║     ███████║██║  ██║██║██╔██╗ ██║\\n//██╔═══╝ ██╔══██║██║     ██╔══██║██║  ██║██║██║╚██╗██║\\n//██║     ██║  ██║███████╗██║  ██║██████╔╝██║██║ ╚████║\\n//╚═╝     ╚═╝  ╚═╝╚══════╝╚═╝  ╚═╝╚═════╝ ╚═╝╚═╝  ╚═══╝\\n                                                     \\n\\npragma solidity ^0.7.6;\\n//SPDX-License-Identifier: MIT\\n\\nimport \\\"./InterestInterface.sol\\\";\\nimport \\\"./multipliers/IMultiplierCalculator.sol\\\";\\nimport \\\"../utils/SafeMath.sol\\\";\\nimport \\\"../utils/Admin.sol\\\";\\n\\n/** @title Interest Module V2 for Paladin PalPools  */\\n/// @author Paladin\\ncontract InterestCalculatorV2 is InterestInterface, Admin {\\n    using SafeMath for uint;\\n\\n\\n    bool private initiated = false;\\n\\n    mapping(address => bool) public useMultiplier;\\n\\n    uint public blocksPerYear = 2336000;\\n\\n    uint public multiplierPerBlock;\\n    uint public baseRatePerBlock;\\n    uint public jumpMultiplierPerBlock;\\n\\n    mapping(address => IMultiplierCalculator) public multiplierForPool;\\n    \\n\\n    constructor(){\\n        admin = msg.sender;\\n    }\\n\\n\\n    function initiate(\\n        uint multiplierPerYear,\\n        uint baseRatePerYear,\\n        uint jumpMultiplierPerYear,\\n        address[] memory palPools,\\n        address[] memory multiplierCalculators\\n    ) external adminOnly {\\n        require(!initiated, \\\"Already initiated\\\");\\n        require(palPools.length == multiplierCalculators.length);\\n\\n        multiplierPerBlock = multiplierPerYear.div(blocksPerYear);\\n        baseRatePerBlock = baseRatePerYear.div(blocksPerYear);\\n        jumpMultiplierPerBlock = jumpMultiplierPerYear.div(blocksPerYear);\\n\\n        for(uint i = 0; i < palPools.length; i++){\\n            multiplierForPool[palPools[i]] = IMultiplierCalculator(multiplierCalculators[i]);\\n        }\\n\\n        initiated = true;\\n    }\\n\\n\\n    /**\\n    * @notice Calculates the Utilization Rate of a PalPool\\n    * @dev Calculates the Utilization Rate of a PalPool depending of Cash, Borrows & Reserves\\n    * @param cash Cash amount of the calling PalPool\\n    * @param borrows Total Borrowed amount of the calling PalPool\\n    * @param reserves Total Reserves amount of the calling PalPool\\n    * @return uint : Utilisation Rate of the Pool (scale 1e18)\\n    */\\n    function utilizationRate(uint cash, uint borrows, uint reserves) public pure returns(uint){\\n        //If no funds are borrowed, the Pool is not used\\n        if(borrows == 0){\\n            return 0;\\n        }\\n        // Utilization Rate = Borrows / (Cash + Borrows - Reserves)\\n        return borrows.mul(1e18).div(cash.add(borrows).sub(reserves));\\n    }\\n\\n    /**\\n    * @notice Calculates the Supply Rate for the calling PalPool\\n    * @dev Calculates the Supply Rate depending on the Pool Borrow Rate & Reserve Factor\\n    * @param palPool Address of the PalPool calling the function\\n    * @param cash Cash amount of the calling PalPool\\n    * @param borrows Total Borrowed amount of the calling PalPool\\n    * @param reserves Total Reserves amount of the calling PalPool\\n    * @param reserveFactor Reserve Factor of the calling PalPool\\n    * @return uint : Supply Rate for the Pool (scale 1e18)\\n    */\\n    function getSupplyRate(address palPool, uint cash, uint borrows, uint reserves, uint reserveFactor) external view override returns(uint){\\n        //Fetch the Pool Utilisation Rate & Borrow Rate\\n        uint _utilRate = utilizationRate(cash, borrows, reserves);\\n        uint _bRate = _borrowRate(palPool, cash, borrows, reserves);\\n\\n        //Supply Rate = Utilization Rate * (Borrow Rate * (1 - Reserve Factor))\\n        uint _tempRate = _bRate.mul(uint(1e18).sub(reserveFactor)).div(1e18);\\n        return _utilRate.mul(_tempRate).div(1e18);\\n    }\\n    \\n    /**\\n    * @notice Get the Borrow Rate for a PalPool depending on the given parameters\\n    * @dev Calls the internal fucntion _borrowRate\\n    * @param palPool Address of the PalPool calling the function\\n    * @param cash Cash amount of the calling PalPool\\n    * @param borrows Total Borrowed amount of the calling PalPool\\n    * @param reserves Total Reserves amount of the calling PalPool\\n    * @return uint : Borrow Rate for the Pool (scale 1e18)\\n    */\\n    function getBorrowRate(address palPool, uint cash, uint borrows, uint reserves) external view override returns(uint){\\n        //Internal call\\n        return _borrowRate(palPool, cash, borrows, reserves);\\n    }\\n\\n    /**\\n    * @dev Calculates the Borrow Rate for the PalPool, depending on the utilisation rate & the kink value.\\n    * @param palPool Address of the PalPool calling the function\\n    * @param cash Cash amount of the calling PalPool\\n    * @param borrows Total Borrowed amount of the calling PalPool\\n    * @param reserves Total Reserves amount of the calling PalPool\\n    * @return uint : Borrow Rate for the Pool (scale 1e18)\\n    */\\n    function _borrowRate(address palPool, uint cash, uint borrows, uint reserves) internal view returns(uint){\\n        //Fetch the utilisation rate\\n        uint _utilRate = utilizationRate(cash, borrows, reserves);\\n\\n        if(useMultiplier[palPool]){\\n            // multiplier model calculation\\n            uint _govMultiplier = multiplierForPool[palPool].getCurrentMultiplier();\\n\\n            return (_utilRate.mul(multiplierPerBlock).div(1e18).add(baseRatePerBlock)).mul(_govMultiplier).div(1e18);\\n        \\n        \\n        } else if(_utilRate > 0.8e18){\\n            // jumpRate model calculation \\n            uint _tempRate = uint256(0.8e18).mul(multiplierPerBlock).div(1e18).add(baseRatePerBlock);\\n\\n            return (_utilRate.sub(0.8e18).mul(jumpMultiplierPerBlock).div(1e18)).add(_tempRate);\\n        }\\n\\n        //Base rate calculation\\n        return _utilRate.mul(multiplierPerBlock).div(1e18).add(baseRatePerBlock);\\n    }\\n\\n\\n    //Admin functions\\n\\n\\n    function activateMultiplier(address palPool) external adminOnly {\\n        require(!useMultiplier[palPool], \\\"Already activated\\\");\\n        useMultiplier[palPool] = true;\\n    }\\n\\n    function stopMultiplier(address palPool) external adminOnly {\\n        require(useMultiplier[palPool], \\\"Not activated\\\");\\n        useMultiplier[palPool] = false;\\n    }\\n\\n\\n    function updateBaseValues(uint newMultiplierPerYear, uint newBaseRatePerYear, uint jumpMultiplierPerYear) external adminOnly {\\n        multiplierPerBlock = newMultiplierPerYear.div(blocksPerYear);\\n        baseRatePerBlock = newBaseRatePerYear.div(blocksPerYear);\\n        jumpMultiplierPerBlock = jumpMultiplierPerYear.div(blocksPerYear);\\n    }\\n\\n\\n    function updateBlocksPerYear(uint newBlockPerYear) external adminOnly {\\n        blocksPerYear = newBlockPerYear;\\n    }\\n\\n    function updatePoolMultiplierCalculator(address palPool, address newMultiplierCalculator) external adminOnly {\\n        //either update already existing item, or add a new one\\n        multiplierForPool[palPool] = IMultiplierCalculator(newMultiplierCalculator);\\n    }\\n}\"\r\n    },\r\n    \"contracts/interests/InterestInterface.sol\": {\r\n      \"content\": \"//██████╗  █████╗ ██╗      █████╗ ██████╗ ██╗███╗   ██╗\\n//██╔══██╗██╔══██╗██║     ██╔══██╗██╔══██╗██║████╗  ██║\\n//██████╔╝███████║██║     ███████║██║  ██║██║██╔██╗ ██║\\n//██╔═══╝ ██╔══██║██║     ██╔══██║██║  ██║██║██║╚██╗██║\\n//██║     ██║  ██║███████╗██║  ██║██████╔╝██║██║ ╚████║\\n//╚═╝     ╚═╝  ╚═╝╚══════╝╚═╝  ╚═╝╚═════╝ ╚═╝╚═╝  ╚═══╝\\n                                                     \\n\\npragma solidity ^0.7.6;\\n//SPDX-License-Identifier: MIT\\n\\n/** @title Interest Module Interface  */\\n/// @author Paladin\\ninterface InterestInterface {\\n\\n    function getSupplyRate(address palPool, uint cash, uint borrows, uint reserves, uint reserveFactor) external view returns(uint);\\n    function getBorrowRate(address palPool, uint cash, uint borrows, uint reserves) external view returns(uint);\\n}\"\r\n    },\r\n    \"contracts/interests/multipliers/IMultiplierCalculator.sol\": {\r\n      \"content\": \"//██████╗  █████╗ ██╗      █████╗ ██████╗ ██╗███╗   ██╗\\n//██╔══██╗██╔══██╗██║     ██╔══██╗██╔══██╗██║████╗  ██║\\n//██████╔╝███████║██║     ███████║██║  ██║██║██╔██╗ ██║\\n//██╔═══╝ ██╔══██║██║     ██╔══██║██║  ██║██║██║╚██╗██║\\n//██║     ██║  ██║███████╗██║  ██║██████╔╝██║██║ ╚████║\\n//╚═╝     ╚═╝  ╚═╝╚══════╝╚═╝  ╚═╝╚═════╝ ╚═╝╚═╝  ╚═══╝\\n                                                     \\n\\npragma solidity ^0.7.6;\\n//SPDX-License-Identifier: MIT\\n\\n/** @title MultiplierCalculator Interface  */\\n/// @author Paladin\\ninterface IMultiplierCalculator {\\n\\n    function getCurrentMultiplier() external view returns(uint);\\n}\"\r\n    },\r\n    \"contracts/utils/SafeMath.sol\": {\r\n      \"content\": \"pragma solidity ^0.7.6;\\n//SPDX-License-Identifier: MIT\\n\\n// From https://github.com/OpenZeppelin/openzeppelin-contracts/blob/master/contracts/math/Math.sol\\n// Subject to the MIT license.\\n\\n/**\\n * @dev Wrappers over Solidity's arithmetic operations with added overflow\\n * checks.\\n *\\n * Arithmetic operations in Solidity wrap on overflow. This can easily result\\n * in bugs, because programmers usually assume that an overflow raises an\\n * error, which is the standard behavior in high level programming languages.\\n * `SafeMath` restores this intuition by reverting the transaction when an\\n * operation overflows.\\n *\\n * Using this library instead of the unchecked operations eliminates an entire\\n * class of bugs, so it's recommended to use it always.\\n */\\nlibrary SafeMath {\\n    /**\\n     * @dev Returns the addition of two unsigned integers, reverting on overflow.\\n     *\\n     * Counterpart to Solidity's `+` operator.\\n     *\\n     * Requirements:\\n     * - Addition cannot overflow.\\n     */\\n    function add(uint256 a, uint256 b) internal pure returns (uint256) {\\n        uint256 c = a + b;\\n        require(c >= a, \\\"SafeMath: addition overflow\\\");\\n\\n        return c;\\n    }\\n\\n    /**\\n     * @dev Returns the addition of two unsigned integers, reverting with custom message on overflow.\\n     *\\n     * Counterpart to Solidity's `+` operator.\\n     *\\n     * Requirements:\\n     * - Addition cannot overflow.\\n     */\\n    function add(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\\n        uint256 c = a + b;\\n        require(c >= a, errorMessage);\\n\\n        return c;\\n    }\\n\\n    /**\\n     * @dev Returns the subtraction of two unsigned integers, reverting on underflow (when the result is negative).\\n     *\\n     * Counterpart to Solidity's `-` operator.\\n     *\\n     * Requirements:\\n     * - Subtraction cannot underflow.\\n     */\\n    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return sub(a, b, \\\"SafeMath: subtraction underflow\\\");\\n    }\\n\\n    /**\\n     * @dev Returns the subtraction of two unsigned integers, reverting with custom message on underflow (when the result is negative).\\n     *\\n     * Counterpart to Solidity's `-` operator.\\n     *\\n     * Requirements:\\n     * - Subtraction cannot underflow.\\n     */\\n    function sub(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\\n        require(b <= a, errorMessage);\\n        uint256 c = a - b;\\n\\n        return c;\\n    }\\n\\n    /**\\n     * @dev Returns the multiplication of two unsigned integers, reverting on overflow.\\n     *\\n     * Counterpart to Solidity's `*` operator.\\n     *\\n     * Requirements:\\n     * - Multiplication cannot overflow.\\n     */\\n    function mul(uint256 a, uint256 b) internal pure returns (uint256) {\\n        // Gas optimization: this is cheaper than requiring 'a' not being zero, but the\\n        // benefit is lost if 'b' is also tested.\\n        // See: https://github.com/OpenZeppelin/openzeppelin-contracts/pull/522\\n        if (a == 0) {\\n            return 0;\\n        }\\n\\n        uint256 c = a * b;\\n        require(c / a == b, \\\"SafeMath: multiplication overflow\\\");\\n\\n        return c;\\n    }\\n\\n    /**\\n     * @dev Returns the multiplication of two unsigned integers, reverting on overflow.\\n     *\\n     * Counterpart to Solidity's `*` operator.\\n     *\\n     * Requirements:\\n     * - Multiplication cannot overflow.\\n     */\\n    function mul(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\\n        // Gas optimization: this is cheaper than requiring 'a' not being zero, but the\\n        // benefit is lost if 'b' is also tested.\\n        // See: https://github.com/OpenZeppelin/openzeppelin-contracts/pull/522\\n        if (a == 0) {\\n            return 0;\\n        }\\n\\n        uint256 c = a * b;\\n        require(c / a == b, errorMessage);\\n\\n        return c;\\n    }\\n\\n    /**\\n     * @dev Returns the integer division of two unsigned integers.\\n     * Reverts on division by zero. The result is rounded towards zero.\\n     *\\n     * Counterpart to Solidity's `/` operator. Note: this function uses a\\n     * `revert` opcode (which leaves remaining gas untouched) while Solidity\\n     * uses an invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Requirements:\\n     * - The divisor cannot be zero.\\n     */\\n    function div(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return div(a, b, \\\"SafeMath: division by zero\\\");\\n    }\\n\\n    /**\\n     * @dev Returns the integer division of two unsigned integers.\\n     * Reverts with custom message on division by zero. The result is rounded towards zero.\\n     *\\n     * Counterpart to Solidity's `/` operator. Note: this function uses a\\n     * `revert` opcode (which leaves remaining gas untouched) while Solidity\\n     * uses an invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Requirements:\\n     * - The divisor cannot be zero.\\n     */\\n    function div(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\\n        // Solidity only automatically asserts when dividing by 0\\n        require(b > 0, errorMessage);\\n        uint256 c = a / b;\\n        // assert(a == b * c + a % b); // There is no case in which this doesn't hold\\n\\n        return c;\\n    }\\n\\n    /**\\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\\n     * Reverts when dividing by zero.\\n     *\\n     * Counterpart to Solidity's `%` operator. This function uses a `revert`\\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\\n     * invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Requirements:\\n     * - The divisor cannot be zero.\\n     */\\n    function mod(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return mod(a, b, \\\"SafeMath: modulo by zero\\\");\\n    }\\n\\n    /**\\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\\n     * Reverts with custom message when dividing by zero.\\n     *\\n     * Counterpart to Solidity's `%` operator. This function uses a `revert`\\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\\n     * invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Requirements:\\n     * - The divisor cannot be zero.\\n     */\\n    function mod(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\\n        require(b != 0, errorMessage);\\n        return a % b;\\n    }\\n}\"\r\n    },\r\n    \"contracts/utils/Admin.sol\": {\r\n      \"content\": \"pragma solidity ^0.7.6;\\n//SPDX-License-Identifier: MIT\\n\\n\\n/** @title Admin contract  */\\n/// @author Paladin\\ncontract Admin {\\n\\n    /** @notice (Admin) Event when the contract admin is updated */\\n    event NewAdmin(address oldAdmin, address newAdmin);\\n\\n    /** @dev Admin address for this contract */\\n    address payable internal admin;\\n    \\n    modifier adminOnly() {\\n        //allows only the admin of this contract to call the function\\n        require(msg.sender == admin, '1');\\n        _;\\n    }\\n\\n        /**\\n    * @notice Set a new Admin\\n    * @dev Changes the address for the admin parameter\\n    * @param _newAdmin address of the new Controller Admin\\n    */\\n    function setNewAdmin(address payable _newAdmin) external adminOnly {\\n        address _oldAdmin = admin;\\n        admin = _newAdmin;\\n\\n        emit NewAdmin(_oldAdmin, _newAdmin);\\n    }\\n}\"\r\n    }\r\n  },\r\n  \"settings\": {\r\n    \"optimizer\": {\r\n      \"enabled\": true,\r\n      \"runs\": 25000\r\n    },\r\n    \"outputSelection\": {\r\n      \"*\": {\r\n        \"*\": [\r\n          \"evm.bytecode\",\r\n          \"evm.deployedBytecode\",\r\n          \"abi\"\r\n        ]\r\n      }\r\n    },\r\n    \"libraries\": {}\r\n  }\r\n}}","ABI":"[{\"inputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"oldAdmin\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"newAdmin\",\"type\":\"address\"}],\"name\":\"NewAdmin\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"palPool\",\"type\":\"address\"}],\"name\":\"activateMultiplier\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"baseRatePerBlock\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"blocksPerYear\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"palPool\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"cash\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"borrows\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"reserves\",\"type\":\"uint256\"}],\"name\":\"getBorrowRate\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"palPool\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"cash\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"borrows\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"reserves\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"reserveFactor\",\"type\":\"uint256\"}],\"name\":\"getSupplyRate\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"multiplierPerYear\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"baseRatePerYear\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"jumpMultiplierPerYear\",\"type\":\"uint256\"},{\"internalType\":\"address[]\",\"name\":\"palPools\",\"type\":\"address[]\"},{\"internalType\":\"address[]\",\"name\":\"multiplierCalculators\",\"type\":\"address[]\"}],\"name\":\"initiate\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"jumpMultiplierPerBlock\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"multiplierForPool\",\"outputs\":[{\"internalType\":\"contract IMultiplierCalculator\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"multiplierPerBlock\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address payable\",\"name\":\"_newAdmin\",\"type\":\"address\"}],\"name\":\"setNewAdmin\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"palPool\",\"type\":\"address\"}],\"name\":\"stopMultiplier\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"newMultiplierPerYear\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"newBaseRatePerYear\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"jumpMultiplierPerYear\",\"type\":\"uint256\"}],\"name\":\"updateBaseValues\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"newBlockPerYear\",\"type\":\"uint256\"}],\"name\":\"updateBlocksPerYear\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"palPool\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"newMultiplierCalculator\",\"type\":\"address\"}],\"name\":\"updatePoolMultiplierCalculator\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"useMultiplier\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"cash\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"borrows\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"reserves\",\"type\":\"uint256\"}],\"name\":\"utilizationRate\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"pure\",\"type\":\"function\"}]","ContractName":"InterestCalculatorV2","CompilerVersion":"v0.7.6+commit.7338295f","OptimizationUsed":"1","Runs":"25000","ConstructorArguments":"","EVMVersion":"Default","Library":"","LicenseType":"","Proxy":"0","Implementation":"","SwarmSource":""}]}