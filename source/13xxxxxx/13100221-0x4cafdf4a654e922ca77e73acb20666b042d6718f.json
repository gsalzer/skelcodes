{"status":"1","message":"OK","result":[{"SourceCode":"{{\r\n  \"language\": \"Solidity\",\r\n  \"sources\": {\r\n    \"contracts/MainchainGatewayProxy.sol\": {\r\n      \"content\": \"pragma solidity ^0.8.0;\\r\\n\\r\\n\\r\\n/**\\r\\n * @dev Provides information about the current execution context, including the\\r\\n * sender of the transaction and its data. While these are generally available\\r\\n * via msg.sender and msg.data, they should not be accessed in such a direct\\r\\n * manner, since when dealing with meta-transactions the account sending and\\r\\n * paying for execution may not be the actual sender (as far as an application\\r\\n * is concerned).\\r\\n *\\r\\n * This contract is only required for intermediate, library-like contracts.\\r\\n */\\r\\nabstract contract Context {\\r\\n    function _msgSender() internal view virtual returns (address) {\\r\\n        return msg.sender;\\r\\n    }\\r\\n\\r\\n    function _msgData() internal view virtual returns (bytes calldata) {\\r\\n        return msg.data;\\r\\n    }\\r\\n}\\r\\n\\r\\n/**\\r\\n * @dev Contract module which provides a basic access control mechanism, where\\r\\n * there is an account (an owner) that can be granted exclusive access to\\r\\n * specific functions.\\r\\n *\\r\\n * By default, the owner account will be the one that deploys the contract. This\\r\\n * can later be changed with {transferOwnership}.\\r\\n *\\r\\n * This module is used through inheritance. It will make available the modifier\\r\\n * `onlyOwner`, which can be applied to your functions to restrict their use to\\r\\n * the owner.\\r\\n */\\r\\nabstract contract Ownable is Context {\\r\\n    address private _owner;\\r\\n\\r\\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\\r\\n\\r\\n    /**\\r\\n     * @dev Initializes the contract setting the deployer as the initial owner.\\r\\n     */\\r\\n    constructor() {\\r\\n        _setOwner(_msgSender());\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Returns the address of the current owner.\\r\\n     */\\r\\n    function owner() public view virtual returns (address) {\\r\\n        return _owner;\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Throws if called by any account other than the owner.\\r\\n     */\\r\\n    modifier onlyOwner() {\\r\\n        require(owner() == _msgSender(), \\\"Ownable: caller is not the owner\\\");\\r\\n        _;\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Leaves the contract without owner. It will not be possible to call\\r\\n     * `onlyOwner` functions anymore. Can only be called by the current owner.\\r\\n     *\\r\\n     * NOTE: Renouncing ownership will leave the contract without an owner,\\r\\n     * thereby removing any functionality that is only available to the owner.\\r\\n     */\\r\\n    function renounceOwnership() public virtual onlyOwner {\\r\\n        _setOwner(address(0));\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\r\\n     * Can only be called by the current owner.\\r\\n     */\\r\\n    function transferOwnership(address newOwner) public virtual onlyOwner {\\r\\n        require(newOwner != address(0), \\\"Ownable: new owner is the zero address\\\");\\r\\n        _setOwner(newOwner);\\r\\n    }\\r\\n\\r\\n    function _setOwner(address newOwner) private {\\r\\n        address oldOwner = _owner;\\r\\n        _owner = newOwner;\\r\\n        emit OwnershipTransferred(oldOwner, newOwner);\\r\\n    }\\r\\n}\\r\\n\\r\\n/**\\r\\n * @title ProxyStorage\\r\\n * @dev Store the address of logic contact that the proxy should forward to.\\r\\n */\\r\\ncontract ProxyStorage is Ownable {\\r\\n  address internal _proxyTo;\\r\\n}\\r\\n\\r\\n/**\\r\\n * @title Proxy\\r\\n * @dev Gives the possibility to delegate any call to a foreign implementation.\\r\\n */\\r\\ncontract Proxy is ProxyStorage {\\r\\n\\r\\n  event ProxyUpdated(address indexed _new, address indexed _old);\\r\\n\\r\\n  constructor(address _proxyTo) public {\\r\\n    updateProxyTo(_proxyTo);\\r\\n  }\\r\\n\\r\\n  /**\\r\\n  * @dev Tells the address of the implementation where every call will be delegated.\\r\\n  * @return address of the implementation to which it will be delegated\\r\\n  */\\r\\n  function implementation() public view returns (address) {\\r\\n    return _proxyTo;\\r\\n  }\\r\\n\\r\\n  /**\\r\\n  * @dev See more at: https://eips.ethereum.org/EIPS/eip-897\\r\\n  * @return type of proxy - always upgradable\\r\\n  */\\r\\n  function proxyType() external pure returns (uint256) {\\r\\n      // Upgradeable proxy\\r\\n      return 2;\\r\\n  }\\r\\n\\r\\n  /**\\r\\n  * @dev Fallback function allowing to perform a delegatecall to the given implementation.\\r\\n  * This function will return whatever the implementation call returns\\r\\n  */\\r\\n  fallback () payable external {\\r\\n    address _impl = implementation();\\r\\n    require(_impl != address(0));\\r\\n\\r\\n    assembly {\\r\\n      let ptr := mload(0x40)\\r\\n      calldatacopy(ptr, 0, calldatasize())\\r\\n      let result := delegatecall(gas(), _impl, ptr, calldatasize(), 0, 0)\\r\\n      let size := returndatasize()\\r\\n      returndatacopy(ptr, 0, size)\\r\\n\\r\\n      switch result\\r\\n      case 0 { revert(ptr, size) }\\r\\n      default { return(ptr, size) }\\r\\n    }\\r\\n  }\\r\\n\\r\\n  function updateProxyTo(address _newProxyTo) public onlyOwner {\\r\\n    require(_newProxyTo != address(0x0));\\r\\n\\r\\n    _proxyTo = _newProxyTo;\\r\\n    emit ProxyUpdated(_newProxyTo, _proxyTo);\\r\\n  }\\r\\n}\\r\\n\\r\\n\\r\\nlibrary SafeMath {\\r\\n    function add(uint256 a, uint256 b) internal pure returns (uint256 c) {\\r\\n        c = a + b;\\r\\n        require(c >= a);\\r\\n    }\\r\\n\\r\\n    function sub(uint256 a, uint256 b) internal pure returns (uint256 c) {\\r\\n        require(b <= a);\\r\\n        return a - b;\\r\\n    }\\r\\n\\r\\n    function mul(uint256 a, uint256 b) internal pure returns (uint256 c) {\\r\\n        if (a == 0) {\\r\\n            return 0;\\r\\n        }\\r\\n\\r\\n        c = a * b;\\r\\n        require(c / a == b);\\r\\n    }\\r\\n\\r\\n    function div(uint256 a, uint256 b) internal pure returns (uint256 c) {\\r\\n        // Since Solidity automatically asserts when dividing by 0,\\r\\n        // but we only need it to revert.\\r\\n        require(b > 0);\\r\\n        return a / b;\\r\\n    }\\r\\n\\r\\n    function mod(uint256 a, uint256 b) internal pure returns (uint256 c) {\\r\\n        // Same reason as `div`.\\r\\n        require(b > 0);\\r\\n        return a % b;\\r\\n    }\\r\\n\\r\\n    function ceilingDiv(uint256 a, uint256 b)\\r\\n        internal\\r\\n        pure\\r\\n        returns (uint256 c)\\r\\n    {\\r\\n        return add(div(a, b), mod(a, b) > 0 ? 1 : 0);\\r\\n    }\\r\\n\\r\\n    function subU64(uint64 a, uint64 b) internal pure returns (uint64 c) {\\r\\n        require(b <= a);\\r\\n        return a - b;\\r\\n    }\\r\\n\\r\\n    function addU8(uint8 a, uint8 b) internal pure returns (uint8 c) {\\r\\n        c = a + b;\\r\\n        require(c >= a);\\r\\n    }\\r\\n}\\r\\n\\r\\ninterface IRegistry {\\r\\n    function getContract(string calldata _name) external view returns (address _address);\\r\\n\\r\\n    function isTokenMapped(address _token, uint32 _standard, bool _isMainchain) external view returns (bool);\\r\\n\\r\\n    function updateContract(string calldata _name, address _newAddress) external;\\r\\n\\r\\n    function mapToken( address _mainchainToken, address _sidechainToken, uint32 _standard) external;\\r\\n\\r\\n    function clearMapToken(address _mainchainToken, address _sidechainToken) external;\\r\\n\\r\\n    function getMappedToken(address _token, bool _isMainchain) external view returns ( address _mainchainToken, address _sidechainToken, uint32 _standard);\\r\\n}\\r\\n\\r\\n/**\\r\\n * @title GatewayStorage\\r\\n * @dev Storage of deposit and withdraw information.\\r\\n */\\r\\ncontract MainchainGatewayStorage is Ownable {\\r\\n    event TokenDeposited(\\r\\n        uint256 indexed _depositId,\\r\\n        address indexed _owner,\\r\\n        address indexed _tokenAddress,\\r\\n        address _sidechainAddress,\\r\\n        uint32 _standard,\\r\\n        uint256 _tokenNumber // ERC-20 amount or ERC721 tokenId\\r\\n    );\\r\\n\\r\\n    event TokenWithdrew(\\r\\n        uint256 indexed _withdrawId,\\r\\n        address indexed _owner,\\r\\n        address indexed _tokenAddress,\\r\\n        uint256 _tokenNumber // ERC-20 amount or ERC721 tokenId\\r\\n    );\\r\\n\\r\\n    struct DepositEntry {\\r\\n        address owner;\\r\\n        address tokenAddress;\\r\\n        address sidechainAddress;\\r\\n        uint32 standard;\\r\\n        uint256 tokenNumber;\\r\\n    }\\r\\n\\r\\n    struct WithdrawalEntry {\\r\\n        address owner;\\r\\n        address tokenAddress;\\r\\n        uint256 tokenNumber;\\r\\n    }\\r\\n\\r\\n    IRegistry public registry;\\r\\n\\r\\n    uint256 public depositCount;\\r\\n    DepositEntry[] public deposits;\\r\\n    mapping(uint256 => WithdrawalEntry) public withdrawals;\\r\\n\\r\\n    function updateRegistry(address _registry) external onlyOwner {\\r\\n        registry = IRegistry(_registry);\\r\\n    }\\r\\n}\\r\\n\\r\\ncontract MainchainGatewayProxy is Proxy, MainchainGatewayStorage {\\r\\n    constructor(address _proxyTo, address _registry) public Proxy(_proxyTo) {\\r\\n        registry = IRegistry(_registry);\\r\\n    }\\r\\n}\\r\\n\"\r\n    }\r\n  },\r\n  \"settings\": {\r\n    \"optimizer\": {\r\n      \"enabled\": true,\r\n      \"runs\": 200\r\n    },\r\n    \"outputSelection\": {\r\n      \"*\": {\r\n        \"*\": [\r\n          \"evm.bytecode\",\r\n          \"evm.deployedBytecode\",\r\n          \"abi\"\r\n        ]\r\n      }\r\n    },\r\n    \"libraries\": {}\r\n  }\r\n}}","ABI":"[{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_proxyTo\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_registry\",\"type\":\"address\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"_new\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"_old\",\"type\":\"address\"}],\"name\":\"ProxyUpdated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"_depositId\",\"type\":\"uint256\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"_owner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"_tokenAddress\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"_sidechainAddress\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint32\",\"name\":\"_standard\",\"type\":\"uint32\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"_tokenNumber\",\"type\":\"uint256\"}],\"name\":\"TokenDeposited\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"_withdrawId\",\"type\":\"uint256\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"_owner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"_tokenAddress\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"_tokenNumber\",\"type\":\"uint256\"}],\"name\":\"TokenWithdrew\",\"type\":\"event\"},{\"stateMutability\":\"payable\",\"type\":\"fallback\"},{\"inputs\":[],\"name\":\"depositCount\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"deposits\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"tokenAddress\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"sidechainAddress\",\"type\":\"address\"},{\"internalType\":\"uint32\",\"name\":\"standard\",\"type\":\"uint32\"},{\"internalType\":\"uint256\",\"name\":\"tokenNumber\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"implementation\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"proxyType\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"registry\",\"outputs\":[{\"internalType\":\"contract IRegistry\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_newProxyTo\",\"type\":\"address\"}],\"name\":\"updateProxyTo\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_registry\",\"type\":\"address\"}],\"name\":\"updateRegistry\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"withdrawals\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"tokenAddress\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"tokenNumber\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"}]","ContractName":"MainchainGatewayProxy","CompilerVersion":"v0.8.0+commit.c7dfd78e","OptimizationUsed":"1","Runs":"200","ConstructorArguments":"000000000000000000000000209e811387d34bcf10334dcf450aeaa8f2527f1e0000000000000000000000007fc339380ba8dd383a9200f8194e8f53a3117e13","EVMVersion":"Default","Library":"","LicenseType":"","Proxy":"1","Implementation":"0x209e811387d34bcf10334dcf450aeaa8f2527f1e","SwarmSource":""}]}