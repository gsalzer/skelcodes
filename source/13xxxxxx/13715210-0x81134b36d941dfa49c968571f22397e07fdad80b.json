{"status":"1","message":"OK","result":[{"SourceCode":"{{\r\n  \"language\": \"Solidity\",\r\n  \"sources\": {\r\n    \"contracts/ext/subDAOsManager/impl/SubDAOsManager.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\npragma solidity >=0.7.0;\\n\\nimport \\\"../model/ISubDAOsManager.sol\\\";\\nimport \\\"../../subDAO/model/ISubDAO.sol\\\";\\nimport \\\"@ethereansos/swissknife/contracts/generic/impl/LazyInitCapableElement.sol\\\";\\nimport { ReflectionUtilities, BehaviorUtilities } from \\\"@ethereansos/swissknife/contracts/lib/GeneralUtilities.sol\\\";\\n\\ncontract SubDAOsManager is ISubDAOsManager, LazyInitCapableElement {\\n    using ReflectionUtilities for address;\\n\\n    mapping(bytes32 => address[]) private _history;\\n    mapping(address => bytes32) public override keyOf;\\n\\n    mapping(bytes32 => address) public override get;\\n    mapping(bytes32 => bool) public override keyExists;\\n\\n    constructor(bytes memory lazyInitData) LazyInitCapableElement(lazyInitData) {\\n    }\\n\\n    function _lazyInit(bytes memory lazyInitData) override internal virtual returns(bytes memory) {\\n        if(lazyInitData.length > 0) {\\n            SubDAOEntry[] memory subDaos = abi.decode(lazyInitData, (SubDAOEntry[]));\\n            for(uint256 i = 0; i < subDaos.length; i++) {\\n                _set(subDaos[i]);\\n            }\\n        }\\n        return \\\"\\\";\\n    }\\n\\n    function _supportsInterface(bytes4 interfaceId) override internal pure returns(bool) {\\n        return\\n            interfaceId == type(ISubDAOsManager).interfaceId ||\\n            interfaceId == this.keyOf.selector ||\\n            interfaceId == this.history.selector ||\\n            interfaceId == this.batchHistory.selector ||\\n            interfaceId == this.get.selector ||\\n            interfaceId == this.list.selector ||\\n            interfaceId == this.exists.selector ||\\n            interfaceId == this.keyExists.selector ||\\n            interfaceId == this.set.selector ||\\n            interfaceId == this.batchSet.selector;\\n    }\\n\\n    function history(bytes32 key) override external view returns(address[] memory subdaosAddresses) {\\n        return _history[key];\\n    }\\n\\n    function batchHistory(bytes32[] calldata keys) override external view returns(address[][] memory subdaosAddresses) {\\n        subdaosAddresses = new address[][](keys.length);\\n        for(uint256 i = 0; i < subdaosAddresses.length; i++) {\\n            subdaosAddresses[i] = _history[keys[i]];\\n        }\\n    }\\n\\n    function list(bytes32[] calldata keys) override external view returns(address[] memory subdaosAddresses) {\\n        subdaosAddresses = new address[](keys.length);\\n        for(uint256 i = 0; i < subdaosAddresses.length; i++) {\\n            subdaosAddresses[i] = get[keys[i]];\\n        }\\n    }\\n\\n    function exists(address componentAddress) override public view returns(bool) {\\n        return get[keyOf[componentAddress]] == componentAddress && keyExists[keyOf[componentAddress]];\\n    }\\n\\n    function set(bytes32 key, address location, address newHost) override authorizedOnly external returns(address replacedSubdaoAddress) {\\n        replacedSubdaoAddress = _set(SubDAOEntry(key, location, newHost));\\n    }\\n\\n    function batchSet(SubDAOEntry[] calldata subdaos) override authorizedOnly external returns (address[] memory replacedSubdaoAddresses) {\\n        replacedSubdaoAddresses =  _set(subdaos);\\n    }\\n\\n    function submit(bytes32 key, bytes calldata payload, address restReceiver) override authorizedOnly external payable returns(bytes memory response) {\\n        uint256 oldBalance = address(this).balance - msg.value;\\n        response = get[key].submit(msg.value, payload);\\n        uint256 actualBalance = address(this).balance;\\n        if(actualBalance > oldBalance) {\\n            (restReceiver != address(0) ? restReceiver : msg.sender).submit(address(this).balance - oldBalance, \\\"\\\");\\n        }\\n    }\\n\\n    function _set(SubDAOEntry[] memory subdaos) private returns(address[] memory replacedSubdaoAddresses) {\\n        replacedSubdaoAddresses = new address[](subdaos.length);\\n        for(uint256 i = 0; i < subdaos.length; i++) {\\n            replacedSubdaoAddresses[i] = _set(subdaos[i]);\\n        }\\n    }\\n\\n    function _set(SubDAOEntry memory subdao) private returns(address replacedSubdaoAddress) {\\n        require(subdao.key != bytes32(0), \\\"key\\\");\\n        if(subdao.location == address(0)) {\\n            delete keyExists[subdao.key];\\n        }\\n        replacedSubdaoAddress = get[subdao.key];\\n        get[subdao.key] = subdao.location;\\n        if(subdao.location != address(0)) {\\n            ISubDAO subDAO = ISubDAO(subdao.location);\\n            if(subDAO.host() != address(this)) {\\n                subDAO.finalizeInit(address(this));\\n            }\\n            keyExists[keyOf[subdao.location] = subdao.key] = true;\\n            _history[subdao.key].push(subdao.location);\\n        }\\n        if(replacedSubdaoAddress != address(0)) {\\n            ILazyInitCapableElement(replacedSubdaoAddress).setHost(subdao.newHost);\\n        }\\n        emit SubDAOSet(subdao.key, replacedSubdaoAddress, subdao.location);\\n    }\\n}\"\r\n    },\r\n    \"@ethereansos/swissknife/contracts/lib/GeneralUtilities.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\npragma solidity >=0.7.0;\\n\\nimport \\\"@openzeppelin/contracts/token/ERC20/IERC20.sol\\\";\\n\\nlibrary BehaviorUtilities {\\n\\n    function randomKey(uint256 i) internal view returns (bytes32) {\\n        return keccak256(abi.encode(i, block.timestamp, block.number, tx.origin, tx.gasprice, block.coinbase, block.difficulty, msg.sender, blockhash(block.number - 5)));\\n    }\\n\\n    function calculateProjectedArraySizeAndLoopUpperBound(uint256 arraySize, uint256 start, uint256 offset) internal pure returns(uint256 projectedArraySize, uint256 projectedArrayLoopUpperBound) {\\n        if(arraySize != 0 && start < arraySize && offset != 0) {\\n            uint256 length = start + offset;\\n            if(start < (length = length > arraySize ? arraySize : length)) {\\n                projectedArraySize = (projectedArrayLoopUpperBound = length) - start;\\n            }\\n        }\\n    }\\n}\\n\\nlibrary ReflectionUtilities {\\n\\n    function read(address subject, bytes memory inputData) internal view returns(bytes memory returnData) {\\n        bool result;\\n        (result, returnData) = subject.staticcall(inputData);\\n        if(!result) {\\n            assembly {\\n                revert(add(returnData, 0x20), mload(returnData))\\n            }\\n        }\\n    }\\n\\n    function submit(address subject, uint256 value, bytes memory inputData) internal returns(bytes memory returnData) {\\n        bool result;\\n        (result, returnData) = subject.call{value : value}(inputData);\\n        if(!result) {\\n            assembly {\\n                revert(add(returnData, 0x20), mload(returnData))\\n            }\\n        }\\n    }\\n\\n    function isContract(address subject) internal view returns (bool) {\\n        if(subject == address(0)) {\\n            return false;\\n        }\\n        uint256 codeLength;\\n        assembly {\\n            codeLength := extcodesize(subject)\\n        }\\n        return codeLength > 0;\\n    }\\n\\n    function clone(address originalContract) internal returns(address copyContract) {\\n        assembly {\\n            mstore(\\n                0,\\n                or(\\n                    0x5880730000000000000000000000000000000000000000803b80938091923cF3,\\n                    mul(originalContract, 0x1000000000000000000)\\n                )\\n            )\\n            copyContract := create(0, 0, 32)\\n            switch extcodesize(copyContract)\\n                case 0 {\\n                    invalid()\\n                }\\n        }\\n    }\\n}\\n\\nlibrary BytesUtilities {\\n\\n    bytes private constant ALPHABET = \\\"0123456789abcdef\\\";\\n    string internal constant BASE64_ENCODER_DATA = 'ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/';\\n\\n    function asAddress(bytes memory b) internal pure returns(address) {\\n        if(b.length == 0) {\\n            return address(0);\\n        }\\n        if(b.length == 20) {\\n            address addr;\\n            assembly {\\n                addr := mload(add(b, 20))\\n            }\\n            return addr;\\n        }\\n        return abi.decode(b, (address));\\n    }\\n\\n    function asAddressArray(bytes memory b) internal pure returns(address[] memory callResult) {\\n        if(b.length > 0) {\\n            return abi.decode(b, (address[]));\\n        }\\n    }\\n\\n    function asBool(bytes memory bs) internal pure returns(bool) {\\n        return asUint256(bs) != 0;\\n    }\\n\\n    function asBoolArray(bytes memory b) internal pure returns(bool[] memory callResult) {\\n        if(b.length > 0) {\\n            return abi.decode(b, (bool[]));\\n        }\\n    }\\n\\n    function asBytesArray(bytes memory b) internal pure returns(bytes[] memory callResult) {\\n        if(b.length > 0) {\\n            return abi.decode(b, (bytes[]));\\n        }\\n    }\\n\\n    function asString(bytes memory b) internal pure returns(string memory callResult) {\\n        if(b.length > 0) {\\n            return abi.decode(b, (string));\\n        }\\n    }\\n\\n    function asStringArray(bytes memory b) internal pure returns(string[] memory callResult) {\\n        if(b.length > 0) {\\n            return abi.decode(b, (string[]));\\n        }\\n    }\\n\\n    function asUint256(bytes memory bs) internal pure returns(uint256 x) {\\n        if (bs.length >= 32) {\\n            assembly {\\n                x := mload(add(bs, add(0x20, 0)))\\n            }\\n        }\\n    }\\n\\n    function asUint256Array(bytes memory b) internal pure returns(uint256[] memory callResult) {\\n        if(b.length > 0) {\\n            return abi.decode(b, (uint256[]));\\n        }\\n    }\\n\\n    function toString(bytes memory data) internal pure returns(string memory) {\\n        bytes memory str = new bytes(2 + data.length * 2);\\n        str[0] = \\\"0\\\";\\n        str[1] = \\\"x\\\";\\n        for (uint256 i = 0; i < data.length; i++) {\\n            str[2+i*2] = ALPHABET[uint256(uint8(data[i] >> 4))];\\n            str[3+i*2] = ALPHABET[uint256(uint8(data[i] & 0x0f))];\\n        }\\n        return string(str);\\n    }\\n\\n    function asSingletonArray(bytes memory a) internal pure returns(bytes[] memory array) {\\n        array = new bytes[](1);\\n        array[0] = a;\\n    }\\n\\n    function toBase64(bytes memory data) internal pure returns (string memory) {\\n        if (data.length == 0) return '';\\n\\n        string memory table = BASE64_ENCODER_DATA;\\n\\n        uint256 encodedLen = 4 * ((data.length + 2) / 3);\\n\\n        string memory result = new string(encodedLen + 32);\\n\\n        assembly {\\n            mstore(result, encodedLen)\\n\\n            let tablePtr := add(table, 1)\\n\\n            let dataPtr := data\\n            let endPtr := add(dataPtr, mload(data))\\n\\n            let resultPtr := add(result, 32)\\n\\n            for {} lt(dataPtr, endPtr) {}\\n            {\\n                dataPtr := add(dataPtr, 3)\\n                let input := mload(dataPtr)\\n\\n                mstore8(resultPtr, mload(add(tablePtr, and(shr(18, input), 0x3F))))\\n                resultPtr := add(resultPtr, 1)\\n                mstore8(resultPtr, mload(add(tablePtr, and(shr(12, input), 0x3F))))\\n                resultPtr := add(resultPtr, 1)\\n                mstore8(resultPtr, mload(add(tablePtr, and(shr( 6, input), 0x3F))))\\n                resultPtr := add(resultPtr, 1)\\n                mstore8(resultPtr, mload(add(tablePtr, and(        input,  0x3F))))\\n                resultPtr := add(resultPtr, 1)\\n            }\\n\\n            switch mod(mload(data), 3)\\n            case 1 { mstore(sub(resultPtr, 2), shl(240, 0x3d3d)) }\\n            case 2 { mstore(sub(resultPtr, 1), shl(248, 0x3d)) }\\n        }\\n\\n        return result;\\n    }\\n}\\n\\nlibrary StringUtilities {\\n\\n    bytes1 private constant CHAR_0 = bytes1('0');\\n    bytes1 private constant CHAR_A = bytes1('A');\\n    bytes1 private constant CHAR_a = bytes1('a');\\n    bytes1 private constant CHAR_f = bytes1('f');\\n\\n    bytes  internal constant BASE64_DECODER_DATA = hex\\\"0000000000000000000000000000000000000000000000000000000000000000\\\"\\n                                                   hex\\\"00000000000000000000003e0000003f3435363738393a3b3c3d000000000000\\\"\\n                                                   hex\\\"00000102030405060708090a0b0c0d0e0f101112131415161718190000000000\\\"\\n                                                   hex\\\"001a1b1c1d1e1f202122232425262728292a2b2c2d2e2f303132330000000000\\\";\\n\\n    function isEmpty(string memory test) internal pure returns (bool) {\\n        return equals(test, \\\"\\\");\\n    }\\n\\n    function equals(string memory a, string memory b) internal pure returns(bool) {\\n        return keccak256(abi.encodePacked(a)) == keccak256(abi.encodePacked(b));\\n    }\\n\\n    function toLowerCase(string memory str) internal pure returns(string memory) {\\n        bytes memory bStr = bytes(str);\\n        for (uint256 i = 0; i < bStr.length; i++) {\\n            bStr[i] = bStr[i] >= 0x41 && bStr[i] <= 0x5A ? bytes1(uint8(bStr[i]) + 0x20) : bStr[i];\\n        }\\n        return string(bStr);\\n    }\\n\\n    function asBytes(string memory str) internal pure returns(bytes memory toDecode) {\\n        bytes memory data = abi.encodePacked(str);\\n        if(data.length == 0 || data[0] != \\\"0\\\" || (data[1] != \\\"x\\\" && data[1] != \\\"X\\\")) {\\n            return \\\"\\\";\\n        }\\n        uint256 start = 2;\\n        toDecode = new bytes((data.length - 2) / 2);\\n\\n        for(uint256 i = 0; i < toDecode.length; i++) {\\n            toDecode[i] = bytes1(_fromHexChar(uint8(data[start++])) + _fromHexChar(uint8(data[start++])) * 16);\\n        }\\n    }\\n\\n    function toBase64(string memory input) internal pure returns(string memory) {\\n        return BytesUtilities.toBase64(abi.encodePacked(input));\\n    }\\n\\n    function fromBase64(string memory _data) internal pure returns (bytes memory) {\\n        bytes memory data = bytes(_data);\\n\\n        if (data.length == 0) return new bytes(0);\\n        require(data.length % 4 == 0, \\\"invalid base64 decoder input\\\");\\n\\n        bytes memory table = BASE64_DECODER_DATA;\\n\\n        uint256 decodedLen = (data.length / 4) * 3;\\n\\n        bytes memory result = new bytes(decodedLen + 32);\\n\\n        assembly {\\n            let lastBytes := mload(add(data, mload(data)))\\n            if eq(and(lastBytes, 0xFF), 0x3d) {\\n                decodedLen := sub(decodedLen, 1)\\n                if eq(and(lastBytes, 0xFFFF), 0x3d3d) {\\n                    decodedLen := sub(decodedLen, 1)\\n                }\\n            }\\n\\n            mstore(result, decodedLen)\\n\\n            let tablePtr := add(table, 1)\\n\\n            let dataPtr := data\\n            let endPtr := add(dataPtr, mload(data))\\n\\n            let resultPtr := add(result, 32)\\n\\n            for {} lt(dataPtr, endPtr) {}\\n            {\\n               dataPtr := add(dataPtr, 4)\\n               let input := mload(dataPtr)\\n\\n               let output := add(\\n                   add(\\n                       shl(18, and(mload(add(tablePtr, and(shr(24, input), 0xFF))), 0xFF)),\\n                       shl(12, and(mload(add(tablePtr, and(shr(16, input), 0xFF))), 0xFF))),\\n                   add(\\n                       shl( 6, and(mload(add(tablePtr, and(shr( 8, input), 0xFF))), 0xFF)),\\n                               and(mload(add(tablePtr, and(        input , 0xFF))), 0xFF)\\n                    )\\n                )\\n                mstore(resultPtr, shl(232, output))\\n                resultPtr := add(resultPtr, 3)\\n            }\\n        }\\n\\n        return result;\\n    }\\n\\n    function _fromHexChar(uint8 c) private pure returns (uint8) {\\n        bytes1 charc = bytes1(c);\\n        return charc < CHAR_0 || charc > CHAR_f ? 0 : (charc < CHAR_A ? 0 : 10) + c - uint8(charc < CHAR_A ? CHAR_0 : charc < CHAR_a ? CHAR_A : CHAR_a);\\n    }\\n}\\n\\nlibrary Uint256Utilities {\\n    function asSingletonArray(uint256 n) internal pure returns(uint256[] memory array) {\\n        array = new uint256[](1);\\n        array[0] = n;\\n    }\\n\\n    function toHex(uint256 _i) internal pure returns (string memory) {\\n        return BytesUtilities.toString(abi.encodePacked(_i));\\n    }\\n\\n    function toString(uint256 _i) internal pure returns (string memory _uintAsString) {\\n        if (_i == 0) {\\n            return \\\"0\\\";\\n        }\\n        uint256 j = _i;\\n        uint256 len;\\n        while (j != 0) {\\n            len++;\\n            j /= 10;\\n        }\\n        bytes memory bstr = new bytes(len);\\n        uint256 k = len;\\n        while (_i != 0) {\\n            k = k-1;\\n            uint8 temp = (48 + uint8(_i - _i / 10 * 10));\\n            bytes1 b1 = bytes1(temp);\\n            bstr[k] = b1;\\n            _i /= 10;\\n        }\\n        return string(bstr);\\n    }\\n\\n    function sum(uint256[] memory arr) internal pure returns (uint256 result) {\\n        for(uint256 i = 0; i < arr.length; i++) {\\n            result += arr[i];\\n        }\\n    }\\n}\\n\\nlibrary AddressUtilities {\\n    function asSingletonArray(address a) internal pure returns(address[] memory array) {\\n        array = new address[](1);\\n        array[0] = a;\\n    }\\n\\n    function toString(address _addr) internal pure returns (string memory) {\\n        return _addr == address(0) ? \\\"0x0000000000000000000000000000000000000000\\\" : BytesUtilities.toString(abi.encodePacked(_addr));\\n    }\\n}\\n\\nlibrary Bytes32Utilities {\\n\\n    function asSingletonArray(bytes32 a) internal pure returns(bytes32[] memory array) {\\n        array = new bytes32[](1);\\n        array[0] = a;\\n    }\\n\\n    function toString(bytes32 bt) internal pure returns (string memory) {\\n        return bt == bytes32(0) ?  \\\"0x0000000000000000000000000000000000000000000000000000000000000000\\\" : BytesUtilities.toString(abi.encodePacked(bt));\\n    }\\n}\\n\\nlibrary TransferUtilities {\\n    using ReflectionUtilities for address;\\n\\n    function balanceOf(address erc20TokenAddress, address account) internal view returns(uint256) {\\n        if(erc20TokenAddress == address(0)) {\\n            return account.balance;\\n        }\\n        return abi.decode(erc20TokenAddress.read(abi.encodeWithSelector(IERC20(erc20TokenAddress).balanceOf.selector, account)), (uint256));\\n    }\\n\\n    function allowance(address erc20TokenAddress, address account, address spender) internal view returns(uint256) {\\n        if(erc20TokenAddress == address(0)) {\\n            return 0;\\n        }\\n        return abi.decode(erc20TokenAddress.read(abi.encodeWithSelector(IERC20(erc20TokenAddress).allowance.selector, account, spender)), (uint256));\\n    }\\n\\n    function safeApprove(address erc20TokenAddress, address spender, uint256 value) internal {\\n        bytes memory returnData = erc20TokenAddress.submit(0, abi.encodeWithSelector(IERC20(erc20TokenAddress).approve.selector, spender, value));\\n        require(returnData.length == 0 || abi.decode(returnData, (bool)), 'APPROVE_FAILED');\\n    }\\n\\n    function safeTransfer(address erc20TokenAddress, address to, uint256 value) internal {\\n        if(value == 0) {\\n            return;\\n        }\\n        if(erc20TokenAddress == address(0)) {\\n            to.submit(value, \\\"\\\");\\n            return;\\n        }\\n        bytes memory returnData = erc20TokenAddress.submit(0, abi.encodeWithSelector(IERC20(erc20TokenAddress).transfer.selector, to, value));\\n        require(returnData.length == 0 || abi.decode(returnData, (bool)), 'TRANSFER_FAILED');\\n    }\\n\\n    function safeTransferFrom(address erc20TokenAddress, address from, address to, uint256 value) internal {\\n        if(value == 0) {\\n            return;\\n        }\\n        if(erc20TokenAddress == address(0)) {\\n            to.submit(value, \\\"\\\");\\n            return;\\n        }\\n        bytes memory returnData = erc20TokenAddress.submit(0, abi.encodeWithSelector(IERC20(erc20TokenAddress).transferFrom.selector, from, to, value));\\n        require(returnData.length == 0 || abi.decode(returnData, (bool)), 'TRANSFERFROM_FAILED');\\n    }\\n}\"\r\n    },\r\n    \"@ethereansos/swissknife/contracts/generic/impl/LazyInitCapableElement.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\npragma solidity >=0.7.0;\\n\\nimport \\\"../model/ILazyInitCapableElement.sol\\\";\\nimport { ReflectionUtilities } from \\\"../../lib/GeneralUtilities.sol\\\";\\n\\nabstract contract LazyInitCapableElement is ILazyInitCapableElement {\\n    using ReflectionUtilities for address;\\n\\n    address public override initializer;\\n    address public override host;\\n\\n    constructor(bytes memory lazyInitData) {\\n        if(lazyInitData.length > 0) {\\n            _privateLazyInit(lazyInitData);\\n        }\\n    }\\n\\n    function lazyInit(bytes calldata lazyInitData) override external returns (bytes memory lazyInitResponse) {\\n        return _privateLazyInit(lazyInitData);\\n    }\\n\\n    function supportsInterface(bytes4 interfaceId) override external view returns(bool) {\\n        return\\n            interfaceId == type(IERC165).interfaceId ||\\n            interfaceId == this.supportsInterface.selector ||\\n            interfaceId == type(ILazyInitCapableElement).interfaceId ||\\n            interfaceId == this.lazyInit.selector ||\\n            interfaceId == this.initializer.selector ||\\n            interfaceId == this.subjectIsAuthorizedFor.selector ||\\n            interfaceId == this.host.selector ||\\n            interfaceId == this.setHost.selector ||\\n            _supportsInterface(interfaceId);\\n    }\\n\\n    function setHost(address newValue) external override authorizedOnly returns(address oldValue) {\\n        oldValue = host;\\n        host = newValue;\\n        emit Host(oldValue, newValue);\\n    }\\n\\n    function subjectIsAuthorizedFor(address subject, address location, bytes4 selector, bytes calldata payload, uint256 value) public override virtual view returns(bool) {\\n        (bool chidlElementValidationIsConsistent, bool chidlElementValidationResult) = _subjectIsAuthorizedFor(subject, location, selector, payload, value);\\n        if(chidlElementValidationIsConsistent) {\\n            return chidlElementValidationResult;\\n        }\\n        if(subject == host) {\\n            return true;\\n        }\\n        if(!host.isContract()) {\\n            return false;\\n        }\\n        (bool result, bytes memory resultData) = host.staticcall(abi.encodeWithSelector(ILazyInitCapableElement(host).subjectIsAuthorizedFor.selector, subject, location, selector, payload, value));\\n        return result && abi.decode(resultData, (bool));\\n    }\\n\\n    function _privateLazyInit(bytes memory lazyInitData) private returns (bytes memory lazyInitResponse) {\\n        require(initializer == address(0), \\\"init\\\");\\n        initializer = msg.sender;\\n        (host, lazyInitResponse) = abi.decode(lazyInitData, (address, bytes));\\n        emit Host(address(0), host);\\n        lazyInitResponse = _lazyInit(lazyInitResponse);\\n    }\\n\\n    function _lazyInit(bytes memory) internal virtual returns (bytes memory) {\\n        return \\\"\\\";\\n    }\\n\\n    function _supportsInterface(bytes4 selector) internal virtual view returns (bool);\\n\\n    function _subjectIsAuthorizedFor(address, address, bytes4, bytes calldata, uint256) internal virtual view returns(bool, bool) {\\n    }\\n\\n    modifier authorizedOnly {\\n        require(_authorizedOnly(), \\\"unauthorized\\\");\\n        _;\\n    }\\n\\n    function _authorizedOnly() internal returns(bool) {\\n        return subjectIsAuthorizedFor(msg.sender, address(this), msg.sig, msg.data, msg.value);\\n    }\\n}\"\r\n    },\r\n    \"contracts/ext/subDAO/model/ISubDAO.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\npragma solidity >=0.7.0;\\n\\nimport \\\"../../../core/model/IOrganization.sol\\\";\\nimport \\\"../../../base/model/IProposalsManager.sol\\\";\\n\\ninterface ISubDAO is IOrganization, IExternalProposalsManagerCommands {\\n\\n    event Proposed(uint256 indexed modelIndex, uint256 indexed presetIndex, bytes32 indexed proposalId);\\n\\n    struct SubDAOProposalModel {\\n        address source;\\n        string uri;\\n        bool isPreset;\\n        bytes[] presetValues;\\n        bytes32[] presetProposals;\\n        address creationRules;\\n        address triggeringRules;\\n        uint256 votingRulesIndex;\\n        address[][] canTerminateAddresses;\\n        address[][] validatorsAddresses;\\n    }\\n\\n    function presetArrayMaxSize() external view returns(uint256);\\n\\n    function proposalModels() external view returns(SubDAOProposalModel[] memory);\\n    function setProposalModels(SubDAOProposalModel[] calldata newValue) external returns(SubDAOProposalModel[] memory oldValue);\\n\\n    function setInitialProposalModels(SubDAOProposalModel[] calldata newValue) external;\\n\\n    function setVotingRules(uint256 modelIndex, uint256 votingRulesIndex) external returns(address[] memory oldCanTerminateAddresses, address[] memory oldValidatorsAddresses);\\n    function setCreationAndTriggeringRules(uint256 modelIndex, address newCreationRules, address newTriggeringRules) external returns(address oldCreationRules, address oldTriggeringRules);\\n    function setPresetValues(uint256 modelIndex, bytes[] calldata newPresetValues) external returns(bytes[] memory oldPresetValues, bytes32[] memory deprecatedProposalIds);\\n\\n    function finalizeInit(address firstHost) external;\\n\\n    function isPersistent(bytes32 proposalId) external view returns(bool result, bool isDeprecated);\\n}\"\r\n    },\r\n    \"contracts/ext/subDAOsManager/model/ISubDAOsManager.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\npragma solidity >=0.7.0;\\n\\nimport \\\"@ethereansos/swissknife/contracts/generic/model/ILazyInitCapableElement.sol\\\";\\n\\ninterface ISubDAOsManager is ILazyInitCapableElement {\\n\\n    struct SubDAOEntry {\\n        bytes32 key;\\n        address location;\\n        address newHost;\\n    }\\n\\n    function keyOf(address subdaoAddress) external view returns(bytes32);\\n    function history(bytes32 key) external view returns(address[] memory subdaosAddresses);\\n    function batchHistory(bytes32[] calldata keys) external view returns(address[][] memory subdaosAddresses);\\n\\n    function get(bytes32 key) external view returns(address subdaoAddress);\\n    function list(bytes32[] calldata keys) external view returns(address[] memory subdaosAddresses);\\n    function exists(address subject) external view returns(bool);\\n    function keyExists(bytes32 key) external view returns(bool);\\n\\n    function set(bytes32 key, address location, address newHost) external returns(address replacedSubdaoAddress);\\n    function batchSet(SubDAOEntry[] calldata) external returns (address[] memory replacedSubdaoAddresses);\\n\\n    function submit(bytes32 key, bytes calldata payload, address restReceiver) external payable returns(bytes memory response);\\n\\n    event SubDAOSet(bytes32 indexed key, address indexed from, address indexed to);\\n}\"\r\n    },\r\n    \"@ethereansos/swissknife/contracts/generic/model/ILazyInitCapableElement.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\npragma solidity >=0.7.0;\\n\\nimport \\\"@openzeppelin/contracts/utils/introspection/IERC165.sol\\\";\\n\\ninterface ILazyInitCapableElement is IERC165 {\\n\\n    function lazyInit(bytes calldata lazyInitData) external returns(bytes memory initResponse);\\n    function initializer() external view returns(address);\\n\\n    event Host(address indexed from, address indexed to);\\n\\n    function host() external view returns(address);\\n    function setHost(address newValue) external returns(address oldValue);\\n\\n    function subjectIsAuthorizedFor(address subject, address location, bytes4 selector, bytes calldata payload, uint256 value) external view returns(bool);\\n}\"\r\n    },\r\n    \"contracts/base/model/IProposalsManager.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\npragma solidity >=0.7.0;\\n\\nimport \\\"@ethereansos/swissknife/contracts/generic/model/ILazyInitCapableElement.sol\\\";\\nimport \\\"@openzeppelin/contracts/token/ERC1155/IERC1155Receiver.sol\\\";\\n\\ninterface IProposalsManager is IERC1155Receiver, ILazyInitCapableElement {\\n\\n    struct ProposalCode {\\n        address location;\\n        bytes bytecode;\\n    }\\n\\n    struct ProposalCodes {\\n        ProposalCode[] codes;\\n        bool alsoTerminate;\\n    }\\n\\n    struct Proposal {\\n        address proposer;\\n        address[] codeSequence;\\n        uint256 creationBlock;\\n        uint256 accept;\\n        uint256 refuse;\\n        address triggeringRules;\\n        address[] canTerminateAddresses;\\n        address[] validatorsAddresses;\\n        bool validationPassed;\\n        uint256 terminationBlock;\\n        bytes votingTokens;\\n    }\\n\\n    struct ProposalConfiguration {\\n        address[] collections;\\n        uint256[] objectIds;\\n        uint256[] weights;\\n        address creationRules;\\n        address triggeringRules;\\n        address[] canTerminateAddresses;\\n        address[] validatorsAddresses;\\n    }\\n\\n    function batchCreate(ProposalCodes[] calldata codeSequences) external returns(bytes32[] memory createdProposalIds);\\n\\n    function list(bytes32[] calldata proposalIds) external view returns(Proposal[] memory);\\n\\n    function votes(bytes32[] calldata proposalIds, address[] calldata voters, bytes32[][] calldata items) external view returns(uint256[][] memory accepts, uint256[][] memory refuses, uint256[][] memory toWithdraw);\\n    function weight(bytes32 code) external view returns(uint256);\\n\\n    function vote(address erc20TokenAddress, bytes memory permitSignature, bytes32 proposalId, uint256 accept, uint256 refuse, address voter, bool alsoTerminate) external payable;\\n    function batchVote(bytes[] calldata data) external payable;\\n\\n    function withdrawAll(bytes32[] memory proposalIds, address voterOrReceiver, bool afterTermination) external;\\n\\n    function terminate(bytes32[] calldata proposalIds) external;\\n\\n    function configuration() external view returns(ProposalConfiguration memory);\\n    function setConfiguration(ProposalConfiguration calldata newValue) external returns(ProposalConfiguration memory oldValue);\\n\\n    function lastProposalId() external view returns(bytes32);\\n\\n    function lastVoteBlock(address voter) external view returns (uint256);\\n\\n    event ProposalCreated(address indexed proposer, address indexed code, bytes32 indexed proposalId);\\n    event ProposalWeight(bytes32 indexed proposalId, address indexed collection, uint256 indexed id, bytes32 key, uint256 weight);\\n    event ProposalTerminated(bytes32 indexed proposalId, bool result, bytes errorData);\\n\\n    event Accept(bytes32 indexed proposalId, address indexed voter, bytes32 indexed item, uint256 amount);\\n    event MoveToAccept(bytes32 indexed proposalId, address indexed voter, bytes32 indexed item, uint256 amount);\\n    event RetireAccept(bytes32 indexed proposalId, address indexed voter, bytes32 indexed item, uint256 amount);\\n\\n    event Refuse(bytes32 indexed proposalId, address indexed voter, bytes32 indexed item, uint256 amount);\\n    event MoveToRefuse(bytes32 indexed proposalId, address indexed voter, bytes32 indexed item, uint256 amount);\\n    event RetireRefuse(bytes32 indexed proposalId, address indexed voter, bytes32 indexed item, uint256 amount);\\n}\\n\\ninterface IProposalChecker {\\n    function check(address proposalsManagerAddress, bytes32 id, bytes calldata data, address from, address voter) external view returns(bool);\\n}\\n\\ninterface IExternalProposalsManagerCommands {\\n    function createProposalCodeSequence(bytes32 proposalId, IProposalsManager.ProposalCode[] memory codeSequenceInput, address sender) external returns (address[] memory codeSequence, IProposalsManager.ProposalConfiguration memory localConfiguration);\\n    function proposalCanBeFinalized(bytes32 proposalId, IProposalsManager.Proposal memory proposal, bool validationPassed, bool result) external view returns (bool);\\n    function isVotable(bytes32 proposalId, IProposalsManager.Proposal memory proposal, address from, address voter, bool voteOrWithtraw) external view returns (bytes memory response);\\n}\"\r\n    },\r\n    \"contracts/core/model/IOrganization.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\npragma solidity >=0.7.0;\\n\\nimport \\\"@ethereansos/swissknife/contracts/dynamicMetadata/model/IDynamicMetadataCapableElement.sol\\\";\\n\\ninterface IOrganization is IDynamicMetadataCapableElement {\\n\\n    struct Component {\\n        bytes32 key;\\n        address location;\\n        bool active;\\n        bool log;\\n    }\\n\\n    function keyOf(address componentAddress) external view returns(bytes32);\\n    function history(bytes32 key) external view returns(address[] memory componentsAddresses);\\n    function batchHistory(bytes32[] calldata keys) external view returns(address[][] memory componentsAddresses);\\n\\n    function get(bytes32 key) external view returns(address componentAddress);\\n    function list(bytes32[] calldata keys) external view returns(address[] memory componentsAddresses);\\n    function isActive(address subject) external view returns(bool);\\n    function keyIsActive(bytes32 key) external view returns(bool);\\n\\n    function set(Component calldata) external returns(address replacedComponentAddress);\\n    function batchSet(Component[] calldata) external returns (address[] memory replacedComponentAddresses);\\n\\n    event ComponentSet(bytes32 indexed key, address indexed from, address indexed to, bool active);\\n\\n    function submit(address location, bytes calldata payload, address restReceiver) external payable returns(bytes memory response);\\n}\"\r\n    },\r\n    \"@openzeppelin/contracts/token/ERC20/IERC20.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC20 standard as defined in the EIP.\\n */\\ninterface IERC20 {\\n    /**\\n     * @dev Returns the amount of tokens in existence.\\n     */\\n    function totalSupply() external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the amount of tokens owned by `account`.\\n     */\\n    function balanceOf(address account) external view returns (uint256);\\n\\n    /**\\n     * @dev Moves `amount` tokens from the caller's account to `recipient`.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transfer(address recipient, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Returns the remaining number of tokens that `spender` will be\\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\\n     * zero by default.\\n     *\\n     * This value changes when {approve} or {transferFrom} are called.\\n     */\\n    function allowance(address owner, address spender) external view returns (uint256);\\n\\n    /**\\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\\n     * that someone may use both the old and the new allowance by unfortunate\\n     * transaction ordering. One possible solution to mitigate this race\\n     * condition is to first reduce the spender's allowance to 0 and set the\\n     * desired value afterwards:\\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address spender, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Moves `amount` tokens from `sender` to `recipient` using the\\n     * allowance mechanism. `amount` is then deducted from the caller's\\n     * allowance.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(\\n        address sender,\\n        address recipient,\\n        uint256 amount\\n    ) external returns (bool);\\n\\n    /**\\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\\n     * another (`to`).\\n     *\\n     * Note that `value` may be zero.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 value);\\n\\n    /**\\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\\n     * a call to {approve}. `value` is the new allowance.\\n     */\\n    event Approval(address indexed owner, address indexed spender, uint256 value);\\n}\\n\"\r\n    },\r\n    \"@ethereansos/swissknife/contracts/dynamicMetadata/model/IDynamicMetadataCapableElement.sol\": {\r\n      \"content\": \"//SPDX-License-Identifier: MIT\\npragma solidity >=0.7.0;\\n\\nimport \\\"../../generic/model/ILazyInitCapableElement.sol\\\";\\n\\ninterface IDynamicMetadataCapableElement is ILazyInitCapableElement {\\n\\n    function uri() external view returns(string memory);\\n    function plainUri() external view returns(string memory);\\n\\n    function setUri(string calldata newValue) external returns (string memory oldValue);\\n\\n    function dynamicUriResolver() external view returns(address);\\n    function setDynamicUriResolver(address newValue) external returns(address oldValue);\\n}\"\r\n    },\r\n    \"@openzeppelin/contracts/token/ERC1155/IERC1155Receiver.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../../utils/introspection/IERC165.sol\\\";\\n\\n/**\\n * @dev _Available since v3.1._\\n */\\ninterface IERC1155Receiver is IERC165 {\\n    /**\\n        @dev Handles the receipt of a single ERC1155 token type. This function is\\n        called at the end of a `safeTransferFrom` after the balance has been updated.\\n        To accept the transfer, this must return\\n        `bytes4(keccak256(\\\"onERC1155Received(address,address,uint256,uint256,bytes)\\\"))`\\n        (i.e. 0xf23a6e61, or its own function selector).\\n        @param operator The address which initiated the transfer (i.e. msg.sender)\\n        @param from The address which previously owned the token\\n        @param id The ID of the token being transferred\\n        @param value The amount of tokens being transferred\\n        @param data Additional data with no specified format\\n        @return `bytes4(keccak256(\\\"onERC1155Received(address,address,uint256,uint256,bytes)\\\"))` if transfer is allowed\\n    */\\n    function onERC1155Received(\\n        address operator,\\n        address from,\\n        uint256 id,\\n        uint256 value,\\n        bytes calldata data\\n    ) external returns (bytes4);\\n\\n    /**\\n        @dev Handles the receipt of a multiple ERC1155 token types. This function\\n        is called at the end of a `safeBatchTransferFrom` after the balances have\\n        been updated. To accept the transfer(s), this must return\\n        `bytes4(keccak256(\\\"onERC1155BatchReceived(address,address,uint256[],uint256[],bytes)\\\"))`\\n        (i.e. 0xbc197c81, or its own function selector).\\n        @param operator The address which initiated the batch transfer (i.e. msg.sender)\\n        @param from The address which previously owned the token\\n        @param ids An array containing ids of each token being transferred (order and length must match values array)\\n        @param values An array containing amounts of each token being transferred (order and length must match ids array)\\n        @param data Additional data with no specified format\\n        @return `bytes4(keccak256(\\\"onERC1155BatchReceived(address,address,uint256[],uint256[],bytes)\\\"))` if transfer is allowed\\n    */\\n    function onERC1155BatchReceived(\\n        address operator,\\n        address from,\\n        uint256[] calldata ids,\\n        uint256[] calldata values,\\n        bytes calldata data\\n    ) external returns (bytes4);\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/utils/introspection/IERC165.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC165 standard, as defined in the\\n * https://eips.ethereum.org/EIPS/eip-165[EIP].\\n *\\n * Implementers can declare support of contract interfaces, which can then be\\n * queried by others ({ERC165Checker}).\\n *\\n * For an implementation, see {ERC165}.\\n */\\ninterface IERC165 {\\n    /**\\n     * @dev Returns true if this contract implements the interface defined by\\n     * `interfaceId`. See the corresponding\\n     * https://eips.ethereum.org/EIPS/eip-165#how-interfaces-are-identified[EIP section]\\n     * to learn more about how these ids are created.\\n     *\\n     * This function call must use less than 30 000 gas.\\n     */\\n    function supportsInterface(bytes4 interfaceId) external view returns (bool);\\n}\\n\"\r\n    }\r\n  },\r\n  \"settings\": {\r\n    \"optimizer\": {\r\n      \"enabled\": true,\r\n      \"runs\": 200\r\n    },\r\n    \"outputSelection\": {\r\n      \"*\": {\r\n        \"*\": [\r\n          \"evm.bytecode\",\r\n          \"evm.deployedBytecode\",\r\n          \"devdoc\",\r\n          \"userdoc\",\r\n          \"metadata\",\r\n          \"abi\"\r\n        ]\r\n      }\r\n    }\r\n  }\r\n}}","ABI":"[{\"inputs\":[{\"internalType\":\"bytes\",\"name\":\"lazyInitData\",\"type\":\"bytes\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"}],\"name\":\"Host\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"key\",\"type\":\"bytes32\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"}],\"name\":\"SubDAOSet\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"bytes32[]\",\"name\":\"keys\",\"type\":\"bytes32[]\"}],\"name\":\"batchHistory\",\"outputs\":[{\"internalType\":\"address[][]\",\"name\":\"subdaosAddresses\",\"type\":\"address[][]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"components\":[{\"internalType\":\"bytes32\",\"name\":\"key\",\"type\":\"bytes32\"},{\"internalType\":\"address\",\"name\":\"location\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"newHost\",\"type\":\"address\"}],\"internalType\":\"struct ISubDAOsManager.SubDAOEntry[]\",\"name\":\"subdaos\",\"type\":\"tuple[]\"}],\"name\":\"batchSet\",\"outputs\":[{\"internalType\":\"address[]\",\"name\":\"replacedSubdaoAddresses\",\"type\":\"address[]\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"componentAddress\",\"type\":\"address\"}],\"name\":\"exists\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"name\":\"get\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"key\",\"type\":\"bytes32\"}],\"name\":\"history\",\"outputs\":[{\"internalType\":\"address[]\",\"name\":\"subdaosAddresses\",\"type\":\"address[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"host\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"initializer\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"name\":\"keyExists\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"keyOf\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes\",\"name\":\"lazyInitData\",\"type\":\"bytes\"}],\"name\":\"lazyInit\",\"outputs\":[{\"internalType\":\"bytes\",\"name\":\"lazyInitResponse\",\"type\":\"bytes\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32[]\",\"name\":\"keys\",\"type\":\"bytes32[]\"}],\"name\":\"list\",\"outputs\":[{\"internalType\":\"address[]\",\"name\":\"subdaosAddresses\",\"type\":\"address[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"key\",\"type\":\"bytes32\"},{\"internalType\":\"address\",\"name\":\"location\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"newHost\",\"type\":\"address\"}],\"name\":\"set\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"replacedSubdaoAddress\",\"type\":\"address\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newValue\",\"type\":\"address\"}],\"name\":\"setHost\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"oldValue\",\"type\":\"address\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"subject\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"location\",\"type\":\"address\"},{\"internalType\":\"bytes4\",\"name\":\"selector\",\"type\":\"bytes4\"},{\"internalType\":\"bytes\",\"name\":\"payload\",\"type\":\"bytes\"},{\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"subjectIsAuthorizedFor\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"key\",\"type\":\"bytes32\"},{\"internalType\":\"bytes\",\"name\":\"payload\",\"type\":\"bytes\"},{\"internalType\":\"address\",\"name\":\"restReceiver\",\"type\":\"address\"}],\"name\":\"submit\",\"outputs\":[{\"internalType\":\"bytes\",\"name\":\"response\",\"type\":\"bytes\"}],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes4\",\"name\":\"interfaceId\",\"type\":\"bytes4\"}],\"name\":\"supportsInterface\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"}]","ContractName":"SubDAOsManager","CompilerVersion":"v0.8.6+commit.11564f7e","OptimizationUsed":"1","Runs":"200","ConstructorArguments":"00000000000000000000000000000000000000000000000000000000000000200000000000000000000000000000000000000000000000000000000000000000","EVMVersion":"Default","Library":"","LicenseType":"","Proxy":"0","Implementation":"","SwarmSource":""}]}