{"status":"1","message":"OK","result":[{"SourceCode":"{{\r\n  \"language\": \"Solidity\",\r\n  \"sources\": {\r\n    \"contracts/models/SeniorRateModelV3.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: Apache-2.0\\npragma solidity 0.8.6;\\n\\nimport \\\"../interfaces/ISeniorRateModel.sol\\\";\\n\\ncontract SeniorRateModelV3 is ISeniorRateModel {\\n    uint256 constant public scaleFactor = 10 ** 18;\\n\\n    /// @notice m1, b1 and m2, b2 are the coefficients corresponding to the lines used to calculate the rate sum\\n    /// @dev The equation of the line is calculated using the y = mx + b formula where m is the slope of the line and b is the y-intercept\\n    // f(x) = -18*x + 1\\n    uint256 constant public m1 = 18 * scaleFactor; // -18\\n    uint256 constant public b1 = scaleFactor; // +1\\n\\n    // f(x) = (18/19)*x + 1/19\\n    uint256 constant public m2 = 18 * scaleFactor / 19; // 18/19\\n    uint256 constant public b2 = scaleFactor / 19; // 1/19\\n\\n    uint256 constant splitPoint = 5 * scaleFactor / 100;\\n\\n    uint256 constant maxProtectionPercentage = 80 * scaleFactor / 100;\\n    uint256 constant maxProtectionAbsolute = 35 * scaleFactor / 100;\\n\\n    // @notice Get the rates offered to seniors based on the current pool conditions\\n    /// @param juniorLiquidity The total amount of junior liquidity in the pool\\n    /// @param seniorLiquidity The total amount of senior liquidity in the pool\\n    /// @return (uint256, uint256) The upside exposure rate and downside protection rate scaled by `scaleFactor`\\n    function getRates(uint256 juniorLiquidity, uint256 seniorLiquidity) external pure override returns (uint256, uint256) {\\n        uint256 sum = calcRateSum(juniorLiquidity, seniorLiquidity);\\n        uint256 protection = getDownsideProtectionRate(juniorLiquidity, seniorLiquidity);\\n\\n        return (sum - protection, protection);\\n    }\\n\\n    /// @notice Get the upside exposure rate based on the current pool conditions\\n    /// @param juniorLiquidity The total amount of junior liquidity in the pool\\n    /// @param seniorLiquidity The total amount of senior liquidity in the pool\\n    /// @return uint256 The upside exposure rate, scaled by `scaleFactor`\\n    function getUpsideExposureRate(uint256 juniorLiquidity, uint256 seniorLiquidity) external pure override returns (uint256) {\\n        uint256 sum = calcRateSum(juniorLiquidity, seniorLiquidity);\\n        uint256 protection = getDownsideProtectionRate(juniorLiquidity, seniorLiquidity);\\n\\n        return sum - protection;\\n    }\\n\\n    /// @notice Get the downside protection rate based on the current pool conditions\\n    /// @param juniorLiquidity The total amount of junior liquidity in the pool\\n    /// @param seniorLiquidity The total amount of senior liquidity in the pool\\n    /// @return uint256 The downside protection rate, scaled by `scaleFactor`\\n    function getDownsideProtectionRate(uint256 juniorLiquidity, uint256 seniorLiquidity) public pure override returns (uint256) {\\n        uint256 total = juniorLiquidity + seniorLiquidity;\\n        if (total == 0) {\\n            return 0;\\n        }\\n\\n        uint256 protection = maxProtectionPercentage * juniorLiquidity / total;\\n\\n        if (protection <= maxProtectionAbsolute) {\\n            return protection;\\n        }\\n\\n        return maxProtectionAbsolute;\\n    }\\n\\n    /// @notice Calculate the sum of upside exposure rate and downside protection rate\\n    /// @param juniorLiquidity The total amount of junior liquidity in the pool\\n    /// @param seniorLiquidity The total amount of senior liquidity in the pool\\n    /// @return uint256 The sum available to split between protection and exposure, scaled by scaleFactor\\n    /// @dev Leave this function last in the contract to circumvent a bug in the docgen procedure\\n    function calcRateSum(uint256 juniorLiquidity, uint256 seniorLiquidity) public pure returns (uint256) {\\n        uint256 total = juniorLiquidity + seniorLiquidity;\\n        if (total == 0) {\\n            return scaleFactor;\\n        }\\n\\n        uint256 juniorDominance = juniorLiquidity * scaleFactor / total;\\n\\n        if (juniorDominance < splitPoint) {\\n            return b1 - m1 * juniorLiquidity / total;\\n        }\\n\\n        return m2 * juniorLiquidity / total + b2;\\n    }\\n}\\n\"\r\n    },\r\n    \"contracts/interfaces/ISeniorRateModel.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: Apache-2.0\\npragma solidity 0.8.6;\\n\\ninterface ISeniorRateModel {\\n    function getRates(uint256 juniorLiquidity, uint256 seniorLiquidity) external view returns (uint256, uint256);\\n    function getUpsideExposureRate(uint256 juniorLiquidity, uint256 seniorLiquidity) external view returns (uint256);\\n    function getDownsideProtectionRate(uint256 juniorLiquidity, uint256 seniorLiquidity) external view returns (uint256);\\n}\\n\"\r\n    }\r\n  },\r\n  \"settings\": {\r\n    \"optimizer\": {\r\n      \"enabled\": true,\r\n      \"runs\": 2\r\n    },\r\n    \"outputSelection\": {\r\n      \"*\": {\r\n        \"*\": [\r\n          \"evm.bytecode\",\r\n          \"evm.deployedBytecode\",\r\n          \"abi\"\r\n        ]\r\n      }\r\n    },\r\n    \"libraries\": {}\r\n  }\r\n}}","ABI":"[{\"inputs\":[],\"name\":\"b1\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"b2\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"juniorLiquidity\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"seniorLiquidity\",\"type\":\"uint256\"}],\"name\":\"calcRateSum\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"juniorLiquidity\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"seniorLiquidity\",\"type\":\"uint256\"}],\"name\":\"getDownsideProtectionRate\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"juniorLiquidity\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"seniorLiquidity\",\"type\":\"uint256\"}],\"name\":\"getRates\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"juniorLiquidity\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"seniorLiquidity\",\"type\":\"uint256\"}],\"name\":\"getUpsideExposureRate\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"m1\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"m2\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"scaleFactor\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"}]","ContractName":"SeniorRateModelV3","CompilerVersion":"v0.8.6+commit.11564f7e","OptimizationUsed":"1","Runs":"2","ConstructorArguments":"","EVMVersion":"Default","Library":"","LicenseType":"","Proxy":"0","Implementation":"","SwarmSource":""}]}