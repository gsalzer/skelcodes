{"status":"1","message":"OK","result":[{"SourceCode":"// SPDX-License-Identifier: MIT\r\n\r\n// Sources flattened with hardhat v2.0.11 https://hardhat.org\r\n\r\n// File contracts/libraries/SafeMath.sol\r\npragma solidity 0.6.12;\r\n// a library for performing overflow-safe math, updated with awesomeness from of DappHub (https://github.com/dapphub/ds-math)\r\nlibrary SafeMath {\r\n    function add(uint256 a, uint256 b) internal pure returns (uint256 c) {require((c = a + b) >= b, \"SafeMath: Add Overflow\");}\r\n    function sub(uint256 a, uint256 b) internal pure returns (uint256 c) {require((c = a - b) <= a, \"SafeMath: Underflow\");}\r\n    function mul(uint256 a, uint256 b) internal pure returns (uint256 c) {require(b == 0 || (c = a * b)/b == a, \"SafeMath: Mul Overflow\");}\r\n    function to128(uint256 a) internal pure returns (uint128 c) {\r\n        require(a <= uint128(-1), \"SafeMath: uint128 Overflow\");\r\n        c = uint128(a);\r\n    }\r\n}\r\n\r\nlibrary SafeMath128 {\r\n    function add(uint128 a, uint128 b) internal pure returns (uint128 c) {require((c = a + b) >= b, \"SafeMath: Add Overflow\");}\r\n    function sub(uint128 a, uint128 b) internal pure returns (uint128 c) {require((c = a - b) <= a, \"SafeMath: Underflow\");}\r\n}\r\n\r\n\r\n// File contracts/interfaces/IERC20.sol\r\npragma solidity 0.6.12;\r\n\r\ninterface IERC20 {\r\n    function totalSupply() external view returns (uint256);\r\n    function balanceOf(address account) external view returns (uint256);\r\n    function allowance(address owner, address spender) external view returns (uint256);\r\n    function approve(address spender, uint256 amount) external returns (bool);\r\n    event Transfer(address indexed from, address indexed to, uint256 value);\r\n    event Approval(address indexed owner, address indexed spender, uint256 value);\r\n\r\n    // EIP 2612\r\n    function permit(address owner, address spender, uint256 value, uint256 deadline, uint8 v, bytes32 r, bytes32 s) external;\r\n}\r\n\r\n\r\n// File contracts/libraries/SafeERC20.sol\r\npragma solidity 0.6.12;\r\n\r\nlibrary SafeERC20 {\r\n    function safeSymbol(IERC20 token) internal view returns(string memory) {\r\n        (bool success, bytes memory data) = address(token).staticcall(abi.encodeWithSelector(0x95d89b41));\r\n        return success && data.length > 0 ? abi.decode(data, (string)) : \"???\";\r\n    }\r\n\r\n    function safeName(IERC20 token) internal view returns(string memory) {\r\n        (bool success, bytes memory data) = address(token).staticcall(abi.encodeWithSelector(0x06fdde03));\r\n        return success && data.length > 0 ? abi.decode(data, (string)) : \"???\";\r\n    }\r\n\r\n    function safeDecimals(IERC20 token) public view returns (uint8) {\r\n        (bool success, bytes memory data) = address(token).staticcall(abi.encodeWithSelector(0x313ce567));\r\n        return success && data.length == 32 ? abi.decode(data, (uint8)) : 18;\r\n    }\r\n\r\n    function safeTransfer(IERC20 token, address to, uint256 amount) internal {\r\n        (bool success, bytes memory data) = address(token).call(abi.encodeWithSelector(0xa9059cbb, to, amount));\r\n        require(success && (data.length == 0 || abi.decode(data, (bool))), \"SafeERC20: Transfer failed\");\r\n    }\r\n\r\n    function safeTransferFrom(IERC20 token, address from, uint256 amount) internal {\r\n        (bool success, bytes memory data) = address(token).call(abi.encodeWithSelector(0x23b872dd, from, address(this), amount));\r\n        require(success && (data.length == 0 || abi.decode(data, (bool))), \"SafeERC20: TransferFrom failed\");\r\n    }\r\n}\r\n\r\n\r\n// File contracts/horus/interfaces/IHorusERC20.sol\r\n\r\npragma solidity >=0.5.0;\r\n\r\ninterface IHorusERC20 {\r\n    event Approval(address indexed owner, address indexed spender, uint value);\r\n    event Transfer(address indexed from, address indexed to, uint value);\r\n\r\n    function name() external pure returns (string memory);\r\n    function symbol() external pure returns (string memory);\r\n    function decimals() external pure returns (uint8);\r\n    function totalSupply() external view returns (uint);\r\n    function balanceOf(address owner) external view returns (uint);\r\n    function allowance(address owner, address spender) external view returns (uint);\r\n\r\n    function approve(address spender, uint value) external returns (bool);\r\n    function transfer(address to, uint value) external returns (bool);\r\n    function transferFrom(address from, address to, uint value) external returns (bool);\r\n\r\n    function DOMAIN_SEPARATOR() external view returns (bytes32);\r\n    function PERMIT_TYPEHASH() external pure returns (bytes32);\r\n    function nonces(address owner) external view returns (uint);\r\n\r\n    function permit(address owner, address spender, uint value, uint deadline, uint8 v, bytes32 r, bytes32 s) external;\r\n}\r\n\r\n\r\n// File contracts/Horus/interfaces/IHorusPair.sol\r\n\r\npragma solidity >=0.5.0;\r\n\r\ninterface IHorusPair {\r\n    event Approval(address indexed owner, address indexed spender, uint value);\r\n    event Transfer(address indexed from, address indexed to, uint value);\r\n\r\n    function name() external pure returns (string memory);\r\n    function symbol() external pure returns (string memory);\r\n    function decimals() external pure returns (uint8);\r\n    function totalSupply() external view returns (uint);\r\n    function balanceOf(address owner) external view returns (uint);\r\n    function allowance(address owner, address spender) external view returns (uint);\r\n\r\n    function approve(address spender, uint value) external returns (bool);\r\n    function transfer(address to, uint value) external returns (bool);\r\n    function transferFrom(address from, address to, uint value) external returns (bool);\r\n\r\n    function DOMAIN_SEPARATOR() external view returns (bytes32);\r\n    function PERMIT_TYPEHASH() external pure returns (bytes32);\r\n    function nonces(address owner) external view returns (uint);\r\n\r\n    function permit(address owner, address spender, uint value, uint deadline, uint8 v, bytes32 r, bytes32 s) external;\r\n\r\n    event Mint(address indexed sender, uint amount0, uint amount1);\r\n    event Burn(address indexed sender, uint amount0, uint amount1, address indexed to);\r\n    event Swap(\r\n        address indexed sender,\r\n        uint amount0In,\r\n        uint amount1In,\r\n        uint amount0Out,\r\n        uint amount1Out,\r\n        address indexed to\r\n    );\r\n    event Sync(uint112 reserve0, uint112 reserve1);\r\n\r\n    function MINIMUM_LIQUIDITY() external pure returns (uint);\r\n    function factory() external view returns (address);\r\n    function token0() external view returns (address);\r\n    function token1() external view returns (address);\r\n    function getReserves() external view returns (uint112 reserve0, uint112 reserve1, uint32 blockTimestampLast);\r\n    function price0CumulativeLast() external view returns (uint);\r\n    function price1CumulativeLast() external view returns (uint);\r\n    function kLast() external view returns (uint);\r\n\r\n    function mint(address to) external returns (uint liquidity);\r\n    function burn(address to) external returns (uint amount0, uint amount1);\r\n    function swap(uint amount0Out, uint amount1Out, address to, bytes calldata data) external;\r\n    function skim(address to) external;\r\n    function sync() external;\r\n\r\n    function initialize(address, address) external;\r\n}\r\n\r\n\r\n// File contracts/horus/interfaces/IHorusFactory.sol\r\n\r\npragma solidity >=0.5.0;\r\n\r\ninterface IHorusFactory {\r\n    event PairCreated(address indexed token0, address indexed token1, address pair, uint);\r\n\r\n    function feeTo() external view returns (address);\r\n    function feeToSetter() external view returns (address);\r\n    function migrator() external view returns (address);\r\n\r\n    function getPair(address tokenA, address tokenB) external view returns (address pair);\r\n    function allPairs(uint) external view returns (address pair);\r\n    function allPairsLength() external view returns (uint);\r\n\r\n    function createPair(address tokenA, address tokenB) external returns (address pair);\r\n\r\n    function setFeeTo(address) external;\r\n    function setFeeToSetter(address) external;\r\n    function setMigrator(address) external;\r\n}\r\n\r\n\r\n// File contracts/Ownable.sol\r\n// Audit on 5-Jan-2021 by Keno and BoringCrypto\r\n\r\n// P1 - P3: OK\r\npragma solidity 0.6.12;\r\n\r\n// Source: https://github.com/OpenZeppelin/openzeppelin-contracts/blob/master/contracts/access/Ownable.sol + Claimable.sol\r\n// Edited by BoringCrypto\r\n\r\n// T1 - T4: OK\r\ncontract OwnableData {\r\n    // V1 - V5: OK\r\n    address public owner;\r\n    // V1 - V5: OK\r\n    address public pendingOwner;\r\n}\r\n\r\n// T1 - T4: OK\r\ncontract Ownable is OwnableData {\r\n    // E1: OK\r\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\r\n\r\n    constructor () internal {\r\n        owner = msg.sender;\r\n        emit OwnershipTransferred(address(0), msg.sender);\r\n    }\r\n\r\n    // F1 - F9: OK\r\n    // C1 - C21: OK\r\n    function transferOwnership(address newOwner, bool direct, bool renounce) public onlyOwner {\r\n        if (direct) {\r\n            // Checks\r\n            require(newOwner != address(0) || renounce, \"Ownable: zero address\");\r\n\r\n            // Effects\r\n            emit OwnershipTransferred(owner, newOwner);\r\n            owner = newOwner;\r\n        } else {\r\n            // Effects\r\n            pendingOwner = newOwner;\r\n        }\r\n    }\r\n\r\n    // F1 - F9: OK\r\n    // C1 - C21: OK\r\n    function claimOwnership() public {\r\n        address _pendingOwner = pendingOwner;\r\n\r\n        // Checks\r\n        require(msg.sender == _pendingOwner, \"Ownable: caller != pending owner\");\r\n\r\n        // Effects\r\n        emit OwnershipTransferred(owner, _pendingOwner);\r\n        owner = _pendingOwner;\r\n        pendingOwner = address(0);\r\n    }\r\n\r\n    // M1 - M5: OK\r\n    // C1 - C21: OK\r\n    modifier onlyOwner() {\r\n        require(msg.sender == owner, \"Ownable: caller is not the owner\");\r\n        _;\r\n    }\r\n}\r\n\r\n\r\n// File contracts/HorusMaker.sol\r\n\r\n// P1 - P3: OK\r\npragma solidity 0.6.12;\r\n\r\n\r\n\r\n\r\n// HorusMaker is MasterChef's left hand and kinda a wizard. He can cook up HOS from pretty much anything!\r\n// This contract handles \"serving up\" rewards for xHORUS holders by trading tokens collected from fees for HOS.\r\n\r\n// T1 - T4: OK\r\ncontract HorusMaker is Ownable {\r\n    using SafeMath for uint256;\r\n    using SafeERC20 for IERC20;\r\n\r\n    // V1 - V5: OK\r\n    IHorusFactory public immutable factory;\r\n    //0xC0AEe478e3658e2610c5F7A4A2E1777cE9e4f2Ac\r\n    // V1 - V5: OK\r\n    address public immutable bar;\r\n    //0x8798249c2E607446EfB7Ad49eC89dD1865Ff4272\r\n    // V1 - V5: OK\r\n    address private immutable HOS;\r\n    //0x6B3595068778DD592e39A122f4f5a5cF09C90fE2\r\n    // V1 - V5: OK\r\n    address private immutable weth;\r\n    //0xC02aaA39b223FE8D0A0e5C4F27eAD9083C756Cc2\r\n\r\n    // V1 - V5: OK\r\n    mapping(address => address) internal _bridges;\r\n\r\n    // E1: OK\r\n    event LogBridgeSet(address indexed token, address indexed bridge);\r\n    // E1: OK\r\n    event LogConvert(\r\n        address indexed server,\r\n        address indexed token0,\r\n        address indexed token1,\r\n        uint256 amount0,\r\n        uint256 amount1,\r\n        uint256 amountHOS\r\n    );\r\n\r\n    constructor(\r\n        address _factory,\r\n        address _bar,\r\n        address _hos,\r\n        address _weth\r\n    ) public {\r\n        factory = IHorusFactory(_factory);\r\n        bar = _bar;\r\n        HOS = _hos;\r\n        weth = _weth;\r\n    }\r\n\r\n    // F1 - F10: OK\r\n    // C1 - C24: OK\r\n    function bridgeFor(address token) public view returns (address bridge) {\r\n        bridge = _bridges[token];\r\n        if (bridge == address(0)) {\r\n            bridge = weth;\r\n        }\r\n    }\r\n\r\n    // F1 - F10: OK\r\n    // C1 - C24: OK\r\n    function setBridge(address token, address bridge) external onlyOwner {\r\n        // Checks\r\n        require(\r\n            token != HOS && token != weth && token != bridge,\r\n            \"HorusMaker: Invalid bridge\"\r\n        );\r\n\r\n        // Effects\r\n        _bridges[token] = bridge;\r\n        emit LogBridgeSet(token, bridge);\r\n    }\r\n\r\n    // M1 - M5: OK\r\n    // C1 - C24: OK\r\n    // C6: It's not a fool proof solution, but it prevents flash loans, so here it's ok to use tx.origin\r\n    modifier onlyEOA() {\r\n        // Try to make flash-loan exploit harder to do by only allowing externally owned addresses.\r\n        require(msg.sender == tx.origin, \"HorusMaker: must use EOA\");\r\n        _;\r\n    }\r\n\r\n    // F1 - F10: OK\r\n    // F3: _convert is separate to save gas by only checking the 'onlyEOA' modifier once in case of convertMultiple\r\n    // F6: There is an exploit to add lots of HOS to the bar, run convert, then remove the HOS again.\r\n    //     As the size of the HorusBar has grown, this requires large amounts of funds and isn't super profitable anymore\r\n    //     The onlyEOA modifier prevents this being done with a flash loan.\r\n    // C1 - C24: OK\r\n    function convert(address token0, address token1) external onlyEOA() {\r\n        _convert(token0, token1);\r\n    }\r\n\r\n    // F1 - F10: OK, see convert\r\n    // C1 - C24: OK\r\n    // C3: Loop is under control of the caller\r\n    function convertMultiple(\r\n        address[] calldata token0,\r\n        address[] calldata token1\r\n    ) external onlyEOA() {\r\n        // TODO: This can be optimized a fair bit, but this is safer and simpler for now\r\n        uint256 len = token0.length;\r\n        for (uint256 i = 0; i < len; i++) {\r\n            _convert(token0[i], token1[i]);\r\n        }\r\n    }\r\n\r\n    // F1 - F10: OK\r\n    // C1- C24: OK\r\n    function _convert(address token0, address token1) internal {\r\n        // Interactions\r\n        // S1 - S4: OK\r\n        IHorusPair pair = IHorusPair(factory.getPair(token0, token1));\r\n        require(address(pair) != address(0), \"HorusMaker: Invalid pair\");\r\n        // balanceOf: S1 - S4: OK\r\n        // transfer: X1 - X5: OK\r\n        IERC20(address(pair)).safeTransfer(\r\n            address(pair),\r\n            pair.balanceOf(address(this))\r\n        );\r\n        // X1 - X5: OK\r\n        (uint256 amount0, uint256 amount1) = pair.burn(address(this));\r\n        if (token0 != pair.token0()) {\r\n            (amount0, amount1) = (amount1, amount0);\r\n        }\r\n        emit LogConvert(\r\n            msg.sender,\r\n            token0,\r\n            token1,\r\n            amount0,\r\n            amount1,\r\n            _convertStep(token0, token1, amount0, amount1)\r\n        );\r\n    }\r\n\r\n    // F1 - F10: OK\r\n    // C1 - C24: OK\r\n    // All safeTransfer, _swap, _toHOS, _convertStep: X1 - X5: OK\r\n    function _convertStep(\r\n        address token0,\r\n        address token1,\r\n        uint256 amount0,\r\n        uint256 amount1\r\n    ) internal returns (uint256 hosOut) {\r\n        // Interactions\r\n        if (token0 == token1) {\r\n            uint256 amount = amount0.add(amount1);\r\n            if (token0 == HOS) {\r\n                IERC20(HOS).safeTransfer(bar, amount);\r\n                hosOut = amount;\r\n            } else if (token0 == weth) {\r\n                hosOut = _toHOS(weth, amount);\r\n            } else {\r\n                address bridge = bridgeFor(token0);\r\n                amount = _swap(token0, bridge, amount, address(this));\r\n                hosOut = _convertStep(bridge, bridge, amount, 0);\r\n            }\r\n        } else if (token0 == HOS) {\r\n            // eg. HOS - ETH\r\n            IERC20(HOS).safeTransfer(bar, amount0);\r\n            hosOut = _toHOS(token1, amount1).add(amount0);\r\n        } else if (token1 == HOS) {\r\n            // eg. USDT - HOS\r\n            IERC20(HOS).safeTransfer(bar, amount1);\r\n            hosOut = _toHOS(token0, amount0).add(amount1);\r\n        } else if (token0 == weth) {\r\n            // eg. ETH - USDC\r\n            hosOut = _toHOS(\r\n                weth,\r\n                _swap(token1, weth, amount1, address(this)).add(amount0)\r\n            );\r\n        } else if (token1 == weth) {\r\n            // eg. USDT - ETH\r\n            hosOut = _toHOS(\r\n                weth,\r\n                _swap(token0, weth, amount0, address(this)).add(amount1)\r\n            );\r\n        } else {\r\n            // eg. MIC - USDT\r\n            address bridge0 = bridgeFor(token0);\r\n            address bridge1 = bridgeFor(token1);\r\n            if (bridge0 == token1) {\r\n                // eg. MIC - USDT - and bridgeFor(MIC) = USDT\r\n                hosOut = _convertStep(\r\n                    bridge0,\r\n                    token1,\r\n                    _swap(token0, bridge0, amount0, address(this)),\r\n                    amount1\r\n                );\r\n            } else if (bridge1 == token0) {\r\n                // eg. WBTC - DSD - and bridgeFor(DSD) = WBTC\r\n                hosOut = _convertStep(\r\n                    token0,\r\n                    bridge1,\r\n                    amount0,\r\n                    _swap(token1, bridge1, amount1, address(this))\r\n                );\r\n            } else {\r\n                hosOut = _convertStep(\r\n                    bridge0,\r\n                    bridge1, // eg. USDT - DSD - and bridgeFor(DSD) = WBTC\r\n                    _swap(token0, bridge0, amount0, address(this)),\r\n                    _swap(token1, bridge1, amount1, address(this))\r\n                );\r\n            }\r\n        }\r\n    }\r\n\r\n    // F1 - F10: OK\r\n    // C1 - C24: OK\r\n    // All safeTransfer, swap: X1 - X5: OK\r\n    function _swap(\r\n        address fromToken,\r\n        address toToken,\r\n        uint256 amountIn,\r\n        address to\r\n    ) internal returns (uint256 amountOut) {\r\n        // Checks\r\n        // X1 - X5: OK\r\n        IHorusPair pair =\r\n            IHorusPair(factory.getPair(fromToken, toToken));\r\n        require(address(pair) != address(0), \"HorusMaker: Cannot convert\");\r\n\r\n        // Interactions\r\n        // X1 - X5: OK\r\n        (uint256 reserve0, uint256 reserve1, ) = pair.getReserves();\r\n        uint256 amountInWithFee = amountIn.mul(997);\r\n        if (fromToken == pair.token0()) {\r\n            amountOut =\r\n                amountInWithFee.mul(reserve1) /\r\n                reserve0.mul(1000).add(amountInWithFee);\r\n            IERC20(fromToken).safeTransfer(address(pair), amountIn);\r\n            pair.swap(0, amountOut, to, new bytes(0));\r\n            // TODO: Add maximum slippage?\r\n        } else {\r\n            amountOut =\r\n                amountInWithFee.mul(reserve0) /\r\n                reserve1.mul(1000).add(amountInWithFee);\r\n            IERC20(fromToken).safeTransfer(address(pair), amountIn);\r\n            pair.swap(amountOut, 0, to, new bytes(0));\r\n            // TODO: Add maximum slippage?\r\n        }\r\n    }\r\n\r\n    // F1 - F10: OK\r\n    // C1 - C24: OK\r\n    function _toHOS(address token, uint256 amountIn)\r\n        internal\r\n        returns (uint256 amountOut)\r\n    {\r\n        // X1 - X5: OK\r\n        amountOut = _swap(token, HOS, amountIn, bar);\r\n    }\r\n}","ABI":"[{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_factory\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_bar\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_hos\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_weth\",\"type\":\"address\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"token\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"bridge\",\"type\":\"address\"}],\"name\":\"LogBridgeSet\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"server\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"token0\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"token1\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount0\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount1\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amountHOS\",\"type\":\"uint256\"}],\"name\":\"LogConvert\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"bar\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"token\",\"type\":\"address\"}],\"name\":\"bridgeFor\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"bridge\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"claimOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"token0\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"token1\",\"type\":\"address\"}],\"name\":\"convert\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address[]\",\"name\":\"token0\",\"type\":\"address[]\"},{\"internalType\":\"address[]\",\"name\":\"token1\",\"type\":\"address[]\"}],\"name\":\"convertMultiple\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"factory\",\"outputs\":[{\"internalType\":\"contract IHorusFactory\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"pendingOwner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"token\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"bridge\",\"type\":\"address\"}],\"name\":\"setBridge\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"},{\"internalType\":\"bool\",\"name\":\"direct\",\"type\":\"bool\"},{\"internalType\":\"bool\",\"name\":\"renounce\",\"type\":\"bool\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}]","ContractName":"HorusMaker","CompilerVersion":"v0.6.12+commit.27d51765","OptimizationUsed":"1","Runs":"200","ConstructorArguments":"0000000000000000000000009c84c9567abe1a5ef751858c88f2c9eee4449ca4000000000000000000000000ef8f1eecd338854019fd660aa589d57b6ab44ed80000000000000000000000008e3cefa4f852279a005e0021904ef6dbf36b6ec8000000000000000000000000c02aaa39b223fe8d0a0e5c4f27ead9083c756cc2","EVMVersion":"Default","Library":"","LicenseType":"MIT","Proxy":"0","Implementation":"","SwarmSource":"ipfs://cb27974a76f6927f178d99089ef21fae056b7431f79e9a07cd1f5adb05da6c2a"}]}