{"status":"1","message":"OK","result":[{"SourceCode":"{\"Interfaces.sol\":{\"content\":\"interface ETHRegistrarController {\\n  function MIN_REGISTRATION_DURATION (  ) external view returns ( uint256 );\\n  function available ( string calldata name ) external view returns ( bool );\\n  function commit ( bytes32 commitment ) external;\\n  function commitments ( bytes32 ) external view returns ( uint256 );\\n  function isOwner (  ) external view returns ( bool );\\n  function makeCommitment ( string calldata name, address owner, bytes32 secret ) external pure returns ( bytes32 );\\n  function makeCommitmentWithConfig ( string calldata name, address owner, bytes32 secret, address resolver, address addr ) external pure returns ( bytes32 );\\n  function maxCommitmentAge (  ) external view returns ( uint256 );\\n  function minCommitmentAge (  ) external view returns ( uint256 );\\n  function owner (  ) external view returns ( address );\\n  function register ( string calldata name, address owner, uint256 duration, bytes32 secret ) external payable;\\n  function registerWithConfig ( string calldata name, address owner, uint256 duration, bytes32 secret, address resolver, address addr ) external payable;\\n  function renew ( string calldata name, uint256 duration ) external payable;\\n  function renounceOwnership (  ) external;\\n  function rentPrice ( string calldata name, uint256 duration ) external view returns ( uint256 );\\n  function setCommitmentAges ( uint256 _minCommitmentAge, uint256 _maxCommitmentAge ) external;\\n  function setPriceOracle ( address _prices ) external;\\n  function supportsInterface ( bytes4 interfaceID ) external pure returns ( bool );\\n  function transferOwnership ( address newOwner ) external;\\n  function valid ( string calldata name ) external pure returns ( bool );\\n  function withdraw (  ) external;\\n}\\n\\ninterface BaseRegistrarImplementation {\\n  function GRACE_PERIOD (  ) external view returns ( uint256 );\\n  function addController ( address controller ) external;\\n  function approve ( address to, uint256 tokenId ) external;\\n  function available ( uint256 id ) external view returns ( bool );\\n  function balanceOf ( address owner ) external view returns ( uint256 );\\n  function baseNode (  ) external view returns ( bytes32 );\\n  function controllers ( address ) external view returns ( bool );\\n  function ens (  ) external view returns ( address );\\n  function getApproved ( uint256 tokenId ) external view returns ( address );\\n  function isApprovedForAll ( address owner, address operator ) external view returns ( bool );\\n  function isOwner (  ) external view returns ( bool );\\n  function nameExpires ( uint256 id ) external view returns ( uint256 );\\n  function owner (  ) external view returns ( address );\\n  function ownerOf ( uint256 tokenId ) external view returns ( address );\\n  function reclaim ( uint256 id, address owner ) external;\\n  function register ( uint256 id, address owner, uint256 duration ) external returns ( uint256 );\\n  function registerOnly ( uint256 id, address owner, uint256 duration ) external returns ( uint256 );\\n  function removeController ( address controller ) external;\\n  function renew ( uint256 id, uint256 duration ) external returns ( uint256 );\\n  function renounceOwnership (  ) external;\\n  function safeTransferFrom ( address from, address to, uint256 tokenId ) external;\\n  function safeTransferFrom ( address from, address to, uint256 tokenId, bytes calldata _data ) external;\\n  function setApprovalForAll ( address to, bool approved ) external;\\n  function setResolver ( address resolver ) external;\\n  function supportsInterface ( bytes4 interfaceID ) external view returns ( bool );\\n  function transferFrom ( address from, address to, uint256 tokenId ) external;\\n  function transferOwnership ( address newOwner ) external;\\n}\\n\\ninterface ENSRegistryWithFallback {\\n  function isApprovedForAll ( address owner, address operator ) external view returns ( bool );\\n  function old (  ) external view returns ( address );\\n  function owner ( bytes32 node ) external view returns ( address );\\n  function recordExists ( bytes32 node ) external view returns ( bool );\\n  function resolver ( bytes32 node ) external view returns ( address );\\n  function setApprovalForAll ( address operator, bool approved ) external;\\n  function setOwner ( bytes32 node, address owner ) external;\\n  function setRecord ( bytes32 node, address owner, address resolver, uint64 ttl ) external;\\n  function setResolver ( bytes32 node, address resolver ) external;\\n  function setSubnodeOwner ( bytes32 node, bytes32 label, address owner ) external returns ( bytes32 );\\n  function setSubnodeRecord ( bytes32 node, bytes32 label, address owner, address resolver, uint64 ttl ) external;\\n  function setTTL ( bytes32 node, uint64 ttl ) external;\\n  function ttl ( bytes32 node ) external view returns ( uint64 );\\n}\\n\\npragma experimental ABIEncoderV2;\\n\\ninterface PublicResolver {\\n  function ABI ( bytes32 node, uint256 contentTypes ) external view returns ( uint256, bytes memory );\\n  function addr ( bytes32 node ) external view returns ( address );\\n  function addr ( bytes32 node, uint256 coinType ) external view returns ( bytes memory );\\n  function authorisations ( bytes32, address, address ) external view returns ( bool );\\n  function clearDNSZone ( bytes32 node ) external;\\n  function contenthash ( bytes32 node ) external view returns ( bytes memory );\\n  function dnsRecord ( bytes32 node, bytes32 name, uint16 resource ) external view returns ( bytes memory );\\n  function hasDNSRecords ( bytes32 node, bytes32 name ) external view returns ( bool );\\n  function interfaceImplementer ( bytes32 node, bytes4 interfaceID ) external view returns ( address );\\n  function multicall ( bytes[] calldata data ) external returns ( bytes[] memory results );\\n  function name ( bytes32 node ) external view returns ( string memory );\\n  function pubkey ( bytes32 node ) external view returns ( bytes32 x, bytes32 y );\\n  function setABI ( bytes32 node, uint256 contentType, bytes calldata data ) external;\\n  function setAddr ( bytes32 node, uint256 coinType, bytes calldata a ) external;\\n  function setAddr ( bytes32 node, address a ) external;\\n  function setAuthorisation ( bytes32 node, address target, bool isAuthorised ) external;\\n  function setContenthash ( bytes32 node, bytes calldata hash ) external;\\n  function setDNSRecords ( bytes32 node, bytes calldata data ) external;\\n  function setInterface ( bytes32 node, bytes4 interfaceID, address implementer ) external;\\n  function setName ( bytes32 node, string calldata name ) external;\\n  function setPubkey ( bytes32 node, bytes32 x, bytes32 y ) external;\\n  function setText ( bytes32 node, string calldata key, string calldata value ) external;\\n  function supportsInterface ( bytes4 interfaceID ) external pure returns ( bool );\\n  function text ( bytes32 node, string calldata key ) external view returns ( string memory );\\n}\\n\\n// Chainlink Gas Price Oracle\\n// Authorized proxy link contract from: https://docs.chain.link/docs/ethereum-addresses#config\\ncontract EACAggregatorProxy {\\n  function acceptOwnership (  ) external {  }\\n  function accessController (  ) external view returns ( address ) {  }\\n  function aggregator (  ) external view returns ( address ) {  }\\n  function confirmAggregator ( address _aggregator ) external {  }\\n  function decimals (  ) external view returns ( uint8 ) {  }\\n  function description (  ) external view returns ( string memory ) {  }\\n  function getAnswer ( uint256 _roundId ) external view returns ( int256 ) {  }\\n  function getRoundData ( uint80 _roundId ) external view returns ( uint80 roundId, int256 answer, uint256 startedAt, uint256 updatedAt, uint80 answeredInRound ) {  }\\n  function getTimestamp ( uint256 _roundId ) external view returns ( uint256 ) {  }\\n  function latestAnswer (  ) external view returns ( int256 ) {\\n      // Stub out 55 gwei static gas price for querying on testnet\\n      return 55555555555; //   return 0x0000000000000000000000000000000000000000000000000000000d4576fa00;\\n  }\\n  function latestRound (  ) external view returns ( uint256 ) {  }\\n  function latestRoundData (  ) external view returns ( uint80 roundId, int256 answer, uint256 startedAt, uint256 updatedAt, uint80 answeredInRound ) {  }\\n  function latestTimestamp (  ) external view returns ( uint256 ) {  }\\n  function owner (  ) external view returns ( address ) {  }\\n  function phaseAggregators ( uint16 ) external view returns ( address ) {  }\\n  function phaseId (  ) external view returns ( uint16 ) {  }\\n  function proposeAggregator ( address _aggregator ) external {  }\\n  function proposedAggregator (  ) external view returns ( address ) {  }\\n  function proposedGetRoundData ( uint80 _roundId ) external view returns ( uint80 roundId, int256 answer, uint256 startedAt, uint256 updatedAt, uint80 answeredInRound ) {  }\\n  function proposedLatestRoundData (  ) external view returns ( uint80 roundId, int256 answer, uint256 startedAt, uint256 updatedAt, uint80 answeredInRound ) {  }\\n  function setController ( address _accessController ) external {  }\\n  function transferOwnership ( address _to ) external {  }\\n  function version (  ) external view returns ( uint256 ) {  }\\n}\\n\"},\"Ticker.sol\":{\"content\":\"//SPDX-License-Identifier: Unlicense\\npragma solidity ^0.8.0;\\n\\nimport \\\"./Interfaces.sol\\\";\\n\\ncontract Ticker {\\n    ENSRegistryWithFallback ens;\\n\\n    constructor() {\\n        ens = ENSRegistryWithFallback(0x00000000000C2E074eC69A0dFb2997BA6C7d2e1e); \\n        // The ens registry address is shared across testnets and mainnet\\n    }\\n\\n    // Enter \\u0027uni\\u0027 to lookup uni.tkn.eth\\n    function addressFor(string calldata _name) public view returns (address) {\\n        bytes32 namehash = 0x0000000000000000000000000000000000000000000000000000000000000000;\\n        namehash = keccak256(\\n            abi.encodePacked(namehash, keccak256(abi.encodePacked(\\u0027eth\\u0027)))\\n        );\\n        namehash = keccak256(\\n            abi.encodePacked(namehash, keccak256(abi.encodePacked(\\u0027tkn\\u0027)))\\n        );\\n        namehash = keccak256(\\n            abi.encodePacked(namehash, keccak256(abi.encodePacked(_name)))\\n        );\\n        address resolverAddr = ens.resolver(namehash);\\n        PublicResolver resolver = PublicResolver(resolverAddr);\\n        return resolver.addr(namehash);\\n    }\\n\\n    struct Metadata {\\n        address contractAddress;\\n        string url;\\n        string avatar;\\n        string description;\\n        string notice;\\n        string twitter;\\n        string github;\\n    }\\n\\n    function infoFor(string calldata _name) public view returns (Metadata memory) {\\n        bytes32 namehash = 0x0000000000000000000000000000000000000000000000000000000000000000;\\n        namehash = keccak256(\\n            abi.encodePacked(namehash, keccak256(abi.encodePacked(\\u0027eth\\u0027)))\\n        );\\n        namehash = keccak256(\\n            abi.encodePacked(namehash, keccak256(abi.encodePacked(\\u0027tkn\\u0027)))\\n        );\\n        namehash = keccak256(\\n            abi.encodePacked(namehash, keccak256(abi.encodePacked(_name)))\\n        );\\n        address resolverAddr = ens.resolver(namehash);\\n        PublicResolver resolver = PublicResolver(resolverAddr);\\n        return Metadata(\\n            resolver.addr(namehash),\\n            resolver.text(namehash, \\\"url\\\"),\\n            resolver.text(namehash, \\\"avatar\\\"),\\n            resolver.text(namehash, \\\"description\\\"),\\n            resolver.text(namehash, \\\"notice\\\"),\\n            resolver.text(namehash, \\\"com.twitter\\\"),\\n            resolver.text(namehash, \\\"com.github\\\")\\n        );\\n\\n    }\\n    \\n    // Calculate the namehash offchain using eth-ens-namehash to save gas costs.\\n    // Better for write queries that require gas\\n    // Library: https://npm.runkit.com/eth-ens-namehash\\n    function gasEfficientFetch(bytes32 namehash) public view returns (address) {\\n        address resolverAddr = ens.resolver(namehash);\\n        PublicResolver resolver = PublicResolver(resolverAddr);\\n        return resolver.addr(namehash);\\n    }\\n}\\n\"}}","ABI":"[{\"inputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"inputs\":[{\"internalType\":\"string\",\"name\":\"_name\",\"type\":\"string\"}],\"name\":\"addressFor\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"namehash\",\"type\":\"bytes32\"}],\"name\":\"gasEfficientFetch\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"string\",\"name\":\"_name\",\"type\":\"string\"}],\"name\":\"infoFor\",\"outputs\":[{\"components\":[{\"internalType\":\"address\",\"name\":\"contractAddress\",\"type\":\"address\"},{\"internalType\":\"string\",\"name\":\"url\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"avatar\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"description\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"notice\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"twitter\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"github\",\"type\":\"string\"}],\"internalType\":\"struct Ticker.Metadata\",\"name\":\"\",\"type\":\"tuple\"}],\"stateMutability\":\"view\",\"type\":\"function\"}]","ContractName":"Ticker","CompilerVersion":"v0.8.4+commit.c7e474f2","OptimizationUsed":"0","Runs":"200","ConstructorArguments":"","EVMVersion":"Default","Library":"","LicenseType":"None","Proxy":"0","Implementation":"","SwarmSource":"ipfs://4dc7e7f2d65f9dc881d2ce3cb7be5a6cf0aaf4ff75e912ca7c254cd972c37a2c"}]}