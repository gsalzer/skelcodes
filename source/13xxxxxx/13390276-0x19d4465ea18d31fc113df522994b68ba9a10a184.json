{"status":"1","message":"OK","result":[{"SourceCode":"{{\r\n  \"language\": \"Solidity\",\r\n  \"sources\": {\r\n    \"contracts/USMWETHProxy.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: GPL-3.0-or-later\\npragma solidity ^0.8.0;\\n\\nimport \\\"acc-erc20/contracts/IERC20.sol\\\";\\nimport \\\"./external/IWETH9.sol\\\";\\nimport \\\"./IUSM.sol\\\";\\n\\n/**\\n * @title USM Weth Frontend Proxy\\n * @author Alberto Cuesta CaÃ±ada, Jacob Eliosoff, Alex Roan\\n */\\ncontract USMWETHProxy {\\n    IUSM public immutable usm;\\n    IERC20 public immutable fum;\\n    IWETH9 public immutable weth;\\n\\n    constructor(IUSM usm_, IWETH9 weth_)\\n    {\\n        usm = usm_;\\n        fum = usm_.fum();\\n        weth = weth_;\\n    }\\n\\n    /**\\n     * @notice The USM contract's `burn`/`defund` functions will send ETH back to this contract, and the WETH9 contract will send\\n     * ETH here on `weth.withdraw` using this function.  If anyone else tries to send ETH here, reject it.\\n     */\\n    receive() external payable {\\n        require(msg.sender == address(usm) || msg.sender == address(weth), \\\"Don't transfer here\\\");\\n    }\\n\\n    /**\\n     * @notice Accepts WETH, converts it to ETH, and passes it to `usm.mint`.\\n     * @param to address to send the minted USM to.\\n     * @param ethIn WETH to deduct.\\n     * @param minUsmOut Minimum accepted USM for a successful mint.\\n     */\\n    function mint(address to, uint ethIn, uint minUsmOut)\\n        external returns (uint usmOut)\\n    {\\n        require(weth.transferFrom(msg.sender, address(this), ethIn), \\\"WETH transfer fail\\\");\\n        weth.withdraw(ethIn);\\n        usmOut = usm.mint{ value: ethIn }(to, minUsmOut);\\n    }\\n\\n    /**\\n     * @notice Burn USM in exchange for ETH, which is then converted to and returned as WETH.\\n     * @param to address to send the WETH to.\\n     * @param usmToBurn Amount of USM to burn.\\n     * @param minEthOut Minimum accepted WETH for a successful burn.\\n     */\\n    function burn(address to, uint usmToBurn, uint minEthOut)\\n        external returns (uint ethOut)\\n    {\\n        usm.transferFrom(msg.sender, address(this), usmToBurn);\\n        ethOut = usm.burn(payable(this), usmToBurn, minEthOut);\\n        weth.deposit{ value: ethOut }();\\n        require(weth.transfer(to, ethOut), \\\"WETH transfer fail\\\");\\n    }\\n\\n    /**\\n     * @notice Accepts WETH, converts it to ETH, and funds the pool by passing the ETH to `usm.fund`.\\n     * @param to address to send the minted FUM to.\\n     * @param ethIn WETH to deduct.\\n     * @param minFumOut Minimum accepted FUM for a successful mint.\\n     */\\n    function fund(address to, uint ethIn, uint minFumOut)\\n        external returns (uint fumOut)\\n    {\\n        require(weth.transferFrom(msg.sender, address(this), ethIn), \\\"WETH transfer fail\\\");\\n        weth.withdraw(ethIn);\\n        fumOut = usm.fund{ value: ethIn }(to, minFumOut);\\n    }\\n\\n    /**\\n     * @notice Defunds the pool by redeeming FUM in exchange for equivalent ETH from the pool, which is then converted to and\\n     * returned as WETH.\\n     * @param to address to send the WETH to.\\n     * @param fumToBurn Amount of FUM to burn.\\n     * @param minEthOut Minimum accepted ETH for a successful defund.\\n     */\\n    function defund(address to, uint fumToBurn, uint minEthOut)\\n        external returns (uint ethOut)\\n    {\\n        fum.transferFrom(msg.sender, address(this), fumToBurn);\\n        ethOut = usm.defund(payable(this), fumToBurn, minEthOut);\\n        weth.deposit{ value: ethOut }();\\n        require(weth.transfer(to, ethOut), \\\"WETH transfer fail\\\");\\n    }\\n}\\n\"\r\n    },\r\n    \"acc-erc20/contracts/IERC20.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC20 standard as defined in the EIP.\\n */\\ninterface IERC20 {\\n    /**\\n     * @dev Returns the amount of tokens in existence.\\n     */\\n    function totalSupply() external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the amount of tokens owned by `account`.\\n     */\\n    function balanceOf(address account) external view returns (uint256);\\n\\n    /**\\n     * @dev Moves `amount` tokens from the caller's account to `recipient`.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transfer(address recipient, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Returns the remaining number of tokens that `spender` will be\\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\\n     * zero by default.\\n     *\\n     * This value changes when {approve} or {transferFrom} are called.\\n     */\\n    function allowance(address owner, address spender) external view returns (uint256);\\n\\n    /**\\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\\n     * that someone may use both the old and the new allowance by unfortunate\\n     * transaction ordering. One possible solution to mitigate this race\\n     * condition is to first reduce the spender's allowance to 0 and set the\\n     * desired value afterwards:\\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address spender, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Moves `amount` tokens from `sender` to `recipient` using the\\n     * allowance mechanism. `amount` is then deducted from the caller's\\n     * allowance.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(address sender, address recipient, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\\n     * another (`to`).\\n     *\\n     * Note that `value` may be zero.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 value);\\n\\n    /**\\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\\n     * a call to {approve}. `value` is the new allowance.\\n     */\\n    event Approval(address indexed owner, address indexed spender, uint256 value);\\n}\"\r\n    },\r\n    \"contracts/external/IWETH9.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: GPL-3.0-or-later\\npragma solidity ^0.8.0;\\n\\nimport \\\"acc-erc20/contracts/IERC20.sol\\\";\\n\\ninterface IWETH9 is IERC20 {\\n    function deposit() external payable;\\n    function withdraw(uint) external;\\n}\\n\"\r\n    },\r\n    \"contracts/IUSM.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: GPL-3.0-or-later\\npragma solidity ^0.8.0;\\n\\nimport \\\"acc-erc20/contracts/IERC20.sol\\\";\\nimport \\\"./IFUM.sol\\\";\\nimport \\\"./oracles/Oracle.sol\\\";\\n\\ninterface IUSM is IERC20, Oracle {\\n    event UnderwaterStatusChanged(bool underwater);\\n    event BidAskAdjustmentChanged(uint adjustment);\\n    event PriceChanged(uint price, uint oraclePrice);\\n\\n    enum Side {Buy, Sell}\\n\\n    // ____________________ External transactional functions ____________________\\n\\n    /**\\n     * @notice Mint new USM, sending it to the given address, and only if the amount minted >= `minUsmOut`.  The amount of ETH\\n     * is passed in as `msg.value`.\\n     * @param to address to send the USM to.\\n     * @param minUsmOut Minimum accepted USM for a successful mint.\\n     */\\n    function mint(address to, uint minUsmOut) external payable returns (uint usmOut);\\n\\n    /**\\n     * @dev Burn USM in exchange for ETH.\\n     * @param to address to send the ETH to.\\n     * @param usmToBurn Amount of USM to burn.\\n     * @param minEthOut Minimum accepted ETH for a successful burn.\\n     */\\n    function burn(address payable to, uint usmToBurn, uint minEthOut) external returns (uint ethOut);\\n\\n    /**\\n     * @notice Funds the pool with ETH, minting new FUM and sending it to the given address, but only if the amount minted >=\\n     * `minFumOut`.  The amount of ETH is passed in as `msg.value`.\\n     * @param to address to send the FUM to.\\n     * @param minFumOut Minimum accepted FUM for a successful fund.\\n     */\\n    function fund(address to, uint minFumOut) external payable returns (uint fumOut);\\n\\n    /**\\n     * @notice Defunds the pool by redeeming FUM in exchange for equivalent ETH from the pool.\\n     * @param to address to send the ETH to.\\n     * @param fumToBurn Amount of FUM to burn.\\n     * @param minEthOut Minimum accepted ETH for a successful defund.\\n     */\\n    function defund(address payable to, uint fumToBurn, uint minEthOut) external returns (uint ethOut);\\n\\n    /**\\n     * @notice Defunds the pool by redeeming FUM in exchange for equivalent ETH from the pool. Usable only by FUM.\\n     * @param from address to deduct the FUM from.\\n     * @param to address to send the ETH to.\\n     * @param fumToBurn Amount of FUM to burn.\\n     * @param minEthOut Minimum accepted ETH for a successful defund.\\n     */\\n    function defundFrom(address from, address payable to, uint fumToBurn, uint minEthOut) external returns (uint ethOut);\\n\\n    // ____________________ External informational view functions ____________________\\n\\n    /**\\n     * @return fum_ The FUM instance\\n     */\\n    function fum() external view returns (IFUM fum_);\\n\\n    /**\\n     * @notice Total amount of ETH in the pool (ie, in the contract).\\n     * @return pool ETH pool\\n     */\\n    function ethPool() external view returns (uint pool);\\n\\n    /**\\n     * @notice Total amount of ETH in the pool (ie, in the contract).\\n     * @return supply the total supply of FUM.  Users of this `IUSM` interface, like `USMView`, need to call this rather than\\n     * `usm.fum().totalSupply()` directly, because `IUSM` doesn't (and shouldn't) know about the `FUM` type.\\n     */\\n    function fumTotalSupply() external view returns (uint supply);\\n\\n    /**\\n     * @notice The current bid/ask adjustment, equal to the stored value decayed over time towards its stable value, 1.  This\\n     * adjustment is intended as a measure of \\\"how long-ETH recent user activity has been\\\", so that we can slide price\\n     * accordingly: if recent activity was mostly long-ETH (`fund()` and `burn()`), raise FUM buy price/reduce USM sell price;\\n     * if recent activity was short-ETH (`defund()` and `mint()`), reduce FUM sell price/raise USM buy price.\\n     * @return adjustment The sliding-price bid/ask adjustment\\n     */\\n    function bidAskAdjustment() external view returns (uint adjustment);\\n\\n    function timeSystemWentUnderwater() external view returns (uint timestamp);\\n\\n    function isDuringPrefund() external view returns (bool duringPrefund);\\n\\n    // ____________________ External helper pure functions (for functions above) ____________________\\n\\n    /**\\n     * @notice Calculate the amount of ETH in the buffer.\\n     * @return buffer ETH buffer\\n     */\\n    function ethBuffer(uint ethUsdPrice, uint ethInPool, uint usmSupply, bool roundUp) external pure returns (int buffer);\\n\\n    /**\\n     * @notice Calculate debt ratio for a given eth to USM price: ratio of the outstanding USM (amount of USM in total supply),\\n     * to the current ETH pool value in USD (ETH qty * ETH/USD price).\\n     * @return ratio Debt ratio (or 0 if there's currently 0 ETH in the pool/price = 0: these should never happen after launch)\\n     */\\n    function debtRatio(uint ethUsdPrice, uint ethInPool, uint usmSupply) external pure returns (uint ratio);\\n\\n    /**\\n     * @notice Convert ETH amount to USM using a ETH/USD price.\\n     * @param ethAmount The amount of ETH to convert\\n     * @return usmOut The amount of USM\\n     */\\n    function ethToUsm(uint ethUsdPrice, uint ethAmount, bool roundUp) external pure returns (uint usmOut);\\n\\n    /**\\n     * @notice Convert USM amount to ETH using a ETH/USD price.\\n     * @param usmAmount The amount of USM to convert\\n     * @return ethOut The amount of ETH\\n     */\\n    function usmToEth(uint ethUsdPrice, uint usmAmount, bool roundUp) external pure returns (uint ethOut);\\n\\n    /**\\n     * @return price The ETH/USD price, adjusted by the `bidAskAdjustment` (if applicable) for the given buy/sell side.\\n     */\\n    function adjustedEthUsdPrice(Side side, uint ethUsdPrice, uint adjustment) external pure returns (uint price);\\n\\n    /**\\n     * @notice Calculate the *marginal* price of USM (in ETH terms): that is, of the next unit, before the price start sliding.\\n     * @return price USM price in ETH terms\\n     */\\n    function usmPrice(Side side, uint ethUsdPrice) external pure returns (uint price);\\n\\n    /**\\n     * @notice Calculate the *marginal* price of FUM (in ETH terms): that is, of the next unit, before the price starts rising.\\n     * @param usmEffectiveSupply should be either the actual current USM supply, or, when calculating the FUM *buy* price, the\\n     * return value of `usmSupplyForFumBuys()`.\\n     * @return price FUM price in ETH terms\\n     */\\n    function fumPrice(Side side, uint ethUsdPrice, uint ethInPool, uint usmEffectiveSupply, uint fumSupply, bool prefund) external pure returns (uint price);\\n\\n    /**\\n     * @return timeSystemWentUnderwater_ The time at which we first detected the system was underwater (debt ratio >\\n     * `MAX_DEBT_RATIO`), based on the current oracle price and pool ETH and USM; or 0 if we're not currently underwater.\\n     * @return usmSupplyForFumBuys The current supply of USM *for purposes of calculating the FUM buy price,* and therefore\\n     * for `fumFromFund()`.  The \\\"supply for FUM buys\\\" is the *lesser* of the actual current USM supply, and the USM amount\\n     * that would make debt ratio = `MAX_DEBT_RATIO`.  Example:\\n     *\\n     * 1. Suppose the system currently contains 50 ETH at price $1,000 (total pool value: $50,000), with an actual USM supply\\n     *    of 30,000 USM.  Then debt ratio = 30,000 / $50,000 = 60%: < MAX 80%, so `usmSupplyForFumBuys` = 30,000.\\n     * 2. Now suppose ETH/USD halves to $500.  Then pool value halves to $25,000, and debt ratio doubles to 120%.  Now\\n     *    `usmSupplyForFumBuys` instead = 20,000: the USM quantity at which debt ratio would equal 80% (20,000 / $25,000).\\n     *    (Call this the \\\"80% supply\\\".)\\n     * 3. ...Except, we also gradually increase the supply over time while we remain underwater.  This has the effect of\\n     *    *reducing* the FUM buy price inferred from that supply (higher JacobUSM supply -> smaller buffer -> lower FUM price).\\n     *    The math we use gradually increases the supply from its initial \\\"80% supply\\\" value, where debt ratio =\\n     *    `MAX_DEBT_RATIO` (20,000 above), to a theoretical maximum \\\"100% supply\\\" value, where debt ratio = 100% (in the $500\\n     *    example above, this would be 25,000).  (Or the actual supply, whichever is lower: we never increase\\n     *    `usmSupplyForFumBuys` above `usmActualSupply`.)  The climb from the initial 80% supply (20,000) to the 100% supply\\n     *    (25,000) is at a rate that brings it \\\"halfway closer per `MIN_FUM_BUY_PRICE_HALF_LIFE` (eg, 1 day)\\\": so three days\\n     *    after going underwater, the supply returned will be 25,000 - 0.5**3 * (25,000 - 20,000) = 24,375.\\n     */\\n    function checkIfUnderwater(uint usmActualSupply, uint ethPool_, uint ethUsdPrice, uint oldTimeUnderwater, uint currentTime) external pure returns (uint timeSystemWentUnderwater_, uint usmSupplyForFumBuys, uint debtRatio_);\\n}\\n\"\r\n    },\r\n    \"contracts/IFUM.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: GPL-3.0-or-later\\npragma solidity ^0.8.0;\\n\\nimport \\\"acc-erc20/contracts/IERC20.sol\\\";\\n\\ninterface IFUM is IERC20 {\\n    /**\\n     * @notice Mint new FUM to the recipient\\n     *\\n     * @param recipient address to mint to\\n     * @param amount amount to mint\\n     */\\n    function mint(address recipient, uint amount) external;\\n    /**\\n     * @notice Burn FUM from holder\\n     *\\n     * @param holder address to burn from\\n     * @param amount amount to burn\\n     */\\n    function burn(address holder, uint amount) external;\\n}\\n\"\r\n    },\r\n    \"contracts/oracles/Oracle.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: GPL-3.0-or-later\\npragma solidity ^0.8.0;\\n\\ninterface Oracle {\\n    /**\\n     * @return price WAD-scaled - 18 dec places\\n     */\\n    function latestPrice() external view returns (uint price);\\n}\\n\"\r\n    }\r\n  },\r\n  \"settings\": {\r\n    \"optimizer\": {\r\n      \"enabled\": true,\r\n      \"runs\": 1000000\r\n    },\r\n    \"outputSelection\": {\r\n      \"*\": {\r\n        \"*\": [\r\n          \"evm.bytecode\",\r\n          \"evm.deployedBytecode\",\r\n          \"devdoc\",\r\n          \"userdoc\",\r\n          \"metadata\",\r\n          \"abi\"\r\n        ]\r\n      }\r\n    },\r\n    \"metadata\": {\r\n      \"useLiteralContent\": true\r\n    },\r\n    \"libraries\": {}\r\n  }\r\n}}","ABI":"[{\"inputs\":[{\"internalType\":\"contract IUSM\",\"name\":\"usm_\",\"type\":\"address\"},{\"internalType\":\"contract IWETH9\",\"name\":\"weth_\",\"type\":\"address\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"usmToBurn\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"minEthOut\",\"type\":\"uint256\"}],\"name\":\"burn\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"ethOut\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"fumToBurn\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"minEthOut\",\"type\":\"uint256\"}],\"name\":\"defund\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"ethOut\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"fum\",\"outputs\":[{\"internalType\":\"contract IERC20\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"ethIn\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"minFumOut\",\"type\":\"uint256\"}],\"name\":\"fund\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"fumOut\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"ethIn\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"minUsmOut\",\"type\":\"uint256\"}],\"name\":\"mint\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"usmOut\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"usm\",\"outputs\":[{\"internalType\":\"contract IUSM\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"weth\",\"outputs\":[{\"internalType\":\"contract IWETH9\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"stateMutability\":\"payable\",\"type\":\"receive\"}]","ContractName":"USMWETHProxy","CompilerVersion":"v0.8.9+commit.e5eed63a","OptimizationUsed":"1","Runs":"1000000","ConstructorArguments":"0000000000000000000000002a7fff44c19f39468064ab5e5c304de01d591675000000000000000000000000c02aaa39b223fe8d0a0e5c4f27ead9083c756cc2","EVMVersion":"Default","Library":"","LicenseType":"","Proxy":"0","Implementation":"","SwarmSource":""}]}